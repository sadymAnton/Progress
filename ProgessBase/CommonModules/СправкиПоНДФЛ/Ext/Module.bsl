
////////////////////////////////////////////////////////////////////////////////

Процедура ЗаписатьУзелДереваXMLВXML(СтрокаДерева, ПотокXML, ПрефиксПространстваИмен = "xsi", URIПространстваИмен = "http://www.w3.org/2001/XMLSchema-instance") Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		
		Если Не ПустаяСтрока(СтрокаДерева.Имя) Тогда
			
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Имя);
			ПотокXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксПространстваИмен, URIПространстваИмен);
			СписокАтрибутов = ПроцедурыПерсонифицированногоУчета.НайтиАтрибуты(СтрокаДерева);
			
			Если СписокАтрибутов <> Неопределено Тогда
				Для каждого СтрокаСАтрибутом Из СписокАтрибутов.Строки Цикл
					ПотокXML.ЗаписатьАтрибут(СтрокаСАтрибутом.Имя, СтрокаСАтрибутом.Значение);
				КонецЦикла;
			КонецЕсли;
			
			ПотокXML.ЗаписатьТекст(СтрокаДерева.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Лист из СтрокаДерева.Строки Цикл
		Если ПроцедурыПерсонифицированногоУчета.СтрокаСАтрибутами(Лист) Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьУзелДереваXMLВXML(Лист, ПотокXML, ПрефиксПространстваИмен, URIПространстваИмен);
	КонецЦикла;
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		Если Не ПустаяСтрока(СтрокаДерева.Имя) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИнформациюВДерево(ДеревоВыгрузки, НаборЗаписей) Экспорт 
	
	Для каждого ЭлементНабора Из НаборЗаписей Цикл
		ИмяЗаписи = ЭлементНабора.Ключ;
		Запись = ЭлементНабора.Значение;
		ТипДанных = Запись.ТипДанных;
		Если ТипДанных = "КОНСТАНТА" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ЧИСЛО" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Формат(Запись.Значение,"ЧЦ=" + Запись.Размер + "; ЧДЦ=" + Запись.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0"))
			
		ИначеЕсли ТипДанных = "СТРОКА" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ДАТА" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ?(Не ЗначениеЗаполнено(Запись.Значение),"00.00.0000", Формат(Запись.Значение,"ДФ=dd.MM.yyyy")))
			
		ИначеЕсли ТипДанных = "ТАБЛИЦА" Тогда	
			
			ПроверятьНеобязательныеПоля = Ложь;
			Для каждого Поле Из Запись.Поля Цикл
				ПроверятьНеобязательныеПоля = Поле.ЭлементНеОбязателен = "Н";
				Если ПроверятьНеобязательныеПоля Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Для каждого СтрокаТЗ Из Запись.Значение Цикл
				
				ВыводитьНеобязательныеПоля = Ложь;
				Если ПроверятьНеобязательныеПоля Тогда
					Для каждого Поле Из Запись.Поля Цикл
						Если Поле.ЭлементНеОбязателен = "Н" Тогда
							ВыводитьНеобязательныеПоля = ЗначениеЗаполнено(СтрокаТЗ[Поле.ИмяПоля]);
							Если ВыводитьНеобязательныеПоля Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				
				Атрибуты = Новый Структура;
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ЭлементНеОбязателен = "Н" И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					Данные = СтрокаТЗ[Поле.ИмяПоля];
					
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						Если Не ЗначениеЗаполнено(Данные) Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					
					Если Поле.ТипЭлемента = "А" Тогда
						Атрибуты.Вставить(Поле.ИмяПоля, Данные);
					КонецЕсли;
					
				КонецЦикла;
				
				ВеткаСтрокиТЗ = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты);
				
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ТипЭлемента = "А" Тогда
						Продолжить;
					КонецЕсли;
					
					Если Поле.ЭлементНеОбязателен = "Н" И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					ДобавитьИнформациюВДерево(ВеткаСтрокиТЗ, СтрокаТЗ[Поле.ИмяПоля])
					
				КонецЦикла;
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "СТРУКТУРА" Тогда	
			
			Атрибуты = Новый Структура;
			Для каждого Поле Из Запись.Поля Цикл
				
				Данные = Запись.Значение[Поле.ИмяПоля];
				
				Если Поле.ЭлементНеОбязателен = "Н" И Не ЗначениеЗаполнено(Данные) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					Если Не ЗначениеЗаполнено(Данные) Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
				Атрибуты.Вставить(Поле.ИмяПоля, Данные);
			КонецЦикла; 
				
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты);
			
		ИначеЕсли ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			Значение = Запись.Значение;
			
			Атрибуты = Новый Структура;
			Для каждого Поле Из Значение Цикл
				Если Поле.Значение.ТипЭлемента = "А" Тогда
					Данные = Поле.Значение.Значение;
					Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
						Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
						Если Не ЗначениеЗаполнено(Данные) Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					Атрибуты.Вставить(Поле.Ключ, Данные);
					Значение.Удалить(Поле.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты), Значение)
			
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ДанныеВыгружаемыеКакАтрибуты(СтруктураДанных) Экспорт

	Атрибуты = Новый Структура;
	Для каждого Поле Из СтруктураДанных Цикл
		Если Поле.Значение.ТипЭлемента = "А" Тогда
			Данные = Поле.Значение.Значение;
			Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
				Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
			ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
				Если Не ЗначениеЗаполнено(Данные) Тогда
					Данные = ""
				Иначе
					Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
				КонецЕсли;
			КонецЕсли;
			Атрибуты.Вставить(Поле.Ключ, Данные);
			СтруктураДанных.Удалить(Поле.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Атрибуты
	
КонецФункции // ДанныеВыгружаемыеКакАтрибуты()

// Загружает формат набора записей файла сведений о доходах физлиц из заданного табличного документа
//
Функция ЗагрузитьФорматНабораЗаписей(Знач МакетФормата, Знач ИмяНабораЗаписей, ЭтоФизЛицо = Ложь) Экспорт

	ФорматНабора = Новый Структура();
	
	ОбластьНабораЗаписей = МакетФормата.ПолучитьОбласть(ИмяНабораЗаписей);
	
	Для НСтр = 1 По ОбластьНабораЗаписей.ВысотаТаблицы Цикл
		
		ФорматЗаписи = Новый Структура("ТипДанных, Размер, РазрядностьДробнойЧасти, Поля, Значение, ТипЭлемента, ЭлементНеОбязателен");
		
		// имя записи хранится в 4 колонке
		ИмяЗаписи =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 4).Текст);
		
		// тип элемента хранится в 5 колонке
		ТипЭлемента =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 5).Текст);
		
		// тип данных хранится во 2 колонке
		ТипДанных = Врег(СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 2).Текст));
		
		Если ТипДанных = "" Тогда// Если тип данных не задан, то встретили строку - группировку
			Продолжить;
		КонецЕсли; 
		
		ПозицияРазделителя = Найти(ТипДанных,"/");
		Если ПозицияРазделителя <> 0 Тогда
			Если ЭтоФизЛицо Тогда
				ТипДанных = Сред(ТипДанных, ПозицияРазделителя + 1)
			Иначе
				ТипДанных = Лев(ТипДанных, ПозицияРазделителя - 1)
			КонецЕсли;	
		КонецЕсли;
		
		ФорматЗаписи.ТипДанных =  ТипДанных;
		ФорматЗаписи.ТипЭлемента = ТипЭлемента;
		
		// размер хранится в 3 колонке
		СтрРазмерПоля =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
		
		Если ФорматЗаписи.ТипДанных = "КОНСТАНТА" тогда
			
			// в колонке "размер" должно указываться значение константы
			ФорматЗаписи.Значение = СтрРазмерПоля;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ЧИСЛО" тогда
			
			ПозицияТочки = Найти(СтрРазмерПоля,".");
			Если ПозицияТочки<>0 тогда
				ФорматЗаписи.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
				ФорматЗаписи.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
			Иначе	
				ФорматЗаписи.Размер = Число(СтрРазмерПоля);
				ФорматЗаписи.РазрядностьДробнойЧасти = 0;
			КонецЕсли;	 
			
			ФорматЗаписи.Значение = 0;

		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРОКА" тогда
			
			ФорматЗаписи.Размер = Число(СтрРазмерПоля);
			
			ФорматЗаписи.Значение = "";
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ДАТА" тогда
			
			ФорматЗаписи.Значение = '00010101';
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ТАБЛИЦА" тогда	
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ТаблицаФорматаНабораЗаписей(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый ТаблицаЗначений;
			
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				Если Поле.ТипДанных = "ТАБЛИЦА" Тогда
					ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля);
				Иначе
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						ОписаниеТиповПоля = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(Поле.Размер, Поле.РазрядностьДробнойЧасти);
					ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
						ОписаниеТиповПоля = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(Поле.Размер);
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						ОписаниеТиповПоля = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
					КонецЕсли; 
					ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля, ОписаниеТиповПоля);
				КонецЕсли; 
			
			КонецЦикла; 
			
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРУКТУРА" тогда	
			
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					ИмяЗаписи = Сред(ИмяЗаписи, ПозицияРазделителя + 1)
				Иначе
					ИмяЗаписи = Лев(ИмяЗаписи, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			ПозицияРазделителя = Найти(СтрРазмерПоля,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					СтрРазмерПоля = Сред(СтрРазмерПоля, ПозицияРазделителя + 1)
				Иначе
					СтрРазмерПоля = Лев(СтрРазмерПоля, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ТаблицаФорматаНабораЗаписей(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый Структура;
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				ПустоеЗначениеПоля = Неопределено;
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ПустоеЗначениеПоля = 0;
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ПустоеЗначениеПоля = Дата('00010101');
                Иначе
					ПустоеЗначениеПоля = "";
				КонецЕсли; 
				
				ФорматЗаписи.Значение.Вставить(Поле.ИмяПоля, ПустоеЗначениеПоля);
				
			КонецЦикла; 
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			// Имя набора записей хранится в третьей колонке
			ИмяНабора = СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
			ПозицияРазделителя = Найти(ИмяНабора,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					ИмяНабора = Сред(ИмяНабора, ПозицияРазделителя + 1)
				Иначе
					ИмяНабора = Лев(ИмяНабора, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					ИмяЗаписи = Сред(ИмяЗаписи, ПозицияРазделителя + 1)
				Иначе
					ИмяЗаписи = Лев(ИмяЗаписи, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			ФорматЗаписи.Значение = ЗагрузитьФорматНабораЗаписей(МакетФормата, ИмяНабора, ЭтоФизЛицо);
			
		КонецЕсли;	
		
		ФорматНабора.Вставить(ИмяЗаписи, ФорматЗаписи);
		
	КонецЦикла;	
	
	Возврат ФорматНабора;
	
КонецФункции // ЗагрузитьФорматНабораЗаписей()

//Возвращает формат записи файла сведений в виде таблицы с именами и типами полей
//
Функция ТаблицаФорматаНабораЗаписей(Знач МакетФормата, Знач ИмяЗаписи)

	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипДанных",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипЭлемента",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(1));
	ТаблицаФормаЗаписи.Колонки.Добавить("ЭлементНеОбязателен",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(1));

	ОбластьФорматЗаписи = МакетФормата.ПолучитьОбласть(ИмяЗаписи);

	Для НСтр = 1 По ОбластьФорматЗаписи.ВысотаТаблицы Цикл
		
		//имя поля хранится в 4-ой колонке
		ИмяПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 4).Текст);
		Если ИмяПоля <> "" тогда

			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			//тип данных хранится во 2-ой колонке	
			НовоеПоле.ТипДанных = ВРЕГ(СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 2).Текст));
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 3).Текст);
			//Если указан размер поля, сохраним его
			
			Если (НовоеПоле.ТипДанных = "ЧИСЛО" Или НовоеПоле.ТипДанных = "СТРОКА") И СтрРазмерПоля<>"" тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
					НовоеПоле.РазрядностьДробнойЧасти = 0;
				КонецЕсли;	 
			КонецЕсли;	 
			// тип элемента хранится в 5 колонке
			НовоеПоле.ТипЭлемента = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 5).Текст);
			//Признак обязательности элемента хранится в 6-й колонке	
			НовоеПоле.ЭлементНеОбязателен = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 6).Текст);
			
		КонецЕсли;	 

	КонецЦикла;

	Возврат ТаблицаФормаЗаписи;
КонецФункции	 

////////////////////////////////////////////////////////////////////////////////

Функция КодОКАТОизСуммыОКАТОиКПП(ОКАТО_КПП) Экспорт

	Возврат СокрЛП(Лев(ОКАТО_КПП,11))

КонецФункции // ОКАТОизСуммыОКАТОиКПП()

Функция КППизСуммыОКАТОиКПП(ОКАТО_КПП) Экспорт

	Возврат СокрЛП(Прав(ОКАТО_КПП,9))

КонецФункции // КППизСуммыОКАТОиКПП()

// Проверяет, написана ли строка только русскими и латинскими буквами 
//
// Параметры:
//  СтрокаПараметр - строка, проверяемая строка.
//
// Возвращаемое значение:
//		Истина - строка состоит из допустимых символов
//		Ложь - в строке встречаются недопустимые символы
// 
// Описание:
//		Строка проверяется на наличие только русских и латинских букв;
//		кроме того,	допускаются дефис, "Ё", "ё".
//
Функция СтрокаНаписанаРусскимиИлиЛатинскими(Знач СтрокаПараметр) Экспорт
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);	

	КоличествоСимволов = СтрДлина(СтрокаПараметр);
	
	Если  КоличествоСимволов > 0 Тогда
		
		ПервыйСимвол = КодСимвола(Лев(СтрокаПараметр,1)); 
		Русские = (ПервыйСимвол >= 192) или (ПервыйСимвол = 184) или (ПервыйСимвол = 168);
		
		СписокДопустимыхЗначений = Новый Соответствие;
		СписокДопустимыхЗначений.Вставить(184,Истина);   // ё
		СписокДопустимыхЗначений.Вставить(168,Истина);   // Ё
		СписокДопустимыхЗначений.Вставить(45,Истина);   //  "-"

		Для Сч = 1 По КоличествоСимволов Цикл
			
			Код = КодСимвола(Сред(СтрокаПараметр,Сч));   
			
			// Большие латинские буквы: 65 - 90
			// Маленькие латинские буквы: 97 - 122
			// Русские буквы: 192 и больше
			
			//русские:
			Если Русские Тогда
				
				Если (СписокДопустимыхЗначений[Код] = Неопределено) и (Код < 192)  Тогда
					Возврат Ложь;
				КонецЕсли;

			// латинские:	
			ИначеЕсли (Код <> 45) и ((Код < 65) или	(Код > 90) и (Код < 97) или (Код > 122))  Тогда    
				Возврат Ложь;
			КонецЕсли;
				
		КонецЦикла;
		
		Возврат Истина;

	Иначе 	

		Возврат Истина;

	КонецЕсли;
	
КонецФункции // СтрокаНаписанаРусскимиИлиЛатинскими()

Функция СуммаОКАТОиКПП(КодПоОКАТО, КПП) Экспорт 

	Возврат РегламентированнаяОтчетность.ДополнитьСтроку(СокрЛП(КодПоОКАТО), 11, " ", 1) + "/" + РегламентированнаяОтчетность.ДополнитьСтроку(СокрЛП(КПП), 9, " ", 1)

КонецФункции // СуммаОКАТОиКПП()

////////////////////////////////////////////////////////////////////////////////

Процедура ПеренумероватьСправкиДокумента(ДокументОбъект, НомерПервойСправки) Экспорт

	ТаблицаДоходов = ДокументОбъект.СведенияОДоходах.Выгрузить();
	ТаблицаВычетов = ДокументОбъект.СведенияОВычетах.Выгрузить();
	ТаблицаНалогов = ДокументОбъект.СуммыНалогов.Выгрузить();
	ДокументОбъект.СведенияОДоходах.Очистить();
	ДокументОбъект.СведенияОВычетах.Очистить();
	ДокументОбъект.СуммыНалогов.Очистить();
	СтруктураПоиска = Новый Структура("НомерСправки");
	Для каждого СтрокаТЧ Из ДокументОбъект.СотрудникиОрганизации Цикл
		СтруктураПоиска.НомерСправки = СтрокаТЧ.НомерСправки;
		СтрокаТЧ.НомерСправки = НомерПервойСправки;
		Для каждого СтрокаМассива Из ТаблицаДоходов.НайтиСтроки(СтруктураПоиска) Цикл
			НоваяСтрока = ДокументОбъект.СведенияОДоходах.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМассива);
			НоваяСтрока.НомерСправки = НомерПервойСправки;
		КонецЦикла;
		Для каждого СтрокаМассива Из ТаблицаВычетов.НайтиСтроки(СтруктураПоиска) Цикл
			НоваяСтрока = ДокументОбъект.СведенияОВычетах.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМассива);
			НоваяСтрока.НомерСправки = НомерПервойСправки;
		КонецЦикла;
		Для каждого СтрокаМассива Из ТаблицаНалогов.НайтиСтроки(СтруктураПоиска) Цикл
			НоваяСтрока = ДокументОбъект.СуммыНалогов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМассива);
			НоваяСтрока.НомерСправки = НомерПервойСправки;
		КонецЦикла;
		НомерПервойСправки = НомерПервойСправки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеСотрудника(ОписаниеСправки, Дата, НалоговыйПериод) Экспорт

	ФизЛицо = ОписаниеСправки.Сотрудник;
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		ТаблицаСотрудников = Новый ТаблицаЗначений;
		ТаблицаСотрудников.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаСотрудников.Колонки.Добавить("Ставка",Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавки"));
		ЗаполнитьЗначенияСвойств(ТаблицаСотрудников.Добавить(), ОписаниеСправки);
		ЗаполнитьЗначенияСвойств(ОписаниеСправки, ДанныеСотрудников(ТаблицаСотрудников, Дата, НалоговыйПериод)[0]);
	Иначе
		ОписаниеСправки.АдресЗарубежом = "";
		ОписаниеСправки.АдресРФ = "";
		ОписаниеСправки.ВидДокумента = "";
		ОписаниеСправки.Гражданство = "";
		ОписаниеСправки.ДатаРождения = "";
		ОписаниеСправки.Имя = "";
		ОписаниеСправки.Отчество = "";
		ОписаниеСправки.Фамилия = "";
		ОписаниеСправки.ИНН = "";
		ОписаниеСправки.НомерДокумента = "";
		ОписаниеСправки.СерияДокумента = "";
		ОписаниеСправки.СтатусНалогоплательщика = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеСправки(ОписаниеСправки, СведенияОДоходах, СведенияОВычетах, СуммыНалогов, НалоговыйПериод, Организация, ГоловнаяОрганизация, КодОП, Дата, ПоказыватьПоКодуОКТМО = Ложь, ИсключатьДоходыПоЦеннымБумагам = Ложь) Экспорт

	ФизЛицо = ОписаниеСправки.Сотрудник;
	Ставка = ?(НалоговыйПериод < 2011, ОписаниеСправки.Ставка, Неопределено);
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(ФизЛицо) Или (НалоговыйПериод < 2011 и Не ЗначениеЗаполнено(Ставка)) Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСотрудников.Колонки.Добавить("Ставка", Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавки"));
	ТаблицаСотрудников.Колонки.Добавить("НомерСправки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(8, 0)));
	ЗаполнитьЗначенияСвойств(ТаблицаСотрудников.Добавить(), ОписаниеСправки);
	СтруктураДанных = ДанныеОДоходах(ТаблицаСотрудников, НалоговыйПериод, Организация, ГоловнаяОрганизация, КодОП, Дата, ПоказыватьПоКодуОКТМО, ИсключатьДоходыПоЦеннымБумагам);
	Для каждого СтрокаТЗ Из СтруктураДанных.Доходы Цикл
		ЗаполнитьЗначенияСвойств(СведенияОДоходах.Добавить(),СтрокаТЗ);
	КонецЦикла; 
	Для каждого СтрокаТЗ Из СтруктураДанных.Вычеты Цикл
		ЗаполнитьЗначенияСвойств(СведенияОВычетах.Добавить(),СтрокаТЗ);
	КонецЦикла; 
	Если НалоговыйПериод < 2011 Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеСправки, СтруктураДанных.Итоги[0]);
	Иначе
		РеквизитыУведомления = РеквизитыУведомлений(НалоговыйПериод);
		ПерваяСтрока = Истина;
		Для каждого СтрокаТЗ Из СтруктураДанных.Итоги Цикл
			ЗаполнитьЗначенияСвойств(СуммыНалогов.Добавить(),СтрокаТЗ);
			Если ПерваяСтрока Тогда
				ЗаполнитьЗначенияСвойств(ОписаниеСправки, СтрокаТЗ, РеквизитыУведомления);
				ПерваяСтрока = Ложь;
			КонецЕсли;
		КонецЦикла;
		УточнитьСтатусРаботающегоПоПатенту(НалоговыйПериод, СтруктураДанных.Итоги, ОписаниеСправки);
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьСтатусРаботающегоПоПатенту(НалоговыйПериод, СтрокиИтогов, ОписаниеСправки) Экспорт
	
	Если НалоговыйПериод >= Год(ПроведениеРасчетов.ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев()) Тогда
		ЗачтеноАвансовыхПлатежей = 0;
		Для каждого СтрокаИтогов Из СтрокиИтогов Цикл
			ЗачтеноАвансовыхПлатежей = ЗачтеноАвансовыхПлатежей + ?(ЗначениеЗаполнено(СтрокаИтогов.ЗачтеноАвансовыхПлатежей),СтрокаИтогов.ЗачтеноАвансовыхПлатежей,0);
		КонецЦикла;
		Если ЗачтеноАвансовыхПлатежей > 0 
			И ЗначениеЗаполнено(ОписаниеСправки.ДатаУведомленияАвансовыеПлатежи) 
			И ЗначениеЗаполнено(ОписаниеСправки.КодНалоговогоОрганаУведомленияАвансовыеПлатежи) 
			И ЗначениеЗаполнено(ОписаниеСправки.НомерУведомленияАвансовыеПлатежи) 
			И ОписаниеСправки.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Резидент Тогда
			
			ОписаниеСправки.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НерезидентРаботающийНаОснованииПатента
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыУведомлений(НалоговыйПериод) Экспорт
	
	РеквизитыУведомления = "ДатаУведомления,КодНалоговогоОрганаУведомления,НомерУведомления";
	Если НалоговыйПериод > 2014 Тогда
		РеквизитыУведомления = РеквизитыУведомления + ",ДатаУведомленияАвансовыеПлатежи,КодНалоговогоОрганаУведомленияАвансовыеПлатежи,НомерУведомленияАвансовыеПлатежи";
	КонецЕсли;
	Если НалоговыйПериод > 2015 Тогда
		РеквизитыУведомления = РеквизитыУведомления + ",ДатаУведомленияСоц,КодНалоговогоОрганаУведомленияСоц,НомерУведомленияСоц";
	КонецЕсли;
	
	Возврат РеквизитыУведомления	
	
КонецФункции 

Функция ДанныеОДоходах(ТаблицаСотрудников, НалоговыйПериод, Организация, ГоловнаяОрганизация, КодОП, Дата, ПоказыватьПоКодуОКТМО = Ложь, ИсключатьДоходыПоЦеннымБумагам = Ложь) Экспорт
	Возврат СправкиПоНДФЛПолныеПрава.ДанныеОДоходах(ТаблицаСотрудников, НалоговыйПериод, Организация, ГоловнаяОрганизация, КодОП, Дата, ПоказыватьПоКодуОКТМО, ИсключатьДоходыПоЦеннымБумагам)
КонецФункции

Функция ДанныеПодписывающихЛиц(Организация, ДатаАктуальности) Экспорт

	СтруктураДанных = Новый Структура("ГлавныйБухгалтер, Телефон, СправкуПодписал, ДолжностьПодписавшегоЛица");
	
	Запрос = Новый Запрос;
	
	Если ОбщегоНазначенияЗКПереопределяемый.ЭтоЮрЛицо(Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьПодписавшегоЛица,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ГлавныйБухгалтер,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК СправкуПодписал,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|			&Дата,
		|			СтруктурнаяЕдиница = &Организация
		|				И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
		Запрос.УстановитьПараметр("Дата", ДатаАктуальности - 1);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий(); 
		ЗаполнитьЗначенияСвойств(СтруктураДанных,Выборка);
		Запрос.УстановитьПараметр("ВидТелефона", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	Иначе
		ИндивидуальныйПредприниматель = ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(Организация,"ИндивидуальныйПредприниматель");
		СтруктураДанных.ГлавныйБухгалтер = ИндивидуальныйПредприниматель;
		СтруктураДанных.СправкуПодписал = ИндивидуальныйПредприниматель;
		Запрос.УстановитьПараметр("Организация", ИндивидуальныйПредприниматель);
		Запрос.УстановитьПараметр("ВидТелефона", Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(300)) КАК ТелефонОрганизации
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Организация
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтактнаяИнформация.Вид = &ВидТелефона";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанных.Телефон = СокрЛП(Выборка.ТелефонОрганизации);
	КонецЕсли;
	
	Возврат СтруктураДанных

КонецФункции // ДанныеРуководителяОрганизации()

Функция ДанныеСотрудников(ТаблицаСотрудников, Дата, НалоговыйПериод) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", ТаблицаСотрудников);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("КонецНП",КонецГода(Дата(НалоговыйПериод,1,1)));
	Запрос.УстановитьПараметр("ЗаменятьБеженцаНерезидентом", НалоговыйПериод < Год(ПроведениеРасчетов.ДатаЗакона285ФЗ())); // беженцы до начала действия Федерального закона 285-ФЗ соответствуют обычным нерезидентам
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Сотрудник КАК Физлицо,
	|	СотрудникиОрганизаций.Ставка
	|ПОМЕСТИТЬ ВТФизлица
	|ИЗ
	|	&Ссылки КАК СотрудникиОрганизаций";
	Если НалоговыйПериод > 2010 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"СотрудникиОрганизаций.Ставка","ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.ПустаяСсылка) КАК Ставка")
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ПОМЕСТИТЬ ВТФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|			&Дата,
	|			Физлицо В
	|				(ВЫБРАТЬ
	|					Физлица.Физлицо
	|				ИЗ
	|					ВТФизлица КАК Физлица)) КАК ФИОФизЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГражданствоФизЛицСрезПоследних.ФизЛицо,
	|	ГражданствоФизЛицСрезПоследних.Страна,
	//|	ГражданствоФизЛицСрезПоследних.ИНН КАК ИННвСтранеГражданства
	|	"""" КАК ИННвСтранеГражданства
	|ПОМЕСТИТЬ ВТГражданство
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
	|			&Дата,
	|			Физлицо В
	|				(ВЫБРАТЬ
	|					Физлица.Физлицо
	|				ИЗ
	|					ВТФизлица КАК Физлица)) КАК ГражданствоФизЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусФизЛиц.ФизЛицо,
	|	ВЫБОР
	|		КОГДА &ЗаменятьБеженцаНерезидентом
	|				И СтатусФизЛиц.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Беженец)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|		ИНАЧЕ СтатусФизЛиц.Статус
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ ВТСтатусы
	|ИЗ
	|	РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СрезПоследних(
	|			&КонецНП,
	|			Физлицо В
	|				(ВЫБРАТЬ
	|					Физлица.Физлицо
	|				ИЗ
	|					ВТФизлица КАК Физлица)) КАК СтатусФизЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер
	|ПОМЕСТИТЬ ВТПаспортныеДанные
	|ИЗ
	|	РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|			&Дата,
	|			Физлицо В
	|				(ВЫБРАТЬ
	|					Физлица.Физлицо
	|				ИЗ
	|					ВТФизлица КАК Физлица)) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Физлица.Физлицо КАК Сотрудник,
	|	Физлица.Ставка,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	"","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9 + "","" + ВЫБОР
	|		КОГДА АдресаРегистрации.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
	|			ТОГДА ""дом""
	|		ИНАЧЕ ""владение""
	|	КОНЕЦ + "","" + ВЫБОР
	|		КОГДА АдресаРегистрации.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
	|			ТОГДА ""корпус""
	|		ИНАЧЕ ""строение""
	|	КОНЕЦ + "","" + ВЫБОР
	|		КОГДА АдресаРегистрации.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
	|			ТОГДА ""кв.""
	|		ИНАЧЕ ""оф.""
	|	КОНЕЦ КАК АдресРФ,
	|	АдресаИностранцев.Представление КАК АдресЗарубежом,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид КАК ВидДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия КАК СерияДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер КАК НомерДокумента,
	|	ФизическиеЛица.ДатаРождения,
	|	ФизическиеЛица.ИНН,
	|	ФизическиеЛица.Наименование КАК Наименование,
	|	ЕСТЬNULL(Гражданство.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Россия)) КАК Гражданство,
	|	ЕСТЬNULL(Статусы.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) КАК СтатусНалогоплательщика,
	|	ЕСТЬNULL(Гражданство.ИННвСтранеГражданства, """") КАК ИННвСтранеГражданства
	|ИЗ
	|	ВТФизлица КАК Физлица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Физлица.Физлицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаИностранцев
	|		ПО Физлица.Физлицо = АдресаИностранцев.Объект
	|			И (АдресаИностранцев.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ИнострАдресФизЛица))
	|			И (АдресаИностранцев.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
	|		ПО Физлица.Физлицо = АдресаРегистрации.Объект
	|			И (АдресаРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|			И (АдресаРегистрации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПаспортныеДанные КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО Физлица.Физлицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОФизЛиц КАК ФИОФизЛицСрезПоследних
	|		ПО Физлица.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГражданство КАК Гражданство
	|		ПО Физлица.Физлицо = Гражданство.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусы КАК Статусы
	|		ПО Физлица.Физлицо = Статусы.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Возврат Запрос.Выполнить().Выгрузить()
	
КонецФункции

// Формирует имя файла в установленном формате для организации документа
//
// Параметры
// 	ЭтоЮрЛицо - булево, дополнительная характеристика организации
//
// Возвращаемое значение:
//  Строка с именем файла
//
Функция ИмяФайлаОбмена(Организация, Дата, ЭтоЮрЛицо = Неопределено, КодНО = Неопределено, НазваниеФайла = "NO_NDFL2") Экспорт

	Если ЭтоЮрЛицо = Неопределено Тогда
		ЭтоЮрЛицо = ОбщегоНазначенияЗКПереопределяемый.ЭтоЮрЛицо(Организация);
	КонецЕсли;
	
	Параметры = ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(Организация, "КодИФНСПолучателя, КодИМНС, ИНН, КПП");
	
	Если Дата >= '20170101' Тогда
		Параметры.КодИФНСПолучателя = ""
	КонецЕсли;
	
	Возврат НазваниеФайла
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодИФНСПолучателя), Параметры.КодИФНСПолучателя, ?(ЗначениеЗаполнено(КодНО),КодНО,Параметры.КодИМНС))
			+ "_" + ?(ЗначениеЗаполнено(КодНО),КодНО,Параметры.КодИМНС)
			+ "_" + ?(ЭтоЮрЛицо, СокрЛП(Параметры.ИНН) + СокрЛП(Параметры.КПП), СокрЛП(Параметры.ИНН))
			+ "_" + Формат(Дата, "ДФ=ггггММдд")
			+ "_" + Новый УникальныйИдентификатор();

КонецФункции // ИмяФайлаОбмена()

Функция КодНалоговогоОрганаПоОКАТО_КППиОрганизации(Организация, ОрганизацияЭтоЮрЛицо, ОКАТО_КПП) Экспорт
	
	Если ОрганизацияЭтоЮрЛицо И ЗначениеЗаполнено(ОКАТО_КПП) Тогда
		ДанныеОрганизации = ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(Организация,"КодИМНС,КПП");
		КПП = КППизСуммыОКАТОиКПП(ОКАТО_КПП);
		Если КПП = ДанныеОрганизации.КПП Тогда
			КодНО = ?(ЗначениеЗаполнено(ДанныеОрганизации.КодИМНС), ДанныеОрганизации.КодИМНС, Лев(КПП, 4))
		Иначе
			КодНО = Лев(КПП, 4)
		КонецЕсли;
	Иначе 	
		КодНО = ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(Организация,"КодИМНС");
	КонецЕсли;
	
	Возврат КодНО
	
КонецФункции 

Функция ОписаниеДоходовПоКодам(Организация, ГоловнаяОрганизация, ОрганизацияЭтоЮрЛицо, НалоговыйПериод, ДатаСведений, ФизЛицо = Неопределено, Ставка = Неопределено, ПоказыватьКодыОКТМО = Ложь) Экспорт

	Возврат СправкиПоНДФЛПолныеПрава.ОписаниеДоходовОрганизации(Организация, ГоловнаяОрганизация, ОрганизацияЭтоЮрЛицо, НалоговыйПериод, ДатаСведений, ФизЛицо, Ставка, ПоказыватьКодыОКТМО)

КонецФункции // ОписаниеДоходов()

Функция СписокОКАТОиКПП(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустойКодПоОКАТО","");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Наименование + "": "" + Организации.КодПоОКАТО + "", "" + Организации.КПП КАК Представление,
	|	Организации.КодПоОКАТО,
	|	Организации.КПП,
	|	1 КАК Порядок
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Владелец.Наименование + "", "" + ПодразделенияОрганизаций.Наименование + "": "" + ПодразделенияОрганизаций.КодПоОКАТО + "", "" + ПодразделенияОрганизаций.КПП,
	|	ПодразделенияОрганизаций.КодПоОКАТО,
	|	ПодразделенияОрганизаций.КПП,
	|	2
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	|	И ПодразделенияОрганизаций.КодПоОКАТО <> &ПустойКодПоОКАТО
	|	И (ПодразделенияОрганизаций.КодПоОКАТО <> ЕСТЬNULL(ПодразделенияОрганизаций.Родитель.КодПоОКАТО, &ПустойКодПоОКАТО)
	|			ИЛИ ПодразделенияОрганизаций.КПП <> ЕСТЬNULL(ПодразделенияОрганизаций.Родитель.КПП, &ПустойКодПоОКАТО))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Представление";
	
	НаборыДанных = Запрос.Выполнить().Выгрузить(); 
	
	СписокОКАТОиКПП = Новый СписокЗначений;
	
	Для Каждого СтрокаЗапроса Из НаборыДанных Цикл
		СписокОКАТОиКПП.Добавить(СуммаОКАТОиКПП(СтрокаЗапроса.КодПоОКАТО, СтрокаЗапроса.КПП), СтрокаЗапроса.Представление);
	КонецЦикла;
	
	Возврат СписокОКАТОиКПП;
	
КонецФункции // СписокОКАТОиКПП

Функция СписокОКТМОиКПП(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустойКодПоОКТМО","");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Наименование + "": "" + Организации.КодПоОКТМО + "", "" + Организации.КПП КАК Представление,
	|	Организации.КодПоОКТМО,
	|	Организации.КПП,
	|	1 КАК Порядок
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Владелец.Наименование + "", "" + ПодразделенияОрганизаций.Наименование + "": "" + ПодразделенияОрганизаций.КодПоОКТМО + "", "" + ПодразделенияОрганизаций.КПП,
	|	ПодразделенияОрганизаций.КодПоОКТМО,
	|	ПодразделенияОрганизаций.КПП,
	|	2
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	|	И ПодразделенияОрганизаций.КодПоОКТМО <> &ПустойКодПоОКТМО
	|	И (ПодразделенияОрганизаций.КодПоОКТМО <> ЕСТЬNULL(ПодразделенияОрганизаций.Родитель.КодПоОКТМО, &ПустойКодПоОКТМО)
	|			ИЛИ ПодразделенияОрганизаций.КПП <> ЕСТЬNULL(ПодразделенияОрганизаций.Родитель.КПП, &ПустойКодПоОКТМО))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Представление";
	
	НаборыДанных = Запрос.Выполнить().Выгрузить(); 
	
	СписокОКТМОиКПП = Новый СписокЗначений;
	
	Для Каждого СтрокаЗапроса Из НаборыДанных Цикл
		СписокОКТМОиКПП.Добавить(СуммаОКАТОиКПП(СтрокаЗапроса.КодПоОКТМО, СтрокаЗапроса.КПП), СтрокаЗапроса.Представление);
	КонецЦикла;
	
	Возврат СписокОКТМОиКПП;
	
КонецФункции

Функция СоответствиеОКАТОиОКТМО(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустойКодПоОКАТО","");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВсеКоды.КодПоОКАТО,
	|	МАКСИМУМ(ВсеКоды.КодПоОКТМО) КАК КодПоОКТМО
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.КодПоОКАТО КАК КодПоОКАТО,
	|		Организации.КодПоОКТМО КАК КодПоОКТМО
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.Ссылка = &Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПодразделенияОрганизаций.КодПоОКАТО,
	|		ПодразделенияОрганизаций.КодПоОКТМО
	|	ИЗ
	|		Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|	ГДЕ
	|		ПодразделенияОрганизаций.Владелец = &Организация
	|		И (ПодразделенияОрганизаций.КодПоОКАТО <> &ПустойКодПоОКАТО
	|				ИЛИ ПодразделенияОрганизаций.КодПоОКТМО <> &ПустойКодПоОКАТО)
	|		И (ПодразделенияОрганизаций.КодПоОКАТО <> &ПустойКодПоОКАТО
	|					И ПодразделенияОрганизаций.КодПоОКАТО <> ЕСТЬNULL(ПодразделенияОрганизаций.Родитель.КодПоОКАТО, &ПустойКодПоОКАТО)
	|				ИЛИ ПодразделенияОрганизаций.КодПоОКТМО <> &ПустойКодПоОКАТО
	|					И ПодразделенияОрганизаций.КодПоОКТМО <> ЕСТЬNULL(ПодразделенияОрганизаций.Родитель.КодПоОКТМО, &ПустойКодПоОКАТО))) КАК ВсеКоды
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеКоды.КодПоОКАТО";
	
	НаборДанных = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗ Из НаборДанных Цикл
		СтрокаТЗ.КодПоОКАТО = СокрЛП(СтрокаТЗ.КодПоОКАТО);
		СтрокаТЗ.КодПоОКТМО = СокрЛП(СтрокаТЗ.КодПоОКТМО);
	КонецЦикла;
	
	НаборДанных.Индексы.Добавить("КодПоОКАТО");
	НаборДанных.Индексы.Добавить("КодПоОКТМО");
	
	Возврат НаборДанных;
	
КонецФункции

Функция ПреобразоватьОКАТОвОКТМО(КодПоОКАТО, ТаблицаСоответствияОКАТОиОКТМО) Экспорт 

	Если Не ЗначениеЗаполнено(ТаблицаСоответствияОКАТОиОКТМО) Тогда
		Возврат "";
	КонецЕсли;
	
	Строки = ТаблицаСоответствияОКАТОиОКТМО.НайтиСтроки(Новый Структура("КодПоОКАТО",КодПоОКАТО));
    Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].КодПоОКТМО;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции 
 
Функция ПреобразоватьОКТМОвОКАТО(КодПоОКТМО, ТаблицаСоответствияОКАТОиОКТМО) Экспорт 

	Если Не ЗначениеЗаполнено(ТаблицаСоответствияОКАТОиОКТМО) Тогда
		Возврат "";
	КонецЕсли;
	
	Строки = ТаблицаСоответствияОКАТОиОКТМО.НайтиСтроки(Новый Структура("КодПоОКТМО",КодПоОКТМО));
    Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].КодПоОКАТО;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции 
 
Функция ПреобразоватьОКАТО_КППвОКТМО_КПП(ОКАТО_КПП, ТаблицаСоответствияОКАТОиОКТМО) Экспорт 

	Возврат СуммаОКАТОиКПП(ПреобразоватьОКАТОвОКТМО(КодОКАТОизСуммыОКАТОиКПП(ОКАТО_КПП), ТаблицаСоответствияОКАТОиОКТМО),КППизСуммыОКАТОиКПП(ОКАТО_КПП));
	
КонецФункции 
 
Функция ПреобразоватьОКТМО_КППвОКАТО_КПП(ОКТМО_КПП, ТаблицаСоответствияОКАТОиОКТМО) Экспорт 

	Возврат СуммаОКАТОиКПП(ПреобразоватьОКТМОвОКАТО(КодОКАТОизСуммыОКАТОиКПП(ОКТМО_КПП), ТаблицаСоответствияОКАТОиОКТМО),КППизСуммыОКАТОиКПП(ОКТМО_КПП));
	
КонецФункции 

Процедура ОчиститьКодыОКТМО(НаборЗаписейУчета, ИмяПоляПериода = "МесяцНалоговогоПериода", ИмяПоляОКТМО = "КодПоОКТМО") Экспорт

	ДатаНачалаУчетаПоОКТМО = ДобавитьМесяц(ПроведениеРасчетов.ДатаПереходаНаКодыОКТМО(), -12);
	Для Каждого Запись Из НаборЗаписейУчета Цикл
		Если Запись[ИмяПоляПериода] < ДатаНачалаУчетаПоОКТМО Тогда
			Запись[ИмяПоляОКТМО] = "";
		КонецЕсли;
	КонецЦикла

КонецПроцедуры

Функция ДоходыПоСтавке13(НалоговыйПериод) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоходыНДФЛ.Ссылка,
	|	ВЫБОР
	|		КОГДА ДоходыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.КодДоходаПоУмолчанию)
	|			ТОГДА 1
	|		КОГДА ДоходыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2012)
	|			ТОГДА 2
	|		КОГДА ДоходыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2300)
	|			ТОГДА 2
	|		КОГДА ДоходыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2010)
	|			ТОГДА 3
	|		КОГДА ДоходыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2760)
	|			ТОГДА 4
	|		КОГДА ДоходыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.МатпомощьПриРожденииРебенка)
	|			ТОГДА 4
	|		КОГДА ДоходыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2720)
	|			ТОГДА 5
	|		КОГДА ДоходыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код4800)
	|			ТОГДА 5
	|		ИНАЧЕ 99
	|	КОНЕЦ КАК Порядок,
	|	ДоходыНДФЛ.Код КАК Код
	|ИЗ
	|	Справочник.ДоходыНДФЛ КАК ДоходыНДФЛ
	|ГДЕ
	|	НЕ ДоходыНДФЛ.НеОтражаетсяВОтчетности2010
	|	И ДоходыНДФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоходыНДФЛ.Ссылка,
	|	6,
	|	ДоходыНДФЛ.Код
	|ИЗ
	|	Справочник.ДоходыНДФЛ КАК ДоходыНДФЛ
	|ГДЕ
	|	ДоходыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Код";
	
	СписокДоходов = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокДоходов.Добавить(Выборка.Ссылка, Выборка.Код)
	КонецЦикла;
	
	Возврат СписокДоходов
	
КонецФункции 

Функция НомерПервойСправки(Организация, НалоговыйПериод, Дата, Ссылка = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("НалоговыйПериод",НалоговыйПериод);
	Запрос.УстановитьПараметр("Организация",Организация);
	ТекстЗапроса =  
	"ВЫБРАТЬ
	|	СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки КАК Строка
	|ПОМЕСТИТЬ ВТСтроки
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрганС2015.СотрудникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
	|ГДЕ
	|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Дата < &ДатаДокумента
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка <> &Ссылка
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Проведен
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Организация = &Организация
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.НалоговыйПериод = &НалоговыйПериод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрган.СотрудникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
	|ГДЕ
	|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Дата < &ДатаДокумента
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка <> &Ссылка
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Проведен
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Организация = &Организация
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.НалоговыйПериод = &НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Строки.Строка) КАК КоличествоСформированныхСправок
	|ИЗ
	|	ВТСтроки КАК Строки";
	
	Если Ссылка = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка <> &Ссылка",""); 
	Иначе
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ?(Не ЗначениеЗаполнено(Выборка.КоличествоСформированныхСправок), 0, Выборка.КоличествоСформированныхСправок) + 1;
	КонецЕсли;  
	
	Возврат 1;

КонецФункции 


////////////////////////////////////////////////////////////////////////////////

Функция СоответствиеДоходовИМассивовВычетов(НалоговыйПериод = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(НалоговыйПериод) Тогда
		НалоговыйПериод = Год(ОбщегоНазначенияЗК.ПолучитьРабочуюДату())
	КонецЕсли;
	
	СоответствиеДоходовИВычетов = Новый Соответствие;
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1010, Справочники.ВычетыНДФЛ.Код601); //Дивиденды
	Если НалоговыйПериод > 2008 Тогда // с 2009 года
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1211, Справочники.ВычетыНДФЛ.Код607); //Взносы в пенс.фонды
	КонецЕсли;
	
	Вычет620 = Справочники.ВычетыНДФЛ.НайтиПоКоду("620");
	
	// описание кодов 15хх по годам
	Если НалоговыйПериод > 2016 Тогда // с 2017 года
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код307);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код208);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код216);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код218);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код222);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код618);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1530, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код308);  
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код217);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код219);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код223);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1531, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код205);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код206);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код208);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1532, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1533_2010, Справочники.ВычетыНДФЛ.Код220); 
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код305);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код209);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код210);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1535, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код309);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код224);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1536, СписокВычетов);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1537, Справочники.ВычетыНДФЛ.Код211); // РЕПО
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1538, Справочники.ВычетыНДФЛ.Код215); //займы ценными бумагами
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1539, Справочники.ВычетыНДФЛ.Код213); //РЕПО
		Если ЗначениеЗаполнено(Вычет620) Тогда
			СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1541, Вычет620); 
		КонецЕсли;
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1543, Справочники.ВычетыНДФЛ.Код617); 
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код221);  
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код233);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код237);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код239);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код251);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1544, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код226);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код234);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код238);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код240);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1545, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код228);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код250);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код251);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1546, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1547, Справочники.ВычетыНДФЛ.Код235); // РЕПО
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код229);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код241);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код252);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1548, СписокВычетов); // РЕПО
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код227);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код236);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1549, СписокВычетов);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1551, Справочники.ВычетыНДФЛ.Код230); // РЕПО
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1552, Справочники.ВычетыНДФЛ.Код232); //займы ценными бумагами
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1553, Справочники.ВычетыНДФЛ.Код231); //РЕПО
		Если ЗначениеЗаполнено(Вычет620) Тогда
			СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1554, Вычет620); 
		КонецЕсли;
	ИначеЕсли НалоговыйПериод = 2016 Тогда // 2016 год
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код307);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код208);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код216);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код218);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код222);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1530, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код308);  
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код217);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код219);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код223);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1531, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код205);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код206);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код208);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код209);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1532, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1533_2010, Справочники.ВычетыНДФЛ.Код220); 
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код305);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код209);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код210);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1535, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код309);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код224);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1536, СписокВычетов);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1537, Справочники.ВычетыНДФЛ.Код211); // РЕПО
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1538, Справочники.ВычетыНДФЛ.Код215); //займы ценными бумагами
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1539, Справочники.ВычетыНДФЛ.Код213); //РЕПО
		Если ЗначениеЗаполнено(Вычет620) Тогда
			СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1541, Вычет620); 
		КонецЕсли;
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1543, Справочники.ВычетыНДФЛ.Код221); 
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код221);  
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код233);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код237);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код239);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код251);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1544, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код226);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код234);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код238);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код240);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1545, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код228);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код250);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код251);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1546, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1547, Справочники.ВычетыНДФЛ.Код235); // РЕПО
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код229);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код241);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код252);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1548, СписокВычетов); // РЕПО
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код227);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код236);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1549, СписокВычетов);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1551, Справочники.ВычетыНДФЛ.Код230); // РЕПО
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1552, Справочники.ВычетыНДФЛ.Код232); //займы ценными бумагами
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1553, Справочники.ВычетыНДФЛ.Код231); //РЕПО
		Если ЗначениеЗаполнено(Вычет620) Тогда
			СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1554, Вычет620); 
		КонецЕсли;
	ИначеЕсли НалоговыйПериод = 2015 Тогда // 2015 год
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код307);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код218);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код222);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код618);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1530, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код308);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код217);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код218);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код219);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код223);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1531, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код205);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код206);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код209);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1532, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1533_2010, Справочники.ВычетыНДФЛ.Код220); 
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код305);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код209);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1535, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код309);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код224);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1536, СписокВычетов);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1537, Справочники.ВычетыНДФЛ.Код211); // РЕПО
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1538, Справочники.ВычетыНДФЛ.Код215); //займы ценными бумагами
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1539, Справочники.ВычетыНДФЛ.Код213); //РЕПО
		Если ЗначениеЗаполнено(Вычет620) Тогда
			СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1541, Вычет620); 
		КонецЕсли;
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1543, Справочники.ВычетыНДФЛ.Код221); 
	ИначеЕсли НалоговыйПериод = 2014 Тогда // 2014 год
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код307);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код204);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код205);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код208);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код212);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код216);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код218);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код222);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1530, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код308);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код217);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код218);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код219);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код223);
		Если ЗначениеЗаполнено(Вычет620) Тогда
			СписокВычетов.Добавить(Вычет620); 
		КонецЕсли;
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1531, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код206);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код205);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код209);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1532, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код220);
		Если ЗначениеЗаполнено(Вычет620) Тогда
			СписокВычетов.Добавить(Вычет620);
		КонецЕсли;
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1533_2010, СписокВычетов); 
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код305);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код209);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код210);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1535, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код309);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код224);
		Если ЗначениеЗаполнено(Вычет620) Тогда
			СписокВычетов.Добавить(Вычет620);
		КонецЕсли;
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1536, СписокВычетов);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1537, Справочники.ВычетыНДФЛ.Код211); // РЕПО
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1538, Справочники.ВычетыНДФЛ.Код215); //займы ценными бумагами
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код213);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код214);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1539, СписокВычетов); //РЕПО
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код212);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код213);
		Если ЗначениеЗаполнено(Вычет620) Тогда
			СписокВычетов.Добавить(Вычет620);
		КонецЕсли;
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1541, СписокВычетов); //РЕПО
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1543, Справочники.ВычетыНДФЛ.Код221); 
	ИначеЕсли НалоговыйПериод > 2011 Тогда //2012-2013 годы
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код307);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код204);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код205);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код208);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код212);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код216);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1530, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код308);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код217);
		Если ЗначениеЗаполнено(Вычет620) Тогда
			СписокВычетов.Добавить(Вычет620); 
		КонецЕсли;
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1531, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код206);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код205);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код209);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1532, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		Если ЗначениеЗаполнено(Вычет620) Тогда
			СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1533_2010, Вычет620); 
		КонецЕсли;
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код305);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код210);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1535, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код309);
		Если ЗначениеЗаполнено(Вычет620) Тогда
			СписокВычетов.Добавить(Вычет620);
		КонецЕсли;
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1536, СписокВычетов);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1537, Справочники.ВычетыНДФЛ.Код211); // РЕПО
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1538, Справочники.ВычетыНДФЛ.Код215); //займы ценными бумагами
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код213);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код214);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1539, СписокВычетов); //РЕПО
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код212);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код213);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1541, СписокВычетов); //РЕПО
	ИначеЕсли НалоговыйПериод = 2011 Тогда // 2011 год
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код307);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код204);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код205);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код208);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код209);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код211);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код212);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код215);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код216);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1530, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код308);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код309);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код216);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код217);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1531, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код206);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код205);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код305);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код209);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код210);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1532, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код308);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код309);
		Если ЗначениеЗаполнено(Вычет620) Тогда
			СписокВычетов.Добавить(Вычет620); 
		КонецЕсли;
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1533_2010, СписокВычетов); 
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код305);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код210);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1535, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1536, Справочники.ВычетыНДФЛ.Код309);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1537, Справочники.ВычетыНДФЛ.Код211); // РЕПО
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код214);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код215);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код216);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код217);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1538, СписокВычетов); //займы ценными бумагами
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код212);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код213);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код214);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1539, СписокВычетов); //РЕПО
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код212);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код213);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1541, СписокВычетов); //РЕПО
	ИначеЕсли НалоговыйПериод = 2010 Тогда  // 2010 год
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код307);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код204);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код208);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код209);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1530, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код308);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код309);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1531, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код206);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код205);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код305);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код209);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1532, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код308);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код309);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код306);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1533_2010, СписокВычетов); // Доходы от реализации акций или иных ценных бумаг
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1533, Справочники.ВычетыНДФЛ.Код306); // Доходы от реализации акций или иных ценных бумаг
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1535, Справочники.ВычетыНДФЛ.Код305); // Доходы от реализации акций или иных ценных бумаг
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1536, Справочники.ВычетыНДФЛ.Код309);
	Иначе // по 2009 год
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1530, Справочники.ВычетыНДФЛ.Код307); // Доходы от реализации акций или иных ценных бумаг
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1531, Справочники.ВычетыНДФЛ.Код308); // Доходы от реализации акций или иных ценных бумаг
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1532, Справочники.ВычетыНДФЛ.Код305); // Доходы от реализации акций или иных ценных бумаг
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1533, Справочники.ВычетыНДФЛ.Код306); // Доходы от реализации акций или иных ценных бумаг
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1535, Справочники.ВычетыНДФЛ.Код305); // Доходы от реализации акций или иных ценных бумаг
		СписокВычетов = Новый Массив;
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код309);
		СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код310);
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1536, Справочники.ВычетыНДФЛ.Код309);
	КонецЕсли;
	
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2010, Справочники.ВычетыНДФЛ.Код403); // Договора подряда
	
	СписокВычетов = Новый Массив;
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код405);
	СписокВычетов.Добавить(Справочники.ВычетыНДФЛ.Код404);
	
	// Все виды авторских 2201-2209
	СписокАвторскихВознаграждений = Новый Массив;
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2201);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2202);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2203);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2204);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2205);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2206);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2207);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2208);
	СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2209);
	Для каждого КодДоходаАвторскихВознаграждений Из СписокАвторскихВознаграждений Цикл
		СоответствиеДоходовИВычетов.Вставить(КодДоходаАвторскихВознаграждений,СписокВычетов);
	КонецЦикла;
	
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2720, Справочники.ВычетыНДФЛ.Код501); // Стоимость подарков
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2730, Справочники.ВычетыНДФЛ.Код502); // Стоимость призов на соревнованиях, определяемая согласно п.28 ст.217 НК
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2740, Справочники.ВычетыНДФЛ.Код505); // Стоимость выигрышей и призов, полученных в мероприятиях в целях рекламы, согл. п.28 ст.217 НК РФ
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2760, Справочники.ВычетыНДФЛ.Код503); //Суммы материальной помощи
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2761, Справочники.ВычетыНДФЛ.Код506); // Суммы материальной помощи, оказываемой инвалидам общественными организациями инвалидов, п.28 ст.217
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.МатпомощьПриРожденииРебенка, Справочники.ВычетыНДФЛ.МатпомощьПриРожденииРебенка); //Суммы материальной помощи
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2770, Справочники.ВычетыНДФЛ.Код504); //Суммы возмещения работникам стоимости медикаментов
	СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2790, Справочники.ВычетыНДФЛ.Код507); //Суммы помощи и подарков ветеранам ВОВ, п.33 ст.217
	Если НалоговыйПериод > 2008 И НалоговыйПериод < 2016 Тогда // с 2009 по 2015 годы
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2791, Справочники.ВычетыНДФЛ.Код509); //Доходы, полученные работниками в натуральной форме в качестве оплаты труда от организаций - с/х товаропроизводителей и крестьянских х-в
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Вычет620) Тогда
		СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код4800, Вычет620); 
	КонецЕсли;
	
	Для каждого Элемент Из СоответствиеДоходовИВычетов Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ВычетыНДФЛ") Тогда
			СписокВычетов = Новый Массив;
			СписокВычетов.Добавить(Элемент.Значение);
			СоответствиеДоходовИВычетов[Элемент.Ключ] = СписокВычетов
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствиеДоходовИВычетов
	
КонецФункции 

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
Процедура ПриНачалеРаботыСистемы() Экспорт

	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыНакопления.НДФЛСведенияОДоходах) Или 
		Не ПравоДоступа("Использование", Метаданные.Обработки.ПереходВУчетеПоНДФЛНаКодыОКТМО) Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойКодПоОКАТО","");
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организации.Ссылка,
	|	Организации.КодПоОКАТО
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.КодПоОКАТО <> &ПустойКодПоОКАТО
	|	И Организации.КодПоОКТМО = &ПустойКодПоОКАТО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.КодПоОКАТО
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.КодПоОКАТО <> &ПустойКодПоОКАТО
	|	И ПодразделенияОрганизаций.КодПоОКТМО = &ПустойКодПоОКАТО";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Обработки.ПереходВУчетеПоНДФЛНаКодыОКТМО.Создать().ПолучитьФорму().Открыть();
		Возврат;
	КонецЕсли;

	Если ОбщегоНазначенияЗК.ПолучитьРабочуюДату() < ДобавитьМесяц(ПроведениеРасчетов.ДатаПереходаНаКодыОКТМО(), 4) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НДФЛСведенияОДоходах.Регистратор
		|ИЗ
		|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|ГДЕ
		|	НДФЛСведенияОДоходах.КодПоОКАТО <> &ПустойКодПоОКАТО
		|	И НДФЛСведенияОДоходах.КодПоОКТМО = &ПустойКодПоОКАТО
		|	И НДФЛСведенияОДоходах.Период МЕЖДУ ДАТАВРЕМЯ(2013, 1, 1) И ДАТАВРЕМЯ(2013, 12, 31, 23, 59, 59)";
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Обработки.ПереходВУчетеПоНДФЛНаКодыОКТМО.Создать().ПолучитьФорму().Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура НастроитьПолеВводаОКАТО(ПолеВвода, Организация, СписокОКАТОиКПП) Экспорт 

	Если Не ЗначениеЗаполнено(СписокОКАТОиКПП) Тогда
		СписокОКАТОиКПП = СписокОКАТОиКПП(Организация);
	КонецЕсли;
	
	ПолеВвода.КнопкаВыбора = Ложь;
	
	// Если не нашли данных - ничего не делаем
	Если СписокОКАТОиКПП.Количество() > 0 Тогда
		
		МаксимальнаяДлина = 40;
		Для Каждого ЭлементСпискаЗначений Из СписокОКАТОиКПП Цикл
			МаксимальнаяДлина = Макс(МаксимальнаяДлина, СтрДлина(ЭлементСпискаЗначений.Представление));
		КонецЦикла;
		
		ПолеВвода.КнопкаВыбора = Истина;
		ПолеВвода.ШиринаСпискаВыбора = МаксимальнаяДлина;
		
	КонецЕсли; 

КонецПроцедуры

Процедура НастроитьПолеВводаОКТМО(ПолеВвода, Организация, СписокОКТМОиКПП) Экспорт 

	Если Не ЗначениеЗаполнено(СписокОКТМОиКПП) Тогда
		СписокОКТМОиКПП = СписокОКТМОиКПП(Организация);
	КонецЕсли;
	
	ПолеВвода.КнопкаВыбора = Ложь;
	
	// Если не нашли данных - ничего не делаем
	Если СписокОКТМОиКПП.Количество() > 0 Тогда
		
		МаксимальнаяДлина = 40;
		Для Каждого ЭлементСпискаЗначений Из СписокОКТМОиКПП Цикл
			МаксимальнаяДлина = Макс(МаксимальнаяДлина, СтрДлина(ЭлементСпискаЗначений.Представление));
		КонецЦикла;
		
		ПолеВвода.КнопкаВыбора = Истина;
		ПолеВвода.ШиринаСпискаВыбора = МаксимальнаяДлина;
		
	КонецЕсли; 

КонецПроцедуры

Процедура НастроитьПанельОКАТОиОКТМО(Панель, НалоговыйПериод) Экспорт 
	
	Если НалоговыйПериод < Год(ПроведениеРасчетов.ДатаПереходаНаКодыОКТМО()) Тогда
		Панель.ТекущаяСтраница = Панель.Страницы.ОКАТО
	Иначе
		Панель.ТекущаяСтраница = Панель.Страницы.ОКТМО
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьКолонкиОКАТОиОКТМО(ТабличноеПоле, НалоговыйПериод, ИмяКолонкиОКАТО = "КодПоОКАТО", ИмяКолонкиОКТМО = "КодПоОКТМО") Экспорт 
	
	ГодПереходаНаКодыОКТМО = Год(ПроведениеРасчетов.ДатаПереходаНаКодыОКТМО());
	
	ТабличноеПоле.Колонки[ИмяКолонкиОКАТО].Видимость = НалоговыйПериод < ГодПереходаНаКодыОКТМО;
	ТабличноеПоле.Колонки[ИмяКолонкиОКТМО].Видимость = НалоговыйПериод >= ГодПереходаНаКодыОКТМО - 1;
	
	ТабличноеПоле.Колонки[ИмяКолонкиОКТМО].ИзменятьНастройку = ТабличноеПоле.Колонки[ИмяКолонкиОКТМО].Видимость;
	ТабличноеПоле.Колонки[ИмяКолонкиОКАТО].ИзменятьНастройку = ТабличноеПоле.Колонки[ИмяКолонкиОКАТО].Видимость;
	
КонецПроцедуры

Процедура ОбновитьИтогиТекущейСправки(НомерСправки = Неопределено, СтатусНалогоплательщика, СведенияОДоходах, СведенияОВычетах, СуммыНалогов, НалоговыйПериод) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходах.СуммаДохода,
	|	СведенияОДоходах.СуммаВычета,
	|	СведенияОДоходах.КодДохода
	|ПОМЕСТИТЬ ВТСведенияОДоходах
	|ИЗ
	|	&Доходы КАК СведенияОДоходах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сведения.СуммаВычета
	|ПОМЕСТИТЬ ВТСведенияОВычетах
	|ИЗ
	|	&Вычеты КАК Сведения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Сведения.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|			ТОГДА ВЫБОР
	|					КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|				КОНЕЦ
	|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|			ТОГДА ВЫБОР
	|					КОГДА &ВыделятьДивидендыРезидентов
	|							И Сведения.КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|					КОГДА Сведения.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|					КОГДА Сведения.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		КОГДА Сведения.КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|	КОНЕЦ КАК Ставка,
	|	СУММА(Сведения.ОблагаемаяСуммаДохода) КАК ОблагаемаяСуммаДохода,
	|	СУММА(Сведения.ОбщаяСуммаДохода) КАК ОбщаяСуммаДохода
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОДоходах.СуммаДохода - СведенияОДоходах.СуммаВычета КАК ОблагаемаяСуммаДохода,
	|		ДоходыНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|		СведенияОДоходах.СуммаДохода КАК ОбщаяСуммаДохода,
	|		СведенияОДоходах.КодДохода КАК КодДохода
	|	ИЗ
	|		ВТСведенияОДоходах КАК СведенияОДоходах
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоходыНДФЛ КАК ДоходыНДФЛ
	|			ПО СведенияОДоходах.КодДохода = ДоходыНДФЛ.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-СведенияОВычетах.СуммаВычета,
	|		ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13),
	|		0,
	|		ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.КодДоходаПоУмолчанию)
	|	ИЗ
	|		ВТСведенияОВычетах КАК СведенияОВычетах) КАК Сведения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА Сведения.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|			ТОГДА ВЫБОР
	|					КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|				КОНЕЦ
	|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|			ТОГДА ВЫБОР
	|					КОГДА &ВыделятьДивидендыРезидентов
	|							И Сведения.КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|					КОГДА Сведения.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|					КОГДА Сведения.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		КОГДА Сведения.КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|	КОНЕЦ";
	Запрос.УстановитьПараметр("Доходы", СведенияОДоходах);
	Запрос.УстановитьПараметр("Вычеты", СведенияОВычетах);
	Запрос.УстановитьПараметр("Статус", СтатусНалогоплательщика);
	Запрос.УстановитьПараметр("ВыделятьДивидендыРезидентов", НалоговыйПериод < Год(ПроведениеРасчетов.ДатаИзмененияНалогообложенияДивидендов()));
	Запрос.УстановитьПараметр("НеРезидент", СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент);
	
	СтруктураПоиска = Новый Структура();
	Если НомерСправки <> Неопределено Тогда
		СтруктураПоиска.Вставить("НомерСправки", НомерСправки);
	КонецЕсли;
	СтруктураПоиска.Вставить("Ставка");
	МассивСтавок = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСтавок.Добавить(Выборка.Ставка);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		СтрокиИтогов = СуммыНалогов.НайтиСтроки(СтруктураПоиска);
		Если СтрокиИтогов.Количество() > 0 Тогда
			СтрокаИтогов = СтрокиИтогов[0];
		Иначе
			СтрокаИтогов = СуммыНалогов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИтогов, СтруктураПоиска);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаИтогов, Выборка);
	КонецЦикла;
	Если НомерСправки <> Неопределено Тогда
		СтруктураПоиска.Удалить("Ставка");
		СтрокиИтогов = СуммыНалогов.НайтиСтроки(СтруктураПоиска);
	Иначе
		СтрокиИтогов = СуммыНалогов;
	КонецЕсли;
	Для каждого СтрокаТЧ Из СтрокиИтогов Цикл
	    Если МассивСтавок.Найти(СтрокаТЧ.Ставка) = Неопределено Тогда
			СтрокаТЧ.ОбщаяСуммаДохода = 0;
			СтрокаТЧ.ОблагаемаяСуммаДохода = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДанныеСправки(НомерСправки, ТабличнаяЧасть) Экспорт

    Для каждого СтрокаТЧ Из ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерСправки",НомерСправки)) Цикл
		ТабличнаяЧасть.Удалить(СтрокаТЧ)
	КонецЦикла;
	
КонецПроцедуры

Функция ВводитсяАдресЗарубежом(ОписаниеСотрудника) Экспорт

	Возврат ОписаниеСотрудника.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Или ОписаниеСотрудника.Гражданство <> Справочники.КлассификаторСтранМира.Россия

КонецФункции // ВводитсяАдресЗарубежом()

Функция СоответствиеДоходовИВычетов(НалоговыйПериод = Неопределено) Экспорт
	
	СоответствиеДоходовИВычетов = СоответствиеДоходовИМассивовВычетов(НалоговыйПериод);
	Для каждого Элемент Из СоответствиеДоходовИВычетов Цикл
		СписокВычетов = Новый СписокЗначений;
		СписокВычетов.ЗагрузитьЗначения(Элемент.Значение);
		СоответствиеДоходовИВычетов[Элемент.Ключ] = СписокВычетов
	КонецЦикла;
	
	Возврат СоответствиеДоходовИВычетов
	
КонецФункции 

Функция СписокВычетовДляДохода(КодДохода, СоответствиеДоходовИВычетов, АвторскиеВознаграждения, СтатусНалогоплательщика) Экспорт

	Если Не ЗначениеЗаполнено(КодДохода) Тогда
		Возврат Новый СписокЗначений;	// Пустой список
	КонецЕсли; 

	// Всем подряд могут предоставляться только вычеты 3хх на доходы по ценным бумагам, 5хх на доходы 27X0 и вычет по дивидендам
	// остальные вычеты - только резидентам
	Если КодДохода = Справочники.ДоходыНДФЛ.Код2010 Или АвторскиеВознаграждения.Найти(КодДохода) <> Неопределено Тогда // Договора подряда

		Если СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Тогда 
			Возврат Новый СписокЗначений;
		КонецЕсли;
		
	КонецЕсли;
	
	Вычеты = СоответствиеДоходовИВычетов[КодДохода];
	
	Если Вычеты = Неопределено Тогда
		Возврат Новый СписокЗначений;
	ИначеЕсли ТипЗнч(Вычеты) = Тип("СправочникСсылка.ВычетыНДФЛ") Тогда
		СписокВычетов = Новый СписокЗначений;
		СписокВычетов.Добавить(Вычеты);
		Возврат СписокВычетов;
	Иначе	
		Возврат Вычеты;
	КонецЕсли;

КонецФункции 

Функция СписокСтандартныхВычетов() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВычетыНДФЛ.Ссылка,
	|	ВычетыНДФЛ.Код,
	|	ВычетыНДФЛ.Наименование,
	|	ВычетыНДФЛ.КодДляОтчетности2016 КАК Порядок
	|ИЗ
	|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	|ГДЕ
	|	ВычетыНДФЛ.ГруппаВычета <> ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок");
	Выборка = Запрос.Выполнить().Выбрать();		
	
	СписокВыбораСтандартныхВычетов = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокВыбораСтандартныхВычетов.Добавить(Выборка.Ссылка,СокрЛП(Выборка.Код) + " (" + СокрЛП(Выборка.Наименование) + ")");
	КонецЦикла;

	Возврат СписокВыбораСтандартныхВычетов
	
КонецФункции // СписокСтандартныхВычетов()

////////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьДанныеСотрудника(НалоговыйПериод, Режим, ДанныеФизЛица, Доходы, Вычеты, Итоги, Дата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран, СоответствиеСтавокДоходов = Неопределено, НомерКорректировки = 0) Экспорт
	
	СтрОшибки = "";
	СтрПредупрСводнойСправки = "";
	
	Если Не ЗначениеЗаполнено(ДанныеФизЛица.НомерСправки) Тогда
		СтрПредупрСводнойСправки = СтрПредупрСводнойСправки + Символы.ПС + Символы.Таб + "- не указан номер справки!";
	КонецЕсли;
	
	Если Режим <> "СводнаяСправка" И НалоговыйПериод < 2011 И Не ЗначениеЗаполнено(ДанныеФизЛица.Ставка) Тогда
		СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- не указана ставка налогообложения!";
	КонецЕсли;
	
	// ИНН
	Если Не ПустаяСтрока(ДанныеФизЛица.ИНН) И Не РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ДанныеФизЛица.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
		СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- указан неверный ИНН!";	
	КонецЕсли;
	
	// ФИО
	Если Не ЗначениеЗаполнено(ДанныеФизЛица.Фамилия) Или Не ЗначениеЗаполнено(ДанныеФизЛица.Имя) Тогда
		СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- должны быть указаны, как минимум, фамилия и имя физического лица!";
	КонецЕсли; 
	Если ДанныеФизЛица.Гражданство = Справочники.КлассификаторСтранМира.Россия Тогда
		Если Не РегламентированнаяОтчетность.СтрокаНаписанаПоРусски(ДанныеФизЛица.Фамилия+ДанныеФизЛица.Имя+ДанныеФизЛица.Отчество) Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- ФИО физического лица должно быть введено русскими буквами!";
		КонецЕсли; 
	ИначеЕсли ЗначениеЗаполнено(ДанныеФизЛица.Гражданство) Тогда
		Если Не СтрокаНаписанаРусскимиИлиЛатинскими(СтрЗаменить(ДанныеФизЛица.Фамилия+ДанныеФизЛица.Имя+ДанныеФизЛица.Отчество, " ", "")) Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- ФИО физического лица нерезидента должно быть введено только русскими или только латинскими буквами!";
		КонецЕсли; 
	КонецЕсли;
	
	// Гражданство
	Если Не ЗначениеЗаполнено(ДанныеФизЛица.Гражданство) Тогда
		СтрПредупрСводнойСправки = СтрПредупрСводнойСправки + Символы.ПС + Символы.Таб + "- не указано гражданство!";
	КонецЕсли;
	
	// СтатусНалогоплательщика
	Если Не ЗначениеЗаполнено(ДанныеФизЛица.СтатусНалогоплательщика) Тогда
		СтрПредупрСводнойСправки = СтрПредупрСводнойСправки + Символы.ПС + Символы.Таб + "- не указан статус налогоплательщика!";
	КонецЕсли;
	
	// Удостоверение личности
	КодДокумента = СоответствиеДокументовУдостоверяющиеЛичность[ДанныеФизЛица.ВидДокумента];
	Если Не ЗначениеЗаполнено(ДанныеФизЛица.ВидДокумента) Тогда
		СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- не указан документ, удостоверяющий личность!";
	Иначе
		Если Не ЗначениеЗаполнено(КодДокумента) Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- указан неверный код документа, удостоверяющего личность!";
		Иначе
			СтрокаКодовДокументов = ",21,03,07,08,10,11,12,13,14,15,23,24,91," + ?(НалоговыйПериод < 2015,"18,","19,");
			Если Число(КодДокумента) < 1 или Число(КодДокумента) > 99 Тогда
				СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- указан неверный код документа, удостоверяющего личность!";
			ИначеЕсли Найти(СтрокаКодовДокументов, "," + КодДокумента + ",") = 0 Тогда
				СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- указан документ, не допустимый в справке 2-НДФЛ!";
			ИначеЕсли	ДанныеФизЛица.ВидДокумента <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС05
				И	ДанныеФизЛица.ВидДокумента <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС10
				И	ДанныеФизЛица.ВидДокумента <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС11
				И	ДанныеФизЛица.ВидДокумента <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС12
				И	ДанныеФизЛица.ВидДокумента <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС13
				И	ДанныеФизЛица.ВидДокумента <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС14
				И	ДанныеФизЛица.ВидДокумента <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС91 Тогда
				// Справа от последнего пробела расположен номер документа, слева - серия
				СерияДок = ДанныеФизЛица.СерияДокумента;
				НомерДок = ДанныеФизЛица.НомерДокумента;
				
				СтрОшибкиПроверки = "";
				Если Не ПроцедурыПерсонифицированногоУчета.ПроверитьСериюУдостоверенияЛичности(ДанныеФизЛица.ВидДокумента, СерияДок, СтрОшибкиПроверки) Тогда
					СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- Ошибка в серии удостоверения личности: " + НРег(СтрОшибкиПроверки);
				КонецЕсли; 
				Если Не ПроцедурыПерсонифицированногоУчета.ПроверитьНомерУдостоверенияЛичности(ДанныеФизЛица.ВидДокумента, НомерДок, СтрОшибкиПроверки) Тогда
					СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- Ошибка в номере удостоверения личности: " + НРег(СтрОшибкиПроверки);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	// Дата рождения
	Если Не ЗначениеЗаполнено(ДанныеФизЛица.ДатаРождения) Тогда 
		СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- не указана дата рождения!";
	ИначеЕсли ДанныеФизЛица.ДатаРождения > Дата тогда	
		СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- неверно указана дата рождения!";
	КонецЕсли;	
		
	// Адреса
	Если ЗначениеЗаполнено(ДанныеФизЛица.АдресРФ) Тогда
		СтруктураАдресаДляПроверки = РегламентированнаяОтчетность.РазложитьАдрес(ДанныеФизЛица.АдресРФ);
		Если ПустаяСтрока(СтруктураАдресаДляПроверки.Индекс) тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + " - в адресе регистрации не указан индекс!";
			СтруктураАдресаДляПроверки.Индекс = "000000";
		КонецЕсли;
		Если Не РегламентированнаяОтчетность.АдресСоответствуетТребованиям(СтруктураАдресаДляПроверки) Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + " - указанный адрес регистрации не соответствует требованиям ФНС! Возможно, в адресе присутствуют латинские или недопустимые символы";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеФизЛица.АдресЗарубежом) Тогда
		СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ДанныеФизЛица.АдресЗарубежом);
		Если Не ОбщегоНазначенияЗК.ТолькоЦифрыВСтроке(СоответствиеИменСтран[СтруктураАдреса.Страна]) Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + " - неверно указана страна проживания нерезидента (возможно, не заполнен справочник ""Классификатор стран мира"")!";
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеФизЛица.АдресРФ) И Не ЗначениеЗаполнено(ДанныеФизЛица.АдресЗарубежом) Тогда	
		Если ДанныеФизЛица.СтатусНалогоплательщика <> Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент И ДанныеФизЛица.Гражданство = Справочники.КлассификаторСтранМира.Россия Тогда 			
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + " - не указан адрес регистрации!";
		Иначе // Адрес нерезидента
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + " - для физического лица нерезидента или иностранца должен быть заполнен ""Адрес физ. лица за пределами РФ""!";
		КонецЕсли;	
	КонецЕсли;
	
	Если НомерКорректировки = 99 Тогда
		
		// в аннулирующей справке разделы 3, 4 и 5 пусты
		
		Если Доходы.Количество() > 0 Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- обнаружены сведения о доходах в аннулирующей справке!";
		КонецЕсли;
		
		Если Вычеты.Количество() > 0 Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- обнаружены сведения о вычетах в аннулирующей справке!";
		КонецЕсли;
		
		Если Итоги.Количество() > 0 Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- обнаружены сведения о налогах в аннулирующей справке!";
		КонецЕсли;
		
	Иначе
		
		// доходы и вычеты
		Если Доходы.НайтиСтроки(Новый Структура("КодДохода", Справочники.ДоходыНДФЛ.ПустаяСсылка())).Количество() > 0 Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- в таблице доходов присутствуют строки, в которых не указан код дохода!";
		КонецЕсли;
		
		Если Вычеты.НайтиСтроки(Новый Структура("КодВычета", Справочники.ВычетыНДФЛ.ПустаяСсылка())).Количество() > 0 Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- в таблице вычетов присутствуют строки, в которых не указан код вычета!";
		КонецЕсли;
		
		Если Вычеты.НайтиСтроки(Новый Структура("СуммаВычета", 0)).Количество() > 0 Тогда
			СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- в таблице вычетов присутствуют строки, в которых не указана сумма вычета!";
		КонецЕсли;
		
		ПроверятьУведомлениеИмущественногоВычета = Ложь;
		ПроверятьУведомлениеСоциальногоВычета = Ложь;
		Для каждого СтрокаТЧ Из Вычеты Цикл
			Если СправкиПоНДФЛПовтИсп.СвойстваВычета(СтрокаТЧ.КодВычета).ЭтоИмущественныйВычет Тогда
				ПроверятьУведомлениеИмущественногоВычета = Истина
			КонецЕсли;
			Если СправкиПоНДФЛПовтИсп.СвойстваВычета(СтрокаТЧ.КодВычета).ЭтоСоциальныйВычетПоУведомлениюНО Тогда
				ПроверятьУведомлениеСоциальногоВычета = Истина
			КонецЕсли;
			Если ПроверятьУведомлениеИмущественногоВычета И ПроверятьУведомлениеСоциальногоВычета Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Режим <> "СводнаяСправка" И ПроверятьУведомлениеИмущественногоВычета Тогда
			
			Если Не ЗначениеЗаполнено(ДанныеФизЛица.КодНалоговогоОрганаУведомления) Или Не ЗначениеЗаполнено(ДанныеФизЛица.НомерУведомления) Или Не ЗначениеЗаполнено(ДанныеФизЛица.ДатаУведомления) Тогда
				СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + " - не указаны данные уведомления о праве на имущественный вычет!";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеФизЛица.КодНалоговогоОрганаУведомления) И Не ОбщегоНазначенияЗК.ТолькоЦифрыВСтроке(ДанныеФизЛица.КодНалоговогоОрганаУведомления) Тогда
				СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + " - неверно указан код налогового органа, выдавшего уведомление о праве на имущественный вычет!";
			КонецЕсли;
			
		КонецЕсли;
		Если Режим <> "СводнаяСправка" И ПроверятьУведомлениеСоциальногоВычета Тогда
			
			Если Не ЗначениеЗаполнено(ДанныеФизЛица.КодНалоговогоОрганаУведомленияСоц) Или Не ЗначениеЗаполнено(ДанныеФизЛица.НомерУведомленияСоц) Или Не ЗначениеЗаполнено(ДанныеФизЛица.ДатаУведомленияСоц) Тогда
				СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + " - не указаны данные уведомления о праве на социальный вычет!";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеФизЛица.КодНалоговогоОрганаУведомленияСоц) И Не ОбщегоНазначенияЗК.ТолькоЦифрыВСтроке(ДанныеФизЛица.КодНалоговогоОрганаУведомленияСоц) Тогда
				СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + " - неверно указан код налогового органа, выдавшего уведомление о праве на социальный вычет!";
			КонецЕсли;
			
		КонецЕсли;
		
		// итоги
		Если НалоговыйПериод < 2011 Тогда
			
			Если ДанныеФизЛица.ОбщаяСуммаДохода <> Доходы.Итог("СуммаДохода") Тогда
				СтрПредупрСводнойСправки = СтрПредупрСводнойСправки + Символы.ПС + Символы.Таб + "- общая сумма дохода не совпадает с итогом таблицы доходов!";
			КонецЕсли;
			
			Если ДанныеФизЛица.ОблагаемаяСуммаДохода <> Доходы.Итог("СуммаДохода") - Доходы.Итог("СуммаВычета") - Вычеты.Итог("СуммаВычета") Тогда
				СтрПредупрСводнойСправки = СтрПредупрСводнойСправки + Символы.ПС + Символы.Таб + "- сумма налоговой базы не совпадает с итогами таблиц доходов и вычетов!";
			КонецЕсли;
			
		Иначе
			
			Если Итоги.НайтиСтроки(Новый Структура("Ставка", Перечисления.НДФЛСтавки.ПустаяСсылка())).Количество() > 0 Тогда
				СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- в таблице итогов присутствуют строки, в которых не указана ставка налога!";
			КонецЕсли;
			
			ПерваяСтавка = Истина;
			Для каждого ЗначениеПеречисления Из Перечисления.НДФЛСтавки Цикл
				СтрокаИтогов = Итоги.Найти(ЗначениеПеречисления, "Ставка");
				ДоходыПоСтавке = ИзвлечьДоходыПоСтавке(НалоговыйПериод, ЗначениеПеречисления, ДанныеФизЛица.СтатусНалогоплательщика, Доходы, СоответствиеСтавокДоходов);
				Если СтрокаИтогов <> Неопределено Или ДоходыПоСтавке.Количество() > 0 Тогда
					
					ОбщаяСуммаДохода = 0; ОблагаемаяСуммаДохода = 0;
					Если СтрокаИтогов <> Неопределено Тогда
						ОбщаяСуммаДохода = СтрокаИтогов.ОбщаяСуммаДохода;
						ОблагаемаяСуммаДохода = СтрокаИтогов.ОблагаемаяСуммаДохода;
					КонецЕсли;
					
					Если ОбщаяСуммаДохода <> ДоходыПоСтавке.Итог("СуммаДохода") Тогда
						СтрПредупрСводнойСправки = СтрПредупрСводнойСправки + Символы.ПС + Символы.Таб + "- общая сумма дохода по ставке " + ЗначениеПеречисления + " не совпадает с итогом таблицы доходов!";
					КонецЕсли;
					
					Если ОблагаемаяСуммаДохода <> ДоходыПоСтавке.Итог("СуммаДохода") - ДоходыПоСтавке.Итог("СуммаВычета") - ?(ПерваяСтавка, Вычеты.Итог("СуммаВычета"),0) Тогда
						СтрПредупрСводнойСправки = СтрПредупрСводнойСправки + Символы.ПС + Символы.Таб + "- сумма налоговой базы по ставке " + ЗначениеПеречисления + " не совпадает с итогами таблиц доходов и вычетов!";
					КонецЕсли;
					
					ПерваяСтавка = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			ПредыдущееЗначение = Перечисления.НДФЛСтавки.ПустаяСсылка();
			Для каждого СтрокаТЗ Из Итоги Цикл
				Если ПредыдущееЗначение = СтрокаТЗ.Ставка Тогда
					СтрОшибки = СтрОшибки + Символы.ПС + Символы.Таб + "- в таблице итогов присутствуют строки, в которых указана одна и та же ставка налога!";
					Прервать;
				КонецЕсли;
				ПредыдущееЗначение = СтрокаТЗ.Ставка;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// выводим сообщения об ошибках
	Если ЗначениеЗаполнено(СтрОшибки + СтрПредупрСводнойСправки) Тогда
		
		Если Режим <> "СводнаяСправка" Тогда
			СтрОшибки =  "В сведениях о доходах сотрудника (справка № " + ДанныеФизЛица.НомерСправки + ")" + ?(Не ПустаяСтрока(ДанныеФизЛица.Фамилия+ДанныеФизЛица.Имя+ДанныеФизЛица.Отчество), " " + ДанныеФизЛица.Фамилия + " " + ДанныеФизЛица.Имя + " " + ДанныеФизЛица.Отчество, " <ФИО не указано>") + " обнаружены ошибки:" + СтрОшибки + СтрПредупрСводнойСправки;
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрОшибки, Отказ);
		Иначе
			СтрОшибки =  "В сведениях о доходах сотрудника (справка № " + ДанныеФизЛица.НомерСправки + ")" + ?(Не ПустаяСтрока(ДанныеФизЛица.Фамилия+ДанныеФизЛица.Имя+ДанныеФизЛица.Отчество), " " + ДанныеФизЛица.Фамилия + " " + ДанныеФизЛица.Имя + " " + ДанныеФизЛица.Отчество, " <ФИО не указано>") + " обнаружены ошибки:" + СтрОшибки;
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрОшибки, Отказ);
			Если Не ЗначениеЗаполнено(СтрОшибки) Тогда
				СтрПредупрСводнойСправки =  "В сведениях о доходах сотрудника (справка № " + ДанныеФизЛица.НомерСправки + ")" + ?(Не ПустаяСтрока(ДанныеФизЛица.Фамилия+ДанныеФизЛица.Имя+ДанныеФизЛица.Отчество), " " + ДанныеФизЛица.Фамилия + " " + ДанныеФизЛица.Имя + " " + ДанныеФизЛица.Отчество, " <ФИО не указано>") + " обнаружены ошибки:" + СтрПредупрСводнойСправки;
			КонецЕсли;
			ОбработкаКомментариев.ДобавитьСообщение(СтрПредупрСводнойСправки, Перечисления.ВидыСообщений.Ошибка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьКлассификаторыВСоответствия(НалоговыйПериод, СоответствиеКодовСтран = Неопределено, СоответствиеИменСтран = Неопределено, СоответствиеДокументовУдостоверяющиеЛичность = Неопределено, СоответствиеКодовРегионов = Неопределено, СоответствиеКодовДоходов = Неопределено, СоответствиеКодовВычетов = Неопределено, СоответствиеСтавокДоходов = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;

	Если СоответствиеКодовСтран <> Неопределено И СоответствиеИменСтран <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторСтранМира.Ссылка,
		|	КлассификаторСтранМира.Код,
		|	КлассификаторСтранМира.Наименование
		|ИЗ
		|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира";
		Выборка = Запрос.Выполнить().Выбрать();
		СоответствиеКодовСтран = Новый Соответствие;
		СоответствиеИменСтран = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			СоответствиеКодовСтран.Вставить(Выборка.Ссылка,Выборка.Код);
			СоответствиеИменСтран.Вставить(Выборка.Наименование,Выборка.Код)
		КонецЦикла;
	КонецЕсли;
	
	Если СоответствиеДокументовУдостоверяющиеЛичность <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыУдостоверяющиеЛичность.Ссылка,
		|	ДокументыУдостоверяющиеЛичность.КодИМНС КодИМНС
		|ИЗ
		|	Справочник.ДокументыУдостоверяющиеЛичность КАК ДокументыУдостоверяющиеЛичность";
		Выборка = Запрос.Выполнить().Выбрать();
		СоответствиеДокументовУдостоверяющиеЛичность = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			СоответствиеДокументовУдостоверяющиеЛичность.Вставить(Выборка.Ссылка,?(Выборка.КодИМНС = "18" И НалоговыйПериод >= 2015, "19", Выборка.КодИМНС))
		КонецЦикла;
	КонецЕсли;
	
	Если СоответствиеКодовРегионов <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресныйКлассификатор.Наименование,
		|	АдресныйКлассификатор.Сокращение,
		|	АдресныйКлассификатор.КодРегионаВКоде
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1";
		Выборка = Запрос.Выполнить().Выбрать();
		СоответствиеКодовРегионов = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			СоответствиеКодовРегионов.Вставить(СокрЛП(Выборка.Наименование) + " " + СокрЛП(Выборка.Сокращение), Формат(Выборка.КодРегионаВКоде,"ЧЦ=2; ЧДЦ=0; ЧВН="))
		КонецЦикла;
	КонецЕсли;
	
	Если СоответствиеКодовДоходов <> Неопределено Или СоответствиеСтавокДоходов <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоходыНДФЛ.Ссылка,
		|	ДоходыНДФЛ.КодДляОтчетности,
		|	ДоходыНДФЛ.СтавкаНалогообложенияРезидента
		|ИЗ
		|	Справочник.ДоходыНДФЛ КАК ДоходыНДФЛ";
		Выборка = Запрос.Выполнить().Выбрать();
		СоответствиеКодовДоходов = Новый Соответствие;
		СоответствиеСтавокДоходов = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			СоответствиеКодовДоходов.Вставить(Выборка.Ссылка, Выборка.КодДляОтчетности);
			СоответствиеСтавокДоходов.Вставить(Выборка.Ссылка, Выборка.СтавкаНалогообложенияРезидента)
		КонецЦикла;
	КонецЕсли;
	
	Если СоответствиеКодовВычетов <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВычетыНДФЛ.Ссылка,
		|	ВычетыНДФЛ.КодДляОтчетности2010,
		|	ВычетыНДФЛ.КодДляОтчетности2011,
		|	ВычетыНДФЛ.КодДляОтчетности2015,
		|	ВычетыНДФЛ.КодДляОтчетности2016
		|ИЗ
		|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ";
		Выборка = Запрос.Выполнить().Выбрать();
		СоответствиеКодовВычетов = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			Если НалоговыйПериод = 2010 Тогда
				СоответствиеКодовВычетов.Вставить(Выборка.Ссылка, Выборка.КодДляОтчетности2010)
			ИначеЕсли НалоговыйПериод < 2015 Тогда
				СоответствиеКодовВычетов.Вставить(Выборка.Ссылка, Выборка.КодДляОтчетности2011)
			ИначеЕсли НалоговыйПериод = 2015 Тогда
				СоответствиеКодовВычетов.Вставить(Выборка.Ссылка, Выборка.КодДляОтчетности2015)
			Иначе
				СоответствиеКодовВычетов.Вставить(Выборка.Ссылка, Выборка.КодДляОтчетности2016)
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбщиеДанныеСправки(СтруктураДанных, Отказ, ОбработкаКомментариев, ПроверятьКодОКТМО = Ложь, ПроверятьДолжностьПодписавшегоЛица = Истина) Экспорт

	Если Не ЗначениеЗаполнено(СтруктураДанных.НалоговыйПериод) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан налоговый период, за который формируются сведения!", Отказ);
	ИначеЕсли СтруктураДанных.НалоговыйПериод < 2010 Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("В документе поддерживаются налоговые периоды с 2010 года!", Отказ);
	КонецЕсли;
	
	ЭтоЮрЛицо = СтруктураДанных.ЭтоЮрЛицо;
	Если Не ЗначениеЗаполнено(СтруктураДанных.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ);
	Иначе
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.НазваниеОрганизации) Тогда
			Если ЭтоЮрЛицо Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указаны полное и сокращенное наименования " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации") + "!", Отказ);
			ИначеЕсли ПустаяСтрока(СтруктураДанных.Фамилия) Или ПустаяСтрока(СтруктураДанных.Имя) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Для физического лица-работодателя должны быть указаны, как минимум, фамилия и имя!", Отказ);
			КонецЕсли;
		ИначеЕсли Не ЭтоЮрЛицо Тогда
			Если Не РегламентированнаяОтчетность.СтрокаНаписанаПоРусски(СтруктураДанных.Фамилия + СтруктураДанных.Имя + СтруктураДанных.Отчество) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Для физического лица-работодателя Фамилия, Имя, Отчество должно быть введены русскими буквами!", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураДанных.Признак <> "СводнаяСправка" Тогда
			Если Не ЗначениеЗаполнено(СтруктураДанных.ИННорг) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан ИНН " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации") + "!", Отказ);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтруктураДанных.КодИФНС) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан код ИФНС-получателя справки!", Отказ);
			КонецЕсли;
		Иначе 	
			Если Не ЗначениеЗаполнено(СтруктураДанных.ИННорг) Тогда
				ОбработкаКомментариев.ДобавитьСообщение("Не указан ИНН " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации") + "!", Перечисления.ВидыСообщений.Ошибка);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанных.ИННорг) Тогда
			Если ЭтоЮрЛицо Тогда
				Если Не РегламентированнаяОтчетность.ИННСоответствуетТребованиям(СтруктураДанных.ИННорг, Перечисления.ЮрФизЛицо.ЮрЛицо ) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Для " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации") + " неверно введен ИНН!", Отказ);
				КонецЕсли; 
			Иначе
				Если Не РегламентированнаяОтчетность.ИННСоответствуетТребованиям(СтруктураДанных.ИННорг, Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Для физического лица-работодателя неверно введен ИНН!", Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанных.Признак <> "СводнаяСправка" Тогда
		Если ПроверятьКодОКТМО Тогда
			Если Не ЗначениеЗаполнено(СтрЗаменить(СтруктураДанных.ОКТМО,"-","")) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан код по ОКТМО, по которому формируются сведения!", Отказ);
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(СтруктураДанных.ОКАТО) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан код по ОКАТО, по которому формируются сведения!", Отказ);
			КонецЕсли;
		КонецЕсли;
		Если ЭтоЮрЛицо И Не ЗначениеЗаполнено(СтруктураДанных.КПП) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан КПП, по которому формируются сведения!", Отказ);
		КонецЕсли;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(СтруктураДанных.ФИОПодписавшего) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не указано лицо, подписавшее справку!", Перечисления.ВидыСообщений.Ошибка);
	КонецЕсли;
	
	Если ПроверятьДолжностьПодписавшегоЛица И ЭтоЮрЛицо И Не ЗначениеЗаполнено(СтруктураДанных.ДолжностьПодписавшегоЛица) Тогда
		ОбработкаКомментариев.ДобавитьСообщение("Не указана должность подписавшего лица!", Перечисления.ВидыСообщений.Ошибка);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, ОКАТО_КПП, ОКТМО_КПП, КодИФНС, Дата, Телефон, ДолжностьПодписавшегоЛица = Неопределено, СправкуПодписал, ФИОПодписавшегоПолностью = Ложь) Экспорт

	СтруктураДанныхНА = Новый Структура("Организация, НалоговыйПериод, НалоговыйПериодСтрокой, Дата, Телефон, Признак, ЭтоЮрЛицо, НазваниеОрганизации, Фамилия, Имя, Отчество, КодИФНС, ИННорг, КПП, ОКАТО, ОКТМО, ДолжностьПодписавшегоЛица, ФИОПодписавшего", Организация, НалоговыйПериод, Формат(НалоговыйПериод,"ЧЦ=4; ЧДЦ=0; ЧГ=0"), Дата, Телефон);
	ЭтоЮрЛицо = ОбщегоНазначенияЗКПереопределяемый.ЭтоЮрЛицо(Организация);
	СтруктураДанныхНА.ЭтоЮрЛицо = ЭтоЮрЛицо;
	ДанныеОрганизации = ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(Организация, "ИНН, КодИМНС, НаименованиеПолное, НаименованиеСокращенное" + ?(ЭтоЮрЛицо,"", ",ИндивидуальныйПредприниматель"));
	СтруктураДанныхНА.КодИФНС = ?(ЗначениеЗаполнено(КодИФНС), КодИФНС, ДанныеОрганизации.КодИМНС);
	СтруктураДанныхНА.ИННорг = ДанныеОрганизации.ИНН;
	СтруктураДанныхНА.ОКАТО = КодОКАТОизСуммыОКАТОиКПП(ОКАТО_КПП);
	СтруктураДанныхНА.ОКТМО = ?(НалоговыйПериод < 2015, РегламентированнаяОтчетность.ДополнитьСтроку(КодОКАТОизСуммыОКАТОиКПП(ОКТМО_КПП), 11, "-", 1), КодОКАТОизСуммыОКАТОиКПП(ОКТМО_КПП));
	СтруктураДанныхНА.КПП = КППизСуммыОКАТОиКПП(?(ЗначениеЗаполнено(СтрЗаменить(ОКТМО_КПП,"/","")), ОКТМО_КПП, ОКАТО_КПП));
	Если ЭтоЮрЛицо Тогда
		СтруктураДанныхНА.НазваниеОрганизации = ?(ЗначениеЗаполнено(ДанныеОрганизации.НаименованиеСокращенное), ДанныеОрганизации.НаименованиеСокращенное, ДанныеОрганизации.НаименованиеПолное);
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", ДанныеОрганизации.ИндивидуальныйПредприниматель);
		Запрос.УстановитьПараметр("ДатаКадровыхСведений", КонецДня(Дата));
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаКадровыхСведений, ФизЛицо = &ИндивидуальныйПредприниматель) КАК ФИОФизЛицСрезПоследних";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Фамилия = Выборка.Фамилия;
			Имя = Выборка.Имя;
			Отчество = Выборка.Отчество;
		Иначе
			Фамилия = "";
			Имя = "";
			Отчество = "";
			ОбщегоНазначенияЗК.ФамилияИнициалыФизЛица(ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(ДанныеОрганизации.ИндивидуальныйПредприниматель,"Наименование"),Фамилия,Имя,Отчество);
		КонецЕсли;
		СтруктураДанныхНА.НазваниеОрганизации = Фамилия + " " + Имя + " " + Отчество;
		СтруктураДанныхНА.Фамилия = Фамилия;
		СтруктураДанныхНА.Имя = Имя;
		СтруктураДанныхНА.Отчество = Отчество;
	КонецЕсли;
	Если ДолжностьПодписавшегоЛица <> Неопределено Тогда
		СтруктураДанныхНА.ДолжностьПодписавшегоЛица = ОбщегоНазначенияЗК.ПолучитьПредставленияОбъектов(ДолжностьПодписавшегоЛица);
	КонецЕсли;
	Если ЗначениеЗаполнено(СправкуПодписал) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СправкуПодписал", СправкуПодписал);
		Запрос.УстановитьПараметр("Дата", Дата);
		Если ФИОПодписавшегоПолностью Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(ФИОПодписавшего.Фамилия + "" "" + ФИОПодписавшего.Имя + "" "" + ФИОПодписавшего.Отчество, ДанныеДокумента.Наименование) КАК ФИОПодписавшего,
			|	ФИОПодписавшего.Фамилия,
			|	ФИОПодписавшего.Имя,
			|	ФИОПодписавшего.Отчество
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ДанныеДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &СправкуПодписал) КАК ФИОПодписавшего
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &СправкуПодписал";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(ФИОПодписавшего.Фамилия + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОПодписавшего.Имя, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОПодписавшего.Имя, 1, 1) + "".""
			|			ИНАЧЕ """"
			|		КОНЕЦ + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОПодписавшего.Отчество, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОПодписавшего.Отчество, 1, 1) + "".""
			|			ИНАЧЕ """"
			|		КОНЕЦ, ДанныеДокумента.Наименование) КАК ФИОПодписавшего,
			|	ФИОПодписавшего.Фамилия,
			|	ФИОПодписавшего.Имя,
			|	ФИОПодписавшего.Отчество
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ДанныеДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &СправкуПодписал) КАК ФИОПодписавшего
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &СправкуПодписал";
		КонецЕсли;
	    Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураДанныхНА.ФИОПодписавшего = Выборка.ФИОПодписавшего;
			Если ЭтоЮрЛицо Тогда
				СтруктураДанныхНА.Фамилия = Выборка.Фамилия;
				СтруктураДанныхНА.Имя = Выборка.Имя;
				СтруктураДанныхНА.Отчество = Выборка.Отчество;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
    Возврат СтруктураДанныхНА
	
КонецФункции // ДанныеНалоговогоАгентаДля2НДФЛ()

Функция ИзвлечьДоходыПоСтавке(НалоговыйПериод, Ставка, СтатусНалогоплательщика, ДоходыПоВидам, СоответствиеСтавокДоходов) Экспорт
	
	ТаблицаПодходящихДоходов = ДоходыПоВидам.СкопироватьКолонки();

	Если ДоходыПоВидам.Колонки.Найти("Ставка") <> Неопределено Тогда
		
		ТаблицаПодходящихДоходов = ДоходыПоВидам.Скопировать(Новый Структура("Ставка",Ставка))
		
	Иначе
		
		ЭтоНеРезидент = СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Или НалоговыйПериод < Год(ПроведениеРасчетов.ДатаЗакона285ФЗ()) И СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Беженец;
		ЭтоРезидент = СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Резидент;
		Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
			
			СтавкаДохода = Перечисления.НДФЛСтавки.Ставка13;
			СтавкаНалогообложенияРезидента = СоответствиеСтавокДоходов[СтрокаТЗ.КодДохода];
			
			Если СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13 Тогда
				Если ЭтоНеРезидент Тогда
					СтавкаДохода = Перечисления.НДФЛСтавки.Ставка30
				Иначе
					СтавкаДохода = Перечисления.НДФЛСтавки.Ставка13;
				КонецЕсли;
			ИначеЕсли ЭтоРезидент Тогда
				Если СтрокаТЗ.КодДохода = Справочники.ДоходыНДФЛ.Код1010 И НалоговыйПериод >= Год(ПроведениеРасчетов.ДатаИзмененияНалогообложенияДивидендов()) Тогда
					СтавкаДохода = Перечисления.НДФЛСтавки.Ставка13;
				ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09 Тогда
					СтавкаДохода = Перечисления.НДФЛСтавки.Ставка09;
				ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35 Тогда
					СтавкаДохода = Перечисления.НДФЛСтавки.Ставка35;
				КонецЕсли;
			ИначеЕсли СтрокаТЗ.КодДохода = Справочники.ДоходыНДФЛ.Код1010 Тогда
				СтавкаДохода = Перечисления.НДФЛСтавки.Ставка15
			Иначе
				СтавкаДохода = Перечисления.НДФЛСтавки.Ставка30
			КонецЕсли;
			
			Если СтавкаДохода = Ставка Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаПодходящихДоходов.Добавить(), СтрокаТЗ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат	ТаблицаПодходящихДоходов
	
КонецФункции // ИзвлечьДоходыПоСтавке()

////////////////////////////////////////////////////////////////////////////////

Процедура ВывестиРазделВСправку(ТабДокумент, Раздел, ЭтоПоследнийРаздел, ОбластьНалоговыйАгент, ОбластьПримечание, ШапкаВторойСтраницы)
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(Раздел);
	ВыводимыеОбласти.Добавить(ОбластьНалоговыйАгент);
	
	ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
	Если Не ВывестиПодвалЛиста И ЭтоПоследнийРаздел Тогда
		Если ОбластьПримечание <> Неопределено Тогда
			ВыводимыеОбласти.Добавить(ОбластьПримечание);
		КонецЕсли;
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
	КонецЕсли;
	Если ВывестиПодвалЛиста Тогда
		ТабДокумент.Вывести(ОбластьНалоговыйАгент);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ШапкаВторойСтраницы.Параметры.НомерСтраницы = ШапкаВторойСтраницы.Параметры.НомерСтраницы + 1;
		ТабДокумент.Вывести(ШапкаВторойСтраницы);
	КонецЕсли;
	
	ТабДокумент.Вывести(Раздел);
	
КонецПроцедуры

Процедура ВывестиТабличныеДанные(МассивСтрок, ДокументРезультат, ОбластиМакета, Знач МинимумСтрок, КоличествоКолонок = 2, ПроверяемоеПоле = "")

	ВсегоСтрок = МассивСтрок.Количество();
	
	Для каждого Область Из ОбластиМакета Цикл
		ФормированиеПечатныхФормЗК.ОчиститьПараметрыОбластиТабличногоДокумента(Область);
	КонецЦикла;
	
	ЛеваяЧастьМакета = ОбластиМакета[0];
	
	// Вычислим высоту таблицы
	ВысотаТаблицы = ?(ВсегоСтрок < МинимумСтрок, ВсегоСтрок, ?(ВсегоСтрок > МинимумСтрок * КоличествоКолонок, ОбщегоНазначенияЗК.ЦелМаксимальное(ВсегоСтрок / КоличествоКолонок), МинимумСтрок));
	
	Если КоличествоКолонок = 2 И ЗначениеЗаполнено(ПроверяемоеПоле) И ВсегоСтрок > ВысотаТаблицы Тогда // иногда строки доходов не надо переносить в правый столбец печ.формы
		ПерваяСтрокаВторойКолонки = ВысотаТаблицы + 1;
		Для Сч = ПерваяСтрокаВторойКолонки По ВсегоСтрок Цикл
			Если ЗначениеЗаполнено(МассивСтрок[Сч - 1][ПроверяемоеПоле]) Тогда
				Прервать;
			Иначе
				ВысотаТаблицы = ВысотаТаблицы + 1
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Сч = 1 По ВысотаТаблицы Цикл
		
		// перенесем данные
		ЛеваяЧастьМакета.Параметры.Заполнить(МассивСтрок[Сч - 1]);
		Если ВсегоСтрок > МинимумСтрок Тогда  // правая часть
			Для СчКолонок = 2 По КоличествоКолонок Цикл
				Если ВысотаТаблицы * (СчКолонок - 1) + Сч <= ВсегоСтрок Тогда
					ОбластиМакета[СчКолонок - 1].Параметры.Заполнить(МассивСтрок[ВысотаТаблицы * (СчКолонок - 1) + Сч - 1]);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		// выведем области макета
		ДокументРезультат.Вывести(ЛеваяЧастьМакета);	
		Для СчКолонок = 2 По КоличествоКолонок Цикл
			ДокументРезультат.Присоединить(ОбластиМакета.Получить(СчКолонок - 1));	
		КонецЦикла;
		
		Для каждого Область Из ОбластиМакета Цикл
			ФормированиеПечатныхФормЗК.ОчиститьПараметрыОбластиТабличногоДокумента(Область);
		КонецЦикла;
		
	КонецЦикла;
	
	// довыведем пустые строки раздела
	Если ВысотаТаблицы < МинимумСтрок Тогда
		Для Сч = ВысотаТаблицы + 1 По МинимумСтрок Цикл
			ДокументРезультат.Вывести(ЛеваяЧастьМакета);	
			Для СчКолонок = 2 По КоличествоКолонок Цикл
				ДокументРезультат.Присоединить(ОбластиМакета[СчКолонок - 1]);	
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВывестиТабличныеДанные()

Функция Печать2010(Отказ, СтруктураДанныхНА, ТаблицаДанныхСотрудников, ТаблицаДанныхОДоходах, ТаблицаДанныхОВычетах, ТаблицаИтоговыхДанных, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеКодовДоходов, СоответствиеКодовВычетов)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ПустаяСтруктураАдреса = Новый Структура("Индекс,КодРегиона,Район,Город,НаселенныйПункт,Улица,Дом,Корпус,Квартира");
	СтруктураОтбора = Новый Структура("НомерСправки");
	
	ТекущаяДата = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	
	Если Не Отказ Тогда
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаПоНДФЛВНалоговыйОрган_Справка2_НДФЛ";
		
		Справка = ПолучитьОбщийМакет("Форма2НДФЛс2010");
		
		ОбластьМакетаШапка = Справка.ПолучитьОбласть("Шапка"); // Шапка документа.
		ОбластьМакетаСередина = Справка.ПолучитьОбласть("Середина"); // Середина документа.
		ОбластьМакетаПодвал	= Справка.ПолучитьОбласть("Подвал");// Подвал документа
		ОбластьМакетаСтрокаВычетов = Справка.ПолучитьОбласть("СтрокаВычетов"); 
		ОбластьМакетаСтрокаДоходов = Справка.ПолучитьОбласть("СтрокаДоходов"); 
		ОбластиМакетаДляДоходов = Новый Массив;
		ОбластиМакетаДляДоходов.Добавить(Справка.ПолучитьОбласть("СтрокаДоходов|ЛеваяЧасть"));
		ОбластиМакетаДляДоходов.Добавить(Справка.ПолучитьОбласть("СтрокаДоходов|ПраваяЧасть"));
		ОбластиМакетаДляВычетов = Новый Массив;
		Для Сч = 1 По 4 Цикл
			ОбластиМакетаДляВычетов.Добавить(Справка.ПолучитьОбласть("СтрокаВычетов|Вычеты"+Сч));
		КонецЦикла;
		
		ОбластьМакетаШапка.Параметры.Заполнить(СтруктураДанныхНА);  // Раздел 1
		Если СтруктураДанныхНА.Признак = "СводнаяСправка" Тогда
			ОбластьМакетаШапка.Параметры.Признак = ""
		КонецЕсли;;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(СтруктураДанныхНА); // подписи
		
	КонецЕсли;
	
	Для каждого СтрокаДанных Из ТаблицаДанныхСотрудников Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = ТаблицаДанныхОДоходах.Скопировать(ТаблицаДанныхОДоходах.НайтиСтроки(СтруктураОтбора));
		ВычетыПоВидам = ТаблицаДанныхОВычетах.Скопировать(ТаблицаДанныхОВычетах.НайтиСтроки(СтруктураОтбора));
		
		// Проверка корректности выводимых данных
		ПроверитьДанныеСотрудника(2010, СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Неопределено, ТекущаяДата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ДоходыПоВидам.Колонки.Добавить("КодДоходаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4)));
		ДоходыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		ДоходыПоВидам.Сортировать("Месяц, КодДохода, СуммаДохода Убыв, КодВычета");
		ПредыдущийМесяц = -1;
		ПредыдущийКодДохода = "";
		Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
			Если ПредыдущийМесяц <> СтрокаТЗ.Месяц Или ПредыдущийКодДохода <> СтрокаТЗ.КодДохода Тогда
				СтрокаТЗ.КодДоходаСтрокой = СоответствиеКодовДоходов[СтрокаТЗ.КодДохода];
				ПредыдущийМесяц = СтрокаТЗ.Месяц;
				ПредыдущийКодДохода = СтрокаТЗ.КодДохода;
			Иначе
				СтрокаТЗ.Месяц = 0;
			КонецЕсли;
			СтрокаТЗ.КодВычетаСтрокой = СоответствиеКодовВычетов[СтрокаТЗ.КодВычета];
		КонецЦикла;
		ВычетыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		Для каждого СтрокаТЗ Из ВычетыПоВидам Цикл
			СтрокаТЗ.КодВычетаСтрокой = СоответствиеКодовВычетов[СтрокаТЗ.КодВычета];
		КонецЦикла;
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда  // если справок несколько - разобьем на отдельные страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Заполнение данных в параметрах макета
		
		ОбластьМакетаШапка.Параметры.Заполнить(СтрокаДанных);  // Раздел 2
		
		Статус = 1;
		Если СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент 
				Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС 
				Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НерезидентРаботающийНаОснованииПатента 
				Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников 
				Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ
				Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Беженец Тогда
			Статус = 2;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
			Статус = 3;
		КонецЕсли;
		ОбластьМакетаШапка.Параметры.Статус = Статус;
		ОбластьМакетаШапка.Параметры.Гражданство = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
		ОбластьМакетаШапка.Параметры.КодУдЛичн = СоответствиеДокументовУдостоверяющиеЛичность[СтрокаДанных.ВидДокумента];
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресРФ) Тогда
			СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(СтрокаДанных.АдресРФ);
			ОбластьМакетаШапка.Параметры.Заполнить(СтруктураАдреса);  
			ОбластьМакетаШапка.Параметры.КодРегиона = СоответствиеКодовРегионов[СтруктураАдреса.Регион]
		Иначе // очищаем адресные данные
			ОбластьМакетаШапка.Параметры.Заполнить(ПустаяСтруктураАдреса);  
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресЗарубежом) Тогда
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтрокаДанных.АдресЗарубежом);
			ОбластьМакетаШапка.Параметры.КодСтр = СоответствиеИменСтран[СтруктураАдреса.Страна];
			ОбластьМакетаШапка.Параметры.АдрТекст = СтруктураАдреса.Представление;
		Иначе // очищаем адресные данные
			ОбластьМакетаШапка.Параметры.КодСтр = "";
			ОбластьМакетаШапка.Параметры.АдрТекст = "";
		КонецЕсли;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(СтрокаДанных); // реквизиты Уведомления об имущ.вычете Раздела 4 и суммы Раздела 5
		
		// Вывод подготовленной справки в табличный документ
		
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// Раздел 3
		Если ДоходыПоВидам.Количество() = 0 Тогда
			Для Сч = 1 По 9 Цикл
				ТабДокумент.Вывести(ОбластьМакетаСтрокаДоходов);
			КонецЦикла;
		Иначе
			ВывестиТабличныеДанные(ДоходыПоВидам, ТабДокумент, ОбластиМакетаДляДоходов, 9, 2);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаСередина);
		
		// Раздел 4
		ВычетыПоВидам.Сортировать("КодВычета");
		Если ВычетыПоВидам.Количество() = 0 Тогда
			ТабДокумент.Вывести(ОбластьМакетаСтрокаВычетов);
		Иначе
			ВывестиТабличныеДанные(ВычетыПоВидам, ТабДокумент, ОбластиМакетаДляВычетов, 1, 4);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // Печать2010()

Функция ПечатьС2011года(Отказ, НалоговыйПериод, ИмяМакета, СтруктураДанныхНА, ТаблицаДанныхСотрудников, ТаблицаДанныхОДоходах, ТаблицаДанныхОВычетах, ТаблицаИтоговыхДанных, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеКодовДоходов, СоответствиеКодовВычетов, СоответствиеСтавокДоходов)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ПустаяСтруктураАдреса = Новый Структура("Индекс,КодРегиона,Район,Город,НаселенныйПункт,Улица,Дом,Корпус,Квартира");
	СтруктураОтбора = Новый Структура("НомерСправки");
	
	ТекущаяДата = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	ВременныйТабДокумент = Новый ТабличныйДокумент;
	
	Если Не Отказ Тогда
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаПоНДФЛВНалоговыйОрган_Справка2_НДФЛ";
		
		Справка = ПолучитьОбщийМакет(ИмяМакета);
		
		ОбластьМакетаШапкаПервойСтраницы = Справка.ПолучитьОбласть("ШапкаПервойСтраницы"); 
		ОбластьМакетаШапкаВторойСтраницы = Справка.ПолучитьОбласть("ШапкаВторойСтраницы");
		ОбластьМакетаЗаголовокРаздела3 = Справка.ПолучитьОбласть("ЗаголовокРаздела3"); 
		ОбластьМакетаЗаголовокРаздела4 = Справка.ПолучитьОбласть("ЗаголовокРаздела4");
		ОбластьМакетаПодвалРаздела4	= Справка.ПолучитьОбласть("ПодвалРаздела4");
		ОбластьМакетаРаздел5 = Справка.ПолучитьОбласть("Раздел5");
		ОбластьМакетаНалоговыйАгент = Справка.ПолучитьОбласть("НалоговыйАгент");
		ОбластьМакетаПримечание = Справка.ПолучитьОбласть("Примечание");
		
		ОбластьМакетаСтрокаВычетов = Справка.ПолучитьОбласть("СтрокаВычетов"); 
		ОбластьМакетаСтрокаДоходов = Справка.ПолучитьОбласть("СтрокаДоходов"); 
		ОбластиМакетаДляДоходов = Новый Массив;
		ОбластиМакетаДляДоходов.Добавить(Справка.ПолучитьОбласть("СтрокаДоходов|ЛеваяЧасть"));
		ОбластиМакетаДляДоходов.Добавить(Справка.ПолучитьОбласть("СтрокаДоходов|ПраваяЧасть"));
		ОбластиМакетаДляВычетов = Новый Массив;
		Для Сч = 1 По 4 Цикл
			ОбластиМакетаДляВычетов.Добавить(Справка.ПолучитьОбласть("СтрокаВычетов|Вычеты"+Сч));
		КонецЦикла;
		
		ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(СтруктураДанныхНА);  // Раздел 1
		Если СтруктураДанныхНА.Признак = "СводнаяСправка" Или Не ЗначениеЗаполнено(ОбластьМакетаШапкаПервойСтраницы.Параметры.Признак) Тогда
			ОбластьМакетаШапкаПервойСтраницы.Параметры.Признак = "1"
		КонецЕсли;
		
		ОбластьМакетаНалоговыйАгент.Параметры.Заполнить(СтруктураДанныхНА); // подписи
		
	КонецЕсли;
	
	Для каждого СтрокаДанных Из ТаблицаДанныхСотрудников Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = ТаблицаДанныхОДоходах.Скопировать(ТаблицаДанныхОДоходах.НайтиСтроки(СтруктураОтбора));
		ВычетыПоВидам = ТаблицаДанныхОВычетах.Скопировать(ТаблицаДанныхОВычетах.НайтиСтроки(СтруктураОтбора));
		Итоги = ТаблицаИтоговыхДанных.Скопировать(ТаблицаИтоговыхДанных.НайтиСтроки(СтруктураОтбора));
		Итоги.Сортировать("Ставка");
		
		// Проверка корректности выводимых данных
		ПроверитьДанныеСотрудника(НалоговыйПериод, СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Итоги, ТекущаяДата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран, СоответствиеСтавокДоходов);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ДоходыПоВидам.Колонки.Добавить("КодДоходаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4)));
		ДоходыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		ДоходыПоВидам.Сортировать("Месяц, КодДохода, СуммаДохода Убыв, КодВычета");
		ПредыдущийМесяц = -1;
		ПредыдущийКодДохода = "";
		Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
			Если ПредыдущийМесяц <> СтрокаТЗ.Месяц Или ПредыдущийКодДохода <> СтрокаТЗ.КодДохода Тогда
				СтрокаТЗ.КодДоходаСтрокой = СоответствиеКодовДоходов[СтрокаТЗ.КодДохода];
				ПредыдущийМесяц = СтрокаТЗ.Месяц;
				ПредыдущийКодДохода = СтрокаТЗ.КодДохода;
			Иначе
				СтрокаТЗ.Месяц = 0;
			КонецЕсли;
			СтрокаТЗ.КодВычетаСтрокой = СоответствиеКодовВычетов[СтрокаТЗ.КодВычета];
		КонецЦикла;
		ВычетыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		Для каждого СтрокаТЗ Из ВычетыПоВидам Цикл
			СтрокаТЗ.КодВычетаСтрокой = СоответствиеКодовВычетов[СтрокаТЗ.КодВычета];
		КонецЦикла;
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда  // если справок несколько - разобьем на отдельные страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Заполнение данных в параметрах макета
		
		ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(СтрокаДанных);  // Раздел 2
		Статус = 1;
		Если СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент 
				Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС 
				Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НерезидентРаботающийНаОснованииПатента 
				Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников 
				Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ
				Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Беженец Тогда
			Статус = 2;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
			Статус = 3;
		КонецЕсли;
		ОбластьМакетаШапкаПервойСтраницы.Параметры.Статус = Статус;
		ОбластьМакетаШапкаПервойСтраницы.Параметры.Гражданство = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
		ОбластьМакетаШапкаПервойСтраницы.Параметры.КодУдЛичн = СоответствиеДокументовУдостоверяющиеЛичность[СтрокаДанных.ВидДокумента];
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресРФ) Тогда
			СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(СтрокаДанных.АдресРФ);
			ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(СтруктураАдреса);  
			ОбластьМакетаШапкаПервойСтраницы.Параметры.КодРегиона = СоответствиеКодовРегионов[СтруктураАдреса.Регион]
		Иначе // очищаем адресные данные
			ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(ПустаяСтруктураАдреса);  
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресЗарубежом) Тогда
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтрокаДанных.АдресЗарубежом);
			ОбластьМакетаШапкаПервойСтраницы.Параметры.КодСтр = СоответствиеИменСтран[СтруктураАдреса.Страна];
			ОбластьМакетаШапкаПервойСтраницы.Параметры.АдрТекст = СтруктураАдреса.Представление;
		Иначе // очищаем адресные данные
			ОбластьМакетаШапкаПервойСтраницы.Параметры.КодСтр = "";
			ОбластьМакетаШапкаПервойСтраницы.Параметры.АдрТекст = "";
		КонецЕсли;
		
		ОбластьМакетаПодвалРаздела4.Параметры.Заполнить(СтрокаДанных); // реквизиты Уведомления об имущ.вычете Раздела 4
		
		// Вывод подготовленной справки в табличный документ
		
		ОбластьМакетаШапкаВторойСтраницы.Параметры.Заполнить(ОбластьМакетаШапкаПервойСтраницы.Параметры);  // последующие страницы
		ТабДокумент.Вывести(ОбластьМакетаШапкаПервойСтраницы);
		
		ПерваяСтавка = Истина;
		ОбластьМакетаШапкаВторойСтраницы.Параметры.НомерСтраницы = 1;
		ВыведеноИтогов = 0;
		ВсегоИтогов = Итоги.Количество();
		Для каждого СтрокаИтогов Из Итоги Цикл
		
			ВыведеноИтогов = ВыведеноИтогов + 1;
			
			ВременныйТабДокумент.Очистить();
			
			// Раздел 3
			ОбластьМакетаЗаголовокРаздела3.Параметры.Заполнить(СтрокаИтогов); 
			ВременныйТабДокумент.Вывести(ОбластьМакетаЗаголовокРаздела3);
			
			ДоходыПоСтавке = ИзвлечьДоходыПоСтавке(НалоговыйПериод, СтрокаИтогов.Ставка, СтрокаДанных.СтатусНалогоплательщика, ДоходыПоВидам, СоответствиеСтавокДоходов);
			Если ДоходыПоСтавке.Количество() = 0 Тогда
				ВременныйТабДокумент.Вывести(ОбластьМакетаСтрокаДоходов);
			Иначе
				ВывестиТабличныеДанные(ДоходыПоСтавке, ВременныйТабДокумент, ОбластиМакетаДляДоходов, 1, 2, "КодДоходаСтрокой");
			КонецЕсли;
			ВывестиРазделВСправку(ТабДокумент, ВременныйТабДокумент, Ложь, ОбластьМакетаНалоговыйАгент, ОбластьМакетаПримечание, ОбластьМакетаШапкаВторойСтраницы);
			
			// Раздел 4
			Если ПерваяСтавка Тогда
			
				ВременныйТабДокумент.Очистить();
				
				ВременныйТабДокумент.Вывести(ОбластьМакетаЗаголовокРаздела4);
				ВычетыПоВидам.Сортировать("КодВычета");
				Если ВычетыПоВидам.Количество() = 0 Или СтрокаИтогов.Ставка <> Перечисления.НДФЛСтавки.Ставка13 Тогда
					ВременныйТабДокумент.Вывести(ОбластьМакетаСтрокаВычетов);
				Иначе
					ВывестиТабличныеДанные(ВычетыПоВидам, ВременныйТабДокумент, ОбластиМакетаДляВычетов, 1, 4);
				КонецЕсли;
				
				ВременныйТабДокумент.Вывести(ОбластьМакетаПодвалРаздела4);
				ВывестиРазделВСправку(ТабДокумент, ВременныйТабДокумент, Ложь, ОбластьМакетаНалоговыйАгент, ОбластьМакетаПримечание, ОбластьМакетаШапкаВторойСтраницы);
				
				ПерваяСтавка = Ложь;
				
			КонецЕсли;
			
			// Раздел 5
			ВременныйТабДокумент.Очистить();
			
			ОбластьМакетаРаздел5.Параметры.Заполнить(СтрокаИтогов); 
			ВременныйТабДокумент.Вывести(ОбластьМакетаРаздел5);
			ВывестиРазделВСправку(ТабДокумент, ВременныйТабДокумент, ВыведеноИтогов = ВсегоИтогов, ОбластьМакетаНалоговыйАгент, ОбластьМакетаПримечание, ОбластьМакетаШапкаВторойСтраницы);
			
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьМакетаНалоговыйАгент);
		ТабДокумент.Вывести(ОбластьМакетаПримечание);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // Печать2011()

Функция ПечатьС2015года(Отказ, НалоговыйПериод, НомерКорректировки, ИмяМакета, СтруктураДанныхНА, ТаблицаДанныхСотрудников, ТаблицаДанныхОДоходах, ТаблицаДанныхОВычетах, ТаблицаИтоговыхДанных, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеКодовДоходов, СоответствиеКодовВычетов, СоответствиеСтавокДоходов)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ПустаяСтруктураАдреса = Новый Структура("Индекс,КодРегиона,Район,Город,НаселенныйПункт,Улица,Дом,Корпус,Квартира");
	СтруктураОтбора = Новый Структура("НомерСправки");
	
	ТекущаяДата = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	ВременныйТабДокумент = Новый ТабличныйДокумент;
	
	Если Не Отказ Тогда
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаПоНДФЛВНалоговыйОрган_Справка2_НДФЛ";
		
		Справка = ПолучитьОбщийМакет(ИмяМакета);
		
		ОбластьМакетаШапкаПервойСтраницы = Справка.ПолучитьОбласть("ШапкаПервойСтраницы"); 
		ОбластьМакетаШапкаВторойСтраницы = Справка.ПолучитьОбласть("ШапкаВторойСтраницы");
		ОбластьМакетаЗаголовокРаздела3 = Справка.ПолучитьОбласть("ЗаголовокРаздела3"); 
		ОбластьМакетаЗаголовокРаздела4 = Справка.ПолучитьОбласть("ЗаголовокРаздела4");
		ОбластьМакетаПодвалРаздела4	= Справка.ПолучитьОбласть("ПодвалРаздела4");
		ОбластьМакетаРаздел5 = Справка.ПолучитьОбласть("Раздел5");
		ОбластьМакетаНалоговыйАгент = Справка.ПолучитьОбласть("НалоговыйАгент");
		ОбластьМакетаПримечание = Неопределено;
		
		ОбластьМакетаСтрокаВычетов = Справка.ПолучитьОбласть("СтрокаВычетов"); 
		ОбластьМакетаСтрокаДоходов = Справка.ПолучитьОбласть("СтрокаДоходов"); 
		ОбластиМакетаДляДоходов = Новый Массив;
		ОбластиМакетаДляДоходов.Добавить(Справка.ПолучитьОбласть("СтрокаДоходов|ЛеваяЧасть"));
		ОбластиМакетаДляДоходов.Добавить(Справка.ПолучитьОбласть("СтрокаДоходов|ПраваяЧасть"));
		ОбластиМакетаДляВычетов = Новый Массив;
		Для Сч = 1 По 4 Цикл
			ОбластиМакетаДляВычетов.Добавить(Справка.ПолучитьОбласть("СтрокаВычетов|Вычеты"+Сч));
		КонецЦикла;
		
		ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(СтруктураДанныхНА);  // Раздел 1
		Если СтруктураДанныхНА.Признак = "СводнаяСправка" Или Не ЗначениеЗаполнено(ОбластьМакетаШапкаПервойСтраницы.Параметры.Признак) Тогда
			ОбластьМакетаШапкаПервойСтраницы.Параметры.Признак = "1"
		КонецЕсли;
		ОбластьМакетаШапкаПервойСтраницы.Параметры.НомерКорректировки = Формат(НомерКорректировки,"ЧЦ=2; ЧН=00; ЧВН=");	
		
		ОбластьМакетаНалоговыйАгент.Параметры.Заполнить(СтруктураДанныхНА); // подписи
		
	КонецЕсли;
	
	Для каждого СтрокаДанных Из ТаблицаДанныхСотрудников Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = ТаблицаДанныхОДоходах.Скопировать(ТаблицаДанныхОДоходах.НайтиСтроки(СтруктураОтбора));
		ВычетыПоВидам = ТаблицаДанныхОВычетах.Скопировать(ТаблицаДанныхОВычетах.НайтиСтроки(СтруктураОтбора));
		Итоги = ТаблицаИтоговыхДанных.Скопировать(ТаблицаИтоговыхДанных.НайтиСтроки(СтруктураОтбора));
		Итоги.Сортировать("Ставка");
		
		// Проверка корректности выводимых данных
		ПроверитьДанныеСотрудника(НалоговыйПериод, СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Итоги, ТекущаяДата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран, СоответствиеСтавокДоходов, НомерКорректировки);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ДоходыПоВидам.Колонки.Добавить("КодДоходаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4)));
		ДоходыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		ДоходыПоВидам.Сортировать("Месяц, КодДохода, СуммаДохода Убыв, КодВычета");
		ПредыдущийМесяц = -1;
		ПредыдущийКодДохода = "";
		Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
			Если ПредыдущийМесяц <> СтрокаТЗ.Месяц Или ПредыдущийКодДохода <> СтрокаТЗ.КодДохода Тогда
				СтрокаТЗ.КодДоходаСтрокой = СоответствиеКодовДоходов[СтрокаТЗ.КодДохода];
				ПредыдущийМесяц = СтрокаТЗ.Месяц;
				ПредыдущийКодДохода = СтрокаТЗ.КодДохода;
			Иначе
				СтрокаТЗ.Месяц = 0;
			КонецЕсли;
			СтрокаТЗ.КодВычетаСтрокой = СоответствиеКодовВычетов[СтрокаТЗ.КодВычета];
		КонецЦикла;
		ВычетыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		Для каждого СтрокаТЗ Из ВычетыПоВидам Цикл
			СтрокаТЗ.КодВычетаСтрокой = СоответствиеКодовВычетов[СтрокаТЗ.КодВычета];
		КонецЦикла;
		
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда  // если справок несколько - разобьем на отдельные страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Заполнение данных в параметрах макета
		
		ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(СтрокаДанных);  // Раздел 2
		Статус = 1;
		Если СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Тогда
			Статус = 2;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС Тогда
			Статус = 2;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
			Статус = 3;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников Тогда
			Статус = 4;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ Тогда
			Статус = 4;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Беженец Тогда
			Статус = 5;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НерезидентРаботающийНаОснованииПатента Тогда
			Статус = 6;
		КонецЕсли;
		ОбластьМакетаШапкаПервойСтраницы.Параметры.Статус = Статус;
		ОбластьМакетаШапкаПервойСтраницы.Параметры.Гражданство = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
		ОбластьМакетаШапкаПервойСтраницы.Параметры.КодУдЛичн = СоответствиеДокументовУдостоверяющиеЛичность[СтрокаДанных.ВидДокумента];
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресРФ) Тогда
			СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(СтрокаДанных.АдресРФ);
			ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(СтруктураАдреса);  
			ОбластьМакетаШапкаПервойСтраницы.Параметры.КодРегиона = СоответствиеКодовРегионов[СтруктураАдреса.Регион]
		Иначе // очищаем адресные данные
			ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(ПустаяСтруктураАдреса);  
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресЗарубежом) Тогда
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтрокаДанных.АдресЗарубежом);
			ОбластьМакетаШапкаПервойСтраницы.Параметры.КодСтр = СоответствиеИменСтран[СтруктураАдреса.Страна];
			ОбластьМакетаШапкаПервойСтраницы.Параметры.АдрТекст = СтруктураАдреса.Представление;
		Иначе // очищаем адресные данные
			ОбластьМакетаШапкаПервойСтраницы.Параметры.КодСтр = "";
			ОбластьМакетаШапкаПервойСтраницы.Параметры.АдрТекст = "";
		КонецЕсли;
		
		ОбластьМакетаПодвалРаздела4.Параметры.Заполнить(СтрокаДанных); // реквизиты Уведомления об имущ.вычете Раздела 4
		ОбластьМакетаРаздел5.Параметры.Заполнить(СтрокаДанных);  // реквизиты Уведомления для работающих по патенту Раздела 5
		
		// Вывод подготовленной справки в табличный документ
		
		ОбластьМакетаШапкаВторойСтраницы.Параметры.Заполнить(ОбластьМакетаШапкаПервойСтраницы.Параметры);  // последующие страницы
		ТабДокумент.Вывести(ОбластьМакетаШапкаПервойСтраницы);
		
		ПерваяСтавка = Истина;
		ОбластьМакетаШапкаВторойСтраницы.Параметры.НомерСтраницы = 1;
		ВыведеноИтогов = 0;
		ВсегоИтогов = Итоги.Количество();
		Для каждого СтрокаИтогов Из Итоги Цикл
		
			ВыведеноИтогов = ВыведеноИтогов + 1;
			
			// Раздел 3
			ВременныйТабДокумент.Очистить();
			
			ОбластьМакетаЗаголовокРаздела3.Параметры.Заполнить(СтрокаИтогов); 
			ВременныйТабДокумент.Вывести(ОбластьМакетаЗаголовокРаздела3);
			ДоходыПоСтавке = ИзвлечьДоходыПоСтавке(НалоговыйПериод, СтрокаИтогов.Ставка, СтрокаДанных.СтатусНалогоплательщика, ДоходыПоВидам, СоответствиеСтавокДоходов);
			Если ДоходыПоСтавке.Количество() = 0 Тогда
				ВременныйТабДокумент.Вывести(ОбластьМакетаСтрокаДоходов);
			Иначе
				ВывестиТабличныеДанные(ДоходыПоСтавке, ВременныйТабДокумент, ОбластиМакетаДляДоходов, 1, 2, "КодДоходаСтрокой");
			КонецЕсли;
			ВывестиРазделВСправку(ТабДокумент, ВременныйТабДокумент, Ложь, ОбластьМакетаНалоговыйАгент, ОбластьМакетаПримечание, ОбластьМакетаШапкаВторойСтраницы);
			
			// Раздел 4
			ВременныйТабДокумент.Очистить();
			
			ВременныйТабДокумент.Вывести(ОбластьМакетаЗаголовокРаздела4);
			ВычетыПоВидам.Сортировать("КодВычета");
			Если ВычетыПоВидам.Количество() = 0 Или СтрокаИтогов.Ставка <> Перечисления.НДФЛСтавки.Ставка13 Тогда
				ВременныйТабДокумент.Вывести(ОбластьМакетаСтрокаВычетов);
			Иначе
				ВывестиТабличныеДанные(ВычетыПоВидам, ВременныйТабДокумент, ОбластиМакетаДляВычетов, 1, 4);
			КонецЕсли;
			ВременныйТабДокумент.Вывести(ОбластьМакетаПодвалРаздела4);
			ВывестиРазделВСправку(ТабДокумент, ВременныйТабДокумент, Ложь, ОбластьМакетаНалоговыйАгент, ОбластьМакетаПримечание, ОбластьМакетаШапкаВторойСтраницы);
			
			// Раздел 5
			ВременныйТабДокумент.Очистить();
			
			ОбластьМакетаРаздел5.Параметры.Заполнить(СтрокаИтогов); 
			ВременныйТабДокумент.Вывести(ОбластьМакетаРаздел5);
			ВывестиРазделВСправку(ТабДокумент, ВременныйТабДокумент, ВыведеноИтогов = ВсегоИтогов, ОбластьМакетаНалоговыйАгент, ОбластьМакетаПримечание, ОбластьМакетаШапкаВторойСтраницы);
			
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьМакетаНалоговыйАгент);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // Печать2015()

Функция ПечатьСправок2НДФЛ(Ссылка, СтруктураДанныхНА, ТаблицаДанныхСотрудников, ТаблицаДанныхОДоходах, ТаблицаДанныхОВычетах, ТаблицаИтоговыхДанных) Экспорт

	ГодПереходаНаОКТМО = Год(ПроведениеРасчетов.ДатаПереходаНаКодыОКТМО());
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();

	РеквизитыДокумента = Ссылка.Метаданные().Реквизиты;
	
	ДанныеДокумента = Новый Структура("СпециальныйДокумент2011года, СпециальныйДокумент2013года", Ложь, Ложь);
	Если РеквизитыДокумента.Найти("СпециальныйДокумент2013года") <> Неопределено Тогда
		ДанныеДокумента = ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(Ссылка, "СпециальныйДокумент2011года, СпециальныйДокумент2013года");
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьОбщиеДанныеСправки(СтруктураДанныхНА, Отказ, ОбработкаКомментариев, СтруктураДанныхНА.НалоговыйПериод + ?(ДанныеДокумента.СпециальныйДокумент2013года, 0, 1) >= ГодПереходаНаОКТМО, СтруктураДанныхНА.НалоговыйПериод < 2015);
	
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющиеЛичность = Новый Соответствие;
	СоответствиеКодовРегионов = Новый Соответствие;
	СоответствиеКодовДоходов = Новый Соответствие;
	СоответствиеСтавокДоходов = Новый Соответствие;
	СоответствиеКодовВычетов = Новый Соответствие;
	ПрочитатьКлассификаторыВСоответствия(СтруктураДанныхНА.НалоговыйПериод, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеКодовДоходов, СоответствиеКодовВычетов, СоответствиеСтавокДоходов);
	
	Если СтруктураДанныхНА.НалоговыйПериод = 2010 Или (СтруктураДанныхНА.НалоговыйПериод = 2011 И ДанныеДокумента.СпециальныйДокумент2011года) Тогда
		ТабДокумент = Печать2010(Отказ, СтруктураДанныхНА, ТаблицаДанныхСотрудников, ТаблицаДанныхОДоходах, ТаблицаДанныхОВычетах, ТаблицаИтоговыхДанных, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеКодовДоходов, СоответствиеКодовВычетов)
	ИначеЕсли СтруктураДанныхНА.НалоговыйПериод + ?(ДанныеДокумента.СпециальныйДокумент2013года, 0, 1) < ГодПереходаНаОКТМО Тогда
		ТабДокумент = ПечатьС2011года(Отказ, СтруктураДанныхНА.НалоговыйПериод, "Форма2НДФЛс2011", СтруктураДанныхНА, ТаблицаДанныхСотрудников, ТаблицаДанныхОДоходах, ТаблицаДанныхОВычетах, ТаблицаИтоговыхДанных, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеКодовДоходов, СоответствиеКодовВычетов, СоответствиеСтавокДоходов)
	ИначеЕсли СтруктураДанныхНА.НалоговыйПериод < 2015 Тогда
		ТабДокумент = ПечатьС2011года(Отказ, СтруктураДанныхНА.НалоговыйПериод, "Форма2НДФЛс2014", СтруктураДанныхНА, ТаблицаДанныхСотрудников, ТаблицаДанныхОДоходах, ТаблицаДанныхОВычетах, ТаблицаИтоговыхДанных, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеКодовДоходов, СоответствиеКодовВычетов, СоответствиеСтавокДоходов)
	Иначе
		НомерКорректировки = 0;
		Если РеквизитыДокумента.Найти("НомерКорректировки") <> Неопределено Тогда
			НомерКорректировки = ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(Ссылка,"НомерКорректировки")
		КонецЕсли;
		ТабДокумент = ПечатьС2015года(Отказ, СтруктураДанныхНА.НалоговыйПериод, НомерКорректировки, "Форма2НДФЛс2015", СтруктураДанныхНА, ТаблицаДанныхСотрудников, ТаблицаДанныхОДоходах, ТаблицаДанныхОВычетах, ТаблицаИтоговыхДанных, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеКодовДоходов, СоответствиеКодовВычетов, СоответствиеСтавокДоходов)
	КонецЕсли;
	
	Если Отказ Тогда
		
		ОбработкаКомментариев.ПоказатьСообщения();
		
		Возврат Неопределено	
		
	КонецЕсли;
	
	Если ОбработкаКомментариев.Сообщения.Строки.Количество() > 0 Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьСправки()

////////////////////////////////////////////////////////////////////////////////

Функция РедактируемоеТабличоеПолеДоходов(Панель, ЭлементыФормы) Экспорт 
	
	ТекущаяСтраницаПанели = Панель.ТекущаяСтраница;
	Если ТекущаяСтраницаПанели = Панель.Страницы.Ставка13 Тогда
		Возврат ЭлементыФормы.СведенияОДоходах13
	ИначеЕсли ТекущаяСтраницаПанели = Панель.Страницы.Ставка15 Тогда
		Возврат ЭлементыФормы.СведенияОДоходах15
	ИначеЕсли ТекущаяСтраницаПанели = Панель.Страницы.Ставка30 Тогда
		Возврат ЭлементыФормы.СведенияОДоходах30
	ИначеЕсли ТекущаяСтраницаПанели = Панель.Страницы.Ставка35 Тогда
		Возврат ЭлементыФормы.СведенияОДоходах35
	ИначеЕсли ТекущаяСтраницаПанели = Панель.Страницы.Ставка9 Тогда
		Возврат ЭлементыФормы.СведенияОДоходах9
	Иначе
		Возврат	Неопределено
	КонецЕсли;
	
КонецФункции 

Функция СтавкаТекущейСтраницыСправки(Панель) Экспорт 

	ТекущаяСтраницаПанели = Панель.ТекущаяСтраница;
	Если ТекущаяСтраницаПанели = Панель.Страницы.Ставка13 Тогда
		Возврат Перечисления.НДФЛСтавки.Ставка13
	ИначеЕсли ТекущаяСтраницаПанели = Панель.Страницы.Ставка30 Тогда
		Возврат Перечисления.НДФЛСтавки.Ставка30
	ИначеЕсли ТекущаяСтраницаПанели = Панель.Страницы.Ставка35 Тогда
		Возврат Перечисления.НДФЛСтавки.Ставка35
	ИначеЕсли ТекущаяСтраницаПанели = Панель.Страницы.Ставка15 Тогда
		Возврат Перечисления.НДФЛСтавки.Ставка15
	ИначеЕсли ТекущаяСтраницаПанели = Панель.Страницы.Ставка9 Тогда
		Возврат Перечисления.НДФЛСтавки.Ставка09
	Иначе
		Возврат	Неопределено
	КонецЕсли;

КонецФункции 

Функция ИмяСтраницыДляПоказаСтавки(Ставка) Экспорт

	Если Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
		Возврат "Ставка13"
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка09 Тогда
		Возврат "Ставка9"
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка15 Тогда
		Возврат "Ставка15"
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка30 Тогда
		Возврат "Ставка30"
	ИначеЕсли Ставка = Перечисления.НДФЛСтавки.Ставка35 Тогда
		Возврат "Ставка35"
	Иначе
		Возврат	""
	КонецЕсли;
	
КонецФункции 

#КонецЕсли

