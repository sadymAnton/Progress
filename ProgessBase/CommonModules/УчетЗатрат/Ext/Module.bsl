
///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ ПРОВЕДЕНИЯ

// Формирует движения по распределению затрат по количеству.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура, 
//               подготовленная в документе РасчетСебестоимостиВыпуска
//  
// Изменяемые параметры:
//  Отказ - устанавливается в Истина, если при распределении выявлена критичная ошибка
//
Процедура РаспределитьЗатраты(СтруктураШапкиДокумента, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРаспределениеЗатрат(СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ ЗАТРАТ

// Выполняет распределение затрат по установленным правилам распределения.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура, 
//               подготовленная в документе РасчетСебестоимостиВыпуска
//
// Изменяемые параметры:
//  Отказ - устанавливается в Истина, если при распределении выявлена критичная ошибка
//
Процедура ВыполнитьРаспределениеЗатрат(СтруктураШапкиДокумента, Отказ)
	
	// Для отладки будем вести протокол
	ОтладочныйРежим = СтруктураШапкиДокумента.Свойство("ОтладочныйРежим")
	                  И СтруктураШапкиДокумента.ОтладочныйРежим;
	Протокол = Новый Массив; 
	
	УчетнаяПолитика         = СтруктураШапкиДокумента.УчетнаяПолитика;
	НастройкаЗакрытияМесяца = СтруктураШапкиДокумента.НастройкаЗакрытияМесяца;
	
	ПараметрыЗапросов = Новый Структура;
	Для Каждого ЭлементУчетнойПолитики Из УчетнаяПолитика Цикл
		ПараметрыЗапросов.Вставить(ЭлементУчетнойПолитики.Ключ, ЭлементУчетнойПолитики.Значение);
	КонецЦикла;
	ПараметрыЗапросов.Вставить("ДатаНачала",    СтруктураШапкиДокумента.мНачДата);
	ПараметрыЗапросов.Вставить("ДатаОкончания", СтруктураШапкиДокумента.мКонДата);
	ПараметрыЗапросов.Вставить("СчетаЕНВД",     СчетаЕНВД());
	
	// Получим информацию о правилах распределения затрат.
	ПравилаРаспределенияЗатрат = ИнициализироватьПравилаРаспределения();
	
	СоздатьПравилоУчитыватьЗатратыНаОбобщенныхСтатьях(ПравилаРаспределенияЗатрат, УчетнаяПолитика);
	
	СоздатьПравилоПереносНаОблагаемыеЕНВД(ПравилаРаспределенияЗатрат, УчетнаяПолитика);
	
	СоздатьПравилоПереносНаПрямыеРасходы(ПравилаРаспределенияЗатрат, УчетнаяПолитика);
	
	СоздатьПравилаРаспределенияЗатратПоНастройке(ПравилаРаспределенияЗатрат, НастройкаЗакрытияМесяца);
	
	СоздатьПравилоДиректКостинг(ПравилаРаспределенияЗатрат, УчетнаяПолитика);
	СоздатьПравилоБракВПроизводстве(ПравилаРаспределенияЗатрат);
	СоздатьПравилоРасходыНаПродажу(ПравилаРаспределенияЗатрат);
	
	// Правило для списания расходов 44, которые не удалось распределить
	// Исключение - транспортные расходы (их оставляем как есть)
	СоздатьПравилоСписатьНераспределенныеРасходыНаПродажу(ПравилаРаспределенияЗатрат);
	
	// Правило для списания ОХР, которые не удалось распределить по выручке при использовании метода "Директ-костинг"
	СоздатьПравилоДиректКостингСписатьНераспределенныеОХР(ПравилаРаспределенияЗатрат, УчетнаяПолитика);
	
	Если ПравилаРаспределенияЗатрат.Количество() = 0 Тогда
		//Отсутствие правил не является препятствием к проведению документа
		Возврат;
	КонецЕсли; 
	
	// Получим базу распределения затрат для каждого правила распределения
	Для Каждого ПравилоРаспределения Из ПравилаРаспределенияЗатрат Цикл
		
		// В СКД способа распределения может возникнуть необходимость отбора по самому "способу-владельцу" СКД в том случае,
		// если в ИБ хранятся уникальные наборы коэффициентов, связанные с этим способом распределения.
		// Например, коэффициенты способа распределения с типом базы "Табличный".
		// Для отбора по способу распределения в СКД следут использовать параметр &СпособРаспределения.
		ПараметрыЗапросов.Вставить("СпособРаспределения", ПравилоРаспределения.СпособРаспределения);
		
		ПравилоРаспределения.ДанныеБазыРаспределения = ПолучитьДанныеПоСхемеКомпоновки(
			ПравилоРаспределения.СхемаКомпоновкиДанныхБазы,
			ПравилоРаспределения.НастройкиБазы,
			ПараметрыЗапросов);
		
	КонецЦикла;
	
	// Сформируем вспомогательную структуру, содержащую информацию о всех аналитиках учета затрат.
	// Ключ структуры - имя аналитики, значение - описание допустимых типов этой аналитики.
	СтруктураРазрезовАналитики = Новый Структура;
	СтруктураРазрезовАналитики.Вставить("АналитикаВидаУчета",           Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиВидаУчета"));
	СтруктураРазрезовАналитики.Вставить("АналитикаУчетаЗатрат",			Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	СтруктураРазрезовАналитики.Вставить("АналитикаРаспределенияЗатрат",	Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиРаспределенияЗатрат"));
	СтруктураРазрезовАналитики.Вставить("АналитикаУчетаПартий",         Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПартий"));
	
	// Одни и те же затраты можно распределить только по одному правилу.
	// Поэтому 
	//  - будем записывать, какие затраты уже распределили
	//  - не будем распределять затраты повторно, больше одного раза
	РаспределенныеЗатраты = Новый ТаблицаЗначений; // коллекция колонок таблицы соответствует СтруктураРазрезовАналитики
	Для Каждого Аналитика Из СтруктураРазрезовАналитики Цикл
		РаспределенныеЗатраты.Колонки.Добавить(Аналитика.Ключ, Аналитика.Значение);
	КонецЦикла;
	
	РаспределенныеЗатраты.Индексы.Добавить("АналитикаВидаУчета, АналитикаУчетаЗатрат, АналитикаРаспределенияЗатрат, АналитикаУчетаПартий");
	
	ПорядокПравила 		 = 1;
	СформированоЗаписей  = -1; // в счетчик запишем ненулевое значение для первого выполнения итерации
	КоличествоИтераций   = 0;
	
	Регистр = РегистрыНакопления.УчетЗатратРегл;
	// Создадим набор записей в котором будет отражено распределение
	НаборЗаписейУчетЗатрат = Регистр.СоздатьНаборЗаписей();
	НаборЗаписейУчетЗатрат.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	СхемаКомпоновкиДанныхИсточника = Регистр.ПолучитьМакет("ОписаниеРаспределяемыхЗатрат"); 
	
	// Выполняем распределение до тех пор, пока в очередной итерации не будет сформировано ни одной записи распределения.
	Пока СформированоЗаписей <> 0 Цикл
		
		КоличествоИтераций = КоличествоИтераций + 1;
		СформированоЗаписей  = 0;
		
		ЗаписатьВПротокол("Итерация " + КоличествоИтераций, Протокол);
		
		Для Каждого ПравилоРаспределения Из ПравилаРаспределенияЗатрат Цикл
			
			ЗаписатьВПротокол(" Правило " + ПравилоРаспределения.Наименование, Протокол);
			// Получим базу распределения
			ДанныеБазыРаспределения = ПравилоРаспределения.ДанныеБазыРаспределения;
			
			Если ДанныеБазыРаспределения.Количество() = 0 Тогда
				ЗаписатьВПротокол("  Нет базы распределения", Протокол);
				Продолжить;
			КонецЕсли;
			
			ТаблицаУчетаЗатрат = НаборЗаписейУчетЗатрат.ВыгрузитьКолонки();
			
			ДанныеИсточника = ПолучитьДанныеПоСхемеКомпоновки(
				СхемаКомпоновкиДанныхИсточника,
				ПравилоРаспределения.НастройкиИсточника,
				ПараметрыЗапросов,
				ПравилоРаспределения.ЗначенияОтбораИсточника,
				ПравилоРаспределения.ВидыОтбораИсточника);
			
			Если ДанныеИсточника.Количество() = 0 Тогда
				ЗаписатьВПротокол("  Нет данных источника", Протокол);
				Продолжить;
			КонецЕсли;
			
			// Определим в разрезе какой аналитики нужно выполнить распределение
			РазрезыРаспределения = ПолучитьРазрезыРаспределения(
				ПравилоРаспределения.РазрезыАналитикиИсточника,
				ДанныеБазыРаспределения.Колонки,
				ПравилоРаспределения.СпособОпределенияАналитикиПолучателя);
			
			АналитикаИсточникаЗатрат = КлючиАналитики();
			
			Для Каждого СтрокаДанныеИсточника Из ДанныеИсточника Цикл
				
				ЗаполнитьЗначенияСвойств(АналитикаИсточникаЗатрат, СтрокаДанныеИсточника);
				
				// Для того, чтобы проверить, не были ли эти затраты распределены ранее,
				// подготовим структуру ключей поиска по таблице
				СтруктураКлючейПоиска = Новый Структура;
				Для Каждого Аналитика Из СтруктураРазрезовАналитики Цикл
					ЗначениеКлюча = АналитикаИсточникаЗатрат[Аналитика.Ключ];
					// Приведем значение к нужному типу
					ТипизированноеЗначениеКлюча = Аналитика.Значение.ПривестиЗначение(ЗначениеКлюча);
					// Добавим в структуру поиска
					СтруктураКлючейПоиска.Вставить(Аналитика.Ключ, ТипизированноеЗначениеКлюча);
				КонецЦикла;
				
				Если РаспределенныеЗатраты.НайтиСтроки(СтруктураКлючейПоиска).Количество() > 0 Тогда
					// На предыдущих итерациях уже распределяли эти затраты.
					// Второй раз распределять их не надо.
					Продолжить;
				КонецЕсли;
				
				// Для подготовки протокола
				МассивКлючей = Новый Массив;
				Для Каждого Аналитика Из СтруктураКлючейПоиска Цикл
					МассивКлючей.Добавить(СтруктураКлючейПоиска[Аналитика.Ключ]);
				КонецЦикла;
				ЗаписатьВПротокол("  Распределяем " + СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивКлючей), Протокол, ОтладочныйРежим);
				
				// Определим базу распределения
				Если РазрезыРаспределения.Количество() = 0 Тогда
					
					// Распределяем на всю базу.
					БазаДляРаспределения = ДанныеБазыРаспределения;
					
				Иначе
					
					// Распределяем только на часть базы, "подходящую" для источника.
					ОтборДляРаспределения = Новый Структура;
					Для Каждого ТекущийРазрезРаспределения Из РазрезыРаспределения Цикл
						ОтборДляРаспределения.Вставить(ТекущийРазрезРаспределения.Значение, СтрокаДанныеИсточника[ТекущийРазрезРаспределения.Ключ]); 
					КонецЦикла;
					
					БазаДляРаспределения = ДанныеБазыРаспределения.НайтиСтроки(ОтборДляРаспределения);
					
				КонецЕсли;
				
				Если БазаДляРаспределения.Количество() = 0 Тогда
					ЗаписатьВПротокол("  Распределять некуда", Протокол, ОтладочныйРежим);
					Продолжить;
				КонецЕсли; 
				
				КоличествоРаспределено = 0;
				
				Для Каждого СтрокаБазы Из БазаДляРаспределения Цикл
					
					Если СтрокаБазы.База = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// Заполним аналитику получателя (кор. аналитику)
					АналитикаПолучателя = ПолучитьАналитикуПолучателя(СтрокаБазы, СтрокаДанныеИсточника, ПравилоРаспределения, СтруктураШапкиДокумента);
					
					КлючиКорАналитики = Новый Структура("АналитикаВидаУчета, АналитикаУчетаЗатрат, АналитикаРаспределенияЗатрат, АналитикаУчетаПартий");
					ЗаполнитьЗначенияСвойств(КлючиКорАналитики, АналитикаПолучателя);
					
					// Проверим что не выполняется распределение "само на себя".
					// Если все ключи источника и получателся совпадают, то такое распределение не записываем в регистры.
					АналитикиСовпадают = Истина;
					
					Для Каждого Аналитика Из СтруктураРазрезовАналитики Цикл
						
						ЗначениеАналитики 	 = Аналитика.Значение.ПривестиЗначение(АналитикаИсточникаЗатрат[Аналитика.Ключ]);
						ЗначениеКорАналитики = Аналитика.Значение.ПривестиЗначение(КлючиКорАналитики[Аналитика.Ключ]);
						
						Если ЗначениеАналитики <> ЗначениеКорАналитики Тогда
							АналитикиСовпадают = Ложь;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если АналитикиСовпадают Тогда
						ЗаписатьВПротокол("  Попытка распределить ""само-на-себя""", Протокол, ОтладочныйРежим);
						Продолжить;
					КонецЕсли;
					
					//Спишем затраты из источника
					НоваяЗапись = ТаблицаУчетаЗатрат.Добавить();
					НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
					
					ЗаполнитьЗначенияСвойств(НоваяЗапись, АналитикаИсточникаЗатрат);
					
					Для Каждого КлючКорАналитики Из КлючиКорАналитики Цикл
						НоваяЗапись["Кор" + КлючКорАналитики.Ключ] = КлючКорАналитики.Значение;
					КонецЦикла;
					
					НоваяЗапись.КодОперации = ?(ЗначениеЗаполнено(ПравилоРаспределения.КодОперации),
													ПравилоРаспределения.КодОперации,
													КодОперацииРаспределениеЗатратПоАналитике(НоваяЗапись.КорАналитикаВидаУчета));
					
					НоваяЗапись.Количество   = СтрокаБазы.База;
					Если НЕ СтруктураШапкиДокумента.ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
						НоваяЗапись.КоличествоНУ = СтрокаБазы.База;
					КонецЕсли;
					
					КоличествоРаспределено = КоличествоРаспределено + НоваяЗапись.Количество;
					СформированоЗаписей    = СформированоЗаписей + 1;
					
				КонецЦикла; // по базе
				
				КоличествоКорректировки = КоличествоРаспределено - СтрокаДанныеИсточника.Количество;
				
				Если КоличествоРаспределено <> 0 Тогда
					
					// Запомним, что эти затраты распределили
					СтрокаРаспределенныхЗатрат = РаспределенныеЗатраты.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРаспределенныхЗатрат, СтруктураКлючейПоиска);
				
					Если КоличествоКорректировки <> 0 Тогда
						
						// Скорректируем остаток по аналитике источника в ноль
						НоваяЗапись = ТаблицаУчетаЗатрат.Добавить();
						НоваяЗапись.ВидДвижения   = ВидДвиженияНакопления.Приход;
						НоваяЗапись.КодОперации   = Перечисления.КодыОперацийЗатраты.РасчетБазыРаспределения;
						ЗаполнитьЗначенияСвойств(НоваяЗапись, АналитикаИсточникаЗатрат);
						
						НоваяЗапись.Количество = КоличествоКорректировки;
						Если НЕ СтруктураШапкиДокумента.ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
							НоваяЗапись.КоличествоНУ = КоличествоКорректировки;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьВПротокол("  Сумма коэффициентов: " + КоличествоКорректировки, Протокол, ОтладочныйРежим);
				
			КонецЦикла; // по источнику
			
			Если ТаблицаУчетаЗатрат.Количество() > 0 Тогда
				
				ТаблицаУчетаЗатрат.ЗаполнитьЗначения(СтруктураШапкиДокумента.Период,   "Период");
				ТаблицаУчетаЗатрат.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,   "Регистратор");
				ТаблицаУчетаЗатрат.ЗаполнитьЗначения(Истина,                           "Активность");
				
				НаборЗаписейУчетЗатрат.Загрузить(ТаблицаУчетаЗатрат);
				НаборЗаписейУчетЗатрат.Записать(Ложь);
				
				ЗаписатьВПротокол("  Сформировано записей в ходе итерации: " + СформированоЗаписей, Протокол);
			
			КонецЕсли;
			
		КонецЦикла; // по правилу
		
	КонецЦикла; // по итерации

	УчестьОценкуНезавершенногоПроизводства(
		СтруктураШапкиДокумента.Период, 
		СтруктураШапкиДокумента.Организация, 
		СтруктураШапкиДокумента.Ссылка, 
		Регистр);
		
	УчестьТранспортныеРасходыОтносящиесяКОстаткуНереализованныхТоваров(
		СтруктураШапкиДокумента,
		Регистр);
		
	УчестьНормированиеРасходовНУ(
		СтруктураШапкиДокумента, 
		Регистр);
	
КонецПроцедуры

// Корректирует движения, сформированные при распределении затрат - 
// должны быть распределены не все затраты, часть затрат должна остаться в НЗП
//
Процедура УчестьОценкуНезавершенногоПроизводства(Период, Организация, Регистратор, Регистр)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получим данные документов "Оценка незавершенного производства"
	// Создаем временную таблицу ОценкаНезавершенногоПроизводства
	Документы.ОценкаНезавершенногоПроизводства.ПоместитьДанныеДляРеглУчетаВоВременнуюТаблицу(
		МенеджерВременныхТаблиц, 
		Организация, 
		Период);
	
	// Убедимся, что вообще что-то нужно оставлять в НЗП
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1 
	|	ОценкаНезавершенногоПроизводства.ДоляЗатрат
	|ИЗ
	|	ОценкаНезавершенногоПроизводства КАК ОценкаНезавершенногоПроизводства"
	);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Ничего не надо оставлять в НЗП
		Возврат;
	КонецЕсли;
	
	// Найдем движения по распределению затрат оттуда, где нужно что-то оставить в НЗП.
	// Оставить в НЗП нужно производственные расходы по тем подразделениям и НГ, что указаны в ОценкаНезавершенногоПроизводства.
	//
	// Сразу одним запросом мы не можем выбрать только нужные затраты - выберем их с избытком:
	//  - по тем подразделениям, где следует оставить НЗП (для этого нужен первый запрос пакета)
	//  - но по всем НГ
	// Позднее отсечем лишнее.
	//
	// Важно: нужно исключить из выборки распределение затрат между состояними,
	// в которых нужно что-то оставить в НЗП.
	// Т.е. выборка должна содержать только распределение затрат "наружу".
	// Для этого нужен третий запрос пакета.
	//
	// При подготовке таблицы ЗатратыУчаствовалиВРаспределении используем ЛЕВОЕ СОЕДИНЕНИЕ,
	// так как затраты могут быть распределены ИЗ контура учета затрат, а в этом случае
	// ключи кор. аналитики имеют "нестандартные" типы.
	// 
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОценкаНезавершенногоПроизводства.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ПодразделенияНЗП
	|ИЗ
	|	ОценкаНезавершенногоПроизводства КАК ОценкаНезавершенногоПроизводства
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетЗатратРегл.АналитикаВидаУчета,
	|	УчетЗатратРегл.АналитикаУчетаЗатрат,
	|	УчетЗатратРегл.АналитикаУчетаПартий,
	|	УчетЗатратРегл.АналитикаРаспределенияЗатрат,
	|	СУММА(УчетЗатратРегл.Количество) КАК Количество,
	|	СУММА(УчетЗатратРегл.КоличествоНУ) КАК КоличествоНУ,
	|	РасшифровкаВидаУчета.ПодразделениеОрганизации КАК Подразделение,
	|	РасшифровкаРаспределенияЗатрат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	УчетЗатратРегл.КорАналитикаВидаУчета,
	|	УчетЗатратРегл.КорАналитикаУчетаЗатрат,
	|	УчетЗатратРегл.КорАналитикаУчетаПартий,
	|	УчетЗатратРегл.КорАналитикаРаспределенияЗатрат,
	|	КорРасшифровкаВидаУчета.ПодразделениеОрганизации КАК КорПодразделение,
	|	КорРасшифровкаРаспределенияЗатрат.НоменклатурнаяГруппа КАК КорНоменклатурнаяГруппа
	|ПОМЕСТИТЬ ЗатратыУчаствовалиВРаспределении
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл КАК УчетЗатратРегл
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК РасшифровкаВидаУчета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодразделенияНЗП КАК ПодразделенияНЗП
	|			ПО (РасшифровкаВидаУчета.ПодразделениеОрганизации = ПодразделенияНЗП.Подразделение
	|					ИЛИ РасшифровкаВидаУчета.Подразделение = ПодразделенияНЗП.Подразделение)
	|		ПО УчетЗатратРегл.АналитикаВидаУчета = РасшифровкаВидаУчета.Ссылка
	|			И (РасшифровкаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты))
	|			И (РасшифровкаВидаУчета.Организация = &Организация)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаРаспределенияЗатрат КАК РасшифровкаРаспределенияЗатрат
	|		ПО УчетЗатратРегл.АналитикаРаспределенияЗатрат = РасшифровкаРаспределенияЗатрат.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РасшифровкаУчетаЗатрат
	|		ПО УчетЗатратРегл.АналитикаУчетаЗатрат = РасшифровкаУчетаЗатрат.Ссылка
	|			И (РасшифровкаУчетаЗатрат.ХарактерЗатрат = ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ПроизводственныеРасходы))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК КорРасшифровкаВидаУчета
	|		ПО УчетЗатратРегл.КорАналитикаВидаУчета = КорРасшифровкаВидаУчета.Ссылка
	|			И (КорРасшифровкаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаРаспределенияЗатрат КАК КорРасшифровкаРаспределенияЗатрат
	|		ПО УчетЗатратРегл.КорАналитикаРаспределенияЗатрат = КорРасшифровкаРаспределенияЗатрат.Ссылка
	|ГДЕ
	|	УчетЗатратРегл.КодОперации В(&КодыОпераций)
	|	И УчетЗатратРегл.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И УчетЗатратРегл.Активность
	|	И УчетЗатратРегл.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Месяц, МЕСЯЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетЗатратРегл.АналитикаУчетаЗатрат,
	|	УчетЗатратРегл.АналитикаВидаУчета,
	|	РасшифровкаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	РасшифровкаВидаУчета.ПодразделениеОрганизации,
	|	УчетЗатратРегл.АналитикаРаспределенияЗатрат,
	|	УчетЗатратРегл.АналитикаУчетаПартий,
	|	УчетЗатратРегл.КорАналитикаВидаУчета,
	|	УчетЗатратРегл.КорАналитикаУчетаЗатрат,
	|	УчетЗатратРегл.КорАналитикаУчетаПартий,
	|	УчетЗатратРегл.КорАналитикаРаспределенияЗатрат,
	|	КорРасшифровкаВидаУчета.ПодразделениеОрганизации,
	|	КорРасшифровкаРаспределенияЗатрат.НоменклатурнаяГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КорПодразделение,
	|	КорНоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗатратыУчаствовалиВРаспределении.Подразделение КАК Подразделение,
	|	ЗатратыУчаствовалиВРаспределении.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ЗатратыУчаствовалиВРаспределении.АналитикаВидаУчета,
	|	ЗатратыУчаствовалиВРаспределении.АналитикаУчетаЗатрат,
	|	ЗатратыУчаствовалиВРаспределении.АналитикаУчетаПартий,
	|	ЗатратыУчаствовалиВРаспределении.АналитикаРаспределенияЗатрат,
	|	ЗатратыУчаствовалиВРаспределении.КорАналитикаВидаУчета,
	|	ЗатратыУчаствовалиВРаспределении.КорАналитикаУчетаЗатрат,
	|	ЗатратыУчаствовалиВРаспределении.КорАналитикаУчетаПартий,
	|	ЗатратыУчаствовалиВРаспределении.КорАналитикаРаспределенияЗатрат,
	|	ЗатратыУчаствовалиВРаспределении.Количество,
	|	ЗатратыУчаствовалиВРаспределении.КоличествоНУ
	|ПОМЕСТИТЬ РаспределенныеЗатраты
	|ИЗ
	|	ЗатратыУчаствовалиВРаспределении КАК ЗатратыУчаствовалиВРаспределении
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОценкаНезавершенногоПроизводства КАК ОценкаНезавершенногоПроизводства
	|		ПО (ОценкаНезавершенногоПроизводства.Подразделение = ЗатратыУчаствовалиВРаспределении.КорПодразделение)
	|			И (ОценкаНезавершенногоПроизводства.НоменклатурнаяГруппа = ЗатратыУчаствовалиВРаспределении.КорНоменклатурнаяГруппа)
	|ГДЕ
	|	ОценкаНезавершенногоПроизводства.Подразделение ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределенныеЗатраты.АналитикаВидаУчета,
	|	РаспределенныеЗатраты.АналитикаУчетаЗатрат,
	|	РаспределенныеЗатраты.АналитикаУчетаПартий,
	|	РаспределенныеЗатраты.АналитикаРаспределенияЗатрат,
	|	РаспределенныеЗатраты.КорАналитикаВидаУчета,
	|	РаспределенныеЗатраты.КорАналитикаУчетаЗатрат,
	|	РаспределенныеЗатраты.КорАналитикаУчетаПартий,
	|	РаспределенныеЗатраты.КорАналитикаРаспределенияЗатрат,
	|	- РаспределенныеЗатраты.Количество * ОценкаНезавершенногоПроизводства.ДоляЗатрат / 100 КАК Количество,
	|	- РаспределенныеЗатраты.Количество * ОценкаНезавершенногоПроизводства.ДоляЗатрат / 100 КАК КоличествоНУ
	|	
	|ПОМЕСТИТЬ ТаблицаДвиженийКорректирующихРаспределение
	|ИЗ
	|	ОценкаНезавершенногоПроизводства КАК ОценкаНезавершенногоПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспределенныеЗатраты КАК РаспределенныеЗатраты
	|		ПО ОценкаНезавершенногоПроизводства.Подразделение = РаспределенныеЗатраты.Подразделение
	|			И ОценкаНезавершенногоПроизводства.НоменклатурнаяГруппа = РаспределенныеЗатраты.НоменклатурнаяГруппа
	|ГДЕ
	|	РаспределенныеЗатраты.Количество <> 0 И ОценкаНезавершенногоПроизводства.ДоляЗатрат <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОценкаНезавершенногоПроизводства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПодразделенияНЗП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗатратыУчаствовалиВРаспределении
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РаспределенныеЗатраты");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КодыОпераций", КодыОперацийРаспределенияЗатрат());
	Запрос.УстановитьПараметр("Месяц",        Период);
	
	Запрос.Выполнить();
	
	// Теперь сформируем движения, которые 
	// - либо приведут к положительному остатку затрат (если в НЗП нужно оставить не все затраты, т.е. распределить только часть затрат)
	// - либо устранят последствия распределения (если в НЗП нужно оставить все затраты - т.е. ничего не распределять)
	СформироватьДвиженияКорректирующиеРаспределение(
		МенеджерВременныхТаблиц,
		Регистратор,
		Период,
		Регистр);
	
КонецПроцедуры

// Корректирует движения, сформированные при распределении затрат -
// транспорнтые расходы, относящиеся к остатку нереализованных товаров должны остаться в затратах
//
Процедура УчестьТранспортныеРасходыОтносящиесяКОстаткуНереализованныхТоваров(СтруктураШапкиДокумента, Регистр)
	
	КоэффициентСписанияТранспортныхРасходов = ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьКоэффициентСписанияТранспортныхРасходов(СтруктураШапкиДокумента);
	
	Если КоэффициентСписанияТранспортныхРасходов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// В соответствии с долей расходов, относящейся к остатку нереализованных товаров,
	// cформируем таблицу движений, корректирующих распределение.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АналитикаВидаУчета.Ссылка
	|	
	|ПОМЕСТИТЬ ОтборАналитикаВидаУчета
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|ГДЕ
	|	АналитикаВидаУчета.Организация = &Организация
	|	И АналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты)
	|;
	|
	|/////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаУчетаЗатрат.Ссылка
	|	
	|ПОМЕСТИТЬ ОтборАналитикаУчетаЗатрат
	|ИЗ
	|	РегистрСведений.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат
	|ГДЕ
	|	АналитикаУчетаЗатрат.СтатьяЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)
	|	И (АналитикаУчетаЗатрат.ХарактерЗатрат = ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.КоммерческиеРасходы)
	|		ИЛИ АналитикаУчетаЗатрат.ХарактерЗатрат = ЗНАЧЕНИЕ(Перечисление.ХарактерЗатрат.ИздержкиОбращения))
	|;
	|
	|/////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетЗатратРегл.АналитикаВидаУчета,
	|	УчетЗатратРегл.АналитикаУчетаЗатрат,
	|	УчетЗатратРегл.АналитикаУчетаПартий,
	|	УчетЗатратРегл.АналитикаРаспределенияЗатрат,
	|	УчетЗатратРегл.КорАналитикаВидаУчета,
	|	УчетЗатратРегл.КорАналитикаУчетаЗатрат,
	|	УчетЗатратРегл.КорАналитикаУчетаПартий,
	|	УчетЗатратРегл.КорАналитикаРаспределенияЗатрат,
	|	- (УчетЗатратРегл.Количество * &КоэффициентСписанияТранспортныхРасходов) КАК Количество,
	|	- (УчетЗатратРегл.КоличествоНУ * &КоэффициентСписанияТранспортныхРасходов) КАК КоличествоНУ
	|	
	|ПОМЕСТИТЬ ТаблицаДвиженийКорректирующихРаспределение
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл КАК УчетЗатратРегл
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		ОтборАналитикаВидаУчета КАК ОтборАналитикаВидаУчета
	|	ПО
	|		УчетЗатратРегл.АналитикаВидаУчета = ОтборАналитикаВидаУчета.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		ОтборАналитикаУчетаЗатрат КАК ОтборАналитикаУчетаЗатрат
	|	ПО
	|		УчетЗатратРегл.АналитикаУчетаЗатрат = ОтборАналитикаУчетаЗатрат.Ссылка
	|	
	|ГДЕ
	|	УчетЗатратРегл.КодОперации В(&КодыОпераций)
	|	И УчетЗатратРегл.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И УчетЗатратРегл.Активность
	|	И УчетЗатратРегл.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Месяц, МЕСЯЦ)
	|;
	|
	|/////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборАналитикаВидаУчета
	|;
	|
	|/////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборАналитикаУчетаЗатрат");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", 									СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Месяц", 											СтруктураШапкиДокумента.Период);
	Запрос.УстановитьПараметр("КодыОпераций", 									КодыОперацийРаспределенияЗатрат());
	Запрос.УстановитьПараметр("КоэффициентСписанияТранспортныхРасходов", 		КоэффициентСписанияТранспортныхРасходов);
	
	Запрос.Выполнить();
	
	СформироватьДвиженияКорректирующиеРаспределение(
		МенеджерВременныхТаблиц, 
		СтруктураШапкиДокумента.Ссылка, 
		СтруктураШапкиДокумента.Период, 
		Регистр);
	
КонецПроцедуры

// Корректирует движения, сформированные при распределении затрат - нормируемые в НУ расходы распределяться не должны
// Списание нормируемых расходов в НУ выполняется документом РегламентныеОперацииНалоговогоУчетаПоНалогуНаПрибыль
//
Процедура УчестьНормированиеРасходовНУ(СтруктураШапкиДокумента, Регистр)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПроцедурыРасчетаСебестоимостиРасширеннаяАналитика.СформироватьВременнуюТаблицуНормируемыеВидыРасходовНУ(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АналитикаВидаУчета.Ссылка
	|	
	|ПОМЕСТИТЬ ОтборАналитикаВидаУчета
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|ГДЕ
	|	АналитикаВидаУчета.Организация = &Организация
	|	И АналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты)
	|	
	|;
	|/////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаУчетаЗатрат.Ссылка
	|	
	|ПОМЕСТИТЬ ОтборАналитикаУчетаЗатрат
	|ИЗ
	|	РегистрСведений.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		НормируемыеВидыРасходовНУ КАК НормируемыеВидыРасходовНУ
	|	ПО
	|		АналитикаУчетаЗатрат.СтатьяЗатрат.ВидРасходовНУ = НормируемыеВидыРасходовНУ.ВидРасходовНУ
	|;
	|
	|/////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетЗатратРегл.АналитикаВидаУчета,
	|	УчетЗатратРегл.АналитикаУчетаЗатрат,
	|	УчетЗатратРегл.АналитикаУчетаПартий,
	|	УчетЗатратРегл.АналитикаРаспределенияЗатрат,
	|	УчетЗатратРегл.КорАналитикаВидаУчета,
	|	УчетЗатратРегл.КорАналитикаУчетаЗатрат,
	|	УчетЗатратРегл.КорАналитикаУчетаПартий,
	|	УчетЗатратРегл.КорАналитикаРаспределенияЗатрат,
	|	0 КАК Количество,
	|	- УчетЗатратРегл.КоличествоНУ КАК КоличествоНУ
	|	
	|ПОМЕСТИТЬ ТаблицаДвиженийКорректирующихРаспределение
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл КАК УчетЗатратРегл
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		ОтборАналитикаВидаУчета КАК ОтборАналитикаВидаУчета
	|	ПО
	|		УчетЗатратРегл.АналитикаВидаУчета = ОтборАналитикаВидаУчета.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		ОтборАналитикаУчетаЗатрат КАК ОтборАналитикаУчетаЗатрат
	|	ПО
	|		УчетЗатратРегл.АналитикаУчетаЗатрат = ОтборАналитикаУчетаЗатрат.Ссылка
	|	
	|ГДЕ
	|	УчетЗатратРегл.КодОперации В(&КодыОпераций)
	|	И УчетЗатратРегл.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И УчетЗатратРегл.Активность
	|	И УчетЗатратРегл.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Месяц, МЕСЯЦ)";
	
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Месяц",        СтруктураШапкиДокумента.Период);
	Запрос.УстановитьПараметр("КодыОпераций", КодыОперацийРаспределенияЗатрат());
	
	Запрос.Выполнить();
	
	СформироватьДвиженияКорректирующиеРаспределение(
		МенеджерВременныхТаблиц, 
		СтруктураШапкиДокумента.Ссылка, 
		СтруктураШапкиДокумента.Период, 
		Регистр);
	
КонецПроцедуры

// Процедура формирует сторнирущие движения, корректирующие результат распределения затрат
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит таблицу для формирования корректирующих движений
//  Регистратор - Ссылка на документ "Расчет себестоимости"
//  Период	- Дата - период формирования корректирующих движений
//  Регистр - РегистрНакопленияМенеджер - менеджер регистра учета затрат
//
Процедура СформироватьДвиженияКорректирующиеРаспределение(МенеджерВременныхТаблиц, Регистратор, Период, Регистр)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДвиженийКорректирующихРаспределение.АналитикаВидаУчета,
	|	ТаблицаДвиженийКорректирующихРаспределение.АналитикаУчетаЗатрат,
	|	ТаблицаДвиженийКорректирующихРаспределение.АналитикаУчетаПартий,
	|	ТаблицаДвиженийКорректирующихРаспределение.АналитикаРаспределенияЗатрат,
	|	ТаблицаДвиженийКорректирующихРаспределение.КорАналитикаВидаУчета,
	|	ТаблицаДвиженийКорректирующихРаспределение.КорАналитикаУчетаЗатрат,
	|	ТаблицаДвиженийКорректирующихРаспределение.КорАналитикаУчетаПартий,
	|	ТаблицаДвиженийКорректирующихРаспределение.КорАналитикаРаспределенияЗатрат,
	|	ТаблицаДвиженийКорректирующихРаспределение.Количество,
	|	ТаблицаДвиженийКорректирующихРаспределение.КоличествоНУ
	|ИЗ
	|	ТаблицаДвиженийКорректирующихРаспределение");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НаборЗаписей = Регистр.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	
	Пока Выборка.Следующий() Цикл
		
		НоваяЗапись = НаборЗаписей.ДобавитьРасход();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка); // Аналитика расходов
		
		НоваяЗапись.Период      = Период;
		НоваяЗапись.Регистратор = Регистратор;
		НоваяЗапись.КодОперации = КодОперацииРаспределениеЗатратПоАналитике(НоваяЗапись.КорАналитикаВидаУчета);
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Ложь);

КонецПроцедуры

// ЗАПОЛНЕНИЕ ТАБЛИЦЫ ПРАВИЛ

// Создает структуру таблицы правил распределения
//
Функция ИнициализироватьПравилаРаспределения()
	
	ТаблицаПравил = Новый ТаблицаЗначений();
	
	ТаблицаПравил.Колонки.Добавить("Наименование", 							Новый ОписаниеТипов("Строка"));
	ТаблицаПравил.Колонки.Добавить("СпособРаспределения",					Новый ОписаниеТипов("СправочникСсылка.СпособыРаспределенияЗатратНаВыпуск"));
	ТаблицаПравил.Колонки.Добавить("НаправлениеРаспределения",				Новый ОписаниеТипов("ПеречислениеСсылка.НаправленияРаспределенияЗатрат"));
	
	ТаблицаПравил.Колонки.Добавить("РазрезыАналитикиИсточника", 			Новый ОписаниеТипов("Массив"));
	
	// Отборы для источника могут быть заданы
	// - пользовательской настройкой СКД
	ТаблицаПравил.Колонки.Добавить("НастройкиИсточника", 					Новый ОписаниеТипов("ПользовательскиеНастройкиКомпоновкиДанных"));
	// - в виде двух связанных соответствий
	ТаблицаПравил.Колонки.Добавить("ЗначенияОтбораИсточника",               Новый ОписаниеТипов("Соответствие"));
	ТаблицаПравил.Колонки.Добавить("ВидыОтбораИсточника",                   Новый ОписаниеТипов("Соответствие"));
	// Если отборы заданы двумя способами, то они складываются по И
	
	ТаблицаПравил.Колонки.Добавить("СхемаКомпоновкиДанныхБазы", 			Новый ОписаниеТипов("СхемаКомпоновкиДанных")); 								// СКД с запросом для базы
	ТаблицаПравил.Колонки.Добавить("НастройкиБазы", 						Новый ОписаниеТипов("ПользовательскиеНастройкиКомпоновкиДанных")); 			// Отборы и настройки для базы
	
	ТаблицаПравил.Колонки.Добавить("СпособОпределенияАналитикиПолучателя", 	Новый ОписаниеТипов("Соответствие")); 										// Правила заполнения аналитики получателя
	
	// Данные базы распределения расчитываются перед выполнением распределения затрат и хранятся вместе с правилами распределения 
	ТаблицаПравил.Колонки.Добавить("ДанныеБазыРаспределения",				Новый ОписаниеТипов("ТаблицаЗначений"));
	
	// Код операции, с которым выполняются движения (влияет на то, каким образом на основании движений будут формироваться проводки).
	// Если не задан, то по умолчанию определяется по ключу "КорАналитикаВидаУчета":
	// 	- если тип ключа "Аналитики вида учета", то код операции "СписаниеОХР_Регламент"
	// 	- если тип ключа "Аналитики учета прочих затрат", то код операции "СписаниеРасходовНаПродажу"
	ТаблицаПравил.Колонки.Добавить("КодОперации",							Новый ОписаниеТипов("ПеречислениеСсылка.КодыОперацийЗатраты"));
	
	Возврат ТаблицаПравил;
		
КонецФункции

// Добавляет в таблицу правила, созданные по настройке распределения затрат - из элемента справочника "Настройки распределения затрат"
//
// Параметры:
//  ПравилаРаспределенияЗатрат - таблица значений, созданная функцией ИнициализироватьПравилаРаспределения
//  НастройкаРаспределенияЗатрат - СправочникСсылка.НастройкиРаспределенияЗатрат
//
Процедура СоздатьПравилаРаспределенияЗатратПоНастройке(ПравилаРаспределенияЗатрат, НастройкаРаспределенияЗатрат)
	
	Если НЕ ЗначениеЗаполнено(НастройкаРаспределенияЗатрат) Тогда
		Возврат;
	КонецЕсли;
	
	Настройка = НастройкаРаспределенияЗатрат.СпособыРаспределения.Выгрузить();
	// В настройке ХарактерЗатрат всегда заполнен. Проверку этого должен обеспечивать сам справочник.
	
	// Правило содержит 
	//  Источник - правила отбора затрат
	//  Базу - способ распределения
	//  Получателя - способы определения аналитики получателя
	
	// Источник нужно будет превратить в отбор.
	// Для этого в таблице с настройками заполним служебные колонки.
	Справочники.НастройкиЗакрытияМесяца.ДобавитьКолонкиОтбораЗатрат(Настройка);
	ПоляОтбора  = Справочники.НастройкиЗакрытияМесяца.ПоляОтбора();
	
	// Создадим правила: по каждой строке - одно правило
	Для Каждого СтрокаНастройки Из Настройка Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастройки.СпособРаспределения) Тогда
			// Пустой способ означает, что расходы распределять не требуется
			Продолжить;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаНастройки.СпособРаспределения.ТипБазыРаспределения) Тогда
			// Способы с пустым типом базы ("старые способы") не сработают в новом механизме распределения
			// потому что у них нет СКД
			Продолжить;
		КонецЕсли;
		
		// Наименование
		ЗначенияПолейДляНаименования = Новый Массив;
		Для Каждого ИмяПоля Из ПоляОтбора Цикл
			ЗначениеПоля = СтрокаНастройки[ИмяПоля];
			Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
				ЗначенияПолейДляНаименования.Добавить(ЗначениеПоля);
			КонецЕсли;
		КонецЦикла;
		
		Правило = ПравилаРаспределенияЗатрат.Добавить();
		
		Правило.Наименование					= СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ЗначенияПолейДляНаименования);
		Правило.СпособРаспределения				= СтрокаНастройки.СпособРаспределения;
		Правило.НаправлениеРаспределения		= СтрокаНастройки.СпособРаспределения.НаправлениеРаспределения;
		
		// Источник
		Правило.РазрезыАналитикиИсточника       = ПолучитьАналитикуУчетаЗатратПоХарактеруЗатрат(СтрокаНастройки.ХарактерЗатрат);
		
		// Отбор задаем в виде структур.
		Правило.ВидыОтбораИсточника             = СтрокаНастройки.ВидыОтбора;
		Правило.ЗначенияОтбораИсточника         = СтрокаНастройки.ЗначенияОтбора;
		
		// База
		Правило.СхемаКомпоновкиДанныхБазы		=
			Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьСхемуКомпоновкиДанныхБазы(СтрокаНастройки.СпособРаспределения);
		
		//Получатель
		Правило.СпособОпределенияАналитикиПолучателя =
			ПолучитьСпособыОпределенияАналитикиПолучателя(
				Правило.СхемаКомпоновкиДанныхБазы,
				Правило.НастройкиБазы,
				Правило.РазрезыАналитикиИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в таблицу правило для отработки флага учетной политики "Директ-костинг"
//
// Параметры:
//  ПравилаРаспределенияЗатрат - таблица значений, созданная функцией ИнициализироватьПравилаРаспределения
//
Процедура СоздатьПравилоДиректКостинг(ПравилаРаспределенияЗатрат, УчетнаяПолитика)
	
	Если НЕ УчетнаяПолитика.ДиректКостинг Тогда
		Возврат;
	КонецЕсли;
	
	ХарактерЗатратОбщехозяйственныеРасходы = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы;
	
	// Правило содержит 
	//  Источник - правила отбора затрат (все затраты на счете 26)
	//  Базу - способ распределения (используем только "По выручке")
	//  Получателя - способы определения аналитики получателя (определяются базой)
	
	Правило = ПравилаРаспределенияЗатрат.Добавить();
	
	Правило.Наименование					= "Директ-костинг";
	Правило.НаправлениеРаспределения		= Перечисления.НаправленияРаспределенияЗатрат.Результат;
	
	// Источник
	Правило.РазрезыАналитикиИсточника       = ПолучитьАналитикуУчетаЗатратПоХарактеруЗатрат(ХарактерЗатратОбщехозяйственныеРасходы);
	
	// Отбор задаем в виде соответствий	
	ВидыОтбораИсточника = Новый Соответствие;
	ВидыОтбораИсточника.Вставить("ХарактерЗатрат", ВидСравненияКомпоновкиДанных.Равно);
	
	ЗначенияОтбораИсточника = Новый Соответствие;
	ЗначенияОтбораИсточника.Вставить("ХарактерЗатрат", ХарактерЗатратОбщехозяйственныеРасходы);
	
	Правило.ВидыОтбораИсточника             = ВидыОтбораИсточника;
	Правило.ЗначенияОтбораИсточника         = ЗначенияОтбораИсточника;
	
	СхемаКомпоновкиДанных = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьМакет("ДиректКостинг_УчитыватьНоменклатурныеГруппы");
	Правило.СхемаКомпоновкиДанныхБазы		= СхемаКомпоновкиДанных;
	
	// Получатель
	Правило.СпособОпределенияАналитикиПолучателя = Новый Соответствие;
	
	ПоляБазы = Новый Структура("СчетУчета, СчетУчетаНУ, Субконто1");//
	Для Каждого РазрезАналитики Из ПоляБазы Цикл
		Правило.СпособОпределенияАналитикиПолучателя.Вставить(РазрезАналитики.Ключ, Перечисления.СпособыОпределенияАналитики.ИзБазы);
	КонецЦикла;

КонецПроцедуры

// Добавляет в таблицу правило для списания расходов на брак
//
// Параметры:
//  ПравилаРаспределенияЗатрат - таблица значений, созданная функцией ИнициализироватьПравилаРаспределения
//
Процедура СоздатьПравилоБракВПроизводстве(ПравилаРаспределенияЗатрат)
	
	// Правило содержит 
	//  Источник - правила отбора затрат (все затраты на счете 28)
	//  Базу - способ распределения (перенос на ту же аналитику 20 счета)
	//  Получателя - способы определения аналитики получателя (определяются базой)
	
	ХарактерБракВПроизводстве = Перечисления.ХарактерЗатрат.БракВПроизводстве;
	
	Правило = ПравилаРаспределенияЗатрат.Добавить();
	
	Правило.Наименование					= "Списание расходов на брак";
	Правило.НаправлениеРаспределения		= Перечисления.НаправленияРаспределенияЗатрат.Затраты;
	
	// Источник
	Правило.РазрезыАналитикиИсточника       = ПолучитьАналитикуУчетаЗатратПоХарактеруЗатрат(ХарактерБракВПроизводстве);
	
	ВидыОтбораИсточника = Новый Соответствие;
	ВидыОтбораИсточника.Вставить("ХарактерЗатрат", ВидСравненияКомпоновкиДанных.Равно);
	
	ЗначенияОтбораИсточника = Новый Соответствие;
	ЗначенияОтбораИсточника.Вставить("ХарактерЗатрат", ХарактерБракВПроизводстве);
	
	// Отбор задаем в виде соответствий
	Правило.ВидыОтбораИсточника             = ВидыОтбораИсточника;
	Правило.ЗначенияОтбораИсточника         = ЗначенияОтбораИсточника;
	
	СхемаКомпоновкиДанных = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьМакет("ПереносНаПроизводственныеРасходы");
	Правило.СхемаКомпоновкиДанныхБазы		= СхемаКомпоновкиДанных;
	
	// Получатель
	// Сгодится общий подход:
	//  - всё, что есть в базе берем из базы (это должны быть только СчетУчета, СчетУчетаНУ)
	//  - всё остальное - из источника
	Правило.СпособОпределенияАналитикиПолучателя = ПолучитьСпособыОпределенияАналитикиПолучателя(
		Правило.СхемаКомпоновкиДанныхБазы,
		Правило.НастройкиБазы,
		Правило.РазрезыАналитикиИсточника);

КонецПроцедуры

// Добавляет в таблицу правило для распределения расходов на продажу ("коммерческих")
//
// Параметры:
//  ПравилаРаспределенияЗатрат - таблица значений, созданная функцией ИнициализироватьПравилаРаспределения
//
Процедура СоздатьПравилоРасходыНаПродажу(ПравилаРаспределенияЗатрат)
	
	// Правило содержит 
	//  Источник - правила отбора затрат (все затраты на счете 44)
	//  Базу - способ распределения (по выручке)
	//  Получателя - способы определения аналитики получателя (определяются базой)
	
	Правило = ПравилаРаспределенияЗатрат.Добавить();
	
	Правило.Наименование					= "Распределение расходов на продажу";
	Правило.НаправлениеРаспределения		= Перечисления.НаправленияРаспределенияЗатрат.Результат;
	
	// Источник
	Правило.РазрезыАналитикиИсточника       = ПолучитьАналитикуУчетаЗатратПоХарактеруЗатрат(Перечисления.ХарактерЗатрат.КоммерческиеРасходы);
	
	// Отбор задаем в виде соответствий
	ВидыОтбораИсточника = Новый Соответствие;
	ВидыОтбораИсточника.Вставить("ХарактерЗатрат", ВидСравненияКомпоновкиДанных.ВСписке);
	
	ЗначенияОтбораИсточника = Новый Соответствие;
	ЗначенияОтбораИсточника.Вставить("ХарактерЗатрат", СписокХарактеровЗатратРасходовНаПродажу());

	Правило.ВидыОтбораИсточника             = ВидыОтбораИсточника;
	Правило.ЗначенияОтбораИсточника         = ЗначенияОтбораИсточника;
	
	СхемаКомпоновкиДанных = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьМакет("РасходыНаПродажу_УчитыватьНоменклатурныеГруппы");
	Правило.СхемаКомпоновкиДанныхБазы		= СхемаКомпоновкиДанных;
	
	// Получатель
	Правило.СпособОпределенияАналитикиПолучателя = Новый Соответствие;
	
	ПоляБазы = Новый Структура("СчетУчета, СчетУчетаНУ, Субконто1");//
	Для Каждого РазрезАналитики Из ПоляБазы Цикл
		Правило.СпособОпределенияАналитикиПолучателя.Вставить(РазрезАналитики.Ключ, Перечисления.СпособыОпределенияАналитики.ИзБазы);
	КонецЦикла;

КонецПроцедуры

// Добавляет в таблицу правило, которое переносит косвенные затраты на обощенные статьи
//
// Параметры:
//  ПравилаРаспределенияЗатрат - таблица значений, созданная функцией ИнициализироватьПравилаРаспределения
//
Процедура СоздатьПравилоУчитыватьЗатратыНаОбобщенныхСтатьях(ПравилаРаспределенияЗатрат, УчетнаяПолитика)
	
	Если УчетнаяПолитика.ДетализацияКосвенныхЗатратВСебестоимости <> Перечисления.ДетализацияКосвенныхЗатратВСебестоимости.ПоФиксированнойСтатьеЗатрат Тогда
		Возврат;
	КонецЕсли;
	
	// Правило содержит 
	//  Источник - правила отбора затрат (все косвенные расходы - ОПР, ОХР и брак)
	//  Базу - способ распределения (используем специальный способ, который перенесет затраты на статьи, заданные в учетной политике)
	//  Получателя - способы определения аналитики получателя (они стандартные)
	
	Правило = ПравилаРаспределенияЗатрат.Добавить();
	
	Правило.Наименование					   = "Перенос затрат на обобщенные статьи";
	Правило.НаправлениеРаспределения			= Перечисления.НаправленияРаспределенияЗатрат.Затраты;
	
	// Из источника возьмем всю возможную аналитику, кроме СтатьяЗатрат
	// Все ключи аналитики, кроме той, что содержит СтатьяЗатрат останутся неизменными.
	РазрезыАналитикиИсточника = Новый Массив();
	//
	РазрезыАналитикиИсточника.Добавить("АналитикаВидаУчета");
	РазрезыАналитикиИсточника.Добавить("АналитикаУчетаПартий");
	РазрезыАналитикиИсточника.Добавить("АналитикаРаспределенияЗатрат");
	
	РазрезыАналитикиИсточника.Добавить("ХарактерЗатрат");
	РазрезыАналитикиИсточника.Добавить("Затрата");
	РазрезыАналитикиИсточника.Добавить("ХарактеристикаЗатраты");
	РазрезыАналитикиИсточника.Добавить("СерияЗатраты");
	
	Правило.РазрезыАналитикиИсточника       = РазрезыАналитикиИсточника;
	
	// Отбор задаем в виде структур:
	Правило.ВидыОтбораИсточника             = Новый Соответствие;
	Правило.ЗначенияОтбораИсточника         = Новый Соответствие;
	
	// 1 - отбираем косвенные по характеру затрат 
	КосвенныеРасходы = Новый СписокЗначений;
	КосвенныеРасходы.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
	КосвенныеРасходы.Добавить(Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы);
	КосвенныеРасходы.Добавить(Перечисления.ХарактерЗатрат.БракВПроизводстве);
	Правило.ВидыОтбораИсточника.Вставить    ("ХарактерЗатрат", ВидСравненияКомпоновкиДанных.ВСписке);
	Правило.ЗначенияОтбораИсточника.Вставить("ХарактерЗатрат", КосвенныеРасходы);
	
	// 2 - предотвращаем распределение "само на себя"
	ОбобщенныеСтатьи = Новый СписокЗначений;
	ОбобщенныеСтатьи.Добавить(УчетнаяПолитика.СтатьяБракВПроизводстве);
	ОбобщенныеСтатьи.Добавить(УчетнаяПолитика.СтатьяОбщепроизводственныеРасходы);
	ОбобщенныеСтатьи.Добавить(УчетнаяПолитика.СтатьяОбщехозяйственныеРасходы);
	Правило.ВидыОтбораИсточника.Вставить    ("СтатьяЗатрат", ВидСравненияКомпоновкиДанных.НеВСписке);
	Правило.ЗначенияОтбораИсточника.Вставить("СтатьяЗатрат", ОбобщенныеСтатьи);
	
	Правило.СхемаКомпоновкиДанныхБазы = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьМакет("ПереносНаОбобщенныеСтатьи");
	
	// Получатель
	// Сгодится общий подход:
	//  - всё, что есть в базе берем из базы (это должна быть только статья затрат)
	//  - всё остальное - из источника
	Правило.СпособОпределенияАналитикиПолучателя = ПолучитьСпособыОпределенияАналитикиПолучателя(
		Правило.СхемаКомпоновкиДанныхБазы,
		Правило.НастройкиБазы,
		Правило.РазрезыАналитикиИсточника);
	
КонецПроцедуры

// Добавляет в таблицу правило для списания нераспределенных расходов на продажу ("коммерческих")
//
// Параметры:
//  ПравилаРаспределенияЗатрат - таблица значений, созданная функцией ИнициализироватьПравилаРаспределения
//
Процедура СоздатьПравилоСписатьНераспределенныеРасходыНаПродажу(ПравилаРаспределенияЗатрат)
	
	Правило = ПравилаРаспределенияЗатрат.Добавить();
	
	Правило.Наименование					= "Списание нераспределенных расходов на продажу";
	Правило.НаправлениеРаспределения		= Перечисления.НаправленияРаспределенияЗатрат.Результат;
	
	// Источник
	Правило.РазрезыАналитикиИсточника       = ПолучитьАналитикуУчетаЗатратПоХарактеруЗатрат(Перечисления.ХарактерЗатрат.КоммерческиеРасходы);
	
	// Отбор задаем в виде соответствий
	ВидыОтбораИсточника = Новый Соответствие;
	ВидыОтбораИсточника.Вставить("ХарактерЗатрат", ВидСравненияКомпоновкиДанных.ВСписке);
	ВидыОтбораИсточника.Вставить("СтатьяЗатрат.ВидРасходовНУ", ВидСравненияКомпоновкиДанных.НеРавно);
	
	ЗначенияОтбораИсточника = Новый Соответствие;
	ЗначенияОтбораИсточника.Вставить("ХарактерЗатрат", СписокХарактеровЗатратРасходовНаПродажу());
	// Транспортные расходы списанию не подлежат
	ЗначенияОтбораИсточника.Вставить("СтатьяЗатрат.ВидРасходовНУ", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);

	Правило.ВидыОтбораИсточника             = ВидыОтбораИсточника;
	Правило.ЗначенияОтбораИсточника         = ЗначенияОтбораИсточника;
	
	СхемаКомпоновкиДанных = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьМакет("СписатьРасходыНаПродажу");
	Правило.СхемаКомпоновкиДанныхБазы		= СхемаКомпоновкиДанных;
	
	// Получатель
	Правило.СпособОпределенияАналитикиПолучателя = Новый Соответствие;
	
	ПоляБазы = Новый Структура("СчетУчета, СчетУчетаНУ");//
	Для Каждого РазрезАналитики Из ПоляБазы Цикл
		Правило.СпособОпределенияАналитикиПолучателя.Вставить(РазрезАналитики.Ключ, Перечисления.СпособыОпределенияАналитики.ИзБазы);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в таблицу правило, которое переносит затраты с 25.03, 26.03, 44.01.3, 44.02.3 на расходы по деятельности, обалагаемой ЕНВД
//
// Параметры:
//  ПравилаРаспределенияЗатрат - таблица значений, созданная функцией ИнициализироватьПравилаРаспределения
//
Процедура СоздатьПравилоПереносНаОблагаемыеЕНВД(ПравилаРаспределенияЗатрат, УчетнаяПолитика)
	
	Если НЕ УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД Тогда
		Возврат;
	КонецЕсли;
	
	// Правило содержит 
	//  Источник - правила отбора затрат (затраты на счетах 25.03, 26.03, 44.01.3, 44.02.3)
	//  Базу - способ распределения (используем только "По выручке")
	//  Получателя - способы определения аналитики получателя (они стандартные)
	
	Правило = ПравилаРаспределенияЗатрат.Добавить();
	
	Правило.Наименование 				= "Перенос на расходы по деятельности, облагаемой ЕНВД";
	Правило.НаправлениеРаспределения	= Перечисления.НаправленияРаспределенияЗатрат.Затраты;
	
	// Источник
	// Разрезы аналитики получим, как для производственных расходов. В этом случае число разрезов максимально.
	Правило.РазрезыАналитикиИсточника 	= ПолучитьАналитикуУчетаЗатратПоХарактеруЗатрат(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	
	// Отбор задаем в виде соответствий
	ВидыОтбораИсточника = Новый Соответствие;
	ВидыОтбораИсточника.Вставить("СчетУчета",		ВидСравненияКомпоновкиДанных.ВСписке);
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыРаспределяемые);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыРаспределяемые);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращенияРаспределяемые);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.КоммерческиеРасходыРаспределяемые);
	
	ЗначенияОтбораИсточника = Новый Соответствие;
	ЗначенияОтбораИсточника.Вставить("СчетУчета", 	СписокСчетов);
	
	Правило.ВидыОтбораИсточника     = ВидыОтбораИсточника;
	Правило.ЗначенияОтбораИсточника = ЗначенияОтбораИсточника;
	
	СхемаКомпоновкиДанных = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьМакет("ПереносНаОблагаемыеЕНВД");
	Правило.СхемаКомпоновкиДанныхБазы	= СхемаКомпоновкиДанных;
	
	// Получатель
	// Сгодится общий подход:
	//  - всё, что есть в базе берем из базы (это должны быть только СчетУчета, СчетУчетаНУ)
	//  - всё остальное - из источника
	Правило.СпособОпределенияАналитикиПолучателя = ПолучитьСпособыОпределенияАналитикиПолучателя(
		Правило.СхемаКомпоновкиДанныхБазы,
		Правило.НастройкиБазы,
		Правило.РазрезыАналитикиИсточника);
	
КонецПроцедуры

// Добавляет в таблицу правило, которое переносит затраты с аналитики счетов учета косвенных расходов на аналитику учета прямых расходов НУ
//
// Параметры:
//  ПравилаРаспределенияЗатрат - таблица значений, созданная функцией ИнициализироватьПравилаРаспределения
//  УчетнаяПолитика - Структура - учетная политика оргнанизации
//
Процедура СоздатьПравилоПереносНаПрямыеРасходы(ПравилаРаспределенияЗатрат, УчетнаяПолитика)
	
	// Правило содержит 
	//  Источник - правила отбора затрат (затраты на ключах, где СчетУчетаНУ - это счет учета косвенных расходов)
	//  Базу - способ распределения (используем специальный способ, который перенесет затраты с ключей учета косвенных расходов НУ на ключи учета прямых расходов)
	//  Получателя - способы определения аналитики получателя (они стандартные)
	
	Правило = ПравилаРаспределенияЗатрат.Добавить();
	
	Правило.Наименование 				= "Перенос затрат на аналитику учета прямых расходов НУ";
	Правило.НаправлениеРаспределения	= Перечисления.НаправленияРаспределенияЗатрат.Затраты;
	
	// Из источника возьмем всю возможную аналитику.
	// Все ключи аналитики кроме АналитикиВидаУчета, содержащей СчетаУчетаНУ, останутся неизменными.
	РазрезыАналитикиИсточника = Новый Массив();
	
	РазрезыАналитикиИсточника.Добавить("АналитикаУчетаЗатрат");
	РазрезыАналитикиИсточника.Добавить("АналитикаРаспределенияЗатрат");
	РазрезыАналитикиИсточника.Добавить("АналитикаУчетаПартий");
	
	РазрезыАналитикиИсточника.Добавить("СчетУчета");
	РазрезыАналитикиИсточника.Добавить("СчетУчетаНУ");
	РазрезыАналитикиИсточника.Добавить("Подразделение");
	
	Правило.РазрезыАналитикиИсточника = РазрезыАналитикиИсточника;
	
	// Отбор задаем в виде соответствий
	ВидыОтбораИсточника = Новый Соответствие;
	ВидыОтбораИсточника.Вставить("СчетУчетаНУ", ВидСравненияКомпоновкиДанных.ВСписке);
	ВидыОтбораИсточника.Вставить("СтатьяЗатрат.ВидРасходовНУ", ВидСравненияКомпоновкиДанных.НеВСписке);
	
	ЗначенияОтбораИсточника = Новый Соответствие;
	ЗначенияОтбораИсточника.Вставить("СчетУчетаНУ", 
		ПроцедурыРасчетаСебестоимостиРасширеннаяАналитика.ПолучитьСчетаУчетаКосвенныхРасходовНУ(УчетнаяПолитика));
	ЗначенияОтбораИсточника.Вставить("СтатьяЗатрат.ВидРасходовНУ", 
		ПроцедурыРасчетаСебестоимостиРасширеннаяАналитика.ПолучитьВидыНормируемыхРасходовНУ());
	
	Правило.ВидыОтбораИсточника     = ВидыОтбораИсточника;
	Правило.ЗначенияОтбораИсточника = ЗначенияОтбораИсточника;
	
	// Схема, содержащая базу
	СхемаКомпоновкиДанных = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьМакет("ПереносНаПрямыеРасходы");
	Правило.СхемаКомпоновкиДанныхБазы	= СхемаКомпоновкиДанных;
	
	// Проводки по данному правилу должны формироваться особым образом, поэтому используем особый код операции
	Правило.КодОперации = Перечисления.КодыОперацийЗатраты.ЗакрытиеКосвенныхРасходовНУ;
	
	// Получатель
	// Сгодится общий подход:
	//  - всё, что есть в базе берем из базы (в данном случае только СчетУчетаНУ)
	//  - всё остальное - из источника
	Правило.СпособОпределенияАналитикиПолучателя = ПолучитьСпособыОпределенияАналитикиПолучателя(
		Правило.СхемаКомпоновкиДанныхБазы,
		Правило.НастройкиБазы,
		Правило.РазрезыАналитикиИсточника);
	
КонецПроцедуры

// Добавляет в таблицу правило, которое списывает нераспределенные по выручке общехозяйственные расходы при использовании метода "Директ-костинг"
//
Процедура СоздатьПравилоДиректКостингСписатьНераспределенныеОХР(ПравилаРаспределенияЗатрат, УчетнаяПолитика)
	
	Если НЕ УчетнаяПолитика.ДиректКостинг Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ПравилаРаспределенияЗатрат.Добавить();
	
	Правило.Наименование                    = "Списание нераспределенных общехозяйственных расходов (Директ-костинг)";
	Правило.НаправлениеРаспределения        = Перечисления.НаправленияРаспределенияЗатрат.Результат;
	
	// Источник
	Правило.РазрезыАналитикиИсточника       = ПолучитьАналитикуУчетаЗатратПоХарактеруЗатрат(Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы);
	
	// Отбор задаем в виде соответствий
	ВидыОтбораИсточника = Новый Соответствие;
	ВидыОтбораИсточника.Вставить("ХарактерЗатрат", ВидСравненияКомпоновкиДанных.Равно);
	
	ЗначенияОтбораИсточника = Новый Соответствие;
	ЗначенияОтбораИсточника.Вставить("ХарактерЗатрат", Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы);

	Правило.ВидыОтбораИсточника             = ВидыОтбораИсточника;
	Правило.ЗначенияОтбораИсточника         = ЗначенияОтбораИсточника;
	
	СхемаКомпоновкиДанных = Справочники.СпособыРаспределенияЗатратНаВыпуск.ПолучитьМакет("ДиректКостинг_СписатьОбщехозяйственныеРасходы");
	Правило.СхемаКомпоновкиДанныхБазы       = СхемаКомпоновкиДанных;
	
	// Получатель
	Правило.СпособОпределенияАналитикиПолучателя = Новый Соответствие;
	
	ПоляБазы = Новый Структура("СчетУчета, СчетУчетаНУ");
	Для Каждого РазрезАналитики Из ПоляБазы Цикл
		Правило.СпособОпределенияАналитикиПолучателя.Вставить(РазрезАналитики.Ключ, Перечисления.СпособыОпределенияАналитики.ИзБазы);
	КонецЦикла;
	
КонецПроцедуры

// ФУНКЦИИ ОПИСЫВАЮТ СОГЛАШЕНИЯ ... 

// ... В МЕТАДАННЫХ

// Возвращает код операции, который будет записан в регистры УчетЗатрат
//
Функция КодОперацииРаспределениеЗатратПоАналитике(КорАналитикаВидаУчета = Неопределено)
	
	// Код операции должен быть подходящим
	// - для корректировки стоимости (стоимость операций с некоторыми кодами не корректируется)
	// - для формирования проводок (по операциям с разными кодами формируются проводки разными механизмами)
	
	Если ТипЗнч(КорАналитикаВидаУчета) = Тип("СправочникСсылка.КлючиАналитикиУчетаПрочихЗатрат") Тогда
		Возврат Перечисления.КодыОперацийЗатраты.СписаниеРасходовНаПродажу;
	КонецЕсли;
	
	Возврат Перечисления.КодыОперацийЗатраты.СписаниеОХР_Регламент;
	
КонецФункции

// Возвращает массив кодов операций, используемых при распределении затрат
//
Функция КодыОперацийРаспределенияЗатрат()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.КодыОперацийЗатраты.СписаниеРасходовНаПродажу);
	Результат.Добавить(Перечисления.КодыОперацийЗатраты.СписаниеОХР_Регламент);
	
	Возврат Результат;
	
КонецФункции

Функция ПоддерживаемыеРазрезыАналитикиПолучателя()
	
	// Разрезы аналитики также перечислены в макетах регистров УчетЗатрат, УчетЗатратРегл
	
	Разрезы = Новый Структура();  
	
	//АналитикаВидаУчета
	//Организация - всё распределение делаем в рамках одной организации
	Разрезы.Вставить("Подразделение");
	Разрезы.Вставить("СчетУчета");
	Разрезы.Вставить("СчетУчетаНУ");
	Разрезы.Вставить("ЕНВД");
	//Разрезы.Вставить("Проект");
	//Разрезы.Вставить("Склад");
	
	//АналитикаРаспределенияЗатрат
	Разрезы.Вставить("НоменклатурнаяГруппа");
	Разрезы.Вставить("Продукция");
	Разрезы.Вставить("ХарактеристикаПродукции");
	Разрезы.Вставить("СерияПродукции");
	
	//АналитикаУчетаЗатрат
	Разрезы.Вставить("ХарактерЗатрат");
	Разрезы.Вставить("СтатьяЗатрат");
	//Разрезы.Вставить("Затрата");
	//Разрезы.Вставить("ХарактеристикаЗатраты");
	//Разрезы.Вставить("СерияЗатраты");
	//Разрезы.Вставить("Качество");
	
	//АналитикаУчетаПартий
	Разрезы.Вставить("Заказ");
	//Разрезы.Вставить("Комиссионер");
	//Разрезы.Вставить("ДоговорКомиссионера");
	//Разрезы.Вставить("ДокументПередачи");
	//Разрезы.Вставить("ФизЛицо");
	//Разрезы.Вставить("НазначениеИспользования");
	
	// Можем распределять прямо на ключи аналитики
	Для Каждого Ключ Из КлючиАналитики() Цикл
		Разрезы.Вставить(Ключ.Ключ);
	КонецЦикла;
	
	// Распределять затраты можем только из одного раздела - Затраты,
	// но в разные разделы.
	Разрезы.Вставить("РазделУчета");
	
	//АналитикаУчетаПрочихЗатрат 
	//
	//СчетУчета, СчетУчетаНУ - уже есть
	Разрезы.Вставить("Субконто1");
	Разрезы.Вставить("Субконто2");
	Разрезы.Вставить("Субконто3");
	Разрезы.Вставить("СубконтоНУ1");
	Разрезы.Вставить("СубконтоНУ2");
	Разрезы.Вставить("СубконтоНУ3");
	//Разрезы.Вставить("ОбъектСтроительства");
	//Разрезы.Вставить("СпособСтроительства");
	
	Возврат Разрезы;
	
КонецФункции

Функция КлючиАналитики() // ИзмеренияРегистра
	
	КлючиАналитики = Новый Структура();
	КлючиАналитики.Вставить("АналитикаВидаУчета");
	КлючиАналитики.Вставить("АналитикаРаспределенияЗатрат");
	КлючиАналитики.Вставить("АналитикаУчетаПартий");
	КлючиАналитики.Вставить("АналитикаУчетаЗатрат");
	
	Для Каждого КлючИЗначение Из КлючиАналитики Цикл
		КлючиАналитики.Вставить(КлючИЗначение.Ключ, Перечисления.КлючиАналитики[КлючИЗначение.Ключ]);
	КонецЦикла;
	
	Возврат КлючиАналитики;
	
КонецФункции

// Возвращает список характеров затрат расходов на продажу
Функция СписокХарактеровЗатратРасходовНаПродажу()
	
	СписокРасходовНаПродажу = Новый СписокЗначений();
	СписокРасходовНаПродажу.Добавить(Перечисления.ХарактерЗатрат.КоммерческиеРасходы);
	СписокРасходовНаПродажу.Добавить(Перечисления.ХарактерЗатрат.ИздержкиОбращения);
	
	Возврат СписокРасходовНаПродажу;
	
КонецФункции

// ... ПРИ ФОРМИРОВАНИИ ПРАВИЛ ПО НАСТРОЙКЕ

// Возвращает способ определения аналитики в получателе в зависимости от
// наличия измерений в базе и источнике
//
Функция ПолучитьСпособыОпределенияАналитикиПолучателя(СКДБазы, ПользовательскиеНастройкиБазы, АналитикаИсточника)
	
	СоответствиеСпособы = Новый Соответствие;
	
	НастройкиКомпоновки = ПодготовитьНастройкиКомпоновки(СКДБазы, ПользовательскиеНастройкиБазы);
	
	ПоляБазы = Новый Массив;
	Для Каждого ПолеБазы Из НастройкиКомпоновки.Выбор.Элементы Цикл
		Если ПолеБазы.Использование Тогда
			ИмяПоля = Строка(ПолеБазы.Поле);
			ПоляБазы.Добавить(Строка(ПолеБазы.Поле));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого РазрезАналитики Из ПоддерживаемыеРазрезыАналитикиПолучателя() Цикл
		
		//
		// Проверяеть следует в настройке, а не в схеме.
		// Чтобы предотвратить обращение к полю, отсутствующему в результате запроса.
		// Такое может случиться, если поле есть схеме, но не указано в настройке.
		Если ПоляБазы.Найти(РазрезАналитики.Ключ) <> Неопределено Тогда
			
			// "Всё, что есть в базе - есть не зря"
			//Аналитика есть в базе, берем из нее.
			СоответствиеСпособы.Вставить(РазрезАналитики.Ключ, Перечисления.СпособыОпределенияАналитики.ИзБазы);
			
		ИначеЕсли АналитикаИсточника.Найти(РазрезАналитики.Ключ) <> Неопределено Тогда
			
			СоответствиеСпособы.Вставить(РазрезАналитики.Ключ, Перечисления.СпособыОпределенияАналитики.ИзИсточника);
			
		КонецЕсли;
		
	КонецЦикла;	
			
    Возврат СоответствиеСпособы;
	
КонецФункции

// Определяет по характеру затрат аналитику затрат в источнике, важную для распределения
//
Функция ПолучитьАналитикуУчетаЗатратПоХарактеруЗатрат(ХарактерЗатрат) //
	
	МассивАналитики = Новый Массив();
	
	МассивАналитики.Добавить("ЕНВД");
	
	МассивАналитики.Добавить("ХарактерЗатрат");
	
	МассивАналитики.Добавить("СтатьяЗатрат");
	МассивАналитики.Добавить("НоменклатурнаяГруппа");
	МассивАналитики.Добавить("Заказ");
	//см. также УчитыватьЗатратыПоПроектам
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		МассивАналитики.Добавить("СчетУчета");
		МассивАналитики.Добавить("Подразделение");
		МассивАналитики.Добавить("Продукция");
		МассивАналитики.Добавить("СерияПродукции");
		МассивАналитики.Добавить("ХарактеристикаПродукции");
		МассивАналитики.Добавить("Затрата");
		МассивАналитики.Добавить("ХарактеристикаЗатраты");
		МассивАналитики.Добавить("СерияЗатраты");
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		МассивАналитики.Добавить("ВидПодразделения");
		МассивАналитики.Добавить("Подразделение");
		МассивАналитики.Добавить("Продукция");
		МассивАналитики.Добавить("СерияПродукции");
		МассивАналитики.Добавить("ХарактеристикаПродукции");
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы Тогда
		МассивАналитики.Добавить("ВидПодразделения");
		МассивАналитики.Добавить("Подразделение");
	ИначеЕсли ХарактерЗатрат = Перечисления.ХарактерЗатрат.КоммерческиеРасходы 
	      ИЛИ ХарактерЗатрат = Перечисления.ХарактерЗатрат.ИздержкиОбращения
		Тогда
		МассивАналитики.Добавить("Подразделение");
	КонецЕсли;
		
	Возврат МассивАналитики;
			
КонецФункции	

// ... В БАЗАХ РАСПРЕДЕЛЕНИЯ

// Возвращает список счетов, которые используются только для операций, облагаемых ЕНВД
//
Функция СчетаЕНВД() Экспорт
	
	Счета = Новый СписокЗначений(); // В качестве параметра СКД следует использовать список значений
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваОблагаемоеЕНВД);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыОблагаемыеЕНВД);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыОблагаемыеЕНВД);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводствеОблагаемоеЕНВД);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваОблагаемоеЕНВД);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.КоммерческиеРасходыОблагаемыеЕНВД);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращенияОблагаемыеЕНВД);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаОблагаемаяЕНВД);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажОблагаемаяЕНВД);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОблагаемыеЕНВД);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуОблагаемыеЕНВД);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыОблагаемыеЕНВД);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходыОблагаемыеЕНВД);
	
	Возврат Счета;
	
КонецФункции

// ДРУГИЕ ПРОЦЕДУРЫ РАСПРЕДЕЛЕНИЯ

// Добавляет запись в протокол. Протокол используется для отладки
//
// Параметры:
//   ТекстСообщения - Строка, информация о выполняемом действии
//   Протокол - Массив. В него будет добавлена запись
//   ВестиПротокол - Булево, если Ложь, то запись не будет добавлена.
//               Используется, если есть опасения, что протокол будет очень большим
Процедура ЗаписатьВПротокол(ТекстСообщения, Протокол, ВестиПротокол = Истина)
	
	Протокол.Добавить(ТекстСообщения);
	
КонецПроцедуры

// Возвращает аналитику получателя согласно способу определения аналитики, который указан в правиле распределения.
//
Функция ПолучитьАналитикуПолучателя(СтрокаБазы, СтрокаИсточника, ПравилоРаспределения, СтруктураШапкиДокумента)
	
	АналитикаПолучателя = Новый Структура;
	
	Для Каждого Способ Из ПравилоРаспределения.СпособОпределенияАналитикиПолучателя Цикл
		
		ИмяАналитики = Строка(Способ.Ключ);
		Если Способ.Значение = Перечисления.СпособыОпределенияАналитики.ИзИсточника Тогда
			ЗначениеАналитики = СтрокаИсточника[ИмяАналитики];
		ИначеЕсли Способ.Значение = Перечисления.СпособыОпределенияАналитики.ИзБазы Тогда
			ЗначениеАналитики = СтрокаБазы[ИмяАналитики];
		Иначе
			ЗначениеАналитики = Способ.Значение;
		КонецЕсли; 
		
		АналитикаПолучателя.Вставить(ИмяАналитики, ЗначениеАналитики);
		
	КонецЦикла; 
	
	ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете;
	
	// Добавим "общую" аналитику
	АналитикаПолучателя.Вставить("Организация",                  СтруктураШапкиДокумента.Организация);
	
	// Внутри модуля УчетЗатрат ПодразделениеОрганизации не используется - используется только Подразделение
	// Это допустимо, потому что оба поля (Подразделение и ПодразделениеОрганизации) не бывают заполнены одновременно.
	// При переходе к ключам аналитики нужно обеспечить, чтобы было заполнено нужно поле.
	// Заполним оба - процедуры подбора (создания) ключей разберутся, где свои, где чужие.
	Если АналитикаПолучателя.Свойство("Подразделение") Тогда
		АналитикаПолучателя.Вставить("ПодразделениеОрганизации", АналитикаПолучателя.Подразделение);
	КонецЕсли;
	
	// Если не все ключи аналитики заполнены, то подберем их, зная значения аналитики
	ВсеКлючиЗаполнены = Истина;
	Для Каждого КлючАналитики Из КлючиАналитики() Цикл
		Если НЕ АналитикаПолучателя.Свойство(КлючАналитики.Ключ) Тогда
			ВсеКлючиЗаполнены = Ложь;
			АналитикаПолучателя.Вставить(КлючАналитики.Ключ, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ВсеКлючиЗаполнены Тогда
		
		// Заполним незаполненные ключи в зависимости от направления распределения
		
		НаправлениеРаспределения = ПравилоРаспределения.НаправлениеРаспределения;
		
		Если НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Результат Тогда
			
			// Ключ вида учета должен быть заполнен ключем аналитики прочих затрат, все остальные ключи - пустые
			ЗначениеАналитики = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
					СтруктураШапкиДокумента,
					АналитикаПолучателя,
					Перечисления.КлючиАналитики.АналитикаУчетаПрочихЗатрат,
					ВидОтраженияВУчете);
			АналитикаПолучателя.Вставить("АналитикаВидаУчета", ЗначениеАналитики);
			
		Иначе
			
			// Подберем все незаполненные ключи
			
			Если НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Выпуск Тогда
				АналитикаПолучателя.Вставить("РазделУчета", Перечисления.РазделыУчета.Выпуск);
				
			ИначеЕсли НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Затраты Тогда
				АналитикаПолучателя.Вставить("РазделУчета", Перечисления.РазделыУчета.Затраты);
				
				НеУказанХарактерЗатрат = НЕ АналитикаПолучателя.Свойство("ХарактерЗатрат") ИЛИ НЕ ЗначениеЗаполнено(АналитикаПолучателя.ХарактерЗатрат);
				Если НеУказанХарактерЗатрат 
				 И АналитикаПолучателя.Свойство("СчетУчета")
				 И АналитикаПолучателя.Свойство("СтатьяЗатрат") Тогда 
					ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(АналитикаПолучателя.СчетУчета, АналитикаПолучателя.СтатьяЗатрат);
					АналитикаПолучателя.Вставить("ХарактерЗатрат", ХарактерЗатрат);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого КлючАналитики Из КлючиАналитики() Цикл
				Если НЕ ЗначениеЗаполнено(АналитикаПолучателя[КлючАналитики.Ключ]) Тогда
					ЗначениеАналитики = РасширеннаяАналитикаУчета.ПолучитьЗначениеКлючаАналитики(
						СтруктураШапкиДокумента,
						АналитикаПолучателя,
						КлючАналитики.Значение,
						ВидОтраженияВУчете);
					АналитикаПолучателя.Вставить(КлючАналитики.Ключ, ЗначениеАналитики);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; // Все ключи заполнены
	
	// Очистим ключи аналитики, которые заполняться при данном направлении не должны
	НеиспользуемыеКлючиАналитики = Новый Структура();
	Если НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Выпуск Тогда
		НеиспользуемыеКлючиАналитики.Вставить("АналитикаУчетаЗатрат");
	ИначеЕсли НаправлениеРаспределения = Перечисления.НаправленияРаспределенияЗатрат.Результат Тогда
		НеиспользуемыеКлючиАналитики.Вставить("АналитикаУчетаЗатрат");
		НеиспользуемыеКлючиАналитики.Вставить("АналитикаРаспределенияЗатрат");
		НеиспользуемыеКлючиАналитики.Вставить("АналитикаУчетаПартий");
	КонецЕсли;
	
	Для каждого КлючАналитики Из НеиспользуемыеКлючиАналитики Цикл
		АналитикаПолучателя.Вставить(КлючАналитики.Ключ, Неопределено);
	КонецЦикла;
	
	Возврат АналитикаПолучателя;

КонецФункции

// Возвращает аналитику в разрезе которой нужно выполнить распределение
//
Функция ПолучитьРазрезыРаспределения(АналитикаИсточника, КолонкиБазы, СпособОпределенияАналитикиПолучателя)

	РазрезыРаспределения = Новый Структура;
	
	// Если необходимо распределить затраты на ту же аналитику, то эта аналитика (по "И")
	// 1. Есть как в Источнике, так и в Базе
	// 2. В Получателе определяется из Источника 
	//    или у Получателя такой аналитики нет совсем
	
	Для Каждого КолонкаБазы Из КолонкиБазы Цикл
		
		ИмяАналитики = КолонкаБазы.Имя;
		СпособОпределения = СпособОпределенияАналитикиПолучателя.Получить(ИмяАналитики);
		
		Если АналитикаИсточника.Найти(ИмяАналитики) <> Неопределено
		 И (СпособОпределения = Неопределено
		 	ИЛИ СпособОпределения = Перечисления.СпособыОпределенияАналитики.ИзИсточника) Тогда
				
			РазрезыРаспределения.Вставить(ИмяАналитики,ИмяАналитики);
			
		КонецЕсли;
		
		// В некоторых случаях, необходимо установить связь базы с источником по одной колонке, а базы с получателем по другой колонке
		// Например, для распределения затрат на услуги собственным подразделениям
		Если Прав(ИмяАналитики, 8) = "Источник" Тогда
			ИмяАналитикиБезИсточника = Сред(ИмяАналитики, 1, СтрДлина(ИмяАналитики) - 8);
			Если АналитикаИсточника.Найти(ИмяАналитикиБезИсточника) <> Неопределено 
				Тогда
				
				РазрезыРаспределения.Вставить(ИмяАналитикиБезИсточника, ИмяАналитики);
				
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат РазрезыРаспределения;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ПРИ ПОМОЩИ СКД

// Добавляет отбор в набор отборов компоновщика или группы отборов
// Функция взята из модуля БСП СтандартныеОтчетыКлиентСервер
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина, Пользовательский = Ложь)
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	
	Если Пользовательский Тогда
		НовыйЭлемент.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
		НовыйЭлемент.ПредставлениеПользовательскойНастройки = Строка(Поле);
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Возвращает НастройкиКомпоновкиДанных с загруженными настройками по умолчанию из схемы компоновки
// и примененными пользовательскими настройками
//
Функция ПодготовитьНастройкиКомпоновки(СхемаКомпоновки, ПользовательскиеНастройки)
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	Если ПользовательскиеНастройки <> Неопределено Тогда
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	КонецЕсли;
	
	// Применим пользовательские настройки
	Возврат КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки();
	
КонецФункции

// Возвращает данные при помощи СКД
//
// Парметры:
//	СхемаКомпоновки						- Схема компоновки, которая содержит запрос к данным
//	ПользовательскиеНастройкиКомпоновки - НастройкиКомпоновкиДанных, настройки (отбор), которые установил пользователь
//	СтруктураПараметров					- Структура, которая содержит значения параметров
//	СтруктураОтбора						- Структура, которая содержит дополнительный отбор (по периоду, организации и т.д.)
//	СтруктураВидовСравненияОтбора		- Структура, которая содержит вид сравнения применяемый в отборе
//
// Возвращаемое значение
//	ТаблицаЗначений
//
Функция ПолучитьДанныеПоСхемеКомпоновки(СхемаКомпоновкиДанных, ПользовательскиеНастройки = Неопределено, СтруктураПараметров = Неопределено, СтруктураОтбора = Неопределено, СтруктураВидовСравненияОтбора = Неопределено)
	
	// Применим пользовательские настройки
	НастройкиКомпоновки = ПодготовитьНастройкиКомпоновки(СхемаКомпоновкиДанных, ПользовательскиеНастройки);
	// Дальше применим настройки, которые должны "перекрыть" пользовательские
	
	// Установим параметры
	Если СтруктураПараметров <> Неопределено Тогда
		Для Каждого ТекущийПараметр Из СтруктураПараметров Цикл
			Если НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти(ТекущийПараметр.Ключ) <> Неопределено Тогда
				НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(ТекущийПараметр.Ключ,  ТекущийПараметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Добавим в настройки дополнительный отбор
	Если СтруктураОтбора <> Неопределено Тогда
		Для каждого ЭлементОтбора Из СтруктураОтбора Цикл
			Если НРег(ЭлементОтбора.Ключ) = "период" Тогда
				
				// Создадим отбор Дата >= ДатаНачала И Дата <= ДатаОкончания
				Если НастройкиКомпоновки.ДоступныеПоляОтбора.Элементы.Найти("Дата") <> Неопределено Тогда
					Если ЗначениеЗаполнено(ЭлементОтбора.Значение.ДатаНачала) Тогда
						ДобавитьОтбор(НастройкиКомпоновки.Отбор, "Дата", НачалоДня(ЭлементОтбора.Значение.ДатаНачала), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					КонецЕсли; 
					Если ЗначениеЗаполнено(ЭлементОтбора.Значение.ДатаОкончания) Тогда
						ДобавитьОтбор(НастройкиКомпоновки.Отбор, "Дата", КонецДня(ЭлементОтбора.Значение.ДатаОкончания), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					КонецЕсли; 
				КонецЕсли; 
				
			Иначе
				
				ВидСравненияОтбора = Неопределено;
				
				Если СтруктураВидовСравненияОтбора <> Неопределено Тогда
					ВидСравненияОтбора = СтруктураВидовСравненияОтбора[ЭлементОтбора.Ключ];
				КонецЕсли;
				
				ДобавитьОтбор(НастройкиКомпоновки.Отбор, ЭлементОтбора.Ключ, ЭлементОтбора.Значение, ВидСравненияОтбора);
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 
	
	// Отключение вывода общих итогов
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов",   РасположениеИтоговКомпоновкиДанных.Нет);
	
	// Компоновка макета
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	// Таблица значений, в которую будет получен результат
	Результат = Новый ТаблицаЗначений;
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(Результат);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает, обязательно ли для переданной настройки использовать упрощенное распределение.
//
// Параметры:
//   НастройкаЗакрытияМесяца - ссылка на настройку 
//
// Возвращаемое значение:
//  Истина - следует использовать упрощенное распределение
//  Ложь - упрощенное распределение можно не использовать
//
Функция ИспользоватьПростоеРаспределение(НастройкаЗакрытияМесяца) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", НастройкаЗакрытияМесяца);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиЗакрытияМесяцаСпособыРаспределения.Ссылка
	|ИЗ
	|	Справочник.НастройкиЗакрытияМесяца.СпособыРаспределения КАК НастройкиЗакрытияМесяцаСпособыРаспределения
	|ГДЕ
	|	НастройкиЗакрытияМесяцаСпособыРаспределения.Ссылка = &Ссылка
	|	И (НастройкиЗакрытияМесяцаСпособыРаспределения.СпособРаспределения.ИспользоватьПростоеРаспределение
	|		ИЛИ НастройкиЗакрытияМесяцаСпособыРаспределения.СпособРаспределения.ТипБазыРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыБазРаспределения.Табличный)
	|		ИЛИ НастройкиЗакрытияМесяцаСпособыРаспределения.СпособРаспределения.ТипБазыРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыБазРаспределения.СКД)
	|		ИЛИ НастройкиЗакрытияМесяцаСпособыРаспределения.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка))";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает признак использования гибкой настройки способов распределения
// 
Функция ИспользоватьГибкуюНастройкуСпособовРаспределенияЗатрат() Экспорт
	
	Возврат глЗначениеПеременной("ИспользоватьГибкуюНастройкуСпособовРаспределенияЗатрат") 
		ИЛИ НЕ глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат");
	
КонецФункции

// Находит способы распределения, которые требуют использовать упрощенное распределение
//
// Параметры:
//   СпособыРаспределения - 
// 	  - массив элементов справочника СпособыРаспределенияЗатратНаВыпуск, 
//      среди которых нужно отобрать способы, требующие использовать
//      упрощенное распределение
//    - Неопределено, если следует найти все такие способы
//
// Возвращаемое значение:
//  массив элементов справочника СпособыРаспределенияЗатратНаВыпуск
//
Функция СпособыТребующиеИспользоватьПростоеРаспределение(СпособыРаспределения = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпособыРаспределения.Ссылка
	|ИЗ
	|	Справочник.СпособыРаспределенияЗатратНаВыпуск КАК СпособыРаспределения
	|ГДЕ
	|	(СпособыРаспределения.ИспользоватьПростоеРаспределение
	|		ИЛИ СпособыРаспределения.ТипБазыРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыБазРаспределения.Табличный)
	|		ИЛИ СпособыРаспределения.ТипБазыРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыБазРаспределения.СКД))
	|	И (&ОтборНеТребуется
	|		ИЛИ СпособыРаспределения.Ссылка В (&СпособыРаспределения))";
	
	Запрос.УстановитьПараметр("СпособыРаспределения", СпособыРаспределения);
	Запрос.УстановитьПараметр("ОтборНеТребуется",     СпособыРаспределения = Неопределено);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Заменяет в тексте сообщения шаблоны на номера строк из массива номеров
// Используется для формирования текста сообщения при проверки 
// корректности заполнения способов распределения и настроек закрытия месяца
//
// Параметры: 
//  ТекстСообщения - строка, содержащая текст сообщения с шаблонами %Строках и %НомераСтрок
//  МассивНомеров  - массив номеров строк
//
// Возвращаемое значение:
//	Измененный параметр ТекстСообщения
//
Процедура ДобавитьВТекстСообщенияНомераСтрок(ТекстСообщения, МассивНомеров) Экспорт
	
	ТекстСообщения = СтрЗаменить(
		ТекстСообщения,
		"%Строках",
		?(МассивНомеров.Количество() = 1,
			"строке",
			"строках"));
	ТекстСообщения = СтрЗаменить(
		ТекстСообщения,
		"%НомераСтрок",
		СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивНомеров));
	
КонецПроцедуры

