
// Показывает пользователю диалог подтверждения выхода из программы.
// Параметры:
//  Отказ - (булево) устанавливается в процедуре, как Истина
//                   если пользователь отказлся от закрытия программы
// Возвращаемое значение
//  Истина - пользователь отказался от закрытия программы
//  Ложь - пользователь решил закрыть программу, или диалог закрытия не вызывался
//
Функция ВопросПользователюПередЗавершениемРаботыСистемы(Отказ) Экспорт
	
	ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Не СтандартныеПодсистемыВызовСервера.ЗагрузитьНастройкуПодтвержденияПриЗавершенииПрограммы();
	Если ПропуститьПредупреждениеПередЗавершениемРаботыСистемы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	БольшеНеЗадаватьЭтотВопрос = Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЗапрашиватьПодтверждениеПриЗавершенииПрограммы;
	Если БольшеНеЗадаватьЭтотВопрос Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("КодВозвратаДиалога.Да",	НСтр("ru = 'Завершить'"));
	Кнопки.Добавить("КодВозвратаДиалога.Нет",	НСтр("ru = 'Не завершать'"));
	
	Результат = ВопросПользователю(НСтр("ru = 'Завершить работу с программой?'"), Кнопки, , КодВозвратаДиалога.Да, "Завершение работы", 
		КодВозвратаДиалога.Нет, БольшеНеЗадаватьЭтотВопрос);
	Если БольшеНеЗадаватьЭтотВопрос Тогда
		СтандартныеПодсистемыВызовСервера.СохранитьНастройкуПодтвержденияПриЗавершенииПрограммы(НЕ БольшеНеЗадаватьЭтотВопрос);
	КонецЕсли;
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

// Проверяет минимально допустимую версию платформы для запуска.
// Если версия платформы более поздняя, чем РекомендуемаяВерсияПлатформы, то пользователю будет 
// показано оповещение. Работа программы будет прекращена, если ЗавершитьРаботу = Истина.
//
// Параметры
//  РекомендуемаяВерсияПлатформы - Строка - версия платформы рекомендуемая для работы
//  РаботаВПрограммеЗапрещена    - Булево - если Истина и текущая версия платформы меньше рекомендуемой, 
//                                          то продолжение работы в программе невозможно.
//
// Возвращаемое значение
//  Булево - Истина, если версия платформы подходит для работы
//
Функция ПроверитьВерсиюПлатформы(знач РекомендуемаяВерсияПлатформы, знач РаботаВПрограммеЗапрещена = Ложь) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если СтроковыеФункцииКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, РекомендуемаяВерсияПлатформы) >= 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстСообщения = 
		НСтр("ru='Для работы с конфигурацией требуется версия платформы 1С:Предприятие %1 или более поздняя.
		         |Используемая сейчас версия: %2.
		         |
				 |'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения, РекомендуемаяВерсияПлатформы, СистемнаяИнформация.ВерсияПриложения);
	
	Если РаботаВПрограммеЗапрещена Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru='Продолжение невозможно, работа программы будет завершена.'");
	Иначе
		ТекстСообщения = ТекстСообщения +
			НСтр("ru='Рекомендуется прекратить работу программы и обновить версию платформы 1С:Предприятие.
		         |В противном случае некоторые возможности программы будут недоступны или будут работать некорректно.
				 |
		         |Прекратить работу программы?'");
	КонецЕсли;
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстСообщения", ТекстСообщения);
	Параметры.Вставить("ЗавершитьРаботу", РаботаВПрограммеЗапрещена);
	Результат = ОткрытьФормуМодально("ОбщаяФорма.НерекомендуемаяВерсияПлатформы", Параметры);
	Если РаботаВПрограммеЗапрещена Тогда
		ПрекратитьРаботуСистемы();
		Возврат Ложь;
	ИначеЕсли Результат = КодВозвратаДиалога.OK Тогда
		ПрекратитьРаботуСистемы();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Устанавливает заголовок главного окна приложения, используя представление текущего пользователя,
// значение константы ЗаголовокПриложения и заголовок приложения по умолчанию.
//
Процедура УстановитьПроизвольныйЗаголовокПриложения() Экспорт
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	ПредставлениеЗаголовка 		= СокрЛП(ПараметрыКлиента.ЗаголовокПриложения);
	ПредставлениеПользователя 	= СокрЛП(ПараметрыКлиента.АвторизованныйПользователь);
	ПредставлениеКонфигурации 	= СокрЛП(ПараметрыКлиента.СинонимКонфигурации);
	
	ШаблонЗаголовка = "%1 / %2 / ";
	Если ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
		ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
			ПараметрыКлиента.ПодробнаяИнформация, ПредставлениеПользователя);
	Иначе
		ШаблонЗаголовка = ШаблонЗаголовка+ " %3 / ";
		ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
			СокрЛП(ПредставлениеЗаголовка), ПредставлениеПользователя, ПредставлениеКонфигурации);
	КонецЕсли;
	
	УстановитьЗаголовокПриложения(ЗаголовокПриложения);
	
КонецПроцедуры

// Вызывает форму вопроса.
//
// Параметры:
//  ТекстСообщения - строка - текст вопроса для пользователя
//  Кнопки - РежимДиалогаВопрос; СписокЗначений. 
//           Задает состав и текст кнопок диалога, а также, связанные с кнопками значения.
//           При использовании типа СписокЗначений:
//           Значение – содержит значение, связанное с кнопкой. Это значение является возвращаемым значением при выборе кнопки.
//           В качестве значения может использоваться значение перечисления КодВозвратаДиалога, а также другие значения;
//           Примечание: значение должно поддерживать XDTO сериализацию.
//           Представление – задает текст кнопки.
//  Таймаут - значение таймаута в секундах, по истечению этого времени функцию вернет значение КодВозвратаДиалога.Таймаут
//
// Возвращаемое значение:
//  КодВозвратаДиалога
//
Функция ВопросПользователю(ТекстСообщения, Кнопки, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = "", 
	КнопкаТаймаута = Неопределено, БольшеНеЗадаватьЭтотВопрос = Ложь) Экспорт
	
	БольшеНеЗадаватьЭтотВопрос = Ложь;
	
	Параметры = Новый Структура;
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;
	
	Если ТипЗнч(КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		КнопкаПоУмолчаниюПараметр = "КодВозвратаДиалога." + Строка(КнопкаПоУмолчанию);
	Иначе
		КнопкаПоУмолчаниюПараметр = КнопкаПоУмолчанию;
	КонецЕсли;
	
	Если ТипЗнч(КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		КнопкаТаймаутаПараметр = "КодВозвратаДиалога." + Строка(КнопкаТаймаута);
	Иначе
		КнопкаТаймаутаПараметр = КнопкаТаймаута;
	КонецЕсли;
	
	Параметры.Вставить("Кнопки",            КнопкиПараметр);
	Параметры.Вставить("Таймаут",           Таймаут);
	Параметры.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчаниюПараметр);
	Параметры.Вставить("Заголовок",         Заголовок);
	Параметры.Вставить("КнопкаТаймаута",    КнопкаТаймаутаПараметр);
	Параметры.Вставить("ТекстСообщения",    ТекстСообщения);
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.Вопрос", Параметры);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		БольшеНеЗадаватьЭтотВопрос = Результат.БольшеНеЗадаватьЭтотВопрос;
		Возврат Результат.Значение;
	Иначе
		Возврат КодВозвратаДиалога.Отмена;
	КонецЕсли;
	
КонецФункции


// ЗАВЕРШЕНИЕ РАБОТЫ СИСТЕМЫ
//

// Выводит форму сообщений пользователю при закрытии программы,
// либо выводит сообщение.
//
Процедура ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Отказ) Экспорт
	Предупреждения = Новый Массив;
	СтандартныеПодсистемыКлиентПереопределяемый.ПолучитьСписокПредупреждений(Предупреждения);
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("Предупреждения", Предупреждения);
	
	ИмяФормы = "ОбщаяФорма.ПредупрежденияПриЗавершенииРаботы";
	
	Если Предупреждения.Количество() = 0 Тогда
		Если ВопросПользователюПередЗавершениемРаботыСистемы(Отказ) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Предупреждения.Количество() = 1 Тогда
		Отказ = ОткрытьПрикладнуюФормуПредупреждения(Предупреждения.Получить(0), ИмяФормы, ПараметрыПередачи);
	ИначеЕсли Предупреждения.Количество() > 1 Тогда	
		Отказ = ОткрытьФормуМодально(ИмяФормы, ПараметрыПередачи);
	КонецЕсли;	
КонецПроцедуры	

// Формирует отображение одного вопроса.
//
//	Если вопрос - гиперссылка - то открыватеся "ФормаИндивидуальногоОткрытия" из Структуры вопроса.
//	Если вопрос - флажок - то открывается форма "ОбщаяФорма.ВопросПередЗавершениемРаботыСистемы".
//
// Параметры:
//	СтруктураВопроса - структура передаваемого вопроса.
//	ИмяФормы - имя общей формы с вопросамию
//	ПараметрыПередачи - параметры для формы с вопросами.
//
// Возвращаемое значение:
//	Отказ - булева переменная.
//
Функция ОткрытьПрикладнуюФормуПредупреждения(ПредупреждениеПользователю, ИмяФормы, ПараметрыПередачи)
	Отказ = Ложь;
	
	ТекстФлажка = "";
	Если ПредупреждениеПользователю.Свойство("ТекстФлажка", ТекстФлажка) Тогда 
		Если Не ПустаяСтрока(ТекстФлажка) Тогда 
			Отказ = ОткрытьФормуМодально(ИмяФормы, ПараметрыПередачи);
		КонецЕсли;
			
		Возврат Отказ;
	КонецЕсли;	
	
	ТекстГиперссылки = "";
	Если ПредупреждениеПользователю.Свойство("ТекстГиперссылки", ТекстГиперссылки) Тогда 
		Если Не ПустаяСтрока(ТекстГиперссылки) Тогда 
			ДействиеПриНажатииГипперссылки = Неопределено;
			Если ПредупреждениеПользователю.Свойство("ДействиеПриНажатииГипперссылки", ДействиеПриНажатииГипперссылки) Тогда 
				ДействиеГипперссылка = ПредупреждениеПользователю.ДействиеПриНажатииГипперссылки;
				Форма = Неопределено;
				Если ДействиеГипперссылка.Свойство("ПрикладнаяФормаПредупреждения", Форма) Тогда 
					ПараметрыФормы = Неопределено;
					Если ДействиеГипперссылка.Свойство("ПараметрыПрикладнойФормыПредупреждения", ПараметрыФормы) Тогда
						Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда 
							ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
						ИначеЕсли ПараметрыФормы = Неопределено Тогда 
							ПараметрыФормы = Новый Структура;
							ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
						КонецЕсли;
						
						ПараметрыФормы.Вставить("ЗаголовокКнопкиДа",	"Завершить");
						ПараметрыФормы.Вставить("ЗаголовокКнопкиНет",	"Не завершать");
						
					КонецЕсли;
					Ответ = ОткрытьФормуМодально(Форма, ПараметрыФормы);
					Отказ = ОпределитьОтветФормы(Ответ);
					
					Возврат Отказ;
				ИначеЕсли ДействиеГипперссылка.Свойство("Форма", Форма) Тогда 
					ПараметрыФормы = Неопределено;
					Если ДействиеГипперссылка.Свойство("ПараметрыФормы", ПараметрыФормы) Тогда
						Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда 
							ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
						ИначеЕсли ПараметрыФормы = Неопределено Тогда 
							ПараметрыФормы = Новый Структура;
							ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
						КонецЕсли;
					КонецЕсли;
					Ответ = ОткрытьФормуМодально(Форма, ПараметрыФормы);
					Отказ = ОпределитьОтветФормы(Ответ);
					
					Возврат Отказ;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
			
		Возврат Отказ;
	КонецЕсли;	
	
	Возврат Отказ;
КонецФункции

// Определеяет отказ по ответу формы.
//
// Параметры:
//	Ответ - ответ формы.
//
Функция ОпределитьОтветФормы(Ответ)
	Возврат Ответ = Неопределено Или Ответ = КодВозвратаДиалога.Нет Или Ответ = Истина;
КонецФункции	

