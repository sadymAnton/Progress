///////// ПРОЦЕДУРЫ ВЫЗОВА ГЕНЕРАТОРА ОТЧЕТОВ
Процедура ОткрытьГенераторОтчетовПЭО() Экспорт
	Фрм = Отчеты.isГенераторОтчетов.ПолучитьФорму(,,"ГенераторОтчетовПЭО");
	Фрм.мРежимРаботы = 0;
	Фрм.Открыть();
КонецПроцедуры

Процедура ОткрытьГенераторОтчетовGAAP()  Экспорт
	Фрм = Отчеты.isГенераторОтчетов.ПолучитьФорму(,,"ГенераторОтчетовGAAP");
	Фрм.мРежимРаботы = 1;
	Фрм.Открыть();
КонецПроцедуры


///////// ПРОЦЕДУРЫ СТАНДАРТНЫХ ОТЧЕТОВ GAAP
Процедура ПриВыводеСтрокиОтбор(ИмяОтбора, ТЧ, ОформлениеСтроки, ДанныеСтроки) Экспорт
	ТекСтр = ТЧ.Найти(ДанныеСтроки.НомерСтроки,"НомерСтроки");	
	СтандартнаяОбработка = Ложь;
	Если ТекСтр.ТипСтроки <> 0 Тогда
		Возврат;	
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтр.Источник) ИЛИ ТекСтр.Источник.Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаИсточника = ТекСтр.Источник.Источники[0];
	ПризнакКорсчета = Найти(ИмяОтбора,"Кор") <> 0; 
	Счет = ?(ПризнакКорСчета , СтрокаИсточника.КорСчет, СтрокаИсточника.Счет); 
	Если ЗначениеЗаполнено(Счет) Тогда
		лПостроительОтчета = isСтандартныеОтчеты.СоздатьПостроительОтчета(ТекСтр.ВидИсточника.РегистрБухгалтерии, Счет,
					СтрокаИсточника.Ресурс, ТекСтр[ИмяОтбора], ПризнакКорСчета);
		ОформлениеСтроки.Ячейки[ИмяОтбора].УстановитьТекст(лПостроительОтчета.Отбор);
	КонецЕсли;
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПриИзменении(ФормаОтчета, ИмяЭлемента, Отказ, Изменение = Ложь) Экспорт
	
	Элемент = ФормаОтчета.ЭлементыФормы[ИмяЭлемента];
	
	Если Изменение Тогда
		Если Элемент.ТекущаяКолонка.Имя = "Счет" Тогда 
			Отказ = Истина;
			
			ТекущаяСтрока = Элемент.ТекущаяСтрока;
			ВыбранноеЗначение = ВыбратьСчет(ИмяЭлемента, ТекущаяСтрока.Счет);
			Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
				ТекущаяСтрока.Счет = ВыбранноеЗначение;
				КолонкаСчетПриИзменении(Элемент); // СтандартныеОтчеты.КолонкаСчетПриИзменении
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Отказ = Истина;
		
		ВыбранноеЗначение = ВыбратьСчет(ИмяЭлемента);
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			НоваяСтрока = ФормаОтчета[ИмяЭлемента].Добавить();
			НоваяСтрока.Счет          = ВыбранноеЗначение;
			НоваяСтрока.Использование = Истина;
			Элемент.ТекущаяСтрока = НоваяСтрока;	
			
			КолонкаСчетПриИзменении(Элемент); // СтандартныеОтчеты.КолонкаСчетПриИзменении
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьСчет(Тип = "Группировка", НачальноеЗначениеВыбора = Неопределено) Экспорт
	
	ФормаВыбораСчета = ПланыСчетов.Международный.ПолучитьФормуВыбора();
	
	Если ЗначениеЗаполнено(НачальноеЗначениеВыбора) Тогда
		ФормаВыбораСчета.НачальноеЗначениеВыбора = НачальноеЗначениеВыбора;
	КонецЕсли;
	
	// Исключим детальные счета, по которым не ведется учет по субконто
	Если Найти(Тип, "Группировка") = 1 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Международный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Международный КАК Международный
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК МеждународныйВидыСубконто
		|		ПО Международный.Ссылка = МеждународныйВидыСубконто.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Международный.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МеждународныйВидыСубконто.ВидСубконто) = 0";
		
		СписокСчетов = Новый СписокЗначений;
		Списоксчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
		ФормаВыбораСчета.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
		ФормаВыбораСчета.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
		ФормаВыбораСчета.ПланСчетовСписок.Отбор.Ссылка.Значение = СписокСчетов;
		
		// выбор из активно-пассивных счетов
	ИначеЕсли Найти(Тип, "РазвернутоеСальдо") = 1 Тогда
		ФормаВыбораСчета.ПланСчетовСписок.Отбор.Вид.Установить(ВидСчета.АктивноПассивный);	
	КонецЕсли;
	
	//ФормаВыбораСчета.ПланСчетовСписок.Порядок.Очистить();
	//ФормаВыбораСчета.ПланСчетовСписок.Порядок.Установить("КодБыстрогоВыбора Возр");
	
	Возврат ФормаВыбораСчета.ОткрытьМодально();
	
КонецФункции

///////// ПРОЦЕДУРЫ ГЕНЕРАТОРА ОТЧЕТОВ ПЭО
Процедура ЗаполнитьСписокВыбораСтраниц(СписокВыбора,Настройка) Экспорт
	СписокВыбора.Очистить();
	Для каждого ТекСтр Из Настройка.Макеты Цикл
		СписокВыбора.Добавить(ТекСтр.НомерСтраницы,ТекСтр.Имя);
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораВидаПериода(СписокВыбора) Экспорт
	СписокВыбора.Добавить(0, "Текущий");
	СписокВыбора.Добавить(1, "Предыдущий");
	СписокВыбора.Добавить(2, "Прошлого года");
	СписокВыбора.Добавить(3, "С начала года");
	СписокВыбора.Добавить(4, "С начала пред. года");
	СписокВыбора.Добавить(5, "По начало текущего периода");
	СписокВыбора.Добавить(6, "По начало текущего года");
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораСпособаРасчетаИтоговойКолонки(СписокВыбора) Экспорт
	СписокВыбора.Добавить(0, "Итог по колонкам");
	СписокВыбора.Добавить(1, "Итог по строкам нижнего уровня");
	СписокВыбора.Добавить(2, "Итог за период отчета");
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораПараметровОтчета(СписокВыбора) Экспорт
	СписокВыбора.Добавить(0,"Дата формирования отчета");
	СписокВыбора.Добавить(1,"Период отчета");
	//СписокВыбора.Добавить(2,"Периодичность отчета");
	СписокВыбора.Добавить(3,"Дата начала периода");
	СписокВыбора.Добавить(4,"Дата окончания периода");
	СписокВыбора.Добавить(5,"Организация");
	СписокВыбора.Добавить(6,"Валюта отчета");
	СписокВыбора.Добавить(7,"Единица измерения");
КонецПроцедуры

Функция ПолучитьДеревоСтрокОтчета(Настройка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Строки.Ссылка КАК Строка,
	|	Строки.Номер КАК Номер,
	|	Строки.Родитель КАК Батя,
	|	ВЫБОР
	|		КОГДА Строки.Владелец.ДинамическиеСтроки
	|			ТОГДА Строки.КоличествоГруппировокВСтроке
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоГруппировок,
	|	Строки.НеВыводитьПустыеГруппировки1,
	|	Строки.НеВыводитьПустыеГруппировки2,
	|	Строки.НеВыводитьПустыеГруппировки3
	|ИЗ
	|	Справочник.isСтрокиОтчетовПЭО КАК Строки
	|ГДЕ
	|	Строки.Владелец = &Настройка
	|	И НЕ Строки.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер
	|ИТОГИ ПО
	|	Строка ТОЛЬКО ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Настройка",Настройка );
	Результат = Запрос.Выполнить();
	ДеревоСтрок= Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);  
	ДеревоСтрок.Строки.Очистить();
	ДеревоСтрок.Колонки.Добавить("Уровень",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(2,0));
	ДеревоСтрок.Колонки.Добавить("ДинамическаяСтрока",Новый ОписаниеТипов("Булево"));
	ДеревоСтрок.Колонки.Добавить("ИзмерениеДинамическойСтроки");
	Если Настройка.ВидНастройки = 0 И Настройка.ДинамическиеСтроки Тогда
		ДеревоСтрок.Колонки.Добавить("НомерГруппировки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1,0));
	КонецЕсли;
	Табл = Результат.Выгрузить();
	Для каждого Выборка Из Табл Цикл
		Если НайтиСтрокуДерева(Выборка.Строка,ДеревоСтрок.Строки)<>Неопределено ИЛИ
			НЕ ЗначениеЗаполнено(Выборка.Строка) Тогда
			Продолжить;
		КонецЕсли;	

		Батя=НайтиСтрокуДерева(Выборка.Батя,ДеревоСтрок.Строки);
		Если Батя=Неопределено Тогда
			Строки=ДеревоСтрок.Строки;
			Уровень=1;
		Иначе
			Строки=Батя.Строки;		
			Уровень=Батя.Уровень+1;
		КонецЕсли;
		Строка=Строки.Добавить();
		ЗаполнитьЗначенияСвойств(Строка,Выборка);
		Строка.Уровень=Уровень;
	КонецЦикла;
	Возврат ДеревоСтрок;
КонецФункции // ()

Функция НайтиСтрокуДерева(Строка,Строки) Экспорт
	Для каждого ТекСтр Из Строки Цикл
		Если ТекСтр.Строка=Строка Тогда
		    Возврат ТекСтр;
		Иначе
			Результат = НайтиСтрокуДерева(Строка,ТекСтр.Строки);
			Если Результат<>Неопределено Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;

КонецФункции // НайтиСтрокуДерева()

//// процедуры форм строки отчета и выражения (в части сумматора)
Процедура СумматорВидИсточникаПриИзменении(Источник, Элемент)  Экспорт
	Если ЗначениеЗаполнено(Источник) И Источник.Владелец <> Элемент.Значение Тогда
		Источник = Справочники.isИсточникиОтчетовПЭО.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

Процедура СумматорНачалоВыбораИсточника(Владелец, ТекСтр, Элемент, СтандартнаяОбработка, КоличествоГруппировокСтроки)  Экспорт
	ОбновитьТипИсточник(ТекСтр.ТипСтроки,ТекСтр.ВидИсточника, ТекСтр.Источник);

	Если ТекСтр.ТипСтроки = 0 Тогда
		ВыбратьЭлементСправочника(Элемент,Новый Структура("Владелец",ТекСтр.ВидИсточника), СтандартнаяОбработка); // isДоработкиКлиент.ВыбратьЭлементСправочника
	ИначеЕсли ТекСтр.ТипСтроки = 1 Тогда
		ВидДанных = ?(Владелец.ВидНастройки = 0, 0, 1);
		ВыбратьЭлементСправочника(Элемент,Новый Структура("Владелец, НомерСтраницы, ВидДанных",Владелец, ТекСтр.НомерСтраницы, ВидДанных),СтандартнаяОбработка); // isДоработкиКлиент.ВыбратьЭлементСправочника
	Иначе
		СтруктураОтбора = Новый Структура("Владелец",Владелец);
		//Если ТипЗнч(ТекСтр) = Тип("СправочникТабличнаяЧастьСтрока.isСтрокиОтчетовПЭО.Источники") 
		//	И КоличествоГруппировокСтроки > 0 Тогда
		//Если КоличествоГруппировокСтроки > 0 Тогда
		//	СтруктураОтбора.Вставить("ВидВыражения",0);
		//КонецЕсли;
		ВыбратьЭлементСправочника(Элемент,СтруктураОтбора,СтандартнаяОбработка); // isДоработкиКлиент.ВыбратьЭлементСправочника
	КонецЕсли;
КонецПроцедуры

Процедура СумматорПриНачалеРедактированияСтроки(Владелец, Элемент, НоваяСтрока, Копирование) Экспорт
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекСтр=Элемент.ТекущаяСтрока;	
		ТекСтр.Коэффициент 	= 1;
		ТекСтр.ВидИсточника = Владелец.ВидИсточника;
	КонецЕсли;
КонецПроцедуры

//Процедура СумматорПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, Настройка) Экспорт
Процедура СумматорПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, Владелец, Объект) Экспорт
	УстановитьТекстИзСпискаВыбора(ОформлениеСтроки.Ячейки.ТипСтроки,Элемент,ДанныеСтроки); // isДоработкиКлиент.УстановитьТекстИзСпискаВыбора
	УстановитьТекстИзСпискаВыбора(ОформлениеСтроки.Ячейки.НомерСтраницы,Элемент,ДанныеСтроки); // isДоработкиКлиент.УстановитьТекстИзСпискаВыбора
	ОформлениеСтроки.Ячейки.ВидИсточника.Видимость 	= ДанныеСтроки.ТипСтроки = 0;
	ОформлениеСтроки.Ячейки.НомерСтраницы.Видимость = ДанныеСтроки.ТипСтроки = 1;
	Если ДанныеСтроки.ТипСтроки = 0 Тогда
		УстановитьТекстИзСпискаВыбора(ОформлениеСтроки.Ячейки.ВидОтбораПоПодразделению,Элемент,ДанныеСтроки); // isДоработкиКлиент.УстановитьТекстИзСпискаВыбора
	КонецЕсли;
	Если Владелец.ДинамическиеСтроки И ДанныеСтроки.ТипСтроки = 0 Тогда
		Если Объект.КоличествоГруппировокВСтроке > 0 Тогда
			isСтандартныеОтчеты.ПриВыводеСтрокиОтбор("ОтборПоСчету1", 		Объект.Источники, ОформлениеСтроки, ДанныеСтроки);	
			isСтандартныеОтчеты.ПриВыводеСтрокиОтбор("ОтборПоКорСчету1", 	Объект.Источники, ОформлениеСтроки, ДанныеСтроки);	
		КонецЕсли;
		Если Объект.КоличествоГруппировокВСтроке > 1 Тогда
			isСтандартныеОтчеты.ПриВыводеСтрокиОтбор("ОтборПоСчету2", 		Объект.Источники, ОформлениеСтроки, ДанныеСтроки);	
			isСтандартныеОтчеты.ПриВыводеСтрокиОтбор("ОтборПоКорСчету2", 	Объект.Источники, ОформлениеСтроки, ДанныеСтроки);	
		КонецЕсли;
		Если Объект.КоличествоГруппировокВСтроке > 2 Тогда
			isСтандартныеОтчеты.ПриВыводеСтрокиОтбор("ОтборПоСчету3", 		Объект.Источники, ОформлениеСтроки, ДанныеСтроки);	
			isСтандартныеОтчеты.ПриВыводеСтрокиОтбор("ОтборПоКорСчету3", 	Объект.Источники, ОформлениеСтроки, ДанныеСтроки);	
		КонецЕсли;
	КонецЕсли;
	НеВидимостьОтбора = ДанныеСтроки.ТипСтроки <> 0 
								ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Источник)
								ИЛИ ДанныеСтроки.Источник.Источники.Количество()=0 
								ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Источник.Источники[0].КорСчет);
	ОформлениеСтроки.Ячейки.ОтборПоКорСчету1.Видимость = НЕ НеВидимостьОтбора;
	ОформлениеСтроки.Ячейки.ОтборПоКорСчету2.Видимость = НЕ НеВидимостьОтбора;
	ОформлениеСтроки.Ячейки.ОтборПоКорСчету3.Видимость = НЕ НеВидимостьОтбора;
	
	НеВидимостьОтбора = ДанныеСтроки.ТипСтроки <> 0;
	ОформлениеСтроки.Ячейки.ОтборПоСчету1.Видимость = НЕ НеВидимостьОтбора;
	ОформлениеСтроки.Ячейки.ОтборПоСчету2.Видимость = НЕ НеВидимостьОтбора;
	ОформлениеСтроки.Ячейки.ОтборПоСчету3.Видимость = НЕ НеВидимостьОтбора;
	ОформлениеСтроки.Ячейки.НомерСубконто1.Видимость = НЕ НеВидимостьОтбора;
	ОформлениеСтроки.Ячейки.НомерСубконто2.Видимость = НЕ НеВидимостьОтбора;
	ОформлениеСтроки.Ячейки.НомерСубконто3.Видимость = НЕ НеВидимостьОтбора;
	ОформлениеСтроки.Ячейки.НомерСубконто1.ТолькоПросмотр = НеВидимостьОтбора;
	ОформлениеСтроки.Ячейки.НомерСубконто2.ТолькоПросмотр = НеВидимостьОтбора;
	ОформлениеСтроки.Ячейки.НомерСубконто3.ТолькоПросмотр = НеВидимостьОтбора;
КонецПроцедуры

Процедура ОбновитьТипИсточник(ТипСтроки,ВидИсточника,Источник) Экспорт
	Если ТипСтроки=0 Тогда
		ОП=Новый ОписаниеТипов("СправочникСсылка.isИсточникиОтчетовПЭО");	
		Источник=ОП.ПривестиЗначение(Источник);
		Если ЗначениеЗаполнено(Источник) И Источник.Владелец <> ВидИсточника Тогда
			Источник = "";
		КонецЕсли;
	ИначеЕсли ТипСтроки=1 Тогда
		ОП=Новый ОписаниеТипов("СправочникСсылка.isСтрокиОтчетовПЭО");	
		Источник=ОП.ПривестиЗначение(Источник);
	ИначеЕсли ТипСтроки=2 Тогда
		ОП=Новый ОписаниеТипов("СправочникСсылка.isВыраженияОтчетовПЭО");	
		Источник=ОП.ПривестиЗначение(Источник);
	ИначеЕсли ТипСтроки=3 Тогда
		ОП=Новый ОписаниеТипов("СправочникСсылка.isПараметрыОтчетовПЭО");	
		Источник=ОП.ПривестиЗначение(Источник);
	КонецЕсли;
КонецПроцедуры

Функция ЕстьИзмерениеОрганизация(ИмяРегистра) Экспорт

	Возврат Метаданные.РегистрыНакопления[ИмяРегистра].Измерения.Найти("Организация") <> Неопределено;

КонецФункции // ()

Функция ПолучитьСписокИменМакета(Макет, ТипОбласти = Неопределено) Экспорт
	ТО = ?(ТипОбласти = Неопределено, ТипОбластиЯчеекТабличногоДокумента.Строки, ТипОбласти);
	Результат = Новый СписокЗначений;
	Для каждого ТекИмя Из Макет.Области Цикл
		Если ТекИмя.ТипОбласти = ТО Тогда
			Результат.Добавить(ТекИмя.Имя);
		КонецЕсли;
		
	КонецЦикла;
	Возврат Результат;
КонецФункции // ()

Функция ПолучитьМассивМакетовОбычныхСекцийСтраницыНастройки(Настройка, Макет) Экспорт
	Результат = Новый Массив;
	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	Результат.Добавить(Макет);
	Возврат Результат;	
	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	
	Если Настройка.ВидНастройки = 1 Тогда
		Результат.Добавить(Макет);
		Возврат Результат;	
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Настройка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	isСекцииОтчетов.ИмяСекции
	|ИЗ
	|	Справочник.isСекцииОтчетов КАК isСекцииОтчетов
	|ГДЕ
	|	isСекцииОтчетов.Владелец = &Владелец
	|	И НЕ isСекцииОтчетов.ПометкаУдаления
	|	И isСекцииОтчетов.ВидСекции = 0";
	ТаблицаОбычныхСекций = Запрос.Выполнить().Выгрузить();
	Для каждого ТекИмя Из Макет.Области Цикл
		Если ТекИмя.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки 
			И ТаблицаОбычныхСекций.Найти(ТекИмя.Имя,"ИмяСекции") <> Неопределено Тогда
			НовыйМакет = Новый ТабличныйДокумент;
			НовыйМакет.ВставитьОбласть(ТекИмя,,,Ложь);
			Результат.Добавить(НовыйМакет);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции // ()

Функция ПолучитьМакетИзМакета(ИмяОбласти, Макет) Экспорт
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	Область = Макет.Области.Найти(ИмяОбласти);
	Если Область = Неопределено Тогда
		Возврат Неопределено;	
	Иначе
		Возврат Макет.ПолучитьОбласть(ИмяОбласти);
	КонецЕсли;
	// пример тупизма по причине переутомления
	//НовыйМакет = Новый ТабличныйДокумент;
	//НовыйМакет.ВставитьОбласть(Область,,,Ложь);
	//Возврат НовыйМакет;
КонецФункции // ()

Процедура Инк(Что,НаСколько=Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Что) И НаСколько<>Неопределено Тогда
		Что=НаСколько;
	Иначе	
		Если ТипЗнч(Что)=Тип("Строка") Тогда
			Если НаСколько=Неопределено Тогда
				Сч=1;
				Индекс="";
		    Пока Сч<=СтрДлина(Что) Цикл
		    	Попытка
						Инд=Число(Прав(Что,Сч));	
						Индекс=Инд;
					Исключение
						Прервать;
					КонецПопытки;
				КонецЦикла;
				Если Индекс="" Тогда
					Что=Что+"1";
				Иначе
					Что=Лев(Что,СтрДлина(Что)-СтрДлина(СокрЛП(Индекс)))+СокрЛП(Индекс+1);
				КонецЕсли;
			Иначе
			  Что=Что+СокрЛП(НаСколько);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Что)=Тип("Число") Тогда
		  Если НаСколько=Неопределено Тогда
				Что=Что+1;
			ИначеЕсли НаСколько<>Null Тогда
			  Что=Что+НаСколько;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Что)=Тип("Дата") Тогда
		  Если НаСколько=Неопределено Тогда
				Что=Что+ДобавитьДень(1);
			ИначеЕсли НаСколько<>Null Тогда
			  Что=Что+ДобавитьДень(НаСколько);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьДень(КолДней=1) Экспорт
	Возврат 86400*КолДней; 
КонецФункции // 

Процедура ЗаполнитьСписокВидамиИсточников(Список) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	isВидыИсточниковОтчетовПЭО.Ссылка
	|ИЗ
	|	Справочник.isВидыИсточниковОтчетовПЭО КАК isВидыИсточниковОтчетовПЭО
	|ГДЕ
	|	НЕ isВидыИсточниковОтчетовПЭО.ПометкаУдаления";
	
	Список.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
КонецПроцедуры

Процедура ЗаполнитьСписокВидамиОтбораПоПодразделению(Список) Экспорт
	Список.Очистить();
	Список.Добавить(0, "По счету");
	Список.Добавить(1, "По кор. счету");
	Список.Добавить(2, "По счету и кор. счету");
КонецПроцедуры

Процедура ЗаполнитьСписокВидамиСравненияОтбораПоПодразделению(Список) Экспорт
	Список.Очистить();
	Список.Добавить(ВидСравнения.Равно);
	Список.Добавить(ВидСравнения.НеРавно);
	Список.Добавить(ВидСравнения.ВСписке);
	Список.Добавить(ВидСравнения.НеВСписке);
	Список.Добавить(ВидСравнения.ВИерархии);
	Список.Добавить(ВидСравнения.НеВИерархии);
	Список.Добавить(ВидСравнения.ВСпискеПоИерархии);
	Список.Добавить(ВидСравнения.НеВСпискеПоИерархии);
КонецПроцедуры

Процедура ЗаполнитьСписокТиповИсточников(Список, ВидИсточников) Экспорт
	Список.Очистить();
	Если ВидИсточников.ТипРегистра = 0 Тогда
		Список.Добавить(3,"Начальный остаток");
		Список.Добавить(4,"Начальный остаток (кредитовый)");
		Список.Добавить(5,"Начальный остаток (дебетовый)");
		Список.Добавить(1,"Оборот по дебету");
		Список.Добавить(2,"Оборот по кредиту");
		Список.Добавить(0,"Конечный остаток");
		Список.Добавить(6,"Конечный остаток (кредитовый)");
		Список.Добавить(7,"Конечный остаток (дебетовый)");
	ИначеЕсли ЭтоРегистрНакопленияОборотный(ВидИсточников.РегистрБухгалтерии) Тогда
		Список.Добавить(0,"Оборот");
	Иначе
		Список.Добавить(1,"Начальный остаток");
		Список.Добавить(2,"Приход");
		Список.Добавить(3,"Расход");
		Список.Добавить(4,"Конечный остаток");
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьИмяФункцииИсточника(КодФункции, ВидИсточников) Экспорт
	Список = Новый СписокЗначений;
	ЗаполнитьСписокТиповИсточников(Список, ВидИсточников);
	СтрокаФункции = СПисок.НайтиПоЗначению(КодФункции);
	Возврат ?(СтрокаФункции = Неопределено, "", СтрокаФункции.Представление);
КонецФункции // ()

Функция ЭтоФункцияОстатка(КодФункции) Экспорт
	Возврат ЭтоОстаток(КодФункции);
КонецФункции // ()

Функция ПолучитьТаблицуСредневзвешенныхКурсов(Валюта, ДатаНачала, ДатаКонца, Периодичность ) Экспорт
	Запрос = Новый Запрос;
	СтрокаПериодичности = ПериодичностьДляЗапроса(Периодичность);
	ДатаНач = ПолучитьНачалоПериода(ДатаНачала,Периодичность);
	ДатаКон = ПолучитьКонецПериода(ДатаКонца,Периодичность);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКонца", 	ДатаКон);
	Запрос.УстановитьПараметр("ТаблицаПериодов", ПолучитьТаблицуПериодов(ДатаНачала,ДатаКонца,Периодичность));
	Запрос.УстановитьПараметр("Валюта", 	Валюта);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПериодов.Период,
	|	КОНЕЦПЕРИОДА(ТаблицаПериодов.Период, "+СтрокаПериодичности+") КАК КонецПериода
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Период1 КАК ПериодНач,
	|	ВложенныйЗапрос.Период2 КАК ПериодКон,
	|	ВложенныйЗапрос.Курс КАК Курс
	|ПОМЕСТИТЬ ТаблицаКурсов
	|ИЗ
	|	(ВЫБРАТЬ
	|		КурсыВалют1.Период КАК Период1,
	|		МИНИМУМ(ДОБАВИТЬКДАТЕ(КурсыВалют2.Период, СЕКУНДА, -1)) КАК Период2,
	|		КурсыВалют1.Курс * КурсыВалют1.Кратность КАК Курс
	|	ИЗ
	|		РегистрСведений.КурсыВалют КАК КурсыВалют2
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют1
	|			ПО КурсыВалют2.Период > КурсыВалют1.Период,
	|		РегистрСведений.КурсыВалют.СрезПоследних(ДОБАВИТЬКДАТЕ(&Датаначала, СЕКУНДА, -1), валюта = &валюта) КАК ПоследняяЗаписьПередДатойНачала
	|	ГДЕ
	|		КурсыВалют1.Валюта = &Валюта
	|		И КурсыВалют2.Валюта = &Валюта
	|		И (КурсыВалют1.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	|				ИЛИ КурсыВалют1.Период = ПоследняяЗаписьПередДатойНачала.Период)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КурсыВалют1.Курс * КурсыВалют1.Кратность,
	|		КурсыВалют1.Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КонецПериодаБольшеПоследнейЗаписи.Период,
	|		&ДатаКонца,
	|		КонецПериодаБольшеПоследнейЗаписи.Курс * КонецПериодаБольшеПоследнейЗаписи.Кратность
	|	ИЗ
	|		РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &Валюта) КАК КонецПериодаБольшеПоследнейЗаписи
	|	ГДЕ
	|		КонецПериодаБольшеПоследнейЗаписи.Период < &ДатаКонца
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ДатаНачала,
	|		ДОБАВИТЬКДАТЕ(НачалоПериодаМеньшаяПервойЗаписи.Период, СЕКУНДА, -1),
	|		НачалоПериодаМеньшаяПервойЗаписи.Курс * НачалоПериодаМеньшаяПервойЗаписи.Кратность
	|	ИЗ
	|		РегистрСведений.КурсыВалют.СрезПервых(, Валюта = &Валюта) КАК НачалоПериодаМеньшаяПервойЗаписи
	|	ГДЕ
	|		НачалоПериодаМеньшаяПервойЗаписи.Период > &ДатаНачала) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Курс / ВложенныйЗапрос.Дней КАК ЧИСЛО(10, 4)) КАК Курс
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Период КАК Период,
	|		СУММА(ВложенныйЗапрос.Дней) КАК Дней,
	|		СУММА(ВложенныйЗапрос.Курс) КАК Курс
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаПериодов.Период КАК Период,
	|			РАЗНОСТЬДАТ(ТаблицаКурсов.ПериодНач, ДОБАВИТЬКДАТЕ(ТаблицаКурсов.ПериодКон, СЕКУНДА, 1), ДЕНЬ) КАК Дней,
	|			ТаблицаКурсов.Курс * РАЗНОСТЬДАТ(ТаблицаКурсов.ПериодНач, ДОБАВИТЬКДАТЕ(ТаблицаКурсов.ПериодКон, СЕКУНДА, 1), ДЕНЬ) КАК Курс
	|		ИЗ
	|			ТаблицаКурсов КАК ТаблицаКурсов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|				ПО (ТаблицаКурсов.ПериодНач МЕЖДУ ТаблицаПериодов.Период И ТаблицаПериодов.КонецПериода)
	|					И (ТаблицаКурсов.ПериодКон МЕЖДУ ТаблицаПериодов.Период И ТаблицаПериодов.КонецПериода)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаПериодов.Период,
	|			РАЗНОСТЬДАТ(ТаблицаКурсов.ПериодНач, ДОБАВИТЬКДАТЕ(ТаблицаПериодов.КонецПериода, СЕКУНДА, 1), ДЕНЬ),
	|			ТаблицаКурсов.Курс * РАЗНОСТЬДАТ(ТаблицаКурсов.ПериодНач, ДОБАВИТЬКДАТЕ(ТаблицаПериодов.КонецПериода, СЕКУНДА, 1), ДЕНЬ)
	|		ИЗ
	|			ТаблицаКурсов КАК ТаблицаКурсов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|				ПО (ТаблицаКурсов.ПериодНач МЕЖДУ ТаблицаПериодов.Период И ТаблицаПериодов.КонецПериода)
	|					И ((НЕ(ТаблицаКурсов.ПериодКон МЕЖДУ ТаблицаПериодов.Период И ТаблицаПериодов.КонецПериода)))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаПериодов.Период,
	|			РАЗНОСТЬДАТ(ТаблицаПериодов.Период, ДОБАВИТЬКДАТЕ(ТаблицаКурсов.ПериодКон, СЕКУНДА, 1), ДЕНЬ),
	|			ТаблицаКурсов.Курс * РАЗНОСТЬДАТ(ТаблицаПериодов.Период, ДОБАВИТЬКДАТЕ(ТаблицаКурсов.ПериодКон, СЕКУНДА, 1), ДЕНЬ)
	|		ИЗ
	|			ТаблицаКурсов КАК ТаблицаКурсов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|				ПО (ТаблицаКурсов.ПериодКон МЕЖДУ ТаблицаПериодов.Период И ТаблицаПериодов.КонецПериода)
	|					И ((НЕ(ТаблицаКурсов.ПериодНач МЕЖДУ ТаблицаПериодов.Период И ТаблицаПериодов.КонецПериода)))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаПериодов.Период,
	|			РАЗНОСТЬДАТ(ТаблицаПериодов.Период, ДОБАВИТЬКДАТЕ(ТаблицаПериодов.КонецПериода, СЕКУНДА, 1), ДЕНЬ),
	|			ТаблицаКурсов.Курс * РАЗНОСТЬДАТ(ТаблицаПериодов.Период, ДОБАВИТЬКДАТЕ(ТаблицаПериодов.КонецПериода, СЕКУНДА, 1), ДЕНЬ)
	|		ИЗ
	|			ТаблицаКурсов КАК ТаблицаКурсов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|				ПО (ТаблицаПериодов.КонецПериода < ТаблицаКурсов.ПериодКон
	|						И ТаблицаПериодов.Период > ТаблицаКурсов.ПериодНач
	|						И ТаблицаПериодов.КонецПериода > ТаблицаКурсов.ПериодНач
	|						И ТаблицаПериодов.Период < ТаблицаКурсов.ПериодКон)) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Период) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Возврат Запрос.Выполнить().Выгрузить();	
	

КонецФункции // ()

Функция ПолучитьСредневзвешенныйКурсВалюты(Валюта, ДатаНачала, ДатаКонца) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Валюта", 	Валюта);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца", 	ДатаКонца);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Дней * ВложенныйЗапрос.Курс КАК Курс,
	|	ВложенныйЗапрос.Дней КАК Дней
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(РАЗНОСТЬДАТ(ВложенныйЗапрос.Период1, ВложенныйЗапрос.Период2, ДЕНЬ)) КАК Дней,
	|		ВложенныйЗапрос.Курс КАК Курс
	|	ИЗ
	|		(ВЫБРАТЬ
	|			КурсыВалют1.Период КАК Период1,
	|			МИНИМУМ(КурсыВалют2.Период) КАК Период2,
	|			КурсыВалют1.Курс КАК Курс
	|		ИЗ
	|			РегистрСведений.КурсыВалют КАК КурсыВалют2
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют1
	|				ПО КурсыВалют2.Период > КурсыВалют1.Период
	|		ГДЕ
	|			КурсыВалют1.Валюта = &Валюта
	|			И КурсыВалют2.Валюта = &Валюта
	|			И КурсыВалют1.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КурсыВалют1.Период,
	|			КурсыВалют1.Курс) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Курс) КАК ВложенныйЗапрос
	|ИТОГИ
	|	СУММА(Курс),
	|	СУММА(Дней)
	|ПО
	|	ОБЩИЕ";
	ВыборкаО = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Общие");
	Если ВыборкаО.Следующий() Тогда
		Возврат ОКР(ВыборкаО.Курс/ВыборкаО.Дней,4);	
	Иначе
		ВОзврат 1;
	КонецЕсли;
	

КонецФункции // ()

// заполняет список поля списка именами регистров бухгалтерии
Процедура ЗаполнитьСписокРегистрамиБухгалтерии(Список)  Экспорт
	Для каждого ТекРегистр Из Метаданные.РегистрыБухгалтерии Цикл
		Список.Добавить(ТекРегистр.Имя);
	КонецЦикла;
КонецПроцедуры

// заполняет список поля списка именами регистров бухгалтерии
Процедура ЗаполнитьСписокРесурсамиРегистраБухгалтерии(ИмяРегистра, Список)  Экспорт
	Для каждого ТекРесурс Из Метаданные.РегистрыБухгалтерии[ИмяРегистра].Ресурсы Цикл
		Список.Добавить(ТекРесурс.Имя,ТекРесурс.Синоним);
	КонецЦикла;
КонецПроцедуры

// заполняет список поля списка именами регистров бухгалтерии
Процедура ЗаполнитьСписокРесурсамиРегистраНакопления(ИмяРегистра, Список)  Экспорт
	Для каждого ТекРесурс Из Метаданные.РегистрыНакопления[ИмяРегистра].Ресурсы Цикл
		Список.Добавить(ТекРесурс.Имя,ТекРесурс.Синоним);
	КонецЦикла;
КонецПроцедуры

// заполняет список поля списка именами регистров накопления
Процедура ЗаполнитьСписокРегистрамиНакопления(Список)  Экспорт
	Для каждого ТекРегистр Из Метаданные.РегистрыНакопления Цикл
		Список.Добавить(ТекРегистр.Имя);
	КонецЦикла;
КонецПроцедуры

// Заполняет настройки построителя отчета для загрузки настроек отбора по счету или корсчету 
//
// Параметры
//  <Построитель>  - <ПостроительОтчета> - настраиваемый построитель отчета
//  <ЭтоКорСчет>  - <Булево> - если флаг установлен, то оьбор производится по корсчету
//                 <продолжение описания параметра>
//
Процедура ЗаполнитьНастройкиПостроителя(РегистрБухгалтерии,Счет,Ресурс,Построитель,ЭтоКорСчет) Экспорт
		Если НЕ ЗначениеЗаполнено(Счет) Тогда
			Возврат;
		КонецЕсли;
		Построитель.Параметры.Вставить("Счет",Счет);
		Если ЭтоКорСчет Тогда
			Построитель.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Регистр.КорСчет,
			|	Регистр.КорСубконто1,
			|	Регистр.КорСубконто2,
			|	Регистр.КорСубконто3,
			|	Регистр."+Ресурс+"ОборотДт
			|ИЗ
			|	РегистрБухгалтерии."+РегистрБухгалтерии+".Обороты(, , , , , , КорСчет = &Счет, ) КАК Регистр";
		Иначе
			Построитель.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Регистр.Счет,
			|	Регистр.Субконто1,
			|	Регистр.Субконто2,
			|	Регистр.Субконто3,
			|	Регистр."+Ресурс+"ОборотДт
			|ИЗ
			|	РегистрБухгалтерии."+РегистрБухгалтерии+".Обороты(, , ,&Счет = &Счет , , , , ) КАК Регистр";
		КонецЕсли;	
		Построитель.ЗаполнитьНастройки();
КонецПроцедуры // ()

Функция СоздатьПостроительОтчета(РегистрБухгалтерии,Счет,Ресурс,Настройки,ОтборПоКор) Экспорт
	Результат=Новый ПостроительОтчета;
	isСтандартныеОтчеты.ЗаполнитьНастройкиПостроителя(РегистрБухгалтерии,Счет,Ресурс,Результат,ОтборПоКор);
	Результат.ЗаполнитьНастройки();
	Сч=0;
	Пока Сч<Результат.ДоступныеПоля.Количество() Цикл
		ТекПоле=Результат.ДоступныеПоля[Сч];
		Если ((Найти(ТекПоле.Имя,"Субконто")=1 И НЕ ОтборПоКор) ИЛИ
				(Найти(ТекПоле.Имя,"КорСубконто")=1 И ОтборПоКор)) И 
				ТекПоле.Имя<>"Субконто" И ТекПоле.Имя<>"КорСубконто" Тогда
			НомерСубконто=Число(Прав(ТекПоле.Имя,1));
			Если НомерСубконто>Счет.ВидыСубконто.Количество() Тогда
				Результат.ДоступныеПоля.Удалить(ТекПоле);
			Иначе
				Элемент=Счет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				ТекПоле.Представление=Элемент.Наименование;
				ТекПоле.ТипЗначения=Элемент.ТипЗначения;
				isСтандартныеОтчеты.Инк(Сч);
			КонецЕсли;
		Иначе
			Результат.ДоступныеПоля.Удалить(ТекПоле);
		КонецЕсли;
	КонецЦикла;
	НастройкиПостроителя = Настройки.Получить();
	Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
		Результат.УстановитьНастройки(НастройкиПостроителя);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ЭтоРегистрНакопленияОборотный(ИмяРегистра) Экспорт
	Возврат Метаданные.РегистрыНакопления[ИмяРегистра].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты;
КонецФункции // ()

Процедура ЗаполнитьНастройкиПостроителяДляРегистраНакопления(ИмяРегистра,Построитель,ЭтоРегистрОборотов) Экспорт
		Если ЭтоРегистрОборотов Тогда
			Построитель.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ *
			|ИЗ
			|	РегистрНакопления."+ИмяРегистра+".Обороты КАК Регистр";
		Иначе
			Построитель.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ *
			|ИЗ
			|	РегистрНакопления."+ИмяРегистра+".ОстаткиИОбороты КАК Регистр";
		КонецЕсли;	
		Построитель.ЗаполнитьНастройки();
КонецПроцедуры // ()

Функция ВычислитьИсточник(Отчет,СтрокаИсточника,ДатаНачала,ДатаКонца,Периодичность,ТаблицаИсточников) Экспорт
	СтрокаИсточника=Справочники.балИсточники.СоздатьЭлемент();
	Для каждого ТекСтр Из СтрокаИсточника.Источники Цикл
		Если ТекСтр.ТипСтроки=0 Тогда
			Построитель=Новый ПостроительОтчета;
      ПостроительДляОтборов=Новый ПостроительОтчета;
			ТекстЗапроса = ПолучитьТекстЗапросаИсточника(СтрокаИсточника,ТекСтр,СтрокаИсточника.Владелец.РегистрБухгалтерии,Периодичность);
			Построитель.Текст=ТекстЗапроса;
			ПостроительДляОтборов.Текст=ТекстЗапроса;
			ПостроительДляОтборов.ЗаполнитьНастройки();
			Настройки = ТекСтр.НастройкиПостроителяСчет.Получить();
			Если ТипЗнч(Настройки) = Тип("НастройкиПостроителяОтчета") Тогда
				ПостроительДляОтборов.УстановитьНастройки(Настройки);
				Для каждого ТекОтбор Из ПостроительДляОтборов.Отбор Цикл
					НовыйОтбор=Построитель.Отбор.Добавить(ТекОтбор.Имя);
					ЗаполнитьЗначенияСвойств(НовыйОтбор,ТекОтбор);
				КонецЦикла;
			КонецЕсли;
			Настройки = ТекСтр.НастройкиПостроителяКорСчет.Получить();
			Если ТипЗнч(Настройки) = Тип("НастройкиПостроителяОтчета") Тогда
				ПостроительДляОтборов.УстановитьНастройки(Настройки);
				Для каждого ТекОтбор Из ПостроительДляОтборов.Отбор Цикл
					НовыйОтбор=Построитель.Отбор.Добавить(ТекОтбор.Имя);
					ЗаполнитьЗначенияСвойств(НовыйОтбор,ТекОтбор);
				КонецЦикла;
			КонецЕсли;
		Иначе
		
		КонецЕсли;
	КонецЦикла;
	
	
КонецФункции // 

// Параметры
// Источник - ссылка на элемент справочника балИсточники
// ДатаНачала - начало периода выборки
// ДатаКонца  - конец периода выборки
// Периодичность - число:
//		1- месяц, 2 - квартал, 3 - полугодие, 4 - год	
// ТаблицаСтрокИсточников - таблица рассчитанных строк источников, используется для обработки вложенных источников
// вычисляет и возвращает строку источника на основании описания строки источника
// вычесленную строку записывает в таблицу источников
// 
Функция ПолучитьСтрокуИсточника(Источник,ДеревоИсточников,ДатаНачала,ДатаКонца,Периодичность,Отбор,ТаблицаПараметров) Экспорт
	Пустышка = Новый Структура("Сумма",0);
	СтрокаИсточника=ДеревоИсточников.Строки.Найти(Источник,"Источник");
	Если СтрокаИсточника=Неопределено Тогда
		СтрокаИсточника=ДеревоИсточников.Строки.Добавить();
		СтрокаИсточника.Источник			=	Источник;
		СтрокаИсточника.ДатаНачала		=	ДатаНачала;
		СтрокаИсточника.ДатаКонца			=	ДатаКонца;
		СтрокаИсточника.Периодичность	=	Периодичность;
		Для каждого ТекПодстрока Из Источник.Источники Цикл
			Если ТекПодстрока.ТипСтроки=0 Тогда  // это строка по регистру бухгалтерии
				ТаблицаПодстроки=ПолучитьТаблицуПодстрокиИсточника(Источник,СтрокаИсточника,ТекПодстрока,ДатаНачала,ДатаКонца,Периодичность,Отбор,ТаблицаПараметров);	
			Иначе
				СтрокаИсточника1=ДеревоИсточников.Строки.Найти(ТекПодстрока.Строка,"Источник");
				Если СтрокаИсточника1=Неопределено Тогда
					СтрокаИсточника1=ПолучитьСтрокуИсточника(ТекПодстрока.Источник,ДеревоИсточников,ДатаНачала,ДатаКонца,Периодичность,Отбор, ТаблицаПараметров);
				КонецЕсли;
				ТаблицаПодстроки=СтрокаИсточника1.Строки;
			КонецЕсли;
			Если ТекПодстрока.ТипСтроки=0 И ЭтоОстаток(ТекПодстрока.ТипИсточника) Тогда // это остатки по счетам
				Периоды=ПолучитьМассивПериодов(ДатаНачала,ДатаКонца,Периодичность);
			  Для Сч=0 По Периоды.Количество()-1 Цикл
					ТекСтр=Периоды[Сч];
					НоваяПодстрока=СтрокаИсточника.Строки.Найти(ТекСтр,"Период");
					Если НоваяПодстрока=Неопределено Тогда
						НоваяПодстрока=СтрокаИсточника.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяПодстрока,СтрокаИсточника,,"Сумма");
						НоваяПодстрока.Период=ТекСтр;
					КонецЕсли;
					Значение=ТаблицаПодстроки.Найти(ТекСтр,"Период");
					Если Значение=Неопределено Тогда
						Если ТаблицаПодстроки.Количество()=0 Тогда
							Значение = Пустышка;
						ИначеЕсли ТаблицаПодстроки[ТаблицаПодстроки.Количество()-1].Период >=ТекСтр Тогда
							Значение=ТаблицаПодстроки[ТаблицаПодстроки.Количество()-1];
						Иначе
							Значение = Пустышка;
						КонецЕсли;
					КонецЕсли;
					Инк(НоваяПодстрока.Сумма,Значение.Сумма);
					Инк(СтрокаИсточника.Сумма,Значение.Сумма);
				КонецЦикла;
			Иначе
				Для каждого ТекСтр Из ТаблицаПодстроки Цикл
					НоваяПодстрока=СтрокаИсточника.Строки.Найти(ТекСтр.Период,"Период");
					Если НоваяПодстрока=Неопределено Тогда
						НоваяПодстрока=СтрокаИсточника.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяПодстрока,СтрокаИсточника,,"Сумма");
						НоваяПодстрока.Период=ТекСтр.Период;
					КонецЕсли;
					Инк(НоваяПодстрока.Сумма,ТекСтр.Сумма);
					Инк(СтрокаИсточника.Сумма,ТекСтр.Сумма);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СтрокаИсточника;
КонецФункции // 

Функция ПолучитьТаблицуПодстрокиИсточника(Источник,СтрокаИсточника,Подстрока,ДатаНачала,ДатаКонца,Периодичность,Отбор,ТаблицаПараметров)
	Построитель=Новый ПостроительОтчета;
	ПостроительДляОтборов=Новый ПостроительОтчета;
	ТекстЗапроса = ПолучитьТекстЗапросаИсточника(СтрокаИсточника,Подстрока,СтрокаИсточника.Источник.Владелец.РегистрБухгалтерии,Периодичность);
	Построитель.Текст=ТекстЗапроса;
	ПостроительДляОтборов.Текст=ТекстЗапроса;
	ПостроительДляОтборов.ЗаполнитьНастройки();
	Построитель.ЗаполнитьНастройки();
	Настройки = Подстрока.НастройкиПостроителяСчет.Получить();
	Если ТипЗнч(Настройки) = Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительДляОтборов.УстановитьНастройки(Настройки);
		Для каждого ТекОтбор Из ПостроительДляОтборов.Отбор Цикл
			Если ЗначениеЗаполнено(ТекОтбор.ПутьКДанным) Тогда
				НовыйОтбор=Построитель.Отбор.Добавить(ТекОтбор.ПутьКДанным);
				НовыйОтбор.ВидСравнения=ТекОтбор.ВидСравнения;
				ЗаполнитьЗначенияСвойств(НовыйОтбор,ТекОтбор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для каждого ТекОтбор Из Отбор Цикл
		НовыйОтбор=Построитель.Отбор.Добавить(ТекОтбор.ПутьКДанным);
		НовыйОтбор.ВидСравнения=ТекОтбор.ВидСравнения;
		ЗаполнитьЗначенияСвойств(НовыйОтбор,ТекОтбор);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Подстрока.КорСчет) Тогда
		Настройки = Подстрока.НастройкиПостроителяКорСчет.Получить();
		Если ТипЗнч(Настройки) = Тип("НастройкиПостроителяОтчета") Тогда
			ПостроительДляОтборов.УстановитьНастройки(Настройки);
			Для каждого ТекОтбор Из ПостроительДляОтборов.Отбор Цикл
				НовыйОтбор=Построитель.Отбор.Добавить(ТекОтбор.ПутьКДанным);
				НовыйОтбор.ВидСравнения=ТекОтбор.ВидСравнения;
				ЗаполнитьЗначенияСвойств(НовыйОтбор,ТекОтбор);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДоступныеПоля=ПостроительДляОтборов.ДоступныеПоля;
	Для каждого ТекПар Из ТаблицаПараметров Цикл
		Мас=Новый Массив;
		ТипС=ТипЗнч(ТекПар.Значение);
		Если ТипС=Тип("СписокЗначений") Тогда
			ТипС=ТекПар.Значение.ТипЗначения.Типы()[0];		
		КонецЕсли;
		//Мас.Добавить(ТипС);
		//ОП=Новый ОписаниеТипов(Мас);
		Для каждого Поле Из ДоступныеПоля Цикл
			Если Поле.ТипЗначения.СодержитТип(ТипС) Тогда
			//Если Поле.ТипЗначения=ОП Тогда
				Если Поле.Отбор Тогда
					НовыйОтбор=Построитель.Отбор.Добавить(Поле.ПутьКДанным);
					НовыйОтбор.ВидСравнения=ТекПар.ВидСравнения;
					НовыйОтбор.Значение=ТекПар.Значение;
					НовыйОтбор.Использование=ТекПар.Использование;
				КонецЕсли;
				Прервать;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	Построитель.Параметры.Вставить("ДатаНачала",ДатаНачала);
	Построитель.Параметры.Вставить("ДатаКонца",	КонецДня(ДатаКонца));
	Построитель.Параметры.Вставить("Коэффициент",Подстрока.Коэффициент);
	Построитель.Параметры.Вставить("Счет",			Подстрока.Счет);
	Построитель.Параметры.Вставить("КорСчет",		Подстрока.КорСчет);
	Построитель.Выполнить();
	Если Периодичность=0 Тогда
		Результат=Построитель.Результат.Выгрузить();
		Результат.Свернуть("","Сумма");
	Иначе
		Результат=Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("Период");
		Результат.Колонки.Добавить("Сумма");
		ДеревоРезультата=Построитель.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Для каждого ТекСтр Из ДеревоРезультата.Строки Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(),ТекСтр);					
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции // 

Функция СоздатьДеревоИсточников() Экспорт

Результат = Новый ДеревоЗначений;
Результат.Колонки.Добавить("Источник",			Новый ОписаниеТипов("СправочникСсылка.балИсточники"));
Результат.Колонки.Добавить("Периодичность",	ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1,0));
Результат.Колонки.Добавить("ДатаНачала",		ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
Результат.Колонки.Добавить("Период",				ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
Результат.Колонки.Добавить("ДатаКонца",			ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
Результат.Колонки.Добавить("Сумма",					ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(18,2));
Возврат Результат;
КонецФункции // 
	
Функция ПериодичностьДляЗапроса(Периодичность) Экспорт
	Если Периодичность=1 Тогда
		ПериодичностьСтр="Месяц";
	ИначеЕсли Периодичность=2 Тогда
		ПериодичностьСтр="Квартал";
	ИначеЕсли Периодичность=3 Тогда
		ПериодичностьСтр="Полугодие";
	ИначеЕсли Периодичность=4 Тогда
		ПериодичностьСтр="Год";
	ИначеЕсли Периодичность=5 Тогда
		ПериодичностьСтр="Неделя";
	ИначеЕсли Периодичность=6 Тогда
		ПериодичностьСтр="День";
	Иначе
		ПериодичностьСтр="Период";
	КонецЕсли;
	Возврат ПериодичностьСтр;
КонецФункции // 
//
Функция ЭтоОстаток(ТипИсточника)
	Возврат ТипИсточника<>1 И ТипИсточника<>2;
КонецФункции // ЭтоОстаток()

Функция ПолучитьТекстЗапросаИсточника(СтрокаИсточника,ПодСтрокаИсточника,Регистр,Периодичность)   экспорт
	ЭтоОстаток=ЭтоОстаток(ПодСтрокаИсточника.ТипИсточника);
	ПериодСтр=ПериодичностьДляЗапроса(Периодичность);
	Если Периодичность=0 Тогда
		Период="";	
	  СтрокаИтогов="";
	Иначе
		Период="Период,";	
		СтрокаИтогов="ИТОГИ
		|	СУММА(Сумма)
		|ПО
		|	Период ПЕРИОДАМИ("+ПериодСтр+", , )";
	
	КонецЕсли;
	Если СтрокаИсточника.Источник.Владелец.ТипРегистра=0 Тогда
		Если ЭтоОстаток Тогда
			Префикс="";
			Если ПодСтрокаИсточника.ТипИсточника=0 Тогда
				ПодстрокаОстатка="КонечныйОстаток";
			ИначеЕсли ПодСтрокаИсточника.ТипИсточника=3 Тогда
				ПодстрокаОстатка="НачальныйОстаток";
			ИначеЕсли ПодСтрокаИсточника.ТипИсточника=4 Тогда
				Префикс=" - ";
				ПодстрокаОстатка="НачальныйОстатокКт";
			ИначеЕсли ПодСтрокаИсточника.ТипИсточника=5 Тогда
				ПодстрокаОстатка="НачальныйОстатокДт";
			ИначеЕсли ПодСтрокаИсточника.ТипИсточника=6 Тогда
				Префикс=" - ";
				ПодстрокаОстатка="КонечныйОстатокКт";
			ИначеЕсли ПодСтрокаИсточника.ТипИсточника=7 Тогда
				ПодстрокаОстатка="КонечныйОстатокДт";
			КонецЕсли;
			Ресурс=Префикс+ПодстрокаИсточника.Ресурс+ПодстрокаОстатка+"*&Коэффициент";
			СтрокаИз=" РегистрБухгалтерии."+Регистр+".ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, "+ПериодСтр+", , Счет в иерархии (&Счет), , )";
			СубконтоСчета="";
			Счет=ПланыСчетов.Хозрасчетный.Аккредитивы;
			ВидыСубконто=Счет.ВидыСубконто;
			Для Сч=0 По ВидыСубконто.Количество()-1 Цикл
				ВидСубконто=ВидыСубконто[Сч];
				Если ВидСубконто.ТолькоОбороты Тогда
					Продолжить;
				КонецЕсли;
				Инк(СубконтоСчета,"Субконто"+Строка(Сч+1)+",");
			КонецЦикла;
		Иначе	
			Ресурс=ПодстрокаИсточника.Ресурс+?(ПодСтрокаИсточника.ТипИсточника=1,"ОборотДт","ОборотКт");
      УсловиеКорСчета=?(ЗначениеЗаполнено(ПодСтрокаИсточника.КорСчет),"КорСчет в иерархии (&КорСчет)","");
      СубконтоКорСчета=?(ЗначениеЗаполнено(ПодСтрокаИсточника.КорСчет),
				"	КорСубконто1,
				|	КорСубконто2,
				|	КорСубконто3,
				|","");
			СтрокаИз=" РегистрБухгалтерии."+Регистр+".Обороты(&ДатаНачала, &ДатаКонца, "+ПериодСтр+", Счет В ИЕРАРХИИ (&Счет), , , "+УсловиеКорСчета+", )";
			СубконтоСчета =
			"	Субконто1,
			|	Субконто2,
			|	Субконто3,";
		КонецЕсли;     
	Иначе
		Возврат 0;
	КонецЕсли;
	
	СтрокаИзмерений="";
	Если СтрокаИсточника.Источник.Владелец.ТипРегистра=0 Тогда // регистр бухгалтерии
		Измерения=Метаданные.РегистрыБухгалтерии[СтрокаИсточника.Источник.Владелец.РегистрБухгалтерии].Измерения;
		Для каждого ТекИзмерение Из Измерения Цикл
			Инк(СтрокаИзмерений,ТекИзмерение.Имя+", ");
		КонецЦикла;
	КонецЕсли;

	
	
	Результат=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ "+СубконтоСчета+СтрокаИзмерений+СубконтоКорСчета+Период+
	Ресурс+"*&Коэффициент КАК Сумма
	|	ИЗ
	|		"+СтрокаИз+СтрокаИтогов+" КАК Регистр";
	
	Возврат Результат;
КонецФункции // 

//"ВЫБРАТЬ
//|	НалоговыйОстаткиИОбороты.Счет,
//|	НалоговыйОстаткиИОбороты.Субконто1,
//|	НалоговыйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
//|	НалоговыйОстаткиИОбороты.Период КАК Период
//|ИЗ
//|	РегистрБухгалтерии.Налоговый.ОстаткиИОбороты(, , Месяц, , , , ) КАК НалоговыйОстаткиИОбороты
//|ИТОГИ
//|	СУММА(СуммаНачальныйОстатокДт)
//|ПО
//|	Период ПЕРИОДАМИ(МЕСЯЦ, , )"
// обеспечивает создание поля списка отбора настройки или отчета по разделителям учета
// Параметры:
// ТипРегистра - Число - 0 - регистр бухгалтерии, 1 - регистр накопления
// Регистр - строка - имя регистра бухгалтерии
// ПостроительОтчета - построитель отчета, который используется для поля списка отбора
// Настройки - Настройки построителя отчета, которые выбираются из хранилища
// 
Процедура ОбновитьНастройкиПостроителяОтчета(ТипРегистра, Регистр,ПостроительОтчета,Настройки) Экспорт
//	Ресурс=?(РегистрБухгалтерии="Бюджетирование","СуммаУпрОстаток","СуммаОстаток");

  Если ТипРегистра = 0 Тогда
		ПостроительОтчета.Текст=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ *
		|ИЗ
		|	РегистрБухгалтерии."+Регистр+".Остатки(, , , ) КАК Регистр";
	Иначе
		ПостроительОтчета.Текст=
	  "ВЫБРАТЬ РАЗРЕШЕННЫЕ *
	 |ИЗ
	 |	РегистрНакопления."+Регистр+".Остатки КАК Регистр"
	КонецЕсли;
	ПостроительОтчета.ЗаполнитьНастройки();
	Сч=0;
	Пока Сч<ПостроительОтчета.ДоступныеПоля.Количество() Цикл
		ТекПоле=ПостроительОтчета.ДоступныеПоля[Сч];
		Если ТипРегистра=0 Тогда
			Измерения=Метаданные.РегистрыБухгалтерии[Регистр].Измерения;
		Иначе
			Измерения=Метаданные.РегистрыНакопления[Регистр].Измерения;
		КонецЕсли;
		ТекИзмерение=Измерения.Найти(ТекПоле.Имя);
		Если ТекИзмерение=Неопределено Тогда
			ПостроительОтчета.ДоступныеПоля.Удалить(ТекПоле);
		Иначе
			Инк(Сч);
		КонецЕсли;
	КонецЦикла;
	Если ТипЗнч(Настройки) = Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета.УстановитьНастройки(Настройки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиЗаголовокПериодами(ТаблДок,Вывод,НачПериода,КонПериода,Периодичность) Экспорт
	Если Периодичность=1 Тогда
		СтрокаФормата="ДФ='MMMM yyyy'";
	ИначеЕсли Периодичность=2 Тогда
		СтрокаФормата="ДФ='q ""квартал"" yyyy'";
	ИначеЕсли Периодичность=3 Тогда
		СтрокаФормата="ДФ=MM.yyyy";
	ИначеЕсли Периодичность=4 Тогда
		СтрокаФормата="ДФ='yyyy'";
	ИначеЕсли Периодичность=5 Тогда
		СтрокаФормата="ДФ=dd.MM";
	ИначеЕсли Периодичность=6 Тогда
		СтрокаФормата="ДФ=dd.MM.yyyy";
	ИначеЕсли Периодичность=7 Тогда
		СтрокаФормата="";
	КонецЕсли;
	Мас=ПолучитьМассивПериодов(НачПериода,КонПериода,Периодичность);
	Для Сч=0 По Мас.Количество()-1 Цикл
		Если Периодичность = 7 Тогда
			Вывод.Параметры.Период=ПредставлениеПериода(НачПериода,КонПериода);
		Иначе	
			Вывод.Параметры.Период=Формат(Мас[Сч],СтрокаФормата);
		КонецЕсли;
		ТаблДок.Присоединить(Вывод);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьМассивПериодов(НачПериода,КонПериода,Периодичность) Экспорт
	Результат=Новый Массив;
	Если Периодичность = 7 Тогда
		Результат.Добавить(НачалоДня(НачПериода));
		Возврат Результат;
	Иначе
		ТекДата=НачПериода;
		Пока Истина Цикл
			ТекДата=ПолучитьКонецПериода(ТекДата,Периодичность);
			Результат.Добавить(ПолучитьНачалоПериода(ТекДата,Периодичность));
			Если ТекДата>=КонПериода Тогда
				Возврат Результат;
			КонецЕсли;
			ТекДата=ТекДата+1;
		КонецЦикла;
	КонецЕсли;
КонецФункции // 

Функция ПолучитьТаблицуПериодов(НачПериода,КонПериода,Периодичность) Экспорт
	Результат=Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Период",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	Если Периодичность = 7 Тогда
		Результат.Добавить().Период = НачалоДня(НачПериода);
		Возврат Результат;
	Иначе
		ТекДата=НачПериода;
		Пока Истина Цикл
			ТекДата=ПолучитьКонецПериода(ТекДата,Периодичность);
			Результат.Добавить().Период = ПолучитьНачалоПериода(ТекДата,Периодичность);
			Если ТекДата>=КонПериода Тогда
				Возврат Результат;
			КонецЕсли;
			ТекДата=ТекДата+1;
		КонецЦикла;
	КонецЕсли;

	

КонецФункции // ()


Функция ПолучитьКонецПериода(Дата,Периодичность) Экспорт
	Если Периодичность=1 Тогда
		Возврат КонецМесяца(Дата);
	ИначеЕсли Периодичность=2 Тогда
		Возврат КонецКвартала(Дата);
	ИначеЕсли Периодичность=3 Тогда
		Конец1=КонецДня(Дата(Год(Дата),6,30));
		Если Дата>Конец1 Тогда
		  Возврат КонецДня(Дата(Год(Дата),12,31))
		Иначе
			Возврат Конец1;
		КонецЕсли;
	ИначеЕсли Периодичность=4 Тогда
		Возврат КонецГода(Дата);
	ИначеЕсли Периодичность=5 Тогда
		Возврат КонецНедели(Дата);
	ИначеЕсли Периодичность=6 Тогда
		Возврат КонецДня(Дата);
	Иначе
		Возврат Дата;
	КонецЕсли;
КонецФункции // 

Функция ПолучитьНачалоПериода(Дата,Периодичность) Экспорт
	Если Периодичность=1 Тогда
		Возврат НачалоМесяца(Дата);
	ИначеЕсли Периодичность=2 Тогда
		Возврат НачалоКвартала(Дата);
	ИначеЕсли Периодичность=3 Тогда
		Конец1=КонецДня(Дата(Год(Дата),6,30));
		Если Дата>Конец1 Тогда
		  Возврат Дата(Год(Дата),7,1);
		Иначе
			Возврат Дата(Год(Дата),1,1);
		КонецЕсли;
	ИначеЕсли Периодичность=4 Тогда
		Возврат НачалоГода(Дата);
	ИначеЕсли Периодичность=5 Тогда
		Возврат НачалоНедели(Дата);
	ИначеЕсли Периодичность=6 Тогда
		Возврат НачалоДня(Дата);
	Иначе
		Возврат Дата;
	КонецЕсли;
КонецФункции // 


///////// ПРОЦЕДУРЫ ВЫЗОВА ФОРМ НАЛОГОВЫХ РЕГИСТРОВ
Функция ПолучитьСтруктуруПоказателейОтчета(БУ = Истина, ВалютнаяСумма = Ложь, Количество = Ложь, РазвернутоеСальдо = Ложь, СуммаКОРР = Истина, СуммаСуммаКОРР = Ложь) Экспорт
	
	Возврат Новый Структура("БУ, ВалютнаяСумма, Количество, РазвернутоеСальдо, СуммаКОРР, СуммаСуммаКОРР", 
							Новый Структура("Значение, Использование, Представление", Истина, БУ,                "Сумма (данные GAAP)"),
							Новый Структура("Значение, Использование, Представление", Ложь,   ВалютнаяСумма,     "Валютная сумма"),
							Новый Структура("Значение, Использование, Представление", Ложь,   Количество,        "Количество"),
							Новый Структура("Значение, Использование, Представление", Ложь,   РазвернутоеСальдо, "Развернутое сальдо"),
							// is НикифоровАО 16.12.2013, для вывода ресурса "Сумма КОРР" РБ "isGAAP"
							Новый Структура("Значение, Использование, Представление", Ложь,   СуммаКОРР,         "Сумма КОРР (данные GAAP)"),
							// N.Naumova 28.01.2014, для вывода ресурса "Сумма + Сумма КОРР" РБ "isGAAP"
							Новый Структура("Значение, Использование, Представление", Ложь,   СуммаСуммаКОРР,    "Сумма + Сумма КОРР (данные GAAP)"));
	
КонецФункции

Процедура ЗаполнитьДанныеОтчета(ОтчетОбъект) Экспорт
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	//Данные отчета
	Если ОтчетОбъект.ДанныеОтчета = Неопределено Тогда
		ОтчетОбъект.ДанныеОтчета = Новый Структура;
	КонецЕсли;
	
	// Показатели отчета
	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
		ОтчетОбъект.ПолучитьСтруктуруПоказателейОтчета();
	КонецЕсли;
		
	// Дополнительные поля
	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("РазмещениеДополнительныхПолей") Тогда
		ОтчетОбъект.ДанныеОтчета.Вставить("РазмещениеДополнительныхПолей", 0);
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.isОборотноСальдоваяВедомостьПоСчетуGAAP"
		//ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.isОборотыСчетаGAAP"	//	Космодемьянский	08.09.2011	Добавление отчёта
		//ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьGAAP"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.isАнализСчетаGAAP" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчетаGAAAAP" Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ДополнительныеПоля") Тогда
			ДополнительныеПоля = Новый ТаблицаЗначений;
			ДополнительныеПоля.Колонки.Добавить("Использование");
			ДополнительныеПоля.Колонки.Добавить("Представление");
			ДополнительныеПоля.Колонки.Добавить("Поле");
			ДополнительныеПоля.Колонки.Добавить("Положение");
			ОтчетОбъект.ДанныеОтчета.Вставить("ДополнительныеПоля", ДополнительныеПоля);
		КонецЕсли;
	КонецЕсли;
	
	
	// Группировка по счету
	Если ИдентификаторОбъекта = "ОтчетОбъект.isОборотноСальдоваяВедомостьПоСчетуGAAP"
		//ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.isОборотыСчетаGAAP"	//	Космодемьянский	08.09.2011	Добавление отчёта
		//ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.isАнализСчетаGAAP" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчетаGAAAAP" Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("Группировка") Тогда
			Группировка = Новый ТаблицаЗначений;
			Группировка.Колонки.Добавить("Использование");
			Группировка.Колонки.Добавить("Представление");
			Группировка.Колонки.Добавить("Поле");
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПеречислениеСсылка.ТипДетализацииСтандартныхОтчетов"));
			Группировка.Колонки.Добавить("ТипГруппировки", Новый ОписаниеТипов(МассивТипов));
			ОтчетОбъект.ДанныеОтчета.Вставить("Группировка", Группировка);
		КонецЕсли;
	КонецЕсли;
	
	
	// Группировка по кор. счетам
	Если ИдентификаторОбъекта = "ОтчетОбъект.isАнализСчетаGAAP" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчетаGAAAAP" Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ГруппировкаКор") Тогда
			ГруппировкаКор = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			ГруппировкаКор.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
			ГруппировкаКор.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПланСчетовСсылка.Международный"));
			ГруппировкаКор.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
			ГруппировкаКор.Колонки.Добавить("Представление", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СписокЗначений"));
			ГруппировкаКор.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
			
			ОтчетОбъект.ДанныеОтчета.Вставить("ГруппировкаКор", ГруппировкаКор);
		КонецЕсли;
	КонецЕсли;
	
	// Группировка
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьGAAP" Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("Группировка") Тогда
			Группировка = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			Группировка.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
			Группировка.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПланСчетовСсылка.Международный"));
			Группировка.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
			Группировка.Колонки.Добавить("Представление", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СписокЗначений"));
			Группировка.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
			
			ОтчетОбъект.ДанныеОтчета.Вставить("Группировка", Группировка);
		КонецЕсли;
		
		// РазвернутоеСальдо 
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("РазвернутоеСальдо") Тогда
			РазвернутоеСальдо = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			РазвернутоеСальдо.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
			РазвернутоеСальдо.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПланСчетовСсылка.Международный"));
			РазвернутоеСальдо.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
			РазвернутоеСальдо.Колонки.Добавить("Представление", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СписокЗначений"));
			РазвернутоеСальдо.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
			ОтчетОбъект.ДанныеОтчета.Вставить("РазвернутоеСальдо", РазвернутоеСальдо);
		КонецЕсли;
	КонецЕсли;
	
	// Настройки диаграммы	
	Если ИдентификаторОбъекта = "ОтчетОбъект.isОборотноСальдоваяВедомостьПоСчетуGAAP"
		//ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.isОборотыСчетаGAAP"	//	Космодемьянский	08.09.2011	Добавление отчёта
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчетаGAAAAP" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.isАнализСчетаGAAP" Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ПоказательДиаграммы") Тогда
			ОтчетОбъект.ДанныеОтчета.Вставить("ПоказательДиаграммы", 0);
		КонецЕсли;
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ВидПодписиДиаграммы") Тогда
			ОтчетОбъект.ДанныеОтчета.Вставить("ВидПодписиДиаграммы", 0010);
		КонецЕсли;
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ПредставлениеДиаграммы") Тогда
			ОтчетОбъект.ДанныеОтчета.Вставить("ПредставлениеДиаграммы", 0);
		КонецЕсли;
	КонецЕсли;
	
	//Настройки формы
	Если ОтчетОбъект.НастройкиФормы = Неопределено Тогда
		ОтчетОбъект.НастройкиФормы = Новый Структура;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРасшифровкиСтандартногоОтчета(ОтчетОбъект, ФормаОтчета, Расшифровка, СтандартнаяОбработка) Экспорт
	
	Перем ВыполненноеДействие;
	
	// Запретим стандартную обработку расшифровки
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.isКарточкаСчетаGAAP" 
		//ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконто"
		//ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОтчетПоПроводкам" 
		Тогда 
		ОткрытьЗначение(ФормаОтчета.ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
	Иначе
		ЕстьПодразделение = Ложь;

		МассивПолей = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки, , истина);
		
		ЕстьПоказатель  = Ложь;
		ЕстьКорЗначение = Ложь;
		ЕстьСчет        = Истина;
		ПервыйЭлемент   = Неопределено;
		Счет            = Неопределено;
		КорСчет         = Неопределено;
		Период          = Неопределено;
		БухТипРесурса   = Неопределено;
		Для Каждого Элемент Из МассивПолей Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
					ПервыйЭлемент = Элемент;
				КонецЕсли;
				Если Элемент.Поле = "Показатель" Тогда
					ЕстьПоказатель = Истина;
				КонецЕсли;
				Если Найти(Элемент.Поле, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Поле = "КорСчет" Тогда
					КорСчет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Счет" Тогда
					Счет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Период" Тогда
					Период = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "БухТипРесурса" Тогда
					БухТипРесурса = Элемент.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ФормироватьОСВПоСчету            = Ложь;
		ФормироватьАнализСчета           = Ложь;
		ФормироватьОборотыСчетаПоМесяцам = Ложь;
		ФормироватьОборотыСчетаПоДням    = Ложь;
		ФормироватьКарточкуСчета         = Ложь;
		ФормироватьКарточкуСубконто      = Ложь;
		ФормироватьОтчетПоПроводкам      = Ложь;
		
		ПредставлениеДляОСВПоСчету            = "ОСВ по счету "   + Счет;
		ПредставлениеДляКарточкиСчета         = "Карточка счета " + Счет;
		ПредставлениеДляАнализаСчета          = "Анализ счета "   + Счет;
		ПредставлениеДляОтчетаПоПроводкам     = "Отчет по проводкам";
		
		УстановитьВсеПоказатели = Ложь;
		
		ДобавитьОтборПоВидСубконто    = Истина;
		ДобавитьОтборПоВидКорСубконто = Истина;
		
		Если ПервыйЭлемент <> Неопределено Тогда
			Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьGAAP" Тогда
				
				// Создадим и инициализируем обработчик расшифровки
				ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ФормаОтчета.ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных));
				
				ДоступныеДействия = Новый Массив();
				
				СписокПунктовМеню = Новый СписокЗначений;
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не ПростойТип(ПервыйЭлемент.Значение) Тогда // СтандартныеОтчеты.ПростойТип
					СписокПунктовМеню.Добавить("Открыть """ + ПервыйЭлемент.Значение + """");
				КонецЕсли;
				СписокПунктовМеню.Добавить(ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
				СписокПунктовМеню.Добавить(ПредставлениеДляАнализаСчета);

				
				// Осуществим выбор действия расшифровки пользователем
				Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия, СписокПунктовМеню);
				
				Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда 
					Если ВыполненноеДействие = ПредставлениеДляОСВПоСчету Тогда
						ФормироватьОСВПоСчету   = Истина;
						//Одиноков нач 9.03.14
						//УстановитьВсеПоказатели = Истина;
						//Одиноков кон 9.03.14
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляКарточкиСчета Тогда
						ФормироватьКарточкуСчета = Истина;
						//Одиноков нач 9.03.14
						//УстановитьВсеПоказатели = Истина;
						//Одиноков кон 9.03.14
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляАнализаСчета Тогда
						ФормироватьАнализСчета  = Истина;
						//Одиноков нач 9.03.14
						//УстановитьВсеПоказатели = Истина;
						//Одиноков кон 9.03.14
					Иначе
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) Тогда
							ОткрытьЗначение(ПервыйЭлемент.Значение);
							Возврат;
						КонецЕсли;       
					КонецЕсли;
				Иначе 
					Возврат;
				КонецЕсли;
			Иначе
				Если ЕстьПоказатель Тогда
					// Если расшифровывается показатель, то необходимо сразу формировать отчет
					//Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" Тогда
					//	Если Счет <> Неопределено Тогда 
					//		ФормироватьКарточкуСчета = Истина;
					//	Иначе
					//		ФормироватьКарточкуСубконто = Истина;		
					//	КонецЕсли;
					//ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
					Если ИдентификаторОбъекта = "ОтчетОбъект.isАнализСчетаGAAP" Тогда
						Если ЕстьКорЗначение Тогда
							ФормироватьОтчетПоПроводкам = Истина;
						Иначе
							ФормироватьКарточкуСчета = Истина;		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.isОборотноСальдоваяВедомостьПоСчетуGAAP" Тогда
						ФормироватьКарточкуСчета = Истина;
					//ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
					//	ФормироватьОтчетПоПроводкам = Истина;
					ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.isОборотыСчетаGAAP" Тогда				
						ФормироватьОтчетПоПроводкам = Истина;
					ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.isСводныеПроводкиGAAP" Тогда
						ФормироватьОтчетПоПроводкам = Истина;
					КонецЕсли;
				Иначе
					Если ИдентификаторОбъекта = "ОтчетОбъект.isСводныеПроводкиGAAP" Тогда
						ФормироватьОтчетПоПроводкам = Истина;
						УстановитьВсеПоказатели     = Истина;
					Иначе 
						// Создадим и инициализируем обработчик расшифровки
						ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ФормаОтчета.ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных));
						
						ДоступныеДействия = Новый Массив();
						
						СписокПунктовМеню = Новый СписокЗначений;
						
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) И Не ПростойТип(ПервыйЭлемент.Значение) Тогда // СтандартныеОтчеты.ПростойТип
							СписокПунктовМеню.Добавить("Открыть """ + ПервыйЭлемент.Значение + """");
						КонецЕсли;
						//Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" Тогда
						//	Если Счет <> Неопределено Тогда 
						//		СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
						//	Иначе
						//		СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСубконто);
						//	КонецЕсли;	
						//ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
						Если ИдентификаторОбъекта = "ОтчетОбъект.isАнализСчетаGAAP" Тогда
							Если ЕстьКорЗначение Тогда 
								СписокПунктовМеню.Добавить(ПредставлениеДляОтчетаПоПроводкам);
							Иначе
								СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
							КонецЕсли;
						ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.isОборотноСальдоваяВедомостьПоСчетуGAAP" Тогда
							СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
						//ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
						//	СписокПунктовМеню.Добавить(ПредставлениеДляОтчетаПоПроводкам);
						//ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" Тогда				
						//	СписокПунктовМеню.Добавить(ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли;
						
						Если СписокПунктовМеню.Количество() = 0 Тогда
							ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет;
						Иначе
							// Осуществим выбор действия расшифровки пользователем
							Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия, СписокПунктовМеню);
						КонецЕсли;
						
						Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда 
							Если ВыполненноеДействие = ПредставлениеДляКарточкиСчета Тогда
								ФормироватьКарточкуСчета = Истина;
								УстановитьВсеПоказатели  = Истина;
							ИначеЕсли ВыполненноеДействие = ПредставлениеДляОтчетаПоПроводкам Тогда
								ФормироватьОтчетПоПроводкам = Истина;
								УстановитьВсеПоказатели     = Истина;
							Иначе
								Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) Тогда
									ОткрытьЗначение(ПервыйЭлемент.Значение);
									Возврат;
								КонецЕсли;       
							КонецЕсли;
						Иначе 
							Возврат;
						КонецЕсли;  
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			Если ФормироватьКарточкуСчета Тогда 
				ФормаРасшифровка = Отчеты.isКарточкаСчетаGAAP.ПолучитьФорму(,, Новый УникальныйИдентификатор);
			//ИначеЕсли ФормироватьКарточкуСубконто Тогда
			//	ФормаРасшифровка = Отчеты.КарточкаСубконто.ПолучитьФорму(,, Новый УникальныйИдентификатор);
			//	ФормаРасшифровка.СписокВидовСубконто = ОтчетОбъект.СписокВидовСубконто.Скопировать();
			ИначеЕсли ФормироватьАнализСчета Тогда
				ФормаРасшифровка = Отчеты.isАнализСчетаGAAP.ПолучитьФорму(,, Новый УникальныйИдентификатор);
			//ИначеЕсли ФормироватьОборотыСчетаПоДням Тогда
			//	ФормаРасшифровка = Отчеты.ОборотыСчета.ПолучитьФорму(,, Новый УникальныйИдентификатор);
			//	ФормаРасшифровка.Периодичность = 6;
			//ИначеЕсли ФормироватьОборотыСчетаПоМесяцам Тогда
			//	ФормаРасшифровка = Отчеты.ОборотыСчета.ПолучитьФорму(,, Новый УникальныйИдентификатор);
			//	ФормаРасшифровка.Периодичность = 9;
			ИначеЕсли ФормироватьОСВПоСчету Тогда
				ФормаРасшифровка = Отчеты.isОборотноСальдоваяВедомостьПоСчетуGAAP.ПолучитьФорму(,, Новый УникальныйИдентификатор);
			ИначеЕсли ФормироватьОтчетПоПроводкам Тогда
				ФормаРасшифровка = Отчеты.isОтчетПоПроводкамGAAP.ПолучитьФорму(,, Новый УникальныйИдентификатор);
			Иначе
				Возврат;
			КонецЕсли;
			ФормаРасшифровка.РежимРасшифровки = Истина;
			
			Попытка
				ФормаРасшифровка.Счет = Счет;
			Исключение
				ЕстьСчет = Ложь;
			КонецПопытки;
			
			СписокПолейОтборов = Новый Массив;
			Для каждого Отбор из МассивПолей Цикл
				Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
					Если Отбор.Значение = NULL тогда
						Продолжить;
					КонецЕсли;
					Если Отбор.Поле = "Счет" И ЕстьСчет Тогда
					ИначеЕсли Отбор.Поле = "БухТипРесурса" Тогда
					ИначеЕсли Отбор.Поле = "Счет" И (ИдентификаторОбъекта = "ОтчетОбъект.isАнализСчетаGAAP") Тогда
//					ИначеЕсли Отбор.Поле = "Счет" И (ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета") Тогда
						ЗначениеСчет = ?(Счет.Уровень() > ФормаОтчета.Счет.Уровень(), Счет, ФормаОтчета.Счет); 
						ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Строка(Отбор.Поле) + БухТипРесурса, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
					ИначеЕсли (Отбор.Поле = "Счет" ИЛИ Отбор.Поле = "КорСчет") И Не ЕстьСчет Тогда
						Если Отбор.Поле = "КорСчет" И Не ПустаяСтрока(БухТипРесурса) Тогда      
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Счет" + ?(БухТипРесурса = "Дт", "Кт", "Дт"), Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);	
						Иначе
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);		
						КонецЕсли;
					ИначеЕсли Найти(Отбор.Поле, "Субконто") = 1 тогда
						//Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
						//	Если Счет <> Неопределено Тогда 
						//		ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
						//		ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
						//		ИндексСубконтоОтчет = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
						//		ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Субконто" + ИндексСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
						//	Иначе
						//		ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
						//		ИндексСубконто = Число(Сред(Отбор.Поле, 9));
						//		ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовСубконто[ИндексСубконто - 1].Значение);
						//	КонецЕсли;
						//	ДобавитьОтборПоВидСубконто = Ложь;
						//ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" И ФормироватьКарточкуСчета Тогда
						//	ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
						//	ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
						//	НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						//	Если НайденнаяСтрока <> Неопределено Тогда
						//		ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
						//		ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, СтрЗаменить(Строка(Отбор.Поле), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.Значение);
						//	КонецЕсли;
						//Иначе
							ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Сред(Отбор.Поле, ПозицияСубконто, СтрДлина(Отбор.Поле) - ПозицияСубконто + 1), Отбор.Значение);
						//КонецЕсли;
						СписокПолейОтборов.Добавить(Отбор.Поле);
					ИначеЕсли Найти(Отбор.Поле, "КорСубконто") = 1 тогда
						//Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
						//	Если КорСчет <> Неопределено Тогда
						//		ИндексКорСубконто = Сред(Отбор.Поле, 12, 1); 
						//		ПозицияКорСубконто = Найти(Отбор.Поле, "КорСубконто");
						//		ИндексКорСубконтоОтчет = КорСчет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовКорСубконто[Число(ИндексКорСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
						//		ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "КорСубконто" + ИндексКорСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));	
						//	Иначе
						//		ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
						//		ИндексСубконто = Число(Сред(Отбор.Поле, 12));
						//		ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовКорСубконто[ИндексСубконто - 1].Значение);
						//	КонецЕсли;
						//	ДобавитьОтборПоВидКорСубконто = Ложь;
						//Иначе
							ПозицияСубконто = Найти(Отбор.Поле, "КорСубконто");
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Сред(Отбор.Поле, ПозицияСубконто, СтрДлина(Отбор.Поле) - ПозицияСубконто + 1), Отбор.Значение);
						//КонецЕсли;
					ИначеЕсли Отбор.Поле = "Подразделение" Тогда
						Если ЗначениеЗаполнено(Отбор.Значение) И ДоступностьУчетаПоПодразделениям() И Отбор.Иерархия Тогда // СтандартныеОтчеты.ДоступностьУчетаПоПодразделениям
							ФормаРасшифровка.Подразделение = Отбор.Значение;
						Иначе
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение);
						КонецЕсли;
						ЕстьПодразделение = Истина;
					ИначеЕсли Отбор.Поле = "Организация" Тогда
						ФормаРасшифровка.Организация = Отбор.Значение;
					ИначеЕсли Отбор.Поле = "Показатель" Тогда 
						Показатель = Отбор.Значение;
					ИначеЕсли Отбор.Поле = "Период" ИЛИ Отбор.Поле = "Регистратор" Тогда 
					Иначе
						Если Отбор.Иерархия Тогда
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
						Иначе
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение);
						КонецЕсли;
					КонецЕсли;	
				ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Если Отбор.Представление = "###ОтборПоОрганизацииСОП###" Тогда
						Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
							Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
								ФормаРасшифровка.Организация                       = ЭлементОтбора.ПравоеЗначение;
								ФормаРасшифровка.ВключатьОбособленныеПодразделения = Истина;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли Отбор.Представление = "###Контроль###" Тогда
					КонецЕсли;
				ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если СписокПолейОтборов.Найти(Строка(Отбор.ЛевоеЗначение)) = Неопределено Тогда
						//Если Найти(Отбор.ЛевоеЗначение, "Субконто") = 1 И ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" И ФормироватьКарточкуСчета Тогда
						//	ИндексСубконто = Сред(Отбор.ЛевоеЗначение, 9, 1); 
						//	ПозицияСубконто = Найти(Отбор.ЛевоеЗначение, "Субконто");
						//	НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						//	Если НайденнаяСтрока <> Неопределено Тогда
						//		ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
						//		ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, СтрЗаменить(Строка(Отбор.ЛевоеЗначение), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.ПравоеЗначение, Отбор.ВидСравнения);
						//	КонецЕсли;
						//ИначеЕсли Отбор.Представление = "###ОтборПоОрганизации###" Тогда
						Если Отбор.Представление = "###ОтборПоОрганизации###" Тогда
							ФормаРасшифровка.Организация                       = Отбор.ПравоеЗначение;
							ФормаРасшифровка.ВключатьОбособленныеПодразделения = Ложь;
						ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") И ЕстьПодразделение Тогда
						ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") 
							И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
							И ДоступностьУчетаПоПодразделениям() Тогда // СтандартныеОтчеты.ДоступностьУчетаПоПодразделениям
							ФормаРасшифровка.Подразделение = Отбор.ПравоеЗначение;
						Иначе
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
				Если ДобавитьОтборПоВидСубконто Тогда
					Индекс = 1;
					Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
						Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "ВидСубконто" + Индекс, ВидСубконто.Значение);
							Индекс = Индекс + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ДобавитьОтборПоВидКорСубконто Тогда
					Индекс = 1;
					Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовКорСубконто Цикл
						Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "ВидКорСубконто" + Индекс, ВидСубконто.Значение);
							Индекс = Индекс + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если Период <> Неопределено Тогда
				ФормаРасшифровка.НачалоПериода = Период;
				ФормаРасшифровка.КонецПериода  = КонецПериода(Период, ОтчетОбъект.Периодичность); // СтандартныеОтчеты.КонецПериода
			Иначе
				ФормаРасшифровка.НачалоПериода = ОтчетОбъект.НачалоПериода;
				ФормаРасшифровка.КонецПериода  = ОтчетОбъект.КонецПериода;
			КонецЕсли;
			ФормаРасшифровка.Настроить();
			
			
			// Настройка показателей
			Для Каждого ЭлементСтруктуры Из ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета Цикл
				ЭлементСтруктуры.Значение.Значение = Ложь;
			КонецЦикла;
			Если УстановитьВсеПоказатели Тогда
				Для Каждого ЭлементСтруктуры Из ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета Цикл
					Если ЭлементСтруктуры.Значение.Использование Тогда
						ЭлементСтруктуры.Значение.Значение = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета[ЭлементСтруктуры.Ключ].Значение;
					КонецЕсли;
				КонецЦикла;
			Иначе
				
				//Одиноков ВА нач. 09.03.14
				Если Показатель = "СуммаСуммаКОРР" Тогда
					МассивПоказателей = Новый Массив;
					МассивПоказателей.Добавить("БУ");
					МассивПоказателей.Добавить("СуммаКОРР");
					МассивПоказателей.Добавить("СуммаСуммаКОРР");
					Для Каждого ЭлементМассива Из МассивПоказателей Цикл
						Если ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета[ЭлементМассива].Использование Тогда 
							ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета[ЭлементМассива].Значение = Истина;
						КонецЕсли;  
					КонецЦикла;
                 //Одиноков ВА кон. 09.03.14

				//Если Показатель = "Контроль" Тогда
				//	МассивПоказателей = Новый Массив;
				//	МассивПоказателей.Добавить("БУ");
				//	МассивПоказателей.Добавить("НУ");
				//	МассивПоказателей.Добавить("ПР");
				//	МассивПоказателей.Добавить("ВР");
				//	Для Каждого ЭлементМассива Из МассивПоказателей Цикл
				//		Если ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета[ЭлементМассива].Использование Тогда 
				//			ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета[ЭлементМассива].Значение = Истина;
				//		КонецЕсли;  
				//	КонецЦикла;
				Иначе
					ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета[Показатель].Значение = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ФормаРасшифровка.Открыть();
			ФормаРасшифровка.ОбновитьОтчет();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

/// Процедуры запуска отчета налоговых регистров
Процедура ОткрытьОтчетНалоговогоРегистра(ВидРегистра)  Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРегистра",ВидРегистра);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	isНалоговыеРегистры.Ссылка
	|ИЗ
	|	Справочник.isНалоговыеРегистры КАК isНалоговыеРегистры
	|ГДЕ
	|	(НЕ isНалоговыеРегистры.ЭтоГруппа)
	|	И (НЕ isНалоговыеРегистры.ПометкаУдаления)
	|	И isНалоговыеРегистры.ВидРегистра = &ВидРегистра";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Об = Отчеты.isНалоговыеРегистры.ПолучитьФорму(,,ВидРегистра);
		Об.НалоговыйРегистр = Выборка.Ссылка;
		Об.КонецПериода = НачалоМесяца(ТекущаяДата())-1;
		Об.НачалоПериода = НачалоМесяца(Об.КонецПериода);
		Об.Открыть();
	КонецЕсли;
	

КонецПроцедуры

Процедура Печать_АмортизацияНематериальныхАктивов() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.АмортизацияНематериальныхАктивов);
КонецПроцедуры

Процедура АмортизацияОсновныхСредств() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.АмортизацияОсновныхСредств);
КонецПроцедуры

Процедура АмортизацияОсновныхСредствПринятая() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.АмортизацияОсновныхСредствПринятая);
КонецПроцедуры

Процедура ВахтовыеПоселки() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ВахтовыеПоселки);
КонецПроцедуры

Процедура ВнереализационныеРасходы() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ВнереализационныеРасходы);
КонецПроцедуры

Процедура ВосстановлениеАмортизационнойПремии() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ВосстановлениеАмортизационнойПремии);
КонецПроцедуры

Процедура ДебиторскаяЗадолженностьСИстекшимСрокомДавности() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ДебиторскаяЗадолженностьСИстекшимСрокомДавности);
КонецПроцедуры

Процедура НалогНаПрибыльСДивидендов() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ДоходНаПрибыльСДиведендов);
КонецПроцедуры

Процедура ДоходыНеучитываемыеПриОпределенииНалоговойБазы() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ДоходыНеучитываемыеПриОпределенииНалоговойБазы);
КонецПроцедуры

Процедура ДоходыОтСписаннойПоСрокуДавностиКредиторскойЗадолженности() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ДоходыОтСписаннойПоСрокуДавностиКредиторскойЗадолженности);
КонецПроцедуры

Процедура КомандировочныеРасходы() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.КомандировочныеРасходы);
КонецПроцедуры

Процедура КонтролируемаяЗадолженность() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.КонтролируемаяЗадолженность);
КонецПроцедуры

Процедура КорпоративныйПодоходныйНалог() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.КорпоративныйПодоходныйНалог);
КонецПроцедуры

Процедура КосвенныеРасходы() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.КосвенныеРасходы);
КонецПроцедуры

Процедура КредиторскаяЗадолженностьСИстекшимСрокомДавности() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.КредиторскаяЗадолженностьСИстекшимСрокомДавности);
КонецПроцедуры

Процедура НалогиИСборы() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.НалогиИСборы);
КонецПроцедуры

Процедура ОстаткиНезавершенногоПроизводства() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ОстаткиНезавершенногоПроизводства);
КонецПроцедуры

Процедура ПредставительскиеРасходы() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ПредставительскиеРасходы);
КонецПроцедуры

Процедура ПроцентыПоКредитамПолученным() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ПроцентыПоКредитамПолученным);
КонецПроцедуры

Процедура ПрочиеРасходы() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ПрочиеРасходы);
КонецПроцедуры

Процедура ПрямыеРасходы() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ПрямыеРасходы);
КонецПроцедуры

Процедура РаспределениеПрибылиПоСубъектамРФ() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.РаспределениеПрибылиПоСубъектамРФ);
КонецПроцедуры

Процедура НалоговаяБаза() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.НалоговаяБаза);
КонецПроцедуры

Процедура РасходыБудущихПериодов() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.РасходыБудущихПериодов);
КонецПроцедуры

Процедура РасходыНаОплатуТруда() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.РасходыНаОплатуТруда);
КонецПроцедуры

Процедура РасходыНаРекламу() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.РасходыНаРекламу);
КонецПроцедуры

Процедура РасходыНеУчитываемыеВЦеляхНалогообложения() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.РасходыНеУчитываемыеВЦеляхНалогообложения);
КонецПроцедуры

Процедура РасходыПоСтрахованиюРаботников() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.РасходыПоСтрахованиюРаботников);
КонецПроцедуры

Процедура РеализацияПрочегоИмущества() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.РеализацияПрочегоИмущества);
КонецПроцедуры

Процедура РезервГодовойПремии() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.РезервГодовойПремии);
КонецПроцедуры

Процедура РезервыПоСомнительнымДолгам() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.РезервыПоСомнительнымДолгам);
КонецПроцедуры

Процедура СписанныеМатериальныеРасходы() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.СписанныеМатериальныеРасходы);
КонецПроцедуры

Процедура СуммаУбыткаУменьшающегоНалоговуюБазу() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.СуммаУбыткаУменьшающегоНалоговуюБазу);
КонецПроцедуры

Процедура ФинрезультатОтРеализацииАмортизируемогоИмущества() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ФинрезультатОтРеализацииАмортизируемогоИмущества);
КонецПроцедуры

Процедура ФинрезультатПоОбслуживающемуПроизводству() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ФинрезультатПоОбслуживающемуПроизводству);
КонецПроцедуры

Процедура ШтрафныеСанкцииКПолучению() Экспорт
	ОткрытьОтчетНалоговогоРегистра(Перечисления.isВидыНалоговыхРегистров.ШтрафныеСанкцииКПолучению);
КонецПроцедуры
//	Космодемьянский	09.09.2011	Вызов типовых налоговых регистров с конкретными настройками	{
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Регистр учета внереализационных расходов текущего периода - Прил.2 к листу 02
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
Процедура	ПроцентыПоДолговымОбязательствам()	Экспорт
	Об	= Отчеты.РегистрУчетаВнереализационныхРасходовТекущегоПериода.ПолучитьФорму(,,"ПроцентыПоДолговымОбязательствам");
	ВидыРасходов	= Новый СписокЗначений;
	ВидыРасходов.Добавить("Проценты по долговым обязательствам");
	Об.ВидыРасходов	= ВидыРасходов;
	Об.ДатаНач		= НачалоГода(ТекущаяДата());
	Об.ДатаКон		= КонецКвартала(ТекущаяДата());
	Об.Открыть();
КонецПроцедуры			//	ПроцентыПоДолговымОбязательствам()
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
Процедура	ШтрафыПениНеустойки()	Экспорт
	Об	= Отчеты.РегистрУчетаВнереализационныхРасходовТекущегоПериода.ПолучитьФорму(,,"ШтрафыПениНеустойки");
	ВидыРасходов	= Новый СписокЗначений;
	ВидыРасходов.Добавить("Штрафы, пени, неустойки");
	
	// Аверченков 18.07.2012, I-1С_КОРП-MSC-2012-01264, beg
	ВидыРасходов.Добавить("Возмещение убытков к получению (уплате)");
	// Аверченков 18.07.2012, I-1С_КОРП-MSC-2012-01264, end
	
	Об.ВидыРасходов	= ВидыРасходов;
	Об.ДатаНач		= НачалоГода(ТекущаяДата());
	Об.ДатаКон		= КонецКвартала(ТекущаяДата());
	Об.Открыть();
КонецПроцедуры			//	ШтрафыПениНеустойки()
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Регистр учета операций выбытия имущества, работ, услуг, прав - Прил.1 к Листу 02
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
Процедура	ВыручкаОтРеализацииТоваровСобственногоПроизводства()	Экспорт
	Об	= Отчеты.РегистрУчетаОперацийВыбытияИмущества.ПолучитьФорму(,,"ВыручкаОтРеализацииТоваровСобственногоПроизводства");
	ВидыДоходов	= Новый СписокЗначений;
	ВидыДоходов.Добавить("Выручка от реализации товаров собственного производства",,Истина);
	ВидыДоходов.Добавить("Выручка от реализации работ, услуг собственного производства",,Истина);
	Об.ВидыДоходов	= ВидыДоходов;
	Об.ДатаНач		= НачалоГода(ТекущаяДата());
	Об.ДатаКон		= КонецКвартала(ТекущаяДата());
	Об.Открыть();
КонецПроцедуры			//	ВыручкаОтРеализацииТоваровСобственногоПроизводства()
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
Процедура	ВыручкаОтРеализацииПокупныхТоваров()	Экспорт
	Об	= Отчеты.РегистрУчетаОперацийВыбытияИмущества.ПолучитьФорму(,,"ВыручкаОтРеализацииПокупныхТоваров");
	ВидыДоходов	= Новый СписокЗначений;
	ВидыДоходов.Добавить("Выручка от реализации покупных товаров и продукции",,Истина);
	Об.ВидыДоходов	= ВидыДоходов;
	Об.ДатаНач		= НачалоГода(ТекущаяДата());
	Об.ДатаКон		= КонецКвартала(ТекущаяДата());
	Об.Открыть();
КонецПроцедуры			//	ВыручкаОтРеализацииПокупныхТоваров()
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
Процедура	ВыручкаОтРеализацииИмущественныхПрав()	Экспорт
	Об	= Отчеты.РегистрУчетаОперацийВыбытияИмущества.ПолучитьФорму(,,"ВыручкаОтРеализацииИмущественныхПрав");
	ВидыДоходов	= Новый СписокЗначений;
	ВидыДоходов.Добавить("Выручка от реализации имущественных прав",,Истина);
	Об.ВидыДоходов	= ВидыДоходов;
	Об.ДатаНач		= НачалоГода(ТекущаяДата());
	Об.ДатаКон		= КонецКвартала(ТекущаяДата());
	Об.Открыть();
КонецПроцедуры			//	ВыручкаОтРеализацииИмущественныхПрав()
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
Процедура	ВыручкаОтРеализацииПрочегоИмущества()	Экспорт
	
	// Аверченков 15.06.2012, I-1С_КОРП-MSC-2012-01304, beg
	// Об	= Отчеты.РегистрУчетаОперацийВыбытияИмущества.ПолучитьФорму(,,"ВыручкаОтРеализацииПрочегоИмущества");
	Об	= Отчеты.РегистрУчетаДоходовТекущегоПериода.ПолучитьФорму(,,"ВыручкаОтРеализацииПрочегоИмущества");
	// end
	
	ВидыДоходов	= Новый СписокЗначений;
	ВидыДоходов.Добавить("Выручка от реализации прочего имущества",,Истина);
	
	// Аверченков 15.06.2012, I-1С_КОРП-MSC-2012-01304, beg
	// ВидыДоходов.Добавить("Выручка от реализации объектов строительства",,Истина);
	// end
	
	Об.ВидыДоходов	= ВидыДоходов;
	Об.ДатаНач		= НачалоГода(ТекущаяДата());
	Об.ДатаКон		= КонецКвартала(ТекущаяДата());
	Об.Открыть();
КонецПроцедуры			//	ВыручкаОтРеализацииПрочегоИмущества()
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
Процедура	ВыручкаОтРеализацииЦенныхБумаг()	Экспорт
	Об	= Отчеты.РегистрУчетаОперацийВыбытияИмущества.ПолучитьФорму(,,"ВыручкаОтРеализацииЦенныхБумаг");
	ВидыДоходов	= Новый СписокЗначений;
	ВидыДоходов.Добавить("Выручка от реализации ЦБ",,Истина);
	Об.ВидыДоходов	= ВидыДоходов;
	Об.ДатаНач		= НачалоГода(ТекущаяДата());
	Об.ДатаКон		= КонецКвартала(ТекущаяДата());
	Об.Открыть();
КонецПроцедуры			//	ВыручкаОтРеализацииЦенныхБумаг()
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Регистр учета доходов текущего периода - Прил.1 к Листу 02
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
Процедура	ИтогоДоходовОтРеализации()	Экспорт
	Об	= Отчеты.РегистрУчетаДоходовТекущегоПериода.ПолучитьФорму(,,"ИтогоДоходовОтРеализации");
	ВидыДоходов	= Новый СписокЗначений;
	ВидыДоходов.Добавить("Выручка от реализации товаров, работ, услуг");
	ВидыДоходов.Добавить("Выручка от реализации покупных товаров");
	ВидыДоходов.Добавить("Выручка от реализации ОС");
	ВидыДоходов.Добавить("Выручка от реализации НМА");
	ВидыДоходов.Добавить("Выручка от реализации имущественных прав");
	ВидыДоходов.Добавить("Выручка от реализации прочего имущества");
	ВидыДоходов.Добавить("Выручка от реализации прав требования");
	ВидыДоходов.Добавить("Выручка от уступки права до наступления срока платежа");
	ВидыДоходов.Добавить("Выручка от уступки права после наступления срока платежа");
	Об.ВидыДоходов	= ВидыДоходов;
	Об.ДатаНач		= НачалоГода(ТекущаяДата());
	Об.ДатаКон		= КонецКвартала(ТекущаяДата());
	Об.Открыть();
КонецПроцедуры			//	ИтогоДоходовОтРеализации()
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
Процедура	ВнереализационныеДоходы()	Экспорт
	Об	= Отчеты.РегистрУчетаДоходовТекущегоПериода.ПолучитьФорму(,,"ВнереализационныеДоходы");
	ВидыДоходов	= Новый СписокЗначений;
	ВидыДоходов.Добавить("Внереализационные доходы");
	Об.ВидыДоходов	= ВидыДоходов;
	Об.ДатаНач		= НачалоГода(ТекущаяДата());
	Об.ДатаКон		= КонецКвартала(ТекущаяДата());
	Об.Открыть();
КонецПроцедуры			//	ВнереализационныеДоходы()
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Космодемьянский	09.09.2011	Вызов типовых налоговых регистров с конкретными настройками	}

//
// Перенесенные из других модулей
//

// Из модуля СтандартныеОтчеты

Процедура КолонкаСчетПриИзменении(Элемент) Экспорт
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
			Если ТекущаяСтрока.Счет.ВидыСубконто.Количество() = 0 Тогда
				ТекущаяСтрока.ПоСубсчетам = Истина;
				ТекущаяСтрока.Представление = "";
				ТекущаяСтрока.ПоСубконто.Очистить();
			Иначе
				ТекущаяСтрока.ПоСубсчетам = Ложь;
				ТекущаяСтрока.ПоСубконто.Очистить();
				Представление = "";
				Для Индекс = 0 По ТекущаяСтрока.Счет.ВидыСубконто.Количество() - 1 Цикл
					ВидСубконто = ТекущаяСтрока.Счет.ВидыСубконто[Индекс].ВидСубконто;
					ТекущаяСтрока.ПоСубконто.Добавить(ВидСубконто, , Истина);
					Представление = Представление + ВидСубконто + ", ";
				КонецЦикла;
				ТекущаяСтрока.Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПростойТип(Значение) Экспорт
	
	ОписаниеПростыхТипов = Новый ОписаниеТипов("Дата, Строка, Булево, Число");
	
	Возврат ОписаниеПростыхТипов.СодержитТип(ТипЗнч(Значение));
	
КонецФункции

Функция КонецПериода(Период, Периодичность) Экспорт
	
	КонецПериода = Период;
	Если Периодичность = 6 Тогда       //День
		КонецПериода = КонецДня(Период);
	ИначеЕсли Периодичность = 7 Тогда  //Неделя
		КонецПериода = КонецНедели(Период);
	ИначеЕсли Периодичность = 8 Тогда  //Декада
		Если День(Период) > 20 Тогда
			КонецПериода = КонецМесяца(Период);
		Иначе
			КонецПериода = КонецДня(Период + 10 * 86400 - 1);
		КонецЕсли; 
	ИначеЕсли Периодичность = 9 Тогда  //Месяц
		КонецПериода = КонецМесяца(Период);
	ИначеЕсли Периодичность = 10 Тогда //Квартал
		КонецПериода = КонецКвартала(Период);
	ИначеЕсли Периодичность = 11 Тогда //Полугодие
		КонецПериода = ?(Месяц(Период) < 7, КонецДня(Дата(Год(Период), 6, 30)), КонецДня(Дата(Год(Период), 12, 31)));
	ИначеЕсли Периодичность = 12 Тогда //Год
		КонецПериода = КонецГода(Период);
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции

Функция ДоступностьУчетаПоПодразделениям() Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	
	Если МетаданныеИмя = "БухгалтерияПредприятияКОРП" 
		ИЛИ МетаданныеИмя = "БухгалтерияАвтономногоУчрежденияКОРП" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура СохранитьНастройку(ОтчетОбъект) Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ОтчетОбъект);
	СсылкаНаОбъект = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	СохраненнаяНастройка = ОтчетОбъект.СохраненнаяНастройка;
	Если СохраненнаяНастройка = Неопределено Тогда
		Пользователи = Новый Массив;
		Пользователи.Добавить(ПараметрыСеанса.ТекущийПользователь);
		Пользователи.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	СохраненныеНастройки.Ссылка КАК СохраненнаяНастройка
		|ИЗ
		|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|		ПО СохраненныеНастройкиПользователи.Ссылка = СохраненныеНастройки.Ссылка
		|ГДЕ
		|	СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
		|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
		|	И СохраненныеНастройкиПользователи.Пользователь В(&Пользователи)
		|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("Пользователи", Пользователи);
		Запрос.УстановитьПараметр("НастраиваемыйОбъект", СсылкаНаОбъект);
		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаРезультата.Количество() > 0 Тогда
			СохраненнаяНастройка = ТаблицаРезультата[0].СохраненнаяНастройка;
		Иначе
			Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
			Настройка.НастраиваемыйОбъект = СсылкаНаОбъект;
			Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
			Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
			Настройка.ИспользоватьПриОткрытии = Истина;
			НовыйПользователь = Настройка.Пользователи.Добавить();
			НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
			Настройка.Записать();
			
			СохраненнаяНастройка = Настройка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Из модуля isДоработкиКлиент

Процедура УстановитьТекстИзСпискаВыбора(Ячейка,ТабличноеПоле,ДанныеСтроки) Экспорт
	Значение = ДанныеСтроки[Ячейка.Имя];
	СписокВыбора = ТабличноеПоле.Колонки[Ячейка.Имя].ЭлементУправления.СписокВыбора;
	СтрокаСписка = СписокВыбора.НайтиПоЗначению(Значение);
	Ячейка.УстановитьТекст(?(СтрокаСписка<>Неопределено,СтрокаСписка.Представление,"..."));	
КонецПроцедуры

Процедура ВыбратьЭлементСправочника(Элемент,СтруктураОтбора, СтандартнаяОбработка, ФормаВыбора = Неопределено, Заголовок="") Экспорт
	СтандартнаяОбработка = Ложь;
	Фрм=Справочники[Элемент.Значение.Метаданные().Имя].ПолучитьФормуВыбора(ФормаВыбора,Элемент);	
	Для каждого ТекОтбор Из СтруктураОтбора Цикл
		Если ТипЗнч(ТекОтбор.Значение)=Тип("СписокЗначений") Тогда
			Фрм.Отбор[ТекОтбор.Ключ].Использование=Истина;
			Фрм.Отбор[ТекОтбор.Ключ].ВидСравнения=ВидСравнения.ВСписке;
			Фрм.Отбор[ТекОтбор.Ключ].Значение=ТекОтбор.Значение;
		Иначе
			Фрм.Отбор[ТекОтбор.Ключ].Установить(ТекОтбор.Значение);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Заголовок) Тогда
		Фрм.Заголовок=Заголовок;
	КонецЕсли;
	//Фрм.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	Фрм.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	Фрм.НачальноеЗначениеВыбора=Элемент.Значение;
	Фрм.Открыть();
КонецПроцедуры

Процедура ВыбратьДокумент(Элемент,СтруктураОтбора, СтандартнаяОбработка, ФормаВыбора = Неопределено, Заголовок="") Экспорт
	СтандартнаяОбработка = Ложь;
	Фрм=Документы[Элемент.Значение.Метаданные().Имя].ПолучитьФормуВыбора(ФормаВыбора,Элемент);	
	Для каждого ТекОтбор Из СтруктураОтбора Цикл
		Если ТипЗнч(ТекОтбор.Значение)=Тип("СписокЗначений") Тогда
			Фрм.Отбор[ТекОтбор.Ключ].Использование=Истина;
			Фрм.Отбор[ТекОтбор.Ключ].ВидСравнения=ВидСравнения.ВСписке;
			Фрм.Отбор[ТекОтбор.Ключ].Значение=ТекОтбор.Значение;
		Иначе
			Фрм.Отбор[ТекОтбор.Ключ].Установить(ТекОтбор.Значение);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Заголовок) Тогда
		Фрм.Заголовок=Заголовок;
	КонецЕсли;
	Фрм.НачальноеЗначениеВыбора=Элемент.Значение;
	Фрм.Открыть();
КонецПроцедуры

