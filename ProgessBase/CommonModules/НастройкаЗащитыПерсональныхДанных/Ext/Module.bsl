// Процедура извлекает из макета данные и сериализует их в таблицу значений
//
Функция ПолучитьСведенияОПерсональныхДанных() Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ДвоичныеДанные = ПолучитьОбщийМакет("СведенияОПерсональныхДанных");
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	ЗащищаемыеДанные = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();

	Возврат ЗащищаемыеДанные;
	
КонецФункции

// Процедура устанавливает режим использования журнала регистрации по уровням
// 
Функция УстановитьУровниИспользованияЖурналаРегистрации(ИспользованиеЖурналаРегистрации) Экспорт
	
	Если НЕ ПравоДоступа("МонопольныйРежим", Метаданные) Тогда
		Возврат "Не удалось установить монопольный режим, недостаточно прав доступа!";
	КонецЕсли;
	
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		Возврат "С информационной базой работают другие пользователи.
		|В данный момент невозможно установить монопольный режим!";
	КонецПопытки;
	
	Попытка
		УровниЖурналаРегистрации = Новый Массив;
		Если ИспользованиеЖурналаРегистрации Тогда
			УровниЖурналаРегистрации.Добавить(УровеньЖурналаРегистрации.Информация);
			УровниЖурналаРегистрации.Добавить(УровеньЖурналаРегистрации.Ошибка);
			УровниЖурналаРегистрации.Добавить(УровеньЖурналаРегистрации.Предупреждение);
			УровниЖурналаРегистрации.Добавить(УровеньЖурналаРегистрации.Примечание);
		КонецЕсли;
		УстановитьИспользованиеЖурналаРегистрации(УровниЖурналаРегистрации);
	Исключение
		ТекстОшибки = "Не удалось изменить режим использования журнала регистрации по причине" + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	УстановитьМонопольныйРежим(Ложь);
	
	Возврат ТекстОшибки;
	
КонецФункции

#Если ТолстыйКлиентОбычноеПриложение Тогда	
	
Функция РежимЗащитыПерсональныхДанныхДоступен() Экспорт
	
	ПричинаНедоступностиРежима = "";
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
	ЧастиВерсии = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ВерсияПриложения, ".");
	
	// версия "выше" 8.2.9.. 
	Если ЧастиВерсии.Количество() > 2 И (Число(ЧастиВерсии[1]) > 1 И Число(ЧастиВерсии[2]) > 9 Или Число(ЧастиВерсии[1]) > 2) Тогда
		ЗащитаПерсональныхДанных = ОбработкаЗащитаПерсональныхДанных();
		Если ЗащитаПерсональныхДанных.РежимСовместимости81() Тогда
			ПричинаНедоступностиРежима = НСтр("ru = 'Управление персональными данными в соответствии с требованиями Федерального закона от 27.07.2006 N152-ФЗ «О персональных данных» недоступно при использовании режима совместимости с версией 8.1'");
		КонецЕсли;
	Иначе
		// версия ниже 8.2.10
		ПричинаНедоступностиРежима = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Управление персональными данными в соответствии с требованиями Федерального закона от 27.07.2006 N152-ФЗ «О персональных данных» доступно %1 при использовании платформы 1С:Предприятие версии 8.2.10 и выше'"),
			?(Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0, 
				НСтр("ru = 'в конфигурации версии ПРОФ'"), ""));
	КонецЕсли;
	
	Возврат ПричинаНедоступностиРежима;
	
КонецФункции
	
Функция ОбработкаЗащитаПерсональныхДанных() 
	
	ПолноеИмяФайлаОбработки = КаталогВременныхФайлов() + "ЗащитаПерсональныхДанных.epf";
	ФайлВнешнейОбработки = Новый Файл(ПолноеИмяФайлаОбработки);
	
	Если Не ФайлВнешнейОбработки.Существует() Тогда
		ДвоичныеДанные = ПолучитьОбщийМакет("ЗащитаПерсональныхДанных");
		ДвоичныеДанные.Записать(ПолноеИмяФайлаОбработки);
	КонецЕсли;
	
	Возврат ВнешниеОбработки.Создать(ПолноеИмяФайлаОбработки);
	
КонецФункции

// Процедура вызывает установку использования дополнительных событий 
//  журнала регистрации
//
Процедура УстановитьЗащитуПерсональныхДанных() Экспорт
	
	ЗащитаПерсональныхДанных = ОбработкаЗащитаПерсональныхДанных();
	ЗащитаПерсональныхДанных.УстановитьИспользованиеСобытийЖурнала();
	
КонецПроцедуры

#КонецЕсли

// Процедура выполняет уничтожение персональных данных для тех субъектов, 
//  у которых явно задан срок предоставления данных (отличен от 0)
//  Выполняется регламентным заданием УничтожениеПерсональныхДанных
//
Процедура УничтожитьПерсональныеДанныеПредоставленныеНаОпределенныйСрок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = НастройкаЗащитыПерсональныхДанныхПереопределяемый.ТекстЗапросаСубъектыУничтоженияПерсональныхДанных();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		УправлениеПерсональнымиДанными = Обработки.УправлениеПерсональнымиДанными.Создать();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			УправлениеПерсональнымиДанными.Субъект = Выборка.Субъект;
			УправлениеПерсональнымиДанными.УничтожитьПерсональныеДанныеСубъекта();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
