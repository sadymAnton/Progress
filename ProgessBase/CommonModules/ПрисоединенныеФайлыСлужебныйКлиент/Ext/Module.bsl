
#Если ВебКлиент Тогда
// Помещает файл с диска в хранилище присоединенных файлов (веб-клиент).
// 
// Параметры:
//  ВладелецФайла           - Ссылка на владельца файла.
//  НастройкиРаботыСФайлами - Структура.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Ссылка на файл.
//
Функция ПоместитьВыбранныеФайлыВХранилищеВеб(Знач ВладелецФайла, Знач ИдентификаторФормы) Экспорт
	
	АдресВременногоХранилищаФайла = "";
	ИмяФайла = "";
	Если НЕ ПоместитьФайл(АдресВременногоХранилищаФайла, ИмяФайла, ИмяФайла, Истина, ИдентификаторФормы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиПути = ФайловыеФункцииКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяФайла);
	
	Если СтрокиПути.Количество() >= 2 Тогда
		Расширение = СтрокиПути[СтрокиПути.Количество()-1];
		ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла
			           |""%1""
			           |во временное хранилище.'"),
			ИмяФайла);
	КонецЕсли;
	
	ФайловыеФункцииКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(Расширение);
	
	// Создание карточки Файла в базе данных.
	ПрисоединенныйФайл = ПрисоединенныеФайлыСлужебныйВызовСервера.ДобавитьФайл(
		ВладелецФайла,
		ИмяБезРасширения,
		Расширение,
		,
		,
		АдресВременногоХранилищаФайла,
		"");
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции
#КонецЕсли

// Помещает отредактированные файлы в хранилище.
// Используется, как обработчик команды окончания редактирования файлов.
//
// Параметры
//  ДанныеФайла        - Структура с данными файла.
//  ИнформацияОФайле   - Структура (возвращаемое значение) - информация о файле.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Истина - файл успешно помещен во временное хранилище.
//
Функция ПоместитьРедактируемыйФайлНаДискеВХранилище(Знач ДанныеФайла, ИнформацияОФайле, Знач ИдентификаторФормы) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		
		РабочийКаталогПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьРабочийКаталогПользователя();
		
		ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		Если НЕ Файл.Существует() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Файл не найден в рабочем каталоге.'"));
			Возврат Ложь;
		КонецЕсли;
		
		Возврат ПрисоединенныеФайлыКлиент.ПоместитьФайлНаДискеВХранилище(
			ДанныеФайла, ИнформацияОФайле, ПолноеИмяФайлаНаКлиенте, ИдентификаторФормы);
		
	Иначе
#Если ВебКлиент Тогда
		Результат = ПоместитьФайлНаДискеВХранилищеВеб(ДанныеФайла, ИнформацияОФайле, ИдентификаторФормы);
		
		Если НЕ Результат Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ДанныеФайла.ИмяФайла <> ИнформацияОФайле.ИмяФайла Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Имя выбранного файла
				           |""%1""
				           |отличается от имени файла в хранилище
				           |""%2"".
				           |
				           |Продолжить?'"),
				ИнформацияОФайле.ИмяФайла,
				ДанныеФайла.ИмяФайла);
			
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Если Ответ <> КодВозвратаДиалога.ОК Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
#КонецЕсли
	КонецЕсли;
	
КонецФункции

// Выбирает файл с диска и помещает его во временное хранилище на сервере.
//
// Параметры:
//  ДанныеФайла        - Структура с данными файла.
//  ИнформацияОФайле   - Структура (возвращаемое значение) - информация о файле.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Истина - файл успешно выбран и помещен во временное хранилище, иначе Ложь.
//
Функция ВыбратьФайлНаДискеИПоместитьВХранилище(Знач ДанныеФайла, ИнформацияОФайле, Знач ИдентификаторФормы) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла     = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		ВыборФайла.Расширение         = ДанныеФайла.Расширение;
		ВыборФайла.Фильтр             = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		                                НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДанныеФайла.Расширение);
		
		Если НЕ ВыборФайла.Выбрать() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат ПрисоединенныеФайлыКлиент.ПоместитьФайлНаДискеВХранилище(
			ДанныеФайла, ИнформацияОФайле, ВыборФайла.ПолноеИмяФайла, ИдентификаторФормы);
		
	Иначе
#Если ВебКлиент Тогда
		Возврат ПоместитьФайлНаДискеВХранилищеВеб(ДанныеФайла, ИнформацияОФайле, ИдентификаторФормы);
#КонецЕсли
	КонецЕсли;
	
КонецФункции

#Если ВебКлиент Тогда
// Помещает файл с диска клиента во временное хранилище.
//  Аналог функции ПоместитьФайлНаДискеВХранилище
// для веб-клиента без расширения для работы с файлами.
//
// Параметры:
//  ДанныеФайла             - Структура с данными файла.
//  ИнформацияОФайле        - Структура (возвращаемое значение) с информацией о файле.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Булево - Истина - файл успешно помещен в хранилище, иначе Ложь.
//
Функция ПоместитьФайлНаДискеВХранилищеВеб(Знач ДанныеФайла, ИнформацияОФайле, Знач ИдентификаторФормы)
	
	АдресВременногоХранилищаФайла = "";
	ВыбранноеИмяФайла = "";
	
	Если Не ПоместитьФайл(АдресВременногоХранилищаФайла, ДанныеФайла.ИмяФайла, ВыбранноеИмяФайла, Истина, ИдентификаторФормы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокиПути = ФайловыеФункцииКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ВыбранноеИмяФайла);
	
	Если СтрокиПути.Количество() >= 2 Тогда
		НовоеИмя = СтрокиПути[СтрокиПути.Количество()-2];
		НовоеРасширение = СтрокиПути[СтрокиПути.Количество()-1];
		ИмяФайла = НовоеИмя + "." + НовоеРасширение;
		
	ИначеЕсли СтрокиПути.Количество() = 1 Тогда
		НовоеИмя = СтрокиПути[0];
		НовоеРасширение = "";
		ИмяФайла = НовоеИмя;
	КонецЕсли;
	
	ФайловыеФункцииКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(НовоеРасширение);
	
	ИнформацияОФайле = Новый Структура;
	ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная",   Неопределено);
	ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВременногоХранилищаФайла);
	ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
	ИнформацияОФайле.Вставить("ИмяФайла",                       ИмяФайла);
	ИнформацияОФайле.Вставить("Расширение",                     НовоеРасширение);
	
	Возврат Истина;
	
КонецФункции
#КонецЕсли

// Открывает каталог с файлом (при необходимости получает файл из хранилища).
// Используется, как обработчик команды открытия каталога с файлом.
//
// Параметры:
//  ДанныеФайла - Структура с данными файла.
//
Процедура ОткрытьКаталогСФайлом(Знач ДанныеФайла) Экспорт
	
	Перем ПолноеИмяФайла;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		РабочийКаталогПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьРабочийКаталогПользователя();
		
		Если ПустаяСтрока(РабочийКаталогПользователя) Тогда
			Предупреждение(НСтр("ru = 'Не задан рабочий каталог'"));
			Возврат;
		КонецЕсли;
		
		ПолныйПуть = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолныйПуть);
		
		Если НЕ Файл.Существует() Тогда
			Ответ = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл ""%1""
				           |отсутствует в рабочем каталоге.
				           |
				           |Получить файл из хранилища файлов?'"),
				Файл.Имя),
			РежимДиалогаВопрос.ДаНет);
			
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			ПолноеИмяФайлаНаКлиенте = "";
			ПрисоединенныеФайлыКлиент.ПолучитьФайлВРабочийКаталог(
				ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
				ДанныеФайла.ОтносительныйПуть,
				ДанныеФайла.ДатаМодификацииУниверсальная,
				ДанныеФайла.ИмяФайла,
				РабочийКаталогПользователя,
				ПолноеИмяФайлаНаКлиенте);
			
		КонецЕсли;
		
		ФайловыеФункцииКлиент.ОткрытьПроводникСФайлом(ПолныйПуть);
	Иначе
#Если ВебКлиент Тогда
		ФайловыеФункцииКлиент.ПредупредитьОНеобходимостиРасширенияРаботыСФайлами();
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Формирует подпись для двоичных данных файла:
// - предлагает пользователю диалог выбора сертификатов ЭЦП,
// - подписывает двоичные данные присоединенного файла с целью получения подписи.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//  ДанныеФайла        - Структура с данными файла.
//  ДанныеПодписи      - Структура (возвращаемое значение) - сформированная подпись.
//
// Возвращаемое значение:
//  Булево - Истина, если данные присоединенного файла успешно подписаны,
//           Ложь, если пользователь отказался от подписания или произошла ошибка.
//
Функция ВыбратьСертификатыЭЦПИСформироватьДанныеПодписи(Знач ПрисоединенныйФайл, Знач ДанныеФайла, ДанныеПодписи) Экспорт
	
#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииКлиент.ПредупредитьОНеобходимостиРасширенияРаботыСКриптографией();
		Возврат Ложь;
	КонецЕсли;
#КонецЕсли
	
	МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
	
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ОбъектСсылка", МассивСтруктурСертификатов, ПрисоединенныйФайл);
	
	СтруктураПараметровПодписи = ОткрытьФормуМодально("ОбщаяФорма.УстановкаПодписиЭЦП", ПараметрыФормы);
	
	Если ТипЗнч(СтруктураПараметровПодписи) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Ложь
	КонецЕсли;
	
	ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(
		МенеджерКриптографии,
		ПрисоединенныйФайл,
		ДвоичныеДанные,
		СтруктураПараметровПодписи);
	
	Возврат Истина;
	
КонецФункции

// Возвращает подписи, для чего вызывает диалог добавления подписей.
//
// ОСОБЫЕ УСЛОВИЯ
// Требуется наличие подключенного расширения для работы с файлами
// и расширения для работы со средствами криптографии.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Массив Структур подписей.
//
Функция ПолучитьМассивПодписей(Знач ПрисоединенныйФайл, Знач ИдентификаторФормы = Неопределено) Экспорт
	
	МассивФайловПодписей = ОткрытьФормуМодально("ОбщаяФорма.ДобавлениеПодписиИзФайла");
	
	Если ТипЗнч(МассивФайловПодписей) <> Тип("Массив") ИЛИ МассивФайловПодписей.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат ФайловыеФункцииКлиент.СформироватьПодписиДляЗанесениюВБазу(
		ПрисоединенныйФайл, МассивФайловПодписей, ИдентификаторФормы);
	
КонецФункции

// Служебная процедура используется для оповещения системы об изменении объекта,
// а так же для отображения оповещения пользователя о добавлении подписей.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл с добавленными подписями
//  КоличествоПодписей - количество добавленных подписей
//
Процедура ОповеститьОДобавленииПодписиИзФайла(ПрисоединенныйФайл, КоличествоПодписей) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	
	Если КоличествоПодписей = 1 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлена подпись из файла для ""%1"".'"),
			ПрисоединенныйФайл);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлены подписи из файлов для ""%1"".'"),
			ПрисоединенныйФайл);
	КонецЕсли;
	
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// Шифрует двоичные данные файла с помощью сертификатов, выбранных пользователем.
//
// Параметры:
//  ПрисоединенныйФайл  - Ссылка на файл.
//  ДанныеФайла         - Структура с данными файла.
//  ИдентификаторФормы  - УникальныйИдентификатор формы.
//  ЗашифрованныеДанные - Структура (возвращаемое значение) - содержит зашифрованные данные файла (для записи).
//  МассивОтпечатков    - Массив    (возвращаемое значение) - содержит отпечатки.
//
// Возвращаемое значение:
//  Истина, если данные успешно зашифрованы, Ложь - иначе.
//
Функция ПолучитьЗашифрованныеДанные(Знач ПрисоединенныйФайл,
                                    Знач ДанныеФайла,
                                    Знач ИдентификаторФормы,
                                    ЗашифрованныеДанные,
                                    МассивОтпечатков) Экспорт
	
#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииКлиент.ПредупредитьОНеобходимостиРасширенияРаботыСКриптографией();
		Возврат Ложь;
	КонецЕсли;
#КонецЕсли
	
	Если ДанныеФайла.Зашифрован Тогда
		Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1""
			           |уже зашифрован.'"), Строка(ПрисоединенныйФайл)));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ДанныеФайла.Редактирует.Пустая() Тогда
		Предупреждение(НСтр("ru = 'Нельзя зашифровать занятый файл.'"));
		Возврат Ложь;
	КонецЕсли;
	
	МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Ложь);
	
	ОтпечатокЛичногоСертификатаДляШифрования = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ОтпечатокЛичногоСертификатаДляШифрования;
	
	// Отпечаток сохраненный в ХранилищеНастроек мог устареть - сертификат могли уже удалить.
	Если ОтпечатокЛичногоСертификатаДляШифрования <> Неопределено И НЕ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
		Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОтпечатокЛичногоСертификатаДляШифрования, Истина); // ТолькоЛичные
		Если Сертификат = Неопределено Тогда
			ОтпечатокЛичногоСертификатаДляШифрования = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ОтпечатокЛичногоСертификатаДляШифрования = Неопределено
	 ИЛИ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
		
		МассивСтруктурЛичныхСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина); // ТолькоЛичные
		
		ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов", МассивСтруктурЛичныхСертификатов);
		СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификата", ПараметрыФормы);
		Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
			ОтпечатокЛичногоСертификатаДляШифрования = СтруктураВозврата.Отпечаток;
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения(
				"ЭЦП",
				"ОтпечатокЛичногоСертификатаДляШифрования",
				ОтпечатокЛичногоСертификатаДляШифрования);
		Иначе
			Предупреждение(НСтр("ru = 'Не выбран персональный сертификат для шифрования.'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСтруктурСертификатов",               МассивСтруктурСертификатов);
	ПараметрыФормы.Вставить("ФайлСсылка",                               ПрисоединенныйФайл);
	ПараметрыФормы.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", ОтпечатокЛичногоСертификатаДляШифрования);
	
	МассивСертификатов = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификатовШифрования", ПараметрыФормы);
	
	Если ТипЗнч(МассивСертификатов) = Тип("Массив") Тогда
		
		Возврат ВыполнитьШифрованиеПоПараметрам(МассивСертификатов,
		                                        ДанныеФайла,
		                                        ИдентификаторФормы,
		                                        ЗашифрованныеДанные,
		                                        МассивОтпечатков);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Шифрует двоичные данные файла по указанному массиву сертификатов.
//
// Параметры:
//  МассивСертификатов  - Массив сертификатов для шифрования.
//  ДанныеФайла         - Структура данных файла.
//  ИдентификаторФормы  - УникальныйИдентификатор формы.
//  ЗашифрованныеДанные - Структура (возвращаемое значение) - содержит зашифрованные данные файла.
//  МассивОтпечатков    - Массив    (возвращаемое значение) - содержит отпечатки.
//
// Возвращаемое значение:
//  Истина - шифрование выполнено успешно, иначе Ложь.
//
Функция ВыполнитьШифрованиеПоПараметрам(Знач МассивСертификатов,
                                        Знач ДанныеФайла,
                                        Знач ИдентификаторФормы,
                                        ЗашифрованныеДанные,
                                        МассивОтпечатков)
	
	МассивОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из МассивСертификатов Цикл
		Отпечаток = Base64Строка(Сертификат.Отпечаток);
		Представление = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
		ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
		
		ОтпечатокСтруктура = Новый Структура("Отпечаток, Представление, Сертификат", Отпечаток, Представление, ДвоичныеДанныеСертификата);
		МассивОтпечатков.Добавить(ОтпечатокСтруктура);
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Выполняется шифрование ...'"));
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ШифрованныйФайлДвоичныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанные, МассивСертификатов);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ШифрованныйФайлДвоичныеДанные, ИдентификаторФормы);
	
	ЗашифрованныеДанные = Новый Структура;
	ЗашифрованныеДанные.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	
	Состояние(НСтр("ru = 'Шифрование завершено.'"));
	
	Возврат Истина;
	
КонецФункции

// Удаляет файл из рабочего каталога, оповещает об изменениях открытые формы.
Процедура ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталоге(Знач ПрисоединенныйФайл, Знач ДанныеФайла) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файл ""%1""
		           |зашифрован.'"),
		ПрисоединенныйФайл) );
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		
		РабочийКаталогПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьРабочийКаталогПользователя();
		ПолныйПутьКФайлу = РабочийКаталогПользователя + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолныйПутьКФайлу);
		
		Если Файл.Существует() Тогда
			Попытка
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолныйПутьКФайлу);
			Исключение
				// Попытка удалить файл с диска.
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает расшифрованные данные файла.
//
// Параметры:
//  ПрисоединенныйФайл   - Ссылка на файл.
//  ДанныеФайла          - Структура с данными файла.
//  РасшифрованныеДанные - Структура (возвращаемое значение) - содержит расшифрованные данные.
//  ИдентификаторФормы   - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Истина - данные успешно расшифрованы, Ложь - данные не расшифрованы.
// 
Функция ПолучитьРасшифрованныеДанные(Знач ПрисоединенныйФайл, Знач ДанныеФайла, РасшифрованныеДанные, Знач ИдентификаторФормы) Экспорт
	
#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииКлиент.ПредупредитьОНеобходимостиРасширенияРаботыСКриптографией();
		Возврат Ложь;
	КонецЕсли;
#КонецЕсли
	
	ПредставленияСертификатов = "";
	
	МассивСертификатовШифрования = ДанныеФайла.МассивСертификатовШифрования;
	Для Каждого СтруктураСертификата Из МассивСертификатовШифрования Цикл
		Отпечаток = СтруктураСертификата.Отпечаток;
		Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток, Истина);
		Если Сертификат <> Неопределено Тогда 
			Если НЕ ПустаяСтрока(ПредставленияСертификатов) Тогда
				ПредставленияСертификатов = ПредставленияСертификатов + Символы.ПС;
			КонецЕсли;
			ПредставленияСертификатов = ПредставленияСертификатов + СтруктураСертификата.Представление;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",                 НСтр("ru = 'Введите пароль для расшифровки'"));
	ПараметрыФормы.Вставить("ПредставленияСертификатов", ПредставленияСертификатов);
	ПараметрыФормы.Вставить("Файл",                      ПрисоединенныйФайл);
	
	КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВводПароляСОписаниями", ПараметрыФормы);
	
	Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
		Пароль = КодВозврата;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется расшифровка ...'"));
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	ДвоичныеДанныеРасшифрованные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
	
	АдресВременногоХранилищаРасшифрованныхДанных = ПоместитьВоВременноеХранилище(
		ДвоичныеДанныеРасшифрованные, ИдентификаторФормы);
	
#Если ВебКлиент Тогда
	АдресВременногоХранилищаТекста = "";
#Иначе
	ИзвлекатьТекстыФайловНаСервере = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере;
	
	Если НЕ ИзвлекатьТекстыФайловНаСервере Тогда
		
		ПолныйПутьКФайлу = ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение);
		ДвоичныеДанныеРасшифрованные.Записать(ПолныйПутьКФайлу);
		
		АдресВременногоХранилищаТекста =
			ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
				ПолныйПутьКФайлу, ИдентификаторФормы);
		
		УдалитьФайлы(ПолныйПутьКФайлу);
	Иначе
		АдресВременногоХранилищаТекста = "";
	КонецЕсли;
#КонецЕсли
	
	РасшифрованныеДанные = Новый Структура;
	РасшифрованныеДанные.Вставить("АдресВременногоХранилища",       АдресВременногоХранилищаРасшифрованныхДанных);
	РасшифрованныеДанные.Вставить("АдресВременногоХранилищаТекста", АдресВременногоХранилищаТекста);
	
	Состояние(НСтр("ru = 'Расшифровка завершена.'"));
	
	Возврат Истина;
	
КонецФункции

// Оповещает систему и пользователя о расшифровке файла.
// 
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//
Процедура ОповеститьОРасшифровкеФайла(Знач ПрисоединенныйФайл) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файл ""%1""
		           |расшифрован.'"),
		ПрисоединенныйФайл) );
	
КонецПроцедуры
