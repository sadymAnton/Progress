////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСОВ ПО МАТЕРИАЛАМ В ЭКСПЛУАТАЦИИ

// Функция формирует текст запроса по партиям материалов в эксплуатации.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоПартиямМатериаловВЭксплуатацииРасширеннаяАналитика()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РегистрАналитикаВидаУчета.Ссылка
	|
	|ПОМЕСТИТЬ ТаблицаАналитикиВидаУчета
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|ГДЕ
	|	РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МатериалыВЭксплуатации)
	|	//ДляУпрУчета И РегистрАналитикаВидаУчета.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	//ДляРеглУчета И РегистрАналитикаВидаУчета.Организация = &Организация
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетЗатрат.АналитикаВидаУчета,
	|	УчетЗатрат.АналитикаУчетаЗатрат
	|	
	|ПОМЕСТИТЬ СписанныеМатериалы
	|ИЗ
	|	РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
	|		
	|ГДЕ
	|	УчетЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|	И УчетЗатрат.Активность
	|	И УчетЗатрат.КодОперации В (&МассивКодовОпераций)
	|	И УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И АналитикаВидаУчета В (
	|		ВЫБРАТЬ
	|			Ссылка
	|		ИЗ
	|			ТаблицаАналитикиВидаУчета
	|		)
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РегистрАналитикаВидаУчета.Организация,
	|	РегистрАналитикаВидаУчета.Подразделение,
	|	РегистрАналитикаВидаУчета.ПодразделениеОрганизации,
	|	РегистрАналитикаВидаУчета.СчетУчета,
	|	РегистрАналитикаВидаУчета.СчетУчетаНУ,
	|
	|	УчетЗатрат.АналитикаВидаУчета,
	|	УчетЗатрат.АналитикаУчетаЗатрат,
	|	УчетЗатрат.АналитикаУчетаПартий,
	|	УчетЗатрат.АналитикаРаспределенияЗатрат,
	|	
	|	СУММА(УчетЗатрат.СтоимостьОстаток) КАК ПогашеннаяСтоимость
	|
	|ПОМЕСТИТЬ ТаблицаПогашеннойСтоимости
	|ИЗ
	|	РегистрНакопления.УчетЗатрат%СуффиксРегл%.Остатки(&КонГраница, 
	|		АналитикаВидаУчета В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаВидаУчета.Ссылка
	|			ИЗ
	|				РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|			ГДЕ
	|				РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ПогашеннаяСтоимость)
	|				//ДляУпрУчета И РегистрАналитикаВидаУчета.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				//ДляРеглУчета И РегистрАналитикаВидаУчета.Организация = &Организация
	|			)
	|
	|	) КАК УчетЗатрат
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|	ПО
	|		УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрАналитикаВидаУчета.Организация,
	|	РегистрАналитикаВидаУчета.Подразделение,
	|	РегистрАналитикаВидаУчета.ПодразделениеОрганизации,
	|	РегистрАналитикаВидаУчета.СчетУчета,
	|	РегистрАналитикаВидаУчета.СчетУчетаНУ,
	|
	|	УчетЗатрат.АналитикаВидаУчета,
	|	УчетЗатрат.АналитикаУчетаЗатрат,
	|	УчетЗатрат.АналитикаУчетаПартий,
	|	УчетЗатрат.АналитикаРаспределенияЗатрат
	|	
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	УчетЗатрат.АналитикаВидаУчета,
	|	УчетЗатрат.АналитикаУчетаЗатрат,
	|	УчетЗатрат.АналитикаУчетаПартий,
	|	УчетЗатрат.АналитикаРаспределенияЗатрат,
	|	
	|	РегистрАналитикаУчетаПартий.ФизЛицо,
	|	РегистрАналитикаУчетаПартий.НазначениеИспользования,
	|	РегистрАналитикаУчетаПартий.ДокументПередачи,
	|	РегистрАналитикаУчетаПартий.ДокументПередачи.Дата КАК ДокументПередачиДата,
	|
	|	ТаблицаПогашеннойСтоимости.АналитикаВидаУчета КАК АналитикаВидаУчетаПогашеннаяСтоимость,
	|
	|	//ДляРеглУчета (УчетЗатрат.ПостояннаяРазницаНачальныйОстаток + УчетЗатрат.ПостояннаяРазницаПриход) КАК ПостояннаяРазницаОстаток,
	|	//ДляРеглУчета 0 КАК ВременнаяРазницаОстаток,
	|	//ДляРеглУчета 0 КАК ПогашеннаяСтоимостьПРОстаток,
	|	//ДляРеглУчета 0 КАК ПогашеннаяСтоимостьВРОстаток,
	|
	|	(УчетЗатрат.КоличествоНачальныйОстаток + УчетЗатрат.КоличествоПриход) КАК КоличествоОстаток,
	|	(УчетЗатрат.СтоимостьНачальныйОстаток + УчетЗатрат.СтоимостьПриход) КАК СтоимостьОстаток,
	|	ЕСТЬNULL(ТаблицаПогашеннойСтоимости.ПогашеннаяСтоимость, 0) КАК ПогашеннаяСтоимостьОстаток
	|
	|ИЗ
	|	РегистрНакопления.УчетЗатрат%СуффиксРегл%.ОстаткиИОбороты(&НачГраница, &КонГраница, Период, , 
	|		(АналитикаВидаУчета, АналитикаУчетаЗатрат) В (
	|			ВЫБРАТЬ
	|				АналитикаВидаУчета,
	|				АналитикаУчетаЗатрат
	|			ИЗ
	|				СписанныеМатериалы
	|			)
	|
	|	) КАК УчетЗатрат
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|	ПО
	|		УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|	ПО
	|		УчетЗатрат.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПогашеннойСтоимости
	|	ПО
	|		РегистрАналитикаВидаУчета.Организация = ТаблицаПогашеннойСтоимости.Организация
	|		И РегистрАналитикаВидаУчета.Подразделение = ТаблицаПогашеннойСтоимости.Подразделение
	|		И РегистрАналитикаВидаУчета.ПодразделениеОрганизации = ТаблицаПогашеннойСтоимости.ПодразделениеОрганизации
	|		И РегистрАналитикаВидаУчета.СчетУчета = ТаблицаПогашеннойСтоимости.СчетУчета
	|		И РегистрАналитикаВидаУчета.СчетУчетаНУ = ТаблицаПогашеннойСтоимости.СчетУчетаНУ
	|		И УчетЗатрат.АналитикаУчетаЗатрат = ТаблицаПогашеннойСтоимости.АналитикаУчетаЗатрат
	|		И УчетЗатрат.АналитикаУчетаПартий = ТаблицаПогашеннойСтоимости.АналитикаУчетаПартий
	|		И УчетЗатрат.АналитикаРаспределенияЗатрат = ТаблицаПогашеннойСтоимости.АналитикаРаспределенияЗатрат
	|		
	|ГДЕ
	|	(УчетЗатрат.КоличествоНачальныйОстаток + УчетЗатрат.КоличествоПриход) > 0
	|	И (РегистрАналитикаУчетаПартий.ДокументПередачи <> ЗНАЧЕНИЕ(Документ.ПередачаМатериаловВЭксплуатацию.ПустаяСсылка)
	|		И РегистрАналитикаУчетаПартий.ДокументПередачи <> Неопределено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетЗатрат.АналитикаВидаУчета,
	|	УчетЗатрат.АналитикаУчетаЗатрат,
	|	РегистрАналитикаУчетаПартий.ФизЛицо,
	|	РегистрАналитикаУчетаПартий.НазначениеИспользования,
	|	РегистрАналитикаУчетаПартий.ДокументПередачи.Дата,
	|	РегистрАналитикаУчетаПартий.ДокументПередачи,
	|	УчетЗатрат.АналитикаРаспределенияЗатрат
    |
	|";

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПартиямМатериаловВЭксплуатацииРасширеннаяАналитика()

// Функция формирует текст запроса по партиям материалов в эксплуатации.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоПартиямМатериаловВЭксплуатации()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	//ДляУпрУчета СписанныеМатериалы.Подразделение,
	|	//ДляРеглУчета СписанныеМатериалы.ПодразделениеОрганизации КАК Подразделение,
	|	//ДляБухУчета СписанныеМатериалы.СчетУчетаБУ КАК СчетУчета,
	|	//ДляНалУчета СписанныеМатериалы.СчетУчетаНУ КАК СчетУчета,
	|	
	|	СписанныеМатериалы.Номенклатура,
	|	СписанныеМатериалы.ХарактеристикаНоменклатуры,
	|	СписанныеМатериалы.СерияНоменклатуры,
	|	СписанныеМатериалы.ФизЛицо,
	|	СписанныеМатериалы.НазначениеИспользования
	|	
	|ПОМЕСТИТЬ СписанныеМатериалы
	|ИЗ
	|	РегистрСведений.СписанныеМатериалыИзЭксплуатации КАК СписанныеМатериалы
	|ГДЕ
	|	СписанныеМатериалы.Период МЕЖДУ &НачДата И &КонДата
	|	//ДляРеглУчета И СписанныеМатериалы.Организация = &Организация
	|	//ДляУпрУчета И СписанныеМатериалы.ОтражатьВУправленческомУчете
	|	//ДляБухУчета И СписанныеМатериалы.ОтражатьВБухгалтерскомУчете
	|	//ДляНалУчета И СписанныеМатериалы.ОтражатьВНалоговомУчете
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	//ДляРеглУчета ПартииМатериалов.Организация,
	|	//ДляУпрУчета Неопределено КАК СчетУчета,
	|	//ДляРеглУчета ПартииМатериалов.СчетУчета,
	|	ПартииМатериалов.Подразделение,
	|	ПартииМатериалов.Номенклатура,
	|	ПартииМатериалов.ХарактеристикаНоменклатуры,
	|	ПартииМатериалов.СерияНоменклатуры,
	|	ПартииМатериалов.ФизЛицо,
	|	ПартииМатериалов.НазначениеИспользования,
	|	ПартииМатериалов.ДокументПередачи,
	|	ПартииМатериалов.ДокументПередачи.Дата КАК ДокументПередачиДата,
	|
	|   //ДляНалУчета ПартииМатериалов.ПостояннаяРазницаОстаток,
	|   //ДляНалУчета ПартииМатериалов.ВременнаяРазницаОстаток,
	|	//ДляНалУчета ПартииМатериалов.ПогашеннаяСтоимостьПРОстаток,
	|	//ДляНалУчета ПартииМатериалов.ПогашеннаяСтоимостьВРОстаток,
	|
	|	ПартииМатериалов.КоличествоОстаток,
	|	ПартииМатериалов.СтоимостьОстаток,
	|	//ДляУпрУчета ПартииМатериалов.ПогашеннаяСтоимостьОстаток
	|	//ДляБухУчета ПартииМатериалов.ПогашеннаяСтоимостьОстаток
	|	//ДляНалУчета 0 КАК ПогашеннаяСтоимостьОстаток
	|
	|ИЗ
	|	РегистрНакопления.ПартииМатериаловВЭксплуатации%СуффиксУчета%.Остатки(&КонГраница, 
	|		(	
	|		Подразделение,
	|		//ДляРеглУчета СчетУчета,
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры,
	|		ФизЛицо,
	|		НазначениеИспользования
	|		) В (
	|			ВЫБРАТЬ
	|				*
	|			ИЗ
	|				СписанныеМатериалы
	|			)
	|		//ДляРеглУчета И Организация = &Организация
	|	) КАК ПартииМатериалов
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета ПартииМатериалов.СчетУчета,
	|	ПартииМатериалов.Подразделение,
	|	ПартииМатериалов.Номенклатура,
	|	ПартииМатериалов.ХарактеристикаНоменклатуры,
	|	ПартииМатериалов.СерияНоменклатуры,
	|	ПартииМатериалов.ФизЛицо,
	|	ПартииМатериалов.НазначениеИспользования,
	|	ПартииМатериалов.ДокументПередачи.Дата,
	|	ПартииМатериалов.ДокументПередачи
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ СписанныеМатериалы
	|
	|";

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоПартиямМатериаловВЭксплуатации()

// Функция формирует таблицу значений по остаткам материалов в эксплуатации.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//
// Возвращаемое значение:
//	ТаблицаЗначний - Таблица остатков материалов в эксплуатации
//
Функция СформироватьТаблицуОстатковМатериаловВЭксплуатации(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	МенеджерВременныхТаблиц
	)
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоПартиямМатериаловВЭксплуатацииРасширеннаяАналитика();
	Иначе
		ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоПартиямМатериаловВЭксплуатации();
	КонецЕсли;
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями,
		ВидОтраженияВУчете
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.НачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.КонДата);
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.НачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.КонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	МассивКодовОпераций = Новый Массив;
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатации);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатацииФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатации);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатацииФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатации);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатацииФикс);
	Запрос.УстановитьПараметр("МассивКодовОпераций", МассивКодовОпераций);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаОстатков = РезультатЗапроса.Выгрузить();
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		ТаблицаОстатков.Индексы.Добавить("
			|АналитикаВидаУчета,
			|АналитикаУчетаЗатрат,
			|ФизЛицо,
			|НазначениеИспользования
			|");
	Иначе
		ТаблицаОстатков.Индексы.Добавить("
			|СчетУчета,
			|Подразделение,
			|Номенклатура,
			|ХарактеристикаНоменклатуры,
			|СерияНоменклатуры,
			|ФизЛицо,
			|НазначениеИспользования
			|");
		ТаблицаОстатков.Индексы.Добавить("ДокументПередачи");
	КонецЕсли;
	
	Возврат ТаблицаОстатков;
	
КонецФункции // СформироватьТаблицуОстатковМатериаловВЭксплуатации()

// Функция формирует текст запроса по списанным материалам.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоСписаннымМатериаламРасширеннаяАналитика()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	УчетЗатрат.АналитикаВидаУчета,
	|	УчетЗатрат.АналитикаУчетаЗатрат,
	|	УчетЗатрат.АналитикаУчетаПартий,
	|	УчетЗатрат.АналитикаРаспределенияЗатрат,
	|
	|	УчетЗатрат.КорАналитикаВидаУчета,
	|	УчетЗатрат.КорАналитикаУчетаЗатрат,
	|	УчетЗатрат.КорАналитикаУчетаПартий,
	|	УчетЗатрат.КорАналитикаРаспределенияЗатрат,
	|
	|	РегистрАналитикаВидаУчета.Организация,
	|	РегистрКорАналитикаВидаУчета.Подразделение КАК ПодразделениеПолучатель,
	|
	|	//ДляУпрУчета РегистрАналитикаВидаУчета.Подразделение,
	|	//ДляРеглУчета РегистрАналитикаВидаУчета.ПодразделениеОрганизации КАК Подразделение,
	|
	|	// Аналитика для формирования проводок.
	|	//ДляРеглУчета РегистрАналитикаВидаУчета.СчетУчета КАК СчетУчетаБУ,
	|	//ДляРеглУчета РегистрАналитикаВидаУчета.СчетУчетаНУ,
	|	//ДляРеглУчета РегистрКорАналитикаВидаУчета.Склад,
	|	//ДляРеглУчета РегистрКорАналитикаВидаУчета.Склад КАК СкладПолучатель,
	|	//ДляРеглУчета РегистрКорАналитикаВидаУчета.ПодразделениеОрганизации,
	|	//ДляРеглУчета ЕСТЬNULL(РегистрКорАналитикаВидаУчета.СчетУчета, РегистрКорАналитикаУчетаПрочихЗатрат.СчетУчета) КАК СчетЗатрат,
	|	//ДляРеглУчета ЕСТЬNULL(РегистрКорАналитикаВидаУчета.СчетУчетаНУ, РегистрКорАналитикаУчетаПрочихЗатрат.СчетУчетаНУ) КАК СчетЗатратНУ,
	|	//ДляРеглУчета РегистрКорАналитикаУчетаЗатрат.СтатьяЗатрат,
	|	//ДляРеглУчета РегистрКорАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	//ДляРеглУчета РегистрКорАналитикаУчетаПрочихЗатрат.Субконто1,
	|	//ДляРеглУчета РегистрКорАналитикаУчетаПрочихЗатрат.Субконто2,
	|	//ДляРеглУчета РегистрКорАналитикаУчетаПрочихЗатрат.Субконто3,
	|	//ДляРеглУчета РегистрКорАналитикаУчетаПрочихЗатрат.СубконтоНУ1,
	|	//ДляРеглУчета РегистрКорАналитикаУчетаПрочихЗатрат.СубконтоНУ2,
	|	//ДляРеглУчета РегистрКорАналитикаУчетаПрочихЗатрат.СубконтоНУ3,
	|	Неопределено КАК ОбъектСтроительства,
	|	Неопределено КАК СпособСтроительства,
	|
	|	РегистрАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
	|	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаНоменклатуры,
	|	РегистрАналитикаУчетаЗатрат.СерияЗатраты КАК СерияНоменклатуры,
	|
	|	РегистрАналитикаУчетаПартий.ФизЛицо,
	|	РегистрАналитикаУчетаПартий.НазначениеИспользования,
	|	РегистрАналитикаУчетаПартий.НазначениеИспользования.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	РегистрАналитикаУчетаПартий.ДокументПередачи,
	|	ВЫБОР КОГДА РегистрАналитикаУчетаПартий.ДокументПередачи = ЗНАЧЕНИЕ(Документ.ПередачаМатериаловВЭксплуатацию.ПустаяСсылка) ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК ЗаполненДокументПередачи,
	|
	|	ЕСТЬNULL(РегистрКорАналитикаУчетаПартий.ФизЛицо, Неопределено) КАК ФизЛицоПолучатель,
	|	ЕСТЬNULL(РегистрКорАналитикаУчетаПартий.НазначениеИспользования, Неопределено) КАК НазначениеИспользованияПолучатель,
	|	
	|	УчетЗатрат.КодОперации КАК КодОперации,
	|
	|	СУММА(
	|		ВЫБОР КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			УчетЗатрат.Стоимость
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	) КАК Стоимость,
	|	СУММА(
	|		ВЫБОР КОГДА УчетЗатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			УчетЗатрат.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	) КАК Количество
	|
	|ИЗ
	|	РегистрНакопления.УчетЗатрат%СуффиксРегл% КАК УчетЗатрат
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|	ПО
	|		УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|	ПО
	|		УчетЗатрат.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|	ПО
	|		УчетЗатрат.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрКорАналитикаВидаУчета
	|	ПО
	|		УчетЗатрат.КорАналитикаВидаУчета = РегистрКорАналитикаВидаУчета.Ссылка
	|	
	|	//ДляРеглУчета ЛЕВОЕ СОЕДИНЕНИЕ
	|	//ДляРеглУчета 	РегистрСведений.АналитикаУчетаПрочихЗатрат КАК РегистрКорАналитикаУчетаПрочихЗатрат
	|	//ДляРеглУчета ПО
	|	//ДляРеглУчета 	УчетЗатрат.КорАналитикаВидаУчета = РегистрКорАналитикаУчетаПрочихЗатрат.Ссылка
	|	
	|	//ДляРеглУчета ЛЕВОЕ СОЕДИНЕНИЕ
	|	//ДляРеглУчета 	РегистрСведений.АналитикаУчетаЗатрат КАК РегистрКорАналитикаУчетаЗатрат
	|	//ДляРеглУчета ПО
	|	//ДляРеглУчета 	УчетЗатрат.КорАналитикаУчетаЗатрат = РегистрКорАналитикаУчетаЗатрат.Ссылка
	|	
	|	//ДляРеглУчета ЛЕВОЕ СОЕДИНЕНИЕ
	|	//ДляРеглУчета 	РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрКорАналитикаРаспределенияЗатрат
	|	//ДляРеглУчета ПО
	|	//ДляРеглУчета 	УчетЗатрат.КорАналитикаРаспределенияЗатрат = РегистрКорАналитикаРаспределенияЗатрат.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК РегистрКорАналитикаУчетаПартий
	|	ПО
	|		УчетЗатрат.КорАналитикаУчетаПартий = РегистрКорАналитикаУчетаПартий.Ссылка
	|	
	|ГДЕ
	|	УчетЗатрат.Период МЕЖДУ &НачДата И &КонДата
	|	И УчетЗатрат.Активность
	|	И (
	|		АналитикаВидаУчета, 
	|		АналитикаУчетаЗатрат
	|	) В (
	|		ВЫБРАТЬ
	|			АналитикаВидаУчета,
	|			АналитикаУчетаЗатрат
	|		ИЗ
	|			СписанныеМатериалы
	|		)
	|	И УчетЗатрат.КодОперации В (&МассивКодовОпераций)
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетЗатрат.АналитикаВидаУчета,
	|	УчетЗатрат.АналитикаУчетаЗатрат,
	|	УчетЗатрат.АналитикаУчетаПартий,
	|	УчетЗатрат.АналитикаРаспределенияЗатрат,
	|
	|	УчетЗатрат.КорАналитикаВидаУчета,
	|	УчетЗатрат.КорАналитикаУчетаЗатрат,
	|	УчетЗатрат.КорАналитикаУчетаПартий,
	|	УчетЗатрат.КорАналитикаРаспределенияЗатрат,
	|
	|	РегистрАналитикаВидаУчета.Организация,
	|	РегистрКорАналитикаВидаУчета.Подразделение,
	|	//ДляУпрУчета РегистрАналитикаВидаУчета.Подразделение,
	|	//ДляРеглУчета РегистрАналитикаВидаУчета.ПодразделениеОрганизации,
	|	РегистрАналитикаУчетаЗатрат.Затрата,
	|	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты,
	|	РегистрАналитикаУчетаЗатрат.СерияЗатраты,
	|	РегистрАналитикаУчетаПартий.ФизЛицо,
	|	РегистрАналитикаУчетаПартий.НазначениеИспользования,
	|	РегистрАналитикаУчетаПартий.ДокументПередачи,
	|	РегистрКорАналитикаУчетаПартий.ФизЛицо,
	|	РегистрКорАналитикаУчетаПартий.НазначениеИспользования,
	|	//ДляРеглУчета РегистрАналитикаВидаУчета.СчетУчета,
	|	//ДляРеглУчета РегистрАналитикаВидаУчета.СчетУчетаНУ,
	|	//ДляРеглУчета РегистрКорАналитикаВидаУчета.Склад,
	|	//ДляРеглУчета РегистрКорАналитикаВидаУчета.ПодразделениеОрганизации,
	|	//ДляРеглУчета ЕСТЬNULL(РегистрКорАналитикаВидаУчета.СчетУчета, РегистрКорАналитикаУчетаПрочихЗатрат.СчетУчета),
	|	//ДляРеглУчета ЕСТЬNULL(РегистрКорАналитикаВидаУчета.СчетУчетаНУ, РегистрКорАналитикаУчетаПрочихЗатрат.СчетУчетаНУ),
	|	//ДляРеглУчета РегистрКорАналитикаУчетаЗатрат.СтатьяЗатрат,
	|	//ДляРеглУчета РегистрКорАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа,
	|	//ДляРеглУчета РегистрКорАналитикаУчетаПрочихЗатрат.Субконто1,
	|	//ДляРеглУчета РегистрКорАналитикаУчетаПрочихЗатрат.Субконто2,
	|	//ДляРеглУчета РегистрКорАналитикаУчетаПрочихЗатрат.Субконто3,
	|	//ДляРеглУчета РегистрКорАналитикаУчетаПрочихЗатрат.СубконтоНУ1,
	|	//ДляРеглУчета РегистрКорАналитикаУчетаПрочихЗатрат.СубконтоНУ2,
	|	//ДляРеглУчета РегистрКорАналитикаУчетаПрочихЗатрат.СубконтоНУ3,
	|	УчетЗатрат.КодОперации
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ЗаполненДокументПередачи УБЫВ,
	|	УчетЗатрат.АналитикаВидаУчета,
	|	УчетЗатрат.АналитикаУчетаЗатрат,
	|	УчетЗатрат.АналитикаУчетаПартий,
	|	УчетЗатрат.АналитикаРаспределенияЗатрат,
	|
	|	УчетЗатрат.КорАналитикаВидаУчета,
	|	УчетЗатрат.КорАналитикаУчетаЗатрат,
	|	УчетЗатрат.КорАналитикаУчетаПартий,
	|	УчетЗатрат.КорАналитикаРаспределенияЗатрат
	|";

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоСписаннымМатериаламРасширеннаяАналитика()

// Функция формирует текст запроса по списанным материалам.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция СформироватьТекстЗапросаПоСписаннымМатериалам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета СписанныеМатериалы.Организация,
	|	//ДляУпрУчета СписанныеМатериалы.Подразделение,
	|	//ДляРеглУчета СписанныеМатериалы.ПодразделениеОрганизации КАК Подразделение,
	|	//ДляРеглУчета СписанныеМатериалы.ПодразделениеОрганизации,
	|
	|	//ДляУпрУчета Неопределено КАК СчетУчета,
	|	//ДляБухУчета СписанныеМатериалы.СчетУчетаБУ КАК СчетУчета,
	|	//ДляНалУчета СписанныеМатериалы.СчетУчетаНУ КАК СчетУчета,
	|
	|	//ДляБухУчета СписанныеМатериалы.СчетУчетаБУ,
	|	//ДляНалУчета СписанныеМатериалы.СчетУчетаНУ,
	|
	|	СписанныеМатериалы.Номенклатура,
	|	СписанныеМатериалы.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	СписанныеМатериалы.ХарактеристикаНоменклатуры,
	|	СписанныеМатериалы.СерияНоменклатуры,
	|	СписанныеМатериалы.ФизЛицо,
	|	СписанныеМатериалы.НазначениеИспользования,
	|	СписанныеМатериалы.НазначениеИспользования.СпособОтраженияРасходов как СпособОтраженияРасходов,
	|
	|	СписанныеМатериалы.ДокументПередачи,
	|	СписанныеМатериалы.КодОперации,
	|
	|	СписанныеМатериалы.СпособСписанияРасходов,
	|	СписанныеМатериалы.СтатьяЗатрат,
	|	СписанныеМатериалы.НоменклатурнаяГруппа,
	|	СписанныеМатериалы.ТипСтоимости,
	|	СписанныеМатериалы.Склад КАК СкладПолучатель,
	|	СписанныеМатериалы.Качество,
	|
	|	Неопределено КАК СтатусМатериальныхЗатрат,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Купленный) КАК СтатусПартии,
	|	Неопределено КАК ВидОперации,
	|	Ложь КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|	Неопределено КАК ЗаказРезерв,
	|
	|	СписанныеМатериалы.Регистратор КАК ДокументВыпуска,
	|	СписанныеМатериалы.Регистратор КАК ДокументДвижения,
	|	СписанныеМатериалы.Регистратор.Дата КАК ДокументДвиженияПериод,
	|	СписанныеМатериалы.НомерСтроки,
	|
	|	//ДляБухУчета СписанныеМатериалы.СчетДт,
	|	//ДляБухУчета СписанныеМатериалы.СубконтоДт1,
	|	//ДляБухУчета СписанныеМатериалы.СубконтоДт2,
	|	//ДляБухУчета СписанныеМатериалы.СубконтоДт3,
	|	//ДляБухУчета СписанныеМатериалы.СчетДт КАК СчетЗатрат,
	|
	|	//ДляНалУчета СписанныеМатериалы.СчетДтНУ,
	|	//ДляНалУчета СписанныеМатериалы.СчетДтНУ КАК СчетДт,
	|	//ДляНалУчета СписанныеМатериалы.СубконтоДтНУ1 КАК СубконтоДт1,
	|	//ДляНалУчета СписанныеМатериалы.СубконтоДтНУ2 КАК СубконтоДт2,
	|	//ДляНалУчета СписанныеМатериалы.СубконтоДтНУ3 КАК СубконтоДт3,
	|	//ДляНалУчета СписанныеМатериалы.СчетДтНУ КАК СчетЗатратНУ,
	|
	|	СписанныеМатериалы.ФизЛицоПолучатель,
	|	СписанныеМатериалы.НазначениеИспользованияПолучатель,
	|	//ДляУпрУчета СписанныеМатериалы.ПодразделениеПолучатель,
	|	//ДляРеглУчета СписанныеМатериалы.ПодразделениеОрганизацииПолучатель,
	|	//ДляБухУчета СписанныеМатериалы.СчетУчетаПолучательБУ,
	|	//ДляНалУчета СписанныеМатериалы.СчетУчетаПолучательНУ,
	|
	|	//ДляУпрУчета СписанныеМатериалы.Стоимость,
	|	//ДляРеглУчета СписанныеМатериалы.СтоимостьРегл КАК Стоимость,
	|	СписанныеМатериалы.Количество
	|
	|ИЗ
	|	РегистрСведений.СписанныеМатериалыИзЭксплуатации КАК СписанныеМатериалы
	|	
	|ГДЕ
	|	СписанныеМатериалы.Период МЕЖДУ &НачДата И &КонДата
	|	//ДляУпрУчета И СписанныеМатериалы.ОтражатьВУправленческомУчете
	|	//ДляБухУчета И СписанныеМатериалы.ОтражатьВБухгалтерскомУчете
	|	//ДляНалУчета И СписанныеМатериалы.ОтражатьВНалоговомУчете
	|	//ДляРеглУчета И СписанныеМатериалы.Организация = &Организация
	|	
	|УПОРЯДОЧИТЬ ПО
	|	СписанныеМатериалы.Регистратор.Дата,
	|	СписанныеМатериалы.Регистратор,
	|	СписанныеМатериалы.НомерСтроки,
	|
	|	//ДляУпрУчета СписанныеМатериалы.Подразделение,
	|	//ДляРеглУчета СписанныеМатериалы.ПодразделениеОрганизации,
	|	//ДляБухУчета СписанныеМатериалы.СчетУчетаБУ,
	|	//ДляНалУчета СписанныеМатериалы.СчетУчетаНУ,
	|
	|	СписанныеМатериалы.Номенклатура,
	|	СписанныеМатериалы.ХарактеристикаНоменклатуры,
	|	СписанныеМатериалы.СерияНоменклатуры,
	|	СписанныеМатериалы.ФизЛицо,
	|	СписанныеМатериалы.НазначениеИспользования,
	|	СписанныеМатериалы.ДокументПередачи
	|";

	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаПоСписаннымМатериалам()

// Функция формирует запрос по списанным материалам.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//
// Возвращаемое значение:
//	Запрос - Запрос по списанным материалам
//
Функция СформироватьЗапросПоСписаннымМатериалам(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	МенеджерВременныхТаблиц
	)
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоСписаннымМатериаламРасширеннаяАналитика();
	Иначе
		ТекстЗапросаСКомментариями = СформироватьТекстЗапросаПоСписаннымМатериалам();
	КонецЕсли;
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями,
		ВидОтраженияВУчете
	);
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.НачДата);
	Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.КонДата);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.КонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	МассивКодовОпераций = Новый Массив;
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатации);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатацииФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатации);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатацииФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатации);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатацииФикс);
	Запрос.УстановитьПараметр("МассивКодовОпераций", МассивКодовОпераций);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоСписаннымМатериалам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО ОПЕРАЦИЯМ С МАТЕРИАЛАМИ В ЭКСПЛУАТАЦИИ

// Процедура добавляет количество перемещаемых материалов в таблицу остатков.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтруктураАналитики - Структура - Аналитика учета материалов в эксплуатации
//	ДокументПередачи - ДокументСсылка.ПередачаМатериаловВЭксплуатацию - Документ передачи
//	Количество - Число - Количество материалов
//  Стоимость - Число - Сумма материалов
//  ПогашеннаяСтоимость - Число - Сумма погашенной стоимости
//  ПостояннаяРазница - Число - Сумма постоянной разницы
//  ВременнаяРазница - Число - Сумма временной разницы
//  ПогашеннаяСтоимостьПР - Число - Сумма погашенной стоимости в части постоянной разницы
//  ПогашеннаяСтоимостьВР - Число - Сумма погашенной стоимости в части временной разницы
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ТаблицаОстатков - ТаблицаЗначений - Таблица остатков материалов в эксплуатации
//
Процедура ДобавитьКоличествоВТаблицуОстатков(
	СтруктураШапкиДокумента,
	СтруктураАналитики,
	ДокументПередачи,
	Количество,
	Стоимость,
	ПогашеннаяСтоимость,
	ПостояннаяРазница,
	ВременнаяРазница,
	ПогашеннаяСтоимостьПР,
	ПогашеннаяСтоимостьВР,
	ВидОтраженияВУчете,
	ТаблицаОстатков
	)
	
	СтруктураПоиска = ПолучитьСтруктуруОтбораОстатков(
		СтруктураШапкиДокумента,
		СтруктураАналитики
	);
	МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТаблицы = МассивСтрок[0];
		СтрокаТаблицы.КоличествоОстаток = СтрокаТаблицы.КоличествоОстаток + Количество;
		СтрокаТаблицы.СтоимостьОстаток = СтрокаТаблицы.СтоимостьОстаток + Стоимость;
		СтрокаТаблицы.ПогашеннаяСтоимостьОстаток = СтрокаТаблицы.ПогашеннаяСтоимостьОстаток + ПогашеннаяСтоимость;
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
			СтрокаТаблицы.ПостояннаяРазницаОстаток = СтрокаТаблицы.ПостояннаяРазницаОстаток + ПостояннаяРазница;
			СтрокаТаблицы.ВременнаяРазницаОстаток = СтрокаТаблицы.ВременнаяРазницаОстаток + ВременнаяРазница;
			СтрокаТаблицы.ПогашеннаяСтоимостьПРОстаток = СтрокаТаблицы.ПогашеннаяСтоимостьПРОстаток + ПогашеннаяСтоимостьПР;
			СтрокаТаблицы.ПогашеннаяСтоимостьВРОстаток = СтрокаТаблицы.ПогашеннаяСтоимостьВРОстаток + ПогашеннаяСтоимостьВР;
		КонецЕсли;
	Иначе
		СтрокаТаблицы = ТаблицаОстатков.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураАналитики);
		
		СтрокаТаблицы.КоличествоОстаток = Количество;
		СтрокаТаблицы.СтоимостьОстаток = Стоимость;
		СтрокаТаблицы.ПогашеннаяСтоимостьОстаток = ПогашеннаяСтоимость;
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
			СтрокаТаблицы.ПостояннаяРазницаОстаток = ПостояннаяРазница;
			СтрокаТаблицы.ВременнаяРазницаОстаток = ВременнаяРазница;
			СтрокаТаблицы.ПогашеннаяСтоимостьПРОстаток = ПогашеннаяСтоимостьПР;
			СтрокаТаблицы.ПогашеннаяСтоимостьВРОстаток = ПогашеннаяСтоимостьВР;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // ДобавитьСтрокуВТаблицуОстатков()

// Процедура формирует движения в зависимости от направления списания материалов из эксплуатации.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки
//	ДокументПередачи - ДокументСсылка.ПередачаМатериаловВЭксплуатацию - Документ передачи
//	ДокументПередачиДата - Дата - Дата документа передачи
//	Количество - Число - Количество материалов
//  Стоимость - Число - Сумма материалов
//  ПогашеннаяСтоимость - Число - Сумма погашенной стоимости
//  ПостояннаяРазница - Число - Сумма постоянной разницы
//  ВременнаяРазница - Число - Сумма временной разницы
//  ПогашеннаяСтоимостьПР - Число - Сумма погашенной стоимости в части постоянной разницы
//  ПогашеннаяСтоимостьВР - Число - Сумма погашенной стоимости в части временной разницы
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ТаблицаОстатков - ТаблицаЗначений - Таблица остатков материалов в эксплуатации
//	ТаблицаПогашеннойСтоимости - ТаблицаЗначений - Таблица сумм погашенной стоимости
//	ТаблицаТоваров - ТаблицаЗначений - Таблица номенклатуры для передачи в модуль партионного учета.
//	ТаблицаОшибок - ТаблицаЗначений - Таблица регистрации ошибок
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей
//
Процедура СформироватьДвиженияПоНаправлениямСписания(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ДокументПередачи,
	ДокументПередачиДата,
	Количество,
	Стоимость,
	ПогашеннаяСтоимость,
	ПостояннаяРазница,
	ВременнаяРазница,
	ПогашеннаяСтоимостьПР,
	ПогашеннаяСтоимостьВР,
	ВидОтраженияВУчете,
	ТаблицаОстатков,
	ТаблицаПогашеннойСтоимости,
	ТаблицаТоваров,
	ТаблицаОшибок,
	СтруктураНаборыЗаписей
	)
	
	Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатации Тогда
		
		СуффиксИмениРегистра = СтруктураШапкиДокумента.СуффиксыИмениРегистра[ВидОтраженияВУчете];
		ИмяРегистра = "ПартииМатериаловВЭксплуатации" + СуффиксИмениРегистра;
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураАналитики = Новый Структура;
		СтруктураАналитики.Вставить("ФизЛицо", СтрокаВыборки.ФизЛицоПолучатель);
		СтруктураАналитики.Вставить("НазначениеИспользования", СтрокаВыборки.НазначениеИспользованияПолучатель);
		СтруктураАналитики.Вставить("ДокументПередачи", ДокументПередачи);
		СтруктураАналитики.Вставить("ДокументПередачиДата", ДокументПередачиДата);
		
		СтруктураАналитики.Вставить("Номенклатура", СтрокаВыборки.Номенклатура);
		СтруктураАналитики.Вставить("ХарактеристикаНоменклатуры", СтрокаВыборки.ХарактеристикаНоменклатуры);
		СтруктураАналитики.Вставить("СерияНоменклатуры", СтрокаВыборки.СерияНоменклатуры);
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
			СтруктураАналитики.Вставить("СчетУчета");
			СтруктураАналитики.Вставить("Подразделение", СтрокаВыборки.ПодразделениеПолучатель);
			
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураАналитики.Вставить("Организация", СтрокаВыборки.Организация);
			СтруктураАналитики.Вставить("СчетУчета", СтрокаВыборки.СчетУчетаПолучательБУ);
			СтруктураАналитики.Вставить("Подразделение", СтрокаВыборки.ПодразделениеОрганизацииПолучатель);
			СтруктураАналитики.Вставить("ПодразделениеОрганизации", СтрокаВыборки.ПодразделениеОрганизацииПолучатель);
			
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
			СтруктураАналитики.Вставить("Организация", СтрокаВыборки.Организация);
			СтруктураАналитики.Вставить("СчетУчета", СтрокаВыборки.СчетУчетаПолучательНУ);
			СтруктураАналитики.Вставить("СчетУчетаНУ", СтрокаВыборки.СчетУчетаПолучательНУ);
			СтруктураАналитики.Вставить("Подразделение", СтрокаВыборки.ПодразделениеОрганизацииПолучатель);
			СтруктураАналитики.Вставить("ПодразделениеОрганизации", СтрокаВыборки.ПодразделениеОрганизацииПолучатель);
			
		КонецЕсли;
		
		СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатации(
			СтруктураШапкиДокумента,
			СтруктураАналитики,
			ДокументПередачи,
			Количество,
			Стоимость,
			ПогашеннаяСтоимость,
			ПостояннаяРазница,
			ВременнаяРазница,
			ПогашеннаяСтоимостьПР,
			ПогашеннаяСтоимостьВР,
			ВидДвиженияНакопления.Приход,
			СтрокаВыборки.КодОперации,
			ВидОтраженияВУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		ДобавитьКоличествоВТаблицуОстатков(
			СтруктураШапкиДокумента,
			СтруктураАналитики,
			ДокументПередачи,
			Количество,
			Стоимость,
			ПогашеннаяСтоимость,
			ПостояннаяРазница,
			ВременнаяРазница,
			ПогашеннаяСтоимостьПР,
			ПогашеннаяСтоимостьВР,
			ВидОтраженияВУчете,
			ТаблицаОстатков
		);
		
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатации
		И СтрокаВыборки.ТипСтоимости <> Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная
	Тогда
		
		СуффиксИмениРегистра = СтруктураШапкиДокумента.СуффиксыИмениРегистра[ВидОтраженияВУчете];
		ИмяРегистра = "ПартииТоваровНаСкладах" + СуффиксИмениРегистра;
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		УправлениеЗапасамиПартионныйУчет.СформироватьСтрокуДвиженияПоРегиструПартииТоваровНаСкладах(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзЭксплуатации,
			0, // Количество
			Стоимость - ПогашеннаяСтоимость,
			ПостояннаяРазница - ПогашеннаяСтоимостьПР,
			ВременнаяРазница - ПогашеннаяСтоимостьВР,
			ВидОтраженияВУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
		Если (Стоимость - ПогашеннаяСтоимость) <> 0
		 ИЛИ (ПостояннаяРазница - ПогашеннаяСтоимостьПР) <> 0
		 ИЛИ (ВременнаяРазница - ПогашеннаяСтоимостьВР) <> 0 Тогда
			

			НоваяСтрока = ТаблицаТоваров.Добавить();
			НоваяСтрока.Номенклатура = СтрокаВыборки.Номенклатура;
			
			
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
				Если Не СтруктураШапкиДокумента.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
					НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
				КонецЕсли;
			
			ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
			 ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете
			Тогда
				НоваяСтрока.СчетУчета = СтрокаВыборки.СчетДт;
				Если Не СтруктураШапкиДокумента.СпособОценкиМПЗБух = Перечисления.СпособыОценки.ПоСредней Тогда
					НоваяСтрока.ДокументОприходования = СтрокаВыборки.ДокументВыпуска;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
		 ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете
		Тогда
		
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
				СтоимостьБух = Стоимость - ПогашеннаяСтоимость;
				СтоимостьНал = 0;
			Иначе
				СтоимостьБух = 0;
				СтоимостьНал = Стоимость - ПогашеннаяСтоимость;
			КонецЕсли;
			
			СформироватьДвиженияПоРегиструБухгалтерииПогашениеСтоимости(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				СтрокаВыборки.СкладПолучатель,
				0, // Количество
				СтоимостьБух,
				СтоимостьНал,
				ПостояннаяРазница - ПогашеннаяСтоимостьПР,
				ВременнаяРазница - ПогашеннаяСтоимостьВР,
				СтрокаВыборки.КодОперации,
				ТаблицаОшибок,
				СтруктураНаборыЗаписей
			);
		КонецЕсли;
		
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатации
		И СтрокаВыборки.ТипСтоимости <> Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная
	Тогда
	
		Если (Стоимость - ПогашеннаяСтоимость) <> 0
		 ИЛИ (ПостояннаяРазница - ПогашеннаяСтоимостьПР) <> 0
		 ИЛИ (ВременнаяРазница - ПогашеннаяСтоимостьВР) <> 0 Тогда
		
			// Запомним погашенную стоимость в таблице значений.
			НоваяСтрока = ТаблицаПогашеннойСтоимости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
			НоваяСтрока.КоличествоУпр = 0;
			НоваяСтрока.КоличествоБух = 0;
			НоваяСтрока.КоличествоНал = 0;
			
			Если СтрокаВыборки.СпособСписанияРасходов = Перечисления.СпособыСписанияРасходов.ИспользоватьСтатьюЗатратДокумента Тогда
				НоваяСтрока.СпособОтраженияРасходов = СтрокаВыборки.ДокументДвижения;
			КонецЕсли;
			
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
				НоваяСтрока.СтоимостьУпр = Стоимость - ПогашеннаяСтоимость;
				
			ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
				НоваяСтрока.СтоимостьБух = Стоимость - ПогашеннаяСтоимость;
			
			ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
				НоваяСтрока.СтоимостьНал = Стоимость - ПогашеннаяСтоимость;
				НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница - ПогашеннаяСтоимостьПР;
				НоваяСтрока.ВременнаяРазница = ВременнаяРазница - ПогашеннаяСтоимостьВР;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоНаправлениямСписания()

// Функция получает структуру для отбора строк таблицы остатков.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//
// Возвращаемое значение:
//	Структура - Структура для отбора остатков
//
Функция ПолучитьСтруктуруОтбораОстатков(
	СтруктураШапкиДокумента,
	СтрокаВыборки
	)
	
	СтруктураПоиска = Новый Структура;
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		СтруктураПоиска.Вставить("АналитикаВидаУчета", СтрокаВыборки.АналитикаВидаУчета);
		СтруктураПоиска.Вставить("АналитикаУчетаЗатрат", СтрокаВыборки.АналитикаУчетаЗатрат);
	Иначе
		СтруктураПоиска.Вставить("Подразделение", СтрокаВыборки.Подразделение);
		СтруктураПоиска.Вставить("Номенклатура", СтрокаВыборки.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаВыборки.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаВыборки.СерияНоменклатуры);
	
		Если СтрокаВыборки.СчетУчета <> Неопределено Тогда
			СтруктураПоиска.Вставить("СчетУчета", СтрокаВыборки.СчетУчета);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПоиска.Вставить("ФизЛицо", СтрокаВыборки.ФизЛицо);
	СтруктураПоиска.Вставить("НазначениеИспользования", СтрокаВыборки.НазначениеИспользования);
	
	Если ЗначениеЗаполнено(СтрокаВыборки.ДокументПередачи) Тогда
		СтруктураПоиска.Вставить("ДокументПередачи", СтрокаВыборки.ДокументПередачи);
	КонецЕсли;
	
	Возврат СтруктураПоиска;
	
КонецФункции // ПолучитьСтруктуруОтбораОстатков()

// Процедура выводит сообщение об нулевой сумме коэффициентов.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	Количество - Число - Количество списываемого материала
//	КоличествоРаспределено - Остаток материала
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ТаблицаОшибок - ТаблицаЗначений - Таблица регистрации ошибок
//
Процедура ВывестиСообщениеОПревышенииКоличества(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Количество,
	КоличествоРаспределено,
	ВидОтраженияВУчете,
	ТаблицаОшибок
	)
	
	Если СтрокаВыборки.КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатации
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатацииФикс Тогда
		ТекстОперация = ", списываемое из эксплуатации,";
	
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатации
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатацииФикс Тогда
		ТекстОперация = ", возвращаемое из эксплуатации,";
	
	ИначеЕсли СтрокаВыборки.КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатации
	 ИЛИ СтрокаВыборки.КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатацииФикс Тогда
		ТекстОперация = ", перемещаемое в эксплуатации,";
		
	Иначе
		ТекстОперация = "";
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		ТекстУчета = "упр. учету";
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
		ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
	Тогда
		ТекстУчета = "бух. учету";
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		ТекстУчета = "нал. учету";
	КонецЕсли;
	СтрокаГруппы = "Количество по " + ТекстУчета + ТекстОперация + " превышает остаток:";
	
	ТекстСообщения = "
		|Подразделение: " + Строка(СтрокаВыборки.Подразделение) + "
		|Номенклатура: " + Строка(СтрокаВыборки.Номенклатура) + ", " + Строка(СтрокаВыборки.ХарактеристикаНоменклатуры) + ", " + Строка(СтрокаВыборки.СерияНоменклатуры) + "
		|Назначение использования: " + Строка(СтрокаВыборки.НазначениеИспользования) + "
		|Работник: " + Строка(СтрокаВыборки.ФизЛицо) + "
		|Количество списания: " + Строка(Количество) + ", остаток в эксплуатации: " + Строка(КоличествоРаспределено) + "
		|";
		
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.Группа = СтрокаГруппы;
	НоваяСтрока.Сообщение = ТекстСообщения;
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		НоваяСтрока.Объект = УправлениеЗатратами.СформироватьРасшифровкуОткрытияОтчета("ВедомостьПоУчетуМПЗ");
	Иначе
		НоваяСтрока.Объект = УправлениеЗатратами.СформироватьРасшифровкуОткрытияОтчета("ВедомостьПартииМатериаловВЭксплуатации");
	КонецЕсли;
	
КонецПроцедуры // ВывестиСообщениеОПревышенииКоличества()

// Процедура производит расчет суммы операции (списания, возврата, корректировки) по спецодежде.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//	ТаблицаОстатков - ТаблицЗначений - Таблица остатков партий материалов в эксплуатации
//	РезультатЗапроса - РезультатЗапроса - Результат запроса по списанным материалам
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ТаблицаПогашеннойСтоимости - ТаблицаЗначений - Таблица сумм погашенной стоимости
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок
//	ТаблицаТоваров - ТаблицаЗначений - Таблица номенклатуры для передачи в модуль партионного учета.
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей
//
Процедура РассчитатьСуммуСписанияИзЭксплуатации(
	СтруктураШапкиДокумента,
	ТаблицаОстатков,
	РезультатЗапроса,
	ВидОтраженияВУчете,
	ТаблицаПогашеннойСтоимости,
	ТаблицаОшибок,
	ТаблицаТоваров,
	СтруктураНаборыЗаписей
	)
	
	Если Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		СуффиксИмениРегистра = СтруктураШапкиДокумента.СуффиксыИмениРегистра[ВидОтраженияВУчете];
		ИмяРегистра = "ПартииМатериаловВЭксплуатации" + СуффиксИмениРегистра;
			
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураКлючиАналитики = Новый Структура;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = ПолучитьСтруктуруОтбораОстатков(
			СтруктураШапкиДокумента,
			Выборка
		);
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		СписатьКоличество = Выборка.Количество;
		КоличествоРаспределено = 0;
		
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			
			Если Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
			   И СтрокаТаблицы.ДокументПередачиДата > Выборка.ДокументДвиженияПериод
			Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоОстаток = СтрокаТаблицы.КоличествоОстаток;
			
			Если КоличествоОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Стоимость = 0;
			Количество = 0;
			ПостояннаяРазница = 0;
			ВременнаяРазница = 0;
			ПогашеннаяСтоимостьПР = 0;
			ПогашеннаяСтоимостьВР = 0;
			КорректировкаСтоимостиСписания = 0;
			
			Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
				
				Стоимость = Выборка.Стоимость;
				Если КоличествоОстаток <= СписатьКоличество Тогда
					Количество = КоличествоОстаток;
					ПогашеннаяСтоимость = СтрокаТаблицы.ПогашеннаяСтоимостьОстаток;
				Иначе
					Количество = СписатьКоличество;
					ПогашеннаяСтоимость = Окр(СписатьКоличество * СтрокаТаблицы.ПогашеннаяСтоимостьОстаток / КоличествоОстаток, 2, 1);
				КонецЕсли;
				КорректировкаСтоимостиСписания = Окр(СписатьКоличество * СтрокаТаблицы.СтоимостьОстаток / КоличествоОстаток, 2, 1) - Стоимость;
			
			ИначеЕсли КоличествоОстаток <= СписатьКоличество Тогда
				
				Стоимость = СтрокаТаблицы.СтоимостьОстаток;
				ПогашеннаяСтоимость = СтрокаТаблицы.ПогашеннаяСтоимостьОстаток;
				Количество = КоличествоОстаток;
				
				Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете
				 ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
				Тогда
				
					ПостояннаяРазница = СтрокаТаблицы.ПостояннаяРазницаОстаток;
					ВременнаяРазница = СтрокаТаблицы.ВременнаяРазницаОстаток;
					ПогашеннаяСтоимостьПР = СтрокаТаблицы.ПогашеннаяСтоимостьПРОстаток;
					ПогашеннаяСтоимостьВР = СтрокаТаблицы.ПогашеннаяСтоимостьВРОстаток;
					
				КонецЕсли;
				
			Иначе
				
				Стоимость =	Окр(СписатьКоличество * СтрокаТаблицы.СтоимостьОстаток / КоличествоОстаток, 2, 1);
				ПогашеннаяСтоимость = Окр(СписатьКоличество * СтрокаТаблицы.ПогашеннаяСтоимостьОстаток / КоличествоОстаток, 2, 1);
				Количество = СписатьКоличество;
				
				Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете
				 ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
				Тогда
				
					ПостояннаяРазница = Окр(СписатьКоличество * СтрокаТаблицы.ПостояннаяРазницаОстаток / КоличествоОстаток, 2, 1);
					ВременнаяРазница = Окр(СписатьКоличество * СтрокаТаблицы.ВременнаяРазницаОстаток / КоличествоОстаток, 2, 1);
					ПогашеннаяСтоимостьПР = Окр(СписатьКоличество * СтрокаТаблицы.ПогашеннаяСтоимостьПРОстаток / КоличествоОстаток, 2, 1);
					ПогашеннаяСтоимостьВР = Окр(СписатьКоличество * СтрокаТаблицы.ПогашеннаяСтоимостьВРОстаток / КоличествоОстаток, 2, 1);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
			   И Выборка.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная
			Тогда
				
				Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
					Если СтрокаТаблицы.ВременнаяРазницаОстаток < 0 Тогда
						ВременнаяРазница = Макс(-Выборка.Стоимость + ПогашеннаяСтоимостьВР, СтрокаТаблицы.ВременнаяРазницаОстаток);
					КонецЕсли;
				Иначе
					Стоимость = Мин(Выборка.Стоимость + ПогашеннаяСтоимость, СтрокаТаблицы.СтоимостьОстаток);
				КонецЕсли;
				
			КонецЕсли;
			
			СписатьКоличество = СписатьКоличество - Количество;
			КоличествоРаспределено = КоличествоРаспределено + Количество;
			СтрокаТаблицы.КоличествоОстаток = СтрокаТаблицы.КоличествоОстаток - Количество;
			СтрокаТаблицы.СтоимостьОстаток = СтрокаТаблицы.СтоимостьОстаток - Стоимость;
			СтрокаТаблицы.ПогашеннаяСтоимостьОстаток = СтрокаТаблицы.ПогашеннаяСтоимостьОстаток - ПогашеннаяСтоимость;
			
			Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
				
				СтрокаТаблицы.ПостояннаяРазницаОстаток = СтрокаТаблицы.ПостояннаяРазницаОстаток - ПостояннаяРазница;
				СтрокаТаблицы.ВременнаяРазницаОстаток = СтрокаТаблицы.ВременнаяРазницаОстаток - ВременнаяРазница;
				СтрокаТаблицы.ПогашеннаяСтоимостьПРОстаток = СтрокаТаблицы.ПогашеннаяСтоимостьПРОстаток - ПогашеннаяСтоимостьПР;
				СтрокаТаблицы.ПогашеннаяСтоимостьВРОстаток = СтрокаТаблицы.ПогашеннаяСтоимостьВРОстаток - ПогашеннаяСтоимостьВР;
				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
				РасширеннаяАналитикаУчета.ДвижениеПоРегиструУчетЗатратМатериалыВЭксплуатации(
					СтруктураШапкиДокумента,
					СтрокаТаблицы,
					Выборка,
					ВидОтраженияВУчете,
					Количество,
					Стоимость,
					ПогашеннаяСтоимость,
					КорректировкаСтоимостиСписания,
					Количество, // КоличествоНУ,
					0, // СтоимостьНУ,
					ПостояннаяРазница,
					СтруктураКлючиАналитики,
					СтруктураНаборыЗаписей
				);
				
				Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
					СформироватьДвиженияПоРегиструБухгалтерииПогашениеСтоимости(
						СтруктураШапкиДокумента,
						Выборка,
						Выборка.Склад,
						0, //Количество,
						ПогашеннаяСтоимость,
						0, // СтоимостьНал,
						0, // ПостояннаяРазница,
						ПогашеннаяСтоимость, // ВременнаяРазница,
						Выборка.КодОперации,
						ТаблицаОшибок,
						СтруктураНаборыЗаписей
					);
				КонецЕсли;

			Иначе
				СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатации(
					СтруктураШапкиДокумента,
					Выборка,
					СтрокаТаблицы.ДокументПередачи,
					Количество,
					Стоимость,
					ПогашеннаяСтоимость,
					ПостояннаяРазница,
					ВременнаяРазница,
					ПогашеннаяСтоимостьПР,
					ПогашеннаяСтоимостьВР,
					ВидДвиженияНакопления.Расход,
					Выборка.КодОперации,
					ВидОтраженияВУчете,
					СтруктураНаборыЗаписей[ИмяРегистра]
				);
				
				СформироватьДвиженияПоНаправлениямСписания(
					СтруктураШапкиДокумента,
					Выборка,
					СтрокаТаблицы.ДокументПередачи,
					СтрокаТаблицы.ДокументПередачиДата,
					Количество,
					Стоимость,
					ПогашеннаяСтоимость,
					ПостояннаяРазница,
					ВременнаяРазница,
					ПогашеннаяСтоимостьПР,
					ПогашеннаяСтоимостьВР,
					ВидОтраженияВУчете,
					ТаблицаОстатков,
					ТаблицаПогашеннойСтоимости,
					ТаблицаТоваров,
					ТаблицаОшибок,
					СтруктураНаборыЗаписей
				);
			КонецЕсли;
			
			Если СписатьКоличество <= 0 Тогда
				Прервать;
			КонецЕсли;
							
		КонецЦикла;
		
		Если Выборка.Количество <> КоличествоРаспределено Тогда
			ВывестиСообщениеОПревышенииКоличества(
				СтруктураШапкиДокумента,
				Выборка,
				Выборка.Количество,
				КоличествоРаспределено,
				ВидОтраженияВУчете,
				ТаблицаОшибок
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьСуммуСписанияИзЭксплуатации()

// Процедура формирует движения по операциям списания, возврата и корректировки материалов в эксплуатации.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок
//
Процедура СформироватьДвиженияПоМатериаламВЭксплуатации(
	СтруктураШапкиДокумента,
	ТаблицаОшибок
	) Экспорт
	
	СтруктураНаборыЗаписей = Новый Структура;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("ДокументОприходования");
	ТаблицаТоваров.Колонки.Добавить("СчетУчета");
	
	ТаблицаПогашеннойСтоимости = СформироватьТаблицуПогашеннойСтоимости();
	
	Для Каждого ВидОтраженияВУчете Из Перечисления.ВидыОтраженияВУчете Цикл
		
		СтрокаВидОтраженияВУчете = СтруктураШапкиДокумента.СоответствиеВидУчета[ВидОтраженияВУчете];
		Если СтрокаВидОтраженияВУчете = Неопределено
		 ИЛИ Не СтруктураШапкиДокумента[СтрокаВидОтраженияВУчете]
		Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

		ТаблицаОстатков = СформироватьТаблицуОстатковМатериаловВЭксплуатации(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			МенеджерВременныхТаблиц
		);
		Запрос = СформироватьЗапросПоСписаннымМатериалам(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			МенеджерВременныхТаблиц
		);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			РассчитатьСуммуСписанияИзЭксплуатации(
				СтруктураШапкиДокумента,
				ТаблицаОстатков,
				РезультатЗапроса,
				ВидОтраженияВУчете,
				ТаблицаПогашеннойСтоимости,
				ТаблицаОшибок,
				ТаблицаТоваров,
				СтруктураНаборыЗаписей
			);
		КонецЕсли;
	
		УправлениеЗатратамиДвиженияПоРегистрам.ЗаписатьНаборыЗаписейРегистров(СтруктураНаборыЗаписей);
		
		Если Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
			КорректировкаСтоимости.КорректировкаСписания(
				СтруктураШапкиДокумента.НачДата, 
				СтруктураШапкиДокумента.КонДата, 
				ТаблицаТоваров, 
				СтруктураШапкиДокумента.Ссылка,
				СтруктураШапкиДокумента.Организация,
				ВидОтраженияВУчете,
				Ложь, // НеСписыватьНаПостоянныеЗатраты
				Неопределено, // ДопПараметры
				Ложь, // ПоследнийПередел
				Ложь // ВстречныйВыпуск
			);
			ТаблицаТоваров.Очистить();
		
		КонецЕсли;
	
	КонецЦикла;
	
	РаспределитьПогашеннуюСтоимостьПоСпособамОтраженияРасходов(
		СтруктураШапкиДокумента,
		ТаблицаПогашеннойСтоимости,
		ТаблицаОшибок,
		СтруктураНаборыЗаписей
	);
	
	УправлениеЗатратамиДвиженияПоРегистрам.ЗаписатьНаборыЗаписейРегистров(СтруктураНаборыЗаписей);
	
КонецПроцедуры // СформироватьДвиженияПоМатериаламВЭксплуатации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ БУХГАЛТЕРИИ

// Функция проверяет заполнение счета затрат и счета учета материалов в эксплуатации.
//
// Параметры:
//  СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	СчетЗатрат - ПланыСчетов.Хозрасчетный или ПланыСчетов.Налоговый - Счет затрат
//	СчетУчета - ПланыСчетов.Хозрасчетный или ПланыСчетов.Налоговый - Счет учета материалов в эксплуатации
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ТаблицаОшибок - ТаблицаЗначений - Таблица регистрации ошибок
//
// Возвращаемое значение:
//   Булево – 	Истина - проверка прошла успешно,
//				Ложь - обнаружены ошибки заполнения счетов. 
//
Функция ПроверитьСчетЗатратИСчетУчетаПоВидуОтраженияВУчете(
	СтрокаВыборки,
	СчетЗатрат, 
	СчетУчета,
	ВидОтраженияВУчете,
	ТаблицаОшибок
	)
	
	ПроверкаПройдена = Истина;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		ТекстОтраженияВУчете = "по бухгалтерскому учету";
			
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		ТекстОтраженияВУчете = "по налоговому учету";
		
	Иначе
		ТекстОтраженияВУчете = "";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетЗатрат) Тогда
		   
		ТекстСообщения = "Не указан счет затрат " + ТекстОтраженияВУчете + ":
			|Способ отражения расходов: " + СтрокаВыборки.СпособОтраженияРасходов + "
			|Проводка по погашению стоимости спецодежды (спецоснастки, инвентаря) не сформирована!";
	
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.Сообщение = ТекстСообщения;
		НоваяСтрока.Объект = СтрокаВыборки.СпособОтраженияРасходов;
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(СчетУчета) Тогда
		   
		ТекстСообщения = "Не указан счет учета материала в эксплуатации " + ТекстОтраженияВУчете + ":
			|Номенклатура: " + СтрокаВыборки.Номенклатура + "
			|Проводка по погашению стоимости спецодежды (спецоснастки, инвентаря) не сформирована!";
			
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.Сообщение = ТекстСообщения;
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
	
	Возврат ПроверкаПройдена;

КонецФункции // ПроверитьСчетЗатратИСчетУчетаПоВидуОтраженияВУчете()

// Процедура формирует проводку по погашению стоимости спецодежды (спецоснастки, инвентаря).
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//  СтрокаВыборки- ВыборкаИзРезультатаЗапроса - Строка выборки
//	Склад - СправочникСсылка.Склады - Склад для формирования проводки
//	Количество - Число - Количество проводки
//  Сумма - Число - Сумма проводки
//	КодОперации - ПеречислениеСсылка.КодыОперацийПартииМатериаловВЭксплуатации - Код операции
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//  ВидУчетаПоПБУ18 - ПеречислениеСсылка.ВидыУчетаПоПБУ18 - Вид учета по ПБУ18/02, для которого формируется проводка
//	ТаблицаОшибок - ТаблицаЗначений - Таблица регистрации ошибок
//  РегистрБухгалтерииНаборЗаписей - РегистрБухгалтерииНаборЗаписей - Набор записей регистра бухгалтерии.
//
Процедура СформироватьПроводкуПоРегиструБухгалтерииПогашениеСтоимости(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Склад,
	Знач Количество,
	Знач Сумма,
	КодОперации,
	ВидОтраженияВУчете,
	ВидУчетаПоПБУ18,
	ТаблицаОшибок,
	РегистрБухгалтерииНаборЗаписей
	)
	
	Если Количество = 0
	   И Сумма = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		ИмяПланСчетов = "Хозрасчетный";
		СчетЗатрат = СтрокаВыборки.СчетЗатрат;
		СчетУчета = СтрокаВыборки.СчетУчетаБУ;
		ЭтоИнвентарь = (СчетУчета = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности);
			
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		ИмяПланСчетов = "Налоговый";
		СчетЗатрат = СтрокаВыборки.СчетЗатратНУ;
		СчетУчета = СтрокаВыборки.СчетУчетаНУ;
		ЭтоИнвентарь = (СчетУчета = ПланыСчетов.Налоговый.ИнвентарьИХозяйственныеПринадлежности);
		
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не определено формирование проводки по виду отражения в учете: """ + ВидОтраженияВУчете + """.
			|Процедура <СформироватьПроводкуПоРегиструБухгалтерииПогашениеСтоимости>");
		Возврат;
			
	КонецЕсли;
	
	МассивКодовОпераций = Новый Массив;
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатации);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатацииФикс);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатации);
	МассивКодовОпераций.Добавить(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатацииФикс);
	
	Если МассивКодовОпераций.Найти(КодОперации) <> Неопределено Тогда
		УчетПоКоличеству = Не ЭтоИнвентарь;
	Иначе
		УчетПоКоличеству = ЭтоИнвентарь;
	КонецЕсли;
	
	Если Не УчетПоКоличеству Тогда
		Количество = 0;
	КонецЕсли;
	
	Если Количество = 0
	   И Сумма = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаПройдена = ПроверитьСчетЗатратИСчетУчетаПоВидуОтраженияВУчете(
		СтрокаВыборки,
		СчетЗатрат, 
		СчетУчета,
		ВидОтраженияВУчете,
		ТаблицаОшибок
	);
	
	Если Не ПроверкаПройдена Тогда
		Возврат;
	КонецЕсли;
	
	Если СчетЗатрат <> СчетУчета Тогда
	
		НоваяПроводка = РегистрБухгалтерииНаборЗаписей.Добавить();
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность = Истина;
		НоваяПроводка.Период = СтруктураШапкиДокумента.Дата;
		НоваяПроводка.СписаниеПартий = Истина;
		
		НоваяПроводка.Сумма = Сумма;
		
		Если КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатации Тогда
			НоваяПроводка.Содержание = "Возврат из эксплуатации";
			
			НоваяПроводка.СчетДт = СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", СтрокаВыборки.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Склады", СтрокаВыборки.СкладПолучатель);
			
		ИначеЕсли КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатации
		 ИЛИ КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатацииФикс Тогда	
		 	НоваяПроводка.Содержание = "Перемещение в эксплуатации";
			НоваяПроводка.СчетДт = СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", СтрокаВыборки.Номенклатура);
			
		Иначе
			НоваяПроводка.Содержание = "Погашение стоимости";
			
			УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(
				НоваяПроводка, 
				СтрокаВыборки,
				СтруктураШапкиДокумента,
				ИмяПланСчетов, 
				"Дт",
				Истина // ПолучитьПодразделениеИзСтрокиТаблицы
			);
		КонецЕсли;
		
		НоваяПроводка.КоличествоКт = Количество;
		НоваяПроводка.СчетКт = СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", СтрокаВыборки.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Склады", Склад);
		
		Если ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР
		 ИЛИ ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
			НоваяПроводка.ВидУчетаДт = ВидУчетаПоПБУ18;
			НоваяПроводка.ВидУчетаКт = ВидУчетаПоПБУ18;
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры // СформироватьПроводкуПоРегиструБухгалтерииПогашениеСтоимости()

// Процедура формирует движения по регистрам бухгалтерии "Хозрасчетный" и "Налоговый" по погашению стоимости.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	Склад - СправочникСсылка.Склады - Склад для формирования проводки
//	Количество - Число - Количество материала
//	СтоимостьБух - Число - Стоимость по бухгалтерскому учету
//	СтоимостьНал - Число - Стоимость по налоговому учету
//	ПостояннаяРазница - Число - Стоимость в части постоянной разницы
//	ВременнаяРазница - Число - Стоимость в части временной разницы
//	КодОперации - ПеречислениеСсылка.КодыОперацийПартииМатериаловВЭксплуатации - Код операции
//	ТаблицаОшибок - ТаблицаЗначений - Таблица регистрации ошибок
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегиструБухгалтерииПогашениеСтоимости(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Склад,
	Количество,
	СтоимостьБух,
	СтоимостьНал,
	ПостояннаяРазница,
	ВременнаяРазница,
	КодОперации,
	ТаблицаОшибок,
	СтруктураНаборыЗаписей
	)
	
	Если Количество = 0
	   И СтоимостьБух = 0
	   И СтоимостьНал = 0
	   И ПостояннаяРазница = 0
	   И ВременнаяРазница = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистра = "Хозрасчетный";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьПроводкуПоРегиструБухгалтерииПогашениеСтоимости(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Склад,
			Количество,
			СтоимостьБух,
			КодОперации,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			Неопределено, // ВидУчетаПоПБУ18
			ТаблицаОшибок,
			СтруктураНаборыЗаписей[ИмяРегистра]
			);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		ИмяРегистра = "Налоговый";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьПроводкуПоРегиструБухгалтерииПогашениеСтоимости(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			Склад,
			Количество,
			СтоимостьНал,
			КодОперации,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете,
			Перечисления.ВидыУчетаПоПБУ18.НУ,
			ТаблицаОшибок,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
			
		Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				
			СформироватьПроводкуПоРегиструБухгалтерииПогашениеСтоимости(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				Склад,
				0, // Количество
				ПостояннаяРазница,
				КодОперации,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете,
				Перечисления.ВидыУчетаПоПБУ18.ПР,
				ТаблицаОшибок,
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
			СформироватьПроводкуПоРегиструБухгалтерииПогашениеСтоимости(
				СтруктураШапкиДокумента,
				СтрокаВыборки,
				Склад,
				0, // Количество
				ВременнаяРазница,
				КодОперации,
				Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете,
				Перечисления.ВидыУчетаПоПБУ18.ВР,
				ТаблицаОшибок,
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерииПогашениеСтоимости()

// Процедура формирует движения по регистру бухгалтерии "Налоговый" по формированию постоянных разниц.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	Стоимость - Число - Стоимость по налоговому учету
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегиструБухгалтерииНеУчитываемыеВНУ(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	Стоимость,
	СтруктураНаборыЗаписей
	)
	
	Если Стоимость = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	 И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
		
		ИмяРегистра = "Налоговый";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		НоваяПроводка = СтруктураНаборыЗаписей[ИмяРегистра].Добавить();
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Активность = Истина;
		НоваяПроводка.Период = СтруктураШапкиДокумента.Дата;
		НоваяПроводка.СписаниеПартий = Истина;
		
		НоваяПроводка.Сумма = Стоимость;
		НоваяПроводка.Содержание = "Передача материалов на расходы, не учитываемые в целях налогообложения";
		
		НоваяПроводка.СчетДт = СтрокаВыборки.СчетУчетаНУ;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Номенклатура", СтрокаВыборки.Номенклатура);
			
		НоваяПроводка.СчетКт = СтрокаВыборки.СчетУчетаНУ;
		БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Номенклатура", СтрокаВыборки.Номенклатура);
		
		НоваяПроводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
		НоваяПроводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструБухгалтерииНеУчитываемыеВНУ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ СПОСОБА ОТРАЖЕНИЯ РАСХОДОВ

// Процедура проверяет правильность заполнения способа отражения расходов.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ВыборкаПоСпособам - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок
//
// Возвращаемое значение:
//   Булево – 	Истина - проверка прошла успешно,
//				Ложь - обнаружены ошибки заполнения способа отражения расходов. 
//
Функция ПроверитьСпособОтраженияРасходов(
	СтруктураШапкиДокумента,
	ВыборкаПоСпособам,
	ТаблицаОшибок
	)
	
	ПроверкаПройдена = Истина;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("СтатьяЗатрат", "не указана статья затрат");
	СтруктураРеквизитов.Вставить("Подразделение", "не указано подразделение");
	СтруктураРеквизитов.Вставить("ПодразделениеОрганизации", "не указано подразделение организации");
	
	Выборка = ВыборкаПоСпособам.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Для Каждого Элемент Из СтруктураРеквизитов Цикл
	
			Если Не ЗначениеЗаполнено(Выборка[Элемент.Ключ]) Тогда
				
				ТекстСообщения = "В способе отражения расходов """ 
					+ Выборка.СпособОтраженияРасходов + """"
					+ ?(Выборка.НомерСтроки <> 0, " в строке " + Выборка.НомерСтроки, "")
					+ " " + Элемент.Значение + "!";
				
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.Сообщение = ТекстСообщения;
				НоваяСтрока.Объект = Выборка.СпособОтраженияРасходов;
				
				ПроверкаПройдена = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЦикла;
	
	Возврат ПроверкаПройдена;
	
КонецФункции // ПроверитьСпособОтраженияРасходов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСПРЕДЕЛЕНИЯ ПОГАШЕННОЙ СТОИМОСТИ

// Функция формирует запрос по способам отражения амортизации.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа
//	ТаблицаПогашеннойСтоимости - ТаблицаЗначений - Таблица погашенной стоимости
//
// Возвращаемое значение:
//	Запрос - Запрос по способам распределения
//
Функция СформироватьЗапросПоСпособамОтраженияРасходов(
	СтруктураШапкиДокумента,
	ТаблицаПогашеннойСтоимости
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.СпособОтраженияРасходов
	|	
	|ПОМЕСТИТЬ СпособыОтраженияРасходов
	|ИЗ
	|	&ТаблицаПогашеннойСтоимости КАК Таблица
	|ГДЕ
	|	Таблица.СпособОтраженияРасходов ССЫЛКА Справочник.СпособыОтраженияРасходовПоАмортизации
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.СпособОтраженияРасходов КАК Документ
	|	
	|ПОМЕСТИТЬ ДокументыСписания
	|ИЗ
	|	&ТаблицаПогашеннойСтоимости КАК Таблица
	|ГДЕ
	|	Таблица.СпособОтраженияРасходов ССЫЛКА Документ.СписаниеМатериаловИзЭксплуатации
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходов.НомерСтроки КАК НомерСтроки,
	|	СпособыОтраженияРасходов.Ссылка КАК СпособОтраженияРасходов,
	|	СпособыОтраженияРасходов.Ссылка.СпособРаспределенияЗатратНаВыпуск КАК СпособРаспределенияЗатратНаВыпуск,
	|	СпособыОтраженияРасходов.СтатьяЗатрат,
	|	СпособыОтраженияРасходов.НоменклатурнаяГруппа,
	|	СпособыОтраженияРасходов.Подразделение,
	|	СпособыОтраженияРасходов.ПодразделениеОрганизации,
	|
	|	СпособыОтраженияРасходов.Продукция,
	|	СпособыОтраженияРасходов.СерияПродукции,
	|	СпособыОтраженияРасходов.ХарактеристикаПродукции,
	|	
	|	СпособыОтраженияРасходов.ОбъектСтроительства,
	|	СпособыОтраженияРасходов.СпособСтроительства,
	|	СпособыОтраженияРасходов.Проект,
	|	
	|	СпособыОтраженияРасходов.СчетЗатрат,
	|	СпособыОтраженияРасходов.СчетЗатратНУ,
	|	
	|	СпособыОтраженияРасходов.Субконто1,
	|	СпособыОтраженияРасходов.Субконто2,
	|	СпособыОтраженияРасходов.Субконто3,
	|	СпособыОтраженияРасходов.СубконтоНУ1,
	|	СпособыОтраженияРасходов.СубконтоНУ2,
	|	СпособыОтраженияРасходов.СубконтоНУ3,
	|	
	|	СпособыОтраженияРасходов.Коэффициент
	|	
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходов
	|	
	|ГДЕ
	|	СпособыОтраженияРасходов.Ссылка В (
	|		ВЫБРАТЬ
	|			СпособОтраженияРасходов
	|		ИЗ
	|       	СпособыОтраженияРасходов КАК СпособыОтраженияРасходов
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	0 КАК НомерСтроки,
	|	СписанныеМатериалы.Регистратор КАК СпособОтраженияРасходов,
	|	Неопределено КАК СпособРаспределенияЗатратНаВыпуск,
	|	СписанныеМатериалы.СтатьяЗатрат,
	|	СписанныеМатериалы.НоменклатурнаяГруппа,
	|	СписанныеМатериалы.Подразделение,
	|	СписанныеМатериалы.ПодразделениеОрганизации,
	|
	|	Неопределено КАК Продукция,
	|	Неопределено КАК СерияПродукции,
	|	Неопределено КАК ХарактеристикаПродукции,
	|	
	|	Неопределено КАК ОбъектСтроительства,
	|	Неопределено КАК СпособСтроительства,
	|	Неопределено КАК Проект,
	|
	|	СписанныеМатериалы.СчетДт,
	|	СписанныеМатериалы.СчетДтНУ,
	|
	|	СписанныеМатериалы.СубконтоДт1,
	|	СписанныеМатериалы.СубконтоДт2,
	|	СписанныеМатериалы.СубконтоДт3,
	|	СписанныеМатериалы.СубконтоДтНУ1,
	|	СписанныеМатериалы.СубконтоДтНУ2,
	|	СписанныеМатериалы.СубконтоДтНУ3,
	|	
	|	1 КАК Коэффициент
	|
	|ИЗ
	|	РегистрСведений.СписанныеМатериалыИзЭксплуатации КАК СписанныеМатериалы
	|	
	|ГДЕ
	|	СписанныеМатериалы.Период МЕЖДУ &НачДата И &КонДата
	|	И СписанныеМатериалы.СпособСписанияРасходов = ЗНАЧЕНИЕ(Перечисление.СпособыСписанияРасходов.ИспользоватьСтатьюЗатратДокумента)
	|	И СписанныеМатериалы.Регистратор В (
	|		ВЫБРАТЬ
	|			Документ
	|		ИЗ
	|       	ДокументыСписания КАК ДокументыСписания
	|		)
	|	//ДляУпрУчета И СписанныеМатериалы.ОтражатьВУправленческомУчете
	|	//ДляБухУчета И СписанныеМатериалы.ОтражатьВБухгалтерскомУчете
	|	//ДляНалУчета И СписанныеМатериалы.ОтражатьВНалоговомУчете
	|	//ДляРеглУчета И СписанныеМатериалы.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|
	|ИТОГИ
	|	СУММА(Коэффициент)
	|ПО
	|	СпособыОтраженияРасходов.Ссылка
	|	
	|";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаПогашеннойСтоимости", ТаблицаПогашеннойСтоимости);
	Если СтруктураШапкиДокумента.Свойство("НачДата") Тогда
		Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.НачДата);
		Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.КонДата);
	Иначе
		Запрос.УстановитьПараметр("НачДата", НачалоДня(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонДата", КонецДня(СтруктураШапкиДокумента.Дата));
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоСпособамОтраженияРасходов()

// Процедура выводит сообщение об нулевой сумме коэффициентов.
//
// Параметры:
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки
//	ТаблицаОшибок - ТаблицаЗначений - Таблица регистрации ошибок
//
Процедура ВывестиСообщениеНулеваяСуммаКоэффициентов(
	СтрокаВыборки,
	ТаблицаОшибок
	)
	
	ТекстСообщения = "В способе отражения расходов по амортизации (погашению стоимости) """ 
		+ СтрокаВыборки.СпособОтраженияРасходов
		+ """ сумма коэффициентов равна 0!";
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.Сообщение = ТекстСообщения;
	НоваяСтрока.Объект = СтрокаВыборки.СпособОтраженияРасходов;
	
КонецПроцедуры // ВывестиСообщениеНулеваяСуммаКоэффициентов()

// Процедура распределяет погашенную стоимость по способам отражения.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаПогашеннойСтоимости - ТаблицаЗначений - Таблица сумм погашенной стоимости
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура РаспределитьПогашеннуюСтоимостьПоСпособамОтраженияРасходов(
	СтруктураШапкиДокумента,
	ТаблицаПогашеннойСтоимости,
	ТаблицаОшибок,
	СтруктураНаборыЗаписей
	)
	
	Если ТаблицаПогашеннойСтоимости.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПогашеннойСтоимости.Свернуть("
	    |КорАналитикаВидаУчета,
		|КорАналитикаУчетаЗатрат,
		|КорАналитикаРаспределенияЗатрат,
		|КорАналитикаУчетаПартий,
		|Склад,
		|Номенклатура,
		|СпособОтраженияРасходов,
		|СчетУчетаБУ,
		|СчетУчетаНУ"
		," 
		|КоличествоУпр,
		|КоличествоБух,
		|КоличествоНал,
		|СтоимостьУпр,
		|СтоимостьБух,
		|СтоимостьНал,
		|ПостояннаяРазница,
		|ВременнаяРазница"
	);
	
	Запрос = СформироватьЗапросПоСпособамОтраженияРасходов(
		СтруктураШапкиДокумента,
		ТаблицаПогашеннойСтоимости
	);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ;
	КонецЕсли;
	
	// определим структуру выходной таблицы
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	ТаблицаЗатрат.Колонки.Добавить("СпособОтраженияРасходов", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	
	Если ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.СписаниеМатериаловИзэксплуатации") Тогда
		Если СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
			КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатацииФикс;
		Иначе
			КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатации;
		КонецЕсли;
	Иначе
		КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПогашениеСтоимости;
	КонецЕсли;
	
	ВыборкаПоСпособам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСпособам.Следующий() Цикл
		
		ПроверитьСпособОтраженияРасходов(
			СтруктураШапкиДокумента,
			ВыборкаПоСпособам,
			ТаблицаОшибок
		);
		
		Если ВыборкаПоСпособам.Коэффициент = 0 Тогда
			ВывестиСообщениеНулеваяСуммаКоэффициентов(
				ВыборкаПоСпособам,
				ТаблицаОшибок
			);
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СпособОтраженияРасходов", ВыборкаПоСпособам.СпособОтраженияРасходов);
		
		МассивСтрок = ТаблицаПогашеннойСтоимости.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Строка Из МассивСтрок Цикл
			
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				ВсегоКоличествоУпр = Строка.КоличествоУпр;
				ВсегоСтоимостьУпр = Строка.СтоимостьУпр;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ВсегоКоличествоБух = Строка.КоличествоБух;
				ВсегоСтоимостьБух = Строка.СтоимостьБух;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				ВсегоКоличествоНал = Строка.КоличествоНал;
				ВсегоСтоимостьНал = Строка.СтоимостьНал;
				ВсегоПостояннаяРазница = Строка.ПостояннаяРазница;
				ВсегоВременнаяРазница = Строка.ВременнаяРазница;
				ВсегоОбщаяСтоимость = ВсегоСтоимостьНал + ВсегоПостояннаяРазница + ВсегоВременнаяРазница;
			КонецЕсли;
			
			ВсегоКоэффициент = ВыборкаПоСпособам.Коэффициент;
			
			Выборка = ВыборкаПоСпособам.Выбрать();
			Пока Выборка.Следующий() Цикл
			
				Коэффициент = Выборка.Коэффициент;
				
				КоличествоУпр = 0;
				КоличествоБух = 0;
				КоличествоНал = 0;
				СтоимостьУпр = 0;
				СтоимостьБух = 0;
				СтоимостьНал = 0;
				ПостояннаяРазница = 0;
				ВременнаяРазница = 0;
				
				Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
					КоличествоУпр = ?(ВсегоКоэффициент <> 0, Окр(ВсегоКоличествоУпр * Коэффициент / ВсегоКоэффициент, 3, 1), 0);
					ВсегоКоличествоУпр = ВсегоКоличествоУпр - КоличествоУпр;
				
					СтоимостьУпр = ?(ВсегоКоэффициент <> 0, Окр(ВсегоСтоимостьУпр * Коэффициент / ВсегоКоэффициент, 2, 1), 0);
					ВсегоСтоимостьУпр = ВсегоСтоимостьУпр - СтоимостьУпр;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					КоличествоБух = ?(ВсегоКоэффициент <> 0, Окр(ВсегоКоличествоБух * Коэффициент / ВсегоКоэффициент, 3, 1), 0);
					ВсегоКоличествоБух = ВсегоКоличествоБух - КоличествоБух;
				
					СтоимостьБух = ?(ВсегоКоэффициент <> 0, Окр(ВсегоСтоимостьБух * Коэффициент / ВсегоКоэффициент, 2, 1), 0);
					ВсегоСтоимостьБух = ВсегоСтоимостьБух - СтоимостьБух;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					КоличествоНал = ?(ВсегоКоэффициент <> 0, Окр(ВсегоКоличествоНал * Коэффициент / ВсегоКоэффициент, 3, 1), 0);
					ВсегоКоличествоНал = ВсегоКоличествоНал - КоличествоНал;
					
					СтоимостьНал = ?(ВсегоКоэффициент <> 0, Окр(ВсегоСтоимостьНал * Коэффициент / ВсегоКоэффициент, 2, 1), 0);
					ВсегоСтоимостьНал = ВсегоСтоимостьНал - СтоимостьНал;
					
					ПостояннаяРазница = Окр(ВсегоПостояннаяРазница * Коэффициент / ВсегоКоэффициент, 2, 1);
					ВсегоПостояннаяРазница = ВсегоПостояннаяРазница - ПостояннаяРазница;
					
					ВременнаяРазница = Окр(ВсегоВременнаяРазница * Коэффициент / ВсегоКоэффициент, 2, 1);
					ВсегоВременнаяРазница = ВсегоВременнаяРазница - ВременнаяРазница;
					
					ОбщаяСтоимость = Окр(ВсегоОбщаяСтоимость * Коэффициент / ВсегоКоэффициент, 2, 1);
					ВсегоОбщаяСтоимость = ВсегоОбщаяСтоимость - ОбщаяСтоимость;
					
					// Скорректируем сумму по временной или постоянной разнице для исключения ошибок округления.
					Если СтоимостьНал + ПостояннаяРазница + ВременнаяРазница <> ОбщаяСтоимость Тогда
						Если ВременнаяРазница <> 0 Тогда
							ВременнаяРазница = ОбщаяСтоимость - (СтоимостьНал + ПостояннаяРазница);
						ИначеЕсли ПостояннаяРазница <> 0 Тогда
							ПостояннаяРазница = ОбщаяСтоимость - СтоимостьНал;
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;
				
				ВсегоКоэффициент = ВсегоКоэффициент - Выборка.Коэффициент;
								
				// Заполним строку отражения затрат.
				НоваяСтрока = ТаблицаЗатрат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				НоваяСтрока.СпособОтраженияРасходов = ВыборкаПоСпособам.СпособОтраженияРасходов;
				
				НоваяСтрока.Номенклатура = Строка.Номенклатура;
				НоваяСтрока.СчетУчетаБУ = Строка.СчетУчетаБУ;
				НоваяСтрока.СчетУчетаНУ = Строка.СчетУчетаНУ;
				НоваяСтрока.КодОперации = КодОперации;
				
				Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
					НоваяСтрока.КорАналитикаВидаУчета = Строка.КорАналитикаВидаУчета;
					НоваяСтрока.КорАналитикаУчетаЗатрат = Строка.КорАналитикаУчетаЗатрат;
					НоваяСтрока.КорАналитикаРаспределенияЗатрат = Строка.КорАналитикаРаспределенияЗатрат;
					НоваяСтрока.КорАналитикаУчетаПартий = Строка.КорАналитикаУчетаПартий;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
					НоваяСтрока.КоличествоУпр = КоличествоУпр;
					НоваяСтрока.СуммаУпр = СтоимостьУпр;
				КонецЕсли;
					
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
					НоваяСтрока.КоличествоБух = КоличествоБух;
					НоваяСтрока.СуммаБух = СтоимостьБух;
				КонецЕсли;
					
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					НоваяСтрока.КоличествоНал = КоличествоНал;
					НоваяСтрока.СуммаНал = СтоимостьНал;
					НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;
					НоваяСтрока.ВременнаяРазница = ВременнаяРазница;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
				 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
				Тогда
					СформироватьДвиженияПоРегиструБухгалтерииПогашениеСтоимости(
						СтруктураШапкиДокумента,
						НоваяСтрока,
						Строка.Склад,
						КоличествоБух,
						СтоимостьБух,
						СтоимостьНал,
						ПостояннаяРазница,
						ВременнаяРазница,
						КодОперации,
						ТаблицаОшибок,
						СтруктураНаборыЗаписей
					);
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаЗатрат.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	
	УправлениеЗатратамиДвиженияПоРегистрам.СформироватьДвиженияПоОтражениюЗатрат(
		СтруктураШапкиДокумента,
		ТаблицаЗатрат,
		Неопределено, // ВидОтраженияВУчете
		СтруктураНаборыЗаписей
	);
	
КонецПроцедуры // РаспределитьПогашеннуюСтоимостьПоСпособамОтраженияРасходов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРА ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО СПИСАНИЮ ИЗ ЭКСПЛУАТАЦИИ

// Процедура формирует движения по списанию материалов из эксплуатации.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаПоМатериалам - ТаблицаЗначений - Таблица документа
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок
//
Процедура СформироватьДвиженияПоСписаниюИзЭксплуатации(
	СтруктураШапкиДокумента,
	ТаблицаПоМатериалам,
	ТаблицаОшибок
	) Экспорт
	
	ТаблицаПогашеннойСтоимости = СформироватьТаблицуПогашеннойСтоимости();
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоМатериалам Цикл
		
		// Запомним погашенную стоимость в таблице значений.
		НоваяСтрока = ТаблицаПогашеннойСтоимости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		Если СтруктураШапкиДокумента.СпособСписанияРасходов = Перечисления.СпособыСписанияРасходов.ИспользоватьСтатьюЗатратДокумента Тогда
			НоваяСтрока.СпособОтраженияРасходов = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
			
			НоваяСтрока.КорАналитикаВидаУчета = СтрокаТабличнойЧасти.АналитикаВидаУчета;
			НоваяСтрока.КорАналитикаУчетаЗатрат = СтрокаТабличнойЧасти.АналитикаУчетаЗатрат;
			НоваяСтрока.КорАналитикаУчетаПартий = СтрокаТабличнойЧасти.АналитикаУчетаПартий;
			НоваяСтрока.КорАналитикаРаспределенияЗатрат = СтрокаТабличнойЧасти.АналитикаРаспределенияЗатрат;
			
			Если СтрокаТабличнойЧасти.ОтражатьВУправленческомУчете Тогда
				
				НоваяСтрока.КоличествоУпр = СтрокаТабличнойЧасти.Количество;
				Если СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
					НоваяСтрока.СтоимостьУпр = СтрокаТабличнойЧасти.Стоимость;
				КонецЕсли;
				
			КонецЕсли;
				
			Если СтрокаТабличнойЧасти.ОтражатьВБухгалтерскомУчете Тогда
				
				НоваяСтрока.КоличествоБух = СтрокаТабличнойЧасти.Количество;
				НоваяСтрока.КоличествоНал = СтрокаТабличнойЧасти.Количество;
				Если СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
					НоваяСтрока.СтоимостьБух = СтрокаТабличнойЧасти.Стоимость;
					НоваяСтрока.ВременнаяРазница = СтрокаТабличнойЧасти.Стоимость;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				
				НоваяСтрока.КоличествоУпр = СтрокаТабличнойЧасти.Количество;
				Если СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
					НоваяСтрока.СтоимостьУпр = СтрокаТабличнойЧасти.Стоимость;
				КонецЕсли;
				
			КонецЕсли;
				
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				
				НоваяСтрока.КоличествоБух = СтрокаТабличнойЧасти.Количество;
				Если СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
					НоваяСтрока.СтоимостьБух = СтрокаТабличнойЧасти.СтоимостьРегл;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				НоваяСтрока.КоличествоНал = СтрокаТабличнойЧасти.Количество;
				Если СтруктураШапкиДокумента.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
					НоваяСтрока.ВременнаяРазница = СтрокаТабличнойЧасти.СтоимостьРегл;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураНаборыЗаписей = Новый Структура;
	
	РаспределитьПогашеннуюСтоимостьПоСпособамОтраженияРасходов(
		СтруктураШапкиДокумента,
		ТаблицаПогашеннойСтоимости,
		ТаблицаОшибок,
		СтруктураНаборыЗаписей
	);
	
	УправлениеЗатратамиДвиженияПоРегистрам.ЗаписатьНаборыЗаписейРегистров(СтруктураНаборыЗаписей);
	
КонецПроцедуры // СформироватьДвиженияПоСписаниюИзЭксплуатации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРАМ

// Процедура формирует движение по регистру "Партии материалов в эксплуатации".
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	ДокументПередачи - ДокументСсылка.ПередачаМатериаловВЭксплуатацию - Документ передачи
//	Количество - Число - Количество материалов
//  Стоимость - Число - Сумма материалов
//  ПогашеннаяСтоимость - Число - Сумма погашенной стоимости
//  ПостояннаяРазница - Число - Сумма постоянной разницы
//  ВременнаяРазница - Число - Сумма временной разницы
//  ПогашеннаяСтоимостьПР - Число - Сумма погашенной стоимости в части постоянной разницы
//  ПогашеннаяСтоимостьВР - Число - Сумма погашенной стоимости в части временной разницы
//
//	ВидДвижения - ВидДвиженияНакопления - Текущий вид движения
//	КодОперации - ПеречислениеСсылка.КодыОперацийПартииМатериаловВЭксплуатации - Код операции
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	НаборЗаписейПартииМатериалов - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Партии материалов в эксплуатации".
//
Процедура СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатации(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ДокументПередачи,
	Количество,
	Стоимость,
	ПогашеннаяСтоимость,
	ПостояннаяРазница,
	ВременнаяРазница,
	ПогашеннаяСтоимостьПР,
	ПогашеннаяСтоимостьВР,
	ВидДвижения,
	КодОперации,
	ВидОтраженияВУчете,
	НаборЗаписейПартииМатериалов
	)
	
	Если Количество = 0
	   И Стоимость = 0
	   И ПогашеннаяСтоимость = 0
	   И ПостояннаяРазница = 0
	   И ВременнаяРазница = 0
	   И ПогашеннаяСтоимостьПР = 0
	   И ПогашеннаяСтоимостьВР = 0
	Тогда
		Возврат;
	КонецЕсли;
	
	// В движениях по регистру "Партии материалов в эксплуатации" должны быть заполнены измерения:
	//	- Подразделение,
	//	- СчетУчета - заполняется только при отражении документа в бухгалтерском или налоговом учете,
	//	- Номенклатура,
	//	- ХарактеристикаНоменклатуры,
	//	- СерияНоменклатуры,
	//	- ДокументПередачи,
	//	- ФизЛицо,
	//	- НазначениеИспользования.
	
	НоваяСтрока = НаборЗаписейПартииМатериалов.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Период = СтруктураШапкиДокумента.ПериодРегистрации;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
	НоваяСтрока.ДокументПередачи = ДокументПередачи;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Подразделение = СтрокаВыборки.Подразделение;
	Иначе
		НоваяСтрока.Подразделение = СтрокаВыборки.ПодразделениеОрганизации;
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетУчета;
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.СчетУчета = СтрокаВыборки.СчетУчетаНУ;
		
	КонецЕсли;
	
	НоваяСтрока.КодОперации = КодОперации;
	НоваяСтрока.СписаниеПартий = Истина;
	
	Если КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПеремещениеВЭксплуатации
	   И ВидДвижения = ВидДвиженияНакопления.Расход
	Тогда
		НоваяСтрока.НомерКорСтроки = СтрокаВыборки.НомерСтроки;
		
	ИначеЕсли КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ВозвратИзЭксплуатации
		ИЛИ КодОперации = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатации
	Тогда
		НоваяСтрока.НомерКорСтроки = СтрокаВыборки.НомерСтроки;
		
	КонецЕсли;
	
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.Стоимость = Стоимость;
	
	Если ВидОтраженияВУчете <> Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПогашеннаяСтоимость = ПогашеннаяСтоимость;
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;
		НоваяСтрока.ВременнаяРазница = ВременнаяРазница;
		
		НоваяСтрока.ПогашеннаяСтоимостьПР = ПогашеннаяСтоимостьПР;
		НоваяСтрока.ПогашеннаяСтоимостьВР = ПогашеннаяСтоимостьВР;
	КонецЕсли;
	
	// Если в наборе записей 1000 строк, запишем набор.
	Если НаборЗаписейПартииМатериалов.Количество() = 1000 Тогда
		НаборЗаписейПартииМатериалов.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатации()

// Процедура формирует движение по регистрам "Партии материалов в эксплуатации" по всем видам учета.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура – Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//  Стоимость - Число - Сумма материалов
//  ПогашеннаяСтоимостьУпр - Число - Сумма погашенной стоимости по упр. учету
//  ПогашеннаяСтоимостьБух - Число - Сумма погашенной стоимости по бух. учету
//  ПогашеннаяСтоимостьНал - Число - Сумма погашенной стоимости по нал. учету
//	ВременнаяРазница - Число - Стоимость в части временной разницы
//	ПостояннаяРазница - Число - Стоимость в части постоянной разницы
//  ПогашеннаяПостояннаяРазница - Число - Сумма погашенной стоимости в части постоянной разницы
//  ПогашеннаяВременнаяРазница - Число - Сумма погашенной стоимости в части временной разницы
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура СформироватьДвиженияПоРегистрамПартииМатериаловВЭксплуатации(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ПогашеннаяСтоимостьУпр,
	ПогашеннаяСтоимостьБух,
	ПогашеннаяСтоимостьНал,
	ВременнаяРазница,
	ПостояннаяРазница,
	ПогашеннаяПостояннаяРазница,
	ПогашеннаяВременнаяРазница,
	СтруктураНаборыЗаписей
	)
	
	КодОперацииПогашениеСтоимости = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПогашениеСтоимости;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистра = "ПартииМатериаловВЭксплуатации";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатации(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборки.ДокументПередачи,
			0, // Количество,
			0, // Стоимость,
			ПогашеннаяСтоимостьУпр,
			0, // ПостояннаяРазница,
			0, // ВременнаяРазница,
			0, // ПогашеннаяПостояннаяРазница,
			0, // ПогашеннаяВременнаяРазница,
			ВидДвиженияНакопления.Приход,
			КодОперацииПогашениеСтоимости,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ИмяРегистра = "ПартииМатериаловВЭксплуатацииБухгалтерскийУчет";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатации(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборки.ДокументПередачи,
			0, // Количество,
			0, // Стоимость,
			ПогашеннаяСтоимостьБух,
			0, // ПостояннаяРазница,
			0, // ВременнаяРазница,
			0, // ПогашеннаяПостояннаяРазница,
			0, // ПогашеннаяВременнаяРазница,
			ВидДвиженияНакопления.Приход,
			КодОперацииПогашениеСтоимости,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		ИмяРегистра = "ПартииМатериаловВЭксплуатацииНалоговыйУчет";
		
		ПолученНаборЗаписей = УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
		Если Не ПолученНаборЗаписей Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатации(
			СтруктураШапкиДокумента,
			СтрокаВыборки,
			СтрокаВыборки.ДокументПередачи,
			0, // Количество,
			ПогашеннаяСтоимостьНал, // Стоимость,
			0, // ПогашеннаяСтоимость,
			- ПостояннаяРазница,
			- ВременнаяРазница,
			- ПогашеннаяПостояннаяРазница, // ПогашеннаяСтоимостьПР
			- ПогашеннаяВременнаяРазница, // ПогашеннаяСтоимостьВР
			ВидДвиженияНакопления.Расход,
			КодОперацииПогашениеСтоимости,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете,
			СтруктураНаборыЗаписей[ИмяРегистра]
		);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА ПОГАШЕННОЙ СТОИМОСТИ

// Функция формирует запрос по остаткам материалов в эксплуатации.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
// Возвращаемое значение:
//	Запрос - Запрос по остаткам материалов в эксплуатации
//
Функция СформироватьЗапросПоОстаткамМатериаловВЭксплуатацииРасширеннаяАналитика(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете
	)
	
	ТекстЗапросаСКомментариями = "
	|ВЫБРАТЬ
	|	РегистрАналитикаВидаУчета.Ссылка
	|
	|ПОМЕСТИТЬ ТаблицаАналитикиВидаУчета
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|ГДЕ
	|	(РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МатериалыВЭксплуатации)
	|	ИЛИ РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ПогашеннаяСтоимость))
	|	//ДляУпрУчета И РегистрАналитикаВидаУчета.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	//ДляРеглУчета И РегистрАналитикаВидаУчета.Организация = &Организация
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	УчетЗатрат.АналитикаУчетаЗатрат,
	|	УчетЗатрат.АналитикаРаспределенияЗатрат,
	|	УчетЗатрат.АналитикаУчетаПартий,
	|
	|	РегистрАналитикаВидаУчета.Организация,
	|	РегистрАналитикаВидаУчета.ПодразделениеОрганизации,
	|	РегистрАналитикаВидаУчета.Подразделение,
	|
	|	РегистрАналитикаВидаУчета.СчетУчета,
	|	РегистрАналитикаВидаУчета.СчетУчета КАК СчетУчетаБУ,
	|	РегистрАналитикаВидаУчета.СчетУчетаНУ КАК СчетУчетаНУ,
	|
	|	РегистрАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
	|
	|	РегистрАналитикаУчетаПартий.НазначениеИспользования,
	|	ЕСТЬNULL(РегистрАналитикаУчетаПартий.НазначениеИспользования.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	РегистрАналитикаУчетаПартий.НазначениеИспользования.СпособПогашенияСтоимости КАК СпособПогашенияСтоимости,
	|	РегистрАналитикаУчетаПартий.НазначениеИспользования.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	Ложь КАК НеУчитываемыеВНУ,
	|	Истина КАК УчитываемыеВНУ,
	|
	|	//ДляРеглУчета СУММА(
	|	//ДляРеглУчета 		ВЫБОР КОГДА РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МатериалыВЭксплуатации) ТОГДА
	|   //ДляРеглУчета 			УчетЗатрат.ПостояннаяРазницаНачальныйОстаток
	|	//ДляРеглУчета 		ИНАЧЕ
	|   //ДляРеглУчета 			0
	|	//ДляРеглУчета 		КОНЕЦ
	|	//ДляРеглУчета ) КАК ПостояннаяРазницаНачальныйОстаток,
	|   //ДляРеглУчета СУММА(УчетЗатрат.ПостояннаяРазницаКонечныйОстаток) КАК ПостояннаяРазницаКонечныйОстаток,
	|
	|   //ДляРеглУчета 0 КАК ВременнаяРазницаНачальныйОстаток,
	|   //ДляРеглУчета 0 КАК ВременнаяРазницаКонечныйОстаток,
	|
	|	//ДляРеглУчета 0 КАК ПогашеннаяСтоимостьВРНачальныйОстаток,
	|	//ДляРеглУчета 0 КАК ПогашеннаяСтоимостьПРНачальныйОстаток,
	|	//ДляРеглУчета 0 КАК ПогашеннаяСтоимостьВРКонечныйОстаток,
	|	//ДляРеглУчета 0 КАК ПогашеннаяСтоимостьПРКонечныйОстаток,
	|
	|	СУММА(
	|		ВЫБОР КОГДА РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ПогашеннаяСтоимость) ТОГДА
	|   		- УчетЗатрат.СтоимостьНачальныйОстаток
	|		ИНАЧЕ
	|   		0
	|		КОНЕЦ
	|	) КАК ПогашеннаяСтоимостьНачальныйОстаток,
	|
	|	СУММА(
	|		ВЫБОР КОГДА РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МатериалыВЭксплуатации) ТОГДА
	|   		УчетЗатрат.СтоимостьНачальныйОстаток
	|		ИНАЧЕ
	|   		0
	|		КОНЕЦ
	|	) КАК СтоимостьНачальныйОстаток,
	|	СУММА(УчетЗатрат.СтоимостьКонечныйОстаток) КАК СтоимостьКонечныйОстаток
	|
	|ИЗ
	|	РегистрНакопления.УчетЗатрат%СуффиксРегл%.ОстаткиИОбороты(&НачГраница, &КонГраница, , ,
	|		АналитикаВидаУчета В (
	|			ВЫБРАТЬ
	|           	Ссылка
	|           ИЗ
	|           	ТаблицаАналитикиВидаУчета
	|           )
	|	) КАК УчетЗатрат
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|	ПО 
	|		УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|	ПО 
	|		УчетЗатрат.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|	ПО 
	|		УчетЗатрат.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетЗатрат.АналитикаУчетаЗатрат,
	|	УчетЗатрат.АналитикаРаспределенияЗатрат,
	|	УчетЗатрат.АналитикаУчетаПартий,
	|
	|	РегистрАналитикаВидаУчета.Организация,
	|	РегистрАналитикаВидаУчета.ПодразделениеОрганизации,
	|	РегистрАналитикаВидаУчета.Подразделение,
	|	РегистрАналитикаВидаУчета.СчетУчета,
	|	РегистрАналитикаВидаУчета.СчетУчетаНУ,
	|
	|	РегистрАналитикаУчетаЗатрат.Затрата,
	|	РегистрАналитикаУчетаПартий.НазначениеИспользования,
	|	ЕСТЬNULL(РегистрАналитикаУчетаПартий.НазначениеИспользования.СрокПолезногоИспользования, 0),
	|	РегистрАналитикаУчетаПартий.НазначениеИспользования.СпособПогашенияСтоимости,
	|	РегистрАналитикаУчетаПартий.НазначениеИспользования.СпособОтраженияРасходов
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрАналитикаВидаУчета.Организация,
	|	РегистрАналитикаВидаУчета.ПодразделениеОрганизации,
	|	РегистрАналитикаВидаУчета.Подразделение,
	|	РегистрАналитикаВидаУчета.СчетУчета,
	|	РегистрАналитикаВидаУчета.СчетУчетаНУ,
	|	УчетЗатрат.АналитикаУчетаЗатрат,
	|	УчетЗатрат.АналитикаРаспределенияЗатрат,
	|	УчетЗатрат.АналитикаУчетаПартий
	|";
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями,
		ВидОтраженияВУчете
	);
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.НачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.КонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);

	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоОстаткамМатериаловВЭксплуатацииРасширеннаяАналитика()

// Функция формирует запрос по остаткам материалов в эксплуатации.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//
// Возвращаемое значение:
//	Запрос - Запрос по остаткам материалов в эксплуатации
//
Функция СформироватьЗапросПоОстаткамМатериаловВЭксплуатации(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете
	)
	
	ТекстЗапросаСКомментариями = "
	|ВЫБРАТЬ
	|	//ДляРеглУчета ПартииМатериалов.Организация,
	|	//ДляРеглУчета ПартииМатериалов.Подразделение КАК ПодразделениеОрганизации,
	|	//ДляУпрУчета ПартииМатериалов.Подразделение,
	|
	|	//ДляБухУчета ПартииМатериалов.СчетУчета,
	|	//ДляБухУчета ПартииМатериалов.СчетУчета КАК СчетУчетаБУ,
	|	//ДляНалУчета ПартииМатериалов.СчетУчета КАК СчетУчетаНУ,
	|
	|	ПартииМатериалов.Подразделение,
	|	ПартииМатериалов.Номенклатура,
	|	ПартииМатериалов.ХарактеристикаНоменклатуры,
	|	ПартииМатериалов.СерияНоменклатуры,
	|	ПартииМатериалов.ФизЛицо,
	|	ПартииМатериалов.НазначениеИспользования,
	|	ЕСТЬNULL(ПартииМатериалов.НазначениеИспользования.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	ПартииМатериалов.НазначениеИспользования.СпособПогашенияСтоимости КАК СпособПогашенияСтоимости,
	|	ПартииМатериалов.НазначениеИспользования.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	ПартииМатериалов.ДокументПередачи,
	|	Ложь КАК НеУчитываемыеВНУ,
	|	Истина КАК УчитываемыеВНУ,
	|
	|   //ДляНалУчета ПартииМатериалов.ПостояннаяРазницаНачальныйОстаток,
	|   //ДляНалУчета ПартииМатериалов.ПостояннаяРазницаКонечныйОстаток,
	|   //ДляНалУчета ПартииМатериалов.ВременнаяРазницаНачальныйОстаток,
	|   //ДляНалУчета ПартииМатериалов.ВременнаяРазницаКонечныйОстаток,
	|	//ДляНалУчета ПартииМатериалов.ПогашеннаяСтоимостьПРНачальныйОстаток,
	|	//ДляНалУчета ПартииМатериалов.ПогашеннаяСтоимостьВРНачальныйОстаток,
	|	//ДляНалУчета ПартииМатериалов.ПогашеннаяСтоимостьПРКонечныйОстаток,
	|	//ДляНалУчета ПартииМатериалов.ПогашеннаяСтоимостьВРКонечныйОстаток,
	|
	|	//ДляУпрУчета ПартииМатериалов.ПогашеннаяСтоимостьНачальныйОстаток,
	|	//ДляБухУчета ПартииМатериалов.ПогашеннаяСтоимостьНачальныйОстаток,
	|	//ДляНалУчета 0 КАК ПогашеннаяСтоимостьНачальныйОстаток,
	|
	|	ПартииМатериалов.СтоимостьНачальныйОстаток,
	|	ПартииМатериалов.СтоимостьКонечныйОстаток
	|
	|ИЗ
	|	РегистрНакопления.ПартииМатериаловВЭксплуатации%СуффиксУчета%.ОстаткиИОбороты(&НачГраница, &КонГраница, , ,
	|		//ДляРеглУчета Организация = &Организация
	|	) КАК ПартииМатериалов
	|
	|ГДЕ
	|	//ДляУпрУчета ПартииМатериалов.ПогашеннаяСтоимостьПриход = 0 // если погашение стоимости не производилось в текущем месяце
	|	//ДляБухУчета ПартииМатериалов.ПогашеннаяСтоимостьПриход = 0 // если погашение стоимости не производилось в текущем месяце
	|	//ДляНалУчета ПартииМатериалов.ПогашеннаяСтоимостьВРПриход = 0 // если погашение стоимости не производилось в текущем месяце
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляРеглУчета ПартииМатериалов.Организация,
	|	//ДляРеглУчета ПартииМатериалов.Подразделение,
	|	//ДляУпрУчета ПартииМатериалов.Подразделение,
	|
	|	//ДляБухУчета ПартииМатериалов.СчетУчета,
	|	//ДляНалУчета ПартииМатериалов.СчетУчета,
	|
	|	ПартииМатериалов.Подразделение,
	|	ПартииМатериалов.Номенклатура,
	|	ПартииМатериалов.ХарактеристикаНоменклатуры,
	|	ПартииМатериалов.СерияНоменклатуры,
	|	ПартииМатериалов.ФизЛицо,
	|	ПартииМатериалов.НазначениеИспользования,
	|	ПартииМатериалов.ДокументПередачи
	|";
	
	ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями,
		ВидОтраженияВУчете
	);
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачГраница", СтруктураШапкиДокумента.НачГраница);
	Запрос.УстановитьПараметр("КонГраница", СтруктураШапкиДокумента.КонГраница);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);

	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоОстаткамМатериаловВЭксплуатации()

// Процедура рассчитывает сумму погашения стоимости.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	ТаблицаПогашеннойСтоимости - ТаблицаЗначений - Таблица погашенной стоимости
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура РассчитатьПогашеннуюСтоимость(
	СтруктураШапкиДокумента,
	ВидОтраженияВУчете,
	ТаблицаПогашеннойСтоимости,
	ТаблицаОшибок,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		Запрос = СформироватьЗапросПоОстаткамМатериаловВЭксплуатацииРасширеннаяАналитика(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете
		);
	Иначе
		Запрос = СформироватьЗапросПоОстаткамМатериаловВЭксплуатации(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете
		);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		СуффиксИмениРегистра = СтруктураШапкиДокумента.СуффиксыИмениРегистра[ВидОтраженияВУчете];
		ИмяРегистра = "ПартииМатериаловВЭксплуатации" + СуффиксИмениРегистра;
			
		УправлениеЗатратамиДвиженияПоРегистрам.ПолучитьНаборЗаписейРегистра(
			СтруктураШапкиДокумента, 
			ИмяРегистра,
			СтруктураНаборыЗаписей
		);
	КонецЕсли;
	
	КодОперацииПогашениеСтоимости = Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.ПогашениеСтоимости;
	
	СтруктураКлючиАналитики = Новый Структура;
	
	Выборка  = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Погашение стоимости производим только для линейного способа.
		Если Выборка.СпособПогашенияСтоимости <> Перечисления.СпособыПогашенияСтоимости.Линейный Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверкаПройдена = ПроверитьНазначениеИспользования(
			СтруктураШапкиДокумента,
			Выборка,
			ТаблицаОшибок
		);
		Если Не ПроверкаПройдена Тогда
			Продолжить;
		КонецЕсли;
		
		СтоимостьОстаток = Выборка.СтоимостьНачальныйОстаток - Выборка.ПогашеннаяСтоимостьНачальныйОстаток;
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете
		 ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
		Тогда
			ПостояннаяРазницаОстаток = Выборка.ПостояннаяРазницаНачальныйОстаток - Выборка.ПогашеннаяСтоимостьПРНачальныйОстаток;
			ВременнаяРазницаОстаток = Выборка.ВременнаяРазницаНачальныйОстаток - Выборка.ПогашеннаяСтоимостьВРНачальныйОстаток;
		Иначе
			ПостояннаяРазницаОстаток = 0;
			ВременнаяРазницаОстаток = 0;
		КонецЕсли;
		
		Если СтоимостьОстаток = 0
		   И ПостояннаяРазницаОстаток = 0
		   И ВременнаяРазницаОстаток = 0
		Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
			ПогашеннаяСтоимость = 0;
			ПогашеннаяПостояннаяРазница = Выборка.ПостояннаяРазницаНачальныйОстаток / Выборка.СрокПолезногоИспользования;
			ПогашеннаяВременнаяРазница = Выборка.ВременнаяРазницаНачальныйОстаток / Выборка.СрокПолезногоИспользования;
			
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
			ПогашеннаяСтоимость = Выборка.СтоимостьНачальныйОстаток / Выборка.СрокПолезногоИспользования;
			ПогашеннаяПостояннаяРазница = Выборка.ПостояннаяРазницаНачальныйОстаток / Выборка.СрокПолезногоИспользования;
			ПогашеннаяВременнаяРазница = 0;
			
		Иначе
			ПогашеннаяСтоимость = Выборка.СтоимостьНачальныйОстаток / Выборка.СрокПолезногоИспользования;
			ПогашеннаяПостояннаяРазница = 0;
			ПогашеннаяВременнаяРазница = 0;
			
		КонецЕсли;

		ПогашеннаяСтоимость = Макс(Мин(ПогашеннаяСтоимость, СтоимостьОстаток), 0);
		ПогашеннаяСтоимость = Окр(ПогашеннаяСтоимость, 2, 1);
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете
		 ИЛИ ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете
		Тогда
			
			ПогашеннаяПостояннаяРазница = Макс(Мин(ПогашеннаяПостояннаяРазница, ПостояннаяРазницаОстаток), 0);
			ПогашеннаяПостояннаяРазница = Окр(ПогашеннаяПостояннаяРазница, 2, 1);
			
			ПогашеннаяВременнаяРазница = Макс(Мин(ПогашеннаяВременнаяРазница, ВременнаяРазницаОстаток), 0);
			ПогашеннаяВременнаяРазница = Окр(ПогашеннаяВременнаяРазница, 2, 1);
			
		КонецЕсли;
		
		Если ПогашеннаяСтоимость = 0
		   И ПогашеннаяПостояннаяРазница = 0
		   И ПогашеннаяВременнаяРазница = 0
		Тогда
			Продолжить;
		КонецЕсли;
		
		// Запомним погашенную стоимость в таблице значений.
		НоваяСтрока = ТаблицаПогашеннойСтоимости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
			НоваяСтрока.СтоимостьУпр = ПогашеннаяСтоимость;
			
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
			НоваяСтрока.СтоимостьБух = ПогашеннаяСтоимость;
		
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
			НоваяСтрока.СтоимостьНал = ПогашеннаяСтоимость;
			НоваяСтрока.ПостояннаяРазница = ПогашеннаяПостояннаяРазница;
			НоваяСтрока.ВременнаяРазница = ПогашеннаяВременнаяРазница;
			
		ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете Тогда
			НоваяСтрока.СтоимостьБух = ПогашеннаяСтоимость;
			НоваяСтрока.ПостояннаяРазница = ПогашеннаяПостояннаяРазница;
			НоваяСтрока.ВременнаяРазница = ПогашеннаяСтоимость - ПогашеннаяВременнаяРазница - ПогашеннаяПостояннаяРазница;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
			РасширеннаяАналитикаУчета.ДвижениеПоРегиструУчетЗатратПогашениеСтоимости(
				СтруктураШапкиДокумента,
				Выборка,
				ВидОтраженияВУчете,
				ПогашеннаяСтоимость,
				ПогашеннаяПостояннаяРазница,
				СтруктураКлючиАналитики,
				СтруктураНаборыЗаписей
			);
		Иначе
			СформироватьДвиженияПоРегиструПартииМатериаловВЭксплуатации(
				СтруктураШапкиДокумента,
				Выборка,
				Выборка.ДокументПередачи,
				0, // Количество
				0, // Стоимость,
				ПогашеннаяСтоимость,
				0, // ПостояннаяРазница,
				0, // ВременнаяРазница,
				ПогашеннаяПостояннаяРазница,
				ПогашеннаяВременнаяРазница,
				ВидДвиженияНакопления.Приход,
				КодОперацииПогашениеСтоимости,
				ВидОтраженияВУчете,
				СтруктураНаборыЗаписей[ИмяРегистра]
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьПогашеннуюСтоимость()

// Функция формирует таблицу погашенной стоимости.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица для отражения погашенной стоимости
//
Функция СформироватьТаблицуПогашеннойСтоимости()
	
	ТаблицаПогашеннойСтоимости = Новый ТаблицаЗначений;
	Колонки = ТаблицаПогашеннойСтоимости.Колонки;
	Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеМатериаловИзЭксплуатации"));
	Колонки.Добавить("СпособОтраженияРасходов", Новый ОписаниеТипов(МассивТипов));
	
	Колонки.Добавить("КорАналитикаВидаУчета", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиВидаУчета"));
	Колонки.Добавить("КорАналитикаУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	Колонки.Добавить("КорАналитикаРаспределенияЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиРаспределенияЗатрат"));
	Колонки.Добавить("КорАналитикаУчетаПартий", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаПартий"));
	
	Колонки.Добавить("СчетУчетаБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Колонки.Добавить("СчетУчетаНУ", Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	
	Колонки.Добавить("КоличествоУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Колонки.Добавить("КоличествоБух", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Колонки.Добавить("КоличествоНал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Колонки.Добавить("СтоимостьУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Колонки.Добавить("СтоимостьБух", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Колонки.Добавить("СтоимостьНал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Колонки.Добавить("ПостояннаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Колонки.Добавить("ВременнаяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ТаблицаПогашеннойСтоимости.Индексы.Добавить("СпособОтраженияРасходов");
	
	Возврат ТаблицаПогашеннойСтоимости;
	
КонецФункции // ПолучитьТаблицуАмортизации()

// Процедура выполняет погашение стоимости материалов в эксплуатации.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок
//
Процедура ПогашениеСтоимостиМатериаловВЭксплуатации(
	СтруктураШапкиДокумента,
	ТаблицаОшибок
	) Экспорт
	
	СтруктураНаборыЗаписей = Новый Структура;
	
	ТаблицаПогашеннойСтоимости = СформироватьТаблицуПогашеннойСтоимости();
	
	Для Каждого ВидОтраженияВУчете Из Перечисления.ВидыОтраженияВУчете Цикл
		
		СтрокаВидОтраженияВУчете = СтруктураШапкиДокумента.СоответствиеВидУчета[ВидОтраженияВУчете];
		Если СтрокаВидОтраженияВУчете = Неопределено
		 ИЛИ Не СтруктураШапкиДокумента[СтрокаВидОтраженияВУчете]
		Тогда
			Продолжить;
		КонецЕсли;
	
		РассчитатьПогашеннуюСтоимость(
			СтруктураШапкиДокумента,
			ВидОтраженияВУчете,
			ТаблицаПогашеннойСтоимости,
			ТаблицаОшибок,
			СтруктураНаборыЗаписей
		);
		
	КонецЦикла;
	
	РаспределитьПогашеннуюСтоимостьПоСпособамОтраженияРасходов(
		СтруктураШапкиДокумента,
		ТаблицаПогашеннойСтоимости,
		ТаблицаОшибок,
		СтруктураНаборыЗаписей
	);
		
	УправлениеЗатратамиДвиженияПоРегистрам.ЗаписатьНаборыЗаписейРегистров(СтруктураНаборыЗаписей);
	
КонецПроцедуры // ПогашениеСтоимостиМатериаловВЭксплуатации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ НАЗНАЧЕНИЯ ИСПОЛЬЗОВАНИЯ

// Процедура проверяет правильность заполнения назначения использования.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Строка выборки из результата запроса
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок
//
// Возвращаемое значение:
//   Булево – 	Истина - проверка прошла успешно,
//				Ложь - обнаружены ошибки заполнения назначения использования. 
//
Функция ПроверитьНазначениеИспользования(
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	ТаблицаОшибок
	)
	
	ПроверкаПройдена = Истина;
	Если СтрокаВыборки.СрокПолезногоИспользования = 0 Тогда
		
		ТекстСообщения = "В назначении использования """ 
			+ СтрокаВыборки.НазначениеИспользования
			+ """ не указан срок полезного использования!";
		
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.Сообщение = ТекстСообщения;
		НоваяСтрока.Объект = СтрокаВыборки.НазначениеИспользования;
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаВыборки.СпособОтраженияРасходов) Тогда
		
		ТекстСообщения = "В назначении использования """ 
			+ СтрокаВыборки.НазначениеИспользования
			+ """ не указан способ отражения расходов!";
		
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.Сообщение = ТекстСообщения;
		НоваяСтрока.Объект = СтрокаВыборки.НазначениеИспользования;
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
	
	Если СтрокаВыборки.НеУчитываемыеВНУ
	   И СтрокаВыборки.УчитываемыеВНУ
	Тогда
		ТекстСообщения = "В способе отражения расходов """ 
			+ СтрокаВыборки.СпособОтраженияРасходов
			+ """ нельзя указывать статьи затрат принимаемые и непринимаемые в НУ!";
		
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.Сообщение = ТекстСообщения;
		НоваяСтрока.Объект = СтрокаВыборки.СпособОтраженияРасходов;
		
		ПроверкаПройдена = Ложь;
	
	КонецЕсли;
	
	Возврат ПроверкаПройдена;
	
КонецФункции // ПроверитьНазначениеИспользования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА ПОГАШЕННОЙ СТОИМОСТИ ПРИ ПЕРЕДАЧЕ В ЭКСПЛУАТАЦИЮ

// Функция формирует запрос по списанным партиям.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаСписанныхПартий - ТаблицаЗначений - Таблица списанных партий
//
// Возвращаемое значение:
//	Запрос - Запрос по остаткам материалов в эксплуатации
//
Функция СформироватьЗапросПоСписаннымПартиямРасширеннаяАналитика(
	СтруктураШапкиДокумента,
	ТаблицаСписанныхПартий
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.ОтражатьВУправленческомУчете,
	|	Таблица.ОтражатьВБухгалтерскомУчете,
	|	Таблица.ОтражатьВНалоговомУчете,
	|
	|	Таблица.АналитикаВидаУчета,
	|	Таблица.АналитикаУчетаЗатрат,
	|	Таблица.АналитикаРаспределенияЗатрат,
	|	Таблица.АналитикаУчетаПартий,
	|
	|	Таблица.КорАналитикаВидаУчета,
	|	Таблица.КорАналитикаУчетаЗатрат,
	|	Таблица.КорАналитикаРаспределенияЗатрат,
	|	Таблица.КорАналитикаУчетаПартий,
	|
	|	Таблица.Склад,
	|	
	|	Таблица.ПостояннаяРазница,
	|	Таблица.СтоимостьНУ,
	|	Таблица.КоличествоНУ,
	|	Таблица.Стоимость,
	|	Таблица.Количество
	|	
	|ПОМЕСТИТЬ ПартииМатериалов
	|ИЗ
	|	&ТаблицаСписанныхПартий КАК Таблица
    |;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Способы.Ссылка КАК СпособОтраженияРасходов,
	|	Истина КАК НеУчитываемыеВНУ,
	|	ЕСТЬNULL(СпособыПринимаемыеВНУ.УчитываемыеВНУ, Ложь) КАК УчитываемыеВНУ
	|
	|ПОМЕСТИТЬ СпособыОтраженияРасходов
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК Способы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Способы.Ссылка,
	|			Истина КАК УчитываемыеВНУ
	|		ИЗ
	|			Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК Способы
	|		ГДЕ
	|			Способы.СтатьяЗатрат.ВидРасходовНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения)
	|		) КАК СпособыПринимаемыеВНУ
	|	ПО
	|		Способы.Ссылка = СпособыПринимаемыеВНУ.Ссылка
	|ГДЕ
	|	Способы.СтатьяЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОтраженияРасходов
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартииМатериалов.АналитикаВидаУчета,
	|	ПартииМатериалов.АналитикаУчетаЗатрат,
	|	ПартииМатериалов.АналитикаРаспределенияЗатрат,
	|	ПартииМатериалов.АналитикаУчетаПартий,
	|
	|	ПартииМатериалов.КорАналитикаВидаУчета,
	|	ПартииМатериалов.КорАналитикаУчетаЗатрат,
	|	ПартииМатериалов.КорАналитикаРаспределенияЗатрат,
	|	ПартииМатериалов.КорАналитикаУчетаПартий,
	|
	|	ПартииМатериалов.Склад,
	|
	|	РегистрКорАналитикаВидаУчета.СчетУчета КАК СчетУчетаБУ,
	|	РегистрКорАналитикаВидаУчета.СчетУчетаНУ,
	|
	|	РегистрКорАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
	|
	|	РегистрКорАналитикаУчетаПартий.НазначениеИспользования,
	|	РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СпособПогашенияСтоимости КАК СпособПогашенияСтоимости,
	|	ЕСТЬNULL(РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	ЕСТЬNULL(СпособыОтраженияРасходов.НеУчитываемыеВНУ, Ложь) КАК НеУчитываемыеВНУ,
	|	ЕСТЬNULL(СпособыОтраженияРасходов.УчитываемыеВНУ, Ложь) КАК УчитываемыеВНУ,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВНалоговомУчете
	|			И РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СпособПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|		ТОГДА
	|			ПартииМатериалов.ПостояннаяРазница
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВНалоговомУчете
	|			И (РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СпособПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|				ИЛИ Не ЕСТЬNULL(СпособыОтраженияРасходов.НеУчитываемыеВНУ, Ложь))
	|		ТОГДА
	|			ПартииМатериалов.СтоимостьНУ
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК СтоимостьНал,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете
	|			И РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СпособПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|		ТОГДА
	|			ПартииМатериалов.Стоимость
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК СтоимостьБух,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВУправленческомУчете
	|			И РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СпособПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|		ТОГДА
	|			ПартииМатериалов.Стоимость
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК СтоимостьУпр,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВНалоговомУчете
	|			И (РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СпособПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|				ИЛИ Не ЕСТЬNULL(СпособыОтраженияРасходов.НеУчитываемыеВНУ, Ложь))
	|		ТОГДА
	|			ПартииМатериалов.КоличествоНУ
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК КоличествоНал,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете
	|			И РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СпособПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|		ТОГДА
	|			ПартииМатериалов.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК КоличествоБух,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВУправленческомУчете
	|			И РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СпособПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|		ТОГДА
	|			ПартииМатериалов.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК КоличествоУпр
	|
	|ИЗ
	|	ПартииМатериалов КАК ПартииМатериалов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрКорАналитикаВидаУчета
	|	ПО 
	|		ПартииМатериалов.КорАналитикаВидаУчета = РегистрКорАналитикаВидаУчета.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрКорАналитикаУчетаЗатрат
	|	ПО 
	|		ПартииМатериалов.КорАналитикаУчетаЗатрат = РегистрКорАналитикаУчетаЗатрат.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК РегистрКорАналитикаУчетаПартий
	|	ПО 
	|		ПартииМатериалов.КорАналитикаУчетаПартий = РегистрКорАналитикаУчетаПартий.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СпособыОтраженияРасходов КАК СпособыОтраженияРасходов
	|	ПО
	|		РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СпособОтраженияРасходов = СпособыОтраженияРасходов.СпособОтраженияРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииМатериалов.АналитикаВидаУчета,
	|	ПартииМатериалов.АналитикаУчетаЗатрат,
	|	ПартииМатериалов.АналитикаРаспределенияЗатрат,
	|	ПартииМатериалов.АналитикаУчетаПартий,
	|
	|	ПартииМатериалов.КорАналитикаВидаУчета,
	|	ПартииМатериалов.КорАналитикаУчетаЗатрат,
	|	ПартииМатериалов.КорАналитикаРаспределенияЗатрат,
	|	ПартииМатериалов.КорАналитикаУчетаПартий,
	|
	|	ПартииМатериалов.Склад,
	|
	|	РегистрКорАналитикаВидаУчета.СчетУчета,
	|	РегистрКорАналитикаВидаУчета.СчетУчетаНУ,
	|	РегистрКорАналитикаУчетаЗатрат.Затрата,
	|	РегистрКорАналитикаУчетаПартий.НазначениеИспользования,
	|	РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СпособПогашенияСтоимости,
	|	ЕСТЬNULL(РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СрокПолезногоИспользования, 0),
	|	РегистрКорАналитикаУчетаПартий.НазначениеИспользования.СпособОтраженияРасходов,
	|	ЕСТЬNULL(СпособыОтраженияРасходов.НеУчитываемыеВНУ, Ложь),
	|	ЕСТЬNULL(СпособыОтраженияРасходов.УчитываемыеВНУ, Ложь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииМатериалов.АналитикаВидаУчета,
	|	ПартииМатериалов.АналитикаУчетаЗатрат,
	|	ПартииМатериалов.АналитикаРаспределенияЗатрат,
	|	ПартииМатериалов.АналитикаУчетаПартий
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаСписанныхПартий", ТаблицаСписанныхПартий);

	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоСписаннымПартиямРасширеннаяАналитика()

// Функция формирует запрос по списанным партиям.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаСписанныхПартий - ТаблицаЗначений - Таблица списанных партий
//
// Возвращаемое значение:
//	Запрос - Запрос по остаткам материалов в эксплуатации
//
Функция СформироватьЗапросПоСписаннымПартиям(
	СтруктураШапкиДокумента,
	ТаблицаСписанныхПартий
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.ОтражатьВУправленческомУчете,
	|	Таблица.ОтражатьВБухгалтерскомУчете,
	|	Таблица.ОтражатьВНалоговомУчете,
	|
	|	//ДляУпрУчета Таблица.Подразделение,
	|	//ДляРеглУчета Таблица.Организация,
	|	//ДляРеглУчета Таблица.ПодразделениеОрганизации,
	|	
	|	Таблица.Склад,
	|	Таблица.Номенклатура,
	|	Таблица.ХарактеристикаНоменклатуры,
	|	Таблица.СерияНоменклатуры,
	|	
	|	Таблица.ФизЛицо,
	|	Таблица.ДокументПередачи,
	|	Таблица.НазначениеИспользования,
	|	
	|	//ДляБухУчета Таблица.КорСчетБУ КАК СчетУчета,
	|	//ДляНалУчета Таблица.КорСчетНУ КАК СчетУчетаНУ,
	|	
	|	//ДляНалУчета Таблица.ПостояннаяРазница,
	|	//ДляНалУчета Таблица.ВременнаяРазница,
	|	Таблица.Стоимость,
	|	Таблица.Количество
	|	
	|ПОМЕСТИТЬ ПартииМатериалов
	|ИЗ
	|	&ТаблицаСписанныхПартий КАК Таблица
	|ГДЕ
	|	Таблица.КодОперацииПартииТоваров = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ПередачаМатериаловВЭксплуатацию)
    |;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Способы.Ссылка КАК СпособОтраженияРасходов,
	|	Истина КАК НеУчитываемыеВНУ,
	|	ЕСТЬNULL(СпособыПринимаемыеВНУ.УчитываемыеВНУ, Ложь) КАК УчитываемыеВНУ
	|
	|ПОМЕСТИТЬ СпособыОтраженияРасходов
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК Способы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Способы.Ссылка,
	|			Истина КАК УчитываемыеВНУ
	|		ИЗ
	|			Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК Способы
	|		ГДЕ
	|			Способы.СтатьяЗатрат.ВидРасходовНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения)
	|		) КАК СпособыПринимаемыеВНУ
	|	ПО
	|		Способы.Ссылка = СпособыПринимаемыеВНУ.Ссылка
	|	ГДЕ
	|		Способы.СтатьяЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОтраженияРасходов
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	//ДляУпрУчета ПартииМатериалов.Подразделение,
	|	//ДляРеглУчета ПартииМатериалов.Организация,
	|	//ДляРеглУчета ПартииМатериалов.ПодразделениеОрганизации,
	|
	|	//ДляБухУчета ПартииМатериалов.СчетУчета,
	|	//ДляБухУчета ПартииМатериалов.СчетУчета КАК СчетУчетаБУ,
	|	//ДляНалУчета ПартииМатериалов.СчетУчетаНУ,
	|
	|	ПартииМатериалов.Склад,
	|	ПартииМатериалов.Номенклатура,
	|	ПартииМатериалов.ХарактеристикаНоменклатуры,
	|
	|	ВЫБОР КОГДА ПартииМатериалов.Номенклатура.ВестиПартионныйУчетПоСериям ТОГДА
	|		ПартииМатериалов.СерияНоменклатуры
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК СерияНоменклатуры,
	|
	|	ПартииМатериалов.ФизЛицо,
	|	ПартииМатериалов.НазначениеИспользования,
	|	ПартииМатериалов.НазначениеИспользования.СпособПогашенияСтоимости КАК СпособПогашенияСтоимости,
	|	ЕСТЬNULL(ПартииМатериалов.НазначениеИспользования.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	ПартииМатериалов.НазначениеИспользования.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	ПартииМатериалов.ДокументПередачи,
	|	ЕСТЬNULL(СпособыОтраженияРасходов.НеУчитываемыеВНУ, Ложь) КАК НеУчитываемыеВНУ,
	|	ЕСТЬNULL(СпособыОтраженияРасходов.УчитываемыеВНУ, Ложь) КАК УчитываемыеВНУ,
	|
	|	//ДляНалУчета СУММА(
	|	//ДляНалУчета 	ВЫБОР КОГДА ПартииМатериалов.ОтражатьВНалоговомУчете
	|	//ДляНалУчета 		И ПартииМатериалов.НазначениеИспользования.СпособПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|	//ДляНалУчета 	ТОГДА
	|	//ДляНалУчета 		ПартииМатериалов.ПостояннаяРазница
	|	//ДляНалУчета 	ИНАЧЕ
	|	//ДляНалУчета 		0
	|	//ДляНалУчета 	КОНЕЦ) КАК ПостояннаяРазница,
	|
	|	//ДляНалУчета СУММА(
	|	//ДляНалУчета 	ВЫБОР КОГДА ПартииМатериалов.ОтражатьВНалоговомУчете
	|	//ДляНалУчета 		И ПартииМатериалов.НазначениеИспользования.СпособПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|	//ДляНалУчета 	ТОГДА
	|	//ДляНалУчета 		ПартииМатериалов.ВременнаяРазница
	|	//ДляНалУчета 	ИНАЧЕ
	|	//ДляНалУчета 		0
	|	//ДляНалУчета 	КОНЕЦ) КАК ВременнаяРазница,
	|
	|	//ДляНалУчета СУММА(
	|	//ДляНалУчета 	ВЫБОР КОГДА ПартииМатериалов.ОтражатьВНалоговомУчете ТОГДА
	|	//ДляНалУчета 		ПартииМатериалов.Стоимость
	|	//ДляНалУчета 	ИНАЧЕ
	|	//ДляНалУчета 		0
	|	//ДляНалУчета 	КОНЕЦ) КАК СтоимостьНал,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете
	|			И ПартииМатериалов.НазначениеИспользования.СпособПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|		ТОГДА
	|			ПартииМатериалов.Стоимость
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК СтоимостьБух,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВУправленческомУчете
	|			И ПартииМатериалов.НазначениеИспользования.СпособПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|		ТОГДА
	|			ПартииМатериалов.Стоимость
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК СтоимостьУпр,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВНалоговомУчете ТОГДА
	|			ПартииМатериалов.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК КоличествоНал,
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВБухгалтерскомУчете
	|			И ПартииМатериалов.НазначениеИспользования.СпособПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|		ТОГДА
	|			ПартииМатериалов.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК КоличествоБух,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ПартииМатериалов.ОтражатьВУправленческомУчете
	|			И ПартииМатериалов.НазначениеИспользования.СпособПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию)
	|		ТОГДА
	|			ПартииМатериалов.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК КоличествоУпр
	|
	|ИЗ
	|	ПартииМатериалов КАК ПартииМатериалов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СпособыОтраженияРасходов КАК СпособыОтраженияРасходов
	|	ПО
	|		ПартииМатериалов.НазначениеИспользования.СпособОтраженияРасходов = СпособыОтраженияРасходов.СпособОтраженияРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	//ДляУпрУчета ПартииМатериалов.Подразделение,
	|	//ДляРеглУчета ПартииМатериалов.Организация,
	|	//ДляРеглУчета ПартииМатериалов.ПодразделениеОрганизации,
	|	//ДляБухУчета ПартииМатериалов.СчетУчета,
	|	//ДляНалУчета ПартииМатериалов.СчетУчетаНУ,
	|	ПартииМатериалов.Склад,
	|	ПартииМатериалов.Номенклатура,
	|	ПартииМатериалов.ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА ПартииМатериалов.Номенклатура.ВестиПартионныйУчетПоСериям ТОГДА
	|		ПартииМатериалов.СерияНоменклатуры
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ,
	|	ПартииМатериалов.ФизЛицо,
	|	ПартииМатериалов.НазначениеИспользования,
	|	ПартииМатериалов.НазначениеИспользования.СпособПогашенияСтоимости,
	|	ЕСТЬNULL(ПартииМатериалов.НазначениеИспользования.СрокПолезногоИспользования, 0),
	|	ПартииМатериалов.НазначениеИспользования.СпособОтраженияРасходов,
	|	ПартииМатериалов.ДокументПередачи,
	|	ЕСТЬNULL(СпособыОтраженияРасходов.НеУчитываемыеВНУ, Ложь),
	|	ЕСТЬNULL(СпособыОтраженияРасходов.УчитываемыеВНУ, Ложь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	//ДляУпрУчета ПартииМатериалов.Подразделение,
	|	//ДляРеглУчета ПартииМатериалов.Организация,
	|	//ДляРеглУчета ПартииМатериалов.ПодразделениеОрганизации,
	|	//ДляБухУчета ПартииМатериалов.СчетУчета,
	|	//ДляНалУчета ПартииМатериалов.СчетУчетаНУ,
	|	ПартииМатериалов.Склад,
	|	ПартииМатериалов.Номенклатура,
	|	ПартииМатериалов.ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	ПартииМатериалов.ФизЛицо,
	|	ПартииМатериалов.НазначениеИспользования,
	|	ПартииМатериалов.ДокументПередачи
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ПартииМатериалов
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ СпособыОтраженияРасходов
	|";
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапроса,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете
		);
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапроса,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете
		);
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ТекстЗапроса = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
			ТекстЗапроса,
			Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете
		);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаСписанныхПартий", ТаблицаСписанныхПартий);

	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоСписаннымПартиям()

// Процедура рассчитывает сумму погашения стоимости.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаПогашеннойСтоимости - ТаблицаЗначений - Таблица погашенной стоимости
//	ТаблицаОшибок - ТаблицаЗначений - Таблица ошибок
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//
Процедура РассчитатьПогашеннуюСтоимостьПриПередачеВЭксплуатацию(
	СтруктураШапкиДокумента,
	ТаблицаСписанныхПартий,
	ТаблицаПогашеннойСтоимости,
	ТаблицаОшибок,
	СтруктураНаборыЗаписей
	)
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		Запрос = СформироватьЗапросПоСписаннымПартиямРасширеннаяАналитика(
			СтруктураШапкиДокумента,
			ТаблицаСписанныхПартий
		);
	Иначе
		Запрос = СформироватьЗапросПоСписаннымПартиям(
			СтруктураШапкиДокумента,
			ПодготовитьТаблицуСписанныхПартий(ТаблицаСписанныхПартий)
		);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка  = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПроверкаПройдена = ПроверитьНазначениеИспользования(
			СтруктураШапкиДокумента,
			Выборка,
			ТаблицаОшибок
		);
		Если Не ПроверкаПройдена Тогда
			Продолжить;
		КонецЕсли;
		
		ПогашеннаяСтоимостьУпр = 0;
		ПогашеннаяСтоимостьБух = 0;
		ПогашеннаяСтоимостьНал = 0;
		СтоимостьНеУчитываемыеВНУ = 0;
		ПогашеннаяПостояннаяРазница = 0;
		ПогашеннаяВременнаяРазница = 0;
		ВременнаяРазница = 0;
		ПостояннаяРазница = 0;
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			ПогашеннаяСтоимостьУпр = Выборка.СтоимостьУпр;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ПогашеннаяСтоимостьБух = Выборка.СтоимостьБух;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если Выборка.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию Тогда
				ПогашеннаяСтоимостьНал = Выборка.СтоимостьНал;
				ПогашеннаяПостояннаяРазница = Выборка.ПостояннаяРазница;
				ПогашеннаяВременнаяРазница = Выборка.ВременнаяРазница;
				ПостояннаяРазница = - Выборка.ПостояннаяРазница;
				ВременнаяРазница = - Выборка.ВременнаяРазница;
			Иначе // Линейный способ погашения стоимости
				Если Выборка.НеУчитываемыеВНУ Тогда
					СтоимостьНеУчитываемыеВНУ = Выборка.СтоимостьНал;
					ПостояннаяРазница = Выборка.СтоимостьНал;
				Иначе
					ПогашеннаяСтоимостьНал = Выборка.СтоимостьНал;
					ПогашеннаяВременнаяРазница = - Выборка.СтоимостьНал;
					ВременнаяРазница = Выборка.СтоимостьНал;
				КонецЕсли;
			КонецЕсли;
			
			// Скорректируем временную разницу.
			Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
			   И ПогашеннаяСтоимостьБух <> (ПогашеннаяСтоимостьНал + ПогашеннаяПостояннаяРазница + ПогашеннаяВременнаяРазница)
			Тогда
				ПогашеннаяВременнаяРазница = ПогашеннаяСтоимостьБух - (ПогашеннаяСтоимостьНал + ПогашеннаяПостояннаяРазница);
			КонецЕсли;
			
		КонецЕсли;
				
		Если Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
		   И ПостояннаяРазница = 0
		   И ВременнаяРазница = 0
		   И ПогашеннаяСтоимостьУпр = 0
		   И ПогашеннаяСтоимостьБух = 0
		   И ПогашеннаяСтоимостьНал = 0
		   И СтоимостьНеУчитываемыеВНУ = 0
		   И ПогашеннаяПостояннаяРазница = 0
		   И ПогашеннаяВременнаяРазница = 0
		Тогда
			Продолжить;
		КонецЕсли;
		
		// Запомним погашенную стоимость в таблице значений.
		НоваяСтрока = ТаблицаПогашеннойСтоимости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.СтоимостьУпр = ПогашеннаяСтоимостьУпр;
		НоваяСтрока.СтоимостьБух = ПогашеннаяСтоимостьБух;
		
		Если Выборка.СпособПогашенияСтоимости <> Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию
		   И Выборка.НеУчитываемыеВНУ
		Тогда
		    НоваяСтрока.СтоимостьНал = 0;
			НоваяСтрока.ПостояннаяРазница = ПогашеннаяПостояннаяРазница + ПогашеннаяСтоимостьНал;
			НоваяСтрока.ВременнаяРазница = ПогашеннаяВременнаяРазница;
		Иначе
			НоваяСтрока.СтоимостьНал = ПогашеннаяСтоимостьНал;
			НоваяСтрока.ПостояннаяРазница = ПогашеннаяПостояннаяРазница;
			НоваяСтрока.ВременнаяРазница = ПогашеннаяВременнаяРазница;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
			РасширеннаяАналитикаУчета.ДвижениеПоРегиструУчетЗатратПередачаВЭксплуатацию(
				СтруктураШапкиДокумента,
				Выборка,
				СтруктураНаборыЗаписей
			);
		Иначе
			СформироватьДвиженияПоРегистрамПартииМатериаловВЭксплуатации(
				СтруктураШапкиДокумента,
				Выборка,
				ПогашеннаяСтоимостьУпр,
				ПогашеннаяСтоимостьБух,
				ПогашеннаяСтоимостьНал + СтоимостьНеУчитываемыеВНУ,
				ВременнаяРазница,
				ПостояннаяРазница,
				0, // ПогашеннаяПостояннаяРазница,
				0, // ПогашеннаяВременнаяРазница,
				СтруктураНаборыЗаписей
			);
			СформироватьДвиженияПоРегиструБухгалтерииНеУчитываемыеВНУ(
				СтруктураШапкиДокумента,
				Выборка,
				СтоимостьНеУчитываемыеВНУ,
				СтруктураНаборыЗаписей
			);
		КонецЕсли;
				
	КонецЦикла;
	
	РаспределитьПогашеннуюСтоимостьПоСпособамОтраженияРасходов(
		СтруктураШапкиДокумента,
		ТаблицаПогашеннойСтоимости,
		ТаблицаОшибок,
		СтруктураНаборыЗаписей
	);
	
КонецПроцедуры // РассчитатьПогашеннуюСтоимостьПриПередачеВЭксплуатацию()

// Процедура дополняет структуру шапки документа новыми значениями.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
Процедура ДополнитьСтруктуруШапкиДокументаПогашениеСтоимости(
	СтруктураШапкиДокумента
	)
	
	СуффиксыИмениРегистра = Новый Соответствие;
	СуффиксыИмениРегистра.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете, "");
	СуффиксыИмениРегистра.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете, "БухгалтерскийУчет");
	СуффиксыИмениРегистра.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете, "НалоговыйУчет");
	СтруктураШапкиДокумента.Вставить("СуффиксыИмениРегистра", СуффиксыИмениРегистра);
	
	СоответствиеВидУчета = Новый Соответствие;
	СоответствиеВидУчета.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	СоответствиеВидУчета.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	СоответствиеВидУчета.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете, "ОтражатьВНалоговомУчете");
	СтруктураШапкиДокумента.Вставить("СоответствиеВидУчета", СоответствиеВидУчета);
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.ПериодРегистрации);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	
	ПоддержкаПБУ18 = Ложь;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
			ПоддержкаПБУ18 = ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18;
		КонецЕсли; 
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("ПоддержкаПБУ18", ПоддержкаПБУ18);
	
КонецПроцедуры // ДополнитьСтруктуруШапкиДокументаПогашениеСтоимости()

// Функция подготавливает таблицу списанных партий для погашения стоимости
//
// Параметры:
//  ТаблицаСписанныхПартий – таблица значений - табилца списанных партий по документу
//
Функция ПодготовитьТаблицуСписанныхПартий(ТаблицаСписанныхПартий)
	Если ТаблицаСписанныхПартий.Колонки.Найти("Движение") <> Неопределено Тогда//Вызывается из партионного учета
		ПодготовленнаяТаблицаСписанныхПартий = ТаблицаСписанныхПартий.Скопировать();
				
		Для НомерСтроки = 0 По ПодготовленнаяТаблицаСписанныхПартий.Количество() - 1 Цикл		
			ПодготовленнаяТаблицаСписанныхПартий[НомерСтроки].Количество = ТаблицаСписанныхПартий[НомерСтроки].Движение.Количество;
		КонецЦикла;
		
		Возврат ПодготовленнаяТаблицаСписанныхПартий;
	Иначе //Вызывается из корректировки стоимости списания
		Возврат ТаблицаСписанныхПартий;
	КонецЕсли;	
КонецФункции	

// Процедура выполняет погашение стоимости материалов при передаче в эксплуатацию.
//
// Параметры:
//	СтруктураПараметров - Структура - Параметры
//	ТаблицаСписанныхПартий - ТаблицаЗначений - Таблица списанных партий
//
Процедура ПогашениеСтоимостиПриПередачеВЭксплуатацию(
	СтруктураПараметров,
	ТаблицаСписанныхПартий
	) Экспорт
	
	Если ТаблицаСписанныхПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", СтруктураПараметров.Регистратор);
	СтруктураШапкиДокумента.Вставить("Дата", СтруктураПараметров.Период);
	СтруктураШапкиДокумента.Вставить("ПериодРегистрации", СтруктураПараметров.Период);
	
	СтруктураШапкиДокумента.Вставить("НачДата", НачалоМесяца(СтруктураШапкиДокумента.ПериодРегистрации));
	СтруктураШапкиДокумента.Вставить("КонДата", КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации));
	
	СтруктураШапкиДокумента.Вставить("Организация", СтруктураПараметров.Организация);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете", СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете);
	СтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете);
	
	ОтражатьВНалоговомУчетеУСН = НалоговыйУчетУСН.ПрименениеУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)
		И СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете
		И Не НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	
	Если ОтражатьВНалоговомУчетеУСН Тогда
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Ложь);
	Иначе
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете);
	КонецЕсли;
	
	ДополнитьСтруктуруШапкиДокументаПогашениеСтоимости(СтруктураШапкиДокумента);
	
	Если СтруктураПараметров.Свойство("НаборыЗаписейРегистров") Тогда
		СтруктураНаборыЗаписей = СтруктураПараметров.НаборыЗаписейРегистров;
	Иначе
		СтруктураНаборыЗаписей = Новый Структура;
	КонецЕсли;
	
	ТаблицаПогашеннойСтоимости = СформироватьТаблицуПогашеннойСтоимости();
	ТаблицаОшибок = УправлениеЗатратами.СформироватьТаблицуОшибок();
	
	РассчитатьПогашеннуюСтоимостьПриПередачеВЭксплуатацию(
		СтруктураШапкиДокумента,
		ТаблицаСписанныхПартий,
		ТаблицаПогашеннойСтоимости,
		ТаблицаОшибок,
		СтруктураНаборыЗаписей
	);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);
	УправлениеЗатратами.ВывестиСообщенияОбОшибках(
		СтруктураШапкиДокумента,
		ТаблицаОшибок,
		Заголовок
	);
	
	СтруктураПараметров.Вставить("НаборыЗаписейРегистров", СтруктураНаборыЗаписей);
	
КонецПроцедуры // ПогашениеСтоимостиПриПередачеВЭксплуатацию()

