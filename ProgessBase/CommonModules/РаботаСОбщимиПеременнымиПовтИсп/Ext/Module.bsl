// Функция применяется при необходимости получить сведения об учетной политике организации.
//
// Параметры:
// Учет - строка. Определяет регистр сведений, из которого будут получены данные:
//   "Упр"	- регистр "УчетнаяПолитика"
//   "Регл"	- регистр "УчетнаяПолитикаОрганизаций"
//
// Возвращаемое значение - таблица значений. Таблица, каждая строка которой 
//  соответствует записи регистра. 
//
Функция СоздатьКЭШУчетнойПолитики(Учет)
	
	Если НРег(Учет) = "регл" Тогда
		ИмяРегистра = "УчетнаяПолитикаОрганизаций";
	Иначе
		ИмяРегистра = "УчетнаяПолитика";
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	*
		|ИЗ
		|	РегистрСведений." + ИмяРегистра +" КАК УчетнаяПолитика" + Учет + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СоздатьКЭШУчетнойПолитики()

// Функция предназначена для получения значения по имени переменной
// Вызывается из функции глЗначениеПеременной
//
// Параметры:
//	Имя - Строка, имя переменной
//
// Возвращаемое значение: 
//  Произвольное значение
//
Функция ПолучитьЗначениеПеременной(ИмяПараметра) Экспорт
	
	ИмяПараметраВР = ВРег(ИмяПараметра);
	Если ИмяПараметраВР = ВРег("глУчетнаяПолитикаПоПерсоналу")	Тогда
		Возврат РаботаСОбщимиПеременными.ЗаполнениеУчетнойПолитикиПоПерсоналу();
		
	ИначеЕсли ИмяПараметраВР = ВРег("глУчетнаяПолитикаПоПерсоналуОрганизации") Тогда
		Возврат ОбщегоНазначенияЗК.ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации();      
		
	ИначеЕсли ИмяПараметраВР = ВРег("УчетнаяПолитикаУпр") Тогда
		Возврат СоздатьКЭШУчетнойПолитики("Упр");
		
	ИначеЕсли ИмяПараметраВР = ВРег("УчетнаяПолитикаРегл") Тогда
		Возврат СоздатьКЭШУчетнойПолитики("Регл");
		
	ИначеЕсли ИмяПараметраВР = ВРег("ПараметрыПартионногоУчета") Тогда	
		Возврат УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрыПартионногоУчета();
		
	ИначеЕсли ИмяПараметраВР = ВРег("ИспользоватьБлокировкуДанных") Тогда	
		Возврат Метаданные.РежимУправленияБлокировкойДанных <> Метаданные.СвойстваОбъектов.РежимУправленияБлокировкойДанныхПоУмолчанию.Автоматический;
		
	ИначеЕсли ИмяПараметраВР = ВРег("ПрофильПолномочийПользователя") Тогда 
		Возврат ПараметрыСеанса.ТекущийПользователь.ПрофильПолномочийПользователя;
		
	ИначеЕсли ИмяПараметраВР = ВРег("глКоличествоСекундОпросаОбмена") Тогда
		Возврат ПолучитьКоличествоСекундОпросаОбмена();
		
	ИначеЕсли ИмяПараметраВР = ВРег("глОграничитьКоличествоСотрудниковПриПечатиВедомости") Тогда
		НастройкиЗащитыПерсональныхДанных = РегистрыСведений.НастройкаЗащитыПерсональныхДанных.Получить();
		
		Возврат НастройкиЗащитыПерсональныхДанных.ОграничитьКоличествоСотрудниковПриПечатиВедомости;
		
	ИначеЕсли ИмяПараметраВР = ВРег("НомерВерсииКонфигурации") Тогда
		
		Возврат ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя);
		
	Иначе
		
		// Если имя переменной ни одно из перечисленных выше, считаем что это имя константы.
		// Если константы с таким именем в конфигурации нет, то произойдет ошибка времени выполнения,
		// это значит, что в функцию передали неверное имя переменной
		Возврат Константы[ИмяПараметраВР].Получить();
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКоличествоСекундОпросаОбмена()
	
	НайденноеЗначение = Константы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Получить();
	
	Если НайденноеЗначение = 0 Тогда
		НайденноеЗначение = 60;
	КонецЕсли;
	
	Возврат НайденноеЗначение;
	
КонецФункции // 
