Функция СформироватьСтруктуруПодключенияУзла(Узел) Экспорт
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ИмяСервера", Узел.Сервер);
	ПараметрыПодключения.Вставить("ИмяПользователя", Узел.Логин);
	ПараметрыПодключения.Вставить("ИмяБазы", Узел.БазаДанных);
	ПараметрыПодключения.Вставить("Пароль", Узел.Пароль);
	ПараметрыПодключения.Вставить("DSN", Узел.DSN);
	ИмяДрайвера=?(Узел.ИмяДрайвера = "", "DRIVER=" +"{Oracle in XE}", "DRIVER=" +Узел.ИмяДрайвера); //ИмяДрайвера="{Oracle in XE}";
	СтрокаСоединения = ""+?(Узел.DSN = "", "", "DSN="+Узел.DSN+";")+ ИмяДрайвера + ";SERVER=" + ПараметрыПодключения.ИмяСервера + ";Database="+ПараметрыПодключения.ИмяБазы+";UID="+ПараметрыПодключения.ИмяПользователя+";PWD="+ПараметрыПодключения.Пароль;
	//СтрокаСоединения = ?(Узел.DSN = "", "", "DSN="+Узел.DSN+";")+ ИмяДрайвера + ";Dbq="+ПараметрыПодключения.ИмяБазы+";UID="+ПараметрыПодключения.ИмяПользователя+";PWD="+ПараметрыПодключения.Пароль;
	//СтрокаСоединения = "Driver={Oracle in OraHome92};Dbq=wms;uid=WMStest;Pwd=oracletest";
	ПараметрыПодключения.Вставить("СтрокаПодключения", СтрокаСоединения);
	Возврат ПараметрыПодключения;
КонецФункции	

//ПодключитьSQL - Функция подключения к SQL-серверу с использованием механизмов ADO DB
//Параметры:
//	ПараметрыПодключения - тип Структура("ИмяСервера,ИмяПользователя,Пароль,ИмяБазы,СтрокаПодключения")
//			ИмяСервера			- имя SQL-сервера
//			ИмяПользователя		- Имя пользователя (sa или другой)
//			Пароль				- Пароль пользователя
//			ИмяБазы				- Имя базы данных
//			СтрокаПодключения	- (необязательный параметр) можно передать готовую строку подключения, 
//									если пустая тогда подключение по параметрам
Функция ПодключитьSQL(ПараметрыПодключения) Экспорт
	Перем СтрокаПодключения;
	ИмяСервера		= СокрЛП(ПараметрыПодключения.ИмяСервера);
	ИмяПользователя = СокрЛП(ПараметрыПодключения.ИмяПользователя);
	Пароль			= СокрЛП(ПараметрыПодключения.Пароль);
	ИмяБазы			= СокрЛП(ПараметрыПодключения.ИмяБазы);	
	ПараметрыПодключения.Свойство("СтрокаПодключения",СтрокаПодключения);
	
	Если СтрокаПодключения = Неопределено Тогда
		//стрПодключения = "Provider=MSDASQL.1;Password=" + Пароль + ";Persist Security Info=True;User ID=" + ИмяПользователя
		////+ ";Data Source=" + ИмяСервера + ";Initial Catalog="+ ИмяБазы;
		//+ ";Data Source=" + ИмяБазы;
		ConnectionString = "driver={SQL Server}; server=" + ИмяСервера + "; uid=" + ИмяПользователя + "; PWD=" + Пароль + "; Database=" +  ИмяБазы + ";";
	ИначеЕсли НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		стрПодключения = СтрокаПодключения;
	Иначе
		//стрПодключения = "Provider=MSDASQL.1;Password=" + Пароль + ";Persist Security Info=True;User ID=" + ИмяПользователя
		////+ ";Data Source=" + ИмяСервера + ";Initial Catalog="+ ИмяБазы;
		//+ ";Data Source=" + ИмяБазы;		
		//стрПодключения = "driver={SQL Server}; server=" + ИмяСервера + "; uid=" + ИмяПользователя + "; PWD=" + Пароль + "; Database=" +  ИмяБазы + ";";
		стрПодключения = "Provider=MSDASQL.1;Extended Properties=""DRIVER=SQL Server;SERVER=" + ИмяСервера + ";UID=" + ИмяПользователя + ";PWD=" + Пароль + ";APP=1C:Enterprise 8.1;WSID=" + ИмяКомпьютера() + ";DATABASE=" + ИмяБазы + ";Network=DBMSSOCN""";
	КонецЕсли;	
	
	//стрПодключения = "Provider=SQLOLEDB;Driver={SQL Server}; Deleted=No; Data Source = " + ИмяСервера + ";UID=" + ИмяПользователя + "; PWD=" + Пароль + ";";
	
	//стрПодключения = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog="+ ИмяБазы + ";Data Source=" + ИмяСервера;
	//пСоед = Новый COMОбъект("ADODB.Connection");
	//пСоед.Provider = "SQLOLEDB";
	//пСоед.ConnectionTimeout = 15;
	//пСоед.CommandTimeOut= 30;
	//пСоед.ConnectionString = стрПодключения;
	//пСоед.Open();
	//
	//Возврат пСоед;
	
	//Connection = Новый COMОбъект("ADODB.Connection"); 
	//Connection.Open(СокрЛП(стрПодключения));
	//Возврат Connection;
	
	
	Соединение = Новый COMОбъект("ADODB.Connection"); 
	
	Соединение.ConnectionTimeOut =600;
	Соединение.CursorLocation = 3;
	Соединение.ConnectionString = стрПодключения;
	try
		Соединение.Open();  
	except 
		//#Если Клиент Тогда
		//Предупреждение("Невозможно установить соединение");
		//#КонецЕсли
		try
			Соединение.Open();  
		except 
			//#Если Клиент Тогда
			//Предупреждение("Невозможно установить соединение");
			//#КонецЕсли
			Возврат Неопределено;
		endtry;
		//Возврат Неопределено;
	endtry;
	Возврат Соединение;
КонецФункции	

//ПолучитьВыборкуНаSQL - возвращает таблицу значений полученную в процесе выполнения sql-запроса на сервере
//Параметры:
//	СтрокаКоманды 	- текст sql-запроса
//	Connection		- ссылка на соединение с SQL-сервером
Функция ПолучитьВыборкуНаSQL(Connection,СтрокаКоманды) Экспорт		
	RS = Новый COMОбъект("ADODB.Recordset"); 
	// Запрос к базе на языке SQL запросов. 
	RS.Open(СокрЛП(СтрокаКоманды), Connection); 
//	RS.MoveFirst();
	Попытка
		КвоКолонок = RS.Fields.Count;
		ТЗ = Новый ТаблицаЗначений;
		ФормируемПоля = Истина;
		Пока RS.EOF() = 0 Цикл 
			Если ФормируемПоля Тогда
				Для й = 0 По КвоКолонок-1 Цикл
					ТЗ.Колонки.Добавить(RS.Fields(й).Name);
				КонецЦикла;
			КонецЕсли;
			ФормируемПоля = Ложь;	
			НоваяСтрокаТЗ = ТЗ.Добавить();
			Для й = 0 По КвоКолонок-1 Цикл
				НоваяСтрокаТЗ[RS.Fields(й).Name] = RS.Fields(й).Value;
			КонецЦикла;
			RS.MoveNext(); 
		КонецЦикла; 
		RS.Close(); 
		Возврат ТЗ;	
	Исключение
		Возврат (Новый ТаблицаЗначений);
	КонецПопытки;	
КонецФункции	

//ЗакрытьSQLСоединение - закрывает соединение с SQL-Сервером
//Параметры:
//	Connection		- ссылка на соединение с SQL-сервером
Процедура ЗакрытьSQLСоединение(Connection) Экспорт
	Connection.Close(); 
КонецПроцедуры	

Функция ВыполнитьКомандуНаSQL(Connection,СтрокаКоманды,ТипКоманды = "adCmdStoredProc",МассивПараметров = Неопределено,ТипРезультата = Неопределено) Экспорт
	Перем ВыхПарам;
	
	Если НРег(ТипКоманды) = "adcmdstoredproc" Тогда
		
		Если МассивПараметров = Неопределено Тогда
			МассивПараметров = Новый Массив;
			//СтруктураСтрокиПараметра = Новый Структура("ИмяПараметра,ЗначениеПараметра","","");
			//МассивПараметров.Добавить(СтруктураСтрокиПараметра);
			//СтруктураСтрокиПараметра = "";
		КонецЕсли;	
		
		SQL_команда = Новый COMОбъект("ADODB.Command"); 	//Команда выполняемая на Скуль
		SQL_Выборка = Новый COMОбъект("ADODB.Recordset"); 	//Выборка зезультата выполненной команды
		
		SQL_команда.ActiveConnection = Connection;
		SQL_команда.CommandText = СтрокаКоманды;
		SQL_команда.CommandType = ТипКомандыАДО(ТипКоманды);
		
		Для Каждого СтруктураСтрокиПараметра Из МассивПараметров Цикл
			
			ИмяПараметра 			= СтруктураСтрокиПараметра.ИмяПараметра;
			ТипПараметра 			= СтруктураСтрокиПараметра.ТипПараметра; // "adParamInput"
			ЗначениеПараметра 		= СтруктураСтрокиПараметра.ИмяПараметра;
			ТипЗначенияПараметра 	= СтруктураСтрокиПараметра.ТипЗначенияПараметра; //"adWChar"
			
			Параметр_SQL_команды = SQL_команда.CreateParameter(ИмяПараметра, КонстантаАДО(ТипЗначенияПараметра),
			ТипПараметраАДО(ТипПараметра), 9, ЗначениеПараметра);   
			SQL_команда.Parameters.Append(Параметр_SQL_команды); 							
		КонецЦикла;
		Попытка
			SQL_Выборка = SQL_команда.Execute();
		Исключение 
			//#Если Клиент Тогда
			////Сообщить(ОписаниеОшибки());
			//#КонецЕсли
		КонецПопытки;
		
		Если ТипРезультата = 1 Тогда  //Выборка
			ВыхПарам = ПолучитьВыборкуНаSQL(СтрокаКоманды, Connection);
		ИначеЕсли ТипРезультата = 2 Тогда //чтение параметра типа OUTPUT после выполнения
			ВыхПарам = SQL_команда.Parameters(1).Value; 
		КонецЕсли;	
		
		Возврат ВыхПарам;
		
		ЗакрытьSQLСоединение(Connection);
	ИначеЕсли НРег(ТипКоманды) = "adcmdtext" Тогда
		SQL_команда = Новый COMОбъект("ADODB.Command"); 	//Команда выполняемая на Скуль
		SQL_команда.ActiveConnection = Connection;
		SQL_команда.CommandText = СтрокаКоманды;
		SQL_команда.CommandType = ТипКомандыАДО(ТипКоманды);		
		Попытка
			Рез = SQL_команда.Execute();
		Исключение 
			//#Если Клиент Тогда
			////Сообщить(ОписаниеОшибки());
			//#КонецЕсли
			Рез = -1;
		КонецПопытки;	
		Возврат Рез;
	КонецЕсли;

КонецФункции

Функция ТипКомандыАДО(АдоКонст) Экспорт
	АдоКонст = Нрег(АдоКонст);
	Если АдоКонст = "adcmdtext" Тогда 
		возврат 1; //для оператора T-SQL
	ИначеЕсли АдоКонст = "adcmdtable" Тогда
		возврат 2; 
	ИначеЕсли АдоКонст = "adcmdstoredproc" Тогда
		возврат 4; //для хранимой процедуры
	Иначе 
		Возврат 8; //adcmdunknown
	КонецЕсли;	
КонецФункции

Функция ТипКурсораАДО(АдоКурсор) Экспорт
	АдоКурсор = Нрег(АдоКурсор);
	Если АдоКурсор = НРег("adOpenUnspecified") Тогда 
		возврат -1; //для оператора T-SQL
	ИначеЕсли АдоКурсор = НРег("adOpenForwardOnly") Тогда
		возврат 0; 
	ИначеЕсли АдоКурсор = НРег("adOpenKeyset") Тогда
		возврат 1; 
	ИначеЕсли АдоКурсор = НРег("adOpenDynamic") Тогда
		возврат 2; 
	ИначеЕсли АдоКурсор = НРег("adOpenStatic") Тогда
		возврат 3; 
	Иначе
		возврат 0; 
	КонецЕсли;	
КонецФункции

Функция ТипБлокировкиАДО(АдоБлокировка) Экспорт
	АдоБлокировка = Нрег(АдоБлокировка);
	Если АдоБлокировка = НРег("adLockUnspecified") Тогда 
		возврат -1; //для оператора T-SQL
	ИначеЕсли АдоБлокировка = НРег("adLockReadOnly") Тогда
		возврат 1; 
	ИначеЕсли АдоБлокировка = НРег("adLockPessimistic") Тогда
		возврат 2; 
	ИначеЕсли АдоБлокировка = НРег("adLockOptimistic") Тогда
		возврат 3; 
	ИначеЕсли АдоБлокировка = НРег("adLockBatchOptimistic") Тогда
		возврат 4; 
	Иначе
		возврат 1; 
	КонецЕсли;	
КонецФункции


Функция КонстантаАДО(Конст)  Экспорт
	АдоКонст = НРег(Конст);
	Если АдоКонст = "adEmpty" Тогда
		Возврат 0;
	ИначеЕсли АдоКонст = "adtinyint" Тогда
		Возврат 16;
	ИначеЕсли АдоКонст = "adsmallint" Тогда
		Возврат 2;
	ИначеЕсли АдоКонст = "adinteger" Тогда
		Возврат 3;
	ИначеЕсли АдоКонст = "adbigint" Тогда
		Возврат 20;
	ИначеЕсли АдоКонст = "adunsignedtinyint" Тогда
		Возврат   17;
	ИначеЕсли АдоКонст = "adunsignedsmallint" Тогда
		Возврат  18;
	ИначеЕсли АдоКонст = "adunsignedint" Тогда
		Возврат 19;
	ИначеЕсли АдоКонст = "adunsignedbigint" Тогда
		Возврат   21;
	ИначеЕсли АдоКонст = "adsingle" Тогда
		Возврат 4;
	ИначеЕсли АдоКонст = "addouble" Тогда
		Возврат 5;
	ИначеЕсли АдоКонст = "adcurrency" Тогда
		Возврат 6;
	ИначеЕсли АдоКонст = "addecimal" Тогда
		Возврат 14;
	ИначеЕсли АдоКонст = "adnumeric" Тогда
		Возврат 131;
	ИначеЕсли АдоКонст = "adboolean" Тогда
		Возврат 11;
	ИначеЕсли АдоКонст = "aderror" Тогда
		Возврат 10;
	ИначеЕсли АдоКонст = "aduserdefined" Тогда
		Возврат 132;
	ИначеЕсли АдоКонст = "advariant" Тогда
		Возврат 12;
	ИначеЕсли АдоКонст = "adidispatch" Тогда
		Возврат 9;
	ИначеЕсли АдоКонст = "adiunknown" Тогда
		Возврат 13;
	ИначеЕсли АдоКонст = "adguid" Тогда
		Возврат 72;
	ИначеЕсли АдоКонст = "addate" Тогда
		Возврат 7;
	ИначеЕсли АдоКонст = "addbdate" Тогда
		Возврат 133;
	ИначеЕсли АдоКонст = "addbtime" Тогда
		Возврат 134;
	ИначеЕсли АдоКонст = "addbtimestamp" Тогда
		Возврат 135;
	ИначеЕсли АдоКонст = "adbstr" Тогда
		Возврат 8;
	ИначеЕсли АдоКонст = "adchar" Тогда
		Возврат 129;
	ИначеЕсли АдоКонст = "advarchar" Тогда
		Возврат 200;
	ИначеЕсли АдоКонст = "adlongvarchar" Тогда
		Возврат 201;
	ИначеЕсли АдоКонст = "adwchar" Тогда
		Возврат 130;
	ИначеЕсли АдоКонст = "advarwchar" Тогда
		Возврат 202;
	ИначеЕсли АдоКонст = "adlongvarwchar" Тогда
		Возврат 203;
	ИначеЕсли АдоКонст = "adbinary" Тогда
		Возврат 128;
	ИначеЕсли АдоКонст = "advarbinary" Тогда
		Возврат 204;
	ИначеЕсли АдоКонст = "adlongvarbinary" Тогда
		Возврат   205;
	Иначе Возврат 0;
	КонецЕсли;
КонецФункции

Функция ТипПараметраАДО(Конст) Экспорт  
	АдоКонст = НРег(Конст);  
	Если АдоКонст = "adparamunknown" Тогда
		Возврат 0;     
	ИначеЕсли АдоКонст = "adparaminput" Тогда 
		Возврат 1;  
	ИначеЕсли АдоКонст = "adparamoutput" Тогда
		Возврат 2;  
	ИначеЕсли АдоКонст = "adparaminputoutput" Тогда
		Возврат  3;  
	ИначеЕсли АдоКонст = "adparamreturnvalue" Тогда
		Возврат  4;  
	КонецЕсли;                                            
КонецФункции

Функция ТипРезультатаАДО(Конст) Экспорт
	Если НРег(Конст) = "recorset" Тогда
		Возврат 1;
	ИначеЕсли НРег(Конст) = "param" Тогда	
		Возврат 2;
	КонецЕсли;	
КонецФункции	

//ПолучитьПараметрыПодключенияКSQL - открывает форму для ввода параметров подключения к SQL-серверу
//Возвращаемое значение - тип Структура("ИмяСервера,ИмяПользователя,Пароль,ИмяБазы,СтрокаПодключения")
Функция ПолучитьПараметрыПодключенияКSQL() Экспорт
	//ПараметрыПодключения = Новый Структура("ИмяСервера,ИмяПользователя,Пароль,ИмяБазы");
	//ФормаПараметровПодключения = ПолучитьОбщуюФорму("ПараметрыПодключенияКSQL");
	//ФормаПараметровПодключения.ОткрытьМодально();
	//
	//Возврат ФормаПараметровПодключения.ПараметрыПодключения;
	
	
	
	ПараметрыПодключения = Новый Структура("ИмяСервера,ИмяПользователя,Пароль,ИмяБазы,СтрокаПодключения");
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения,Справочники.КассовыеСерверы.Universale);
	#Если Клиент Тогда
		СохранитьЗначение("ПараметрыПодключенияКSQL",ПараметрыПодключения);
	#КонецЕсли
	Возврат ПараметрыПодключения;
КонецФункции	

//ДатаВремяSQL - преобразовует дату в sql-формат
//Параметры:
//	ДатаSQL 	- дата
//	ИВремяТоже 	- если истина тогда '2009.07.02 13:17:45'
//					иначе '2009.07.02'
Функция ДатаВремяSQL(ДатаSQL,ИВремяТоже=Ложь) Экспорт
	Результат =	"'" + Формат(ДатаSQL,"ДФ=yyyy.MM.dd");
	//Результат =	Формат(ДатаSQL,"ДФ=yyyy/MM/dd");
	Если ИВремяТоже Тогда
		 Результат = Результат +  " " + Формат(ДатаSQL, "ДЛФ=В");
	КонецЕсли;		
	Результат = Результат +  "'";
	
	//Результат = СтрЗаменить(Результат,".","");
	
	Возврат  Результат;
КонецФункции	

Функция СтрШаблон(Знач СтрокаШаблон, 
										Знач Пар1  = "", Знач Пар2  = "",
										Знач Пар3  = "", Знач Пар4  = "", Знач Пар5  = "",
										Знач Пар6  = "", Знач Пар7  = "", Знач Пар8  = "",
										Знач Пар9  = "", Знач Пар10 = "", Знач Пар11 = "",
										Знач Пар12 = "", Знач Пар13 = "", Знач Пар14 = "",
										Знач Пар15 = "", Знач Пар16 = "", Знач Пар17 = "",
										Знач Пар18 = "", Знач Пар19 = "", Знач Пар20 = "",
										Знач Пар21 = "", Знач Пар22 = "", Знач Пар23 = "",
										Знач Пар24 = "", Знач Пар25 = "", Знач Пар26 = "",
										Знач Пар27 = "", Знач Пар28 = "", Знач Пар29 = "",
										Знач Пар30 = ""	) Экспорт
										
	ПризнакПараметра = "¤";
	МетаСимвол       = "\¤"; //заменяется на признак параметра
	
	Для Счетчик = 1 По 30 Цикл
			
		ПерваяПозицияВхожденияПараметра = Найти(СтрокаШаблон, ""+ ПризнакПараметра + Счетчик + ПризнакПараметра);
				
		Если ПерваяПозицияВхожденияПараметра = 0 Тогда
			// этот параметр не используется
			Продолжить;	
		КонецЕсли; 
				
		ПараметрВСтроку = "";
		Выполнить("ПараметрВСтроку = Строка(Пар" + Счетчик + ")");
				
		СтрокаШаблон = СтрЗаменить(СтрокаШаблон, ПризнакПараметра + Счетчик + ПризнакПараметра, ПараметрВСтроку);
				
	КонецЦикла;									
		
	ПозицияМетаСимвола = СтрЗаменить(СтрокаШаблон, МетаСимвол,ПризнакПараметра);

	Возврат СтрокаШаблон;
	
КонецФункции //СтрШаблон()

Процедура АП_ПередЗаписьюОбъектаРегистрацияОбъектаИнформационнойБазыПередЗаписью(Источник, Отказ) Экспорт
	
	НужноРегистрироватьМестоСоздания = Источник.ЭтоНовый() 
		И ПараметрыСеанса.СохранятьИнформациюОМестеСозданияОбъектов;
	
	Источник.ДополнительныеСвойства.Вставить("НужноРегистрироватьМестоСоздания", НужноРегистрироватьМестоСоздания);
	
КонецПроцедуры

Процедура ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(СсылкаНаОбъект, УзелОбмена = Неопределено)
	
	НаборЗаписейРегистра = РегистрыСведений.ОбъектыИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Объект.Установить(СсылкаНаОбъект);
	
	СтрокаНабора = НаборЗаписейРегистра.Добавить();
	СтрокаНабора.Объект = СсылкаНаОбъект;
	СтрокаНабора.УзелОбмена = УзелОбмена;
	
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

Процедура АП_ПриЗаписиОбъектаРегистрацияОбъектаИнформационнойБазыПриЗаписи(Источник, Отказ) Экспорт
	НужноРегистрироватьМестоСоздания = Ложь;
	Источник.ДополнительныеСвойства.Свойство("НужноРегистрироватьМестоСоздания", НужноРегистрироватьМестоСоздания);
	
	Если НужноРегистрироватьМестосоздания <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка = Истина
		И ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель) Тогда
		
		// обмен с определенным узлом
		ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(Источник.Ссылка, Источник.ОбменДанными.Отправитель);
		
	Иначе
		
		// объект создан в этой информационной базе
		ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(Источник.Ссылка, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

//ПолучитьВыборкуНаSQL - возвращает таблицу значений полученную в процесе выполнения sql-запроса на сервере
//Параметры:
//	СтрокаКоманды 	- текст sql-запроса
//	Connection		- ссылка на соединение с SQL-сервером
Функция ОбработатьСтатусыУспешноИОбработаноСОшибкой(Connection,СтрокаКоманды) Экспорт		
	RS = Новый COMОбъект("ADODB.Recordset"); 
	// Запрос к базе на языке SQL запросов. 
	RS.Open(СокрЛП(СтрокаКоманды), Connection,ТипКурсораАДО("adOpenForwardOnly"),ТипБлокировкиАДО("adLockOptimistic")); 
//	RS.MoveFirst();
	Попытка
		КвоКолонок = RS.Fields.Count;
		ТЗ = Новый ТаблицаЗначений;
		ФормируемПоля = Истина;
		Пока RS.EOF() = 0 Цикл 
			Если ФормируемПоля Тогда
				Для й = 0 По КвоКолонок-1 Цикл
					ТЗ.Колонки.Добавить(RS.Fields(й).Name);
				КонецЦикла;
			КонецЕсли;
			ФормируемПоля = Ложь;
			RS.Fields.Item("COMPLETE").Value = "Y";
			НоваяСтрокаТЗ = ТЗ.Добавить();
			Для й = 0 По КвоКолонок-1 Цикл
				НоваяСтрокаТЗ[RS.Fields(й).Name] = RS.Fields(й).Value;
			КонецЦикла;
		    Сообщение = Новый СообщениеПользователю();
			Если НоваяСтрокаТЗ.STATUS = "S" Тогда
		    	Текст = "Пакет № "+НоваяСтрокаТЗ.PACK_ID+" успешно обработан"; 
			ИначеЕсли НоваяСтрокаТЗ.STATUS = "E" Тогда	
		    	Текст = "Пакет № "+НоваяСтрокаТЗ.PACK_ID+" обработан с ошибкой "+НоваяСтрокаТЗ.ERROR_DESCR; 
			Иначе	
		    	Текст = "Пакет № "+НоваяСтрокаТЗ.PACK_ID+" статус "+НоваяСтрокаТЗ.STATUS; 
			КонецЕсли;	
		    Сообщение.Текст = Текст;
		    Сообщение.Сообщить();
			RS.Update();
			RS.MoveNext(); 
		КонецЦикла; 
		RS.Close(); 
		Возврат ТЗ;	
	Исключение
		Возврат (Новый ТаблицаЗначений);
	КонецПопытки;	
КонецФункции	

Функция РазархивироватьФайл(СтруктураНастроекОбменаДанными, ИмяФайлаИзменений) 
	
	КаталогДляРаспаковки = КаталогВременныхФайлов();
	
	ИмяРазархивированногоФайла = "";
	
	Попытка
		//ДобавитьИнформациюВПротокол("Начало распаковки файла обмена данными " + СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, 
		//	СтруктураНастроекОбменаДанными.ДанныеПротокола);
		
		Архиватор = Новый ЧтениеZipФайла(ИмяФайлаИзменений, СтруктураНастроекОбменаДанными.ДанныеНастройки.ПарольНаПрием);
		
		Если Архиватор.Элементы.Количество() > 0 Тогда
			
			Архиватор.Извлечь(Архиватор.Элементы[0], КаталогДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			ИмяРазархивированногоФайла = РаботаСФайлами.ПолучитьИмяФайла(КаталогДляРаспаковки, Архиватор.Элементы[0].Имя);
			
		Иначе
			
			ИмяРазархивированногоФайла = "";	
			
		КонецЕсли;

		Архиватор.Закрыть();
	
	Исключение
		
		ПроцедурыОбменаДанными.СообщитьИнформациюОбОшибкеОбмена("Ошибка при распаковке данных из архива : " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными, Истина, Ложь);
		Возврат "";
							
	КонецПопытки;
	
	//ДобавитьИнформациюВПротокол("Окончание распаковки файла обмена данными " + СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений + ".
	//	|Распакованные данные помещены в файл " + ИмяРазархивированногоФайла, СтруктураНастроекОбменаДанными.ДанныеПротокола);
	
	Возврат ИмяРазархивированногоФайла;
	
КонецФункции

Функция ЗаписьНовыхПакетовВSolvo(БД,СтруктураНастроекОбменаДанными) Экспорт		
		Узел = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы.НомерОтправленного);
		Пока ВыборкаИзменений.Следующий() Цикл
			ТекстЗапроса = "select seq_packets_to_wms_id.nextval from dual";
			ТЗ = ПолучитьВыборкуНаSQL(БД,ТекстЗапроса);
			pack_id = УбратьПробелы(Строка(ТЗ[0].NEXTVAL));		
			Данные = ВыборкаИзменений.Получить();
			//ТекстЗапроса = "insert into packets_to_wms(pack_id, gateway_id, status) values("+pack_id+",'"+Узел.GATEWAY_ID+"',  'C')";
			ТекстЗапроса = "insert into packets_to_wms(pack_id, gateway_id, created, status) values('"+pack_id+"','"+Узел.GATEWAY_ID+"', TO_DATE("+ДатаВремяSQL(ТекущаяДата(),ИСТИНА)+", 'YYYY/MM/DD HH24:MI:SS'), 'C')";
			//ТекстЗапроса = "insert into packets_to_wms(pack_id, gateway_id, created, status) values('"+pack_id+"','"+Узел.GATEWAY_ID+"', '"+ДатаВремяSQL(ТекущаяДата(),ИСТИНА)+"', 'C')";
			ТЗ = ПолучитьВыборкуНаSQL(БД,ТекстЗапроса);
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ОбъектыИнформационныхБаз.Объект
			               |ИЗ
			               |	РегистрСведений.ОбъектыИнформационныхБаз КАК ОбъектыИнформационныхБаз
			               |ГДЕ
			               |	ОбъектыИнформационныхБаз.Объект = &Объект
			               |	И ОбъектыИнформационныхБаз.УзелОбмена = &УзелОбмена";
			Запрос.УстановитьПараметр("Объект", Данные.Ссылка);
			Запрос.УстановитьПараметр("УзелОбмена", Неопределено);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				action = "add";
			Иначе 
				action = "update";
			КонецЕсли;	
			Если ТипЗнч(Данные)=Тип("СправочникОбъект.Номенклатура") Тогда
				Если Данные.ЭтоГруппа = Ложь Тогда
					Пакет = СоздатьПакетНоменклатура(БД, Узел, pack_id, action, Данные);
			 	Иначе
					Пакет = СоздатьПакетГруппаНоменклатура(БД, Узел, pack_id, action, Данные);
				КонецЕсли; 
			//ИначеЕсли ТипЗнч(Данные)=Тип("СправочникОбъект.Контрагенты") Тогда
			//		Пакет = СоздатьПакетКонтрагент(БД, Узел, pack_id, action, Данные);
			ИначеЕсли ТипЗнч(Данные)=Тип("СправочникОбъект.ЕдиницыИзмерения") Тогда
					Пакет = СоздатьПакетMeasure(БД, Узел, pack_id, action, Данные);
				ИначеЕсли ТипЗнч(Данные)=Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
					Если Данные.Проведен Тогда
						Пакет = СоздатьПакетOrder(БД, Узел, pack_id, action, Данные);
					КонецЕсли;	
			ИначеЕсли ТипЗнч(Данные)=Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
					Пакет = СоздатьПакетIncoming(БД, Узел, pack_id, action, Данные);
			ИначеЕсли ТипЗнч(Данные)=Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
					Пакет = СоздатьПакетВозврат(БД, Узел, pack_id, action, Данные);
			КонецЕсли;	
			Если Пакет <> Неопределено Тогда ЗаписатьПакет(БД, Узел, pack_id, Пакет); КонецЕсли;
				Если ТипЗнч(Данные)=Тип("СправочникОбъект.Номенклатура") И Данные.ЭтоГруппа = Ложь и СокрЛП(Данные.Родитель.Код)<>"" Тогда
					Пакет = СоздатьПакетDepends(БД, Узел, pack_id, action, Данные);
					Если Пакет <> Неопределено Тогда ЗаписатьПакет(БД, Узел, pack_id, Пакет); КонецЕсли;
			 	КонецЕсли;
			Если action = "add"  Тогда   //
				РЗ = РегистрыСведений.ОбъектыИнформационныхБаз.СоздатьМенеджерЗаписи();
				РЗ.Объект = Данные.Ссылка;
				РЗ.УзелОбмена = Неопределено;
				РЗ.Удалить();
			КонецЕсли;	
		КонецЦикла;
		ПланыОбмена.УдалитьРегистрациюИзменений(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы.НомерОтправленного);
КонецФункции	

Процедура ЗаписатьПакет(БД, Узел, pack_id, Пакет)
	line = 1;
	Пока СтрДлина(Пакет) > Узел.ДлинаСтроки-15 Цикл 
		ПодСтр = Лев(Пакет, Узел.ДлинаСтроки-15); 
		ТекстЗапроса = "insert into xml_data_to_wms(pack_id, gateway_id, line, data) values("+pack_id+",'"+Узел.GATEWAY_ID+"', '" +line+"','"+ПодСтр+"')";
		ТЗ = ПолучитьВыборкуНаSQL(БД,ТекстЗапроса);
		Пакет = Сред(Пакет,Узел.ДлинаСтроки-15+1);
		line = line + 1;
	КонецЦикла;
	ТекстЗапроса = "insert into xml_data_to_wms(pack_id, gateway_id, line, data) values("+pack_id+",'"+Узел.GATEWAY_ID+"', '" +line+"','"+Пакет+"')";
	ТЗ = ПолучитьВыборкуНаSQL(БД,ТекстЗапроса);
КонецПроцедуры	

Функция	СоздатьПакетНоменклатура(БД, Узел, pack_id, action, Данные)
	Запись = Новый ЗаписьXML();
//	Запись.УстановитьСтроку("windows-1251");
	Запись.УстановитьСтроку("");

	//Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("sku");
	Запись.ЗаписатьАтрибут("syncid", Строка(pack_id));
	Запись.ЗаписатьАтрибут("action", action);
	Запись.ЗаписатьАтрибут("sku_id", СокрЛП(Данные.код));
	Запись.ЗаписатьАтрибут("name", СокрЛП(Данные.наименование));
	//Запись.ЗаписатьАтрибут("description", Данные.ДополнительноеОписаниеНоменклатуры);
	////Запись.ЗаписатьАтрибут("upc", "");
	//Запись.ЗаписатьАтрибут("article", Данные.Артикул);
	//Запись.ЗаписатьАтрибут("abc", "E");
	//Запись.ЗаписатьАтрибут("control_metod", "");
	////Запись.ЗаписатьАтрибут("control_date", "");
	//Запись.ЗаписатьАтрибут("producer", Данные.Производитель.Наименование);
	//Запись.ЗаписатьАтрибут("coo", Данные.СтранаПроисхождения.КодАльфа2);
	//Запись.ЗаписатьАтрибут("holder_id", "H1");
	//Запись.ЗаписатьАтрибут("measure", Данные.ЕдиницаХраненияОстатков.Код);
	//Запись.ЗаписатьАтрибут("lot_req", "f");
	//Запись.ЗаписатьАтрибут("is_kit", "f");
	//Запись.ЗаписатьАтрибут("kit_type", "");
	Запись.ЗаписатьКонецЭлемента();
	Стр = Запись.Закрыть();
	Возврат Стр;
КОнецФункции	

Функция	СоздатьПакетГруппаНоменклатура(БД, Узел, pack_id, action, Данные)
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку("");

	//Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("sku_group");
	Запись.ЗаписатьАтрибут("syncid", Строка(pack_id));
	Запись.ЗаписатьАтрибут("action", action);
	Запись.ЗаписатьАтрибут("sku_group_id", СокрЛП(Данные.код));
	Запись.ЗаписатьАтрибут("name", Данные.наименование);
	Если Данные.Родитель <> Справочники.Номенклатура.ПустаяСсылка() Тогда
		Запись.ЗаписатьАтрибут("parent_group_id", СокрЛП(Данные.Родитель.код));
	КонецЕсли;	
	Запись.ЗаписатьКонецЭлемента();
	Стр = Запись.Закрыть();
	Возврат Стр;
КОнецФункции

Функция	СоздатьПакетMeasure(БД, Узел, pack_id, action, Данные)
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку("");

	//Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("measure");
	Запись.ЗаписатьАтрибут("syncid", Строка(pack_id));
	Запись.ЗаписатьАтрибут("action", action);
	Запись.ЗаписатьАтрибут("measureid", СокрЛП(Данные.код));
	Запись.ЗаписатьАтрибут("name", Данные.наименование);
	Запись.ЗаписатьАтрибут("short_name", Данные.наименование);
	Запись.ЗаписатьКонецЭлемента();
	Стр = Запись.Закрыть();
	Возврат Стр;
КОнецФункции

Функция	СоздатьПакетOrder(БД, Узел, pack_id, action, Данные)
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку("");

//	Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("order");
	Запись.ЗаписатьАтрибут("syncid", Строка(pack_id));
	Запись.ЗаписатьАтрибут("action", action);
	Запись.ЗаписатьАтрибут("order_id", СокрЛП(Данные.Номер));
	Запись.ЗаписатьАтрибут("display_name", Данные.Номер);
	//Запись.ЗаписатьАтрибут("priority", "1");
	//Запись.ЗаписатьАтрибут("client_id", "38529");
	Запись.ЗаписатьАтрибут("client_id", СокрЛП(Данные.Контрагент.Код));
	//Запись.ЗаписатьАтрибут("carrier_id", СокрЛП(Данные.Перевозчик.Код));
	Запись.ЗаписатьАтрибут("carrier_id", "0");
	Запись.ЗаписатьАтрибут("holder_id", "H1"); //Данные.Организация.Код);
	Запись.ЗаписатьАтрибут("type", "A");
	//Запись.ЗаписатьАтрибут("date_to_ship", Формат(Данные.ДатаОтгрузки,"ДФ=""гггг/ММ/дд ЧЧ:мм:сс"""));
	Запись.ЗаписатьАтрибут("date_to_ship", Формат(Данные.ДатаОтгрузки,"ДФ=""дд-ММ-гггг ЧЧ:мм"""));
	//Запись.ЗаписатьАтрибут("date_to_ship", "TO_DATE("+ДатаВремяSQL(Данные.ДатаОтгрузки,ИСТИНА)+", 'YYYY/MM/DD HH24:MI:SS')");
	Запись.ЗаписатьАтрибут("auto_start", "f");
	//Запись.ЗаписатьАтрибут("auto_activate", "t");
	//Запись.ЗаписатьАтрибут("auto_start_date", Данные.Дата);
	//Запись.ЗаписатьАтрибут("car_num", ""); //Номер машины для погрузки заказа
	//Запись.ЗаписатьАтрибут("ship_seq", ""); //Порядок погрузки заказа в машину
	Запись.ЗаписатьАтрибут("shipping_in_pallet", "f"); //Способ погрузки заказа
	//Запись.ЗаписатьАтрибут("new_client_flag", "f"); //
	Запись.ЗаписатьАтрибут("responsible", Данные.Ответственный.Наименование);
	//Запись.ЗаписатьАтрибут("responsible", "5");
	Запись.ЗаписатьАтрибут("comments",Данные.Комментарий);
	Запись.ЗаписатьАтрибут("syncdate",Формат(Данные.ДатаОтгрузки,"ДФ=""дд-ММ-гггг ЧЧ:мм"""));
	Для Каждого Стр Из Данные.Товары Цикл
	Запись.ЗаписатьНачалоЭлемента("order_detail");
		Запись.ЗаписатьАтрибут("syncid", Строка(pack_id));
		Запись.ЗаписатьАтрибут("action", action);
		Запись.ЗаписатьАтрибут("order_id", СокрЛП(Данные.Номер));
		Запись.ЗаписатьАтрибут("line", Строка(Данные.Товары.Индекс(Стр)));
		Запись.ЗаписатьАтрибут("sku_id", СокрЛП(Стр.Номенклатура.Код));
		Запись.ЗаписатьАтрибут("barcode_id", "-"); //Уникальный идентификатор упаковки товара для планирования в заказ
		Запись.ЗаписатьАтрибут("round_pack", "U");  //Способ округления при планировании
		Запись.ЗаписатьАтрибут("partial_pack", "t"); //Возможность планирования неполных коробок
		Запись.ЗаписатьАтрибут("holder_id", "-"); //Код владельца в справочнике предприятия.(данный параметр используется при планировании заказа с учетом владельца)
		Запись.ЗаписатьАтрибут("load_status", "A"); //Качественное состояние товара
		Запись.ЗаписатьАтрибут("category", "-"); //Код категории груза в справочнике категорий грузов
		Запись.ЗаписатьАтрибут("marker", "-");
		Запись.ЗаписатьАтрибут("qty", Строка(Стр.Количество));
		//Запись.ЗаписатьАтрибут("comments",""); //Комментарии к строке документа
	Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	Запись.ЗаписатьКонецЭлемента();

	Стр = Запись.Закрыть();
	Возврат Стр;
КонецФункции

Функция	СоздатьПакетIncoming(БД, Узел, pack_id, action, Данные)
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку("");

	//Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("incoming");
	Запись.ЗаписатьАтрибут("syncid", Строка(pack_id));
	Запись.ЗаписатьАтрибут("action", action);
	Запись.ЗаписатьАтрибут("inc_id", СокрЛП(Данные.Номер));
	Запись.ЗаписатьАтрибут("display_name", Данные.Номер);
	//Запись.ЗаписатьАтрибут("priority", 1);
	Запись.ЗаписатьАтрибут("supplier_id", СокрЛП(Данные.Контрагент.Код));
	//Запись.ЗаписатьАтрибут("carrier_id", "");
	Запись.ЗаписатьАтрибут("holder_id", "H1"); //Данные.Организация.Код);
	Запись.ЗаписатьАтрибут("type", "A");
	Запись.ЗаписатьАтрибут("date_to_ship", ДатаВремяSQL(Данные.Дата,ИСТИНА));
	Запись.ЗаписатьАтрибут("responsible", Данные.Ответственный.Наименование);
	Запись.ЗаписатьАтрибут("comments",Данные.Комментарий);
	Для Каждого Стр Из Данные.Товары Цикл
	Запись.ЗаписатьНачалоЭлемента("incoming_detail");
		Запись.ЗаписатьАтрибут("syncid", Строка(pack_id));
		Запись.ЗаписатьАтрибут("action", action);
		Запись.ЗаписатьАтрибут("inc_id", СокрЛП(Данные.Номер));
		Запись.ЗаписатьАтрибут("line", Строка(Данные.Товары.Индекс(Стр)));
		Запись.ЗаписатьАтрибут("sku_id", СокрЛП(Стр.Номенклатура.Код));
		Запись.ЗаписатьАтрибут("uom", "");
		Запись.ЗаписатьАтрибут("marker", "-");
		Запись.ЗаписатьАтрибут("qty", строка(Стр.Количество));
		//Запись.ЗаписатьАтрибут("comments",""); //Комментарии к строке документа
	Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	Запись.ЗаписатьКонецЭлемента();

	Стр = Запись.Закрыть();
	Возврат Стр;
КОнецФункции

Функция	СоздатьПакетВозврат(БД, Узел, pack_id, action, Данные)
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку("");

	//Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("incoming");
	Запись.ЗаписатьАтрибут("syncid", Строка(pack_id));
	Запись.ЗаписатьАтрибут("action", action);
	Запись.ЗаписатьАтрибут("inc_id", СокрЛП(Данные.Номер));
	Запись.ЗаписатьАтрибут("display_name", Данные.Номер);
	//Запись.ЗаписатьАтрибут("priority", 1);
	Запись.ЗаписатьАтрибут("supplier_id", СокрЛП(Данные.Контрагент.Код));
	//Запись.ЗаписатьАтрибут("carrier_id", "");
	Запись.ЗаписатьАтрибут("holder_id", "H1"); //Данные.Организация.Код);
	Запись.ЗаписатьАтрибут("type", "B");
	Запись.ЗаписатьАтрибут("date_to_ship", ДатаВремяSQL(Данные.Дата,ИСТИНА));    // TO_DATE("+ДатаВремяSQL(ТекущаяДата(),ИСТИНА)+", 'YYYY/MM/DD HH24:MI:SS') 
	Запись.ЗаписатьАтрибут("responsible", Данные.Ответственный.Наименование);
	Запись.ЗаписатьАтрибут("comments",Данные.Комментарий);
	Для Каждого Стр Из Данные.Товары Цикл
	Запись.ЗаписатьНачалоЭлемента("incoming_detail");
		Запись.ЗаписатьАтрибут("syncid", Строка(pack_id));
		Запись.ЗаписатьАтрибут("action", action);
		Запись.ЗаписатьАтрибут("inc_id", СокрЛП(Данные.Номер));
		Запись.ЗаписатьАтрибут("line", Строка(Данные.Товары.Индекс(Стр)));
		Запись.ЗаписатьАтрибут("sku_id", СокрЛП(Стр.Номенклатура.Код));
		Запись.ЗаписатьАтрибут("uom", "");
		Запись.ЗаписатьАтрибут("marker", "-");
		Запись.ЗаписатьАтрибут("qty", Строка(Стр.Количество));
		//Запись.ЗаписатьАтрибут("comments",""); //Комментарии к строке документа
	Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	Запись.ЗаписатьКонецЭлемента();

	Стр = Запись.Закрыть();
	Возврат Стр;
КОнецФункции

Функция	СоздатьПакетDepends(БД, Узел, pack_id, action, Данные)
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку("");

//	Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("sku_depends");
	Запись.ЗаписатьАтрибут("syncid", Строка(pack_id));
	Запись.ЗаписатьАтрибут("action", action);
	Запись.ЗаписатьАтрибут("sku_group_id", СокрЛП(Данные.родитель.код));
	Запись.ЗаписатьАтрибут("sku_id", СокрЛП(Данные.код));
	Запись.ЗаписатьКонецЭлемента();
	Стр = Запись.Закрыть();
	Возврат Стр;
КОнецФункции	

Функция	СоздатьПакетКонтрагент(БД, Узел, pack_id, action, Данные)
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку("");

	//Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("client");
	Запись.ЗаписатьАтрибут("syncid", Строка(pack_id));
	Запись.ЗаписатьАтрибут("action", action);
	Запись.ЗаписатьАтрибут("client_id", СокрЛП(Данные.код));
	Запись.ЗаписатьАтрибут("name", Данные.наименование);
	Запись.ЗаписатьАтрибут("address", "");
	Запись.ЗаписатьАтрибут("phone", "");
	Запись.ЗаписатьАтрибут("email", "");
	Запись.ЗаписатьАтрибут("fax", "");
	Запись.ЗаписатьАтрибут("is_holder", "f");
	Запись.ЗаписатьАтрибут("is_customer", "t");
	Запись.ЗаписатьАтрибут("is_supplier", "t");
	Запись.ЗаписатьАтрибут("is_carrier", "f");
	Запись.ЗаписатьАтрибут("type", "A");
	
	Запись.ЗаписатьАтрибут("comments", "");
	Запись.ЗаписатьКонецЭлемента();
	Стр = Запись.Закрыть();
	Возврат Стр;
КОнецФункции	

Процедура ПрочитатьSolvoВфайлОбмена(СтруктураНастроекОбменаДанными, Отказ) Экспорт
	Отказ = Ложь;	
	Узел = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
	БД = ПодключитьSQL(СформироватьСтруктуруПодключенияУзла(Узел));
	Если БД <> Неопределено Тогда
		Пока Истина Цикл
//Проверка наличия пакета
		ТекстЗапроса = "select min( pack_id ) as pack_id
		| from packets_to_host  
		| where GATEWAY_ID='"+Узел.GATEWAY_ID+"'"+"
		| and status = 'C'";
     	ТЗ = ПолучитьВыборкуНаSQL(БД,ТекстЗапроса);
		Если ТЗ.Количество()>0 Тогда
			pack_id = УбратьПробелы(Строка(ТЗ[0].pack_id));
//Выборка данных
Если pack_id = Null ИЛИ pack_id = "" Тогда 
	Прервать;
КонецЕсли;	
		ТекстЗапроса = "SELECT data
			| FROM XML_DATA_TO_HOST
			| where pack_id="+pack_id+" 
			| and GATEWAY_ID='"+Узел.GATEWAY_ID+"'"+"
			| order by line";

	    	ТЗПакеты = ПолучитьВыборкуНаSQL(БД,ТекстЗапроса);
			Пакет = "";
			Для Каждого Стр Из ТЗПакеты Цикл
				Пакет = Пакет + Стр.data;
			КонецЦикла;	
		ТекстЗапроса = "update packets_to_host 
			| set status='P', process_start=TO_DATE("+ДатаВремяSQL(ТекущаяДата(),ИСТИНА)+", 'YYYY/MM/DD HH24:MI:SS') 
			| where pack_id="+pack_id+"
			| and GATEWAY_ID='"+Узел.GATEWAY_ID+"'";
     	ТЗ = ПолучитьВыборкуНаSQL(БД,ТекстЗапроса);
		//Узел.ПолучитьОбъект().Прочитать();
		Ошибка = ОбработатьПакет(Пакет, Узел);   
//Пакет успешно
		Если Ошибка="" Тогда
		ТекстЗапроса = "update packets_to_host 
			| set status='S', process_finish=TO_DATE("+ДатаВремяSQL(ТекущаяДата(),ИСТИНА)+", 'YYYY/MM/DD HH24:MI:SS')  
			| where pack_id='"+pack_id+"'"+"
			| and GATEWAY_ID='"+Узел.GATEWAY_ID+"'";
     	ТЗ = ПолучитьВыборкуНаSQL(БД,ТекстЗапроса);
		    Сообщение = Новый СообщениеПользователю();
	    	Текст = "Пакет № "+PACK_ID+" успешно обработан"; 
		    Сообщение.Текст = Текст;
		    Сообщение.Сообщить();
		
//Пакет c ошибкой
		Иначе
		ТекстЗапроса = "update packets_to_host 
			| set status='E', error_descr='"+Ошибка+"', , process_finish=TO_DATE("+ДатаВремяSQL(ТекущаяДата(),ИСТИНА)+", 'YYYY/MM/DD HH24:MI:SS') 
			| where pack_id='"+pack_id+"'"+"
			| and GATEWAY_ID='"+Узел.GATEWAY_ID+"'";
     	ТЗ = ПолучитьВыборкуНаSQL(БД,ТекстЗапроса);
		    Сообщение = Новый СообщениеПользователю();
		    	Текст = "Пакет № "+PACK_ID+" обработан с ошибкой "+Ошибка; 
		    Сообщение.Текст = Текст;
		    Сообщение.Сообщить();
        КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;	
		КонецЦикла;	
		ЗакрытьSQLСоединение(БД);
	Иначе
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры	

Функция ОбработатьПакет(Пакет, Узел)
	Перем Данные;
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Пакет);
	Ошибка = "";
	Данные = Неопределено;
	Уровень = 0;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Уровень = Уровень + 1;
			ТЗ = Новый ТаблицаЗначений;
			Стр = ТЗ.Добавить();
		    ИмяУзла = Чтение.ЛокальноеИмя;
			Пока Чтение.ПрочитатьАтрибут() Цикл
				ТЗ.Колонки.Добавить(Чтение.ЛокальноеИмя);
				Стр[Чтение.ЛокальноеИмя] = Чтение.Значение;
			КонецЦикла;	
			Если ИмяУзла = "sku_alias" Тогда
				Ошибка = ОбработатьАльтернативныйШтрихКод(ТЗ, Данные);
			ИначеЕсли ИмяУзла = "pack" Тогда	
				Ошибка = ОбработатьУпаковку(ТЗ, Данные);
			ИначеЕсли ИмяУзла = "incoming_status_changed" Тогда	
				Ошибка = ОбработатьИзменениеСтатусаНакладной(ТЗ, Данные);
			ИначеЕсли ИмяУзла = "incoming_status_changed_detail" Тогда	
				Ошибка = ОбработатьИзменениеДеталейПриемки(ТЗ, Данные);
			ИначеЕсли ИмяУзла = "order_status_changed" Тогда	
					Ошибка = ОбработатьИзменениеСтатусаЗаданиеНаСборку(ТЗ, Данные);
		ИначеЕсли ИмяУзла = "order_status_changed_detail" Тогда	
				Ошибка = ОбработатьДеталейЗаданиеНаСборку(ТЗ, Данные);
			ИначеЕсли ИмяУзла = "load_status_changed" Тогда	
					Ошибка = ОбработатьИзменениеСостоянияГруза(ТЗ, Данные);
		ИначеЕсли ИмяУзла = "load_qty_changed" Тогда	
				Ошибка = ОбработатьИзменениеКоличестваГруза(ТЗ, Данные);
			КонецЕсли;	
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Уровень = Уровень - 1;
			Если Уровень = 0 И Данные <> Неопределено Тогда
				Данные.ОбменДанными.Отправитель = Узел;
				Данные.ОбменДанными.Загрузка = Истина;
				Данные.Записать();
				Данные = Неопределено;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	Возврат Ошибка;
КонецФункции	

Процедура ЗаписатьВSolvoФайлОбмена(СтруктураНастроекОбменаДанными) Экспорт
	Отказ = Ложь;	
	Узел = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
	БД = ПодключитьSQL(СформироватьСтруктуруПодключенияУзла(Узел));
	Если БД <> Неопределено Тогда
// 1.	последовательно сканирует записи в таблице заголовков и при обнаружении записи со статусом пакета «Успешно обработан» или «Обработан с ошибками»:
//a.	Формирует, записывает и выводит соответствующее сообщение для визуального контроля;
//b.	Производит необходимые действия в системе (действия могут зависеть от ситуации и особенностей системы);
//c.	Устанавливает флаг разрешения архивации в «Y».

		ТекстЗапроса = "SELECT *
		| FROM PACKETS_TO_WMS
		| where GATEWAY_ID='"+Узел.GATEWAY_ID+"'"+"
		| and (STATUS ='"+"S"+"'"+"
		| or STATUS ='"+"E"+"')";
     	ТЗ = ОбработатьСтатусыУспешноИОбработаноСОшибкой(БД,ТекстЗапроса);
		ТЗ = ЗаписьНовыхПакетовВSolvo(БД,СтруктураНастроекОбменаДанными);
		ЗакрытьSQLСоединение(БД);
	КонецЕсли;
КонецПроцедуры	

Функция ОбработатьАльтернативныйШтрихКод(ТЗ, Данные)
	
	Возврат "";
КонецФункции	

Функция ОбработатьУпаковку(ТЗ, Данные)
	Если ТЗ[0].action = "update" Тогда
		Ном = Справочники.Номенклатура.НайтиПоКоду(ТЗ[0].sku_id);
		Если Ном = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Возврат "Номенклатура не найдена";
		КонецЕсли;
		Данные = Ном.ПолучитьОбъект();
	КонецЕсли;
		Возврат "";
КонецФункции	

Функция ОбработатьИзменениеСтатусаНакладной(ТЗ, Данные)
	Если Данные = Неопределено Тогда
		Если ТЗ[0].action = "update" Тогда
			Док = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(ТЗ[0].inc_id);
		КонецЕсли;	
		
	КонецЕсли;	
	Возврат "";
КонецФункции	

Функция ОбработатьИзменениеДеталейПриемки(ТЗ, Данные)
	Если Данные = Неопределено Тогда
	КонецЕсли;	
	
	Возврат "";
КонецФункции	

Функция ОбработатьИзменениеСтатусаЗаданиеНаСборку(ТЗ, Данные)
	
	Возврат "";
КонецФункции	

Функция ОбработатьДеталейЗаданиеНаСборку(ТЗ, Данные)
	
	Возврат "";
КонецФункции	

Функция ОбработатьИзменениеСостоянияГруза(ТЗ, Данные)
	
	Возврат "";
КонецФункции	

Функция ОбработатьИзменениеКоличестваГруза(ТЗ, Данные)
	
	Возврат "";
КонецФункции	

Функция УбратьПробелы(Стр);
	
	Пока Истина Цикл
		Кол = Найти(Стр, Символ(160));
		Если Кол > 0 Тогда
			Стр = СтрЗаменить(Стр, Символ(160), "");
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Стр;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////
//Запускает процедуру обмена данными с Solvo
Процедура АП_ВыполнитьОбменСолво() Экспорт
	// Вставить содержимое обработчика.
	
	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,, "Запуск процедуры обмена данными с Solvo");
	ДатаОтсечки = Дата(2014, 12, 1);
	
	//1. Выборка по узлам
	ВыборкаПоУзлам = ПланыОбмена.АП_ОбменSolvo.Выбрать();
	
	Пока ВыборкаПоУзлам.Следующий() Цикл
		
		Если ВыборкаПоУзлам.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПоУзлам.Склады.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПоУзлам.ПриостановитьОбмен Тогда
			Продолжить;
		КонецЕсли;
		
		Узел = ВыборкаПоУзлам.Ссылка;
		
		//3. Подключимся к базе Solvo
		Соединение = УстановитьСоединение(Узел);
		Если Соединение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//Настройки = ФобизнесПроцедуры.ПолучитьНастройкиКомиссионнойТорговли(Узел.Организация);
		
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Запуск обмена данными с узлом "+Узел.Код);
		
		//*************************************************************
		//4. Классификатор единиц измерения
		//МассивЭлементов = Новый Массив;
		//Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Справочники.КлассификаторЕдиницИзмерения);
		//Пока Выборка.Следующий() Цикл
		//	Попытка
		//		ЕдиницаИзмерения = Выборка.Получить().Ссылка;
		//		Код = ЕдиницаИзмерения.Код;
		//	Исключение
		//		Продолжить;
		//	КонецПопытки;
		//	
		//	Если ВыгрузитьЕдиницуИзмерения(Соединение, ЕдиницаИзмерения, Узел, Ложь) Тогда		//Проверяем наличие единицы измерения
		//		Если МассивЭлементов.Найти(ЕдиницаИзмерения) = Неопределено Тогда
		//			МассивЭлементов.Добавить(ЕдиницаИзмерения);
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЦикла;
		
		//Очистим ссылки на объекты в узле
		//Для Каждого ТекЭлемент Из МассивЭлементов Цикл
		//	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
		//КонецЦикла;
		//*************************************************************
		
		//*************************************************************
		//5. Выгрузим номенклатуру
		
		МассивЭлементов = Новый Массив;
		Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Справочники.Номенклатура);
		Пока Выборка.Следующий() Цикл
			Попытка
				Номенклатура = Выборка.Получить().Ссылка;
				Если Номенклатура.ЭтоГруппа Тогда
					Если МассивЭлементов.Найти(Номенклатура) = Неопределено Тогда
						МассивЭлементов.Добавить(Номенклатура);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если ВыгрузитьНоменклатуру(Соединение, Номенклатура, Узел, Истина) Тогда
				Если МассивЭлементов.Найти(Номенклатура) = Неопределено Тогда
					МассивЭлементов.Добавить(Номенклатура);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//Очистим ссылки на объекты в узле
		Для Каждого ТекЭлемент Из МассивЭлементов Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
		КонецЦикла;
		//*************************************************************
		
		//*************************************************************
		//6. Контрагенты
		МассивЭлементов = Новый Массив;
		Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Справочники.Контрагенты);
		Пока Выборка.Следующий() Цикл
			Попытка
				Контрагент = Выборка.Получить().Ссылка;
				Если Контрагент.ЭтоГруппа Тогда
					Если МассивЭлементов.Найти(Контрагент) = Неопределено Тогда
						МассивЭлементов.Добавить(Контрагент);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если ВыгрузитьКонтрагента(Соединение, Контрагент, Узел, Истина) Тогда
				Если МассивЭлементов.Найти(Контрагент) = Неопределено Тогда
					МассивЭлементов.Добавить(Контрагент);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//Очистим ссылки на объекты в узле
		Для Каждого ТекЭлемент Из МассивЭлементов Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
		КонецЦикла;
		//*************************************************************
		
		//*************************************************************
		//7. Задания на подбор
		МассивЭлементов = Новый Массив;
		МассивВыгруженных = Новый Массив;
		Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.СП_ЗаданиеНаПодбор);
		Пока Выборка.Следующий() Цикл
			Попытка
				ЗаданиеНаПодбор = Выборка.Получить().Ссылка;
				Номер = ЗаданиеНаПодбор.Номер;
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если ЗаданиеНаПодбор.Организация <> Узел.Организация Тогда
				Если МассивЭлементов.Найти(ЗаданиеНаПодбор) = Неопределено Тогда
					МассивЭлементов.Добавить(ЗаданиеНаПодбор);
				КонецЕсли;
			ИначеЕсли ЗаданиеНаПодбор.Проведен = Ложь Тогда
				Если МассивЭлементов.Найти(ЗаданиеНаПодбор) = Неопределено Тогда
					МассивЭлементов.Добавить(ЗаданиеНаПодбор);
				КонецЕсли;
			ИначеЕсли ЗаданиеНаПодбор.Дата < ДатаОтсечки Тогда
				Если МассивЭлементов.Найти(ЗаданиеНаПодбор) = Неопределено Тогда
					МассивЭлементов.Добавить(ЗаданиеНаПодбор);
				КонецЕсли;
			ИначеЕсли ЗаданиеНаПодбор.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.ПереданНаСклад И (Узел.Склады.Найти(ЗаданиеНаПодбор.Склад, "Склад")<>Неопределено) Тогда		//Выгружаем только с этим статусом
				Если ВыгрузитьЗаданиеНаПодбор(Соединение, ЗаданиеНаПодбор, Узел) Тогда
					Если МассивЭлементов.Найти(ЗаданиеНаПодбор) = Неопределено Тогда
						МассивЭлементов.Добавить(ЗаданиеНаПодбор);
					КонецЕсли;
					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,ЗаданиеНаПодбор, "Задание на подбор выгружено");
					#Если Клиент Тогда
						Сообщить("Задание на подбор "+ЗаданиеНаПодбор+" выгружено", СтатусСообщения.Информация);
					#КонецЕсли
					
					МассивВыгруженных.Добавить(ЗаданиеНаПодбор);
				Иначе
					#Если Клиент Тогда
						Сообщить("Задание на подбор "+ЗаданиеНаПодбор+" не выгружено", СтатусСообщения.Внимание);
					#КонецЕсли
					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,,ЗаданиеНаПодбор, "Задание на подбор не выгружено");
				КонецЕсли;
			Иначе
				Если МассивЭлементов.Найти(ЗаданиеНаПодбор) = Неопределено Тогда
					МассивЭлементов.Добавить(ЗаданиеНаПодбор);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//Очистим ссылки на объекты в узле
		Для Каждого ТекЭлемент Из МассивЭлементов Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
		КонецЦикла;
		
		//Проверим, задания на подбор, которые возможно "потерялись в Solvo"
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокЗаданий", МассивВыгруженных);
		Запрос.УстановитьПараметр("Дата", ТекущаяДата()-86400);
		Запрос.УстановитьПараметр("СтатусЗаказа", Перечисления.СП_СтатусыЗаданияНаПодбор.ПереданНаСклад);
		Запрос.УстановитьПараметр("Склады", Узел.Склады.ВыгрузитьКолонку("Склад"));
		Запрос.УстановитьПараметр("Организация", Узел.Организация);
		Запрос.Текст = "ВЫБРАТЬ
		               |	СП_ЗаданиеНаПодбор.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
		               |ГДЕ
		               |	НЕ СП_ЗаданиеНаПодбор.Ссылка В (&СписокЗаданий)
		               |	И СП_ЗаданиеНаПодбор.Проведен = ИСТИНА
		               |	И СП_ЗаданиеНаПодбор.Склад В(&Склады)
		               |	И СП_ЗаданиеНаПодбор.Дата >= &Дата
		               |	И СП_ЗаданиеНаПодбор.Организация = &Организация
		               |	И СП_ЗаданиеНаПодбор.СтатусДокумента = &СтатусЗаказа
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ФБ_ЗаданиеНаПодбор.Дата,
		               |	Ссылка";
		ТаблицаЗаданий = Запрос.Выполнить().Выгрузить();
		ТаблицаЗаданий.Колонки.Добавить("ИД");
		Для Каждого ТекСтрока Из ТаблицаЗаданий Цикл
			ТекСтрока.ИД = СокрЛП(ТекСтрока.Ссылка.УникальныйИдентификатор());
		КонецЦикла;
		
		//Получим обработанные сегодня задания на подбор
		//СтрокаКоманды = "select status, sdid from orders where created > '"+Формат(ТекущаяДата(),"ДФ=dd-MM-yyyy")+"'";
		СтрокаКоманды = "select status, sdid from orders where created > to_date('"+Формат(ТекущаяДата()-86400,"ДФ='dd.MM.yyyy HH.mm.ss'")+"', 'DD.MM.YYYY HH24:MI:SS')";
		Рез = ВыполнитьЗапрос(Соединение, СтрокаКоманды,,,,Узел);
		Если Рез <> Неопределено Тогда
			Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
				ИД = СокрЛП(Рез.Fields("sdid").Value);
				Статус = СокрЛП(Рез.Fields("status").Value);
				Если ПустаяСтрока(Статус) Тогда
					Рез.MoveNext();
					Продолжить;
				КонецЕсли;
				
				ТабСтрока = ТаблицаЗаданий.Найти(ИД, "ИД");
				Если ТабСтрока <> Неопределено Тогда
					ТаблицаЗаданий.Удалить(ТабСтрока);		//Этот выгружен
				КонецЕсли;
				Рез.MoveNext();
			КонецЦикла;
			
			//Зафиксируем изменения для оставшихся в узле
			Для Каждого ТекСтрока Из ТаблицаЗаданий Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, ТекСтрока.Ссылка);
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ТекСтрока.Ссылка, "Повторно отмечен для выгрузки "+ТекСтрока.Ссылка);
			КонецЦикла;
		КонецЕсли;
		//*************************************************************
		
		//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Дальше пока не пойдем
		Возврат;
		//-- Spl_Апроф
		
		//*************************************************************
		//8. Поступления товаров
		МассивЭлементов = Новый Массив;
		МассивВыгруженных = Новый Массив;
		Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.ПоступлениеТоваровУслуг);
		Пока Выборка.Следующий() Цикл
			Попытка
				Поступление = Выборка.Получить().Ссылка;
				Номер = Поступление.Номер;
			Исключение
				Продолжить;
			КонецПопытки;
						
			Если Поступление.Организация <> Узел.Организация Тогда
				Если МассивЭлементов.Найти(Поступление) = Неопределено Тогда
					МассивЭлементов.Добавить(Поступление);
				КонецЕсли;
			ИначеЕсли Поступление.Проведен = Ложь Тогда
				Если МассивЭлементов.Найти(Поступление) = Неопределено Тогда
					МассивЭлементов.Добавить(Поступление);
				КонецЕсли;
			ИначеЕсли Поступление.СтатусССИС <> Перечисления.ФБ_СтатусыПоступленияТоваровУслуг.ОтправленНаСклад Тогда
				Если МассивЭлементов.Найти(Поступление) = Неопределено Тогда
					МассивЭлементов.Добавить(Поступление);
				КонецЕсли;
			ИначеЕсли Поступление.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
				Если МассивЭлементов.Найти(Поступление) = Неопределено Тогда
					МассивЭлементов.Добавить(Поступление);
				КонецЕсли;
			ИначеЕсли Узел.Склады.Найти(Поступление.СкладОрдер, "Склад") = Неопределено Тогда		//Это не тот склад
				Если МассивЭлементов.Найти(Поступление) = Неопределено Тогда
					МассивЭлементов.Добавить(Поступление);
				КонецЕсли;
			ИначеЕсли Поступление.Дата < ДатаОтсечки Тогда
				Если МассивЭлементов.Найти(Поступление) = Неопределено Тогда
					МассивЭлементов.Добавить(Поступление);
				КонецЕсли;
			Иначе
				Если ВыгрузитьПоступление(Соединение, Поступление, Узел) Тогда
					Если МассивЭлементов.Найти(Поступление) = Неопределено Тогда
						МассивЭлементов.Добавить(Поступление);
					КонецЕсли;
					МассивВыгруженных.Добавить(Поступление);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//Очистим ссылки на объекты в узле
		Для Каждого ТекЭлемент Из МассивЭлементов Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
		КонецЦикла;
		//*************************************************************
		
		//*************************************************************
		//9. Возвраты товаров
		МассивЭлементов = Новый Массив;
		Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.ВозвратТоваровОтПокупателя);
		Пока Выборка.Следующий() Цикл
			Попытка
				ВозвратТоваров = Выборка.Получить().Ссылка;
				Номер = ВозвратТоваров.Номер;
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если ВозвратТоваров.Организация <> Узел.Организация Тогда
				Если МассивЭлементов.Найти(ВозвратТоваров) = Неопределено Тогда
					МассивЭлементов.Добавить(ВозвратТоваров);
				КонецЕсли;
			ИначеЕсли ВозвратТоваров.Проведен = Ложь Тогда
				Если МассивЭлементов.Найти(ВозвратТоваров) = Неопределено Тогда
					МассивЭлементов.Добавить(ВозвратТоваров);
				КонецЕсли;
			ИначеЕсли ВозвратТоваров.СтатусССИС <> Перечисления.ФБ_СтатусыПоступленияТоваровУслуг.ОтправленНаСклад Тогда
				Если МассивЭлементов.Найти(ВозвратТоваров) = Неопределено Тогда
					МассивЭлементов.Добавить(ВозвратТоваров);
				КонецЕсли;
			ИначеЕсли ВозвратТоваров.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия Тогда
				Если МассивЭлементов.Найти(ВозвратТоваров) = Неопределено Тогда
					МассивЭлементов.Добавить(ВозвратТоваров);
				КонецЕсли;
			ИначеЕсли Узел.Склады.Найти(ВозвратТоваров.СкладОрдер, "Склад") = Неопределено Тогда		//Это не тот склад
				Если МассивЭлементов.Найти(ВозвратТоваров) = Неопределено Тогда
					МассивЭлементов.Добавить(ВозвратТоваров);
				КонецЕсли;
			ИначеЕсли ВозвратТоваров.Дата < ДатаОтсечки Тогда
				Если МассивЭлементов.Найти(ВозвратТоваров) = Неопределено Тогда
					МассивЭлементов.Добавить(ВозвратТоваров);
				КонецЕсли;
			Иначе
				Если ВыгрузитьВозвратТоваров(Соединение, ВозвратТоваров, Узел) Тогда
					Если МассивЭлементов.Найти(ВозвратТоваров) = Неопределено Тогда
						МассивЭлементов.Добавить(ВозвратТоваров);
					КонецЕсли;
					МассивВыгруженных.Добавить(ВозвратТоваров);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//Очистим ссылки на объекты в узле
		Для Каждого ТекЭлемент Из МассивЭлементов Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
		КонецЦикла;
		//*************************************************************
		
		//*************************************************************
		//9. Перемещения товаров
		КодКонтрагента = "";
		Если НЕ ПустаяСтрока(КодКонтрагента) Тогда
			МассивЭлементов = Новый Массив;
			Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.ПеремещениеТоваров);
			Пока Выборка.Следующий() Цикл
				Попытка
					Перемещение = Выборка.Получить().Ссылка;
					Номер = Перемещение.Номер;
				Исключение
					Продолжить;
				КонецПопытки;
				
				Если Перемещение.Организация <> Узел.Организация Тогда
					Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
						МассивЭлементов.Добавить(Перемещение);
					КонецЕсли;
				ИначеЕсли Перемещение.Проведен = Ложь Тогда
					Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
						МассивЭлементов.Добавить(Перемещение);
					КонецЕсли;
				ИначеЕсли Перемещение.ВидОперации <> Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция Тогда
					Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
						МассивЭлементов.Добавить(Перемещение);
					КонецЕсли;
				ИначеЕсли Перемещение.СтатусССИС <> Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад Тогда
					Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
						МассивЭлементов.Добавить(Перемещение);
					КонецЕсли;
				ИначеЕсли Узел.Склады.Найти(Перемещение.СкладПолучатель, "Склад") = Неопределено Тогда		//Это не тот склад
					Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
						МассивЭлементов.Добавить(Перемещение);
					КонецЕсли;
				ИначеЕсли Перемещение.КорректировкаSolvo Тогда
					Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
						МассивЭлементов.Добавить(Перемещение);
					КонецЕсли;
				ИначеЕсли Перемещение.Дата < ДатаОтсечки Тогда
					Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
						МассивЭлементов.Добавить(Перемещение);
					КонецЕсли;
				Иначе
					Если ВыгрузитьПеремещение(Соединение, Перемещение, Узел, КодКонтрагента) Тогда
						Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
							МассивЭлементов.Добавить(Перемещение);
						КонецЕсли;
						МассивВыгруженных.Добавить(Перемещение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//Очистим ссылки на объекты в узле
			Для Каждого ТекЭлемент Из МассивЭлементов Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
			КонецЦикла;
		КонецЕсли;
		//**************************************************************
		
		//Проверим, документы поступления и перемещения, которые возможно "потерялись в Solvo"
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокВыгруженных", МассивВыгруженных);
		Запрос.УстановитьПараметр("Дата", ТекущаяДата()-86400);
		Запрос.УстановитьПараметр("СтатусПоступления", Перечисления.СП_СтатусыПоступленияТоваров.ПереданоНаСклад);
		Запрос.УстановитьПараметр("СтатусПеремещения", Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад);
		Запрос.УстановитьПараметр("Склады", Узел.Склады.ВыгрузитьКолонку("Склад"));
		Запрос.УстановитьПараметр("Организация", Узел.Организация);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		               |ГДЕ
		               |	НЕ ПоступлениеТоваровУслуг.Ссылка В (&СписокВыгруженных)
		               |	И ПоступлениеТоваровУслуг.Проведен = ИСТИНА
		               |	И ПоступлениеТоваровУслуг.Дата >= &Дата
		               |	И ПоступлениеТоваровУслуг.Организация = &Организация
		               |	И ПоступлениеТоваровУслуг.СтатусССИС = &СтатусПоступления
		               |	И ПоступлениеТоваровУслуг.СкладОрдер В(&Склады)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ПеремещениеТоваров.Ссылка
		               |ИЗ
		               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		               |ГДЕ
		               |	НЕ ПеремещениеТоваров.Ссылка В (&СписокВыгруженных)
		               |	И ПеремещениеТоваров.Проведен = ИСТИНА
		               |	И ПеремещениеТоваров.Дата >= &Дата
		               |	И ПеремещениеТоваров.Организация = &Организация
		               |	И ПеремещениеТоваров.СтатусССИС = &СтатусПеремещения
		               |	И ПеремещениеТоваров.СкладПолучатель В(&Склады)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Ссылка";
		ТаблицаЗаданий = Запрос.Выполнить().Выгрузить();
		ТаблицаЗаданий.Колонки.Добавить("ИД");
		Для Каждого ТекСтрока Из ТаблицаЗаданий Цикл
			ТекСтрока.ИД = СокрЛП(ТекСтрока.Ссылка.УникальныйИдентификатор());
		КонецЦикла;
		
		//Получим обработанные сегодня поступления товаров и услуг
		//СтрокаКоманды = "select status, sdid from incomings where created > '"+Формат(ТекущаяДата(),"ДФ=dd-MM-yyyy")+"'";
		СтрокаКоманды = "select status, sdid from incomings where created > to_date('"+Формат(ТекущаяДата()-86400,"ДФ='dd.MM.yyyy HH.mm.ss'")+"', 'DD.MM.YYYY HH24:MI:SS')";
		Рез = ВыполнитьЗапрос(Соединение, СтрокаКоманды,,,,Узел);
		Если Рез <> Неопределено Тогда
			Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
				ИД = СокрЛП(Рез.Fields("sdid").Value);
				Статус = СокрЛП(Рез.Fields("status").Value);
				Если ПустаяСтрока(Статус) Тогда
					Рез.MoveNext();
					Продолжить;
				КонецЕсли;
				
				ТабСтрока = ТаблицаЗаданий.Найти(ИД, "ИД");
				Если ТабСтрока <> Неопределено Тогда
					ТаблицаЗаданий.Удалить(ТабСтрока);		//Этот выгружен
				КонецЕсли;
				Рез.MoveNext();
			КонецЦикла;
			
			//Зафиксируем изменения для оставшихся в узле
			Для Каждого ТекСтрока Из ТаблицаЗаданий Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, ТекСтрока.Ссылка);
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ТекСтрока.Ссылка, "Повторно отмечен для выгрузки "+ТекСтрока.Ссылка);
			КонецЦикла;
		КонецЕсли;
		//*************************************************************
		
		//*****************************************************************
		//Загрузка данных из Solvo
		ОбработатьИзмененияПоЗаданиюНаСборку(Соединение, Узел);
		
		//ЗагрузитьУпаковки(Соединение, Узел);
		
		ОбработатьРезультатыПриемки(Соединение, Узел);
		
		//ЗагрузитьДополнительныеШтрихКоды(Соединение, Узел);
		
		ОтметитьНеобрабатываемыеПакеты(Соединение, Узел);
		
		//Конец загрузки данных из Solvo
		//*****************************************************************
		
		Соединение.Close();
		
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Завершен обмен данными с узлом "+Узел.Код);
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,, "Завершен обмен данными с Solvo");
КонецПроцедуры

//Проверяет и выгружает при необходимости справочник номенклатуры. Возвращает признак, что номенклатура выгрузилась удачно
Функция ВыгрузитьНоменклатуру(Соединение, Номенклатура, Узел, Выгружать = Ложь) 
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(Номенклатура.Код) И ПустаяСтрока(Номенклатура.Наименование) Тогда		//Объект удалён
		Возврат Истина;
	КонецЕсли;
	
	//Проверим, нужно записывать номенклатуру или просто добавлять
	ТекстЗапроса = "select sku_id from sku where sku.sku_id = ?";
	//Прочитаем данные из таблицы
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, СокрЛП(Номенклатура.Код),,,Узел);
	Если Рез = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Создавать = Истина;
	Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Тогда
		Создавать = Ложь;
		Если Выгружать = Ложь Тогда		//Номенклатура присутствует в базе Solvo, выгружать не нужно
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Обновляем справочник
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru)
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + СокрЛП(Номенклатура.Код));
	
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли; 
	
	//Сформируем текст пакета
	ЗаписьXML.ЗаписатьНачалоЭлемента("sku");
	ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
	Если Создавать Тогда
		ЗаписьXML.ЗаписатьАтрибут("action", "add");
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("action", "update");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("sku_id"	, СокрЛП(Номенклатура.Код));
	ЗаписьXML.ЗаписатьАтрибут("sku_code", СокрЛП(Номенклатура.Код));
	ЗаписьXML.ЗаписатьАтрибут("name"	, СокрЛП(Номенклатура.Наименование));
	
	Если НЕ ПустаяСтрока(Номенклатура.НаименованиеПолное) Тогда
		ЗаписьXML.ЗаписатьАтрибут("description", СокрЛП(Номенклатура.НаименованиеПолное));
	КонецЕсли;
	
	//Параметр, определяет каким образом Солво будет контролировать сроки годности, 0 - Не учитывать, 1 - По сроку годности, 2 - По дате окончания, 3 - По дате производства и дате окончания срока годности
	ЗаписьXML.ЗаписатьАтрибут("control_date", 0);
	
	//Срок годности товара в сутках, необходим, если “Учет даты” стоит  “По сроку годности”. Значение по умолчанию: 1
	//ЗаписьXML.ЗаписатьАтрибут("product_life", 1);
	
	//Параметр товара, указывающий на необходимость ввода партии товара для груза при приеме товара на склад:
	//•	f – Не вводить
	//•	t – Вводить
	//Значение по умолчанию: “f”
	//ЗаписьXML.ЗаписатьАтрибут("lot_capture_req", "f");
	
	//Штрихкод товара
	//ЗаписьXML.ЗаписатьАтрибут("upc", "");
	
	//Если ЗначениеЗаполнено(Номенклатура.ЕдиницаХраненияОстатков) Тогда
	//	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru)
	//	ЗаписьXML.ЗаписатьАтрибут("measure", СокрЛП(Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код));
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(Номенклатура.Производитель) Тогда
	//	ЗаписьXML.ЗаписатьАтрибут("producer", СокрЛП(Номенклатура.Производитель));
	//КонецЕсли;
	
	//ЗаписьXML.ЗаписатьАтрибут("lot_req", "f");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
		Возврат Истина;		
	КонецЕсли; 	
	//-- Spl_Апроф
	
	//5. Запишем данные в базу Solvo
	//Сформируем заголовок пакета
	ТекстЗапроса = "insert into from_host_header_message(ID, TYPE, status) values(?,?,?)";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, "sku", "C", Узел);
	Если Рез = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Номенклатура, "Не удалось добавить заголовок пакета");
		Возврат Ложь;
	КонецЕсли;
		
	//"Распилим" текст XML на строки (как задано в узле)
	ДлинаСтроки = МАКС(Узел.ДлинаСтроки, 100);	//На случай, если забыли
	ИсходнаяСтрока = ЗаписьXML.Закрыть();
	Позиция = 1;
	РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	СчСтрок = 0;
	Пока НЕ ПустаяСтрока(РезультирующаяСтрока) Цикл
		СчСтрок = СчСтрок + 1;
		ТекстЗапроса = "insert into xml_data_to_wms(ID, line, data) values(?, ?, ?)";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, СчСтрок, РезультирующаяСтрока, Узел);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Номенклатура, "Ошибка добавления данных пакета");
		КонецЕсли;
		
		Позиция = Позиция + ДлинаСтроки;
		РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

//Проверяет и выгружает при необходимости справочник единиц измерения. Возвращает индикатор удачного завершения
Функция ВыгрузитьЕдиницуИзмерения(Соединение, ЕдиницаИзмерения, Узел, Выгружать = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда		//Нет единицы измерения
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ЕдиницаИзмерения.Код) И ПустаяСтрока(ЕдиницаИзмерения.Наименование) Тогда		//Объект удалён
		Возврат Истина;
	КонецЕсли;
	
	//Если ЕдиницаИзмерения.КодSolvo = 0 Тогда		//Сформируем новый код единицы измерения
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//				   |	МАКСИМУМ(КлассификаторЕдиницИзмерения.КодSolvo) КАК КодSolvo
	//				   |ИЗ
	//				   |	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения";
	//	Результат = Запрос.Выполнить().Выбрать();
	//	СледующийКод = 26;
	//	Если Результат.Следующий() Тогда
	//		СледующийКод = МАКС(СледующийКод, Результат.КодSolvo);
	//	КонецЕсли;
	//	Объект = ЕдиницаИзмерения.ПолучитьОбъект();
	//	Объект.КодSolvo = СледующийКод+1;
	//	Объект.ОбменДанными.Загрузка = Истина;
	//	Объект.Записать();
	//КонецЕсли;
	
	//ТекстЗапроса = "select uom from measure_unit where measure_unit.uom = ?";
	////Прочитаем данные из таблицы
	//Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, СокрЛП(ЕдиницаИзмерения.КодSolvo),,,Узел);
	//Если Рез = Неопределено Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Создавать = Истина;
	//Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Тогда
	//	Создавать = Ложь;
	//	Если Выгружать = Ложь Тогда		//Номенклатура присутствует в базе Solvo, выгружать не нужно
	//		Возврат Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	//Обновляем справочник
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru)
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + Формат(ЕдиницаИзмерения.Код, "ЧГ=0"));
	
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//Сформируем текст пакета
	ЗаписьXML.ЗаписатьНачалоЭлемента("measure");
	ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
	//Если Создавать Тогда
	//	ЗаписьXML.ЗаписатьАтрибут("action", "add");
	//Иначе
	//	ЗаписьXML.ЗаписатьАтрибут("action", "update");
	//КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("action", "set");
	
	ЗаписьXML.ЗаписатьАтрибут("measureid", СокрЛП(ЕдиницаИзмерения.Код));
	ЗаписьXML.ЗаписатьАтрибут("short_name", СокрЛП(ЕдиницаИзмерения.Наименование));
	Если ПустаяСтрока(ЕдиницаИзмерения.НаименованиеПолное) Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", СокрЛП(ЕдиницаИзмерения.Наименование));
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("name", СокрЛП(ЕдиницаИзмерения.НаименованиеПолное));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
		Возврат Истина;		
	КонецЕсли; 	
	//-- Spl_Апроф
	
	//5. Запишем данные в базу Solvo
	//Сформируем заголовок пакета
	ТекстЗапроса = "insert into from_host_header_message(ID, TYPE, status) values(?,?,?)";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, "measure", "C", Узел);
	Если Рез = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ЕдиницаИзмерения, "Не удалось добавить заголовок пакета");
		Соединение.Close();
		Возврат Ложь;
	КонецЕсли;
	
	//"Распилим" текст XML на строки (как задано в узле)
	ДлинаСтроки = МАКС(Узел.ДлинаСтроки, 100);	//На случай, если забыли
	ИсходнаяСтрока = ЗаписьXML.Закрыть();
	Позиция = 1;
	РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	СчСтрок = 0;
	Пока НЕ ПустаяСтрока(РезультирующаяСтрока) Цикл
		СчСтрок = СчСтрок + 1;
		ТекстЗапроса = "insert into xml_data_to_wms(ID, line, data) values(?, ?, ?)";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, СчСтрок, РезультирующаяСтрока, Узел);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ЕдиницаИзмерения, "Ошибка добавления данных пакета");
		КонецЕсли;
		
		Позиция = Позиция + ДлинаСтроки;
		РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

//Проверяет и выгружает при необходимости справочник контрагентов. Возвращает индикатор удачного завершения
Функция ВыгрузитьКонтрагента(Соединение, Контрагент, Узел, Выгружать = Ложь)
	
	 Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(Контрагент.Код) И ПустаяСтрока(Контрагент.Наименование) Тогда		//Объект удалён
		Возврат Истина;
	КонецЕсли;
	
	//Проверим, нужно записывать контрагента или просто добавлять
	ТекстЗапроса = "select sdid from client where client.sdid = ?";
	//Прочитаем данные из таблицы
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, СокрЛП(Контрагент.Код),,,Узел);
	Если Рез = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Создавать = Истина;
	Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Тогда
		Создавать = Ложь;
		Если Выгружать = Ложь Тогда		//Номенклатура присутствует в базе Solvo, выгружать не нужно
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Обновляем справочник
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru)
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + Формат(Контрагент.Код, "ЧГ=0"));
	
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//Сформируем текст пакета
	ЗаписьXML.ЗаписатьНачалоЭлемента("client");
	ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
	Если Создавать Тогда
		ЗаписьXML.ЗаписатьАтрибут("action", "add");
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("action", "update");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("client_id", СокрЛП(Контрагент.Код));
	ЗаписьXML.ЗаписатьАтрибут("name", СокрЛП(Контрагент.Наименование));
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Вид,
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Контрагент
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид";
				   
	//Адрес
	Адрес = "";
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Адрес = СокрЛП(Результат.Представление);
	КонецЕсли;
	Если ПустаяСтрока(Адрес) Тогда
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Адрес = СокрЛП(Результат.Представление);
		КонецЕсли;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Адрес) Тогда
		ЗаписьXML.ЗаписатьАтрибут("address", Адрес);
	КонецЕсли;
	
	//Телефон
	Телефон = "";
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Телефон = СокрЛП(Результат.Представление);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Телефон) Тогда
		ЗаписьXML.ЗаписатьАтрибут("phone", ЛЕВ(Телефон, 30));
	КонецЕсли;
	
	//Факс
	Факс = "";
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Факс = СокрЛП(Результат.Представление);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Телефон) Тогда
		ЗаписьXML.ЗаписатьАтрибут("fax", Лев(Факс, 30));
	КонецЕсли;
	
	//Майл
	Майл = "";
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Майл = СокрЛП(Результат.Представление);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Майл) Тогда
		ЗаписьXML.ЗаписатьАтрибут("email", Майл);
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("is_holder", "f");
	ЗаписьXML.ЗаписатьАтрибут("is_customer", ?(Контрагент.Покупатель, "t", "f"));
	ЗаписьXML.ЗаписатьАтрибут("is_supplier", ?(Контрагент.Поставщик, "t", "f"));
	ЗаписьXML.ЗаписатьАтрибут("is_carrier", "f");
	ЗаписьXML.ЗаписатьАтрибут("comments", Лев(Контрагент.Комментарий, 255));
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
		Возврат Истина;		
	КонецЕсли; 	
	//-- Spl_Апроф
	
	//5. Запишем данные в базу Solvo
	//Сформируем заголовок пакета
	ТекстЗапроса = "insert into from_host_header_message(ID, TYPE, status) values(?,?,?)";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, "client", "C", Узел);
	Если Рез = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Контрагент, "Не удалось добавить заголовок пакета");
		Соединение.Close();
		Возврат Ложь;
	КонецЕсли;
	
	//"Распилим" текст XML на строки (как задано в узле)
	ДлинаСтроки = МАКС(Узел.ДлинаСтроки, 100);	//На случай, если забыли
	ИсходнаяСтрока = ЗаписьXML.Закрыть();
	Позиция = 1;
	РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	СчСтрок = 0;
	Пока НЕ ПустаяСтрока(РезультирующаяСтрока) Цикл
		СчСтрок = СчСтрок + 1;
		ТекстЗапроса = "insert into xml_data_to_wms(ID, line, data) values(?, ?, ?)";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, СчСтрок, РезультирующаяСтрока, Узел);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Контрагент, "Ошибка добавления данных пакета");
		КонецЕсли;
		
		Позиция = Позиция + ДлинаСтроки;
		РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

//Производит выгрузку документа "Задание на подбор"
Функция ВыгрузитьЗаданиеНаПодбор(Соединение, ЗаданиеНаПодбор, Узел)
	
	Если НЕ ЗначениеЗаполнено(ЗаданиеНаПодбор) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ЗаданиеНаПодбор.Номер) И (ЗаданиеНаПодбор.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//1.1 Проверим наличие номенклатуры
	Для Каждого ТекСтрока Из ЗаданиеНаПодбор.Товары Цикл
		Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Отключаем т.к. у нас вместо контрагента может быть склад, при внутреннем перемещении
	//1.2 Проверим наличие контрагента
	//Если ЗначениеЗаполнено(ЗаданиеНаПодбор.Контрагент) Тогда
	//	Если ВыгрузитьКонтрагента(Соединение, ЗаданиеНаПодбор.Контрагент, Узел) = Ложь Тогда
	//		Возврат Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	
	//2. Получим номер пакета
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//3. Проверим наличие задания
	ТекстЗапроса = "select SDID from orders where orders.sdid = '"+СокрЛП(ЗаданиеНаПодбор.УникальныйИдентификатор())+"'";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса,,,,Узел);
	Если Рез = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ЗаданиеНаПодбор, "Не удалось добавить заголовок пакета");
		Соединение.Close();
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 1 Тогда
		Создавать = Истина;
		Если ЗаданиеНаПодбор.Товары.Количество() = 0 Тогда		//++ FDI 19.06.12 не выгружаем пустые 
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ЗаданиеНаПодбор, "Документ пустой, выгрузка не произведена");
			Возврат Истина;
		КонецЕсли;
	Иначе
		Создавать = Ложь;
	КонецЕсли;
	
	//4. Сформируем заголовок пакета
	ТекстЗапроса = "insert into from_host_header_message(ID, TYPE, status) values(?,?,?)";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, "order", "C", Узел);
	Если Рез = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//5. Получим строки заказа
	МассивСтрок = Новый Массив;
	ТекстЗапроса = "select line from order_details where sdid = '"+СокрЛП(ЗаданиеНаПодбор.УникальныйИдентификатор())+"'";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса,,,,Узел);
	Если Рез <> Неопределено Тогда
		Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
			НомерСтроки = Рез.Fields("line").value;
			Если МассивСтрок.Найти(НомерСтроки) = Неопределено Тогда
				МассивСтрок.Добавить(НомерСтроки);
			КонецЕсли;
			Рез.MoveNext(); 
		КонецЦикла;
	КонецЕсли;
	
	//6. Сформируем строку данных
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru)	
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + Формат(ЗаданиеНаПодбор.УникальныйИдентификатор(), "ЧГ=0"));	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("order");
	ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
	Если Создавать Тогда
		ЗаписьXML.ЗаписатьАтрибут("action", "add");
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("action", "update");
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("order_id", СокрЛП(ЗаданиеНаПодбор.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьАтрибут("display_name", ЛЕВ(СокрЛП(ЗаданиеНаПодбор.Номер),32));
	ЗаписьXML.ЗаписатьАтрибут("auto_start", "f");
	ЗаписьXML.ЗаписатьАтрибут("auto_activate", "f");
	
	//Номер рейса и упаковка
	НомерРейса = "";
	Упаковка = "";
	ДатаОтгрузки = ЗаданиеНаПодбор.Заказ.ДатаОтгрузки;
	ТипУпаковки = "";
		
	//Тип задания на подбор
	//Если ТипЗнч(ЗаданиеНаПодбор.Сделка) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
	//	ЗаписьXML.ЗаписатьАтрибут("type", "G");
	//ИначеЕсли ТипЗнч(ЗаданиеНаПодбор.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	//	ЗаписьXML.ЗаписатьАтрибут("client_id", СокрЛП(ЗаданиеНаПодбор.Контрагент.Код));
	//	Если ЗаданиеНаПодбор.Контрагент.СетевойКлиент Тогда
	//		ЗаписьXML.ЗаписатьАтрибут("type", "C");
	//	ИначеЕсли ЗаданиеНаПодбор.ТипЗаданияНаСборку = Перечисления.ФБ_ТипЗаданияНаСборку.СамовывозКомплектация Тогда
	//		ЗаписьXML.ЗаписатьАтрибут("type", "D");
	//	ИначеЕсли ЗаданиеНаПодбор.ТипЗаданияНаСборку = Перечисления.ФБ_ТипЗаданияНаСборку.СамовывозПоПрибытию Тогда
	//		ЗаписьXML.ЗаписатьАтрибут("type", "E");
	//	ИначеЕсли ПустаяСтрока(ТипУпаковки) Тогда
	//		ЗаписьXML.ЗаписатьАтрибут("type", "A");
	//	Иначе
	//		ЗаписьXML.ЗаписатьАтрибут("type", ТипУпаковки);
	//	КонецЕсли;
	//КонецЕсли;
	
	Если НЕ ПустаяСтрока(НомерРейса) Тогда
		ЗаписьXML.ЗаписатьАтрибут("car_num", СокрЛП(НомерРейса));
	КонецЕсли;
	
	Если ДатаОтгрузки <> Дата(1,1,1) Тогда
		ЗаписьXML.ЗаписатьАтрибут("date_to_ship", Формат(ДатаОтгрузки, "ДФ = 'dd-MM-yyyy HH:mm'"));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Упаковка) Тогда
		ЗаписьXML.ЗаписатьАтрибут("shipping_in_pallet", ЛЕВ(Упаковка,1));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("holder_id", "H1");
	ЗаписьXML.ЗаписатьАтрибут("responsible", СокрЛП(ЗаданиеНаПодбор.Ответственный));
	ЗаписьXML.ЗаписатьАтрибут("comments", Лев(ЗаданиеНаПодбор.Комментарий,100));
	
	//7. Добавим строки
	НомерСтроки = 0;
	ЕстьДанные = Ложь;
	Для Каждого ТекСтрока Из ЗаданиеНаПодбор.Товары Цикл
		
		//++ Приводим количество к базовой единице измерения 
		Количество = ТекСтрока.Количество * ?(ТекСтрока.Коэффициент = 0, 1, ТекСтрока.Коэффициент);
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьДанные = Истина; 
		
		НомерСтроки = НомерСтроки + 1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("order_detail");
		ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		Поз = МассивСтрок.Найти(НомерСтроки);
		Если Поз = Неопределено Тогда
			ЗаписьXML.ЗаписатьАтрибут("action", "add");
		Иначе
			ЗаписьXML.ЗаписатьАтрибут("action", "update");
			МассивСтрок.Удалить(Поз);
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("order_id", СокрЛП(ЗаданиеНаПодбор.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьАтрибут("line", Формат(НомерСтроки, "ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ТекСтрока.Номенклатура.Код));
		ЗаписьXML.ЗаписатьАтрибут("qty", Формат(Количество, "ЧЦ=15; ЧДЦ=0; ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("uom", Строка(?(ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения), ТекСтрока.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код,ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код)));
		ЗаписьXML.ЗаписатьАтрибут("holder_id", "H1");
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	//8. Удалим неиспользованные строки
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("order_detail");
		ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("action", "delete");
		ЗаписьXML.ЗаписатьАтрибут("order_id", СокрЛП(ЗаданиеНаПодбор.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьАтрибут("line", НомерСтроки);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
		Возврат Истина;		
	КонецЕсли; 	
	//-- Spl_Апроф
		
	//9. "Распилим" текст XML на строки (как задано в узле) и запишем его в базу данных
	ДлинаСтроки = МАКС(Узел.ДлинаСтроки, 300);	//На случай, если забыли
	ИсходнаяСтрока = ЗаписьXML.Закрыть();
	Позиция = 1;
	РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	СчСтрок = 0;
	Пока НЕ ПустаяСтрока(РезультирующаяСтрока) Цикл
		СчСтрок = СчСтрок + 1;
		ТекстЗапроса = "insert into xml_data_to_wms(ID, line, data) values(?, ?, ?)";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, СчСтрок, РезультирующаяСтрока, Узел);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ЗаданиеНаПодбор, "Ошибка добавления данных пакета");
		КонецЕсли;
		
		Позиция = Позиция + ДлинаСтроки;
		РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	КонецЦикла;
	
	//++ FDI 19.06.12 Если документ пустой, то добавим пакет с командой удаления
	Если НЕ ЕстьДанные Тогда
		
		НомерПакета = 0;
		Если НЕ Узел.ТестоваяВыгрузка Тогда
			
			НомерПакета = ПолучитьНомерПакета(Соединение);
			
			Если НомерПакета = Неопределено Тогда
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
				Соединение.Close();			
				Возврат Ложь;
			КонецЕсли;		
			
		КонецЕсли;
		
		ТекстЗапроса = "insert into from_host_header_message(ID, TYPE, status) values(?,?,?)";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, "order", "C", Узел);
		Если Рез = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		//Создадим данные пакета
		//ЗаписьXML = Новый ЗаписьXML;
		//ЗаписьXML.УстановитьСтроку("windows-1251");		
		ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + Формат(ЗаданиеНаПодбор.УникальныйИдентификатор(), "ЧГ=0"));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("order");
		ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("action", "delete");
		ЗаписьXML.ЗаписатьАтрибут("order_id", СокрЛП(ЗаданиеНаПодбор.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьАтрибут("display_name", ЛЕВ(СокрЛП(ЗаданиеНаПодбор.Номер),32));
		ЗаписьXML.ЗаписатьАтрибут("holder_id", "H1");
		ЗаписьXML.ЗаписатьАтрибут("responsible", СокрЛП(ЗаданиеНаПодбор.Ответственный));
		ЗаписьXML.ЗаписатьАтрибут("comments", Лев(ЗаданиеНаПодбор.Комментарий,100));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		//"Распилим" текст XML на строки (как задано в узле) и запишем его в базу данных
		ДлинаСтроки = МАКС(Узел.ДлинаСтроки, 300);	//На случай, если забыли
		ИсходнаяСтрока = ЗаписьXML.Закрыть();
		Позиция = 1;
		РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
		СчСтрок = 0;
		Пока НЕ ПустаяСтрока(РезультирующаяСтрока) Цикл
			СчСтрок = СчСтрок + 1;
			ТекстЗапроса = "insert into xml_data_to_wms(ID, line, data) values(?, ?, ?)";
			Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, СчСтрок, РезультирующаяСтрока, Узел);
			
			Если Рез = Неопределено Тогда
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ЗаданиеНаПодбор, "Ошибка добавления данных пакета");
			КонецЕсли;
			
			Позиция = Позиция + ДлинаСтроки;
			РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
		КонецЦикла;
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ЗаданиеНаПодбор, "Документ пустой, отправлена команда удаления");
	КонецЕсли;
	//-- FDI 19.06.12 
	
	Возврат Истина;
КонецФункции

//Производит загрузку из Solvo обработанных заданий на подбор
Процедура ОбработатьИзмененияПоЗаданиюНаСборку(Соединение, Узел)
	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Начало чтения заданий на подбор из базы Solvo");
	
	//1. Получим необработанные пакеты
	ТекстЗапроса = "select * from packets_to_host where status = ? and TYPE = ? order by ID";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "C", "order_status_changed",,Узел);
	Если Рез = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПакетов = Новый ТаблицаЗначений;
	ТаблицаПакетов.Колонки.Добавить("НомерПакета");
	ТаблицаПакетов.Колонки.Добавить("Данные");

	Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
		НовСтрока = ТаблицаПакетов.Добавить();
		НовСтрока.НомерПакета = Рез.Fields("PACK_ID").Value;
		НовСтрока.Данные = "";
		Рез.MoveNext(); 
	КонецЦикла;
	
	//2. Получим данные необработанных пакетов
	ТекстЗапроса = "select * from xml_data_to_host where ID = ? order by ID, line";
	Для Каждого ТекСтрока Из ТаблицаПакетов Цикл
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, ТекСтрока.НомерПакета,,,Узел);
		Если Рез <> Неопределено Тогда
			Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
				ТекСтрока.Данные = ТекСтрока.Данные + Рез.Fields("DATA").Value;
				Рез.MoveNext(); 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	МассивОбработанныхПакетов = Новый Массив;
	МассивОшибочныхПакетов = Новый Массив;
	//3. Произведём чтение данных пакетов
	Для Каждого ДанныеПакета Из ТаблицаПакетов Цикл
		НомерПакета = ДанныеПакета.НомерПакета;
		Данные = ДанныеПакета.Данные;
		
		Если ПустаяСтрока(Данные) Тогда
			МассивОшибочныхПакетов.Добавить(НомерПакета);
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Пакет № "+НомерПакета+" не имеет данных");
			Продолжить;
		КонецЕсли;
		
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.УстановитьСтроку(Данные);
		СтрокаОшибок = "";
		
		ИдЗаказа = "";
		НовыйСтатус = "";
		ТаблицаИзменений = Новый ТаблицаЗначений;
		ТаблицаИзменений.Колонки.Добавить("Номенклатура");
		ТаблицаИзменений.Колонки.Добавить("Количество");
		
		ЕстьОшибки = Ложь;
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеХМЛ.Имя = "order_status_changed" Тогда						//Получим статус изменений
					НовыйСтатус = ЧтениеХМЛ.ПолучитьАтрибут("new_status");
					ИДЗаказа = ЧтениеХМЛ.ПолучитьАтрибут("order_id");
				ИначеЕсли ЧтениеХМЛ.Имя = "order_status_changed_detail" Тогда
					КодНоменклатуры = ЧтениеХМЛ.ЗначениеАтрибута("sku_id");
					НомерСтроки = ЧтениеХМЛ.ЗначениеАтрибута("line");
					Количество = Число(ЧтениеХМЛ.ЗначениеАтрибута("qty"));
					Если КодНоменклатуры <> Неопределено Тогда							//Получим таблицу изменений
						Номенклатура = Справочники.Номенклатура.НайтиПоКоду(КодНоменклатуры);
						Если ЗначениеЗаполнено(Номенклатура) Тогда
							НовСтрока = ТаблицаИзменений.Добавить();
							НовСтрока.Номенклатура = Номенклатура;
							НовСтрока.Количество = Число(Количество);
						Иначе
							СтрокаОшибок = СтрокаОшибок + Символы.ПС + "В строке "+НомерСтроки+" не сопоставлена номенклатура "+КодНоменклатуры;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СоответствиеСтатусов = Новый Соответствие;
		//R	Готов	Нет	Да
		//R	Подготовка к планированию	Нет	Нет
		//A	Планируется	Нет	Нет
		//T	Создание ЛО	Нет 	Нет
		//G	Поиск места для сбора заказов	Нет	Нет
		//L	Спланирован	Нет	Нет
		//P	В работе	Нет	Нет
		//S	Приостановлен	Нет	Нет
		//D	Собран	Нет	Нет
		//p	Упаковка	Нет	Нет
		//q	Упакован	Нет	Нет
		//X	Готов к отгрузке	Да 	Нет
		//-	Погрузка	Нет	Нет
		//Y	Погружен	Нет	Нет
		//+	Отгружен	Да	Нет
		//С	Отмена	Нет	Нет
		СоответствиеСтатусов.Вставить("R", Перечисления.ФБ_СтатусыЗаданияНаСборку.ПереданоНаСклад);
		СоответствиеСтатусов.Вставить("A", Перечисления.ФБ_СтатусыЗаданияНаСборку.ПереданоНаСклад);
		СоответствиеСтатусов.Вставить("T", Перечисления.ФБ_СтатусыЗаданияНаСборку.ОтобранНаКомплектацию);
		СоответствиеСтатусов.Вставить("G", Перечисления.ФБ_СтатусыЗаданияНаСборку.Сборка);
		СоответствиеСтатусов.Вставить("L", Перечисления.ФБ_СтатусыЗаданияНаСборку.Сборка);
		СоответствиеСтатусов.Вставить("P", Перечисления.ФБ_СтатусыЗаданияНаСборку.Сборка);
		СоответствиеСтатусов.Вставить("S", Перечисления.ФБ_СтатусыЗаданияНаСборку.Сборка);
		СоответствиеСтатусов.Вставить("D", Перечисления.ФБ_СтатусыЗаданияНаСборку.Сборка);
		СоответствиеСтатусов.Вставить("p", Перечисления.ФБ_СтатусыЗаданияНаСборку.Сборка);
		СоответствиеСтатусов.Вставить("q", Перечисления.ФБ_СтатусыЗаданияНаСборку.Сборка);
		СоответствиеСтатусов.Вставить("X", Перечисления.ФБ_СтатусыЗаданияНаСборку.ЗавершенаКомплектация);
		СоответствиеСтатусов.Вставить("-", Перечисления.ФБ_СтатусыЗаданияНаСборку.ЗавершенаКомплектация);
		СоответствиеСтатусов.Вставить("Y", Перечисления.ФБ_СтатусыЗаданияНаСборку.ОтгруженТовар);
		СоответствиеСтатусов.Вставить("+", Перечисления.ФБ_СтатусыЗаданияНаСборку.ОтгруженТовар);
		СоответствиеСтатусов.Вставить("С", Перечисления.ФБ_СтатусыЗаданияНаСборку.Разукомплектован);
		
		//Ищем задание на подбор
		Попытка
			Документ = Документы.СП_ЗаданиеНаПодбор.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдЗаказа)).ПолучитьОбъект();
			Если ТипЗнч(Документ) <> Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
				МассивОшибочныхПакетов.Добавить(НомерПакета);
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Не найден документ по идентификатору """+ИдЗаказа+"""");
				Продолжить;
			КонецЕсли;
		Исключение
			МассивОшибочныхПакетов.Добавить(НомерПакета);
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Не найден документ по идентификатору """+ИдЗаказа+"""");
			Продолжить;
		КонецПопытки;
		
		Если ПустаяСтрока(Документ.Номер) И Документ.Дата = Дата(1,1,1) Тогда		//Такого документа нет
			МассивОшибочныхПакетов.Добавить(НомерПакета);
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Не найден документ по идентификатору """+ИдЗаказа+"""");
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаОшибок) Тогда
			#Если Клиент Тогда
				Сообщить("Документ "+Документ.Номер+" от "+Документ.Дата+" загружен с ошибками "+СтрокаОшибок);
			#КонецЕсли
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Документ "+Документ.Номер+" от "+Документ.Дата+" загружен с ошибками "+СтрокаОшибок);
		КонецЕсли;
		
		//Документ со статусом "99 Разукомплектован" в движениях не участвует
		//Если Документ.СтатусЗаказа = Перечисления.ФБ_СтатусыЗаданияНаСборку.Разукомплектован Тогда
		//	МассивОшибочныхПакетов.Добавить(НомерПакета);
		//	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Документ.Ссылка, "Попытка присвоить статус '"+НовыйСтатус+"' разукомплектованному документу");
		//	Продолжить;
		//КонецЕсли;
		
		СтатусЗаказа = СоответствиеСтатусов.Получить(НовыйСтатус);
		Если ЗначениеЗаполнено(СтатусЗаказа) И Документ.ПоследнийПолученныйПакет <= НомерПакета Тогда
			Документ.СтатусЗаказа = СтатусЗаказа;
		КонецЕсли;
		
		Если НовыйСтатус = "X" ИЛИ НовыйСтатус = "+" Тогда		//Вносим фактические значения в документ
			ТаблицаИзменений.Свернуть("Номенклатура", "Количество");
			Для Каждого ТекСтрока Из Документ.Товары Цикл
				ТекСтрока.КоличествоФакт = 0;
				ТабСтрока = ТаблицаИзменений.Найти(ТекСтрока.Номенклатура, "Номенклатура");
				Если ТабСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				//++ FDI 06.06.12 Приводим количество из базовой единицы измерения
				КоличествоФакт = ТабСтрока.Количество/?(ТекСтрока.Коэффициент = 0, 1, ТекСтрока.Коэффициент);
				Если ТекСтрока.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.ВесовойТовар = Истина Тогда
					ТекСтрока.КоличествоФакт = КоличествоФакт;
					ТабСтрока.Количество = 0;
				Иначе
					ТекСтрока.КоличествоФакт = МАКС(0, МИН(КоличествоФакт, ТекСтрока.Количество));
					ТабСтрока.Количество = ТабСтрока.Количество - ?(ТекСтрока.Коэффициент = 0, 1, ТекСтрока.Коэффициент);
				КонецЕсли;
				//-- FDI 06.06.12 
			КонецЦикла;
			Документ.ПоследнийПолученныйПакет = НомерПакета;
		Иначе
			Если Документ.ПоследнийПолученныйПакет > НомерПакета Тогда
				МассивОшибочныхПакетов.Добавить(НомерПакета);
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Документ.Ссылка, "Номер обрабатываемого пакета "+НомерПакета+" меньше ранее обработанного: "+Документ.ПоследнийПолученныйПакет);
				Продолжить;
			Иначе
				Документ.ПоследнийПолученныйПакет = НомерПакета;
			КонецЕсли;
		КонецЕсли;
		
		Документ.ДополнительныеСвойства.Вставить("ЗагрузкаИзСолво", Истина);
		
		Если Документ.ПометкаУдаления Тогда
			Документ.ПометкаУдаления = Ложь;
		КонецЕсли;
		
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,,Узел, "Документ "+Документ.Номер+" от "+Документ.Дата+" не записан: "+ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		МассивОбработанныхПакетов.Добавить(НомерПакета);
	КонецЦикла;
	
	//4. Отметим обработанные пакеты
	ТекстЗапроса = "update packets_to_host set status = ? where ID = ?";
	Для Каждого НомерПакета Из МассивОбработанныхПакетов Цикл
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "S", НомерПакета,,Узел);
	КонецЦикла;
	
	Для Каждого НомерПакета Из МассивОшибочныхПакетов Цикл
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "E", НомерПакета,,Узел);
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Завершено чтение заданий на подбор."+Символы.ПС+"Принятых пакетов: "+Строка(МассивОбработанныхПакетов.Количество())+Символы.ПС+"Ошибочных пакетов: "+Строка(МассивОшибочныхПакетов.Количество()));
КонецПроцедуры

//Загружает данные по упаковкам товаров
Процедура ЗагрузитьУпаковки(Соединение, Узел)
	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Начало чтения упаковок из базы Solvo");
	
	//1. Получим необработанные пакеты
	ТекстЗапроса = "select * from packets_to_host where status = ? and TYPE = ? order by ID";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "C", "pack",,Узел);
	Если Рез = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПакетов = Новый ТаблицаЗначений;
	ТаблицаПакетов.Колонки.Добавить("НомерПакета");
	ТаблицаПакетов.Колонки.Добавить("Данные");

	Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
		НовСтрока = ТаблицаПакетов.Добавить();
		НовСтрока.НомерПакета = Рез.Fields("PACK_ID").Value;
		НовСтрока.Данные = "";
		Рез.MoveNext(); 
	КонецЦикла;
	
	//2. Получим данные необработанных пакетов
	ТекстЗапроса = "select * from xml_data_to_host where ID = ? order by ID, line";
	Для Каждого ТекСтрока Из ТаблицаПакетов Цикл
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, ТекСтрока.НомерПакета,,,Узел);
		Если Рез <> Неопределено Тогда
			Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
				ТекСтрока.Данные = ТекСтрока.Данные + Рез.Fields("DATA").Value;
				Рез.MoveNext(); 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//3. Произведём чтение данных пакетов
	МассивОбработанныхПакетов = Новый Массив;
	ОшибочныеПакеты = Новый Соответствие;
	Для Каждого ДанныеПакета Из ТаблицаПакетов Цикл
		НомерПакета = ДанныеПакета.НомерПакета;
		Данные = ДанныеПакета.Данные;
		
		Если ПустаяСтрока(Данные) Тогда
			ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package does not have data (пакет не имеет данных)");
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Пакет № "+НомерПакета+" не имеет данных");
			Продолжить;
		КонецЕсли;
		
		//Произведём чтение пакета
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.УстановитьСтроку(Данные);
		ПакетОбработан = Ложь;
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеХМЛ.Имя = "pack" Тогда
					Код = ПолучитьЧисло(ЧтениеХМЛ.ПолучитьАтрибут("ID"));				//Код единицы измерения
					Если Код = 0 Тогда
						ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Do not set the code (не задан код)");
						Продолжить;
					КонецЕсли;
					
					КодНоменклатуры = СокрЛП(ЧтениеХМЛ.ПолучитьАтрибут("sku_id"));			//Код номенклатуры
					Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(КодНоменклатуры));
					Если Номенклатура.Пустая() Тогда
						ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Item not found (не найдена номенклатура) "+КодНоменклатуры);
						ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Не найдена номенклатура "+КодНоменклатуры);
						Продолжить;
					КонецЕсли;
					
					Наименование = СокрЛП(ЧтениеХМЛ.ПолучитьАтрибут("description"));		//Наименование
					ТипУпаковки = ЧтениеХМЛ.ПолучитьАтрибут("ctn_type");					//unit – единичная упаковка, carton – коробочная упаковка, pallet – паллетная упаковка

					Коэффициент = ПолучитьЧисло(ЧтениеХМЛ.ПолучитьАтрибут("base_units"));	//Коэффициент
					Ширина = ПолучитьЧисло(ЧтениеХМЛ.ПолучитьАтрибут("width"));             //Ширина
					Длина = ПолучитьЧисло(ЧтениеХМЛ.ПолучитьАтрибут("length"));				//Длина
					Высота = ПолучитьЧисло(ЧтениеХМЛ.ПолучитьАтрибут("height"));			//Высота
					ВесНетто = ПолучитьЧисло(ЧтениеХМЛ.ПолучитьАтрибут("weight"));			//Вес упаковки
					ВесБрутто = ПолучитьЧисло(ЧтениеХМЛ.ПолучитьАтрибут("weight_brutto"));
					
					//Получим данные по этой упаковке
					ТекстЗапроса = "select * from MC_CODE_INFO where id = ?";
					Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, Код,,,Узел);
					Если Рез = Неопределено Тогда
						ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "No data were found on the packaging (не найдены данные по упаковке) "+Код+" Solvo");
						ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Не найдены данные по упаковке "+Код+" в базе Solvo");
						Продолжить;
					КонецЕсли;
					
					Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Тогда
						КодКлассификатора = Рез.Fields("MEASURE_UNIT").Value;
						ШтрихКод = Рез.Fields("BARCODE").Value;
						ОсновнойШтрихКод = (нрег(Рез.Fields("IS_MAIN").Value)="t");
						Транспортная = (нрег(Рез.Fields("IS_SHIPABLE").Value)="t");
					Иначе
						ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "No data were found on the packaging (не найдены данные по упаковке) "+Код+" Solvo");
						ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Не найдены данные по упаковке "+Код+" в базе Solvo");
						Продолжить;
					КонецЕсли;
					
					ЕдиницаПоКлассификатору = НайтиЕдиницуПоКлассификатору(КодКлассификатора);
					
					//Попробуем найти единицу измерения
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
					Запрос.УстановитьПараметр("Код", Код);
					Запрос.УстановитьПараметр("Коэффициент", Коэффициент);
					Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору", ЕдиницаПоКлассификатору);
					Запрос.Текст = "ВЫБРАТЬ
					               |	ЕдиницыИзмерения.Ссылка КАК Ссылка,
					               |	0 КАК Порядок
					               |ИЗ
					               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
					               |ГДЕ
					               |	ЕдиницыИзмерения.Владелец = &Номенклатура
					               |	И ЕдиницыИзмерения.КодСолво = &Код
					               |
					               |ОБЪЕДИНИТЬ ВСЕ
					               |
					               |ВЫБРАТЬ
					               |	ЕдиницыИзмерения.Ссылка,
					               |	1
					               |ИЗ
					               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
					               |ГДЕ
					               |	ЕдиницыИзмерения.Владелец = &Номенклатура
					               |	И ЕдиницыИзмерения.КодСолво = 0
					               |	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору
					               |	И ЕдиницыИзмерения.Коэффициент = &Коэффициент
					               |
					               |УПОРЯДОЧИТЬ ПО
					               |	Порядок,
					               |	Ссылка";
					Результат = Запрос.Выполнить().Выбрать();
					Если Результат.Следующий() Тогда
						Объект = Результат.Ссылка.ПолучитьОбъект();
						Если Объект.КодСолво = 0 Тогда
							Объект.КодСолво = Код;
						КонецЕсли;
					Иначе
						Объект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
						Объект.КодСолво = Код;
						Объект.Владелец = Номенклатура;
					КонецЕсли;
					
					Имя = Наименование;
					
					//Сформируем наименование по правилам:
					Если нрег(ТипУпаковки) = "unit" Тогда
						Наименование = ?(ЗначениеЗаполнено(ЕдиницаПоКлассификатору), Врег(Лев(ЕдиницаПоКлассификатору.Наименование,1))+СРЕД(ЕдиницаПоКлассификатору.Наименование,2), "Шт");
					ИначеЕсли нрег(ТипУпаковки) = "carton" Тогда
						Наименование = "Упак. ("+Формат(МАКС(Коэффициент,1),"ЧГ=0")+")";
					ИначеЕсли нрег(ТипУпаковки) = "pallet" Тогда
						Наименование = "Паллета ("+Формат(МАКС(Коэффициент,1),"ЧГ=0")+")";
					КонецЕсли;
					
					Объект.Наименование = Наименование;
					Объект.ЕдиницаПоКлассификатору = ЕдиницаПоКлассификатору;
					Объект.Коэффициент = МАКС(Коэффициент, 1);
					Объект.ДлинаЕи = Длина;
					Объект.ШиринаЕи = Ширина;
					Объект.ВысотаЕи = Высота;
					Объект.Вес = ?(ВесБрутто>ВесНетто, ВесБрутто-ВесНетто, ВесНетто);
					Объект.ТранспортнаяУпаковка = Транспортная;
					Объект.КодСолво = Код;
					Объект.НаименованиеСолво = Имя;
					Объект.ВесБрутто = ВесБрутто;
					Объект.Объем = Длина*Ширина*Высота;
					
					Попытка
						Объект.Записать();
					Исключение
						ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Ошибка записи упаковки:"+Символы.ПС+ОписаниеОшибки());						
						Продолжить;
					КонецПопытки;
					
					//Попробуем записать штрихкод
					Если УстановитьШтрихКод(Номенклатура, Объект.Ссылка, ШтрихКод, "", ОсновнойШтрихКод) = Ложь Тогда
						ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Штрихкод '"+ШтрихКод+"' не записан");
					КонецЕсли;
					
					//Запишем в номенклатуру единицу мест и расчета
					ЕдиницаМест = Номенклатура.ЕдиницаИзмеренияМест;
					ЕдиницаМестИзменена = Ложь;
					Если НЕ ЗначениеЗаполнено(ЕдиницаМест) ИЛИ Номенклатура.ЕдиницаМестЗаполненаСолво Тогда
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
						Запрос.Текст = "ВЫБРАТЬ
						               |	ЕдиницыИзмерения.Ссылка,
						               |	ВЫБОР
						               |		КОГДА ЕдиницыИзмерения.КодСолво = 0
						               |			ТОГДА 1
						               |		ИНАЧЕ 0
						               |	КОНЕЦ КАК Порядок
						               |ИЗ
						               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
						               |ГДЕ
						               |	ЕдиницыИзмерения.Владелец = &Номенклатура
						               |	И ЕдиницыИзмерения.Ссылка <> ЕдиницыИзмерения.Владелец.ЕдиницаХраненияОстатков
						               |	И ЕдиницыИзмерения.Коэффициент > ЕдиницыИзмерения.Владелец.ЕдиницаХраненияОстатков.Коэффициент
						               |	И ЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ
						               |	И НЕ ЕдиницыИзмерения.Наименование ПОДОБНО ""%Паллет%""
						               |
						               |УПОРЯДОЧИТЬ ПО
						               |	ЕдиницыИзмерения.Коэффициент,
						               |	Порядок";
						Результат = Запрос.Выполнить().Выбрать();
						Если Результат.Следующий() Тогда
							Если Результат.Ссылка <> ЕдиницаМест Тогда
								ЕдиницаМест = Результат.Ссылка;
								ЕдиницаМестИзменена = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					ЕдиницаРасчетов = Номенклатура.ЕдиницаДляРассчетаВесовыхПоказателей;
					ЕдиницаРасчетовИзменена = Ложь;
					Если НЕ ЗначениеЗаполнено(ЕдиницаРасчетов) ИЛИ Номенклатура.ЕдиницаДляРасчетаЗаполненаСолво Тогда
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
						Запрос.Текст = "ВЫБРАТЬ
						               |	ЕдиницыИзмерения.Ссылка,
						               |	ВЫБОР
						               |		КОГДА ЕдиницыИзмерения.КодСолво = 0
						               |			ТОГДА 1
						               |		ИНАЧЕ 0
						               |	КОНЕЦ КАК Порядок
						               |ИЗ
						               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
						               |ГДЕ
						               |	ЕдиницыИзмерения.Владелец = &Номенклатура
						               |	И ЕдиницыИзмерения.Ссылка <> ЕдиницыИзмерения.Владелец.ЕдиницаХраненияОстатков
						               |	И ЕдиницыИзмерения.Коэффициент > ЕдиницыИзмерения.Владелец.ЕдиницаХраненияОстатков.Коэффициент
						               |	И ЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ
						               |	И НЕ ЕдиницыИзмерения.Наименование ПОДОБНО ""%Паллет%""
						               |
						               |УПОРЯДОЧИТЬ ПО
						               |	ЕдиницыИзмерения.Коэффициент УБЫВ,
						               |	Порядок";
						Результат = Запрос.Выполнить().Выбрать();
						Если Результат.Следующий() Тогда
							Если Результат.Ссылка <> ЕдиницаРасчетов Тогда
								ЕдиницаРасчетов = Результат.Ссылка;
								ЕдиницаРасчетовИзменена = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если ЕдиницаРасчетовИзменена ИЛИ ЕдиницаМестИзменена Тогда
						ОбъектНоменклатуры = Номенклатура.ПолучитьОбъект();
						ОбъектНоменклатуры.ОбменДанными.Загрузка = Истина;
						Если ЕдиницаМестИзменена Тогда
							ОбъектНоменклатуры.ЕдиницаМестЗаполненаСолво = Истина;
							ОбъектНоменклатуры.ЕдиницаИзмеренияМест = ЕдиницаМест;
						КонецЕсли;
						Если ЕдиницаРасчетовИзменена Тогда
							ОбъектНоменклатуры.ЕдиницаДляРасчетаЗаполненаСолво = Истина;
							ОбъектНоменклатуры.ЕдиницаДляРассчетаВесовыхПоказателей = ЕдиницаРасчетов;
						КонецЕсли;
						
						Попытка
							ОбъектНоменклатуры.Записать();
							ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Номенклатура);	//чтобы повторно не выгружать
						Исключение
							ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,,Номенклатура, "Ошибка записи номенклатуры при изменении единиц измерения:"+Символы.ПС+ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
					
					ПакетОбработан = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ПакетОбработан Тогда
			МассивОбработанныхПакетов.Добавить(НомерПакета);
		КонецЕсли;
	КонецЦикла;
	
	//4. Отметим обработанные пакеты
	ТекстЗапроса = "update packets_to_host set status = ?, error_descr = ? where ID = ?";
	Для Каждого СтруктураПакета Из ОшибочныеПакеты Цикл
		Поз = МассивОбработанныхПакетов.Найти(СтруктураПакета.Ключ);
		Если Поз = Неопределено Тогда
			Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "E", ЛЕВ(СтруктураПакета.Значение, 100), СтруктураПакета.Ключ, Узел);
		Иначе
			Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "S", ЛЕВ(СтруктураПакета.Значение, 100), СтруктураПакета.Ключ, Узел);
			МассивОбработанныхПакетов.Удалить(Поз);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "update packets_to_host set status = ? where ID = ?";
	Для Каждого НомерПакета Из МассивОбработанныхПакетов Цикл
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "S", НомерПакета,,Узел);
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Завершено чтение упаковок."+Символы.ПС+"Принятых пакетов: "+Строка(МассивОбработанныхПакетов.Количество())+Символы.ПС+"Ошибочных пакетов: "+Строка(ОшибочныеПакеты.Количество()));
КонецПроцедуры

//Ищет единицу измерения по коду Solvo
Функция НайтиЕдиницуПоКлассификатору(КодSolvo = 0)
	Если КодSolvo = 0 Тогда
		Возврат Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодSolvo", КодSolvo);
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлассификаторЕдиницИзмерения.Ссылка
	               |ИЗ
	               |	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	               |ГДЕ
	               |	КлассификаторЕдиницИзмерения.КодSolvo = &КодSolvo
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КлассификаторЕдиницИзмерения.Код";
				   
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
КонецФункции

//Записывает в базу указанный штрихкод
Функция УстановитьШтрихКод(Номенклатура, ЕдиницаИзмерения, ШтрихКод, Вид="", Основной = Ложь)
	Если ШтрихКод = "0" Тогда
		Возврат Ложь;
	ИначеЕсли ПустаяСтрока(ШтрихКод) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипШтрихКода = "";
	Если Вид = "" Тогда
		Если СтрДлина(ШтрихКод) = 13 Тогда
			ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		ИначеЕсли СтрДлина(ШтрихКод) = 8 Тогда
			ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
		ИначеЕсли СтрДлина(ШтрихКод) = 14 Тогда
			ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.ITF14;
		Иначе
			ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.НайтиПоКоду("ANYCODE");
			Если НЕ ЗначениеЗаполнено(ТипШтрихКода) Тогда
				КС = Новый КвалификаторыСтроки(200);
				ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.СоздатьЭлемент();
				ТипШтрихКода.Код = "ANYCODE";
				ТипШтрихКода.Наименование = "Произвольный код";
				ТипШтрихКода.ТипЗначения = Новый ОписаниеТипов("Строка",,КС,);
				ТипШтрихКода.Записать();
				ТипШтрихКода = ТипШтрихКода.Ссылка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.НайтиПоКоду(Вид);
		Если НЕ ЗначениеЗаполнено(ТипШтрихКода) Тогда
			КС = Новый КвалификаторыСтроки(200);
			ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.СоздатьЭлемент();
			ТипШтрихКода.Код = Вид;
			ТипШтрихКода.Наименование = "";
			ТипШтрихКода.ТипЗначения = Новый ОписаниеТипов("Строка",,КС,);
			ТипШтрихКода.Записать();
			ТипШтрихКода = ТипШтрихКода.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ШтрихКод.Установить(ШтрихКод);
	НаборЗаписей.Отбор.Владелец.Установить(Номенклатура);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	Запись = НаборЗаписей.Добавить();
	Запись.Активность = Истина;
	Запись.Владелец = Номенклатура;
	Запись.ЕдиницаИзмерения = ЕдиницаИзмерения;
	Запись.Качество = Справочники.Качество.Новый;
	Запись.ТипШтрихкода = ТипШтрихКода;
	Запись.Штрихкод = ШтрихКод;
	//Запись.ФБ_Основной = Основной;
	
	Попытка
		НаборЗаписей.Записать(Истина);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

//Выгружает документ поступления
Функция ВыгрузитьПоступление(Соединение, Поступление, Узел)
	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(Поступление.Номер) И (Поступление.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//1.1 Проверим наличие номенклатуры
	Для Каждого ТекСтрока Из Поступление.Товары Цикл
		Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//1.2 Проверим наличие контрагента
	Если ЗначениеЗаполнено(Поступление.Контрагент) Тогда
		Если ВыгрузитьКонтрагента(Соединение, Поступление.Контрагент, Узел) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//2. Проверим необходимость создания нового документа
	Идентификатор = СокрЛП(Поступление.УникальныйИдентификатор());
	Документ_ИД = "";
	
	ТекстЗапроса = "select ID from incomings where incomings.sdid = '"+Идентификатор+"'";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса,,,,Узел);
	Если Рез = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Поступление, "Не удалось добавить заголовок пакета");
		Соединение.Close();
		Возврат Ложь;
	Иначе
		Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Тогда
			Документ_ИД = Рез.Fields("ID").Value;
			ДокументНайден = Истина;
		Иначе
			ДокументНайден = Ложь;
			//++ FDI 19.06.12 Не выгружаем пустые документы 
			Если Поступление.Товары.Количество() = 0 Тогда
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Поступление, "Документ пустой, выгрузка не произведена");
				Возврат Истина;
			КонецЕсли;
			//-- FDI 19.06.12 
		КонецЕсли;
	КонецЕсли;
	
	//3. Получим строки документа в базе Солво
	МассивСтрок = Новый Массив;
	Если ДокументНайден Тогда
		ТекстЗапроса = "select line from incoming_details where inc_id = ?";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, Документ_ИД,,,Узел);
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Поступление, "Не удалось получить данные документа из базы Solvo");
			Соединение.Close();
			Возврат Ложь;
		Иначе
			Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
				НомерСтроки = Рез.Fields("line").value;
				Если МассивСтрок.Найти(НомерСтроки) = Неопределено Тогда
					МассивСтрок.Добавить(НомерСтроки);
				КонецЕсли;
				Рез.MoveNext(); 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//4. Получим номер пакета
	НомерПакета = ПолучитьНомерПакета(Соединение, Узел);
	Если НомерПакета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = "insert into from_host_header_message(ID, TYPE, status) values(?,?,?)";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, "incoming", "C", Узел);
	Если Рез = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Поступление, "Не удалось добавить заголовок пакета");
		Возврат Ложь;
	КонецЕсли;
	
	//5. Формируем пакет для вставки в базу данных
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + СокрЛП(Поступление.УникальныйИдентификатор()));
	
	//5.1. Шапка
	ЗаписьXML.ЗаписатьНачалоЭлемента("incoming");
	ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("inc_id", Идентификатор);
	ЗаписьXML.ЗаписатьАтрибут("action", ?(ДокументНайден, "update", "add"));
	ЗаписьXML.ЗаписатьАтрибут("display_name", СокрЛП("Пост. "+Поступление.НомерВходящегоДокумента));
	ЗаписьXML.ЗаписатьАтрибут("priority", "10");
	ЗаписьXML.ЗаписатьАтрибут("supplier_id", СокрЛП(Поступление.Контрагент.Код));
	ЗаписьXML.ЗаписатьАтрибут("type", "A");
	Если ПустаяСтрока(Поступление.Ответственный.Наименование) = Ложь Тогда
		ЗаписьXML.ЗаписатьАтрибут("responsible", СокрЛП(Поступление.Ответственный.Наименование));
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("holder_id", "H1");
	ЗаписьXML.ЗаписатьАтрибут("comments", СокрЛП(Поступление.Комментарий));
	ЗаписьXML.ЗаписатьАтрибут("date_to_ship", Формат(Поступление.Дата,"ДФ = 'dd-MM-yyyy HH:mm'"));
	
	//5.2. Строки
	НомерСтроки = 0;
	Для Каждого ТекСтрока Из Поступление.Товары Цикл
		//++ FDI 06.06.12 Переводим количество в базовую единицу измерения 
		//Количество = ТекСтрока.Количество * ТекСтрока.Коэффициент/?(ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент=0,1,ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);
		Количество = ТекСтрока.Количество * ТекСтрока.Коэффициент;
		//-- FDI 06.06.12 
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("incoming_detail");
		ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("inc_id", Идентификатор);
		Поз = МассивСтрок.Найти(НомерСтроки);
		Если Поз = Неопределено Тогда
			ЗаписьXML.ЗаписатьАтрибут("action", "add");
		Иначе
			ЗаписьXML.ЗаписатьАтрибут("action", "update");
			МассивСтрок.Удалить(Поз);
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("line", Формат(НомерСтроки, "ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ТекСтрока.Номенклатура.Код));
		ЗаписьXML.ЗаписатьАтрибут("qty", Формат(Количество, "ЧЦ=15; ЧГ=0"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	//5.3. Удалим лишние строки
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("incoming_detail");
		ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("inc_id", Идентификатор);
		ЗаписьXML.ЗаписатьАтрибут("action", "delete");
		ЗаписьXML.ЗаписатьАтрибут("line", Формат(НомерСтроки, "ЧГ=0"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла; 
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
		Возврат Истина;		
	КонецЕсли; 	
	//-- Spl_Апроф
		
	//6. Выгружаем данные в базу Солво
	ДлинаСтроки = МАКС(Узел.ДлинаСтроки, 300);
	ИсходнаяСтрока = ЗаписьXML.Закрыть();
	
	Позиция = 1;
	РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	СчСтрок = 0;
	Пока НЕ ПустаяСтрока(РезультирующаяСтрока) Цикл
		СчСтрок = СчСтрок + 1;
		ТекстЗапроса = "insert into xml_data_to_wms(ID, line, data) values(?, ?, ?)";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, СчСтрок, РезультирующаяСтрока, Узел);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Поступление, "Не удалось добавить данные пакета");
			Возврат Ложь;
		КонецЕсли;
		
		Позиция = Позиция + ДлинаСтроки;
		РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

//Считывает из базы SOLVO результаты поступления товаров услуг и возвратов покупателей
Процедура ОбработатьРезультатыПриемки(Соединение, Узел)
	
	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Начало чтения статусов поступлений из базы Solvo");
	
	// Получим необработанные пакеты
	ТекстЗапроса = "select * from packets_to_host where status = ? and TYPE = ? order by ID";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "C", "incoming_status_changed",,Узел);
	Если Рез = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПакетов = Новый ТаблицаЗначений;
	ТаблицаПакетов.Колонки.Добавить("НомерПакета");
	ТаблицаПакетов.Колонки.Добавить("Данные");

	Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
		НовСтрока = ТаблицаПакетов.Добавить();
		НовСтрока.НомерПакета = Рез.Fields("PACK_ID").Value;
		НовСтрока.Данные = "";
		Рез.MoveNext(); 
	КонецЦикла;
	
	//2. Получим данные необработанных пакетов
	ТекстЗапроса = "select * from xml_data_to_host where ID = ? order by ID, line";
	Для Каждого ТекСтрока Из ТаблицаПакетов Цикл
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, ТекСтрока.НомерПакета,,,Узел);
		Если Рез <> Неопределено Тогда
			Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
				ТекСтрока.Данные = ТекСтрока.Данные + Рез.Fields("DATA").Value;
				Рез.MoveNext(); 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	МассивОбработанныхПакетов = Новый Массив;
	ОшибочныеПакеты = Новый Соответствие;
	МассивДокументов = Новый Массив;
	//3. Произведём чтение данных пакетов
	Для Каждого ДанныеПакета Из ТаблицаПакетов Цикл
		НомерПакета = ДанныеПакета.НомерПакета;
		Данные = ДанныеПакета.Данные;
		
		Если ПустаяСтрока(Данные) Тогда
			ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" has no data (пакет не имеет данных)");
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Пакет № "+НомерПакета+" не имеет данных");
			Продолжить;
		КонецЕсли;
		
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.УстановитьСтроку(Данные);
		СтрокаОшибок = "";
		
		ИдПоступления = "";
		НовыйСтатус = "";
		ТаблицаИзменений = Новый ТаблицаЗначений;
		ТаблицаИзменений.Колонки.Добавить("Номенклатура");
		ТаблицаИзменений.Колонки.Добавить("Количество");
		ТипПоступления = "";
		
		ЕстьОшибки = Ложь;
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеХМЛ.Имя = "incoming_status_changed" Тогда					//Получим статус изменений
					НовыйСтатус = ЧтениеХМЛ.ПолучитьАтрибут("new_status");
					ИдПоступления = ЧтениеХМЛ.ПолучитьАтрибут("inc_id");
					ТипПоступления = ЧтениеХМЛ.ПолучитьАтрибут("type");
				ИначеЕсли ЧтениеХМЛ.Имя = "incoming_status_changed_detail" Тогда
					КодНоменклатуры = ЧтениеХМЛ.ЗначениеАтрибута("sku_id");
					НомерСтроки = ЧтениеХМЛ.ЗначениеАтрибута("line");
					СтатусНоменклатуры = ЧтениеХМЛ.ЗначениеАтрибута("status");
					Если СтатусНоменклатуры <> "A" Тогда								//Только кондиция
						Продолжить;
					КонецЕсли;
					Количество = Число(ЧтениеХМЛ.ЗначениеАтрибута("qty"));
					Если КодНоменклатуры <> Неопределено Тогда							//Получим таблицу изменений
						Номенклатура = Справочники.Номенклатура.НайтиПоКоду(КодНоменклатуры);
						Если ЗначениеЗаполнено(Номенклатура) Тогда
							НовСтрока = ТаблицаИзменений.Добавить();
							НовСтрока.Номенклатура = Номенклатура;
							НовСтрока.Количество = Число(Количество);
						Иначе
							СтрокаОшибок = СтрокаОшибок + Символы.ПС + "В строке "+НомерСтроки+" не сопоставлена номенклатура "+КодНоменклатуры;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//Обработка ошибок
		Если ПустаяСтрока(ИдПоступления) Тогда
			ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" has no data (пакет не имеет данных)");
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ТипПоступления) Тогда
			ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" has no data (пакет не имеет данных)");
			Продолжить;
		КонецЕсли;
		
		//ТаблицаИзменений.ВыбратьСтроку("Изменения");
		ЭтоПеремещение = Ложь;
		
		//4. Изменим статус документа поступления
		Попытка
			Если ТипПоступления = "A" Тогда 
				ПоступлениеСсылка = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдПоступления));
				Если ПоступлениеСсылка.Дата = Дата(1,1,1) И ПустаяСтрока(ПоступлениеСсылка.Номер) Тогда		//Документ не найден
					//Возможно это перемещение
					ПоступлениеСсылка = Документы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдПоступления));
					Если ПоступлениеСсылка.Дата = Дата(1,1,1) И ПустаяСтрока(ПоступлениеСсылка.Номер) Тогда		//Документ не найден
						ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,ПоступлениеСсылка, "Поступление "+ИдПоступления+" не найдено");
						ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Receipt of "+ИдПоступления+" not found (Поступление не найдено)");
						Продолжить;
					Иначе
						ЭтоПеремещение = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПоступлениеСсылка = Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдПоступления));
				Если ПоступлениеСсылка.Дата = Дата(1,1,1) И ПустаяСтрока(ПоступлениеСсылка.Номер) Тогда		//Документ не найден
					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,ПоступлениеСсылка, "Возврат "+ИдПоступления+" не найден");
					ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Return of "+ИдПоступления+" not found (Возврат не найден)");
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		
		НовыйСтатусССИС = ПоступлениеСсылка.СтатусССИС;
		Если НовыйСтатус = "R" Тогда
			НовыйСтатусССИС = Перечисления.ФБ_СтатусыПоступленияТоваровУслуг.ОтправленНаСклад;
		ИначеЕсли НовыйСтатус = "G" Тогда
			НовыйСтатусССИС = Перечисления.ФБ_СтатусыПоступленияТоваровУслуг.Подготовлен;
		ИначеЕсли НовыйСтатус = "P" Тогда
			НовыйСтатусССИС = Перечисления.ФБ_СтатусыПоступленияТоваровУслуг.ВРаботе;
		ИначеЕсли НовыйСтатус = "D" Тогда
			НовыйСтатусССИС = Перечисления.ФБ_СтатусыПоступленияТоваровУслуг.Выполнен;
		КонецЕсли;
		
		Если ЭтоПеремещение Тогда
			ОбработатьПеремещение(Соединение, Узел, НомерПакета, ПоступлениеСсылка, НовыйСтатусССИС, ТаблицаИзменений);
			Продолжить;
		КонецЕсли;
		
		Если ПоступлениеСсылка.СтатусССИС <> НовыйСтатусССИС Тогда
			ПоступлениеОбъект = ПоступлениеСсылка.ПолучитьОбъект();
			ПоступлениеОбъект.СтатусССИС = НовыйСтатусССИС;
			Попытка
				ПоступлениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Попытка
					ПоступлениеОбъект.Записать(РежимЗаписиДокумента.Проведение);	//Попробуем ещё раз
				Исключение
					ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Failed to change the document status (Ошибка изменения статуса документа):"+Символы.ПС+ОписаниеОшибки());
					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,,ПоступлениеСсылка, "Ошибка при изменении статуса документа:"+Символы.ПС+ОписаниеОшибки());
					Продолжить;
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
		
		//5. Создадим документ корректировки при необходимости
		Если ТаблицаИзменений.Количество() <> 0 Тогда
			//Найдём корректировку по этому документу
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументПоступления", ПоступлениеСсылка);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	КорректировкаПоступления.Ссылка КАК ДокументКорректировки
			               |ИЗ
			               |	Документ.КорректировкаПоступления КАК КорректировкаПоступления
			               |ГДЕ
			               |	КорректировкаПоступления.ДокументПоступления = &ДокументПоступления
			               |	И КорректировкаПоступления.ПометкаУдаления = ЛОЖЬ
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	КорректировкаПоступления.Дата,
			               |	КорректировкаПоступления.Ссылка";
			Результат = Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				ДокументКорректировки = Результат.ДокументКорректировки.ПолучитьОбъект();
			Иначе
				ДокументКорректировки = Документы.КорректировкаПоступления.СоздатьДокумент();
				ДокументКорректировки.Организация = ПоступлениеСсылка.Организация;
				ДокументКорректировки.ДокументПоступления = ПоступлениеСсылка;
				ДокументКорректировки.Дата = ТекущаяДата();
				ДокументКорректировки.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
				ДокументКорректировки.ОтражатьВБухгалтерскомУчете = ПоступлениеСсылка.ОтражатьВБухгалтерскомУчете;
				ДокументКорректировки.ОтражатьВНалоговомУчете = ПоступлениеСсылка.ОтражатьВНалоговомУчете;
				ДокументКорректировки.ОтражатьВУправленческомУчете = ПоступлениеСсылка.ОтражатьВУправленческомУчете;
				ДокументКорректировки.КорректироватьБУиНУ = Истина;
				ДокументКорректировки.УчитыватьНДС = ПоступлениеСсылка.УчитыватьНДС;
				ДокументКорректировки.СуммаВключаетНДС = ПоступлениеСсылка.СуммаВключаетНДС;
			КонецЕсли;
			
			ДокументКорректировки.Товары.Очистить();
			
			//Заполним табличную часть документа
			ДокументКорректировки.ЗаполнитьСвойстваШапки();
			//ДокументКорректировки.ЗаполнитьПоДокументу();
			
			Если ТипПоступления = "A" Тогда		//Поступление
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ПоступлениеТоваровУслугТовары.Номенклатура,
				               |	ПоступлениеТоваровУслугТовары.КоличествоМест,
				               |	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
				               |	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест,
				               |	ПоступлениеТоваровУслугТовары.Коэффициент,
				               |	ПоступлениеТоваровУслугТовары.Количество,
				               |	ПоступлениеТоваровУслугТовары.Цена,
				               |	ПоступлениеТоваровУслугТовары.ОтражениеВУСН,
				               |	ПоступлениеТоваровУслугТовары.Сумма,
				               |	ПоступлениеТоваровУслугТовары.СтавкаНДС,
				               |	ПоступлениеТоваровУслугТовары.СуммаНДС,
				               |	ПоступлениеТоваровУслугТовары.СерияНоменклатуры,
				               |	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры,
				               |	ПоступлениеТоваровУслугТовары.Заказ КАК Заказ,
				               |	ПоступлениеТоваровУслугТовары.СчетУчетаБУ,
				               |	ПоступлениеТоваровУслугТовары.СчетУчетаНДС,
				               |	ПоступлениеТоваровУслугТовары.СчетУчетаНУ,
				               |	ПоступлениеТоваровУслугТовары.ЗаказПоставщику,
				               |	ПоступлениеТоваровУслугТовары.КлючСвязи,
				               |	ВЫБОР
				               |		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.ВидПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.НаСклад)
				               |			ТОГДА ПоступлениеТоваровУслугТовары.Склад
				               |		ИНАЧЕ ПоступлениеТоваровУслугТовары.ПриходныйОрдер.Склад
				               |	КОНЕЦ КАК Склад,
				               |	ПоступлениеТоваровУслугТовары.Номенклатура КАК НоменклатураДоИзменения,
				               |	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыДоИзменения,
				               |	ПоступлениеТоваровУслугТовары.СерияНоменклатуры КАК СерияНоменклатурыДоИзменения,
				               |	ПоступлениеТоваровУслугТовары.Количество КАК КоличествоДоИзменения,
				               |	ПоступлениеТоваровУслугТовары.Цена КАК ЦенаДоИзменения,
				               |	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
				               |	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДСДоИзменения,
				               |	ПоступлениеТоваровУслугТовары.Сумма КАК СуммаДоИзменения,
				               |	ИСТИНА КАК ЕстьВДокументеПоступления
				               |ИЗ
				               |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
				               |ГДЕ
				               |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	ПоступлениеТоваровУслугУслуги.Номенклатура,
				               |	ПоступлениеТоваровУслугУслуги.Содержание,
				               |	ПоступлениеТоваровУслугУслуги.Заказ,
				               |	ПоступлениеТоваровУслугУслуги.Количество,
				               |	ПоступлениеТоваровУслугУслуги.Цена,
				               |	ПоступлениеТоваровУслугУслуги.Сумма,
				               |	ПоступлениеТоваровУслугУслуги.СтавкаНДС,
				               |	ПоступлениеТоваровУслугУслуги.СуммаНДС,
				               |	ПоступлениеТоваровУслугУслуги.НоменклатурнаяГруппа,
				               |	ПоступлениеТоваровУслугУслуги.Подразделение,
				               |	ПоступлениеТоваровУслугУслуги.ПодразделениеОрганизации,
				               |	ПоступлениеТоваровУслугУслуги.СтатьяЗатрат,
				               |	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
				               |	ПоступлениеТоваровУслугУслуги.Субконто1,
				               |	ПоступлениеТоваровУслугУслуги.Субконто2,
				               |	ПоступлениеТоваровУслугУслуги.Субконто3,
				               |	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ,
				               |	ПоступлениеТоваровУслугУслуги.СубконтоНУ1,
				               |	ПоступлениеТоваровУслугУслуги.СубконтоНУ2,
				               |	ПоступлениеТоваровУслугУслуги.СубконтоНУ3,
				               |	ПоступлениеТоваровУслугУслуги.СчетУчетаНДС,
				               |	ПоступлениеТоваровУслугУслуги.Продукция,
				               |	ПоступлениеТоваровУслугУслуги.ХарактеристикаПродукции,
				               |	ПоступлениеТоваровУслугУслуги.СерияПродукции,
				               |	ПоступлениеТоваровУслугУслуги.ОбъектСтроительства,
				               |	ПоступлениеТоваровУслугУслуги.ОтражениеВУСН,
				               |	ПоступлениеТоваровУслугУслуги.Проект,
				               |	ПоступлениеТоваровУслугУслуги.ЗаказПоставщику,
				               |	ПоступлениеТоваровУслугУслуги.СпособРаспределенияЗатратНаВыпуск,
				               |	ПоступлениеТоваровУслугУслуги.СпособСтроительства,
				               |	ПоступлениеТоваровУслугУслуги.Номенклатура КАК НоменклатураДоИзменения,
				               |	ПоступлениеТоваровУслугУслуги.Содержание КАК СодержаниеДоИзменения,
				               |	ПоступлениеТоваровУслугУслуги.Количество КАК КоличествоДоИзменения,
				               |	ПоступлениеТоваровУслугУслуги.Цена КАК ЦенаДоИзменения,
				               |	ПоступлениеТоваровУслугУслуги.Сумма КАК СуммаДоИзменения,
				               |	ПоступлениеТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДСДоИзменения,
				               |	ПоступлениеТоваровУслугУслуги.СуммаНДС КАК СуммаНДСДоИзменения,
				               |	ИСТИНА КАК ЕстьВДокументеПоступления
				               |ИЗ
				               |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
				               |ГДЕ
				               |	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", ПоступлениеСсылка);
				Результат = Запрос.ВыполнитьПакет();
				
				ДокументКорректировки.Товары.Загрузить(Результат[0].Выгрузить());
				ДокументКорректировки.Услуги.Загрузить(Результат[1].Выгрузить());
				ДокументКорректировки.СерийныеНомера.Загрузить(ПоступлениеСсылка.СерийныеНомера.Выгрузить());
				
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
				               |	ВозвратТоваровОтПокупателяТовары.КоличествоМест,
				               |	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения,
				               |	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмеренияМест,
				               |	ВозвратТоваровОтПокупателяТовары.Коэффициент,
				               |	ВозвратТоваровОтПокупателяТовары.Количество,
				               |	ВозвратТоваровОтПокупателяТовары.Цена,
				               |	ВозвратТоваровОтПокупателяТовары.ОтражениеВУСН,
				               |	ВозвратТоваровОтПокупателяТовары.Сумма,
				               |	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
				               |	ВозвратТоваровОтПокупателяТовары.СуммаНДС,
				               |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры,
				               |	ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры,
				               |	ВозвратТоваровОтПокупателяТовары.СчетУчетаБУ,
				               |	ВозвратТоваровОтПокупателяТовары.СчетУчетаНУ,
				               |	ВозвратТоваровОтПокупателяТовары.КлючСвязи,
				               |	ВЫБОР
				               |		КОГДА ВозвратТоваровОтПокупателяТовары.Ссылка.ВидПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.НаСклад)
				               |			ТОГДА ВозвратТоваровОтПокупателяТовары.Склад
				               |		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.ПриходныйОрдер.Склад
				               |	КОНЕЦ КАК Склад,
				               |	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК НоменклатураДоИзменения,
				               |	ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыДоИзменения,
				               |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры КАК СерияНоменклатурыДоИзменения,
				               |	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоДоИзменения,
				               |	ВозвратТоваровОтПокупателяТовары.Цена КАК ЦенаДоИзменения,
				               |	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
				               |	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДСДоИзменения,
				               |	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаДоИзменения,
				               |	ИСТИНА КАК ЕстьВДокументеПоступления,
				               |	ВозвратТоваровОтПокупателяТовары.ЗаказПокупателя КАК Заказ
				               |ИЗ
				               |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
				               |ГДЕ
				               |	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
				Запрос.УстановитьПараметр("Ссылка", ПоступлениеСсылка);
				Результат = Запрос.ВыполнитьПакет();
				
				ДокументКорректировки.Товары.Загрузить(Результат[0].Выгрузить());
			КонецЕсли;
			//Закончили заполнение
			
			Для Каждого ТабСтрока Из ДокументКорректировки.Товары Цикл
				ТабСтрока.Количество = 0;
			КонецЦикла;
			
			//Внесём фактические данные
			Для Каждого ТекСтрока Из ТаблицаИзменений Цикл
				МассивСтрок = ДокументКорректировки.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
				МаксСтрока = Неопределено;
				Для Каждого ТабСтрока Из МассивСтрок Цикл		//Распределим фактические данные
					Кво = МИН(ТекСтрока.Количество/?(ТабСтрока.Коэффициент=0,1,ТабСтрока.Коэффициент), ТабСтрока.КоличествоДоИзменения - ТабСтрока.Количество);
					МаксСтрока = ТабСтрока;
					Если Кво>0 Тогда
						ТабСтрока.Количество = ТабСтрока.Количество + Кво;
						ТекСтрока.Количество = ТекСтрока.Количество - Кво*?(ТабСтрока.Коэффициент=0,1,ТабСтрока.Коэффициент);
					КонецЕсли;
				КонецЦикла;
				
				Если ТекСтрока.Количество > 0 Тогда
					Если МаксСтрока = Неопределено Тогда
						МаксСтрока = ДокументКорректировки.Товары.Добавить();
						МаксСтрока.Номенклатура = ТекСтрока.Номенклатура;
						МаксСтрока.ЕдиницаИзмерения = МаксСтрока.Номенклатура.ЕдиницаХраненияОстатков;
						МаксСтрока.Коэффициент = ?(МаксСтрока.ЕдиницаИзмерения.Коэффициент = 0, 1, МаксСтрока.ЕдиницаИзмерения.Коэффициент);
						МаксСтрока.Склад = ПоступлениеСсылка.СкладОрдер;
						МаксСтрока.Количество = 0;
					КонецЕсли;
					МаксСтрока.Количество = МаксСтрока.Количество + ТекСтрока.Количество/?(МаксСтрока.Коэффициент=0,1,МаксСтрока.Коэффициент);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекСтрока Из ДокументКорректировки.Товары Цикл
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ТекСтрока, ДокументКорректировки);
				Если ТипЗнч(ДокументКорректировки) = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
					Цена = ?(ТекСтрока.КоличествоДоИзменения = 0, ТекСтрока.ЦенаДоИзменения, ТекСтрока.СуммаДоИзменения/ТекСтрока.КоличествоДоИзменения);
					ТекСтрока.Сумма = Окр(ТекСтрока.Количество*Цена,2,1);
					ЦенаНДС = ?(ТекСтрока.КоличествоДоИзменения = 0, 0, ТекСтрока.СуммаНДСДоИзменения/ТекСтрока.КоличествоДоИзменения);
					ТекСтрока.СуммаНДС = Окр(ТекСтрока.Количество*ЦенаНДС,2,1);
				КонецЕсли;
			КонецЦикла;
			
			ДокументКорректировки.ЗаполнитьСчетаУчетаВТабЧасти(ДокументКорректировки.Товары, "Товары", Истина, Истина);
			ДокументКорректировки.ЗаполнитьСвойстваШапки();
			
			Попытка
				ДокументКорректировки.Записать(РежимЗаписиДокумента.Проведение);
				МассивДокументов.Добавить(ПоступлениеСсылка);
			Исключение
				Попытка
					ДокументКорректировки.Записать(РежимЗаписиДокумента.Проведение);		//Попробуем ещё раз
					МассивДокументов.Добавить(ПоступлениеСсылка);
				Исключение
					ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Error writing corrections (Ошибка записи документа корректировки):"+Символы.ПС+ОписаниеОшибки());
					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,,ПоступлениеСсылка, "Ошибка записи документа корректировки:"+Символы.ПС+ОписаниеОшибки());
					Продолжить;
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
		
		МассивОбработанныхПакетов.Добавить(НомерПакета);
	КонецЦикла;
	
	//4. Отметим обработанные пакеты
	ТекстЗапроса = "update packets_to_host set status = ?, error_descr = ? where ID = ?";
	Для Каждого СтруктураПакета Из ОшибочныеПакеты Цикл
		Поз = МассивОбработанныхПакетов.Найти(СтруктураПакета.Ключ);
		Если Поз = Неопределено Тогда
			Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "E", ЛЕВ(СтруктураПакета.Значение, 100), СтруктураПакета.Ключ, Узел);
		Иначе
			Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "S", ЛЕВ(СтруктураПакета.Значение, 100), СтруктураПакета.Ключ, Узел);
			МассивОбработанныхПакетов.Удалить(Поз);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "update packets_to_host set status = ? where ID = ?";
	Для Каждого НомерПакета Из МассивОбработанныхПакетов Цикл
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "S", НомерПакета,,Узел);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из МассивДокументов Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Завершено чтение поступлений."+Символы.ПС+"Принятых пакетов: "+Строка(МассивОбработанныхПакетов.Количество())+Символы.ПС+"Ошибочных пакетов: "+Строка(ОшибочныеПакеты.Количество()));
КонецПроцедуры

//Выгружает документ Возврат товаров от покупателя
Функция ВыгрузитьВозвратТоваров(Соединение, ВозвратТоваров, Узел)
	Если НЕ ЗначениеЗаполнено(ВозвратТоваров) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ВозвратТоваров.Номер) И (ВозвратТоваров.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//1.1 Проверим наличие номенклатуры
	Для Каждого ТекСтрока Из ВозвратТоваров.Товары Цикл
		Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//1.2 Проверим наличие контрагента
	Если ЗначениеЗаполнено(ВозвратТоваров.Контрагент) Тогда
		Если ВыгрузитьКонтрагента(Соединение, ВозвратТоваров.Контрагент, Узел) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//2. Проверим необходимость создания нового документа
	Идентификатор = СокрЛП(ВозвратТоваров.УникальныйИдентификатор());
	Документ_ИД = "";
	
	ТекстЗапроса = "select ID from incomings where incomings.sdid = '"+Идентификатор+"'";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса,,,,Узел);
	Если Рез = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ВозвратТоваров, "Не удалось добавить заголовок пакета");
		Соединение.Close();
		Возврат Ложь;
	Иначе
		Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Тогда
			Документ_ИД = Рез.Fields("ID").Value;
			ДокументНайден = Истина;
		Иначе
			ДокументНайден = Ложь;
			//++ FDI 19.06.12 Не выгружаем пустые документы 
			Если ВозвратТоваров.Товары.Количество() = 0 Тогда
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ВозвратТоваров, "Документ пустой, выгрузка не произведена");
				Возврат Истина;
			КонецЕсли;
			//-- FDI 19.06.12 
		КонецЕсли;
	КонецЕсли;
	
	//3. Получим строки документа в базе Солво
	МассивСтрок = Новый Массив;
	Если ДокументНайден Тогда
		ТекстЗапроса = "select line from incoming_details where inc_id = ?";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, Документ_ИД,,,Узел);
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ВозвратТоваров, "Не удалось получить данные документа из базы Solvo");
			Соединение.Close();
			Возврат Ложь;
		Иначе
			Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
				НомерСтроки = Рез.Fields("line").value;
				Если МассивСтрок.Найти(НомерСтроки) = Неопределено Тогда
					МассивСтрок.Добавить(НомерСтроки);
				КонецЕсли;
				Рез.MoveNext(); 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//4. Получим номер пакета
	НомерПакета = ПолучитьНомерПакета(Соединение, Узел);
	Если НомерПакета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = "insert into from_host_header_message(ID, TYPE, status) values(?,?,?)";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, "incoming", "C", Узел);
	Если Рез = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ВозвратТоваров, "Не удалось добавить заголовок пакета");
		Возврат Ложь;
	КонецЕсли;
	
	//5. Формируем пакет для вставки в базу данных
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + СокрЛП(ВозвратТоваров.УникальныйИдентификатор()));
	
	//5.1. Шапка
	ЗаписьXML.ЗаписатьНачалоЭлемента("incoming");
	ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("inc_id", Идентификатор);
	ЗаписьXML.ЗаписатьАтрибут("action", ?(ДокументНайден, "update", "add"));
	ЗаписьXML.ЗаписатьАтрибут("display_name", "Возв. "+СокрЛП(ВозвратТоваров.Номер));
	ЗаписьXML.ЗаписатьАтрибут("priority", "10");
	ЗаписьXML.ЗаписатьАтрибут("supplier_id", СокрЛП(ВозвратТоваров.Контрагент.Код));
	ЗаписьXML.ЗаписатьАтрибут("type", "B");
	Если ПустаяСтрока(ВозвратТоваров.Ответственный.Наименование) = Ложь Тогда
		ЗаписьXML.ЗаписатьАтрибут("responsible", СокрЛП(ВозвратТоваров.Ответственный.Наименование));
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("holder_id", "H1");
	ЗаписьXML.ЗаписатьАтрибут("comments", Лев(ВозвратТоваров.Комментарий,100));
	ЗаписьXML.ЗаписатьАтрибут("date_to_ship", Формат(ВозвратТоваров.Дата,"ДФ = 'dd-MM-yyyy HH:mm'"));
	
	//5.2. Строки
	НомерСтроки = 0;
	Для Каждого ТекСтрока Из ВозвратТоваров.Товары Цикл
		//++ FDI 06.06.12 Приводим количество к базовой единице измерения 
		//Количество = ТекСтрока.Количество * ТекСтрока.Коэффициент/?(ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент=0,1,ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);
		Количество = ТекСтрока.Количество * ТекСтрока.Коэффициент;
		//-- FDI 06.06.12 
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("incoming_detail");
		ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("inc_id", Идентификатор);
		Поз = МассивСтрок.Найти(НомерСтроки);
		Если Поз = Неопределено Тогда
			ЗаписьXML.ЗаписатьАтрибут("action", "add");
		Иначе
			ЗаписьXML.ЗаписатьАтрибут("action", "update");
			МассивСтрок.Удалить(Поз);
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("line", Формат(НомерСтроки, "ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ТекСтрока.Номенклатура.Код));
		ЗаписьXML.ЗаписатьАтрибут("qty", Формат(Количество, "ЧЦ=15; ЧГ=0"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	//5.3. Удалим лишние строки
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("incoming_detail");
		ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("inc_id", Идентификатор);
		ЗаписьXML.ЗаписатьАтрибут("action", "delete");
		ЗаписьXML.ЗаписатьАтрибут("line", Формат(НомерСтроки, "ЧГ=0"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла; 
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
		Возврат Истина;		
	КонецЕсли; 	
	//-- Spl_Апроф
		
	//6. Выгружаем данные в базу Солво
	ДлинаСтроки = МАКС(Узел.ДлинаСтроки, 300);
	ИсходнаяСтрока = ЗаписьXML.Закрыть();
	
	Позиция = 1;
	РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	СчСтрок = 0;
	Пока НЕ ПустаяСтрока(РезультирующаяСтрока) Цикл
		СчСтрок = СчСтрок + 1;
		ТекстЗапроса = "insert into xml_data_to_wms(ID, line, data) values(?, ?, ?)";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, СчСтрок, РезультирующаяСтрока, Узел);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ВозвратТоваров, "Не удалось добавить данные пакета");
			Возврат Ложь;
		КонецЕсли;
		
		Позиция = Позиция + ДлинаСтроки;
		РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

//Выгружает документ перемещения
Функция ВыгрузитьПеремещение(Соединение, Перемещение, Узел, КодКонтрагента)
	Если НЕ ЗначениеЗаполнено(Перемещение) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(Перемещение.Номер) И (Перемещение.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//1. Проверим наличие номенклатуры
	Для Каждого ТекСтрока Из Перемещение.Товары Цикл
		Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//2. Проверим необходимость создания нового документа
	Идентификатор = СокрЛП(Перемещение.УникальныйИдентификатор());
	Документ_ИД = "";
	
	ТекстЗапроса = "select ID from incomings where incomings.sdid = '"+Идентификатор+"'";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса,,,,Узел);
	Если Рез = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Перемещение, "Не удалось добавить заголовок пакета");
		Соединение.Close();
		Возврат Ложь;
	Иначе
		Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Тогда
			Документ_ИД = Рез.Fields("ID").Value;
			ДокументНайден = Истина;
		Иначе
			ДокументНайден = Ложь;
			//++ FDI 19.06.12 Не выгружаем пустые документы 
			Если Перемещение.Товары.Количество() = 0 Тогда
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Перемещение, "Документ пустой, выгрузка не произведена");
				Возврат Истина;
			КонецЕсли;
			//-- FDI 19.06.12 
		КонецЕсли;
	КонецЕсли;
	
	//3. Получим строки документа в базе Солво
	МассивСтрок = Новый Массив;
	Если ДокументНайден Тогда
		ТекстЗапроса = "select line from incoming_details where inc_id = ?";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, Документ_ИД,,,Узел);
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Перемещение, "Не удалось получить данные документа из базы Solvo");
			Соединение.Close();
			Возврат Ложь;
		Иначе
			Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
				НомерСтроки = Рез.Fields("line").value;
				Если МассивСтрок.Найти(НомерСтроки) = Неопределено Тогда
					МассивСтрок.Добавить(НомерСтроки);
				КонецЕсли;
				Рез.MoveNext(); 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//4. Получим номер пакета
	НомерПакета = ПолучитьНомерПакета(Соединение, Узел);
	Если НомерПакета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = "insert into from_host_header_message(ID, TYPE, status) values(?,?,?)";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, "incoming", "C", Узел);
	Если Рез = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Перемещение, "Не удалось добавить заголовок пакета");
		Возврат Ложь;
	КонецЕсли;
	
	//5. Формируем пакет для вставки в базу данных
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + СокрЛП(Перемещение.УникальныйИдентификатор()));
	
	//5.1. Шапка
	ЗаписьXML.ЗаписатьНачалоЭлемента("incoming");
	ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("inc_id", Идентификатор);
	ЗаписьXML.ЗаписатьАтрибут("action", ?(ДокументНайден, "update", "add"));
	ЗаписьXML.ЗаписатьАтрибут("display_name", СокрЛП("Перем. "+Перемещение.Номер));
	ЗаписьXML.ЗаписатьАтрибут("priority", "10");
	ЗаписьXML.ЗаписатьАтрибут("supplier_id", СокрЛП(КодКонтрагента));
	ЗаписьXML.ЗаписатьАтрибут("type", "A");
	Если ПустаяСтрока(Перемещение.Ответственный.Наименование) = Ложь Тогда
		ЗаписьXML.ЗаписатьАтрибут("responsible", СокрЛП(Перемещение.Ответственный.Наименование));
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("holder_id", "H1");
	ЗаписьXML.ЗаписатьАтрибут("comments", Лев(Перемещение.Комментарий, 100));
	ЗаписьXML.ЗаписатьАтрибут("date_to_ship", Формат(Перемещение.Дата,"ДФ = 'dd-MM-yyyy HH:mm'"));
	
	//5.2. Строки
	НомерСтроки = 0;
	Для Каждого ТекСтрока Из Перемещение.Товары Цикл
		//++ FDI 06.06.12 Переводим количество в базовую еденицу измерения 
		//Количество = ТекСтрока.Количество * ТекСтрока.Коэффициент/?(ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент=0,1,ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);
		Количество = ТекСтрока.Количество * ТекСтрока.Коэффициент;
		//-- FDI 06.06.12 
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("incoming_detail");
		ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("inc_id", Идентификатор);
		Поз = МассивСтрок.Найти(НомерСтроки);
		Если Поз = Неопределено Тогда
			ЗаписьXML.ЗаписатьАтрибут("action", "add");
		Иначе
			ЗаписьXML.ЗаписатьАтрибут("action", "update");
			МассивСтрок.Удалить(Поз);
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("line", Формат(НомерСтроки, "ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ТекСтрока.Номенклатура.Код));
		ЗаписьXML.ЗаписатьАтрибут("qty", Формат(Количество, "ЧЦ=15; ЧГ=0"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	//5.3. Удалим лишние строки
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("incoming_detail");
		ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("inc_id", Идентификатор);
		ЗаписьXML.ЗаписатьАтрибут("action", "delete");
		ЗаписьXML.ЗаписатьАтрибут("line", Формат(НомерСтроки, "ЧГ=0"));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла; 
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
		Возврат Истина;		
	КонецЕсли; 	
	//-- Spl_Апроф
		
	//6. Выгружаем данные в базу Солво
	ДлинаСтроки = МАКС(Узел.ДлинаСтроки, 300);
	ИсходнаяСтрока = ЗаписьXML.Закрыть();
	
	Позиция = 1;
	РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	СчСтрок = 0;
	Пока НЕ ПустаяСтрока(РезультирующаяСтрока) Цикл
		СчСтрок = СчСтрок + 1;
		ТекстЗапроса = "insert into xml_data_to_wms(ID, line, data) values(?, ?, ?)";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, СчСтрок, РезультирующаяСтрока, Узел);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Перемещение, "Не удалось добавить данные пакета");
			Возврат Ложь;
		КонецЕсли;
		
		Позиция = Позиция + ДлинаСтроки;
		РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

//Вносит изменения в документ перемещения
Процедура ОбработатьПеремещение(Соединение, Узел, НомерПакета, ПеремещениеСсылка, НовыйСтатус, ТаблицаИзменений)
	ОбъектПеремещения = ПеремещениеСсылка.ПолучитьОбъект();
	
	//!!! Удалить
	//ОбъектПеремещения = Документы.ПеремещениеТоваров.СоздатьДокумент();
	
	ОбъектПеремещения.СтатусССИС = НовыйСтатус;
	Если НовыйСтатус = Перечисления.ФБ_СтатусыПоступленияТоваровУслуг.Выполнен Тогда		//Внесём фактические данные в документ
		ОбъектПеремещения.Товары.Очистить();
		Для Каждого ТекСтрока Из ТаблицаИзменений Цикл
			Если ТекСтрока.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НовСтрока = ОбъектПеремещения.Товары.Добавить();
			НовСтрока.Номенклатура = ТекСтрока.Номенклатура;
			НовСтрока.ЕдиницаИзмерения = НовСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НовСтрока.Коэффициент = НовСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			НовСтрока.Коэффициент = ?(НовСтрока.Коэффициент = 0, 1, НовСтрока.Коэффициент);
			НовСтрока.Количество = ТекСтрока.Количество/НовСтрока.Коэффициент;
			НовСтрока.ЕдиницаИзмеренияМест = НовСтрока.Номенклатура.ЕдиницаИзмеренияМест;
			НовСтрока.КоличествоМест = ?(НовСтрока.ЕдиницаИзмеренияМест.Коэффициент = 0, 0, НовСтрока.Количество*НовСтрока.Коэффициент/НовСтрока.ЕдиницаИзмеренияМест.Коэффициент);
			НовСтрока.Качество = Справочники.Качество.Новый;
		КонецЦикла;
		
		ОбъектПеремещения.ЗаполнитьСчетаУчетаВТабЧасти(ОбъектПеремещения.Товары, "Товары", Истина, Истина);
	КонецЕсли;
	
	Успешно = Ложь;
	Попытка
		ОбъектПеремещения.Записать(РежимЗаписиДокумента.Проведение);
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ПеремещениеСсылка);
		Успешно = Истина;
	Исключение
		Попытка
			ОбъектПеремещения.Записать(РежимЗаписиДокумента.Проведение);		//Попробуем еще раз
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ПеремещениеСсылка);
			Успешно = Истина;
		Исключение
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,ПеремещениеСсылка, "Ошибка записи документа перемещения:"+Символы.ПС+ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	
	ТекстЗапроса = "update packets_to_host set status = ?, error_descr = ? where ID = ?";
	Статус = ?(Успешно, "S", "E");
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, Статус, "Error writing document transfer (Ошибка записи документа перемещения)",НомерПакета,Узел);
КонецПроцедуры

Процедура ПродажиДействие() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

//Находит на выбранную дату документ переноса с одного склада на другой
Функция ПолучитьДокументПеремещенияНаДату(ВыбОрганизация, Дата, СкладОтправитель, СкладПолучатель)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ВыбОрганизация);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", СкладПолучатель);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваров.Ссылка
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |ГДЕ
	               |	ПеремещениеТоваров.Проведен = ИСТИНА
	               |	И ПеремещениеТоваров.Организация = &Организация
	               |	И ПеремещениеТоваров.СкладОтправитель = &СкладОтправитель
	               |	И ПеремещениеТоваров.СкладПолучатель = &СкладПолучатель
	               |	И НАЧАЛОПЕРИОДА(ПеремещениеТоваров.Дата, ДЕНЬ) = &Дата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПеремещениеТоваров.Дата УБЫВ";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка.ПолучитьОбъект();
	Иначе
		Перемещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
		Перемещение.Дата = КонецДня(Дата);
		Перемещение.ОтражатьВБухгалтерскомУчете = Истина;
		Перемещение.ОтражатьВНалоговомУчете = Истина;
		Перемещение.ОтражатьВУправленческомУчете = Истина;
		Перемещение.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		Перемещение.Комментарий = "Автоматическая сверка остатков 1С и Solvo";
		Перемещение.СкладОтправитель = СкладОтправитель;
		Перемещение.СкладПолучатель = СкладПолучатель;
		Перемещение.КорректировкаSolvo = Истина;
		Перемещение.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		
		Перемещение.Организация = ВыбОрганизация;
		#Если Клиент Тогда
			Перемещение.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		#КонецЕсли
		
		Возврат Перемещение;
	КонецЕсли;
КонецФункции

//Загружает доп. штрихокоды
Процедура ЗагрузитьДополнительныеШтрихКоды(Соединение, Узел)
	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Начало чтения доп. штриходов");
	
	//1. Получим необработанные пакеты
	ТекстЗапроса = "select * from packets_to_host where status = ? and TYPE = ? order by ID";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "C", "sku_alias",,Узел);
	Если Рез = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПакетов = Новый ТаблицаЗначений;
	ТаблицаПакетов.Колонки.Добавить("НомерПакета");
	ТаблицаПакетов.Колонки.Добавить("Данные");

	Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
		НовСтрока = ТаблицаПакетов.Добавить();
		НовСтрока.НомерПакета = Рез.Fields("PACK_ID").Value;
		НовСтрока.Данные = "";
		Рез.MoveNext(); 
	КонецЦикла;
	
	//2. Получим данные необработанных пакетов
	ТекстЗапроса = "select * from xml_data_to_host where ID = ? order by ID, line";
	Для Каждого ТекСтрока Из ТаблицаПакетов Цикл
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, ТекСтрока.НомерПакета,,,Узел);
		Если Рез <> Неопределено Тогда
			Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
				ТекСтрока.Данные = ТекСтрока.Данные + Рез.Fields("DATA").Value;
				Рез.MoveNext(); 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//3. Произведём чтение данных пакетов
	МассивОбработанныхПакетов = Новый Массив;
	ОшибочныеПакеты = Новый Соответствие;
	ПакетОбработан = Ложь;
	Для Каждого ДанныеПакета Из ТаблицаПакетов Цикл
		НомерПакета = ДанныеПакета.НомерПакета;
		Данные = ДанныеПакета.Данные;
		
		Если ПустаяСтрока(Данные) Тогда
			ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package does not have data (пакет не имеет данных)");
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Пакет № "+НомерПакета+" не имеет данных");
			Продолжить;
		КонецЕсли;
		
		//Произведём чтение пакета
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.УстановитьСтроку(Данные);
		СтрокаОшибок = "";
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеХМЛ.Имя = "sku_alias" Тогда
					КодНоменклатуры = СокрЛП(ЧтениеХМЛ.ПолучитьАтрибут("sku_id"));			//Код номенклатуры
					Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(КодНоменклатуры));
					Основной = СокрЛП(ЧтениеХМЛ.ПолучитьАтрибут("is_main"));	//Основной штрихкод "t", остальные не грузим
					Если Основной <> "t" Тогда
						Продолжить;
					КонецЕсли;
					
					Если Номенклатура.Пустая() Тогда
						ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Item not found (не найдена номенклатура) "+КодНоменклатуры);
						ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Не найдена номенклатура "+КодНоменклатуры);
						Продолжить;
					КонецЕсли;
					
					ШтрихКод = СокрЛП(ЧтениеХМЛ.ПолучитьАтрибут("upc"));
					Если ПолучитьЧисло(ШтрихКод) <= 0 Тогда
						ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Invalid barcode (неверный штрихкод) "+ШтрихКод);
						ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Неверный штрихкод "+ШтрихКод);
						Продолжить;
					КонецЕсли;
					
					//Попробуем записать штрихкод
					Если УстановитьШтрихКод(Номенклатура, Номенклатура.ЕдиницаХраненияОстатков, ШтрихКод, "", Истина) = Ложь Тогда
						ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Штрихкод '"+ШтрихКод+"' не записан");
					Иначе
						ПакетОбработан = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ПакетОбработан Тогда
			МассивОбработанныхПакетов.Добавить(НомерПакета);
		КонецЕсли;
	КонецЦикла;
	
	//4. Отметим обработанные пакеты
	ТекстЗапроса = "update packets_to_host set status = ?, error_descr = ? where ID = ?";
	Для Каждого СтруктураПакета Из ОшибочныеПакеты Цикл
		Поз = МассивОбработанныхПакетов.Найти(СтруктураПакета.Ключ);
		Если Поз = Неопределено Тогда
			Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "E", ЛЕВ(СтруктураПакета.Значение, 100), СтруктураПакета.Ключ, Узел);
		Иначе
			Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "S", ЛЕВ(СтруктураПакета.Значение, 100), СтруктураПакета.Ключ, Узел);
			МассивОбработанныхПакетов.Удалить(Поз);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "update packets_to_host set status = ? where ID = ?";
	Для Каждого НомерПакета Из МассивОбработанныхПакетов Цикл
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "S", НомерПакета,,Узел);
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Завершено чтение доп. штрихкодов"+Символы.ПС+"Принятых пакетов: "+Строка(МассивОбработанныхПакетов.Количество())+Символы.ПС+"Ошибочных пакетов: "+Строка(ОшибочныеПакеты.Количество()));
КонецПроцедуры

//Отмечает паеты которые не обрабатываются системой как ошибочные
Процедура ОтметитьНеобрабатываемыеПакеты(Соединение, Узел)
	СписокОбрабатываемыхПакетов = Новый Массив;
	СписокОбрабатываемыхПакетов.Добавить("order_status_changed");
	СписокОбрабатываемыхПакетов.Добавить("pack");
	СписокОбрабатываемыхПакетов.Добавить("incoming_status_changed");
	СписокОбрабатываемыхПакетов.Добавить("sku_alias");
	
	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Отметка необрабатываемых пакетов");
	
	//1. Получим необработанные пакеты
	ТекстЗапроса = "select * from packets_to_host where status = ? order by ID";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "C",,,Узел);
	Если Рез = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПакетов = Новый ТаблицаЗначений;
	ТаблицаПакетов.Колонки.Добавить("НомерПакета");
	ТаблицаПакетов.Колонки.Добавить("Тэг");

	Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
		НовСтрока = ТаблицаПакетов.Добавить();
		НовСтрока.НомерПакета = Рез.Fields("PACK_ID").Value;
		НовСтрока.Тэг = Рез.Fields("TAG").Value;
		Рез.MoveNext(); 
	КонецЦикла;
	
	МассивОшибочныхПакетов = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаПакетов Цикл
		Если СписокОбрабатываемыхПакетов.Найти(СокрЛП(нрег(ТекСтрока.Тэг))) = Неопределено Тогда
			МассивОшибочныхПакетов.Добавить(ТекСтрока.НомерПакета);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "update packets_to_host set status = ?, error_descr = ? where ID = ?";
	Для Каждого НомерПакета Из МассивОшибочныхПакетов Цикл
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, "E", "This package isn't processed by the program 1C (этот пакет не обрабатывается 1С)", НомерПакета,Узел);
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Завершена отметка необрабатываемых пакетов: "+Строка(МассивОшибочныхПакетов.Количество()));
КонецПроцедуры

//Настраивает соединение с Solvo через ADO
Функция УстановитьСоединение(Узел) Экспорт
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Временная заглушка
	Если Узел.ТестоваяВыгрузка Тогда	
		Возврат Истина;			
	КонецЕсли; 	
	//-- Spl_Апроф 	
	
//	СтрокаСоединения="Provider=MSDAORA.1;Data Source="+Источник+";User Id="+Юзер+";Password="+Пароль+";";Соединение= Новый COMОбъект("ADODB.Connection");
//	Соединение.Open(СтрокаСоединения);
	
	ИмяДрайвера = Узел.ИмяДрайвера;
	DSN = Узел.DSN;
	ИмяСервера = Узел.Сервер;
	ИмяБазы = Узел.БазаДанных;
	ИмяПользователя = Узел.Логин;
	Пароль = Узел.Пароль;
	GATEWAY_ID = Узел.GATEWAY_ID;
	
	//Источник = "WMSDB = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = "+ИмяСервера+")(PORT = "+GATEWAY_ID+"))(CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = "+ИмяБазы+")))";
	
	//ИмяДрайвера=?(ИмяДрайвера = "", "DRIVER=" +"{Oracle in XE}", "DRIVER=" +ИмяДрайвера); //ИмяДрайвера="{Oracle in XE}";
	//СтрокаСоединения = ""+?(DSN = "", "", "DSN="+DSN+";")+ ИмяДрайвера + ";SERVER=" + ИмяСервера +";Database="+ИмяБазы+";UID="+ИмяПользователя+";PWD="+Пароль;
	//СтрокаСоединения = "Provider=MSDAORA.1; Data Source="+Источник+";UID="+ИмяПользователя+";PWD="+Пароль;
	//СтрокаСоединения = "Data Source="+Источник+";UID="+ИмяПользователя+";PWD="+Пароль;
	//СтрокаСоединения = "Provider=MSDAORA.1; Data Source="+Источник+";UID="+ИмяПользователя+";PWD="+Пароль;
	СтрокаСоединения = "Data Source="+ИмяБазы+";User Id="+ИмяПользователя+";Password="+Пароль+";";
	
	Соединение = Новый COMОбъект("ADODB.Connection"); 
	
	Соединение.ConnectionTimeOut =600;
	Соединение.CursorLocation = 3;
	Соединение.ConnectionString = СтрокаСоединения;
	Попытка
		Соединение.Open();  
		Возврат Соединение;
	Исключение
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Соединение с базой Solvo для узла """+Узел.Код+""" не установлено:"+Символы.ПС+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

//Возвращает номер очередного пакета
Функция ПолучитьНомерПакета(Соединение, Узел = Неопределено) Экспорт
	
	//ТекстЗапроса = "select MAX(ID) as ID from from_host_header_message";
	ТекстЗапроса = "SELECT seq_from_header_id.nextval FROM dual";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса,,,,Узел);
	
	НомерПакета = Неопределено;
	Если Рез <> Неопределено Тогда
		Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Тогда
			Если Рез.Fields(0).Value = Null Тогда
				НомерПакета = 1;			
			Иначе	
				//НомерПакета = Число(Рез.Fields(0).Value)+1;
				НомерПакета = Число(Рез.Fields(0).Value);
			КонецЕсли; 
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерПакета;
	
КонецФункции

//Выполняет запрос и возвращает данные запроса
Функция ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено, Узел = Неопределено) Экспорт
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Установим заглушку временно
	Если НЕ Узел = Неопределено Тогда		
		Если Узел.ТестоваяВыгрузка Тогда		
			Возврат Ложь;		
		КонецЕсли; 	
	КонецЕсли; 
	//-- Spl_Апроф
	
	Если Соединение = Неопределено Тогда
		Если Узел <> Неопределено Тогда
			Соединение = УстановитьСоединение(Узел);
		КонецЕсли;
		Если Соединение = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,, "Потеряно соединение с базой Solvo");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	//++ Spl_Апроф 05.12.2014 (k.russkih@a-prof.ru)
	//МассивПараметров = Новый Массив;
	//Если Параметр1 <> Неопределено Тогда
	//	МассивПараметров.Добавить(Параметр1);
	//КонецЕсли;
	//Если Параметр2 <> Неопределено Тогда
	//	МассивПараметров.Добавить(Параметр2);
	//КонецЕсли;
	//Если Параметр3 <> Неопределено Тогда
	//	МассивПараметров.Добавить(Параметр3);
	//КонецЕсли;
		
	SQL_команда = Новый COMОбъект("ADODB.Command"); 	//Команда выполняемая на Скуль
	SQL_команда.ActiveConnection = Соединение;
	SQL_команда.CommandText = ТекстЗапроса;
	SQL_команда.CommandType = 1;	//Текстовый запрос
	
	Если МассивПараметров <> Неопределено Тогда
		Для Каждого ТекПараметр Из МассивПараметров Цикл
			Если ТипЗнч(ТекПараметр) = Тип("Строка") Тогда
				Параметр = SQL_команда.CreateParameter(,129,,СтрДлина(ТекПараметр),ТекПараметр);
				SQL_команда.Parameters.Append(Параметр);
			ИначеЕсли ТипЗнч(ТекПараметр) = Тип("Число") Тогда
				Если Цел(ТекПараметр) = ТекПараметр Тогда
					Параметр = SQL_команда.CreateParameter(,5,,15,ТекПараметр);
					SQL_команда.Parameters.Append(Параметр);
				Иначе
					Параметр = SQL_команда.CreateParameter(,5,,15,ТекПараметр);
					SQL_команда.Parameters.Append(Параметр);
				КонецЕсли;
			Иначе
				Параметр = SQL_команда.CreateParameter(,132,,СтрДлина(ТекПараметр),ТекПараметр);
				SQL_команда.Parameters.Append(Параметр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		Рез = SQL_команда.Execute();
		Возврат Рез;
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
		Рез = Неопределено;
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

//Преобразует строку в число
Функция ПолучитьЧисло(Стр)
	Разделитель = ?(Найти(Строка(0.1),",") = 0, ".", ",");
	Рез = СтрЗаменить(Стр, ",", Разделитель);
	Рез = СтрЗаменить(Стр, ".", Разделитель);
	Рез = СтрЗаменить(Стр, Символы.НПП, "");
	Попытка
		Результат = Число(Рез);
	Исключение
		Результат = 0;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

//Запускает обмен с Solvo под определенным пользователем (обходной режим)
Процедура ЗапуститьОбходнойРежимОбменаСолво() Экспорт
	#Если Клиент Тогда
		Если ИмяПользователя() = "ОбменSolvo" Тогда
			Для СчПовторов = 1 По 12 Цикл
				Попытка
					АП_ВыполнитьОбменСолво();
				Исключение
					Продолжить;
				КонецПопытки;
				Предупреждение("Пауза в обмене Solvo", 60);
			КонецЦикла;
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

//Формирует соответствие по номерам пакетов и обновляет строку ошибок
Процедура ЗаписатьОшибкуПакета(ОшибочныеПакеты = Неопределено, НомерПакета = 0, СтрокаОшибок = "") Экспорт
	Если ОшибочныеПакеты = Неопределено Тогда
		ОшибочныеПакеты = Новый Соответствие;
	КонецЕсли;
	
	Стр = ОшибочныеПакеты.Получить(НомерПакета);
	Стр = ?(Стр = Неопределено, "Errors (ошибки):", Стр);
	
	Стр = Стр + ". "+СтрокаОшибок;
	
	ОшибочныеПакеты.Вставить(НомерПакета, Стр);
КонецПроцедуры

Функция ПроверитьВозможностьФормированияПакета(РезультатЗапроса, Узел) Экспорт

	Если НЕ РезультатЗапроса = Неопределено Тогда
		
		//Добавили для возможности выгрузки в файл, а не напрямую в СОЛВО
		Если Узел = Неопределено И ТипЗнч(РезультатЗапроса) = Тип("Булево") Тогда
			Возврат 1;		
		ИначеЕсли Узел.ТестоваяВыгрузка Тогда
			Возврат 1;
		Иначе	
			Возврат РезультатЗапроса.EOF();
		КонецЕсли; 
			
	КонецЕсли; 	

КонецФункции // ()

Функция СоздадимОбъектДляЗаписиXML(Узел, ИмяФайла) Экспорт 
	
	ЗаписьXML = Новый ЗаписьXML;
	Если Узел.ТестоваяВыгрузка Тогда
		ЗаписьXML.ОткрытьФайл(Узел.КаталогДляТестовойВыгрузки + СокрЛП(ИмяФайла) + ".xml", "KOI8-R");	
	Иначе	
		ЗаписьXML.УстановитьСтроку("KOI8-R");	
	КонецЕсли; 
	
	Возврат ЗаписьXML;

КонецФункции // ()

