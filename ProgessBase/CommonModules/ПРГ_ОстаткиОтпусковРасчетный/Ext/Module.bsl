////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА ОСТАТКИ ОТПУСКОВ
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ОстатокОтпускаСотрудникаНаДату(Сотрудник, ДатаОстатков = '00010101', ЭтоРасчетПриУвольнении = Ложь, ПорядокРасчетаОсновногоОтпуска = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Строка = ТаблицаДанных.Добавить();
	Строка.Сотрудник							= Сотрудник;
	Строка.ДатаОстатков							= НачалоДня(ДатаОстатков);
	Строка.ЭтоРасчетПриУвольнении				= ЭтоРасчетПриУвольнении;
	Если ЭтоРасчетПриУвольнении Тогда
		Если ПорядокРасчетаОсновногоОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоШестидневке Тогда
			Строка.ОтборПоВидуЕжегодногоОтпуска	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка, "ВидЕжегодногоОтпуска");
		Иначе
			Строка.ОтборПоВидуЕжегодногоОтпуска	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни, "ВидЕжегодногоОтпуска");
		КонецЕсли;
	КонецЕсли;
	
	Результат = ОстаткиОтпусков(ТаблицаДанных)[0];
	
	ОстаткиВРазрезеРабочихЛетИВидовОтпусков = Новый Массив;
	Для Каждого РабочийГод Из Результат.ДанныеРасчета Цикл
		Если РабочийГод.ДоступноДляСписанияВЭтомГоду = 0 Тогда
			Продолжить;
		КонецЕсли;
		ОстаткиВРазрезеРабочихЛетИВидовОтпусков.Добавить(Новый Структура("ВидЕжегодногоОтпуска, ОсталосьДней, РабочийГодС, РабочийГодПо, ПоследнийРабочийГод",
			РабочийГод.ВидЕжегодногоОтпуска, РабочийГод.ДоступноДляСписанияВЭтомГоду, РабочийГод.ДатаНачала, РабочийГод.ДатаОкончания, РабочийГод.ПоследнийРабочийГод));
	КонецЦикла;
	
	Возврат Новый Структура("ОстатокНаДату, РабочийГодС, РабочийГодПо, Примечание, ОстаткиВРазрезеВидовОтпусков, ОстаткиВРазрезеРабочихЛетИВидовОтпусков",
		Результат.ОстатокНаДату, Результат.РабочийГодС, Результат.РабочийГодПо, Результат.Примечание, Результат.ОстатокНаДатуПоВидамЕжегодныхОтпусков, ОстаткиВРазрезеРабочихЛетИВидовОтпусков);
	
КонецФункции

Функция ОстатокОтпускаСпискаСотрудниковНаДату(МассивСотрудников, ДатаОстатков = '00010101') Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник				= Сотрудник;
		Строка.ДатаОстатков				= НачалоДня(ДатаОстатков);
	КонецЦикла;
	
	Результат = ОстаткиОтпусков(ТаблицаДанных);
	
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("Сотрудник");
	ТаблицаСведений.Колонки.Добавить("ОстатокНаДату");
	ТаблицаСведений.Колонки.Добавить("РабочийГодС");
	ТаблицаСведений.Колонки.Добавить("РабочийГодПо");
	ТаблицаСведений.Колонки.Добавить("Примечание");
	ТаблицаСведений.Колонки.Добавить("ОстаткиВРазрезеВидовОтпусков");
	ТаблицаСведений.Колонки.Добавить("ОстаткиВРазрезеРабочихЛетИВидовОтпусков");
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		ОстаткиВРазрезеРабочихЛетИВидовОтпусков = Новый Массив;
		Для Каждого РабочийГод Из СтрокаРезультата.ДанныеРасчета Цикл
			Если РабочийГод.ДоступноДляСписанияВЭтомГоду = 0 Тогда
				Продолжить;
			КонецЕсли;
			ОстаткиВРазрезеРабочихЛетИВидовОтпусков.Добавить(Новый Структура("ВидЕжегодногоОтпуска, ОсталосьДней, РабочийГодС, РабочийГодПо, ПоследнийРабочийГод",
				РабочийГод.ВидЕжегодногоОтпуска, РабочийГод.ДоступноДляСписанияВЭтомГоду, РабочийГод.ДатаНачала, РабочийГод.ДатаОкончания, РабочийГод.ПоследнийРабочийГод));
		КонецЦикла;
		
		Строка = ТаблицаСведений.Добавить();
		Строка.Сотрудник								= СтрокаРезультата.Сотрудник;
		Строка.ОстатокНаДату							= СтрокаРезультата.ОстатокНаДату;
		Строка.РабочийГодС								= СтрокаРезультата.РабочийГодС;
		Строка.РабочийГодПо								= СтрокаРезультата.РабочийГодПо;
		Строка.Примечание								= СтрокаРезультата.Примечание;
		Строка.ОстаткиВРазрезеВидовОтпусков				= СтрокаРезультата.ОстатокНаДатуПоВидамЕжегодныхОтпусков;
		Строка.ОстаткиВРазрезеРабочихЛетИВидовОтпусков	= ОстаткиВРазрезеРабочихЛетИВидовОтпусков;
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция СведенияОбОтпускахСпискаСотрудников(ТаблицаОтпусков, ТекущийРегистратор = Неопределено, ЭтоЗапланированныйОтпуск = Ложь, ДатаДокумента = '00010101') Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = НачалоДня(НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Для Каждого Отпуск Из ТаблицаОтпусков Цикл
		Если Отпуск.Сотрудник.Пустая() Или Не ЗначениеЗаполнено(Отпуск.ДатаНачала) Или Не ЗначениеЗаполнено(Отпуск.ДатаОкончания) Или Отпуск.ДатаНачала > Отпуск.ДатаОкончания Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник						= Отпуск.Сотрудник;
		Строка.ДатаОстатков						= НачалоДня(Отпуск.ДатаОкончания);
		
		Строка.ДатаНачала						= Отпуск.ДатаНачала;
		Строка.ДатаОкончания					= Отпуск.ДатаОкончания;
		Строка.ТекущийРегистратор				= ТекущийРегистратор;
		
		Строка.ЭтоЗапланированныйОтпуск			= ЭтоЗапланированныйОтпуск;
		Строка.ДатаДокумента					= НачалоДня(ДатаДокумента);
		
		Если ТипЗнч(ТаблицаОтпусков) = Тип("ТаблицаЗначений") И ТаблицаОтпусков.Колонки.Найти("ВидЕжегодногоОтпуска") <> Неопределено
			Или Метаданные.НайтиПоТипу(Тип(ТаблицаОтпусков)) <> Неопределено И Метаданные.НайтиПоТипу(Тип(ТаблицаОтпусков)).Реквизиты.Найти("ВидЕжегодногоОтпуска") <> Неопределено Тогда
			Строка.ОтборПоВидуЕжегодногоОтпуска	= Отпуск.ВидЕжегодногоОтпуска;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("Сотрудник");
	ТаблицаСведений.Колонки.Добавить("ДатаНачала");
	ТаблицаСведений.Колонки.Добавить("ДатаОкончания");
	ТаблицаСведений.Колонки.Добавить("РабочийГодС");
	ТаблицаСведений.Колонки.Добавить("РабочийГодПо");
	ТаблицаСведений.Колонки.Добавить("Примечание");
	ТаблицаСведений.Колонки.Добавить("ВидЕжегодногоОтпуска");
	ТаблицаСведений.Колонки.Добавить("КоличествоДнейВсего");
	ТаблицаСведений.Колонки.Добавить("КоличествоДнейПрошлыхЛет");
	ТаблицаСведений.Колонки.Добавить("КоличествоДнейАвансом");
	ТаблицаСведений.Колонки.Добавить("ОстаткиВРазрезеВидовОтпусков");
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат ТаблицаСведений;
	КонецЕсли;
	
	Результат = ОстаткиОтпусков(ТаблицаДанных);
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Строка = ТаблицаСведений.Добавить();
		Строка.Сотрудник					= СтрокаРезультата.Сотрудник;
		Строка.ДатаНачала					= СтрокаРезультата.ДатаНачалаПериода;
		Строка.ДатаОкончания				= СтрокаРезультата.ДатаОкончанияПериода;
		Строка.РабочийГодС					= СтрокаРезультата.РабочийГодПериодаС;
		Строка.РабочийГодПо					= СтрокаРезультата.РабочийГодПериодаПо;
		Строка.Примечание					= СтрокаРезультата.ПримечаниеПериода;
		Строка.ВидЕжегодногоОтпуска			= СтрокаРезультата.ВидЕжегодногоОтпускаПериода;
		Строка.КоличествоДнейВсего			= СтрокаРезультата.КоличествоДнейВПериоде;
		Строка.КоличествоДнейПрошлыхЛет		= СтрокаРезультата.ПериодомИспользованоДнейПрошлыхЛет;
		Строка.КоличествоДнейАвансом		= СтрокаРезультата.ПериодомИспользованоДнейАвансом;
		Строка.ОстаткиВРазрезеВидовОтпусков	= СтрокаРезультата.ОстатокНаДатуПоВидамЕжегодныхОтпусков;
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция РабочийГодПериодаОтпуска(Сотрудник, ДатаНачала, ДатаОкончания, ТекущийРегистратор, ПорядокРасчетаОсновногоОтпуска, ИсключитьОсновнойОтпуск, ВидДополнительногоОтпуска, ДатаНачалаДополнительногоОтпуска = '00010101', Знач ДатаОкончанияДополнительногоОтпуска = '00010101') Экспорт
	
	РабочийГодС		= '00010101';
	РабочийГодПо	= '00010101';
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат Новый Структура("Сотрудник, РабочийГодС, РабочийГодПо", Сотрудник, РабочийГодС, РабочийГодПо);
	КонецЕсли;
	
	Если ПорядокРасчетаОсновногоОтпуска = Неопределено Тогда
		ПорядокРасчетаОсновногоОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПустаяСсылка();
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	ДатаОкончанияОсновногоОтпуска = ?(Не ЗначениеЗаполнено(ДатаНачалаДополнительногоОтпуска) Или ЗначениеЗаполнено(ДатаОкончанияДополнительногоОтпуска), ДатаОкончания, НачалоДня(ДатаНачалаДополнительногоОтпуска - 1));
	
	Если Не ИсключитьОсновнойОтпуск Тогда
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник						= Сотрудник;
		Строка.ДатаОстатков						= НачалоДня(ДатаОкончанияОсновногоОтпуска);
		
		Строка.ДатаНачала						= ДатаНачала;
		Строка.ДатаОкончания					= ДатаОкончанияОсновногоОтпуска;
		Строка.ТекущийРегистратор				= ТекущийРегистратор;
		Если ПорядокРасчетаОсновногоОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоШестидневке Тогда
			Строка.ОтборПоВидуЕжегодногоОтпуска	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка, "ВидЕжегодногоОтпуска");
		Иначе
			Строка.ОтборПоВидуЕжегодногоОтпуска	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни, "ВидЕжегодногоОтпуска");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ВидДополнительногоОтпуска.Пустая() И ЗначениеЗаполнено(ДатаНачалаДополнительногоОтпуска) Тогда
		Если Не ЗначениеЗаполнено(ДатаОкончанияДополнительногоОтпуска) Тогда
			ДатаОкончанияДополнительногоОтпуска = ДатаОкончания;
		КонецЕсли;
		
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник						= Сотрудник;
		Строка.ДатаОстатков						= НачалоДня(ДатаОкончанияДополнительногоОтпуска);
		
		Строка.ДатаНачала						= ДатаНачалаДополнительногоОтпуска;
		Строка.ДатаОкончания					= ДатаОкончанияДополнительногоОтпуска;
		Строка.ТекущийРегистратор				= ТекущийРегистратор;
		Строка.ОтборПоВидуЕжегодногоОтпуска		= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВидДополнительногоОтпуска, "ВидЕжегодногоОтпуска");
	КонецЕсли;
	
	Для Каждого Результат Из ОстаткиОтпусков(ТаблицаДанных) Цикл
		Если Не ЗначениеЗаполнено(РабочийГодС) Или РабочийГодС > Результат.РабочийГодПериодаС Тогда
			РабочийГодС		= Результат.РабочийГодПериодаС;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(РабочийГодПо) Или РабочийГодПо < Результат.РабочийГодПериодаПо Тогда
			РабочийГодПо	= Результат.РабочийГодПериодаПо;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Сотрудник, РабочийГодС, РабочийГодПо", Сотрудник, РабочийГодС, РабочийГодПо);
	
КонецФункции

Функция СправкаПоОтпускамСотрудника(Сотрудник, ДатаОстатков = '00010101', ЭтоРасчетПриУвольнении = Ложь, ПорядокРасчетаОсновногоОтпуска = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Строка = ТаблицаДанных.Добавить();
	Строка.Сотрудник							= Сотрудник;
	Строка.ДатаОстатков							= НачалоДня(ДатаОстатков);
	Строка.ЭтоРасчетПриУвольнении				= ЭтоРасчетПриУвольнении;
	Если ЭтоРасчетПриУвольнении Тогда
		Если ПорядокРасчетаОсновногоОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоШестидневке Тогда
			Строка.ОтборПоВидуЕжегодногоОтпуска	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка, "ВидЕжегодногоОтпуска");
		Иначе
			Строка.ОтборПоВидуЕжегодногоОтпуска	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни, "ВидЕжегодногоОтпуска");
		КонецЕсли;
	КонецЕсли;
	
	Результат = ОстаткиОтпусков(ТаблицаДанных)[0];
	
	ФорматДаты = "ДФ='d MMM yyyy ""г.""'";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаПоОтпускамСотрудника";
	
	Макет = ПолучитьОбщийМакет("СправкаПоОтпускамСотрудника");
	
	Если Не ЗначениеЗаполнено(Результат.ДатаПриема) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ОбщиеДанные");
		ОбластьМакета.Параметры.Сотрудник						= Результат.Сотрудник;
		Если Результат.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			ОбластьМакета.Параметры.ОбособленноеПодразделение	= "Сотрудница не принята на работу";
		Иначе
			ОбластьМакета.Параметры.ОбособленноеПодразделение	= "Сотрудник не принят на работу";
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
	КонецЕсли;
	
	// Шапка отчета: место работы сотрудника и дата приема
	ОбластьМакета = Макет.ПолучитьОбласть("ОбщиеДанные");
	ОбластьМакета.Параметры.Заполнить(Результат);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Период		= Формат(Результат.ДатаПриема, ФорматДаты);
	Если Результат.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
		ОбластьМакета.Параметры.Комментарий	= "Принята на работу";
	Иначе
		ОбластьМакета.Параметры.Комментарий	= "Принят на работу";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если Результат.ПравоНаОтпускПриПриемеНаРаботу.Количество() > 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Текст			= "Ежегодно предоставляемые отпуска";
		ТабДокумент.Вывести(ОбластьМакета);
		Для Каждого ПоложенныйВидЕжегодногоОтпуска Из Результат.ПравоНаОтпускПриПриемеНаРаботу Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Текст			= "     " + ПоложенныйВидЕжегодногоОтпуска.ВидЕжегодногоОтпуска;
			ОбластьМакета.Параметры.КоличествоДней	= "" + ПоложенныйВидЕжегодногоОтпуска.КоличествоДнейОтпускаВГод + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ПоложенныйВидЕжегодногоОтпуска.КоличествоДнейОтпускаВГод) + " " + ПоложенныйВидЕжегодногоОтпуска.ТипЕжегодногоОтпуска;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
	КонецЕсли;
	
	// Данные отчета в следующем порядке:
	//  1 - Изменения дней отпуска в год
	//  2 - Продления рабочего года
	//  3 - Фактические отпуска
	//  4 - Окончание рабочего года / Изменение остатка
	ТаблицаМакетовЗаПериод = Новый ТаблицаЗначений;
	ТаблицаМакетовЗаПериод.Колонки.Добавить("Период");
	ТаблицаМакетовЗаПериод.Колонки.Добавить("ДополнительныйПериод");
	ТаблицаМакетовЗаПериод.Колонки.Добавить("Порядок");
	ТаблицаМакетовЗаПериод.Колонки.Добавить("МассивОбластей");
	
	Для Каждого РабочийГод Из Результат.ДанныеРасчета Цикл
		// Изменения количества дней отпуска в год
		Для Каждого ИзменениеДней Из РабочийГод.ПраваНаЕжегодныйОтпуск Цикл
			МакетИзменения = ТаблицаМакетовЗаПериод.НайтиСтроки(Новый Структура("Период, Порядок", ИзменениеДней.ДатаДействия, 1));
			Если МакетИзменения.Количество() = 0 Тогда
				МассивОбластей = Новый Массив;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
				ОбластьМакета.Параметры.Период			= Формат(ИзменениеДней.ДатаДействия, ФорматДаты);
				ОбластьМакета.Параметры.Комментарий		= "Изменено количество дней отпуска в год";
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "     " + ИзменениеДней.ВидЕжегодногоОтпуска;
				ОбластьМакета.Параметры.КоличествоДней		= "" + ИзменениеДней.КоличествоДнейОтпускаВГод + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ИзменениеДней.КоличествоДнейОтпускаВГод) + " " + ИзменениеДней.ТипЕжегодногоОтпуска;
				МассивОбластей.Добавить(ОбластьМакета);
				
				Строка = ТаблицаМакетовЗаПериод.Добавить();
				Строка.Период				= ИзменениеДней.ДатаДействия;
				Строка.Порядок				= 1;
				Строка.МассивОбластей		= МассивОбластей;
				
			Иначе
				Строка = МакетИзменения[0];
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "     " + ИзменениеДней.ВидЕжегодногоОтпуска;
				ОбластьМакета.Параметры.КоличествоДней		= "" + ИзменениеДней.КоличествоДнейОтпускаВГод + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ИзменениеДней.КоличествоДнейОтпускаВГод) + " " + ИзменениеДней.ТипЕжегодногоОтпуска;
				Строка.МассивОбластей.Добавить(ОбластьМакета);
				
			КонецЕсли;
		КонецЦикла;
		
		// Продления рабочего года
		Для Каждого Отклонение Из РабочийГод.Отклонения Цикл
			МакетОтклонения = ТаблицаМакетовЗаПериод.НайтиСтроки(Новый Структура("Период, Порядок", Отклонение.ДатаНачалаОтсутствия, 2));
			Если МакетОтклонения.Количество() = 0 Тогда
				МассивОбластей = Новый Массив;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
				ОбластьМакета.Параметры.Период				= Формат(Отклонение.ДатаНачалаОтсутствия, ФорматДаты) + " - " + Формат(Отклонение.ДатаОкончанияОтсутствия, ФорматДаты);
				ОбластьМакета.Параметры.Комментарий			= Отклонение.ПричинаОтсутствия;
				ОбластьМакета.Параметры.КоличествоДней		= "" + Отклонение.КоличествоДнейОтсутствия + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отклонение.КоличествоДнейОтсутствия);
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСРасшифровкой");
				ОбластьМакета.Параметры.Текст				= Отклонение.Документ;
				ОбластьМакета.Параметры.ТекстРасшифровка	= Отклонение.ДокументРасшифровка;
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "Рабочий год продлен на";
				ОбластьМакета.Параметры.КоличествоДней		= "" + Отклонение.КоличествоДнейПродления + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отклонение.КоличествоДнейПродления);
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "     " + Отклонение.ВидЕжегодногоОтпуска;
				МассивОбластей.Добавить(ОбластьМакета);
				
				Строка = ТаблицаМакетовЗаПериод.Добавить();
				Строка.Период			= Отклонение.ДатаНачалаОтсутствия;
				Строка.Порядок			= 2;
				Строка.МассивОбластей	= МассивОбластей;
				
			Иначе
				Строка = МакетОтклонения[0];
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "     " + Отклонение.ВидЕжегодногоОтпуска;
				Строка.МассивОбластей.Добавить(ОбластьМакета);
				
			КонецЕсли;
		КонецЦикла;
		
		// Фактические отпуска, включая сторно-отпуска и компенсацию отпуска
		Для Каждого Отпуск Из РабочийГод.ФактическиеОтпуска Цикл
			МассивОбластей = Новый Массив;
			
			Если Отпуск.Компенсация Тогда
				ОбластьМакета = Макет.ПолучитьОбласть(?(Отпуск.КоличествоДнейОтпуска >= 0, "Шапка", "СторноШапка"));
				ОбластьМакета.Параметры.Период			= Формат(Отпуск.ДатаНачалаОтпуска, ФорматДаты);
				ОбластьМакета.Параметры.Комментарий		= "Компенсировано отпуска";
				ОбластьМакета.Параметры.КоличествоДней	= "" + Отпуск.КоличествоДнейОтпуска + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.КоличествоДнейОтпуска);
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСРасшифровкой");
				ОбластьМакета.Параметры.Текст				= Отпуск.Документ;
				ОбластьМакета.Параметры.ТекстРасшифровка	= Отпуск.ДокументРасшифровка;
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст			= Отпуск.ВидЕжегодногоОтпуска;
				ОбластьМакета.Параметры.КоличествоДней	= "" + Отпуск.КоличествоДнейОтпуска + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.КоличествоДнейОтпуска);
				МассивОбластей.Добавить(ОбластьМакета);
				
				Строка = ТаблицаМакетовЗаПериод.Добавить();
				Строка.Период				= Отпуск.ДатаНачалаОтпуска;
				Строка.ДополнительныйПериод	= Отпуск.ДатаРегистрации;
				Строка.Порядок				= 3;
				Строка.МассивОбластей		= МассивОбластей;
				
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть(?(Отпуск.КоличествоДнейОтпуска >= 0, "Шапка", "СторноШапка"));
				ОбластьМакета.Параметры.Период			= Формат(Отпуск.ДатаНачалаОтпуска, ФорматДаты) + " - " + Формат(Отпуск.ДатаОкончанияОтпуска, ФорматДаты);
				ОбластьМакета.Параметры.Комментарий		= Отпуск.ВидЕжегодногоОтпуска;
				ОбластьМакета.Параметры.КоличествоДней	= "" + Отпуск.КоличествоДнейОтпуска + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.КоличествоДнейОтпуска);
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСРасшифровкой");
				ОбластьМакета.Параметры.Текст				= Отпуск.Документ;
				ОбластьМакета.Параметры.ТекстРасшифровка	= Отпуск.ДокументРасшифровка;
				МассивОбластей.Добавить(ОбластьМакета);
				
				Если Отпуск.КоличествоДнейОтпуска >= 0 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст			= "Рабочий год: " + Формат(Отпуск.РабочийГодС, ФорматДаты) + " - " + Формат(Отпуск.РабочийГодПо, ФорматДаты);
					МассивОбластей.Добавить(ОбластьМакета);
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст			= "Использовано отпуска";
					ОбластьМакета.Параметры.КоличествоДней	= "" + Отпуск.КоличествоДнейОтпуска + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.КоличествоДнейОтпуска);
					МассивОбластей.Добавить(ОбластьМакета);
					
					КоличествоСтрок = ?(Отпуск.ИспользованоДнейПрошлыхЛет > 0, 1, 0) + ?(Отпуск.ИспользованоДнейАвансом > 0, 1, 0);
					Если КоличествоСтрок > 1 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("Строка");
						ОбластьМакета.Параметры.Текст		= "  из них";
						МассивОбластей.Добавить(ОбластьМакета);
						
						ОбщийТекст = "     ";
					Иначе
						ОбщийТекст = "  из них ";
					КонецЕсли;
					Если Отпуск.ИспользованоДнейПрошлыхЛет > 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("Строка");
						ОбластьМакета.Параметры.Текст			= ОбщийТекст + "за счет отпусков прошлых лет";
						ОбластьМакета.Параметры.КоличествоДней	= "" + Отпуск.ИспользованоДнейПрошлыхЛет + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.ИспользованоДнейПрошлыхЛет);
						МассивОбластей.Добавить(ОбластьМакета);
					КонецЕсли;
					Если Отпуск.ИспользованоДнейАвансом > 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
						ОбластьМакета.Параметры.Текст			= ОбщийТекст + "за счет отпусков будущего периода";
						ОбластьМакета.Параметры.КоличествоДней	= "" + Отпуск.ИспользованоДнейАвансом + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.ИспользованоДнейАвансом);
						МассивОбластей.Добавить(ОбластьМакета);
					КонецЕсли;
					
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
					ОбластьМакета.Параметры.Текст			= "Возвращено отпуска";
					ОбластьМакета.Параметры.КоличествоДней	= "" + (-Отпуск.КоличествоДнейОтпуска) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Отпуск.КоличествоДнейОтпуска);
					МассивОбластей.Добавить(ОбластьМакета);
					
				КонецЕсли;
				
				Строка = ТаблицаМакетовЗаПериод.Добавить();
				Строка.Период				= Отпуск.ДатаОкончанияОтпуска;
				Строка.ДополнительныйПериод	= Отпуск.ДатаРегистрации;
				Строка.Порядок				= 3;
				Строка.МассивОбластей		= МассивОбластей;
				
			КонецЕсли;
		КонецЦикла;
		
		// Введенны остатки
		Если РабочийГод.ВведенныеОстатки <> Неопределено Тогда
			Остаток					= РабочийГод.ВведенныеОстатки;
			ДатаВведенныхОстатков	= КонецДня(Остаток.ДатаОкончанияРабочегоГода);
			
			Если Не Остаток.ПоследнийГодОстатков Тогда
				Продолжить;
			КонецЕсли;
			
			МакетОтклонения = ТаблицаМакетовЗаПериод.НайтиСтроки(Новый Структура("Период, Порядок", ДатаВведенныхОстатков, 4));
			Если МакетОтклонения.Количество() = 0 Тогда
				МассивОбластей = Новый Массив;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
				ОбластьМакета.Параметры.Период				= Формат(ДатаВведенныхОстатков, ФорматДаты);
				ОбластьМакета.Параметры.Комментарий			= "Введены остатки";
				ОбластьМакета.Параметры.КоличествоДней		= "" + Остаток.Количество + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Остаток.Количество);
				МассивОбластей.Добавить(ОбластьМакета);
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "     " + РабочийГод.ВидЕжегодногоОтпуска;
				ОбластьМакета.Параметры.КоличествоДней		= "" + Остаток.Количество + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Остаток.Количество);
				МассивОбластей.Добавить(ОбластьМакета);
				
				Строка = ТаблицаМакетовЗаПериод.Добавить();
				Строка.Период				= ДатаВведенныхОстатков;
				Строка.Порядок				= 4;
				Строка.МассивОбластей		= МассивОбластей;
				
			Иначе
				Строка = МакетОтклонения[0];
				
				ОбластьШапка = Строка.МассивОбластей[0];
				КоличествоДней = Сред(ОбластьШапка.Параметры.КоличествоДней, 1, Найти(ОбластьШапка.Параметры.КоличествоДней, " ") - 1);
				Если ЗначениеЗаполнено(КоличествоДней) И ОбщегоНазначения.ТолькоЦифрыВСтроке(КоличествоДней) Тогда
					КоличествоДней = Число(КоличествоДней) + Остаток.Количество;
					ОбластьШапка.Параметры.КоличествоДней		= "" + КоличествоДней + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",КоличествоДней);
				КонецЕсли;
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст				= "     " + РабочийГод.ВидЕжегодногоОтпуска;
				ОбластьМакета.Параметры.КоличествоДней		= "" + Остаток.Количество + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Остаток.Количество);
				Строка.МассивОбластей.Добавить(ОбластьМакета);
				
			КонецЕсли;
			
		Иначе // Окончание рабочего года для всех лет, кроме последнего
			Если Не РабочийГод.ПоследнийРабочийГод Тогда
				МакетРабочегоГода = ТаблицаМакетовЗаПериод.НайтиСтроки(Новый Структура("Период, Порядок", РабочийГод.ДатаОкончания, 4));
				Если МакетРабочегоГода.Количество() = 0 Тогда
					МассивОбластей = Новый Массив;
					
					ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
					ОбластьМакета.Параметры.Комментарий		= ?(РабочийГод.ДатаОкончания < НачалоДня(ТекущаяДатаСеанса()), "Закончился рабочий год", "Рассчитан рабочий год");
					ОбластьМакета.Параметры.Период			= Формат(РабочийГод.ДатаНачала, ФорматДаты) + " - " + Формат(РабочийГод.ДатаОкончания, ФорматДаты);
					МассивОбластей.Добавить(ОбластьМакета);
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст			= "Остаток отпуска";
					МассивОбластей.Добавить(ОбластьМакета);
					
					ОбластьМакета = Макет.ПолучитьОбласть(?(РабочийГод.ОстатокНаКонецТекущегоГода >= 0, "Строка", "ВажнаяСтрока"));
					ОбластьМакета.Параметры.Текст			= "     " + РабочийГод.ВидЕжегодногоОтпуска;
					ОбластьМакета.Параметры.КоличествоДней	= "" + РабочийГод.ОстатокНаКонецТекущегоГода + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",РабочийГод.ОстатокНаКонецТекущегоГода);
					МассивОбластей.Добавить(ОбластьМакета);
					
					Строка = ТаблицаМакетовЗаПериод.Добавить();
					Строка.Период			= РабочийГод.ДатаОкончания;
					Строка.Порядок			= 4;
					Строка.МассивОбластей	= МассивОбластей;
					
				Иначе
					Строка = МакетРабочегоГода[0];
					
					ОбластьМакета = Макет.ПолучитьОбласть(?(РабочийГод.ОстатокНаКонецТекущегоГода >= 0, "Строка", "ВажнаяСтрока"));
					ОбластьМакета.Параметры.Текст			= "     " + РабочийГод.ВидЕжегодногоОтпуска;
					ОбластьМакета.Параметры.КоличествоДней	= "" + РабочийГод.ОстатокНаКонецТекущегоГода + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",РабочийГод.ОстатокНаКонецТекущегоГода);
					Строка.МассивОбластей.Добавить(ОбластьМакета);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаМакетовЗаПериод.Сортировать("Период, ДополнительныйПериод, Порядок");
	
	Для Каждого СтрокаТаблицы Из ТаблицаМакетовЗаПериод Цикл
		Для Каждого ОбластьМакета Из СтрокаТаблицы.МассивОбластей Цикл
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
	КонецЦикла;
	
	// Подвал отчета: текущий остаток отпуска
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	Если ЭтоРасчетПриУвольнении Тогда
		ОбластьМакета.Параметры.Период		= "На дату увольнения, " + Формат(ДатаОстатков, ФорматДаты);
		
	ИначеЕсли Результат.СотрудникУволен Тогда
		ОбластьМакета.Параметры.Период		= "На дату увольнения, " + Формат(Результат.ДатаУвольнения, ФорматДаты);
		
	Иначе
		Если НачалоДня(ДатаОстатков) = НачалоДня(НачалоДня(ТекущаяДатаСеанса())) Тогда
			ОбластьМакета.Параметры.Период		= "На сегодня, " + Формат(НачалоДня(ДатаОстатков), ФорматДаты);
		ИначеЕсли НачалоДня(ДатаОстатков) = НачалоДня(КонецГода(ДатаОстатков)) Тогда
			ОбластьМакета.Параметры.Период		= "На конец года, " + Формат(НачалоДня(ДатаОстатков), ФорматДаты);
		ИначеЕсли НачалоДня(ДатаОстатков) = НачалоДня(КонецМесяца(ДатаОстатков)) Тогда
			ОбластьМакета.Параметры.Период		= "На конец месяца, " + Формат(НачалоДня(ДатаОстатков), ФорматДаты);
		Иначе
			ОбластьМакета.Параметры.Период		= "На " + Формат(НачалоДня(ДатаОстатков), ФорматДаты);
		КонецЕсли;
		
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если Результат.ОстатокНаДату >= 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Текст			= ?(ЭтоРасчетПриУвольнении Или Результат.СотрудникУволен, "Подлежит компенсации", "Неиспользованный отпуск");
		ОбластьМакета.Параметры.КоличествоДней	= "" + Результат.ОстатокНаДату + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Результат.ОстатокНаДату);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
		ОбластьМакета.Параметры.Текст			= ?(ЭтоРасчетПриУвольнении Или Результат.СотрудникУволен, "Подлежит удержанию", "Использовано за счет отпусков будущего периода");
		ОбластьМакета.Параметры.КоличествоДней	= "" + (-Результат.ОстатокНаДату) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",Результат.ОстатокНаДату);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Для Каждого ОстатокПоВидуОтпуска Из Результат.ОстатокНаДатуПоВидамЕжегодныхОтпусков Цикл
		Если ОстатокПоВидуОтпуска.КоличествоДней >= 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Текст			= "     " + ОстатокПоВидуОтпуска.ВидЕжегодногоОтпуска;
			ОбластьМакета.Параметры.КоличествоДней	= "" + ОстатокПоВидуОтпуска.КоличествоДней + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ОстатокПоВидуОтпуска.КоличествоДней);
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
			ОбластьМакета.Параметры.Текст			= "     " + ОстатокПоВидуОтпуска.ВидЕжегодногоОтпуска;
			ОбластьМакета.Параметры.КоличествоДней	= "" + (-ОстатокПоВидуОтпуска.КоличествоДней) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ОстатокПоВидуОтпуска.КоличествоДней);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПЕРВОНАЧАЛЬНОЕ ЗАПОЛНЕНИЕ И ОБНОВЛЕНИЕ ИБ

// Процедура заполняет справочник ВидыЕжегодныхОтпусков для корректной работы механизма Остатков отпусков
//
Процедура ЗаполнитьВидыЕжегодныхОтпусков() Экспорт
	
	ОтпускПоКалендарнымДням	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни, "ВидЕжегодногоОтпуска");
	ОтпускПоРабочимДням		= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка, "ВидЕжегодногоОтпуска");
	
	Если Не ОтпускПоКалендарнымДням.Пустая() И Не ОтпускПоКалендарнымДням.Пустая() И ОтпускПоКалендарнымДням <> ОтпускПоРабочимДням Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтпускПоКалендарнымДням.Пустая() Тогда
		ОсновнойОтпуск = Справочники.ВидыЕжегодныхОтпусков.СоздатьЭлемент();
		ОсновнойОтпуск.Наименование							= "Основной ежегодный отпуск";
		ОсновнойОтпуск.СпособРасчетаОстаткаОтпуска			= Перечисления.СпособыРасчетаОстаткаОтпуска.ПоКалендарнымДням;
		ОсновнойОтпуск.КоличествоДнейОтпускаВГод			= 28;
		ОсновнойОтпуск.ПредоставлятьОтпускВсемСотрудникам	= Истина;
		ОсновнойОтпуск.Записать();
		ОтпускПоКалендарнымДням = ОсновнойОтпуск.Ссылка;
	КонецЕсли;
	Если ОтпускПоРабочимДням.Пустая() Или ОтпускПоРабочимДням = ОтпускПоКалендарнымДням Тогда
		ОсновнойОтпуск = Справочники.ВидыЕжегодныхОтпусков.СоздатьЭлемент();
		ОсновнойОтпуск.Наименование							= "Оплачиваемые отпуска работников, заключивших трудовой договор на срок до двух месяцев";
		ОсновнойОтпуск.СпособРасчетаОстаткаОтпуска			= Перечисления.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням;
		ОсновнойОтпуск.КоличествоДнейОтпускаВГод			= 24;
		ОсновнойОтпуск.ПредоставлятьОтпускВсемСотрудникам	= Истина;
		ОсновнойОтпуск.ИдентификаторЭлемента				= "ДляТрудовыхДоговоровНаСрокДоДвухМесяцев";
		ОсновнойОтпуск.Записать();
		ОтпускПоРабочимДням = ОсновнойОтпуск.Ссылка;
	КонецЕсли;
	
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни,						ОтпускПоКалендарнымДням);
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни,					ОтпускПоКалендарнымДням);
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения,	ОтпускПоКалендарнымДням);
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни,	ОтпускПоКалендарнымДням);
	
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка,							ОтпускПоРабочимДням);
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка,					ОтпускПоРабочимДням);
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка,		ОтпускПоРабочимДням);
	ДобавитьВидЕжегодногоОтпускаВВидРасчета(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения,		ОтпускПоРабочимДням);
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторЭлементаДляКраткосрочногоТрудовогоДоговора() Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ВидЕжегодногоОтпуска");
	СтруктураРеквизитов.Вставить("ИдентификаторЭлемента", "ВидЕжегодногоОтпуска.ИдентификаторЭлемента");
	
	ОтпускПоРабочимДням		= ПолучитьЗначенияРеквизитов(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка, СтруктураРеквизитов);
	
	Если ОтпускПоРабочимДням.ВидЕжегодногоОтпуска.Пустая() Или Не ПустаяСтрока(ОтпускПоРабочимДням.ИдентификаторЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойОтпуск = ОтпускПоРабочимДням.ВидЕжегодногоОтпуска.ПолучитьОбъект();
	ОсновнойОтпуск.ИдентификаторЭлемента = "ДляТрудовыхДоговоровНаСрокДоДвухМесяцев";
	ОсновнойОтпуск.ОбменДанными.Загрузка = Истина;
	ОсновнойОтпуск.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функции, непосредственно используемые при расчете остатков отпусков

// Функция формирует описание таблицы данных для функции расчета остатка отпуска.
//
Функция ОписаниеТаблицыДанных()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	// Сотрудник и дата, на которую определяется остаток отпуска. Это ключ, который должен быть уникальным для каждой строки.
	ТаблицаДанных.Колонки.Добавить("Сотрудник",						Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаДанных.Колонки.Добавить("ДатаОстатков",					Новый ОписаниеТипов("Дата"));
	
	// Остатки отпуска на указанную дату.
	// Если ЭтоРасчетПриУвольнении = Истина, тогда алгоритм будет игнорировать движения, сделанные расчетом при увольнении.
	ТаблицаДанных.Колонки.Добавить("ЭтоРасчетПриУвольнении",		Новый ОписаниеТипов("Булево"));
	
	// График отпусков на год.
	// Фактические отпуска учитываются до даты документа, после даты документа только запланированные, если ЭтоЗапланированныйОтпуск = Истина.
	ТаблицаДанных.Колонки.Добавить("ЭтоЗапланированныйОтпуск",		Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ДатаДокумента",					Новый ОписаниеТипов("Дата"));
	
	// График отпусков и Отпуска организаций.
	// Если указан период отпуска, то для него по производственному календарю будет посчитано количество календарных дней отпуска и рабочие года,
	//  за которые эти остатки были и будут заработаны.
	// Для каждого периода в поле Примечание будет добавлена информация о том, как остатки отпуска будут израсходованы на указанный период.
	// ДатаОкончания = ДатаОстатков всегда.
	ТаблицаДанных.Колонки.Добавить("ДатаНачала",					Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ДатаОкончания",					Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ТекущийРегистратор",			Документы.ТипВсеСсылки());
	
	// Отбор по виду ежегодного отпуска
	ТаблицаДанных.Колонки.Добавить("ОтборПоВидуЕжегодногоОтпуска",	Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Функция формирует текстовое описание периода отпуска на основе переданных в качестве параметров данных
//
Функция ОписаниеПериодаОтпуска(КоличествоДнейВсего, КоличествоДнейПрошлыхЛет, КоличествоДнейАвансом, ДатаПриема, ДатаОстатков)
	
	Комментарий	= Строка(КоличествоДнейВсего) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",КоличествоДнейВсего);
	
	РасшифровкаКомментария = "";
	
	Если КоличествоДнейВсего > 0 Тогда
		Если КоличествоДнейПрошлыхЛет > 0 Тогда
			РасшифровкаКомментария = ", " + КоличествоДнейПрошлыхЛет + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",КоличествоДнейПрошлыхЛет) + " за счет отпусков прошлых лет";
		КонецЕсли;
		
		Если КоличествоДнейАвансом > 0 Тогда
			Если ПустаяСтрока(РасшифровкаКомментария) Тогда
				РасшифровкаКомментария = ", ";
			Иначе
				РасшифровкаКомментария = РасшифровкаКомментария + " и ";
			КонецЕсли;
			РасшифровкаКомментария = РасшифровкаКомментария + Строка(КоличествоДнейАвансом) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",КоличествоДнейАвансом) + " в счет будущего периода";
		КонецЕсли;
	КонецЕсли;
	
	Комментарий = Комментарий + РасшифровкаКомментария;
	
	Если ДатаПриема > ДобавитьМесяц(ДатаОстатков, -6) Тогда
		Если Не ПустаяСтрока(Комментарий) Тогда
			Комментарий = Комментарий + ". ";
		КонецЕсли;
		Комментарий = Комментарий + "Дата приема на работу: " + Формат(ДатаПриема, "ДФ='д ММММ гггг ""года""'");
		
	ИначеЕсли Не ЗначениеЗаполнено(ДатаПриема) Тогда
		Если Не ПустаяСтрока(Комментарий) Тогда
			Комментарий = Комментарий + ". ";
		КонецЕсли;
		Комментарий = Комментарий + "Не принят на работу";
		
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

// Функция собирает из ИБ все данные, необходимые для расчета остатков
//
Функция ИсходныеДанныеДляРассчетаОстатков(ТаблицаДанных)
	
	// Для расчета остатков отпусков необходимо:
	//	1. Определить дату приема на работу и увольнения;
	//	2. Получить таблицу последних введенных остатков;
	//	3. Получить таблицу всех отсутствий, влияющих на продление рабочего года;
	//	4. Получить таблицу всех изменений количества дней отпуска в год;
	//	5. Получить список фактических отпусков.
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаДанных",	ТаблицаДанных);
	
	// Формируем временную таблицу по переданным в функцию данным
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДанных.Сотрудник КАК Справочник.СотрудникиОрганизаций) КАК Сотрудник,
	|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ) КАК ДатаОстатков,
	|	ТаблицаДанных.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении,
	|	ТаблицаДанных.ЭтоЗапланированныйОтпуск КАК ЭтоЗапланированныйОтпуск,
	|	ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
	|	ТаблицаДанных.ДатаНачала КАК ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончания КАК ДатаОкончанияПериода,
	|	ТаблицаДанных.ТекущийРегистратор КАК ТекущийРегистратор,
	|	ВЫРАЗИТЬ(ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска КАК Справочник.ВидыЕжегодныхОтпусков) КАК ОтборПоВидуЕжегодногоОтпуска
	|ПОМЕСТИТЬ ВТТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаОстатков,
	|	ЭтоРасчетПриУвольнении
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	ТаблицаДанных.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	СУММА(ЕСТЬNULL(ПроизводственныйКалендарь.КалендарныеДни, 0)) КАК КоличествоКалендарныхДнейВПериоде,
	|	СУММА(ЕСТЬNULL(ПроизводственныйКалендарь.Шестидневка, 0)) КАК КоличествоРабочихДнейВПериоде
	|ПОМЕСТИТЬ ВТКоличествоДнейВПериодах
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаДанных.Сотрудник КАК Сотрудник,
	|		ТаблицаДанных.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|		ТаблицаДанных.ДатаОкончанияПериода КАК ДатаОкончанияПериода
	|	ИЗ
	|		ВТТаблицаДанных КАК ТаблицаДанных
	|	ГДЕ
	|		ТаблицаДанных.ДатаНачалаПериода <> ДАТАВРЕМЯ(1, 1, 1)
	|		И ТаблицаДанных.ДатаОкончанияПериода <> ДАТАВРЕМЯ(1, 1, 1)) КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ТаблицаДанных.ДатаНачалаПериода И ТаблицаДанных.ДатаОкончанияПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанных.Сотрудник,
	|	ТаблицаДанных.ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончанияПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаНачалаПериода,
	|	ДатаОкончанияПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	ТаблицаДанных.Сотрудник.Физлицо КАК ФизическоеЛицо,
	|	ТаблицаДанных.Сотрудник.ДатаПриемаНаРаботу КАК ДатаПриема,
	|	ТаблицаДанных.Сотрудник.ДатаУвольнения КАК ДатаУвольнения,
	|	ТаблицаДанных.Сотрудник.ТекущееОбособленноеПодразделение КАК ТекущаяОрганизация,
	|	ТаблицаДанных.Сотрудник.ТекущееПодразделениеОрганизации КАК ТекущееПодразделение,
	|	ТаблицаДанных.Сотрудник.ТекущаяДолжностьОрганизации КАК ТекущаяДолжность,
	|	ВЫБОР
	|		КОГДА НЕ УвольнениеИзОрганизацийРаботникиОрганизации.ПорядокРасчетаОтпуска ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА УвольнениеИзОрганизацийРаботникиОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоШестидневке)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоКалендарнымДням)
	|				КОНЕЦ
	|		КОГДА ВЫБОР
	|					КОГДА ТаблицаДанных.Сотрудник.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|							ИЛИ ТаблицаДанных.Сотрудник.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ДОБАВИТЬКДАТЕ(ТаблицаДанных.Сотрудник.ДатаНачала, МЕСЯЦ, 2) >= ТаблицаДанных.Сотрудник.ДатаОкончания
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоКалендарнымДням)
	|	КОНЕЦ КАК СпособРасчетаОтпусковПоТрудовомуДоговору
	|ПОМЕСТИТЬ ВТТекущиеКадровыеДанныеСотрудников
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|		ПО ТаблицаДанных.Сотрудник = УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник
	|			И ТаблицаДанных.Сотрудник.ДатаУвольнения = УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения
	|			И (УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Проведен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиОтпусковОрганизацийОстатки.Ссылка.Сотрудник КАК Сотрудник,
	|	ОстаткиОтпусковОрганизацийОстатки.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ОстаткиОтпусковОрганизацийОстатки.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	ОстаткиОтпусковОрганизацийОстатки.ДатаОкончанияРабочегоГода,
	|	ОстаткиОтпусковОрганизацийОстатки.Количество
	|ПОМЕСТИТЬ ВТНачальныеОстаткиОтпусков
	|ИЗ
	|	Справочник.ОстаткиОтпусковОрганизаций.Остатки КАК ОстаткиОтпусковОрганизацийОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаДанных.Сотрудник КАК Сотрудник,
	|			МАКСИМУМ(ОстаткиОтпусковОрганизаций.ДатаАктуальности) КАК ДатаАктуальности
	|		ИЗ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ТаблицаДанных.Сотрудник КАК Сотрудник
	|			ИЗ
	|				ВТТаблицаДанных КАК ТаблицаДанных) КАК ТаблицаДанных
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОстаткиОтпусковОрганизаций КАК ОстаткиОтпусковОрганизаций
	|				ПО ТаблицаДанных.Сотрудник = ОстаткиОтпусковОрганизаций.Сотрудник
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаДанных.Сотрудник) КАК СрезПоследнихОстатковОтпусков
	|		ПО ОстаткиОтпусковОрганизацийОстатки.Ссылка.Сотрудник = СрезПоследнихОстатковОтпусков.Сотрудник
	|			И ОстаткиОтпусковОрганизацийОстатки.Ссылка.ДатаАктуальности = СрезПоследнихОстатковОтпусков.ДатаАктуальности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостояниеРаботниковОрганизаций.Сотрудник КАК Сотрудник,
	|	СостояниеРаботниковОрганизаций.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ДОБАВИТЬКДАТЕ(СостояниеРаботниковОрганизаций.ДатаОкончанияОтпуска, ДЕНЬ, -1) КАК ДатаОкончанияОтпуска,
	|	ВЫБОР
	|		КОГДА СостояниеРаботниковОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяОтпускомБезСохраненияЗарплаты,
	|	СостояниеРаботниковОрганизаций.Состояние КАК ПричинаОтсутствия,
	|	СостояниеРаботниковОрганизаций.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТИсключаемыеИзОстатковОтпусковПериоды
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ЗаписиОтклонений.Сотрудник КАК Сотрудник,
	|		ЗаписиОтклонений.Период КАК ДатаНачалаОтпуска,
	|		ВЫБОР
	|			КОГДА ЗаписиОтклонений.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И (ЗаписиОтклоненийЗавершения.Период ЕСТЬ NULL 
	|						ИЛИ ЗаписиОтклоненийЗавершения.Период > ЗаписиОтклонений.ПериодЗавершения)
	|				ТОГДА ЗаписиОтклонений.ПериодЗавершения
	|			КОГДА ЕСТЬNULL(ЗаписиОтклоненийЗавершения.Период, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЗаписиОтклоненийЗавершения.Период
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ КАК ДатаОкончанияОтпуска,
	|		ЗаписиОтклонений.Состояние КАК Состояние,
	|		ЗаписиОтклонений.Регистратор КАК Регистратор
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТаблицаДанных.Сотрудник КАК Сотрудник,
	|			СостояниеРаботниковОрганизаций.Период КАК Период,
	|			СостояниеРаботниковОрганизаций.Состояние КАК Состояние,
	|			СостояниеРаботниковОрганизаций.ПериодЗавершения КАК ПериодЗавершения,
	|			СостояниеРаботниковОрганизаций.СостояниеЗавершения КАК СостояниеЗавершения,
	|			СостояниеРаботниковОрганизаций.Регистратор КАК Регистратор
	|		ИЗ
	|			ВТТаблицаДанных КАК ТаблицаДанных
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|				ПО ТаблицаДанных.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|					И (ВЫБОР
	|						КОГДА ТаблицаДанных.ЭтоЗапланированныйОтпуск
	|							ТОГДА ТаблицаДанных.ДатаДокумента
	|						ИНАЧЕ ТаблицаДанных.ДатаОстатков
	|					КОНЕЦ >= СостояниеРаботниковОрганизаций.Период)
	|					И (СостояниеРаботниковОрганизаций.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)))) КАК ЗаписиОтклонений
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ЗаписиОтклонений.Сотрудник КАК Сотрудник,
	|				ЗаписиОтклонений.ДатаОстатков КАК ДатаОстатков,
	|				ЗаписиОтклонений.ПериодНачала КАК ПериодНачала,
	|				СостояниеРаботниковОрганизацийЗавершения.Период КАК Период,
	|				СостояниеРаботниковОрганизацийЗавершения.Состояние КАК Состояние
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ТаблицаДанных.Сотрудник КАК Сотрудник,
	|					ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|					СостояниеРаботниковОрганизаций.Период КАК ПериодНачала,
	|					МИНИМУМ(СостояниеРаботниковОрганизацийЗавершения.Период) КАК ДатаСреза
	|				ИЗ
	|					ВТТаблицаДанных КАК ТаблицаДанных
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизацийЗавершения
	|							ПО СостояниеРаботниковОрганизаций.Сотрудник = СостояниеРаботниковОрганизацийЗавершения.Сотрудник
	|								И СостояниеРаботниковОрганизаций.Период < СостояниеРаботниковОрганизацийЗавершения.Период
	|						ПО ТаблицаДанных.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|							И (СостояниеРаботниковОрганизаций.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)))
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ТаблицаДанных.Сотрудник,
	|					ТаблицаДанных.ДатаОстатков,
	|					СостояниеРаботниковОрганизаций.Период) КАК ЗаписиОтклонений
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизацийЗавершения
	|					ПО ЗаписиОтклонений.Сотрудник = СостояниеРаботниковОрганизацийЗавершения.Сотрудник
	|						И ЗаписиОтклонений.ДатаСреза = СостояниеРаботниковОрганизацийЗавершения.Период) КАК ЗаписиОтклоненийЗавершения
	|			ПО ЗаписиОтклонений.Сотрудник = ЗаписиОтклоненийЗавершения.Сотрудник
	|				И ЗаписиОтклонений.Период < ЗаписиОтклоненийЗавершения.Период
	|				И ЗаписиОтклонений.Период = ЗаписиОтклоненийЗавершения.ПериодНачала) КАК СостояниеРаботниковОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаНачалаОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Сотрудник,
	|	ТаблицаДанных.ДатаОстатков,
	|	ВидыЕжегодныхОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
	|	ВидыЕжегодныхОтпусков.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|	ВЫБОР
	|		КОГДА ОсновныеВидыОтпусков.ВидЕжегодногоОтпуска ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОсновнойОтпуск
	|ПОМЕСТИТЬ ВТВидыЕжегодныхОтпусков
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДанных.Сотрудник КАК Сотрудник,
	|		ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|		ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска КАК ОтборПоВидуЕжегодногоОтпуска,
	|		ОсновныеНачисленияОрганизаций.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпускаДляИсключения
	|	ИЗ
	|		ВТТаблицаДанных КАК ТаблицаДанных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|				ПО (ВЫБОР
	|						КОГДА ТекущиеКадровыеДанныеСотрудников.СпособРасчетаОтпусковПоТрудовомуДоговору = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|							ТОГДА ОсновныеНачисленияОрганизаций.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни)
	|						ИНАЧЕ ОсновныеНачисленияОрганизаций.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка)
	|					КОНЕЦ)
	|			ПО ТаблицаДанных.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЕжегодныхОтпусков КАК ВидыЕжегодныхОтпусков
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ОсновныеНачисленияОрганизаций.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска
	|			ИЗ
	|				ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|			ГДЕ
	|				НЕ ОсновныеНачисленияОрганизаций.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|				И ОсновныеНачисленияОрганизаций.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни), ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка))) КАК ОсновныеВидыОтпусков
	|			ПО ВидыЕжегодныхОтпусков.Ссылка = ОсновныеВидыОтпусков.ВидЕжегодногоОтпуска
	|		ПО (НЕ ВидыЕжегодныхОтпусков.ПометкаУдаления)
	|			И (ВЫБОР
	|				КОГДА ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|					ТОГДА ТаблицаДанных.ВидЕжегодногоОтпускаДляИсключения <> ВидыЕжегодныхОтпусков.Ссылка
	|				ИНАЧЕ ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ВидыЕжегодныхОтпусков.Ссылка
	|			КОНЕЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЕжегодногоОтпуска,
	|	ОсновнойОтпуск
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|	КадроваяИсторияСотрудников.Период,
	|	КадроваяИсторияСотрудников.Должность,
	|	КадроваяИсторияСотрудников.ПериодЗавершения,
	|	КадроваяИсторияСотрудников.ДолжностьЗавершения
	|ПОМЕСТИТЬ ВТКадроваяИсторияСотрудников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК КадроваяИсторияСотрудников
	|ГДЕ
	|	КадроваяИсторияСотрудников.Сотрудник В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ТаблицаДанных.Сотрудник
	|			ИЗ
	|				ВТТаблицаДанных КАК ТаблицаДанных)
	|	И НЕ КадроваяИсторияСотрудников.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|	ТаблицаДанных.ЭтоРасчетПриУвольнении,
	|	ТаблицаДанных.ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончанияПериода,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА НЕ ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|					ТОГДА ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска
	|				ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.СпособРасчетаОтпусковПоТрудовомуДоговору
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|			ТОГДА КоличествоДнейВПериодах.КоличествоРабочихДнейВПериоде
	|		ИНАЧЕ КоличествоДнейВПериодах.КоличествоКалендарныхДнейВПериоде
	|	КОНЕЦ КАК КоличествоДнейВПериоде,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
	|	ВЫБОР
	|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СотрудникУволен,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК ТекущееПодразделение,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК ТекущаяДолжность,
	|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо.Пол КАК Пол,
	|	ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО ТаблицаДанных.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоДнейВПериодах КАК КоличествоДнейВПериодах
	|		ПО ТаблицаДанных.Сотрудник = КоличествоДнейВПериодах.Сотрудник
	|			И ТаблицаДанных.ДатаНачалаПериода = КоличествоДнейВПериодах.ДатаНачалаПериода
	|			И ТаблицаДанных.ДатаОкончанияПериода = КоличествоДнейВПериодах.ДатаОкончанияПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЕжегодныхОтпусков.Сотрудник,
	|	ВидыЕжегодныхОтпусков.ДатаОстатков,
	|	ВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
	|	ВидыЕжегодныхОтпусков.КоличествоДнейОтпускаВГод
	|ИЗ
	|	ВТВидыЕжегодныхОтпусков КАК ВидыЕжегодныхОтпусков
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЕжегодныхОтпусков.ОсновнойОтпуск УБЫВ,
	|	ВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	ТаблицаДанных.ДатаОстатков,
	|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	НачальныеОстаткиОтпусков.Количество,
	|	НачальныеОстаткиОтпусков.ДатаНачалаРабочегоГода КАК ДатаНачалаРабочегоГода,
	|	НачальныеОстаткиОтпусков.ДатаОкончанияРабочегоГода
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
	|		ПО (ТаблицаДанных.Сотрудник = НачальныеОстаткиОтпусков.Сотрудник
	|					И ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|				ИЛИ ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачалаРабочегоГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|	РАЗНОСТЬДАТ(ИсключаемыеИзОстатковОтпусковПериоды.ДатаНачалаОтпуска, ДОБАВИТЬКДАТЕ(ИсключаемыеИзОстатковОтпусковПериоды.ДатаОкончанияОтпуска, ДЕНЬ, 1), ДЕНЬ) КАК КоличествоДнейОтпуска,
	|	РАЗНОСТЬДАТ(ИсключаемыеИзОстатковОтпусковПериоды.ДатаНачалаОтпуска, ДОБАВИТЬКДАТЕ(ИсключаемыеИзОстатковОтпусковПериоды.ДатаОкончанияОтпуска, ДЕНЬ, 1), ДЕНЬ) КАК КоличествоДнейПродления,
	|	ИсключаемыеИзОстатковОтпусковПериоды.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
	|	ИсключаемыеИзОстатковОтпусковПериоды.ДатаОкончанияОтпуска КАК ДатаОкончанияОтпуска,
	|	ИсключаемыеИзОстатковОтпусковПериоды.ПричинаОтсутствия,
	|	ИсключаемыеИзОстатковОтпусковПериоды.ЯвляетсяОтпускомБезСохраненияЗарплаты,
	|	ИсключаемыеИзОстатковОтпусковПериоды.Регистратор КАК Документ,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ИсключаемыеИзОстатковОтпусковПериоды.Регистратор) КАК ПредставлениеДокумента
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсключаемыеИзОстатковОтпусковПериоды КАК ИсключаемыеИзОстатковОтпусковПериоды
	|		ПО ТаблицаДанных.Сотрудник = ИсключаемыеИзОстатковОтпусковПериоды.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ТаблицаДанных.ЭтоЗапланированныйОтпуск
	|					ТОГДА ТаблицаДанных.ДатаДокумента
	|				ИНАЧЕ ТаблицаДанных.ДатаОстатков
	|			КОНЕЦ >= ИсключаемыеИзОстатковОтпусковПериоды.ДатаНачалаОтпуска)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаОстатков,
	|	ДатаНачалаОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиСВидамиОтпусков.Сотрудник КАК Сотрудник,
	|	СотрудникиСВидамиОтпусков.ДатаОстатков,
	|	СотрудникиСВидамиОтпусков.ДатаДействия КАК ДатаДействия,
	|	СотрудникиСВидамиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ЕСТЬNULL(СотрудникиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ЕСТЬNULL(ДолжностиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ВЫБОР
	|				КОГДА СотрудникиСВидамиОтпусков.ВидЕжегодногоОтпуска.ПредоставлятьОтпускВсемСотрудникам
	|					ТОГДА СотрудникиСВидамиОтпусков.КоличествоДнейОтпускаВГод
	|				ИНАЧЕ 0
	|			КОНЕЦ)) КАК КоличествоДнейОтпускаВГод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СотрудникиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ЕСТЬNULL(ДолжностиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод, ВЫБОР
	|						КОГДА СотрудникиСВидамиОтпусков.ВидЕжегодногоОтпуска.ПредоставлятьОтпускВсемСотрудникам
	|							ТОГДА СотрудникиСВидамиОтпусков.КоличествоДнейОтпускаВГод
	|						ИНАЧЕ 0
	|					КОНЕЦ)) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Предоставляется,
	|	ВЫБОР
	|		КОГДА НЕ СотрудникиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод ЕСТЬ NULL 
	|			ТОГДА ""(персональный)""
	|		КОГДА НЕ ДолжностиОрганизацийЕжегодныеОтпуска.КоличествоДнейОтпускаВГод ЕСТЬ NULL 
	|			ТОГДА ""(по должности)""
	|		КОГДА СотрудникиСВидамиОтпусков.ВидЕжегодногоОтпуска.ПредоставлятьОтпускВсемСотрудникам
	|			ТОГДА ""(общефирменный)""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТипЕжегодногоОтпуска
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДанных.Сотрудник КАК Сотрудник,
	|		ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|		ПериодыИзмененияДолжностей.ДатаДействия КАК ДатаДействия,
	|		ПериодыИзмененияДолжностей.Должность КАК Должность,
	|		ВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|		ВидыЕжегодныхОтпусков.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|		ВидыЕжегодныхОтпусков.ОсновнойОтпуск КАК ОсновнойОтпуск
	|	ИЗ
	|		ВТТаблицаДанных КАК ТаблицаДанных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|				КадроваяИсторияСотрудников.Период КАК ДатаДействия,
	|				КадроваяИсторияСотрудников.Должность КАК Должность
	|			ИЗ
	|				ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				КадроваяИсторияСотрудников.Сотрудник,
	|				ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудников.ПериодЗавершения, ДЕНЬ, 1),
	|				КадроваяИсторияСотрудников.ДолжностьЗавершения
	|			ИЗ
	|				ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|			ГДЕ
	|				КадроваяИсторияСотрудников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодыИзмененияДолжностей
	|			ПО ТаблицаДанных.Сотрудник = ПериодыИзмененияДолжностей.Сотрудник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыЕжегодныхОтпусков КАК ВидыЕжегодныхОтпусков
	|			ПО ТаблицаДанных.Сотрудник = ВидыЕжегодныхОтпусков.Сотрудник
	|				И ТаблицаДанных.ДатаОстатков = ВидыЕжегодныхОтпусков.ДатаОстатков) КАК СотрудникиСВидамиОтпусков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДолжностиОрганизаций.ЕжегодныеОтпуска КАК ДолжностиОрганизацийЕжегодныеОтпуска
	|		ПО СотрудникиСВидамиОтпусков.Должность = ДолжностиОрганизацийЕжегодныеОтпуска.Ссылка
	|			И СотрудникиСВидамиОтпусков.ВидЕжегодногоОтпуска = ДолжностиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций.ЕжегодныеОтпуска КАК СотрудникиОрганизацийЕжегодныеОтпуска
	|		ПО СотрудникиСВидамиОтпусков.Сотрудник = СотрудникиОрганизацийЕжегодныеОтпуска.Ссылка
	|			И СотрудникиСВидамиОтпусков.ВидЕжегодногоОтпуска = СотрудникиОрганизацийЕжегодныеОтпуска.ВидЕжегодногоОтпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	СотрудникиСВидамиОтпусков.ОсновнойОтпуск УБЫВ,
	|	ВидЕжегодногоОтпуска,
	|	ДатаДействия УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.Количество КАК КоличествоДнейОтпуска,
	|	ФактическиеОтпуска.Период КАК ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.Регистратор КАК Документ,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ФактическиеОтпуска.Регистратор) КАК ПредставлениеДокумента,
	|	ФактическиеОтпуска.ДатаРегистрации,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.Компенсация
	|			ТОГДА ФактическиеОтпуска.Период
	|		ИНАЧЕ ФактическиеОтпуска.ДатаОкончания
	|	КОНЕЦ КАК ДатаДляСортировки
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпускаОрганизацийРасчетный КАК ФактическиеОтпуска
	|		ПО ТаблицаДанных.Сотрудник = ФактическиеОтпуска.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ТаблицаДанных.ЭтоЗапланированныйОтпуск
	|					ТОГДА ТаблицаДанных.ДатаДокумента
	|				ИНАЧЕ ТаблицаДанных.ДатаОстатков
	|			КОНЕЦ >= ФактическиеОтпуска.Период)
	|			И (НЕ(ТаблицаДанных.ЭтоРасчетПриУвольнении
	|					И ФактическиеОтпуска.Регистратор ССЫЛКА Документ.РасчетПриУвольненииРаботникаОрганизаций))
	|			И ТаблицаДанных.ТекущийРегистратор <> ФактическиеОтпуска.Регистратор
	|			И (ВЫБОР
	|				КОГДА ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ФактическиеОтпуска.ВидЕжегодногоОтпуска
	|			КОНЕЦ),
	|	Константы КАК Константы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаОстатков,
	|	ВидЕжегодногоОтпуска,
	|	ДатаДляСортировки";
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Данные						= МассивРезультатов[7].Выгрузить();
	
	ВидыОтпусков				= МассивРезультатов[8].Выгрузить();
	
	Остатки						= МассивРезультатов[9].Выгрузить();
	Остатки.Индексы.Добавить("Сотрудник");
	Остатки.Индексы.Добавить("ДатаОстатков");
	
	Отклонения					= МассивРезультатов[10].Выгрузить();
	Отклонения.Индексы.Добавить("Сотрудник");
	Отклонения.Индексы.Добавить("ДатаОстатков");
	
	ПраваНаЕжегодныйОтпуск		= МассивРезультатов[11].Выгрузить();
	ПраваНаЕжегодныйОтпуск.Индексы.Добавить("Сотрудник");
	ПраваНаЕжегодныйОтпуск.Индексы.Добавить("ДатаОстатков");
	ПраваНаЕжегодныйОтпуск.Индексы.Добавить("ВидЕжегодногоОтпуска");
	
	ФактическиеОтпуска			= МассивРезультатов[12].Выгрузить();
	ФактическиеОтпуска.Колонки.Добавить("РабочийГодС",					Новый ОписаниеТипов("Дата"));
	ФактическиеОтпуска.Колонки.Добавить("РабочийГодПо",					Новый ОписаниеТипов("Дата"));
	ФактическиеОтпуска.Колонки.Добавить("ИспользованоДнейПрошлыхЛет",	Новый ОписаниеТипов("Число"));
	ФактическиеОтпуска.Колонки.Добавить("ИспользованоДнейАвансом",		Новый ОписаниеТипов("Число"));
	ФактическиеОтпуска.Колонки.Добавить("ОсталосьСписать",				Новый ОписаниеТипов("Число"));
	ФактическиеОтпуска.Колонки.Добавить("ЗапланированныйОтпуск",		Новый ОписаниеТипов("Булево"));
	ФактическиеОтпуска.Индексы.Добавить("Сотрудник");
	ФактическиеОтпуска.Индексы.Добавить("ДатаОстатков");
	ФактическиеОтпуска.Индексы.Добавить("ВидЕжегодногоОтпуска");
	
	Возврат Новый Структура("Данные, ВидыОтпусков, Остатки, Отклонения, Права, ФактическиеОтпуска",
		Данные, ВидыОтпусков, Остатки, Отклонения, ПраваНаЕжегодныйОтпуск, ФактическиеОтпуска);
	
КонецФункции

// Функция, отвечающая за расчет отпусков, положенных сотруднику.
// Используется всеми остальными функциями.
//
// В качестве таблицы данных нужно передать заполненную таблицу значений, по описанию из процедуры ОписаниеТаблицыДанных().
//
Функция ОстаткиОтпусков(ТаблицаДанных)
	
	ОкруглятьДниОтпускаПриКомпенсации = Константы.ОкруглятьДниОтпускаПриКомпенсации.Получить();
	
	ИсходныеДанные = ИсходныеДанныеДляРассчетаОстатков(ТаблицаДанных);
	
	ДополненнаяТаблицаДанных		= ИсходныеДанные.Данные;
	ТаблицаВидовОтпуска				= ИсходныеДанные.ВидыОтпусков;
	ТаблицаОстатков					= ИсходныеДанные.Остатки;
	ТаблицаОтклонений				= ИсходныеДанные.Отклонения;
	ТаблицаПравНаЕжегодныйОтпуск	= ИсходныеДанные.Права;
	ТаблицаФактическихОтпусков		= ИсходныеДанные.ФактическиеОтпуска;
	
	РассчитанныеОстатки = Новый ТаблицаЗначений;
	РассчитанныеОстатки.Колонки.Добавить("Сотрудник");
	РассчитанныеОстатки.Колонки.Добавить("ДатаОстатков");
	РассчитанныеОстатки.Колонки.Добавить("ОстатокНаДату");
	РассчитанныеОстатки.Колонки.Добавить("ОстатокНаДатуПоВидамЕжегодныхОтпусков",	Новый ОписаниеТипов("Массив"));
	РассчитанныеОстатки.Колонки.Добавить("ПравоНаОтпускПриПриемеНаРаботу");
	РассчитанныеОстатки.Колонки.Добавить("ДанныеРасчета",							Новый ОписаниеТипов("Массив"));
	РассчитанныеОстатки.Колонки.Добавить("ТекущаяОрганизация");
	РассчитанныеОстатки.Колонки.Добавить("ТекущееПодразделение");
	РассчитанныеОстатки.Колонки.Добавить("ТекущаяДолжность");
	РассчитанныеОстатки.Колонки.Добавить("ДатаПриема");
	РассчитанныеОстатки.Колонки.Добавить("ДатаУвольнения");
	РассчитанныеОстатки.Колонки.Добавить("СотрудникУволен");
	РассчитанныеОстатки.Колонки.Добавить("Пол");
	РассчитанныеОстатки.Колонки.Добавить("РабочийГодС");
	РассчитанныеОстатки.Колонки.Добавить("РабочийГодПо");
	РассчитанныеОстатки.Колонки.Добавить("Примечание");
	РассчитанныеОстатки.Колонки.Добавить("ДатаНачалаПериода",						Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("ДатаОкончанияПериода",					Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("ВидЕжегодногоОтпускаПериода",				Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
	РассчитанныеОстатки.Колонки.Добавить("КоличествоДнейВПериоде",					Новый ОписаниеТипов("Число"));
	РассчитанныеОстатки.Колонки.Добавить("ПериодомИспользованоДнейПрошлыхЛет",		Новый ОписаниеТипов("Число"));
	РассчитанныеОстатки.Колонки.Добавить("ПериодомИспользованоДнейАвансом",			Новый ОписаниеТипов("Число"));
	РассчитанныеОстатки.Колонки.Добавить("РабочийГодПериодаС",						Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("РабочийГодПериодаПо",						Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("ПримечаниеПериода",						Новый ОписаниеТипов("Строка"));
	
	ДлинаСуток = 86400;
	
	Для Каждого СтрокаДанных Из ДополненнаяТаблицаДанных Цикл
		РассчитанныйОстаток = РассчитанныеОстатки.Добавить();
		ЗаполнитьЗначенияСвойств(РассчитанныйОстаток, СтрокаДанных);
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ДатаПриема) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборПоСотруднику = Новый Структура("Сотрудник, ДатаОстатков", СтрокаДанных.Сотрудник, СтрокаДанных.ДатаОстатков);
		
		// По полученным данным необходимо посчитать периоды рабочих лет.
		РабочиеГодаТекущихДанных = Новый ТаблицаЗначений();
		РабочиеГодаТекущихДанных.Колонки.Добавить("ВидЕжегодногоОтпуска",						Новый ОписаниеТипов("СправочникСсылка.ВидыЕжегодныхОтпусков"));
		РабочиеГодаТекущихДанных.Колонки.Добавить("Предоставляется",							Новый ОписаниеТипов("Булево"));
		РабочиеГодаТекущихДанных.Колонки.Добавить("ДатаНачала",									Новый ОписаниеТипов("Дата"));
		РабочиеГодаТекущихДанных.Колонки.Добавить("ДатаОкончания",								Новый ОписаниеТипов("Дата"));
		РабочиеГодаТекущихДанных.Колонки.Добавить("ПоследнийРабочийГод",						Новый ОписаниеТипов("Булево"));
		РабочиеГодаТекущихДанных.Колонки.Добавить("РабочиеМесяцы",								Новый ОписаниеТипов("ТаблицаЗначений"));
		
		РабочиеГодаТекущихДанных.Индексы.Добавить("ВидЕжегодногоОтпуска");
		РабочиеГодаТекущихДанных.Индексы.Добавить("Предоставляется");
		
		РабочиеГодаТекущихДанных.Колонки.Добавить("ВведенныеОстатки");
		РабочиеГодаТекущихДанных.Колонки.Добавить("Отклонения",									Новый ОписаниеТипов("Массив"));
		РабочиеГодаТекущихДанных.Колонки.Добавить("ПраваНаЕжегодныйОтпуск",						Новый ОписаниеТипов("Массив"));
		РабочиеГодаТекущихДанных.Колонки.Добавить("ФактическиеОтпуска",							Новый ОписаниеТипов("Массив"));
		РабочиеГодаТекущихДанных.Колонки.Добавить("ОстатокНаКонецТекущегоГода",					Новый ОписаниеТипов("Число"));
		РабочиеГодаТекущихДанных.Колонки.Добавить("ДоступноДляСписанияВЭтомГоду",				Новый ОписаниеТипов("Число"));
		
		
		ТаблицаВидовОтпускаПоСотруднику = ТаблицаВидовОтпуска.НайтиСтроки(ОтборПоСотруднику);
		
		// Остаток отпуска на запрашиваемую дату.
		ОстатокНаДатуПоВидамЕжегодныхОтпусков = Новый ТаблицаЗначений;
		ОстатокНаДатуПоВидамЕжегодныхОтпусков.Колонки.Добавить("ВидЕжегодногоОтпуска");
		ОстатокНаДатуПоВидамЕжегодныхОтпусков.Колонки.Добавить("КоличествоДней");
		ОстатокНаДатуПоВидамЕжегодныхОтпусков.Колонки.Добавить("ЕстьОстаток");
		Для Каждого СтрокаВидаОтпуска Из ТаблицаВидовОтпускаПоСотруднику Цикл
			ОстатокНаДатуПоВидуОтпуска = ОстатокНаДатуПоВидамЕжегодныхОтпусков.Добавить();
			ОстатокНаДатуПоВидуОтпуска.ВидЕжегодногоОтпуска	= СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
			ОстатокНаДатуПоВидуОтпуска.КоличествоДней		= 0;
			ОстатокНаДатуПоВидуОтпуска.ЕстьОстаток			= Ложь;
			
			// Если для сотрудника введены остатки, то вычислять рабочие года начнем с записи по остаткам.
			ОстаткиТекущихДанных = ТаблицаОстатков.НайтиСтроки(Новый Структура("Сотрудник, ДатаОстатков, ВидЕжегодногоОтпуска", СтрокаДанных.Сотрудник, СтрокаДанных.ДатаОстатков, СтрокаВидаОтпуска.ВидЕжегодногоОтпуска));
			Если ОстаткиТекущихДанных.Количество() > 0 Тогда
				ОстатокНаКонецТекущегоГода = 0;
				Для Каждого СтрокаОстатков Из ОстаткиТекущихДанных Цикл
					ОстатокНаКонецТекущегоГода = ОстатокНаКонецТекущегоГода + СтрокаОстатков.Количество;
					ВведенныеОстатки = Новый Структура("ДатаОкончанияРабочегоГода, Количество, ПоследнийГодОстатков",
						СтрокаОстатков.ДатаОкончанияРабочегоГода, ОстатокНаКонецТекущегоГода,
						ОстаткиТекущихДанных.Найти(СтрокаОстатков) = ОстаткиТекущихДанных.Количество() - 1);
					
					РабочийГод = РабочиеГодаТекущихДанных.Добавить();
					РабочийГод.ВидЕжегодногоОтпуска						= СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
					РабочийГод.Предоставляется							= Истина;
					РабочийГод.ДатаНачала								= СтрокаОстатков.ДатаНачалаРабочегоГода;
					РабочийГод.ДатаОкончания							= КонецДня(СтрокаОстатков.ДатаОкончанияРабочегоГода);
					РабочийГод.ВведенныеОстатки							= ВведенныеОстатки;
					РабочийГод.ОстатокНаКонецТекущегоГода				= ОстатокНаКонецТекущегоГода;
					РабочийГод.ДоступноДляСписанияВЭтомГоду				= СтрокаОстатков.Количество;
					
					ДатаНачалаРабочегоГода = РабочийГод.ДатаОкончания + 1;
				КонецЦикла;
				
			// Иначе вычислять рабочие года начнем с даты приема на работу.
			Иначе
				ДатаНачалаРабочегоГода	= СтрокаДанных.ДатаПриема;
				
			КонецЕсли;
			
			// Сформируем рабочие года по умолчанию.
			МаксимальнаяДатаОкончания = СтрокаДанных.ДатаОстатков;
			Пока ДатаНачалаРабочегоГода <= СтрокаДанных.ДатаОстатков Цикл
				ДатаОкончанияРабочегоГода	= ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1;
				
				// Если сотрудник уволен и это не расчет при увольнении, то необходимо ограничить дату окончания последнего рабочего года датой увольнения.
				Если СтрокаДанных.СотрудникУволен И Не СтрокаДанных.ЭтоРасчетПриУвольнении Тогда
					МаксимальнаяДатаОкончания	= Мин(СтрокаДанных.ДатаОстатков, ДатаОкончанияРабочегоГода, КонецДня(СтрокаДанных.ДатаУвольнения));
				Иначе
					МаксимальнаяДатаОкончания	= Мин(СтрокаДанных.ДатаОстатков, ДатаОкончанияРабочегоГода);
				КонецЕсли;
				
				Если МаксимальнаяДатаОкончания <= ДатаНачалаРабочегоГода Тогда
					Прервать;
				КонецЕсли;
				
				РабочийГод = РабочиеГодаТекущихДанных.Добавить();
				РабочийГод.ВидЕжегодногоОтпуска					= СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
				РабочийГод.Предоставляется						= Истина;
				РабочийГод.ДатаНачала							= ДатаНачалаРабочегоГода;
				РабочийГод.ДатаОкончания						= ДатаОкончанияРабочегоГода;
				
				ДатаНачалаРабочегоГода = КонецДня(МаксимальнаяДатаОкончания) + 1;
			КонецЦикла;
			
			ОтборПоСотрудникуИВидуОтпуска = Новый Структура("Сотрудник, ДатаОстатков, ВидЕжегодногоОтпуска", СтрокаДанных.Сотрудник, СтрокаДанных.ДатаОстатков, СтрокаВидаОтпуска.ВидЕжегодногоОтпуска);
			
			РабочиеГодаПоВидуОтпуска = РабочиеГодаТекущихДанных.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", СтрокаВидаОтпуска.ВидЕжегодногоОтпуска));
			ОтклоненияТекущихДанных = ТаблицаОтклонений.НайтиСтроки(ОтборПоСотруднику);
			
			ПраваНаЕжегодныйОтпускПоВидуОтпуска = ТаблицаПравНаЕжегодныйОтпуск.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
			ПраваНаОтпускДляУдаления	= Новый Массив;
			КоличествоДнейОтпускаВГод	= Неопределено;
			ПредыдущееПраво				= Неопределено;
			Для Каждого ПравоНаОтпуск Из ПраваНаЕжегодныйОтпускПоВидуОтпуска Цикл
				Если ПравоНаОтпуск.КоличествоДнейОтпускаВГод = КоличествоДнейОтпускаВГод Тогда
					ПраваНаОтпускДляУдаления.Добавить(ПредыдущееПраво);
				КонецЕсли;
				КоличествоДнейОтпускаВГод	= ПравоНаОтпуск.КоличествоДнейОтпускаВГод;
				ПредыдущееПраво				= ПравоНаОтпуск;
			КонецЦикла;
			Для Каждого ПравоНаОтпуск Из ПраваНаОтпускДляУдаления Цикл
				ПраваНаЕжегодныйОтпускПоВидуОтпуска.Удалить(ПраваНаЕжегодныйОтпускПоВидуОтпуска.Найти(ПравоНаОтпуск));
			КонецЦикла;
			
			// Каждый рабочий год разобьем на рабочие месяцы.
			// Рабочий месяц состоит из даты, в которую сотрудник получает отпуск за отработанный месяц и количество дней за этот месяц
			СмещениеРабочихЛет = 0;
			Для Каждого РабочийГод Из РабочиеГодаПоВидуОтпуска Цикл
				РабочийГод.РабочиеМесяцы.Колонки.Добавить("ДатаМесяца",		Новый ОписаниеТипов("Дата"));
				РабочийГод.РабочиеМесяцы.Колонки.Добавить("КоличествоДней",	Новый ОписаниеТипов("Число"));
				РабочийГод.РабочиеМесяцы.Колонки.Добавить("Заполнен",		Новый ОписаниеТипов("Булево"));
				
				ПроверяемыйГод = Год(РабочийГод.ДатаНачала + СмещениеРабочихЛет);
				КонецФевраля = Дата(ПроверяемыйГод, 2, 28);
				Если РабочийГод.ДатаНачала < КонецФевраля И РабочийГод.ДатаНачала + СмещениеРабочихЛет > КонецФевраля Тогда
					ВисокостныйГод = ПроверяемыйГод / 400 = Цел(ПроверяемыйГод / 400) Или ПроверяемыйГод / 4 = Цел(ПроверяемыйГод / 4) И ПроверяемыйГод / 100 <> Цел(ПроверяемыйГод / 100);
					Если ВисокостныйГод Тогда
						РабочийГод.ДатаНачала		= РабочийГод.ДатаНачала + ДлинаСуток;
						РабочийГод.ДатаОкончания	= РабочийГод.ДатаОкончания + ДлинаСуток;
					КонецЕсли;
				КонецЕсли;
				
				РабочийГод.ДатаНачала		= РабочийГод.ДатаНачала + СмещениеРабочихЛет;
				РабочийГод.ДатаОкончания	= ДобавитьМесяц(РабочийГод.ДатаНачала, 12) - 1;
				
				Если РабочийГод.ДатаОкончания < Дата(2006, 10, 6) Тогда
					КоличествоДнейВключаемых = 7;
				Иначе
					КоличествоДнейВключаемых = 14;
				КонецЕсли;
				
				// Заполним рабочие месяца датами по умолчанию
				ПервыйРабочийГод = РабочийГод.ДатаНачала = СтрокаДанных.ДатаПриема;
				НачалоМесяца	= РабочийГод.ДатаНачала;
				КонецМесяца		= ДобавитьМесяц(НачалоМесяца, 1) - 1;
				Для НомерМесяца = 1 По 12 Цикл
					ПоловинаМесяца = ?(День(КонецМесяца(НачалоМесяца)) - День(НачалоМесяца) + 1 >= День(КонецМесяца), День(КонецМесяца(НачалоМесяца)), День(КонецМесяца(КонецМесяца))) / 2 - 1;
					Если Цел(ПоловинаМесяца) < ПоловинаМесяца Тогда
						ПоловинаМесяца = Цел(ПоловинаМесяца) + 1;
					КонецЕсли;
					
					Если ПервыйРабочийГод И НомерМесяца = 12 Тогда // п. 28 правил об очередных и дополнительных отпусках
						РабочийГод.РабочиеМесяцы.Добавить().ДатаМесяца = НачалоМесяца - ДлинаСуток;
					Иначе
						РабочийГод.РабочиеМесяцы.Добавить().ДатаМесяца = НачалоМесяца + ПоловинаМесяца * ДлинаСуток;
					КонецЕсли;
					
					НачалоМесяца	= ДобавитьМесяц(НачалоМесяца, 1);
					КонецМесяца		= ДобавитьМесяц(НачалоМесяца, 1) - 1;
				КонецЦикла;
				
				// Продлим рабочие года, изменив дату окончания рабочего года и подвинув каждую дату рабочего месяца
				ОтклоненияДляУдаления = Новый Массив;
				Для Каждого СтрокаОтклонения Из ОтклоненияТекущихДанных Цикл
					Если РабочийГод.ДатаНачала > СтрокаОтклонения.ДатаНачалаОтпуска
						Или РабочийГод.ДатаОкончания < СтрокаОтклонения.ДатаНачалаОтпуска Тогда
						Продолжить;
					КонецЕсли;
					
					// Если для сотрудника введены остатки в период продления рабочего года, необходимо учесть продление в следующем рабочем году
					Если РабочийГод.ВведенныеОстатки <> Неопределено Тогда
						Если СтрокаОтклонения.ДатаОкончанияОтпуска > РабочийГод.ДатаОкончания Тогда
							СтрокаОтклонения.ДатаНачалаОтпуска			= КонецДня(РабочийГод.ДатаОкончания) + 1;
							СтрокаОтклонения.КоличествоДнейОтпуска		= (СтрокаОтклонения.ДатаОкончанияОтпуска - СтрокаОтклонения.ДатаНачалаОтпуска) / ДлинаСуток + 1;
							СтрокаОтклонения.КоличествоДнейПродления	= СтрокаОтклонения.КоличествоДнейОтпуска;
						КонецЕсли;
						Продолжить;
					КонецЕсли;
					
					// Отпуска без сохранения первые 7/14 дней в рабочем году не увеличивают рабочий год.
					Если СтрокаОтклонения.ЯвляетсяОтпускомБезСохраненияЗарплаты Тогда
						СтрокаОтклонения.КоличествоДнейПродления	= Макс(СтрокаОтклонения.КоличествоДнейОтпуска - КоличествоДнейВключаемых, 0);
						
						КоличествоДнейВключаемых					= Макс(КоличествоДнейВключаемых - СтрокаОтклонения.КоличествоДнейОтпуска, 0);
					КонецЕсли;
					
					// Увеличение рабочего года
					Если СтрокаОтклонения.КоличествоДнейОтпуска > 0 Тогда
						ПредыдущаяДатаОкончания		= РабочийГод.ДатаОкончания;
						РабочийГод.ДатаОкончания	= РабочийГод.ДатаОкончания + СтрокаОтклонения.КоличествоДнейПродления * ДлинаСуток;
						СмещениеРабочихЛет			= СмещениеРабочихЛет + СтрокаОтклонения.КоличествоДнейПродления * ДлинаСуток;
						
						ПроверяемыйГод = Год(РабочийГод.ДатаОкончания);
						КонецФевраля = Дата(ПроверяемыйГод, 2, 28);
						Если ПредыдущаяДатаОкончания < КонецФевраля И РабочийГод.ДатаОкончания > КонецФевраля Тогда
							ВисокостныйГод = ПроверяемыйГод / 400 = Цел(ПроверяемыйГод / 400) Или ПроверяемыйГод / 4 = Цел(ПроверяемыйГод / 4) И ПроверяемыйГод / 100 <> Цел(ПроверяемыйГод / 100);
							Если ВисокостныйГод Тогда
								РабочийГод.ДатаОкончания	= РабочийГод.ДатаОкончания + ДлинаСуток;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					// Сдвиг всех рабочих месяцев после даты начала продления
					Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
						Если РабочийМесяц.ДатаМесяца > СтрокаОтклонения.ДатаНачалаОтпуска Тогда
							РабочийМесяц.ДатаМесяца = РабочийМесяц.ДатаМесяца + СтрокаОтклонения.КоличествоДнейПродления * ДлинаСуток;
						КонецЕсли;
					КонецЦикла;
					
					Отклонение = Новый Структура("ВидЕжегодногоОтпуска,ДатаНачалаОтсутствия,ДатаОкончанияОтсутствия,ПричинаОтсутствия,КоличествоДнейОтсутствия,КоличествоДнейПродления,Документ,ДокументРасшифровка",
						РабочийГод.ВидЕжегодногоОтпуска, СтрокаОтклонения.ДатаНачалаОтпуска, СтрокаОтклонения.ДатаОкончанияОтпуска,
						СтрокаОтклонения.ПричинаОтсутствия, СтрокаОтклонения.КоличествоДнейОтпуска, СтрокаОтклонения.КоличествоДнейПродления,
						СтрокаОтклонения.ПредставлениеДокумента, СтрокаОтклонения.Документ);
					
					РабочийГод.Отклонения.Добавить(Отклонение);
					
					ОтклоненияДляУдаления.Добавить(СтрокаОтклонения);
				КонецЦикла;
				Для Каждого СтрокаОтклонения Из ОтклоненияДляУдаления Цикл
					ОтклоненияТекущихДанных.Удалить(ОтклоненияТекущихДанных.Найти(СтрокаОтклонения));
				КонецЦикла;
			КонецЦикла;
			
			// Все рабочие года после даты получения остатков необходимо удалить.
			РабочиеГодаДляУдаления = Новый Массив;
			Для Каждого РабочийГод Из РабочиеГодаПоВидуОтпуска Цикл
				Если РабочийГод.ДатаНачала > МаксимальнаяДатаОкончания Тогда
					РабочиеГодаДляУдаления.Добавить(РабочийГод);
				КонецЕсли;
			КонецЦикла;
			Для Каждого РабочийГод Из РабочиеГодаДляУдаления Цикл
				РабочиеГодаТекущихДанных.Удалить(РабочийГод);
			КонецЦикла;
			
			// Получим рабочие года с посчитанными рабочими месяцами с учетом продлений рабочего года
			РабочиеГодаПоВидуОтпуска = РабочиеГодаТекущихДанных.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", СтрокаВидаОтпуска.ВидЕжегодногоОтпуска));
			
			// Установим признак для последнего рабочего года.
			Если РабочиеГодаПоВидуОтпуска.Количество() >= 1 Тогда
				ПоследнийРабочийГод = РабочиеГодаПоВидуОтпуска[РабочиеГодаПоВидуОтпуска.Количество() - 1];
				ПоследнийРабочийГод.ПоследнийРабочийГод		= Истина;
			КонецЕсли;
			
			ФактическиеОтпускаПоВидуОтпуска = ТаблицаФактическихОтпусков.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
			Для Каждого РабочийГод Из РабочиеГодаПоВидуОтпуска Цикл
				// Для каждого рабочего месяца определим положенное количество дней отпуска за месяц с учетом изменений дней отпусков по должности и сотруднику.
				РабочийГод.РабочиеМесяцы.Сортировать("ДатаМесяца УБЫВ");
				Для Каждого ПравоНаЕжегодныйОтпуск Из ПраваНаЕжегодныйОтпускПоВидуОтпуска Цикл
					Если РабочийГод.РабочиеМесяцы.Итог("Заполнен") = 12 Тогда
						Прервать;
					КонецЕсли;
					Если ПравоНаЕжегодныйОтпуск.ДатаДействия > РабочийГод.ДатаОкончания Тогда
						Продолжить;
					КонецЕсли;
					ДнейОтпускаВМесяц = ПравоНаЕжегодныйОтпуск.КоличествоДнейОтпускаВГод / 12;
					
					Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
						Если РабочийМесяц.ДатаМесяца < ПравоНаЕжегодныйОтпуск.ДатаДействия Тогда
							Прервать;
						КонецЕсли;
						Если РабочийМесяц.Заполнен Тогда
							Продолжить;
						КонецЕсли;
						
						РабочийМесяц.КоличествоДней	= ДнейОтпускаВМесяц;
						РабочийМесяц.Заполнен		= Истина;
					КонецЦикла;
					
					Если ПравоНаЕжегодныйОтпуск.ДатаДействия <> СтрокаДанных.ДатаПриема И ПравоНаЕжегодныйОтпуск.ДатаДействия >= РабочийГод.ДатаНачала Тогда
						РабочийГод.ПраваНаЕжегодныйОтпуск.Добавить(ПравоНаЕжегодныйОтпуск);
					КонецЕсли;
				КонецЦикла;
				РабочийГод.РабочиеМесяцы.Сортировать("ДатаМесяца ВОЗР");
				
				РабочийГод.Предоставляется = РабочийГод.РабочиеМесяцы.Итог("КоличествоДней") > 0;
				
				// Спишем фактические отпуска
				Если РабочийГод.ВведенныеОстатки = Неопределено Тогда
					ПравоНаОтпускЗаПолныйГод = 0;
					Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
						Если РабочийМесяц.ДатаМесяца > МаксимальнаяДатаОкончания Тогда
							Прервать;
						КонецЕсли;
						ПравоНаОтпускЗаПолныйГод			= ПравоНаОтпускЗаПолныйГод + РабочийМесяц.КоличествоДней;
					КонецЦикла;
					ПравоНаОтпускЗаПолныйГод				= Окр(ПравоНаОтпускЗаПолныйГод, 2);
					РабочийГод.ДоступноДляСписанияВЭтомГоду	= ПравоНаОтпускЗаПолныйГод;
					РабочийГод.ОстатокНаКонецТекущегоГода	= ОстатокНаДатуПоВидуОтпуска.КоличествоДней + ПравоНаОтпускЗаПолныйГод;
				КонецЕсли;
				
				Для Каждого СтрокаФактическогоОтпуска Из ФактическиеОтпускаПоВидуОтпуска Цикл
					// Отпуска по дате окончания, компенсация по дате начала.
					Если СтрокаФактическогоОтпуска.Компенсация Тогда
						ДатаОтпуска = СтрокаФактическогоОтпуска.ДатаНачалаОтпуска;
					Иначе
						ДатаОтпуска = СтрокаФактическогоОтпуска.ДатаОкончанияОтпуска;
					КонецЕсли;
					
					Если ДатаОтпуска < РабочийГод.ДатаНачала Или (РабочийГод.ВведенныеОстатки <> Неопределено И ДатаОтпуска < РабочийГод.ДатаОкончания) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ДатаОтпуска > РабочийГод.ДатаОкончания Тогда // отпуск произойдет в будущем рабочем году
						Если РабочийГод.ДоступноДляСписанияВЭтомГоду = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(СтрокаФактическогоОтпуска.РабочийГодС) Тогда // Отпуск не использовал остатки прошлых лет
							СтрокаФактическогоОтпуска.ОсталосьСписать	= СтрокаФактическогоОтпуска.КоличествоДнейОтпуска;
							СтрокаФактическогоОтпуска.РабочийГодС		= РабочийГод.ДатаНачала;
						КонецЕсли;
						Если СтрокаФактическогоОтпуска.ОсталосьСписать = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаФактическогоОтпуска.РабочийГодПо					= РабочийГод.ДатаОкончания;
						
						СписатьВТекущемГоду	= Мин(РабочийГод.ДоступноДляСписанияВЭтомГоду, СтрокаФактическогоОтпуска.ОсталосьСписать);
						
						РабочийГод.ДоступноДляСписанияВЭтомГоду					= РабочийГод.ДоступноДляСписанияВЭтомГоду - СписатьВТекущемГоду;
						
						СтрокаФактическогоОтпуска.ИспользованоДнейПрошлыхЛет	= СтрокаФактическогоОтпуска.ИспользованоДнейПрошлыхЛет + СписатьВТекущемГоду;
						СтрокаФактическогоОтпуска.ОсталосьСписать				= СтрокаФактическогоОтпуска.ОсталосьСписать - СписатьВТекущемГоду;
						
					Иначе // отпуск попадает на текущий рабочий год
						Если Не ЗначениеЗаполнено(СтрокаФактическогоОтпуска.РабочийГодС) Тогда // Отпуск не использовал остатки прошлых лет
							СтрокаФактическогоОтпуска.ОсталосьСписать			= СтрокаФактическогоОтпуска.КоличествоДнейОтпуска;
							СтрокаФактическогоОтпуска.РабочийГодС				= РабочийГод.ДатаНачала;
						КонецЕсли;
						
						РабочийГод.ОстатокНаКонецТекущегоГода					= РабочийГод.ОстатокНаКонецТекущегоГода - СтрокаФактическогоОтпуска.КоличествоДнейОтпуска;
						
						Если СтрокаФактическогоОтпуска.ОсталосьСписать > 0 Тогда
							СтрокаФактическогоОтпуска.РабочийГодПо				= РабочийГод.ДатаОкончания;
							
							ПравоНаОтпускВТекущемГоду = 0;
							Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
								Если РабочийМесяц.ДатаМесяца > ДатаОтпуска Тогда
									Прервать;
								КонецЕсли;
								ПравоНаОтпускВТекущемГоду	= ПравоНаОтпускВТекущемГоду + РабочийМесяц.КоличествоДней;
							КонецЦикла;
							ПравоНаОтпускВТекущемГоду = Окр(ПравоНаОтпускВТекущемГоду, 2);
							Если РабочийГод.ПоследнийРабочийГод Тогда
								ЗаработаетДоКонцаГода			= Окр(РабочийГод.РабочиеМесяцы.Итог("КоличествоДней"), 2) - ПравоНаОтпускВТекущемГоду;
								ДоступноДляСписанияЭтимОтпуском	= РабочийГод.ДоступноДляСписанияВЭтомГоду;
							Иначе
								ЗаработаетДоКонцаГода			= ПравоНаОтпускЗаПолныйГод - ПравоНаОтпускВТекущемГоду;
								ДоступноДляСписанияЭтимОтпуском	= Макс(0, РабочийГод.ДоступноДляСписанияВЭтомГоду - ЗаработаетДоКонцаГода);
							КонецЕсли;
							СписатьВТекущемГоду				= Мин(РабочийГод.ДоступноДляСписанияВЭтомГоду, СтрокаФактическогоОтпуска.ОсталосьСписать);
							
							РабочийГод.ДоступноДляСписанияВЭтомГоду				= РабочийГод.ДоступноДляСписанияВЭтомГоду - СписатьВТекущемГоду;
							
							СтрокаФактическогоОтпуска.ИспользованоДнейАвансом	= СтрокаФактическогоОтпуска.ОсталосьСписать - Мин(ДоступноДляСписанияЭтимОтпуском, СписатьВТекущемГоду);
							СтрокаФактическогоОтпуска.ОсталосьСписать			= 0;
							
							Если СтрокаФактическогоОтпуска.ИспользованоДнейАвансом > ЗаработаетДоКонцаГода Тогда
								СтрокаФактическогоОтпуска.РабочийГодПо			= ДобавитьМесяц(СтрокаФактическогоОтпуска.РабочийГодПо, 12);
							КонецЕсли;
						КонецЕсли;
						
						ФактическийОтпуск = Новый Структура("ВидЕжегодногоОтпуска,ДатаНачалаОтпуска,ДатаОкончанияОтпуска,КоличествоДнейОтпуска,ИспользованоДнейПрошлыхЛет,ИспользованоДнейАвансом,РабочийГодС,РабочийГодПо,Компенсация,ДатаРегистрации,Документ,ДокументРасшифровка",
							СтрокаФактическогоОтпуска.ВидЕжегодногоОтпуска, СтрокаФактическогоОтпуска.ДатаНачалаОтпуска, СтрокаФактическогоОтпуска.ДатаОкончанияОтпуска, СтрокаФактическогоОтпуска.КоличествоДнейОтпуска,
							СтрокаФактическогоОтпуска.ИспользованоДнейПрошлыхЛет, СтрокаФактическогоОтпуска.ИспользованоДнейАвансом,
							СтрокаФактическогоОтпуска.РабочийГодС, СтрокаФактическогоОтпуска.РабочийГодПо,
							СтрокаФактическогоОтпуска.Компенсация, СтрокаФактическогоОтпуска.ДатаРегистрации,
							СтрокаФактическогоОтпуска.ПредставлениеДокумента, СтрокаФактическогоОтпуска.Документ);
							
						РабочийГод.Предоставляется	= Истина;
						
						РабочийГод.ФактическиеОтпуска.Добавить(ФактическийОтпуск);
						
						Если НачалоДня(СтрокаДанных.ДатаНачалаПериода) = НачалоДня(СтрокаФактическогоОтпуска.ДатаНачалаОтпуска)
							И НачалоДня(СтрокаДанных.ДатаОкончанияПериода) = НачалоДня(СтрокаФактическогоОтпуска.ДатаОкончанияОтпуска)
							И СтрокаДанных.ОтборПоВидуЕжегодногоОтпуска = СтрокаФактическогоОтпуска.ВидЕжегодногоОтпуска Тогда
							РассчитанныйОстаток.КоличествоДнейВПериоде				= ФактическийОтпуск.КоличествоДнейОтпуска;
							РассчитанныйОстаток.РабочийГодПериодаС					= ФактическийОтпуск.РабочийГодС;
							РассчитанныйОстаток.РабочийГодПериодаПо					= ФактическийОтпуск.РабочийГодПо;
							РассчитанныйОстаток.ВидЕжегодногоОтпускаПериода			= ФактическийОтпуск.ВидЕжегодногоОтпуска;
							РассчитанныйОстаток.ПериодомИспользованоДнейПрошлыхЛет	= ФактическийОтпуск.ИспользованоДнейПрошлыхЛет;
							РассчитанныйОстаток.ПериодомИспользованоДнейАвансом		= ФактическийОтпуск.ИспользованоДнейАвансом;
							РассчитанныйОстаток.ПримечаниеПериода					= ОписаниеПериодаОтпуска(РассчитанныйОстаток.КоличествоДнейВПериоде, РассчитанныйОстаток.ПериодомИспользованоДнейПрошлыхЛет, РассчитанныйОстаток.ПериодомИспользованоДнейАвансом, РассчитанныйОстаток.ДатаПриема, РассчитанныйОстаток.ДатаОстатков);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(РассчитанныйОстаток.РабочийГодС) И (РабочийГод.ДоступноДляСписанияВЭтомГоду > 0 Или РабочийГод.ПоследнийРабочийГод) Тогда
					РассчитанныйОстаток.РабочийГодС			= РабочийГод.ДатаНачала;
					РассчитанныйОстаток.РабочийГодПо		= МаксимальнаяДатаОкончания;
				КонецЕсли;
				
				ОстатокНаДатуПоВидуОтпуска.КоличествоДней	= РабочийГод.ОстатокНаКонецТекущегоГода;
				ОстатокНаДатуПоВидуОтпуска.ЕстьОстаток		= ОстатокНаДатуПоВидуОтпуска.КоличествоДней <> 0;
			КонецЦикла;
		КонецЦикла;
		
		// Если в процедуру передан период отпуска, необходимо посчитать как этот отпуск будет списан
		Если ЗначениеЗаполнено(СтрокаДанных.ДатаНачалаПериода) И ЗначениеЗаполнено(СтрокаДанных.ДатаОкончанияПериода) И Не ЗначениеЗаполнено(РассчитанныйОстаток.РабочийГодПериодаС) Тогда
			РабочиеГодаТекущихДанных.Сортировать("ДатаНачала");
			
			ДатаОтпуска = СтрокаДанных.ДатаОкончанияПериода;
			
			ОсталосьСписать	= 0;
			Для Каждого РабочийГод Из РабочиеГодаТекущихДанных Цикл
				ПравоНаОтпускЗаПолныйГод = 0;
				Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
					Если РабочийМесяц.ДатаМесяца > МаксимальнаяДатаОкончания Тогда
						Прервать;
					КонецЕсли;
					ПравоНаОтпускЗаПолныйГод			= ПравоНаОтпускЗаПолныйГод + РабочийМесяц.КоличествоДней;
				КонецЦикла;
				ПравоНаОтпускЗаПолныйГод				= Окр(ПравоНаОтпускЗаПолныйГод, 2);
				
				Если ДатаОтпуска > РабочийГод.ДатаОкончания Тогда // отпуск произойдет в будущем рабочем году
					Если РабочийГод.ДоступноДляСписанияВЭтомГоду = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(РассчитанныйОстаток.РабочийГодПериодаС) Тогда // Отпуск не использовал остатки прошлых лет
						ОсталосьСписать										= РассчитанныйОстаток.КоличествоДнейВПериоде;
						РассчитанныйОстаток.РабочийГодПериодаС				= РабочийГод.ДатаНачала;
					КонецЕсли;
					Если ОсталосьСписать = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					РассчитанныйОстаток.РабочийГодПериодаПо					= РабочийГод.ДатаОкончания;
					
					СписатьВТекущемГоду	= Мин(РабочийГод.ДоступноДляСписанияВЭтомГоду, ОсталосьСписать);
					
					РассчитанныйОстаток.ПериодомИспользованоДнейПрошлыхЛет	= РассчитанныйОстаток.ПериодомИспользованоДнейПрошлыхЛет + СписатьВТекущемГоду;
					ОсталосьСписать											= ОсталосьСписать - СписатьВТекущемГоду;
					
				Иначе // отпуск попадает на текущий рабочий год
					Если Не ЗначениеЗаполнено(РассчитанныйОстаток.РабочийГодПериодаС) Тогда // Отпуск не использовал остатки прошлых лет
						ОсталосьСписать										= РассчитанныйОстаток.КоличествоДнейВПериоде;
						РассчитанныйОстаток.РабочийГодПериодаС				= РабочийГод.ДатаНачала;
					КонецЕсли;
					
					Если ОсталосьСписать > 0 Тогда
						РассчитанныйОстаток.РабочийГодПериодаПо					= РабочийГод.ДатаОкончания;
						
						ПравоНаОтпускВТекущемГоду = 0;
						Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
							Если РабочийМесяц.ДатаМесяца > ДатаОтпуска Тогда
								Прервать;
							КонецЕсли;
							ПравоНаОтпускВТекущемГоду	= ПравоНаОтпускВТекущемГоду + РабочийМесяц.КоличествоДней;
						КонецЦикла;
						ПравоНаОтпускВТекущемГоду = Окр(ПравоНаОтпускВТекущемГоду, 2);
						Если РабочийГод.ПоследнийРабочийГод Тогда
							ЗаработаетДоКонцаГода			= Окр(РабочийГод.РабочиеМесяцы.Итог("КоличествоДней"), 2) - ПравоНаОтпускВТекущемГоду;
							ДоступноДляСписанияЭтимОтпуском	= РабочийГод.ДоступноДляСписанияВЭтомГоду;
						Иначе
							ЗаработаетДоКонцаГода			= ПравоНаОтпускЗаПолныйГод - ПравоНаОтпускВТекущемГоду;
							ДоступноДляСписанияЭтимОтпуском	= Макс(0, РабочийГод.ДоступноДляСписанияВЭтомГоду - ЗаработаетДоКонцаГода);
						КонецЕсли;
						СписатьВТекущемГоду				= Мин(РабочийГод.ДоступноДляСписанияВЭтомГоду, ОсталосьСписать);
						
						РассчитанныйОстаток.ПериодомИспользованоДнейАвансом	= ОсталосьСписать - Мин(ДоступноДляСписанияЭтимОтпуском, СписатьВТекущемГоду);
						ОсталосьСписать										= 0;
						
						Если РассчитанныйОстаток.ПериодомИспользованоДнейАвансом > ЗаработаетДоКонцаГода Тогда
							РассчитанныйОстаток.РабочийГодПериодаПо			= ДобавитьМесяц(РассчитанныйОстаток.РабочийГодПериодаПо, 12);
						КонецЕсли;
					КонецЕсли;
					
					
				КонецЕсли;
				
			КонецЦикла;
			
			РассчитанныйОстаток.ПримечаниеПериода					= ОписаниеПериодаОтпуска(РассчитанныйОстаток.КоличествоДнейВПериоде, РассчитанныйОстаток.ПериодомИспользованоДнейПрошлыхЛет, РассчитанныйОстаток.ПериодомИспользованоДнейАвансом, РассчитанныйОстаток.ДатаПриема, РассчитанныйОстаток.ДатаОстатков);
		КонецЕсли;
		
		РассчитанныйОстаток.ДатаОстатков							= НачалоДня(РассчитанныйОстаток.ДатаОстатков);
		РассчитанныйОстаток.ДанныеРасчета							= РабочиеГодаТекущихДанных.НайтиСтроки(Новый Структура("Предоставляется", Истина));
		РассчитанныйОстаток.ПравоНаОтпускПриПриемеНаРаботу			= ТаблицаПравНаЕжегодныйОтпуск.НайтиСтроки(Новый Структура("Сотрудник, ДатаОстатков, ДатаДействия, Предоставляется", СтрокаДанных.Сотрудник, СтрокаДанных.ДатаОстатков, СтрокаДанных.ДатаПриема, Истина));
		
		РассчитанныйОстаток.ОстатокНаДату							= ОстатокНаДатуПоВидамЕжегодныхОтпусков.Итог("КоличествоДней");
		РассчитанныйОстаток.ОстатокНаДатуПоВидамЕжегодныхОтпусков	= ОстатокНаДатуПоВидамЕжегодныхОтпусков.НайтиСтроки(Новый Структура("ЕстьОстаток", Истина));
		// Округление остатка отпуска если это не расчет при увольнении или если включена необходимость округления при компенсации.
		Если Не СтрокаДанных.ЭтоРасчетПриУвольнении И Не СтрокаДанных.СотрудникУволен Или ОкруглятьДниОтпускаПриКомпенсации Тогда
			Если РассчитанныйОстаток.ОстатокНаДату >= 0 Тогда
				РассчитанныйОстаток.ОстатокНаДату					= Цел(РассчитанныйОстаток.ОстатокНаДату) + ?(Цел(РассчитанныйОстаток.ОстатокНаДату) = РассчитанныйОстаток.ОстатокНаДату, 0, 1);
			Иначе
				РассчитанныйОстаток.ОстатокНаДату					= Цел(РассчитанныйОстаток.ОстатокНаДату);
			КонецЕсли;
		КонецЕсли;
		РассчитанныйОстаток.Примечание								= Строка(РассчитанныйОстаток.ОстатокНаДату) + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней", РассчитанныйОстаток.ОстатокНаДату);
	КонецЦикла;
	
	Возврат РассчитанныеОстатки;
	
КонецФункции

// Процедуры для списания фактических отпусков

Процедура СписатьФактическиеОтпускаКадровымиПриказами(Знач Регистратор, Знач Организация) Экспорт
	
	ПорядокСписанияФактическихОтпусков = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПорядокСписанияФактическихОтпусков");
	Если ПорядокСписанияФактическихОтпусков <> Перечисления.ПорядокСписанияФактическихОтпусков.КадровымиПриказами Тогда
		НаборЗаписей = РегистрыНакопления.ФактическиеОтпускаОрганизацийРасчетный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписей.Записать();
		Возврат;
	КонецЕсли;
	
	// Если состояние = ЕжегодныйОтпуск и заполнен ПериодЗавершения, отпуск списывается регистратором;
	// Для всех других состояний или пустого ПериодЗавершения отпуск списывается тем регистратором,
	//  который прекращает отпуск;
	// Если пользователь вводит "Возврат на работу", тем самым досрочно прекращая отпуск, документ
	//  делает корректирующее движение. Остальные документы корректирующие движения не делают.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕжегодныеОтпуска.Сотрудник КАК Сотрудник,
	|	ЕжегодныеОтпуска.Период КАК ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(ЕжегодныеОтпуска.ПериодЗавершения, СЕКУНДА, -1) КАК ДатаОкончания,
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни) КАК ВидОсновногоОтпуска,
	|	ЕжегодныеОтпуска.ДатаНачалаДоп,
	|	ЕжегодныеОтпуска.ВидДополнительногоОтпуска,
	|	ЛОЖЬ КАК КорректироватьОтпуск,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК НоваяДатаОкончания,
	|	ЕжегодныеОтпуска.Регистратор КАК РегистраторНачалаОтпуска
	|ПОМЕСТИТЬ ВТ_ОтпускаСотрудников
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК ЕжегодныеОтпуска
	|ГДЕ
	|	ЕжегодныеОтпуска.Регистратор = &Регистратор
	|	И (НЕ ЕжегодныеОтпуска.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1))
	|	И ЕжегодныеОтпуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕжегодныеОтпускаНачало.Сотрудник,
	|	ЕжегодныеОтпускаНачало.Период,
	|	ВЫБОР
	|		КОГДА ЕжегодныеОтпускаНачало.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЕжегодныеОтпускаОкончание.Период, СЕКУНДА, -1)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ЕжегодныеОтпускаНачало.ПериодЗавершения, СЕКУНДА, -1)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни),
	|	ЕжегодныеОтпускаНачало.ДатаНачалаДоп,
	|	ЕжегодныеОтпускаНачало.ВидДополнительногоОтпуска,
	|	ВЫБОР
	|		КОГДА ЕжегодныеОтпускаОкончание.Регистратор ССЫЛКА Документ.ВозвратНаРаботуОрганизаций
	|				И ЕжегодныеОтпускаНачало.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕжегодныеОтпускаОкончание.Регистратор ССЫЛКА Документ.ВозвратНаРаботуОрганизаций
	|				И ЕжегодныеОтпускаНачало.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЕжегодныеОтпускаОкончание.Период, СЕКУНДА, -1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	ЕжегодныеОтпускаНачало.Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕжегодныеОтпускаОкончание.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(ЕжегодныеОтпускаНачало.Период) КАК ДатаНачала,
	|		ЕжегодныеОтпускаОкончание.Период КАК ДатаОкончания
	|	ИЗ
	|		РегистрСведений.СостояниеРаботниковОрганизаций КАК ЕжегодныеОтпускаНачало
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ЕжегодныеОтпускаОкончание
	|			ПО ЕжегодныеОтпускаНачало.Сотрудник = ЕжегодныеОтпускаОкончание.Сотрудник
	|				И ЕжегодныеОтпускаНачало.Период < ЕжегодныеОтпускаОкончание.Период
	|				И (ЕжегодныеОтпускаОкончание.Регистратор = &Регистратор)
	|				И (ЕжегодныеОтпускаОкончание.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЕжегодныеОтпускаОкончание.Сотрудник,
	|		ЕжегодныеОтпускаОкончание.Период) КАК ЕжегодныеОтпускаНачалоСрез
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ЕжегодныеОтпускаНачало
	|		ПО ЕжегодныеОтпускаНачалоСрез.Сотрудник = ЕжегодныеОтпускаНачало.Сотрудник
	|			И ЕжегодныеОтпускаНачалоСрез.ДатаНачала = ЕжегодныеОтпускаНачало.Период
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ЕжегодныеОтпускаОкончание
	|		ПО ЕжегодныеОтпускаНачалоСрез.Сотрудник = ЕжегодныеОтпускаОкончание.Сотрудник
	|			И ЕжегодныеОтпускаНачалоСрез.ДатаОкончания = ЕжегодныеОтпускаОкончание.Период
	|ГДЕ
	|	ЕжегодныеОтпускаНачало.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|	И ВЫБОР
	|			КОГДА ЕжегодныеОтпускаНачало.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕжегодныеОтпускаОкончание.Регистратор ССЫЛКА Документ.ВозвратНаРаботуОрганизаций
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ЕжегодныеОтпускаОкончание.Регистратор ССЫЛКА Документ.ВозвратНаРаботуОрганизаций
	|					И ЕжегодныеОтпускаНачало.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЕжегодныеОтпускаНачало.ПериодЗавершения > ЕжегодныеОтпускаОкончание.Период
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускаСотрудников.Сотрудник,
	|	ОтпускаСотрудников.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|				ИЛИ ОтпускаСотрудников.ДатаОкончания < ОтпускаСотрудников.ДатаНачалаДоп
	|			ТОГДА ОтпускаСотрудников.ДатаОкончания
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|	КОНЕЦ КАК ДатаОкончания,
	|	ОтпускаСотрудников.ВидОсновногоОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.КорректироватьОтпуск
	|				И ОтпускаСотрудников.НоваяДатаОкончания < ВЫБОР
	|					КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|							ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|						ТОГДА ОтпускаСотрудников.ДатаОкончания
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|				КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорректироватьОтпуск,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.НоваяДатаОкончания < ВЫБОР
	|				КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|					ТОГДА ОтпускаСотрудников.ДатаОкончания
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|			КОНЕЦ
	|			ТОГДА ОтпускаСотрудников.НоваяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК НоваяДатаОкончания,
	|	СУММА(ВЫБОР
	|			КОГДА ОтпускаСотрудников.ВидОсновногоОтпуска.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|				ТОГДА ЕСТЬNULL(ПроизводственныйКалендарь.Шестидневка, 0)
	|			ИНАЧЕ ЕСТЬNULL(ПроизводственныйКалендарь.КалендарныеДни, 0)
	|		КОНЕЦ) КАК ДнейОтпуска,
	|	ОтпускаСотрудников.РегистраторНачалаОтпуска
	|ПОМЕСТИТЬ ВТ_КадровыеОтпуска
	|ИЗ
	|	ВТ_ОтпускаСотрудников КАК ОтпускаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаСотрудников.ДатаНачала И ВЫБОР
	|				КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|						ИЛИ ОтпускаСотрудников.ДатаОкончания < ОтпускаСотрудников.ДатаНачалаДоп
	|					ТОГДА ОтпускаСотрудников.ДатаОкончания
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|			КОНЕЦ)
	|ГДЕ
	|	(НЕ ОтпускаСотрудников.ВидОсновногоОтпуска.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтпускаСотрудников.Сотрудник,
	|	ОтпускаСотрудников.ДатаНачала,
	|	ОтпускаСотрудников.ВидОсновногоОтпуска.ВидЕжегодногоОтпуска,
	|	ОтпускаСотрудников.РегистраторНачалаОтпуска,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|				ИЛИ ОтпускаСотрудников.ДатаОкончания < ОтпускаСотрудников.ДатаНачалаДоп
	|			ТОГДА ОтпускаСотрудников.ДатаОкончания
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.КорректироватьОтпуск
	|				И ОтпускаСотрудников.НоваяДатаОкончания < ВЫБОР
	|					КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|							ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|						ТОГДА ОтпускаСотрудников.ДатаОкончания
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|				КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.НоваяДатаОкончания < ВЫБОР
	|				КОГДА ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ ОтпускаСотрудников.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
	|					ТОГДА ОтпускаСотрудников.ДатаОкончания
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаСотрудников.ДатаНачалаДоп, СЕКУНДА, -1)
	|			КОНЕЦ
	|			ТОГДА ОтпускаСотрудников.НоваяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускаСотрудников.Сотрудник,
	|	ОтпускаСотрудников.ДатаНачалаДоп,
	|	ОтпускаСотрудников.ДатаОкончания,
	|	ОтпускаСотрудников.ВидДополнительногоОтпуска.ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.КорректироватьОтпуск
	|				И ОтпускаСотрудников.НоваяДатаОкончания < ОтпускаСотрудников.ДатаОкончания
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.НоваяДатаОкончания < ОтпускаСотрудников.ДатаОкончания
	|			ТОГДА ОтпускаСотрудников.НоваяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	СУММА(ВЫБОР
	|			КОГДА ОтпускаСотрудников.ВидДополнительногоОтпуска.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|				ТОГДА ЕСТЬNULL(ПроизводственныйКалендарь.Шестидневка, 0)
	|			ИНАЧЕ ЕСТЬNULL(ПроизводственныйКалендарь.КалендарныеДни, 0)
	|		КОНЕЦ),
	|	ОтпускаСотрудников.РегистраторНачалаОтпуска
	|ИЗ
	|	ВТ_ОтпускаСотрудников КАК ОтпускаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаСотрудников.ДатаНачалаДоп И ОтпускаСотрудников.ДатаОкончания)
	|ГДЕ
	|	(НЕ ОтпускаСотрудников.ВидДополнительногоОтпуска.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка))
	|	И (НЕ ОтпускаСотрудников.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтпускаСотрудников.Сотрудник,
	|	ОтпускаСотрудников.ДатаНачалаДоп,
	|	ОтпускаСотрудников.ДатаОкончания,
	|	ОтпускаСотрудников.ВидДополнительногоОтпуска.ВидЕжегодногоОтпуска,
	|	ОтпускаСотрудников.РегистраторНачалаОтпуска,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.КорректироватьОтпуск
	|				И ОтпускаСотрудников.НоваяДатаОкончания < ОтпускаСотрудников.ДатаОкончания
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОтпускаСотрудников.НоваяДатаОкончания < ОтпускаСотрудников.ДатаОкончания
	|			ТОГДА ОтпускаСотрудников.НоваяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостояниеРаботниковОрганизаций.Регистратор.Дата КАК ДатаРегистрации
	|ПОМЕСТИТЬ ВТ_ДатаРегистрации
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|ГДЕ
	|	СостояниеРаботниковОрганизаций.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отпуска.Сотрудник КАК Сотрудник,
	|	Отпуска.ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА Отпуска.КорректироватьОтпуск
	|			ТОГДА Отпуска.ДатаНачала
	|		ИНАЧЕ Отпуска.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	Отпуска.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА Отпуска.КорректироватьОтпуск
	|			ТОГДА Отпуска.НовоеКоличествоКадровыхДнейОтпуска - Отпуска.КадровыхДнейОтпуска
	|		ИНАЧЕ Отпуска.КадровыхДнейОтпуска - Отпуска.РасчетныхДнейОтпуска
	|	КОНЕЦ КАК ДнейОтпуска,
	|	ВТ_ДатаРегистрации.ДатаРегистрации
	|ИЗ
	|	(ВЫБРАТЬ
	|		КадровыеОтпуска.Сотрудник КАК Сотрудник,
	|		КадровыеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|		КадровыеОтпуска.ДатаНачала КАК ДатаНачала,
	|		КадровыеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|		СУММА(ЕСТЬNULL(ФактическиеОтпускаОрганизацийРасчетный.Количество, 0)) КАК РасчетныхДнейОтпуска,
	|		КадровыеОтпуска.ДнейОтпуска КАК КадровыхДнейОтпуска,
	|		КадровыеОтпуска.НовоеКоличествоДнейОтпуска КАК НовоеКоличествоКадровыхДнейОтпуска,
	|		КадровыеОтпуска.КорректироватьОтпуск КАК КорректироватьОтпуск
	|	ИЗ
	|		(ВЫБРАТЬ
	|			КадровыеОтпуска.Сотрудник КАК Сотрудник,
	|			КадровыеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|			ВЫБОР
	|				КОГДА КадровыеОтпуска.КорректироватьОтпуск
	|					ТОГДА ДОБАВИТЬКДАТЕ(КадровыеОтпуска.НоваяДатаОкончания, СЕКУНДА, 1)
	|				ИНАЧЕ КадровыеОтпуска.ДатаНачала
	|			КОНЕЦ КАК ДатаНачала,
	|			КадровыеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|			КадровыеОтпуска.ДнейОтпуска КАК ДнейОтпуска,
	|			КадровыеОтпуска.КорректироватьОтпуск КАК КорректироватьОтпуск,
	|			СУММА(ВЫБОР
	|					КОГДА КадровыеОтпуска.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|						ТОГДА ЕСТЬNULL(ПроизводственныйКалендарьКорректировка.Шестидневка, 0)
	|					ИНАЧЕ ЕСТЬNULL(ПроизводственныйКалендарьКорректировка.КалендарныеДни, 0)
	|				КОНЕЦ) КАК НовоеКоличествоДнейОтпуска,
	|			КадровыеОтпуска.РегистраторНачалаОтпуска КАК РегистраторНачалаОтпуска
	|		ИЗ
	|			ВТ_КадровыеОтпуска КАК КадровыеОтпуска
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарьКорректировка
	|				ПО (ПроизводственныйКалендарьКорректировка.ДатаКалендаря МЕЖДУ КадровыеОтпуска.ДатаНачала И КадровыеОтпуска.НоваяДатаОкончания)
	|					И (КадровыеОтпуска.КорректироватьОтпуск)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КадровыеОтпуска.Сотрудник,
	|			КадровыеОтпуска.ВидЕжегодногоОтпуска,
	|			КадровыеОтпуска.ДатаОкончания,
	|			КадровыеОтпуска.КорректироватьОтпуск,
	|			КадровыеОтпуска.ДнейОтпуска,
	|			КадровыеОтпуска.РегистраторНачалаОтпуска,
	|			ВЫБОР
	|				КОГДА КадровыеОтпуска.КорректироватьОтпуск
	|					ТОГДА ДОБАВИТЬКДАТЕ(КадровыеОтпуска.НоваяДатаОкончания, СЕКУНДА, 1)
	|				ИНАЧЕ КадровыеОтпуска.ДатаНачала
	|			КОНЕЦ) КАК КадровыеОтпуска
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпускаОрганизацийРасчетный КАК ФактическиеОтпускаОрганизацийРасчетный
	|			ПО КадровыеОтпуска.Сотрудник = ФактическиеОтпускаОрганизацийРасчетный.Сотрудник
	|				И КадровыеОтпуска.ВидЕжегодногоОтпуска = ФактическиеОтпускаОрганизацийРасчетный.ВидЕжегодногоОтпуска
	|				И (ФактическиеОтпускаОрганизацийРасчетный.Период МЕЖДУ КадровыеОтпуска.ДатаНачала И КадровыеОтпуска.ДатаОкончания
	|					ИЛИ ФактическиеОтпускаОрганизацийРасчетный.ДатаОкончания МЕЖДУ КадровыеОтпуска.ДатаНачала И КадровыеОтпуска.ДатаОкончания
	|					ИЛИ КадровыеОтпуска.ДатаНачала МЕЖДУ ФактическиеОтпускаОрганизацийРасчетный.Период И ФактическиеОтпускаОрганизацийРасчетный.ДатаОкончания
	|					ИЛИ КадровыеОтпуска.ДатаОкончания МЕЖДУ ФактическиеОтпускаОрганизацийРасчетный.Период И ФактическиеОтпускаОрганизацийРасчетный.ДатаОкончания)
	|				И (ФактическиеОтпускаОрганизацийРасчетный.Регистратор <> &Регистратор)
	|				И КадровыеОтпуска.РегистраторНачалаОтпуска <> ФактическиеОтпускаОрганизацийРасчетный.Регистратор
	|				И КадровыеОтпуска.РегистраторНачалаОтпуска.Дата > ФактическиеОтпускаОрганизацийРасчетный.ДатаРегистрации
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КадровыеОтпуска.Сотрудник,
	|		КадровыеОтпуска.ВидЕжегодногоОтпуска,
	|		КадровыеОтпуска.ДатаНачала,
	|		КадровыеОтпуска.ДатаОкончания,
	|		КадровыеОтпуска.ДнейОтпуска,
	|		КадровыеОтпуска.НовоеКоличествоДнейОтпуска,
	|		КадровыеОтпуска.КорректироватьОтпуск) КАК Отпуска,
	|	ВТ_ДатаРегистрации КАК ВТ_ДатаРегистрации
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Отпуска.КорректироватьОтпуск
	|				ТОГДА Отпуска.НовоеКоличествоКадровыхДнейОтпуска - Отпуска.КадровыхДнейОтпуска <> 0
	|			ИНАЧЕ Отпуска.КадровыхДнейОтпуска - Отпуска.РасчетныхДнейОтпуска <> 0
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаНачала";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыНакопления.ФактическиеОтпускаОрганизацийРасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	Пока Выборка.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период							= Выборка.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник						= Выборка.Сотрудник;
		Движение.ВидЕжегодногоОтпуска			= Выборка.ВидЕжегодногоОтпуска;
		
		// Ресурсы
		Движение.Количество						= Выборка.ДнейОтпуска;
		
		// Реквизиты
		Движение.ДатаОкончания					= Выборка.ДатаОкончания;
		Движение.ДатаРегистрации				= Выборка.ДатаРегистрации;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СписатьФактическиеОтпускаОсновнымиНачислениями(Знач Регистратор, Знач Организация) Экспорт
	
	ПорядокСписанияФактическихОтпусков = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПорядокСписанияФактическихОтпусков");
	//Если ПорядокСписанияФактическихОтпусков <> Перечисления.ПорядокСписанияФактическихОтпусков.РасчетнымиДокументами Тогда
	//	Возврат;
	//КонецЕсли;
	
	// Необходимо получить фактическое количество дней отпуска, используя таблицу ФПД
	// Необходимо собрать данные по кадровым отпускам за те же периоды и по тем сотрудникам
	// После чего сделать движения на положительную разницу количества дней отпуска между кадровыми и расчетными данными
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Начисления.Сотрудник КАК Сотрудник,
	//|	Начисления.ПериодДействия КАК ПериодДействия,
	//|	Начисления.ВидРасчета КАК ВидРасчета,
	//|	Начисления.Регистратор
	//|ПОМЕСТИТЬ ВТ_СотрудникиПериодыДействия
	//|ИЗ
	//|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	//|ГДЕ
	//|	Начисления.Регистратор = &Регистратор
	//|	И НЕ Начисления.ВидРасчета.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	Сотрудник,
	//|	ПериодДействия,
	//|	ВидРасчета
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	НачисленияФПД.Сотрудник КАК Сотрудник,
	//|	НачисленияФПД.ПериодДействияНачало КАК ПериодДействияНачало,
	//|	НачисленияФПД.ПериодДействияКонец КАК ПериодДействияКонец,
	//|	НачисленияФПД.ВидРасчета.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	//|	СУММА(ВЫБОР
	//|			КОГДА НачисленияФПД.ВидРасчета.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	//|				ТОГДА ПроизводственныйКалендарь.Шестидневка
	//|			ИНАЧЕ ПроизводственныйКалендарь.КалендарныеДни
	//|		КОНЕЦ * ВЫБОР
	//|			КОГДА НачисленияФПД.Сторно
	//|				ТОГДА -1
	//|			ИНАЧЕ 1
	//|		КОНЕЦ) КАК ДнейОтпуска,
	//|	НачисленияФПД.Сторно КАК Сторно,
	//|	НачисленияФПД.Регистратор.Дата КАК ДатаРегистрации,
	//|	НачисленияФПД.НомерСтроки КАК НомерСтроки
	//|ИЗ
	//|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	//|			(Сотрудник, ПериодДействия, ВидРасчета, Регистратор) В
	//|				(ВЫБРАТЬ
	//|					ОсновныеНачисления.Сотрудник,
	//|					ОсновныеНачисления.ПериодДействия,
	//|					ОсновныеНачисления.ВидРасчета,
	//|					ОсновныеНачисления.Регистратор
	//|				ИЗ
	//|					ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК НачисленияФПД
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	//|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НачисленияФПД.ПериодДействияНачало И НачисленияФПД.ПериодДействияКонец)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	НачисленияФПД.Сотрудник,
	//|	НачисленияФПД.ПериодДействияНачало,
	//|	НачисленияФПД.ПериодДействияКонец,
	//|	НачисленияФПД.Сторно,
	//|	НачисленияФПД.ВидРасчета.ВидЕжегодногоОтпуска,
	//|	НачисленияФПД.Регистратор.Дата,
	//|	НачисленияФПД.НомерСтроки
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерСтроки";
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.Регистратор
	|ПОМЕСТИТЬ ВТ_СотрудникиПериодыДействия
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И (НЕ Начисления.ВидРасчета.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия,
	|	ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// ЗАКОММЕНТИРОВАНО: Измайлова Полина 06.07.2011 15:44  
	//|ВЫБРАТЬ
	//|	НачисленияФПД.Сотрудник КАК Сотрудник,
	//|	НачисленияФПД.ПериодДействияНачало КАК ПериодДействияНачало,
	//|	НачисленияФПД.ПериодДействияКонец КАК ПериодДействияКонец,
	//|	НачисленияФПД.ВидРасчета.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	//|	СУММА(ПроизводственныйКалендарь.КалендарныеДни * ВЫБОР
	//|			КОГДА НачисленияФПД.Сторно
	//|				ТОГДА -1
	//|			ИНАЧЕ 1
	//|		КОНЕЦ) КАК ДнейОтпуска,
	//|	НачисленияФПД.Сторно КАК Сторно,
	//|	НачисленияФПД.Регистратор.Дата КАК ДатаРегистрации,
	//|	НачисленияФПД.НомерСтроки КАК НомерСтроки
	//|ИЗ
	//|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	//|			(Сотрудник, ПериодДействия, ВидРасчета, Регистратор) В
	//|				(ВЫБРАТЬ
	//|					ОсновныеНачисления.Сотрудник,
	//|					ОсновныеНачисления.ПериодДействия,
	//|					ОсновныеНачисления.ВидРасчета,
	//|					ОсновныеНачисления.Регистратор
	//|				ИЗ
	//|					ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК НачисленияФПД
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	//|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НачисленияФПД.ПериодДействияНачало И НачисленияФПД.ПериодДействияКонец)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	НачисленияФПД.Сотрудник,
	//|	НачисленияФПД.ПериодДействияНачало,
	//|	НачисленияФПД.ПериодДействияКонец,
	//|	НачисленияФПД.Сторно,
	//|	НачисленияФПД.ВидРасчета.ВидЕжегодногоОтпуска,
	//|	НачисленияФПД.Регистратор.Дата,
	//|	НачисленияФПД.НомерСтроки
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерСтроки";
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 06.07.2011 15:44 
	|ВЫБРАТЬ
	|	НачисленияФПД.Сотрудник КАК Сотрудник,
	|	НачисленияФПД.ПериодДействияНачало КАК ПериодДействияНачало,
	|	НачисленияФПД.ПериодДействияКонец КАК ПериодДействияКонец,
	|	НачисленияФПД.ВидРасчета.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	НачисленияФПД.Сторно КАК Сторно,
	|	НачисленияФПД.Регистратор.Дата КАК ДатаРегистрации,
	|	НачисленияФПД.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТОсновНачисленияФПД
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			(Сотрудник, ПериодДействия, ВидРасчета, Регистратор) В
	|				(ВЫБРАТЬ
	|					ОсновныеНачисления.Сотрудник,
	|					ОсновныеНачисления.ПериодДействия,
	|					ОсновныеНачисления.ВидРасчета,
	|					ОсновныеНачисления.Регистратор
	|				ИЗ
	|					ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК НачисленияФПД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействияНачало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследКадрИзменение.Сотрудник,
	|	ПоследКадрИзменение.ПериодДействияНачало,
	|	ПоследКадрИзменение.ПериодДействияКонец,
	|	ПоследКадрИзменение.ВидЕжегодногоОтпуска,
	|	ПоследКадрИзменение.Сторно,
	|	ПоследКадрИзменение.ДатаРегистрации,
	|	ПоследКадрИзменение.НомерСтроки,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= ПоследКадрИзменение.ПериодДействияНачало
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.AVT_ПроизводственныйКалендарь
	|		ИНАЧЕ РаботникиОрганизаций.ГрафикРаботы.AVT_ПроизводственныйКалендарь
	|	КОНЕЦ КАК Календарь
	|ПОМЕСТИТЬ ВТОсновНачисленияФПДСКаленд
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТОсновНачисленияФПД.Сотрудник КАК Сотрудник,
	|		ВТОсновНачисленияФПД.ПериодДействияНачало КАК ПериодДействияНачало,
	|		ВТОсновНачисленияФПД.ПериодДействияКонец КАК ПериодДействияКонец,
	|		ВТОсновНачисленияФПД.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|		ВТОсновНачисленияФПД.Сторно КАК Сторно,
	|		ВТОсновНачисленияФПД.ДатаРегистрации КАК ДатаРегистрации,
	|		ВТОсновНачисленияФПД.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|	ИЗ
	|		ВТОсновНачисленияФПД КАК ВТОсновНачисленияФПД
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ВТОсновНачисленияФПД.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И ВТОсновНачисленияФПД.ПериодДействияНачало >= РаботникиОрганизаций.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТОсновНачисленияФПД.ДатаРегистрации,
	|		ВТОсновНачисленияФПД.Сторно,
	|		ВТОсновНачисленияФПД.ВидЕжегодногоОтпуска,
	|		ВТОсновНачисленияФПД.ПериодДействияКонец,
	|		ВТОсновНачисленияФПД.ПериодДействияНачало,
	|		ВТОсновНачисленияФПД.Сотрудник,
	|		ВТОсновНачисленияФПД.НомерСтроки) КАК ПоследКадрИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ПоследКадрИзменение.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И ПоследКадрИзменение.Период = РаботникиОрганизаций.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОсновНачисленияФПДСКаленд.Сотрудник,
	|	ВТОсновНачисленияФПДСКаленд.ПериодДействияНачало,
	|	ВТОсновНачисленияФПДСКаленд.ПериодДействияКонец,
	|	ВТОсновНачисленияФПДСКаленд.ВидЕжегодногоОтпуска,
	|	ВТОсновНачисленияФПДСКаленд.Сторно,
	|	ВТОсновНачисленияФПДСКаленд.ДатаРегистрации,
	|	ВТОсновНачисленияФПДСКаленд.НомерСтроки КАК НомерСтроки,
	|	СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни * ВЫБОР
	|			КОГДА ВТОсновНачисленияФПДСКаленд.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДнейОтпуска
	|ИЗ
	|	ВТОсновНачисленияФПДСКаленд КАК ВТОсновНачисленияФПДСКаленд
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ПО ВТОсновНачисленияФПДСКаленд.Календарь = РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь
	|			И (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ВТОсновНачисленияФПДСКаленд.ПериодДействияНачало И ВТОсновНачисленияФПДСКаленд.ПериодДействияКонец)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОсновНачисленияФПДСКаленд.Сторно,
	|	ВТОсновНачисленияФПДСКаленд.ДатаРегистрации,
	|	ВТОсновНачисленияФПДСКаленд.ПериодДействияКонец,
	|	ВТОсновНачисленияФПДСКаленд.ВидЕжегодногоОтпуска,
	|	ВТОсновНачисленияФПДСКаленд.Сотрудник,
	|	ВТОсновНачисленияФПДСКаленд.ПериодДействияНачало,
	|	ВТОсновНачисленияФПДСКаленд.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
	
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыНакопления.ФактическиеОтпускаОрганизацийРасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Прочитать();
	Пока Выборка.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период					= Выборка.ПериодДействияНачало;
		
		// Измерения
		Движение.Сотрудник				= Выборка.Сотрудник;
		Движение.ВидЕжегодногоОтпуска	= Выборка.ВидЕжегодногоОтпуска;
		
		// Ресурсы
		Движение.Количество				= Выборка.ДнейОтпуска;
		
		// Реквизиты
		Движение.ДатаОкончания			= Выборка.ПериодДействияКонец;
		Движение.ДатаРегистрации		= Выборка.ДатаРегистрации;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СписатьФактическиеОтпускаДополнительнымиНачислениями(Знач Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ДатаНачалаСобытия КАК ПериодДействия,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.ВидРасчета.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	Начисления.ОплаченоДнейЧасов КАК ДнейОтпуска,
	|	Начисления.Регистратор.Дата КАК ДатаРегистрации
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И (НЕ Начисления.ВидРасчета.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Сторно УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыНакопления.ФактическиеОтпускаОрганизацийРасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Прочитать();
	Пока Выборка.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период					= Выборка.ПериодДействия;
		
		// Измерения
		Движение.Сотрудник				= Выборка.Сотрудник;
		Движение.ВидЕжегодногоОтпуска	= Выборка.ВидЕжегодногоОтпуска;
		
		// Ресурсы
		Движение.Количество				= Выборка.ДнейОтпуска;
		
		// Реквизиты
		Движение.Компенсация			= Истина;
		Движение.ДатаРегистрации		= Выборка.ДатаРегистрации;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СписатьФактическиеОтпускаУдержаниями(Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.Сотрудник КАК Сотрудник,
	|	Удержания.ДатаНачалаСобытия КАК ПериодДействия,
	|	Удержания.Сторно КАК Сторно,
	|	Начисления.ВидЕжегодногоОтпуска,
	|	Удержания.Показатель1 КАК ДнейОтпуска,
	|	Удержания.Регистратор.Дата КАК ДатаРегистрации
	|ИЗ
	|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК Начисления
	|		ПО (Начисления.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни))
	|			И ((НЕ Начисления.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ПустаяСсылка)))
	|ГДЕ
	|	Удержания.Регистратор = &Регистратор
	|	И Удержания.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Сторно УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыНакопления.ФактическиеОтпускаОрганизацийРасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Прочитать();
	Пока Выборка.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период					= Выборка.ПериодДействия;
		
		// Измерения
		Движение.Сотрудник				= Выборка.Сотрудник;
		Движение.ВидЕжегодногоОтпуска	= Выборка.ВидЕжегодногоОтпуска;
		
		// Ресурсы
		Движение.Количество				= -Выборка.ДнейОтпуска * ?(Выборка.Сторно, -1, 1);
		
		// Реквизиты
		Движение.Компенсация			= Истина;
		Движение.ДатаРегистрации		= Выборка.ДатаРегистрации;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Процедура записи расчитанных остатков в справочник остатков

Функция ОстатокОтпускаСпискаСотрудниковНаПоследнийРабочийГод(Знач МассивСотрудников, Знач ДатаОстатков = '00010101')
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник				= Сотрудник;
		Строка.ДатаОстатков				= НачалоДня(ДатаОстатков);
	КонецЦикла;
	
	Результат = ОстаткиОтпусков(ТаблицаДанных);
	
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("Сотрудник");
	ТаблицаСведений.Колонки.Добавить("ОстаткиВРазрезеВидовОтпусков");
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		ОстаткиВРазрезеРабочихЛетИВидовОтпусков	= Новый Массив;
		МожноВводитьОстатки						= Истина;
		
		Для Каждого ОстатокПоВидуОтпуска Из СтрокаРезультата.ОстатокНаДатуПоВидамЕжегодныхОтпусков Цикл
			ПредпоследнийРабочийГод			= Неопределено;
			ДатаПредпоследнегоРабочегоГода	= Дата(1, 1, 1);
			Для Каждого РабочийГод Из СтрокаРезультата.ДанныеРасчета Цикл
				Если РабочийГод.ПоследнийРабочийгод Или ОстатокПоВидуОтпуска.ВидЕжегодногоОтпуска <> РабочийГод.ВидЕжегодногоОтпуска Тогда
					Продолжить;
				КонецЕсли;
				Если ДатаПредпоследнегоРабочегоГода < РабочийГод.ДатаОкончания Тогда
					ДатаПредпоследнегоРабочегоГода	= РабочийГод.ДатаОкончания;
					ПредпоследнийРабочийГод			= РабочийГод;
				КонецЕсли;
			КонецЦикла;
			Если ПредпоследнийРабочийГод <> Неопределено Тогда
				ОстаткиВРазрезеРабочихЛетИВидовОтпусков.Добавить(Новый Структура("ВидЕжегодногоОтпуска, ОсталосьДней, РабочийГодС, РабочийГодПо",
					ПредпоследнийРабочийГод.ВидЕжегодногоОтпуска, ПредпоследнийРабочийГод.ОстатокНаКонецТекущегоГода, ПредпоследнийРабочийГод.ДатаНачала, ПредпоследнийРабочийГод.ДатаОкончания));
				Если ПредпоследнийРабочийГод.ВведенныеОстатки <> Неопределено Тогда
					МожноВводитьОстатки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ОстаткиВРазрезеРабочихЛетИВидовОтпусков.Количество() = 0 Тогда
			МожноВводитьОстатки = Ложь;
		КонецЕсли;
		
		Если Не МожноВводитьОстатки Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = ТаблицаСведений.Добавить();
		Строка.Сотрудник								= СтрокаРезультата.Сотрудник;
		Строка.ОстаткиВРазрезеВидовОтпусков				= ОстаткиВРазрезеРабочихЛетИВидовОтпусков;
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Процедура РассчитатьОстаткиИЗаписатьИхВСправочник() Экспорт
	
	РабДата = НачалоДня(НачалоДня(ТекущаяДатаСеанса()));
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("РабДата",	РабДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиСрезПоследних.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&РабДата, ) КАК РаботникиСрезПоследних
	|ГДЕ
	|	РаботникиСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
	
	СписокСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Результат = ОстатокОтпускаСпискаСотрудниковНаПоследнийРабочийГод(СписокСотрудников, РабДата);
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		ОстаткиОтпусковОбъект = Справочники.ОстаткиОтпусковОрганизаций.СоздатьЭлемент();
		ОстаткиОтпусковОбъект.Сотрудник			= СтрокаРезультата.Сотрудник;
		ОстаткиОтпусковОбъект.ДатаАктуальности	= РабДата;
		ОстаткиОтпусковОбъект.Наименование		= Строка(ОстаткиОтпусковОбъект.Сотрудник) + ", " + Формат(ОстаткиОтпусковОбъект.ДатаАктуальности, "ДФ=dd.MM.yyyy");
		
		Для Каждого Остаток Из СтрокаРезультата.ОстаткиВРазрезеВидовОтпусков Цикл
			Строка = ОстаткиОтпусковОбъект.Остатки.Добавить();
			Строка.ВидЕжегодногоОтпуска			= Остаток.ВидЕжегодногоОтпуска;
			Строка.Количество					= Остаток.ОсталосьДней;
			Строка.ДатаНачалаРабочегоГода		= Остаток.РабочийГодС;
			Строка.ДатаОкончанияРабочегоГода	= Остаток.РабочийГодПо;
		КонецЦикла;
		
		Если ОстаткиОтпусковОбъект.Остатки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОстаткиОтпусковОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедуры обновления ИБ

Процедура ДобавитьВидЕжегодногоОтпускаВВидРасчета(ВидРасчета, ВидОтпуска)
	
	ВидРасчетаОбъект = ВидРасчета.ПолучитьОбъект();
	ВидРасчетаОбъект.ВидЕжегодногоОтпуска = ВидОтпуска;
	ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
	ВидРасчетаОбъект.Записать();
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов)

	Если ТипЗнч(ИменаРеквизитов) = Тип("Структура") Тогда
		СтруктураРеквизитов = ИменаРеквизитов;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(ИменаРеквизитов);;
	КонецЕсли;

	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|" + ТекстПолей + "
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
		|ГДЕ
		|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);

	Возврат Результат;
КонецФункции
