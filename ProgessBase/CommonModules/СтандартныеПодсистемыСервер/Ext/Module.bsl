////////////////////////////////////////////////////////////////////////////////
// Внутренние процедуры и функции подсистемы "Базовая функциональность".
//

// Неинтерактивное обновление данных ИБ при смене версии библиотеки
// Обязательная "точка входа" обновления ИБ в библиотеке.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления("СтандартныеПодсистемы", 
		ВерсияБиблиотеки(), СтандартныеПодсистемыПереопределяемый.ОбработчикиОбновленияСтандартныхПодсистем());
	
КонецПроцедуры

// Возвращает номер версии Библиотеки стандартных подсистем.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.2.4.1";
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ИнформационнаяБазаЗаблокированаДляОбновления", 
		ОбновлениеИнформационнойБазы.ПроверитьНевозможностьОбновленияИнформационнойБазы());
	Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы", 
		ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы());
	Параметры.Вставить("АвторизованныйПользователь", ПользователиСервер.АвторизованныйПользователь());
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", СтандартныеПодсистемыПереопределяемый.ЭтоБазоваяВерсияКонфигурации());
	
	Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
	Параметры.Вставить("ИмяКонфигурации", Метаданные.Имя);
	Параметры.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	Параметры.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());
	Параметры.Вставить("ТекущийПользователь", ОбщегоНазначения.ТекущийПользователь());
		
	// Параметры для внешних подключений пользователей
	Параметры.Вставить("ИнформацияОПользователе", ПолучитьИнформациюОПользователе());
	Параметры.Вставить("ИмяCOMСоединителя", ОбщегоНазначения.ИмяCOMСоединителя());
	
КонецПроцедуры

Функция ПолучитьИнформациюОПользователе()
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Возврат Новый Структура("Имя, ПолноеИмя, ПарольУстановлен, АутентификацияСтандартная, АутентификацияОС",
		ТекущийПользователь.Имя, ТекущийПользователь.ПолноеИмя, ТекущийПользователь.ПарольУстановлен,
		ТекущийПользователь.АутентификацияСтандартная, ТекущийПользователь.АутентификацияОС);
КонецФункции

// Обработчики обновления базовой функциональности
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции поддержки инициализации параметров сеанса
//

// Инициализация параметров сенаса.
// Параметры
//  ИменаПараметровСеанса - массив, неопределено - 
//                         в массиве имена параметров сеанса для инициализации
//
//  Возвращает массив имен установленных параметров сеанса
//
Функция УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	Перем ТекстСообщения;
	
	// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
	// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
	// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры
	УстановленныеПараметры = Новый Массив;
	
	Если ИменаПараметровСеанса = Неопределено Тогда
		Возврат УстановленныеПараметры;
	КонецЕсли;
	
	Обработчики = СтандартныеПодсистемыПереопределяемый.ОбработчикиИнициализацииПараметровСеансаСтандартныхПодсистем();
	ОбработчикиСобственные = ОбщегоНазначенияЗКПереопределяемый.ОбработчикиИнициализацииПараметровСеанса();
	
	Для Каждого Запись Из ОбработчикиСобственные Цикл
		Обработчики.Вставить(Запись.Ключ, Запись.Значение);
	КонецЦикла;
	
	// массив с ключами параметров сеанса
	// задаются начальным словом в имени параметра сеанса и символом "*"
	ПараметрыСеансаКлючи = Новый Массив;
	
	Для Каждого Запись Из Обработчики Цикл
		Если Найти(Запись.Ключ, "*") > 0 Тогда
			КлючПараметра = СокрЛП(Запись.Ключ);
			ПараметрыСеансаКлючи.Добавить(Лев(КлючПараметра, СтрДлина(КлючПараметра)-1));
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
		Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Обработчик = Обработчики.Получить(ИмяПараметра);
		Если Обработчик <> Неопределено Тогда
			Если Не ОбщегоНазначения.ПроверитьИмяЭкспортнойПроцедуры(Обработчик, ТекстСообщения) Тогда
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			Выполнить Обработчик + "(ИмяПараметра, УстановленныеПараметры)";
			Продолжить;
		КонецЕсли;
		Для Каждого ИмяКлючаПараметра Из ПараметрыСеансаКлючи Цикл
			Если Лев(ИмяПараметра, СтрДлина(ИмяКлючаПараметра)) = ИмяКлючаПараметра Тогда
				Обработчик = Обработчики.Получить(ИмяКлючаПараметра+"*");
				Если Не ОбщегоНазначения.ПроверитьИмяЭкспортнойПроцедуры(Обработчик, ТекстСообщения) Тогда
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				Выполнить Обработчик + "(ИмяПараметра, УстановленныеПараметры)";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат УстановленныеПараметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подтверждение завершения работы программы

// Прочитать настройку подтверждения завершения работы программы
// для текущего пользователя.
// 
// Возвращаемое значение:
//   Булево   - значение настройки.
// 
Функция ЗапрашиватьПодтверждениеПриЗавершенииПрограммы() Экспорт
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
	Если Результат = Неопределено Тогда
		Результат = Истина;
		СтандартныеПодсистемыВызовСервера.СохранитьНастройкуПодтвержденияПриЗавершенииПрограммы(Результат);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции
