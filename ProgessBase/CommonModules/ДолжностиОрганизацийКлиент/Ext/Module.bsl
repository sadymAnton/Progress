////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции для работы формы элемента

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "", ЭтаФорма)

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	ОбработкаОбъектЗначенияСвойств = ЭтаФорма.ОбработкаОбъектЗначенияСвойств;
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДолжностиОрганизаций Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = ЭтаФорма.Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = ЭтаФорма.Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "", ЭтаФорма)

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	ОбработкаОбъектКатегорииОбъекта = ЭтаФорма.ОбработкаОбъектКатегорииОбъекта;
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДолжностиОрганизаций Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = ЭтаФорма.Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура ФормаЭлементаСвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма) Экспорт

	Отказ = Истина;

	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура ФормаЭлементаСвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока, ЭтаФорма) Экспорт

	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура ФормаЭлементаСвойстваИЗначенияПередУдалением(Элемент, Отказ, ЭтаФорма) Экспорт

	Отказ = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура ФормаЭлементаСвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма) Экспорт
	
	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура ФормаЭлементаСвойстваИЗначенияЗначениеПриИзменении(Элемент, ЭтаФорма) Экспорт

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура ФормаЭлементаСвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка, ЭтаФорма) Экспорт

	СтандартнаяОбработка = Ложь;

	ЭтаФорма.ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭтаФорма.ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура ФормаЭлементаКатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма) Экспорт

	Отказ = Истина;

	ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура ФормаЭлементаКатегорииПередУдалением(Элемент, Отказ, ЭтаФорма) Экспорт

	Отказ = Истина;

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура ФормаЭлементаКатегорииПриИзмененииФлажка(Элемент, НоваяСтрока, ЭтаФорма) Экспорт

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура ФормаЭлементаКатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма) Экспорт

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
	
Процедура ФормаЭлементаПередОткрытием(Отказ, СтандартнаяОбработка, ЭтаФорма) Экспорт
	
	ЭтаФорма.ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДолжностиОрганизаций;
	ПрочитатьЗаполнитьСвойстваИЗначения(,ЭтаФорма);

	ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДолжностиОрганизаций;
	ПрочитатьЗаполнитьКатегории(,ЭтаФорма);
	
	ПрочитатьКлассУсловийТруда(ЭтаФорма);
	
КонецПроцедуры

Процедура ФормаЭлементаПриОткрытии(ЭтаФорма) Экспорт
	
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(ЭтаФорма.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);	
	
	ЕстьЛетчики = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудЧленовЛетныхЭкипажей");
	ЕстьШахтеры = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудШахтеров");
	ЕстьФармацевты = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудФармацевтов");
	ЕстьРаботыСДосрочнойПенсией = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуютсяРаботыСДосрочнойПенсией");
	ЕстьКлассыУсловийТруда = ЕстьРаботыСДосрочнойПенсией И ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ПрименятьРезультатыСпециальнойОценкиУсловийТруда");

	ЭлементыФормы.ПанельРаботСДосрочнойПенсией.Свертка = ?(ЕстьРаботыСДосрочнойПенсией, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	ЭлементыФормы.ПанельИсторииКлассовУсловийТруда.Свертка = ?(ЕстьКлассыУсловийТруда, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	ЭлементыФормы.ПанельДолжностиЛетногоЭкипажа.Свертка = ?(ЕстьЛетчики, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	ЭлементыФормы.ПанельШахтерскойДолжности.Свертка = ?(ЕстьШахтеры, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	ЭлементыФормы.ПанельФармацевтов.Свертка = ?(ЕстьФармацевты, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	ЭлементыФормы.ПанельСтраховыеВзносы.Свертка = ?(ЕстьЛетчики Или ЕстьШахтеры Или ЕстьФармацевты Или ЕстьРаботыСДосрочнойПенсией Или ЕстьКлассыУсловийТруда, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаписиНовогоОбъекта" формы
//
Процедура ФормаЭлементаОбработкаЗаписиНовогоОбъекта(Объект, Источник, ЭтаФорма) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭтаФорма.ЭлементыФормы.СвойстваИЗначения);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов") Тогда
		ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект, ЭтаФорма.ЭлементыФормы.СвойстваИЗначения);
		
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭтаФорма.ЭлементыФормы.Категории);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.КатегорииОбъектов") Тогда
		ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект, ЭтаФорма.ЭлементыФормы.Категории);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаЭлементаПриЗаписи(Отказ, ЭтаФорма) Экспорт
	
	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств 	= ЭтаФорма.ОбработкаОбъектЗначенияСвойств;
	ОбработкаОбъектКатегорииОбъекта = ЭтаФорма.ОбработкаОбъектКатегорииОбъекта;
	
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = ЭтаФорма.Ссылка;
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = ЭтаФорма.Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = ЭтаФорма.Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();
	
КонецПроцедуры

Процедура ФормаЭлементаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ОбновитьНадписьИсторииКлассовУсловийТрудаТекст" и (Источник = Форма.Ссылка или (ТипЗнч(Источник) = Тип("СправочникСсылка.ДолжностиОрганизаций") и Источник.Пустая())) Тогда
		ПрочитатьКлассУсловийТруда(Форма);
    КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ФормаЭлементаДействияФормыРедактироватьКод(Кнопка, ЭтаФорма) Экспорт
	
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтаФорма.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
КонецПроцедуры

Процедура ФормаЭлементаНадписьИсторииКлассовУсловийТрудаТекстНажатие(Объект, Форма, Элемент) Экспорт
	
	Отказ = Ложь;

	Если Объект.ЭтоНовый() Тогда
		Вопрос = "Перед назначением класса условий труда необходимо записать должность. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Отказ = Не Форма.ЗаписатьВФорме();
			Исключение
				ОбщегоНазначенияЗК.СообщитьОбОшибке("Не удалось записать элемент!");
				Отказ = Истина;
			КонецПопытки;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ФормаРегистра = РегистрыСведений.КлассыУсловийТрудаПоДолжностям.ПолучитьФормуСписка( , Форма, Элемент);
		ФормаРегистра.РегистрСведенийСписок.Отбор.Должность.Установить(Объект.Ссылка);
		ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.Колонки.Должность.Видимость = Ложь;
		ФормаРегистра.Заголовок = "Классы условий труда по должности: " +СокрЛП(Объект.Наименование);
		ФормаРегистра.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ПрочитатьКлассУсловийТруда(Форма)

	ЕстьРаботыСДосрочнойПенсией = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуютсяРаботыСДосрочнойПенсией");
	ЕстьКлассыУсловийТруда = ЕстьРаботыСДосрочнойПенсией И ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ПрименятьРезультатыСпециальнойОценкиУсловийТруда");
	Если Не ЕстьКлассыУсловийТруда Тогда
		Возврат
	КонецЕсли;
	
	Отбор = Новый Структура("Должность", Форма.Ссылка);
	
	СрезПоследних = РегистрыСведений.КлассыУсловийТрудаПоДолжностям.СрезПоследних(ОбщегоНазначенияЗК.ПолучитьРабочуюДату(), Отбор);
	
	Если Форма.ЭтотОбъект.ЭтоНовый() Или СрезПоследних.Количество() = 0 Тогда
		Форма.ЭлементыФормы.НадписьИсторииКлассовУсловийТрудаТекст.Заголовок = "Не указан." + Символы.ПС + "Используется при начислении взносов по дополнительному тарифу.";	
	ИначеЕсли ЗначениеЗаполнено(СрезПоследних[0].Должность) Тогда
		Форма.ЭлементыФормы.НадписьИсторииКлассовУсловийТрудаТекст.Заголовок = Строка(СрезПоследних[0].КлассУсловийТруда) + ", с " + Формат(СрезПоследних[0].Период, "ДЛФ=DD");
	Иначе
		Форма.ЭлементыФормы.НадписьИсторииКлассовУсловийТрудаТекст.Заголовок = "Не указан с " + Формат(СрезПоследних[0].Период, "ДЛФ=DD") + Символы.ПС + "Используется при начислении взносов по дополнительному тарифу.";	
	КонецЕсли;

КонецПроцедуры