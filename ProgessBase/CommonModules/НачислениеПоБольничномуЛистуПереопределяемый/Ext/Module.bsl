
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура АвтозаполнениеПроводок2009(ДокументОбъект, ВыборкаПоШапкеДокумента = Неопределено, ФормироватьДвижения = Истина)

	мДатаЗакона180ФЗ = '20060101';	// 1 января 2006 года
	мДлинаСуток		 = 86400;		// в секундах
	
	// Получим реквизиты шапки из запроса
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = ДокументОбъект.СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	СтруктураПараметровПеременныхВеденияУчета = ОтражениеЗарплатыВРеглУчетеДополнительный.ПолучитьСтруктураПараметровПеременныхВеденияУчета(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ВыборкаПоШапкеДокумента.ПериодРегистрации);
	
	ПричинаНетрудоспособности = ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности;
	ПериодРегистрации = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Организация = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Ссылка = ВыборкаПоШапкеДокумента.Ссылка;
	
	Движения = ДокументОбъект.Движения;
	ОтражениеНачислений = ДокументОбъект.ОтражениеНачислений;
	ПособиеОтражаетсяВРеглУчетеТекущимДокументом = ДокументОбъект.ПособиеОтражаетсяВРеглУчетеТекущимДокументом;
	
	// запрос по соответсвиям статей затрат начислений и статей затарт для 
	// отражения б/л за счет работодателя
	// соответствие будет использоваться только при отражении в учете
	//доли за счет работодателя по данным базовых начислений
	ДополнительныеСтатьиЗатратЗапрос = Новый Запрос(
	"ВЫБРАТЬ
	|   СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете.ВидСтатьиЗатрат,
	|   СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете.СтатьяЗатратНачисления,
	|   СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете.СтатьяЗатрат
	|ИЗ
	|   РегистрСведений.СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете КАК СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете
	|ГДЕ
	|   СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете.ВидСтатьиЗатрат = &ПособияЗаСчетРаботодателя");
	
	ДополнительныеСтатьиЗатратЗапрос.УстановитьПараметр("ДатаЗапроса", ПериодРегистрации);
	ДополнительныеСтатьиЗатратЗапрос.УстановитьПараметр("ПособияЗаСчетРаботодателя", Перечисления.ВидыДополнительныхСтатейЗатрат.ПособияЗаСчетРаботодателя);
	ДополнительныеСтатьиЗатрат = ДополнительныеСтатьиЗатратЗапрос.Выполнить().Выгрузить();
	
	ПараметрыПолученияСубконто = Новый Соответствие;
	ПараметрыПолученияСубконто[Тип("СправочникСсылка.СтатьиЗатрат")] = Новый Структура("ВидСтатьиЗатрат, ДополнительныеСтатьиЗатрат", 
									Перечисления.ВидыДополнительныхСтатейЗатрат.ПособияЗаСчетРаботодателя, 
									ДополнительныеСтатьиЗатрат);
	
	Если ФормироватьДвижения Тогда
		
		// Заголовок для сообщений об ошибках проведения.
		Заголовок = "Формирование списка проводок документа: " + СокрЛП(Ссылка);
		Отказ = Ложь;
		ПроверятьМестоРаботы = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия >= мДатаЗакона180ФЗ;
		
		// перепишем данные из таблицы начислений в набор записей
		ВыборкаПоНачислениям = ДокументОбъект.СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			
			// проверим очередную строку табличной части
			ДокументОбъект.ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок, ПроверятьМестоРаботы);
			
			Если НЕ Отказ Тогда
				Если ВыборкаПоНачислениям.ОсновныеНачисления Тогда
					ДокументОбъект.ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
				Иначе
					ПроведениеРасчетов.ДобавитьСтрокуДополнительныхНачислений(Движения.ДополнительныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// получим реквизиты табличной части
		ВыборкаПоРасчетСреднего = ДокументОбъект.СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			// проверим очередную строку табличной части
			ДокументОбъект.ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок, ПроверятьМестоРаботы);
			
			Если НЕ Отказ Тогда
				ДокументОбъект.ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отказ Тогда
			Возврат 
		КонецЕсли;
		
		Для Каждого Набор Из Движения Цикл
			Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
				Набор.Записать(Истина, Ложь, Истина, Ложь);
			ИначеЕсли ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.РасчетСреднегоЗаработка") Тогда
				Набор.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
	
	мЕНВД = Ложь;
	Если ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
		// определим налоговый режим
		НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(ПериодРегистрации), Организация);
		УчетнаяПолитика = глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете")[КонецМесяца(ПериодРегистрации)][Организация];
		мУСН = УчетнаяПолитика.УСН;
		мОбъектНалогообложенияУСН = УчетнаяПолитика.ОбъектНалогообложенияУСН;
		мЕНВД = УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД;
		мФСС_БЛ = УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС;
	КонецЕсли;
	
	УказаноОтражениеВУчетеДляРаботодателя = ВыборкаПоШапкеДокумента.УказаноОтражениеВУчетеДляРаботодателя;
	ВторойКалендарныйДень = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия + мДлинаСуток;
	ТретийКалендарныйДень = ВторойКалендарныйДень + мДлинаСуток;
	
	// для всех болезней, кроме прозводственного травматизма может потребоваться расчетная база
	// расчетная база используется для вычисления доли ЕНВД и для распределения по счетам затрат
	// доли пособия за счет работодателя, когда явно не указан способ отражения пособия за счет работодателя:
	// - два календарных дня при ОСН
	// - при УСН доходы минус расходы, добровольные взносы не уплачиваются
	
	НадоЧитатьРасчетнуюБазу = ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве 
								И ((мЕНВД И ВыборкаПоШапкеДокумента.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления)
									ИЛИ (Не УказаноОтражениеВУчетеДляРаботодателя	
										И НЕ мУСН
										И (ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание ИЛИ ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаВБыту))
									ИЛИ (Не УказаноОтражениеВУчетеДляРаботодателя
										И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам
										И мУСН и НЕ мФСС_БЛ
										И мОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы));
										//
								
	// основная выборка - по ней ведем обход и вводим записи движений
	РезультатДанныеУчета = НачислениеПоБольничномуЛистуДополнительный.ПолучитьДанныеУчета2009(ВыборкаПоШапкеДокумента, НадоЧитатьРасчетнуюБазу);
	ДанныеУчета = РезультатДанныеУчета.Выбрать();
	
	ПродолжатьОбработку = ДанныеУчета.Следующий(); 
	Успешно = Истина;
	
	НаборЗаписей = ОтражениеНачислений.ВыгрузитьКолонки();
	
	ДокументОбъект.ПодпадаетПодЕНВД = 0;
	
	Если ПродолжатьОбработку и мЕНВД И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
		
		Если ВыборкаПоШапкеДокумента.СтратегияОтраженияВУчете <> Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления Тогда
			
			ДокументОбъект.ПодпадаетПодЕНВД = ВыборкаПоШапкеДокумента.ПроцентЕНВД;
			
		Иначе
			
			ОбщаяБазаРаспределенияСтроки = 0;
			БазаЕНВД = 0;
			
			// вспомогательная выборка - по ней ведем суммирование базовых результатов
			ДанныеУчетаВспомогательные = РезультатДанныеУчета.Выбрать();
			ДанныеУчетаВспомогательные.Следующий();
			ТекущийНомерСтроки = ДанныеУчетаВспомогательные.НомерСтроки;
			
			// суммируем базовые ресурсы по текущей строке набора записей
			Пока ДанныеУчетаВспомогательные.НомерСтроки = ТекущийНомерСтроки Цикл
				Если НЕ ДанныеУчетаВспомогательные.Сторно Тогда
					Если ДанныеУчетаВспомогательные.РезультатБаза = NULL Тогда
						Успешно = Ложь;
					Иначе
						ОбщаяБазаРаспределенияСтроки = ОбщаяБазаРаспределенияСтроки + ДанныеУчетаВспомогательные.РезультатБаза;
						Если ДанныеУчетаВспомогательные.ЭтоЕНВД Тогда
							БазаЕНВД = БазаЕНВД + ДанныеУчетаВспомогательные.РезультатБаза
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				Если Не ДанныеУчетаВспомогательные.Следующий() Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОбщаяБазаРаспределенияСтроки = 0 Тогда
				ДоляЕНВД = 0
			Иначе
				ДоляЕНВД = БазаЕНВД / ОбщаяБазаРаспределенияСтроки
			КонецЕсли;
			ДокументОбъект.ПодпадаетПодЕНВД = ДоляЕНВД * 100;
		КонецЕсли;
		
	КонецЕсли;
	
	// вспомогательная выборка - по ней ведем суммирование базовых результатов
	ДанныеУчетаВспомогательные = РезультатДанныеУчета.Выбрать();
	
	// структура поиска для позиционирования в ДанныеНалоговогоУчетаВспомогательные
	// при необходимости суммирования "базовых" ресурсов
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		КомментарийОшибкаСбораРасчетнойБазы = "";
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	#КонецЕсли

	
	ЗаполнятьДанныеНУ = СтруктураПараметровПеременныхВеденияУчета.ЗаполнятьДанныеНУ;
	ЗаполнятьСчетаНУ  = СтруктураПараметровПеременныхВеденияУчета.ЗаполнятьСчетаНУ;
	УчетПоПодразделениямНаСчетах = СтруктураПараметровПеременныхВеденияУчета.УчетПоПодразделениямНаСчетах;
	
	Пока ПродолжатьОбработку Цикл
		
		Если ДанныеУчета.Сторно Тогда
			
			ТекущийНомерСтроки = ДанныеУчета.НомерСтроки;
			// позиционируемся во вспомогательной выборке по запросу для суммирования "базовых" данных
			СтруктураПоиска.НомерСтроки = ТекущийНомерСтроки;
			Если ДанныеУчетаВспомогательные.НомерСтроки <> ТекущийНомерСтроки Тогда
				// ищем следующую строку во спомогательной выборке если она не является искомой	
				ДанныеУчетаВспомогательные.НайтиСледующий(СтруктураПоиска);
			КонецЕсли;
			
			СуммаПоСтроке = 0;
			
			// суммируем базовые ресурсы по текущей строке набора записей
			Пока ДанныеУчетаВспомогательные.НомерСтроки = ТекущийНомерСтроки Цикл
				Если ДанныеУчетаВспомогательные.РезультатСторно = NULL Тогда
					Успешно = Ложь;
				Иначе
					СуммаПоСтроке = СуммаПоСтроке + ДанныеУчетаВспомогательные.РезультатСторно;
				КонецЕсли;
				Если Не ДанныеУчетаВспомогательные.Следующий() Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// суммарная доля, которую уже "разбросали" на строки с одинаковым номером строки
			СуммарнаяДоля = 0;
			// полный результат
			ПолныйРезультат = ДанныеУчета.Результат;
			
			СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
			
			// обходим строки и вычисляем долю результата по базовым записям
			ПерваяИзГруппыСтрок = Истина;
			Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
				// если это не первая из группы "базовых" строк по одной строке основного регистра
				// то создаем очередную строку движений
					
				Если Не ПерваяИзГруппыСтрок Тогда
					СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
				Иначе
					ПерваяИзГруппыСтрок = Ложь;
				КонецЕсли;
				
				Если СуммаПоСтроке = 0 Тогда
					Доля = 0;
				Иначе
					Если ДанныеУчета.РезультатСторно = NULL Тогда
						Успешно = Ложь;
						Доля = 0;
					Иначе
						Доля = ПолныйРезультат * ДанныеУчета.РезультатСторно / СуммаПоСтроке;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДт;
				СтрокаДанных.СубконтоДт1 = ДанныеУчета.СубконтоДт1;
				СтрокаДанных.СубконтоДт2 = ДанныеУчета.СубконтоДт2;
				СтрокаДанных.СубконтоДт3 = ДанныеУчета.СубконтоДт3;
				СтрокаДанных.СпособРаспределенияЗатрат = ДанныеУчета.СпособРаспределенияЗатрат;
				СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКт;
				СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1;
				СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2;
				СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3;
				
				Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
					СтрокаДанных.СчетДтНУ 	   = ДанныеУчета.СчетДтНУ;
					СтрокаДанных.СубконтоДтНУ1 = ДанныеУчета.СубконтоДтНУ1;
					СтрокаДанных.СубконтоДтНУ2 = ДанныеУчета.СубконтоДтНУ2;
					СтрокаДанных.СубконтоДтНУ3 = ДанныеУчета.СубконтоДтНУ3;
					СтрокаДанных.СчетКтНУ	   = ДанныеУчета.СчетКтНУ;
					СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1;
					СтрокаДанных.СубконтоКтНУ2 = ДанныеУчета.СубконтоКтНУ2;
					СтрокаДанных.СубконтоКтНУ3 = ДанныеУчета.СубконтоКтНУ3;
				КонецЕсли;
				
				СтрокаДанных.КодДоходаЕСН   = ДанныеУчета.КодДоходаЕСН;
				СтрокаДанных.ОблагаетсяЕНВД = ДанныеУчета.ОблагаетсяЕНВД;
				
				СтрокаДанных.Результат = ?(ПолныйРезультат > 0,Мин(Доля, ПолныйРезультат - СуммарнаяДоля),Макс(Доля,ПолныйРезультат - СуммарнаяДоля));
				Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
					СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
				КонецЕсли;
				СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
				
				Если Не ДанныеУчета.Следующий() Тогда
					ПродолжатьОбработку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// ошибки округления складываются на последнюю запись из группы базовых записей
			СтрокаДанных.Результат = СтрокаДанных.Результат + ПолныйРезультат - СуммарнаяДоля;
			
		
		ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда // отражение в учете не зависит от налогового режима
			
			ТекущийНомерСтроки = ДанныеУчета.НомерСтроки;
			
			СуммаПоСтроке = ДанныеУчета.Результат;
			СуммаПоСтрокеЕНВД = 0;
			
			Если СуммаПоСтроке = 0 Тогда
				Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
					Если Не ДанныеУчета.Следующий() Тогда
						ПродолжатьОбработку = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
			
			СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ;
			СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
			СтрокаДанных.СубконтоДт2 = Неопределено;
			СтрокаДанных.СубконтоДт3 = Неопределено;
			СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
			СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
			СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
			СтрокаДанных.СубконтоКт2 = Неопределено;
			СтрокаДанных.СубконтоКт3 = Неопределено;
			СтрокаДанных.СчетДтНУ	 = Неопределено;
			СтрокаДанных.СчетКтНУ	 = Неопределено;
			СтрокаДанных.СубконтоДтНУ1 = Неопределено;
			СтрокаДанных.СубконтоДтНУ2 = Неопределено;
			СтрокаДанных.СубконтоДтНУ3 = Неопределено;
			СтрокаДанных.СубконтоКтНУ1 = Неопределено;
			СтрокаДанных.СубконтоКтНУ2 = Неопределено;
			СтрокаДанных.СубконтоКтНУ3 = Неопределено;
			СтрокаДанных.ОтражениеВУСН	 = Неопределено;		
			СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
			
			Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
				СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
			КонецЕсли;
			
			Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
				Если Не ДанныеУчета.Следующий() Тогда
					ПродолжатьОбработку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
						
			ТекущийНомерСтроки = ДанныеУчета.НомерСтроки;
			// позиционируемся во вспомогательной выборке по запросу для суммирования "базовых" данных
			СтруктураПоиска.НомерСтроки = ТекущийНомерСтроки;
			Если ДанныеУчетаВспомогательные.НомерСтроки <> ТекущийНомерСтроки Тогда
				// ищем следующую строку во спомогательной выборке если она не является искомой	
				ДанныеУчетаВспомогательные.НайтиСледующий(СтруктураПоиска);
			КонецЕсли;
			
			СуммаПоСтроке = 0;
			СуммаПоСтрокеЕНВД = 0;
			Если НадоЧитатьРасчетнуюБазу и ВыборкаПоШапкеДокумента.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления Тогда
				// суммируем базовые ресурсы по текущей строке набора записей
				Пока ДанныеУчетаВспомогательные.НомерСтроки = ТекущийНомерСтроки Цикл
					Если ДанныеУчетаВспомогательные.РезультатБаза = NULL Тогда
						Успешно = Ложь;
					Иначе
						СуммаПоСтроке = СуммаПоСтроке + ДанныеУчетаВспомогательные.РезультатБаза;
						Если ДанныеУчетаВспомогательные.ЭтоЕНВД Тогда
							СуммаПоСтрокеЕНВД = СуммаПоСтрокеЕНВД + ДанныеУчетаВспомогательные.РезультатБаза;
						КонецЕсли;						
					КонецЕсли;
					Если Не ДанныеУчетаВспомогательные.Следующий() Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли НадоЧитатьРасчетнуюБазу и ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
				// суммируем базовые ресурсы по текущей строке набора записей
				// сюда попали когда для БЛ доля ЕНВД определяется по текущему месяцу, а доля за счет работодателя распределяется по базовым начислениям
				Пока ДанныеУчетаВспомогательные.НомерСтроки = ТекущийНомерСтроки Цикл
					Если ДанныеУчетаВспомогательные.РезультатБаза = NULL Тогда
						Успешно = Ложь;
					Иначе 
						СуммаПоСтроке = СуммаПоСтроке + ДанныеУчетаВспомогательные.РезультатБаза;
					КонецЕсли;
					Если Не ДанныеУчетаВспомогательные.Следующий() Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				СуммаПоСтрокеЕНВД = СуммаПоСтроке * ВыборкаПоШапкеДокумента.ПроцентЕНВД / 100;
			ИначеЕсли ВыборкаПоШапкеДокумента.ПроцентЕНВД = 100 Тогда
				СуммаПоСтроке = ДанныеУчета.Результат;
				СуммаПоСтрокеЕНВД = ДанныеУчета.Результат;
			ИначеЕсли ВыборкаПоШапкеДокумента.ПроцентЕНВД = 0 Тогда
				СуммаПоСтроке = ДанныеУчета.Результат;
			Иначе
				СуммаПоСтроке = ДанныеУчета.Результат;
				СуммаПоСтрокеЕНВД = ДанныеУчета.Результат * ВыборкаПоШапкеДокумента.ПроцентЕНВД / 100;
			КонецЕсли;
			
			Если Не Успешно Тогда
				// не удалось собрать данные отражения в учете, необходимо разобраться зачем мы собирали расчетную базу
				// и сообщить пользователю о проблемах
				
				// ДоляЕНВДПоБазе - необходимо было собирать долю ЕНВД по базовым начислениям
				ДоляЕНВДПоБазе =  мЕНВД и ВыборкаПоШапкеДокумента.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления;
				
				// ДоляРаботодателяПоБазе - необходимо было собирать долю пособия за счет работодателя по базе
				// данные по базе нужны для 2-х календарных дней и для доли за счет работодателя при УСН доходы минус расходы
				ДоляРаботодателяПоБазе = Не УказаноОтражениеВУчетеДляРаботодателя 
					и ((НЕ мУСН и (ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание
					ИЛИ ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаВБыту)
					и ДанныеУчета.ДоляБЛЗаСчетРаботодателя <>0)
					или (ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам
					и мУСН и НЕ мФСС_БЛ и мОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы));
				
				Если Не ДоляЕНВДПоБазе и Не ДоляРаботодателяПоБазе Тогда
						
					// данные собранные по базе не нужны, можно использовать результат запроса по шапке документа
					Успешно = Истина;
					Если ВыборкаПоШапкеДокумента.ПроцентЕНВД = 100 Тогда
						СуммаПоСтроке = ДанныеУчета.Результат;
						СуммаПоСтрокеЕНВД = ДанныеУчета.Результат;
					ИначеЕсли ВыборкаПоШапкеДокумента.ПроцентЕНВД = 0 Тогда
						СуммаПоСтроке = ДанныеУчета.Результат;
					Иначе
						СуммаПоСтроке = ДанныеУчета.Результат;
						СуммаПоСтрокеЕНВД = ДанныеУчета.Результат * ВыборкаПоШапкеДокумента.ПроцентЕНВД / 100;
					КонецЕсли;
					
				Иначе
					
					Если Не ДоляЕНВДПоБазе Тогда
						// данные по базе нужны только для распределения по счетам затрат доли пособия за счет работодателя
						// соберм суммы и продолжим работу, при этом счет затрат для пособия за счет работодателя будет пустой
						Если ВыборкаПоШапкеДокумента.ПроцентЕНВД = 100 Тогда
							СуммаПоСтроке = ДанныеУчета.Результат;
							СуммаПоСтрокеЕНВД = ДанныеУчета.Результат;
						ИначеЕсли ВыборкаПоШапкеДокумента.ПроцентЕНВД = 0 Тогда
							СуммаПоСтроке = ДанныеУчета.Результат;
						Иначе
							СуммаПоСтроке = ДанныеУчета.Результат;
							СуммаПоСтрокеЕНВД = ДанныеУчета.Результат * ВыборкаПоШапкеДокумента.ПроцентЕНВД / 100;
						КонецЕсли;
					КонецЕсли;
					
					#Если ТолстыйКлиентОбычноеПриложение Тогда
												
						Если ПустаяСтрока(КомментарийОшибкаСбораРасчетнойБазы) Тогда 
							
							//Добавим родительскую сторку
							ТекстСообщения = "Внимание! Нет данных для отражения пособия в учете.
							|Отсутствуют данные по отражению зарплаты в регламентированном учете за расчетный период.";
							КомментарийОшибкаСбораРасчетнойБазы = ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.Ошибка);
							
							Если Не ПособиеОтражаетсяВРеглУчетеТекущимДокументом и (ДоляЕНВДПоБазе или ДоляРаботодателяПоБазе) Тогда
								ТекстСообщения = "Рекомендуется зарегистрировать отражение пособия в учете текущим документом.
								|На закладке ""Отражение пособия в учете"" установите ""Отражать в учете по данным текущего документа""
								|и заполните таблицу ""Проводки и данные для ЕСН""";	
								ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.ВажнаяИнформация,,КомментарийОшибкаСбораРасчетнойБазы);
							КонецЕсли;
							
							Если ДоляЕНВДПоБазе Тогда
								ТекстСообщения = "Нет данных для определения доли ЕНВД пособия. Стратегия определения доли ЕНВД - ""по базовым начислениям "" задана в ";
								Если Не ПособиеОтражаетсяВРеглУчетеТекущимДокументом Тогда
									ТекстСообщения = ТекстСообщения + "начислении: " + ДанныеУчета.ВидРасчетаНаименование;	
								Иначе
									ТекстСообщения = ТекстСообщения + "документе";
								КонецЕсли;	
								ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.ВажнаяИнформация,,КомментарийОшибкаСбораРасчетнойБазы);
							КонецЕсли;	
							
							Если ДоляРаботодателяПоБазе Тогда
								ТекстСообщения = "Нет данных для распределения доли пособия за счет работодателя по счетам затрат.";
								ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.ВажнаяИнформация,,КомментарийОшибкаСбораРасчетнойБазы);
							КонецЕсли;
							
						КонецЕсли;
						
					#КонецЕсли
					
				КонецЕсли;
				
			КонецЕсли;	
			
			Если СуммаПоСтроке = 0 Тогда
				Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
					Если Не ДанныеУчета.Следующий() Тогда
						ПродолжатьОбработку = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
			Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
				СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
			КонецЕсли;
			
			// доля пособия за счет работодателя за первые два календарных дня может быть
			// при этом ДоляБЛЗаСчетРаботодателя может быть равна нулю по причине отсутствия ФПД
			ЕстьДоляБЛЗаСчетРаботодателя = ТретийКалендарныйДень > ДанныеУчета.ПериодДействияНачало;
			
			Если мУСН и НЕ мФСС_БЛ Тогда  // налоговые режимы: УСН и УСН+ЕНВД, без уплаты добровольных взносов
				
				Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
					
					Если Не мЕНВД Или СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_УСН;
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;		
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						Если мЕНВД И СуммаПоСтрокеЕНВД <> 0 Тогда
							СтрокаДанных.Результат = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если мЕНВД И СуммаПоСтрокеЕНВД <> 0 Тогда
						Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
							СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
						КонецЕсли;
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;		
						СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						СтрокаДанных.ОблагаетсяЕНВД = Истина;
					КонецЕсли;
					
					Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
						Если Не ДанныеУчета.Следующий() Тогда
							ПродолжатьОбработку = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе // не травма на производстве и не отпуск по беременности и родам
					
					ВПределахММОТ = ?(ДанныеУчета.Сторно,Макс(ДанныеУчета.Результат,ДанныеУчета.ВПределахММОТ),Мин(ДанныеУчета.Результат,ДанныеУчета.ВПределахММОТ));
					СтрокаДанных.Результат	 = ВПределахММОТ;
					Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
						СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
					КонецЕсли;
					
					Если Не мЕНВД Или СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
						// доля УСН
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_УСН; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;		
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						Если мЕНВД И СуммаПоСтрокеЕНВД <> 0 Тогда
							СтрокаДанных.Результат	 = ВПределахММОТ - Окр(ВПределахММОТ * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если мЕНВД И СуммаПоСтрокеЕНВД <> 0 Тогда
						Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
							СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
						КонецЕсли;
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
						СтрокаДанных.Результат	 = Окр(ВПределахММОТ * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						СтрокаДанных.ОблагаетсяЕНВД = Истина;
					КонецЕсли;
					
					// полный результат
					ПолныйРезультат = ДанныеУчета.Результат - ВПределахММОТ;
					
					Если мЕНВД И СуммаПоСтрокеЕНВД <> 0 и ПолныйРезультат <> 0 Тогда
						СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНВД; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;		
						СтрокаДанных.Результат	 = Окр(ПолныйРезультат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
						СтрокаДанных.ОблагаетсяЕНВД = Истина;
						ПолныйРезультат = ПолныйРезультат - Окр(ПолныйРезультат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
					КонецЕсли;
					
					Если мОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
						Если ПолныйРезультат <> 0 Тогда
							СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНприУСН;
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;		
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
							СтрокаДанных.Результат	 = ПолныйРезультат;
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
						КонецЕсли;
						
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе 
						Если ПолныйРезультат <> 0 Тогда 
							СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
							Если УказаноОтражениеВУчетеДляРаботодателя Тогда
								ЗаполнитьЗначенияСвойств(СтрокаДанных,ВыборкаПоШапкеДокумента,
									"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СпособРаспределенияЗатрат,ОтражениеВУСН"
									+ ?(ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ,",СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКтНУ,СубконтоКтНУ1",""));
								СтрокаДанных.Результат	 = ПолныйРезультат;
								Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
									СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
								КонецЕсли;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
								Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
									Если Не ДанныеУчета.Следующий() Тогда
										ПродолжатьОбработку = Ложь;
										Прервать;
									КонецЕсли;
								КонецЦикла;
							Иначе // обходим строки и вычисляем долю результата по базовым записям
								// суммарная доля, которую уже "разбросали" на строки с одинаковым регистратором и номером строки
								СуммарнаяДоля = 0;
								ПерваяИзГруппыСтрок = Истина;
								Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
									Если Не ДанныеУчета.ЭтоЕНВД Тогда
										// если это не первая из группы "базовых" строк по одной строке основного регистра
										// то создаем очередную строку движений
										Если Не ПерваяИзГруппыСтрок Тогда
											СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
											Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
												СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
											КонецЕсли;
										Иначе
											ПерваяИзГруппыСтрок = Ложь;
										КонецЕсли;
										
										Если СуммаПоСтроке = 0 Тогда
											Доля = 0;
										Иначе
											Если ДанныеУчета.РезультатБаза = NULL Тогда
												Успешно = Ложь;
												Доля = 0;
											Иначе
												Доля = ПолныйРезультат * ДанныеУчета.РезультатБаза / (СуммаПоСтроке - СуммаПоСтрокеЕНВД);
											КонецЕсли;
										КонецЕсли;
										
										Если ДанныеУчета.СчетДтРазрез = NULL Тогда
											Успешно = Ложь;
										Иначе
											СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДтРазрез;
											СтрокаДанных.СубконтоДт1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт1Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СубконтоДт2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт2Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СубконтоДт3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт3Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СпособРаспределенияЗатрат = ДанныеУчета.СпособРаспределенияЗатратРазрез;
											Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
												СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУРазрез;
												СтрокаДанных.СубконтоДтНУ1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ1Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДтНУ2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ2Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДтНУ3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ3Разрез, ПараметрыПолученияСубконто);
											КонецЕсли;
										КонецЕсли;
										
										Если ДанныеУчета.СчетКтРазрез = NULL Тогда
											Успешно = Ложь;
										Иначе
											СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКтРазрез;
											СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1Разрез;
											СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2Разрез;
											СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3Разрез;
											Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
												СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУРазрез;
												СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1Разрез;
												СтрокаДанных.СубконтоКтНУ2 = Неопределено;
												СтрокаДанных.СубконтоКтНУ3 = Неопределено;
											КонецЕсли;	
											СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.Принимаются;		
										КонецЕсли;
										СтрокаДанных.Результат = ?(ПолныйРезультат > 0,Мин(Доля,ПолныйРезультат - СуммарнаяДоля),Макс(Доля,ПолныйРезультат - СуммарнаяДоля));
										Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
											СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
										КонецЕсли;
										СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
										СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
									КонецЕсли;
									Если Не ДанныеУчета.Следующий() Тогда
										ПродолжатьОбработку = Ложь;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								// ошибки округления складываются на последнюю запись из группы базовых записей
								СтрокаДанных.Результат = СтрокаДанных.Результат + ПолныйРезультат - СуммарнаяДоля;
							КонецЕсли;
						Иначе	
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли мЕНВД и СуммаПоСтрокеЕНВД <> 0 и НЕ мФСС_БЛ Тогда // налоговые режимы: ОСН+ЕНВД, без уплаты добровольных взносов
				
				Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
					Если СуммаПоСтрокеЕНВД <> СуммаПоСтроке  Тогда
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
					КонецЕсли;
					СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
					СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
					Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
						СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
					КонецЕсли;
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
					СтрокаДанных.ОблагаетсяЕНВД = Истина;
					Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
						Если Не ДанныеУчета.Следующий() Тогда
							ПродолжатьОбработку = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли  ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание
					И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаВБыту Тогда
					Если СуммаПоСтрокеЕНВД <> СуммаПоСтроке  Тогда
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
					КонецЕсли;		
					СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
					СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					ВПределахММОТ	 = ?(ДанныеУчета.Сторно,Макс(Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2),ДанныеУчета.ВПределахММОТ),Мин(Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2),ДанныеУчета.ВПределахММОТ));
					СтрокаДанных.Результат	 = ВПределахММОТ;
					Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
						СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
					КонецЕсли;
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
					СтрокаДанных.ОблагаетсяЕНВД = Истина;
					Если Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2) - ВПределахММОТ <> 0 Тогда
						СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНВД; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.Результат = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2) - ВПределахММОТ;
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
						СтрокаДанных.ОблагаетсяЕНВД = Истина;
					КонецЕсли;
					
					Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
						Если Не ДанныеУчета.Следующий() Тогда
							ПродолжатьОбработку = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе // ОбщееЗаболевание или ТравмаВБыту
					
					ДоляПособияЕНВД = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
					
					// это доля возмещаемая ФСС в части ЕНВД в пределах ММОТ
					ВПределахММОТ = ?(ДанныеУчета.Сторно,Макс(ДоляПособияЕНВД, ДанныеУчета.ВПределахММОТ),Мин(ДоляПособияЕНВД, ДанныеУчета.ВПределахММОТ));
					
					СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
					СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					СтрокаДанных.Результат	 = ВПределахММОТ;
					Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
						СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
					КонецЕсли;
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
					СтрокаДанных.ОблагаетсяЕНВД = Истина;
					
					// зарегистрируем долю за счет работодателя в части ЕНВД
					СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
					СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНВД; 
					СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					СтрокаДанных.Результат = ДоляПособияЕНВД - ВПределахММОТ;
					Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
						СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
					КонецЕсли;
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
					СтрокаДанных.ОблагаетсяЕНВД = Истина;
					
					
					// за счет работодателя в части ОСН, первые два календарных дня
					РезультатЗаСчетРаботодателя = Окр((ДанныеУчета.Результат - ДоляПособияЕНВД) * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
					//за счет ФСС
					ЗаСчетФССРезультат = ДанныеУчета.Результат - ДоляПособияЕНВД - РезультатЗаСчетРаботодателя;
					
					Если ЗаСчетФССРезультат <> 0 Тогда
						//доля за счет ФСС
						СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						СтрокаДанных.Результат	 = ЗаСчетФССРезультат;
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						
						Если ЕстьДоляБЛЗаСчетРаботодателя Тогда
							СтрокаДанных.ПериодДействияНачало = Мин(СтрокаДанных.ПериодДействияКонец, ТретийКалендарныйДень);
						КонецЕсли;
						
					КонецЕсли;
					
					Если РезультатЗаСчетРаботодателя <> 0 Тогда 
						
						СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
						СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
						Если УказаноОтражениеВУчетеДляРаботодателя Тогда
							ЗаполнитьЗначенияСвойств(СтрокаДанных,ВыборкаПоШапкеДокумента,
									"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,ОтражениеВУСН"
									+ ?(ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ,",СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКтНУ,СубконтоКтНУ1",""));
							СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе // обходим строки и вычисляем долю результата по базовым записям
							// суммарная доля, которую уже "разбросали" на строки с одинаковым регистратором и номером строки
							СуммарнаяДоля = 0;
							ПерваяИзГруппыСтрок = Истина;
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.ЭтоЕНВД Тогда
									// если это не первая из группы "базовых" строк по одной строке основного регистра
									// то создаем очередную строку движений
									Если Не ПерваяИзГруппыСтрок Тогда
										СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
										Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
											СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
										КонецЕсли;
										СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
									Иначе
										ПерваяИзГруппыСтрок = Ложь;
									КонецЕсли;
									
									Если СуммаПоСтроке = 0 Тогда
										Доля = 0;
									Иначе
										Если ДанныеУчета.РезультатБаза = NULL Тогда
											Успешно = Ложь;
											Доля = 0;
										Иначе
											Доля = РезультатЗаСчетРаботодателя * ДанныеУчета.РезультатБаза / (СуммаПоСтроке -  СуммаПоСтрокеЕНВД);
										КонецЕсли;
									КонецЕсли;
									
									Если ДанныеУчета.СчетДтРазрез = NULL Тогда
										Успешно = Ложь;
									Иначе
										СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДтРазрез;
										СтрокаДанных.СубконтоДт1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт1Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СубконтоДт2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт2Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СубконтоДт3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт3Разрез, ПараметрыПолученияСубконто);
										Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
											СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУРазрез;
											СтрокаДанных.СубконтоДтНУ1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ1Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СубконтоДтНУ2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ2Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СубконтоДтНУ3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ3Разрез, ПараметрыПолученияСубконто);
										КонецЕсли;
									КонецЕсли;
									Если ДанныеУчета.СчетКтРазрез = NULL Тогда
										Успешно = Ложь;
									Иначе
										СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКтРазрез;
										СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1Разрез;
										СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2Разрез;
										СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3Разрез;
										Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
											СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУРазрез;
											СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1Разрез;
											СтрокаДанных.СубконтоКтНУ2 = Неопределено;
											СтрокаДанных.СубконтоКтНУ3 = Неопределено;
										КонецЕсли;
									КонецЕсли;
									СтрокаДанных.Результат = ?(РезультатЗаСчетРаботодателя > 0,Мин(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля),Макс(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля));
									Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
										СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
									КонецЕсли;
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
									СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
								КонецЕсли;
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							// ошибки округления складываются на последнюю запись из группы базовых записей
							СтрокаДанных.Результат = СтрокаДанных.Результат + РезультатЗаСчетРаботодателя - СуммарнаяДоля;
						КонецЕсли;
					Иначе
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли мФСС_БЛ Тогда // налоговые режимы: УСН, ОСН+ЕНВД и УСН+ЕНВД, с уплатой добровольных взносов
				
				Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
					
					Если мЕНВД и НЕ мУСН Тогда // налоговые режимы: ОСН+ЕНВД, с уплатой добровольных взносов
						
						Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						КонецЕсли;	
						
						Если СуммаПоСтрокеЕНВД <> 0 Тогда
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
								СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							КонецЕсли;
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							СтрокаДанных.ОблагаетсяЕНВД = Истина;
						КонецЕсли;
						
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли мУСН Тогда  // налоговые режимы: УСН и УСН+ЕНВД, с уплатой добровольных взносов
						
						Если Не мЕНВД Или СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_УСН;
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							Если мЕНВД Тогда
								СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
								Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
									СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если мЕНВД И СуммаПоСтрокеЕНВД <> 0 Тогда
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
								СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
									СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
								КонецЕсли;
							КонецЕсли;
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
							СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							СтрокаДанных.ОблагаетсяЕНВД = Истина;
						КонецЕсли;							
						
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
				ИначеЕсли  ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание
					И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаВБыту Тогда
					
					Если мЕНВД и НЕ мУСН Тогда // налоговые режимы: ОСН+ЕНВД, с уплатой добровольных взносов
						
						Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						КонецЕсли;
						
						Если СуммаПоСтрокеЕНВД <> 0 Тогда
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
								СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
									СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
								КонецЕсли;
							КонецЕсли;
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							СтрокаДанных.ОблагаетсяЕНВД = Истина;
						КонецЕсли;
						
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли мУСН Тогда // налоговые режимы: УСН и УСН+ЕНВД, с уплатой добровольных взносов
						
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
					
						Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД и мЕНВД Тогда
							СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
							СтрокаДанных.КодДоходаЕСН  = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							СтрокаДанных.ОблагаетсяЕНВД = Истина;
							СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
						КонецЕсли;
						
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;							
						
					КонецЕсли;	
					
				Иначе // заболевание работника, налоговые режимы: УСН, ОСН+ЕНВД и УСН+ЕНВД, с уплатой добровольных взносов
					
					Если мЕНВД и НЕ мУСН Тогда // налоговые режимы: ОСН+ЕНВД, с уплатой добровольных взносов
						
						Если ДанныеУчета.ДатаНачалаСобытия < мДатаЗакона180ФЗ Тогда
							
							ДоляПособияЕНВД = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							
							// за счет работодателя в части ОСН
							РезультатЗаСчетРаботодателя = Окр((ДанныеУчета.Результат - ДоляПособияЕНВД) * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
							
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
								// за счет ФСС в части ОСН
								СтрокаДанных.Результат	 = ДанныеУчета.Результат - ДоляПособияЕНВД - РезультатЗаСчетРаботодателя;
								Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
									СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
								КонецЕсли;
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
								
								Если ЕстьДоляБЛЗаСчетРаботодателя Тогда
									СтрокаДанных.ПериодДействияНачало = Мин(СтрокаДанных.ПериодДействияКонец, ТретийКалендарныйДень);	
								КонецЕсли;	
								
							КонецЕсли;
							
							Если СуммаПоСтрокеЕНВД <> 0 Тогда
								
								// за счет добровольных взносов
								Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
									СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
									Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
										СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
									КонецЕсли;
								КонецЕсли;
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.Результат	 = ДоляПособияЕНВД - Окр(ДоляПособияЕНВД * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
								Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
									СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
								КонецЕсли;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
								СтрокаДанных.ОблагаетсяЕНВД = Истина;
								
								Если ДанныеУчета.ДоляБЛЗаСчетРаботодателя <> 0 Тогда
									СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
									СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНВД; 
									СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
									СтрокаДанных.СубконтоДт2 = Неопределено;
									СтрокаДанных.СубконтоДт3 = Неопределено;
									СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
									СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
									СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
									СтрокаДанных.СубконтоКт2 = Неопределено;
									СтрокаДанных.СубконтоКт3 = Неопределено;
									СтрокаДанных.СчетДтНУ	 = Неопределено;
									СтрокаДанных.СчетКтНУ	 = Неопределено;
									СтрокаДанных.СубконтоДтНУ1 = Неопределено;
									СтрокаДанных.СубконтоДтНУ2 = Неопределено;
									СтрокаДанных.СубконтоДтНУ3 = Неопределено;
									СтрокаДанных.СубконтоКтНУ1 = Неопределено;
									СтрокаДанных.СубконтоКтНУ2 = Неопределено;
									СтрокаДанных.СубконтоКтНУ3 = Неопределено;
									СтрокаДанных.Результат	 = Окр(ДоляПособияЕНВД * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
									Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
										СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
									КонецЕсли;
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
									СтрокаДанных.ОблагаетсяЕНВД = Истина;
								КонецЕсли;
							КонецЕсли;							
							
							Если РезультатЗаСчетРаботодателя <> 0 Тогда 
								
								СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
									СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
								КонецЕсли;
								СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
								Если УказаноОтражениеВУчетеДляРаботодателя Тогда
									ЗаполнитьЗначенияСвойств(СтрокаДанных,ВыборкаПоШапкеДокумента,
									"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СпособРаспределенияЗатрат,ОтражениеВУСН"
									+ ?(ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ,",СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКтНУ,СубконтоКтНУ1",""));
									СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
									Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
										СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
									КонецЕсли;
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
								Иначе  // обходим строки и вычисляем долю результата по базовым записям
									// суммарная доля, которую уже "разбросали" на строки с одинаковым регистратором и номером строки
									СуммарнаяДоля = 0;
									ПерваяИзГруппыСтрок = Истина;
									Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
										Если Не ДанныеУчета.ЭтоЕНВД Тогда
											// если это не первая из группы "базовых" строк по одной строке основного регистра
											// то создаем очередную строку движений
											Если Не ПерваяИзГруппыСтрок Тогда
												СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
												Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
													СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
												КонецЕсли;
												СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
											Иначе
												ПерваяИзГруппыСтрок = Ложь;
											КонецЕсли;
											
											Если СуммаПоСтроке = 0 Тогда
												Доля = 0;
											Иначе
												Если ДанныеУчета.РезультатБаза = NULL Тогда
													Успешно = Ложь;
													Доля = 0;
												Иначе
													Доля = РезультатЗаСчетРаботодателя * ДанныеУчета.РезультатБаза / (СуммаПоСтроке - СуммаПоСтрокеЕНВД);
												КонецЕсли;
											КонецЕсли;
											
											Если ДанныеУчета.СчетДтРазрез = NULL Тогда
												Успешно = Ложь;
											Иначе
												СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДтРазрез;
												СтрокаДанных.СубконтоДт1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт1Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДт2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт2Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДт3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт3Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СпособРаспределенияЗатрат = ДанныеУчета.СпособРаспределенияЗатратРазрез;
												Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
													СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУРазрез;
													СтрокаДанных.СубконтоДтНУ1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ1Разрез, ПараметрыПолученияСубконто);
													СтрокаДанных.СубконтоДтНУ2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ2Разрез, ПараметрыПолученияСубконто);
													СтрокаДанных.СубконтоДтНУ3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ3Разрез, ПараметрыПолученияСубконто);
												КонецЕсли;
											КонецЕсли;
											Если ДанныеУчета.СчетКтРазрез = NULL Тогда
												Успешно = Ложь;
											Иначе
												СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКтРазрез;
												СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1Разрез;
												СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2Разрез;
												СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3Разрез;
												Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
													СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУРазрез;
													СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1Разрез;
													СтрокаДанных.СубконтоКтНУ2 = Неопределено;
													СтрокаДанных.СубконтоКтНУ3 = Неопределено;
												КонецЕсли;
											КонецЕсли;
											
											СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
											СтрокаДанных.Результат = ?(РезультатЗаСчетРаботодателя > 0,Мин(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля),Макс(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля));
											Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
												СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
											КонецЕсли;
											СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
										КонецЕсли;
										Если Не ДанныеУчета.Следующий() Тогда
											ПродолжатьОбработку = Ложь;
											Прервать;
										КонецЕсли;
									КонецЦикла;
									// ошибки округления складываются на последнюю запись из группы базовых записей
									СтрокаДанных.Результат = СтрокаДанных.Результат + РезультатЗаСчетРаботодателя - СуммарнаяДоля;
								КонецЕсли;	
								
							КонецЕсли;	
							
							Пока ПродолжатьОбработку И ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;							
							
						Иначе // ДанныеУчета.ДатаНачалаСобытия > мДатаЗакона180ФЗ, налоговые режимы: ОСН+ЕНВД, с уплатой добровольных взносов
							
							ДоляПособияЕНВД = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							
							// за счет работодателя
							РезультатЗаСчетРаботодателя = Окр((ДанныеУчета.Результат - ДоляПособияЕНВД) * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
							
							//за счет ФСС
							ЗаСчетФССРезультат = 0;
							
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
								
								ЗаСчетФССРезультат = ДанныеУчета.Результат - ДоляПособияЕНВД - РезультатЗаСчетРаботодателя;
								
								Если ЗаСчетФССРезультат <> 0 Тогда
									СтрокаДанных.Результат	 = ЗаСчетФССРезультат;
									Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
										СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
									КонецЕсли;
									СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
									СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
									СтрокаДанных.СубконтоДт2 = Неопределено;
									СтрокаДанных.СубконтоДт3 = Неопределено;
									СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
									СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
									СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
									СтрокаДанных.СубконтоКт2 = Неопределено;
									СтрокаДанных.СубконтоКт3 = Неопределено;
									СтрокаДанных.СчетДтНУ	 = Неопределено;
									СтрокаДанных.СчетКтНУ	 = Неопределено;
									СтрокаДанных.СубконтоДтНУ1 = Неопределено;
									СтрокаДанных.СубконтоДтНУ2 = Неопределено;
									СтрокаДанных.СубконтоДтНУ3 = Неопределено;
									СтрокаДанных.СубконтоКтНУ1 = Неопределено;
									СтрокаДанных.СубконтоКтНУ2 = Неопределено;
									СтрокаДанных.СубконтоКтНУ3 = Неопределено;
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
									Если ЕстьДоляБЛЗаСчетРаботодателя Тогда
										СтрокаДанных.ПериодДействияНачало = Мин(СтрокаДанных.ПериодДействияКонец, ТретийКалендарныйДень);	
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
							
							Если СуммаПоСтрокеЕНВД <> 0 Тогда
								Если ЗаСчетФССРезультат <> 0 Тогда
									СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
									Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
										СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
									КонецЕсли;
								КонецЕсли;
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.Результат	 = ДоляПособияЕНВД;
								Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
									СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
								КонецЕсли;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
								СтрокаДанных.ОблагаетсяЕНВД = Истина;
							КонецЕсли;							
							
							Если РезультатЗаСчетРаботодателя <> 0 Тогда 
								Если ЗаСчетФССРезультат <> 0 ИЛИ СуммаПоСтрокеЕНВД <> 0 Тогда
									//добавим новую строку движений, т.к. есть доля за счет ФСС
									СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								КонецЕсли;
								СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
								Если УказаноОтражениеВУчетеДляРаботодателя Тогда
									ЗаполнитьЗначенияСвойств(СтрокаДанных,ВыборкаПоШапкеДокумента,
									"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СпособРаспределенияЗатрат,ОтражениеВУСН"
									+ ?(ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ,",СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКтНУ,СубконтоКтНУ1",""));
									СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
									Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
										СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
									КонецЕсли;
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
								Иначе // обходим строки и вычисляем долю результата по базовым записям
									// суммарная доля, которую уже "разбросали" на строки с одинаковым регистратором и номером строки
									СуммарнаяДоля = 0;
									ПерваяИзГруппыСтрок = Истина;
									Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
										Если Не ДанныеУчета.ЭтоЕНВД Тогда
											// если это не первая из группы "базовых" строк по одной строке основного регистра
											// то создаем очередную строку движений
											Если Не ПерваяИзГруппыСтрок Тогда
												СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
												Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
													СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
												КонецЕсли;
												СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
											Иначе
												ПерваяИзГруппыСтрок = Ложь;
											КонецЕсли;
											
											Если СуммаПоСтроке = 0 Тогда
												Доля = 0;
											Иначе
												Если ДанныеУчета.РезультатБаза = NULL Тогда
													Успешно = Ложь;
													Доля = 0;
												Иначе
													Доля = РезультатЗаСчетРаботодателя * ДанныеУчета.РезультатБаза / (СуммаПоСтроке - СуммаПоСтрокеЕНВД);
												КонецЕсли;
											КонецЕсли;
											
											Если ДанныеУчета.СчетДтРазрез = NULL Тогда
												Успешно = Ложь;
											Иначе
												СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДтРазрез;
												СтрокаДанных.СубконтоДт1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт1Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДт2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт2Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДт3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт3Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СпособРаспределенияЗатрат = ДанныеУчета.СпособРаспределенияЗатратРазрез;
												Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
													СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУРазрез;
													СтрокаДанных.СубконтоДтНУ1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ1Разрез, ПараметрыПолученияСубконто);
													СтрокаДанных.СубконтоДтНУ2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ2Разрез, ПараметрыПолученияСубконто);
													СтрокаДанных.СубконтоДтНУ3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ3Разрез, ПараметрыПолученияСубконто);
												КонецЕсли;
											КонецЕсли;
											Если ДанныеУчета.СчетКтРазрез = NULL Тогда
												Успешно = Ложь;
											Иначе
												СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКтРазрез;
												СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1Разрез;
												СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2Разрез;
												СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3Разрез;
												Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
													СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУРазрез;
													СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1Разрез;
													СтрокаДанных.СубконтоКтНУ2 = Неопределено;
													СтрокаДанных.СубконтоКтНУ3 = Неопределено;
												КонецЕсли;
											КонецЕсли;
											
											СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
											СтрокаДанных.Результат = ?(РезультатЗаСчетРаботодателя > 0,Мин(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля),Макс(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля));
											Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
												СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
											КонецЕсли;
											СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
										КонецЕсли;
										Если Не ДанныеУчета.Следующий() Тогда
											ПродолжатьОбработку = Ложь;
											Прервать;
										КонецЕсли;
									КонецЦикла;
									// ошибки округления складываются на последнюю запись из группы базовых записей
									СтрокаДанных.Результат = СтрокаДанных.Результат + РезультатЗаСчетРаботодателя - СуммарнаяДоля;
								КонецЕсли;	
							КонецЕсли;	
							
							Пока ПродолжатьОбработку И ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
						
					ИначеЕсли мУСН Тогда // налоговые режимы: УСН и УСН+ЕНВД, с уплатой добровольных взносов
						
						Если ДанныеУчета.ДатаНачалаСобытия < мДатаЗакона180ФЗ Тогда
							
							ДоляПособияЕНВД = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							
							// за счет работодателя
							РезультатЗаСчетРаботодателя = Окр((ДанныеУчета.Результат - ДоляПособияЕНВД) * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
							
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
								СтрокаДанных.Результат	 = ДанныеУчета.Результат - ДоляПособияЕНВД - РезультатЗаСчетРаботодателя;
								Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
									СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
								КонецЕсли;
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы;
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							КонецЕсли;
							
							Если СуммаПоСтрокеЕНВД <> 0 Тогда
								Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД Тогда
									СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								КонецЕсли;
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
								СтрокаДанных.Результат	 = ДоляПособияЕНВД - Окр(ДоляПособияЕНВД * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);							
								Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
									СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
								КонецЕсли;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
								СтрокаДанных.ОблагаетсяЕНВД = Истина;
								
								СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНВД; 
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.Результат	 = Окр(ДоляПособияЕНВД * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
								Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
									СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
								КонецЕсли;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
								СтрокаДанных.ОблагаетсяЕНВД = Истина;
							КонецЕсли;
							
							Если РезультатЗаСчетРаботодателя <> 0 Тогда
								
								Если мОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
									
									СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
									СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
									Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
										СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
									КонецЕсли;
									СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНприУСН;
									СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
									СтрокаДанных.СубконтоДт2 = Неопределено;
									СтрокаДанных.СубконтоДт3 = Неопределено;
									СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
									СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
									СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
									СтрокаДанных.СубконтоКт2 = Неопределено;
									СтрокаДанных.СубконтоКт3 = Неопределено;
									СтрокаДанных.СчетДтНУ	 = Неопределено;
									СтрокаДанных.СчетКтНУ	 = Неопределено;
									СтрокаДанных.СубконтоДтНУ1 = Неопределено;
									СтрокаДанных.СубконтоДтНУ2 = Неопределено;
									СтрокаДанных.СубконтоДтНУ3 = Неопределено;
									СтрокаДанных.СубконтоКтНУ1 = Неопределено;
									СтрокаДанных.СубконтоКтНУ2 = Неопределено;
									СтрокаДанных.СубконтоКтНУ3 = Неопределено;
									СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
									
								Иначе
									
									СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
									Если УказаноОтражениеВУчетеДляРаботодателя Тогда
										ЗаполнитьЗначенияСвойств(СтрокаДанных,ВыборкаПоШапкеДокумента,
										"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СпособРаспределенияЗатрат,ОтражениеВУСН"
										+ ?(ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ,",СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКтНУ,СубконтоКтНУ1",""));
										СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
										Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
											СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
										КонецЕсли;
										СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
									Иначе // обходим строки и вычисляем долю результата по базовым записям
										// суммарная доля, которую уже "разбросали" на строки с одинаковым регистратором и номером строки
										СуммарнаяДоля = 0;
										ПерваяИзГруппыСтрок = Истина;
										Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
											Если Не ДанныеУчета.ЭтоЕНВД Тогда
												// если это не первая из группы "базовых" строк по одной строке основного регистра
												// то создаем очередную строку движений
												Если Не ПерваяИзГруппыСтрок Тогда
													СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
													Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
														СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
													КонецЕсли;
												Иначе
													ПерваяИзГруппыСтрок = Ложь;
												КонецЕсли;
												
												Если СуммаПоСтроке = 0 Тогда
													Доля = 0;
												Иначе
													Если ДанныеУчета.РезультатБаза = NULL Тогда
														Успешно = Ложь;
														Доля = 0;
													Иначе
														Доля = РезультатЗаСчетРаботодателя * ДанныеУчета.РезультатБаза / (СуммаПоСтроке - СуммаПоСтрокеЕНВД);
													КонецЕсли;
												КонецЕсли;
												
												Если ДанныеУчета.СчетДтРазрез = NULL Тогда
													Успешно = Ложь;
												Иначе
													СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДтРазрез;
													СтрокаДанных.СубконтоДт1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт1Разрез, ПараметрыПолученияСубконто);
													СтрокаДанных.СубконтоДт2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт2Разрез, ПараметрыПолученияСубконто);
													СтрокаДанных.СубконтоДт3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт3Разрез, ПараметрыПолученияСубконто);
													СтрокаДанных.СпособРаспределенияЗатрат = ДанныеУчета.СпособРаспределенияЗатратРазрез;
													Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
														СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУРазрез;
														СтрокаДанных.СубконтоДтНУ1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ1Разрез, ПараметрыПолученияСубконто);
														СтрокаДанных.СубконтоДтНУ2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ2Разрез, ПараметрыПолученияСубконто);
														СтрокаДанных.СубконтоДтНУ3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ3Разрез, ПараметрыПолученияСубконто);
													КонецЕсли;
													СтрокаДанных.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
												КонецЕсли;
												Если ДанныеУчета.СчетКтРазрез = NULL Тогда
													Успешно = Ложь;
												Иначе
													СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКтРазрез;
													СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1Разрез;
													СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2Разрез;
													СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3Разрез;
													Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
														СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУРазрез;
														СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1Разрез;
														СтрокаДанных.СубконтоКтНУ2 = Неопределено;
														СтрокаДанных.СубконтоКтНУ3 = Неопределено;
													КонецЕсли;
													СтрокаДанных.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
												КонецЕсли;
												
												СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
												СтрокаДанных.Результат = ?(РезультатЗаСчетРаботодателя > 0,Мин(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля),Макс(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля));
												Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
													СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
												КонецЕсли;
												СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
											КонецЕсли;
											Если Не ДанныеУчета.Следующий() Тогда
												ПродолжатьОбработку = Ложь;
												Прервать;
											КонецЕсли;											
										КонецЦикла;		
										// ошибки округления складываются на последнюю запись из группы базовых записей
										СтрокаДанных.Результат = СтрокаДанных.Результат + РезультатЗаСчетРаботодателя - СуммарнаяДоля;
										Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
											СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
										КонецЕсли;
									КонецЕсли;									
								КонецЕсли;									
								
							КонецЕсли;
							
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						Иначе // ДанныеУчета.ДатаНачалаСобытия > мДатаЗакона180ФЗ, налоговые режимы: УСН и УСН+ЕНВД, с уплатой добровольных взносов
							
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
							СтрокаДанных.Результат	 = ДанныеУчета.Результат - Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
							
							// здесь ЕСН отдельно - двумя строками
							Если СуммаПоСтроке <> СуммаПоСтрокеЕНВД и мЕНВД Тогда
								СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
								СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_ДобровольныеВзносы; 
								СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
								СтрокаДанных.СубконтоДт2 = Неопределено;
								СтрокаДанных.СубконтоДт3 = Неопределено;
								СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
								СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
								СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
								СтрокаДанных.СубконтоКт2 = Неопределено;
								СтрокаДанных.СубконтоКт3 = Неопределено;
								СтрокаДанных.СчетДтНУ	 = Неопределено;
								СтрокаДанных.СчетКтНУ	 = Неопределено;
								СтрокаДанных.СубконтоДтНУ1 = Неопределено;
								СтрокаДанных.СубконтоДтНУ2 = Неопределено;
								СтрокаДанных.СубконтоДтНУ3 = Неопределено;
								СтрокаДанных.СубконтоКтНУ1 = Неопределено;
								СтрокаДанных.СубконтоКтНУ2 = Неопределено;
								СтрокаДанных.СубконтоКтНУ3 = Неопределено;
								СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
								СтрокаДанных.ОблагаетсяЕНВД = Истина;
								СтрокаДанных.Результат	 = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
								Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
									СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
								КонецЕсли;
							КонецЕсли;
							
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;							
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе // налоговые режимы: ОСН, ОСН+ЕНВД но доли ЕНВД нет
				
				Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
					
					СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
					СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
					Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
						Если Не ДанныеУчета.Следующий() Тогда
							ПродолжатьОбработку = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли  ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание
					И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаВБыту Тогда
					
					СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
					СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
					Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
						Если Не ДанныеУчета.Следующий() Тогда
							ПродолжатьОбработку = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе // причина ОбщееЗаболевание или ТравмаВБыту
					
					// результат пособия за счет работодателя
					РезультатЗаСчетРаботодателя = Окр(ДанныеУчета.Результат * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
						 
					Если ДанныеУчета.Результат <> РезультатЗаСчетРаботодателя Тогда
						
						// есть доля пособия за счет ФСС
						СтрокаДанных.Результат	 = ДанныеУчета.Результат - РезультатЗаСчетРаботодателя;
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС;
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СпособРаспределенияЗатрат = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС;
						
						Если ЕстьДоляБЛЗаСчетРаботодателя Тогда
							//доля за счет работодателя есть, скорректируем начало периода действия доли за счет ФСС
							СтрокаДанных.ПериодДействияНачало = Мин(СтрокаДанных.ПериодДействияКонец, ТретийКалендарныйДень);	
						КонецЕсли;
						
					КонецЕсли;
					
					Если РезультатЗаСчетРаботодателя <> 0 Тогда
						//доля пособия за счет работодателя не равна нулю, произведем отражение в учете
						Если ДанныеУчета.Результат <> РезультатЗаСчетРаботодателя Тогда
							// доля пособия за счет работодателя не равно единицы, создадим новую строку
							СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
						КонецЕсли;
						СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
						Если УказаноОтражениеВУчетеДляРаботодателя Тогда
							ЗаполнитьЗначенияСвойств(СтрокаДанных,ВыборкаПоШапкеДокумента,
							"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СпособРаспределенияЗатрат,ОтражениеВУСН"
							+ ?(ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ,",СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКтНУ,СубконтоКтНУ1",""));
							СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе // обходим строки и вычисляем долю результата по базовым записям
							// суммарная доля, которую уже "разбросали" на строки с одинаковым регистратором и номером строки
							СуммарнаяДоля = 0;
							ПерваяИзГруппыСтрок = Истина;
							Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
								// если это не первая из группы "базовых" строк по одной строке основного регистра
								// то создаем очередную строку движений
								Если Не ДанныеУчета.ЭтоЕНВД Тогда
									
									Если Не ПерваяИзГруппыСтрок Тогда
										СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
										Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
											СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
										КонецЕсли;
										СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
									Иначе
										ПерваяИзГруппыСтрок = Ложь;
									КонецЕсли;
									
									Если СуммаПоСтроке = 0 Тогда
										Доля = 0;
									Иначе
										Если ДанныеУчета.РезультатБаза = NULL Тогда
											Успешно = Ложь;
											Доля = 0;
										Иначе
											Доля = РезультатЗаСчетРаботодателя * ДанныеУчета.РезультатБаза / СуммаПоСтроке;
										КонецЕсли;
									КонецЕсли;
									
									Если ДанныеУчета.СчетДтРазрез = NULL Тогда
										Успешно = Ложь;
									Иначе
										СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДтРазрез;
										СтрокаДанных.СубконтоДт1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт1Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СубконтоДт2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт2Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СубконтоДт3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт3Разрез, ПараметрыПолученияСубконто);
										СтрокаДанных.СпособРаспределенияЗатрат = ДанныеУчета.СпособРаспределенияЗатратРазрез;
										Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
											СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУРазрез;
											СтрокаДанных.СубконтоДтНУ1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ1Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СубконтоДтНУ2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ2Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СубконтоДтНУ3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ3Разрез, ПараметрыПолученияСубконто);
										КонецЕсли;
									КонецЕсли;
									Если ДанныеУчета.СчетКтРазрез = NULL Тогда
										Успешно = Ложь;
									Иначе
										СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКтРазрез;
										СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1Разрез;
										СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2Разрез;
										СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3Разрез;
										Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
											СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУРазрез;
											СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1Разрез;
											СтрокаДанных.СубконтоКтНУ2 = Неопределено;
											СтрокаДанных.СубконтоКтНУ3 = Неопределено;
										КонецЕсли;
									КонецЕсли;
									
									СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом;
									СтрокаДанных.Результат = ?(РезультатЗаСчетРаботодателя > 0,Мин(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля),Макс(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля));
									Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
										СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
									КонецЕсли;
									СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
								КонецЕсли;
								Если Не ДанныеУчета.Следующий() Тогда
									ПродолжатьОбработку = Ложь;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							// ошибки округления складываются на последнюю запись из группы базовых записей
							СтрокаДанных.Результат = СтрокаДанных.Результат + РезультатЗаСчетРаботодателя - СуммарнаяДоля;
						КонецЕсли;
					Иначе
						Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
							Если Не ДанныеУчета.Следующий() Тогда
								ПродолжатьОбработку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	НаборЗаписей.Свернуть("КодДоходаЕСН,ОблагаетсяЕНВД,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,СчетДтНУ,СчетКтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СубконтоКтНУ1,СубконтоКтНУ2,СубконтоКтНУ3,СпособРаспределенияЗатрат,ОтражениеВУСН,ПериодДействияНачало, ПериодДействияКонец, Сторно,ПодразделениеДт,ПодразделениеКт,ВидНачисленийОплатыТрудаПоСтатье255НК","Результат,СуммаНУ,СуммаВР,СуммаПР");
	
	ОтражениеНачислений.Загрузить(НаборЗаписей);
	
	Если ФормироватьДвижения Тогда
		
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Очистить();
		Движения.РасчетСреднегоЗаработка.Очистить();
		
		Для Каждого Набор Из Движения Цикл
			Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
				Набор.Записать(Истина, Ложь, Истина, Ложь);
			ИначеЕсли ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.РасчетСреднегоЗаработка") Тогда
				Набор.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура АвтозаполнениеПроводок2010(ДокументОбъект, ВыборкаПоШапкеДокумента = Неопределено, ФормироватьДвижения = Истина)

	мДлинаСуток = 86400;		// в секундах
	
	// Получим реквизиты шапки из запроса
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = ДокументОбъект.СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	СтруктураПараметровПеременныхВеденияУчета = ОтражениеЗарплатыВРеглУчетеДополнительный.ПолучитьСтруктураПараметровПеременныхВеденияУчета(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ВыборкаПоШапкеДокумента.ПериодРегистрации);
	
	ПричинаНетрудоспособности = ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности;
	ПериодРегистрации = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Организация = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Ссылка = ВыборкаПоШапкеДокумента.Ссылка;
	
	Движения = ДокументОбъект.Движения;
	ОтражениеНачислений = ДокументОбъект.ОтражениеНачислений;
	ПособиеОтражаетсяВРеглУчетеТекущимДокументом = ДокументОбъект.ПособиеОтражаетсяВРеглУчетеТекущимДокументом;
	
	// запрос по соответсвиям статей затрат начислений и статей затарт для 
	// отражения б/л за счет работодателя
	// соответствие будет использоваться только при отражении в учете
	// доли за счет работодателя по данным базовых начислений
	ДополнительныеСтатьиЗатратЗапрос = Новый Запрос(
	"ВЫБРАТЬ
	|   СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете.ВидСтатьиЗатрат,
	|   СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете.СтатьяЗатратНачисления,
	|   СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете.СтатьяЗатрат
	|ИЗ
	|   РегистрСведений.СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете КАК СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете
	|ГДЕ
	|   СоответствиеСтатейЗатратОтраженияЗарплатыВРеглУчете.ВидСтатьиЗатрат = &ПособияЗаСчетРаботодателя");
	
	ДополнительныеСтатьиЗатратЗапрос.УстановитьПараметр("ДатаЗапроса", ПериодРегистрации);
	ДополнительныеСтатьиЗатратЗапрос.УстановитьПараметр("ПособияЗаСчетРаботодателя", Перечисления.ВидыДополнительныхСтатейЗатрат.ПособияЗаСчетРаботодателя);
	ДополнительныеСтатьиЗатрат = ДополнительныеСтатьиЗатратЗапрос.Выполнить().Выгрузить();
	
	ПараметрыПолученияСубконто = Новый Соответствие;
	ПараметрыПолученияСубконто[Тип("СправочникСсылка.СтатьиЗатрат")] = Новый Структура("ВидСтатьиЗатрат, ДополнительныеСтатьиЗатрат", 
									Перечисления.ВидыДополнительныхСтатейЗатрат.ПособияЗаСчетРаботодателя, 
									ДополнительныеСтатьиЗатрат);
	
	Если ФормироватьДвижения Тогда
		
		// Заголовок для сообщений об ошибках проведения.
		Заголовок = "Формирование списка проводок документа: " + СокрЛП(Ссылка);
		Отказ = Ложь;
		ПроверятьМестоРаботы = истина;
		
		// перепишем данные из таблицы начислений в набор записей
		ВыборкаПоНачислениям = ДокументОбъект.СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			
			// проверим очередную строку табличной части
			ДокументОбъект.ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок, ПроверятьМестоРаботы);
			
			Если НЕ Отказ Тогда
				Если ВыборкаПоНачислениям.ОсновныеНачисления Тогда
					ДокументОбъект.ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ОсновныеНачисленияРаботниковОрганизаций);
				Иначе
					ПроведениеРасчетов.ДобавитьСтрокуДополнительныхНачислений(Движения.ДополнительныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// получим реквизиты табличной части
		ВыборкаПоРасчетСреднего = ДокументОбъект.СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			// проверим очередную строку табличной части
			ДокументОбъект.ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок, ПроверятьМестоРаботы);
			
			Если НЕ Отказ Тогда
				ДокументОбъект.ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отказ Тогда
			Возврат 
		КонецЕсли;
		
		Для Каждого Набор Из Движения Цикл
			Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
				Набор.Записать(Истина, Ложь, Истина, Ложь);
			ИначеЕсли ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.РасчетСреднегоЗаработка") Тогда
				Набор.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
	
	мЕНВД = Ложь;
	Если ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
		// определим налоговый режим
		НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(ПериодРегистрации), Организация);
		УчетнаяПолитика = глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете")[КонецМесяца(ПериодРегистрации)][Организация];
		мУСН = УчетнаяПолитика.УСН;
		мОбъектНалогообложенияУСН = УчетнаяПолитика.ОбъектНалогообложенияУСН;
		мЕНВД = УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД;
		УказаноОтражениеВУчетеДляРаботодателя = ВыборкаПоШапкеДокумента.УказаноОтражениеВУчетеДляРаботодателя;
		ВторойКалендарныйДень = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия + мДлинаСуток;
		ТретийКалендарныйДень = ВторойКалендарныйДень + мДлинаСуток;
		
		// для всех болезней, кроме прозводственного травматизма может потребоваться расчетная база
		// расчетная база используется для вычисления доли ЕНВД и для распределения по счетам затрат
		// доли пособия за счет работодателя, когда явно не указан способ отражения пособия за счет работодателя:
		// - два календарных дня при болезни работника
		
		РаспределятьЗаСчетРаботодателя = Не УказаноОтражениеВУчетеДляРаботодателя И ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
		РаспределятьПоЕНВД = мЕНВД И ВыборкаПоШапкеДокумента.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления;
		НеРаспределятьПриУСН = мУСН И мОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
		
		НадоЧитатьРасчетнуюБазу = РаспределятьПоЕНВД ИЛИ РаспределятьЗаСчетРаботодателя И Не НеРаспределятьПриУСН;
	Иначе
		НадоЧитатьРасчетнуюБазу	= Ложь						
	КонецЕсли;
	
	// основная выборка - по ней ведем обход и вводим записи движений
	РезультатДанныеУчета = НачислениеПоБольничномуЛистуДополнительный.ПолучитьДанныеУчета2010(ВыборкаПоШапкеДокумента, НадоЧитатьРасчетнуюБазу);
	ДанныеУчета = РезультатДанныеУчета.Выбрать();
	
	ПродолжатьОбработку = ДанныеУчета.Следующий(); 
	Успешно = Истина;
	
	НаборЗаписей = ОтражениеНачислений.ВыгрузитьКолонки();
	
	ДокументОбъект.ПодпадаетПодЕНВД = 0;
	
	Если ПродолжатьОбработку и мЕНВД И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
		
		Если ВыборкаПоШапкеДокумента.СтратегияОтраженияВУчете <> Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления Тогда
			
			ДокументОбъект.ПодпадаетПодЕНВД = ВыборкаПоШапкеДокумента.ПроцентЕНВД;
			
		Иначе
			
			ОбщаяБазаРаспределенияСтроки = 0;
			БазаЕНВД = 0;
			
			// вспомогательная выборка - по ней ведем суммирование базовых результатов
			ДанныеУчетаВспомогательные = РезультатДанныеУчета.Выбрать();
			ДанныеУчетаВспомогательные.Следующий();
			ТекущийНомерСтроки = ДанныеУчетаВспомогательные.НомерСтроки;
			
			// суммируем базовые ресурсы по текущей строке набора записей
			Пока ДанныеУчетаВспомогательные.НомерСтроки = ТекущийНомерСтроки Цикл
				Если НЕ ДанныеУчетаВспомогательные.Сторно Тогда
					Если ДанныеУчетаВспомогательные.РезультатБаза = NULL Тогда
						Успешно = Ложь;
					Иначе
						ОбщаяБазаРаспределенияСтроки = ОбщаяБазаРаспределенияСтроки + ДанныеУчетаВспомогательные.РезультатБаза;
						Если ДанныеУчетаВспомогательные.ЭтоЕНВД Тогда
							БазаЕНВД = БазаЕНВД + ДанныеУчетаВспомогательные.РезультатБаза
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				Если Не ДанныеУчетаВспомогательные.Следующий() Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОбщаяБазаРаспределенияСтроки = 0 Тогда
				ДоляЕНВД = 0
			Иначе
				ДоляЕНВД = БазаЕНВД / ОбщаяБазаРаспределенияСтроки
			КонецЕсли;
			ДокументОбъект.ПодпадаетПодЕНВД = ДоляЕНВД * 100;
		КонецЕсли;
		
	КонецЕсли;
	
	// вспомогательная выборка - по ней ведем суммирование базовых результатов
	ДанныеУчетаВспомогательные = РезультатДанныеУчета.Выбрать();
	
	// структура поиска для позиционирования в ДанныеНалоговогоУчетаВспомогательные
	// при необходимости суммирования "базовых" ресурсов
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		КомментарийОшибкаСбораРасчетнойБазы = "";
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	#КонецЕсли

	
	ЗаполнятьДанныеНУ = СтруктураПараметровПеременныхВеденияУчета.ЗаполнятьДанныеНУ;
	ЗаполнятьСчетаНУ  = СтруктураПараметровПеременныхВеденияУчета.ЗаполнятьСчетаНУ;
	УчетПоПодразделениямНаСчетах = СтруктураПараметровПеременныхВеденияУчета.УчетПоПодразделениямНаСчетах;
	
	Пока ПродолжатьОбработку Цикл
		
		Если ДанныеУчета.Сторно Тогда
			
			ТекущийНомерСтроки = ДанныеУчета.НомерСтроки;
			// позиционируемся во вспомогательной выборке по запросу для суммирования "базовых" данных
			СтруктураПоиска.НомерСтроки = ТекущийНомерСтроки;
			Если ДанныеУчетаВспомогательные.НомерСтроки <> ТекущийНомерСтроки Тогда
				// ищем следующую строку во спомогательной выборке если она не является искомой	
				ДанныеУчетаВспомогательные.НайтиСледующий(СтруктураПоиска);
			КонецЕсли;
			
			СуммаПоСтроке = 0;
			
			// суммируем базовые ресурсы по текущей строке набора записей
			Пока ДанныеУчетаВспомогательные.НомерСтроки = ТекущийНомерСтроки Цикл
				Если ДанныеУчетаВспомогательные.РезультатСторно = NULL Тогда
					Успешно = Ложь;
				Иначе
					СуммаПоСтроке = СуммаПоСтроке + ДанныеУчетаВспомогательные.РезультатСторно;
				КонецЕсли;
				Если Не ДанныеУчетаВспомогательные.Следующий() Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// суммарная доля, которую уже "разбросали" на строки с одинаковым номером строки
			СуммарнаяДоля = 0;
			СуммарнаяДоляДоп = 0;
			// полный результат
			ПолныйРезультат = ДанныеУчета.Результат;
			ПолныйРезультатДоп = ДанныеУчета.ДополнительныйРезультат;
			
			СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
			
			// обходим строки и вычисляем долю результата по базовым записям
			ПерваяИзГруппыСтрок = Истина;
			Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
				// если это не первая из группы "базовых" строк по одной строке основного регистра
				// то создаем очередную строку движений
					
				Если Не ПерваяИзГруппыСтрок Тогда
					СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
				Иначе
					ПерваяИзГруппыСтрок = Ложь;
				КонецЕсли;
				
				Если СуммаПоСтроке = 0 Тогда
					Доля = 0;
					ДоляДоп = 0;
				Иначе
					Если ДанныеУчета.РезультатСторно = NULL Тогда
						Успешно = Ложь;
						Доля = 0;
						ДоляДоп = 0;
					Иначе
						Доля = ПолныйРезультат * ДанныеУчета.РезультатСторно / СуммаПоСтроке;
						ДоляДоп = ПолныйРезультатДоп * ДанныеУчета.РезультатСторно / СуммаПоСтроке;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДт;
				СтрокаДанных.СубконтоДт1 = ДанныеУчета.СубконтоДт1;
				СтрокаДанных.СубконтоДт2 = ДанныеУчета.СубконтоДт2;
				СтрокаДанных.СубконтоДт3 = ДанныеУчета.СубконтоДт3;
				СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКт;
				СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1;
				СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2;
				СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3;
				
				Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
					СтрокаДанных.СчетДтНУ 	   = ДанныеУчета.СчетДтНУ;
					СтрокаДанных.СубконтоДтНУ1 = ДанныеУчета.СубконтоДтНУ1;
					СтрокаДанных.СубконтоДтНУ2 = ДанныеУчета.СубконтоДтНУ2;
					СтрокаДанных.СубконтоДтНУ3 = ДанныеУчета.СубконтоДтНУ3;
					СтрокаДанных.СчетКтНУ	   = ДанныеУчета.СчетКтНУ;
					СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1;
					СтрокаДанных.СубконтоКтНУ2 = ДанныеУчета.СубконтоКтНУ2;
					СтрокаДанных.СубконтоКтНУ3 = ДанныеУчета.СубконтоКтНУ3;
				КонецЕсли;
				
				СтрокаДанных.КодДоходаЕСН   = ДанныеУчета.КодДоходаЕСН;
				СтрокаДанных.ОблагаетсяЕНВД = ДанныеУчета.ОблагаетсяЕНВД;
				
				СтрокаДанных.Результат = ?(ПолныйРезультат > 0,Мин(Доля, ПолныйРезультат - СуммарнаяДоля),Макс(Доля,ПолныйРезультат - СуммарнаяДоля));
				СтрокаДанных.ДополнительныйРезультат = ?(ПолныйРезультатДоп > 0,Мин(ДоляДоп, ПолныйРезультатДоп - СуммарнаяДоляДоп),Макс(ДоляДоп,ПолныйРезультатДоп - СуммарнаяДоляДоп));
				Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
					СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
				КонецЕсли;
				СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
				СуммарнаяДоляДоп = СуммарнаяДоляДоп + СтрокаДанных.ДополнительныйРезультат;
				
				Если Не ДанныеУчета.Следующий() Тогда
					ПродолжатьОбработку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// ошибки округления складываются на последнюю запись из группы базовых записей
			СтрокаДанных.Результат = СтрокаДанных.Результат + ПолныйРезультат - СуммарнаяДоля;
			СтрокаДанных.ДополнительныйРезультат = СтрокаДанных.ДополнительныйРезультат + ПолныйРезультатДоп - СуммарнаяДоляДоп;
			
		
		ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда // отражение в учете не зависит от налогового режима
			
			ТекущийНомерСтроки = ДанныеУчета.НомерСтроки;
			
			СуммаПоСтроке = ДанныеУчета.Результат;
			
			Если СуммаПоСтроке = 0 Тогда
				Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
					Если Не ДанныеУчета.Следующий() Тогда
						ПродолжатьОбработку = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
			
			СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ;
			СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
			СтрокаДанных.СубконтоДт2 = Неопределено;
			СтрокаДанных.СубконтоДт3 = Неопределено;
			СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
			СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
			СтрокаДанных.СубконтоКт2 = Неопределено;
			СтрокаДанных.СубконтоКт3 = Неопределено;
			СтрокаДанных.СчетДтНУ	 = Неопределено;
			СтрокаДанных.СчетКтНУ	 = Неопределено;
			СтрокаДанных.СубконтоДтНУ1 = Неопределено;
			СтрокаДанных.СубконтоДтНУ2 = Неопределено;
			СтрокаДанных.СубконтоДтНУ3 = Неопределено;
			СтрокаДанных.СубконтоКтНУ1 = Неопределено;
			СтрокаДанных.СубконтоКтНУ2 = Неопределено;
			СтрокаДанных.СубконтоКтНУ3 = Неопределено;
			СтрокаДанных.ОтражениеВУСН	 = Перечисления.ОтражениеВУСН.НеПринимаются;		
			СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом;
			
			Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
				СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
			КонецЕсли;
			
			Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
				Если Не ДанныеУчета.Следующий() Тогда
					ПродолжатьОбработку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
						
			ТекущийНомерСтроки = ДанныеУчета.НомерСтроки;
			// позиционируемся во вспомогательной выборке по запросу для суммирования "базовых" данных
			СтруктураПоиска.НомерСтроки = ТекущийНомерСтроки;
			Если ДанныеУчетаВспомогательные.НомерСтроки <> ТекущийНомерСтроки Тогда
				// ищем следующую строку во спомогательной выборке если она не является искомой	
				ДанныеУчетаВспомогательные.НайтиСледующий(СтруктураПоиска);
			КонецЕсли;
			
			СуммаПоСтроке = 0;
			СуммаПоСтрокеЕНВД = 0;
			Если НадоЧитатьРасчетнуюБазу и ВыборкаПоШапкеДокумента.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления Тогда
				// суммируем базовые ресурсы по текущей строке набора записей
				Пока ДанныеУчетаВспомогательные.НомерСтроки = ТекущийНомерСтроки Цикл
					Если ДанныеУчетаВспомогательные.РезультатБаза = NULL Тогда
						Успешно = Ложь;
					Иначе
						СуммаПоСтроке = СуммаПоСтроке + ДанныеУчетаВспомогательные.РезультатБаза;
						Если ДанныеУчетаВспомогательные.ЭтоЕНВД Тогда
							СуммаПоСтрокеЕНВД = СуммаПоСтрокеЕНВД + ДанныеУчетаВспомогательные.РезультатБаза;
						КонецЕсли;						
					КонецЕсли;
					Если Не ДанныеУчетаВспомогательные.Следующий() Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли НадоЧитатьРасчетнуюБазу и ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
				// суммируем базовые ресурсы по текущей строке набора записей
				// сюда попали когда для БЛ доля ЕНВД определяется по текущему месяцу, а доля за счет работодателя распределяется по базовым начислениям
				Пока ДанныеУчетаВспомогательные.НомерСтроки = ТекущийНомерСтроки Цикл
					Если ДанныеУчетаВспомогательные.РезультатБаза = NULL Тогда
						Успешно = Ложь;
					Иначе 
						СуммаПоСтроке = СуммаПоСтроке + ДанныеУчетаВспомогательные.РезультатБаза;
					КонецЕсли;
					Если Не ДанныеУчетаВспомогательные.Следующий() Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				СуммаПоСтрокеЕНВД = СуммаПоСтроке * ВыборкаПоШапкеДокумента.ПроцентЕНВД / 100;
			ИначеЕсли ВыборкаПоШапкеДокумента.ПроцентЕНВД = 100 Тогда
				СуммаПоСтроке = ДанныеУчета.Результат;
				СуммаПоСтрокеЕНВД = ДанныеУчета.Результат;
			ИначеЕсли ВыборкаПоШапкеДокумента.ПроцентЕНВД = 0 Тогда
				СуммаПоСтроке = ДанныеУчета.Результат;
			Иначе
				СуммаПоСтроке = ДанныеУчета.Результат;
				СуммаПоСтрокеЕНВД = ДанныеУчета.Результат * ВыборкаПоШапкеДокумента.ПроцентЕНВД / 100;
			КонецЕсли;
			
			Если Не Успешно Тогда
				// не удалось собрать данные отражения в учете, необходимо разобраться зачем мы собирали расчетную базу
				// и сообщить пользователю о проблемах
				
				// ДоляЕНВДПоБазе - необходимо было собирать долю ЕНВД по базовым начислениям
				ДоляЕНВДПоБазе =  мЕНВД и ВыборкаПоШапкеДокумента.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления;
				
				// ДоляРаботодателяПоБазе - необходимо было собирать долю пособия за счет работодателя по базе
				// данные по базе нужны для 2-х календарных дней и для доли за счет работодателя при УСН доходы минус расходы
				ДоляРаботодателяПоБазе = Не УказаноОтражениеВУчетеДляРаботодателя 
					и ((НЕ мУСН и (ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание
					ИЛИ ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаВБыту)
					и ДанныеУчета.ДоляБЛЗаСчетРаботодателя <>0)
					или (ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам
					и мУСН и мОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы));
				
				Если Не ДоляЕНВДПоБазе и Не ДоляРаботодателяПоБазе Тогда
						
					// данные собранные по базе не нужны, можно использовать результат запроса по шапке документа
					Успешно = Истина;
					Если ВыборкаПоШапкеДокумента.ПроцентЕНВД = 100 Тогда
						СуммаПоСтроке = ДанныеУчета.Результат;
						СуммаПоСтрокеЕНВД = ДанныеУчета.Результат;
					ИначеЕсли ВыборкаПоШапкеДокумента.ПроцентЕНВД = 0 Тогда
						СуммаПоСтроке = ДанныеУчета.Результат;
					Иначе
						СуммаПоСтроке = ДанныеУчета.Результат;
						СуммаПоСтрокеЕНВД = ДанныеУчета.Результат * ВыборкаПоШапкеДокумента.ПроцентЕНВД / 100;
					КонецЕсли;
					
				Иначе
					
					Если Не ДоляЕНВДПоБазе Тогда
						// данные по базе нужны только для распределения по счетам затрат доли пособия за счет работодателя
						// соберм суммы и продолжим работу, при этом счет затрат для пособия за счет работодателя будет пустой
						Если ВыборкаПоШапкеДокумента.ПроцентЕНВД = 100 Тогда
							СуммаПоСтроке = ДанныеУчета.Результат;
							СуммаПоСтрокеЕНВД = ДанныеУчета.Результат;
						ИначеЕсли ВыборкаПоШапкеДокумента.ПроцентЕНВД = 0 Тогда
							СуммаПоСтроке = ДанныеУчета.Результат;
						Иначе
							СуммаПоСтроке = ДанныеУчета.Результат;
							СуммаПоСтрокеЕНВД = ДанныеУчета.Результат * ВыборкаПоШапкеДокумента.ПроцентЕНВД / 100;
						КонецЕсли;
					КонецЕсли;
					
					#Если ТолстыйКлиентОбычноеПриложение Тогда
												
						Если ПустаяСтрока(КомментарийОшибкаСбораРасчетнойБазы) Тогда 
							
							//Добавим родительскую сторку
							ТекстСообщения = "Внимание! Нет данных для отражения пособия в учете.
							|Отсутствуют данные по отражению зарплаты в бухучете за расчетный период.";
							КомментарийОшибкаСбораРасчетнойБазы = ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.Ошибка);
							
							Если Не ПособиеОтражаетсяВРеглУчетеТекущимДокументом и (ДоляЕНВДПоБазе или ДоляРаботодателяПоБазе) Тогда
								ТекстСообщения = "Рекомендуется зарегистрировать отражение пособия в учете текущим документом.
								|Перейдите по ссылке ""Отражение пособия в учете"", установить вариант отражения в учете ""по данным текущего документа""
								|и заполните таблицу ""Проводки и данные по страховым взносам"".";	
								ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.ВажнаяИнформация,,КомментарийОшибкаСбораРасчетнойБазы);
							КонецЕсли;
							
							Если ДоляЕНВДПоБазе Тогда
								ТекстСообщения = "Нет данных для определения доли ЕНВД пособия. Стратегия определения доли ЕНВД - ""по базовым начислениям "" задана в ";
								Если Не ПособиеОтражаетсяВРеглУчетеТекущимДокументом Тогда
									ТекстСообщения = ТекстСообщения + "начислении: " + ДанныеУчета.ВидРасчетаНаименование;	
								Иначе
									ТекстСообщения = ТекстСообщения + "документе";
								КонецЕсли;	
								ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.ВажнаяИнформация,,КомментарийОшибкаСбораРасчетнойБазы);
							КонецЕсли;	
							
							Если ДоляРаботодателяПоБазе Тогда
								ТекстСообщения = "Нет данных для распределения доли пособия за счет работодателя по счетам затрат.";
								ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.ВажнаяИнформация,,КомментарийОшибкаСбораРасчетнойБазы);
							КонецЕсли;
							
						КонецЕсли;
						
					#КонецЕсли
					
				КонецЕсли;
				
			КонецЕсли;	
			
			Если СуммаПоСтроке = 0 Тогда
				Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
					Если Не ДанныеУчета.Следующий() Тогда
						ПродолжатьОбработку = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
			Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
				СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
			КонецЕсли;
			
			Если мУСН Тогда
				СчетФСС     = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_УСН;
				СубконтоФСС = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
				НеПринимаютсяУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
				ПринимаютсяУСН   = Перечисления.ОтражениеВУСН.Принимаются;
			Иначе
				СчетФСС     = ПланыСчетов.Хозрасчетный.ФСС;
				СубконтоФСС = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
				НеПринимаютсяУСН = Неопределено;
				ПринимаютсяУСН   = Неопределено;
			КонецЕсли;

			ДоляПособияЕНВД   = 0;
			Если ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание Тогда
				// все за счет ФСС
								
				Если мЕНВД и СуммаПоСтрокеЕНВД <> 0 Тогда
					// есть ЕНВД и доля ЕНВД не равна нулю
					
					ДоляПособияЕНВД = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
					СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
					СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					СтрокаДанных.Результат	   = ДоляПособияЕНВД;
					Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
						СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
					КонецЕсли;
					СтрокаДанных.ДополнительныйРезультат = Окр(ДанныеУчета.ДополнительныйРезультат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыПоСтраховымВзносам.ПособияЗаСчетФСС;
					СтрокаДанных.ОблагаетсяЕНВД = Истина;
					СтрокаДанных.ОтражениеВУСН	= НеПринимаютсяУСН;
					
				КонецЕсли;	
					
				Если Не мЕНВД или СуммаПоСтрокеЕНВД <> СуммаПоСтроке Тогда
					// нет ЕНВД или доля ЕНВД не 100%
					Если мЕНВД и СуммаПоСтрокеЕНВД <> 0 Тогда
						СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
					КонецЕсли;
					
					СтрокаДанных.СчетДт 	 = СчетФСС; 
					СтрокаДанных.СубконтоДт1 = СубконтоФСС;
					СтрокаДанных.СубконтоДт2 = Неопределено;
					СтрокаДанных.СубконтоДт3 = Неопределено;
					СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
					СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
					СтрокаДанных.СубконтоКт2 = Неопределено;
					СтрокаДанных.СубконтоКт3 = Неопределено;
					СтрокаДанных.СчетДтНУ	 = Неопределено;
					СтрокаДанных.СчетКтНУ	 = Неопределено;
					СтрокаДанных.СубконтоДтНУ1 = Неопределено;
					СтрокаДанных.СубконтоДтНУ2 = Неопределено;
					СтрокаДанных.СубконтоДтНУ3 = Неопределено;
					СтрокаДанных.СубконтоКтНУ1 = Неопределено;
					СтрокаДанных.СубконтоКтНУ2 = Неопределено;
					СтрокаДанных.СубконтоКтНУ3 = Неопределено;
					СтрокаДанных.Результат	   = ДанныеУчета.Результат - ДоляПособияЕНВД;
					Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
						СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
					КонецЕсли;
					СтрокаДанных.ДополнительныйРезультат = ДанныеУчета.ДополнительныйРезультат - Окр(ДанныеУчета.ДополнительныйРезультат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
					СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыПоСтраховымВзносам.ПособияЗаСчетФСС;
					СтрокаДанных.ОблагаетсяЕНВД = Ложь;
					СтрокаДанных.ОтражениеВУСН	= НеПринимаютсяУСН;
					
				КонецЕсли;
				
				Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
					Если Не ДанныеУчета.Следующий() Тогда
						ПродолжатьОбработку = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			Иначе  // общее заболевание, есть доля за счет работодателя
				
				// доля пособия за счет работодателя за первые два календарных дня может быть
				// при этом ДоляБЛЗаСчетРаботодателя может быть равна нулю по причине отсутствия ФПД
				ЕстьДоляБЛЗаСчетРаботодателя = ТретийКалендарныйДень > ДанныеУчета.ПериодДействияНачало;
				
				Если мЕНВД и СуммаПоСтрокеЕНВД <> 0  Тогда
					// есть ЕНВД и доля ЕНВД не равна нулю
					
					ДоляПособияЕНВД = Окр(ДанныеУчета.Результат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2);
					
					// за счет работодателя в части ЕНВД, первые два календарных дня
					РезультатЗаСчетРаботодателя = Окр(ДоляПособияЕНВД * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
					// за счет ФСС в части ЕНВД
					ЗаСчетФССРезультат = ДоляПособияЕНВД - РезультатЗаСчетРаботодателя;
					
					Если РезультатЗаСчетРаботодателя <> 0 Тогда 
						
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНВД; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
						СтрокаДанных.ДополнительныйРезультат = 0;
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом;
						СтрокаДанных.ОблагаетсяЕНВД = Истина;
						СтрокаДанных.ОтражениеВУСН	= НеПринимаютсяУСН;
						СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
						
					КонецЕсли;
					
					Если ЗаСчетФССРезультат <> 0 Тогда
						
						Если РезультатЗаСчетРаботодателя <> 0 Тогда
							СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						КонецЕсли;
						СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ФСС_СПЕЦ_ЕНВД; 
						СтрокаДанных.СубконтоДт1 = Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.Результат = ЗаСчетФССРезультат;
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
						СтрокаДанных.ДополнительныйРезультат = Окр(ДанныеУчета.ДополнительныйРезультат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2) - Окр(Окр(ДанныеУчета.ДополнительныйРезультат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2) * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыПоСтраховымВзносам.ПособияЗаСчетФСС;
						СтрокаДанных.ОблагаетсяЕНВД = Истина;
						СтрокаДанных.ОтражениеВУСН	= НеПринимаютсяУСН;
						Если ЕстьДоляБЛЗаСчетРаботодателя Тогда
							СтрокаДанных.ПериодДействияНачало = Мин(СтрокаДанных.ПериодДействияКонец, ТретийКалендарныйДень);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;	
				
				Если Не мЕНВД или СуммаПоСтрокеЕНВД <> СуммаПоСтроке Тогда	
					// нет ЕНВД или доля ЕНВД не 100%
					Если мЕНВД и СуммаПоСтрокеЕНВД <> 0 Тогда 
						СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
					КонецЕсли;
					
					// за счет работодателя в части не ЕНВД, первые два календарных дня
					РезультатЗаСчетРаботодателя = Окр((ДанныеУчета.Результат - ДоляПособияЕНВД) * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
					//за счет ФСС
					ЗаСчетФССРезультат = ДанныеУчета.Результат - ДоляПособияЕНВД - РезультатЗаСчетРаботодателя;
					
					Если ЗаСчетФССРезультат <> 0 Тогда
						//доля за счет ФСС
						
						СтрокаДанных.СчетДт 	 = СчетФСС;
						СтрокаДанных.СубконтоДт1 = СубконтоФСС;
						СтрокаДанных.СубконтоДт2 = Неопределено;
						СтрокаДанных.СубконтоДт3 = Неопределено;
						СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
						СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
						СтрокаДанных.СубконтоКт2 = Неопределено;
						СтрокаДанных.СубконтоКт3 = Неопределено;
						СтрокаДанных.СчетДтНУ	 = Неопределено;
						СтрокаДанных.СчетКтНУ	 = Неопределено;
						СтрокаДанных.СубконтоДтНУ1 = Неопределено;
						СтрокаДанных.СубконтоДтНУ2 = Неопределено;
						СтрокаДанных.СубконтоДтНУ3 = Неопределено;
						СтрокаДанных.СубконтоКтНУ1 = Неопределено;
						СтрокаДанных.СубконтоКтНУ2 = Неопределено;
						СтрокаДанных.СубконтоКтНУ3 = Неопределено;
						СтрокаДанных.ОблагаетсяЕНВД = Ложь;
						СтрокаДанных.ОтражениеВУСН	= НеПринимаютсяУСН;
						СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыПоСтраховымВзносам.ПособияЗаСчетФСС;
						
						СтрокаДанных.Результат	 = ЗаСчетФССРезультат;
						Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
							СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
						КонецЕсли;
						СтрокаДанных.ДополнительныйРезультат = ДанныеУчета.ДополнительныйРезультат 
									- Окр(ДанныеУчета.ДополнительныйРезультат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2) //доля ЕНВД
									- Окр((ДанныеУчета.ДополнительныйРезультат - Окр(ДанныеУчета.ДополнительныйРезультат * СуммаПоСтрокеЕНВД / СуммаПоСтроке,2)) * ДанныеУчета.ДоляБЛЗаСчетРаботодателя,2);
						
						Если ЕстьДоляБЛЗаСчетРаботодателя Тогда
							СтрокаДанных.ПериодДействияНачало = Мин(СтрокаДанных.ПериодДействияКонец, ТретийКалендарныйДень);
						КонецЕсли;
						
					КонецЕсли;
					
					Если РезультатЗаСчетРаботодателя <> 0 Тогда 
						
						Если ЗаСчетФССРезультат <> 0 Тогда
							СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
						
						Если мУСН и мОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
							
							СтрокаДанных.СчетДт 	 = ПланыСчетов.Хозрасчетный.ЕНприУСН;
							СтрокаДанных.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
							СтрокаДанных.СубконтоДт2 = Неопределено;
							СтрокаДанных.СубконтоДт3 = Неопределено;
							СтрокаДанных.СчетКт 	 = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
							СтрокаДанных.СубконтоКт1 = ДанныеУчета.ФизЛицо;
							СтрокаДанных.СубконтоКт2 = Неопределено;
							СтрокаДанных.СубконтоКт3 = Неопределено;
							СтрокаДанных.СчетДтНУ	 = Неопределено;
							СтрокаДанных.СчетКтНУ	 = Неопределено;
							СтрокаДанных.СубконтоДтНУ1 = Неопределено;
							СтрокаДанных.СубконтоДтНУ2 = Неопределено;
							СтрокаДанных.СубконтоДтНУ3 = Неопределено;
							СтрокаДанных.СубконтоКтНУ1 = Неопределено;
							СтрокаДанных.СубконтоКтНУ2 = Неопределено;
							СтрокаДанных.СубконтоКтНУ3 = Неопределено;
							СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
							СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
							Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
								СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
							КонецЕсли;
							СтрокаДанных.ДополнительныйРезультат = 0;
							СтрокаДанных.ОтражениеВУСН	 = НеПринимаютсяУСН;		
							СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом;
							
						Иначе // ОСН или УСН доходы минус расходы
							
							Если УказаноОтражениеВУчетеДляРаботодателя Тогда
								
								ЗаполнитьЗначенияСвойств(СтрокаДанных,ВыборкаПоШапкеДокумента,
								"СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СпособРаспределенияЗатрат,ОтражениеВУСН"
								+ ?(ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ,",СчетДтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СчетКтНУ,СубконтоКтНУ1",""));
								СтрокаДанных.Результат	 = РезультатЗаСчетРаботодателя;
								СтрокаДанных.ДополнительныйРезультат = 0;
								Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
									СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
								КонецЕсли;
								СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом;
								СтрокаДанных.ОтражениеВУСН	 = ПринимаютсяУСН;
								
							Иначе // обходим строки и вычисляем долю результата по базовым записям
								// суммарная доля, которую уже "разбросали" на строки с одинаковым регистратором и номером строки
								СуммарнаяДоля = 0;
								ПерваяИзГруппыСтрок = Истина;
								Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
									Если Не ДанныеУчета.ЭтоЕНВД Тогда
										// если это не первая из группы "базовых" строк по одной строке основного регистра
										// то создаем очередную строку движений
										Если Не ПерваяИзГруппыСтрок Тогда
											СтрокаДанных = НачислениеПоБольничномуЛистуДополнительный.СоздатьСтрокуДвижений(ДанныеУчета, НаборЗаписей);
											Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
												СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
											КонецЕсли;
											СтрокаДанных.ПериодДействияКонец = Мин(СтрокаДанных.ПериодДействияКонец, ВторойКалендарныйДень);
										Иначе
											ПерваяИзГруппыСтрок = Ложь;
										КонецЕсли;
										
										Если СуммаПоСтроке = 0 Тогда
											Доля = 0;
										Иначе
											Если ДанныеУчета.РезультатБаза = NULL Тогда
												Успешно = Ложь;
												Доля = 0;
											Иначе
												Доля = РезультатЗаСчетРаботодателя * ДанныеУчета.РезультатБаза / (СуммаПоСтроке -  СуммаПоСтрокеЕНВД);
											КонецЕсли;
										КонецЕсли;
										
										Если ДанныеУчета.СчетДтРазрез = NULL Тогда
											Успешно = Ложь;
										Иначе
											СтрокаДанных.СчетДт 	 = ДанныеУчета.СчетДтРазрез;
											СтрокаДанных.СубконтоДт1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт1Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СубконтоДт2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт2Разрез, ПараметрыПолученияСубконто);
											СтрокаДанных.СубконтоДт3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДт3Разрез, ПараметрыПолученияСубконто);
											Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
												СтрокаДанных.СчетДтНУ	 = ДанныеУчета.СчетДтНУРазрез;
												СтрокаДанных.СубконтоДтНУ1 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ1Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДтНУ2 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ2Разрез, ПараметрыПолученияСубконто);
												СтрокаДанных.СубконтоДтНУ3 = НачислениеПоБольничномуЛистуДополнительный.ПолучитьСубконто(ДанныеУчета.СубконтоДтНУ3Разрез, ПараметрыПолученияСубконто);
											КонецЕсли;
										КонецЕсли;
										Если ДанныеУчета.СчетКтРазрез = NULL Тогда
											Успешно = Ложь;
										Иначе
											СтрокаДанных.СчетКт 	 = ДанныеУчета.СчетКтРазрез;
											СтрокаДанных.СубконтоКт1 = ДанныеУчета.СубконтоКт1Разрез;
											СтрокаДанных.СубконтоКт2 = ДанныеУчета.СубконтоКт2Разрез;
											СтрокаДанных.СубконтоКт3 = ДанныеУчета.СубконтоКт3Разрез;
											Если ЗаполнятьДанныеНУ и ЗаполнятьСчетаНУ Тогда
												СтрокаДанных.СчетКтНУ	 = ДанныеУчета.СчетКтНУРазрез;
												СтрокаДанных.СубконтоКтНУ1 = ДанныеУчета.СубконтоКтНУ1Разрез;
												СтрокаДанных.СубконтоКтНУ2 = Неопределено;
												СтрокаДанных.СубконтоКтНУ3 = Неопределено;
											КонецЕсли;
										КонецЕсли;
										СтрокаДанных.Результат = ?(РезультатЗаСчетРаботодателя > 0,Мин(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля),Макс(Доля,РезультатЗаСчетРаботодателя - СуммарнаяДоля));
										СтрокаДанных.ДополнительныйРезультат = 0;
										Если ЗаполнятьДанныеНУ и Не ЗаполнятьСчетаНУ Тогда
											СтрокаДанных.СуммаНУ = СтрокаДанных.Результат;
										КонецЕсли;
										СтрокаДанных.КодДоходаЕСН = Справочники.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом;
										СтрокаДанных.ОтражениеВУСН	 = ПринимаютсяУСН;
										СуммарнаяДоля = СуммарнаяДоля + СтрокаДанных.Результат;
									КонецЕсли;
									Если Не ДанныеУчета.Следующий() Тогда
										ПродолжатьОбработку = Ложь;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								// ошибки округления складываются на последнюю запись из группы базовых записей
								СтрокаДанных.Результат = СтрокаДанных.Результат + РезультатЗаСчетРаботодателя - СуммарнаяДоля;
								СтрокаДанных.ДополнительныйРезультат = 0;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;	
				
				Пока ДанныеУчета.НомерСтроки = ТекущийНомерСтроки Цикл
					Если Не ДанныеУчета.Следующий() Тогда
						ПродолжатьОбработку = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДанных = ДополнитьСтрокуДанных(СтрокаДанных,ДанныеУчета.Сторно, ДанныеУчета);
		
	КонецЦикла;

	НаборЗаписей.Свернуть(СформироватьСтрокуДляСверткиНабораЗаписей(),"Результат,ДополнительныйРезультат,СуммаНУ,СуммаВР,СуммаПР");
	
	ОтражениеНачислений.Загрузить(НаборЗаписей);
	
	Если ФормироватьДвижения Тогда
		
		Движения.ОсновныеНачисленияРаботниковОрганизаций.Очистить();
		Движения.РасчетСреднегоЗаработка.Очистить();
		
		Для Каждого Набор Из Движения Цикл
			Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
				Набор.Записать(Истина, Ложь, Истина, Ложь);
			ИначеЕсли ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.РасчетСреднегоЗаработка") Тогда
				Набор.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачала, ВидРасчета, ПроцентОплаты)

	СтрокаИнтервала					= ТаблицаИнтерваловОплаты.Добавить();
	СтрокаИнтервала.Начало			= ДатаНачала;
	СтрокаИнтервала.Расчет			= ВидРасчета;
	СтрокаИнтервала.ПроцентОплаты	= ПроцентОплаты;
	
КонецПроцедуры // ДобавитьСтрокуВТаблицуИнтервалов()

// Функция рассчитывает средний дневной/часовой заработок по данным табличной части РасчетСреднего
Функция РасчетСреднегоЗаработка(СписокСоставляющихСреднегоЗаработка, ДокументОбъект, ИспользоватьСреднеЧасовойЗаработок)
	
	мДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
	ДатаСобытия	= ДокументОбъект.ДатаНачалаСобытия;
	Сотрудник	= ДокументОбъект.Сотрудник;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокСоставляющихСреднегоЗаработка",СписокСоставляющихСреднегоЗаработка);
	
	// определим использование среднечасового заработка
	Если ИспользоватьСреднеЧасовойЗаработок = Неопределено И ДатаСобытия < мДатаЗакона255ФЗ Тогда
		
		Запрос.УстановитьПараметр("ДатаНачалаСобытия",		ДатаСобытия);
		Запрос.УстановитьПараметр("Сотрудник",				Сотрудник);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
		|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
		|		ИНАЧЕ ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ)
		|	КОНЕЦ КАК ИспользоватьСреднеЧасовойЗаработок
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних";
		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
		Результат = Запрос.Выполнить();
		ИспользоватьСреднеЧасовойЗаработок = Ложь;
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ИспользоватьСреднеЧасовойЗаработок = Выборка.ИспользоватьСреднеЧасовойЗаработок;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ДокументОбъект.РасчетСреднего.Количество() = 0 Тогда
		Возврат 0
	КонецЕсли;
	
	
	РасчетныйПериодНачало = ДокументОбъект.ПериодРасчетаСреднегоЗаработкаНачало;
	РасчетныйПериодОкончание = ДокументОбъект.ПериодРасчетаСреднегоЗаработкаОкончание;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетСреднегоЗаработка.ВидРасчета КАК ВидРасчета,
	|	РасчетСреднегоЗаработка.Результат,
	|	РасчетСреднегоЗаработка.Сотрудник,
	|	РасчетСреднегоЗаработка.ОтработаноДней,
	|	РасчетСреднегоЗаработка.ОтработаноЧасов,
	|	РасчетСреднегоЗаработка.НормаПоПятидневке,
	|	РасчетСреднегоЗаработка.ОтработаноПоПятидневке,
	|	РасчетСреднегоЗаработка.ЧислоМесяцев,
	|	РасчетСреднегоЗаработка.БазовыйПериодНачало,
	|	РасчетСреднегоЗаработка.БазовыйПериодКонец
	|ПОМЕСТИТЬ ВТ_РасчетСреднегоЗаработка
	|ИЗ
	|	&ТаблицаСреднего КАК РасчетСреднегоЗаработка
	|ГДЕ
	|	(РасчетСреднегоЗаработка.Результат <> 0
	|			ИЛИ РасчетСреднегоЗаработка.ОтработаноДней <> 0
	|			ИЛИ РасчетСреднегоЗаработка.ОтработаноЧасов <> 0)
	|	И РасчетСреднегоЗаработка.ВидРасчета В(&СписокСоставляющихСреднегоЗаработка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	
	Запрос.УстановитьПараметр("ТаблицаСреднего",ДокументОбъект.РасчетСреднего);
	Результат = Запрос.Выполнить().Выгрузить(); 
	Если Результат[0].Количество = 0 Тогда  // значащих данных не нашлось
		Возврат 0;
	КонецЕсли;	
	
	ОсновнойЗаработок = Новый Массив(3);
	ОсновнойЗаработок[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
	ОсновнойЗаработок[1] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
	ОсновнойЗаработок[2] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010;
	
	ФиксированныеПремии = Новый Массив(2);
	ФиксированныеПремии[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
	ФиксированныеПремии[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
	
	ПоФиксПремиям = Новый Массив(1);
	ПоФиксПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
	
	ПоПремиям = Новый Массив(6);
	ПоПремиям[0] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
	ПоПремиям[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
	ПоПремиям[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий;
	ПоПремиям[3] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий;
	ПоПремиям[4] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий;
	ПоПремиям[5] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010;
	
	Запрос.УстановитьПараметр("ИспользоватьСреднеЧасовойЗаработок", ИспользоватьСреднеЧасовойЗаработок);
	Запрос.УстановитьПараметр("ОсновнойЗаработок",					ОсновнойЗаработок);
	Запрос.УстановитьПараметр("ПоФиксПремиям",						ПоФиксПремиям);
	Запрос.УстановитьПараметр("ПоПремиям",							ПоПремиям);
	Запрос.УстановитьПараметр("ВсеФиксированныеПремии",				ФиксированныеПремии);
	Запрос.УстановитьПараметр("РасчетныйПериодНачало",				РасчетныйПериодНачало);
	Запрос.УстановитьПараметр("РасчетныйПериодОкончание",			РасчетныйПериодОкончание);
	Запрос.УстановитьПараметр("ПродолжительностьРасчетногоПериода",	12);
	Запрос.УстановитьПараметр("Сотрудник", 							Сотрудник);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|				ТОГДА РасчетСреднегоЗаработка.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоЗаработка,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|					И РасчетСреднегоЗаработка.Сотрудник = &Сотрудник
	|				ТОГДА ВЫБОР
	|						КОГДА &ИспользоватьСреднеЧасовойЗаработок
	|							ТОГДА РасчетСреднегоЗаработка.ОтработаноЧасов
	|						ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноДней
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоДнейРасчетногоПериода,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ОсновнойЗаработок)
	|				ТОГДА 0
	|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособий), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010))
	|				ТОГДА РасчетСреднегоЗаработка.Результат
	|			КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоПремиям)
	|						ТОГДА РасчетСреднегоЗаработка.Результат
	|					КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПоФиксПремиям)
	|						ТОГДА РасчетСреднегоЗаработка.Результат * ВЫБОР
	|								КОГДА РасчетСреднегоЗаработка.НормаПоПятидневке = 0
	|									ТОГДА 0
	|								ИНАЧЕ РасчетСреднегоЗаработка.ОтработаноПоПятидневке / РасчетСреднегоЗаработка.НормаПоПятидневке
	|							КОНЕЦ
	|					ИНАЧЕ РасчетСреднегоЗаработка.Результат
	|				КОНЕЦ * ВЫБОР
	|					КОГДА РасчетСреднегоЗаработка.ЧислоМесяцев > &ПродолжительностьРасчетногоПериода
	|						ТОГДА &ПродолжительностьРасчетногоПериода / РасчетСреднегоЗаработка.ЧислоМесяцев
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ВсегоУчтеноПремий
	|ИЗ
	|	ВТ_РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Окр(?(Выборка.ВсегоДнейРасчетногоПериода = NULL ИЛИ Выборка.ВсегоДнейРасчетногоПериода = 0,0, (Выборка.ВсегоЗаработка + Выборка.ВсегоУчтеноПремий) / Выборка.ВсегоДнейРасчетногоПериода),2);
		
	КонецЕсли;
	
	Возврат 0;

КонецФункции // РасчетСреднедневногоЗаработка()

Функция ДополнитьСтрокуДанных(СтрокаДанных, Сторно, ДанныеУчета)
	
	СтрокаДанных.СпособРаспределенияЗатрат = ?(Сторно, ДанныеУчета.СпособРаспределенияЗатрат, Неопределено);	
	Возврат СтрокаДанных
	
КонецФункции

Функция СформироватьСтрокуДляСверткиНабораЗаписей()
	
	Возврат "КодДоходаЕСН,ОблагаетсяЕНВД,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,СчетДтНУ,СчетКтНУ,СубконтоДтНУ1,СубконтоДтНУ2,СубконтоДтНУ3,СубконтоКтНУ1,СубконтоКтНУ2,СубконтоКтНУ3,СпособРаспределенияЗатрат,ОтражениеВУСН,ПериодДействияНачало, ПериодДействияКонец, Сторно,ПодразделениеДт,ПодразделениеКт,ВидНачисленийОплатыТрудаПоСтатье255НК"
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции объекта

Процедура АвтозаполнениеПроводок(ДокументОбъект, ВыборкаПоШапкеДокумента = Неопределено, ФормироватьДвижения = Истина) Экспорт

	Если ДокументОбъект.ПериодРегистрации < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		АвтозаполнениеПроводок2009(ДокументОбъект, ВыборкаПоШапкеДокумента, ФормироватьДвижения)
	ИначеЕсли ДокументОбъект.ПериодРегистрации < ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования() Тогда
		АвтозаполнениеПроводок2010(ДокументОбъект, ВыборкаПоШапкеДокумента, ФормироватьДвижения)	
	Иначе 
		// В этой конфигурации эти действия не выполняются
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДополнительныеПроверкиСтрокиНачислений(ДокументОбъект,ВыборкаПоСтрокамДокумента,Отказ, Заголовок, СтрокаНачалаСообщенияОбОшибке) Экспорт 

	// В этой конфигурации дополнительные действия не выполняются

КонецПроцедуры

Процедура ВыполнитьДополнительныеПроверкиДокумента(ВыборкаПоШапкеДокумента,Отказ, Заголовок) Экспорт 

	// Проверка данных для переходного периода
	Если ВыборкаПоШапкеДокумента.ПерерассчитываемыйДокумент.Пустая() 
		И ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) 
		И ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания)
		И ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности) Тогда
		
		мДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
		Если ВыборкаПоШапкеДокумента.ДатаНачалаСобытия < мДатаЗакона255ФЗ И ВыборкаПоШапкеДокумента.ДатаОкончания >= мДатаЗакона255ФЗ И ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
			Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПричинаНетрудоспособностиПереходногоПериода) Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке("Не указана причина нетрудоспособности для переходного периода!", Отказ, Заголовок);
			ИначеЕсли ВыборкаПоШапкеДокумента.ПричинаНетрудоспособностиПереходногоПериода = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком И НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СлучайУходаЗаБольнымРебенкомПереходногоПериода) Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке("Не указан случай ухода за ребенком для переходного периода!", Отказ, Заголовок);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПроцентОплатыПереходногоПериода) Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке("Не указан процент оплаты для переходного периода!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
    КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПрочиеДвиженияДокумента(ДокументОбъект, ВыборкаПоШапкеДокумента, Отказ, Заголовок, ВыборкаПоНачислениям = Неопределено) Экспорт 

	мДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
	Если НЕ Отказ И ВыборкаПоНачислениям <> Неопределено Тогда
		ВыборкаПоНачислениям.Сбросить();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			НачислениеПоБольничномуЛистуДополнительный.ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ДокументОбъект, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
		КонецЦикла;
	КонецЕсли;
	
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.СформироватьДоходыПоКодамНДФЛ(ДокументОбъект.Начисления, ВыборкаПоШапкеДокумента, ДокументОбъект.Движения.НДФЛСведенияОДоходах, ВыборкаПоШапкеДокумента.ДатаВыплатыДохода);
	
	УпрощенныйУчетНДФЛ = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, "УпрощенныйУчетНДФЛ");
	Для каждого СтрокаТЧ Из ДокументОбъект.НДФЛ Цикл
		ПроведениеРасчетов.ДобавитьСтрокиИсчисленногоУдержанногоНДФЛ(СтрокаТЧ, ВыборкаПоШапкеДокумента, Истина, ДокументОбъект.Движения.НДФЛРасчетыСБюджетом, УпрощенныйУчетНДФЛ) 
	КонецЦикла;
	
	ВсегоНДФЛ = ДокументОбъект.НДФЛ.Итог("Налог") - ДокументОбъект.НДФЛ.Итог("ЗачтеноАвансовыхПлатежей");
	Если ВсегоНДФЛ <> 0 Тогда
		Движение = ДокументОбъект.Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период					= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.Организация			= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.ПериодВзаиморасчетов	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
		
		// Ресурсы
		Движение.СуммаВзаиморасчетов	= -ВсегоНДФЛ;
	КонецЕсли;
		
	Если ВыборкаПоШапкеДокумента.ОтражатьВУчетеЭтимДокументом Тогда
		
		// получим структуру с параметрами определяющими необходимость проведения дополнительных проверок строк
		// и заполнения строк отражения в учете
		СтруктураПараметровПеременныхВеденияУчета = ОтражениеЗарплатыВРеглУчетеДополнительный.ПолучитьСтруктураПараметровПеременныхВеденияУчета(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ВыборкаПоШапкеДокумента.ПериодРегистрации);
		ПроводитьДополнительныеПроверки = СтруктураПараметровПеременныхВеденияУчета.ЗаполнятьДанныеНУ и СтруктураПараметровПеременныхВеденияУчета.ЗаполнятьСчетаНУ;
		
		ВыборкаПоОтражениеВУчете = НачислениеПоБольничномуЛистуДополнительный.СформироватьЗапросПоОтражениеВУчете(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоОтражениеВУчете.Следующий() Цикл
			
			// проверим очередную строку табличной части
			НачислениеПоБольничномуЛистуДополнительный.ПроверитьЗаполнениеСтрокиОтраженияВУчете(ВыборкаПоОтражениеВУчете, Отказ, ПроводитьДополнительныеПроверки, Заголовок);
			
			Если НЕ Отказ Тогда
				НачислениеПоБольничномуЛистуДополнительный.ДобавитьСтрокуОтраженияВУчете(ДокументОбъект, ВыборкаПоШапкеДокумента, ВыборкаПоОтражениеВУчете, СтруктураПараметровПеременныхВеденияУчета);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			
			ТаблицаДвижений = ДокументОбъект.Движения.ЕСНОсновныеНачисления.Выгрузить();
			// Свернем таблицу, в ней могут быть дубли строк из-за доли больничного за счет работодателя
			ТаблицаДвижений.Свернуть("ВидРасчета,ВидУчетаВремени,ГрафикРаботы,Организация,ОбособленноеПодразделение,Сотрудник,ФизЛицо,КодДоходаЕСН,ОблагаетсяЕНВД,ПериодДействия,ПериодДействияНачало,ПериодДействияКонец,Сторно,ДокументОснование,ПериодРегистрации","Результат");
			ДокументОбъект.Движения.ЕСНОсновныеНачисления.Загрузить(ТаблицаДвижений);
			
			Если ВыборкаПоШапкеДокумента.ПериодРегистрации < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
				ТаблицаДвижений.Свернуть("Организация,ФизЛицо,КодДоходаЕСН,ОблагаетсяЕНВД,ОбособленноеПодразделение,ПериодРегистрации","Результат");
				ТаблицаДвижений.Колонки.ПериодРегистрации.Имя = "Период";
				ДокументОбъект.Движения.ЕСНСведенияОДоходах.Загрузить(ТаблицаДвижений);
			Иначе
				ТаблицаДвижений.Свернуть("ВидРасчета,Организация,ФизЛицо,КодДоходаЕСН,ОблагаетсяЕНВД,ОбособленноеПодразделение,ПериодРегистрации","Результат");
				ТаблицаДвижений.Колонки.ПериодРегистрации.Имя = "Период";
				ТаблицаДвижений.Колонки.КодДоходаЕСН.Имя = "ВидДохода";
				ДокументОбъект.Движения.СтраховыеВзносыСведенияОДоходах.Загрузить(ТаблицаДвижений);
			КонецЕсли;
			
			Если НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации) >= НачалоМесяца(мДатаЗакона255ФЗ) Тогда
				
				ТаблицаДвижений = ДокументОбъект.Движения.ЕСНОсновныеНачисления.Выгрузить();
				
				// временно добавим сторно-записи для формирования правильного ФПД записей по пособиям
				ТаблицаСторно = ДокументОбъект.Движения.ЕСНОсновныеНачисления.ПолучитьДополнение();
				Для каждого СтрокаТаблицы Из ТаблицаСторно Цикл
					Движение = ДокументОбъект.Движения.ЕСНОсновныеНачисления.Добавить();
					ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
					Движение.Сторно = Истина;
					Движение.ПериодДействияНачало = СтрокаТаблицы.ПериодДействияНачалоСторно;
					Движение.ПериодДействияКонец  = СтрокаТаблицы.ПериодДействияКонецСторно;
					Движение.ПериодРегистрации    = СтрокаТаблицы.ПериодРегистрацииСторно;
				КонецЦикла;
				ДокументОбъект.Движения.ЕСНОсновныеНачисления.Записать();
				
				Выборка = НачислениеПоБольничномуЛистуДополнительный.СформироватьЗапросПоПособияСоциальномуСтрахованию(ВыборкаПоШапкеДокумента).Выбрать();
				Пока Выборка.Следующий() Цикл 
					Движение = ДокументОбъект.Движения.ПособияСоциальномуСтрахованию.Добавить();
					ЗаполнитьЗначенияСвойств(Движение,Выборка);
					Движение.ДатаСтраховогоСлучая = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
					Если Движение.СуммаСверхНорм <> 0 Тогда
						Движение.ВыплатаЗаСчетФедеральногоБюджета = ВыборкаПоШапкеДокумента.ВыплатаЗаСчетФедеральногоБюджета;
					КонецЕсли;
				КонецЦикла;
				// избавимся от временных строк учета
				ДокументОбъект.Движения.ЕСНОсновныеНачисления.Загрузить(ТаблицаДвижений);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеДействияПередЗаписью(ДокументОбъект) Экспорт

	мДатаЗакона180ФЗ = '20060101';	// 1 января 2006 года
	мДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
	ДатаНачалаСобытия					= ДокументОбъект.ДатаНачалаСобытия;
	ДатаОкончания						= ДокументОбъект.ДатаОкончания;
	ПричинаНетрудоспособности			= ДокументОбъект.ПричинаНетрудоспособности;
	
	Если Не (ДатаНачалаСобытия < мДатаЗакона255ФЗ И ДатаОкончания >= мДатаЗакона255ФЗ И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве) Тогда
		ДокументОбъект.ПроцентОплатыПереходногоПериода = 0;
		ДокументОбъект.ПричинаНетрудоспособностиПереходногоПериода = "";
		ДокументОбъект.СлучайУходаЗаБольнымРебенкомПереходногоПериода = "";
		ДокументОбъект.ОграничениеПособияПереходногоПериода = "";
	КонецЕсли;
	
	ЗаполнитьМестоРаботы = ДатаНачалаСобытия < мДатаЗакона180ФЗ;
	Если ЗаполнитьМестоРаботы Тогда
		Для каждого СтрокаТЧ Из ДокументОбъект.РасчетСреднего Цикл
			СтрокаТЧ.Сотрудник = ДокументОбъект.Сотрудник
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПереписатьПрочиеДвиженияПриПерерасчете(ДокументОбъект, ВыборкаПоШапкеДокумента) Экспорт 

	ДокументОбъект.Движения.НДФЛСведенияОДоходах.Очистить();
	ДокументОбъект.Движения.ВзаиморасчетыСРаботникамиОрганизаций.Очистить();
	ДокументОбъект.Движения.БУОсновныеНачисления.Очистить();
	ДокументОбъект.Движения.ЕСНОсновныеНачисления.Очистить();
	ДокументОбъект.Движения.ЕСНСведенияОДоходах.Очистить();
	ДокументОбъект.Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Очистить();
	ДокументОбъект.Движения.НДФЛРасчетыСБюджетом.Очистить();
	ДокументОбъект.Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Очистить();
	ДокументОбъект.Движения.НДФЛИмущественныеВычетыФизлиц.Очистить();
	ДокументОбъект.Движения.НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Очистить();
	
	ПроведениеРасчетов.СформироватьПредоставленныеВычетыПоНДФЛ(ДокументОбъект, ВыборкаПоШапкеДокумента, Истина, Ложь, "");
	ПроведениеРасчетов.СформироватьЗачтенныеАвансыПоНДФЛ(ДокументОбъект, ВыборкаПоШапкеДокумента, Истина);
		
	ВыборкаПоНачислениям = ДокументОбъект.СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВУчетеЭтимДокументом Тогда
		
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			// на основе данных табличной части "начисления" полностью перепишем регистры накопления НДФЛСведенияОДоходах и ВзаиморасчетыСРаботникамиОрганизаций
			НачислениеПоБольничномуЛистуДополнительный.ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ДокументОбъект, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
		КонецЦикла;
	
		АвтозаполнениеПроводок(ДокументОбъект, ВыборкаПоШапкеДокумента,Ложь);
		ДокументОбъект.Записать();
		СтруктураПараметровПеременныхВеденияУчета = ОтражениеЗарплатыВРеглУчетеДополнительный.ПолучитьСтруктураПараметровПеременныхВеденияУчета(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ВыборкаПоШапкеДокумента.ПериодРегистрации);
		ВыборкаПоОтражениеВУчете = НачислениеПоБольничномуЛистуДополнительный.СформироватьЗапросПоОтражениеВУчете(ДокументОбъект).Выбрать();
		Пока ВыборкаПоОтражениеВУчете.Следующий() Цикл
			НачислениеПоБольничномуЛистуДополнительный.ДобавитьСтрокуОтраженияВУчете(ДокументОбъект, ВыборкаПоШапкеДокумента, ВыборкаПоОтражениеВУчете, СтруктураПараметровПеременныхВеденияУчета);
		КонецЦикла;
	Иначе 	
		ВыполнитьПрочиеДвиженияДокумента(ДокументОбъект, ВыборкаПоШапкеДокумента, Ложь, "", ВыборкаПоНачислениям);
	КонецЕсли;
	
	// НДФЛ к перечислению в бюджет
	УпрощенныйУчетНДФЛ = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, "УпрощенныйУчетНДФЛ");
	Если УпрощенныйУчетНДФЛ И ДокументОбъект.Движения.НДФЛРасчетыСБюджетом.Количество() > 0 Тогда
		ДокументОбъект.Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Загрузить(ПроведениеРасчетов.РасчетыНалоговогоАгентаПоУдержанномуНДФЛ(ДокументОбъект.Движения.НДФЛРасчетыСБюджетом.Выгрузить()))
	КонецЕсли;
	
	// записываем обновленные движения
	Для Каждого Набор Из ДокументОбъект.Движения Цикл
		ТипНабораЗаписей = ТипЗнч(Набор);
		Если ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.НДФЛСведенияОДоходах") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.ВзаиморасчетыСРаботникамиОрганизаций") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.ЕСНСведенияОДоходах") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.НДФЛРасчетыСБюджетом") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.АвансовыеПлатежиИностранцевПоНДФЛ") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.НДФЛПредоставленныеСтандартныеВычетыФизЛиц") 
			Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.НДФЛИмущественныеВычетыФизлиц") 
			Или ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.БУОсновныеНачисления") 
			Или ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ЕСНОсновныеНачисления") Тогда
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДополнительныеПараметрыЗапросаГрафиковРаботы(Запрос, ВыборкаПоШапкеДокумента) Экспорт

	мДатаЗакона180ФЗ = '20060101';	// 1 января 2006 года
	мДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
	
	Запрос.УстановитьПараметр("ПоВсемМестамРаботы",	ВыборкаПоШапкеДокумента.ДатаНачалаСобытия >= мДатаЗакона180ФЗ);
	Запрос.УстановитьПараметр("РасчетПоКалендарнымДням",ВыборкаПоШапкеДокумента.ДатаНачалаСобытия >= мДатаЗакона255ФЗ);

КонецПроцедуры

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры:
//	Выборка				- спозиционированная на определеной строке выборка
//						  из результата запроса к ТЧ документа
// Возвращаемое значение:
//	Нет.
//
Процедура УточнитьВариантАлгоритмаРасчетаПриНарушенииРежима(ВыборкаПоШапкеДокумента, Движение) Экспорт 
	
	ДатаНачалаСобытия			= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
	ПричинаНетрудоспособности	= ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности;
	ДатаНачала					= ВыборкаПоШапкеДокумента.ДатаНачала;
	ДатаОкончания				= ВыборкаПоШапкеДокумента.ДатаОкончания;
	
	мЭтоПереходныйПериодПоЗакону255ФЗ = НачислениеПоБольничномуЛистуДополнительный.ОпределитьПереходныйПериод(ДатаНачалаСобытия, ДатаНачала, ДатаОкончания, ПричинаНетрудоспособности);
	
	Если мЭтоПереходныйПериодПоЗакону255ФЗ Тогда
		Движение.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениемВРазмереММОТ;
	Иначе
		Движение.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТбезРК;
	КонецЕсли;

КонецПроцедуры // УточнитьВариантАлгоритмаРасчетаПриНарушенииРежима()

Процедура УточнитьПроцентОплаты(Движение, ВыборкаПоШапкеДокумента, ТекущаяДатаНачалаОплаты, ИнтервалОплаты) Экспорт 
	
	ДатаНачалаСобытия			= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
	ПричинаНетрудоспособности	= ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности;
	ДатаНачала					= ВыборкаПоШапкеДокумента.ДатаНачала;
	ДатаОкончания				= ВыборкаПоШапкеДокумента.ДатаОкончания;
	
	мДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
	мЭтоПереходныйПериодПоЗакону255ФЗ = НачислениеПоБольничномуЛистуДополнительный.ОпределитьПереходныйПериод(ДатаНачалаСобытия, ДатаНачала, ДатаОкончания, ПричинаНетрудоспособности);
	
	Если мЭтоПереходныйПериодПоЗакону255ФЗ И НачалоДня(ТекущаяДатаНачалаОплаты) >= мДатаЗакона255ФЗ И ИнтервалОплаты.ПроцентОплаты <> 50 Тогда
		Движение.Показатель1 = Макс(ВыборкаПоШапкеДокумента.ПроцентОплатыПереходногоПериода,ИнтервалОплаты.ПроцентОплаты)
	КонецЕсли;

КонецПроцедуры // УточнитьПроцентОплаты()

Процедура УстановитьДополнительныеПараметрыЗапросаПоНачислениям(Запрос) Экспорт
	
	мДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
	Запрос.УстановитьПараметр("ДатаЗакона255ФЗ", мДатаЗакона255ФЗ);
	Запрос.УстановитьПараметр("ДатаНачалаРеформыСоцСтрахования", ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования());
	
	
КонецПроцедуры

Функция ЗаполнитьТаблицуИнтерваловПоПрочимПричинам(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, ДатаОкончания, ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком, ВидРасчетаОтПричины, ПроцентОплаты) Экспорт
	
	мДлинаСуток		 = 86400;		// в секундах
	
	// в зависимости от причины нетрудоспособности оплачивается разное количество дней; процент оплаты также меняется
	Если ДатаНачалаСобытия < '20050101' и ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаВБыту Тогда
		
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 				  	ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеВБыту, 0);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия + 5 * мДлинаСуток,	ВидРасчетаОтПричины, ПроцентОплаты);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончания + мДлинаСуток,			ВидРасчетаОтПричины, 0);
		
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетДляНеСостоящихВБраке Тогда
		
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 					ВидРасчетаОтПричины, ПроцентОплаты);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия + 10 * мДлинаСуток, ВидРасчетаОтПричины, 50);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия + 14 * мДлинаСуток, ВидРасчетаОтПричины, 0);
		
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетДляСостоящихВБраке Тогда
		
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 					ВидРасчетаОтПричины, ПроцентОплаты);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия +  7 * мДлинаСуток, ВидРасчетаОтПричины, 50);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия + 14 * мДлинаСуток, ВидРасчетаОтПричины, 0);
		
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетДляНеСостоящихВБраке Тогда
		
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 					ВидРасчетаОтПричины, ПроцентОплаты);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия + 10 * мДлинаСуток, ВидРасчетаОтПричины, 50);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончания + мДлинаСуток,			ВидРасчетаОтПричины, 0);
		
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетДляСостоящихВБраке Тогда
		
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия, 				   ВидРасчетаОтПричины, ПроцентОплаты);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаНачалаСобытия + 7 * мДлинаСуток, ВидРасчетаОтПричины, 50);
		ДобавитьСтрокуВТаблицуИнтервалов(ТаблицаИнтерваловОплаты, ДатаОкончания + мДлинаСуток, ВидРасчетаОтПричины, 0);
		
	КонецЕсли;
	
	Возврат ТаблицаИнтерваловОплаты
	
КонецФункции // ЗаполнитьТаблицуИнтервалов()

Функция ДополнитьСтрокуЗаполняемыхРеквизитов(СтрокаРеквизитов) Экспорт

	Возврат СтрокаРеквизитов + ","
			+ "ПособиеОтражаетсяВРеглУчетеТекущимДокументом,"
			+ "ПричинаНетрудоспособностиПереходногоПериода,ПроцентОплатыПереходногоПериода,ОграничениеПособияПереходногоПериода,"
			+ "СлучайУходаЗаБольнымРебенком,СлучайУходаЗаБольнымРебенкомПереходногоПериода";

КонецФункции // ПолучитьСтрокуЗаполняемыхРеквизитов()

Функция ПроверятьМестоРаботы(ВыборкаПоШапкеДокумента) Экспорт

	мДатаЗакона180ФЗ = '20060101';	// 1 января 2006 года
    Возврат ВыборкаПоШапкеДокумента.ДатаНачалаСобытия >= мДатаЗакона180ФЗ
	
КонецФункции // ПроверятьМестоРаботы()

Функция ПолучитьВариантАлгоритмаРасчета(ВыборкаПоШапкеДокумента) Экспорт 

	ДатаНачалаСобытия			= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
	ПричинаНетрудоспособности	= ВыборкаПоШапкеДокумента.ПричинаНетрудоспособности;
	ДатаНачала					= ВыборкаПоШапкеДокумента.ДатаНачала;
	ДатаОкончания				= ВыборкаПоШапкеДокумента.ДатаОкончания;
	ОграничениеПособия			= ВыборкаПоШапкеДокумента.ОграничениеПособия;
	ОграничениеПособияПереходногоПериода= ВыборкаПоШапкеДокумента.ОграничениеПособияПереходногоПериода;
	
	мЭтоПереходныйПериодПоЗакону255ФЗ = НачислениеПоБольничномуЛистуДополнительный.ОпределитьПереходныйПериод(ДатаНачалаСобытия, ДатаНачала, ДатаОкончания, ПричинаНетрудоспособности);
	
	ВариантАлгоритмаРасчета = Неопределено;
	
	Если мЭтоПереходныйПериодПоЗакону255ФЗ Тогда
		Если ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
			Если ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
				ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничениемИВРазмереММОТ;
			ИначеЕсли ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
				ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничением;
			Иначе
				ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОбщимОграничениемИБезОграничений;
			КонецЕсли;
		ИначеЕсли ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
			Если ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
				ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениемВРазмереММОТ;
			ИначеЕсли ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
				ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениямиВРазмереММОТиОбщим;
			Иначе
				ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаСОграничениемВРазмереММОТиБезОграничений;
			КонецЕсли;
		Иначе
			ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПереходногоПериодаБезОграничений;
		КонецЕсли;
	КонецЕсли;

	Возврат ВариантАлгоритмаРасчета
	
КонецФункции // ПолучитьВариантАлгоритмаРасчета()

Функция ПолучитьПолеЗапросаГрафиковРаботы() Экспорт
	Возврат
	"ВЫБОР
	|		КОГДА &РасчетПоКалендарнымДням
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|		КОГДА ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|			КОНЕЦ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени"
КонецФункции

Функция ПолучитьУсловиеЗапросаГрафиковРаботы() Экспорт
	Возврат
	"И (&ПоВсемМестамРаботы
	|							ИЛИ Сотрудники.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы))"
КонецФункции

Функция ПолучитьСтруктуруПечатныхФорм(ДокументОбъект) Экспорт
	
	ДатаНачалаСобытия			= ДокументОбъект.ДатаНачалаСобытия;
	ПричинаНетрудоспособности	= ДокументОбъект.ПричинаНетрудоспособности;
	ДатаНачала					= ДокументОбъект.ДатаНачала;
	ДатаОкончания				= ДокументОбъект.ДатаОкончания;
	Если НачислениеПоБольничномуЛистуДополнительный.ОпределитьПереходныйПериод(ДатаНачалаСобытия, ДатаНачала, ДатаОкончания, ПричинаНетрудоспособности) Тогда
		// это переходный период	
		Возврат Новый Структура("РасчетСреднегоЗаработка, РасчетСреднегоЗаработкаПП, ОборотЛисткаНетрудоспособности", "Расчет среднего заработка", "Расчет среднего заработка переходного периода 2007 года", "Оборот листка нетрудоспособности переходного периода 2007 года");
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция ПолучитьПолеЗапросаПоНачислениям() Экспорт
	Возврат
	"ВЫБОР
	|		КОГДА &ДатаНачалаСобытия >= &ДатаЗакона255ФЗ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|		КОГДА ВЫБОР
	|				КОГДА РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|						И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|				ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|			КОНЕЦ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени"
КонецФункции

Функция ПолучитьДополнительноеПолеЗапросаПоНачислениям() Экспорт
	
	Возврат
	"	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета = СтрокиНачисления.Ссылка.ВидРасчетаЗаСчетРаботодателя
	|			ТОГДА ВЫБОР
	|					КОГДА СтрокиНачисления.Сторно
	|							И (НЕ СтрокиНачисления.СторнируемыйДокумент.ЯвляетсяПродолжениемБолезни) И СтрокиНачисления.Ссылка.ЯвляетсяПродолжениемБолезни
	|							И СтрокиНачисления.СторнируемыйДокумент.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйЗаСчетРаботодателяНовыйСтраховойСлучай)
	|					КОГДА (НЕ СтрокиНачисления.Ссылка.ЯвляетсяПродолжениемБолезни)
	|							И СтрокиНачисления.Ссылка.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйЗаСчетРаботодателяНовыйСтраховойСлучай)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйЗаСчетРаботодателя)
	|				КОНЕЦ
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка)
	|		КОГДА СтрокиНачисления.Ссылка.ПериодРегистрации < &ДатаНачалаРеформыСоцСтрахования
	|				И СтрокиНачисления.Ссылка.ПособиеОтражаетсяВРеглУчетеТекущимДокументом
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.НеОбрабатывать)
	|		КОГДА СтрокиНачисления.Ссылка.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
	|			ТОГДА ВЫБОР
	|					КОГДА СтрокиНачисления.Сторно
	|							И (НЕ СтрокиНачисления.СторнируемыйДокумент.ЯвляетсяПродолжениемБолезни) И СтрокиНачисления.Ссылка.ЯвляетсяПродолжениемБолезни
	|							И СтрокиНачисления.СторнируемыйДокумент.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенкомНовыйСтраховойСлучай)
	|					КОГДА (НЕ СтрокиНачисления.Ссылка.ЯвляетсяПродолжениемБолезни)
	|							И СтрокиНачисления.Ссылка.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенкомНовыйСтраховойСлучай)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком)
	|				КОНЕЦ
	|		КОГДА СтрокиНачисления.Ссылка.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве)
	|			ТОГДА ВЫБОР
	|					КОГДА СтрокиНачисления.Сторно
	|							И (НЕ СтрокиНачисления.СторнируемыйДокумент.ЯвляетсяПродолжениемБолезни) И СтрокиНачисления.Ссылка.ЯвляетсяПродолжениемБолезни
	|							И СтрокиНачисления.СторнируемыйДокумент.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводствеНовыйСтраховойСлучай)
	|					КОГДА (НЕ СтрокиНачисления.Ссылка.ЯвляетсяПродолжениемБолезни)
	|							И СтрокиНачисления.Ссылка.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводствеНовыйСтраховойСлучай)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводстве)
	|				КОНЕЦ
	|		КОГДА СтрокиНачисления.Ссылка.ПричинаНетрудоспособности В (ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ТравмаВБыту), ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ОбщееЗаболевание))
	|			ТОГДА ВЫБОР
	|					КОГДА СтрокиНачисления.Сторно
	|							И (НЕ СтрокиНачисления.СторнируемыйДокумент.ЯвляетсяПродолжениемБолезни) И СтрокиНачисления.Ссылка.ЯвляетсяПродолжениемБолезни
	|							И СтрокиНачисления.СторнируемыйДокумент.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболеваниеНовыйСтраховойСлучай)
	|					КОГДА СтрокиНачисления.Ссылка.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА (НЕ СтрокиНачисления.Ссылка.ЯвляетсяПродолжениемБолезни) ИЛИ (ДОБАВИТЬКДАТЕ(СтрокиНачисления.Ссылка.ДатаНачалаСобытия, ДЕНЬ, СтрокиНачисления.Ссылка.ДнейОплатыРаботодателем) >= СтрокиНачисления.Ссылка.ДатаНачалаОплаты)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболеваниеНовыйСтраховойСлучай) 
	|								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболевание)
	|							КОНЕЦ
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболевание)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СтрокиНачисления.Сторно
	|						И (НЕ СтрокиНачисления.СторнируемыйДокумент.ЯвляетсяПродолжениемБолезни) И СтрокиНачисления.Ссылка.ЯвляетсяПродолжениемБолезни
	|						И СтрокиНачисления.СторнируемыйДокумент.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйПрочийНовыйСтраховойСлучай)
	|				КОГДА (НЕ СтрокиНачисления.Ссылка.ЯвляетсяПродолжениемБолезни)
	|						И СтрокиНачисления.Ссылка.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйПрочийНовыйСтраховойСлучай)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйПрочий)
	|			КОНЕЦ
	|	КОНЕЦ КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,";
	
КонецФункции

Функция ПолучитьПрочиеПоляЗапросаПоСреднему() Экспорт
	Возврат
	"СтрокаРасчетСреднего.ОтработаноПоПятидневке,
	|	1 КАК КоэффициентИндексации,
	|	СтрокаРасчетСреднего.НормаПоПятидневке,
	|	СтрокаРасчетСреднего.ОтработаноЧасов,
	|	СтрокаРасчетСреднего.ЧислоМесяцев"
КонецФункции

Функция ПолучитьТекстДополнительнойТаблицыДокумента(Запрос, СобиратьДополнительныеДанные) Экспорт
	
	// временная таблица ВТОтражениеВУчете содержит данные только в том случае, 
	//когда мы пересчитываем пособие или "переотражаем" его в учете
	
	Если СобиратьДополнительныеДанные Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокумента.Организация
		|ИЗ
		|	ВТДанныеДокумента КАК ДанныеДокумента";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Запрос.УстановитьПараметр("Организация", Выборка.Организация);
		Иначе 
			Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
		|ИЗ
		|	ВТДанныеОСотруднике КАК РаботникиОрганизацииСрезПоследних";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Запрос.УстановитьПараметр("ПодразделениеОрганизации", Выборка.ПодразделениеОрганизации);
		Иначе 
			Запрос.УстановитьПараметр("ПодразделениеОрганизации", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		КонецЕсли;
		
		Возврат
		"ВЫБРАТЬ
		|	СуществующиеДвиженияЕНВД.ПодпадаетПодЕНВД КАК ПодпадаетПодЕНВД
		|ПОМЕСТИТЬ ВТСуществующиеДвиженияЕНВД
		|ИЗ
		|	РегистрСведений.ПроцентДеятельностиЕНВДСотрудников КАК СуществующиеДвиженияЕНВД
		|ГДЕ
		|	СуществующиеДвиженияЕНВД.ПериодРегистрации = НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
		|	И СуществующиеДвиженияЕНВД.Сотрудник = &Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучете,
		|	УчетПодразделенияОрганизацииСрезПоследних.ПодпадаетПодЕНВД,
		|	УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя
		|ПОМЕСТИТЬ ВТУчетПодразделенияОрганизации
		|ИЗ
		|	РегистрСведений.УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.СрезПоследних(&ДатаНачалаСобытия, ПодразделениеОрганизации = &ПодразделениеОрганизации) КАК УчетПодразделенияОрганизацииСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучете,
		|	УчетОсновногоЗаработкаСрезПоследних.ПодпадаетПодЕНВД,
		|	УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя
		|ПОМЕСТИТЬ ВТУчетОсновногоЗаработка
		|ИЗ
		|	РегистрСведений.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК УчетОсновногоЗаработкаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетОрганизацииСрезПоследних.СпособОтраженияВБухучете,
		|	УчетОрганизацииСрезПоследних.ПодпадаетПодЕНВД,
		|	УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя
		|ПОМЕСТИТЬ ВТУчетЗаработкаОрганизации
		|ИЗ
		|	РегистрСведений.УчетОсновногоЗаработкаОрганизации.СрезПоследних(&ДатаНачалаСобытия, Организация = &Организация) КАК УчетОрганизацииСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НачислениеПоБольничномуЛисту.ПособиеОтражаетсяВРеглУчетеТекущимДокументом
		|			ТОГДА НачислениеПоБольничномуЛисту.СтратегияОтраженияВУчете
		|		ИНАЧЕ ПараметрыВидаРасчета.СтратегияОтраженияВУчете
		|	КОНЕЦ КАК СтратегияОтраженияВУчете,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА НачислениеПоБольничномуЛисту.ПособиеОтражаетсяВРеглУчетеТекущимДокументом
		|					ТОГДА НачислениеПоБольничномуЛисту.СтратегияОтраженияВУчете
		|				ИНАЧЕ ПараметрыВидаРасчета.СтратегияОтраженияВУчете
		|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоВидуРасчета)
		|			ТОГДА НачислениеПоБольничномуЛисту.ПодпадаетПодЕНВД
		|		КОГДА ВЫБОР
		|				КОГДА НачислениеПоБольничномуЛисту.ПособиеОтражаетсяВРеглУчетеТекущимДокументом
		|					ТОГДА НачислениеПоБольничномуЛисту.СтратегияОтраженияВУчете
		|				ИНАЧЕ ПараметрыВидаРасчета.СтратегияОтраженияВУчете
		|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоНаНачалоСобытия)
		|			ТОГДА ЕСТЬNULL(СуществующиеДвиженияЕНВД.ПодпадаетПодЕНВД, ВЫБОР
		|						КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|							ТОГДА ВЫБОР
		|									КОГДА УчетОсновногоЗаработкаСрезПоследних.ПодпадаетПодЕНВД
		|										ТОГДА 100
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|							ТОГДА ВЫБОР
		|									КОГДА УчетПодразделенияОрганизацииСрезПоследних.ПодпадаетПодЕНВД
		|										ТОГДА 100
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|							ТОГДА ВЫБОР
		|									КОГДА УчетОрганизацииСрезПоследних.ПодпадаетПодЕНВД
		|										ТОГДА 100
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 0
		|					КОНЕЦ)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентЕНВД,
		|	ВЫБОР
		|		КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УказаноОтражениеВУчетеДляРаботодателя,
		|	ВЫБОР
		|		КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка) 
		|			ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СпособРаспределенияЗатрат
		|		КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка) 
		|			ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СпособРаспределенияЗатрат
		|		КОГДА СпособыОтраженияЗарплатыВРеглУчете.ОтражениеВУСН <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СпособРаспределенияЗатрат
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СпособРаспределенияЗатрат,
		|	ВЫБОР
		|		КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка) 
		|			ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.ОтражениеВУСН
		|		КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка) 
		|			ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.ОтражениеВУСН
		|		КОГДА СпособыОтраженияЗарплатыВРеглУчете.ОтражениеВУСН <> ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка)
		|			ТОГДА СпособыОтраженияЗарплатыВРеглУчете.ОтражениеВУСН
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		// Используем наименование поля "ОтражениеВУСН" по имени реквизита табличной части "ОтражениеВУчете" документа.
		|	КОНЕЦ КАК ОтражениеВУСН,
		|	ВЫБОР
		|		КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СчетДт
		|		КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СчетДт
		|		КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СчетДт
		|		КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДт
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СчетДт,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт1
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт1
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт1
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт1
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт1
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт1
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ
		|	КОНЕЦ КАК СубконтоДт1,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт2
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт2
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт2
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт2
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт2
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт2
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ
		|	КОНЕЦ КАК СубконтоДт2,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт3
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт3
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт3
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт3
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт3
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДт3
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ
		|	КОНЕЦ КАК СубконтоДт3,
		|	ВЫБОР
		|		КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СчетКт
		|		КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СчетКт
		|		КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СчетКт
		|		КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетКт
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СчетКт,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоКт1
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоКт1
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоКт1
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт1
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ТОГДА НачислениеПоБольничномуЛисту.Сотрудник.Физлицо
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоКт1
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоКт1
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоКт1
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт1
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ
		|	КОНЕЦ КАК СубконтоКт1,
		|	ВЫБОР
		|		КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СчетДтНУ
		|		КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СчетДтНУ
		|		КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СчетДтНУ
		|		КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ <> ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|			ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СчетДтНУ,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ1
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ1
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ1
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ <> ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ1
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ1
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ1
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ1
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ <> ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ1
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ
		|	КОНЕЦ КАК СубконтоДтНУ1,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ2
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ2
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ2
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ <> ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ2
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ2
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ2
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ2
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ <> ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ2
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ
		|	КОНЕЦ КАК СубконтоДтНУ2,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ3
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ3
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ3
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ <> ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ3
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ3
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ3
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоДтНУ3
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетДтНУ <> ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоДтНУ3
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ
		|	КОНЕЦ КАК СубконтоДтНУ3,
		|	ВЫБОР
		|		КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СчетКтНУ
		|		КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СчетКтНУ
		|		КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|			ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СчетКтНУ
		|		КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетКтНУ <> ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|			ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетКтНУ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СчетКтНУ,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоКтНУ1
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоКтНУ1
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоКтНУ1
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетКтНУ <> ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоКтНУ1
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ТОГДА НачислениеПоБольничномуЛисту.Сотрудник.Физлицо
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОсновногоЗаработкаСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоКтНУ1
		|				КОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетПодразделенияОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоКтНУ1
		|				КОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка)
		|					ТОГДА УчетОрганизацииСрезПоследних.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.СубконтоКтНУ1
		|				КОГДА СпособыОтраженияЗарплатыВРеглУчете.СчетКтНУ <> ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПустаяСсылка)
		|					ТОГДА СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт1
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ
		|	КОНЕЦ КАК СубконтоКтНУ1
		|ПОМЕСТИТЬ ВТДополнительнаяТаблица
		|ИЗ
		|	ВТДанныеДокумента КАК НачислениеПоБольничномуЛисту
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтраженияЗарплатыВРеглУчете
		|		ПО (СпособыОтраженияЗарплатыВРеглУчете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПараметрыВидаРасчета
		|		ПО НачислениеПоБольничномуЛисту.ВидРасчета = ПараметрыВидаРасчета.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСотруднике КАК РаботникиОрганизацииСрезПоследних
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетПодразделенияОрганизации КАК УчетПодразделенияОрганизацииСрезПоследних
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетОсновногоЗаработка КАК УчетОсновногоЗаработкаСрезПоследних
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетЗаработкаОрганизации КАК УчетОрганизацииСрезПоследних
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуществующиеДвиженияЕНВД КАК СуществующиеДвиженияЕНВД
		|		ПО (ИСТИНА)";
		
	Иначе
		
		Возврат
		"ВЫБРАТЬ
		|	"""" КАК СтратегияОтраженияВУчете,
		|	0 КАК ПроцентЕНВД,
		|	ЛОЖЬ КАК УказаноОтражениеВУчетеДляРаботодателя,
		|	"""" КАК СпособРаспределенияЗатрат,
		|	"""" КАК ОтражениеВУСН,
		|	"""" КАК СчетДт,
		|	"""" КАК СубконтоДт1,
		|	"""" КАК СубконтоДт2,
		|	"""" КАК СубконтоДт3,
		|	"""" КАК СчетКт,
		|	"""" КАК СубконтоКт1,
		|	"""" КАК СчетДтНУ,
		|	"""" КАК СубконтоДтНУ1,
		|	"""" КАК СубконтоДтНУ2,
		|	"""" КАК СубконтоДтНУ3,
		|	"""" КАК СчетКтНУ,
		|	"""" КАК СубконтоКтНУ1
		|ПОМЕСТИТЬ ВТДополнительнаяТаблица";
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДополнительныеПоляЗапросаДанныеДокумента() Экспорт
	Возврат
	"НачислениеПоБольничномуЛисту.ПособиеОтражаетсяВРеглУчетеТекущимДокументом,
	|	НачислениеПоБольничномуЛисту.ПричинаНетрудоспособностиПереходногоПериода,
	|	НачислениеПоБольничномуЛисту.ПроцентОплатыПереходногоПериода,
	|	НачислениеПоБольничномуЛисту.ОграничениеПособияПереходногоПериода,
	|	НачислениеПоБольничномуЛисту.СлучайУходаЗаБольнымРебенкомПереходногоПериода,"
КонецФункции

Функция ПолучитьДополнительныеПоляЗапросаПоДокументу() Экспорт
	Возврат
	"	ВЫБОР
	|		КОГДА НачислениеПоБольничномуЛисту.ПериодРегистрации >= &ДатаНачалаРеформыСоцСтрахования
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ НачислениеПоБольничномуЛисту.ПособиеОтражаетсяВРеглУчетеТекущимДокументом
	|	КОНЕЦ КАК ОтражатьВУчетеЭтимДокументом,
	|	НачислениеПоБольничномуЛисту.ОграничениеПособияПереходногоПериода,
	|	НачислениеПоБольничномуЛисту.ПроцентОплатыПереходногоПериода,
	|	НачислениеПоБольничномуЛисту.ПричинаНетрудоспособностиПереходногоПериода,
	|	НачислениеПоБольничномуЛисту.СлучайУходаЗаБольнымРебенкомПереходногоПериода,
	|	ДополнительнаяТаблица.СтратегияОтраженияВУчете,
	|	ДополнительнаяТаблица.ПроцентЕНВД,
	|	ДополнительнаяТаблица.УказаноОтражениеВУчетеДляРаботодателя,
	|	ДополнительнаяТаблица.СпособРаспределенияЗатрат,
	|	ДополнительнаяТаблица.ОтражениеВУСН,
	|	ДополнительнаяТаблица.СчетДт,
	|	ДополнительнаяТаблица.СубконтоДт1,
	|	ДополнительнаяТаблица.СубконтоДт2,
	|	ДополнительнаяТаблица.СубконтоДт3,
	|	ДополнительнаяТаблица.СчетКт,
	|	ДополнительнаяТаблица.СубконтоКт1,
	|	ДополнительнаяТаблица.СчетДтНУ,
	|	ДополнительнаяТаблица.СубконтоДтНУ1,
	|	ДополнительнаяТаблица.СубконтоДтНУ2,
	|	ДополнительнаяТаблица.СубконтоДтНУ3,
	|	ДополнительнаяТаблица.СчетКтНУ,
	|	ДополнительнаяТаблица.СубконтоКтНУ1"
КонецФункции

Функция ПолучитьПолеЗапросаПоДокументу() Экспорт
	Возврат
	"ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист = ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)
	|					ТОГДА НачислениеПоБольничномуЛисту.ДатаНачала
	|				ИНАЧЕ НачислениеПоБольничномуЛисту.ПервичныйБольничныйЛист.ДатаНачала
	|			КОНЕЦ >= &ДатаЗакона255ФЗ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|		КОГДА РаботникиОрганизацииСрезПоследних.СуммированныйУчетРабочегоВремени
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени"
КонецФункции

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, ДокументОбъект) Экспорт
	
	ДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
	
	ДатаНачалаСобытия					= ДокументОбъект.ДатаНачалаСобытия;
	Ссылка								= ДокументОбъект.Ссылка;
	Организация							= ДокументОбъект.Организация;
	Сотрудник							= ДокументОбъект.Сотрудник;
	ПериодРегистрации					= ДокументОбъект.ПериодРегистрации;
	ПричинаНетрудоспособности			= ДокументОбъект.ПричинаНетрудоспособности;
	ВидРасчета							= ДокументОбъект.ВидРасчета;
	ДатаНачала							= ДокументОбъект.ДатаНачала;
	ДатаНачалаОплаты					= ДокументОбъект.ДатаНачалаОплаты;
	ДатаОкончания						= ДокументОбъект.ДатаОкончания;
	ДатаНарушенияРежима					= ДокументОбъект.ДатаНарушенияРежима;
	ПроцентОплаты						= ДокументОбъект.ПроцентОплаты;
	ПроцентОплатыПереходногоПериода		= ДокументОбъект.ПроцентОплатыПереходногоПериода;
	ОграничениеПособия					= ДокументОбъект.ОграничениеПособия;
	ОграничениеПособияПереходногоПериода= ДокументОбъект.ОграничениеПособияПереходногоПериода;
	
	Если ИмяМакета = "РасчетСреднегоЗаработка" Тогда
		Если ДатаНачалаСобытия < ДатаЗакона255ФЗ И ДатаОкончания >= ДатаЗакона255ФЗ И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
			ПериодРасчетаСреднегоЗаработка = ?(ВидРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору,ВидРасчета.ПериодРасчетаСреднегоЗаработка,12);
			// это переходный период 2007 года: здесь показываем заработок "по старому"	
			СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
			СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
			СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
			СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ;
			ТабДокумент = ФормированиеПечатныхФормЗК.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачалаСобытия, ПериодРасчетаСреднегоЗаработка, "с " + Формат(ДатаНачала,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания,"ДФ=dd.MM.yyyy"), Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС, ?(ДатаНачалаСобытия < ДатаЗакона255ФЗ, Неопределено, Ложь),СписокСоставляющихСреднегоЗаработка);
			Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ДокументОбъект, ДокументОбъект.Метаданные().Синоним) + " (расчет среднего заработка)");
		КонецЕсли;
	ИначеЕсли ИмяМакета = "ОборотЛисткаНетрудоспособности" Тогда                                                                                                         
		Если ДатаНачалаСобытия < ДатаЗакона255ФЗ И ДатаОкончания >= ДатаЗакона255ФЗ И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
			// это переходный период 2007 года	
			ТабДокумент = НачислениеПоБольничномуЛистуДополнительный.ПечатьОборотаБольничногоВПереходныйПериод2007(Ссылка,Организация,Сотрудник,ПериодРегистрации,ДатаНачалаСобытия,ПричинаНетрудоспособности,ВидРасчета,ДатаНачала,ДатаОкончания,ДатаНарушенияРежима,ПроцентОплаты,ПроцентОплатыПереходногоПериода,ОграничениеПособия,ОграничениеПособияПереходногоПериода);
			Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ДокументОбъект, ДокументОбъект.Метаданные().Синоним) + " (оборот листка нетрудоспособности)");
		КонецЕсли;
	ИначеЕсли ИмяМакета = "РасчетСреднегоЗаработкаПП" Тогда
		ПериодРасчетаСреднегоЗаработка = ?(ВидРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору,ВидРасчета.ПериодРасчетаСреднегоЗаработка,12);
		// это переходный период: здесь показываем заработок "по новому"	
		СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
		СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
		СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий;
		СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий;
		СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
		СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий;
		ТабДокумент = ФормированиеПечатныхФормЗК.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачалаСобытия, ПериодРасчетаСреднегоЗаработка, "с " + Формат(ДатаНачала,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания,"ДФ=dd.MM.yyyy"), Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС,  Ложь,СписокСоставляющихСреднегоЗаработка);
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ДокументОбъект, ДокументОбъект.Метаданные().Синоним) + " (расчет среднего заработка)");
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции // Печать

// Формирует оборот листка нетрудоспособности
//
// Параметры
//	Нет.
//
// Возвращаемое значение:
//	табличный документ
//
Функция ПечатьОборотаБольничного(ДокументОбъект) Экспорт
		
	мДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
	
	ДатаНачалаСобытия					= ДокументОбъект.ДатаНачалаСобытия;
	Ссылка								= ДокументОбъект.Ссылка;
	Организация							= ДокументОбъект.Организация;
	Сотрудник							= ДокументОбъект.Сотрудник;
	ПериодРегистрации					= ДокументОбъект.ПериодРегистрации;
	ПричинаНетрудоспособности			= ДокументОбъект.ПричинаНетрудоспособности;
	ВидРасчета							= ДокументОбъект.ВидРасчета;
	ДатаНачала							= ДокументОбъект.ДатаНачала;
	ДатаНачалаОплаты					= ДокументОбъект.ДатаНачалаОплаты;
	ДатаОкончания						= ДокументОбъект.ДатаОкончания;
	ДатаНарушенияРежима					= ДокументОбъект.ДатаНарушенияРежима;
	ПроцентОплаты						= ДокументОбъект.ПроцентОплаты;
	ПроцентОплатыПереходногоПериода		= ДокументОбъект.ПроцентОплатыПереходногоПериода;
	ОграничениеПособия					= ДокументОбъект.ОграничениеПособия;
	ОграничениеПособияПереходногоПериода= ДокументОбъект.ОграничениеПособияПереходногоПериода;
	ДнейОплаты							= ДокументОбъект.ДнейОплаты;
	
	Если ПериодРегистрации >= мДатаЗакона255ФЗ И ДатаОкончания >= мДатаЗакона255ФЗ Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Сотрудник",			 Сотрудник);
	Запрос.УстановитьПараметр("ФизЛицо",			 Сотрудник.Физлицо);
	Запрос.УстановитьПараметр("ДокументСсылка",		 Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	 ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("ДатаЗакона255ФЗ",	 мДатаЗакона255ФЗ);
	Запрос.УстановитьПараметр("МесяцСобытия",		 НачалоМесяца(ДатаНачалаСобытия	));
	Запрос.УстановитьПараметр("ДатаНачала",			 ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",		 ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаНарушенияРежима", ДатаНарушенияРежима);
	
	ДанныеОДокументеТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументБЛ.Ссылка,
	|	ДокументБЛ.Сотрудник.Физлицо КАК Физлицо,
	|	ДокументБЛ.Организация,
	|	ДокументБЛ.Организация.НаименованиеПолное КАК НаименованиеОрганизации,
	|	ДокументБЛ.ДатаНачала,
	|	ДокументБЛ.ДатаОкончания,
	|	ДокументБЛ.НомерВходящегоДокумента,
	|	ДокументБЛ.СерияВходящегоДокумента,
	|	ДокументБЛ.ПроцентОплаты,
	|	ВЫБОР
	|		КОГДА ДокументБЛ.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
	|			ТОГДА ""по беременности и родам""
	|		ИНАЧЕ ""по временной нетрудоспособности""
	|	КОНЕЦ КАК ПричинаНетрудоспособности,
	|	ЕСТЬNULL(ФИОФизлица.Фамилия + "" "" + ФИОФизлица.Имя + "" "" + ФИОФизлица.Отчество, ДокументБЛ.Сотрудник.Наименование) КАК ФИОРаботника,
	|	ВЫБОР
	|		КОГДА ДокументБЛ.Сотрудник.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|			ТОГДА ""Не работала""
	|		ИНАЧЕ ""Не работал""
	|	КОНЕЦ КАК СловаНеРаботал,
	|	ВЫБОР
	|		КОГДА ПараметрыВидаРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору)
	|			ТОГДА ПараметрыВидаРасчета.ПериодРасчетаСреднегоЗаработка
	|		ИНАЧЕ 12
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработка,
	|	ДокументБЛ.Сотрудник.Код КАК ТабельныйНомер,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ КАК ПодразделениеНаименование,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.Наименование
	|	КОНЕЦ КАК ДолжностьНаименование,
	|	ВЫБОР
	|		КОГДА &ДатаНачалаСобытия < &ДатаЗакона255ФЗ
	|				И ЕСТЬNULL(ВЫБОР
	|						КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|								И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|						ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|					КОНЕЦ, ЛОЖЬ)
	|			ТОГДА ""часов""
	|		ИНАЧЕ ""дней""
	|	КОНЕЦ КАК СловаДней,
	|	ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ГрафикРаботы, ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|		КОНЕЦ) КАК ГрафикРаботы
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК ДокументБЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаНачалаСобытия, ФизЛицо = &ФизЛицо) КАК ФИОФизлица
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПараметрыВидаРасчета
	|		ПО (ПараметрыВидаРасчета.Ссылка = ДокументБЛ.ВидРасчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы
	|		ИЗ
	|			РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ГДЕ
	|			ГрафикиРаботыПоВидамВремени.Месяц = &МесяцСобытия
	|			И ГрафикиРаботыПоВидамВремени.План
	|			И ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &Сотрудник) КАК ГрафикиРаботыПоВидамВремени
	|		ПО ДокументБЛ.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|ГДЕ
	|	ДокументБЛ.Ссылка = &ДокументСсылка";
	
	ВыходныеДниТекст =
	"ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.Дата
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	И ГрафикиРаботыПоВидамВремени.План
	|	И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение = 0
	|	И ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы";
	
	// РазмерММОТ
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
	//		Размер - размер ММОТ
	//	Описание:
	//		получает размер ММОТ для каждой строки начислений
	//
	РазмерММОТТекст = 
	"ВЫБРАТЬ
	|	ДатыАктуальностиММОТ.НомерСтроки КАК ОсновнойНомерСтроки,
	|	МинимальнаяОплатаТрудаРФ.Размер КАК Размер
	|ПОМЕСТИТЬ ВТРазмерММОТ
	|ИЗ
	|	(ВЫБРАТЬ
	|		Основной.НомерСтроки КАК НомерСтроки,
	|		МАКСИМУМ(МинимальнаяОплатаТрудаРФ.Период) КАК ДатаАктуальности
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
	|			ПО (МинимальнаяОплатаТрудаРФ.Период <= Основной.ПериодДействияНачало)
	|	ГДЕ
	|		Основной.Регистратор = &ДокументСсылка
	|		И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Основной.НомерСтроки) КАК ДатыАктуальностиММОТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
	|		ПО (МинимальнаяОплатаТрудаРФ.Период = ДатыАктуальностиММОТ.ДатаАктуальности)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновнойНомерСтроки";
	Запрос.Текст = РазмерММОТТекст;
	Запрос.Выполнить();
	
	// РазмерОграниченияПособия
	//	Поля:
	//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
	//		Размер - размер ограничения
	//	Описание:
	//		получает размер ограничения пособия для каждой строки начислений
	//
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		РазмерОграниченияПособияТекст = 
		"ВЫБРАТЬ
		|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
		|	РазмерОграниченияПособияПоНетрудоспособности.РазмерПоБеременности КАК Размер
		|ПОМЕСТИТЬ ВТРазмерОграниченияПособия
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(РазмерОграниченияПособияПоНетрудоспособности.Период) КАК ДатаАктуальности
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|			ПО (РазмерОграниченияПособияПоНетрудоспособности.Период <= Основной.ПериодДействияНачало)
		|	ГДЕ
		|		Основной.Регистратор = &ДокументСсылка
		|		И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|		ПО (РазмерОграниченияПособияПоНетрудоспособности.Период = ДатыАктуальности.ДатаАктуальности)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновнойНомерСтроки";
	Иначе
		РазмерОграниченияПособияТекст = 
		"ВЫБРАТЬ
		|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
		|	РазмерОграниченияПособияПоНетрудоспособности.Размер КАК Размер
		|ПОМЕСТИТЬ ВТРазмерОграниченияПособия
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(РазмерОграниченияПособияПоНетрудоспособности.Период) КАК ДатаАктуальности
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|			ПО (РазмерОграниченияПособияПоНетрудоспособности.Период <= Основной.ПериодДействияНачало)
		|	ГДЕ
		|		Основной.Регистратор = &ДокументСсылка
		|		И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|		ПО (РазмерОграниченияПособияПоНетрудоспособности.Период = ДатыАктуальности.ДатаАктуальности)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновнойНомерСтроки";
	КонецЕсли;
	Запрос.Текст = РазмерОграниченияПособияТекст;
	Запрос.Выполнить();
	
	Если ДатаНачалаСобытия < мДатаЗакона255ФЗ Тогда
		
		ОграничениеВРазмереММОТТекст = 
		"ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
		|							ТОГДА 0
		|						ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия, 0))
		|					КОНЕЦ = 0
		|					ТОГДА 0
		|				ИНАЧЕ ЕСТЬNULL(РазмерММОТ.Размер, 0) / ВЫБОР
		|						КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
		|							ТОГДА 0
		|						ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия, 0))
		|			КОНЕЦ * ВЫБОР
		|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
		|						ТОГДА ВЫБОР
		|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
		|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
		|						ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
		|					ИНАЧЕ 1
		|				КОНЕЦ КОНЕЦ КАК ЧИСЛО(15, 2))";
		
		ОграничениеТекст = 
		"ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
		|							ТОГДА 0
		|						ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия, 0))
		|					КОНЕЦ = 0
		|						ТОГДА 0
		|				ИНАЧЕ ЕСТЬNULL(РазмерОграниченияПособия.Размер, 0) / ВЫБОР
		|						КОГДА ЕСТЬNULL(СводныеИндивидуальныеГрафики.ОшибкаВводаИндивидуальногоГрафикаРаботы, ЛОЖЬ)
		|							ТОГДА 0
		|						ИНАЧЕ ЕСТЬNULL(СводныеИндивидуальныеГрафики.НормаВремени, ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеНормаПериодДействия, 0))
		|					КОНЕЦ
		|			КОНЕЦ * ВЫБОР
		|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
		|						ТОГДА ВЫБОР
		|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
		|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|					КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
		|						ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
		|					ИНАЧЕ 1
		|				КОНЕЦ КАК ЧИСЛО(15, 2))";
	
		РасчетПособияТекст = 
		"ВЫБРАТЬ
		|	Основной.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|			ТОГДА СводныеИндивидуальныеГрафики.Дней
		|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|			ТОГДА СводныеИндивидуальныеГрафики.Часов
		|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
		|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовВечерних
		|		КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
		|			ТОГДА СводныеИндивидуальныеГрафики.ЧасовНочных
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НормаВремени,
		|	ВЫБОР
		|		КОГДА (НАЧАЛОПЕРИОДА(Основной.ПериодДействияНачало, ДЕНЬ) > Основной.ПериодДействия
		|				ИЛИ КОНЕЦПЕРИОДА(Основной.ПериодДействияКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Основной.ПериодДействия, МЕСЯЦ))
		|				И СводныеИндивидуальныеГрафики.Дней ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаВводаИндивидуальногоГрафикаРаботы
		|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафики
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|		ПО Основной.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
		|			И (СводныеИндивидуальныеГрафики.Месяц = Основной.ПериодДействия)
		|ГДЕ
		|	Основной.Регистратор = &ДокументСсылка
		|	И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисленияРаботниковОрганизаций.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|			ТОГДА ОсновныеНачисленияРаботниковОрганизаций.НормаДней
		|		ИНАЧЕ ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов
		|	КОНЕЦ КАК ОплаченоВремени,
		|	ОсновныеНачисленияРаботниковОрганизаций.Показатель1 КАК РазмерВПроцентах,
		|	ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Показатель1 * &Средний / 100 КАК ЧИСЛО(15, 2)) КАК РазмерВРублях,
		|	НЕОПРЕДЕЛЕНО КАК ОграничениеПособия,
		|	ОсновныеНачисленияРаботниковОрганизаций.Результат
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(
		|				Регистратор = &ДокументСсылка
		|					И ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)) КАК ДанныеГрафика
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = ДанныеГрафика.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = СводныеИндивидуальныеГрафики.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерММОТ КАК РазмерММОТ
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = РазмерММОТ.ОсновнойНомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерОграниченияПособия КАК РазмерОграниченияПособия
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = РазмерОграниченияПособия.ОсновнойНомерСтроки
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &ДокументСсылка
		|	И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодДействияНачало";
		
		
	Иначе
		
		ОграничениеВРазмереММОТТекст = 
		"ВЫРАЗИТЬ(ЕСТЬNULL(РазмерММОТ.Размер, 0) / ДЕНЬ(КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, МЕСЯЦ)) * ВЫБОР
		|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
		|						ТОГДА ВЫБОР
		|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
		|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
		|					ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
		|				ИНАЧЕ 1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))";
		
		ОграничениеТекст = 
		"ВЫРАЗИТЬ(ЕСТЬNULL(РазмерОграниченияПособия.Размер, 0) / ДЕНЬ(КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец, МЕСЯЦ)) * ВЫБОР
		|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.КодПоОКАТО <> """"
		|						ТОГДА ВЫБОР
		|								КОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ > 1
		|								ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации.РайонныйКоэффициентРФ
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|				КОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ > 1
		|					ТОГДА ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение.РайонныйКоэффициентРФ
		|				ИНАЧЕ 1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))";
		
		РасчетПособияТекст = 
		"ВЫБРАТЬ
		|	ФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
		|	СУММА(РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ФактическийПериодДействия.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ)) КАК ОплачиватьДнейПособия
		|ПОМЕСТИТЬ ВТКалендарныеДниПособия
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|			ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС))
		|				И Регистратор = &ДокументСсылка) КАК ФактическийПериодДействия
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическийПериодДействия.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец,
		|	КалендарныеДниПособия.ОплачиватьДнейПособия КАК ОплаченоВремени,
		|	ОсновныеНачисленияРаботниковОрганизаций.Показатель1 КАК РазмерВПроцентах,
		|	ВЫРАЗИТЬ(ОсновныеНачисленияРаботниковОрганизаций.Показатель1 * &Средний / 100 КАК ЧИСЛО(15, 2)) КАК РазмерВРублях,
		|	НЕОПРЕДЕЛЕНО КАК ОграничениеПособия,
		|	ОсновныеНачисленияРаботниковОрганизаций.Результат
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарныеДниПособия КАК КалендарныеДниПособия
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = КалендарныеДниПособия.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерММОТ КАК РазмерММОТ
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = РазмерММОТ.ОсновнойНомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерОграниченияПособия КАК РазмерОграниченияПособия
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.НомерСтроки = РазмерОграниченияПособия.ОсновнойНомерСтроки
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &ДокументСсылка
		|	И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодДействияНачало";
		
	КонецЕсли;
	
	Если ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
		РасчетПособияТекст = СтрЗаменить(РасчетПособияТекст,"НЕОПРЕДЕЛЕНО КАК ОграничениеПособия,",ОграничениеВРазмереММОТТекст + " КАК ОграничениеПособия,")
	ИначеЕсли ЗначениеЗаполнено(ДатаНарушенияРежима) Тогда
		Если ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
			РасчетПособияТекст = СтрЗаменить(РасчетПособияТекст,"НЕОПРЕДЕЛЕНО КАК ОграничениеПособия,","ВЫБОР
			|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
			|			ТОГДА " + ОграничениеВРазмереММОТТекст + "
			|		ИНАЧЕ " + ОграничениеТекст + "
			|	КОНЕЦ КАК ОграничениеПособия,")
		Иначе
			РасчетПособияТекст = СтрЗаменить(РасчетПособияТекст,"НЕОПРЕДЕЛЕНО КАК ОграничениеПособия,","ВЫБОР
			|		КОГДА &ДатаНарушенияРежима <= ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
			|			ТОГДА " + ОграничениеВРазмереММОТТекст + "
			|		ИНАЧЕ ""-""
			|	КОНЕЦ КАК ОграничениеПособия,")
		КонецЕсли;
	ИначеЕсли ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение Тогда
		РасчетПособияТекст = СтрЗаменить(РасчетПособияТекст,"НЕОПРЕДЕЛЕНО КАК ОграничениеПособия,",ОграничениеТекст + " КАК ОграничениеПособия,")
	Иначе
		РасчетПособияТекст = СтрЗаменить(РасчетПособияТекст,"НЕОПРЕДЕЛЕНО КАК ОграничениеПособия,","""-""  КАК ОграничениеПособия,")
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НачислениеПоБольничномуЛисту_ОборотЛисткаНетрудоспособности";
	
	Макет = Документы.НачислениеПоБольничномуЛисту.ПолучитьМакет("ОборотЛисткаНетрудоспособности");
	СекцияШапка = Макет.ПолучитьОбласть("Шапка");
	СекцияРасчетПособияШапка = Макет.ПолучитьОбласть("РасчетПособияШапка");
	СекцияРасчетПособияСтрока = Макет.ПолучитьОбласть("РасчетПособияСтрока");
	СекцияРасчетПособияИтог = Макет.ПолучитьОбласть("РасчетПособияИтог");
	
	ЭтоПереходныйПериодПоЗакону255ФЗ = ДатаНачалаСобытия < мДатаЗакона255ФЗ И ДатаОкончания >= мДатаЗакона255ФЗ И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве;
	
	Запрос.Текст = ДанныеОДокументеТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СекцияШапка.Параметры,Выборка);
	ЗаполнитьЗначенияСвойств(СекцияРасчетПособияШапка.Параметры,Выборка);
	ГрафикРаботы = Выборка.ГрафикРаботы;
	ПериодРасчетаСреднегоЗаработка = Выборка.ПериодРасчетаСреднегоЗаработка;
	ЛетСтажа	= 0;
	МесяцевСтажа= 0;
	ДнейСтажа	= 0;
	ДатаНепрерывногоСтажа = ПроведениеРасчетов.ПолучитьНачалоСтажаДляБольничногоЛиста(ДатаНачалаСобытия	, Сотрудник.Физлицо, Организация, ?(ДокументОбъект.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.ЗачетНестраховыхПериодов,Справочники.ВидыСтажа.РасширенныйСтраховойСтажДляБЛ,Неопределено));
	Если ЗначениеЗаполнено(ДатаНепрерывногоСтажа) Тогда
		ОбщегоНазначенияЗК.РазобратьРазностьДат(ДатаНачалаСобытия	, ДатаНепрерывногоСтажа, ЛетСтажа, МесяцевСтажа, ДнейСтажа);
	КонецЕсли;
	СекцияШапка.Параметры.НазваниеСтажа = ?(ДатаНачалаСобытия < мДатаЗакона255ФЗ,"Непрерывный","Страховой");
	СекцияШапка.Параметры.ЛетСтажа = ЛетСтажа;
	СекцияШапка.Параметры.ПодписьЛетСтажа = ОбщегоНазначенияЗК.ФормаМножественногоЧисла("год","года","лет",ЛетСтажа);
	СекцияШапка.Параметры.МесяцевСтажа = МесяцевСтажа;
	СекцияШапка.Параметры.ПодписьМесяцевСтажа = ОбщегоНазначенияЗК.ФормаМножественногоЧисла("месяц","месяца","месяцев",МесяцевСтажа);
	СекцияШапка.Параметры.ДнейСтажа = ДнейСтажа;
	СекцияШапка.Параметры.ПодписьДнейСтажа = ОбщегоНазначенияЗК.ФормаМножественногоЧисла("день","дня","дней",ДнейСтажа);
	
	ДатыВыходныхДней = "";
	Если ДатаНачалаСобытия < мДатаЗакона255ФЗ Тогда
		Запрос.УстановитьПараметр("ГрафикРаботы" , ГрафикРаботы);
		Запрос.Текст = ВыходныеДниТекст;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДатыВыходныхДней = ДатыВыходныхДней + ?(ДатыВыходныхДней = "","","; ") + Формат(Выборка.Дата,"ДЛФ=DD")
		КонецЦикла;
	КонецЕсли;
	СекцияШапка.Параметры.НазваниеДней =  ?(ДатаНачалаСобытия	 < мДатаЗакона255ФЗ,"рабочих","календарных");
	СекцияШапка.Параметры.РабочихДней = ДнейОплаты - ?(ДатаНачалаСобытия < мДатаЗакона255ФЗ,Выборка.Количество(),0);
	СекцияШапка.Параметры.ДатыВыходныхДней = ДатыВыходныхДней;
	ТабДокумент.Вывести(СекцияШапка);
	
	СтруктураПоказателей = Неопределено;
	СписокСоставляющихСреднегоЗаработка = Неопределено;
		
	Если ЭтоПереходныйПериодПоЗакону255ФЗ Тогда
		СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
		СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
		СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
		СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
		СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
		СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ;
	ИначеЕсли ДатаНачалаСобытия >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		СписокСоставляющихСреднегоЗаработка = Новый Массив(2); 
		СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010;
		СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010;
	ИначеЕсли ДатаОкончания >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		СписокСоставляющихСреднегоЗаработка = Новый Массив(2); 
		СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
		СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
	КонецЕсли;
	ПечатьРасчетаСреднегоЗаработкаОтчет = ФормированиеПечатныхФормЗК.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачалаСобытия	, ПериодРасчетаСреднегоЗаработка, "", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС, ?(ДатаНачалаСобытия < мДатаЗакона255ФЗ, Неопределено, Ложь), СписокСоставляющихСреднегоЗаработка, Ложь, Ложь, СтруктураПоказателей);
	
	ОбластьПрямоугольная = ПечатьРасчетаСреднегоЗаработкаОтчет.Область(1, 1, ПечатьРасчетаСреднегоЗаработкаОтчет.ВысотаТаблицы, ПечатьРасчетаСреднегоЗаработкаОтчет.ШиринаТаблицы);
	НачалоНовогоФорматаСтрок = ТабДокумент.ВысотаТаблицы + 1;
	ТабДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + ПечатьРасчетаСреднегоЗаработкаОтчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
	// назначим ширину колонок у новой области формата строк
	Для Счетчик = 1 По ПечатьРасчетаСреднегоЗаработкаОтчет.ШиринаТаблицы Цикл
		ТабДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = ПечатьРасчетаСреднегоЗаработкаОтчет.Область(1, Счетчик).ШиринаКолонки;
	КонецЦикла;
	ТабДокумент.ВставитьОбласть(ОбластьПрямоугольная, ТабДокумент.Область(НачалоНовогоФорматаСтрок, 1));
	
	ТабДокумент.Вывести(СекцияРасчетПособияШапка);
	Запрос.УстановитьПараметр("Средний",Окр(СтруктураПоказателей.Средний,2));
	Запрос.Текст = РасчетПособияТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	НачисленоВсего = 0;
	Пока Выборка.Следующий() Цикл
		НачисленоВсего = НачисленоВсего + Выборка.Результат;
		ЗаполнитьЗначенияСвойств(СекцияРасчетПособияСтрока.Параметры,Выборка);
		ТабДокумент.Вывести(СекцияРасчетПособияСтрока);
	КонецЦикла;
	
	СекцияРасчетПособияИтог.Параметры.НачисленоВсегоПрописью = ОбщегоНазначенияЗК.СформироватьСуммуПрописью(НачисленоВсего, Константы.ВалютаРегламентированногоУчета.Получить());
	СекцияРасчетПособияИтог.Параметры.ПериодРегистрации = ПериодРегистрации;
	ТабДокумент.Вывести(СекцияРасчетПособияИтог);
	
	ВывестиОтражениеВУчете(ТабДокумент, Ссылка, ПериодРегистрации, Организация, ВидРасчета);
	
	Возврат	ТабДокумент
	
КонецФункции // ПечатьОборотаБольничного()

Процедура ВывестиОтражениеВУчете(ТабДокумент, Ссылка, ПериодРегистрации, Организация, ВидРасчета) Экспорт
	
	// определим налоговый режим
	НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(ПериодРегистрации), Организация);
	УчетнаяПолитика = глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете")[КонецМесяца(ПериодРегистрации)][Организация];
	мУСН = УчетнаяПолитика.УСН;
	
	ОтражениеТекст = 
	"ВЫБРАТЬ
	|	БУОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	БУОсновныеНачисления.ПериодДействияКонец,
	|	СУММА(БУОсновныеНачисления.Результат) КАК Результат,
	|	РАЗНОСТЬДАТ(БУОсновныеНачисления.ПериодДействияНачало, БУОсновныеНачисления.ПериодДействияКонец, ДЕНЬ) + 1 КАК ДнейПериода,
	|	БУОсновныеНачисления.СчетДт.Код,
	|	БУОсновныеНачисления.СубконтоДт1 КАК СубконтоДт1,
	|	БУОсновныеНачисления.СубконтоДт2 КАК СубконтоДт2,
	|	БУОсновныеНачисления.СубконтоДт3 КАК СубконтоДт3,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА БУОсновныеНачисления.ОтражениеВУСН
	|		ИНАЧЕ БУОсновныеНачисления.СчетДтНУ.Код
	|	КОНЕЦ КАК СчетДтНУКод,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА """"
	|		ИНАЧЕ БУОсновныеНачисления.СубконтоДтНУ1
	|	КОНЕЦ КАК СубконтоДтНУ1,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА """"
	|		ИНАЧЕ БУОсновныеНачисления.СубконтоДтНУ2
	|	КОНЕЦ КАК СубконтоДтНУ2,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА """"
	|		ИНАЧЕ БУОсновныеНачисления.СубконтоДтНУ3
	|	КОНЕЦ КАК СубконтоДтНУ3
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.БУОсновныеНачисления КАК БУОсновныеНачисления
	|		ПО ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = БУОсновныеНачисления.ВидРасчета
	|			И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия = БУОсновныеНачисления.ПериодДействия
	|			И ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = БУОсновныеНачисления.Сотрудник
	|			И (БУОсновныеНачисления.ПериодДействияНачало МЕЖДУ ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец)
	|			И (БУОсновныеНачисления.ПериодДействияКонец МЕЖДУ ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец)
	|			И (БУОсновныеНачисления.ПериодРегистрации <= &ПериодРегистрации)
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &ДокументСсылка
	|	И (НЕ ОсновныеНачисленияРаботниковОрганизаций.Сторно)
	|	И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = &ВидРасчетаКОплате
	|
	|СГРУППИРОВАТЬ ПО
	|	БУОсновныеНачисления.ПериодДействияНачало,
	|	БУОсновныеНачисления.ПериодДействияКонец,
	|	БУОсновныеНачисления.СубконтоДт3,
	|	БУОсновныеНачисления.СубконтоДтНУ1,
	|	БУОсновныеНачисления.СубконтоДтНУ2,
	|	БУОсновныеНачисления.СубконтоДтНУ3,
	|	БУОсновныеНачисления.СчетДт.Код,
	|	ВЫБОР
	|		КОГДА &УСН
	|			ТОГДА БУОсновныеНачисления.ОтражениеВУСН
	|		ИНАЧЕ БУОсновныеНачисления.СчетДтНУ.Код
	|	КОНЕЦ,
	|	БУОсновныеНачисления.СубконтоДт1,
	|	БУОсновныеНачисления.СубконтоДт2,
	|	БУОсновныеНачисления.СубконтоДт3
	|
	|ИМЕЮЩИЕ
	|	СУММА(БУОсновныеНачисления.Результат) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДействияНачало";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ОтражениеТекст;
	Запрос.УстановитьПараметр("УСН",мУСН);
	Запрос.УстановитьПараметр("ВидРасчетаКОплате",	ВидРасчета);
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	
	Результат = Запрос.Выполнить();
	
	МакетОтражение = Документы.НачислениеПоБольничномуЛисту.ПолучитьМакет("ОборотОтражениеВУчете");
	СекцияОтражениеПособияСтрока = МакетОтражение.ПолучитьОбласть("ОтражениеПособияСтрока");
	ТабДокумент.Вывести(МакетОтражение.ПолучитьОбласть("ОтражениеВУчетеШапка"));
	Если Результат.Пустой() Тогда
		ТабДокумент.Вывести(МакетОтражение.ПолучитьОбласть("НетДанных"));
	Иначе
		ТабДокумент.Вывести(МакетОтражение.ПолучитьОбласть("ОтражениеПособияШапка"));
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СекцияОтражениеПособияСтрока.Параметры,Выборка);
			
			СекцияОтражениеПособияСтрока.Параметры.СтрокаСубконтоБУ = ?(ЗначениеЗаполнено(Выборка.СубконтоДт1),Строка(Выборка.СубконтоДт1),"") +
			?(ЗначениеЗаполнено(Выборка.СубконтоДт2), Символы.ПС + Строка(Выборка.СубконтоДт2),"") + 
			?(ЗначениеЗаполнено(Выборка.СубконтоДт3), Символы.ПС+ Строка(Выборка.СубконтоДт3),"") ; 
			СекцияОтражениеПособияСтрока.Параметры.СтрокаСубконтоНУ = ?(ЗначениеЗаполнено(Выборка.СубконтоДтНУ1),Строка(Выборка.СубконтоДтНУ1),"") +
			?(ЗначениеЗаполнено(Выборка.СубконтоДтНУ2), Символы.ПС + Строка(Выборка.СубконтоДтНУ2),"") + 
			?(ЗначениеЗаполнено(Выборка.СубконтоДтНУ3), Символы.ПС + Строка(Выборка.СубконтоДтНУ3),""); 
			
			ТабДокумент.Вывести(СекцияОтражениеПособияСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Процедуры, функции для работы формы документа

Процедура ВыполнитьДействияПередОткрытиемФормы(ФормаДокумента) Экспорт
	
	// В этой конфигурации дополнительные действия не выполняются
	
КонецПроцедуры	

Процедура ВыполнитьДействияПриИзмененииПериодаРегистрации(ДокументОбъект, ФормаДокумента) Экспорт
	
	ФормаДокумента.ЭлементыФормы.НадписьОтражениеПособияВУчете.ГиперСсылка = ДокументОбъект.ПериодРегистрации < ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования()
	
КонецПроцедуры	

Процедура ВыполнитьДействияПриНачалеРедактированияНачисления(ФормаДокумента, Элемент, НоваяСтрока) Экспорт
	
	// В этой конфигурации дополнительные действия не выполняются
	
КонецПроцедуры

Процедура ВыполнитьДействияПослеРедактированияНачисления(ФормаДокумента, ТекущаяСтрока) Экспорт
	
	// В этой конфигурации дополнительные действия не выполняются
	
КонецПроцедуры

Процедура ВыполнитьДействияПередУдалениемНачисления(Элемент, ДокументОбъект, Отказ) Экспорт
	
	// В этой конфигурации дополнительные действия не выполняются
	
КонецПроцедуры

Процедура ДополнитьКолонкиТабличногоПоля(ТабличноеПоле) Экспорт 
	
	РаботаСДиалогами.ВставитьКолонкуВТабличноеПоле(, ТабличноеПоле, "ОтработаноЧасов", "Часов отработано", "ОтработаноЧасов", , , , Тип("ПолеВвода"));
	РаботаСДиалогами.ВставитьКолонкуВТабличноеПоле(, ТабличноеПоле, "ОтработаноПоПятидневке", "Отработано по пятидневке", "ОтработаноПоПятидневке", , , , Тип("ПолеВвода"));
	РаботаСДиалогами.ВставитьКолонкуВТабличноеПоле(, ТабличноеПоле, "НормаПоПятидневке", "Норма по пятидневке", "НормаПоПятидневке", , , , Тип("ПолеВвода"));
	РаботаСДиалогами.ВставитьКолонкуВТабличноеПоле(, ТабличноеПоле, "ЧислоМесяцев", "Число месяцев", "ЧислоМесяцев", , , , Тип("ПолеВвода"));

КонецПроцедуры // ДополнитьКолонкиТабличнойЧасти()

Процедура НастроитьВидимостьКолонокРасчетаСреднего(ФормаДокумента, УчитыватьНастройкиПользователя = Ложь) Экспорт
	
	мДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
	
	КолонкиРасчетаСреднего = ФормаДокумента.ЭлементыФормы.РасчетСреднего.Колонки;
	ПоказываемКолонкиСтарогоПорядкаРасчета = ЗначениеЗаполнено(ФормаДокумента.ДатаНачалаСобытия) И ФормаДокумента.ДатаНачалаСобытия < мДатаЗакона255ФЗ; // в этом случае для учета премий могут потребоваться дополнительные колонки
	
	Если Не ПоказываемКолонкиСтарогоПорядкаРасчета И ФормаДокумента.РасчетСреднего.Количество() > 0 Тогда
		ПоказываемКолонкиСтарогоПорядкаРасчета = ФормаДокумента.РасчетСреднего.Найти(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий, "ВидРасчета") <> Неопределено 
				Или ФормаДокумента.РасчетСреднего.Найти(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий, "ВидРасчета") <> Неопределено
				Или ФормаДокумента.РасчетСреднего.Найти(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий, "ВидРасчета") <> Неопределено;
	КонецЕсли;
	
	НачислениеПоБольничномуЛистуДополнительный.НастроитьВидимостьКолонки(КолонкиРасчетаСреднего.ОтработаноЧасов, ПоказываемКолонкиСтарогоПорядкаРасчета, УчитыватьНастройкиПользователя);
	НачислениеПоБольничномуЛистуДополнительный.НастроитьВидимостьКолонки(КолонкиРасчетаСреднего.НормаПоПятидневке, ПоказываемКолонкиСтарогоПорядкаРасчета, УчитыватьНастройкиПользователя);
	НачислениеПоБольничномуЛистуДополнительный.НастроитьВидимостьКолонки(КолонкиРасчетаСреднего.ОтработаноПоПятидневке, ПоказываемКолонкиСтарогоПорядкаРасчета, УчитыватьНастройкиПользователя);
	НачислениеПоБольничномуЛистуДополнительный.НастроитьВидимостьКолонки(КолонкиРасчетаСреднего.ЧислоМесяцев, ПоказываемКолонкиСтарогоПорядкаРасчета, УчитыватьНастройкиПользователя);
	
КонецПроцедуры // НастроитьВидимостьКолонокРасчетаСреднего()

// Управляет видимостью блока колонок "рабочее место" в таблице заработка для расчета среднего
// реализация Федерального закона № 180-ФЗ от 22.12.2005 г.
Процедура НастроитьВидимостьБлокаРабочегоМеста(ФормаДокумента, УчитыватьНастройкиПользователя = Ложь) Экспорт 
	
	мДатаЗакона180ФЗ = '20060101';	// 1 января 2006 года
	мДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
	
	НеПоказываемРабочиеМеста = ФормаДокумента.ДатаНачалаСобытия < мДатаЗакона180ФЗ;
	
	КолонкиНачислений = ФормаДокумента.ЭлементыФормы.Начисления.Колонки;
	КолонкиРасчетаСреднего = ФормаДокумента.ЭлементыФормы.РасчетСреднего.Колонки;
	
	ПоказываемРабочиеМеста = Не НеПоказываемРабочиеМеста;
	ПоказываемКолонкиСтарогоПорядкаРасчета = ФормаДокумента.ДатаНачалаСобытия < мДатаЗакона255ФЗ; // в этом случае для учета премий могут потребоваться дополнительные колонки
	
	НачислениеПоБольничномуЛистуДополнительный.НастроитьВидимостьКолонки(КолонкиНачислений.Сотрудник, ПоказываемРабочиеМеста, УчитыватьНастройкиПользователя);
	НачислениеПоБольничномуЛистуДополнительный.НастроитьВидимостьКолонки(КолонкиНачислений.Подразделение, ПоказываемРабочиеМеста, УчитыватьНастройкиПользователя);
	НачислениеПоБольничномуЛистуДополнительный.НастроитьВидимостьКолонки(КолонкиНачислений.Должность, ПоказываемРабочиеМеста, УчитыватьНастройкиПользователя);
	НачислениеПоБольничномуЛистуДополнительный.НастроитьВидимостьКолонки(КолонкиРасчетаСреднего.Сотрудник, ПоказываемРабочиеМеста, УчитыватьНастройкиПользователя);
	НачислениеПоБольничномуЛистуДополнительный.НастроитьВидимостьКолонки(КолонкиРасчетаСреднего.Подразделение, ПоказываемРабочиеМеста, УчитыватьНастройкиПользователя);
	НачислениеПоБольничномуЛистуДополнительный.НастроитьВидимостьКолонки(КолонкиРасчетаСреднего.Должность, ПоказываемРабочиеМеста, УчитыватьНастройкиПользователя);
	
КонецПроцедуры // НастроитьВидимостьБлокаРабочегоМеста()

Процедура НастроитьСпискиВыбораЭлементовУправления(ДокументОбъект, ФормаДокумента) Экспорт 

	мДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
	ДатаНачалаСобытия= ДокументОбъект.ДатаНачалаСобытия;
	ДатаОкончания= ДокументОбъект.ДатаОкончания;
	
	СписокПричинНетрудоспособности = Новый СписокЗначений;
	СписокСлучаевУходаЗаРебенком = Новый СписокЗначений;
	СписокСоставляющихСреднегоЗаработка = Новый СписокЗначений;
	
	Если ДатаНачалаСобытия >= мДатаЗакона255ФЗ Или Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.Карантин);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.Протезирование);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетВСтационаре);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииВСтационаре);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомВСтационаре);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриВИЧ);
		// Список видов записей расчета среднего
		ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		Если ДатаНачалаСобытия >= ДатаЗакона213ФЗ  Или Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
			
			СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010);
			СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010);
		ИначеЕсли 	ДатаОкончания >= ДатаЗакона213ФЗ  Тогда
			СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
			СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий);
			СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010);
			СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010);
		Иначе 	
			СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
			СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий);
		КонецЕсли;
		Если ДокументОбъект.РасчетСреднего.Количество() > 0 Тогда
			Если ДокументОбъект.РасчетСреднего.Найти(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий, "ВидРасчета") <> Неопределено Тогда
				СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий);
			КонецЕсли;
			Если ДокументОбъект.РасчетСреднего.Найти(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий, "ВидРасчета") <> Неопределено Тогда
				СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий);
			КонецЕсли;
			Если ДокументОбъект.РасчетСреднего.Найти(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий, "ВидРасчета") <> Неопределено Тогда
				СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ТравмаВБыту);
		СписокПричинНетрудоспособности.Добавить(Перечисления.ПричиныНетрудоспособности.ПособиеБезЗаболевания);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо3хЛет);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетДляСостоящихВБраке);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетДляНеСостоящихВБраке);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетДляСостоящихВБраке);
		СписокСлучаевУходаЗаРебенком.Добавить(Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетДляНеСостоящихВБраке);
		// Список видов записей расчета среднего
		СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ);
		СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ);
		СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ);
		СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ);
		СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ);
		
		Если НачислениеПоБольничномуЛистуДополнительный.ОпределитьПереходныйПериод(ДокументОбъект.ДатаНачалаСобытия, ДокументОбъект.ДатаНачала, ДокументОбъект.ДатаОкончания, ДокументОбъект.ПричинаНетрудоспособности) Тогда
			// Список видов записей расчета среднего
			СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
			СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий);
			Если ДокументОбъект.РасчетСреднего.Количество() > 0 Тогда
				Если ДокументОбъект.РасчетСреднего.Найти(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий, "ВидРасчета") <> Неопределено Тогда
					СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий);
				КонецЕсли;
				Если ДокументОбъект.РасчетСреднего.Найти(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий, "ВидРасчета") <> Неопределено Тогда
					СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий);
				КонецЕсли;
				Если ДокументОбъект.РасчетСреднего.Найти(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий, "ВидРасчета") <> Неопределено Тогда
					СписокСоставляющихСреднегоЗаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаДокумента.ЭлементыФормы.ПричинаНетрудоспособности.ДоступныеЗначения = СписокПричинНетрудоспособности;
	ФормаДокумента.ЭлементыФормы.СлучайУходаЗаБольнымРебенком.ДоступныеЗначения = СписокСлучаевУходаЗаРебенком;
	ФормаДокумента.ЭлементыФормы.ПричинаНетрудоспособности.ВысотаСпискаВыбора = СписокПричинНетрудоспособности.Количество();
	ФормаДокумента.ЭлементыФормы.СлучайУходаЗаБольнымРебенком.ВысотаСпискаВыбора = СписокСлучаевУходаЗаРебенком.Количество();
	ФормаДокумента.ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора = СписокСоставляющихСреднегоЗаработка;
	ФормаДокумента.ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.ВысотаСпискаВыбора = СписокСоставляющихСреднегоЗаработка.Количество();
	
КонецПроцедуры

Процедура ОбновитьИнформационнуюНадписьОтражениеВУчете(ДокументОбъект, ФормаДокумента) Экспорт

	Если ДокументОбъект.ПособиеОтражаетсяВРеглУчетеТекущимДокументом Тогда
		НачалоНадписи = "производится текущим документом:";
		
		Отражение = ДокументОбъект.ОтражениеНачислений;
		Если ДокументОбъект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
			Надпись = НачалоНадписи + Символы.ПС + "За счет ФСС начислено: " +  + Формат(Отражение.Итог("Результат"), "ЧЦ=12; ЧДЦ=2; ЧН=");
		ИначеЕсли Отражение.Количество() = 0 Тогда
			Надпись = НачалоНадписи + Символы.ПС + "<не рассчитано>"
		Иначе
			
			
			ПособияЗаСчетФСС = ?(ДокументОбъект.ПериодРегистрации < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами(),Справочники.ДоходыЕСН.ПособияЗаСчетФСС,Справочники.ДоходыПоСтраховымВзносам.ПособияЗаСчетФСС);
			ВременнаяТаблица = Отражение.Выгрузить(Отражение.НайтиСтроки(Новый Структура("КодДоходаЕСН",ПособияЗаСчетФСС)),"Результат");
			ЗаСчетФСС = ВременнаяТаблица.Итог("Результат");
			ЗаСчетРаботодателя = Отражение.Итог("Результат") - ЗаСчетФСС;
			Надпись = НачалоНадписи + Символы.ПС + "За счет работодателя: " + Формат(ЗаСчетРаботодателя, "ЧЦ=12; ЧДЦ=2; ЧН=") 
									+ Символы.ПС + "За счет ФСС: " +  + Формат(ЗаСчетФСС, "ЧЦ=12; ЧДЦ=2; ЧН=");
			
		КонецЕсли;
	Иначе
		Надпись = "будет формироваться документом Отражение в учете - в конце месяца";
	КонецЕсли;

	ФормаДокумента.ЭлементыФормы.ИнформационнаяНадписьОтражениеВУчете.Заголовок = Надпись; 
	
КонецПроцедуры

Процедура ОбновитьИнформационнуюНадписьСреднийЗаработок(ДокументОбъект, ФормаДокумента) Экспорт                

	ДатаНачалаСобытия			= ДокументОбъект.ДатаНачалаСобытия;
	ДатаНачала					= ДокументОбъект.ДатаНачала;
	ДатаОкончания				= ДокументОбъект.ДатаОкончания;
	ПричинаНетрудоспособности	= ДокументОбъект.ПричинаНетрудоспособности;
	Дата1 = Формат(ДокументОбъект.ПериодРасчетаСреднегоЗаработкаНачало, "ДЛФ=Д");
	Дата2 = Формат(ДокументОбъект.ПериодРасчетаСреднегоЗаработкаОкончание, "ДЛФ=Д");
	
	Если ЗначениеЗаполнено(Дата1) и ЗначениеЗаполнено(Дата2) Тогда
		ПериодРасчетаСреднегоЗаработкаТекст = "Расчетный период " + Символы.ПС + " с " + Дата1 +" по "+ Дата2;
		ПериодРасчетаСреднегоЗаработкаТекст1 = "Расчетный период с " + Дата1 +" по "+ Дата2;
	Иначе
		ПериодРасчетаСреднегоЗаработкаТекст = "";
		ПериодРасчетаСреднегоЗаработкаТекст1 = "";
	КонецЕсли;
	
	Если ДатаНачалаСобытия >= ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006() Тогда
		
		ИспользоватьСреднеЧасовойЗаработок = Ложь;
		
		Если ДатаНачалаСобытия >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
			
			СписокСоставляющихСреднегоЗаработка = Новый Массив(2); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010;
			
			СреднедневнойЗаработок = Формат(РасчетСреднегоЗаработка(СписокСоставляющихСреднегоЗаработка, ДокументОбъект, ИспользоватьСреднеЧасовойЗаработок),  "ЧЦ=12; ЧДЦ=2; ЧН=");
			
		ИначеЕсли ДокументОбъект.ПериодРегистрации >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() и ДокументОбъект.ДатаОкончания >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
			
			// переходный период 2009-2010 годов
			
			СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий;
			СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий;
			СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
			СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий;
			
			СреднедневнойЗаработокДо01012010 = Формат(РасчетСреднегоЗаработка(СписокСоставляющихСреднегоЗаработка, ДокументОбъект, ИспользоватьСреднеЧасовойЗаработок),  "ЧЦ=12; ЧДЦ=2; ЧН=");
			
			СписокСоставляющихСреднегоЗаработка = Новый Массив(2); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010;
			
			СреднедневнойЗаработокПосле01012010 = Формат(РасчетСреднегоЗаработка(СписокСоставляющихСреднегоЗаработка, ДокументОбъект, ИспользоватьСреднеЧасовойЗаработок),  "ЧЦ=12; ЧДЦ=2; ЧН=");
			
			СреднедневнойЗаработок = ?(СреднедневнойЗаработокДо01012010 <> СреднедневнойЗаработокПосле01012010, СреднедневнойЗаработокДо01012010 + " / " + СреднедневнойЗаработокПосле01012010, СреднедневнойЗаработокПосле01012010);
		
		Иначе
			
			СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
			СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
			СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий;
			СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий;
			СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
			СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий;
			
			СреднедневнойЗаработок = Формат(РасчетСреднегоЗаработка(СписокСоставляющихСреднегоЗаработка, ДокументОбъект, ИспользоватьСреднеЧасовойЗаработок),  "ЧЦ=12; ЧДЦ=2; ЧН=");
			
		КонецЕсли;
		
		НадписьСреднийЗаработокТекст = "Средний дневной заработок:";
		
	ИначеЕсли Не НачислениеПоБольничномуЛистуДополнительный.ОпределитьПереходныйПериод(ДатаНачалаСобытия, ДатаНачала, ДатаОкончания, ПричинаНетрудоспособности) Тогда // расчет до 01/01/2007
				
		СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
		СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
		СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
		СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
		СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
		СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ;	
		
		ИспользоватьСреднеЧасовойЗаработок = Неопределено;
		СреднедневнойЗаработок = Формат(РасчетСреднегоЗаработка(СписокСоставляющихСреднегоЗаработка, ДокументОбъект, ИспользоватьСреднеЧасовойЗаработок),  "ЧЦ=12; ЧДЦ=2; ЧН=");
		
		Если ИспользоватьСреднеЧасовойЗаработок Тогда
			НадписьСреднийЗаработокТекст = "Средний часовой заработок:";
		Иначе
			НадписьСреднийЗаработокТекст = "Средний дневной заработок:";
		КонецЕсли; 
		
	Иначе  // есть переходный период

		// посчитаем средний по правилам до 01/01/2007
		СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
		СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуБЛ;
		СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямБЛ;
		СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииБЛ;
		СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямБЛ;
		СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииБЛ;	
		
		ИспользоватьСреднеЧасовойЗаработок = Неопределено;
		СреднедневнойЗаработокДо01012007 = Формат(РасчетСреднегоЗаработка(СписокСоставляющихСреднегоЗаработка, ДокументОбъект, ИспользоватьСреднеЧасовойЗаработок),  "ЧЦ=12; ЧДЦ=2; ЧН=");
		
		// посчитаем средний по правилам после 01/01/2007
		СписокСоставляющихСреднегоЗаработка = Новый Массив(5); 
		СписокСоставляющихСреднегоЗаработка[0] = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий;
		СписокСоставляющихСреднегоЗаработка[1] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямПособий;
		СписокСоставляющихСреднегоЗаработка[2] = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииПособий;
		СписокСоставляющихСреднегоЗаработка[3] = ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий;
		СписокСоставляющихСреднегоЗаработка[4] = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииПособий;
		
		ИспользоватьСреднеЧасовойЗаработок = Ложь;
		СреднедневнойЗаработокПосле01012007 = Формат(РасчетСреднегоЗаработка(СписокСоставляющихСреднегоЗаработка, ДокументОбъект, ИспользоватьСреднеЧасовойЗаработок),  "ЧЦ=12; ЧДЦ=2; ЧН=");
		
		СреднедневнойЗаработок = СреднедневнойЗаработокДо01012007 + " / " + СреднедневнойЗаработокПосле01012007;
		
		НадписьСреднийЗаработокТекст = "Средний заработок:";
		
	КонецЕсли;	
	
	ФормаДокумента.ЭлементыФормы.НадписьСреднийЗаработок.Заголовок = НадписьСреднийЗаработокТекст;
	ФормаДокумента.ЭлементыФормы.ЗначениеСреднийЗаработок.Заголовок = СреднедневнойЗаработок;
	ФормаДокумента.ЭлементыФормы.ИнформационнаяНадписьСреднийЗаработок.Заголовок = ПериодРасчетаСреднегоЗаработкаТекст;
	ФормаДокумента.ЭлементыФормы.НадписьРасчетСреднегоЗаработка.Заголовок = НадписьСреднийЗаработокТекст + " " + СреднедневнойЗаработок + " руб." + Символы.ПС + ПериодРасчетаСреднегоЗаработкаТекст1;
	
КонецПроцедуры

Процедура ПоказатьДополнительныеРеквизиты(ДокументОбъект, ФормаДокумента) Экспорт

	ДатаНачалаСобытия			= ДокументОбъект.ДатаНачалаСобытия;
	ПричинаНетрудоспособности	= ДокументОбъект.ПричинаНетрудоспособности;
	ДатаНачала					= ДокументОбъект.ДатаНачала;
	ДатаОкончания				= ДокументОбъект.ДатаОкончания;
	
	мЭтоПереходныйПериодПоЗакону255ФЗ = НачислениеПоБольничномуЛистуДополнительный.ОпределитьПереходныйПериод(ДатаНачалаСобытия, ДатаНачала, ДатаОкончания, ПричинаНетрудоспособности);

	ФормаДокумента.ЭлементыФормы.НадписьПоказДополнительныхДанных.Видимость = мЭтоПереходныйПериодПоЗакону255ФЗ;
	ФормаДокумента.ЭлементыФормы.НадписьПоказДополнительныхДанных.Заголовок = "Показать данные переходного периода";
	
КонецПроцедуры

Процедура ПоказатьДополнительнуюФорму(ДокументОбъект, ФормаДокумента) Экспорт

	ДокументОбъект.ПолучитьФорму("ФормаПереходногоПериода", ФормаДокумента).Открыть();
	
КонецПроцедуры

#КонецЕсли

Процедура ЗаполнитьДополнительныеРеквизиты(ДокументОбъект, УчитыватьПервичныйБольничныйЛист = Истина, НовыйДокумент = Ложь) Экспорт 

	Если НовыйДокумент Тогда
		ДокументОбъект.ПособиеОтражаетсяВРеглУчетеТекущимДокументом = Истина
	Иначе
		
		ДатаНачалаСобытия			= ДокументОбъект.ДатаНачалаСобытия;
		ДатаНачала					= ДокументОбъект.ДатаНачала;
		ДатаОкончания				= ДокументОбъект.ДатаОкончания;
		ПричинаНетрудоспособности	= ДокументОбъект.ПричинаНетрудоспособности;
		ПервичныйБольничныйЛист		= ДокументОбъект.ПервичныйБольничныйЛист;
											  
		ПереходныйПериодПоЗакону255ФЗПервичногоБольничногоЛиста = Ложь;
		
		Если ЗначениеЗаполнено(ПервичныйБольничныйЛист) И УчитыватьПервичныйБольничныйЛист Тогда
			ПереходныйПериодПоЗакону255ФЗПервичногоБольничногоЛиста = НачислениеПоБольничномуЛистуДополнительный.ОпределитьПереходныйПериод(ДатаНачалаСобытия, ПервичныйБольничныйЛист.ДатаНачала, ПервичныйБольничныйЛист.ДатаОкончания, ПричинаНетрудоспособности); 
			Если ПереходныйПериодПоЗакону255ФЗПервичногоБольничногоЛиста Тогда
				ЗаполнитьЗначенияСвойств(ДокументОбъект,ДокументОбъект.ПервичныйБольничныйЛист,"ПричинаНетрудоспособностиПереходногоПериода,ПроцентОплатыПереходногоПериода,СлучайУходаЗаБольнымРебенкомПереходногоПериода,ОграничениеПособияПереходногоПериода");
			КонецЕсли;
		КонецЕсли;
		
		мЭтоПереходныйПериодПоЗакону255ФЗ = НачислениеПоБольничномуЛистуДополнительный.ОпределитьПереходныйПериод(ДатаНачалаСобытия, ДатаНачала, ДатаОкончания, ПричинаНетрудоспособности);
		Если мЭтоПереходныйПериодПоЗакону255ФЗ и Не ПереходныйПериодПоЗакону255ФЗПервичногоБольничногоЛиста Тогда
			ДокументОбъект.ПричинаНетрудоспособностиПереходногоПериода	= НачислениеПоБольничномуЛистуДополнительный.ПреобразоватьПричинуНетрудоспособности2006года(ПричинаНетрудоспособности);
			НадоВводитьСлучайУходаЗаРебенком = ДокументОбъект.ПричинаНетрудоспособностиПереходногоПериода = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
			Если Не НадоВводитьСлучайУходаЗаРебенком и Не ДокументОбъект.СлучайУходаЗаБольнымРебенкомПереходногоПериода.Пустая() Тогда
				ДокументОбъект.СлучайУходаЗаБольнымРебенкомПереходногоПериода = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПустаяСсылка()
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДополнительныеРеквизиты()

Процедура ОбновитьРазмерыПособия(ДокументОбъект, ПоддержкаПереходногоПериода = Истина,  ТолькоПереходныйПериод = Ложь) Экспорт 
	
	ДатаНачалаСобытия			= ДокументОбъект.ДатаНачалаСобытия;
	Организация					= ДокументОбъект.Организация;
	Сотрудник					= ДокументОбъект.Сотрудник;
	Физлицо						= ДокументОбъект.Физлицо;
	ПричинаНетрудоспособности	= ДокументОбъект.ПричинаНетрудоспособности;
	ДатаНачала					= ДокументОбъект.ДатаНачала;
	ДатаОкончания				= ДокументОбъект.ДатаОкончания;
		
	мЭтоПереходныйПериодПоЗакону255ФЗ = НачислениеПоБольничномуЛистуДополнительный.ОпределитьПереходныйПериод(ДатаНачалаСобытия, ДатаНачала, ДатаОкончания, ПричинаНетрудоспособности);

	Если ПоддержкаПереходногоПериода И мЭтоПереходныйПериодПоЗакону255ФЗ Тогда
		
		мГоловнаяОрганизация = ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
		
		Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
			
		ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда	
			
			ДокументОбъект.ПроцентОплатыПереходногоПериода = 100;
			
			ДатаСтажа = ПроведениеРасчетов.ПолучитьНачалоСтажаДляБольничногоЛиста(ДатаНачалаСобытия, Физлицо, мГоловнаяОрганизация, Справочники.ВидыСтажа.СтраховойСтажДляБЛ);
			Если ЗначениеЗаполнено(ДатаСтажа) Тогда
				Лет	= 0; Месяцев = 0; 
				ОбщегоНазначенияЗК.РазобратьРазностьДат(ДатаНачалаСобытия, ДатаСтажа, Лет, Месяцев);
				Если Лет * 12 + Месяцев >= 6 Тогда
					ДокументОбъект.ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОбщееОграничение
				Иначе
					ДокументОбъект.ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ;
				КонецЕсли;
			Иначе
				ДокументОбъект.ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ;
			КонецЕсли;
			
		ИначеЕсли ДатаНачалаСобытия = '00010101' Тогда
			
			ДокументОбъект.ПроцентОплатыПереходногоПериода = 100;
			
		Иначе
			
			Запрос = Новый Запрос;
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА  РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
			|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
			|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
			|	КОНЕЦ КАК ПричинаИзмененияСостояния
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних
			|ГДЕ
			|	ВЫБОР
			|		КОГДА  РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
			|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
			|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
			|	КОНЕЦ <> &Увольнение";
			
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ДатаАктуальности",	ДатаНачалаСобытия);
			Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
			Запрос.УстановитьПараметр("Увольнение",			Перечисления.ПричиныИзмененияСостояния.Увольнение);
			
			УжеНеРаботает = Запрос.Выполнить().Пустой(); // в рег-ре РаботникиОрганизаций нет других записей, кроме как об увольнении
			
			ДатаСтажа = ПроведениеРасчетов.ПолучитьНачалоСтажаДляБольничногоЛиста(ДатаНачалаСобытия, Физлицо, мГоловнаяОрганизация, Справочники.ВидыСтажа.СтраховойСтажДляБЛ);
			Если ЗначениеЗаполнено(ДатаСтажа) Тогда
				Лет	= 0; Месяцев = 0; 
				ОбщегоНазначенияЗК.РазобратьРазностьДат(ДатаНачалаСобытия, ДатаСтажа, Лет, Месяцев);
				Если Лет * 12 + Месяцев >= 6 Тогда
					ДокументОбъект.ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОбщееОграничение
				Иначе
					ДокументОбъект.ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ;
				КонецЕсли;
				ДокументОбъект.ПроцентОплатыПереходногоПериода = ?(УжеНеРаботает, 60, НачислениеПоБольничномуЛистуСервис.ПроцентОплатыБольничногоПоСтраховомуСтажу(Лет));
			Иначе
				ДокументОбъект.ОграничениеПособияПереходногоПериода = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ;
				ДокументОбъект.ПроцентОплатыПереходногоПериода = 60;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТолькоПереходныйПериод Тогда
		Возврат
	КонецЕсли;
	
	мДатаЗакона255ФЗ = ПроведениеРасчетовДополнительный.ПолучитьДатуВступленияВСилуИзмененийПоСоциальнымПособиям2006();
	Если ДатаНачалаСобытия = '00010101' Или ДатаНачалаСобытия >= мДатаЗакона255ФЗ Тогда
		Возврат
	КонецЕсли;
		
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
		
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда	
		
		ДокументОбъект.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение
		
	Иначе
		
		мГоловнаяОрганизация = ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
		ДокументОбъект.ПроцентОплаты = ПроведениеРасчетовПереопределяемый.ЗаполнитьПроцентОплатыОтСтажа(ДатаНачала, ДатаНачалаСобытия, Физлицо,мГоловнаяОрганизация);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОписаниеПоПрочимПричинам(ДокументОбъект) Экспорт

	ДатаНачалаСобытия			= ДокументОбъект.ДатаНачалаСобытия;
	ПричинаНетрудоспособности	= ДокументОбъект.ПричинаНетрудоспособности;
	СлучайУходаЗаБольнымРебенком= ДокументОбъект.СлучайУходаЗаБольнымРебенком;
	ОграничениеПособия			= ДокументОбъект.ОграничениеПособия;
	ПроцентОплаты				= ДокументОбъект.ПроцентОплаты;
	ДнейОплаты					= ДокументОбъект.ДнейОплаты;
	
	ОписаниеПричиныНетрудоспособности = "";
	
	Если НЕ ПричинаНетрудоспособности.Пустая() Тогда
		Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеБезЗаболевания Тогда
			
			ОписаниеПричиныНетрудоспособности = "Оплачивается " + ДнейОплаты + " дней нетрудоспособности. " +	
			"Дневное пособие за оплачиваемые дни болезни составляет "+ПроцентОплаты+"% среднего заработка";
			
		ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
			
			Если СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетДляНеСостоящихВБраке Тогда	
				
				ОписаниеПричиныНетрудоспособности = "По уходу за больным ребенком от 7-ми лет до 15 лет. Оплачивается 14 календарных дней. "+
				"Дневное пособие за первые 10 календарных дней болезни составляет "+ПроцентОплаты+"% среднего заработка, за остальные дни - 50% среднего заработка";
				
			ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетДляСостоящихВБраке Тогда
				
				ОписаниеПричиныНетрудоспособности = "По уходу за больным ребенком от 7-ми лет до 15 лет. Оплачивается 14 календарных дней. "+
				"Дневное пособие за первые 7 календарных дней болезни составляет "+ПроцентОплаты+"% среднего заработка, за остальные дни - 50% среднего заработка";
				
			ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо3хЛет Тогда
				
				ОписаниеПричиныНетрудоспособности = "По уходу за больным ребенком до 3-х лет (ребенком - инвалидом в возрасте до 16 лет) "+
				"или при нахождении вместе с больным ребенком в стационаре. Оплачивается " + ДнейОплаты + " дней нетрудоспособности. "+	
				"Дневное пособие за оплачиваемые дни болезни составляет "+ПроцентОплаты+"% среднего заработка";
				
			ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетДляНеСостоящихВБраке Тогда	
				
				ОписаниеПричиныНетрудоспособности = "По уходу за больным ребенком от 3-х лет до 7-ми лет. Оплачивается " + ДнейОплаты + " дней нетрудоспособности. "+
				"Дневное пособие за первые 10 календарных дней болезни составляет "+ПроцентОплаты+"% среднего заработка, за остальные дни - 50% среднего заработка";
				
			ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетДляСостоящихВБраке Тогда
				
				ОписаниеПричиныНетрудоспособности = "По уходу за больным ребенком от 3-х лет до 7-ми лет. Оплачивается " + ДнейОплаты + " дней нетрудоспособности. "+
				"Дневное пособие за первые 7 календарных дней болезни составляет "+ПроцентОплаты+"% среднего заработка, за остальные дни - 50% среднего заработка";
				
			КонецЕсли;
			
		ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаВБыту Тогда
			
			Если ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
				Если ДатаНачалаСобытия < '20050101' Тогда
					ОписаниеПричиныНетрудоспособности = "Первые 5 календарных дней нетрудоспособности не оплачиваются. "+
					"Дневное пособие за оплачиваемые дни болезни составляет "+ПроцентОплаты+"% среднего заработка";
				Иначе	
					ОписаниеПричиныНетрудоспособности = "Оплачивается " + ДнейОплаты + " дней нетрудоспособности. "+	
					"Дневное пособие за оплачиваемые дни болезни составляет "+ПроцентОплаты+"% среднего заработка";
				КонецЕсли;	
			Иначе
				ОписаниеПричиныНетрудоспособности = "";
			КонецЕсли;
						
		Иначе
			
			ОписаниеПричиныНетрудоспособности = "";
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ОписаниеПричиныНетрудоспособности)) и (ЗначениеЗаполнено(ОграничениеПособия)) Тогда
			Если ОграничениеПособия = Перечисления.ВидыОграниченияПособия.БезОграничений Тогда
				ОписаниеПричиныНетрудоспособности =  ОписаниеПричиныНетрудоспособности + ".";	
			Иначе
				ОписаниеПричиныНетрудоспособности =  ОписаниеПричиныНетрудоспособности + " с учетом ограничения общего размера пособия.";
			КонецЕсли;
		КонецЕсли;
		
	Иначе	
		ОписаниеПричиныНетрудоспособности = "";
	КонецЕсли;
	
    Возврат ОписаниеПричиныНетрудоспособности
КонецФункции // ПолучитьОписаниеПоПрочимПричинам()

