
//убратьНезагружать
Процедура АП_ВыполнитьОбменСолво(НеЗагружать=Ложь) Экспорт
	
	//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТаблНеВыгрОбъектов",СоздатьТаблВыгрОбъектов());
	СтруктураПараметров.Вставить("ТаблВыгрОбъектов",СоздатьТаблВыгрОбъектов());
	СтруктураПараметров.Вставить("КолВоНеудачныхПопыток",0);	
	МаксКолвоНеудачныхПопыток = 4; // максимальное количество попыток неудачной блокировки данных на чтение
	//конец изменений 

	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,, "Запуск процедуры обмена данными с Solvo");
	
	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	МассивОтбрабатываемыхМета = Новый Массив;
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Справочники.Номенклатура);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Справочники.Контрагенты);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Справочники.КлассификаторЕдиницИзмерения);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Документы.ВозвратТоваровПоставщику);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Документы.КомплектацияНоменклатуры);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Документы.ПоступлениеТоваровУслуг);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Документы.ПР_Претензия);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Документы.ПТЛ_ПланДоставки);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Документы.СП_ЗаданиеНаПодбор);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Документы.СП_ЗаданиеНаСмену);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Документы.СписаниеТоваров);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Документы.ТребованиеНакладная);
	
    ДатаОтсечки = Дата(2015, 02, 1);
	
	ЗапросКУзлам 	 = Новый Запрос("ВЫБРАТЬ
	                              |	АП_ОбменSolvo.Ссылка
	                              |ИЗ
	                              |	ПланОбмена.АП_ОбменSolvo КАК АП_ОбменSolvo
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.АП_ОбменSolvo.Склады КАК АП_ОбменSolvoСклады
	                              |		ПО АП_ОбменSolvo.Ссылка = АП_ОбменSolvoСклады.Ссылка
	                              |ГДЕ
	                              |	НЕ АП_ОбменSolvo.ПриостановитьОбмен
	                              |	И НЕ АП_ОбменSolvo.ПометкаУдаления
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	АП_ОбменSolvo.Ссылка");
	
	ВыборкаПоУзлам = ЗапросКУзлам.Выполнить().Выбрать();
	Пока ВыборкаПоУзлам.Следующий() Цикл
		Узел = ВыборкаПоУзлам.Ссылка;
		
		//3. Подключимся к базе Solvo
		Соединение = УстановитьСоединение(Узел);
		Если Соединение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПРГАДОКОМ = Неопределено;
		
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Запуск обмена данными с узлом "+Узел.Код);
		
		Для м = 0 По МассивОтбрабатываемыхМета.Количество()-1 Цикл
			
				МетаОбъекта =  МассивОтбрабатываемыхМета[м];
				Выборка   = ВыбратьИзмененияПоУзлу(Узел,МетаОбъекта);
				ИмяДока   = ?(ПустаяСтрока(МетаОбъекта.Синоним)="",МетаОбъекта.Имя,МетаОбъекта.Синоним);
				
				ПолнИмя = МетаОбъекта.ПолноеИмя();
				Если Лев(ПолнИмя,11) = "Справочник." Тогда
					ИнфоПоОбъекту = "Элемент справочника "+ИмяДока+" ";
					ИнфоПоСсылке  = "Элемент справочника "+ИмяДока+" ";
				Иначе
					ИнфоПоОбъекту = "Объект "+ИмяДока;
					ИнфоПоСсылке  = "Объект ";
				КонецЕсли;	

				Пока Выборка.Следующий() Цикл
					//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
					СтруктураПараметров.Вставить("ПолнаяВыгрузка",Ложь);
					Если ВыгрузитьТекущийОбъект(Соединение, Узел, Выборка.Ссылка, ПРГАДОКОМ, СтруктураПараметров)Тогда
							Если СтруктураПараметров.ПолнаяВыгрузка Тогда // по старому алгоритму не фиксируем выгрузку если не пройдено по условиям
								ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, Выборка.Ссылка.Метаданные(), Выборка.Ссылка,ИнфоПоОбъекту+" выгружен.");
								#Если Клиент Тогда
									Сообщить(ИнфоПоСсылке+Выборка.Ссылка+" выгружен.", СтатусСообщения.Информация);
								#КонецЕсли
						 	КонецЕсли;	
					Иначе
							#Если Клиент Тогда
								Сообщить(ИнфоПоСсылке + Выборка.Ссылка+" не выгружен.", СтатусСообщения.Внимание);
							#КонецЕсли
							ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,Выборка.Ссылка.Метаданные(),Выборка.Ссылка,ИнфоПоОбъекту + " не выгружен.");
					КонецЕсли;
						
					Если СтруктураПараметров.КолВоНеудачныхПопыток >= МаксКолвоНеудачныхПопыток Тогда
							 //выгрузим при следущем запуске, поскольку идет интенсивная работа с базой
							ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация ,,, "Выгрузка в солво прервана. Число неудачных попыток превысило максимально допустимое количество.");
							возврат;
					КонецЕсли;	

				КонецЦикла;	
				
		КонецЦикла; //Для м = 0 По МассивОтбрабатываемыхМета.Количество()-1 Цикл
	КонецЦикла;	 //ВыборкаПоУзлам.Следующий()
	
	Если Не НеЗагружать Тогда 
	    Загрузка_Данных_ИзСолво(Соединение, Узел);
	КонецЕсли;	
	возврат;
	//конец изменений  
	
//начало изменений Ожиганов 22.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
// пока закоментируем ниже, на время обкатки измененного механизма
	//
	////1. Выборка по узлам
	//ВыборкаПоУзлам = ПланыОбмена.АП_ОбменSolvo.Выбрать();
	//
	//Пока ВыборкаПоУзлам.Следующий() Цикл
	//	
	//	Если ВыборкаПоУзлам.ПометкаУдаления Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если ВыборкаПоУзлам.Склады.Количество() = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если ВыборкаПоУзлам.ПриостановитьОбмен Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Узел = ВыборкаПоУзлам.Ссылка;
	//	
	//	//3. Подключимся к базе Solvo
	//	Соединение = УстановитьСоединение(Узел);
	//	Если Соединение = Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	ПРГАДОКОМ = Неопределено;
	//	
	//	//Настройки = ФобизнесПроцедуры.ПолучитьНастройкиКомиссионнойТорговли(Узел.Организация);
	//	
	//	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Запуск обмена данными с узлом "+Узел.Код);
	//	
	//	//>>>>>>>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Выгрузка начало
	//	//*************************************************************
	//	//1. Классификатор единиц измерения
	//	МассивЭлементов = Новый Массив;
	//	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Справочники.КлассификаторЕдиницИзмерения);
	//	Пока Выборка.Следующий() Цикл
	//		Попытка
	//			ОбъектВыгрузки = Выборка.Получить().Ссылка;
	//			Код = ОбъектВыгрузки.Код;
	//		Исключение
	//			Продолжить;
	//		КонецПопытки;
	//		
	//		Если ВыгрузитьЕдиницуИзмерения(Соединение, ОбъектВыгрузки, Узел, Ложь,ПРГАДОКОМ) Тогда	//Проверяем наличие единицы измерения
	//			Если МассивЭлементов.Найти(ОбъектВыгрузки) = Неопределено Тогда
	//				МассивЭлементов.Добавить(ОбъектВыгрузки);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	//Очистим ссылки на объекты в узле
	//	Для Каждого ТекЭлемент Из МассивЭлементов Цикл
	//		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	//	КонецЦикла;
	//	//*************************************************************
	//	
	//	//*************************************************************
	//	//2. Номенклатура
	//	//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//МассивЭлементов = Новый Массив;
	//	//Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Справочники.Номенклатура);
	//	Выборка   = ВыбратьИзмененияПоУзлу(Узел,Метаданные.Справочники.Номенклатура);
	//	//конец изменений 
	//	Пока Выборка.Следующий() Цикл
	//		
	//		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Ложь);
	//		Если ВыгрузитьНоменклатуру(Соединение, Выборка.Ссылка, Узел, Истина,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//			Если СтруктураПараметров.ПолнаяВыгрузка Тогда // по старому алгоритму не фиксируем выгрузку если не пройдено по условиям
	//			 	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация ,Выборка.Ссылка.Метаданные(),Выборка.Ссылка, "Элемент справочника Номенклатура выгружен");
	//			КонецЕсли;	
	//		Иначе
	//			 ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка ,Выборка.Ссылка.Метаданные(),Выборка.Ссылка, "Элемент справочника Номенклатура не выгружен"); 
	//		КонецЕсли;	
	//		 
	//		Если СтруктураПараметров.КолВоНеудачныхПопыток >= МаксКолвоНеудачныхПопыток Тогда
	//			 //выгрузим при следущем запуске, поскольку идет интенсивная работа с базой
	//			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация ,,, "Выгрузка в солво прервана. Число неудачных попыток превысило максимально допустимое количество.");
	//			возврат;
	//		КонецЕсли;	
	//		//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//		//Попытка
	//		//	ОбъектВыгрузки = Выборка.Получить().Ссылка;
	//		//	Если ОбъектВыгрузки.ЭтоГруппа Тогда
	//		//		Если МассивЭлементов.Найти(ОбъектВыгрузки) = Неопределено Тогда
	//		//			МассивЭлементов.Добавить(ОбъектВыгрузки);
	//		//		КонецЕсли;
	//		//		Продолжить;
	//		//	КонецЕсли;
	//		//Исключение
	//		//	Продолжить;
	//		//КонецПопытки;
	//		//
	//		//Если НЕ ОбъектВыгрузки.ВидНоменклатуры.НСИ_ОбменССолво Тогда  //выгружаем только с признаком вида номенклатуры "Обмен с Солво"
	//		//	Если МассивЭлементов.Найти(ОбъектВыгрузки) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(ОбъектВыгрузки);
	//		//	КонецЕсли;
	//		//	Продолжить;
	//		//КонецЕсли;
	//		//
	//		////начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//		////Если ВыгрузитьНоменклатуру(Соединение, ОбъектВыгрузки, Узел, Истина,ПРГАДОКОМ) Тогда
	//		//Если ВыгрузитьНоменклатуру(Соединение, ОбъектВыгрузки, Узел, Истина,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//		////конец изменений 	
	//		//	Если МассивЭлементов.Найти(ОбъектВыгрузки) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(ОбъектВыгрузки);
	//		//	КонецЕсли;
	//		//КонецЕсли;
	//		//конец изменений 
	//	КонецЦикла;
	//	
	//	//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//регистрация очищается в процедурах выгрузки объекта
	//	//Очистим ссылки на объекты в узле
	//	//Для Каждого ТекЭлемент Из МассивЭлементов Цикл
	//	//	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	//	//КонецЦикла;
	//	//конец изменений 
	//	//*************************************************************
	//	
	//	//*************************************************************
	//	//3. Контрагенты
	//	//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//МассивЭлементов = Новый Массив;
	//	//Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Справочники.Контрагенты);
	//	Выборка   = ВыбратьИзмененияПоУзлу(Узел,Метаданные.Справочники.Контрагенты);
	//	//конец изменений 
	//	Пока Выборка.Следующий() Цикл
	//		
	//		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Ложь);
	//		Если ВыгрузитьКонтрагента(Соединение, Выборка.Ссылка, Узел, Истина,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//			Если СтруктураПараметров.ПолнаяВыгрузка Тогда // по старому алгоритму не фиксируем выгрузку если не пройдено по условиям
	//			 	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация ,Выборка.Ссылка.Метаданные(),Выборка.Ссылка, "Элемент справочника Контрагенты выгружен.");
	//			КонецЕсли;	
	//		Иначе
	//			 ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка ,Выборка.Ссылка.Метаданные(),Выборка.Ссылка, "Элемент справочника Контрагенты не выгружен."); 
	//		КонецЕсли;	
	//		 
	//		Если СтруктураПараметров.КолВоНеудачныхПопыток >= МаксКолвоНеудачныхПопыток Тогда
	//			 //выгрузим при следущем запуске, поскольку идет интенсивная работа с базой
	//			 ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация ,,, "Выгрузка в солво прервана. Число неудачных попыток превысило максимально допустимое количество.");
	//			возврат;
	//		КонецЕсли;	
	//		 
	//		 
	//		//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//		//Попытка
	//		//	ОбъектВыгрузки = Выборка.Получить().Ссылка;
	//		//	Если ОбъектВыгрузки.ЭтоГруппа Тогда
	//		//		Если МассивЭлементов.Найти(ОбъектВыгрузки) = Неопределено Тогда
	//		//			МассивЭлементов.Добавить(ОбъектВыгрузки);
	//		//		КонецЕсли;
	//		//		Продолжить;
	//		//	КонецЕсли;
	//		//Исключение
	//		//	Продолжить;
	//		//КонецПопытки;
	//		//
	//		//Если НЕ ОбъектВыгрузки.НСИ_ОбменССолво Тогда  //выгружаем только с признаком "Обмен с Солво"
	//		//	Если МассивЭлементов.Найти(ОбъектВыгрузки) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(ОбъектВыгрузки);
	//		//	КонецЕсли;
	//		//	Продолжить;
	//		//КонецЕсли;
	//		//
	//		////начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//		////Если ВыгрузитьКонтрагента(Соединение, ОбъектВыгрузки, Узел, Истина,ПРГАДОКОМ) Тогда
	//		//Если ВыгрузитьКонтрагента(Соединение, ОбъектВыгрузки, Узел, Истина,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//		////конец изменений 				
	//		//	Если МассивЭлементов.Найти(ОбъектВыгрузки) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(ОбъектВыгрузки);
	//		//	КонецЕсли;
	//		//КонецЕсли;
	//		//конец изменений 
	//	КонецЦикла;
	//	
	//	//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//регистрация очищается в процедурах выгрузки объекта
	//	//Очистим ссылки на объекты в узле
	//	//Для Каждого ТекЭлемент Из МассивЭлементов Цикл
	//	//	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	//	//КонецЦикла;
	//	//конец изменений 
	//	//*************************************************************	
	//	
	//	//*************************************************************
	//	//4. Задания на подбор
	//	//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//МассивЭлементов = Новый Массив;
	//	//МассивВыгруженных = Новый Массив;
	//	//Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.СП_ЗаданиеНаПодбор);
	//	//конец изменений 
	//	Выборка   = ВыбратьИзмененияПоУзлу(Узел,Метаданные.Документы.СП_ЗаданиеНаПодбор);
	//	Пока Выборка.Следующий() Цикл
	//		
	//		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Ложь);
	//		Если ВыгрузитьЗаданиеНаПодбор(Соединение, Выборка.Ссылка, Узел,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//				Если СтруктураПараметров.ПолнаяВыгрузка Тогда // по старому алгоритму не фиксируем выгрузку если не пройдено по условиям
	//					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, Выборка.Ссылка.Метаданные(), Выборка.Ссылка, "Задание на подбор выгружено");
	//					#Если Клиент Тогда
	//						Сообщить("Задание на подбор "+Выборка.Ссылка+" выгружено", СтатусСообщения.Информация);
	//					#КонецЕсли
	//			 	КонецЕсли;	
	//		Иначе
	//				#Если Клиент Тогда
	//					Сообщить("Задание на подбор "+Выборка.Ссылка+" не выгружено", СтатусСообщения.Внимание);
	//				#КонецЕсли
	//				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,Выборка.Ссылка.Метаданные(),Выборка.Ссылка, "Задание на подбор не выгружено ");
	//		КонецЕсли;
	//			
	//		Если СтруктураПараметров.КолВоНеудачныхПопыток >= МаксКолвоНеудачныхПопыток Тогда
	//				 //выгрузим при следущем запуске, поскольку идет интенсивная работа с базой
	//				 ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация ,,, "Выгрузка в солво прервана. Число неудачных попыток превысило максимально допустимое количество.");
	//				возврат;
	//		КонецЕсли;	
	//			
	//		//Попытка
	//		//	ЗаданиеНаПодбор = Выборка.Получить().Ссылка;
	//		//	Номер = ЗаданиеНаПодбор.Номер;
	//		//Исключение
	//		//	Продолжить;
	//		//КонецПопытки;
	//		//
	//		//Если ЗаданиеНаПодбор.Организация <> Узел.Организация Тогда
	//		//	Если МассивЭлементов.Найти(ЗаданиеНаПодбор) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(ЗаданиеНаПодбор);
	//		//	КонецЕсли;
	//		//ИначеЕсли ЗаданиеНаПодбор.Проведен = Ложь Тогда
	//		//	Если МассивЭлементов.Найти(ЗаданиеНаПодбор) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(ЗаданиеНаПодбор);
	//		//	КонецЕсли;
	//		//ИначеЕсли ЗаданиеНаПодбор.Дата < ДатаОтсечки Тогда
	//		//	Если МассивЭлементов.Найти(ЗаданиеНаПодбор) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(ЗаданиеНаПодбор);
	//		//	КонецЕсли;
	//		//ИначеЕсли ЗаданиеНаПодбор.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.ПереданНаСклад И (Узел.Склады.Найти(ЗаданиеНаПодбор.Склад, "Склад")<>Неопределено) И ЗаданиеНаПодбор.Склад.НСИ_ПодключенКSolvo Тогда		//Выгружаем только с этим статусом
	//		//	//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//		//	Если ВыгрузитьЗаданиеНаПодбор(Соединение, ЗаданиеНаПодбор, Узел,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//		//	//конец изменений 	
	//		//		Если МассивЭлементов.Найти(ЗаданиеНаПодбор) = Неопределено Тогда
	//		//			МассивЭлементов.Добавить(ЗаданиеНаПодбор);
	//		//		КонецЕсли;
	//		//		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,ЗаданиеНаПодбор, "Задание на подбор выгружено");
	//		//		#Если Клиент Тогда
	//		//			Сообщить("Задание на подбор "+ЗаданиеНаПодбор+" выгружено", СтатусСообщения.Информация);
	//		//		#КонецЕсли
	//		//		
	//		//		МассивВыгруженных.Добавить(ЗаданиеНаПодбор);
	//		//	Иначе
	//		//		#Если Клиент Тогда
	//		//			Сообщить("Задание на подбор "+ЗаданиеНаПодбор+" не выгружено", СтатусСообщения.Внимание);
	//		//		#КонецЕсли
	//		//		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,,ЗаданиеНаПодбор, "Задание на подбор не выгружено ");
	//		//	КонецЕсли;
	//		//Иначе
	//		//	Если МассивЭлементов.Найти(ЗаданиеНаПодбор) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(ЗаданиеНаПодбор);
	//		//	КонецЕсли;
	//		//КонецЕсли;
	//	КонецЦикла;
	//	
	//	//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//Очистим ссылки на объекты в узле
	//	//Для Каждого ТекЭлемент Из МассивЭлементов Цикл
	//	//	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	//	//КонецЦикла;
	//	//конец изменений 
	//	//*************************************************************
	//	
	//	//*************************************************************
	//	//4. Перемещение товаров
	//	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//МассивЭлементов = Новый Массив; МассивВыгруженных = Новый Массив;
	//	//Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.ПеремещениеТоваров);
	//	Выборка   = ВыбратьИзмененияПоУзлу(Узел,Метаданные.Документы.ПеремещениеТоваров);
	//	ИмяДока  = Метаданные.Документы.ПеремещениеТоваров.Синоним;
	//	//конец изменений 
	//	Пока Выборка.Следующий() Цикл
	//		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//		
	//		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Ложь);
	//		Если ВыгрузитьПеремещениеТоваров(Соединение, Выборка.Ссылка, Узел,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//				Если СтруктураПараметров.ПолнаяВыгрузка Тогда // по старому алгоритму не фиксируем выгрузку если не пройдено по условиям
	//					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ИмяДока+" выгружено");
	//					#Если Клиент Тогда
	//						Сообщить("Документ "+Выборка.Ссылка+" выгружен", СтатусСообщения.Информация);
	//					#КонецЕсли
	//			 	КонецЕсли;	
	//		Иначе
	//				#Если Клиент Тогда
	//					Сообщить("Документ "+Выборка.Ссылка+" не выгружен", СтатусСообщения.Внимание);
	//				#КонецЕсли
	//				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,Выборка.Ссылка.Метаданные(),Выборка.Ссылка, ИмяДока+" не выгружено.");
	//		КонецЕсли;
	//			
	//		Если СтруктураПараметров.КолВоНеудачныхПопыток >= МаксКолвоНеудачныхПопыток Тогда
	//				 //выгрузим при следущем запуске, поскольку идет интенсивная работа с базой
	//				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация ,,, "Выгрузка в солво прервана. Число неудачных попыток превысило максимально допустимое количество.");
	//				возврат;
	//		КонецЕсли;	
	//		
	//		
	//		//Попытка
	//		//	Перемещение = Выборка.Получить().Ссылка;
	//		//	Номер = Перемещение.Номер;
	//		//Исключение
	//		//	Продолжить;
	//		//КонецПопытки;
	//		//
	//		//Если Перемещение.Организация <> Узел.Организация Тогда
	//		//	Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(Перемещение);
	//		//	КонецЕсли;
	//		//ИначеЕсли Перемещение.Проведен = Ложь Тогда
	//		//	Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(Перемещение);
	//		//	КонецЕсли;
	//		//ИначеЕсли НЕ Перемещение.СкладПолучатель.НСИ_ПодключенКSolvo И НЕ Перемещение.СкладОтправитель.НСИ_ПодключенКSolvo Тогда
	//		//	Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(Перемещение);
	//		//	КонецЕсли;
	//		//ИначеЕсли НЕ Перемещение.СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад Тогда
	//		//	Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(Перемещение);
	//		//	КонецЕсли;
	//		//ИначеЕсли Перемещение.Дата < ДатаОтсечки Тогда
	//		//	Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(Перемещение);
	//		//	КонецЕсли;
	//		//Иначе
	//		//	Выгрузили = Ложь;
	//		//	
	//		//	Если Перемещение.СкладОтправитель.НСИ_ПодключенКSolvo И Перемещение.СкладПолучатель.НСИ_ПодключенКSolvo И НЕ Узел.Склады.Найти(Перемещение.СкладОтправитель, "Склад") = Неопределено И НЕ Узел.Склады.Найти(Перемещение.СкладПолучатель, "Склад") = Неопределено Тогда
	//		//		
	//		//		Выгрузили = Выгрузить_ЗаданиеНаСменуСклада(Соединение, Перемещение, Узел,ПРГАДОКОМ);
	//		//		
	//		//	ИначеЕсли Перемещение.СкладОтправитель.НСИ_ПодключенКSolvo И НЕ Узел.Склады.Найти(Перемещение.СкладОтправитель, "Склад") = Неопределено И НЕ Перемещение.СкладПолучатель.НСИ_ПодключенКSolvo Тогда
	//		//		
	//		//		Выгрузили = ВыгрузитьПеремещениеТоваров_Заказ(Соединение, Перемещение, Узел,ПРГАДОКОМ);
	//		//							
	//		//	ИначеЕсли НЕ Перемещение.СкладОтправитель.НСИ_ПодключенКSolvo И Перемещение.СкладПолучатель.НСИ_ПодключенКSolvo И НЕ Узел.Склады.Найти(Перемещение.СкладПолучатель, "Склад") = Неопределено Тогда
	//		//		
	//		//		Выгрузили = ВыгрузитьПеремещениеТоваров_ПО(Соединение, Перемещение, Узел,ПРГАДОКОМ);
	//		//		
	//		//	КонецЕсли;
	//		//	
	//		//	Если Выгрузили Тогда
	//		//		Если МассивЭлементов.Найти(Перемещение) = Неопределено Тогда
	//		//			МассивЭлементов.Добавить(Перемещение);
	//		//		КонецЕсли;
	//		//		МассивВыгруженных.Добавить(Перемещение);
	//		//	КонецЕсли;
	//		//	
	//		//	ОтразитьЗаписьВЖурналеРегистрацииОСтатусеОбмена(Перемещение, Выгрузили);
	//		//	
	//		//КонецЕсли;
	//		//конец изменений 
	//	КонецЦикла;
	//	
	//	//Очистим ссылки на объекты в узле
	//	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//Для Каждого ТекЭлемент Из МассивЭлементов Цикл
	//	//	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	//	//КонецЦикла;
	//	//конец изменений 
	//	//*************************************************************	
	//	
	//	// 5. Поступление товаров и услуг
	//	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//МассивЭлементов = Новый Массив; МассивВыгруженных = Новый Массив;
	//	//Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.ПоступлениеТоваровУслуг);
	//	Выборка   = ВыбратьИзмененияПоУзлу(Узел,Метаданные.Документы.ПоступлениеТоваровУслуг);
	//	ИмяДока  = Метаданные.Документы.ПоступлениеТоваровУслуг.Синоним;
	//	//конец изменений 
	//	Пока Выборка.Следующий() Цикл
	//		
	//		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Ложь);
	//		Если ВыгрузитьПоступлениеТоваровУслуг(Соединение, Выборка.Ссылка, Узел,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//				Если СтруктураПараметров.ПолнаяВыгрузка Тогда // по старому алгоритму не фиксируем выгрузку если не пройдено по условиям
	//					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ИмяДока+" выгружено.");
	//					#Если Клиент Тогда
	//						Сообщить("Документ "+Выборка.Ссылка+" выгружен", СтатусСообщения.Информация);
	//					#КонецЕсли
	//			 	КонецЕсли;	
	//		Иначе
	//				#Если Клиент Тогда
	//					Сообщить("Документ "+Выборка.Ссылка+" не выгружен", СтатусСообщения.Внимание);
	//				#КонецЕсли
	//				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,Выборка.Ссылка.Метаданные(),Выборка.Ссылка, ИмяДока+" не выгружено.");
	//		КонецЕсли;
	//			
	//		Если СтруктураПараметров.КолВоНеудачныхПопыток >= МаксКолвоНеудачныхПопыток Тогда
	//				 //выгрузим при следущем запуске, поскольку идет интенсивная работа с базой
	//				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация ,,, "Выгрузка в солво прервана. Число неудачных попыток превысило максимально допустимое количество.");
	//				возврат;
	//		КонецЕсли;	
	//		
	//		
	//		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//		//Попытка
	//		//	Поступление = Выборка.Получить().Ссылка;
	//		//	Номер = Поступление.Номер;
	//		//Исключение
	//		//	Продолжить;
	//		//КонецПопытки;
	//		//
	//		//Удачно = Истина;
	//		//Удачно = ОбщаяПроверкаНаВозможностьВыгрузить(Поступление, Узел, МассивЭлементов, Поступление.Организация, Поступление.Проведен, Поступление.СкладОрдер, Поступление.Дата);
	//		//
	//		//Если НЕ Поступление.СП_СтатусДокумента = Перечисления.СП_СтатусыПоступленияТоваров.ПереданоНаСклад Тогда
	//		//	Если МассивЭлементов.Найти(Поступление) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(Поступление);
	//		//	КонецЕсли;
	//		//	Удачно = Ложь;
	//		//ИначеЕсли НЕ Поступление.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
	//		//	Если МассивЭлементов.Найти(Поступление) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(Поступление);
	//		//	КонецЕсли;
	//		//	Удачно = Ложь;
	//		//КонецЕсли;
	//		//
	//		//Если Удачно Тогда
	//		//	
	//		//	мВыгружен = Ложь;
	//		//	
	//		//	Если ВыгрузитьПоступлениеТоваровУслуг(Соединение, Поступление, Узел,ПРГАДОКОМ) Тогда
	//		//		Если МассивЭлементов.Найти(Поступление) = Неопределено Тогда
	//		//			МассивЭлементов.Добавить(Поступление);
	//		//		КонецЕсли;
	//		//		МассивВыгруженных.Добавить(Поступление);
	//		//		
	//		//		мВыгружен = Истина;
	//		//		
	//		//	КонецЕсли;
	//		//	
	//		//	ОтразитьЗаписьВЖурналеРегистрацииОСтатусеОбмена(Поступление, мВыгружен);
	//		//	
	//		//КонецЕсли;
	//		//конец изменений 
	//	КонецЦикла;
	//	
	//	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//Очистим ссылки на объекты в узле
	//	//Для Каждого ТекЭлемент Из МассивЭлементов Цикл
	//	//	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	//	//КонецЦикла;
	//	//конец изменений 
	//	//*************************************************************
	//	
	//	// 6. Списание товаров
	//	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//МассивЭлементов = Новый Массив; МассивВыгруженных = Новый Массив;
	//	//Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.СписаниеТоваров);
	//	Выборка   = ВыбратьИзмененияПоУзлу(Узел,Метаданные.Документы.СписаниеТоваров);
	//	ИмяДока  = Метаданные.Документы.СписаниеТоваров.Синоним;
	//	//конец изменений 
	//	Пока Выборка.Следующий() Цикл
	//		
	//		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Ложь);
	//		Если ВыгрузитьСписаниеТоваров_Заказ(Соединение, Выборка.Ссылка, Узел,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//				Если СтруктураПараметров.ПолнаяВыгрузка Тогда // по старому алгоритму не фиксируем выгрузку если не пройдено по условиям
	//					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ИмяДока+" выгружено.");
	//					#Если Клиент Тогда
	//						Сообщить("Документ "+Выборка.Ссылка+" выгружен", СтатусСообщения.Информация);
	//					#КонецЕсли
	//			 	КонецЕсли;	
	//		Иначе
	//				#Если Клиент Тогда
	//					Сообщить("Документ "+Выборка.Ссылка+" не выгружен", СтатусСообщения.Внимание);
	//				#КонецЕсли
	//				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,Выборка.Ссылка.Метаданные(),Выборка.Ссылка, ИмяДока+" не выгружено.");
	//		КонецЕсли;
	//			
	//		Если СтруктураПараметров.КолВоНеудачныхПопыток >= МаксКолвоНеудачныхПопыток Тогда
	//				 //выгрузим при следущем запуске, поскольку идет интенсивная работа с базой
	//				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация ,,, "Выгрузка в солво прервана. Число неудачных попыток превысило максимально допустимое количество.");
	//				возврат;
	//		КонецЕсли;	
	//		
	//		//Попытка
	//		//	СписаниеТоваров = Выборка.Получить().Ссылка;
	//		//	Номер = СписаниеТоваров.Номер;
	//		//Исключение
	//		//	Продолжить;
	//		//КонецПопытки;
	//		//
	//		//Удачно = Истина;
	//		//Удачно = ОбщаяПроверкаНаВозможностьВыгрузить(СписаниеТоваров, Узел, МассивЭлементов, СписаниеТоваров.Организация, СписаниеТоваров.Проведен, СписаниеТоваров.Склад, СписаниеТоваров.Дата);
	//		//
	//		//Если НЕ СписаниеТоваров.ПР_СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.ПереданоНаСклад Тогда
	//		//	Если МассивЭлементов.Найти(СписаниеТоваров) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(СписаниеТоваров);
	//		//	КонецЕсли;
	//		//	Удачно = Ложь;
	//		//ИначеЕсли НЕ СписаниеТоваров.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция Тогда
	//		//	Если МассивЭлементов.Найти(СписаниеТоваров) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(СписаниеТоваров);
	//		//	КонецЕсли;
	//		//	Удачно = Ложь;
	//		//ИначеЕсли СписаниеТоваров.СП_НеОтражатьВСолво Тогда
	//		//	Если МассивЭлементов.Найти(СписаниеТоваров) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(СписаниеТоваров);
	//		//	КонецЕсли;
	//		//	Удачно = Ложь;
	//		//КонецЕсли;
	//		//
	//		//Если Удачно Тогда
	//		//	
	//		//	мВыгружен = Ложь;
	//		//	
	//		//	Если ВыгрузитьСписаниеТоваров_Заказ(Соединение, СписаниеТоваров, Узел,ПРГАДОКОМ) Тогда
	//		//		Если МассивЭлементов.Найти(СписаниеТоваров) = Неопределено Тогда
	//		//			МассивЭлементов.Добавить(СписаниеТоваров);
	//		//		КонецЕсли;
	//		//		МассивВыгруженных.Добавить(СписаниеТоваров);
	//		//		
	//		//		мВыгружен = Истина;
	//		//	КонецЕсли;
	//		//	
	//		//	ОтразитьЗаписьВЖурналеРегистрацииОСтатусеОбмена(СписаниеТоваров, мВыгружен);
	//		//	
	//		//КонецЕсли;
	//	КонецЦикла;
	//	
	//	//Очистим ссылки на объекты в узле
	//	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//Для Каждого ТекЭлемент Из МассивЭлементов Цикл
	//	//	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	//	//КонецЦикла;
	//	//конец изменений 
	//	//*************************************************************
	//	
	//	// 7. Комплектация номенклатуры
	//	МассивЭлементов = Новый Массив; МассивВыгруженных = Новый Массив;
	//	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.КомплектацияНоменклатуры);
	//	Пока Выборка.Следующий() Цикл
	//		Попытка
	//			Комплектация = Выборка.Получить().Ссылка;
	//			Номер = Комплектация.Номер;
	//		Исключение
	//			Продолжить;
	//		КонецПопытки;
	//		
	//		Удачно = Истина;
	//		Удачно = ОбщаяПроверкаНаВозможностьВыгрузить(Комплектация, Узел, МассивЭлементов, Комплектация.Организация, Комплектация.Проведен, Комплектация.Склад, Комплектация.Дата);
	//		
	//		Если НЕ Комплектация.СП_СтатусДокумента = Перечисления.СП_СтатусыКомплектацииНоменклатуры.ПереданоНаСклад Тогда
	//			Если МассивЭлементов.Найти(Комплектация) = Неопределено Тогда
	//				МассивЭлементов.Добавить(Комплектация);
	//			КонецЕсли;
	//			Удачно = Ложь;
	//		ИначеЕсли НЕ Комплектация.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
	//			Если МассивЭлементов.Найти(Комплектация) = Неопределено Тогда
	//				МассивЭлементов.Добавить(Комплектация);
	//			КонецЕсли;
	//			Удачно = Ложь;
	//		КонецЕсли;
	//		
	//		Если Удачно Тогда
	//			
	//			мВыгружен = Ложь;
	//			
	//			Если Выгрузить_ЗаданиеНаСменуТовара(Соединение, Комплектация, Узел,ПРГАДОКОМ, СтруктураПараметров) Тогда
	//				Если МассивЭлементов.Найти(Комплектация) = Неопределено Тогда
	//					МассивЭлементов.Добавить(Комплектация);
	//				КонецЕсли;
	//				МассивВыгруженных.Добавить(Комплектация);
	//				
	//				мВыгружен = Истина;
	//				
	//			КонецЕсли;				
	//			
	//			ОтразитьЗаписьВЖурналеРегистрацииОСтатусеОбмена(Комплектация, мВыгружен);
	//			
	//		КонецЕсли; 
	//		
	//	КонецЦикла;
	//	
	//	//Очистим ссылки на объекты в узле
	//	Для Каждого ТекЭлемент Из МассивЭлементов Цикл
	//		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	//	КонецЦикла;
	//	//*************************************************************
	//	
	//	// 8. Требование накладная
	//	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//МассивЭлементов = Новый Массив; МассивВыгруженных = Новый Массив;
	//	//Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.ТребованиеНакладная);
	//	Выборка   = ВыбратьИзмененияПоУзлу(Узел,Метаданные.Документы.ТребованиеНакладная);
	//	ИмяДока  = Метаданные.Документы.ТребованиеНакладная.Синоним;
	//	//конец изменений 
	//	Пока Выборка.Следующий() Цикл
	//		
	//		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Ложь);
	//		Если ВыгрузитьТребованиеНакладная_Заказ(Соединение, Выборка.Ссылка, Узел,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//				Если СтруктураПараметров.ПолнаяВыгрузка Тогда // по старому алгоритму не фиксируем выгрузку если не пройдено по условиям
	//					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ИмяДока+" выгружено.");
	//					#Если Клиент Тогда
	//						Сообщить("Документ "+Выборка.Ссылка+" выгружен", СтатусСообщения.Информация);
	//					#КонецЕсли
	//			 	КонецЕсли;	
	//		Иначе
	//				#Если Клиент Тогда
	//					Сообщить("Документ "+Выборка.Ссылка+" не выгружен", СтатусСообщения.Внимание);
	//				#КонецЕсли
	//				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,Выборка.Ссылка.Метаданные(),Выборка.Ссылка, ИмяДока+" не выгружено.");
	//		КонецЕсли;
	//			
	//		Если СтруктураПараметров.КолВоНеудачныхПопыток >= МаксКолвоНеудачныхПопыток Тогда
	//				 //выгрузим при следущем запуске, поскольку идет интенсивная работа с базой
	//				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация ,,, "Выгрузка в солво прервана. Число неудачных попыток превысило максимально допустимое количество.");
	//				возврат;
	//		КонецЕсли;	
	//		
	//		
	//		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//		//Попытка
	//		//	ТребованиеНакладная = Выборка.Получить().Ссылка;
	//		//	Номер = ТребованиеНакладная.Номер;
	//		//Исключение
	//		//	Продолжить;
	//		//КонецПопытки;
	//		//
	//		//Удачно = Истина;
	//		//Удачно = ОбщаяПроверкаНаВозможностьВыгрузить(ТребованиеНакладная, Узел, МассивЭлементов, ТребованиеНакладная.Организация, ТребованиеНакладная.Проведен, ТребованиеНакладная.Склад, ТребованиеНакладная.Дата);
	//		//
	//		//Если НЕ ТребованиеНакладная.СП_СтатусТребованияНакладной = Перечисления.СП_СтатусыТребованияНакладной.ПереданНаСклад Тогда
	//		//	Если МассивЭлементов.Найти(ТребованиеНакладная) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(ТребованиеНакладная);
	//		//	КонецЕсли;
	//		//	Удачно = Ложь;
	//		//КонецЕсли;
	//		//
	//		//Если Удачно Тогда

	//		//	мВыгружен = Ложь;
	//		//	
	//		//	Если ВыгрузитьТребованиеНакладная_Заказ(Соединение, ТребованиеНакладная, Узел,ПРГАДОКОМ) Тогда
	//		//		Если МассивЭлементов.Найти(ТребованиеНакладная) = Неопределено Тогда
	//		//			МассивЭлементов.Добавить(ТребованиеНакладная);
	//		//		КонецЕсли;
	//		//		МассивВыгруженных.Добавить(ТребованиеНакладная);
	//		//		
	//		//		мВыгружен = Истина;
	//		//		
	//		//	КонецЕсли;			
	//		//	
	//		//	ОтразитьЗаписьВЖурналеРегистрацииОСтатусеОбмена(ТребованиеНакладная, мВыгружен);
	//		//	
	//		//КонецЕсли; 
	//		//конец изменений 
	//	КонецЦикла;
	//	
	//	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//Очистим ссылки на объекты в узле
	//	//Для Каждого ТекЭлемент Из МассивЭлементов Цикл
	//	//	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	//	//КонецЦикла;
	//	//конец изменений 
	//	//*************************************************************
	//	
	//	// 9. Задание на смену
	//	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//МассивЭлементов = Новый Массив; МассивВыгруженных = Новый Массив;
	//	//Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.СП_ЗаданиеНаСмену);
	//	Выборка   = ВыбратьИзмененияПоУзлу(Узел,Метаданные.Документы.СП_ЗаданиеНаСмену);
	//	ИмяДока  = Метаданные.Документы.СП_ЗаданиеНаСмену.Синоним;
	//	//конец изменений 
	//	Пока Выборка.Следующий() Цикл
	//		
	//			СтруктураПараметров.Вставить("ПолнаяВыгрузка",Ложь);
	//			Если ВыгрузитьЗаданиеНаСмену(Соединение, Выборка.Ссылка, Узел,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//					Если СтруктураПараметров.ПолнаяВыгрузка Тогда // по старому алгоритму не фиксируем выгрузку если не пройдено по условиям
	//						ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ИмяДока+" выгружено.");
	//						#Если Клиент Тогда
	//							Сообщить("Документ "+Выборка.Ссылка+" выгружен", СтатусСообщения.Информация);
	//						#КонецЕсли
	//				 	КонецЕсли;	
	//			Иначе
	//					#Если Клиент Тогда
	//						Сообщить("Документ "+Выборка.Ссылка+" не выгружен", СтатусСообщения.Внимание);
	//					#КонецЕсли
	//					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,Выборка.Ссылка.Метаданные(),Выборка.Ссылка, ИмяДока+" не выгружено.");
	//			КонецЕсли;
	//				
	//			Если СтруктураПараметров.КолВоНеудачныхПопыток >= МаксКолвоНеудачныхПопыток Тогда
	//					 //выгрузим при следущем запуске, поскольку идет интенсивная работа с базой
	//					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация ,,, "Выгрузка в солво прервана. Число неудачных попыток превысило максимально допустимое количество.");
	//					возврат;
	//			КонецЕсли;	
	//		
	//			//Попытка
	//			//	СП_ЗаданиеНаСмену = Выборка.Получить().Ссылка;
	//			//	Номер = СП_ЗаданиеНаСмену.Номер;
	//			//Исключение
	//			//	Продолжить;
	//			//КонецПопытки;
	//			//
	//			//Удачно = Истина;
	//			//Удачно = ОбщаяПроверкаНаВозможностьВыгрузить(СП_ЗаданиеНаСмену, Узел, МассивЭлементов, СП_ЗаданиеНаСмену.Организация, СП_ЗаданиеНаСмену.Проведен, СП_ЗаданиеНаСмену.Склад, СП_ЗаданиеНаСмену.Дата);
	//			//
	//			//Если НЕ СП_ЗаданиеНаСмену.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.ПереданоНаСклад Тогда
	//			//	Если МассивЭлементов.Найти(СП_ЗаданиеНаСмену) = Неопределено Тогда
	//			//		МассивЭлементов.Добавить(СП_ЗаданиеНаСмену);
	//			//	КонецЕсли;
	//			//	Удачно = Ложь;
	//			//КонецЕсли;
	//			//
	//			//Если Удачно Тогда
	//			//	
	//			//	мВыгружен = Ложь;
	//			//	
	//			//	Если ВыгрузитьЗаданиеНаСмену(Соединение, СП_ЗаданиеНаСмену, Узел,ПРГАДОКОМ) Тогда
	//			//		Если МассивЭлементов.Найти(СП_ЗаданиеНаСмену) = Неопределено Тогда
	//			//			МассивЭлементов.Добавить(СП_ЗаданиеНаСмену);
	//			//		КонецЕсли;
	//			//		МассивВыгруженных.Добавить(СП_ЗаданиеНаСмену);
	//			//		
	//			//		мВыгружен = Истина;
	//			//		
	//			//	КонецЕсли;		
	//			//	
	//			//	ОтразитьЗаписьВЖурналеРегистрацииОСтатусеОбмена(СП_ЗаданиеНаСмену, мВыгружен);
	//			//	
	//			//КонецЕсли; 
	//		
	//	КонецЦикла;
	//	
	//	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//Очистим ссылки на объекты в узле
	//	//Для Каждого ТекЭлемент Из МассивЭлементов Цикл
	//	//	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	//	//КонецЦикла;
	//	//конец изменений 
	//	//*************************************************************	
	//	
	//	// 9. Претензия
	//	МассивЭлементов = Новый Массив; МассивВыгруженных = Новый Массив;
	//	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.ПР_Претензия);
	//	Пока Выборка.Следующий() Цикл
	//		Попытка
	//			ПР_Претензия = Выборка.Получить().Ссылка;
	//			Номер = ПР_Претензия.Номер;
	//		Исключение
	//			Продолжить;
	//		КонецПопытки;
	//		
	//		Накладная = ПР_Претензия.Накладная;
	//		
	//		Если ТипЗнч(Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда				
	//			мСклад = Накладная.Склад;				
	//		ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда				
	//			мСклад = Накладная.Склад;				
	//		ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда				
	//			Продолжить;				
	//		КонецЕсли;
	//		
	//		Удачно = Истина;
	//		Удачно = ОбщаяПроверкаНаВозможностьВыгрузить(ПР_Претензия, Узел, МассивЭлементов, ПР_Претензия.Организация, ПР_Претензия.Проведен, мСклад, ПР_Претензия.Дата);
	//		
	//		Если НЕ ПР_Претензия.СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.ПереданоНаСклад Тогда
	//			Если МассивЭлементов.Найти(ПР_Претензия) = Неопределено Тогда
	//				МассивЭлементов.Добавить(ПР_Претензия);
	//			КонецЕсли;
	//			Удачно = Ложь;
	//		КонецЕсли;
	//		
	//		Если Удачно Тогда
	//			
	//			мВыгружен = Ложь;
	//			
	//			Если ВыгрузитьПретензию(Соединение, ПР_Претензия, Узел,ПРГАДОКОМ) Тогда
	//				Если МассивЭлементов.Найти(ПР_Претензия) = Неопределено Тогда
	//					МассивЭлементов.Добавить(ПР_Претензия);
	//				КонецЕсли;
	//				МассивВыгруженных.Добавить(ПР_Претензия);
	//				
	//				мВыгружен = Истина;
	//			КонецЕсли;
	//			
	//			ОтразитьЗаписьВЖурналеРегистрацииОСтатусеОбмена(ПР_Претензия, мВыгружен);
	//			
	//		КонецЕсли; 
	//		
	//	КонецЦикла;
	//	
	//	//Очистим ссылки на объекты в узле
	//	Для Каждого ТекЭлемент Из МассивЭлементов Цикл
	//		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	//	КонецЦикла;
	//	//*************************************************************
	//	
	//	// 10. План доставки
	//	МассивЭлементов = Новый Массив; МассивВыгруженных = Новый Массив;
	//	//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//поменяем  выборку н а запрос, т.к. возникают постоянные конфликты блокировки и номер отправленного сообщения не используется
	//	//	ПРГ_ЗапросКРегПлану = Новый Запрос("ВЫБРАТЬ
	//	//								   |	ПТЛ_ПланДоставкиИзменения.Ссылка,
	//	//								   |	ПТЛ_ПланДоставкиИзменения.Узел
	//	//								   |ИЗ
	//	//								   |	Документ.ПТЛ_ПланДоставки.Изменения КАК ПТЛ_ПланДоставкиИзменения
	//	//								   |ГДЕ
	//	//								   |	ПТЛ_ПланДоставкиИзменения.Узел = &Узел");
	//	//								   
	//	//ПРГ_ЗапросКРегПлану.УстановитьПараметр("Узел",Узел);
	//	//Выборка = ПРГ_ЗапросКРегПлану.Выполнить().Выбрать();
	//	//Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.ПТЛ_ПланДоставки);
	//	Выборка   = ВыбратьИзмененияПоУзлу(Узел,Метаданные.Документы.ПТЛ_ПланДоставки);
	//	//конец изменений 
	//	Пока Выборка.Следующий() Цикл
	//		
	//			СтруктураПараметров.Вставить("ПолнаяВыгрузка",Ложь);
	//			Если ВыгрузитьПланДоставки(Соединение, Выборка.Ссылка, Узел,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//				Если СтруктураПараметров.ПолнаяВыгрузка Тогда // по старому алгоритму не фиксируем выгрузку если не пройдено по условиям
	//					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, Выборка.Ссылка.Метаданные(), Выборка.Ссылка, "План доставки выгружен");
	//					#Если Клиент Тогда
	//						Сообщить("План доставки "+Выборка.Ссылка+" выгружен", СтатусСообщения.Информация);
	//					#КонецЕсли
	//				КонецЕсли;	
	//			Иначе
	//				#Если Клиент Тогда
	//					Сообщить("План доставки "+Выборка.Ссылка+" не выгружен", СтатусСообщения.Внимание);
	//				#КонецЕсли
	//				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,Выборка.Ссылка.Метаданные(),Выборка.Ссылка, "План доставки не выгружен.");
	//			КонецЕсли;
	//			
	//			Если СтруктураПараметров.КолВоНеудачныхПопыток >= МаксКолвоНеудачныхПопыток Тогда
	//				 //выгрузим при следущем запуске, поскольку идет интенсивная работа с базой
	//				 ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация ,,, "Выгрузка в солво прервана. Число неудачных попыток превысило максимально допустимое количество.");
	//				возврат;
	//			КонецЕсли;	
	//		
	//		//Попытка
	//		//	//начало изменений Ожиганов 26.11.2015 устранение конфликта блокировок, при выгрузке плана доставки в Солво
	//		//	ПТЛ_ПланДоставки = Выборка.Ссылка;
	//		//	//ПТЛ_ПланДоставки = Выборка.Получить().Ссылка;
	//		//	//конец изменений 
	//		//	Номер = ПТЛ_ПланДоставки.Номер;
	//		//Исключение
	//		//	Продолжить;
	//		//КонецПопытки;
	//		//
	//		//мСклад = Узел.Склады[0].Склад;
	//		//
	//		//Удачно = Истина;
	//		//Удачно = ОбщаяПроверкаНаВозможностьВыгрузить(ПТЛ_ПланДоставки, Узел, МассивЭлементов, ПТЛ_ПланДоставки.Организация, ПТЛ_ПланДоставки.Проведен, мСклад, ПТЛ_ПланДоставки.Дата);
	//		//
	//		//Если НЕ ПТЛ_ПланДоставки.СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен Тогда
	//		//	Если МассивЭлементов.Найти(ПТЛ_ПланДоставки) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(ПТЛ_ПланДоставки);
	//		//	КонецЕсли;
	//		//	Удачно = Ложь;
	//		//ИначеЕсли Узел.Отделения.Найти(ПТЛ_ПланДоставки.Отделение, "Отделение") = Неопределено Тогда				
	//		//	Если МассивЭлементов.Найти(ПТЛ_ПланДоставки) = Неопределено Тогда
	//		//		МассивЭлементов.Добавить(ПТЛ_ПланДоставки);
	//		//	КонецЕсли;
	//		//	Удачно = Ложь;
	//		//КонецЕсли;
	//		//
	//		//Если Удачно Тогда
	//		//	
	//		//	мВыгружен = Ложь;
	//		//	
	//		//	Если ВыгрузитьПланДоставки(Соединение, ПТЛ_ПланДоставки, Узел,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//		//		Если МассивЭлементов.Найти(ПТЛ_ПланДоставки) = Неопределено Тогда
	//		//			МассивЭлементов.Добавить(ПТЛ_ПланДоставки);
	//		//		КонецЕсли;
	//		//		МассивВыгруженных.Добавить(ПТЛ_ПланДоставки);
	//		//		
	//		//		мВыгружен = Истина;
	//		//		
	//		//	КонецЕсли;
	//		//	
	//		//	ОтразитьЗаписьВЖурналеРегистрацииОСтатусеОбмена(ПТЛ_ПланДоставки, мВыгружен);
	//		//	
	//		//КонецЕсли; 
	//		
	//	КонецЦикла;
	//	
	//	//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//Очистим ссылки на объекты в узле
	//	//Для Каждого ТекЭлемент Из МассивЭлементов Цикл
	//	//	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	//	//КонецЦикла;
	//	//конец изменений 
	//	//*************************************************************
	//	
	//	//++ Spl_Апроф 25.02.2015 (k.russkih@a-prof.ru)
	//	//*************************************************************
	//	//4. Возврат товаров поставщику
	//	МассивЭлементов = Новый Массив;
	//	МассивВыгруженных = Новый Массив;
	//	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, Метаданные.Документы.ВозвратТоваровПоставщику);
	//	Пока Выборка.Следующий() Цикл
	//		Попытка
	//			ВозвратТоваровПоставщику = Выборка.Получить().Ссылка;
	//			Номер = ВозвратТоваровПоставщику.Номер;
	//		Исключение
	//			Продолжить;
	//		КонецПопытки;
	//		
	//		Если ВозвратТоваровПоставщику.Организация <> Узел.Организация Тогда
	//			Если МассивЭлементов.Найти(ВозвратТоваровПоставщику) = Неопределено Тогда
	//				МассивЭлементов.Добавить(ВозвратТоваровПоставщику);
	//			КонецЕсли;
	//		ИначеЕсли ВозвратТоваровПоставщику.Проведен = Ложь Тогда
	//			Если МассивЭлементов.Найти(ВозвратТоваровПоставщику) = Неопределено Тогда
	//				МассивЭлементов.Добавить(ВозвратТоваровПоставщику);
	//			КонецЕсли;
	//		ИначеЕсли ВозвратТоваровПоставщику.Дата < ДатаОтсечки Тогда
	//			Если МассивЭлементов.Найти(ВозвратТоваровПоставщику) = Неопределено Тогда
	//				МассивЭлементов.Добавить(ВозвратТоваровПоставщику);
	//			КонецЕсли;
	//		ИначеЕсли ВозвратТоваровПоставщику.СП_СтатусДокумента = Перечисления.СП_СтатусыВозвратТоваровПоставщику.ПереданНаСклад И (Узел.Склады.Найти(ВозвратТоваровПоставщику.Склад, "Склад")<>Неопределено) И ВозвратТоваровПоставщику.Склад.НСИ_ПодключенКSolvo Тогда		//Выгружаем только с этим статусом
	//			Если ВыгрузитьВозвратТоваровПоставщику(Соединение, ВозвратТоваровПоставщику, Узел,ПРГАДОКОМ,СтруктураПараметров) Тогда
	//				Если МассивЭлементов.Найти(ВозвратТоваровПоставщику) = Неопределено Тогда
	//					МассивЭлементов.Добавить(ВозвратТоваровПоставщику);
	//				КонецЕсли;
	//				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,ВозвратТоваровПоставщику, "Возврат товаров поставщику выгружено");
	//				#Если Клиент Тогда
	//					Сообщить("Возврат товаров поставщику "+ВозвратТоваровПоставщику+" выгружено", СтатусСообщения.Информация);
	//				#КонецЕсли
	//				
	//				МассивВыгруженных.Добавить(ВозвратТоваровПоставщику);
	//			Иначе
	//				#Если Клиент Тогда
	//					//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//					//Сообщить("Возврат товаров поставщику "+ЗаданиеНаПодбор+" не выгружено", СтатусСообщения.Внимание);
	//					Сообщить("Возврат товаров поставщику "+ВозвратТоваровПоставщику+" не выгружено", СтатусСообщения.Внимание);
	//					//конец изменений 
	//				#КонецЕсли
	//				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,,ВозвратТоваровПоставщику, "Возврат товаров поставщику не выгружен ");
	//			КонецЕсли;
	//		Иначе
	//			Если МассивЭлементов.Найти(ВозвратТоваровПоставщику) = Неопределено Тогда
	//				МассивЭлементов.Добавить(ВозвратТоваровПоставщику);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	//Очистим ссылки на объекты в узле
	//	Для Каждого ТекЭлемент Из МассивЭлементов Цикл
	//		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекЭлемент);
	//	КонецЦикла;
	//	//*************************************************************
	//	//<<<<<<<---------------------------------------------------------------- Выгрузка окончание
	//	
	//	//>>>>>>>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Загрузка начало
	//	//Обратная загрузка данных из СОЛВО в 1С
	//	//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//убрать из кода
	//	//Если Не НеЗагружать Тогда
	//	//конец изменений 	
	//	
	//	
	//	Загрузка_Данных_ИзСолво(Соединение, Узел);		
	//	
	//	//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//	//убрать из кода
	//	//конецЕсли;
	//	//конец изменений 
	//	
	//	//<<<<<<<---------------------------------------------------------------- Загрузка окончание
	//	
	//КонецЦикла;
	//конец изменений 
КонецПроцедуры

//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
//Процедура ВыгрузитьТекущийОбъект(Соединение, Узел, Объект,ПРГАДОКОМ,СтруктураПараметров) Экспорт 
Функция  ВыгрузитьТекущийОбъект(Соединение, Узел, Объект, ПРГАДОКОМ, СтруктураПараметров, ВыгружатьСправочники=Истина) Экспорт 
//конец изменений 	

	СтруктураПараметров = ?(СтруктураПараметров=Неопределено,Новый Структура,СтруктураПараметров);
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		возврат ВыгрузитьНоменклатуру(Соединение, Объект, Узел, ВыгружатьСправочники, ПРГАДОКОМ,СтруктураПараметров);
		//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ВыгрузитьЕдиницуИзмерения(Соединение, Объект.БазоваяЕдиницаИзмерения, Узел,,ПРГАДОКОМ);
		
		//Если Объект.ВидНоменклатуры.НСИ_ОбменССолво Тогда
		
		//	ВыгрузитьНоменклатуру(Соединение, Объект, Узел,,ПРГАДОКОМ);			
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда	
		возврат ВыгрузитьКонтрагента(Соединение, Объект, Узел, ВыгружатьСправочники, ПРГАДОКОМ, СтруктураПараметров);
		//КонецЕсли; 
		//конец изменений 
	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
	
		возврат ВыгрузитьЕдиницуИзмерения(Соединение, Объект, Узел, ВыгружатьСправочники, ПРГАДОКОМ, СтруктураПараметров);
	//конец изменений 
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
		
		//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//проверку на возможность выгрузки перенесем в в процедуру ВыгрузитьЗаданиеНаПодбор
		возврат ВыгрузитьЗаданиеНаПодбор(Соединение, Объект, Узел,ПРГАДОКОМ,СтруктураПараметров);
		//Если Объект.Склад.НСИ_ПодключенКSolvo Тогда
		//
		//	ВыгрузитьЗаданиеНаПодбор(Соединение, Объект, Узел,ПРГАДОКОМ,СтруктураПараметров);
		//
		//КонецЕсли; 
		//конец изменений 
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") ИЛИ ТипЗнч(Объект) = Тип("СправочникСсылка.Склады") Тогда
		
		возврат ВыгрузитьКонтрагента(Соединение, Объект, Узел, ВыгружатьСправочники, ПРГАДОКОМ);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		возврат ВыгрузитьПоступлениеТоваровУслуг(Соединение, Объект, Узел,ПРГАДОКОМ, СтруктураПараметров);
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если Объект.СкладОрдер.НСИ_ПодключенКSolvo Тогда
		//	ВыгрузитьПоступлениеТоваровУслуг(Соединение, Объект, Узел,ПРГАДОКОМ);
		//КонецЕсли;
		//конец изменений 
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ПТЛ_ПланДоставки") Тогда            
		
		//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ВыгрузитьПланДоставки(Соединение, Объект, Узел,ПРГАДОКОМ);
		возврат  ВыгрузитьПланДоставки(Соединение, Объект, Узел,ПРГАДОКОМ,СтруктураПараметров);
		//конец изменений 
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		
		возврат  Выгрузить_ЗаданиеНаСменуТовара(Соединение, Объект, Узел,ПРГАДОКОМ, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		возврат  ВыгрузитьПеремещениеТоваров(Соединение, Объект, Узел,ПРГАДОКОМ,СтруктураПараметров);
		//Если Объект.СкладОтправитель.НСИ_ПодключенКSolvo И Объект.СкладПолучатель.НСИ_ПодключенКSolvo Тогда
		//
		//	Выгрузить_ЗаданиеНаСменуСклада(Соединение, Объект, Узел,ПРГАДОКОМ);
		//	
		//ИначеЕсли Объект.СкладОтправитель.НСИ_ПодключенКSolvo И НЕ Объект.СкладПолучатель.НСИ_ПодключенКSolvo Тогда
		//	
		//	ВыгрузитьПеремещениеТоваров_Заказ(Соединение, Объект, Узел,ПРГАДОКОМ);
		//	
		//ИначеЕсли НЕ Объект.СкладОтправитель.НСИ_ПодключенКSolvo И Объект.СкладПолучатель.НСИ_ПодключенКSolvo Тогда
		//	
		//	ВыгрузитьПеремещениеТоваров_ПО(Соединение, Объект, Узел,ПРГАДОКОМ);
		//	
		//КонецЕсли; 
		//конец изменений 
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.СП_ЗаданиеНаСмену") Тогда
		
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		возврат  ВыгрузитьЗаданиеНаСмену(Соединение, Объект, Узел,ПРГАДОКОМ,СтруктураПараметров);
		//ВыгрузитьЗаданиеНаСмену(Соединение, Объект, Узел,ПРГАДОКОМ);
		//конец изменений 
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ПР_Претензия") Тогда
		
		//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		возврат  ВыгрузитьПретензию(Соединение, Объект, Узел,ПРГАДОКОМ, СтруктураПараметров);
		//конец изменений 
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		возврат  ВыгрузитьСписаниеТоваров_Заказ(Соединение, Объект, Узел,ПРГАДОКОМ, СтруктураПараметров);
		//ВыгрузитьСписаниеТоваров_Заказ(Соединение, Объект, Узел,ПРГАДОКОМ);
		//конец изменений 
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		возврат  ВыгрузитьТребованиеНакладная_Заказ(Соединение, Объект, Узел,ПРГАДОКОМ,СтруктураПараметров);
		//ВыгрузитьТребованиеНакладная_Заказ(Соединение, Объект, Узел,ПРГАДОКОМ);
		//конец изменений 		
    //начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
	 	  возврат ВыгрузитьВозвратТоваровПоставщику(Соединение, Объект, Узел, ПРГАДОКОМ, СтруктураПараметров);
	//конец изменений 
	КонецЕсли;	

	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	возврат Ложь;
	//конец изменений 
	
КонецФункции
 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////								
// СЕРВИСНЫЕ ПРОЦЕДУРЫ ПО ВЫГРУЗКЕ СПРАВОЧНИКОВ, ДОКУМЕНТОВ В СОЛВО
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Проверяет и выгружает при необходимости справочник номенклатуры. Возвращает признак, что номенклатура выгрузилась удачно
Функция ВыгрузитьНоменклатуру(Соединение, Знач АНоменклатура, Узел, Выгружать = Ложь,ПРГАДОКОМ, СтруктураПараметров = Неопределено) Экспорт
	//начало изменений Ожиганов 13.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	Перем Блокировка, РезВыгрузки,НужноУдалятьРегистрацию;

	Если НЕ ЗначениеЗаполнено(АНоменклатура) Тогда
		Возврат Истина;
	КонецЕсли;	

	Номенклатура = ПрочитатьДанныеПоСсылке(АНоменклатура, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,Выгружать);
	Если  Номенклатура =  Неопределено тогда
		 возврат РезВыгрузки;
	КонецЕсли;	
	
	//Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
	Если НЕ ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
	//конец изменений 
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(Номенклатура.Код) И ПустаяСтрока(Номенклатура.Наименование) Тогда		//Объект удалён
		Возврат Истина;
	//начало изменений Ожиганов 13.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке		
	//ИначеЕсли НЕ Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво Тогда
	ИначеЕсли НЕ Номенклатура.ВидНоменклатуры_НСИ_ОбменССолво Тогда
	//конец изменений 
		Возврат Истина;
	КонецЕсли;
	
	//начало изменений Ожиганов 13.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//Номенклатура = ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(Номенклатура); 
	//в запросе по получению реквизитов явно прописано, если НСИ_НоменклатураОбменаССолво заполнено
	//то происходит подмена номенклатуры, номенклатура = НСИ_НоменклатураОбменаССолво
	//конец изменений 
	
	//Проверим, нужно записывать номенклатуру или просто добавлять
	ТекстЗапроса = "select sdid from sku where sku.sdid = ?";
	//Прочитаем данные из таблицы
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(СокрЛП(Номенклатура.Код));
	
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров,,,Узел,ПРГАДОКОМ);
	Если Рез = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Создавать = Истина;
	Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Тогда
		Создавать = Ложь;
		Если Выгружать = Ложь Тогда		//Номенклатура присутствует в базе Solvo, выгружать не нужно
			//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
			ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,Номенклатура.Ссылка);
			//конец изменений 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Обновляем справочник	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru)
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + СокрЛП(Номенклатура.Код));
	
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли; 
	
	//Сформируем текст пакета
	ЗаписьXML.ЗаписатьНачалоЭлемента("sku");
	ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("action", "set");	
	ЗаписьXML.ЗаписатьАтрибут("sku_id"	, СокрЛП(Номенклатура.Код));
	ЗаписьXML.ЗаписатьАтрибут("sku_code", СокрЛП(Номенклатура.Код));
	ЗаписьXML.ЗаписатьАтрибут("name"	, СокрЛП(Номенклатура.Наименование));
	
	Если НЕ ПустаяСтрока(Номенклатура.НаименованиеПолное) Тогда
		ЗаписьXML.ЗаписатьАтрибут("description", СокрЛП(Номенклатура.НаименованиеПолное));
	КонецЕсли;
	
	Если НЕ Номенклатура.СрокГодности = 0 Тогда
		
		//Параметр, определяет каким образом Солво будет контролировать сроки годности, 0 - Не учитывать, 1 - По сроку годности, 2 - По дате окончания, 3 - По дате производства и дате окончания срока годности
		ЗаписатьАтрибут_XML(ЗаписьXML, "control_date", "1");
		
		//Срок годности товара в сутках, необходим, если “Учет даты” стоит  “По сроку годности”. Значение по умолчанию: 1	
	    ЗаписатьАтрибут_XML(ЗаписьXML, "product_life", Номенклатура.СрокГодности);
		
	КонецЕсли; 
	
	//Параметр товара, указывающий на необходимость ввода партии товара для груза при приеме товара на склад:
	//•	f – Не вводить
	//•	t – Вводить
	//Значение по умолчанию: “f”
	//ЗаписьXML.ЗаписатьАтрибут("lot_capture_req", "f");
	
	//Штрихкод товара
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = "ВЫБРАТЬ
	               |	Штрихкоды.Штрихкод
	               |ИЗ
	               |	РегистрСведений.Штрихкоды КАК Штрихкоды
	               |ГДЕ
	               |	Штрихкоды.Владелец = &Владелец
	               |	И Штрихкоды.ТипШтрихкода = &ТипШтрихкода
	               |	И Штрихкоды.ЕдиницаИзмерения = &ЕдиницаИзмерения";
//начало изменений Ожиганов 13.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 				   
	//мЗапрос.УстановитьПараметр("Владелец"	, Номенклатура);
	мЗапрос.УстановитьПараметр("Владелец"	, Номенклатура.Ссылка);
//конец изменений 	
	мЗапрос.УстановитьПараметр("ТипШтрихкода", ПланыВидовХарактеристик.ТипыШтрихкодов.ITF14);
	//Blik 081216 59934 н
	//мЗапрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ЕдиницаИзмеренияМест); //тут передавалась строка а надо ссылку
	  мЗапрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ССылка.ЕдиницаИзмеренияМест);
	//Blik 081216 59934 к
	мРезультат = мЗапрос.Выполнить().Выбрать();
	
	мШтрихКод = "";
	Если мРезультат.Следующий() Тогда	
		мШтрихКод = мРезультат.ШтрихКод;		
	КонецЕсли;
	
	Если ПустаяСтрока(мШтрихКод) Тогда
		
		//начало изменений Ожиганов 13.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//мЗапрос.УстановитьПараметр("Владелец"	, Номенклатура);
		мЗапрос.УстановитьПараметр("Владелец"	, Номенклатура.Ссылка);
		//конец изменений 
		мЗапрос.УстановитьПараметр("ТипШтрихкода", ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
		//Blik 081216 59934 н
		//мЗапрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.ЕдиницаХраненияОстатков); //тут передавалась строка а надо ссылку
		мЗапрос.УстановитьПараметр("ЕдиницаИзмерения", Номенклатура.Ссылка.ЕдиницаХраненияОстатков);
		//Blik 081216 59934 к
		мРезультат = мЗапрос.Выполнить().Выбрать();
		
		Если мРезультат.Следующий() Тогда
			мШтрихКод = мРезультат.ШтрихКод;
		КонецЕсли;		
	
	КонецЕсли; 
	
	ЗаписатьАтрибут_XML(ЗаписьXML, "upc", мШтрихКод);	
	//начало изменений Ожиганов 13.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписатьАтрибут_XML(ЗаписьXML, "measure", СокрЛП(Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код));
	ЗаписатьАтрибут_XML(ЗаписьXML, "measure", СокрЛП(Номенклатура.ЕдиницаХраненияОстатков_ЕдиницаПоКлассификатору_Код));
	//конец изменений 
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 		
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,Номенклатура.Ссылка);
		//Возврат Истина;		
		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "Sku", ЗаписьXML, Узел, Номенклатура.Ссылка,ПРГАДОКОМ);	
	КонецЕсли; 	
	//-- Spl_Апроф
	
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "Sku", ЗаписьXML, Узел, Номенклатура,ПРГАДОКОМ);
	//перенесем выше 
	
	Если мВозрат  Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,Номенклатура.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Справочник","Номенклатура",Номенклатура.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
	КонецЕсли;	
	
	//конец изменений 
	
	Возврат мВозрат;
	
КонецФункции

//Проверяет и выгружает при необходимости справочник контрагентов. Возвращает индикатор удачного завершения

Функция ВыгрузитьКонтрагента(Соединение, АПолучатель, Узел, Выгружать = Ложь,ПРГАДОКОМ,СтруктураПараметров=Неопределено)
	//начало изменений Ожиганов 13.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	Перем Блокировка, РезВыгрузки,НужноУдалятьРегистрацию;	
	
	Если Не ЗначениеЗаполнено(АПолучатель) Тогда
		возврат Истина;
	КонецЕсли;	
	
	Получатель = ПрочитатьДанныеПоСсылке(АПолучатель, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,Выгружать);
	Если Получатель =  Неопределено тогда
		 возврат РезВыгрузки;
	КонецЕсли;
	
	
	//Если Не ЗначениеЗаполнено(Получатель) Тогда
	Если Не ЗначениеЗаполнено(Получатель.Ссылка) Тогда
	//конец изменений 		
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(Получатель.Код) И ПустаяСтрока(Получатель.Наименование) Тогда		//Объект удалён
		Возврат Истина;
	КонецЕсли;
	
	//Проверим, нужно записывать контрагента или просто добавлять
	ТекстЗапроса = "select sdid from client where client.sdid = ?";
	//Прочитаем данные из таблицы
	МассивПараметров = Новый Массив;
	//начало изменений Ожиганов 13.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//МассивПараметров.Добавить(СокрЛП(Получатель.УникальныйИдентификатор()));	
	МассивПараметров.Добавить(СокрЛП(Получатель.Ссылка.УникальныйИдентификатор()));	
	//конец изменений 
	
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров,,,Узел,ПРГАДОКОМ);
	Если Рез = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	//
	Создавать = Истина;
	Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Тогда
		Создавать = Ложь;
		Если Выгружать = Ложь Тогда		//Номенклатура присутствует в базе Solvo, выгружать не нужно
			//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
			ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,Получатель.Ссылка);
			//конец изменений 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru)
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + Формат(Получатель.Код, "ЧГ=0"));
	
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//начало изменений Ожиганов 13.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мЭтоСклад = (ТипЗнч(Получатель) = Тип("СправочникСсылка.Склады"));
	мЭтоСклад = (ТипЗнч(Получатель.ссылка) = Тип("СправочникСсылка.Склады"));
	//конец изменений 
	
	//Сформируем текст пакета
	ЗаписьXML.ЗаписатьНачалоЭлемента("client");
	
	ЗаписьXML.ЗаписатьАтрибут("syncid"		, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("action"		, "set");	
	//начало изменений Ожиганов 13.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписьXML.ЗаписатьАтрибут("client_id"	, СокрЛП(Получатель.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьАтрибут("client_id"	, СокрЛП(Получатель.Ссылка.УникальныйИдентификатор()));
	//конец изменений 
	ЗаписьXML.ЗаписатьАтрибут("name"		, СокрЛП(Получатель.Наименование));
	
	Запрос = Новый Запрос;
	Если мЭтоСклад Тогда
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АП_ФактАдресАдресаПоставки);
		Запрос.УстановитьПараметр("Контрагент", Получатель.НСИ_АП);
	Иначе
	    Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		//начало изменений Ожиганов 13.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Запрос.УстановитьПараметр("Контрагент", Получатель);
		Запрос.УстановитьПараметр("Контрагент", Получатель.Ссылка);
		//конец изменений 
	КонецЕсли; 
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтактнаяИнформация.Тип,
	               |	КонтактнаяИнформация.Вид,
	               |	КонтактнаяИнформация.Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Контрагент
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид";	   
	//Адрес
	Адрес = "";
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Адрес = СокрЛП(Результат.Представление);
	КонецЕсли;
	
	Если ПустаяСтрока(Адрес) Тогда
		
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		
		Если мЭтоСклад Тогда
			Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АП_ЮрАдресАдресаПоставки);
		Иначе
			Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		КонецЕсли;
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Адрес = СокрЛП(Результат.Представление);
		КонецЕсли;
		
	КонецЕсли;
		
	ЗаписатьАтрибут_XML(ЗаписьXML, "address", Адрес);
	
	//Телефон
	Если НЕ мЭтоСклад Тогда
	
		Телефон = "";
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Телефон = СокрЛП(Результат.Представление);
		КонецЕсли;
		
		ЗаписатьАтрибут_XML(ЗаписьXML, "phone", ЛЕВ(Телефон, 30));
		
		//Факс
		Факс = "";
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Факс = СокрЛП(Результат.Представление);
		КонецЕсли;
		
		ЗаписатьАтрибут_XML(ЗаписьXML, "fax", ЛЕВ(Факс, 30));
				
		//Майл
		Майл = "";
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Майл = СокрЛП(Результат.Представление);
		КонецЕсли;
		
		ЗаписатьАтрибут_XML(ЗаписьXML, "email", Майл);
	
	КонецЕсли; 
	
	Если мЭтоСклад Тогда
		ЗаписьXML.ЗаписатьАтрибут("is_customer", "f");	
		ЗаписьXML.ЗаписатьАтрибут("is_supplier", "f");
		ЗаписьXML.ЗаписатьАтрибут("is_manufacturer", "f");
	Иначе		
		ЗаписьXML.ЗаписатьАтрибут("is_customer", ?(Получатель.Покупатель, "t", "f"));
		ЗаписьXML.ЗаписатьАтрибут("is_supplier", ?(Получатель.Поставщик, "t", "f"));
		ЗаписьXML.ЗаписатьАтрибут("is_manufacturer", ?(Получатель.Производитель, "t", "f"));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("is_holder", "f");	
	ЗаписатьАтрибут_XML(ЗаписьXML, "comments", Лев(Получатель.Комментарий, 255));
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
	  //начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	  //Возврат Истина;		
	  мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "client", ЗаписьXML, Узел, Получатель,ПРГАДОКОМ);	
	КонецЕсли; 	
	//конец изменений 
	
	//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//перенесем выше 
	//мВозрат = Истина;
	
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "client", ЗаписьXML, Узел, Получатель,ПРГАДОКОМ);
	//конец изменений 
	
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,Получатель.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Справочник","Контрагенты",Получатель.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;			
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
	КонецЕсли;	
	
	Возврат мВозрат;
	
КонецФункции

//Проверяет и выгружает при необходимости справочник единиц измерения. Возвращает индикатор удачного завершения
Функция ВыгрузитьЕдиницуИзмерения(Соединение, АЕдиницаИзмерения, Узел, Выгружать = Ложь,ПРГАДОКОМ,СтруктураПараметров=Неопределено)
	Перем Блокировка, РезВыгрузки,НужноУдалятьРегистрацию;
	
	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	ЕдиницаИзмерения = ПрочитатьДанныеПоСсылке(АЕдиницаИзмерения, Блокировка, РезВыгрузки , Узел , СтруктураПараметров, НужноУдалятьРегистрацию,Выгружать);
	
	Если  ЕдиницаИзмерения =  Неопределено тогда
		 возврат РезВыгрузки;
	КонецЕсли;	
	//конец изменений 
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда		//Нет единицы измерения
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ЕдиницаИзмерения.Код) И ПустаяСтрока(ЕдиницаИзмерения.Наименование) Тогда		//Объект удалён
		Возврат Истина;
	КонецЕсли;
	
	//ТекстЗапроса = "select uom from measure_unit where measure_unit.uom = ?";
	////Прочитаем данные из таблицы
	//Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, СокрЛП(ЕдиницаИзмерения.КодSolvo),,,Узел);
	//Если Рез = Неопределено Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Создавать = Истина;
	//Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Тогда
	//	Создавать = Ложь;
	//	Если Выгружать = Ложь Тогда		//Номенклатура присутствует в базе Solvo, выгружать не нужно
	//		Возврат Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	//Обновляем справочник
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru)
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + Формат(ЕдиницаИзмерения.Код, "ЧГ=0"));
	
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//Сформируем текст пакета
	ЗаписьXML.ЗаписатьНачалоЭлемента("measure");
	ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));	
	ЗаписьXML.ЗаписатьАтрибут("action", "set");        	
	ЗаписьXML.ЗаписатьАтрибут("measureid", СокрЛП(ЕдиницаИзмерения.Код));
	ЗаписьXML.ЗаписатьАтрибут("short_name", СокрЛП(ЕдиницаИзмерения.Наименование));
	
	Если ПустаяСтрока(ЕдиницаИзмерения.НаименованиеПолное) Тогда
		ЗаписьXML.ЗаписатьАтрибут("name", СокрЛП(ЕдиницаИзмерения.Наименование));
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("name", СокрЛП(ЕдиницаИзмерения.НаименованиеПолное));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 	
	//	Возврат Истина;		
		мВозрат = Истина;
	Иначе
	  мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "measure", ЗаписьXML, Узел, ЕдиницаИзмерения.Ссылка, ПРГАДОКОМ);
	//конец изменений 	
	КонецЕсли; 	
	//-- Spl_Апроф
	
	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "measure", ЗаписьXML, Узел, ЕдиницаИзмерения, ПРГАДОКОМ);
	Если мВозрат  Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,ЕдиницаИзмерения.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Справочник","КлассификаторЕдиницИзмерения",ЕдиницаИзмерения.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
	КонецЕсли;	
	//конец изменений 
	
	Возврат мВозрат;

КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////								
// ПРОЦЕДУРЫ ПО ВЫГРУЗКЕ ДОКУМЕНТОВ 1С В ЗАКАЗ (ORDER)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Производит выгрузку документа "Задание на подбор"
Функция ВыгрузитьЗаданиеНаПодбор(Соединение, АЗаданиеНаПодбор, Узел,ПРГАДОКОМ,СтруктураПараметров) Экспорт
	//начало изменений Ожиганов 11.07.2016 уменьшение вероятности возникновения конфликта блоикровок при выгрузке 
	Перем Блокировка, РезВыгрузки,НужноУдалятьРегистрацию;
			
	Если НЕ ЗначениеЗаполнено(АЗаданиеНаПодбор) Тогда
		возврат Истина;
	КонецЕсли;	
	
	ЗаданиеНаПодбор = ПрочитатьДанныеПоСсылке(АЗаданиеНаПодбор, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,Истина);
	Если ЗаданиеНаПодбор =  Неопределено тогда
		 возврат РезВыгрузки;
	КонецЕсли;
	
	//Предупреждение("Пролжить выгрузку");
	
	//Если НЕ ЗначениеЗаполнено(ЗаданиеНаПодбор) Тогда
	Если НЕ ЗначениеЗаполнено(ЗаданиеНаПодбор.Ссылка) Тогда
	//конец изменений 		
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ЗаданиеНаПодбор.Номер) И (ЗаданиеНаПодбор.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//начало изменений Ожиганов 16.05.2016 б/н выгрузка заданий на подбор только по складу с признаком обмен солво 
    Если ТипЗнч(ЗаданиеНаПодбор) =  Тип("ДокументСсылка.СП_ЗаданиеНаПодбор")
		или ТипЗнч(ЗаданиеНаПодбор) =  Тип("ДокументОбъект.СП_ЗаданиеНаПодбор")
		Тогда
		//определим склад для подключен к солво
		АПРекв = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаСпрСложНПоля(ЗаданиеНаПодбор.Склад,Новый Структура("НСИ_ПодключенКSolvo"));
		Если АПРекв <> Неопределено Тогда
			Если Не АПРекв.НСИ_ПодключенКSolvo Тогда
				//проверим есть ли записи таьлице регистрации
				ПРГЗапрос = Новый Запрос("ВЫБРАТЬ
				                      |	СП_ЗаданиеНаПодборИзменения.Ссылка
				                      |ИЗ
				                      |	Документ.СП_ЗаданиеНаПодбор.Изменения КАК СП_ЗаданиеНаПодборИзменения
				                      |ГДЕ
				                      |	СП_ЗаданиеНаПодборИзменения.Узел = &Узел");
									  
				ПРГЗапрос.УстановитьПараметр("Узел",Узел);					  
				ПРГВыборка = ПРГЗапрос.Выполнить().Выбрать();
				Если ПРГВыборка .Следующий() Тогда
					ПланыОбмена.УдалитьРегистрациюИзменений(Узел,ПРГВыборка.Ссылка);
				КонецЕсли;	
				Сообщить("Не выгружен "+ЗаданиеНаПодбор);
				возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
    //конец изменений  
	
	//1.1 Проверим наличие номенклатуры
	Для Каждого ТекСтрока Из ЗаданиеНаПодбор.Товары Цикл
		//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ,СтруктураПараметров) = Ложь Тогда
		//не удаляем регистрицацию изменений будем выгружать пока не выгрузиться	
		//конец изменений 	
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Отключаем т.к. у нас вместо контрагента может быть склад, при внутреннем перемещении
	//1.2 Проверим наличие контрагента
	Если ЗначениеЗаполнено(ЗаданиеНаПодбор.Получатель) Тогда
		//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьКонтрагента(Соединение, ЗаданиеНаПодбор.Получатель, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьКонтрагента(Соединение, ЗаданиеНаПодбор.Получатель, Узел,,ПРГАДОКОМ,СтруктураПараметров) = Ложь Тогда
		//не удаляем регистрицацию изменений будем выгружать пока не выгрузиться	
		//конец изменений 	
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//2. Получим номер пакета
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	//Blik 200815 43113 н   
	//проверим контрагента на расширенную выгрузку, первоначально только Лента
	//1 - расширенная выгрузка //тут передается буква типа заказа //Blik  250216 48963 j лента
	//0- стандартная
	//Blik 040717 67562 н //склады скоропорта и коротких сроков с отдельным типом незавимисо от контрагента выгружаем
	ВыгрузкаСкоропорта = ПроверитьПоСкладамСкоропорта(ЗаданиеНаПодбор.Склад);
	Если ВыгрузкаСкоропорта=0 Тогда
		РасширеннаяВыгрузка = ПроверитьПоКонтрашентуНаРасширеннуюВыгрузку(ЗаданиеНаПодбор.Получатель);
	Иначе
		РасширеннаяВыгрузка = ВыгрузкаСкоропорта;
	Конецесли;
	//Blik 040717 67562 к
	//для расширенной выгрузки нужен номер заказа покупателя, получим сразу
	Попытка
		//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//поскольку у нас данные получены в запросе, изменим споосб получения ревизитов заказа 
		//НомерЗаказаПокупателя = СокрЛП(ПолучитьНомерЗаказаПокупателя(ЗаданиеНаПодбор));
		//АдресГрузополучателя = СокрЛП(ПолучитьАдресГрузополучателя(ЗаданиеНаПодбор)); //Blik 090915 43113
		НомерЗаказаПокупателя = ЗаданиеНаПодбор.Заказ_НомерПоДаннымПокупателя;
		АдресГрузополучателя = ЗаданиеНаПодбор.Заказ_АдресГрузополучателя; //Blik 090915 43113
		
		//конец изменений 
	Исключение
		НомерЗаказаПокупателя = "";
		АдресГрузополучателя = "";
	КонецПопытки;
	//Blik 200815 43113 к
	//начало изменений Ожиганов 11.07.2016 уменьшение вероятности возникновения конфликта блоикровок при выгрузке 
	//мУИД_Документа = СокрЛП(ЗаданиеНаПодбор.УникальныйИдентификатор()); //+ "_" + СокрЛП(ЗаданиеНаПодбор.Метаданные().Имя);
	мУИД_Документа = СокрЛП(ЗаданиеНаПодбор.Ссылка.УникальныйИдентификатор()); //+ "_" + СокрЛП(ЗаданиеНаПодбор.Метаданные().Имя);
	//конец изменений 
	
	//3. Проверим наличие задания  КАК СКАЗАЛ СПЕЦ. ПО СОЛВО ПРОВЕРКИ ЛИШНИЕ
	//ТекстЗапроса = "select sdid from orders where sdid = '"+СокрЛП(мУИД_Документа)+"'";
	//Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса,,,,Узел);
	//Если Рез = Неопределено Тогда
	//	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ЗаданиеНаПодбор, "Не удалось добавить заголовок пакета");
	//	Соединение.Close();
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 1 Тогда
	//	Создавать = Истина;
	//	Если ЗаданиеНаПодбор.Товары.Количество() = 0 Тогда 
	//		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ЗаданиеНаПодбор, "Документ пустой, выгрузка не произведена");
	//		Возврат Истина;
	//	КонецЕсли;
	//Иначе
	//	Создавать = Ложь;
	//КонецЕсли;
		
	//5. Получим строки заказа
	МассивСтрок = Новый Массив;
	//ТекстЗапроса = "select line from order_details where sdid = '"+СокрЛП(мУИД_Документа)+"'";
	//Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса,,,,Узел);
	//Если Рез <> Неопределено Тогда
	//	Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
	//		НомерСтроки = Рез.Fields("line").value;
	//		Если МассивСтрок.Найти(НомерСтроки) = Неопределено Тогда
	//			МассивСтрок.Добавить(НомерСтроки);
	//		КонецЕсли;
	//		Рез.MoveNext(); 
	//	КонецЦикла;
	//КонецЕсли;
	
	//6. Сформируем строку данных
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_ЗаданиеНаПодбор_" + Формат(мУИД_Документа, "ЧГ=0"));	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("order");
	ЗаписьXML.ЗаписатьАтрибут("id"				, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("action"			, "set");
	ЗаписьXML.ЗаписатьАтрибут("order_id"		, СокрЛП(мУИД_Документа));
	ЗаписьXML.ЗаписатьАтрибут("display_name"	, СокрЛП(ЗаданиеНаПодбор.Номер));
	ЗаписьXML.ЗаписатьАтрибут("client_id"		, СокрЛП(ЗаданиеНаПодбор.Получатель.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьАтрибут("auto_start"		, "f");
	ЗаписьXML.ЗаписатьАтрибут("auto_activate"	, "f");
	//ЗаписьXML.ЗаписатьАтрибут("type"			, "S"); //Blik 071015 закком перенесено в условие  44721
	//Blik 200815 43113 н   
	//если расширенная выгрузка = 1 запишем доп реквизит номер заказа покупателя
	Если РасширеннаяВыгрузка = "j" Тогда  //Blik 250216 48963  //это Лента
		ЗаписьXML.ЗаписатьАтрибут("type"			, "j"); //Blik 071015 44721
		ЗаписьXML.ЗаписатьАтрибут("lbd_client_name", НомерЗаказаПокупателя);
		//Blik 58274 281016 н
		//адрес Тэк номерМагазина Тэк  грузополучатель
		ЗаписьXML.ЗаписатьАтрибут("shipping_address", СокрЛП(Строка(ЗаданиеНаПодбор.Заказ_АдресТэк)));
		ЗаписьXML.ЗаписатьАтрибут("prg_tek_number",  СокрЛП(Строка(ЗаданиеНаПодбор.Заказ_НомерМагазинаТэК)));
		//адрес магазина номерМагазина  заказчик
		ЗаписьXML.ЗаписатьАтрибут("prg_shipping_address",  СокрЛП(Строка(АдресГрузополучателя)));
		ЗаписьXML.ЗаписатьАтрибут("prg_shop_number",  СокрЛП(Строка(ЗаданиеНаПодбор.Заказ_НомерМагазина)));
		//Blik 58274 281016 к
	ИначеЕсли РасширеннаяВыгрузка = "e" Тогда  //Blik 100616 53453
		ЗаписьXML.ЗаписатьАтрибут("type"			, "e"); 
		ЗаписьXML.ЗаписатьАтрибут("lbd_client_name", НомерЗаказаПокупателя);
		ЗаписьXML.ЗаписатьАтрибут("shipping_address", АдресГрузополучателя);
	ИначеЕсли РасширеннаяВыгрузка = "b" Тогда  //Blik 100616 53453
		ЗаписьXML.ЗаписатьАтрибут("type"			, "b");  //Blik 250216 48963
		ЗаписьXML.ЗаписатьАтрибут("shipping_address", АдресГрузополучателя); //Blik 150517 65613  адрес грузополучателя выгружаем во все типы заказов
		//Blik 040717 67562 н
	ИначеЕсли РасширеннаяВыгрузка = "k" Тогда
		ЗаписьXML.ЗаписатьАтрибут("type"			, "k");  
		ЗаписьXML.ЗаписатьАтрибут("shipping_address", АдресГрузополучателя);
	ИначеЕсли РасширеннаяВыгрузка = "f" Тогда
		ЗаписьXML.ЗаписатьАтрибут("type"			, "f");  
		ЗаписьXML.ЗаписатьАтрибут("shipping_address", АдресГрузополучателя);
		//Blik 040717 67562 к
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("type"			, "S");  //Blik 071015 44721     
		ЗаписьXML.ЗаписатьАтрибут("shipping_address", АдресГрузополучателя);  //Blik 150517 65613 адрес грузополучателя выгружаем во все типы заказов
	КонецЕсли;
	//Blik 200815 43113 к

	ЗаписатьАтрибут_XML(ЗаписьXML, "priority"	, Формат(ЗаданиеНаПодбор.ПриоритетОтгрузки, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
	
	НомерМашины = ""; Водитель = "";
	//начало изменений Ожиганов 11.07.2016 уменьшение вероятности возникновения конфликта блоикровок при выгрузке 
	//ДатаОтгрузки = ЗаданиеНаПодбор.Заказ.ДатаОтгрузки;апрос = Новый Запрос;
	ДатаОтгрузки = ЗаданиеНаПодбор.Заказ_ДатаОтгрузки;
	апрос = Новый Запрос;
	//конец изменений 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПТЛ_ПланДоставки.ТЭК,
//начало изменений Ожиганов 11.07.2016 уменьшение вероятности возникновения конфликта блоикровок при выгрузке 				   
	               |	Представление(ПТЛ_ПланДоставки.Водитель) как Водитель,
				   |    ЕстьNull(ПТЛ_ПланДоставки.ТранспортноеСредство.ГосНомер,"""") Как ТранспортноеСредство_ГосНомер,
//конец изменений       
	               |	ПТЛ_ПланДоставки.ТранспортноеСредство
	               |ИЗ
	               |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	               |ГДЕ
	               |	ПТЛ_ПланДоставки.ЗаданиеНаПодбор = &ЗаданиеНаПодбор
	               |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ";
				   
	//начало изменений Ожиганов 11.07.2016 уменьшение вероятности возникновения конфликта блоикровок при выгрузке 			   
	//Запрос.УстановитьПараметр("ЗаданиеНаПодбор", ЗаданиеНаПодбор);
	Запрос.УстановитьПараметр("ЗаданиеНаПодбор", ЗаданиеНаПодбор.Ссылка);
	//конец изменений 
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		//начало изменений Ожиганов 11.07.2016 уменьшение вероятности возникновения конфликта блоикровок при выгрузке 
		//НомерМашины = Результат.ТранспортноеСредство.ГосНомер;
		НомерМашины = Результат.ТранспортноеСредство_ГосНомер;
		//конец изменений 
		Водитель = Результат.Водитель;
	
	КонецЕсли;	
		
	ЗаписатьАтрибут_XML(ЗаписьXML, "car_num"		, СокрЛП(НомерМашины));
	ЗаписатьАтрибут_XML(ЗаписьXML, "driver_fio"		, СокрЛП(Водитель));
	ЗаписатьАтрибут_XML(ЗаписьXML, "date_to_ship"	, Формат(ДатаОтгрузки, "ДФ = 'dd-MM-yyyy HH:mm'"));
	
	ЗаписьXML.ЗаписатьАтрибут("holder_id", "-1");
	
	ЗаписатьАтрибут_XML(ЗаписьXML, "responsible"	, СокрЛП(ЗаданиеНаПодбор.Ответственный));
	ЗаписатьАтрибут_XML(ЗаписьXML, "comments"		, Лев(ЗаданиеНаПодбор.Комментарий, 180));
	
	//начало изменений Ожиганов 06.05.2015 Подстрахуемся по ОСГ
	ПРГВыгружатьОСГ = Истина;
	//конец изменений 
	
	//7. Добавим строки
	НомерСтроки = 0;
	ЕстьДанные = Ложь;
	Для Каждого ТекСтрока Из ЗаданиеНаПодбор.Товары Цикл
		
		//{24.03.2015 Островерхий заявка №38069 
		//начало изменений Ожиганов 11.07.2016 уменьшение вероятности возникновения конфликта блоикровок при выгрузке 
		//Если НЕ ТекСтрока.Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво Тогда
		Если НЕ ТекСтрока.Номенклатура_ВидНоменклатуры_НСИ_ОбменССолво Тогда
		//конец изменений 	
			Продолжить;	
		КонецЕсли;  
		//24.03.2015 Островерхий} 
		
		//++ Приводим количество к базовой единице измерения 
		Количество = ТекСтрока.Количество * ?(ТекСтрока.Коэффициент = 0, 1, ТекСтрока.Коэффициент);
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьДанные = Истина; 
		
		НомерСтроки = НомерСтроки + 1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("order_detail");
		//ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		Поз = МассивСтрок.Найти(НомерСтроки);
		Если Поз = Неопределено Тогда
		Иначе
			МассивСтрок.Удалить(Поз);
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("action", "set");
		ЗаписьXML.ЗаписатьАтрибут("order_id", СокрЛП(мУИД_Документа));
		ЗаписьXML.ЗаписатьАтрибут("line", Формат(НомерСтроки, "ЧГ=0"));
		//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура).Код));
		ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ТекСтрока.Номенклатура_НСИ_НоменклатураОбменаССолво_Код));
		//конец изменений 
		ЗаписьXML.ЗаписатьАтрибут("qty", Формат(Количество, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		
		//начало изменений Ожиганов 11.07.2016 уменьшение вероятности возникновения конфликта блоикровок при выгрузке 
		//ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(ЗаданиеНаПодбор.Склад.Код));
		ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(ЗаданиеНаПодбор.Склад_Код));
		//конец изменений 
		
		ЗаписьXML.ЗаписатьАтрибут("marker", "*");
		
		//++ Spl_Апроф 05.05.2015 (k.russkih@a-prof.ru) Добавим выгрузку ОСГ
		//начало изменений Ожиганов 06.05.2015 Подстрахуемся по ОСГ 
		//Если НЕ ТекСтрока.ОСГ = 0 Тогда
		//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
		//Если НЕ ТекСтрока.ОСГ = 0 и ПРГВыгружатьОСГ Тогда
		Если НЕ ТекСтрока.ОСГ = 0 Тогда
		//конец изменений  	
			
			ЗаписьXML.ЗаписатьАтрибут("dtd_logic"	, "gte");
			ЗаписьXML.ЗаписатьАтрибут("dtd_percent"	, Формат(ТекСтрока.ОСГ, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0"));
			
		КонецЕсли; 
		//конец изменений  
		//-- Spl_Апроф
		//если расширенная выгрузка = 1 запишем доп реквизит артикул номенклатуры контрагенты j
		Если РасширеннаяВыгрузка = "j" Тогда  //Blik 250216 48963
			ЗаписьXML.ЗаписатьАтрибут("comments2", СокрЛП(ПолучитьАртикулНоменклатурыКонтрагенты(ТекСтрока.Номенклатура,ЗаданиеНаПодбор.Получатель)));
		КонецЕсли;
		//Blik 200815 43113 к
		//Blik 100616 53453 н
		Если РасширеннаяВыгрузка = "e" Тогда  //Blik 250216 48963
			ЗаписьXML.ЗаписатьАтрибут("comments2", СокрЛП(ПолучитьАртикулНоменклатурыКонтрагенты(ТекСтрока.Номенклатура,ЗаданиеНаПодбор.Получатель)));
		КонецЕсли;
		//Blik 100616 53453 к


		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	////8. Удалим неиспользованные строки
	//Для Каждого НомерСтроки Из МассивСтрок Цикл
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("order_detail");
	//	ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
	//	ЗаписьXML.ЗаписатьАтрибут("action", "delete");
	//	ЗаписьXML.ЗаписатьАтрибут("order_id", СокрЛП(мУИД_Документа));
	//	ЗаписьXML.ЗаписатьАтрибут("line", Формат(НомерСтроки, "ЧГ=0"));
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
	//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 		
	    //Возврат Истина;		
		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "order", ЗаписьXML, Узел, ЗаданиеНаПодбор,ПРГАДОКОМ); 
	//конец изменений 	
	КонецЕсли; 
	
	//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//перенесем выше
	//мВозрат = Истина;
	
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "order", ЗаписьXML, Узел, ЗаданиеНаПодбор,ПРГАДОКОМ); 
	
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,ЗаданиеНаПодбор.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Документ","СП_ЗаданиеНаПодбор",ЗаданиеНаПодбор.Ссылка,Узел, Блокировка,СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
	КонецЕсли;	
	//конец изменений 
	
	Возврат мВозрат;
	
КонецФункции

//Проверяет и выгружает при необходимости документ "Перемещение товаров". Возвращает индикатор удачного завершения
Функция ВыгрузитьПеремещениеТоваров_Заказ(Соединение, Документ, Узел,ПРГАДОКОМ,СтруктураПараметров)

	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(Документ.Номер) И (Документ.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	//1.1 Проверим наличие номенклатуры
	Для Каждого ТекСтрока Из Документ.Товары Цикл
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ,СтруктураПараметров) = Ложь Тогда
		//конец изменений 	
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Документ.СкладПолучатель) Тогда
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьКонтрагента(Соединение, Документ.СкладПолучатель, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьКонтрагента(Соединение, Документ.СкладПолучатель, Узел,,ПРГАДОКОМ,СтруктураПараметров) = Ложь Тогда
		//конец изменений 	
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//2. Получим номер пакета
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мУИД_Документа = СокрЛП(Документ.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	мУИД_Документа = СокрЛП(Документ.Ссылка.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	//конец изменений 
	
	МассивСтрок = Новый Массив;	
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + Формат(мУИД_Документа, "ЧГ=0"));	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_ПеремещениеТоваров_" + Формат(мУИД_Документа, "ЧГ=0"));	
	//конец изменений 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("order");
	ЗаписьXML.ЗаписатьАтрибут("id"				, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("action"			, "set");
	ЗаписьXML.ЗаписатьАтрибут("order_id"		, СокрЛП(мУИД_Документа));
	ЗаписьXML.ЗаписатьАтрибут("display_name"	, СокрЛП(Документ.Номер));
	ЗаписьXML.ЗаписатьАтрибут("client_id"		, СокрЛП(Документ.СкладПолучатель.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьАтрибут("auto_start"		, "f");
	ЗаписьXML.ЗаписатьАтрибут("auto_activate"	, "f");
	ЗаписьXML.ЗаписатьАтрибут("type"			, "M");
	
	//ЗаписатьАтрибут_XML(ЗаписьXML, "priority"	, Формат(ЗаданиеНаПодбор.ПриоритетОтгрузки, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
	
	НомерМашины = ""; Водитель = "";
	ДатаОтгрузки = Документ.Дата; 
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			   |	ПТЛ_ПланДоставки.ТЭК,
	//			   |	ПТЛ_ПланДоставки.Водитель,
	//			   |	ПТЛ_ПланДоставки.ТранспортноеСредство
	//			   |ИЗ
	//			   |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	//			   |ГДЕ
	//			   |	ПТЛ_ПланДоставки.ЗаданиеНаПодбор = &ЗаданиеНаПодбор
	//			   |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ";
	//Запрос.УстановитьПараметр("ЗаданиеНаПодбор", ЗаданиеНаПодбор);
	//
	//Результат = Запрос.Выполнить().Выбрать();
	//
	//Если Результат.Следующий() Тогда
	//
	//	НомерМашины = Результат.ТранспортноеСредство.ГосНомер;
	//	Водитель = Результат.Водитель;
	//
	//КонецЕсли;	
		
	ЗаписатьАтрибут_XML(ЗаписьXML, "car_num"		, СокрЛП(НомерМашины));
	ЗаписатьАтрибут_XML(ЗаписьXML, "driver_fio"		, СокрЛП(Водитель));
	ЗаписатьАтрибут_XML(ЗаписьXML, "date_to_ship"	, Формат(ДатаОтгрузки, "ДФ = 'dd-MM-yyyy HH:mm'"));
	
	ЗаписьXML.ЗаписатьАтрибут("holder_id", "-1");
	
	ЗаписатьАтрибут_XML(ЗаписьXML, "responsible"	, СокрЛП(Документ.Ответственный));
	ЗаписатьАтрибут_XML(ЗаписьXML, "comments"		, Лев(Документ.Комментарий, 180));
	
	//ЗаписатьАтрибут_XML(ЗаписьXML, "supplier_id", СокрЛП(ПоступлениеТоваровУслуг.Контрагент.УникальныйИдентификатор()));
	
	//7. Добавим строки
	НомерСтроки = 0;
	ЕстьДанные = Ложь;
	
	Для каждого ТекСтрока Из Документ.Товары Цикл
	
		//++ Приводим количество к базовой единице измерения 
		Количество = ТекСтрока.Количество * ?(ТекСтрока.Коэффициент = 0, 1, ТекСтрока.Коэффициент);
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьДанные = Истина; 
		
		НомерСтроки = НомерСтроки + 1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("order_detail");
		//ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		Поз = МассивСтрок.Найти(НомерСтроки);
		Если Поз = Неопределено Тогда
		Иначе
			МассивСтрок.Удалить(Поз);
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("action", "set");
		ЗаписьXML.ЗаписатьАтрибут("order_id", СокрЛП(мУИД_Документа));
		ЗаписьXML.ЗаписатьАтрибут("line", Формат(НомерСтроки, "ЧГ=0"));
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура).Код));
		ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ТекСтрока.Номенклатура_НСИ_НоменклатураОбменаССолво_Код));
		//конец изменений 
		ЗаписьXML.ЗаписатьАтрибут("qty", Формат(Количество, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(Документ.СкладОтправитель.Код));
		ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(Документ.СкладОтправитель_Код));
		//конец изменений 
		
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если НЕ ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура, Истина) Тогда
		Если Не Текстрока.Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство Тогда
		//конец изменений 	
			ЗаписьXML.ЗаписатьАтрибут("marker", "1");		
		КонецЕсли; 
				
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла; 
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 		
	//	Возврат Истина;		
		мВозврат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "order", ЗаписьXML, Узел, Документ,ПРГАДОКОМ);
	//конец изменений 		
	КонецЕсли; 
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "order", ЗаписьXML, Узел, Документ,ПРГАДОКОМ);
	//конец изменений 
	
	Возврат мВозрат;
	
КонецФункции // ()   

//Проверяет и выгружает при необходимости документ "Списание товаров". Возвращает индикатор удачного завершения
Функция ВыгрузитьСписаниеТоваров_Заказ(Соединение, АДокумент, Узел,ПРГАДОКОМ,СтруктураПараметров)
	Перем Блокировка, РезВыгрузки,НужноУдалятьРегистрацию;
	
	Документ  = ПрочитатьДанныеПоСсылке(АДокумент, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,Истина);
	Если Документ =  Неопределено тогда
		 возврат РезВыгрузки;
	КонецЕсли;
	

	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(Документ.Номер) И (Документ.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	//1.1 Проверим наличие номенклатуры
	Для Каждого ТекСтрока Из Документ.Товары Цикл
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ,СтруктураПараметров) = Ложь Тогда
		//конец изменений 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//Если ЗначениеЗаполнено(Документ.Склад) Тогда
	//	Если ВыгрузитьКонтрагента(Соединение, Документ.Склад, Узел) = Ложь Тогда
	//		Возврат Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	
	//2. Получим номер пакета
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мУИД_Документа = СокрЛП(Документ.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	мУИД_Документа = СокрЛП(Документ.Ссылка.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	//конец изменений 
	
	МассивСтрок = Новый Массив;	
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + Формат(мУИД_Документа, "ЧГ=0"));	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_СписаниеТоваров_" + Формат(мУИД_Документа, "ЧГ=0"));	
	//конец изменений 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("order");
	ЗаписьXML.ЗаписатьАтрибут("id"				, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("action"			, "set");
	ЗаписьXML.ЗаписатьАтрибут("order_id"		, СокрЛП(мУИД_Документа));
	ЗаписьXML.ЗаписатьАтрибут("display_name"	, СокрЛП(Документ.Номер));
	ЗаписьXML.ЗаписатьАтрибут("auto_start"		, "f");
	ЗаписьXML.ЗаписатьАтрибут("auto_activate"	, "f");
	ЗаписьXML.ЗаписатьАтрибут("type"			, "X");
	
	//ЗаписатьАтрибут_XML(ЗаписьXML, "priority"	, Формат(ЗаданиеНаПодбор.ПриоритетОтгрузки, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
	
	НомерМашины = ""; Водитель = "";
	ДатаОтгрузки = Документ.Дата; 
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			   |	ПТЛ_ПланДоставки.ТЭК,
	//			   |	ПТЛ_ПланДоставки.Водитель,
	//			   |	ПТЛ_ПланДоставки.ТранспортноеСредство
	//			   |ИЗ
	//			   |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	//			   |ГДЕ
	//			   |	ПТЛ_ПланДоставки.ЗаданиеНаПодбор = &ЗаданиеНаПодбор
	//			   |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ";
	//Запрос.УстановитьПараметр("ЗаданиеНаПодбор", ЗаданиеНаПодбор);
	//
	//Результат = Запрос.Выполнить().Выбрать();
	//
	//Если Результат.Следующий() Тогда
	//
	//	НомерМашины = Результат.ТранспортноеСредство.ГосНомер;
	//	Водитель = Результат.Водитель;
	//
	//КонецЕсли;	
		
	ЗаписатьАтрибут_XML(ЗаписьXML, "car_num"		, СокрЛП(НомерМашины));
	ЗаписатьАтрибут_XML(ЗаписьXML, "driver_fio"		, СокрЛП(Водитель));
	ЗаписатьАтрибут_XML(ЗаписьXML, "date_to_ship"	, Формат(ДатаОтгрузки, "ДФ = 'dd-MM-yyyy HH:mm'"));
	
	ЗаписьXML.ЗаписатьАтрибут("holder_id", "-1");
	
	ЗаписатьАтрибут_XML(ЗаписьXML, "responsible"	, СокрЛП(Документ.Ответственный));
	ЗаписатьАтрибут_XML(ЗаписьXML, "comments"		, Лев(Документ.Комментарий, 180));
	
	//ЗаписатьАтрибут_XML(ЗаписьXML, "supplier_id", СокрЛП(ПоступлениеТоваровУслуг.Контрагент.УникальныйИдентификатор()));
	
	//7. Добавим строки
	НомерСтроки = 0;
	ЕстьДанные = Ложь;
	
	Для каждого ТекСтрока Из Документ.Товары Цикл
	
		//++ Приводим количество к базовой единице измерения 
		Количество = ТекСтрока.Количество * ?(ТекСтрока.Коэффициент = 0, 1, ТекСтрока.Коэффициент);
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьДанные = Истина; 
		
		НомерСтроки = НомерСтроки + 1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("order_detail");
		//ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		Поз = МассивСтрок.Найти(НомерСтроки);
		Если Поз = Неопределено Тогда
		Иначе
			МассивСтрок.Удалить(Поз);
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("action", "set");
		ЗаписьXML.ЗаписатьАтрибут("order_id", СокрЛП(мУИД_Документа));
		ЗаписьXML.ЗаписатьАтрибут("line", Формат(НомерСтроки, "ЧГ=0"));
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура).Код));
		ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ТекСтрока.Номенклатура_НСИ_НоменклатураОбменаССолво_Код));
		//конец изменений 
		ЗаписьXML.ЗаписатьАтрибут("qty", Формат(Количество, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(Документ.Склад.Код));
		ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(Документ.Склад_Код));
		//конец изменений 
		
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если НЕ ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура, Истина) Тогда
		Если Не Текстрока.Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство Тогда
		//конец изменений 
			ЗаписьXML.ЗаписатьАтрибут("marker", "1");		
		КонецЕсли;		
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла; 
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 	
	//	Возврат Истина;		
	    мВозрат  = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "order", ЗаписьXML, Узел, Документ,ПРГАДОКОМ);
	//конец изменений 	
	КонецЕсли; 
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "order", ЗаписьXML, Узел, Документ,ПРГАДОКОМ);
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,Документ.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Документ","СписаниеТоваров",Документ.Ссылка,Узел, Блокировка,СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
	КонецЕсли;		
	//конец изменений 
	
	Возврат мВозрат;
	
КонецФункции // ()   

//Проверяет и выгружает при необходимости документ "Списание товаров". Возвращает индикатор удачного завершения
Функция ВыгрузитьТребованиеНакладная_Заказ(Соединение, АДокумент, Узел,ПРГАДОКОМ,СтруктураПараметров)
	Перем Блокировка, РезВыгрузки, НужноУдалятьРегистрацию;

	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	Документ = ПрочитатьДанныеПоСсылке(АДокумент, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,Истина);
	Если Документ =  Неопределено тогда
		 возврат РезВыгрузки;
	КонецЕсли;
	//конец изменений 
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(Документ.Номер) И (Документ.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	//1.1 Проверим наличие номенклатуры
	Для Каждого ТекСтрока Из Документ.Материалы Цикл
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ,СтруктураПараметров) = Ложь Тогда
		//конец изменений 	
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//2. Получим номер пакета
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мУИД_Документа = СокрЛП(Документ.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	мУИД_Документа = СокрЛП(Документ.Ссылка.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	//конец изменений 
	
	МассивСтрок = Новый Массив;	
	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_ТребованиеНакладная_" + Формат(мУИД_Документа, "ЧГ=0"));	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("order");
	ЗаписьXML.ЗаписатьАтрибут("id"				, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("action"			, "set");
	ЗаписьXML.ЗаписатьАтрибут("order_id"		, СокрЛП(мУИД_Документа));
	ЗаписьXML.ЗаписатьАтрибут("display_name"	, СокрЛП(Документ.Номер));
	
	ЗаписьXML.ЗаписатьАтрибут("auto_start"		, "f");
	ЗаписьXML.ЗаписатьАтрибут("auto_activate"	, "f");
	ЗаписьXML.ЗаписатьАтрибут("type"			, "X");
	
	//ЗаписатьАтрибут_XML(ЗаписьXML, "priority"	, Формат(ЗаданиеНаПодбор.ПриоритетОтгрузки, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
	
	НомерМашины = ""; Водитель = "";
	ДатаОтгрузки = Документ.Дата; 
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			   |	ПТЛ_ПланДоставки.ТЭК,
	//			   |	ПТЛ_ПланДоставки.Водитель,
	//			   |	ПТЛ_ПланДоставки.ТранспортноеСредство
	//			   |ИЗ
	//			   |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	//			   |ГДЕ
	//			   |	ПТЛ_ПланДоставки.ЗаданиеНаПодбор = &ЗаданиеНаПодбор
	//			   |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ";
	//Запрос.УстановитьПараметр("ЗаданиеНаПодбор", ЗаданиеНаПодбор);
	//
	//Результат = Запрос.Выполнить().Выбрать();
	//
	//Если Результат.Следующий() Тогда
	//
	//	НомерМашины = Результат.ТранспортноеСредство.ГосНомер;
	//	Водитель = Результат.Водитель;
	//
	//КонецЕсли;	
		
	ЗаписатьАтрибут_XML(ЗаписьXML, "car_num"		, СокрЛП(НомерМашины));
	ЗаписатьАтрибут_XML(ЗаписьXML, "driver_fio"		, СокрЛП(Водитель));
	ЗаписатьАтрибут_XML(ЗаписьXML, "date_to_ship"	, Формат(ДатаОтгрузки, "ДФ = 'dd-MM-yyyy HH:mm'"));
	
	ЗаписьXML.ЗаписатьАтрибут("holder_id"			, "-1");
	
	ЗаписатьАтрибут_XML(ЗаписьXML, "responsible"	, СокрЛП(Документ.Ответственный));
	ЗаписатьАтрибут_XML(ЗаписьXML, "comments"		, Лев(Документ.Комментарий, 180));
	
	//ЗаписатьАтрибут_XML(ЗаписьXML, "supplier_id", СокрЛП(ПоступлениеТоваровУслуг.Контрагент.УникальныйИдентификатор()));
	
	//7. Добавим строки
	НомерСтроки = 0;
	ЕстьДанные = Ложь;
	
	Для каждого ТекСтрока Из Документ.Материалы Цикл
	
		//++ Приводим количество к базовой единице измерения 
		Количество = ТекСтрока.Количество * ?(ТекСтрока.Коэффициент = 0, 1, ТекСтрока.Коэффициент);
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьДанные = Истина; 
		
		НомерСтроки = НомерСтроки + 1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("order_detail");
		//ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		Поз = МассивСтрок.Найти(НомерСтроки);
		Если Поз = Неопределено Тогда
		Иначе
			МассивСтрок.Удалить(Поз);
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("action", "set");
		ЗаписьXML.ЗаписатьАтрибут("order_id", СокрЛП(мУИД_Документа));
		ЗаписьXML.ЗаписатьАтрибут("line", Формат(НомерСтроки, "ЧГ=0"));
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура).Код));
		ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ТекСтрока.Номенклатура_НСИ_НоменклатураОбменаССолво_Код));
		//конец изменений 
		ЗаписьXML.ЗаписатьАтрибут("qty", Формат(Количество, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(Документ.Склад.Код));
		
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если НЕ ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура, Истина) Тогда		
		//Если НЕ ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура, Истина) Тогда		
		Если Не Текстрока.Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство Тогда
		//конец изменений 	
			ЗаписьXML.ЗаписатьАтрибут("marker", "1");		
		КонецЕсли; 	
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла; 
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 	
		//Возврат Истина;		
		мВозрат = Истина;
	Иначе	
		мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "order", ЗаписьXML, Узел, Документ,ПРГАДОКОМ);
	//конец изменений 	
	КонецЕсли; 
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "order", ЗаписьXML, Узел, Документ,ПРГАДОКОМ);

	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,Документ.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Документ","ТребованиеНакладная",Документ.Ссылка,Узел, Блокировка,СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
	КонецЕсли;		
	//конец изменений 
	
	Возврат мВозрат;
	
КонецФункции // ()   

//Производит выгрузку документа "Задание на подбор"
Функция ВыгрузитьВозвратТоваровПоставщику(Соединение, АДокумент, Узел,ПРГАДОКОМ,СтруктураПараметров)
	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	Перем Блокировка, РезВыгрузки,НужноУдалятьРегистрацию;
	
	Документ = ПрочитатьДанныеПоСсылке(АДокумент, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию, Истина);
	Если  Документ =  Неопределено тогда
		 возврат РезВыгрузки;
	КонецЕсли;		
	//конец изменений  
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(Документ.Номер) И (Документ.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//1.1 Проверим наличие номенклатуры
	Для Каждого ТекСтрока Из Документ.Товары Цикл
		//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ, СтруктураПараметров) = Ложь Тогда
		//конец изменений 	
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Отключаем т.к. у нас вместо контрагента может быть склад, при внутреннем перемещении
	//1.2 Проверим наличие контрагента
	Если ЗначениеЗаполнено(Документ.Контрагент) Тогда
		//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьКонтрагента(Соединение, Документ.Контрагент, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьКонтрагента(Соединение, Документ.Контрагент, Узел,,ПРГАДОКОМ, СтруктураПараметров) = Ложь Тогда
		//конец изменений 	
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//2. Получим номер пакета
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мУИД_Документа = СокрЛП(Документ.УникальныйИдентификатор()); //+ "_" + СокрЛП(ЗаданиеНаПодбор.Метаданные().Имя);
	мУИД_Документа = СокрЛП(Документ.Ссылка.УникальныйИдентификатор()); //+ "_" + СокрЛП(ЗаданиеНаПодбор.Метаданные().Имя);
	//конец изменений 
		
	//5. Получим строки заказа
	МассивСтрок = Новый Массив;
	
	//6. Сформируем строку данных
	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + Формат(мУИД_Документа, "ЧГ=0"));	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_ВозвратТоваровПоставщику_" + Формат(мУИД_Документа, "ЧГ=0"));	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("order");
	ЗаписьXML.ЗаписатьАтрибут("id"				, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("action"			, "set");
	ЗаписьXML.ЗаписатьАтрибут("order_id"		, СокрЛП(мУИД_Документа));
	ЗаписьXML.ЗаписатьАтрибут("display_name"	, СокрЛП(Документ.Номер));
	ЗаписьXML.ЗаписатьАтрибут("client_id"		, СокрЛП(Документ.Контрагент.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьАтрибут("auto_start"		, "f");
	ЗаписьXML.ЗаписатьАтрибут("auto_activate"	, "f");
	ЗаписьXML.ЗаписатьАтрибут("type"			, "R");
	
	//НомерМашины = ""; Водитель = "";
	//ДатаОтгрузки = ЗаданиеНаПодбор.Заказ.ДатаОтгрузки;апрос = Новый Запрос;
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			   |	ПТЛ_ПланДоставки.ТЭК,
	//			   |	ПТЛ_ПланДоставки.Водитель,
	//			   |	ПТЛ_ПланДоставки.ТранспортноеСредство
	//			   |ИЗ
	//			   |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	//			   |ГДЕ
	//			   |	ПТЛ_ПланДоставки.ЗаданиеНаПодбор = &ЗаданиеНаПодбор
	//			   |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ";
	//Запрос.УстановитьПараметр("ЗаданиеНаПодбор", ЗаданиеНаПодбор);
	//
	//Результат = Запрос.Выполнить().Выбрать();
	//
	//Если Результат.Следующий() Тогда
	//
	//	НомерМашины = Результат.ТранспортноеСредство.ГосНомер;
	//	Водитель = Результат.Водитель;
	//
	//КонецЕсли;	
	//	
	//ЗаписатьАтрибут_XML(ЗаписьXML, "car_num"		, СокрЛП(НомерМашины));
	//ЗаписатьАтрибут_XML(ЗаписьXML, "driver_fio"		, СокрЛП(Водитель));
	ЗаписатьАтрибут_XML(ЗаписьXML, "date_to_ship"	, Формат(Документ.Дата, "ДФ = 'dd-MM-yyyy HH:mm'"));
	
	ЗаписьXML.ЗаписатьАтрибут("holder_id", "-1");
	
	ЗаписатьАтрибут_XML(ЗаписьXML, "responsible"	, СокрЛП(Документ.Ответственный));
	ЗаписатьАтрибут_XML(ЗаписьXML, "comments"		, Лев(Документ.Комментарий, 180));
	
	//7. Добавим строки
	НомерСтроки = 0;
	ЕстьДанные = Ложь;
	Для Каждого ТекСтрока Из Документ.Товары Цикл
		
		//++ Приводим количество к базовой единице измерения 
		Количество = ТекСтрока.Количество * ?(ТекСтрока.Коэффициент = 0, 1, ТекСтрока.Коэффициент);
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьДанные = Истина; 
		
		НомерСтроки = НомерСтроки + 1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("order_detail");
		//ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		Поз = МассивСтрок.Найти(НомерСтроки);
		Если Поз = Неопределено Тогда
		Иначе
			МассивСтрок.Удалить(Поз);
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("action", "set");
		ЗаписьXML.ЗаписатьАтрибут("order_id", СокрЛП(мУИД_Документа));
		ЗаписьXML.ЗаписатьАтрибут("line", Формат(НомерСтроки, "ЧГ=0"));
		//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура).Код));
		ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ТекСтрока.Номенклатура_НСИ_НоменклатураОбменаССолво_Код));
		//конец изменений 
		ЗаписьXML.ЗаписатьАтрибут("qty", Формат(Количество, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		
		
		//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(Документ.Склад.Код));
		ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(Документ.Склад_Код));
		//конец изменений 
		
		//ЗаписьXML.ЗаписатьАтрибут("marker", "1");
		//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если НЕ ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура, Истина) Тогда		
		Если Не ТекСтрока.Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство Тогда
		//конец изменений 	
			ЗаписьXML.ЗаписатьАтрибут("marker", "1");		
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 		
		//Возврат Истина;		
		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "order", ЗаписьXML, Узел, Документ.Ссылка,ПРГАДОКОМ); 
//конец изменений 		
	КонецЕсли; 
	
	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мВозрат = Истина;
	
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "order", ЗаписьXML, Узел, Документ,ПРГАДОКОМ); 
	Если мВозрат  Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов, Документ.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Документ","ВозвратТоваровПоставщику",Документ.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
	КонецЕсли;	
	
	//конец изменений 
	
	Возврат мВозрат;
	
КонецФункции

//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
Функция ВыгрузитьПеремещениеТоваров(Соединение, АПеремещение, Узел, ПРГАДОКОМ, СтруктураПараметров)
	
	Перем Блокировка, РезВыгрузки ;
	
		НужноУдалятьРегистрацию = Ложь;
	
		Перемещение = ПрочитатьДанныеПоСсылке(АПеремещение, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,Истина);
	
		Если Перемещение  =  Неопределено тогда
			 возврат РезВыгрузки;
		КонецЕсли;
		 
		РезВыгрузки  = Ложь;

	    Если Перемещение.СкладОтправитель_НСИ_ПодключенКSolvo И Перемещение.СкладПолучатель_НСИ_ПодключенКSolvo И НЕ Узел.Склады.Найти(Перемещение.СкладОтправитель, "Склад") = Неопределено И НЕ Узел.Склады.Найти(Перемещение.СкладПолучатель, "Склад") = Неопределено Тогда
			
			РезВыгрузки = Выгрузить_ЗаданиеНаСменуСклада(Соединение, Перемещение, Узел,ПРГАДОКОМ,СтруктураПараметров);
			
		ИначеЕсли Перемещение.СкладОтправитель_НСИ_ПодключенКSolvo И НЕ Узел.Склады.Найти(Перемещение.СкладОтправитель, "Склад") = Неопределено И НЕ Перемещение.СкладПолучатель_НСИ_ПодключенКSolvo Тогда
			
			РезВыгрузки = ВыгрузитьПеремещениеТоваров_Заказ(Соединение, Перемещение, Узел,ПРГАДОКОМ,СтруктураПараметров);
								
		ИначеЕсли НЕ Перемещение.СкладОтправитель_НСИ_ПодключенКSolvo И Перемещение.СкладПолучатель_НСИ_ПодключенКSolvo И НЕ Узел.Склады.Найти(Перемещение.СкладПолучатель, "Склад") = Неопределено Тогда
			
			РезВыгрузки =  ВыгрузитьПеремещениеТоваров_ПО(Соединение, Перемещение, Узел,ПРГАДОКОМ,СтруктураПараметров);
			
		Иначе	
			 //на всякий случай условия не пройдены нужно удалить регистрацию
			ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,Перемещение.Ссылка);
			Если НужноУдалятьРегистрацию Тогда
				ПроверитьИУдалитьРегистрациюИзменений("Документ","ПеремещениеТоваров",Перемещение.Ссылка, Узел, Блокировка, СтруктураПараметров);
			КонецЕсли;	
			возврат Истина;
		КонецЕсли;
		
		Если РезВыгрузки Тогда
			ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,Перемещение.Ссылка);
			Если НужноУдалятьРегистрацию Тогда
				ПроверитьИУдалитьРегистрациюИзменений("Документ","ПеремещениеТоваров",Перемещение.Ссылка, Узел, Блокировка, СтруктураПараметров);
			КонецЕсли;	
			СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
		КонецЕсли;	
		
		возврат РезВыгрузки;

КонецФункции	
//конец изменений 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////								
// ПРОЦЕДУРЫ ПО ВЫГРУЗКЕ ДОКУМЕНТОВ 1С В ПРИХОДНЫЙ ОРДЕР (RCN)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Проверяет и выгружает при необходимости документ "Поступление товаров и услуг". Возвращает индикатор удачного завершения
Функция ВыгрузитьПоступлениеТоваровУслуг(Соединение, АПоступлениеТоваровУслуг, Узел,ПРГАДОКОМ,СтруктураПараметров)
	Перем Блокировка, РезВыгрузки,НужноУдалятьРегистрацию;
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	ПоступлениеТоваровУслуг = ПрочитатьДанныеПоСсылке(АПоступлениеТоваровУслуг, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,Истина);
	Если ПоступлениеТоваровУслуг =  Неопределено тогда
		 возврат РезВыгрузки;
	КонецЕсли;	
	//конец изменений 

	Если НЕ ЗначениеЗаполнено(ПоступлениеТоваровУслуг) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ПоступлениеТоваровУслуг.Номер) И (ПоступлениеТоваровУслуг.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	//1.1 Проверим наличие номенклатуры
	Для Каждого ТекСтрока Из ПоступлениеТоваровУслуг.Товары Цикл
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ,СтруктураПараметров) = Ложь Тогда
		//конец изменений 	
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//1.2 Проверим наличие контрагента
	Если ЗначениеЗаполнено(ПоступлениеТоваровУслуг.Контрагент) Тогда
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьКонтрагента(Соединение, ПоступлениеТоваровУслуг.Контрагент, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьКонтрагента(Соединение, ПоступлениеТоваровУслуг.Контрагент, Узел,,ПРГАДОКОМ,СтруктураПараметров) = Ложь Тогда
		//конец изменений 	
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//2. Получим номер пакета
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мУИД_Документа = СокрЛП(ПоступлениеТоваровУслуг.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	мУИД_Документа = СокрЛП(ПоступлениеТоваровУслуг.Ссылка.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	//конец изменений 
	
	МассивСтрок = Новый Массив;
	//ТекстЗапроса = "select line from rcn_details where rcn_details.rcn_id = '"+СокрЛП(ПоступлениеТоваровУслуг.УникальныйИдентификатор())+"'";
	//Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса,,,,Узел);
	//Если Рез <> Неопределено Тогда
	//	Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
	//		НомерСтроки = Рез.Fields("line").value;
	//		Если МассивСтрок.Найти(НомерСтроки) = Неопределено Тогда
	//			МассивСтрок.Добавить(НомерСтроки);
	//		КонецЕсли;
	//		Рез.MoveNext(); 
	//	КонецЦикла;
	//КонецЕсли;	
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + Формат(мУИД_Документа, "ЧГ=0"));	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_ПоступлениеТоваровУслуг_" + Формат(мУИД_Документа, "ЧГ=0"));	
	//конец изменений 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcn");
	//ЗаписьXML.ЗаписатьАтрибут("syncid"			, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("id"				, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("action"			, "set");
	ЗаписьXML.ЗаписатьАтрибут("rcn_id"			, СокрЛП(мУИД_Документа));
	ЗаписьXML.ЗаписатьАтрибут("display_name"	, СокрЛП(ПоступлениеТоваровУслуг.Номер));
	ЗаписьXML.ЗаписатьАтрибут("type"			, "S");
	
	ЗаписатьАтрибут_XML(ЗаписьXML, "supplier_id", СокрЛП(ПоступлениеТоваровУслуг.Контрагент.УникальныйИдентификатор()));
	
	//7. Добавим строки
	НомерСтроки = 0;
	ЕстьДанные = Ложь;
	Для Каждого ТекСтрока Из ПоступлениеТоваровУслуг.Товары Цикл
		
		//++ Приводим количество к базовой единице измерения 
		//Ожиганов выгружаем по количеству накладной
		//Количество = ТекСтрока.Количество * ?(ТекСтрока.Коэффициент = 0, 1, ТекСтрока.Коэффициент);
		Количество = ТекСтрока.СП_КоличествоПоНакладной * ?(ТекСтрока.Коэффициент = 0, 1, ТекСтрока.Коэффициент);
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьДанные = Истина; 
		
		НомерСтроки = НомерСтроки + 1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("rcn_detail");
		//ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		Поз = МассивСтрок.Найти(НомерСтроки);
		Если Поз = Неопределено Тогда
		Иначе
			МассивСтрок.Удалить(Поз);
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("action"	, "set");
		ЗаписьXML.ЗаписатьАтрибут("rcn_id"	, СокрЛП(мУИД_Документа));
		ЗаписьXML.ЗаписатьАтрибут("line"	, Формат(НомерСтроки, "ЧГ=0"));
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписьXML.ЗаписатьАтрибут("sku_id"	, СокрЛП(ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура).Код));
		ЗаписьXML.ЗаписатьАтрибут("sku_id"	, СокрЛП(ТекСтрока.Номенклатура_НСИ_НоменклатураОбменаССолво_Код));
		//конец изменений 
		ЗаписьXML.ЗаписатьАтрибут("qty"		, Формат(Количество, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если НЕ ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура, Истина) Тогда
		Если Не Текстрока.Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство Тогда
		//конец изменений 	
			ЗаписьXML.ЗаписатьАтрибут("marker", "1");		
		КонецЕсли; 
		
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(ПоступлениеТоваровУслуг.СкладОрдер_Код));
		ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(ПоступлениеТоваровУслуг.СкладОрдер_Код));
		//конец изменений 

		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	////8. Удалим неиспользованные строки
	//Для Каждого НомерСтроки Из МассивСтрок Цикл
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("rcn_detail");
	//	ЗаписьXML.ЗаписатьАтрибут("syncid"		, Формат(НомерПакета,"ЧГ=0"));
	//	ЗаписьXML.ЗаписатьАтрибут("action"		, "delete");
	//	ЗаписьXML.ЗаписатьАтрибут("order_id"	, СокрЛП(мУИД_Документа));
	//	ЗаписьXML.ЗаписатьАтрибут("line"		, Формат(НомерСтроки, "ЧГ=0"));
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 		
		//Возврат Истина;		
		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "rcn", ЗаписьXML, Узел, ПоступлениеТоваровУслуг,ПРГАДОКОМ);
	//конец изменений 	
	КонецЕсли; 
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//перенесем выше 
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "rcn", ЗаписьXML, Узел, ПоступлениеТоваровУслуг,ПРГАДОКОМ);
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,ПоступлениеТоваровУслуг.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Документ","ПоступлениеТоваровУслуг",ПоступлениеТоваровУслуг.Ссылка,Узел, Блокировка,СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
	КонецЕсли;	
	//конец изменений 
	
	Возврат мВозрат;
	
КонецФункции // ()   

//Проверяет и выгружает при необходимости документ "Задание на смену". Возвращает индикатор удачного завершения
Функция ВыгрузитьЗаданиеНаСмену(Соединение, АДокумент, Узел,ПРГАДОКОМ,СтруктураПараметров)
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	Перем Блокировка, РезВыгрузки, НужноУдалятьРегистрацию;
	
	Документ = ПрочитатьДанныеПоСсылке(АДокумент, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,Истина);
	Если Документ  =  Неопределено тогда
		 возврат РезВыгрузки;
	КонецЕсли;	
	 //конец изменений 

	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(Документ.Номер) И (Документ.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	//1.1 Проверим наличие номенклатуры
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//Если ВыгрузитьНоменклатуру(Соединение, Документ.Номенклатура, Узел,,ПРГАДОКОМ) = Ложь Тогда
	Если ВыгрузитьНоменклатуру(Соединение, Документ.Номенклатура, Узел,,ПРГАДОКОМ,СтруктураПараметров) = Ложь Тогда
	//конец изменений 	
		Возврат Ложь;
	КонецЕсли;
	
	//2. Получим номер пакета
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мУИД_Документа = СокрЛП(Документ.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	мУИД_Документа = СокрЛП(Документ.Ссылка.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	//конец изменений 
	
	МассивСтрок = Новый Массив;	
	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_ЗаданиеНаСмену_" + Формат(мУИД_Документа, "ЧГ=0"));	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcn");
	//ЗаписьXML.ЗаписатьАтрибут("syncid"			, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("id"				, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("action"			, "set");
	ЗаписьXML.ЗаписатьАтрибут("rcn_id"			, СокрЛП(мУИД_Документа));
	ЗаписьXML.ЗаписатьАтрибут("display_name"	, СокрЛП(Документ.Номер));
	ЗаписьXML.ЗаписатьАтрибут("type"			, "P");
	
	Если Ложь Тогда // для переключения выгружаемых реквизитов
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписатьАтрибут_XML(ЗаписьXML, "production_line", СокрЛП(Документ.Подразделение.Код));
		ЗаписатьАтрибут_XML(ЗаписьXML, "production_line", СокрЛП(Документ.Подразделение_Код));
		//конец изменений 
	Иначе
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ПРГ_КодЛинии = ?(ПустаяСтрока(Документ.Подразделение.КодСолво),Документ.Подразделение.Код,Документ.Подразделение.КодСолво);
		ПРГ_КодЛинии = ?(ПустаяСтрока(Документ.Подразделение_КодСолво),Документ.Подразделение_Код,Документ.Подразделение_КодСолво);
		//конец изменений 
		ЗаписатьАтрибут_XML(ЗаписьXML, "production_line", СокрЛП(ПРГ_КодЛинии));
	КонецЕсли;	
	ЗаписатьАтрибут_XML(ЗаписьXML, "date_to_ship", Документ.ДатаЗадания);
	
	//7. Добавим строки
	НомерСтроки = 1;
	ЕстьДанные = Ложь;
	
	//++ Приводим количество к базовой единице измерения 
	Количество = Документ.Количество * ?(Документ.Коэффициент = 0, 1, Документ.Коэффициент);
	Если Количество = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ЕстьДанные = Истина; 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcn_detail");
	//ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
	Поз = МассивСтрок.Найти(НомерСтроки);
	Если Поз = Неопределено Тогда
	Иначе
		МассивСтрок.Удалить(Поз);
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("action"	, "set");
	ЗаписьXML.ЗаписатьАтрибут("rcn_id"	, СокрЛП(мУИД_Документа));
	ЗаписьXML.ЗаписатьАтрибут("line"	, Формат(НомерСтроки, "ЧГ=0"));
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписьXML.ЗаписатьАтрибут("sku_id"	, СокрЛП(ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(Документ.Номенклатура).Код));
	ЗаписьXML.ЗаписатьАтрибут("sku_id"	, СокрЛП(Документ.Номенклатура_НСИ_НоменклатураОбменаССолво_Код));
	//конец изменений 
	ЗаписьXML.ЗаписатьАтрибут("qty"		, Формат(Количество, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(Документ.Склад.Код));
	ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(Документ.Склад_Код));
	//конец изменений 
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//Если НЕ ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(Документ.Номенклатура, Истина) Тогда
	Если Не Документ.Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство Тогда 
	//конец изменений 	
		ЗаписьXML.ЗаписатьАтрибут("marker", "1");		
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 	
	//	Возврат Истина;		
	 	мВозрат  =Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "rcn", ЗаписьXML, Узел, Документ,ПРГАДОКОМ);	
	//конец изменений 
	КонецЕсли; 
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "rcn", ЗаписьXML, Узел, Документ,ПРГАДОКОМ);
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,Документ.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Документ","СП_ЗаданиеНаСмену",Документ.Ссылка,Узел, Блокировка,СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
	КонецЕсли;		
	//конец изменений 
	
	Возврат мВозрат;
	
КонецФункции // ()   

//Проверяет и выгружает при необходимости документ "Претензия". Возвращает индикатор удачного завершения
Функция ВыгрузитьПретензию(Соединение, АДокумент, Узел,ПРГАДОКОМ,СтруктураПараметров=Неопределено)
	 //начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
    Перем Блокировка, РезВыгрузки,НужноУдалятьРегистрацию;
	
	Документ = ПрочитатьДанныеПоСсылке(АДокумент, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,Истина);
	Если  Документ  =  Неопределено тогда
		 возврат РезВыгрузки;
	 КонецЕсли;	
	 //конец изменений 
	 
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(Документ.Номер) И (Документ.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	//1.1 Проверим наличие номенклатуры
	Для Каждого ТекСтрока Из Документ.Товары Цикл
		//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ,СтруктураПараметров) = Ложь Тогда
			//конец изменений 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//2. Получим номер пакета
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мУИД_Документа = СокрЛП(Документ.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	мУИД_Документа = СокрЛП(Документ.Ссылка.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	//конец изменений 
	
	МассивСтрок = Новый Массив;	
	
	//начало изменений Ожиганов 22.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + Формат(мУИД_Документа, "ЧГ=0"));	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_Претензия_" + Формат(мУИД_Документа, "ЧГ=0"));	
	//конец изменений 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcn");
	ЗаписьXML.ЗаписатьАтрибут("syncid"			, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("id"				, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("action"			, "set");
	ЗаписьXML.ЗаписатьАтрибут("rcn_id"			, СокрЛП(мУИД_Документа));
	ЗаписьXML.ЗаписатьАтрибут("display_name"	, СокрЛП(Документ.Номер));
	ЗаписьXML.ЗаписатьАтрибут("type"			, "R");
	
	//ЗаписатьАтрибут_XML(ЗаписьXML, "supplier_id", СокрЛП(ПоступлениеТоваровУслуг.Контрагент.УникальныйИдентификатор()));
	
	//7. Добавим строки
	НомерСтроки = 0;
	ЕстьДанные = Ложь;
	
	Для каждого мТекСтрока Из Документ.Товары Цикл
		
		Если мТекСтрока.КоличествоВозврат = 0 Тогда
			Продолжить;		
		КонецЕсли; 
		
		//++ Приводим количество к базовой единице измерения 
		Количество = мТекСтрока.КоличествоВозврат * ?(мТекСтрока.Коэффициент = 0, 1, мТекСтрока.Коэффициент);
		Если Количество = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		ЕстьДанные = Истина; 
		
		НомерСтроки = НомерСтроки + 1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("rcn_detail");
		//ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		Поз = МассивСтрок.Найти(НомерСтроки);
		Если Поз = Неопределено Тогда
		Иначе
			МассивСтрок.Удалить(Поз);
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("action"	, "set");
		ЗаписьXML.ЗаписатьАтрибут("rcn_id"	, СокрЛП(мУИД_Документа));
		ЗаписьXML.ЗаписатьАтрибут("line"	, Формат(НомерСтроки, "ЧГ=0"));
		//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписьXML.ЗаписатьАтрибут("sku_id"	, СокрЛП(ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(мТекСтрока.Номенклатура).Код));
		ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(мТекСтрока.Номенклатура_НСИ_НоменклатураОбменаССолво_Код));
		//конец изменений 
		ЗаписьXML.ЗаписатьАтрибут("qty"		, Формат(Количество, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		
		//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если НЕ ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(мТекСтрока.Номенклатура, Истина) Тогда		
		Если Не мТекСтрока.Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство Тогда
		//конец изменений 	
			ЗаписьXML.ЗаписатьАтрибут("marker", "1");		
		КонецЕсли; 
		//Blik 250517 65968 н раскомментировано
		ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(Документ.Склад.Код));
		//Blik 250517 65968 к
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла; 
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 		
		//Возврат Истина;		
		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "rcn", ЗаписьXML, Узел, Документ.Ссылка, ПРГАДОКОМ);
//конец изменений 		
	КонецЕсли; 
	
	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "rcn", ЗаписьXML, Узел, Документ,ПРГАДОКОМ);

	Если мВозрат  Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,Документ.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Документ","ПР_Претензия",Документ.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
	КонецЕсли;	
	
	//конец изменений 
	
	Возврат мВозрат;
	
КонецФункции // ()   

//Проверяет и выгружает при необходимости документ "Перемещение товаров". Возвращает индикатор удачного завершения
Функция ВыгрузитьПеремещениеТоваров_ПО(Соединение, Документ, Узел,ПРГАДОКОМ,СтруктураПарметров)

	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(Документ.Номер) И (Документ.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	//1.1 Проверим наличие номенклатуры
	Для Каждого ТекСтрока Из Документ.Товары Цикл
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел,,ПРГАДОКОМ,СтруктураПарметров) = Ложь Тогда
		//конец изменений 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Документ.СкладПолучатель) Тогда
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьКонтрагента(Соединение, Документ.СкладПолучатель, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьКонтрагента(Соединение, Документ.СкладПолучатель, Узел,,ПРГАДОКОМ,СтруктураПарметров) = Ложь Тогда
		//конец изменений 	
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//2. Получим номер пакета
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мУИД_Документа = СокрЛП(Документ.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	мУИД_Документа = СокрЛП(Документ.Ссылка.УникальныйИдентификатор());// + "_" + СокрЛП(ПоступлениеТоваровУслуг.Метаданные().Имя);
	//конец изменений 
	
	МассивСтрок = Новый Массив;	
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_ПеремещениеТоваров_" + Формат(мУИД_Документа, "ЧГ=0"));	
	//конец изменений 
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_ПеремещениеТоваров_" + Формат(мУИД_Документа, "ЧГ=0"));	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcn");
	ЗаписьXML.ЗаписатьАтрибут("syncid"			, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("id"				, Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("action"			, "set");
	ЗаписьXML.ЗаписатьАтрибут("rcn_id"			, СокрЛП(мУИД_Документа));
	ЗаписьXML.ЗаписатьАтрибут("display_name"	, СокрЛП(Документ.Номер));
	ЗаписьXML.ЗаписатьАтрибут("type"			, "M");
	
	//ЗаписатьАтрибут_XML(ЗаписьXML, "supplier_id", СокрЛП(ПоступлениеТоваровУслуг.Контрагент.УникальныйИдентификатор()));
	
	//7. Добавим строки
	НомерСтроки = 0;
	ЕстьДанные = Ложь;
	
	Для каждого мТекСтрока Из Документ.Товары Цикл
	
		//++ Приводим количество к базовой единице измерения 
		Количество = мТекСтрока.Количество * ?(мТекСтрока.Коэффициент = 0, 1, мТекСтрока.Коэффициент);
		Если Количество = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		ЕстьДанные = Истина; 
		
		НомерСтроки = НомерСтроки + 1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("rcn_detail");
		//ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		Поз = МассивСтрок.Найти(НомерСтроки);
		Если Поз = Неопределено Тогда
		Иначе
			МассивСтрок.Удалить(Поз);
		КонецЕсли;
		ЗаписьXML.ЗаписатьАтрибут("action"	, "set");
		ЗаписьXML.ЗаписатьАтрибут("rcn_id"	, СокрЛП(мУИД_Документа));
		ЗаписьXML.ЗаписатьАтрибут("line"	, Формат(НомерСтроки, "ЧГ=0"));
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписьXML.ЗаписатьАтрибут("sku_id"	, СокрЛП(ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(мТекСтрока.Номенклатура).Код));
		ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(мТекСтрока.Номенклатура_НСИ_НоменклатураОбменаССолво_Код));
		//конец изменений 
		ЗаписьXML.ЗаписатьАтрибут("qty"		, Формат(Количество, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		
		ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(Документ.СкладПолучатель.Код));
		
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если НЕ ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(мТекСтрока.Номенклатура, Истина) Тогда		
		Если Не Текстрока.Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство Тогда
		//конец изменений 	
			ЗаписьXML.ЗаписатьАтрибут("marker", "1");		
		КонецЕсли; 
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла; 
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Возврат Истина;		
		мВозрат = Истина;
		//конец изменений 
	Иначе
		мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "rcn", ЗаписьXML, Узел, Документ,ПРГАДОКОМ);
	КонецЕсли; 
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//перенесем выше 
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "rcn", ЗаписьXML, Узел, Документ,ПРГАДОКОМ);
	//конец изменений 
	
	Возврат мВозрат;
	
КонецФункции // ()   

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////								
// ПРОЦЕДУРЫ ПО ВЫГРУЗКЕ ДОКУМЕНТОВ 1С В ПЛАН ДОСТАВКИ (SHIPMENT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Проверяет и выгружает при необходимости документ "План доставки". Возвращает индикатор удачного завершения
Функция ВыгрузитьПланДоставки(Соединение, АПланДоставки, Узел,ПРГАДОКОМ,СтруктураПараметров)
	//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	Перем Блокировка, РезВыгрузки,НужноУдалятьРегистрацию;	
	
	Если НЕ ЗначениеЗаполнено(АПланДоставки) Тогда
		//совместимость со старым алгоритмом		
		Возврат Истина;
	КонецЕсли;	
	
	ПланДоставки = ПрочитатьДанныеПоСсылке(АПланДоставки, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,Истина);
	Если  ПланДоставки =  Неопределено тогда
		 возврат РезВыгрузки;
	КонецЕсли;

//	 Предупреждение("Данные считаны");
	//конец изменений 
	
	//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	Если НЕ ЗначениеЗаполнено(ПланДоставки) Тогда
	//конец изменений 	
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ПланДоставки.Номер) И (ПланДоставки.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	//начало изменений Ожиганов 15.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//1.1 Проверим наличие номенклатуры 
	Если Не СтруктураПараметров.Свойство("ТаблНеВыгрОбъектов") Тогда
		СтруктураПараметров.Вставить("ТаблНеВыгрОбъектов",СоздатьТаблВыгрОбъектов());
	КонецЕсли;	
	
	Для Каждого ТекСтрока Из ПланДоставки.ЗаданияНаПеревозку Цикл
		Если ТекСтрока.Исключено Тогда
		   Продолжить;
	   КонецЕсли; 
	   //начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	   //поскольку у нас всегда  в начале выгружается вначале задания на подбор и статус задания на подбор меняется
	   //в момент проведения плана доставки избавимся от выгрузок заданий на подбор, они должны уже быть все выгружены
	   //
	   //проконтролируем все ли удалось выгрузить в одном сеансе
	   
	   Если СтруктураПараметров.ТаблНеВыгрОбъектов.Найти(ТекСтрока.ЗаданиеНаПеревозку_ЗаданиеНаПодбор,"Ссылка") <> Неопределено Тогда
		   возврат Ложь;
	   КонецЕсли; 
	   
	   //Если ВыгрузитьЗаданиеНаПодбор(Соединение, ТекСтрока.ЗаданиеНаПеревозку_ЗаданиеНаПодбор, Узел,ПРГАДОКОМ,СтруктураПараметров) = Ложь Тогда
	   // //конец изменений 
	   // 	Возврат Ложь;
	   // КонецЕсли;
		
	КонецЦикла;
	
	//конец изменений 
	
	// Выгрузим перевозчиков сперва
	Для каждого мСтрока Из ПланДоставки.Маршруты Цикл		
		Если ЗначениеЗаполнено(мСтрока.ТЭК) Тогда
			//начало изменений Ожиганов 18.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
			//Если ВыгрузитьКонтрагента(Соединение, мСтрока.ТЭК, Узел,,ПРГАДОКОМ) = Ложь Тогда
			Если ВыгрузитьКонтрагента(Соединение, мСтрока.ТЭК, Узел,,ПРГАДОКОМ,СтруктураПараметров) = Ложь Тогда
			//конец изменений 	
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	мДатаОтгрузки = ПланДоставки.ДатаОтгрузки;
	
	//начало изменений Ожиганов 15.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мВозрат = Ложь;
	мВозрат = Истина;
	//конец изменений 
	
	Для каждого мСтрока Из ПланДоставки.Маршруты Цикл
		
		НомерПакета = 0;
		Если НЕ Узел.ТестоваяВыгрузка Тогда
			
			НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
			
			Если НомерПакета = Неопределено Тогда
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
				Соединение.Close();			
				Возврат Ложь;
			КонецЕсли;		
			
		КонецЕсли;
		
		мУИД_Рейса = мСтрока.Рейс.УникальныйИдентификатор();
		
		//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + Формат(ПланДоставки.УникальныйИдентификатор(), "ЧГ=0"));	
		ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_ПланДоставки_" + Формат(ПланДоставки.Ссылка.УникальныйИдентификатор(), "ЧГ=0")+"_"+Формат(мСтрока.НомерСтроки,"ЧГ="));	
		//конец изменений 
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("shipment");
		ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		ЗаписьXML.ЗаписатьАтрибут("action", "set");
		ЗаписьXML.ЗаписатьАтрибут("shipment_id", СокрЛП(мУИД_Рейса));
		
		ЗаписатьАтрибут_XML(ЗаписьXML, "priority", Формат(мСтрока.ПриоритетОтгрузки, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписатьАтрибут_XML(ЗаписьXML, "car_num", СокрЛП(мСтрока.ТранспортноеСредство.ГосНомер));
		ЗаписатьАтрибут_XML(ЗаписьXML, "car_num", СокрЛП(мСтрока.ТранспортноеСредство_ГосНомер));
		//конец изменений 
		ЗаписатьАтрибут_XML(ЗаписьXML, "car_note", СокрЛП(мСтрока.ТранспортноеСредство));
		ЗаписатьАтрибут_XML(ЗаписьXML, "carrier_id", СокрЛП(мСтрока.ТЭК.УникальныйИдентификатор()));
		ЗаписатьАтрибут_XML(ЗаписьXML, "driver_fio", СокрЛП(мСтрока.Водитель));
		ЗаписатьАтрибут_XML(ЗаписьXML, "date_to_ship", Формат(мДатаОтгрузки, "ДФ = 'dd-MM-yyyy HH:mm'"));
				
		//МассивСтрок = Новый Массив;
		//ТекстЗапроса = "select line from shipment_detail where sdid = '"+СокрЛП(мУИД_Рейса)+"'";
		//Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса,,,,Узел);
		//Если Рез <> Неопределено Тогда
		//	Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
		//		НомерСтроки = Рез.Fields("line").value;
		//		Если МассивСтрок.Найти(НомерСтроки) = Неопределено Тогда
		//			МассивСтрок.Добавить(НомерСтроки);
		//		КонецЕсли;
		//		Рез.MoveNext(); 
		//	КонецЦикла;
		//КонецЕсли;
		
		//7. Добавим строки
		НомерСтроки = 0;
		ЕстьДанные = Ложь;
		
		мЗаданияПоРейсу = ПланДоставки.ЗаданияНаПеревозку.НайтиСтроки(Новый Структура("КлючСтроки, Исключено", мСтрока.КлючСтроки, Ложь));
		
		Для Каждого ТекСтрока Из мЗаданияПоРейсу Цикл
			
			//Поз = МассивСтрок.Найти(ТекСтрока.НомерСтроки);
			//Если Поз = Неопределено Тогда
			//Иначе
			//	МассивСтрок.Удалить(Поз);
			//КонецЕсли;

			//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
			//Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПодбор) Тогда			
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗаданиеНаПеревозку_ЗаданиеНаПодбор) Тогда			
			//конец изменений 	
				Продолжить;			
			КонецЕсли; 
						
			//НомерСтроки = НомерСтроки + 1;
			ЗаписьXML.ЗаписатьНачалоЭлемента("shipment_detail");
			
			ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
			ЗаписьXML.ЗаписатьАтрибут("action", "set");
			ЗаписьXML.ЗаписатьАтрибут("shipment_id", СокрЛП(мУИД_Рейса));
			ЗаписьXML.ЗаписатьАтрибут("line", Формат(ТекСтрока.НомерСтроки, "ЧГ=0"));
			//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
			//ЗаписьXML.ЗаписатьАтрибут("order_id", СокрЛП(ТекСтрока.ЗаданиеНаПеревозку.ЗаданиеНаПодбор.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьАтрибут("order_id", СокрЛП(ТекСтрока.ЗаданиеНаПеревозку_ЗаданиеНаПодбор.УникальныйИдентификатор()));
			//конец изменений 
						
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		//8. Удалим неиспользованные строки
		//Для Каждого НомерСтроки Из МассивСтрок Цикл
		//	ЗаписьXML.ЗаписатьНачалоЭлемента("shipment_detail");
		//	ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
		//	ЗаписьXML.ЗаписатьАтрибут("action", "delete");
		//	ЗаписьXML.ЗаписатьАтрибут("shipment_id", СокрЛП(мУИД_Рейса));
		//	ЗаписьXML.ЗаписатьАтрибут("line", НомерСтроки);
		//	ЗаписьXML.ЗаписатьКонецЭлемента();
		//КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
		Если Узел.ТестоваяВыгрузка Тогда	
			ЗаписьXML.Закрыть();
		//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//немного модифициеруем читобы  в разных файлах сохранялись все пакеты
			//Возврат Истина;		
		    мВозрат = Истина;
		Иначе
		 	мВозрат = мВозрат и ЗапишемДанные_в_Солво(Соединение, НомерПакета, "shipment", ЗаписьXML, Узел, ПланДоставки,ПРГАДОКОМ);
		//конец изменений 
		КонецЕсли; 	
		
		//начало изменений Ожиганов 14.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//перенесли выше
		//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "shipment", ЗаписьXML, Узел, ПланДоставки,ПРГАДОКОМ);
		//конец изменений 
	
	КонецЦикла;
	
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,ПланДоставки.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Документ","ПТЛ_ПланДоставки",ПланДоставки.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
	КонецЕсли;	
	
	Возврат мВозрат;
	
КонецФункции // ()   

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////								
// ПРОЦЕДУРЫ ПО ВЫГРУЗКЕ ДОКУМЕНТОВ 1С В ДОКУМЕНТ ВНУТРИ СКЛАДСКИЕ ОПЕРАЦИИ (SKU_CHANGE_REQ)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Производит выгрузку документа "Комплектация номенклатуры"
Функция Выгрузить_ЗаданиеНаСменуТовара(Соединение, АКомплектацияНоменклатуры, Узел,ПРГАДОКОМ,СтруктураПараметров)
	
	//начало изменений Ожиганов 22.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	Перем Блокировка, РезВыгрузки ,НужноУдалятьРегистрацию;
	
	КомплектацияНоменклатуры = ПрочитатьДанныеПоСсылке(АКомплектацияНоменклатуры, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,Истина);
	Если  КомплектацияНоменклатуры =  Неопределено тогда
		 возврат РезВыгрузки;
	КонецЕсли;
	 //конец изменений 
	

	Если НЕ ЗначениеЗаполнено(КомплектацияНоменклатуры) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(КомплектацияНоменклатуры.Номер) И (КомплектацияНоменклатуры.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//1.1 Проверим наличие номенклатуры
	//начало изменений Ожиганов 22.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 	
	//Если ВыгрузитьНоменклатуру(Соединение, КомплектацияНоменклатуры.Номенклатура, Узел,,ПРГАДОКОМ) = Ложь Тогда
	Если ВыгрузитьНоменклатуру(Соединение, КомплектацияНоменклатуры.Номенклатура, Узел,,ПРГАДОКОМ,СтруктураПараметров) = Ложь Тогда
	//конец изменений 	
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого мСтрока Из КомплектацияНоменклатуры.Комплектующие Цикл
		
		//начало изменений Ожиганов 22.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьНоменклатуру(Соединение, мСтрока.Номенклатура, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьНоменклатуру(Соединение, мСтрока.Номенклатура, Узел,,ПРГАДОКОМ, СтруктураПараметров) = Ложь Тогда
		//конец изменений 			
			Возврат Ложь;
		КонецЕсли;		
	
	КонецЦикла; 
	
	//2. Получим номер пакета
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//начало изменений Ожиганов 22.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мУИД_Комлектация = СокрЛП(КомплектацияНоменклатуры.УникальныйИдентификатор());// + "_" + СокрЛП(КомплектацияНоменклатуры.Метаданные().Имя);
	мУИД_Комлектация = СокрЛП(КомплектацияНоменклатуры.Ссылка.УникальныйИдентификатор());// + "_" + СокрЛП(КомплектацияНоменклатуры.Метаданные().Имя);
	
	//конец изменений 
	мТекСтрокаКомплектующих = КомплектацияНоменклатуры.Комплектующие[0];
	
	//начало изменений Ожиганов 22.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + мУИД_Комлектация);	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_КомплектацияНоменклатуры_" + мУИД_Комлектация);	
	//конец изменений 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("sku_change_req");
	ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("action", "set");
	ЗаписьXML.ЗаписатьАтрибут("doc_id", СокрЛП(мУИД_Комлектация));
	ЗаписьXML.ЗаписатьАтрибут("display_name", СокрЛП(КомплектацияНоменклатуры.Номер));
	
	//начало изменений Ожиганов 22.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписатьАтрибут_XML(ЗаписьXML, "old_sku_id", мТекСтрокаКомплектующих.Номенклатура.Код);
	//ЗаписатьАтрибут_XML(ЗаписьXML, "new_sku_id", КомплектацияНоменклатуры.Номенклатура.Код);
	ЗаписатьАтрибут_XML(ЗаписьXML, "old_sku_id", мТекСтрокаКомплектующих.Номенклатура_Код);
	ЗаписатьАтрибут_XML(ЗаписьXML, "new_sku_id", КомплектацияНоменклатуры.Номенклатура_Код);
	//конец изменений 
	
	//начало изменений Ожиганов 22.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(КомплектацияНоменклатуры.Склад.Код));
	ЗаписьXML.ЗаписатьАтрибут("category", СокрЛП(КомплектацияНоменклатуры.Склад_Код));
	//конец изменений 
	
	мКоличество = КомплектацияНоменклатуры.Количество * ?(КомплектацияНоменклатуры.Коэффициент = 0, 1, КомплектацияНоменклатуры.Коэффициент);
	
	ЗаписатьАтрибут_XML(ЗаписьXML, "qty", мКоличество);
	
	ЗаписатьАтрибут_XML(ЗаписьXML, "comments", Лев(КомплектацияНоменклатуры.Комментарий, 180));
	
 	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
//начало изменений Ожиганов 22.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 		
//		Возврат Истина;		
		мВозрат = Истина;
	Иначе
        мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "sku_change_req", ЗаписьXML, Узел, КомплектацияНоменклатуры,ПРГАДОКОМ);
//конец изменений 		
	КонецЕсли; 
	
	//начало изменений Ожиганов 22.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "sku_change_req", ЗаписьXML, Узел, КомплектацияНоменклатуры,ПРГАДОКОМ);	
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов,КомплектацияНоменклатуры.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Документ","КомплектацияНоменклатуры", КомплектацияНоменклатуры.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
	КонецЕсли;		
	//конец изменений 
	
	Возврат мВозрат;
	
КонецФункции // ()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////								
// ПРОЦЕДУРЫ ПО ВЫГРУЗКЕ ДОКУМЕНТОВ 1С ДОКУМЕНТ ВНУТРИ СКЛАДСКИЕ ОПЕРАЦИИ (CATEGORY_CHANGE_REQ)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Производит выгрузку документа "Перемещение товаров"
Функция Выгрузить_ЗаданиеНаСменуСклада(Соединение, ПеремещениеТоваров, Узел,ПРГАДОКОМ, СтруктураПарметров)

	Если НЕ ЗначениеЗаполнено(ПеремещениеТоваров) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ПеремещениеТоваров.Номер) И (ПеремещениеТоваров.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//1.1 Проверим наличие номенклатуры	
	Для каждого мСтрока Из ПеремещениеТоваров.Товары Цикл
		
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если ВыгрузитьНоменклатуру(Соединение, мСтрока.Номенклатура, Узел,,ПРГАДОКОМ) = Ложь Тогда
		Если ВыгрузитьНоменклатуру(Соединение, мСтрока.Номенклатура, Узел,,ПРГАДОКОМ,СтруктураПарметров) = Ложь Тогда
		//конец изменений 	
			Возврат Ложь;
		КонецЕсли;		
	
	КонецЦикла; 
	
	//2. Получим номер пакета
	НомерПакета = 0;
	Если НЕ Узел.ТестоваяВыгрузка Тогда
		
		НомерПакета = ПолучитьНомерПакета(Соединение, Узел,ПРГАДОКОМ);
		
		Если НомерПакета = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Ошибка получения номера пакета");
			Соединение.Close();			
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мУИД_Документа = СокрЛП(ПеремещениеТоваров.УникальныйИдентификатор());// + "_" + СокрЛП(ПеремещениеТоваров.Метаданные().Имя);
	мУИД_Документа = СокрЛП(ПеремещениеТоваров.Ссылка.УникальныйИдентификатор());// + "_" + СокрЛП(ПеремещениеТоваров.Метаданные().Имя);
	//конец изменений 
	//мТекСтрокаКомплектующих = КомплектацияНоменклатуры.Комплектующие[0];
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_" + мУИД_Документа);	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_ПеремещениеТоваров_" + мУИД_Документа);	
	//конец изменений 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("category_change_req");
	ЗаписьXML.ЗаписатьАтрибут("syncid", Формат(НомерПакета,"ЧГ=0"));
	ЗаписьXML.ЗаписатьАтрибут("action", "set");
	ЗаписьXML.ЗаписатьАтрибут("doc_id", СокрЛП(мУИД_Документа));
	ЗаписьXML.ЗаписатьАтрибут("display_name", СокрЛП(ПеремещениеТоваров.Номер));
	
	//ПеремещениеТоваров.СкладОтправитель.Код  ПеремещениеТоваров.СкладПолучатель.Код
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписатьАтрибут_XML(ЗаписьXML, "old_category_id", ПеремещениеТоваров.СкладОтправитель.Код);
	ЗаписатьАтрибут_XML(ЗаписьXML, "old_category_id", ПеремещениеТоваров.СкладОтправитель_Код);
	//конец изменений 
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//ЗаписатьАтрибут_XML(ЗаписьXML, "new_category_id", ПеремещениеТоваров.СкладПолучатель.Код);
	ЗаписатьАтрибут_XML(ЗаписьXML, "new_category_id", ПеремещениеТоваров.СкладПолучатель_Код);
	//конец изменений 
	ЗаписатьАтрибут_XML(ЗаписьXML, "comments", Лев(ПеремещениеТоваров.Комментарий, 180));
	
	//мКоличество = КомплектацияНоменклатуры.Количество * ?(КомплектацияНоменклатуры.Коэффициент = 0, 1, КомплектацияНоменклатуры.Коэффициент);	
	
	Для каждого ТекСтрока Из ПеремещениеТоваров.Товары Цикл
		
		//++ Приводим количество к базовой единице измерения 
		Количество = ТекСтрока.Количество * ?(ТекСтрока.Коэффициент = 0, 1, ТекСтрока.Коэффициент);
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
        ЗаписьXML.ЗаписатьНачалоЭлемента("category_change_detail");
		
		ЗаписатьАтрибут_XML(ЗаписьXML, "doc_id"	, мУИД_Документа);
		ЗаписатьАтрибут_XML(ЗаписьXML, "line"	, ТекСтрока.НомерСтроки, Истина);
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//ЗаписатьАтрибут_XML(ЗаписьXML, "sku_id"	, ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура).Код);
		ЗаписьXML.ЗаписатьАтрибут("sku_id", СокрЛП(ТекСтрока.Номенклатура_НСИ_НоменклатураОбменаССолво_Код));
		//конец изменений 
		ЗаписатьАтрибут_XML(ЗаписьXML, "qty"	, Количество);
		
		//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		//Если НЕ ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(ТекСтрока.Номенклатура, Истина) Тогда		
		Если Не Текстрока.Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство Тогда
		//конец изменений 	
			ЗаписьXML.ЗаписатьАтрибут("marker", "1");		
		КонецЕсли; 
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
 	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Заглушка для выгрузки в файл
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 	
		//Возврат Истина;		
		мВозрат =  Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "category_change_req", ЗаписьXML, Узел, ПеремещениеТоваров,ПРГАДОКОМ);
	//конец изменений 	
	КонецЕсли; 
	
	//начало изменений Ожиганов 19.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	//мВозрат = ЗапишемДанные_в_Солво(Соединение, НомерПакета, "category_change_req", ЗаписьXML, Узел, ПеремещениеТоваров,ПРГАДОКОМ);
	
	//конец изменений 
	
	Возврат мВозрат;
	
КонецФункции // ()
 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////								
// СЕРВИСНЫЕ ПРОЦЕДУРЫ ПО НЕОБХОДИМЫЕ ДЛЯ ВЫГРУЗКИ / ЗАГРУЗКИ ПАКЕТОВ
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Настраивает соединение с Solvo через ADO
Функция УстановитьСоединение(Узел) Экспорт
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Временная заглушка
	Если Узел.ТестоваяВыгрузка Тогда	
		Возврат Истина;			
	КонецЕсли; 	
	//-- Spl_Апроф 	
	
//	СтрокаСоединения="Provider=MSDAORA.1;Data Source="+Источник+";User Id="+Юзер+";Password="+Пароль+";";Соединение= Новый COMОбъект("ADODB.Connection");
//	Соединение.Open(СтрокаСоединения);
	
	ИмяДрайвера = Узел.ИмяДрайвера;
	DSN = Узел.DSN;
	ИмяСервера = Узел.Сервер;
	ИмяБазы = Узел.БазаДанных;
	ИмяПользователя = Узел.Логин;
	Пароль = Узел.Пароль;
	GATEWAY_ID = Узел.GATEWAY_ID;
	
	//Источник = "WMSDB = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = "+ИмяСервера+")(PORT = "+GATEWAY_ID+"))(CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = "+ИмяБазы+")))";
	
	//ИмяДрайвера=?(ИмяДрайвера = "", "DRIVER=" +"{Oracle in XE}", "DRIVER=" +ИмяДрайвера); //ИмяДрайвера="{Oracle in XE}";
	//СтрокаСоединения = ""+?(DSN = "", "", "DSN="+DSN+";")+ ИмяДрайвера + ";SERVER=" + ИмяСервера +";Database="+ИмяБазы+";UID="+ИмяПользователя+";PWD="+Пароль;
	//СтрокаСоединения = "Provider=MSDAORA.1; Data Source="+Источник+";UID="+ИмяПользователя+";PWD="+Пароль;
	//СтрокаСоединения = "Data Source="+Источник+";UID="+ИмяПользователя+";PWD="+Пароль;
	//СтрокаСоединения = "Provider=MSDAORA.1; Data Source="+Источник+";UID="+ИмяПользователя+";PWD="+Пароль;
	СтрокаСоединения = "Data Source="+ИмяБазы+";User Id="+ИмяПользователя+";Password="+Пароль+";";
	
	Соединение = Новый COMОбъект("ADODB.Connection"); 
	
	Соединение.ConnectionTimeOut =600;
	Соединение.CursorLocation = 3;
	Соединение.ConnectionString = СтрокаСоединения;
	Попытка
		Соединение.Open();  
		Возврат Соединение;
	Исключение
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Соединение с базой Solvo для узла """+Узел.Код+""" не установлено:"+Символы.ПС+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

//Возвращает номер очередного пакета
Функция ПолучитьНомерПакета(Соединение, Узел = Неопределено,ПРГАДОКОМ) Экспорт
	
	//ТекстЗапроса = "select MAX(ID) as ID from from_host_header_message";
	ТекстЗапроса = "SELECT seq_from_header_id.nextval FROM dual";
	Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса,,,,Узел,ПРГАДОКОМ);
	
	НомерПакета = Неопределено;
	Если Рез <> Неопределено Тогда
		Если ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Тогда
			Если Рез.Fields(0).Value = Null Тогда
				НомерПакета = 1;			
			Иначе	
				//НомерПакета = Число(Рез.Fields(0).Value)+1;
				НомерПакета = Число(Рез.Fields(0).Value);
			КонецЕсли; 
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерПакета;
	
КонецФункции

//Выполняет запрос и возвращает данные запроса
Функция ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено, Узел = Неопределено,ПРГАДОКомм=Неопределено) Экспорт
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Установим заглушку временно
	Если НЕ Узел = Неопределено Тогда		
		Если Узел.ТестоваяВыгрузка Тогда		
			//начало изменений Ожиганов 11.07.2016 б/н расширем тестирумый блок
//			Сообщить(ТекстЗапроса);
			//конец изменений 
			//вернуть на место
			возврат Истина;
			Возврат Ложь;		
		КонецЕсли; 	
	КонецЕсли; 
	//-- Spl_Апроф
	
	Если Соединение = Неопределено Тогда
		Если Узел <> Неопределено Тогда
			Соединение = УстановитьСоединение(Узел);
		КонецЕсли;
		Если Соединение = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,, "Потеряно соединение с базой Solvo");
			Возврат Неопределено;
		КонецЕсли;
		ПРГАДОКомм = Неопределено;
	КонецЕсли;
	
	//++ Spl_Апроф 05.12.2014 (k.russkih@a-prof.ru)
	//МассивПараметров = Новый Массив;
	//Если Параметр1 <> Неопределено Тогда
	//	МассивПараметров.Добавить(Параметр1);
	//КонецЕсли;
	//Если Параметр2 <> Неопределено Тогда
	//	МассивПараметров.Добавить(Параметр2);
	//КонецЕсли;
	//Если Параметр3 <> Неопределено Тогда
	//	МассивПараметров.Добавить(Параметр3);
	//КонецЕсли;
		
	//SQL_команда = Новый COMОбъект("ADODB.Command"); 	//Команда выполняемая на Скуль
	//SQL_команда.ActiveConnection = Соединение;
	//SQL_команда.CommandText = ТекстЗапроса;
	//SQL_команда.CommandType = 1;	//Текстовый запрос
	
	Если ПРГАДОКомм = Неопределено Тогда
		SQL_команда = Новый COMОбъект("ADODB.Command"); 	//Команда выполняемая на Скуль
		SQL_команда.ActiveConnection = Соединение;
		ПРГАДОКомм = SQL_команда;
	Иначе
		SQL_команда = ПРГАДОКомм;
		Для к = 0 По SQL_команда.Parameters.Count-1 Цикл
			SQL_команда.Parameters.Delete(0);
		КонецЦикла;	
	КонецЕсли;	
	SQL_команда.CommandText = ТекстЗапроса;
	SQL_команда.CommandType = 1;	//Текстовый запрос
	
	
	Если МассивПараметров <> Неопределено Тогда
		Для Каждого ТекПараметр Из МассивПараметров Цикл
			Если ТипЗнч(ТекПараметр) = Тип("Строка") Тогда
				Параметр = SQL_команда.CreateParameter(,129,,СтрДлина(ТекПараметр),ТекПараметр);
				SQL_команда.Parameters.Append(Параметр);
			ИначеЕсли ТипЗнч(ТекПараметр) = Тип("Число") Тогда
				Если Цел(ТекПараметр) = ТекПараметр Тогда
					Параметр = SQL_команда.CreateParameter(,5,,15,ТекПараметр);
					SQL_команда.Parameters.Append(Параметр);
				Иначе
					Параметр = SQL_команда.CreateParameter(,5,,15,ТекПараметр);
					SQL_команда.Parameters.Append(Параметр);
				КонецЕсли;
			Иначе
				Параметр = SQL_команда.CreateParameter(,132,,СтрДлина(ТекПараметр),ТекПараметр);
				SQL_команда.Parameters.Append(Параметр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		Рез = SQL_команда.Execute();
		Возврат Рез;
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
		Рез = Неопределено;
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

//начало изменений Ожиганов 09.04.2015 ускори немножко без создания нескольк раз АДО ДБ

Функция ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса,Узел, ПРГАДоДБ) Экспорт
	
	
	//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Установим заглушку временно
	Если НЕ Узел = Неопределено Тогда		
		Если Узел.ТестоваяВыгрузка Тогда		
			//начало изменений Ожиганов 11.07.2016 б/н расширем тестирумый блок
			Сообщить(ТекстЗапроса);
			//конец изменений 
			//вернуть на место
			возврат Истина;
			//Возврат Ложь;		
		КонецЕсли; 	
	КонецЕсли; 
	//-- Spl_Апроф
	
	Если Соединение = Неопределено Тогда
		Если Узел <> Неопределено Тогда
			Соединение = УстановитьСоединение(Узел);
		КонецЕсли;
		Если Соединение = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,, "Потеряно соединение с базой Solvo");
			Возврат Неопределено;
		КонецЕсли;
		ПРГАДоДБ = Неопределено;
	КонецЕсли;
	
	//++ Spl_Апроф 05.12.2014 (k.russkih@a-prof.ru)
	//МассивПараметров = Новый Массив;
	//Если Параметр1 <> Неопределено Тогда
	//	МассивПараметров.Добавить(Параметр1);
	//КонецЕсли;
	//Если Параметр2 <> Неопределено Тогда
	//	МассивПараметров.Добавить(Параметр2);
	//КонецЕсли;
	//Если Параметр3 <> Неопределено Тогда
	//	МассивПараметров.Добавить(Параметр3);
	//КонецЕсли;
	
	Если ПРГАДоДБ = Неопределено Тогда
		SQL_команда = Новый COMОбъект("ADODB.Command"); 	//Команда выполняемая на Скуль
		SQL_команда.ActiveConnection = Соединение;
		SQL_команда.CommandText = ТекстЗапроса;
		SQL_команда.CommandType = 1;	//Текстовый запрос
		ПРГАДоДБ = SQL_команда;
	Иначе
		SQL_команда = ПРГАДоДБ;
		SQL_команда.CommandText = ТекстЗапроса;
		SQL_команда.CommandType = 1;	//Текстовый запрос
	КонецЕсли;	
	
	//Если МассивПараметров <> Неопределено Тогда
	//	Для Каждого ТекПараметр Из МассивПараметров Цикл
	//		Если ТипЗнч(ТекПараметр) = Тип("Строка") Тогда
	//			Параметр = SQL_команда.CreateParameter(,129,,СтрДлина(ТекПараметр),ТекПараметр);
	//			SQL_команда.Parameters.Append(Параметр);
	//		ИначеЕсли ТипЗнч(ТекПараметр) = Тип("Число") Тогда
	//			Если Цел(ТекПараметр) = ТекПараметр Тогда
	//				Параметр = SQL_команда.CreateParameter(,5,,15,ТекПараметр);
	//				SQL_команда.Parameters.Append(Параметр);
	//			Иначе
	//				Параметр = SQL_команда.CreateParameter(,5,,15,ТекПараметр);
	//				SQL_команда.Parameters.Append(Параметр);
	//			КонецЕсли;
	//		Иначе
	//			Параметр = SQL_команда.CreateParameter(,132,,СтрДлина(ТекПараметр),ТекПараметр);
	//			SQL_команда.Parameters.Append(Параметр);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	Попытка
		Рез = SQL_команда.Execute();
		Возврат Рез;
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
		Рез = Неопределено;
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

//конец изменений 


//Преобразует строку в число
Функция ПолучитьЧисло(Стр)
	Разделитель = ?(Найти(Строка(0.1),",") = 0, ".", ",");
	Рез = СтрЗаменить(Стр, ",", Разделитель);
	Рез = СтрЗаменить(Стр, ".", Разделитель);
	Рез = СтрЗаменить(Стр, Символы.НПП, "");
	Попытка
		Результат = Число(Рез);
	Исключение
		Результат = 0;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

//Запускает обмен с Solvo под определенным пользователем (обходной режим)
Процедура ЗапуститьОбходнойРежимОбменаСолво() Экспорт
	#Если Клиент Тогда
		Если ИмяПользователя() = "ОбменSolvo" Тогда
			Для СчПовторов = 1 По 12 Цикл
				Попытка
					АП_ВыполнитьОбменСолво();
				Исключение
					Продолжить;
				КонецПопытки;
				Предупреждение("Пауза в обмене Solvo", 60);
			КонецЦикла;
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

//Формирует соответствие по номерам пакетов и обновляет строку ошибок
Процедура ЗаписатьОшибкуПакета(ОшибочныеПакеты = Неопределено, НомерПакета = 0, СтрокаОшибок = "") Экспорт
	Если ОшибочныеПакеты = Неопределено Тогда
		ОшибочныеПакеты = Новый Соответствие;
	КонецЕсли;
	
	Стр = ОшибочныеПакеты.Получить(НомерПакета);
	Стр = ?(Стр = Неопределено, "Errors (ошибки):", Стр);
	
	Стр = Стр + ". "+СтрокаОшибок;
	
	ОшибочныеПакеты.Вставить(НомерПакета, Стр);
КонецПроцедуры

Функция ПроверитьВозможностьФормированияПакета(РезультатЗапроса, Узел) Экспорт

	Если НЕ РезультатЗапроса = Неопределено Тогда
		
		//Добавили для возможности выгрузки в файл, а не напрямую в СОЛВО
		Если Узел = Неопределено И ТипЗнч(РезультатЗапроса) = Тип("Булево") Тогда
			Возврат 1;		
		ИначеЕсли Узел.ТестоваяВыгрузка Тогда
			Возврат 1;
		Иначе	
			Возврат РезультатЗапроса.EOF();
		КонецЕсли; 
			
	КонецЕсли; 	

КонецФункции // ()

Функция СоздадимОбъектДляЗаписиXML(Узел, ИмяФайла) Экспорт 
	
	ЗаписьXML = Новый ЗаписьXML;
	Если Узел.ТестоваяВыгрузка Тогда
		ЗаписьXML.ОткрытьФайл(Узел.КаталогДляТестовойВыгрузки + СокрЛП(ИмяФайла) + ".xml", "KOI8-R");	
	Иначе	
		ЗаписьXML.УстановитьСтроку("KOI8-R");	
	КонецЕсли; 
	
	Возврат ЗаписьXML;

КонецФункции // ()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////								
// СЕРВИСНЫЕ ПРОЦЕДУРЫ ПО ОБРАБОТКЕ ВЫГРУЖАЕМЫХ ЗНАЧЕНИЙ В СОЛВО
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//l.status in ( 'A', 'X', 'G', 'a', 'L', 'P', 'F' ) фильтры на остатки наложенные разработчиком

Функция ПреобразуемТекстовыеСтроки(мСтрока)

	МассивЗамены = Новый Массив;
	МассивЗамены.Добавить("{");
	МассивЗамены.Добавить("}");
	МассивЗамены.Добавить("'");
	МассивЗамены.Добавить(";");
	МассивЗамены.Добавить("""");
	
	Для каждого СтрМассив Из МассивЗамены Цикл
	
		мСтрока = СтрЗаменить(мСтрока, СтрМассив, "");
	
	КонецЦикла; 
	
	Возврат мСтрока;

КонецФункции // ()

//Общая процедура по формирования пакета для записи в СОЛВО
Функция ЗапишемДанные_в_Солво(Соединение, НомерПакета, Тэг, ЗаписьXML, Узел, ОбъектОшибки,ПРГАДОКОМ) Экспорт

	//параметры добавляем строго в порядке объявления в тексте запроса
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(НомерПакета);
	МассивПараметров.Добавить(Тэг);
	МассивПараметров.Добавить("set");
	//МассивПараметров.Добавить("<sku>"); //пишем начало пакета
	
	ДлинаСтроки = МАКС(Узел.ДлинаСтроки, 2048);	//На случай, если забыли
	ИсходнаяСтрока = ЗаписьXML.Закрыть();
	Позиция = 1;
	РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
	
	текДлинаСтроки = СтрДлина(РезультирующаяСтрока);
	
	мТребуетсяОбновитьСтатус = Ложь;
	
	//В случае когда строка меньше чем влазит в message, то ее пишем в from_host_header_message
	Если СтрДлина(РезультирующаяСтрока) <= 2000 Тогда
	
		МассивПараметров.Добавить(РезультирующаяСтрока);
		
		МассивПараметров.Добавить("ready");
		МассивПараметров.Добавить("prg");
		МассивПараметров.Добавить("prg");
		
		ТекстЗапроса = "insert into from_host_header_message(ID, TYPE, action, message, status, src_host_id, dst_host_id) values(?,?,?,?,?,?,?)";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров,,, Узел,ПРГАДОКОМ);
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ОбъектОшибки, "Не удалось добавить заголовок пакета");
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		мТребуетсяОбновитьСтатус = Истина;
		
		МассивПараметров.Добавить("<" + Тэг);
		
		МассивПараметров.Добавить("inwork");
		МассивПараметров.Добавить("prg");
		МассивПараметров.Добавить("prg");
		
		ТекстЗапроса = "insert into from_host_header_message(ID, TYPE, action, message, status, src_host_id, dst_host_id) values(?,?,?,?,?,?,?)";
		//Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, НомерПакета, "sku", "ready", Узел);
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров,,, Узел,ПРГАДОКОМ);
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ОбъектОшибки, "Не удалось добавить заголовок пакета");
			Возврат Ложь;
		КонецЕсли;

		//В случае когда строка больше чем влазит в message, то остатки пишем в from_host_detail_message
		СчСтрок = 0;
		
		РезультирующаяСтрока = Прав(РезультирующаяСтрока, СтрДлина(РезультирующаяСтрока) - (СтрДлина(Тэг)+1)); //обрежем начало, т.к. тег мы уже передали в шапку, все остальное передаем в детали
		
		Пока НЕ ПустаяСтрока(РезультирующаяСтрока) Цикл                                                       
			СчСтрок = СчСтрок + 1;
			
			МассивПараметров = Новый Массив;
			//МассивПараметров.Добавить(НомерПакета);
			МассивПараметров.Добавить(НомерПакета);
			МассивПараметров.Добавить(Тэг);
			МассивПараметров.Добавить("set");
			МассивПараметров.Добавить(РезультирующаяСтрока);
			МассивПараметров.Добавить("ready");
			
			ТекстЗапроса = "insert into from_host_detail_message(HEADER_ID, TYPE, action, message, status) values(?,?,?,?,?)";
			Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров,,, Узел,ПРГАДОКОМ);
			
			Если Рез = Неопределено Тогда
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ОбъектОшибки, "Ошибка добавления данных пакета");
			КонецЕсли;
			
			Позиция = Позиция + ДлинаСтроки;
			РезультирующаяСтрока = Сред(ИсходнаяСтрока, Позиция, ДлинаСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Если мТребуетсяОбновитьСтатус Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Формат(НомерПакета, "ЧГ=0"));
		
		//update _header_message set status=ready where id = YOUR_ID_FROM_SEQUENCE
		
		ТекстЗапроса = "update from_host_header_message set status='ready' where id = ?";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров,,, Узел,ПРГАДОКОМ);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ОбъектОшибки, "Ошибка обновления статуса переданных пакетов");
		КонецЕсли;			
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

//Формирует запись атрибута XML-файла, выполняет проверку на заполненность значения, приводит к требуемому формату значения
Процедура ЗаписатьАтрибут_XML(ЗаписьXML, Атрибут, Значение, ИсключительноеЧисло = Ложь) Экспорт

	//Формат(мСтрока.ПриоритетОтгрузки, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0")
	
	Если ТипЗнч(Значение) = Тип("Строка") И Не ПустаяСтрока(Значение) Тогда	
		
		Если НЕ Значение = "00000000-0000-0000-0000-000000000000" Тогда
		
			ЗаписьXML.ЗаписатьАтрибут(Атрибут, СокрЛП(Значение));
		
		КонецЕсли; 
					
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Если ИсключительноеЧисло Тогда
		     ЗаписьXML.ЗаписатьАтрибут(Атрибут, Формат(Значение, "ЧЦ=15; ЧДЦ=0; ЧГ=0"));
		Иначе	
		     ЗаписьXML.ЗаписатьАтрибут(Атрибут, Формат(Значение, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		КонецЕсли; 
				
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		ЗаписьXML.ЗаписатьАтрибут(Атрибут, Формат(Значение, "ДФ = 'dd-MM-yyyy HH:mm'"));
		
	ИначеЕсли ЗначениеЗаполнено(Значение) Тогда
		
		ЗаписьXML.ЗаписатьАтрибут(Атрибут, СокрЛП(Значение));
		
	Иначе
		
		Возврат;
		
	КонецЕсли; 
		
КонецПроцедуры

Функция ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(Знач Номенклатура, ВернутьМаркер = Ложь)
  	
	Если ВернутьМаркер Тогда	
		Возврат ?(Номенклатура.ВидНоменклатуры.НСИ_СобственноеПроизводства, Истина, Ложь);	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Номенклатура.НСИ_НоменклатураОбменаССолво) Тогда		
		Номенклатура = Номенклатура.НСИ_НоменклатураОбменаССолво;
	КонецЕсли;	 
	
	Возврат Номенклатура;

КонецФункции // ()
 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////								
// СЕРВИСНЫЕ ПРОЦЕДУРЫ ПО ЗАГРУЗКЕ СПРАВОЧНИКОВ, ДАННЫХ ПО ДОКУМЕНТАМ ИЗ СОЛВО В 1С
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Процедура загрузки данных из СОЛВО в 1С
Процедура Загрузка_Данных_ИзСолво(Соединение, Узел, Пакет = 0, ПРГТестЧтение=Ложь) Экспорт

	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Начало чтения статусов документов из базы Solvo");
	
	//начало изменений Ожиганов 09.04.2015 
	ПРГАДОДБ = Неопределено;
	//конец изменений 
	
	// Получим необработанные пакеты из таблицы заголовков
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("ready");
	//МассивПараметров.Добавить("order_status_changed");
	
	//ТекстЗапроса = "select * from to_host_header_message where status = ? and TYPE = ? order by ID"; and TYPE like '%status_changed%'
	//начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
	Если ТипЗнч(Пакет) = Тип("Строка") Тогда	
		ТекстЗапроса = "select * from to_host_header_message where id in ('"+Пакет+"') order by ID";		
	ИначеЕсли Пакет = 0 Тогда	
	//конец изменений  
		ТекстЗапроса = "select * from to_host_header_message where status = 'ready' or status = 'error' order by ID";		
	Иначе		
		ТекстЗапроса = "select * from to_host_header_message where id = "+"'"+Формат(Пакет, "ЧГ=0")+"'"+" order by ID";		
	КонецЕсли; 
	
	//начало изменений Ожиганов 09.04.2015 
	//Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров,,,Узел);
	//ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса,Узел, ПРГАДоДБ) 
	Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса,Узел, ПРГАДоДБ); 
	//конец изменений 
	Если Рез = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
		
	ТаблицаПакетов = Новый ТаблицаЗначений;
	ТаблицаПакетов.Колонки.Добавить("НомерПакета");
	ТаблицаПакетов.Колонки.Добавить("Данные", Новый ОписаниеТипов("Строка"));
	ТаблицаПакетов.Колонки.Добавить("ДатаИзменения");
	//начало изменений Ожиганов 16.05.2016 б/н пометим пакеты, которые не будут обрабатываться в статус cancel. Для уменьшения операций чтения
	ТаблицаПакетов.Колонки.Добавить("ДатаСтарта",Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	//конец изменений  

	Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
		НовСтрока = ТаблицаПакетов.Добавить();
		НовСтрока.НомерПакета = Рез.Fields("id").Value;
		НовСтрока.Данные = СокрЛП(Рез.Fields("message").Value);
//начало изменений Ожиганов 16.05.2016 пометим пакеты, которые не будут обрабатываться в статус cancel. Для уменьшения операций чтения
        НовСтрока.ДатаСтарта = Рез.Fields("START_DATE").Value;
//конец изменений  
 		
		Рез.MoveNext(); 
	КонецЦикла;
	
	//2. Получим данные необработанных пакетов
	ТекстЗапроса = "select * from to_host_detail_message where header_ID = ? order by ID";
	ПРГСч = 0; 
	Для Каждого ТекСтрока Из ТаблицаПакетов Цикл
		ПРГСч = ПРГСч+1;
		Если ПРГСч % 100 = 0 Тогда
			 ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Считано пакетов "+Сокрлп(ПРГСч)+" из "+СокрЛП(ТаблицаПакетов.Количество()));
		КонецЕсли;	
		//МассивПараметров = Новый Массив;
		//МассивПараметров.Добавить(ТекСтрока.НомерПакета);
		//Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров,,,Узел);
		//начало изменений Ожиганов 09.04.2015 
		ТекстЗапроса = "select * from to_host_detail_message where header_ID = '"+Формат(ТекСтрока.НомерПакета, "ЧГ=0")+"' order by ID";
		Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса,Узел, ПРГАДоДБ); 
		//конец изменений 
		Если Рез <> Неопределено Тогда
			Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
				ТекСтрока.Данные = ТекСтрока.Данные + СокрЛП(Рез.Fields("message").Value);
				ТекСтрока.ДатаИзменения = Рез.Fields("CREATED").Value;
				Рез.MoveNext(); 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Считано пакетов "+Сокрлп(ТаблицаПакетов.Количество())+" из "+СокрЛП(ТаблицаПакетов.Количество()));
	
	//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
	ПРГСтруктПоискаЗП = Новый Структура("Номенклатура,ДатаВыпуска");
	//конец изменений  

	
	МассивОбработанныхПакетов = Новый Массив;
	ОшибочныеПакеты = Новый Соответствие;
	МассивДокументов = Новый Массив;
		
	ТаблицаДанныхПослеЧтения = Новый ТаблицаЗначений;
	ТаблицаДанныхПослеЧтения.Колонки.Добавить("ИД_Документа");
	ТаблицаДанныхПослеЧтения.Колонки.Добавить("Тип_Документа");
	ТаблицаДанныхПослеЧтения.Колонки.Добавить("СтруктураДанныхСтроки");
	ТаблицаДанныхПослеЧтения.Колонки.Добавить("НомерПакета");
	ТаблицаДанныхПослеЧтения.Колонки.Добавить("ИтоговоеКоличество");
	
	
	//начало изменений Ожиганов 16.05.2016 пометим пакеты, которые не будут обрабатываться в статус cancel. Для уменьшения операций чтения
	таблНеобрабатываемыхПакетов = Новый ТаблицаЗначений;
	таблНеобрабатываемыхПакетов.Колонки.Добавить("НомерПакета");
	таблНеобрабатываемыхПакетов.Колонки.Добавить("комментарий");
	//конец изменений  	 
	
	//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
	ПРГЗагрДатуВыпуска = Константы.ТестСолво.Получить();
	//конец изменений  
		
	//3. Произведём чтение данных пакетов
	Для Каждого ДанныеПакета Из ТаблицаПакетов Цикл
		
		НомерПакета = ДанныеПакета.НомерПакета;
		Данные = ДанныеПакета.Данные;
		
		Если ПустаяСтрока(Данные) Тогда
			ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" has no data (пакет не имеет данных)");
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,Узел, "Пакет № "+НомерПакета+" не имеет данных");
			Продолжить;
		КонецЕсли;
		
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.УстановитьСтроку(Данные);
		СтрокаОшибок = "";
		
		ИД_Документа 	= "";
		НовыйСтатус 	= "";
		Тип_Документа 	= "";
		ИмяДокумента 	= "";
		
		мЭтоЗаказ = Ложь; ЭтоИзменениеСтатуса = Ложь;
		
		//начало изменений Ожиганов 16.05.2016 пометим пакеты, которые не будут обрабатываться в статус cancel. Для уменьшения операций чтения
		ПРГ_СчитаноКолВоСтрок =  ТаблицаДанныхПослеЧтения.Количество();
		//конец изменений  
		
		//<order_status_changed type="S" syncid="14767231" syncdate="12-12-2014 18:12" order_id="86b2d576-7bc5-11e4-bced-2c59e53ea2d8" old_status="a" new_status="R" action="update"/>
		ЕстьОшибки = Ложь;
		Пока ЧтениеХМЛ.Прочитать() Цикл
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				Если ЧтениеХМЛ.Имя = "order_status_changed" Тогда  //Получим статус задания на подбор
					
					НовыйСтатус = ЧтениеХМЛ.ПолучитьАтрибут("new_status");
					ИД_Документа = ЧтениеХМЛ.ПолучитьАтрибут("order_id");
					Тип_Документа = ЧтениеХМЛ.ПолучитьАтрибут("type");
					
					СтруктураДанныхСтроки = Новый Структура;					
					СтруктураДанныхСтроки.Вставить("НовыйСтатус"			,ЧтениеХМЛ.ПолучитьАтрибут("new_status"));
					СтруктураДанныхСтроки.Вставить("мЭтоЗаказ"				,Истина);
					СтруктураДанныхСтроки.Вставить("ЭтоИзменениеСтатуса"	,Истина);
					
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки);
					
				ИначеЕсли ЧтениеХМЛ.Имя = "rcn_status_changed" Тогда	//Получим статус приходного ордера
					
					НовыйСтатус = ЧтениеХМЛ.ПолучитьАтрибут("new_status");
					ИД_Документа = ЧтениеХМЛ.ПолучитьАтрибут("rcn_id");
					Тип_Документа = ЧтениеХМЛ.ПолучитьАтрибут("type");
					
					СтруктураДанныхСтроки = Новый Структура;					
					СтруктураДанныхСтроки.Вставить("НовыйСтатус"			,ЧтениеХМЛ.ПолучитьАтрибут("new_status"));
					СтруктураДанныхСтроки.Вставить("мЭтоЗаказ"				,Ложь);
					СтруктураДанныхСтроки.Вставить("ЭтоИзменениеСтатуса"	,Истина);
					
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки);
					
				ИначеЕсли ЧтениеХМЛ.Имя = "rcn_result" Тогда //обработка данных приходного ордера (Результат приемки ПО)
					
					ИД_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("rcn_id");
					Тип_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("type");
					
					//СтруктураДанныхСтроки = Новый Структура;					
					//СтруктураДанныхСтроки.Вставить("НовыйСтатус"		,"D");	
					//СтруктураДанныхСтроки.Вставить("ЭтоИзменениеСтатуса",Истина);
					//СтруктураДанныхСтроки.Вставить("мЭтоЗаказ"			,Ложь);
					//
					//ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки);
				ИначеЕсли ЧтениеХМЛ.Имя = "rcn_result_detail" Тогда // обработка данных ТЧ приходного ордера
					
					//ИД_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("rcn_id");
					//Тип_Документа 	= ЧтениеХМЛ.ПолучитьАтрибут("type");
					
					СтруктураДанныхСтроки = Новый Структура;					
					СтруктураДанныхСтроки.Вставить("ИД_Номенклатуры"	,ЧтениеХМЛ.ПолучитьАтрибут("sku_id"));
					СтруктураДанныхСтроки.Вставить("Количество"			,ЧтениеХМЛ.ПолучитьАтрибут("qty"));
					//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
					//СтруктураДанныхСтроки.Вставить("ДатаПроизводства"	,ЧтениеХМЛ.ПолучитьАтрибут("production_data"));
					СтруктураДанныхСтроки.Вставить("ДатаВыпуска"	,ПРГСтрСолвоВДату(ЧтениеХМЛ.ПолучитьАтрибут("production_date")));
					//конец изменений  
					СтруктураДанныхСтроки.Вставить("СкладКод"			,ЧтениеХМЛ.ПолучитьАтрибут("category"));
					СтруктураДанныхСтроки.Вставить("ИД_Маркера"			,ЧтениеХМЛ.ПолучитьАтрибут("marker"));
					СтруктураДанныхСтроки.Вставить("ЭтоИзменениеСтатуса",Ложь);
					СтруктураДанныхСтроки.Вставить("мЭтоЗаказ"			,Ложь);
					
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки, Истина);
					
				ИначеЕсли ЧтениеХМЛ.Имя = "order_result" Тогда // обработка данных заказ (Результат отгрузки)
					
					ИД_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("order_id");
					Тип_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("type");
					
					СтруктураДанныхСтроки = Новый Структура;					
					СтруктураДанныхСтроки.Вставить("НовыйСтатус"		,ЧтениеХМЛ.ПолучитьАтрибут("action_type"));	
					СтруктураДанныхСтроки.Вставить("ЭтоИзменениеСтатуса",Истина);
					СтруктураДанныхСтроки.Вставить("мЭтоЗаказ"			,Истина);
					
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки);
					
				ИначеЕсли ЧтениеХМЛ.Имя = "order_result_detail" Тогда // обработка данных ТЧ заказа 
					
					ИД_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("order_id");
					//Тип_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("type");
					
					СтруктураДанныхСтроки = Новый Структура;					
					СтруктураДанныхСтроки.Вставить("ИД_Номенклатуры"	,ЧтениеХМЛ.ПолучитьАтрибут("sku_id"));
					СтруктураДанныхСтроки.Вставить("Количество"			,ЧтениеХМЛ.ПолучитьАтрибут("qty"));
					//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
					//СтруктураДанныхСтроки.Вставить("ДатаПроизводства"	,ЧтениеХМЛ.ПолучитьАтрибут("production_date"));
					СтруктураДанныхСтроки.Вставить("ДатаВыпуска"	,ПРГСтрСолвоВДату(ЧтениеХМЛ.ПолучитьАтрибут("production_date")));
					//конец изменений  
					СтруктураДанныхСтроки.Вставить("СкладКод"			,ЧтениеХМЛ.ПолучитьАтрибут("category"));
					СтруктураДанныхСтроки.Вставить("ИД_Маркера"			,ЧтениеХМЛ.ПолучитьАтрибут("marker"));
					СтруктураДанныхСтроки.Вставить("ЭтоИзменениеСтатуса",Ложь);
					СтруктураДанныхСтроки.Вставить("мЭтоЗаказ"			,Истина);
					
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки, Истина);
					
				ИначеЕсли ЧтениеХМЛ.Имя = "receive_load" Тогда // обработка данных приемки (Приемка нового груза)
					
					ИД_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("rcn_id");
					Тип_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("type");
					
					СтруктураДанныхСтроки = Новый Структура;					
					СтруктураДанныхСтроки.Вставить("ИД_Номенклатуры"	,ЧтениеХМЛ.ПолучитьАтрибут("sku_id"));
					СтруктураДанныхСтроки.Вставить("Количество"			,ЧтениеХМЛ.ПолучитьАтрибут("qty"));
					//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
					//СтруктураДанныхСтроки.Вставить("ДатаПроизводства"	,ЧтениеХМЛ.ПолучитьАтрибут("production_data"));
					СтруктураДанныхСтроки.Вставить("ДатаВыпуска"	,ПРГСтрСолвоВДату(ЧтениеХМЛ.ПолучитьАтрибут("production_date")));
					//конец изменений  
					СтруктураДанныхСтроки.Вставить("СкладКод"			,ЧтениеХМЛ.ПолучитьАтрибут("category"));
					СтруктураДанныхСтроки.Вставить("ИД_Маркера"			,ЧтениеХМЛ.ПолучитьАтрибут("marker"));
					СтруктураДанныхСтроки.Вставить("ЭтоИзменениеСтатуса",Ложь);
					СтруктураДанныхСтроки.Вставить("мЭтоЗаказ"			,Ложь);
					
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки);
					
				ИначеЕсли ЧтениеХМЛ.Имя = "delete_load" Тогда // обработка данных приемки (Приемка нового груза)
					
					ИД_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("rcn_id");
					Тип_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("type");
					
					СтруктураДанныхСтроки = Новый Структура;					
					СтруктураДанныхСтроки.Вставить("ИД_Номенклатуры"	,ЧтениеХМЛ.ПолучитьАтрибут("sku_id"));
					СтруктураДанныхСтроки.Вставить("Количество"			,-ЧтениеХМЛ.ПолучитьАтрибут("qty"));
					СтруктураДанныхСтроки.Вставить("ДатаПроизводства"	,ЧтениеХМЛ.ПолучитьАтрибут("production_data"));
					СтруктураДанныхСтроки.Вставить("СкладКод"			,ЧтениеХМЛ.ПолучитьАтрибут("category"));
					СтруктураДанныхСтроки.Вставить("ИД_Маркера"			,ЧтениеХМЛ.ПолучитьАтрибут("marker"));
					СтруктураДанныхСтроки.Вставить("ЭтоИзменениеСтатуса",Ложь);
					СтруктураДанныхСтроки.Вставить("мЭтоЗаказ"			,Ложь);
					
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки);
					
				ИначеЕсли ЧтениеХМЛ.Имя = "sku_change_result" Тогда
					
					ИД_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("doc_id");
					Тип_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("type");
					
					//Запишем изменение по количеству
					СтруктураДанныхСтроки = Новый Структура;					
					СтруктураДанныхСтроки.Вставить("ИД_Номенклатуры"	,ЧтениеХМЛ.ПолучитьАтрибут("sku_id"));
					СтруктураДанныхСтроки.Вставить("Количество"			,ЧтениеХМЛ.ПолучитьАтрибут("qty"));
					СтруктураДанныхСтроки.Вставить("СкладКод"			,ЧтениеХМЛ.ПолучитьАтрибут("category"));
					СтруктураДанныхСтроки.Вставить("ИД_Маркера"			,ЧтениеХМЛ.ПолучитьАтрибут("marker"));
					СтруктураДанныхСтроки.Вставить("ЭтоИзменениеСтатуса",Ложь);
					СтруктураДанныхСтроки.Вставить("мЭтоЗаказ"			,Ложь);
					
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки, Истина);
					
				ИначеЕсли ЧтениеХМЛ.Имя = "category_change_result" Тогда
					
					//ИД_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("doc_id");
					//Тип_Документа 	= ЧтениеХМЛ.ПолучитьАтрибут("type");
					
					//СтруктураДанныхСтроки = Новый Структура;					
					//СтруктураДанныхСтроки.Вставить("ЭтоИзменениеСтатуса",Истина);
					//СтруктураДанныхСтроки.Вставить("мЭтоЗаказ"			,Ложь);
					//СтруктураДанныхСтроки.Вставить("НовыйСтатус"		,"+");
					//
					//ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки, Истина);	
					
				ИначеЕсли ЧтениеХМЛ.Имя = "category_change_result_detail" Тогда
					
					ИД_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("doc_id");
					Тип_Документа 		= ЧтениеХМЛ.ПолучитьАтрибут("type");
					
					СтруктураДанныхСтроки = Новый Структура;					
					СтруктураДанныхСтроки.Вставить("ИД_Номенклатуры"	,ЧтениеХМЛ.ПолучитьАтрибут("sku_id"));
					СтруктураДанныхСтроки.Вставить("Количество"			,ЧтениеХМЛ.ПолучитьАтрибут("qty"));
					СтруктураДанныхСтроки.Вставить("ИД_Маркера"			,ЧтениеХМЛ.ПолучитьАтрибут("marker"));
					СтруктураДанныхСтроки.Вставить("ЭтоИзменениеСтатуса",Ложь);
					СтруктураДанныхСтроки.Вставить("мЭтоЗаказ"			,Ложь);
					
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки, Истина);
					
				ИначеЕсли ЧтениеХМЛ.Имя = "load_category_change" Тогда
					// не обрабатываем
				ИначеЕсли ЧтениеХМЛ.Имя = "load_qty_result" Тогда
					// не обрабатываем									
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		//начало изменений Ожиганов 16.05.2016 пометим пакеты, которые не будут обрабатываться в статус cancel. Для уменьшения операций чтения
		//после разбора xml не добавлены информация для обработки 
		Если ПРГ_СчитаноКолВоСтрок =  ТаблицаДанныхПослеЧтения.Количество()	Тогда 
			Если ТекущаяДата() - ДанныеПакета.ДатаСтарта > 86400 Тогда //ждем сутки навсякий случай
				ПРГ_СтрокаНеобр = таблНеобрабатываемыхПакетов.Добавить();
				ПРГ_СтрокаНеобр.НомерПакета = НомерПакета;
				ПРГ_СтрокаНеобр.Комментарий = "Пакет неотработан, не задан обработчик";
			КонецЕсли;	
		КонецЕсли;	
		//конец изменений  
		
	КонецЦикла;
	
	мТаблицаТолькоС_ИД_Документами = ТаблицаДанныхПослеЧтения.Скопировать();
	мТаблицаТолькоС_ИД_Документами.Свернуть("ИД_Документа");
				
	СтруктураОшибок = Новый Структура;
	СтруктураОшибок.Вставить("ТекстОшибки"		, "");
	СтруктураОшибок.Вставить("ПакетОбработан"	, Ложь);
	
	пред_ИД_Документа = "";  предНомерПакета = 0; НеОбрабатывать = Ложь; мИтоговоеКоличество = Ложь;
	
	//начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
	// в таблицу вставим информацию по головному пакету
	ПРГТаблПакетов = Новый ТаблицаЗначений;
	ПРГТаблПакетов.Колонки.Добавить("НомерПакета");
	ПРГТаблПакетов.Колонки.Добавить("МассивПакетов",Новый ОписаниеТипов("Массив"));
	ПРГТаблПакетов.Колонки.Добавить("СтатусСолво");
	ПРГТаблПакетов.Колонки.Добавить("НовыйСтатус");
	ПРГТаблПакетов.Колонки.Добавить("ИтоговоеКоличество",Новый ОписаниеТипов("Булево"));
	ПРГТаблПакетов.Колонки.Добавить("СвязанныеПакеты",Новый ОписаниеТипов("Массив"));
	ПРГТаблПакетов.Колонки.Добавить("Удалять",Новый ОписаниеТипов("Булево"));

	ПРГСтруктураДопПарметров = Новый Структура;
	ТекДокумент 			 = Неопределено;
	КэшНом = Новый ТаблицаЗначений;
	КэшНом.Колонки.Добавить("Код");
	КэшНом.Колонки.Добавить("Номенклатура");
	КэшНом.Колонки.Добавить("ЕдиницаИзмеренияМестКоэффициент",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,3)));
	КэшНом.Индексы.Добавить("Номенклатура");
	//конец изменений  
	
	//Обработка ошибок
	Для каждого мСтрока Из мТаблицаТолькоС_ИД_Документами Цикл
		
		НайтиСтрокиПоДокументу = ТаблицаДанныхПослеЧтения.НайтиСтроки(Новый Структура("ИД_Документа", мСтрока.ИД_Документа));
		
		МассивОбработанныхПакетов = Новый Массив;
		
		текДокумент = Неопределено;
		
		ПРГТаблПакетов.Очистить();
		//начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
	  //начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
	  ТекДокумент  			= Неопределено;
	  ПРГДокументОпределен  = Ложь;
	  ПРГМетаДок  			= Неопределено;
	  ПРГДокументОпределен  = Ложь;
	  ИД_Документа          = мСтрока.ИД_Документа;
	  
	  СтруктураОшибок = Новый Структура;
	  СтруктураОшибок.Вставить("ТекстОшибки"		, "");
	  СтруктураОшибок.Вставить("ПакетОбработан"	, Ложь);
	  
		
		//Заполним таблицу
		Тип_Документа = "";
		ПРГ_ЭтоЗаказ  = Ложь;
		
		Для Каждого ПРГТекЭлем ИЗ НайтиСтрокиПоДокументу Цикл
			НайдЗнч  = ПРГТаблПакетов.Найти(ПРГТекЭлем.НомерПакета,"НомерПакета");
			Если НайдЗнч = Неопределено Тогда
				НайдЗнч 			  = ПРГТаблПакетов.Добавить();
				НайдЗнч.НомерПакета   = ПРГТекЭлем.НомерПакета;
				НайдЗнч.НовыйСтатус	  = "";
				НайдЗнч.МассивПакетов 	= Новый Массив;
				НайдЗнч.СвязанныеПакеты = Новый Массив;
				НайдЗнч.Удалять		    = Ложь;
				//начало изменений Ожиганов 08.06.2015 немножко оптимизируем 
				НайдЗнч.ИтоговоеКоличество = Ложь;
				//конец изменений  
				
				Если Не ПРГДокументОпределен Тогда
					ПРГ_ЭтоЗаказ  = ПРГТекЭлем.СтруктураДанныхСтроки.мЭтоЗаказ;
					СсылкаНаДокумент = ПРГПолучитьСсылкуНаДокумент(ПРГТекЭлем.Тип_Документа,мСтрока.ИД_Документа,ПРГСтруктураДопПарметров,ОшибочныеПакеты,ПРГТекЭлем.НомерПакета,СтруктураОшибок,ПРГ_ЭтоЗаказ);
					Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
						//ошибки уже записали в функции
						//начало изменений Ожиганов 16.05.2016 пометим пакеты, которые не будут обрабатываться в статус cancel. Для уменьшения операций чтения
						//поскольку все доки сихронизируются по ГУИД исключим те, по котрым не приходит ГУИД
						Если НЕ ЭтоGUID(мСтрока.ИД_Документа) Тогда
							Для счетчикДоков = 0 ПО  НайтиСтрокиПоДокументу.Количество()-1 Цикл
								ПРГ_СтрокаНеобр = таблНеобрабатываемыхПакетов.Добавить();
								ПРГ_СтрокаНеобр.НомерПакета = НайтиСтрокиПоДокументу[счетчикДоков].НомерПакета;
								ПРГ_СтрокаНеобр.Комментарий = " не содержит ид документа 1С";
							КонецЦикла;	
						КонецЕсли;	
						//конец изменений   
						прервать;
					КонецЕсли;
					ЗакэшироватьНоменклатуру(СсылкаНаДокумент,КэшНом);
					ТекДокумент = СсылкаНаДокумент.ПолучитьОбъект(); 
					пред_ИД_Документа = ИД_Документа;
					ПРГДокументОпределен =  Истина;
					ПРГМетаДок  		 = ТекДокумент.Метаданные();
				КонецЕсли;	
				
			КонецЕсли;	
			НайдЗнч.МассивПакетов.Добавить(ПРГТекЭлем);
			Если ПРГТекЭлем.СтруктураДанныхСтроки.ЭтоИзменениеСтатуса  Тогда
				НайдЗнч.СтатусСолво	  = ПРГТекЭлем.СтруктураДанныхСтроки.НовыйСтатус;
			КонецЕсли;	
			
			Если ПРГТекЭлем.ИтоговоеКоличество  Тогда
				НайдЗнч.ИтоговоеКоличество	  = ПРГТекЭлем.ИтоговоеКоличество;
			КонецЕсли;	
			
			
		КонецЦикла;
		
		Если Не ПРГДокументОпределен Тогда
			продолжить;
		КонецЕсли;	
		
		Для Каждого ПРГТекСТрока Из ПРГТаблПакетов Цикл
			   ПРГТекСТрока.НовыйСтатус = ПРГПолучитьСтатусПоДокументу(текДокумент,ПРГТекСТрока.СтатусСолво,ПРГ_ЭтоЗаказ);
			   
		КонецЦикла;	

		ПРГТаблПакетов.Сортировать("НомерПакета");
		
		Если ТипЗнч(ТекДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
			//начало изменений Ожиганов 09.06.2015 уберем передано на склад после статуса спланирован 
			н = 0;
			Пока н < ПРГТаблПакетов.Количество() - 1 Цикл
				Если ПРГТаблПакетов[н].НовыйСтатус = Перечисления.СП_СтатусыЗаданияНаПодбор.Спланирован 
					и ПРГТаблПакетов[н+1].НовыйСтатус = Перечисления.СП_СтатусыЗаданияНаПодбор.ПереданНаСклад
					и (ПРГТаблПакетов[н].МассивПакетов[0].СтруктураДанныхСтроки.ЭтоИзменениеСтатуса и ПРГТаблПакетов[н+1].МассивПакетов[0].СтруктураДанныхСтроки.ЭтоИзменениеСтатуса)
					и НЕ ПРГТаблПакетов[н+1].Удалять
				//пропустим одинаковые пакеты
				Тогда
				    ПРГТаблПакетов[н].СвязанныеПакеты.Добавить(ПРГТаблПакетов[н+1].НомерПакета);
					//начало изменений Ожиганов 09.06.2015 уберем передано на склад после статуса спланирован 
					Для Каждого ПРГСвязЭлем Из ПРГТаблПакетов[н+1].СвязанныеПакеты Цикл
						ПРГТаблПакетов[н].СвязанныеПакеты.Добавить(ПРГСвязЭлем);
					КонецЦикла;	
					//конец изменений 
					ПРГТаблПакетов[н+1].Удалять =  Истина;
				ИначеЕсли ПРГТаблПакетов[н].НовыйСтатус = Перечисления.СП_СтатусыЗаданияНаПодбор.ПереданНаСклад
					и ПРГТаблПакетов[н+1].НовыйСтатус = Перечисления.СП_СтатусыЗаданияНаПодбор.Спланирован 
					и (ПРГТаблПакетов[н].МассивПакетов[0].СтруктураДанныхСтроки.ЭтоИзменениеСтатуса и ПРГТаблПакетов[н+1].МассивПакетов[0].СтруктураДанныхСтроки.ЭтоИзменениеСтатуса)
					и НЕ ПРГТаблПакетов[н].Удалять
				Тогда	
				
				    ПРГТаблПакетов[н+1].СвязанныеПакеты.Добавить(ПРГТаблПакетов[н].НомерПакета);
					//начало изменений Ожиганов 09.06.2015 уберем передано на склад после статуса спланирован 
					Для Каждого ПРГСвязЭлем Из ПРГТаблПакетов[н].СвязанныеПакеты Цикл
						ПРГТаблПакетов[н+1].СвязанныеПакеты.Добавить(ПРГСвязЭлем);
					КонецЦикла;	
					//конец изменений 
				
					ПРГТаблПакетов[н].Удалять =  Истина;
				КонецЕсли;	
				н=н+1;
			КонецЦикла;	
			
			//конец изменений  
			н = 0;
			Пока н < ПРГТаблПакетов.Количество() Цикл
				Если ПРГТаблПакетов[н].Удалять Тогда
					 ПРГТаблПакетов.Удалить(ПРГТаблПакетов[н]);
				Иначе
					н = н+1;
				КонецЕсли;	
			КонецЦИкла;	
			
			
			
			//конец изменений 
			н = 0;
			Пока н < ПРГТаблПакетов.Количество() - 1 Цикл
				Если (ПРГТаблПакетов[н].НовыйСтатус = ПРГТаблПакетов[н+1].НовыйСтатус)
					и (ПРГТаблПакетов[н].НовыйСтатус <> Неопределено)
					и ((ПРГТаблПакетов[н+1].ИтоговоеКоличество)
					или ((ПРГТаблПакетов[н].МассивПакетов.Количество()=1 и ПРГТаблПакетов[н+1].МассивПакетов.Количество()=1)
					и (ПРГТаблПакетов[н].МассивПакетов[0].СтруктураДанныхСтроки.ЭтоИзменениеСтатуса и ПРГТаблПакетов[н+1].МассивПакетов[0].СтруктураДанныхСтроки.ЭтоИзменениеСтатуса)))
				//пропустим одинаковые пакеты
				Тогда
				    ПРГТаблПакетов[н+1].СвязанныеПакеты.Добавить(ПРГТаблПакетов[н].НомерПакета);
					//начало изменений Ожиганов 09.06.2015 уберем передано на склад после статуса спланирован 
					Для Каждого ПРГСвязЭлем Из ПРГТаблПакетов[н].СвязанныеПакеты Цикл
						ПРГТаблПакетов[н+1].СвязанныеПакеты.Добавить(ПРГСвязЭлем);
					КонецЦикла;	
					//конец изменений 
					ПРГТаблПакетов[н].Удалять =  Истина;
				КонецЕсли;	
				н=н+1;
			КонецЦикла;	
			//конец изменений  
			н = 0;
			Пока н < ПРГТаблПакетов.Количество() Цикл
				Если ПРГТаблПакетов[н].Удалять Тогда
					 ПРГТаблПакетов.Удалить(ПРГТаблПакетов[н]);
				Иначе
					н = н+1;
				КонецЕсли;	
			КонецЦИкла;	
			
		//начало изменений Ожиганов 30.12.2015 б/н в случае если в пакетах по заданию на  на подбор 
		//первый статус отменен, а следущие имеют статусы спланирован, перередан на склад, собран, загружаем задание на подбор
		// т.к. смена статуса произошла в солво 			
			н = 0;
			Пока н < ПРГТаблПакетов.Количество() - 1 Цикл
				Если (ПРГТаблПакетов[н].НовыйСтатус = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен)
					и (
					ПРГТаблПакетов[н+1].НовыйСтатус = Перечисления.СП_СтатусыЗаданияНаПодбор.ПереданНаСклад
					или 
					ПРГТаблПакетов[н+1].НовыйСтатус = Перечисления.СП_СтатусыЗаданияНаПодбор.Спланирован
					или 
					ПРГТаблПакетов[н+1].НовыйСтатус = Перечисления.СП_СтатусыЗаданияНаПодбор.ВРаботе
					или 
					ПРГТаблПакетов[н+1].НовыйСтатус = Перечисления.СП_СтатусыЗаданияНаПодбор.Собран
					или 
					ПРГТаблПакетов[н+1].НовыйСтатус = Перечисления.СП_СтатусыЗаданияНаПодбор.Отгружен
					)
					и (ПРГТаблПакетов[н].МассивПакетов[0].СтруктураДанныхСтроки.ЭтоИзменениеСтатуса и ПРГТаблПакетов[н+1].МассивПакетов[0].СтруктураДанныхСтроки.ЭтоИзменениеСтатуса)
					и НЕ ПРГТаблПакетов[н+1].Удалять
					
				//пропустим одинаковые пакеты
				Тогда
				
				    ПРГТаблПакетов[н+1].СвязанныеПакеты.Добавить(ПРГТаблПакетов[н].НомерПакета);
					Для Каждого ПРГСвязЭлем Из ПРГТаблПакетов[н].СвязанныеПакеты Цикл
						ПРГТаблПакетов[н+1].СвязанныеПакеты.Добавить(ПРГСвязЭлем);
					КонецЦикла;	
					ПРГТаблПакетов[н].Удалять =  Истина;
			
				КонецЕсли;	
				н=н+1;
			КонецЦикла;	
			//конец изменений  
			н = 0;
			Пока н < ПРГТаблПакетов.Количество() Цикл
				Если ПРГТаблПакетов[н].Удалять Тогда
					 ПРГТаблПакетов.Удалить(ПРГТаблПакетов[н]);
				Иначе
					н = н+1;
				КонецЕсли;	
			КонецЦИкла;	
			
		//конец изменений  	
		КонецЕсли;
	  	//начало изменений Ожиганов 05.06.2015 деление на 0 ПТИУ 
		//в случае возникновеения ошибки не останавливаемся 
		//продолжаем дальше записывать изменения
		Попытка
		//конец изменений  
			
		//++ Spl_Апроф 13.03.2015 (k.russkih@a-prof.ru)
	  мОдинПакет = (НайтиСтрокиПоДокументу.Количество() = 1);
	  
	  
	  Для Каждого ПРГТекСТрока Из ПРГТаблПакетов Цикл
			
		СтруктураОшибок = Новый Структура;
		СтруктураОшибок.Вставить("ТекстОшибки"		, "");
		СтруктураОшибок.Вставить("ПакетОбработан"	, Ложь);
	    МассивОбработанныхПакетов.Добавить(ПРГТекСТрока.НомерПакета);
		  
		Для каждого мТекДанные Из ПРГТекСТрока.МассивПакетов Цикл  
		//Для каждого мТекДанные Из НайтиСтрокиПоДокументу Цикл
	 //конец изменений  		
			ИД_Документа = мТекДанные.ИД_Документа;
			Тип_Документа = мТекДанные.Тип_Документа;
			СтруктураДанныхСтроки = мТекДанные.СтруктураДанныхСтроки;
			НомерПакета = мТекДанные.НомерПакета;
			мИтоговоеКоличество = мТекДанные.ИтоговоеКоличество; 
			
			//начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
			//Если НЕ предНомерПакета = НомерПакета Тогда
			//
			//	СтруктураОшибок = Новый Структура;
			//	СтруктураОшибок.Вставить("ТекстОшибки"		, "");
			//	СтруктураОшибок.Вставить("ПакетОбработан"	, Ложь);
			//
			//КонецЕсли; 
			//конец изменений  
			
			предНомерПакета = НомерПакета;
			//начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
			//МассивОбработанныхПакетов.Добавить(НомерПакета);
			//конец изменений  
			//начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
			//Если Не ПРГДокументОпределен Тогда
			//	СсылкаНаДокумент = ПРГПолучитьСсылкуНаДокумент(Тип_Документа,ИД_Документа,ПРГСтруктураДопПарметров,ОшибочныеПакеты,НомерПакета,СтруктураОшибок,СтруктураДанныхСтроки.мЭтоЗаказ);
			//	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
			//		//ошибки уже записали в функции
			//		прервать;
			//	КонецЕсли;
			//	ЗакэшироватьНоменклатуру(СсылкаНаДокумент,КэшНом);
			//	ТекДокумент = СсылкаНаДокумент.ПолучитьОбъект(); 
			//	пред_ИД_Документа = ИД_Документа;
			//	ПРГДокументОпределен =  Истина;
			//	ПРГМетаДок  		 = ТекДокумент.Метаданные();
			//КонецЕсли;	
			//конец изменений  
			//начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
			//Обработка изменения статуса документов
			//ПРГОбработаемДанныеПоДокументу_УстановкаСтатуса(ИД_Документа, НовыйСтатус, Тип_Документа, СтруктураОшибок, ЭтоЗаказ = Ложь, текДокумент, мОдинПакет = Истина)
			//СтруктураОшибок = ОбработаемДанныеПоДокументу_УстановкаСтатуса(ИД_Документа, СтруктураДанныхСтроки.НовыйСтатус, Тип_Документа, СтруктураОшибок, СтруктураДанныхСтроки.мЭтоЗаказ, текДокумент, мОдинПакет);
			
			Если СтруктураДанныхСтроки.ЭтоИзменениеСтатуса Тогда
				ПРГОбработаемДанныеПоДокументу_УстановкаСтатуса(ИД_Документа, СтруктураДанныхСтроки.НовыйСтатус, Тип_Документа, СтруктураОшибок, СтруктураДанныхСтроки.мЭтоЗаказ, текДокумент, мОдинПакет);
			Иначе	
			//	
			//	Если ПустаяСтрока(ИД_Документа) ИЛИ НЕ ЭтоGUID(ИД_Документа) Тогда
			//		ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" has no data (пакет не имеет данных)");
			//		Продолжить;
			//	КонецЕсли;
			//	
			//	Если ПустаяСтрока(Тип_Документа) Тогда
			//		ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" has no data (пакет не имеет данных)");
			//		Продолжить;
			//	КонецЕсли;
			//	
			//	СтруктураОшибок = ОбработаемДанныеПоДокументу_УстановкаСтатуса(ИД_Документа, СтруктураДанныхСтроки.НовыйСтатус, Тип_Документа, СтруктураОшибок, СтруктураДанныхСтроки.мЭтоЗаказ, текДокумент, мОдинПакет);
			//	
			//	Если НЕ ПустаяСтрока(СтруктураОшибок.ТекстОшибки) Тогда				
			//		ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+ НомерПакета + СтруктураОшибок.ТекстОшибки);
			//	КонецЕсли; 
			//	
			//	пред_ИД_Документа = ИД_Документа;
			//	
			//Иначе
			//	
			//	Если ПустаяСтрока(ИД_Документа) ИЛИ НЕ ЭтоGUID(ИД_Документа) Тогда
			//		ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" has no data (пакет не имеет данных)");
			//		Продолжить;
			//	КонецЕсли;
			//	
			//	//Если ПустаяСтрока(Тип_Документа) Тогда
			//	//	ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" has no data (пакет не имеет данных)");
			//	//	Продолжить;
			//	//КонецЕсли;
			//	
			//	//Тип_Документа = "S"; //Временно
			//	ЭтоЗаказ = СтруктураДанныхСтроки.мЭтоЗаказ;
			//					
			//	Если НЕ ИД_Документа = пред_ИД_Документа Тогда
			//	
			//		мИмяДокумента = ПолучимТипДокумента1СПоТипуДокументаСолво(Тип_Документа, ЭтоЗаказ);
			//		
			//		Если мИмяДокумента = Неопределено Тогда
			//			
			//			СписокДокументов = Новый Массив;
			//			СписокДокументов.Добавить("СП_ЗаданиеНаСмену");
			//			СписокДокументов.Добавить("ПоступлениеТоваровУслуг");
			//			СписокДокументов.Добавить("ПеремещениеТоваров");
			//			СписокДокументов.Добавить("ПР_Претензия"); //Возврат
			//			СписокДокументов.Добавить("КомплектацияНоменклатуры");
			//			СписокДокументов.Добавить("ТребованиеНакладная");
			//			СписокДокументов.Добавить("СписаниеТоваров");
			//			СписокДокументов.Добавить("СП_ЗаданиеНаПодбор");
			//			СписокДокументов.Добавить("ВозвратТоваровПоставщику");
			//			
			//			Для каждого СтрокаМетаданных Из СписокДокументов Цикл						
			//							
			//				НайденныйДокумент = Документы[СтрокаМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Документа));						
			//				
			//				Если НЕ НайденныйДокумент.ПолучитьОбъект() = Неопределено Тогда							
			//					Прервать;
			//				КонецЕсли;
			//				
			//			КонецЦикла; 
			//			
			//			Если НайденныйДокумент.ПолучитьОбъект() = Неопределено Тогда						
			//				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , ИД_Документа, "по GUID ссылке " + СокрЛП(ИД_Документа) + " не найден документ");
			//				ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" документ не найден");
			//				СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			//				Продолжить;						
			//			КонецЕсли; 
			//									
			//		Иначе			
			//								
			//			НайденныйДокумент = Документы[мИмяДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Документа));						
			//			
			//			Если НайденныйДокумент.ПолучитьОбъект() = Неопределено Тогда
			//				
			//				Если мИмяДокумента = "ТребованиеНакладная" Тогда
			//					
			//					НайденныйДокумент = Документы.СписаниеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Документа));
			//					
			//					Если НайденныйДокумент.ПолучитьОбъект() = Неопределено Тогда
			//						
			//						ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , ИД_Документа, "По пакету №"+СокрЛП(НомерПакета)+"по GUID ссылке " + СокрЛП(ИД_Документа) + " не найден документ");
			//						ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" документ не найден");
			//						СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			//						Продолжить;
			//						
			//					КонецЕсли;
			//					
			//				Иначе
			//					
			//					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , ИД_Документа, "По пакету №"+СокрЛП(НомерПакета)+"по GUID ссылке " + СокрЛП(ИД_Документа) + " не найден документ");
			//					ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" документ не найден");
			//					СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			//					Продолжить;
			//					
			//				КонецЕсли; 
			//			КонецЕсли;
			//			 
			//		КонецЕсли; 
			//		
			//		//Если НайденныйДокумент.ПолучитьОбъект() = Неопределено Тогда						
			//		//	ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , ИД_Документа, "по GUID ссылке " + СокрЛП(ИД_Документа) + " не найден документ");
			//		//	СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			//		//	//Возврат СтруктураОшибок;
			//		//КонецЕсли; 
			//		
			//		текДокумент = НайденныйДокумент.ПолучитьОбъект();
			//							
			//		пред_ИД_Документа = ИД_Документа;
			//		
			//	КонецЕсли; 
				//конец изменений  
				
				//Должна быть каждый раз проверка, т.к. могу обрабатывать пакеты друг за другом, где могуть быть несколько результирующих пакетов
				Если ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
					
					Если мИтоговоеКоличество Тогда
						текДокумент.СП_СтатусДокумента = Перечисления.СП_СтатусыПоступленияТоваров.Закрыто;
					КонецЕсли;
					
					ОчистимСтрокиДокумента_ИтоговыеРезультат(мИтоговоеКоличество, текДокумент, "Товары", "Количество");
				ИначеЕсли ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
					
					Если мИтоговоеКоличество Тогда						
						текДокумент.СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Закрыто;						
					КонецЕсли; 
					
					ОчистимСтрокиДокумента_ИтоговыеРезультат(мИтоговоеКоличество, текДокумент, "Товары", "ПР_ФактическиПринято");
				ИначеЕсли ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПР_Претензия") Тогда
					
					Если мИтоговоеКоличество Тогда						
						текДокумент.СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.Закрыто;						
					КонецЕсли;
					
					ОчистимСтрокиДокумента_ИтоговыеРезультат(мИтоговоеКоличество, текДокумент, "Товары", "КоличествоПринятоСкладом");
				ИначеЕсли ТипЗнч(текДокумент) = Тип("ДокументОбъект.ТребованиеНакладная") Тогда
					
					Если мИтоговоеКоличество Тогда						
						текДокумент.СП_СтатусТребованияНакладной = Перечисления.СП_СтатусыТребованияНакладной.Отгружен;						
					КонецЕсли;
					
					ОчистимСтрокиДокумента_ИтоговыеРезультат(мИтоговоеКоличество, текДокумент, "Материалы", "Количество");
					
				ИначеЕсли ТипЗнч(текДокумент) = Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда
					
					Если мИтоговоеКоличество Тогда						
						текДокумент.СП_СтатусДокумента = Перечисления.СП_СтатусыКомплектацииНоменклатуры.Закрыто;
						текДокумент.СП_КоличествоФакт = 0;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаСмену") Тогда
					
					Если мИтоговоеКоличество Тогда						
						текДокумент.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Закрыто;
						текДокумент.КоличествоФакт = 0;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(текДокумент) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
					
					Если мИтоговоеКоличество Тогда						
						текДокумент.ПР_СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.Закрыто;						
					КонецЕсли;
					
					ОчистимСтрокиДокумента_ИтоговыеРезультат(мИтоговоеКоличество, текДокумент, "Товары", "Количество");
					
				ИначеЕсли ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
					
					//начало изменений Ожиганов 06.06.2015 немножко оптимизируем 
					//бессымсленный вызов, но может в быбущем пригодиться
					//МожноМенятьСтатус = АП_ОбщегоНазначенияСервер.МожноИзменитьСтатусДокументаНаСледующийПоПорядку(текДокумент.Ссылка, текДокумент.СтатусДокумента, Перечисления.СП_СтатусыЗаданияНаПодбор.Собран);
					МожноМенятьСтатус = ПРГМожноИзменитьСтатусДокументаНаСледующийПоПорядку(ПРГМетаДок,текДокумент.Ссылка,текДокумент.СтатусДокумента, Перечисления.СП_СтатусыЗаданияНаПодбор.Собран,ПРГСтруктураДопПарметров);
					//конец изменений  
					
					Если мИтоговоеКоличество И МожноМенятьСтатус Тогда						
						текДокумент.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Собран;						
					КонецЕсли;
					
					//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
					//ОчистимСтрокиДокумента_ИтоговыеРезультат(мИтоговоеКоличество, текДокумент, "Товары", "КоличествоФакт");
					ПРОчистимСтрокиДокумента_ИтоговыеРезультатЗаданиеНаПодбор(мИтоговоеКоличество, текДокумент, "Товары", "КоличествоФакт");
					//конец изменений  
				//++ Spl_Апроф 26.02.2015 (k.russkih@a-prof.ru)
				ИначеЕсли ТипЗнч(текДокумент) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
					
					Если мИтоговоеКоличество И НЕ текДокумент.СП_СтатусДокумента = Перечисления.СП_СтатусыВозвратТоваровПоставщику.Отгружен Тогда						
						текДокумент.СП_СтатусДокумента = Перечисления.СП_СтатусыВозвратТоваровПоставщику.Собран;						
					КонецЕсли;
					
					ОчистимСтрокиДокумента_ИтоговыеРезультат(мИтоговоеКоличество, текДокумент, "Товары", "Количество");
					
				КонецЕсли;				
				
				Если ТипЗнч(текДокумент.ссылка) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда				
					ИмяТЧ_Документа = "Материалы";
				Иначе
				    ИмяТЧ_Документа = "Товары";
				КонецЕсли; 
				
				//начало изменений Ожиганов 06.06.2015 немножко оптимизируем 
				//мНоменклатура = Справочники.Номенклатура.НайтиПоКоду(СтруктураДанныхСтроки.ИД_Номенклатуры);
				ПРГЕдиницаИзмеренияМестКоэффициент = 0;
				мНоменклатура    = ПРГНайтиНоменклатуру(СтруктураДанныхСтроки.ИД_Номенклатуры,КэшНом,ПРГСтруктураДопПарметров,ПРГЕдиницаИзмеренияМестКоэффициент);
				//конец изменений  
				
				мЕстьМаркер = Ложь;
				
				//Если ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
					
				Если НЕ СтруктураДанныхСтроки.Свойство("ИД_Маркера") = Ложь Тогда
					
					Если НЕ СтруктураДанныхСтроки.ИД_Маркера = "-" И НЕ ПустаяСтрока(СтруктураДанныхСтроки.ИД_Маркера) И НЕ СтруктураДанныхСтроки.ИД_Маркера = "*" Тогда
						
						//мНоменклатура = мНоменклатура.НСИ_НоменклатураОбменаССолво;
						
						//Запрос = Новый Запрос;
						//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						//|	Номенклатура.Ссылка
						//|ИЗ
						//|	Справочник.Номенклатура КАК Номенклатура
						//|ГДЕ
						//|	Номенклатура.НСИ_НоменклатураОбменаССолво = &НСИ_НоменклатураОбменаССолво
						//|	И НЕ Номенклатура.Ссылка = &НСИ_НоменклатураОбменаССолво";
						//
						//Запрос.УстановитьПараметр("НСИ_НоменклатураОбменаССолво", мНоменклатура);
						//
						//Результат = Запрос.Выполнить().Выбрать();
						//
						//Если Результат.Следующий() Тогда
						//	
						//	мНоменклатура = Результат.Ссылка;
						//	
						//КонецЕсли; 
						
						мНоменклатура = ПолучимНоменклатуруСолвоПоМаркеру(мНоменклатура,ПРГЕдиницаИзмеренияМестКоэффициент);
						
						мЕстьМаркер = Истина;
						
					КонецЕсли;
					
				КонецЕсли;	
					
				//КонецЕсли; 
				
				Если мНоменклатура.Пустая() Тогда
				
					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "в справочнике ""Номенклатуры"" не найдена номенклатура с кодом: " + СокрЛП(СтруктураДанныхСтроки.ИД_Номенклатуры));
					ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" sku не найдена");
					СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
					Продолжить;
					//Возврат СтруктураОшибок;					
				
				КонецЕсли; 
				
				мДобавилиСтроку = Ложь;
				
				Если НЕ ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаСмену") И НЕ ТипЗнч(текДокумент) = Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда
					
					//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
					Если ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") и ПРГЗагрДатуВыпуска Тогда
						ПРГСтруктПоискаЗП.Номенклатура   = мНоменклатура;
						ПРГСтруктПоискаЗП.ДатаВыпуска    = СтруктураДанныхСтроки.ДатаВыпуска;
						
						РезПоиска = текДокумент[ИмяТЧ_Документа].НайтиСтроки(ПРГСтруктПоискаЗП);
						
						Если РезПоиска.Количество() = 0 Тогда
							ПРГСтруктПоискаЗП.Номенклатура   = мНоменклатура;
							ПРГСтруктПоискаЗП.ДатаВыпуска    = '00010101';
							РезПоиска = текДокумент[ИмяТЧ_Документа].НайтиСтроки(ПРГСтруктПоискаЗП);
							
							Если РезПоиска.Количество() = 0 Тогда
								НайдемСтрокуВДокументе = Неопределено;
							Иначе	
								НайдемСтрокуВДокументе =РезПоиска[0];
							КонецЕсли;	
						Иначе	
							НайдемСтрокуВДокументе =РезПоиска[0];
						КонецЕсли;	
					Иначе
						НайдемСтрокуВДокументе = текДокумент[ИмяТЧ_Документа].Найти(мНоменклатура, "Номенклатура");
					КонецЕсли;	
					//конец изменений  
					 
					
					
					Если НайдемСтрокуВДокументе = Неопределено Тогда
						
						//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
						//Если мЕстьМаркер Тогда  т.к. задание на подбор
							
							Если ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
							
								НайдемСтрокуВДокументе = текДокумент[ИмяТЧ_Документа].Добавить();
								
								мДобавилиСтроку = Истина;
							
							КонецЕсли; 							
						
						//КонецЕсли; 
						//конец изменений  
						
					КонецЕсли;
										
					Если НайдемСтрокуВДокументе = Неопределено Тогда
						
						ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "в документе не найдена строка с номенклатурой " + СокрЛП(мНоменклатура));
						ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" sku в документе не найдена");
						СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
						Продолжить;
						//Возврат СтруктураОшибок;
					КонецЕсли;
				
				КонецЕсли; 
				
				Если ТипЗнч(текДокумент.ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					
					//Если мИтоговоеКоличество Тогда					
					//	НайдемСтрокуВДокументе.Количество = СтруктураДанныхСтроки.Количество;						
					//Иначе						
					НайдемСтрокуВДокументе.Количество = НайдемСтрокуВДокументе.Количество + СтруктураДанныхСтроки.Количество;						
					//КонецЕсли; 
										
					// Рассчитать реквизиты табличной части.
					//начало изменений Ожиганов 09.04.2015 изменение расчета сумм
					//ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НайдемСтрокуВДокументе, текДокумент);
					//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НайдемСтрокуВДокументе, текДокумент);
					//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НайдемСтрокуВДокументе, текДокумент);
					ПересчитатьСуммыПрихНакладной(НайдемСтрокуВДокументе,текДокумент);
					//конец изменений 
					
				ИначеЕсли ТипЗнч(текДокумент.ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
					
					//Если мИтоговоеКоличество Тогда					
					//	НайдемСтрокуВДокументе.Количество = СтруктураДанныхСтроки.Количество;						
					//Иначе						
					НайдемСтрокуВДокументе.Количество = НайдемСтрокуВДокументе.Количество + СтруктураДанныхСтроки.Количество;						
					//КонецЕсли; 
										
					// Рассчитать реквизиты табличной части.
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НайдемСтрокуВДокументе, текДокумент);
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НайдемСтрокуВДокументе, текДокумент);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НайдемСтрокуВДокументе, текДокумент);
					
				ИначеЕсли ТипЗнч(текДокумент.ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					
					//Если мИтоговоеКоличество Тогда					
					//	НайдемСтрокуВДокументе.ПР_ФактическиПринято = СтруктураДанныхСтроки.Количество;						
					//Иначе						
						НайдемСтрокуВДокументе.ПР_ФактическиПринято = НайдемСтрокуВДокументе.ПР_ФактическиПринято + СтруктураДанныхСтроки.Количество;						
					//КонецЕсли;
					
				ИначеЕсли ТипЗнч(текДокумент.ссылка) = Тип("ДокументСсылка.СП_ЗаданиеНаСмену") Тогда
					
					//Если мИтоговоеКоличество Тогда
					//	текДокумент.КоличествоФакт = СтруктураДанныхСтроки.Количество;
					//Иначе
					текДокумент.КоличествоФакт = текДокумент.КоличествоФакт + СтруктураДанныхСтроки.Количество;
					//КонецЕсли;
					
				ИначеЕсли ТипЗнч(текДокумент.ссылка) = Тип("ДокументСсылка.ПР_Претензия") Тогда
					
					//Если мИтоговоеКоличество Тогда
					//	НайдемСтрокуВДокументе.КоличествоПринятоСкладом = СтруктураДанныхСтроки.Количество;
					//Иначе
					НайдемСтрокуВДокументе.КоличествоПринятоСкладом = НайдемСтрокуВДокументе.КоличествоПринятоСкладом + СтруктураДанныхСтроки.Количество;
					//КонецЕсли;
					
				ИначеЕсли ТипЗнч(текДокумент.ссылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
					
					текДокумент.СП_КоличествоФакт = СтруктураДанныхСтроки.Количество;
					
				ИначеЕсли ТипЗнч(текДокумент.ссылка) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
					
					//Если мИтоговоеКоличество Тогда
					//	НайдемСтрокуВДокументе.Количество = СтруктураДанныхСтроки.Количество;
					//Иначе
					НайдемСтрокуВДокументе.Количество = НайдемСтрокуВДокументе.Количество + СтруктураДанныхСтроки.Количество;
					//КонецЕсли;
					
				ИначеЕсли ТипЗнч(текДокумент.ссылка) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
					
					//Если мИтоговоеКоличество Тогда
					//	НайдемСтрокуВДокументе.Количество = СтруктураДанныхСтроки.Количество;
					//Иначе
					НайдемСтрокуВДокументе.Количество = НайдемСтрокуВДокументе.Количество + СтруктураДанныхСтроки.Количество;
					//КонецЕсли;
					
				ИначеЕсли ТипЗнч(текДокумент.ссылка) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
					
					//Если мИтоговоеКоличество Тогда
					//	НайдемСтрокуВДокументе.КоличествоФакт = СтруктураДанныхСтроки.Количество;
					//Иначе
					
					//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
					//Если мЕстьМаркер И мДобавилиСтроку Тогда
					Если мДобавилиСтроку Тогда
 					//конец изменений  						
					
						НайдемСтрокуВДокументе.Номенклатура = мНоменклатура;
						НайдемСтрокуВДокументе.ЕдиницаИзмерения = НайдемСтрокуВДокументе.Номенклатура.ЕдиницаХраненияОстатков;
						НайдемСтрокуВДокументе.Коэффициент = НайдемСтрокуВДокументе.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
						НайдемСтрокуВДокументе.ЕдиницаИзмеренияМест = НайдемСтрокуВДокументе.Номенклатура.ЕдиницаИзмеренияМест; 
					
					КонецЕсли; 
					
					//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
					Если ПРГЗагрДатуВыпуска Тогда
						НайдемСтрокуВДокументе.ДатаВыпуска    = СтруктураДанныхСтроки.ДатаВыпуска;
					КонецЕсли;
					//конец изменений  
					НайдемСтрокуВДокументе.КоличествоФакт = НайдемСтрокуВДокументе.КоличествоФакт + СтруктураДанныхСтроки.Количество;
					//КонецЕсли;
					
					//начало изменений Ожиганов 06.06.2015 немножко оптимизируем 
					//Если ЗначениеЗаполнено(НайдемСтрокуВДокументе.ЕдиницаИзмеренияМест) И Не НайдемСтрокуВДокументе.ЕдиницаИзмеренияМест.Коэффициент = 0 Тогда
					Если ЗначениеЗаполнено(НайдемСтрокуВДокументе.ЕдиницаИзмеренияМест) И Не ПРГЕдиницаИзмеренияМестКоэффициент = 0 Тогда
					//	НайдемСтрокуВДокументе.КоличествоМестФакт = Цел(НайдемСтрокуВДокументе.КоличествоФакт * НайдемСтрокуВДокументе.Коэффициент / НайдемСтрокуВДокументе.ЕдиницаИзмеренияМест.Коэффициент);
						НайдемСтрокуВДокументе.КоличествоМестФакт = Цел(НайдемСтрокуВДокументе.КоличествоФакт * НайдемСтрокуВДокументе.Коэффициент / ПРГЕдиницаИзмеренияМестКоэффициент);
					//конец изменений  	
					Иначе
						НайдемСтрокуВДокументе.КоличествоМестФакт = 0;						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
				
		КонецЦикла; 
	//начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
		Если ПРГДокументОпределен Тогда
			ЕстьОшибки = Ложь;
			мТекстОшибки = "";
			
			Если НЕ ПустаяСтрока(СтруктураОшибок.ТекстОшибки) ИЛИ ЕстьОшибки Тогда				
				СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
				
				ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, мТекстОшибки);
				//согласно идеологии дальше ничего не обрабатываем
				прервать;
			Иначе
				
				Попытка					 				
					Если текДокумент.Модифицированность() Тогда
						
						текДокумент.ДополнительныеСвойства.Вставить("мЭтоЗагрузкаИзСолво", Истина);
						текДокумент.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
						
						Если ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
							//если задание закрыло заказ не будем его заново закрывать
							Если текДокумент.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен Тогда
								
							Иначе
								текДокумент.ДополнительныеСвойства.Вставить("НеНужноЗакрыватьЗаказ", Истина);
							КонецЕсли;	
							текДокумент.Записать(?(текДокумент.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));	
							текДокумент.ОбновитьЗадания(Ложь);
							
							текДокумент.ДополнительныеСвойства.Удалить("НеНужноЗакрыватьЗаказ");
							
						Иначе
							текДокумент.Записать(?(текДокумент.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));	
						КонецЕсли;	
						
					КонецЕсли;	
					
					СтруктураОшибок.Вставить("ПакетОбработан", Истина);
					Для Каждого ТекЭлем Из ПРГТекСТрока.СвязанныеПакеты Цикл
						  МассивОбработанныхПакетов.Добавить(ТекЭлем);
					КонецЦикла;	
				Исключение
					СтруктураОшибок.ТекстОшибки = СтруктураОшибок.ТекстОшибки + "; " + СокрЛП(ОписаниеОшибки());
					
					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,текДокумент.Метаданные() , текДокумент.Ссылка,"Не удалось провести документ!!!
						|"+ОписаниеОшибки());		      
			
					
					
					//Для каждого мПакет Из МассивОбработанныхПакетов Цикл				
					ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+ НомерПакета+ "; " + СокрЛП(ОписаниеОшибки()));
					
					Для Каждого ТекЭлем Из ПРГТекСТрока.СвязанныеПакеты Цикл
						  МассивОбработанныхПакетов.Добавить(ТекЭлем);
						  ЗаписатьОшибкуПакета(ОшибочныеПакеты, ТекЭлем, "Package № "+ ТекЭлем+ "; " + СокрЛП(ОписаниеОшибки()));
					КонецЦикла;	
						
					//КонецЦикла;
					
					СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
					//согласно идеологии дальше ничего не обрабатываем
					прервать;

				КонецПопытки;				
				
			КонецЕсли;
		
		КонецЕсли;	
	конецЦикла;
	//конец изменений  
	
		//начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
		//Если НЕ текДокумент = Неопределено и  Тогда
		Если ПРГДокументОпределен Тогда
		//конец изменений  	
			ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивОбработанныхПакетов);
			ЕстьОшибки = Ложь;
			мТекстОшибки = "";
			
			//Проверим есть ли ошибки по одному из пакетов переданных из СОЛВО
			Для каждого мПакет Из МассивОбработанныхПакетов Цикл
				ТекстОшибки = ОшибочныеПакеты.Получить(мПакет);				
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда				
					ЕстьОшибки = Истина; 
					мТекстОшибки = СокрЛП(?(Найти(СокрЛП(мТекстОшибки), СокрЛП(ТекстОшибки)) = 0, мТекстОшибки + "; " + ТекстОшибки, мТекстОшибки));
				КонецЕсли;				
			КонецЦикла;
            //начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
			//В случае если где то была обнаружена ошибка, то записывать документ не будем
		//	Если НЕ ПустаяСтрока(СтруктураОшибок.ТекстОшибки) ИЛИ ЕстьОшибки Тогда				
		//		СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
		//		
		//		//++ Spl_Апроф 12.03.2015 (k.russkih@a-prof.ru) протранслируем ошибку во все пакеты данного документа, т.к. они не должны приниматься
		//		Для каждого мПакет Из МассивОбработанныхПакетов Цикл
		//			ЗаписатьОшибкуПакета(ОшибочныеПакеты, мПакет, мТекстОшибки);
		//		КонецЦикла;
		//	Иначе
		//		
		//		Попытка					 				
		//			текДокумент.ДополнительныеСвойства.Вставить("мЭтоЗагрузкаИзСолво", Истина);
		//			текДокумент.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
		//			текДокумент.Записать(?(текДокумент.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		//			
		//			Если ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
		//
		//	 			текДокумент.ОбновитьЗадания(Ложь);
		//
		//			КонецЕсли;
		//			
		//			СтруктураОшибок.Вставить("ПакетОбработан", Истина);
		//		Исключение
		//			СтруктураОшибок.ТекстОшибки = СтруктураОшибок.ТекстОшибки + "; " + СокрЛП(ОписаниеОшибки());
		//			
		//			Для каждого мПакет Из МассивОбработанныхПакетов Цикл				
		//				ЗаписатьОшибкуПакета(ОшибочныеПакеты, мПакет, "Package № "+ мПакет + "; " + СокрЛП(ОписаниеОшибки()));
		//			КонецЦикла;
		//			
		//			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
		//		КонецПопытки;				
		//		
		//	КонецЕсли;
		    //конец изменений  
		КонецЕсли;
				
		Для каждого мНомерПакета Из МассивОбработанныхПакетов Цикл
			//начало изменений Ожиганов 09.04.2015 
			//ОбработаемПакеты_В_СОЛВО_ПослеЗагрузки(СтруктураОшибок, ОшибочныеПакеты, мНомерПакета, Соединение, Узел);
			//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
			//в случае тестов ничего ни пишем
			Если ПРГТестЧтение Тогда
				ПРГ_ОбработаемПакеты_В_СОЛВО_ПослеЗагрузки(СтруктураОшибок, ОшибочныеПакеты, мНомерПакета, Соединение, Узел,ПРГАДОДБ,ПРГТестЧтение);
			Иначе	
				ПРГ_ОбработаемПакеты_В_СОЛВО_ПослеЗагрузки(СтруктураОшибок, ОшибочныеПакеты, мНомерПакета, Соединение, Узел,ПРГАДОДБ,ПРГТестЧтение);
			КонецЕсли;	
			//конец изменений 
			
		КонецЦикла;
		
		//начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
		
		ПРГДокументОпределен  = Ложь;
		текДокумент = Неопределено;
		
		//конец изменений  
		Исключение
		
		Если ПРГДокументОпределен Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,текДокумент.Метаданные() , текДокумент.Ссылка, "Не удалось загрузить информацию!!!
				|"+ОписаниеОшибки());		      
				
		  Иначе 
			
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка, , ИД_Документа, "по GUID ссылке " + СокрЛП(ИД_Документа) + "  не удалось загрузить информацию!!!
				|"+ОписаниеОшибки());		      
				
			КонецЕсли;	
		КонецПопытки;

		
	КонецЦикла; 
	
	//начало изменений Ожиганов 16.05.2016 пометим пакеты, которые не будут обрабатываться в статус cancel. Для уменьшения операций чтения
	ПРГ_ЗаписатьИнформациюПоНеобрабатываемымПакетам(таблНеобрабатываемыхПакетов, Соединение, Узел, ПРГАДоДБ,ПРГТестЧтение);
	//конец изменений   
	 
КонецПроцедуры

//Процедура обрабатывает поиск и установку нового статуса для документа
Функция ОбработаемДанныеПоДокументу_УстановкаСтатуса(ИД_Документа, НовыйСтатус, Тип_Документа, СтруктураОшибок, ЭтоЗаказ = Ложь, текДокумент, мОдинПакет = Истина)

	мСтрокаДляОбработки = ИД_Документа;	
	
	//Обработаем тек. структура Ид из СОЛВО "1a30ec27-8430-11e4-bced-2c59e53ea2d8_СП_ЗаданиеНаПодбор"
	//ДоСимволаОбрезаем = Найти(ИД_Документа, "_");	
	//Если НЕ ДоСимволаОбрезаем = 0 Тогда	
	//	 ИД_Документа = Лев(мСтрокаДляОбработки, ДоСимволаОбрезаем - 1);
	//	 мИмяДокумента = Сред(мСтрокаДляОбработки, ДоСимволаОбрезаем + 1, СтрДлина(мСтрокаДляОбработки));
	//КонецЕсли; 
	
	ЗаписатьТекДокумент = Ложь;
	
	Если текДокумент = Неопределено Тогда
	
		мИмяДокумента = ПолучимТипДокумента1СПоТипуДокументаСолво(Тип_Документа, ЭтоЗаказ);
		
		Если мИмяДокумента = Неопределено Тогда
			
			СписокДокументов = Новый Массив;
			СписокДокументов.Добавить("СП_ЗаданиеНаСмену");
			СписокДокументов.Добавить("ПоступлениеТоваровУслуг");
			СписокДокументов.Добавить("ПеремещениеТоваров");
			СписокДокументов.Добавить("ПР_Претензия"); //Возврат
			СписокДокументов.Добавить("КомплектацияНоменклатуры");
			СписокДокументов.Добавить("ТребованиеНакладная");
			СписокДокументов.Добавить("СписаниеТоваров");
			СписокДокументов.Добавить("СП_ЗаданиеНаПодбор");
			СписокДокументов.Добавить("ВозвратТоваровПоставщику");
			
			Для каждого СтрокаМетаданных Из СписокДокументов Цикл						
				
				НайденныйДокумент = Документы[СтрокаМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Документа));						
				
				Если НЕ НайденныйДокумент.ПолучитьОбъект() = Неопределено Тогда							
					Прервать;
				КонецЕсли;
				
			КонецЦикла; 
			
			Если НайденныйДокумент.ПолучитьОбъект() = Неопределено Тогда						
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , ИД_Документа, "по GUID ссылке " + СокрЛП(ИД_Документа) + " не найден документ");
				СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
				Возврат СтруктураОшибок;	
			КонецЕсли;
		Иначе
			
			НайденныйДокумент = Документы[мИмяДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Документа));
			
			Если НайденныйДокумент.ПолучитьОбъект() = Неопределено Тогда
				
				Если мИмяДокумента = "ТребованиеНакладная" Тогда			
					
					НайденныйДокумент = Документы.СписаниеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Документа));
					
					Если НайденныйДокумент.ПолучитьОбъект() = Неопределено Тогда
						
						ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , ИД_Документа, "по данной GUID ссылке не найден документ");
						СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
						Возврат СтруктураОшибок;					
						
					КонецЕсли; 
					
				Иначе	
					
					ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , ИД_Документа, "по данной GUID ссылке не найден документ");
					СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
					Возврат СтруктураОшибок;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли;
				
		текДокумент = НайденныйДокумент.ПолучитьОбъект();
		
		ЗаписатьТекДокумент = Истина;
	
	КонецЕсли; 
	
	Сохранить = Ложь;
	
	Если ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СтатусДокумента, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		МожноМенятьСтатус = АП_ОбщегоНазначенияСервер.МожноИзменитьСтатусДокументаНаСледующийПоПорядку(текДокумент.Ссылка, текДокумент.СтатусДокумента, мСтатус);
		
		Если МожноМенятьСтатус Тогда
		
			текДокумент.СтатусДокумента = мСтатус;
			
		ИначеЕсли НЕ мОдинПакет Тогда			
			
			текДокумент.СтатусДокумента = мСтатус;
			
		КонецЕсли; 
				
		Сохранить = Истина;
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусДокумента, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СП_СтатусДокумента = мСтатус;
		
		Сохранить = Истина;
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусДокумента, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СП_СтатусДокумента = мСтатус;
		
		Сохранить = Истина;
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.СП_ЗаданиеНаСмену") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаСмену") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СтатусДокумента, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СтатусДокумента = мСтатус;
		
		Сохранить = Истина;
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ПР_Претензия") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПР_Претензия") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СтатусПриходногоОрдера, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СтатусПриходногоОрдера = мСтатус;
		
		Сохранить = Истина;
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.СписаниеТоваров") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.ПР_СтатусПриходногоОрдера, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.ПР_СтатусПриходногоОрдера = мСтатус;
		
		Сохранить = Истина;

	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.КомплектацияНоменклатуры") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусДокумента, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СП_СтатусДокумента = мСтатус;
		
		Сохранить = Истина;
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ТребованиеНакладная") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ТребованиеНакладная") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусТребованияНакладной, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СП_СтатусТребованияНакладной = мСтатус;
		
		Сохранить = Истина;
		
	//++ Spl_Апроф 25.02.2015 (k.russkih@a-prof.ru)
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусДокумента, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СП_СтатусДокумента = мСтатус;
		
		Сохранить = Истина;
		
	КонецЕсли;
	
	Если Сохранить Тогда
	
		//текДокумент.ДополнительныеСвойства.Вставить("МенятьСтатус", Истина);
		текДокумент.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
		
		текДокумент.ДополнительныеСвойства.Вставить("мЭтоЗагрузкаИзСолво", Истина);
				
		Если ЗаписатьТекДокумент Тогда
		
			Попытка		
				
				Если ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
		
			 		текДокумент.ОбновитьЗадания(Ложь);
		
				КонецЕсли;
				
				текДокумент.Записать(?(текДокумент.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
												
				СтруктураОшибок.Вставить("ПакетОбработан", Истина);
			Исключение
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось изменить статус при получении пакета на изменение статуса, по причине: " + СокрЛП(ОписаниеОшибки()));
				//ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				СтруктураОшибок.Вставить("ТекстОшибки", СокрЛП(ОписаниеОшибки()));
				СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
				Возврат СтруктураОшибок;
			КонецПопытки;			
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	//текДокумент = Неопределено;
	
	Возврат СтруктураОшибок;

КонецФункции

//Процедура обрабатывает поиск и установку нового статуса для документа
Функция ОбработаемДанныеПоДокументу_ОбработкаДанныхДокумента(ИД_Документа, СтруктураДанных, Тип_Документа, СтруктураОшибок, ЭтоЗаказ = Ложь)

	мСтрокаДляОбработки = ИД_Документа;	
	
	//Обработаем тек. структура Ид из СОЛВО "1a30ec27-8430-11e4-bced-2c59e53ea2d8_СП_ЗаданиеНаПодбор"
	//ДоСимволаОбрезаем = Найти(ИД_Документа, "_");	
	//Если НЕ ДоСимволаОбрезаем = 0 Тогда	
	//	 ИД_Документа = Лев(мСтрокаДляОбработки, ДоСимволаОбрезаем - 1);
	//	 мИмяДокумента = Сред(мСтрокаДляОбработки, ДоСимволаОбрезаем + 1, СтрДлина(мСтрокаДляОбработки));
	//КонецЕсли; 
	мИмяДокумента = ПолучимТипДокумента1СПоТипуДокументаСолво(Тип_Документа, ЭтоЗаказ);
	
	НайденныйДокумент = Документы[мИмяДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Документа));
	
	Если НЕ ЗначениеЗаполнено(НайденныйДокумент) Тогда
	
		 ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , ИД_Документа, "по данной GUID ссылке не найден документ");
		 СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
		 Возврат СтруктураОшибок;
	КонецЕсли; 
	 
	текДокумент = НайденныйДокумент.ПолучитьОбъект();
	
	Сохранить = Истина;
	
	//Если ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
	//			
	//	Сохранить = Истина;
	//	
	//ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
	//			
	//	Сохранить = Истина;
	//	
	//КонецЕсли;
	
	Если Сохранить Тогда
	
		//текДокумент.ДополнительныеСвойства.Вставить("МенятьСтатус", Истина);
		текДокумент.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
		текДокумент.ДополнительныеСвойства.Вставить("мЭтоЗагрузкаИзСолво", Истина);
		
		Попытка		
			текДокумент.Записать(РежимЗаписиДокумента.Запись);	
			
			Если ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
		
			 	текДокумент.ОбновитьЗадания(Ложь);
		
			КонецЕсли;
				
		Исключение
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось изменить статус при получении пакета на изменение статуса");
			//ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			СтруктураОшибок.Вставить("ТекстОшибки", СокрЛП(ОписаниеОшибки()));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецПопытки;
		
	КонецЕсли; 
	
	текДокумент = Неопределено;
	
	Возврат СтруктураОшибок;

КонецФункции

//начало изменений Ожиганов 09.04.2015 
Процедура ПРГ_ОбработаемПакеты_В_СОЛВО_ПослеЗагрузки(СтруктураОшибок, ОшибочныеПакеты, НомерПакета, Соединение, Узел,ПРГАдоДб,ПРГТестЧтение=Ложь)

	//Если СтруктураОшибок.ПакетОбработан Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Формат(НомерПакета, "ЧГ=0"));
		
		НомерПакетаСтр = Формат(НомерПакета, "ЧГ=0");
		
		//update _header_message set status=ready where id = YOUR_ID_FROM_SEQUENCE
		
		ТекстОшибки = ОшибочныеПакеты.Получить(НомерПакета);
		ТекстОшибки = Лев(ПреобразуемТекстовыеСтроки(ТекстОшибки), 2000);
		
		ТекстЗапроса = "update to_host_header_message set status = " +?(ПустаяСтрока(ТекстОшибки),"'done'","'error'") + ", err_descr = '"+ ТекстОшибки + "' where id = '"+НомерПакетаСтр+"'";
		Если ПРГТестЧтение Тогда
			Сообщить(ТекстЗапроса);
		Иначе	
			Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса,Узел, ПРГАДоДБ); 
		//Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров,,, Узел);
			Если Рез = Неопределено Тогда
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,НомерПакета, "Ошибка обновления статуса переданных пакетов №"+ СокрЛП(Формат(НомерПакета, "ЧГ=0"))+" в таблице to_host_header_message");
			КонецЕсли;
			
		КонецЕсли;	
		
		
		ТекстЗапроса = "update to_host_detail_message set status='done' where header_id = '"+НомерПакетаСтр+"'";
		Если ПРГТестЧтение Тогда
			Сообщить(ТекстЗапроса);
		Иначе
			//Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров,,, Узел);
			Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса,Узел, ПРГАДоДБ); 
			
			Если Рез = Неопределено Тогда
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,НомерПакета, "Ошибка обновления статуса переданных пакетов №"+СокрЛП(Формат(НомерПакета, "ЧГ=0"))+"в таблице to_host_detail_message");
			КонецЕсли;
		КонецЕсли;
	//КонецЕсли;	

КонецПроцедуры

//конец изменений 


Процедура ОбработаемПакеты_В_СОЛВО_ПослеЗагрузки(СтруктураОшибок, ОшибочныеПакеты, НомерПакета, Соединение, Узел,ПРГАДОКОМ)

	//Если СтруктураОшибок.ПакетОбработан Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Формат(НомерПакета, "ЧГ=0"));
		
		//update _header_message set status=ready where id = YOUR_ID_FROM_SEQUENCE
		
		ТекстОшибки = ОшибочныеПакеты.Получить(НомерПакета);
		ТекстОшибки = Лев(ПреобразуемТекстовыеСтроки(ТекстОшибки), 2000);
		
		ТекстЗапроса = "update to_host_header_message set status = " +?(ПустаяСтрока(ТекстОшибки),"'done'","'error'") + ", err_descr = '"+ ТекстОшибки + "' where id = ?";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров,,, Узел,ПРГАДОКОМ);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,НомерПакета, "Ошибка обновления статуса переданных пакетов №"+ СокрЛП(Формат(НомерПакета, "ЧГ=0"))+" в таблице to_host_header_message");
		КонецЕсли;
		
		ТекстЗапроса = "update to_host_detail_message set status='done' where header_id = ?";
		Рез = ВыполнитьЗапрос(Соединение, ТекстЗапроса, МассивПараметров,,, Узел,ПРГАДОКОМ);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,НомерПакета, "Ошибка обновления статуса переданных пакетов №"+СокрЛП(Формат(НомерПакета, "ЧГ=0"))+"в таблице to_host_detail_message");
		КонецЕсли;
		
	//КонецЕсли;	

КонецПроцедуры

Процедура ОтразитьЗаписьВЖурналеРегистрацииОСтатусеОбмена(мОбъет, Выгружен, ВидОбъекта = "Документ")

	мИмяОбъекта = ВидОбъекта + ": " + СокрЛП(мОбъет.Метаданные().Синоним);
	
	Если Выгружен Тогда
	
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,мОбъет, мИмяОбъекта+ " выгружен");
		#Если Клиент Тогда
			Сообщить(мИмяОбъекта + ": " + мОбъет + " выгружено", СтатусСообщения.Информация);
		#КонецЕсли
		
	Иначе
		
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,мОбъет, мИмяОбъекта + " не выгружен");
		#Если Клиент Тогда
			Сообщить(мИмяОбъекта + ": " + мОбъет + " не выгружен", СтатусСообщения.Информация);
		#КонецЕсли		
		
	КонецЕсли; 
	
КонецПроцедуры
 
Функция ОбщаяПроверкаНаВозможностьВыгрузить(ОбъектПроверки, Узел, МассивЭлементов, мОрганизация, мПроведен, мСклад, мДата)

	ДатаОтсечки = Дата(2014, 12, 1);
	
	Если мОрганизация <> Узел.Организация Тогда
		Если МассивЭлементов.Найти(ОбъектПроверки) = Неопределено Тогда
			МассивЭлементов.Добавить(ОбъектПроверки);
		КонецЕсли;
		Возврат Ложь;
	ИначеЕсли мПроведен = Ложь Тогда
		Если МассивЭлементов.Найти(ОбъектПроверки) = Неопределено Тогда
			МассивЭлементов.Добавить(ОбъектПроверки);
		КонецЕсли;
		Возврат Ложь;
	ИначеЕсли Узел.Склады.Найти(мСклад, "Склад") = Неопределено Тогда		//Это не тот склад
		Если МассивЭлементов.Найти(ОбъектПроверки) = Неопределено Тогда
			МассивЭлементов.Добавить(ОбъектПроверки);
		КонецЕсли;
		Возврат Ложь;
	ИначеЕсли НЕ мСклад.НСИ_ПодключенКSolvo Тогда		//Это не тот склад
		Если МассивЭлементов.Найти(ОбъектПроверки) = Неопределено Тогда
			МассивЭлементов.Добавить(ОбъектПроверки);
		КонецЕсли;
		Возврат Ложь;
	ИначеЕсли мДата < ДатаОтсечки Тогда
		Если МассивЭлементов.Найти(ОбъектПроверки) = Неопределено Тогда
			МассивЭлементов.Добавить(ОбъектПроверки);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ПолучимНоменклатуруСолвоПоМаркеру(Знач мНоменклатура,КоээфЕД) Экспорт

	//мНоменклатура = мНоменклатура.НСИ_НоменклатураОбменаССолво;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Номенклатура.Ссылка,
	               |	ЕСТЬNULL(Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 0) КАК ЕдиницаИзмеренияМестКоэффициент
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.НСИ_НоменклатураОбменаССолво = &НСИ_НоменклатураОбменаССолво
	               |	И НЕ Номенклатура.Ссылка = &НСИ_НоменклатураОбменаССолво";
	
	Запрос.УстановитьПараметр("НСИ_НоменклатураОбменаССолво", мНоменклатура);
	
	Результат = Запрос.Выполнить().Выбрать();

	Если Результат.Следующий() Тогда
		
		мНоменклатура = Результат.Ссылка;
		КоээфЕД  	  = Результат.ЕдиницаИзмеренияМестКоэффициент;
	КонецЕсли; 
	
	Возврат мНоменклатура;

КонецФункции // ()
 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////								
// СЕРВИСНЫЕ ПРОЦЕДУРЫ ПО ОБРАБОТКЕ ЗАГРУЖАЕМЫХ ЗНАЧЕНИЙ ИЗ СОЛВО В 1С
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Продцедура возвращает значение статуса СОЛВО в 1С
//Статус солво = ключ, статус документам = значение
Функция ВернемСтатус1СПоКодуСОЛВО(СтатусСолво, СтатусДокумента, ЭтоЗаказ = Ложь)

	СоответствиеСтатусов = Новый Соответствие;	
	//Статусы заказа <order>
	Если ТипЗнч(СтатусДокумента) = Тип("ПеречислениеСсылка.СП_СтатусыЗаданияНаПодбор") Тогда
	
		СоответствиеСтатусов.Вставить("-", Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт);
		СоответствиеСтатусов.Вставить("R", Перечисления.СП_СтатусыЗаданияНаПодбор.ПереданНаСклад);
		СоответствиеСтатусов.Вставить("L", Перечисления.СП_СтатусыЗаданияНаПодбор.Спланирован);
		СоответствиеСтатусов.Вставить("P", Перечисления.СП_СтатусыЗаданияНаПодбор.ВРаботе);
		СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыЗаданияНаПодбор.Собран);
		//начало изменений Ожиганов А. 59308 добавление статуса Погружен (заявка в Солво 1658584)  17.11.2016 
		СоответствиеСтатусов.Вставить("Y", Перечисления.СП_СтатусыЗаданияНаПодбор.Погружен);
		//конец изменений 
		//СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыЗаданияНаПодбор.СформированыДокументы);
		//++ Spl_Апроф 13.02.2015 (k.russkih@a-prof.ru)
		СоответствиеСтатусов.Вставить("X", Перечисления.СП_СтатусыЗаданияНаПодбор.Отгружен);
		СоответствиеСтатусов.Вставить("+", Перечисления.СП_СтатусыЗаданияНаПодбор.Отгружен);		
		СоответствиеСтатусов.Вставить("C", Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен);
		
		//++
		СоответствиеСтатусов.Вставить("plan", Перечисления.СП_СтатусыЗаданияНаПодбор.Спланирован);
		СоответствиеСтатусов.Вставить("pick", Перечисления.СП_СтатусыЗаданияНаПодбор.Собран);
		СоответствиеСтатусов.Вставить("ship", Перечисления.СП_СтатусыЗаданияНаПодбор.Отгружен);                          
		
	ИначеЕсли ТипЗнч(СтатусДокумента) = Тип("ПеречислениеСсылка.СП_СтатусыПоступленияТоваров") Тогда
		
		СоответствиеСтатусов.Вставить("R", Перечисления.СП_СтатусыПоступленияТоваров.Открыто);
		СоответствиеСтатусов.Вставить("P", Перечисления.СП_СтатусыПоступленияТоваров.ПереданоНаСклад);
		СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыПоступленияТоваров.Закрыто);
		СоответствиеСтатусов.Вставить("C", Перечисления.СП_СтатусыПоступленияТоваров.Отменено);
		
	ИначеЕсли ТипЗнч(СтатусДокумента) = Тип("ПеречислениеСсылка.СП_СтатусыПеремещенияТоваров") Тогда
		
		Если ЭтоЗаказ Тогда
			
			СоответствиеСтатусов.Вставить("R", Перечисления.СП_СтатусыПеремещенияТоваров.Открыто);
			СоответствиеСтатусов.Вставить("P", Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад);
			СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыПеремещенияТоваров.Закрыто);
			СоответствиеСтатусов.Вставить("C", Перечисления.СП_СтатусыПеремещенияТоваров.Отменено);
			
			//начало изменений Ожиганов 25.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
			СоответствиеСтатусов.Вставить("plan", Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад);
			СоответствиеСтатусов.Вставить("pick", Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад);
			СоответствиеСтатусов.Вставить("ship", Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад);
			//конец изменений 
			//начало изменений Ожиганов А. 59308 добавление статуса Погружен (заявка в Солво 1658584)  17.11.2016 
			СоответствиеСтатусов.Вставить("Y", Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад);
			//конец изменений 
		Иначе
			
			СоответствиеСтатусов.Вставить("-", Перечисления.СП_СтатусыПеремещенияТоваров.Открыто);
			СоответствиеСтатусов.Вставить("R", Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад);
			СоответствиеСтатусов.Вставить("L", Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад);
			СоответствиеСтатусов.Вставить("P", Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад);
			СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад);
			//СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыПеремещенияТоваров.СформированыДокументы);
			СоответствиеСтатусов.Вставить("+", Перечисления.СП_СтатусыПеремещенияТоваров.Закрыто);
			СоответствиеСтатусов.Вставить("C", Перечисления.СП_СтатусыПеремещенияТоваров.Отменено);
		
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(СтатусДокумента) = Тип("ПеречислениеСсылка.СП_СтатусыЗаданияНаСмену") Тогда
		
		СоответствиеСтатусов.Вставить("R", Перечисления.СП_СтатусыЗаданияНаСмену.Открыто);
		СоответствиеСтатусов.Вставить("P", Перечисления.СП_СтатусыЗаданияНаСмену.ПереданоНаСклад);
		СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыЗаданияНаСмену.Закрыто);
		СоответствиеСтатусов.Вставить("C", Перечисления.СП_СтатусыЗаданияНаСмену.Отменено);
		
	ИначеЕсли ТипЗнч(СтатусДокумента) = Тип("ПеречислениеСсылка.СП_СтатусыКомплектацииНоменклатуры") Тогда
		
		СоответствиеСтатусов.Вставить("R", Перечисления.СП_СтатусыКомплектацииНоменклатуры.Открыто);
		СоответствиеСтатусов.Вставить("P", Перечисления.СП_СтатусыКомплектацииНоменклатуры.ПереданоНаСклад);
		СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыКомплектацииНоменклатуры.Закрыто);
		СоответствиеСтатусов.Вставить("C", Перечисления.СП_СтатусыКомплектацииНоменклатуры.Отменено);
			
	ИначеЕсли ТипЗнч(СтатусДокумента) = Тип("ПеречислениеСсылка.СП_СтатусыПриходногоОрдераСолво") Тогда
		
		Если ЭтоЗаказ Тогда
			
			СоответствиеСтатусов.Вставить("-", Перечисления.СП_СтатусыПриходногоОрдераСолво.Открыто);
			СоответствиеСтатусов.Вставить("R", Перечисления.СП_СтатусыПриходногоОрдераСолво.ПереданоНаСклад);
			СоответствиеСтатусов.Вставить("L", Перечисления.СП_СтатусыПриходногоОрдераСолво.ПереданоНаСклад);
			СоответствиеСтатусов.Вставить("P", Перечисления.СП_СтатусыПриходногоОрдераСолво.ПереданоНаСклад);
			СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыПриходногоОрдераСолво.ПереданоНаСклад);
			//начало изменений Ожиганов А. 59308 добавление статуса Погружен (заявка в Солво 1658584)  17.11.2016 
			СоответствиеСтатусов.Вставить("Y", Перечисления.СП_СтатусыПриходногоОрдераСолво.ПереданоНаСклад);
			//конец изменений 
			//СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыПеремещенияТоваров.СформированыДокументы);
			СоответствиеСтатусов.Вставить("+", Перечисления.СП_СтатусыПриходногоОрдераСолво.Закрыто);
			СоответствиеСтатусов.Вставить("C", Перечисления.СП_СтатусыПриходногоОрдераСолво.Отменено);
			
		Иначе
			
			СоответствиеСтатусов.Вставить("R", Перечисления.СП_СтатусыПриходногоОрдераСолво.Открыто);
			СоответствиеСтатусов.Вставить("P", Перечисления.СП_СтатусыПриходногоОрдераСолво.ПереданоНаСклад);
			СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыПриходногоОрдераСолво.Закрыто);
			СоответствиеСтатусов.Вставить("C", Перечисления.СП_СтатусыПриходногоОрдераСолво.Отменено);
		
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(СтатусДокумента) = Тип("ПеречислениеСсылка.СП_СтатусыТребованияНакладной") Тогда
		
		СоответствиеСтатусов.Вставить("-", Перечисления.СП_СтатусыТребованияНакладной.Открыт);
		СоответствиеСтатусов.Вставить("R", Перечисления.СП_СтатусыТребованияНакладной.ПереданНаСклад);
		СоответствиеСтатусов.Вставить("L", Перечисления.СП_СтатусыТребованияНакладной.Спланирован);
		СоответствиеСтатусов.Вставить("P", Перечисления.СП_СтатусыТребованияНакладной.ВРаботе);
		СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыТребованияНакладной.Собран);
		//начало изменений Ожиганов А. 59308 добавление статуса Погружен (заявка в Солво 1658584)  17.11.2016 
		СоответствиеСтатусов.Вставить("Y", Перечисления.СП_СтатусыТребованияНакладной.Погружен);
		//конец изменений 
		//СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыЗаданияНаПодбор.СформированыДокументы);
		СоответствиеСтатусов.Вставить("+", Перечисления.СП_СтатусыТребованияНакладной.Отгружен);
		СоответствиеСтатусов.Вставить("C", Перечисления.СП_СтатусыТребованияНакладной.Отменен);
		
		//++ Spl_Апроф 12.03.2015 (k.russkih@a-prof.ru) 
		СоответствиеСтатусов.Вставить("plan", Перечисления.СП_СтатусыЗаданияНаПодбор.Спланирован);
		СоответствиеСтатусов.Вставить("pick", Перечисления.СП_СтатусыЗаданияНаПодбор.Собран);
		СоответствиеСтатусов.Вставить("ship", Перечисления.СП_СтатусыЗаданияНаПодбор.Отгружен);
		
	//++ Spl_Апроф 25.02.2015 (k.russkih@a-prof.ru)
	ИначеЕсли ТипЗнч(СтатусДокумента) = Тип("ПеречислениеСсылка.СП_СтатусыВозвратТоваровПоставщику") Тогда
		
		СоответствиеСтатусов.Вставить("-", Перечисления.СП_СтатусыВозвратТоваровПоставщику.Открыт);
		СоответствиеСтатусов.Вставить("R", Перечисления.СП_СтатусыВозвратТоваровПоставщику.ПереданНаСклад);
		СоответствиеСтатусов.Вставить("L", Перечисления.СП_СтатусыВозвратТоваровПоставщику.Спланирован);
		СоответствиеСтатусов.Вставить("P", Перечисления.СП_СтатусыВозвратТоваровПоставщику.ВРаботе);
		СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыВозвратТоваровПоставщику.Собран);
		//начало изменений Ожиганов А. 59308 добавление статуса Погружен (заявка в Солво 1658584)  17.11.2016 
		СоответствиеСтатусов.Вставить("Y", Перечисления.СП_СтатусыВозвратТоваровПоставщику.Погружен);
		//конец изменений 
		//СоответствиеСтатусов.Вставить("D", Перечисления.СП_СтатусыЗаданияНаПодбор.СформированыДокументы);
		СоответствиеСтатусов.Вставить("+", Перечисления.СП_СтатусыВозвратТоваровПоставщику.Отгружен);
		СоответствиеСтатусов.Вставить("C", Перечисления.СП_СтатусыВозвратТоваровПоставщику.Отменен);
		
		СоответствиеСтатусов.Вставить("plan", Перечисления.СП_СтатусыВозвратТоваровПоставщику.Спланирован);
		СоответствиеСтатусов.Вставить("pick", Перечисления.СП_СтатусыВозвратТоваровПоставщику.Собран);
		СоответствиеСтатусов.Вставить("ship", Перечисления.СП_СтатусыВозвратТоваровПоставщику.Отгружен);
			
	КонецЕсли; 
	
	Возврат СоответствиеСтатусов.Получить(СтатусСолво);
	
КонецФункции // ()

Функция ПолучимТипДокумента1СПоТипуДокументаСолво(ТипДокументаСолво, ЭтоЗаказ = Истина)

	Если ПустаяСтрока(ТипДокументаСолво) Тогда	
		 Возврат Неопределено;	
	КонецЕсли; 
	
	СоответствиеСтатусов = Новый Соответствие;	
	//Статусы заказа <order>
	Если ЭтоЗаказ Тогда
		//Blik 050717 67562 н новые типы для задания на подбор e b k f j  
		СоответствиеСтатусов.Вставить("e", "СП_ЗаданиеНаПодбор");
		СоответствиеСтатусов.Вставить("b", "СП_ЗаданиеНаПодбор");
		СоответствиеСтатусов.Вставить("k", "СП_ЗаданиеНаПодбор");
		СоответствиеСтатусов.Вставить("f", "СП_ЗаданиеНаПодбор");
		СоответствиеСтатусов.Вставить("j", "СП_ЗаданиеНаПодбор");
		//Blik 050717 67562 к
		СоответствиеСтатусов.Вставить("S", "СП_ЗаданиеНаПодбор");
		//СоответствиеСтатусов.Вставить("P", "КомплектацияНоменклатуры");
		СоответствиеСтатусов.Вставить("X", "ТребованиеНакладная");
		СоответствиеСтатусов.Вставить("M", "ПеремещениеТоваров");
		//++ Spl_Апроф 25.02.2015 (k.russkih@a-prof.ru)
		СоответствиеСтатусов.Вставить("R", "ВозвратТоваровПоставщику"); //Возврат
		
	Иначе
		
		СоответствиеСтатусов.Вставить("P", "СП_ЗаданиеНаСмену");
		СоответствиеСтатусов.Вставить("S", "ПоступлениеТоваровУслуг");
		СоответствиеСтатусов.Вставить("M", "ПеремещениеТоваров");
		СоответствиеСтатусов.Вставить("R", "ПР_Претензия"); //Возврат		
		
	КонецЕсли; 
	
	Возврат СоответствиеСтатусов.Получить(ТипДокументаСолво);

КонецФункции // ()

Процедура ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки, мИтоговоеЗначение = Ложь)

	НоваяСтрока = ТаблицаДанныхПослеЧтения.Добавить();
	НоваяСтрока.ИД_Документа 			= ИД_Документа;
	НоваяСтрока.Тип_Документа 			= Тип_Документа;
	НоваяСтрока.СтруктураДанныхСтроки 	= СтруктураДанныхСтроки;
	НоваяСтрока.НомерПакета 			= НомерПакета;
		
	Если мИтоговоеЗначение Тогда
	
		НайтиСтроки = ТаблицаДанныхПослеЧтения.НайтиСтроки(Новый Структура("НомерПакета, ИтоговоеКоличество", НомерПакета, мИтоговоеЗначение));
		
		Если НайтиСтроки.Количество() > 0 Тогда	
			НоваяСтрока.ИтоговоеКоличество		= Ложь;
		Иначе
			НоваяСтрока.ИтоговоеКоличество		= мИтоговоеЗначение;
		КонецЕсли;
		
	Иначе
		
		НоваяСтрока.ИтоговоеКоличество		= мИтоговоеЗначение;
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОчистимСтрокиДокумента_ИтоговыеРезультат(мИтоговоеКоличество, текДокумент, ИмяТЧ = "Товары", ИмяКолонки = "Количество")
	
	Если мИтоговоеКоличество Тогда
		
		Для каждого СтрокаДокумента Из текДокумент[ИмяТЧ] Цикл
			
			СтрокаДокумента[ИмяКолонки] = 0;
			
			Если ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
				
				//начало изменений Ожиганов 09.04.2015 
				// Рассчитать реквизиты табличной части.
				//ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаДокумента, текДокумент);
				//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаДокумента, текДокумент);
				//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаДокумента, текДокумент);				
				ПересчитатьСуммыПрихНакладной(СтрокаДокумента, текДокумент);
				//конец изменений 
			
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры

//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
Процедура ПРОчистимСтрокиДокумента_ИтоговыеРезультатЗаданиеНаПодбор(мИтоговоеКоличество, текДокумент, ИмяТЧ = "Товары", ИмяКолонки = "КоличествоФакт")
	
	//строго только по заданием на подбор
	Если мИтоговоеКоличество Тогда
		
		МасУдалСтрок = Новый Массив;
		ТабЧасть = текДокумент[ИмяТЧ];
		
		Для каждого СтрокаДокумента Из ТабЧасть  Цикл
			
			СтрокаДокумента[ИмяКолонки] = 0;
			СтрокаДокумента.ДатаВыпуска = '00010101';
			
			Если СтрокаДокумента.Количество = 0 Тогда 
				МасУдалСтрок.Добавить(СтрокаДокумента);
			КонецЕсли;	
			
		КонецЦикла; 
		
		//удаляем строки где количество план равно 0 
		Для Каждого ТекЭлем Из МасУдалСтрок Цикл
			ТабЧасть.Удалить(ТекЭлем);
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры


//конец изменений  

//Процедура определяет является ли строка GUID-ом
Функция ЭтоGUID(мСтрокаGUID) Экспорт

	//маска = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";	
	
	мЭтоGUID = Ложь;
	
	Массив = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(мСтрокаGUID, "-");
	
	Если Массив.Количество() = 5 Тогда
		
		Если СтрДлина(Массив[0]) = 8 И СтрДлина(Массив[1]) = 4 И СтрДлина(Массив[2]) = 4 И СтрДлина(Массив[3]) = 4 И СтрДлина(Массив[4]) = 12 Тогда
			мЭтоGUID = Истина;  
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат мЭтоGUID;
	
КонецФункции // ()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////								
// СЕРВИСНЫЕ ПРОЦЕДУРЫ ПО РЕГИСТРАЦИИ СПРАВОЧНИКОВ, ДОКУМЕНТОВ ДЛЯ ВЫГРУЗКИ В СОЛВО
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура АП_ПередЗаписьюОбъектаРегистрацияОбъектаИнформационнойБазыПередЗаписью(Источник, Отказ) Экспорт
	
	НужноРегистрироватьМестоСоздания = Источник.ЭтоНовый() 
		И ПараметрыСеанса.СохранятьИнформациюОМестеСозданияОбъектов;
	
	Источник.ДополнительныеСвойства.Вставить("НужноРегистрироватьМестоСоздания", НужноРегистрироватьМестоСоздания);
	
КонецПроцедуры

Процедура ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(СсылкаНаОбъект, УзелОбмена = Неопределено)
	
	НаборЗаписейРегистра = РегистрыСведений.ОбъектыИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Объект.Установить(СсылкаНаОбъект);
	
	СтрокаНабора = НаборЗаписейРегистра.Добавить();
	СтрокаНабора.Объект = СсылкаНаОбъект;
	СтрокаНабора.УзелОбмена = УзелОбмена;
	
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

Процедура АП_ПриЗаписиОбъектаРегистрацияОбъектаИнформационнойБазыПриЗаписи(Источник, Отказ) Экспорт
	
	//начало изменений Ожиганов не регистрируем перепроводимые документы
	Если ПараметрыСеанса.ПроведениеДокументов Тогда
		возврат;
	КонецЕсли;	
	//конец изменений
		
	//{11.02.2015 Островерхий заявка №б/н 
	//Если НЕ ПравоДоступа("Чтение", Метаданные.ПланыОбмена.АП_ОбменSolvo) Тогда 
	Если Источник.ОбменДанными.Загрузка ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.ПланыОбмена.АП_ОбменSolvo) Тогда
	//11.02.2015 Островерхий} 
		Возврат;	
	КонецЕсли; 
	
	//начало изменений Ожиганов 28.03.2016 50667 учет фактически отгруженных паллет 
	Если Источник.ДополнительныеСвойства.Свойство("НеРегистрироватьВПланеОбмена") Тогда
		возврат;
	КонецЕсли;	
	//конец изменений 
	
	//начало изменений Ожиганов 30.05.2015 немножко оптимизируем 
	ДатаОтсечки = Дата(2015, 02, 1);
	
	мЭтоЗагрузкаИзСолво = Ложь;
	
	Если Источник.ДополнительныеСвойства.Свойство("мЭтоЗагрузкаИзСолво", мЭтоЗагрузкаИзСолво) = Ложь Тогда			
		мЭтоЗагрузкаИзСолво = Ложь;				
	КонецЕсли; 
			
	Если мЭтоЗагрузкаИзСолво Тогда //документы измененные при загрузке из солво, не регистрируем
		 возврат;			
	КонецЕсли; 
	
	ЭтоДокумент = НЕ Метаданные.Документы.Найти(Источник.Метаданные().Имя) = Неопределено;
	
	//начало изменений Ожиганов 25.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	ИмяРеквСклада = "";
	ИмяРеквСкладаПол = "";
	//конец изменений 
	
	Если ЭтоДокумент Тогда
		Если (Не Источник.ДоступенСтатусДокумента() или Источник.Дата < ДатаОтсечки) Тогда
			возврат;
		КонецЕслИ;	
		
		//начало изменений Ожиганов 25.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		Если Не Источник.Проведен Тогда
			возврат;
		КонецЕсли;	
		//конец изменений 
		
		//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
			//попробуем ограничиться как и задумывалось
			Если Источник.СтатусДокумента <> Перечисления.СП_СтатусыЗаданияНаПодбор.ПереданНаСклад
				Тогда
				возврат;
			КонецЕсли;
			ИмяРеквСклада ="Склад";
			//начало изменений Ожиганов 25.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 				
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
			Если  Источник.СП_СтатусДокумента <> Перечисления.СП_СтатусыПоступленияТоваров.ПереданоНаСклад Тогда
				возврат;
			КонецЕсли;	
			ИмяРеквСклада ="СкладОрдер";
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ТребованиеНакладная") Тогда
			Если Источник.СП_СтатусТребованияНакладной <> Перечисления.СП_СтатусыТребованияНакладной.ПереданНаСклад Тогда
				возврат;
			КонецЕслИ;
			ИмяРеквСклада ="Склад";
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
			Если (Источник.ПР_СтатусПриходногоОрдера <>  Перечисления.СП_СтатусыПриходногоОрдераСолво.ПереданоНаСклад) Тогда
				  возврат;
			КонецЕсли;	
			ИмяРеквСклада ="Склад";
		ИначеЕсли  ТипЗнч(Источник) = Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда
			Если (Источник.СП_СтатусДокумента <> Перечисления.СП_СтатусыКомплектацииНоменклатуры.ПереданоНаСклад) Тогда
				возврат;
			КонецЕслИ;	
			ИмяРеквСклада ="Склад";
		ИначеЕсли  ТипЗнч(Источник) = Тип("ДокументОбъект.СП_ЗаданиеНаСмену") Тогда
			Если (Источник.СтатусДокумента <> Перечисления.СП_СтатусыЗаданияНаСмену.ПереданоНаСклад) Тогда
				возврат;
			КонецЕслИ;	
			ИмяРеквСклада ="Склад";
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
			Если  (Источник.СП_СтатусДокумента <>  Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад) Тогда
				возврат;
			КонецЕсли;	
			ИмяРеквСклада	 		= "СкладОтправитель";
			ИмяРеквСкладаПол        = "СкладПолучатель";
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда	
			Если (Источник.СП_СтатусДокумента  <> Перечисления.СП_СтатусыВозвратТоваровПоставщику.ПереданНаСклад) Тогда
				возврат;
			КонецЕсли;
			ИмяРеквСклада ="Склад";
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПР_Претензия") Тогда	
			Если  (Источник.СтатусПриходногоОрдера <> Перечисления.СП_СтатусыПриходногоОрдераСолво.ПереданоНаСклад) Тогда
				 возврат;
			КонецЕсли;	
			//конец изменений 
		КонецЕсли;
		//конец изменений 
		
	Иначе
		Если ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура")  Тогда
			//начало изменений Ожиганов 25.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
			Если Источник.ЭтоГруппа Тогда				
				Возврат;				
			КонецЕсли; 
			//конец изменений 
			Если Не Источник.ВидНоменклатуры.НСИ_ОбменССолво Тогда
				возврат;
			КонецЕсли;	
		ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Контрагенты")  Тогда
				Если Источник.ЭтоГруппа Тогда				
					Возврат;				
				КонецЕсли; 
				Если Не Источник.НСИ_ОбменССолво Тогда
					//начало изменений Ожиганов 25.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
					 возврат;
					//конец изменений 
			    КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	//конец изменений 
	//начало изменений Ожиганов 25.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	ЗапросПоСкладамвУзле = Новый Запрос("ВЫБРАТЬ
	                              |	АП_ОбменSolvoСклады.Склад
	                              |ИЗ
	                              |	ПланОбмена.АП_ОбменSolvo.Склады КАК АП_ОбменSolvoСклады
	                              |ГДЕ
	                              |	АП_ОбменSolvoСклады.Ссылка = &Узел");
	//конец изменений 
	
	//начало изменений Ожиганов 30.05.2015 немножко оптимизируем 
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	АП_ОбменSolvo.ПриостановитьОбмен,
	                      |	АП_ОбменSolvo.Ссылка
	                      |ИЗ
	                      |	ПланОбмена.АП_ОбменSolvo КАК АП_ОбменSolvo
	                      |ГДЕ
	                      |	НЕ АП_ОбменSolvo.Ссылка = &Ссылка
	                      |	И НЕ АП_ОбменSolvo.ПриостановитьОбмен");
	//конец изменений 
	Запрос.УстановитьПараметр("Ссылка",ПланыОбмена.АП_ОбменSolvo.ЭтотУзел());
	//начало изменений Ожиганов 17.05.2016 б/н ограничим запись в таблицы изменений по планам доставки, регистрируем если 
	// подходящее отделение
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПТЛ_ПланДоставки") Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И АП_ОбменSolvo.Ссылка в (ВЫБРАТЬ
			| Отделения.Ссылка
			|	ИЗ
			|		ПланОбмена.АП_ОбменSolvo.Отделения КАК Отделения
			|	ГДЕ
			|		Отделения.Отделение = &Отделение
            |
			|	СГРУППИРОВАТЬ ПО
			|		Отделения.Ссылка)
			|";
	
         Запрос.УстановитьПараметр("Отделение",Источник.Отделение);
	КонецЕсли;	
	//конец изменений  
	
	Выборка = Запрос.Выполнить().Выбрать();
	//++ Spl_Апроф 12.01.2015 (k.russkih@a-prof.ru)
	//начало изменений Ожиганов 30.05.2015 немножко оптимизируем 
	//Выборка = ПланыОбмена.АП_ОбменSolvo.Выбрать();
	//конец изменений 
	Пока Выборка.Следующий() Цикл
		
		//начало изменений Ожиганов 30.05.2015 немножко оптимизируем 
		//Если Выборка.ПриостановитьОбмен Тогда
		//	Продолжить;		
		//КонецЕсли; 
		//конец изменений 
		
		//начало изменений Ожиганов 30.05.2015 немножко оптимизируем 
		//Если НЕ Метаданные.Документы.Найти(Источник.Метаданные().Имя) = Неопределено Тогда
		Если ЭтоДокумент Тогда
			
			 //начало изменений Ожиганов 25.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
			 Если  ИмяРеквСклада <> "" Тогда
				 ЗапросПоСкладамвУзле.УстановитьПараметр("Узел",Выборка.Ссылка);
				 ТабСкладов = ЗапросПоСкладамвУзле.Выполнить().Выгрузить();
				 Если ИмяРеквСкладаПол <> "" Тогда
					 Если ТабСкладов.Найти(Источник[ИмяРеквСклада],"Склад")= Неопределено 
						и ТабСкладов.Найти(Источник[ИмяРеквСкладаПол],"Склад")= Неопределено 
					 Тогда
						 продолжить;
					 КонецЕсли; 
				 Иначе
					 Если ТабСкладов.Найти(Источник[ИмяРеквСклада],"Склад")= Неопределено Тогда
						 продолжить;
					 КонецЕсли; 
				 КонецЕсли; 
			 КонецЕсли; 

			 //конец изменений 
			
			//начало изменений Ожиганов 30.05.2015 немножко оптимизируем 
			//мЭтоЗагрузкаИзСолво = Ложь;
			//
			////++ Spl_Апроф 16.01.2015 (k.russkih@a-prof.ru)
			//Если Источник.ДополнительныеСвойства.Свойство("мЭтоЗагрузкаИзСолво", мЭтоЗагрузкаИзСолво) = Ложь Тогда			
			//	мЭтоЗагрузкаИзСолво = Ложь;				
			//КонецЕсли; 
			//
			//Если мЭтоЗагрузкаИзСолво Тогда //документы измененные при загрузке из солво, не регистрируем
			//	 Продолжить;			
			//КонецЕсли; 
			//
			//Если Источник.ДоступенСтатусДокумента() И Источник.Дата >= ДатаОтсечки Тогда
			//
				ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Источник.Ссылка);	
			//
			//КонецЕсли; 
			////конец изменений 
		Иначе	
			
			Если ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура") Тогда
				//начало изменений Ожиганов 30.05.2015 немножко оптимизируем 
				//Если Источник.ВидНоменклатуры.НСИ_ОбменССолво Тогда
				
					ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Источник.Ссылка);
				
				//КонецЕсли;
				
				
			ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Контрагенты") Тогда
				
				//начало изменений Ожиганов 30.05.2015 немножко оптимизируем 
				//Если Источник.ЭтоГруппа Тогда				
				//	Возврат;				
				//КонецЕсли; 
				
				///Если Источник.НСИ_ОбменССолво Тогда
					
					ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Источник.Ссылка);
				//конец изменений 	
				//КонецЕсли;
				
			Иначе				
			   ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Источник.Ссылка);
			КонецЕсли; 
			
		КонецЕсли; 
			
	КонецЦикла; 		
	//-- Spl_Апроф
	
	НужноРегистрироватьМестоСоздания = Ложь;
	Источник.ДополнительныеСвойства.Свойство("НужноРегистрироватьМестоСоздания", НужноРегистрироватьМестоСоздания);
	
	Если НужноРегистрироватьМестосоздания <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка = Истина
		И ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель) Тогда
		
		// обмен с определенным узлом
		ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(Источник.Ссылка, Источник.ОбменДанными.Отправитель);
		
	Иначе
		
		// объект создан в этой информационной базе
		ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(Источник.Ссылка, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнятьРегламентныйОбменСолво() Экспорт
	
	АП_ВыполнитьОбменСолво();	
	
КонецПроцедуры

//начало изменений Ожиганов 09.04.2015 суммы Поступления товаров и услуг считаем 
//от суммы накладной
Процедура ПересчитатьСуммыПрихНакладной(ТекСтрока,текДокумент)
		Если ТекСтрока.СП_КоличествоПоНакладной > 0
		   и ТекСтрока.СП_Сумма > 0 Тогда
		   Если ТекСтрока.СП_КоличествоПоНакладной = ТекСтрока.Количество Тогда
			   ТекСтрока.Сумма	   = ТекСтрока.СП_Сумма;
			   
			   ТекСтрока.СуммаНДС = ТекСтрока.СП_НДС;
			   Если ТекСтрока.Цена = 0  и ТекСтрока.Количество <> 0 Тогда
				   ТекСтрока.Цена = Окр(ТекСтрока.Сумма/ТекСтрока.Количество,2);
			   КонецЕсли; 
		   Иначе
			   ТекСтрока.Сумма = Окр(ТекСтрока.СП_Сумма/ТекСтрока.СП_КоличествоПоНакладной*ТекСтрока.Количество);
			   //начало изменений Ожиганов 05.06.2015 деление на 0 ПТИУ 
			   Если ТекСтрока.Цена = 0 и ТекСтрока.Количество<>0 Тогда
			   //конец изменений  	   
				   ТекСтрока.Цена = Окр(ТекСтрока.Сумма/ТекСтрока.Количество,2);
			   КонецЕсли; 
			   ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ТекСтрока, текДокумент);
		   КонецЕсли; 
	   Иначе   
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ТекСтрока, текДокумент);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ТекСтрока, текДокумент);
		КонецЕсли; 	
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ТекСтрока, текДокумент);
КонецПроцедуры	
//конец изменений 

Функция ПРГСтрСолвоВДату(АСтр)
	
	Если АСтр = Неопределено Тогда
		возврат '00010101';
	конецЕсли;
	
	Стр = СокрЛ(АСтр);
	
	Если СтрДлина(Стр) < 10 Тогда
		возврат '00010101';
	КонецЕсли;	
	
	Попытка
	
		День   = Число(Лев(Стр,2));
		Месяц  = Число(Сред(Стр,4,2));
		Год    = Число(Сред(Стр,7,4)) ;
		
		возврат Дата(Год,Месяц,День);
	
	Исключение
		возврат '00010101';
	КонецПопытки;
		

КонецФункции	
	

//начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
Функция ПРГПолучитьСсылкуНаДокумент(Тип_Документа,ИД_Документа,ПРГСтруктураДопПарметров,ОшибочныеПакеты,НомерПакета,СтруктураОшибок,ЭтоЗаказ)
	
		Если ПустаяСтрока(ИД_Документа) ИЛИ НЕ ЭтоGUID(ИД_Документа) Тогда
			ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" has no data (пакет не имеет данных)");
			возврат Неопределено;
		КонецЕсли;
		
		мИмяДокумента = ПолучимТипДокумента1СПоТипуДокументаСолво(Тип_Документа, ЭтоЗаказ);		
		СписокДокументов = Новый Массив;
		
		Если мИмяДокумента = Неопределено Тогда
						
			СписокДокументов.Добавить("СП_ЗаданиеНаСмену");
			СписокДокументов.Добавить("ПоступлениеТоваровУслуг");
			СписокДокументов.Добавить("ПеремещениеТоваров");
			СписокДокументов.Добавить("ПР_Претензия"); //Возврат
			СписокДокументов.Добавить("КомплектацияНоменклатуры");
			СписокДокументов.Добавить("ТребованиеНакладная");
			СписокДокументов.Добавить("СписаниеТоваров");
			СписокДокументов.Добавить("СП_ЗаданиеНаПодбор");
			СписокДокументов.Добавить("ВозвратТоваровПоставщику");
	    Иначе				
			СписокДокументов.Добавить(мИмяДокумента);
			//начало изменений Ожиганов 01.07.2015 добавим дополнительный поиск по перемещению т требования накладной
			Если мИмяДокумента = "СП_ЗаданиеНаПодбор" Тогда
				СписокДокументов.Добавить("ПеремещениеТоваров");
				СписокДокументов.Добавить("ТребованиеНакладная");
			КонецЕсли;	
			//конец изменений 
		КонецЕсли;						
						
		Для каждого СтрокаМетаданных Из СписокДокументов Цикл						
										
			НайденныйДокумент = Документы[СтрокаМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Документа));						
			ЗапросКДоку  = Неопределено;
			
			ПРГСтруктураДопПарметров.Свойство("Запрос"+СтрокаМетаданных,ЗапросКДоку);
			
			Если ЗапросКДоку = Неопределено Тогда
				ЗапросКДоку = Новый Запрос("ВЫБРАТЬ
				                      |	Док.Ссылка
				                      |ИЗ
				                      |	Документ."+СтрокаМетаданных+" КАК Док
				                      |ГДЕ
				                      |	Док.Ссылка = &Ссылка");
				ПРГСтруктураДопПарметров.Вставить("Запрос"+СтрокаМетаданных,ЗапросКДоку);
			КонецЕсли;	
			
			ЗапросКДоку.УстановитьПараметр("Ссылка",НайденныйДокумент);
			
			Выборка = ЗапросКДоку.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				возврат Выборка.Ссылка;
			КонецЕсли;	
							
		КонецЦикла;			
		
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , ИД_Документа, "по GUID ссылке " + СокрЛП(ИД_Документа) + " не найден документ");
		ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" документ не найден");
		СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
		
	    возврат Неопределено;
	
КонецФункции	

Функция ПРГОбработаемДанныеПоДокументу_УстановкаСтатуса(ИД_Документа, НовыйСтатус, Тип_Документа, СтруктураОшибок, ЭтоЗаказ = Ложь, текДокумент, мОдинПакет = Истина)

	мСтрокаДляОбработки = ИД_Документа;	
	
	//Обработаем тек. структура Ид из СОЛВО "1a30ec27-8430-11e4-bced-2c59e53ea2d8_СП_ЗаданиеНаПодбор"
	//ДоСимволаОбрезаем = Найти(ИД_Документа, "_");	
	//Если НЕ ДоСимволаОбрезаем = 0 Тогда	
	//	 ИД_Документа = Лев(мСтрокаДляОбработки, ДоСимволаОбрезаем - 1);
	//	 мИмяДокумента = Сред(мСтрокаДляОбработки, ДоСимволаОбрезаем + 1, СтрДлина(мСтрокаДляОбработки));
	//КонецЕсли; 
	
	ЗаписатьТекДокумент = Ложь;
	НайденныйДокумент = текДокумент.Ссылка;
	
	
	Если ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СтатусДокумента, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		МожноМенятьСтатус = АП_ОбщегоНазначенияСервер.МожноИзменитьСтатусДокументаНаСледующийПоПорядку(текДокумент.Ссылка, текДокумент.СтатусДокумента, мСтатус);
		
		Если МожноМенятьСтатус Тогда
		
			текДокумент.СтатусДокумента = мСтатус;
			
		ИначеЕсли НЕ мОдинПакет Тогда			
			
			текДокумент.СтатусДокумента = мСтатус;
			
		КонецЕсли; 
				
		Сохранить = Истина;
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусДокумента, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СП_СтатусДокумента = мСтатус;
		
		Сохранить = Истина;
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусДокумента, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СП_СтатусДокумента = мСтатус;
		
		Сохранить = Истина;
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.СП_ЗаданиеНаСмену") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаСмену") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СтатусДокумента, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СтатусДокумента = мСтатус;
		
		Сохранить = Истина;
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ПР_Претензия") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПР_Претензия") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СтатусПриходногоОрдера, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СтатусПриходногоОрдера = мСтатус;
		
		Сохранить = Истина;
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.СписаниеТоваров") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.ПР_СтатусПриходногоОрдера, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.ПР_СтатусПриходногоОрдера = мСтатус;
		
		Сохранить = Истина;

	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.КомплектацияНоменклатуры") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусДокумента, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СП_СтатусДокумента = мСтатус;
		
		Сохранить = Истина;
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ТребованиеНакладная") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ТребованиеНакладная") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусТребованияНакладной, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СП_СтатусТребованияНакладной = мСтатус;
		
		Сохранить = Истина;
		
	//++ Spl_Апроф 25.02.2015 (k.russkih@a-prof.ru)
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусДокумента, ЭтоЗаказ);
		
		Если НЕ ЗначениеЗаполнено(мСтатус) Тогда		
			ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не удалось получить статус 1С на основание полученного статуса из СОЛВО: "+ СокрЛП(НовыйСтатус));
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			Возврат СтруктураОшибок;
		КонецЕсли; 
		
		текДокумент.СП_СтатусДокумента = мСтатус;
		
		Сохранить = Истина;
		
	КонецЕсли;
	
	Возврат СтруктураОшибок;

КонецФункции

Функция ПРГНайтиНоменклатуру(Код,КэшНом,ПРГСтруктураДопПарметров,КоэффЕд)
	НайдЗнч = КэшНом.Найти(Код,"Код");
	Если НайдЗнч <> Неопределено Тогда
		КоэффЕд =НайдЗнч.ЕдиницаИзмеренияМестКоэффициент;
		Возврат НайдЗнч.Номенклатура;
	КонецЕсли;	
	
	ЗапросКНом = Неопределено;
	ПРГСтруктураДопПарметров.Свойство("ЗапросКНом",ЗапросКНом);
	Если ЗапросКНом = Неопределено Тогда
		ЗапросКНом = Новый Запрос("ВЫБРАТЬ
		                          |	Номенклатура.Ссылка,
		                          |	ЕСТЬNULL(Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 0) КАК ЕдиницаИзмеренияМестКоэффициент
		                          |ИЗ
		                          |	Справочник.Номенклатура КАК Номенклатура
		                          |ГДЕ
		                          |	Номенклатура.Код = &Код");
		ПРГСтруктураДопПарметров.Вставить("ЗапросКНом",ЗапросКНом);							  
	КонецЕсли;	
	
	ЗапросКНом.УстановитьПараметр("Код",Код);
	
	Выборка = ЗапросКНом.Выполнить().Выбрать();
	НС = КэшНом.Добавить();
	НС .Код = Код;
	Если Выборка.Следующий() Тогда
		НС.Номенклатура = Выборка.Ссылка;
		НС.ЕдиницаИзмеренияМестКоэффициент = Выборка.ЕдиницаИзмеренияМестКоэффициент;
	Иначе
		НС.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		НС.ЕдиницаИзмеренияМестКоэффициент  = 0;
	КонецЕсли;	
	
	КоэффЕд = НС.ЕдиницаИзмеренияМестКоэффициент;
	возврат НС.Номенклатура;
	
КонецФункции	

Функция  ПРГМожноИзменитьСтатусДокументаНаСледующийПоПорядку(ПРГМетаДок,Ссылка, СтарыйСтатус, НовыйСтатус, ПРГСтруктураДопПарметров);
	//Если СтарыйСтатус =НовыйСтатус Тогда
	//	возврат Истина;
	//КонецЕсли;	
	
	ТаблНайдСтатусов = Неопределено;
	ПРГСтруктураДопПарметров.Свойство("ТаблНайдСтатусов",ТаблНайдСтатусов);
	Если ТаблНайдСтатусов = Неопределено Тогда
		ТаблНайдСтатусов = Новый ТаблицаЗначений;
		ТаблНайдСтатусов.Колонки.Добавить("Имя");
		ТаблНайдСтатусов.Колонки.Добавить("СтарыйСтатус");
		ТаблНайдСтатусов.Колонки.Добавить("НовыйСтатус");
		ТаблНайдСтатусов.Колонки.Добавить("МожноМенять",Новый ОписаниеТипов("Булево"));
		ТаблНайдСтатусов.Индексы.Добавить("Имя,СтарыйСтатус,НовыйСтатус");
		ПРГСтруктураДопПарметров.Вставить("ТаблНайдСтатусов",ТаблНайдСтатусов);
	КонецЕсли;	
	
	НайдЗнч = ?(ТаблНайдСтатусов.Количество()=0,Новый Массив
	,ТаблНайдСтатусов.НайтиСтроки(Новый Структура("Имя,СтарыйСтатус,НовыйСтатус",ПРГМетаДок.Имя,СтарыйСтатус, НовыйСтатус)));
	Если НайдЗнч.Количество() = 0  Тогда
		НС = ТаблНайдСтатусов.Добавить();
		НС.Имя          	= ПРГМетаДок.Имя;
		НС.СтарыйСтатус		= СтарыйСтатус;
		НС.НовыйСтатус		= НовыйСтатус;
		НС.МожноМенять      = АП_ОбщегоНазначенияСервер.МожноИзменитьСтатусДокументаНаСледующийПоПорядку(Ссылка,СтарыйСтатус, НовыйСтатус);
		возврат НС.МожноМенять;
	Иначе
		возврат НайдЗнч[0].МожноМенять;
	КонецЕсли;	
	
КонецФункции

Процедура ЗакэшироватьНоменклатуру(СсылкаНаДокумент,КэшНом);
	Если ТИпЗнч(СсылкаНаДокумент) <> Тип("ДокументСсылка.СП_ЗаданиеНаПодбор")
		Тогда
		возврат;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) тогда
		возврат;
	КонецЕсли;
	
	//говорят 200 позиций действующих
	Если КэшНом.Количество()>200 Тогда
		возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СП_ЗаданиеНаПодборТовары.Номенклатура.Код КАК Код,
	                      |	СП_ЗаданиеНаПодборТовары.Номенклатура,
	                      |	ЕСТЬNULL(СП_ЗаданиеНаПодборТовары.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент, 0) КАК ЕдиницаИзмеренияМестКоэффициент
	                      |ИЗ
	                      |	Документ.СП_ЗаданиеНаПодбор.Товары КАК СП_ЗаданиеНаПодборТовары
	                      |ГДЕ
	                      |	СП_ЗаданиеНаПодборТовары.Ссылка = &Ссылка");
						  
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	БылоЧтото = КэшНом.Количество()>0;
	Пока Выборка.Следующий() Цикл
		Код = СокрЛП(Выборка.КОД);
		Если БылоЧтото  Тогда
			НайдЗнч = КэшНом.Найти(Код,"Код");
			Если НайдЗнч <> Неопределено Тогда
				продолжить;
			Иначе	
				НС = КэшНом.Добавить();
			КонецЕсли;	
		Иначе
			НС = КэшНом.Добавить();
		КонецЕсли;	
		НС.Код =Код;
		НС.Номенклатура 				   = Выборка.Номенклатура;
		НС.ЕдиницаИзмеренияМестКоэффициент = Выборка.ЕдиницаИзмеренияМестКоэффициент;
	КонецЦикла;	
КонецПроцедуры

Функция ПРГПолучитьСтатусПоДокументу(текДокумент,НовыйСтатус,ЭтоЗаказ)
	
	НайденныйДокумент = текДокумент.Ссылка;
	
	
	Если ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаПодбор") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СтатусДокумента, ЭтоЗаказ);
		
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусДокумента, ЭтоЗаказ);
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусДокумента, ЭтоЗаказ);
		
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.СП_ЗаданиеНаСмену") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.СП_ЗаданиеНаСмену") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СтатусДокумента, ЭтоЗаказ);
		
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ПР_Претензия") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПР_Претензия") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СтатусПриходногоОрдера, ЭтоЗаказ);
		
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.СписаниеТоваров") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.ПР_СтатусПриходногоОрдера, ЭтоЗаказ);
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.КомплектацияНоменклатуры") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусДокумента, ЭтоЗаказ);
		
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ТребованиеНакладная") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ТребованиеНакладная") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусТребованияНакладной, ЭтоЗаказ);
		
	//++ Spl_Апроф 25.02.2015 (k.russkih@a-prof.ru)
	ИначеЕсли ТипЗнч(НайденныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") ИЛИ ТипЗнч(текДокумент) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		мСтатус = ВернемСтатус1СПоКодуСОЛВО(НовыйСтатус, текДокумент.СП_СтатусДокумента, ЭтоЗаказ);
		
	КонецЕсли;
	
	Возврат мСтатус;

КонецФункции
//конец изменений 

//Blik 040717 67562 н
Функция ПроверитьПоСкладамСкоропорта(Склад)
	Если не ЗначениеЗаполнено(Склад) Тогда
		 Возврат 0;
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра
	                      |ИЗ
	                      |	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	                      |ГДЕ
	                      |	ПРГ_СлужебныйТаблицаПараметров.Ссылка.Наименование = ""Выгрузка скоропорта в solvo""
	                      |	И ПРГ_СлужебныйТаблицаПараметров.Параметр = &Параметр");
	
	
	Запрос.УстановитьПараметр("Параметр",Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат СокрЛП(Строка(Выборка.ЗначениеПараметра));
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции
 //Blik 040717 67562 к

//Blik 200815 43113 н   
//проверим контрагента на расширенную выгрузку, первоначально только Лента
//1 - расширенная выгрузка
//0- стандартная
Функция ПроверитьПоКонтрашентуНаРасширеннуюВыгрузку(ПолучательКонтр)
	Если не ЗначениеЗаполнено(ПолучательКонтр) Тогда
		 Возврат 0;
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра
	                      |ИЗ
	                      |	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	                      |ГДЕ
	                      |	ПРГ_СлужебныйТаблицаПараметров.Ссылка.Наименование = ""Расширенная выгрузка в solvo""
	                      |	И ПРГ_СлужебныйТаблицаПараметров.Параметр = &Параметр");
	
	
	Запрос.УстановитьПараметр("Параметр",ПолучательКонтр);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат СокрЛП(Строка(Выборка.ЗначениеПараметра));
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

//получаем номер заказа покупателя
Функция ПолучитьНомерЗаказаПокупателя(ЗаданиеНаПодбор)
	Если не ЗначениеЗаполнено(ЗаданиеНаПодбор) Тогда
		Возврат "";
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СП_ЗаданиеНаПодбор.Заказ.НомерПоДаннымПокупателя Как НомПок
	                      |ИЗ
	                      |	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
	                      |ГДЕ
	                      |	СП_ЗаданиеНаПодбор.Ссылка = &Ссылка
	                      |	И ТИПЗНАЧЕНИЯ(СП_ЗаданиеНаПодбор.Заказ) = ТИП(Документ.ЗаказПокупателя)");
	
	
	Запрос.УстановитьПараметр("Ссылка",ЗаданиеНаПодбор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомПок;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции
//получаем артикул номенклатуры контрагента
Функция ПолучитьАртикулНоменклатурыКонтрагенты(Номенклатура, Контрагент)
	//Blik 100616 изменен порядок определения кода номенклатуры для контрагента
	Если не ЗначениеЗаполнено(Номенклатура) или не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат "";
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента КАК Арт
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Контрагент = &Контрагент
	|	И НоменклатураКонтрагентов.Номенклатура = &Номенклатура");
	
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	ПолученноеЗначение="";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПолученноеЗначение = Выборка.Арт; 
	Иначе
		ПолученноеЗначение="";
	КонецЕсли;
	Если СокрЛП(Строка(ПолученноеЗначение))="" тогда
		//Blik 051015 если не нашли в рс номенклатура контрагента - проверим по рс КонтурEDI_СоответствияТоваров н
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	КонтурEDI_ДополнительныеРеквизиты.Значение КАК Партнер
		|ПОМЕСТИТЬ ВТ_Партнер
		|ИЗ
		|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
		|ГДЕ
		|	КонтурEDI_ДополнительныеРеквизиты.Свойство = ""ПартнерКонтрагента""
		|	И ТИПЗНАЧЕНИЯ(КонтурEDI_ДополнительныеРеквизиты.Объект) = ТИП(Справочник.Контрагенты)
		|	И КонтурEDI_ДополнительныеРеквизиты.Объект = &Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК АртикулПартнера
		|ИЗ
		|	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнер КАК ВТ_Партнер
		|		ПО КонтурEDI_СоответствияТоваров.Партнер = ВТ_Партнер.Партнер
		|ГДЕ
		|	КонтурEDI_СоответствияТоваров.Номенклатура = &Номенклатура");
		
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.АртикулПартнера;
		Иначе //Blik 051015 если не нашли в рс номенклатура контрагента - проверим по рс КонтурEDI_СоответствияТоваров 
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат ПолученноеЗначение;
	КонецЕсли;

	
КонецФункции

//Blik 200815 43113 к
//получаем адрес грузополучателя   //Blik 090915 43113 н
Функция ПолучитьАдресГрузополучателя(ЗаданиеНаПодбор)
	Если не ЗначениеЗаполнено(ЗаданиеНаПодбор) Тогда
		Возврат "";
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СП_ЗаданиеНаПодбор.Заказ.АдресДоставки Как АдресДост
	                      |ИЗ
	                      |	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
	                      |ГДЕ
	                      |	СП_ЗаданиеНаПодбор.Ссылка = &Ссылка
	                      |	И ТИПЗНАЧЕНИЯ(СП_ЗаданиеНаПодбор.Заказ) = ТИП(Документ.ЗаказПокупателя)");
	
	
	Запрос.УстановитьПараметр("Ссылка",ЗаданиеНаПодбор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.АдресДост;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции //Blik 090915 43113 к

//начало изменений Ожиганов 16.05.2016 пометим пакеты, которые не будут обрабатываться в статус cancel. Для уменьшения операций чтения
Процедура ПРГ_ЗаписатьИнформациюПоНеобрабатываемымПакетам(таблНеобрабатываемыхПакетов, Соединение, Узел, ПРГАДоДБ, ПРГТестЧтение=Ложь)
	
	Если таблНеобрабатываемыхПакетов = Неопределено Тогда
		возврат;
	КонецЕсли;	
	
	Если таблНеобрабатываемыхПакетов.Количество() = 0 тогда
		возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из таблНеобрабатываемыхПакетов Цикл
		НомерПакетаСтр = Формат(ТекСтрока.НомерПакета, "ЧГ=0");
		ТекстЗапроса = "update to_host_header_message set status = 'cancel',"+?(ПустаяСтрока(ТекСтрока.Комментарий),""," err_descr = '"+СокрЛП(ТекСтрока.Комментарий))+"' where id = '"+НомерПакетаСтр+"'";
		
		Если ПРГТестЧтение Тогда
			Сообщить(ТекстЗапроса);
		Иначе	
			Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса,Узел, ПРГАДоДБ); 
			Если Рез = Неопределено Тогда
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,НомерПакетаСТР, "Ошибка обновления статуса переданных пакетов № "+ НомерПакетаСтр+" в таблице to_host_header_message");
			Иначе
				ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Информация,,НомерПакетаСтр, "Пакет  №"+ НомерПакетаСтр+" не будет больше обработан в таблице to_host_header_message");
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	
 //конец изменений  
 
//начало изменений Ожиганов 13.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
Функция ПолучитьВСтруктуреКонтрагента(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_Спр_Контрагенты_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Контрагенты.Ссылка,
		                      |	Контрагенты.Код,
		                      |	Контрагенты.Наименование,
		                      |	Контрагенты.Покупатель,
		                      |	Контрагенты.Поставщик,
		                      |	Контрагенты.Производитель,
		                      |	ПОДСТРОКА(Контрагенты.Комментарий, 1, 255) КАК Комментарий,
		                      |	Контрагенты.ЭтоГруппа
		                      |ИЗ
		                      |	Справочник.Контрагенты КАК Контрагенты
		                      |ГДЕ
		                      |	Контрагенты.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет());
	
КонецФункции	

Функция ПолучитьВСтруктуреСклад(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_Спр_Склады_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Склады.Ссылка,
		                      |	Склады.Код,
		                      |	Склады.Наименование,
		                      |	ПОДСТРОКА(Склады.Комментарий, 1, 255) КАК Комментарий,
		                      |	Склады.НСИ_АП,
		                      |	ЛОЖЬ КАК Покупатель,
		                      |	ЛОЖЬ КАК Поставщик,
		                      |	ЛОЖЬ КАК Производитель
		                      |ИЗ
		                      |	Справочник.Склады КАК Склады
		                      |ГДЕ
		                      |	Склады.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет(),"Маршруты","ЗаданияНаПеревозку");
	
КонецФункции	

Функция ПолучитьВСтруктуреНоменклатуру(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_Спр_Номенклатура_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВЫБОР
		                      |		КОГДА Номенклатура.НСИ_НоменклатураОбменаССолво <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		                      |			ТОГДА Номенклатура.НСИ_НоменклатураОбменаССолво
		                      |		ИНАЧЕ Номенклатура.Ссылка
		                      |	КОНЕЦ КАК Ссылка
		                      |ПОМЕСТИТЬ ТаблНом
		                      |ИЗ
		                      |	Справочник.Номенклатура КАК Номенклатура
		                      |ГДЕ
		                      |	Номенклатура.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	Номенклатура.Ссылка,
		                      |	Номенклатура.Код,
		                      |	Номенклатура.Наименование,
		                      |	Номенклатура.НаименованиеПолное,
		                      |	Номенклатура.СрокГодности,
		                      |	ПРЕДСТАВЛЕНИЕ(Номенклатура.ЕдиницаИзмеренияМест) КАК ЕдиницаИзмеренияМест,
		                      |	ПРЕДСТАВЛЕНИЕ(Номенклатура.ЕдиницаХраненияОстатков) КАК ЕдиницаХраненияОстатков,
		                      |	ЕСТЬNULL(Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код, """") КАК ЕдиницаХраненияОстатков_ЕдиницаПоКлассификатору_Код,
		                      |	ЕСТЬNULL(Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво, ЛОЖЬ) КАК ВидНоменклатуры_НСИ_ОбменССолво,
		                      |	Номенклатура.ЭтоГруппа
		                      |ИЗ
		                      |	ТаблНом КАК ТаблНом
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		                      |		ПО ТаблНом.Ссылка = Номенклатура.Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	МассПакетов  = Новый Массив;
	МассПакетов.Добавить(Запрос.Выполнить());
	
	возврат ПреобразоватьМассПакетовВСтруктуру(МассПакетов);
	
КонецФункции	

Функция ПолучитьВСтруктуреПланДоставки(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_ПТЛ_ПланДоставки_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПТЛ_ПланДоставки.Ссылка,
		                      |	ПТЛ_ПланДоставки.Номер,
		                      |	ПТЛ_ПланДоставки.Дата,
		                      |	ПТЛ_ПланДоставки.ДатаОтгрузки,
		                      |	ПТЛ_ПланДоставки.СтатусДокумента,
		                      |	ПТЛ_ПланДоставки.Отделение,
		                      |	ПТЛ_ПланДоставки.Проведен
		                      |ИЗ
		                      |	Документ.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
		                      |ГДЕ
		                      |	ПТЛ_ПланДоставки.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ПТЛ_ПланДоставкиМаршруты.НомерСтроки,
		                      |	ПТЛ_ПланДоставкиМаршруты.КлючСтроки,
		                      |	ПТЛ_ПланДоставкиМаршруты.Рейс,
		                      |	ПТЛ_ПланДоставкиМаршруты.ТЭК,
		                      |	ПРЕДСТАВЛЕНИЕ(ПТЛ_ПланДоставкиМаршруты.ТранспортноеСредство) КАК ТранспортноеСредство,
		                      |	ПТЛ_ПланДоставкиМаршруты.ТранспортноеСредство.ГосНомер КАК ТранспортноеСредство_ГосНомер,
		                      |	ПТЛ_ПланДоставкиМаршруты.ПриоритетОтгрузки,
		                      |	ПРЕДСТАВЛЕНИЕ(ПТЛ_ПланДоставкиМаршруты.Водитель) КАК Водитель
		                      |ИЗ
		                      |	Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
		                      |ГДЕ
		                      |	ПТЛ_ПланДоставкиМаршруты.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.НомерСтроки,
		                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.КлючСтроки,
		                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
		                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Исключено,
		                      |	ЕСТЬNULL(ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор, НЕОПРЕДЕЛЕНО) КАК ЗаданиеНаПеревозку_ЗаданиеНаПодбор
		                      |ИЗ
		                      |	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
		                      |ГДЕ
		                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет(),"Маршруты","ЗаданияНаПеревозку");
	
КонецФункции	

Функция ПолучитьВСтруктуреЗаданиеНаПодбор(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_СП_ЗаданиеНаПодбор_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		//Blik 58274 281016 в запрос добавлен адрес ТЭК, номер магазина, Номер магазина ТЭК.
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СП_ЗаданиеНаПодбор.Ссылка,
		                      |	СП_ЗаданиеНаПодбор.Номер,
		                      |	СП_ЗаданиеНаПодбор.Дата,
		                      |	СП_ЗаданиеНаПодбор.Склад,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаПодбор.Склад.НСИ_ПодключенКSolvo, ЛОЖЬ) КАК Склад_НСИ_ПодключенКSolvo,
		                      |	СП_ЗаданиеНаПодбор.Получатель,
		                      |	ПРЕДСТАВЛЕНИЕ(СП_ЗаданиеНаПодбор.Ответственный) КАК Ответственный,
		                      |	СП_ЗаданиеНаПодбор.ПриоритетОтгрузки,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаПодбор.Склад.Код, """") КАК Склад_Код,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаПодбор.Заказ.НомерПоДаннымПокупателя, """") КАК Заказ_НомерПоДаннымПокупателя,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаПодбор.Заказ.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК Заказ_ДатаОтгрузки,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаПодбор.Заказ.АдресДоставки, """") КАК Заказ_АдресГрузополучателя,
		                      |	ПОДСТРОКА(СП_ЗаданиеНаПодбор.Комментарий, 1, 180) КАК Комментарий,
		                      |	СП_ЗаданиеНаПодбор.СтатусДокумента,
		                      |	СП_ЗаданиеНаПодбор.Проведен,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаПодбор.Заказ.КП_АдресДоставкиТЭК.НСИ_АдресДоставки, """") КАК Заказ_АдресТэк,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаПодбор.Заказ.КП_АдресДоставкиТЭК.НСИ_НомерМагазина, """") КАК Заказ_НомерМагазинаТэК,
		                      |	ВЫБОР
		                      |		КОГДА ТИПЗНАЧЕНИЯ(СП_ЗаданиеНаПодбор.Заказ.Грузополучатель) = ТИП(Справочник.АдресаПоставки)
		                      |			ТОГДА ЕСТЬNULL(СП_ЗаданиеНаПодбор.Заказ.Грузополучатель.НСИ_НомерМагазина, """")
		                      |		ИНАЧЕ """"
		                      |	КОНЕЦ КАК Заказ_НомерМагазина
		                      |ИЗ
		                      |	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
		                      |ГДЕ
		                      |	СП_ЗаданиеНаПодбор.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	СП_ЗаданиеНаПодборТовары.Номенклатура,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаПодборТовары.Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво, ЛОЖЬ) КАК Номенклатура_ВидНоменклатуры_НСИ_ОбменССолво,
		                      |	СП_ЗаданиеНаПодборТовары.Количество,
		                      |	СП_ЗаданиеНаПодборТовары.Коэффициент,
		                      |	СП_ЗаданиеНаПодборТовары.ОСГ,
		                      |	ВЫБОР
		                      |		КОГДА СП_ЗаданиеНаПодборТовары.Номенклатура.НСИ_НоменклатураОбменаССолво = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		                      |			ТОГДА СП_ЗаданиеНаПодборТовары.Номенклатура.Код
		                      |		ИНАЧЕ СП_ЗаданиеНаПодборТовары.Номенклатура.НСИ_НоменклатураОбменаССолво.Код
		                      |	КОНЕЦ КАК Номенклатура_НСИ_НоменклатураОбменаССолво_Код
		                      |ИЗ
		                      |	Документ.СП_ЗаданиеНаПодбор.Товары КАК СП_ЗаданиеНаПодборТовары
		                      |ГДЕ
		                      |	СП_ЗаданиеНаПодборТовары.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет(),"Товары");
	
КонецФункции	

Функция ПолучитьВСтруктуреПеремещениеТоваров(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_ПеремещениеТоваров_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПеремещениеТоваров.Ссылка,
		                      |	ПеремещениеТоваров.Организация,
		                      |	ПеремещениеТоваров.Проведен,
		                      |	ПеремещениеТоваров.Номер,
		                      |	ПеремещениеТоваров.Дата,
		                      |	ПеремещениеТоваров.СП_СтатусДокумента,
		                      |	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваров.Ответственный) КАК Ответственный,
		                      |	ПОДСТРОКА(ПеремещениеТоваров.Комментарий, 1, 180) КАК Комментарий,
		                      |	ЕСТЬNULL(ПеремещениеТоваров.СкладОтправитель.Код, """") КАК СкладОтправитель_Код,
		                      |	ЕСТЬNULL(ПеремещениеТоваров.СкладПолучатель.Код, """") КАК СкладПолучатель_Код,
		                      |	ЕСТЬNULL(ПеремещениеТоваров.СкладОтправитель.НСИ_ПодключенКSolvo, ЛОЖЬ) КАК СкладОтправитель_НСИ_ПодключенКSolvo,
		                      |	ЕСТЬNULL(ПеремещениеТоваров.СкладПолучатель.НСИ_ПодключенКSolvo, ЛОЖЬ) КАК СкладПолучатель_НСИ_ПодключенКSolvo,
		                      |	ПеремещениеТоваров.СкладПолучатель,
		                      |	ПеремещениеТоваров.СкладОтправитель
		                      |ИЗ
		                      |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		                      |ГДЕ
		                      |	ПеремещениеТоваров.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ПеремещениеТоваровТовары.НомерСтроки,
		                      |	ПеремещениеТоваровТовары.Номенклатура,
		                      |	ЕСТЬNULL(ПеремещениеТоваровТовары.Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво, ЛОЖЬ) КАК Номенклатура_ВидНоменклатуры_НСИ_ОбменССолво,
		                      |	ПеремещениеТоваровТовары.Количество,
		                      |	ПеремещениеТоваровТовары.Коэффициент,
		                      |	ВЫБОР
		                      |		КОГДА ПеремещениеТоваровТовары.Номенклатура.НСИ_НоменклатураОбменаССолво = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		                      |			ТОГДА ПеремещениеТоваровТовары.Номенклатура.Код
		                      |		ИНАЧЕ ПеремещениеТоваровТовары.Номенклатура.НСИ_НоменклатураОбменаССолво.Код
		                      |	КОНЕЦ КАК Номенклатура_НСИ_НоменклатураОбменаССолво_Код,
		                      |	ЕСТЬNULL(ПеремещениеТоваровТовары.Номенклатура.ВидНоменклатуры.НСИ_СобственноеПроизводства, ЛОЖЬ) КАК Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство
		                      |ИЗ
		                      |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		                      |ГДЕ
		                      |	ПеремещениеТоваровТовары.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет(),"Товары");
	
КонецФункции	

Функция ПолучитьВСтруктуреПоступлениеТоваровУслуг(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_ПоступлениеТоваровУслуг_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПоступлениеТоваровУслуг.Ссылка,
		                      |	ПоступлениеТоваровУслуг.Организация,
		                      |	ПоступлениеТоваровУслуг.Проведен,
		                      |	ПоступлениеТоваровУслуг.Номер,
		                      |	ПоступлениеТоваровУслуг.Дата,
		                      |	ПоступлениеТоваровУслуг.СП_СтатусДокумента,
		                      |	ПРЕДСТАВЛЕНИЕ(ПоступлениеТоваровУслуг.Ответственный) КАК Ответственный,
		                      |	ПОДСТРОКА(ПоступлениеТоваровУслуг.Комментарий, 1, 180) КАК Комментарий,
		                      |	ПоступлениеТоваровУслуг.Контрагент,
		                      |	ЕСТЬNULL(ПоступлениеТоваровУслуг.СкладОрдер.НСИ_ПодключенКSolvo, ЛОЖЬ) КАК СкладОрдер_НСИ_ПодключенКSolvo,
		                      |	ЕСТЬNULL(ПоступлениеТоваровУслуг.СкладОрдер.Код, """") КАК СкладОрдер_Код,
		                      |	ПоступлениеТоваровУслуг.СкладОрдер,
		                      |	ПоступлениеТоваровУслуг.ВидОперации
		                      |ИЗ
		                      |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		                      |ГДЕ
		                      |	ПоступлениеТоваровУслуг.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ПоступлениеТоваровУслугТовары.НомерСтроки,
		                      |	ПоступлениеТоваровУслугТовары.Номенклатура,
		                      |	ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво, ЛОЖЬ) КАК Номенклатура_ВидНоменклатуры_НСИ_ОбменССолво,
		                      |	ПоступлениеТоваровУслугТовары.Количество,
		                      |	ПоступлениеТоваровУслугТовары.Коэффициент,
		                      |	ВЫБОР
		                      |		КОГДА ПоступлениеТоваровУслугТовары.Номенклатура.НСИ_НоменклатураОбменаССолво = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		                      |			ТОГДА ПоступлениеТоваровУслугТовары.Номенклатура.Код
		                      |		ИНАЧЕ ПоступлениеТоваровУслугТовары.Номенклатура.НСИ_НоменклатураОбменаССолво.Код
		                      |	КОНЕЦ КАК Номенклатура_НСИ_НоменклатураОбменаССолво_Код,
		                      |	ЕСТЬNULL(ПоступлениеТоваровУслугТовары.Номенклатура.ВидНоменклатуры.НСИ_СобственноеПроизводства, ЛОЖЬ) КАК Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство,
		                      |	ПоступлениеТоваровУслугТовары.СП_КоличествоПоНакладной
		                      |ИЗ
		                      |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		                      |ГДЕ
		                      |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет(),"Товары");
	
КонецФункции	

Функция ПолучитьВСтруктуреСписаниеТоваров(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_СписаниеТоваров_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СписаниеТоваров.Ссылка,
		                      |	СписаниеТоваров.Организация,
		                      |	СписаниеТоваров.Проведен,
		                      |	СписаниеТоваров.Номер,
		                      |	СписаниеТоваров.Дата,
		                      |	ПРЕДСТАВЛЕНИЕ(СписаниеТоваров.Ответственный) КАК Ответственный,
		                      |	ПОДСТРОКА(СписаниеТоваров.Комментарий, 1, 180) КАК Комментарий,
		                      |	СписаниеТоваров.СП_НеОтражатьВСолво,
		                      |	СписаниеТоваров.ПР_СтатусПриходногоОрдера,
		                      |	СписаниеТоваров.Склад,
		                      |	СписаниеТоваров.Склад.Код КАК Склад_Код,
		                      |	СписаниеТоваров.ВидОперации,
		                      |	ЕСТЬNULL(СписаниеТоваров.Склад.НСИ_ПодключенКSolvo, ЛОЖЬ) КАК Склад_НСИ_ПодключенКSolvo
		                      |ИЗ
		                      |	Документ.СписаниеТоваров КАК СписаниеТоваров
		                      |ГДЕ
		                      |	СписаниеТоваров.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	СписаниеТоваровТовары.НомерСтроки,
		                      |	СписаниеТоваровТовары.Номенклатура,
		                      |	ЕСТЬNULL(СписаниеТоваровТовары.Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво, ЛОЖЬ) КАК Номенклатура_ВидНоменклатуры_НСИ_ОбменССолво,
		                      |	СписаниеТоваровТовары.Количество,
		                      |	СписаниеТоваровТовары.Коэффициент,
		                      |	ВЫБОР
		                      |		КОГДА СписаниеТоваровТовары.Номенклатура.НСИ_НоменклатураОбменаССолво = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		                      |			ТОГДА СписаниеТоваровТовары.Номенклатура.Код
		                      |		ИНАЧЕ СписаниеТоваровТовары.Номенклатура.НСИ_НоменклатураОбменаССолво.Код
		                      |	КОНЕЦ КАК Номенклатура_НСИ_НоменклатураОбменаССолво_Код,
		                      |	ЕСТЬNULL(СписаниеТоваровТовары.Номенклатура.ВидНоменклатуры.НСИ_СобственноеПроизводства, ЛОЖЬ) КАК Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство
		                      |ИЗ
		                      |	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
		                      |ГДЕ
		                      |	СписаниеТоваровТовары.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет(),"Товары");
	
КонецФункции	


Функция ПолучитьВСтруктуреТребованиеНакладная(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_ТребованиеНакладная_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ТребованиеНакладная.Ссылка,
		                      |	ТребованиеНакладная.Организация,
		                      |	ТребованиеНакладная.Проведен,
		                      |	ТребованиеНакладная.Номер,
		                      |	ТребованиеНакладная.Дата,
		                      |	ПРЕДСТАВЛЕНИЕ(ТребованиеНакладная.Ответственный) КАК Ответственный,
		                      |	ПОДСТРОКА(ТребованиеНакладная.Комментарий, 1, 180) КАК Комментарий,
		                      |	ТребованиеНакладная.Склад,
		                      |	ТребованиеНакладная.Склад.Код КАК Склад_Код,
		                      |	ЕСТЬNULL(ТребованиеНакладная.Склад.НСИ_ПодключенКSolvo, ЛОЖЬ) КАК Склад_НСИ_ПодключенКSolvo,
		                      |	ТребованиеНакладная.СП_СтатусТребованияНакладной
		                      |ИЗ
		                      |	Документ.ТребованиеНакладная КАК ТребованиеНакладная
		                      |ГДЕ
		                      |	ТребованиеНакладная.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ТребованиеНакладнаяМатериалы.НомерСтроки,
		                      |	ТребованиеНакладнаяМатериалы.Номенклатура,
		                      |	ЕСТЬNULL(ТребованиеНакладнаяМатериалы.Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво, ЛОЖЬ) КАК Номенклатура_ВидНоменклатуры_НСИ_ОбменССолво,
		                      |	ТребованиеНакладнаяМатериалы.Количество,
		                      |	ТребованиеНакладнаяМатериалы.Коэффициент,
		                      |	ВЫБОР
		                      |		КОГДА ТребованиеНакладнаяМатериалы.Номенклатура.НСИ_НоменклатураОбменаССолво = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		                      |			ТОГДА ТребованиеНакладнаяМатериалы.Номенклатура.Код
		                      |		ИНАЧЕ ТребованиеНакладнаяМатериалы.Номенклатура.НСИ_НоменклатураОбменаССолво.Код
		                      |	КОНЕЦ КАК Номенклатура_НСИ_НоменклатураОбменаССолво_Код,
		                      |	ЕСТЬNULL(ТребованиеНакладнаяМатериалы.Номенклатура.ВидНоменклатуры.НСИ_СобственноеПроизводства, ЛОЖЬ) КАК Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство
		                      |ИЗ
		                      |	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
		                      |ГДЕ
		                      |	ТребованиеНакладнаяМатериалы.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет(),"Материалы");
	
КонецФункции	

Функция ПолучитьВСтруктуреСП_ЗаданиеНаСмену(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_СП_ЗаданиеНаСмену_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СП_ЗаданиеНаСмену.Ссылка,
		                      |	СП_ЗаданиеНаСмену.Организация,
		                      |	СП_ЗаданиеНаСмену.Проведен,
		                      |	СП_ЗаданиеНаСмену.Номер,
		                      |	СП_ЗаданиеНаСмену.Дата,
		                      |	ПРЕДСТАВЛЕНИЕ(СП_ЗаданиеНаСмену.Ответственный) КАК Ответственный,
		                      |	ПОДСТРОКА(СП_ЗаданиеНаСмену.Комментарий, 1, 180) КАК Комментарий,
		                      |	СП_ЗаданиеНаСмену.Склад,
		                      |	СП_ЗаданиеНаСмену.Склад.Код КАК Склад_Код,
		                      |	СП_ЗаданиеНаСмену.Количество,
		                      |	СП_ЗаданиеНаСмену.Коэффициент,
		                      |	СП_ЗаданиеНаСмену.Номенклатура,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаСмену.Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво, ЛОЖЬ) КАК Номенклатура_ВидНоменклатуры_НСИ_ОбменССолво,
		                      |	ВЫБОР
		                      |		КОГДА СП_ЗаданиеНаСмену.Номенклатура.НСИ_НоменклатураОбменаССолво = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		                      |			ТОГДА СП_ЗаданиеНаСмену.Номенклатура.Код
		                      |		ИНАЧЕ СП_ЗаданиеНаСмену.Номенклатура.НСИ_НоменклатураОбменаССолво.Код
		                      |	КОНЕЦ КАК Номенклатура_НСИ_НоменклатураОбменаССолво_Код,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаСмену.Номенклатура.ВидНоменклатуры.НСИ_СобственноеПроизводства, ЛОЖЬ) КАК Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаСмену.Склад.НСИ_ПодключенКSolvo, ЛОЖЬ) КАК Склад_НСИ_ПодключенКSolvo,
		                      |	СП_ЗаданиеНаСмену.Подразделение,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаСмену.Подразделение.Код, """") КАК Подразделение_Код,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаСмену.Подразделение.КодСолво, """") КАК Подразделение_КодСолво,
		                      |	СП_ЗаданиеНаСмену.СтатусДокумента,
		                      |	СП_ЗаданиеНаСмену.ДатаЗадания
		                      |ИЗ
		                      |	Документ.СП_ЗаданиеНаСмену КАК СП_ЗаданиеНаСмену
		                      |ГДЕ
		                      |	СП_ЗаданиеНаСмену.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет());
	
КонецФункции	

//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
Функция ПолучитьВСтруктуреВозвратТовараПоставщику(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_ВозвратТовараПоставщику_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВозвратТоваровПоставщику.Ссылка,
		                      |	ВозвратТоваровПоставщику.Организация,
		                      |	ВозвратТоваровПоставщику.Проведен,
		                      |	ВозвратТоваровПоставщику.Номер,
		                      |	ВозвратТоваровПоставщику.Дата,
		                      |	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровПоставщику.Ответственный) КАК Ответственный,
		                      |	ПОДСТРОКА(ВозвратТоваровПоставщику.Комментарий, 1, 180) КАК Комментарий,
		                      |	ВозвратТоваровПоставщику.Склад,
		                      |	ВозвратТоваровПоставщику.Склад.Код КАК Склад_Код,
		                      |	ВозвратТоваровПоставщику.ВидОперации,
		                      |	ЕСТЬNULL(ВозвратТоваровПоставщику.Склад.НСИ_ПодключенКSolvo, ЛОЖЬ) КАК Склад_НСИ_ПодключенКSolvo,
		                      |	ВозвратТоваровПоставщику.Контрагент,
		                      |	ВозвратТоваровПоставщику.СП_СтатусДокумента
		                      |ИЗ
		                      |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		                      |ГДЕ
		                      |	ВозвратТоваровПоставщику.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ВозвратТоваровПоставщикуТовары.НомерСтроки,
		                      |	ВозвратТоваровПоставщикуТовары.Номенклатура,
		                      |	ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво, ЛОЖЬ) КАК Номенклатура_ВидНоменклатуры_НСИ_ОбменССолво,
		                      |	ВозвратТоваровПоставщикуТовары.Количество,
		                      |	ВозвратТоваровПоставщикуТовары.Коэффициент,
		                      |	ВЫБОР
		                      |		КОГДА ВозвратТоваровПоставщикуТовары.Номенклатура.НСИ_НоменклатураОбменаССолво = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		                      |			ТОГДА ВозвратТоваровПоставщикуТовары.Номенклатура.Код
		                      |		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Номенклатура.НСИ_НоменклатураОбменаССолво.Код
		                      |	КОНЕЦ КАК Номенклатура_НСИ_НоменклатураОбменаССолво_Код,
		                      |	ЕСТЬNULL(ВозвратТоваровПоставщикуТовары.Номенклатура.ВидНоменклатуры.НСИ_СобственноеПроизводства, ЛОЖЬ) КАК Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство
		                      |ИЗ
		                      |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		                      |ГДЕ
		                      |	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет(),"Товары");
	
КонецФункции	

//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
Функция ПолучитьВСтруктуреПР_Претензию(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_ПР_Претензию_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Претензия.Ссылка,
		                      |	Претензия.Организация,
		                      |	Претензия.Проведен,
		                      |	Претензия.Номер,
		                      |	Претензия.Дата,
		                      |	ПРЕДСТАВЛЕНИЕ(Претензия.Ответственный) КАК Ответственный,
		                      |	ПОДСТРОКА(Претензия.Комментарий, 1, 180) КАК Комментарий,
		                      |	ВЫБОР
		                      |		КОГДА НЕ Корректировка.Ссылка ЕСТЬ NULL 
		                      |			ТОГДА Корректировка.Склад
		                      |		КОГДА НЕ Реализация.Ссылка ЕСТЬ NULL 
		                      |			ТОГДА Реализация.Склад
		                      |		ИНАЧЕ НЕОПРЕДЕЛЕНО
		                      |	КОНЕЦ КАК Склад,
		                      |	ВЫБОР
		                      |		КОГДА НЕ Корректировка.Ссылка ЕСТЬ NULL 
		                      |			ТОГДА ВЫРАЗИТЬ(Корректировка.Склад КАК Справочник.Склады).Код
		                      |		КОГДА НЕ Реализация.Ссылка ЕСТЬ NULL 
		                      |			ТОГДА ВЫРАЗИТЬ(Реализация.Склад КАК Справочник.Склады).Код
		                      |		ИНАЧЕ """"
		                      |	КОНЕЦ КАК Склад_Код,
		                      |	ВЫБОР
		                      |		КОГДА НЕ Корректировка.Ссылка ЕСТЬ NULL 
		                      |			ТОГДА ВЫРАЗИТЬ(Корректировка.Склад КАК Справочник.Склады).НСИ_ПодключенКSolvo
		                      |		КОГДА НЕ Реализация.Ссылка ЕСТЬ NULL 
		                      |			ТОГДА ВЫРАЗИТЬ(Реализация.Склад КАК Справочник.Склады).НСИ_ПодключенКSolvo
		                      |		ИНАЧЕ ЛОЖЬ
		                      |	КОНЕЦ КАК Склад_НСИ_ПодключенКSolvo,
		                      |	Претензия.Контрагент,
		                      |	Претензия.СтатусПриходногоОрдера,
		                      |	Претензия.Накладная
		                      |ИЗ
		                      |	Документ.ПР_Претензия КАК Претензия
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК Корректировка
		                      |		ПО Претензия.Накладная = Корректировка.Ссылка
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Реализация
		                      |		ПО Претензия.Накладная = Реализация.Ссылка
		                      |ГДЕ
		                      |	Претензия.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ПР_ПретензияТовары.НомерСтроки,
		                      |	ПР_ПретензияТовары.Номенклатура,
		                      |	ЕСТЬNULL(ПР_ПретензияТовары.Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво, ЛОЖЬ) КАК Номенклатура_ВидНоменклатуры_НСИ_ОбменССолво,
		                      |	ПР_ПретензияТовары.Количество,
		                      |	ПР_ПретензияТовары.Коэффициент,
		                      |	ВЫБОР
		                      |		КОГДА ПР_ПретензияТовары.Номенклатура.НСИ_НоменклатураОбменаССолво = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		                      |			ТОГДА ПР_ПретензияТовары.Номенклатура.Код
		                      |		ИНАЧЕ ПР_ПретензияТовары.Номенклатура.НСИ_НоменклатураОбменаССолво.Код
		                      |	КОНЕЦ КАК Номенклатура_НСИ_НоменклатураОбменаССолво_Код,
		                      |	ЕСТЬNULL(ПР_ПретензияТовары.Номенклатура.ВидНоменклатуры.НСИ_СобственноеПроизводства, ЛОЖЬ) КАК Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство,
		                      |	ПР_ПретензияТовары.КоличествоВозврат
		                      |ИЗ
		                      |	Документ.ПР_Претензия.Товары КАК ПР_ПретензияТовары
		                      |ГДЕ
		                      |	ПР_ПретензияТовары.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет(),"Товары");
	
КонецФункции	

Функция ПолучитьВСтруктуреКомплектацияНоменклатуры(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_КомплектацияНоменклатуры_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	КомплектацияНоменклатуры.Ссылка,
		                      |	КомплектацияНоменклатуры.Организация,
		                      |	КомплектацияНоменклатуры.Проведен,
		                      |	КомплектацияНоменклатуры.Номер,
		                      |	КомплектацияНоменклатуры.Дата,
		                      |	ПРЕДСТАВЛЕНИЕ(КомплектацияНоменклатуры.Ответственный) КАК Ответственный,
		                      |	ПОДСТРОКА(КомплектацияНоменклатуры.Комментарий, 1, 180) КАК Комментарий,
		                      |	КомплектацияНоменклатуры.Склад,
		                      |	КомплектацияНоменклатуры.Склад.Код КАК Склад_Код,
		                      |	КомплектацияНоменклатуры.ВидОперации,
		                      |	ЕСТЬNULL(КомплектацияНоменклатуры.Склад.НСИ_ПодключенКSolvo, ЛОЖЬ) КАК Склад_НСИ_ПодключенКSolvo,
		                      |	КомплектацияНоменклатуры.СП_СтатусДокумента,
		                      |	КомплектацияНоменклатуры.Номенклатура,
		                      |	КомплектацияНоменклатуры.Номенклатура.Код КАК Номенклатура_Код,
		                      |	КомплектацияНоменклатуры.Количество,
		                      |	КомплектацияНоменклатуры.Коэффициент
		                      |ИЗ
		                      |	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
		                      |ГДЕ
		                      |	КомплектацияНоменклатуры.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	КомплектацияНоменклатурыКомплектующие.НомерСтроки,
		                      |	КомплектацияНоменклатурыКомплектующие.Номенклатура,
		                      |	ЕСТЬNULL(КомплектацияНоменклатурыКомплектующие.Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво, ЛОЖЬ) КАК Номенклатура_ВидНоменклатуры_НСИ_ОбменССолво,
		                      |	КомплектацияНоменклатурыКомплектующие.Количество,
		                      |	КомплектацияНоменклатурыКомплектующие.Коэффициент,
		                      |	ВЫБОР
		                      |		КОГДА КомплектацияНоменклатурыКомплектующие.Номенклатура.НСИ_НоменклатураОбменаССолво = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		                      |			ТОГДА КомплектацияНоменклатурыКомплектующие.Номенклатура.Код
		                      |		ИНАЧЕ КомплектацияНоменклатурыКомплектующие.Номенклатура.НСИ_НоменклатураОбменаССолво.Код
		                      |	КОНЕЦ КАК Номенклатура_НСИ_НоменклатураОбменаССолво_Код,
		                      |	ЕСТЬNULL(КомплектацияНоменклатурыКомплектующие.Номенклатура.ВидНоменклатуры.НСИ_СобственноеПроизводства, ЛОЖЬ) КАК Номенклатура_ВидНоменклатурыНСИ_СобственноеПроизводство,
		                      |	КомплектацияНоменклатурыКомплектующие.Номенклатура.Код КАК Номенклатура_Код
		                      |ИЗ
		                      |	Документ.КомплектацияНоменклатуры.Комплектующие КАК КомплектацияНоменклатурыКомплектующие
		                      |ГДЕ
		                      |	КомплектацияНоменклатурыКомплектующие.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет(),"Комплектующие");
	
КонецФункции	



Функция ПолучитьВСтруктуреКлассификаторЕдиниц(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_КлассификаторЕдиницИзмерения_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	КлассификаторЕдиницИзмерения.Ссылка,
		                      |	КлассификаторЕдиницИзмерения.Код,
		                      |	КлассификаторЕдиницИзмерения.Наименование,
		                      |	КлассификаторЕдиницИзмерения.НаименованиеПолное
		                      |ИЗ
		                      |	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		                      |ГДЕ
		                      |	КлассификаторЕдиницИзмерения.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет());
	
КонецФункции	

//конец изменений 





Функция ПреобразоватьМассПакетовВСтруктуру(МассПакетов,ИмяТабЧасти1=Неопределено,ИмяТабЧасти2=Неопределено,ИмяТабЧасти3=Неопределено) 
	
	Результат = Неопределено;
	
	Для к = 0 По МассПакетов.Количество() -1 Цикл
		Если к = 0 Тогда
			РезЗапроса = МассПакетов[к];
			Если РезЗапроса.Пустой() Тогда
				возврат Неопределено; // документа нет в базе 
			иначе
				Выборка = РезЗапроса.Выбрать();
				Если Выборка.Следующий() Тогда
					 Результат = Новый Структура;
					 Для Каждого ТекКолонка из РезЗапроса.Колонки Цикл
						 Результат.Вставить(ТекКолонка.Имя,Выборка[ТекКолонка.Имя]);
					 КонецЦикла; 
				Иначе
					возврат Неопределено; // документа нет в базе 
				КонецЕсли;	
			КонецЕсли;	
		ИначеЕсли к = 1 Тогда
			    Результат.Вставить(ИмяТабЧасти1,МассПакетов[к].Выгрузить());
		ИначеЕсли к = 2 Тогда
				Результат.Вставить(ИмяТабЧасти2,МассПакетов[к].Выгрузить());
		ИначеЕсли к = 3 Тогда
				Результат.Вставить(ИмяТабЧасти3,МассПакетов[к].Выгрузить());
		иначе
			вызватьисключение "неверное количество пакетов в запросе";
		КонецЕсли;	
	КонецЦикла;	
	
	
	возврат Результат;
	
КонецФункции	

//поскольку не понятно сколько времени может занять выгрузка 
//можно предположить что во время выгрузки кто-нибудь может изменить объект и должна последовать новая выгрузка
//для подстраховки увеличиваем номер сообщени и перед удалением регистрации проверяем были изменения или не было
//разнесем чтение и удаление регистрации
Процедура ПроверитьИУдалитьРегистрациюИзменений(Вид,Тип,Ссылка,Узел, АБлокировка, СтруктураПараметров)
	
	Попытка
		Если АБлокировка = Неопределено Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Вид+"."+Тип);
			ЭлементБлокировки.УстановитьЗначение("Ссылка",Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Иначе
			Блокировка = АБлокировка;
		КонецЕсли;	
		
		НачатьТранзакцию();
		
		Блокировка.Заблокировать();		 
		
		Запрос = Неопределено;
		ИмяСвойства  = "Запрос_"+Вид+"_"+Тип+"_ИзмененияПоСсылке";
		Если Не СтруктураПараметров.Свойство(ИмяСвойства,Запрос) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	Изменения.Ссылка,
			                      |	Изменения.НомерСообщения
			                      |ИЗ
								  |	"+Вид+"."+Тип+".Изменения КАК Изменения
			                      //|	""Документ.СП_ЗаданиеНаПодбор.Изменения КАК Изменения
			                      |ГДЕ
			                      |	Изменения.Узел = &Узел
			                      |	И Изменения.Ссылка = &Ссылка
			                      |	И НЕ Изменения.НомерСообщения ЕСТЬ NULL ");
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("Узел",Узел);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Ссылка);
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию(); // в следующий раз удалим
		КолВоНеудачныхПопыток = Неопределено;
		Если СтруктураПараметров.Свойство("КолВоНеудачныхПопыток") Тогда
			СтруктураПараметров.КолВоНеудачныхПопыток = СтруктураПараметров.КолВоНеудачныхПопыток+1;
		Иначе
			СтруктураПараметров.Вставить("КолВоНеудачныхПопыток",1);
		КонецЕслИ;	
		#Если Клиент Тогда
			Сообщить("Не удалось заблокировать  "+Ссылка+". 
			| Не удалось удалить регистрацию изменений.");
		#КонецЕсли
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,Ссылка.Метаданные(),Ссылка, "Не удалось заблокировать  "+Ссылка+". Не удалось удалить регистрацию изменений.
		| "+ ОписаниеОшибки());		
	КонецПопытки;
	
КонецПроцедуры	

Функция СоздатьТаблВыгрОбъектов()
	ТаблВыгрОбъектов = Новый ТаблицаЗначений;
	ТаблВыгрОбъектов.Колонки.Добавить("Ссылка");
	ТаблВыгрОбъектов.Индексы.Добавить("Ссылка");
    возврат ТаблВыгрОбъектов;
КонецФункции	

Процедура ДобавитьИнформациюВыгрОбъекте(ТаблВыгрОбъектов,Ссылка)
	НС = ТаблВыгрОбъектов.Добавить();
	НС.Ссылка = Ссылка;
КонецПроцедуры	

Процедура ДобавитьИнформациюНЕВыгрОбъекте(ТаблВыгрОбъектов,Ссылка)
	НС = ТаблВыгрОбъектов.Добавить();
	НС.Ссылка = Ссылка;
КонецПроцедуры	

//функция ПрочитатьДанныеПоСсылке
//в тразакции считывает необходимые данные для последующей выгрузки
//
Функция ПрочитатьДанныеПоСсылке(ВыбСсылка, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,ИзменятьРегистрациюСсылки)
	
	Результат 	 = Неопределено;
	РезВыгрузки  = Ложь;
	
	ДатаОтсечки = Дата(2015, 02, 1);	
	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	
	//конец изменений 
	
	Если Не ЗначениеЗаполнено(ВыбСсылка) Тогда
		РезВыгрузки   = Истина; // для совместимости со старым алгоритмом
		возврат Результат;
	КонецЕсли;
	
	СтруктураПараметров = ?(СтруктураПараметров = Неопределено,Новый Структура,СтруктураПараметров);
	СтруктураПараметров.Вставить("ПолнаяВыгрузка",Ложь);
	
	//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
	БезУсловий = СтруктураПараметров.Свойство("БезУсловий");
	//конец изменений 
	//проверим выгружали ли объект
	
	Если Не СтруктураПараметров.Свойство("ТаблВыгрОбъектов") Тогда
		СтруктураПараметров.Вставить("ТаблВыгрОбъектов",СоздатьТаблВыгрОбъектов());
	КонецЕсли;	
		
	Если СтруктураПараметров.ТаблВыгрОбъектов.Найти(ВыбСсылка,"Ссылка") <> Неопределено Тогда
		РезВыгрузки  = Истина;
		возврат Результат;
		//возврат Истина;
	КонецЕсли;	
	
	НужноУдалятьРегистрацию = Ложь;
	//
	Попытка
		
		
		МетаСсылки    = ВыбСсылка.Метаданные();
		ПолнИмя       = МетаСсылки.ПолноеИмя();
		ТипЗнчСсылки  = ТипЗнч(ВыбСсылка);
		
	    Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить(ПолнИмя);
		ЭлементБлокировки.УстановитьЗначение("Ссылка",ВыбСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		НачатьТранзакцию();
		
		Блокировка.Заблокировать();
		
		Если ТипЗнчСсылки = Тип("ДокументСсылка.ПТЛ_ПланДоставки") Тогда
			Результат = ПолучитьВСтруктуреПланДоставки(ВыбСсылка,СтруктураПараметров);
		ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
			Результат = ПолучитьВСтруктуреЗаданиеНаПодбор(ВыбСсылка,СтруктураПараметров);
		ИначеЕсли ТипЗнчСсылки = Тип("СправочникСсылка.Номенклатура") Тогда
			Результат = ПолучитьВСтруктуреНоменклатуру(ВыбСсылка,СтруктураПараметров);
		ИначеЕсли ТипЗнчСсылки = Тип("СправочникСсылка.Контрагенты")  Тогда			
			Результат = ПолучитьВСтруктуреКонтрагента(ВыбСсылка,СтруктураПараметров);
		ИначеЕсли ТипЗнчСсылки = Тип("СправочникСсылка.Склады")  Тогда
			Результат = ПолучитьВСтруктуреСклад(ВыбСсылка,СтруктураПараметров);
		ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ПеремещениеТоваров")  Тогда
			Результат = ПолучитьВСтруктуреПеремещениеТоваров(ВыбСсылка,СтруктураПараметров);
		ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")  Тогда
			Результат =  ПолучитьВСтруктуреПоступлениеТоваровУслуг(ВыбСсылка,СтруктураПараметров);
		ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.СписаниеТоваров")  Тогда
			Результат =  ПолучитьВСтруктуреСписаниеТоваров(ВыбСсылка,СтруктураПараметров);
		ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ТребованиеНакладная")  Тогда
			Результат =  ПолучитьВСтруктуреТребованиеНакладная(ВыбСсылка,СтруктураПараметров);
		ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.СП_ЗаданиеНаСмену")  Тогда
			Результат =  ПолучитьВСтруктуреСП_ЗаданиеНаСмену(ВыбСсылка,СтруктураПараметров);
			
//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 			
		ИначеЕсли ТипЗнчСсылки = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			Результат = ПолучитьВСтруктуреКлассификаторЕдиниц(ВыбСсылка, СтруктураПараметров);
			
		ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику")  Тогда			
			Результат = ПолучитьВСтруктуреВозвратТовараПоставщику(ВыбСсылка, СтруктураПараметров);
		ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ПР_Претензия")  Тогда
			Результат = ПолучитьВСтруктуреПР_Претензию(ВыбСсылка, СтруктураПараметров);
		ИначеЕсли  ТипЗнчСсылки = Тип("ДокументСсылка.КомплектацияНоменклатуры")  Тогда
			Результат = ПолучитьВСтруктуреКомплектацияНоменклатуры(ВыбСсылка, СтруктураПараметров);
//конец изменений 
		Иначе
			вызватьисключение "Незвестный тип ссылки в функции ПрочитатьДанныеПоСсылке. Значение выбссылки"+ВыбСсылка;
		КонецЕсли;	
			
		Если Результат =  Неопределено Тогда // нет в базе данных задания приведем к старому алгоритму
			  ЗафиксироватьТранзакцию();
			  РезВыгрузки = Истина;
			  возврат Результат;
		      //возврат Истина;		
		КонецЕсли;	
		
		
		Если ИзменятьРегистрациюСсылки Тогда
			ВыборкаПоРегИзменений = ПланыОбмена.ВыбратьИзменения(Узел,12,Результат.Ссылка); // пометим в таблице изменений нашу ссылку
			НужноУдалятьРегистрацию = ВыборкаПоРегИзменений.Следующий();
			ВыборкаПоПлану = Неопределено;
		КонецЕсли;	
		
		//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
		Если Не БезУсловий  Тогда
		//конец изменений 
			//проверка ревизитов определяющих будет ли дальнейшая выгрузка
			Если ТипЗнчСсылки = Тип("ДокументСсылка.ПТЛ_ПланДоставки") Тогда
				//проверим по доп условиям
				//начало изменений Ожиганов А. б/н учтем новые статусы Тендер,Готов возможно из-за этого не приходит инфа по заявке 59499 23.11.2016 
				//	Если НЕ Результат.СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен 
				Если (Результат.СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Новый или Не ЗначениеЗаполнено(Результат.СтатусДокумента)) 
						или  Узел.Отделения.Найти(Результат.Отделение, "Отделение")  = Неопределено
//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
						или (Не Результат.Проведен ) 
//конец изменений 
					Тогда
						Если НужноУдалятьРегистрацию  Тогда
							ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Результат.Ссылка);
						КонецЕсли;	
						ЗафиксироватьТранзакцию();
						РезВыгрузки = истина;
						возврат Неопределено;
						//возврат Истина;
					КонецЕсли;	
			ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
					Если Не Результат.Склад_НСИ_ПодключенКSolvo 
						или Узел.Склады.Найти(Результат.Склад,"Склад") = Неопределено
						//условия ниже не совсем идеальные т.к. должно передаваться по тз задания со статусом передано на склад
						//хотя могут быть изменения в плане доставке в части водителя, ТЭК которые по идее должны 
						//выгрузить. пока оставим так. С другой стороны если задание спланировано изменения не принимаются
						или Результат.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт  
						или Не ЗначениеЗаполнено(Результат.СтатусДокумента)
						или Результат.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен 
//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке 
						или (Не Результат.Проведен ) 
//конец изменений 
					Тогда
						Если НужноУдалятьРегистрацию  Тогда
							ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Результат.Ссылка);
						КонецЕсли;	
						ЗафиксироватьТранзакцию();
						РезВыгрузки = истина;
						возврат Неопределено;
					КонецЕсли;				
			ИначеЕсли ТипЗнчСсылки = Тип("СправочникСсылка.Номенклатура") Тогда
					Если НЕ Результат.ВидНоменклатуры_НСИ_ОбменССолво 
					    или Результат.ЭтоГруппа
					Тогда
							Если НужноУдалятьРегистрацию  Тогда
								ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Результат.Ссылка);
							КонецЕсли;	
							ЗафиксироватьТранзакцию();
							РезВыгрузки = истина;
							возврат Неопределено;
					КонецЕсли;
			ИначеЕсли ТипЗнчСсылки = Тип("СправочникСсылка.Контрагенты")  Тогда			
					Если Результат.ЭтоГруппа
					Тогда
							Если НужноУдалятьРегистрацию  Тогда
								ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Результат.Ссылка);
							КонецЕсли;	
							ЗафиксироватьТранзакцию();
							РезВыгрузки = истина;
							возврат Неопределено;
					КонецЕсли;				
			ИначеЕсли ТипЗнчСсылки = Тип("СправочникСсылка.Склады")  Тогда
					
			ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ПеремещениеТоваров")  Тогда				
					Если (Не Результат.СкладОтправитель_НСИ_ПодключенКSolvo и Не Результат.СкладПолучатель_НСИ_ПодключенКSolvo)
					  или (Узел.Склады.Найти(Результат.СкладОтправитель,"Склад")=Неопределено и Узел.Склады.Найти(Результат.СкладПолучатель,"Склад")=Неопределено)
					  или (Результат.Дата <  ДатаОтсечки)
					  или (Результат.СП_СтатусДокумента <>  Перечисления.СП_СтатусыПеремещенияТоваров.ПереданоНаСклад) 
					  или (Результат.Организация		<>  Узел.Организация ) 
					  или (Не Результат.Проведен ) 
					Тогда
							Если НужноУдалятьРегистрацию  Тогда
								ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Результат.Ссылка);
							КонецЕсли;	
							ЗафиксироватьТранзакцию();
							РезВыгрузки = истина;
							возврат Неопределено;
					КонецЕсли;				
			ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")  Тогда				
					Если (Не Результат.СкладОрдер_НСИ_ПодключенКSolvo)
					  или (Узел.Склады.Найти(Результат.СкладОрдер,"Склад")=Неопределено)
					  или (Результат.Дата <  ДатаОтсечки)
					  или (Результат.СП_СтатусДокумента <>  Перечисления.СП_СтатусыПоступленияТоваров.ПереданоНаСклад) 
					  или (Результат.Организация		<>  Узел.Организация ) 
					  или (Не Результат.Проведен ) 
					  или (НЕ Результат.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
					Тогда
							Если НужноУдалятьРегистрацию  Тогда
								ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Результат.Ссылка);
							КонецЕсли;	
							ЗафиксироватьТранзакцию();
							РезВыгрузки = истина;
							возврат Неопределено;
					КонецЕсли;				
			ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.СписаниеТоваров")  Тогда
				
					Если (Не Результат.Склад_НСИ_ПодключенКSolvo)
					  или (Узел.Склады.Найти(Результат.Склад,"Склад")=Неопределено)
					  или (Результат.Дата <  ДатаОтсечки)
					  или (Результат.ПР_СтатусПриходногоОрдера <>  Перечисления.СП_СтатусыПриходногоОрдераСолво.ПереданоНаСклад) 
					  или (Результат.Организация		<>  Узел.Организация ) 
					  или (Не Результат.Проведен ) 
					  или (НЕ Результат.ВидОперации = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция) 
					Тогда
							Если НужноУдалятьРегистрацию  Тогда
								ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Результат.Ссылка);
							КонецЕсли;	
							ЗафиксироватьТранзакцию();
							РезВыгрузки = истина;
							возврат Неопределено;
					КонецЕсли;				
			ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ТребованиеНакладная")  Тогда
				
					Если (Не Результат.Склад_НСИ_ПодключенКSolvo)
					  или (Узел.Склады.Найти(Результат.Склад,"Склад")=Неопределено)
					  или (Результат.Дата <  ДатаОтсечки)
					  или (Результат.СП_СтатусТребованияНакладной <> Перечисления.СП_СтатусыТребованияНакладной.ПереданНаСклад) 
					  или (Результат.Организация		<>  Узел.Организация ) 
					  или (Не Результат.Проведен ) 
					Тогда
							Если НужноУдалятьРегистрацию  Тогда
								ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Результат.Ссылка);
							КонецЕсли;	
							ЗафиксироватьТранзакцию();
							РезВыгрузки = истина;
							возврат Неопределено;
					КонецЕсли;				
						
			ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.СП_ЗаданиеНаСмену")  Тогда
					Если (Не Результат.Склад_НСИ_ПодключенКSolvo)
					  или (Узел.Склады.Найти(Результат.Склад,"Склад")=Неопределено)
					  или (Результат.Дата <  ДатаОтсечки)
					  или (Результат.СтатусДокумента <> Перечисления.СП_СтатусыЗаданияНаСмену.ПереданоНаСклад) 
					  или (Результат.Организация		<>  Узел.Организация ) 
					  или (Не Результат.Проведен ) 
					Тогда
							Если НужноУдалятьРегистрацию  Тогда
								ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Результат.Ссылка);
							КонецЕсли;	
							ЗафиксироватьТранзакцию();
							РезВыгрузки = истина;
							возврат Неопределено;
					КонецЕсли;							
			//начало изменений Ожиганов 21.07.2016 уменьшение вероятности возникновения конфликта блокировок при выгрузке
			ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику")  Тогда
					Если  (Не Результат.Склад_НСИ_ПодключенКSolvo)
					  или (Узел.Склады.Найти(Результат.Склад,"Склад")=Неопределено)
					  или (Результат.Дата <  ДатаОтсечки)
					  или (Результат.СП_СтатусДокумента  <> Перечисления.СП_СтатусыВозвратТоваровПоставщику.ПереданНаСклад) 
					  или (Результат.Организация		<>  Узел.Организация ) 
					  или (Не Результат.Проведен ) 
					Тогда
							Если НужноУдалятьРегистрацию  Тогда
								ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Результат.Ссылка);
							КонецЕсли;	
							ЗафиксироватьТранзакцию();
							РезВыгрузки = истина;
							возврат Неопределено;
						КонецЕсли;					
						
			ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ПР_Претензия")  Тогда
					Если  (Не Результат.Склад_НСИ_ПодключенКSolvo)
					  или (Узел.Склады.Найти(Результат.Склад,"Склад")=Неопределено)
					  или (Результат.Дата <  ДатаОтсечки)
					  или (Результат.СтатусПриходногоОрдера <> Перечисления.СП_СтатусыПриходногоОрдераСолво.ПереданоНаСклад) 
					  или (Результат.Организация		<>  Узел.Организация ) 
					  или (Не Результат.Проведен ) 
					  или (Не ТипЗнч(Результат.Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") и Не ТипЗнч(Результат.Накладная) = Тип("ДокументСсылка.КорректировкаРеализации"))
					Тогда
							Если НужноУдалятьРегистрацию  Тогда
								ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Результат.Ссылка);
							КонецЕсли;	
							ЗафиксироватьТранзакцию();
							РезВыгрузки = истина;
							возврат Неопределено;
					КонецЕсли;					
						
			ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.КомплектацияНоменклатуры")  Тогда
					Если  (Не Результат.Склад_НСИ_ПодключенКSolvo)
					  или (Узел.Склады.Найти(Результат.Склад,"Склад")=Неопределено)
					  или (Результат.Дата <  ДатаОтсечки)
					  или (Результат.СП_СтатусДокумента <> Перечисления.СП_СтатусыКомплектацииНоменклатуры.ПереданоНаСклад) 
					  или (Результат.ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры) 
					  или (Результат.Организация <>  Узел.Организация ) 
					  или (Не Результат.Проведен) 
					Тогда
							Если НужноУдалятьРегистрацию  Тогда
								ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Результат.Ссылка);
							КонецЕсли;	
							ЗафиксироватьТранзакцию();
							РезВыгрузки = истина;
							возврат Неопределено;
					КонецЕсли;					
						
			//конец изменений 
			КонецЕсли;
				
		КонецЕсли; //БезУсловий
			
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		КолВоНеудачныхПопыток = Неопределено;
		Если СтруктураПараметров.Свойство("КолВоНеудачныхПопыток") Тогда
			СтруктураПараметров.КолВоНеудачныхПопыток = СтруктураПараметров.КолВоНеудачныхПопыток+1;
		Иначе
			СтруктураПараметров.Вставить("КолВоНеудачныхПопыток",1);
		КонецЕслИ;	
		ОтменитьТранзакцию();
		#Если Клиент Тогда
			Сообщить("Не удалось прочитать данные  "+ВыбСсылка+". 
			|"+ОписаниеОшибки());
		#КонецЕсли
		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Ошибка,МетаСсылки,ВыбСсылка, "Не удалось прочитать данные "+ВыбСсылка+". "+ОписаниеОшибки());
		
		Если Не СтруктураПараметров.Свойство("ТаблНеВыгрОбъектов") Тогда
			СтруктураПараметров.Вставить("ТаблНеВыгрОбъектов",СоздатьТаблВыгрОбъектов());
		КонецЕсли;	
		
		ДобавитьИнформациюНеВыгрОбъекте(СтруктураПараметров.ТаблНеВыгрОбъектов,ВыбСсылка);
		
		СтруктураПараметров.Удалить("БезУсловий");
		
		РезВыгрузки = Ложь;
		возврат Неопределено;
		//возврат ложь;
	КонецПопытки;		
	
	СтруктураПараметров.Удалить("БезУсловий");
	
	возврат Результат;
	
КонецФункции	

Функция ВыбратьИзмененияПоУзлу(Узел,МетаОбъекта)
	//Узел, Узел.НомерОтправленного, Метаданные.Документы.СП_ЗаданиеНаПодбор
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Изменения.Ссылка
	                      |ИЗ
	                      |	"+МетаОбъекта.ПолноеИмя()+".Изменения КАК Изменения
	                      |ГДЕ
	                      |	Изменения.Узел = &Узел");
						  
	Запрос.УстановитьПараметр("Узел",Узел);
	
	возврат Запрос.Выполнить().Выбрать();
КонецФункции	

//конец изменений 