Процедура ПередЗаписьюОбъектаРегистрацияОбъектаИнформационнойБазыПередЗаписью(Источник, Отказ) Экспорт
	
	НужноРегистрироватьМестоСоздания = Источник.ЭтоНовый() 
		И ПараметрыСеанса.СохранятьИнформациюОМестеСозданияОбъектов;
	
	Источник.ДополнительныеСвойства.Вставить("НужноРегистрироватьМестоСоздания", НужноРегистрироватьМестоСоздания);
	
КонецПроцедуры

Процедура ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(СсылкаНаОбъект, УзелОбмена = Неопределено)
	
	НаборЗаписейРегистра = РегистрыСведений.ОбъектыИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Объект.Установить(СсылкаНаОбъект);
	
	СтрокаНабора = НаборЗаписейРегистра.Добавить();
	СтрокаНабора.Объект = СсылкаНаОбъект;
	СтрокаНабора.УзелОбмена = УзелОбмена;
	
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

Процедура ПриЗаписиОбъектаРегистрацияОбъектаИнформационнойБазыПриЗаписи(Источник, Отказ) Экспорт
	
	Если ПараметрыСеанса.ПроведениеДокументов Тогда
		возврат;
	КонецЕсли;	
			
	Если Источник.ОбменДанными.Загрузка ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.ПланыОбмена.МЗ_ОбменПролайт) Тогда
		Возврат;	
	КонецЕсли;
	
	ДатаЗапускаМолочногоПроизводства = Константы.МЗ_ДатаЗапускаМолочногоПроизводства.Получить();
	Если ДатаЗапускаМолочногоПроизводства = Дата(1,1,1) Тогда 
		//Если дата не установлена, то ничего не регистрируем
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеРегистрироватьВПланеОбмена") Тогда
		возврат;
	КонецЕсли;	
		
	мЭтоЗагрузкаИзПролайт = Ложь;
	
	Если Источник.ДополнительныеСвойства.Свойство("мЭтоЗагрузкаИзПролайт", мЭтоЗагрузкаИзПролайт) = Ложь Тогда			
		мЭтоЗагрузкаИзПролайт = Ложь;				
	КонецЕсли; 
			
	Если мЭтоЗагрузкаИзПролайт Тогда //документы измененные при загрузке из Пролайт, не регистрируем
		 возврат;			
	КонецЕсли; 
	
	ЭтоДокумент = НЕ Метаданные.Документы.Найти(Источник.Метаданные().Имя) = Неопределено;
	
	Если ЭтоДокумент Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
			Если Не Источник.Проведен Тогда
				Возврат;
			КонецЕсли;
			Если Не Источник.СП_СтатусДокумента = Перечисления.УЗ_СтатусыЗаказовПоставщикам.ПереданВСистему Тогда
				Возврат;
			КонецЕсли;
		//начало изменений Ожиганов А. 02.11.2017 66210 дополнение к выгрузки в пролайт. спецификации, задания на смену  
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СП_ЗаданиеНаСмену") Тогда
			Если Не Источник.Проведен Тогда
				Возврат;
			КонецЕсли;
		//конец изменений 
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
			//Если Источник.Дата < ДатаЗапускаМолочногоПроизводства Тогда
			//	Возврат;
			//КонецЕсли;
			Если Не Источник.УЗ_ОбменПролайт Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Если ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура") Тогда
			
			Если Источник.ЭтоГруппа Тогда				
				Возврат;				
			КонецЕсли;
			
			Если НЕ Источник.ВидНоменклатуры.НСИ_ОбменСПролайт Тогда
				
				Возврат;	
			КонецЕсли;
				
				
		ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Контрагенты") Тогда
				
			Если Источник.ЭтоГруппа Тогда				
				Возврат;				
			КонецЕсли; 
				
			Если НЕ Источник.НСИ_ОбменСПролайт Тогда
								
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Склады") Тогда
				
			Если Источник.ЭтоГруппа Тогда				
				Возврат;				
			КонецЕсли; 
				
			Если Не Источник.НСИ_ОбменСПролайт Тогда
					
				Возврат;
			КонецЕсли;
		//начало изменений Ожиганов А. 02.11.2017 66210 дополнение к выгрузки в пролайт. спецификации, задания на смену  			
		ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.СпецификацииНоменклатуры") Тогда
			Если Источник.ЭтоГруппа Тогда				
				Возврат;				
			КонецЕсли; 
		//конец изменений 	
		Иначе
			
			Возврат;
				
		КонецЕсли; 

	КонецЕсли;
	
	//Все объекты которые прошли, регистрируем изменения.
	//Дополнительных фильтров в обмене не накладывается.
	// "Приостановлен обмен" если установлено - то не регистрируются изменения
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МЗ_ОбменПролайт.Ссылка
	                      |ИЗ
	                      |	ПланОбмена.МЗ_ОбменПролайт КАК МЗ_ОбменПролайт
	                      |ГДЕ
	                      |	НЕ МЗ_ОбменПролайт.Ссылка = &Ссылка
						  |	И НЕ МЗ_ОбменПролайт.НеРегистрироватьИзменения");
						  
	Запрос.УстановитьПараметр("Ссылка",ПланыОбмена.МЗ_ОбменПролайт.ЭтотУзел());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Источник.Ссылка);
		
	КонецЦикла;
	
	НужноРегистрироватьМестоСоздания = Ложь;
	Источник.ДополнительныеСвойства.Свойство("НужноРегистрироватьМестоСоздания", НужноРегистрироватьМестоСоздания);
	
	Если НужноРегистрироватьМестосоздания <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка = Истина
		И ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель) Тогда
		
		// обмен с определенным узлом
		ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(Источник.Ссылка, Источник.ОбменДанными.Отправитель);
		
	Иначе
		
		// объект создан в этой информационной базе
		ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(Источник.Ссылка, Неопределено);
		
	КонецЕсли;
		
КонецПроцедуры

//Функция проверяет можно ли менять признак обмена с Пролайт в справочниках.
//Истина - если можно менять
//Ложь - менять нельзя.
//Сообщение об ошибке заполнения, формируем так же в этой функции
Функция ПроверкаВозможностиИзмененияПризнакаОбменасПролайт(Элемент) Экспорт
	
	ПроверкаПройдена = Истина;
	
	ДатаЗапускаМолочногоПроизводства = Константы.МЗ_ДатаЗапускаМолочногоПроизводства.Получить();
	Если ДатаЗапускаМолочногоПроизводства = Дата(1,1,1) Тогда 
		//Если дата не установлена, то не выполняем проверку
		Возврат ПроверкаПройдена;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СпрНоменклатура.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Номенклатура КАК СпрНоменклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Обороты(
		               |				&ДатаЗапускаМолочногоПроизводства,
		               |				,
		               |				,
		               |				ЗаказПоставщику.Дата >= &ДатаЗапускаМолочногоПроизводства
		               |					И ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику) КАК ЗаказыПоставщикамОбороты
		               |		ПО СпрНоменклатура.Ссылка = ЗаказыПоставщикамОбороты.Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки.Обороты(
		               |				&ДатаЗапускаМолочногоПроизводства,
		               |				,
		               |				,
		               |				ДокументЗакупки.Дата >= &ДатаЗапускаМолочногоПроизводства
		               |					И ДокументЗакупки ССЫЛКА Документ.ПоступлениеТоваровУслуг) КАК ЗакупкиОбороты
		               |		ПО СпрНоменклатура.Ссылка = ЗакупкиОбороты.Номенклатура
		               |ГДЕ
		               |	СпрНоменклатура.ВидНоменклатуры = &ВидНоменклатуры
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СпрНоменклатура.Ссылка
		               |
		               |ИМЕЮЩИЕ
		               |	(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикамОбороты.ЗаказПоставщику) + КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗакупкиОбороты.ДокументЗакупки)) > 0";
					   
		Запрос.УстановитьПараметр("ДатаЗапускаМолочногоПроизводства", НачалоДня(ДатаЗапускаМолочногоПроизводства));
		Запрос.УстановитьПараметр("ВидНоменклатуры", Элемент);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			//Значит есть документы
			ПроверкаПройдена = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Номенклатура") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СпрНоменклатура.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Номенклатура КАК СпрНоменклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Обороты(
		               |				&ДатаЗапускаМолочногоПроизводства,
		               |				,
		               |				,
		               |				ЗаказПоставщику.Дата >= &ДатаЗапускаМолочногоПроизводства
		               |					И ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику) КАК ЗаказыПоставщикамОбороты
		               |		ПО СпрНоменклатура.Ссылка = ЗаказыПоставщикамОбороты.Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки.Обороты(
		               |				&ДатаЗапускаМолочногоПроизводства,
		               |				,
		               |				,
		               |				ДокументЗакупки.Дата >= &ДатаЗапускаМолочногоПроизводства
		               |					И ДокументЗакупки ССЫЛКА Документ.ПоступлениеТоваровУслуг) КАК ЗакупкиОбороты
		               |		ПО СпрНоменклатура.Ссылка = ЗакупкиОбороты.Номенклатура
		               |ГДЕ
		               |	СпрНоменклатура.Ссылка = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СпрНоменклатура.Ссылка
		               |
		               |ИМЕЮЩИЕ
		               |	(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикамОбороты.ЗаказПоставщику) + КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗакупкиОбороты.ДокументЗакупки)) > 0";
					   
		Запрос.УстановитьПараметр("ДатаЗапускаМолочногоПроизводства", НачалоДня(ДатаЗапускаМолочногоПроизводства));
		Запрос.УстановитьПараметр("Ссылка", Элемент);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			//Значит есть документы
			ПроверкаПройдена = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СпрКонтрагенты.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК СпрКонтрагенты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Обороты(
		               |				&ДатаЗапускаМолочногоПроизводства,
		               |				,
		               |				,
		               |				ЗаказПоставщику.Дата >= &ДатаЗапускаМолочногоПроизводства
		               |					И ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику) КАК ЗаказыПоставщикамОбороты
		               |		ПО СпрКонтрагенты.Ссылка = ЗаказыПоставщикамОбороты.ДоговорКонтрагента.Владелец
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки.Обороты(
		               |				&ДатаЗапускаМолочногоПроизводства,
		               |				,
		               |				,
		               |				ДокументЗакупки.Дата >= &ДатаЗапускаМолочногоПроизводства
		               |					И ДокументЗакупки ССЫЛКА Документ.ПоступлениеТоваровУслуг) КАК ЗакупкиОбороты
		               |		ПО СпрКонтрагенты.Ссылка = ЗакупкиОбороты.Контрагент
		               |ГДЕ
		               |	СпрКонтрагенты.Ссылка = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СпрКонтрагенты.Ссылка
		               |
		               |ИМЕЮЩИЕ
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикамОбороты.ЗаказПоставщику) + КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗакупкиОбороты.ДокументЗакупки) > 0";
					   
		Запрос.УстановитьПараметр("ДатаЗапускаМолочногоПроизводства", НачалоДня(ДатаЗапускаМолочногоПроизводства));
		Запрос.УстановитьПараметр("Ссылка", Элемент);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			//Значит есть документы
			ПроверкаПройдена = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Склады") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СпрСклады.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Склады КАК СпрСклады
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Обороты(
		               |				&ДатаЗапускаМолочногоПроизводства,
		               |				,
		               |				,
		               |				ЗаказПоставщику.Дата >= &ДатаЗапускаМолочногоПроизводства
		               |					И ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику) КАК ЗаказыПоставщикамОбороты
		               |		ПО СпрСклады.Ссылка = ЗаказыПоставщикамОбороты.ЗаказПоставщику.Склад
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки.Обороты(
		               |				&ДатаЗапускаМолочногоПроизводства,
		               |				,
		               |				,
		               |				ДокументЗакупки.Дата >= &ДатаЗапускаМолочногоПроизводства
		               |					И ДокументЗакупки ССЫЛКА Документ.ПоступлениеТоваровУслуг) КАК ЗакупкиОбороты
		               |		ПО СпрСклады.Ссылка = ЗакупкиОбороты.ДокументЗакупки.СкладОрдер
		               |ГДЕ
		               |	СпрСклады.Ссылка = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СпрСклады.Ссылка
		               |
		               |ИМЕЮЩИЕ
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикамОбороты.ЗаказПоставщику) + КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗакупкиОбороты.ДокументЗакупки) > 0";
					   
		Запрос.УстановитьПараметр("ДатаЗапускаМолочногоПроизводства", НачалоДня(ДатаЗапускаМолочногоПроизводства));
		Запрос.УстановитьПараметр("Ссылка", Элемент);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			//Значит есть документы
			ПроверкаПройдена = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПроверкаПройдена Тогда
		ОбщегоНазначения.СообщитьОбОшибке("У элемента """ + СокрЛП(Элемент) + """ нельзя снимать признак обмена с Пролайт, так как есть документы с данными элементом выгруженные в Пролайт!",,"Изменение признака обмена с Пролайт",СтатусСообщения.Важное);
		Если РольДоступна("МЗ_Администратор") Тогда
			Возврат Истина;
		Иначе
			Возврат ПроверкаПройдена;
		КонецЕсли;
	Иначе
		Возврат ПроверкаПройдена;
	КонецЕсли;
		
КонецФункции

//Запускает обмен с Пролайт под определенным пользователем (обходной режим)
Процедура ЗапуститьОбходнойРежимОбменаПролайт() Экспорт
	#Если Клиент Тогда
		Если ИмяПользователя() = "ОбменПролайт" Тогда
			Для СчПовторов = 1 По 12 Цикл
				Попытка
					ВыполнитьОбменПролайт();
				Исключение
					Продолжить;
				КонецПопытки;
				Предупреждение("Пауза в обмене Пролайт", 60);
			КонецЦикла;
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

Процедура ВыполнятьРегламентныйОбменПролайт() Экспорт
	
	ВыполнитьОбменПролайт();	
	
КонецПроцедуры

//Настраивает соединение с Пролайт через ADO
Функция УстановитьСоединение(Узел) Экспорт
	
	Если Узел.ТестоваяВыгрузка Тогда	
		Возврат Истина;			
	КонецЕсли; 	
		
	ИмяДрайвера = Узел.ИмяДрайвера;
	//DSN = Узел.DSN;
	ИмяСервера = Узел.Сервер;
	ИмяБазы = Узел.БазаДанных;
	ИмяПользователя = Узел.Логин;
	Пароль = Узел.Пароль;
	//GATEWAY_ID = Узел.GATEWAY_ID;
		
	СтрокаСоединения = "Provider="+ИмяДрайвера+"; Data Source="+ИмяСервера+"; Initial Catalog="+ИмяБазы+"; User Id="+ИмяПользователя+"; Password="+Пароль+";";
	
	Соединение = Новый COMОбъект("ADODB.Connection"); 
	
	Соединение.ConnectionTimeOut = 10;
	Соединение.CommandTimeout = 20;
	Соединение.CursorLocation = 3;
	//Соединение.ConnectionString = СтрокаСоединения;
	Попытка
		Соединение.Open(СтрокаСоединения,ИмяПользователя,Пароль,-1);  
		Возврат Соединение;
	Исключение
		ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Предупреждение,,Узел, "Соединение с базой Пролайт для узла """+Узел.Код+""" не установлено:"+Символы.ПС+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Функция ВыбратьИзмененияПоУзлу(Узел,МетаОбъекта)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Изменения.Ссылка
	                      |ИЗ
	                      |	"+МетаОбъекта.ПолноеИмя()+".Изменения КАК Изменения
	                      |ГДЕ
	                      |	Изменения.Узел = &Узел");
						  
	Запрос.УстановитьПараметр("Узел",Узел);
	
	возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция СоздатьТаблВыгрОбъектов()
	ТаблВыгрОбъектов = Новый ТаблицаЗначений;
	ТаблВыгрОбъектов.Колонки.Добавить("Ссылка");
	ТаблВыгрОбъектов.Индексы.Добавить("Ссылка");
    возврат ТаблВыгрОбъектов;
КонецФункции

Процедура ВыполнитьОбменПролайт(НеЗагружать=Ложь) Экспорт
	РегистрироватьВЖурнале = Константы.МЗ_ВестиИсториюОбменаСПролайт.Получить();
	
	Если РегистрироватьВЖурнале Тогда
		ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация,,, "Запуск процедуры обмена данными с Пролайт");
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТаблНеВыгрОбъектов",СоздатьТаблВыгрОбъектов());
	СтруктураПараметров.Вставить("ТаблВыгрОбъектов",СоздатьТаблВыгрОбъектов());
	СтруктураПараметров.Вставить("КолВоНеудачныхПопыток",0);	
//начало изменений Ожиганов А. 12.09.2017 66210 дополнение к выгрузки в пролайт. спецификации, задания на смену 
	СтруктураПараметров.Вставить("ТаблВыгрСырияИГП",СоздатьТаблВыгрОбъектов());
//конец изменений 


	МаксКолвоНеудачныхПопыток = 4; // максимальное количество попыток неудачной блокировки данных на чтение
	
	МассивОтбрабатываемыхМета = Новый Массив;
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Справочники.Номенклатура);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Справочники.Контрагенты);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Справочники.Склады);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Документы.ЗаказПоставщику);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Документы.ПоступлениеТоваровУслуг);
//начало изменений Ожиганов А. 02.11.2017 66210 дополнение к выгрузки в пролайт. спецификации, задания на смену  
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Справочники.СпецификацииНоменклатуры);
	МассивОтбрабатываемыхМета.Добавить(Метаданные.Документы.СП_ЗаданиеНаСмену);
//конец изменений 
		
    ДатаОтсечки = Константы.МЗ_ДатаЗапускаМолочногоПроизводства.Получить();
	
	ЗапросКУзлам 	 = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	             	                |	МЗ_ОбменПролайт.Ссылка
	             	                |ИЗ
	             	                |	ПланОбмена.МЗ_ОбменПролайт КАК МЗ_ОбменПролайт
	             	                |ГДЕ
	             	                |	НЕ МЗ_ОбменПролайт.ПриостановитьОбмен
	             	                |	И НЕ МЗ_ОбменПролайт.ПометкаУдаления
	             	                |	И НЕ МЗ_ОбменПролайт.Ссылка = &ЭтотУзел
	             	                |
	             	                |СГРУППИРОВАТЬ ПО
	             	                |	МЗ_ОбменПролайт.Ссылка");
								  
	ЗапросКУзлам.УстановитьПараметр("ЭтотУзел", ПланыОбмена.МЗ_ОбменПролайт.ЭтотУзел()); 
	
	Узел = Неопределено;
								  
	ВыборкаПоУзлам = ЗапросКУзлам.Выполнить().Выбрать();
	Пока ВыборкаПоУзлам.Следующий() Цикл
		Узел = ВыборкаПоУзлам.Ссылка;
								
		Соединение = УстановитьСоединение(Узел);
		Если Соединение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПРГАДОКОМ = Неопределено;
		
		Если РегистрироватьВЖурнале Тогда
			ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация,,Узел, "Запуск обмена данными с узлом "+Узел.Код);
		КонецЕсли;
		
		Для м = 0 По МассивОтбрабатываемыхМета.Количество()-1 Цикл
			
			МетаОбъекта = МассивОтбрабатываемыхМета[м];
			Выборка     = ВыбратьИзмененияПоУзлу(Узел,МетаОбъекта);
			ИмяДока     = ?(ПустаяСтрока(МетаОбъекта.Синоним)="",МетаОбъекта.Имя,МетаОбъекта.Синоним);
			
			ПолнИмя = МетаОбъекта.ПолноеИмя();
			Если Лев(ПолнИмя,11) = "Справочник." Тогда
				ИнфоПоОбъекту = "Элемент справочника "+ИмяДока+" ";
				ИнфоПоСсылке  = "Элемент справочника "+ИмяДока+" ";
			Иначе
				ИнфоПоОбъекту = "Объект "+ИмяДока;
				ИнфоПоСсылке  = "Объект ";
			КонецЕсли;	
			
			Пока Выборка.Следующий() Цикл
				
				СтруктураПараметров.Вставить("ПолнаяВыгрузка",Ложь);
				
				Если ВыгрузитьТекущийОбъект(Соединение, Узел, Выборка.Ссылка, ПРГАДОКОМ, СтруктураПараметров) Тогда
					Если СтруктураПараметров.ПолнаяВыгрузка Тогда 
						Если РегистрироватьВЖурнале Тогда
							ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, Выборка.Ссылка.Метаданные(), Выборка.Ссылка,ИнфоПоОбъекту+" выгружен.");
						КонецЕсли;
						#Если Клиент Тогда
							Сообщить(ИнфоПоСсылке+Выборка.Ссылка+" выгружен.", СтатусСообщения.Информация);
						#КонецЕсли
					КонецЕсли;	
				Иначе
					#Если Клиент Тогда
						Сообщить(ИнфоПоСсылке + Выборка.Ссылка+" не выгружен.", СтатусСообщения.Внимание);
					#КонецЕсли
					ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Ошибка,Выборка.Ссылка.Метаданные(),Выборка.Ссылка,ИнфоПоОбъекту + " не выгружен.");
				КонецЕсли;
				
				Если СтруктураПараметров.КолВоНеудачныхПопыток >= МаксКолвоНеудачныхПопыток Тогда
					//выгрузим при следущем запуске, поскольку идет интенсивная работа с базой
					ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация ,,, "Выгрузка в Пролайт прервана. Число неудачных попыток превысило максимально допустимое количество.");
					возврат;
				КонецЕсли;
			КонецЦикла;			
		КонецЦикла; 
		
		Прервать; //Узел должен быть только один
	КонецЦикла;	 
	
	Если Не Узел = Неопределено И Не НеЗагружать Тогда 
	    Загрузка_Данных_ИзПролайт(Соединение, Узел);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьТекущийОбъект(Соединение, Узел, Объект, ПРГАДОКОМ, СтруктураПараметров, ВыгружатьСправочники = Истина) Экспорт 

	СтруктураПараметров = ?(СтруктураПараметров=Неопределено,Новый Структура,СтруктураПараметров);
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		возврат ВыгрузитьНоменклатуру(Соединение, Объект, Узел, ВыгружатьСправочники, ПРГАДОКОМ, СтруктураПараметров);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		возврат ВыгрузитьКонтрагента(Соединение, Объект, Узел, ВыгружатьСправочники, ПРГАДОКОМ, СтруктураПараметров);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Склады") Тогда
		
		возврат ВыгрузитьСклад(Соединение, Объект, Узел, ВыгружатьСправочники, ПРГАДОКОМ, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		возврат ВыгрузитьПоступлениеТоваровУслуг(Соединение, Объект, Узел, ПРГАДОКОМ, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		возврат ВыгрузитьЗаказПоставщику(Соединение, Объект, Узел, ПРГАДОКОМ, СтруктураПараметров);
	//начало изменений Ожиганов А. 12.09.2017 66210 дополнение к выгрузки в пролайт. спецификации, задания на смену 
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
		возврат ВыгрузитьСпецификацию(Соединение, Объект, Узел, ВыгружатьСправочники, ПРГАДОКОМ, СтруктураПараметров);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.СП_ЗаданиеНаСмену") Тогда
		возврат ВыгрузитьЗаданиеНаСмену(Соединение, Объект, Узел, ВыгружатьСправочники, ПРГАДОКОМ, СтруктураПараметров);
	//конец изменений 		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация ,,, "Не определены правала выгрузки для объекта " + СокрЛП(Объект));
	возврат Ложь;
КонецФункции

Функция ВыгрузитьНоменклатуру(Соединение, Знач Объект, Узел, Выгружать = Ложь, ПРГАДОКОМ, СтруктураПараметров = Неопределено) Экспорт
	Перем Блокировка, РезВыгрузки, НужноУдалятьРегистрацию;

	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат Истина;
	КонецЕсли;	

	ОбъектВыгрузки = ПрочитатьДанныеПоСсылке(Объект, Блокировка, РезВыгрузки, Узел, СтруктураПараметров, НужноУдалятьРегистрацию, Выгружать);
	Если ОбъектВыгрузки =  Неопределено тогда
		возврат РезВыгрузки;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбъектВыгрузки.Ссылка) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ОбъектВыгрузки.Код) И ПустаяСтрока(ОбъектВыгрузки.Наименование) Тогда		//Объект удалён
		Возврат Истина;
	КонецЕсли;
	
	УИД = СокрЛП(ОбъектВыгрузки.Ссылка.УникальныйИдентификатор());
	
	//Проверим, нужно ли выгружать объект или он уже есть
	//Выгружать - равно Ложь, когда выгружается по ссылке
	Если Не Выгружать Тогда
		ТекстЗапроса = "Exec sp_SKU_Check '"+УИД+"'";
		Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса, Узел, ПРГАДОКОМ);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Предупреждение,,ОбъектВыгрузки, "Не удалось проверить статус создан объект в пролайт или нет");
			Возврат Ложь;
		ИначеЕсли Рез = 1 Тогда
			//1 - значит в Пролайт есть, не будем выгружать
			Возврат Истина;
		КонецЕсли;		
	КонецЕсли;
	
	НомерПакета = 0; //Обмен с ПРолайт построен на sp - при записи пакета не нужны их номера
	
	//Обновляем справочник	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_sku_" + СокрЛП(ОбъектВыгрузки.Код));
		
	//Сформируем текст пакета
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcv_sku");
	ЗаписьXML.ЗаписатьАтрибут("uid"	, УИД);
	ЗаписьXML.ЗаписатьАтрибут("code", СокрЛП(ОбъектВыгрузки.Код));
	ЗаписьXML.ЗаписатьАтрибут("name", СокрЛП(ОбъектВыгрузки.Наименование));
		
	//конец изменений 
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();

		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Пролайт(Соединение, НомерПакета, "rcv_sku", ЗаписьXML, Узел, ОбъектВыгрузки.Ссылка, ПРГАДОКОМ);	
	КонецЕсли; 	
		
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов, ОбъектВыгрузки.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Справочник","Номенклатура",ОбъектВыгрузки.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка", Истина);
	КонецЕсли;	
		
	Возврат мВозрат;
	
КонецФункции

Функция ВыгрузитьКонтрагента(Соединение, Знач Объект, Узел, Выгружать = Ложь, ПРГАДОКОМ, СтруктураПараметров = Неопределено) Экспорт
	Перем Блокировка, РезВыгрузки, НужноУдалятьРегистрацию;

	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	ОбъектВыгрузки = ПрочитатьДанныеПоСсылке(Объект, Блокировка, РезВыгрузки, Узел, СтруктураПараметров, НужноУдалятьРегистрацию, Выгружать);
	Если ОбъектВыгрузки =  Неопределено тогда
		возврат РезВыгрузки;
	КонецЕсли;	
		
	Если НЕ ЗначениеЗаполнено(ОбъектВыгрузки.Ссылка) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ОбъектВыгрузки.Код) И ПустаяСтрока(ОбъектВыгрузки.Наименование) Тогда		//Объект удалён
		Возврат Истина;
	КонецЕсли;
	
	//Сначала выгружаем папку
	Если ЗначениеЗаполнено(ОбъектВыгрузки.Родитель) Тогда
		//Выгрузим папку
		мВозрат = ВыгрузитьГруппуКонтрагента(Соединение, ОбъектВыгрузки.Родитель, Узел, Выгружать, ПРГАДОКОМ, СтруктураПараметров);
		
		Если Не мВозрат Тогда
			//И не выгружаем контрагента
		    Возврат мВозрат;
		КонецЕсли;
	КонецЕсли;
		
	УИД = СокрЛП(ОбъектВыгрузки.Ссылка.УникальныйИдентификатор());
	
	//Проверим, нужно ли выгружать объект или он уже есть
	//Выгружать - равно Ложь, когда выгружается по ссылке
	Если Не Выгружать Тогда
		ТекстЗапроса = "Exec sp_Vendors_Check '"+УИД+"'";
		Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса, Узел, ПРГАДОКОМ);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Предупреждение,,ОбъектВыгрузки, "Не удалось проверить статус создан объект в пролайт или нет");
			Возврат Ложь;
		ИначеЕсли Рез = 1 Тогда
			//1 - значит в Пролайт есть, не будем выгружать
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	НомерПакета = 0; //Обмен с ПРолайт построен на sp - при записи пакета не нужны их номера
	
	//Обновляем справочник	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_vendor_" + СокрЛП(ОбъектВыгрузки.Код));
		
	//Сформируем текст пакета
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcv_vendor");
	ЗаписьXML.ЗаписатьАтрибут("uid"	, УИД);
	ЗаписьXML.ЗаписатьАтрибут("code", СокрЛП(ОбъектВыгрузки.Код));
	Если ЗначениеЗаполнено(ОбъектВыгрузки.Родитель) Тогда 
		ЗаписьXML.ЗаписатьАтрибут("uid_group", СокрЛП(ОбъектВыгрузки.Родитель.УникальныйИдентификатор()));
	Иначе
		ЗаписьXML.ЗаписатьАтрибут("uid_group", "");
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("name", СокрЛП(ОбъектВыгрузки.Наименование));
	ЗаписатьАтрибут_XML(ЗаписьXML, "long_name", СокрЛП(ОбъектВыгрузки.НаименованиеПолное));
	Если ПустаяСтрока(СокрЛП(ОбъектВыгрузки.Адрес)) Тогда
		//Адрес при выгрузке в Пролайт почему то обязателен, если адрес не указан - выгрзим что адрес не указан
		ЗаписатьАтрибут_XML(ЗаписьXML, "address", "Адрес не указан");
	Иначе
		ЗаписатьАтрибут_XML(ЗаписьXML, "address", СокрЛП(ОбъектВыгрузки.Адрес));
	КонецЕсли;
	ЗаписатьАтрибут_XML(ЗаписьXML, "phone", СокрЛП(ОбъектВыгрузки.Телефон));
	ЗаписатьАтрибут_XML(ЗаписьXML, "email", СокрЛП(ОбъектВыгрузки.Почта));	
	
	//конец изменений 
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();

		//ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов, ОбъектВыгрузки.Ссылка);

		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Пролайт(Соединение, НомерПакета, "rcv_vendor", ЗаписьXML, Узел, ОбъектВыгрузки.Ссылка, ПРГАДОКОМ);	
	КонецЕсли; 	
		
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов, ОбъектВыгрузки.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Справочник","Контрагенты",ОбъектВыгрузки.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;	
				
		СтруктураПараметров.Вставить("ПолнаяВыгрузка", Истина);
		
	КонецЕсли;	  	
			
	Возврат мВозрат;
	
КонецФункции

Функция ВыгрузитьГруппуКонтрагента(Соединение, Знач Объект, Узел, Выгружать = Ложь, ПРГАДОКОМ, СтруктураПараметров = Неопределено) Экспорт
	Перем Блокировка, РезВыгрузки, НужноУдалятьРегистрацию;

	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат Истина;
	КонецЕсли;	

	ОбъектВыгрузки = ПрочитатьДанныеПоСсылке(Объект, Блокировка, РезВыгрузки, Узел, СтруктураПараметров, НужноУдалятьРегистрацию, Выгружать);
	Если ОбъектВыгрузки =  Неопределено тогда
		возврат РезВыгрузки;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбъектВыгрузки.Ссылка) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ОбъектВыгрузки.Код) И ПустаяСтрока(ОбъектВыгрузки.Наименование) Тогда		//Объект удалён
		Возврат Истина;
	КонецЕсли;
	
	УИД = СокрЛП(ОбъектВыгрузки.Ссылка.УникальныйИдентификатор());
	
	//Проверим, нужно ли выгружать объект или он уже есть
	//Выгружать - равно Ложь, когда выгружается по ссылке
	Если Не Выгружать Тогда
		ТекстЗапроса = "Exec sp_VendorsGroup_Check '"+УИД+"'";
		Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса, Узел, ПРГАДОКОМ);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Предупреждение,,ОбъектВыгрузки, "Не удалось проверить статус создан объект в пролайт или нет");
			Возврат Ложь;
		ИначеЕсли Рез = 1 Тогда
			//1 - значит в Пролайт есть, не будем выгружать
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	НомерПакета = 0; //Обмен с ПРолайт построен на sp - при записи пакета не нужны их номера
	
	//Обновляем справочник	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_vendor_group_" + СокрЛП(ОбъектВыгрузки.Код));
		
	//Сформируем текст пакета
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcv_vendor_group");
	ЗаписьXML.ЗаписатьАтрибут("uid"	, УИД);
	ЗаписьXML.ЗаписатьАтрибут("code", СокрЛП(ОбъектВыгрузки.Код));
	ЗаписьXML.ЗаписатьАтрибут("name", СокрЛП(ОбъектВыгрузки.Наименование));
	
	
	//конец изменений 
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
        		
		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Пролайт(Соединение, НомерПакета, "rcv_vendor_group", ЗаписьXML, Узел, ОбъектВыгрузки.Ссылка, ПРГАДОКОМ);	
	КонецЕсли; 	
		
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов, ОбъектВыгрузки.Ссылка);
								
		СтруктураПараметров.Вставить("ПолнаяВыгрузка", Истина);
	КонецЕсли;	
		
	Возврат мВозрат;
	
КонецФункции

Функция ВыгрузитьСклад(Соединение, Знач Объект, Узел, Выгружать = Ложь, ПРГАДОКОМ, СтруктураПараметров = Неопределено) Экспорт
	Перем Блокировка, РезВыгрузки, НужноУдалятьРегистрацию;

	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат Истина;
	КонецЕсли;	

	ОбъектВыгрузки = ПрочитатьДанныеПоСсылке(Объект, Блокировка, РезВыгрузки, Узел, СтруктураПараметров, НужноУдалятьРегистрацию, Выгружать);
	Если ОбъектВыгрузки =  Неопределено тогда
		возврат РезВыгрузки;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбъектВыгрузки.Ссылка) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ОбъектВыгрузки.Код) И ПустаяСтрока(ОбъектВыгрузки.Наименование) Тогда		//Объект удалён
		Возврат Истина;
	КонецЕсли;
	
	УИД = СокрЛП(ОбъектВыгрузки.Ссылка.УникальныйИдентификатор());
	
	//Проверим, нужно ли выгружать объект или он уже есть
	//Выгружать - равно Ложь, когда выгружается по ссылке
	Если Не Выгружать Тогда
		ТекстЗапроса = "Exec sp_Warehouse_Check '"+УИД+"'";
		Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса, Узел, ПРГАДОКОМ);
		
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Предупреждение,,ОбъектВыгрузки, "Не удалось проверить статус создан объект в пролайт или нет");
			Возврат Ложь;
		ИначеЕсли Рез = 1 Тогда
			//1 - значит в Пролайт есть, не будем выгружать
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	НомерПакета = 0; //Обмен с ПРолайт построен на sp - при записи пакета не нужны их номера
	
	//Обновляем справочник	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_warehouse_" + СокрЛП(ОбъектВыгрузки.Код));
		
	//Сформируем текст пакета
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcv_warehouse");
	ЗаписьXML.ЗаписатьАтрибут("uid"	, УИД);
	ЗаписьXML.ЗаписатьАтрибут("code", СокрЛП(ОбъектВыгрузки.Код));
	ЗаписьXML.ЗаписатьАтрибут("name", СокрЛП(ОбъектВыгрузки.Наименование));
	 	
	//конец изменений 
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
        
		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Пролайт(Соединение, НомерПакета, "rcv_warehouse", ЗаписьXML, Узел, ОбъектВыгрузки.Ссылка, ПРГАДОКОМ);	
	КонецЕсли; 	
		
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов, ОбъектВыгрузки.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Справочник","Склады",ОбъектВыгрузки.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка", Истина);
	КонецЕсли;	
		
	Возврат мВозрат;
	
КонецФункции

Функция ВыгрузитьПоступлениеТоваровУслуг(Соединение, Объект, Узел, ПРГАДОКОМ, СтруктураПараметров)
	Перем Блокировка, РезВыгрузки,НужноУдалятьРегистрацию;
	
	ОбъектВыгрузки = ПрочитатьДанныеПоСсылке(Объект, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,Истина);
	Если ОбъектВыгрузки =  Неопределено тогда
		 возврат РезВыгрузки;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбъектВыгрузки) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ОбъектВыгрузки.Номер) И (ОбъектВыгрузки.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если ОбъектВыгрузки.УЗ_УИДТТН = 0 Тогда
		#Если Клиент Тогда
			Сообщить(СокрЛП(ОбъектВыгрузки.Ссылка)+" не выгружен. Не заполнен УИД ТТН из Пролайт", СтатусСообщения.Внимание);
		#КонецЕсли
		ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Ошибка, ОбъектВыгрузки.Ссылка.Метаданные(),ОбъектВыгрузки.Ссылка, СокрЛП(ОбъектВыгрузки.Ссылка) + " не выгружен. Не заполнен УИД ТТН из Пролайт!");	
		Возврат Ложь;
	КонецЕсли;
			
	НомерПакета = 0; //Обмен с ПРолайт построен на sp - при записи пакета не нужны их номера
	
	мУИД_Документа = СокрЛП(ОбъектВыгрузки.Ссылка.УникальныйИдентификатор());
		
	МассивСтрок = Новый Массив;
	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_rcv_ttn_status_" + Формат(мУИД_Документа, "ЧГ=0"));	
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcv_ttn_status");
	//m_ionov@mail.ru 06.02.2017
	//ЗаписьXML.ЗаписатьАтрибут("proleit_ttn_id"	, СокрЛП(ОбъектВыгрузки.УЗ_УИДТТН));
	//когда уид переделали на число забыли поменять выгрузку
	ЗаписьXML.ЗаписатьАтрибут("proleit_ttn_id"	, Формат(ОбъектВыгрузки.УЗ_УИДТТН,"ЧГ=0"));
	//------- m_ionov@mail.ru -------
	ЗаписьXML.ЗаписатьАтрибут("status"	, СокрЛП(ОбъектВыгрузки.Проведен));
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Пролайт(Соединение, НомерПакета, "rcv_ttn_status", ЗаписьXML, Узел, ОбъектВыгрузки.Ссылка, ПРГАДОКОМ);
	КонецЕсли; 
	
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов, ОбъектВыгрузки.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Документ", "ПоступлениеТоваровУслуг", ОбъектВыгрузки.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
	КонецЕсли;	
		
	Возврат мВозрат;
	
КонецФункции // () 

Функция ВыгрузитьЗаказПоставщику(Соединение, Объект, Узел, ПРГАДОКОМ, СтруктураПараметров)
	Перем Блокировка, РезВыгрузки,НужноУдалятьРегистрацию;
	
	ОбъектВыгрузки = ПрочитатьДанныеПоСсылке(Объект, Блокировка, РезВыгрузки , Узел ,СтруктураПараметров,НужноУдалятьРегистрацию,Истина);
	Если ОбъектВыгрузки =  Неопределено тогда
		 возврат РезВыгрузки;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбъектВыгрузки) Тогда
		Возврат Истина;
	ИначеЕсли ПустаяСтрока(ОбъектВыгрузки.Номер) И (ОбъектВыгрузки.Дата = Дата(1,1,1)) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	//1.1 Проверим наличие номенклатуры
	Для Каждого ТекСтрока Из ОбъектВыгрузки.Товары Цикл
		Если ВыгрузитьНоменклатуру(Соединение, ТекСтрока.Номенклатура, Узел, , ПРГАДОКОМ, СтруктураПараметров) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//1.2 Проверим наличие контрагента
	Если ЗначениеЗаполнено(ОбъектВыгрузки.Контрагент) Тогда
		Если ВыгрузитьКонтрагента(Соединение, ОбъектВыгрузки.Контрагент, Узел, , ПРГАДОКОМ, СтруктураПараметров) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//1.3 Проверим наличие склада
	Если ЗначениеЗаполнено(ОбъектВыгрузки.Склад) Тогда
		Если ВыгрузитьСклад(Соединение, ОбъектВыгрузки.Склад, Узел, , ПРГАДОКОМ, СтруктураПараметров) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//2. Получим номер пакета
	НомерПакета = 0; //Обмен с ПРолайт построен на sp - при записи пакета не нужны их номера
	
	мУИД_Документа = СокрЛП(ОбъектВыгрузки.Ссылка.УникальныйИдентификатор());
		
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "НомерПакета_rcv_zp_" + Формат(мУИД_Документа, "ЧГ=0"));	
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcv_zp");
	ЗаписьXML.ЗаписатьАтрибут("uid"			, СокрЛП(мУИД_Документа));
	ЗаписьXML.ЗаписатьАтрибут("number"	    , СокрЛП(ОбъектВыгрузки.Номер));
	
	ЗаписатьАтрибут_XML(ЗаписьXML, "vendor_id", СокрЛП(ОбъектВыгрузки.Контрагент.УникальныйИдентификатор()));
	ЗаписатьАтрибут_XML(ЗаписьXML, "warehouse_id", СокрЛП(ОбъектВыгрузки.Склад.УникальныйИдентификатор()));
	ЗаписатьАтрибут_XML(ЗаписьXML, "date", ОбъектВыгрузки.Дата);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcv_zp_details");
	
	//7. Добавим строки
	НомерСтроки = 0;
	ЕстьИзменения = Ложь;
	
	//Необходимо проставить УИД строк заказа пролайт
	ОбъектДляИзменения = ОбъектВыгрузки.Ссылка.ПолучитьОбъект();
	
	Для Каждого ТекСтрока Из ОбъектДляИзменения.Товары Цикл
		
		//++ Приводим количество к базовой единице измерения 
		Количество = ТекСтрока.Количество * ?(ТекСтрока.Коэффициент = 0, 1, ТекСтрока.Коэффициент);
		//Если количество равно 0 - то значит заказ отменяют. В Пролайт могут удалить заказ только с нулевым количеством 
				
		Если ТекСтрока.УИДЗаказаПролайт = 0 Тогда
			
			Если Количество > 0 Тогда
				//ТекСтрока.УИДЗаказаПролайт = "Выгружен";
				ТекСтрока.УИДЗаказаПролайт = -1; //означает что выгружен
				ЕстьИзменения = Истина;			
			Иначе
				//Если не выгружался или пришло обнуление заказа, то выгружаем только если количество больше нуля
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
				
		НомерСтроки = НомерСтроки + 1;
		ЗаписьXML.ЗаписатьНачалоЭлемента("rcv_zp_row");
		ЗаписьXML.ЗаписатьАтрибут("uid"	    , СокрЛП(ТекСтрока.УИДСтрокиЗаказа));
		ЗаписьXML.ЗаписатьАтрибут("sku_id"	, СокрЛП(ТекСтрока.Номенклатура.УникальныйИдентификатор()));
		ЗаписатьАтрибут_XML(ЗаписьXML, "date", ТекСтрока.ДатаПоставки);
		ЗаписатьАтрибут_XML(ЗаписьXML, "amount", Количество);
						
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Пролайт(Соединение, НомерПакета, "rcv_zp", ЗаписьXML, Узел, ОбъектВыгрузки.Ссылка, ПРГАДОКОМ);
	КонецЕсли; 
	
	Если мВозрат Тогда
		
		Если ЕстьИзменения Тогда
			ОбъектДляИзменения.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
			ОбъектДляИзменения.ДополнительныеСвойства.Вставить("НеРегистрироватьВПланеОбмена", Истина);
			
			Попытка
			
				ОбъектДляИзменения.Записать();	
			
			Исключение
			    #Если Клиент Тогда
					Сообщить(СокрЛП(ОбъектВыгрузки.Ссылка)+". Не удалось установить УИД ЗП Пролайт при выгрузке объекта"+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Внимание);
				#КонецЕсли
				ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Ошибка, ОбъектВыгрузки.Ссылка.Метаданные(),ОбъектВыгрузки.Ссылка, СокрЛП(ОбъектВыгрузки.Ссылка) + " Не удалось установить УИД ЗП Пролайт при выгрузке объекта"+Символы.ПС+ОписаниеОшибки());	
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;	
		
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов, ОбъектВыгрузки.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Документ", "ЗаказПоставщику", ОбъектВыгрузки.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка",Истина);
				
	КонецЕсли;	
		
	Возврат мВозрат;
	
КонецФункции //

//поскольку не понятно сколько времени может занять выгрузка 
//можно предположить что во время выгрузки кто-нибудь может изменить объект и должна последовать новая выгрузка
//для подстраховки увеличиваем номер сообщени и перед удалением регистрации проверяем были изменения или не было
//разнесем чтение и удаление регистрации
Процедура ПроверитьИУдалитьРегистрациюИзменений(Вид, Тип, Ссылка, Узел, АБлокировка, СтруктураПараметров)
	
	Попытка
		Если АБлокировка = Неопределено Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Вид+"."+Тип);
			ЭлементБлокировки.УстановитьЗначение("Ссылка",Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Иначе
			Блокировка = АБлокировка;
		КонецЕсли;	
		
		НачатьТранзакцию();
		
		Блокировка.Заблокировать();		 
		
		Запрос = Неопределено;
		ИмяСвойства  = "Запрос_"+Вид+"_"+Тип+"_ИзмененияПоСсылке";
		Если Не СтруктураПараметров.Свойство(ИмяСвойства,Запрос) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	Изменения.Ссылка,
			                      |	Изменения.НомерСообщения
			                      |ИЗ
								  |	"+Вид+"."+Тип+".Изменения КАК Изменения
			                      //|	""Документ.СП_ЗаданиеНаПодбор.Изменения КАК Изменения
			                      |ГДЕ
			                      |	Изменения.Узел = &Узел
			                      |	И Изменения.Ссылка = &Ссылка
			                      |	И НЕ Изменения.НомерСообщения ЕСТЬ NULL ");
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("Узел",Узел);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Ссылка);
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию(); // в следующий раз удалим
		КолВоНеудачныхПопыток = Неопределено;
		Если СтруктураПараметров.Свойство("КолВоНеудачныхПопыток") Тогда
			СтруктураПараметров.КолВоНеудачныхПопыток = СтруктураПараметров.КолВоНеудачныхПопыток+1;
		Иначе
			СтруктураПараметров.Вставить("КолВоНеудачныхПопыток",1);
		КонецЕслИ;	
		#Если Клиент Тогда
			Сообщить("Не удалось заблокировать  "+Ссылка+". 
			| Не удалось удалить регистрацию изменений.");
		#КонецЕсли
		ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Ошибка, Ссылка.Метаданные(), Ссылка, "Не удалось заблокировать  "+Ссылка+". Не удалось удалить регистрацию изменений.
		| "+ ОписаниеОшибки());		
	КонецПопытки;
	
КонецПроцедуры	

//Общая процедура по формирования пакета для записи в Пролайт
Функция ЗапишемДанные_в_Пролайт(Соединение, НомерПакета, Тэг, ЗаписьXML, Узел, ОбъектОшибки, ПРГАДОКОМ) Экспорт
    		
	ИсходнаяСтрока = ЗаписьXML.Закрыть();
				
	ОбщаяСтрока = "<?xml version=""1.0"" encoding=""utf-16""?>";
	
	ТекстЗапроса = "Exec sp_Message_Write N'"+Тэг+"', N'"+ОбщаяСтрока+ИсходнаяСтрока+"'";
	Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса,Узел, ПРГАДОКОМ);
	Если Рез = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Предупреждение,,ОбъектОшибки, "Не удалось добавить заголовок пакета");
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;

КонецФункции

//Формирует запись атрибута XML-файла, выполняет проверку на заполненность значения, приводит к требуемому формату значения
Процедура ЗаписатьАтрибут_XML(ЗаписьXML, Атрибут, Значение, ИсключительноеЧисло = Ложь) Экспорт
    		
	Если ТипЗнч(Значение) = Тип("Строка") И Не ПустаяСтрока(Значение) Тогда	
		
		Если НЕ Значение = "00000000-0000-0000-0000-000000000000" Тогда
		
			ЗаписьXML.ЗаписатьАтрибут(Атрибут, СокрЛП(Значение));
		
		КонецЕсли; 
					
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Если ИсключительноеЧисло Тогда
		     ЗаписьXML.ЗаписатьАтрибут(Атрибут, Формат(Значение, "ЧЦ=15; ЧДЦ=0; ЧГ=0; ЧН=0"));
		Иначе	
		     ЗаписьXML.ЗаписатьАтрибут(Атрибут, Формат(Значение, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0"));
		КонецЕсли; 
				
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		//ЗаписьXML.ЗаписатьАтрибут(Атрибут, Формат(Значение, "ДФ = 'dd-MM-yyyy HH:mm'"));
		ЗаписьXML.ЗаписатьАтрибут(Атрибут, Формат(Значение, "ДФ = 'yyyy-MM-ddTHH:mm:ss'"));
		
	Иначе//Если ЗначениеЗаполнено(Значение) Тогда
		//Атрибут нужно записать в любом случае, даже если он пустой
		ЗаписьXML.ЗаписатьАтрибут(Атрибут, СокрЛП(Значение));
		
	//Иначе
	//	
	//	Возврат;
		
	КонецЕсли; 
		
КонецПроцедуры

Функция ПроверитьВозможностьФормированияПакета(РезультатЗапроса, Узел) Экспорт

	Если НЕ РезультатЗапроса = Неопределено Тогда
		
		//Добавили для возможности выгрузки в файл, а не напрямую в Пролайт
		Если Узел = Неопределено И ТипЗнч(РезультатЗапроса) = Тип("Булево") Тогда
			Возврат 1;		
		ИначеЕсли Узел.ТестоваяВыгрузка Тогда
			Возврат 1;
		Иначе	
			Возврат РезультатЗапроса.EOF();
		КонецЕсли; 
			
	КонецЕсли; 	

КонецФункции //

Функция СоздадимОбъектДляЗаписиXML(Узел, ИмяФайла) Экспорт 
	
	ЗаписьXML = Новый ЗаписьXML;
	Если Узел.ТестоваяВыгрузка Тогда
		ЗаписьXML.ОткрытьФайл(Узел.КаталогДляТестовойВыгрузки + СокрЛП(ИмяФайла) + ".xml", "utf-16"); //KOI8-R	
	Иначе	
		ЗаписьXML.УстановитьСтроку("utf-16");	
	КонецЕсли; 
	
	Возврат ЗаписьXML;

КонецФункции // ()

Процедура ДобавитьИнформациюНЕВыгрОбъекте(ТаблВыгрОбъектов,Ссылка)
	НС = ТаблВыгрОбъектов.Добавить();
	НС.Ссылка = Ссылка;
КонецПроцедуры

Процедура ДобавитьИнформациюВыгрОбъекте(ТаблВыгрОбъектов,Ссылка)
	НС = ТаблВыгрОбъектов.Добавить();
	НС.Ссылка = Ссылка;
КонецПроцедуры

Функция ПрочитатьДанныеПоСсылке(ВыбСсылка, Блокировка, РезВыгрузки , Узел , СтруктураПараметров, НужноУдалятьРегистрацию, ИзменятьРегистрациюСсылки)
	
	Результат 	 = Неопределено;
	РезВыгрузки  = Ложь;
	
	ДатаОтсечки = Константы.МЗ_ДатаЗапускаМолочногоПроизводства.Получить();	
		
	Если Не ЗначениеЗаполнено(ВыбСсылка) Тогда
		РезВыгрузки   = Истина; // для совместимости со старым алгоритмом
		возврат Результат;
	КонецЕсли;
	
	СтруктураПараметров = ?(СтруктураПараметров = Неопределено, Новый Структура, СтруктураПараметров);
	СтруктураПараметров.Вставить("ПолнаяВыгрузка", Ложь);
	
	БезУсловий = СтруктураПараметров.Свойство("БезУсловий");
		
	Если Не СтруктураПараметров.Свойство("ТаблВыгрОбъектов") Тогда
		СтруктураПараметров.Вставить("ТаблВыгрОбъектов", СоздатьТаблВыгрОбъектов());
	КонецЕсли;	
		
	Если СтруктураПараметров.ТаблВыгрОбъектов.Найти(ВыбСсылка, "Ссылка") <> Неопределено Тогда
		РезВыгрузки  = Истина;
		
		Если ТипЗнч(ВыбСсылка) = Тип("СправочникСсылка.Контрагенты")
			И ВыбСсылка.ЭтоГруппа Тогда
			//Значит выгружаем родителя
			СтруктураПараметров.Вставить("ПолнаяВыгрузка", Истина);
		КонецЕсли;
		возврат Результат;
	КонецЕсли;	
	
	НужноУдалятьРегистрацию = Ложь;
	//
	Попытка
				
		МетаСсылки    = ВыбСсылка.Метаданные();
		ПолнИмя       = МетаСсылки.ПолноеИмя();
		ТипЗнчСсылки  = ТипЗнч(ВыбСсылка);
		
	    Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить(ПолнИмя);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыбСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		НачатьТранзакцию();
		
		Блокировка.Заблокировать();
		
		Если ТипЗнчСсылки = Тип("СправочникСсылка.Номенклатура") Тогда
			Результат = ПолучитьВСтруктуреНоменклатуру(ВыбСсылка,СтруктураПараметров);
		ИначеЕсли ТипЗнчСсылки = Тип("СправочникСсылка.Склады") Тогда
			Результат = ПолучитьВСтруктуреСклад(ВыбСсылка,СтруктураПараметров);
		ИначеЕсли ТипЗнчСсылки = Тип("СправочникСсылка.Контрагенты") Тогда
			Если ВыбСсылка.ЭтоГруппа Тогда 
				Результат = ПолучитьВСтруктуреГруппаКонтрагента(ВыбСсылка,СтруктураПараметров);
				БезУсловий = Истина;
			Иначе
				Результат = ПолучитьВСтруктуреКонтрагента(ВыбСсылка,СтруктураПараметров);
			КонецЕсли;	
		ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Результат = ПолучитьВСтруктуреЗаказПоставщику(ВыбСсылка,СтруктураПараметров);	
		ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Результат = ПолучитьВСтруктуреПоступлениеТоваровУслуг(ВыбСсылка,СтруктураПараметров);
		//начало изменений Ожиганов А. 11.09.2017 66210 дополнение к выгрузки в пролайт. спецификации, задания на смену 
		ИначеЕсли ТипЗнчСсылки = Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
			Результат = ПолучитьВСтруктуреСпецификацию(ВыбСсылка,СтруктураПараметров);
		ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.СП_ЗаданиеНаСмену") Тогда
			Результат = ПолучитьВСтруктуреЗаданиенаСмену(ВыбСсылка,СтруктураПараметров);
		//конец изменений 
		Иначе
			вызватьисключение "Незвестный тип ссылки в функции ПрочитатьДанныеПоСсылке. Значение выбссылки " + ВыбСсылка;
		КонецЕсли;	
			
		Если Результат =  Неопределено Тогда 
			ЗафиксироватьТранзакцию();
			РезВыгрузки = Истина;
			возврат Результат;
		КонецЕсли;	
				
		Если ИзменятьРегистрациюСсылки Тогда
			ВыборкаПоРегИзменений = ПланыОбмена.ВыбратьИзменения(Узел, 12, Результат.Ссылка); // пометим в таблице изменений нашу ссылку
			НужноУдалятьРегистрацию = ВыборкаПоРегИзменений.Следующий();
			ВыборкаПоПлану = Неопределено;
		КонецЕсли;	
		
		Если Не БезУсловий  Тогда
			//проверка ревизитов определяющих будет ли дальнейшая выгрузка
			Если ТипЗнчСсылки = Тип("СправочникСсылка.Номенклатура") Тогда
				Если НЕ Результат.ВидНоменклатуры_НСИ_ОбменСПролайт 
					или Результат.ЭтоГруппа	Тогда
					Если НужноУдалятьРегистрацию  Тогда
						ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Результат.Ссылка);
					КонецЕсли;	
					ЗафиксироватьТранзакцию();
					РезВыгрузки = истина;
					возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипЗнчСсылки = Тип("СправочникСсылка.Контрагенты")  Тогда			
				Если Результат.ЭтоГруппа ИЛИ Не Результат.НСИ_ОбменСПролайт Тогда
					Если НужноУдалятьРегистрацию Тогда
						ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Результат.Ссылка);
					КонецЕсли;	
					ЗафиксироватьТранзакцию();
					РезВыгрузки = истина;
					возврат Неопределено;
				КонецЕсли;				
			ИначеЕсли ТипЗнчСсылки = Тип("СправочникСсылка.Склады")  Тогда
				Если Результат.ЭтоГруппа ИЛИ Не Результат.НСИ_ОбменСПролайт Тогда
					Если НужноУдалятьРегистрацию Тогда
						ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Результат.Ссылка);
					КонецЕсли;	
					ЗафиксироватьТранзакцию();
					РезВыгрузки = истина;
					возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ЗаказПоставщику")  Тогда				
				Если (Результат.Дата <  ДатаОтсечки)
					или (Результат.СП_СтатусДокумента <> Перечисления.УЗ_СтатусыЗаказовПоставщикам.ПереданВСистему) 
					или (Не Результат.Проведен ) Тогда
					Если НужноУдалятьРегистрацию  Тогда
						ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Результат.Ссылка);
					КонецЕсли;	
					ЗафиксироватьТранзакцию();
					РезВыгрузки = истина;
					возврат Неопределено;
				КонецЕсли;				
			ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")  Тогда	
				Если Не Результат.УЗ_ОбменПролайт Тогда
					Если НужноУдалятьРегистрацию  Тогда
						ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Результат.Ссылка);
					КонецЕсли;	
					ЗафиксироватьТранзакцию();
					РезВыгрузки = истина;
					возврат Неопределено;
				КонецЕсли;
			//начало изменений Ожиганов А. 11.09.2017 66210 дополнение к выгрузки в пролайт. спецификации, задания на смену 
			ИначеЕсли ТипЗнчСсылки = Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
					Если Результат.ЭтоГруппа или Результат.ПометкаУдаления Тогда
						Если НужноУдалятьРегистрацию  Тогда
							ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Результат.Ссылка);
						КонецЕсли;	
						ЗафиксироватьТранзакцию();
						РезВыгрузки = истина;
						возврат Неопределено;
					КонецЕсли;
			ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.СП_ЗаданиеНаСмену") Тогда
					Если Не Результат.Проведен Тогда
						Если НужноУдалятьРегистрацию  Тогда
							ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Результат.Ссылка);
						КонецЕсли;	
						ЗафиксироватьТранзакцию();
						РезВыгрузки = истина;
						возврат Неопределено;
					КонецЕсли;
			//конец изменений 
			КонецЕсли;				
		КонецЕсли; //БезУсловий
			
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		КолВоНеудачныхПопыток = Неопределено;
		Если СтруктураПараметров.Свойство("КолВоНеудачныхПопыток") Тогда
			СтруктураПараметров.КолВоНеудачныхПопыток = СтруктураПараметров.КолВоНеудачныхПопыток+1;
		Иначе
			СтруктураПараметров.Вставить("КолВоНеудачныхПопыток",1);
		КонецЕслИ;	
		ОтменитьТранзакцию();
		#Если Клиент Тогда
			Сообщить("Не удалось прочитать данные  "+ВыбСсылка+". 
			|"+ОписаниеОшибки());
		#КонецЕсли
		ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Ошибка,МетаСсылки,ВыбСсылка, "Не удалось прочитать данные "+ВыбСсылка+". "+ОписаниеОшибки());
		
		Если Не СтруктураПараметров.Свойство("ТаблНеВыгрОбъектов") Тогда
			СтруктураПараметров.Вставить("ТаблНеВыгрОбъектов",СоздатьТаблВыгрОбъектов());
		КонецЕсли;	
		
		ДобавитьИнформациюНеВыгрОбъекте(СтруктураПараметров.ТаблНеВыгрОбъектов, ВыбСсылка);
		
		СтруктураПараметров.Удалить("БезУсловий");
		
		РезВыгрузки = Ложь;
		возврат Неопределено;
	КонецПопытки;		
	
	СтруктураПараметров.Удалить("БезУсловий");
	
	возврат Результат;
	
КонецФункции

Функция ПолучитьВСтруктуреНоменклатуру(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_Спр_Номенклатура_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Номенклатура.Ссылка,
		                      |	Номенклатура.Код,
		                      |	Номенклатура.Наименование,
		                      |	Номенклатура.НаименованиеПолное,
		                      |	Номенклатура.СрокГодности,
		                      |	ПРЕДСТАВЛЕНИЕ(Номенклатура.ЕдиницаИзмеренияМест) КАК ЕдиницаИзмеренияМест,
		                      |	ПРЕДСТАВЛЕНИЕ(Номенклатура.ЕдиницаХраненияОстатков) КАК ЕдиницаХраненияОстатков,
		                      //|	ЕСТЬNULL(Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код, """") КАК ЕдиницаХраненияОстатков_ЕдиницаПоКлассификатору_Код,
		                      |	ЕСТЬNULL(Номенклатура.ВидНоменклатуры.НСИ_ОбменСПролайт, ЛОЖЬ) КАК ВидНоменклатуры_НСИ_ОбменСПролайт,
		                      |	Номенклатура.ЭтоГруппа
		                      |ИЗ
		                      |	Справочник.Номенклатура КАК Номенклатура
		                      |ГДЕ
		                      |	Номенклатура.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	МассПакетов  = Новый Массив;
	МассПакетов.Добавить(Запрос.Выполнить());
	
	возврат ПреобразоватьМассПакетовВСтруктуру(МассПакетов);
	
КонецФункции

Функция ПолучитьВСтруктуреСклад(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_Спр_Склады_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Склады.Ссылка,
		                      |	Склады.Код,
		                      |	Склады.Наименование,
							  |	Склады.ЭтоГруппа,
		                      |	Склады.НСИ_ОбменСПролайт
		                      |ИЗ
		                      |	Справочник.Склады КАК Склады
		                      |ГДЕ
		                      |	Склады.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассПакетов  = Новый Массив;
	МассПакетов.Добавить(Запрос.Выполнить());
	
	возврат ПреобразоватьМассПакетовВСтруктуру(МассПакетов);
	
КонецФункции

Функция ПолучитьВСтруктуреКонтрагента(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_Спр_Контрагенты_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Контрагенты.Ссылка,
		                      |	Контрагенты.Код,
		                      |	Контрагенты.Наименование,
		                      |	Контрагенты.НСИ_ОбменСПролайт,
		                      |	ЕСТЬNULL(КонтактнаяИнформацияАдрес.Представление, """") КАК Адрес,
		                      |	ЕСТЬNULL(КонтактнаяИнформацияТелефон.Представление, """") КАК Телефон,
		                      |	ЕСТЬNULL(КонтактнаяИнформацияПочта.Представление, """") КАК Почта,
		                      |	Контрагенты.НаименованиеПолное,
		                      |	Контрагенты.Родитель,
							  |	Контрагенты.ЭтоГруппа
		                      |ИЗ
		                      |	Справочник.Контрагенты КАК Контрагенты
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияАдрес
		                      |		ПО Контрагенты.Ссылка = КонтактнаяИнформацияАдрес.Объект
		                      |			И (КонтактнаяИнформацияАдрес.Вид = &Адрес)
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
		                      |		ПО Контрагенты.Ссылка = КонтактнаяИнформацияТелефон.Объект
		                      |			И (КонтактнаяИнформацияТелефон.Вид = &Телефон)
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияПочта
		                      |		ПО Контрагенты.Ссылка = КонтактнаяИнформацияПочта.Объект
		                      |			И (КонтактнаяИнформацияПочта.Вид = &Почта)
		                      |ГДЕ
		                      |	Контрагенты.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Адрес", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Запрос.УстановитьПараметр("Телефон", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	Запрос.УстановитьПараметр("Почта", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
		
	МассПакетов  = Новый Массив;
	МассПакетов.Добавить(Запрос.Выполнить());
	
	возврат ПреобразоватьМассПакетовВСтруктуру(МассПакетов);
	
КонецФункции

Функция ПолучитьВСтруктуреГруппаКонтрагента(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	
	ИмяСвойства = "Запрос_Спр_ГруппаКонтрагенты_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Контрагенты.Ссылка,
		                      |	Контрагенты.Код,
		                      |	Контрагенты.Наименование,
							  |	Контрагенты.ЭтоГруппа
							  //|	ЛОЖЬ КАК НСИ_ОбменСПролайт
		                      |ИЗ
		                      |	Справочник.Контрагенты КАК Контрагенты
		                      |ГДЕ
		                      |	Контрагенты.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассПакетов  = Новый Массив;
	МассПакетов.Добавить(Запрос.Выполнить());
	
	возврат ПреобразоватьМассПакетовВСтруктуру(МассПакетов);
	
КонецФункции

Функция ПолучитьВСтруктуреПоступлениеТоваровУслуг(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_ПоступлениеТоваровУслуг_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПоступлениеТоваровУслуг.Ссылка,
		                      |	ВЫБОР
		                      |		КОГДА ПоступлениеТоваровУслуг.Проведен
		                      |			ТОГДА 1
		                      |		ИНАЧЕ 0
		                      |	КОНЕЦ КАК Проведен,
		                      |	ПоступлениеТоваровУслуг.УЗ_УИДТТН,
		                      |	ПоступлениеТоваровУслуг.УЗ_ОбменПролайт,
		                      |	ПоступлениеТоваровУслуг.Номер,
		                      |	ПоступлениеТоваровУслуг.Дата
		                      |ИЗ
		                      |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		                      |ГДЕ
		                      |	ПоступлениеТоваровУслуг.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
	МассПакетов  = Новый Массив;
	МассПакетов.Добавить(Запрос.Выполнить());
	
	возврат ПреобразоватьМассПакетовВСтруктуру(МассПакетов);
	
КонецФункции

Функция ПолучитьВСтруктуреЗаказПоставщику(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_ЗаказПоставщику_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЗаказПоставщику.Ссылка,
		                      |	ЗаказПоставщику.Организация,
		                      |	ЗаказПоставщику.Проведен,
		                      |	ЗаказПоставщику.Номер,
		                      |	ЗаказПоставщику.Дата,
		                      |	ЗаказПоставщику.СП_СтатусДокумента,
		                      |	ПРЕДСТАВЛЕНИЕ(ЗаказПоставщику.Ответственный) КАК Ответственный,
		                      |	ПОДСТРОКА(ЗаказПоставщику.Комментарий, 1, 180) КАК Комментарий,
		                      |	ЗаказПоставщику.Контрагент,
		                      |	ЗаказПоставщику.Склад,
		                      |	ЗаказПоставщику.ВидОперации
		                      |ИЗ
		                      |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		                      |ГДЕ
		                      |	ЗаказПоставщику.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ЗаказПоставщикуТовары.НомерСтроки,
		                      |	ЗаказПоставщикуТовары.Номенклатура,
		                      |	ЗаказПоставщикуТовары.Количество,
		                      |	ЗаказПоставщикуТовары.Коэффициент,
		                      |	ЗаказПоставщикуТовары.ДатаПоставки,
		                      |	ЗаказПоставщикуТовары.УИДСтрокиЗаказа,
		                      |	ЗаказПоставщикуТовары.УИДЗаказаПролайт
		                      |ИЗ
		                      |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		                      |ГДЕ
		                      |	ЗаказПоставщикуТовары.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Запрос.ВыполнитьПакет(), "Товары");
	
КонецФункции

Функция ПреобразоватьМассПакетовВСтруктуру(МассПакетов,ИмяТабЧасти1=Неопределено,ИмяТабЧасти2=Неопределено,ИмяТабЧасти3=Неопределено) 
	
	Результат = Неопределено;
	
	Для к = 0 По МассПакетов.Количество() -1 Цикл
		Если к = 0 Тогда
			РезЗапроса = МассПакетов[к];
			Если РезЗапроса.Пустой() Тогда
				возврат Неопределено; // документа нет в базе 
			иначе
				Выборка = РезЗапроса.Выбрать();
				Если Выборка.Следующий() Тогда
					 Результат = Новый Структура;
					 Для Каждого ТекКолонка из РезЗапроса.Колонки Цикл
						 Результат.Вставить(ТекКолонка.Имя,Выборка[ТекКолонка.Имя]);
					 КонецЦикла; 
				Иначе
					возврат Неопределено; // документа нет в базе 
				КонецЕсли;	
			КонецЕсли;	
		ИначеЕсли к = 1 Тогда
			    Результат.Вставить(ИмяТабЧасти1,МассПакетов[к].Выгрузить());
		ИначеЕсли к = 2 Тогда
				Результат.Вставить(ИмяТабЧасти2,МассПакетов[к].Выгрузить());
		ИначеЕсли к = 3 Тогда
				Результат.Вставить(ИмяТабЧасти3,МассПакетов[к].Выгрузить());
		иначе
			вызватьисключение "неверное количество пакетов в запросе";
		КонецЕсли;	
	КонецЦикла;	
	
	
	возврат Результат;
	
КонецФункции

Функция ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса,Узел, ПРГАДоДБ) Экспорт
	
	Если НЕ Узел = Неопределено Тогда		
		Если Узел.ТестоваяВыгрузка Тогда		
			Сообщить(ТекстЗапроса);
			возврат Истина;
		КонецЕсли; 	
	КонецЕсли; 
		
	Если Соединение = Неопределено Тогда
		Если Узел <> Неопределено Тогда
			Соединение = УстановитьСоединение(Узел);
		КонецЕсли;
		Если Соединение = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация,,, "Потеряно соединение с базой Пролайт");
			Возврат Неопределено;
		КонецЕсли;
		ПРГАДоДБ = Неопределено;
	КонецЕсли;
		
	Если ПРГАДоДБ = Неопределено Тогда
		SQL_команда = Новый COMОбъект("ADODB.Command"); 	//Команда выполняемая на Скуль
		SQL_команда.ActiveConnection = Соединение;
		SQL_команда.CommandText = ТекстЗапроса;
		SQL_команда.CommandType = 1;	//Текстовый запрос
		ПРГАДоДБ = SQL_команда;
	Иначе
		SQL_команда = ПРГАДоДБ;
		SQL_команда.CommandText = ТекстЗапроса;
		SQL_команда.CommandType = 1;	//Текстовый запрос
	КонецЕсли;	
			
	Попытка
		Рез = SQL_команда.Execute();
		Возврат Рез;
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
		ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Ошибка,,Узел,ТекстЗапроса + " не выполнен. " + ОписаниеОшибки());
		Рез = Неопределено;
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Процедура Загрузка_Данных_ИзПролайт(Соединение, Узел) Экспорт
	
	РегистрироватьВЖурнале = Константы.МЗ_ВестиИсториюОбменаСПролайт.Получить();
	
	Если РегистрироватьВЖурнале Тогда
		ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация,,Узел, "Начало чтения статусов документов из базы Пролайт");
	КонецЕсли;
	
	ПРГАДОДБ = Неопределено;
	
	// Получим необработанные пакеты из таблицы заголовков
	ТекстЗапроса = "Exec sp_Message_Read";
	Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса, Узел, ПРГАДоДБ); 
	Если Рез = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПРГТестЧтение = Узел.ТестоваяВыгрузка;
	
	ТаблицаПакетов = Новый ТаблицаЗначений;
	ТаблицаПакетов.Колонки.Добавить("НомерПакета");
	ТаблицаПакетов.Колонки.Добавить("Данные", Новый ОписаниеТипов("Строка"));
	//ТаблицаПакетов.Колонки.Добавить("ДатаИзменения"); //Пока не нашел где используется
	ТаблицаПакетов.Колонки.Добавить("ДатаСтарта", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Если НЕ Узел = Неопределено И Узел.ТестоваяВыгрузка Тогда
		//Заполним таблицу пакетов из папки
		КаталогОбмена = СокрЛП(Узел.КаталогДляТестовойВыгрузки);
		//Если Прав(КаталогОбмена, 1) = "\" Тогда
		//	КаталогОбмена = Лев(КаталогОбмена, СтрДлина(КаталогОбмена) - 1);
		//КонецЕсли;
		//КаталогОбмена = СтрЗаменить(КаталогОбмена, "\", "/");
		ПроверкаНаличияКаталога = ПроцедурыОбменаДанными.ПроверитьНаличиеКаталога(КаталогОбмена, Истина);
		Если НЕ ПроверкаНаличияКаталога Тогда
			ОбщегоНазначения.Сообщение("Не найден каталог обмена " + КаталогОбмена);
			Возврат;
		КонецЕсли;
		МассивФайлов = НайтиФайлы(КаталогОбмена, "*.xml");
		НомПакета = 1;
		Для Каждого НайденныйФайл Из МассивФайлов Цикл
			ФайлXML = Новый ТекстовыйДокумент;
			ФайлXML.Прочитать(НайденныйФайл.ПолноеИмя);
			
			НовСтрока = ТаблицаПакетов.Добавить();
			НовСтрока.НомерПакета = НомПакета;
			НовСтрока.Данные = ФайлXML.ПолучитьТекст();
			НовСтрока.ДатаСтарта = ТекущаяДата();
			
			НомПакета = НомПакета + 1;
		КонецЦикла;
	Иначе
		ПРГСч = 0; 
		Пока ПроверитьВозможностьФормированияПакета(Рез, Узел) = 0 Цикл
			ПРГСч = ПРГСч+1;
			Если ПРГСч % 100 = 0 Тогда
				Если РегистрироватьВЖурнале Тогда
					ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация,,Узел, "Считано пакетов "+Сокрлп(ПРГСч));
				КонецЕсли;
				#Если Клиент Тогда
					Сообщить("Считано пакетов "+Сокрлп(ПРГСч));
				#КонецЕсли
			КонецЕсли;
			НовСтрока = ТаблицаПакетов.Добавить();
			НовСтрока.НомерПакета = Рез.Fields("id").Value;
			НовСтрока.Данные = СокрЛП(Рез.Fields("data").Value);
			НовСтрока.ДатаСтарта = Рез.Fields("CreateDate").Value;
			
			Рез.MoveNext(); 
		КонецЦикла;
	КонецЕсли;
		
	Если РегистрироватьВЖурнале Тогда
		ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация,,Узел, "Считано пакетов "+Сокрлп(ТаблицаПакетов.Количество())+" из "+СокрЛП(ТаблицаПакетов.Количество()));
	КонецЕсли;
	#Если Клиент Тогда
		Сообщить("Считано пакетов "+Сокрлп(ТаблицаПакетов.Количество())+" из "+СокрЛП(ТаблицаПакетов.Количество()));
	#КонецЕсли
	
	МассивОбработанныхПакетов = Новый Массив;
	ОшибочныеПакеты = Новый Соответствие;
	МассивДокументов = Новый Массив;
	
	ТаблицаДанныхПослеЧтения = Новый ТаблицаЗначений;
	ТаблицаДанныхПослеЧтения.Колонки.Добавить("ИД_Документа");
	ТаблицаДанныхПослеЧтения.Колонки.Добавить("Тип_Документа");
	ТаблицаДанныхПослеЧтения.Колонки.Добавить("СтруктураДанныхСтроки");
	ТаблицаДанныхПослеЧтения.Колонки.Добавить("НомерПакета");
	//ТаблицаДанныхПослеЧтения.Колонки.Добавить("ИтоговоеКоличество");
	
	таблНеобрабатываемыхПакетов = Новый ТаблицаЗначений;
	таблНеобрабатываемыхПакетов.Колонки.Добавить("НомерПакета");
	таблНеобрабатываемыхПакетов.Колонки.Добавить("комментарий");
	
	//3. Произведём чтение данных пакетов
	Для Каждого ДанныеПакета Из ТаблицаПакетов Цикл
		
		НомерПакета = ДанныеПакета.НомерПакета;
		Данные = ДанныеПакета.Данные;
		
		Если ПустаяСтрока(Данные) Тогда
			ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" has no data (пакет не имеет данных)");
			ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация,,Узел, "Пакет № "+НомерПакета+" не имеет данных");
			Продолжить;
		КонецЕсли;
		
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.УстановитьСтроку(Данные);
		СтрокаОшибок = "";
		
		ИД_Документа 	= "";
		Тип_Документа 	= "";
		
		ПРГ_СчитаноКолВоСтрок =  ТаблицаДанныхПослеЧтения.Количество();
		
		ЕстьОшибки = Ложь;
		Пока ЧтениеХМЛ.Прочитать() Цикл
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				Если ЧтениеХМЛ.Имя = "snd_zp_add" Тогда //По строке заказа 1С создан заказ в МП 
					
					ИД_Документа = ЧтениеХМЛ.ПолучитьАтрибут("uid");
					//Тип_Документа = Тип("ДокументОбъект.ЗаказПоставщику");
					Тип_Документа = "zp_add";
					
					СтруктураДанныхСтроки = Новый Структура;					
					СтруктураДанныхСтроки.Вставить("Заголовок"	, Истина);
					
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки);
					
				ИначеЕсли ЧтениеХМЛ.Имя = "snd_zp_add_detail" Тогда //По строке заказа 1С создан заказ в МП 
					
					СтруктураДанныхСтроки = Новый Структура;					
					СтруктураДанныхСтроки.Вставить("Заголовок"	    , Ложь);
					СтруктураДанныхСтроки.Вставить("ИД_ЗаказаМП"	, ЧтениеХМЛ.ПолучитьАтрибут("proleit_zp_id"));
					СтруктураДанныхСтроки.Вставить("УИД_Строки"		, ЧтениеХМЛ.ПолучитьАтрибут("uid"));
					СтруктураДанныхСтроки.Вставить("ПроведенВМП"	, Истина);
					
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки);
					
				ИначеЕсли ЧтениеХМЛ.Имя = "snd_zp_delete" Тогда //Удален заказ в МП 
					
					ИД_Документа = ЧтениеХМЛ.ПолучитьАтрибут("uid");
					//Тип_Документа = Тип("ДокументОбъект.ЗаказПоставщику");
					Тип_Документа = "zp_delete";
					
					СтруктураДанныхСтроки = Новый Структура;					
					СтруктураДанныхСтроки.Вставить("Заголовок"	    , Истина);
					СтруктураДанныхСтроки.Вставить("ПроведенВМП"	, Ложь);
					СтруктураДанныхСтроки.Вставить("ИД_ЗаказаМП"	, ЧтениеХМЛ.ПолучитьАтрибут("proleit_zp_id"));
					СтруктураДанныхСтроки.Вставить("УИД_Строки"		, ИД_Документа);
					
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки);
					
				ИначеЕсли ЧтениеХМЛ.Имя = "snd_ttn" Тогда //Получаем данные по накладной
					
					ИД_Документа = ЧтениеХМЛ.ПолучитьАтрибут("proleit_ttn_id"); //Это УИД заказа в 1С, поэтому при обработке свертку таблицы делаем по ИД и Типу
					//Тип_Документа = Тип("ДокументОбъект.ПоступлениеТоваровУслуг");
					Тип_Документа = "ttn";
					
					СтруктураДанныхСтроки = Новый Структура;
					СтруктураДанныхСтроки.Вставить("Заголовок"	    ,Истина);
					СтруктураДанныхСтроки.Вставить("ИД_Заказа1С"	,ЧтениеХМЛ.ПолучитьАтрибут("uid"));	
					СтруктураДанныхСтроки.Вставить("ИД_ЗаказаМП"	,ЧтениеХМЛ.ПолучитьАтрибут("zp_uid"));	
					СтруктураДанныхСтроки.Вставить("ИД_ТТНМП"	    ,ЧтениеХМЛ.ПолучитьАтрибут("proleit_ttn_id"));	
					СтруктураДанныхСтроки.Вставить("Номер"      	,ЧтениеХМЛ.ПолучитьАтрибут("number_ttn"));	
					СтруктураДанныхСтроки.Вставить("Дата"		    ,ПРГСтрСолвоВДату(ЧтениеХМЛ.ПолучитьАтрибут("date_create")));	
					СтруктураДанныхСтроки.Вставить("ДатаВходящая"   ,ПРГСтрСолвоВДату(ЧтениеХМЛ.ПолучитьАтрибут("date")));	
					
					СтруктураДанныхСтроки.Вставить("АМ"		        ,ЧтениеХМЛ.ПолучитьАтрибут("number_car"));	
					СтруктураДанныхСтроки.Вставить("Водитель"       ,ЧтениеХМЛ.ПолучитьАтрибут("driver"));	
					
					СтруктураДанныхСтроки.Вставить("Склад"	        ,ЧтениеХМЛ.ПолучитьАтрибут("warehouse_id"));	
										
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки);
					
				ИначеЕсли ЧтениеХМЛ.Имя = "snd_ttn_section" Тогда // обработка данных секций ТТН 
					
					СтруктураДанныхСтроки = Новый Структура;
					СтруктураДанныхСтроки.Вставить("Заголовок"	, Ложь);
					СтруктураДанныхСтроки.Вставить("Секция"	,ЧтениеХМЛ.ПолучитьАтрибут("section_id"));
					
					СтруктураДанныхСтроки.Вставить("МДЖ_ТТН"	            ,ЧтениеХМЛ.ПолучитьАтрибут("v_fat"));
					СтруктураДанныхСтроки.Вставить("МДБ_ТТН"	            ,ЧтениеХМЛ.ПолучитьАтрибут("v_protein"));
					СтруктураДанныхСтроки.Вставить("Количество_ТТН"	        ,ЧтениеХМЛ.ПолучитьАтрибут("v_amount"));
					СтруктураДанныхСтроки.Вставить("Кислотность_ТТН"	    ,ЧтениеХМЛ.ПолучитьАтрибут("v_acidity"));
					СтруктураДанныхСтроки.Вставить("Плотность_ТТН"	        ,ЧтениеХМЛ.ПолучитьАтрибут("v_density"));
					СтруктураДанныхСтроки.Вставить("Термоустойчивость_ТТН"	,ЧтениеХМЛ.ПолучитьАтрибут("v_thermostability"));
					СтруктураДанныхСтроки.Вставить("СомотическиеКлетки_ТТН"	,ЧтениеХМЛ.ПолучитьАтрибут("v_contentsomacells"));
					СтруктураДанныхСтроки.Вставить("ГруппаЧистоты_ТТН"	    ,ЧтениеХМЛ.ПолучитьАтрибут("v_puritygroup"));
					СтруктураДанныхСтроки.Вставить("Температура_ТТН"	    ,ЧтениеХМЛ.ПолучитьАтрибут("v_temperature"));
					СтруктураДанныхСтроки.Вставить("МДСВ_ТТН"	            ,ЧтениеХМЛ.ПолучитьАтрибут("v_drysubstance"));
					
					СтруктураДанныхСтроки.Вставить("МДЖ"	            ,ЧтениеХМЛ.ПолучитьАтрибут("l_fat"));
					СтруктураДанныхСтроки.Вставить("МДБ"	            ,ЧтениеХМЛ.ПолучитьАтрибут("l_protein"));
					СтруктураДанныхСтроки.Вставить("Количество"	        ,ЧтениеХМЛ.ПолучитьАтрибут("l_amount"));
					СтруктураДанныхСтроки.Вставить("Кислотность"	    ,ЧтениеХМЛ.ПолучитьАтрибут("l_acidity"));
					СтруктураДанныхСтроки.Вставить("Плотность"	        ,ЧтениеХМЛ.ПолучитьАтрибут("l_density"));
					СтруктураДанныхСтроки.Вставить("Термоустойчивость"	,ЧтениеХМЛ.ПолучитьАтрибут("l_thermostability"));
					СтруктураДанныхСтроки.Вставить("СомотическиеКлетки"	,ЧтениеХМЛ.ПолучитьАтрибут("l_contentsomacells"));
					СтруктураДанныхСтроки.Вставить("ГруппаЧистоты"	    ,ЧтениеХМЛ.ПолучитьАтрибут("l_puritygroup"));
					СтруктураДанныхСтроки.Вставить("Температура"	    ,ЧтениеХМЛ.ПолучитьАтрибут("l_temperature"));
					СтруктураДанныхСтроки.Вставить("МДСВ"	            ,ЧтениеХМЛ.ПолучитьАтрибут("l_drysubstance"));
					
					ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки);
					
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
		
		//пометим пакеты, которые не будут обрабатываться в статус cancel. Для уменьшения операций чтения
		//после разбора xml не добавлены информация для обработки 
		Если ПРГ_СчитаноКолВоСтрок =  ТаблицаДанныхПослеЧтения.Количество()	Тогда 
			Если ТекущаяДата() - ДанныеПакета.ДатаСтарта > 86400 Тогда //ждем сутки навсякий случай
				ПРГ_СтрокаНеобр = таблНеобрабатываемыхПакетов.Добавить();
				ПРГ_СтрокаНеобр.НомерПакета = НомерПакета;
				ПРГ_СтрокаНеобр.Комментарий = "Пакет неотработан, не задан обработчик";
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;
	
	мТаблицаТолькоС_ИД_Документами = ТаблицаДанныхПослеЧтения.Скопировать();
	мТаблицаТолькоС_ИД_Документами.Свернуть("ИД_Документа, Тип_Документа");
	
	//СтруктураОшибок = Новый Структура;
	//СтруктураОшибок.Вставить("ТекстОшибки"		, "");
	//СтруктураОшибок.Вставить("ПакетОбработан"	, Истина);
	
	//исключение двойной перезаписи объектов 
	//в таблицу вставим информацию по головному пакету
	ПРГТаблПакетов = Новый ТаблицаЗначений;
	ПРГТаблПакетов.Колонки.Добавить("НомерПакета");
	ПРГТаблПакетов.Колонки.Добавить("МассивПакетов",Новый ОписаниеТипов("Массив"));
	ПРГТаблПакетов.Колонки.Добавить("СвязанныеПакеты",Новый ОписаниеТипов("Массив"));
	ПРГТаблПакетов.Колонки.Добавить("Удалять",Новый ОписаниеТипов("Булево"));
	
	ПРГСтруктураДопПарметров = Новый Структура;
	ТекДокумент 			 = Неопределено;
	
	//Обработка ошибок
	Для каждого мСтрока Из мТаблицаТолькоС_ИД_Документами Цикл
		
		НайтиСтрокиПоДокументу = ТаблицаДанныхПослеЧтения.НайтиСтроки(Новый Структура("ИД_Документа, Тип_Документа", мСтрока.ИД_Документа, мСтрока.Тип_Документа));
		
		МассивОбработанныхПакетов = Новый Массив;
		
		текДокумент = Неопределено; //Объект документа
		
		ПРГТаблПакетов.Очистить();
		
		//исключение двойной перезаписи объектов 
		ПРГДокументОпределен  = Ложь;
		ПРГМетаДок  		  = Неопределено;
		
		СтруктураОшибок = Новый Структура;
		СтруктураОшибок.Вставить("ТекстОшибки"		, "");
		СтруктураОшибок.Вставить("ПакетОбработан"	, Истина); //По умолчанию истина, если будут ошибки - устанавливаем Ложь
		
		//Заполним таблицу
		Тип_Документа = "";
		ПРГ_ЭтоЗаказ  = Ложь;
		
		//Определим документ, соберем пакеты в одну таблицу
		Для Каждого ПРГТекЭлем ИЗ НайтиСтрокиПоДокументу Цикл
			НайдЗнч  = ПРГТаблПакетов.Найти(ПРГТекЭлем.НомерПакета,"НомерПакета"); 
			Если НайдЗнч = Неопределено Тогда
				НайдЗнч 			    = ПРГТаблПакетов.Добавить();
				НайдЗнч.НомерПакета     = ПРГТекЭлем.НомерПакета;
				НайдЗнч.МассивПакетов 	= Новый Массив;
				НайдЗнч.СвязанныеПакеты = Новый Массив;
				НайдЗнч.Удалять		    = Ложь;
				
				Если Не ПРГДокументОпределен Тогда
					
					СсылкаНаДокумент = ПРГПолучитьСсылкуНаДокумент(ПРГТекЭлем.Тип_Документа, мСтрока.ИД_Документа, ПРГСтруктураДопПарметров, ОшибочныеПакеты, ПРГТекЭлем.НомерПакета, СтруктураОшибок);
					Если СсылкаНаДокумент = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка() Тогда
						ТекДокумент          = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент(); 
					ИначеЕсли Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
						//ошибки уже записали в функции
						//пометим пакеты, которые не будут обрабатываться в статус cancel. Для уменьшения операций чтения
						//поскольку все доки сихронизируются по ГУИД исключим те, по котрым не приходит ГУИД
						Если НЕ ЭтоGUID(мСтрока.ИД_Документа) Тогда
							Для счетчикДоков = 0 ПО НайтиСтрокиПоДокументу.Количество()-1 Цикл
								ПРГ_СтрокаНеобр = таблНеобрабатываемыхПакетов.Добавить();
								ПРГ_СтрокаНеобр.НомерПакета = НайтиСтрокиПоДокументу[счетчикДоков].НомерПакета;
								ПРГ_СтрокаНеобр.Комментарий = " не содержит ид документа 1С";
							КонецЦикла;	
						КонецЕсли;
						
						прервать;
					//Для поступлений - проверка что изменения можем принять только по непроведенному поступлению
					ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И СсылкаНаДокумент.Проведен Тогда 
						ЗаписатьОшибкуПакета(ОшибочныеПакеты, ПРГТекЭлем.НомерПакета, "Package № "+ПРГТекЭлем.НомерПакета+" данные по проведенному поступлению товаров и услуг не принимаются");
						СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
						
						Для счетчикДоков = 0 ПО НайтиСтрокиПоДокументу.Количество()-1 Цикл
							ПРГ_СтрокаНеобр = таблНеобрабатываемыхПакетов.Добавить();
							ПРГ_СтрокаНеобр.НомерПакета = НайтиСтрокиПоДокументу[счетчикДоков].НомерПакета;
							ПРГ_СтрокаНеобр.Комментарий = " изменения по проведенному документу поступления товаров не принимаются";
						КонецЦикла;	
						прервать;						
					Иначе
						ТекДокумент          = СсылкаНаДокумент.ПолучитьОбъект(); 	
					КонецЕсли;				
					
					ПРГДокументОпределен = Истина;
					ПРГМетаДок  		 = ТекДокумент.Метаданные();
				КонецЕсли;				
			КонецЕсли;	
			
			НайдЗнч.МассивПакетов.Добавить(ПРГТекЭлем);
			
		КонецЦикла;
		
		Если Не ПРГДокументОпределен Тогда
			продолжить;
		КонецЕсли;	
		
		ПРГТаблПакетов.Сортировать("НомерПакета");
		
		//в случае возникновеения ошибки не останавливаемся 
		//продолжаем дальше записывать изменения
		Попытка
			
			мОдинПакет = (НайтиСтрокиПоДокументу.Количество() = 1);
			
			//Обрабатываем пакеты, вносим изменения в объекты
			Для Каждого ПРГТекСТрока Из ПРГТаблПакетов Цикл
				
				СтруктураОшибок = Новый Структура;
				СтруктураОшибок.Вставить("ТекстОшибки"		, "");
				СтруктураОшибок.Вставить("ПакетОбработан"	, Истина);
				МассивОбработанныхПакетов.Добавить(ПРГТекСТрока.НомерПакета);
				
				СтрокаЗаказаПоставщику = Неопределено;
				
				Для каждого мТекДанные Из ПРГТекСТрока.МассивПакетов Цикл  
					
					ИД_Документа  = мТекДанные.ИД_Документа;
					Тип_Документа = мТекДанные.Тип_Документа;
					СтруктураДанныхСтроки = мТекДанные.СтруктураДанныхСтроки;
					НомерПакета = мТекДанные.НомерПакета;
					
					//Должна быть каждый раз проверка, т.к. могу обрабатывать пакеты друг за другом, где могуть быть несколько результирующих пакетов
					Если Тип_Документа = "ttn" И ТипЗнч(текДокумент) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
						Если СтруктураДанныхСтроки.Заголовок Тогда
							//Заполним шапку
							//Найдем реквизиты
							текДокумент.УЗ_ОбменПролайт = Истина;
							текДокумент.УЗ_УИДТТН = СтруктураДанныхСтроки.ИД_ТТНМП;
							текДокумент.Дата = СтруктураДанныхСтроки.Дата;
													
							ЗаказПоставщику = ПолучитьСсылкуНаДокументПоУИД("ЗаказПоставщику", СтруктураДанныхСтроки.ИД_Заказа1С);
							
							Если Не ЗначениеЗаполнено(ЗаказПоставщику) Тогда
								ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "Package № "+НомерПакета+" не найден заказ поставщику по УИД " + СтруктураДанныхСтроки.ИД_Заказа1С);
								ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" не найден заказ поставщику по УИД " + СтруктураДанныхСтроки.ИД_Заказа1С);
								СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
								Прервать;								
							КонецЕсли;
							
							текДокумент.Заполнить(ЗаказПоставщику);
							
							текДокумент.ОтражатьВУправленческомУчете = Истина;
							текДокумент.ОтражатьВБухгалтерскомУчете = Ложь;
							текДокумент.ОтражатьВНалоговомУчете = Ложь;
							
							текДокумент.ДатаВходящегоДокумента  = СтруктураДанныхСтроки.ДатаВходящая;
							текДокумент.НомерВходящегоДокумента = СтруктураДанныхСтроки.Номер;
							
							текДокумент.УЗ_АМ    = СтруктураДанныхСтроки.АМ;
							текДокумент.Водитель = СтруктураДанныхСтроки.Водитель;
							
							//определим склад
							Склад = ПолучитьСсылкуНаСправочникПоУИД("Склады", СтруктураДанныхСтроки.Склад);
							Если Не ЗначениеЗаполнено(Склад) Тогда
								ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "Package № "+НомерПакета+" не найден склад по УИД " + СтруктураДанныхСтроки.Склад);
								ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" не найден склад по УИД " + СтруктураДанныхСтроки.Склад);
								СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
								Прервать;								
							КонецЕсли;
							
							текДокумент.Товары.Очистить();
							текДокумент.Услуги.Очистить();
							текДокумент.ВозвратнаяТара.Очистить();
							
							//Найдем строку заказа по ИД заказа пролайт
							СтрокаЗаказаПоставщику = ЗаказПоставщику.Товары.Найти(Число(СтруктураДанныхСтроки.ИД_ЗаказаМП), "УИДЗаказаПролайт");
							
							Если СтрокаЗаказаПоставщику = Неопределено Тогда
								ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "Package № "+НомерПакета+" не найдена строка заказа по ИД Пролайт " + СтруктураДанныхСтроки.ИД_ЗаказаМП);
								ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" не найдена строка заказа по ИД Пролайт " + СтруктураДанныхСтроки.ИД_ЗаказаМП);
								СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
								Прервать;								
							КонецЕсли;
						Иначе
							//Заполняем таб часть
							Если СтрокаЗаказаПоставщику = Неопределено Тогда
								ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "Package № "+НомерПакета+" не найдена строка заказа по ИД Пролайт ");
								ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" не найдена строка заказа по ИД Пролайт ");
								СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
								Прервать;								
							КонецЕсли;														
							
							СтрокаТабличнойЧасти = текДокумент.Товары.Добавить();
							СтрокаТабличнойЧасти.Номенклатура = СтрокаЗаказаПоставщику.Номенклатура;
							СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказаПоставщику.ХарактеристикаНоменклатуры;
							СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаЗаказаПоставщику.ЕдиницаИзмерения;
							СтрокаТабличнойЧасти.Коэффициент = СтрокаЗаказаПоставщику.Коэффициент;
							СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаЗаказаПоставщику.ЕдиницаИзмеренияМест;
							СтрокаТабличнойЧасти.Заказ = СтрокаЗаказаПоставщику.Заказ;
							СтрокаТабличнойЧасти.СтавкаНДС = СтрокаЗаказаПоставщику.СтавкаНДС;
							СтрокаТабличнойЧасти.Цена = СтрокаЗаказаПоставщику.Цена;
							
							СтрокаТабличнойЧасти.ЗаказПоставщику = текДокумент.Сделка;
							СтрокаТабличнойЧасти.Склад = текДокумент.СкладОрдер;
							
							СтрокаТабличнойЧасти.Количество = СтруктураДанныхСтроки.Количество;
							СтрокаТабличнойЧасти.СП_КоличествоПоНакладной = СтруктураДанныхСтроки.Количество_ТТН;
							
							// Рассчитываем реквизиты табличной части.
							ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, текДокумент);
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, текДокумент);
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, текДокумент);
							
							ПРГПересчитатьСуммуНакладной(СтрокаТабличнойЧасти, текДокумент);

							текДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", текДокумент.ОтражатьВБухгалтерскомУчете, текДокумент.ОтражатьВНалоговомУчете);
    						СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
							
							СерияНоменклатуры = Неопределено;
							Если текДокумент.ЭтоНовый() Тогда
								//Создаем серию, но нужно записать документ
								Попытка
									текДокумент.ДополнительныеСвойства.Вставить("мЭтоЗагрузкаИзПролайт", Истина);
									текДокумент.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
								
									//текДокумент.Записать(?(текДокумент.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));	
									//По обмену с Пролайт документы не проводятся, только запись
									текДокумент.Записать(РежимЗаписиДокумента.Запись);
									#Если Клиент Тогда
										Сообщить("Пакет №" + СокрЛП(НомерПакета) + " изменения по " + СокрЛП(текДокумент));
									#КонецЕсли
								Исключение
									ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "Package № "+НомерПакета+" ошибка создания поступления товаров и услуг " + ОписаниеОшибки());
									ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" ошибка создания поступления товаров и услуг "  + ОписаниеОшибки());
									СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
									#Если Клиент Тогда
										Сообщить("Package № "+НомерПакета+" ошибка создания поступления товаров и услуг "  + ОписаниеОшибки());
									#КонецЕсли
									Прервать;
								КонецПопытки;

							Иначе
								ЗапросПоСерии = Новый Запрос;
								ЗапросПоСерии.Текст = "ВЫБРАТЬ
								               |	СерииНоменклатуры.Ссылка
								               |ИЗ
								               |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
								               |ГДЕ
								               |	СерииНоменклатуры.Владелец = &Владелец
								               |	И СерииНоменклатуры.УЗ_Накладная = &УЗ_Накладная
								               |	И СерииНоменклатуры.УЗ_Секция = &УЗ_Секция";
								ЗапросПоСерии.УстановитьПараметр("Владелец", СтрокаТабличнойЧасти.Номенклатура); 
								ЗапросПоСерии.УстановитьПараметр("УЗ_Накладная", текДокумент.Ссылка); 
								ЗапросПоСерии.УстановитьПараметр("УЗ_Секция", Число(СтруктураДанныхСтроки.Секция));
								
								Выборка = ЗапросПоСерии.Выполнить().Выбрать();
								Если Выборка.Следующий() Тогда
									СерияНоменклатуры = Выборка.Ссылка;
								КонецЕсли;	
								
							КонецЕсли;
							
							Если СерияНоменклатуры = Неопределено Тогда
								СуффиксНаименованияСерии = "";
								Если текДокумент.СкладОрдер.ПРГ_СкладКопекера Тогда 
									СуффиксНаименованияСерии = "К";
								Иначе
									СуффиксНаименованияСерии = "";
								КонецЕсли;
								
								СерияНоменклатуры = ПРГ_ДопФункцииКлиентСервер.СоздатьСериюНоменклатуры(СтрокаТабличнойЧасти, текДокумент, СуффиксНаименованияСерии);
								
								Если СерияНоменклатуры = Неопределено Тогда
									ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "Package № "+НомерПакета+" ошибка создания серии номенклатуры");
									ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" ошибка создания серии номенклатуры");
									СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
									Прервать;								
								КонецЕсли;
							КонецЕсли;	
							
							СерияНоменклатуры = СерияНоменклатуры.ПолучитьОбъект();
							
							СерияНоменклатуры.УЗ_Накладная = ТекДокумент.Ссылка;
							СерияНоменклатуры.УЗ_Секция    = СтруктураДанныхСтроки.Секция;
							
							СерияНоменклатуры.НСИ_МДЖ    = СтруктураДанныхСтроки.МДЖ;
							СерияНоменклатуры.НСИ_МДБ    = СтруктураДанныхСтроки.МДБ;
							СерияНоменклатуры.УЗ_ПроцентСухихВеществ    = СтруктураДанныхСтроки.МДСВ;
							
							СерияНоменклатуры.НСИ_МДЖ_ТТН    = СтруктураДанныхСтроки.МДЖ_ТТН;
							СерияНоменклатуры.НСИ_МДБ_ТТН    = СтруктураДанныхСтроки.МДБ_ТТН;
							СерияНоменклатуры.НСИ_МДСВ_ТТН    = СтруктураДанныхСтроки.МДСВ_ТТН;
							
	                        СерияНоменклатуры.СерийныйНомер = ""+СокрЛП(текДокумент.НомерВходящегоДокумента)+"_"+ Формат(текДокумент.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy");
							
							Если СтрокаТабличнойЧасти.НомерГТД <> СерияНоменклатуры.НомерГТД Тогда
								СерияНоменклатуры.НомерГТД = СтрокаТабличнойЧасти.НомерГТД;
							КонецЕсли;
							Если СтрокаТабличнойЧасти.СтранаПроисхождения <> СерияНоменклатуры.СтранаПроисхождения Тогда
								СерияНоменклатуры.СтранаПроисхождения = СтрокаТабличнойЧасти.СтранаПроисхождения;
							КонецЕсли;
							Если СтрокаТабличнойЧасти.УЗ_КоличествоТарныхМест <> СерияНоменклатуры.УЗ_КоличествоТарныхМест Тогда
								СерияНоменклатуры.УЗ_КоличествоТарныхМест = СтрокаТабличнойЧасти.УЗ_КоличествоТарныхМест;
							КонецЕсли;
							Если СтрокаТабличнойЧасти.УЗ_ДатаВыработки <> СерияНоменклатуры.УЗ_ДатаВыработки Тогда
								СерияНоменклатуры.УЗ_ДатаВыработки = СтрокаТабличнойЧасти.УЗ_ДатаВыработки;
							КонецЕсли;
							Если Цел((ТекущаяДата() - текДокумент.Дата)/(3600*24)) < 5 Тогда
								СерияНоменклатуры.ОбменДанными.Загрузка = Истина
							КонецЕсли;
							
							Попытка
							
								СерияНоменклатуры.Записать();
								#Если Клиент Тогда
									Сообщить("Пакет №" + СокрЛП(НомерПакета) + " изменения по " + СокрЛП(СерияНоменклатуры.СерийныйНомер));
								#КонецЕсли
							
							Исключение
								
								ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "Package № "+НомерПакета+" ошибка создания серии номенклатуры " + ОписаниеОшибки());
								ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" ошибка создания серии номенклатуры "  + ОписаниеОшибки());
								СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
								#Если Клиент Тогда
									Сообщить("Package № "+НомерПакета+" ошибка создания серии номенклатуры "  + ОписаниеОшибки());
								#КонецЕсли
								Прервать;
							
							КонецПопытки;

							
							СтрокаТабличнойЧасти.СерияНоменклатуры = СерияНоменклатуры.Ссылка;
												
							
						КонецЕсли;
					ИначеЕсли Тип_Документа = "zp_add" И ТипЗнч(текДокумент) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
						Если СтруктураДанныхСтроки.Заголовок Тогда
							//в заголовке только определение УИД заказа поставщику
							Продолжить;
						Иначе
							ПолеПоиска = СтруктураДанныхСтроки.УИД_Строки;
							//Все данные в заголовке - находим нужную строку и очищаем ИД заказа Пролайт в строке
							Если ПустаяСтрока(ПолеПоиска) ИЛИ Не ЭтоGUID(ПолеПоиска) Тогда
								ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "Package № "+НомерПакета+" пустое значение УИД строки заказа 1С");
								ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" пустое значение УИД строки заказа 1С");
								СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
								Продолжить;
							КонецЕсли;
							
							Если ПустаяСтрока(СтруктураДанныхСтроки.ИД_ЗаказаМП) ИЛИ СтруктураДанныхСтроки.ИД_ЗаказаМП = 0 Тогда
								ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "Package № "+НомерПакета+" пустое значение ИД строки заказа МП");
								ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" пустое значение ИД строки заказа МП");
								СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
								Продолжить;
							КонецЕсли;
							
							СтрокаЗаказа = текДокумент.Товары.Найти(ПолеПоиска,"УИДСтрокиЗаказа");
							Если СтрокаЗаказа = Неопределено Тогда
								ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не найдена строка заказа по УИД " + ПолеПоиска);
								ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" пустое значение УИД строки заказа 1С");
								СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
								Продолжить;	
							КонецЕсли;
							
							СтрокаЗаказа.УИДЗаказаПролайт = СтруктураДанныхСтроки.ИД_ЗаказаМП;
						КонецЕсли;
					ИначеЕсли Тип_Документа = "zp_delete" И ТипЗнч(текДокумент) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
						
						ПолеПоиска = СтруктураДанныхСтроки.УИД_Строки;
						//Все данные в заголовке - находим нужную строку и очищаем ИД заказа Пролайт в строке
						Если ПустаяСтрока(ПолеПоиска) ИЛИ Не ЭтоGUID(ПолеПоиска) Тогда
							ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "Package № "+НомерПакета+" пустое значение УИД строки заказа 1С");
							ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" пустое значение УИД строки заказа 1С");
							СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
							Продолжить;
						КонецЕсли;
						
						СтрокаЗаказа = текДокумент.Товары.Найти(ПолеПоиска,"УИДСтрокиЗаказа");
						Если СтрокаЗаказа = Неопределено Тогда
							ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, , текДокумент.Ссылка, "не найдена строка заказа по УИД " + ПолеПоиска);
							ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" пустое значение УИД строки заказа 1С");
							СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
							Продолжить;	
						КонецЕсли;
						
						СтрокаЗаказа.УИДЗаказаПролайт = 0;
					КонецЕсли;				
				КонецЦикла; 
				
				
				Если ПРГДокументОпределен Тогда
					ЕстьОшибки = Ложь;
					мТекстОшибки = "";
					
					Если НЕ ПустаяСтрока(СтруктураОшибок.ТекстОшибки) ИЛИ НЕ СтруктураОшибок.ПакетОбработан Тогда				
						СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
						
						ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, мТекстОшибки);
						//согласно идеологии дальше ничего не обрабатываем
						прервать;
					Иначе
						Попытка					 				
							Если текДокумент.Модифицированность() Тогда
								
								текДокумент.ДополнительныеСвойства.Вставить("мЭтоЗагрузкаИзПролайт", Истина);
								текДокумент.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
								
								//текДокумент.Записать(?(текДокумент.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));	
								//По обмену с Пролайт документы не проводятся, только запись
								текДокумент.Записать(РежимЗаписиДокумента.Запись);
								
								#Если Клиент Тогда
									Сообщить("Пакет №" + СокрЛП(НомерПакета) + " изменения по " + СокрЛП(текДокумент));
								#КонецЕсли
								
							КонецЕсли;	
							
							СтруктураОшибок.Вставить("ПакетОбработан", Истина);
							Для Каждого ТекЭлем Из ПРГТекСТрока.СвязанныеПакеты Цикл
								МассивОбработанныхПакетов.Добавить(ТекЭлем);
							КонецЦикла;	
						Исключение
							
							СтруктураОшибок.ТекстОшибки = СтруктураОшибок.ТекстОшибки + "; " + СокрЛП(ОписаниеОшибки());
							
							ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Ошибка,текДокумент.Метаданные() , текДокумент.Ссылка,"Package № "+ НомерПакета+ "; " + "Не удалось записать документ!!!
							|"+ОписаниеОшибки());		      
							
							ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+ НомерПакета+ "; " + СокрЛП(ОписаниеОшибки()));
							
							Для Каждого ТекЭлем Из ПРГТекСТрока.СвязанныеПакеты Цикл
								МассивОбработанныхПакетов.Добавить(ТекЭлем);
								ЗаписатьОшибкуПакета(ОшибочныеПакеты, ТекЭлем, "Package № "+ ТекЭлем+ "; " + СокрЛП(ОписаниеОшибки()));
							КонецЦикла;	
							
							СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
							//согласно идеологии дальше ничего не обрабатываем
							
							#Если Клиент Тогда
								Сообщить("Package № "+ НомерПакета+ "; " + "Не удалось записать документ!!!"+ОписаниеОшибки());
							#КонецЕсли
							прервать;
							
						КонецПопытки;				
						
					КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
			
			Если ПРГДокументОпределен Тогда
				ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивОбработанныхПакетов);
				ЕстьОшибки = Ложь;
				мТекстОшибки = "";
				
				//Проверим есть ли ошибки по одному из пакетов переданных из Пролайт
				Для каждого мПакет Из МассивОбработанныхПакетов Цикл
					ТекстОшибки = ОшибочныеПакеты.Получить(мПакет);				
					Если НЕ ПустаяСтрока(ТекстОшибки) Тогда				
						ЕстьОшибки = Истина; 
						мТекстОшибки = СокрЛП(?(Найти(СокрЛП(мТекстОшибки), СокрЛП(ТекстОшибки)) = 0, мТекстОшибки + "; " + ТекстОшибки, мТекстОшибки));
					КонецЕсли;				
				КонецЦикла;
			КонецЕсли;
			
			Для каждого мНомерПакета Из МассивОбработанныхПакетов Цикл
				ПРГ_ОбработаемПакеты_В_Пролайт_ПослеЗагрузки(СтруктураОшибок, ОшибочныеПакеты, мНомерПакета, Соединение, Узел, ПРГАДОДБ, ПРГТестЧтение);				
			КонецЦикла;
			
			ПРГДокументОпределен  = Ложь;
			текДокумент = Неопределено;
			
			//конец изменений  
		Исключение
			
			Если ПРГДокументОпределен Тогда
				ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Ошибка,текДокумент.Метаданные() , текДокумент.Ссылка, "Не удалось загрузить информацию!!!
				|"+ОписаниеОшибки());		      
				
			Иначе 
				
				ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Ошибка, , ИД_Документа, "по GUID ссылке " + СокрЛП(ИД_Документа) + "  не удалось загрузить информацию!!!
				|"+ОписаниеОшибки());		      
				
			КонецЕсли;	
		КонецПопытки;	
	КонецЦикла; 
	
	//пометим пакеты, которые не будут обрабатываться в статус cancel. Для уменьшения операций чтения
	ПРГ_ЗаписатьИнформациюПоНеобрабатываемымПакетам(таблНеобрабатываемыхПакетов, Соединение, Узел, ПРГАДоДБ,ПРГТестЧтение);	
КонецПроцедуры

Процедура ДобавимСтрокуВТаблицуДанныхПослеЧтения(ТаблицаДанныхПослеЧтения, НомерПакета, ИД_Документа, Тип_Документа, СтруктураДанныхСтроки)//, мИтоговоеЗначение = Ложь)

	НоваяСтрока = ТаблицаДанныхПослеЧтения.Добавить();
	НоваяСтрока.ИД_Документа 			= ИД_Документа;
	НоваяСтрока.Тип_Документа 			= Тип_Документа;
	НоваяСтрока.СтруктураДанныхСтроки 	= СтруктураДанныхСтроки;
	НоваяСтрока.НомерПакета 			= НомерПакета;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуПакета(ОшибочныеПакеты = Неопределено, НомерПакета = 0, СтрокаОшибок = "") Экспорт
	Если ОшибочныеПакеты = Неопределено Тогда
		ОшибочныеПакеты = Новый Соответствие;
	КонецЕсли;
	
	Стр = ОшибочныеПакеты.Получить(НомерПакета);
	Стр = ?(Стр = Неопределено, "Errors (ошибки):", Стр);
	
	Стр = Стр + ". "+СтрокаОшибок;
	
	ОшибочныеПакеты.Вставить(НомерПакета, Стр);
КонецПроцедуры

Функция ПолучимТипДокументаПоТипуДокументаПролайт(Тип_Документа)
	Если Тип_Документа = "zp_add" Тогда
		Возврат "ЗаказПоставщику";
	ИначеЕсли Тип_Документа = "zp_delete" Тогда
		Возврат "ЗаказПоставщику";
	ИначеЕсли Тип_Документа = "ttn" Тогда
		Возврат "ПоступлениеТоваровУслуг";
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ПРГПолучитьСсылкуНаДокумент(Тип_Документа, ИД_Документа, ПРГСтруктураДопПарметров, ОшибочныеПакеты, НомерПакета, СтруктураОшибок)
	
	Если Тип_Документа = "ttn" Тогда
		Если ИД_Документа = 0 ИЛИ ПустаяСтрока(ИД_Документа) Тогда
			ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" has no data (пакет не имеет данных)");
			СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
			возврат Неопределено;	
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(ИД_Документа) ИЛИ НЕ ЭтоGUID(ИД_Документа) Тогда
		ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" has no data (пакет не имеет данных)");
		СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
		возврат Неопределено;
	КонецЕсли;
	
	мИмяДокумента = ПолучимТипДокументаПоТипуДокументаПролайт(Тип_Документа);		
	СписокДокументов = Новый Массив;
	
	Если Не мИмяДокумента = Неопределено Тогда
		
		СписокДокументов.Добавить(мИмяДокумента);
		
		Если Тип_Документа = "zp_delete" Тогда //поиск только по строке заказа
			
			СтрокаМетаданных = мИмяДокумента;
			
			ЗапросКСтрокеДоку = Неопределено;
			Если ЗапросКСтрокеДоку = Неопределено Тогда
				ЗапросКСтрокеДоку = Новый Запрос("ВЫБРАТЬ
				|	Док.Ссылка
				|ИЗ
				|	Документ."+СтрокаМетаданных+".Товары КАК Док
				|ГДЕ
				|	Док.УИДСтрокиЗаказа = &УИД");
				ПРГСтруктураДопПарметров.Вставить("Запрос"+СтрокаМетаданных, ЗапросКСтрокеДоку);
			КонецЕсли;
			
			ЗапросКСтрокеДоку.УстановитьПараметр("УИД", ИД_Документа);
				
			Выборка = ЗапросКСтрокеДоку.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				возврат Выборка.Ссылка;
			КонецЕсли;
		ИначеЕсли Тип_Документа = "ttn" Тогда //поиск ИД Пролайт
			
			СтрокаМетаданных = мИмяДокумента;
			
			ЗапросКДокуПоступление = Неопределено;
			Если ЗапросКДокуПоступление = Неопределено Тогда
				ЗапросКДокуПоступление = Новый Запрос("ВЫБРАТЬ
				|	Док.Ссылка
				|ИЗ
				|	Документ."+СтрокаМетаданных+" КАК Док
				|ГДЕ
				|	Док.УЗ_УИДТТН = &УИД");
				ПРГСтруктураДопПарметров.Вставить("Запрос"+СтрокаМетаданных, ЗапросКДокуПоступление);
			КонецЕсли;
			
			ЗапросКДокуПоступление.УстановитьПараметр("УИД", Число(ИД_Документа)); 
				
			Выборка = ЗапросКДокуПоступление.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				возврат Выборка.Ссылка;
			КонецЕсли;
		Иначе
			Для каждого СтрокаМетаданных Из СписокДокументов Цикл						
				
				НайденныйДокумент = Документы[СтрокаМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Документа));						
				ЗапросКДоку  = Неопределено;
				
				ПРГСтруктураДопПарметров.Свойство("Запрос"+СтрокаМетаданных,ЗапросКДоку);
				
				Если ЗапросКДоку = Неопределено Тогда
					ЗапросКДоку = Новый Запрос("ВЫБРАТЬ
					|	Док.Ссылка
					|ИЗ
					|	Документ."+СтрокаМетаданных+" КАК Док
					|ГДЕ
					|	Док.Ссылка = &Ссылка");
					ПРГСтруктураДопПарметров.Вставить("Запрос"+СтрокаМетаданных,ЗапросКДоку);
				КонецЕсли;	
				
				ЗапросКДоку.УстановитьПараметр("Ссылка",НайденныйДокумент);
				
				Выборка = ЗапросКДоку.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					возврат Выборка.Ссылка;
				КонецЕсли;	
				
			КонецЦикла;			
		КонецЕсли;
	КонецЕсли;
	
	Если Тип_Документа = "ttn" Тогда
		Возврат Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	Иначе
		ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация, , ИД_Документа, "по GUID ссылке " + СокрЛП(ИД_Документа) + " не найден документ");
		ЗаписатьОшибкуПакета(ОшибочныеПакеты, НомерПакета, "Package № "+НомерПакета+" документ не найден");
		СтруктураОшибок.Вставить("ПакетОбработан", Ложь);
	КонецЕсли;
	
	возврат Неопределено;
	
КонецФункции

Функция ЭтоGUID(мСтрокаGUID) Экспорт

	//маска = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";	
	
	мЭтоGUID = Ложь;
	
	Массив = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(мСтрокаGUID, "-");
	
	Если Массив.Количество() = 5 Тогда
		
		Если СтрДлина(Массив[0]) = 8 И СтрДлина(Массив[1]) = 4 И СтрДлина(Массив[2]) = 4 И СтрДлина(Массив[3]) = 4 И СтрДлина(Массив[4]) = 12 Тогда
			мЭтоGUID = Истина;  
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат мЭтоGUID;
	
КонецФункции // ()

Процедура ПРГ_ОбработаемПакеты_В_Пролайт_ПослеЗагрузки(СтруктураОшибок, ОшибочныеПакеты, НомерПакета, Соединение, Узел,ПРГАдоДб,ПРГТестЧтение=Ложь)
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Формат(НомерПакета, "ЧГ=0"));
	
	НомерПакетаСтр = Формат(НомерПакета, "ЧГ=0");
	
	//update _header_message set status=ready where id = YOUR_ID_FROM_SEQUENCE
	
	ТекстОшибки = ОшибочныеПакеты.Получить(НомерПакета);
	Если ТекстОшибки = Неопределено Тогда
		ТекстОшибки = "";
	КонецЕсли;
	ТекстОшибки = Лев(ПреобразуемТекстовыеСтроки(ТекстОшибки), 2000);
	
	//ТекстЗапроса = "update to_host_header_message set status = " +?(ПустаяСтрока(ТекстОшибки),"'done'","'error'") + ", err_descr = '"+ ТекстОшибки + "' where id = '"+НомерПакетаСтр+"'";
	ТекстЗапроса = "Exec sp_Message_Status '"+НомерПакетаСтр+"', N'"+?(ПустаяСтрока(ТекстОшибки),"S","E")+"', N'"+СокрЛП(ТекстОшибки)+"'";
	Если ПРГТестЧтение Тогда
		Сообщить(ТекстЗапроса);
	Иначе	
		#Если Клиент Тогда
			Сообщить(ТекстЗапроса);
		#КонецЕсли
		Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса, Узел, ПРГАДоДБ); 
		Если Рез = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Предупреждение,,НомерПакета, "Ошибка обновления статуса переданных пакетов №"+ СокрЛП(Формат(НомерПакета, "ЧГ=0"))+" в буферной таблице");
			#Если Клиент Тогда
				Сообщить("Ошибка обновления статуса переданных пакетов №"+ СокрЛП(Формат(НомерПакета, "ЧГ=0"))+" в буферной таблице");
			#КонецЕсли
		ИначеЕсли Не ПустаяСтрока(ТекстОшибки) Тогда
			ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Ошибка,,НомерПакета, "Ошибка чтения пакета №"+ СокрЛП(Формат(НомерПакета, "ЧГ=0"))+"." + СокрЛП(ТекстОшибки));
		КонецЕсли;		
	КонецЕсли;	  	
		 	
КонецПроцедуры

Процедура ПРГ_ЗаписатьИнформациюПоНеобрабатываемымПакетам(таблНеобрабатываемыхПакетов, Соединение, Узел, ПРГАДоДБ, ПРГТестЧтение = Ложь)
	
	Если таблНеобрабатываемыхПакетов = Неопределено Тогда
		возврат;
	КонецЕсли;	
	
	Если таблНеобрабатываемыхПакетов.Количество() = 0 тогда
		возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из таблНеобрабатываемыхПакетов Цикл
		НомерПакетаСтр = Формат(ТекСтрока.НомерПакета, "ЧГ=0");
		//ТекстЗапроса = "update to_host_header_message set status = 'cancel',"+?(ПустаяСтрока(ТекСтрока.Комментарий),""," err_descr = '"+СокрЛП(ТекСтрока.Комментарий))+"' where id = '"+НомерПакетаСтр+"'";
		ТекстЗапроса = "Exec sp_Message_Status '"+НомерПакетаСтр+"', N'"+"E"+"', N'"+СокрЛП(ТекСтрока.Комментарий)+"'";
		
		Если ПРГТестЧтение Тогда
			Сообщить(ТекстЗапроса);
		Иначе	       
			#Если Клиент Тогда
				Сообщить(ТекстЗапроса);
			#КонецЕсли
			Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса,Узел, ПРГАДоДБ); 
			Если Рез = Неопределено Тогда
				ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Предупреждение,,НомерПакетаСТР, "Ошибка обновления статуса переданных пакетов № "+ НомерПакетаСтр+" в таблице обмена");
				#Если Клиент Тогда
					Сообщить("Ошибка обновления статуса переданных пакетов №"+ СокрЛП(Формат(НомерПакетаСтр, "ЧГ=0"))+" в буферной таблице");
				#КонецЕсли
			Иначе
				ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Информация,,НомерПакетаСтр, "Пакет  №"+ НомерПакетаСтр+" не будет больше обработан." + СокрЛП(ТекСтрока.Комментарий));
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразуемТекстовыеСтроки(мСтрока)

	МассивЗамены = Новый Массив;
	МассивЗамены.Добавить("{");
	МассивЗамены.Добавить("}");
	МассивЗамены.Добавить("'");
	МассивЗамены.Добавить(";");
	МассивЗамены.Добавить("""");
	
	Для каждого СтрМассив Из МассивЗамены Цикл
	
		мСтрока = СтрЗаменить(мСтрока, СтрМассив, "");
	
	КонецЦикла; 
	
	Возврат мСтрока;

КонецФункции //

Функция ПолучитьСсылкуНаДокументПоУИД(Тип_Документа, ИД_Документа)
	
	НайденныйДокумент = Документы[Тип_Документа].ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Документа));						
	ЗапросКОбъекту  = Неопределено;
	
	Если ЗапросКОбъекту = Неопределено Тогда
		ЗапросКОбъекту = Новый Запрос("ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ."+Тип_Документа+" КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка");
		
	КонецЕсли;	
	
	ЗапросКОбъекту.УстановитьПараметр("Ссылка",НайденныйДокумент);
	
	Выборка = ЗапросКОбъекту.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		возврат Выборка.Ссылка;
	КонецЕсли;	
	
	возврат Неопределено;
	
КонецФункции

Функция ПолучитьСсылкуНаСправочникПоУИД(Тип, ИД)
	
	НайденныйОбъект = Справочники[Тип].ПолучитьСсылку(Новый УникальныйИдентификатор(ИД));						
	ЗапросКОбъекту  = Неопределено;
	
	Если ЗапросКОбъекту = Неопределено Тогда
		ЗапросКОбъекту = Новый Запрос("ВЫБРАТЬ
		|	Спр.Ссылка
		|ИЗ
		|	Справочник."+Тип+" КАК Спр
		|ГДЕ
		|	Спр.Ссылка = &Ссылка");
		
	КонецЕсли;	
	
	ЗапросКОбъекту.УстановитьПараметр("Ссылка",НайденныйОбъект);
	
	Выборка = ЗапросКОбъекту.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		возврат Выборка.Ссылка;
	КонецЕсли;	
	
	возврат Неопределено;
	
КонецФункции

Функция ПРГСтрСолвоВДату(АСтр)
	
	Если АСтр = Неопределено Тогда
		возврат '00010101';
	конецЕсли;
	
	Стр = СокрЛ(АСтр);
	
	Если СтрДлина(Стр) < 10 Тогда
		возврат '00010101';
	КонецЕсли;	
	
	Попытка
		                                               
		Год    = Число(Лев(Стр,4));
		Месяц  = Число(Сред(Стр,6,2));
		День   = Число(Сред(Стр,9,2));
		//День   = Число(Лев(Стр,2));
		//Месяц  = Число(Сред(Стр,4,2));
		//Год    = Число(Сред(Стр,7,4));
		
		СимволТ = Найти(Стр,"T");
		Если СимволТ = 0 Тогда
			возврат Дата(Год,Месяц,День);
		Иначе
			ЧЧ = Число(Сред(Стр,СимволТ+1,2));
			ММ = Число(Сред(Стр,СимволТ+4,2));
			СС = Число(Сред(Стр,СимволТ+7,2));
			
			возврат Дата(Год,Месяц,День,ЧЧ,ММ,СС);
		КонецЕсли;
	Исключение
		возврат '00010101';
	КонецПопытки; 		

КонецФункции

Процедура ПРГПересчитатьСуммуНакладной(ТекСтрока, ТекДокумент)
	Если ТекСтрока.Количество = ТекСтрока.СП_КоличествоПоНакладной 
		и ТекСтрока.СП_КоличествоПоНакладной > 0
	 	и ТекСтрока.Сумма > 0 Тогда
		ТекСтрока.СП_Сумма  = ТекСтрока.Сумма;
		ТекСтрока.СП_НДС    = ТекСтрока.СуммаНДС;
		возврат;
	КонецЕсли; 
	
	ТекСтрока.СП_Сумма = ТекСтрока.Цена * ТекСтрока.СП_КоличествоПоНакладной;
	ПРГПересчитатьСуммуНДСНакладной(ТекСтрока, ТекДокумент);
КонецПроцедуры	

Процедура ПРГПересчитатьСуммуНДСНакладной(ТекСтрока, ТекДокумент)
	
	ТекСтрока.СП_НДС  = УчетНДС.РассчитатьСуммуНДС(ТекСтрока.СП_Сумма,
	ТекДокумент.УчитыватьНДС, ТекДокумент.СуммаВключаетНДС,
	УчетНДС.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС));
КонецПроцедуры

//начало изменений Ожиганов А. 11.09.2017 66210 дополнение к выгрузки в пролайт. спецификации, задания на смену 
//ВыгрузитьЗаданиеНаСмену(Соединение, Объект, Узел, ВыгружатьСправочники, ПРГАДОКОМ, СтруктураПараметров);
функция ВыгрузитьЗаданиеНаСмену(Соединение, Объект, Узел, Выгружать, ПРГАДОКОМ, СтруктураПараметров)
	Перем Блокировка, РезВыгрузки, НужноУдалятьРегистрацию;

	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат Истина;
	КонецЕсли;	
	
    ОбъектВыгрузки = ПрочитатьДанныеПоСсылке(Объект, Блокировка, РезВыгрузки, Узел, СтруктураПараметров, НужноУдалятьРегистрацию, Выгружать);
	
	Если ОбъектВыгрузки =  Неопределено тогда
		возврат РезВыгрузки;
	КонецЕсли;	
	
	УИД = СокрЛП(ОбъектВыгрузки.Ссылка.УникальныйИдентификатор());
	
	НомерПакета = 0; //Обмен с ПРолайт построен на sp - при записи пакета не нужны их номера
	
	Если ЗначениеЗаполнено(ОбъектВыгрузки.Номенклатура) Тогда
		ВыгрузитьСырьеИГПизСпецификацииИЗадания(Соединение, ОбъектВыгрузки, Узел, Выгружать, ПРГАДОКОМ, СтруктураПараметров);
	КонецЕсли;	

	
	//Обновляем справочник	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "rcv_plan_" + СокрЛП(ОбъектВыгрузки.Номер)+"_"+ Сокрлп(Формат(ОбъектВыгрузки.Дата,"ДФ=yy-MM-dd")) );
		
	//Сформируем текст пакета
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcv_plan");
	ЗаписьXML.ЗаписатьАтрибут("plan_code", УИД);
	ЗаписьXML.ЗаписатьАтрибут("date"	, СокрЛП(Формат(ОбъектВыгрузки.дата,"ДФ=dd.MM.yyyy")));
	ЗаписьXML.ЗаписатьАтрибут("plan_active_user", СокрЛП(ОбъектВыгрузки.Ответственный));
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("plan_dtl");
		ЗаписьXML.ЗаписатьАтрибут("mtr_code", СокрЛП(ОбъектВыгрузки.Номенклатура.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьАтрибут("amount", СокрЛП(Формат(ОбъектВыгрузки.Количество,"ЧГ=0")));
		ЗаписьXML.ЗаписатьАтрибут("fact_amount", СокрЛП(Формат(ОбъектВыгрузки.КоличествоФакт,"ЧГ=0")));
		ЗаписьXML.ЗаписатьАтрибут("pln_weight", СокрЛП(Формат(ОбъектВыгрузки.Количество,"ЧГ=0")));
		ЗаписьXML.ЗаписатьАтрибут("dtl_code", "1");
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Пролайт_Задания_и_Спецификации(Соединение, НомерПакета, "rcv_plan", ЗаписьXML, Узел, ОбъектВыгрузки.Ссылка, ПРГАДОКОМ);	
	КонецЕсли; 	
		
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов, ОбъектВыгрузки.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Документ","СП_ЗаданиеНаСмену",ОбъектВыгрузки.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка", Истина);
	КонецЕсли;	
		
	Возврат мВозрат;
	
КонецФункции

Функция ВыгрузитьСпецификацию(Соединение, Объект, Узел, Выгружать, ПРГАДОКОМ, СтруктураПараметров)
	Перем Блокировка, РезВыгрузки, НужноУдалятьРегистрацию;

	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат Истина;
	КонецЕсли;	
	
    ОбъектВыгрузки = ПрочитатьДанныеПоСсылке(Объект, Блокировка, РезВыгрузки, Узел, СтруктураПараметров, НужноУдалятьРегистрацию, Выгружать);
	
	Если ОбъектВыгрузки =  Неопределено тогда
		возврат РезВыгрузки;
	КонецЕсли;	
	
	УИД = СокрЛП(ОбъектВыгрузки.Ссылка.УникальныйИдентификатор());
	
	НомерПакета = 0; //Обмен с ПРолайт построен на sp - при записи пакета не нужны их номера
	
	//выгрузим сырье и готовую продукцию
	Для Каждого ТекСтрока Из ОбъектВыгрузки.ВыходныеИзделия Цикл
		ВыгрузитьСырьеИГПизСпецификацииИЗадания(Соединение, ТекСтрока, Узел, Выгружать, ПРГАДОКОМ, СтруктураПараметров);
	КонецЦикла;	
	
	Для Каждого ТекСтрока Из ОбъектВыгрузки.ИсходныеКомплектующие  Цикл
		ВыгрузитьСырьеИГПизСпецификацииИЗадания(Соединение, ТекСтрока, Узел, Выгружать, ПРГАДОКОМ, СтруктураПараметров);
	КонецЦикла;	
	
	
	//Обновляем справочник	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "rcv_rcp_" + СокрЛП(ОбъектВыгрузки.Код)+"_"+СокрЛП(ОбъектВыгрузки.КодВерсии));
		
	//Сформируем текст пакета
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcv_rcp");
	ЗаписьXML.ЗаписатьАтрибут("rcp_name", СтрЗаменить(СокрЛП(ОбъектВыгрузки.Наименование),"'","''"));
	ЗаписьXML.ЗаписатьАтрибут("rcp_code"	, УИД);
	ЗаписьXML.ЗаписатьАтрибут("version", СокрЛП(ОбъектВыгрузки.КодВерсии));
	ЗаписьXML.ЗаписатьАтрибут("date", СокрЛП(Формат(ОбъектВыгрузки.ДатаУтверждения,"ДФ=dd.MM.yyyy")));
	ЗаписьXML.ЗаписатьАтрибут("rcp_active_user", СокрЛП(ОбъектВыгрузки.Ответственный));
	ЗаписьXML.ЗаписатьАтрибут("line_name", СокрЛП(ОбъектВыгрузки.ЛинияНаименование));
	ЗаписьXML.ЗаписатьАтрибут("line_code", СокрЛП(ОбъектВыгрузки.ЛинияКод));

	
	//запишем выходные изделия
	Для Каждого ТекСтрока Из ОбъектВыгрузки.ВыходныеИзделия Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("output_mtr");
		ЗаписьXML.ЗаписатьАтрибут("output_mtr_code", СокрЛП(ТекСтрока.Номенклатура.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьАтрибут("output_mtr_name", СтрЗаменить(СокрЛП(ТекСтрока.НоменклатураНаименование),"'","''"));
		ЗаписьXML.ЗаписатьАтрибут("output_mtr_amount", СокрЛП(Формат(ТекСтрока.Количество,"ЧЦ=15; ЧДЦ=3; ЧГ=0")));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	
	//запишем исходные комплектующие
	Для Каждого ТекСтрока Из ОбъектВыгрузки.ИсходныеКомплектующие Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("rcp_dtl");
		ЗаписьXML.ЗаписатьАтрибут("rcp_dtl_code",СокрЛП(Формат(ТекСтрока.НомерСтроки,"ЧЦ=10; ЧДЦ=0; ЧГ=0")));
		ЗаписьXML.ЗаписатьАтрибут("input_mtr_code", СокрЛП(ТекСтрока.Номенклатура.УникальныйИдентификатор()));
		ЗаписьXML.ЗаписатьАтрибут("input_mtr_amount", СокрЛП(Формат(ТекСтрока.Количество,"ЧЦ=15; ЧДЦ=8; ЧГ=0")));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;	
		
	//конец изменений 
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();

		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Пролайт_Задания_и_Спецификации(Соединение, НомерПакета, "rcv_rcp", ЗаписьXML, Узел, ОбъектВыгрузки.Ссылка, ПРГАДОКОМ);	
	КонецЕсли; 	
		
	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрОбъектов, ОбъектВыгрузки.Ссылка);
		Если НужноУдалятьРегистрацию Тогда
			ПроверитьИУдалитьРегистрациюИзменений("Справочник","СпецификацииНоменклатуры",ОбъектВыгрузки.Ссылка, Узел, Блокировка, СтруктураПараметров);
		КонецЕсли;	
		СтруктураПараметров.Вставить("ПолнаяВыгрузка", Истина);
	КонецЕсли;	
		
	Возврат мВозрат;
	
КонецФункции

Функция ВыгрузитьСырьеИГПизСпецификацииИЗадания(Соединение, ТекСтрока, Узел, Выгружать, ПРГАДОКОМ, СтруктураПараметров);
	
	Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) тогда
		возврат истина;
	конецесли;	
	
	Если СтруктураПараметров.ТаблВыгрСырияИГП.Найти(ТекСтрока.Номенклатура,"Ссылка") <> Неопределено Тогда
		возврат истина;
	КонецЕсли;	
	
	//добавим выгрузка по группе
	Родитель = ТекСтрока.НоменклатураРодитель;
	Если ЗначениеЗаполнено(Родитель) Тогда
		НомерПакета = 0;
		Пока ЗначениеЗаполнено(Родитель) Цикл
			
			Если СтруктураПараметров.ТаблВыгрСырияИГП.Найти(Родитель,"Ссылка") <> Неопределено Тогда
				прервать;
			КонецЕсли;	
			
			АРеквРодителя = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаСпрСложНПоля(Родитель,Новый Структура("Наименование,Ссылка,Родитель,Код"));
			Если АРеквРодителя = Неопределено тогда
				прервать;
			КонецЕсли;	
			ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "rcv_mtr_grp_" + СокрЛП(АРеквРодителя.Код));
			ЗаписьXML.ЗаписатьНачалоЭлемента("rcv_mtr_grp");
			ЗаписьXML.ЗаписатьАтрибут("material_group_name",СтрЗаменить(СокрЛП(АРеквРодителя.Наименование),"'","''"));
			ЗаписьXML.ЗаписатьАтрибут("material_group_code", СокрЛП(АРеквРодителя.Ссылка.УникальныйИдентификатор()));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрСырияИГП, АРеквРодителя.Ссылка);
			
			мВозврат = ЗапишемДанные_в_Пролайт_Задания_и_Спецификации(Соединение, НомерПакета, "rcv_mtr_grp", ЗаписьXML, Узел, АРеквРодителя.Ссылка, ПРГАДОКОМ);	
			
			Если не мВозврат Тогда
				возврат Ложь;
			КонецЕсли;	
			///убрать ниже если потребуется выгружать всех родителей
		  	прервать;
		КонецЦикла;	
	КонецЕсли;	
	
	///выгрузка самой номенклатуры
	
	ЗаписьXML = СоздадимОбъектДляЗаписиXML(Узел, "rcv_mtr_" + СокрЛП(ТекСтрока.НоменклатураКод));	
	ЗаписьXML.ЗаписатьНачалоЭлемента("rcv_mtr");
	ЗаписьXML.ЗаписатьАтрибут("material_name",СтрЗаменить(СокрЛП(ТекСтрока.НоменклатураНаименование),"'","''"));
	ЗаписьXML.ЗаписатьАтрибут("material_code",СокрЛП(ТекСтрока.НоменклатураКод));
	ЗаписьXML.ЗаписатьАтрибут("material_group_code",СокрЛП(ТекСтрока.НоменклатураРодитель.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьАтрибут("fat",СокрЛП(ТекСтрока.МДЖ));
	ЗаписьXML.ЗаписатьАтрибут("protein",СокрЛП(ТекСтрока.МДБ));
	ЗаписьXML.ЗаписатьАтрибут("level",СокрЛП(ТекСтрока.МДУ));
	ЗаписьXML.ЗаписатьАтрибут("somo",СокрЛП(ТекСтрока.СОМО));
	ЗаписьXML.ЗаписатьАтрибут("drysub",СокрЛП(ТекСтрока.СВ));
	ЗаписьXML.ЗаписатьАтрибут("sucrose",СокрЛП(ТекСтрока.Сахароза));
	
	ЗаписьXML.ЗаписатьАтрибут("measure_values",СокрЛП(ТекСтрока.НоменклатураЕдиницаХраненияОстатков));	
	ЗаписьXML.ЗаписатьАтрибут("material_uid",СокрЛП(ТекСтрока.Номенклатура.УникальныйИдентификатор()));	
	ЗаписьXML.ЗаписатьАтрибут("material_product_type",СокрЛП(ТекСтрока.НоменклатураВидНоменклатуры));	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
	Если Узел.ТестоваяВыгрузка Тогда	
		ЗаписьXML.Закрыть();
		мВозрат = Истина;
	Иначе
		мВозрат = ЗапишемДанные_в_Пролайт_Задания_и_Спецификации(Соединение, НомерПакета, "rcv_mtr", ЗаписьXML, Узел, ТекСтрока.Номенклатура, ПРГАДОКОМ);	
	КонецЕсли; 	

	Если мВозрат Тогда
		ДобавитьИнформациюВыгрОбъекте(СтруктураПараметров.ТаблВыгрСырияИГП, ТекСтрока.Номенклатура);
	конецесли;
	
	возврат мВозврат;
		
КонецФункции
//конец изменений 

//начало изменений Ожиганов А. 11.09.2017 66210 дополнение к выгрузки в пролайт. спецификации, задания на смену 
//ПолучитьВСтруктуреСпецификацию(ВыбСсылка,СтруктураПараметров);
 Функция ПолучитьВСтруктуреСпецификацию(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_Спр_СпецификацииНоменклатуры_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	МАКСИМУМ(ПоЛиниям.ТочкаМаршрута) КАК ТочкаМаршрута,
		                      |	ПоЛиниям.Ссылка
		                      |ПОМЕСТИТЬ Линии
		                      |ИЗ
		                      |	Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК ПоЛиниям
		                      |ГДЕ
		                      |	ПоЛиниям.Ссылка = &Ссылка
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ПоЛиниям.Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	Линии.Ссылка,
		                      |	Линии.ТочкаМаршрута.Наименование КАК ЛинияНаименование,
		                      |	Линии.ТочкаМаршрута.Код КАК ЛинияКод
		                      |ПОМЕСТИТЬ ИнфоЛинии
		                      |ИЗ
		                      |	Линии КАК Линии
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	СпецификацииНоменклатуры.Ссылка,
		                      |	СпецификацииНоменклатуры.Код,
		                      |	СпецификацииНоменклатуры.Наименование,
		                      |	СпецификацииНоменклатуры.ЭтоГруппа,
		                      |	СпецификацииНоменклатуры.КодВерсии,
		                      |	СпецификацииНоменклатуры.Активная,
		                      |	СпецификацииНоменклатуры.ДатаУтверждения,
		                      |	ЕСТЬNULL(СпецификацииНоменклатуры.Ответственный.Наименование, """") КАК Ответственный,
		                      |	СпецификацииНоменклатуры.ПометкаУдаления,
		                      |	ЕСТЬNULL(ИнфоЛинии.ЛинияНаименование, """") КАК ЛинияНаименование,
		                      |	ЕСТЬNULL(ИнфоЛинии.ЛинияКод, """") КАК ЛинияКод
		                      |ИЗ
		                      |	Справочник.СпецификацииНоменклатуры КАК СпецификацииНоменклатуры
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ ИнфоЛинии КАК ИнфоЛинии
		                      |		ПО СпецификацииНоменклатуры.Ссылка = ИнфоЛинии.Ссылка
		                      |ГДЕ
		                      |	СпецификацииНоменклатуры.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	СпецификацииНоменклатурыВыходныеИзделия.Количество,
		                      |	СпецификацииНоменклатурыВыходныеИзделия.Номенклатура,
		                      |	ЕСТЬNULL(СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.Наименование, """") КАК НоменклатураНаименование,
		                      |	СпецификацииНоменклатурыВыходныеИзделия.НомерСтроки,
		                      |	СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.НСИ_МДЖ КАК МДЖ,
		                      |	СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.НСИ_МДБ КАК МДБ,
		                      |	СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.НСИ_МДУ КАК МДУ,
		                      |	СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.ПРГ_Базис КАК СВ,
		                      |	ЕСТЬNULL(СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.ПРГ_Базис, 0) - ЕСТЬNULL(СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.НСИ_МДЖ, 0) КАК СОМО,
		                      |	СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.НСИ_Сахароза КАК Сахароза,
		                      |	СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.Родитель,
		                      |	ЕСТЬNULL(СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.Код, """") КАК НоменклатураКод,
		                      |	ПРЕДСТАВЛЕНИЕ(СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.ВидНоменклатуры) КАК НоменклатураВидНоменклатуры,
		                      |	ПРЕДСТАВЛЕНИЕ(СпецификацииНоменклатурыВыходныеИзделия.Номенклатура.ЕдиницаХраненияОстатков) КАК НоменклатураЕдиницаХраненияОстатков
		                      |ИЗ
		                      |	Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК СпецификацииНоменклатурыВыходныеИзделия
		                      |ГДЕ
		                      |	СпецификацииНоменклатурыВыходныеИзделия.Ссылка = &Ссылка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка,
		                      |	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура,
		                      |	СпецификацииНоменклатурыИсходныеКомплектующие.НомерСтроки,
		                      |	СпецификацииНоменклатурыИсходныеКомплектующие.Количество,
		                      |	ЕСТЬNULL(СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура, """") КАК НоменклатураНаименование,
		                      |	ВЫРАЗИТЬ(СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Справочник.Номенклатура).НСИ_МДЖ КАК МДЖ,
		                      |	ВЫРАЗИТЬ(СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Справочник.Номенклатура).НСИ_МДБ КАК МДБ,
		                      |	ВЫРАЗИТЬ(СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Справочник.Номенклатура).НСИ_МДУ КАК МДУ,
		                      |	ЕСТЬNULL(ВЫРАЗИТЬ(СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Справочник.Номенклатура).ПРГ_Базис, 0) - ЕСТЬNULL(ВЫРАЗИТЬ(СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Справочник.Номенклатура).НСИ_МДЖ, 0) КАК СОМО,
		                      |	ВЫРАЗИТЬ(СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Справочник.Номенклатура).ПРГ_Базис КАК СВ,
		                      |	ВЫРАЗИТЬ(СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Справочник.Номенклатура).НСИ_Сахароза КАК Сахароза,
		                      |	ВЫРАЗИТЬ(СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Справочник.Номенклатура).Родитель КАК НоменклатураРодитель,
		                      |	ЕСТЬNULL(ВЫРАЗИТЬ(СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Справочник.Номенклатура).Код, """") КАК НоменклатураКод,
		                      |	ПРЕДСТАВЛЕНИЕ(СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура.ВидНоменклатуры) КАК НоменклатураВидНоменклатуры,
		                      |	ПРЕДСТАВЛЕНИЕ(СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура.ЕдиницаХраненияОстатков) КАК НоменклатураЕдиницаХраненияОстатков
		                      |ИЗ
		                      |	Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СпецификацииНоменклатурыИсходныеКомплектующие
		                      |ГДЕ
		                      |	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	//приведем массив к обрабатываемому
	Массивпакетов = Запрос.ВыполнитьПакет();
	Массивпакетов.Удалить(0);
	Массивпакетов.Удалить(0);
	
	возврат ПреобразоватьМассПакетовВСтруктуру(Массивпакетов,"ВыходныеИзделия","ИсходныеКомплектующие");
	
КонецФункции

 Функция ПолучитьВСтруктуреЗаданиенаСмену(Ссылка,СтруктПарЗапроса)
	Перем Запрос;
	ИмяСвойства = "Запрос_Док_ЗаданиенаСмену_ПоСсылке";
	
	Если Не СтруктПарЗапроса.Свойство(ИмяСвойства,Запрос) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СП_ЗаданиеНаСмену.Ссылка,
		                      |	СП_ЗаданиеНаСмену.Номер,
		                      |	СП_ЗаданиеНаСмену.Дата,
		                      |	ПРЕДСТАВЛЕНИЕ(СП_ЗаданиеНаСмену.Ответственный) КАК Ответственный,
		                      |	СП_ЗаданиеНаСмену.Номенклатура,
		                      |	СП_ЗаданиеНаСмену.Количество,
		                      |	СП_ЗаданиеНаСмену.КоличествоФакт,
		                      |	ЕСТЬNULL(СП_ЗаданиеНаСмену.Номенклатура, """") КАК НоменклатураНаименование,
		                      |	ВЫРАЗИТЬ(СП_ЗаданиеНаСмену.Номенклатура КАК Справочник.Номенклатура).НСИ_МДЖ КАК МДЖ,
		                      |	ВЫРАЗИТЬ(СП_ЗаданиеНаСмену.Номенклатура КАК Справочник.Номенклатура).НСИ_МДБ КАК МДБ,
		                      |	ВЫРАЗИТЬ(СП_ЗаданиеНаСмену.Номенклатура КАК Справочник.Номенклатура).НСИ_МДУ КАК МДУ,
		                      |	ЕСТЬNULL(ВЫРАЗИТЬ(СП_ЗаданиеНаСмену.Номенклатура КАК Справочник.Номенклатура).ПРГ_Базис, 0) - ЕСТЬNULL(ВЫРАЗИТЬ(СП_ЗаданиеНаСмену.Номенклатура КАК Справочник.Номенклатура).НСИ_МДЖ, 0) КАК СОМО,
		                      |	ВЫРАЗИТЬ(СП_ЗаданиеНаСмену.Номенклатура КАК Справочник.Номенклатура).ПРГ_Базис КАК СВ,
		                      |	ВЫРАЗИТЬ(СП_ЗаданиеНаСмену.Номенклатура КАК Справочник.Номенклатура).НСИ_Сахароза КАК Сахароза,
		                      |	ВЫРАЗИТЬ(СП_ЗаданиеНаСмену.Номенклатура КАК Справочник.Номенклатура).Родитель КАК НоменклатураРодитель,
		                      |	ЕСТЬNULL(ВЫРАЗИТЬ(СП_ЗаданиеНаСмену.Номенклатура КАК Справочник.Номенклатура).Код, """") КАК НоменклатураКод,
		                      |	СП_ЗаданиеНаСмену.ПометкаУдаления,
		                      |	СП_ЗаданиеНаСмену.Проведен,
		                      |	ПРЕДСТАВЛЕНИЕ(СП_ЗаданиеНаСмену.Номенклатура.ВидНоменклатуры) КАК НоменклатураВидНоменклатуры,
		                      |	ПРЕДСТАВЛЕНИЕ(СП_ЗаданиеНаСмену.Номенклатура.ЕдиницаХраненияОстатков) КАК НоменклатураЕдиницаХраненияОстатков
		                      |ИЗ
		                      |	Документ.СП_ЗаданиеНаСмену КАК СП_ЗаданиеНаСмену
		                      |ГДЕ
		                      |	СП_ЗаданиеНаСмену.Ссылка = &Ссылка");
						  
		СтруктПарЗапроса.Вставить(ИмяСвойства,Запрос);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	МассПакетов  = Новый Массив;
	МассПакетов.Добавить(Запрос.Выполнить());
	
	возврат ПреобразоватьМассПакетовВСтруктуру(МассПакетов);
КонецФункции

Функция ЗапишемДанные_в_Пролайт_Задания_и_Спецификации(Соединение, НомерПакета, Тэг, ЗаписьXML, Узел, ОбъектОшибки, ПРГАДОКОМ) Экспорт
    		
	ИсходнаяСтрока = ЗаписьXML.Закрыть();
				
	ОбщаяСтрока = "<?xml version=""1.0"" encoding=""utf-16""?>";
	
	ТекстЗапроса = "Exec sp_MES_Message_Write N'"+Тэг+"', N'"+ОбщаяСтрока+ИсходнаяСтрока+"'";
	
	Рез = ПРГВыполнитьЗапросБезПар(Соединение, ТекстЗапроса,Узел, ПРГАДОКОМ);
	Если Рез = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Обмен с Пролайт", УровеньЖурналаРегистрации.Предупреждение,,ОбъектОшибки, "Не удалось добавить заголовок пакета");
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;

КонецФункции
//конец изменений 

