&НаСервере
Перем ОбработкаОбъект;
&НаСервере
Перем ОснМодуль;
&НаКлиенте
Перем ПользователиТекущийИзменен;
&НаКлиенте
Перем ПользователиТекущий;
&НаСервере
Перем ПользователиМВТ;

//Перем ОсобенностиСообщений;

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.Инициализировать(ОсновнойМодуль());
				
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Функция ОсновнойМодуль()
	Если ОснМодуль = Неопределено Тогда
		ОснМодуль = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища).ОбработкаОбъект;
	КонецЕсли;
	Возврат ОснМодуль;
КонецФункции

&НаКлиенте
Процедура ПредупреждениеМеркурий_Оповещение(Парам1, Парам2) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеМеркурий(ТекстПредупреждения)
	
	Если СокрЛП(ТекстПредупреждения) = "" Тогда
		Возврат;
	КонецЕсли;
	
	Кнопки = новый СписокЗначений;
	Кнопки.Добавить("Всё понятно.");
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ПредупреждениеМеркурий_Оповещение"",ЭтаФорма),ТекстПредупреждения,Кнопки,,,""Контур.Меркурий"")");
	Иначе
		Вопрос(ТекстПредупреждения, Кнопки,,,"Контур.Меркурий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбъектаМодально(ИмяФормы, ПараметрыФормы = Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено,РежимБлокирования = Неопределено)
	//отказ от модальности
	Если РежимБлокирования = Неопределено Тогда
		РежимБлокирования=	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	Если ПараметрыФормы=Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресХранилища",			Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("IDОсновнойФормы",			Параметры.IDОсновнойФормы);
	ПараметрыФормы.Вставить("КэшироватьМодульОбъекта",	Параметры.КэшироватьМодульОбъекта);
	
	Если ВладелецОбработчика = Неопределено Тогда
		ВладелецОбработчика=	ЭтаФорма;
	КонецЕсли;
	
	Если ИмяОбработчика = Неопределено Тогда
		ОписаниеОбработчика=	Неопределено;
	Иначе	
		Выполнить("ОписаниеОбработчика=	Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика)");
	КонецЕсли;
	
	Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецОбработчика, , , ,  ОписаниеОбработчика, РежимБлокирования)");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ПолноеИмяФормы, ПараметрыФормы = Неопределено , ВладелецФормы  = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь)
	
	Если ПараметрыФормы=Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	Если ВладелецФормы = Неопределено Тогда
		ВладелецФормы =	ЭтаФорма;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресХранилища",							Параметры.АдресХранилища);
	//ПараметрыФормы.Вставить("IDОсновнойФормы",							Параметры.IDОсновнойФормы);
	//ПараметрыФормы.Вставить("КэшироватьМодульОбъекта",					Параметры.КэшироватьМодульОбъекта);
	
	ПолучаемаяФорма=	ПолучитьФорму(ПолноеИмяФормы
										, ПараметрыФормы
										, ВладелецФормы
										, КлючУникальности);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы=	ВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

&НаСервере
Функция ПолучитьGUIDПлощадки()
	
	СтрокаСGUID = ПлощадкаПроизводитель.ДополнительныеРеквизиты.Найти("GUID","ИмяРеквизита");
	Если СтрокаСGUID = Неопределено Тогда
		Возврат Неопределено; 
	КонецЕсли;
	GUIDПлощадки = СтрокаСGUID.Значение;
	
    Возврат GUIDПлощадки;
	
КонецФункции // ПолучитьGUIDПлощадки()

&НаКлиенте
Процедура ДеревоНастроекЗначениеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Функция ПолучитьТипЗначенияОбъекта(ИмяТипа)
	Возврат ОсновнойМодуль().ПолучитьТипЗначенияОбъекта(ИмяТипа);
КонецФункции

&НаСервере
Функция ПолучитьСписокПлощадок()
	
	ТаблицаВсехЭлементов = МодульОбъекта().ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийПлощадка");
	
	СписокПлощадок = Новый СписокЗначений;
	
	Для Каждого НашЭлемент Из ТаблицаВсехЭлементов Цикл
		НоваяПлощадка = СписокПлощадок.Добавить(НашЭлемент.ДопСправочникСсылка,НашЭлемент.Наименование+" / "+НашЭлемент.GUID);
	КонецЦикла;
	
	Возврат СписокПлощадок;

КонецФункции

&НаКлиенте
Процедура ВыбратьОрганизациюПлощадкуОповещение(ВыбЭлемент, ОрганизацияИлиПлощадка) Экспорт
	
	Если Не ВыбЭлемент = Неопределено Тогда
		Если ОрганизацияИлиПлощадка = "Организация" Тогда
			Организация = ВыбЭлемент.Значение;
			ОрганизацияGUID = ПолучитьДопРеквизитЭлементаДопСправочника(Организация,"GUID");
		ИначеЕсли ОрганизацияИлиПлощадка = "ОрганизацияСЖ" Тогда
			ОрганизацияСЖ = ВыбЭлемент.Значение;
			ОрганизацияСЖGUID = ПолучитьДопРеквизитЭлементаДопСправочника(ОрганизацияСЖ,"GUID");
		ИначеЕсли ОрганизацияИлиПлощадка = "Площадка" Тогда
			Площадка = ВыбЭлемент.Значение;
			ПлощадкаGUID = ПолучитьДопРеквизитЭлементаДопСправочника(Площадка,"GUID");
		ИначеЕсли ОрганизацияИлиПлощадка = "ПлощадкаСЖ" Тогда
			ПлощадкаСЖ = ВыбЭлемент.Значение;
			ПлощадкаСЖGUID = ПолучитьДопРеквизитЭлементаДопСправочника(ПлощадкаСЖ,"GUID");
		ИначеЕсли ОрганизацияИлиПлощадка = "ПлощадкаПроизводитель" Тогда
			ПлощадкаПроизводитель = ВыбЭлемент.Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПлощадкаНачалоВыбора(ОрганизацияИлиПлощадка, ЭлементФормы)
	СтандартнаяОбработка = Ложь;
	
	//если это не площадка производителя!!!
	//ОрганизацияGUID = "";
	////Если НетПотериДанныхИЛИПользовательНаНееИдет() Тогда
		Инвентаризация.Очистить();
	////Иначе
	////	Возврат;
	////КонецЕсли;
	//
	СписокЭлем = ИнвентаризацияПолучитьСписокОрганизацийПлощадок(ОрганизацияИлиПлощадка);
	Если СписокЭлем.Количество() = 0 Тогда
		ПредупреждениеМеркурий("Похоже что вы еще не сопоставили ни одной своей организации/площадки");
	КонецЕсли;
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВыборИзСписка(Новый ОписаниеОповещения(""ВыбратьОрганизациюПлощадкуОповещение"", ЭтаФорма, ОрганизацияИлиПлощадка), СписокЭлем, ЭлементФормы)");
	Иначе
		ВыбЭлемент = ВыбратьИзСписка(СписокЭлем, ЭлементФормы);
		ВыбратьОрганизациюПлощадкуОповещение(ВыбЭлемент, ОрганизацияИлиПлощадка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЭтаФорма.Заголовок =  ЭтаФорма.Заголовок+" "+ МодульОбъекта().ПолучитьНомерРелиза_КонтурEDI();
	
	//УчетныеЗаписи
	ТаблицаТекХС = МодульОбъекта().ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийУчетнаяЗапись", Неопределено);
	Для Каждого Эл Из ТаблицаТекХС Цикл
		НоваяУЗ = УчетныеЗаписи.Добавить();
		НоваяУЗ.ЛогинAPI 	= МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"ЛогинAPI");
		НоваяУЗ.ПарольAPI 	= МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"ПарольAPI");
		НоваяУЗ.APIKey 		= МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"APIKey");
		НоваяУЗ.ЛогинПользователя = МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"ЛогинПользователя");
		НоваяУЗ.IssuerId 	= МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"IssuerId");
	КонецЦикла;	

	 
	МассивНастроек=ОсновнойМодуль().ПолучитьМассивДополнительныхНастроекИзМакета("Меркурий");
	СтруктураНастроек=Новый Структура;
	Для Каждого Эл Из МассивНастроек Цикл
		СтруктураНастроек.Вставить(Эл,ОсновнойМодуль().ПолучитьКонстантуEDI(Эл));
	КонецЦикла;	
	
	ДеревоОбъект=РеквизитФормыВЗначение("ДеревоНастроек");
	ОсновнойМодуль().СоздатьДеревоНастроек(ДеревоОбъект,"Меркурий",СтруктураНастроек);
	ЗначениеВРеквизитФормы(ДеревоОбъект,"ДеревоНастроек");
	
	ИнвентаризацияОтобразитьВсеКолонкиНажатиеНаСервере();//отожмем
	ПродукцияПроизводителяОтобразитьВсеКолонкиНажатиеНаСервере();//отожмем
	
	Попытка
		СправочникНоменклатуры.Параметры.УстановитьЗначениеПараметра("Партнер",  МодульОбъекта().ПартнерМеркурий());
		//Дерево Ветис
		дзНоменклатураМеркурий = МодульОбъекта().ДеревоПродукцииВетис();
		ЗначениеВРеквизитФормы(дзНоменклатураМеркурий,"НоменклатураМеркурий");
				
		//Хоз субъекты и площадки
		ПерезаполнитьСписокХС();
		ПерезаполнитьСписокПредприятий();
		
		//Единицы измерения
		тзЕдиницыИзмерения = МодульОбъекта().ПолучитьСоответствияВсехЕдиницИзмеренияМеркурий();
		ЗначениеВРеквизитФормы(тзЕдиницыИзмерения,"ЕдиницыИзмерения");
	
		тзЕдиницыИзмеренияУпаковок = МодульОбъекта().ПолучитьСоответствияВсехЕдиницИзмеренияУпаковокМеркурий();
		ЗначениеВРеквизитФормы(тзЕдиницыИзмеренияУпаковок,"ЕдиницыИзмеренияУпаковок");
		
		Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(ТаблицаТекХС.ВыгрузитьКолонку("Ссылка"));//СвязанныйСправочник
		
		СлужебнаяЗаполнитьТаблицуАктуальностиВСД();
		СлужебнаяЗаполнитьТаблицуАктуальностиОСЖ();
	
	Исключение
		Сообщить("Похоже, тут какая-то ошибка, обратитесь к внедренцу."+ОписаниеОшибки())
	КонецПопытки;
	
	////установим доступность колонок табличных полей, вызовем событие ПМ "МеркурийПриОткрытииФормыНастроек".
	//МодульОбъекта().УстановитьПараметрыЭлементовФормы(Элементы.ЕдиницыИзмерения,"Наименование,GUID,UUID",Новый Структура("ТолькоПросмотр",Истина));
	//МодульОбъекта().УстановитьПараметрыЭлементовФормы(Элементы.ЕдиницыИзмерения,"Ссылка",Новый Структура("ИзменятьВидимость",Ложь));
	//МодульОбъекта().УстановитьПараметрыЭлементовФормы(Элементы.ЕдиницыИзмеренияУпаковок,"Наименование,UUID",Новый Структура("ТолькоПросмотр",Истина));
	//МодульОбъекта().УстановитьПараметрыЭлементовФормы(Элементы.ЕдиницыИзмеренияУпаковок,"Ссылка",Новый Структура("ИзменятьВидимость",Ложь));
	//МодульОбъекта().УстановитьПараметрыЭлементовФормы(Элементы.ХозяйствующиеСубъекты,"Наименование",Новый Структура("ТолькоПросмотр",Истина));
	//МодульОбъекта().УстановитьПараметрыЭлементовФормы(Элементы.Предприятия,"Наименование",Новый Структура("ТолькоПросмотр",Истина));
	//
	//МаскаGUID = "hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh";
	//МодульОбъекта().УстановитьПараметрыЭлементовФормы(Элементы.ХозяйствующиеСубъекты,"GUID",Новый Структура("Маска",МаскаGUID));
	//МодульОбъекта().УстановитьПараметрыЭлементовФормы(Элементы.Предприятия,"GUID",Новый Структура("Маска",МаскаGUID));
	//
	//МодульОбъекта().УстановитьПараметрыЭлементовФормы(Элементы.ХозяйствующиеСубъекты,"ДопСправочникСсылка",Новый Структура("ИзменятьВидимость",Ложь));
	//МодульОбъекта().УстановитьПараметрыЭлементовФормы(Элементы.Предприятия,"ДопСправочникСсылка",Новый Структура("ИзменятьВидимость",Ложь));
	//МодульОбъекта().УстановитьПараметрыЭлементовФормы(Элементы.ТаблицаПродукцияПроизводителя,"productItemUUID",Новый Структура("РедактированиеТекста",Ложь));
	//МодульОбъекта().УстановитьПараметрыЭлементовФормы(Элементы.ТаблицаПродукцияПроизводителя,"ХарактеристикаНоменклатуры,productItemGUID,Артикул,АртикулМеркурий,Наименование,НаименованиеМеркурий,subProductGuid,subProductGuidМеркурий,GTIN,GTINМеркурий,GOST,GOSTМеркурий,СоответствуетГОСТу,СоответствуетГОСТуМеркурий",Новый Структура("ТолькоПросмотр",Истина));

КонецПроцедуры

&НаСервере
Процедура ОбработчикНеПозволяемЗабытьКэшНаСервере()
	МодульОбъекта();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНеПозволяемЗабытьКэш()
	ОбработчикНеПозволяемЗабытьКэшНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбработчикНеПозволяемЗабытьКэш", 300);
	УстановитьКартинкуСостоянияРазганиченияПравПользователей(ИспользуетсяРазграничениеПрав());
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	СтруктураНастроек=Новый Структура;
	ОсновнойМодуль().ДобавитьСтрокиДереваВСтруктуру(ДеревоНастроек,СтруктураНастроек);
	
	//возможно валидации ....
	
	СтандартнаяОбработкаEDI = Истина;
	ОсновнойМодуль().ОбработкаСобытияПодключаемогоМодуля("МеркурийНастройкиПередЗаписью",СтандартнаяОбработкаEDI,Новый Структура("Форма,СтруктураНастроек",ЭтаФорма,СтруктураНастроек));
	Если СтандартнаяОбработкаEDI<>Истина Тогда
		Возврат;
	КонецЕсли;
	
	фТребуетсяОбновлениеДереваНоменклатурыМеркурия = (СтруктураНастроек.Свойство("М_ВидыПродукции") и СтруктураНастроек.М_ВидыПродукции<>МодульОбъекта().ПолучитьКонстантуEDI("М_ВидыПродукции"));
	
	Для Каждого Эл из СтруктураНастроек Цикл
		ОсновнойМодуль().УстановитьКонстантуEDI(Эл.Ключ, Эл.Значение);
	КонецЦикла;
	
	////ЗаписатьЕдиницыИзмерения
	МодульОбъекта().НастройкиЗаписатьЕдиницыИзмерения(ЕдиницыИзмерения);
	МодульОбъекта().НастройкиЗаписатьЕдиницыИзмеренияУпаковок(ЕдиницыИзмеренияУпаковок);
	
	Если фТребуетсяОбновлениеДереваНоменклатурыМеркурия Тогда
		дзНоменклатураМеркурий = МодульОбъекта().ДеревоПродукцииВетис(ФильтрНоменклатурыМеркурий,Истина);
		ЗначениеВРеквизитФормы(дзНоменклатураМеркурий,"НоменклатураМеркурий");
	КонецЕсли;
	
	//кажется что кнопка Записать должна стать общей для всех вкладок.
	//подумать и возможно переделат ьна сохранение всего (с другой стороны мы не дадим сохранить тек. данные из-зи другой закладки)
	
	ОсновнойМодуль().НачатьТранзакцию_КонтурEDI();
	МодульОбъекта().СохранитьСписокЭлементовСправочникаМеркурий("МеркурийХС",ХозяйствующиеСубъекты);
	МодульОбъекта().СохранитьСписокЭлементовСправочникаМеркурий("МеркурийПлощадка",Предприятия);
	ОсновнойМодуль().ЗафиксироватьТранзакцию_КонтурEDI();

КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьНаСервере();
	//УстановитьКартинкуСостоянияРазганиченияПравПользователей();
КонецПроцедуры

//******************************* Учетные записи **********************************

&НаКлиенте
Процедура УчетныеЗаписиДобавить(Команда)
	УчетныеЗаписи.Добавить();
КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиУдалить(Команда)
	текДанные = Элементы.УчетныеЗаписи.ТекущиеДанные;
	Если НЕ текДанные = Неопределено Тогда
		УчетныеЗаписи.Удалить(УчетныеЗаписи.Индекс(текДанные));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УчетныеЗаписиЗаписатьНаСервере()
	МодульОбъекта().НастройкиЗаписатьУчетныеЗаписи(РеквизитФормыВЗначение("УчетныеЗаписи"));
КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиЗаписать(Команда)
	УчетныеЗаписиЗаписатьНаСервере();
КонецПроцедуры

//******************************* Пользователи **********************************
&НаСервере
Функция НастройкаПользователейЕстьАдминистративныеПрава()
	Возврат ПравоДоступа("Администрирование", Метаданные);
КонецФункции

&НаСервере
Функция НастройкаПользователейЗаполнитьСписок()
	МодульОбъекта().НастройкаПользователейЗаполнитьСписок(СписокПользователей);
КонецФункции

&НаКлиенте
Процедура УстановитьИзмененияТекущего(Значение)
	ПользователиТекущийИзменен = Значение;
	Элементы.НадписьПользователи.Заголовок = ?(Значение, "Записать ("+ПользователиТекущий+")", "");
	//Элементы.НадписьПользователи.Гиперссылка = Значение;
	//Элементы.НадписьПользователи.ЦветТекста = ?(Значение, WebЦвета.СинеФиолетовый, WebЦвета.Черный);	
КонецПроцедуры


&НаСервере
Процедура НастройкаПользователейЗаполнитьТаблицы()
	ВыбПольз = СписокПользователей.НайтиПоИдентификатору(Элементы.СписокПользователей.ТекущаяСтрока).Значение;
	ТабХС=РеквизитФормыВЗначение("ПользователиТаблицаХС");
	ТабПлощадок=РеквизитФормыВЗначение("ПользователиТаблицаПлощадок");
	МодульОбъекта().НастройкаПользователейЗаполнитьТаблицы(ПользователиМВТ, ВыбПольз, ТабХС, ТабПлощадок);
	ЗначениеВРеквизитФормы(ТабХС, "ПользователиТаблицаХС");
	ЗначениеВРеквизитФормы(ТабПлощадок, "ПользователиТаблицаПлощадок");
КонецПроцедуры


&НаКлиенте
Процедура СписокПользователейПриАктивизацииСтроки(Элемент)
	


КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСписокПользователейЗаписать(Ответ, Парам2 = Неопределено) Экспорт
	Если Ответ = "Да, сохранить изменения" Тогда
		НастройкаПользователейЗаписать(ПользователиТекущий);
	КонецЕсли;
	НастройкаПользователейПриАктивизацииСписка();
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейСпроситьОЗаписи()
	
	Если ПользователиТекущийИзменен = Истина Тогда
		ТекстВопроса = "Изменения по пользователю "+ПользователиТекущий+" все еще не записаны. Записать?";
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Да, сохранить изменения");
		Кнопки.Добавить("Не сохранять изменения");
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСписокПользователейЗаписать"", ЭтаФорма),ТекстВопроса,Кнопки,20,,""Контур.Меркурий"")");
		Иначе 
			Ответ = Вопрос(ТекстВопроса, Кнопки, 20,,"Контур.Меркурий");
			ОбработчикСписокПользователейЗаписать(Ответ);
		КонецЕсли;
	Иначе
		НастройкаПользователейПриАктивизацииСписка();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаПользователейПриАктивизацииСписка()
	
	ПользователиТекущий = Элементы.СписокПользователей.ТекущиеДанные.Значение;
	НастройкаПользователейЗаполнитьТаблицы();
	УстановитьИзмененияТекущего(Ложь);
		
	
	Если ПользователиТаблицаХС.Количество() = 0 Тогда
		ПредупреждениеМеркурий("Не найдено ни одного нашего ХС для выдачи полномочий.
		|Необходимо 
		|- сопоставить хотя бы один наш ХС в Меркурии 
		|- заполнить его реквизиты доступа на закладке ""Учетные записи Меркурий""!");
	КонецЕсли;
	
	Если ПользователиТаблицаПлощадок.Количество() = 0 Тогда
		ПредупреждениеМеркурий("Не найдено ни одной нашей площадки для выдачи полномочий.
		|Необходимо сопоставить хотя бы одну нашу площадку в Меркурии!");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.СписокПользователей.ТекущиеДанные<>Неопределено и ПользователиТекущий <> Элементы.СписокПользователей.ТекущиеДанные.Значение Тогда
		
		СписокПользователейСпроситьОЗаписи();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПользователиТаблицаХСВклПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПользователиТаблицаХС.ТекущиеДанные;
	Если ТекДанные.Вкл и СокрЛП(ТекДанные.ПользовательМеркурий) = "" Тогда
		ТекДанные.Вкл = Ложь;
		ПредупреждениеМеркурий("Сначала укажите логин пользователя Меркурий!");
	Иначе
		Для Каждого Стр из ПользователиТаблицаХС Цикл
			Если Стр.GUID = текДанные.GUID Тогда
				Стр.Вкл = текДанные.Вкл;
			КонецЕсли;
		КонецЦикла;
		УстановитьИзмененияТекущего(Истина);  
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПользователиТаблицаХСПользовательМеркурийПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПользователиТаблицаХС.ТекущиеДанные;
	Если СокрЛП(ТекДанные.ПользовательМеркурий) = "" Тогда
		ТекДанные.Вкл = Ложь;
	КонецЕсли;
	УстановитьИзмененияТекущего(Истина);  

КонецПроцедуры

&НаКлиенте
Процедура ПользователиТаблицаПлощадокВклПриИзменении(Элемент)
	текДанные = Элементы.ПользователиТаблицаПлощадок.ТекущиеДанные;
	Для Каждого Стр из ПользователиТаблицаПлощадок Цикл
		Если Стр.GUID = текДанные.GUID Тогда
			Стр.Вкл = текДанные.Вкл;
		КонецЕсли;
	КонецЦикла;
	УстановитьИзмененияТекущего(Истина);
КонецПроцедуры

&НаСервере
Процедура НастройкаПользователейЗаписать(ПользователиТекущий)
	МодульОбъекта().НастройкаПользователейЗаписать(ПользователиТекущий, ПользователиТаблицаХС, ПользователиТаблицаПлощадок);
КонецПроцедуры

&НаКлиенте
Процедура НадписьПользователиНажатие(Элемент)
	Если ЗначениеЗаполнено(ПользователиТекущий) Тогда
		НастройкаПользователейЗаписать(ПользователиТекущий);
		УстановитьИзмененияТекущего(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиТаблицаХСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиТаблицаХСПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиТаблицаПлощадокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиТаблицаПлощадокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Функция ПользователиВключитьНажатиеНаСервере()
	
	ИспользуетсяРазграничениеПрав = НЕ МодульОбъекта().ИспользуетсяРазграничениеПрав();
	МодульОбъекта().локУстановитьКонстантуEDI("М_ИспользоватьРазграничениеПрав", ИспользуетсяРазграничениеПрав);
	Возврат ИспользуетсяРазграничениеПрав;

КонецФункции

&НаКлиенте
Процедура ВключитьНажатие(Элемент)
	
	ИспользуетсяРазграничениеПрав = ПользователиВключитьНажатиеНаСервере();
	ОсновнаяПанельПриСменеСтраницы(Элементы.ОсновнаяПанель, Элементы.НастройкиПользователей);
	УстановитьКартинкуСостоянияРазганиченияПравПользователей(ИспользуетсяРазграничениеПрав);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкуСостоянияРазганиченияПравПользователей(ИспользуетсяРазграничениеПрав)

	Элементы.НастройкиПользователей.Картинка = ?(ИспользуетсяРазграничениеПрав=Истина,
												Элементы.КартинкаВкл.Картинка,
												Элементы.КартинкаВыкл.Картинка);	

КонецПроцедуры


//******************************* Номенклатура **********************************
&НаСервере
Процедура ДополнитьЕдиницыИзМеркурияНаСервере()
	ТаблицаЕдиницИзмеренияМеркурий = МодульОбъекта().ПолучитьКлассификаторЕдиницИзмеренияМеркурий();

	тзЕдиницыИзмерения = РеквизитФормыВЗначение("ЕдиницыИзмерения");
	Для каждого СтрокаКлассификатора Из ТаблицаЕдиницИзмеренияМеркурий Цикл
		Если тзЕдиницыИзмерения.Найти(СтрокаКлассификатора.GUID,"GUID") = Неопределено 
			И тзЕдиницыИзмерения.Найти(СтрокаКлассификатора.UUID,"UUID") = Неопределено
			Тогда
			НоваяСтрока = ЕдиницыИзмерения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКлассификатора);
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьЕдиницыИзМеркурия(Команда)
	
	ДополнитьЕдиницыИзМеркурияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьЕдиницыУпаковокИзМеркурияНаСервере()
	
	ТаблицаЕдиницИзмеренияУпаковокМеркурий = МодульОбъекта().ПолучитьКлассификаторУпаковокМеркурий();

	тзЕдиницыИзмеренияУпаковок = РеквизитФормыВЗначение("ЕдиницыИзмеренияУпаковок");
	Для каждого СтрокаКлассификатора Из ТаблицаЕдиницИзмеренияУпаковокМеркурий Цикл
		Если тзЕдиницыИзмеренияУпаковок.Найти(СтрокаКлассификатора.UUID,"UUID") = Неопределено
			Тогда
			НоваяСтрока = ЕдиницыИзмеренияУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКлассификатора);
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьЕдиницыУпаковокИзМеркурия(Команда)
	ДополнитьЕдиницыУпаковокИзМеркурияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницыИзмеренияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОписаниеТиповЕдиницыИзмерения = Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("МеркурийЕдиницаИзмеренияПоКлассификатору"));
	Элементы.ЕдиницыИзмеренияСоответствие.ОграничениеТипа = ОписаниеТиповЕдиницыИзмерения;
	Элементы.ЕдиницыИзмеренияСоответствие.ВыбиратьТип = Ложь;
	Элементы.ЕдиницыИзмерения.ТекущиеДанные.Соответствие = ОписаниеТиповЕдиницыИзмерения.ПривестиЗначение(Элементы.ЕдиницыИзмерения.ТекущиеДанные.Соответствие);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницыИзмеренияУпаковокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОписаниеТиповЕдиницыИзмерения = Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("МеркурийЕдиницаИзмеренияУпаковок"));
	Элементы.ЕдиницыИзмеренияУпаковокСоответствие.ОграничениеТипа = ОписаниеТиповЕдиницыИзмерения;
	Элементы.ЕдиницыИзмеренияУпаковокСоответствие.ВыбиратьТип = Ложь;
	Элементы.ЕдиницыИзмеренияУпаковок.ТекущиеДанные.Соответствие = ОписаниеТиповЕдиницыИзмерения.ПривестиЗначение(Элементы.ЕдиницыИзмеренияУпаковок.ТекущиеДанные.Соответствие);
	
КонецПроцедуры

&НаСервере
Процедура ОбработчикСоответствияТоваровПрисвоитьНаСервере(РешениеПользователя, ДопПараметры);//Знач ВыделенныеСтрокиНоменклатуры, МеркурийGUID, МеркурийНаименование)
	
	Если РешениеПользователя = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерМеркурий = МодульОбъекта().ПартнерМеркурий();
	
	Для каждого ВыделеннаяСтрокаНоменклатуры Из Элементы.СправочникНоменклатуры.ВыделенныеСтроки Цикл
		Если ВыделеннаяСтрокаНоменклатуры.ЭтоГруппа = Ложь Тогда
			МодульОбъекта().ПрисвоитьСоответствиеНоменклатуры(ВыделеннаяСтрокаНоменклатуры,ДопПараметры.МеркурийGUID,ДопПараметры.МеркурийНаименование,ПартнерМеркурий);
		Иначе
			МодульОбъекта().ПрисвоитьСоответствиеНоменклатурыВИерархии(ВыделеннаяСтрокаНоменклатуры,ДопПараметры.МеркурийGUID,ДопПараметры.МеркурийНаименование,ПартнерМеркурий,РешениеПользователя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоответствияТоваровЕстьВыделенныеГруппы()
	
	ЕстьВыделенныеГруппы = Ложь;
	
	СтрокиНоменклатуры = Элементы.СправочникНоменклатуры.ВыделенныеСтроки;
	
	Для Каждого Номенклатура из СтрокиНоменклатуры Цикл
		Если Номенклатура.ЭтоГруппа Тогда
			ЕстьВыделенныеГруппы = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьВыделенныеГруппы;
	
КонецФункции // ЕстьВыделенныеГруппы()

&НаКлиенте
Функция СоответствияТоваровПользовательУверенЧтоХочетПрисвоитьГруппу(ДопПараметры)
	
	Кнопки = новый СписокЗначений;
	Кнопки.Добавить("Отмена");
	Кнопки.Добавить("НЕ ВКЛЮЧАЯ вложенные папки");
	Кнопки.Добавить("ВКЛЮЧАЯ всю вложенность");
	ТекстВопроса = "В справочнике выделены группы. Вы уверены что хотите присвоить соответствие всем дочерним элементам этой группы?";
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСоответствияТоваровПрисвоитьНаСервере"", ЭтаФорма, ДопПараметры), ТекстВопроса, Кнопки,,,""Контур.Меркурий"")");
	Иначе
		Ответ = Вопрос(ТекстВопроса, Кнопки,,,"Контур.Меркурий");
		ОбработчикСоответствияТоваровПрисвоитьНаСервере(Ответ, ДопПараметры);
	КонецЕсли;
	
КонецФункции // ()

&НаКлиенте
Процедура СоответствияТоваровПрисвоить(Команда)
	
	Если Элементы.НоменклатураМеркурий.ВыделенныеСтроки.Количество()=0 Тогда
		ПредупреждениеМеркурий("Сначала необходимо выделить строку с номенклатурой, которой вы хотите присвоить соответствие.");
		Возврат;
	КонецЕсли;
	
	текДанные = Элементы.НоменклатураМеркурий.ТекущиеДанные;
	Если СокрЛП(текДанные.Код) = "" Тогда
		Сообщить("Необходимо выбрать дочерний элемент классификации Меркурий, а не групповой");
	Иначе
		ДопПараметры = Новый Структура("МеркурийGUID, МеркурийНаименование", текДанные.GUID, текДанные.Наименование);
		Если СоответствияТоваровЕстьВыделенныеГруппы() Тогда
			СоответствияТоваровПользовательУверенЧтоХочетПрисвоитьГруппу(ДопПараметры);
		Иначе
			//СоответствияТоваровПрисвоитьНаСервере(Элементы.СправочникНоменклатуры.ВыделенныеСтроки, текДанные.GUID, текДанные.Наименование);
			ОбработчикСоответствияТоваровПрисвоитьНаСервере("ВКЛЮЧАЯ всю вложенность", ДопПараметры);
		КонецЕсли;
		Элементы.СправочникНоменклатуры.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработчикСоответствияТоваровПрисвоитьПроизводимНаСервере(РешениеПользователя, НовыйФлажок) Экспорт
	
	СтрокиНоменклатуры = Элементы.СправочникНоменклатуры.ВыделенныеСтроки;
	
	Для Каждого ВыделеннаяСтрокаНоменклатуры из СтрокиНоменклатуры Цикл
		Если НЕ ВыделеннаяСтрокаНоменклатуры.ЭтоГруппа Тогда
			МодульОбъекта().НастройкиИзменитьПризнакПроизводим(ВыделеннаяСтрокаНоменклатуры.Ссылка, НовыйФлажок);
		Иначе
			МодульОбъекта().ПрисвоитьПроизводимТоварВИерархии(ВыделеннаяСтрокаНоменклатуры.Ссылка,НовыйФлажок,РешениеПользователя)
		КонецЕсли;
	КонецЦикла;
	
	Элементы.СправочникНоменклатуры.Обновить();

КонецПроцедуры

&НаКлиенте
Функция СоответствияТоваровПользовательУверенЧтоХочетПрисвоитьГруппуПроизводим(НовыйФлажок)
	
	Кнопки = новый СписокЗначений;
	Кнопки.Добавить("Отмена");
	Кнопки.Добавить("НЕ ВКЛЮЧАЯ вложенные папки");
	Кнопки.Добавить("ВКЛЮЧАЯ всю вложенность");
	ТекстВопроса = "В справочнике выделены группы. Вы уверены что хотите присвоить ""производим"" всем дочерним элементам этой группы?";
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСоответствияТоваровПрисвоитьПроизводимНаСервере"", ЭтаФорма, НовыйФлажок), ТекстВопроса, Кнопки,,,""Контур.Меркурий"")");
	Иначе
		Ответ = Вопрос(ТекстВопроса, Кнопки,,,"Контур.Меркурий");
		ОбработчикСоответствияТоваровПрисвоитьПроизводимНаСервере(Ответ, НовыйФлажок);
	КонецЕсли;
	
КонецФункции // ()

&НаКлиенте
Процедура ОбработчикСоответствияТоваровПрисвоитьПроизводим(Ответ, Парам2 = Неопределено) Экспорт
	
	Если Ответ = "Производим" Тогда
		НовыйФлажок = Истина;
	ИначеЕсли Ответ = "НЕ производим" Тогда
		НовыйФлажок = Ложь;
	Иначе
		Возврат;
	КонецЕсли;

	Если СоответствияТоваровЕстьВыделенныеГруппы() Тогда
		СоответствияТоваровПользовательУверенЧтоХочетПрисвоитьГруппуПроизводим(НовыйФлажок);
	Иначе
		ОбработчикСоответствияТоваровПрисвоитьПроизводимНаСервере("ВКЛЮЧАЯ всю вложенность", НовыйФлажок);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоответствияТоваровПрисвоитьПроизводим(Команда)
	
	Если Элементы.НоменклатураМеркурий.ВыделенныеСтроки.Количество()=0 Тогда
		ПредупреждениеМеркурий("Сначала необходимо выделить строку с номенклатурой, которой вы хотите присвоить соответствие.");
		Возврат;
	КонецЕсли;
	
	НовыйФлажок = Неопределено;
	
	Кнопки = новый СписокЗначений;
	Кнопки.Добавить("Производим");
	Кнопки.Добавить("НЕ производим");
	Кнопки.Добавить("Отмена");
	
	ТекстВопроса = "Производите эту номенклатуру?";
		
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСоответствияТоваровПрисвоитьПроизводим"", ЭтаФорма), ТекстВопроса, Кнопки,,,""Контур.Меркурий"")");
	Иначе
		Ответ = Вопрос(ТекстВопроса, Кнопки,,,"Контур.Меркурий");
		ОбработчикСоответствияТоваровПрисвоитьПроизводим(Ответ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоответствияТоваровСделатьНеподнадзорным(Команда)
	
	ДопПараметры = Новый Структура("МеркурийGUID, МеркурийНаименование","00000000-0000-0000-0000-000000000000", "Не является поднадзорным");
	Если СоответствияТоваровЕстьВыделенныеГруппы() Тогда
		СоответствияТоваровПользовательУверенЧтоХочетПрисвоитьГруппу(ДопПараметры);
	Иначе
		//СоответствияТоваровПрисвоитьНаСервере(Элементы.СправочникНоменклатуры.ВыделенныеСтроки, текДанные.GUID, текДанные.Наименование);
		ОбработчикСоответствияТоваровПрисвоитьНаСервере("ВКЛЮЧАЯ всю вложенность", ДопПараметры);
	КонецЕсли;

	//СоответствияТоваровПрисвоитьНаСервере(Элементы.СправочникНоменклатуры.ВыделенныеСтроки, "00000000-0000-0000-0000-000000000000", "Не является поднадзорным");
	Элементы.СправочникНоменклатуры.Обновить();
КонецПроцедуры

&НаСервере
Процедура СоответствияТоваровОбработчикПрисвоенияКоэффициента(Коэффициент, ВыделенныеСтроки)
	МодульОбъекта().НастройкиПрисвоитьКоэффициент(Коэффициент, ВыделенныеСтроки);
	Элементы.СправочникНоменклатуры.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СоответствияТоваровПрисвоитьКоэффициент(Команда)
	
	ТекстВопроса = "Укажите, на что умножить количество";
	ВыделенныеСтроки = Элементы.СправочникНоменклатуры.ВыделенныеСтроки;
	Коэффициент = 0;
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВводЧисла(Новый ОписаниеОповещения(""СоответствияТоваровОбработчикПрисвоенияКоэффициента"", ЭтаФорма, ВыделенныеСтроки), Коэффициент, ТекстВопроса, 10, 4)");
	Иначе
		Если ВвестиЧисло(Коэффициент, ТекстВопроса, 10, 40) Тогда
			СоответствияТоваровОбработчикПрисвоенияКоэффициента(Коэффициент,ВыделенныеСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияТоваровОчиститьПоиск(Команда)
	ФильтрНоменклатурыМеркурий = "";
	ФильтрНоменклатурыМеркурийПриИзменении(Элементы.ФильтрНоменклатурыМеркурий);
КонецПроцедуры

&НаСервере
Процедура СправочникНоменклатурыКоэффициентУмноженияПриИзмененииНаСервере(Коэффициент)
КонецПроцедуры

&НаКлиенте
Процедура СправочникНоменклатурыКоэффициентУмноженияПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура СправочникНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Элемент.ТекущийЭлемент.Имя = "СправочникНоменклатурыУстановленоНаименование"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "СправочникНоменклатурыУстановлено"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "СправочникНоменклатурыКоэффициентУмножения"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "СправочникНоменклатурыЕдиницаИзмеренияМеркурий")
		
		И Не Элемент.ТекущиеДанные.ЭтоГруппа
		Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресХранилища", Параметры.АдресХранилища);
		ПараметрыФормы.Вставить("ПутьКФормамМеркурий", Параметры.ПутьКФормамМеркурий);
		ПараметрыФормы.Вставить("МодальностьЗапрещена", Параметры.МодальностьЗапрещена);
		ПараметрыФормы.Вставить("Номенклатура", Элемент.ТекущиеДанные.Ссылка);
	
		Если Параметры.МодальностьЗапрещена Тогда 
			ОткрытьФормуОбъектаМодально(Параметры.ПутьКФормамМеркурий+"Меркурий_СоответствиеНоменклатурыУправляемая", ПараметрыФормы,"СоответствияТоваровТонкаяНастройкаОбработчик");//,ПараметрыФормы.ВыбранноеЗначение);
		Иначе
			ВыбраннаяСтрока = ПолучитьФормуОбработки(Параметры.ПутьКФормамМеркурий+"Меркурий_СоответствиеНоменклатурыУправляемая",ПараметрыФормы).ОткрытьМодально();
			СоответствияТоваровТонкаяНастройкаОбработчик(ВыбраннаяСтрока, Неопределено);
		КонецЕсли;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "СправочникНоменклатурыПроизводимТовар" 
		И Не Элемент.ТекущиеДанные.УстановленоНаименование = "<несколько>"
		И ТипЗнч(Элемент.ТекущиеДанные.ПроизводимТовар) = Тип("Булево")
		И Не Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НастройкиИзменитьПризнакПроизводимНаСервере(Элемент.ТекущиеДанные.Ссылка, НЕ Элемент.ТекущиеДанные.ПроизводимТовар);
		Элементы.СправочникНоменклатуры.Обновить();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастройкиИзменитьПризнакПроизводимНаСервере(Ссылка, НовыйФлаг)
	МодульОбъекта().НастройкиИзменитьПризнакПроизводим(Ссылка, НовыйФлаг);
КонецПроцедуры

&НаКлиенте
Процедура СправочникНоменклатурыПроизводимТоварПриИзменении(Элемент)
	
	//изменение "флага" СправочникНоменклатурыПроизводимТовар в СправочникНоменклатурыВыбор
	
КонецПроцедуры


//******************************* ХС и площадки **********************************

&НаСервере
Процедура ХСЗаполнитьАвтоматическиНаСервере()
	МодульОбъекта().НастройкиХСЗаполнитьАвтоматически(ХозяйствующиеСубъекты);
КонецПроцедуры

&НаКлиенте
Процедура ХСЗаполнитьАвтоматически(Команда)
	ХСЗаполнитьАвтоматическиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ХСДобавить(Команда)
	НоваяСтрока = ХозяйствующиеСубъекты.Добавить();
КонецПроцедуры

&НаКлиенте
Процедура ХСУдалить(Команда)
	Если НЕ Элементы.ХозяйствующиеСубъекты.ТекущиеДанные = Неопределено Тогда
		ХозяйствующиеСубъекты.Удалить(ХозяйствующиеСубъекты.Индекс(Элементы.ХозяйствующиеСубъекты.ТекущиеДанные));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующиеСубъектыОбработчикХСПодробнее(Парам1, Парам2) Экспорт
	ПерезаполнитьСписокХС();
	ПерезаполнитьСписокПредприятий();
КонецПроцедуры

&НаКлиенте
Процедура ХСПодробнее(Команда)
	
	ТекСтрока = Элементы.ХозяйствующиеСубъекты.ТекущиеДанные;
	
	Если ТекСтрока<>Неопределено Тогда 
		текGUID = ТекСтрока.GUID;
		текНаш = ТекСтрока.Наш;
		текОбъект = ТекСтрока.СвязанныйСправочник;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МодальностьЗапрещена", Параметры.МодальностьЗапрещена);
		ПараметрыФормы.Вставить("ПутьКФормамМеркурий", Параметры.ПутьКФормамМеркурий);
		ПараметрыФормы.Вставить("АдресХранилища", Параметры.АдресХранилища);
		
		ПараметрыФормы.Вставить("GUID", текGUID);
		ПараметрыФормы.Вставить("Объект1С", текОбъект);
		ПараметрыФормы.Вставить("Наш", текНаш);
		
		Если Параметры.МодальностьЗапрещена Тогда 
			ОткрытьФормуОбъектаМодально(Параметры.ПутьКФормамМеркурий+"Меркурий_ПросмотрХСУправляемая", ПараметрыФормы, "ХозяйствующиеСубъектыОбработчикХСПодробнее");
		Иначе
			ВыбраннаяСтрока = ПолучитьФормуОбработки(Параметры.ПутьКФормамМеркурий+"Меркурий_ПросмотрХСУправляемая",ПараметрыФормы).ОткрытьМодально();
			ХозяйствующиеСубъектыОбработчикХСПодробнее(ВыбраннаяСтрока, Неопределено);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующиеСубъектыОбработчикВыбораСвязанногоСправочника(ВыбраннаяСтрокаХС, Парам2) Экспорт
	Если ВыбраннаяСтрокаХС <> неопределено Тогда
		Элементы.ХозяйствующиеСубъекты.ТекущиеДанные.GUID = ВыбраннаяСтрокаХС.GUID;
		Элементы.ХозяйствующиеСубъекты.ТекущиеДанные.Наименование = ВыбраннаяСтрокаХС.name;//fullName;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующиеСубъектыСвязанныйСправочникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ХозяйствующиеСубъекты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.СвязанныйСправочник) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВариантПоиска", 2);//По ИНН связанного справочника
		ПараметрыФормы.Вставить("АдресХранилища", Параметры.АдресХранилища);
		
		ПараметрыФормы.Вставить("СвязанныйСправочник", Элементы.ХозяйствующиеСубъекты.ТекущиеДанные.СвязанныйСправочник);
		
		Если Параметры.МодальностьЗапрещена Тогда 
			ОткрытьФормуОбъектаМодально(Параметры.ПутьКФормамМеркурий+"Меркурий_ВыборХСПлощадкиУправляемая", ПараметрыФормы, "ХозяйствующиеСубъектыОбработчикВыбораСвязанногоСправочника");
		Иначе
			ВыбраннаяСтрока = ПолучитьФормуОбработки(Параметры.ПутьКФормамМеркурий+"Меркурий_ВыборХСПлощадкиУправляемая",ПараметрыФормы).ОткрытьМодально();
			ХозяйствующиеСубъектыОбработчикВыбораСвязанногоСправочника(ВыбраннаяСтрока, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующиеСубъектыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ХозяйствующиеСубъектыПриНачалеРедактированияНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ХозяйствующиеСубъектыПолучитьНаименование(GUID)
	
	ТаблицаНайденных 	= МодульОбъекта().ПолучитьХСПоGUID(GUID);
	Если ТаблицаНайденных.Количество()>0 Тогда
		Возврат ТаблицаНайденных[0].fullName;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ХозяйствующиеСубъектыGUIDПриИзменении(Элемент)
	
	ТекДанные 			= Элементы.ХозяйствующиеСубъекты.ТекущиеДанные;
	Наим = ХозяйствующиеСубъектыПолучитьНаименование(ТекДанные.GUID);
	Если Наим = "" Тогда
		ПредупреждениеМеркурий("По GUID "+ТекДанные.GUID+" не найден хозяйствующий субъект!");
		ТекДанные.GUID			= "00000000-0000-0000-0000-000000000000";
		ТекДанные.Наименование	= "";
	Иначе
		ТекДанные.Наименование	= Наим;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияДобавить(Команда)
	НоваяСтрока = Предприятия.Добавить();
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияУдалить(Команда)
	Если НЕ Элементы.Предприятия.ТекущиеДанные = Неопределено Тогда
		Предприятия.Удалить(Предприятия.Индекс(Элементы.Предприятия.ТекущиеДанные));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияОбработчикВыбораПлощадки(ВыбраннаяСтрока, Парам2) Экспорт
	Если ВыбраннаяСтрока <> Неопределено Тогда
		НоваяСтрока = Предприятия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбраннаяСтрока);
		НоваяСтрока.Наименование = ВыбраннаяСтрока.name;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияДобавитьСвязанныеСТекущимХС(ОбновитьССервера = Ложь)
	
	Если Элементы.ХозяйствующиеСубъекты.ТекущиеДанные=Неопределено Тогда
		ПредупреждениеМеркурий("Сначала необходимо выделить ХС к которому добавляется площадка");
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.ХозяйствующиеСубъекты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено или Не ЗначениеЗаполнено(ТекущиеДанные.GUID) Тогда
		
		ПредупреждениеМеркурий("Необходимо сначала заполнить GUID Хозяйствующего субъекта");
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантПоиска", 1);//по ГУИД ХС
	ПараметрыФормы.Вставить("АдресХранилища", Параметры.АдресХранилища);
	
	ПараметрыФормы.Вставить("ХС_GUID", ТекущиеДанные.GUID);
	ПараметрыФормы.Вставить("ОбновитьССервера", ОбновитьССервера);
	
	
	Если Параметры.МодальностьЗапрещена Тогда 
		ОткрытьФормуОбъектаМодально(Параметры.ПутьКФормамМеркурий+"Меркурий_ВыборХСПлощадкиУправляемая", ПараметрыФормы,"ПредприятияОбработчикВыбораПлощадки");//,ПараметрыФормы.ВыбранноеЗначение);
	Иначе
		ВыбраннаяСтрока = ПолучитьФормуОбработки(Параметры.ПутьКФормамМеркурий+"Меркурий_ВыборХСПлощадкиУправляемая",ПараметрыФормы).ОткрытьМодально();
		ПредприятияОбработчикВыбораПлощадки(ВыбраннаяСтрока, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияДобавитьСвязанную(Команда)
	ПредприятияДобавитьСвязанныеСТекущимХС(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияДобавитьСвязаннуюОбновить(Команда)
	ПредприятияДобавитьСвязанныеСТекущимХС(Истина);
КонецПроцедуры

&НаСервере
Процедура ХозяйствующиеСубъектыПриНачалеРедактированияНаСервере()
	
	МассивТипов = Новый Массив;
	Для Каждого Мета Из Метаданные.Справочники Цикл
		Если Мета.Реквизиты.Найти("ИНН")<>Неопределено Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка."+Мета.Имя));
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеТиповХС = Новый ОписаниеТипов(МассивТипов);
	
	Элементы.ХозяйствующиеСубъектыСвязанныйСправочник.ОграничениеТипа = ОписаниеТиповХС;
	Если МассивТипов.Количество()=1 Тогда
		Элементы.ХозяйствующиеСубъектыСвязанныйСправочник.ВыбиратьТип = Ложь;
		Элементы.ХозяйствующиеСубъекты.ТекущиеДанные.СвязанныйСправочник = ОписаниеТиповХС.ПривестиЗначение(Элементы.ХозяйствующиеСубъекты.ТекущиеДанные.СвязанныйСправочник);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПредприятияПолучитьНаименование(GUID)
	
	ТаблицаНайденных 	= МодульОбъекта().ПолучитьПлощадкуПоGUID(GUID);
	Если ТаблицаНайденных.Количество()>0 Тогда
		Возврат ТаблицаНайденных[0].Name;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ПредприятияGUIDПриИзменении(Элемент)
	
	ТекДанные 			= Элементы.Предприятия.ТекущиеДанные;
	Наим = ПредприятияПолучитьНаименование(ТекДанные.GUID);
	Если Наим = "" Тогда
		ПредупреждениеМеркурий("По GUID "+ТекДанные.GUID+" не найдено предприятие!");
		ТекДанные.GUID			= "00000000-0000-0000-0000-000000000000";
		ТекДанные.Наименование	= "";
	Иначе
		ТекДанные.Наименование	= Наим;
	КонецЕсли;

КонецПроцедуры


//******************************* Складской журнал **********************************

&НаСервере
Функция СкладскойЖурналПолучитьСписокПлощадок()
	
	СписокПлощадок = Новый СписокЗначений;
	
	Площадки = МодульОбъекта().ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийПлощадка");
	Для Каждого СтрПлощадка из Площадки Цикл
		Если СтрПлощадка.Наш = Истина Тогда
			СписокПлощадок.Добавить(СтрПлощадка.GUID, СтрПлощадка.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПлощадок;
	
КонецФункции

&НаСервере
Функция СкладскойЖурналЗаполнитьПоПлощадкеНаСервере()
	
	Если ЗначениеЗаполнено(ПлощадкаСЖGUID) Тогда 
		ЗаполненныйЖурнал = МодульОбъекта().ПолучитьЗаписиСкладскогоЖурнала(ПлощадкаСЖGUID,,ОрганизацияСЖGUID);
		
		
		ЗаполненныйЖурнал.Сортировать("ВладелецGUID"); //чтобы упорядочить по ХС и чтобы потом чуть ниже кэш работал хорошо
		СкладскойЖурнал.Очистить();
		Для Каждого СтркаПлощадки Из ЗаполненныйЖурнал Цикл
			НоваяСтрокаСЖ = СкладскойЖурнал.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСЖ,СтркаПлощадки);
		КонецЦикла;
	КонецЕсли;
	
	ЗакэшированныйВладелец=Новый Структура("GUID,Значение","",Неопределено);
	
	Для Каждого СтркаПлощадки Из СкладскойЖурнал Цикл
		Если ЗакэшированныйВладелец.GUID = СтркаПлощадки.ВладелецGUID Тогда
			СтркаПлощадки.Владелец = ЗакэшированныйВладелец.Значение;
		Иначе
			СтркаПлощадки.Владелец = МодульОбъекта().КонвертироватьЗначениеМеркурийв1C(СтркаПлощадки.ВладелецGUID,,"МеркурийХС");
			ЗакэшированныйВладелец.Вставить("GUID",СтркаПлощадки.ВладелецGUID);
			ЗакэшированныйВладелец.Вставить("Значение",СтркаПлощадки.Владелец);
		КонецЕсли;
	КонецЦикла;
	
	//Если СкладскойЖурнал.Колонки.Найти("Устарела") = Неопределено Тогда 
	//	СкладскойЖурнал.Колонки.Добавить("Устарела",Новый ОписаниеТипов("Булево"));
	//КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СкладскойЖурналОбновить(Команда)
	
	Если ЗначениеЗаполнено(ПлощадкаСЖGUID) и ЗначениеЗаполнено(ОрганизацияСЖGUID) Тогда 
		СкладскойЖурналЗаполнитьПоПлощадкеНаСервере();
	Иначе
		ПредупреждениеМеркурий("Требуется указать Хоз. субъект и Площадку!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкладскойЖурналСписатьПартиюНаСервере()
	
	Если Параметры.ВыбраннаяПлощадка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Идентификатор Из Элементы.СкладскойЖурнал.ВыделенныеСтроки Цикл
		СтрокаКСписанию = СкладскойЖурнал.НайтиПоИдентификатору(Идентификатор);
		
		//Если  СтрокаКСписанию.Устарела =Истина Тогда Продолжить; КонецЕсли;
		
		РезультатСписания = МодульОбъекта().СписатьПартию(СтрокаКСписанию.UUID_Партии,Параметры.ВыбраннаяПлощадка,СтрокаКСписанию.ВладелецGUID,СтрокаКСписанию.Остаток,СтрокаКСписанию.UnitUUID);
		Если РезультатСписания.Успешно = Истина Тогда 
			СтрокаКСписанию.Устарела = Истина;
			СкладскойЖурнал.Удалить(СкладскойЖурнал.Индекс(СтрокаКСписанию));
		Иначе
			Сообщить("Не удалось списать "+СтрокаКСписанию.Остаток+" партии с UUID:"+СтрокаКСписанию.UUID_Партии);
		КонецЕсли;		
	КонецЦикла;
	Элементы.СкладскойЖурнал.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналСписатьПартию(Команда)
	СкладскойЖурналСписатьПартиюНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкладскойЖурналПрочитатьИсториюНаСервере()
	Если Параметры.ВыбраннаяПлощадка <> Неопределено Тогда
		МодульОбъекта().ПолучитьИзмененияЗаписейСкладскогоЖурналаЗаИнтервал(Параметры.ВыбраннаяПлощадка.GUID,НачалоДня(ТекущаяДата()),ТекущаяДата());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналПрочитатьИсторию(Команда)
	СкладскойЖурналПрочитатьИсториюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналОбъединитьВыбранныеПартии(Команда)
	
	МассивUUIDДляМержа = Новый Массив;
	Для Каждого Ид Из Элементы.СкладскойЖурнал.ВыделенныеСтроки Цикл
		СтрокаКМержу = СкладскойЖурнал.НайтиПоИдентификатору(Ид);
		МассивUUIDДляМержа.Добавить(СтрокаКМержу.UUID_Партии);
	КонецЦикла;
	
	Если МассивUUIDДляМержа.Количество()>1 Тогда
		
		ПерваяСтрока = СкладскойЖурнал.НайтиПоИдентификатору(Элементы.СкладскойЖурнал.ВыделенныеСтроки.Получить(0));
		spGUID = ПерваяСтрока.subProductGuid;
		НовоеНазвание = ?(ЗначениеЗаполнено(ПерваяСтрока.Наименование),ПерваяСтрока.Наименование,Строка(ПерваяСтрока.Номенклатура));
		
		Подсказка = "Оставим старое наименование? (исправьте если требуется)";
		ПараметрыОбработчика = Новый Структура("МассивUUIDДляМержа, spGUID",МассивUUIDДляМержа,spGUID);
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВводСтроки(Новый ОписаниеОповещения(""ОбработчикСкладскойЖурналОбъединитьПартии"", ЭтаФорма, ПараметрыОбработчика), НовоеНазвание, Подсказка, 50)");
		Иначе
			ВвестиСтроку(НовоеНазвание,Подсказка);
			ОбработчикСкладскойЖурналОбъединитьПартии(НовоеНазвание, ПараметрыОбработчика);
		КонецЕсли;
		
	Иначе
		ПредупреждениеМеркурий("Выделите хотя бы 2 партии. Объединить можно 2 или более выделенных партий.");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияСЖНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОрганизацияПлощадкаНачалоВыбора("ОрганизацияСЖ", Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПлощадкаСЖНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОрганизацияПлощадкаНачалоВыбора("ПлощадкаСЖ", Элемент);
КонецПроцедуры



//******************************* Служебная **********************************

&НаСервере
Процедура СлужебнаяЗаполнитьТаблицуАктуальностиВСД()
	тзАктуальностьВСД = МодульОбъекта().НастройкиСлужебнаяПолучитьТаблицуАктуальностиВСД();
	ЗначениеВРеквизитФормы(тзАктуальностьВСД,"АктуальностьВСД");
КонецПроцедуры

&НаСервере
Процедура СлужебнаяЗаполнитьТаблицуАктуальностиОСЖ()
	тзАктуальностьОСЖ = МодульОбъекта().НастройкиСлужебнаяПолучитьТаблицуАктуальностиОСЖ();
	ЗначениеВРеквизитФормы(тзАктуальностьОСЖ,"АктуальностьОСЖ");
КонецПроцедуры

&НаСервере
Процедура СлужебнаяДатаАктуальностиВСДПриИзмененииНаСервере(GUID, ДатаАктуальности)
	МодульОбъекта().НастройкиСлужебнаяИзменитьАктуальностьВСД("АктуалВхВСД_"+GUID, ДатаАктуальности);
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяАктуальностьВСДДатаАктуальностиПриИзменении(Элемент)
	СлужебнаяДатаАктуальностиВСДПриИзмененииНаСервере(Элементы.АктуальностьВСД.ТекущиеДанные.GUID, Элементы.АктуальностьВСД.ТекущиеДанные.ДатаАктуальности);
	СлужебнаяЗаполнитьТаблицуАктуальностиВСД();
	ПредупреждениеМеркурий("Дата актуальности ВСД изменена!");
КонецПроцедуры

&НаСервере
Процедура СлужебнаяЗаполнитьДатуАктуальностиПоВыделеннымНаСервере(ДатаАктуальности)
	
	ВыделенныеСтроки = Элементы.АктуальностьВСД.ВыделенныеСтроки;
	МассивСвойств = Новый Массив;
	Для Каждого ТекИД из ВыделенныеСтроки Цикл
		МассивСвойств.Добавить("АктуалВхВСД_"+АктуальностьВСД.НайтиПоИдентификатору(ТекИд).GUID);
	КонецЦикла;

	МодульОбъекта().НастройкиСлужебнаяИзменитьАктуальностьВСД(МассивСвойств, ДатаАктуальности);
	
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяОбработчикВыбораДатыАктуальности(ВыбДата, НеиспПараметр) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбДата) Тогда
		Возврат;
	КонецЕсли;
	
	СлужебнаяЗаполнитьДатуАктуальностиПоВыделеннымНаСервере(ВыбДата);
	СлужебнаяЗаполнитьТаблицуАктуальностиВСД();
	ПредупреждениеМеркурий("Дата актуальности ВСД изменена!");

КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяЗаполнитьДатуАктуальностиПоВыделенным(Команда)
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВводДаты(Новый ОписаниеОповещения(""СлужебнаяОбработчикВыбораДатыАктуальности"", ЭтаФорма), Элементы.АктуальностьВСД.ТекущиеДанные.ДатаАктуальности, ""Выберите дату"", ЧастиДаты.ДатаВремя)");
	Иначе
		ВыбДата = Элементы.АктуальностьВСД.ТекущиеДанные.ДатаАктуальности;
		Если ВвестиДату(ВыбДата, "Выберите дату", ЧастиДаты.ДатаВремя) Тогда
			СлужебнаяОбработчикВыбораДатыАктуальности(ВыбДата, Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяАктуальностьВСДПриАктивизацииСтроки(Элемент)
	Если Элементы.АктуальностьВСД.ТекущиеДанные<>Неопределено Тогда
		текКнопка = Элементы.АктуальностьВСДЗаполнитьДатуАктуальностиПоВыделенным;
		текДатаАктуальности = Элементы.АктуальностьВСД.ТекущиеДанные.ДатаАктуальности;
		ДоступностьКнопки = Элементы.АктуальностьВСД.ВыделенныеСтроки.Количество()>1;
		текКнопка.Доступность = ДоступностьКнопки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СлужебнаяАктуальностьОСЖПриИзмененииНаСервере(GUID, ДатаАктуальности)
	МодульОбъекта().ОперативныйСкладскойЖурнал.Вставить("Актуальность"+GUID, ДатаАктуальности);
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяАктуальностьОСЖПриИзменении(Элемент)
	
	текСтрока = Элементы.АктуальностьОперативногоСкладскогоЖурнала.ТекущиеДанные;
	СлужебнаяАктуальностьОСЖПриИзмененииНаСервере(текСтрока.GUID, текСтрока.ДатаАктуальности);
	ПредупреждениеМеркурий("Дата актуальности оперативного складского журнала изменена!");

КонецПроцедуры


&НаСервере
Процедура СлужебнаяОбновитьКлассификаторыИкарНаСервере()
	МодульОбъекта().ПолучитьКлассификаторСтранМеркурий(Истина);
	МодульОбъекта().ПолучитьКлассификаторРегионовМеркурий(Истина,МодульОбъекта().ПолучитьКлассификаторСтранМеркурий().Найти("RU","Код").GUID);
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяОбновитьКлассификаторыИкар(Команда)
	СлужебнаяОбновитьКлассификаторыИкарНаСервере();
	ПредупреждениеМеркурий("Обновлен КЭШ классификаторов стран и регионов РФ из Меркурия");
КонецПроцедуры

&НаСервере
Процедура СлужебнаяОбновитьКлассификаторТиповПродукцииНаСервере()
	МодульОбъекта().ТаблицаПродукцииВетис(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяОбновитьКлассификаторТиповПродукции(Команда)
	СлужебнаяОбновитьКлассификаторТиповПродукцииНаСервере();
	ПредупреждениеМеркурий("Обновлен КЭШ классификаторов типов продукции из Меркурия");
КонецПроцедуры

&НаСервере
Процедура СлужебнаяСохранитьШаблонПодключаемогоМодуляНаСервере(ПолноеИмяФайла)
	МодульОбъекта().ПолучитьМакет("ШаблонПодключаемогоМодуляМеркурий").Записать(ПолноеИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяСохранитьШаблонПодключаемогоМодуля(Команда)
	ДФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДФ.Фильтр="epf|*.epf";
	ДФ.ПолноеИмяФайла="КонтурEDI_ПодключаемыйМодульМеркурий_Шаблон.epf";
	Если ДФ.Выбрать() Тогда
		СлужебнаяСохранитьШаблонПодключаемогоМодуляНаСервере(ДФ.ПолноеИмяФайла);
		ПредупреждениеМеркурий("Шаблон сохранен во внешнем файле");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ИнвентаризацияПолучитьСписокОрганизацийПлощадок(ОрганизацияИлиПлощадка)
	Если ОрганизацияИлиПлощадка = "Организация" ИЛИ ОрганизацияИлиПлощадка = "ОрганизацияСЖ" Тогда
		Возврат МодульОбъекта().ПолучитьСписокНашихОрганизаций();
	КонецЕсли;
	Возврат МодульОбъекта().ПолучитьСписокНашихПлощадок();
КонецФункции

&НаСервере
Функция ПолучитьДопРеквизитЭлементаДопСправочника(ЭлементСправочника, ИмяАтрибута)
	Возврат МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(ЭлементСправочника, ИмяАтрибута);
КонецФункции

//******************************* Инвентаризация **********************************
&НаКлиенте
Функция НетПотериДанныхИЛИПользовательНаНееИдет()
	
	//Если Инвентаризация.Количество()<>0 Тогда
	//	ТекстВопроса = "Для этого потребуется очистить таб часть инвентаризации. Очищаем";
	//	ПоказатьВопрос(Новый ОписаниеОповещения("НетПотериДанныхИЛИПользовательНаНееИдетОповещение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	//	//Если Вопрос("Для этого потребуется очистить таб часть инвентаризации. Очищаем", РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да Тогда
	//	//	Возврат Истина;			
	//	//Иначе
	//	//	Возврат Ложь;			
	//	//КонецЕсли;	
	//КонецЕсли;
	
	Возврат Истина;			
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОрганизацияПлощадкаНачалоВыбора("Организация", Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОрганизацияПлощадкаНачалоВыбора("Площадка", Элемент)
	
КонецПроцедуры

&НаСервере
Процедура ИнвентаризацияЗаполнитьПоДанным1СНаСервере()
	ТабИнвентаризация = РеквизитФормыВЗначение("Инвентаризация");
	МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьИнвентаризацию",,Новый Структура("ДатаЗапросаОстатков1С,ТабИнвентаризация,Организация,ОрганизацияGUID,Площадка,ПлощадкаGUID",ДатаЗапросаОстатков1С,ТабИнвентаризация,Организация,ОрганизацияGUID,Площадка,ПлощадкаGUID));
	ЗначениеВРеквизитФормы(ТабИнвентаризация, "Инвентаризация");
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияЗаполнитьПоДанным1С(Команда)
	
	Если не ЗначениеЗаполнено(ОрганизацияGUID)
		ИЛИ НЕ ЗначениеЗаполнено(ПлощадкаGUID) Тогда
		ПредупреждениеМеркурий("Укажите оба поля - Организация и Площадка и убедитесь что у них есть соответствия GUID");//GotIt
		Возврат;
	КонецЕсли;
	
	//Если НетПотериДанныхИЛИПользовательНаНееИдет() Тогда
		Инвентаризация.Очистить();
	//Иначе
	//	Возврат;
	//КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаЗапросаОстатков1С) Тогда 
		ДатаЗапросаОстатков1С = ТекущаяДата();
		ПредупреждениеМеркурий("Раз не указана дата запроса остатков, то будем выбирать на текущий момент."+Символы.ПС+"(Текущая дата установлена в параметр)");//GotIt
	КонецЕсли;

	ИнвентаризацияЗаполнитьПоДанным1СНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИнвентаризацияПрочитатьСведенияМеркурияНаСервере()
	
	МодульОбъекта().НастройкиИнвентаризацияПрочитатьСведенияИзМеркурия(Инвентаризация, Организация, ОрганизацияGUID, Площадка, ПлощадкаGUID);

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияПрочитатьСведенияМеркурия(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПлощадкаGUID) Тогда
		ПредупреждениеМеркурий("Укажите поле Площадка и убедитесь что у него есть соответствие GUID");//GotIt
		Возврат;
	КонецЕсли;
	
	
	ИнвентаризацияПрочитатьСведенияМеркурияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияУстановитьВсе(Команда)
	Для каждого Строка Из Инвентаризация Цикл
		Строка.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияИнвертироватьФлажки(Команда)
	Для каждого Строка Из Инвентаризация Цикл
		Строка.Пометка = НЕ Строка.Пометка;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияОтметитьВыделенные(Команда)
	
	Если Элементы.Инвентаризация.ВыделенныеСтроки.Количество()>1 Тогда
		Для каждого Строка Из Элементы.Инвентаризация.ВыделенныеСтроки Цикл
			Инвентаризация.НайтиПоИдентификатору(Строка).Пометка = Истина;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнвентаризацияОтразитьРасхожденияНаСервере()
	
	Если Не ЗначениеЗаполнено(ДатаНаКоторуюСформироватьИнвентаризацию) Тогда 
		ДатаНаКоторуюСформироватьИнвентаризацию = ТекущаяДата();
	КонецЕсли;
	
	РезультатОтраженияИнвентаризации = МодульОбъекта().ОтразитьРезультатыИнвентаризации(Инвентаризация,ПлощадкаGUID,ОрганизацияGUID,ДатаНаКоторуюСформироватьИнвентаризацию); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияОтразитьРасхождения(Команда)
	
	ИнвентаризацияОтразитьРасхожденияНаСервере();
	
	Для каждого Строка Из Инвентаризация Цикл
		Строка.КоличествоТекМеркурий = 0;
		Строка.GUID_Партии = "";
	КонецЦикла;
	
	Инвентаризация.Очистить();
	ИнвентаризацияЗаполнитьПоДанным1С(Неопределено);
	ИнвентаризацияПрочитатьСведенияМеркурия(Неопределено);

	
КонецПроцедуры

//******************************* Продукция производителя **********************************

&НаСервере
Функция ПродукцияПроизводителяОбновитьНаСервере()
	
	ТабПродукции = РеквизитФормыВЗначение("ТаблицаПродукцияПроизводителя");
	ТекстОшибки = МодульОбъекта().НастройкиПродукцияПроизводителяОбновить(ТабПродукции, ПлощадкаПроизводитель);
	Если ТекстОшибки = "" Тогда
		МодульОбъекта().ЗаполнитьАртикулНаименованиеИШтрихкодТаблицыПродукцииПроизводителя(ТабПродукции);
		ТекстОшибки =  МодульОбъекта().НастройкиПродукцияПроизводителяПрочитатьКаталогПлощадкиМеркурий(ТабПродукции, ПлощадкаПроизводитель); //Текст ошибки (если есть)
		ЗначениеВРеквизитФормы(ТабПродукции,"ТаблицаПродукцияПроизводителя");
	КонецЕсли;
	Возврат ТекстОшибки;
	
КонецФункции

&НаКлиенте
Процедура ПлощадкаПроизводительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОрганизацияПлощадкаНачалоВыбора("ПлощадкаПроизводитель", Элемент);
	
	//это не работает для немодальных вызовов
	Если ЗначениеЗаполнено(ПлощадкаПроизводитель) Тогда
		ТекстОшибки = ПродукцияПроизводителяОбновитьНаСервере();
		Если НЕ ТекстОшибки = "" Тогда
			ПредупреждениеМеркурий(ТекстОшибки);
		КонецЕсли;
	КонецЕсли

	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПроизводителяОбновить(Команда)
	
	Если ЗначениеЗаполнено(ПлощадкаПроизводитель) Тогда
		ТекстОшибки = ПродукцияПроизводителяОбновитьНаСервере();
		Если НЕ ТекстОшибки = "" Тогда
			ПредупреждениеМеркурий(ТекстОшибки);
		КонецЕсли;
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПроизводителяУстановитьСнятьВсе(Флаг)
	Для Каждого стр из ТаблицаПродукцияПроизводителя Цикл
		стр.Пометка = Флаг;
	КонецЦикла;
КонецПроцедуры
	
&НаКлиенте
Процедура ПродукцияПроизводителяУстановитьВсе(Команда)
	ПродукцияПроизводителяУстановитьСнятьВсе(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПроизводителяСнятьВсе(Команда)
	ПродукцияПроизводителяУстановитьСнятьВсе(Ложь);
КонецПроцедуры

&НаСервере
Функция ПродукцияПроизводителяОпубликоватьИзмененияНаСервере()
	
	СтрокаСGUID = ПлощадкаПроизводитель.ДополнительныеРеквизиты.Найти("GUID","ИмяРеквизита");
	Если СтрокаСGUID = Неопределено Тогда
		Возврат "Похоже что возникли проблемы с определением GUID выбранной вами площадки"; 
	КонецЕсли;

	ТабПродукции = РеквизитФормыВЗначение("ТаблицаПродукцияПроизводителя");
	МодульОбъекта().ОпубликоватьКаталогПлощадки(СтрокаСGUID.Значение, ТабПродукции, ПлощадкаПроизводитель);
	ЗначениеВРеквизитФормы(ТабПродукции,"ТаблицаПродукцияПроизводителя");
	Возврат ПродукцияПроизводителяОбновитьНаСервере();
	
КонецФункции

&НаКлиенте
Процедура ПродукцияПроизводителяОпубликоватьИзменения(Команда)
	ТекстОшибки = ПродукцияПроизводителяОпубликоватьИзмененияНаСервере();
	Если НЕ ТекстОшибки = "" Тогда
		ПредупреждениеМеркурий(ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПродукцияПроизводителяПрочитатьКаталогПлощадкиМеркурийНаСервере()
	
	СтрокаСGUID = ПлощадкаПроизводитель.ДополнительныеРеквизиты.Найти("GUID","ИмяРеквизита");
	Если СтрокаСGUID = Неопределено Тогда
		Возврат "Похоже что возникли проблемы с определением GUID выбранной вами площадки"; 
	КонецЕсли;
	
	ТабПродукции = РеквизитФормыВЗначение("ТаблицаПродукцияПроизводителя");
	МодульОбъекта().НастройкиПродукцияПроизводителяПрочитатьКаталогПлощадкиМеркурий(ТабПродукции, ПлощадкаПроизводитель);
	ЗначениеВРеквизитФормы(ТабПродукции,"ТаблицаПродукцияПроизводителя");
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ПродукцияПроизводителяПрочитатьКаталогПлощадкиМеркурий(Команда)
	
	ТекстОшибки = ПродукцияПроизводителяПрочитатьКаталогПлощадкиМеркурийНаСервере();
	Если НЕ ТекстОшибки = "" Тогда
		ПредупреждениеМеркурий(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПродукцияПроизводителяОчиститьИдентификаторыОтличающихсяНаСервере()
	
	СтрокаСGUID = ПлощадкаПроизводитель.ДополнительныеРеквизиты.Найти("GUID","ИмяРеквизита");
	Если СтрокаСGUID = Неопределено Тогда
		Возврат "Похоже что возникли проблемы с определением GUID выбранной вами площадки"; 
	КонецЕсли;

	Для Каждого СтрокаТаблицыПродукции Из ТаблицаПродукцияПроизводителя ЦИкл
		
		Если Не МодульОбъекта().ЕстьЧтоОбновлятьПоТовару(СтрокаТаблицыПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		//ОсновнойМодуль().УдалитьЗначениеСвойстваОбъекта(СтрокаТаблицыПродукции.Номенклатура,"ПлощадкаUUID"+СтрокаСGUID.Значение);
		//ОсновнойМодуль().УдалитьЗначениеСвойстваОбъекта(СтрокаТаблицыПродукции.Номенклатура,"GUIDнаПлощ"+СтрокаСGUID.Значение);
		МодульОбъекта().КаталогТоваровМеркурий_ОчиститьСоответствиеПоНоменклатуре(СтрокаТаблицыПродукции.Номенклатура
		,СтрокаТаблицыПродукции.ХарактеристикаНоменклатуры
		,ПолучитьGUIDПлощадки());

	КонецЦикла;
	
	Возврат "";

КонецФункции

&НаКлиенте
Процедура ПродукцияПроизводителяОчиститьИдентификаторыОтличающихся(Команда)
	
	ТекстОшибки = ПродукцияПроизводителяОчиститьИдентификаторыОтличающихсяНаСервере();
	Если НЕ ТекстОшибки = "" Тогда
		ПредупреждениеМеркурий(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияПроизводителяПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияПроизводителяПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СоответствияТоваровТонкаяНастройкаОбработчик(Парам1, Парам2) Экспорт
	Элементы.СправочникНоменклатуры.Обновить();//установить текущую строку
КонецПроцедуры

&НаКлиенте
Процедура СоответствияТоваровТонкаяНастройка(Команда)
	
	ВыделенныеСтроки = Элементы.СправочникНоменклатуры.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 1 Тогда
		
		Если ВыделенныеСтроки[0].ЭтоГруппа Тогда 
			ПредупреждениеМеркурий("Для тонкой настройки нужно выделить элемент, а не группу!");
			Возврат;
		КонецЕсли;
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресХранилища", Параметры.АдресХранилища);
		ПараметрыФормы.Вставить("ПутьКФормамМеркурий", Параметры.ПутьКФормамМеркурий);
		ПараметрыФормы.Вставить("МодальностьЗапрещена", Параметры.МодальностьЗапрещена);
		ПараметрыФормы.Вставить("Номенклатура", Элементы.СправочникНоменклатуры.ТекущиеДанные.Ссылка);
	
		Если Параметры.МодальностьЗапрещена Тогда 
			ОткрытьФормуОбъектаМодально(Параметры.ПутьКФормамМеркурий+"Меркурий_СоответствиеНоменклатурыУправляемая", ПараметрыФормы,"СоответствияТоваровТонкаяНастройкаОбработчик");//,ПараметрыФормы.ВыбранноеЗначение);
		Иначе
			ВыбраннаяСтрока = ПолучитьФормуОбработки(Параметры.ПутьКФормамМеркурий+"Меркурий_СоответствиеНоменклатурыУправляемая",ПараметрыФормы).ОткрытьМодально();
			СоответствияТоваровТонкаяНастройкаОбработчик(ВыбраннаяСтрока, Неопределено);
		КонецЕсли;

	Иначе
		ПредупреждениеМеркурий("Для тонкой настройки нужно выделить 1 строку!");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПродукцияПроизводителяСвязатьВыделенныеНаСервере()
	ТабПродукции = РеквизитФормыВЗначение("ТаблицаПродукцияПроизводителя");
	ВыделенныеСтроки = МодульОбъекта().ВыделенныеСтрокиВМассив(ЭтаФорма, "ТаблицаПродукцияПроизводителя");
	Результат = МодульОбъекта().НастройкиПродукцияПроизводителяСвязатьВыделенные(ВыделенныеСтроки, ТабПродукции, ПолучитьGUIDПлощадки());
	Если Результат = "" Тогда
		ЗначениеВРеквизитФормы(ТабПродукции, "ТаблицаПродукцияПроизводителя");
	КонецЕсли;
	Возврат Результат;	
КонецФункции

&НаКлиенте
Процедура ПродукцияПроизводителяСвязатьВыделенные(Команда)

	Результат = ПродукцияПроизводителяСвязатьВыделенныеНаСервере();
	Если ЗначениеЗаполнено(Результат) Тогда
		ПредупреждениеМеркурий(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияПроизводителяЗабытьВыделенныеНаСервере()
	
	ТабПродукции = РеквизитФормыВЗначение("ТаблицаПродукцияПроизводителя");
	ВыделенныеСтроки = МодульОбъекта().ВыделенныеСтрокиВМассив(ЭтаФорма, "ТаблицаПродукцияПроизводителя");
	МодульОбъекта().НастройкиПродукцияПроизводителяЗабытьВыделенные(ВыделенныеСтроки, ТабПродукции, ПолучитьGUIDПлощадки());
	ЗначениеВРеквизитФормы(ТабПродукции, "ТаблицаПродукцияПроизводителя");
		
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПроизводителяЗабытьВыделенные(Команда)
	
	ПродукцияПроизводителяЗабытьВыделенныеНаСервере();
	ПродукцияПроизводителяОбновить("");
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСписокХС()
	ХозяйствующиеСубъекты.Очистить();
	ТаблицаТекХС = МодульОбъекта().ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийХС", Неопределено);
	
	Для Каждого СтрокаХС Из ТаблицаТекХС Цикл
		НоваяСтрока = ХозяйствующиеСубъекты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаХС); 
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ИспользуетсяРазграничениеПрав()
	Возврат МодульОбъекта().ИспользуетсяРазграничениеПрав();
КонецФункции

&НаСервере
Функция ПриАктивизацииЗакладкиСЖНаСервере()
	
	КодОшибки = 0;//1 - нет организации, 2 - нет площадки, 3 - нет того и другого
	
	Если Не ЗначениеЗаполнено(ОрганизацияСЖ) Тогда 
		СписокОрг = МодульОбъекта().ПолучитьСписокНашихОрганизаций();
		Если СписокОрг.Количество() = 0 Тогда
			КодОшибки = КодОшибки + 1;
		ИначеЕсли СписокОрг.Количество() = 1 Тогда
			ВыбраннаяОрганизацияСЖ = СписокОрг[0];
			Если ВыбраннаяОрганизацияСЖ<>Неопределено Тогда 
				ОрганизацияСЖGUID = "";
				СкладскойЖурнал.Очистить();
				ОрганизацияСЖ = ВыбраннаяОрганизацияСЖ.Значение;
				ОрганизацияСЖGUID = МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(ОрганизацияСЖ,"GUID");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПлощадкаСЖ) Тогда
		СписокПлощадок = МодульОбъекта().ПолучитьСписокНашихПлощадок();
		Если СписокПлощадок.Количество() = 0 Тогда
			КодОшибки = КодОшибки + 1;
		ИначеЕсли СписокПлощадок.Количество() = 1 Тогда
			ВыбраннаяПлощадкаСЖ = СписокПлощадок[0];
			
			Если ВыбраннаяПлощадкаСЖ<>Неопределено Тогда 
				ПлощадкаСЖGUID = "";
				СкладскойЖурнал.Очистить();
				ПлощадкаСЖ = ВыбраннаяПлощадкаСЖ.Значение;
				ПлощадкаСЖGUID = МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(ПлощадкаСЖ,"GUID");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат КодОшибки;
	
КонецФункции

&НаКлиенте
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элемент.ТекущаяСтраница.Имя = "СтраницаСлужебная" Тогда
		СлужебнаяЗаполнитьТаблицуАктуальностиВСД();
		СлужебнаяЗаполнитьТаблицуАктуальностиОСЖ();
	ИначеЕсли Элемент.ТекущаяСтраница.Имя = "НастройкиПользователей" Тогда
		
		Если ИспользуетсяРазграничениеПрав() Тогда
			Элементы.Включить.Заголовок = "Выключить";
			Элементы.ПояснениеНастройкиПользователей.Заголовок = " Разграничение прав доступа ВКЛЮЧЕНО! Здесь можно редактировать доступ пользователей к хоз. субъектам и площадкам.  Запрос на сохранение изменений пользователя делается автоматически при переходе от пользователя к пользователю.";
		Иначе
			Элементы.Включить.Заголовок = "Включить";
			Элементы.ПояснениеНастройкиПользователей.Заголовок = " В настоящий момент разграничение прав доступа ВЫКЛЮЧЕНО! Здесь можно редактировать доступ пользователей к хоз. субъектам и площадкам.  Запрос на сохранение изменений пользователя делается автоматически при переходе от пользователя к пользователю.";
		КонецЕсли;

		Если НЕ НастройкаПользователейЕстьАдминистративныеПрава() Тогда
			ПредупреждениеМеркурий("Необходимо обладать административными правами для настройки!");
			Возврат;
		КонецЕсли;
		НастройкаПользователейЗаполнитьСписок();
		Если СписокПользователей.Количество() = 0 Тогда
			ПредупреждениеМеркурий("Не найдено ни одного пользователя");
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущаяСтраница.Имя = "СтраницаСкладскойЖурнал" Тогда
		КодОшибки = ПриАктивизацииЗакладкиСЖНаСервере();
		ТекстПредупреждения = "";
		Если КодОшибки = 1 Тогда
			ТекстПредупреждения = "Похоже что вы еще не сопоставили ни одной своей организации";
		ИначеЕсли КодОшибки = 2 Тогда
			ТекстПредупреждения = "Похоже что вы еще не сопоставили ни одной своей площадки";
		ИначеЕсли КодОшибки = 3 Тогда
			ТекстПредупреждения = "Похоже что вы еще не сопоставили ни одной своей организации и площадки";
		КонецЕсли;
		Если ТекстПредупреждения<>"" Тогда
			ПредупреждениеМеркурий(ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗапроситьСведенияО_productItem_ПоUUID(productItemGUID)
	Возврат МодульОбъекта().ЗапроситьСведенияО_productItem_ПоUUID(productItemGUID);
КонецФункции

&НаКлиенте
Процедура ПросмотретьproductItem(productItemGUID)
	
	Если ЗначениеЗаполнено(productItemGUID) Тогда 
		
		РезультатЗапроса = ЗапроситьСведенияО_productItem_ПоUUID(productItemGUID);	
		Если РезультатЗапроса.Успешно = Истина Тогда 
			ФормаПросмотраТовара = ПолучитьФорму(Параметры.ПутьКФормамМеркурий+"Меркурий_ПросмотрProductItemУправляемая",РезультатЗапроса, ЭтаФорма);
			ФормаПросмотраТовара.Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИнвентаризацияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ИнвентаризацияНаименование" Тогда
		
		СтандартнаяОбработка = Ложь;
		текНоменклатура = Элементы.Инвентаризация.ТекущиеДанные.Номенклатура;
		Если ЗначениеЗаполнено(текНоменклатура) Тогда
			Если Параметры.МодальностьЗапрещена Тогда 
				Выполнить("ПоказатьЗначение(,текНоменклатура)");
			Иначе
				ОткрытьЗначение(текНоменклатура);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ИнвентаризацияproductItemUUID" или Элемент.ТекущийЭлемент.Имя = "ИнвентаризацияproductItem" Тогда
		СтандартнаяОбработка = Ложь;
		ПросмотретьproductItem(Элементы.Инвентаризация.ТекущиеДанные.productItemUUID);
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.Инвентаризация.ТекущиеДанные;
	ТекСтрока.Пометка = ТекСтрока.Количество<>ТекСтрока.КоличествоТекМеркурий;
КонецПроцедуры

&НаСервере
Процедура ИнвентаризацияОтобразитьВсеКолонкиНажатиеНаСервере()
	Кнопка = Элементы.ИнвентаризацияОтобразитьВсеКолонки;
	Кнопка.Пометка = Не Кнопка.Пометка;
	МодульОбъекта().НастройкиОтобразитьКолонкиИнвентаризации(Элементы, Кнопка.Пометка);
	//МодульОбъекта().УстановитьВидимостьДоступностьКолонокТЧ(Элементы, "Инвентаризация", Не Кнопка.Пометка);
	//Элементы.ОрганизацияGUID.Видимость = Кнопка.Пометка;
	//Элементы.ПлощадкаGUID.Видимость = Кнопка.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияОтобразитьВсеКолонки(Команда)
	ИнвентаризацияОтобразитьВсеКолонкиНажатиеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПродукцияПроизводителяОтобразитьВсеКолонкиНажатиеНаСервере()
	
	Кнопка = Элементы.ТаблицаПродукцияПроизводителяОтобразитьВсеКолонки;
	Кнопка.Пометка = Не Кнопка.Пометка;
	//МодульОбъекта().УстановитьВидимостьДоступностьКолонокТЧ(Элементы, "ТаблицаПродукцияПроизводителя", Не Кнопка.Пометка);
	МодульОбъекта().НастройкиОтобразитьКолонкиПродукцииПроизводителя(Элементы,  Кнопка.Пометка);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПроизводителяОтобразитьВсеКолонки(Команда)
	ПродукцияПроизводителяОтобразитьВсеКолонкиНажатиеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияОтборТолькоОтмеченных(Команда)
	
	Кнопка = Элементы.ИнвентаризацияОтборТолькоОтмеченных;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	Элементы.Инвентаризация.ОтборСтрок = Новый ФиксированнаяСтруктура("Пометка", ?(Кнопка.Пометка, Истина, Неопределено));

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПроизводителяВыбратьВыделенные(Команда)
	
	ПродукцияПроизводителяУстановитьСнятьВсе(Ложь);
	Если Элементы.ТаблицаПродукцияПроизводителя.ВыделенныеСтроки.Количество()>1 Тогда
		Для каждого Строка Из Элементы.ТаблицаПродукцияПроизводителя.ВыделенныеСтроки Цикл
			ТаблицаПродукцияПроизводителя.НайтиПоИдентификатору(Строка).Пометка = Истина;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСписокПредприятий()
	Предприятия.Очистить();
	ТаблицаТекПредприятий = МодульОбъекта().ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийПлощадка", Неопределено);
	
	Для Каждого СтрокаПП Из ТаблицаТекПредприятий Цикл
		НоваяСтрока = Предприятия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПП); 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ПередЗакрытиемНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	МодульОбъекта().Инициализировать(ОсновнойМодуль());//перенес с ОФ
КонецПроцедуры

&НаСервере
Процедура СлужебнаяПерепроверитьProductItemВЖурналахНаСервере()
	
	//Сервисная функция - идет в актуальные складские журналы и перепроверяет ProductItem на предмет протухания после чего обновляет их
	//при этом! если ProductItem был удален то нам необходимо вообще очистить его
	МодульОбъекта().ПерепроверитьProductItemВЖурналах();
	
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяПерепроверитьProductItemВЖурналах(Команда)
	СлужебнаяПерепроверитьProductItemВЖурналахНаСервере();
	ПредупреждениеМеркурий("Версии ProductItem (4 уровень классификации) обновлены в журналах всех наших площадок");
КонецПроцедуры

&НаСервере
Процедура СлужебнаяПолностьюПеречитатьСкладскойЖурналПлощадкиНаСервере(ВыбраннаяПлощадкаGUID) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяПлощадкаGUID) Тогда 
		СписокХС = МодульОбъекта().ПолучитьСписокНашихОрганизаций();
		Для Каждого НашХС Из СписокХС Цикл
			НашХСGUID = ПолучитьДопРеквизитЭлементаДопСправочника(НашХС.Значение,"GUID");
			Если ЗначениеЗаполнено(НашХСGUID) Тогда 
				МодульОбъекта().ПолучитьЗаписиСкладскогоЖурнала(ВыбраннаяПлощадкаGUID,Истина,НашХСGUID)
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//при перепрочитывании с 0 есть вероятность прочесть устаревший ProductItemUUID
	МодульОбъекта().ПерепроверитьProductItemВЖурналах();

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПеречитатьСкладскойЖурналПлощадки(ВыбраннаяПлощадка, Параметр2 = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ВыбраннаяПлощадка.Значение) Тогда 
		СлужебнаяПолностьюПеречитатьСкладскойЖурналПлощадкиНаСервере(ВыбраннаяПлощадка.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяПолностьюПеречитатьСкладскойЖурналПлощадки(Команда)
	
	СписокПлощадок = СкладскойЖурналПолучитьСписокПлощадок();
	Если СписокПлощадок.Количество() = 1 Тогда
		ВыбраннаяПлощадка = СписокПлощадок.Получить(0);
		ОбработчикПеречитатьСкладскойЖурналПлощадки(ВыбраннаяПлощадка);
	ИначеЕсли СписокПлощадок.Количество() > 1 Тогда
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("СписокПлощадок.ПоказатьВыборЭлемента(Новый ОписаниеОповещения(""ОбработчикПеречитатьСкладскойЖурналПлощадки"", ЭтаФорма), ""По какой площадке построить таблицу?"")");
		Иначе
			ВыбЭлемент = СписокПлощадок.ВыбратьЭлемент("По какой площадке перечитать журнал?");
			ОбработчикПеречитатьСкладскойЖурналПлощадки(ВыбЭлемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СвязатьПлощадкуСХСНаСервере(ХСВладелецGUID,ПлощадкаGUID)
	Возврат МодульОбъекта().СвязатьПлощадкуСХС(ХСВладелецGUID,ПлощадкаGUID);
КонецФункции

&НаКлиенте
Процедура ХССвязатьХСИПлощадку(Команда)
	
	Если Элементы.ХозяйствующиеСубъекты.ТекущиеДанные=Неопределено или Элементы.Предприятия.ТекущиеДанные=Неопределено Тогда
		ПредупреждениеМеркурий("Сначала необходимо выделить ХС и Площадку, которые необходимо связать");
		Возврат;
	КонецЕсли;
	
	ХСВладелецGUID = Элементы.ХозяйствующиеСубъекты.ТекущиеДанные.GUID;
	ПлощадкаGUID = Элементы.Предприятия.ТекущиеДанные.GUID;
	
	Если ЗначениеЗаполнено(ПлощадкаGUID) И ЗначениеЗаполнено(ХСВладелецGUID) ТОгда
		РезультатУстановкиСвязи = СвязатьПлощадкуСХСНаСервере(ХСВладелецGUID,ПлощадкаGUID);
		Если РезультатУстановкиСвязи.Успешно = Истина Тогда
			ПредупреждениеМеркурий("Удалось связать!");
		Иначе
			ПредупреждениеМеркурий("НЕ удалось связать!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЦелейМеркурий()
	СпЦелей = Новый СписокЗначений;
	СпЦелей.ЗагрузитьЗначения(МодульОбъекта().ПолучитьКлассификаторЦелейМеркурий().ВыгрузитьКолонку("Наименование"));
	Возврат СпЦелей;
КонецФункции

&НаКлиенте
Процедура ОбработчикВыбораОсновнойНастройки(ВыбранноеЗначение, ТекСтрока) Экспорт
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		ТекСтрока.Значение=ВыбранноеЗначение.Значение;
		//ДеревоНастроекЗначениеПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция РазложитьСтрокуВМассивСлов(Стр, Символ)//надо бы в клиенте сделать
	Возврат ОсновнойМодуль().EDI_РазложитьСтрокуВМассивСлов(Стр,Символ);
КонецФункции

&НаКлиенте 
Процедура ОбработчикОтметкиЭлементовОсновнойНастройки(СписокВыбора, ТекСтрока) Экспорт
	
	Если СписокВыбора<>Неопределено Тогда
		ТекСтрока.Значение = "";
		Для Каждого ЭлСп Из СписокВыбора Цикл
			Если ЭлСп.Пометка Тогда
				ТекСтрока.Значение = ТекСтрока.Значение+?(ПустаяСтрока(ТекСтрока.Значение),"",",")+ЭлСп.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//ДеревоНастроекЗначениеПриИзменении(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока=Элементы.ДеревоНастроек.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь; 
	
	//СтандартнаяОбработкаEDI = Истина;
	//ОсновнойМодуль().ОбработкаСобытияПодключаемогоМодуля("МеркурийЗначениеНастройкиНачалоВыбора",СтандартнаяОбработкаEDI,Новый Структура("Форма,Элемент,ТекущиеДанные",ЭтаФорма,Элемент,ТекСтрока));
	//Если СтандартнаяОбработкаEDI<>Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если Лев(ТекСтрока.НастройкаИД,14) = "М_ОсновнаяЦель" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СпЦелей = ПолучитьСписокЦелейМеркурий();
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("СпЦелей.ПоказатьВыборЭлемента(Новый ОписаниеОповещения(""ОбработчикВыбораОсновнойНастройки"",ЭтаФорма,ТекСтрока), ""Выберите цель"")");
		Иначе
			ВыбЭлемент = СпЦелей.ВыбратьЭлемент("Выберите цель");
			ОбработчикВыбораОсновнойНастройки(ВыбЭлемент, ТекСтрока);
		КонецЕсли;
		
	ИначеЕсли Найти("/М_ОсновноеЗначениеЭкспертизы/М_ОсновнойТипТранспорта/М_ОсновнойСпособХраненияПриПеревозке/М_ВидыПродукции/","/"+ТекСтрока.НастройкаИД+"/")>0 Тогда
		СписокВыбора 	= Новый СписокЗначений;
		МассивВидов		= ?(ТекСтрока.НастройкаИД="М_ВидыПродукции",РазложитьСтрокуВМассивСлов(ТекСтрока.Значение,","),Новый Массив);
		Для И1 = ?(ТекСтрока.НастройкаИД="М_ВидыПродукции",3,2) По СтрЧислоСтрок(ТекСтрока.Подсказка)-?(ТекСтрока.НастройкаИД="М_ОсновноеЗначениеЭкспертизы",1,0) Цикл
			Стр			= СокрЛП(СтрПолучитьСтроку(ТекСтрока.Подсказка,И1));
			Значение	= СокрП(Лев(Стр,Найти(СтрЗаменить(СтрЗаменить(СтрЗаменить(Стр,Символы.Таб," "),"."," "),"-"," ")," ")-1));
			СписокВыбора.Добавить(?(ТекСтрока.НастройкаИД="М_ОсновнойТипТранспорта",Число(Значение),Значение),Стр,(МассивВидов.Найти(Значение)<>Неопределено));
		КонецЦикла;
		
		Если ТекСтрока.НастройкаИД="М_ВидыПродукции" Тогда
			ЗаголовокСписка = "Выберите виды продукции";
			Если Параметры.МодальностьЗапрещена Тогда
				Выполнить("СписокВыбора.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения(""ОбработчикОтметкиЭлементовОсновнойНастройки"", ЭтаФорма, ТекСтрока), ЗаголовокСписка)");
			Иначе
				Если СписокВыбора.ОтметитьЭлементы(ЗаголовокСписка) Тогда
					ОбработчикОтметкиЭлементовОсновнойНастройки(СписокВыбора, ТекСтрока);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Параметры.МодальностьЗапрещена Тогда
				Выполнить("ПоказатьВыборИзСписка(Новый ОписаниеОповещения(""ОбработчикВыбораОсновнойНастройки"", ЭтаФорма, ТекСтрока), СписокВыбора, Элемент)");
			Иначе
				ВыбЭлемент = ВыбратьИзСписка(СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(ТекСтрока.Значение));
				ОбработчикВыбораОсновнойНастройки(ВыбЭлемент, ТекСтрока);
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ТекСтрока.Список) Тогда
	//	СтандартнаяОбработка=Ложь;
	//	СЗ=ЗначениеИзСтрокиВнутр(ТекСтрока.Список);
	//	Выб=СЗ.ВыбратьЭлемент();
	//	Если Выб<>Неопределено Тогда
	//		ТекСтрока.Значение=Выб.Значение;
	//	КонецЕсли;	
	//КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ФильтрНоменклатурыМеркурийПриИзмененииНаСервере()
	дзНоменклатураМеркурий = МодульОбъекта().ДеревоПродукцииВетис(ФильтрНоменклатурыМеркурий);
	ЗначениеВРеквизитФормы(дзНоменклатураМеркурий,"НоменклатураМеркурий");
КонецПроцедуры


&НаКлиенте
Процедура ФильтрНоменклатурыМеркурийПриИзменении(Элемент)
	ФильтрНоменклатурыМеркурийПриИзмененииНаСервере();
	Если ЗначениеЗаполнено(ФильтрНоменклатурыМеркурий) Тогда
		Элементы.НоменклатураМеркурий.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	Иначе
		Элементы.НоменклатураМеркурий.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнвентаризацияОбъединитьВыбранныеПартииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияОбъединитьВыбранныеПартии(Команда)
	ИнвентаризацияОбъединитьВыбранныеПартииНаСервере();
КонецПроцедуры

&НаСервере
Функция ОбъединитьПартииНаСервере(МассивUUIDДляМержа,НовоеНазвание, spGUID)
	Если НЕ Параметры.ВыбраннаяПлощадка = Неопределено Тогда
		СтрВозврата = МодульОбъекта().ОбъединитьПартии(МассивUUIDДляМержа,Параметры.ВыбраннаяПлощадка,НовоеНазвание, spGUID);
		СтрВозврата.ТаблицаОшибок = Неопределено;
		Возврат СтрВозврата;
	КонецЕсли;
	Возврат Новый Структура("Успешно", ложь);
КонецФункции

&НаКлиенте
Процедура ОбработчикСкладскойЖурналОбъединитьПартии(НовоеНазвание, ПараметрыОбработчика) экспорт
	
	РезультатОбъединения = ОбъединитьПартииНаСервере(ПараметрыОбработчика.МассивUUIDДляМержа,НовоеНазвание, ПараметрыОбработчика.spGUID);
	Если РезультатОбъединения.Успешно = Истина Тогда 
		Для Каждого Ид Из Элементы.СкладскойЖурнал.ВыделенныеСтроки Цикл
			СтрокаКМержу = СкладскойЖурнал.НайтиПоИдентификатору(Ид);
			СтрокаКМержу.Устарела = Истина;
		КонецЦикла;
	Иначе
		Сообщить("Не удалось Объединить "+СтрокаКМержу.Остаток+" партии с UUID:"+СтрокаКМержу.UUID_Партии);
	КонецЕсли;

КонецПроцедуры

//******************************* Проверка регионализации **********************************
&НаКлиенте
Процедура ОбработчикВыбораПлощадкиРегионализации(ВыбраннаяПлощадка, Элемент) Экспорт
	
	Если ВыбраннаяПлощадка<>Неопределено Тогда
		ЭтаФорма[Элемент.Имя]  =  ВыбраннаяПлощадка.Значение;
		ЭтаФорма[Элемент.Имя+"GUID"] = ПолучитьДопРеквизитЭлементаДопСправочника(ВыбраннаяПлощадка.Значение,"GUID");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РегионализацияПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокПлощадок = ПолучитьСписокПлощадок();
	
	Если СписокПлощадок.Количество() = 0 Тогда
		ПредупреждениеМеркурий("Похоже что вы еще не сопоставили ни одной площадки");
	КонецЕсли;
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВыборИзСписка(Новый ОписаниеОповещения(""ОбработчикВыбораПлощадкиРегионализации"", ЭтаФорма, Элемент), СписокПлощадок, Элемент)");
	Иначе
		ВыбраннаяПлощадка = ВыбратьИзСписка(СписокПлощадок, Элемент);
		ОбработчикВыбораПлощадкиРегионализации(ВыбраннаяПлощадка, Элемент);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция РегионализацияПроверитьНаСервере()
	
	МассивGUIDПлощадок = Новый Массив;
	МассивGUIDПлощадок.Добавить(РегионализацияПлощадкаИзGUID);
	МассивGUIDПлощадок.Добавить(РегионализацияПлощадкаВGUID);
	
	МассивSubProductGUID = Новый Массив;
	МассивSubProductGUID.Добавить("cd772db5-28ec-e6eb-c1d8-296cd2ec9954");       //заглушка
	
	СтрВозврата = МодульОбъекта().ПолучитьУсловияПеремещения20(МассивGUIDПлощадок,МассивSubProductGUID);
	
	Возврат СтрВозврата.Успешно;

КонецФункции

&НаКлиенте
Процедура РегионализацияПроверить(Команда)
	Если РегионализацияПроверитьНаСервере() = Истина Тогда
		ПредупреждениеМеркурий("Проверка условий регионализации прошла успешно");
	Иначе
		ПредупреждениеМеркурий("Проверка условий регионализации не пройдена");
	КонецЕсли;
КонецПроцедуры


//актуальность к ОФ М8.03.073

//сделать:
//НетПотериДанныхИЛИПользовательНаНееИдет
//ТаблицаПродукцияПроизводителяПриВыводеСтроки - из ОФ (вызов ВыделитьРасхождения + остальное)
//не кэшируется ОСЖ?
//ПросмотретьproductItem, ЗапроситьСведенияО_productItem_ПоUUID дублируется в карточке сообщения
//в ОФ ИнвентаризацияПриВыводеСтроки - меняется текст с гуидами - переносить ли?....
//ДеревоНастроекЗначениеНачалоВыбора - есть коммент в коде (в т.ч. обработка из ПМ)
//ДеревоНастроекЗначениеПриИзменении - подключаемый модуль добавить?
//СправочникНоменклатурыПриВыводеСтроки - проверить, надо ли?
//СправочникНоменклатурыПриПолученииДанных - проверить
//Список номенклатуры выводить единицу как "кг (гуид)" сейчас выводится просто гуид

//ПрисвоитьКоэффициентНажатие - переделать
//ПриОткрытии - видимость колонок



//ОбъединитьПартииНаСервере СтрВозврата.ТаблицаОшибок = Неопределено; переделать?






//******************************* Общие **********************************

//&НаСервере
//Функция МодульОбъекта()

//	Если ОбработкаОбъект=Неопределено Тогда
//		
//		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
//		ОбработкаОбъект.ОсновнойМодуль = ОсновнойМодуль();
//		ОбработкаОбъект.Инициализировать(ОбработкаОбъект.ОсновнойМодуль);
//		
//	КонецЕсли;	
//	
//	Возврат ОбработкаОбъект;
//	
//КонецФункции

//&НаСервере
//Функция ОсновнойМодуль()
//	Если ОснМодуль = Неопределено Тогда
//		ОснМодуль = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища).ОбработкаОбъект;
//	КонецЕсли;
//	Возврат ОснМодуль;
//КонецФункции

