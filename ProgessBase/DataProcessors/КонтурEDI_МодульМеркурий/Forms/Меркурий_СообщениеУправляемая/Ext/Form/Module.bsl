&НаСервере
Перем ОбработкаОбъект;
Перем СпЭлементовУсловногоОформления;

&НаСервере
Перем ОснМодуль;

&НаСервере
//Перем ОсобенностиСообщений;
Перем ПараметрыАвтотестирования Экспорт;
////Перем Сообщение; // для создания формы  перенесено в реквизиты формы
//Перем НастройкаФормы;
Перем МетаданныеСообщения;
Перем ВнешнееХранилище;
//Перем ОбязательныйКодТовараПокупателя;     
Перем ПараметрыДействия;
Перем СтруктураВременногоХранилища;

&НаКлиенте
Перем ЗакрытиеРазрешено;
&НаКлиенте
Перем СписокВыбораУсловийХранения;
&НаКлиенте
Перем СписокФормВСД;

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.Инициализировать(ОсновнойМодуль());
				
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Функция ОсновнойМодуль()
	Если ОснМодуль = Неопределено Тогда
		ОснМодуль = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища).ОбработкаОбъект;
	КонецЕсли;
	Возврат ОснМодуль;
КонецФункции

&НаКлиенте
Процедура ПредупреждениеМеркурий_Оповещение(Парам1, Парам2) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеМеркурий(ТекстПредупреждения)
	
	Если СокрЛП(ТекстПредупреждения) = "" Тогда
		Возврат;
	КонецЕсли;
	
	Кнопки = новый СписокЗначений;
	Кнопки.Добавить("Всё понятно.");
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ПредупреждениеМеркурий_Оповещение"",ЭтаФорма),ТекстПредупреждения,Кнопки,,,""Контур.Меркурий"")");
	Иначе
		Вопрос(ТекстПредупреждения, Кнопки,,,"Контур.Меркурий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбъектаМодально(ИмяФормы, ПараметрыФормы = Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено,РежимБлокирования = Неопределено)
	//отказ от модальности
	Если РежимБлокирования = Неопределено Тогда
		РежимБлокирования=	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	Если ПараметрыФормы=Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресХранилища",			Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("IDОсновнойФормы",			Параметры.IDОсновнойФормы);
	ПараметрыФормы.Вставить("КэшироватьМодульОбъекта",	Параметры.КэшироватьМодульОбъекта);
	
	Если ВладелецОбработчика = Неопределено Тогда
		ВладелецОбработчика=	ЭтаФорма;
	КонецЕсли;
	
	Если ИмяОбработчика = Неопределено Тогда
		ОписаниеОбработчика=	Неопределено;
	Иначе	
		Выполнить("ОписаниеОбработчика=	Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика)");
	КонецЕсли;
	
	Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецОбработчика, , , ,  ОписаниеОбработчика, РежимБлокирования)");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ПолноеИмяФормы, ПараметрыФормы = Неопределено , ВладелецФормы  = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь)
	
	Если ПараметрыФормы=Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	Если ВладелецФормы = Неопределено Тогда
		ВладелецФормы =	ЭтаФорма;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресХранилища",							Параметры.АдресХранилища);
	//ПараметрыФормы.Вставить("IDОсновнойФормы",							Параметры.IDОсновнойФормы);
	//ПараметрыФормы.Вставить("КэшироватьМодульОбъекта",					Параметры.КэшироватьМодульОбъекта);
	
	ПолучаемаяФорма=	ПолучитьФорму(ПолноеИмяФормы
										, ПараметрыФормы
										, ВладелецФормы
										, КлючУникальности);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы=	ВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Если ЭтаФорма.ВладелецФормы = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ЭтаФорма.ВладелецФормы.ОсновнаяФорма();
	КонецЕсли;
    	
КонецФункции

&НаСервере
Функция ОбработкаСобытияПодключаемогоМодуля(ИмяСобытия,СтандартнаяОбработкаEDI,ПараметрыПодключаемогоМодуля) Экспорт
	Возврат МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля(ИмяСобытия,СтандартнаяОбработкаEDI,ПараметрыПодключаемогоМодуля);
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеПолей()
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	Результат = МодульОбъекта().СообщениеПроверитьЗаполнениеПолей(ТаблицаОшибок, Сообщение, Элементы, НастройкаСсылокИсправленияОшибок);
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьТипЗначенияОбъекта(ИмяТипа)
	Возврат ОсновнойМодуль().ПолучитьТипЗначенияОбъекта(ИмяТипа,,Истина);
КонецФункции

&НаСервере
Функция КонвертироватьЗначение1СвМеркурий(Значение, Тип1С =  Неопределено, ТипМеркурий, Сообщение =  Неопределено)
	Возврат МодульОбъекта().КонвертироватьЗначение1СвМеркурий(Значение, Тип1С, ТипМеркурий, Сообщение)
КонецФункции

&НаСервере
Процедура ДействиеЮрФизЛицоСтороннееНажатиеНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ТаблицасоответствийЕИ = МодульОбъекта().ПолучитьСоответствияВсехЕдиницИзмеренияМеркурий();	
	//ПроизвестиПервоначальноеЗаполнениеПолейНаФорме();
	//КлючСохраненияПоложенияОкна = "ФормаСообщенияМеркурийПанельОшибок"+?(ТаблицаОшибок.Количество()=0, "Нет", "Есть");
	
	Параметры.МодальностьЗапрещена=ОсновнойМодуль().МодальностьЗапрещена();
	ПутьКФормам = ОсновнойМодуль().Метаданные().ПолноеИмя() + ".Форма.";
	ТолькоПросмотрСообщения = Параметры.ТолькоПросмотрСообщения;
	АдресВХ = Параметры.АдресХранилищаТабличныхЧастей;
	
	ТипСообщения = Параметры.ТипСообщения;   //нужны для условного оформления
	РежимРаботы = Параметры.РежимРаботы;     

	СформироватьСообщениеДляОткрытияКарточки(); //Здесь заполняем ключевой реквизит формы "Сообщение"
	
	Если ТолькоПросмотрСообщения=Истина Тогда //Архивные сообщения могли не содержать некоторых полей		
		Эталон = ОсновнойМодуль().ПолучитьСтруктуруСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
		ОсновнойМодуль().ДополнитьСтруктуруСообщенияИзЭталона(Сообщение,Эталон);
	КонецЕсли;
	
	Если НЕ МодульОбъекта().СообщениеЕстьДоступ(Сообщение) Тогда
		Сообщить("Нет прав для открытия карточки сообщения!
		|Доступ к хоз. субъектам/площадкам настраивается на закладке ""Настройки пользователей"" в пункте меню ""Настройки ГИС Меркурий""");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	//заполнение формы
	ПроизвестиПервоначальноеЗаполнениеПолейНаФорме();

	ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();	
	
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
	ДобавитьДопКолонки();
	
	ОформитьУсловнымОформлением();
	
	ПереотправкаСообщения = ложь;//!!!
	
КонецПроцедуры

//Формирование сообщения которое будет показываться в карточке
&НаСервере
Процедура СформироватьСообщениеДляОткрытияКарточки()

	Если НЕ ЗначениеЗаполнено(Параметры.СообщениеСсылка) Тогда
		Сообщение = ОсновнойМодуль().ПолучитьСтруктуруСообщения(Параметры.ТипСообщения,"Исходящее");
		МодульОбъекта().ПодготовитьТранзакциюМеркурий(Параметры.ТипСообщения,Параметры.Документ1С,Сообщение);

	ИначеЕсли Параметры.ТолькоПросмотрСообщения Тогда
		//открываем уже существующее сообщение по ссылке и это все только для просмотра
		Сообщение = ОсновнойМодуль().ПрочитатьСообщение(Параметры.СообщениеСсылка,,Параметры.ТипСообщения,Параметры.СообщениеСсылка.Направление);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ПереотправляемоеСообщениеСсылка) Тогда
		//сообщение существует, но пользователь хочет его переотправить
		Сообщение = ОсновнойМодуль().ПодготовитьИсходящееСообщение(Параметры.ТипСообщения, Параметры.Документ1С, Параметры.ПроизвольныеПараметры);//добавлены ПроизвольныеПараметры для отклонения ORDRSP
		Сообщение.Вставить("ПереотправляемоеСообщениеСсылка",Параметры.ПереотправляемоеСообщениеСсылка);
	Иначе
		//В ТабСообщения направление может не соответствовать сообщению, которое формируем,
		//поэтому будем проверять направление по совокупности факторов: тип сообщения и режим работы
		НаправлениеСообщения = ОсновнойМодуль().ПолучитьНаправлениеСообщения(Параметры.ТипСообщения, Параметры.РежимРаботы);
		Если НаправлениеСообщения = "Исходящее" Тогда 
			Сообщение = ОсновнойМодуль().ПодготовитьИсходящееСообщение(Параметры.ТипСообщения, Параметры.Документ1С,Параметры.ПроизвольныеПараметры);
		Иначе
			Сообщение = ОсновнойМодуль().ПрочитатьСообщение(Параметры.СообщениеСсылка,,Параметры.ТипСообщения,Параметры.СообщениеСсылка.Направление);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // СвормироватьСообщениеДляОткрытияКарточки()

&НаСервере
Процедура ПроизвестиПервоначальноеЗаполнениеПолейНаФорме() Экспорт
	
	//МЕРКУРИЙ
	//НастройкаФормы = МодульОбъекта().ПолучитьНастройкиФормыСообщенияМеркурий(Сообщение.ТипСообщения,Сообщение.Направление);
	
	//НастройкаСсылокИсправленияОшибок = ПолучитьНастройкуВыводаСсылокНаОбъектыМеркурий();
	//ЗаполнитьПоляНаФорме();
	//СоздатьКнопки();
	//УстановитьВидимостьЭлементов();
	//Если Истина Тогда //НастройкаФормы.ПроверятьПоляПриОткрытииФормы Тогда
	//	НетОшибок = ПроверитьЗаполнениеПолей();
	//КонецЕсли;
	//УстановитьДействияОсновныхРеквизитов();
	//УстановитьВыпадающиеМеню();
	//МЕРКУРИЙ

	
	//ОбязательныйКодТовараПокупателя = Ложь;
	//Элементы.СтраницаАлкоголь.Видимость = Ложь;
	
	КтоМы = ОсновнойМодуль().ОпределитьКемМыЯвляемся(Сообщение);
	
			//НастройкаФормы = ОсновнойМодуль().ПолучитьНастройкиФормыСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
	//НастройкаФормы = ПолучитьНастройкиФормыСообщенияМеркурий(Сообщение.ТипСообщения,Сообщение.Направление);//Меркурий
	
	//НастройкаСсылокИсправленияОшибок = ОсновнойМодуль().ПолучитьНастройкуВыводаСсылокНаОбъектыСообщения();//Меркурий
			//ЗначениеВРеквизитФормы(НастройкаСсылокИсправленияОшибокТаблицаЗначений,"НастройкаСсылокИсправленияОшибок");

	//ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();
	
	МетаданныеСообщения = ОсновнойМодуль().ПолучитьМетаданныеСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
	
	
	Если ТолькоПросмотрСообщения Тогда
		//НастройкаФормы.ТолькоПросмотрПолей1С = Истина;
		//НастройкаФормы.ТолькоПросмотрПолейEDI = Истина;
		ТолькоПросмотр = Истина;
	КонецЕсли;
		
	Если Сообщение.Направление = "Входящее" Тогда
	//	МодульОбъекта().КонвертироватьСообщениеEDIв1С(Сообщение); //сообщене следует переконвертировать т.к. с момента его загрузки могли измениться настройки соответствий и проч.
		МодульОбъекта().КонвертироватьТранзакциюМеркурий_В_1С(Сообщение);
	КонецЕсли;
	
	ОсновнойМодуль().ПриОткрытииФормыСообщения(Сообщение,ЭтаФорма);//только вызов ПМ
	
	//СоздатьКнопки(НастройкаФормы.КнопкиКоманднойПанели);
	
	////Заполним Особенности
	//ЗаполнитьОсобенностиСообщенияНаФорме();
	//
	//ЗаполнитьСпискиВыбораКолонок();
	
	//СообщениеЗаполнитьКоличествоПринято(Сообщение,Сообщение.Документ1С); - переехало в ЗаполнитьПоляНаФорме
	
	ЗаполнитьПоляНаФорме();
	СоздатьКнопки();
	УстановитьВидимостьЭлементов();
	
	//УстановитьТипыПолей1С();
	//УстановитьВидимость();
	//УстановитьДоступностьПолей();

	//НетОшибок = Истина;
	//
	Если Истина Тогда //НастройкаФормы.ПроверятьПоляПриОткрытииФормы Тогда
		
		НетОшибок = МодульОбъекта().СообщениеПроверитьЗаполнениеПолей(ТаблицаОшибок, Сообщение, Элементы, НастройкаСсылокИсправленияОшибок);
		
	КонецЕсли;
	МодульОбъекта().СообщениеУстановитьДействияОсновныхРеквизитов(Элементы, Сообщение);
	МодульОбъекта().СообщениеУстановитьВыпадающиеМеню(Элементы, Сообщение);

	//ЭтаФорма.Заголовок = НастройкаФормы.Заголовок+" ("+СокрЛП(Сообщение.ТипСообщения)+") ";
	//Если Сообщение.Свойство("ДатаСоздания")	И ЗначениеЗаполнено(Сообщение.ДатаСоздания) Тогда
	//	Если Сообщение.Направление = "Входящее" Тогда
	//		//Для входящих выводим на форму время в формате МСК(UTC+3), для этого добавим 3 часа к UTC.
	//		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + "Дата отправки (МСК): " + (Сообщение.ДатаСоздания + 60*60*3);
	//	ИначеЕсли Сообщение.Направление = "Исходящее" И Сообщение.Свойство("Архив") И Сообщение.Архив Тогда
	//		//Для исходящих выводим местное время создания сообщения
	//		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + "Дата создания: " + Сообщение.ДатаСоздания;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если Сообщение.Направление = "Входящее" Тогда
	//	Элементы.ТоварыНоменклатура.АвтоОтметкаНезаполненного = Истина;
	//КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементов()
	
	МодульОбъекта().СообщениеУстановитьВидимостьДоступностьКолонокТЧ(Элементы, Сообщение);
	
	Элементы.СтраницаСырье.Видимость = (Сообщение.ТипСообщения = "M_PRD");
	
	Если Сообщение.ТипСообщения = "M_DES" ИЛИ Сообщение.ТипСообщения = "M_MOV" ИЛИ Сообщение.ТипСообщения = "M_REC" Тогда
		//номер ТТН можно редактировать прямо в карточке
		Элементы.ДокументНомер.ТолькоПросмотр = Ложь;
		Элементы.ДокументДата.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	
	Если Сообщение.ТипСообщения = "M_DES" ИЛИ Сообщение.ТипСообщения = "M_MOV" Тогда
		
		Элементы.ГруппаОсобыеОтметки.Видимость = Ложь;
		Если Не ЗначениеЗаполнено(Сообщение.Перевозчик1С) ТОгда
			Элементы.НадписьПеревозчик.Заголовок = " Собственный";
			Элементы.ПредставлениеПеревозчик.Видимость = Ложь;
			Элементы.ДействиеПеревозчик.Видимость = Ложь;
		Иначе
			//ЭлементыФормы.Панель.Страницы.Транспорт.КартинкаЗаголовка = ЭлементыФормы.НадписьПеревозчик.Картинка;
		КонецЕсли;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_PRD" Тогда
		
		Элементы.ГруппаОсобыеОтметки.Видимость = Ложь;
		Элементы.СтраницаТранспорт.Видимость = Ложь;
		Элементы.ГруппаХозСубъектПолучатель.Видимость = Ложь;
		Элементы.ГруппаПлощадкаПолучатель.Видимость = Ложь;
		
	ИначеЕсли Сообщение.ТипСообщения = "M_INC" или Сообщение.ТипСообщения = "M_REC" Тогда
		
		Элементы.ГруппаОсобыеОтметки.Видимость = Ложь;
		ОформитьБлокПеревозчик();
		
	Иначе
		
		ОформитьБлокПеревозчик();
		
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_INC" ИЛИ Сообщение.ТипСообщения = "M_REC" Тогда
		Элементы.Обследовано.Видимость = Ложь;
		Элементы.Экспертиза.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Товары.ТолькоПросмотр = ТолькоПросмотрСообщения;
	Элементы.Сырье.ТолькоПросмотр = ТолькоПросмотрСообщения;
	Элементы.ДополнительныеРеквизиты.ТолькоПросмотр = ТолькоПросмотрСообщения;
	Элементы.Экспертиза.ТолькоПросмотр = ТолькоПросмотрСообщения;
	Элементы.Обследовано.Доступность = ТолькоПросмотрСообщения;
	Элементы.НадписьПеревозчик.Доступность = ТолькоПросмотрСообщения;
	
	Элементы.ВидТранспорта.ТолькоПросмотр = ТолькоПросмотрСообщения;
	Элементы.СпособХраненияПриПеревозке.ТолькоПросмотр = ТолькоПросмотрСообщения;
	Элементы.НомерТранспортногоСредства.ТолькоПросмотр = ТолькоПросмотрСообщения;
	Элементы.НомерПолуприцепа.ТолькоПросмотр = ТолькоПросмотрСообщения;
	Элементы.НомерКонтейнера.ТолькоПросмотр = ТолькоПросмотрСообщения;
	Элементы.НомерВагона.ТолькоПросмотр = ТолькоПросмотрСообщения;
	Элементы.НомерАвиарейса.ТолькоПросмотр = ТолькоПросмотрСообщения;
	
	Элементы.ДокументНомер.ТолькоПросмотр = ТолькоПросмотрСообщения;
	Элементы.ДокументДата.ТолькоПросмотр = ТолькоПросмотрСообщения;
	Элементы.Статус.ТолькоПросмотр = ТолькоПросмотрСообщения;
	
	Элементы.текОсобыеОтметки.ТолькоПросмотр = ТолькоПросмотрСообщения;
	
	Элементы.Сырье.КоманднаяПанель.Доступность = НЕ ТолькоПросмотрСообщения;

		
КонецПроцедуры

//																								не перенесено
Процедура УстановитьВидимостьЭлементов1()
	ИспользуютсяХарактеристики=ОсновнойМодуль().НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры;
	//Видимость элементов
	
	Если ИспользуютсяХарактеристики<>Истина Тогда
		УстановитьВидимостьКолонки("Товары","Характеристика",Ложь);
	КонецЕсли;
	
	Если Сообщение.ТипСообщения <> "M_PRD" Тогда
		//ЭлементыФормы.Панель.Страницы.Сырье.Видимость = Ложь;
		Элементы.СтраницаСырье.Видимость = Ложь;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_DES" ИЛИ Сообщение.ТипСообщения = "M_MOV" Тогда
		
		Элементы.ГруппаОсобыеОтметки.Видимость = Ложь;
		//Элементы.текОсобыеОтметки.Видимость = Ложь;
		//Элементы.НадписьОсобыеОтметки.Видимость = Ложь;
		//Элементы.ОсобыеОтметкиРедактировать.Видимость = Ложь;
		
		УстановитьВидимостьКолонки("Товары","ВетСертификатСерия",Ложь);
		УстановитьВидимостьКолонки("Товары","Статус",Ложь);
		
		Если Не ЗначениеЗаполнено(Сообщение.Перевозчик1С) ТОгда
			Элементы.НадписьПеревозчик.Заголовок = " Собственный";
			///Элементы.НадписьПеревозчик.Картинка = ЭлементыФормы.КартинкаЗеленаяМашинка.Картинка;
			//Элементы.Панель.Страницы.Транспорт.КартинкаЗаголовка = ЭлементыФормы.КартинкаЗеленаяМашинка.Картинка;
			Элементы.ПредставлениеПеревозчик.Видимость = Ложь;
			Элементы.ДействиеПеревозчик.Видимость = Ложь;
		Иначе
			//ЭлементыФормы.Панель.Страницы.Транспорт.КартинкаЗаголовка = ЭлементыФормы.НадписьПеревозчик.Картинка;
		КонецЕсли;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_PRD" Тогда
		
		Элементы.ГруппаОсобыеОтметки.Видимость = Ложь;
		//ЭлементыФормы.текОсобыеОтметки.Видимость = Ложь;
		//ЭлементыФормы.НадписьОсобыеОтметки.Видимость = Ложь;
		//ЭлементыФормы.ОсобыеОтметкиРедактировать.Видимость = Ложь;
		
		//ЭлементыФормы.Панель.Страницы.Транспорт.Видимость = Ложь;
		Элементы.СтраницаТранспорт.Видимость = Ложь;
		
		//ЭлементыФормы.ХозяйствующийСубъектПолучатель.Видимость = Ложь;
		//ЭлементыФормы.ПредставлениеХозяйствующийСубъектПолучатель.Видимость = Ложь;
		//ЭлементыФормы.ДействиеХозяйствующийСубъектПолучатель.Видимость = Ложь;
		Элементы.ГруппаХозСубъектПолучатель.Видимость = Ложь;
		
		//ЭлементыФормы.ПлощадкаПолучатель.Видимость = Ложь;
		//ЭлементыФормы.ПредставлениеПлощадкаПолучатель.Видимость = Ложь;
		//ЭлементыФормы.ДействиеПлощадкаПолучатель.Видимость = Ложь;
		Элементы.ГруппаПлощадкаПолучатель.Видимость = Ложь;
		
		УстановитьВидимостьКолонки("Товары","ПлощадкаПроизводитель",Ложь);
		УстановитьВидимостьКолонки("Товары","ПлощадкаПроизводительGUID",Ложь);
		УстановитьВидимостьКолонки("Товары","Страна",Ложь);
		УстановитьВидимостьКолонки("Товары","СтранаUUID",Ложь);
		УстановитьВидимостьКолонки("Товары","Статус",Ложь);
		УстановитьВидимостьКолонки("Товары","НекачественныйГруз",Ложь);
		УстановитьВидимостьКолонки("Товары","ВетСертификатСерия",Ложь);
		УстановитьВидимостьКолонки("Товары","ВетСертификатUUID",Ложь);
		УстановитьВидимостьКолонки("Товары","ВетСертификатНомер",Ложь);
		УстановитьВидимостьКолонки("Товары","ВетСертификатДата",Ложь);
		УстановитьВидимостьКолонки("Товары","ВетСертификатФорма",Ложь);
		УстановитьВидимостьКолонки("Товары","ВетСертификатБлагополучиеМестности",Ложь);
		УстановитьВидимостьКолонки("Товары","ВетСертификатВрачФИО",Ложь);
		УстановитьВидимостьКолонки("Товары","ВетСертификатВрачДолжность",Ложь);
		УстановитьВидимостьКолонки("Товары","ВетСертификатСпособХраненияПриПеревозке",Ложь);
		
	ИначеЕсли Сообщение.ТипСообщения = "M_INC" Тогда
		УстановитьВидимостьКолонки("Товары","Наименование",Истина);
		//ЭлементыФормы.ОсобыеОтметкиРедактировать.Видимость = Ложь;
		Элементы.ОсобыеОтметкиРедактировать.Видимость = Ложь;
		
	ИначеЕсли Сообщение.ТипСообщения = "M_REC" Тогда
		УстановитьВидимостьКолонки("Товары","Цель1С",Истина);
		УстановитьВидимостьКолонки("Товары","ВетСертификатUUID",Ложь);
		УстановитьВидимостьКолонки("Товары","Статус",Ложь);
		УстановитьВидимостьКолонки("Товары","productItemUUID",Ложь);
		УстановитьВидимостьКолонки("Товары","ХарактеристикаНоменклатуры",Ложь);
	КонецЕсли;
	
	ЭтоMINC  = Сообщение.ТипСообщения = "M_INC";
	УстановитьВидимостьКолонки("Товары","СтатусРасхождений",ЭтоMINC);
	УстановитьВидимостьКолонки("Товары","КоличествоКПодтверждению",ЭтоMINC);
	УстановитьВидимостьКолонки("Товары","КоличествоУпаковокКПодтверждению",ЭтоMINC);
	УстановитьВидимостьКолонки("Товары","ВетСертификатUUID",ЭтоMINC);
	УстановитьВидимостьКолонки("Товары","ВетСертификатНомер",ЭтоMINC);
	УстановитьВидимостьКолонки("Товары","Номенклатура",НЕ ЭтоMINC);
	
	
	
	Если Сообщение.ТипСообщения = "M_PRD" 
		ИЛИ Сообщение.ТипСообщения = "M_INC" 
		ИЛИ Сообщение.ТипСообщения = "M_REC" Тогда
		УстановитьВидимостьКолонки("Товары","ИсходнаяПартияGUID",Ложь);
		УстановитьВидимостьКолонки("Товары","ИсходнаяПартияНомер",Ложь);
	КонецЕсли;
	
	//Сведения об обследовании и экспертизе
	Если Сообщение.ТипСообщения = "M_INC" 
		ИЛИ Сообщение.ТипСообщения = "M_REC" Тогда
		Элементы.Обследовано.Видимость = Ложь;
		Элементы.Экспертиза.Видимость = Ложь;
	Иначе
		УстановитьВидимостьКолонки("Товары","ВетСертификатОбследованоВетВрачом",Ложь);
		УстановитьВидимостьКолонки("Товары","ВетСертификатЭкспертиза",Ложь);
	КонецЕсли;
	
	//для входящего бумажного ВСД откроем все колонки ВСД
	Если Сообщение.ТипСообщения = "M_REC" Тогда
		Для Каждого Колонка ИЗ Элементы Цикл 
			Если Лев(Колонка.Имя,13) = "ТоварыВетСертификат" И Колонка.Имя<>"ТоварыВетСертификатUUID" Тогда
				Колонка.Видимость = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//																								не перенесено
Процедура УстановитьВидимостьКолонки(ИмяТаблицы,НазваниеКолонки,Видимость=Истина)
	
	Попытка
		КолонкаТаблицы = Элементы.Найти(ИмяТаблицы+НазваниеКолонки);
		Если КолонкаТаблицы<>Неопределено Тогда 
			КолонкаТаблицы.Видимость = Видимость;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры
&НаСервере
Процедура СоздатьКнопки()
	
	Если ТолькоПросмотрСообщения Тогда
		Элементы.ФормаОтправить.Доступность = ложь;
		Элементы.ФормаПогасить.Доступность = Ложь;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_INC" Тогда
		Элементы.ФормаОтправить.Видимость = ложь;
	Иначе
		Элементы.ФормаПогасить.Видимость = Ложь;
	Конецесли;
	
	Если Сообщение.ТипСообщения <> "M_INC" Тогда
		
		Элементы.ФормаПринятоПолностью.Видимость = Ложь;
		Элементы.ФормаОтклоненоПолностью.Видимость = Ложь;
		
		Элементы.ФормаСоздатьДокумент.Видимость = Ложь;

		Элементы.ФормаПривязатьДокумент.Видимость = Ложь;
		Элементы.ФормаПоказатьРасхождения.Видимость = Ложь;
	Конецесли;
	
	Если Сообщение.Свойство("СтатусСсылки")=Ложь 
		ИЛИ (Сообщение.СтатусСсылки<>"Выполнен" И Сообщение.СтатусСсылки<>"АннулированЧастично") 
		ИЛИ (Сообщение.ТипСообщения <> "M_DES"
		И Сообщение.ТипСообщения <> "M_PRD"
		И Сообщение.ТипСообщения <> "M_MOV")
		Тогда
		Элементы.ФормаАннулироватьВсеВСД.Видимость = Ложь;
		Элементы.ФормаАннулироватьВСДПоСтроке.Видимость = Ложь;
	Конецесли;
	
	Если НЕ Сообщение.Статус = "Аннулирован" И НЕ Сообщение.Статус = "АннулированЧастично" Тогда
		Элементы.ФормаПеревыпуститьВСДПоАннулированнымСтрокам.Видимость = Ложь;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения <> "M_REC" Тогда
		Элементы.ФормаСохранитьЧерновик.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьПанельОшибок()
	
	Элементы.ПанельОшибок.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьПанельОшибок()
	
	Элементы.ПанельОшибок.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция СообщениеЗаполнитьКоличествоПринято(СсылкаНаДокумент)
	Результат = МодульОбъекта().СообщениеЗаполнитьКоличествоПринято(Сообщение,СсылкаНаДокумент);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляНаФорме()
	
	//для автосопоставившихся с документом
	Если Сообщение.ТипСообщения = "M_INC" И ЗначениеЗаполнено(Сообщение.Документ1С) И ЗначениеЗаполнено(Сообщение.СообщениеСсылка) И Сообщение.СообщениеСсылка.ТребуемоеДействие = "Погасить входящие ВСД"  Тогда 
		СообщениеЗаполнитьКоличествоПринято(Сообщение.Документ1С);
	КонецЕсли;
	
	МодульОбъекта().СообщениеЗаполнитьПоляНаФорме(Сообщение, ЭтаФорма, Элементы);
	
КонецПроцедуры


&НаСервере
Процедура УничтожитьТаблицыЗначенийПроизвольныхРеквизитов()
	
	НастройкаСсылокИсправленияОшибок = Неопределено;//  
	//НастройкаФормы.КнопкиКоманднойПанели=неопределено;//
	//НастройкаФормы.ОбязательныеПоля=неопределено;//
	Если ТипЗнч(Сообщение) = Тип("Структура") И Сообщение.Свойство("Маршрут") Тогда
		Сообщение.Маршрут = неопределено;
	КонецЕсли;
	Если ТипЗнч(Сообщение) = Тип("Структура") И Сообщение.Свойство("Товары") Тогда
		Сообщение.Товары = неопределено;
	КонецЕсли;
	Если ТипЗнч(Сообщение) = Тип("Структура") И Сообщение.Свойство("Сырье") Тогда
		Сообщение.Сырье = неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище()
	Отказ=истина;
	//сохраним только значащие реквизиты
	СтруктураВременногоХранилища = новый Структура;
	//Если НастройкаФормы.КнопкиКоманднойПанели<>Неопределено Тогда 
	//	СтруктураВременногоХранилища.Вставить("НастройкаФормыКнопкиКоманднойПанели",НастройкаФормы.КнопкиКоманднойПанели);
	//	Отказ = Ложь;
	//КонецЕсли;
	//
	//Если НастройкаФормы.ОбязательныеПоля<>Неопределено Тогда 
	//	СтруктураВременногоХранилища.Вставить("НастройкаФормыОбязательныеПоля",НастройкаФормы.ОбязательныеПоля);
	//	Отказ = Ложь;
	//КонецЕсли;
	//
	Если Сообщение.Свойство("Товары") и Сообщение.Товары<>Неопределено Тогда 
		СтруктураВременногоХранилища.Вставить("СообщениеТовары",Сообщение.Товары);
		Отказ = Ложь;
	КонецЕсли;
	
	Если Сообщение.Свойство("Маршрут") и Сообщение.Маршрут<>Неопределено Тогда 
		СтруктураВременногоХранилища.Вставить("СообщениеМаршрут",Сообщение.Маршрут);
		Отказ = Ложь;
	КонецЕсли;
	
	Если Сообщение.Свойство("Сырье") и Сообщение.Сырье<>Неопределено Тогда 
		СтруктураВременногоХранилища.Вставить("СообщениеСырье",Сообщение.Сырье);
		Отказ = Ложь;
	КонецЕсли;
	
	Если НастройкаСсылокИсправленияОшибок<>Неопределено Тогда 
		СтруктураВременногоХранилища.Вставить("НастройкаСсылокИсправленияОшибок",НастройкаСсылокИсправленияОшибок);
		Отказ = Ложь;
	КонецЕсли;
	
	Если не Отказ Тогда 
		АдресВХ=ПоместитьВоВременноеХранилище(СтруктураВременногоХранилища,ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища()
	
	//извлечем из ВХ если не инициализированы реквизиты и при этом там хоть что-то есть
	
	Если 	(НастройкаСсылокИсправленияОшибок = Неопределено
		ИЛИ НастройкаФормы.ОбязательныеПоля = Неопределено
		ИЛИ НастройкаФормы.КнопкиКоманднойПанели = Неопределено
		ИЛИ Сообщение.Товары = Неопределено
		ИЛИ Сообщение.Сырье = Неопределено) и АдресВХ<>""
		//ИЛИ Сообщение.Свойство("ТранспортныеУпаковки") И Сообщение.ТранспортныеУпаковки = Неопределено  
		//ИЛИ Сообщение.Свойство("ТочкиСамовывоза") И Сообщение.ТочкиСамовывоза = Неопределено 
		Тогда 
		
		СтруктураВременногоХранилища=ПолучитьИзВременногоХранилища(АдресВХ);
		Если СтруктураВременногоХранилища=Неопределено Тогда 
			ВызватьИсключение "Сервер потерял временное хранилище (откройте форму заново)";
		КонецЕсли;
		
		Если Сообщение.Свойство("Товары") и Сообщение.Товары = Неопределено Тогда 
			Сообщение.Товары						= СтруктураВременногоХранилища.СообщениеТовары;
		КонецЕсли;
		
		Если Сообщение.Свойство("Маршрут") и Сообщение.Маршрут = Неопределено Тогда 
			Сообщение.Маршрут						= СтруктураВременногоХранилища.СообщениеМаршрут;
		КонецЕсли;
		
		Если Сообщение.Свойство("Сырье") и Сообщение.Сырье = Неопределено Тогда 
			Сообщение.Сырье						= СтруктураВременногоХранилища.СообщениеСырье;
		КонецЕсли;
		
		//НастройкаСсылокИсправленияОшибок		= СтруктураВременногоХранилища.НастройкаСсылокИсправленияОшибок;
		//НастройкаФормы.КнопкиКоманднойПанели	= СтруктураВременногоХранилища.НастройкаФормыКнопкиКоманднойПанели;
		//НастройкаФормы.ОбязательныеПоля			= СтруктураВременногоХранилища.НастройкаФормыОбязательныеПоля;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизвестиПервоначальноеЗаполнениеПолейНаФорме1111()
	
	
	
	//НастройкаСсылокИсправленияОшибок = ПолучитьНастройкуВыводаСсылокНаОбъектыМеркурий();
	//
	//ЗаполнитьПоляНаФорме();
	//СоздатьКнопки();
	//УстановитьВидимостьЭлементов();
	//
	//Если Истина Тогда //НастройкаФормы.ПроверятьПоляПриОткрытииФормы Тогда
	//	
	//	НетОшибок = ПроверитьЗаполнениеПолей();
	//	
	//КонецЕсли;
	//
	//УстановитьДействияОсновныхРеквизитов();
	//УстановитьВыпадающиеМеню();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиФормыСообщенияМеркурий(ТипСообщения,Направление,СтатусСообщения = Неопределено) Экспорт
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("ОбязательныеПоля",				МодульОбъекта().ПолучитьОбязательныеПоляТранзакцииМеркурийДляКарточкиСообщения(ТипСообщения,Направление));
	
	//
	//РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьНастройкиФормыСообщения",,
	//		Новый Структура("ТипСообщения,Направление,СтруктураНастроек",
	//		ТипСообщения,Направление,СтруктураНастроек));
	//		
	//  Если РезультатПМ <> Неопределено Тогда
	//	СтруктураНастроек = РезультатПМ.СтруктураНастроек;
	//КонецЕсли;

	Возврат СтруктураНастроек;	
	
КонецФункции


&НаСервере
Функция ПутьКФормам()
	Возврат МодульОбъекта().Метаданные().ПолноеИмя() + ".Форма.";
КонецФункции

&НаСервере
Функция ОтправитьНаСервере()
	
	ОбработатьРучноеИзменениеТранзакции();
	
	Если Истина Тогда //СвойстваКнопки.ПроверятьПоля Тогда
		Если НЕ ПроверитьЗаполнениеПолей() Тогда
			
			ОткрытьПанельОшибок();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ОтправитьСообщениеИзФормы",	ложь);
	СтруктураПараметров.Вставить("Сообщение",					Сообщение);
	СтруктураПараметров.Вставить("ПереотправкаСообщения",	Параметры.ПереотправкаСообщения);
	СтруктураПараметров.Вставить("СообщениеСсылка",	Сообщение.СообщениеСсылка);
	СтруктураПараметров.Вставить("ИмяМетода",			МодульОбъекта().ПолучитьИмяМетодаМеркурийПоТипуСообщения(Сообщение.ТипСообщения));
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	МодульОбъекта().ОтправитьТранзакциюМеркурий(Сообщение,СтруктураПараметров);
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура Отправить(Команда)
	Если ОтправитьНаСервере() Тогда
		Этаформа.Закрыть();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбработчикХС_Площадка(Парам1 = Неопределено, Парам2 = Неопределено) Экспорт
	ДействиеХозяйствующийСубъектНажатиеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСопоставленияХСПлощадки(Объект1С,GUID,ТипОбъекта="Хозяйствующий субъект",ХСВладелец=Неопределено,ХСВладелецGUID=Неопределено)
	
	ПараметрыФормы = Новый Структура("МодальностьЗапрещена,АдресХранилища,КэшироватьМодульОбъекта,Объект1С,GUID,ТипОбъекта,ХСВладелец,ХСВладелецGUID",
									Параметры.МодальностьЗапрещена,Параметры.АдресХранилища,Параметры.КэшироватьМодульОбъекта,Объект1С,GUID,ТипОбъекта,ХСВладелец,ХСВладелецGUID);
		
	ИмяФормыПлощадки = ПутьКФормам()+"Меркурий_ХС_ПлощадкаУправляемая";
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ОткрытьФорму(ИмяФормыПлощадки,ПараметрыФормы,ЭтаФорма,,,,Новый ОписаниеОповещения(""ОбработчикХС_Площадка"", ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
	Иначе
		ОткрытьФормуМодально(ИмяФормыПлощадки,ПараметрыФормы,ЭтаФорма);
		ОбработчикХС_Площадка();
	КонецЕсли;
	//переопределить элементы
	//пересобрать шапку сообщения
	
КонецПроцедуры

&НаСервере
Процедура ДействиеХозяйствующийСубъектНажатиеНаСервере()
	
	//переконвертировать шапку в зависимости от направления
	
	Если Сообщение.Направление = "Исходящее" Тогда
		МодульОбъекта().КонвертироватьШапкуТранзакцииМеркурий(Сообщение);
	Иначе
		МодульОбъекта().КонвертироватьШапкуТранзакцииМеркурийв1С(Сообщение);
	КонецЕсли;
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	тзТаблицаОшибок=РеквизитФормыВЗначение("ТаблицаОшибок");
	
	МодульОбъекта().СообщениеЗаполнитьПоляНаФорме(Сообщение, ЭтаФорма, Элементы);
	МодульОбъекта().СообщениеПроверитьЗаполнениеПолей(тзТаблицаОшибок, Сообщение, Элементы, НастройкаСсылокИсправленияОшибок);
	МодульОбъекта().СообщениеУстановитьДействияОсновныхРеквизитов(Элементы, Сообщение);
	
	ЗначениеВРеквизитФормы(тзТаблицаОшибок, "ТаблицаОшибок");
	
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеХозяйствующийСубъектНажатие(Элемент)
	
	ХСВладелецGUID = Неопределено;
	ХСВладелец = Неопределено;
	ИмяСущности_ = СтрЗаменить(Элемент.Имя,"Действие","");
	
	GUID ="";
	Выполнить("GUID = Сообщение."+ИмяСущности_+"EDI.GUID");
	Объект1С ="";
	Выполнить("Объект1С = Сообщение."+ИмяСущности_+"1С");
	
	ИмяСущности = СтрЗаменить(ИмяСущности_,"Получатель","");
	Если ИмяСущности = "ХозяйствующийСубъект" или ИмяСущности = "Перевозчик" Тогда 
		ИмяСущностиПредставление = "Хозяйствующий субъект";
	Иначе
		ИмяСущностиПредставление = ИмяСущности;
	КонецЕсли;
	
	Если ИмяСущности = "Площадка" Тогда
		ИмяВладельца = СтрЗаменить(ИмяСущности_,"Площадка","ХозяйствующийСубъект");
		Выполнить("ХСВладелец = Сообщение."+ИмяВладельца+"1С");
		Выполнить("ХСВладелецGUID = Сообщение."+ИмяВладельца+"EDI.GUID");
	КонецЕсли;
	
	ОткрытьФормуСопоставленияХСПлощадки(Объект1С,GUID,ИмяСущностиПредставление,ХСВладелец,ХСВладелецGUID);
	
КонецПроцедуры


//Перенесено с ОФ
&НаСервере
Процедура ПронумероватьТаблицу(ИмяТаблицы)
	
	НомерСтроки = 1; 
	Таблица = Неопределено;
	
	Для Каждого Строка Из Вычислить(ИмяТаблицы) Цикл
		
		Строка.НомерСтроки = НомерСтроки; 
		НомерСтроки = НомерСтроки + 1; 
		
	КонецЦикла;
	
КонецПроцедуры

//Перенесено с ОФ
&НаСервере        
Процедура ОбработатьРучноеИзменениеШапки()
	//процедура обратная  ЗаполнитьПоляНаФорме()
	
	Сообщение.ДокументEDI.Номер = ДокументНомер;
	Сообщение.ДокументEDI.Дата = ДокументДата;
	Сообщение.Транспорт.ВидТранспорта = ВидТранспорта;
	Сообщение.Транспорт.НомерТранспортногоСредства = НомерТранспортногоСредства;
	Сообщение.Транспорт.НомерПолуприцепа = НомерПолуприцепа;
	Сообщение.Транспорт.НомерКонтейнера = НомерКонтейнера;
	Сообщение.Транспорт.СпособХраненияПриПеревозке = СпособХраненияПриПеревозке;
	Сообщение.Транспорт.НомерВагона = НомерВагона;
	Сообщение.Транспорт.НомерАвиарейса = НомерАвиарейса;
	
	//Доп реквизиты   - обратная от ВывестиДопРеквизитыКарточкиСообщенияМеркурий
	МодульОбъекта().ПрисвоитьДопРеквизитыВСообщение(Сообщение,ДополнительныеРеквизиты);
	
	ПроверитьЗаполнениеПолей();
	
КонецПроцедуры

//Перенесено с ОФ
&НаСервере
Процедура ОбработатьРучноеИзменениеТабЧасти()
	//руками мы могли только изменить таб часть исходных партий
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	
	ТипСообщения = Сообщение.ТипСообщения;
	
	Если ТипСообщения = "M_PRD" ТОгда
		ПронумероватьТаблицу("Сырье");
		//тч Сырье
		Сообщение.Сырье.Очистить();
		Для Каждого СтрокаСырья Из Сырье Цикл
			НоваяСтрокаСообщения = Сообщение.Сырье.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСообщения,СтрокаСырья);
		КонецЦикла;
		
		КоличествоСырьяВсего			= Сырье.Итог("Количество");
		КоличествоУпаковокСырьяВсего 	= Сырье.Итог("КоличествоУпаковок");
		
	КонецЕсли;
		
	//Если ТипСообщения = "M_MOV" 
	//	ИЛИ ТипСообщения = "M_DES" 
	//	ИЛИ ТипСообщения = "M_PRD" ТОгда
		//ПронумероватьТаблицу("Товары");
		//тч Товары
		Сообщение.Товары.Очистить();
		
		Для Каждого СтрокаТоваров Из Товары Цикл
			НоваяСтрокаСообщения = Сообщение.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСообщения,СтрокаТоваров);
		КонецЦикла;
		
		ПронумероватьТаблицу("Товары");
		
		КоличествоВсего			= Товары.Итог("Количество");
		КоличествоУпаковокВсего = Товары.Итог("КоличествоУпаковок");
		
		////надо сконвертировать таб часть в EDI   //не знаю зачем это было написано
		//КонвертироватьТабличнуюЧастьМеркурий(Сообщение);
		
	//КонецЕсли;
	
	
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
КонецПроцедуры

&НаСервере 
Процедура КонвертироватьТранзакциюМеркурий()
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	//следует переконвертировать сообщение т.к. мы руками могли изменить что-либо
	МодульОбъекта().КонвертироватьТранзакциюМеркурий(Сообщение);
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();

КонецПроцедуры

&НаСервере
Процедура ОбработатьРучноеИзменениеТранзакции()
	
	ОбработатьРучноеИзменениеШапки();
	ОбработатьРучноеИзменениеТабЧасти();
	КонвертироватьТранзакциюМеркурий();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СырьеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СырьеПередУдалением(Элемент, Отказ)
	//Отказ = Истина;
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстовыйДокументФайлаЗапросаНаСервере()
	
	СообщениеСсылка = Сообщение.СообщениеСсылка;
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();;
	
	//ОбработатьРучноеИзменениеТранзакции();
	
	локПараметры = Новый Структура();
	локПараметры.Вставить("ОтправитьСообщениеИзФормы",	ложь);
	локПараметры.Вставить("Сообщение",					Сообщение);
	локПараметры.Вставить("ПереотправкаСообщения",	Параметры.ПереотправкаСообщения);
	локПараметры.Вставить("СообщениеСсылка",	СообщениеСсылка);
	локПараметры.Вставить("ИмяМетода",			МодульОбъекта().ПолучитьИмяМетодаМеркурийПоТипуСообщения(Сообщение.ТипСообщения));
	
	ПараметрыПодключения = МодульОбъекта().ВыбратьПараметрыПодключенияДляТранзакции(Сообщение.ТипСообщения,локПараметры);
	
	МодульОбъекта().КонвертироватьТабличнуюЧастьМеркурий(Сообщение);
	//-------------------------------------Запись сообщения -------------------------------------
	Если ПараметрыПодключения.Свойство("ВерсияAPI") И ПараметрыПодключения.ВерсияAPI = "20" Тогда 
		ПараметрыТранзакции = МодульОбъекта().ЗаписатьСообщениеМеркурийXDTO_20(Сообщение.ТипСообщения,локПараметры);
	Иначе
		ПараметрыТранзакции = МодульОбъекта().ЗаписатьСообщениеМеркурийXDTO(Сообщение.ТипСообщения,локПараметры);
	КонецЕсли;
	
	
	ПараметрыТранзакции.Вставить("localTransactionId", ?(ЗначениеЗаполнено(СообщениеСсылка),СообщениеСсылка.Код,"не присвоен"));
	ПараметрыТранзакции.Вставить("ИмяМетода", локПараметры.ИмяМетода);
	
	ТекстЗапроса = МодульОбъекта().ПодготовитьТелоЗапросаМеркурий(МодульОбъекта().КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключения, ПараметрыТранзакции.ИмяМетода);	
	
	
	ИмяФайла = СокрЛП(Сообщение.ТипСообщения)+"_"+СокрЛП(ПараметрыТранзакции.localTransactionId)+"_REQUEST.xml";
	ПутьКФайлу = КаталогВременныхФайлов()+ИмяФайла;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ТекстЗапроса);
	ТД.Записать(ПутьКФайлу,"UTF-8");
	
	//ЗапуститьПриложение(ПутьКФайлу);
	
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
	Возврат ТД;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьФайлЗапроса(Команда)
	ТД = ПолучитьТекстовыйДокументФайлаЗапросаНаСервере();
	ТД.Показать("Файл запроса Меркурий");
КонецПроцедуры

//Пусто
&НаСервере
Процедура ПоказатьФайлОтветаНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

//Пусто
&НаКлиенте
Процедура ПоказатьФайлОтвета(Команда)
	ПоказатьФайлОтветаНаСервере();
КонецПроцедуры

&НаСервере
Функция ПогаситьВСДНаСервере()
	
	ОбработатьРучноеИзменениеШапки();
	ОбработатьРучноеИзменениеТабЧасти();
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	Если Не МодульОбъекта().СообщениеПогаситьВСД(Сообщение, Элементы, ТаблицаОшибок, Параметры.ПереотправкаСообщения) Тогда
		ОткрытьПанельОшибок();
		УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	Иначе
		ЗакрытьПанельОшибок();
		УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикВопросаПогаситьВСД(Ответ, Парам2 = Неопределено) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ПогаситьВСДНаСервере() Тогда
			ЭтаФорма.Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьВСД(Команда)
	
	Если Сообщение.ТипСообщения = "M_INC" Тогда
		Если Не ЗначениеЗаполнено(Сообщение.ДокументСсылка) и Товары.Итог("КоличествоКПодтверждению")>0 Тогда
			ТекстВопроса = "Вы уверены, что хотите погасить ВСД без документа 1С?";
		
			Если Параметры.МодальностьЗапрещена Тогда
				Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикВопросаПогаситьВСД"", ЭтаФорма), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,,""Контур.Меркурий"")");
			Иначе
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,"Контур.EDI");
				ОбработчикВопросаПогаситьВСД(Ответ);
			КонецЕсли;
		Иначе
			ОбработчикВопросаПогаситьВСД(КодВозвратаДиалога.Да);
		КонецЕсли;
	Иначе
		ОбработчикВопросаПогаситьВСД(КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

//***************ТОВАРЫ.ПАРТИЯ***************
&НаСервере
Процедура КорректироватьКоличествоВТаблицеОстатковМеркурийНаСервере(ИмяТаблицы, ИдентификаторТекСтрокиИсходнойПродукции, ТаблицаОстатковАдресВоВременномХранилище)
	ТекСтрокаИсходнойПродукции = Неопределено;
	Выполнить("ТекСтрокаИсходнойПродукции = "+ИмяТаблицы+".НайтиПоИдентификатору(ИдентификаторТекСтрокиИсходнойПродукции)");
	ТекущаяВыбраннаяПартияGUID = ТекСтрокаИсходнойПродукции.ИсходнаяПартияGUID;
	ТаблицаОстатковМеркурий = ПолучитьИзВременногоХранилища(ТаблицаОстатковАдресВоВременномХранилище);
	Если ЗначениеЗаполнено(ТекущаяВыбраннаяПартияGUID) и ТаблицаОстатковМеркурий<>Неопределено Тогда
		НайденнаяСтрокаМеркурийДляСнятияКоличестваСОтражения = ТаблицаОстатковМеркурий.Найти(ТекущаяВыбраннаяПартияGUID,"GUID_Партии");
		Если НайденнаяСтрокаМеркурийДляСнятияКоличестваСОтражения <> Неопределено Тогда
			НайденнаяСтрокаМеркурийДляСнятияКоличестваСОтражения.КоличествоИспользовано = НайденнаяСтрокаМеркурийДляСнятияКоличестваСОтражения.КоличествоИспользовано - ТекСтрокаИсходнойПродукции.Количество;
			Если НайденнаяСтрокаМеркурийДляСнятияКоличестваСОтражения.КоличествоИспользовано < 0 Тогда
				НайденнаяСтрокаМеркурийДляСнятияКоличестваСОтражения.КоличествоИспользовано = 0;
			КонецЕсли;
		КонецЕсли;
		ПоместитьВоВременноеХранилище(ТаблицаОстатковМеркурий, ТаблицаОстатковАдресВоВременномХранилище);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВопросаПотребностиПоПартии(Ответ, ПараметрыОбработчика) Экспорт
	
	
	ТекСтрокаИсходнойПродукции   = ПараметрыОбработчика.ТекСтрокаИсходнойПродукции;
	ИмяТаблицы 				     = ПараметрыОбработчика.ИмяТаблицы;
	ВыбраннаяПартия 		     = ПараметрыОбработчика.ВыбраннаяПартия;
	КоличествоПеренестиВДокумент = ПараметрыОбработчика.КоличествоПеренестиВДокумент;
	
	Если Ответ = "КопироватьСтроку" Тогда
		
		СюдаБросимОстаток = Неопределено;	
		Выполнить("СюдаБросимОстаток = "+ИмяТаблицы+".Добавить()");	
		ЗаполнитьЗначенияСвойств(СюдаБросимОстаток, ТекСтрокаИсходнойПродукции);

		СюдаБросимОстаток.Количество = ?(КоличествоПеренестиВДокумент > ТекСтрокаИсходнойПродукции.Количество, 
			КоличествоПеренестиВДокумент - ТекСтрокаИсходнойПродукции.Количество, 
			ТекСтрокаИсходнойПродукции.Количество - КоличествоПеренестиВДокумент);
			
		// TODO: посчитать что-то не представляется возможным
		СюдаБросимОстаток.ИсходнаяПартияGUID 	= "";
		СюдаБросимОстаток.ИсходнаяПартияНомер 	= "";
				
		ТекСтрокаИсходнойПродукции.Количество = ?(КоличествоПеренестиВДокумент > ТекСтрокаИсходнойПродукции.Количество, 
			ТекСтрокаИсходнойПродукции.Количество, КоличествоПеренестиВДокумент);

		ЗаполнитьИдентификаторыВыбраннойПартииНаСервере(ТекСтрокаИсходнойПродукции.ПолучитьИдентификатор(), ПараметрыОбработчика.ИмяТаблицы, 
			ВыбраннаяПартия, ПараметрыОбработчика.ТаблицаОстатковАдресВоВременномХранилище);

		Если КоличествоПеренестиВДокумент > ТекСтрокаИсходнойПродукции.Количество Тогда
			ЗаполнитьИдентификаторыВыбраннойПартииНаСервере(СюдаБросимОстаток.ПолучитьИдентификатор(), ПараметрыОбработчика.ИмяТаблицы, 
				ВыбраннаяПартия, ПараметрыОбработчика.ТаблицаОстатковАдресВоВременномХранилище);	
		КонецЕсли;			

		ПронумероватьТаблицу(ИмяТаблицы);
				
	ИначеЕсли Ответ = "Игнорировать" Тогда
		
		ТекСтрокаИсходнойПродукции.Количество = КоличествоПеренестиВДокумент;
		
		ЗаполнитьИдентификаторыВыбраннойПартииНаСервере(ТекСтрокаИсходнойПродукции.ПолучитьИдентификатор(), ПараметрыОбработчика.ИмяТаблицы,
			ВыбраннаяПартия, ПараметрыОбработчика.ТаблицаОстатковАдресВоВременномХранилище);
		
	КонецЕсли;	
	
	ОбработатьРучноеИзменениеТабЧасти();
	ПроверитьЗаполнениеПолей();
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТаблицыОстатковПоПартии(ИмяТаблицы, GUID_Партии)
	
	ТаблицаФормы = Неопределено;
	Выполнить("ТаблицаФормы = "+ИмяТаблицы);
	ТаблицаОстатков = МодульОбъекта().СообщениеАктуальнаяТаблицаОстатковНаТекМоментВремени(Сообщение.ПлощадкаEDI.GUID, ТаблицаФормы,Сообщение.ХозяйствующийСубъектEDI.GUID);
	
	СтруктураВозврата = Новый Структура;
	НайденнаяСтрока = ТаблицаОстатков.Найти(GUID_Партии,"GUID_Партии");
	
	//конвертнем в структуру для клиента
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Для каждого Колонка Из ТаблицаОстатков.Колонки Цикл
  		СтруктураВозврата.Вставить(Колонка.Имя, НайденнаяСтрока[Колонка.Имя]);
	КонецЦикла;
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикВыборПартии(ВыбраннаяПартия, ПараметрыОбработчика) Экспорт
	
 	Если ВыбраннаяПартия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаИсходнойПродукции = ПараметрыОбработчика.ТекСтрокаИсходнойПродукции;
	ИмяТаблицы = ПараметрыОбработчика.ИмяТаблицы;
	
	КоличествоПеренестиВДокумент = ТекСтрокаИсходнойПродукции.Количество;
	
	Если ТипЗнч(ВыбраннаяПартия) = Тип("Структура") 
		И ВыбраннаяПартия.Свойство("КоличествоПеренестиВДокумент") Тогда	
		Если ТекСтрокаИсходнойПродукции.Количество <> ВыбраннаяПартия.КоличествоПеренестиВДокумент Тогда
			КоличествоПеренестиВДокумент = ВыбраннаяПартия.КоличествоПеренестиВДокумент;	
		КонецЕсли;		
	КонецЕсли;
	
	Если ТекСтрокаИсходнойПродукции.Количество = 0 Тогда
		ТекСтрокаИсходнойПродукции.Количество = КоличествоПеренестиВДокумент;	
	КонецЕсли;
				
	Если КоличествоПеренестиВДокумент <> ТекСтрокаИсходнойПродукции.Количество Тогда
		
		ВариантыОтветов = Новый СписокЗначений;
		ВариантыОтветов.Добавить("КопироватьСтроку", "Продолжить, остаток в новую строку");
		ВариантыОтветов.Добавить("Игнорировать"	   , "Продолжить, остаток не переносить");
		ВариантыОтветов.Добавить("Отмена"		   , "Отмена");
		
		ТекстВопроса = "";
		Если КоличествоПеренестиВДокумент > ТекСтрокаИсходнойПродукции.Количество Тогда
			ТекстВопроса = "Выбраная партия превышает потребность. Что будем делать?";
		Иначе
			ТекстВопроса = "Выбранной партии недостаточно для полного покрытия потребности. Что будем делать?";	
		КонецЕсли;

		ПараметрыОбработчика.Вставить("ВыбраннаяПартия", ВыбраннаяПартия);
		ПараметрыОбработчика.Вставить("КоличествоПеренестиВДокумент", КоличествоПеренестиВДокумент);

		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикВопросаПотребностиПоПартии"", ЭтаФорма, ПараметрыОбработчика), ТекстВопроса, ВариантыОтветов,,,""Контур.Меркурий"")");
		Иначе
			Ответ = Вопрос(ТекстВопроса, ВариантыОтветов,,,"Контур.EDI");
			ОбработчикВопросаПотребностиПоПартии(Ответ, ПараметрыОбработчика);
		КонецЕсли;

	Иначе
		ЗаполнитьИдентификаторыВыбраннойПартииНаСервере(ТекСтрокаИсходнойПродукции.ПолучитьИдентификатор(), ИмяТаблицы, 
			ВыбраннаяПартия, ПараметрыОбработчика.ТаблицаОстатковАдресВоВременномХранилище);
	КонецЕсли;

КонецПроцедуры

//!!! Таблица остатков меркурий не кэшируется
&НаКлиенте
Процедура ПодобратьСтрокуСкладскогоЖурнала(ИмяТаблицы = "Товары")	
	
	Если НЕ ЗначениеЗаполнено(Сообщение.ПлощадкаEDI.GUID) Тогда
		ПредупреждениеМеркурий("Для выбора исходной партии необходимо знать GUID соответствия своей Площадки!"+Символы.ПС+"Проставьте соответствие Площадки и повторите попытку.");
		Возврат;
	КонецЕсли;
	
	ТекСтрокаИсходнойПродукции = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	/////////////////////////////////////////
	// ВыборПартии	
	Меркурий_ВыборПартии = ПолучитьФормуОбработки(Параметры.ПутьКФормамМеркурий + "Меркурий_ВыборПартииУправляемая", Новый Структура("НеОткрыватьФорму"));
		
	ЭлеменКоллекцииИсходнойПродукии = Меркурий_ВыборПартии.ЭлеменКоллекцииИсходнойПродукииНаКлиенте();	
	ЗаполнитьЗначенияСвойств(ЭлеменКоллекцииИсходнойПродукии, ТекСтрокаИсходнойПродукции);
	
	ТаблицаОстатковАдресВоВременномХранилище = СообщениеАктуальнаяТаблицаОстатковНаТекМоментВремениНаСервере(ИмяТаблицы);
	
	КорректироватьКоличествоВТаблицеОстатковМеркурийНаСервере(ИмяТаблицы, 
		ТекСтрокаИсходнойПродукции.ПолучитьИдентификатор(),
		ТаблицаОстатковАдресВоВременномХранилище);
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("АдресХранилища"			, Параметры.АдресХранилища);
	ПараметрыВыбора.Вставить("ПутьКФормамМеркурий"		, Параметры.ПутьКФормамМеркурий);
	ПараметрыВыбора.Вставить("МодальностьЗапрещена"		, Параметры.МодальностьЗапрещена);
	ПараметрыВыбора.Вставить("ХозяйствующийСубъектEDI"	, Сообщение.ХозяйствующийСубъектEDI);
	ПараметрыВыбора.Вставить("ТаблицаОстатковАдресВоВременномХранилище", ТаблицаОстатковАдресВоВременномХранилище);
	ПараметрыВыбора.Вставить("ЭлеменКоллекцииИсходнойПродукии", ЭлеменКоллекцииИсходнойПродукии);	
	
	// Информационный характер
	
	ПараметрыВыбора.Вставить("Площадка1С");
	ПараметрыВыбора.Вставить("ПлощадкаEDI");
	ПараметрыВыбора.Вставить("ХозяйствующийСубъект1С");
	ПараметрыВыбора.Вставить("ТипСообщения");
	ПараметрыВыбора.Вставить("ДокументНомер", Сообщение.ДокументEDI.Номер);
	ПараметрыВыбора.Вставить("ДокументДата"	, Сообщение.ДокументEDI.Дата);	
	
	ЗаполнитьЗначенияСвойств(ПараметрыВыбора, Сообщение, "Площадка1С, ПлощадкаEDI, ХозяйствующийСубъект1С, ТипСообщения");		
	// Конец ВыборПартии	
	
	ПараметрыОбработчика = Новый Структура("ИмяТаблицы, ТекСтрокаИсходнойПродукции, ТаблицаОстатковАдресВоВременномХранилище", 
		ИмяТаблицы, ТекСтрокаИсходнойПродукции, ТаблицаОстатковАдресВоВременномХранилище);	
	
	Если Параметры.МодальностьЗапрещена Тогда 
		ОткрытьФормуОбъектаМодально(Параметры.ПутьКФормамМеркурий+"Меркурий_ВыборПартииУправляемая", ПараметрыВыбора, "ОбработчикВыборПартии", ПараметрыОбработчика);
	Иначе
		ВыбраннаяСтрока = ПолучитьФормуОбработки(Параметры.ПутьКФормамМеркурий+"Меркурий_ВыборПартииУправляемая", ПараметрыВыбора).ОткрытьМодально();
		ОбработчикВыборПартии(ВыбраннаяСтрока, ПараметрыОбработчика);
	КонецЕсли;

КонецПроцедуры

//***************ТОВАРЫ.ПРОИЗВОДИТЕЛЬ***************
&НаКлиенте
Процедура ОбработчикВыбратьПроизводителяКонтрагента(текПлощадка1С, ВыбраннаяСтрока) Экспорт
	
	Если Не текПлощадка1С = Неопределено Тогда
		ВыбраннаяСтрока.ПлощадкаПроизводительGUID = "";
		ВыбраннаяСтрока.ПлощадкаПроизводитель = текПлощадка1С;
		ВыбраннаяСтрока.ПлощадкаПроизводительGUID = КонвертироватьЗначение1СвМеркурий(текПлощадка1С,,"МеркурийПлощадка");
		Если ЗначениеЗаполнено(ВыбраннаяСтрока.ПлощадкаПроизводительGUID) Тогда
			ОбработатьРучноеИзменениеТабЧасти();
			ПроверитьЗаполнениеПолей();
		Иначе
			ПредупреждениеМеркурий("Похоже что по этой площадке еще не установлено соответствие. Сначала установите соответствие а затем вернитесь к оформлению документа.");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбратьПроизводителя(Ответ, ВыбраннаяСтрока) Экспорт
	
	Если Ответ = "Своя" Тогда
		ТипКонтрагента = ПолучитьТипЗначенияОбъекта("МеркурийПлощадкаСвоя");
	ИначеЕсли Ответ = "Сторонняя" Тогда
		ТипКонтрагента = ПолучитьТипЗначенияОбъекта("МеркурийПлощадкаСторонняя");
	КонецЕсли;
	
	Если Ответ <> "Отмена" Тогда
		
		ИмяФормыСправочника = "Справочник."+ТипКонтрагента+".ФормаВыбора";
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ОткрытьФорму(ИмяФормыСправочника,,,,,,Новый ОписаниеОповещения(""ОбработчикВыбратьПроизводителяКонтрагента"", ЭтаФорма, ВыбраннаяСтрока),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
		Иначе
			//ФормаВыбораПлощадки = Справочники[ТипКонтрагента].ПолучитьФормуВыбора();
			текПлощадка1С = ОткрытьФормуМодально(ИмяФормыСправочника);//ФормаВыбораПлощадки.ОткрытьМодально();
			ОбработчикВыбратьПроизводителяКонтрагента(текПлощадка1С, ВыбраннаяСтрока);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроизводителя(ВыбраннаяСтрока)
	
	СтандартнаяОбработка = Ложь;
	
	ВариантыОтветов = Новый СписокЗначений;
	ВариантыОтветов.Добавить("Своя");
	ВариантыОтветов.Добавить("Сторонняя");
	ВариантыОтветов.Добавить("Отмена");
	
	ТекстВопроса = "Своя или сторонняя площадка?";
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикВыбратьПроизводителя"",ЭтаФорма,ВыбраннаяСтрока),ТекстВопроса,ВариантыОтветов,,,""Контур.Меркурий"")");
	Иначе
		Ответ = Вопрос(ТекстВопроса, ВариантыОтветов,,,"Контур.Меркурий");
		ОбработчикВыбратьПроизводителя(Ответ, ВыбраннаяСтрока);
	КонецЕсли;
		
КонецПроцедуры

//***************ТОВАРЫ.СТРАНА***************
&НаСервере
Функция ПолучитьUUIDСтраны(ВыбраннаяСтрана);
	
	КлассификаторМеркурий = МодульОбъекта().ПолучитьКлассификаторСтранМеркурий();
	мСтрок = КлассификаторМеркурий.НайтиСтроки(Новый Структура("Код", ВыбраннаяСтрана.КодАльфа2));
	Если мСтрок.Количество() > 0 Тогда
		Возврат мСтрок.Получить(0).UUID;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ОбработчикВыборСтраны(ВыбраннаяСтрана, ВыбраннаяСтрока) Экспорт
	
	Если Не ВыбраннаяСтрана = Неопределено Тогда
		
		СтранаUUID = ПолучитьUUIDСтраны(ВыбраннаяСтрана);
		Если СтранаUUID <> "" Тогда
			ВыбраннаяСтрока.Страна = ВыбраннаяСтрана;
			ВыбраннаяСтрока.СтранаUUID = ПолучитьUUIDСтраны(ВыбраннаяСтрана);
			ОбработатьРучноеИзменениеТабЧасти();
			ПроверитьЗаполнениеПолей();
		Иначе
			ПредупреждениеМеркурий("Не могу конвертировать страну. Возможно в ней не указан КодАльфа2");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтрану(ВыбраннаяСтрока)
	
	ТипСтранМира = ПолучитьТипЗначенияОбъекта("МеркурийСтраныМира");
	ИмяФормыСтран = "Справочник."+ТипСтранМира+".ФормаВыбора";
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);

	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ОткрытьФорму(ИмяФормыСтран,СтруктураПараметров,ЭтаФорма,,,,Новый ОписаниеОповещения(""ОбработчикВыборСтраны"", ЭтаФорма, Элементы.Товары.ТекущиеДанные), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
	Иначе
		текСтрана1С = ПолучитьФорму(ИмяФормыСтран,СтруктураПараметров,ЭтаФорма).ОткрытьМодально();
		ОбработчикВыборСтраны(текСтрана1С, Элементы.Товары.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

//***************ТОВАРЫ.ЕДИНИЦА***************
&НаСервере
Функция ПолучитьСписокЕдиницИзмеренияМеркурий()
	ТабЕдиниц = МодульОбъекта().ПолучитьКлассификаторЕдиницИзмеренияМеркурий();
	СпЕдиниц = Новый СписокЗначений;	
	Для Каждого стр из ТабЕдиниц Цикл
		СпЕдиниц.Добавить(Новый Структура("Наименование,GUID,UUID",стр.Наименование,стр.GUID,стр.UUID), ""+стр.Наименование+" ("+стр.GUID+")");
	КонецЦикла;
	Возврат СпЕдиниц;
КонецФункции

&НаСервере
Процедура ОбработчикВыбораЕдиницыНаСервере(СтруктураПолей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДопСпр.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники КАК ДопСпр
	|ГДЕ
	|	ДопСпр.ИмяСправочника = ""Меркурий_КлассификаторЕдиницИзмерения""
	|	И ДопСпр.Наименование = &Наименование
	|	И НЕ ДопСпр.ПометкаУдаления";
	Запрос.УстановитьПараметр("Наименование", СтруктураПолей.Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СсылкаНаДопСпр = Выборка.Ссылка;
	Иначе
		НовыйЭлемент = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
		НовыйЭлемент.Наименование = СтруктураПолей.Наименование;
		НовыйЭлемент.ИмяСправочника = "Меркурий_КлассификаторЕдиницИзмерения";
		НовыйЭлемент.Записать();
		СсылкаНаДопСпр = НовыйЭлемент.Ссылка;
	КонецЕсли;
	ОсновнойМодуль().УстановитьЗначениеСвойстваОбъекта(СсылкаНаДопСпр,"Меркурий_ЕИ_GUID",СтруктураПолей.GUID);
	ОсновнойМодуль().УстановитьЗначениеСвойстваОбъекта(СсылкаНаДопСпр,"Меркурий_ЕИ_UUID",СтруктураПолей.UUID);
	ОсновнойМодуль().УстановитьЗначениеСвойстваОбъекта(СсылкаНаДопСпр,"Меркурий_ЕИ_Наименование",СтруктураПолей.Наименование);
	ОсновнойМодуль().УстановитьЗначениеСвойстваОбъекта(СсылкаНаДопСпр,"Меркурий_ЕИ_Соответствие",СтруктураПолей.ЕдиницаИзмерения);
	мСтрок = Товары.НайтиСтроки(Новый Структура("ЕдиницаИзмерения", СтруктураПолей.ЕдиницаИзмерения));
	Для Сч = 0 по мСтрок.ВГраница() Цикл
		мСтрок.Получить(Сч).unitUUID = СтруктураПолей.UUID;
	КонецЦикла;
	УстановитьТекст("ТоварыunitUUID", "Товары.unitUUID", СтруктураПолей.UUID, СтруктураПолей.Наименование); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораЕдиницы(ВыбранноеЗначение, ПустойПараметр = Неопределено) Экспорт
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		СтруктураПолей = ВыбранноеЗначение.Значение;
		СтруктураПолей.Вставить("ЕдиницаИзмерения", Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения);
		ОбработчикВыбораЕдиницыНаСервере(СтруктураПолей);
	КонецЕсли;
КонецПроцедуры

//***************ТОВАРЫ.НОМЕНКЛАТУРА***************
&НаСервере
Процедура СделатьНеподнадзорнымНаСервере(Номенклатура)
	
	МодульОбъекта().ПрисвоитьСоответствиеНоменклатуры(Номенклатура,МодульОбъекта().НулевойGUID,"Не является поднадзорным",МодульОбъекта().ПартнерМеркурий());
	мСтрок = Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Для Сч = 0 по мСтрок.ВГраница() Цикл
		Товары.Удалить(мСтрок.Получить(Сч));
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработчикВыбораНоменклатуры(ВыбранноеЗначение, Номенклатура) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		мСтрок = Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
		МодульОбъекта().ПрисвоитьСоответствиеНоменклатуры(Номенклатура,ВыбранноеЗначение.GUID,ВыбранноеЗначение.Наименование,МодульОбъекта().ПартнерМеркурий());
		Для Сч = 0 по мСтрок.ВГраница() Цикл
			мСтрок.Получить(Сч).GUID = ВыбранноеЗначение.GUID;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикМенюНоменклатуры(ВыбранноеЗначение, текНоменклатура) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Значение = "Не является поднадзорным" Тогда
		
		СделатьНеподнадзорнымНаСервере(текНоменклатура);
		
	ИначеЕсли ВыбранноеЗначение.Значение = "Настроить соответствие товаров" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресХранилища", Параметры.АдресХранилища);
	    		
		Если Параметры.МодальностьЗапрещена Тогда 
			ОткрытьФормуОбъектаМодально(Параметры.ПутьКФормамМеркурий+"Меркурий_НоменклатураВыборУправляемая", ПараметрыФормы, "ОбработчикВыбораНоменклатуры", текНоменклатура);
		Иначе
			ВыбраннаяСтрока = ПолучитьФормуОбработки(Параметры.ПутьКФормамМеркурий+"Меркурий_НоменклатураВыборУправляемая",ПараметрыФормы).ОткрытьМодально();
			ОбработчикВыбораНоменклатуры(ВыбраннаяСтрока, текНоменклатура);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

//***************ТОВАРЫ.Печать***************

&НаСервере
Процедура ВывестиНаПечатьВСД(ВетСертификатUUID)
	
	ПрефиксТестовогоСервера = ?(ОсновнойМодуль().ПолучитьКонстантуEDI("М_ИспользуетсяТестовыйAPI")=Истина,"t2-","");
	
	//timestamp = Формат((ТекущаяУниверсальнаяДата()-'19700101'),"ЧГ=");      
	URL = "https://"+ПрефиксТестовогоСервера+"mercury.vetrf.ru/pub/operatorui?_action=printVetDocumentByUuid&uuid="+ВетСертификатUUID;//+"&timestamp="+timestamp;
	ЗапуститьПриложение(URL);
	
КонецПроцедуры
	
//***************ТОВАРЫ.выбор***************
//!!!
&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Параметры.ТолькоПросмотрСообщения И Элемент.ТекущийЭлемент.Имя<>"Печать"Тогда
		СтандартнаяОбработка = Ложь;	
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыИсходнаяПартияНомер" Тогда
		Если Сообщение.ТипСообщения = "M_DES" ИЛИ Сообщение.ТипСообщения = "M_MOV" Тогда
			СтандартнаяОбработка = Ложь;	
			
			ПодобратьСтрокуСкладскогоЖурнала("Товары");
			//ОбработатьРучноеИзменениеТабЧасти();
			//ПроверитьЗаполнениеПолей();
			
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя ="ТоварыПечать" Тогда
		Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.ВетСертификатUUID) Тогда
			СтандартнаяОбработка = Ложь;
			ВывестиНаПечатьВСД(Элементы.Товары.ТекущиеДанные.ВетСертификатUUID);
		Конецесли;
		
	//ИначеЕсли Элемент.ТекущаяКолонка.Имя = "productItemUUID" Тогда
	//	
	//	СтандартнаяОбработка = Ложь;
	//	ПросмотретьproductItem(ВыбраннаяСтрока.productItemUUID);
	
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыСтатусРасхождений" Тогда 
		//отдельным событием обработка нажатие	
		текСтрока = Элементы.Товары.ТекущиеДанные;
	
		СтандартнаяОбработка = Ложь;
		Если текСтрока.КоличествоКПодтверждению >0 Тогда
			Если текСтрока.КоличествоКПодтверждению < текСтрока.Количество Тогда
				текСтрока.СтатусРасхождений = ?(текСтрока.СтатусРасхождений="УточненАкт","УточненВСД","УточненАкт");
			КонецЕсли;
		Иначе
			текСтрока.СтатусРасхождений = "Отклонен";
		КонецЕсли;
		ОбработатьРучноеИзменениеТабЧасти();
		ПроверитьЗаполнениеПолей();
	
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыПлощадкаПроизводитель" ИЛИ Элемент.ТекущийЭлемент.Имя = "ТоварыПлощадкаПроизводительGUID" Тогда
		
		ВыбратьПроизводителя(Элементы.Товары.ТекущиеДанные);		

		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыСтрана" или Элемент.ТекущийЭлемент.Имя = "ТоварыСтранаUUID" Тогда
		
		ВыбратьСтрану(Элементы.Товары.ТекущиеДанные);
		
	//ИначеЕсли Элемент.ТекущаяКолонка.Имя = "Цель1С" ИЛИ Элемент.ТекущаяКолонка.Имя = "ЦельEDI" Тогда
	//	
	//	СтандартнаяОбработка = Ложь;
	//	ВыбраннаяЦель = ПолучитьКлассификаторЦелейМеркурий().ВыбратьСтроку();
	//	Если ВыбраннаяЦель<>Неопределено Тогда;
	//		ВыбраннаяСтрока.Цель1С=ВыбраннаяЦель.Наименование;
	//		ВыбраннаяСтрока.ЦельEDI=ВыбраннаяЦель.GUID;
	//	КонецЕсли;
	//	ОбработатьРучноеИзменениеТабЧасти();
	//	ПроверитьЗаполнениеПолей();
	//	
	//ИначеЕсли Элемент.ТекущаяКолонка.Имя = "ВетСертификатБлагополучиеМестности" Тогда
	//	
	//	СтандартнаяОбработка = Ложь;
	//	ВыбраннаяЦель = ПолучитьТиповыеВариантыБлагополучияМестности().ВыбратьСтроку();
	//	Если ВыбраннаяЦель<>Неопределено Тогда;
	//		ВыбраннаяСтрока.ВетСертификатБлагополучиеМестности=ВыбраннаяЦель.БлагополучиеМестности;
	//	КонецЕсли;
	//	ОбработатьРучноеИзменениеТабЧасти();
	//	ПроверитьЗаполнениеПолей();

	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыunitUUID" И Элемент.ТекущиеДанные.unitUUID = "" Тогда
	   	СпЕдиниц = ПолучитьСписокЕдиницИзмеренияМеркурий();
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("СпЕдиниц.ПоказатьВыборЭлемента(Новый ОписаниеОповещения(""ОбработчикВыбораЕдиницы"",ЭтаФорма), ""Выберите единицу"")");
		Иначе
			ВыбЭлемент = СпЕдиниц.ВыбратьЭлемент("Выберите единицу");
			ОбработчикВыбораЕдиницы(ВыбЭлемент);
		КонецЕсли;
		
	ИначеЕсли (Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" ИЛИ НРег(Элемент.ТекущийЭлемент.Имя) = "guid") и 
		ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) Тогда
		
		СтандартнаяОбработка = Ложь;	
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("Настроить соответствие товаров");//,,,ОсновнойМодуль.ПолучитьКартинкуEDI("ЭлементФормы","КартинкаПодписатьИОтправить"));
		СписокВыбора.Добавить("Не является поднадзорным");//,,,ОсновнойМодуль.ПолучитьКартинкуEDI("ЭлементФормы","КартинкаСтатусОтклонен"));
		
		текНоменклатура = Элементы.Товары.ТекущиеДанные.Номенклатура;
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВыборИзМеню(Новый ОписаниеОповещения(""ОбработчикМенюНоменклатуры"", ЭтаФорма, текНоменклатура), СписокВыбора)");
		Иначе
			ВыбранноеЗначение = ВыбратьИзМеню(СписокВыбора,Элемент);
			ОбработчикМенюНоменклатуры(ВыбранноеЗначение, текНоменклатура);
		КонецЕсли;
	
    КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ЛюбаяТабЧастьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработатьРучноеИзменениеТабЧасти();
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

//***************ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ.выбор***************
&НаСервере
Функция ПолучитьСписокЦелейМеркурий()
	СпЦелей = Новый СписокЗначений;
	СпЦелей.ЗагрузитьЗначения(МодульОбъекта().ПолучитьКлассификаторЦелейМеркурий().ВыгрузитьКолонку("Наименование"));
	Возврат СпЦелей;
КонецФункции

&НаКлиенте
Процедура ОбработчикДопРеквизитыВыборЦели(ВыбранноеЗначение, ПустойПараметр = Неопределено) Экспорт
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Элементы.ДополнительныеРеквизиты.ТекущиеДанные.Значение=ВыбранноеЗначение.Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикДопРеквизитыРазрешениеНаВывозДата(ВыбраннаяДата, ПустойПараметр = Неопределено) Экспорт
	
	Если ВыбраннаяДата<>Неопределено Тогда;
		Элементы.ДополнительныеРеквизиты.ТекущиеДанные.Значение=ВыбраннаяДата;
		Возврат;
	КонецЕсли;

КонецПроцедуры

//!!! на сервер ОсновнойМодуль.ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьТоварнуюГруппуТаблицыТоваров",,Новый Структура("Сообщение,Товары",Сообщение,Товары));//попробуем так.
&НаКлиенте
Процедура ДополнительныеРеквизитыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока=Элементы.ДополнительныеРеквизиты.ТекущиеДанные;
	
	//!!! на сервер ОсновнойМодуль.ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьТоварнуюГруппуТаблицыТоваров",,Новый Структура("Сообщение,Товары",Сообщение,Товары));//попробуем так.
	
	Если ТекСтрока.Реквизит = "Цель1С" Тогда
		СтандартнаяОбработка = Ложь;
		СпЦелей = ПолучитьСписокЦелейМеркурий();
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("СпЦелей.ПоказатьВыборЭлемента(Новый ОписаниеОповещения(""ОбработчикДопРеквизитыВыборЦели"",ЭтаФорма), ""Выберите цель"")");
		Иначе
			ВыбЭлемент = СпЦелей.ВыбратьЭлемент("Выберите цель");
			ОбработчикДопРеквизитыВыборЦели(ВыбЭлемент);
		КонецЕсли;
		
	ИначеЕсли ТекСтрока.Реквизит = "РазрешениеНаВывозДата" Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяДата = Дата(1,1,1);
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВводДаты(Новый ОписаниеОповещения(""ОбработчикДопРеквизитыРазрешениеНаВывозДата"",ЭтаФорма), ВыбраннаяДата, ""Выберите дату"", ЧастиДаты.Дата)");
		Иначе
			ВыбраннаяДата = ВвестиДату(ВыбраннаяДата,"Укажите дату разрешения", ЧастиДаты.Дата);
			ОбработчикДопРеквизитыРазрешениеНаВывозДата(ВыбраннаяДата);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ТоварыИсходнаяПартияGUIDОчисткаНаСервере(ТекСтрока)
	
	//Надо снять текущую разноску если она была
	Если ЗначениеЗаполнено(ТекСтрока.ИсходнаяПартияGUID) и МодульОбъекта().ТаблицаОстатковМеркурий<>Неопределено Тогда
		НайденнаяСтрокаМеркурийДляСнятияКоличестваСОтражения = МодульОбъекта().ТаблицаОстатковМеркурий.Найти(ТекСтрока.ИсходнаяПартияGUID,"GUID_Партии");
		Если НайденнаяСтрокаМеркурийДляСнятияКоличестваСОтражения <> Неопределено Тогда
			НайденнаяСтрокаМеркурийДляСнятияКоличестваСОтражения.КоличествоИспользовано = НайденнаяСтрокаМеркурийДляСнятияКоличестваСОтражения.КоличествоИспользовано - ТекСтрока.Количество;
			Если НайденнаяСтрокаМеркурийДляСнятияКоличестваСОтражения.КоличествоИспользовано < 0 Тогда
				НайденнаяСтрокаМеркурийДляСнятияКоличестваСОтражения.КоличествоИспользовано = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьРучноеИзменениеТабЧасти();
	ПроверитьЗаполнениеПолей();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИсходнаяПартияGUIDОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока=Неопределено;
	
	Если Сообщение.ТипСообщения = "M_DES"
		ИЛИ Сообщение.ТипСообщенияТипСообщения = "M_MOV" Тогда
		ТекСтрока=Элементы.Товары.ТекущиеДанные;
	ИначеЕсли Сообщение.ТипСообщения = "M_PRD" Тогда
		ТекСтрока=Элементы.Сырье.ТекущиеДанные;
	КонецЕсли;

	Если ТекСтрока<>Неопределено Тогда
		ТекСтрока.ИсходнаяПартияGUID = "";
		ТекСтрока.ИсходнаяПартияНомер = "";
	
		СтруктураПараметров = Новый Структура("ИсходнаяПартияGUID,ИсходнаяПартияНомер,Количество");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекСтрока);
		ТоварыИсходнаяПартияGUIDОчисткаНаСервере(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

//!!!
&НаКлиенте
Процедура ДополнительныеРеквизитыПриИзменении(Элемент)
	//ПрисвоитьДопРеквизитыВСообщение(Сообщение,ДополнительныеРеквизиты);
	ПроверитьЗаполнениеПолей();
КонецПроцедуры

&НаКлиенте
Процедура НомерТранспортногоСредстваПриИзменении(Элемент)
	ОбработатьРучноеИзменениеШапки();
КонецПроцедуры

&НаКлиенте
Процедура ОбследованоПриИзменении(Элемент)
	Сообщение.ВетСертификатОбследованоВетВрачом = Обследовано;
	ПроверитьЗаполнениеПолей();
КонецПроцедуры

&НаКлиенте
Процедура ЭкспертизаПриИзменении(Элемент)
	Сообщение.ВетСертификатЭкспертиза = Экспертиза;
	ПроверитьЗаполнениеПолей();
КонецПроцедуры

&НаКлиенте
Процедура ВидТранспортаПриИзменении(Элемент)
	
	Если Сообщение.Свойство("Транспорт") и Сообщение.Транспорт.Свойство("ВидТранспорта") Тогда
		Сообщение.Транспорт.ВидТранспорта = ВидТранспорта;
	КонецЕсли;
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

&НаКлиенте
Процедура СпособХраненияПриПеревозкеПриИзменении(Элемент)
	Если Сообщение.Свойство("СпособХраненияПриПеревозке") Тогда
		Сообщение.СпособХраненияПриПеревозке = СпособХраненияПриПеревозке.Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаОшибок.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		СделатьАктивнымПоле(ТекущаяСтрока.ИмяПоля,ТекущаяСтрока.ИмяТабличнойЧасти,ТекущаяСтрока.НомерСтроки);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СделатьАктивнымПоле(ИмяПоля,ИмяТабличнойЧасти,НомерСтроки)
	
	Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		
		ТабличнаяЧасть = Элементы[ИмяТабличнойЧасти];
		
		ЭтаФорма.ТекущийЭлемент = ТабличнаяЧасть;
		
		Если НЕ НомерСтроки = 0 Тогда
			
			//проверим колонку на наличие и возможность активизации
			ТекущаяКолонкаТЧ = Элементы.Найти(ИмяТабличнойЧасти+ИмяПоля);
			Если ТекущаяКолонкаТЧ<>Неопределено и ТекущаяКолонкаТЧ.Видимость и ТекущаяКолонкаТЧ.Доступность Тогда
				ТабличнаяЧасть.ТекущийЭлемент = ТекущаяКолонкаТЧ;
			КонецЕсли;
			
			Выполнить("ТабличнаяЧасть.ТекущаяСтрока	= "+ИмяТабличнойЧасти+"[НомерСтроки-1].ПолучитьИдентификатор()");
			
		КонецЕсли;
		
	Иначе	
		
		Если ЗначениеЗаполнено(ИмяПоля) Тогда
			
			НайденноеПоле = Элементы.Найти(ИмяПоля);
			Если НЕ НайденноеПоле = Неопределено Тогда
				ЭтаФорма.ТекущийЭлемент = НайденноеПоле;
			КонецЕсли;
			
			Если Найти(ИмяПоля,"ВетСертификатЭкспертиза") > 0 Тогда
					
				//ВыбраннаяЭкспертиза = ВыбратьИзСписка(ЭлементыФормы.Экспертиза.СписокВыбора,ЭлементыФормы.Экспертиза);
				//Если ВыбраннаяЭкспертиза<>Неопределено Тогда 
				//	Экспертиза = ВыбраннаяЭкспертиза.Значение;
				//	ЭкспертизаПриИзменении(ЭлементыФормы.Экспертиза);
				//КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПривязатьДокументКСообщению(Сообщение,СсылкаДокумента)
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	
	МодульОбъекта().МеркурийСвязатьСообщениеСДокументом(Сообщение,СсылкаДокумента);
	СообщениеЗаполнитьКоличествоПринято(СсылкаДокумента);
	ЗаполнитьПоляНаФорме();
	
	Сообщение.ДокументСсылка	= СсылкаДокумента;
	Сообщение.Документ1С		= СсылкаДокумента;
	
	ЗаписатьСообщение();
	
	ЗаполнитьПоляНаФорме();
	ПроверитьЗаполнениеПолей();
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
КонецПроцедуры

&НаСервере
Функция ОбработчикВыбораДокументаПоступленияНаСервере(СсылкаДокумента) Экспорт
	
	ТекстОшибки = "";
	Если ЗначениеЗаполнено(СсылкаДокумента) Тогда
		
		СообщениеДокумента = ОсновнойМодуль().НайтиСообщениеДокумента(СсылкаДокумента,Сообщение.ТипСообщения);
		Если НЕ СообщениеДокумента = Неопределено и СообщениеДокумента <> Сообщение.СообщениеСсылка Тогда
			Возврат "К данному документу уже привязано другое сообщение "+Сообщение.ТипСообщения;
		КонецЕсли;
		
		ПривязатьДокументКСообщению(Сообщение,СсылкаДокумента);
		Элементы.ФормаСоздатьДокумент.Видимость = Ложь;
		
	КонецЕсли;
	
	Возврат ТекстОшибки;

КонецФункции

&НаКлиенте
Процедура ОбработчикВыбораДокументаПоступления(СсылкаДокумента, НеиспользуемыйПараметр = Неопределено) Экспорт
	
	ТекстПредупреждения = ОбработчикВыбораДокументаПоступленияНаСервере(СсылкаДокумента);
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПредупреждениеМеркурий(ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

//не используется
&НаСервере
Функция ПолучитьНастройкуОтбора(ИмяЭлементаОтбора, ПравоеЗначение)
	НастройкаОтбора = Новый Структура;
	НастройкаОтбора.Вставить("ЛевоеЗначение", Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора));
	НастройкаОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
	НастройкаОтбора.Вставить("ПравоеЗначение", ПравоеЗначение);
	НастройкаОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	Возврат НастройкаОтбора;
КонецФункции

//!!! сделать отбор!!!
&НаКлиенте
Процедура ПривязатьДокумент(Команда)
	
	ИмяДокумента = ПолучитьТипЗначенияОбъекта("МеркурийДокументПоступление");
	ИмяФормыДокумента = "Документ."+ИмяДокумента+".ФормаВыбора";
	
	//ПараметрыОтбора = Новый Структура;
	//ПараметрыОтбора.Вставить("Организация", ПолучитьНастройкуОтбора("Организация", Сообщение.Организация));
	//ПараметрыОтбора.Вставить("Поставщик", ПолучитьНастройкуОтбора("Поставщик", Сообщение.ХозяйствующийСубъект1С));

	ФН = Новый НастройкиКомпоновкиДанных;
	Эл = ФН.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Поставщик");
	Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Эл.ПравоеЗначение = Сообщение.ХозяйствующийСубъект1С;
	Эл.Использование = Истина;
	//Эл.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	

	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	//СтруктураПараметров.Вставить("ПараметрыОтбора",   ПараметрыОтбора);
	//СтруктураПараметров.Вставить("ФиксированныеНастройки", ФН);
	//СтруктураПараметров.Вставить("Отбор",   Новый Структура("Поставщик", Сообщение.ХозяйствующийСубъект1С));

	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ОткрытьФорму(ИмяФормыДокумента,СтруктураПараметров,ЭтаФорма,,,,Новый ОписаниеОповещения(""ОбработчикВыбораДокументаПоступления"", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
	Иначе
		СсылкаДокумента = ПолучитьФорму(ИмяФормыДокумента,СтруктураПараметров,ЭтаФорма).ОткрытьМодально();
		ОбработчикВыбораДокументаПоступления(СсылкаДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьСтатусРасхожденийПоИДСтроки(ИдентификаторСтроки)
	МодульОбъекта().ОпределитьСтатусРасхожденийПоСтроке(Товары.НайтиПоИдентификатору(ИдентификаторСтроки));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоКПодтверждениюПриИзменении(Элемент)
	ОпределитьСтатусРасхожденийПоИДСтроки(Элементы.Товары.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокКПодтверждениюПриИзменении(Элемент)
	ОпределитьСтатусРасхожденийПоИДСтроки(Элементы.Товары.ТекущаяСтрока)
КонецПроцедуры


Процедура ПринятоПолностьюНаСервере()
	
	Для Каждого Строкатоваров Из Товары Цикл
		Строкатоваров.КоличествоКПодтверждению = Строкатоваров.Количество;
		Строкатоваров.КоличествоУпаковокКПодтверждению = Строкатоваров.КоличествоУпаковок;
		МодульОбъекта().ОпределитьСтатусРасхожденийПоСтроке(Строкатоваров);
	КонецЦикла;
	
	ОбработатьРучноеИзменениеТабЧасти();
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

&НаКлиенте
Процедура ПринятоПолностью(Команда)
	
	ПринятоПолностьюНаСервере();

КонецПроцедуры

&НаСервере
Функция ПоказатьРасхожденияПоВходящемуВСДВТабличныйДокумент()
	Возврат МодульОбъекта().СообщениеПоказатьРасхожденияВТабличныйДокумент(Сообщение.ДокументСсылка, ДанныеФормыВЗначение(Товары, Тип("ТаблицаЗначений")));
КонецФункции

&НаКлиенте
Процедура ПоказатьРасхожденияПоВходящемуВСД(Команда)
	ТабДок = ПоказатьРасхожденияПоВходящемуВСДВТабличныйДокумент();
	ТабДок.Показать("Расхождения по подтверждению ВСД");
КонецПроцедуры

&НаСервере
Функция ПечатьПеречняВСДПолучитьТабличныйДокумент()
	
	//префикс не определяем в функции ПолучитьТабличныйДокументПеречняВСД, т.к. еще вызывается из внешних ПФ
	ПрефиксТестовогоСервера = ?(ОсновнойМодуль().ПолучитьКонстантуEDI("М_ИспользуетсяТестовыйAPI")=Истина,"t2-","");
	
	Возврат МодульОбъекта().ПолучитьТабличныйДокументПеречняВСД(Документ1С, ПрефиксТестовогоСервера);

КонецФункции

&НаКлиенте
Процедура ПечатьПеречняВСД(Команда)
	ТабДокумент = ПечатьПеречняВСДПолучитьТабличныйДокумент();
	Если ТабДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТабДокумент.Показать("Перечень ВСД");
КонецПроцедуры

&НаСервере
Функция ОбработчикВводаПричиныАннулированияНаСервере(Причина, ИмяКоманды) Экспорт
	
	Если ИмяКоманды = "АннулироватьВСДПоСтроке" и Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат "Выделите строку с ВСД, который хотите аннулировать."
	КонецЕсли;
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();//При аннулировании идет сохранение Сообщения, поэтому восстановим
	Если ИмяКоманды = "АннулироватьВсеВСД" Тогда
		ТекстОшибки = МодульОбъекта().СообщениеАннулироватьВсеВСД(Сообщение, Причина);//, ДанныеФормыВЗначение(Товары, Тип("ТаблицаЗначений"))
	ИначеЕсли ИмяКоманды = "АннулироватьВСДПоСтроке" Тогда
		ТекстОшибки = МодульОбъекта().СообщениеАннулироватьВСДПоСтроке(Сообщение, Товары.НайтиПоИдентификатору(Элементы.Товары.ВыделенныеСтроки[0]), Причина);
	КонецЕсли;
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	Возврат ТекстОшибки;
КонецФункции

//!!!ВернутьКнопкуПеревыпускаВСД();
&НаКлиенте
Процедура ОбработчикВводаПричиныАннулирования(Причина, СтруктураПараметров) Экспорт
	Если Причина = Неопределено Тогда
		возврат;
	КонецЕсли;
	ТекстОшибки = ОбработчикВводаПричиныАннулированияНаСервере(?(Причина = "", СтруктураПараметров.ПричинаПоУмолчанию, Причина), СтруктураПараметров.ИмяКоманды);
	Если ТекстОшибки<>"" Тогда
		ПредупреждениеМеркурий(ТекстОшибки);
	КонецЕсли;
	ОбработатьРучноеИзменениеТабЧасти();
	//ВернутьКнопкуПеревыпускаВСД();
КонецПроцедуры


&НаКлиенте
Процедура АннулироватьВСД(Команда)
	//Причина = ЗапроситьУПользователяПричинуАннулирования();
	ПричинаПоУмолчанию = "Исправление ошибки, допущенной при оформлении";
	ВведеннаяСтрока = ПричинаПоУмолчанию; 
	Подсказка = "Меркурий всегда хочет видеть причину аннулирования...";
	
	СтруктураПараметров = Новый Структура("ПричинаПоУмолчанию, ИмяКоманды",ПричинаПоУмолчанию, Команда.Имя);
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВводСтроки(Новый ОписаниеОповещения(""ОбработчикВводаПричиныАннулирования"", ЭтаФорма, СтруктураПараметров), ВведеннаяСтрока, Подсказка)");
	Иначе
		Если ВвестиСтроку(ВведеннаяСтрока,Подсказка) Тогда
			ОбработчикВводаПричиныАннулирования(ВведеннаяСтрока, СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьКопиюСообщения()
	
	СтруктураВозврата = Новый Структура;
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	СообщениеНовое = ОсновнойМодуль().ПолучитьКопиюСообщения(Сообщение);
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
	ТоварыНовогоСообщения = СообщениеНовое.Товары;
	Строк = ТоварыНовогоСообщения.Количество();
	Если Строк = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	//оставим только те строки где написано Аннулирован
	Для й=1 по Строк Цикл
		Если ТоварыНовогоСообщения[Строк-й].Аннулирован <> Истина Тогда 
			ТоварыНовогоСообщения.Удалить(Строк-й);
		Иначе
			ТоварыНовогоСообщения[Строк-й].Аннулирован = Ложь;
			ТоварыНовогоСообщения[Строк-й].ВетСертификатUUID = "";//чистим ВСД
		КонецЕсли;
	КонецЦикла;
	
	УИДНовогоСообщения = Новый УникальныйИдентификатор;
	СтруктураВХНовогоСообщения = Новый Структура;
	СтруктураВХНовогоСообщения.Вставить("СообщениеТовары",СообщениеНовое.Товары);
	АдресВХНовогоСообщения=ПоместитьВоВременноеХранилище(СтруктураВХНовогоСообщения,УИДНовогоСообщения);
	СообщениеНовое.Товары = Неопределено;

	СтруктураВозврата.Вставить("СообщениеНовое", СообщениеНовое);
	СтруктураВозврата.Вставить("АдресВХНовогоСообщения", АдресВХНовогоСообщения);
	СтруктураВозврата.Вставить("СообщениеСсылка", Справочники.КонтурEDI_Сообщения.ПустаяСсылка());
	
	Возврат СтруктураВозврата;

КонецФункции

&НаСервере
Функция СкопироватьСтруктуру(ИсходнаяСтруктура)
	ИсходнаяСтруктура = ДанныеФормыВЗначение(ИсходнаяСтруктура, Тип("Структура"));
	НоваяСтруктура = Новый Структура;
	Для Каждого Св из ИсходнаяСтруктура Цикл
		НоваяСтруктура.Вставить(Св.Ключ, Св.Значение);
	КонецЦикла;
	Возврат НоваяСтруктура;
КонецФункции

&НаКлиенте
Функция ВернутьКопию(Значение)
	Возврат Значение;
КонецФункции

&НаКлиенте
Процедура ОбработчикПеревыпуститьВСД(Парам1 = Неопределено, Парам2 = Неопределено) Экспорт
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПеревыпуститьВСДПоАннулированнымСтрокам(Команда)
	
	СтруктураВозврата = ПолучитьКопиюСообщения();
	Если СтруктураВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("Сообщение", СтруктураВозврата.СообщениеНовое);
	ПараметрыФормы.Вставить("ПереотправкаСообщения", Ложь);
	ПараметрыФормы.Вставить("СообщениеСсылка", СтруктураВозврата.СообщениеСсылка);
	ПараметрыФормы.Вставить("АдресХранилищаТабличныхЧастей", СтруктураВозврата.АдресВХНовогоСообщения);
	
	ПараметрыФормы.Вставить("АдресХранилища", Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("ТипСообщения",	Параметры.ТипСообщения);
	ПараметрыФормы.Вставить("Документ1С",	Параметры.Документ1С);
	ПараметрыФормы.Вставить("ТолькоПросмотрСообщения",	Ложь);
	ПараметрыФормы.Вставить("МодальностьЗапрещена", Параметры.МодальностьЗапрещена);
	ПараметрыФормы.Вставить("ПутьКФормамМеркурий", Параметры.ПутьКФормамМеркурий);
	ПараметрыФормы.Вставить("КэшироватьМодульОбъекта", Истина);

	ИмяФормыСообщения = ПутьКФормам()+"Меркурий_СообщениеУправляемая";
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ОткрытьФорму(ИмяФормыСообщения,ПараметрыФормы,ЭтаФорма,Новый УникальныйИдентификатор,,,Новый ОписаниеОповещения(""ОбработчикПеревыпуститьВСД"", ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
	Иначе
		ОткрытьФормуМодально(ИмяФормыСообщения,ПараметрыФормы,ЭтаФорма);
		ОбработчикПеревыпуститьВСД();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыproductItemUUIDОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПросмотретьproductItem(Элементы.Товары.ТекущиеДанные.productItemUUID);
КонецПроцедуры

&НаСервере
Функция ЗапроситьСведенияО_productItem_ПоUUID(productItemGUID)
	Возврат МодульОбъекта().ЗапроситьСведенияО_productItem_ПоUUID(productItemGUID);
КонецФункции

&НаКлиенте
Процедура ПросмотретьproductItem(productItemGUID)
	
	Если ЗначениеЗаполнено(productItemGUID) Тогда 
		
		РезультатЗапроса = ЗапроситьСведенияО_productItem_ПоUUID(productItemGUID);	
		Если РезультатЗапроса.Успешно = Истина Тогда 
			ФормаПросмотраТовара = ПолучитьФорму(ПутьКФормам()+"Меркурий_ПросмотрProductItemУправляемая",РезультатЗапроса, ЭтаФорма);
			ФормаПросмотраТовара.Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьТранзакциюНаСервере()
	МодульОбъекта().УдалитьТранзакциюМеркурий(Сообщение);
КонецПроцедуры

//!!!???УдалитьКнопкуКоманднойпанели("УдалитьТранзакцию","Подменю");
&НаКлиенте
Процедура УдалитьТранзакцию(Команда)
	Если Не ЗначениеЗаполнено(Сообщение.СообщениеСсылка) Тогда 
		ПредупреждениеМеркурий("Сообщение еще не было сохранено");
	Иначе
		УдалитьТранзакциюНаСервере();
		ПереотправкаСообщения = Ложь;
		//Сообщение.СообщениеСсылка = Справочники.КонтурEDI_Сообщения.ПустаяСсылка();
		//УдалитьКнопкуКоманднойпанели("УдалитьТранзакцию","Подменю");
		ЭтаФорма.Закрыть();
 	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикРедактированияОсобыхОтметок(ВведеннаяСтрока, ИдентификаторСтроки) Экспорт
	Если ВведеннаяСтрока<>Неопределено Тогда
		Товары.НайтиПоИдентификатору(ИдентификаторСтроки).ВетСертификатОсобыеОтметки = ВведеннаяСтрока;
		ОбработатьРучноеИзменениеТабЧасти();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОсобыеОтметкиРедактироватьНажатие(Элемент)
	Если Элементы.Товары.ТекущиеДанные<>Неопределено Тогда 
		ВведеннаяСтрока = Элементы.Товары.ТекущиеДанные.ВетСертификатОсобыеОтметки; 
		Подсказка = "Особые отметки в строке: "+Элементы.Товары.ТекущиеДанные.НомерСтроки;
	
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВводСтроки(Новый ОписаниеОповещения(""ОбработчикРедактированияОсобыхОтметок"", ЭтаФорма, Элементы.Товары.ТекущаяСтрока), ВведеннаяСтрока, Подсказка,,Истина)");
		Иначе
			Если ВвестиСтроку(ВведеннаяСтрока,Подсказка,,Истина) Тогда
				ОбработчикРедактированияОсобыхОтметок(ВведеннаяСтрока, Элементы.Товары.ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СырьеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Параметры.ТолькоПросмотрСообщения Тогда
		СтандартнаяОбработка = Ложь;	
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "СырьеИсходнаяПартияНомер"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "СырьеИсходнаяПартияGUID" Тогда
		
		СтандартнаяОбработка = Ложь;	
			
		ПодобратьСтрокуСкладскогоЖурнала("Сырье");
		ОбработатьРучноеИзменениеТабЧасти();
		ПроверитьЗаполнениеПолей();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СырьеДобавить(Команда)
	Сырье.Добавить();
	ПронумероватьТаблицу("Сырье");
	Если Элементы.Сырье.ТекущаяСтрока = Неопределено Тогда
		Элементы.Сырье.ТекущаяСтрока = 0;
	Иначе
		Элементы.Сырье.ТекущаяСтрока = Элементы.Сырье.ТекущаяСтрока + 1;
	КонецЕсли;
	ПодобратьСтрокуСкладскогоЖурнала("Сырье");
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСообщение()
	МодульОбъекта().ЗаписатьСообщение(Сообщение);
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьИсходящееСообщениеМеркурий()
	
	МодульОбъекта().СообщениеОчиститьВыбранноеКоличествоВСкладскомЖурнале();
	
	ТипСообщения = Сообщение.ТипСообщения;
	Если Сообщение.Свойство("Завершена") и Сообщение.Завершена = Истина Тогда
		Сообщение = МодульОбъекта().ПодготовитьСообщениеЗавершениеТранзакцииПроизводства(ТипСообщения,Сообщение.СообщениеСсылка,Документ1С);   //для завершения СообщениеСсылка пробрасывается в карточку сообщения прямо
	Иначе
		Сообщение = ОсновнойМодуль().ПолучитьСтруктуруСообщения(ТипСообщения,"Исходящее");
		МодульОбъекта().ПодготовитьТранзакциюМеркурий(ТипСообщения,Документ1С,Сообщение);
	КонецЕсли;	
	//Сообщение = ОсновнойМодуль().ПолучитьСтруктуруСообщения(ТипСообщения,"Исходящее");
	//МодульОбъекта().ПодготовитьТранзакциюМеркурий(ТипСообщения,Документ1С,Сообщение);
	ЗаполнитьПоляНаФорме();
	ПроверитьЗаполнениеПолей();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФормыДокумента(ДокСсылка)
	Возврат "Документ."+ДокСсылка.Метаданные().Имя+".ФормаОбъекта";
КонецФункции

&НаСервере
Процедура ОбработчикОткрытияДокумента(НеиспПараметр1 = Неопределено, НеиспПараметр2 = Неопределено)
	
	Если Сообщение.ТипСообщения = "M_INC" и НЕ Сообщение.Архив Тогда
		ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
		СообщениеЗаполнитьКоличествоПринято(Документ1С);
		ЗаполнитьПоляНаФорме();
		ПроверитьЗаполнениеПолей();
		ЗаписатьСообщение();	
		УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
		
	//если мы провалимся в документ из карточки существующего сообщения то не следует пересобирать текущее сообщение при изменениях 
	//связанного с ним документа т.к. сообщение уже отправлено/готово к отправке
	//в любом случае важно не потерять Сообщение.СообщениеСсылка т.к. иначе если пользователь нажмет Переотправить - усё упадет
	ИначеЕсли Сообщение.Направление = "Исходящее" И НЕ ЗначениеЗаполнено(Сообщение.СообщениеСсылка) Тогда
		
		ПерезаполнитьИсходящееСообщениеМеркурий();
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура НадписьОткрытьДокументНажатие(Элемент)
		
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Ключ",Документ1С);
	ИмяФормыДокумента = ПолучитьИмяФормыДокумента(Документ1С);
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ОткрытьФорму(ИмяФормыДокумента,СтруктураПараметров,ЭтаФорма,,,,Новый ОписаниеОповещения(""ОбработчикОткрытияДокумента"", ЭтаФорма, СтруктураПараметров), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
	Иначе
		ПолучитьФорму(ИмяФормыДокумента,СтруктураПараметров,ЭтаФорма).ОткрытьМодально();
		ОбработчикОткрытияДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораНовогоСоответствияНоменклатуры(НовоеСоответствие, ПараметрыОбработчика) Экспорт
	
	Если НовоеСоответствие<>Неопределено И ЗначениеЗаполнено(НовоеСоответствие.GUID) ТОгда
		Если ЗначениеЗаполнено(НовоеСоответствие.Код) Тогда
			ТекСтрока = ЭтаФорма[ПараметрыОбработчика.ИмяТаблицы].НайтиПоИдентификатору(ПараметрыОбработчика.ИдентификаторСтроки);
			Если СокрЛП(ПараметрыОбработчика.ТекущийGUID) <> СокрЛП(НовоеСоответствие.GUID) 
				И ЗначениеЗаполнено(ТекСтрока.ИсходнаяПартияGUID) тогда
				ТекСтрока.ИсходнаяПартияGUID = "";
				ПредупреждениеМеркурий("Выбранная в строке партия более не подходит."+Символы.ПС+"Партия очищена!");
			КонецЕсли;
			
			ТекСтрока.GUID = НовоеСоответствие.GUID;
			УстановитьТекст("Товарыguid", "Товары.guid", ТекСтрока.GUID, НовоеСоответствие.Код+" "+НовоеСоответствие.Наименование+" ("+НовоеСоответствие.GUID+")")
		Иначе
			ПредупреждениеМеркурий("Неверный выбор, необходимо выбрать более мелкую классификацию");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

	
&НаКлиенте
Процедура ТоварыguidНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресХранилища", Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("ТекущийGUID", Элементы.Товары.ТекущиеДанные.GUID);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ИмяТаблицы", "Товары");
	ПараметрыОбработчика.Вставить("ИдентификаторСтроки", Элементы.Товары.ТекущаяСтрока);
	ПараметрыОбработчика.Вставить("ТекущийGUID", Элементы.Товары.ТекущиеДанные.GUID);
	    		
	Если Параметры.МодальностьЗапрещена Тогда 
		ОткрытьФормуОбъектаМодально(Параметры.ПутьКФормамМеркурий+"Меркурий_НоменклатураВыборУправляемая", ПараметрыФормы, "ОбработчикВыбораНовогоСоответствияНоменклатуры", ПараметрыОбработчика);
	Иначе
		ВыбраннаяСтрока = ПолучитьФормуОбработки(Параметры.ПутьКФормамМеркурий+"Меркурий_НоменклатураВыборУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикВыбораНовогоСоответствияНоменклатуры(ВыбраннаяСтрока, ПараметрыОбработчика);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьЧерновик(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Функция СписокФормВСД()
	Возврат МодульОбъекта().СписокФормВСД();
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеФормыВСД(Значение)
	
	Если СписокФормВСД = Неопределено Тогда
		СписокФормВСД = СписокФормВСД();
	КонецЕсли;
	
	НайденнаяРасшифровка = СписокФормВСД.НайтиПоЗначению(Значение);
	
	Если НайденнаяРасшифровка<>Неопределено Тогда 
		Возврат НайденнаяРасшифровка.Представление;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработчикНеПозволяемЗабытьКэшНаСервере()
	МодульОбъекта();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНеПозволяемЗабытьКэш()
	ОбработчикНеПозволяемЗабытьКэшНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбработчикНеПозволяемЗабытьКэш", 300);
КонецПроцедуры

&НаСервере
Процедура ОбработчикПеревозчикВыбратьКонтрагентаНаСервере(РезультатВыбора)
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		Сообщение.Перевозчик1С = РезультатВыбора;
		Сообщение.ПеревозчикEDI.GUID 				= МодульОбъекта().КонвертироватьЗначение1СвМеркурий(Сообщение.Перевозчик1С,,"МеркурийХС");
		Элементы.ПредставлениеПеревозчик.Заголовок	= МодульОбъекта().ПолучитьПредставлениеХСМеркурий(Сообщение,"Перевозчик",Истина);
		МодульОбъекта().СообщениеУстановитьДействияОсновныхРеквизитов(Элементы, Сообщение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПеревозчикВыбратьКонтрагента(РезультатВыбора, Парам2 = Неопределено) Экспорт
	
	ОбработчикПеревозчикВыбратьКонтрагентаНаСервере(РезультатВыбора);
	ПроверитьЗаполнениеПолей();
	ОформитьБлокПеревозчик();

КонецПроцедуры

&НаКлиенте
Процедура НадписьПеревозчикНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Сообщение.Перевозчик1С) Тогда
		
		Сообщение.Перевозчик1С = Неопределено;
		Сообщение.ПеревозчикEDI.GUID = Неопределено;
		ПроверитьЗаполнениеПолей();
		ОформитьБлокПеревозчик();

	Иначе
		//откроем выбор
		ТипСправочникаКонтрагенты = ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее");
		
		ИмяФормыСправочника = "Справочник."+ТипСправочникаКонтрагенты+".ФормаВыбора";
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ОткрытьФорму(ИмяФормыСправочника,,,,,,Новый ОписаниеОповещения(""ОбработчикПеревозчикВыбратьКонтрагента"", ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
		Иначе
			текКонтрагент = ОткрытьФормуМодально(ИмяФормыСправочника);//ФормаВыбораПлощадки.ОткрытьМодально();
			ОбработчикПеревозчикВыбратьКонтрагента(текКонтрагент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьБлокПеревозчик()
	
	Собственный = Сообщение.Свойство("Перевозчик1С") и (Не ЗначениеЗаполнено(Сообщение.Перевозчик1С) и НЕ ЗначениеЗаполнено(Сообщение.ПеревозчикEDI.GUID));
	
	Элементы.НадписьПеревозчик.Заголовок = ?(Собственный, " Собственный (изменить)", " Перевозчик (изменить)");
	Элементы.МашинкаЗеленая.Видимость = Собственный;
	Элементы.МашинкаКрасная.Видимость = НЕ Собственный;
	Элементы.СтраницаТранспорт.Картинка = ?(Собственный, Элементы.МашинкаЗеленая.Картинка, Элементы.МашинкаКрасная.Картинка);
	Элементы.ПредставлениеПеревозчик.Видимость = НЕ Собственный;
	Элементы.ДействиеПеревозчик.Видимость = НЕ Собственный;
	//Если ЕстьИзменение Тогда
	//	Элементы.СтраницыСообщения.ТекущаяСтраница = Элементы.СтраницаТранспорт;
	//КонецЕсли;
	
КонецПроцедуры

//Сделать!
&НаКлиенте
Процедура ПропуститьДействие(Команда)
	ПредупреждениеМеркурий("В разработке...");
	
	//Если Сообщение.Статус = "Пропущено" Тогда
	//	//удалить исходящее сообщение из справочника
	//	//пересобрать исходящее сообщение
	//	
	//	//для входящего ВСД - достаточно просто вернуть на родину его оригинальные реквизиты
	//	//и перезаполнить карточку
	//	
	//	
	//	Если Сообщение.ТипСообщения = "M_INC" Тогда 
	//		
	//		Сообщить("Для входящих ЭлВСД - В разработке.");
	//		
	//	Иначе //исходящее
	//		ТипСообщения = Сообщение.ТипСообщения;
	//		ПереотправкаСообщения = Ложь;
	//		//Сообщение.СообщениеСсылка = Справочники.КонтурEDI_Сообщения.ПустаяСсылка();
	//		УдалитьКнопкуКоманднойпанели("УдалитьТранзакцию","Подменю");
	//		
	//		НовоеСообщение = ОсновнойМодуль.ПолучитьСтруктуруСообщения(ТипСообщения,"Исходящее");
	//		ПодготовитьТранзакциюМеркурий(ТипСообщения,Сообщение.ДокументСсылка,НовоеСообщение);
	//		
	//		ФормаСообщения = ПолучитьФорму("Меркурий_Сообщение",,Новый УникальныйИдентификатор);	//ФормаВладелец
	//		ФормаСообщения.Сообщение			= НовоеСообщение;
	//		ФормаСообщения.ПереотправкаСообщения= Ложь;
	//		ФормаСообщения.СообщениеСсылка		= Справочники.КонтурEDI_Сообщения.ПустаяСсылка();
	//		ФормаСообщения.ТолькоПросмотрСообщения = Ложь;
	//		
	//		Попытка
	//			НачатьТранзакцию();
	//			ФормаСообщения.ОткрытьМодально();
	//			УдалитьТранзакциюМеркурий(Сообщение);
	//			ЭтаФорма.Закрыть();
	//			ЗафиксироватьТранзакцию();
	//		Исключение
	//			Сообщить(ОписаниеОшибки());
	//			ФормаСообщения=Неопределено;
	//			ОтменитьТранзакцию();
	//		КонецПопытки;
	//		
	//	КонецЕсли;
	//	
	//Иначе
	//	//создаем это сообщение и ставим галку архив
	//	ПропуститьСообщениеМеркурий(Сообщение);
	//	ЭтаФорма.Закрыть();
	//КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	СтандартнаяОбработкаEDI = Истина;
	ДопПараметры = Новый Структура;
	
	//если вы хотмте вызвать форму незаписанного докусента, то в ПМ обязательно привяжите Эту форму в качестве владельца
	СозданныйДокументСсылка = ОбработкаСобытияПодключаемогоМодуля("СоздатьДокументПоВходящемуВСД",СтандартнаяОбработкаEDI,Новый Структура("ИмяКнопки,Сообщение,Параметры,Форма,РезультатКлиента","СоздатьДокумент",Сообщение,ДопПараметры,Неопределено,неопределено));
	
	Если ЗначениеЗаполнено(СозданныйДокументСсылка) Тогда 
		ПривязатьДокументКСообщению(Сообщение,СозданныйДокументСсылка);
	Иначе
		//
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументНомерПриИзменении(Элемент)
	Сообщение.ДокументEDI.Номер = ДокументНомер;
	Сообщение.ДокументEDI.Дата = ДокументДата;
	ПроверитьЗаполнениеПолей();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	// на случай создания нового документа из формы.
	// В таком случае в качестве владельца формы необходимо указать эту форму - она может передаваться в качестве параметра в ПМ
	//ПривязатьДокументКСообщению(Сообщение,?(Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)),Объект,Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура ДокументДатаПриИзменении(Элемент)
	Сообщение.ДокументEDI.Номер = ДокументНомер;
	Сообщение.ДокументEDI.Дата = ДокументДата;
	ПроверитьЗаполнениеПолей();
КонецПроцедуры

&НаСервере
Процедура ДобавитьДопКолонки()//пока только вызов

	//Товары.Колонки.Добавить("ЕдиницаИзмеренияПоКлассификатору",Справочники.ТипВсеСсылки()); 
	//Колонка = ЭлементыФормы.Товары.Колонки.Добавить("ЕдиницаИзмеренияПоКлассификатору","Ед. изм. по классификатору"); 
	//Колонка.Данные		= "ЕдиницаИзмеренияПоКлассификатору";
	//Колонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
	//Колонка.Видимость 	= Ложь;

КонецПроцедуры

&НаСервере
Процедура ОпрделитьСтатусРасхожденийПоВсемСтрокам()
	Для Каждого Строкатоваров Из Товары Цикл
		МодульОбъекта().ОпределитьСтатусРасхожденийПоСтроке(Строкатоваров);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтклоненоПолностью(Команда)
	
	Для Каждого Строкатоваров Из Товары Цикл
		Строкатоваров.КоличествоКПодтверждению = 0;
		Строкатоваров.КоличествоУпаковокКПодтверждению = 0;
	КонецЦикла;
	
	ОпрделитьСтатусРасхожденийПоВсемСтрокам();
	ОбработатьРучноеИзменениеТабЧасти();
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементУсловногоОформления(ИмяПоляОформления = Неопределено, ИмяПоляОтбора, ВидСравненияОтбора, ЗначениеОтбора = Неопределено, ЦветПоля = Неопределено, ТекстПоля = Неопределено, ЦветТекста = Неопределено, ШрифтТекста = Неопределено)
	
	ЭлементУФ = УсловноеОформление.Элементы.Добавить();
	
	Если ИмяПоляОформления<>Неопределено Тогда
		ПолеУФ = ЭлементУФ.Поля.Элементы.Добавить();
		ПолеУФ.Использование = Истина;
		ПолеУФ.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляОформления);//"ТоварыСтатусРасхождений");
	КонецЕсли;
		
	ОтборУФ = ЭлементУФ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборУФ.Использование = Истина;
	ОтборУФ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора);//"Товары.СтатусРасхождений");
	ОтборУФ.ВидСравнения = ВидСравненияОтбора;//ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Если ЗначениеОтбора<>Неопределено Тогда
		ОтборУФ.ПравоеЗначение = ЗначениеОтбора;
	КонецЕсли;
		
	Если ЦветПоля<>Неопределено Тогда
		ОформлениеУФ = ЭлементУФ.Оформление.Элементы;
		ОформлениеУФ.Найти("ЦветФона").Использование = Истина;
		ОформлениеУФ.Найти("ЦветФона").Значение = ЦветПоля;//Новый Цвет(220, 250, 220);
	КонецЕсли;
	
	Если ТекстПоля<>Неопределено Тогда
		ОформлениеУФ = ЭлементУФ.Оформление.Элементы;
		ОформлениеУФ.Найти("Текст").Использование = Истина;
		ОформлениеУФ.Найти("Текст").Значение = ТекстПоля;//"не заполнено";        
	КонецЕсли;
	
	Если ЦветТекста<>Неопределено Тогда
		ОформлениеУФ = ЭлементУФ.Оформление.Элементы;
		ОформлениеУФ.Найти("ЦветТекста").Использование = Истина;
		ОформлениеУФ.Найти("ЦветТекста").Значение = ЦветТекста;
	КонецЕсли;
	
	Если ШрифтТекста<>Неопределено Тогда
		ОформлениеУФ = ЭлементУФ.Оформление.Элементы;
		ОформлениеУФ.Найти("Шрифт").Использование = Истина;
		ОформлениеУФ.Найти("Шрифт").Значение = ШрифтТекста;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекст(ИмяПоляОформления, ИмяПоляОтбора, Значение, Представление)
	
	Если СпЭлементовУсловногоОформления = Неопределено Тогда
		СпЭлементовУсловногоОформления = Новый СписокЗначений;
	КонецЕсли;
	Если СпЭлементовУсловногоОформления.НайтиПоЗначению(ИмяПоляОформления+"_"+Значение)<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпЭлементовУсловногоОформления.Добавить(ИмяПоляОформления+"_"+Значение);
	
	ЭлементУФ = УсловноеОформление.Элементы.Добавить();
	ПолеУФ = ЭлементУФ.Поля.Элементы.Добавить();
	ПолеУФ.Использование = Истина;
	ПолеУФ.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляОформления);//"ТоварыСтатусРасхождений");
	
	ОтборУФ = ЭлементУФ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборУФ.Использование = Истина;
	ОтборУФ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора);//"Товары.СтатусРасхождений");
	ОтборУФ.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборУФ.ПравоеЗначение = Значение;
	
	ОформлениеУФ = ЭлементУФ.Оформление.Элементы;
	ОформлениеУФ.Найти("Текст").Использование = Истина;
	ОформлениеУФ.Найти("Текст").Значение = Представление;//"не заполнено";        
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПоКолонке(ИмяПоляОформления, ИмяПоляОтбора, ЗначениеВыполнить, ПредставлениеВыполнить)
	Для Каждого текСтрока из Товары Цикл
		текЗначение = Неопределено;
		текПредставление = Неопределено;
		Выполнить("текЗначение = "+ЗначениеВыполнить);
		Выполнить("текПредставление = "+ПредставлениеВыполнить);
		Если ЗначениеЗаполнено(текЗначение) и ЗначениеЗаполнено(текПредставление) Тогда
			УстановитьТекст(ИмяПоляОформления, ИмяПоляОтбора, текЗначение, текПредставление);
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

&НаСервере
Процедура ОформитьУсловнымОформлением()
	
	///пример СоздатьЭлементУсловногоОформления("ТоварыСтатусРасхождений", "Товары.СтатусРасхождений", ВидСравненияКомпоновкиДанных.НеЗаполнено, Неопределено, Новый Цвет(220, 250, 220), "не заполнено");
	ЦветХорошо = Новый Цвет(220,250,220);
	ЦветПлохо  = WebЦвета.ТусклоРозовый;
	НастрФормы = МодульОбъекта().ПолучитьНастройкиФормыСообщенияМеркурий(Сообщение.ТипСообщения,Сообщение.Направление);
	
	Если ТаблицаОшибок.Количество()>0 Тогда
		
		мИменТабличнойЧасти = Новый Массив;
		мИменТабличнойЧасти.Добавить("Товары");
		мИменТабличнойЧасти.Добавить("Сырье");
		
		Для Сч = 0 по мИменТабличнойЧасти.ВГраница() Цикл
		
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ИмяТабличнойЧасти",мИменТабличнойЧасти.Получить(Сч));//Элемент.Имя);
		
			НайденныеСтроки = НастрФормы.ОбязательныеПоля.НайтиСтроки(СтруктураПоиска);
		
			Для Каждого Стр ИЗ НайденныеСтроки Цикл
			
				СоздатьЭлементУсловногоОформления(Стр.ИмяТабличнойЧасти+Стр.ИмяПоля, Стр.ИмяТабличнойЧасти+"."+Стр.ИмяПоля, ВидСравненияКомпоновкиДанных.Заполнено, , ЦветХорошо);
				СоздатьЭлементУсловногоОформления(Стр.ИмяТабличнойЧасти+Стр.ИмяПоля, Стр.ИмяТабличнойЧасти+"."+Стр.ИмяПоля, ВидСравненияКомпоновкиДанных.НеЗаполнено, , ЦветПлохо);
			
			КонецЦикла;
			
		КонецЦикла;
				
	КонецЕсли;
	
	//изменить партию
	СоздатьЭлементУсловногоОформления("СырьеИсходнаяПартияНомер", "Сырье.ИсходнаяПартияНомер", ВидСравненияКомпоновкиДанных.НеЗаполнено,,,"<выбрать>");
	СоздатьЭлементУсловногоОформления("ТоварыИсходнаяПартияНомер", "Товары.ИсходнаяПартияНомер", ВидСравненияКомпоновкиДанных.НеЗаполнено,,,"<выбрать>");
	
	СоздатьЭлементУсловногоОформления("ТоварыproductItemUUID", "Товары.productItemUUID", ВидСравненияКомпоновкиДанных.Заполнено,,ЦветХорошо);
	
	Если Сообщение.ТипСообщения = "M_INC" И Сообщение.Направление = "Входящее" Тогда
		СоздатьЭлементУсловногоОформления("ТоварыСтатусРасхождений", "Товары.СтатусРасхождений", ВидСравненияКомпоновкиДанных.Равно,"УточненАкт",WebЦвета.Лимонный);
		СоздатьЭлементУсловногоОформления("ТоварыСтатусРасхождений", "Товары.СтатусРасхождений", ВидСравненияКомпоновкиДанных.Равно,"УточненВСД",Новый Цвет(255,239,215));
		СоздатьЭлементУсловногоОформления("ТоварыСтатусРасхождений", "Товары.СтатусРасхождений", ВидСравненияКомпоновкиДанных.Равно,"Отклонен",ЦветПлохо);
		СоздатьЭлементУсловногоОформления("ТоварыСтатусРасхождений", "Товары.СтатусРасхождений", ВидСравненияКомпоновкиДанных.Равно,"УточненАкт",,"Уточнен акт");
		СоздатьЭлементУсловногоОформления("ТоварыСтатусРасхождений", "Товары.СтатусРасхождений", ВидСравненияКомпоновкиДанных.Равно,"УточненВСД",,"Уточнен возвратный ВСД");
	КонецЕсли;
	
	//	ЯчейкаПечать = ОформлениеСтроки.Ячейки.Печать;
	
	УстановитьТекстПоКолонке("ТоварыunitUUID", "Товары.unitUUID", 	"текСтрока.unitUUID", "МодульОбъекта().ПолучитьНаименованиеИзКлассификатораЕдиницИзмеренияМеркурий(текСтрока.unitUUID)");
	УстановитьТекстПоКолонке("СырьеunitUUID", "Сырье.unitUUID", 	"текСтрока.unitUUID", "МодульОбъекта().ПолучитьНаименованиеИзКлассификатораЕдиницИзмеренияМеркурий(текСтрока.unitUUID)");
	
	УстановитьТекстПоКолонке("ТоварыЕдиницаИзмеренияУпаковокUUID", "Товары.ЕдиницаИзмеренияУпаковокUUID", 	"текСтрока.ЕдиницаИзмеренияУпаковокUUID", "МодульОбъекта().ПолучитьНаименованиеИзКлассификатораУпаковокМеркурий(текСтрока.ЕдиницаИзмеренияУпаковокUUID)");
	УстановитьТекстПоКолонке("СырьеЕдиницаИзмеренияУпаковокUUID", "Сырье.ЕдиницаИзмеренияУпаковокUUID", 	"текСтрока.ЕдиницаИзмеренияУпаковокUUID", "МодульОбъекта().ПолучитьНаименованиеИзКлассификатораУпаковокМеркурий(текСтрока.ЕдиницаИзмеренияУпаковокUUID)");
	
	УстановитьТекстПоКолонке("Товарыguid", "Товары.guid", 	"текСтрока.guid", "МодульОбъекта().ПолучитьПредставлениеsubProductGUID(текСтрока.guid)");
	УстановитьТекстПоКолонке("Сырьеguid", "Сырье.guid", 	"текСтрока.guid", "МодульОбъекта().ПолучитьПредставлениеsubProductGUID(текСтрока.guid)");
	
	УстановитьТекстПоКолонке("ТоварыВетСертификатСпособХраненияПриПеревозке", "Товары.ВетСертификатСпособХраненияПриПеревозке", 	"текСтрока.ВетСертификатСпособХраненияПриПеревозке", "МодульОбъекта().ПолучитьПредставлениеСпособаХранения(текСтрока.ВетСертификатСпособХраненияПриПеревозке)");
	УстановитьТекстПоКолонке("ТоварыВетСертификатФорма", "Товары.ВетСертификатФорма", 	"текСтрока.ВетСертификатФорма", "МодульОбъекта().ПолучитьПредставлениеФормыВСД(текСтрока.ВетСертификатФорма)");
	
	СоздатьЭлементУсловногоОформления("Товары", "Товары.Аннулирован", ВидСравненияКомпоновкиДанных.Равно,Истина,WebЦвета.ДымчатоБелый,,Новый Цвет(141, 161, 181),Новый Шрифт(,,,,,Истина));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
КонецПроцедуры

//Продублировал из модуля, т.к. ДанныеФормыЭлементКоллекции надо передавать в структуру
//!!! ВыбраннаяПартия.КоличествоИспользовано нужно связать с кэшированной таблицей остатков ТаблицаОстатковМеркурий
&НаСервере
Процедура ЗаполнитьИдентификаторыВыбраннойПартииНаСервере(СтрокаИсходнойПродукцииИдентификатор, ИмяТаблицы, Знач ВыбраннаяПартия, ТаблицаОстатковАдресВоВременномХранилище) Экспорт
	
	СтрокаИсходнойПродукции = ЭтаФорма[ИмяТаблицы].НайтиПоИдентификатору(СтрокаИсходнойПродукцииИдентификатор);	
	Если СтрокаИсходнойПродукции = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ТаблицаОстатковМекурий = ПолучитьИзВременногоХранилища(ТаблицаОстатковАдресВоВременномХранилище);
	Если ТаблицаОстатковМекурий = Неопределено тогда
		Возврат;	
	КонецЕсли;
	
	ВыбраннаяПартия = ТаблицаОстатковМекурий.Найти(ВыбраннаяПартия.GUID_Партии, "GUID_Партии");
	Если ВыбраннаяПартия = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	СтрокаИсходнойПродукции.Скоропортящаяся	    = ВыбраннаяПартия.Скоропортящаяся;	
	СтрокаИсходнойПродукции.ИсходнаяПартияGUID	= ВыбраннаяПартия.GUID_Партии;	
	СтрокаИсходнойПродукции.ИсходнаяПартияНомер	= ВыбраннаяПартия.НомерЗаписи;
	
	Если ВыбраннаяПартия.ОстатокУпаковок > 0 Тогда
		СтрокаИсходнойПродукции.ЕдиницаИзмеренияУпаковокUUID 	= ВыбраннаяПартия.ЕдиницаИзмеренияУпаковокUUID;
	Иначе
		СтрокаИсходнойПродукции.ЕдиницаИзмеренияУпаковокUUID 	= "";
		СтрокаИсходнойПродукции.КоличествоУпаковок 	= 0;	
	КонецЕсли;
	
	СтрокаИсходнойПродукции.unitUUID 			= ВыбраннаяПартия.unitUUID;
	СтрокаИсходнойПродукции.Наименование 		= ВыбраннаяПартия.Наименование;
	СтрокаИсходнойПродукции.GUID 				= ВыбраннаяПартия.subProductGuid;
	СтрокаИсходнойПродукции.ДатаПроизводства 	= ВыбраннаяПартия.ДатаВыпуска;
	СтрокаИсходнойПродукции.ДатаПроизводства2 	= ВыбраннаяПартия.ДатаВыпуска2;
	СтрокаИсходнойПродукции.СрокГодности 		= ВыбраннаяПартия.ГоденДо;
	СтрокаИсходнойПродукции.СрокГодности2 		= ВыбраннаяПартия.ГоденДо2;
	
	СтрокаИсходнойПродукции.СтранаUUID 			= ВыбраннаяПартия.СтранаUUID;
	СтрокаИсходнойПродукции.Страна 				= Неопределено;	
	Если ЗначениеЗаполнено(ВыбраннаяПартия.СтранаUUID) Тогда
		СтрокаИсходнойПродукции.Страна = МодульОбъекта().ПреобразоватьСтрану_Меркурий_в_1С(ВыбраннаяПартия.СтранаUUID);
	КонецЕсли;
		
	СтрокаИсходнойПродукции.ПлощадкаПроизводительGUID = ВыбраннаяПартия.ProducerGUID;
	СтрокаИсходнойПродукции.ПлощадкаПроизводитель 	   = Неопределено;		
	Если ЗначениеЗаполнено(ВыбраннаяПартия.ProducerGUID) Тогда
		СтрокаИсходнойПродукции.ПлощадкаПроизводитель = МодульОбъекта().КонвертироватьЗначениеМеркурийв1C(ВыбраннаяПартия.ProducerGUID,,"МеркурийПлощадка");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция СообщениеАктуальнаяТаблицаОстатковНаТекМоментВремениНаСервере(ИмяТаблицы)
	
	ТаблицаОстатков = МодульОбъекта().СообщениеАктуальнаяТаблицаОстатковНаТекМоментВремени(
		Сообщение.ПлощадкаEDI.GUID, ЭтаФорма[ИмяТаблицы], Сообщение.ХозяйствующийСубъектEDI.GUID);
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОстатков, УникальныйИдентификатор);
	
КонецФункции


//Актуальность к ОФ = М8.03.057

//ОбработкаЗаписиНового раскомментить, протестить

//СообщениеОчиститьВыбранноеКоличествоВСкладскомЖурнале - проверить, не кэшируется Таблицаостатков
//ПроизвестиПервоначальноеЗаполнениеПолейНаФорме  - проверить, большая разница с ОФ
//ДополнительныеРеквизитыПриВыводеСтроки - сделать оформление на УФ как в ОФ
//ПолучитьТекстовыйДокументФайлаЗапросаНаСервере - ОбработатьРучноеИзменениеТранзакции - пока закомментил, с ним не работает
//ПропуститьДействие - вообще нулевая, сделать.
//ПриОткрытии в ОФ вызывается "ОсновнойМодуль.ПриОткрытииФормыСообщения(Сообщение,ЭтаФорма)" - надо ли?
//(3) СделатьАктивнымПоле - Автоматически выбирать ветсертификат экспертизу?
//ДобавитьДопКолонки -???

//ПреобразоватьТипыЕдиницыИзмеренияЗапросаУТ11_УНФ закомментил в модуле - а вообще зачем она там - нужно проверить?

//ПодобратьСтрокуСкладскогоЖурнала - на ОФ поменялась значительно в М8.03.055 (с появлением формы Меркурий_ВыборПартии) 


//Поправил логику ОбработчикВыбораДокументаПоступленияНаСервере - если излишки, то запись продолжается. Проверить, поправить логику на ОФ
//В получении запроса СообщениеПолучитьТабТоваровПоступления убрал левое соед. по единицам. Дошлифовать запрос. А также рассмотреть возможность переноса в ПМ






	//Для каждого стр из Товары Цикл
	//	
	//	Если НЕ ЗначениеЗаполнено(стр.ИсходнаяПартияGUID) Тогда
	//		стр.ИсходнаяПартияНомер = "Выбрать";
	//	Иначе
	//		стр.ИсходнаяПартияНомер = стр.ИсходнаяПартияНомер+ " (изменить)";
	//	КонецЕсли;

	//КонецЦикла;


//&НаСервере
////инициализация модуля и его экспортных функций
//Функция ОсновнойМодуль()

//	Если ОбработкаОбъект=Неопределено Тогда
//		
//		Если Параметры.КэшироватьМодульОбъекта Тогда
//			Если Параметры.АдресХранилища<>"" Тогда
//				_Структура = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
//				Если ТипЗнч(_Структура) = Тип("Структура") Тогда
//					_Структура.Свойство("ОбработкаОбъект",ОбработкаОбъект);
//					_Структура.Свойство("ОсобенностиСообщений",ОсобенностиСообщений);
//				КонецЕсли;
//			КонецЕсли;
//			
//			Если ОбработкаОбъект=Неопределено Тогда
//				ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
//				ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
//				Параметры.АдресХранилища = ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект,ОсобенностиСообщений",ОбработкаОбъект,ОсобенностиСообщений),УникальныйИдентификатор);
//				ОбработкаОбъект.IDОсновнойФормы = Параметры.IDОсновнойФормы;
//			КонецЕсли;
//		Иначе
//			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
//			ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
//			ОбработкаОбъект.IDОсновнойФормы = Параметры.IDОсновнойФормы;
//		КонецЕсли;
//		
//	КонецЕсли;	
//	
//	Возврат ОбработкаОбъект;
//	
//КонецФункции

//&НаСервере
////инициализация модуля и его экспортных функций
//Функция МодульОбъекта()
//	Возврат ОсновнойМодуль().МодульМеркурий();
//КонецФункции


