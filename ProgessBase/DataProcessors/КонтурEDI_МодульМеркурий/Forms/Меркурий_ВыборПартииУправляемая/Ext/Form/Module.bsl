&НаСервере
Перем ОбработкаОбъект;

//////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("НеОткрыватьФорму") Тогда
		Возврат;		
	КонецЕсли;
	
	Меркурий_Параметры = Новый Структура;	
	Если Параметры.Свойство("АдресХранилища") Тогда
		Меркурий_Параметры.Вставить("АдресХранилища", Параметры.АдресХранилища);
	КонецЕсли;
	Если Параметры.Свойство("ПутьКФормамМеркурий") Тогда
		Меркурий_Параметры.Вставить("ПутьКФормамМеркурий", Параметры.ПутьКФормамМеркурий);	
	КонецЕсли;
	Если Параметры.Свойство("МодальностьЗапрещена") Тогда
		Меркурий_Параметры.Вставить("МодальностьЗапрещена", Параметры.МодальностьЗапрещена);	
	КонецЕсли;
		
	мКешФормы = Новый Структура;
	мКешФормы.Вставить("Представления", Новый Соответствие);
	
	// Расположение в ВХ в дальнейшем может быть использовано для синхронизации таблицы остатков
	
	Если НЕ Параметры.Свойство("ТаблицаОстатковАдресВоВременномХранилище", ТаблицаОстатковАдресВоВременномХранилище) Тогда
		ВызватьИсключение "Что-то пошло не так";
	КонецЕсли;             		
	
	// Сценарий работы формы № 1
	
	Если Параметры.Свойство("ЭлеменКоллекцииИсходнойПродукии")
		И Параметры.Свойство("ТаблицаОстатковАдресВоВременномХранилище")
		И Параметры.Свойство("ХозяйствующийСубъектEDI", ХозяйствующийСубъектEDI) Тогда
		
		ПеречитатьЭлементИсходнойПродукииНаСервере(Параметры.ЭлеменКоллекцииИсходнойПродукии);
		ОбновитьТаблицуПодборПартийТоваровНаСервере();
					
	КонецЕсли;	
	
	// Информация
	
	СформироватьПредставленияШапкиФормыНаСервере(Параметры);
	
	// Оформелние
	
	УстановитьСвойстваЭлементовУправленияНаСервере();	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ПодборПартийТоваровПодбробно.Пометка = Меркурий_ВыборПартии_Подробно;	
	
	ПоказатьПанельХарактеристикиИсходныхПартийНаКлиенте(
		Элементы.ПодборПартийТоваровПодбробно.Пометка);	
		
	УстановитьПриоритетнуюСтрокуТекущейНаКлиенте();		
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
		
КонецПроцедуры

//////////////////////////////////////////////////////
// СОБЫТИЯ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ПодборПартийТоваровВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если НРег(Колонка.Имя) = нРег("ПодборПартийТоваровДействие") Тогда
		ТекущиеДанные = ПодборПартийТоваров.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТекущиеДанные = Неопределено тогда
			Возврат;	
		КонецЕсли;
		Если НРег(ТекущиеДанные.Действие) = нРег("Выбрать") Тогда
			ОбработатьВыборТекущейСтрокиНаКлиенте();	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПартийТоваровПриАктивизацииСтроки(Элемент)
	
	// Представления текущих данных
	
	СформироватьПредставленияТекущиеДанныеНаКлиенте();
		
	//  Действие	
	Для Каждого Элемент Из ПодборПартийТоваров Цикл
		Элемент.Действие = "";	
	КонецЦикла;
		
	ТекущиеДанные = Элементы.ПодборПартийТоваров.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено тогда
		Если ТекущиеДанные.ГибкийПоиск = Ложь Тогда
			ТекущиеДанные.Действие = "Выбрать";	
		КонецЕсли;		
		ПересчитатьКоличествоПеренестиВДокументПриАктивацииСтрокиНаКлиенте(ТекущиеДанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПартийТоваровПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПартийТоваровКоличествоПеренестиВДокументПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПодборПартийТоваров.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	Если ТекущиеДанные.КоличествоПеренестиВДокумент > ТекущиеДанные.КоличествоДоступно Тогда
	
		Недостаток = ТекущиеДанные.КоличествоПеренестиВДокумент - ТекущиеДанные.КоличествоДоступно;
		
		СообщениеОбОшике = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"По площадке: %1 - не хватает %2 товара %3", 
			ПлощадкаПредставление, 
			Формат(Недостаток, "ЧЦ=15; ЧДЦ=3; ЧН=0,000"), 
			ТекущиеДанныеПродуктУр3Представление);
		
		Сообщить(СообщениеОбОшике);
	
	КонецЕсли;
	
	ТекущиеДанные.АвтоРасчет = (РасчитатьКоличествоПеренестиВДокументВСтрокеНаКлиенте(ТекущиеДанные) = 
		ТекущиеДанные.КоличествоПеренестиВДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПартийТоваровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПодборПартийТоваров.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроизводстваПриИзменении(Элемент)

	ОбновитьТаблицуПодборПартийТоваровНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроизводства2ПриИзменении(Элемент)

	ОбновитьТаблицуПодборПартийТоваровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокГодностиПриИзменении(Элемент)

	ОбновитьТаблицуПодборПартийТоваровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокГодности2ПриИзменении(Элемент)

	ОбновитьТаблицуПодборПартийТоваровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Исх_GUIDНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресХранилища", Меркурий_Параметры.АдресХранилища);
    		
	Если Меркурий_Параметры.МодальностьЗапрещена Тогда 
		ОткрытьФормуОбъектаМодально(Меркурий_Параметры.ПутьКФормамМеркурий + "Меркурий_НоменклатураВыборУправляемая", ПараметрыФормы, "ВыбратьПродуктУр3");
	Иначе
		ВыбраннаяСтрока = ПолучитьФормуОбработки(Меркурий_Параметры.ПутьКФормамМеркурий + "Меркурий_НоменклатураВыборУправляемая",ПараметрыФормы).ОткрытьМодально();
		ВыбратьПродуктУр3(ВыбраннаяСтрока);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ПолноеИмяФормы, ПараметрыФормы = Неопределено , ВладелецФормы  = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь)
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	Если ВладелецФормы = Неопределено Тогда
		ВладелецФормы =	ЭтаФорма;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресХранилища",  Меркурий_Параметры.АдресХранилища);
	
	ПолучаемаяФорма = ПолучитьФорму(
		ПолноеИмяФормы, 
		ПараметрыФормы, 
		ВладелецФормы, 
		КлючУникальности);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы =	ВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПодборПартийТоваров.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда	
		ПересчитатьКоличествоПеренестиВДокументПриАктивацииСтрокиНаКлиенте(ТекущиеДанные);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура Исх_НоменклатураНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	
	Если НЕ ПустаяСтрока(Исх_GUID) Тогда
		СписокВыбора = ПолучитьСписокВыбораУровень4НаСервере(ХозяйствующийСубъектEDI, Исх_GUID, ТаблицаОстатковАдресВоВременномХранилище);	
	КонецЕсли;
	
	Элемент.СписокВыбора.Очистить();
	Для Каждого Строка Из СписокВыбора Цикл
		Элемент.СписокВыбора.Добавить(Строка.Значение, Строка.Представление);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Исх_НоменклатураПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СписокВыбора = Новый СписокЗначений;
	
	Если НЕ ПустаяСтрока(Исх_GUID) Тогда
		СписокВыбора = ПолучитьСписокВыбораУровень4НаСервере(ХозяйствующийСубъектEDI, Исх_GUID, ТаблицаОстатковАдресВоВременномХранилище);	
	КонецЕсли;
	
	Элемент.СписокВыбора.Очистить();
	Для Каждого Строка Из СписокВыбора Цикл
		Элемент.СписокВыбора.Добавить(Строка.Значение, Строка.Представление);	
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Процедура Исх_НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	// (Исх_) - Изначально первичные данные изменение которых непредполагалось
	
	Исх_productItemUUID  = ВыбранноеЗначение.productItemUUID;
	Исх_Номенклатура	 = ВыбранноеЗначение.Номенклатура;	
	Скоропортящаяся      = ВыбранноеЗначение.Скоропортящаяся;
		
	Исх_НоменклатураПриИзменении(Элемент);
	
	// 
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(Исх_НоменклатураПредставление, Исх_НоменклатураПредставление);	
	
КонецПроцедуры

&НаКлиенте
Процедура СкоропортящаясяПриИзменении(Элемент)
	
	ОбновитьТаблицуПодборПартийТоваровНаКлиенте();
	
КонецПроцедуры

//////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ОбработатьВыборТекущейСтрокиНаКлиенте()
	
	ТекущиеДанные = Элементы.ПодборПартийТоваров.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	Если ТекущиеДанные.КоличествоПеренестиВДокумент = 0 Тогда
		Сообщить("Поле ""Перенести в документ, кол-во"" не заполнено");
		ЕстьОшибки = Истина;	
	КонецЕсли;	
	
	Если ТекущиеДанные.ГибкийПоиск = Истина Тогда
		// Или можно?
		Сообщить("Выбранная партия не предназначена для выбора т.к. не подходит по условиям отбора.");
		ЕстьОшибки = Истина;	
	КонецЕсли;	
	
	Если ТекущиеДанные.КоличествоПеренестиВДокумент > ТекущиеДанные.КоличествоДоступно Тогда
		
		Недостаток = ТекущиеДанные.КоличествоПеренестиВДокумент - ТекущиеДанные.КоличествоДоступно;
		
		СообщениеОбОшике = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"По площадке: %1 - не хватает %2 %3", 
			ПлощадкаПредставление, 
			Формат(Недостаток, "ЧЦ=15; ЧДЦ=3; ЧН=0,000"), 
			ТекущиеДанныеПродуктУр3Представление);
		
		Сообщить(СообщениеОбОшике);
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	Если ЕстьОшибки Тогда
		Возврат;	
	КонецЕсли;
	
	// TODO: Надо решить как обрабатывать упаковки
	
	Результат = Новый Структура;
	Результат.Вставить("GUID_Партии"				 , ТекущиеДанные.GUID_Партии);
	Результат.Вставить("КоличествоПеренестиВДокумент", ТекущиеДанные.КоличествоПеренестиВДокумент);	
	
	// Т.К. Ожидается модальный результат и владельца не предвидится
	//ОповеститьОВыборе(Результат);
	ЭтаФорма.Закрыть(Результат);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПриоритетнуюСтрокуТекущейНаКлиенте()
	
	ПриоритетныеСтроки = ПодборПартийТоваров.НайтиСтроки(
		Новый Структура("Приоритет", 1));
		
	Если ПриоритетныеСтроки.Количество() <> 0 Тогда		
		Элементы.ПодборПартийТоваров.ТекущаяСтрока = ПриоритетныеСтроки[0].ПолучитьИдентификатор();
		//ПересчитатьКоличествоПеренестиВДокументПриАктивацииСтрокиНаКлиенте(ПриоритетныеСтроки[0])
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоПеренестиВДокументПриАктивацииСтрокиНаКлиенте(Строка)
	
	Если Строка.ГибкийПоиск = Истина Тогда
		Возврат;	
	КонецЕсли;
	
	// Контроль сохранности данных пользователя
	
	МассивСтрок = ПодборПартийТоваров.НайтиСтроки(Новый Структура("АвтоРасчет", Ложь));
	Если МассивСтрок.Количество() <> 0 Тогда	
		СтрокаНеАвтоРасчет = МассивСтрок[0];
		// Исключение повторной активации текущей строки
		Если Строка <> Неопределено 
			И ПодборПартийТоваров.Индекс(СтрокаНеАвтоРасчет) = ПодборПартийТоваров.Индекс(Строка) Тогда
			Возврат;	
		КонецЕсли; 	
				
		ТекстВопроса = "Количество было изменено (%1), отменить изменения?";
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, Строка(МассивСтрок[0].КоличествоПеренестиВДокумент));
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ТекущаяСтрока", Строка);
		
		Если Меркурий_Параметры.МодальностьЗапрещена Тогда	
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""КонтрольИзмененийДанныхПользователемПослеВопроса"", ЭтаФорма, ПараметрыОбработчика), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,,""Контур.Меркурий"")");
		Иначе
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,,"Контур.EDI");		
			КонтрольИзмененийДанныхПользователемПослеВопроса(Ответ, ПараметрыОбработчика); 
		КонецЕсли;
	Иначе
		КоличествоПеренестиВДокумент = РасчитатьКоличествоПеренестиВДокументВСтрокеНаКлиенте(Строка);
		
		// Исключения выбора единственной строки
		
		Для Каждого Элемент Из ПодборПартийТоваров Цикл
			Элемент.КоличествоПеренестиВДокумент = 0;
			Элемент.АвтоРасчет = Истина;	
		КонецЦикла;
		
		Строка.КоличествоПеренестиВДокумент = КоличествоПеренестиВДокумент;
		Строка.АвтоРасчет 					= Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПанельХарактеристикиИсходныхПартийНаКлиенте(Показать)
	
	Элементы.ПанельХарактеристикиИсходныхПартий.Видимость = Показать;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодПроизводстваНаКлиенте(СтандартныйПериод, ДополнительныеПараметры) Экспорт
	
	Если СтандартныйПериод = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ДатаПроизводства  = СтандартныйПериод.ДатаНачала;
	ДатаПроизводства2 = СтандартныйПериод.ДатаОкончания;	
	
	ОбновитьТаблицуПодборПартийТоваровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСрокГодностиНаКлиенте(СтандартныйПериод, ДополнительныеПараметры) Экспорт
	
	Если СтандартныйПериод = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	СрокГодности  = СтандартныйПериод.ДатаНачала;
	СрокГодности2 = СтандартныйПериод.ДатаОкончания;	
	
	ОбновитьТаблицуПодборПартийТоваровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуПодборПартийТоваровНаКлиенте()
		
	ОбновитьТаблицуПодборПартийТоваровНаСервере();	
	
	УстановитьПриоритетнуюСтрокуТекущейНаКлиенте();		
			
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОчиститьПериодПроизводстваНажатие(Элемент)

	ДатаПроизводства  = Дата(1,1,1);
	ДатаПроизводства2 = Дата(1,1,1);	
	
	ОбновитьТаблицуПодборПартийТоваровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОчиститьПериодГодностиНажатие(Элемент)

	СрокГодности  = Дата(1,1,1);
	СрокГодности2 = Дата(1,1,1);
	
	ОбновитьТаблицуПодборПартийТоваровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Исх_GUIDОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	Исх_GUID = "";	
	
	Исх_GUIDПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Исх_НоменклатураОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Исх_Номенклатура 	= Неопределено;//ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Исх_productItemUUID = "";
	
	Исх_НоменклатураПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Исх_GUIDПриИзменении(Элемент)

	СформироватьПредставленияШапкиФормыНаСервере();
	ОбновитьТаблицуПодборПартийТоваровНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура Исх_НоменклатураПриИзменении(Элемент)

	СформироватьПредставленияШапкиФормыНаСервере();
	ОбновитьТаблицуПодборПартийТоваровНаКлиенте();	
	
КонецПроцедуры

//////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура КнопкаПеренестиВДокументНажатие(Элемент)

	ОбработатьВыборТекущейСтрокиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыборПериодПроизводстваНажатие(Элемент)
		
	СтандартныйПериод = Новый СтандартныйПериод;
	СтандартныйПериод.ДатаНачала 	= ДатаПроизводства;
	СтандартныйПериод.ДатаОкончания = ДатаПроизводства2;
	
	ДополнительныеПараметры = Новый Структура;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = СтандартныйПериод;
	
	Если Меркурий_Параметры.МодальностьЗапрещена Тогда 		
		ОповещениеОЗакрытии = Вычислить("Новый ОписаниеОповещения(
			|""ВыборПериодПроизводстваНаКлиенте"", 
			|ЭтаФорма, ДополнительныеПараметры)");		
		Диалог.Показать(ОповещениеОЗакрытии);		
	Иначе
		Если Диалог.Редактировать() Тогда 
		    СтандартныйПериод = Диалог.Период;
			ВыборПериодПроизводстваНаКлиенте(СтандартныйПериод, ДополнительныеПараметры);
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОбновитьСписокНажатие(Элемент)
	
	ОбновитьТаблицуПодборПартийТоваровНаКлиенте();
		
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыборПериодГодностиНажатие(Элемент)

	СтандартныйПериод = Новый СтандартныйПериод;
	СтандартныйПериод.ДатаНачала 	= СрокГодности;
	СтандартныйПериод.ДатаОкончания = СрокГодности2;
	
	ДополнительныеПараметры = Новый Структура;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = СтандартныйПериод;
	
	Если Меркурий_Параметры.МодальностьЗапрещена Тогда 		
		ОповещениеОЗакрытии = Вычислить("Новый ОписаниеОповещения(
			|""ВыборСрокГодностиНаКлиенте"", 
			|ЭтаФорма, ДополнительныеПараметры)");		
		Диалог.Показать(ОповещениеОЗакрытии);		
	Иначе
		Если Диалог.Редактировать() Тогда 
		    СтандартныйПериод = Диалог.Период;
			ВыборСрокГодностиНаКлиенте(СтандартныйПериод, ДополнительныеПараметры);
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПодборТоваровВсеДействияПодробно(Команда)
	
	Меркурий_ВыборПартии_Подробно = НЕ Меркурий_ВыборПартии_Подробно;
	
	Кнопка = Элементы.ПодборПартийТоваровПодбробно;	
	Кнопка.Пометка = Меркурий_ВыборПартии_Подробно;
	
	ПоказатьПанельХарактеристикиИсходныхПартийНаКлиенте(Меркурий_ВыборПартии_Подробно);
	
КонецПроцедуры

//////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбработатьЗакрытиеДочернейФормы(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПродуктУр3(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> Неопределено Тогда
		Исх_GUID = Результат.GUID;	
	КонецЕсли;
	
	Исх_GUIDПриИзменении(Неопределено);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбъектаМодально(ИмяФормы, ПараметрыФормы = Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено,РежимБлокирования = Неопределено)
	
	Если РежимБлокирования = Неопределено Тогда
		РежимБлокирования =	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	Если ВладелецОбработчика = Неопределено Тогда
		ВладелецОбработчика = ЭтаФорма;
	КонецЕсли;
	
	Если ИмяОбработчика = Неопределено Тогда
		ОписаниеОбработчика=	Неопределено;
	Иначе	
		Выполнить("ОписаниеОбработчика=	Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика)");
	КонецЕсли;
	
	Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецОбработчика, , , ,  ОписаниеОбработчика, РежимБлокирования)");
	
КонецПроцедуры

&НаСервере
Функция МодульОбъекта()
	
	Если ОбработкаОбъект  = Неопределено Тогда
		
		// Смысл такого подхода в том, чтобы сохранять переменные контекста модуля
		
		Если ПустаяСтрока(ОбработкаОбъектАдресВоВременномХранилище) Тогда
				
			ОбработкаОбъектАдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			ОбработкаОбъект.Инициализировать(ОсновнойМодуль());	
			
			ДанныеФормыВоВременномХранилищеЗаписать(); 
						
		Иначе
			
			ДанныеФормыВоВременномХранилище = ПолучитьИзВременногоХранилища(ОбработкаОбъектАдресВоВременномХранилище);
			ОбработкаОбъект = ДанныеФормыВоВременномХранилище.ОбработкаОбъект;
			
			Если ОбработкаОбъект = Неопределено Тогда
				ОбработкаОбъектАдресВоВременномХранилище = "";
				ОбработкаОбъект = МодульОбъекта();
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Процедура ДанныеФормыВоВременномХранилищеЗаписать()
	
	Если ОбработкаОбъект <> Неопределено Тогда
	
		// 8.3.10 - просто ОбработкуОбъект в ВХ поместить нельзя (в 8.2.19 - можно)
		
		ДанныеФормыВоВременномХранилище = Новый Структура;
		ДанныеФормыВоВременномХранилище.Вставить("ОбработкаОбъект", ОбработкаОбъект);	

		ПоместитьВоВременноеХранилище(ДанныеФормыВоВременномХранилище, ОбработкаОбъектАдресВоВременномХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОсновнойМодуль()
	Возврат ПолучитьИзВременногоХранилища(Меркурий_Параметры.АдресХранилища).ОбработкаОбъект;
КонецФункции

&НаСервере
Процедура ОбновитьТаблицуПодборПартийТоваровНаСервере()
	
	ПодборПартийТоваров.Очистить();
	
	Если ПустаяСтрока(ТаблицаОстатковАдресВоВременномХранилище) Тогда
		Возврат;	
	КонецЕсли;
	
	ТаблицаОстатков = ПолучитьИзВременногоХранилища(ТаблицаОстатковАдресВоВременномХранилище);	
		
	ПартииТоваров = МодульОбъекта().ФильтроватьТаблицуОстатков(
		ХозяйствующийСубъектEDI.GUID,
		Количество,
		Исх_unitUUID,
		Исх_GUID,
		ТаблицаОстатков,
		ДатаПроизводства,
		СрокГодности,
		Исх_Номенклатура,
		ДатаПроизводства2,
		СрокГодности2,
		Скоропортящаяся);			
		
	// Поиск без отбора по: Количество, ДатаПроизводства, СрокГодности, Скоропортящаяся	
	// выбор отобраных партий - непредполагается
		
	ПартииТоваровГибкийПоиск = МодульОбъекта().ФильтроватьТаблицуОстатков(
		ХозяйствующийСубъектEDI.GUID, 
		// Использование - неопределено (непредполагается функцией).
		// -1 для совместимости с ЗначениеЗаполнено()
		-1,
		Исх_unitUUID,
		Исх_GUID,
		ТаблицаОстатков,,,
		Исх_Номенклатура);		
		
	ЗаполнитьПодборПартийТоваровНаСервере(ПартииТоваров, ПартииТоваровГибкийПоиск);

	// Для простоты переноса на УФ, представления в таблице делаем не через оформелние строк
	
	СформироватьПредставленияПодборПартийТоваровНаСервере();	
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодборПартийТоваровНаСервере(ПартииТоваров, ПартииТоваровГибкийПоиск = Неопределено)
			
	КЧ = Новый КвалификаторыЧисла(15,3, ДопустимыйЗнак.Неотрицательный);	
	
	ПартииТоваров.Колонки.Добавить("АвтоРасчет"				 	 , Новый ОписаниеТипов("Булево"));
	ПартииТоваров.Колонки.Добавить("Приоритет"				 	 , Новый ОписаниеТипов("Число"));
	ПартииТоваров.Колонки.Добавить("ГибкийПоиск"				 , Новый ОписаниеТипов("Булево"));
	ПартииТоваров.Колонки.Добавить("ГибкийПоискСписокРеквизитов" , Новый ОписаниеТипов("Строка"));
	ПартииТоваров.Колонки.Добавить("Действие"			 		 , Новый ОписаниеТипов("Строка"));
	ПартииТоваров.Колонки.Добавить("ПеренестиВДокумент"			 , Новый ОписаниеТипов("Булево"));	
	ПартииТоваров.Колонки.Добавить("КоличествоДоступно"			 , Новый ОписаниеТипов("Число",,,КЧ));
	ПартииТоваров.Колонки.Добавить("КоличествоПеренестиВДокумент", Новый ОписаниеТипов("Число",,,КЧ));
	
	НизкийПриоритет = 999999999999;
	
	// Расчитаем "Доступно"
	
	Для Каждого Строка Из ПартииТоваров Цикл
		Строка.АвтоРасчет      	  = Истина;
		Строка.КоличествоДоступно = Строка.Остаток - Строка.КоличествоИспользовано;	
		Строка.Приоритет 		  = НизкийПриоритет;	
	КонецЦикла;
	
	// Предварительно, что бы результаты поиска были отсортированы 
	
	ПартииТоваров.Сортировать("ДатаВыпуска Возр");
	
	// Приоритеты
	//
	// 1. Совпадает (ДатаВыпуска, ДатаВыпуска2, СрокГодности, СрокГодности2, Количество)
	// 2. Совпадает (ДатаВыпуска, ДатаВыпуска2, СрокГодности, СрокГодности2)
	
	ВариантПоискаПрототип = Новый Структура;
	Если ЗначениеЗаполнено(ДатаПроизводства) Тогда 
		ВариантПоискаПрототип.Вставить("ДатаВыпуска", ДатаПроизводства);
		ВариантПоискаПрототип.Вставить("ДатаВыпуска2", ДатаПроизводства2);
	КонецЕсли;
	Если ЗначениеЗаполнено(СрокГодности) Тогда 
		ВариантПоискаПрототип.Вставить("ГоденДо", СрокГодности);
		ВариантПоискаПрототип.Вставить("ГоденДо2", СрокГодности2);
	КонецЕсли;
	
	// Копировать структуру
	
	ВариантПоиска2 = Новый Структура;
	ВариантПоиска1 = Новый Структура;	
	Для Каждого Элемент Из ВариантПоискаПрототип Цикл
		ВариантПоиска1.Вставить(Элемент.Ключ, Элемент.Значение);
		ВариантПоиска2.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;	
	ВариантПоиска1.Вставить("КоличествоДоступно", Количество);
	
	// Самый высокий приоритет - 1	
	
	СчПриоритет = 0;
	
	// Приоритет 2
	
	СтрокиПриоритета = ПартииТоваров.НайтиСтроки(ВариантПоиска2); 	
	Для Каждого ЭлементПартииТоваров Из СтрокиПриоритета Цикл
		СчПриоритет = СчПриоритет + 1;
		ЭлементПартииТоваров.Приоритет = СчПриоритет;		
	КонецЦикла;	
	
	// Приоритет 1
	
	СтрокиПриоритета = ПартииТоваров.НайтиСтроки(ВариантПоиска1); 	
	Для Каждого ЭлементПартииТоваров Из СтрокиПриоритета Цикл
		СчПриоритет = СчПриоритет + 1;
		ЭлементПартииТоваров.Приоритет = СчПриоритет;		
	КонецЦикла;
			
	// ПартииТоваровГибкийПоиск - содержит результат поиска партий с более мягким отбором,
	// выбор отобраных партий - непредполагается
	
	Если ПартииТоваровГибкийПоиск <> Неопределено Тогда
			
		// Удалим дубли строка
		
		ПартииТоваровЗаписи = ПартииТоваров.Скопировать(, "НомерЗаписи");
		ПартииТоваровЗаписи.Свернуть("НомерЗаписи");
		
		Для Каждого Запись Из ПартииТоваровЗаписи Цикл
			ДублиПартий = ПартииТоваровГибкийПоиск.НайтиСтроки(
				Новый Структура("НомерЗаписи", Запись.НомерЗаписи));
			Для Каждого ЭлементПартииТоваровГибкийПоиск Из ДублиПартий Цикл
				ПартииТоваровГибкийПоиск.Удалить(ЭлементПартииТоваровГибкийПоиск);			
			КонецЦикла;
		КонецЦикла;
		
		// Заполним "ПодборПартийТоваров" результатми гибкого поиска
		
		Для Каждого ЭлементПартииТоваровГибкийПоиск Из ПартииТоваровГибкийПоиск Цикл
			
			НоваяСтрока = ПартииТоваров.Добавить();
				
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементПартииТоваровГибкийПоиск);
			
			// 
			
			НоваяСтрока.АвтоРасчет		   = Истина;
			НоваяСтрока.Приоритет 		   = НизкийПриоритет;
			НоваяСтрока.ГибкийПоиск 	   = Истина;
			НоваяСтрока.КоличествоДоступно = НоваяСтрока.Остаток - НоваяСтрока.КоличествоИспользовано;
			
			// "ГибкийПоискСписокРеквизитов" - реквизиты по которым осуществился гибкий поиск
			
			ГибкийПоискСписокРеквизитов = Новый Массив;
			
			Если ЗначениеЗаполнено(ДатаПроизводства) Тогда
				Если НЕ МодульОбъекта().ДатаТовараПоДокументуУдовлетворяетДатеПартииМеркурий(
						ДатаПроизводства,
						ДатаПроизводства2,
						НоваяСтрока.ДатаВыпуска,
						НоваяСтрока.ДатаВыпуска2,
						Скоропортящаяся) Тогда
					ГибкийПоискСписокРеквизитов.Добавить("ДатаВыпуска");
					ГибкийПоискСписокРеквизитов.Добавить("ДатаВыпуска2");
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СрокГодности) Тогда
				Если НЕ МодульОбъекта().ДатаТовараПоДокументуУдовлетворяетДатеПартииМеркурий(
						СрокГодности,
						СрокГодности2,
						НоваяСтрока.ГоденДо,
						НоваяСтрока.ГоденДо2,
						Скоропортящаяся) Тогда
					ГибкийПоискСписокРеквизитов.Добавить("ГоденДо");
					ГибкийПоискСписокРеквизитов.Добавить("ГоденДо2");
				КонецЕсли;
			КонецЕсли;
			
			// Колонка "Скоропортящаяся" - По умолчанию скрыта, 
			// если будет добавлена в таблицу, это должно работать
			
			Если ЗначениеЗаполнено(Скоропортящаяся) Тогда
				Если Скоропортящаяся <> НоваяСтрока.Скоропортящаяся Тогда
					ГибкийПоискСписокРеквизитов.Добавить("Скоропортящаяся");
				КонецЕсли;
			КонецЕсли;
			
			Если Количество > НоваяСтрока.КоличествоДоступно Тогда
				ГибкийПоискСписокРеквизитов.Добавить("КоличествоДоступноПредставление");
			КонецЕсли;			
			
			НоваяСтрока.ГибкийПоискСписокРеквизитов = СтроковыеФункцииКлиентСервер.
				ПолучитьСтрокуИзМассиваПодстрок(ГибкийПоискСписокРеквизитов);	
				
			Если нРег(НоваяСтрока.ГибкийПоискСписокРеквизитов) = НРег("КоличествоДоступноПредставление")
				И НоваяСтрока.КоличествоДоступно <> 0 Тогда
				// Разрешаем выбор если не хватает количества
				НоваяСтрока.ГибкийПоиск = Ложь;	
			КонецЕсли;
								
		КонецЦикла;
		
	КонецЕсли;
	
	//
	
	ПартииТоваров.Сортировать("ГибкийПоиск Возр, ДатаВыпуска Возр");
	
	// Чтобы было меньще проблем со структурой таблиц
	
	Для Каждого Строка Из ПартииТоваров Цикл
		ЗаполнитьЗначенияСвойств(ПодборПартийТоваров.Добавить(), Строка);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставленияШапкиФормыНаСервере(Знач Параметры = Неопределено)
	
	// Для совместимости вызова без параметров
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;	
	КонецЕсли;
	
	// Заголовок
	
	ЭтаФорма.Заголовок = "Выбор исходных партий:";	
	Если Параметры.Свойство("ТипСообщения") Тогда
		ЭтаФорма.Заголовок  = ЭтаФорма.Заголовок + " " + Параметры.ТипСообщения;	
	КонецЕсли;	
	Если Параметры.Свойство("ДокументНомер") Тогда
		ЭтаФорма.Заголовок  = ЭтаФорма.Заголовок + " №" + Параметры.ДокументНомер;	
	КонецЕсли;	
	Если Параметры.Свойство("ДокументДата") Тогда
		ЭтаФорма.Заголовок  = ЭтаФорма.Заголовок + " от " + Параметры.ДокументДата;	
	КонецЕсли;
	
	// Хозяйствующий субъект
	
	Если Параметры.Свойство("ХозяйствующийСубъект1С")
		И Параметры.Свойство("ХозяйствующийСубъектEDI") Тогда
		ХозяйствующийСубъектПредставление = ПредставлениеОбъектаМеркурий(Параметры.ХозяйствующийСубъект1С, 
			Параметры.ХозяйствующийСубъектEDI.GUID);	
	КонецЕсли;
		
	// Площадка
	
	Если Параметры.Свойство("Площадка1С")
		И Параметры.Свойство("ПлощадкаEDI") Тогда		
		ПлощадкаПредставление = ПредставлениеОбъектаМеркурий(Параметры.Площадка1С, Параметры.ПлощадкаEDI.GUID);	
	КонецЕсли;
	
	// Продукт Ур. 3
	
	Если НЕ ПустаяСтрока(Исх_GUID) Тогда
		Исх_GUIDПредставление = мКешФормы.Представления[Исх_GUID];
		Если ПустаяСтрока(Исх_GUIDПредставление) Тогда
			ЭлементТаблицыПродукии = МодульОбъекта().ТаблицаПродукцииВетис().Найти(Исх_GUID,"subProductGUID");
			Если ЭлементТаблицыПродукии <> Неопределено Тогда					
				Исх_GUIDПредставление = ПредставлениеОбъектаМеркурий(
					Строка(ЭлементТаблицыПродукии.Код) + " " + Строка(ЭлементТаблицыПродукии.НаименованиеВидаПродукции),
					Исх_GUID, "GUID");
			КонецЕсли;
				
		КонецЕсли;
		мКешФормы.Представления.Вставить(Исх_GUID, Исх_GUIDПредставление);
	Иначе
		Исх_GUIDПредставление = "";	
	КонецЕсли;
	
	// Продукт Ур. 4
	
	Если НЕ ПустаяСтрока(Исх_productItemUUID) Тогда
		Исх_НоменклатураПредставление = ПредставлениеОбъектаМеркурий(Исх_Номенклатура, Исх_productItemUUID, "UUID");
	Иначе
		Исх_НоменклатураПредставление = "";	
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставленияПодборПартийТоваровНаСервере()
	
	ФорматКоличеств = "ЧЦ=15; ЧДЦ=3; ЧН=0,000";
	
	КлассификаторЕдиницИзмеренияМеркурий  = МодульОбъекта().ПолучитьКлассификаторЕдиницИзмеренияМеркурий();
	КлассификаторУпаковокМеркурий 		  = МодульОбъекта().ПолучитьКлассификаторУпаковокМеркурий();
	
	ДанныеФормыВоВременномХранилищеЗаписать();	
	
	Для Каждого Строка Из ПодборПартийТоваров Цикл
		
		// Доступно
		
		ВсегоОстаток = "";
		Если Строка.КоличествоДоступно <> Строка.Остаток Тогда
			ВсегоОстаток = " (из " + Формат(Строка.Остаток, ФорматКоличеств) + ")";	
		КонецЕсли;			
		Строка.КоличествоДоступноПредставление = Формат(Строка.КоличествоДоступно, ФорматКоличеств) 
			+ ВсегоОстаток;
			
		Строка.СкоропортящаясяПредставление = Формат(Строка.Скоропортящаяся, "БЛ=Нет; БИ=Да");
		
		// Единица измерения	
			
		Если НЕ ПустаяСтрока(Строка.unitUUID) Тогда 
			Строка.ЕдиницаИзмеренияПредставление = мКешФормы.Представления[Строка.unitUUID];
			Если ПустаяСтрока(Строка.ЕдиницаИзмеренияПредставление) Тогда
				ЕдиницаИзменения = КлассификаторЕдиницИзмеренияМеркурий.Найти(Строка.unitUUID, "UUID");
				Если ЕдиницаИзменения <> Неопределено Тогда
					Строка.ЕдиницаИзмеренияПредставление = ПредставлениеОбъектаМеркурий(
						ЕдиницаИзменения.Наименование, Строка.unitUUID, "UUID");
					мКешФормы.Представления.Вставить(Строка.unitUUID, Строка.ЕдиницаИзмеренияПредставление);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		// Единица измерения упаковок
		
		Если НЕ ПустаяСтрока(Строка.ЕдиницаИзмеренияУпаковокUUID) Тогда 
			Строка.ЕдиницаИзмеренияУпаковокПредставление = мКешФормы.Представления[Строка.ЕдиницаИзмеренияУпаковокUUID];
			Если ПустаяСтрока(Строка.ЕдиницаИзмеренияУпаковокПредставление) Тогда
				ЕдиницаИзмененияУпаковок = КлассификаторУпаковокМеркурий.Найти(Строка.ЕдиницаИзмеренияУпаковокUUID, "UUID");
				Если ЕдиницаИзмененияУпаковок <> Неопределено Тогда
					Строка.ЕдиницаИзмеренияУпаковокПредставление = ПредставлениеОбъектаМеркурий(
						ЕдиницаИзмененияУпаковок.Наименование, Строка.ЕдиницаИзмеренияУпаковокUUID, "UUID");
					мКешФормы.Представления.Вставить(Строка.ЕдиницаИзмеренияУпаковокUUID, Строка.ЕдиницаИзмеренияУпаковокПредставление);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставленияТекущиеДанныеНаКлиенте()
	
	ТекущиеДанные = Элементы.ПодборПартийТоваров.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	НуженВызовСервера = Ложь;
	
	// Страна
	
	Если НЕ ПустаяСтрока(ТекущиеДанные.СтранаUUID) Тогда
		ТекущиеДанныеСтранаПредставление = мКешФормы.Представления[ТекущиеДанные.СтранаUUID];
		Если ПустаяСтрока(ТекущиеДанныеСтранаПредставление) Тогда
			НуженВызовСервера = Истина;	
		КонецЕсли;
	Иначе
		ТекущиеДанныеСтранаПредставление = ""; 	
	КонецЕсли;
	
	// Представление Производитель - такое себе (в привязке к информационной базе)
	
	Если НЕ ПустаяСтрока(ТекущиеДанные.ProducerGUID) Тогда
		ТекущиеДанныеПроизводительПредставление = мКешФормы.Представления[ТекущиеДанные.ProducerGUID];
		Если ПустаяСтрока(ТекущиеДанныеПроизводительПредставление) тогда
			НуженВызовСервера = Истина;	
		КонецЕсли;
	Иначе
		ТекущиеДанныеПроизводительПредставление = "";	
	КонецЕсли;		
	
	// Ур.3 SubProductGuid
	
	Если НЕ ПустаяСтрока(ТекущиеДанные.SubProductGuid) Тогда
		ТекущиеДанныеПродуктУр3Представление = мКешФормы.Представления[ТекущиеДанные.SubProductGuid];
		Если ПустаяСтрока(ТекущиеДанныеПродуктУр3Представление) тогда
			НуженВызовСервера = Истина;	
		КонецЕсли
	Иначе
		ТекущиеДанныеПродуктУр3Представление = "";	
	КонецЕсли;	
	
	// Ур.4 ProductItemUUID
	
	Если НЕ ПустаяСтрока(ТекущиеДанные.ProductItemUUID) Тогда
		ТекущиеДанныеПродуктУр4Представление = ПредставлениеОбъектаМеркурий(
			ТекущиеДанные.Номенклатура, ТекущиеДанные.ProductItemUUID, "UUID");
	Иначе
		ТекущиеДанныеПродуктУр4Представление = "";		
	КонецЕсли;	
	
	// Представления UUID_Партии, GUID_Партии - наверно, вообще не существуют как представления	
	
	ТекущиеДанныеUUID_Партии     = ТекущиеДанные.UUID_Партии;
	ТекущиеДанныеGUID_Партии     = ТекущиеДанные.GUID_Партии;
	
	// Вызов сервера (если нужно)
	
	Если НуженВызовСервера Тогда
		СформироватьПредставленияТекущиеДанныеНаСервере(Элементы.ПодборПартийТоваров.ТекущаяСтрока);	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставленияТекущиеДанныеНаСервере(ТекущаяСтрока)
	
	ТекущиеДанные = ПодборПартийТоваров.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	// Страна
	
	Если ПустаяСтрока(ТекущиеДанныеСтранаПредставление)
		И НЕ ПустаяСтрока(ТекущиеДанные.СтранаUUID) Тогда
		
		КлассификаторСтранМеркурий = МодульОбъекта().ПолучитьКлассификаторСтранМеркурий();
		ЭлементКлассификатора 	   = КлассификаторСтранМеркурий.Найти(ТекущиеДанные.СтранаUUID, "UUID");
		
		Если ЭлементКлассификатора <> Неопределено Тогда	
			ТекущиеДанныеСтранаПредставление = ПредставлениеОбъектаМеркурий(ЭлементКлассификатора.Наименование, 
				ТекущиеДанные.СтранаUUID, "UUID");
			мКешФормы.Представления.Вставить(ТекущиеДанные.СтранаUUID, ТекущиеДанныеСтранаПредставление);			
		КонецЕсли;
		
	КонецЕсли;
	
	// Представление Производитель - такое себе (в привязке к информационной базе)	
	
	Если ПустаяСтрока(ТекущиеДанныеПроизводительПредставление)
		И НЕ ПустаяСтрока(ТекущиеДанные.ProducerGUID) Тогда
		
		Производитель = МодульОбъекта().КонвертироватьЗначениеМеркурийв1C(ТекущиеДанные.ProducerGUID,,"МеркурийПлощадка");	
		ТекущиеДанныеПроизводительПредставление = ПредставлениеОбъектаМеркурий(Производитель, ТекущиеДанные.ProducerGUID);	
		мКешФормы.Представления.Вставить(ТекущиеДанные.ProducerGUID, ТекущиеДанныеПроизводительПредставление);			
		
	КонецЕсли;
	
	//
		
	Если ПустаяСтрока(ТекущиеДанныеПродуктУр3Представление)
		И ЗначениеЗаполнено(ТекущиеДанные.subProductGuid) Тогда
		
		ЭлементТаблицыПродукии = МодульОбъекта().ТаблицаПродукцииВетис().Найти(ТекущиеДанные.subProductGuid, "subProductGUID");
		Если ЭлементТаблицыПродукии <> Неопределено Тогда					
			ТекущиеДанныеПродуктУр3Представление = ПредставлениеОбъектаМеркурий(Строка(ЭлементТаблицыПродукии.Код) + " " + 
				Строка(ЭлементТаблицыПродукии.НаименованиеВидаПродукции), ТекущиеДанные.subProductGuid, "GUID");
		КонецЕсли;
		мКешФормы.Представления.Вставить(ТекущиеДанные.subProductGuid, ТекущиеДанныеПродуктУр3Представление);	
		
	КонецЕсли;	

	ДанныеФормыВоВременномХранилищеЗаписать();
			
	// Представления ProductItemUUID, SubProductGuid - по человечески не получить
	// Представления UUID_Партии, GUID_Партии - наверно, вообще не существуют как представления 
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовУправленияНаСервере()
			
КонецПроцедуры

&НаСервере
Процедура ПеречитатьЭлементИсходнойПродукииНаСервере(ЭлементИсходнойПродукии)
	
	ЭлементИсходнойПродукии.Свойство("Количество"		, Исх_Количество);	
	ЭлементИсходнойПродукии.Свойство("unitUUID"			, Исх_unitUUID);
	ЭлементИсходнойПродукии.Свойство("GUID"				, Исх_GUID);
	ЭлементИсходнойПродукии.Свойство("productItemUUID"	, Исх_productItemUUID);
	ЭлементИсходнойПродукии.Свойство("ДатаПроизводства"	, Исх_ДатаПроизводства);
	ЭлементИсходнойПродукии.Свойство("СрокГодности"		, Исх_СрокГодности);
	ЭлементИсходнойПродукии.Свойство("Номенклатура"		, Исх_Номенклатура);
	ЭлементИсходнойПродукии.Свойство("ДатаПроизводства2", Исх_ДатаПроизводства2);
	ЭлементИсходнойПродукии.Свойство("СрокГодности2"	, Исх_СрокГодности2);
	ЭлементИсходнойПродукии.Свойство("Скоропортящаяся"	, Исх_Скоропортящаяся);
			
	// Данные элементов управления
	
	ЭлементИсходнойПродукии.Свойство("Количество"		, Количество);
	ЭлементИсходнойПродукии.Свойство("ДатаПроизводства"	, ДатаПроизводства);
	ЭлементИсходнойПродукии.Свойство("СрокГодности"		, СрокГодности);
	ЭлементИсходнойПродукии.Свойство("ДатаПроизводства2", ДатаПроизводства2);
	ЭлементИсходнойПродукии.Свойство("СрокГодности2"	, СрокГодности2);
	ЭлементИсходнойПродукии.Свойство("Скоропортящаяся"	, Скоропортящаяся);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораУровень4НаСервере(ХозяйствующийСубъектEDI, Исх_GUID, ТаблицаОстатковАдресВоВременномХранилище)
	
	Результат = Новый СписокЗначений;
	
	Если ПустаяСтрока(ТаблицаОстатковАдресВоВременномХранилище) Тогда
		Возврат Результат;	
	КонецЕсли;	
	
	ТаблицаОстатков = ПолучитьИзВременногоХранилища(ТаблицаОстатковАдресВоВременномХранилище);
	
	ПартииТоваров = МодульОбъекта().ФильтроватьТаблицуОстатков(
		ХозяйствующийСубъектEDI.GUID, 
		-1,
		Неопределено,
		Исх_GUID,
		ТаблицаОстатков,,,
		Неопределено);	
		
	ПартииТоваров.Свернуть("Наименование, Номенклатура, productItemUUID, unitUUID, Скоропортящаяся, ProducerGUID");	
	
	СтрокиКУдалению = ПартииТоваров.НайтиСтроки(Новый Структура("productItemUUID", ""));	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ПартииТоваров.Удалить(Строка);	
	КонецЦикла;
	
	КлассификаторЕдиницИзмеренияМеркурий  = МодульОбъекта().ПолучитьКлассификаторЕдиницИзмеренияМеркурий();
	
	Для Каждого Строка Из ПартииТоваров Цикл
		
		Значение = Новый Структура("Номенклатура, ProducerGUID, productItemUUID, Скоропортящаяся");
		
		ЗаполнитьЗначенияСвойств(Значение, Строка);
			
		Представление 	   = "";
		НаименованиеТовара = "";		
		СкоропортящаясяПредставление  = "";
		ПроизводительПредставление 	  = "";
		ЕдиницаИзмеренияПредставление = "";
		
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			НаименованиеТовара = Строка(Строка.Номенклатура); 	
		ИначеЕсли НЕ ПустаяСтрока(Строка.Наименование) Тогда
			НаименованиеТовара = Строка(Строка.Наименование);	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Строка.unitUUID) Тогда 
			ЕдиницаИзменения = КлассификаторЕдиницИзмеренияМеркурий.Найти(Строка.unitUUID, "UUID");
			Если ЕдиницаИзменения <> Неопределено Тогда			
				ЕдиницаИзмеренияПредставление = СокрЛП(ЕдиницаИзменения.Наименование);	
			КонецЕсли;
		КонецЕсли;		
		
		Если НЕ ПустаяСтрока(Строка.ProducerGUID) Тогда			
			Производитель = МодульОбъекта().КонвертироватьЗначениеМеркурийв1C(Строка.ProducerGUID,,"МеркурийПлощадка");	
			ПроизводительПредставление = Строка(Производитель);			
		КонецЕсли;		
		
		Если Строка.Скоропортящаяся Тогда
			СкоропортящаясяПредставление = "Сокропорт.";	
		КонецЕсли;
		
     	Представление = НаименованиеТовара;
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияПредставление) Тогда
			Представление = Представление + "; " + ЕдиницаИзмеренияПредставление;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СкоропортящаясяПредставление) Тогда
			Представление = Представление + "; " + СкоропортящаясяПредставление;	
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ПроизводительПредставление) Тогда
			Представление = Представление + "; " + ПроизводительПредставление;	
		КонецЕсли;		
		
		Результат.Добавить(Значение, Представление);		
		
	КонецЦикла;
	
	ДанныеФормыВоВременномХранилищеЗаписать();
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеОбъектаМеркурий(Объект, Идентификатор, ТипИдентификатора = "GUID")
	
	Шаблон = "%1, %2: %3";
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, 
		Строка(Объект), Строка(ТипИдентификатора), Строка(Идентификатор)); 
	
КонецФункции

&НаКлиенте
Функция РасчитатьКоличествоПеренестиВДокументВСтрокеНаКлиенте(Строка)
	
	Возврат Мин(Количество, Строка.КоличествоДоступно);
			
КонецФункции

&НаКлиенте
Функция ЭлеменКоллекцииИсходнойПродукииНаКлиенте() Экспорт
	
	ЭлеменКоллекцииИсходнойПродукии = Новый Структура;	
	ЭлеменКоллекцииИсходнойПродукии.Вставить("Количество");
	ЭлеменКоллекцииИсходнойПродукии.Вставить("unitUUID");
	ЭлеменКоллекцииИсходнойПродукии.Вставить("GUID");
	ЭлеменКоллекцииИсходнойПродукии.Вставить("productItemUUID");
	ЭлеменКоллекцииИсходнойПродукии.Вставить("ДатаПроизводства");
	ЭлеменКоллекцииИсходнойПродукии.Вставить("СрокГодности");
	ЭлеменКоллекцииИсходнойПродукии.Вставить("Номенклатура");
	ЭлеменКоллекцииИсходнойПродукии.Вставить("ДатаПроизводства2");
	ЭлеменКоллекцииИсходнойПродукии.Вставить("СрокГодности2");
	ЭлеменКоллекцииИсходнойПродукии.Вставить("Скоропортящаяся");

	Возврат ЭлеменКоллекцииИсходнойПродукии;
	
КонецФункции

&НаКлиенте
Процедура КонтрольИзмененийДанныхПользователемПослеВопроса(Ответ, ПараметрыОбработчика) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		// Установка текущей строки в рамках события активации строки - невозможна
		ПодключитьОбработчикОжидания("УстановитьТекущейСтрокуНеАвторасчет", 0.1, Истина);
		Возврат;		
	КонецЕсли;
	
	Строка = ПараметрыОбработчика.ТекущаяСтрока;
	
	КоличествоПеренестиВДокумент = РасчитатьКоличествоПеренестиВДокументВСтрокеНаКлиенте(Строка);
	
	// Исключения выбора единственной строки
	
	Для Каждого Элемент Из ПодборПартийТоваров Цикл
		Элемент.КоличествоПеренестиВДокумент = 0;
		Элемент.АвтоРасчет = Истина;	
	КонецЦикла;
	
	Строка.КоличествоПеренестиВДокумент = КоличествоПеренестиВДокумент;
	Строка.АвтоРасчет 					= Истина;
			
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущейСтрокуНеАвторасчет()
	
	МассивСтрок = ПодборПартийТоваров.НайтиСтроки(Новый Структура("АвтоРасчет", Ложь));
	Если МассивСтрок.Количество() <> 0 Тогда	
		Элементы.ПодборПартийТоваров.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры