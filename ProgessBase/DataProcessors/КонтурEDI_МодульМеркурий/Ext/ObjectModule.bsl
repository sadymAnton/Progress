Перем ОсновнойМодуль Экспорт;
Перем РеквизитыПересчета Экспорт;
Перем ДанныеОтладки Экспорт;
Перем ВнешнееХранилище Экспорт;
Перем КорневаяФабрика;
Перем КорневаяФабрика20;
Перем ТаблицаПродукцииВетис;
Перем КлассификаторЕдиницИзмеренияМеркурий;
Перем КлассификаторУпаковокМеркурий;
Перем КлассификаторЦелейМеркурий;
Перем КлассификаторСтранМеркурий;
Перем КлассификаторРегионовМеркурий;
Перем ОКОПФ;
Перем ИспользуемыйТаймаут;
Перем СмещениеЧасовОтМосквы;

Перем ПакетныйРежим;
Перем ИспользуемыеПрокси Экспорт;
Перем НулевойGUID Экспорт;
Перем КэшУчетныхЗаписей Экспорт; //самоинициализирующаяся через КэшУчетныхЗаписей()
Перем ОперативныйСкладскойЖурнал Экспорт;

Перем ВыводитьСкоростьРаботыСервераМеркурий Экспорт;
Перем ТаблицаОстатковМеркурий Экспорт;
Перем ТаблицаОстатковМеркурийАктуальность Экспорт;

Перем ГенераторQRКода Экспорт;
Перем ДоступыПользователя Экспорт;
Перем ИспользуемаяВерсияAPI Экспорт;
Перем ИспользуетсяРазграничениеПрав Экспорт;

Перем СписокВыбораУсловийХранения Экспорт;
Перем СписокВыбораТипаТранспорта Экспорт;
Перем СписокФормВСД Экспорт;

//Часто используемые при отладке ------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------

Процедура МеркурийОбновитьСтатусыТранзакций() Экспорт
	
	//возьмем все сообщения со статусом Обрабатывается
	
	Запрос = ОсновнойМодуль.ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Значение КАК applicationId,
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка КАК СообщениеСсылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
	|ГДЕ
	|	(КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""applicationId""
	|			ИЛИ КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""Обрабатывается"")";
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	КонтурEDI_Сообщения.Ссылка,
	//|	КонтурEDI_Сообщения.Код
	//|ИЗ
	//|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	//|ГДЕ
	//|	КонтурEDI_Сообщения.Статус = ""Обрабатывается""
	//|	И НЕ КонтурEDI_Сообщения.Архив";
	//
	//Запрос.УстановитьПараметр("ПартнерМеркурий",	ПартнерМеркурий());
	//
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	й=0;
	ВсегоЗаявок = Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		й=й+1;
		ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю результаты по заявке "+й+"/"+ВсегоЗаявок+" "+Выборка.applicationId);		
		//нам следует сконвертировать Организицию и подложить её в качестве IssuerID
		ТекСообщениеСсылка = Выборка.СообщениеСсылка;
		ИсходноеСообщение = ОсновнойМодуль.ПрочитатьСообщение(ТекСообщениеСсылка);
		ПодходящиеПараметры = ВыбратьПараметрыПодключенияДляТранзакции(ТекСообщениеСсылка.ТипСообщения,Новый Структура("Сообщение",ИсходноеСообщение));
		
		ПроверитьОбновленияСтатусаЗаявки(Выборка.applicationId,ПодходящиеПараметры);
		
	КонецЦикла;
	
	ПровереныВСД = ПолучитьКонстантуEDI("М_ПровереныВхВСД");
	ИнтервалПроверкиВСД = ПолучитьКонстантуEDI("М_ИнтервалПроверкиВходящихЭЛВСД");
	Если ИнтервалПроверкиВСД=Неопределено Тогда
		ИнтервалПроверкиВСД = 5; //минут
	КонецЕсли;
	
	Если ПровереныВСД=Неопределено 
		ИЛИ ПровереныВСД+60*ИнтервалПроверкиВСД < ТекущаяДата() Тогда  //пришло время проверить
		
		//Теперь сверим список входящих транзакций к обработке
		СписокПлощадокПоКоторымПолучаемВходящиеВСД = ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийПлощадка", Неопределено);
		СписокПлощадокПоКоторымПолучаемВходящиеВСД.Свернуть("GUID,Наш");
		СписокПлощадокПоКоторымПолучаемВходящиеВСД = СписокПлощадокПоКоторымПолучаемВходящиеВСД.НайтиСтроки(Новый Структура("Наш",Истина));
		
		Для Каждого НашаПлощадка Из СписокПлощадокПоКоторымПолучаемВходящиеВСД Цикл
			GUIDПлощадки = НашаПлощадка.GUID;
			ПроверитьСписокНеобработанныхВходящихВСД(GUIDПлощадки);
		КонецЦикла;
		ОсновнойМодуль.УстановитьКонстантуEDI("М_ПровереныВхВСД",ТекущаяДата());
	Иначе
		//еще не пришло время их проверять
	КонецЕсли;
	
КонецПроцедуры

//Часто используемые при отладке ------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------

Процедура СформироватьСписокДокументов_ДляОтправкиМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц) Экспорт
	
	МассивТиповСообщений = ЗапросСКэшемПартнеров.Параметры.ТипыСообщений;
	
	Если ТипЗнч(ЗапросСКэшемПартнеров.Параметры.ТипыСообщений) <> Тип("Массив") ИЛИ МассивТиповСообщений.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_REC")
		ИЛИ ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_INC")  
		ИЛИ ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_DES")  
		ИЛИ ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_MOV")  
		ИЛИ ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_PRD") Тогда
		//имеет смысл шевелиться
	Иначе
		Возврат;
	КонецЕсли;

	//Для просмотра содержимого временных таблиц можно пользоваться:
	//<пример>
	//ОсновнойМодуль.ПросмотретьВременнуюТаблицуЗапроса(ЗапросСКэшемПартнеров,"ВТ_ОтгрузкиПоднадзорногоТовара")
	
	//Проверим что Партнер Меркурий выбран в отборе т.к. возможно пользователь не хочет видеть меркурианские задачи
	ПартнерМеркурийВыбранВОтборе = Ложь;
	МассивПартнеров = ЗапросСКэшемПартнеров.Параметры.Партнеры;
	Для Каждого ВыбранныйПартнер Из МассивПартнеров Цикл
		Если ВыбранныйПартнер.Наименование = "Меркурий" Тогда 
			ПартнерМеркурийВыбранВОтборе = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПартнерМеркурийВыбранВОтборе = Ложь ИЛИ ВнешнееХранилище Тогда //не работаем на ВХ
		Возврат;
	КонецЕсли;
	
	//Определим, есть ли подключенный Партнер Меркурий
	ПартнерМеркурий = ПартнерМеркурий();
	Если ПартнерМеркурий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//интересно, зачем это тут когда-то стояло? пока что оставлю 
	//ЗапросСКэшемПартнеров.Параметры.ТребуемыеДействия.Добавить("Обрабатывается");
	//ЗапросСКэшемПартнеров.Параметры.ТребуемыеДействия.Добавить("Переотправить транзакцию");
	
	Если ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_REC")
		ИЛИ ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_DES")  
		ИЛИ ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_MOV")  
		ИЛИ ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_PRD") Тогда //для M_INC не надо знать таблицу ПоднадзорныхТоваров - это входящие электронные ВСД
		СформироватьВТПоднадзорныхТоваров(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	КонецЕсли;

	СформироватьВТСообщенийМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий,МассивТиповСообщений);
	
	Если ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_DES") Тогда
		СформироватьСписокОтгрузокМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	КонецЕсли;
	
	Если ПолучитьКонстантуEDI("М_ВедетсяПроизводство") <> Ложь 
		И ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_PRD") Тогда
		СформироватьСписокПроизводстваМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	КонецЕсли;
	
	Если ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_MOV") Тогда
		СформироватьСписокПеремещенийМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	КонецЕсли;
	
	Если ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_REC") Тогда
		СформироватьСписокПриходовМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	КонецЕсли;
	
	Если ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_INC") Тогда
		СформироватьСписокВходящихВСДМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	КонецЕсли;
	
	Если ПолучитьКонстантуEDI("М_ИспользоватьНезавершенноеПроизводство") = Истина 
		И ЕстьТипСообщенияВМассиве(МассивТиповСообщений,"M_PRD") Тогда
		СформироватьСписокНезавершенныхКЗавершению(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	КонецЕсли;

КонецПроцедуры

Процедура СопоставитьСообщениеСДокументом(Сообщение)
	
	ДокументСсылка = ОбработкаСобытияПодключаемогоМодуля("СопоставитьСообщениеСДокументом",,Новый Структура("Сообщение",Сообщение));
	
	//по хорошему, надо бы проверить его тип
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда 
		МеркурийСвязатьСообщениеСДокументом(Сообщение,ДокументСсылка);
		ЗаписатьСообщение(Сообщение);
	КонецЕсли;
	
	//Мы не будем пробовать проставить фактические количества прямо здесь.
	//Мы только привязываем документ. Заполнение фактического количества будет прямо в карточке при открытии или если мы будем гасить пакетно то при пакетном гашении.
	
КонецПроцедуры

//главное для понимания: ВСД - это только строка входящего документа ПТУ.
//имея список ВСД важно понять какие ТТН в них и уже в разрезе ТТН создавать сущности "Приходная накладная" в 1С
Процедура ПроверитьСписокНеобработанныхВходящихВСД(GUIDПлощадки,ПеречитатьСНуля=Ложь)
	
	ДатаТекущегоЗапроса = ТекущаяДата();
	
	Если НЕ ПеречитатьСНуля Тогда 
		ПрочитаноДо = ПолучитьКонстантуEDI("АктуалВхВСД_"+GUIDПлощадки);
		Если ПрочитаноДо = Неопределено Тогда 
			ПеречитатьСНуля = Истина;
		КонецЕсли;
	КонецЕсли;
	
	////Отладка если что
	//ПрочитаноДо=НачалоДня(ТекущаяДата());
	//ПеречитатьСНуля = Ложь;
	
	ВычиталиВсеОформленные = Ложь;
	Если ПеречитатьСНуля = Ложь Тогда  
		ВТаблицеТолькоОформленные = Ложь;
		РезультатОперации = ПолучитьИзмененияВСДЗаПериод(GUIDПлощадки,ПрочитаноДо,Неопределено);
	Иначе
		ВТаблицеТолькоОформленные = Истина;
		//получим список всех входящих ВСД
		//найдем среди них те, которые не фигурируют в справочнике
		//в разрезе waybillNumber и waybillDate если нет номера - значит каждый из них разный
		//это ключевая таблица группировки ВСД по документам ПТУ а также соотнесения со списком ТД
		РезультатОперации = ПолучитьВсеОформленныеВСДПлощадки(GUIDПлощадки,ВычиталиВсеОформленные);
	КонецЕсли;
	
	ТаблицаВСД 				= РезультатОперации.ТаблицаВСД;
	
	ВсегоСтрок = ТаблицаВСД.Количество();
	
	//выбросим производственные
	Для й=1 по ВсегоСтрок Цикл
		ТекСтр = ТаблицаВСД[ВсегоСтрок-й];
		Если ТекСтр.ФормаДокумента = "PRODUCTIVE" Тогда 
			ТаблицаВСД.Удалить(ТекСтр);			
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаВСД.Количество() > 0 Тогда 
		//соотнесем с текущим положением дел в справочнике
		ТаблицаUUID = ТаблицаВСД.Скопировать();
		ТаблицаUUID.Свернуть("ВсдUUID");
		ТаблицаUUIDКОбработке = ПолучитьНовыеЗаписиОВходящихВСДИзСпискаЗагруженных(ТаблицаUUID,ВТаблицеТолькоОформленные,ВычиталиВсеОформленные);
		// в полученной таблице гарантированно уникальный UUID ВСД - даже если в одной сессии docFlow был вычитан интервал, где было и оформление и аннулирование - такие ВСД будут 1 строкой
		
		МассивЛишнихВСД = Новый Массив; 
		//Лишние ВСД - это те, которые оказались обработанными НЕ этой базой данных, но при этом база данных успела запомнить их пока они были еще confirmed и предлагает погасить их
		
		//выбросим все строки которые уже есть в 1С
		ВСегоВхВСД = ТаблицаВСД.Количество();
		Для й=1 по ВСегоВхВСД Цикл
			ТекСтр = ТаблицаВСД[ВСегоВхВСД-й];
			Если ТаблицаUUIDКОбработке.Найти(ТекСтр.ВсдUUID,"ВсдUUID") = Неопределено Тогда 
				
				Если ТекСтр.Статус = "UTILIZED" Тогда //реализация вышеописанного. Будем действовать пакетно - сначала поместим погашенные в МассивЛишнихВСД
					МассивЛишнихВСД.Добавить(ТекСтр.ВсдUUID);
				КонецЕсли;
				
				ТаблицаВСД.Удалить(ТекСтр);			
			КонецЕсли;
		КонецЦикла;
		
		//Обработка таблицы - тут основная мысль сделать предварительную группировку всд по накладным в том виде как их получит поставщик
		//Если есть ТТН - то должна остаться 1 строка (в разрезе уникальности метода Свернуть) из нескольких ВСД если ТТН нет - то каждый всд уникален
		СписокВСДСвернутый = ТаблицаВСД.Скопировать();
		СписокВСДСвернутый.Свернуть("НомерТТН, ДатаТТН, Статус, ТипТранспорта, НомерМашины, ФормаДокумента, Тип");    //Были мысли добавить еще ДатаВСД но кажется что это неверно т.к. спокойно может в одной поставке приехать 2 всд с разной датой оформления
		СписокВСДСвернутый.Колонки.Добавить("ВсдUUID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
		
		//мы свернули также те ВСД которые были с пустым номером ТТН. 
		//Считаем что Номер машины (который обязательный) достаточно однозначно идентифицирует группу ВСД по поставке
		
		ОсновнойМодуль.Состояние_КонтурEDI("Обрабатываю новые входящие электронные ВСД");
		й=0;
		
		ВсегоТТН = СписокВСДСвернутый.Количество();
		Для Каждого ТекВСД Из СписокВСДСвернутый Цикл
			й=й+1;
			ОсновнойМодуль.Состояние_КонтурEDI("Обрабатываю новые входящие электронные ВСД "+й+"/"+ВсегоТТН);
			Если ТекВСД.Статус = "CONFIRMED" Тогда
				
				ВходящееСообщение = ПолучитьСообщениеВходящейТТН();
				СтрокиСЭтимиВСД = ТаблицаВСД.НайтиСтроки(Новый Структура("НомерТТН, ДатаТТН, Статус, ТипТранспорта, НомерМашины, ФормаДокумента, Тип",ТекВСД.НомерТТН,ТекВСД.ДатаТТН,ТекВСД.Статус,ТекВСД.ТипТранспорта,ТекВСД.НомерМашины,ТекВСД.ФормаДокумента,ТекВСД.Тип));
				
				ЗаполнитьСообщениеВходящегоВСД(ВходящееСообщение,СтрокиСЭтимиВСД);
				ЗаписатьВходящееСообщениеМеркурий(ВходящееСообщение);
				
				СопоставитьСообщениеСДокументом(ВходящееСообщение);
				
			КонецЕсли;
			
			Если ТекВСД.Статус = "WITHDRAWN" Тогда  //WITHDRAWN - аннулирован Входящий ВСД
				//проверить что мы не предлагаем его погасить
			КонецЕсли;
			
			Если ТекВСД.Статус = "UTILIZED" Тогда  //UTILIZED - погашен (не факт что нами)
				//проверить что мы не предлагаем его погасить
				//Есть ссылка в справочнике и статус "UTILIZED"  - тогда надо точно разобраться какой именно был Utilized - если есть ТТН - то вычеркнуть а есл ине было ТТН значит само сообщение убрать
			КонецЕсли;
			
			//Если ВТаблицеТолькоОформленные=Истина Тогда 
			//	
			//Иначе
			//КонецЕсли;
		КонецЦикла;
		
		УдалитьЛишниеВСД(МассивЛишнихВСД);
		
	КонецЕсли;
	
	ОсновнойМодуль.УстановитьКонстантуEDI("АктуалВхВСД_"+GUIDПлощадки,ДатаТекущегоЗапроса);
	
КонецПроцедуры

Процедура УдалитьЛишниеВСД(МассивЛишнихВСД)

	Если МассивЛишнихВСД.Количество() > 0 Тогда
		ИмяРеквизита		= "вхВСД_UUID";
		Запрос				= Новый Запрос;
		Запрос.УстановитьПараметр("ИмяРеквизита"	,ИмяРеквизита);
		Запрос.УстановитьПараметр("МассивЛишнихВСД"	,МассивЛишнихВСД);
		Запрос.Текст		=
		"ВЫБРАТЬ
		|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка КАК Ссылка,
		|	КонтурEDI_СообщенияДополнительныеРеквизиты.Значение КАК ВсдUUID
		|ИЗ
		|	Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
		|ГДЕ
		|	НЕ КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.ПометкаУдаления
		|	И КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.ТипСообщения = ""M_INC""
		|	И КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = &ИмяРеквизита
		|	И КонтурEDI_СообщенияДополнительныеРеквизиты.Значение В(&МассивЛишнихВСД)
		|	И КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.ТребуемоеДействие = ""Погасить входящие ВСД""
		|ИТОГИ ПО
		|	Ссылка";
		
		ВыборкаСообщ		= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСообщ.Следующий() Цикл
			СообщениеОбъект	= ВыборкаСообщ.Ссылка.ПолучитьОбъект();
			Сообщение		= СообщениеОбъект.Хранилище.Получить();
			Выборка			= ВыборкаСообщ.Выбрать();
			Пока Выборка.Следующий() Цикл
				Стр			= Сообщение.Товары.Найти(Выборка.ВсдUUID,"ВетСертификатUUID");
				Если Стр<>Неопределено Тогда
					Сообщение.Товары.Удалить(Стр);
				КонецЕсли;
			КонецЦикла;
			
			Если Сообщение.Товары.Количество()=0 Тогда
				СообщениеОбъект.ПометкаУдаления = Истина;
				СообщениеОбъект.ТипСообщения = "#M_INC";
				//не будем прихлапывать товары такого сообщения - мало ли его потребуется реанимировать и вернуть к жизни, (так мы это сможем легко сделат не перечитывая весь docFlow с его даты
			Иначе
				СообщениеОбъект.Хранилище			= Новый ХранилищеЗначения(Сообщение,Новый СжатиеДанных(9));
			КонецЕсли;
			
			СообщениеОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


//конвертация сообщения из 1С в Меркурий
Функция КонвертироватьТранзакциюМеркурий(Сообщение) Экспорт
    //Здесь переведем все в идентификаторы меркурия (так же как конвертировали в EDI)
	КонвертироватьШапкуТранзакцииМеркурий(Сообщение);
	
	//Номенклатура и ЕдиницаИзмерения
	КонвертироватьТабличнуюЧастьМеркурий(Сообщение);
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПослеКонвертацииТранзакцииМеркурий",,
			Новый Структура("Сообщение",Сообщение));
	
КонецФункции // КонвертироватьТранзакциюМеркурий()

//обновляет складской журнал площадки
Функция ПолучитьЗаписиСкладскогоЖурнала(GUIDПлощадки, ОбновитьКЭШ = Ложь, GUIDХС) Экспорт
	
	GUIDПлощадкиБезДефисов = СтрЗаменить(GUIDПлощадки,"-","");
	GUIDХСБезДефисов = СтрЗаменить(GUIDХС,"-","");
	
	Если ПакетныйРежим = Истина Тогда
		СохраненныйЖурнал = ОсновнойМодуль.ЭДО_Кэш_Прочитать("Меркурий_СкладскойЖурнал"+GUIDПлощадкиБезДефисов+"_"+GUIDХСБезДефисов);
		
		Если НЕ СохраненныйЖурнал=Неопределено Тогда
			Возврат СохраненныйЖурнал;
		КонецЕсли;
	КонецЕсли;
	
	ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю складской журнал.");
	
	// СохраненныйСкладскойЖурнал
	Если ОперативныйСкладскойЖурнал = Неопределено и ОбновитьКЭШ = Ложь Тогда
		
		СохраненныйЖурналПродукции = ПолучитьНастройкуМеркурий("СохраненныйСкладскойЖурнал");
		Если СохраненныйЖурналПродукции = Неопределено 
			ИЛИ ТипЗНЧ(СохраненныйЖурналПродукции) <> Тип("Структура")
			ИЛИ (НЕ СохраненныйЖурналПродукции.Свойство("СохраненныйСкладскойЖурнал"))
			ИЛИ ТипЗНЧ(СохраненныйЖурналПродукции.СохраненныйСкладскойЖурнал) <> Тип("ТаблицаЗначений") Тогда 
			СоздатьОперативныйСкладскойЖурналПлощадки(GUIDПлощадки,GUIDХС);
		Иначе
			ОперативныйСкладскойЖурнал = СохраненныйЖурналПродукции.СохраненныйСкладскойЖурнал;
		КонецЕсли;
	КонецЕсли;
	
	//формирует актуальные данные в ОперативныйСкладскойЖурнал
	ЗаполнитьСкладскойЖурналПлощадки(GUIDПлощадки,ОбновитьКЭШ,GUIDХС);
	
	//теперь сохраним в СохраненныйСкладскойЖурнал
	СохранитьНастройкуМеркурий("СохраненныйСкладскойЖурнал",ОперативныйСкладскойЖурнал);
	
	АктуализированныйЖурнал = Неопределено;
	
	НайденнаяВетвьСЖМассив = ОперативныйСкладскойЖурнал.НайтиСтроки(Новый Структура("ХС_GUID, Площадка_GUID",GUIDХС,GUIDПлощадки));
	
	Если НайденнаяВетвьСЖМассив.Количество() = 0 Тогда 
		ДатаАктуальностиДляХСпоПлощадке = Дата(1,1,1);
		СоздатьОперативныйСкладскойЖурналПлощадки(GUIDПлощадки, GUIDХС);
		НайденнаяВетвьСЖМассив = ОперативныйСкладскойЖурнал.НайтиСтроки(Новый Структура("ХС_GUID, Площадка_GUID",GUIDХС,GUIDПлощадки));
		НайденнаяВетвьСЖ = НайденнаяВетвьСЖМассив[0];
	Иначе
		НайденнаяВетвьСЖ = НайденнаяВетвьСЖМассив[0];
		ДатаАктуальностиДляХСпоПлощадке = НайденнаяВетвьСЖ.ДатаАктуальности;
	КонецЕсли;
	
    АктуализированныйЖурнал = НайденнаяВетвьСЖ.Данные;
	
	Возврат АктуализированныйЖурнал;
	
КонецФункции // ПолучитьЗаписиСкладскогоЖурнала()

Функция ОбработатьСобытиеОсновногоМодуля(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI = Истина) Экспорт
	
	ПрименитьТиповыеПлагиныМеркурий(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
КонецФункции


//основные методы ------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------

Процедура Инициализировать(ОбработкаКонтурEDI) Экспорт
	
	ОсновнойМодуль = ОбработкаКонтурEDI;
	ИспользуемыйТаймаут = ПолучитьКонстантуEDI("М_ТаймаутСоединений");
	Если Не ЗначениеЗаполнено(ИспользуемыйТаймаут) Тогда 
		ИспользуемыйТаймаут = 20; //сек 
	КонецЕсли;
	ВнешнееХранилище = Ложь;
	
	СмещениеЧасовОтМосквы = ПолучитьКонстантуEDI("М_ЧасовойПоясОтМосквы");   //Екатеринбург +2; Калининград -1
	Если Не ЗначениеЗаполнено(СмещениеЧасовОтМосквы) Тогда 
		СмещениеЧасовОтМосквы = 0; 
	КонецЕсли;
	
	//кэшируем настройки отладки ПМ
	ДанныеОтладки = ОсновнойМодуль.ПолучитьСписокСвойствEDI("ПодключаемыйМодульСообщатьОСобытиях,ПодключаемыйМодульИспользоватьОтладку,ПодключаемыйМодульСобытиеОтладки");
	НулевойGUID = "00000000-0000-0000-0000-000000000000";
	ВыводитьСкоростьРаботыСервераМеркурий = ПолучитьКонстантуEDI("М_ВыводитьСкоростьРаботыСервераМеркурий");
	ИспользуемаяВерсияAPI = ?(ПолучитьКонстантуEDI("М_ИспользоватьAPI20ДляТранзакций") = Истина,"20","14");
	ИспользуетсяРазграничениеПрав = ПолучитьКонстантуEDI("М_ИспользоватьРазграничениеПрав") = Истина;

	ПроверитьЗапускНовойВерсииМодуляМеркурий();
	
КонецПроцедуры

Процедура ПроверитьЗапускНовойВерсииМодуляМеркурий()

	Результат = Новый Структура();
	Результат.Вставить("ПродолжитьЗапуск",Истина);
	Результат.Вставить("ТекстОшибки","");
	
	ТекущаяВерсияМодуля = ПолучитьНомерРелиза_КонтурEDI();
	
	ВерсияМодуляВ1С = ПолучитьКонстантуEDI("МеркурийНомерВерсии");
	
	Если ВерсияМодуляВ1С = Неопределено Тогда
		//первый запуск
		локУстановитьКонстантуEDI("МеркурийНомерВерсии",ТекущаяВерсияМодуля);
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ВерсияМодуляВ1С) = СокрЛП(ТекущаяВерсияМодуля) Тогда
		Возврат;
	КонецЕсли;
	
	//и теперь собственно проверки
	НомерРедакцииСтарый = 999;
	НомерВыпускаСтарый = 999;
	Попытка
		НомерРедакцииСтарый = Число(Сред(ВерсияМодуляВ1С,4,2));
		НомерВыпускаСтарый = Число(Сред(ВерсияМодуляВ1С,7,3));
	Исключение
	КонецПопытки;
	
	НомерРедакции = 999;
	НомерВыпуска = 999;
	Попытка
		НомерРедакции = Число(Сред(ТекущаяВерсияМодуля,4,2));
		НомерВыпуска = Число(Сред(ТекущаяВерсияМодуля,7,3));
	Исключение
	КонецПопытки;
	
	ЗапустилиСтарую = Ложь;
	Если НомерРедакции < НомерРедакцииСтарый И НЕ НомерРедакцииСтарый = 999 Тогда
		ЗапустилиСтарую = Истина;				
	ИначеЕсли (НомерВыпуска < НомерВыпускаСтарый И НЕ НомерВыпускаСтарый = 999) и (НомерРедакции=НомерРедакцииСтарый) Тогда
		ЗапустилиСтарую = Истина;
	КонецЕсли;
	
	Если ЗапустилиСтарую Тогда
		Результат.ПродолжитьЗапуск = Ложь;
		Сообщить("Вы запускаете старую версию модуля Меркурий. Последний раз была запущена версия "+ВерсияМодуляВ1С+". Вы запускаете "+ТекущаяВерсияМодуля,СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;
		
	// начиная с версии 4.01.043 изменилось хранение соответствий товаров, теперь оно в разрезе партнеров
	// проверяем что запустили новую версию модуля, и, в случае необходимости, переписываем соответствия
	
	// начиная с версии 4.01.045 заменили настройку "цепочка сообщений" на набор галочек по типам сообщений
	
	ИзменитьНастройкуЦепочки = Ложь;
	
	ПерезаполнитьСоответствия = Ложь;
	
	// Реорганизация Таблицы Оперативного складского журнала и появление мультимодальности
	Если НомерРедакцииСтарый <= 3
		И НомерВыпускаСтарый < 67 Тогда
		ОсновнойМодуль.Состояние_КонтурEDI("Начал обновление на версию M8.03.067b. Обрабатываются активные сообщения, это потребует определенное время...");
		
		ДополнитьСтруктуруСтарыхСообщенийМультимодальностью();

	КонецЕсли;
	
	локУстановитьКонстантуEDI("МеркурийНомерВерсии",ТекущаяВерсияМодуля);
	
	
КонецПроцедуры

Процедура ДополнитьСтруктуруСтарыхСообщенийМультимодальностью()

	//Добавлено поле МультимодальнаяПеревозка в сообщение
	
		//придется проставить его во все не архивные сообщения
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтурEDI_Сообщения.Ссылка
		               |ИЗ
		               |	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		               |ГДЕ
		               |	НЕ КонтурEDI_Сообщения.ПометкаУдаления
		               |	И (КонтурEDI_Сообщения.ТипСообщения = ""M_REC""
		               |			ИЛИ КонтурEDI_Сообщения.ТипСообщения = ""M_INC""
		               |			ИЛИ КонтурEDI_Сообщения.ТипСообщения = ""M_DES""
		               |			ИЛИ КонтурEDI_Сообщения.ТипСообщения = ""M_MOV"")
		               |	И НЕ КонтурEDI_Сообщения.Архив";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СообщениеСтруктура = СообщениеОбъект.Хранилище.Получить();
			Если Истина Тогда 
				СообщениеСтруктура.Вставить("МультимодальнаяПеревозка",Ложь);
				СообщениеСтруктура.Вставить("Маршрут",Новый ТаблицаЗначений);
				СообщениеОбъект.Хранилище = Новый ХранилищеЗначения(СообщениеСтруктура,Новый СжатиеДанных(9));
				СообщениеОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		Сообщить("Модуль Меркурий обновлен на версию M8.03.067b");


КонецПроцедуры


Функция ПрименитьТиповыеПлагиныМеркурий(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	Результат = Плагин_МеркурийДобавитьОбработатьКнопкуЕще(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	Если Не Результат = Неопределено Тогда
		Возврат Результат 
	КонецЕсли;
	
	Плагин_МеркурийИзменитьНастройкуТиповОбъектов(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	
	Плагин_МеркурийПроверитьТипизациюРеквизитаДокументСправочникаСообщения(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	
КонецФункции


//Типовые Плагины
Функция Плагин_МеркурийДобавитьОбработатьКнопкуЕще(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI = Истина)
	
	Если ИмяСобытия = "ИзменитьСоставКнопкиЕще" Тогда
		
		ДобавитьКнопкуЕще(Параметры.КнопкаЕще, "ПечатьВСД", "Распечатать ВСД по выделенным строкам", БиблиотекаКартинок.ВывестиСписок);
		ДобавитьКнопкуЕще(Параметры.КнопкаЕще, "ПропуститьДействие", "Пропустить выделенные действия Меркурий", ОсновнойМодуль.БиблиотекаКартинокEDI().КартинкаПропуститьСообщение);
		
	ИначеЕсли ИмяСобытия = "НажатиеКнопкиЕщеПодключаемогоМодуля" Тогда
		
		Если Параметры.Кнопка.Имя = "ПечатьВСД" Тогда
			
			ТабДокумент = ПолучитьТабличныйДокументВСД(Параметры.ЭлементыФормы.ТабСообщения.ВыделенныеСтроки);
			
			Если ТабДокумент<>Неопределено Тогда
				ТабДокумент.Показать("Перечень ВСД");
			КонецЕсли;
			
		ИначеЕсли Параметры.Кнопка.Имя = "ПропуститьДействие" Тогда
			
			Попытка
				ПакетныйРежим = Истина;
				ВыделенныеСтроки = Параметры.ЭлементыФормы.ТабСообщения.ВыделенныеСтроки;
				
				Для Каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
					Если ВыделеннаяСтрока.ТребуемоеДействие = "Работа завершена" Тогда Продолжить; КонецЕсли;
					Если Лев(ВыделеннаяСтрока.ТипСообщения,2) <> "M_" Тогда Продолжить; КонецЕсли;
					
					Если Параметры.Свойство("НужноОбновитьСписокЗадач") Тогда 
						Параметры.НужноОбновитьСписокЗадач = Истина;
					КонецЕсли;
					
					Если ВыделеннаяСтрока.ТипСообщения = "M_INC" ИЛИ ЗначениеЗаполнено(ВыделеннаяСтрока.СообщениеСсылка) Тогда
						ПропускаемоеСообщение = ОсновнойМодуль.ПрочитатьСообщение(ВыделеннаяСтрока.СообщениеСсылка);
					Иначе
						ПропускаемоеСообщение = ОсновнойМодуль.ПолучитьСтруктуруСообщения(ВыделеннаяСтрока.ТипСообщения,);
						//пока что решено не конвертировать сообщение чтобы все не затягивалось.
						ПодготовитьТранзакциюМеркурий(ВыделеннаяСтрока.ТипСообщения,ВыделеннаяСтрока.Документ,ПропускаемоеСообщение,Истина);
					КонецЕсли;
					
					ПропуститьСообщениеМеркурий(ПропускаемоеСообщение);
					
				КонецЦикла;
				ПакетныйРежим = Ложь;
			Исключение
				ПакетныйРежим = Ложь;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция Плагин_МеркурийИзменитьНастройкуТиповОбъектов(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI = Истина)
	
	ИмяКонфигурации = ОсновнойМодуль.ИмяКонфигурации1С;
	
	Если ИмяСобытия = "ИзменитьНастройкуТиповОбъектов" Тогда
		
		//Здесь типизируются все типы меркурия, отличные от тех что в типовом макете модуля меркурия "ТипыОбъектов"
		ТаблицаТипов = Параметры.ТаблицаТипов;
		Попытка
		Если ОсновнойМодуль.ИспользуетсяМеркурий Тогда
			Если ИмяКонфигурации = "УПП" Тогда
				
				УстановитьТипОбъектаМеркурий(ТаблицаТипов,"МеркурийДокументПроизводства"		,"ДокументСсылка.ОтчетПроизводстваЗаСмену");
				УстановитьТипОбъектаМеркурий(ТаблицаТипов,"МеркурийИмяТЧТоварыПроизводство"	,"Продукция");
				
			ИначеЕсли Лев(ИмяКонфигурации,2) = "УТ" или  ИмяКонфигурации = "УФ_УТ" Тогда
				
				УстановитьТипОбъектаМеркурий(ТаблицаТипов,"МеркурийДокументПроизводства"		,"ДокументСсылка.РеализацияТоваровУслуг");
				УстановитьТипОбъектаМеркурий(ТаблицаТипов,"МеркурийИмяТЧТоварыПроизводство"	,"Товары");
				
			КонецЕсли;
			
			Если ИмяКонфигурации = "УФ_УТ" 
				И (ОсновнойМодуль.ОпределитьРелизКонфигурации() = "11.0" ИЛИ ОсновнойМодуль.ОпределитьРелизКонфигурации() = "11.1") Тогда
				УстановитьТипОбъектаМеркурий(ТаблицаТипов,"МеркурийЕдиницаИзмерения"					,"СправочникСсылка.УпаковкиНоменклатуры");
				УстановитьТипОбъектаМеркурий(ТаблицаТипов,"МеркурийЕдиницаИзмеренияПоКлассификатору" 	,"СправочникСсылка.УпаковкиНоменклатуры");
				УстановитьТипОбъектаМеркурий(ТаблицаТипов,"МеркурийЕдиницаИзмеренияУпаковок"			,"СправочникСсылка.УпаковкиНоменклатуры");
			КонецЕсли;
			
		КонецЕсли;
		Исключение
			ОсновнойМодуль.Сообщить_КонтурEDI("Запущена старая версия Модуля Контур EDI! Модуль Контур.Меркурий не подключен");
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция Плагин_МеркурийПроверитьТипизациюРеквизитаДокументСправочникаСообщения(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI = Истина)
	
	Если ИмяСобытия = "ПриОткрытииОсновнойФормы" Тогда
		//Надо проверить Реквизит Документ Справочника КонтурEDI_Сообщения на предмет наличия там всех нужных типов
		
		ТаблицаТипов= ОсновнойМодуль.ТаблицаТипов;
		
		РеквизитДокумент = Метаданные.Справочники.КонтурEDI_Сообщения.Реквизиты.Документ;
		ОписаниеТиповРеквизитаДокумент = РеквизитДокумент.Тип;
		Для Каждого СтрокаТипа Из ТаблицаТипов Цикл
			Если Лев(СтрокаТипа.ИмяОбъекта,16)="МеркурийДокумент" Тогда
				Если НЕ ОписаниеТиповРеквизитаДокумент.СодержитТип(Тип(СтрокаТипа.ИмяТипа)) Тогда 
					Сообщить("В качестве одного из типов документа для Меркурия указан "+СтрокаТипа.ИмяТипа+" но он отсутствует в списке возможных типов реквизита ""Документ"" справочника ""КонтурEDI_Сообщения""",СтатусСообщения.ОченьВажное);
					Сообщить("Откройте Конфигуратор, найдите Справочник ""КонтурEDI_Сообщения"" добавьте тип "+СтрокаТипа.ИмяТипа+" в реквизит ""Документ""",СтатусСообщения.ОченьВажное);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции


//Вспомогательные для  типовых плагинов
Процедура ДобавитьКнопкуЕще(КнопкаЕще, Имя, Название, Картинка)
	
	НовКнопка = Неопределено;
	Выполнить("НовКнопка = КнопкаЕще.Кнопки.Добавить(Имя, ТипКнопкиКоманднойПанели.Действие, Название, Новый Действие(""КнопкаЕщеОбработчикПодключаемогоМодуля""))");//имя процедуры обработчика в Контур.EDI (ОФ)
	Если НовКнопка<>Неопределено Тогда
		НовКнопка.Доступность = Истина;
		НовКнопка.Картинка = Картинка;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТабличныйДокументВСД(ВыделенныеСтроки) Экспорт//Для УФ и ОФ
	
	МассивМеркурийРаспечататьВСД = Новый Массив;
	Для Каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
		МассивМеркурийРаспечататьВСД.Добавить(ВыделеннаяСтрока.СообщениеСсылка);
	КонецЦикла;
	
	ПрефиксТестовогоСервера = ?(ОсновнойМодуль.ПолучитьКонстантуEDI("М_ИспользуетсяТестовыйAPI")=Истина,"t2-","");
	ТабДокумент = ОсновнойМодуль.ВнешнийМодульМеркурий.ПолучитьТабличныйДокументПеречняВСДПоСпискуСообщений(МассивМеркурийРаспечататьВСД, ПрефиксТестовогоСервера, Ложь);
	
	Возврат ТабДокумент;
			
КонецФункции

Процедура УстановитьТипОбъектаМеркурий(ТаблицаТипов,ИмяОбъекта,НовоеИмяТипа)
	
	НайденныйТип = ТаблицаТипов.Найти(ИмяОбъекта,"ИмяОбъекта");
	
	Если НайденныйТип<>Неопределено Тогда
		НайденныйТип.ИмяТипа = НовоеИмяТипа;
	Иначе
		Сообщить("Не смог типизировать: "+ИмяОбъекта);
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьТипСообщенияВМассиве(Массив,ТипСообщения)
	
	Для каждого ТипМассива Из Массив Цикл
		Если СокрЛП(ТипМассива)= СокрЛП(ТипСообщения) Тогда 
			Возврат Истина
		КонецЕсли;
	КонецЦикла;
		
	Возврат Ложь;
	
КонецФункции



// Интерфейс для регистрации обработки.
// Вызывается при добавлении обработки в справочник "ВнешниеОбработки"
//
// Возвращаемое значение:
// Структура:
// Вид - строка - возможные значения:	"ДополнительнаяОбработка"
//										"ДополнительныйОтчет"
//										"ЗаполнениеОбъекта"
//										"Отчет"
//										"ПечатнаяФорма"
//										"СозданиеСвязанныхОбъектов"
//
// Назначение - массив строк имен объектов метаданных в формате:
//			<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]
//			Например, "Документ.СчетЗаказ" или "Справочник.*"
//			Прим. параметр имеет смысл только для назначаемых обработок
//
// Наименование - строка - наименование обработки, которым будет заполнено
//						наименование справочника по умолчанию - краткая строка для
//						идентификации обработки администратором
//
// Версия - строка - версия обработки в формате <старший номер>.<младший номер>
//					используется при загрузке обработок в информационную базу
// БезопасныйРежим – Булево – Если истина, обработка будет запущена в безопасном режиме.
//							Более подбробная информация в справке.
//
// Информация - Строка- краткая информация по обработке, описание обработки
//
// ВерсияБСП - Строка - Минимальная версия БСП, на которую рассчитывает код
// дополнительной обработки. Номер версии БСП задается в формате «РР.ПП.ВВ.СС»
// (РР – старший номер редакции; ПП – младший номер ре-дакции; ВВ – номер версии; СС – номер сборки).
//
// Команды - ТаблицаЗначений - команды, поставляемые обработкой, одная строка таблицы соотвествует
//							одной команде
//				колонки: 
//				 - Представление - строка - представление команды конечному пользователю
//				 - Идентификатор - строка - идентефикатор команды. В случае печатных форм
//											перечисление через запятую списка макетов
//				 - Использование - строка - варианты запуска обработки:
//						"ОткрытиеФормы" - открыть форму обработки
//						"ВызовКлиентскогоМетода" - вызов клиентского экспортного метода из формы обработки
//						"ВызовСерверногоМетода" - вызов серверного экспортного метода из модуля объекта обработки
//				 - ПоказыватьОповещение – Булево – если Истина, требуется оказывать оповещение при начале
//								и при окончании запуска обработки. Прим. Имеет смысл только
//								при запуске обработки без открытия формы.
//				 - Модификатор – строка - для печатных форм MXL, которые требуется
//										отображать в форме ПечатьДокументов подсистемы Печать
//										требуется установить как "ПечатьMXL"
//
// Предусмотрено 2 команды:
// 1. "Открыть форму обработки" для загрузки прайс-листа в диалоговом режиме
// 2. "Загрузить прайс-лист и сохранить протокол в файл" для загрузки прайс-листа по регламентному заданию и
// сохранения протокола в файл.
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Контур.Меркурий");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.00.01");
	//Если Найти(Метаданные.Синоним,"Бухгалтерия предприятия, редакция 3.0")>0 Тогда
	//	//нет регистрации по ВерсииБСП
	//иначе
	//	РегистрационныеДанные.Вставить("ВерсияБСП", "нет");
	//КонецЕсли;

	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	
	РегистрационныеДанные.Вставить("Информация", "Обработка подключаемого модуля ""МЕРКУРИЙ"" для Контур.EDI");
	
	ТЗКоманд = Новый ТаблицаЗначений;
	ТЗКоманд.Колонки.Добавить("Идентификатор");
	ТЗКоманд.Колонки.Добавить("Представление");
	ТЗКоманд.Колонки.Добавить("Модификатор");
	ТЗКоманд.Колонки.Добавить("ПоказыватьОповещение");
	ТЗКоманд.Колонки.Добавить("Использование");
	
	
	РегистрационныеДанные.Вставить("Команды", ТЗКоманд);
	
	Возврат РегистрационныеДанные;
	
КонецФункции

Функция КэшУчетныхЗаписей(ПринудительноОбновить=ложь) Экспорт
	
	Если КэшУчетныхЗаписей = Неопределено 
		ИЛИ ПринудительноОбновить = Истина
		ИЛИ КэшУчетныхЗаписей.Количество()=0 Тогда
		ОбновитьКэшУчетныхЗаписей()
	КонецЕсли;
	
	Возврат КэшУчетныхЗаписей;
	
КонецФункции

Процедура ОбновитьКэшУчетныхЗаписей()
	//Кэш содержит в себе еще связь ХС и площадок (наших)
	
	//читаем все Учетные записи
	УчетныеЗаписи = Новый ТаблицаЗначений;
	УчетныеЗаписи.Колонки.Добавить("ЛогинAPI");
	УчетныеЗаписи.Колонки.Добавить("ПарольAPI");
	УчетныеЗаписи.Колонки.Добавить("APIKey");
	УчетныеЗаписи.Колонки.Добавить("ЛогинПользователя");
	УчетныеЗаписи.Колонки.Добавить("IssuerId");
	
	КэшУчетныхЗаписей = УчетныеЗаписи.Скопировать();
	КэшУчетныхЗаписей.Колонки.Добавить("ПлощадкаGUID");
	
	УчетныеЗаписи.Колонки.Добавить("ЕстьПлощадки");
	
	ТаблицаТекХС = ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийУчетнаяЗапись", Неопределено);
	
	Для Каждого Эл Из ТаблицаТекХС Цикл
		НоваяУЗ = УчетныеЗаписи.Добавить();
		НоваяУЗ.ЛогинAPI 	= ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"ЛогинAPI");
		НоваяУЗ.ПарольAPI 	= ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"ПарольAPI");
		НоваяУЗ.APIKey 		= ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"APIKey");
		НоваяУЗ.ЛогинПользователя = ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"ЛогинПользователя");
		НоваяУЗ.IssuerId 	= ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"IssuerId");
		НоваяУЗ.ЕстьПлощадки = ложь;
	КонецЦикла;
	
	ТаблицаСвязанныхСХСПлощадок = Новый ТаблицаЗначений;
	ТаблицаСвязанныхСХСПлощадок.Колонки.Добавить("IssuerId");
	ТаблицаСвязанныхСХСПлощадок.Колонки.Добавить("ПлощадкаGUID");
	//узнаем все связи наших ХС с площадками
	Для Каждого СтрокаУчетки Из УчетныеЗаписи Цикл
		ТекПредприятия = ПолучитьСписокПредприятийПоGUID(СтрокаУчетки.IssuerId,Истина);
		Для Каждого СвязанноеПредприятие Из ТекПредприятия Цикл
			ВыясненнаяСвязь = ТаблицаСвязанныхСХСПлощадок.Добавить();
			ВыясненнаяСвязь.IssuerId = СтрокаУчетки.IssuerId;
			ВыясненнаяСвязь.ПлощадкаGUID = СвязанноеПредприятие.guid;
		КонецЦикла;
	КонецЦикла;
	
	//читаем все наши площадки - понимаем их GUID Владельцев
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка,
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение КАК ПлощадкаGUID
	               |ПОМЕСТИТЬ GUIDПлощадок
	               |ИЗ
	               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = ""МеркурийПлощадка""
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""GUID""
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение <> """"
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка КАК СсылкаПлощадки,
	               |	GUIDПлощадок.ПлощадкаGUID
	               |ИЗ
	               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ GUIDПлощадок КАК GUIDПлощадок
	               |		ПО КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка = GUIDПлощадок.Ссылка
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = ""МеркурийПлощадка""
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = ИСТИНА
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""Наш""
	               |	И НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	ТаблицаПлощадок = Результат.Выгрузить();	
	ТаблицаПлощадок.колонки.Добавить("ХСGUID");
	ТаблицаПлощадок.колонки.Удалить("СсылкаПлощадки");
	
	ТаблицаПлощадок.Свернуть("ХСGUID,ПлощадкаGUID"); //N складов в 1С на 1 площадку
	
	//обходим Площадки - заполняем GUID Площадки и по нему узнаем GUIDХС к которому они принадлежат
	//и по непустым ХСGUID найти учетную запись
	Для Каждого Строкаплощадки Из ТаблицаПлощадок Цикл
		Если ЗначениеЗаполнено(СтрокаПлощадки.ПлощадкаGUID) Тогда
			
			НайденныеПоСвязямХС = ТаблицаСвязанныхСХСПлощадок.НайтиСтроки(Новый Структура("ПлощадкаGUID",СтрокаПлощадки.ПлощадкаGUID));

			Для Каждого НайденныйПоСвязиХС Из НайденныеПоСвязямХС Цикл
				НайденнаяУчетка = УчетныеЗаписи.Найти(НайденныйПоСвязиХС.IssuerId,"IssuerId");
				НоваяСтрокаКэша = КэшУчетныхЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКэша,НайденнаяУчетка);
				НоваяСтрокаКэша.ПлощадкаGUID = НайденныйПоСвязиХС.ПлощадкаGUID;
				НайденнаяУчетка.ЕстьПлощадки = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//если еще не успели привязать площадку
	Для Каждого СтрокаХС Из УчетныеЗаписи Цикл
		Если СтрокаХС.ЕстьПлощадки <> Истина Тогда
			НоваяСтрокаКэша = КэшУчетныхЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКэша,СтрокаХС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьGUIDВладельцаПлощадки(GUIDПлощадки)
	
	GUIDВладельца = "";
	
	WSПрокси = ПолучитьWSПроксиEnterpriseService();
	
	ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю данные о владельце площадке по GUID: "+GUIDПлощадки);
	Попытка
		Ответ = WSПрокси.GetEnterpriseByGuid(GUIDПлощадки);
	Исключение
		Сообщить("Не смог получить ответ от ГИС Цербер по площадке: "+GUIDПлощадки);
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		GUIDВладельца = ВычислитьXDTO(Ответ,"guid");
	Исключение
		Сообщить("Не смог разобрать ответ от ГИС Цербер по площадке: "+GUIDПлощадки);
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат GUIDВладельца;

КонецФункции



//----------------------------------------------------------------------------------------------------------------
//Прикладная часть Модуля
//----------------------------------------------------------------------------------------------------------------


//МЕРКУРИЙ


//Общие
Функция ПартнерМеркурий() Экспорт
	
	СписокПартнеров =  ОсновнойМодуль.ПолучитьСписокЭлементовСправочника("Партнеры");
	Если СписокПартнеров = Неопределено 
		ИЛИ СписокПартнеров.Количество() = 0
		ИЛИ СписокПартнеров.Найти("Меркурий","Наименование") = Неопределено
		Тогда
		Возврат неопределено;
	КонецЕсли;
	
	ПартнерМеркурий = СписокПартнеров.Найти("Меркурий","Наименование").Ссылка;
    Возврат ПартнерМеркурий;
КонецФункции

Функция ИспользуемаяВерсияAPI() Экспорт

	Если ИспользуемаяВерсияAPI = Неопределено Тогда
		ИспользуемаяВерсияAPI = ?(ПолучитьКонстантуEDI("М_ИспользоватьAPI20ДляТранзакций") = Истина,"20","14");
	КонецЕсли;
	
	Возврат ИспользуемаяВерсияAPI;
	
КонецФункции // ИспользуемаяВерсияAPI()

Функция ИспользуетсяРазграничениеПрав() Экспорт

	Если ИспользуетсяРазграничениеПрав = Неопределено Тогда
		ИспользуетсяРазграничениеПрав = ПолучитьКонстантуEDI("М_ИспользоватьРазграничениеПрав") = Истина;	
	КонецЕсли;
	
	Возврат ИспользуетсяРазграничениеПрав;
	
КонецФункции // ИспользуемаяВерсияAPI()

Функция ВыбратьПараметрыПодключенияДляТранзакции(ТипСообщения, Параметры, ВерсияAPI = Неопределено) Экспорт
	
	Если ВерсияAPI = Неопределено Тогда
		Если (ТипСообщения="M_DES" ИЛИ ТипСообщения = "M_MOV") И ПолучитьКонстантуEDI("М_ИспользоватьAPI20ДляТранзакций")=Истина Тогда 
			ВерсияAPI = "20";
		Иначе
			ВерсияAPI = "14";
		КонецЕсли;
	ИначеЕсли ВерсияAPI = "20" //на текущем этапе перенесена на 2.0 только транспортная операция т.к. по сути в ней весь сок.
		И ТипСообщения<>"M_DES" 
		И ТипСообщения<>"M_MOV" Тогда
		ВерсияAPI = "14";
	КонецЕсли;
	
	ПроверитьДоступ = Параметры.Свойство("ПроверитьДоступ") и Параметры.ПроверитьДоступ = Истина;
	
	Если ТипСообщения = "M_DES"
		ИЛИ ТипСообщения = "M_PRD"
		ИЛИ ТипСообщения = "M_MOV" Тогда
		Если Параметры.Свойство("Сообщение") Тогда
			Возврат ПолучитьПараметрыПодключенияМеркурий(Параметры.Сообщение.ХозяйствующийСубъектEDI.GUID,Параметры.Сообщение.ПлощадкаEDI.GUID,ВерсияAPI,ПроверитьДоступ);
		Иначе
			Возврат ПолучитьПараметрыПодключенияМеркурий(,,ВерсияAPI);
		КонецЕсли;
		
	ИначеЕсли ТипСообщения = "M_INC"
		ИЛИ ТипСообщения = "M_REC" Тогда
		Если Параметры.Свойство("Сообщение") Тогда
			Возврат ПолучитьПараметрыПодключенияМеркурий(Параметры.Сообщение.ХозяйствующийСубъектПолучательEDI.GUID,Параметры.Сообщение.ПлощадкаПолучательEDI.GUID,ВерсияAPI,ПроверитьДоступ);
		Иначе
			Возврат ПолучитьПараметрыПодключенияМеркурий();
		КонецЕсли;
	Иначе
		//не понятно что за транзакция такая - идем с дефолтными параметрами
	  Возврат ПолучитьПараметрыПодключенияМеркурий(,,ВерсияAPI);
 	КонецЕсли;
  
КонецФункции


Функция ВыполнитьТранзакциюМеркурий(ТипСообщения,Документ=неопределено,Параметры) Экспорт
	//предусмотреть валидации
	
	ЭтоПакетнаяОтправка = Ложь;
	Если Параметры.Свойство("ОтправитьСообщениеИзФормы") И Параметры.ОтправитьСообщениеИзФормы = Ложь Тогда 
		ЭтоПакетнаяОтправка = Истина;
	КонецЕсли;
	
	ВерсияAPI=?(ПолучитьКонстантуEDI("М_ИспользоватьAPI20ДляТранзакций")=Истина,"20","14");
	
	Параметры.Вставить("ПроверитьДоступ", Истина);
	ПараметрыПодключенияДляТранзакции = ВыбратьПараметрыПодключенияДляТранзакции(ТипСообщения,Параметры,ВерсияAPI);
	Если ПараметрыПодключенияДляТранзакции.ЕстьДоступ = ложь Тогда
		//Сообщить(ПараметрыПодключенияДляТранзакции.СообщениеДоступа);
		Возврат Ложь;
	КонецЕсли;
	
	//преобразовать Сообщение в XDTO
	Если ВерсияAPI = "20" Тогда
		ПараметрыТранзакции = ЗаписатьСообщениеМеркурийXDTO_20(ТипСообщения,Параметры);
	Иначе
		//преобразовать Сообщение в XDTO
		ПараметрыТранзакции = ЗаписатьСообщениеМеркурийXDTO(ТипСообщения,Параметры);
	КонецЕсли;
	//выполнитьЗапрос
	
	Если Параметры.Свойство("Сообщение") И Параметры.Сообщение.Свойство("Завершена") И Параметры.Сообщение.Завершена = Истина Тогда
		//завершение незавершенного производства
		ПараметрыТранзакции.Вставить("localTransactionId", "IncomingRobot");
		ПараметрыТранзакции.Вставить("ИмяМетода", Параметры.ИмяМетода);
		
		ОтветМеркурия = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключенияДляТранзакции, Параметры.ИмяМетода,Истина); //сразу ждем результат
		ОбработатьРезультатЗавершенияНезавершенногоПроизводства(ОтветМеркурия,Параметры);
		Возврат неопределено;
	КонецЕсли;
	
	Если (Параметры.Свойство("ПереотправкаСообщения") И Параметры.ПереотправкаСообщения = Истина) 
		ИЛИ (Параметры.Свойство("СообщениеСсылка") И ЗначениеЗаполнено(Параметры.СообщениеСсылка))
		Тогда
		Параметры.Сообщение.СообщениеСсылка = Параметры.СообщениеСсылка;
		Код=Параметры.СообщениеСсылка.Код;
		Если Не (Параметры.Свойство("НеЗаписыватьСообщение") и Параметры.НеЗаписыватьСообщение=Истина) Тогда //если есть параметр НеЗаписыватьСообщение и он установлен в Истина - сообщение не записывать. Используется при гашении ЭВСД в процедурах ОсновныеДействияФормыПогасить() формы Меркурий_Сообщение и ПогаситьВходящийВСДПакетно(), СообщениеПогаситьВСД() модуля объекта. По хорошему, надо рефакторить, т.к. повторяющийся код.
			ЗаписатьСообщение(Параметры.Сообщение);
		КонецЕсли;
	Иначе
		
		//новая транзакция
		Если Параметры.Свойство("СообщениеДляСохранения") И ЗначениеЗаполнено(Параметры.СообщениеДляСохранения) тогда
			СообщениеСтруктураДляСохраненияВСправочнике = Параметры.СообщениеДляСохранения; 
		Иначе
			СообщениеСтруктураДляСохраненияВСправочнике = Параметры.Сообщение; 
		КонецЕсли;
		
		Код=СоздатьСообщениеМеркурий(СообщениеСтруктураДляСохраненияВСправочнике);
		Параметры.СообщениеСсылка = СообщениеСтруктураДляСохраненияВСправочнике.СообщениеСсылка; // если это M_REC то последующие вызовы Этой функции не будут создавать новое сообщение
		Параметры.Сообщение.СообщениеСсылка = Параметры.СообщениеСсылка;
	КонецЕсли;
	
	ПараметрыТранзакции.Вставить("localTransactionId", Строка(Код));
	ПараметрыТранзакции.Вставить("ИмяМетода", Параметры.ИмяМетода);
	
	Если Параметры.Свойство("ВСДUUID") Тогда
		ПараметрыТранзакции.Вставить("ВСДUUID", Параметры.ВСДUUID);
	КонецЕсли;
	
	ДожидатьсяРезультата = Ложь;
	Если ЭтоПакетнаяОтправка И локПолучитьКонстантуEDI("М_ВПакетныхДожидатьсяЗавершенияПредыдущей") <> Ложь Тогда 
		ДожидатьсяРезультата = Истина;
	КонецЕсли;
		
	//-------------------------------------- Непосредственно отправка --------------------------------------	
	//НачатьТранзакцию();
	Если (Параметры.Свойство("ПереотправкаСообщения") И Параметры.ПереотправкаСообщения = Истина) 
		Тогда
		РезультатПодготовкиКПереотправке = ПометитьСообщениеПереотправленным(Параметры.СообщениеСсылка);
		Если РезультатПодготовкиКПереотправке.Успешно = Истина Тогда
			Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключенияДляТранзакции, Параметры.ИмяМетода,ДожидатьсяРезультата);
		Иначе
			Сообщить(РезультатПодготовкиКПереотправке.ОписаниеОшибки);
		КонецЕсли;
	Иначе
		Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(ВерсияAPI), ПараметрыТранзакции, ПараметрыПодключенияДляТранзакции, Параметры.ИмяМетода,ДожидатьсяРезультата);
		
	КонецЕсли;
	//ЗафиксироватьТранзакцию();
	
КонецФункции


Функция ПометитьСообщениеПереотправленным(СообщениеМеркурийСсылка)
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	Если Не ЗначениеЗаполнено(СообщениеМеркурийСсылка) Тогда
		Результат.Успешно = Ложь;
		Результат.ОписаниеОшибки = "Не найдено переотправляемое сообщение";
		Возврат Результат;
	Иначе
		СообщениеМеркурий = СообщениеМеркурийСсылка.ПолучитьОбъект();
		
		//Если найдутся строки по которым не доехали статусы - то такое сообщение нельзя переотправлять
		НайденныеapplicationId = СообщениеМеркурий.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("ИмяРеквизита","applicationId"));
		
		Если НайденныеapplicationId.количество() >0 Тогда
			Результат.Успешно = Ложь;
			Результат.ОписаниеОшибки = "По сообщениею есть обрабатываемые ГИС Меркурий запросы, следует дождаться их обработки. Попробуйте выполнить Обмен.";
			Возврат Результат;
		КонецЕсли;
		
		//удалить ошибки из описания
		СообщениеМеркурий.ОписаниеОшибки = "";
		СообщениеМеркурий.Статус = "ОжидаетОтправки";
		
		//Пометить  #Ошибка в ТЧ
		НайденныеОшибки = СообщениеМеркурий.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("ИмяРеквизита","Ошибка"));
		
		Для каждого НайденнаяОшибка Из НайденныеОшибки Цикл
			НайденнаяОшибка.ИмяРеквизита = "#Ошибка";
		КонецЦикла;
		
		СообщениеМеркурий.Записать();
		Результат.Успешно = Истина;
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция МеркурийПолучитьМетаданныеПоляСообщения(ВидСтруктуры,ТабМетаданныхПоля) Экспорт
	
	Если ВидСтруктуры = "МеркурийТранспортировка" Тогда
		
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ВидТранспорта"					, "Строка35");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НомерВагона"					, "Строка35");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НомерТранспортногоСредства"		, "Строка35");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НомерПолуприцепа"				, "Строка35");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НомерКонтейнера"				, "Строка35"); //(или судна)
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НомерАвиарейса"					, "Строка35");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "СпособХраненияПриПеревозке"		, "Строка35");
		
	ИначеЕсли ВидСтруктуры = "МеркурийХозяйствующийСубъект" Тогда
		
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "GLN"							, "GLN");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "UUID"							, "Строка36");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "GUID"							, "Строка36");
		
	ИначеЕсли ВидСтруктуры = "МеркурийПлощадка" Тогда
		
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "GLN"							, "GLN");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "UUID"							, "Строка36");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "GUID"							, "Строка36");
		
	ИначеЕсли ВидСтруктуры = "МеркурийЦель" Тогда
		
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "GUID"							, "Строка36");
		
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьТаблицуПоВходящимВСДИзФрагментаОтвета(ТаблицаВСД,СписокВСДXDTO)
	
	//важно понимать что если у нас учетка пользователя ГВЭ - мы можем получить лишнего трэшака
	//также мы можем ограничить доступ БАЗЫ 1С до площадки
	//все это сейчас через галочку "Наш" делается
	НашиПлощадки = ПолучитьТаблицуНашихПлощадок();
	
	Для Каждого СтрокаВСДXDTO Из СписокВСДXDTO Цикл
		
		ПлощадкаПолучательGUID 	= ВычислитьXDTO(СтрокаВСДXDTO,"consignee.enterprise.guid");
		Если НашиПлощадки.Найти(ПлощадкаПолучательGUID,"GUID") = Неопределено Тогда 
			Продолжить; //это площадка, с которой этой базе 1С не велено забирать ВСД
		КонецЕсли;
		
		НоваяСтрока = ТаблицаВСД.Добавить();
		НоваяСтрока.ДатаВСД 	= ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(СтрокаВСДXDTO,"issueDate"));
		
		Если СтрокаВСДXDTO.Свойства().Получить("waybillNumber")<>Неопределено Тогда 
			НоваяСтрока.НомерТТН 	= ВычислитьXDTO(СтрокаВСДXDTO,"waybillNumber");
		КонецЕсли;
		
		НоваяСтрока.Статус = ВычислитьXDTO(СтрокаВСДXDTO,"status");
		
		Если СтрокаВСДXDTO.Свойства().Получить("waybillDate")<>Неопределено Тогда 
			НоваяСтрока.ДатаТТН 	= ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(СтрокаВСДXDTO,"waybillDate"));
		КонецЕсли;
		
		НоваяСтрока.ПлощадкаПолучательGUID = ПлощадкаПолучательGUID;
		
		НоваяСтрока.ФормаДокумента 	= ВычислитьXDTO(СтрокаВСДXDTO,"form");
		НоваяСтрока.ТипТранспорта 	= ВычислитьXDTO(СтрокаВСДXDTO,"transportInfo.transportType");
		НоваяСтрока.НомерМашины 	= ВычислитьXDTO(СтрокаВСДXDTO,"transportInfo.transportNumber.vehicleNumber");
		НоваяСтрока.Тип 			= ВычислитьXDTO(СтрокаВСДXDTO,"type");
		
		НоваяСтрока.ВсдUUID 	= ВычислитьXDTO(СтрокаВСДXDTO,"uuid");
		
		НоваяСтрока._ОбъектXDTO  = СтрокаВСДXDTO;
	КонецЦикла;
	
КонецПроцедуры


Функция ПреобразоватьДатуwaybillDate_В_1С(Строка)
	
	Если ЗначениеЗаполнено(Строка) Тогда
		МассивДаты = ОсновнойМодуль.РазложитьСтроку(Строка,"-");
		Возврат Дата(Число(МассивДаты[0].Значение),Число(МассивДаты[1].Значение),Число(МассивДаты[2].Значение));
	КонецЕсли;

КонецФункции // ПреобразоватьДатуwaybillDate_В_1С(Строка)()

Функция ЗаписатьВходящееСообщениеМеркурий(ВходящееСообщение)
	
	// здесь - закинуть в справочник Сообщений получившееся сообщение;
	СоздатьСообщениеМеркурий(ВходящееСообщение,"Оформлен");
	
КонецФункции // ЗаписатьВходящееСообщениеМеркурий()

	
Функция ПолучитьСообщениеВходящейТТН()
	
	ПолучитьМетаданныеСообщенияМеркурий("M_REC", "Входящее");
	Сообщение = ОсновнойМодуль.ПолучитьСтруктуруСообщения("M_REC","Входящее");
	Сообщение.Направление = "Входящее";
	Сообщение.ТипСообщения = "M_INC";
	
	Возврат Сообщение;
	
КонецФункции

//ждет на входе или список XDTO VetDoc или список строк ТЧ у которой есть колонка _ОбъектXDTO и там VetDoc
Функция ЗаполнитьСообщениеВходящегоВСД(Сообщение,СтрокиВСДXDTO,ТипСообщения=Неопределено)
	
	
	Если ТипЗнч(СтрокиВСДXDTO) = Тип("ОбъектXDTO") Тогда
		ИсточникДляШапки = СтрокиВСДXDTO;
	ИначеЕсли ТипЗнч(СтрокиВСДXDTO) = Тип("СписокXDTO")
		ИЛИ ТипЗнч(СтрокиВСДXDTO) = Тип("Массив") Тогда
		Если ТипЗнч(СтрокиВСДXDTO) = Тип("СписокXDTO") Тогда
			ИсточникДляШапки = СтрокиВСДXDTO[0];
		Иначе
			ИсточникДляШапки = СтрокиВСДXDTO[0]._ОбъектXDTO;
		КонецЕсли;
	КонецЕсли;
	//заполнение Сообщения по СтрокиВСДXDTO
	
	//это ключи по которым была свертка (3 шт.)
	Сообщение.ДокументEDI.Номер = ВычислитьXDTO(ИсточникДляШапки,"waybillNumber");
	Сообщение.ДокументEDI.Дата = ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(ИсточникДляШапки,"waybillDate"));
	Сообщение.ДатаПоставки = ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(ИсточникДляШапки,"issueDate"));
	
	
	Сообщение.Партнер = ПартнерМеркурий();
	Сообщение.Статус = "Оформлен";
	Сообщение.ПлощадкаEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.enterprise.guid");
	Сообщение.ПлощадкаEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.enterprise.uuid");
	Сообщение.ПлощадкаПолучательEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.enterprise.guid");
	Сообщение.ПлощадкаПолучательEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.enterprise.uuid");
	
	Если Сообщение.Свойство("ПеревозчикEDI") Тогда 
		Сообщение.ПеревозчикEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"broker.guid");
	КонецЕсли;
	
	Сообщение.ХозяйствующийСубъектEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.businessEntity.guid");
	Сообщение.ХозяйствующийСубъектEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.businessEntity.uuid");
	Сообщение.ХозяйствующийСубъектПолучательEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.businessEntity.guid");
	Сообщение.ХозяйствующийСубъектПолучательEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.businessEntity.uuid");
	//следует сразу сконвертировать в Организацию  т.к. этоn реквизит поеltn в реквизит справочника
	Сообщение.Организация 	= КонвертироватьЗначениеМеркурийв1C(Сообщение.ХозяйствующийСубъектПолучательEDI.GUID,,"МеркурийХС");
	
	//transportInfo
	Сообщение.Транспорт.ВидТранспорта = ВычислитьXDTO(ИсточникДляШапки,"transportInfo.transportType");	
	Сообщение.Транспорт.НомерТранспортногоСредства = ВычислитьXDTO(ИсточникДляШапки,"transportInfo.transportNumber.vehicleNumber");	
	Сообщение.Транспорт.СпособХраненияПриПеревозке = ВычислитьXDTO(ИсточникДляШапки,"transportStorageType");
	
	Если ТипЗнч(СтрокиВСДXDTO) = Тип("ОбъектXDTO") Тогда
		СтрокаТоваровXDTO = СтрокиВСДXDTO;
			НоваяСтрокаТоваровСообщения = Сообщение.Товары.Добавить();
			НоваяСтрокаТоваровСообщения.НомерСтроки = 1;
			ЗаполнитьСтрокуСообщенияИзXDTO(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO);
	ИначеЕсли ТипЗнч(СтрокиВСДXDTO) = Тип("СписокXDTO")
		ИЛИ ТипЗнч(СтрокиВСДXDTO) = Тип("Массив") Тогда
		й=0;
		Для Каждого СтрокаТоваровXDTO Из СтрокиВСДXDTO Цикл
			//здесь также будут прилетать ВСД которые в данный момент не нужны (например, уничтожение исходных партий)
			//Такие ВСД следует пропустить
			Если ТипСообщения = "M_DES" Тогда
				Если СтрокаТоваровXDTO.type <> "TRANSPORT" Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			й=й+1;
			НоваяСтрокаТоваровСообщения = Сообщение.Товары.Добавить();
			НоваяСтрокаТоваровСообщения.НомерСтроки = й;
			Если ТипЗнч(СтрокаТоваровXDTO) = Тип("ОбъектXDTO") Тогда
				ЗаполнитьСтрокуСообщенияИзXDTO(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO);
			Иначе
				ЗаполнитьСтрокуСообщенияИзXDTO(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO._ОбъектXDTO);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // КонвертироватьВходящийВСД_EDI_В_1С()

Функция ПолучитьТаблицуЗначенийСвязанныхДокументовИзXDTO_20(referencedDocumentСписокXDTO)

	МассивreferencedDocument = ВычислитьМассивXDTO(referencedDocumentСписокXDTO);
    ТаблицаСвязанныхДокументов = ПустаяТаблицаСопроводительныхДокументов();
	
	Для Каждого referencedDocument Из МассивreferencedDocument Цикл
		НоваяСтрокаДокумента = ТаблицаСвязанныхДокументов.Добавить();
		НоваяСтрокаДокумента.НомерДокумента = ВычислитьXDTO(referencedDocument,"issueNumber");
		НоваяСтрокаДокумента.ДатаДокумента = ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(referencedDocument,"issueDate"));
		НоваяСтрокаДокумента.ТипДокумента = ВычислитьXDTO(referencedDocument,"type");
		НоваяСтрокаДокумента.ТипСвязи = ВычислитьXDTO(referencedDocument,"relationshipType");
	КонецЦикла;

	Возврат ТаблицаСвязанныхДокументов;
	
КонецФункции // ПолучитьТаблицуЗначенийСвязанныхДокументовИзXDTO_20()

Функция ПустаяТаблицаСопроводительныхДокументов()

	ТаблицаСопроводительныхДокументов = Новый ТаблицаЗначений;
	ТаблицаСопроводительныхДокументов.Колонки.Добавить("НомерДокумента",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)),"НомерДокумента");
	
	ТаблицаСопроводительныхДокументов.Колонки.Добавить("ДатаДокумента", Новый ОписаниеТипов("Дата", , ,
															  Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	ТаблицаСопроводительныхДокументов.Колонки.Добавить("ТипДокумента",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(2, ДопустимаяДлина.Переменная)),"ТипДокумента");
	
	ТаблицаСопроводительныхДокументов.Колонки.Добавить("ТипСвязи",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(1, ДопустимаяДлина.Переменная)));
	
	Возврат ТаблицаСопроводительныхДокументов;

КонецФункции // ПустаяТаблицаСопроводительныхДокументов()


Функция ЗаполнитьРеквизитыШапкиСообщенияИзXDTO(Сообщение,ИсточникДляШапки)  //ИсточникДляШапки- VetDoc
	
	ТаблицаСвязанныхДокументов = ПолучитьТаблицуЗначенийСвязанныхДокументовИзXDTO_20(ВычислитьXDTO(ИсточникДляШапки,"referencedDocument"));
	НайденнаяСтрокаТТН = ТаблицаСвязанныхДокументов.Найти("1","ТипДокумента");
	Если НайденнаяСтрокаТТН <> Неопределено Тогда 
		Сообщение.ДокументEDI.Номер = НайденнаяСтрокаТТН.НомерДокумента;
		Сообщение.ДокументEDI.Дата = НайденнаяСтрокаТТН.ДатаДокумента;
	КонецЕсли;
	
	НайденнаяСтрокаЗаказа = ТаблицаСвязанныхДокументов.Найти("16","ТипДокумента");
	Если НайденнаяСтрокаЗаказа <> Неопределено Тогда 
		Сообщение.ЗаказEDI.Номер = НайденнаяСтрокаЗаказа.НомерДокумента;
		Сообщение.ЗаказEDI.Дата = НайденнаяСтрокаЗаказа.ДатаДокумента;
	КонецЕсли;
	
	//Ищем Торг-12
	НайденнаяСтрокаНакладной = ТаблицаСвязанныхДокументов.Найти("6","ТипДокумента");
	Если НайденнаяСтрокаНакладной = Неопределено Тогда  //Ищем Торг-13
		НайденнаяСтрокаНакладной = ТаблицаСвязанныхДокументов.Найти("10","ТипДокумента");
	КонецЕсли;
	Если НайденнаяСтрокаНакладной = Неопределено Тогда  //Ищем Транспортная накладная - что бы она не значила
		НайденнаяСтрокаНакладной = ТаблицаСвязанныхДокументов.Найти("5","ТипДокумента");
	КонецЕсли;
	//Если НайденнаяСтрокаНакладной = Неопределено Тогда  //зарезервировано когда будет УПД
	//	НайденнаяСтрокаНакладной = ТаблицаСвязанныхДокументов.Найти("17","ТипДокумента");
	//КонецЕсли;
	Если НайденнаяСтрокаНакладной <> Неопределено Тогда 
		Сообщение.НакладнаяEDI.Номер = НайденнаяСтрокаНакладной.НомерДокумента;
		Сообщение.НакладнаяEDI.Дата = НайденнаяСтрокаНакладной.ДатаДокумента;
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьСообщениеВходящегоВСД_20(Сообщение,СтрокиВСДXDTO,ТипСообщения=Неопределено)
	
	
	Если ТипЗнч(СтрокиВСДXDTO) = Тип("ОбъектXDTO") Тогда
		ИсточникДляШапки = СтрокиВСДXDTO;
	ИначеЕсли ТипЗнч(СтрокиВСДXDTO) = Тип("СписокXDTO")
		ИЛИ ТипЗнч(СтрокиВСДXDTO) = Тип("Массив") Тогда
		Если ТипЗнч(СтрокиВСДXDTO) = Тип("СписокXDTO") Тогда
			ИсточникДляШапки = СтрокиВСДXDTO[0];
		Иначе
			ИсточникДляШапки = СтрокиВСДXDTO[0]._ОбъектXDTO;
		КонецЕсли;
	КонецЕсли;
	//заполнение Сообщения по СтрокиВСДXDTO
	
	ЗаполнитьРеквизитыШапкиСообщенияИзXDTO(Сообщение,ИсточникДляШапки);
	
	Сообщение.Партнер = ПартнерМеркурий();
	Сообщение.Статус = "Оформлен";
	Сообщение.ПлощадкаEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"certifiedConsignment.consignor.enterprise.guid");
	Сообщение.ПлощадкаEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"certifiedConsignment.consignor.enterprise.uuid");
	Сообщение.ПлощадкаПолучательEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"certifiedConsignment.consignee.enterprise.guid");
	Сообщение.ПлощадкаПолучательEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"certifiedConsignment.consignee.enterprise.uuid");
	
	Если Сообщение.Свойство("ПеревозчикEDI") Тогда 
		Сообщение.ПеревозчикEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"certifiedConsignment.broker.guid");
	КонецЕсли;
	
	Сообщение.ХозяйствующийСубъектEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"certifiedConsignment.consignor.businessEntity.guid");
	Сообщение.ХозяйствующийСубъектEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"certifiedConsignment.consignor.businessEntity.uuid");
	Сообщение.ХозяйствующийСубъектПолучательEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"certifiedConsignment.consignee.businessEntity.guid");
	Сообщение.ХозяйствующийСубъектПолучательEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"certifiedConsignment.consignee.businessEntity.uuid");
	//следует сразу сконвертировать в Организацию  т.к. этот реквизит поедет в реквизит справочника
	Сообщение.Организация 	= КонвертироватьЗначениеМеркурийв1C(Сообщение.ХозяйствующийСубъектПолучательEDI.GUID,,"МеркурийХС");
	
	//transportInfo
	Сообщение.Транспорт.ВидТранспорта = ВычислитьXDTO(ИсточникДляШапки,"certifiedConsignment.transportInfo.transportType");	
	Сообщение.Транспорт.НомерТранспортногоСредства = ВычислитьXDTO(ИсточникДляШапки,"certifiedConsignment.transportInfo.transportNumber.vehicleNumber");	
	Сообщение.Транспорт.СпособХраненияПриПеревозке = ВычислитьXDTO(ИсточникДляШапки,"certifiedConsignment.transportStorageType");
	
	МассивСтрокВСДXDTO = ВычислитьМассивXDTO(СтрокиВСДXDTO);
	
	й=0;
	Для Каждого СтрокаТоваровXDTO Из МассивСтрокВСДXDTO Цикл
		//здесь также будут прилетать ВСД которые в данный момент не нужны (например, уничтожение исходных партий)
		//Такие ВСД следует пропустить
		Если ТипСообщения = "M_DES" ИЛИ ТипСообщения = "M_MOV" Тогда
			Если ВычислитьXDTO(СтрокаТоваровXDTO,"vetDType") <> "TRANSPORT" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		й=й+1;
		НоваяСтрокаТоваровСообщения = Сообщение.Товары.Добавить();
		НоваяСтрокаТоваровСообщения.НомерСтроки = й;
		Если ТипЗнч(СтрокаТоваровXDTO) = Тип("ОбъектXDTO") Тогда
			ЗаполнитьСтрокуСообщенияИзXDTO_20(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO);
		Иначе
			ЗаполнитьСтрокуСообщенияИзXDTO_20(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO._ОбъектXDTO);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции // КонвертироватьВходящийВСД_EDI_В_1С()

Функция НайтиОбъектДопСправочниковПоGUID(GUID) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""GUID""
	|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = &GUID
	|	И НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("GUID",GUID);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции


Функция НайтиНоменклатуруИлиНазвание4УровняКлассификации(productItemUUID) Экспорт
	РезультатФункции = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,НайденВМеркурий,РезультатМеркурия");
	
	//Рефакторинг Вот по идее надо сделать полноценную функцию поиска по своим соответствиям
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурМеркурий_КаталогПродукции.Номенклатура,
	|	КонтурМеркурий_КаталогПродукции.ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.КонтурМеркурий_КаталогПродукции КАК КонтурМеркурий_КаталогПродукции
	|ГДЕ
	|	КонтурМеркурий_КаталогПродукции.МеркурийproductItemUUID = &МеркурийproductItemUUID";
	
	Запрос.УстановитьПараметр("МеркурийproductItemUUID",productItemUUID);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		РезультатФункции.Номенклатура = Выборка.Номенклатура;
		РезультатФункции.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		РезультатФункции.НайденВМеркурий = Ложь;
		РезультатФункции.РезультатМеркурия = "не искали";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатФункции.Номенклатура) Тогда
		
		Возврат РезультатФункции;
		
	Иначе
		
		РезультатЗапроса = ЗапроситьСведенияО_productItem_ПоUUID(productItemUUID);	
		Если РезультатЗапроса.Успешно = Истина Тогда
			РезультатФункции.НайденВМеркурий = Истина;
			РезультатФункции.РезультатМеркурия = РезультатЗапроса;
		Иначе
			РезультатФункции.НайденВМеркурий = Ложь;
			РезультатФункции.РезультатМеркурия = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции // НайтиНазваниеИлиНоменклатуру4УровняКлассификации()

Процедура ЗаполнитьСтрокуСообщенияИзXDTO(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO)
	
	НоваяСтрокаТоваровСообщения.GUID = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.subProduct.guid");
	НоваяСтрокаТоваровСообщения.UUID = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.subProduct.uuid");
	НоваяСтрокаТоваровСообщения.unitGUID = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.unit.guid");
	НоваяСтрокаТоваровСообщения.unitUUID = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.unit.uuid");
	НоваяСтрокаТоваровСообщения.ВетСертификатUUID = ВычислитьXDTO(СтрокаТоваровXDTO,"uuid");
	НоваяСтрокаТоваровСообщения.ВетСертификатБлагополучиеМестности	 = ВычислитьXDTO(СтрокаТоваровXDTO,"locationProsperity");
	НоваяСтрокаТоваровСообщения.ВетСертификатВрачДолжность			 = ВычислитьXDTO(СтрокаТоваровXDTO,"confirmedBy.post");
	НоваяСтрокаТоваровСообщения.ВетСертификатВрачФИО				 = ВычислитьXDTO(СтрокаТоваровXDTO,"confirmedBy.fio");
	НоваяСтрокаТоваровСообщения.ВетСертификатДата					 = ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(СтрокаТоваровXDTO,"issueDate"));
	НоваяСтрокаТоваровСообщения.ВетСертификатНомер					 = ВычислитьXDTO(СтрокаТоваровXDTO,"issueNumber"); //не отдают этот номер - это очень плохо
	НоваяСтрокаТоваровСообщения.ВетСертификатТип					 = ВычислитьXDTO(СтрокаТоваровXDTO,"type");
	
	НоваяСтрокаТоваровСообщения.ВетСертификатОбследованоВетВрачом	 = СпасибоЗаОшибкиВXSDСхеме("boolean",ВычислитьXDTO(СтрокаТоваровXDTO,"cargoInspected"));
	НоваяСтрокаТоваровСообщения.ВетСертификатОсобыеОтметки			 = ВычислитьXDTO(СтрокаТоваровXDTO,"specialMarks");
	//НоваяСтрокаТоваровСообщения.ВетСертификатРезультатыЭкспертизы	 = ВычислитьXDTO(СтрокаТоваровXDTO,"");
	НоваяСтрокаТоваровСообщения.ВетСертификатСерия					 = ВычислитьXDTO(СтрокаТоваровXDTO,"issueSeries");
	НоваяСтрокаТоваровСообщения.ВетСертификатСпособХраненияПриПеревозке	 = ВычислитьXDTO(СтрокаТоваровXDTO,"transportStorageType");
	НоваяСтрокаТоваровСообщения.ВетСертификатФорма					 = ВычислитьXDTO(СтрокаТоваровXDTO,"form");
	НоваяСтрокаТоваровСообщения.ВетСертификатЭкспертиза				 = СпасибоЗаОшибкиВXSDСхеме("boolean",ВычислитьXDTO(СтрокаТоваровXDTO,"cargoExpertized"));
	НоваяСтрокаТоваровСообщения.ДатаПроизводства 					 = ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(СтрокаТоваровXDTO,"batch.dateOfProduction.firstDate"));
	НоваяСтрокаТоваровСообщения.ДатаПроизводства2					 = ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(СтрокаТоваровXDTO,"batch.dateOfProduction.secondDate"));
	НоваяСтрокаТоваровСообщения.СрокГодности						 = ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(СтрокаТоваровXDTO,"batch.expiryDate.firstDate"));
	НоваяСтрокаТоваровСообщения.СрокГодности2						 = ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(СтрокаТоваровXDTO,"batch.expiryDate.secondDate"));
	НоваяСтрокаТоваровСообщения.ЕдиницаИзмеренияУпаковокUUID		 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.packingList.packingForm.UUID");
	НоваяСтрокаТоваровСообщения.Количество							 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.volume");
	НоваяСтрокаТоваровСообщения.КоличествоУпаковок					 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.packingAmount");
	
	НоваяСтрокаТоваровСообщения.Наименование						 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.productItem.name");
	НоваяСтрокаТоваровСообщения.productItemUUID						 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.productItem.uuid");
	
	Если Не ЗначениеЗаполнено(НоваяСтрокаТоваровСообщения.Наименование)
		И ЗначениеЗаполнено(НоваяСтрокаТоваровСообщения.productItemUUID) Тогда
		//Рефакторинг - вынести на уровень выше и сделать одним запросом по товарам
		
		//сначала попробуем найти его среди наших соответствий а затем уже и сам меркурий спросим
		Результат = НайтиНоменклатуруИлиНазвание4УровняКлассификации(НоваяСтрокаТоваровСообщения.productItemUUID);
		Если ЗначениеЗаполнено(Результат.Номенклатура)  Тогда 
			НоваяСтрокаТоваровСообщения.Наименование = Строка(Результат.Номенклатура);
		ИначеЕсли Результат.НайденВМеркурий = Истина Тогда
			НоваяСтрокаТоваровСообщения.Наименование = Результат.РезультатМеркурия.Наименование;
		КонецЕсли;
		
	КонецЕсли;
	
	
	//маркировки достанем из списка и сложим через запятую
	СписокМаркировок =   ВычислитьXDTO(СтрокаТоваровXDTO,"batch.productMarkingList");
	Если  ТипЗнч(СписокМаркировок) = Тип("ОбъектXDTO") Тогда
		НоваяСтрокаТоваровСообщения.Маркировка							 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.productMarkingList.productMarking");
	ИначеЕсли ТипЗнч(СписокМаркировок) = Тип("СписокXDTO") Тогда
		Для Каждого ЭлементСпискаМаркировок Из СписокМаркировок Цикл
			НоваяСтрокаТоваровСообщения.Маркировка = ""+НоваяСтрокаТоваровСообщения.Маркировка + ?(ЗначениеЗаполнено(НоваяСтрокаТоваровСообщения.Маркировка),", ","") +ВычислитьXDTO(ЭлементСпискаМаркировок,"productMarking");
		КонецЦикла;
	КонецЕсли;
	
	НоваяСтрокаТоваровСообщения.НекачественныйГруз					 = СпасибоЗаОшибкиВXSDСхеме("boolean",ВычислитьXDTO(СтрокаТоваровXDTO,"batch.lowGradeCargo"));
	НоваяСтрокаТоваровСообщения.ПлощадкаПроизводительGUID			 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.producerList.producer.enterprise.guid");
	НоваяСтрокаТоваровСообщения.Скоропортящаяся						 = СпасибоЗаОшибкиВXSDСхеме("boolean",ВычислитьXDTO(СтрокаТоваровXDTO,"batch.perishable"));
	НоваяСтрокаТоваровСообщения.Статус								 = ВычислитьXDTO(СтрокаТоваровXDTO,"status");
	НоваяСтрокаТоваровСообщения.СтранаUUID							 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.countryOfOrigin.UUID");
	НоваяСтрокаТоваровСообщения.ЦельEDI								 = ВычислитьXDTO(СтрокаТоваровXDTO,"purpose.guid");
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуСообщенияИзXDTO_20(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO)
	
	certifiedConsignment = ВычислитьXDTO(СтрокаТоваровXDTO,"certifiedConsignment");
	
	НоваяСтрокаТоваровСообщения.GUID = ВычислитьXDTO(certifiedConsignment,"batch.subProduct.guid");
	НоваяСтрокаТоваровСообщения.UUID = ВычислитьXDTO(certifiedConsignment,"batch.subProduct.uuid");
	НоваяСтрокаТоваровСообщения.unitGUID = ВычислитьXDTO(certifiedConsignment,"batch.unit.guid");
	НоваяСтрокаТоваровСообщения.unitUUID = ВычислитьXDTO(certifiedConsignment,"batch.unit.uuid");
	НоваяСтрокаТоваровСообщения.ВетСертификатUUID = ВычислитьXDTO(СтрокаТоваровXDTO,"uuid");
	
	НоваяСтрокаТоваровСообщения.ВетСертификатБлагополучиеМестности	 = ВычислитьXDTO(СтрокаТоваровXDTO,"authentication.locationProsperity");
	НоваяСтрокаТоваровСообщения.ВетСертификатВрачДолжность		 	 = ВычислитьXDTO(СтрокаТоваровXDTO,"statusChange.specifiedPerson.post");
	НоваяСтрокаТоваровСообщения.ВетСертификатВрачФИО				 = ВычислитьXDTO(СтрокаТоваровXDTO,"statusChange.specifiedPerson.fio");
	
	НоваяСтрокаТоваровСообщения.ВетСертификатДата					 = ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(СтрокаТоваровXDTO,"issueDate"));
	НоваяСтрокаТоваровСообщения.ВетСертификатТип					 = ВычислитьXDTO(СтрокаТоваровXDTO,"vetDType");
	
	НоваяСтрокаТоваровСообщения.ВетСертификатОсобыеОтметки			 = ВычислитьXDTO(СтрокаТоваровXDTO,"authentication.specialMarks");
	НоваяСтрокаТоваровСообщения.ВетСертификатОбследованоВетВрачом	 = СпасибоЗаОшибкиВXSDСхеме("boolean",ВычислитьXDTO(СтрокаТоваровXDTO,"authentication.cargoInspected"));
	НоваяСтрокаТоваровСообщения.ВетСертификатЭкспертиза				 = ВычислитьXDTO(СтрокаТоваровXDTO,"authentication.cargoExpertized");
	//НоваяСтрокаТоваровСообщения.ВетСертификатРезультатыЭкспертизы	 = ВычислитьXDTO(certifiedConsignment,"");
	
	//
	НоваяСтрокаТоваровСообщения.ВетСертификатНомер					 = ВычислитьXDTO(СтрокаТоваровXDTO,"issueNumber"); //может приехать если был распечатан на Бланке
	//не следует путать этот номер с номером ВСД в вебе и то т который их экранной форме , этот номер НЕ отдают - это, кстати, очень плохо
	НоваяСтрокаТоваровСообщения.ВетСертификатСерия					 = ВычислитьXDTO(СтрокаТоваровXDTO,"issueSeries"); //может приехать если был распечатан на Бланке
	
	НоваяСтрокаТоваровСообщения.ВетСертификатСпособХраненияПриПеревозке	 = ВычислитьXDTO(СтрокаТоваровXDTO,"certifiedConsignment.transportStorageType");
	
	НоваяСтрокаТоваровСообщения.ВетСертификатФорма					 = ВычислитьXDTO(СтрокаТоваровXDTO,"vetDForm");
	НоваяСтрокаТоваровСообщения.ДатаПроизводства 					 = ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(certifiedConsignment,"batch.dateOfProduction.firstDate"));
	НоваяСтрокаТоваровСообщения.ДатаПроизводства2					 = ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(certifiedConsignment,"batch.dateOfProduction.secondDate"));
	НоваяСтрокаТоваровСообщения.СрокГодности						 = ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(certifiedConsignment,"batch.expiryDate.firstDate"));
	НоваяСтрокаТоваровСообщения.СрокГодности2						 = ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(certifiedConsignment,"batch.expiryDate.secondDate"));
	
	//С упаковками и маркировками надо писать отдельную обертку....
	//НоваяСтрокаТоваровСообщения.ЕдиницаИзмеренияУпаковокUUID		 = ВычислитьXDTO(certifiedConsignment,"batch.packingList.packingForm.UUID");
	//НоваяСтрокаТоваровСообщения.КоличествоУпаковок					 = ВычислитьXDTO(certifiedConsignment,"batch.packingAmount");
	
	НоваяСтрокаТоваровСообщения.Количество							 = Число(ВычислитьXDTO(certifiedConsignment,"batch.volume"));
	
	//СписокМаркировок =   ВычислитьXDTO(certifiedConsignment,"batch.productMarkingList");
	//Если  ТипЗнч(СписокМаркировок) = Тип("ОбъектXDTO") Тогда
	//	НоваяСтрокаТоваровСообщения.Маркировка							 = ВычислитьXDTO(certifiedConsignment,"batch.productMarkingList.productMarking");
	//ИначеЕсли ТипЗнч(СписокМаркировок) = Тип("СписокXDTO") Тогда
	//	Для Каждого ЭлементСпискаМаркировок Из СписокМаркировок Цикл
	//		НоваяСтрокаТоваровСообщения.Маркировка = ""+НоваяСтрокаТоваровСообщения.Маркировка + ?(ЗначениеЗаполнено(НоваяСтрокаТоваровСообщения.Маркировка),", ","") +ВычислитьXDTO(ЭлементСпискаМаркировок,"productMarking");
	//	КонецЦикла;
	//КонецЕсли;
	
	НоваяСтрокаТоваровСообщения.Наименование						 = ВычислитьXDTO(certifiedConsignment,"batch.productItem.name");
	НоваяСтрокаТоваровСообщения.productItemUUID						 = ВычислитьXDTO(certifiedConsignment,"batch.productItem.uuid");
	
	Если Не ЗначениеЗаполнено(НоваяСтрокаТоваровСообщения.Наименование)
		И ЗначениеЗаполнено(НоваяСтрокаТоваровСообщения.productItemUUID) Тогда
		//Рефакторинг - вынести на уровень выше и сделать одним запросом по товарам
		
		//сначала попробуем найти его среди наших соответствий а затем уже и сам меркурий спросим
		Результат = НайтиНоменклатуруИлиНазвание4УровняКлассификации(НоваяСтрокаТоваровСообщения.productItemUUID);
		Если ЗначениеЗаполнено(Результат.Номенклатура)  Тогда 
			НоваяСтрокаТоваровСообщения.Наименование = Строка(Результат.Номенклатура);
		ИначеЕсли Результат.НайденВМеркурий = Истина Тогда
			НоваяСтрокаТоваровСообщения.Наименование = Результат.РезультатМеркурия.Наименование;
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрокаТоваровСообщения.НекачественныйГруз					 = СпасибоЗаОшибкиВXSDСхеме("boolean",ВычислитьXDTO(certifiedConsignment,"batch.lowGradeCargo"));
	
	//разобраться с origin^ vd:producer  vd:country
	//НоваяСтрокаТоваровСообщения.ПлощадкаПроизводительGUID			 = ВычислитьXDTO(certifiedConsignment,"batch.producerList.producer.enterprise.guid");
	//НоваяСтрокаТоваровСообщения.СтранаUUID							 = ВычислитьXDTO(certifiedConsignment,"batch.countryOfOrigin.UUID");
	
	НоваяСтрокаТоваровСообщения.Скоропортящаяся						 = СпасибоЗаОшибкиВXSDСхеме("boolean",ВычислитьXDTO(certifiedConsignment,"batch.perishable"));
	НоваяСтрокаТоваровСообщения.Статус								 = ВычислитьXDTO(СтрокаТоваровXDTO,"statusChange.status");
	НоваяСтрокаТоваровСообщения.ЦельEDI								 = ВычислитьXDTO(СтрокаТоваровXDTO,"authentication.purpose.guid");
	
КонецПроцедуры


Функция СпасибоЗаОшибкиВXSDСхеме(Имя,Значение)
	
	Если Имя = "boolean" Тогда
		Если Значение = "true" Тогда
			Возврат Истина;
		ИначеЕсли Значение = "false" Тогда
			Возврат Ложь;
		ИначеЕсли Значение = "1" Тогда
			Возврат Истина;
		ИначеЕсли Значение = "0" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
			
КонецФункции


Функция ПолучитьМассивВСДПоТТНXTDO(НомерТТН,ДатаТТН,ДатаВСД,СписокВСДXDTO)
	
	МассивСтрокXDTO = Новый Массив;
	Для Каждого СтрокаВСДXDTO Из СписокВСДXDTO Цикл
		
		Если СтрокаВСДXDTO.Свойства().Получить("waybillNumber")=Неопределено  
			ИЛИ СтрокаВСДXDTO.Свойства().Получить("waybillDate")=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НомерТТН = СтрокаВСДXDTO.waybillNumber 
			И ДатаТТН = ПреобразоватьДатуwaybillDate_В_1С(СтрокаВСДXDTO.waybillDate)
			И ДатаВСД = ПреобразоватьДатуwaybillDate_В_1С(СтрокаВСДXDTO.issueDate) Тогда
			МассивСтрокXDTO.Добавить(СтрокаВСДXDTO) ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСтрокXDTO;
	
КонецФункции // ПолучитьМассивВСДПоТТНXTDO()


Функция ПолучитьНовыеЗаписиОВходящихВСДИзСпискаЗагруженных(СписокВСДUUID,ВТаблицеТолькоОформленные,ВычиталиВсеОформленные)
	
	Если СписокВСДUUID = Неопределено Или СписокВСДUUID.Количество() = 0 Тогда
		Возврат СписокВСДUUID;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписокВСД.ВсдUUID
	               |ПОМЕСТИТЬ СписокВСД
	               |ИЗ
	               |	&СписокВСД КАК СписокВСД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КонтурEDI_СообщенияДополнительныеРеквизиты.Значение КАК ВСД_UUID,
	               |	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка КАК СообщениеСсылка
	               |ПОМЕСТИТЬ ВТ_ВСДпоСообщениям
	               |ИЗ
	               |	Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
	               |ГДЕ
	               |	НЕ КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.ПометкаУдаления
	               |	И КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.ТипСообщения = ""M_INC""
	               |	И КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""вхВСД_UUID""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокВСД.ВсдUUID
	               |ИЗ
	               |	СписокВСД КАК СписокВСД
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВСДпоСообщениям КАК ВТ_ВСДпоСообщениям
	               |		ПО СписокВСД.ВсдUUID = ВТ_ВСДпоСообщениям.ВСД_UUID
	               |ГДЕ
	               |	ВТ_ВСДпоСообщениям.СообщениеСсылка ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("СписокВСД", СписокВСДUUID);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();	
	
КонецФункции // ПолучитьНовыеЗаписиОВходящихВСДИзСпискаЗагруженных()


Функция СписокВходящихОформленныхВСДМеркурий(GUIDПлощадки,Смещение)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяМетода","getVetDocumentListRequest"); 
	//преобразовать Сообщение в XDTO
	
	ПараметрыТранзакции = ЗаписатьЗапросСпискаВходящих(GUIDПлощадки);
	ПараметрыТранзакции.listOptions.offset = Смещение;
	//выполнитьЗапрос
	//ОбменССистемойВетис.СоздатьЗаписьЖурналаЗапросов(ПараметрыОбмена);
	
	ПараметрыТранзакции.Вставить("ИмяМетода", Параметры.ИмяМетода);
	ДождатьсяРезультата = Истина;
	Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПолучитьПараметрыПодключенияМеркурий(,GUIDПлощадки), Параметры.ИмяМетода,ДождатьсяРезультата);
	
	Возврат Ответ;
	
КонецФункции

Функция ЗаписатьЗапросСпискаВходящих(GUIDПлощадки)
	
	ПараметрыТранзакции = Новый Структура();
	МассивСписковXDTO = Новый Массив();
	
	ListOptions = ПолучитьОбъектXDTOМеркурий("Общие", "ListOptions");
	ListOptions.count = 1000;
	
	ПараметрыТранзакции.Вставить("localTransactionId", 	"IncomingRobot");
	ПараметрыТранзакции.Вставить("listOptions",		ListOptions);
	ПараметрыТранзакции.Вставить("initiator", 		ПолучитьПараметрыПодключенияМеркурий(,GUIDПлощадки).user);
	
	
	//ВетДокТип = КорневаяФабрика().Тип("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "VetDocumentType");
	ВетДокТип = ПолучитьТипОбъектаXDTOМеркурий("ВетДокумент","VetDocumentType");
	vetDocumentType = КорневаяФабрика().Создать(ВетДокТип, "INCOMING");
	ПараметрыТранзакции.Вставить("vetDocumentType", 		vetDocumentType);	
	
	//ВетДокСтатусТип = КорневаяФабрика().Тип("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "VetDocumentStatus");
	ВетДокСтатусТип = ПолучитьТипОбъектаXDTOМеркурий("ВетДокумент","VetDocumentStatus");
	vetDocumentStatus = КорневаяФабрика().Создать(ВетДокСтатусТип, "CONFIRMED");
	ПараметрыТранзакции.Вставить("vetDocumentStatus", 		vetDocumentStatus);	
	//businessMember
	//или
	
	//enterpriseGuidТип = КорневаяФабрика().Тип("http://api.vetrf.ru/schema/cdm/base", "UUID");
	enterpriseGuidТип = ПолучитьТипОбъектаXDTOМеркурий("Общие","UUID");
	enterpriseGuid = КорневаяФабрика().Создать(enterpriseGuidТип, GUIDПлощадки);      //заглушка
	ПараметрыТранзакции.Вставить("enterpriseGuid", 		enterpriseGuid);	
	
	Возврат ПараметрыТранзакции;
	

КонецФункции // ЗаписатьСообщениеМеркурийXDTO()

Процедура ВыполнитьПакетТранзакций(МассивМеркурий) Экспорт 
	
	ОчиститьКэшСкладскихЖурналов();
	
	Попытка
		УведомилОНевозможностиОтраженияБумажныхПакетно = Ложь;
		ПакетныйРежим = Истина;
		ВсегоТранзакций = МассивМеркурий.Количество();
		й=0;
		Для каждого ТранзакцияКОтправке Из МассивМеркурий Цикл
			й=й+1;
			ОсновнойМодуль.Состояние_КонтурEDI("Обрабатываю транзакцию Меркурий: "+й+"/"+ВсегоТранзакций);
			
			Если ЗначениеЗаполнено(ТранзакцияКОтправке.СообщениеСсылка) 
				И ТранзакцияКОтправке.СообщениеСсылка.Архив Тогда
				Продолжить;
			КонецЕсли;
			
			//Гашение входящих ВСД отдельно 
			Если ТранзакцияКОтправке.ТипСообщения = "M_INC" Тогда
				ПогаситьВходящийВСДПакетно(ТранзакцияКОтправке.Документ,ТранзакцияКОтправке.СообщениеСсылка);
				Продолжить;
		    КонецЕсли;
			
			Если ТранзакцияКОтправке.ТипСообщения = "M_REC" Тогда
				Если УведомилОНевозможностиОтраженияБумажныхПакетно = Ложь Тогда 
					УведомилОНевозможностиОтраженияБумажныхПакетно = Истина;
					Сообщить("Гашение с Бумажных ВСД осуществляется только через карточку для дополнительного контроля");
					//не пытайтесь отключить эту проверку - транзакция все равно не пройдет :)
				КонецЕсли;
				Продолжить; 
			КонецЕсли;
			
			
			ТипСообщения 			= ТранзакцияКОтправке.ТипСообщения;
			Документ 				= ТранзакцияКОтправке.Документ;
			ПереотправкаСообщения 	= ТранзакцияКОтправке.ПереотправкаСообщения;
			СообщениеСсылка 		= ТранзакцияКОтправке.СообщениеСсылка;
			
			Сообщение = ОсновнойМодуль.ПолучитьСтруктуруСообщения(ТипСообщения,"Исходящее");
			
			ПодготовитьТранзакциюМеркурий(ТипСообщения,Документ,Сообщение);
			РезультатПроверки = ПроверитьТранзакциюМеркурий(Сообщение);
			
			Если НЕ РезультатПроверки.Успешно Тогда
				Продолжить;
			КонецЕсли;
			
			//сразу
			Параметры = Новый Структура();
			Параметры.Вставить("ОтправитьСообщениеИзФормы",	ложь);
			Параметры.Вставить("Сообщение",					Сообщение);
			Параметры.Вставить("ПереотправкаСообщения",	ПереотправкаСообщения);
			Параметры.Вставить("СообщениеСсылка",	СообщениеСсылка);
			Параметры.Вставить("ИмяМетода",			ПолучитьИмяМетодаМеркурийПоТипуСообщения(ТипСообщения));
			
			ВыполнитьТранзакциюМеркурий(ТипСообщения,Документ,Параметры);
			
		КонецЦикла;
		
		ПакетныйРежим = Ложь;	
	Исключение
		ПакетныйРежим = Ложь;	
	КонецПопытки;
	
	ОчиститьКэшСкладскихЖурналов();
	
КонецПроцедуры

Процедура ОчиститьКэшСкладскихЖурналов()

	Если ОсновнойМодуль.ВнутреннийКэш <> Неопределено Тогда
		
		Для каждого СтрокаКэша Из ОсновнойМодуль.ВнутреннийКэш Цикл
			Если Лев(СтрокаКэша.Ключ,24) = "Меркурий_СкладскойЖурнал" Тогда
				ОсновнойМодуль.ЭДО_Кэш_Очистить(СтрокаКэша.Ключ);
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


//Подготовка сообщений Меркурий
Функция ПолучитьМетаданныеСообщенияМеркурий(ТипСообщения,Направление = "Исходящее") Экспорт
	
	Результат = ОсновнойМодуль.ЭДО_Кэш_Прочитать("МетаданныеСообщения_"+ТипСообщения+"_"+Направление);
	
	Если НЕ Результат=Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТабМетаданных = Новый ТаблицаЗначений;
	ТабМетаданных.Колонки.Добавить("ИмяПоля");
	ТабМетаданных.Колонки.Добавить("ИмяТаблицы");
	ТабМетаданных.Колонки.Добавить("Принадлежность");
	ТабМетаданных.Колонки.Добавить("ТипEDI");
	ТабМетаданных.Колонки.Добавить("ВидСтруктурыEDI");
	ТабМетаданных.Колонки.Добавить("ВыделяемыеПоляСписка");
	ТабМетаданных.Колонки.Добавить("Тип1С");
	
	// описание таблиц для формирования структуры сообщения. Чтобы во всех модулях было однозначное название полей.
	
	ТаблицаЗависимыхТипов = ОсновнойМодуль.ПолучитьНастройкуЗависимыхТипов(ТипСообщения, Направление);
		                                                                                                              
	// Шапка
																	  												// тип EDI			//вид структуры  	// поля 	// тип 1С
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТипСообщения"				,						, "="	, "ТипСообщения"	, 					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Направление"				,						, "="	, "Направление"		, 					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ID"							,						, "="	, "Идентификатор"	, 					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаСоздания"				,						, "="	, "ДатаВремя"		, 					,		,							);
	//Партнер - наследие EDI
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Партнер"					,						, "1С"	, 					,					,		, "Партнер"					);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Организация"				,						, "1С"	, 					,					,		,							);
	
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Документ"					,						,		, "Структура"		, "Документ"		,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Заказ"						,						,		, "Структура"		, "Заказ"			,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Накладная"					,						,		, "Структура"		, "Накладная"		,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Статус"						,						, "="	, "Строка36"		,					,		,							);
	
	//ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Приемка"					,						,		, "Структура"		, "Приемка"			,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	//ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СчетФактура"				,						,		, "Структура"		, "СчетФактура"		,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	//ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Контракт"					,						, "EDI"	, "Структура"		, "Документ"		,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	
	//consignor
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ХозяйствующийСубъект"		,						,		, "Структура"		, "МеркурийХозяйствующийСубъект", "GLN"	, 	, );
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Площадка"					,						,		, "Структура"		, "МеркурийПлощадка"			, "GLN"	, 	, );
	
	Если ТипСообщения <> "M_PRD" Тогда
	//consignee
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ХозяйствующийСубъектПолучатель",					,		, "Структура"		, "МеркурийХозяйствующийСубъект", "GLN"	, 	, );
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПлощадкаПолучатель"			,						,		, "Структура"		, "МеркурийПлощадка"			, "GLN"	, 	, );
	КонецЕсли;

	//ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Плательщик"					,						,		, "Структура"		, "ЮрФизЛицо"		, "GLN"	, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	//ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТочкаДоставки"				,						, "1С"	, 					, 					,		, "ТочкаДоставки"			);
	
	//ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПромежуточныйГрузополучатель",					,		, "Структура"		, "ЮрФизЛицо"		, "GLN"	, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Транспорт"					,						, "="	, "Структура"		, "МеркурийТранспортировка"	,		, , );
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаПоставки"				,						, "="	, "ДатаВремя"		,					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаОтгрузки"				,						, "="	, "ДатаВремя"		,					,		,							);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Комментарий"				,						, "="	, "Строка2560"		,					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Цель"						,						,  		, "Структура"		, "МеркурийЦель"	,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "БлагополучиеМестности"		,						, "="	, "Строка255"		, 			,		,									);
	Если ТипСообщения = "M_MOV"
		ИЛИ ТипСообщения = "M_DES" Тогда	
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "РазрешениеНаВывозНомер"		,						, "="	, "Строка255"		, 			,		,									);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "РазрешениеНаВывозДата"		,						, "="	, "ДатаВремя"		, 			,		,									);
	КонецЕсли;
	
	Если ТипСообщения = "M_MOV"
		ИЛИ ТипСообщения = "M_DES" 
		ИЛИ ТипСообщения = "M_INC" 
		ИЛИ ТипСообщения = "M_REC" Тогда	
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Перевозчик"					,						,		, "Структура"		, "МеркурийХозяйствующийСубъект", "GLN"	, 	, );
		
		//Перевозки
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "МультимодальнаяПеревозка"	,						, "="	, "Булево"			, 			,		,									);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Маршрут"					, "Маршрут"				, "="	, "ТабличнаяЧасть"	,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерСтроки"				, "Маршрут"				, "="	, "Строка35"		,					,		, 							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Площадка1С"					, "Маршрут"				, "1С"	, 					,					,		, 							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПлощадкаGUID"				, "Маршрут"				, "="	, "Строка36"		,					,		, 							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВидТранспорта"				, "Маршрут"				, "="	, "Строка35"		,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерТранспортногоСредства"	, "Маршрут"				, "="	, "Строка35"		,					,		, 							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СпособХраненияПриПеревозке"	, "Маршрут"				, "="	, "Строка35"		,					,		, 							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерПолуприцепа"			, "Маршрут"				, "="	, "Строка35"		,					,		, 							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерВагона"				, "Маршрут"				, "="	, "Строка35"		,					,		, 							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерКонтейнера"			, "Маршрут"				, "="	, "Строка35"		,					,		, 							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерАвиарейса"				, "Маршрут"				, "="	, "Строка35"		,					,		, 							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Перегруз"					, "Маршрут"				, "="	, "Булево"			,					,		, 							);
	КонецЕсли;
	
	//Товары
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Товары"						, "Товары"				, "="	, "ТабличнаяЧасть"	,					,		,							);
	
	Если ТипСообщения = "M_PRD" Тогда  //Сырье необходимо отделить от Товаров т.к. возможно что произведется 1 позиция из 2+
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Завершена"				,						, "="	, "Булево"			,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ИдентификаторПроизводственнойТранзакции",		, "="	, "Строка255"		,					,		,							); //Только для незавершенных
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Сырье"					, "Сырье"				, "="	, "ТабличнаяЧасть"	,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерСтроки"			, "Сырье"				, "1С"	, 					,					,		, 							);
		
		// эти данные по сути только для того чтобы в дальнейшем обрезать лишние строки складского журнала по сырью в момент подбора
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Наименование"			, "Сырье"				, "EDI"	, "Строка256"		,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Номенклатура"			, "Сырье"				, "1С"	, 					,					,		, "Номенклатура"			);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "GUID"					, "Сырье"				, "EDI"	, "Строка36"		,					,		, 							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ХарактеристикаНоменклатуры"	, "Сырье"			, "1С"	, 					,					,		, "ХарактеристикаНоменклатуры"	);
		
		//наша номенклатура productItem
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "productItemUUID"		, "Сырье"				, "EDI"	, "Строка36"		,					,		, 							);
		
		//идентификатор партии источника
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ИсходнаяПартияНомер"	, "Сырье"				, "EDI"	, "Строка36"		,					,		, 		 					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ИсходнаяПартияGUID"		, "Сырье"				, "EDI"	, "Строка36"		,					,		, 		 					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Количество"				, "Сырье"				, "="	, "ЧислоКоличество"	,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоВДокументе"	, "Сырье"				, "="	, "ЧислоКоличество"	,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмерения"		, "Сырье"				, "1С"	, 					,					,		, "МеркурийЕдиницаИзмерения"		);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмеренияПоКлассификатору", "Сырье"		, "1С"	, 					,					,		, "МеркурийЕдиницаИзмеренияПоКлассификатору");
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "unitUUID"				, "Сырье"				, "EDI"	, "Строка36"		,					,		,		 );
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "unitGUID"				, "Сырье"				, "EDI"	, "Строка36"		,					,		, 		 );
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоУпаковок"		, "Сырье"				, "="	, "ЧислоКоличество"	,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмеренияУпаковок", "Сырье"				, "1С"	, 					,					,		, "МеркурийЕдиницаИзмеренияУпаковок");
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмеренияУпаковокUUID", "Сырье"			, "EDI"	, "Строка36"		,					,		,							);
		
		//доп отбор партии источника
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаПроизводства"			, "Сырье"				, "="	, "ДатаВремя"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаПроизводства2"			, "Сырье"				, "="	, "ДатаВремя"		,					,		, 								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СрокГодности"				, "Сырье"				, "="	, "ДатаВремя"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СрокГодности2"				, "Сырье"				, "="	, "ДатаВремя"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Маркировка"					, "Сырье"				, "="	, "Строка256"		, 					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Скоропортящаяся"			, "Сырье"				, "="	, "Булево"		,					,		, 								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Страна"						, "Сырье"				, "1С"	,					,					,		, "Страна"						);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СтранаUUID"					, "Сырье"				, "EDI"	, "Строка36"		,					,		, 								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПлощадкаПроизводитель"		, "Сырье"				,"1С"	, 					, 					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПлощадкаПроизводительGUID"	, "Сырье"				, "="	, 					, 					,		, 								);
	КонецЕсли;
	// Табличная часть
	
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерСтроки"				, "Товары"				, "1С"	, "Строка36"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Наименование"				, "Товары"				, "EDI"	, "Строка256"		,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Номенклатура"				, "Товары"				, "1С"	, 					,					,		, "Номенклатура"				);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ХарактеристикаНоменклатуры"	, "Товары"				, "1С"	, 					,					,		, "ХарактеристикаНоменклатуры"	);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Количество"					, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоВДокументе"		, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмерения"			, "Товары"				, "1С"	, 					,					,		, "МеркурийЕдиницаИзмерения"			);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмеренияПоКлассификатору", "Товары"			, "1С"	, 					,					,		, "МеркурийЕдиницаИзмеренияПоКлассификатору");
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоУпаковок"			, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмеренияУпаковок"	, "Товары"				, "1С"	, 					,					,		, "МеркурийЕдиницаИзмеренияУпаковок");
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмеренияУпаковокUUID", "Товары"				, "EDI"	, "Строка36"		,					,		,		 );
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Статус"						, "Товары"				, "="	, "Строка36"		,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "GTIN"						, "Товары"				, "EDI"	, "GTIN"			,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КодТовараПокупателя"		, "Товары"				, "EDI"	, "Строка256"		,					,		,								);
	//идентификаторы  номенклатуры
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "UUID"						, "Товары"				, "EDI"	, "Строка36"		,					,		,		 );
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "GUID"						, "Товары"				, "EDI"	, "Строка36"		,					,		, 		 );
	
	//идентификаторы  единицы измерения
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "unitUUID"					, "Товары"				, "EDI"	, "Строка36"		,					,		,		 );
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "unitGUID"					, "Товары"				, "EDI"	, "Строка36"		,					,		, 		 );
	
	//наша номенклатура productItem
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "productItemUUID"			, "Товары"				, "EDI"	, "Строка36"		,					,		, 							);
	
	Если ТипСообщения <> "M_PRD" Тогда  //в производственной операции это поле таблицы "Сырье"
		//идентификатор партии источника
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ИсходнаяПартияНомер"	, "Товары"				, "EDI"	, "Строка36"		,					,		, 		 );
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ИсходнаяПартияGUID"		, "Товары"				, "EDI"	, "Строка36"		,					,		, 		 );
	КонецЕсли;
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Страна"						, "Товары"				, "1С"	,					,					,		, "Страна"						);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СтранаUUID"					, "Товары"				, "EDI"	, "Строка36"		,					,		, 								);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаПроизводства"			, "Товары"				, "="	, "ДатаВремя"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаПроизводства2"			, "Товары"				, "="	, "ДатаВремя"		,					,		, 								);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СрокГодности"				, "Товары"				, "="	, "ДатаВремя"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СрокГодности2"				, "Товары"				, "="	, "ДатаВремя"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Маркировка"					, "Товары"				, "="	, 					, 					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "SSCC"						, "Товары"				, "="	, 					, 					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Скоропортящаяся"			, "Товары"				, "="	, "Булево"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Аннулирован"				, "Товары"				, "="	, "Булево"		,					,		, 								);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НекачественныйГруз"			, "Товары"				, "="	, "Булево"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПлощадкаПроизводитель"		, "Товары"				,"1С"	, 					, 					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПлощадкаПроизводительGUID"	, "Товары"				, "="	, 					, 					,		, 								);
		
	//в этих полях будем хранить пришедшие номера ВСД
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатUUID"						, "Товары"				, "="	, "Строка36"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатСерия"						, "Товары"				, "="	, "Строка255"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатНомер"						, "Товары"				, "="	, "Строка255"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатДата"						, "Товары"				, "="	, "ДатаВремя"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатТип"						, "Товары"				, "="	, "Строка255"		,					,		, 								);
	
	Если ТипСообщения = "M_REC" Тогда
		//расширение таблицы товаров
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатФорма"						, "Товары"				, "="	, "Строка255"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЦельEDI"								, "Товары"				, "="	, "Строка36"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Цель1С"									, "Товары"				, "="	, "Строка255"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатСпособХраненияПриПеревозке", "Товары"				, "="	, "Строка36"		,					,		, 								);
		//тут будует вложенная таблица (когда-нибудь)
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатРезультатыЭкспертизы"		, "Товары"				, "="	, "Строка255"		,					,		, 								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатВрачФИО"					, "Товары"				, "="	, "Строка36"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатВрачДолжность"				, "Товары"				, "="	, "Строка36"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатБлагополучиеМестности"		, "Товары"				, "="	, "Строка255"		,					,		, 								);
	КонецЕсли;
	
	Если ТипСообщения = "M_REC" ИЛИ ТипСообщения = "M_INC" Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатОсобыеОтметки"				, "Товары"				, "="	, "Строка255"	,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатОбследованоВетВрачом"		, "Товары"				, "="	, "Булево"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатЭкспертиза"				, "Товары"				, "="	, "Строка36"	,					,		, 								);
	Иначе
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатОсобыеОтметки"				, 						, "="	, "Строка255"	,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатОбследованоВетВрачом"		, 						, "="	, "Булево"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатЭкспертиза"				, 						, "="	, "Булево"		,					,		, 								);
	КонецЕсли;
	
	Если ТипСообщения = "M_REC" или  ТипСообщения = "M_INC" Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоКПодтверждению"			, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоУпаковокКПодтверждению"	, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СтатусРасхождений"					, "Товары"				, "="	, "Строка36"	,					,		,								);
	КонецЕсли;

	
	ОбработкаСобытияПодключаемогоМодуля("ИзменитьМетаданныеСообщения",,Новый Структура("ТаблицаМетаданных,ТаблицаЗависимыхТипов,ТипСообщения,Направление",ТабМетаданных,ТаблицаЗависимыхТипов,ТипСообщения,Направление));
	
	ОсновнойМодуль.ЭДО_Кэш_Поместить("МетаданныеСообщения_"+ТипСообщения+"_"+Направление,ТабМетаданных);

	Возврат ТабМетаданных;
	
КонецФункции

Процедура ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных,ИмяПоля,ИмяТаблицы =  Неопределено,Принадлежность =  Неопределено,ТипEDI =  Неопределено,ВидСтруктурыEDI = Неопределено,ВыделяемыеПоляСписка =  Неопределено,Тип1С =  Неопределено,ТаблицаЗависимыхТипов =  Неопределено)
	
	ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных,ИмяПоля,ИмяТаблицы,Принадлежность,ТипEDI,ВидСтруктурыEDI,ВыделяемыеПоляСписка,Тип1С,ТаблицаЗависимыхТипов);

КонецПроцедуры

Процедура СформироватьВТСообщенийМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий,МассивТиповСообщений)

	
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	                              |	КонтурEDI_Сообщения.Ссылка КАК Ссылка,
	                              |	КонтурEDI_Сообщения.ТипСообщения,
	                              |	КонтурEDI_Сообщения.Документ КАК Документ,
	                              |	КонтурEDI_Сообщения.Партнер,
	                              |	КонтурEDI_Сообщения.ДатаПоставки,
	                              |	КонтурEDI_Сообщения.Статус,
	                              |	КонтурEDI_Сообщения.ТребуемоеДействие
	                              |ПОМЕСТИТЬ ВТ_СообщенияМеркурий
	                              |ИЗ
	                              |	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	                              |ГДЕ
	                              |	КонтурEDI_Сообщения.ДатаДокумента МЕЖДУ ДОБАВИТЬКДАТЕ(&НачалоПериода, МЕСЯЦ, -2) И ДОБАВИТЬКДАТЕ(&КонецПериода, МЕСЯЦ, 2)
	                              |	И КонтурEDI_Сообщения.ТипСообщения В (&МассивТиповСообщений)
	                              |
	                              |ИНДЕКСИРОВАТЬ ПО
	                              |	Ссылка,
	                              |	Документ";
	
	ЗапросСКэшемПартнеров.УстановитьПараметр("МассивТиповСообщений",МассивТиповСообщений);							  
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
КонецПроцедуры

Процедура СформироватьВТПоднадзорныхТоваров(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий) Экспорт

	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                              |	СпрНоменклатура.Ссылка КАК Номенклатура,
	                              |	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.ПроизводимТовар, ЛОЖЬ) КАК ПроизводимТовар
	                              |ПОМЕСТИТЬ ВТ_ПоднадзорныйТовар
	                              |ИЗ
	                              |	Справочник.Номенклатура КАК СпрНоменклатура
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	                              |		ПО СпрНоменклатура.Ссылка = КонтурEDI_СоответствияТоваров.Номенклатура
	                              |			И (КонтурEDI_СоответствияТоваров.Партнер = &ПартнерМеркурий)
	                              |ГДЕ
	                              |	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.КодТовараПартнера, ""-"") <> &НулевойGUID";

	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	ЗапросСКэшемПартнеров.УстановитьПараметр("НулевойGUID",НулевойGUID);
	
	Если ЗапросСКэшемПартнеров.Параметры.Свойство("МассивНоменклатуры") Тогда // Есть фильтр по номенклатуре
		ЗапросСКэшемПартнеров.Текст = ЗапросСКэшемПартнеров.Текст+" И СпрНоменклатура.Ссылка В(&МассивНоменклатуры)";
	КонецЕсли;
	ОбработкаСобытияПодключаемогоМодуля("МеркурийИзменитьЗапросВТПоднадзорныхТоваров",,Новый Структура("ЗапросСКэшемПартнеров",ЗапросСКэшемПартнеров));
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
КонецПроцедуры

Процедура Устарела_СформироватьВременнуюТаблицуДокументаМеркурий(ЗапросСКэшемПартнеров,ИмяТипа,КакНазватьВТ,ТолькоПроведенные=Ложь)
	
	ИтоговыйТекстЗапроса = "";
	
	Для й=1 По 5 Цикл
		
		ТипДокумента = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта(ИмяТипа+?(й=1,"",й),Истина,Ложь);
		Если Не ЗначениеЗаполнено(ТипДокумента) Тогда Прервать; КонецЕсли;
		
		ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Дата
		|ПОМЕСТИТЬ Замена_ИмяВТ
		|ИЗ
		|	Замена_ИмяТипаДокумента КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НЕ ТаблицаДокумента.ПометкаУдаления
		|	И (&ТолькоПроведенные = ЛОЖЬ
		|			ИЛИ ТаблицаДокумента.Проведен)
		| ";
		
		Если й>1 Тогда 
			ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"ПОМЕСТИТЬ Замена_ИмяВТ","");  //уже назвали ВТ
		КонецЕсли;
		
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ИмяТипаДокумента",ТипДокумента);  
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ИмяВТ",КакНазватьВТ);  
		ЗапросСКэшемПартнеров.УстановитьПараметр("ТолькоПроведенные",ТолькоПроведенные=Истина);
		
		Если й>1 Тогда 
			ИтоговыйТекстЗапроса = ИтоговыйТекстЗапроса + "
			| ОБЪЕДИНИТЬ ВСЕ
			|" + ЗапросСКэшемПартнеров.Текст;
		Иначе
			ИтоговыйТекстЗапроса = ЗапросСКэшемПартнеров.Текст;
		КонецЕсли;
		
	КонецЦикла;
	
	ИтоговыйТекстЗапроса = ИтоговыйТекстЗапроса+ "
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";

	
	ЗапросСКэшемПартнеров.Текст = ИтоговыйТекстЗапроса;
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
КонецПроцедуры

Процедура Устарела_СформироватьВременнуюТаблицуДокументаМеркурийСПоднадзорнымТоваром(ЗапросСКэшемПартнеров,ИмяТипа,КакНазватьВТ,ИмяВТИсточника,ИмяПараметраНазванияТоваров)
	
	//ОсновнойМодуль.ПросмотретьВременнуюТаблицуЗапроса(ЗапросСКэшемПартнеров,"ВТ_ПоднадзорныйТовар")
	
	ИтоговыйТекстЗапроса = "";
	
	Для й=1 По 5 Цикл
		
		ТипДокумента = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта(ИмяТипа+?(й=1,"",й),Истина,Ложь);
		Если Не ЗначениеЗаполнено(ТипДокумента) Тогда Прервать; КонецЕсли;
		ИмяТЧ = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта(ИмяПараметраНазванияТоваров+?(й=1,"",й),Истина,Ложь);
		Если Не ЗначениеЗаполнено(ИмяТЧ) Тогда
			ИмяТЧ  = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта(ИмяПараметраНазванияТоваров,Истина,Ложь);
		КонецЕсли;
		
		ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТЧДокумента.Ссылка КАК Ссылка,
		|	Замена_ДокументИсточник.Дата КАК Дата
		|ПОМЕСТИТЬ Замена_ИмяВТ
		|ИЗ
		|	Замена_ДокументИсточник КАК Замена_ДокументИсточник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Замена_ИмяТипаДокумента.Замена_ИмяТЧ КАК ТаблицаТЧДокумента
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоднадзорныйТовар КАК ПоднадзорныйТовар
		|			ПО ТаблицаТЧДокумента.Номенклатура = ПоднадзорныйТовар.Номенклатура
		|		ПО Замена_ДокументИсточник.Ссылка = ТаблицаТЧДокумента.Ссылка
		|ГДЕ Истина
		// для M_PRD будет замена		  |	ПоднадзорныйТовар.Номенклатура = ИСТИНА
		|";
		
		Если й>1 Тогда 
			ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"ПОМЕСТИТЬ Замена_ИмяВТ","");  //уже назвали ВТ
		КонецЕсли;
		
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ДокументИсточник",ИмяВТИсточника);  
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ИмяТипаДокумента",ТипДокумента);  
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ИмяВТ",КакНазватьВТ);  
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ИмяТЧ",ИмяТЧ);  
		
		Если ИмяТипа = "МеркурийДокументПроизводства" Тогда 
			ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"ГДЕ Истина","ГДЕ ПоднадзорныйТовар.ПроизводимТовар = ИСТИНА");  
		КонецЕсли;
		
		Если й>1 Тогда 
			ИтоговыйТекстЗапроса = ИтоговыйТекстЗапроса + "
			| ОБЪЕДИНИТЬ ВСЕ
			|" + ЗапросСКэшемПартнеров.Текст;
		Иначе
			ИтоговыйТекстЗапроса = ЗапросСКэшемПартнеров.Текст;
		КонецЕсли;
	КонецЦикла;
	
	ИтоговыйТекстЗапроса = ИтоговыйТекстЗапроса +" 
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ "+ИмяВТИсточника+"
		|";
		
	ЗапросСКэшемПартнеров.Текст = ИтоговыйТекстЗапроса;
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
КонецПроцедуры

// Пробуем заменить на одну - старые пока оставим - есть риск что на гигантских базах все-же потребуется промежуточная ВТ
Процедура СформироватьВременнуюТаблицуДокументаМеркурийСПоднадзорнымТоваром(ЗапросСКэшемПартнеров,ИмяТипа,КакНазватьВТ,ИмяПараметраНазванияТоваров,ТолькоПроведенные=Ложь)
	
	//ОсновнойМодуль.ПросмотретьВременнуюТаблицуЗапроса(ЗапросСКэшемПартнеров,"ВТ_ПоднадзорныйТовар")
	
	ИтоговыйТекстЗапроса = "";
	
	й = 1; // MegaBrain - инициализируем итератор
	Пока Истина Цикл // +MegaBrain - не ограничиваем количество итераций
		
		Суффикс = ?(й=1,"",Формат(й,"ЧГ=0")); // +MegaBrain - на всякий случай форматируем итератор
		ТипДокумента = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта(ИмяТипа+Суффикс,Истина,Ложь); // +MegaBrain - заменил на Суффикс
		Если Не ЗначениеЗаполнено(ТипДокумента) Тогда Прервать; КонецЕсли;
		ИмяТЧ = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта(ИмяПараметраНазванияТоваров+Суффикс,Истина,Ложь); // +MegaBrain - заменил на Суффикс
		Если Не ЗначениеЗаполнено(ИмяТЧ) и й>1 Тогда // +MegaBrain - нет смысла этого делать при й=1
			ИмяТЧ  = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта(ИмяПараметраНазванияТоваров,Истина,Ложь);
		КонецЕсли;
		
		ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента.Дата КАК Дата
		|ПОМЕСТИТЬ Замена_ИмяВТ
		|ИЗ
		|	Замена_ИмяТипаДокумента КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Замена_ИмяТипаДокумента.Замена_ИмяТЧ КАК ТаблицаТЧДокумента
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоднадзорныйТовар КАК ПоднадзорныйТовар
		|			ПО ТаблицаТЧДокумента.Номенклатура = ПоднадзорныйТовар.Номенклатура
		|		ПО ТаблицаДокумента.Ссылка = ТаблицаТЧДокумента.Ссылка
		|ГДЕ
		|	ТаблицаДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НЕ ТаблицаДокумента.ПометкаУдаления
		|	И (&ТолькоПроведенные = ЛОЖЬ
		|			ИЛИ ТаблицаДокумента.Проведен)
		// для M_PRD будет замена		  |	ПоднадзорныйТовар.Номенклатура = ИСТИНА
		|";
		
		Если й>1 Тогда 
			ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"ПОМЕСТИТЬ Замена_ИмяВТ","");  //уже назвали ВТ
		КонецЕсли;
		
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ИмяТипаДокумента",ТипДокумента);  
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ИмяВТ",КакНазватьВТ);  
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ИмяТЧ",ИмяТЧ);  
		
		Если ИмяТипа = "МеркурийДокументПроизводства" Тогда 
			ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Проведен)","Проведен) И ПоднадзорныйТовар.ПроизводимТовар = ИСТИНА");  
		КонецЕсли;
		
		Если й>1 Тогда 
			ИтоговыйТекстЗапроса = ИтоговыйТекстЗапроса + "
			| ОБЪЕДИНИТЬ ВСЕ
			|" + ЗапросСКэшемПартнеров.Текст;
		Иначе
			ИтоговыйТекстЗапроса = ЗапросСКэшемПартнеров.Текст;
		КонецЕсли;
		
		й = й+1; // MegaBrain - так как цикл Пока, вручную приращаем итератор
	КонецЦикла;
	
	ЗапросСКэшемПартнеров.Текст = ИтоговыйТекстЗапроса;
	ЗапросСКэшемПартнеров.УстановитьПараметр("ТолькоПроведенные",ТолькоПроведенные=Истина);
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
КонецПроцедуры

//формирование списка транзакций
Процедура СформироватьСписокОтгрузокМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)

	//Устарела_СформироватьВременнуюТаблицуДокументаМеркурий(ЗапросСКэшемПартнеров,"МеркурийДокументОтгрузки","ВТ_ОтгрузкиВИнтервале",ПолучитьКонстантуEDI("М_ОтправлятьПоНепроведенномуДокументу_M_DES")<>Истина);
	                                                                                        //имя настройки из макета                                  //имя настройки из макета
	СформироватьВременнуюТаблицуДокументаМеркурийСПоднадзорнымтоваром(ЗапросСКэшемПартнеров,"МеркурийДокументОтгрузки","ВТ_ОтгрузкиПоднадзорногоТовара","МеркурийИмяТЧТоварыОтгрузка",ПолучитьКонстантуEDI("М_ОтправлятьПоНепроведенномуДокументу_M_DES")<>Истина);
	
	//здесь уже отвязаны от имен метаданных
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	                              |	ВТ_ОтгрузкиПоднадзорногоТовара.Ссылка КАК Документ,
	                              |	ВТ_ОтгрузкиПоднадзорногоТовара.Дата КАК ДатаПоставки,
	                              |	""M_DES"" КАК ТипСообщения,
	                              |	&ПартнерМеркурий КАК Партнер,
	                              |	ВТ_СообщенияМеркурий.Ссылка КАК Сообщение,
	                              |	ЕСТЬNULL(ВТ_СообщенияМеркурий.ТребуемоеДействие, ""Оформить транзакцию продажи"") КАК ТребуемоеДействие
	                              |ПОМЕСТИТЬ ВТ_МеркурийОтгрузка
	                              |ИЗ
	                              |	ВТ_ОтгрузкиПоднадзорногоТовара КАК ВТ_ОтгрузкиПоднадзорногоТовара
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СообщенияМеркурий КАК ВТ_СообщенияМеркурий
	                              |		ПО (ВТ_СообщенияМеркурий.Документ = ВТ_ОтгрузкиПоднадзорногоТовара.Ссылка)
	                              |			И (ВТ_СообщенияМеркурий.ТипСообщения = ""M_DES"")
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |УНИЧТОЖИТЬ ВТ_ОтгрузкиПоднадзорногоТовара";
	
								  
	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	МассивВременныхТаблиц.Добавить("ВТ_МеркурийОтгрузка");

КонецПроцедуры

Процедура СформироватьСписокПроизводстваМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)

	//Устарела_СформироватьВременнуюТаблицуДокументаМеркурий(ЗапросСКэшемПартнеров,"МеркурийДокументПроизводства","ВТ_ПроизводствоВИнтервале",ПолучитьКонстантуEDI("М_ОтправлятьПоНепроведенномуДокументу_M_PRD")<>Истина);
	                                                                                        //имя настройки из макета                                           //имя настройки из макета
	СформироватьВременнуюТаблицуДокументаМеркурийСПоднадзорнымТоваром(ЗапросСКэшемПартнеров,"МеркурийДокументПроизводства","ВТ_ПроизводствоПоднадзорногоТовара","МеркурийИмяТЧТоварыПроизводство",ПолучитьКонстантуEDI("М_ОтправлятьПоНепроведенномуДокументу_M_PRD")<>Истина);
	
	//здесь уже отвязаны от имен метаданных
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	                              |	ВТ_ПроизводствоПоднадзорногоТовара.Ссылка КАК Документ,
	                              |	""M_PRD"" КАК ТипСообщения,
	                              |	&ПартнерМеркурий КАК Партнер,
	                              |	ВТ_СообщенияМеркурий.Ссылка КАК Сообщение,
	                              |	ЕСТЬNULL(ВТ_СообщенияМеркурий.ТребуемоеДействие, ""Оформить производственную транзакцию"") КАК ТребуемоеДействие
	                              |ПОМЕСТИТЬ ВТ_МеркурийПроизводство
	                              |ИЗ
	                              |	ВТ_ПроизводствоПоднадзорногоТовара КАК ВТ_ПроизводствоПоднадзорногоТовара
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СообщенияМеркурий КАК ВТ_СообщенияМеркурий
	                              |		ПО (ВТ_СообщенияМеркурий.Документ = ВТ_ПроизводствоПоднадзорногоТовара.Ссылка)
	                              |			И (ВТ_СообщенияМеркурий.ТипСообщения = ""M_PRD"")
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |УНИЧТОЖИТЬ ВТ_ПроизводствоПоднадзорногоТовара";
	
								  
	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	МассивВременныхТаблиц.Добавить("ВТ_МеркурийПроизводство");

КонецПроцедуры

Процедура СформироватьСписокПриходовМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)

	//Устарела_СформироватьВременнуюТаблицуДокументаМеркурий(ЗапросСКэшемПартнеров,"МеркурийДокументПоступление","ВТ_ПоступлениеВИнтервале",ПолучитьКонстантуEDI("М_ОтправлятьПоНепроведенномуДокументу_M_REC")<>Истина);
	                                                                                        //имя настройки из макета                                         //имя настройки из макета
	СформироватьВременнуюТаблицуДокументаМеркурийСПоднадзорнымТоваром(ЗапросСКэшемПартнеров,"МеркурийДокументПоступление","ВТ_ПоступлениеПоднадзорногоТовара","МеркурийИмяТЧТоварыПоступление",ПолучитьКонстантуEDI("М_ОтправлятьПоНепроведенномуДокументу_M_REC")<>Истина);
	
	//здесь уже отвязаны от имен метаданных
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	                              |	ВТ_ПоступлениеПоднадзорногоТовара.Ссылка КАК Документ,
	                              |	""M_REC"" КАК ТипСообщения,
	                              |	&ПартнерМеркурий КАК Партнер,
	                              |	ВТ_СообщенияМеркурий.Ссылка КАК Сообщение,
	                              |	ЕСТЬNULL(ВТ_СообщенияМеркурий.ТребуемоеДействие, ""Оформить входящую партию"") КАК ТребуемоеДействие
	                              |ПОМЕСТИТЬ ВТ_МеркурийПриход
	                              |ИЗ
	                              |	ВТ_ПоступлениеПоднадзорногоТовара КАК ВТ_ПоступлениеПоднадзорногоТовара
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СообщенияМеркурий КАК ВТ_СообщенияМеркурий
	                              |		ПО (ВТ_СообщенияМеркурий.Документ = ВТ_ПоступлениеПоднадзорногоТовара.Ссылка)
	                              |			И (ВТ_СообщенияМеркурий.ТипСообщения = ""M_REC"")
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СообщенияМеркурий КАК ВТ_СообщенияМеркурийM_INC
	                              |		ПО (ВТ_СообщенияМеркурийM_INC.Документ = ВТ_ПоступлениеПоднадзорногоТовара.Ссылка)
	                              |			И (ВТ_СообщенияМеркурийM_INC.ТипСообщения = ""M_INC"")
	                              |ГДЕ
	                              |	ВТ_СообщенияМеркурийM_INC.Ссылка ЕСТЬ NULL 
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |УНИЧТОЖИТЬ ВТ_ПоступлениеПоднадзорногоТовара";
	
								  
	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	МассивВременныхТаблиц.Добавить("ВТ_МеркурийПриход");

КонецПроцедуры

Процедура СформироватьСписокВходящихВСДМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)
	
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	                              |	""M_INC"" КАК ТипСообщения,
	                              |	&ПартнерМеркурий КАК Партнер,
	                              |	ВТ_СообщенияМеркурий.ДатаПоставки КАК ДатаПоставки,
	                              |	ВТ_СообщенияМеркурий.Документ КАК Документ,
	                              |	ВТ_СообщенияМеркурий.Ссылка КАК Сообщение,
	                              |	ВТ_СообщенияМеркурий.ТребуемоеДействие КАК ТребуемоеДействие
	                              |ПОМЕСТИТЬ ВТ_МеркурийВходящиеВСД
	                              |ИЗ
	                              |	ВТ_СообщенияМеркурий КАК ВТ_СообщенияМеркурий
	                              |ГДЕ
	                              |	ВТ_СообщенияМеркурий.ТипСообщения = ""M_INC""
	                              |	И ВТ_СообщенияМеркурий.ДатаПоставки МЕЖДУ &НачалоПериода И &КонецПериода";
	
								  
	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	МассивВременныхТаблиц.Добавить("ВТ_МеркурийВходящиеВСД");

КонецПроцедуры

Процедура СформироватьСписокПеремещенийМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)
	
	//Определим, надо ли проверять что есть склады, ссылающиеся на один GUID
	ИмяРеквизитаСкладОтправительДляПеремещения = "";
	ИмяРеквизитаСкладПолучательДляПеремещения = "";
	ПроверятьСкладыНаОдинаковыйGTIN = Ложь;
	Если ПолучитьКонстантуEDI("М_ЕстьПеремещенияПоСкладамсОдинаковымGUID") = Истина Тогда
		
		ИмяРеквизитаСкладОтправительДляПеремещения = ПолучитьКонстантуEDI("М_ИмяРеквизитаСкладОтправительДляПеремещения");
		ИмяРеквизитаСкладПолучательДляПеремещения = ПолучитьКонстантуEDI("М_ИмяРеквизитаСкладПолучательДляПеремещения");
		
		Если ЗначениеЗаполнено(ИмяРеквизитаСкладОтправительДляПеремещения) И ЗначениеЗаполнено(ИмяРеквизитаСкладПолучательДляПеремещения) Тогда
			
			ПроверятьСкладыНаОдинаковыйGTIN = Истина;
			СоответствияПлощадок = ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийПлощадка");
			ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
			|	Площадки.СвязанныйСправочник КАК Склад,
			|	Площадки.GUID КАК GUID,
			|	Площадки.Наш КАК Наш
			|ПОМЕСТИТЬ ВТ_СоответствияПлощадок
			|ИЗ
			|	&СоответствияПлощадок КАК Площадки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_СоответствияПлощадок.Склад,
			|	ВТ_СоответствияПлощадок.GUID
			|ПОМЕСТИТЬ ВТ_СоответствияНашихПлощадок
			|ИЗ
			|	ВТ_СоответствияПлощадок КАК ВТ_СоответствияПлощадок
			|ГДЕ
			|	ВТ_СоответствияПлощадок.Наш = ИСТИНА";
			ЗапросСКэшемПартнеров.УстановитьПараметр("СоответствияПлощадок",СоответствияПлощадок);
			ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
		Иначе
			ОсновнойМодуль.Сообщить_КонтурEDI("Укажите ИмяРеквизитаСкладОтправительДляПеремещения и ИмяРеквизитаСкладПолучательДляПеремещения в настройках!");
		КонецЕсли;
		
	КонецЕсли;
	//закончили готовить таблицу соответствия своих площадок
	
	//непосредственно сборка требуемых действий
	//Устарела_СформироватьВременнуюТаблицуДокументаМеркурий(ЗапросСКэшемПартнеров,"МеркурийДокументПеремещение","ВТ_ПеремещениеВИнтервале",ПолучитьКонстантуEDI("М_ОтправлятьПоНепроведенномуДокументу_M_MOV")<>Истина); 
	//имя настройки из макета                                                           		//имя настройки из макета
	СформироватьВременнуюТаблицуДокументаМеркурийСПоднадзорнымтоваром(ЗапросСКэшемПартнеров,"МеркурийДокументПеремещение","ВТ_ПеремещениеПоднадзорногоТовара","МеркурийИмяТЧТоварыПеремещение",ПолучитьКонстантуEDI("М_ОтправлятьПоНепроведенномуДокументу_M_MOV")<>Истина); 
	
	//здесь уже отвязаны от имен метаданных
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	|	ВТ_ПеремещениеПоднадзорногоТовара.Ссылка КАК Документ,
	|	""M_MOV"" КАК ТипСообщения,
	|	&ПартнерМеркурий КАК Партнер,
	|	ВТ_СообщенияМеркурий.Ссылка КАК Сообщение,
	|	ЕСТЬNULL(ВТ_СообщенияМеркурий.ТребуемоеДействие, ""Оформить перемещение"") КАК ТребуемоеДействие
	|ПОМЕСТИТЬ ВТ_МеркурийПеремещение
	|ИЗ
	|	ВТ_ПеремещениеПоднадзорногоТовара КАК ВТ_ПеремещениеПоднадзорногоТовара
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СообщенияМеркурий КАК ВТ_СообщенияМеркурий
	|		ПО (ВТ_СообщенияМеркурий.Документ = ВТ_ПеремещениеПоднадзорногоТовара.Ссылка)
	|			И (ВТ_СообщенияМеркурий.ТипСообщения = ""M_MOV"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПеремещениеПоднадзорногоТовара";
	
	
	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	
	Если ПроверятьСкладыНаОдинаковыйGTIN Тогда
		ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                              |	ВТ_ПеремещениеПоднадзорногоТовара.Ссылка КАК Документ,
									  ////для удобства отладки в случае чего
									  //|	ВТ_ПеремещениеПоднадзорногоТовара.Ссылка.СкладОтправитель КАК СкладОтправитель,
									  //|	ВТ_ПеремещениеПоднадзорногоТовара.Ссылка.СкладПолучатель КАК СкладПолучатель,
									  //|	ВТ_СоответствияНашихПлощадокОтправитель.GUID КАК СкладОтправительGUID,
									  //|	ВТ_СоответствияНашихПлощадокПолучатель.GUID КАК СкладПолучательGUID,
		                              |	""M_MOV"" КАК ТипСообщения,
		                              |	&ПартнерМеркурий КАК Партнер,
		                              |	ВТ_СообщенияМеркурий.Ссылка КАК Сообщение,
		                              |	ЕСТЬNULL(ВТ_СообщенияМеркурий.ТребуемоеДействие, ""Оформить перемещение"") КАК ТребуемоеДействие
		                              |ПОМЕСТИТЬ ВТ_МеркурийПеремещение
		                              |ИЗ
		                              |	ВТ_ПеремещениеПоднадзорногоТовара КАК ВТ_ПеремещениеПоднадзорногоТовара
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СообщенияМеркурий КАК ВТ_СообщенияМеркурий
		                              |		ПО (ВТ_СообщенияМеркурий.Документ = ВТ_ПеремещениеПоднадзорногоТовара.Ссылка)
		                              |			И (ВТ_СообщенияМеркурий.ТипСообщения = ""M_MOV"")
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствияНашихПлощадок КАК ВТ_СоответствияНашихПлощадокОтправитель
		                              |		ПО ВТ_ПеремещениеПоднадзорногоТовара.Ссылка.СкладОтправитель = ВТ_СоответствияНашихПлощадокОтправитель.Склад
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствияНашихПлощадок КАК ВТ_СоответствияНашихПлощадокПолучатель
		                              |		ПО ВТ_ПеремещениеПоднадзорногоТовара.Ссылка.СкладПолучатель = ВТ_СоответствияНашихПлощадокПолучатель.Склад
		                              |ГДЕ
		                              |	ЕСТЬNULL(ВТ_СоответствияНашихПлощадокОтправитель.GUID, ""_"") <> ЕСТЬNULL(ВТ_СоответствияНашихПлощадокПолучатель.GUID, ""__"")
		                              |;
		                              |
		                              |////////////////////////////////////////////////////////////////////////////////
		                              |УНИЧТОЖИТЬ ВТ_ПеремещениеПоднадзорногоТовара";
		
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"ВТ_ПеремещениеПоднадзорногоТовара.Ссылка.СкладОтправитель","ВТ_ПеремещениеПоднадзорногоТовара.Ссылка."+СокрЛП(ИмяРеквизитаСкладОтправительДляПеремещения));
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"ВТ_ПеремещениеПоднадзорногоТовара.Ссылка.СкладПолучатель","ВТ_ПеремещениеПоднадзорногоТовара.Ссылка."+СокрЛП(ИмяРеквизитаСкладПолучательДляПеремещения));
		
	КонецЕсли;
	
	////если есть вопросы - ставь точку оставнова и F9 эти таблицы:
	//ОсновнойМодуль.ПросмотретьВременнуюТаблицуЗапроса(ЗапросСКэшемПартнеров,"ВТ_ПеремещениеПоднадзорногоТовара")
	//ОсновнойМодуль.ПросмотретьВременнуюТаблицуЗапроса(ЗапросСКэшемПартнеров,"ВТ_СоответствияНашихПлощадок")
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	//ОсновнойМодуль.ПросмотретьВременнуюТаблицуЗапроса(ЗапросСКэшемПартнеров,"ВТ_МеркурийПеремещение")
	
	МассивВременныхТаблиц.Добавить("ВТ_МеркурийПеремещение");
	
КонецПроцедуры

Процедура СформироватьСписокНезавершенныхКЗавершению(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)
	
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.ТипСообщения,
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.Партнер,
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.ДатаДокумента КАК ДатаПоставки,
	|	МАКСИМУМ(КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.Документ) КАК Документ,
	|	МАКСИМУМ(КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка) КАК Сообщение,
	|	МАКСИМУМ(""Завершить транзакцию производства"") КАК ТребуемоеДействие
	|ПОМЕСТИТЬ ВТ_МеркурийЗавершитьПроизвТранзакции
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""ТранзакцияЗавершена""
	|	И КонтурEDI_СообщенияДополнительныеРеквизиты.Значение = ЛОЖЬ
	|	И КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.Архив
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.Партнер,
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.ТипСообщения,
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.ДатаДокумента";
	
	
	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	МассивВременныхТаблиц.Добавить("ВТ_МеркурийЗавершитьПроизвТранзакции");
	
КонецПроцедуры

//подготовка транзакций

Функция ПолучитьСтрануПоСтроке(СтрокаТоваров, ЕстьСерииНоменклатуры)
	
	Попытка
		ТипСтраны = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("Страна",,Истина);
		Страна	= Справочники[ТипСтраны].Россия;
		
		Если ЕстьСерииНоменклатуры = Истина 
			И ОсновнойМодуль.ЕстьРеквизитОбъекта_Контур(СтрокаТоваров.СерияНоменклатуры,"СтранаПроисхождения") 
			И ЗначениеЗаполнено(СтрокаТоваров.СерияНоменклатуры.СтранаПроисхождения) Тогда
			Страна	= СтрокаТоваров.СерияНоменклатуры.СтранаПроисхождения;
		ИначеЕсли ОсновнойМодуль.ЕстьРеквизитОбъекта_Контур(СтрокаТоваров.Номенклатура,"СтранаПроисхождения") И
			ЗначениеЗаполнено(СтрокаТоваров.Номенклатура.СтранаПроисхождения) Тогда
			Страна	= СтрокаТоваров.Номенклатура.СтранаПроисхождения;
		КонецЕсли;
		Возврат Страна;
	Исключение
		Возврат неопределено;
	КонецПопытки;
	
КонецФункции


Функция СписатьПартию(sourceStockEntryUUID,ПлощадкаGUID,ВладелецGUID,Количество,unitUUID)Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	ПараметрыПодключенияДляТранзакции = ПолучитьПараметрыПодключенияМеркурий(ВладелецGUID,ПлощадкаGUID,,Истина);
	Если НЕ ПараметрыПодключенияДляТранзакции.ЕстьДоступ Тогда
		Результат.Успешно = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	//преобразовать Сообщение в XDTO
	
	ПараметрыТранзакции = ЗаписатьСообщениеУтилизацииМеркурийXDTO(sourceStockEntryUUID,ПлощадкаGUID,Количество,unitUUID,ПараметрыПодключенияДляТранзакции);
	//выполнитьЗапрос
	
	ПараметрыТранзакции.Вставить("localTransactionId", "IncomingRobot");
	ПараметрыТранзакции.Вставить("ИмяМетода", ПолучитьИмяМетодаМеркурийПоТипуСообщения("M_PRD"));
	
	ОтветМеркурия = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключенияДляТранзакции, ПараметрыТранзакции.ИмяМетода,Истина); //сразу ждем результат
	
	Если ОтветМеркурия = Неопределено Тогда
		Результат.Успешно = Ложь;
	Иначе
		Результат.Успешно = Истина;
	КонецЕсли;
	
 	Возврат Результат; 

КонецФункции

Функция ОбъединитьПартии(МассивUUIDПартий,ПлощадкаGUID, НовоеНаименование, SubProductGUID) Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	ПараметрыПодключенияДляТранзакции = ПолучитьПараметрыПодключенияМеркурий(,ПлощадкаGUID,,Истина);
	Если НЕ ПараметрыПодключенияДляТранзакции.ЕстьДоступ Тогда
		Результат.Успешно = Ложь;
		Возврат Результат;
	КонецЕсли;

	//преобразовать Сообщение в XDTO
	
	ПараметрыТранзакции = ЗаписатьСообщениеОбъединенияПартийМеркурийXDTO(МассивUUIDПартий,ПлощадкаGUID,ПараметрыПодключенияДляТранзакции,НовоеНаименование, SubProductGUID);
	//выполнитьЗапрос
	
	ПараметрыТранзакции.Вставить("localTransactionId", "IncomingRobot");
	ПараметрыТранзакции.Вставить("ИмяМетода", "MergeStockEntriesRequest");
	
	ОтветМеркурия = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключенияДляТранзакции, ПараметрыТранзакции.ИмяМетода,Истина); //сразу ждем результат
	
	Если ОтветМеркурия=Неопределено Тогда
		Результат.Успешно = Ложь;
	Иначе
		Результат.Успешно = Истина;
	КонецЕсли;
	
 	Возврат Результат; 

КонецФункции

Функция АннулироватьВСД(ТекUUID,Причина,ПлощадкаGUID) Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	ПараметрыПодключенияДляТранзакции = ПолучитьПараметрыПодключенияМеркурий(,ПлощадкаGUID,,Истина);
	Если НЕ ПараметрыПодключенияДляТранзакции.ЕстьДоступ Тогда
		Результат.Успешно = Ложь;
		Возврат Результат;
	КонецЕсли;

	//преобразовать Сообщение в XDTO
	
	ПараметрыТранзакции = ЗаписатьСообщениеАннулированияВСДXDTO(ТекUUID,ПлощадкаGUID,ПараметрыПодключенияДляТранзакции,Причина);
	//выполнитьЗапрос
	
	ПараметрыТранзакции.Вставить("localTransactionId", "IncomingRobot");
	ПараметрыТранзакции.Вставить("ИмяМетода", "WithdrawVetDocumentRequest");
	
	ОтветМеркурия = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключенияДляТранзакции, ПараметрыТранзакции.ИмяМетода,Истина); //сразу ждем результат
	
	Если ОтветМеркурия=Неопределено Тогда
		Результат.Успешно = Ложь;
	Иначе
		Результат.Успешно = Истина;
		//Результат.Вставить("НовыйUUID",ВычислитьXDTO(ОтветМеркурия,"result.withdrawVetDocumentResponse.vetDocument.uuid"));  //не меняется
	КонецЕсли;
	
 	Возврат Результат; 

КонецФункции

Процедура ПогаситьВходящийВСДПакетно(Документ,СообщениеСсылка)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Сообщение = ОсновнойМодуль.ПрочитатьСообщение(СообщениеСсылка);
		
		Параметры = Новый Структура();
		Параметры.Вставить("ОтправитьСообщениеИзФормы",	Ложь);
		Параметры.Вставить("ПереотправкаСообщения",	Ложь);
		Параметры.Вставить("СообщениеСсылка",	СообщениеСсылка);
		Параметры.Вставить("ИмяМетода",			ПолучитьИмяМетодаМеркурийПоТипуСообщения(Сообщение.ТипСообщения));
		Параметры.Вставить("НеЗаписыватьСообщение",	Истина); 
		
		ОригинальныеТоварыСообщения = Сообщение.Товары.Скопировать();
		
		ТоварыСвернутыеПоНомерамВСД = Сообщение.Товары.Скопировать(,"ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата");
		ТоварыСвернутыеПоНомерамВСД.Свернуть("ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата");
		
		//гасить следует по 1 ВСД - так говорит апи при попытке погасить несколько	
		Для каждого СтрокаВходящего Из ТоварыСвернутыеПоНомерамВСД Цикл
			
			ОтборПо1ВСД = Новый Структура("ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата",СтрокаВходящего.ВетСертификатUUID,СтрокаВходящего.ВетСертификатСерия,СтрокаВходящего.ВетСертификатНомер,СтрокаВходящего.ВетСертификатДата);
			ТоварыПо1ВСД = ОригинальныеТоварыСообщения.НайтиСтроки(ОтборПо1ВСД);
			
			Сообщение.Товары.Очистить();
			ЕдинственнаяСтрокаСообщения = Сообщение.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ЕдинственнаяСтрокаСообщения,ТоварыПо1ВСД[0],,"Количество,КоличествоУпаковок,КоличествоКПодтверждению,КоличествоУпаковокКПодтверждению");
			//и теперь итоговые Количества
			Для каждого ТоварПо1ВСД Из ТоварыПо1ВСД Цикл
				
				ЕдинственнаяСтрокаСообщения.Количество 			= ЕдинственнаяСтрокаСообщения.Количество + ТоварПо1ВСД.Количество; 
				ЕдинственнаяСтрокаСообщения.КоличествоУпаковок 	= ЕдинственнаяСтрокаСообщения.КоличествоУпаковок + ТоварПо1ВСД.КоличествоУпаковок; 
				
				ЕдинственнаяСтрокаСообщения.КоличествоКПодтверждению 			= ЕдинственнаяСтрокаСообщения.Количество;
				ЕдинственнаяСтрокаСообщения.КоличествоУпаковокКПодтверждению 	= ЕдинственнаяСтрокаСообщения.КоличествоУпаковок;
				ОпределитьСтатусРасхожденийПоСтроке(ЕдинственнаяСтрокаСообщения);
			КонецЦикла;
			
			Параметры.Вставить("Сообщение",	Сообщение);
			Параметры.Вставить("ВСДUUID",	СтрокаВходящего.ВетСертификатUUID);
			
			ВыполнитьТранзакциюМеркурий(Сообщение.ТипСообщения, Сообщение.ДокументСсылка, Параметры);
			
		КонецЦикла;
	Иначе
		//по сути надо только правильно определить  КоличествоКПодтверждению и КоличествоУпаковокКПодтверждению - потребуется переделать под этот кейс всю прооцедуру чуток
	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьСтатусРасхожденийПоСтроке(СтрСообщения) Экспорт
	
	Если СтрСообщения.КоличествоКПодтверждению = 0 Тогда
		СтрСообщения.СтатусРасхождений = "Отклонен";
	ИначеЕсли СтрСообщения.КоличествоКПодтверждению = СтрСообщения.Количество и 
			СтрСообщения.КоличествоУпаковокКПодтверждению = СтрСообщения.КоличествоУпаковок Тогда
		СтрСообщения.СтатусРасхождений = "Подтвержден";
	ИначеЕсли Лев(СтрСообщения.СтатусРасхождений,7)="Уточнен" Тогда
		Если СтрСообщения.КоличествоКПодтверждению>=СтрСообщения.Количество и СтрСообщения.СтатусРасхождений<>"УточненАкт" Тогда
			СтрСообщения.СтатусРасхождений = "УточненАкт";
		КонецЕсли;
	Иначе
		Если СтрСообщения.КоличествоКПодтверждению > СтрСообщения.Количество Тогда
			СтрСообщения.СтатусРасхождений = "УточненАкт"; 
		Иначе
			СтрСообщения.СтатусРасхождений = "УточненВСД"; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Функция ЗаписатьСообщениеУтилизацииМеркурийXDTO(sourceStockEntryUUID,ПлощадкаGUID,Количество,unitUUID,ПараметрыПодключенияДляТранзакции)
	
	consignor = ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessMember");
	consignor.businessEntity =  ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessEntity");
	
	
	xmlЗаполнитьЗначениеXDTO(consignor.businessEntity,"GUID",ПараметрыПодключенияДляТранзакции.issuerId);
	
	consignor.enterprise = ПолучитьОбъектXDTOМеркурий("Цербер",  "Enterprise");
	xmlЗаполнитьЗначениеXDTO(consignor.enterprise,"GUID",ПлощадкаGUID);

	
	businessEntity = consignor.businessEntity;
	enterprise = consignor.enterprise;
	
	productionOperation = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "ProductionOperation");
	
	rawBatch = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "RawBatch");
	rawBatch.sourceStockEntry = ПолучитьОбъектXDTOМеркурий("ВетДокумент",  "StockEntry");
	xmlЗаполнитьЗначениеXDTO(rawBatch.sourceStockEntry,"UUID",sourceStockEntryUUID);
	
	rawBatch.Volume				= Количество;
	Unit	 			= ПолучитьОбъектXDTOМеркурий("АргусОбщие", 			"Unit");
	xmlЗаполнитьЗначениеXDTO(Unit,"UUID",unitUUID);
	rawBatch.unit				= Unit;
	
	
	productionOperation.rawBatch.Добавить(rawBatch);
	
	ПараметрыТранзакции = Новый Структура();
	МассивСписковXDTO = Новый Массив();
	
	ПараметрыТранзакции.Вставить("businessEntity",		businessEntity);
	ПараметрыТранзакции.Вставить("enterprise", 			enterprise);	
	ПараметрыТранзакции.Вставить("productionOperation", ProductionOperation);	
	
	ПараметрыТранзакции.Вставить("Наименование", 		ПолучитьИмяМетодаМеркурийПоТипуСообщения("M_PRD"));
	ПараметрыТранзакции.Вставить("initiator", 			ПараметрыПодключенияДляТранзакции.user);
	
	ПараметрыТранзакции.Вставить("МассивСписков", 		МассивСписковXDTO);	
	
	//Заполнение фабрики по маппингу полей
	
	
	Возврат ПараметрыТранзакции;
	
КонецФункции // ЗаписатьСообщениеУтилизацииМеркурийXDTO()

Функция ЗаписатьСообщениеОбъединенияПартийМеркурийXDTO(МассивsourceStockEntryUUID,ПлощадкаGUID,ПараметрыПодключенияДляТранзакции,НовоеНаименование, SubProductGUID)
	
	businessEntity =  ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessEntity");
	xmlЗаполнитьЗначениеXDTO(businessEntity,"GUID",ПараметрыПодключенияДляТранзакции.issuerId);
	
	enterprise = ПолучитьОбъектXDTOМеркурий("Цербер",  "Enterprise");
	xmlЗаполнитьЗначениеXDTO(enterprise,"GUID",ПлощадкаGUID);
	
	mergeOperation = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "MergeStockEntriesOperation");
	Для Каждого sourceStockEntryUUID Из МассивsourceStockEntryUUID Цикл
		sourceStockEntry = ПолучитьОбъектXDTOМеркурий("ВетДокумент",  "StockEntry");
		xmlЗаполнитьЗначениеXDTO(sourceStockEntry,"UUID",sourceStockEntryUUID);
		
		mergeOperation.sourceStockEntry.Добавить(sourceStockEntry);
	КонецЦикла;
	
	batch = ПолучитьОбъектXDTOМеркурий("ВетДокумент", 		"Batch");
	batch.SubProduct = ПолучитьОбъектXDTOМеркурий("АргусТовары", 	"SubProduct");
	xmlЗаполнитьЗначениеXDTO(batch.SubProduct,"GUID",SubProductGUID);
	batch.productItem = ПолучитьОбъектXDTOМеркурий("АргусТовары", "ProductItem");
	xmlЗаполнитьЗначениеXDTO(batch.productItem,"name",НовоеНаименование);
	
	mergeOperation.batch.Добавить(batch);
	
	
	ПараметрыТранзакции = Новый Структура();
	МассивСписковXDTO = Новый Массив();
	
	ПараметрыТранзакции.Вставить("businessEntity",		businessEntity);
	ПараметрыТранзакции.Вставить("enterprise", 			enterprise);	
	ПараметрыТранзакции.Вставить("mergeOperation",		 mergeOperation);	
	
	ПараметрыТранзакции.Вставить("Наименование", 		"mergeStockEntriesRequest");
	ПараметрыТранзакции.Вставить("initiator", 			ПараметрыПодключенияДляТранзакции.user);
	
	ПараметрыТранзакции.Вставить("МассивСписков", 		МассивСписковXDTO);	
	
	//Заполнение фабрики по маппингу полей
	
	
	Возврат ПараметрыТранзакции;
	
КонецФункции // ЗаписатьСообщениеУтилизацииМеркурийXDTO()

Функция ЗаписатьСообщениеАннулированияВСДXDTO(ТекUUID_ВСД_К_Аннулированию,ПлощадкаGUID,ПараметрыПодключенияДляТранзакции,Причина)
	//localTransactionId	Идентификатор заявки в клиентской системе.	xs:NCName	1
	//initiator	Пользователь, инициирующий запрос к шлюзу. Ответственный за выполнение бизнес-операции. Должен быть указан или идентификатор, или логин.	argc:User	1
	//vetDocumentId	Идентификатор ВСД, который аннулируется.	bs:UUID	1
	//withdrawReason	Причина аннулирования ВСД.	vetd:WithdrawReason	1
	//withdrawDate	Дата аннулирования ВСД.	xs:dateTime	1
	//vetDoctor	Ветеринарный врач, ответственный за аннулирование ВСД.	argc:User	1	
	
	
	ПараметрыТранзакции = Новый Структура();
	МассивСписковXDTO = Новый Массив();
	
	ПараметрыТранзакции.Вставить("vetDocumentId",		 ТекUUID_ВСД_К_Аннулированию);	
	ПараметрыТранзакции.Вставить("withdrawReason",		 Причина);	
	ПараметрыТранзакции.Вставить("withdrawDate",		 ТекущаяДата());	
	
	ПараметрыТранзакции.Вставить("Наименование", 		"withdrawVetDocumentRequest");
	ПараметрыТранзакции.Вставить("initiator", 			ПараметрыПодключенияДляТранзакции.user);
	
	ПараметрыТранзакции.Вставить("МассивСписков", 		МассивСписковXDTO);	
	
	//Заполнение фабрики по маппингу полей
	
	
	Возврат ПараметрыТранзакции;
	
КонецФункции // ЗаписатьСообщениеУтилизацииМеркурийXDTO()

Процедура ЗаполнитьТиповыеРеквизитыТабличнойЧастиТоваров(НоваяСтрока,СтрокаТоваров,ЕстьСерииНоменклатуры) Экспорт
	
	НоваяСтрока.Номенклатура 				= СтрокаТоваров.Номенклатура;
	Если ОсновнойМодуль.ИмяКонфигурации1С = "УФ_УТ" Тогда 
		НоваяСтрока.ХарактеристикаНоменклатуры	= СтрокаТоваров.Характеристика;
		НоваяСтрока.ЕдиницаИзмерения 			= СтрокаТоваров.Упаковка;
		НоваяСтрока.ЕдиницаИзмеренияПоКлассификатору = СтрокаТоваров.Упаковка;
		НоваяСтрока.КоличествоВДокументе 		= СтрокаТоваров.КоличествоУпаковок;
		НоваяСтрока.Количество 					= НоваяСтрока.КоличествоУпаковок;
		НоваяСтрока.ЕдиницаИзмеренияУпаковок	= Неопределено;
	Иначе
		НоваяСтрока.ХарактеристикаНоменклатуры	= СтрокаТоваров.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения 			= СтрокаТоваров.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияПоКлассификатору = СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору;
		НоваяСтрока.КоличествоВДокументе 		= СтрокаТоваров.Количество;
		НоваяСтрока.Количество 					= НоваяСтрока.КоличествоВДокументе;
		НоваяСтрока.ЕдиницаИзмеренияУпаковок	= СтрокаТоваров.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;
		НоваяСтрока.КоличествоУпаковок			= СтрокаТоваров.КоличествоМест;
	КонецЕсли;

	НоваяСтрока.Наименование 				= СтрокаТоваров.Номенклатура.Наименование;
	НоваяСтрока.Страна						= ПолучитьСтрануПоСтроке(СтрокаТоваров, ЕстьСерииНоменклатуры);
	
	Если ЕстьСерииНоменклатуры И ЗначениеЗаполнено(СтрокаТоваров.СерияНоменклатуры)Тогда 
		НоваяСтрока.СрокГодности				= СтрокаТоваров.СерияНоменклатуры.СрокГодности;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСырьеТранзакцииПроизводства(Сообщение,ДокументСсылка,ЭтоЗавершениеНезавершеннойТранзакции)
	
	СтандартноеЗаполнениеСырья = Истина;
	
	ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьТабличнуюЧастьСырьеТранзакции",СтандартноеЗаполнениеСырья,
	Новый Структура("Сообщение,ДокументСсылка,ЭтоЗавершениеНезавершеннойТранзакции",Сообщение,ДокументСсылка,ЭтоЗавершениеНезавершеннойТранзакции));
	
	Если СтандартноеЗаполнениеСырья <> Истина Тогда 
		Возврат;
	КонецЕсли;
	
	//прописать типовой кейс под УПП и под ERP
	
	Если ОсновнойМодуль.ЭтоERP() Тогда
		
		// 
		
	ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С = "УПП" Тогда
		
		Если ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
			
			ЕстьСерииНоменклатуры = Истина;
			Для Каждого СтрокаСырья Из ДокументСсылка.Материалы Цикл
				
				НоваяСтрока = Сообщение.Сырье.Добавить();
				
				СтандартнаяОбработкаEDI = Истина;
				РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьСтрокуСырьяТранзакции",СтандартнаяОбработкаEDI,
				Новый Структура("Сообщение,СтрокаСырьяСообщения,СтрокаСырьяДокумента,ДокументСсылка",
				Сообщение,НоваяСтрока,СтрокаСырья,ДокументСсылка));
				
				Если СтандартнаяОбработкаEDI = Истина Тогда	
					
					ЗаполнитьТиповыеРеквизитыТабличнойЧастиТоваров(НоваяСтрока,СтрокаСырья,ЕстьСерииНоменклатуры);
					
					НоваяСтрока.ДатаПроизводства 			= НачалоЧаса(ДокументСсылка.Дата);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОЗаказе(Сообщение,ДокументСсылка)
	
	Если ИспользуемаяВерсияAPI() = "20" Тогда 
		Попытка
			НайденныйДокументЗаказа = ОсновнойМодуль.НайтиСвязанныйДокументПоТипуСообщения(ДокументСсылка,"ORDERS");
			СообщениеORDERS = ОсновнойМодуль.ПрочитатьСообщение(,НайденныйДокументЗаказа,"ORDERS","Входящее");
			Если СообщениеORDERS <> Неопределено Тогда 
				Сообщение.ЗаказEDI.Номер = СообщениеORDERS.ЗаказEDI.Номер;
				Сообщение.ЗаказEDI.Дата = СообщениеORDERS.ЗаказEDI.Дата;
			КонецЕсли;
		Исключение
		КонецПопытки;
		Если Не ЗначениеЗаполнено(Сообщение.ЗаказEDI.Номер) Тогда 
			СтандартнаяОбработкаEDI = Истина;
			ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьРеквизитыЗаказа",СтандартнаяОбработкаEDI,
			Новый Структура("Сообщение,ДокументСсылка",Сообщение,ДокументСсылка));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТранзакциюОтгрузки(ДокументСсылка,Сообщение,СтандартнаяОбработкаEDI = Истина ,СтандартноеЗаполнениеТЧ = Истина) Экспорт
	
	ИмяРеквизитаОрганизация = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаОрганизация");
	ИмяРеквизитаКонтрагент 	= ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаКонтрагент");
	ИмяРеквизитаСклад 		= ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаСкладДокументаРеализации");
	ИмяРеквизитаГрузоотправитель = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаГрузоотправитель");
	ИмяРеквизитаГрузополучатель  = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаГрузополучатель");
 	ИмяРеквизитаДатаОтгрузки	 = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаДатаОтгрузки");

	Сообщение.Партнер = ПартнерМеркурий();
	ЗаполнитьТипизированныйРеквизит(Сообщение.Организация, ДокументСсылка, ИмяРеквизитаОрганизация);
	
	//Грузоотправитель
	ЗаполнитьТипизированныйРеквизит(Сообщение.Площадка1С, ДокументСсылка, ИмяРеквизитаГрузоотправитель);
	Если Не ЗначениеЗаполнено(Сообщение.Площадка1С) Тогда
		ЗаполнитьТипизированныйРеквизит(Сообщение.Площадка1С, ДокументСсылка, ИмяРеквизитаСклад);
	КонецЕсли;
	
	//Грузополучатель
	Если ОсновнойМодуль.ИмяКонфигурации1С = "УФ_УТ" Тогда
		Если ОсновнойМодуль.УТ11_1_Константа_ИспользоватьПартнеровИКонтрагентов() = истина Тогда
			ЗаполнитьТипизированныйРеквизит(Сообщение.ПлощадкаПолучатель1С, ДокументСсылка, ИмяРеквизитаГрузополучатель);
		Иначе
			Сообщение.ПлощадкаПолучатель1С = ДокументСсылка.Контрагент.Партнер;
		КонецЕсли;
	Иначе
		ЗаполнитьТипизированныйРеквизит(Сообщение.ПлощадкаПолучатель1С, ДокументСсылка, ИмяРеквизитаГрузополучатель);
	КонецЕсли;
	
	//Дата отгрузки
	ЗаполнитьТипизированныйРеквизит(Сообщение.ДатаОтгрузки, ДокументСсылка, ИмяРеквизитаДатаОтгрузки);
	
	Если Не ЗначениеЗаполнено(Сообщение.ДатаОтгрузки) Тогда
		Сообщение.ДатаОтгрузки			= ДокументСсылка.Дата;
	КонецЕсли;
	
	Сообщение.Документ1С 						= ДокументСсылка;
	Сообщение.ДатаСоздания 						= ТекущаяДата();
	Сообщение.ДокументСсылка 					= ДокументСсылка;
	ЗаполнитьТипизированныйРеквизит(Сообщение.ХозяйствующийСубъект1С, ДокументСсылка, ИмяРеквизитаОрганизация);
	ЗаполнитьТипизированныйРеквизит(Сообщение.ХозяйствующийСубъектПолучатель1С, ДокументСсылка, ИмяРеквизитаКонтрагент);
	
	Сообщение.Цель1С							= ПолучитьКонстантуEDI("М_ОсновнаяЦельОтгрузки");
	
	//Если активирована версия 20 то также будем пробовать указать Номер дату заказа, 
	ЗаполнитьСведенияОЗаказе(Сообщение,ДокументСсылка);
	
	Если СтандартноеЗаполнениеТЧ = Истина Тогда
		//Подготовка сообщения из документа
		ИмяТЧТовары = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяТЧТоварыОтгрузка");
		ТабличнаяЧастьТовары = Новый Массив;//просто чтоб определить
		Выполнить("ТабличнаяЧастьТовары = ДокументСсылка."+ИмяТЧТовары);
		ЕстьСерииНоменклатуры = ОсновнойМодуль.ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"СерияНоменклатуры",ИмяТЧТовары);
		Для Каждого СтрокаТоваров ИЗ ТабличнаяЧастьТовары Цикл
			
			НоваяСтрока = Сообщение.Товары.Добавить();
			
			СтандартнаяОбработкаEDI = Истина;
			РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьСтрокуТоваровТранзакции",СтандартнаяОбработкаEDI,
			Новый Структура("Сообщение,СтрокаТоваровСообщения,СтрокаТоваровДокумента,ДокументСсылка",
			Сообщение,НоваяСтрока,СтрокаТоваров,ДокументСсылка));
			
			Если СтандартнаяОбработкаEDI = Истина Тогда	
				ЗаполнитьТиповыеРеквизитыТабличнойЧастиТоваров(НоваяСтрока,СтрокаТоваров,ЕстьСерииНоменклатуры)			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Транспорт
	ЗаполнитьТранспортТранзакции(Сообщение);	
	
КонецФункции

Функция ПодготовитьТранзакциюПроизводства(ДокументСсылка,Сообщение,ЭтоЗавершениеНезавершеннойТранзакции=Ложь,СтандартнаяОбработкаEDI = Истина,СтандартноеЗаполнениеТЧ = Истина) Экспорт
	
	ИмяРеквизитаОрганизация = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаОрганизация");
	ИмяРеквизитаСклад 		= ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаСкладДокументаПроизводства");
	
	Сообщение.Партнер = ПартнерМеркурий();
	ЗаполнитьТипизированныйРеквизит(Сообщение.Организация, ДокументСсылка, ИмяРеквизитаОрганизация);
	
	ЗаполнитьТипизированныйРеквизит(Сообщение.Площадка1С, ДокументСсылка, ИмяРеквизитаСклад);
	
	Сообщение.Документ1С 						= ДокументСсылка;
	Сообщение.ДатаСоздания 						= ТекущаяДата();
	Сообщение.ДокументСсылка 					= ДокументСсылка;
	
	ЗаполнитьТипизированныйРеквизит(Сообщение.ХозяйствующийСубъект1С, ДокументСсылка, ИмяРеквизитаОрганизация);
	
	Сообщение.ДатаОтгрузки			= ДокументСсылка.Дата;
	
	Если СтандартноеЗаполнениеТЧ = Истина Тогда
		Если ЭтоЗавершениеНезавершеннойТранзакции=Ложь Тогда //при завершении транзакции производимая продукция уже вся указана, мы только завершаем
			//Подготовка таб части из документа
			ИмяТЧТовары = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяТЧТоварыПроизводство");
			ТабличнаяЧастьТовары = Новый Массив;//просто чтоб определить
			Выполнить("ТабличнаяЧастьТовары = ДокументСсылка."+ИмяТЧТовары);
			ЕстьСерииНоменклатуры = ОсновнойМодуль.ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"СерияНоменклатуры",ИмяТЧТовары);
			Для Каждого СтрокаТоваров ИЗ ТабличнаяЧастьТовары Цикл
				
				НоваяСтрока = Сообщение.Товары.Добавить();
				
				СтандартнаяОбработкаEDI = Истина;
				РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьСтрокуТоваровТранзакции",СтандартнаяОбработкаEDI,
				Новый Структура("Сообщение,СтрокаТоваровСообщения,СтрокаТоваровДокумента,ДокументСсылка",
				Сообщение,НоваяСтрока,СтрокаТоваров,ДокументСсылка));
				
				Если СтандартнаяОбработкаEDI = Истина Тогда	
					
					ЗаполнитьТиповыеРеквизитыТабличнойЧастиТоваров(НоваяСтрока,СтрокаТоваров,ЕстьСерииНоменклатуры);
					
					НоваяСтрока.ДатаПроизводства 			= НачалоЧаса(ДокументСсылка.Дата);
					//НоваяСтрока.СрокГодности 				= КонецГода(ДокументСсылка.Дата); //Заглушка
					НоваяСтрока.Маркировка                  = "";                     		//Заглушка
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСырьеТранзакцииПроизводства(Сообщение,ДокументСсылка,ЭтоЗавершениеНезавершеннойТранзакции);
	
КонецФункции

Функция ПодготовитьТранзакциюПеремещения(ДокументСсылка,Сообщение,СтандартнаяОбработкаEDI = Истина,СтандартноеЗаполнениеТЧ = Истина) Экспорт
	
	ИмяРеквизитаОрганизация 			= ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаОрганизация");
	ИмяРеквизитаСкладОтправитель 		= ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаСкладОтправитель");
	ИмяРеквизитаСкладПолучатель 		= ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаСкладПолучатель");
	
	Сообщение.Партнер = ПартнерМеркурий();
	ЗаполнитьТипизированныйРеквизит(Сообщение.Организация, ДокументСсылка, ИмяРеквизитаОрганизация);
	
	ЗаполнитьТипизированныйРеквизит(Сообщение.Площадка1С, ДокументСсылка, ИмяРеквизитаСкладОтправитель);
	ЗаполнитьТипизированныйРеквизит(Сообщение.ПлощадкаПолучатель1С, ДокументСсылка, ИмяРеквизитаСкладПолучатель);
	
	Сообщение.Документ1С 						= ДокументСсылка;
	Сообщение.ДатаСоздания 						= ТекущаяДата();
	Сообщение.ДокументСсылка 					= ДокументСсылка;
	ЗаполнитьТипизированныйРеквизит(Сообщение.ХозяйствующийСубъект1С, ДокументСсылка, ИмяРеквизитаОрганизация);
	
	Сообщение.ХозяйствующийСубъектПолучатель1С 	= Сообщение.ХозяйствующийСубъект1С;
	
	Сообщение.ДатаОтгрузки			= ДокументСсылка.Дата;
	
	Если СтандартноеЗаполнениеТЧ = Истина Тогда
		//Подготовка таб части из документа
		ИмяТЧТовары = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяТЧТоварыПеремещение");
		ТабличнаяЧастьТовары = Новый Массив;//просто чтоб определить
		Выполнить("ТабличнаяЧастьТовары = ДокументСсылка."+ИмяТЧТовары);
		
		ЕстьСерииНоменклатуры = ОсновнойМодуль.ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"СерияНоменклатуры",ИмяТЧТовары);
		
		Для Каждого СтрокаТоваров ИЗ ТабличнаяЧастьТовары Цикл
			
			НоваяСтрока = Сообщение.Товары.Добавить();
			
			СтандартнаяОбработкаEDI = Истина;
			РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьСтрокуТоваровТранзакции",СтандартнаяОбработкаEDI,
			Новый Структура("Сообщение,СтрокаТоваровСообщения,СтрокаТоваровДокумента,ДокументСсылка",
			Сообщение,НоваяСтрока,СтрокаТоваров,ДокументСсылка));
			
			Если СтандартнаяОбработкаEDI = Истина Тогда	
				ЗаполнитьТиповыеРеквизитыТабличнойЧастиТоваров(НоваяСтрока,СтрокаТоваров,ЕстьСерииНоменклатуры);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	//Транспорт
	ЗаполнитьТранспортТранзакции(Сообщение);	
	
КонецФункции

Функция ПодготовитьТранзакциюОприходования(ДокументСсылка,Сообщение,СтандартнаяОбработкаEDI = Истина,СтандартноеЗаполнениеТЧ = Истина) Экспорт
		
	ЦельПоступления = ПолучитьКонстантуEDI("М_ОсновнаяЦельПоступления");
	ИмяРеквизитаОрганизация = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаОрганизация");
	ИмяРеквизитаКонтрагент 	= ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаКонтрагент");
	ИмяРеквизитаСклад 		= ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаСкладДокументаПоступления");
	ИмяРеквизитаГрузоотправитель = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяРеквизитаГрузоотправитель");
	
	Сообщение.Партнер = ПартнерМеркурий();
	ЗаполнитьТипизированныйРеквизит(Сообщение.Организация, ДокументСсылка, ИмяРеквизитаОрганизация);
	ЗаполнитьТипизированныйРеквизит(Сообщение.Площадка1С, ДокументСсылка, ИмяРеквизитаГрузоотправитель);
	
	ЗаполнитьТипизированныйРеквизит(Сообщение.ПлощадкаПолучатель1С, ДокументСсылка, ИмяРеквизитаСклад);
	
	Сообщение.Документ1С 						= ДокументСсылка;
	Сообщение.ДатаСоздания 						= ТекущаяДата();
	Сообщение.ДокументСсылка 					= ДокументСсылка;
	ЗаполнитьТипизированныйРеквизит(Сообщение.ХозяйствующийСубъект1С, ДокументСсылка, ИмяРеквизитаКонтрагент);
	ЗаполнитьТипизированныйРеквизит(Сообщение.ХозяйствующийСубъектПолучатель1С, ДокументСсылка, ИмяРеквизитаОрганизация);
	
	ЗаполнитьТипизированныйРеквизит(Сообщение.ДатаОтгрузки, ДокументСсылка, "ДатаВходящегоДокумента");
	Если Не ЗначениеЗаполнено(Сообщение.ДатаОтгрузки) Тогда 
		Сообщение.ДатаОтгрузки						= ДокументСсылка.Дата;
	КонецЕсли;
	
	Если СтандартноеЗаполнениеТЧ = Истина Тогда
		//Подготовка таб части из документа
		ИмяТЧТовары = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяТЧТоварыПоступление");
		ТабличнаяЧастьТовары = Новый Массив;//просто чтоб определить
		Выполнить("ТабличнаяЧастьТовары = ДокументСсылка."+ИмяТЧТовары);
		ЕстьСерииНоменклатуры = ОсновнойМодуль.ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"СерияНоменклатуры",ИмяТЧТовары);
		Для Каждого СтрокаТоваров ИЗ ТабличнаяЧастьТовары Цикл
			
			НоваяСтрока = Сообщение.Товары.Добавить();
			НоваяСтрока.Цель1С						= ЦельПоступления;
			НоваяСтрока.ВетСертификатБлагополучиеМестности = ПолучитьКонстантуEDI("М_БлагополучиеМестности");
			НоваяСтрока.ВетСертификатСпособХраненияПриПеревозке = ПолучитьКонстантуEDI("М_ОсновнойСпособХраненияПриПеревозке");
			
			СтандартнаяОбработкаEDI = Истина;
			РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьСтрокуТоваровТранзакции",СтандартнаяОбработкаEDI,
			Новый Структура("Сообщение,СтрокаТоваровСообщения,СтрокаТоваровДокумента,ДокументСсылка",
			Сообщение,НоваяСтрока,СтрокаТоваров,ДокументСсылка));
			
			Если СтандартнаяОбработкаEDI = Истина Тогда	
				ЗаполнитьТиповыеРеквизитыТабличнойЧастиТоваров(НоваяСтрока,СтрокаТоваров,ЕстьСерииНоменклатуры);
				НоваяСтрока.ПлощадкаПроизводитель		= Сообщение.Площадка1С; //заглушка сичтаем что произведено поставщиком
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	//Транспорт
	ЗаполнитьТранспортТранзакции(Сообщение);	
	
КонецФункции

Функция ПодготовитьТранзакциюМеркурий(ТипСообщения,ДокументСсылка,Сообщение,НеКонвертироватьСразу = Ложь) Экспорт
	
	//!Специфику, относящуюся к НЕСКОЛЬКИМ сообщениям 
	//следует писать в ЗаполнитьСпецифическиеРеквизитыТранзакции() 
	
	//ПМ на шапку
	СтандартнаяОбработкаEDI = Истина;
	ОбработкаСобытияПодключаемогоМодуля("ПодготовитьТранзакциюМеркурий",СтандартнаяОбработкаEDI,
	Новый Структура("ТипСообщения,Сообщение,ДокументСсылка",ТипСообщения,Сообщение,ДокументСсылка));
	//ПМ на товары
	СтандартноеЗаполнениеТЧ = Истина;
	ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьТабличнуюЧастьТоварыТранзакции",СтандартноеЗаполнениеТЧ,
	Новый Структура("ТипСообщения,Сообщение,ДокументСсылка",ТипСообщения,Сообщение,ДокументСсылка));
	
	
	Если ТипСообщения = "M_REC"  Тогда
		
		ПодготовитьТранзакциюОприходования(ДокументСсылка,Сообщение,СтандартнаяОбработкаEDI,СтандартноеЗаполнениеТЧ); 
		
	ИначеЕсли ТипСообщения = "M_DES" Тогда
		
		ПодготовитьТранзакциюОтгрузки(ДокументСсылка,Сообщение,СтандартнаяОбработкаEDI,СтандартноеЗаполнениеТЧ); 
		
	ИначеЕсли ТипСообщения = "M_MOV" Тогда
		
		ПодготовитьТранзакциюПеремещения(ДокументСсылка,Сообщение,СтандартнаяОбработкаEDI,СтандартноеЗаполнениеТЧ); 
		
	ИначеЕсли ТипСообщения = "M_PRD" Тогда
		
		//теперь все идет через Процедура ЗаполнитьСырьеТранзакцииПроизводства и для сырья там уже есть ПМ МеркурийЗаполнитьТабличнуюЧастьСырьеТранзакции
		
		ПодготовитьТранзакциюПроизводства(ДокументСсылка,Сообщение,,СтандартнаяОбработкаEDI,СтандартноеЗаполнениеТЧ); 
		
	КонецЕсли;
	
	//Реквизиты зависящие от сообщения
	ЗаполнитьСпецифическиеРеквизитыТранзакции(ТипСообщения,ДокументСсылка,Сообщение);
	
	Параметры = Новый Структура;
	//кастомные заполнения
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийПриПодготовкеТранзакции",,
														Новый Структура("Сообщение,ДокументСсылка,Параметры",
														Сообщение,ДокументСсылка,Параметры));
	
	КонвертироватьТТНиз1СвМерк(Сообщение);
														
	Если НеКонвертироватьСразу = Истина Тогда 
		//не конвертируем и не проверяем
	Иначе
		
		//Конвертация  //ПМ на после подготовки внутри КонвертироватьТранзакциюМеркурий
		КонвертироватьТранзакциюМеркурий(Сообщение);
		
		// проверяем поля на наличие ошибок
		РезультатПроверки = ПроверитьТранзакциюМеркурий(Сообщение);
		Сообщение.СодержитОшибки = НЕ РезультатПроверки.Успешно;
	КонецЕсли;
	
КонецФункции // ПодготовитьТранзакциюМеркурий()

Функция ПодготовитьСообщениеЗавершениеТранзакцииПроизводства(ТипСообщения,СообщениеСсылка,Документ) Экспорт

		//через карточку
		Сообщение = ОсновнойМодуль.ПолучитьСтруктуруСообщения(ТипСообщения,"Исходящее");
		
		Если ЗначениеЗаполнено(СообщениеСсылка) Тогда
			ДопРеквизитыСообщения = СообщениеСсылка.ДополнительныеРеквизиты;
			НайденнаяСтрокаИдентификатораТранзакции = ДопРеквизитыСообщения.Найти("ИдентификаторПроизводственнойТранзакции","ИмяРеквизита");
			НайденнаяСтрокаНЗвТр = ДопРеквизитыСообщения.Найти("ТранзакцияЗавершена","ИмяРеквизита");
			Если НайденнаяСтрокаНЗвТр<>Неопределено 
				И НайденнаяСтрокаИдентификатораТранзакции<>Неопределено
				И НайденнаяСтрокаНЗвТр.Значение = Ложь
				Тогда
				Сообщение.ИдентификаторПроизводственнойТранзакции = НайденнаяСтрокаИдентификатораТранзакции.Значение;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		ПодготовитьТранзакциюЗавершенияПроизводства(ТипСообщения,Документ,Сообщение);

		Возврат Сообщение;
		
КонецФункции 

Функция ПодготовитьТранзакциюЗавершенияПроизводства(ТипСообщения,ДокументСсылка,Сообщение) Экспорт
	
	СтандартнаяОбработкаEDI = Истина;
	ОбработкаСобытияПодключаемогоМодуля("ПодготовитьТранзакциюМеркурий",СтандартнаяОбработкаEDI,
	Новый Структура("ТипСообщения,Сообщение,ДокументСсылка,ЭтоЗавершениеНезавершеннойТранзакции",ТипСообщения,Сообщение,ДокументСсылка,Истина));
	
	Сообщение.Завершена = Истина;
	ПодготовитьТранзакциюПроизводства(ДокументСсылка,Сообщение,Истина,СтандартнаяОбработкаEDI,);
	//
	
	Параметры = Новый Структура;
	//кастомные заполнения
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийПриПодготовкеТранзакции",,
			Новый Структура("Сообщение,ДокументСсылка,Параметры",
			Сообщение,ДокументСсылка,Параметры));
			
	//Конвертация  //ПМ на после подготовки внутри КонвертироватьТранзакциюМеркурий
	КонвертироватьТранзакциюМеркурий(Сообщение);
	
			
	// проверяем поля на наличие ошибок
	РезультатПроверки = ПроверитьТранзакциюМеркурий(Сообщение);
	Сообщение.СодержитОшибки = НЕ РезультатПроверки.Успешно;


КонецФункции // ПодготовитьТранзакциюЗавершенияПроизводства()

Функция ЗаполнитьТипизированныйРеквизит(КудаПоместить, Знач ОбъектИсточник, Знач ИмяТипа, ТранзакцияАктивна = Неопределено) Экспорт
	
	Успешно = Ложь;
	
	Если ЕстьЗаполненныйТипизированныйРеквизит(ОбъектИсточник,ИмяТипа) Тогда
		Успешно = Истина;
		КудаПоместить = ОбъектИсточник[ИмяТипа];
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Функция ВычислитьТипизированныйРеквизит(Знач ОбъектИсточник, Знач ИмяТипа, ТранзакцияАктивна = Неопределено) Экспорт
	
	Если ЕстьЗаполненныйТипизированныйРеквизит(ОбъектИсточник,ИмяТипа) Тогда
		Возврат ОбъектИсточник[ИмяТипа];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЕстьЗаполненныйТипизированныйРеквизит(Знач ОбъектИсточник, Знач ИмяТипа, ТранзакцияАктивна = Неопределено) Экспорт
	
	Если ТранзакцияАктивна <> Истина Тогда
		//дешевле и быстрее через попытку
		Попытка
			ПопыткаВычисления = ОбъектИсточник[ИмяТипа];
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Если ОсновнойМодуль.ЕстьРеквизитОбъекта_Контур(ОбъектИсточник,ИмяТипа) И ЗначениеЗаполнено(ОбъектИсточник[ИмяТипа]) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ЕстьЗаполненныйТипизированныйРеквизит()

Процедура ЗаполнитьСпецифическиеРеквизитыТранзакции(ТипСообщения,ДокументСсылка,Сообщение)
    
	Если ТипСообщения = "M_DES"
		ИЛИ ТипСообщения = "M_MOV"
		ИЛИ ТипСообщения = "M_PRD" Тогда //По идее галка cargoInspected должна быть во всех исходящих транзакциях	
		Сообщение.ВетСертификатОбследованоВетВрачом = ПолучитьКонстантуEDI("М_ОсновноеЗначениеОбследованоВетВрачом") = Истина;
		Сообщение.ВетСертификатЭкспертиза			= ПолучитьКонстантуEDI("М_ОсновноеЗначениеЭкспертизы");
	КонецЕсли;
                                                       
	БлагополучиеПоУмолчанию = ПолучитьКонстантуEDI("М_БлагополучиеМестности");
	Сообщение.БлагополучиеМестности = ?(ЗначениеЗаполнено(БлагополучиеПоУмолчанию),БлагополучиеПоУмолчанию,"Местность благополучна");
	
	Если ТипСообщения = "M_PRD" 
		И Не ЗначениеЗаполнено(Сообщение.СообщениеСсылка)
		И ОсновнойМодуль.ПолучитьКонстантуEDI("М_ИспользоватьНезавершенноеПроизводство") = Истина Тогда
		Сообщение.Завершена = Ложь;
	КонецЕсли;

	Если ТипСообщения = "M_DES"
		ИЛИ ТипСообщения = "M_MOV" Тогда 	
		
		Сообщение.Цель1С				= ПолучитьКонстантуEDI("М_ОсновнаяЦельОтгрузки");
		
		//разрешение на вывоз 
		РазрешениеНаВывозСтруктура = ПолучитьРазрешениеНаВывозДляТранзакции(ТипСообщения,ДокументСсылка,Сообщение);
		Сообщение.РазрешениеНаВывозНомер= РазрешениеНаВывозСтруктура.Номер;
		Сообщение.РазрешениеНаВывозДата	= РазрешениеНаВывозСтруктура.Дата;
		
	КонецЕсли;
	
	//меркурий всегда воспринимает только с точностью до дня для нескоропорта и с точностью до часа для скоропорта
	//это ключевые для поиска колонки! по ним потом будем находить соответствие для оформленного нами ВСД
	Для каждого СтрокаТоваров Из Сообщение.Товары Цикл
		
		Если СтрокаТоваров.Скоропортящаяся = Истина Тогда
			СтрокаТоваров.СрокГодности = НачалоЧаса(?(ЗначениеЗаполнено(СтрокаТоваров.СрокГодности),СтрокаТоваров.СрокГодности,Дата(1,1,1)));
			СтрокаТоваров.ДатаПроизводства = НачалоЧаса(?(ЗначениеЗаполнено(СтрокаТоваров.ДатаПроизводства),СтрокаТоваров.ДатаПроизводства,Дата(1,1,1)));
			СтрокаТоваров.СрокГодности2 = НачалоЧаса(?(ЗначениеЗаполнено(СтрокаТоваров.СрокГодности2),СтрокаТоваров.СрокГодности2,Дата(1,1,1)));
			СтрокаТоваров.ДатаПроизводства2 = НачалоЧаса(?(ЗначениеЗаполнено(СтрокаТоваров.ДатаПроизводства2),СтрокаТоваров.ДатаПроизводства2,Дата(1,1,1)));
		Иначе
			СтрокаТоваров.СрокГодности = НачалоДня(?(ЗначениеЗаполнено(СтрокаТоваров.СрокГодности),СтрокаТоваров.СрокГодности,Дата(1,1,1)));
			СтрокаТоваров.ДатаПроизводства = НачалоДня(?(ЗначениеЗаполнено(СтрокаТоваров.ДатаПроизводства),СтрокаТоваров.ДатаПроизводства,Дата(1,1,1)));
			СтрокаТоваров.СрокГодности2 = НачалоДня(?(ЗначениеЗаполнено(СтрокаТоваров.СрокГодности2),СтрокаТоваров.СрокГодности2,Дата(1,1,1)));
			СтрокаТоваров.ДатаПроизводства2 = НачалоДня(?(ЗначениеЗаполнено(СтрокаТоваров.ДатаПроизводства2),СтрокаТоваров.ДатаПроизводства2,Дата(1,1,1)));
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОтправитьТранзакциюМеркурий(Сообщение,Параметры) Экспорт

	Если Сообщение.ТипСообщения = "M_REC" Тогда
		//несколько ВСД по документу копия будет использоваться для созранения в сообщение	
		КопияСообщения = ОсновнойМодуль.ПолучитьКопиюСообщения(Сообщение);
		ОригинальныеТоварыСообщения = Сообщение.Товары.Скопировать();
		
		ТоварыСвернутыеПоНомерамВСД = Сообщение.Товары.Скопировать(,"ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата");
		ТоварыСвернутыеПоНомерамВСД.Свернуть("ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата");
		
		//гасить следует по 1 ВСД - так говорит апи при попытке погасить несколько	
		Для каждого СтрокаВходящего Из ТоварыСвернутыеПоНомерамВСД Цикл
			
			//по товарам, где уже получен номер ВСД UUID не надо отправлять транзакцию (переотправка когда упала часть ВСТ в рамках ТТН)
			Если Значениезаполнено(СтрокаВходящего.ВетСертификатUUID) Тогда
				Продолжить;
			КонецЕсли;
			
			ОтборПо1ВСД = Новый Структура("ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата",СтрокаВходящего.ВетСертификатUUID,СтрокаВходящего.ВетСертификатСерия,СтрокаВходящего.ВетСертификатНомер,СтрокаВходящего.ВетСертификатДата);
			ТоварыПо1ВСД = ОригинальныеТоварыСообщения.НайтиСтроки(ОтборПо1ВСД);
			
			Сообщение.Товары.Очистить();
			ЕдинственнаяСтрокаСообщения = Сообщение.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ЕдинственнаяСтрокаСообщения,ТоварыПо1ВСД[0],,"Количество,КоличествоУпаковок");
			//и теперь итоговые Количества
			Для каждого ТоварПо1ВСД Из ТоварыПо1ВСД Цикл
				
				ЕдинственнаяСтрокаСообщения.Количество 			= ЕдинственнаяСтрокаСообщения.Количество + ТоварПо1ВСД.Количество; 
				ЕдинственнаяСтрокаСообщения.КоличествоУпаковок 	= ЕдинственнаяСтрокаСообщения.КоличествоУпаковок + ТоварПо1ВСД.КоличествоУпаковок; 
				
			КонецЦикла;
			
			Параметры.Вставить("Сообщение",	Сообщение);
			//для этого типа транзакции в справочнике будет создан 1 Элемент и сообщение у него будет общее
			КопияСообщения.Товары = ОригинальныеТоварыСообщения.Скопировать();
			Параметры.Вставить("СообщениеДляСохранения",	КопияСообщения);
			//какой разделитель сделать здесь? у нас еще нет UUID
			Параметры.Вставить("ВСДUUID",	""+СтрокаВходящего.ВетСертификатСерия+"-"+СтрокаВходящего.ВетСертификатНомер+"-"+Формат(СтрокаВходящего.ВетСертификатДата, "ДФ=ddMMyyyy"));
			
			ВыполнитьТранзакциюМеркурий(Сообщение.ТипСообщения, Сообщение.ДокументСсылка, Параметры);
			
		КонецЦикла; 
		
	Иначе
	
		ВыполнитьТранзакциюМеркурий(Сообщение.ТипСообщения, Сообщение.ДокументСсылка, Параметры);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТранспортТранзакции(Сообщение)
	
	Сообщение.МультимодальнаяПеревозка = Ложь;
	Сообщение.Транспорт.ВидТранспорта = ПолучитьКонстантуEDI("М_ОсновнойТипТранспорта");
	Сообщение.Транспорт.СпособХраненияПриПеревозке = ОпределитьСпособХраненияПриПеревозкеМеркурий(Сообщение);
	СтандартнаяОбработкаEDI = Истина;
	
	ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьТранспортТранзакции",СтандартнаяОбработкаEDI,
	Новый Структура("ТранспортТранзакции,Сообщение,ДокументСсылка",	Сообщение.Транспорт,Сообщение,Сообщение.ДокументСсылка));	
	
КонецПроцедуры

Функция ПолучитьРазрешениеНаВывозДляТранзакции(ТипСообщения,ДокументСсылка,Сообщение)
	
	СтандартнаяОбработкаEDI = Истина;
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПолучитьРазрешениеНаВывозДляТранзакции",СтандартнаяОбработкаEDI,Новый Структура("ТипСообщения,ДокументСсылка,Сообщение",ТипСообщения,ДокументСсылка,Сообщение));
	
	Если Не СтандартнаяОбработкаEDI Тогда
		Если РезультатПМ.Тип() = Тип("Структура") 
			И РезультатПМ.Свойство("Номер")
			И РезультатПМ.Свойство("Дата") Тогда
			Возврат РезультатПМ;
		Иначе
			Возврат Новый Структура("Номер,Дата","",Дата(1,1,1));
		КонецЕсли;
	Иначе
		Возврат Новый Структура("Номер,Дата","",Дата(1,1,1));
	КонецЕсли;
	
КонецФункции 

Процедура ОбработатьРезультатЗавершенияНезавершенногоПроизводства(ОтветМеркурия,Параметры)

	Если ОтветМеркурия<>Неопределено Тогда
		НомерЗавершаемойТранзакции = Параметры.Сообщение.ИдентификаторПроизводственнойТранзакции;
		ПометитьНезавершенныеТранзакцииЗавершенными(НомерЗавершаемойТранзакции);
	КонецЕсли;
	
КонецПроцедуры

//Интеграционные
Процедура ДобавитьСтрокиОформленияТребуемогоДействияМеркурий(НастройкаОформленияТребуемогоДействия) Экспорт
	
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Оформить перемещение"			,"Перемещение"			,Истина	,"Отправить_M_MOV",8);
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Погасить входящие ВСД"			,"ПодписатьИОтправить"	,Истина	,"Принять_M_INV",2);
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Оформить входящую партию"		,"ПринятьСообщение"		,Истина	,"Принять_M_REC",2);
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Оформить транзакцию продажи"	,"УведомитьОбОтгрузке"	,Истина	,"Отправить_M_DES",8);
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Оформить производственную транзакцию","Производство"	,Истина	,"Отправить_M_PRD",8);
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Переотправить транзакцию"		,"ПереотправитьСообщение",Истина,"Переотправить_M_DES",5);
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Обрабатывается"				,"Загрузка"				,Ложь	,"ДождатьсяДоставки",4);
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Распечатать ВСД"			,"Штрихкод"				,Истина	,"РаспечататьВСД",18);
	Если ПолучитьКонстантуEDI("М_ИспользоватьНезавершенноеПроизводство") = Истина Тогда
		ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Завершить транзакцию производства"	,"СтатусУточнен"		,Истина	,"Завершить_M_PRD",8);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКонстантуEDI(ИмяКонстанты) Экспорт
	
	Возврат ОсновнойМодуль.ПолучитьКонстантуEDI(ИмяКонстанты);
	
КонецФункции

Функция ОпределитьСпособХраненияПриПеревозкеМеркурий(Сообщение)

	//  проверить по свойству СпособХранения номенклатуры по регистру доп свойств (создать)
	//	Может статься что по номенклатуре различный способ хранения при перевозке - тогда, наверное, следует выбрать наиболее  "холодный" из всех
	
	ОбщийСпособХранения = ПолучитьКонстантуEDI("М_ОсновнойСпособХраненияПриПеревозке");
	Если Не ЗначениеЗаполнено(ОбщийСпособХранения) ТОгда
		ОбщийСпособХранения = "FROZEN";
	КонецЕсли;
	
	Возврат ОбщийСпособХранения; 
	
КонецФункции // ОпределитьСпособХраненияПриПеревозкеМеркурий()

Функция ОбработкаСобытияПодключаемогоМодуля(ИмяСобытия,СтандартнаяОбработкаEDI=Неопределено,ПараметрыПодключаемогоМодуля = Неопределено) Экспорт
	
	Возврат ОсновнойМодуль.ОбработкаСобытияПодключаемогоМодуля(ИмяСобытия,СтандартнаяОбработкаEDI,ПараметрыПодключаемогоМодуля);
	
КонецФункции

Процедура ПометитьНезавершенныеТранзакцииЗавершенными(НомерЗавершаемойТранзакции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка
	|ПОМЕСТИТЬ ВТ_Незавершенные
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""ТранзакцияЗавершена""
	|	И КонтурEDI_СообщенияДополнительныеРеквизиты.Значение = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка
	|ПОМЕСТИТЬ ВТ_НомераТранзакций
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""ИдентификаторПроизводственнойТранзакции""
	|	И КонтурEDI_СообщенияДополнительныеРеквизиты.Значение = &НомерТранзакции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Незавершенные.Ссылка
	|ИЗ
	|	ВТ_Незавершенные КАК ВТ_Незавершенные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НомераТранзакций КАК ВТ_НомераТранзакций
	|		ПО ВТ_Незавершенные.Ссылка = ВТ_НомераТранзакций.Ссылка";
	
	Запрос.УстановитьПараметр("НомерТранзакции",НомерЗавершаемойТранзакции);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект =  Выборка.Ссылка.ПолучитьОбъект();
		ИскомаяСтрока = СообщениеОбъект.ДополнительныеРеквизиты.Найти("ТранзакцияЗавершена","ИмяРеквизита");
		Если ИскомаяСтрока<>Неопределено Тогда 
			ИскомаяСтрока.Значение = Истина;
			СообщениеОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Конвертация 1С в Меркурий
Функция КонвертироватьШапкуТранзакцииМеркурий(Сообщение) Экспорт
	
	Сообщение.ХозяйствующийСубъектEDI.GUID 				= КонвертироватьЗначение1СвМеркурий(Сообщение.ХозяйствующийСубъект1С,,"МеркурийХС");		
	Если Сообщение.Свойство("ХозяйствующийСубъектПолучательEDI") ТОгда
		Сообщение.ХозяйствующийСубъектПолучательEDI.GUID 	= КонвертироватьЗначение1СвМеркурий(Сообщение.ХозяйствующийСубъектПолучатель1С,,"МеркурийХС");		
	КонецЕсли;
	
	//Площадки
	Сообщение.ПлощадкаEDI.GUID 							= КонвертироватьЗначение1СвМеркурий(Сообщение.Площадка1С,,"МеркурийПлощадка");
	Если Сообщение.Свойство("ПлощадкаПолучательEDI") ТОгда
		Сообщение.ПлощадкаПолучательEDI.GUID 				= КонвертироватьЗначение1СвМеркурий(Сообщение.ПлощадкаПолучатель1С,,"МеркурийПлощадка");
	КонецЕсли;
	
	Если Сообщение.Свойство("ПеревозчикEDI") ТОгда
		Сообщение.ПеревозчикEDI.GUID 				= КонвертироватьЗначение1СвМеркурий(Сообщение.Перевозчик1С,,"МеркурийХС");
	КонецЕсли;
	
	Сообщение.ЦельEDI.GUID = КонвертироватьЗначение1СвМеркурий(Сообщение.Цель1С,,"МеркурийЦель");//"5b91af60-e089-11e1-bcf3-b499babae7ea"; //Заглушка
	
	КонвертироватьТТНиз1СвМерк(Сообщение);
	
КонецФункции // КонвертироватьШапкуТранзакцииМеркурий()

Процедура КонвертироватьТТНиз1СвМерк(Сообщение)

	Если Сообщение.ТипСообщения = "M_DES" ИЛИ Сообщение.ТипСообщения = "M_MOV" Тогда 
		Если ЗначениеЗаполнено(Сообщение.Документ1С) 
			И НЕ ЗначениеЗаполнено(Сообщение.ДокументEDI.Номер)
			И локПолучитьКонстантуEDI("М_НомерТТНизРТУ")<>Ложь Тогда 
			Сообщение.ДокументEDI.Номер = Сообщение.Документ1С.Номер;
		КонецЕсли;
		Если ЗначениеЗаполнено(Сообщение.Документ1С) 
			И НЕ ЗначениеЗаполнено(Сообщение.ДокументEDI.Дата) 
			И локПолучитьКонстантуEDI("М_НомерТТНизРТУ")<>Ложь Тогда 
			Сообщение.ДокументEDI.Дата =  Сообщение.Документ1С.Дата;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


Функция ПолучитьТаблицу_productItemДляТоваров1СМеркурийДляСообщения(Сообщение,ТаблицаКонвертации)
	
	GUIDПлощадки = Сообщение.ПлощадкаEDI.GUID;
	Товары = Сообщение.Товары;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.Номенклатура КАК Номенклатура,
		|	Таб.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ПОМЕСТИТЬ _ТабТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК Таб
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтурМеркурий_КаталогПродукции.Номенклатура,
		|	КонтурМеркурий_КаталогПродукции.ХарактеристикаНоменклатуры,
		|	КонтурМеркурий_КаталогПродукции.МеркурийproductItemUUID
		|ПОМЕСТИТЬ ВТ_КаталогПлощадки
		|ИЗ
		|	РегистрСведений.КонтурМеркурий_КаталогПродукции КАК КонтурМеркурий_КаталогПродукции
		|ГДЕ
		|	КонтурМеркурий_КаталогПродукции.ПлощадкаGUID = &GUIDПлощадки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	_ТабТоваров.Номенклатура КАК Номенклатура,
		|	ВТ_КаталогПлощадки.МеркурийproductItemUUID КАК productItemUUID,
		|	ВТ_КаталогПлощадки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ИЗ
		|	_ТабТоваров КАК _ТабТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КаталогПлощадки КАК ВТ_КаталогПлощадки
		|		ПО _ТабТоваров.Номенклатура = ВТ_КаталогПлощадки.Номенклатура";
		
	ТабТоваров = ?(ТипЗнч(Сообщение.Товары) = Тип("ТаблицаЗначений"), Сообщение.Товары, Сообщение.Товары.Выгрузить());//для УФ
	
	Запрос.УстановитьПараметр("GUIDПлощадки",GUIDПлощадки);
	Запрос.УстановитьПараметр("ТаблицаТоваров",ТаблицаКонвертации);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();	
	
КонецФункции // ПолучитьТаблицу_productItemДляТоваров1СМеркурий()

Функция ПолучитьТаблицу_productItemДляСкладскогоОстатка(МассивproductItemUUID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурМеркурий_КаталогПродукции.Номенклатура КАК Номенклатура,
	|	КонтурМеркурий_КаталогПродукции.МеркурийproductItemUUID КАК productItemUUID
	|ИЗ
	|	РегистрСведений.КонтурМеркурий_КаталогПродукции КАК КонтурМеркурий_КаталогПродукции
	|ГДЕ
	|	КонтурМеркурий_КаталогПродукции.МеркурийproductItemUUID <> """"
	|	И КонтурМеркурий_КаталогПродукции.МеркурийproductItemUUID В(&СписокproductItemUUID)";

	СписокproductItemUUID = Новый СписокЗначений;
	Для каждого ЭлементМассива Из МассивproductItemUUID Цикл
		Если ЗначениеЗаполнено(ЭлементМассива) Тогда 
			СписокproductItemUUID.Добавить(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СписокproductItemUUID",СписокproductItemUUID);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();	
	
КонецФункции

Функция ПодобратьСоответствиеНоменклатуры(СтрокаТоваров, ТаблицаСоответствий)
	
	НайденноеСоответствиеНоменклатуры = Неопределено;
	ЕстьХарактеристика = ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры);
	
	Если ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
		НайденноеСоответствиеНоменклатурыИХарактеристики = ТаблицаСоответствий.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения",СтрокаТоваров.Номенклатура,СтрокаТоваров.ХарактеристикаНоменклатуры,СтрокаТоваров.ЕдиницаИзмерения));
		Если НайденноеСоответствиеНоменклатурыИХарактеристики.Количество()>0 Тогда
			НайденноеСоответствиеНоменклатуры = НайденноеСоответствиеНоменклатурыИХарактеристики[0];
			Возврат НайденноеСоответствиеНоменклатуры; //нашли по Номенклатуре, Характеристике и Единице измерения 
		КонецЕсли;
	КонецЕсли;
	
	Если НайденноеСоответствиеНоменклатуры = Неопределено Тогда 	
		//тогда ищем без характеристики т.е. установлена характеристика неопределено
		НайденноеСоответствиеНоменклатурыИХарактеристики = ТаблицаСоответствий.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения",СтрокаТоваров.Номенклатура,Неопределено,СтрокаТоваров.ЕдиницаИзмерения));
		Если НайденноеСоответствиеНоменклатурыИХарактеристики.Количество()>0 Тогда
			НайденноеСоответствиеНоменклатуры = НайденноеСоответствиеНоменклатурыИХарактеристики[0];
			Возврат НайденноеСоответствиеНоменклатуры; //нашли по Номенклатуре и Единице измерения 
		КонецЕсли;
	КонецЕсли;
	
	Если НайденноеСоответствиеНоменклатуры = Неопределено Тогда 	
		НайденноеСоответствиеНоменклатуры = ТаблицаСоответствий.Найти(СтрокаТоваров.Номенклатура,"Номенклатура");
		Возврат НайденноеСоответствиеНоменклатуры;
	КонецЕсли;
	
	Возврат НайденноеСоответствиеНоменклатуры;
КонецФункции

Функция СформироватьТаблицуКонвертации(ТаблицаТоваров)
	
	Если ТипЗнч(ТаблицаТоваров) = Тип("ТаблицаЗначений") ТОгда
		Если ОсновнойМодуль.НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
			ТаблицаКонвертации = ТаблицаТоваров.Скопировать(,"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения");
		Иначе
			ТаблицаКонвертации = ТаблицаТоваров.Скопировать(,"Номенклатура, ЕдиницаИзмерения");
			ТаблицаКонвертации.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1)));//заглушка для конфигураций, где нет ХарактеристикНоменклатуры и есть внешнее хранилище
		КонецЕсли;
	Иначе
		ТаблицаКонвертации = ТаблицаТоваров;
		//ТаблицаКонвертации = ТаблицаТоваров.ВыгрузитьКолонки("Номенклатура, ЕдиницаИзмерения");
		//ТаблицаКонвертации.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("NULL,Строка",,Новый КвалификаторыСтроки(1)));//заглушка для конфигураций, где нет ХарактеристикНоменклатуры и есть внешнее хранилище
	КонецЕсли;
	
	Возврат ТаблицаКонвертации;
	
КонецФункции

Функция КонвертироватьТабличнуюЧастьМеркурий(Сообщение, НеВыбиратьИсходныеПартии=Ложь,ПересчитыватьКоличество = Истина) Экспорт
	
	ТранзакцияВРазрезеСвоегоСправочника = Найти("M_DES/M_PRD/M_MOV",Сообщение.ТипСообщения)<>0;
	
	ТипСообщения = Сообщение.ТипСообщения;
	ТаблицаТоваров = Сообщение.Товары;
	
	ТаблицаКонвертации = СформироватьТаблицуКонвертации(ТаблицаТоваров);
	
	Если ТипСообщения="M_DES" и ТипЗНЧ(ТаблицаКонвертации) = Тип("ТаблицаЗначений") Тогда
		//если это отгрузка в торговые сети - попробуем заполнить КодТовараПартнера
		ЗаполнитьКодыТовараПартнера(Сообщение,ТаблицаКонвертации);
	КонецЕсли;
	
	ТаблицаСоответствий = ПолучитьТаблицуСоответствийДляТоваров1СМеркурий(ТаблицаКонвертации,Сообщение.Партнер,Ложь);
	ТаблицаСоответствийЕдиницИзмерения = ПолучитьТаблицуСоответствийЕдиницИзмеренияМеркурий();
	ТаблицаСоответствийЕдиницИзмеренияУпаковок = ПолучитьСоответствияВсехЕдиницИзмеренияУпаковокМеркурий();
	
	Если ТипСообщения="M_PRD" Тогда // сформируем таблицы соответствий для сырья
		ТаблицаКонвертацииСырья = СформироватьТаблицуКонвертации(Сообщение.Сырье);
		ТаблицаСоответствийСырья = ПолучитьТаблицуСоответствийДляТоваров1СМеркурий(ТаблицаКонвертацииСырья,Сообщение.Партнер,Ложь);
		ТаблицаСоответствийproductItemСырья = ПолучитьТаблицу_productItemДляТоваров1СМеркурийДляСообщения(Сообщение,ТаблицаКонвертацииСырья);
	КонецЕсли;
	
	//Наш справочник
	Если ТранзакцияВРазрезеСвоегоСправочника = Истина Тогда
		ТаблицаСоответствийproductItem = ПолучитьТаблицу_productItemДляТоваров1СМеркурийДляСообщения(Сообщение,ТаблицаКонвертации);
	КонецЕсли;
	
	Если ТипЗнч(Сообщение.Товары) = Тип("ТаблицаЗначений") и Сообщение.Товары.Колонки.Найти("ЕдиницаИзмерения") = Неопределено и //для УФ_УТ колонка "ЕдиницаИзмерения" удаляется при получении таблицы соответствий (выше). Пока вернем назад. На Рефакторинг
		Сообщение.Товары.Колонки.Найти("ЕдиницаИзмеренияТип2") <> Неопределено Тогда
		Сообщение.Товары.Колонки.Добавить("ЕдиницаИзмерения", Сообщение.Товары.Колонки.ЕдиницаИзмеренияТип2.ТипЗначения);
		Сообщение.Товары.ЗагрузитьКолонку(Сообщение.Товары.ВыгрузитьКолонку("ЕдиницаИзмеренияТип2"), "ЕдиницаИзмерения");
	КонецЕсли;

	Для Каждого СтрокаТоваров Из Сообщение.Товары Цикл
		
		////////////////////////////////////////////////////////////
		// Проверка соответствий 4 уровня и конвертация
		Если ТранзакцияВРазрезеСвоегоСправочника = Истина Тогда
			НайденныйproductItem = Неопределено;
			Если ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
				НайденныеПоХарактеристикеproductItem = ТаблицаСоответствийproductItem.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",СтрокаТоваров.Номенклатура,СтрокаТоваров.ХарактеристикаНоменклатуры));
				Если НайденныеПоХарактеристикеproductItem.Количество()>0 Тогда
					НайденныйproductItem = НайденныеПоХарактеристикеproductItem[0];
				Иначе
					//тогда ищем без характеристики т.е. установлена характеристика неопределено
					НайденныеПоХарактеристикеproductItem = ТаблицаСоответствийproductItem.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",СтрокаТоваров.Номенклатура,Неопределено));
					Если НайденныеПоХарактеристикеproductItem.Количество()>0 Тогда
					НайденныйproductItem = НайденныеПоХарактеристикеproductItem[0];
					КонецЕсли;
				КонецЕсли;
			Иначе
				НайденныйproductItem = ТаблицаСоответствийproductItem.Найти(СтрокаТоваров.Номенклатура,"Номенклатура");
			КонецЕсли;
			
			Если НайденныйproductItem <> Неопределено И ЗначениеЗаполнено(НайденныйproductItem.productItemUUID) Тогда
				СтрокаТоваров.productItemUUID = НайденныйproductItem.productItemUUID;
			КонецЕсли;
		КонецЕсли;
		
		////////////////////////////////////////////////////////////
		// Поиск соответствий 3 уровня
		НайденноеСоответствиеНоменклатуры = ПодобратьСоответствиеНоменклатуры(СтрокаТоваров, ТаблицаСоответствий);
		
		Если НайденноеСоответствиеНоменклатуры <> Неопределено Тогда
			СтрокаТоваров.GUID = НайденноеСоответствиеНоменклатуры.КодТовараСторонний;
			Если НЕ ЗначениеЗаполнено(СтрокаТоваров.GTIN) Тогда 
				СтрокаТоваров.GTIN = НайденноеСоответствиеНоменклатуры.GTIN;
			КонецЕсли;
			
			//<Удалить>
			// Более не надо, т.к. ОставитьТолькоПоднадзорныеТоварыВТабличнойЧасти() теперь итак удалит эти строки
			//Если ТипСообщения = "M_PRD" 
			//	И НайденноеСоответствиеНоменклатуры.ПроизводимТовар<>Истина 
			//	И ЗначениеЗаполнено(СокрЛП(СтрокаТоваров.GUID)) Тогда
			//	//осознанный выбор того что товар не производим т.к. указан guid3уровня
			//	//если мы не производим товар - присвоим ему нулевой GUID и он выкинется из произведенной продукции
			//	//важно понимать что для того чтобы он не выходил в требуемые действия проверка стоит при формировании этого списка документов
			//	СтрокаТоваров.GUID = НулевойGUID; 
			//КонецЕсли;  
			//<КонецУдалить>
			
			Если ЗначениеЗаполнено(НайденноеСоответствиеНоменклатуры.КоэффициентEDIВ1С) Тогда
				Если ПересчитыватьКоличество = истина Тогда 
					СтрокаТоваров.Количество = СтрокаТоваров.КоличествоВДокументе*НайденноеСоответствиеНоменклатуры.КоэффициентEDIВ1С;
				КонецЕсли;
			Иначе
				СтрокаТоваров.Количество = СтрокаТоваров.КоличествоВДокументе;
			КонецЕсли;
			
			СтрокаТоваров.Скоропортящаяся = НайденноеСоответствиеНоменклатуры.Скоропортящаяся;
			Если СокрЛП(НайденноеСоответствиеНоменклатуры.ЕдиницаИзмеренияGUID) <> "" Тогда 
				НайденнаяЕИМерк = ПолучитьКлассификаторЕдиницИзмеренияМеркурий().Найти(СокрЛП(НайденноеСоответствиеНоменклатуры.ЕдиницаИзмеренияGUID),"GUID");
				Если НайденнаяЕИМерк<>Неопределено Тогда 
					СтрокаТоваров.unitUUID = НайденнаяЕИМерк.UUID;
					СтрокаТоваров.unitGUID = НайденнаяЕИМерк.GUID;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаТоваров.Количество = СтрокаТоваров.КоличествоВДокументе; //не нашли соответствие
		КонецЕсли;
		////////////////////////////////////////////////////////////
		// Конвертация ЕдиницИзмерения только если мы уже не сконвертировали их через соответствия
		Если Не ЗначениеЗаполнено(СтрокаТоваров.unitUUID) Тогда
			
			Если ОсновнойМодуль.ИмяКонфигурации1С = "УФ_УТ" Тогда
				НайденноеСоответствиеЕдиницыИзмерения = ТаблицаСоответствийЕдиницИзмерения.Найти(СтрокаТоваров.ЕдиницаИзмерения,"Соответствие");
			Иначе
				НайденноеСоответствиеЕдиницыИзмерения = ТаблицаСоответствийЕдиницИзмерения.Найти(СтрокаТоваров.ЕдиницаИзмеренияПоКлассификатору,"Соответствие");
			КонецЕсли;
			Если НайденноеСоответствиеЕдиницыИзмерения <> Неопределено Тогда
				СтрокаТоваров.unitUUID = НайденноеСоответствиеЕдиницыИзмерения.UUID;
			КонецЕсли;
		КонецЕсли;
		
		////////////////////////////////////////////////////////////
		// Конвертация Упаковок
		Если ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмеренияУпаковок) И ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмеренияУпаковок) Тогда
			НайденноеСоответствиеЕдиницыИзмеренияУпаковок = ТаблицаСоответствийЕдиницИзмеренияУпаковок.Найти(СтрокаТоваров.ЕдиницаИзмеренияУпаковок,"Соответствие");
			Если НайденноеСоответствиеЕдиницыИзмеренияУпаковок <> Неопределено Тогда
				СтрокаТоваров.ЕдиницаИзмеренияУпаковокUUID = НайденноеСоответствиеЕдиницыИзмеренияУпаковок.UUID;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипСообщения = "M_REC" ТОгда
			
			СтрокаТоваров.ПлощадкаПроизводительGUID = КонвертироватьЗначение1СвМеркурий(СтрокаТоваров.ПлощадкаПроизводитель,,"МеркурийПлощадка");   			
			СтрокаТоваров.ЦельEDI = КонвертироватьЗначение1СвМеркурий(СтрокаТоваров.Цель1С,,"МеркурийЦель");
			СтрокаТоваров.КоличествоКПодтверждению = СтрокаТоваров.Количество;
			СтрокаТоваров.КоличествоУпаковокКПодтверждению = СтрокаТоваров.КоличествоУпаковок;
			ОпределитьСтатусРасхожденийПоСтроке(СтрокаТоваров);
			
		КонецЕсли;
		
		
		Если ТипСообщения = "M_REC" или ТипСообщения = "M_DES" или ТипСообщения = "M_MOV" ТОгда
			
			СтрокаТоваров.СтранаUUID = КонвертироватьЗначение1СвМеркурий(СтрокаТоваров.Страна,,"МеркурийСтрана");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипСообщения = "M_PRD" Тогда //надо рефакторить это 
		КонвертироватьСырьеТранзакцииПроизводства(Сообщение, 
		НеВыбиратьИсходныеПартии,
		ПересчитыватьКоличество,
		ТаблицаСоответствийСырья, //здесь нужна таблица соответствий для сырья
		ТаблицаСоответствийЕдиницИзмерения,
		ТаблицаСоответствийЕдиницИзмеренияУпаковок,
		ТаблицаСоответствийproductItemСырья, //здесь нужна таблица соответствий для сырья
		ТранзакцияВРазрезеСвоегоСправочника,
		ТипСообщения);
	КонецЕсли;
	
	Если ТипСообщения<>"M_INC" Тогда
		ОставитьТолькоПроизводимыеНами = ТипСообщения="M_PRD";
		ОставитьТолькоПоднадзорныеТоварыВТабличнойЧасти(Сообщение.Товары, ОставитьТолькоПроизводимыеНами);
	КонецЕсли;
		
	Если (ТипСообщения = "M_MOV" ИЛИ ТипСообщения = "M_DES" ИЛИ ТипСообщения = "M_PRD") 
		И ЗначениеЗаполнено(Сообщение.ПлощадкаEDI.GUID)
		И НеВыбиратьИсходныеПартии=Ложь ТОгда
		//выбирать исходные партии следует если есть хоть 1 незаполненная
		ВыбратьИсходныеПартииТранзакцииМеркурий(Сообщение)
	КонецЕсли;
	
	
КонецФункции // КонвертироватьТабличнуюЧастьМеркурий()

Процедура ЗаполнитьКодыТовараПартнера(Сообщение,ЗНАЧ ТаблицаКонвертацииИсходная)
	
	ТаблицаКонвертации = ТаблицаКонвертацииИсходная.Скопировать();
	ПартнерEDI = Неопределено;
	
	Если Не Сообщение.Свойство("ХозяйствующийСубъектПолучатель1С") Тогда 
		Возврат; //защита на случай если это каким-то образом не сообщение отгрузки
	КонецЕсли;
	
	
	Товары = Сообщение.Товары;
	Если Товары.Количество()>0 Тогда
		
		//для определения Партнера - воспользуемся EDI логикой
		Если ЗначениеЗаполнено(Сообщение.ХозяйствующийСубъектПолучатель1С) Тогда 
			ПартнерEDI = ОсновнойМодуль.ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ХозяйствующийСубъектПолучатель1С, "ПартнерКонтрагента");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПартнерEDI) И ЗначениеЗаполнено(Сообщение.ПлощадкаПолучатель1С) Тогда 
			ПартнерEDI = ОсновнойМодуль.ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ПлощадкаПолучатель1С, "ПартнерКонтрагента");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПартнерEDI) Тогда
			ТочкаДоставки = ОсновнойМодуль.НайтиОбъектПоЗначениюСвойства("ЮрФизЛицо_ТочкиДоставки",Сообщение.ПлощадкаПолучатель1С);
			Если ЗначениеЗаполнено(ТочкаДоставки) Тогда
				ТочкаДоставкиПолностью = ОсновнойМодуль.ПолучитьЭлементСправочника("ТочкиДоставкиСторонние",ТочкаДоставки);
				ПартнерEDI = ТочкаДоставкиПолностью.Партнер;
			КонецЕсли;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(ПартнерEDI) Тогда
			ТаблицаСоответствийПартнера = ПолучитьТаблицуСоответствийДляТоваров1СМеркурий(ТаблицаКонвертации,ПартнерEDI,Ложь);
			
			Для Каждого СтрокаТоваров Из Сообщение.Товары Цикл
				
				// Поиск соответствий EDI
				НайденноеСоответствиеНоменклатуры = ПодобратьСоответствиеНоменклатуры(СтрокаТоваров, ТаблицаСоответствийПартнера);
				Если НайденноеСоответствиеНоменклатуры <> Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаТоваров.КодТовараПокупателя) Тогда 
						СтрокаТоваров.КодТовараПокупателя = СокрЛП(НайденноеСоответствиеНоменклатуры.КодТовараСторонний);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СтрокаТоваров.GTIN) Тогда 
						СтрокаТоваров.GTIN = СокрЛП(НайденноеСоответствиеНоменклатуры.GTIN);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОставитьТолькоПоднадзорныеТоварыВТабличнойЧасти(ТабличнаяЧасть, фТолькоПроизводимыеНами = Ложь) Экспорт
	
	Запрос 				= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивНоменклатуры",ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"));
	СформироватьВТПоднадзорныхТоваров(Запрос,,,ПартнерМеркурий());
	Запрос.Текст		= "ВЫБРАТЬ Номенклатура ИЗ ВТ_ПоднадзорныйТовар ГДЕ Номенклатура В(&МассивНоменклатуры)"+?(фТолькоПроизводимыеНами," И ПроизводимТовар",""); // +MegaBrain - доп. условие
	МассивПоднадзорных	= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	И1					= 0;
	Пока И1<ТабличнаяЧасть.Количество() Цикл
		Если ТабличнаяЧасть[И1].GUID = НулевойGUID Тогда //явно было указано что товар следует исключить - оставим эту возможность - может пригодиться в ПМ
			ТабличнаяЧасть.Удалить(И1);
		ИначеЕсли ЗначениеЗаполнено(ТабличнаяЧасть[И1].Номенклатура) и МассивПоднадзорных.Найти(ТабличнаяЧасть[И1].Номенклатура)=Неопределено Тогда // Не поднадзорный - удалим
			ТабличнаяЧасть.Удалить(И1);
		Иначе // Поднадзорный - оставим
			И1			= И1+1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертироватьСырьеТранзакцииПроизводства(Сообщение, НеВыбиратьИсходныеПартии,ПересчитыватьКоличество, ТаблицаСоответствий,ТаблицаСоответствийЕдиницИзмерения,ТаблицаСоответствийЕдиницИзмеренияУпаковок,ТаблицаСоответствийproductItem,ТранзакцияВРазрезеСвоегоСправочника,ТипСообщения)
	
	Для Каждого СтрокаТоваров Из Сообщение.Сырье Цикл
		
		////////////////////////////////////////////////////////////
		// Проверка соответствий 4 уровня и конвертация
		Если ТранзакцияВРазрезеСвоегоСправочника = Истина Тогда
			НайденныйproductItem = Неопределено;
			Если ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры) Тогда
				НайденныеПоХарактеристикеproductItem = ТаблицаСоответствийproductItem.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",СтрокаТоваров.Номенклатура,СтрокаТоваров.ХарактеристикаНоменклатуры));
				Если НайденныеПоХарактеристикеproductItem.Количество()>0 Тогда
					НайденныйproductItem = НайденныеПоХарактеристикеproductItem[0];
				Иначе
					//тогда ищем без характеристики т.е. установлена характеристика неопределено
					НайденныеПоХарактеристикеproductItem = ТаблицаСоответствийproductItem.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",СтрокаТоваров.Номенклатура,Неопределено));
					Если НайденныеПоХарактеристикеproductItem.Количество()>0 Тогда
						НайденныйproductItem = НайденныеПоХарактеристикеproductItem[0];
					КонецЕсли;
				КонецЕсли;
			Иначе
				НайденныйproductItem = ТаблицаСоответствийproductItem.Найти(СтрокаТоваров.Номенклатура,"Номенклатура");
			КонецЕсли;
			
			Если НайденныйproductItem <> Неопределено И ЗначениеЗаполнено(НайденныйproductItem.productItemUUID) Тогда
				СтрокаТоваров.productItemUUID = НайденныйproductItem.productItemUUID;
			КонецЕсли;
		КонецЕсли;
		
		////////////////////////////////////////////////////////////
		// Поиск соответствий 3 уровня
		НайденноеСоответствиеНоменклатуры = ПодобратьСоответствиеНоменклатуры(СтрокаТоваров, ТаблицаСоответствий);
		
		Если НайденноеСоответствиеНоменклатуры <> Неопределено И СокрЛП(НайденноеСоответствиеНоменклатуры.КодТовараСторонний)<>"" Тогда
			СтрокаТоваров.GUID = НайденноеСоответствиеНоменклатуры.КодТовараСторонний;
			Если ЗначениеЗаполнено(НайденноеСоответствиеНоменклатуры.КоэффициентEDIВ1С) Тогда
				Если ПересчитыватьКоличество = истина Тогда 
					СтрокаТоваров.Количество = СтрокаТоваров.КоличествоВДокументе*НайденноеСоответствиеНоменклатуры.КоэффициентEDIВ1С;
				КонецЕсли;
			Иначе
				СтрокаТоваров.Количество = СтрокаТоваров.КоличествоВДокументе;
			КонецЕсли;
			
			СтрокаТоваров.Скоропортящаяся = НайденноеСоответствиеНоменклатуры.Скоропортящаяся;
			Если СокрЛП(НайденноеСоответствиеНоменклатуры.ЕдиницаИзмеренияGUID) <> "" Тогда 
				НайденнаяЕИМерк = ПолучитьКлассификаторЕдиницИзмеренияМеркурий().Найти(СокрЛП(НайденноеСоответствиеНоменклатуры.ЕдиницаИзмеренияGUID),"GUID");
				Если НайденнаяЕИМерк<>Неопределено Тогда 
					СтрокаТоваров.unitUUID = НайденнаяЕИМерк.UUID;
					СтрокаТоваров.unitGUID = НайденнаяЕИМерк.GUID;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) тогда
			СтрокаТоваров.Количество = СтрокаТоваров.КоличествоВДокументе; //не нашли соответствие, но есть номенклатура, а значит мы берем из документа количество
		Иначе
			//количество остается то которое было указано (скорее всего его указали ручками)
		КонецЕсли;
		////////////////////////////////////////////////////////////
		// Конвертация ЕдиницИзмерения только если мы уже не сконвертировали их через соответствия
		Если Не ЗначениеЗаполнено(СтрокаТоваров.unitUUID) Тогда 
			НайденноеСоответствиеЕдиницыИзмерения = ТаблицаСоответствийЕдиницИзмерения.Найти(СтрокаТоваров.ЕдиницаИзмеренияПоКлассификатору,"Соответствие");
			Если НайденноеСоответствиеЕдиницыИзмерения <> Неопределено Тогда
				СтрокаТоваров.unitUUID = НайденноеСоответствиеЕдиницыИзмерения.UUID;
			КонецЕсли;
		КонецЕсли;
		
		////////////////////////////////////////////////////////////
		// Конвертация Упаковок
		Если ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмеренияУпаковок) И ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмеренияУпаковок) Тогда
			НайденноеСоответствиеЕдиницыИзмеренияУпаковок = ТаблицаСоответствийЕдиницИзмеренияУпаковок.Найти(СтрокаТоваров.ЕдиницаИзмеренияУпаковок,"Соответствие");
			Если НайденноеСоответствиеЕдиницыИзмеренияУпаковок <> Неопределено Тогда
				СтрокаТоваров.ЕдиницаИзмеренияУпаковокUUID = НайденноеСоответствиеЕдиницыИзмеренияУпаковок.UUID;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОставитьТолькоПоднадзорныеТоварыВТабличнойЧасти(Сообщение.Сырье);
	
КонецПроцедуры

Функция АвтоподборПоСообщениюВключен(Сообщение)

	ТипСообщения = Сообщение.ТипСообщения;
	
	АвтоподборПоСообщениюВключен = Ложь;
	Если ТипСообщения = "M_DES" И ПолучитьКонстантуEDI("М_ПодбиратьЗаписьСкладскогоЖурналаАвтом_M_DES") = Истина Тогда
		АвтоподборПоСообщениюВключен = Истина;
	ИначеЕсли ТипСообщения = "M_MOV" И ПолучитьКонстантуEDI("М_ПодбиратьЗаписьСкладскогоЖурналаАвтом_M_MOV")= Истина Тогда
		АвтоподборПоСообщениюВключен = Истина;
	ИначеЕсли ТипСообщения = "M_PRD" И ПолучитьКонстантуEDI("М_ПодбиратьЗаписьСкладскогоЖурналаАвтом_M_PRD")= Истина Тогда
		АвтоподборПоСообщениюВключен = Истина;
	КонецЕсли;

	Возврат АвтоподборПоСообщениюВключен;
	
КонецФункции // ()


Процедура ВыбратьИсходныеПартииТранзакцииМеркурий(Сообщение)
	
	Если АвтоподборПоСообщениюВключен(Сообщение) = Ложь Тогда 
		Возврат;
	КонецЕсли;
	
	ТипСообщения = Сообщение.ТипСообщения;
	
	//проверка что все исходные партии заполнены и выбирать ничего не надо.
	Если ТипСообщения = "M_MOV"	ИЛИ ТипСообщения = "M_DES" Тогда
		Если Сообщение.Товары.НайтиСтроки(Новый Структура("ИсходнаяПартияGUID","")).Количество()=0
			И Сообщение.Товары.НайтиСтроки(Новый Структура("ИсходнаяПартияGUID",Неопределено)).Количество()=0
			Тогда
			Возврат
		КонецЕсли;
	ИначеЕсли ТипСообщения = "M_PRD" Тогда
		Если Сообщение.Сырье.НайтиСтроки(Новый Структура("ИсходнаяПартияGUID","")).Количество()=0 
			И Сообщение.Сырье.НайтиСтроки(Новый Структура("ИсходнаяПартияGUID",Неопределено)).Количество()=0 
			Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	//спросим журнал что у него есть
	ТаблицаОстатков = ПолучитьЗаписиСкладскогоЖурнала(Сообщение.ПлощадкаEDI.GUID,,Сообщение.ХозяйствующийСубъектEDI.GUID);
	
	Если ТаблицаОстатков.Колонки.Найти("КоличествоИспользовано") = Неопределено Тогда
		ТаблицаОстатков.Колонки.Добавить("КоличествоИспользовано",Новый ОписаниеТипов("Число",
										Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)),"Уже выбрано");
	КонецЕсли;
														  
	ТаблицаОстатков.Сортировать("ГоденДо Возр, НомерЗаписи Возр");
	
	//Товары транзакций 
	Если ТипСообщения = "M_MOV" 
		ИЛИ ТипСообщения = "M_DES" Тогда
		
		Для Каждого СтрокаТоваров Из Сообщение.Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТоваров.ИсходнаяПартияGUID) Тогда
				
				ВыбраннаяПартия = ПолучитьИсходнуюПартию(Сообщение,СтрокаТоваров,ТаблицаОстатков,Сообщение.ХозяйствующийСубъектEDI.GUID);
				Если ВыбраннаяПартия<>Неопределено Тогда
					ЗаполнитьИдентификаторыВыбраннойПартии(СтрокаТоваров,ВыбраннаяПартия);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипСообщения = "M_PRD" Тогда
		
		Для Каждого СтрокаСырья Из Сообщение.Сырье Цикл
			Если Не ЗначениеЗаполнено(СтрокаСырья.ИсходнаяПартияGUID) Тогда
				
				ВыбраннаяПартия = ПолучитьИсходнуюПартию(Сообщение,СтрокаСырья,ТаблицаОстатков,Сообщение.ХозяйствующийСубъектEDI.GUID);
				Если ВыбраннаяПартия<>Неопределено Тогда
					ЗаполнитьИдентификаторыВыбраннойПартии(СтрокаСырья,ВыбраннаяПартия);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПакетныйРежим = Истина Тогда //после выбора партий - перекэшируем таблицу остатков в случае массовой обработки
		GUIDПлощадкиБезДефисов = СтрЗаменить(Сообщение.ПлощадкаEDI.GUID,"-","");
		GUIDХСБезДефисов = СтрЗаменить(Сообщение.ХозяйствующийСубъектEDI.GUID,"-","");
		ОсновнойМодуль.ЭДО_Кэш_Поместить("Меркурий_СкладскойЖурнал"+GUIDПлощадкиБезДефисов+"_"+GUIDХСБезДефисов,ТаблицаОстатков);
	КонецЕсли;

	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыВыбраннойПартии(СтрокаИсходнойПродукции,ВыбраннаяПартия) Экспорт
	
	//это минимальный достаточный набор для идентификации исходной партии по правилам Меркурия (кроме номера записи конечно, но по нему удобно сверять пользователю с вебом)
	
	СтрокаИсходнойПродукции.Скоропортящаяся 				= ВыбраннаяПартия.Скоропортящаяся;	
	СтрокаИсходнойПродукции.ИсходнаяПартияGUID 				= ВыбраннаяПартия.GUID_Партии;	
	СтрокаИсходнойПродукции.ИсходнаяПартияНомер 			= ВыбраннаяПартия.НомерЗаписи;
	
	Если ВыбраннаяПартия.ОстатокУпаковок > 0 Тогда
		СтрокаИсходнойПродукции.ЕдиницаИзмеренияУпаковокUUID = ВыбраннаяПартия.ЕдиницаИзмеренияУпаковокUUID;
	Иначе
		СтрокаИсходнойПродукции.ЕдиницаИзмеренияУпаковокUUID = "";
		СтрокаИсходнойПродукции.КоличествоУпаковок 	= 0;	
	КонецЕсли;
	
	СтрокаИсходнойПродукции.unitUUID = ВыбраннаяПартия.unitUUID;
	
	СтрокаИсходнойПродукции.Наименование 		= ВыбраннаяПартия.Наименование;	
	СтрокаИсходнойПродукции.GUID 				= ВыбраннаяПартия.subProductGuid;	
	СтрокаИсходнойПродукции.ДатаПроизводства 	= ВыбраннаяПартия.ДатаВыпуска;	
	СтрокаИсходнойПродукции.ДатаПроизводства2	= ВыбраннаяПартия.ДатаВыпуска2;
	СтрокаИсходнойПродукции.СрокГодности 		= ВыбраннаяПартия.ГоденДо;
	СтрокаИсходнойПродукции.СрокГодности2 		= ВыбраннаяПартия.ГоденДо2;
	
	СтрокаИсходнойПродукции.СтранаUUID 			= ВыбраннаяПартия.СтранаUUID;
	СтрокаИсходнойПродукции.Страна 				= Неопределено;	
	Если ЗначениеЗаполнено(ВыбраннаяПартия.СтранаUUID) Тогда
		СтрокаИсходнойПродукции.Страна = ПреобразоватьСтрану_Меркурий_в_1С(ВыбраннаяПартия.СтранаUUID);
	КонецЕсли;
		
	СтрокаИсходнойПродукции.ПлощадкаПроизводительGUID = ВыбраннаяПартия.ProducerGUID;
	СтрокаИсходнойПродукции.ПлощадкаПроизводитель 	   = Неопределено;		
	Если ЗначениеЗаполнено(ВыбраннаяПартия.ProducerGUID) Тогда
		СтрокаИсходнойПродукции.ПлощадкаПроизводитель = КонвертироватьЗначениеМеркурийв1C(ВыбраннаяПартия.ProducerGUID,,"МеркурийПлощадка");
	КонецЕсли;
	                                                               
	//отметим в нашей таблице остатков что из партии достали часть
	//при этом если процедура вызвана из формы то эта колонка - ключевая а если из автоматического подбора партии - то справочная (т.к. механизм учитывает на колонке остаток то что уже распределил)
	ВыбраннаяПартия.КоличествоИспользовано = ВыбраннаяПартия.КоличествоИспользовано + СтрокаИсходнойПродукции.Количество;
	
КонецПроцедуры


Функция ПолучитьИсходнуюПартию(Сообщение,СтрокаТоваров,ТаблицаОстатков,ВладелецGUID)
	
	//сообщение пробрасывается т.к. от него зависят настройки автоподбора
	Возврат ПодобратьПартиюФИФО(Сообщение,ВладелецGUID,СтрокаТоваров.Количество,СтрокаТоваров.unitUUID,СтрокаТоваров.GUID,ТаблицаОстатков,СтрокаТоваров.ДатаПроизводства,СтрокаТоваров.СрокГодности,СтрокаТоваров.Номенклатура,СтрокаТоваров.ДатаПроизводства2,СтрокаТоваров.СрокГодности2,СтрокаТоваров.Скоропортящаяся);
	
КонецФункции // ПолучитьИсходнуюПартию()

Функция ФильтроватьТаблицуОстатков(ВладелецGUID,Количество,unitUUID,GUID,ТаблицаОстатков,ДатаПроизводства,СрокГодности,Номенклатура,ДатаПроизводства2=Неопределено,СрокГодности2=Неопределено,Скоропортящаяся=неопределено) Экспорт
	
	МассивУдаляемыхСтрок = Новый Массив;
	ОтфильтрованнаяТаблица = ТаблицаОстатков.Скопировать();
	
	Для Каждого СтрокаОстатков из ОтфильтрованнаяТаблица Цикл
		
		//берем только те записи, где совпадение по заполненному! guid	и заполненному unitUUID  и  если явно указана дата производства и срок годности то и их соблюдаем
		Если Истина Тогда // ВладелецGUID если не заполнен - то точно не следует разрешать выбор (для единообразия пока оставим так)
			Если ВладелецGUID <> СтрокаОстатков.ВладелецGUID Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Скоропортящаяся <> Неопределено Тогда
			Если Скоропортящаяся <> СтрокаОстатков.Скоропортящаяся Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(GUID) Тогда
			Если GUID <> СтрокаОстатков.subProductGuid Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(unitUUID) Тогда
			Если unitUUID <> СтрокаОстатков.unitUUID Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаПроизводства) Тогда
			Если Не ДатаТовараПоДокументуУдовлетворяетДатеПартииМеркурий(ДатаПроизводства,ДатаПроизводства2,СтрокаОстатков.ДатаВыпуска,СтрокаОстатков.ДатаВыпуска2,Скоропортящаяся) Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СрокГодности) Тогда
			Если Не ДатаТовараПоДокументуУдовлетворяетДатеПартииМеркурий(СрокГодности,СрокГодности2,СтрокаОстатков.ГоденДо,СтрокаОстатков.ГоденДо2,Скоропортящаяся) Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			Если ЗначениеЗаполнено(СтрокаОстатков.Номенклатура)
				И СтрокаОстатков.Номенклатура <> Номенклатура Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//А еще маркировка, также если она явно указана
		
		Если Количество > СтрокаОстатков.Остаток Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
		КонецЕсли
	КонецЦикла;
	
	КоличествоУдаляемых = МассивУдаляемыхСтрок.Количество();
	
	Для й = 1 По КоличествоУдаляемых Цикл
		ОтфильтрованнаяТаблица.Удалить(МассивУдаляемыхСтрок[КоличествоУдаляемых-й]);
	КонецЦикла;
	
	Возврат ОтфильтрованнаяТаблица;
	
КонецФункции

Функция ПоСообщениюТребуетсяОднозначныйАвтоподборПартии(Сообщение)
	
	ТипСообщения = Сообщение.ТипСообщения;
	
	ТолькоОднозначноИдентифицированные = Ложь;
	
	Если ТипСообщения = "M_DES" И ПолучитьКонстантуEDI("М_ПодбиратьЗапСЖ_ТолькоНайденаОдна_M_DES") = Истина Тогда
		ТолькоОднозначноИдентифицированные = Истина;
	ИначеЕсли ТипСообщения = "M_MOV" И ПолучитьКонстантуEDI("М_ПодбиратьЗапСЖ_ТолькоНайденаОдна_M_MOV")= Истина Тогда
		ТолькоОднозначноИдентифицированные = Истина;
	ИначеЕсли ТипСообщения = "M_PRD" И ПолучитьКонстантуEDI("М_ПодбиратьЗапСЖ_ТолькоНайденаОдна_M_PRD")= Истина Тогда
		ТолькоОднозначноИдентифицированные = Истина;
	КонецЕсли;

	Возврат ТолькоОднозначноИдентифицированные;
	
КонецФункции
	
Функция ПодобратьПартиюФИФО(Сообщение,ВладелецGUID,Количество,unitUUID,GUID,ТаблицаОстатков,ДатаПроизводства,СрокГодности,Номенклатура,ДатаПроизводства2=Неопределено,СрокГодности2=Неопределено,Скоропортящаяся=Неопределено)
	
	ОтфильтрованнаяТаблица =  ФильтроватьТаблицуОстатков(ВладелецGUID,Количество,unitUUID,GUID,ТаблицаОстатков,ДатаПроизводства,СрокГодности,Номенклатура,ДатаПроизводства2,СрокГодности2,Скоропортящаяся);
	
	Если ПоСообщениюТребуетсяОднозначныйАвтоподборПартии(Сообщение) = Истина И ОтфильтрованнаяТаблица.Количество()>1 Тогда 
		ОсновнойМодуль.Сообщить_КонтурEDI("Не смог однозначно идентифицировать исходную партию, пропустил заполнение: "+Номенклатура+" - "+Количество);
		Возврат Неопределено;
	КонецЕсли;
	
	//В первую очередь пробуем подобрать партию с ТОЧНЫМ совпадением количества. но делаем так только если нам явно передана дата производства и/или срок годности
	Если ЗначениеЗаполнено(ДатаПроизводства)
		ИЛИ ЗначениеЗаполнено(СрокГодности) Тогда
		Для Каждого СтрокаОстатков из ОтфильтрованнаяТаблица Цикл
			
			Если Количество = СтрокаОстатков.Остаток И СтрокаОстатков.КоличествоИспользовано=0 Тогда
				СтрокаОстатковКУменьшению = ТаблицаОстатков.Найти(СтрокаОстатков.GUID_Партии,"GUID_Партии");
				Если СтрокаОстатковКУменьшению <> Неопределено Тогда
					//СтрокаОстатковКУменьшению.Остаток = СтрокаОстатковКУменьшению.Остаток - Количество;
					СтрокаОстатковКУменьшению.КоличествоИспользовано = Количество;
				КонецЕсли;
				Возврат СтрокаОстатков;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Во вторую очередь партия, где хватает количества и где совпадают sub product GUID и unitUUID
	Для Каждого СтрокаОстатков из ОтфильтрованнаяТаблица Цикл
		
		Если Количество > СтрокаОстатков.Остаток-СтрокаОстатков.КоличествоИспользовано Тогда
			Продолжить;
		Иначе
			СтрокаОстатковКУменьшению = ТаблицаОстатков.Найти(СтрокаОстатков.GUID_Партии,"GUID_Партии");
			Если СтрокаОстатковКУменьшению <> Неопределено Тогда
				//СтрокаОстатковКУменьшению.Остаток = СтрокаОстатковКУменьшению.Остаток - Количество;
				СтрокаОстатковКУменьшению.КоличествоИспользовано = СтрокаОстатковКУменьшению.КоличествоИспользовано+Количество;
			КонецЕсли;
			Возврат СтрокаОстатков;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПодобратьПартиюФИФО()

Функция ДатаТовараПоДокументуУдовлетворяетДатеПартииМеркурий(ЗНАЧ ДатаДок1, ЗНАЧ ДатаДок2, ЗНАЧ ДатаМерк1, ЗНАЧ ДатаМерк2, ЗНАЧ Скоропортящаяся = Неопределено) Экспорт
	
	//на случай если забыли формализовать при заполнении
	ДатаДок1 = НачалоЧаса(ДатаДок1);
	ДатаДок2 = НачалоЧаса(ДатаДок2);
	Если Скоропортящаяся = Ложь Тогда 
		ДатаДок1 = НачалоДня(ДатаДок1);
		ДатаДок2 = НачалоДня(ДатаДок2);
	КонецЕсли;
	
	//чуток фантастики
	Если Не ЗначениеЗаполнено(ДатаМерк1) Тогда 
		ДатаМерк1 = Дата(1,1,1);
	КонецЕсли;
	
	//если не указана базовая дата 1 (ДатаДок1) и не заполнена ДатаДок2 то партия ПОДХОДИТ всегда
	Если (Не ЗначениеЗаполнено(ДатаДок1)) И (Не ЗначениеЗаполнено(ДатаДок2)) Тогда 
		Возврат Истина;
	КонецЕсли;
	//если в меркурии партия была представлена как строковое описание то партия подходит
	Если (Не ЗначениеЗаполнено(ДатаМерк1)) И (Не ЗначениеЗаполнено(ДатаМерк2)) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	//предварительные проверки
	Если Не ЗначениеЗаполнено(ДатаДок2) Тогда 
		ДатаДок2 = ДатаДок1;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаДок1) Тогда 
		ДатаДок1 = ДатаДок2;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаМерк2) Тогда 
		ДатаМерк2 = ДатаМерк1;
	КонецЕсли;
	
	//---------------------------------Собственно проверка---------------------------------
	//Суть проверки сейчас лежит на 2х запретах:
	//
	//нельзя чтобы ДатаДок1 была меньше чем ДатаМерк1
	//И нельзя чтобы ДатаДок2 была больше ДатаМерк2
	
	Если ДатаДок1 < ДатаМерк1 Тогда
		
	   Возврат Ложь;

	ИначеЕсли ДатаДок2 > ДатаМерк2 Тогда
		   
	   Возврат Ложь;

   КонецЕсли;
   
   Возврат Истина;
	
КонецФункции // ДатаТовараПоДокументуУдовлетворяетДатеПартииМеркурий()

Функция ПолучитьТаблицуСоответствийЕдиницИзмеренияМеркурий()

//ТаблицаСоответствийЕдиницИзмерения = ПолучитьСписокСвойствEDI("GUIDКодЕдиницыИзмеренияМеркурий",Неопределено);
	
	Возврат ПолучитьСоответствияВсехЕдиницИзмеренияМеркурий();	

КонецФункции

Функция КонвертироватьЗначение1СвМеркурий(Значение, Тип1С =  Неопределено, ТипМеркурий, Сообщение =  Неопределено) Экспорт
	
	СтандартнаяОбработкаEDI = Истина;
	
	РезультатКонвертации = ОбработкаСобытияПодключаемогоМодуля("КонвертироватьЗначение1СвМеркурий",СтандартнаяОбработкаEDI,
	Новый Структура("Значение1С, ТипПоля1C, ТипМеркурий, Сообщение",
	Значение, Тип1С, ТипМеркурий, Сообщение));
	
	Если Не СтандартнаяОбработкаEDI Тогда
		
		Возврат РезультатКонвертации;
		
	КонецЕсли;
	
	Если ТипМеркурий = "МеркурийХС" Тогда
		
		Возврат ПреобразоватьЮрФизЛицоПлощадку_1С_в_Меркурий(Значение,ТипМеркурий);
		
	ИначеЕсли ТипМеркурий = "МеркурийПлощадка" Тогда
		
		Возврат ПреобразоватьЮрФизЛицоПлощадку_1С_в_Меркурий(Значение,ТипМеркурий);
		
	ИначеЕсли ТипМеркурий = "МеркурийЦель" Тогда
		
		Возврат ПреобразоватьЦель_1С_в_Меркурий(Значение,ТипМеркурий);
		
	ИначеЕсли ТипМеркурий = "МеркурийСтрана" Тогда
		
		Возврат ПреобразоватьСтрану_1С_в_Меркурий(Значение,ТипМеркурий);
		
	КонецЕсли;
	
	
КонецФункции

Функция ПреобразоватьЦель_1С_в_Меркурий(Значение,ТипМеркурий)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		Классификатор = ПолучитьКлассификаторЦелейМеркурий();
		НайденноеЗначение = Классификатор.Найти(Значение,"Наименование");
		Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
			Возврат НайденноеЗначение.GUID;
		Иначе
			Возврат "";
		Конецесли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПреобразоватьЮрФизЛицо_1С_в_Меркурий()

Функция ПреобразоватьСтрану_1С_в_Меркурий(Значение,ТипМеркурий)
	//двухуровневый - сначала в EDI а потом по коду в Меркурий
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		СтранаEDI = ОсновнойМодуль.КонвертироватьЗначение1СвEDI(Значение,"Страна","КодСтраны",Неопределено);
		Если НЕ ЗначениеЗаполнено(СтранаEDI) Тогда
			Возврат "";
		КонецЕсли;
			
		Классификатор = ПолучитьКлассификаторСтранМеркурий();
		НайденноеЗначение = Классификатор.Найти(СтранаEDI,"Код");
		Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
			Возврат НайденноеЗначение.UUID;
		Иначе
			Возврат "";
		Конецесли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПреобразоватьЮрФизЛицо_1С_в_Меркурий()

Функция ПреобразоватьЮрФизЛицоПлощадку_1С_в_Меркурий(Значение,ТипМеркурий)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
	               |ПОМЕСТИТЬ ВТ_ОбъектМеркурий
	               |ИЗ
	               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""Объект""
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = &Значение
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ТипМеркурий
	               |	И НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение КАК GUID
	               |ИЗ
	               |	ВТ_ОбъектМеркурий КАК ВТ_ОбъектМеркурий
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	               |		ПО ВТ_ОбъектМеркурий.Ссылка = КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""GUID""
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ТипМеркурий";
	
	Запрос.УстановитьПараметр("Значение",Значение);
	Запрос.УстановитьПараметр("ТипМеркурий",ТипМеркурий);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.GUID;
	Иначе
		Возврат Неопределено;
	КонецЕсли

КонецФункции // ПреобразоватьЮрФизЛицо_1С_в_Меркурий()

Функция СоответствиеТоваровПолучитьСоответствияСпискаНоменклатуры(ТаблицаСсылок) Экспорт
	
	//Таблица ссылок - ТЗ с колонкой Ссылка
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	Парам.Ссылка КАК Ссылка
	               	|ПОМЕСТИТЬ ВТСсылкиНоменклатуры
	               	|ИЗ
	               	|	&парам КАК Парам
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	СсылкиНоменклатуры.Ссылка,
	               	|	МАКСИМУМ(ЕСТЬNULL(КонтурEDI_СоответствияТоваров.КодТовараПартнера, """")) КАК GUID,
	               	|	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.НаименованиеПартнера, """") КАК НаименованиеМеркурий,
	               	|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентУмножения,
	               	|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры,
	               	|	КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
	               	|	КонтурEDI_СоответствияТоваров.МеркурийСкоропортящаяся КАК Скоропортящаяся,
	               	|	ВЫРАЗИТЬ(КонтурEDI_СоответствияТоваров.Номенклатура КАК Справочник.Номенклатура).Код КАК Код,
	               	|	ВЫРАЗИТЬ(КонтурEDI_СоответствияТоваров.Номенклатура КАК Справочник.Номенклатура).Артикул КАК Артикул,
	               	|	КонтурEDI_СоответствияТоваров.МеркурийЕдиницаGUID КАК ЕдиницаИзмеренияGUID,
	               	|	КонтурEDI_СоответствияТоваров.ПроизводимТовар,
	               	|	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.GTIN, """") КАК GTIN
	               	|ИЗ
	               	|	ВТСсылкиНоменклатуры КАК СсылкиНоменклатуры
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	               	|		ПО СсылкиНоменклатуры.Ссылка = КонтурEDI_СоответствияТоваров.Номенклатура
	               	|			И (КонтурEDI_СоответствияТоваров.Партнер = &ПартнерМеркурий)
	               	|			И (КонтурEDI_СоответствияТоваров.КодТовараПартнера <> """")
	               	|
	               	|СГРУППИРОВАТЬ ПО
	               	|	СсылкиНоменклатуры.Ссылка,
	               	|	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.НаименованиеПартнера, """"),
	               	|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С,
	               	|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры,
	               	|	КонтурEDI_СоответствияТоваров.Единица,
	               	|	КонтурEDI_СоответствияТоваров.МеркурийСкоропортящаяся,
	               	|	ВЫРАЗИТЬ(КонтурEDI_СоответствияТоваров.Номенклатура КАК Справочник.Номенклатура).Код,
	               	|	ВЫРАЗИТЬ(КонтурEDI_СоответствияТоваров.Номенклатура КАК Справочник.Номенклатура).Артикул,
	               	|	КонтурEDI_СоответствияТоваров.МеркурийЕдиницаGUID,
	               	|	КонтурEDI_СоответствияТоваров.ПроизводимТовар,
	               	|	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.GTIN, """")";
	
	Запрос.УстановитьПараметр("парам", ТаблицаСсылок);
	Запрос.УстановитьПараметр("ПартнерМеркурий", ПартнерМеркурий());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник.Номенклатура",Метаданные.НайтиПоТипу(ТаблицаСсылок.Колонки.Ссылка.ТипЗначения.Типы()[0]).ПолноеИмя());
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеТоваровМеркурий_СохранитьНаборСоответствийПоНоменклатуре(Номенклатура,ТаблицаСоответствий) Экспорт
	// Дублирование с ПрисвоитьСоответствиеНоменклатуры
	
	Владелец = ПартнерМеркурий();

	ОчиститьСоответствиеНоменклатуры(Номенклатура,,,Владелец);
	МенеджерЗаписиСоответствийТоваров = РегистрыСведений.КонтурEDI_СоответствияТоваров.СоздатьМенеджерЗаписи();
	
	Если ТаблицаСоответствий.Количество() > 0 Тогда 
		//Запишем обновленные соответствия
		Для Каждого Стр ИЗ ТаблицаСоответствий Цикл
			
			Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
				Характеристика = Стр.ХарактеристикаНоменклатуры;
			Иначе	
				Характеристика = Неопределено;
			КонецЕсли;
			
			МенеджерЗаписиСоответствийТоваров.Партнер						= Владелец;
			МенеджерЗаписиСоответствийТоваров.Номенклатура					= Номенклатура;
			МенеджерЗаписиСоответствийТоваров.Единица						= Стр.ЕдиницаИзмерения;
			МенеджерЗаписиСоответствийТоваров.ХарактеристикаНоменклатуры	= Характеристика;
			МенеджерЗаписиСоответствийТоваров.Прочитать();
			
			МенеджерЗаписиСоответствийТоваров.Партнер						= Владелец;
			МенеджерЗаписиСоответствийТоваров.Номенклатура					= Номенклатура;
			МенеджерЗаписиСоответствийТоваров.ХарактеристикаНоменклатуры	= Характеристика;
			МенеджерЗаписиСоответствийТоваров.КодТовараПартнера				= СокрЛП(Стр.GUID);
			МенеджерЗаписиСоответствийТоваров.GTIN							= Стр.GTIN;
			МенеджерЗаписиСоответствийТоваров.НаименованиеПартнера			= СокрЛП(Стр.НаименованиеМеркурий);
			МенеджерЗаписиСоответствийТоваров.Единица						= Стр.ЕдиницаИзмерения;
			МенеджерЗаписиСоответствийТоваров.КоэффициентEDIВ1С				= Стр.КоэффициентУмножения;
			МенеджерЗаписиСоответствийТоваров.МеркурийСкоропортящаяся       = Стр.Скоропортящаяся;
			МенеджерЗаписиСоответствийТоваров.ПроизводимТовар       		= Стр.ПроизводимТовар;
			МенеджерЗаписиСоответствийТоваров.МеркурийЕдиницаGUID      		= Стр.ЕдиницаGUID;
			
			МенеджерЗаписиСоответствийТоваров.Записать();
			
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // ()

Функция КаталогТоваровМеркурий_СохранитьСоответствиеПоНоменклатуре(Номенклатура,ХарактеристикаНоменклатуры,ПлощадкаGUID,МеркурийproductItemGUID,МеркурийproductItemUUID) Экспорт
	
	Если Не ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда 
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
	МенеджерЗаписиСоответствийКаталог = РегистрыСведений.КонтурМеркурий_КаталогПродукции.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписиСоответствийКаталог.ПлощадкаGUID						= ПлощадкаGUID;
	МенеджерЗаписиСоответствийКаталог.Номенклатура					= Номенклатура;
	
	
	МенеджерЗаписиСоответствийКаталог.ХарактеристикаНоменклатуры	= ХарактеристикаНоменклатуры;
	МенеджерЗаписиСоответствийКаталог.Прочитать();
	
	Если Не МенеджерЗаписиСоответствийКаталог.Выбран() Тогда
		МенеджерЗаписиСоответствийКаталог.ПлощадкаGUID						= ПлощадкаGUID;
		МенеджерЗаписиСоответствийКаталог.Номенклатура					= Номенклатура;
		МенеджерЗаписиСоответствийКаталог.ХарактеристикаНоменклатуры	= ХарактеристикаНоменклатуры;
	КонецЕсли;	
		МенеджерЗаписиСоответствийКаталог.МеркурийproductItemGUID	= МеркурийproductItemGUID;
		МенеджерЗаписиСоответствийКаталог.МеркурийproductItemUUID	= МеркурийproductItemUUID;
	
	МенеджерЗаписиСоответствийКаталог.Записать();
	
КонецФункции // ()

Функция КаталогТоваровМеркурий_ОчиститьСоответствиеПоНоменклатуре(Номенклатура,ХарактеристикаНоменклатуры,ПлощадкаGUID) Экспорт
	                            
	Если Не ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда 
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
	МенеджерЗаписиСоответствийКаталог = РегистрыСведений.КонтурМеркурий_КаталогПродукции.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписиСоответствийКаталог.ПлощадкаGUID					= ПлощадкаGUID;
	МенеджерЗаписиСоответствийКаталог.Номенклатура					= Номенклатура;
	МенеджерЗаписиСоответствийКаталог.ХарактеристикаНоменклатуры	= ХарактеристикаНоменклатуры;
	МенеджерЗаписиСоответствийКаталог.Прочитать();
	МенеджерЗаписиСоответствийКаталог.Удалить();
	
КонецФункции // ()


//Конвертация в XDTO
Функция ВычислитьXDTO(ОбъектXDTO,Путь) Экспорт 
	
	Возврат ОсновнойМодуль.ВычислитьXDTO(ОбъектXDTO,Путь);

КонецФункции

Функция Записатьconsignor_XDTO(Сообщение, ВерсияAPI = Неопределено)
	Если ВерсияAPI = Неопределено Тогда 
		ВерсияAPI = "14";
	КонецЕсли;
	consignor = ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessMember", ВерсияAPI);
	consignor.businessEntity =  ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessEntity", ВерсияAPI);
	xmlЗаполнитьЗначениеXDTO(consignor.businessEntity,"GUID",Сообщение.ХозяйствующийСубъектEDI.GUID);
	consignor.enterprise = ПолучитьОбъектXDTOМеркурий("Цербер",  "Enterprise", ВерсияAPI);
	xmlЗаполнитьЗначениеXDTO(consignor.enterprise,"GUID",Сообщение.ПлощадкаEDI.GUID);
	
	Возврат consignor;
КонецФункции // Записатьconsignor_XDTO()

Функция Записатьconsignee_XDTO(Сообщение, ВерсияAPI = Неопределено)
	Если ВерсияAPI = Неопределено Тогда 
		ВерсияAPI = "14";
	КонецЕсли;
	consignee = ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessMember", ВерсияAPI);
	consignee.businessEntity =  ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessEntity", ВерсияAPI);
	xmlЗаполнитьЗначениеXDTO(consignee.businessEntity,"GUID",Сообщение.ХозяйствующийСубъектПолучательEDI.GUID);
	consignee.enterprise = ПолучитьОбъектXDTOМеркурий("Цербер",  "Enterprise", ВерсияAPI);
	xmlЗаполнитьЗначениеXDTO(consignee.enterprise,"GUID",Сообщение.ПлощадкаПолучательEDI.GUID);
	Возврат consignee;
	
КонецФункции // Записатьconsignee_XDTO()

Функция Записатьwaybill_XDTO(Сообщение, ВерсияAPI = Неопределено)
	
	Если ВерсияAPI = Неопределено Тогда 
		ВерсияAPI = "14";
	КонецЕсли;

	waybill = ПолучитьОбъектXDTOМеркурий("АргусПеревозки", "Waybill", ВерсияAPI);
	waybill.type = "1"; //заглушка всегда ТТН
	waybill.transportInfo = ПолучитьОбъектXDTOМеркурий("АргусПеревозки", "TransportInfo", ВерсияAPI);
	waybill.transportInfo.transportNumber = ПолучитьОбъектXDTOМеркурий("АргусПеревозки", "TransportNumber", ВерсияAPI);
	
	xmlЗаполнитьЗначениеXDTO(waybill.transportInfo.transportNumber,"vehicleNumber",Сообщение.Транспорт.НомерТранспортногоСредства);
	xmlЗаполнитьЗначениеXDTO(waybill.transportInfo.transportNumber,"wagonNumber",Сообщение.Транспорт.НомерВагона);
	xmlЗаполнитьЗначениеXDTO(waybill.transportInfo.transportNumber,"shipName",Сообщение.Транспорт.НомерКонтейнера); //или имя судна
	xmlЗаполнитьЗначениеXDTO(waybill.transportInfo.transportNumber,"trailerNumber",Сообщение.Транспорт.НомерПолуприцепа);
	xmlЗаполнитьЗначениеXDTO(waybill.transportInfo.transportNumber,"flightNumber",Сообщение.Транспорт.НомерАвиарейса);
	
	//waybill.transportInfo.transportType = Сообщение.Транспорт.ВидТранспорта;
	xmlЗаполнитьЗначениеXDTO(waybill.transportInfo,"transportType",Сообщение.Транспорт.ВидТранспорта);
	//waybill.transportStorageType = Сообщение.Транспорт.СпособХраненияПриПеревозке;
	xmlЗаполнитьЗначениеXDTO(waybill,"transportStorageType",Сообщение.Транспорт.СпособХраненияПриПеревозке);
	
	//Дата номер ТТН Кстати о Серии ТТН - при запросе списка ВСД - серии нет тоесть при гашении входящего взять её неоткуда
	xmlЗаполнитьЗначениеXDTO(waybill,"issueNumber",Сообщение.ДокументEDI.Номер);
	xmlЗаполнитьЗначениеXDTO(waybill,"issueDate",Сообщение.ДокументEDI.Дата);
	
	Если Сообщение.свойство("ПеревозчикEDI") И ЗначениеЗаполнено(Сообщение.ПеревозчикEDI.GUID) Тогда 
		broker =  ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessEntity", ВерсияAPI);
		xmlЗаполнитьЗначениеXDTO(broker,"GUID",Сообщение.ПеревозчикEDI.GUID);	
		waybill.broker = broker;
	КонецЕсли;
	
	Возврат waybill;
	
КонецФункции // Записатьwaybill_XDTO()

Функция ЗаписатьtransportInfo_20(Сообщение)
	
	ВерсияAPI = "20";
	
	transportInfo = ПолучитьОбъектXDTOМеркурий("АргусПеревозки", "TransportInfo", ВерсияAPI);
	transportInfo.transportNumber = ПолучитьОбъектXDTOМеркурий("АргусПеревозки", "TransportNumber", ВерсияAPI);
	
	xmlЗаполнитьЗначениеXDTO(transportInfo.transportNumber,"vehicleNumber",Сообщение.Транспорт.НомерТранспортногоСредства);
	xmlЗаполнитьЗначениеXDTO(transportInfo.transportNumber,"wagonNumber",Сообщение.Транспорт.НомерВагона);
	xmlЗаполнитьЗначениеXDTO(transportInfo.transportNumber,"shipName",Сообщение.Транспорт.НомерКонтейнера); //или имя судна
	xmlЗаполнитьЗначениеXDTO(transportInfo.transportNumber,"trailerNumber",Сообщение.Транспорт.НомерПолуприцепа);
	xmlЗаполнитьЗначениеXDTO(transportInfo.transportNumber,"flightNumber",Сообщение.Транспорт.НомерАвиарейса);
	
	//waybill.transportInfo.transportType = Сообщение.Транспорт.ВидТранспорта;
	xmlЗаполнитьЗначениеXDTO(transportInfo,"transportType",Сообщение.Транспорт.ВидТранспорта);
	//waybill.transportStorageType = Сообщение.Транспорт.СпособХраненияПриПеревозке;
	
	Возврат transportInfo;
	
КонецФункции

Функция ЗаписатьshipmentRoute_20(Сообщение)
	
	ВерсияAPI = "20";
	
	ShipmentRoute = ПолучитьОбъектXDTOМеркурий("ВетДокумент", 			"ShipmentRoute", ВерсияAPI);
	й=0;
	Для Каждого ТочкаМаршрута ИЗ Сообщение.Маршрут Цикл
		//последняя точка - это consignee - он есть в шапке, тут его указывать НЕ надо
		Если (й+1) = Сообщение.Маршрут.Количество() Тогда
			Прервать; 
		КонецЕсли;
			
		routePoint = ПолучитьОбъектXDTOМеркурий("ВетДокумент", 			"ShipmentRoutePoint", ВерсияAPI);
		//Если Сообщение.Маршрут.Количество()>2 Тогда 
			xmlЗаполнитьЗначениеXDTO(routePoint,"sqnId",ТочкаМаршрута.НомерСтроки);
		//КонецЕсли;
		enterprise = ПолучитьОбъектXDTOМеркурий("Справочник20",			"Enterprise", ВерсияAPI);
		xmlЗаполнитьЗначениеXDTO(enterprise,"guid",ТочкаМаршрута.ПлощадкаGUID);
		routePoint.enterprise = enterprise;
		
		xmlЗаполнитьЗначениеXDTO(routePoint,"transshipment",ТочкаМаршрута.Перегруз);
		
		Если ТочкаМаршрута.Перегруз И (й+1) < Сообщение.Маршрут.Количество() Тогда //данные следующей строки
			routePoint.nextTransport = ПолучитьОбъектXDTOМеркурий("ВетДокумент", 			"TransportInfo", ВерсияAPI);
			Если ЗначениеЗаполнено(Сообщение.Маршрут[й+1].НомерТранспортногоСредства) Тогда
				routePoint.nextTransport.transportNumber = ПолучитьОбъектXDTOМеркурий("ВетДокумент", 			"TransportNumber", ВерсияAPI);
				xmlЗаполнитьЗначениеXDTO(routePoint.nextTransport.transportNumber,"vehicleNumber",Сообщение.Маршрут[й+1].НомерТранспортногоСредства);  
			КонецЕсли;
			xmlЗаполнитьЗначениеXDTO(routePoint.nextTransport,"transportType",Сообщение.Маршрут[й+1].ВидТранспорта);
		КонецЕсли;
		
		shipmentRoute.routePoint.Добавить(routePoint);
	й=й+1;
	КонецЦикла;
	
	Возврат ShipmentRoute;
	
КонецФункции	

Функция ЗаписатьСообщениеМеркурийXDTO(ТипСообщения,Параметры) Экспорт
	//функция ожидает что в таб части товары будет столько строк, сколько вы хотите отправить в транзакции!
	//учтите что в транзакциях прихода возможно только 1 строка ()
	ВерсияAPI = "14";

	Сообщение = Параметры.Сообщение;
	
	Если ТипСообщения <> "M_PRD" Тогда
		delivery = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "Delivery");
		
		Consignment =  delivery.consignment;
		
		ЗаписатьТабЧастьМеркурий_Consignment_XDTO(Consignment,Сообщение.Товары,"Consignment",КорневаяФабрика,ТипСообщения);
		
		waybill = Записатьwaybill_XDTO(Сообщение);
		
		accompanyingForms =  ПолучитьОбъектXDTOМеркурий("ВетДокумент", "ConsignmentDocumentList");
		accompanyingForms.waybill = waybill;
	КонецЕсли;
	
	Если ТипСообщения = "M_DES" 
		ИЛИ ТипСообщения = "M_MOV" Тогда
		
		vetCertificate = ПолучитьШапкуВетДокумента(Сообщение,waybill, ВерсияAPI);
		
		Если ЗначениеЗаполнено(Сообщение.Перевозчик1С) Тогда 
			broker =  ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessEntity");
	        vetCertificate.broker = broker;
			xmlЗаполнитьЗначениеXDTO(vetCertificate.broker,"GUID",Сообщение.ПеревозчикEDI.GUID);
			
			broker =  ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessEntity");
			accompanyingForms.waybill.broker = broker;
			xmlЗаполнитьЗначениеXDTO(accompanyingForms.waybill.broker,"GUID",Сообщение.ПеревозчикEDI.GUID);
		КонецЕсли;
		
		accompanyingForms.vetCertificate.Добавить(vetCertificate);    //может оказаться несколько сертификатов
		
	ИначеЕсли ТипСообщения =  "M_REC"
		ИЛИ ТипСообщения =  "M_INC"
		 Тогда
		
		ТоварыСвернутыеПоНомерамВСД = Сообщение.Товары.Скопировать(,"ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата,ЦельEDI,ВетСертификатЭкспертиза,ВетСертификатРезультатыЭкспертизы,ВетСертификатОбследованоВетВрачом,ВетСертификатОсобыеОтметки");
		//ТоварыСвернутыеПоНомерамВСД = Сообщение.Товары.Скопировать();
		ТоварыСвернутыеПоНомерамВСД.Свернуть("ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата,ЦельEDI,ВетСертификатЭкспертиза,ВетСертификатРезультатыЭкспертизы,ВетСертификатОбследованоВетВрачом,ВетСертификатОсобыеОтметки");
		
		Для Каждого СтрокаВСДТоваров Из ТоварыСвернутыеПоНомерамВСД Цикл          
			//реальность кейса: нам на бумаге прислали свернутую ВСД: 1 на 5 позиций - у нас в приходе она развернута по товарам - деваться некуда, надо отражать как есть
			//а еще может часть продукции из нее оказаться испорченной - но тогда это бует отражаться в consignment
			vetCertificate = ПолучитьШапкуВетДокумента(Сообщение,waybill);
			Если СтрокаВСДТоваров.ВетСертификатЭкспертиза = "Да" 
				или СтрокаВСДТоваров.ВетСертификатЭкспертиза = "Истина"  
				или СтрокаВСДТоваров.ВетСертификатЭкспертиза = "VSEFULL"  
				или СтрокаВСДТоваров.ВетСертификатЭкспертиза = "VSERAW" Тогда 
				ЭкспертизаВетСертификатЭкспертиза14 = Истина;
			Иначе
				ЭкспертизаВетСертификатЭкспертиза14 = Ложь;
			КонецЕсли;
			vetCertificate.cargoExpertized = ЭкспертизаВетСертификатЭкспертиза14;
			vetCertificate.cargoInspected = СтрокаВСДТоваров.ВетСертификатОбследованоВетВрачом;
			
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"UUID",СтрокаВСДТоваров.ВетСертификатUUID);
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"specialMarks",СтрокаВСДТоваров.ВетСертификатОсобыеОтметки);
			xmlЗаполнитьЗначениеXDTO(vetCertificate.purpose,"guid",СтрокаВСДТоваров.ЦельEDI);
			
			//шапка
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"transportStorageType",waybill.transportStorageType); //копируем из 
			xmlЗаполнитьЗначениеXDTO(vetCertificate.purpose,"guid",СтрокаВСДТоваров.ЦельEDI);
			
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"issueSeries",СтрокаВСДТоваров.ВетСертификатСерия);
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"issueNumber",СтрокаВСДТоваров.ВетСертификатНомер);
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"issueDate",СтрокаВСДТоваров.ВетСертификатДата);
			
			vetCertificate.consignor = Записатьconsignor_XDTO(Сообщение);
			vetCertificate.consignee = Записатьconsignee_XDTO(Сообщение);
			vetCertificate.batch = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "Batch");
			
			ТоварыПоВСД = ПолучитьТоварыИзТабЧастиПоВСД(СтрокаВСДТоваров,Сообщение.Товары);
			
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"locationProsperity",ТоварыПоВСД[0].ВетСертификатБлагополучиеМестности);

			ЗаписатьСтрокуТоваровМеркурий_XDTO(vetCertificate.batch,ТоварыПоВСД[0],ТипСообщения);
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"form",ТоварыПоВСД[0].ВетСертификатФорма);
			
			vetCertificate.confirmedBy = ПолучитьОбъектXDTOМеркурий("АргусОбщие", "User");
			xmlЗаполнитьЗначениеXDTO(vetCertificate.confirmedBy,"fio",ТоварыПоВСД[0].ВетСертификатВрачФИО);
			xmlЗаполнитьЗначениеXDTO(vetCertificate.confirmedBy,"post",ТоварыПоВСД[0].ВетСертификатВрачДолжность);
			
			//Однако Количество И КоличествоУпаковок в этом случае неверны!
			//рефакторинг packingList - по идее надо состряпать общий список
			vetCertificate.batch.volume 			= 0;
			vetCertificate.batch.packingAmount 		= 0;
			Для Каждого СтрокаТовараПоВСД Из ТоварыПоВСД Цикл
				vetCertificate.batch.volume 		= vetCertificate.batch.volume + СтрокаТовараПоВСД.Количество;
				vetCertificate.batch.packingAmount 	= vetCertificate.batch.packingAmount + СтрокаТовараПоВСД.КоличествоУпаковок;
			КонецЦикла;
			
			accompanyingForms.vetCertificate.Добавить(vetCertificate);    //может оказаться несколько сертификатов
		КонецЦикла;
		
	ИначеЕсли ТипСообщения =  "M_PRD" Тогда
		
		СведенияОПредприятии = Записатьconsignor_XDTO(Сообщение); //просто чтобы было откуда достать
		businessEntity = СведенияОПредприятии.businessEntity;
		enterprise = СведенияОПредприятии.enterprise;
		
		productionOperation = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "ProductionOperation");
		
		xmlЗаполнитьЗначениеXDTO(productionOperation,"operationId",Сообщение.ИдентификаторПроизводственнойТранзакции);  //для незавершенного производства
		
		Если Сообщение.Завершена = Истина Тогда
			xmlЗаполнитьЗначениеXDTO(productionOperation,"finalizeOperation",Истина);  //завершаем производственную транзакцию
		КонецЕсли;
		
		//Товары
		Для Каждого стр из Сообщение.Товары Цикл
			productiveBatch = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "ProductiveBatch");
			ЗаписатьСтрокуТоваровМеркурий_XDTO(productiveBatch,стр,ТипСообщения);
			productionOperation.productiveBatch.Добавить(productiveBatch);
		КонецЦикла;
		
		//Сырье
		Для Каждого стр из Сообщение.Сырье Цикл
			rawBatch = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "RawBatch");
			ЗаполнитьСтрокуСырьяМеркурий_XDTO(rawBatch,стр,ТипСообщения);
			productionOperation.rawBatch.Добавить(rawBatch);
		КонецЦикла;
		
		vetDocument			= ПолучитьОбъектXDTOМеркурий("ВетДокумент", "VetDocument");	
		vetDocument.cargoInspected = Сообщение.ВетСертификатОбследованоВетВрачом = Истина;
		vetDocument.cargoExpertized = Сообщение.ВетСертификатЭкспертиза = Истина;
		vetDocuments = Новый СписокЗначений();
		vetDocuments.Добавить(vetDocument);
		
	КонецЕсли;
	
	Если ТипСообщения <> "M_PRD" Тогда
		delivery.accompanyingForms = accompanyingForms;   
		delivery.consignor = Записатьconsignor_XDTO(Сообщение);
		delivery.consignee = Записатьconsignee_XDTO(Сообщение);
		Если ТипСообщения = "M_INC" Тогда
			xmlЗаполнитьЗначениеXDTO(delivery,"deliveryDate",Сообщение.ДатаПоставки);
		Иначе
			xmlЗаполнитьЗначениеXDTO(delivery,"deliveryDate",Сообщение.ДатаОтгрузки);
		КонецЕсли;
	КонецЕсли;
	ПараметрыТранзакции = Новый Структура();
	МассивСписковXDTO = Новый Массив();
	
	Если ТипСообщения = "M_DES" 
		ИЛИ ТипСообщения = "M_MOV" Тогда
		
		МассивСписковXDTO.Добавить("delivery");
		Список_delivery = Новый СписокЗначений();
		Список_delivery.Добавить(delivery);
		
		ПараметрыТранзакции.Вставить("delivery",			Список_delivery);
		
	ИначеЕсли  ТипСообщения = "M_PRD" Тогда
		
		ПараметрыТранзакции.Вставить("businessEntity",		businessEntity);
		ПараметрыТранзакции.Вставить("enterprise", 			enterprise);	
		ПараметрыТранзакции.Вставить("productionOperation", ProductionOperation);	
		
		ПараметрыТранзакции.Вставить("VetDocument", 	vetDocuments);
		МассивСписковXDTO.Добавить("VetDocument");
		
	ИначеЕсли  ТипСообщения = "M_REC" Тогда
		ПараметрыТранзакции.Вставить("delivery",			delivery);
		ПараметрыТранзакции.Вставить("deliveryFacts", 		ЗаписатьdeliveryFacts_XDTO(Сообщение));	//заглушка

	ИначеЕсли  ТипСообщения  = "M_INC" Тогда
		
		ПараметрыТранзакции.Вставить("delivery",			delivery);
		
		Если Сообщение.Товары.Количество()>0 Тогда
			текСтр = Сообщение.Товары.Получить(0);
			
			ПараметрыТранзакции.Вставить("deliveryFacts", 		ЗаписатьdeliveryFacts_XDTO(Сообщение));
			
			//Акт расхождениий
			Если текСтр.КоличествоКПодтверждению > текСтр.Количество 
				ИЛИ текСтр.СтатусРасхождений = "УточненАкт" Тогда
				МассивСписковXDTO.Добавить("discrepancyReport");
				Список_discrepancyReport = Новый СписокЗначений();
				Список_discrepancyReport.Добавить(ЗаписатьDiscrepancyReport_XDTO(Сообщение));
				
				ПараметрыТранзакции.Вставить("discrepancyReport", 		Список_discrepancyReport);
			КонецЕсли;			
			
			//Возвратный ВСД
			Если текСтр.КоличествоКПодтверждению < текСтр.Количество И
				текСтр.СтатусРасхождений <> "УточненАкт"  Тогда
				
				returnedDelivery = СкопироватьОбъектXDTO(delivery);
				returnedDelivery.consignor = СкопироватьОбъектXDTO(delivery.consignee);
				returnedDelivery.consignee = СкопироватьОбъектXDTO(delivery.consignor);
				returnedDelivery.consignment[0].volume = текСтр.Количество - текСтр.КоличествоКПодтверждению;
				ВозвращаемУпаковок = текСтр.КоличествоУпаковок - текСтр.КоличествоУпаковокКПодтверждению;
				УпаковкаUUID = текСтр.ЕдиницаИзмеренияУпаковокUUID;
				Если ЗначениеЗаполнено(УпаковкаUUID) и ВозвращаемУпаковок<>0 Тогда 
					returnedDelivery.consignment[0].packingAmount = ВозвращаемУпаковок;
					returnedDelivery.consignment[0].packinglist		    = ПолучитьОбъектXDTOМеркурий("АргусОбщие","PackingFormList"); //обязателен если указывается packingAmount
					ЭлементУпаковки = returnedDelivery.consignment[0].packinglist.packingForm.Добавить(ПолучитьОбъектXDTOМеркурий("АргусОбщие","PackingForm"));
					ЭлементУпаковки.name = Строка(текСтр.ЕдиницаИзмеренияУпаковок);
					xmlЗаполнитьЗначениеXDTO(ЭлементУпаковки,"uuid",текСтр.ЕдиницаИзмеренияУпаковокUUID);
				Иначе
					returnedDelivery.consignment[0].packingAmount = 0;
					returnedDelivery.consignment[0].packinglist		    = ПолучитьОбъектXDTOМеркурий("АргусОбщие","PackingFormList"); //очистим
				КонецЕсли;
				
				ПараметрыТранзакции.Вставить("returnedDelivery", returnedDelivery);
				
			КонецЕсли;
			
		Иначе
			ПараметрыТранзакции.Вставить("deliveryFacts", 		ЗаписатьdeliveryFacts_XDTO(Сообщение));	//заглушка
		КонецЕсли;
				
	КонецЕсли;
	

	ПараметрыТранзакции.Вставить("Наименование", 		Параметры.ИмяМетода);
	ПараметрыТранзакции.Вставить("initiator", 			ВыбратьПараметрыПодключенияДляТранзакции(ТипСообщения,Параметры).user);
	
	ПараметрыТранзакции.Вставить("МассивСписков", 		МассивСписковXDTO);	
	
	//Заполнение фабрики по маппингу полей
	
	
	Возврат ПараметрыТранзакции;
	
КонецФункции

Функция ЗаписатьСообщениеМеркурийXDTO_20(ТипСообщения,Параметры) Экспорт
	//в текущем исполнении записывает только Отгрузки и перемещения
	//учтите что в транзакциях прихода возможно только 1 строка ()  <<--Это условие будет снято в версии API 2.1
	ВерсияAPI = "20";
	
	Сообщение = Параметры.Сообщение;
	
	Если ТипСообщения <> "M_PRD" Тогда
		delivery = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "Delivery",ВерсияAPI);
		
		Consignment =  delivery.consignment;
		//---------------------------------Товары---------------------------------
		ЗаписатьТабЧастьМеркурий_Consignment_XDTO(Consignment,Сообщение.Товары,"Consignment",КорневаяФабрика(ВерсияAPI), ТипСообщения, ВерсияAPI);
		//------------------------------------------------------------------------
		waybill = Записатьwaybill_XDTO(Сообщение, ВерсияAPI);
		
		accompanyingForms =  ПолучитьОбъектXDTOМеркурий("ВетДокумент", "ConsignmentDocumentList", ВерсияAPI);
		accompanyingForms.waybill = waybill;
		
		Если ЗначениеЗаполнено(Сообщение.ЗаказEDI.Номер) Тогда //пробросим номер закза
			relatedDocumentЗаказ = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "ReferencedDocument", ВерсияAPI);
			xmlЗаполнитьЗначениеXDTO(relatedDocumentЗаказ,"issueNumber",Сообщение.ЗаказEDI.Номер);
			xmlЗаполнитьЗначениеXDTO(relatedDocumentЗаказ,"issueDate",Сообщение.ЗаказEDI.Дата);
			xmlЗаполнитьЗначениеXDTO(relatedDocumentЗаказ,"type","16");
			xmlЗаполнитьЗначениеXDTO(relatedDocumentЗаказ,"relationshipType","6");
			accompanyingForms.relatedDocument.Добавить(relatedDocumentЗаказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипСообщения = "M_DES" 
		ИЛИ ТипСообщения = "M_MOV" Тогда
		
		vetCertificate = ПолучитьШапкуВетДокумента_20(Сообщение,waybill, ВерсияAPI);
		
		Если ЗначениеЗаполнено(Сообщение.Перевозчик1С) Тогда 
			broker =  ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessEntity", ВерсияAPI);
			accompanyingForms.waybill.broker = broker;
			xmlЗаполнитьЗначениеXDTO(accompanyingForms.waybill.broker,"GUID",Сообщение.ПеревозчикEDI.GUID);
		КонецЕсли;
		
		//vetCertificate.authentication.r13nClause
		ЗапонитьУсловияРегионализацииДляОтгрузкиXDTO(vetCertificate,Сообщение);


		accompanyingForms.vetCertificate.Добавить(vetCertificate);    //может оказаться несколько сертификатов
		
	КонецЕсли;
	
	Если ТипСообщения <> "M_PRD" Тогда
		delivery.accompanyingForms = accompanyingForms;   
		delivery.consignor = Записатьconsignor_XDTO(Сообщение, ВерсияAPI);
		delivery.consignee = Записатьconsignee_XDTO(Сообщение, ВерсияAPI);
		Если ТипСообщения = "M_INC" Тогда
			xmlЗаполнитьЗначениеXDTO(delivery,"deliveryDate",Сообщение.ДатаПоставки);
		Иначе
			xmlЗаполнитьЗначениеXDTO(delivery,"deliveryDate",Сообщение.ДатаОтгрузки);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипСообщения = "M_DES" 
		ИЛИ ТипСообщения = "M_MOV" Тогда
		delivery.transportInfo = ЗаписатьtransportInfo_20(Сообщение);
		xmlЗаполнитьЗначениеXDTO(delivery,"transportStorageType",Сообщение.Транспорт.СпособХраненияПриПеревозке);
		
		Если Сообщение.Свойство("ПеревозчикEDI") И ЗначениеЗаполнено(Сообщение.ПеревозчикEDI.GUID) Тогда 
			broker =  ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessEntity", ВерсияAPI);
			delivery.broker = broker;
			xmlЗаполнитьЗначениеXDTO(delivery.broker,"GUID",Сообщение.ПеревозчикEDI.GUID);
		КонецЕсли;
		
		Если Сообщение.Свойство("МультимодальнаяПеревозка") и Сообщение.МультимодальнаяПеревозка = Истина И Сообщение.Маршрут.Количество()>1 Тогда
			delivery.shipmentRoute = ЗаписатьshipmentRoute_20(Сообщение);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыТранзакции = Новый Структура();
	МассивСписковXDTO = Новый Массив();
	
	Если ТипСообщения = "M_DES" 
		ИЛИ ТипСообщения = "M_MOV" Тогда
		
		МассивСписковXDTO.Добавить("delivery");
		Список_delivery = Новый СписокЗначений();
		Список_delivery.Добавить(delivery);
		
		ПараметрыТранзакции.Вставить("delivery",			Список_delivery);
	КонецЕсли;
	

	ПараметрыТранзакции.Вставить("Наименование", 		Параметры.ИмяМетода);
	ПараметрыТранзакции.Вставить("initiator", 			ВыбратьПараметрыПодключенияДляТранзакции(ТипСообщения,Параметры,ВерсияAPI).user);
	ПараметрыТранзакции.Вставить("МассивСписков", 		МассивСписковXDTO);	
	
	//Заполнение фабрики по маппингу полей
	
	Возврат ПараметрыТранзакции;
	
КонецФункции

Функция ЗапонитьУсловияРегионализацииДляОтгрузкиXDTO(vetCertificate,Сообщение)
	
	//Нужно заполнить vetCertificate.authentication.r13nClause
	Если Сообщение.ПлощадкаEDI.GUID <> Сообщение.ПлощадкаПолучательEDI.GUID Тогда 
		
		МассивGUIDПлощадок = Новый Массив;
		МассивGUIDПлощадок.Добавить(Сообщение.ПлощадкаEDI.GUID);
		МассивGUIDПлощадок.Добавить(Сообщение.ПлощадкаПолучательEDI.GUID);
		
		МассивSubProductGUID = Сообщение.Товары.ВыгрузитьКолонку("GUID");
		
		РезультатПроверкиУсловийПеремещения = ПолучитьУсловияПеремещения20(МассивGUIDПлощадок,МассивSubProductGUID);
		Для Каждого СтрокаПравила Из РезультатПроверкиУсловийПеремещения.ТаблицаПравил Цикл
			Если ЗначениеЗаполнено(СтрокаПравила.УсловиеGUID) Тогда  //И СтрокаПравила.Выпонено //надо будет давать пользователю выбор
				ДобавитьУсловиеРегионализацииВСертификатXDTO(vetCertificate,СтрокаПравила.УсловиеGUID,СтрокаПравила.УсловиеТекст)
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецФункции 

Процедура ДобавитьУсловиеРегионализацииВСертификатXDTO(vetCertificate,GUIDУсловия,УсловиеТекст)
	
	r13nClause = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "RegionalizationClause", "20");
	r13nClause.condition = ПолучитьОбъектXDTOМеркурий("Справочник20", "RegionalizationCondition", "20");
	xmlЗаполнитьЗначениеXDTO(r13nClause.condition,"uuid",GUIDУсловия);    //пока что на сервере баг и он не умеет работать по guid - зато умеет по uuid
	xmlЗаполнитьЗначениеXDTO(r13nClause.condition,"text",УсловиеТекст);
	
	НовоеУловие = vetCertificate.authentication.r13nClause.Добавить(r13nClause);	

КонецПроцедуры


Функция СкопироватьОбъектXDTO(ОбъектXDTO)
	
	ЗаписьХМЛ= Новый ЗаписьXML;				
	ЗаписьХМЛ.УстановитьСтроку();			
	КорневаяФабрика().ЗаписатьXML(ЗаписьХМЛ, ОбъектXDTO);
	Стр=ЗаписьХМЛ.Закрыть();
	ЧтениеXML= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(стр);
	ЧтениеXML.ПерейтиКСодержимому();
	ТипОбъектаXDTO=КорневаяФабрика().Тип(ЧтениеXML.URIПространстваИмен,ЧтениеXML.Имя);
	Возврат КорневаяФабрика().ПрочитатьXML(ЧтениеXML,ТипОбъектаXDTO);

КонецФункции

Функция ЗаписатьDiscrepancyReport_XDTO(Сообщение)
	
	//СерияАктаНесоответствия = Сообщение.ДокументСсылка.Номер;
	//НомерАктаНесоответствия = "1";

	reason =  ПолучитьОбъектXDTOМеркурий("ВетДокумент", "DiscrepancyReason");
	xmlЗаполнитьЗначениеXDTO(reason,"name","отклонение при приемке");
		
	DiscrepancyReport =  ПолучитьОбъектXDTOМеркурий("ВетДокумент", "DiscrepancyReport");
	//xmlЗаполнитьЗначениеXDTO(DiscrepancyReport,"issueSeries",СерияАктаНесоответствия);
	//xmlЗаполнитьЗначениеXDTO(DiscrepancyReport,"issueNumber",НомерАктаНесоответствия);
	xmlЗаполнитьЗначениеXDTO(DiscrepancyReport,"issueDate",ТекущаяДата());
	xmlЗаполнитьЗначениеXDTO(DiscrepancyReport,"description","отклонение при приемке");
	DiscrepancyReport.reason = reason;
	
	Возврат DiscrepancyReport;
	
КонецФункции

Функция ЗаписатьdeliveryFacts_XDTO(Сообщение)
	
	текСтр = Сообщение.Товары.Получить(0);
	Если текСтр.КоличествоКПодтверждению > текСтр.Количество 
		ИЛИ текСтр.СтатусРасхождений = "УточненАкт" Тогда
		СовпадениеКоличества = "MISMATCH";//будем заявлять несоответствие только если количество превышает указанное в всд или уменьшение хотим отразить актом	
	Иначе
		СовпадениеКоличества = "CORRESPONDS";	
	КонецЕсли;
	
	Если текСтр.КоличествоКПодтверждению = 0 Тогда
		РешениеОПриеме = "RETURN_ALL";
	ИначеЕсли текСтр.КоличествоКПодтверждению < текСтр.Количество 
		И текСтр.СтатусРасхождений <> "УточненАкт" Тогда //только в случае возвратного ВСД
		РешениеОПриеме = "PARTIALLY";
	Иначе
		РешениеОПриеме = "ACCEPT_ALL";
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_INC" Тогда
		ТипДокументов = "ELECTRONIC";
	Иначе
		ТипДокументов = "PAPER";
	КонецЕсли;
	deliveryFacts =  ПолучитьОбъектXDTOМеркурий("ВетДокумент", "DeliveryFactList");
	xmlЗаполнитьЗначениеXDTO(deliveryFacts,"vetCertificatePresence",ТипДокументов);
	xmlЗаполнитьЗначениеXDTO(deliveryFacts,"decision",РешениеОПриеме);
	
	//Кто принимал Груз
	docInspection =  ПолучитьОбъектXDTOМеркурий("ВетДокумент", "DeliveryInspection");
	xmlЗаполнитьЗначениеXDTO(docInspection,"result",СовпадениеКоличества);
	docInspection.responsible = ВыбратьПараметрыПодключенияДляТранзакции(Сообщение.ТипСообщения, Новый Структура("Сообщение",Сообщение)).user;	
	//кто делал вет инспекцию
	vetInspection =  ПолучитьОбъектXDTOМеркурий("ВетДокумент", "DeliveryInspection");
	xmlЗаполнитьЗначениеXDTO(vetInspection,"result",СовпадениеКоличества);
	vetInspection.responsible = ВыбратьПараметрыПодключенияДляТранзакции(Сообщение.ТипСообщения, Новый Структура("Сообщение",Сообщение)).user;	
	
	deliveryFacts.docInspection = docInspection;
	deliveryFacts.vetInspection = vetInspection;

	Возврат deliveryFacts;
	
КонецФункции // ЗаписатьdeliveryFacts_XDTO()

Функция ПолучитьТоварыИзТабЧастиПоВСД(СтрокаВСДТоваров,Товары)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВетСертификатUUID",СтрокаВСДТоваров.ВетСертификатUUID);
	Отбор.Вставить("ВетСертификатСерия",СтрокаВСДТоваров.ВетСертификатСерия);
	Отбор.Вставить("ВетСертификатНомер",СтрокаВСДТоваров.ВетСертификатНомер);
	Отбор.Вставить("ВетСертификатДата",СтрокаВСДТоваров.ВетСертификатДата);
	
	Возврат Товары.НайтиСтроки(Отбор);
	
КонецФункции // ПолучитьТоварыИзТабЧастиПоВСД()

Функция ПолучитьШапкуВетДокумента(Сообщение,waybill, ВерсияAPI = Неопределено)
	
	ВерсияAPI = "14";

	vetCertificate =  ПолучитьОбъектXDTOМеркурий("ВетДокумент", "VetDocument", ВерсияAPI);
	vetCertificate.purpose = ПолучитьОбъектXDTOМеркурий("АргусОбщие", "Purpose", ВерсияAPI);
	vetCertificate.transportInfo = ПолучитьОбъектXDTOМеркурий("АргусПеревозки", "TransportInfo", ВерсияAPI);
	vetCertificate.transferPermit = ПолучитьОбъектXDTOМеркурий("АргусОбщие", "Document", ВерсияAPI);
	vetCertificate.transportInfo.transportNumber = ПолучитьОбъектXDTOМеркурий("АргусПеревозки", "TransportNumber", ВерсияAPI);
	
	Если ЗначениеЗаполнено(waybill.transportInfo.transportNumber.vehicleNumber) Тогда
		ЗаполнитьЗначенияСвойств(vetCertificate.transportInfo.transportNumber,waybill.transportInfo.transportNumber,"vehicleNumber"); //копируем копируем из waybill
	КонецЕсли;
	Если ЗначениеЗаполнено(waybill.transportInfo.transportType) Тогда
		ЗаполнитьЗначенияСвойств(vetCertificate.transportInfo,waybill.transportInfo,"transportType"); //копируем из waybill
	КонецЕсли;
	
	Если Сообщение.Свойство("РазрешениеНаВывозНомер") Тогда
		xmlЗаполнитьЗначениеXDTO(vetCertificate.transferPermit,"issueNumber",Сообщение.РазрешениеНаВывозНомер);
	КонецЕсли;
	Если Сообщение.Свойство("РазрешениеНаВывозДата") Тогда
		xmlЗаполнитьЗначениеXDTO(vetCertificate.transferPermit,"issueDate",Сообщение.РазрешениеНаВывозДата);
	КонецЕсли;
	xmlЗаполнитьЗначениеXDTO(vetCertificate.purpose,"guid",Сообщение.ЦельEDI.GUID);
	
	Если Сообщение.Свойство("ВетСертификатОбследованоВетВрачом") Тогда 
		vetCertificate.cargoInspected = Сообщение.ВетСертификатОбследованоВетВрачом = Истина;
	Иначе
		vetCertificate.cargoInspected = Истина;
	КонецЕсли;
	Если Сообщение.Свойство("ВетСертификатЭкспертиза") Тогда 
		vetCertificate.cargoExpertized = ?(Сообщение.ВетСертификатЭкспертиза = "Истина" ИЛИ Сообщение.ВетСертификатЭкспертиза = "Да" ИЛИ Сообщение.ВетСертификатЭкспертиза = "VSEFULL" ИЛИ Сообщение.ВетСертификатЭкспертиза = "VSERAW",Истина,Ложь);
	Иначе
		vetCertificate.cargoExpertized = Истина;
	КонецЕсли;
	//ЭкспертизаПоВсемСтрокам = Сообщение.Товары.Итог("ВетСертификатЭкспертиза") = Сообщение.Товары.Количество();
	//vetCertificate.cargoExpertized = ЭкспертизаПоВсемСтрокам;
	Если Сообщение.Свойство("БлагополучиеМестности") и ЗначениеЗаполнено(Сообщение.БлагополучиеМестности) Тогда
		vetCertificate.locationProsperity = Сообщение.БлагополучиеМестности;
	КонецЕсли;
	
	Если Сообщение.Свойство("ПеревозчикEDI") И ЗначениеЗаполнено(Сообщение.ПеревозчикEDI.GUID) Тогда 
		broker =  ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessEntity", ВерсияAPI);
		vetCertificate.broker = broker;
		xmlЗаполнитьЗначениеXDTO(vetCertificate.broker,"GUID",Сообщение.ПеревозчикEDI.GUID);
	КонецЕсли;
	
	Возврат vetCertificate;
КонецФункции // ПолучитьШапкуВетДокумента()

Функция ПолучитьШапкуВетДокумента_20(Сообщение,waybill, ВерсияAPI = Неопределено)
	
	ВерсияAPI = "20";

	vetCertificate =  ПолучитьОбъектXDTOМеркурий("ВетДокумент", "VetDocument", ВерсияAPI);
	vetCertificate.authentication = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "VeterinaryAuthentication", ВерсияAPI);
	vetCertificate.authentication.purpose = ПолучитьОбъектXDTOМеркурий("АргусОбщие", "Purpose", ВерсияAPI);
	
	xmlЗаполнитьЗначениеXDTO(vetCertificate.authentication,"specialMarks",Сообщение.ВетСертификатОсобыеОтметки);
	
	//----------------------Этот Блок перенесли ----------------------
	//vetCertificate.transportInfo = ПолучитьОбъектXDTOМеркурий("АргусПеревозки", "TransportInfo", ВерсияAPI);
	//vetCertificate.transferPermit = ПолучитьОбъектXDTOМеркурий("АргусОбщие", "Document", ВерсияAPI);
	//vetCertificate.transportInfo.transportNumber = ПолучитьОбъектXDTOМеркурий("АргусПеревозки", "TransportNumber", ВерсияAPI);
	//
	//Если ЗначениеЗаполнено(waybill.transportInfo.transportNumber.vehicleNumber) Тогда
	//	ЗаполнитьЗначенияСвойств(vetCertificate.transportInfo.transportNumber,waybill.transportInfo.transportNumber,"vehicleNumber"); //копируем копируем из waybill
	//КонецЕсли;
	//Если ЗначениеЗаполнено(waybill.transportInfo.transportType) Тогда
	//	ЗаполнитьЗначенияСвойств(vetCertificate.transportInfo,waybill.transportInfo,"transportType"); //копируем из waybill
	//КонецЕсли;
	//
	//Если Сообщение.Свойство("РазрешениеНаВывозНомер") Тогда
	//	xmlЗаполнитьЗначениеXDTO(vetCertificate.transferPermit,"issueNumber",Сообщение.РазрешениеНаВывозНомер);
	//КонецЕсли;
	//Если Сообщение.Свойство("РазрешениеНаВывозДата") Тогда
	//	xmlЗаполнитьЗначениеXDTO(vetCertificate.transferPermit,"issueDate",Сообщение.РазрешениеНаВывозДата);
	//КонецЕсли;
	
	xmlЗаполнитьЗначениеXDTO(vetCertificate.authentication.purpose,"guid",Сообщение.ЦельEDI.GUID);
	
	Если Сообщение.Свойство("ВетСертификатОбследованоВетВрачом") Тогда 
		vetCertificate.authentication.cargoInspected = Сообщение.ВетСертификатОбследованоВетВрачом = Истина;
	Иначе
		vetCertificate.authentication.cargoInspected = Истина;
	КонецЕсли;
	Если Сообщение.Свойство("ВетСертификатЭкспертиза") И ЗначениеЗаполнено(Сообщение.ВетСертификатЭкспертиза) Тогда 
		xmlЗаполнитьЗначениеXDTO(vetCertificate.authentication,"cargoExpertized",Сообщение.ВетСертификатЭкспертиза);
	Иначе
		vetCertificate.authentication.cargoExpertized = "UNFULFILLED";
	КонецЕсли;
	//ЭкспертизаПоВсемСтрокам = Сообщение.Товары.Итог("ВетСертификатЭкспертиза") = Сообщение.Товары.Количество();
	//vetCertificate.cargoExpertized = ЭкспертизаПоВсемСтрокам;
	Если Сообщение.Свойство("БлагополучиеМестности") и ЗначениеЗаполнено(Сообщение.БлагополучиеМестности) Тогда
		vetCertificate.authentication.locationProsperity = Сообщение.БлагополучиеМестности;
	КонецЕсли;
	
	//----------------------Этот Блок перенесли ----------------------
	//Если Сообщение.Свойство("ПеревозчикEDI") И ЗначениеЗаполнено(Сообщение.ПеревозчикEDI.GUID) Тогда 
	//	broker =  ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessEntity", ВерсияAPI);
	//	vetCertificate.broker = broker;
	//	xmlЗаполнитьЗначениеXDTO(vetCertificate.broker,"GUID",Сообщение.ПеревозчикEDI.GUID);
	//КонецЕсли;
	
	Возврат vetCertificate;
	
КонецФункции // ПолучитьШапкуВетДокумента()

Процедура ЗаписатьСтрокуИнвентаризацииМеркурий_XDTO(stockEntry,стр,GUIDХозСуб)
	//эта функция предполагает что переданное ей стр.Количесвто
	//следует в явном виде присвоить переданной партии (UUID партии устанавливается на уровень выше)
	
	ConsignmentOrBatch = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "Batch");
	xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch,"Volume",стр.Количество,Истина);
	
	Unit	 			= ПолучитьОбъектXDTOМеркурий("АргусОбщие", 			"Unit");
	xmlЗаполнитьЗначениеXDTO(Unit,"UUID",стр.unitUUID);
	ConsignmentOrBatch.unit				= Unit;
	
	ЗаполнитьТиповыеИдентификаторыBatchизСтрокиТоваров(ConsignmentOrBatch,стр);
	
	ConsignmentOrBatch.lowGradeCargo = Ложь;
	
	//Страна производитель
	ConsignmentOrBatch.countryOfOrigin = ПолучитьОбъектXDTOМеркурий("Икар", 			"Country");
	xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.countryOfOrigin,"UUID",стр.СтранаUUID);
	//владелец
	owner =  ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessEntity");
	xmlЗаполнитьЗначениеXDTO(owner,"GUID",GUIDХозСуб);
	ConsignmentOrBatch.owner = owner;
	
	ConsignmentOrBatch.productItem = ПолучитьОбъектXDTOМеркурий("АргусТовары", 			"ProductItem");
	
	Если ЗначениеЗаполнено(Стр.Наименование) Тогда
		xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.productItem,"name",Стр.Наименование);
	ИначеЕсли ЗначениеЗаполнено(Стр.Номенклатура) Тогда
		xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.productItem,"name",СокрЛП(Стр.Номенклатура));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Стр.productItemUUID) Тогда 
		xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.productItem,"uuid",Стр.productItemUUID);
	КонецЕсли;
	
	stockEntry.batch=ConsignmentOrBatch;
	
КонецПроцедуры

Процедура ЗаполнитьТиповыеИдентификаторыBatchизСтрокиТоваров(ConsignmentOrBatch,стр,ВерсияAPI = Неопределено)
	Если ВерсияAPI = Неопределено Тогда 
		ВерсияAPI = "14";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Стр.GUID) Тогда
		СтруктураВерхнихУровней = ПолучитьproductGUIDиproductTypeПоsubProductGUID(Стр.GUID);
		xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch,"productType",СтруктураВерхнихУровней.productType);
		
		ConsignmentOrBatch.product = ПолучитьОбъектXDTOМеркурий("АргусТовары", 			"Product", ВерсияAPI);
		xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.product,"GUID",СтруктураВерхнихУровней.productGUID);
	КонецЕсли;
	
	ConsignmentOrBatch.subproduct = ПолучитьОбъектXDTOМеркурий("АргусТовары", 			"SubProduct", ВерсияAPI);
	xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.subProduct,"GUID",Стр.GUID);
	
	Если Значениезаполнено(стр.ДатаПроизводства) Тогда
		ConsignmentOrBatch.dateOfProduction = ПолучитьОбъектXDTOМеркурий("ВетДокумент", 			"GoodsDate", ВерсияAPI);
		ConsignmentOrBatch.dateOfProduction.firstDate = ПолучитьМеркурийComplexDate(стр.ДатаПроизводства);
		Если Значениезаполнено(стр.ДатаПроизводства2) Тогда 
			ConsignmentOrBatch.dateOfProduction.secondDate = ПолучитьМеркурийComplexDate(стр.ДатаПроизводства2);
		КонецЕсли;
	КонецЕсли;
	
	Если Значениезаполнено(стр.СрокГодности) Тогда 
		ConsignmentOrBatch.expiryDate = ПолучитьОбъектXDTOМеркурий("ВетДокумент", 			"GoodsDate", ВерсияAPI);
		ConsignmentOrBatch.expiryDate.firstDate = ПолучитьМеркурийComplexDate(стр.СрокГодности);
		Если Значениезаполнено(стр.СрокГодности2) Тогда 
			ConsignmentOrBatch.expiryDate.secondDate = ПолучитьМеркурийComplexDate(стр.СрокГодности2);
		КонецЕсли;
	КонецЕсли;
	
	xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch,"perishable",стр.Скоропортящаяся = Истина);
	
КонецПроцедуры

Процедура ЗаписатьСтрокуТоваровМеркурий_XDTO(ConsignmentOrBatch,стр,ТипСообщения,ВерсияAPI = Неопределено)
	
	Если ВерсияAPI = Неопределено Тогда 
		ВерсияAPI = "14";
	КонецЕсли;
	
		Unit	 			= ПолучитьОбъектXDTOМеркурий("АргусОбщие", 			"Unit", ВерсияAPI);
		
		xmlЗаполнитьЗначениеXDTO(Unit,"GUID",стр.unitGUID);
		xmlЗаполнитьЗначениеXDTO(Unit,"UUID",стр.unitUUID);
		
		Если ТипСообщения =  "M_DES" ИЛИ ТипСообщения =  "M_MOV" Тогда
			
			sourceStockEntry 	= ПолучитьОбъектXDTOМеркурий("ВетДокумент","StockEntry",ВерсияAPI);
			xmlЗаполнитьЗначениеXDTO(sourceStockEntry,"GUID",стр.ИсходнаяПартияGUID);
			ConsignmentOrBatch.sourceStockEntry	= sourceStockEntry;
			
			////пробуем присвоить SSCC в момент огрузки - вот этот кусок будет актуальным только для версии 2.0, версия 1.4 не поддерживает установку SSCC в момент отгрузки //пока что пусть тут полежит
			//	ConsignmentOrBatch.productMarkingList = ПолучитьОбъектXDTOМеркурий("ВетДокумент",  "ProductMarkingList");
			//	Если ЗначениеЗаполнено(стр.Маркировка) Тогда
			//		productMarking = ПолучитьОбъектXDTOМеркурий("ВетДокумент",  "ProductMarking");
			//		productMarking.__content = стр.Маркировка;
			//		productMarking.class = "BN"; //UNDEFINED - дефолт /SSCC /BN - номер партии !Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
			//		ConsignmentOrBatch.productMarkingList.productMarking.Добавить(productMarking);
			//	КонецЕсли;
			//	Если ЗначениеЗаполнено(стр.SSCC) Тогда
			//		productMarkingSSCC = ПолучитьОбъектXDTOМеркурий("ВетДокумент",  "ProductMarking");
			//		productMarkingSSCC.__content = стр.SSCC;
			//		productMarkingSSCC.class = "SSCC"; //UNDEFINED - дефолт /SSCC /BN - номер партии !Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
			//		ConsignmentOrBatch.productMarkingList.productMarking.Добавить(productMarkingSSCC);
			//	КонецЕсли;
			
		ИначеЕсли ТипСообщения =  "M_REC" ИЛИ ТипСообщения =  "M_INC" ИЛИ ТипСообщения =  "M_PRD" Тогда

			ЗаполнитьТиповыеИдентификаторыBatchизСтрокиТоваров(ConsignmentOrBatch,стр,ВерсияAPI);

			Если ТипСообщения =  "M_PRD" ИЛИ ТипСообщения =  "M_REC" Тогда
				
				//МаркировкаТип=КорневаяФабрика.Тип("http://api.vetrf.ru/schema/cdm/base","String255");
				//Маркировка=КорневаяФабрика.Создать(МаркировкаТип,стр.Маркировка);
				
				ConsignmentOrBatch.productMarkingList = ПолучитьОбъектXDTOМеркурий("ВетДокумент",  "ProductMarkingList",ВерсияAPI);
				Если ЗначениеЗаполнено(стр.Маркировка) Тогда
					productMarking = ПолучитьОбъектXDTOМеркурий("ВетДокумент",  "ProductMarking",ВерсияAPI);
					productMarking.__content = стр.Маркировка;
					productMarking.class = "BN"; //UNDEFINED - дефолт /SSCC /BN - номер партии !Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
					ConsignmentOrBatch.productMarkingList.productMarking.Добавить(productMarking);
				КонецЕсли;
				Если ЗначениеЗаполнено(стр.SSCC) Тогда
					productMarkingSSCC = ПолучитьОбъектXDTOМеркурий("ВетДокумент",  "ProductMarking",ВерсияAPI);
					productMarkingSSCC.__content = стр.SSCC;
					productMarkingSSCC.class = "SSCC"; //UNDEFINED - дефолт /SSCC /BN - номер партии !Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
					ConsignmentOrBatch.productMarkingList.productMarking.Добавить(productMarkingSSCC);
				КонецЕсли;
			КонецЕсли;
			
			Если ТипСообщения =  "M_REC" ИЛИ ТипСообщения =  "M_INC" Тогда
				//Страна производитель
				ConsignmentOrBatch.countryOfOrigin = ПолучитьОбъектXDTOМеркурий("Икар", 			"Country",ВерсияAPI);
				xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.countryOfOrigin,"UUID",стр.СтранаUUID);
				
				//производитель (по сути взять GUID и затолкать в глубину)
				ПлощадкаПроизводительМеркурий = ПолучитьОбъектXDTOМеркурий("Цербер",  "Enterprise",ВерсияAPI);
				xmlЗаполнитьЗначениеXDTO(ПлощадкаПроизводительМеркурий,"GUID",стр.ПлощадкаПроизводительGUID);
				ПроизводительМеркурий = ПолучитьОбъектXDTOМеркурий("Цербер", 			"Producer",ВерсияAPI);
				ПроизводительМеркурий.enterprise = ПлощадкаПроизводительМеркурий;
				
				ConsignmentOrBatch.producerList 	= ПолучитьОбъектXDTOМеркурий("Цербер", 			"ProducerList",ВерсияAPI);
				ConsignmentOrBatch.producerList.producer.Добавить(ПроизводительМеркурий);              
			КонецЕсли;
			
			//некачественный груз по факту - дефолтом ложь
			ConsignmentOrBatch.lowGradeCargo 	= ?(стр.НекачественныйГруз=Истина,Истина,Ложь);
			
		КонецЕсли;
		
		ConsignmentOrBatch.productItem = ПолучитьОбъектXDTOМеркурий("АргусТовары", 			"ProductItem",ВерсияAPI);
		xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.productItem,"name",Стр.Наименование);
		
		Если ТипСообщения =  "M_MOV" 
			ИЛИ ТипСообщения =  "M_DES" 
			ИЛИ ТипСообщения =  "M_PRD"
			ИЛИ ТипСообщения =  "M_INC"
			Тогда
			Если ЗначениеЗаполнено(Стр.productItemUUID) Тогда 
				xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.productItem,"uuid",Стр.productItemUUID);
			Иначе  //приоритет на сервере должен быть по UUID
			КонецЕсли;
		КонецЕсли;
		
		Если ТипСообщения =  "M_INC" Тогда
			ConsignmentOrBatch.Volume				= стр.КоличествоКПодтверждению;
			КоличествоУпаковок = стр.КоличествоУпаковокКПодтверждению;
		Иначе
			ConsignmentOrBatch.Volume				= стр.Количество;
			КоличествоУпаковок = стр.КоличествоУпаковок;
		КонецЕсли;
		
		Если КоличествоУпаковок > 0  И ВерсияAPI = "14" Тогда
			ConsignmentOrBatch.packingAmount       = КоличествоУпаковок;
			ConsignmentOrBatch.packinglist		    = ПолучитьОбъектXDTOМеркурий("АргусОбщие","PackingFormList",ВерсияAPI); //обязателен если указывается packingAmount
			ЭлементУпаковки = ConsignmentOrBatch.packinglist.packingForm.Добавить(ПолучитьОбъектXDTOМеркурий("АргусОбщие","PackingForm",ВерсияAPI));
			ЭлементУпаковки.name = Строка(стр.ЕдиницаИзмеренияУпаковок);
			xmlЗаполнитьЗначениеXDTO(ЭлементУпаковки,"uuid",стр.ЕдиницаИзмеренияУпаковокUUID);
		КонецЕсли;
		
		ConsignmentOrBatch.unit				= Unit;
		
		Если ВерсияAPI = "20" Тогда 
			xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.productItem,"GlobalID",Стр.GTIN);
			xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.productItem,"code",Стр.КодТовараПокупателя);
			
			ЗаписатьИерархиюУпаковокXDTO(ConsignmentOrBatch,Стр);
		
		КонецЕсли;
		
		
КонецПроцедуры

Процедура ЗаписатьИерархиюУпаковокXDTO(ConsignmentOrBatch,СтрокаТовара)
	
	ВерсияAPI = "20";
	
	packageList = ПолучитьОбъектXDTOМеркурий("Справочник20","PackageList",ВерсияAPI);
	
	Если ЗначениеЗаполнено(СтрокаТовара.SSCC) Тогда 
		Паллета 	= ПолучитьОбъектXDTOМеркурий("Справочник20","Package",ВерсияAPI);
		xmlЗаполнитьЗначениеXDTO(Паллета,"level","5");
		Паллета.packingType = ПолучитьОбъектXDTOМеркурий("Справочник20","PackingType",ВерсияAPI);
		xmlЗаполнитьЗначениеXDTO(Паллета.packingType,"globalID","PX");
		xmlЗаполнитьЗначениеXDTO(Паллета,"quantity",1);
		
		productMarks = ПолучитьОбъектXDTOМеркурий("Справочник20","ProductMarks",ВерсияAPI);
		xmlЗаполнитьЗначениеXDTO(productMarks,"class","SSCC");
		xmlЗаполнитьЗначениеXDTO(productMarks,"__content",СтрокаТовара.SSCC);
 		Паллета.productMarks.Добавить(productMarks);
   		packageList.package.Добавить(Паллета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТовара.КоличествоУпаковок) Тогда 
		Коробка 	= ПолучитьОбъектXDTOМеркурий("Справочник20","Package",ВерсияAPI);
		xmlЗаполнитьЗначениеXDTO(Коробка,"level","3");
		Коробка.packingType = ПолучитьОбъектXDTOМеркурий("Справочник20","PackingType",ВерсияAPI);
		xmlЗаполнитьЗначениеXDTO(Коробка.packingType,"globalID","BX");
		xmlЗаполнитьЗначениеXDTO(Коробка,"quantity",СтрокаТовара.КоличествоУпаковок);
		
		productMarks = ПолучитьОбъектXDTOМеркурий("Справочник20","ProductMarks",ВерсияAPI);
		xmlЗаполнитьЗначениеXDTO(productMarks,"class","BN");
		xmlЗаполнитьЗначениеXDTO(productMarks,"__content",СтрокаТовара.Маркировка);
 		Коробка.productMarks.Добавить(productMarks);
		//надо подумать как пробросить EAN13 Коробки (откуда его вообще брать у поставщика??!)
		
		Если ЗначениеЗаполнено(СтрокаТовара.SSCC) Тогда
			productMarks2 = ПолучитьОбъектXDTOМеркурий("Справочник20","ProductMarks",ВерсияAPI);
			xmlЗаполнитьЗначениеXDTO(productMarks2,"class","BUNDLE");
			xmlЗаполнитьЗначениеXDTO(productMarks2,"__content",СтрокаТовара.SSCC);
 			Коробка.productMarks.Добавить(productMarks2);
		КонецЕсли;
		packageList.package.Добавить(Коробка);
	КонецЕсли;	
	
	
	Если ЗначениеЗаполнено(СтрокаТовара.GTIN) Тогда 
		Штука 		= ПолучитьОбъектXDTOМеркурий("Справочник20","Package",ВерсияAPI);
		xmlЗаполнитьЗначениеXDTO(Штука,"level","1");
		Штука.packingType = ПолучитьОбъектXDTOМеркурий("Справочник20","PackingType",ВерсияAPI);
		xmlЗаполнитьЗначениеXDTO(Штука.packingType,"globalID","PP");
		xmlЗаполнитьЗначениеXDTO(Штука,"quantity",СтрокаТовара.КоличествоВДокументе);
		
		productMarks = ПолучитьОбъектXDTOМеркурий("Справочник20","ProductMarks",ВерсияAPI);
		xmlЗаполнитьЗначениеXDTO(productMarks,"class","EAN13");
		xmlЗаполнитьЗначениеXDTO(productMarks,"__content",СтрокаТовара.GTIN);
 		Штука.productMarks.Добавить(productMarks);
		Если ЗначениеЗаполнено(СтрокаТовара.SSCC) Тогда
			productMarks2 = ПолучитьОбъектXDTOМеркурий("Справочник20","ProductMarks",ВерсияAPI);
			xmlЗаполнитьЗначениеXDTO(productMarks2,"class","BUNDLE");
			xmlЗаполнитьЗначениеXDTO(productMarks2,"__content",СтрокаТовара.SSCC);
 			Штука.productMarks.Добавить(productMarks2);
		КонецЕсли;
		packageList.package.Добавить(Штука);
	КонецЕсли;	
	
	ConsignmentOrBatch.packageList = packageList;
	
КонецПроцедуры


Процедура ЗаполнитьСтрокуСырьяМеркурий_XDTO(rawBatch,стр,ТипСообщения)
	
	
	Если ТипСообщения =  "M_PRD" Тогда
		
		sourceStockEntry 	= ПолучитьОбъектXDTOМеркурий("ВетДокумент","StockEntry");
		sourceStockEntry.GUID 	= стр.ИсходнаяПартияGUID; 
		rawBatch.sourceStockEntry	= sourceStockEntry;
		rawBatch.Volume				= стр.Количество;
		
		Unit	 			= ПолучитьОбъектXDTOМеркурий("АргусОбщие", 			"Unit");
		xmlЗаполнитьЗначениеXDTO(Unit,"GUID",стр.unitGUID);
		xmlЗаполнитьЗначениеXDTO(Unit,"UUID",стр.unitUUID);
		rawBatch.unit				= Unit;
		
		Если ЗначениеЗаполнено(стр.ЕдиницаИзмеренияУпаковокUUID) и стр.КоличествоУпаковок > 0 Тогда  //ЕИ Упаковок можно использовать только вместе с Количеством упаковок
			rawBatch.packinglist		    = ПолучитьОбъектXDTOМеркурий("АргусОбщие","PackingFormList"); //обязателен если указывается packingAmount
			ЭлементУпаковки = rawBatch.packinglist.packingForm.Добавить(ПолучитьОбъектXDTOМеркурий("АргусОбщие","PackingForm"));
			xmlЗаполнитьЗначениеXDTO(ЭлементУпаковки,"name",Строка(стр.ЕдиницаИзмеренияУпаковок));
			xmlЗаполнитьЗначениеXDTO(ЭлементУпаковки,"UUID",стр.ЕдиницаИзмеренияУпаковокUUID);
			
			rawBatch.packingAmount       = стр.КоличествоУпаковок;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьТабЧастьМеркурий_Consignment_XDTO(XDTOСостав,Товары,НазваниеТабЧасти,КорневаяФабрика,ТипСообщения,ВерсияAPI = Неопределено)      //это может быть batch или consignment
	
	Если ВерсияAPI = Неопределено Тогда 
		ВерсияAPI = "14";
	КонецЕсли;
	
	//Товары - табЗначений или массив строк ТЧ
	Для Каждого стр из Товары Цикл
		Consignment = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "Consignment",ВерсияAPI);
		
		//Consignment = ПолучитьФабрикуМеркурий(ВетДокумент,"Consignment");
		ЗаписатьСтрокуТоваровМеркурий_XDTO(Consignment,стр,ТипСообщения,ВерсияAPI);
		
		XDTOСостав.Добавить(Consignment);
	КонецЦикла;
	
КонецПроцедуры

Процедура xmlЗаполнитьЗначениеXDTO(ОбъектXDTO,ИмяПоля,Значение, НезаполненоКакНоль=Ложь) Экспорт

	ОсновнойМодуль.xmlЗаполнитьЗначениеXDTO(ОбъектXDTO,ИмяПоля,Значение, НезаполненоКакНоль);	
               
КонецПроцедуры

//xsd схемы

Функция ПолучитьОбъектXDTOМеркурий(ИмяXDTOСхемы,ТипОбъекта,ВерсияAPI = Неопределено) Экспорт
	
	Если ВерсияAPI = Неопределено Тогда 
		ВерсияAPI = "14";
	КонецЕсли;
	
	НужнаяСтраница = "";
	НашлиСтраницу = БиблиотекаФабрикМеркурий(ВерсияAPI).Свойство(ИмяXDTOСхемы,НужнаяСтраница);
	Если НашлиСтраницу Тогда
		Возврат КорневаяФабрика(ВерсияAPI).Создать(НужнаяСтраница,ТипОбъекта);
	Иначе
		ВызватьИсключение "Не нашел xsd схему";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьФабрикуМеркурий(ИмяXDTOСхемы)

Функция ПолучитьТипОбъектаXDTOМеркурий(ИмяXDTOСхемы,ТипОбъекта,ВерсияAPI = Неопределено)
	
	Если ВерсияAPI = Неопределено Тогда 
		ВерсияAPI = "14";
	КонецЕсли;
	
	НужнаяСтраница = "";
	НашлиСтраницу = БиблиотекаФабрикМеркурий(ВерсияAPI).Свойство(ИмяXDTOСхемы,НужнаяСтраница);
	Если НашлиСтраницу Тогда
		Если ВерсияAPI = "14" Тогда 
			Возврат КорневаяФабрика().Тип(НужнаяСтраница, ТипОбъекта);
		ИначеЕсли ВерсияAPI = "20" Тогда
			Возврат КорневаяФабрика_2_0().Тип(НужнаяСтраница, ТипОбъекта);
		КонецЕсли;
	Иначе
		ВызватьИсключение "Не нашел xsd схему";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьФабрикуМеркурий(ИмяXDTOСхемы)

Функция БиблиотекаФабрикМеркурий(ВерсияAPI)
	
	СписокСхем = Новый Структура;
	
	Если ВерсияAPI = "14" Тогда
		
		СписокСхем.Вставить("ВетДокумент","http://api.vetrf.ru/schema/cdm/mercury/vet-document");
		
		СписокСхем.Вставить("АргусПеревозки","http://api.vetrf.ru/schema/cdm/argus/shipment");
		СписокСхем.Вставить("АргусОбщие","http://api.vetrf.ru/schema/cdm/argus/common");
		СписокСхем.Вставить("АргусТовары","http://api.vetrf.ru/schema/cdm/argus/production");
		
		СписокСхем.Вставить("Общие","http://api.vetrf.ru/schema/cdm/base");
		СписокСхем.Вставить("Цербер","http://api.vetrf.ru/schema/cdm/cerberus/enterprise");
		СписокСхем.Вставить("Икар","http://api.vetrf.ru/schema/cdm/ikar");
		
	Иначе
		
		СписокСхем.Вставить("ВетДокумент","http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2");
		
		СписокСхем.Вставить("АргусПеревозки","http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2");
		
		СписокСхем.Вставить("АргусОбщие","http://api.vetrf.ru/schema/cdm/dictionary/v2");
		СписокСхем.Вставить("АргусТовары","http://api.vetrf.ru/schema/cdm/dictionary/v2");
		
		СписокСхем.Вставить("Общие","http://api.vetrf.ru/schema/cdm/base");
		СписокСхем.Вставить("Цербер","http://api.vetrf.ru/schema/cdm/dictionary/v2");
		СписокСхем.Вставить("Икар","http://api.vetrf.ru/schema/cdm/dictionary/v2");
		
		СписокСхем.Вставить("Справочник20","http://api.vetrf.ru/schema/cdm/dictionary/v2");
		
		
	КонецЕсли;
	
	Возврат СписокСхем;
	
КонецФункции

//Транспорт

Функция КорневаяФабрика(ВерсияAPI = неопределено) Экспорт
	
	Если ВерсияAPI = Неопределено Тогда 
		ВерсияAPI = "14";
	КонецЕсли;
	
	Если ВерсияAPI = "14" Тогда 
		Возврат КорневаяФабрика_1_4();
	Иначе
		Возврат КорневаяФабрика_2_0();
	КонецЕсли;

КонецФункции // КорневаяФабрика()

Функция КорневаяФабрика_1_4() Экспорт

	Если КорневаяФабрика <> Неопределено тогда
		Возврат КорневаяФабрика;
	КонецЕсли;
	
	//значит протухло или инициализируемся
	
	//при создании единой фабрики создадим ws пакеты из самого сервиса, а прикладные возьмем свои
	//WSОпределениеApplication = WSСсылки.WSApplicationManagementsServiceTest.ПолучитьWSОпределения();
	WSОпределениеApplication = ПолучитьОпределениеПроксиИзМакета("ApplicationManagementsService_test_14");
	
	
	МассивURIПространствИмен = Новый Массив;  
	МассивURIПространствИмен.Добавить("http://api.vetrf.ru/schema/cdm/application/ws-definitions");  
	МассивURIПространствИмен.Добавить("http://api.vetrf.ru/schema/cdm/base/ws-definitions");  
	
	//ФабрикаWSApplication = Новый ФабрикаXDTO(WSОпределениеApplication.ФабрикаXDTO.ЭкспортМоделиXDTO(МассивURIПространствИмен), ФабрикаXDTO.Пакеты);
	ВременнаяФабрика = ПолучитьФабрикуXDTOМеркурий();
	ФабрикаWSApplication = Новый ФабрикаXDTO(WSОпределениеApplication.ФабрикаXDTO.ЭкспортМоделиXDTO(МассивURIПространствИмен), ВременнаяФабрика.Пакеты);  
	
	Пакеты = Новый Массив;  
	Пакеты.Добавить(ВременнаяФабрика.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/applications"));
	Пакеты.Добавить(ВременнаяФабрика.Пакеты.Получить("http://schemas.xmlsoap.org/soap/envelope/"));
	
	Для Каждого Пакет Из ФабрикаWSApplication.Пакеты Цикл  
		Пакеты.Добавить(Пакет);  
	КонецЦикла;  
	

	КорневаяФабрика = Новый ФабрикаXDTO(, Пакеты);

	Возврат(КорневаяФабрика);

КонецФункции // КорневаяФабрика()

Функция КорневаяФабрика_2_0() Экспорт

	Если КорневаяФабрика20 <> Неопределено тогда
		Возврат КорневаяФабрика20;
	КонецЕсли;
	
	//значит протухло или инициализируемся
	
	//при создании единой фабрики создадим ws пакеты из самого сервиса, а прикладные возьмем свои
	//WSОпределениеApplication = WSСсылки.WSApplicationManagementsServiceTest.ПолучитьWSОпределения();
	WSОпределениеApplication = ПолучитьОпределениеПроксиИзМакета("ApplicationManagementService_test_20");
	
	
	МассивURIПространствИмен = Новый Массив;  
	МассивURIПространствИмен.Добавить("http://api.vetrf.ru/schema/cdm/application/ws-definitions");  
	МассивURIПространствИмен.Добавить("http://api.vetrf.ru/schema/cdm/base/ws-definitions");  
	
	//ФабрикаWSApplication = Новый ФабрикаXDTO(WSОпределениеApplication.ФабрикаXDTO.ЭкспортМоделиXDTO(МассивURIПространствИмен), ФабрикаXDTO.Пакеты);
	ВременнаяФабрика = ПолучитьФабрикуXDTOМеркурий20();
	ФабрикаWSApplication = Новый ФабрикаXDTO(WSОпределениеApplication.ФабрикаXDTO.ЭкспортМоделиXDTO(МассивURIПространствИмен), ВременнаяФабрика.Пакеты);  
	
	Пакеты = Новый Массив;  
	//Пакеты.Добавить(ВременнаяФабрика.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/applications"));
	Пакеты.Добавить(ВременнаяФабрика.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2"));
	Пакеты.Добавить(ВременнаяФабрика.Пакеты.Получить("http://schemas.xmlsoap.org/soap/envelope/"));
	
	Для Каждого Пакет Из ФабрикаWSApplication.Пакеты Цикл  
		Пакеты.Добавить(Пакет);  
	КонецЦикла;  

	КорневаяФабрика20 = Новый ФабрикаXDTO(, Пакеты);

	Возврат(КорневаяФабрика20);

КонецФункции // КорневаяФабрика()

Функция ПолучитьУчетнуюЗаписьПоНашейХСИЛИПлощадке(ХСGUID=Неопределено,ПлощадкаGUID=Неопределено)
	
	Если ЗначениеЗаполнено(ХСGUID) тогда
		НайденнаяУчетнаяЗапись = КэшУчетныхЗаписей().Найти(ХСGUID,"IssuerID");
		Если НайденнаяУчетнаяЗапись<>Неопределено тогда
			Возврат НайденнаяУчетнаяЗапись;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПлощадкаGUID) тогда
		НайденнаяУчетнаяЗапись = КэшУчетныхЗаписей().Найти(ПлощадкаGUID,"ПлощадкаGUID");
		Если НайденнаяУчетнаяЗапись<>Неопределено тогда
			Возврат НайденнаяУчетнаяЗапись;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПараметрыПодключенияМеркурий(ХСGUID=Неопределено, ПлощадкаGUID=Неопределено, ВерсияAPI=Неопределено, ЗНАЧ ПроверятьДоступПоХСПлощадке=Ложь) Экспорт
	
	Если ПроверятьДоступПоХСПлощадке = Истина 
		И ИспользуетсяРазграничениеПрав() <> Истина Тогда 
		ПроверятьДоступПоХСПлощадке = Ложь;
	КонецЕсли;
	
	Если ВерсияAPI = Неопределено Тогда 
		ВерсияAPI = "14";
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура();
	ПараметрыПодключения.Вставить("ВерсияAPI",  		ВерсияAPI);  //Пока кажется что можно зафиксировать здесь
	ListOptions = ПолучитьListOptionsXDTO(КорневаяФабрика());
	Если ВерсияAPI = "14" Тогда 
		Пользователь = ПолучитьОбъектXDTOМеркурий("АргусОбщие","User",ВерсияAPI);
	Иначе
		Пользователь = ПолучитьОбъектXDTOМеркурий("ВетДокумент","User",ВерсияAPI);
	КонецЕсли;
	serviceId = ПолучитьКонстантуEDI("М_serviceId");
	Если Не ЗначениеЗаполнено(serviceId) Тогда
		serviceId = "mercury-g2b.service";
	КонецЕсли;
	ПараметрыПодключения.Вставить("serviceId", 		serviceId+?(ВерсияAPI = "20",":2.0",""));
	ПараметрыПодключения.Вставить("адрес", 			?(ПолучитьКонстантуEDI("М_ИспользуетсяТестовыйAPI"),ПолучитьКонстантуEDI("М_АдресТестовогоAPI"),ПолучитьКонстантуEDI("М_АдресAPI"))); //предусмотреть переключатель на боевой
	ПараметрыПодключения.Вставить("ListOptions", 	ListOptions);
	Если ПолучитьКонстантуEDI("М_ИспользуетсяТестовыйAPI") = Истина Тогда
		ПараметрыПодключения.Вставить("порт", 			8002);
	Иначе
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ХСGUID)
		ИЛИ ЗначениеЗаполнено(ПлощадкаGUID) Тогда
		ПодходящаяУчетка = ПолучитьУчетнуюЗаписьПоНашейХСИЛИПлощадке(ХСGUID,ПлощадкаGUID);
		Если ПодходящаяУчетка<>неопределено Тогда
			
			Если ПроверятьДоступПоХСПлощадке = Истина Тогда
				СтруктураДоступа = ПроверитьДоступПользователя(ХСGUID, ПлощадкаGUID);
				ПараметрыПодключения.Вставить("ЕстьДоступ", СтруктураДоступа.ЕстьДоступ);
				ПараметрыПодключения.Вставить("СообщениеДоступа", СтруктураДоступа.Сообщение);
				Пользователь.login = ?(ЗначениеЗаполнено(СтруктураДоступа.ЛогинМеркурий), СтруктураДоступа.ЛогинМеркурий,  ПодходящаяУчетка.ЛогинПользователя);
			Иначе
				ПараметрыПодключения.Вставить("ЕстьДоступ", Истина);
				ПараметрыПодключения.Вставить("СообщениеДоступа", "");
				Пользователь.login = ПодходящаяУчетка.ЛогинПользователя;
			КонецЕсли;
			
			ПараметрыПодключения.Вставить("apiKey",  		ПодходящаяУчетка.APIKey);
			ПараметрыПодключения.Вставить("логин", 			ПодходящаяУчетка.ЛогинAPI);
			ПараметрыПодключения.Вставить("пароль", 		ПодходящаяУчетка.ПарольAPI);
			ПараметрыПодключения.Вставить("user", 			Пользователь);
			ПараметрыПодключения.Вставить("issuerId", 		ПодходящаяУчетка.IssuerId);
			
			Возврат(ПараметрыПодключения);
				
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПодключения.Вставить("ЕстьДоступ", Истина);//для дефолтной учетки считаем что есть 
	ПараметрыПодключения.Вставить("СообщениеДоступа", "");
	Пользователь.login = ПолучитьКонстантуEDI("М_ЛогинПользователя"); 
	ПараметрыПодключения.Вставить("apiKey",  		ПолучитьКонстантуEDI("М_КлючAPI"));
	ПараметрыПодключения.Вставить("логин", 			ПолучитьКонстантуEDI("М_ЛогинAPI"));
	ПараметрыПодключения.Вставить("пароль", 		ПолучитьКонстантуEDI("М_ПарольAPI"));
	ПараметрыПодключения.Вставить("user", 			Пользователь);
	ПараметрыПодключения.Вставить("issuerId", 		ПолучитьКонстантуEDI("М_issuerId"));
	Возврат(ПараметрыПодключения);
	
КонецФункции

Функция ПолучитьListOptionsXDTO(ФабрикаXDTO) Экспорт
	
	ListOptions = ПолучитьОбъектXDTOМеркурий("Общие", "ListOptions");
	ListOptions.count = 1000;
	Возврат(ListOptions);
	
КонецФункции

Функция ВыполнитьЗапросМеркурийApplication(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения, ПараметрыФункцииНаименование = "", ДождатьсяРезультата = Ложь,ВернутьapplicationId = Неопределено) Экспорт
	
	Если ПараметрыФункцииНаименование = "" Тогда
		ПараметрыФункцииНаименование = ПараметрыФункции.Наименование;
	КонецЕсли;
	
	EnvelopeDO = Неопределено;
	
	//у нас будет несколько запросов на 1 сообщение
	ВСДUUID="";
	Если Параметрыфункции.Свойство("ВСДUUID") И ЗначениеЗаполнено(ПараметрыФункции.ВСДUUID) Тогда
		ВСДUUID = ПараметрыФункции.ВСДUUID;
	    ПараметрыФункции.localTransactionId = ПараметрыФункции.localTransactionId+ "_ВСД_"+ВСДUUID;
	КонецЕсли;
	ТекстЗапроса = ПодготовитьТелоЗапросаМеркурий(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения, ПараметрыФункцииНаименование, EnvelopeDO);	
	
	Если ПараметрыФункции.localTransactionId = "IncomingRobot" Тогда
		//зарезервировано для транзакций, не требующих сохранение в справочнике (например запрос списка входящих элВСД)
	Иначе
		ЗаписатьТекстЗапросаМеркурий(ПараметрыФункции.localTransactionId, ТекстЗапроса,ВСДUUID);
	КонецЕсли;
	
	Возврат ОтправитьЗапросМеркурийСАнализомОтвета(ТекстЗапроса, ПараметрыПодключения, ФабрикаXD, EnvelopeDO, ПараметрыФункции.localTransactionId, ДождатьсяРезультата,ВернутьapplicationId);	
		
КонецФункции

Функция ПодготовитьТелоЗапросаМеркурий(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения, ПараметрыФункцииНаименование = "", EnvelopeDO = Неопределено) Экспорт
	
	ВерсияAPI = "14";
	Если  ПараметрыПодключения.Свойство("ВерсияAPI") И ЗначениеЗаполнено(ПараметрыПодключения.ВерсияAPI) Тогда
		ВерсияAPI = ПараметрыПодключения.ВерсияAPI;
	КонецЕсли;
	
	Если ВерсияAPI = "14" Тогда //1.4
		URIПространстваИменMERCapp = "http://api.vetrf.ru/schema/cdm/mercury/applications";
	ИначеЕсли ВерсияAPI = "20" Тогда //2.х
		URIПространстваИменMERCapp = "http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2";
	Иначе
		ВызватьИсключение "Не знаю такую версию API: "+ВерсияAPI;
	КонецЕсли;
	ФабрикаXD = КорневаяФабрика(ВерсияAPI);
	
	mercuryApplicationsФункция = ФабрикаXD.Создать(URIПространстваИменMERCapp, ПараметрыФункцииНаименование); 
	
	ЗаполнитьЗначенияСвойств(mercuryApplicationsФункция, ПараметрыФункции);
	
	МассивСписков = Неопределено;
	Если ПараметрыФункции.Свойство("МассивСписков", МассивСписков) Тогда
		Для Каждого НазваниеСписка из МассивСписков Цикл
			ТекСписок = Неопределено;
			Если ПараметрыФункции.Свойство(НазваниеСписка, ТекСписок) Тогда
				Для Каждого ЭлементСписка из ТекСписок Цикл
					mercuryApplicationsФункция[НазваниеСписка].Добавить(ЭлементСписка.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ApplicationDataWrapper 	= ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/application", "ApplicationDataWrapper");
	ApplicationDataWrapper.Добавить(ФормаXML.Элемент, 
									mercuryApplicationsФункция.Тип().URIПространстваИмен, 
									СпасибоMercuryApplicationsЗаЧувствительностькРегистру(ПараметрыФункцииНаименование), 
									mercuryApplicationsФункция);

	Application = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/application", "Application");
	Application.serviceId 	= ПараметрыПодключения.serviceId;
    Application.issuerId	= ПараметрыПодключения.issuerId;
	Application.issueDate	= ТекущаяДата();
	Application.data = ApplicationDataWrapper;
	
	SubmitRequestDO = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/application/ws-definitions", "submitApplicationRequest"); 
	SubmitRequestDO.apiKey 		= ПараметрыПодключения.apiKey;
	SubmitRequestDO.Application = Application;
	
	
	EnvelopeDO = ФабрикаXD.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
	EnvelopeDO.Body = ФабрикаXD.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Body");	
	EnvelopeDO.Body.Добавить(ФормаXML.Элемент, SubmitRequestDO.Тип().URIПространстваИмен, "submitApplicationRequest", SubmitRequestDO); 
	
	ТелоXML = Новый ЗаписьXML;  
	ТелоXML.УстановитьСтроку("UTF-8");  
	ФабрикаXD.ЗаписатьXML(ТелоXML, EnvelopeDO);  
	ТекстЗапроса = ТелоXML.Закрыть();
	
	Возврат ТекстЗапроса;

КонецФункции // ПодготовитьТелоЗапросаМеркурий()


Функция СпасибоMercuryApplicationsЗаЧувствительностькРегистру(ПараметрыФункцииНаименование)
	//Ребята познали сущность боли
	
	Возврат ""+НРЕГ(Лев(СокрЛП(ПараметрыФункцииНаименование),1))+Сред(СокрЛП(ПараметрыФункцииНаименование),2);
	

КонецФункции // СпасибоMercuryApplicationsЗаЧувствительностькРегистру(ПараметрыФункцииНаименование)()

Функция ОтрапортоватьСкоростьОбработкиЗаявки(ТекДатаЗапроса,ТекДатаОтработкиЗаявки,ПредметИсследования=неопределено)
	
	Если ПредметИсследования=неопределено Тогда 
		ПредметИсследования="выполнил";
	КонецЕсли;
	
	Если ВыводитьСкоростьРаботыСервераМеркурий = Истина Тогда
		РазницаСек = (ТекДатаОтработкиЗаявки - ТекДатаЗапроса)/1000; 
		Сообщить("ApplicationManagementService "+ПредметИсследования+" заявку за: "+РазницаСек+" сек.")
	КонецЕсли;
	
КонецФункции

Функция ОтправитьЗапросМеркурийСАнализомОтвета(Строка, ПараметрыПодключения, КорневаяФабрика, EnvelopeDO = Неопределено, КодСообщения = Неопределено, ДождатьсяРезультата=Ложь,ВернутьapplicationId = Неопределено) Экспорт
	
	//--------------------------------------- Инициализация ---------------------------------------
	ВерсияAPI = "14";
	Если ПараметрыПодключения <> Неопределено и ПараметрыПодключения.Свойство("ВерсияAPI") И ЗначениеЗаполнено(ПараметрыПодключения.ВерсияAPI) Тогда
		ВерсияAPI = ПараметрыПодключения.ВерсияAPI;
	КонецЕсли;
	Если ПараметрыПодключения <> Неопределено и ПараметрыПодключения.Свойство("ЕстьДоступ") и НЕ ПараметрыПодключения.ЕстьДоступ Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если КодСообщения = "IncomingRobot" Тогда
		//зарезервировано для транзакций, не требующих сохранение в справочнике (например запрос списка входящих элВСД или закрытие незавершенной транзакции)
	Иначе
		СообщениеСсылка = ПолучитьСообщениеСсылкаМеркурий(КодСообщения);
	КонецЕсли;
	Если EnvelopeDO = Неопределено Тогда
		EnvelopeDO = КорневаяФабрика(ВерсияAPI).Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
	КонецЕсли;
	
	//--------------------------------------- Отправка ---------------------------------------
	ИмяФайлаЗапроса=ПолучитьИмяВременногоФайла();
	ИмяФайлаОтвета=ПолучитьИмяВременногоФайла();
	ТД=Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Строка);
	ТД.Записать(ИмяФайлаЗапроса,КодировкаТекста.UTF8);//,КодировкаТекста.UTF8);
	
	Если ПолучитьКонстантуEDI("М_ИспользуетсяТестовыйAPI") = Ложь ТОгда
		СоединениеWeb = Новый HTTPСоединение(ПараметрыПодключения.Адрес, , ПараметрыПодключения.Логин, ПараметрыПодключения.Пароль,,ИспользуемыйТаймаут,Новый ЗащищенноеСоединениеOpenSSL);  
	Иначе	
		СоединениеWeb = Новый HTTPСоединение(ПараметрыПодключения.Адрес, ПараметрыПодключения.Порт, ПараметрыПодключения.Логин, ПараметрыПодключения.Пароль,,ИспользуемыйТаймаут,Новый ЗащищенноеСоединениеOpenSSL);  
	КонецЕсли;
	
	Попытка
		ТекДатаЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			Если ВерсияAPI = "14" Тогда
				СоединениеWeb.ОтправитьДляОбработки(ИмяФайлаЗапроса,"platform/services/ApplicationManagementService",ИмяФайлаОтвета);
			Иначе
				СоединениеWeb.ОтправитьДляОбработки(ИмяФайлаЗапроса,"platform/services/2.0/ApplicationManagementService",ИмяФайлаОтвета);
			КонецЕсли;
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		ТекДатаОтвета = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОтрапортоватьСкоростьОбработкиЗаявки(ТекДатаЗапроса,ТекДатаОтвета, "получил");
		
		УдалитьФайлы(ИмяФайлаЗапроса);
		ТД=Новый ТекстовыйДокумент;
		ТД.Прочитать(ИмяФайлаОтвета,КодировкаТекста.UTF8);//,КодировкаТекста.UTF8);
		ОтветWeb=ТД.ПолучитьТекст();
		УдалитьФайлы(ИмяФайлаОтвета);
	Исключение
		ТекстОшибки = "Ошибка при отправке запроса: "+ОписаниеОшибки();
		
		Если КодСообщения <> "IncomingRobot" Тогда
			ЗаписатьТекстОтветаМеркурий(КодСообщения, ТекстОшибки);
			УстановитьСтатусОшибкаСообщенияМеркурий(СообщениеСсылка);		
		КонецЕсли;
		
		Если Найти(ТекстОшибки,"Timeout was reached") <> 0 Тогда 
			Сообщить("Не удается отправить запрос - срабатывает таймаут. ("+ИспользуемыйТаймаут+" сек.) Попробуйте выполнить запрос еще раз или проверить настройки реквизитов сервера.");		
		ИначеЕсли Найти(ТекстОшибки,"APPL01012") <> 0 Тогда 
			Сообщить("Не удается отправить запрос - неверный APIKEY. Проверьте правильность ключа API в настройках учетной записи или (если учетны записи не введены)в настройках.");		
			Сообщить(ТекстОшибки);		
		КонецЕсли;
		
		Возврат(""); 
	КонецПопытки;
	
	//--------------------------------------- Смотрим ответ на синхронную часть ---------------------------------------
	ОтветXML = Новый ЧтениеXML;  
	ОтветXML.УстановитьСтроку(ОтветWeb);  
	MercAppDO = КорневаяФабрика(ВерсияAPI).ПрочитатьXML(ОтветXML, EnvelopeDO.Тип()).Body.submitApplicationResponse.application;  
	
	// ACCEPTED    принята.        //основной ответ
	
	// REJECTED    отклонена.      //с вероятностью близкой к 100% - мы никогда не получим эти ответы сразу
	// IN_PROCESS  обрабатывается.  
	// COMPLETED   успешно обработана.  
	Если MercAppDO.status = "REJECTED" ИЛИ
		(MercAppDO.status <> "ACCEPTED" 
		И MercAppDO.status <> "IN_PROCESS" 
		И MercAppDO.status <> "COMPLETED")
		Тогда 
		ТекстОшибки = "Запрос вернулся со статусом " + MercAppDO.status;
		ЗаписатьТекстОтветаМеркурий(MercAppDO.applicationId, ТекстОшибки);
		Сообщить(ТекстОшибки);
		УстановитьСтатусОшибкаСообщенияМеркурий(СообщениеСсылка);		
		
		Возврат("");
		
	КонецЕсли;
	
	Если ВернутьapplicationId<>Неопределено Тогда 
		ВернутьapplicationId = MercAppDO.applicationId;
	КонецЕсли;
	
	//---------------------------- Запомним выданный taskID (applicationID) для прикладных транзакций ----------------------------
	Если КодСообщения <> "IncomingRobot" Тогда
		ЗаписатьApplicationIdСообщенияМеркурий(СообщениеСсылка,MercAppDO.applicationId); //по этому идентификатору в будущем ходить - проверять
		Если MercAppDO.status = "ACCEPTED"
			ИЛИ MercAppDO.status = "IN_PROCESS" 
			ИЛИ MercAppDO.status = "COMPLETED" Тогда
			УстановитьСтатусСообщенияМеркурийПоСтатусуapplicationId(СообщениеСсылка,MercAppDO.applicationId,"Обрабатывается");
		КонецЕсли;
	КонецЕсли;
	
	//------------------------------------- Когда важно знать результат обработки сразу -------------------------------------
	Если ДождатьсяРезультата = Истина Тогда
		Если КодСообщения <> "IncomingRobot" Тогда
			
			Для й=1 По 20 Цикл //20 попыток - эквивалентно примерно 10 сек. Отбивка на случай если серверу совсем плохо
				//Это прикладная транзакция, ответа на которую требуется дождаться здесь и сейчас (например это пакетная отправка и стоит галка дожидаться)
				РезультирующийСтатус = ПроверитьОбновленияСтатусаЗаявки(MercAppDO.applicationId, ПараметрыПодключения);
				Если РезультирующийСтатус = "REJECTED"
					ИЛИ РезультирующийСтатус = "COMPLETED"
					ИЛИ РезультирующийСтатус = "ОшибкаПроверки" Тогда
					Если ДождатьсяРезультата = Истина И ВыводитьСкоростьРаботыСервераМеркурий = Истина И (РезультирующийСтатус = "REJECTED" ИЛИ РезультирующийСтатус = "COMPLETED") Тогда
						ОтрапортоватьСкоростьОбработкиЗаявки(ТекДатаЗапроса,ТекущаяУниверсальнаяДатаВМиллисекундах());
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе //НЕ прикладная транзакция (например актуализация стока или инвентаризация
			ОсновнойМодуль.Состояние_КонтурEDI(?(Значениезаполнено(КодСообщения),"Дожидаюсь ответа на запрос по сообщению: "+КодСообщения,"Ожидаю ответ Меркурия на служебный запрос. Проверил в: "+текущаяДата()));
			//тогда необходимо сразу вернуть результат в виде ответа XDTO
			applicationId = MercAppDO.applicationId;
			Пока Истина Цикл //сколько попыток сделать?
				MercAppDO = ЗапроситьРезультатОбработкиЗаявкиМеркурий(applicationId,ПараметрыПодключения,ДождатьсяРезультата);
				
				Если ДождатьсяРезультата = Истина И ВыводитьСкоростьРаботыСервераМеркурий = Истина И (MercAppDO.Status = "REJECTED" ИЛИ MercAppDO.Status = "COMPLETED") Тогда
					ОтрапортоватьСкоростьОбработкиЗаявки(ТекДатаЗапроса,ТекущаяУниверсальнаяДатаВМиллисекундах());
				КонецЕсли;
				
				Если MercAppDO.Status = "REJECTED" Тогда
					//Сообщим об ошибках
					Для Каждого Ошибка Из MercAppDO.errors.error Цикл
						Сообщить("Заявка "+applicationId+" отклонена: "+Ошибка.code+Ошибка.__content)
					КонецЦикла;
					Возврат Неопределено;
					Прервать;
				ИначеЕсли MercAppDO.Status = "COMPLETED" Тогда
					Возврат MercAppDO;
					Прервать;
				КонецЕсли;			
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	

КонецФункции // ВыполнитьЗапрос()

Функция ЗапроситьРезультатОбработкиЗаявкиМеркурий(applicationId,ПараметрыПодключения=Неопределено,ДождатьсяРезультата=Ложь)
	
	ВерсияAPI = "14";
	Если  ПараметрыПодключения.Свойство("ВерсияAPI") И ЗначениеЗаполнено(ПараметрыПодключения.ВерсияAPI) Тогда
		ВерсияAPI = ПараметрыПодключения.ВерсияAPI;
	КонецЕсли;
	
	Прокси = ПолучитьWSПроксиApplicationManagementsService(ВерсияAPI);
	
	Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
	Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");	
	
	ТипWSПараметраAPIKey = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/application").Получить("APIKey");
	
	Если ПараметрыПодключения <> Неопределено Тогда
		ТекКлючАПИ = ПараметрыПодключения.apiKey;
		ТекissuerId = ПараметрыПодключения.issuerId;
	Иначе
		ТекКлючАПИ = ПолучитьКонстантуEDI("М_КлючAPI");
		ТекissuerId = ПолучитьКонстантуEDI("М_issuerId");
	КонецЕсли;
	
	ТекДатаЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
		///////////////////////////////////////////////////////////////////////////////////
		Попытка
			MercAppDO = Прокси.receiveApplicationResult(ТекКлючАПИ, ТекissuerId, applicationId);
		Исключение
			Сообщить("Не удалось запросить результат обработки заявки по причине: "+ОписаниеОшибки()+ " возможно заявка уже устарела или Вы пробуете получить результат под неподходящей учетной записью.");
			Возврат Неопределено;
		КонецПопытки;
		///////////////////////////////////////////////////////////////////////////////////
	ЗаписьXMLДляОригинальногоТекста = Новый ЗаписьXML;	
	ЗаписьXMLДляОригинальногоТекста.УстановитьСтроку("UTF-8");  
	Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXMLДляОригинальногоТекста , MercAppDO);
	ОригинальныйТекст = ЗаписьXMLДляОригинальногоТекста.Закрыть();
		
	ОсновнойМодуль.Состояние_КонтурEDI("Дожидаюсь ответа на запрос по сообщению: Ожидаю ответ Меркурия на служебный запрос. Проверил в: "+текущаяДата());
	ТекДатаОтвета = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ДождатьсяРезультата = Ложь И ВыводитьСкоростьРаботыСервераМеркурий = Истина Тогда
		ОтрапортоватьСкоростьОбработкиЗаявки(ТекДатаЗапроса,ТекДатаОтвета,"отдал ответ на")		
	КонецЕсли;
	Возврат MercAppDO;	
	
	
	
	////старый механизм
	
	//ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий();
	//
	//EnvelopeDO = КорневаяФабрика().Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
	//
	//СоединениеWeb = Новый HTTPСоединение(ПараметрыПодключения.Адрес, ПараметрыПодключения.Порт, ПараметрыПодключения.Логин, ПараметрыПодключения.Пароль,,Истина);
	//
	//
	//Если НЕ ЗначениеЗаполнено(applicationId) Тогда
	//	Возврат неопределено;
	//КонецЕсли;
	//
	//receiveRequestDO = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/application/ws-definitions", "receiveApplicationResultRequest");
	//receiveRequestDO.apiKey			= ПараметрыПодключения.apiKey;
	//receiveRequestDO.issuerID 		= ПараметрыПодключения.issuerID;
	//
	//receiveRequestDO.applicationId 	= applicationId;
	//	
	//EnvelopeDO.Body = КорневаяФабрика.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Body");	
	//EnvelopeDO.Body.Добавить(ФормаXML.Элемент, receiveRequestDO.Тип().URIПространстваИмен, "receiveApplicationResultRequest", receiveRequestDO);
	//
	//ТелоXML = Новый ЗаписьXML;  
	//ТелоXML.УстановитьСтроку("UTF-8");  
	//КорневаяФабрика.ЗаписатьXML(ТелоXML, EnvelopeDO);  
	//Строка = ТелоXML.Закрыть();
	//
	//ЗапросWeb = Новый HTTPЗапрос("platform/services/ApplicationManagementService");  
	//ЗапросWeb.УстановитьТелоИзСтроки(Строка);
	//
	//HTTPОтвет = СоединениеWeb.ОтправитьДляОбработки(ЗапросWeb);
	//ТекстXML = HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
	//
	//ОтветXML = Новый ЧтениеXML;  
	//ОтветXML.УстановитьСтроку(ТекстXML);

	//MercAppDO = КорневаяФабрика().ПрочитатьXML(ОтветXML, EnvelopeDO.Тип());  
	//
	//Возврат MercAppDO;
	
КонецФункции

Функция ПроверитьОбновленияСтатусаЗаявки(applicationId, ПараметрыПодключения = Неопределено)
	
	Попытка
		MercAppDO = ЗапроситьРезультатОбработкиЗаявкиМеркурий(applicationId,ПараметрыПодключения);
		
		// ACCEPTED    принята.       
		// REJECTED    отклонена.      
		// IN_PROCESS  обрабатывается.  
		// COMPLETED   успешно обработана.
		
		Если MercAppDO.Status = "ACCEPTED" 
			ИЛИ MercAppDO.Status = "IN_PROCESS"
			Тогда
			
			УстановитьСтатусСообщенияМеркурийПоСтатусуapplicationId(,applicationId,"Обрабатывается");
			
		ИначеЕсли MercAppDO.Status = "REJECTED" Тогда
			
			УстановитьСтатусСообщенияМеркурийПоСтатусуapplicationId(,applicationId,"Ошибка");
			
			//ОтветСтрока = ОтветWeb.ПолучитьТелоКакСтроку("UTF-8");
			ТекстОшибок ="";
			Для Каждого Ошибка Из MercAppDO.errors.error Цикл
				ТекстОшибок = ТекстОшибок + ВычислитьXDTO(Ошибка,"code") +" "+  ВычислитьXDTO(Ошибка,"__content") +Символы.ПС;
			КонецЦикла;
			
			ЗаписатьОтветМеркурий(applicationId, Строка(MercAppDO.Status), ТекстОшибок);
			
		ИначеЕсли MercAppDO.Status = "COMPLETED" Тогда
			
			ЗапомнитьНомераВСД(applicationId, MercAppDO);
			УстановитьСтатусСообщенияМеркурийПоСтатусуapplicationId(,applicationId,"Выполнен");
			ЗаписатьОтветМеркурий(applicationId, Строка(MercAppDO.Status));
			
		КонецЕсли;
		
		Возврат MercAppDO.Status;
		
	Исключение
		Возврат "ОшибкаПроверки";
	КонецПопытки;
	
КонецФункции

Процедура ЗапомнитьНомераВСД(applicationId, MercAppDO)
	
	//взять сообщение, найти там строки и проставить туда номера и uuid + оформленного ВСД
	СообщениеМеркурийСсылка = ПолучитьСообщениеМеркурийПоapplicationId(applicationId);
	
	Если СообщениеМеркурийСсылка<>Неопределено Тогда
		Если СообщениеМеркурийСсылка.ТипСообщения = "M_PRD" Тогда
			СтрокиВСДXDTO = ВычислитьXDTO(MercAppDO,"result.registerProductiveBatchResponse.vetDocument");
		ИначеЕсли СообщениеМеркурийСсылка.ТипСообщения = "M_MOV" ИЛИ СообщениеМеркурийСсылка.ТипСообщения = "M_DES" Тогда
			Если ИспользуемаяВерсияAPI() = "20" Тогда 
				СтрокиВСДXDTO = ВычислитьXDTO(MercAppDO,"result.PrepareOutgoingConsignmentResponse.vetDocument");
			Иначе
				СтрокиВСДXDTO = ВычислитьXDTO(MercAppDO,"result.PrepareOutcomingConsignmentResponse.vetDocument");
			КонецЕсли;
		ИначеЕсли СообщениеМеркурийСсылка.ТипСообщения = "M_REC" Тогда
			СтрокиВСДXDTO = ВычислитьXDTO(MercAppDO,"result.processIncomingConsignmentResponse.vetDocument");
		КонецЕсли;
		Если СтрокиВСДXDTO <> Неопределено Тогда
			
			//прочитаем товары из полученного ВСД, сопоставим их с исходными товарами и проставим номера ВСД в исходное сообщений
			СообщениеСВходящимиВСД = ПолучитьСообщениеВходящейТТН(); //просто пустое сообщение
			
			Если ИспользуемаяВерсияAPI() = "20" И (СообщениеМеркурийСсылка.ТипСообщения = "M_MOV" ИЛИ СообщениеМеркурийСсылка.ТипСообщения = "M_DES")Тогда 
				ЗаполнитьСообщениеВходящегоВСД_20(СообщениеСВходящимиВСД,СтрокиВСДXDTO,СообщениеМеркурийСсылка.ТипСообщения);
			Иначе
				ЗаполнитьСообщениеВходящегоВСД(СообщениеСВходящимиВСД,СтрокиВСДXDTO,СообщениеМеркурийСсылка.ТипСообщения);
			КонецЕсли;
			
			ТоварыПоВСД = СообщениеСВходящимиВСД.Товары;
			
			//КонвертироватьТабличнуюЧастьТранзакцииМеркурийв1С(ВходящееСообщение,"Товары");  //кажется что конвертировать не надо т.к. можно случайно сконвертировать иначе чем было 
			
			ИсходноеСообщение = ОсновнойМодуль.ПрочитатьСообщение(СообщениеМеркурийСсылка);
			
			Если ТипЗНЧ(ИсходноеСообщение) = Тип("Структура") Тогда
				РезультатСопоставления = СопоставитьСозданныеВСДСоСтрокамиТранзакции(ИсходноеСообщение.Товары,ТоварыПоВСД,СообщениеМеркурийСсылка.ТипСообщения);
				
				Если РезультатСопоставления.ТаблицаОшибок.Количество() < ИсходноеСообщение.Товары.Количество() Тогда
					//что-то было разнесено
					//сохраним сообщение
					СообщениеОбъект = СообщениеМеркурийСсылка.ПолучитьОбъект();
					СообщениеОбъект.Хранилище = Новый ХранилищеЗначения(ИсходноеСообщение,Новый СжатиеДанных(9));
					СообщениеОбъект.Записать();
				КонецЕсли;
				
				Если  РезультатСопоставления.Успешно = Ложь Тогда
					Сообщить("Не смог сопоставить пришедшие всд со строками исходного сообщения:");
					Для Каждого Ошибка ИЗ РезультатСопоставления.ТаблицаОшибок Цикл
						Сообщить(Ошибка.ТекстОшибки);
					КонецЦикла;
					
				КонецЕсли; //успешно проставили ВСД
				
			КонецЕсли; //удалось прочитать исходное сообщение
		КонецЕсли;//есть строки ВСД XDTO
		
	КонецЕсли;//нашли ссылку сообщения
	
КонецПроцедуры

Функция СопоставитьСозданныеВСДСоСтрокамиТранзакции(ТоварыИсходные,ТоварыПоВСД,ТипСообщения)
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	Для каждого СтрокаСозданнойВСД Из ТоварыПоВСД Цикл
		
		Если СтрокаСозданнойВСД.Статус <> "CONFIRMED" 
			И СтрокаСозданнойВСД.Статус <> "UTILIZED"
			Тогда //только ВСД на подтверждение
			Продолжить;
		КонецЕсли;
		
		Отбор = СоздатьОтборПоискаПоСозданномуВСД(СтрокаСозданнойВСД,ТипСообщения);
		НайденныеСтрокиИсходногоСообщения = ТоварыИсходные.НайтиСтроки(Отбор);
		
		Если НайденныеСтрокиИсходногоСообщения.Количество() = 0 Тогда
			НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
			Новаяошибка.ТекстОшибки = "Не найдена строка товаров для ВСД: "+СтрокаСозданнойВСД.ВетСертификатUUID;
			//ИначеЕсли НайденныеСтрокиИсходногоСообщения.Количество() > 1 Тогда
			//НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
			//Новаяошибка.ТексОшибки = "Найдено более 1 строки товаров для ВСД: "+СтрокаСозданнойВСД.ВетСертификатUUID;
		Иначе
			ХотьЧтоТоРазнесли = Истина;
			    ИстиннаяСтрока=НайденныеСтрокиИсходногоСообщения[0];
				ИстиннаяСтрока.ВетСертификатUUID = СтрокаСозданнойВСД.ВетСертификатUUID;
				ИстиннаяСтрока.ВетСертификатДата = СтрокаСозданнойВСД.ВетСертификатДата;
				ИстиннаяСтрока.ВетСертификатНомер = СтрокаСозданнойВСД.ВетСертификатНомер;
				ИстиннаяСтрока.Статус = СтрокаСозданнойВСД.Статус;
		КонецЕсли;
	КонецЦикла;                           
	
	//и надо проверить что разнеслись все строки
	Если ТипСообщения = "M_REC" Тогда
		//в сообщении M_REC идентификаторы ВСД приезжают по одному
	Иначе
		ОтборПустых = Новый Структура();
		ОтборПустых.Вставить("ВетСертификатUUID",""); 
		НайденыПустые = ТоварыИсходные.НайтиСтроки(ОтборПустых);
		Если НайденыПустые.количество()>0 ТОгда
			НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
			Новаяошибка.ТекстОшибки = "По сообщению получены идентификаторы ВСД не по всем строкам";
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.ТаблицаОшибок.Количество()=0 Тогда
		Результат.Успешно = Истина;
	Иначе
		Результат.Успешно = Ложь;
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

Функция СоздатьОтборПоискаПоСозданномуВСД(СтрокаСозданнойВСД,ТипСообщения)

		Отбор = Новый Структура();
		Отбор.Вставить("GUID",СтрокаСозданнойВСД.GUID);
		Отбор.Вставить("UnitUUID",СтрокаСозданнойВСД.UnitUUID);
		Отбор.Вставить("ДатаПроизводства",СтрокаСозданнойВСД.ДатаПроизводства);
		Отбор.Вставить("ДатаПроизводства2",СтрокаСозданнойВСД.ДатаПроизводства2);
		Отбор.Вставить("СрокГодности",СтрокаСозданнойВСД.СрокГодности);
		Отбор.Вставить("СрокГодности2",СтрокаСозданнойВСД.СрокГодности2);
		Отбор.Вставить("Скоропортящаяся",СтрокаСозданнойВСД.Скоропортящаяся);
		Отбор.Вставить("Количество",СтрокаСозданнойВСД.Количество);
		//В версии 2.0 упаковки стали слишком абстрактными чтобы искать по ним
		//Отбор.Вставить("КоличествоУпаковок",СтрокаСозданнойВСД.КоличествоУпаковок);
		Если ЗначениеЗаполнено(СтрокаСозданнойВСД.КоличествоУпаковок) тогда
			Отбор.Вставить("ЕдиницаИзмеренияУпаковокUUID",?(СтрокаСозданнойВСД.ЕдиницаИзмеренияУпаковокUUID=Неопределено,"",СтрокаСозданнойВСД.ЕдиницаИзмеренияУпаковокUUID));
		КонецЕсли;
		
		Если ТипСообщения = "M_PRD" ИЛИ ТипСообщения = "M_DES" ИЛИ ТипСообщения = "M_MOV" ТОгда
			//Для Производства не надо сравнивать эти 2 поля а для перевозок - в исходном сообщении они могут отсутствовать.
		Иначе
			Если ЗначениеЗаполнено(СтрокаСозданнойВСД.Маркировка) Тогда
				Отбор.Вставить("Маркировка",СтрокаСозданнойВСД.Маркировка);
			КонецЕсли;
			Отбор.Вставить("ПлощадкаПроизводительGUID",СтрокаСозданнойВСД.ПлощадкаПроизводительGUID);
			Отбор.Вставить("СтранаUUID",СтрокаСозданнойВСД.СтранаUUID);   //- разобраться почему в сохраненном сообщении нет СтранаUUID
		КонецЕсли;
		
		Отбор.Вставить("ВетСертификатUUID","");      //нам нужны те строки где еще нет сертификата - ох, если будут одинаковые строки с последующей отгрузкой на РЦ с последующим развозом в магазины....... то вроде все ок, гасить то их все равно будут на самом RC
		
		Возврат Отбор;
		
КонецФункции // СоздатьОтборПоискаПоСозданномуВСД()


Процедура ЗаписатьОтветМеркурий(ЗНАЧ applicationId, ТекстОтвета,ТекстОшибок="") Экспорт    //объединить с ЗаписатьТекстЗапросаМеркурий
	
	СообщениеСсылка = ПолучитьСообщениеМеркурийПоapplicationId(applicationId);
	Если СообщениеСсылка = Неопределено
		Тогда Возврат;
	КонецЕсли;
	
	СообщениеОбъект = СообщениеСсылка.получитьОбъект();
	
	Если СообщениеОбъект = Неопределено 
		Тогда 
		Возврат;
	Иначе
		
		Если Не ТекстОшибок="" Тогда
			СообщениеОбъект.ОписаниеОшибки = ТекстОшибок;
		КонецЕсли;
		
		ЗаписатьРеквизитСообщенияМеркурий("Ответ_"+applicationId,ТекстОтвета,,СообщениеОбъект,ложь);
		
		//ЗаписьЗапроса=СообщениеОбъект.ДополнительныеРеквизиты.Добавить();
		//
		//ЗаписьЗапроса.ИмяРеквизита = "Ответ_"+applicationId;
		//ЗаписьЗапроса.ЗначениеСтрока = ТекстОтвета;
		//
		//
		СообщениеОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

//Работа со справочником Сообщений

Функция СоздатьСообщениеМеркурий(Сообщение,Статус=Неопределено) Экспорт
	
	СообщениеОбъект = Справочники.КонтурEDI_Сообщения.СоздатьЭлемент();
	
	ЗаполнитьРеквизитыОбъектаСообщенияИзСтруктурыМеркурий(СообщениеОбъект,Сообщение);
	
	МассивВСД = Сообщение.Товары.ВыгрузитьКолонку("ВетСертификатUUID");
	
	Если Сообщение.ТипСообщения = "M_INC" Тогда //пометим UUID входящих электронных ВСД
		ПрисвоитьМассивВСД_в_СообщениеОбъект(МассивВСД,СообщениеОбъект);
	КонецЕсли;
	
	СообщениеОбъект.Записать();
	
	Сообщение.СообщениеСсылка = СообщениеОбъект.Ссылка;
	
	Возврат(СообщениеОбъект.Код);
	
КонецФункции

Функция ПропуститьСообщениеМеркурий(Сообщение) Экспорт
	
	Сообщение.Статус = "Пропущено";
	Если Сообщение.ТипСообщения = "M_INC" ИЛИ ЗначениеЗаполнено(Сообщение.СообщениеСсылка) Тогда 
		//сообщение уже есть
		СообщениеОбъект = Сообщение.СообщениеСсылка.ПолучитьОбъект();
		ЗаполнитьРеквизитыОбъектаСообщенияИзСтруктурыМеркурий(СообщениеОбъект,Сообщение);
		СообщениеОбъект.Записать();
	Иначе
		КодСообщения = СоздатьСообщениеМеркурий(Сообщение);
	КонецЕсли;
	
	//Ссылка = Сообщение.СообщениеСсылка;
	
КонецФункции // ПропуститтьСообщениеМеркурий()


Процедура ПрисвоитьМассивВСД_в_СообщениеОбъект(МассивВСДUUID,СообщениеОбъект)
	
	ИмяРеквизита 	= "вхВСД_UUID";
	Строки			= СообщениеОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("ИмяРеквизита",ИмяРеквизита));
	Для Каждого Стр Из Строки Цикл
		СообщениеОбъект.ДополнительныеРеквизиты.Удалить(Стр);
	КонецЦикла;
	
	Для Каждого ВСДUUID ИЗ МассивВСДUUID Цикл
		НовыйРеквизит 				= СообщениеОбъект.ДополнительныеРеквизиты.Добавить();
		НовыйРеквизит.ИмяРеквизита 	= ИмяРеквизита;
		НовыйРеквизит.Значение 		= ВСДUUID;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьРеквизитСообщенияМеркурий(ИмяРеквизита,Значение,СообщениеСсылка = Неопределено,СообщениеОбъект = Неопределено,ЗаписыватьВСправочник = Истина) Экспорт
	//чтобы точно нашлась когда потребуется - продублируем название на ЗаписатьРеквизитСообщенияМеркурий	
	УстановитьРеквизитСообщенияМеркурий(ИмяРеквизита,Значение,СообщениеСсылка,СообщениеОбъект,ЗаписыватьВСправочник);
	
КонецПроцедуры

Процедура УстановитьРеквизитСообщенияМеркурий(ИмяРеквизита,Значение,СообщениеСсылка = Неопределено,СообщениеОбъект = Неопределено,ЗаписыватьВСправочник = Истина) Экспорт
	
	Если СообщениеОбъект = Неопределено И СообщениеСсылка = Неопределено Тогда
		ВызватьИсключение "Необходимо передать сообщение ссылку или сообщение объект";
	КонецЕсли;
	
	Если СообщениеОбъект = Неопределено Тогда
		СообщениеОбъект = СообщениеСсылка.получитьобъект();
	КонецЕсли;
	
	НайденныйРеквизит = СообщениеОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("ИмяРеквизита",ИмяРеквизита));
	
	Если НайденныйРеквизит.Количество() = 0 тогда
		НовыйРеквизит = СообщениеОбъект.ДополнительныеРеквизиты.Добавить();
		НовыйРеквизит.ИмяРеквизита = ИмяРеквизита;
		НовыйРеквизит.Значение = Значение;
	Иначе
		ПервыйНайденныйРеквизит = НайденныйРеквизит[0];
		ПервыйНайденныйРеквизит.ИмяРеквизита = ИмяРеквизита;
		ПервыйНайденныйРеквизит.Значение = Значение;
	КонецЕсли;
	
	Если ЗаписыватьВСправочник = истина Тогда 
		СообщениеОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьРеквизитыОбъектаСообщенияИзСтруктурыМеркурий(СообщениеОбъект,СтруктураСообщения)

	Если Не ЗначениеЗаполнено(СтруктураСообщения.Статус) Тогда
		СообщениеОбъект.Статус = "ОжидаетОтправки";//статус по умолчанию для новых сообщений
	Иначе
		СообщениеОбъект.Статус = СтруктураСообщения.Статус;
	КонецЕсли;
	
	Если СообщениеОбъект.Статус = "Rejected" Тогда
		СообщениеОбъект.Статус = "Отклонен";//это единственный случай смены статуса, на будущее перенести в СохранитьОбъектСообщения.
	КонецЕсли;
	
	Если СтруктураСообщения.Статус = "Оформлен" И СтруктураСообщения.ТипСообщения = "M_INC" Тогда
		СообщениеОбъект.Направление = "Входящее";
		СообщениеОбъект.ТребуемоеДействие = "Погасить входящие ВСД";
	Иначе
		СообщениеОбъект.Направление = СтруктураСообщения.Направление;
	КонецЕсли;	
	
	//СообщениеОбъект.Контрагент = ?(СтруктураСообщения.ТипСообщения = "M_INC",СтруктураСообщения.ХозяйствующийСубъект1С,СтруктураСообщения.ХозяйствующийСубъектПолучатель1С);
	
	СообщениеОбъект.Организация = СтруктураСообщения.Организация;
	СообщениеОбъект.ТипСообщения = СтруктураСообщения.ТипСообщения;
	СообщениеОбъект.ДатаЗагрузки = ТекущаяДата();
	СообщениеОбъект.ДатаДокумента = СтруктураСообщения.ДокументEDI.Дата;
	СообщениеОбъект.ДатаПоставки = СтруктураСообщения.ДатаПоставки;
	
	//для того чтобы механизм вывода по периоду понял нас правильно - при сохранении не допустим пустых дат
	Если НЕ ЗначениеЗаполнено(СообщениеОбъект.ДатаДокумента) И ЗначениеЗаполнено(СообщениеОбъект.ДатаПоставки) Тогда 
		СообщениеОбъект.ДатаДокумента = СообщениеОбъект.ДатаПоставки;
	ИначеЕсли ЗначениеЗаполнено(СообщениеОбъект.ДатаДокумента) И НЕ ЗначениеЗаполнено(СообщениеОбъект.ДатаПоставки) Тогда 
		СообщениеОбъект.ДатаПоставки = СообщениеОбъект.ДатаДокумента;
	ИначеЕсли НЕ ЗначениеЗаполнено(СообщениеОбъект.ДатаДокумента) И НЕ ЗначениеЗаполнено(СообщениеОбъект.ДатаПоставки) Тогда 
		СообщениеОбъект.ДатаПоставки = ТекущаяДата(); 
		СообщениеОбъект.ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	СообщениеОбъект.НомерДокумента = СтруктураСообщения.ДокументEDI.Номер;
	
	СообщениеОбъект.Партнер = СтруктураСообщения.Партнер;
	СообщениеОбъект.Документ = СтруктураСообщения.ДокументСсылка;
	
	Если СтруктураСообщения.ТипСообщения = "M_INC" И СтруктураСообщения.ДокументEDI.Номер = "" Тогда
		Попытка
			СообщениеОбъект.ID = СтруктураСообщения.Товары[0].UUID;  //для входящих ВСД без Номера ТТН запишем в ID UUID
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	СообщениеОбъект.Хранилище = Новый ХранилищеЗначения(СтруктураСообщения,Новый СжатиеДанных(9));
	
	//СообщениеОбъект.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	
	//незавершенное Производство
	Если СообщениеОбъект.ТипСообщения = "M_PRD"
		И СообщениеОбъект.Статус = "ОжидаетОтправки"
		И СтруктураСообщения.Завершена = Ложь 
		И ЗначениеЗаполнено(СтруктураСообщения.ИдентификаторПроизводственнойТранзакции)
		Тогда
		ЗаписатьРеквизитСообщенияМеркурий("ИдентификаторПроизводственнойТранзакции",СтруктураСообщения.ИдентификаторПроизводственнойТранзакции,,СообщениеОбъект,ложь);
		ЗаписатьРеквизитСообщенияМеркурий("ТранзакцияЗавершена",Ложь,,СообщениеОбъект,ложь);
	КонецЕсли;
	
	Если СообщениеОбъект.Статус = "Пропущено" Тогда 
		СообщениеОбъект.ТребуемоеДействие = "Работа завершена";
		СообщениеОбъект.Архив = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьApplicationIdСообщенияМеркурий(СообщениеСсылка,applicationId)

	СообщениеМеркурийОбъект = СообщениеСсылка.ПолучитьОбъект();
	
	ЗаписатьРеквизитСообщенияМеркурий("applicationId",applicationId,,СообщениеМеркурийОбъект);

КонецПроцедуры

Процедура УстановитьСтатусОшибкаСообщенияМеркурий(СообщениеМеркурийСсылка=Неопределено)
	
	НовыйСтатус = "Ошибка";
	НовоеТребуемоеДействие = "Переотправить транзакцию";
	
	Если СообщениеМеркурийСсылка<>Неопределено Тогда
		СообщениеМеркурийОбъект = СообщениеМеркурийСсылка.ПолучитьОбъект();
		СообщениеМеркурийОбъект.ТребуемоеДействие =	НовоеТребуемоеДействие;
		СообщениеМеркурийОбъект.Статус =	НовыйСтатус;
		СообщениеМеркурийОбъект.Записать();
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьСтатусСообщенияМеркурий(НовыйСтатус, НовоеТребуемоеДействие, СообщениеМеркурийСсылка=Неопределено)
	
	Если СообщениеМеркурийСсылка<>Неопределено Тогда
		
		СообщениеМеркурийОбъект = СообщениеМеркурийСсылка.ПолучитьОбъект();
		СообщениеМеркурийОбъект.ТребуемоеДействие =	НовоеТребуемоеДействие;
		СообщениеМеркурийОбъект.Статус =	НовыйСтатус;
		СообщениеМеркурийОбъект.Архив = (НовыйСтатус = "Выполнен");
		СообщениеМеркурийОбъект.Записать();
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьСтатусСообщенияМеркурийПоСтатусуapplicationId(СообщениеМеркурийСсылка=Неопределено,applicationId,НовыйСтатус)
	
	Если СообщениеМеркурийСсылка=Неопределено Тогда
		
		СообщениеМеркурийСсылка = ПолучитьСообщениеМеркурийПоapplicationId(applicationId);
		
	КонецЕсли;
	
	Если СообщениеМеркурийСсылка<>Неопределено Тогда
		СообщениеМеркурийОбъект = СообщениеМеркурийСсылка.ПолучитьОбъект();
		
		
		НайденнаяСтрокаapplicationId = СообщениеМеркурийОбъект.ДополнительныеРеквизиты.Найти(applicationId,"Значение");
		
		Если НайденнаяСтрокаapplicationId<> неопределено Тогда
			
			НайденнаяСтрокаapplicationId.ИмяРеквизита = НовыйСтатус;
			
			АнализСообщения = ПолучитьТребуемоеДействиеПоСтатусамСообщенияМеркурий(СообщениеМеркурийОбъект.ДополнительныеРеквизиты);
			
			НовоеТребуемоеДействие = АнализСообщения.ТребуемоеДействие;
			НовыйСтатус = АнализСообщения.Статус;
			
			Если (СообщениеМеркурийОбъект.ТипСообщения = "M_DES" или СообщениеМеркурийОбъект.ТипСообщения = "M_MOV") 
				и НовыйСтатус = "Выполнен" 
				и СообщениеМеркурийОбъект.Направление = "Исходящее"
				и ПолучитьКонстантуEDI("М_ИспользоватьДействиеПечатьИсходящихВСД") = Истина Тогда
				НовоеТребуемоеДействие = "Распечатать ВСД";
				НовыйСтатус = "Погашен";
			КонецЕсли;				

			Если НовоеТребуемоеДействие <> Неопределено Тогда 
				СообщениеМеркурийОбъект.ТребуемоеДействие =	НовоеТребуемоеДействие;
			КонецЕсли;
			Если НовыйСтатус <> Неопределено Тогда 
				СообщениеМеркурийОбъект.Статус =	НовыйСтатус;
			КонецЕсли;
			
			Если НовыйСтатус = "Выполнен" Тогда
				СообщениеМеркурийОбъект.Архив = Истина;
			Конецесли;
			
			СообщениеМеркурийОбъект.Записать();
			
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТребуемоеДействиеПоСтатусамСообщенияМеркурий(ДопРеквизитыСообщения)
	
	//принцип такой: если хоть что-то обрабатывается - значит всё сообщение обрабатывается, если хоть где-то ошибка - значит все сообщение ошибка
	
	Статус = "";
	ТребуемоеДействие = "";
	
	Если ДопРеквизитыСообщения.Найти("Выполнен","ИмяРеквизита")<>неопределено Тогда   //есть завершенные
		ТребуемоеДействие = "Работа завершена";
		Статус = "Выполнен"
	КонецЕсли;
	
	Если ДопРеквизитыСообщения.Найти("Обрабатывается","ИмяРеквизита")<>неопределено Тогда   //есть обрабатывающиеся
		ТребуемоеДействие = "Обрабатывается";
		Статус = "Обрабатывается"
	КонецЕсли;
	
	Если ДопРеквизитыСообщения.Найти("Ошибка","ИмяРеквизита")<>неопределено Тогда   //есть ошибки
		ТребуемоеДействие = "Переотправить транзакцию";
		Статус = "Ошибка"
	КонецЕсли;
	
	Возврат Новый Структура("Статус,ТребуемоеДействие",Статус,ТребуемоеДействие);
	
КонецФункции

Функция ПолучитьСообщениеСсылкаМеркурий(ЗНАЧ КодСообщения)

	Если Не ЗначениеЗаполнено(КодСообщения) 
		Тогда 
		Возврат Неопределено; 
	КонецЕсли;
	
	ПозицияВСД=Найти(КодСообщения,"_ВСД_");
	Если ПозицияВСД > 0 Тогда
		КодСообщения = Лев(КодСообщения,ПозицияВСД-1);
	КонецЕсли;
	
	СообщениеМеркурийСсылка = Справочники.КонтурEDI_Сообщения.НайтиПоКоду(КодСообщения);
	
	Если Не ЗначениеЗаполнено(СообщениеМеркурийСсылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не нашел сообщение меркурий: " + КодСообщения;
		Сообщение.Сообщить();
		Возврат Неопределено;
	Иначе
    	Возврат(СообщениеМеркурийСсылка);
	КонецЕсли;

КонецФункции // ПолучитьЗапись()

Функция ПолучитьСообщениеОбъектМеркурий(КодСообщения)
	
	СообщениеМеркурийСсылка = ПолучитьСообщениеСсылкаМеркурий(КодСообщения);
	
	Если Не ЗначениеЗаполнено(СообщениеМеркурийСсылка) Тогда
		Возврат Неопределено;
	Иначе
		СообщениеМеркурий = СообщениеМеркурийСсылка.ПолучитьОбъект();
    	Возврат(СообщениеМеркурий);
	КонецЕсли;

КонецФункции // ПолучитьЗапись()

Процедура ЗаписатьТекстЗапросаМеркурий(ЗНАЧ Код, ТекстЗапроса,ВСДUUID=неопределено) Экспорт
	
	СообщениеОбъект = ПолучитьСообщениеОбъектМеркурий(Код);
	
	Если СообщениеОбъект = Неопределено 
		Тогда 
		Возврат;
	Иначе
		ЗаписьЗапроса=СообщениеОбъект.ДополнительныеРеквизиты.Добавить();
		Если ВСДUUID=Неопределено ИЛИ ВСДUUID="" Тогда
			ЗаписьЗапроса.ИмяРеквизита = "Запрос";
		Иначе
			ЗаписьЗапроса.ИмяРеквизита = "Запрос_ВСД_"+ВСДUUID;
		КонецЕсли;
		ЗаписьЗапроса.ЗначениеСтрока = ТекстЗапроса;
		СообщениеОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьТекстОтветаМеркурий(ЗНАЧ applicationId, ТекстОтвета) Экспорт    //объединить с ЗаписатьТекстЗапросаМеркурий
	
	СообщениеСсылка = ПолучитьСообщениеМеркурийПоapplicationId(applicationId);
	Если СообщениеСсылка = Неопределено
		Тогда Возврат;
	КонецЕсли;
	
	СообщениеОбъект = СообщениеСсылка.получитьОбъект();
	
	Если СообщениеОбъект = Неопределено 
		Тогда 
		Возврат;
	Иначе
		ЗаписьЗапроса=СообщениеОбъект.ДополнительныеРеквизиты.Добавить();
		
		ЗаписьЗапроса.ИмяРеквизита = "Ответ_"+applicationId;
		ЗаписьЗапроса.ЗначениеСтрока = ТекстОтвета;
		СообщениеОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСообщениеМеркурийПоapplicationId(applicationId)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Значение = &applicationId";
	
	Запрос.УстановитьПараметр("applicationId",applicationId);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьWSПроксиСправочникЕдиницИзмерения() Экспорт
	
	Если ИспользуемыеWSПрокси().WSПроксиСправочникЕдиницИзмерения = Неопределено Тогда
		
		Прокси = Новый WSПрокси(ПолучитьОпределениеПроксиИзМакета("DictionaryService_test_14"),
		"http://api.vetrf.ru/schema/cdm/registry/service",   
		"DictionaryServiceBindingQSService",  
		"DictionaryServiceBindingQSPort"); 
		
		//альтернативный способ (требует добавления в конфигурацию WS-ссылок)
		//Прокси = WSСсылки.WSDictionaryServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "DictionaryServiceBindingQSService", "DictionaryServiceBindingQSPort");
		
		Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
		Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");	
		ИспользуемыеПрокси.WSПроксиСправочникЕдиницИзмерения = Прокси;
		
	Иначе
		Прокси = ИспользуемыеWSПрокси().WSПроксиСправочникЕдиницИзмерения; 
	КонецЕсли;
	
	Возврат(Прокси);
	
КонецФункции

Функция ПолучитьWSПроксиСправочникПродукции() Экспорт
	
	Если ИспользуемыеWSПрокси().WSПроксиСправочникПродукции = Неопределено Тогда
		
		Прокси = Новый WSПрокси(ПолучитьОпределениеПроксиИзМакета("ProductService_test_14"),
		"http://api.vetrf.ru/schema/cdm/registry/service",   
		"ProductServiceBindingQSService",  
		"ProductServiceBindingQSPort");
		
		//альтернативный способ (требует добавления в конфигурацию WS-ссылок)
		//Прокси = WSСсылки.WSProductServiceBindingQSServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "ProductServiceBindingQSService", "ProductServiceBindingQSPort");
		Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
		Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");	
		ИспользуемыеПрокси.WSПроксиСправочникПродукции = Прокси;
		
	Иначе
		Прокси = ИспользуемыеWSПрокси().WSПроксиСправочникПродукции; 
	КонецЕсли;
	
	Возврат(Прокси);
	
КонецФункции

Функция ПолучитьWSПроксиПроверкиРегионализации20() Экспорт
	
	Если ИспользуемыеWSПрокси().WSПроксиПроверкаРегионализации = Неопределено Тогда
		
		Прокси = Новый WSПрокси(ПолучитьОпределениеПроксиИзМакета("RegionalizationService_test_20"),
		"http://api.vetrf.ru/schema/cdm/registry/r13n/service/v2",   
		"RegionalizationServiceBindingQSService",  
		"RegionalizationServiceBindingQSPort");
		
		Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
		Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");	
		ИспользуемыеПрокси.WSПроксиПроверкаРегионализации = Прокси;
		
	Иначе
		Прокси = ИспользуемыеWSПрокси().WSПроксиПроверкаРегионализации; 
	КонецЕсли;
	
	Возврат(Прокси);
	
КонецФункции

Функция ПолучитьWSПроксиСправочникИкар() Экспорт
	
	Если ИспользуемыеWSПрокси().WSПроксиСправочникИкар = Неопределено Тогда
		
		//внутри ПолучитьОпределениеПроксиИзМакета будет подмена на prod если скинута галка использования тестового апи
		Прокси = Новый WSПрокси(ПолучитьОпределениеПроксиИзМакета("IkarService_test_14"),
		"http://api.vetrf.ru/schema/cdm/registry/service",   
		"IkarServiceBindingQSService",  
		"IkarServiceBindingQSPort");
		
		//альтернативный способ (требует добавления в конфигурацию WS-ссылок)
		//Прокси = WSСсылки.WSIkarServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "IkarServiceBindingQSService", "IkarServiceBindingQSPort");
		Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
		Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");	
		ИспользуемыеПрокси.WSПроксиСправочникИкар = Прокси;
		
	Иначе
		Прокси = ИспользуемыеWSПрокси().WSПроксиСправочникИкар; 
	КонецЕсли;
	
	Возврат(Прокси);
	
КонецФункции



Функция ПолучитьСписокТиповПродукцииВетис() Экспорт
	
	Список = Новый СписокЗначений();
	Список.Добавить(1, "Мясо и мясопродукты");
	Список.Добавить(2, "Корма и кормовые добавки");
	Список.Добавить(3, "Живые животные");
	Список.Добавить(4, "Лекарственные средства");
	Список.Добавить(5, "Пищевые продукты");
	Список.Добавить(6, "Непищевые продукты и другое");
	Список.Добавить(7, "Рыба и морепродукты");
	//Список.Добавить(8, "--"); //
	
	РазделыПродукцииСКоторымиРаботаем = ПолучитьКонстантуEDI("М_ВидыПродукции");
	Если НЕ ЗначениеЗаполнено(РазделыПродукцииСКоторымиРаботаем) Тогда
		РазделыПродукцииСКоторымиРаботаем = "1,2,3,4,5,6,7";
	КонецЕсли;
	МассивТиповПродукции = ОсновнойМодуль.EDI_РазложитьСтрокуВМассивСлов(РазделыПродукцииСКоторымиРаботаем,",");
	
	НовыйСписок = Новый СписокЗначений;
	Для Каждого ТипПродукцииСтрока Из МассивТиповПродукции Цикл
		ЭлСп	= Список.НайтиПоЗначению(Число(ТипПродукцииСтрока));
		Если ЭлСп<>Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НовыйСписок.Добавить(),ЭлСп);
		КонецЕсли;
	КонецЦикла;
	
	Возврат(НовыйСписок);
		
КонецФункции

Функция ДеревоПродукцииВетис(СтрокаПоиска = "", ОбновитьИзМеркурия = Ложь) Экспорт
	
	КС10 = Новый КвалификаторыСтроки(36);
	КС3 = Новый КвалификаторыСтроки(36);
	КС36 = Новый КвалификаторыСтроки(36);
	КС45 = Новый КвалификаторыСтроки(45);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТипов10 = Новый ОписаниеТипов(Массив, , КС10);
	ОписаниеТипов3 = Новый ОписаниеТипов(Массив, , КС3);
	ОписаниеТипов36 = Новый ОписаниеТипов(Массив, , КС36);
	ОписаниеТипов45 = Новый ОписаниеТипов(Массив, , КС45);
	
	ДеревоМеркурий = новый ДеревоЗначений;
	ДеревоМеркурий.Колонки.Добавить("Наименование",ОписаниеТипов45,,40);
	ДеревоМеркурий.Колонки.Добавить("Код",ОписаниеТипов10,,4);
	ДеревоМеркурий.Колонки.Добавить("Статус",ОписаниеТипов3,,3);
	ДеревоМеркурий.Колонки.Добавить("GUID",ОписаниеТипов36,,36);
	
	ТаблицаМеркурия = ТаблицаПродукцииВетис(ОбновитьИзМеркурия);
	
	ТаблицаОглавленияНоменклатуры = ТаблицаМеркурия.Скопировать();
	ТаблицаОглавленияНоменклатуры.Свернуть("productType,productGUID,НаименованиеТипаПродукции");
	
	СписокГлавКлассификатора = ПолучитьСписокТиповПродукцииВетис();
	
	СловаПоиска = ОсновнойМодуль.РазложитьСтроку(СтрЗаменить(СтрокаПоиска, " ", ","), ",");
	
	Для Каждого Строка1Ветис Из СписокГлавКлассификатора Цикл
		Строка1Уровня = ДеревоМеркурий.Строки.Добавить();
		Строка1Уровня.Наименование = ""+Строка1Ветис.Значение +". "+ Строка1Ветис.Представление;
		СтрокиОглавления = ТаблицаОглавленияНоменклатуры.НайтиСтроки(Новый Структура("productType",Строка1Ветис.Значение));
		Для Каждого Строка2Ветис Из СтрокиОглавления Цикл
			Строка2Уровня = Строка1Уровня.Строки.Добавить();
			Строка2Уровня.Наименование = "Тип: "+Строка2Ветис.НаименованиеТипаПродукции;
			Строка2Уровня.GUID = Строка2Ветис.productGUID;
			//Строка2Уровня.Статус = Строка2Ветис;
			//Строка2Уровня.Код = Строка2Ветис;
			
			СтрокиКлассификатора= ТаблицаМеркурия.НайтиСтроки(Новый Структура("productType,productGUID",Строка1Ветис.Значение,Строка2Ветис.productGUID));
			Для Каждого Строка3Ветис Из СтрокиКлассификатора Цикл
				Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
					Найдено = Истина;
					Для каждого текСлово из СловаПоиска Цикл
						Если 
							Найти(Строка3Ветис.Код, текСлово.Значение) = 0 и 
							Найти(Строка3Ветис.НаименованиеВидаПродукции, текСлово.Значение) = 0	Тогда
							Найдено = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ Найдено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Строка3Уровня = Строка2Уровня.Строки.Добавить();
				Строка3Уровня.Наименование = Строка3Ветис.НаименованиеВидаПродукции;
				Строка3Уровня.GUID = Строка3Ветис.subProductGUID;
				Строка3Уровня.Статус = Строка3Ветис.Статус;
				Строка3Уровня.Код = Строка3Ветис.Код;
			КонецЦикла;
			Если Строка2Уровня.Строки.Количество() = 0 Тогда
				Строка1Уровня.Строки.Удалить(Строка2Уровня);
			КонецЕсли;
		КонецЦикла;
		Если Строка1Уровня.Строки.Количество() = 0 Тогда
			ДеревоМеркурий.Строки.Удалить(Строка1Уровня);
		КонецЕсли;
	КонецЦикла;
	
	ДеревоМеркурий.Строки.Сортировать("Наименование Возр", Истина);

	Возврат ДеревоМеркурий;
	
КонецФункции // ДеревоПродукцииВетис()

Функция ТаблицаПродукцииВетис(ОбновитьИзМеркурия = Ложь) Экспорт

	Если ТаблицаПродукцииВетис <> неопределено
		И (Не ОбновитьИзМеркурия)
		И ТаблицаПродукцииВетис.Количество()>0 Тогда
		Возврат ТаблицаПродукцииВетис;
	КонецЕсли;
	
	СохраненнаяТаблица = ПолучитьНастройкуМеркурий("ТаблицаПродукцииВетис");
	Если (Не ОбновитьИзМеркурия)
		И СохраненнаяТаблица<> Неопределено 
		И СохраненнаяТаблица.ТаблицаПродукцииВетис <> Неопределено Тогда
		ТаблицаПродукцииВетис = СохраненнаяТаблица.ТаблицаПродукцииВетис;
		Возврат ТаблицаПродукцииВетис;
	КонецЕсли;
	
	Прокси = ПолучитьWSПроксиСправочникПродукции();
	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 100;	
	
	Смещение = 0;
	
	ТаблицаПродукцииВетис = Новый ТаблицаЗначений;
	ТаблицаПродукцииВетис.Колонки.Добавить("productType");
	ТаблицаПродукцииВетис.Колонки.Добавить("productGUID");
	ТаблицаПродукцииВетис.Колонки.Добавить("НаименованиеТипаПродукции");
	ТаблицаПродукцииВетис.Колонки.Добавить("subProductGUID");
	ТаблицаПродукцииВетис.Колонки.Добавить("НаименованиеВидаПродукции");
	ТаблицаПродукцииВетис.Колонки.Добавить("Статус");
	ТаблицаПродукцииВетис.Колонки.Добавить("Код");
	
	РазделыПродукцииСКоторымиРаботаем = ПолучитьКонстантуEDI("М_ВидыПродукции");
	Если НЕ ЗначениеЗаполнено(РазделыПродукцииСКоторымиРаботаем) Тогда 
		РазделыПродукцииСКоторымиРаботаем = "1,2,3,4,5,6,7";
	КонецЕсли;
	МассивТиповПродукции = ОсновнойМодуль.EDI_РазложитьСтрокуВМассивСлов(РазделыПродукцииСКоторымиРаботаем,",");
	
	Для Каждого ТипПродукцииСтрока Из МассивТиповПродукции Цикл
		ТипПродукции = Число(ТипПродукцииСтрока);
		Смещение = 0;
			
		Пока Истина Цикл
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			ListOptions.offset = Смещение;
			Попытка
				Ответ = Прокси.GetProductByTypeList(ListOptions, ТипПродукции);
			Исключение
				Прервать;  // на рефакторинг - сделать как в EDI 2 попытки
			КонецПопытки;
			Смещение = Смещение + 100;
			КоличествоВПачке = Ответ.Product.Количество();
			
			Для Каждого стр из Ответ.Product Цикл
				Смещениеsub = 0;
				//ТекСтрока = Дерево.Строки.Добавить();
				//ЗаполнитьТекСтроку(ТекСтрока, стр);
				Пока Истина Цикл
					#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
					#КонецЕсли
					ListOptions.offset = Смещениеsub;
					Попытка 
						Ответsub = Прокси.GetSubProductByProductList(ListOptions, стр.GUID);
					Исключение
						Прервать; // на рефакторинг - сделать как в EDI 2 попытки
					КонецПопытки;
					
					ОсновнойМодуль.Состояние_КонтурEDI("Опрашиваю классификатор продукции "+стр.name);
					//Теперь спросить дочерние
					Для Каждого стрsub из Ответsub.subProduct Цикл
						#Если Клиент Тогда
						ОбработкаПрерыванияПользователя();
						#КонецЕсли
						НоваяСтрокаТаблицы = ТаблицаПродукцииВетис.Добавить();
						НоваяСтрокаТаблицы.productType = ТипПродукции;
						НоваяСтрокаТаблицы.productGUID = стр.GUID;
						НоваяСтрокаТаблицы.НаименованиеТипаПродукции = стр.name;
						НоваяСтрокаТаблицы.subProductGUID = стрsub.GUID;
						НоваяСтрокаТаблицы.НаименованиеВидаПродукции = стрsub.name;
						НоваяСтрокаТаблицы.Код = стрsub.code;
						НоваяСтрокаТаблицы.Статус = стрsub.status;
					КонецЦикла;
					Смещениеsub = Смещениеsub + 100;
					КоличествоВПачкеsub = Ответsub.subProduct.Количество();
					Если КоличествоВПачкеsub < 100 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если КоличествоВПачке < 100 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если ТаблицаПродукцииВетис<>неопределено
		И ТаблицаПродукцииВетис.Количество()>0 Тогда
		СохранитьНастройкуМеркурий("ТаблицаПродукцииВетис",ТаблицаПродукцииВетис);
	КонецЕсли;
	
	Возврат ТаблицаПродукцииВетис;
	
КонецФункции // ТаблицаПродукцииВетис()

Функция ПолучитьproductGUIDиproductTypeПоsubProductGUID(subProductGUID)
	
	СтруктураВозврата = Новый Структура("productType, productGUID",);
	
	Если ЗначениеЗаполнено(subProductGUID) Тогда
		НайденнаяСтрока = ТаблицаПродукцииВетис().Найти(subProductGUID,"subProductGUID");
		Если НайденнаяСтрока<>Неопределено Тогда
			СтруктураВозврата.productType = НайденнаяСтрока.productType;
			СтруктураВозврата.productGUID = НайденнаяСтрока.productGUID;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат СтруктураВозврата;
	
КонецФункции

//Сохранение настроек Меркурий
Функция ПолучитьКлючСохраненияНастроекМеркурий()
	
	Возврат "КонтурEDI/СохраненныеНастройкиМеркурий";
		
КонецФункции
	
Процедура СохранитьНастройкуМеркурий(ИмяНастройкиБезПрефикса,ТаблицаМеркурий) Экспорт
	
	ИмяНастройки = "Меркурий_"+ИмяНастройкиБезПрефикса;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить(ИмяНастройкиБезПрефикса,						ТаблицаМеркурий);
	
	Попытка
		Выполнить("ХранилищеОбщихНастроек.Сохранить(ПолучитьКлючСохраненияНастроекМеркурий(),ИмяНастройки,СтруктураНастроек);");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСписокНастроекМеркурий() Экспорт
	
	СписокНастроек = Новый СписокЗначений;
	Если ОсновнойМодуль.КонтурEDI_ВерсияПлатформы()<>"81" Тогда
		Попытка
			Выполнить("СписокНастроек = ХранилищеОбщихНастроек.ПолучитьСписок(ПолучитьКлючСохраненияНастроекМеркурий());");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат СписокНастроек;
	
КонецФункции

Функция ПолучитьНастройкуМеркурий(ИмяНастройки) Экспорт
	
	ИмяНастройки = "Меркурий_"+ИмяНастройки;
	
	ЗначениеНастройки = Неопределено;
	Попытка
		Выполнить("ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьКлючСохраненияНастроекМеркурий(),ИмяНастройки);");
	Исключение
	КонецПопытки;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

Функция ПолучитьМеркурийComplexDate(Дата) Экспорт
	
	ДатаМеркурий = ПолучитьОбъектXDTOМеркурий("Общие", "ComplexDate");
	
	Если  ЗначениеЗаполнено(Дата) Тогда
		ДатаМеркурий.year		= Год(Дата);
		ДатаМеркурий.month	= Формат(Месяц(Дата),"ЧЦ=2; ЧВН=");
		ДатаМеркурий.day		= Формат(День(Дата),"ЧЦ=2; ЧВН=");
		ДатаМеркурий.hour		= Час(Дата);
	Иначе
	КонецЕсли;
	Возврат(ДатаМеркурий);
	
КонецФункции

Функция ПолучитьМеркурийДатуИзОтвета(ДатаОтвета) Экспорт
	
	Если ДатаОтвета=Неопределено Тогда
		Возврат Дата(1,1,1)
	КонецЕсли;
	
	Попытка
		Год = ВычислитьXDTO(ДатаОтвета,"year"); 
		Месяц = ВычислитьXDTO(ДатаОтвета,"month"); 
		День = ВычислитьXDTO(ДатаОтвета,"day"); 
		Час = ВычислитьXDTO(ДатаОтвета,"hour"); 
		Возврат(Дата(?(ЗначениеЗаполнено(Год),Год,1),?(ЗначениеЗаполнено(Месяц),Месяц,1),?(ЗначениеЗаполнено(День),День,1),?(ЗначениеЗаполнено(Час),Час,0),0,0));
	Исключение
		Возврат Дата(1,1,1)
	КонецПопытки;
	
КонецФункции 


Функция ПолучитьИмяМетодаМеркурийПоТипуСообщения(ТипСообщения) Экспорт

	Если ТипСообщения = "M_DES" или ТипСообщения = "M_MOV" Тогда
		Если ПолучитьКонстантуEDI("М_ИспользоватьAPI20ДляТранзакций") = Истина Тогда 
			Возврат "PrepareOutgoingConsignmentRequest";
		Иначе
			Возврат "PrepareOutcomingConsignmentRequest";
		КонецЕсли;
	ИначеЕсли ТипСообщения = "M_INC" Тогда
		Возврат "ProcessIncomingConsignmentRequest";
	ИначеЕсли ТипСообщения = "M_REC" Тогда
		Возврат "ProcessIncomingConsignmentRequest";
	ИначеЕсли ТипСообщения = "M_PRD" Тогда
		Возврат "RegisterProductiveBatchRequest";
	//ИначеЕсли ТипСообщения = "" Тогда
	Иначе
		ВызватьИсключение "Не знаю имя метода Меркурий";
	КонецЕсли;		

КонецФункции // ПолучитьИмяМетодаМеркурийПоТипуСообщения()
Функция ПолучитьНазваниеТранзакцииПоТипуСообщения(ТипСообщения)Экспорт
	Если ТипСообщения = "M_DES" Тогда
		Возврат "Перемещение со сменой собственника (M_DES)";
	ИначеЕсли ТипСообщения = "M_MOV" Тогда
		Возврат "Перемещение без смены собственника (M_MOV)";
	ИначеЕсли ТипСообщения = "M_REC" Тогда
		Возврат "Отражение записи входного журнала (M_REC)";
	ИначеЕсли ТипСообщения = "M_PRD" Тогда
		Возврат "Производственная операция (M_PRD)";
	ИначеЕсли ТипСообщения = "M_INC" Тогда
		Возврат "Входящие электронные ВСД (M_INC)";
	ИначеЕсли ТипСообщения = "M_REC" Тогда
		Возврат "Входящие бумажные ВСД (M_REC)";
	//ИначеЕсли ТипСообщения = "" Тогда
	Иначе
		Возврат "Транзакция "+ТипСообщения;
	КонецЕсли;		

КонецФункции // ПолучитьНазваниеТранзакцииПоТипуСообщения()

Функция ПолучитьСписокЭлементовСправочникаМеркурий(ИмяСправочника,ЗНАЧ Владелец = Неопределено) Экспорт
	
	СтандартнаяОбработкаEDI = Истина;
	
	СписокЭлементовСправочника = ОбработкаСобытияПодключаемогоМодуля("ПолучитьСписокЭлементовСправочникаМеркурий",СтандартнаяОбработкаEDI,
								Новый Структура("ИмяСправочника,Владелец",
								ИмяСправочника,Владелец));
	
	Если Не СтандартнаяОбработкаEDI Тогда
		
		Возврат СписокЭлементовСправочника;
		
	КонецЕсли;
	
	Если ИмяСправочника = "МеркурийХС" 
		ИЛИ ИмяСправочника = "МеркурийПлощадка" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка,
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.НомерСтроки,
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита,
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение,
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ЗначениеСтрока,
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ЗначениеХранилищеЗначения,
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.Наименование
		               |ПОМЕСТИТЬ ВТ_ДанныеСправочника
		               |ИЗ
		               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
		               |ГДЕ
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ИмяСправочника
		               |	И НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ПометкаУдаления
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ДанныеСправочника.Ссылка,
		               |	ВТ_ДанныеСправочника.Значение КАК ЗначениеGUID,
		               |	ВТ_ДанныеСправочника.Наименование
		               |ПОМЕСТИТЬ ВТ_GUID
		               |ИЗ
		               |	ВТ_ДанныеСправочника КАК ВТ_ДанныеСправочника
		               |ГДЕ
		               |	ВТ_ДанныеСправочника.ИмяРеквизита = ""GUID""
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ДанныеСправочника.Ссылка,
		               |	ВТ_ДанныеСправочника.Значение КАК ЗначениеОбъект,
		               |	ВТ_ДанныеСправочника.Наименование
		               |ПОМЕСТИТЬ ВТ_Объекты
		               |ИЗ
		               |	ВТ_ДанныеСправочника КАК ВТ_ДанныеСправочника
		               |ГДЕ
		               |	ВТ_ДанныеСправочника.ИмяРеквизита = ""Объект""
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ДанныеСправочника.Ссылка,
		               |	ВТ_ДанныеСправочника.Значение КАК Наш
		               |ПОМЕСТИТЬ ВТ_Наш
		               |ИЗ
		               |	ВТ_ДанныеСправочника КАК ВТ_ДанныеСправочника
		               |ГДЕ
		               |	ВТ_ДанныеСправочника.ИмяРеквизита = ""Наш""
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Объекты.ЗначениеОбъект КАК СвязанныйСправочник,
		               |	ВТ_GUID.ЗначениеGUID КАК GUID,
		               |	ВТ_Объекты.Наименование,
		               |	ЕСТЬNULL(ВТ_Наш.Наш, ЛОЖЬ) КАК Наш,
		               |	ВТ_Объекты.Ссылка КАК ДопСправочникСсылка
		               |ИЗ
		               |	ВТ_Объекты КАК ВТ_Объекты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_GUID КАК ВТ_GUID
		               |		ПО ВТ_Объекты.Ссылка = ВТ_GUID.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Наш КАК ВТ_Наш
		               |		ПО ВТ_Объекты.Ссылка = ВТ_Наш.Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Наш УБЫВ";
		
		Запрос.УстановитьПараметр("ИмяСправочника",ИмяСправочника );
		
		Результат = Запрос.Выполнить();
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли ИмяСправочника = "МеркурийУчетнаяЗапись" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтурEDI_ДополнительныеСправочники.Ссылка
		|ИЗ
		|	Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники
		|ГДЕ
		|	КонтурEDI_ДополнительныеСправочники.ИмяСправочника = ""МеркурийУчетнаяЗапись""";
		
		Возврат Запрос.Выполнить().Выгрузить();
		
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЭлементСправочникаКонтурПоGUID(GUID) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	|ГДЕ
	|	НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ПометкаУдаления
	|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = &GUID
	|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""GUID""";
	
	Запрос.УстановитьПараметр("GUID", GUID);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
	
КонецФункции // ПолучитьЭлементСправочникаКонтурПоGUID()


Функция СохранитьСписокЭлементовСправочникаМеркурий(ИмяСправочника,ТаблицаНовых) Экспорт
	
	Отказ = Ложь;
	
	ТаблицаТекущих = ПолучитьСписокЭлементовСправочникаМеркурий(ИмяСправочника);
	
	ТаблицаТекущих.Колонки.Добавить("Признак");
	ТаблицаТекущих.ЗаполнитьЗначения(Ложь,"Признак");
	
	ТаблицаТекущих.Индексы.Добавить("СвязанныйСправочник");
	
	// мы знаем, что объект(контрагент) в каждой из таблиц встречается один раз, так что можем спокойно сравнивать по нему
	Для Каждого Стр Из ТаблицаНовых Цикл
		
		// забиваем на пустые строки
		Если НЕ ЗначениеЗаполнено(Стр.GUID) И НЕ ЗначениеЗаполнено(Стр.СвязанныйСправочник) Тогда
			Продолжить;
		КонецЕсли;
		
		//Если НЕ НайденнаяСтрока = Неопределено Тогда
		//	
		//	Если (НЕ НайденнаяСтрока.GUID = Стр.GUID)
		//		ИЛИ (НЕ НайденнаяСтрока.Наш = Стр.Наш) Тогда
				
		ЗаписатьЭлементСправочникаМеркурий(ИмяСправочника, Стр.СвязанныйСправочник, Стр.GUID, Отказ, Стр.Наш, Стр.ДопСправочникСсылка);
		НайденнаяСтрока = ТаблицаТекущих.Найти(Стр.СвязанныйСправочник,"СвязанныйСправочник");
		
		Если НайденнаяСтрока <> Неопределено ТОгда
			НайденнаяСтрока.Признак = Истина;
		КонецЕсли;
				
		//	КонецЕсли;	
		//	
		//	
		//Иначе
		//	
		//	ЗаписатьЭлементСправочникаМеркурий(ИмяСправочника, Стр.СвязанныйСправочник, Стр.GUID, Отказ, Стр.Наш);
		//	
		//КонецЕсли;
		
		Если Отказ Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	//// очистим свойства исключенных контрагентов
	//
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Признак",Ложь);
	
	НайденныеСтроки = ТаблицаТекущих.НайтиСтроки(СтруктураОтбора);
	Для Каждого Стр ИЗ НайденныеСтроки Цикл
		
		УдалитьОбъектМеркурий(Стр.СвязанныйСправочник, Стр.GUID, ИмяСправочника);
		
	КонецЦикла;	
	

КонецФункции // СохранитьСписокЭлементовСправочникаМеркурий()

Функция УдалитьОбъектМеркурий(Объект, GUID, ИмяСправочника)

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
|ПОМЕСТИТЬ ВТ_НайденныеПоGUID
|ИЗ
|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
|ГДЕ
|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ИмяСправочника
|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""GUID""
|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = &GUID
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
|ПОМЕСТИТЬ ВТ_НайденныеПоОбъекту
|ИЗ
|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
|ГДЕ
|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ИмяСправочника
|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""Объект""
|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = &Объект
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТ_НайденныеПоGUID.Ссылка
|ИЗ
|	ВТ_НайденныеПоGUID КАК ВТ_НайденныеПоGUID
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НайденныеПоОбъекту КАК ВТ_НайденныеПоОбъекту
|		ПО ВТ_НайденныеПоGUID.Ссылка = ВТ_НайденныеПоОбъекту.Ссылка";

Запрос.УстановитьПараметр("ИмяСправочника", ИмяСправочника);
Запрос.УстановитьПараметр("GUID", GUID);
Запрос.УстановитьПараметр("Объект", Объект);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл

	ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
	ОбъектСправочника.УстановитьПометкуУдаления(Истина);

КонецЦикла;
	

КонецФункции // УдалитьОбъектМеркурий()

Функция ПолучитьСоответствияВсехЕдиницИзмеренияМеркурий() Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеСправочники.Ссылка
	               |ПОМЕСТИТЬ ВТ_СправочникСоответствийЕИ
	               |ИЗ
	               |	Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеСправочники.ИмяСправочника = &ИмяСправочника
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеРеквизиты.Объект,
	               |	КонтурEDI_ДополнительныеРеквизиты.Свойство,
	               |	КонтурEDI_ДополнительныеРеквизиты.Значение
	               |ПОМЕСТИТЬ ВТ_СвойстваСправочникаСоответствийЕИ
	               |ИЗ
	               |	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	               |ГДЕ
	               |	(КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИ_GUID""
	               |			ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИ_UUID""
	               |			ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИ_Соответствие""
	               |			ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИ_Наименование"")
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СправочникСоответствийЕИ.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(СвойствоGUID.Значение, """") КАК GUID,
	               |	ЕСТЬNULL(СвойствоUUID.Значение, """") КАК UUID,
	               |	ЕСТЬNULL(СвойствоНаименование.Значение, """") КАК Наименование,
	               |	ЕСТЬNULL(Соответствие.Значение, """") КАК Соответствие
	               |ИЗ
	               |	ВТ_СправочникСоответствийЕИ КАК ВТ_СправочникСоответствийЕИ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК СвойствоGUID
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = СвойствоGUID.Объект
	               |			И (СвойствоGUID.Свойство = ""Меркурий_ЕИ_GUID"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК СвойствоUUID
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = СвойствоUUID.Объект
	               |			И (СвойствоUUID.Свойство = ""Меркурий_ЕИ_UUID"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК СвойствоНаименование
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = СвойствоНаименование.Объект
	               |			И (СвойствоНаименование.Свойство = ""Меркурий_ЕИ_Наименование"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК Соответствие
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = Соответствие.Объект
	               |			И (Соответствие.Свойство = ""Меркурий_ЕИ_Соответствие"")";
	
	Запрос.УстановитьПараметр("ИмяСправочника","Меркурий_КлассификаторЕдиницИзмерения");
	
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	
	Возврат ТЗ;
	
КонецФункции // КлассификаторЕдиницИзмеренияМеркурий()

Функция ПолучитьСоответствияВсехЕдиницИзмеренияУпаковокМеркурий() Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеСправочники.Ссылка
	               |ПОМЕСТИТЬ ВТ_СправочникСоответствийЕИ
	               |ИЗ
	               |	Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеСправочники.ИмяСправочника = &ИмяСправочника
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеРеквизиты.Объект,
	               |	КонтурEDI_ДополнительныеРеквизиты.Свойство,
	               |	КонтурEDI_ДополнительныеРеквизиты.Значение
	               |ПОМЕСТИТЬ ВТ_СвойстваСправочникаСоответствийЕИ
	               |ИЗ
	               |	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	               |ГДЕ
	               |	(КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИУп_UUID""
	               |			ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИУп_Соответствие""
	               |			ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИУп_Наименование"")
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СправочникСоответствийЕИ.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(СвойствоUUID.Значение, """") КАК UUID,
	               |	ЕСТЬNULL(СвойствоНаименование.Значение, """") КАК Наименование,
	               |	ЕСТЬNULL(Соответствие.Значение, """") КАК Соответствие
	               |ИЗ
	               |	ВТ_СправочникСоответствийЕИ КАК ВТ_СправочникСоответствийЕИ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК СвойствоUUID
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = СвойствоUUID.Объект
	               |			И (СвойствоUUID.Свойство = ""Меркурий_ЕИУп_UUID"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК СвойствоНаименование
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = СвойствоНаименование.Объект
	               |			И (СвойствоНаименование.Свойство = ""Меркурий_ЕИУп_Наименование"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК Соответствие
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = Соответствие.Объект
	               |			И (Соответствие.Свойство = ""Меркурий_ЕИУп_Соответствие"")";
	
	Запрос.УстановитьПараметр("ИмяСправочника","Меркурий_КлассификаторЕдиницИзмеренияУпаковок");
	
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	
	Возврат ТЗ;
	
КонецФункции // КлассификаторЕдиницИзмеренияМеркурий()

Функция ПолучитьКлассификаторЕдиницИзмеренияМеркурий() Экспорт
	
	//если уже инициализированы
	Если КлассификаторЕдиницИзмеренияМеркурий <> неопределено Тогда
		Возврат КлассификаторЕдиницИзмеренияМеркурий;
	КонецЕсли;
	
	Прокси = ПолучитьWSПроксиСправочникЕдиницИзмерения();
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;
	ListOptions.offset = 0;
	
	Ответ = Прокси.GetUnitList(ListOptions);

	ТаблицаЕдиницИзмеренияМеркурий = Новый ТаблицаЗначений();
	ТаблицаЕдиницИзмеренияМеркурий.Колонки.Добавить("Наименование");
	ТаблицаЕдиницИзмеренияМеркурий.Колонки.Добавить("GUID");
	ТаблицаЕдиницИзмеренияМеркурий.Колонки.Добавить("UUID");
	ТаблицаЕдиницИзмеренияМеркурий.Колонки.Добавить("КратнаЧему");
	ТаблицаЕдиницИзмеренияМеркурий.Колонки.Добавить("КратнаКоэффициент");
	
	Для Каждого ЭлементКлассификатора Из Ответ.unit Цикл
		
		Если ЭлементКлассификатора.active Тогда
			НоваяСтрока = ТаблицаЕдиницИзмеренияМеркурий.Добавить();
			НоваяСтрока.Наименование = ЭлементКлассификатора.name;
			НоваяСтрока.GUID = ЭлементКлассификатора.guid;
			НоваяСтрока.UUID = ЭлементКлассификатора.uuid;
			Если ЭлементКлассификатора.factor <> 1 Тогда
				НоваяСтрока.КратнаЧему = ЭлементКлассификатора.commonUnitGuid;
				НоваяСтрока.КратнаКоэффициент = ЭлементКлассификатора.factor;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаЕдиницИзмеренияМеркурий Цикл
		Если ЗначениеЗаполнено(Строка.КратнаЧему) Тогда
			Попытка
				Строка.КратнаЧему = ТаблицаЕдиницИзмеренияМеркурий.Найти(Строка.КратнаЧему,"GUID").Наименование;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	КлассификаторЕдиницИзмеренияМеркурий = ТаблицаЕдиницИзмеренияМеркурий;
	
	Возврат КлассификаторЕдиницИзмеренияМеркурий;
	
КонецФункции

Функция ПолучитьКлассификаторУпаковокМеркурий() Экспорт

	//если уже инициализированы
	Если КлассификаторУпаковокМеркурий <> неопределено Тогда
		Возврат КлассификаторУпаковокМеркурий;
	КонецЕсли;
	
	КлассификаторУпаковок = МеркурийЗагрузитьКлассификаторИзМакета("МеркурийУпаковки");
	ТабКлассификаторУпаковок = Новый ТаблицаЗначений();
	ТабКлассификаторУпаковок.Колонки.Добавить("Наименование");
	ТабКлассификаторУпаковок.Колонки.Добавить("UUID");
	
	Для каждого СтрокаСписка Из КлассификаторУпаковок Цикл
		
		НоваяСтрока = ТабКлассификаторУпаковок.Добавить();
		НоваяСтрока.Наименование = СтрокаСписка.Представление;
		НоваяСтрока.UUID = СтрокаСписка.Значение;
	
	КонецЦикла;
	
	ТабКлассификаторУпаковок.Сортировать("Наименование");
	
	КлассификаторУпаковокМеркурий = ТабКлассификаторУпаковок;
	
	Возврат ТабКлассификаторУпаковок;
	
КонецФункции

Функция ПолучитьТиповыеВариантыБлагополучияМестности() Экспорт
	
	ТаблицаБлагополучий = новый ТаблицаЗначений;
	ТаблицаБлагополучий.Колонки.Добавить("БлагополучиеМестности", новый ОписаниеТипов("Строка"));
	
	НоваяСтрока = ТаблицаБлагополучий.Добавить();
	НоваяСтрока.БлагополучиеМестности = "Местность благополучна по заразным болезням животных";
	НоваяСтрока = ТаблицаБлагополучий.Добавить();
	НоваяСтрока.БлагополучиеМестности = "Местность НЕблагополучна по заразным болезням животных";
	НоваяСтрока = ТаблицаБлагополучий.Добавить();
	НоваяСтрока.БлагополучиеМестности = "Местность неопределенная по заразным болезням животных";
	Возврат ТаблицаБлагополучий;
	
КонецФункции

Функция ПолучитьКлассификаторЦелейМеркурий(ОбновитьИзМеркурия = Ложь) Экспорт
	
	//если уже инициализированы
	Если КлассификаторЦелейМеркурий <> неопределено Тогда
		Возврат КлассификаторЦелейМеркурий;
	КонецЕсли;
	
	//если сохранили пользователю
	Попытка
	СохраненнаяТаблица = ПолучитьНастройкуМеркурий("КлассификаторЦелейМеркурий");
	Если (Не ОбновитьИзМеркурия)
		И СохраненнаяТаблица<> Неопределено 
		И СохраненнаяТаблица.КлассификаторЦелейМеркурий <> Неопределено Тогда
		КлассификаторЦелейМеркурий = СохраненнаяТаблица.КлассификаторЦелейМеркурий;
		Возврат КлассификаторЦелейМеркурий;
	КонецЕсли;
	Исключение
	//на случай если переименуем
	КонецПопытки;
	Прокси = ПолучитьWSПроксиСправочникЕдиницИзмерения();
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;
	ListOptions.offset = 0;
	
	Ответ = Прокси.GetPurposeList(ListOptions);

	КлассификаторЦелейМеркурий = Новый ТаблицаЗначений();
	КлассификаторЦелейМеркурий.Колонки.Добавить("Наименование");
	КлассификаторЦелейМеркурий.Колонки.Добавить("GUID");
	КлассификаторЦелейМеркурий.Колонки.Добавить("UUID");
	
	Для Каждого ЭлементКлассификатора Из Ответ.purpose Цикл
		
		Если ЭлементКлассификатора.active Тогда
			НоваяСтрока = КлассификаторЦелейМеркурий.Добавить();
			НоваяСтрока.Наименование = ЭлементКлассификатора.name;
			НоваяСтрока.GUID = ЭлементКлассификатора.guid;
			НоваяСтрока.UUID = ЭлементКлассификатора.uuid;
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьНастройкуМеркурий("КлассификаторЦелейМеркурий",КлассификаторЦелейМеркурий);
	
	Возврат КлассификаторЦелейМеркурий;
	
КонецФункции

Функция ПолучитьКлассификаторСтранМеркурий(ОбновитьИзМеркурия = Ложь) Экспорт
	
	//если уже инициализированы
	Если КлассификаторСтранМеркурий <> неопределено Тогда
		Возврат КлассификаторСтранМеркурий;
	КонецЕсли;
	
	//если сохранили пользователю
	Попытка
	СохраненнаяТаблица = ПолучитьНастройкуМеркурий("КлассификаторСтранМеркурий");
	Если (Не ОбновитьИзМеркурия)
		И СохраненнаяТаблица<> Неопределено 
		И СохраненнаяТаблица.КлассификаторСтранМеркурий <> Неопределено Тогда
		КлассификаторСтранМеркурий = СохраненнаяТаблица.КлассификаторСтранМеркурий;
		Возврат КлассификаторСтранМеркурий;
	КонецЕсли;
	Исключение
	//на случай если переименуем
	КонецПопытки;
	Прокси = ПолучитьWSПроксиСправочникИкар();
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;
	ListOptions.offset = 0;
	
	Ответ = Прокси.GetAllCountryList(ListOptions);

	КлассификаторСтранМеркурий = Новый ТаблицаЗначений();
	КлассификаторСтранМеркурий.Колонки.Добавить("Наименование");
	КлассификаторСтранМеркурий.Колонки.Добавить("GUID");
	КлассификаторСтранМеркурий.Колонки.Добавить("UUID");
	КлассификаторСтранМеркурий.Колонки.Добавить("Код");
	
	Для Каждого ЭлементКлассификатора Из Ответ.country Цикл
		
		Если ЭлементКлассификатора.active Тогда
			НоваяСтрока = КлассификаторСтранМеркурий.Добавить();
			НоваяСтрока.Наименование = ЭлементКлассификатора.name;
			НоваяСтрока.GUID = ЭлементКлассификатора.guid;
			НоваяСтрока.UUID = ЭлементКлассификатора.uuid;
			НоваяСтрока.Код = ЭлементКлассификатора.code;
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьНастройкуМеркурий("КлассификаторСтранМеркурий",КлассификаторСтранМеркурий);
	
	Возврат КлассификаторСтранМеркурий;
	
КонецФункции

Функция ПолучитьКлассификаторРегионовМеркурий(ОбновитьИзМеркурия = Ложь,СтранаGUID) Экспорт
	
	//если уже инициализированы
	Если КлассификаторРегионовМеркурий <> неопределено Тогда
		Возврат КлассификаторРегионовМеркурий;
	КонецЕсли;
	
	//если сохранили пользователю
	Попытка
	СохраненнаяТаблица = ПолучитьНастройкуМеркурий("КлассификаторРегионовМеркурий");
	Если (Не ОбновитьИзМеркурия)
		И СтранаGUID = "74a3cbb1-56fa-94f3-ab3f-e8db4940d96b"    //кэшируем только РФ
		И СохраненнаяТаблица<> Неопределено 
		И СохраненнаяТаблица.КлассификаторРегионовМеркурий <> Неопределено Тогда
		КлассификаторРегионовМеркурий = СохраненнаяТаблица.КлассификаторРегионовМеркурий;
		Возврат КлассификаторРегионовМеркурий;
	КонецЕсли;
	Исключение
	//на случай если переименуем
	КонецПопытки;

	КлассификаторРегионовМеркурий = ПолучитьАдресныйКлассификаторПоИмениМетода("GetRegionListByCountry",СтранаGUID,"region");

	Если СтранаGUID = "74a3cbb1-56fa-94f3-ab3f-e8db4940d96b" Тогда   //кэшируем только РФ
		СохранитьНастройкуМеркурий("КлассификаторРегионовМеркурий",КлассификаторРегионовМеркурий);
	КонецЕсли;
	
	Возврат КлассификаторРегионовМеркурий;
	
КонецФункции

Функция ПолучитьКлассификаторРайоновРегионаМеркурий(РайонGUID) Экспорт  //district
	
	Возврат ПолучитьАдресныйКлассификаторПоИмениМетода("GetDistrictListByRegion",РайонGUID,"district");
	
КонецФункции

Функция ПолучитьКлассификаторНасПунктовРегионаМеркурий(РегионGUID) Экспорт  //district
	
	Возврат ПолучитьАдресныйКлассификаторПоИмениМетода("GetLocalityListByRegion",РегионGUID,"locality");
	
КонецФункции

Функция ПолучитьКлассификаторНасПунктовРайонаМеркурий(РайонGUID) Экспорт  //или нас пунктов в пределах подчинения головному населенному пункту
	
	Возврат ПолучитьАдресныйКлассификаторПоИмениМетода("GetLocalityListByDistrict",РайонGUID,"locality");
	
	
	//Прокси = ПолучитьWSПроксиСправочникИкар();

	//ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	//ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	//ListOptions.count = 1000;
	//ListOptions.offset = 0;
	//
	//Ответ = Прокси.GetLocalityListByDistrict(ListOptions, РайонGUID);

	//КлассификаторРайоновРегионаМеркурий = Новый ТаблицаЗначений();
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("Наименование");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("GUID");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("UUID");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("Код");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("Представление");
	//
	//Для Каждого ЭлементКлассификатора Из Ответ.locality Цикл
	//	
	//	Если ЭлементКлассификатора.active Тогда
	//		НоваяСтрока = КлассификаторРайоновРегионаМеркурий.Добавить();
	//		НоваяСтрока.Наименование = ЭлементКлассификатора.name;
	//		НоваяСтрока.GUID = ЭлементКлассификатора.guid;
	//		НоваяСтрока.UUID = ЭлементКлассификатора.uuid;
	//		НоваяСтрока.Код = ЭлементКлассификатора.regionCode;
	//		НоваяСтрока.Представление = ЭлементКлассификатора.view;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Возврат КлассификаторРайоновРегионаМеркурий;
	
КонецФункции

Функция ПолучитьКлассификаторНасПунктовНасПунктаМеркурий(НасПунктGUID) Экспорт
	
	Возврат ПолучитьАдресныйКлассификаторПоИмениМетода("GetLocalityListByLocality",НасПунктGUID,"locality");
	
КонецФункции

Функция ПолучитьКлассификаторУлицНаселенногоПунктаМеркурий(НаселенныйПунктGUID,ОбновитьССервера = Ложь) Экспорт  //district //или город федерального значения
	ТекGUID = НаселенныйПунктGUID;
	ТекGUIDБезДефисов = СтрЗаменить(ТекGUID,"-",""); //это надо для того чтобы закэшировать большие списки
	
	Если ОбновитьССервера = Ложь
		И ЭтоGUIDГородаФедеральногоЗначения(НаселенныйПунктGUID) Тогда
		СохраненнаяСтруктура = ПолучитьНастройкуМеркурий("ГородФЗ"+ТекGUIDБезДефисов);
		Если СохраненнаяСтруктура<>Неопределено Тогда
			СохраненнаяТаблицаУлиц = Новый ТаблицаЗначений();
			Если СохраненнаяСтруктура.Свойство("ГородФЗ"+ТекGUIDБезДефисов,СохраненнаяТаблицаУлиц) Тогда
				Возврат СохраненнаяТаблицаУлиц;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	ТаблицаУлиц = ПолучитьАдресныйКлассификаторПоИмениМетода("GetStreetListByLocality",НаселенныйПунктGUID,"street");
	
	Если ЭтоGUIDГородаФедеральногоЗначения(НаселенныйПунктGUID) Тогда
		СохранитьНастройкуМеркурий("ГородФЗ"+ТекGUIDБезДефисов,ТаблицаУлиц);
	КонецЕсли;
	
	Возврат ТаблицаУлиц;
	
КонецФункции

Функция ПолучитьАдресныйКлассификаторПоИмениМетода(ИмяМетода,GUID,НазваниеЭлементаКоллекции) Экспорт
	
	Классификатор = Новый ТаблицаЗначений();
	Классификатор.Колонки.Добавить("Наименование");
	Классификатор.Колонки.Добавить("GUID");
	Классификатор.Колонки.Добавить("UUID");
	Классификатор.Колонки.Добавить("Код");
	Классификатор.Колонки.Добавить("Представление");
	
	Прокси = ПолучитьWSПроксиСправочникИкар();
	ВычитанПолностью = Ложь;
	Итерация = 0;
	Пока Не ВычитанПолностью Цикл
		
		ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
		ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
		ListOptions.count = 1000;
		ListOptions.offset = Итерация*1000;
		
		Ответ = Неопределено;
		
		Попытка
			Выполнить("Ответ = Прокси."+ИмяМетода+"(ListOptions, GUID)");
		Исключение
			Сообщить("Не смог получить: "+ИмяМетода+" по GUID: "+GUID);
			Возврат Классификатор; 
		КонецПопытки;
		
		СписокXDTO =  Ответ.ПолучитьСписок(НазваниеЭлементаКоллекции);
		Для Каждого ЭлементКлассификатора Из СписокXDTO Цикл
			Если ЭлементКлассификатора.active Тогда
				НоваяСтрока = Классификатор.Добавить();
				НоваяСтрока.Наименование = ЭлементКлассификатора.name;
				НоваяСтрока.GUID = ЭлементКлассификатора.guid;
				НоваяСтрока.UUID = ЭлементКлассификатора.uuid;
				НоваяСтрока.Код = ЭлементКлассификатора.regionCode;
				НоваяСтрока.Представление = ЭлементКлассификатора.view;
			КонецЕсли;
		КонецЦикла;
		
		Если Ответ.offset + Ответ.count = Ответ.total Тогда
			ВычитанПолностью = Истина;
		КонецЕсли;
		
		Итерация=Итерация+1;
	КонецЦикла;
	
	Возврат Классификатор;
	
КонецФункции

Функция ПолучитьОКОПФМеркурий() Экспорт
	Если ОКОПФ<>Неопределено Тогда
		Возврат ОКОПФ;
	КонецЕсли;
		
	//инициализация
	ДанныеМакета = МеркурийЗагрузитьКлассификаторИзМакета("МеркурийОКОПФ");
	ОКОПФ = Новый ТаблицаЗначений();
	ОКОПФ.Колонки.Добавить("Код");
	ОКОПФ.Колонки.Добавить("Наименование");
	
	Для каждого СтрокаСписка Из ДанныеМакета Цикл
		
		НоваяСтрока = ОКОПФ.Добавить();
		НоваяСтрока.Наименование = СтрокаСписка.Представление;
		НоваяСтрока.Код = СтрокаСписка.Значение;
	
	КонецЦикла;
	
	Возврат ОКОПФ;
	
КонецФункции


Функция МеркурийЗагрузитьКлассификаторИзМакета(Тип) Экспорт //Задублировали для того чтобы можно было классификатор кинуть в Этот Модуль
	
	Результат = ОсновнойМодуль.ЭДО_Кэш_Прочитать("Классификатор_"+Тип);
	
	Если Результат=Неопределено Тогда
		
		Результат = Новый СписокЗначений;
		
		Макет = ПолучитьМакет("Классификатор_"+Тип);
		Таб = Макет.ПолучитьОбласть("Данные");
		
		Для Сч=1 По Таб.ВысотаТаблицы Цикл
			
			НомерСтроки = Формат(сч,"ЧГ=");
			
			ТекстЗначения = Таб.Область("R"+НомерСтроки+"C1").Текст;
			ТекстПредставления = Таб.Область("R"+НомерСтроки+"C2").Текст;
			
			Результат.Добавить(ТекстЗначения,ТекстПредставления);
			
		КонецЦикла;
		
		ОсновнойМодуль.ЭДО_Кэш_Поместить("Классификатор_"+Тип,Результат);
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции


Процедура ЗаписатьЭлементСправочникаМеркурий(ИмяСправочника, Объект, GUID, 	Отказ, Наш = Ложь, ДопСправочникСсылка=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ДопСправочникСсылка) Тогда
		НовыйЭлементСправочника = ДопСправочникСсылка.ПолучитьОбъект();
	Иначе
		НовыйЭлементСправочника = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
	КонецЕсли;
	НовыйЭлементСправочника.Наименование = Строка(Объект);
	НовыйЭлементСправочника.ИмяСправочника = СокрЛП(ИмяСправочника);
	
	ЗаписатьРеквизитСообщенияМеркурий("GUID",GUID,,НовыйЭлементСправочника,Ложь);
	ЗаписатьРеквизитСообщенияМеркурий("Объект",Объект,,НовыйЭлементСправочника,Ложь);
	ЗаписатьРеквизитСообщенияМеркурий("Наш",Наш,,НовыйЭлементСправочника,Ложь);
	
	//СвойствоGUID = НовыйЭлементСправочника.ДополнительныеРеквизиты.Найти("GUID","ИмяРеквизита");
	//Если Не ЗначениеЗаполнено(СвойствоGUID) Тогда
	//	СвойствоGUID = НовыйЭлементСправочника.ДополнительныеРеквизиты.Добавить();
	//КонецЕсли;
	//СвойствоGUID.ИмяРеквизита = "GUID";
	//СвойствоGUID.Значение = GUID;
	//
	//СвойствоОбъект = НовыйЭлементСправочника.ДополнительныеРеквизиты.Найти("Объект","ИмяРеквизита");
	//Если Не ЗначениеЗаполнено(СвойствоОбъект) Тогда
	//	СвойствоОбъект = НовыйЭлементСправочника.ДополнительныеРеквизиты.Добавить();
	//КонецЕсли;
	//СвойствоОбъект.ИмяРеквизита = "Объект";
	//СвойствоОбъект.Значение = Объект;
	//
	//СвойствоНаш = НовыйЭлементСправочника.ДополнительныеРеквизиты.Найти("Наш","ИмяРеквизита");
	//Если Не ЗначениеЗаполнено(СвойствоНаш) Тогда
	//	СвойствоНаш = НовыйЭлементСправочника.ДополнительныеРеквизиты.Добавить();
	//КонецЕсли;
	//СвойствоНаш.ИмяРеквизита = "Наш";
	//СвойствоНаш.Значение = Наш;
	//НовыйЭлементСправочника.ПометкаУдаления = ложь;
	//
	НовыйЭлементСправочника.Записать();
	
КонецПроцедуры

Функция Создать_businessMember_XDTO(ХСGUID,GUIDПлощадки)
	
	//этот параметр функции далее не будет использоваться т.к. недокументированные возможности Меркурия позволяют его не отправлять в запросах по складскому журналу
	businessMember  = ПолучитьОбъектXDTOМеркурий("Цербер", "BusinessMember");
	businessMember.businessEntity  = ПолучитьОбъектXDTOМеркурий("Цербер", "BusinessEntity");
	businessMember.enterprise  = ПолучитьОбъектXDTOМеркурий("Цербер", "Enterprise");
	xmlЗаполнитьЗначениеXDTO(businessMember.businessEntity,"guid",ХСGUID);
	xmlЗаполнитьЗначениеXDTO(businessMember.enterprise,"guid",GUIDПлощадки);

	Возврат businessMember;
	
КонецФункции // Создать_businessMember_XDTO()


Функция ПолучитьИзмененияЗаписейСкладскогоЖурналаЗаИнтервал(GUIDПлощадки,ДатаС,ДатаПо,ХСGUID) Экспорт //эти даты ждем по московскому времени
	
	ТаблицаНовыхЗаписей = ПолучитьПустуюТаблицуДляХраненияПартий();
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(ХСGUID,GUIDПлощадки);
	
	businessMember  = Создать_businessMember_XDTO(ХСGUID,GUIDПлощадки);
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("Наименование", 		"getStockEntryChangesListRequest");
	ПараметрыФункции.Вставить("initiator", 			ПараметрыПодключения.user);
	ПараметрыФункции.Вставить("enterpriseGuid",		GUIDПлощадки);
	ПараметрыФункции.Вставить("localTransactionId", "IncomingRobot");
	ПараметрыФункции.Вставить("businessMember", 	businessMember);
	
	DateInterval = ПолучитьОбъектXDTOМеркурий("Общие", "DateInterval");
	
	DateInterval.beginDate = ДатаС - СмещениеЧасовОтМосквы*3600;
	//всегда будем спрашивать на тек дату
	//DateInterval.endDate = Формат(ДатаПо, "ДФ=yyyy-MM-ddTЧЧ:мм:сс")+НашЧасовойпоясПостфикс;
	ПараметрыФункции.Вставить("updateDateInterval", DateInterval);
	
	Смещение = 0;
	
	//Вычитываем все записи журнала
	Пока Истина Цикл
		ПараметрыПодключения.ListOptions.offset = Смещение;
		ПараметрыФункции.Вставить("listOptions", ПараметрыПодключения.ListOptions);		
		//Дожидаться результата
		ОтветXDTO = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "getStockEntryChangesListRequest", Истина);
		
		Если ТипЗнч(ОтветXDTO) <> Тип("ОбъектXDTO") Тогда
			Возврат ТаблицаНовыхЗаписей;
		КонецЕсли;
		
		ОтветСписокТоваровXDTO = ОтветXDTO.result.getStockEntryChangesListResponse.stockEntryList;
		
		Если Число(ОтветСписокТоваровXDTO.Count) = 0 Тогда 
			Прервать;
			Возврат ТаблицаНовыхЗаписей;
		КонецЕсли;
		
		//Обработка строк	
		/////////////////////////////////////////////////////////////////
		Если Число(ОтветСписокТоваровXDTO.total) = 0 Тогда
			Возврат ТаблицаНовыхЗаписей;
		ИначеЕсли Число(ОтветСписокТоваровXDTO.total) = 1 Тогда
			ЕдинственнаяСтрока = ОтветСписокТоваровXDTO.stockEntry;
			СписокstockEntry = Новый Массив;
			СписокstockEntry.Добавить(ЕдинственнаяСтрока);
		Иначе
			СписокstockEntry = ОтветСписокТоваровXDTO.stockEntry;
		КонецЕсли;
		
		Для Каждого СтрокаОстатков из СписокstockEntry Цикл
			
			ПартияОстатков = СтрокаОстатков.batch;
			//здесь нам нужны все строки так как нам будут рассказывать про устаревание наших партий
			//Если НРег(СтрокаОстатков.active)<>"true" 
			//	ИЛИ СтрокаОстатков.status = "400" ИЛИ СтрокаОстатков.status = "410" ИЛИ СтрокаОстатков.status = "420" ИЛИ СтрокаОстатков.status = "430" ИЛИ СтрокаОстатков.status = "201" 
			//	ИЛИ Число(ПартияОстатков.volume) = 0 Тогда
			//	Продолжить;
			//КонецЕсли;
			
			стр = ТаблицаНовыхЗаписей.Добавить();
			
			ЗаполнитьСтрокуПартииИз_stockEntry(стр,СтрокаОстатков);
			
		КонецЦикла;
		/////////////////////////////////////////////////////////////////	
		
		Если Число(ОтветСписокТоваровXDTO.Count) + Смещение >= Число(ОтветСписокТоваровXDTO.Total) Тогда 
			Прервать; 
		КонецЕсли;
		Смещение = Смещение + ПараметрыПодключения.ListOptions.Count;
	КонецЦикла;
	
	Возврат ТаблицаНовыхЗаписей;

КонецФункции

Функция ЗаполнитьСкладскойЖурналПлощадки(GUIDПлощадки,ОбновитьКЭШ=Ложь,ХСGUID)
	
	Если ОперативныйСкладскойЖурнал = Неопределено Тогда
		СоздатьОсновнуюТаблицуДанныхИАктуальностей();
	КонецЕсли;
	
	НайденнаяВетвьСЖМассив = ОперативныйСкладскойЖурнал.НайтиСтроки(Новый Структура("ХС_GUID, Площадка_GUID",ХСGUID,GUIDПлощадки));
	
	Если НайденнаяВетвьСЖМассив.Количество() = 0 Тогда 
		ДатаАктуальностиДляХСпоПлощадке = Дата(1,1,1);
		СоздатьОперативныйСкладскойЖурналПлощадки(GUIDПлощадки, ХСGUID);
		НайденнаяВетвьСЖМассив = ОперативныйСкладскойЖурнал.НайтиСтроки(Новый Структура("ХС_GUID, Площадка_GUID",ХСGUID,GUIDПлощадки));
		НайденнаяВетвьСЖ = НайденнаяВетвьСЖМассив[0];
	Иначе
		НайденнаяВетвьСЖ = НайденнаяВетвьСЖМассив[0];
		ДатаАктуальностиДляХСпоПлощадке = НайденнаяВетвьСЖ.ДатаАктуальности;
	КонецЕсли;
	
	СтараяТаблицаДанных = НайденнаяВетвьСЖ.Данные;
	ДатаЗапроса= ТекущаяДата();
	
	Если ДатаАктуальностиДляХСпоПлощадке = Дата(1,1,1) 
		ИЛИ ДатаАктуальностиДляХСпоПлощадке = Неопределено 
		ИЛИ СтараяТаблицаДанных = Неопределено 
		ИЛИ ОбновитьКЭШ = Истина Тогда
		
		ОсновнойМодуль.Состояние_КонтурEDI("Читаю весь складской журнал.");
		НайденнаяВетвьСЖ.Данные=ЗапроситьИзМеркурияВсеЗаписиСкладскогоЖурнала(GUIDПлощадки,ХСGUID);
		НайденнаяВетвьСЖ.ДатаАктуальности = ДатаЗапроса;
	Иначе
		ОсновнойМодуль.Состояние_КонтурEDI("Проверяю актуальность складского журнала.");
		
		//каждый раз, получая данные мы уничтожаем Использованное количество.
		//ИспользованноеЕоличество может жить только в КЭШе и только в пакетном режиме выполнения транзакций.
		Если СтараяТаблицаДанных.Колонки.Найти("КоличествоИспользовано") <> Неопределено Тогда
			СтараяТаблицаДанных.Колонки.Удалить("КоличествоИспользовано");
		КонецЕсли;
		
		ДополнитьСтаруюТаблицуДанныхПлощадки(GUIDПлощадки,СтараяТаблицаДанных,ХСGUID,ДатаАктуальностиДляХСпоПлощадке);
		
		НайденнаяВетвьСЖ.Данные = СтараяТаблицаДанных;
		НайденнаяВетвьСЖ.ДатаАктуальности = ДатаЗапроса;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ДополнитьСкладскойЖурналИзменениями()

Функция ДополнитьСтаруюТаблицуДанныхПлощадки(GUIDПлощадки,СтараяТаблицаДанных,ХСGUID,ДатаАктуальностиДляХСпоПлощадке)
	
	ТаблицаНовыхЗаписей = ПолучитьИзмененияЗаписейСкладскогоЖурналаЗаИнтервал(GUIDПлощадки,ДатаАктуальностиДляХСпоПлощадке,ТекущаяДата(),ХСGUID);
	//Для отладки:  
	//ТаблицаНовыхЗаписей = ПолучитьИзмененияЗаписейСкладскогоЖурналаЗаИнтервал(GUIDПлощадки,Дата(2017,09,25,20,0,0),ТекущаяДата()); //Указать интересующий интервал. Удачных полетов во времени, Док.
	
	ТаблицаНовыхЗаписей.Сортировать("Активная Возр"); //это для того чтобы корректно обработать кейс когда за один интервал с партией и что-то происходит(например мы её произвели) и она аннулируется
	//Отразить
	Для Каждого СтрокаНовыхПартий ИЗ ТаблицаНовыхЗаписей Цикл
		НайденнаяСтарая = СтараяТаблицаДанных.Найти(СтрокаНовыхПартий.GUID_Партии,"GUID_Партии");
		Если НайденнаяСтарая = Неопределено Тогда
			//если это активная партия - с ненулевым количеством то добавляем
			Если СтрокаНовыхПартий.Активная и СтрокаНовыхПартий.Остаток >0 тогда
				НоваяПартия = СтараяТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяПартия,СтрокаНовыхПартий);//докинули
			КонецЕсли;
		Иначе
			Если СтрокаНовыхПартий.Активная = Ложь Тогда
				СтараяТаблицаДанных.Удалить(НайденнаяСтарая);
			Иначе
				//найдена строка присваиваем все как есть
				ЗаполнитьЗначенияСвойств(НайденнаяСтарая,СтрокаНовыхПартий);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//теперь обойти и повыкидывать строки с 0 количеством и не активные
	ВсегоСтрок= СтараяТаблицаДанных.количество();
	
	Для й=1 по ВсегоСтрок Цикл
		СтрокаОбходаСнизуВверх = СтараяТаблицаДанных[ВсегоСтрок-й];
		Если СтрокаОбходаСнизуВверх.Остаток = 0
			ИЛИ СтрокаОбходаСнизуВверх.Активная = Ложь Тогда
			СтараяТаблицаДанных.Удалить(СтрокаОбходаСнизуВверх);
		КонецЕсли;
	КонецЦикла;
	
	//надо бы достать номенклатуру там где заполнен productItemUUID 
	ЗаполнитьНоменклатуруСкладскогоЖурнала(СтараяТаблицаДанных);
	
	Если ПакетныйРежим = Истина Тогда
		
		GUIDПлощадкиБезДефисов = СтрЗаменить(GUIDПлощадки,"-","");
		GUIDХСБезДефисов = СтрЗаменить(ХСGUID,"-","");
		ОсновнойМодуль.ЭДО_Кэш_Поместить("Меркурий_СкладскойЖурнал"+GUIDПлощадкиБезДефисов+"_"+GUIDХСБезДефисов,СтараяТаблицаДанных);
	КонецЕсли;
	
	
	Возврат СтараяТаблицаДанных;

КонецФункции // ДополнитьСкладскойЖурналИзменениями()

Процедура СоздатьОперативныйСкладскойЖурналПлощадки(GUIDПлощадки, ХСGUID)
	
	Если ОперативныйСкладскойЖурнал = Неопределено Тогда
		СоздатьОсновнуюТаблицуДанныхИАктуальностей();
	КонецЕсли;
	
	НоваяСтрока = ОперативныйСкладскойЖурнал.Добавить();
	НоваяСтрока.ХС_GUID = ХСGUID;
	НоваяСтрока.Площадка_GUID = GUIDПлощадки;
	НоваяСтрока.ДатаАктуальности = Дата(1,1,1);
	НоваяСтрока.Данные = ПолучитьПустуюТаблицуДляХраненияПартий();
	
КонецПроцедуры

Функция СоздатьОсновнуюТаблицуДанныхИАктуальностей()
	
	КЧ = Новый КвалификаторыЧисла(12,3);
	КС = Новый КвалификаторыСтроки(36);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповGUID = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);

	ОперативныйСкладскойЖурнал = Новый ТаблицаЗначений();
	ОперативныйСкладскойЖурнал.Колонки.Добавить("ХС_GUID", ОписаниеТиповGUID);
	ОперативныйСкладскойЖурнал.Колонки.Добавить("Площадка_GUID", ОписаниеТиповGUID);
	ОперативныйСкладскойЖурнал.Колонки.Добавить("ДатаАктуальности", Новый ОписаниеТипов("Дата", , ,
														 Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОперативныйСкладскойЖурнал.Колонки.Добавить("Данные");

КонецФункции // СоздатьОсновнуюТаблицуДанныхИАктуальностей()


Функция ПолучитьПустуюТаблицуДляХраненияПартий() Экспорт
	
	КЧ = Новый КвалификаторыЧисла(12,3);
	КС = Новый КвалификаторыСтроки(36);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповGUID = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Активная",Новый ОписаниеТипов("Булево"));
	ТаблицаОстатков.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов(ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("Номенклатура")));
	ТаблицаОстатков.Колонки.Добавить("Наименование");
	ТаблицаОстатков.Колонки.Добавить("Статус",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(3, ДопустимаяДлина.Фиксированная)));
	ТаблицаОстатков.Колонки.Добавить("Остаток",ОписаниеТиповЧ);
	ТаблицаОстатков.Колонки.Добавить("ОстатокУпаковок",ОписаниеТиповЧ);
	ТаблицаОстатков.Колонки.Добавить("ДатаВыпуска",Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаВыпуска2",Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ГоденДо",Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ГоденДо2",Новый ОписаниеТипов("Дата"));
	//ТаблицаОстатков.Колонки.Добавить("Производитель");  // вот эти 2 колонки тоже идентификаторы партии!
	//ТаблицаОстатков.Колонки.Добавить("Маркировки");
	ТаблицаОстатков.Колонки.Добавить("НомерЗаписи",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("GUID_Партии",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("UUID_Партии",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("unitUUID",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("ЕдиницаИзмеренияУпаковокUUID",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("subProductGuid",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("productItemUUID",	ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("Скоропортящаяся",Новый ОписаниеТипов("Булево"));
	ТаблицаОстатков.Колонки.Добавить("ProducerGUID",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("СтранаUUID",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("ВладелецGUID",ОписаниеТиповGUID);
	
	Возврат ТаблицаОстатков
	
КонецФункции

Функция ЗаполнитьСтрокуПартииИз_stockEntry(стр,СтрокаОстатков)
	
			ПартияОстатков = СтрокаОстатков.batch;
	
			СписокСвойств = ПартияОстатков.Свойства();
			
			стр.Активная = СтрокаОстатков.active = "true";
			стр.Статус 	 = ВычислитьXDTO(СтрокаОстатков,"status");
			                      
			стр.ДатаВыпуска 	= ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(ПартияОстатков,"dateOfProduction.firstdate"));
			Если ПартияОстатков.DateOfProduction.Свойства().Получить("seconddate")<>Неопределено Тогда
				стр.ДатаВыпуска2 	= ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(ПартияОстатков,"dateOfProduction.seconddate"));
			КонецЕсли;
			
			Если СписокСвойств.Получить("expirydate") <> Неопределено Тогда
				стр.ГоденДо 		= ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(ПартияОстатков,"expirydate.firstdate"));
				Если ПартияОстатков.expirydate.Свойства().Получить("seconddate")<>Неопределено Тогда
					стр.ГоденДо2 		= ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(ПартияОстатков,"expirydate.seconddate"));
				КонецЕсли;
			КонецЕсли;
			стр.НомерЗаписи    = СтрокаОстатков.entryNumber;
			Если ПартияОстатков.Свойства().Получить("productItem") <> Неопределено Тогда
				Если ВычислитьXDTO(ПартияОстатков,"productItem.uuid") <> Неопределено Тогда
					стр.productItemUUID = ВычислитьXDTO(ПартияОстатков,"productItem.uuid");
				КонецЕсли;
				Если ВычислитьXDTO(ПартияОстатков,"productItem.name") <> Неопределено Тогда
					стр.Наименование = ВычислитьXDTO(ПартияОстатков,"productItem.name");
				КонецЕсли;
			КонецЕсли;
			стр.subProductGuid 	= ПартияОстатков.subProduct.guid;
			
			//возьмем первую строку производителя, если она единственная
			ProducerGUID = ВычислитьXDTO(ПартияОстатков,"producerList.producer.enterprise.guid");
			Если ProducerGUID <> Неопределено Тогда
				стр.ProducerGUID = ProducerGUID;
			КонецЕсли;
			//СтранаGUID
			СтранаUUID = ВычислитьXDTO(ПартияОстатков,"countryOfOrigin.uuid");
			Если СтранаUUID <> Неопределено Тогда
				стр.СтранаUUID = СтранаUUID;
			КонецЕсли;
			
			стр.unitUUID						= ПартияОстатков.unit.uuid;
			Если ПартияОстатков.Свойства().Получить("packingList")<>Неопределено Тогда  //упаковок может и не быть
				стр.ЕдиницаИзмеренияУпаковокUUID	= ВычислитьXDTO(ПартияОстатков,"packingList.packingForm.uuid");
			КонецЕсли;
			
			стр.Остаток			= ПреобразоватьКоличествоИзМ_В1С(ВычислитьXDTO(ПартияОстатков,"Volume"));
			стр.ОстатокУпаковок	= ПреобразоватьКоличествоИзМ_В1С(ВычислитьXDTO(ПартияОстатков,"packingAmount"));
			стр.Скоропортящаяся = Булево(ПартияОстатков.perishable);
			
			стр.ВладелецGUID 	= ВычислитьXDTO(ПартияОстатков.owner,"guid");
			
			//избыточные
			//стр.productGuid 	= ПартияОстатков.product.guid;
			//стр.productType		= ПартияОстатков.productType;
			
			стр.GUID_Партии		= ВычислитьXDTO(СтрокаОстатков,"guid");
			стр.UUID_Партии		= ВычислитьXDTO(СтрокаОстатков,"uuid");
КонецФункции

Функция ПреобразоватьКоличествоИзМ_В1С(СтрокаСКоличеством)
	
	ПозицияЕ = Найти(СтрокаСКоличеством,"E");
	Если ПозицияЕ = 0 Тогда	
		Возврат Число(СтрокаСКоличеством);
	Иначе
		ПослеЕ = Сред(СтрокаСКоличеством,ПозицияЕ+1);
		Порядок = Число(ПослеЕ);
		
		Значение = Число(Лев(СтрокаСКоличеством,ПозицияЕ-1)) * Pow(10,Порядок);
		
		Возврат Значение;                       
	КонецЕсли;
	
КонецФункции

Функция ЗапроситьИзМеркурияВсеЗаписиСкладскогоЖурнала(GUIDПлощадки,ХСGUID)
	
	//получим складской остаток
	ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(ХСGUID,GUIDПлощадки);
	businessMember  = Создать_businessMember_XDTO(ХСGUID,GUIDПлощадки);
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("Наименование", 		"getStockEntryListRequest");
	ПараметрыФункции.Вставить("initiator", 			ПараметрыПодключения.user);
	ПараметрыФункции.Вставить("enterpriseGuid",		GUIDПлощадки);
	ПараметрыФункции.Вставить("localTransactionId", "IncomingRobot");
	ПараметрыФункции.Вставить("businessMember", 	businessMember);
	
	ТаблицаОстатков = ПолучитьПустуюТаблицуДляХраненияПартий();
	                                  
	ТаблицаОстатков.Очистить();           
	Смещение = 0;
	
	//Вычитываем все записи журнала
	Пока Истина Цикл
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		ПараметрыПодключения.ListOptions.offset = Смещение;
		ПараметрыФункции.Вставить("listOptions", ПараметрыПодключения.ListOptions);		
		//Дожидаться результата
		Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "getStockEntryListRequest", Истина);
		
		Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
			Прервать;	
		КонецЕсли;
		
		ОтветСписокТоваровXDTO = Ответ.result.getStockEntryListResponse.stockEntryList;
		
		Если ОтветСписокТоваровXDTO.Count = 0 Тогда 
			Прервать; 
		КонецЕсли;
		
		//Обработка строк	
		/////////////////////////////////////////////////////////////////
		Если ОтветСписокТоваровXDTO.total = "0" Тогда
			Возврат ТаблицаОстатков;
		ИначеЕсли ОтветСписокТоваровXDTO.total = "1" Тогда
			ЕдинственнаяСтрока = ОтветСписокТоваровXDTO.stockEntry;
			СписокstockEntry = Новый Массив;
			СписокstockEntry.Добавить(ЕдинственнаяСтрока);
		Иначе
			СписокstockEntry = ОтветСписокТоваровXDTO.stockEntry;
		КонецЕсли;
		
		Для Каждого СтрокаОстатков из СписокstockEntry Цикл
			
			ПартияОстатков = СтрокаОстатков.batch;
			//Не подходят не активные строки и строки где остаток равен 0
			Если НРег(СтрокаОстатков.active)<>"true" 
				ИЛИ СтрокаОстатков.status = "400" ИЛИ СтрокаОстатков.status = "410" ИЛИ СтрокаОстатков.status = "420" ИЛИ СтрокаОстатков.status = "430" ИЛИ СтрокаОстатков.status = "201" 
				ИЛИ ПреобразоватьКоличествоИзМ_В1С(ПартияОстатков.volume) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			стр = ТаблицаОстатков.Добавить();
			
			ЗаполнитьСтрокуПартииИз_stockEntry(стр,СтрокаОстатков);
			
		КонецЦикла;
		/////////////////////////////////////////////////////////////////	
		
		Если Число(ОтветСписокТоваровXDTO.Count) + Смещение >= Число(ОтветСписокТоваровXDTO.Total) Тогда 
			Прервать; 
		КонецЕсли;
		Смещение = Смещение + ПараметрыПодключения.ListOptions.Count;
		
	КонецЦикла;
	//надо бы достать свою номенклатуру там где заполнен productItemUUID 
	ЗаполнитьНоменклатуруСкладскогоЖурнала(ТаблицаОстатков);
	
	Если ПакетныйРежим = Истина Тогда
		GUIDПлощадкиБезДефисов = СтрЗаменить(GUIDПлощадки,"-","");
		GUIDХСБезДефисов = СтрЗаменить(ХСGUID,"-","");
		ОсновнойМодуль.ЭДО_Кэш_Поместить("Меркурий_СкладскойЖурнал"+GUIDПлощадкиБезДефисов+"_"+GUIDХСБезДефисов,ТаблицаОстатков);
	КонецЕсли;
	
	Возврат ТаблицаОстатков;
	
КонецФункции


Процедура ЗаполнитьНоменклатуруСкладскогоЖурнала(ТаблицаОстатков)
	
	ОбновленныеproductItemUUID = Новый ТаблицаЗначений;
	ОбновленныеproductItemUUID.Колонки.Добавить("СтарыйUUID");
	ОбновленныеproductItemUUID.Колонки.Добавить("АктуальныйUUID");
	ОбновленныеproductItemUUID.Колонки.Добавить("Наименование");
	
	КэшУчетныхЗаписей();
	
	ТаблицаproductItemUUID = ПолучитьТаблицу_productItemДляСкладскогоОстатка(ТаблицаОстатков.ВыгрузитьКолонку("productItemUUID"));
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		Если ЗначениеЗаполнено(СтрокаОстатков.productItemUUID) Тогда
			
			НайденоВКэшеОбновлений = ОбновленныеproductItemUUID.Найти(СтрокаОстатков.productItemUUID,"СтарыйUUID");
			Если НайденоВКэшеОбновлений<>Неопределено Тогда 
				СтрокаОстатков.productItemUUID = НайденоВКэшеОбновлений.АктуальныйUUID;
				Если ЗначениеЗаполнено(НайденоВКэшеОбновлений.Наименование) и Не ЗначениеЗаполнено(СтрокаОстатков.Наименование)Тогда
					СтрокаОстатков.Наименование = НайденоВКэшеОбновлений.Наименование;
				КонецЕсли;
				НайденнаяНоменклатура = ТаблицаproductItemUUID.Найти(СтрокаОстатков.productItemUUID,"productItemUUID");
				Если НайденнаяНоменклатура<>Неопределено Тогда 
					СтрокаОстатков.Номенклатура = НайденнаяНоменклатура.Номенклатура;
				КонецЕсли;
			КонецЕсли;
			
			НайденнаяНоменклатура = ТаблицаproductItemUUID.Найти(СтрокаОстатков.productItemUUID,"productItemUUID");
			Если НайденнаяНоменклатура<>Неопределено Тогда 
				СтрокаОстатков.Номенклатура = НайденнаяНоменклатура.Номенклатура;
				СтрокаОстатков.Наименование = "";
			Иначе
				Если НайденоВКэшеОбновлений = Неопределено Тогда 
					//возможно запись уже не та? - надо спросить и подменить UUID если это так
					//НО! требуется сделать это только если производитель - это наша площадка!
					Если ЗначениеЗаполнено(СтрокаОстатков.ProducerGUID) 
						И КэшУчетныхЗаписей().Найти(СтрокаОстатков.ProducerGUID,"ПлощадкаGUID")<>Неопределено Тогда //Это наша площадка
						//Сообщить("По продукту: "+СтрокаОстатков.productItemUUID+" устарел UUID, обновляю");
						РезультатОпределенияСвежегоUUID = ПолучитьСамуюСвежую_productItemUUID_ПоUUID(СтрокаОстатков.productItemUUID);
						Если РезультатОпределенияСвежегоUUID.Успешно Тогда
							Если РезультатОпределенияСвежегоUUID.Активен Тогда
								НоваяСтрока = ОбновленныеproductItemUUID.Добавить();
								НоваяСтрока.СтарыйUUID = СтрокаОстатков.productItemUUID;
								НоваяСтрока.АктуальныйUUID = РезультатОпределенияСвежегоUUID.ПоследнийUUID;
								НоваяСтрока.Наименование = РезультатОпределенияСвежегоUUID.Наименование;
								Если СтрокаОстатков.productItemUUID <> РезультатОпределенияСвежегоUUID.ПоследнийUUID Тогда
									СтрокаОстатков.productItemUUID = РезультатОпределенияСвежегоUUID.ПоследнийUUID;
									//и попробовать заново найти номенклатуру
									НайденнаяНоменклатура = ТаблицаproductItemUUID.Найти(СтрокаОстатков.productItemUUID,"productItemUUID");
									Если НайденнаяНоменклатура<>Неопределено Тогда 
										СтрокаОстатков.Номенклатура = НайденнаяНоменклатура.Номенклатура;
									КонецЕсли;
								Иначе
									Сообщить("В складских остатках найдена запись с productItemUUID "+СтрокаОстатков.productItemUUID+" которая отсутствует в соответствиях каталога! Проверьте Каталог!"); 
								КонецЕсли;
							Иначе
								ОчиститьУдаленныеProductItemUUID(ТаблицаОстатков,СтрокаОстатков.productItemUUID);
							КонецЕсли;
							
						Иначе
							//Сообщить("По продукту: "+СтрокаОстатков.productItemUUID+" не смог узнать свежий UUID");
						КонецЕсли;

					КонецЕсли;
				КонецЕсли;

				//Если у нас так и осталась незаполненной номенклатура - то поставим хотя бы наименование (это должно быть номенклатура чужой площадки)
				Если Не ЗначениеЗаполнено(СтрокаОстатков.Наименование) и НЕ ЗначениеЗаполнено(СтрокаОстатков.Номенклатура) Тогда
					НайденоВКэшеОбновлений = ОбновленныеproductItemUUID.Найти(СтрокаОстатков.productItemUUID,"СтарыйUUID");
					Если НайденоВКэшеОбновлений<>Неопределено Тогда 
						СтрокаОстатков.Наименование = НайденоВКэшеОбновлений.Наименование;
					Иначе
						РезультатОпределенияСвежегоUUID = ПолучитьСамуюСвежую_productItemUUID_ПоUUID(СтрокаОстатков.productItemUUID);
						Если РезультатОпределенияСвежегоUUID.Успешно Тогда
							СтрокаОстатков.Наименование = РезультатОпределенияСвежегоUUID.Наименование;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				//и в завершении - если мы нашли номенклатуру - то точно чистим наименование - так мы отделяем продукцию произведенную нами от не нашей
				Если ЗначениеЗаполнено(СтрокаОстатков.Наименование) и ЗначениеЗаполнено(СтрокаОстатков.Номенклатура) Тогда
					СтрокаОстатков.Наименование = "";
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьУдаленныеProductItemUUID(ТаблицаОстатков,productItemUUID)
	
	НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(Новый Структура("productItemUUID",productItemUUID));
	Если НайденныеСтроки.Количество()>0 Тогда 
		НазваниеСпрНоменклатуры = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("Номенклатура",Ложь,Истина);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.productItemUUID = "";
			НайденнаяСтрока.Номенклатура = Справочники[НазваниеСпрНоменклатуры].ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьТранзакциюМеркурий(Сообщение,Параметры = Неопределено) Экспорт
	
	ТаблицаОшибок = ОсновнойМодуль.ИнициализироватьТаблицуОшибок();
	
	ОбязательныеПоля = ПолучитьОбязательныеПоляТранзакцииМеркурий(Сообщение);
	
	МетаданныеСообщения = ПолучитьМетаданныеСообщенияМеркурий(Сообщение.ТипСообщения, Сообщение.Направление);
	
	ПроверитьПоляТранзакцииМеркурий(Сообщение, МетаданныеСообщения, ТаблицаОшибок, "", , , ОбязательныеПоля);
	
	ВыполнитьСложныеПроверки(Сообщение, ТаблицаОшибок);
	
	//Результаты
	РезультатПроверки = Новый Структура();
	Если ТаблицаОшибок.Количество() = 0 Тогда
		РезультатПроверки.Вставить("Успешно",Истина);
	Иначе
		РезультатПроверки.Вставить("Успешно",Ложь);
		РезультатПроверки.Вставить("СписокОшибок",ТаблицаОшибок);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции


Функция ПолучитьОбязательныеПоляТранзакцииМеркурий(Сообщение) Экспорт
	
	ТаблицаОбязательныхПолей = Новый ТаблицаЗначений;
	ТаблицаОбязательныхПолей.Колонки.Добавить("ИмяПоля");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ИмяПоляУсловия");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ВидСравнения");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ЗначениеПоляУсловия");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ПравилоПроверки");
	
	ТаблицаОбязательныхПолей.Индексы.Добавить("ИмяПоля");
	
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ПлощадкаEDI.GUID");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ХозяйствующийСубъектEDI.GUID");
	
	//ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ДокументEDI.Номер");   //эти проверки перенесены в сложные
	//ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ДокументEDI.Дата");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ДатаОтгрузки");
	
	Если Сообщение.ТипСообщения = "M_DES" 
		ИЛИ Сообщение.ТипСообщения = "M_MOV" Тогда
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ПлощадкаПолучательEDI.GUID");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ХозяйствующийСубъектПолучательEDI.GUID");
	КонецЕсли;
	
	//Таб части        
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.GUID");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.unitUUID");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.Количество");
	
	Если Сообщение.ТипСообщения = "M_REC" Тогда
		//нам необходимо внести все сведения из всд вручную
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ДатаПроизводства");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.СрокГодности");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.СтранаUUID");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатДата");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатСерия");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатНомер");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатФорма");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатВрачФИО");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатВрачДолжность");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатБлагополучиеМестности");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатСпособХраненияПриПеревозке");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ПлощадкаПроизводитель");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ПлощадкаПроизводительGUID");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ЦельEDI");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатЭкспертиза");
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_INC" Тогда
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.СтатусРасхождений");//переделать на документ
	КонецЕсли;
		
	Если Сообщение.ТипСообщения = "M_PRD" Тогда
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ДатаПроизводства");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.СрокГодности");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Сырье.GUID");
		Если ПолучитьКонстантуEDI("М_ИспользоватьНезавершенноеПроизводство")<>Истина Тогда
			ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Сырье.unitUUID");
			ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Сырье.Количество");
		КонецЕсли;
	КонецЕсли;
		
	Если Сообщение.ТипСообщения = "M_DES" 
		ИЛИ Сообщение.ТипСообщения = "M_MOV" Тогда
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ИсходнаяПартияGUID");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ВетСертификатЭкспертиза");
	ИначеЕсли Сообщение.ТипСообщения = "M_PRD" Тогда	
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Сырье.ИсходнаяПартияGUID");
	КонецЕсли;
	
	Возврат ТаблицаОбязательныхПолей;
	
КонецФункции // ПолучитьОбязательныеПоляТранзакции(Сообщение()

Процедура ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей,Имя)

	ОсновнойМодуль.ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей,Имя);	

КонецПроцедуры

Процедура ВыполнитьСложныеПроверки(Сообщение, ТаблицаОшибок)

	Если Сообщение.ТипСообщения = "M_PRD"
		И Сообщение.Завершена = Ложь
		И (Не ЗначениеЗаполнено(Сообщение.ИдентификаторПроизводственнойТранзакции)) Тогда
		
		ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"","","","Не указан идентификатор производственной транзакции незавершенного производства!");
	КонецЕсли;
	
	//если указываем количество упаковок - надо указать и что за упаковки
	Если Сообщение.ТипСообщения = "M_PRD" Тогда
		Для Каждого СтрокаТоваров Из Сообщение.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТоваров.КоличествоУпаковок) И Не ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмеренияУпаковокUUID) Тогда
			ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"ЕдиницаИзмеренияУпаковокUUID","Товары","","Укажите соответствие упаковки!");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_DES"
		И ЗначениеЗаполнено(Сообщение.Перевозчик1С) 
		И НЕ ЗначениеЗаполнено(Сообщение.ПеревозчикEDI.GUID) Тогда
		
		ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"","","","Не сопоставлена с Меркурием фирма - перевозчик");
	КонецЕсли;
	
	//Ааавтомобиль //или ЖД или авиа или судно
	Если (Сообщение.ТипСообщения = "M_DES"	ИЛИ Сообщение.ТипСообщения = "M_MOV" ИЛИ Сообщение.ТипСообщения = "M_REC") 
		И Сообщение.ПлощадкаПолучатель1С <> Сообщение.Площадка1С
		Тогда
		Если Не ЗначениеЗаполнено(Сообщение.Транспорт.НомерАвиарейса)
			И Не ЗначениеЗаполнено(Сообщение.Транспорт.НомерВагона)
			И Не ЗначениеЗаполнено(Сообщение.Транспорт.НомерКонтейнера)
			И Не ЗначениеЗаполнено(Сообщение.Транспорт.НомерТранспортногоСредства)
			Тогда
			ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"","","","Укажите хотя бы один из идентификаторов транспорта. (номер а/м, вагона итд.)");
		КонецЕсли;
		Если (Сообщение.ТипСообщения = "M_DES"	ИЛИ Сообщение.ТипСообщения = "M_MOV")
			И Сообщение.МультимодальнаяПеревозка = Истина Тогда
			
			Если Сообщение.Маршрут.Количество()<=1 Тогда 
				ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"Маршрут","","","Мультимодальная перевозка должна содержать промежуточные точки маршрута. Укажите их");
			Иначе
				Для Каждого СтрокаМаршрута Из Сообщение.Маршрут Цикл
					Если Число(СтрокаМаршрута.НомерСтроки)	< Сообщение.Маршрут.Количество() Тогда
						Если Не ЗначениеЗаполнено(СтрокаМаршрута.Площадка1С) Тогда
							ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"Площадка1С","Маршрут",Число(СтрокаМаршрута.НомерСтроки),"Не указана площадка в маршруте. Выберите площадку.");
						ИначеЕсли Не ЗначениеЗаполнено(СтрокаМаршрута.ПлощадкаGUID) Тогда 
							ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"ПлощадкаGUID","Маршрут",Число(СтрокаМаршрута.НомерСтроки),"Не установлено соответствие для площадки в маршруте. Выберите соответсвие.");
						КонецЕсли;
					ИначеЕсли Число(СтрокаМаршрута.НомерСтроки)	= Сообщение.Маршрут.Количество() Тогда
						Если СтрокаМаршрута.ПлощадкаGUID <> Сообщение.ПлощадкаПолучательEDI.GUID 
							ИЛИ СтрокаМаршрута.Площадка1С <> Сообщение.ПлощадкаПолучатель1С Тогда
							ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"ПлощадкаGUID","Маршрут",Число(СтрокаМаршрута.НомерСтроки),"Конечный получатель в маршруте отличается от указанного в шапке.");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	//валидируем транспорт и ТТН только если это не самовывоз
	Если Сообщение.ТипСообщения = "M_DES" 
		ИЛИ Сообщение.ТипСообщения = "M_MOV" 
		ИЛИ Сообщение.ТипСообщения = "M_REC" Тогда
		Если Сообщение.ПлощадкаПолучатель1С <> Сообщение.Площадка1С Тогда
			Если Не ЗначениеЗаполнено(Сообщение.Транспорт.ВидТранспорта) Тогда
				ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"ВидТранспорта","","","Укажите вид транспорта для перемещения!");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Сообщение.Транспорт.СпособХраненияПриПеревозке) Тогда
				ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"СпособХраненияПриПеревозке","","","Укажите способ хранения для перемещения!");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Сообщение.ДокументEDI.Номер) Тогда
				ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"ДокументНомер","","","Не указан номер ТТН!");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Сообщение.ДокументEDI.Дата) Тогда
				ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"ДокументДата","","","Не указана дата ТТН!");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_REC"  Тогда
		Для каждого СтрокаТовара Из Сообщение.Товары Цикл
			Если СтрокаТовара.КоличествоКПодтверждению =0 Тогда 
				ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"","","","Укажите количество принимаемого товара!");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,"Неверная структура сообщения! Отстутствует поле "+ПолныйПутьКПолю+"!",Истина);
	
КонецПроцедуры


Процедура ПроверитьПоляТранзакцииМеркурий(Сообщение, МетаданныеСообщения, ТаблицаОшибок, ТекПутьКПолю, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, ОбязательныеПоля) Экспорт
	
	Если МетаданныеСообщения.Колонки.Найти("Принадлежность") = Неопределено Тогда
		ЕстьПринадлежность = Ложь;
	Иначе
		ЕстьПринадлежность = Истина;
	КонецЕсли;
	
	Для Каждого Стр Из МетаданныеСообщения Цикл
		
		// алкогольные реквизиты не валидируем!
		
		Если ЕстьПринадлежность Тогда
			
			Если Стр.Принадлежность = "=" Тогда
				ПутьКПолю = Стр.ИмяПоля;
			ИначеЕсли Стр.Принадлежность = "EDI" Тогда
				ПутьКПолю = Стр.ИмяПоля;
			ИначеЕсли Стр.Принадлежность = Неопределено Тогда
				ПутьКПолю = Стр.ИмяПоля + "EDI";
			Иначе 
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			ПутьКПолю = Стр.ИмяПоля;
			
		КонецЕсли;
		
		ПолныйПутьКПолю = ПутьКПолю;
		Если НЕ ТекПутьКПолю = "" Тогда
			
			ПолныйПутьКПолю = ТекПутьКПолю+"."+ПутьКПолю;
			
		КонецЕсли;
		
		ЗначениеПоля = Неопределено;
		
		Если ТипЗнч(Сообщение) = Тип("Структура") Тогда
			
			Если (НЕ ЗначениеЗаполнено(Стр.ИмяТаблицы) И НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти)) ИЛИ Стр.ТипEDI = "ТабличнаяЧасть" Тогда
				Если НЕ Сообщение.Свойство(ПутьКПолю,ЗначениеПоля) Тогда
					
					ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,"Неверная структура сообщения! Отстутствует поле "+ПолныйПутьКПолю+"!",Истина);
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Попытка
				ЗначениеПоля = Сообщение[ПутьКПолю];
			Исключение
				ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,"Неверная структура сообщения! Отстутствует поле "+ПолныйПутьКПолю+"!",Истина);
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
		Если Стр.ТипEDI = "ТабличнаяЧасть" Тогда
			
			// копируем метаданные сообщения по этой таблице
			ОтборПолейТаблицы = Новый Структура("ИмяТаблицы",Стр.ИмяТаблицы);
			
			МетаданныеТабличнойЧасти = МетаданныеСообщения.Скопировать(ОтборПолейТаблицы);
			
			НайденнаяСтрока = МетаданныеТабличнойЧасти.Найти(Стр.ИмяТаблицы,"ИмяПоля");
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				МетаданныеТабличнойЧасти.Удалить(НайденнаяСтрока);
			КонецЕсли;
			
			НайденнаяСтрока = ОбязательныеПоля.Найти(ПолныйПутьКПолю,"ИмяПоля");
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Если Сообщение[Стр.ИмяТаблицы].Количество() = 0 Тогда
					ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,Стр.ИмяТаблицы,0,"Табличная часть """+Стр.ИмяТаблицы+""" должна быть заполнена!");
				КонецЕсли;
			КонецЕсли;
			
			НомерСтрокиТаблицы = 0;
			
			Для каждого СтрокаТаблицы ИЗ Сообщение[Стр.ИмяТаблицы] Цикл
				
				НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;
				
				ОсновнойМодуль.ПроверитьПоляСообщенияEDI(СтрокаТаблицы, МетаданныеТабличнойЧасти, ТаблицаОшибок, ПолныйПутьКПолю, Стр.ИмяТаблицы, НомерСтрокиТаблицы, ОбязательныеПоля);
				
				
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) И ЗначениеЗаполнено(Стр.ИмяТаблицы) Тогда
			
			Продолжить;
			
		ИначеЕсли Стр.ТипEDI = "Структура" Тогда
			
			Если ТипЗнч(ЗначениеПоля) = Тип("Структура") Тогда
				
				ТаблицаОшибокПоля	= ОсновнойМодуль.ИнициализироватьТаблицуОшибок();
				СтруктураСообщения	= ОсновнойМодуль.ПолучитьМетаданныеПоляСообщения(Стр.ВидСтруктурыEDI);
				
				// рекурсивно проверим вложенные структуры
				ПроверитьПоляТранзакцииМеркурий(ЗначениеПоля, СтруктураСообщения, ТаблицаОшибокПоля, ПолныйПутьКПолю,ИмяТабличнойЧасти,НомерСтроки, ОбязательныеПоля);
				
				Если ТаблицаОшибокПоля.Количество()>0 Тогда
					Для Каждого ОшибкаПоля Из ТаблицаОшибокПоля Цикл
						ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,Стр.ИмяПоля + ": " + ОшибкаПоля.СведенияОбОшибках);
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,"Неверная структура сообщения! Поле "+ПолныйПутьКПолю+" должно иметь тип ""Структура""!",Истина);
				
			КонецЕсли;
			
		Иначе
			
			// проверяем заполнение обязательного поля
			
			ТипEDI = Стр.ТипEDI;
			ПроверятьЗаполнениеПоля = Ложь;
			
			НайденныеСтроки = ОбязательныеПоля.НайтиСтроки(Новый Структура("ИмяПоля",ПолныйПутьКПолю));
			
			Для Каждого ПроверкаОбязательности Из НайденныеСтроки Цикл
				
				ПроверятьЗаполнениеПоля = Истина;
				
				УсловиеОбязательности = ПроверкаОбязательности.ИмяПоляУсловия;
				
				Если НЕ УсловиеОбязательности = Неопределено Тогда
					
					ПроверятьЗаполнениеПоля = Ложь;
					
					Если ПроверкаОбязательности.ВидСравнения = "равно" Тогда
						Если Сообщение[ПроверкаОбязательности.ИмяПоляУсловия] = ПроверкаОбязательности.ЗначениеПоляУсловия Тогда
							
							Если НЕ ПроверкаОбязательности.ПравилоПроверки = Неопределено Тогда
								
								ТипEDI = ПроверкаОбязательности.ПравилоПроверки;
								
							КонецЕсли;
							
							ПроверятьЗаполнениеПоля = Истина;
							
							Прервать;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПроверятьЗаполнениеПоля Тогда
				Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
					
					СообщениеОбОшибке = ДополнитьСообщениеОбОшибке(ТекПутьКПолю,ПутьКПолю);
					ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,СообщениеОбОшибке,Истина);
					
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
			// проверяем значение
			
			РезультатПроверки = ПроверитьЗначениеМеркурий(ЗначениеПоля, ТипEDI);
			
			Если НЕ РезультатПроверки.Успешно Тогда
				Для Каждого СтрокаОшибки Из РезультатПроверки.ТаблицаОшибок Цикл
					
					ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,СтрокаОшибки);
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнитьСообщениеОбОшибке(ТекПутьКПолю,ПутьКПолю) //клон из Основного модуля, однако будет развиваться отдельно от Основного
	
	Если Найти(ТекПутьКПолю, "ГрузоотправительEDI")>0 И СокрЛП(ПутьКПолю) = "Регион" Тогда
		СообщениеОбОшибке = "Не заполнено поле Регион в Фактическом адресе";
	ИначеЕсли Найти(ТекПутьКПолю, "ПродавецEDI")>0 И СокрЛП(ПутьКПолю) = "Регион" Тогда
		СообщениеОбОшибке = "Не заполнено поле Регион в Юридическом адресе";
	ИначеЕсли Найти(ТекПутьКПолю, "ПокупательEDI")>0 И СокрЛП(ПутьКПолю) = "Регион" Тогда
		СообщениеОбОшибке = "Не заполнено поле Регион в Юридическом адресе";	
	Иначе
		СообщениеОбОшибке = "Не заполнено обязательное поле "+ПутьКПолю+"!";
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;	

КонецФункции

Функция ПолучитьНастройкуВыводаСсылокНаОбъектыМеркурий() Экспорт
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("ИмяПоля");
	ТаблицаНастроек.Колонки.Добавить("ТипСсылки");
	ТаблицаНастроек.Колонки.Добавить("ТекстСсылки");
	
	ТаблицаНастроек.Индексы.Добавить("ИмяПоля");
	
	//Будь мужиком, напиши кусок!
	
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Покупатель1С",			"КарточкаКонтрагента",  "Установить соответствие");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Продавец1С",			"КарточкаКонтрагента",  "Установить соответствие");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Грузоотправитель1С",	"КарточкаКонтрагента",  "Установить соответствие");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Грузополучатель1С",		"КарточкаКонтрагента",  "Установить соответствие");
	//	
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "ПокупательEDI",			"КарточкаКонтрагента",  "Открыть карточку организации");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "ПродавецEDI",			"КарточкаКонтрагента",  "Открыть карточку продавца");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "ГрузоотправительEDI",	"КарточкаКонтрагента",  "Открыть карточку грузоотправителя");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "ГрузополучательEDI",	"КарточкаКонтрагента",  "Открыть карточку грузополучателя");
	//
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "СтавкаНДСEDI",			"Документ1С", 		    "Открыть документ");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Комментарий",			"Документ1С", 		    "Открыть документ");
	//
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "GTIN",                  "НоменклатураСсылка",   "Заполнить штрихкод");
	//
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "СтатусДиадок",			"ДокументДиадок", 		"Открыть документ");
		
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ПроверитьЗначениеМеркурий(Значение, Тип)
	
	Результат = Новый Структура("Успешно",Истина);//тоже можно кэшировать, наверное
	//таблицу ошибок будем добавлять только тогда, когда будут сами ошибки
	
	// т.к. в этой функции мы проверяем само значение, а не его наличие, то возвращаем "Успешно" в случае переданного пустого значения
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Значение);
	
	//врата ORDRSP
	если ТипЗначения = Тип("СписокЗначений") тогда 
		Возврат Результат;
	конецесли;
//	
	Если НЕ ТипЗначения = Тип("Строка") И НЕ ТипЗначения = Тип("Число") И НЕ ТипЗначения = Тип("Булево") И НЕ ТипЗначения = Тип("Дата") Тогда
		
		Результат.Вставить("ТаблицаОшибок",Новый Массив);//так быстрее
		Результат.ТаблицаОшибок.Добавить("Значение должно иметь один из примитивных типов: ""Строка"", ""Число"", ""Булево"", ""Дата"" вместо """+ТипЗначения+""".");
		Результат.Успешно = Ложь;
		Возврат Результат;
		
	КонецЕсли;
	
	// Классификаторы и свои справочники
	
	Если	Тип = "Валюта" 
		ИЛИ Тип = "КодРегиона" 
		ИЛИ Тип = "КодСтраны" 
		ИЛИ Тип = "КодЕдиницы"
		ИЛИ Тип = "Статус"
		ИЛИ Тип = "СтавкаНДС"
		ИЛИ Тип = "ТипСообщения"
		ИЛИ Тип = "Направление"
		ИЛИ Тип = "ТипСФ"
		ИЛИ Тип = "ВидЮрФизЛица"
		ИЛИ Тип = "ВидАдреса" Тогда
		
		//Если СписокДопустимыхСодержитЗначение(Значение,Тип) Тогда
		//	
		//	Возврат Результат;
		//	
		//Иначе
		//	
		//	Если Тип = "Валюта" Тогда
		//		КодОшибки = "Стандарт";
		//		ФорматЗначения = "ISO-4217 (3-alpha)";
		//	ИначеЕсли Тип = "КодРегиона" Тогда	
		//		КодОшибки = "Стандарт";
		//		ФорматЗначения = "ISO 3166-2";
		//	ИначеЕсли Тип = "КодСтраны" Тогда
		//		КодОшибки = "Стандарт";
		//		ФорматЗначения = "ISO 3166";
		//	ИначеЕсли Тип = "КодЕдиницы" Тогда
		//		КодОшибки = "ЕдИзм";
		//	Иначе
		//		КодОшибки = "НеВСписке";
		//		ФорматЗначения = ПолучитьДопустимыеЗначенияСтрокой(Тип);
		//	КонецЕсли;
		//		
		//	Результат.Успешно = Ложь;
		//	Результат.Вставить("ТаблицаОшибок",Новый Массив);//так быстрее
		//	Результат.ТаблицаОшибок.Добавить(ПолучитьТекстОшибки(Значение,КодОшибки,ФорматЗначения));
		//	
		//КонецЕсли;
		
	ИначеЕсли Тип = "GLN" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 13, Результат);
		
	ИначеЕсли Тип = "GUID"  Тогда	
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноСимволов", 36, Результат);
		
	ИначеЕсли Тип = "ИНН_ЮЛ" Тогда	
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "ИНН", 		"",	 Результат);
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 10, Результат);
		
	ИначеЕсли Тип = "ИНН_ФЛ" Тогда	
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "ИНН", 		"",	 Результат);
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 12, Результат);
		
	ИначеЕсли Тип = "КПП" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 9, Результат);
		
	ИначеЕсли Тип = "БИК" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 9, Результат);
		
	ИначеЕсли Тип = "НомерСчета" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "НеБольшеЦифр", 20, Результат);
		
	ИначеЕсли Тип = "НомерДокумента" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "НеБольшеСимволов", 70, Результат);
		
	ИначеЕсли Тип = "Артикул" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "НеБольшеСимволов", 35, Результат);
		
	ИначеЕсли Тип = "НомерГТД" Тогда
		
		Стр = СтрЗаменить(Значение," ","");
		Стр = СтрЗаменить(Стр,"\","");
		Стр = СтрЗаменить(Стр,"/","");
		
		Если СтрДлина(Стр)>70 Тогда
			Результат.Успешно = Ложь;
			Результат.Вставить("ТаблицаОшибок",Новый Массив);//так быстрее
			Результат.ТаблицаОшибок.Добавить("Номер ГТД не может быть длиннее 70 символов");
		КонецЕсли;
		
	ИначеЕсли Тип = "Индекс" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 6, Результат);
		
	ИначеЕсли Лев(Тип,6) = "Строка" Тогда
		
		Если НЕ Тип = "Строка" Тогда
			
			ЧислоСимволов = Число(СтрЗаменить(Тип,"Строка",""));
			ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "НеБольшеСимволов", ЧислоСимволов, Результат);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиДопРеквизитыКарточкиСообщенияМеркурий(Сообщение,ДополнительныеРеквизиты) Экспорт
	
	ДополнительныеРеквизиты.Очистить();
	
	Если Сообщение.ТипСообщения = "M_DES" ИЛИ Сообщение.ТипСообщения = "M_MOV" Тогда
		ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"Цель1С",Сообщение.Цель1С);
		ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"БлагополучиеМестности",Сообщение.БлагополучиеМестности);
		ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"РазрешениеНаВывозНомер",Сообщение.РазрешениеНаВывозНомер);
		ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"РазрешениеНаВывозДата",Сообщение.РазрешениеНаВывозДата);
		ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"ВетСертификатОсобыеОтметки",?(ЗначениеЗаполнено(Сообщение.ВетСертификатОсобыеОтметки),Сообщение.ВетСертификатОсобыеОтметки,""));
		Если Сообщение.ТипСообщения = "M_DES" Тогда
			ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"НомерЗаказа",Сообщение.ЗаказEDI.Номер);
			ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"ДатаЗаказа",Сообщение.ЗаказEDI.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Если (Сообщение.ТипСообщения = "M_PRD" И Сообщение.Завершена = Ложь)
		ИЛИ (Сообщение.ТипСообщения = "M_PRD" И Сообщение.Завершена = Истина И ЗначениеЗаполнено(Сообщение.ИдентификаторПроизводственнойТранзакции)) Тогда
		ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"ИдентификаторПроизводственнойТранзакции",Сообщение.ИдентификаторПроизводственнойТранзакции);
	КонецЕсли;
	//бросить ПМ
	
КонецПроцедуры

Процедура ПрисвоитьДопРеквизитыВСообщение(Сообщение,ДополнительныеРеквизиты) Экспорт
	
	Для Каждого СтрокаРеквизита Из ДополнительныеРеквизиты Цикл
		
		Если ЗначениеЗаполнено(СтрокаРеквизита.Значение) И
			ЗначениеЗаполнено(СтрокаРеквизита.Реквизит) Тогда
			Если СтрокаРеквизита.Реквизит = "НомерЗаказа" Тогда
				Сообщение.ЗаказEDI.Номер = СтрокаРеквизита.Значение;
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДатаЗаказа" Тогда
				Сообщение.ЗаказEDI.Дата = СтрокаРеквизита.Значение;
			Иначе
				
				Попытка
					
					Выполнить("Сообщение."+СтрокаРеквизита.Реквизит+" = СтрокаРеквизита.Значение");
					
				Исключение
					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ВывестиДопРеквизитМеркурий(Таблица,ИмяРеквизита,ЗначениеРеквизита) //в таблицу на форме (УФ или ОФ)
   
   НоваяСтрока = Таблица.Добавить();
   НоваяСтрока.Реквизит = ИмяРеквизита;
   НоваяСтрока.Значение = ЗначениеРеквизита;
   
КонецПроцедуры

Функция ПолучитьОбязательныеПоляТранзакцииМеркурийДляКарточкиСообщения(ТипСообщения,Направление) Экспорт
	
	ТаблицаПолей = Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ИмяПоля");
	ТаблицаПолей.Колонки.Добавить("ИмяТабличнойЧасти");
	
	//ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"Продавец1С");
	//ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"Покупатель1С");
	
	Если ТипСообщения = "M_DES"
		ИЛИ ТипСообщения = "M_MOV" Тогда
		
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"ИсходнаяПартияGUID",		"Товары");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"unitUUID",					"Товары");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"guid",						"Товары");
		
	ИначеЕсли ТипСообщения = "M_PRD" Тогда
		
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"unitUUID",					"Товары");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"guid",						"Товары");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"ИсходнаяПартияGUID",		"Сырье");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"unitUUID",					"Сырье");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"guid",						"Сырье");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"Количество",				"Сырье");
		
	КонецЕсли;
	
	ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"Количество",				"Товары");
	
	Возврат ТаблицаПолей;
	
КонецФункции

Функция КонвертироватьТранзакциюМеркурий_В_1С(Сообщение) Экспорт

	Если Сообщение.Направление <> "Входящее" Тогда
		ВызватьИсключение "Метод вызывается только для входящих сообщений";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сообщение.Партнер) Тогда
		Сообщение.Партнер = ПартнерМеркурий();
	КонецЕсли;
	
	//можно было бы применить как в EDI ДополнитьСтруктуруСообщенияИзЭталона(), однако это ухудшит (пусть и на немного) производительность.
	//Изменения структуры Сообщения будут обрабатываться в ПроверитьЗапускНовойВерсииМодуляМеркурий
	
	КонвертироватьШапкуТранзакцииМеркурийв1С(Сообщение);
	КонвертироватьТабличнуюЧастьТранзакцииМеркурийв1С(Сообщение,"Товары");
	
	СтандартнаяОбработкаEDI = Истина;
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПослеКонвертацииСообщенияEDIв1С",СтандартнаяОбработкаEDI,
			Новый Структура("Сообщение",
			Сообщение));
			
	Если РезультатПМ <> Неопределено Тогда
		Сообщение = РезультатПМ;
	КонецЕсли;

КонецФункции // КонвертироватьТранзакциюМеркурий_В_1С(Сообщение)()

Функция КонвертироватьШапкуТранзакцииМеркурийв1С(Сообщение) Экспорт

	Сообщение.ХозяйствующийСубъект1С 				= КонвертироватьЗначениеМеркурийв1C(Сообщение.ХозяйствующийСубъектEDI.GUID,,"МеркурийХС");		
	Если Сообщение.Свойство("ХозяйствующийСубъектПолучательEDI") ТОгда
		Сообщение.ХозяйствующийСубъектПолучатель1С 	= КонвертироватьЗначениеМеркурийв1C(Сообщение.ХозяйствующийСубъектПолучательEDI.GUID,,"МеркурийХС");		
	КонецЕсли;
	
	//Площадки
	Сообщение.Площадка1С 							= КонвертироватьЗначениеМеркурийв1C(Сообщение.ПлощадкаEDI.GUID,,"МеркурийПлощадка");
	Если Сообщение.Свойство("ПлощадкаПолучательEDI") ТОгда
		Сообщение.ПлощадкаПолучатель1С 				= КонвертироватьЗначениеМеркурийв1C(Сообщение.ПлощадкаПолучательEDI.GUID,,"МеркурийПлощадка");
	КонецЕсли;
	
	Сообщение.Цель1С = КонвертироватьЗначениеМеркурийв1C(Сообщение.ЦельEDI.GUID,,"МеркурийЦель");//"5b91af60-e089-11e1-bcf3-b499babae7ea"; //Заглушка
	Если Не ЗначениеЗаполнено(Сообщение.ДатаОтгрузки) И ЗначениеЗаполнено(Сообщение.ДатаПоставки) Тогда
		Сообщение.ДатаОтгрузки = Сообщение.ДатаПоставки;
	КонецЕсли;
	
	Если Сообщение.Свойство("ПеревозчикEDI") И Сообщение.Свойство("Перевозчик1С") И ЗначениеЗаполнено(Сообщение.ПеревозчикEDI.GUID) Тогда 
		Сообщение.Перевозчик1С = КонвертироватьЗначениеМеркурийв1C(Сообщение.ПеревозчикEDI.GUID,,"МеркурийХС");
	КонецЕсли;
	
	//Сообщение.Документ1С = Надо пробовать искать приходную накладную как-то по этим waybiilNumber и waybillDate ДокументEDI.Номер  ДокументEDI.Дата

КонецФункции // (Сообщение)()

Функция КонвертироватьЗначениеМеркурийв1C(Значение, Тип1С =  Неопределено, ТипМеркурий, Сообщение =  Неопределено) Экспорт

	
	СтандартнаяОбработкаEDI = Истина;
	
	РезультатКонвертации = ОбработкаСобытияПодключаемогоМодуля("КонвертироватьЗначениеМеркурийв1C",СтандартнаяОбработкаEDI,
			Новый Структура("ЗначениеEDI,ТипПоляEDI,ТипПоля1C,Сообщение",
			Значение, ТипМеркурий, Тип1С, Сообщение));

	Если Не СтандартнаяОбработкаEDI Тогда
		Возврат РезультатКонвертации;
	КонецЕсли;
	
	Если ТипМеркурий = "МеркурийХС" Тогда
		
		Возврат ПреобразоватьЮрФизЛицоПлощадку_Меркурий_в_1С(Значение,ТипМеркурий);
		
	ИначеЕсли ТипМеркурий = "МеркурийПлощадка" Тогда
		
		Возврат ПреобразоватьЮрФизЛицоПлощадку_Меркурий_в_1С(Значение,ТипМеркурий);
		
	ИначеЕсли ТипМеркурий = "МеркурийЦель" Тогда
		
		Возврат ПреобразоватьЦель_Меркурий_в_1С(Значение,ТипМеркурий);
		
	ИначеЕсли ТипМеркурий = "МеркурийСтраныМира" Тогда
		
		Возврат ПреобразоватьСтрану_Меркурий_в_1С(Значение);
		
	КонецЕсли;
	
КонецФункции // КонвертироватьЗначениеМеркурийв1C()

Функция ПреобразоватьЮрФизЛицоПлощадку_Меркурий_в_1С(GUID,ТипМеркурий)
    
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
               |ПОМЕСТИТЬ ВТ_ЭлементыДопСправочника
               |ИЗ
               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
               |ГДЕ
               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ИмяСправочника
               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""GUID""
               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = &GUID
               |	И НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ПометкаУдаления
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение
               |ИЗ
               |	ВТ_ЭлементыДопСправочника КАК ВТ_ЭлементыДопСправочника
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
               |		ПО ВТ_ЭлементыДопСправочника.Ссылка = КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
               |			И (КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""Объект"")
               |ГДЕ
               |	НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение ЕСТЬ NULL ";

Запрос.УстановитьПараметр("GUID",GUID);
Запрос.УстановитьПараметр("ИмяСправочника",ТипМеркурий);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Если Выборка.Следующий() Тогда
	
	Возврат Выборка.Значение;
Иначе
	Возврат Неопределено;
	
КонецЕсли;

КонецФункции //

Функция ПреобразоватьЦель_Меркурий_в_1С(GUID,ТипМеркурий)

	Если ЗначениеЗаполнено(GUID) Тогда
		
		Классификатор = ПолучитьКлассификаторЦелейМеркурий();
		НайденноеЗначение = Классификатор.Найти(GUID,"GUID");
		Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
			Возврат НайденноеЗначение.Наименование;
		Иначе
			Возврат "";
		Конецесли;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции // 


Функция КонвертироватьТабличнуюЧастьТранзакцииМеркурийв1С(Сообщение,ИмяТабличнойЧасти = "Товары")
	//конвертируем:
	//страну
	//производителя
	//единицу измерения
	//номенклатуру
	
	//если есть то упаковку
	
	ТабличнаяЧастьСообщения = Сообщение[ИмяТабличнойЧасти];
	
	ТаблицаТоваров = ТабличнаяЧастьСообщения.Скопировать(,"GTIN, GUID");
	ТаблицаТоваров.Колонки.GUID.Имя = "GUID";
	
	ТаблицаСоответствий = КонвертироватьТоварыМеркурийв1С(ТаблицаТоваров,Сообщение); // передаем сообщения, т.к. поиск номенклатуры может зависеть от полей шапки (контрагента, договора и проч.)
	
	ТаблицаСоответствийЕдиницИзмерения = ПолучитьТаблицуСоответствийЕдиницИзмеренияМеркурий();
	ТаблицаСоответствийЕдиницИзмеренияУпаковок = ПолучитьСоответствияВсехЕдиницИзмеренияУпаковокМеркурий();
	
	ТабличнаяЧастьСообщения.Индексы.Добавить("GTIN, GUID");
	
	Для Каждого Стр Из ТаблицаСоответствий Цикл
		
		Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("GTIN",				Стр.GTIN);
			СтруктураОтбора.Вставить("GUID",				Стр.КодТовараСторонний);
			
			НайденныеСтроки = ТабличнаяЧастьСообщения.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаТоваров Из НайденныеСтроки Цикл
				
				СтрокаТоваров.Номенклатура					= Стр.Номенклатура;
			КонецЦикла;		
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТоваров Из ТабличнаяЧастьСообщения Цикл
		
		НайденнаяЕИ = ТаблицаСоответствийЕдиницИзмерения.Найти(СтрокаТоваров.unitUUID,"UUID");
		Если ЗначениеЗаполнено(НайденнаяЕИ) Тогда
			СтрокаТоваров.ЕдиницаИзмеренияПоКлассификатору = НайденнаяЕИ.Соответствие;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмеренияУпаковокUUID) Тогда
			НайденнаяЕИУп = ТаблицаСоответствийЕдиницИзмеренияУпаковок.Найти(СтрокаТоваров.ЕдиницаИзмеренияУпаковокUUID,"UUID");
			Если ЗначениеЗаполнено(НайденнаяЕИУп) Тогда
				СтрокаТоваров.ЕдиницаИзмеренияУпаковок  = НайденнаяЕИУп.Соответствие;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТоваров.Страна						= ПреобразоватьСтрану_Меркурий_в_1С(СтрокаТоваров.СтранаUUID);
		
		СтрокаТоваров.Цель1С						= ПреобразоватьЦель_Меркурий_в_1С(СтрокаТоваров.ЦельEDI,"МеркурийЦель");
		
		СтрокаТоваров.ПлощадкаПроизводитель			= ПреобразоватьЮрФизЛицоПлощадку_Меркурий_в_1С(СтрокаТоваров.ПлощадкаПроизводительGUID,"МеркурийПлощадка");
		
	КонецЦикла;
	
	
	
	
КонецФункции // КонвертироватьТабличнуюЧастьТранзакцииМеркурийв1С(Сообщение,"Товары")()

Функция ПреобразоватьСтрану_Меркурий_в_1С(СтранаUUID) Экспорт
	
	//на рефакторинг - приделать соответствия прямо в классификатор!!!
	текКлассификатор = ПолучитьКлассификаторСтранМеркурий();
	НайденныйЭлементСправочника = неопределено;
	Попытка	
		Если текКлассификатор<>неопределено Тогда
			НайденныйЭлементКлассификатора = текКлассификатор.Найти(СтранаUUID,"UUID");
			текМенеджерСправочника = Справочники[ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийСтраныМира",Истина,Истина)];
			НайденныйЭлементСправочника = текМенеджерСправочника.НайтиПоРеквизиту("НаименованиеПолное",НайденныйЭлементКлассификатора.Наименование);
			Если ЗначениеЗаполнено(НайденныйЭлементСправочника) Тогда 
				Возврат НайденныйЭлементСправочника;
			Иначе
				НайденныйЭлементСправочника = текМенеджерСправочника.НайтиПоРеквизиту("КодАльфа2",НайденныйЭлементКлассификатора.Код);
				Если ЗначениеЗаполнено(НайденныйЭлементСправочника) Тогда 
					Возврат НайденныйЭлементСправочника;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(НайденныйЭлементСправочника) Тогда 
		Возврат ОсновнойМодуль.ПолучитьПустуюСсылкуОбъекта("МеркурийСтраныМира");
	КонецЕсли;
	
КонецФункции // ПреобразоватьСтрану_Меркурий_в_1С()


Функция КонвертироватьТоварыМеркурийв1С(Знач ТаблицаТоваров, Сообщение)
	
	
	ТаблицаТоваров.Колонки.Добавить("КодТовараСторонний",Новый ОписаниеТипов("Строка", ,
													Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
	Для Каждого Стр Из ТаблицаТоваров Цикл
		Стр.КодТовараСторонний = Стр.GUID;
	КонецЦикла;
	ТаблицаТоваров.Колонки.Удалить("GUID");
	ТекстЗапросаПоРегиструСоответствий = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.GTIN,
	|	Таб.КодТовараСторонний КАК КодТовараСторонний,
	|	"""" КАК КодЕдиницыИзмеренияEDI,
	|	"""" КАК КодТовараСвой,
	|	"""" КАК КодТовараСвойЧисло
	|ПОМЕСТИТЬ ТабТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТоваров.GTIN КАК GTIN,
	|	ТабТоваров.КодТовараСторонний КАК КодТовараСторонний,
	|	ТабТоваров.КодТовараСвой КАК КодТовараСвой,
	|	ТабТоваров.КодЕдиницыИзмеренияEDI КАК КодЕдиницыИзмеренияEDI,
	|	КонтурEDI_СоответствияТоваров.Номенклатура,
	|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры,
	|	КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
	|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С
	|ПОМЕСТИТЬ ТабСоответствий_КонтурEDI
	|ИЗ
	|	ТабТоваров КАК ТабТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	|		ПО (КонтурEDI_СоответствияТоваров.Партнер = &Партнер)
	|			И (ВЫБОР
	|				КОГДА &СинхронизироватьТоварыТолькоПоGTIN
	|						И ТабТоваров.GTIN <> """"
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТабТоваров.КодТовараСторонний = КонтурEDI_СоответствияТоваров.КодТовараПартнера
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА &СинхронизироватьТоварыТолькоПоКодуПартнера
	|						И ТабТоваров.КодТовараСторонний <> """"
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТабТоваров.GTIN = КонтурEDI_СоответствияТоваров.GTIN
	|						ИЛИ ТабТоваров.GTIN = """"
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &БратьОсновноеСоответствие
	|				ТОГДА КонтурEDI_СоответствияТоваров.ОсновноеСоответствие
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	GTIN,
	|	КодТовараСторонний,
	|	КодТовараСвой";
	
	//Теперь вторая часть запроса
	ТекстЗапросаПоШтрихкодам = "";
	
		//здесь не ищем штрихкоды, что нашли в регистре "КонтурEDI_СоответствияТоваров", то и выкатим
		ТекстЗапросаПоШтрихкодам = 
		"ВЫБРАТЬ
		|	ТаблицаТоваровИсходная.GTIN,
		|	ТаблицаТоваровИсходная.КодТовараСвой,
		|	ТаблицаТоваровИсходная.КодТовараСторонний,
		|	ТаблицаТоваровИсходная.КодЕдиницыИзмеренияEDI,
		|	ТаблицаСоответствий.Номенклатура,
		|	ТаблицаСоответствий.ХарактеристикаНоменклатуры,
		|	ТаблицаСоответствий.ЕдиницаИзмерения,
		|	ТаблицаСоответствий.КоэффициентEDIВ1С
		|ИЗ
		|	ТабТоваров КАК ТаблицаТоваровИсходная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабСоответствий_КонтурEDI КАК ТаблицаСоответствий
		|		ПО ТаблицаТоваровИсходная.КодТовараСторонний = ТаблицаСоответствий.КодТовараСторонний"
		;
		
	ЗапросПоСоответствиям = ОсновнойМодуль.ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	ПартнерСообщения = Сообщение.Партнер;
	
	СинхронизироватьТоварыТолькоПоGTIN = 			(ОсновнойМодуль.ПолучитьЗначениеСвойстваОбъектаEDI(ПартнерСообщения, "СинхронизироватьТоварыТолькоПоGTIN") = Истина);
	СинхронизироватьТоварыТолькоПоКодуПартнера = 	(ОсновнойМодуль.ПолучитьЗначениеСвойстваОбъектаEDI(ПартнерСообщения, "СинхронизироватьТоварыТолькоПоКодуПартнера") = Истина);
	ЗапросПоСоответствиям.УстановитьПараметр("СинхронизироватьТоварыТолькоПоGTIN",			СинхронизироватьТоварыТолькоПоGTIN);
	ЗапросПоСоответствиям.УстановитьПараметр("СинхронизироватьТоварыТолькоПоКодуПартнера",	СинхронизироватьТоварыТолькоПоКодуПартнера);
	
	ЗапросПоСоответствиям.УстановитьПараметр("Партнер",ПартнерСообщения);
	ЗапросПоСоответствиям.УстановитьПараметр("ТаблицаТоваров",?(ВнешнееХранилище,ОсновнойМодуль.ПоместитьТаблицуВоВнешнююБазу(ТаблицаТоваров),ТаблицаТоваров));			   
	ЗапросПоСоответствиям.УстановитьПараметр("БратьОсновноеСоответствие",истина);//если мы - поставщик, то берем только основное соответствие
	
	ЗапросПоСоответствиям.Текст = ТекстЗапросаПоРегиструСоответствий;
	
	//событие, позволяющее переопределить конвертацию EDI в 1С
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимРаботы",	"Поставщик");
	ДополнительныеПараметры.Вставить("Сообщение",	Сообщение);
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьЗапросКонвертацииТоваровМеркурийв1С",,
		Новый Структура("Запрос,ДополнительныеПараметры",
			ЗапросПоСоответствиям,ДополнительныеПараметры));
			
	Если РезультатПМ <> Неопределено Тогда
		ЗапросПоСоответствиям = РезультатПМ;
	КонецЕсли;
	
	ЗапросПоСоответствиям.Выполнить();//создали  врем.таблицу "ТабСоответствий_КонтурEDI"
	
	
	ЗапросПоСоответствиям.Текст = ТекстЗапросаПоШтрихкодам;
	
	ТЗ = ЗапросПоСоответствиям.Выполнить().Выгрузить();
	
	//Для отладки: ВремТабДляПросмотра = ПросмотретьВременнуюТаблицуЗапроса(ЗапросПоСоответствиям,"ТабТоваров")//"ТабСоответствий_КонтурEDI", "ВТ_НайденныеСоответствия"
	
	ЗапросПоСоответствиям = Неопределено;
	
	Возврат ТЗ;
	

КонецФункции // КонвертироватьТоварыМеркурийв1С()

Функция ПолучитьТаблицуСоответствийДляТоваров1СМеркурий(ТаблицаТоваров, ВладелецСпискаТоваров, ИскатьТоварПоШК =  Ложь) Экспорт
	//Отличие от EDI только в том что конвертируем мы без учета единицы измерения.
	
	ЗапросКонвертацииТоваров1СвEDI = ОсновнойМодуль.ИнициализироватьЗапрос_КонтурEDI(Ложь);
	ЗапросКонвертацииТоваров1СвEDI.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	ЗапросКонвертацииТоваров1СвEDI.УстановитьПараметр("ИскатьТоварПоШК",ИскатьТоварПоШК);
	
	//1. Передадим ТаблицаТоваров в параметры запроса и закинем во временную таблицу "ТабТоваров". Попутно протянем в поле "КодТовараСвой" код товара из справочника "Номенклатура" или его местного аналога.
	
	ЗапросКонвертацииТоваров1СвEDI.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.Номенклатура КАК Номенклатура,
	|	Таб.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Таб.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ _ТабТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК Таб
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_ТабТоваров.Номенклатура,
	|	_ТабТоваров.ХарактеристикаНоменклатуры,
	|	_ТабТоваров.ЕдиницаИзмерения,
	|	_ТабТоваров.Номенклатура.Код КАК КодТовараСвой
	|ПОМЕСТИТЬ ТабТоваров
	|ИЗ
	|	_ТабТоваров КАК _ТабТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ _ТабТоваров"
	;
	
	//2. Соединим ТабТоваров с РС "КонтурEDI_СоответствияТоваров"
	//	и дополнительно с РС "Штрихкоды" , если мы в режиме покупателя
	
	Если ИскатьТоварПоШК Тогда//мы торговая сеть
		
		ТекстЗапросаПоШтрихкодам = ОсновнойМодуль.ПолучитьТекстЗапросаПоШтрихкодамНоменклатуры();//все запросы убраны в макет СКД с возможностью кастомизации через ПМ.
		
		ЗапросКонвертацииТоваров1СвEDI.Текст = ЗапросКонвертацииТоваров1СвEDI.Текст 
		+ " 
		|; 
		|" 
		+ ТекстЗапросаПоШтрихкодам;//проверить ВХ
		
		ТекстЗапросаПоРегиструСоответствий = 
		"ВЫБРАТЬ
		|	ТабТоваров.Номенклатура,
		|	ТабТоваров.ХарактеристикаНоменклатуры,
		|	ТабТоваров.ЕдиницаИзмерения,
		|	ТабТоваров.КодТовараСвой,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.КодЕдиницыИзмеренияEDI, """") КАК КодЕдиницыИзмеренияEDI,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.НаименованиеПартнера, """") КАК НаименованиеПартнера,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.GTIN, ВТШтрихкодыТоваров.GTIN) КАК GTIN,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.КодТовараПартнера, """") КАК КодТовараСторонний,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.КоэффициентEDIВ1С, """") КАК КоэффициентEDIВ1С
		|ИЗ
		|	ТабТоваров КАК ТабТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтурEDI_СоответствияТоваров.Номенклатура КАК Номенклатура,
		|			КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
		|			КонтурEDI_СоответствияТоваров.ЕдиницаEDI КАК КодЕдиницыИзмеренияEDI,
		|			КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С,
		|			КонтурEDI_СоответствияТоваров.GTIN КАК GTIN,
		|			КонтурEDI_СоответствияТоваров.НаименованиеПартнера КАК НаименованиеПартнера,
		|			КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК КодТовараПартнера
		|		ИЗ
		|			РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
		|		ГДЕ
		|			КонтурEDI_СоответствияТоваров.Партнер = &Партнер
		|			И КонтурEDI_СоответствияТоваров.Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ.Номенклатура
		|					ИЗ
		|						ТабТоваров КАК ВТ)) КАК СоответствияТоваров_КонтурEDI
		|		ПО ТабТоваров.Номенклатура = СоответствияТоваров_КонтурEDI.Номенклатура
		|			И ТабТоваров.ЕдиницаИзмерения = СоответствияТоваров_КонтурEDI.ЕдиницаИзмерения
		|			И (СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры = НЕОПРЕДЕЛЕНО
		|				ИЛИ ТабТоваров.ХарактеристикаНоменклатуры = СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтрихкодыТоваров КАК ВТШтрихкодыТоваров
		|		ПО ТабТоваров.Номенклатура = ВТШтрихкодыТоваров.Номенклатура
		|			И ТабТоваров.ЕдиницаИзмерения = ВТШтрихкодыТоваров.ЕдиницаИзмерения
		|			И (ВТШтрихкодыТоваров.ХарактеристикаНоменклатуры = НЕОПРЕДЕЛЕНО
		|				ИЛИ ТабТоваров.ХарактеристикаНоменклатуры = ВТШтрихкодыТоваров.ХарактеристикаНоменклатуры)";
		
	Иначе//мы поставщик
		
		ТекстЗапросаПоРегиструСоответствий = 
		"ВЫБРАТЬ
		|	ТабТоваров.Номенклатура,
		|	СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры,
		|	СоответствияТоваров_КонтурEDI.ЕдиницаИзмерения,
		|	ТабТоваров.КодТовараСвой,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.НаименованиеПартнера, """") КАК НаименованиеПартнера,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.GTIN, ""              "") КАК GTIN,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.КодТовараПартнера, """") КАК КодТовараСторонний,
		|	СоответствияТоваров_КонтурEDI.КодЕдиницыИзмеренияEDI КАК КодЕдиницыИзмеренияEDI,
		|	СоответствияТоваров_КонтурEDI.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.Скоропортящаяся, ЛОЖЬ) КАК Скоропортящаяся,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.МеркурийЕдиницаGUID, """") КАК ЕдиницаИзмеренияGUID,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.ПроизводимТовар, ЛОЖЬ) КАК ПроизводимТовар
		|ИЗ
		|	ТабТоваров КАК ТабТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтурEDI_СоответствияТоваров.Номенклатура КАК Номенклатура,
		|			КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
		|			КонтурEDI_СоответствияТоваров.GTIN КАК GTIN,
		|			КонтурEDI_СоответствияТоваров.НаименованиеПартнера КАК НаименованиеПартнера,
		|			КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК КодТовараПартнера,
		|			КонтурEDI_СоответствияТоваров.ЕдиницаEDI КАК КодЕдиницыИзмеренияEDI,
		|			КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С,
		|			КонтурEDI_СоответствияТоваров.МеркурийСкоропортящаяся КАК Скоропортящаяся,
		|			КонтурEDI_СоответствияТоваров.МеркурийЕдиницаGUID КАК МеркурийЕдиницаGUID,
		|			КонтурEDI_СоответствияТоваров.ПроизводимТовар КАК ПроизводимТовар
		|		ИЗ
		|			РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
		|		ГДЕ
		|			КонтурEDI_СоответствияТоваров.Партнер = &Партнер
		|			И КонтурEDI_СоответствияТоваров.Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ.Номенклатура
		|					ИЗ
		|						ТабТоваров КАК ВТ)) КАК СоответствияТоваров_КонтурEDI
		|		ПО ТабТоваров.Номенклатура = СоответствияТоваров_КонтурEDI.Номенклатура
		|			И (СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры = НЕОПРЕДЕЛЕНО
		|				ИЛИ ТабТоваров.ХарактеристикаНоменклатуры = СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры)";
		
	КонецЕсли;
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьЗапросКонвертацииТоваров1СвEDI",,
			Новый Структура("Запрос,ДополнительныеПараметры",
			ЗапросКонвертацииТоваров1СвEDI,));
			
	Если РезультатПМ <> Неопределено Тогда
		ЗапросКонвертацииТоваров1СвEDI = РезультатПМ;
	КонецЕсли;
	
	//ОсновнойМодуль.ПреобразоватьТипыЕдиницыИзмеренияЗапросаУТ11_УНФ(ЗапросКонвертацииТоваров1СвEDI);
	//Если ОсновнойМодуль.ОпределитьРелизКонфигурации()="11.2" Тогда
	//	ЗапросКонвертацииТоваров1СвEDI.Текст = СтрЗаменить(ЗапросКонвертацииТоваров1СвEDI.Текст,"Справочник.ЕдиницыИзмерения","Справочник.УпаковкиЕдиницыИзмерения");	
	//КонецЕсли;	
	ЗапросКонвертацииТоваров1СвEDI.Выполнить();//создадим ТабТоваров и, если мы покупатель, то ВТШтрихкодыТоваров
	
	Если ВнешнееХранилище Тогда
		
	Иначе//объекты в составе конфигурации
		
		ЗапросКонвертацииТоваров1СвEDI.Текст = ТекстЗапросаПоРегиструСоответствий;
		ЗапросКонвертацииТоваров1СвEDI.УстановитьПараметр("Партнер",	ВладелецСпискаТоваров);

		//событие, позволяющее переопределить получение по ШК "ИзменитьЗапросПоРегиструСоответствий"
		ДополнительныеПараметры= новый Структура;
		ДополнительныеПараметры.Вставить("ИскатьТоварПоШК",ИскатьТоварПоШК);
		РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьЗапросПоРегиструСоответствий",,
		Новый Структура("Запрос,ДополнительныеПараметры",
		ЗапросКонвертацииТоваров1СвEDI,ДополнительныеПараметры));
		
		Если РезультатПМ <> Неопределено Тогда
			ЗапросКонвертацииТоваров1СвEDI = РезультатПМ;
		КонецЕсли;

		ТаблицаТоваровССоответствиями = ЗапросКонвертацииТоваров1СвEDI.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат ТаблицаТоваровССоответствиями;
	
КонецФункции

//работа с сервисом Цербер

Функция ИнициализироватьТаблицуДляХС() Экспорт

	ТаблицаЦерберХС = Новый ТаблицаЗначений;
	ТаблицаЦерберХС.Колонки.Добавить("name",,"Наименование");
	ТаблицаЦерберХС.Колонки.Добавить("inn",,"ИНН");
	ТаблицаЦерберХС.Колонки.Добавить("Адрес");
	ТаблицаЦерберХС.Колонки.Добавить("АдресОбъектXDTO");
	ТаблицаЦерберХС.Колонки.Добавить("guid");
	ТаблицаЦерберХС.Колонки.Добавить("active");
	ТаблицаЦерберХС.Колонки.Добавить("createDate");
	ТаблицаЦерберХС.Колонки.Добавить("updateDate");
	ТаблицаЦерберХС.Колонки.Добавить("fullName");
	ТаблицаЦерберХС.Колонки.Добавить("kpp");
	ТаблицаЦерберХС.Колонки.Добавить("ogrn");
	ТаблицаЦерберХС.Колонки.Добавить("passport");
	ТаблицаЦерберХС.Колонки.Добавить("fio");
	ТаблицаЦерберХС.Колонки.Добавить("type");
	ТаблицаЦерберХС.Колонки.Добавить("owner");
	
Возврат ТаблицаЦерберХС;

КонецФункции // ПолучитьТаблицуДляХС()

Функция ИнициализироватьТаблицуДляПлощадки() Экспорт

	ТаблицаЦерберПлощадки = Новый ТаблицаЗначений;
	ТаблицаЦерберПлощадки.Колонки.Добавить("name",,"Наименование");
	ТаблицаЦерберПлощадки.Колонки.Добавить("Адрес");
	ТаблицаЦерберПлощадки.Колонки.Добавить("guid");
	ТаблицаЦерберПлощадки.Колонки.Добавить("active");
	ТаблицаЦерберПлощадки.Колонки.Добавить("createDate");
	ТаблицаЦерберПлощадки.Колонки.Добавить("updateDate");
	ТаблицаЦерберПлощадки.Колонки.Добавить("englishName");
	ТаблицаЦерберПлощадки.Колонки.Добавить("type");
	ТаблицаЦерберПлощадки.Колонки.Добавить("numberList");
	ТаблицаЦерберПлощадки.Колонки.Добавить("activityList");
	                                       
	Возврат ТаблицаЦерберПлощадки;

КонецФункции // ИнициализироватьТаблицуДляПлощадки()

Функция ПолучитьWSПроксиEnterpriseService() Экспорт
	
	Если ИспользуемыеWSПрокси().WSПроксиEnterpriseService = Неопределено Тогда
		Прокси = Новый WSПрокси(ПолучитьОпределениеПроксиИзМакета("EnterpriseService_test_14"),
		"http://api.vetrf.ru/schema/cdm/registry/service",   
		"EnterpriseServiceBindingQSService",  
		"EnterpriseServiceBindingQSPort"); 
		
		//альтернативный способ (требует добавления в конфигурацию WS-ссылок)
		//Прокси = WSСсылки.WSEnterpriseServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort");
		
		Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
		Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");	
		ИспользуемыеПрокси.WSПроксиEnterpriseService = Прокси;
	Иначе
		Прокси = ИспользуемыеWSПрокси().WSПроксиEnterpriseService; 
	КонецЕсли;
	
	Возврат(Прокси);
	
КонецФункции // ПолучитьПроксиEnterprise()

Функция ПолучитьСписокХСПоИНН(ИНН) Экспорт

	ТаблицаНайденных = ИнициализироватьТаблицуДляХС();
	
	WSПрокси = ПолучитьWSПроксиEnterpriseService();
	
	ТипWSПараметра = WSПрокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = WSПрокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;	
	
	Смещение = 0;
	
	businessEntity = WSПрокси.ФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "BusinessEntity");
	
	businessEntity.inn = ИНН;
	
	//Если ЗначениеЗаполнено(ПолноеНаименование) Тогда
	//	businessEntity.fullName = ПолноеНаименование;
	//КонецЕсли;
	
	//ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю контрагентов");
	#Если Клиент Тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли
	ListOptions.offset = Смещение;
	Попытка
		Ответ = WSПрокси.GetBusinessEntityList(ListOptions, businessEntity);
	Исключение
		Сообщить("Не смог спросить Меркурий");
		Сообщить("Описание Ошибки");
	КонецПопытки;
	Для Каждого стр из Ответ.businessEntity Цикл
		стр1 = ТаблицаНайденных.Добавить();
		ЗаполнитьЗначенияСвойств(стр1, стр);
		стр1.Адрес = ВычислитьXDTO(Ответ,"juridicalAddress.addressView");
	КонецЦикла;
	
	Возврат ТаблицаНайденных;
	
КонецФункции // ПолучитьСписокХСПоИНН()

Функция ПолучитьХСПоGUID(GUID) Экспорт
	
	ТаблицаНайденных = ИнициализироватьТаблицуДляХС();
	
	Если Не ЗначениеЗаполнено(GUID) Тогда
		
		Возврат ТаблицаНайденных;
		
	КонецЕсли;
	
	WSПрокси = ПолучитьWSПроксиEnterpriseService();
	
	ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю данные о Хоз Субъекте по GUID: "+GUID);
	Попытка
		Ответ = WSПрокси.GetBusinessEntityByGuid(GUID);
	Исключение
		Сообщить("Не смог получить ответ от ГИС Цербер");
		Сообщить(ОписаниеОшибки());
		Возврат ТаблицаНайденных;
	КонецПопытки;
	
	Попытка
		стр1 = ТаблицаНайденных.Добавить();
		ЗаполнитьЗначенияСвойств(стр1, Ответ);
		стр1.Адрес = ВычислитьXDTO(Ответ,"juridicalAddress.addressView");
		стр1.АдресОбъектXDTO = ВычислитьXDTO(Ответ,"juridicalAddress");
	Исключение
		Сообщить("Не смог разобрать ответ от ГИС Цербер");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ТаблицаНайденных;
	
КонецФункции

Функция ЗарегистрироватьНовыйХС(Объект1С,ИНН,Адрес,Наименование,ОГРН,АдресОбъектXDTO=Неопределено) Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	modificationOperation =  ПолучитьОбъектXDTOМеркурий("Цербер", "BEModificationOperation");
	modificationOperation.type = "CREATE";
	
	businessEntity = ПолучитьОбъектXDTOМеркурий("Цербер", "BusinessEntity");
	
	ЮрЛицоEDI = ОсновнойМодуль.ПреобразоватьЮрФизЛицо_1С_в_EDI(Объект1С,"Юридический",Ложь);
	
	Если Не ЗначениеЗаполнено(Адрес) И ЗначениеЗаполнено(ЮрЛицоEDI.Адрес.Представление) Тогда
		Адрес = ЮрЛицоEDI.Адрес.Представление;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Сообщить("Не могу понять Адрес, пожалуйста вручную");
		Результат.Успешно = Ложь;
		НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
		Новаяошибка.ТекстОшибки = "Запрос отвергнут Меркурием";
		Возврат ""
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) ТОгда
		businessEntity.inn  = ИНН ;
	ИначеЕсли ЗначениеЗаполнено(ЮрЛицоEDI.ИНН) ТОгда
		businessEntity.inn  = ЮрЛицоEDI.ИНН;
		ИНН = ЮрЛицоEDI.ИНН;
	КонецЕсли;
	
	//разбираемся с типом ХС
	Если ЮрЛицоEDI.Вид = "ЮрЛицо" Тогда
		businessEntity.type  = 1;   //ЮЛ
		//обязательный ОГРН для ЮЛ
		businessEntity.ogrn = ОГРН;
		Если Не ЗначениеЗаполнено(ОГРН) Тогда
			Сообщить("Не могу определить ОГРН, укажите, пожалуйста вручную");
			Результат.Успешно = Ложь;
			НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
			Новаяошибка.ТекстОшибки = "Запрос отвергнут Меркурием";
			Возврат ""
		КонецЕсли;
		НайденнаяПФ = ПолучитьОКОПФМеркурий().Найти(Объект1С.ОКОПФ.НаименованиеПолное,"Наименование");
		
		Если Не ЗначениеЗаполнено(НайденнаяПФ) Тогда
			Сообщить("Не могу определить ОКОПФ, проверьте что указана в контрагенте");
			Результат.Успешно = Ложь;
			НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
			Новаяошибка.ТекстОшибки = "Запрос отвергнут Меркурием";
			Возврат ""
		КонецЕсли;
		
		businessEntity.incorporationForm = ПолучитьОбъектXDTOМеркурий("Цербер", "IncorporationForm");
		xmlЗаполнитьЗначениеXDTO(businessEntity.incorporationForm,"code",НайденнаяПФ.Код);	
	Иначе
		
		Если ЗначениеЗаполнено(ЮрЛицоEDI.Фамилия) Тогда
			xmlЗаполнитьЗначениеXDTO(businessEntity,"fio",СокрЛП(ЮрЛицоEDI.Фамилия+" "+ЮрЛицоEDI.Имя+" "+ЮрЛицоEDI.Отчество));	
		КонецЕсли;
		Если ЗначениеЗаполнено(ИНН) ТОгда
			businessEntity.type  = 3;   //ИП
		Иначе
			businessEntity.type  = 2;    //просто физик, без ИП
		КонецЕсли;
	КонецЕсли;
	
	juridicalAddress = ПолучитьОбъектXDTOМеркурий("Икар", "Address");
	Если АдресОбъектXDTO = Неопределено Тогда
		ЗаполнитьАдресОбъектаXDTO(Адрес, juridicalAddress, , Объект1С);
	Иначе
		juridicalAddress = АдресОбъектXDTO;
	КонецЕсли;
	
	businessEntity.juridicalAddress = juridicalAddress;
	
	Если ЗначениеЗаполнено(ЮрЛицоEDI.КПП) Тогда
		businessEntity.kpp = ЮрЛицоEDI.КПП;
	КонецЕсли;
	Если ЗначениеЗаполнено(Наименование) Тогда
		businessEntity.name = Наименование;
		businessEntity.fullname = ЮрЛицоEDI.Наименование;
	ИначеЕсли ЗначениеЗаполнено(ЮрЛицоEDI.Наименование) Тогда
		businessEntity.name = ЮрЛицоEDI.Наименование;
		businessEntity.fullname = ЮрЛицоEDI.Наименование;
	КонецЕсли;
	
	//у нас в списке будет 1 b.e.
	resultingList = ПолучитьОбъектXDTOМеркурий("Цербер", "BusinessEntityList");
    resultingList.businessEntity.Добавить(businessEntity);
	resultingList.count = resultingList.businessEntity.Количество();
	resultingList.total = resultingList.businessEntity.Количество();
	resultingList.offset = 0;
	
	modificationOperation.resultingList = resultingList;
	modificationOperation.reason = "Нет созданного ХС, предварительная проверка по ИНН произведена.";
	                         
	ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий();
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("localTransactionId", 		"IncomingRobot");
	ПараметрыФункции.Вставить("initiator", 					ПараметрыПодключения.user);
	ПараметрыФункции.Вставить("modificationOperation",		modificationOperation);
	//Дожидаться результата
	Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "ModifyBusinessEntityRequest", Истина);
	
	Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
		Результат.Успешно = Ложь;
		НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
		Новаяошибка.ТекстОшибки = "Запрос отвергнут Меркурием";
		Возврат ""
	Иначе
		GUIDСозданногоХС = Ответ.result.modifyBusinessEntityResponse.businessEntity.guid; //вот тут в общем случае список XDTO!!
		Возврат GUIDСозданногоХС;
		
	КонецЕсли;
	
КонецФункции // СоздатьХС()

Функция ЗарегистрироватьИлиИзменитьПлощадку(Объект1С,ИНН,Адрес,Наименование,ХСВладелецGUID,АдресОбъектXDTO=Неопределено,СуществующийGUID=Неопределено) Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	Если ЗначениеЗаполнено(СуществующийGUID) Тогда 
		ВидМодификации = "UPDATE";
	Иначе
		ВидМодификации = "CREATE";
	КонецЕсли;
	
	//нам потребуются:
	//наименование
	//Тип поднадз. объекта
	//Для предприятий - адрес (с регионом )
	//ХСВладелецGUID
	//виды деятельности  (может подойдет UNKNOWN??)
	
	
	Если НЕ ЗначениеЗаполнено(Наименование) тогда
		Сообщить("Укажите Наименование площадки");
		Возврат "";
	КонецЕсли;
	
	enterprise = ПолучитьОбъектXDTOМеркурий("Цербер", "Enterprise");
	
	Если ЗначениеЗаполнено(СуществующийGUID) Тогда
		Попытка
			WSПрокси = ПолучитьWSПроксиEnterpriseService();
			Ответ = WSПрокси.GetEnterpriseByGuid(СуществующийGUID);
		Исключение
			Сообщить("На смог найти площадку");
			Возврат "";
		КонецПопытки;
		xmlЗаполнитьЗначениеXDTO(enterprise,"uuid",ВычислитьXDTO(Ответ,"uuid"));
		xmlЗаполнитьЗначениеXDTO(enterprise,"type",ВычислитьXDTO(Ответ,"type"));
		
	Иначе
		xmlЗаполнитьЗначениеXDTO(enterprise,"type",1);
		
	КонецЕсли;
	
	//Виды деятельности   - пока что мы будем писать только так
	enterprise.activityList = ПолучитьОбъектXDTOМеркурий("Цербер", 			"EnterpriseActivityList");
	activity = ПолучитьОбъектXDTOМеркурий("Цербер", 			"EnterpriseActivity");
	activity.Name = "UNKNOWN"; 	
	enterprise.activityList.activity.Добавить(activity);
	enterprise.activityList.count = 1;
	enterprise.activityList.total = 1;
	enterprise.activityList.offset = 0;
	
	xmlЗаполнитьЗначениеXDTO(enterprise,"name",Наименование);
	
	//Адрес
	address = ПолучитьОбъектXDTOМеркурий("Икар", "Address");
	Если АдресОбъектXDTO = Неопределено Тогда
		ЗаполнитьАдресОбъектаXDTO(Адрес,address,,Объект1С);	
	Иначе
		address =  АдресОбъектXDTO;
	КонецЕсли;
	enterprise.address = address;
	
	Если address.region.guid = неопределено тогда
		Сообщить("Не могу определить Регион");
		Возврат "";
	КонецЕсли;
	
	
	enterprise.owner = ПолучитьОбъектXDTOМеркурий("Цербер", "BusinessEntity");
	xmlЗаполнитьЗначениеXDTO(enterprise.owner,"GUID",ХСВладелецGUID);
	
	ЭтоНашХС = НашЛиОбъектПоGUID(ХСВладелецGUID);
	Если ЭтоНашХС = Истина Тогда
		ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(ХСВладелецGUID);
	Иначе
		ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий();
	КонецЕсли;
	Сообщить("Пробую создать площадку под ХС: "+ПараметрыПодключения.issuerId);
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий();
	ПараметрыФункции = ПодготовитьПараметрыФункцииМодификацииПлощадки(enterprise,ПараметрыПодключения,ВидМодификации);
	
	
	//Дожидаться результата
	Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "ModifyEnterpriseRequest", Истина);

	Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
		Результат.Успешно = Ложь;
		НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
		Новаяошибка.ТекстОшибки = "Запрос отвергнут Меркурием";
		Возврат ""
	Иначе
		СписокЗаписей = ВычислитьXDTO(Ответ,"result.modifyEnterpriseResponse.enterprise");
		Если ТипЗнч(СписокЗаписей) = Тип("ОбъектXDTO") тогда
			GUIDСозданнойПлощадки = ВычислитьXDTO(СписокЗаписей,"guid");	
			Возврат GUIDСозданнойПлощадки;
		ИначеЕсли ТипЗнч(СписокЗаписей) = Тип("СписокXDTO") тогда
			Для каждого enterpriseЗапись Из СписокЗаписей Цикл
				Если enterpriseЗапись.last = "true" Тогда
					Возврат ВычислитьXDTO(enterpriseЗапись,"guid");
				КонецЕсли;
			КонецЦикла;
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ЗарегистрироватьНовуюПлощадку()

Функция СвязатьПлощадкуСХС(ХСGUID,ПлощадкаGUID) Экспорт
	
	Возврат УдалитьИлиСвязатьПлощадкуИХС(ХСGUID,ПлощадкаGUID,"CREATE");

КонецФункции 

Функция НашЛиОбъектПоGUID(GUID)
	
	ЭтоНашОбъект = ложь;
	ДопСправочникЭлемент = ПолучитьЭлементСправочникаКонтурПоGUID(GUID);
	
	Если ЗначениеЗаполнено(ДопСправочникЭлемент) Тогда 
		ЭтоНашОбъект = ПолучитьДопРеквизитЭлементаДопСправочника(ДопСправочникЭлемент,"Наш")
	КонецЕсли;
	Если ЭтоНашОбъект = Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


Функция УдалитьСвязьПлощадкиСХС(ХСGUID,ПлощадкаGUID) Экспорт
	
	Возврат УдалитьИлиСвязатьПлощадкуИХС(ХСGUID,ПлощадкаGUID,"DELETE");

КонецФункции 

Функция УдалитьИлиСвязатьПлощадкуИХС(ХСGUID,ПлощадкаGUID,ЧтоДелаем) Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции(ложь);//МУФ
	Если НЕ ЗначениеЗаполнено(ХСGUID) тогда
		Результат.ОписаниеОшибки = "Не знаю GUID ХС! - не могу создать связь";
		Результат.Успешно = Ложь;
		Возврат Результат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ХСGUID) тогда
		Результат.ОписаниеОшибки = "Не знаю GUID Площадки! - не могу создать связь";
		Результат.Успешно = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	ЭтоНашХС = НашЛиОбъектПоGUID(ХСGUID);
	Если ЭтоНашХС = Истина Тогда
		ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(ХСGUID);
	Иначе
		ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий();
	КонецЕсли;
	Сообщить("Пробую связать под ХС: "+ПараметрыПодключения.issuerId);
	
	//операция
	modificationOperation =  ПолучитьОбъектXDTOМеркурий("Цербер", "BEActivityLocationsModificationOperation");
	modificationOperation.type = ЧтоДелаем;
	//площадка
	enterprise = ПолучитьОбъектXDTOМеркурий("Цербер", "Enterprise");
	xmlЗаполнитьЗначениеXDTO(enterprise,"GUID",ПлощадкаGUID);
	
	enterpriseList = ПолучитьОбъектXDTOМеркурий("Цербер", "EnterpriseList");
    enterpriseList.enterprise.Добавить(enterprise);
	enterpriseList.count = 1;
	enterpriseList.total = 1;
	enterpriseList.offset = 0;
	
	modificationOperation.enterpriseList = enterpriseList;
	//ХС
	businessEntity = ПолучитьОбъектXDTOМеркурий("Цербер", "BusinessEntity");
	xmlЗаполнитьЗначениеXDTO(businessEntity,"GUID",ХСGUID);
	modificationOperation.businessEntity = businessEntity;
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("localTransactionId", 		"IncomingRobot");
	ПараметрыФункции.Вставить("initiator", 					ПараметрыПодключения.user);
	ПараметрыФункции.Вставить("modificationOperation",		modificationOperation);
	
	//Дожидаться результата
	Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "ModifyActivityLocationsRequest", Истина);

	Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
		Результат.Успешно = Ложь;
		Результат.ОписаниеОшибки = "Запрос отвергнут Меркурием";
		Возврат Результат
	Иначе
		Результат.Успешно = Истина;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьАдресОбъектаXDTO(ЗНАЧ Адрес,address,ИспользуемаяФабрикаXDTO = Неопределено, Объект1С = Неопределено)
	
	//Процедура может использовать необязательно КорневуюФабрику. Получение XDTO объектов специфично.
	
	ТипЗначенияXDTOИкарСтрока = "http://api.vetrf.ru/schema/cdm/ikar";
	
	ОригинальныйАдрес = Адрес;
	
	Индекс = НайтиИндексВСтроке(Адрес);
	Если ЗначениеЗаполнено(Индекс) Тогда 
		xmlЗаполнитьЗначениеXDTO(address,"postIndex",Индекс);
	КонецЕсли;
	
	//Сформируем штатный адрес
	ЮрЛицоEDI = Неопределено;
	Если Объект1С <> Неопределено Тогда
		Попытка //там может оказаться что-то что мы не сможем сконвертировать
			ЮрЛицоEDI = ОсновнойМодуль.ПреобразоватьЮрФизЛицо_1С_в_EDI(Объект1С,"Юридический",Ложь);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ИспользуемаяФабрикаXDTO = Неопределено Тогда //чтобы можно было использовать из разных WS прокси
		ИспользуемаяФабрикаXDTO = КорневаяФабрика();
	КонецЕсли;
	
	//пока что только Россия
	address.country = ИспользуемаяФабрикаXDTO.Создать(ТипЗначенияXDTOИкарСтрока,                                      "Country");
	Страна = ПолучитьКлассификаторСтранМеркурий().Найти("RU","Код");
	Если Страна <> неопределено Тогда 
		xmlЗаполнитьЗначениеXDTO(address.country,"GUID",Страна.GUID);
		xmlЗаполнитьЗначениеXDTO(address.country,"name",Страна.Наименование);
	КонецЕсли;
	
	address.region = ИспользуемаяФабрикаXDTO.Создать(ТипЗначенияXDTOИкарСтрока,                                        "Region");
	Регионы = ПолучитьКлассификаторРегионовМеркурий(,Страна.GUID);
	УказанРегион = ЭлементСодержащийсяВАдресе(Регионы,Адрес);
	Если УказанРегион<>неопределено Тогда
		xmlЗаполнитьЗначениеXDTO(address.region,"GUID",УказанРегион.GUID);
		xmlЗаполнитьЗначениеXDTO(address.region,"name",УказанРегион.Наименование);
		Адрес = Стрзаменить(Адрес,УказанРегион.Наименование,"");
	Иначе
		Сообщить("Не смог разобрать из переданного адреса Регион РФ");
		Возврат; //не знаю в каком регионе искать
	КонецЕсли;
	
	Районы = ПолучитьКлассификаторРайоновРегионаМеркурий(УказанРегион.GUID);
	УказанныйРайон = ЭлементСодержащийсяВАдресе(Районы,Адрес);
	
	Если УказанныйРайон=Неопределено тогда
		//возможно региональное подчинение?
		НасПункты = ПолучитьКлассификаторНасПунктовРегионаМеркурий(УказанРегион.GUID);
		УказанныйНасПункт = ЭлементСодержащийсяВАдресе(НасПункты,Адрес);
		Если УказанныйНасПункт<>Неопределено тогда
			address.locality = ИспользуемаяФабрикаXDTO.Создать(ТипЗначенияXDTOИкарСтрока,                                            "Locality");
			xmlЗаполнитьЗначениеXDTO(address.locality,"GUID",УказанныйНасПункт.GUID);
			xmlЗаполнитьЗначениеXDTO(address.locality,"name",УказанныйНасПункт.Наименование);
			Адрес = Стрзаменить(Адрес,УказанныйНасПункт.Наименование,"");
		КонецЕсли;
	Иначе //подчинение Районное - укажем district
		address.district = ИспользуемаяФабрикаXDTO.Создать(ТипЗначенияXDTOИкарСтрока,                                       "District");
		xmlЗаполнитьЗначениеXDTO(address.district,"GUID",УказанныйРайон.GUID);
		xmlЗаполнитьЗначениеXDTO(address.district,"name",УказанныйРайон.Наименование);
		Адрес = Стрзаменить(Адрес,УказанныйРайон.Наименование,"");
		
		НасПункты = ПолучитьКлассификаторНасПунктовРайонаМеркурий(УказанныйРайон.GUID);
		УказанныйНасПункт = ЭлементСодержащийсяВАдресе(НасПункты,Адрес);
		Если УказанныйНасПункт<>Неопределено тогда
			address.locality = ИспользуемаяФабрикаXDTO.Создать(ТипЗначенияXDTOИкарСтрока,                                            "Locality");
			xmlЗаполнитьЗначениеXDTO(address.locality,"GUID",УказанныйНасПункт.GUID);
			xmlЗаполнитьЗначениеXDTO(address.locality,"name",УказанныйНасПункт.Наименование);
			Адрес = Стрзаменить(Адрес,УказанныйНасПункт.Наименование,"");
		КонецЕсли;
	КонецЕсли;
	
	//попробуем указать sublocality если у нас есть address.locality  (подчиненный населенный пункт)
	УказанныйПодчНасПункт = Неопределено;
	Если УказанныйНасПункт<>Неопределено Тогда 
		ПодчиненныеНП = ПолучитьКлассификаторНасПунктовНасПунктаМеркурий(address.locality.guid);
		УказанныйПодчНасПункт = ЭлементСодержащийсяВАдресе(ПодчиненныеНП,Адрес);
		Если УказанныйПодчНасПункт<>Неопределено тогда
			address.sublocality = ИспользуемаяФабрикаXDTO.Создать(ТипЗначенияXDTOИкарСтрока,                                            "Locality");
			xmlЗаполнитьЗначениеXDTO(address.sublocality,"GUID",УказанныйПодчНасПункт.GUID);
			xmlЗаполнитьЗначениеXDTO(address.sublocality,"name",УказанныйПодчНасПункт.Наименование);
			Адрес = Стрзаменить(Адрес,УказанныйПодчНасПункт.Наименование,"");
		КонецЕсли;
	КонецЕсли;
	
	//попробуем указать улицу если у нас есть address.locality
	Если УказанныйНасПункт<>Неопределено
		ИЛИ УказанныйПодчНасПункт <> Неопределено Тогда
		Улицы = ПолучитьКлассификаторУлицНаселенногоПунктаМеркурий(?(УказанныйПодчНасПункт <> Неопределено,address.sublocality.guid,address.locality.guid));
		УказаннаяУлица = ЭлементСодержащийсяВАдресе(Улицы,Адрес);
		Если УказаннаяУлица<>Неопределено тогда
			address.street = ИспользуемаяФабрикаXDTO.Создать(ТипЗначенияXDTOИкарСтрока,                                            "Street");
			xmlЗаполнитьЗначениеXDTO(address.street,"GUID",УказаннаяУлица.GUID);
			xmlЗаполнитьЗначениеXDTO(address.street,"name",УказаннаяУлица.Наименование);
		КонецЕсли;
	ИначеЕсли ЭтоGUIDГородаФедеральногоЗначения(address.region.guid)//Улицы Москвы/СПБ/Севастополя
		Тогда
		
		Улицы = ПолучитьКлассификаторУлицНаселенногоПунктаМеркурий(address.region.guid);
		УказаннаяУлица = ЭлементСодержащийсяВАдресе(Улицы,Адрес);
		Если УказаннаяУлица<>Неопределено тогда
			address.street = ИспользуемаяФабрикаXDTO.Создать(ТипЗначенияXDTOИкарСтрока,                                            "Street");
			xmlЗаполнитьЗначениеXDTO(address.street,"GUID",УказаннаяУлица.GUID);
			xmlЗаполнитьЗначениеXDTO(address.street,"name",УказаннаяУлица.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
	//укажем дом, индекс и room если у нас есть ЮрЛицоEDI (т.е. это НЕ поиск)
	Если ЮрЛицоEDI <> Неопределено Тогда
		Если ЗначениеЗаполнено(ЮрЛицоEDI.Адрес.Дом) Тогда
			xmlЗаполнитьЗначениеXDTO(address,"house",Строка(ЮрЛицоEDI.Адрес.Дом));
		КонецЕсли;
		Если ЗначениеЗаполнено(ЮрЛицоEDI.Адрес.Квартира) Тогда
			xmlЗаполнитьЗначениеXDTO(address,"room",Строка(ЮрЛицоEDI.Адрес.Квартира));
		КонецЕсли;
		Если ЗначениеЗаполнено(ЮрЛицоEDI.Адрес.Индекс) Тогда
			xmlЗаполнитьЗначениеXDTO(address,"postIndex",Строка(ЮрЛицоEDI.Адрес.Индекс));
		КонецЕсли;
	КонецЕсли;
	
	address.addressView = СтрЗаменить(ОригинальныйАдрес, Символы.ПС, ", ");
	
КонецПроцедуры

Функция ЭтоGUIDГородаФедеральногоЗначения(guid) Экспорт
	
	Если //Улицы Москвы/СПБ/Севастополя
		guid="0c5b2444-70a0-4932-980c-b4dc0d3f02b5"
		ИЛИ guid="c2deb16a-0330-4f05-821f-1d09c93331e6"
		ИЛИ guid="6fdecb78-893a-4e3f-a5ba-aa062459463b"
		Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции // ЭтоGUIDГородаФедеральногоЗначения()

Функция РаспарситьАдресПоСтроке(Адрес,Объект1С) Экспорт
	
	АдресXDTO = ПолучитьОбъектXDTOМеркурий("Икар", "Address");
	ЗаполнитьАдресОбъектаXDTO(Адрес,АдресXDTO,,Объект1С);
	Возврат АдресXDTO;
	
КонецФункции

Функция НайтиИндексВСтроке(ЗНАЧ Адрес)
	
	ИсходныйАдрес = Адрес;
	Для й = 1 по 9 Цикл
		Адрес = Стрзаменить(Адрес,""+й,"0");
	КонецЦикла;
	
	НайденнаяПозицияНачалаИндекса = Найти(Адрес,"000000");
	
	Если НайденнаяПозицияНачалаИндекса>0 Тогда 
		Возврат Сред(ИсходныйАдрес,НайденнаяПозицияНачалаИндекса,6);
	Иначе
		Возврат "";	
    КонецЕсли;
	
КонецФункции // НайтиИндексВСтроке()

Функция ПодготовитьПараметрыФункцииМодификацииПлощадки(enterprise,ПараметрыПодключения,ВидОперации)
	
	modificationOperation =  ПолучитьОбъектXDTOМеркурий("Цербер", "ENTModificationOperation");
	modificationOperation.type = ВидОперации;
	
	//у нас в списке будет 1 b.e.
	resultingList = ПолучитьОбъектXDTOМеркурий("Цербер", "EnterpriseList");
    resultingList.enterprise.Добавить(enterprise);
	resultingList.count = resultingList.enterprise.Количество();
	resultingList.total = resultingList.enterprise.Количество();
	resultingList.offset = 0;
	
	modificationOperation.resultingList = resultingList;
	modificationOperation.reason = "Нет созданного объекта, предварительная проверка по адресу произведена.";
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("localTransactionId", 		"IncomingRobot");
	ПараметрыФункции.Вставить("initiator", 					ПараметрыПодключения.user);
	ПараметрыФункции.Вставить("modificationOperation",		modificationOperation);

	Возврат ПараметрыФункции;
	
КонецФункции // ПодготовитьПараметрыФункцииСозданиеХС_Площадки()

Функция ЭлементСодержащийсяВАдресе(Элементы,СтрокаАдреса)
	
	СтрокаАдреса 			= СтрЗаменить(СтрокаАдреса,"ё","е");
	
	Для Каждого Элемент Из Элементы Цикл
		Если Найти(Элемент.Наименование,"ё")<>0 Тогда
			Элемент.Наименование 	= СтрЗаменить(Элемент.Наименование,"ё","е");
		КонецЕсли;
		Если Найти(СтрокаАдреса,Элемент.Наименование)<>0 Тогда
			Возврат Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


Функция ПолучитьПлощадкуПоGUID(GUID) Экспорт
	
	ТаблицаНайденных = ИнициализироватьТаблицуДляХС();
	
	Если Не ЗначениеЗаполнено(GUID) Тогда
		
		Возврат ТаблицаНайденных;
		
	КонецЕсли;
	
	WSПрокси = ПолучитьWSПроксиEnterpriseService();
	
	ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю данные о площадке по GUID");
	Попытка
		Ответ = WSПрокси.GetEnterpriseByGuid(GUID);
	Исключение
		Сообщить("Не смог получить ответ от ГИС Цербер");
		Сообщить(ОписаниеОшибки());
		Возврат ТаблицаНайденных;
	КонецПопытки;
	
	Попытка
		стр1 = ТаблицаНайденных.Добавить();
		ЗаполнитьЗначенияСвойств(стр1, Ответ);
		стр1.Адрес = ВычислитьXDTO(Ответ,"address.addressView");
		
		стр1.АдресОбъектXDTO = ВычислитьXDTO(Ответ,"address");
		стр1.owner = ВычислитьXDTO(Ответ,"owner");
		
	Исключение
		Сообщить("Не смог разобрать ответ от ГИС Цербер");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ТаблицаНайденных;
	
КонецФункции

Функция ПолучитьСписокПредприятийПоGUID(ТекGUID,ОбновитьССервера=Ложь) Экспорт
	
	ТекGUIDБезДефисов = СтрЗаменить(ТекGUID,"-",""); //это надо для того чтобы закэшировать большие списки
	
	ТаблицаНайденных = ИнициализироватьТаблицуДляПлощадки();
	
	WSПрокси = ПолучитьWSПроксиEnterpriseService();
	
	ТипWSПараметра = WSПрокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = WSПрокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;	
	
	
	Попытка
		Ответ = WSПрокси.GetBusinessEntityByGuid(ТекGUID);
	Исключение
		Сообщить("Не смог получить список предприятий по текущему Хозяйствующему субъекту.");
		Возврат ТаблицаНайденных;
	КонецПопытки;
	КоличествоПлощадок = Ответ.activityLocation.Количество();
	
	//При количестве дочерних более 20 - будем кэшировать т.к. очень долго запрашивать
	Если ОбновитьССервера = Ложь
		И КоличествоПлощадок>20 Тогда
		СохраненнаяСтруктура = ПолучитьНастройкуМеркурий("Площадки"+ТекGUIDБезДефисов);
		Если СохраненнаяСтруктура<>Неопределено Тогда
			СохраненнаяТаблицаПлощадок = ТаблицаНайденных;
			Если СохраненнаяСтруктура.Свойство("Площадки"+ТекGUIDБезДефисов,СохраненнаяТаблицаПлощадок) Тогда
				Возврат СохраненнаяТаблицаПлощадок;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоПлощадок>20 Тогда
		ОсновнойМодуль.Состояние_КонтурEDI(""+ТекущаяДата()+" Обновляю КЭШ площадок");
	КонецЕсли;
	
	//выкачивание всех площадок
	Для Каждого стр из Ответ.activityLocation Цикл
		
		Если ЗначениеЗаполнено(стр.enterprise.guid) Тогда
			ОтветПоПлощадке = WSПрокси.GetEnterpriseByGuid(стр.enterprise.guid);
			стр1 = ТаблицаНайденных.Добавить();
			ЗаполнитьЗначенияСвойств(стр1, ОтветПоПлощадке);
			стр1.Адрес = ВычислитьXDTO(ОтветПоПлощадке,"address.addressView");
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоПлощадок > 20 Тогда
		СохранитьНастройкуМеркурий("Площадки"+ТекGUIDБезДефисов,ТаблицаНайденных);
	КонецЕсли;
	
  	Возврат ТаблицаНайденных;
	
КонецФункции // ПолучитьСпискоПредприятийПоGUID()

Функция ПолучитьСписокПредприятийСОтбором(КлючПоиска,АдресПредставление,АдресОбъектXDTO=Неопределено) Экспорт
	
	ТипЗначенияXDTOИкарСтрока = "http://api.vetrf.ru/schema/cdm/ikar";
	ТаблицаНайденных = ИнициализироватьТаблицуДляПлощадки();
	
	WSПрокси = ПолучитьWSПроксиEnterpriseService();
	
	ТипWSПараметра = WSПрокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = WSПрокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;	
	
	//Отбор
	enterprise = WSПрокси.ФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "Enterprise");
	             
	Если ЗначениеЗаполнено(КлючПоиска) Тогда 
		enterprise.name = КлючПоиска;
	КонецЕсли;
	
	Если АдресОбъектXDTO = Неопределено Тогда
		address 	  = WSПрокси.ФабрикаXDTO.Создать(ТипЗначенияXDTOИкарСтрока, "Address"); //этот заполним механизмом парсинга
		addressFilter = WSПрокси.ФабрикаXDTO.Создать(ТипЗначенияXDTOИкарСтрока, "Address"); //этот будем использовать для отбора
		ЗаполнитьАдресОбъектаXDTO(АдресПредставление,address,WSПрокси.ФабрикаXDTO);
	Иначе
		address = АдресОбъектXDTO;
		addressFilter = WSПрокси.ФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/ikar", "Address"); //этот будем использовать для отбора
	КонецЕсли;
	
	//Правила фильтрации ВЕТИС:
	//region	Регион Российской Федерации.	ikar:Region	0..1
	//district	Район региона Российской Федерации.
	//При поиске по району указывать регион не обязательно.
	//ikar:District	0..1
	//locality	Населённый пункт регионального подчинения.
	//По населённым пунктам районного подчинения поиск не осуществляется;
	//При поиске обязательно также указывать регион.
	//ikar:Locality	0..1
	
	//На основании них наш алгоритм:
	//1) Если у нас есть district то указываем его и все
	//2) Если у нас нет  district то 	если есть locality то указываем его и region
	//3) 								если нет  locality то указываем только region
	
	addressFilter.region = WSПрокси.ФабрикаXDTO.Создать(ТипЗначенияXDTOИкарСтрока,"Region");
	
	Если address.district <> Неопределено и ЗначениеЗаполнено(address.district.guid) Тогда 
		addressFilter.district = WSПрокси.ФабрикаXDTO.Создать(ТипЗначенияXDTOИкарСтрока,"District");
		addressFilter.district.guid = ВычислитьXDTO(address.district,"guid");	
	ИначеЕсли address.locality <> Неопределено и ЗначениеЗаполнено(address.locality.guid) Тогда
		addressFilter.locality = WSПрокси.ФабрикаXDTO.Создать(ТипЗначенияXDTOИкарСтрока,"Locality");
		addressFilter.locality.guid = ВычислитьXDTO(address.locality,"guid");	
		addressFilter.region.guid 	= ВычислитьXDTO(address.region,"guid");	
	ИначеЕсли address.region <> Неопределено и ЗначениеЗаполнено(address.region.guid) Тогда
		addressFilter.region.guid 	= ВычислитьXDTO(address.region,"guid");	
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(АдресПредставление) Тогда //старая проверка когда не было норм парсера
	enterprise.address = addressFilter;
	//КонецЕсли;
	
	Попытка
		Ответ = WSПрокси.GetRussianEnterpriseList(ListOptions,enterprise);
		
		Для Каждого стр из Ответ.enterprise Цикл
			
			Если ЗначениеЗаполнено(стр.guid) Тогда
				стр1 = ТаблицаНайденных.Добавить();
				ЗаполнитьЗначенияСвойств(стр1, стр);
				стр1.Адрес = ВычислитьXDTO(стр,"address.addressView");
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		Сообщить("Не смог получить список предприятий c отбором");
		Сообщить(ОписаниеОшибки());
		Возврат ТаблицаНайденных;
	КонецПопытки;
	
	Возврат ТаблицаНайденных;
	
КонецФункции // ПолучитьСписокПредприятийСОтбором()

Процедура МеркурийСвязатьСообщениеСДокументом(Сообщение,ДокументСсылка) Экспорт
	
	ОсновнойМодуль.НачатьТранзакцию_КонтурEDI();
	
	Сообщение.Документ1С		= ДокументСсылка;
	Сообщение.ДокументСсылка	= ДокументСсылка;
	
	СообщениеОбъект = ОсновнойМодуль.ПолучитьОбъектСообщения(Сообщение.СообщениеСсылка);
	СообщениеОбъект.Документ = ДокументСсылка;
	СообщениеОбъект.Хранилище = Новый ХранилищеЗначения(Сообщение,Новый СжатиеДанных(9));

	СообщениеОбъект.Записать();
	
	ОсновнойМодуль.ЗафиксироватьТранзакцию_КонтурEDI();
	
КонецПроцедуры


Функция ПолучитьНастройкиФормыСообщенияМеркурий(ТипСообщения,Направление,СтатусСообщения = Неопределено) Экспорт
	
	СтруктураНастроек = Новый Структура();
	//СтруктураНастроек.Вставить("Заголовок",						ПолучитьЗаголовокФормыСообщения(ТипСообщения,Направление));
	//СтруктураНастроек.Вставить("КнопкиКоманднойПанели",			ПолучитьКнопкиКоманднойПанелиФормыСообщения(ТипСообщения,Направление,СтатусСообщения));
	//СтруктураНастроек.Вставить("НевидимыеПоля",					ПолучитьНевидимыеПоляСообщения(ТипСообщения,Направление,СтатусСообщения));
	//СтруктураНастроек.Вставить("НевидимыеКолонки",				ПолучитьНевидимыеКолонкиСообщения(ТипСообщения,Направление,СтатусСообщения));
	СтруктураНастроек.Вставить("ОбязательныеПоля",				ПолучитьОбязательныеПоляТранзакцииМеркурийДляКарточкиСообщения(ТипСообщения,Направление));
	//СтруктураНастроек.Вставить("ПроверятьПоляПриОткрытииФормы",	Истина);
	//СтруктураНастроек.Вставить("ПроверятьПоля1С",				Истина);
	//СтруктураНастроек.Вставить("ПроверятьПоляEDI",				Ложь);
	//СтруктураНастроек.Вставить("ТолькоПросмотрПолей1С", 		Ложь);
	//СтруктураНастроек.Вставить("ТолькоПросмотрПолейEDI",		Ложь);
	////СтруктураНастроек.Вставить("СоответствиеЮрФизЛиц",		ПолучитьСоответствиеЮрФизЛиц(ТипСообщения,Направление));
	//СтруктураНастроек.Вставить("ПримечанияПолей",				Неопределено);
	
	//СтруктураНастроек.ТолькоПросмотрПолейEDI = Истина;
	
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьНастройкиФормыСообщения",,
			Новый Структура("ТипСообщения,Направление,СтруктураНастроек",
			ТипСообщения,Направление,СтруктураНастроек));
			
  	Если РезультатПМ <> Неопределено Тогда
		СтруктураНастроек = РезультатПМ.СтруктураНастроек;
	КонецЕсли;

	Возврат СтруктураНастроек;	
	
КонецФункции

//печать

//Печать ВСД
// Подключает компоненту, выполненную по технологии Native API и COM.
// Компонента должна храниться в макете конфигурации в виде ZIP-архива.
//
// Параметры:
//  Идентификатор   - Строка - идентификатор объекта внешней компоненты.
//  ПолноеИмяМакета - Строка - полное имя макета конфигурации, хранящего ZIP-архив.
//
// Возвращаемое значение:
//  AddIn, Неопределено - экземпляр объекта внешней компоненты или Неопределено, если не удалось создать.
//
// Пример:
//
//  ПодключаемыйМодуль = ОбщегоНазначения.ПодключитьКомпонентуИзМакета(
//      "CNameDecl",
//      "ОбщийМакет.КомпонентаСклоненияФИО");
//
//  Если ПодключаемыйМодуль <> Неопределено Тогда 
//      // ПодключаемыйМодуль содержит созданный экземпляр подключенной компоненты.
//  КонецЕсли;
//
//  ПодключаемыйМодуль = Неопределено;
//
Функция ПодключитьКомпонентуИзМакета(Идентификатор, ИмяМакета) Экспорт

	ПодключаемыйМодуль = Неопределено;
	
	// Генерация уникального имени
	СимволическоеИмя = "С" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	
	Если ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ПолучитьМакет(ИмяМакета)), СимволическоеИмя) Тогда
		
		Попытка
			ПодключаемыйМодуль = Новый("AddIn." + СимволическоеИмя + "." + Идентификатор);
		Исключение
			
			Сообщить("Не удалось подключить модуль "+ИмяМакета+". "+ОписаниеОшибки());
			
			ПодключаемыйМодуль = Неопределено;
			
		КонецПопытки;
		
	Иначе
		
		Сообщить("Не удалось подключить компоненту "+ИмяМакета+"!");
		
	КонецЕсли;
	
	Возврат ПодключаемыйМодуль;
	
КонецФункции

Функция КомпонентаФормированияQRКода()
	
	QRCodeGenerator = ПодключитьКомпонентуИзМакета("QRCodeExtension", "КомпонентаПечатиQRКода");//ЭтотОбъект.Метаданные().Макеты.КомпонентаПечатиQRКода.ПолноеИмя());
		
	Если QRCodeGenerator = Неопределено Тогда 
		Сообщить(НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода.'"));
	КонецЕсли;
	
	Возврат QRCodeGenerator;
	
КонецФункции

// Возвращает двоичные данные для формирования QR кода.
//
// Параметры:
//  QRСтрока         - Строка - данные, которые необходимо разместить в QR-коде.
//
//  УровеньКоррекции - Число - уровень погрешности изображения при котором данный QR-код все еще возможно 100%
//                             распознать.
//                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
//                     0(7% погрешности), 1(15% погрешности), 2(25% погрешности), 3(35% погрешности).
//
//  Размер           - Число - определяет длину стороны выходного изображения в пикселях.
//                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
//
// Возвращаемое значение:
//  ДвоичныеДанные  - буфер, содержащий байты PNG-изображения QR-кода.
// 
// Пример:
//  
//  // Выводим на печать QR-код, содержащий в себе информацию зашифрованную по УФЭБС.
//
//  QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
//  ТекстОшибки = "";
//  ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190, ТекстОшибки);
//  Если Не ПустаяСтрока(ТекстОшибки)
//      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
//  КонецЕсли;
//
//  КартинкаQRКода = Новый Картинка(ДанныеQRКода);
//  ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода;
//
Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер) Экспорт
	
	Если ГенераторQRКода = Неопределено Тогда
		
		ГенераторQRКода = КомпонентаФормированияQRКода();
		Если ГенераторQRКода = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);
	Исключение
		Сообщить("Ошибка при формировании QR-кода "+QRСтрока+". " + ОписаниеОшибки()); 
	КонецПопытки;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции

Функция ПолучитьТабличныйДокументПеречняВСД(ДокументРеализации, ПрефиксТестовогоСервера) Экспорт//также используется в макете ВнешняяПечатнаяФормаВСД
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_Сообщения.Хранилище
	               |ИЗ
	               |	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	               |ГДЕ
	               |	КонтурEDI_Сообщения.Документ = &Документ
	               |	И (КонтурEDI_Сообщения.ТипСообщения = ""M_DES"" ИЛИ КонтурEDI_Сообщения.ТипСообщения = ""M_MOV"")
	               |	И НЕ КонтурEDI_Сообщения.ПометкаУдаления
	               //|	И КонтурEDI_Сообщения.Архив = ИСТИНА";
                   |	И (КонтурEDI_Сообщения.ТребуемоеДействие = ""Работа завершена""
	               |			ИЛИ КонтурEDI_Сообщения.ТребуемоеДействие = ""Распечатать ВСД"")";

	Запрос.УстановитьПараметр("Документ", ДокументРеализации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Сообщение = Выборка.Хранилище.Получить();
	Иначе
		Сообщить("Данная отгрузка не зарегистрирована в ГИС.Меркурий. Невозможно распечатать ВСД!");
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Макет = ПолучитьМакет("ПечатьВСД");
	ОбластьДляПечати = Макет.ПолучитьОбласть("ВСДСтрока");
	текДата = ТекущаяДата();
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	Если ЗначениеЗаполнено(Сообщение.Документ1С) Тогда
		ОбластьШапка.Параметры.Номер = Сообщение.Документ1С.Номер;
		ОбластьШапка.Параметры.Дата = Формат(Сообщение.Документ1С.Дата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьШапка);	
	
	КоличествоНаСтранице = ПолучитьКонстантуEDI("М_КоличествоВСДНаСтранице");
	КоличествоНаСтранице = ?(КоличествоНаСтранице = Неопределено или КоличествоНаСтранице = 0, 8, КоличествоНаСтранице);
			
	СчетчикНаСтранице = 0;
	Для Каждого стрТовары из Сообщение.Товары Цикл
		
		Если Не ЗначениеЗаполнено(стрТовары.ВетСертификатUUID) Тогда
			Продолжить;
		КонецЕсли;
		
		УИД = стрТовары.ВетСертификатUUID;
		Если СтрДлина(УИД)<39 Тогда
			УИД = СтрЗаменить(УИД, "-", "");
			Если СтрДлина(УИД) = 32 Тогда
				УИД = Лев(УИД, 4)+"-"+Сред(УИД, 5, 4)+"-"+Сред(УИД, 9, 4)+"-"+Сред(УИД, 13, 4)+"-"+Сред(УИД, 17, 4)+"-"+Сред(УИД, 21, 4)+"-"+Сред(УИД, 25, 4)+"-"+Сред(УИД, 29, 4)
			КонецЕсли;
		КонецЕсли;

		QRСтрока ="https://"+ПрефиксТестовогоСервера+"mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+УИД;
		ДанныеQRКода = ДанныеQRКода(QRСтрока, 1, 120);
		
		Если НЕ ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
			
			Сообщить("Не удалось сформировать QR код");
			
			Возврат Неопределено;
		КонецЕсли;

		ОбластьДляПечати.Параметры.ИдентификаторВСД = ВРЕГ(УИД);
		ОбластьДляПечати.Параметры.Наименование = стрТовары.Номенклатура.Наименование;
		ОбластьДляПечати.Параметры.СрокГодности = Формат(стрТовары.СрокГодности,"ДФ=dd.MM.yy")+?(ЗначениеЗаполнено(стрТовары.СрокГодности2)," - "+Формат(стрТовары.СрокГодности2,"ДФ=dd.MM.yy"),"");
		ОбластьДляПечати.Параметры.ДатаПроизводства = Формат(стрТовары.ДатаПроизводства,"ДФ=dd.MM.yy")+?(ЗначениеЗаполнено(стрТовары.ДатаПроизводства2)," - "+Формат(стрТовары.ДатаПроизводства2,"ДФ=dd.MM.yy"),"");
		
		ЕдиницаИзмеренияРасшифровка = ПолучитьКлассификаторЕдиницИзмеренияМеркурий().Найти(стрТовары.unitUUID,"UUID");
		Если ЕдиницаИзмеренияРасшифровка<>Неопределено Тогда
			//мы знаем что это за единица по данным Меркурия
			ЕдиницаИзмеренияТекст = ЕдиницаИзмеренияРасшифровка.Наименование;
			ОбластьДляПечати.Параметры.Количество = ""+стрТовары.Количество + " ("+ЕдиницаИзмеренияТекст+")";
			//Если ЗначениеЗаполнено(стрТовары.КоличествоВДокументе) и ЗначениеЗаполнено(стрТовары.ЕдиницаИзмерения) Тогда 
			//	ОбластьДляПечати.Параметры.Количество = ОбластьДляПечати.Параметры.Количество + " // "+стрТовары.КоличествоВДокументе + " ("+стрТовары.ЕдиницаИзмерения+")";
			//КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(стрТовары.КоличествоВДокументе) Тогда 
				//придется распечатать так как в документе 1с (могут быть штуки, но тогда они будут до пересчета)
				ЕдиницаИзмеренияТекст = СокрЛП(стрТовары.ЕдиницаИзмерения);
				ОбластьДляПечати.Параметры.Количество = ""+стрТовары.КоличествоВДокументе + " ("+стрТовары.ЕдиницаИзмерения+")";
			Иначе
				//просто без количества тогда
				ОбластьДляПечати.Параметры.Количество = ""+стрТовары.Количество;
			КонецЕсли;
		КонецЕсли;
		
		КартинкаQRКода = Новый Картинка(ДанныеQRКода);
		
		ОбластьДляПечати.Рисунки.КартинкаQRКода.Картинка = КартинкаQRКода;
		
		Если СчетчикНаСтранице = КоличествоНаСтранице Тогда 
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			СчетчикНаСтранице = 0;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьДляПечати);
		СчетчикНаСтранице = СчетчикНаСтранице + 1;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьТабличныйДокументПеречняВСДПоСпискуСообщений(МассивСообщений, ПрефиксТестовогоСервера, УстанавливатьСтатусВыполнен = Ложь) Экспорт//также используется в макете ВнешняяПечатнаяФормаВСД
	
	ОбщийТабДокумент = Неопределено;
	
	Для Сч = 0 по МассивСообщений.ВГраница() Цикл
		СообщениеСсылка = МассивСообщений.Получить(Сч);
		Если СообщениеСсылка<>Неопределено и ЗначениеЗаполнено(СообщениеСсылка.Документ) Тогда
			ТабДокумент = ПолучитьТабличныйДокументПеречняВСД(СообщениеСсылка.Документ, ПрефиксТестовогоСервера);
			Если ТабДокумент<>Неопределено Тогда
				
				Если ОбщийТабДокумент = Неопределено Тогда
					ОбщийТабДокумент = Новый ТабличныйДокумент;
					ОбщийТабДокумент.АвтоМасштаб = Истина;
					ОбщийТабДокумент.ОтображатьСетку = Ложь;
					ОбщийтабДокумент.ОтображатьЗаголовки = Ложь;
				КонецЕсли;
				
				ОбщийТабДокумент.Вывести(ТабДокумент);
			
				Если Сч<МассивСообщений.ВГраница() Тогда
					ОбщийТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				Если УстанавливатьСтатусВыполнен Тогда
					УстановитьСтатусСообщенияМеркурий("Выполнен", "Работа завершена", СообщениеСсылка.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщийТабДокумент;
	
КонецФункции


Функция ПолучитьДопРеквизитЭлементаДопСправочника(Элемент,ИмяРеквизита) Экспорт
	
	ДопРеквизиты = Элемент.Ссылка.ДополнительныеРеквизиты;
	СтрокаСРеквизитом = ДопРеквизиты.Найти(ИмяРеквизита,"ИмяРеквизита"); 
	Если СтрокаСРеквизитом = Неопределено Тогда 
		Возврат Неопределено;
	Иначе
		Возврат СтрокаСРеквизитом.Значение;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьАртикулНаименованиеИШтрихкодТаблицыПродукцииПроизводителя(ТаблицаПродукцияПроизводителя) Экспорт

	СтандартнаяОбработкаEDI = Истина;
	ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьТаблицуПродукцииПроизводителя",СтандартнаяОбработкаEDI,
			Новый Структура("ТаблицаПродукцияПроизводителя",	ТаблицаПродукцияПроизводителя));
			

КонецПроцедуры

Функция ПолучитьСписокНашихПлощадок() Экспорт//возвращаемСписок Площадок - элементов справочника

	Возврат ПолучитьСписокНашихЭлементовСправочника("МеркурийПлощадка");	

КонецФункции // ПолучитьСписокНашихПлощадок()

Функция ПолучитьСписокНашихОрганизаций() Экспорт

	Возврат ПолучитьСписокНашихЭлементовСправочника("МеркурийХС");	

КонецФункции // ПолучитьСписокНашихОрганизаций()

Функция ПолучитьСписокНашихЭлементовСправочника(ИмяСправочника) Экспорт//возвращаемСписок Площадок - элементов справочника

	ТаблицаВсехЭлементов = ПолучитьСписокЭлементовСправочникаМеркурий(ИмяСправочника);
	НашиЭлементы = ТаблицаВсехЭлементов.НайтиСтроки(Новый Структура("Наш",Истина));
	
	СписокНашихЭлементов = Новый СписокЗначений;
	
	Для Каждого НашЭлемент Из НашиЭлементы Цикл
		НоваяПлощадка = СписокНашихЭлементов.Добавить(НашЭлемент.ДопСправочникСсылка,НашЭлемент.Наименование+" / "+НашЭлемент.GUID);
	КонецЦикла;
	
	Возврат СписокНашихЭлементов

КонецФункции // ПолучитьСписокНашихПлощадок()

Функция ПолучитьКаталогПродукцииПоПлощадке(ПлощадкаGUID) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_СоответствияТоваров.Номенклатура,
	               |	КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК subProductGUID,
	               |	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры
	               |ПОМЕСТИТЬ СопоставленныеПозиции
	               |ИЗ
	               |	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	               |ГДЕ
	               |	КонтурEDI_СоответствияТоваров.Партнер = &ПартнерМеркурий
	               |	И КонтурEDI_СоответствияТоваров.КодТовараПартнера <> """"
	               |	И КонтурEDI_СоответствияТоваров.КодТовараПартнера <> ""00000000-0000-0000-0000-000000000000""
	               |	И КонтурEDI_СоответствияТоваров.ПроизводимТовар
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтурМеркурий_КаталогПродукции.Номенклатура,
	               |	КонтурМеркурий_КаталогПродукции.ХарактеристикаНоменклатуры,
	               |	КонтурМеркурий_КаталогПродукции.МеркурийproductItemGUID КАК productItemGUID,
	               |	КонтурМеркурий_КаталогПродукции.МеркурийproductItemUUID КАК productItemUUID
	               |ПОМЕСТИТЬ ВТ_СохраненныеProductItem
	               |ИЗ
	               |	РегистрСведений.КонтурМеркурий_КаталогПродукции КАК КонтурМеркурий_КаталогПродукции
	               |ГДЕ
	               |	КонтурМеркурий_КаталогПродукции.ПлощадкаGUID = &ПлощадкаGUID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЕСТЬNULL(СопоставленныеПозиции.Номенклатура, ВТ_СохраненныеProductItem.Номенклатура) КАК Номенклатура,
	               |	СопоставленныеПозиции.subProductGUID,
	               |	ЕСТЬNULL(ВТ_СохраненныеProductItem.productItemGUID, """") КАК productItemGUID,
	               |	ЕСТЬNULL(ВТ_СохраненныеProductItem.productItemUUID, """") КАК productItemUUID,
	               |	СопоставленныеПозиции.ХарактеристикаНоменклатуры
	               |ИЗ
	               |	СопоставленныеПозиции КАК СопоставленныеПозиции
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СохраненныеProductItem КАК ВТ_СохраненныеProductItem
	               |		ПО СопоставленныеПозиции.Номенклатура = ВТ_СохраненныеProductItem.Номенклатура
	               |			И СопоставленныеПозиции.ХарактеристикаНоменклатуры = ВТ_СохраненныеProductItem.ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("ПлощадкаGUID",ПлощадкаGUID);
	Запрос.УстановитьПараметр("ПартнерМеркурий", ПартнерМеркурий());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Результат.Выгрузить();	
	
КонецФункции

Функция ПересоздатьКолонкуТаблицы(Таблица,ИмяКолонки,ТипКолонки = "Булево") Экспорт
	
	Если Таблица.Колонки.Найти(ИмяКолонки)= Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяКолонки,Новый ОписаниеТипов(ТипКолонки));
	Иначе
		Таблица.Колонки.Удалить(Таблица.Колонки.Найти(ИмяКолонки));
		Таблица.Колонки.Добавить(ИмяКолонки,Новый ОписаниеТипов(ТипКолонки));
	КонецЕсли;
	
КонецФункции

Процедура ОпубликоватьКаталогПлощадки(GUIDПлощадки,ТаблицаПродукцияПроизводителя,ПлощадкаПроизводитель) Экспорт
	
	ОсновнойМодуль.Состояние_КонтурEDI("Публикую каталог.");
	Всего = ТаблицаПродукцияПроизводителя.Количество();
	й=0;
	ПересоздатьКолонкуТаблицы(ТаблицаПродукцияПроизводителя,"applicationId","Строка");
	
	Для Каждого СтрокаТаблицыПродукции Из ТаблицаПродукцияПроизводителя Цикл
		
		Если НЕ СтрокаТаблицыПродукции.Пометка Тогда
			Продолжить;
		КонецЕсли;		

		й=й+1; ОсновнойМодуль.Состояние_КонтурEDI(""+й+"/"+Всего);
		//определим принадлежность
		Если Не ЕстьЧтоОбновлятьПоТовару(СтрокаТаблицыПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Значениезаполнено(СтрокаТаблицыПродукции.productItemUUID) Тогда
			Если Значениезаполнено(СтрокаТаблицыПродукции.Номенклатура) ТОгда
				ТипОперацииСТоваром = "UPDATE";
			Иначе
				ТипОперацииСТоваром = "DELETE";
			КонецЕсли;
		Иначе
			ТипОперацииСТоваром = "CREATE";
		КонецЕсли;
		
		ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(,GUIDПлощадки,,Истина);
		Если НЕ ПараметрыПодключения.ЕстьДоступ Тогда
			Продолжить;
		КонецЕсли;

		//собираем табличку (пока что только 1 строка разрешена сервисом) 
		modificationOperation = 	ПолучитьОбъектXDTOМеркурий("АргусТовары", 			"PSLModificationOperation");
		modificationOperation.type = ТипОперацииСТоваром;
		enterprise = ПолучитьОбъектXDTOМеркурий("Цербер",  "Enterprise");
		xmlЗаполнитьЗначениеXDTO(enterprise,"GUID",GUIDПлощадки);
		modificationOperation.enterprise = enterprise;
		resultingList =  ПолучитьОбъектXDTOМеркурий("АргусТовары",  "ProductItemList");
		resultingList.count = 1;
		resultingList.total = 1;
		resultingList.offset = 0;
		ProductItem = ПолучитьОбъектXDTOМеркурий("АргусТовары",  "ProductItem");
		ProductItem.name = СтрокаТаблицыПродукции.Наименование;
		ProductItem.code = СтрокаТаблицыПродукции.Артикул;
		ProductItem.subProduct = ПолучитьОбъектXDTOМеркурий("АргусТовары",  "SubProduct");
		ProductItem.product = ПолучитьОбъектXDTOМеркурий("АргусТовары",  "Product");
		xmlЗаполнитьЗначениеXDTO(ProductItem,"correspondToGost",СтрокаТаблицыПродукции.СоответствуетГОСТу);
		//xmlЗаполнитьЗначениеXDTO(ProductItem,"correspondToGost",Истина);
		xmlЗаполнитьЗначениеXDTO(ProductItem,"gost",СтрокаТаблицыПродукции.GOST);
		
		Если ЗначениеЗаполнено(СтрокаТаблицыПродукции.productItemUUID) Тогда
			xmlЗаполнитьЗначениеXDTO(ProductItem,"uuid",СтрокаТаблицыПродукции.productItemUUID);
		КонецЕсли;
		
		ProductItem.subProduct.GUID = ?(ТипОперацииСТоваром = "DELETE",СтрокаТаблицыПродукции.subProductGuidМеркурий,СтрокаТаблицыПродукции.subProductGuid);
		СтруктураВерхнихУровней = ПолучитьproductGUIDиproductTypeПоsubProductGUID(ProductItem.subProduct.GUID);
		
		Если (Не ЗначениеЗаполнено(СтруктураВерхнихУровней.productGUID) ИЛИ НЕ(СтруктураВерхнихУровней.productType))
			И ТипОперацииСТоваром <> "DELETE"Тогда
			Сообщить("ОООпс, проблема с subProductGUID "+СтрокаТаблицыПродукции.subProductGuid+" - кажется что он, либо неактуален, либо не соответствует выбранным в настройке типам (1 уровень классификации)");
			Продолжить;
		КонецЕсли;
		
		Если ТипОперацииСТоваром <> "DELETE" Тогда
			ProductItem.product.GUID = СтруктураВерхнихУровней.productGUID; 
			ProductItem.productType = СтруктураВерхнихУровней.productType; 
		КонецЕсли;
		
		resultingList.productItem.Добавить(ProductItem);
		
		Если ТипОперацииСТоваром = "DELETE" Тогда
			modificationOperation.affectedList = resultingList;	
		Иначе
			modificationOperation.resultingList = resultingList;	
		КонецЕсли;
		
		ПараметрыФункции = Новый Структура();
		ПараметрыФункции.Вставить("Наименование", 		"modifyProducerStockListRequest");
		ПараметрыФункции.Вставить("localTransactionId", "IncomingRobot");
		ПараметрыФункции.Вставить("initiator", 			ПараметрыПодключения.user);
		ПараметрыФункции.Вставить("modificationOperation",		modificationOperation);
		
		//ПараметрыПодключения.ListOptions.offset = 0;
		//
		//ПараметрыФункции.Вставить("listOptions", ПараметрыПодключения.ListOptions);		
		
		//Не Дожидаться результата, а обойти потом
		Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "ModifyProducerStockListRequest", Ложь,СтрокаТаблицыПродукции.applicationId);
		
		Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда  //операция не прошла
			Продолжить;	
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьВыполнениеТаблицыТранзакций(ТаблицаПродукцияПроизводителя,ПараметрыПодключения,GUIDПлощадки,ПлощадкаПроизводитель);
	
КонецПроцедуры

Функция ПроверитьВыполнениеТаблицыТранзакций(ТаблицаСодержащаяКолонкуapplicationId,ПараметрыПодключения,GUIDПлощадки,ПлощадкаПроизводитель)
	//пока что задача - только выгураться в комментарии что что-то пошло не так
	
	Если ТаблицаСодержащаяКолонкуapplicationId.Колонки.Найти("applicationId") <> Неопределено Тогда 
		й=0;
		Всего = ТаблицаСодержащаяКолонкуapplicationId.количество();
		Для Каждого СтрокаСТранзакцией Из ТаблицаСодержащаяКолонкуapplicationId Цикл
			й=й+1; ОсновнойМодуль.Состояние_КонтурEDI(""+й+"/"+Всего+" Проверяю успешность публикации...");
			Если ЗначениеЗаполнено(СтрокаСТранзакцией.applicationId) Тогда 
				MercAppDO = ЗапроситьРезультатОбработкиЗаявкиМеркурий(СтрокаСТранзакцией.applicationId,ПараметрыПодключения,Истина);
				ЗапомнитьUUIDиGUIDНоменклатуры(СтрокаСТранзакцией,MercAppDO,GUIDПлощадки,ПлощадкаПроизводитель);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции


Функция ЕстьЧтоОбновлятьПоТовару(ДанныеСтроки)Экспорт
	
	ЕстьРасхождения = Ложь;
	
	МассивСравниваемых=	ОсновнойМодуль.РазложитьСтроку(ПолучитьПоляСверкиСтрокиКаталогаПлощадки(),",");
	
	Для Каждого ЭлементСравнения Из МассивСравниваемых Цикл
		ЕстьРасхождение = ложь;
		Выполнить("ЕстьРасхождение = ДанныеСтроки."+ЭлементСравнения+"<> ДанныеСтроки."+ЭлементСравнения+"Меркурий");
		Если ЕстьРасхождение тогда
			ЕстьРасхождения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьРасхождения;
	
КонецФункции

Функция ПолучитьПоляСверкиСтрокиКаталогаПлощадки() Экспорт
	
	Возврат "GOST,Наименование,subProductGuid,GTIN,СоответствуетГОСТу";
	
КонецФункции

Функция ПрочитатьКаталогПлощадки(GUIDПлощадки) Экспорт
	
	ОсновнойМодуль.Состояние_КонтурEDI("Вычитываю данные Меркурий");
	МассивSubProduct = ПолучитьМассивСопоставленныхSubProduct();
	
	ТаблицаПродукцияПроизводителя = новый ТаблицаЗначений;
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("Артикул");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("Наименование");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("GTIN");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("productItemUUID");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("СоответствуетГОСТу");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("GOST");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("subProductGuid");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("productItemGUID");
	
	//GetProductItemList
	
	Прокси = ПолучитьWSПроксиСправочникПродукции();
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;	
	
	Для Каждого ВариантSubProduct Из МассивSubProduct Цикл	
		Смещение = 0;
		Пока Истина Цикл
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			ListOptions.offset = Смещение;
			ТипWSПараметраsubProductUUID = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("UUID");
			subProduct = Прокси.ФабрикаXDTO.Создать(ТипWSПараметраsubProductUUID);
			Попытка
				Ответ = Прокси.GetProductItemList(ListOptions,ВариантSubProduct,GUIDПлощадки);
			Исключение
				//Сообщить(ОписаниеОшибки());
				Прервать;  // на рефакторинг - сделать как в EDI 2 попытки
			КонецПопытки;
			
			Для Каждого стр из Ответ.productItem Цикл
				#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				#КонецЕсли
				НоваяСтрокаТаблицы = ТаблицаПродукцияПроизводителя.Добавить();
				НоваяСтрокаТаблицы.Артикул 				= стр.code;
				НоваяСтрокаТаблицы.Наименование 		= стр.name;
				НоваяСтрокаТаблицы.СоответствуетГОСТу 	= стр.correspondToGost;
				НоваяСтрокаТаблицы.GOST 				= стр.GOST;
				НоваяСтрокаТаблицы.productItemUUID 		= стр.UUID;
				НоваяСтрокаТаблицы.productItemGUID 		= стр.GUID;
				НоваяСтрокаТаблицы.subProductGuid 		= стр.subProduct.Guid;
			КонецЦикла;
			
			Если Ответ.Count + Смещение >= Ответ.Total Тогда 
				Прервать; 
			КонецЕсли;
			
			Смещение = Смещение + 1000;
			
		КонецЦикла;
	КонецЦикла;
	
	ОсновнойМодуль.Состояние_КонтурEDI("Продукция прощадки Прочитана, сопоставляю");
	Возврат ТаблицаПродукцияПроизводителя;
	
КонецФункции

Функция ПолучитьМассивСопоставленныхSubProduct() Экспорт

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК subPruductGUID
               |ИЗ
               |	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
               |ГДЕ
               |	КонтурEDI_СоответствияТоваров.Партнер = &Партнер
               |	И КонтурEDI_СоответствияТоваров.КодТовараПартнера <> ""00000000-0000-0000-0000-000000000000""";

Запрос.УстановитьПараметр("Партнер",ПартнерМеркурий() );

Результат = Запрос.Выполнить();

Возврат Результат.Выгрузить().ВыгрузитьКолонку("subPruductGUID");	

КонецФункции // ПолучитьМассивСопоставленныхSubProduct()

Процедура ЗаписатьСообщение(Сообщение) Экспорт
	
	СообщениеОбъект = Сообщение.СообщениеСсылка.ПолучитьОбъект();
	СообщениеОбъект.Хранилище = Новый ХранилищеЗначения(Сообщение,Новый СжатиеДанных(9));
	
	Если Сообщение.Статус = "Аннулирован" ИЛИ  Сообщение.Статус = "АннулированЧастично" Тогда 
		СообщениеОбъект.Статус = Сообщение.Статус;	
	КонецЕсли;
	
	СообщениеОбъект.Записать();
	
КонецПроцедуры

Процедура ПрисвоитьСоответствиеНоменклатуры(Ссылка,GUID,НаименованиеМеркурий,ПартнерМеркурий,Коэффициент = неопределено,Производим = Неопределено, МеркурийЕдиницаGUID = Неопределено, ХарактеристикаНоменклатуры = Неопределено) Экспорт
	
	Если НЕ ОчиститьСоответствиеНоменклатуры(Ссылка,GUID,НаименованиеМеркурий,ПартнерМеркурий,Коэффициент,Производим) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписиСоответствийТоваров = РегистрыСведений.КонтурEDI_СоответствияТоваров.СоздатьМенеджерЗаписи();
	
		МенеджерЗаписиСоответствийТоваров.Партнер						= ПартнерМеркурий;
		МенеджерЗаписиСоответствийТоваров.Номенклатура					= Ссылка;
		
		МенеджерЗаписиСоответствийТоваров.Единица						= ПолучитьОсновнуюЕдиницуИзмерения(Ссылка);
		
		Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
			МенеджерЗаписиСоответствийТоваров.ХарактеристикаНоменклатуры 	= ХарактеристикаНоменклатуры;
		КонецЕсли;
		//МенеджерЗаписиСоответствийТоваров.Прочитать();
		//МенеджерЗаписиСоответствийТоваров.Удалить();
		
	
		МенеджерЗаписиСоответствийТоваров.КодТовараПартнера				= СокрЛП(GUID);
		МенеджерЗаписиСоответствийТоваров.НаименованиеПартнера			= СокрЛП(НаименованиеМеркурий);
		
		Если ЗначениеЗаполнено(Коэффициент) Тогда
			МенеджерЗаписиСоответствийТоваров.КоэффициентEDIВ1С			= Число(Коэффициент);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Производим) Тогда
			МенеджерЗаписиСоответствийТоваров.ПроизводимТовар			= Производим=Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МеркурийЕдиницаGUID) Тогда
			МенеджерЗаписиСоответствийТоваров.МеркурийЕдиницаGUID =  МеркурийЕдиницаGUID;
		КонецЕсли;
		
		МенеджерЗаписиСоответствийТоваров.Записать();
		

КонецПроцедуры

Функция ВсеСтрокиТоваровАннулированы(Товары) Экспорт
	
	Для каждого СтрокаТоваров Из Товары Цикл
	
		Если СтрокаТоваров.Аннулирован<> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ВсеСтрокиСообщенияАннулированы()

Функция КопироватьОбъектXDTO(лФабрика,ОбъектXDTO)
	//НЕ УМЕЕТ РАБОТАТЬ СО СПИСКАМИ XDTO!!!
	
	ТипОбъекта = ОбъектXDTO.Тип();
	КопияОбъекта = лФабрика.Создать(ТипОбъекта.URIПространстваИмен,ТипОбъекта.Имя); 
	
	Для Каждого ДочернийЭлементXDTO Из ОбъектXDTO.Свойства() Цикл
		Если ТипЗНЧ(ДочернийЭлементXDTO) = Тип("ОбъектXDTO") Тогда
			СвойствоТожеОбъектXDTO = ОбъектXDTO.Получить(ДочернийЭлементXDTO.Имя);
			НовыйXDTOЗначениеСвойства = КопироватьОбъектXDTO(лФабрика,ОбъектXDTO.Получить(ДочернийЭлементXDTO.Имя));
			КопияОбъекта[ДочернийЭлементXDTO.Имя] = НовыйXDTOЗначениеСвойства;
		ИначеЕсли ТипЗНЧ(ДочернийЭлементXDTO) = Тип("СписокXDTO") Тогда
			//не умеем
		Иначе//Если ЗначениеЗаполнено(ОбъектXDTO.Получить(ДочернийЭлементXDTO.Имя) тогда
			xmlЗаполнитьЗначениеXDTO(КопияОбъекта,ДочернийЭлементXDTO.Имя,ОбъектXDTO.Получить(ДочернийЭлементXDTO.Имя))
		КонецЕсли;
	КонецЦикла;
	
    Возврат КопияОбъекта;
	
КонецФункции


Функция ЗаполнитьДанныеДляИнвентаризации(ДатаЗапросаОстатков1С,ТабИнвентаризация,Организация,ОрганизацияGUID,Площадка,ПлощадкаGUID) Экспорт 

	ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьИнвентаризацию",,Новый Структура("ДатаЗапросаОстатков1С,ТабИнвентаризация,Организация,ОрганизацияGUID,Площадка,ПлощадкаGUID",ДатаЗапросаОстатков1С,ТабИнвентаризация,Организация,ОрганизацияGUID,Площадка,ПлощадкаGUID));

КонецФункции // ЗаполнитьДанныеДляИнвентаризации()

Функция ОтразитьРезультатыИнвентаризации(Инвентаризация,GUIDПлощадки,GUIDХозСуб,ДатаИнвентаризации) Экспорт
	
	ВерсияAPI = "14";
	
	МассивapplicationId = Новый Массив;
	//ЗапроситьРезультатОбработкиЗаявкиМеркурий(applicationId,ПараметрыПодключения,ДождатьсяРезультата)
	
	КвантИнвентаризации = локПолучитьКонстантуEDI("М_КвантИнвентаризации");
	Если ТипЗнч(КвантИнвентаризации)<>Тип("Число") ИЛИ Не ЗначениеЗаполнено(КвантИнвентаризации) Тогда КвантИнвентаризации = 10; КонецЕсли;
	
	ВыделенныеСтрокиКОбработкеИнвентаризации = Инвентаризация.НайтиСтроки(Новый Структура("Пометка",Истина));
	
	ОсновнойМодуль.Состояние_КонтурEDI("Публикую инвентаризацию");
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(GUIDХозСуб,GUIDПлощадки,ВерсияAPI,Истина);
	Если НЕ ПараметрыПодключения.ЕстьДоступ Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ПараметрыТранзакции = Новый Структура();
	
	ПараметрыТранзакции.Вставить("localTransactionId",	"IncomingRobot");
	ПараметрыТранзакции.Вставить("initiator", 			ПараметрыПодключения.user);
	
	businessEntity =  ПолучитьОбъектXDTOМеркурий("Цербер",  "BusinessEntity");
	xmlЗаполнитьЗначениеXDTO(businessEntity,"GUID",GUIDХозСуб);
	ПараметрыТранзакции.Вставить("businessEntity",		businessEntity);
	
	enterprise = ПолучитьОбъектXDTOМеркурий("Цербер",  "Enterprise");
	xmlЗаполнитьЗначениеXDTO(enterprise,"GUID",GUIDПлощадки);
	ПараметрыТранзакции.Вставить("enterprise", 			enterprise);	
	
	//inventoryDate = ПолучитьМеркурийComplexDate(ДатаИнвентаризации);     ПолучитьОбъектXDTOМеркурий("ВетДокумент", "StockEntry")
	ПараметрыТранзакции.Вставить("inventoryDate", 		ОсновнойМодуль.Дата1С_в_ДатаXML(ДатаИнвентаризации));
	
	//responsible это копия initiator
	ПараметрыТранзакции.Вставить("responsible", 	КопироватьОбъектXDTO(КорневаяФабрика(ВерсияAPI),ПараметрыПодключения.user));
	
	ОбщееКоличествоСтрок = ВыделенныеСтрокиКОбработкеИнвентаризации.Количество();
	КоличествоИнвентаризаций = Окр((ОбщееКоличествоСтрок/КвантИнвентаризации)+0.499999,0,РежимОкругления.Окр15как20);
	
	Для Смещение=0 По КоличествоИнвентаризаций-1 Цикл
		
		//сами различия
		stockDiscrepancy = ПолучитьОбъектXDTOМеркурий("ВетДокумент",  "StockDiscrepancy");
		stockDiscrepancy.resultingList = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "StockEntryList");
		
		ОтразилиСтрок = 0;
		
		Для й = 1 По КвантИнвентаризации Цикл
			Если (Смещение*КвантИнвентаризации)+й > ОбщееКоличествоСтрок Тогда 
				Прервать;
			КонецЕсли;
			
			СтрокаИнвентаризации = ВыделенныеСтрокиКОбработкеИнвентаризации[(Смещение*КвантИнвентаризации)+й-1];	
			
			Если СтрокаИнвентаризации.Пометка = Ложь Тогда Продолжить; КонецЕсли; //перестраховка
			
			Если Значениезаполнено(СтрокаИнвентаризации.UUID_Партии) Тогда 
				МасиивПодходящихСтрок = ОсновнойМодуль.EDI_РазложитьСтрокуВМассивСлов(СтрокаИнвентаризации.UUID_Партии,",");
				
				
				Если МасиивПодходящихСтрок.Количество() = 1 Тогда
					//можем как уменьшить так и увеличить количество
					StockEntry	= ПолучитьОбъектXDTOМеркурий("ВетДокумент", "StockEntry");
					xmlЗаполнитьЗначениеXDTO(stockEntry,"uuid",МасиивПодходящихСтрок[0]);
					ЗаписатьСтрокуИнвентаризацииМеркурий_XDTO(StockEntry,СтрокаИнвентаризации,GUIDХозСуб); // эта запись либо расходует либо приходует товар
					ОтразилиСтрок = ОтразилиСтрок +1;
					stockDiscrepancy.resultingList.stockEntry.Добавить(StockEntry);
					
				Иначе
					//мы схлопнули позиции в 1 строку и потеряли разбивку по количеству.
					//такие записи мы можем только списать
					Если СтрокаИнвентаризации.Количество = 0 Тогда 
						Для Каждого ЭлементМассиваUUID_Партии Из МасиивПодходящихСтрок Цикл
							StockEntry	= ПолучитьОбъектXDTOМеркурий("ВетДокумент", "StockEntry");
							xmlЗаполнитьЗначениеXDTO(stockEntry,"uuid",ЭлементМассиваUUID_Партии);
							ЗаписатьСтрокуИнвентаризацииМеркурий_XDTO(StockEntry,СтрокаИнвентаризации,GUIDХозСуб); // эта запись либо расходует либо приходует товар
							ОтразилиСтрок = ОтразилиСтрок +1;
							stockDiscrepancy.resultingList.stockEntry.Добавить(StockEntry);
							
						КонецЦикла;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				//эта запись гарантированно приходует товар
				StockEntry	= ПолучитьОбъектXDTOМеркурий("ВетДокумент", "StockEntry");
				ЗаписатьСтрокуИнвентаризацииМеркурий_XDTO(StockEntry,СтрокаИнвентаризации,GUIDХозСуб);
				ОтразилиСтрок = ОтразилиСтрок +1;
				stockDiscrepancy.resultingList.stockEntry.Добавить(StockEntry);
			КонецЕсли;
			
		КонецЦикла;
		ВсегоСтрок = stockDiscrepancy.resultingList.stockEntry.Количество();
		
		stockDiscrepancy.resultingList.count = ВсегоСтрок;
		stockDiscrepancy.resultingList.total = ВсегоСтрок;
		stockDiscrepancy.resultingList.offset = 0;  //рано или поздно наткнемся на 1000+строк и придется разбивать
		
		
		stockDiscrepancys = Новый СписокЗначений();
		stockDiscrepancys.Добавить(stockDiscrepancy);
		МассивСписковXDTO = Новый Массив();
		МассивСписковXDTO.Добавить("stockDiscrepancy");
		МассивСписковXDTO.Добавить("discrepancyReport");
		
		ПараметрыТранзакции.Вставить("stockDiscrepancy", 	stockDiscrepancys);     //это список XDTO в терминах аппликэйшена 
		
		discrepancyReport = ПолучитьОбъектXDTOМеркурий("ВетДокумент", "DiscrepancyReport");
		discrepancyReport.description = "Тестовая Инвентаризация";
		discrepancyReports = Новый СписокЗначений();
		discrepancyReports.Добавить(discrepancyReport);
		ПараметрыТранзакции.Вставить("discrepancyReport", 	discrepancyReports);	//это список XDTO в терминах аппликэйшена 
		
		
		
		ПараметрыТранзакции.Вставить("Наименование", 		"ResolveDiscrepancyRequest");
		
		ПараметрыТранзакции.Вставить("МассивСписков", 		МассивСписковXDTO);	
		
		applicationId = "";
		ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключения, "ResolveDiscrepancyRequest",Ложь,applicationId);
		МассивapplicationId.добавить(applicationId);
		
		Сообщить("Отправлена Инвентаризация на "+ВсегоСтрок+" строк, на её обработку серверу потребуется какое-то время");
		
	КонецЦикла;
	
	Сообщить("Ожидаю пока Меркурий обработает опубликованную инвентаризацию");
	Для Каждого applicationId Из МассивapplicationId Цикл
		Пока Истина Цикл
		MercAppDO = ЗапроситьРезультатОбработкиЗаявкиМеркурий(applicationId,ПараметрыПодключения,Истина);
			
			Если MercAppDO.Status = "REJECTED" Тогда
				//Пока что хотя быСообщим об ошибках
				Для Каждого Ошибка Из MercAppDO.errors.error Цикл
					Сообщить("Заявка "+applicationId+" отклонена: "+Ошибка.code+Ошибка.__content)
				КонецЦикла;
				Прервать;
			ИначеЕсли MercAppDO.Status = "COMPLETED" Тогда
				Сообщить(""+applicationId+" Успешно выполнен");
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	
	Возврат Истина;
	
КонецФункции // ОтразитьРезультатыИнвентаризации()

//Форма настроек - общие процедуры для ОФ и УФ

Процедура УстановитьВидимостьДоступностьКолонокТЧ(Элементы, ИмяТЧ, ВидимостьВсех, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЭтоУФ = ЭтоУФ(Элементы);
	
	НастройкиМодуля = ОсновнойМодуль.НастройкиМодуля;
	
	Если ДополнительныеПараметры<>Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("Сообщение") Тогда
			Сообщение = ДополнительныеПараметры.Сообщение;
			ЭтоMPRD = (Сообщение.ТипСообщения = "M_PRD");
			ЭтоMDES = (Сообщение.ТипСообщения = "M_DES");
			ЭтоMMOV = (Сообщение.ТипСообщения = "M_MOV");
			ЭтоMINC = (Сообщение.ТипСообщения = "M_INC");
			ЭтоMREC = (Сообщение.ТипСообщения = "M_REC");
		КонецЕсли;
	КонецЕсли;
		
	текМакет = ПолучитьМакет("ВидимостьДоступностьКолонокТабличныхЧастей").ПолучитьОбласть(ИмяТЧ);
	Для Сч = 1 по текМакет.ВысотаТаблицы Цикл
		//ИмяТЧ = текМакет.Область(Сч, 1).Текст;
		ИмяКолонки = текМакет.Область(Сч, 1).Текст;
		Если ИмяТЧ = "" или ИмяКолонки = "" Тогда
			Прервать;
		КонецЕсли;
		
		текУсловиеВидимости = Истина;

		текУсловиеДоступности = Истина;
		Выполнить("текУсловиеВидимости = ВидимостьВсех или " + текМакет.Область(Сч, 2).Текст);
		Выполнить("текУсловиеДоступности = " + текМакет.Область(Сч, 3).Текст);
		
		КолонкаТаблицы = Неопределено;
		Если ЭтоУФ Тогда
			КолонкаТаблицы = Элементы.Найти(ИмяТЧ+ИмяКолонки);
		Иначе
			ТекТаблица = Элементы.Найти(ИмяТЧ);
			Если ТекТаблица<>Неопределено Тогда
				КолонкаТаблицы = ТекТаблица.Колонки.Найти(ИмяКолонки);
			КонецЕсли;
		КонецЕсли;
		
		Если КолонкаТаблицы<>Неопределено Тогда 
			КолонкаТаблицы.Видимость = текУсловиеВидимости;
			КолонкаТаблицы.ТолькоПросмотр = НЕ текУсловиеДоступности;
		Иначе
			Сообщить("Не найдена колонка "+ ?(ЭтоУФ, ИмяТЧ, "") + ИмяКолонки + ". Проверьте таблицу видимости/доступности");
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура НастройкиЗаписатьЕдиницыИзмерения(ЕдиницыИзмерения) Экспорт
	
	Для Каждого СтрокаЕИ Из ЕдиницыИзмерения Цикл
		
		Если Значениезаполнено(СтрокаЕИ.Соответствие) Тогда
			
			Если НЕ Значениезаполнено(СтрокаЕИ.Ссылка) Тогда
				НовыйЭлемент = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
				НовыйЭлемент.Наименование = СтрокаЕИ.Наименование;
				НовыйЭлемент.ИмяСправочника = "Меркурий_КлассификаторЕдиницИзмерения";
				НовыйЭлемент.Записать();
				СтрокаЕИ.Ссылка = НовыйЭлемент.Ссылка;
			КонецЕсли;
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИ_GUID",СтрокаЕИ.GUID);
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИ_UUID",СтрокаЕИ.UUID);
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИ_Наименование",СтрокаЕИ.Наименование);
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИ_Соответствие",СтрокаЕИ.Соответствие);
			
			
		Иначе
			Если НЕ Значениезаполнено(СтрокаЕИ.Ссылка) Тогда
				//и не было 
			Иначе
			ОсновнойМодуль.УдалитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИ_Соответствие");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура НастройкиЗаписатьЕдиницыИзмеренияУпаковок(ЕдиницыИзмеренияУпаковок) Экспорт
	
	Для Каждого СтрокаЕИ Из ЕдиницыИзмеренияУпаковок Цикл
		
		Если Значениезаполнено(СтрокаЕИ.Соответствие) Тогда
			
			Если НЕ Значениезаполнено(СтрокаЕИ.Ссылка) Тогда
				НовыйЭлемент = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
				НовыйЭлемент.Наименование = СтрокаЕИ.Наименование;
				НовыйЭлемент.ИмяСправочника = "Меркурий_КлассификаторЕдиницИзмеренияУпаковок";
				НовыйЭлемент.Записать();
				СтрокаЕИ.Ссылка = НовыйЭлемент.Ссылка;
			КонецЕсли;
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИУп_UUID",СтрокаЕИ.UUID);
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИУп_Наименование",СтрокаЕИ.Наименование);
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИУп_Соответствие",СтрокаЕИ.Соответствие);
			
			
		Иначе
			Если НЕ Значениезаполнено(СтрокаЕИ.Ссылка) Тогда
				//и не было 
			Иначе
			ОсновнойМодуль.УдалитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИУп_Соответствие");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;


КонецПроцедуры

Процедура НастройкиХСЗаполнитьАвтоматически(ХозяйствующиеСубъекты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.Контрагент
	|ПОМЕСТИТЬ ВТ_ДокументыПриходРасход
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Дата МЕЖДУ &ДатаС И &ДатаПо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Контрагент
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаС И &ДатаПо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДокументыПриходРасход.Контрагент
	|ПОМЕСТИТЬ ВТ_ДокументыПриходРасходУникальные
	|ИЗ
	|	ВТ_ДокументыПриходРасход КАК ВТ_ДокументыПриходРасход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение
	|ПОМЕСТИТЬ ВТ_НастроенныеХС
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""Объект""
	|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = ""МеркурийХС""
	|	И НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ПометкаУдаления//МУФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыПриходРасходУникальные.Контрагент
	|ИЗ
	|	ВТ_ДокументыПриходРасходУникальные КАК ВТ_ДокументыПриходРасходУникальные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастроенныеХС КАК ВТ_НастроенныеХС
	|		ПО ВТ_ДокументыПриходРасходУникальные.Контрагент = ВТ_НастроенныеХС.Значение
	|ГДЕ
	|	ВТ_НастроенныеХС.Значение ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ДатаС", ДобавитьМесяц(ТекущаяДата(),-3));
	Запрос.УстановитьПараметр("ДатаПо",ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВсегоКонтрагентовДляПроверки = Выборка.Количество();
	й=0;
	Пока Выборка.Следующий() Цикл
		й=й+1;
	    //Состояние(""+й+"/"+ВсегоКонтрагентовДляПроверки+" Пробую автоматически сопоставить ... "+Выборка.Контрагент);//МУФ
		Если ЗначениеЗаполнено(Выборка.Контрагент.ИНН) Тогда
			
			НайденоПоИНН = ПолучитьСписокХСПоИНН(Выборка.Контрагент.ИНН);
			Если НайденоПоИНН<>Неопределено И
				НайденоПоИНН.Количество() = 1 Тогда
				
				НоваяСтрока = ХозяйствующиеСубъекты.Добавить();
				НоваяСтрока.СвязанныйСправочник = Выборка.Контрагент;
				НоваяСтрока.Наименование 		= НайденоПоИНН[0].fullName;
				НоваяСтрока.GUID 				= НайденоПоИНН[0].guid;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастройкиПрисвоитьКоэффициент(НовыйКоэффициент, ВыделенныеСтроки, НоваяЕдиницаМеркурийGUID=Неопределено) Экспорт
	
	МассивНоменклатуры = Новый Массив;
	
	Для каждого ВыделеннаяСтрокаНоменклатуры Из ВыделенныеСтроки Цикл
		Если ВыделеннаяСтрокаНоменклатуры.ЭтоГруппа = Ложь Тогда
			МассивНоменклатуры.Добавить(ВыделеннаяСтрокаНоменклатуры.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНоменклатуры.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 	"ВЫБРАТЬ
		               	|	КонтурEDI_СоответствияТоваров.Номенклатура,
		               	|	МАКСИМУМ(ЕСТЬNULL(КонтурEDI_СоответствияТоваров.КодТовараПартнера, """""""")) КАК GUID,
		               	|	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.НаименованиеПартнера, """""""") КАК НаименованиеМеркурий,
		               	|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентУмножения,
		               	|	КонтурEDI_СоответствияТоваров.МеркурийЕдиницаGUID,
		               	|	КонтурEDI_СоответствияТоваров.ПроизводимТовар,
		               	|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры
		               	|ИЗ
		               	|	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
		               	|ГДЕ
		               	|	КонтурEDI_СоответствияТоваров.Номенклатура В(&Номенклатура)
		               	|	И КонтурEDI_СоответствияТоваров.КодТовараПартнера <> """"
		               	|	И КонтурEDI_СоответствияТоваров.КодТовараПартнера <> &НулевойGUID
		               	|	И КонтурEDI_СоответствияТоваров.Партнер = &ПартнерМеркурий
		               	|
		               	|СГРУППИРОВАТЬ ПО
		               	|	КонтурEDI_СоответствияТоваров.Номенклатура,
		               	|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С,
		               	|	КонтурEDI_СоответствияТоваров.МеркурийЕдиницаGUID,
		               	|	КонтурEDI_СоответствияТоваров.ПроизводимТовар,
		               	|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры,
		               	|	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.НаименованиеПартнера, """""""")";
		
		Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
		Запрос.УстановитьПараметр("НулевойGUID", НулевойGUID);
		Запрос.УстановитьПараметр("ПартнерМеркурий", ПартнерМеркурий());
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
				ПрисвоитьСоответствиеНоменклатуры(	Выборка.Номенклатура,
													Выборка.GUID,
													Выборка.НаименованиеМеркурий,
													ПартнерМеркурий(),
													НовыйКоэффициент,
													Выборка.ПроизводимТовар,
													?(ЗначениеЗаполнено(НоваяЕдиницаМеркурийGUID),НоваяЕдиницаМеркурийGUID,Выборка.МеркурийЕдиницаGUID),
													Выборка.ХарактеристикаНоменклатуры);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиИзменитьПризнакПроизводим(Ссылка,НовыйФлажок = Неопределено) Экспорт
	
		Если Ссылка.ЭтоГруппа = Ложь Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 	"ВЫБРАТЬ
			               	|	МАКСИМУМ(ЕСТЬNULL(КонтурEDI_СоответствияТоваров.КодТовараПартнера, """")) КАК GUID,
			               	|	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.НаименованиеПартнера, """") КАК НаименованиеМеркурий,
			               	|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентУмножения,
			               	|	КонтурEDI_СоответствияТоваров.ПроизводимТовар,
			               	|	КонтурEDI_СоответствияТоваров.МеркурийЕдиницаGUID,
			               	|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры
			               	|ИЗ
			               	|	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
			               	|ГДЕ
			               	|	КонтурEDI_СоответствияТоваров.Номенклатура = &Номенклатура
			               	|	И КонтурEDI_СоответствияТоваров.КодТовараПартнера <> """"
			               	|	И КонтурEDI_СоответствияТоваров.КодТовараПартнера <> &НулевойGUID
			               	|	И КонтурEDI_СоответствияТоваров.Партнер = &ПартнерМеркурий
			               	|
			               	|СГРУППИРОВАТЬ ПО
			               	|	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.НаименованиеПартнера, """"),
			               	|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С,
			               	|	КонтурEDI_СоответствияТоваров.ПроизводимТовар,
			               	|	КонтурEDI_СоответствияТоваров.МеркурийЕдиницаGUID,
			               	|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры";
			
			Запрос.УстановитьПараметр("Номенклатура", Ссылка);
			Запрос.УстановитьПараметр("НулевойGUID", НулевойGUID);
			Запрос.УстановитьПараметр("ПартнерМеркурий", ПартнерМеркурий());
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				
				Если НовыйФлажок <> Неопределено Тогда
					ЧтоУстановить = НовыйФлажок;
				Иначе
					ЧтоУстановить = Выборка.ПроизводимТовар<>Истина;
				КонецЕсли;
				ПрисвоитьСоответствиеНоменклатуры(Ссылка,Выборка.GUID,Выборка.НаименованиеМеркурий,ПартнерМеркурий(),Выборка.КоэффициентУмножения, ЧтоУстановить, Выборка.МеркурийЕдиницаGUID, Выборка.ХарактеристикаНоменклатуры);
				
			КонецЕсли;
		КонецЕсли;

КонецПроцедуры

Процедура НастройкиЗаписатьУчетныеЗаписи(УчетныеЗаписи) Экспорт
	НачатьТранзакцию();
	
	ТаблицаТекХС = ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийУчетнаяЗапись", Неопределено);
	ТаблицаТекХС.колонки.Добавить("Наименование");
	ТаблицаТекХС.колонки.Добавить("IssuerId");
	ТаблицаТекХС.колонки.Добавить("ЕстьВСохраняемойТаблице");
	
	Для Каждого Стр Из ТаблицаТекХС Цикл
		Стр.Наименование = СокрЛП(Стр.Ссылка.Наименование);
		Стр.IssuerId = ПолучитьДопРеквизитЭлементаДопСправочника(Стр.Ссылка,"IssuerId");
	КонецЦикла;
	
	Для Каждого СтрокаУЗ Из УчетныеЗаписи Цикл
		НайденныйСуществующийЭлемент = ТаблицаТекХС.Найти(СтрокаУЗ.IssuerId,"IssuerId");
		
		Если ЗначениеЗаполнено(НайденныйСуществующийЭлемент) Тогда
			НайденныйСуществующийЭлемент.ЕстьВСохраняемойТаблице = Истина;
			ДопСправочникСсылка = НайденныйСуществующийЭлемент.Ссылка;
			НовыйЭлементСправочника = ДопСправочникСсылка.ПолучитьОбъект();
			НовыйЭлементСправочника.ИмяСправочника = "МеркурийУчетнаяЗапись";
		Иначе
			НовыйЭлементСправочника = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			НовыйЭлементСправочника.ИмяСправочника = "МеркурийУчетнаяЗапись";
			НовыйЭлементСправочника.Наименование = СтрокаУЗ.ЛогинAPI;
		КонецЕсли;
		
		ДопРеквизиты = НовыйЭлементСправочника.ДополнительныеРеквизиты; 
		
		Для Каждого Колонка Из УчетныеЗаписи.Колонки Цикл
			
			НайденныйДопРеквизит = ДопРеквизиты.Найти(Колонка.Имя,"ИмяРеквизита");
			Если НайденныйДопРеквизит=Неопределено Тогда
				НайденныйДопРеквизит = ДопРеквизиты.Добавить();
				НайденныйДопРеквизит.ИмяРеквизита = Колонка.Имя;
			КонецЕсли;
			ЗначениеВКолонке = "";
			Выполнить("ЗначениеВКолонке = СтрокаУЗ."+Колонка.Имя); 
			НайденныйДопРеквизит.Значение = СокрЛП(ЗначениеВКолонке);
			
		КонецЦикла;
		НовыйЭлементСправочника.Записать();
	КонецЦикла;
	
	Для Каждого Стр Из ТаблицаТекХС Цикл
		Если НЕ Стр.ЕстьВСохраняемойТаблице = Истина Тогда 
			ОсновнойМодуль.УдалитьЭлементСправочника("МеркурийУчетнаяЗапись",Стр.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры


Процедура НастройкиИнвентаризацияПрочитатьСведенияИзМеркурия(Инвентаризация, Организация, ОрганизацияGUID, Площадка, ПлощадкаGUID) Экспорт
	
	ОстаткиПоПлощадке = ПолучитьЗаписиСкладскогоЖурнала(ПлощадкаGUID,,ОрганизацияGUID).Скопировать();
	
	ПересоздатьКолонкуТаблицы(ОстаткиПоПлощадке,"НайденаВ1С");
	
	//обойдем данные 1С и найдем по ним соотв. Меркурия
	Для Каждого СтрокаПоБазе Из Инвентаризация Цикл   //если нет productItemUUID - то будем искать по пустому productItemUUID 
		НайденоВМеркурии = ОстаткиПоПлощадке.НайтиСтроки(Новый Структура("productItemUUID,ДатаВыпуска,ГоденДо,unitUUID,subProductGuid,НайденаВ1С,ВладелецGUID",СокрЛП(СтрокаПоБазе.productItemUUID),СтрокаПоБазе.ДатаПроизводства,СтрокаПоБазе.СрокГодности,СтрокаПоБазе.unitUUID,СтрокаПоБазе.GUID,Ложь,СтрокаПоБазе.ОрганизацияGUID));
		Если НайденоВМеркурии.Количество()>0 Тогда
			КоличествоНакоплено = 0;
			СписокGUIDПартий = "";
			СписокUUIDПартий = "";
			Для Каждого НайденнаяВМеркурии Из НайденоВМеркурии Цикл
				НайденнаяВМеркурии.НайденаВ1С = Истина;
				КоличествоНакоплено = КоличествоНакоплено+НайденнаяВМеркурии.Остаток;
				СписокGUIDПартий = ?(СписокGUIDПартий = "",НайденнаяВМеркурии.GUID_Партии,СписокGUIDПартий+","+НайденнаяВМеркурии.GUID_Партии);
				СписокUUIDПартий = ?(СписокUUIDПартий = "",НайденнаяВМеркурии.UUID_Партии,СписокGUIDПартий+","+НайденнаяВМеркурии.UUID_Партии);
			КонецЦикла;
			СтрокаПоБазе.КоличествоТекМеркурий = КоличествоНакоплено;
			СтрокаПоБазе.GUID_Партии = СписокGUIDПартий;
			СтрокаПоБазе.UUID_Партии = СписокUUIDПартий;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КэшСоответствий = Новый ТаблицаЗначений;
	КэшСоответствий.Колонки.Добавить("GUIDUUID",Новый ОписаниеТипов("Строка", ,
												Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
	КэшСоответствий.Колонки.Добавить("Объект1С");
	КэшСоответствий.Индексы.Добавить("GUIDUUID");
	
	Для каждого СтрокаИзМеркурия Из ОстаткиПоПлощадке Цикл
		
		Если СтрокаИзМеркурия.НайденаВ1С = Ложь
			И ОрганизацияGUID = СтрокаИзМеркурия.ВладелецGUID Тогда
			
			НоваяСтрокаЕстьВМеркурииНетВ1С = Инвентаризация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЕстьВМеркурииНетВ1С,СтрокаИзМеркурия);
			НоваяСтрокаЕстьВМеркурииНетВ1С.GUID = СтрокаИзМеркурия.subProductGuid; 
			НоваяСтрокаЕстьВМеркурииНетВ1С.ДатаПроизводства = СтрокаИзМеркурия.ДатаВыпуска; 
			НоваяСтрокаЕстьВМеркурииНетВ1С.ДатаПроизводства2 = СтрокаИзМеркурия.ДатаВыпуска2; 
			НоваяСтрокаЕстьВМеркурииНетВ1С.СрокГодности = СтрокаИзМеркурия.ГоденДо; 
			НоваяСтрокаЕстьВМеркурииНетВ1С.СрокГодности2 = СтрокаИзМеркурия.ГоденДо2; 
			НоваяСтрокаЕстьВМеркурииНетВ1С.КоличествоТекМеркурий = СтрокаИзМеркурия.Остаток;
			НоваяСтрокаЕстьВМеркурииНетВ1С.организация = Организация;
			НоваяСтрокаЕстьВМеркурииНетВ1С.организацияGUID = ОрганизацияGUID;
			НоваяСтрокаЕстьВМеркурииНетВ1С.Площадка = Площадка;
			НоваяСтрокаЕстьВМеркурииНетВ1С.ПлощадкаGUID = ПлощадкаGUID;
			НоваяСтрокаЕстьВМеркурииНетВ1С.Наименование = СтрокаИзМеркурия.Наименование;
			НоваяСтрокаЕстьВМеркурииНетВ1С.ОрганизацияGUID = СтрокаИзМеркурия.ВладелецGUID;
			НоваяСтрокаЕстьВМеркурииНетВ1С.Организация = Организация; //из формы
			
			//конвертируемые в 1С   //Переделать одним запросом после заполнения
			НоваяСтрокаЕстьВМеркурииНетВ1С.ПлощадкаПроизводительGUID = СтрокаИзМеркурия.ProducerGUID;
			НашлиВКэше = КэшСоответствий.Найти(СтрокаИзМеркурия.ProducerGUID,"GUIDUUID");
			Если НашлиВКэше = Неопределено Тогда 
				НоваяСтрокаЕстьВМеркурииНетВ1С.ПлощадкаПроизводитель = КонвертироватьЗначениеМеркурийв1C(СтрокаИзМеркурия.ProducerGUID,,"МеркурийПлощадка");
				НоваяСтрокаКэша = КэшСоответствий.Добавить();
				НоваяСтрокаКэша.GUIDUUID = СтрокаИзМеркурия.ProducerGUID;
				НоваяСтрокаКэша.Объект1С = НоваяСтрокаЕстьВМеркурииНетВ1С.ПлощадкаПроизводитель;
			Иначе
				НоваяСтрокаЕстьВМеркурииНетВ1С.ПлощадкаПроизводитель = НашлиВКэше.Объект1С;
			КонецЕсли;
			
			НоваяСтрокаЕстьВМеркурииНетВ1С.СтранаUUID = СтрокаИзМеркурия.СтранаUUID;
			НашлиВКэше = КэшСоответствий.Найти(СтрокаИзМеркурия.СтранаUUID,"GUIDUUID");
			Если НашлиВКэше = Неопределено Тогда 
				НоваяСтрокаЕстьВМеркурииНетВ1С.Страна = КонвертироватьЗначениеМеркурийв1C(СтрокаИзМеркурия.СтранаUUID,,"МеркурийСтраныМира");
				НоваяСтрокаКэша = КэшСоответствий.Добавить();
				НоваяСтрокаКэша.GUIDUUID = СтрокаИзМеркурия.СтранаUUID;
				НоваяСтрокаКэша.Объект1С = НоваяСтрокаЕстьВМеркурииНетВ1С.Страна;
			Иначе
				НоваяСтрокаЕстьВМеркурииНетВ1С.Страна = НашлиВКэше.Объект1С;
			КонецЕсли;
						
		КонецЕсли;                               
	
	КонецЦикла;
	
	Для каждого Строка Из Инвентаризация Цикл
		Если Строка.Количество<>0 
			И Строка.Количество<>Строка.КоличествоТекМеркурий Тогда
			Строка.Пометка = Истина;
		Иначе
			Строка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция НастройкиПродукцияПроизводителяОбновить(ТаблицаПродукцияПроизводителя, ПлощадкаПроизводитель) Экспорт
	
	Если Не ЗначениеЗаполнено(ПлощадкаПроизводитель) Тогда
		Возврат "Выберите площадку";
	КонецЕсли;
	
	ТаблицаПродукцияПроизводителя.Очистить();
	
	СтрокаСGUID = ПлощадкаПроизводитель.ДополнительныеРеквизиты.Найти("GUID","ИмяРеквизита");
	Если СтрокаСGUID = Неопределено Тогда
		Возврат "Похоже что возникли проблемы с определением GUID выбранной вами площадки"; 
	КонецЕсли;
	GUIDПлощадки = СтрокаСGUID.Значение;
	
	Если ЗначениеЗаполнено(GUIDПлощадки) Тогда
		СохраненнаяПродукция = ПолучитьКаталогПродукцииПоПлощадке(GUIDПлощадки);
		
		Для Каждого СтрокаПродукции Из СохраненнаяПродукция Цикл
			НоваяСтрока = ТаблицаПродукцияПроизводителя.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПродукции);
			НоваяСтрока.Наименование = СокрЛП(НоваяСтрока.Наименование);
			НоваяСтрока.GOST = СокрЛП(НоваяСтрока.GOST);
			НоваяСтрока.Артикул = СокрЛП(НоваяСтрока.Артикул);
			НоваяСтрока.GTIN = СокрЛП(НоваяСтрока.GTIN);
		КонецЦикла;
		
	Иначе
		Возврат "Похоже что возникли проблемы с определением GUID выбранной вами площадки";
	КонецЕсли;

	Возврат "";
	
КонецФункции

Функция НастройкиПродукцияПроизводителяПрочитатьКаталогПлощадкиМеркурий(ТаблицаПродукцияПроизводителя, ПлощадкаПроизводитель) Экспорт
	
	Если Не ЗначениеЗаполнено(ПлощадкаПроизводитель) Тогда
		Возврат "Выберите площадку";
	КонецЕсли;

	СтрокаСGUID = ПлощадкаПроизводитель.ДополнительныеРеквизиты.Найти("GUID","ИмяРеквизита");
	Если СтрокаСGUID = Неопределено Тогда
		Возврат "Похоже что возникли проблемы с определением GUID выбранной вами площадки"; 
	КонецЕсли;
	
	ТаблицаИзМеркурия = ПрочитатьКаталогПлощадки(СтрокаСGUID.Значение);
	//
	//распихать данные по нашей таблице
	
	Для Каждого ЭлементМеркурия Из ТаблицаИзМеркурия Цикл
		НайденнаяСтрокаПродукции = ТаблицаПродукцияПроизводителя.Найти(ЭлементМеркурия.productItemUUID,"productItemUUID");
		Если НайденнаяСтрокаПродукции = Неопределено Тогда
			//не нашлось по UUID - возможно он сменился, поищем по GUID
			НайденнаяСтрокаПродукцииПоGUID = ТаблицаПродукцияПроизводителя.Найти(ЭлементМеркурия.productItemGUID,"productItemGUID");
			Если НайденнаяСтрокаПродукцииПоGUID = Неопределено Тогда //что-то не наше совсем
				НайденнаяСтрокаПродукции = ТаблицаПродукцияПроизводителя.Добавить();
				НайденнаяСтрокаПродукции.productItemUUID = ЭлементМеркурия.productItemUUID;
				НайденнаяСтрокаПродукции.productItemGUID = ЭлементМеркурия.productItemGUID;
			Иначе
				//надо отразить что у нас сменился UUID продукции
				ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(НайденнаяСтрокаПродукцииПоGUID.Номенклатура,"ПлощадкаUUID"+СтрокаСGUID.Значение,ЭлементМеркурия.productItemUUID);
                НайденнаяСтрокаПродукции = НайденнаяСтрокаПродукцииПоGUID;
				НайденнаяСтрокаПродукции.productItemUUID = ЭлементМеркурия.productItemUUID;
			КонецЕсли;
		КонецЕсли;
		НайденнаяСтрокаПродукции.productItemGUID = ЭлементМеркурия.productItemGUID;
		НайденнаяСтрокаПродукции.АртикулМеркурий = ЭлементМеркурия.Артикул;
		НайденнаяСтрокаПродукции.НаименованиеМеркурий = ЭлементМеркурия.Наименование;
		НайденнаяСтрокаПродукции.GTINМеркурий = ЭлементМеркурия.GTIN;
		НайденнаяСтрокаПродукции.subProductGuidМеркурий = ЭлементМеркурия.subProductGuid;
		НайденнаяСтрокаПродукции.GOSTМеркурий = ЭлементМеркурия.GOST;
		НайденнаяСтрокаПродукции.СоответствуетГОСТуМеркурий = ЭлементМеркурия.СоответствуетГОСТу;
	КонецЦикла;

	Возврат "";
	
КонецФункции

Процедура НастройкиСлужебнаяИзменитьАктуальностьВСД(МассивСвойств, ДатаАктуальности) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеРеквизиты.*
	               |ИЗ
	               |	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеРеквизиты.Свойство В (&мСвойств)";
	Запрос.УстановитьПараметр("мСвойств", МассивСвойств);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(Выборка.Объект, Выборка.Свойство, ДатаАктуальности);
	КонецЦикла;
	
КонецПроцедуры

Функция НастройкиСлужебнаяПолучитьТаблицуАктуальностиВСД() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Площадки.Ссылка КАК Площадка,
				   |	Площадки.Значение КАК GUID,
	               |	""АктуалВхВСД_"" + (ВЫРАЗИТЬ(Площадки.Значение КАК СТРОКА(36))) КАК АктуалВхВСД_GUID
	               |ПОМЕСТИТЬ врПлощадки
	               |ИЗ
	               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК Площадки
	               |ГДЕ
	               |	Площадки.Ссылка.ИмяСправочника = ""МеркурийПлощадка""
	               |	И Площадки.ИмяРеквизита = ""GUID""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	врПлощадки.Площадка,
				   |	врПлощадки.GUID,
	               |	КонтурEDI_ДополнительныеРеквизиты.Значение КАК ДатаАктуальности
	               |ИЗ
	               |	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врПлощадки КАК врПлощадки
	               |		ПО КонтурEDI_ДополнительныеРеквизиты.Свойство = врПлощадки.АктуалВхВСД_GUID";
	Возврат Запрос.Выполнить().Выгрузить();			   
				   
КонецФункции

Функция НастройкиСлужебнаяПолучитьТаблицуАктуальностиОСЖ() Экспорт
	
	ТабАктуальности = Новый ТаблицаЗначений;
	ТабАктуальности.Колонки.Добавить("GUID", Новый ОписаниеТипов("Строка", ,,,Новый КвалификаторыСтроки(36)));
	ТабАктуальности.Колонки.Добавить("ДатаАктуальности", Новый ОписаниеТипов("Дата"));
	Если ОперативныйСкладскойЖурнал<>Неопределено и ТипЗнч(ОперативныйСкладскойЖурнал) = Тип("Структура") Тогда
		Для Каждого Элемент из ОперативныйСкладскойЖурнал Цикл
			Если Лев(Элемент.Ключ, 12) = "Актуальность" Тогда
				стр = ТабАктуальности.Добавить();
				стр.GUID = Сред(Элемент.Ключ, 13);
				стр.ДатаАктуальности = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТабАктуальности;
				   
КонецФункции

Процедура НастройкиОтобразитьКолонкиИнвентаризации(ЭлементыФормы, Все) Экспорт
	
	УстановитьВидимостьДоступностьКолонокТЧ(ЭлементыФормы, "Инвентаризация", Все);
	
КонецПроцедуры

Процедура НастройкиОтобразитьКолонкиПродукцииПроизводителя(ЭлементыФормы, Все) Экспорт
	
	УстановитьВидимостьДоступностьКолонокТЧ(ЭлементыФормы, "ТаблицаПродукцияПроизводителя", Все);
	
КонецПроцедуры

// Форма приветствия (и ввода реквизитов для подключения) - общие процедуры для ОФ и УФ

Функция ПриветствиеЕстьНеобходимыеМетаданные(СтрокаМетаданных, НеИскатьВоВХ = Ложь) Экспорт//Приветствие.Удалить (ОРИГИНАЛ) ЕстьНеобходимыеМетаданные(СтрокаМетаданных, НеИскатьВоВХ = Ложь)
	
	ТекПолеМетаданных = Метаданные;
	
	МассивИмен = ПриветствиеEDI_РазложитьСтрокуВМассивСлов(СтрокаМетаданных,".");

	КоличествоИмен = МассивИмен.Количество();
	
	// КоличествоИмен = 2 для проверки наличия объекта, например 					Справочники.КонтурEDI_Сообщения
	// КоличествоИмен = 4 для проверки наличия реквизита\ресурса и т.д., например	Справочники.КонтурEDI_Сообщения.Реквизиты.Организация
	// КоличествоИмен = 6 для проверки наличия реквизита таб. части, например		Справочники.КонтурEDI_Сообщения.ТабличныеЧасти.ДополнительныеРеквизиты.Реквизиты.ЗначениеСтрока
	
	Если НЕ (КоличествоИмен = 2 ИЛИ КоличествоИмен = 4 ИЛИ КоличествоИмен = 6) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоПоисков = КоличествоИмен/2;
	Для н = 1 По КоличествоПоисков Цикл
		ТекПолеМетаданных = ТекПолеМетаданных[МассивИмен[н*2-2]].Найти(МассивИмен[н*2-1]);
		Если ТекПолеМетаданных = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции

Функция ПриветствиеEDI_РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов="") Экспорт //Приветствие.Удалить (ОРИГИНАЛ) EDI_РазложитьСтрокуВМассивСлов
	
	Слова = Новый Массив;
	
	Для Сч = 1 По СтрДлина(РазделителиСлов) Цикл
		Строка = СтрЗаменить(Строка,Сред(РазделителиСлов,Сч,1),Символы.ПС);
	КонецЦикла;
	
	Для Сч=1 По СтрЧислоСтрок(Строка) Цикл
		ТекСлово = СокрЛП(СтрПолучитьСтроку(Строка,Сч));
		Если ТекСлово<>"" Тогда
			Слова.Добавить(ТекСлово);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Слова;
	
КонецФункции

Функция ПолучитьСписокСвойствEDI(Свойства,Объект=Неопределено) Экспорт
	
	Если ТипЗнч(Свойства)=Тип("Строка") Тогда
		//преобразуем в Массив
		МассивСвойств = Новый Массив;
		СтрокаСвойств = СтрЗаменить(Свойства,",",Символы.ПС);
		Для Сч=1 По СтрЧислоСтрок(СтрокаСвойств) Цикл
			МассивСвойств.Добавить(СтрПолучитьСтроку(СтрокаСвойств,Сч));
		КонецЦикла;
		
	Иначе
		МассивСвойств = Свойства;
	КонецЕсли;
	
	Запрос = Новый запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеРеквизиты.Свойство КАК Свойство,
	|	КонтурEDI_ДополнительныеРеквизиты.Значение КАК Значение,
	|	КонтурEDI_ДополнительныеРеквизиты.ЗначениеСтрока
	|ИЗ
	|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеРеквизиты.Свойство В(&Свойства)
	|	И КонтурEDI_ДополнительныеРеквизиты.Объект = &Объект";
	
	
	Запрос.УстановитьПараметр("Свойства",	МассивСвойств);
	Запрос.УстановитьПараметр("Объект",		Объект);
	
	Выб = Запрос.Выполнить().Выбрать();
	
	//пусть будет массив
	Рез = Новый Структура;
	Для Каждого Эл из МассивСвойств Цикл
		Рез.Вставить(Эл);
	КонецЦикла;	
	
	Пока Выб.Следующий() Цикл
		
		Рез[Выб.Свойство] = Выб.Значение;
		
	КонецЦикла;	
	
	Возврат Рез;
	
КонецФункции	

Процедура ПриветствиеКонтрольМетаданных(ЭлементыФормы) Экспорт //Приветствие - вставить в ПриОткрытии() (ОРИГИНАЛ) //ЭлементыФормы (или Элементы для УФ):ПодключитьМодульEDI, Приветствие
	
	МодульEDIПодключен = Ложь;
	МодульEDIПодходящий = Ложь;
	МодульМеркурийПодключен = Ложь;
	ДлинаКодаТовара36Символов = Ложь;	
	МеркурийСкоропортящаясяДобавлен = Ложь;
	МеркурийРегистрКаталогПродукцииДобавлен = Ложь;
	
	Если ПриветствиеЕстьНеобходимыеМетаданные("РегистрыСведений.КонтурМеркурий_КаталогПродукции") 
		И Метаданные.РегистрыСведений.КонтурМеркурий_КаталогПродукции.Измерения.Найти("ПлощадкаGUID") <> Неопределено Тогда
		МеркурийРегистрКаталогПродукцииДобавлен = Истина;
	КонецЕсли;
		
	Если ПриветствиеЕстьНеобходимыеМетаданные("РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты") Тогда 
		МодульEDIПодключен = Истина;
		
		Если ПриветствиеЕстьНеобходимыеМетаданные("РегистрыСведений.КонтурEDI_СоответствияТоваров") Тогда 
			ДлинаРеквизитаКодТовара=35;
			Попытка
				Выполнить("ДлинаРеквизитаКодТовара=Метаданные.РегистрыСведений.КонтурEDI_СоответствияТоваров.Ресурсы.КодТовараПартнера.Тип.КвалификаторыСтроки.Длина");
				Если ДлинаРеквизитаКодТовара >=36 Тогда
					ДлинаКодаТовара36Символов = Истина;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Попытка
			МеркурийСкоропортящаясяДобавлен = Метаданные.РегистрыСведений.КонтурEDI_СоответствияТоваров.Реквизиты.МеркурийСкоропортящаяся.Тип = Новый ОписаниеТипов("Булево")
		Исключение
		КонецПопытки;
		
		НаборЗаписей = Неопределено;
		Выполнить("НаборЗаписей = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьНаборЗаписей()");
		НаборЗаписей.Отбор.Свойство.Установить("МодульМеркурийПуть");
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 1 Тогда
			МодульМеркурийПодключен = Истина;
		КонецЕсли;
		
		
		НаборЗаписей = Неопределено;
		Выполнить("НаборЗаписей = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьНаборЗаписей()");
		НаборЗаписей.Отбор.Свойство.Установить("НомерВерсии");
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 1 Тогда
			РешениеОСовместимости = СовместимСМодулемEDI(НаборЗаписей[0].Значение);
			Если РешениеОСовместимости.ПродолжитьЗапуск = Истина Тогда
				МодульEDIПодходящий = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если МодульМеркурийПодключен Тогда
		Если ДлинаКодаТовара36Символов И МеркурийСкоропортящаясяДобавлен И МеркурийРегистрКаталогПродукцииДобавлен Тогда
			ЭлементыФормы.ПодключитьМодульEDI.Видимость = Истина;
			ЭлементыФормы.Приветствие.Заголовок = "Вы уже подключили модуль Меркурий."+Символы.ПС+"Работайте с ВСД, запуская модуль EDI."+Символы.ПС+"Вы можете изменить параметры запуска модуля Меркурий с помощью команды  ""Изменить параметры подключения""";
			ЭлементыФормы.ПодключитьМодульEDI.Заголовок = "Изменить параметры подключения";
			ЭлементыФормы.ПодключитьМодульEDI.Видимость = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		ЭлементыФормы.Отключить.Видимость = Ложь;
	КонецЕсли;
	
	Если МодульEDIПодходящий Тогда
		
		Если ДлинаКодаТовара36Символов = Истина 
			И МеркурийСкоропортящаясяДобавлен = Истина 
			И  МеркурийРегистрКаталогПродукцииДобавлен = Истина Тогда
			
			ЭлементыФормы.ПодключитьМодульEDI.Видимость = Истина;
			СтандартноеПриветствие = "Модуль ""Меркурий"" не предназначен для интерактивного запуска. 
										|Работа предусмотрена только режиме ""подключения"" к модулю 
										|Контур.EDI.";
			ЭлементыФормы.Приветствие.Заголовок = СтандартноеПриветствие +Символы.ПС+ "Ваш Модуль EDI подходит для работы, осталось только подключить Меркурий к EDI.";
			
		ИначеЕсли ДлинаКодаТовара36Символов = Ложь 
			ИЛИ МеркурийСкоропортящаясяДобавлен = Ложь 
			ИЛИ МеркурийРегистрКаталогПродукцииДобавлен = Ложь Тогда
			
			ЭлементыФормы.Приветствие.Заголовок = "Ваш Модуль EDI подходит для работы, однако требуется обновить объекты хранения данных в конфигурации. "+Символы.ПС+"Нажмите ""Сохранить файл обновления на диск"", сохраните cf файл обновления и обновите в конфигураторе с его помощью объекты Хранения (с приставкой Контур)";
			ЭлементыФормы.ПодключитьМодульEDI.Заголовок = "Нужно обновить объекты хранения.";
			ЭлементыФормы.ПодключитьМодульEDI.Видимость = Истина;
			ЭлементыФормы.ПодключитьМодульEDI.Доступность = Ложь;
		КонецЕсли;
		
	ИначеЕсли МодульEDIПодключен Тогда
		ЭлементыФормы.Приветствие.Заголовок = ЭлементыФормы.Приветствие.Заголовок +Символы.ПС+ "Ваш Модуль EDI НЕ подходит для работы. Обновите его на последнюю версию.";
	Иначе
		//дефолт на форме
	КонецЕсли;

	
КонецПроцедуры

Функция ПриветствиеПодключитьМодульEDI(СтруктураНастроек = Неопределено ) Экспорт//Приветствие - ПодключитьМодульЕДИ (выдран кусок) //ЭлементыФормы: Отключить
	
	Если СтруктураНастроек = Неопределено Тогда   //на УФ потребуется перенести
		Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
		Запись.Объект			= Неопределено;
		Запись.Свойство			= "МодульМеркурийПуть";
		ПолноеИмяМД				= Метаданные().ПолноеИмя();
		Запись.Значение		= ЭтотОбъект.ИспользуемоеИмяФайла;
		ТекстОшибки = "";
		Попытка
			Запись.Записать();
			//ЭлементыФормы.Отключить.Видимость = Истина;
		Исключение
			//Отказ = Истина;
			ТекстОшибки = ОписаниеОшибки() + "
			|Возникла непридвиденная проблема с подключением модуля Меркурий";
			Возврат ТекстОшибки;
		КонецПопытки;
	Иначе
		Для Каждого Эл из СтруктураНастроек Цикл
			локУстановитьКонстантуEDI(Эл.Ключ, Эл.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ТекстОшибки = ДобавитьПартнераМеркурий();
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
		Возврат ТекстОшибки;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ДобавитьПартнераМеркурий()

	Попытка
		//Теперь надо добавить партнера если еще не добавлен
		НовыйПартнерМеркурий = Неопределено;
		Выполнить("НовыйПартнерМеркурий = Справочники.КонтурEDI_ДополнительныеСправочники.НайтиПоНаименованию(""Меркурий"")");
		Если Не ЗначениеЗаполнено(НовыйПартнерМеркурий) Тогда
			
			НовыйПартнерМеркурий = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			НовыйПартнерМеркурий.Наименование = "Меркурий";
			НовыйПартнерМеркурий.ИмяСправочника = "Партнеры";
			НовыйПартнерМеркурий.Записать();
			
			Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
			Запись.Объект			= НовыйПартнерМеркурий.Ссылка;
			Запись.Свойство			= "GLN_Партнера";
			Запись.Значение			= "0000000000000";
			Запись.Записать();
			
			Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
			Запись.Объект			= НовыйПартнерМеркурий.Ссылка;
			Запись.Свойство			= "ПартнерКакТорговаяСеть";
			Запись.Значение			= Истина;
			Запись.Записать();
			
		КонецЕсли;
		//ТекстПредупреждения =  "Модуль подключен. Теперь перезапустите модуль EDI и не забудьте ознакомиться с приложенной инструкцией
		//|Попытки сэкономить время при изучении инструкции приведут к его серьезной потере в будущем.";
		//ЭлементыФормы.Приветствие.Заголовок = ТекстПредупреждения;
		Возврат "";
		
	Исключение
		ТекстОшибки = ОписаниеОшибки() + "
		|Возникла непридвиденная проблема с добавлением Партнера Меркурий, возможно не обновлены объекты модуля Контур.EDI";
		Возврат ТекстОшибки;
	КонецПопытки;

КонецФункции


Функция ПриветствиеОтключитьМодульEDI(Элемент, ЭлементыФормы) Экспорт//Приветствие - ПодключитьМодульЕДИ (выдран кусок) //ЭлементыФормы: Отключить
	
	Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
	
	Запись.Объект			= Неопределено;
	Запись.Свойство			= "МодульМеркурийПуть";
	
	Попытка
		Запись.Удалить();
		ПриветствиеКонтрольМетаданных(ЭлементыФормы);
		ЭлементыФормы.ПодключитьМодульEDI.Заголовок = "Подключить";
		ЭлементыФормы.Отключить.Видимость = Ложь;
		Возврат "Модуль отключен. Теперь перезапустите модуль EDI";
	Исключение
		//Сообщить(ОписаниеОшибки());
		//Отказ = Истина;
		Возврат "Возникла непридвиденная проблема с отключением модуля Меркурий: "+ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция ПриветствиеПроверитьПодключение(ПараметрыПодключения) Экспорт
	
	//чето я пока не понял как проверить реквизиты подключения
	
	//Прокси = Новый WSПрокси(локПолучитьОпределениеПроксиИзМакета("ApplicationManagementsService_test_14"),
	//"http://api.vetrf.ru/schema/cdm/application/service",   
	//"ApplicationManagementServiceBindingQSService",  
	//"ApplicationManagementServiceBindingQSPort"); 
	//
	//Прокси.Пользователь = ЛогинAPI;
	//Прокси.Пароль 		= ПарольAPI;	
	//
	//ТипWSПараметраAPIKey = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/application").Получить("APIKey");
	//ТекКлючАПИ = КлючAPI;
	//ТекissuerId = IssuerID;
	//
	//applicationId = IssuerID;
	//
	//Попытка
	//	MercAppDO = Прокси.receiveApplicationResult(ТекКлючАПИ, ТекissuerId, applicationId);
	//	//разобрать ответ и если ошибка авторизации то 
	//	//возврат Ложь;
		
		//сохранить как дефолтные
		локУстановитьКонстантуEDI("М_ЛогинAPI", 		ПараметрыПодключения.ЛогинAPI);
		локУстановитьКонстантуEDI("М_ПарольAPI", 		ПараметрыПодключения.ПарольAPI);
		локУстановитьКонстантуEDI("М_КлючAPI", 			ПараметрыПодключения.КлючAPI);
		локУстановитьКонстантуEDI("М_issuerId", 		ПараметрыПодключения.IssuerID);
		локУстановитьКонстантуEDI("М_ЛогинПользователя", ПараметрыПодключения.ЛогинПользователя);
		
		локУстановитьКонстантуEDI("М_ИспользуетсяТестовыйAPI", ПараметрыПодключения.НачинаемРаботуНаТестовомСервере);
		
		Возврат Истина;
	//Исключение
	//   Сообщить(ОписаниеОшибки());
	//   Возврат Ложь;
	//КонецПопытки;
	
КонецФункции // ПроверитьПодключение()

Функция МодальностьЗапрещена() Экспорт
	СисИнфо = Новый СистемнаяИнформация;
	ТекВерсияПлатформы=СисИнфо.ВерсияПриложения;
	Остаток=Сред(СокрЛП(ТекВерсияПлатформы),3);  //и так ясно что "8." - в топку
	ВтораяЦифраВерсии=Число(Лев(Остаток,1)); //да полюбому 8.10.х не будет
	Остаток=Сред(СокрЛП(Остаток),3);
	ТретьяЦифраВерсии=Число(Лев(Остаток,Найти(Остаток,".")-1));
	
	Если (ВтораяЦифраВерсии=3 и ТретьяЦифраВерсии>=4) или ВтораяЦифраВерсии>3 Тогда 
		Попытка
			Если Строка(Метаданные.РежимИспользованияМодальности)  = "Использовать" Тогда 
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		Исключение
			//платфома не в курсе что есть режим отказа от модальности
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция локПолучитьКонстантуEDI(ИмяКонстанты) Экспорт

Возврат локПолучитьЗначениеСвойстваОбъектаEDI(Неопределено, ИмяКонстанты)	

КонецФункции // локПолучитьКонстантуEDI()

Функция локПолучитьЗначениеСвойстваОбъектаEDI(Объект, ИмяСвойства) Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтурEDI_ДополнительныеРеквизиты.Значение,
	|	КонтурEDI_ДополнительныеРеквизиты.ЗначениеСтрока
	|ИЗ
	|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеРеквизиты.Свойство = &Свойство
	|	И КонтурEDI_ДополнительныеРеквизиты.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Свойство",	ИмяСвойства);
	Запрос.УстановитьПараметр("Объект",		Объект);
	
	ТекЗначение = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекЗначение = локПреобразоватьСохраненноеЗначение(Выборка.Значение,Выборка.ЗначениеСтрока);

	КонецЕсли;
	
	Возврат ТекЗначение;
	
КонецФункции

Функция локПреобразоватьСохраненноеЗначение(Значение,ЗначениеСтрока) Экспорт
	
	ТекЗначение = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Если Лев(Значение,3)="{""#" Тогда
			ТекЗначение = ЗначениеИзСтрокиВнутр(Значение);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ЗначениеСтрока) Тогда
		ТекЗначение = ЗначениеСтрока;
		Если Лев(ЗначениеСтрока,3)="{""#" Тогда
			ТекЗначение = ЗначениеИзСтрокиВнутр(ЗначениеСтрока);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ТекЗначение;
	
КонецФункции

Функция локУстановитьКонстантуEDI(ИмяКонстанты,ЗначениеКонстанты) Экспорт
	
	локУстановитьЗначениеСвойстваОбъекта(Неопределено,ИмяКонстанты,ЗначениеКонстанты);
	
КонецФункции

Функция локУстановитьЗначениеСвойстваОбъекта(Объект, ИмяСвойства,Знач Значение,Отказ = Ложь) Экспорт 

	ЗначениеНеограниченнаяСтрока = "";
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Если СтрДлина(Значение)>255 Тогда
			ЗначениеНеограниченнаяСтрока = Значение;
			Значение = "";
		КонецЕсли;
	КонецЕсли;
	
		Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
		
		Запись.Объект			= Объект;
		Запись.Свойство			= ИмяСвойства;
		Запись.Значение			= Значение;
	
		Запись.ЗначениеСтрока = ЗначениеНеограниченнаяСтрока;
		
	Попытка
		Запись.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
		
КонецФункции

Функция локПолучитьОпределениеПроксиИзМакета(ИмяМакета) Экспорт

	//ФайлWSDL = ПолучитьИмяВременногоФайла("wsdl");
	//ПолучитьМакет(ИмяМакета).Записать(ФайлWSDL);
	//Определение = Новый WSОпределения(ФайлWSDL);
	//УдалитьФайлы(ФайлWSDL);
	//
	//Возврат Определение;
	
КонецФункции 

// Форма сообщения (для работы УФ и ОФ)
Функция ЭтоУФ(ЭлементыФормы)
	ЭтоУФ = Ложь;
	Попытка
		ЭтоУФ = (ТипЗнч(ЭлементыФормы) = Тип("ВсеЭлементыФормы"));
	Исключение
		ЭтоУФ = Ложь;
	КонецПопытки;
	Возврат ЭтоУФ;
КонецФункции

Функция ВосстановитьТаблицуЗначенийИзХранилища(АдресВХ, ИмяТаблицы) Экспорт
	
	СтруктураВременногоХранилища=ПолучитьИзВременногоХранилища(АдресВХ);
	Если СтруктураВременногоХранилища=Неопределено Тогда 
		ВызватьИсключение "Сервер потерял временное хранилище (откройте форму заново)";
	КонецЕсли;
	Возврат СтруктураВременногоХранилища[ИмяТаблицы]
	
КонецФункции

Процедура СообщениеЗаполнитьПоляНаФорме(Сообщение, Форма, ЭлементыФормы) Экспорт
	
	Если НЕ Сообщение = Неопределено Тогда
		
		ЭлементыФормы.НадписьЗаголовок.Заголовок = ПолучитьНазваниеТранзакцииПоТипуСообщения(Сообщение.ТипСообщения);
		
		Если Сообщение.Товары.Количество()>0 Тогда 
			СтрокаТоваров =  Сообщение.Товары[0];
			ТипВСД = СтрокаТоваров.ВетСертификатТип;
			Если ТипВСД = "RETURNABLE" Тогда
				ЭлементыФормы.НадписьЗаголовок.Заголовок = "ВОЗВРАТНЫЕ " + ЭлементыФормы.НадписьЗаголовок.Заголовок;
				ЭлементыФормы.НадписьЗаголовок.ЦветРамки = WebЦвета.Красный;
				ЭлементыФормы.НадписьЗаголовок.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
			КонецЕсли;
		КонецЕсли;

		Если Сообщение.ТипСообщения = "M_DES"
			И Сообщение.ПлощадкаПолучатель1С = Сообщение.Площадка1С
			Тогда
			
				ЭлементыФормы.НадписьЗаголовок.Заголовок = "Смена собственника без перемещения (M_DES)";
			
		КонецЕсли;

		Форма.Документ1С			= Сообщение.Документ1С;
		
		Статус = Сообщение.Статус;
		Если Статус = "Пропущено" Тогда 
			ЭлементыФормы.НадписьЗаголовок.Заголовок = "Пропущено: "+ЭлементыФормы.НадписьЗаголовок.Заголовок;
		КонецЕсли;
		
		НадписьЗаголовок = ЭлементыФормы.НадписьОткрытьДокумент;
		Если ЗначениеЗаполнено(Сообщение.Организация) Тогда
			ЭлементыФормы.ПредставлениеЮрФизЛицоСвое.Заголовок = Строка(Сообщение.Организация.НаименованиеПолное)+ ", ИНН "+Сообщение.Организация.ИНН + ", КПП "+Сообщение.Организация.КПП;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.Документ1С) Тогда
			НадписьЗаголовок.Заголовок = СокрЛП(Форма.Документ1С);
			НадписьЗаголовок.Гиперссылка = Истина;
			НадписьЗаголовок.ЦветТекста = WebЦвета.СинийСоСтальнымОттенком;
		Иначе
			Если Сообщение.ТипСообщения = "M_REC"
				ИЛИ Сообщение.ТипСообщения = "M_INV" Тогда
				НадписьЗаголовок.Заголовок = "не создан/не привязан";
			КонецЕсли;
			НадписьЗаголовок.Гиперссылка = Ложь;
			НадписьЗаголовок.ЦветТекста = ЭлементыФормы.НадписьЮрФизЛицоСвое.ЦветТекста;
		КонецЕсли;
		
		
		ЭлементыФормы.ПредставлениеХозяйствующийСубъект.Заголовок				= ПолучитьПредставлениеХСМеркурий(Сообщение, "ХозяйствующийСубъект",Истина);
		ЭлементыФормы.ПредставлениеХозяйствующийСубъектПолучатель.Заголовок		= ПолучитьПредставлениеХСМеркурий(Сообщение, "ХозяйствующийСубъектПолучатель",Истина);
		
		ЭлементыФормы.ПредставлениеПеревозчик.Заголовок							= ПолучитьПредставлениеХСМеркурий(Сообщение, "Перевозчик",Истина);
		
		ЭлементыФормы.ПредставлениеПлощадка.Заголовок							= ПолучитьПредставлениеПлощадкаМеркурий(Сообщение, "Площадка");
		ЭлементыФормы.ПредставлениеПлощадкаПолучатель.Заголовок					= ПолучитьПредставлениеПлощадкаМеркурий(Сообщение, "ПлощадкаПолучатель");
		
		Форма.ДокументНомер		= Сообщение.ДокументEDI.Номер;
		Форма.ДокументДата		= Сообщение.ДокументEDI.Дата;
		
		
		//транспорт
		Форма.ВидТранспорта 				= Сообщение.Транспорт.ВидТранспорта;
		Форма.НомерТранспортногоСредства 	= Сообщение.Транспорт.НомерТранспортногоСредства;
		Форма.НомерПолуприцепа 				= Сообщение.Транспорт.НомерПолуприцепа;
		Форма.НомерКонтейнера 				= Сообщение.Транспорт.НомерКонтейнера;
		Форма.СпособХраненияПриПеревозке 	= Сообщение.Транспорт.СпособХраненияПриПеревозке;
		Форма.НомерВагона 					= Сообщение.Транспорт.НомерВагона;
		Форма.НомерАвиарейса 				= Сообщение.Транспорт.НомерАвиарейса;
		
		//товары // придумать сокращения для вет сертификата
		ПустаяСсылкаНоменклатуры				= ОсновнойМодуль.ПолучитьПустуюСсылкуОбъекта("Номенклатура");
		ПустаяСсылкаХарактеристикиНоменклатуры	= ОсновнойМодуль.ПолучитьПустуюСсылкуОбъекта("ХарактеристикаНоменклатуры");
		ПустаяСсылкаЕдиницыИзмерения			= ОсновнойМодуль.ПолучитьПустуюСсылкуОбъекта("МеркурийЕдиницаИзмерения");
		ПустаяСсылкаСтрана						= ОсновнойМодуль.ПолучитьПустуюСсылкуОбъекта("МеркурийСтраныМира");
		//
		//ВывестиДопРеквизитыКарточкиСообщенияМеркурий(Сообщение,ДополнительныеРеквизиты);
		//	
		
		СообщениеТовары = Сообщение.Товары;
		Если СообщениеТовары = Неопределено и Форма.АдресВХ<>"" Тогда
			СообщениеТовары = ВосстановитьТаблицуЗначенийИзХранилища(Форма.АдресВХ, "СообщениеТовары");
		КонецЕсли;
					
		//Таб часть Товары
		Форма.Товары.Очистить();
		НомСтр = 1;
		
		Для каждого Стр Из СообщениеТовары Цикл
			
			НоваяСтрока = Форма.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			
			НоваяСтрока.НомерСтроки = НомСтр;
			НомСтр = НомСтр + 1;
			
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				НоваяСтрока.Номенклатура = ПустаяСсылкаНоменклатуры;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
				НоваяСтрока.ХарактеристикаНоменклатуры = ПустаяСсылкаХарактеристикиНоменклатуры;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
				НоваяСтрока.ЕдиницаИзмерения = ПустаяСсылкаЕдиницыИзмерения;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Стр.Страна) Тогда
				НоваяСтрока.Страна = ПустаяСсылкаСтрана;
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.КоличествоВсего			= СообщениеТовары.Итог("Количество");
		Форма.КоличествоУпаковокВсего = СообщениеТовары.Итог("КоличествоУпаковок");
		
		//Сырье
		
		Форма.Сырье.Очистить();
		НомСтр = 1;
		Если Сообщение.Свойство("Сырье") Тогда
			СообщениеСырье = Сообщение.Сырье;
			Если СообщениеСырье = Неопределено и Форма.АдресВХ<>"" Тогда
				СообщениеСырье = ВосстановитьТаблицуЗначенийИзХранилища(Форма.АдресВХ, "СообщениеСырье");
			КонецЕсли;
			Для каждого Стр Из СообщениеСырье Цикл
				
				НоваяСтрока = Форма.Сырье.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
				
				НоваяСтрока.НомерСтроки = НомСтр;
				НомСтр = НомСтр + 1;
				
				Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
					НоваяСтрока.Номенклатура = ПустаяСсылкаНоменклатуры;
				КонецЕсли;
				
				//Если НЕ ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
				//	НоваяСтрока.ХарактеристикаНоменклатуры = ПустаяСсылкаХарактеристикиНоменклатуры;
				//КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
					НоваяСтрока.ЕдиницаИзмерения = ПустаяСсылкаЕдиницыИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
			Форма.КоличествоСырьяВсего			= СообщениеСырье.Итог("Количество");
			Форма.КоличествоУпаковокСырьяВсего 	= СообщениеСырье.Итог("КоличествоУпаковок");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеХСМеркурий(Сообщение, ОбъектИмя,ЭтоЮрЛицо=Ложь) Экспорт
	
	ПредставлениеДопРеквизитов = "";
	
	Если ЭтоЮрЛицо = Истина Тогда
		СписокРеквизитов = Новый СписокЗначений;
		СписокРеквизитов.Добавить("ИНН"				, " ИНН ");
		СписокРеквизитов.Добавить("КПП"				, " КПП ");
		//СписокРеквизитов.Добавить("Телефон"			, " тел.: ");
		//СписокРеквизитов.Добавить("НомерСчета"		, " р/с ");
		//СписокРеквизитов.Добавить("Банк"			, " в банке ");
		//СписокРеквизитов.Добавить("БИК"				, " БИК ");
		//СписокРеквизитов.Добавить("Руководитель"	, " руков.: ");
		//СписокРеквизитов.Добавить("ГлавныйБухгалтер", " гл. бух.: ");
		
		
		Если Сообщение.Свойство(ОбъектИмя+"1С")
			И ЗначениеЗаполнено(Сообщение[ОбъектИмя+"1С"]) Тогда	
			
			Для каждого Стр Из СписокРеквизитов Цикл
				
				ИмяПоля			= Стр.Значение;
				ЗначениеПоля	= СокрЛП(Сообщение[ОбъектИмя+"1С"][ИмяПоля]);
				Префикс			= Стр.Представление;
				
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					Знак = ?(ПредставлениеДопРеквизитов = "","",",");
					ПредставлениеДопРеквизитов = ПредставлениеДопРеквизитов+Знак+Префикс+ЗначениеПоля;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Сообщение.Свойство(ОбъектИмя+"1С") Тогда
		Возврат Строка(Сообщение[ОбъектИмя+"1С"])+", "+ПредставлениеДопРеквизитов+", GUID: "+Строка(Сообщение[ОбъектИмя+"EDI"].GUID);	
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьПредставлениеХСМеркурий()

Функция ПолучитьПредставлениеПлощадкаМеркурий(Сообщение, ОбъектИмя)

Возврат ПолучитьПредставлениеХСМеркурий(Сообщение, ОбъектИмя,Ложь);	

КонецФункции // ПолучитьПредставлениеХСМеркурий()

Функция СообщениеПроверитьЗаполнениеПолей(ТаблицаОшибок, Сообщение, ЭлементыФормы, НастройкаСсылокИсправленияОшибок) Экспорт
	
	//ОчиститьПометкиПолей();
	
	ТаблицаОшибок.Очистить();
	
	ПараметрыПроверки = Новый Структура();
	РезультатПроверки = ПроверитьТранзакциюМеркурий(Сообщение,ПараметрыПроверки);
	
/////////////////////////////////////////////////////////////	
	Если НЕ РезультатПроверки.Успешно Тогда
		
		Для Каждого Стр Из РезультатПроверки.СписокОшибок Цикл
				
			НоваяСтрока = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			НоваяСтрока.ТекстОшибки = Стр.СведенияОбОшибках;
			
			Если НастройкаСсылокИсправленияОшибок<>Неопределено Тогда //МУФ 
			НайденнаяСтрока = НастройкаСсылокИсправленияОшибок.Найти(Стр.ИмяПоля,"ИмяПоля");
			Если Не НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока.Действие = НайденнаяСтрока.ТекстСсылки;
			КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Стр.ИмяТабличнойЧасти) Тогда
			
				ПометкаПоля = ЭлементыФормы.Найти("Пометка"+Стр.ИмяПоля);
				
				Если Не ПометкаПоля = Неопределено Тогда
					ПометкаПоля.Картинка	= ЭлементыФормы.КартинкаОшибка.Картинка;
					ПометкаПоля.Видимость	= Истина;
				КонецЕсли;
				
			Иначе
				
				Если НЕ Стр.ИмяПоля = Стр.ИмяТабличнойЧасти И Стр.ИмяТабличнойЧасти = "Товары" Тогда
					
					Попытка
						ТекКолонка = ?(ЭтоУФ(ЭлементыФормы), ЭлементыФормы[Стр.ИмяТабличнойЧасти+Стр.ИмяПоля], ЭлементыФормы[Стр.ИмяТабличнойЧасти].Колонки.Найти(Стр.ИмяПоля)); 
						Если НЕ ТекКолонка = Неопределено Тогда
							Если ТекКолонка.Видимость = Ложь Тогда
								ТекКолонка.Видимость	= Истина;
								ТекКолонка.Доступность	= Истина;
							КонецЕсли;

						КонецЕсли;
					Исключение
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
			//Переделать на ХС и Площадки
			
			//Если Стр.ИмяПоля = "Продавец1С" Тогда
			//	
			//	Если КтоМы = "Поставщик" Тогда
			//		УстановитьДействиеЮрФизЛица("ЮрФизЛицоСвое",		"Установить соответствие", Истина);
			//	Иначе
			//		УстановитьДействиеЮрФизЛица("ЮрФизЛицоСтороннее",	"Установить соответствие", Истина);
			//	КонецЕсли;
			//	
			//ИначеЕсли Стр.ИмяПоля = "ПродавецEDI" Тогда
			//	
			//	Если КтоМы = "Поставщик" Тогда
			//		УстановитьДействиеЮрФизЛица("ЮрФизЛицоСвое",		"Исправить ошибки", Истина);
			//	Иначе
			//		УстановитьДействиеЮрФизЛица("ЮрФизЛицоСтороннее",	"Исправить ошибки", Истина);
			//	КонецЕсли;
			//	
			//ИначеЕсли Стр.ИмяПоля = "Покупатель1С" Тогда
			//	
			//	Если КтоМы = "Поставщик" Тогда
			//		УстановитьДействиеЮрФизЛица("ЮрФизЛицоСтороннее",	"Установить соответствие", Истина);
			//	Иначе
			//		УстановитьДействиеЮрФизЛица("ЮрФизЛицоСвое",		"Установить соответствие", Истина);
			//	КонецЕсли;
			//	
			//ИначеЕсли Стр.ИмяПоля = "ПокупательEDI" Тогда
			//	
			//	Если КтоМы = "Поставщик" Тогда
			//		УстановитьДействиеЮрФизЛица("ЮрФизЛицоСтороннее",	"Исправить ошибки", Истина);
			//	Иначе
			//		УстановитьДействиеЮрФизЛица("ЮрФизЛицоСвое",		"Исправить ошибки", Истина);
			//	КонецЕсли;
			//	
			//ИначеЕсли Стр.ИмяПоля = "ГрузополучательEDI" Тогда	
			//	
			//	УстановитьДействиеЮрФизЛица("Грузополучатель",	"Исправить ошибки", Истина);
			//	
			//ИначеЕсли Стр.ИмяПоля = "ГрузоотправительEDI" Тогда	
			//	
			//	УстановитьДействиеЮрФизЛица("Грузоотправитель",	"Исправить ошибки", Истина);
			//	
			//КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//////////////////////////////////////////////	
	Если ЗначениеЗаполнено(Сообщение.СообщениеСсылка) Тогда
		ТекстОшибки = Сообщение.СообщениеСсылка.ОписаниеОшибки;
		
		Если СтрДлина(ТекстОшибки) > 0 Тогда
			Если Найти(ТекстОшибки,Символы.ПС)>0 Тогда
				Пока Найти(ТекстОшибки,Символы.ПС)>0 Цикл
					НоваяСтрока = ТаблицаОшибок.Добавить();
					НоваяСтрока.ТекстОшибки = Лев(ТекстОшибки, Найти(ТекстОшибки,Символы.ПС)-1);
					ТекстОшибки = Сред(ТекстОшибки, Найти(ТекстОшибки,Символы.ПС)+1);
				КонецЦикла;
				Если СтрДлина(ТекстОшибки)>0 Тогда
					НоваяСтрока = ТаблицаОшибок.Добавить();
					НоваяСтрока.ТекстОшибки = ТекстОшибки;
				КонецЕсли;
			Иначе
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//////////////////////////////////////////////	
	
	Если ЭтоУФ(ЭлементыФормы) Тогда
		ЭлементыФормы.ПанельОшибок.Видимость = ТаблицаОшибок.Количество()>0;
	Иначе
		Если ТаблицаОшибок.Количество()=0 Тогда
			Выполнить("ЭлементыФормы.ПанельОшибок.Свертка = РежимСверткиЭлементаУправления.Право");//ЗакрытьПанельОшибок();
		Иначе
			Выполнить("ЭлементыФормы.ПанельОшибок.Свертка = РежимСверткиЭлементаУправления.Нет");//ОткрытьПанельОшибок();
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки.Успешно = РезультатПроверки.Успешно;
	
	Если НЕ РезультатПроверки.Успешно Тогда
		Если Сообщение.Направление = "Исходящее" Тогда
			СообщениеВывестиПанельИнформации(ЭлементыФормы,"В сообщении найдены ошибки, их необходимо исправить перед отправкой.","Плохо");
		Иначе
			СообщениеВывестиПанельИнформации(ЭлементыФормы,"Для загрузки сообщения необходимо проставить соответствия.","Плохо");
		КонецЕсли;
	Иначе
		Если Сообщение.Направление = "Исходящее" Тогда
			Если Не ТаблицаОшибок.Количество() = 0 Тогда
				СообщениеВывестиПанельИнформации(ЭлементыФормы,"В сообщении найдены ошибки, их необходимо исправить перед отправкой.");		
			Иначе
				СообщениеВывестиПанельИнформации(ЭлементыФормы,"Поздравляем! Все ошибки исправлены, теперь можно отправить сообщение.","Хорошо");
			КонецЕсли;
		Иначе
			СообщениеВывестиПанельИнформации(ЭлементыФормы,"Поздравляем! Все соответствия проставлены, теперь можно загрузить сообщение.","Хорошо");
		КонецЕсли;
	КонецЕсли;
	
	КопияСообщения = Неопределено;
	
	Возврат РезультатПроверки.Успешно;
	
КонецФункции // ПроверитьЗаполнениеПолей()

Функция СообщениеПолучитьТабТоваровПоступления(СсылкаДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	//собираем как будто это M_REC
	ВремСообщение = ОсновнойМодуль.ПолучитьСтруктуруСообщения("M_REC","Исходящее");
	ПодготовитьТранзакциюМеркурий("M_REC",СсылкаДокумента,ВремСообщение);
	
	ТабТоваровПоступления = ВремСообщение.Товары;
	
	Возврат ТабТоваровПоступления;
	
	//Рефакторинг
	//Удалить все что ниже
	//
	//ИмяТЧТовары = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяТЧТоварыПоступление");
	//ТабличнаяЧастьТовары = Неопределено;
	//Выполнить("ТабличнаяЧастьТовары = СсылкаДокумента."+ИмяТЧТовары);
	//
	//ТаблицаТоваров = ТабличнаяЧастьТовары.Выгрузить();
	//
	//ЗапросКонвертацииТоваров1СвEDI = ОсновнойМодуль.ИнициализироватьЗапрос_КонтурEDI(Ложь);
	//ЗапросКонвертацииТоваров1СвEDI.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	//
	//ЗапросКонвертацииТоваров1СвEDI.Текст =
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Таб.Номенклатура КАК Номенклатура,
	//|	Таб.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//|	Таб.Количество КАК Количество
	//|ПОМЕСТИТЬ ТабТоваров
	//|ИЗ
	//|	&ТаблицаТоваров КАК Таб
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	Номенклатура,
	//|	ХарактеристикаНоменклатуры";

	//ТекстЗапросаПоРегиструСоответствий = 
	//	"ВЫБРАТЬ
	//	|	ТабТоваров.Номенклатура,
	//	|	ТабТоваров.ХарактеристикаНоменклатуры,
	//	|	ТабТоваров.Количество,
	//	|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.КодТовараПартнера, """") КАК КодТовараСторонний,
	//	|	СоответствияТоваров_КонтурEDI.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С
	//	|ИЗ
	//	|	ТабТоваров КАК ТабТоваров
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//	|			КонтурEDI_СоответствияТоваров.Номенклатура КАК Номенклатура,
	//	|			КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//	|			КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК КодТовараПартнера,
	//	|			КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С
	//	|		ИЗ
	//	|			РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	//	|		ГДЕ
	//	|			КонтурEDI_СоответствияТоваров.Партнер = &Партнер
	//	|			И КонтурEDI_СоответствияТоваров.Номенклатура В
	//	|					(ВЫБРАТЬ
	//	|						ВТ.Номенклатура
	//	|					ИЗ
	//	|						ТабТоваров КАК ВТ)) КАК СоответствияТоваров_КонтурEDI
	//	|		ПО ТабТоваров.Номенклатура = СоответствияТоваров_КонтурEDI.Номенклатура
	//	|			И (СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры = НЕОПРЕДЕЛЕНО
	//	|				ИЛИ ТабТоваров.ХарактеристикаНоменклатуры = СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры)";

	////ОсновнойМодуль.ПреобразоватьТипыЕдиницыИзмеренияЗапросаУТ11_УНФ(ЗапросКонвертацииТоваров1СвEDI);
	////Если ОсновнойМодуль.ОпределитьРелизКонфигурации()="11.2" Тогда
	////	ЗапросКонвертацииТоваров1СвEDI.Текст = СтрЗаменить(ЗапросКонвертацииТоваров1СвEDI.Текст,"Таб.ЕдиницаИзмерения","Таб.Упаковка");	
	////КонецЕсли;	
	//
	//Если ТаблицаТоваров.Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено Тогда
	//	Если ТаблицаТоваров.Колонки.Найти("Характеристика") = Неопределено Тогда
	//		ЗапросКонвертацииТоваров1СвEDI.Текст = СтрЗаменить(ЗапросКонвертацииТоваров1СвEDI.Текст,"Таб.ХарактеристикаНоменклатуры","""""");
	//	Иначе
	//		ЗапросКонвертацииТоваров1СвEDI.Текст = СтрЗаменить(ЗапросКонвертацииТоваров1СвEDI.Текст,"Таб.ХарактеристикаНоменклатуры","Таб.Характеристика");
	//	КонецЕсли;
	//КонецЕсли;
	//		
	//ЗапросКонвертацииТоваров1СвEDI.Выполнить();//создадим ТабТоваров
	//
	//Если ВнешнееХранилище Тогда
	//	
	//	ТабТоваровПоступления = неопределено;
	//	
	//Иначе//объекты в составе конфигурации
	//	
	//	ЗапросКонвертацииТоваров1СвEDI.Текст = ТекстЗапросаПоРегиструСоответствий;
	//	ЗапросКонвертацииТоваров1СвEDI.УстановитьПараметр("Партнер",	ПартнерМеркурий());

	//	//событие, позволяющее переопределить получение по ШК "ИзменитьЗапросПоПривязкеПоступленияКВСД"
	//	ДополнительныеПараметры= новый Структура;
	//	ДополнительныеПараметры.Вставить("ИскатьТоварПоШК",Ложь);
	//	РезультатПМ = ОсновнойМодуль.ОбработкаСобытияПодключаемогоМодуля("ИзменитьЗапросПоПривязкеПоступленияКВСД",,
	//	Новый Структура("Запрос,ДополнительныеПараметры",
	//	ЗапросКонвертацииТоваров1СвEDI,ДополнительныеПараметры));
	//	
	//	Если РезультатПМ <> Неопределено Тогда
	//		ЗапросКонвертацииТоваров1СвEDI = РезультатПМ;
	//	КонецЕсли;

	//	ТабТоваровПоступления = ЗапросКонвертацииТоваров1СвEDI.Выполнить().Выгрузить();
	//	
	//КонецЕсли;
	//
	//Возврат ТабТоваровПоступления;

КонецФункции

Функция СообщениеЗаполнитьКоличествоПринято(Сообщение,СсылкаДокумента) Экспорт
	
	//коэффиициенты пересчета уже учтены в извлечении
	ТабТоваровПоступления = СообщениеПолучитьТабТоваровПоступления(СсылкаДокумента);
	
	Для каждого стр из Сообщение.Товары Цикл
		
		ГУИД = стр.GUID;
		
		КоличествоКПодтверждению = 0;
		КоличествоКПодтверждениюВТерминах1С = 0;
		ОсталосьПогасить = стр.Количество;
		
		мСтрок = ТабТоваровПоступления.НайтиСтроки(Новый Структура("GUID", Гуид));
		Для Сч = 0 по мСтрок.ВГраница() Цикл
			текСтрПоступления = мСтрок.Получить(Сч);
			Погасить = Мин(текСтрПоступления.Количество, ОсталосьПогасить);
			ПогаситьВТерминах1С = текСтрПоступления.КоличествоВДокументе*(?(текСтрПоступления.Количество=0,1,Погасить/текСтрПоступления.Количество));
			КоличествоКПодтверждению = КоличествоКПодтверждению + Погасить;
			КоличествоКПодтверждениюВТерминах1С = КоличествоКПодтверждениюВТерминах1С + ПогаситьВТерминах1С;
			ОсталосьПогасить = ОсталосьПогасить - Погасить;
			текСтрПоступления.Количество = текСтрПоступления.Количество - Погасить;
			текСтрПоступления.КоличествоВДокументе = текСтрПоступления.КоличествоВДокументе - ПогаситьВТерминах1С;
			
			Если ЗначениеЗаполнено(текСтрПоступления.ЕдиницаИзмерения) 
				И НЕ ЗначениеЗаполнено(стр.ЕдиницаИзмерения) Тогда
				стр.ЕдиницаИзмерения = текСтрПоступления.ЕдиницаИзмерения;
			ИначеЕсли 
				ЗначениеЗаполнено(текСтрПоступления.ЕдиницаИзмерения)
				И ЗначениеЗаполнено(стр.ЕдиницаИзмерения)
				И текСтрПоступления.ЕдиницаИзмерения <> стр.ЕдиницаИзмерения Тогда 
				стр.ЕдиницаИзмерения = ОсновнойМодуль.ПолучитьпустуюСсылкуОбъекта("МеркурийЕдиницаИзмерения");
			КонецЕсли;
			
		КонецЦикла;
		
		стр.КоличествоКПодтверждению = КоличествоКПодтверждению;
		стр.КоличествоВДокументе = КоличествоКПодтверждениюВТерминах1С;
		
		стр.КоличествоУпаковокКПодтверждению = ?(стр.Количество = 0, 0, стр.КоличествоУпаковок * стр.КоличествоКПодтверждению / стр.Количество);//пока считаем пропорционально
		
	КонецЦикла;
	
	//теперь раскидаем излишки
	Для Каждого стрПоступления из ТабТоваровПоступления Цикл
		Если стрПоступления.Количество <> 0 Тогда
			мСтрок = Сообщение.Товары.НайтиСтроки(Новый Структура("GUID", стрПоступления.GUID));
			Для Сч = 0 по мСтрок.ВГраница() Цикл
				текСтрСообщения = мСтрок.Получить(Сч);
				текСтрСообщения.КоличествоКПодтверждению = текСтрСообщения.КоличествоКПодтверждению + стрПоступления.Количество;
				текСтрСообщения.КоличествоВДокументе	 = текСтрСообщения.КоличествоВДокументе 	+ стрПоступления.КоличествоВДокументе;
				текСтрСообщения.КоличествоУпаковокКПодтверждению = ?(текСтрСообщения.Количество = 0, 0, текСтрСообщения.КоличествоУпаковок * текСтрСообщения.КоличествоКПодтверждению / стр.Количество);//пока считаем пропорционально
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//установим статус
	Для каждого стр из Сообщение.Товары Цикл
		ОпределитьСтатусРасхожденийПоСтроке(стр);
	КонецЦикла;
	
	Если ТабТоваровПоступления.Итог("Количество")>0 Тогда
		Возврат "Не удалось распределить весь объем! Обнаружены излишки в поступлении!";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция СообщениеПоказатьРасхожденияВТабличныйДокумент(ДокументСсылка, Товары) Экспорт
	
	ТабДокумента = СообщениеПолучитьТабТоваровПоступления(ДокументСсылка);
	Если ТабДокумента = Неопределено Тогда
		ТабДокумента = Новый ТаблицаЗначений;
		ТабДокумента.Колонки.Добавить("Номенклатура");
		ТабДокумента.Колонки.Добавить("GUID");//("КодТовараСторонний");
		ТабДокумента.Колонки.Добавить("ЕдиницаИзмерения");
		ТабДокумента.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	ТабДокумента.Свернуть("Номенклатура,GUID,ЕдиницаИзмерения", "Количество");//,ЕдиницаИзмерения
	ТабСообщения = Товары.Скопировать();
	ТабСообщения.Свернуть("Наименование,GUID,ЕдиницаИзмерения", "Количество, КоличествоКПодтверждению");//,ЕдиницаИзмерения
	
	ОСКД = ПолучитьМакет("МакетРасхожденийВходящегоВСД");
	НастройкиОСКД = ОСКД.НастройкиПоУмолчанию;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТабДокумента", ТабДокумента);
	ВнешниеНаборыДанных.Вставить("ТабСообщения", ТабСообщения);
	
	КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД);
	ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиОСКД.Инициализировать(Макет, ВнешниеНаборыДанных);
	
	ТабДок = Новый ТабличныйДокумент;
	//ТабДок.Очистить();
	ПроцессорВыводаОСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаОСКД.УстановитьДокумент(ТабДок);
	ПроцессорВыводаОСКД.Вывести(ПроцессорКомпоновкиОСКД);
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	Возврат ТабДок;

КонецФункции

Процедура СообщениеВывестиПанельИнформации(ЭлементыФормы,Текст,Вид = Неопределено) Экспорт//КАРТИНКИ
	
	// Возможные виды:
	//	- Хорошо
	//	- Плохо
	//	- Нейтрально
	Картинка = "";
	
	Если Вид = "Хорошо" Тогда
		
		ЭлементыФормы.ПанельИнформации.ЦветФона		= WebЦвета.Роса;
		ЭлементыФормы.ПанельИнформации.ЦветРамки	= WebЦвета.ЗеленыйЛес;
		Картинка = ОсновнойМодуль.ПолучитьКартинкуEDI("ЭлементФормы","КартинкаГалочка");

	ИначеЕсли Вид = "Плохо" Тогда
		
		ЭлементыФормы.ПанельИнформации.ЦветФона		= WebЦвета.ТусклоРозовый;
		ЭлементыФормы.ПанельИнформации.ЦветРамки	= WebЦвета.Шоколадный;
		Картинка = ОсновнойМодуль.ПолучитьКартинкуEDI("ЭлементФормы","КартинкаИсправитьОшибки");
		
	Иначе	
		
		ЭлементыФормы.ПанельИнформации.ЦветФона		= WebЦвета.СлоноваяКость;
		ЭлементыФормы.ПанельИнформации.ЦветРамки	= WebЦвета.РыжеватоКоричневый;
		Картинка = ОсновнойМодуль.ПолучитьКартинкуEDI("ЭлементФормы","КартинкаИнформация");
		
	КонецЕсли;
	
	Если ЭтоУФ(ЭлементыФормы) Тогда
		ЭлементыФормы.ПанельИнформации.Заголовок = СокрЛП(Текст);
		ЭлементыФормы.ИконкаПанелиИнформации1.Видимость = Вид = "Хорошо";
		ЭлементыФормы.ИконкаПанелиИнформации2.Видимость = Вид = "Плохо";
		ЭлементыФормы.ИконкаПанелиИнформации3.Видимость = Вид = Неопределено;
	Иначе
		ЭлементыФормы.НадписьИнформация.Заголовок = СокрЛП(Текст);
		ЭлементыФормы.ИконкаПанелиИнформации.Картинка = Картинка;
	КонецЕсли;
		
КонецПроцедуры


Процедура СообщениеУстановитьДействияОсновныхРеквизитов(ЭлементыФормы, Сообщение) Экспорт
	
	СписокШапки = ОсновнойМодуль.РазложитьСтроку("ХозяйствующийСубъект,Площадка,ХозяйствующийСубъектПолучатель,ПлощадкаПолучатель,Перевозчик");
	
	Для Каждого ЭлементШапки Из СписокШапки Цикл
		
		Если Сообщение.Направление = "Входящее" Тогда
			Свойство = ЭлементШапки.Значение+"1С";
		Иначе
			Свойство = ЭлементШапки.Значение+"EDI";
		КонецЕсли;
			
		Если Сообщение.Свойство(Свойство) Тогда
			Попытка
				Если Сообщение.Направление = "Входящее" Тогда
					Выполнить("ЗначениеСвойства = Сообщение."+Свойство);
				Иначе
					Выполнить("ЗначениеСвойства = Сообщение."+Свойство+".GUID");
				КонецЕсли;
			Исключение
				ЗначениеСвойства = Неопределено;
			КонецПопытки;
			ЭлементФормы = ЭлементыФормы.Найти("Действие"+ЭлементШапки.Значение);
			Если ЭлементФормы<>Неопределено Тогда
				Если Не ЗначениеЗаполнено(ЗначениеСвойства) ТОгда 
					Если НЕ ЭтоУФ(ЭлементыФормы) Тогда
						ЭлементФормы.Картинка = ОсновнойМодуль.ПолучитьКартинкуEDI("ЭлементФормы","КартинкаВосклицание");
					КонецЕсли;
					ЭлементФормы.Заголовок = "Установить соответствие";
					ЭлементФормы.ЦветТекста = WebЦвета.Коричневый;
				Иначе
					Если НЕ ЭтоУФ(ЭлементыФормы) Тогда
						ЭлементФормы.Картинка = ОсновнойМодуль.ПолучитьКартинкуEDI("ЭлементФормы","КартинкаСтатусПодтвержден");
					КонецЕсли;
					ЭлементФормы.Заголовок = "Подробнее";
					ЭлементФормы.ЦветТекста = WebЦвета.черный;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСписокВыбора(Поле, СписокВыбора) Экспорт //необходима для установки списка выбора в колонке табличного поля УФ
	
	Для Сч = 0 по СписокВыбора.Количество()-1 Цикл
		текЭлемент = СписокВыбора.Получить(Сч);
		Поле.СписокВыбора.Добавить(текЭлемент.Значение, текЭлемент.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция СписокТипаТранспорта() Экспорт
	
	Если СписокВыбораТипаТранспорта = неопределено Тогда 
		СписокВыбораТипаТранспорта = новый СписокЗначений();
		СписокВыбораТипаТранспорта.Добавить("1","Автомобильный");
		СписокВыбораТипаТранспорта.Добавить("2","Железнодорожный");
		СписокВыбораТипаТранспорта.Добавить("3","Авиатранспортный");
		СписокВыбораТипаТранспорта.Добавить("4","Морской (контейнер)");
		СписокВыбораТипаТранспорта.Добавить("5","Морской (трюм)");
	КонецЕсли;
	
	Возврат СписокВыбораТипаТранспорта;
	
КонецФункции // СписокВыбораТипаТранспорта()

Функция СписокУсловийХранения() Экспорт
	
	Если СписокВыбораУсловийХранения = неопределено Тогда 
		СписокВыбораУсловийХранения = новый СписокЗначений();
		СписокВыбораУсловийХранения.Добавить("FROZEN"		,"Замороженный");
		СписокВыбораУсловийХранения.Добавить("CHILLED"		,"Охлажденный");
		СписокВыбораУсловийХранения.Добавить("COOLED"		,"Охлаждаемый");
		СписокВыбораУсловийХранения.Добавить("VENTILATED"	,"Вентилируемый");
	КонецЕсли;
	
	Возврат СписокВыбораУсловийХранения;
	
КонецФункции // СписокВыбораТипаТранспорта()


Процедура СообщениеУстановитьВыпадающиеМеню(ЭлементыФормы, Сообщение) Экспорт//для переноса на ОФ нужно тестить
	
	ЭлементыФормы.ВидТранспорта.СписокВыбора = СписокТипаТранспорта();
	Элементыформы.СпособХраненияПриПеревозке.СписокВыбора = СписокУсловийХранения();
	СписокФормВСД = СписокФормВСД();
	
	Если Сообщение.ТипСообщения = "M_REC" Тогда 
		//Элементыформы.Товары.Колонки.ВетСертификатФорма.ЭлементУправления.СписокВыбора = СписокФормВСД();//для ОФ
		//Элементыформы.Товары.Колонки.ВетСертификатСпособХраненияПриПеревозке.ЭлементУправления.СписокВыбора = СписокВыбораУсловийХранения;//для ОФ
		УстановитьСписокВыбора(Элементыформы.ТоварыВетСертификатФорма, СписокФормВСД);
		УстановитьСписокВыбора(Элементыформы.ТоварыВетСертификатСпособХраненияПриПеревозке, СписокВыбораУсловийХранения);
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_REC" ИЛИ Сообщение.ТипСообщения = "M_DES" ИЛИ Сообщение.ТипСообщения = "M_MOV" Тогда 
		СписокВетСертификатЭкспертиза = СписокВариантовВетСертификатЭкспертиза();
		//Элементыформы.Товары.Колонки.ВетСертификатЭкспертиза.ЭлементУправления.СписокВыбора = СписокВариантовВетСертификатЭкспертиза();//для ОФ
		
		УстановитьСписокВыбора(Элементыформы.ТоварыВетСертификатЭкспертиза, СписокВетСертификатЭкспертиза);
		УстановитьСписокВыбора(Элементыформы.Экспертиза, 					СписокВетСертификатЭкспертиза);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СообщениеПогаситьВСД(Сообщение, ЭлементыФормы, ТаблицаОшибок, ПереотправкаСообщения) Экспорт
	
	//пока что только полностью гасим входящее без сравнения с документом и без возможности выбрать что не принято 
	
	//пока что не даем ручного редактирования такого входящего сообщения
	//ОбработатьРучноеИзменениеТранзакции();
	
	Если Истина Тогда //СвойстваКнопки.ПроверятьПоля Тогда
		Если НЕ СообщениеПроверитьЗаполнениеПолей(ТаблицаОшибок, Сообщение, ЭлементыФормы, Неопределено) Тогда//!!!последний параметр
			
			//ОткрытьПанельОшибок();//!!! при возврате открыть панель ошибок
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_INC" Тогда
		ЗаписатьСообщение(Сообщение); //запомним погашенное количество
	КонецЕсли;

	Параметры = Новый Структура();
	Параметры.Вставить("ОтправитьСообщениеИзФормы",	Ложь);
	Параметры.Вставить("ПереотправкаСообщения",	ПереотправкаСообщения);
	Параметры.Вставить("СообщениеСсылка",	Сообщение.СообщениеСсылка);
	Параметры.Вставить("ИмяМетода",			ПолучитьИмяМетодаМеркурийПоТипуСообщения(Сообщение.ТипСообщения));
	Параметры.Вставить("НеЗаписыватьСообщение",	Истина);
	
	ОригинальныеТоварыСообщения = Сообщение.Товары.Скопировать();
	
	ТоварыСвернутыеПоНомерамВСД = Сообщение.Товары.Скопировать(,"ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата");
	ТоварыСвернутыеПоНомерамВСД.Свернуть("ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата");
	
	//гасить следует по 1 ВСД - так говорит апи при попытке погасить несколько	
	Для каждого СтрокаВходящего Из ТоварыСвернутыеПоНомерамВСД Цикл
		
		ОтборПо1ВСД = Новый Структура("ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата",СтрокаВходящего.ВетСертификатUUID,СтрокаВходящего.ВетСертификатСерия,СтрокаВходящего.ВетСертификатНомер,СтрокаВходящего.ВетСертификатДата);
		ТоварыПо1ВСД = ОригинальныеТоварыСообщения.НайтиСтроки(ОтборПо1ВСД);
		
		Сообщение.Товары.Очистить();
		ЕдинственнаяСтрокаСообщения = Сообщение.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ЕдинственнаяСтрокаСообщения,ТоварыПо1ВСД[0],,"Количество,КоличествоУпаковок,КоличествоКПодтверждению,КоличествоУпаковокКПодтверждению");
		//и теперь итоговые Количества
		Для каждого ТоварПо1ВСД Из ТоварыПо1ВСД Цикл
			
			ЕдинственнаяСтрокаСообщения.Количество 			= ЕдинственнаяСтрокаСообщения.Количество + ТоварПо1ВСД.Количество; 
			ЕдинственнаяСтрокаСообщения.КоличествоУпаковок 	= ЕдинственнаяСтрокаСообщения.КоличествоУпаковок + ТоварПо1ВСД.КоличествоУпаковок; 
			
			ЕдинственнаяСтрокаСообщения.КоличествоКПодтверждению 			= ЕдинственнаяСтрокаСообщения.КоличествоКПодтверждению + ТоварПо1ВСД.КоличествоКПодтверждению;
			ЕдинственнаяСтрокаСообщения.КоличествоУпаковокКПодтверждению 	= ЕдинственнаяСтрокаСообщения.КоличествоУпаковокКПодтверждению + ТоварПо1ВСД.КоличествоУпаковокКПодтверждению;
			ОпределитьСтатусРасхожденийПоСтроке(ТоварПо1ВСД);
		КонецЦикла;
		
		Параметры.Вставить("Сообщение",	Сообщение);
		Параметры.Вставить("ВСДUUID",	СтрокаВходящего.ВетСертификатUUID);
		
		ВыполнитьТранзакциюМеркурий(Сообщение.ТипСообщения, Сообщение.ДокументСсылка, Параметры);
		
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции

Функция СообщениеАктуальнаяТаблицаОстатковНаТекМоментВремени(GUIDПлощадки, ТаблицаФормы,ХСGUID) Экспорт
	
	Если ТаблицаОстатковМеркурий <> Неопределено Тогда
		Если ТаблицаОстатковМеркурийАктуальность<>Неопределено 
			И ТекущаяДата() - ТаблицаОстатковМеркурийАктуальность < 60*5 Тогда  //верим ей 5 минут
			Возврат  ТаблицаОстатковМеркурий;
		КонецЕсли;
	КонецЕсли;
	
	ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю складской журнал.");
	
	ТаблицаОстатковМеркурий = ПолучитьЗаписиСкладскогоЖурнала(GUIDПлощадки,,ХСGUID);
	ТаблицаОстатковМеркурийАктуальность = ТекущаяДата();
	
	КЧ = Новый КвалификаторыЧисла(12,2); Массив = Новый Массив;	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	ТаблицаОстатковМеркурий.Колонки.Добавить("КоличествоИспользовано",ОписаниеТиповЧ,"Уже выбрано");
	ТаблицаОстатковМеркурий.Сортировать("ГоденДо Возр, НомерЗаписи Возр");
	
	//отразить что уже распределено (повторно распределить) и если вдруг не найдется - удалить!!!
	Для Каждого СтрокаТаблицы Из ТаблицаФормы Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИсходнаяПартияGUID) Тогда
			НайденнаяСтрокаМеркурий = ТаблицаОстатковМеркурий.Найти(СтрокаТаблицы.ИсходнаяПартияGUID,"GUID_Партии");
			Если НайденнаяСтрокаМеркурий = Неопределено Тогда
				Сообщить("Выбранная партия "+СтрокаТаблицы.ИсходнаяПартияНомер+" уже отсутствует в Меркурии");
				СтрокаТаблицы.ИсходнаяПартияGUID = "";
				СтрокаТаблицы.ИсходнаяПартияНомер = "";
			Иначе //партия есть как таковая с ненулевым количеством
				ОстатокЭтойПартии = НайденнаяСтрокаМеркурий.Остаток - НайденнаяСтрокаМеркурий.КоличествоИспользовано;
				Если ОстатокЭтойПартии >= СтрокаТаблицы.Количество Тогда
					//крыжим
					НайденнаяСтрокаМеркурий.КоличествоИспользовано = НайденнаяСтрокаМеркурий.КоличествоИспользовано + СтрокаТаблицы.Количество;
				Иначе
					Сообщить("Выбранная партия "+СтрокаТаблицы.ИсходнаяПартияНомер+" уже недостаточна по количеству в Меркурии");
					СтрокаТаблицы.ИсходнаяПартияGUID = "";
					СтрокаТаблицы.ИсходнаяПартияНомер = "";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОстатковМеркурий;
	
КонецФункции

Функция СообщениеАннулироватьВсеВСД(Сообщение, Причина) Экспорт
	
	//проверки
	GUIDПлощадкиНаКоторойБылВыпущен = Сообщение.ПлощадкаEDI.GUID;
	Если СокрЛП(GUIDПлощадкиНаКоторойБылВыпущен)="" Тогда
		Возврат "Странно, но по выделенной строке неизвестен GUID площадки, на которой этот ВСД был выпущен. Возможно удалили соответствие GUID?";
	КонецЕсли;
	ЕстьЧтоАннулировать = Ложь;
	Для каждого СтрокаВСД из Сообщение.Товары Цикл
		Если СтрокаВСД.Аннулирован = Истина Тогда 
			Продолжить;
		КонецЕсли;
		ТекUUID = СтрокаВСД.ВетСертификатUUID;
		Если СокрЛП(ТекUUID)="" Тогда
			Возврат "Странно, но по строке "+СтрокаВСД.НомерСтроки+" неизвестен UUID. Вы можете руками вбить ВСД UUID в строку и попробовать снова.";
		КонецЕсли;
		ЕстьЧтоАннулировать = Истина;
	КонецЦикла;
	
	//Причина = ЗапроситьУПользователяПричинуАннулирования();
	
	//теперь аннулируем собственно
	ВсеУдачно = Истина;
	Для каждого СтрокаВСД из Сообщение.Товары Цикл
		ТекUUID =  СтрокаВСД.ВетСертификатUUID;
		Если СтрокаВСД.Аннулирован = Истина Тогда 
			Продолжить;
		КонецЕсли;
		
		РезультатАннулирования = АннулироватьВСД(ТекUUID,Причина,GUIDПлощадкиНаКоторойБылВыпущен);
		Если РезультатАннулирования.Успешно = Истина Тогда
			СтрокаВСД.Аннулирован = Истина;
			
		Иначе
			ВсеУдачно = Ложь;
			Сообщить("Не удалось аннулировать ВСД по строке: "+СтрокаВСД.НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;
	Если ВсеУдачно = Истина Тогда 
		Сообщение.Статус = "Аннулирован";
	Иначе
		Сообщение.Статус = "АннулированЧастично";
	КонецЕсли;
	ЗаписатьСообщение(Сообщение);

КонецФункции

Функция СообщениеАннулироватьВСДПоСтроке(Сообщение, ВыделеннаяСтрока, Причина) Экспорт
	
	ТекUUID = ВыделеннаяСтрока.ВетСертификатUUID;
	Если СокрЛП(ТекUUID)="" Тогда
		Возврат "Странно, но по выделенной строке неизвестен UUID. Вы можете руками вбить ВСД UUID в строку и попробовать снова.";
	КонецЕсли;
	GUIDПлощадкиНаКоторойБылВыпущен = Сообщение.ПлощадкаEDI.GUID;
	Если СокрЛП(GUIDПлощадкиНаКоторойБылВыпущен)="" Тогда
		Возврат "Странно, но по выделенной строке неизвестен GUID площадки, на которой этот ВСД был выпущен. Возможно удалили соответствие GUID?";
	КонецЕсли;
	
	//Причина = ЗапроситьУПользователяПричинуАннулирования();
	
	РезультатАннулирования = АннулироватьВСД(ТекUUID,Причина,GUIDПлощадкиНаКоторойБылВыпущен);
	Если РезультатАннулирования.Успешно = Истина Тогда
		СтрокиСЭтимВСД = Сообщение.Товары.НайтиСтроки(Новый Структура("ВетСертификатUUID",ТекUUID));
		Для каждого АннулированнаяСтрока Из СтрокиСЭтимВСД Цикл
			
			АннулированнаяСтрока.Аннулирован = Истина;
			//пересохранить сообщение
			Если ВсеСтрокиТоваровАннулированы(Сообщение.Товары) Тогда 
				Сообщение.Статус = "Аннулирован";
			Иначе
				Сообщение.Статус = "АннулированЧастично";
			КонецЕсли;
			//ОбработатьРучноеИзменениеТабЧасти();
			ЗаписатьСообщение(Сообщение);
			//ВернутьКнопкуПеревыпускаВСД();
		КонецЦикла;
	Иначе
		Возврат "Не удалось аннулировать ВСД.";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура СообщениеОчиститьВыбранноеКоличествоВСкладскомЖурнале() Экспорт
	
	Если ТаблицаОстатковМеркурий<>Неопределено Тогда
		Для Каждого СтрокаОстатков Из ТаблицаОстатковМеркурий Цикл
			СтрокаОстатков.КоличествоИспользовано = 0;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Форма связи ХС и площадок
Процедура ХСПлощадкаВыполнитьСопоставление(ТипОбъекта, Объект1С, GUID, Наш) Экспорт
	
	Если ТипОбъекта = "Хозяйствующий субъект" Тогда
		ИмяСправочника = "МеркурийХС";
	ИначеЕсли ТипОбъекта = "Площадка" Тогда
		ИмяСправочника = "МеркурийПлощадка";
	КонецЕсли;
	Отказ = Ложь;
	
	//найти доп справочник        - вот это в отдельную функцию убрать
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
	                |ИЗ
	                |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	                |ГДЕ
	                |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = &Значение
	                |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = &ИмяРеквизита
	                |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ИмяСправочника";
	 
	 Запрос.УстановитьПараметр("Значение",Объект1С);
	 Запрос.УстановитьПараметр("ИмяРеквизита", "Объект");
	 Запрос.УстановитьПараметр("ИмяСправочника",ИмяСправочника );
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если  Выборка.Следующий() тогда
		 
	   ДопСправочникСсылка = Выборка.Ссылка;
	   
	 Иначе
		 
	   ДопСправочникСсылка = Неопределено;
	 
	 КонецЕсли;
	
	ЗаписатьЭлементСправочникаМеркурий(ИмяСправочника, Объект1С, GUID, Отказ,Наш, ДопСправочникСсылка);

КонецПроцедуры

Процедура ХСПлощадкаПриСозданииНаСервере(Форма, ЭлементыФормы) Экспорт
	
	Если Форма.ТипОбъекта = "Площадка" Тогда
		ЭлементыФормы.Фокус.Видимость = Ложь;
		ЭлементыФормы.НайтиОбъект.Видимость = Ложь;
		ЭлементыФормы.НайтиGUID.Видимость = ЗначениеЗаполнено(Форма.ХСВладелецGUID);
		
	КонецЕсли;
	
	ЭлементыФормы.НадписьХСВладелец.Видимость = ЗначениеЗаполнено(Форма.ХСВладелецGUID);
	ЭлементыФормы.ХСВладелец.Видимость = ЗначениеЗаполнено(Форма.ХСВладелецGUID);
	ЭлементыФормы.ХСВладелецGUID.Видимость = ЗначениеЗаполнено(Форма.ХСВладелецGUID);
	
	
	ЭлементыФормы.НадписьТипОбъекта.Заголовок = Форма.ТипОбъекта;
	
	//если пришел объект то достанем из него инн
	Если ЗначениеЗаполнено(Форма.Объект1С) И
		ОсновнойМодуль.ЕстьРеквизитОбъекта_Контур(Форма.Объект1С,"ИНН") Тогда
		ЮрЛицоEDI = ОсновнойМодуль.ПреобразоватьЮрФизЛицо_1С_в_EDI(Форма.Объект1С,"Юридический",Ложь);
		Форма.ИНН = Форма.Объект1С.ИНН;
		Форма.Адрес = ЮрЛицоEDI.Адрес.Представление;
		Форма.Наименование = ЮрЛицоEDI.Наименование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.GUID) И
		Форма.ТипОбъекта = "Хозяйствующий субъект" Тогда
		СписокХС = ПолучитьХСПоGUID(Форма.GUID);
		
		Если СписокХС.Количество() = 1 Тогда
		    
			Форма.Наименование	= СписокХС[0].name;
			Если Не ЗначениеЗаполнено(Форма.Наименование) И ЗначениеЗаполнено(СписокХС[0].fio) тогда
				Форма.Наименование	= СписокХС[0].fio;
			КонецЕсли;
			
			Форма.ИНН 	= СписокХС[0].inn;
			Форма.Адрес 	= СписокХС[0].Адрес;
		    Форма.ОГРН 	= СписокХС[0].ogrn;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Форма.GUID) И
		Форма.ТипОбъекта = "Площадка" Тогда
		
		СписокПлощадок = ПолучитьПлощадкуПоGUID(Форма.GUID);
		Если СписокПлощадок.Количество() = 1 Тогда
		    
			Форма.Наименование	= СписокПлощадок[0].name;
			Форма.Адрес 	= СписокПлощадок[0].Адрес;
			Форма.ИНН 	= "";
		    Форма.ОГРН 	= "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ХСПлощадкаВыделитьЦветом(Форма, ЭлементыФормы);

КонецПроцедуры

Процедура ХСПлощадкаВыделитьЦветом(Форма, ЭлементыФормы) Экспорт
	
	АтрибутЦвета = ?(ТипЗнч(Форма) = Тип("УправляемаяФорма"), "ЦветФона", "ЦветФонаПоля");
	
	ЦветХорошо = Новый Цвет(220,250,220);
	ЦветПлохо  = WebЦвета.ТусклоРозовый;
	
	Если ЗначениеЗаполнено(Форма.Объект1С) Тогда
		ЭлементыФормы.Объект1С[АтрибутЦвета] = ЦветХорошо;
	Иначе
		ЭлементыФормы.Объект1С[АтрибутЦвета] = ЦветПлохо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.GUID) Тогда
		ЭлементыФормы.GUID[АтрибутЦвета] = ЦветХорошо;
	Иначе
		ЭлементыФормы.GUID[АтрибутЦвета] = ЦветПлохо;
	КонецЕсли;
	
	ХСУстановитьВидимостьГиперссылкиПодробнее(Форма, ЭлементыФормы);

КонецПроцедуры


//инициализация WS-ссылок
Процедура СоздатьПустуюСтруктуруИспользуемыеПрокси()

	ИспользуемыеПрокси = Новый Структура("WSПроксиApplicationManagementsService,WSПроксиApplicationManagementsService20,WSПроксиСправочникЕдиницИзмерения,WSПроксиСправочникПродукции,WSПроксиСправочникИкар,WSПроксиEnterpriseService,WSПроксиПроверкаРегионализации");	

КонецПроцедуры

Функция ПолучитьОпределениеПроксиИзМакета(ИмяМакета)

	Если ПолучитьКонстантуEDI("М_ИспользуетсяТестовыйAPI") = Ложь ТОгда
		ИмяМакета = СтрЗаменить(ИмяМакета,"_test_","_prod_");
	КонецЕсли;
	
	ФайлWSDL = ПолучитьИмяВременногоФайла("wsdl");
	ПолучитьМакет(ИмяМакета).Записать(ФайлWSDL);
    Определение = Новый WSОпределения(ФайлWSDL);
	УдалитьФайлы(ФайлWSDL);
	
	Возврат Определение;
	
КонецФункции 

Функция ИспользуемыеWSПрокси()
	
	Если ИспользуемыеПрокси = Неопределено Тогда 
		СоздатьПустуюСтруктуруИспользуемыеПрокси();
		Возврат ИспользуемыеПрокси;
	Иначе
		Возврат ИспользуемыеПрокси;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьWSПроксиApplicationManagementsService(ВерсияAPI = Неопределено) Экспорт
	
	Если ВерсияAPI = Неопределено Тогда 
		ВерсияAPI = "14";
	КонецЕсли;
	
	Если ВерсияAPI = "14" Тогда
		Если ИспользуемыеWSПрокси().WSПроксиApplicationManagementsService = Неопределено Тогда
			
			Прокси = Новый WSПрокси(ПолучитьОпределениеПроксиИзМакета("ApplicationManagementsService_test_14"),
			"http://api.vetrf.ru/schema/cdm/application/service",   
			"ApplicationManagementServiceBindingQSService",  
			"ApplicationManagementServiceBindingQSPort"); 
			Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
			Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");
			ИспользуемыеПрокси.WSПроксиApplicationManagementsService = Прокси;
		Иначе
			Прокси = ИспользуемыеWSПрокси().WSПроксиApplicationManagementsService; 
		КонецЕсли;
		
	ИначеЕсли ВерсияAPI = "20" Тогда
		Если ИспользуемыеWSПрокси().WSПроксиApplicationManagementsService20 = Неопределено Тогда
			
			Прокси = Новый WSПрокси(ПолучитьОпределениеПроксиИзМакета("ApplicationManagementService_test_20"),
			"http://api.vetrf.ru/schema/cdm/application/service",   
			"ApplicationManagementServiceBindingQSService",  
			"ApplicationManagementServiceBindingQSPort"); 
			Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
			Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");
			ИспользуемыеПрокси.WSПроксиApplicationManagementsService20 = Прокси;
		Иначе
			Прокси = ИспользуемыеWSПрокси().WSПроксиApplicationManagementsService20; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат(Прокси);
	
КонецФункции

Функция ПолучитьФабрикуXDTOМеркурий()
	
	Пакеты = Новый Массив;
	МассивПутей = Новый Массив;
	
	Для й=1 По 10 Цикл
		ФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
		ПолучитьМакет("СхемаМеркурий"+й).Записать(ФайлСхемы);
		МассивПутей.Добавить(ФайлСхемы); 
	КонецЦикла;	
	
	ВременнаяФабрика = СоздатьФабрикуXDTO(МассивПутей);
	
	Для Каждого ПутьУдаления Из МассивПутей Цикл
		УдалитьФайлы(ПутьУдаления);
	КонецЦикла;

	Возврат ВременнаяФабрика;
	
КонецФункции

Функция ПолучитьФабрикуXDTOМеркурий20()
	
	Пакеты = Новый Массив;
	МассивПутей = Новый Массив;
	
	Для й=1 По 6 Цикл
		ФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
		ПолучитьМакет("СхемаМеркурий20_"+й).Записать(ФайлСхемы);
		МассивПутей.Добавить(ФайлСхемы); 
	КонецЦикла;	
	
	ВременнаяФабрика = СоздатьФабрикуXDTO(МассивПутей);
	
	Для Каждого ПутьУдаления Из МассивПутей Цикл
		УдалитьФайлы(ПутьУдаления);
	КонецЦикла;

	Возврат ВременнаяФабрика;
	
КонецФункции

//неразобранное

Функция ПолучитьУсловияПеремещения20(МассивGUIDПлощадок,МассивSubProductGUID)Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	ПараметрыПодключенияДляТранзакции = ПолучитьПараметрыПодключенияМеркурий(,,"20"); //пока кажется что дефолтные пойдут
	//преобразовать Сообщение в XDTO
	
	ПараметрыТранзакции = ЗаписатьСообщениеЗапросаУсловийПеремещенияXDTO(МассивGUIDПлощадок,МассивSubProductGUID,ПараметрыПодключенияДляТранзакции);
	//выполнитьЗапрос
	
	ПараметрыТранзакции.Вставить("localTransactionId", "IncomingRobot");
	ПараметрыТранзакции.Вставить("ИмяМетода", "CheckShipmentRegionalizationRequest");
	
	ОтветМеркурия = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика_2_0(), ПараметрыТранзакции, ПараметрыПодключенияДляТранзакции, ПараметрыТранзакции.ИмяМетода,Истина); //сразу ждем результат
	Результат.Вставить("ОтветXDTO",ОтветМеркурия);
	ТаблицаПравил = ПреобразоватьОтветМеркурияВТаблицуПравил(ОтветМеркурия);
	Результат.Вставить("ТаблицаПравил",ТаблицаПравил);
	
	Если ОтветМеркурия=Неопределено Тогда
		Результат.Успешно = Ложь;
	Иначе
		Результат.Успешно = Истина;
	КонецЕсли;
	
 	Возврат Результат; 

КонецФункции

Функция ПреобразоватьОтветМеркурияВТаблицуПравил(ОтветXDTO)
	
	ТаблицаПравил = ПолучитьПустуюТаблицуПравилРегионализации();
	ТабУсловийXDTO = ВычислитьXDTO(ОтветXDTO,"result.checkShipmentRegionalizationResponse.r13nRouteSection.appliedR13nRule");	
	
	МассивУсловийXDTO = ВычислитьМассивXDTO(ТабУсловийXDTO);
	conditionGroupСчетчик = 0;
	Для Каждого УсловиеУровень1 Из МассивУсловийXDTO Цикл
		SubProduct3УровняМассив = ВычислитьМассивXDTO(ВычислитьXDTO(УсловиеУровень1,"cargoType"));
		Для Каждого SubProduct Из SubProduct3УровняМассив Цикл
			requirementМассив =  ВычислитьМассивXDTO(ВычислитьXDTO(УсловиеУровень1,"requirement"));
			Если requirementМассив.Количество() = 0 Тогда 
				//Это либо полностью запрещено либо полностью разрешено (раз нет списка требований)   (1) или (3)
				ДобавитьСтрокуУсловияРегионализации(ТаблицаПравил,УсловиеУровень1,SubProduct,"","","");
			Иначе
				//Есть доп условия (2)
				Для Каждого requirement Из requirementМассив Цикл
					conditionGroupМассив =  ВычислитьМассивXDTO(ВычислитьXDTO(requirement,"conditionGroup"));
					Для Каждого conditionGroup Из conditionGroupМассив Цикл
						conditionGroupСчетчик = conditionGroupСчетчик+1;
						conditionМассив =  ВычислитьМассивXDTO(ВычислитьXDTO(conditionGroup,"condition"));
						Для Каждого condition Из conditionМассив Цикл
							ДобавитьСтрокуУсловияРегионализации(ТаблицаПравил,УсловиеУровень1,SubProduct,requirement,conditionGroupСчетчик,condition);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПравил;
	
КонецФункции

Процедура ДобавитьСтрокуУсловияРегионализации(ТаблицаПравил,УсловиеУровень1,SubProduct,requirement,conditionGroupСчетчик,condition)

	НоваяСтрока = ТаблицаПравил.Добавить();
	НоваяСтрока.subProductGUID 		= ВычислитьXDTO(SubProduct,"guid");
	НоваяСтрока.Решение 			= ВычислитьXDTO(УсловиеУровень1,"decision");
	Если requirement<>"" Тогда 
		НоваяСтрока.БолезньGUID 		= ВычислитьXDTO(requirement,"relatedDisease.guid");
		НоваяСтрока.БолезньНименование 	= ВычислитьXDTO(requirement,"relatedDisease.name");
		НоваяСтрока.ГруппаУсловий 		= conditionGroupСчетчик;
		НоваяСтрока.УсловиеGUID 		= ВычислитьXDTO(condition,"uuid");  //пока что на сервере баг и он не умеет работать по guid - зато умеет по uuid
		НоваяСтрока.УсловиеТекст 		= ВычислитьXDTO(condition,"text");
	КонецЕсли;
	
КонецПроцедуры


Функция ВычислитьМассивXDTO(ОбъектИЛИСпискоXDTO)
	
	МассивXDTO = Новый массив;
	Если ТипЗнч(ОбъектИЛИСпискоXDTO) = Тип("ОбъектXDTO") Тогда 
		МассивXDTO.Добавить(ОбъектИЛИСпискоXDTO);
	ИначеЕсли ТипЗнч(ОбъектИЛИСпискоXDTO) = Тип("СписокXDTO") Тогда
		Для Каждого ЭлементСпискаXDTO Из ОбъектИЛИСпискоXDTO Цикл
			МассивXDTO.Добавить(ЭлементСпискаXDTO);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивXDTO;
	
КонецФункции

Функция ПолучитьПустуюТаблицуПравилРегионализации()
	
	ТаблицаПравил = Новый ТаблицаЗначений;
	ТаблицаПравил.Колонки.Добавить("subProductGUID",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));;
	
	ТаблицаПравил.Колонки.Добавить("Решение",Новый ОписаниеТипов("Число",
	Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)),"Решение");
	
	ТаблицаПравил.Колонки.Добавить("БолезньGUID",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
	
	ТаблицаПравил.Колонки.Добавить("БолезньНименование",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	
	ТаблицаПравил.Колонки.Добавить("ГруппаУсловий",Новый ОписаниеТипов("Число", ,
	Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)),"Группа условий");
	
	ТаблицаПравил.Колонки.Добавить("УсловиеGUID",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
	
	ТаблицаПравил.Колонки.Добавить("УсловиеТекст",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
	
	Возврат ТаблицаПравил;
	
КонецФункции // ПолучитьПустуюТаблицуПравилРегионализации()


Функция ЗаписатьСообщениеЗапросаУсловийПеремещенияXDTO(МассивGUIDПлощадок,МассивSubProductGUID,ПараметрыПодключенияДляТранзакции)
	
	ВерсияAPI = "20";
	Если  ПараметрыПодключенияДляТранзакции.Свойство("ВерсияAPI") И ЗначениеЗаполнено(ПараметрыПодключенияДляТранзакции.ВерсияAPI) Тогда
		ВерсияAPI = ПараметрыПодключенияДляТранзакции.ВерсияAPI;
	КонецЕсли;

	ПараметрыТранзакции = Новый Структура();
	МассивСписковXDTO = Новый Массив();
	cargoTypes = Новый СписокЗначений();
	
	Для Каждого SubProductGUID ИЗ МассивSubProductGUID Цикл
		
		cargoType = ПолучитьОбъектXDTOМеркурий("Справочник20", 			"SubProduct", ВерсияAPI);
		cargoType.guid = СокрЛП(SubProductGUID);
		cargoTypes.Добавить(cargoType);
		
	КонецЦикла;
	
	shipmentRoute = ПолучитьОбъектXDTOМеркурий("ВетДокумент", 			"ShipmentRoute", ВерсияAPI);
	Для Каждого GUIDПлощадки ИЗ МассивGUIDПлощадок Цикл
		routePoint = ПолучитьОбъектXDTOМеркурий("ВетДокумент", 			"ShipmentRoutePoint", ВерсияAPI);
		enterprise = ПолучитьОбъектXDTOМеркурий("Справочник20",			"Enterprise", ВерсияAPI);
		enterprise.guid = СокрЛП(GUIDПлощадки);
		routePoint.enterprise = enterprise;
		shipmentRoute.routePoint.Добавить(routePoint);
	КонецЦикла;
	
	МассивСписковXDTO = Новый Массив();
	МассивСписковXDTO.Добавить("cargoType");
	
	ПараметрыТранзакции.Вставить("МассивСписков", 		МассивСписковXDTO);	
	
	ПараметрыТранзакции.Вставить("cargoType", 	cargoTypes); 
	ПараметрыТранзакции.Вставить("shipmentRoute", 	shipmentRoute); 
	ПараметрыТранзакции.Вставить("Наименование", 		"CheckShipmentRegionalizationRequest");
	ПараметрыТранзакции.Вставить("initiator", 			ПараметрыПодключенияДляТранзакции.user);
	
	Возврат ПараметрыТранзакции;
	
КонецФункции // ЗаписатьСообщениеЗапросаУсловийПеремещенияXDTO()

//неразобранное

Функция ПолучитьНаименованиеИзКлассификатораЕдиницИзмеренияМеркурий(unitUUID) Экспорт
	Если ЗначениеЗаполнено(unitUUID) Тогда
		НайденноеИмяЕИМеркурий=ПолучитьКлассификаторЕдиницИзмеренияМеркурий().Найти(unitUUID,"UUID");
		Если Значениезаполнено(НайденноеИмяЕИМеркурий) тогда
			Возврат НайденноеИмяЕИМеркурий.Наименование;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция ПолучитьНаименованиеИзКлассификатораУпаковокМеркурий(ЕдиницаИзмеренияУпаковокUUID) Экспорт
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияУпаковокUUID) Тогда
		НайденноеИмяУпМеркурий=ПолучитьКлассификаторУпаковокМеркурий().Найти(ЕдиницаИзмеренияУпаковокUUID,"UUID");
		Если Значениезаполнено(НайденноеИмяУпМеркурий) тогда
			Возврат НайденноеИмяУпМеркурий.Наименование;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция ПолучитьПредставлениеСпособаХранения(Значение) Экспорт
	
	Если СписокВыбораУсловийХранения = Неопределено Тогда
		СписокВыбораУсловийХранения = новый СписокЗначений;
		СписокВыбораУсловийХранения.Добавить("FROZEN","Замороженный (FROZEN)");
		СписокВыбораУсловийХранения.Добавить("CHILLED","Охлажденный (CHILLED)");
		СписокВыбораУсловийХранения.Добавить("COOLED","Охлаждаемый (COOLED)");
		СписокВыбораУсловийХранения.Добавить("VENTILATED","Вентилируемый (VENTILATED)");
	КонецЕсли;
	
	НайденнаяРасшифровка = СписокВыбораУсловийХранения.НайтиПоЗначению(Значение);
	
	Если НайденнаяРасшифровка<>Неопределено Тогда 
		Возврат НайденнаяРасшифровка.Представление;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПредставлениеФормыВСД(Значение) Экспорт
	
	Если СписокФормВСД = Неопределено Тогда
		СписокФормВСД = СписокФормВСД();
	КонецЕсли;
	
	НайденнаяРасшифровка = СписокФормВСД.НайтиПоЗначению(Значение);
	
	Если НайденнаяРасшифровка<>Неопределено Тогда 
		Возврат НайденнаяРасшифровка.Представление;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОсновнуюЕдиницуИзмерения(Ссылка) Экспорт
	
	Если ОсновнойМодуль.ИмяКонфигурации1С = "ТКПТ" Тогда
		ЕдиницаИзмерения = Ссылка.ОсновнаяЕдиницаИзмерения;
		
	ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С = "ДалионУМ" Тогда
		ЕдиницаИзмерения = Ссылка.БазоваяЕдиницаИзмерения;		
		
	ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С = "УФ_БП" Тогда
		ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;

	ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С = "УФ_УТ" Тогда
		ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;

	ИначеЕсли НЕ ОсновнойМодуль.ИмяКонфигурации1С = "БП" Тогда
		ЕдиницаИзмерения = Ссылка.ЕдиницаХраненияОстатков;

	ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С = "УФ_БП" Тогда
		ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;

	ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С = "УФ_УТ" Тогда
		ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;
		
	Иначе
		ЕдиницаИзмерения = ОбработкаСобытияПодключаемогоМодуля("МеркурийПолучитьОсновнуюЕдиницуИзмерения",,Новый Структура("Номенклатура",Ссылка));
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда 
			ЕдиницаИзмерения = Ссылка.БазоваяЕдиницаИзмерения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

//установить видимость, доступность, только просмотр и т.п. для нескольких элементов формы. Элементы - либо массив, либо строка, содержащая список элементов, разделенный запятыми
//Спасибо MegaBrain за подгон процедуры
Процедура УстановитьПараметрыЭлементовФормы(Родитель,Элементы,Параметры) Экспорт 
	ТипРодителя			= ТипЗнч(Родитель);
	фЕстьЭУ				= Ложь;
	Если ТипРодителя=Тип("ТабличноеПоле") Тогда // Обычная форма
		ПодчЭлементы 	= Родитель.Колонки;
		фЕстьЭУ			= Истина;
	ИначеЕсли ТипРодителя=Тип("ТаблицаФормы") Тогда // Управляемая форма
		ПодчЭлементы 	= Родитель.ПодчиненныеЭлементы;
	ИначеЕсли ТипРодителя=Тип("ЭлементыФормы") или ТипРодителя=Тип("ВсеЭлементыФормы") Тогда // Обычная или управляемая форма
		ПодчЭлементы	= Родитель;
	Иначе
		ВызватьИсключение "Неверный тип параметра 1 процедуры УстановитьПараметрыЭлементовФормы";
	КонецЕсли;
	
	мЭлементы			= ?(ТипЗнч(Элементы)=Тип("Массив"),Элементы,ОсновнойМодуль.EDI_РазложитьСтрокуВМассивСлов(Элементы,","));
	Для Каждого Имя Из мЭлементы Цикл
		Элемент			= ПодчЭлементы.Найти(Имя);
		Если Элемент<>Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Элемент,Параметры);
			Если фЕстьЭУ Тогда
				ЗаполнитьЗначенияСвойств(Элемент.ЭлементУправления,Параметры);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПреобразоватьСлитноеНаписаниеВЧитаемое(ЗНАЧ лСтрока) Экспорт
	
	лСтрока = СокрЛП(лСтрока);
	
	ИтоговаяСтрока = "";
	Для й=1 По СтрДлина(лСтрока) Цикл 
		Символ =  Сред(лСтрока,й,1);
		
		Если (Врег(Символ) = Символ ИЛИ Найти("1234567890",Символ)<>0)И й<>1 Тогда
			ИтоговаяСтрока = ИтоговаяСтрока+" "+Нрег(Символ);	
		Иначе
			ИтоговаяСтрока = ИтоговаяСтрока+Символ;	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИтоговаяСтрока;	

КонецФункции // ПреобразоватьСлитноеНаписание()

Функция ПерепроверитьProductItemВЖурналах() Экспорт
	
	ОбщаяТаблицаПроверки = Новый ТаблицаЗначений;
	ОбщаяТаблицаПроверки.Колонки.Добавить("productItemUUID",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
	
	ОбщаяТаблицаПроверки.Колонки.Добавить("productItemUUIDНовый",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
	
	ОбщаяТаблицаПроверки.Колонки.Добавить("НовыйUUIDАктивен",Новый ОписаниеТипов("Булево"));
	
	ОбщаяТаблицаПроверки.Индексы.Добавить("productItemUUID");
	
	//Сервисная функция - идет в актуальные складские журналы и перепроверяет ProductItem на предмет протухания после чего обновляет их
	//при этом! если ProductItem был удален то нам необходимо вообще очистить его
	СписокПлощадок = ПолучитьСписокНашихПлощадок();
	СписокОрг = ПолучитьСписокНашихОрганизаций();
	
	Для Каждого НашаПлощадка Из СписокПлощадок Цикл
		ПлощадкаGUID = ПолучитьДопРеквизитЭлементаДопСправочника(НашаПлощадка.Значение,"GUID");
		Если ЗначениеЗаполнено(ПлощадкаGUID) Тогда 
			Для Каждого НашаОрганизация Из СписокОрг Цикл
				ХС = НашаОрганизация.Значение;
				ХСGUID = ПолучитьДопРеквизитЭлементаДопСправочника(ХС,"GUID");
				Если ЗначениеЗаполнено(ХСGUID) Тогда 
					Журнал = ПолучитьЗаписиСкладскогоЖурнала(ПлощадкаGUID,,ХСGUID);
					
					ТЗПроверки = Журнал.Скопировать(,"productItemUUID");
					ТЗПроверки.Свернуть("productItemUUID");
					
					Для Каждого Строка Из ТЗПроверки Цикл
						Если ЗначениеЗаполнено(СокрЛП(Строка.productItemUUID)) Тогда 
							СтрокаОбщейТаблицы = ОбщаяТаблицаПроверки.Добавить();
							СтрокаОбщейТаблицы.productItemUUID = Строка.productItemUUID;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ОбщаяТаблицаПроверки.Свернуть("productItemUUID, productItemUUIDНовый, НовыйUUIDАктивен");
	
	Для каждого ПроверяемаяСтрока Из ОбщаяТаблицаПроверки Цикл
		
		РезультатПроверки = ПолучитьСамуюСвежую_productItemUUID_ПоUUID(ПроверяемаяСтрока.productItemUUID);
		
		Если РезультатПроверки.Успешно = Истина Тогда 
			
			ПроверяемаяСтрока.productItemUUIDНовый =  РезультатПроверки.ПоследнийUUID;
			ПроверяемаяСтрока.НовыйUUIDАктивен =  РезультатПроверки.Активен=Истина;
				
		КонецЕсли;
	КонецЦикла;
	
	//Теперь осталось только обойти площадки по оперативным складским журналим и заменить старые на новые (или очистить если был удален 4 уровень класс
	Для Каждого СтрокаОперативногоЖурнала Из ОперативныйСкладскойЖурнал Цикл
		ТаблицаСЖПлощадки = СтрокаОперативногоЖурнала.Данные;
		
		//обработка
		Если ТаблицаСЖПлощадки <> Неопределено Тогда 
			Для Каждого СтрокаЖурнала ИЗ ТаблицаСЖПлощадки Цикл
				Если ЗначениеЗаполнено(СтрокаЖурнала.productItemUUID) Тогда 
					НайденнаяЗамена = ОбщаяТаблицаПроверки.Найти(СтрокаЖурнала.productItemUUID,"productItemUUID");
					Если НайденнаяЗамена<>Неопределено Тогда 
						Если НайденнаяЗамена.productItemUUIDНовый <> СтрокаЖурнала.productItemUUID Тогда 
							Если НайденнаяЗамена.НовыйUUIDАктивен = Ложь Тогда
								СтрокаЖурнала.productItemUUID = ""; // эта опубликованная номенклатура была удалена из справочника
							Иначе
								СтрокаЖурнала.productItemUUID = НайденнаяЗамена.productItemUUIDНовый;
							КонецЕсли;
						Иначе
							//productItemUUIDНовый такой же, но текущая версия могла устареть
							Если НайденнаяЗамена.НовыйUUIDАктивен = Ложь Тогда
								СтрокаЖурнала.productItemUUID = ""; // эта опубликованная номенклатура была удалена из справочника
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаОперативногоЖурнала.Данные = ТаблицаСЖПлощадки;
		//актуальность не передвигаем
	КонецЦикла;
	
КонецФункции 

Процедура ПрисвоитьСоответствиеНоменклатурыВИерархии(ГруппаСсылка,GUID,НаименованиеМеркурий,ПартнерМеркурий,РешениеПользователя) Экспорт
	
	ПрисваиватьВсюВложенность = РешениеПользователя = "ВКЛЮЧАЯ всю вложенность";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.ЭтоГруппа
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Родитель = &Родитель
	               |	И НЕ Номенклатура.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Родитель",ГруппаСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Если ПрисваиватьВсюВложенность Тогда
				ПрисвоитьСоответствиеНоменклатурыВИерархии(Выборка.Ссылка,GUID,НаименованиеМеркурий,ПартнерМеркурий,РешениеПользователя)
			Иначе
				//пропуск
			КонецЕсли;
		Иначе
			ПрисвоитьСоответствиеНоменклатуры(Выборка.Ссылка,GUID,НаименованиеМеркурий,ПартнерМеркурий);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПрисвоитьПроизводимТоварВИерархии(ГруппаСсылка,НовыйФлажок,РешениеПользователя) Экспорт
	
	ПрисваиватьВсюВложенность = РешениеПользователя = "ВКЛЮЧАЯ всю вложенность";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка,
	               |	Номенклатура.ЭтоГруппа
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Родитель = &Родитель
	               |	И НЕ Номенклатура.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Родитель",ГруппаСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Если ПрисваиватьВсюВложенность Тогда
				ПрисвоитьПроизводимТоварВИерархии(Выборка.Ссылка,НовыйФлажок,РешениеПользователя)
			Иначе
				//пропуск
			КонецЕсли;
		Иначе
			НастройкиИзменитьПризнакПроизводим(Выборка.Ссылка,НовыйФлажок)
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПроверитьДоступПользователя(ХСGUID = Неопределено, ПлощадкаGUID = Неопределено, Сообщать = Истина)
	
	СтруктураВозврата = Новый Структура("ЕстьДоступ, ЛогинМеркурий, Сообщение", Истина, "", "");
	
	Если ДоступыПользователя = Неопределено Тогда
		Если Метаданные.ПараметрыСеанса.Найти("ТекущийПользователь")<>Неопределено Тогда
			ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
		Иначе
			СтруктураВозврата.ЕстьДоступ = Истина;
			Возврат СтруктураВозврата;//нет пользователя в параметрах сеанса - не сможем контролировать
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА ХС_Площадки.ИмяРеквизита ПОДОБНО ""ХозСубъектGUID%""
		               |			ТОГДА ""ХозСубъект""
		               |		ИНАЧЕ ""Площадка""
		               |	КОНЕЦ КАК Тип,
		               |	ХС_Площадки.Значение КАК GUID,
		               |	ХС_Площадки.ЗначениеСтрока КАК ЛогинМеркурий
		               |ИЗ
		               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК Пользователь
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК ХС_Площадки
		               |		ПО Пользователь.Ссылка = ХС_Площадки.Ссылка
		               |			И (ХС_Площадки.ИмяРеквизита ПОДОБНО ""ХозСубъектGUID%""
		               |				ИЛИ ХС_Площадки.ИмяРеквизита ПОДОБНО ""ПлощадкаGUID%"")
		               |ГДЕ
		               |	Пользователь.ИмяРеквизита = ""Пользователь1С""
		               |	И Пользователь.Ссылка.ИмяСправочника = ""МеркурийПользователь""
					   |	И Пользователь.Значение = &ТекПользователь
		               |	И НЕ Пользователь.Ссылка.ПометкаУдаления";
		Запрос.УстановитьПараметр("ТекПользователь", ТекПользователь);
		ДоступыПользователя = Запрос.Выполнить().Выгрузить();	
	КонецЕсли;
	
	Если ХСGUID<>Неопределено Тогда
		
		мСтрок = ДоступыПользователя.НайтиСтроки(Новый Структура("Тип, GUID", "ХозСубъект", ХСGUID));
		Если мСтрок.Количество() = 0 Тогда
			СтруктураВозврата.ЕстьДоступ = Ложь;
			СтруктураВозврата.Сообщение = "У Вас нет доступа к хоз. субъекту ("+ХСGUID+")";
			Если Сообщать Тогда
				Сообщить(СтруктураВозврата.Сообщение);
			КонецЕсли;
			Возврат СтруктураВозврата;
		Иначе
			СтруктураВозврата.ЛогинМеркурий = мСтрок.Получить(0).ЛогинМеркурий;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПлощадкаGUID<>Неопределено Тогда
		
		мСтрок = ДоступыПользователя.НайтиСтроки(Новый Структура("Тип, GUID", "Площадка", ПлощадкаGUID));
		Если мСтрок.Количество() = 0 Тогда
			СтруктураВозврата.ЕстьДоступ = Ложь;
			СтруктураВозврата.Сообщение = "У Вас нет доступа к площадке ("+ПлощадкаGUID+")";
			Если Сообщать Тогда
				Сообщить(СтруктураВозврата.Сообщение);
			КонецЕсли;
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;

	
КонецФункции

Процедура НастройкаПользователейЗаполнитьТаблицы(МенеджерВременныхТаблиц, текПользователь, ТабХС, ТабПлощадок) Экспорт
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДопРеквизиты.Ссылка.ИмяСправочника,
		               |	ДопРеквизиты.Ссылка,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ДопРеквизиты.ИмяРеквизита = ""GUID""
		               |				ТОГДА ДопРеквизиты.Значение
		               |			ИНАЧЕ NULL
		               |		КОНЕЦ) КАК GUID,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ДопРеквизиты.ИмяРеквизита = ""Объект""
		               |				ТОГДА ДопРеквизиты.Значение
		               |			ИНАЧЕ NULL
		               |		КОНЕЦ) КАК Объект,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ДопРеквизиты.ИмяРеквизита = ""Наш""
		               |				ТОГДА ДопРеквизиты.Значение
		               |			ИНАЧЕ NULL
		               |		КОНЕЦ) КАК Наш
		               |ПОМЕСТИТЬ врНашиХСПлощадки
		               |ИЗ
		               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК ДопРеквизиты
		               |ГДЕ
		               |	(ДопРеквизиты.Ссылка.ИмяСправочника = ""МеркурийХС""
		               |			ИЛИ ДопРеквизиты.Ссылка.ИмяСправочника = ""МеркурийПлощадка"")
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ДопРеквизиты.Ссылка,
		               |	ДопРеквизиты.Ссылка.ИмяСправочника
		               |
		               |ИМЕЮЩИЕ
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ДопРеквизиты.ИмяРеквизита = ""Наш""
		               |				ТОГДА ДопРеквизиты.Значение
		               |			ИНАЧЕ NULL
		               |		КОНЕЦ) = ИСТИНА";
					   
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ХС_Площадки.ИмяРеквизита ПОДОБНО ""ХозСубъектGUID%""
	               |			ТОГДА ""МеркурийХС""
	               |		ИНАЧЕ ""МеркурийПлощадка""
	               |	КОНЕЦ КАК ИмяСправочника,
	               |	ХС_Площадки.Значение КАК GUID,
	               |	ХС_Площадки.ЗначениеСтрока
	               |ПОМЕСТИТЬ врДоступыПользователя
	               |ИЗ
	               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК ХС_Площадки
	               |ГДЕ
	               |	(ХС_Площадки.ИмяРеквизита ПОДОБНО ""ХозСубъектGUID%""
	               |			ИЛИ ХС_Площадки.ИмяРеквизита ПОДОБНО ""ПлощадкаGUID%"")
	               |	И ХС_Площадки.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ПараметрыПользователя.Ссылка
	               |			ИЗ
	               |				Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК ПараметрыПользователя
	               |			ГДЕ
	               |				ПараметрыПользователя.ИмяРеквизита = ""Пользователь1С""
	               |				И ПараметрыПользователя.Значение = &Пользователь
	               |				И НЕ ПараметрыПользователя.Ссылка.ПометкаУдаления)
	               |	И ХС_Площадки.Ссылка.ИмяСправочника = ""МеркурийПользователь""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА врДоступыПользователя.GUID ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Вкл,
	               |	НашиХС.GUID,
	               |	НашиХС.Объект КАК ХозСубъект,
	               |	ЕСТЬNULL(врДоступыПользователя.ЗначениеСтрока, """") КАК ПользовательМеркурий
	               |ИЗ
	               |	врНашиХСПлощадки КАК НашиХС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК ДопРеквизиты
	               |		ПО (ДопРеквизиты.Значение = НашиХС.GUID)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ врДоступыПользователя КАК врДоступыПользователя
	               |		ПО НашиХС.GUID = врДоступыПользователя.GUID
	               |			И НашиХС.ИмяСправочника = врДоступыПользователя.ИмяСправочника
	               |ГДЕ
	               |	НашиХС.ИмяСправочника = ""МеркурийХС""
	               |	И ДопРеквизиты.Ссылка.ИмяСправочника = ""МеркурийУчетнаяЗапись""
	               |	И НЕ ДопРеквизиты.Ссылка.ПометкаУдаления
	               |	И ДопРеквизиты.ИмяРеквизита = ""IssuerId""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА врДоступыПользователя.GUID ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Вкл,
	               |	НашиПлощадки.GUID,
	               |	НашиПлощадки.Объект КАК Площадка
	               |ИЗ
	               |	врНашиХСПлощадки КАК НашиПлощадки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ врДоступыПользователя КАК врДоступыПользователя
	               |		ПО НашиПлощадки.GUID = врДоступыПользователя.GUID
	               |			И НашиПлощадки.ИмяСправочника = врДоступыПользователя.ИмяСправочника
	               |ГДЕ
	               |	НашиПлощадки.ИмяСправочника = ""МеркурийПлощадка""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ врДоступыПользователя";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Пользователь", текПользователь);
	Результат = Запрос.ВыполнитьПакет();
	ТабХС = Результат.Получить(1).Выгрузить();
	ТабПлощадок = Результат.Получить(2).Выгрузить();

КонецПроцедуры

Процедура НастройкаПользователейЗаполнитьСписок(СписокПользователей) Экспорт
	
	ТипСправочника = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийПользователь",,Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка
	               |ИЗ
	               |	Справочник."+ТипСправочника+" КАК Пользователи
	               |ГДЕ
	               |	НЕ Пользователи.ПометкаУдаления
				   |УПОРЯДОЧИТЬ ПО
                   |	Пользователи.Наименование";
				   
	
	СписокПользователей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура НастройкаПользователейЗаписать(текПользователь, ТабХС, ТабПлощадок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДопРеквизиты.Ссылка
	               |ИЗ
	               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК ДопРеквизиты
	               |ГДЕ
	               |	ДопРеквизиты.ИмяРеквизита = ""Пользователь1С""
	               |	И ДопРеквизиты.Ссылка.ИмяСправочника = ""МеркурийПользователь""
	               |	И ДопРеквизиты.Значение = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Ложь;//если пометили на удаление
	Иначе
		Объект = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
		Объект.Наименование = СокрЛП(текПользователь);
		СтрПользователь = Объект.ДополнительныеРеквизиты.Добавить();
		СтрПользователь.ИмяРеквизита = "Пользователь1С";
		СтрПользователь.Значение = текПользователь;
	КонецЕсли;
	
	Объект.ИмяСправочника = "МеркурийПользователь";
	
	//удалим строки (если есть)
	мУдаляемыхСтрок = Новый Массив;
	Для Каждого стр из Объект.ДополнительныеРеквизиты Цикл
		Если Лев(Стр.ИмяРеквизита, 14) = "ХозСубъектGUID" или Лев(Стр.ИмяРеквизита, 12) = "ПлощадкаGUID" Тогда
			мУдаляемыхСтрок.Добавить(стр);
		КонецЕсли;
	КонецЦикла;
	Для Сч = 0 по мУдаляемыхСтрок.ВГраница() Цикл
		Объект.ДополнительныеРеквизиты.Удалить(мУдаляемыхСтрок.Получить(Сч));
	КонецЦикла;
	
	//пишем новые
	Сч = 0;
	Для каждого стр из ТабХС Цикл
		Если стр.Вкл Тогда
			Если Объект.ДополнительныеРеквизиты.Найти(стр.GUID, "Значение") = Неопределено Тогда
				Сч = Сч+1;
				новСтр = Объект.ДополнительныеРеквизиты.Добавить();
				новСтр.ИмяРеквизита = "ХозСубъектGUID" + Сч;
				новСтр.Значение = стр.GUID;
				новСтр.ЗначениеСтрока = стр.ПользовательМеркурий;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Сч = 0;
	Для каждого стр из ТабПлощадок Цикл
		Если стр.Вкл Тогда
			Если Объект.ДополнительныеРеквизиты.Найти(стр.GUID, "Значение") = Неопределено Тогда
				Сч = Сч+1;
				новСтр = Объект.ДополнительныеРеквизиты.Добавить();
				новСтр.ИмяРеквизита = "ПлощадкаGUID" + Сч;
				новСтр.Значение = стр.GUID;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Записать();
	
	Если Метаданные.ПараметрыСеанса.Найти("ТекущийПользователь")<>Неопределено Тогда
		Если ПараметрыСеанса.ТекущийПользователь = текПользователь Тогда
			ДоступыПользователя = Неопределено;
			ПроверитьДоступПользователя();//перечитаем
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры

Функция СообщениеЕстьДоступ(Сообщение) Экспорт
	
	ЕстьДоступ = Истина;
	
	Если ТипЗнч(Сообщение) <> Тип("Структура") или Не ИспользуетсяРазграничениеПрав() Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если Сообщение.Свойство("ПлощадкаEDI") и 
		Сообщение.Свойство("ХозяйствующийСубъектEDI") Тогда
		ЕстьДоступ = ПроверитьДоступПользователя(Сообщение.ХозяйствующийСубъектEDI.GUID, Сообщение.ПлощадкаEDI.GUID, ложь).ЕстьДоступ;
	КонецЕсли;
	
	Если НЕ ЕстьДоступ и
		Сообщение.Свойство("ПлощадкаПолучательEDI") и 
		Сообщение.Свойство("ХозяйствующийСубъектПолучательEDI") Тогда
		ЕстьДоступ = ПроверитьДоступПользователя(Сообщение.ХозяйствующийСубъектПолучательEDI.GUID, Сообщение.ПлощадкаПолучательEDI.GUID, ложь).ЕстьДоступ;
	КонецЕсли;
	
	Возврат ЕстьДоступ;
	
КонецФункции

Функция ОчиститьСоответствиеНоменклатуры(Ссылка,GUID=Неопределено,НаименованиеМеркурий = Неопределено,ПартнерМеркурий=Неопределено,Коэффициент = неопределено,Производим = неопределено)
	
	Если ПартнерМеркурий = Неопределено Тогда 
		ПартнерМеркурий = ПартнерМеркурий();
	КонецЕсли;
	
	НаборЗаписейСоответствийТоваров = РегистрыСведений.КонтурEDI_СоответствияТоваров.СоздатьНаборЗаписей();
	
	НаборЗаписейСоответствийТоваров.Отбор.Партнер.Установить(ПартнерМеркурий);
	НаборЗаписейСоответствийТоваров.Отбор.Номенклатура.Установить(Ссылка);
	
	//Если ОсновнойМодуль.ИмяКонфигурации1С = "ТКПТ" Тогда
	//	ЕдиницаИзмерения = Ссылка.ОсновнаяЕдиницаИзмерения;
	//	
	//ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С = "ДалионУМ" Тогда
	//	ЕдиницаИзмерения = Ссылка.БазоваяЕдиницаИзмерения;		
	//
	//ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С = "УФ_БП" Тогда
	//	ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;
	//	
	//ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С = "УФ_УТ" Тогда
	//	ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;
	//	
	//ИначеЕсли НЕ ОсновнойМодуль.ИмяКонфигурации1С = "БП" Тогда
	//	ЕдиницаИзмерения = Ссылка.ЕдиницаХраненияОстатков;
	//	
	//Иначе
	//	ЕдиницаИзмерения = Ссылка.БазоваяЕдиницаИзмерения;
	//КонецЕсли;
	
	//НаборЗаписейСоответствийТоваров.Отбор.Единица.Установить(ЕдиницаИзмерения);
	
	Если НаборЗаписейСоответствийТоваров.Количество()=1 Тогда 
		НаборЗаписейСоответствийТоваров.Очистить();
		НаборЗаписейСоответствийТоваров.Записать();
		Возврат Истина;
	ИначеЕсли НаборЗаписейСоответствийТоваров.Количество()>1 Тогда
		Сообщить("По номенклатуре "+Ссылка+" множественное сопоставление. Зайдите в карточку сопоставления и отредактируйте вручную!");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НастройкиПродукцияПроизводителяСвязатьСтроки(СтрокаСИдентификаторами,СтрокаСНоменклатурой, ТаблицаПродукцияПроизводителя, ПлощадкаGUID)
	
	GUID = СтрокаСИдентификаторами.productItemGUID;
	UUID = СтрокаСИдентификаторами.productItemUUID;
	
	КаталогТоваровМеркурий_СохранитьСоответствиеПоНоменклатуре(СтрокаСНоменклатурой.Номенклатура
	,СтрокаСНоменклатурой.ХарактеристикаНоменклатуры
	,ПлощадкаGUID
	,GUID
	,UUID);

	НайденныеСтрокиТЗНоменклатура = ТаблицаПродукцияПроизводителя.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",СтрокаСНоменклатурой.Номенклатура,СтрокаСНоменклатурой.ХарактеристикаНоменклатуры));
	Если НайденныеСтрокиТЗНоменклатура.Количество()=0 Тогда 
		Возврат "Не удалось связать";
	КонецЕсли;
	НайденнаяСтрокаТЗНоменклатура = НайденныеСтрокиТЗНоменклатура[0]; 
	НайденнаяСтрокаТЗНоменклатура.productItemUUID = UUID;
	НайденнаяСтрокаТЗНоменклатура.productItemGUID = GUID;
	НайденнаяСтрокаТЗНоменклатура.АртикулМеркурий = СтрокаСИдентификаторами.АртикулМеркурий;
	НайденнаяСтрокаТЗНоменклатура.НаименованиеМеркурий = СтрокаСИдентификаторами.НаименованиеМеркурий;
	НайденнаяСтрокаТЗНоменклатура.subProductGuidМеркурий = СтрокаСИдентификаторами.subProductGuidМеркурий;
	НайденнаяСтрокаТЗНоменклатура.GTINМеркурий = СтрокаСИдентификаторами.GTINМеркурий;
	НайденнаяСтрокаТЗНоменклатура.GOSTМеркурий = СтрокаСИдентификаторами.GOSTМеркурий;
	НайденнаяСтрокаТЗНоменклатура.СоответствуетГОСТуМеркурий = СтрокаСИдентификаторами.СоответствуетГОСТуМеркурий;
	
	НайденнаяСтрокаproductItemGUIDМассив = ТаблицаПродукцияПроизводителя.НайтиСтроки(Новый Структура("productItemGUID, Номенклатура",GUID,Неопределено));
	Для Каждого НайденнаяСтрокаproductItemGUID Из НайденнаяСтрокаproductItemGUIDМассив Цикл
		ТаблицаПродукцияПроизводителя.Удалить(НайденнаяСтрокаproductItemGUID)
	КонецЦикла;
	Возврат "";
	
КонецФункции

Функция НастройкиПродукцияПроизводителяСвязатьВыделенные(ВыделенныеСтроки, ТаблицаПродукцияПроизводителя, ПлощадкаGUID) Экспорт
	
	Если ВыделенныеСтроки.Количество() = 2 Тогда 
		
		СтрокаСНоменклатурой = Неопределено;
		СтрокаСИдентификаторами = Неопределено;
		
		Для Каждого СтрокаКСвязванию Из ВыделенныеСтроки Цикл
			
			Если ЗначениеЗаполнено(СтрокаКСвязванию.Номенклатура) и СтрокаСНоменклатурой = Неопределено Тогда
				СтрокаСНоменклатурой = СтрокаКСвязванию;
			ИначеЕсли ЗначениеЗаполнено(СтрокаКСвязванию.Номенклатура) и СтрокаСНоменклатурой <> Неопределено Тогда
				Возврат "Только в одной из связываемых строк должна быть номенклатура";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаКСвязванию.productItemGUID) и СтрокаСИдентификаторами = Неопределено Тогда
				СтрокаСИдентификаторами = СтрокаКСвязванию;
			ИначеЕсли ЗначениеЗаполнено(СтрокаКСвязванию.productItemGUID) и СтрокаСИдентификаторами <> Неопределено Тогда
				Возврат "Только в одной из связываемых строк должны быть идентификаторы";
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаСИдентификаторами <> СтрокаСНоменклатурой и СтрокаСНоменклатурой <> Неопределено и СтрокаСИдентификаторами <> Неопределено  Тогда 
			///////////////////////////////////////////////////////////////////////////////////////
			Результат = НастройкиПродукцияПроизводителяСвязатьСтроки(СтрокаСИдентификаторами,СтрокаСНоменклатурой, ТаблицаПродукцияПроизводителя, ПлощадкаGUID);
			Если ЗначениеЗаполнено(Результат) Тогда
				Возврат Результат;
			КонецЕсли;
			///////////////////////////////////////////////////////////////////////////////////////
		Иначе
			Возврат "Неподходящие строки для связывания"
		КонецЕсли;
		
	Иначе
		Возврат "Связать можно только 2 выделенных строки";
	КонецЕсли;

	Возврат "";
	
КонецФункции

Процедура НастройкиПродукцияПроизводителяЗабытьВыделенные(ВыделенныеСтроки, ТаблицаПродукцияПроизводителя, ПлощадкаGUID) Экспорт
	
	Для Каждого СтрокаСНоменклатурой Из ВыделенныеСтроки Цикл
		КаталогТоваровМеркурий_ОчиститьСоответствиеПоНоменклатуре(СтрокаСНоменклатурой.Номенклатура
																	,СтрокаСНоменклатурой.ХарактеристикаНоменклатуры
																	,ПлощадкаGUID);
		
		НоваяСтрока = ТаблицаПродукцияПроизводителя.Добавить();
		
		НоваяСтрока.productItemUUID = СтрокаСНоменклатурой.productItemUUID;
		НоваяСтрока.productItemGUID = СтрокаСНоменклатурой.productItemGUID;
		НоваяСтрока.АртикулМеркурий = СтрокаСНоменклатурой.АртикулМеркурий;
		НоваяСтрока.НаименованиеМеркурий = СтрокаСНоменклатурой.НаименованиеМеркурий;
		НоваяСтрока.subProductGuidМеркурий = СтрокаСНоменклатурой.subProductGuidМеркурий;
		НоваяСтрока.GTINМеркурий = СтрокаСНоменклатурой.GTINМеркурий;
		НоваяСтрока.GOSTМеркурий = СтрокаСНоменклатурой.GOSTМеркурий;
		НоваяСтрока.СоответствуетГОСТуМеркурий = СтрокаСНоменклатурой.СоответствуетГОСТуМеркурий;
		
		СтрокаСНоменклатурой.productItemUUID = "";
		СтрокаСНоменклатурой.productItemGUID = "";
		СтрокаСНоменклатурой.АртикулМеркурий = "";
		СтрокаСНоменклатурой.НаименованиеМеркурий = "";
		СтрокаСНоменклатурой.subProductGuidМеркурий = "";
		СтрокаСНоменклатурой.GTINМеркурий = "";
		СтрокаСНоменклатурой.GOSTМеркурий = "";
		СтрокаСНоменклатурой.СоответствуетГОСТуМеркурий = "";
	КонецЦикла;
	
КонецПроцедуры

Функция ВыделенныеСтрокиВМассив(УпрФорма, ИмяТаблицы) Экспорт//чтобы ВыделенныеСтроки УФ использовать в механизмах для ОФ (Для Каждого Строка Из ВыделенныеСтроки)
	ВыделенныеСтроки = УпрФорма.Элементы[ИмяТаблицы].ВыделенныеСтроки;
	МассивСтрок = Новый Массив;
	Для Каждого ТекИД из ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(УпрФорма[ИмяТаблицы].НайтиПоИдентификатору(ТекИд));
	КонецЦикла;
	Возврат МассивСтрок;
КонецФункции

Процедура СообщениеУстановитьВидимостьДоступностьКолонокТЧ(Элементы, Сообщение) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Сообщение", Сообщение);
	
	УстановитьВидимостьДоступностьКолонокТЧ(Элементы, "Товары", Ложь, ДопПараметры);
	
	////патч расположения, чтобы не было 3-х строк в строке таб. части Товары
	////намножко подкрутили - кнопка печати переехала в номер строки все стало гуд без этого костылика
	//КолонкиТовары = Элементы.Товары.Колонки;
	//Если Не КолонкиТовары.ИсходнаяПартияНомер.Видимость Тогда
	//	КолонкиТовары.guid.Положение 		= ПоложениеКолонки.НоваяКолонка;
	//	Если Не КолонкиТовары.КодТовараПокупателя.Видимость Тогда // Придвинем колонку к колонке GTIN, как было раньше
	//		КолонкиТовары.Сдвинуть(КолонкиТовары.guid,КолонкиТовары.Индекс(КолонкиТовары.GTIN)-КолонкиТовары.Индекс(КолонкиТовары.guid)-1);
	//		КолонкиТовары.GTIN.Положение 	= ПоложениеКолонки.НаСледующейСтроке; // GTIN теперь под GUID'ом
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ХСУстановитьВидимостьГиперссылкиПодробнее(Форма, ЭлементыФормы)

	Если Форма.ТипОбъекта = "Площадка" Тогда
		
		ЭлементыФормы.ХСподробнее.Видимость = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Форма.ХСВладелецGUID) Тогда 
			ЭлементыФормы.ХСВладелецподробнее.Видимость = Ложь;
		Иначе
			ЭлементыФормы.ХСВладелецподробнее.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Форма.GUID) Тогда 
			ЭлементыФормы.ХСподробнее.Видимость = Ложь;
		Иначе
			ЭлементыФормы.ХСподробнее.Видимость = Истина;
		КонецЕсли;
		
		ЭлементыФормы.ХСВладелецподробнее.Видимость = Ложь;

	КонецЕсли;
	
КонецПроцедуры

Функция ПустаяТаблицаДляВСД()
	
	//это ключевая таблица группировки ВСД по документам ПТУ а также соотнесения со списком ТД
	ТаблицаВСД = Новый ТаблицаЗначений();
	//ТаблицаВСД.Колонки.Добавить("НомерВСД");     вот жалко им что ли было сразу номер отдать!
	
	//первичный ключ
	ТаблицаВСД.Колонки.Добавить("ВсдUUID",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
	
//Метка Свертка	
	//по этим полям следует группировать ВСД по накладным дефлтом
	ТаблицаВСД.Колонки.Добавить("ДатаВСД",Новый ОписаниеТипов("Дата", , ,
	Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	ТаблицаВСД.Колонки.Добавить("НомерТТН",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(70, ДопустимаяДлина.Переменная)));
	
	ТаблицаВСД.Колонки.Добавить("ДатаТТН",Новый ОписаниеТипов("Дата", , ,
	Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	ТаблицаВСД.Колонки.Добавить("НомерМашины",Новый ОписаниеТипов("Строка", , ,
	Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	
	ТаблицаВСД.Колонки.Добавить("ТипТранспорта",Новый ОписаниеТипов("Строка", , ,
	Новый КвалификаторыСтроки(1, ДопустимаяДлина.Переменная)));
	
	ТаблицаВСД.Колонки.Добавить("ФормаДокумента",Новый ОписаниеТипов("Строка", , ,
	Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	
	ТаблицаВСД.Колонки.Добавить("Тип",Новый ОписаниеТипов("Строка", , ,
	Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	
	ТаблицаВСД.Колонки.Добавить("Статус",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)));
	
	ТаблицаВСД.Колонки.Добавить("ПлощадкаПолучательGUID",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
	
	//сам ВСД
	ТаблицаВСД.Колонки.Добавить("_ОбъектXDTO");
	
	Возврат ТаблицаВСД;
	
КонецФункции

Функция ПолучитьВсеОформленныеВСДПлощадки(GUIDПлощадки,ВычиталиВсеОформленные)
	
	ТаблицаВСД = ПустаяТаблицаДляВСД();
	
	Смещение = 0;
	ВсегоСтрок = 1;
	Прочитали = 0;
	ВсеВычитанныеВСД_XDTO = Новый Массив;
	
	Результат = Новый Структура("ТаблицаВСД",ТаблицаВСД);

	Пока Прочитали<ВсегоСтрок Цикл
		
		ОтветWeb = СписокВходящихОформленныхВСДМеркурий(GUIDПлощадки,Смещение);
		
		Если ОтветWeb<>Неопределено и ОтветWeb.result.getVetDocumentListResponse.vetDocumentList.count <> "0" Тогда
			СписокВСДXDTO = ОтветWeb.result.getVetDocumentListResponse.vetDocumentList.vetDocument;
			
			ДополнитьТаблицуПоВходящимВСДИзФрагментаОтвета(Результат.ТаблицаВСД,СписокВСДXDTO);
			
			ВсегоСтрок = Число(ОтветWeb.result.getVetDocumentListResponse.vetDocumentList.total);
			Прочитали = Смещение+Число(ОтветWeb.result.getVetDocumentListResponse.vetDocumentList.count);
			Смещение = Прочитали;  //для нового запроса
			Если Прочитали>=ВсегоСтрок Тогда 
				ВычиталиВсеОформленные = Истина;
			КонецЕсли;
		Иначе
			Сообщить("Не смог полностью вычитать входящие элВСД");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИзмененияВСДЗаПериод(GUIDПлощадки,ДатаС,ДатаПо=Неопределено)
	
	ТаблицаВСД = ПустаяТаблицаДляВСД();
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(,GUIDПлощадки);
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("Наименование", 		"getVetDocumentChangesListRequest");
	ПараметрыФункции.Вставить("initiator", 			ПараметрыПодключения.user);
	ПараметрыФункции.Вставить("enterpriseGuid",		GUIDПлощадки);
	ПараметрыФункции.Вставить("localTransactionId", "IncomingRobot");
	DateInterval = ПолучитьОбъектXDTOМеркурий("Общие", "DateInterval");
	
	DateInterval.beginDate = ДатаС - СмещениеЧасовОтМосквы*3600;
	//всегда будем спрашивать на тек дату
	//DateInterval.endDate = Формат(ДатаПо, "ДФ=yyyy-MM-ddTЧЧ:мм:сс")+НашЧасовойпоясПостфикс;
	ПараметрыФункции.Вставить("updateDateInterval", DateInterval);
	
	Смещение = 0;
	
	ВсеВычитанныеВСД_XDTO = Новый Массив();
	Результат = Новый Структура("ТаблицаВСД",ТаблицаВСД);
	
	//Вычитываем все записи журнала
	Пока Истина Цикл
		ПараметрыПодключения.ListOptions.offset = Смещение;
		ПараметрыФункции.Вставить("listOptions", ПараметрыПодключения.ListOptions);		
		//Дожидаться результата
		ОтветXDTO = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "getVetDocumentChangesListRequest", Истина);
		Если ТипЗнч(ОтветXDTO) <> Тип("ОбъектXDTO") Тогда 
			Прервать;
			Возврат Результат;
		КонецЕсли;
		
		ОтветСписокВСДTO = ОтветXDTO.result.getVetDocumentChangesListResponse.vetDocumentList;
		
		Если Число(ОтветСписокВСДTO.Count) = 0 Тогда 
			Прервать;
			Возврат Результат;
		КонецЕсли;
		
		//Обработка строк	
		/////////////////////////////////////////////////////////////////
		Если Число(ОтветСписокВСДTO.total) = 0 Тогда
			Возврат Результат;
		ИначеЕсли Число(ОтветСписокВСДTO.total) = 1 Тогда
			ЕдинственнаяСтрока = ОтветСписокВСДTO.vetDocument;
			СписокvetDocument = Новый Массив;
			СписокvetDocument.Добавить(ЕдинственнаяСтрока);
		Иначе
			СписокvetDocument = ОтветСписокВСДTO.vetDocument;
		КонецЕсли;
		
		ДополнитьТаблицуПоВходящимВСДИзФрагментаОтвета(Результат.ТаблицаВСД,СписокvetDocument);			
		
		///////////////////////////////////////////////////////////////	
		
		Если Число(ОтветСписокВСДTO.Count) + Смещение >= Число(ОтветСписокВСДTO.Total) Тогда 
			Прервать; 
		КонецЕсли;
		Смещение = Смещение + ПараметрыПодключения.ListOptions.Count;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьВСДИЗаполнитьСообщение(GUIDПлощадки,ИдентификаторыСверткиТТН,ТаблицаВСД)
	
	Если ИдентификаторыСверткиТТН.НомерТТН = "" Тогда 
		НайденныеВСД =  ТаблицаВСД.НайтиСтроки(Новый структура("ВсдUUID",ИдентификаторыСверткиТТН.ВсдUUID));
	Иначе
		НайденныеВСД =  ТаблицаВСД.НайтиСтроки(Новый структура("НомерТТН",ИдентификаторыСверткиТТН.НомерТТН));
	КонецЕсли;
	
	//СтрокиВСДXDTO=ПолучитьСтрокиВСДXDTOПоТТН(GUIDПлощадки,НайденныеВСД);
	
	
	
	////Завернуть на существующую
	////это ключи по которым была свертка (3 шт.)
	//Сообщение.ДокументEDI.Номер = ВычислитьXDTO(ИсточникДляШапки,"waybillNumber");
	//Сообщение.ДокументEDI.Дата = ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(ИсточникДляШапки,"waybillDate"));
	//Сообщение.ДатаПоставки = ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(ИсточникДляШапки,"issueDate"));
	//
	//
	//Сообщение.Партнер = ПартнерМеркурий();
	//Сообщение.Статус = "Оформлен";
	//Сообщение.ПлощадкаEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.enterprise.guid");
	//Сообщение.ПлощадкаEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.enterprise.uuid");
	//Сообщение.ПлощадкаПолучательEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.enterprise.guid");
	//Сообщение.ПлощадкаПолучательEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.enterprise.uuid");
	//
	//Сообщение.ХозяйствующийСубъектEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.businessEntity.guid");
	//Сообщение.ХозяйствующийСубъектEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.businessEntity.uuid");
	//Сообщение.ХозяйствующийСубъектПолучательEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.businessEntity.guid");
	//Сообщение.ХозяйствующийСубъектПолучательEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.businessEntity.uuid");
	////следует сразу сконвертировать в Организацию  т.к. этоn реквизит поеltn в реквизит справочника
	//Сообщение.Организация 	= КонвертироватьЗначениеМеркурийв1C(Сообщение.ХозяйствующийСубъектПолучательEDI.GUID,,"МеркурийХС");
	//
	////transportInfo
	//Сообщение.Транспорт.ВидТранспорта = ВычислитьXDTO(ИсточникДляШапки,"transportInfo.transportType");	
	//Сообщение.Транспорт.НомерТранспортногоСредства = ВычислитьXDTO(ИсточникДляШапки,"transportInfo.transportNumber.vehicleNumber");	
	//Сообщение.Транспорт.СпособХраненияПриПеревозке = ВычислитьXDTO(ИсточникДляШапки,"transportStorageType");
	//
	//Если ТипЗнч(СтрокиВСДXDTO) = Тип("ОбъектXDTO") Тогда
	//	СтрокаТоваровXDTO = СтрокиВСДXDTO;
	//		НоваяСтрокаТоваровСообщения = Сообщение.Товары.Добавить();
	//		НоваяСтрокаТоваровСообщения.НомерСтроки = 1;
	//		ЗаполнитьСтрокуСообщенияИзXDTO(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO);
	//ИначеЕсли ТипЗнч(СтрокиВСДXDTO) = Тип("СписокXDTO")
	//	ИЛИ ТипЗнч(СтрокиВСДXDTO) = Тип("Массив") Тогда
	//	й=0;
	//	Для Каждого СтрокаТоваровXDTO Из СтрокиВСДXDTO Цикл
	//		//здесь также будут прилетать ВСД которые в данный момент не нужны (например, уничтожение исходных партий)
	//		//Такие ВСД следует пропустить
	//		Если ТипСообщения = "M_DES" Тогда
	//			Если СтрокаТоваровXDTO.type <> "TRANSPORT" Тогда
	//				Продолжить;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		й=й+1;
	//		НоваяСтрокаТоваровСообщения = Сообщение.Товары.Добавить();
	//		НоваяСтрокаТоваровСообщения.НомерСтроки = й;
	//		ЗаполнитьСтрокуСообщенияИзXDTO(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO);
	//	КонецЦикла;
	//КонецЕсли;
	
КонецФункции // КонвертироватьВходящийВСД_EDI_В_1С()

Процедура УдалитьТранзакциюМеркурий(Сообщение) Экспорт

	ОсновнойМодуль.УдалитьСообщение(Сообщение);

КонецПроцедуры

Функция ПолучитьТаблицуНашихПлощадок() Экспорт
	
	Площадки = ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийПлощадка");
	НашиПлощадки = Площадки.Скопировать();
	НашиПлощадки.Очистить();
	Для Каждого СтрПлощадка из Площадки Цикл
		Если СтрПлощадка.Наш = Истина Тогда
			НоваяСтр = НашиПлощадки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр,СтрПлощадка);
		КонецЕсли;
	КонецЦикла;
    Возврат НашиПлощадки;
	
КонецФункции

Функция СписокФормВСД() Экспорт
	
	//http://help.vetrf.ru/wiki/VetDocumentForm
	
	Список = Новый СписокЗначений();
	//наиболее частые
	Список.Добавить("LIC2", "Ф. 2 свидетельства. Оформляется на сырьё животного происхождения.");
	Список.Добавить("NOTE4", "Ф. 4 справки. Оформляется при перевозке любого вида продукции внутри одного района.");
	
	Список.Добавить("CERTCU1", "Ф. 1 сертификата ТС.");
	Список.Добавить("LIC1", "Ф. 1 свидетельства. Оформляется на живых животных, биологические объекты (генетически материал).");
	Список.Добавить("CERTCU2", "Ф. 2 сертификата ТС.");
	Список.Добавить("CERTCU3", "Ф. 3 сертификата ТС.");
	Список.Добавить("LIC3", "Ф. 3 свидетельства. Оформляется на техническое сырьё; корма; биологические отходы");
	Список.Добавить("CERT5I", "Ф. 5i сертификата.");
	Список.Добавить("CERT61", "Ф. 6.1 сертификата.");
	Список.Добавить("CERT62", "Ф. 6.2 сертификата.");
	Список.Добавить("CERT63", "Ф. 6.3 сертификата.");
	
	Возврат Список;
	
КонецФункции

Функция СписокВариантовВетСертификатЭкспертиза() Экспорт
	
	Список = Новый СписокЗначений();
	//http://help.vetrf.ru/wiki/ResearchResult_v2.0
	//здесь выбраны только те что могут быть в ВСД
	Список.Добавить("UNFULFILLED", "Не проводилось.");
	Список.Добавить("VSERAW", "Сырьё подвергнуто ВСЭ (из которого произведена продукция).");
	Список.Добавить("VSEFULL", "Продукция подвергнута ВСЭ в полном объеме.");
	
	Возврат Список;
	
КонецФункции

//мы можем получить от Меркурия определенные новости о том что нам необходимо сделать
//например может прийти ошибка что мы пытались отправить устаревшую UUID - 
//тогда нам надо предпринять определенные действия по исправлению
Процедура ОбработатьСпецифическиеОшибкиМеркурия(Сообщение,ОписаниеОшибки,СообщениеСсылка) Экспорт
	
		
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Сообщение)<>Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	//Проверки
	
	//Проверка того что устарел ProducItemUUID по строке товаров
	Если Найти(ОписаниеОшибки,"MERC15023")<>0  Тогда
		АвтоматическиОбработатьОшибкуProducItemUUID(Результат,Сообщение,ОписаниеОшибки,СообщениеСсылка,"MERC15023");
	КонецЕсли;
	Если Найти(ОписаниеОшибки,"MERC14023")<>0  Тогда
		АвтоматическиОбработатьОшибкуProducItemUUID(Результат,Сообщение,ОписаниеОшибки,СообщениеСсылка,"MERC14023");
	КонецЕсли;
	
	Если Результат.ТаблицаОшибок.Количество()>0 Тогда 
		Сообщить("При автоматической обработке ошибок случилась нештатная ситуация:");
		Для каждого Ошибка Из Результат.ТаблицаОшибок Цикл
			Сообщить(Ошибка.ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура АвтоматическиОбработатьОшибкуProducItemUUID(Результат,Сообщение,ОписаниеОшибки,СообщениеСсылка,КодОшибки)
	
	УспешныеЗамены = Истина;
	//следует обновить в сообщении все ProducItemUUID
	Если Сообщение.Свойство("Товары") Тогда
		Для Каждого СтрокаТоваров Из Сообщение.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТоваров.productItemUUID) Тогда 
				Попытка
					АнализproductItemUUID = ПолучитьСамуюСвежую_productItemUUID_ПоUUID(СтрокаТоваров.productItemUUID);
					Если АнализproductItemUUID.Успешно Тогда
						Если АнализproductItemUUID.Активен = Истина Тогда
							СтрокаТоваров.productItemUUID = АнализproductItemUUID.ПоследнийUUID;
						Иначе
							СтрокаТоваров.productItemUUID = "";
							СтрокаТоваров.Наименование = АнализproductItemUUID.Наименование;
						КонецЕсли;
					КонецЕсли;
				Исключение
					УспешныеЗамены = Ложь;
					Ошибка = Результат.ТаблицаОшибок.Добавить();
					Ошибка.ТекстОшибки = КодОшибки+" Не смог обновить productItemUUID";
					//тогда проще вообще очистить его
					СтрокаТоваров.productItemUUID = "";
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//Сохранить это сообщение с модернизированным productItemUUID
	Если Найти(ОписаниеОшибки,"Уже исправлено автоматически("+КодОшибки+")")=0 И ЗначениеЗаполнено(СообщениеСсылка) Тогда 
		ОбъектСообщения = СообщениеСсылка.ПолучитьОбъект();
		ОбъектСообщения.ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки,КодОшибки,"Уже исправлено автоматически("+КодОшибки+")");
		ОбъектСообщения.Хранилище = Новый ХранилищеЗначения(Сообщение,Новый СжатиеДанных(9));
		ОбъектСообщения.Записать();
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗапомнитьUUIDиGUIDНоменклатуры(СтрокаТаблицыПродукции,Ответ,GUIDПлощадки,ПлощадкаПроизводитель)
		
		//запомнить UUID
		Если Ответ.status = "REJECTED" Тогда
			Сообщить("Не удалось опубликовать");
			Возврат;
		КонецЕсли;
		
		ОтветСписокТоваровXDTO = Ответ.result.modifyProducerStockListResponse.productItemList;
		
		Если ОтветСписокТоваровXDTO.Count = 0 Тогда 
			Возврат; 
		КонецЕсли;
		
		UUIDНовойЗаписи ="";
		
		СтрокиТовара = ОтветСписокТоваровXDTO.productItem;
		
		Если ТипЗнч(СтрокиТовара) = Тип("ОбъектXDTO") Тогда
			ВремМассив = Новый Массив;
			ВремМассив.Добавить(СтрокиТовара);
			КоллекцияРезультата = ВремМассив;
		Иначе
			КоллекцияРезультата = СтрокиТовара;
		КонецЕсли;
		
		ЕстьАктивнаяПозиция = Ложь;
		Для Каждого СтрокаТовара Из КоллекцияРезультата Цикл
			//Не подходят не активные строки и с плохим статусом: (http://help.vetrf.ru/wiki/VersionStatus)
			Если НРег(СтрокаТовара.active)<>"true" 
				ИЛИ СтрокаТовара.status = "400" ИЛИ СтрокаТовара.status = "410" ИЛИ СтрокаТовара.status = "420" ИЛИ СтрокаТовара.status = "430" ИЛИ СтрокаТовара.status = "201" Тогда 
				Продолжить;
			КонецЕсли;
			ЕстьАктивнаяПозиция = Истина;
			UUIDЗаписи = СтрокаТовара.uuid;
			GUIDЗаписи = СтрокаТовара.guid;
		КонецЦикла;
		
		Если ЕстьАктивнаяПозиция Тогда// ТипОперацииСТоваром <> "DELETE" Тогда
			//непосредственно запоминание
			
			КаталогТоваровМеркурий_СохранитьСоответствиеПоНоменклатуре(СтрокаТаблицыПродукции.Номенклатура
				,СтрокаТаблицыПродукции.ХарактеристикаНоменклатуры
				,GUIDПлощадки
				,GUIDЗаписи
				,UUIDЗаписи);
			
			СтрокаТаблицыПродукции.productItemUUID = UUIDЗаписи;
			СтрокаТаблицыПродукции.productItemGUID = GUIDЗаписи;
			
			//заполним в табличке
			//СтрокаТаблицыПродукции.Артикул = СтрокаТовара.code;
			СтрокаТаблицыПродукции.НаименованиеМеркурий = СтрокаТовара.name;
			СтрокаТаблицыПродукции.GOSTМеркурий = ОсновнойМодуль.ПолучитьЗначениеСвойстваXDTO(СтрокаТовара,"GOST");
			СтрокаТаблицыПродукции.subProductGuidМеркурий = СтрокаТовара.subProduct.Guid;
			СтрокаТаблицыПродукции.productItemUUID = СтрокаТовара.UUID;
			СтрокаТаблицыПродукции.productItemGUID = СтрокаТовара.GUID;
		Иначе 
			//забыть
			КаталогТоваровМеркурий_ОчиститьСоответствиеПоНоменклатуре(СтрокаТаблицыПродукции.Номенклатура
				,СтрокаТаблицыПродукции.ХарактеристикаНоменклатуры
				,GUIDПлощадки);
		КонецЕсли;
	
КонецПроцедуры

Функция ЗапроситьСведенияО_productItem_ПоUUID(UUID) Экспорт
	
	РезультатФункции = Новый Структура("Успешно,Найден,Активен,НоваяВерсияUUID,GUID,UUID,Наименование,subProductGUID,Артикул,ГОСТ,СоответствуетГОСТ");
	Попытка
		ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю сведения о товаре "+UUID);
		Прокси = ПолучитьWSПроксиСправочникПродукции();
		Ответ = Прокси.GetProductItemByUuid(UUID);
		
		Если ТипЗнч(Ответ) = тип("ОбъектXDTO") Тогда 
			РезультатФункции.Найден = Истина;
			РезультатФункции.Успешно = Истина;
			РезультатФункции.Активен = ВычислитьXDTO(Ответ,"active");
			РезультатФункции.НоваяВерсияUUID = ВычислитьXDTO(Ответ,"next");
			РезультатФункции.GUID = ВычислитьXDTO(Ответ,"guid");
			РезультатФункции.UUID = ВычислитьXDTO(Ответ,"uuid");
			РезультатФункции.Наименование = ВычислитьXDTO(Ответ,"name");
			РезультатФункции.subProductGUID = ВычислитьXDTO(Ответ,"subProduct.GUID");
			РезультатФункции.Артикул = ВычислитьXDTO(Ответ,"code");
			РезультатФункции.ГОСТ = ВычислитьXDTO(Ответ,"GOST");
			РезультатФункции.СоответствуетГОСТ = ВычислитьXDTO(Ответ,"correspondtoGOST");
			
		Иначе
			РезультатФункции.Успешно = Ложь;
		КонецЕсли;
		
	Исключение
		ОсновнойМодуль.Сообщить_КонтурEDI(ОписаниеОшибки());
		РезультатФункции.Успешно = Ложь;
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции // ЗапроситьСведенияОproductItem()

Функция ПолучитьПредставлениеsubProductGUID(subProductGUID) Экспорт
	
	НайденноеИмяМеркурий = ТаблицаПродукцииВетис().Найти(subProductGUID,"subProductGUID");
	
	Если Значениезаполнено(НайденноеИмяМеркурий) Тогда
		Представление = ""+НайденноеИмяМеркурий.Код+" "+НайденноеИмяМеркурий.НаименованиеВидаПродукции+" ("+subProductGUID+")";
	Иначе
		Представление = "("+subProductGUID+")";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции // ПолучитьПредставлениеsubProductGUID()

Функция ПолучитьСамуюСвежую_productItemUUID_ПоUUID(ЗНАЧ UUID) Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	Результат.Вставить("ПоследнийUUID");
	Результат.Вставить("ПереданныйЯвляетсяПоследним");
	Результат.Вставить("Наименование");
	Результат.Вставить("Активен");
	
	ЕстьСвежее = Истина;
	ТекUUID = UUID;
	Пока ЕстьСвежее Цикл
		ТекВерсия = ЗапроситьСведенияО_productItem_ПоUUID(ТекUUID);
		Если ТекВерсия.Успешно = Истина Тогда
			Если ТекВерсия.НоваяВерсияUUID = Неопределено Тогда 
				//перед нами актуальный
				ЕстьСвежее = Ложь;
				Результат.Активен = ТекВерсия.Активен;
				Результат.ПоследнийUUID = ТекUUID;
				Результат.Наименование = ТекВерсия.Наименование;
				Результат.ПереданныйЯвляетсяПоследним = (ТекUUID = UUID);
				Результат.Успешно = Истина;
			Иначе
				//поищем дальше
				ТекUUID = ТекВерсия.НоваяВерсияUUID;
			КонецЕсли;
		Иначе 
			Результат.Успешно = Ложь;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТолькоЦифрыВСтроке_КонтурEDI(СтрокаПроверки)
	
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			СокрЛП(СтрокаПроверки), "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")
	) = 0;

КонецФункции


//заголовки
Функция ПолучитьНомерРелиза_КонтурEDI() Экспорт
	               
	Возврат "M8.03.076b";
	
КонецФункции

Функция СовместимСМодулемEDI(НомерВерсииEDI) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ПродолжитьЗапуск",Истина);
	Результат.Вставить("ТекстОшибки","");
	
	СовместимРедакцияEDI 	= 3;     //минимум "4.03.022.020" (подключение из Вш. обр. или из конфы. )
	СовместимВыпускEDI 		= 22;
	СовместимСборкаEDI 		= 20;
	
	//и теперь собственно проверки
	Попытка
		НомерРедакцииEDI = Число(Сред(НомерВерсииEDI,3,2));
		НомерВыпускаEDI = Число(Сред(НомерВерсииEDI,6,3));
		НомерСборкиEDI = 1;
	Исключение
		Результат.ПродолжитьЗапуск = Ложь;
		Результат.ТекстОшибки = "Не смог определить версию модуля EDI. Модуль Меркурий не может быть подключен. Требуется версия модуля EDI не менее: 4."+Формат(СовместимРедакцияEDI,"ЧЦ=2; ЧВН=")+"."+Формат(СовместимВыпускEDI,"ЧЦ=3; ЧВН=")+"."+Формат(СовместимСборкаEDI,"ЧЦ=3; ЧВН=");
		Возврат Результат;
	КонецПопытки;
	
	ЗапустилиСтарую = Ложь;
	
	Если НомерРедакцииEDI < СовместимРедакцияEDI Тогда
		ЗапустилиСтарую = Истина;				
	ИначеЕсли (НомерРедакцииEDI=СовместимРедакцияEDI) и (НомерВыпускаEDI < СовместимВыпускEDI) Тогда
		ЗапустилиСтарую = Истина;
	Иначе
		Если (НомерРедакцииEDI=СовместимРедакцияEDI) и (НомерВыпускаEDI=СовместимВыпускEDI) Тогда
			
			Если ТолькоЦифрыВСтроке_КонтурEDI(СтрЗаменить(НомерСборкиEDI,"b","")) тогда
				НомерСборкиEDI = Сред(НомерВерсииEDI,10);
				НомерСборкиEDI = СтрЗаменить(НомерСборкиEDI,"b",""); //уберем признак бэта версии
				НомерСборкиEDI = Число(НомерСборкиEDI);
			КонецЕсли;
			
			Если (НомерСборкиEDI < СовместимСборкаEDI)  Тогда
				ЗапустилиСтарую = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапустилиСтарую Тогда
		Результат.ПродолжитьЗапуск = Ложь;
		Результат.ТекстОшибки = "Модуль Меркурий не может быть подключен. Требуется версия модуля EDI не менее: 4."+Формат(СовместимРедакцияEDI,"ЧЦ=2; ЧВН=")+"."+Формат(СовместимВыпускEDI,"ЧЦ=3; ЧВН=")+"."+Формат(СовместимСборкаEDI,"ЧЦ=3; ЧВН=");
		Возврат Результат;	
	КонецЕсли;
	
	//Если (НЕ ПриветствиеЕстьНеобходимыеМетаданные("РегистрыСведений.КонтурМеркурий_КаталогПродукции")) 
	//	ИЛИ Метаданные.РегистрыСведений.КонтурМеркурий_КаталогПродукции.Измерения.Найти("ПлощадкаGUID") = Неопределено Тогда
	//	МеркурийРегистрКаталогПродукцииДобавлен = Ложь;
	//Иначе
	//	МеркурийРегистрКаталогПродукцииДобавлен = Истина;
	//КонецЕсли;
	//
	//Если МеркурийРегистрКаталогПродукцииДобавлен = Ложь Тогда
	//	Результат.ПродолжитьЗапуск = Ложь;
	//	Результат.ТекстОшибки = "Необходимо обновить объекты Контур. Запустите интерактивно модуль Контур.Меркурий , сохраните cf и обновите объекты хранения.";
	//	Возврат Результат;	
	//КонецЕсли;
	//ДлинаКодаТовара36Символов = Ложь;	//решено убрать и оставить только в форме приветствия Меркурия
	//ДлинаРеквизитаКодТовара=35;
	//Попытка
	//	Выполнить("ДлинаРеквизитаКодТовара=Метаданные.РегистрыСведений.КонтурEDI_СоответствияТоваров.Ресурсы.КодТовараПартнера.Тип.КвалификаторыСтроки.Длина");
	//	Если ДлинаРеквизитаКодТовара >=36 Тогда
	//		ДлинаКодаТовара36Символов = Истина;
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	ДлинаКодаТовара36Символов = Истина;	
	
	Если ДлинаКодаТовара36Символов <> истина Тогда
		Результат.ПродолжитьЗапуск = Ложь;
		Результат.ТекстОшибки = "Модуль Меркурий не может быть подключен так как длина реквизита регистра сведений ""КонтурEDI_СоответствияТоваров.КодТовараПартнера"" менее 36 символов. Откройте Конфигуратор, увеличьте его длину до 36 и обновите конфигурацию.";
		Возврат Результат;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Особые благодарности
// MegaBrain за огромное количество полезных правок. 

//Благодарности


