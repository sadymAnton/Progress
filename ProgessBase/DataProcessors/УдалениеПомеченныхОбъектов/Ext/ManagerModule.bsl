
// Возвращает помеченные на удаление объекты. Возможен отбор по фильтру.
//
Функция ПолучитьПомеченныеНаУдаление() Экспорт
	
	МассивПомеченные = НайтиПомеченныеНаУдаление();
	
	Результат = Новый Массив;
	Для Каждого ЭлементПомеченный Из МассивПомеченные Цикл
		Если ПравоДоступа("ИнтерактивноеУдалениеПомеченных", ЭлементПомеченный.Метаданные()) Тогда
			Результат.Добавить(ЭлементПомеченный);
		КонецЕсли
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция удаления объектов помеченных на удаление
// Параметры:
// Удаляемые - Массив - ссылки на объекты, которые требуется удалить
// ПроверятьСсылочнуюЦелостность - требуется проверка ссылочной целостности
//									если Истина, объекты на которые есть ссыки в ИБ
//									не будут удалены, а будут возвращены как результат функции
//
// Возвращаемое значение
// таблица значений, характеризующая ссылки на удаляемые объекты
//
Функция УдалитьПомеченныеОбъекты(знач Удаляемые, ТипыУдаленныхОбъектовМассив) Экспорт
	
	МонопольныйДоступ = Ложь;
	
	Попытка
		Если Не МонопольныйРежим() Тогда
			УстановитьМонопольныйРежим(Истина);
		КонецЕсли;
		МонопольныйДоступ = МонопольныйРежим();
	Исключение
		Возврат ЗаполнитьСтатусОперации(НСтр("ru = 'Не удалось установить монопольный режим'"), Ложь);
	КонецПопытки;
	
	ТипыУдаленныхОбъектов = ПолучитьТаблицуТиповУдаляемыхОбъектов();
	ОбновитьТаблицуТиповУдаляемыхОбъектов(ТипыУдаленныхОбъектов, Удаляемые);
	
	Найденные = Новый ТаблицаЗначений;
	НеУдаленные = Новый Массив;
	
	Найденные.Колонки.Добавить("Ссылка");
	Найденные.Колонки.Добавить("Данные");
	Найденные.Колонки.Добавить("Метаданные");
	
	УдаляемыеОбъекты = Новый Массив;
	Для Каждого СсылкаНаОбъект Из Удаляемые Цикл
		УдаляемыеОбъекты.Добавить(СсылкаНаОбъект);
	КонецЦикла;
	
	ИсключенияПоискаСсылок = ОбщегоНазначения.ПолучитьОбщийСписокИсключенийПоискаСсылок();

	Пока УдаляемыеОбъекты.Количество() > 0 Цикл
		НайденныеДанные = Новый ТаблицаЗначений;
		
		// пробуем удалить с контролем
		Попытка
			УдалитьОбъекты(УдаляемыеОбъекты, Истина, НайденныеДанные);
		Исключение
			СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			УстановитьМонопольныйРежим(Ложь);
			Возврат ЗаполнитьСтатусОперации(СообщениеОбОшибке, Ложь);
		КонецПопытки;	
		
		// запоминаем количество ссылок на удаление
		КоличествоУдаляемыхОбъектов = УдаляемыеОбъекты.Количество();
		
		// исключаем из списка на удаление объекты со связями не подпадающими под исключение
		Для Каждого СтрокаТаблицы Из НайденныеДанные Цикл
			Если ИсключенияПоискаСсылок.Найти(СтрокаТаблицы.Метаданные.ПолноеИмя()) = Неопределено Тогда
				Индекс = УдаляемыеОбъекты.Найти(СтрокаТаблицы.Ссылка);
				Если Индекс <> Неопределено Тогда
					УдаляемыеОбъекты.Удалить(Индекс);
				КонецЕсли;
				
				// данные для результата выполнения функции
				Если НеУдаленные.Найти(СтрокаТаблицы.Ссылка) = Неопределено Тогда
					НеУдаленные.Добавить(СтрокаТаблицы.Ссылка);
				КонецЕсли;
				НоваяСтрока = Найденные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		// если список на удаление не был изменён на предыдущем шаге, то можно удалять без контроля
		Если КоличествоУдаляемыхОбъектов = УдаляемыеОбъекты.Количество() Тогда
			Попытка
				// удаление без контроля ссылочной целостности
				УдалитьОбъекты(УдаляемыеОбъекты, Ложь);
			Исключение
				СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				УстановитьМонопольныйРежим(Ложь);
				Возврат ЗаполнитьСтатусОперации(СообщениеОбОшибке, Ложь);
			КонецПопытки;
			
			// удаление завершено, выходим из цикла.
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НеУдаленныйОбъект Из НеУдаленные Цикл
		НайденныеСтроки = ТипыУдаленныхОбъектов.НайтиСтроки(Новый Структура("Тип", ТипЗнч(НеУдаленныйОбъект)));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТипыУдаленныхОбъектов.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
	КонецЦикла;
	
	ТипыУдаленныхОбъектовМассив = ТипыУдаленныхОбъектов.ВыгрузитьКолонку("Тип");
	
	Если МонопольныйДоступ Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ЗаполнитьСтатусОперации(Новый Структура("Найденные, НеУдаленные", Найденные, НеУдаленные));
	
КонецФункции

Функция ПолучитьТаблицуТиповУдаляемыхОбъектов()
	
	УдаляемыеТипыОбъектов = Новый ТаблицаЗначений;
	УдаляемыеТипыОбъектов.Колонки.Добавить("Тип", Новый ОписаниеТипов("Тип"));
	
	Возврат УдаляемыеТипыОбъектов;
	
КонецФункции

Процедура ОбновитьТаблицуТиповУдаляемыхОбъектов(Таблица, знач УдаляемыеОбъекты)
	
	Для Каждого УдаляемыйОбъект Из УдаляемыеОбъекты Цикл
		НовыйТип = Таблица.Добавить();
		НовыйТип.Тип = ТипЗнч(УдаляемыйОбъект);
	КонецЦикла;
	
	Таблица.Свернуть("Тип");
	
КонецПроцедуры

// Возвращает структуру с полями Статус и Значение по переданным параметрам
//
Функция ЗаполнитьСтатусОперации(знач Значение, знач Статус = Истина)
	
	Возврат Новый Структура("Статус, Значение", Статус, Значение);
	
КонецФункции