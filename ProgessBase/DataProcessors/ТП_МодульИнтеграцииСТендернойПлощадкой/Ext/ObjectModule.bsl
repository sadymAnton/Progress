Перем СтруктураНастроек Экспорт;
//начало изменений Ожиганов А. исправление ошибки 1,5 часового зависания при обменен с Логинет  05.12.2016  б/н 08.12.2016
Перем ПРГ_МинВремя_Соединения_Операций Экспорт;
//конец изменений 
//начало изменений Ожиганов А. попробуем использовать одно соеденение при обмене с Логинет  05.12.2016  б/н 08.12.2016
//параметр Connection: keep-alive и версия Http должна поддерживать.
//переменная
Перем ПРГ_HTTPСоединение;
Перем ПРГ_ИспользоватьОдноСоединение Экспорт;
//конец изменений 
//начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
Перем ПРГ_ВыгружатьРегионИГород Экспорт;
Перем ПРГ_НеИспользоватьРегионВГороде Экспорт;
//конец изменений
//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера
Перем ПРГ_Предварительный_поиск_заявок_и_тендеров;

Перем ПРГ_МаксКолВоСимв;
Перем ПРГ_МинКолВоСимв;
Перем МассСокр;
Перем ПРГ_МД5ПослЗапроса;
//конец изменений 
//начало изменений Ожиганов А. 09.02.2017 добавление доп загрузки по контрагенту и InfoBatch  
Перем НакоплОшибки;
//конец изменений 


//ВыполнитьОбмен()
//Запускает цикл выполнения обмена
Процедура ВыполнитьОбмен() Экспорт 

	//0 - иницилизируем структуру переменных
	//СформироватьСтруктуруНастроек();
	
	ПРГ_HTTPСоединение = Неопределено;
	МассивОшибок = Новый Массив;
	ПРГ_МД5ПослЗапроса = "";
//начало изменений Ожиганов А. исправление ошибки 1,5 часового зависания при обменен с Логинет  05.12.2016  б/н 06.12.2016
//а также возникших блокировок при считывании информации 06.12.2016
//вставим исключения 	
	//1 - залогинимся (/WCFService/auth.svc/JSON/Login)
	Попытка
//конец изменений 		
		WCFService_auth_svc_JSON_Login();


	    Попытка
			
			//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера и время подачи тс
			//1. поищем уже созданные заявки и тендеры
			НайтиОбновитьИнфуПоЗаявкам();
			 //конец изменений 
			//2 - выгрузим новые рейсы и создим заявки на транспортировку
			ВыгрузитьРейсы();
			
			//3 - создим тендеры
			СоздатьТендеры();
		Исключение
			//начало изменений Ожиганов А. 26.01.2017 добавим в описание ошибки инфу по md5 последнего выполненого запроса
			//МассивОшибок.Добавить(ОписаниеОшибки());
			МассивОшибок.Добавить(ОписаниеОшибки()+"
				| md5 посл. запроса "+ПРГ_МД5ПослЗапроса);
			//конец изменений 
			ЗаписьЖурналаРегистрации("Ошибка при обмене с Логинет", УровеньЖурналаРегистрации.Ошибка,,, МассивОшибок[МассивОшибок.ВГраница()]);	
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;	
		КонецПопытки;
		
		
		Попытка
			//4 - обновим в 1С статусы по тендерам и рейсам
			ЗагрузитьИнформациюПоСтатусамОбъектовОбмена();
			ЗагрузитьИнформациюПоТендерам();
			ЗагрузитьИнформациюОРейсе();
			//
			////5 - загрузим ставки по рейсам
			ЗагрузитьИнформациюПоСтавкам();
			//
			////6 - отправим информацию о выбранной ставке и закроем тендер в логинете
			ОтправитьИнформациюОВыбранныхСтавках();  
		Исключение
			//начало изменений Ожиганов А. 26.01.2017 добавим в описание ошибки инфу по md5 последнего выполненого запроса
			//МассивОшибок.Добавить(ОписаниеОшибки());
			МассивОшибок.Добавить(ОписаниеОшибки()+"
				| md5 посл. запроса "+ПРГ_МД5ПослЗапроса);
			//конец изменений 
			ЗаписьЖурналаРегистрации("Ошибка при обмене с Логинет", УровеньЖурналаРегистрации.Ошибка,,, МассивОшибок[МассивОшибок.ВГраница()]);				
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;	
		КонецПопытки;
		
		//7 - WCFService_auth_svc_JSON_Logout()
		WCFService_auth_svc_JSON_Logout();
	
	Исключение
		//начало изменений Ожиганов А. 26.01.2017 добавим в описание ошибки инфу по md5 последнего выполненого запроса
		//МассивОшибок.Добавить(ОписаниеОшибки());
		МассивОшибок.Добавить(ОписаниеОшибки()+"
				| md5 посл. запроса "+ПРГ_МД5ПослЗапроса);
		//конец изменений 
		ЗаписьЖурналаРегистрации("Ошибка при обмене с Логинет", УровеньЖурналаРегистрации.Ошибка,,, МассивОшибок[МассивОшибок.ВГраница()]);	
		Если ТранзакцияАктивна() Тогда
			 ОтменитьТранзакцию();
		КонецЕсли;	
	КонецПопытки; 
	ПРГ_HTTPСоединение = Неопределено;	
	//начало изменений Ожиганов А. 26.01.2017 добавим в описание ошибки инфу по md5 последнего выполненого запроса
	ПРГ_МД5ПослЗапроса = "";
	//конец изменений 
	//начало изменений Ожиганов А. исправление ошибки 1,5 часового зависания при обменен с Логинет  05.12.2016  б/н 06.12.2016
	//а также возникших блокировок при считывании информации 06.12.2016
	//вставим исключения 
	
	//начало изменений Ожиганов А. 09.02.2017 добавление доп загрузки по контрагенту и InfoBatch  
	Если ТипЗнч(НакоплОшибки) = Тип("Массив") тогда
		Для каждого элемент Из НакоплОшибки Цикл
		    МассивОшибок.Добавить(элемент);
		КонецЦикла; 
	КонецЕсли;	
	//конец изменений 
	
	// попочте тайм аут не задается, по уомолчанию 30 сек вроде все должно быть нормально
	ПРГ_ОтправитьИнфуОбОшибках(МассивОшибок);
	//конец изменений 
КонецПроцедуры

//ПринудительноОбновитьИнформациюПоТендеру
//Необходима для ручного обновления информации из плана доставки
Процедура ПринудительноОбновитьИнформациюПоТендеру(ПланДоставкиСсылка) Экспорт

	//начало изменений Ожиганов А. попробуем использовать одно соеденение при обмене с Логинет  05.12.2016  б/н 08.12.2016
	//параметр Connection: keep-alive и версия Http должна поддерживать.
	//для разовых методов сделаем исключение
	ПРГ_HTTPСоединение = Неопределено;
	//конец изменений 
	//начало изменений Ожиганов А. 26.01.2017 добавим в описание ошибки инфу по md5 последнего выполненого запроса
	ПРГ_МД5ПослЗапроса = "";
	//конец изменений  
	//0 - иницилизируем структуру переменных
	//СформироватьСтруктуруНастроек();
	//начало изменений Ожиганов А. 22.12.2016 б/н добъемся совпадения пары вызовов логин логоут
	МассивОшибок = Новый Массив;	
	Попытка
	//конец изменений 	
		//1 - залогинимся (/WCFService/auth.svc/JSON/Login)
		WCFService_auth_svc_JSON_Login(Истина);

		//начало изменений Ожиганов А. 22.12.2016 б/н добъемся совпадения пары вызовов логин логоут
		попытка
		//2 - обновим в 1С статусы по тендерам и рейсам
			ЗагрузитьИнформациюОРейсе(Истина,ПланДоставкиСсылка);	
		Исключение
			//начало изменений Ожиганов А. 26.01.2017 добавим в описание ошибки инфу по md5 последнего выполненого запроса
			//МассивОшибок.Добавить(ОписаниеОшибки());
			МассивОшибок.Добавить(ОписаниеОшибки()+"
				| md5 посл. запроса "+ПРГ_МД5ПослЗапроса);
			//конец изменений 
			ЗаписьЖурналаРегистрации("Ошибка при обмене с Логинет", УровеньЖурналаРегистрации.Ошибка,,, МассивОшибок[МассивОшибок.ВГраница()]);	
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;	
		КонецПопытки;
		//конец изменений 
		
		//3 - WCFService_auth_svc_JSON_Logout()
		WCFService_auth_svc_JSON_Logout();
	Исключение
		    //начало изменений Ожиганов А. 26.01.2017 добавим в описание ошибки инфу по md5 последнего выполненого запроса
			//МассивОшибок.Добавить(ОписаниеОшибки());
			МассивОшибок.Добавить(ОписаниеОшибки()+"
				| md5 посл. запроса "+ПРГ_МД5ПослЗапроса);
			//конец изменений 
			ЗаписьЖурналаРегистрации("Ошибка при обмене с Логинет", УровеньЖурналаРегистрации.Ошибка,,, МассивОшибок[МассивОшибок.ВГраница()]);	
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;	
	КонецПопытки;

	//начало изменений Ожиганов А. попробуем использовать одно соеденение при обмене с Логинет  05.12.2016  б/н 08.12.2016
	//параметр Connection: keep-alive и версия Http должна поддерживать.
	//для разовых методов сделаем исключение
	ПРГ_HTTPСоединение = Неопределено;
	//конец изменений 
	//начало изменений Ожиганов А. 22.12.2016 б/н добъемся совпадения пары вызовов логин логоут
	ПРГ_ОтправитьИнфуОбОшибках(МассивОшибок);	
	//конец изменений  
	
	//начало изменений Ожиганов А. 22.12.2016 покащем ощибку
	Если МассивОшибок.Количество()> 0 Тогда
		ТекстОшибок = "";
		Для Каждого ТекЭлемент из МассивОшибок Цикл
			 ТекстОшибок = ТекстОшибок + ?(ПустаяСтрока(ТекстОшибок),"",Символы.ПС)+ ТекЭлемент;
		КонецЦикла;	
		ВызватьИсключение ТекстОшибок; 
	КонецЕсли;	
	//конец изменений  
	
КонецПроцедуры

//ОтменитьЗаявкуНаТранспортировку
//
Процедура ОтменитьЗаявкуНаТранспортировку(GUID,ВидПричиныИсключенияРейса,Комментарий="") Экспорт 

	//{17.01.2017 Островерхий заявка №б/н 
	Если НЕ ЗначениеЗаполнено(GUID) Тогда
		Возврат;	
	КонецЕсли;  
	//17.01.2017 Островерхий} 
	
 //начало изменений Ожиганов А. попробуем использовать одно соеденение при обмене с Логинет  05.12.2016  б/н 08.12.2016
 //параметр Connection: keep-alive и версия Http должна поддерживать.
 //для разовых методов сделаем исключение
 ПРГ_HTTPСоединение = Неопределено;
 //конец изменений 
 	
	//1 - залогинимся (/WCFService/auth.svc/JSON/Login)
	WCFService_auth_svc_JSON_Login(Истина);
	
	//2 - вызовим метод /WCFSERVICE/SR.SVC/JSON/CANCELBATCH для отмены заявки на транспортировку
	МассивЗаявок = Новый Массив;
	МассивЗаявок.Добавить(Новый Структура("P,P1,P2,P3",GUID,Комментарий,?(ВидПричиныИсключенияРейса = Перечисления.ТП_ВидыПричинИсключенияРейсов.ОтмененаГрузовладельцем,1,2),0));
	
	ОбъектСерилизации = Новый Структура("T,DDD",СтруктураНастроек.Токен,МассивЗаявок);	
	
	Request = ЗаписатьJSON(ОбъектСерилизации);
	
	ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFSERVICE/SR.SVC/JSON/CANCELBATCH"))[0];
	Response = HTTPPOST(ПараметрыМетода,Request);
	JSONОбъект = ПрочитатьJSON(Response.ResponseText);
	
	ПроверитьВхождениеВКоллекциюПоКлючу("DD", JSONОбъект,"/WCFSERVICE/SR.SVC/JSON/CANCELBATCH"); 
	ПроверитьРавенство(Response.КодСостояния, 200,"/WCFSERVICE/SR.SVC/JSON/CANCELBATCH"); //Ответ должен быть HTTP/1.1 200 OK

	Для каждого ТекСтрока Из JSONОбъект.Получить("DD") Цикл
		
		тРейс = Справочники.ПТЛ_Рейсы.НайтиПоРеквизиту("GUIDТендернойПлощадки", Строка(ТекСтрока.Получить("Id")));
		тСтатусРейса = ТекСтрока.Получить("Sts");
		
		Если НЕ тРейс.Пустая() И НЕ тСтатусРейса = "" Тогда
			ЗафиксироватьИзменениеСтатусаОбъектаОбмена(тРейс,тСтатусРейса);
		КонецЕсли; 	
		
	КонецЦикла;
	
	//3 - WCFService_auth_svc_JSON_Logout()
	WCFService_auth_svc_JSON_Logout();	
	
 //начало изменений Ожиганов А. попробуем использовать одно соеденение при обмене с Логинет  05.12.2016  б/н 08.12.2016
 //параметр Connection: keep-alive и версия Http должна поддерживать.
 //для разовых методов сделаем исключение
 ПРГ_HTTPСоединение = Неопределено;
 //конец изменений 

КонецПроцедуры



//////////////////////////////////////////////
//	Основные процедуры и функции для обмена. 
//////////////////////////////////////////////

Процедура СформироватьСтруктуруНастроек() Экспорт 

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВерсияМодуля","1.0.0");
	СтруктураНастроек.Вставить("РежимОтладки",Ложь);  	
	//СтруктураНастроек.Вставить("Сервер","http://msk-loginet-01:2001/"); 
	СтруктураНастроек.Вставить("Сервер",Справочники.ТП_НастройкиОбменаСТендернойПлощадкой.АвтоОбмен.Сервер);
    СтруктураНастроек.Вставить("Логин",Справочники.ТП_НастройкиОбменаСТендернойПлощадкой.АвтоОбмен.Логин);
	СтруктураНастроек.Вставить("Пароль",Справочники.ТП_НастройкиОбменаСТендернойПлощадкой.АвтоОбмен.Пароль);
	СтруктураНастроек.Вставить("Логин2",Справочники.ТП_НастройкиОбменаСТендернойПлощадкой.ОбменПоТребованию.Логин);
	СтруктураНастроек.Вставить("Пароль2",Справочники.ТП_НастройкиОбменаСТендернойПлощадкой.ОбменПоТребованию.Пароль); 
	СтруктураНастроек.Вставить("КоэфДопустимогоПревышенияSLA",Справочники.ТП_НастройкиОбменаСТендернойПлощадкой.АвтоОбмен.КоэфДопустимогоПревышенияSLA);
	СтруктураНастроек.Вставить("Токен",Неопределено);
    СтруктураНастроек.Вставить("МетодыСервиса",ЗаполнитьМетодыСервиса());
	
КонецПроцедуры // СформироватьСтруктуруНастроек()

Процедура WCFService_auth_svc_JSON_Login(ОбменПоТребования=Ложь) Экспорт 

	ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/auth.svc/JSON/Login"))[0];
	
	Если ОбменПоТребования Тогда
		ОбъектСерилизации = Новый Структура("U,P",СтруктураНастроек.Логин2,СтруктураНастроек.Пароль2);
	Иначе	
		ОбъектСерилизации = Новый Структура("U,P",СтруктураНастроек.Логин,СтруктураНастроек.Пароль);
	КонецЕсли; 
	
	Request = ЗаписатьJSON(ОбъектСерилизации);	
	
	Response = HTTPPOST(ПараметрыМетода,Request);
	JSONОбъект = ПрочитатьJSON(Response.ResponseText);
	
	ПроверитьВхождениеВКоллекциюПоКлючу("D", JSONОбъект,"/WCFService/auth.svc/JSON/Login");
	ПроверитьВхождениеВКоллекциюПоКлючу("T", JSONОбъект.Получить("D"),"/WCFService/auth.svc/JSON/Login");
	СтруктураНастроек.Токен = Строка(JSONОбъект.Получить("D").Получить("T"));
	ПроверитьЗаполненность(СтруктураНастроек.Токен,"Токен пустой (/WCFService/auth.svc/JSON/Login).");
	
КонецПроцедуры

Процедура WCFService_auth_svc_JSON_Logout() Экспорт 

	ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/auth.svc/JSON/Logout"))[0];
	ОбъектСерилизации = Новый Структура("T",СтруктураНастроек.Токен);
	Request = ЗаписатьJSON(ОбъектСерилизации);	
	
	Response = HTTPPOST(ПараметрыМетода,Request);
	JSONОбъект = ПрочитатьJSON(Response.ResponseText);
	
КонецПроцедуры

Процедура ВыгрузитьРейсы()

	ПроверитьЗаполненность(СтруктураНастроек.Токен,"Токен пустой.");
	
	ОбъектСерилизации = Новый Структура("T,DD",СтруктураНастроек.Токен,Новый Массив);
	
	Запрос = Новый Запрос;
	//начало изменений Ожиганов А. 19.12.2016 60359 использование полей гео и стреет при передачи в логинет
	// старый запрос перехал в процедуру СтарыеЗапросвВыгрузитьРейсы 
	Запрос.Текст = 	"ВЫБРАТЬ
		|	ПТЛ_ПланДоставки.ПланДоставки,
		|	ПТЛ_ПланДоставкиМаршруты.ТипТранспорта,
		|	ПТЛ_ПланДоставки.Рейс,
		|	ПТЛ_ПланДоставки.ДатаОтгрузки,
		|	ПТЛ_ПланДоставки.ПланДоставки.Организация КАК Владелец,
		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку,
		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки КАК АдресПолучателя,
		|	ВЫБОР
		|		КОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
		//Blik 65458 240817 н
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру)
		//Blik 65458 240817 к
		|			ТОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ТП_АдресОтгрузки
		|		ИНАЧЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Склад.НСИ_АП
		|	КОНЕЦ КАК АдресОтправителя,
		|	ВЫБОР
		|		КОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
		//Blik 65458 240817 н
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		//Blik 65458 240817 к
		|			ТОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Получатель
		|		ИНАЧЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Организация
		|	КОНЕЦ КАК Отправитель,
		|	ВЫБОР
		|		КОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
		//Blik 65458 240817 н
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		//Blik 65458 240817 к
		|			ТОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Организация
		|		ИНАЧЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Получатель
		|	КОНЕЦ КАК Получатель,
		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки.НСИ_Город КАК ГородПолучателя,
		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки.НСИ_Регион КАК РегионПолучателя,
		|	ВЫБОР
		|		КОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
		//Blik 65458 240817 н
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру)
		//Blik 65458 240817 к
		|			ТОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ТП_АдресОтгрузки.НСИ_Город
		|		ИНАЧЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Склад.НСИ_АП.НСИ_Город
		|	КОНЕЦ КАК ГородОтправителя,
		|	ВЫБОР
		|		КОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
		//Blik 65458 240817 н
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру)
		//Blik 65458 240817 к
		|			ТОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ТП_АдресОтгрузки.НСИ_Регион
		|		ИНАЧЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Склад.НСИ_АП.НСИ_Регион
		|	КОНЕЦ КАК РегионОтправителя,
		|	0 КАК Count,
		|	0 КАК Weight,
		|	ПТЛ_ПланДоставки.ДатаДоставки,
		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации,
		|	ВЫРАЗИТЬ(ПТЛ_ПланДоставкиМаршруты.Коментарий КАК СТРОКА(250)) КАК Comment,
//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера и время подачи тс
		|	ПТЛ_ПланДоставки.Период КАК ПланДоставкиДата,
		|	ПТЛ_ПланДоставкиМаршруты.ВремяПодачиТС как ВремяПодачиТС
//конец изменений 		
		|ПОМЕСТИТЬ ТаблРейсовИЗаданий
		|ИЗ
		|	Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
		|		ПО (НЕ ПТЛ_ПланДоставки.Исключено)
		|			И (ПТЛ_ПланДоставки.Рейс.GUIDТендернойПлощадки = """")
		|			И (ПТЛ_ПланДоставки.ПланДоставки.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ПТЛ_СтатусыПланаДоставки.Тендер))
		|			И (НЕ ПТЛ_ПланДоставкиМаршруты.Самовывоз)
		|			И (ПТЛ_ПланДоставки.Регистратор = ПТЛ_ПланДоставкиМаршруты.Ссылка)
		|			И (ПТЛ_ПланДоставки.Рейс = ПТЛ_ПланДоставкиМаршруты.Рейс)
		//{20.09.2017 Островерхий заявка №б/н, исключаем рейсы не отправляемый на тендер 
		|			И (НЕ ПТЛ_ПланДоставкиМаршруты.НеОтправлятьНаТендер) 
		//20.09.2017 Островерхий} 
		|
		|СГРУППИРОВАТЬ ПО
		|	ПТЛ_ПланДоставки.ПланДоставки,
		|	ПТЛ_ПланДоставки.Рейс,
		|	ПТЛ_ПланДоставки.ДатаОтгрузки,
		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку,
		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки,
		|	ВЫБОР
		|		КОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
		//Blik 65458 240817 н
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру)
		//Blik 65458 240817 к
		|			ТОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ТП_АдресОтгрузки
		|		ИНАЧЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Склад.НСИ_АП
		|	КОНЕЦ,
		|	ПТЛ_ПланДоставки.ПланДоставки.Организация,
		|	ВЫБОР
		|		КОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
		//Blik 65458 240817 н
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		//Blik 65458 240817 к
		|			ТОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Получатель
		|		ИНАЧЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Организация
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
		//Blik 65458 240817 н
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		//Blik 65458 240817 к
		|			ТОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Организация
		|		ИНАЧЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Получатель
		|	КОНЕЦ,
		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки.НСИ_Город,
		|	ВЫБОР
		|		КОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
		//Blik 65458 240817 н
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру)
		//Blik 65458 240817 к
		|			ТОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ТП_АдресОтгрузки.НСИ_Город
		|		ИНАЧЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Склад.НСИ_АП.НСИ_Город
		|	КОНЕЦ,
		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки.НСИ_Регион,
		|	ВЫБОР
		|		КОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
		//Blik 65458 240817 н
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		|		или ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру)
		//Blik 65458 240817 к
		|			ТОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ТП_АдресОтгрузки.НСИ_Регион
		|		ИНАЧЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Склад.НСИ_АП.НСИ_Регион
		|	КОНЕЦ,
		|	ПТЛ_ПланДоставкиМаршруты.ТипТранспорта,
		|	ПТЛ_ПланДоставки.ДатаДоставки,
		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации,
		|	ПТЛ_ПланДоставки.Период,
//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера и время подачи тс
		|	ВЫРАЗИТЬ(ПТЛ_ПланДоставкиМаршруты.Коментарий КАК СТРОКА(250)),
		|	ПТЛ_ПланДоставкиМаршруты.ВремяПодачиТС 
//конец изменений 		
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблРейсовИЗаданий.ПланДоставки,
		|	ТаблРейсовИЗаданий.Рейс,
		|	МИНИМУМ(ТаблРейсовИЗаданий.ДатаДоставки) КАК ДатаДоставки,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТаблРейсовИЗаданий.ГородПолучателя = ТаблРейсовИЗаданий.ГородОтправителя
		|				ТОГДА 2
		|			ИНАЧЕ 3
		|		КОНЕЦ) КАК Service
		|ПОМЕСТИТЬ втсМинДатойПоставки
		|ИЗ
		|	ТаблРейсовИЗаданий КАК ТаблРейсовИЗаданий
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблРейсовИЗаданий.Рейс,
		|	ТаблРейсовИЗаданий.ПланДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втсМинДатойПоставки.ПланДоставки,
		|	втсМинДатойПоставки.Рейс,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТаблРейсовИЗаданий.ЗаданиеНаПеревозкуВидОперации <> ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.доставкаотПоставщика)
		//Blik 65458 240817 н
		|		    или ТаблРейсовИЗаданий.ЗаданиеНаПеревозку.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		//Blik 65458 240817 к
		|				ТОГДА ТаблРейсовИЗаданий.ЗаданиеНаПеревозку
		|			ИНАЧЕ NULL
		|		КОНЕЦ) КАК ЗаданиеОтгрузка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТаблРейсовИЗаданий.ЗаданиеНаПеревозкуВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.доставкаотПоставщика)
		//Blik 65458 240817 н
		|		    или ТаблРейсовИЗаданий.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		//Blik 65458 240817 к
		|				ТОГДА ТаблРейсовИЗаданий.ЗаданиеНаПеревозку
		|			ИНАЧЕ NULL
		|		КОНЕЦ) КАК ЗаданиеДоставкаОтПоставщика,
		|	втсМинДатойПоставки.Service
		|ПОМЕСТИТЬ втВремСЗаданиямиВрем
		|ИЗ
		|	ТаблРейсовИЗаданий КАК ТаблРейсовИЗаданий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втсМинДатойПоставки КАК втсМинДатойПоставки
		|		ПО ТаблРейсовИЗаданий.ПланДоставки = втсМинДатойПоставки.ПланДоставки
		|			И ТаблРейсовИЗаданий.Рейс = втсМинДатойПоставки.Рейс
		|			И ТаблРейсовИЗаданий.ДатаДоставки = втсМинДатойПоставки.ДатаДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	втсМинДатойПоставки.Рейс,
		|	втсМинДатойПоставки.ПланДоставки,
		|	втсМинДатойПоставки.Service
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВремСЗаданиями.ПланДоставки,
		|	втВремСЗаданиями.Рейс,
		|	ЕСТЬNULL(втВремСЗаданиями.ЗаданиеОтгрузка, втВремСЗаданиями.ЗаданиеДоставкаОтПоставщика) КАК ЗаданиеНаПеревозку,
		|	втВремСЗаданиями.Service
		|ПОМЕСТИТЬ втРейсыСзаданиями
		|ИЗ
		|	втВремСЗаданиямиВрем КАК втВремСЗаданиями
		|
		|СГРУППИРОВАТЬ ПО
		|	втВремСЗаданиями.Рейс,
		|	втВремСЗаданиями.ПланДоставки,
		|	втВремСЗаданиями.Service,
		|	ЕСТЬNULL(втВремСЗаданиями.ЗаданиеОтгрузка, втВремСЗаданиями.ЗаданиеДоставкаОтПоставщика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРейсыСзаданиями.ПланДоставки,
		|	втРейсыСзаданиями.Рейс,
		|	ПРЕДСТАВЛЕНИЕ(втРейсыСзаданиями.Рейс) КАК Name,
		|	1 КАК Status,
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.Отправитель) КАК SenderName,
		|	ЕСТЬNULL(ТаблРейсовИЗаданий.Отправитель.ИНН, """") КАК SenderINN,
		|	ТаблРейсовИЗаданий.Владелец.ИНН КАК ShipOwnerINN,
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.Получатель) КАК ReceiverName,
		|	ЕСТЬNULL(ТаблРейсовИЗаданий.Получатель.ИНН, """") КАК ReceiverINN,
		|	ТаблРейсовИЗаданий.ТипТранспорта.ТипКузова.Id КАК VehicleType,
		|	1 КАК ShippingType,
		|	втРейсыСзаданиями.Service,
		|	ТаблРейсовИЗаданий.Comment,
		|	ТаблРейсовИЗаданий.ДатаОтгрузки КАК Date,
		|	ТаблРейсовИЗаданий.ТипТранспорта.ВидГрузоподъемности.Id КАК VehicleTonnage,
		|	0 КАК VehicleVolume,
		|	""RUR"" КАК DesiredPriceCurrency,
		|	0 КАК DesiredPriceAmount,
		|	ИСТИНА КАК DesiredPriceVAT,
		|	0 КАК VehicleTemperature,
		|	1 КАК VehicleCount,
		|	0 КАК TotalCargoCost,
//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера и время подачи тс
 		|	ТаблРейсовИЗаданий.ПланДоставкиДата,
 		|	ТаблРейсовИЗаданий.ВремяПодачиТС как ВремяПодачиТС
		|ПОМЕСТИТЬ втРейсы
		|ИЗ
		|	втРейсыСзаданиями КАК втРейсыСзаданиями
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблРейсовИЗаданий КАК ТаблРейсовИЗаданий
		|		ПО втРейсыСзаданиями.ПланДоставки = ТаблРейсовИЗаданий.ПланДоставки
		|			И втРейсыСзаданиями.Рейс = ТаблРейсовИЗаданий.Рейс
		|			И втРейсыСзаданиями.ЗаданиеНаПеревозку = ТаблРейсовИЗаданий.ЗаданиеНаПеревозку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРейсы.ПланДоставки,
		|	втРейсы.Рейс,
		|	втРейсы.Name,
		|	втРейсы.Status,
		|	втРейсы.SenderName,
		|	втРейсы.SenderINN,
		|	втРейсы.ShipOwnerINN,
		|	втРейсы.ReceiverName,
		|	втРейсы.ReceiverINN,
		|	втРейсы.VehicleType,
		|	втРейсы.ShippingType,
		|	втРейсы.Service,
		|	втРейсы.Comment,
		|	втРейсы.Date,
		|	втРейсы.VehicleVolume,
		|	втРейсы.DesiredPriceCurrency,
		|	втРейсы.DesiredPriceAmount,
		|	втРейсы.DesiredPriceVAT,
		|	втРейсы.VehicleTemperature,
		|	втРейсы.VehicleCount,
		|	втРейсы.TotalCargoCost,
		|	втРейсы.VehicleTonnage,
//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера и время подачи тс
 		|	втРейсы.ПланДоставкиДата,
		|	втРейсы.ВремяПодачиТС
//конец изменений 		
		|ИЗ
		|	втРейсы КАК втРейсы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРейсы.ПланДоставки,
		|	втРейсы.Рейс КАК рейс,
		|	""Продукты питания"" КАК Name,
		//{03.03.2017 Островерхий заявка №б/н 
		//|	8 КАК Form,
        |	2207 КАК Form,
		//03.03.2017 Островерхий} 
		|	1 КАК Type,
		|	ТаблРейсовИЗаданий.Count,
		|	ТаблРейсовИЗаданий.Weight,
		|	ТаблРейсовИЗаданий.ДатаОтгрузки,
		|	ТаблРейсовИЗаданий.Отправитель.ИНН КАК ОрганизацияИНН,
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.Отправитель) КАК ОрганизацияНаименование,
		|	ТаблРейсовИЗаданий.АдресОтправителя КАК АПСкладаОтгрузки,
		|	ТаблРейсовИЗаданий.ДатаДоставки КАК ДатаДоставки,
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.Получатель) КАК КонтрагентНаименование,
		|	ТаблРейсовИЗаданий.Получатель.ИНН КАК КонтрагентИНН,
		|	ТаблРейсовИЗаданий.АдресПолучателя КАК АПКонтрагента,
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.ГородПолучателя) КАК ГородВыгрузки,
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.РегионПолучателя) КАК РегионВыгрузки,
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.ГородОтправителя) КАК ГородПогрузки,
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.РегионОтправителя) КАК РегионПогрузки,
		|	ТаблРейсовИЗаданий.АдресПолучателя.НСИ_АдресДоставки КАК АдресВыгрузки,
//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера и время подачи тс
 		|	ТаблРейсовИЗаданий.АдресОтправителя.НСИ_АдресДоставки КАК АдресПогрузки,
		|	втРейсы.ВремяПодачиТС как ВремяПодачиТС
//конец изменений 		
		|ИЗ
		|	втРейсы КАК втРейсы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблРейсовИЗаданий КАК ТаблРейсовИЗаданий
		|		ПО втРейсы.ПланДоставки = ТаблРейсовИЗаданий.ПланДоставки
		|			И втРейсы.Рейс = ТаблРейсовИЗаданий.Рейс
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблРейсовИЗаданий.ДатаОтгрузки,
		|	ТаблРейсовИЗаданий.ДатаДоставки,
		|	втРейсы.ПланДоставки,
		|	ТаблРейсовИЗаданий.АдресОтправителя,
		|	ТаблРейсовИЗаданий.Отправитель.ИНН,
		|	ТаблРейсовИЗаданий.АдресПолучателя,
		|	ТаблРейсовИЗаданий.Получатель.ИНН,
		|	втРейсы.Рейс,
		|	ТаблРейсовИЗаданий.Count,
		|	ТаблРейсовИЗаданий.Weight,
		|	ТаблРейсовИЗаданий.АдресПолучателя.НСИ_АдресДоставки,
		|	ТаблРейсовИЗаданий.АдресОтправителя.НСИ_АдресДоставки,
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.Отправитель),
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.Получатель),
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.ГородПолучателя),
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.РегионПолучателя),
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.ГородОтправителя),
//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера и время подачи тс
		|	ПРЕДСТАВЛЕНИЕ(ТаблРейсовИЗаданий.РегионОтправителя),
		|	втРейсы.ВремяПодачиТС 
		
		|
		|УПОРЯДОЧИТЬ ПО
		|	рейс,
		|	ДатаДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	0 КАК НомерПоПорядку,
		|	втРейсы.Рейс
		|ИЗ
		|	втРейсы КАК втРейсы
		|
		|СГРУППИРОВАТЬ ПО
		|	втРейсы.Рейс";
    //конец изменений 		

	Результат = Запрос.ВыполнитьПакет();

	//ВыборкаРейс = Результат[1].Выбрать();
	//ВыборкаЗаданияНаПеревозку = Результат[2].Выгрузить();
	//ВыгружаемыеРейсы = Результат[3].Выгрузить();
	
	ВыборкаРейс = Результат[5].Выбрать();
	ВыборкаЗаданияНаПеревозку = Результат[6].Выгрузить();
	ВыгружаемыеРейсы = Результат[7].Выгрузить();

	
    Сч = 0;
	
	Пока ВыборкаРейс.Следующий() Цикл
		
		//ОбъектСерилизации_Рейс
		ОбъектСерилизации_Рейс = Новый Структура("Name,Status,SenderName,SenderINN,ReceiverName,ReceiverINN,ShipOwnerINN,PayerName,PayerINN,VehicleTonnage,VehicleVolume,VehicleType,ShippingType,DesiredPriceCurrency,DesiredPriceAmount,DesiredPriceVAT,Service,Trips,VehicleTemperature,VehicleCount,Comment,TotalCargoCost,AssignedCustomerINN,Extras", NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,Новый Массив,NULL,NULL,NULL,NULL,NULL);
        ЗаполнитьЗначенияСвойств(ОбъектСерилизации_Рейс,ВыборкаРейс);
		
		Если СтруктураНастроек.РежимОтладки Тогда
			ОбъектСерилизации_Рейс.Name = ОбъектСерилизации_Рейс.Name+"_"+Строка(Новый УникальныйИдентификатор);
		Иначе
			ОбъектСерилизации_Рейс.Name = ОбъектСерилизации_Рейс.Name+" от "+Строка(Формат(ВыборкаРейс.ПланДоставкиДата, "ДЛФ=Д"));
		КонецЕсли; 
		
		//Trips
		Trips = Новый Структура("Name,Comment,Date,Cargos",NULL,NULL,NULL,Новый Массив);
		ЗаполнитьЗначенияСвойств(Trips,ВыборкаРейс);
		ОбъектСерилизации_Рейс.Trips.Добавить(Trips);
		//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера и время подачи тс
		Trips.Date  = Trips.Date + (ВыборкаРейс.ВремяПодачиТС - НачалоДня(ВыборкаРейс.ВремяПодачиТС));
		//конец изменений 
 		
		
		//Trips_Cargos
		Строки = ВыборкаЗаданияНаПеревозку.НайтиСтроки(Новый Структура("Рейс",ВыборкаРейс.Рейс));
		
		Для каждого ТекСтрока Из Строки Цикл
			
			
			//{30.09.2016 Островерхий заявка №б/н, изменения в ТЗ 
			//ОбъектСерилизации_Рейс_Trips_Cargos = Новый Структура("Name,Form,Type,ADR,Length,Width,Height,Count,Weight,SpecialConditions,CanRotate,CanStack,CanTurnOver,Loading,UnLoading",NULL,NULL,NULL,0,0,0,0,NULL,NULL,NULL,Ложь,Ложь,Ложь,NULL,NULL);
			ОбъектСерилизации_Рейс_Trips_Cargos = Новый Структура("Name,Form,Type,ADR,Length,Width,Height,SpecialConditions,CanRotate,CanStack,CanTurnOver,Loading,UnLoading",NULL,NULL,NULL,0,0,0,0,NULL,Ложь,Ложь,Ложь,NULL,NULL);
			//30.09.2016 Островерхий} 
           	ЗаполнитьЗначенияСвойств(ОбъектСерилизации_Рейс_Trips_Cargos,ТекСтрока);
			
			//начало изменений Ожиганов А. 19.12.2016 60359 использование полей гео и стреет при передачи в логинет
			//ОбъектСерилизации_Рейс_Trips_Cargos.Loading = СерилизироватьПоТипуLoading_unLoading(ТекСтрока.ДатаОтгрузки,ТекСтрока.ОрганизацияИНН,ТекСтрока.ОрганизацияНаименование,ТекСтрока.АПСкладаОтгрузки,ТекСтрока.АдресПогрузки);
			//ОбъектСерилизации_Рейс_Trips_Cargos.Loading = СерилизироватьПоТипуLoading_unLoading(ТекСтрока.ДатаОтгрузки,ТекСтрока.ОрганизацияИНН,ТекСтрока.ОрганизацияНаименование,ТекСтрока.АПСкладаОтгрузки,ТекСтрока.АдресПогрузки,ТекСтрока.ГородПогрузки,ТекСтрока.РегионПогрузки);
			//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера и время подачи тс			
			ОбъектСерилизации_Рейс_Trips_Cargos.Loading = СерилизироватьПоТипуLoading_unLoading(ТекСтрока.ДатаОтгрузки+(ТекСтрока.ВремяПодачиТС-НачалоДня(ТекСтрока.ВремяПодачиТС)),ТекСтрока.ОрганизацияИНН,ТекСтрока.ОрганизацияНаименование,ТекСтрока.АПСкладаОтгрузки,ТекСтрока.АдресПогрузки,ТекСтрока.ГородПогрузки,ТекСтрока.РегионПогрузки);
			//конец изменений 
			//конец изменений 
			
			//начало изменений Ожиганов А. 19.12.2016 60359 использование полей гео и стреет при передачи в логинет
			//ОбъектСерилизации_Рейс_Trips_Cargos.UnLoading = СерилизироватьПоТипуLoading_unLoading(ТекСтрока.ДатаДоставки,ТекСтрока.КонтрагентИНН,ТекСтрока.КонтрагентНаименование,ТекСтрока.АПКонтрагента,ТекСтрока.АдресВыгрузки);
			ОбъектСерилизации_Рейс_Trips_Cargos.UnLoading = СерилизироватьПоТипуLoading_unLoading(ТекСтрока.ДатаДоставки,ТекСтрока.КонтрагентИНН,ТекСтрока.КонтрагентНаименование,ТекСтрока.АПКонтрагента,ТекСтрока.АдресВыгрузки,ТекСтрока.ГородВыгрузки,ТекСтрока.РегионВыгрузки);
			//конец изменений 
			
			Trips.Cargos.Добавить(ОбъектСерилизации_Рейс_Trips_Cargos);
		
		КонецЦикла; 
		
		ОбъектСерилизации.DD.Добавить(ОбъектСерилизации_Рейс);
				
		//Сохраним номер для последующей синхронизации.
		Сч = Сч + 1;
		ВыгружаемыеРейсы.НайтиСтроки(Новый Структура("Рейс",ВыборкаРейс.Рейс))[0].НомерПоПорядку = Сч;
		
	КонецЦикла;
	
	Если Сч=0 Тогда
		Возврат; //нечего отправлять
	КонецЕсли; 
	
	//Установим эклюзивную блокировку на рейсы
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ПТЛ_Рейсы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ВыгружаемыеРейсы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Рейс");
	Блокировка.Заблокировать();
	
	Request = ЗаписатьJSON(ОбъектСерилизации);

	ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/sr.svc/JSON/CreateBatch"))[0];
	Response = HTTPPOST(ПараметрыМетода,Request);
	JSONОбъект = ПрочитатьJSON(Response.ResponseText);
	
	ПроверитьВхождениеВКоллекциюПоКлючу("DD", JSONОбъект,"/WCFService/sr.svc/JSON/CreateBatch"); //Response.КодСостояния
	ПроверитьРавенство(Response.КодСостояния, 200,"/WCFService/sr.svc/JSON/CreateBatch"); //Ответ должен быть HTTP/1.1 200 OK
	
	//Определим новый объект дял отправки /WCFService/SR.svc/JSON/AddRequestExpiredDateBatch
	ОбъектСерилизации = Новый Структура("T,DDD",СтруктураНастроек.Токен,Новый Массив);

	Для каждого ЭлементМассива Из JSONОбъект.Получить("DD") Цикл
		
		РейсСсылка = ВыгружаемыеРейсы.НайтиСтроки(Новый Структура("НомерПоПорядку",Число(ЭлементМассива.Получить("Nm"))))[0].Рейс;
		
		Если ЭлементМассива.Получить("Er") = ""
			И НЕ Строка(ЭлементМассива.Получить("Id")) = "00000000-0000-0000-0000-000000000000" Тогда
			
			РейсОбъект = РейсСсылка.ПолучитьОбъект();
			РейсОбъект.GUIDТендернойПлощадки = Строка(ЭлементМассива.Получить("Id"));
			
			Если РейсСсылка.GUIDТендернойПлощадки = ""
				ИЛИ СтруктураНастроек.РежимОтладки Тогда
				РейсОбъект.Записать();
			КонецЕсли; 
			
			ОбъектСерилизации.DDD.Добавить(Новый Структура("P,P1",ЭлементМассива.Получить("Id"),ВернутьДатуОжиданияИнформацииОРейсе(РейсОбъект.ДатаОтгрузки))); 
			
		КонецЕсли; 		
		
		ЗафиксироватьИзменениеСтатусаОбъектаОбмена(РейсСсылка,1,ЭлементМассива.Получить("Er"));
		
	КонецЦикла; 
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();	
	КонецЕсли; 
	
	//Установим время ожидания информации о рейсе
	Request = ЗаписатьJSON(ОбъектСерилизации);

	ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/SR.svc/JSON/AddRequestExpiredDateBatch"))[0];
	Response = HTTPPOST(ПараметрыМетода,Request);
	JSONОбъект = ПрочитатьJSON(Response.ResponseText);
	
	ПроверитьРавенство(Response.КодСостояния, 200,"/WCFService/SR.svc/JSON/AddRequestExpiredDateBatch"); //Ответ должен быть HTTP/1.1 200 OK
	ПроверитьВхождениеВКоллекциюПоКлючу("DD", JSONОбъект,"/WCFService/SR.svc/JSON/AddRequestExpiredDateBatch");
	
КонецПроцедуры

Процедура СоздатьТендеры()

	ПроверитьЗаполненность(СтруктураНастроек.Токен,"Токен пустой.");
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.Ссылка.Представление КАК Name,
		|	3 КАК Type,
		|	2 КАК Result,
		|	2 КАК Form,
		|	""RUR"" КАК Currency,
//начало изменений Ожиганов А. 20.12.2016 б/н добавление информации по организатору тендера		
		|  ВложенныйЗапрос.Ссылка.Отделение.Емайл_Логинет как ContactEmail,
//конец изменений 		
		|	ВложенныйЗапрос.Ссылка.Коментарий КАК Note
		|ПОМЕСТИТЬ втШапкаТендера
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПТЛ_ПланДоставкиМаршруты.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
		|	ГДЕ
		|		ПТЛ_ПланДоставкиМаршруты.Ссылка.GUIDТендернойПлощадки = """"
		|		И ПТЛ_ПланДоставкиМаршруты.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ПТЛ_СтатусыПланаДоставки.Тендер)
		|		И ПТЛ_ПланДоставкиМаршруты.Ссылка.Проведен
		|		И НЕ ПТЛ_ПланДоставкиМаршруты.Исключен
		|		И НЕ ПТЛ_ПланДоставкиМаршруты.Самовывоз
		//{20.09.2017 Островерхий заявка №б/н 
		|		И НЕ ПТЛ_ПланДоставкиМаршруты.НеОтправлятьНаТендер 
		//20.09.2017 Островерхий} 
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПТЛ_ПланДоставкиМаршруты.Ссылка
		|	
		|	ИМЕЮЩИЕ
		|		НЕ МИНИМУМ(ПТЛ_ПланДоставкиМаршруты.Рейс.GUIDТендернойПлощадки) = """") КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втШапкаТендера.Ссылка,
		|	втШапкаТендера.Name,
		|	втШапкаТендера.Type,
		|	втШапкаТендера.Result,
		|	втШапкаТендера.Form,
		|	втШапкаТендера.Currency,
//начало изменений Ожиганов А. 20.12.2016 б/н добавление информации по организатору тендера
		|	втШапкаТендера.ContactEmail,
//конец изменений
		//{30.03.2017 Островерхий заявка №63831 
        |	ЕСТЬNULL(втШапкаТендера.Ссылка.Отделение.ТП_ШагЦеныТендера, 0) КАК Step,
		|	0 КАК StepType,
		//30.03.2017 Островерхий} 
		|	втШапкаТендера.Note
		|ИЗ
		|	втШапкаТендера КАК втШапкаТендера
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПТЛ_ПланДоставкиМаршруты.Рейс.GUIDТендернойПлощадки КАК GUIDРейса,
		|	ПТЛ_ПланДоставкиМаршруты.Ссылка
		|ИЗ
		|	Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втШапкаТендера КАК втШапкаТендера
		|		ПО ПТЛ_ПланДоставкиМаршруты.Ссылка = втШапкаТендера.Ссылка
		|			И (НЕ ПТЛ_ПланДоставкиМаршруты.Исключен)
		|			И (НЕ ПТЛ_ПланДоставкиМаршруты.Самовывоз)
		//{20.09.2017 Островерхий заявка №б/н 
		|			И (НЕ ПТЛ_ПланДоставкиМаршруты.НеОтправлятьНаТендер)"; 
		//20.09.2017 Островерхий} 

	Результат = Запрос.ВыполнитьПакет();

	ВыборкаТендер = Результат[1].Выбрать();
	ВыгружаемыеРейсы = Результат[2].Выгрузить();
    Сч = 0;
	
	Пока ВыборкаТендер.Следующий() Цикл
		
		//ОбъектСерилизации_Рейс
		//начало изменений Ожиганов А. 20.12.2016 б/н добавление информации по организатору тендера
		//ОбъектСерилизации = Новый Структура("T,Name,Type,Services,Result,PublishDate,BeginDate,EndDate,Form,Currency,Note,ProLong,Requests",СтруктураНастроек.Токен,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,Новый Массив);
		//{30.03.2017 Островерхий заявка №63831 
		//ОбъектСерилизации = Новый Структура("T,Name,Type,Services,Result,PublishDate,BeginDate,EndDate,Form,Currency,ContactEmail,Note,ProLong,Requests",СтруктураНастроек.Токен,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,Новый Массив);
        ОбъектСерилизации = Новый Структура("T,Name,Type,Services,Result,PublishDate,BeginDate,EndDate,Form,Currency,ContactEmail,Note,ProLong,Requests,Step,StepType",СтруктураНастроек.Токен,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,Новый Массив,0,0);
		//30.03.2017 Островерхий} 
		//конец изменений 
        ЗаполнитьЗначенияСвойств(ОбъектСерилизации,ВыборкаТендер);
		
		Services = Новый Массив;
		Services.Добавить(2);
		Services.Добавить(3);
		ОбъектСерилизации.Services = Services;
		
		ОбъектСерилизации.PublishDate = Текущаядата();    
		ОбъектСерилизации.BeginDate = ОбъектСерилизации.PublishDate;
		//{05.06.2017 Островерхий заявка №65977 
		//ОбъектСерилизации.EndDate = ОбъектСерилизации.PublishDate+(60*60); 
		ОбъектСерилизации.EndDate = ОбъектСерилизации.PublishDate+(40*60);
		//05.06.2017 Островерхий} 

		//{17.11.2016 Островерхий заявка №б/н, усная просьба Овчинникова Станислава 
		ОбъектСерилизации.ProLong = 1; //переторг = 1 минута
		//17.11.2016 Островерхий} 
		
		//Requests
		Requests = Новый Массив;
		
		//Trips_Cargos
		Строки = ВыгружаемыеРейсы.НайтиСтроки(Новый Структура("Ссылка",ВыборкаТендер.Ссылка));
		
		Для каждого ТекСтрока Из Строки Цикл
			Requests.Добавить(ТекСтрока.GUIDРейса);
		КонецЦикла; 
		
		ОбъектСерилизации.Requests = Requests;
		
		//Установим эклюзивную блокировку на план доставки
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПТЛ_ПланДоставки");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаТендер.Ссылка);
		Блокировка.Заблокировать();
		
		Request = ЗаписатьJSON(ОбъектСерилизации);
		
		ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/tender.svc/JSON/Create"))[0];
		Response = HTTPPOST(ПараметрыМетода,Request);
		JSONОбъект = ПрочитатьJSON(Response.ResponseText);
		
		//начало изменений Ожиганов А. 19.12.2016 60359 использование полей гео и стреет при передачи в логинет
		//конкретизируем ошибку
		//ПроверитьВхождениеВКоллекциюПоКлючу("D", JSONОбъект,"/WCFService/tender.svc/JSON/Create");  
		//ПроверитьВхождениеВКоллекциюПоКлючу("TId", JSONОбъект.Получить("D"),"/WCFService/tender.svc/JSON/Create"); 
		ПроверитьВхождениеВКоллекциюПоКлючу("D", JSONОбъект,"/WCFService/tender.svc/JSON/Create" + " тенд. "+ВыборкаТендер.Ссылка);  
		ПроверитьВхождениеВКоллекциюПоКлючу("TId", JSONОбъект.Получить("D"),"/WCFService/tender.svc/JSON/Create" +" тенд. "+ВыборкаТендер.Ссылка); 
		//конец изменений 
		ПроверитьРавенство(Response.КодСостояния, 200); //Ответ должен быть HTTP/1.1 200 OK
		
		GUIDТендера = Строка(JSONОбъект.Получить("D").Получить("TId"));
		
		Если НЕ GUIDТендера = "00000000-0000-0000-0000-000000000000"
			И НЕ GUIDТендера = "" Тогда
			
			ТендерОбъект = ВыборкаТендер.Ссылка.ПолучитьОбъект();
			ТендерОбъект.GUIDТендернойПлощадки = GUIDТендера;
			
			Если ВыборкаТендер.Ссылка.GUIDТендернойПлощадки = ""
				ИЛИ СтруктураНастроек.РежимОтладки Тогда
				ТендерОбъект.Записать();
			КонецЕсли; 
			
		КонецЕсли; 		
		
		ЗафиксироватьИзменениеСтатусаОбъектаОбмена(ВыборкаТендер.Ссылка,1);
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//начало изменений Ожиганов А. 19.12.2016 60359 использование полей гео и стреет при передачи в логинет
//Функция СерилизироватьПоТипуLoading_unLoading(Date=NULL,CustomerInn=NULL,CustomerName=NULL,АП=NULL,Raw=NULL)
Функция СерилизироватьПоТипуLoading_unLoading(Date=NULL,CustomerInn=NULL,CustomerName=NULL,АП=NULL,Raw=NULL,НасПункт=Null,Регион=Null)
//конец изменений 	

	//начало изменений Ожиганов А. 19.12.2016 60359 использование полей гео и стреет при передачи в логинет
	//ОбъектСерилизации = Новый Структура("Date,CustomerInn,CustomerName,Address",Date,CustomerInn,CustomerName,Новый Структура("Street,Block,Building,Geo,Raw",NULL,NULL,NULL,NULL,Raw));
	Street = NULL;
	Geo    = NULL;
	Если ПРГ_ВыгружатьРегионИГород и НасПункт <> NULL Тогда
	   //начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера и время подачи тс
	   НасПункт = УбратьСокращение(НасПункт);
 	   //конец изменений 
		Geo = ""+НасПункт;
		Street = Raw;
		Если Не ПРГ_НеИспользоватьРегионВГороде и Регион <> NULL и Geo <> "" тогда
			АРегион = СокрЛ(Регион);
			Если Нрег(Лев(АРегион,5)) = "город" Тогда
				АРегион = СокрЛ(Сред(АРегион,6));
			КонецЕсли;	
			//начало изменений Ожиганов А. 20.12.2016 60359 использование полей гео и стреет при передачи в логинет
			//забыли про республику в регионх
			Если Нрег(Лев(АРегион,10)) = "республика" Тогда
				АРегион = СокрЛ(Сред(АРегион,11));
			КонецЕсли;	
			//конец изменений 
			Geo = Geo+"+"+Лев(АРегион,4);
		КонецЕслИ;	
	КонецЕсли;	
		
	ОбъектСерилизации = Новый Структура("Date,CustomerInn,CustomerName,Address",Date,CustomerInn,CustomerName,
		Новый Структура("Street,Block,Building,Geo,Raw",Street,NULL,NULL,Geo,Raw));
	//конец изменений 
	
	Возврат ОбъектСерилизации;	
	
КонецФункции // СерилизироватьПоТипуLoading_unLoading()

Процедура ЗафиксироватьИзменениеСтатусаОбъектаОбмена(ОбъектОбмена,Статус,ОписаниеОшибки="")

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних.Статус,
		|	ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних.ОписаниеОшибки
		|ИЗ
		|	РегистрСведений.ТП_СтатусыОбъектовТендернойПлощадки.СрезПоследних(, Объект = &Объект) КАК ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних";

	Запрос.УстановитьПараметр("Объект", ОбъектОбмена);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    ВыборкаДетальныеЗаписи.Следующий();
	
	Если Результат.Пустой()
		ИЛИ НЕ ВыборкаДетальныеЗаписи.Статус = Статус
		ИЛИ НЕ ВыборкаДетальныеЗаписи.ОписаниеОшибки = ОписаниеОшибки Тогда
	
		НаборЗаписей = РегистрыСведений.ТП_СтатусыОбъектовТендернойПлощадки.СоздатьМенеджерЗаписи();
		НаборЗаписей.Период = ТекущаяДата();
		НаборЗаписей.Объект = ОбъектОбмена;
		НаборЗаписей.Статус = Статус;
		НаборЗаписей.ОписаниеОшибки = ОписаниеОшибки;
		
		НаборЗаписей.Записать(Истина);
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура СохранитьИнформациюПоСтавке(Рейс,КонтрагентGUID,Ставка,ДатаСтавки)

	//начало изменений Ожиганов А. 09.02.2017 исправление ошибки одинаковое время ставки 
	//определим дату внесения информации
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТП_СтавкиПоРейсам.Рейс,
	                      |	ТП_СтавкиПоРейсам.Контрагент,
	                      |	ТП_СтавкиПоРейсам.ДатаСтавки,
	                      |	ЕСТЬNULL(МАКСИМУМ(ТП_СтавкиПоРейсам.ДатаВнесенияИнфо), &ТекДата) КАК ДатаВнесенияИнфо,
	                      |	ЕСТЬNULL(СУММА(ВЫБОР
	                      |				КОГДА ТП_СтавкиПоРейсам.Ставка = &Ставка
	                      |					ТОГДА 1
	                      |				ИНАЧЕ 0
	                      |			КОНЕЦ), 0) КАК ЕстьСтавка
	                      |ИЗ
	                      |	РегистрСведений.ТП_СтавкиПоРейсам КАК ТП_СтавкиПоРейсам
	                      |ГДЕ
	                      |	ТП_СтавкиПоРейсам.Рейс = &Рейс
	                      |	И ТП_СтавкиПоРейсам.Контрагент = &Контрагент
	                      |	И ТП_СтавкиПоРейсам.ДатаСтавки = &ДатаСтавки
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ТП_СтавкиПоРейсам.Контрагент,
	                      |	ТП_СтавкиПоРейсам.Рейс,
	                      |	ТП_СтавкиПоРейсам.ДатаСтавки");
						  
	Запрос.УстановитьПараметр("Рейс",Рейс);
	Запрос.УстановитьПараметр("Контрагент",НайтиКонтрагента(КонтрагентGUID));
	Запрос.УстановитьПараметр("ДатаСтавки",ДатаСтавки);
	Запрос.УстановитьПараметр("ТекДата",ТекущаяДата()-1);
	Запрос.УстановитьПараметр("Ставка",Ставка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	МаксДатаИнфо  =  ТекущаяДата();
	Если Выборка.Следующий() Тогда
		МаксДатаИнфо = Выборка.ДатаВнесенияИнфо+1;
		Если Выборка.ЕстьСтавка > 0 Тогда
			возврат;
		КонецЕсли;	
	КонецЕсли;		
	//конец изменений 
	
	НаборЗаписей = РегистрыСведений.ТП_СтавкиПоРейсам.СоздатьМенеджерЗаписи();
	НаборЗаписей.Период = ТекущаяДата();
	НаборЗаписей.Рейс = Рейс;
	НаборЗаписей.Контрагент = НайтиКонтрагента(КонтрагентGUID);
	НаборЗаписей.Ставка = Ставка;
	
	НаборЗаписей.ДатаСтавки = ДатаСтавки;
	//начало изменений Ожиганов А. 09.02.2017 исправление ошибки одинаковое время ставки 
	НаборЗаписей.ДатаВнесенияИнфо = МаксДатаИнфо;
	//конец изменений 
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ЗагрузитьИнформациюОРейсе(ОбновлятьИнформациюОТСИВодителеВПланеДоставки=Ложь,ПланДоставкиСсылка=Неопределено)
	
	ПроверитьЗаполненность(СтруктураНастроек.Токен,"Токен пустой.");
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПТЛ_ПланДоставкиМаршруты.Ссылка КАК Ссылка,
		|	ПТЛ_ПланДоставкиМаршруты.Рейс
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
		|ГДЕ
		|	НЕ ПТЛ_ПланДоставкиМаршруты.Ссылка.GUIDТендернойПлощадки = """"
		|	И (НЕ &НеИспользоватьОтборПоПлануДоставки
		|			ИЛИ ПТЛ_ПланДоставкиМаршруты.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ПТЛ_СтатусыПланаДоставки.Тендер))
		|	И (&НеИспользоватьОтборПоПлануДоставки
		|			ИЛИ ПТЛ_ПланДоставкиМаршруты.Ссылка = &ПланДоставкиСсылка)
		//{15.03.2017 Островерхий заявка №б/н, оптимизируем использование метода rest api (/WCFService/sr.svc/JSON/InfoBatch). Получаем информацию только о рейсах дата завершения тендера которых в пределах 36 часов  
		//начало изменений Ожиганов 18.03.2017 исправление ошибки  ОбновлятьИнформациюОТСИВодителеВПланеДоставки = истиа
		//|	И (ПТЛ_ПланДоставкиМаршруты.Ссылка.ТП_ПланируемаяДатаЗавершенияТендера = ДатаВремя(1,1,1) ИЛИ ДОБАВИТЬКДАТЕ(ПТЛ_ПланДоставкиМаршруты.Ссылка.ТП_ПланируемаяДатаЗавершенияТендера, ЧАС, 36) >= &ТекущаяДата)
		|И 
		|(&НеИспользоватьОтборПоПлануДоставки И
		|(ПТЛ_ПланДоставкиМаршруты.Ссылка.ТП_ПланируемаяДатаЗавершенияТендера = ДАТАВРЕМЯ(1, 1, 1)
		|	ИЛИ ДОБАВИТЬКДАТЕ(ПТЛ_ПланДоставкиМаршруты.Ссылка.ТП_ПланируемаяДатаЗавершенияТендера, ЧАС, 24) >= &ТекущаяДата
		|	ИЛИ КОНЕЦПЕРИОДА(ПТЛ_ПланДоставкиМаршруты.Ссылка.ДатаОтгрузки, ДЕНЬ) >= &ТекущаяДата)
		|или Не &НеИспользоватьОтборПоПлануДоставки 
		|)
		|
		//конец изменений  
		//15.03.2017 Островерхий} 
		|
		|СГРУППИРОВАТЬ ПО
		|	ПТЛ_ПланДоставкиМаршруты.Ссылка,
		|	ПТЛ_ПланДоставкиМаршруты.Рейс
		|
		|ИМЕЮЩИЕ
		|	НЕ ПТЛ_ПланДоставкиМаршруты.Рейс.GUIDТендернойПлощадки = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних.Объект КАК ПланДоставкиСсылка,
		|	ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних.Статус
		|ПОМЕСТИТЬ втСтатусыТендеров
		|ИЗ
		|	РегистрСведений.ТП_СтатусыОбъектовТендернойПлощадки.СрезПоследних(
		|			,
		|			Объект В
		|				(ВЫБРАТЬ
		|					вт.Ссылка КАК Ссылка
		|				ИЗ
		|					вт КАК вт
		|				СГРУППИРОВАТЬ ПО
		|							вт.Ссылка)) КАК ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних.Объект КАК РейсСсылка,
		|	ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних.Статус
		|ПОМЕСТИТЬ втСтатусыРейсов
		|ИЗ
		|	РегистрСведений.ТП_СтатусыОбъектовТендернойПлощадки.СрезПоследних(
		|			,
		|			Объект В
		|				(ВЫБРАТЬ
		|					вт.Рейс КАК Рейс
		|				ИЗ
		|					вт КАК вт
		|				СГРУППИРОВАТЬ ПО
		|							вт.Рейс)) КАК ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.Ссылка,
		|	вт.Ссылка.GUIDТендернойПлощадки КАК GUIDТендернойПлощадки
		|ИЗ
		|	вт КАК вт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтатусыТендеров КАК втСтатусыТендеров
		|		ПО вт.Ссылка = втСтатусыТендеров.ПланДоставкиСсылка
		|			И (втСтатусыТендеров.Статус > 4)
		|
		|СГРУППИРОВАТЬ ПО
		|	вт.Ссылка,
		|	вт.Ссылка.GUIDТендернойПлощадки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.Рейс,
		|	вт.Рейс.GUIDТендернойПлощадки КАК GUIDТендернойПлощадки,
		|	вт.Ссылка КАК Ссылка
		|ИЗ
		|	вт КАК вт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтатусыТендеров КАК втСтатусыТендеров
		|		ПО вт.Ссылка = втСтатусыТендеров.ПланДоставкиСсылка
		|			И (втСтатусыТендеров.Статус > 4)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтатусыРейсов КАК втСтатусыРейсов
		|		ПО вт.Рейс = втСтатусыРейсов.РейсСсылка
		|			И (втСтатусыРейсов.Статус МЕЖДУ 9 И 11)
		|
		|СГРУППИРОВАТЬ ПО
		|	вт.Рейс,
		|	вт.Рейс.GUIDТендернойПлощадки,
		|	вт.Ссылка
		|ИТОГИ ПО
		|	Ссылка";

	Запрос.УстановитьПараметр("ПланДоставкиСсылка",ПланДоставкиСсылка);
	Запрос.УстановитьПараметр("НеИспользоватьОтборПоПлануДоставки",ПланДоставкиСсылка=Неопределено);
	
	//{15.03.2017 Островерхий заявка №б/н, оптимизируем использование метода rest api (/WCFService/sr.svc/JSON/InfoBatch).  
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата()); 
	//15.03.2017 Островерхий} 
	
	Результат = Запрос.ВыполнитьПакет();

	ВыборкаТендер = Результат[1].Выбрать();
	ВыгружаемыеРейсыПоПланамДоставки = Результат[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//начало изменений Ожиганов А. 09.02.2017 добавление доп загрузки по контрагенту и InfoBatch  
	Если ТипЗнч(НакоплОшибки) <> Тип("Массив") Тогда
		НакоплОшибки = Новый Массив;
	КонецЕсли;	
	//конец изменений 
	//Установим эклюзивную блокировку на план доставки
	НачатьТранзакцию(); 
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ПТЛ_ПланДоставки");
	ЭлементБлокировки.ИсточникДанных = Результат[3];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	Блокировка.Заблокировать();
	
	///WCFService/tender.svc/JSON/Details
    //Пока ВыборкаТендер.Следующий() Цикл
		
		//{28.09.2016 Островерхий заявка №б/н 
		//ОбъектСерилизации = Новый Структура("T,P",СтруктураНастроек.Токен,ВыборкаТендер.GUIDТендернойПлощадки);
		
		//Request = ЗаписатьJSON(ОбъектСерилизации);
		//
		//ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/tender.svc/JSON/Details"))[0];
		//Response = HTTPPOST(ПараметрыМетода,Request);
		//JSONОбъект = ПрочитатьJSON(Response.ResponseText);
		//
		//ПроверитьВхождениеВКоллекциюПоКлючу("D", JSONОбъект,"/WCFService/tender.svc/JSON/Details");  
		//ПроверитьВхождениеВКоллекциюПоКлючу("Sts", JSONОбъект.Получить("D"),"/WCFService/tender.svc/JSON/Details"); 
		//ПроверитьРавенство(Response.КодСостояния, 200, "/WCFService/tender.svc/JSON/Details"); //Ответ должен быть HTTP/1.1 200 OK
		//
		//СтатусТендера = ПолучитьИндексСтатусТендера(Строка(JSONОбъект.Получить("D").Получить("Sts"))); 		
		//Если НЕ СтатусТендера = "" Тогда
		//	ЗафиксироватьИзменениеСтатусаОбъектаОбмена(ВыборкаТендер.Ссылка,СтатусТендера);
		//КонецЕсли;
		//28.09.2016 Островерхий} 
		
				
	//КонецЦикла;
	
	Пока ВыгружаемыеРейсыПоПланамДоставки.Следующий() Цикл
		
		ОтгрузкиПоРейсам = СформироватьТаблицуОтгрузокПоРейсам(ВыгружаемыеРейсыПоПланамДоставки.Ссылка);
		ПланДоставкиОбъект = ВыгружаемыеРейсыПоПланамДоставки.Ссылка.ПолучитьОбъект();
		
		ВыгружаемыеРейсыДетальныеЗаписи = ВыгружаемыеРейсыПоПланамДоставки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		МассивВыгружаемыхРейсов = Новый Массив;
		
		Пока ВыгружаемыеРейсыДетальныеЗаписи.Следующий() Цикл
			//
			МассивВыгружаемыхРейсов.Добавить(ВыгружаемыеРейсыДетальныеЗаписи.GUIDТендернойПлощадки);
		КонецЦикла; 
	
		ОбъектСерилизации = Новый Структура("T,DD",СтруктураНастроек.Токен,МассивВыгружаемыхРейсов);
		
		Request = ЗаписатьJSON(ОбъектСерилизации);
		
		ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/sr.svc/JSON/InfoBatch"))[0];
		Response = HTTPPOST(ПараметрыМетода,Request);
		JSONОбъект = ПрочитатьJSON(Response.ResponseText);
		
		ПроверитьВхождениеВКоллекциюПоКлючу("DD", JSONОбъект,"/WCFService/sr.svc/JSON/InfoBatch");  
		ПроверитьРавенство(Response.КодСостояния, 200,"/WCFService/sr.svc/JSON/InfoBatch"); //Ответ должен быть HTTP/1.1 200 OK
		
		Для каждого ЭлементМассива Из JSONОбъект.Получить("DD") Цикл
			
			ПроверитьВхождениеВКоллекциюПоКлючу("Id", ЭлементМассива,"/WCFService/sr.svc/JSON/InfoBatch");
			ПроверитьВхождениеВКоллекциюПоКлючу("Sts", ЭлементМассива,"/WCFService/sr.svc/JSON/InfoBatch");	
			
			СтатусРейса = ЭлементМассива.Получить("Sts");
			
			//Не обновляем информацию о рейсе по которым была отгрузка
			Если НЕ ОбновлятьИнформациюОТСИВодителеВПланеДоставки Тогда
			
				тОтгрузкиПоРейсам = ОтгрузкиПоРейсам.НайтиСтроки(Новый Структура("РейсGUIDТендернойПлощадки", Строка(ЭлементМассива.Получить("Id"))));
				Если тОтгрузкиПоРейсам.Количество()>0 И тОтгрузкиПоРейсам[0].ЕстьДокументыОтгрузки Тогда
					Продолжить;
				КонецЕсли; 
			
			КонецЕсли; 
						
			НайденнаяСсылка = Справочники.ПТЛ_Рейсы.НайтиПоРеквизиту("GUIDТендернойПлощадки", Строка(ЭлементМассива.Получить("Id")));
			
			Если НЕ НайденнаяСсылка.Пустая() И НЕ СтатусРейса = "" Тогда
				ЗафиксироватьИзменениеСтатусаОбъектаОбмена(НайденнаяСсылка,СтатусРейса);
			КонецЕсли; 
			
			//Внесем информацию об автомобиле и водителе.
			СтрокиПланаДоставки = ПланДоставкиОбъект.Маршруты.НайтиСтроки(Новый Структура("Рейс",НайденнаяСсылка));
			
			Для каждого ТекСтрокаПлана Из СтрокиПланаДоставки Цикл
				
				//начало изменений Ожиганов А. 09.02.2017 добавление доп загрузки по контрагенту и InfoBatch  
				//принудительное информации обновления ставки
				//начало изменений Ожиганов А. 09.02.2017 добавление доп загрузки по контрагенту и InfoBatch  
				//принудительное информации обновления ставки
				Если НЕ ОбновлятьИнформациюОТСИВодителеВПланеДоставки
					и Не ТекСтрокаПлана.Исключен
				   Тогда
					Если Не ЗначениеЗаполнено(ТекСтрокаПлана.ТЭК)
					Тогда
						//начало изменений Ожиганов А. 09.02.2017 добавление доп загрузки по контрагенту и InfoBatch  
						ТекКонтр =  НайтиКонтрПоИННКПП(ЭлементМассива.Получить("INN"),ЭлементМассива.Получить("KPP"));
						//конец изменений 
						Если ЗначениеЗаполнено(ТекКонтр) Тогда
							ТекСтрокаПлана.ТЭК = ТекКонтр;
							НакоплОшибки.Добавить("По рейсу "+ТекСтрокаПлана.Рейс+" был пустой контрагент. 
								| стал "+ ТекСтрокаПлана.ТЭК);
						КонецЕсли;	
					КонецЕсли;	
					Если ТекСтрокаПлана.СтоимостьПеревозки = 0 и ЗначениеЗаполнено(ТекСтрокаПлана.ТЭК) Тогда
						ТекСтавка = ЭлементМассива.Получить("Price");
						Если ТипЗнч(ТекСтавка) <> Тип("Число") тогда
							ТекСтавка = 0;
						КонецЕсли;	
						Если ТекСтавка > 0 Тогда
							ТекСтрокаПлана.СтоимостьПеревозки = ТекСтавка;
							НакоплОшибки.Добавить("По рейсу "+ТекСтрокаПлана.Рейс+" была нулевая ставка. 
								| стала "+ ТекСтавка);
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
				//конец изменений 
				
				Если ТекСтрокаПлана.Водитель.Пустая() Тогда
					ТекСтрокаПлана.Водитель = НайтиСоздатьВодителя(ЭлементМассива);	
				Иначе
					тВодитель = НайтиСоздатьВодителя(ЭлементМассива);	
					Если ОбновлятьИнформациюОТСИВодителеВПланеДоставки
						И НЕ ТекСтрокаПлана.Водитель = тВодитель Тогда
						
						ТекСтрокаПлана.Водитель = тВодитель;
						
						#Если Клиент Тогда
							Сообщить("По рейсу - "+Строка(НайденнаяСсылка)+" изменен водитель.",СтатусСообщения.Информация);					
						#КонецЕсли 
						
					КонецЕсли; 
				КонецЕсли; 
				
				тТранспортноеСредство = НайтиСоздатьТранспортноеСредство(ЭлементМассива,ТекСтрокаПлана.ТипТранспорта);
				Если ТекСтрокаПлана.ТранспортноеСредство.Пустая() Тогда
					ТекСтрокаПлана.ТранспортноеСредство = тТранспортноеСредство;	
				Иначе
					
					Если ОбновлятьИнформациюОТСИВодителеВПланеДоставки
						И НЕ ТекСтрокаПлана.ТранспортноеСредство = тТранспортноеСредство Тогда
						
						ТекСтрокаПлана.ТранспортноеСредство = тТранспортноеСредство;
						
						#Если Клиент Тогда
							Сообщить("По рейсу - "+Строка(НайденнаяСсылка)+" изменено ТС.",СтатусСообщения.Информация);					
						#КонецЕсли 
						
					КонецЕсли; 
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЦикла; 
		
		//Если объект отличается от ссылки то запишем изменения.
		Если ПроверитьМодифицированЛиОбъект(ПланДоставкиОбъект) Тогда
			ПланДоставкиОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		//{16.11.2016 Островерхий заявка №б/н 
		ПланДоставкиОбъект.ОбновитьЖурналыУчетаАМ(Ложь); 
		//16.11.2016 Островерхий} 
			
	КонецЦикла; 
	
	///WCFService/sr.svc/JSON/InfoBatch
	//Если ВыгружаемыеРейсы.Количество() > 0 Тогда
	//	
	//	ПланДоставкиОбъект = ВыборкаТендер.Ссылка.ПолучитьОбъект();
	//	
	//	ОбъектСерилизации = Новый Структура("T,DD",СтруктураНастроек.Токен,ВыгружаемыеРейсы);
	//	
	//	Request = ЗаписатьJSON(ОбъектСерилизации);
	//	
	//	ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/sr.svc/JSON/InfoBatch"))[0];
	//	Response = HTTPPOST(ПараметрыМетода,Request);
	//	JSONОбъект = ПрочитатьJSON(Response.ResponseText);
	//	
	//	ПроверитьВхождениеВКоллекциюПоКлючу("DD", JSONОбъект,"/WCFService/sr.svc/JSON/InfoBatch");  
	//	ПроверитьРавенство(Response.КодСостояния, 200,"/WCFService/sr.svc/JSON/InfoBatch"); //Ответ должен быть HTTP/1.1 200 OK
	//	
	//	Для каждого ЭлементМассива Из JSONОбъект.Получить("DD") Цикл
	//		
	//		ПроверитьВхождениеВКоллекциюПоКлючу("Id", ЭлементМассива,"/WCFService/sr.svc/JSON/InfoBatch");
	//		ПроверитьВхождениеВКоллекциюПоКлючу("Sts", ЭлементМассива,"/WCFService/sr.svc/JSON/InfoBatch");	
	//		
	//		СтатусРейса = ЭлементМассива.Получить("Sts");
	//		
	//		НайденнаяСсылка = Справочники.ПТЛ_Рейсы.НайтиПоРеквизиту("GUIDТендернойПлощадки", Строка(ЭлементМассива.Получить("Id")));
	//		
	//		Если НЕ НайденнаяСсылка.Пустая() И НЕ СтатусРейса = "" Тогда
	//			ЗафиксироватьИзменениеСтатусаОбъектаОбмена(НайденнаяСсылка,СтатусРейса);
	//		КонецЕсли; 
	//		
	//		//Внесем информацию об автомобиле и водителе.
	//		СтрокиПланаДоставки = ПланДоставкиОбъект.Маршруты.НайтиСтроки(Новый Структура("Рейс",НайденнаяСсылка));
	//		
	//		Для каждого ТекСтрокаПлана Из СтрокиПланаДоставки Цикл
	//			
	//			Если ТекСтрокаПлана.Водитель.Пустая() Тогда
	//				ТекСтрокаПлана.Водитель = НайтиСоздатьВодителя(ЭлементМассива);	
	//			Иначе
	//				тВодитель = НайтиСоздатьВодителя(ЭлементМассива);	
	//				Если ОбновлятьИнформациюОТСИВодителеВПланеДоставки
	//					И НЕ ТекСтрокаПлана.Водитель = тВодитель Тогда
	//					
	//					ТекСтрокаПлана.Водитель = тВодитель;
	//					
	//					#Если Клиент Тогда
	//						Сообщить("По рейсу - "+Строка(НайденнаяСсылка)+" изменен водитель.",СтатусСообщения.Информация);					
	//					#КонецЕсли 
	//					
	//				КонецЕсли; 
	//			КонецЕсли; 
	//			
	//			тТранспортноеСредство = НайтиСоздатьТранспортноеСредство(ЭлементМассива,ТекСтрокаПлана.ТипТранспорта);
	//			Если ТекСтрокаПлана.ТранспортноеСредство.Пустая() Тогда
	//				ТекСтрокаПлана.ТранспортноеСредство = тТранспортноеСредство;	
	//			Иначе
	//				
	//				Если ОбновлятьИнформациюОТСИВодителеВПланеДоставки
	//					И НЕ ТекСтрокаПлана.ТранспортноеСредство = тТранспортноеСредство Тогда
	//					
	//					ТекСтрокаПлана.ТранспортноеСредство = тТранспортноеСредство;
	//					
	//					#Если Клиент Тогда
	//						Сообщить("По рейсу - "+Строка(НайденнаяСсылка)+" изменено ТС.",СтатусСообщения.Информация);					
	//					#КонецЕсли 
	//					
	//				КонецЕсли; 
	//			КонецЕсли;
	//			
	//		КонецЦикла; 
	//		
	//	КонецЦикла; 
	//	
	//	//Если объект отличается от ссылки то запишем изменения.
	//	Если ПроверитьМодифицированЛиОбъект(ПланДоставкиОбъект) Тогда
	//		ПланДоставкиОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//	КонецЕсли; 
	//	
	//КонецЕсли; 
	
	Если ТранзакцияАктивна() Тогда               
		ЗафиксироватьТранзакцию();	
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТаблицуОтгрузокПоРейсам(ПланДоставкиСсылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СП_ЗаданиеНаПодбор.Ссылка,
		|	СП_ЗаданиеНаПодбор.Получатель,
		|	СП_ЗаданиеНаПодбор.Склад,
		|	ВложенныйЗапрос.Рейс,
		|	ВложенныйЗапрос.РейсGUIDТендернойПлощадки
		|ПОМЕСТИТЬ ЗаданиеНаПодбор
		|ИЗ
		|	Документ.СП_ЗаданиеНаПодбор КАК СП_ЗаданиеНаПодбор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПТЛ_ПланДоставкиМаршруты.Ссылка КАК Ссылка,
		|			ПТЛ_ПланДоставкиМаршруты.Рейс КАК Рейс,
		|			ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
		|			ПТЛ_ПланДоставкиМаршруты.Рейс.GUIDТендернойПлощадки КАК РейсGUIDТендернойПлощадки
		|		ИЗ
		|			Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
		|				ПО ПТЛ_ПланДоставкиМаршруты.Ссылка = ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка
		|					И ПТЛ_ПланДоставкиМаршруты.КлючСтроки = ПТЛ_ПланДоставкиЗаданияНаПеревозку.КлючСтроки
		|					И (ПТЛ_ПланДоставкиМаршруты.Ссылка = &Ссылка)) КАК ВложенныйЗапрос
		|		ПО СП_ЗаданиеНаПодбор.Ссылка = ВложенныйЗапрос.ЗаданиеНаПеревозку.ЗаданиеНаПодбор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровУслуг.Ссылка,
		|	ЗаданиеНаПодбор.Рейс,
		|	ЗаданиеНаПодбор.РейсGUIDТендернойПлощадки
		|ПОМЕСТИТЬ втОтгрузки
		|ИЗ
		|	ЗаданиеНаПодбор КАК ЗаданиеНаПодбор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ЗаданиеНаПодбор.Ссылка = РеализацияТоваровУслуг.СП_ЗаданиеНаПодбор
		|			И (РеализацияТоваровУслуг.Проведен)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТребованиеНакладная.Ссылка,
		|	ЗаданиеНаПодбор.Рейс,
		|	ЗаданиеНаПодбор.РейсGUIDТендернойПлощадки
		|ИЗ
		|	ЗаданиеНаПодбор КАК ЗаданиеНаПодбор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТребованиеНакладная КАК ТребованиеНакладная
		|		ПО ЗаданиеНаПодбор.Ссылка = ТребованиеНакладная.СП_ЗаданиеНаПодбор
		|			И (ТребованиеНакладная.Проведен)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка,
		|	ЗаданиеНаПодбор.Рейс,
		|	ЗаданиеНаПодбор.РейсGUIDТендернойПлощадки
		|ИЗ
		|	ЗаданиеНаПодбор КАК ЗаданиеНаПодбор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ПО ЗаданиеНаПодбор.Ссылка = ПеремещениеТоваров.СП_ЗаданиеНаПодбор
		|			И (ПеремещениеТоваров.Проведен)
		|			И ЗаданиеНаПодбор.Склад = ПеремещениеТоваров.СкладОтправитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОтгрузки.Рейс,
		|	втОтгрузки.РейсGUIDТендернойПлощадки,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втОтгрузки.Ссылка) > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьДокументыОтгрузки
		|ИЗ
		|	втОтгрузки КАК втОтгрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	втОтгрузки.Рейс,
		|	втОтгрузки.РейсGUIDТендернойПлощадки";

	Запрос.УстановитьПараметр("Ссылка",ПланДоставкиСсылка);	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;

КонецФункции 

Процедура ЗагрузитьИнформациюПоСтавкам()

	//Загрузим информацию по ставкам
	ПроверитьЗаполненность(СтруктураНастроек.Токен,"Токен пустой.");
	
	ОбъектСерилизации = Новый Структура("T,DD",СтруктураНастроек.Токен,Новый Массив);

	Запрос = Новый Запрос;
//начало изменений Ожиганов А. б/н уменьшим количество загрузок информации по ставкам 05.12.2016 	
// будем загружать если продолжаются торги, есть безошибочные рейсы 
//рейс не сключен
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ПТЛ_ПланДоставки.Ссылка КАК Ссылка,
	//	|	ПТЛ_ПланДоставки.GUIDТендернойПлощадки
	//	|ИЗ
	//	|	Документ.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	//	|ГДЕ
	//	|	НЕ ПТЛ_ПланДоставки.GUIDТендернойПлощадки = """"
	//	|	И ПТЛ_ПланДоставки.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ПТЛ_СтатусыПланаДоставки.Тендер)
	//	|	И ПТЛ_ПланДоставки.Проведен";
	
Запрос.Текст = "ВЫБРАТЬ
               |	ПТЛ_ПланДоставкиМаршруты.Рейс,
               |	ПТЛ_ПланДоставкиМаршруты.Ссылка
               |ПОМЕСТИТЬ втРейсы
               |ИЗ
               |	Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
               |		ПО ПТЛ_ПланДоставкиМаршруты.Ссылка = ПТЛ_ПланДоставки.Ссылка
               |ГДЕ
               |	НЕ ПТЛ_ПланДоставки.GUIDТендернойПлощадки = """"
               |	И ПТЛ_ПланДоставки.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ПТЛ_СтатусыПланаДоставки.Тендер)
               |	И ПТЛ_ПланДоставки.Проведен
               |	И ПТЛ_ПланДоставкиМаршруты.СтоимостьПеревозки = 0
               |	И НЕ ПТЛ_ПланДоставкиМаршруты.Исключен
               |
               |СГРУППИРОВАТЬ ПО
               |	ПТЛ_ПланДоставкиМаршруты.Рейс,
               |	ПТЛ_ПланДоставкиМаршруты.Ссылка
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	СтатусыОбъектов.Объект,
               |	СтатусыОбъектов.Статус
               |ПОМЕСТИТЬ втСтатусыРейсов
               |ИЗ
               |	РегистрСведений.ТП_СтатусыОбъектовТендернойПлощадки.СрезПоследних(
               |			,
               |			Объект В
               |				(ВЫБРАТЬ
               |					втРейсы.Рейс
               |				ИЗ
               |					втРейсы)) КАК СтатусыОбъектов
               |ГДЕ
               |	СтатусыОбъектов.Статус <> 5
               |	И СтатусыОбъектов.Статус <> 6
               |	И СтатусыОбъектов.Статус <> 18
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ПТЛ_ПланДоставки.GUIDТендернойПлощадки как GUIDТендернойПлощадки,
               |	ПТЛ_ПланДоставки.Ссылка КАК Ссылка
               |ИЗ
               |	втРейсы КАК втРейсы
               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
               |		ПО втРейсы.Ссылка = ПТЛ_ПланДоставки.Ссылка
               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтатусыРейсов КАК втСтатусыРейсов
               |		ПО втРейсы.Рейс = втСтатусыРейсов.Объект
               |
               |СГРУППИРОВАТЬ ПО
               |	ПТЛ_ПланДоставки.Ссылка,
               |	ПТЛ_ПланДоставки.GUIDТендернойПлощадки";	
//конец изменений 		

	ОбъектСерилизации.DD = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("GUIDТендернойПлощадки");

	Если ОбъектСерилизации.DD.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	Request = ЗаписатьJSON(ОбъектСерилизации);
	
	ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/tender.svc/JSON/BidHistoryAllBatch"))[0];
	Response = HTTPPOST(ПараметрыМетода,Request);
	JSONОбъект = ПрочитатьJSON(Response.ResponseText);
	
	ПроверитьВхождениеВКоллекциюПоКлючу("DD", JSONОбъект,"/WCFService/tender.svc/JSON/BidHistoryAllBatch"); //Response.КодСостояния
	ПроверитьРавенство(Response.КодСостояния, 200,"/WCFService/tender.svc/JSON/BidHistoryAllBatch"); //Ответ должен быть HTTP/1.1 200 OK
	
	МассивIDКонтрагентов = Новый Массив;
	МассивIDРейсов = Новый Массив;

	Для каждого ЭлементМассива Из JSONОбъект.Получить("DD") Цикл
		
		IDКонтрагента = Строка(ЭлементМассива.Получить("Cid"));
		IDРейса = СтрЗаменить(Строка(ЭлементМассива.Получить("PI")),Символы.НПП,"");
		
		МассивIDКонтрагентов.Добавить(IDКонтрагента);
		МассивIDРейсов.Добавить(IDРейса);
		
	КонецЦикла;	

	Если JSONОбъект.Получить("DD").Количество() = 0 Тогда  //нет ставок, нет дальнейших запросов
		Возврат;	
	КонецЕсли; 
	
	//Свернем массивы
	УдалитьДублирующиеЭлементыМассива(МассивIDРейсов);
	
	//Синхронизируем контрагентов
	ЗаполнимGUIDКонтрагента(МассивIDКонтрагентов);
	
	//Получим GUIDы рейсов по ID номенклатуры тендера.
	СоответствиеID_GUIDРейсов = ПолучитьСоответствиеID_GUIDРейсов(ОбъектСерилизации.DD);
	
	//Сохраним ставки в РС ТП_СтавкиПоРейсам  
	Для каждого ЭлементМассива Из JSONОбъект.Получить("DD") Цикл
		
		IDКонтрагента = Строка(ЭлементМассива.Получить("Cid"));
		IDРейса = СтрЗаменить(Строка(ЭлементМассива.Получить("PI")),Символы.НПП,"");
		
		ПроверитьВхождениеВКоллекциюПоКлючу("P", ЭлементМассива,"/WCFService/tender.svc/JSON/BidHistoryAllBatch"); 
		
		//{08.09.2016 Островерхий заявка №б/н 
		//СохранитьИнформациюПоСтавке(Справочники.ПТЛ_Рейсы.НайтиПоРеквизиту("GUIDТендернойПлощадки",Строка(СоответствиеID_GUIDРейсов.Получить(IDРейса))),IDКонтрагента,ЭлементМассива.Получить("P"),ЭлементМассива.Получить("D"));
		СохранитьИнформациюПоСтавке(Справочники.ПТЛ_Рейсы.НайтиПоРеквизиту("GUIDТендернойПлощадки",Строка(СоответствиеID_GUIDРейсов.Получить(IDРейса))),IDКонтрагента,ЭлементМассива.Получить("P"),ЭлементМассива.Получить("D1"));
		//08.09.2016 Островерхий}
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьИнформациюПоСтатусамОбъектовОбмена()

	//Загрузим информацию по ставкам
	ПроверитьЗаполненность(СтруктураНастроек.Токен,"Токен пустой.");
	
	ОбъектСерилизации = Новый Структура("T,DD",СтруктураНастроек.Токен,Новый Массив);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПТЛ_ПланДоставки.Ссылка КАК Ссылка,
		|	ПТЛ_ПланДоставки.GUIDТендернойПлощадки
		|ИЗ
		|	Документ.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
		|ГДЕ
		|	НЕ ПТЛ_ПланДоставки.GUIDТендернойПлощадки = """"
		|	И ПТЛ_ПланДоставки.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ПТЛ_СтатусыПланаДоставки.Тендер)
		//{15.03.2017 Островерхий заявка №б/н, оптимизируем использование метода rest api (/WCFService/tender.svc/JSON/SRDetails). Получаем информацию в пределах 36 часов  
		//начало изменений Ожиганов 18.03.2017 исправление ситуации когда статус не обновлянтся из infobatch
		//|	И (ПТЛ_ПланДоставки.ТП_ПланируемаяДатаЗавершенияТендера = ДатаВремя(1,1,1) ИЛИ ДОБАВИТЬКДАТЕ(ПТЛ_ПланДоставки.ТП_ПланируемаяДатаЗавершенияТендера, ЧАС, 36) >= &ТекущаяДата)
		|	И (ПТЛ_ПланДоставки.ТП_ПланируемаяДатаЗавершенияТендера = ДатаВремя(1,1,1) ИЛИ ДОБАВИТЬКДАТЕ(ПТЛ_ПланДоставки.ТП_ПланируемаяДатаЗавершенияТендера, ЧАС, 24) >= &ТекущаяДата ИЛИ КОНЕЦПЕРИОДА(ПТЛ_ПланДоставки.ДатаОтгрузки, ДЕНЬ) >= &ТекущаяДата)
		//конец изменений  
		//15.03.2017 Островерхий}
		|	И ПТЛ_ПланДоставки.Проведен";

	//{15.03.2017 Островерхий заявка №б/н 
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата()); 
	//15.03.2017 Островерхий} 	
	
	ОбъектСерилизации.DD = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("GUIDТендернойПлощадки");

	Если ОбъектСерилизации.DD.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	Request = ЗаписатьJSON(ОбъектСерилизации);
	
	ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/tender.svc/JSON/SRDetails"))[0];
	Response = HTTPPOST(ПараметрыМетода,Request);
	JSONОбъект = ПрочитатьJSON(Response.ResponseText);
	
	ПроверитьВхождениеВКоллекциюПоКлючу("DD", JSONОбъект,"/WCFService/tender.svc/JSON/SRDetails"); 
	ПроверитьРавенство(Response.КодСостояния, 200,"/WCFService/tender.svc/JSON/SRDetails"); //Ответ должен быть HTTP/1.1 200 OK

	Для каждого ТекСтрока Из JSONОбъект.Получить("DD") Цикл
		
		тПланДоставки = Документы.ПТЛ_ПланДоставки.НайтиПоРеквизиту("GUIDТендернойПлощадки", Строка(ТекСтрока.Получить("Tid")));
		тСтатусТендера = ТекСтрока.Получить("Sts");
		
		Если НЕ тПланДоставки.Пустая() И НЕ тСтатусТендера = "" Тогда
			ЗафиксироватьИзменениеСтатусаОбъектаОбмена(тПланДоставки,тСтатусТендера);
		КонецЕсли; 
		
		Для каждого ТекЭлементМассива Из ТекСтрока.Получить("SRs") Цикл
			
			тРейс = Справочники.ПТЛ_Рейсы.НайтиПоРеквизиту("GUIDТендернойПлощадки", Строка(ТекЭлементМассива.Получить("Id")));
            тСтатусРейса = ТекЭлементМассива.Получить("Rst");

			Если НЕ тРейс.Пустая() И НЕ тСтатусРейса = "" Тогда
				ЗафиксироватьИзменениеСтатусаОбъектаОбмена(тРейс,тСтатусРейса);
			КонецЕсли;
			
		КонецЦикла; 	
		
	КонецЦикла; 

КонецПроцедуры

Процедура ЗагрузитьИнформациюПоТендерам()

	//Загрузим информацию о тендерах по которым идут торги 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПТЛ_ПланДоставки.Ссылка КАК Ссылка,
		|	ПТЛ_ПланДоставки.GUIDТендернойПлощадки
		|ПОМЕСТИТЬ втТендеры
		|ИЗ
		|	Документ.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
		|ГДЕ
		|	НЕ ПТЛ_ПланДоставки.GUIDТендернойПлощадки = """"
		|	И ПТЛ_ПланДоставки.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ПТЛ_СтатусыПланаДоставки.Тендер)
		|	И ПТЛ_ПланДоставки.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних.Объект,
		|	ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних.Статус
		|ПОМЕСТИТЬ втСтатусыТендеров
		|ИЗ
		|	РегистрСведений.ТП_СтатусыОбъектовТендернойПлощадки.СрезПоследних(
		|			,
		|			Объект В
		|				(ВЫБРАТЬ
		|					втТендеры.Ссылка КАК Ссылка
		|				ИЗ
		|					втТендеры КАК втТендеры
		|				СГРУППИРОВАТЬ ПО
		|							втТендеры.Ссылка)) КАК ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТендеры.Ссылка,
		|	втТендеры.GUIDТендернойПлощадки,
		|	втСтатусыТендеров.Статус
		|ИЗ
		|	втТендеры КАК втТендеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтатусыТендеров КАК втСтатусыТендеров
		|		ПО втТендеры.Ссылка = втСтатусыТендеров.Объект
		|			И (втСтатусыТендеров.Статус < 4)";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		//Установим эклюзивную блокировку на план доставки
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПТЛ_ПланДоставки");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		Блокировка.Заблокировать();
			
		ОбъектСерилизации = Новый Структура("T,P",СтруктураНастроек.Токен,ВыборкаДетальныеЗаписи.GUIDТендернойПлощадки);
		
		Request = ЗаписатьJSON(ОбъектСерилизации);
		
		ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/tender.svc/JSON/Details"))[0];
		Response = HTTPPOST(ПараметрыМетода,Request);
		JSONОбъект = ПрочитатьJSON(Response.ResponseText);
		
		ПроверитьВхождениеВКоллекциюПоКлючу("D", JSONОбъект,"/WCFService/tender.svc/JSON/Details");  
		ПроверитьВхождениеВКоллекциюПоКлючу("Sts", JSONОбъект.Получить("D"),"/WCFService/tender.svc/JSON/Details");
		ПроверитьВхождениеВКоллекциюПоКлючу("End", JSONОбъект.Получить("D"),"/WCFService/tender.svc/JSON/Details");
		ПроверитьРавенство(Response.КодСостояния, 200, "/WCFService/tender.svc/JSON/Details"); //Ответ должен быть HTTP/1.1 200 OK
		
		ТП_ПланируемаяДатаЗавершенияТендера = JSONОбъект.Получить("D").Получить("End");
		
		Если ЗначениеЗаполнено(ТП_ПланируемаяДатаЗавершенияТендера) Тогда
			
			ТендерОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ТендерОбъект.ТП_ПланируемаяДатаЗавершенияТендера = ТП_ПланируемаяДатаЗавершенияТендера;
			
			Если ПроверитьМодифицированЛиОбъект(ТендерОбъект) Тогда
				ТендерОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьИнформациюОВыбранныхСтавках()

	ПроверитьЗаполненность(СтруктураНастроек.Токен,"Токен пустой.");
	
	ОбъектСерилизации = Новый Структура("T,DDD",СтруктураНастроек.Токен,Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПТЛ_ПланДоставкиМаршруты.Ссылка КАК ПланДоставки,
		|	ПТЛ_ПланДоставкиМаршруты.Рейс
		|ПОМЕСТИТЬ втТендеры
		|ИЗ
		|	Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
		|ГДЕ
		|	НЕ ПТЛ_ПланДоставкиМаршруты.Ссылка.GUIDТендернойПлощадки = """"
		|	И ПТЛ_ПланДоставкиМаршруты.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ПТЛ_СтатусыПланаДоставки.Тендер)
		|	И ПТЛ_ПланДоставкиМаршруты.Ссылка.Проведен
		|	И НЕ ПТЛ_ПланДоставкиМаршруты.Исключен
		//{21.09.2017 Островерхий заявка №б/н 
		|	И НЕ ПТЛ_ПланДоставкиМаршруты.НеОтправлятьНаТендер 
		//21.09.2017 Островерхий} 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних.Объект КАК ПланДоставки,
		|	ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних.Статус
		|ПОМЕСТИТЬ втСтатусыТендеров
		|ИЗ
		|	РегистрСведений.ТП_СтатусыОбъектовТендернойПлощадки.СрезПоследних(
		|			,
		|			Объект В
		|				(ВЫБРАТЬ
		|					втТендеры.ПланДоставки КАК ПланДоставки
		|				ИЗ
		|					втТендеры КАК втТендеры
		|				СГРУППИРОВАТЬ ПО
		|							втТендеры.ПланДоставки)) КАК ТП_СтатусыОбъектовТендернойПлощадкиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТП_СтавкиПоРейсам.Рейс,
//начало изменений Ожиганов А. 10.01.2017 исправление ошибки наличия двух минимальных одинаковых ставок по разным контрагентам Рейс № 18 План № 147 от 10.01.2017
//		|	ТП_СтавкиПоРейсам.Контрагент,
		|	Минимум(ТП_СтавкиПоРейсам.Контрагент) как Контрагент,
//конец изменений 		
		|	ТП_СтавкиПоРейсам.Ставка
		|ПОМЕСТИТЬ втРейсыСМинимальнойСтавкой
		|ИЗ
		|	РегистрСведений.ТП_СтавкиПоРейсам КАК ТП_СтавкиПоРейсам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТП_СтавкиПоРейсам.Рейс КАК Рейс,
		|			МИНИМУМ(ТП_СтавкиПоРейсам.Ставка) КАК МинимальнаяСтавка
		|		ИЗ
		|			РегистрСведений.ТП_СтавкиПоРейсам КАК ТП_СтавкиПоРейсам
		|		ГДЕ
		|			ТП_СтавкиПоРейсам.Рейс В
		|					(ВЫБРАТЬ
		|						втТендеры.Рейс КАК Рейс
		|					ИЗ
		|						втТендеры КАК втТендеры)
		|			И ТП_СтавкиПоРейсам.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.Неопределен)
		|			И ТП_СтавкиПоРейсам.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТП_СтавкиПоРейсам.Рейс) КАК ВложенныйЗапрос
		|		ПО ТП_СтавкиПоРейсам.Рейс = ВложенныйЗапрос.Рейс
		|			И ТП_СтавкиПоРейсам.Ставка = ВложенныйЗапрос.МинимальнаяСтавка
		|ГДЕ
		|	ТП_СтавкиПоРейсам.Рейс В
		|			(ВЫБРАТЬ
		|				втТендеры.Рейс КАК Рейс
		|			ИЗ
		|				втТендеры КАК втТендеры)
		|	И НЕ ТП_СтавкиПоРейсам.Контрагент В
		|				(ВЫБРАТЬ
		|					ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК КонтрагентСсылка
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ЗНАЧЕНИЕ(Справочник.Контрагенты.Неопределен))
//начало изменений Ожиганов А. 10.01.2017 исправление ошибки наличия двух минимальных одинаковых ставок по разным контрагентам Рейс № 18 План № 147 от 10.01.2017
		| Сгруппировать по 		
		|	ТП_СтавкиПоРейсам.Рейс,	ТП_СтавкиПоРейсам.Ставка	
 //конец изменений 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТендеры.ПланДоставки,
		|	втТендеры.Рейс,
		|	втСтатусыТендеров.Статус КАК СтатусТендера,
		|	втТендеры.ПланДоставки.GUIDТендернойПлощадки КАК P,
		|	втТендеры.Рейс.GUIDТендернойПлощадки КАК P1,
		|	втРейсыСМинимальнойСтавкой.Контрагент.GUIDТендернойПлощадки КАК P2,
		|	втРейсыСМинимальнойСтавкой.Контрагент,
		|	втРейсыСМинимальнойСтавкой.Ставка КАК P3
		|ИЗ
		|	втТендеры КАК втТендеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусыТендеров КАК втСтатусыТендеров
		|		ПО втТендеры.ПланДоставки = втСтатусыТендеров.ПланДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРейсыСМинимальнойСтавкой КАК втРейсыСМинимальнойСтавкой
		|		ПО втТендеры.Рейс = втРейсыСМинимальнойСтавкой.Рейс
		|ГДЕ
		|	втСтатусыТендеров.Статус = 4
		|
		|СГРУППИРОВАТЬ ПО
		|	втТендеры.ПланДоставки,
		|	втТендеры.Рейс,
		|	втСтатусыТендеров.Статус,
		|	втТендеры.ПланДоставки.GUIDТендернойПлощадки,
		|	втТендеры.Рейс.GUIDТендернойПлощадки,
		|	втРейсыСМинимальнойСтавкой.Контрагент,
		|	втРейсыСМинимальнойСтавкой.Ставка,
		|	втРейсыСМинимальнойСтавкой.Контрагент.GUIDТендернойПлощадки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТендеры.ПланДоставки КАК ПланДоставки,
		|	втТендеры.ПланДоставки.GUIDТендернойПлощадки КАК GUIDТендера,
		|	втТендеры.Рейс,
		|	втРейсыСМинимальнойСтавкой.Контрагент КАК ТЭК,
		|	втРейсыСМинимальнойСтавкой.Ставка КАК СтоимостьПеревозки
		|ИЗ
		|	втТендеры КАК втТендеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусыТендеров КАК втСтатусыТендеров
		|		ПО втТендеры.ПланДоставки = втСтатусыТендеров.ПланДоставки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРейсыСМинимальнойСтавкой КАК втРейсыСМинимальнойСтавкой
		|		ПО втТендеры.Рейс = втРейсыСМинимальнойСтавкой.Рейс
		|ГДЕ
		|	втСтатусыТендеров.Статус = 4
		|
		|СГРУППИРОВАТЬ ПО
		|	втТендеры.ПланДоставки,
		|	втТендеры.Рейс,
		|	втРейсыСМинимальнойСтавкой.Контрагент,
		|	втРейсыСМинимальнойСтавкой.Ставка,
		|	втТендеры.ПланДоставки.GUIDТендернойПлощадки
		|ИТОГИ ПО
		|	ПланДоставки";

	Результат = Запрос.ВыполнитьПакет();

	ВыборкаДетальныеЗаписи = Результат[3].Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		тНоваяСтрокаМассива = Новый Структура("P,P1,P2,P3");
		ЗаполнитьЗначенияСвойств(тНоваяСтрокаМассива,ВыборкаДетальныеЗаписи,"P,P1,P2,P3");
		ОбъектСерилизации.DDD.Добавить(тНоваяСтрокаМассива);
		
	КонецЦикла;

	Если Результат[3].Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	//Установим эклюзивную блокировку на план доставки
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ПТЛ_ПланДоставки");
	ЭлементБлокировки.ИсточникДанных = Результат[4];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ПланДоставки");
	Блокировка.Заблокировать();
	
	Request = ЗаписатьJSON(ОбъектСерилизации);
	
	ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/tender.svc/JSON/DistributeBatch"))[0];
	Response = HTTPPOST(ПараметрыМетода,Request);
	JSONОбъект = ПрочитатьJSON(Response.ResponseText);
	
	ПроверитьВхождениеВКоллекциюПоКлючу("DD", JSONОбъект,"/WCFService/tender.svc/JSON/DistributeBatch"); //Response.КодСостояния
	ПроверитьРавенство(Response.КодСостояния, 200,"/WCFService/tender.svc/JSON/DistributeBatch"); //Ответ должен быть HTTP/1.1 200 OK
	
	тСоответствие = Новый Соответствие;
	
	Для каждого Элемент Из JSONОбъект.Получить("DD") Цикл
		тСоответствие.Вставить(Справочники.ПТЛ_Рейсы.НайтиПоРеквизиту("GUIDТендернойПлощадки", Строка(Элемент.Получить("Id"))),Элемент.Получить("Rs"));		
	КонецЦикла;  
	
	ВыборкаПланДоставки = Результат[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаПланДоставки.Следующий() Цикл
		
		ПланДоставкиОбъект = ВыборкаПланДоставки.ПланДоставки.ПолучитьОбъект();
		ПланИзменен = Ложь;
		
		ВыборкаДетальныеЗаписи = ВыборкаПланДоставки.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			//Сохраним информацию о ставке если она успешно доставлена до сервиса Логинет.
			Если тСоответствие.Получить(ВыборкаДетальныеЗаписи.Рейс) = "Ok" Тогда
			
				СтрокиПланаДоставки = ПланДоставкиОбъект.Маршруты.НайтиСтроки(Новый Структура("Рейс",ВыборкаДетальныеЗаписи.Рейс));		
				
				Для каждого ТекСтрокаПлана Из СтрокиПланаДоставки Цикл
					
					ТекСтрокаПлана.ТЭК = ВыборкаДетальныеЗаписи.ТЭК;
					ТекСтрокаПлана.СтоимостьПеревозки = ВыборкаДетальныеЗаписи.СтоимостьПеревозки;     
					ПланИзменен = Истина;
					
				КонецЦикла;
				
			КонецЕсли; 	
			
		КонецЦикла;
		
		Если ПланИзменен Тогда
			ПланДоставкиОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли; 
		
		//{17.11.2016 Островерхий заявка №б/н 
		ПланДоставкиОбъект.ОбновитьЖурналыУчетаАМ(Ложь); 
		//17.11.2016 Островерхий}
		
	КонецЦикла;
		
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();	
	КонецЕсли;
	
	ВыборкаПланДоставки.Сбросить();
	Пока ВыборкаПланДоставки.Следующий() Цикл
		
		ПроверитьЗаполненность(СтруктураНастроек.Токен,"Токен пустой.");
		ОбъектСерилизации = Новый Структура("T,P",СтруктураНастроек.Токен,ВыборкаПланДоставки.GUIDТендера);
		
		Request = ЗаписатьJSON(ОбъектСерилизации);
		
		ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/tender.svc/JSON/Close"))[0];
		Response = HTTPPOST(ПараметрыМетода,Request);
		JSONОбъект = ПрочитатьJSON(Response.ResponseText);
		
		ПроверитьРавенство(Response.КодСостояния, 200,"/WCFService/tender.svc/JSON/Close"); //Ответ должен быть HTTP/1.1 200 OK
		ПроверитьВхождениеВКоллекциюПоКлючу("D", JSONОбъект,"/WCFService/tender.svc/JSON/Close"); 
		ПроверитьВхождениеВКоллекциюПоКлючу("Result", JSONОбъект.Получить("D"),"/WCFService/tender.svc/JSON/Close"); 
		ПроверитьРавенство(JSONОбъект.Получить("D").Получить("Result"), "Ok","/WCFService/tender.svc/JSON/Close");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнимGUIDКонтрагента(МассивIDКонтрагентов)

	ПроверитьЗаполненность(СтруктураНастроек.Токен,"Токен пустой.");
	
	УдалитьДублирующиеЭлементыМассива(МассивIDКонтрагентов);

	//Проверим необходимость синхронизации
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ЭтоГруппа
		|	И НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.GUIDТендернойПлощадки В(&GUIDТендернойПлощадки)
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) = &КоличествоЭлементовМассива";

	Запрос.УстановитьПараметр("GUIDТендернойПлощадки", МассивIDКонтрагентов);
	Запрос.УстановитьПараметр("КоличествоЭлементовМассива", МассивIDКонтрагентов.Количество());

	РезультатПустой = Запрос.Выполнить().Пустой();
	
	Если НЕ РезультатПустой Тогда
		Возврат; //Все контрагенты синхронизированы	
	КонецЕсли; 
	
	Для каждого ЭлементМассива Из МассивIDКонтрагентов Цикл
	
		ОбъектСерилизации = Новый Структура("T,P",СтруктураНастроек.Токен,ЭлементМассива); 
		
		Request = ЗаписатьJSON(ОбъектСерилизации);
		
		ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/customer.svc/JSON/CustomerDetails"))[0];
		Response = HTTPPOST(ПараметрыМетода,Request);
		JSONОбъект = ПрочитатьJSON(Response.ResponseText);
		
		ПроверитьРавенство(Response.КодСостояния, 200); //Ответ должен быть HTTP/1.1 200 OK
		ПроверитьВхождениеВКоллекциюПоКлючу("D", JSONОбъект,"/WCFService/customer.svc/JSON/CustomerDetails");
		ПроверитьВхождениеВКоллекциюПоКлючу("INN", JSONОбъект.Получить("D"),"/WCFService/customer.svc/JSON/CustomerDetails");
		ПроверитьВхождениеВКоллекциюПоКлючу("KPP", JSONОбъект.Получить("D"),"/WCFService/customer.svc/JSON/CustomerDetails");
		ПроверитьЗаполненность(JSONОбъект.Получить("D").Получить("INN"),"/WCFService/customer.svc/JSON/CustomerDetails");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.Приоритет КАК Приоритет,
		|	ВложенныйЗапрос.GUIDТендернойПлощадки
		|ИЗ
		|	(ВЫБРАТЬ
		|		Контрагенты.Ссылка КАК Ссылка,
		|		0 КАК Приоритет,
		|		Контрагенты.GUIDТендернойПлощадки КАК GUIDТендернойПлощадки
		|	ИЗ
		|		Справочник.Контрагенты КАК Контрагенты
		|	ГДЕ
		|		НЕ Контрагенты.ПометкаУдаления
		|		И НЕ Контрагенты.ЭтоГруппа
		|		И Контрагенты.GUIDТендернойПлощадки = &GUIDТендернойПлощадки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Контрагенты.Ссылка,
		|		1,
		|		Контрагенты.GUIDТендернойПлощадки
		|	ИЗ
		|		Справочник.Контрагенты КАК Контрагенты
		|	ГДЕ
		|		НЕ Контрагенты.ПометкаУдаления
		|		И НЕ Контрагенты.ЭтоГруппа
		|		И Контрагенты.ИНН = &ИНН
		|		И Контрагенты.КПП = &КПП
		|		И Контрагенты.ПРГТК      
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Контрагенты.Ссылка,
		|		2,
		|		Контрагенты.GUIDТендернойПлощадки
		|	ИЗ
		|		Справочник.Контрагенты КАК Контрагенты
		|	ГДЕ
		|		НЕ Контрагенты.ПометкаУдаления
		|		И НЕ Контрагенты.ЭтоГруппа
		|		И Контрагенты.ИНН = &ИНН
		|		И Контрагенты.ПРГТК      
		|) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		Запрос.УстановитьПараметр("ИНН",  Строка(JSONОбъект.Получить("D").Получить("INN")));
		Запрос.УстановитьПараметр("КПП",  Строка(JSONОбъект.Получить("D").Получить("KPP")));
		Запрос.УстановитьПараметр("GUIDТендернойПлощадки", ЭлементМассива);
		
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Если НЕ Результат.Пустой() 
			И НЕ ВыборкаДетальныеЗаписи.GUIDТендернойПлощадки = ЭлементМассива Тогда
			
			Попытка
			
				тОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				тОбъект.GUIDТендернойПлощадки = ЭлементМассива;
				тОбъект.Записать();
			
			Исключение
			
			КонецПопытки; 
					
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьИндексСтатусТендера(Знач ИндексИЛИСтрокаСтатуса)

	Возврат ТП_ИнтеграцияСТендернойПлощадкойОбщий.ПолучитьИндексСтатусТендера(ИндексИЛИСтрокаСтатуса);
	
КонецФункции // ПолучитьИндексСтатусаТендера()

Функция ПолучитьИндексСтатусРейса(Знач ИндексИЛИСтрокаСтатуса)

	Возврат ТП_ИнтеграцияСТендернойПлощадкойОбщий.ПолучитьИндексСтатусРейса(ИндексИЛИСтрокаСтатуса);
	
КонецФункции // ПолучитьИндексСтатусРейса()

Функция ПолучитьСоответствиеID_GUIDРейсов(МассивТендеров)

	тСоответствие = Новый Соответствие;
	
	//Загрузим информацию по ставкам
	ПроверитьЗаполненность(СтруктураНастроек.Токен,"Токен пустой.");
	
	ОбъектСерилизации = Новый Структура("T,DD",СтруктураНастроек.Токен,МассивТендеров);	

	Request = ЗаписатьJSON(ОбъектСерилизации);
	
	ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/tender.svc/JSON/SRDetails"))[0];
	Response = HTTPPOST(ПараметрыМетода,Request);
	JSONОбъект = ПрочитатьJSON(Response.ResponseText);
	
	ПроверитьВхождениеВКоллекциюПоКлючу("DD", JSONОбъект,"/WCFService/tender.svc/JSON/SRDetails"); //Response.КодСостояния
	ПроверитьРавенство(Response.КодСостояния, 200,"/WCFService/tender.svc/JSON/SRDetails"); //Ответ должен быть HTTP/1.1 200 OK

	Для каждого ТекСтрока Из JSONОбъект.Получить("DD") Цикл
		Для каждого ТекЭлементМассива Из ТекСтрока.Получить("SRs") Цикл
			тСоответствие.Вставить(СтрЗаменить(ТекЭлементМассива.Получить("Pi"),Символы.НПП,""),ТекЭлементМассива.Получить("Id"));
		КонецЦикла; 	
	КонецЦикла; 
	
	Возврат тСоответствие;
	
КонецФункции 

Функция ВернутьДатуОжиданияИнформацииОРейсе(Знач ДатаОтгрузки='00010101') Экспорт 

	Если НачалоДня(ТекущаяДата()) = НачалоДня(ДатаОтгрузки) Тогда //Если отгрузка сегодня то
		Возврат Мин(?(ДатаОтгрузки=НачалоДня(ДатаОтгрузки),КонецДня(ДатаОтгрузки),ДатаОтгрузки),ТекущаяДата()+7*60*60); //+7 часа к тек дате но не позднее даты отгрузки
	ИначеЕсли НачалоДня(ДатаОтгрузки) > НачалоДня(ТекущаяДата()) Тогда //Если отгрузка завтра, после завтра.. итд
		//начало изменений Ожиганов А. 59567 отгрузка не сегодня, то ожидаем информации от ТЭК о водителе и ТС до 14:00 24.11.2016 
		//Возврат Мин(?(ДатаОтгрузки=НачалоДня(ДатаОтгрузки),КонецДня(ДатаОтгрузки),ДатаОтгрузки),НачалоДня(КонецДня(ТекущаяДата())+1)+14*60*60); //+14 часа к начале следующего дня но не позднее даты отгрузки
		Возврат НачалоДня(ДатаОтгрузки)+14*60*60; //+14 часа к начале следующего дня но не позднее даты отгрузки
        //конец изменений 
	Иначе //Если дата отгрузки не заполнена либо дата отгрузкии не корректная
		Возврат ТекущаяДата()+7*60*60; //+7 часа к тек дате
	КонецЕсли; 	

КонецФункции // ВернутьДатуОжиданияИнформацииОРейсе()
 


//////////////////////////////////////////////
//	Транспорт. 
//////////////////////////////////////////////

Функция ЗаполнитьМетодыСервиса() Экспорт

	МетодыСервиса = Новый ТаблицаЗначений;
	МетодыСервиса.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(255)));
	МетодыСервиса.Колонки.Добавить("ТаймаутЗапросаВМс", Новый ОписаниеТипов("Число"));
	
	// /WCFService/auth.svc/JSON/Login
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/auth.svc/JSON/Login";
	тНовыйМетод.ТаймаутЗапросаВМс = 5000;
	
	// WCFService/sr.svc/JSON/CreateBatch 
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/sr.svc/JSON/CreateBatch";
	тНовыйМетод.ТаймаутЗапросаВМс = 495000;

	// WCFService/sr.svc/JSON/InfoBatch 
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/sr.svc/JSON/InfoBatch";
	тНовыйМетод.ТаймаутЗапросаВМс = 7500;

	// /WCFService/tender.svc/JSON/Create
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/tender.svc/JSON/Create";
	тНовыйМетод.ТаймаутЗапросаВМс = 25000;

	// /WCFService/tender.svc/JSON/Details
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/tender.svc/JSON/Details";
	тНовыйМетод.ТаймаутЗапросаВМс = 500;

	// /WCFService/tender.svc/JSON/BidHistoryAllBatch 
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/tender.svc/JSON/BidHistoryAllBatch";
	тНовыйМетод.ТаймаутЗапросаВМс = 2250;

	// /WCFService/tender.svc/JSON/Close
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/tender.svc/JSON/Close";
	тНовыйМетод.ТаймаутЗапросаВМс = 4000;

	// /WCFService/tender.svc/JSON/Distribute
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/tender.svc/JSON/Distribute";
	тНовыйМетод.ТаймаутЗапросаВМс = 5000;
	
    // /WCFService/tender.svc/JSON/DistributeBatch
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/tender.svc/JSON/DistributeBatch";
	тНовыйМетод.ТаймаутЗапросаВМс = 50000;   

	// /WCFService/auth.svc/JSON/Logout
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/auth.svc/JSON/Logout";
	тНовыйМетод.ТаймаутЗапросаВМс = 1000;

	///WCFService/customer.svc/JSON/CustomerDetails
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/customer.svc/JSON/CustomerDetails";  
	тНовыйМетод.ТаймаутЗапросаВМс = 300;
	
	///WCFService/tender.svc/JSON/SRDetails
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/tender.svc/JSON/SRDetails";  
	тНовыйМетод.ТаймаутЗапросаВМс = 1500;
	
	///WCFSERVICE/SR.SVC/JSON/CANCELBATCH
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFSERVICE/SR.SVC/JSON/CANCELBATCH";  
	тНовыйМетод.ТаймаутЗапросаВМс = 15000;
	
	///WCFService/SR.svc/JSON/AddRequestExpiredDateBatch
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/SR.svc/JSON/AddRequestExpiredDateBatch";   
	тНовыйМетод.ТаймаутЗапросаВМс = 5000;
	
	//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера и время подачи тс
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/sr.svc/JSON/FindBatch";   
	тНовыйМетод.ТаймаутЗапросаВМс = 15000;
	
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/sr.svc/JSON/FindTenderBatch";
	тНовыйМетод.ТаймаутЗапросаВМс = 15000;
	
	тНовыйМетод = МетодыСервиса.Добавить();
   	тНовыйМетод.Имя = "/WCFService/sr.svc/JSON/FindGeo";
	тНовыйМетод.ТаймаутЗапросаВМс = 15000;
	//конец изменений 

	Возврат МетодыСервиса;
	
КонецФункции // ЗаполнитьМетодыСервиса()

Функция HTTPPOST(ПараметрыМетода,Request) Экспорт

	//{14.11.2016 Островерхий заявка №б/н 
	Возврат HTTPPOSTБезWinAPI(ПараметрыМетода,Request); 
	//14.11.2016 Островерхий} 
	
	Если СтруктураНастроек.РежимОтладки Тогда
		Сообщить(Строка(ТекущаяДата())+":DEBUG:Sending request:POST "+ПараметрыМетода.Имя+":Timeout "+Строка(ПараметрыМетода.ТаймаутЗапросаВМс),СтатусСообщения.Информация);
		Сообщить(Request,СтатусСообщения.Информация);
	КонецЕсли; 

	КоэфДопустимогоПревышенияSLA = СтруктураНастроек.КоэфДопустимогоПревышенияSLA;
	
	СтруктураURI = СтруктураURI(СтруктураНастроек.Сервер);
	
	WinHttp= Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	WinHttp.Option(2,"utf-8");
	WinHttp.Open("POST",СтрЗаменить(СтруктураНастроек.Сервер+ПараметрыМетода.Имя,"2001//","2001/"),0);
	WinHttp.setRequestHeader("Content-Type","application/json; charset=utf-8");
	WinHttp.setRequestHeader("Content-MD5",MD5Строка(Request));   
	
	Если НЕ СтруктураНастроек.Токен = Неопределено Тогда
		WinHttp.SetRequestHeader("Access-Token", СтруктураНастроек.Токен);  
	КонецЕсли; 
		
	//SetTimeouts (ResolveTimeout,ConnectTimeout,SendTimeout,ReceiveTimeout)
	//SetTimeouts(-1,0,0,-1); //-1 или 0 - ждем бесконечно https://msdn.microsoft.com/en-us/library/windows/desktop/aa384061(v=vs.85).aspx
	Если КоэфДопустимогоПревышенияSLA = -1 Тогда
		WinHttp.SetTimeouts(30000, 60000, 60000, -1);	
	ИначеЕсли КоэфДопустимогоПревышенияSLA = 0 Тогда
		WinHttp.SetTimeouts(30000, 60000, 60000, ПараметрыМетода.ТаймаутЗапросаВМс);
	Иначе
		WinHttp.SetTimeouts(30000, 60000, 60000, ПараметрыМетода.ТаймаутЗапросаВМс*КоэфДопустимогоПревышенияSLA);
	КонецЕсли; 
	
	Попытка
		
		НачалаЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
		WinHttp.Send(Request);
		//WinHttp.WaitForResponse();
		ОкончаниеЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Исключение
		
		ОкончаниеЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ВызватьИсключение ОписаниеОшибки()+Символы.ПС+"Sending request:POST "+ПараметрыМетода.Имя+":Response time:"+Строка(ОкончаниеЗапроса-НачалаЗапроса)+":SLA timeout:"+Строка(ПараметрыМетода.ТаймаутЗапросаВМс*КоэфДопустимогоПревышенияSLA);
		
	КонецПопытки; 
			 
	Возврат Новый Структура("КодСостояния,ResponseText",WinHttp.Status,WinHttp.ResponseText());
			
КонецФункции // HTTPPOST()

Функция HTTPPOSTБезWinAPI(ПараметрыМетода,Request) Экспорт

	КоэфДопустимогоПревышенияSLA = СтруктураНастроек.КоэфДопустимогоПревышенияSLA;
	
	СтруктураURI = СтруктураURI(СтруктураНастроек.Сервер);
	
	Если КоэфДопустимогоПревышенияSLA = -1 Тогда
		ТаймАут = 0;	
	ИначеЕсли КоэфДопустимогоПревышенияSLA = 0 Тогда
		ТаймАут = ?(ПараметрыМетода.ТаймаутЗапросаВМс < 1000, 1, ПараметрыМетода.ТаймаутЗапросаВМс/1000);
	Иначе
	  //начало изменений Ожиганов А. попробуем округлить до целого, может поможет при исправлении ошибки 05.12.2016  б/н 08.12.2016
	 //Ошибка при вызове метода контекста (ОтправитьДляОбработки): 
	 //Ошибка работы с Интернет:  Failure when receiving data from the peer  
	 //метод /WCFService/tender.svc/JSON/SRDetails
	 //план  30 сек. факт 11 сек.
	 //коэфф СЛА 20	  
	 //	ТаймАут = ?(ПараметрыМетода.ТаймаутЗапросаВМс < 1000, 1, ПараметрыМетода.ТаймаутЗапросаВМс/1000*КоэфДопустимогоПревышенияSLA);
		ТаймАут = Окр(ПараметрыМетода.ТаймаутЗапросаВМс*КоэфДопустимогоПревышенияSLA/1000);
		//порылся в иннтернете, пишут ошибка выше несвязана с таймаутом
		//связана с проблемой в сети, либо недоступности сервера.
		//исходя из документации
		//ТаймАут Определяет время ожидания осуществляемого соединения и операций, в секундах.
		// т.е вроде как логично предположить, что для соединения и запросов и ответов будет одинаково
		// подстрахуемся и установим время ожидания минимум в минуту,
		//с возможностью исравить используя справочник ПРГ служебный
		Если ПРГ_ИспользоватьОдноСоединение Тогда //таймаут один
			ТаймАут = ПРГ_МинВремя_Соединения_Операций;
		Иначе	
			ТаймАут = ?(ТаймАут<ПРГ_МинВремя_Соединения_Операций,ПРГ_МинВремя_Соединения_Операций,ТаймАут);
		КонецЕсли;	
 	//конец изменений 	
	КонецЕсли; 
	
	//начало изменений Ожиганов А. попробуем использовать одно соеденение при обмене с Логинет  05.12.2016  б/н 08.12.2016
	//параметр Connection: keep-alive и версия Http должна поддерживать.
		//Соединение = 
		//Новый HTTPСоединение(
		//	СтруктураURI.хост, 
		//	СтруктураURI.порт,
		//	,,,ТаймАут);
	
 	Если ПРГ_ИспользоватьОдноСоединение	 Тогда
		Если ПРГ_HTTPСоединение  = Неопределено Тогда
			Соединение  = 
			Новый HTTPСоединение(
				СтруктураURI.хост, 
				СтруктураURI.порт,
				,,,ТаймАут);
			 ПРГ_HTTPСоединение = Соединение;
		 Иначе		
			Соединение = ПРГ_HTTPСоединение;
		 КонецЕсли;
	Иначе
			Соединение  = 
			Новый HTTPСоединение(
				СтруктураURI.хост, 
				СтруктураURI.порт,
				,,,ТаймАут);
	КонецЕсли;		
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Connection", "keep-alive");
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Content-MD5",MD5Строка(Request)); 
	//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера и время подачи тс
	ПРГ_МД5ПослЗапроса = Заголовки.Получить("Content-MD5");
	//конец изменений 
 	
	Если НЕ СтруктураНастроек.Токен = Неопределено Тогда
		Заголовки.Вставить("Access-Token", СтруктураНастроек.Токен);   
	КонецЕсли; 
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыМетода.Имя,Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(Request,"CESU-8"); //UTF-8 без BOM
	
	//начало изменений Ожиганов А. получим время из 1с, что-то плохая ситуация с таймаутами  05.12.2016  б/н 07.12.2016
	Попытка
	
		ТекВремя = ТекущаяДата();
	//конец изменений 
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос); //POST request	
		
	//начало изменений Ожиганов А. получим время из 1с, что-то плохая ситуация с таймаутами 05.12.2016  б/н 07.12.2016
	Исключение
	      ТекстОшибки = ОписаниеОшибки()+"
		  | метод "+ПараметрыМетода.Имя+"
		  | план  "+ТаймАут+" сек. факт "+(ТекущаяДата()-ТекВремя)+" сек.
		  | Соединение.Таймаут "+Соединение.Таймаут+" сек. 
		  | ПРГ_ИспользоватьОдноСоединение "+ПРГ_ИспользоватьОдноСоединение+"
		  | коэфф СЛА "+КоэфДопустимогоПревышенияSLA+"
		  | md5 посл. запрос "+ПРГ_МД5ПослЗапроса;
		  ЗаписьЖурналаРегистрации("Ошибка при обмене с Логинет", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);	
		  ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	//конец изменений 

	Возврат Новый Структура("КодСостояния,ResponseText",HTTPОтвет.КодСостояния,HTTPОтвет.ПолучитьТелоКакСтроку());
		
КонецФункции // HTTPPOSTБезWinAPI()

Функция СтруктураURI(Знач СтрокаURI) Экспорт 
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьХэшMD5(Знач Строка) Экспорт

	Строка = СтрЗаменить(Строка, СтруктураНастроек.Токен,"");
	
	ХэшMD5 = "";
	#Если Клиент Тогда
		Если глОбъектМД5 <> Неопределено Тогда
			ХэшMD5 = глОбъектМД5.GetCheckSumFromString(Строка);
		КонецЕсли;
	#ИначеЕсли Сервер Тогда
		Попытка
			COMMD5 = Новый COMОбъект("XStandard.MD5");
			ХэшMD5 = COMMD5.GetCheckSumFromString(Строка);
		Исключение
			ХэшMD5 = "";
			//ВызватьИсключение ОписаниеОшибки(); 
		КонецПопытки;
	#КонецЕсли

	Возврат ХэшMD5;
	
КонецФункции // ()

Функция DecToHex(Знач Число)
   тЧисло = Число;
   тБаза = 16;
 
   Пока тЧисло <> 0 Цикл
      тПоз =тЧисло % тБаза;
      Результат = Сред("0123456789abcdef", тПоз + 1, 1) + Результат;
      тЧисло = Цел(тЧисло / тБаза);
   КонецЦикла;
 
   Если Число < тБаза Тогда 
      Результат = "0" + Результат; 
   КонецЕсли;
 
   Возврат Результат;
КонецФункции

Функция MD5Строка(Знач тСтрока) Экспорт 
	
	тСтрока = СтрЗаменить(тСтрока, СтруктураНастроек.Токен,"");
	
	Crypt = Новый COMОбъект("System.Security.Cryptography.MD5CryptoServiceProvider");
	Text = Новый COMОбъект("System.Text.UTF8Encoding");
	
	HashArray = Crypt.ComputeHash_2(Text.GetBytes_4(тСтрока)).Выгрузить();
	
	Hash = "";
	Для Каждого Число Из HashArray Цикл
		Hash = Hash + DecToHex(Число);
	КонецЦикла;
	
	Возврат Hash;
	
КонецФункции

//////////////////////////////////////////////
//	Поиск и создание объектов в 1С. 
//////////////////////////////////////////////

Функция НайтиСоздатьВодителя(Объект)

	ПроверитьВхождениеВКоллекциюПоКлючу("Driver", Объект);
	ПроверитьВхождениеВКоллекциюПоКлючу("PaSe", Объект);
	ПроверитьВхождениеВКоллекциюПоКлючу("PaNu", Объект);	
	ПроверитьВхождениеВКоллекциюПоКлючу("DriverId", Объект);
	
	Если Строка(Объект.Получить("DriverId")) = "" Тогда
		Возврат Справочники.ПТЛ_Водители.ПустаяСсылка();	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Приоритет КАК Приоритет,
		|	ВложенныйЗапрос.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		0 КАК Приоритет,
		|		ПТЛ_Водители.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ПТЛ_Водители КАК ПТЛ_Водители
		|	ГДЕ
		|		ПТЛ_Водители.GUIDТендернойПлощадки = &GUIDТендернойПлощадки
		|		И НЕ ПТЛ_Водители.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		1,
		|		ПТЛ_Водители.Ссылка
		|	ИЗ
		|		Справочник.ПТЛ_Водители КАК ПТЛ_Водители
		|	ГДЕ
		|		ПТЛ_Водители.Наименование = &ФИО
		|		И НЕ ПТЛ_Водители.ПометкаУдаления
		|		И ПТЛ_Водители.СерияПаспорта = &СерияПаспорта
		|		И ПТЛ_Водители.НомерПаспорта = &НомерПаспорта
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		2,
		|		ПТЛ_Водители.Ссылка
		|	ИЗ
		|		Справочник.ПТЛ_Водители КАК ПТЛ_Водители
		|	ГДЕ
		|		ПТЛ_Водители.Наименование = &ФИО
		|		И НЕ ПТЛ_Водители.ПометкаУдаления
		|		И ПТЛ_Водители.СерияНомерВодительскогоУдостоверения = &СерияНомерВодительскогоУдостоверения) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";

	Запрос.УстановитьПараметр("СерияПаспорта", Строка(Объект.Получить("PaSe")));
	Запрос.УстановитьПараметр("НомерПаспорта", Строка(Объект.Получить("PaNu")));
	Запрос.УстановитьПараметр("ФИО", Объект.Получить("Driver"));
    Запрос.УстановитьПараметр("GUIDТендернойПлощадки", Строка(Объект.Получить("DriverId")));
	Запрос.УстановитьПараметр("СерияНомерВодительскогоУдостоверения", Строка(Объект.Получить("DLicense")));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    ВыборкаДетальныеЗаписи.Следующий();
	
	Если Результат.Пустой() Тогда
		
		тНовыйСправочник = Справочники.ПТЛ_Водители.СоздатьЭлемент();
		тНовыйСправочник.Наименование = Объект.Получить("Driver");
		тНовыйСправочник.Телефон = Объект.Получить("Phone");
		тНовыйСправочник.СерияПаспорта = Строка(Объект.Получить("PaSe"));
		тНовыйСправочник.НомерПаспорта = Строка(Объект.Получить("PaNu"));
		//{17.11.2016 Островерхий заявка №б/н 
		//тНовыйСправочник.ПаспортныеДанные = Объект.Получить("PaIs");
		//{03.02.2017 Островерхий заявка №б/н 
		//тНовыйСправочник.ПаспортныеДанные = Объект.Получить("PaIs")+", выдан:"+Формат(Объект.Получить("PaIsDate"), "ДЛФ=Д"); 
		тДатаВыдачиПаспорта = ИзменитьВекС20На19(Объект.Получить("PaIsDate"));
		тНовыйСправочник.ПаспортныеДанные = Объект.Получить("PaIs")+", выдан:"+Формат(тДатаВыдачиПаспорта, "ДЛФ=Д");
		//03.02.2017 Островерхий} 
		//17.11.2016 Островерхий} 
		тНовыйСправочник.СерияНомерВодительскогоУдостоверения = Строка(Объект.Получить("DLicense"));
        тНовыйСправочник.GUIDТендернойПлощадки  = Строка(Объект.Получить("DriverId"));
		тНовыйСправочник.Записать();
		
		Возврат тНовыйСправочник.Ссылка;
		
	Иначе
		
		тСправочник = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		тСправочник.Наименование = Объект.Получить("Driver");
		тСправочник.Телефон = Объект.Получить("Phone");
		тСправочник.СерияПаспорта = Строка(Объект.Получить("PaSe"));
		тСправочник.НомерПаспорта = Строка(Объект.Получить("PaNu"));
       	//{03.02.2017 Островерхий заявка №б/н 
		//тНовыйСправочник.ПаспортныеДанные = Объект.Получить("PaIs")+", выдан:"+Формат(Объект.Получить("PaIsDate"), "ДЛФ=Д"); 
		тДатаВыдачиПаспорта = ИзменитьВекС20На19(Объект.Получить("PaIsDate"));
		тСправочник.ПаспортныеДанные = Объект.Получить("PaIs")+", выдан:"+Формат(тДатаВыдачиПаспорта, "ДЛФ=Д");
		//03.02.2017 Островерхий} 
		тСправочник.СерияНомерВодительскогоУдостоверения = Строка(Объект.Получить("DLicense"));
		
		Если ПроверитьМодифицированЛиОбъект(тСправочник) Тогда
			тСправочник.Записать();
		КонецЕсли; 
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
	КонецЕсли; 

КонецФункции // НайтиСоздатьВодителя(Объект)

Функция ИзменитьВекС20На19(Знач ДатаДляИзменения)

	Если Год(ДатаДляИзменения)>Год(ТекущаяДата()) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ДОБАВИТЬКДАТЕ(&ДатаДляИзменения, ГОД, (ГОД(&ДатаДляИзменения) - 1900 - (ГОД(&ДатаДляИзменения) - 2000)) * -1) КАК Дата";
		
		Запрос.УстановитьПараметр("ДатаДляИзменения", ДатаДляИзменения);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Дата;
		Иначе
			Возврат ДатаДляИзменения;	
		КонецЕсли;
		
	Иначе
		Возврат ДатаДляИзменения;
	КонецЕсли; 
	
КонецФункции // ()
 

Функция НайтиСоздатьТранспортноеСредство(Объект,ТипТранспорта)

	ПроверитьВхождениеВКоллекциюПоКлючу("VPlate", Объект);
	ПроверитьВхождениеВКоллекциюПоКлючу("VBrnd", Объект);
	ПроверитьВхождениеВКоллекциюПоКлючу("VId", Объект);

	Если Строка(Объект.Получить("VId")) = "" Тогда
		Возврат Справочники.ПТЛ_ТранспортныеСредства.ПустаяСсылка();	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Приоритет КАК Приоритет,
		|	ВложенныйЗапрос.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		0 КАК Приоритет,
		|		ПТЛ_ТранспортныеСредства.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ПТЛ_ТранспортныеСредства КАК ПТЛ_ТранспортныеСредства
		|	ГДЕ
		|		ПТЛ_ТранспортныеСредства.GUIDТендернойПлощадки = &GUIDТендернойПлощадки
		|		И НЕ ПТЛ_ТранспортныеСредства.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		1,
		|		ПТЛ_ТранспортныеСредства.Ссылка
		|	ИЗ
		|		Справочник.ПТЛ_ТранспортныеСредства КАК ПТЛ_ТранспортныеСредства
		|	ГДЕ
		|		ПТЛ_ТранспортныеСредства.ГосНомер = &ГосНомер
		|		И НЕ ПТЛ_ТранспортныеСредства.ПометкаУдаления) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";

	Запрос.УстановитьПараметр("ГосНомер", Строка(Объект.Получить("VPlate")));
    Запрос.УстановитьПараметр("GUIDТендернойПлощадки", Строка(Объект.Получить("VId")));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    ВыборкаДетальныеЗаписи.Следующий();
	
	Если Результат.Пустой() Тогда
		
		тНовыйСправочник = Справочники.ПТЛ_ТранспортныеСредства.СоздатьЭлемент();
		тНовыйСправочник.Марка = Объект.Получить("VBrnd");
		тНовыйСправочник.ГосНомер = Строка(Объект.Получить("VPlate"));
		тНовыйСправочник.GUIDТендернойПлощадки = Строка(Объект.Получить("VId"));
		тНовыйСправочник.Рефрижератор = Объект.Получить("VType") = 4;
		тНовыйСправочник.Наименование = тНовыйСправочник.Марка + " " + тНовыйСправочник.ГосНомер;
		тНовыйСправочник.ТипТранспорта = ТипТранспорта;
		тНовыйСправочник.Записать();
		
		Возврат тНовыйСправочник.Ссылка;
		
	Иначе
		
		тСправочник = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		тСправочник.Марка = Объект.Получить("VBrnd");
		тСправочник.ГосНомер = Строка(Объект.Получить("VPlate"));
		тСправочник.Рефрижератор = Объект.Получить("VType") = 4;
		тСправочник.Наименование = тСправочник.Марка + " " + тСправочник.ГосНомер;
		
		Если ПроверитьМодифицированЛиОбъект(тСправочник) Тогда
			тСправочник.Записать();
		КонецЕсли;
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	
	КонецЕсли;	

КонецФункции // НайтиСоздатьТранспортноеСредство(Объект)

Функция НайтиКонтрагента(КонтрагентGUID)

	Запрос = Новый Запрос;   
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ЭтоГруппа
		|	И НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.GUIDТендернойПлощадки = &GUIDТендернойПлощадки";

	Запрос.УстановитьПараметр("GUIDТендернойПлощадки", КонтрагентGUID);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.Контрагенты.Неопределен;

КонецФункции // НайтиКонтрагента(КонтрагентGUID)



//////////////////////////////////////////////
//	JSON. 
//////////////////////////////////////////////

Функция ЗаписатьJSON(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь)

	Возврат ТП_ИнтеграцияСТендернойПлощадкойJSON.ЗаписатьJSON(Значение, Стандарт, ПредставленияСсылок);	

КонецФункции // ЗаписатьJSON()
 
Функция ПрочитатьJSON(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь) 
	
	Возврат ТП_ИнтеграцияСТендернойПлощадкойJSON.ПрочитатьJSON(Значение, Стандарт, ПредставленияСсылок);
	
КонецФункции // ПрочитатьJSON()



//////////////////////////////////////////////
//	Прочее. 
//////////////////////////////////////////////
 
Процедура УдалитьДублирующиеЭлементыМассива(Массив)
	
	НовыйМассив = Новый Массив; Соответствие = Новый Соответствие;
	
	Для каждого ЭлементМассива Из Массив Цикл
		Соответствие.Вставить(ЭлементМассива);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Соответствие Цикл
		НовыйМассив.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;	
	
	Массив = НовыйМассив;

КонецПроцедуры  

Функция ПроверитьМодифицированЛиОбъект(Объект)
	
	ОбъектМодифицирован = Объект.ЭтоНовый();
	Ссылка = Объект.Ссылка;
	
	Если НЕ ОбъектМодифицирован Тогда
		
		//Сравниваем реквизиты объекта и реквизиты ссылки
		Для каждого Свойство Из Объект.Метаданные().Реквизиты Цикл
			
			ОбъектМодифицирован = Объект[Свойство.Имя] <> Ссылка[Свойство.Имя];
			
			Если ОбъектМодифицирован Тогда
				Прервать;
			КонецЕсли; 	
			
		КонецЦикла;	
		
		Если НЕ ОбъектМодифицирован Тогда
			
			//Сравниваем стандартные реквизиты объекта и реквизиты ссылки
			Для каждого Свойство Из Объект.Метаданные().СтандартныеРеквизиты Цикл
				
				Если Свойство.Имя = "Ссылка" Тогда
					Продолжить;
				КонецЕсли; 
				
				ОбъектМодифицирован = Объект[Свойство.Имя] <> Ссылка[Свойство.Имя];
				
				Если ОбъектМодифицирован Тогда
					Прервать;
				КонецЕсли; 	
				
			КонецЦикла;	
			
		КонецЕсли; 
		
		//Сравниваем табличные части
		Если НЕ ОбъектМодифицирован Тогда
			
			Для каждого СвойствоТабличнаяЧасть Из Объект.Метаданные().ТабличныеЧасти Цикл
				
				Если Объект[СвойствоТабличнаяЧасть.Имя].Количество() <> Ссылка[СвойствоТабличнаяЧасть.Имя].Количество() Тогда
					
					ОбъектМодифицирован = Истина;	
					
				Иначе
					
					Для каждого СтрокаТЧОбъекта Из Объект[СвойствоТабличнаяЧасть.Имя] Цикл
						
						СтрокаТЧСсылки = Ссылка[СвойствоТабличнаяЧасть.Имя][СтрокаТЧОбъекта.НомерСтроки-1];
						
						Для каждого СвойствоТабличнойЧасть Из Объект.Метаданные().ТабличныеЧасти[СвойствоТабличнаяЧасть.Имя].Реквизиты Цикл
							
							ОбъектМодифицирован = СтрокаТЧОбъекта[СвойствоТабличнойЧасть.Имя] <> СтрокаТЧСсылки[СвойствоТабличнойЧасть.Имя];
							
							Если ОбъектМодифицирован Тогда
								Прервать;
							КонецЕсли;
							
						КонецЦикла;	
						
						Если ОбъектМодифицирован Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если ОбъектМодифицирован Тогда
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОбъектМодифицирован Тогда
					Прервать;
				КонецЕсли; 	
				
			КонецЦикла;		
			
		КонецЕсли; 
		
	КонецЕсли;

	Возврат ОбъектМодифицирован;
	
КонецФункции // ()
 


//////////////////////////////////////////////
// МЕТОДЫ ДЛЯ ПРОВЕРКИ ЗНАЧЕНИЙ (assertions). 
//////////////////////////////////////////////

//Коллекция - Структура, Соответствие, ФиксированнаяСтруктура, ФиксированноеСоответствие
//
Процедура ПроверитьВхождениеВКоллекциюПоКлючу(Элемент, Коллекция, ДопСообщениеОшибки = "") 
	Нашли = Неопределено;
	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции = Тип("Структура") или ТипКоллекции = Тип("Соответствие") 
			или ТипКоллекции = Тип("ФиксированнаяСтруктура") или ТипКоллекции = Тип("ФиксированноеСоответствие") Тогда
		Для каждого КлючЗначение Из Коллекция Цикл
			Нашли = КлючЗначение.Ключ = Элемент;
			Если Нашли Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Нашли = Неопределено Тогда
		СообщениеОшибки = "Утверждение ""ПроверитьВхождениеВКоллекцию"" не умеет работать с типом коллекции <"+ТипКоллекции+">." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение СообщениеОшибки;
	КонецЕсли;
	Если Не Нашли Тогда
		СообщениеОшибки = "Не нашли элемент <"+Элемент+"> по ключу коллекции, а хотели, чтобы он был в коллекции." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

// проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
//
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") 
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		Возврат;
	КонецПопытки;
	Если НЕ фЗаполнено Тогда
		ВызватьОшибкуПроверки("Значение ("+ПроверяемоеЗначение+") не заполнено, а ожидалась заполненность" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли; 
КонецПроцедуры

//возврат _1 = _2
//
Процедура ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = "") 
	Если _1 <> _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") не равны, а хотели, чтобы были равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

//ФорматДСО
//
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции

//ВызватьОшибкуПроверки
//
Процедура ВызватьОшибкуПроверки(СообщениеОшибки)
	
	Префикс = "[Failed]";
	ВызватьИсключение Префикс + " " + СообщениеОшибки;
	
КонецПроцедуры

//начало изменений Ожиганов А. исправление ошибки 1,5 часового зависания при обменен с Логинет  05.12.2016  б/н 06.12.2016
//а также возникших блокировок при считывании информации 06.12.2016
//вставим исключения 
Процедура ПРГ_ОтправитьИнфуОбОшибках(МассивОшибок)
	
	Если ТипЗнч(МассивОшибок) <> Тип("Массив")  Тогда
		возврат;
	КонецЕсли;	
	
	Если МассивОшибок.Количество() = 0  Тогда
		возврат;
	КонецЕсли;	
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Пользователи.ФизЛицо
	                      |ПОМЕСТИТЬ ФизЛица
	                      |ИЗ
	                      |	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	                      |		ПО ПРГ_СлужебныйТаблицаПараметров.Параметр = Пользователи.Ссылка
	                      |			И (ПРГ_СлужебныйТаблицаПараметров.Ссылка = ЗНАЧЕНИЕ(Справочник.ПРГ_Служебный.СписокРассылкиПриОбменеСЛогинет))
	                      |			И (Пользователи.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Пользователи.ФизЛицо
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)) КАК Емайл
	                      |ИЗ
	                      |	ФизЛица КАК ФизЛица
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                      |		ПО ФизЛица.ФизЛицо = КонтактнаяИнформация.Объект
	                      |			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(ПРГ_СлужебныйТаблицаПараметров.Параметр КАК СТРОКА(100))
	                      |ИЗ
	                      |	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	                      |ГДЕ
	                      |	ПРГ_СлужебныйТаблицаПараметров.Ссылка = ЗНАЧЕНИЕ(Справочник.ПРГ_Служебный.СписокРассылкиПриОбменеСЛогинет)
	                      |	И ТИПЗНАЧЕНИЯ(ПРГ_СлужебныйТаблицаПараметров.Параметр) = ТИП(СТРОКА)");
						  
	МассивПолучателей = Новый Массив;						  
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Найти(Выборка.Емайл,"@") > 0 Тогда
			МассивПолучателей.Добавить(Выборка.Емайл);
		КонецЕсли;	
	КонецЦикла;	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПолучателей);
	Если МассивПолучателей.Количество() = 0 Тогда
		возврат;
	КонецЕсли;	
	
	ТекстОшибок = "";
	Для Каждого ТекЭлемент из МассивОшибок Цикл
		ТекстОшибок = ТекстОшибок + ?(ПустаяСтрока(ТекстОшибок),"",Символы.ПС)+ ТекЭлемент;
	КонецЦикла;	
	
	//начало изменений Ожиганов А. 22.12.2016 б/н добъемся совпадения пары вызовов логин логоут
	ТекстОшибок = "База "+СтрокаСоединенияИнформационнойБазы() +"
		| Пользователь " + ПараметрыСеанса.ТекущийПользователь+"
		| "+ТекстОшибок;
	//конец изменений 
	
	Попытка
	
		ПРГ_Регламентый.ОправитьФайл("Ошибки при обмене с логинет",МассивПолучателей,ТекстОшибок,,,"elk@progressfood.ru");		
	
	Исключение
	 	ЗаписьЖурналаРегистрации("Ошибка при обмене с Логинет", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при отпраке информации по ошибкам!!!");	
	КонецПопытки; 
	
	
КонецПроцедуры	
//конец изменений 
//начало изменений Ожиганов А. исправление ошибки 1,5 часового зависания при обменен с Логинет  05.12.2016  б/н 08.12.2016
Процедура Определить_ПРГ_МинВремя_Соединения_Операций_ИсипользованиеОдногоСоединения()
	ПРГ_МинВремя_Соединения_Операций = 60;
	//для подстраховки
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(ПРГ_СлужебныйТаблицаПараметров.Параметр КАК ЧИСЛО(15, 0)) КАК МинВремя
	                      |ИЗ
	                      |	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПРГ_Служебный КАК ПРГ_Служебный
	                      |		ПО ПРГ_СлужебныйТаблицаПараметров.Ссылка = ПРГ_Служебный.Ссылка
	                      |			И (ПРГ_Служебный.Наименование = ""Минимальное_время_для_соединения_и_операций_Логинет"")
	                      |			И (ПРГ_СлужебныйТаблицаПараметров.НомерСтроки = 1)");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.МинВремя) = Тип("Число") и Выборка.МинВремя > 0 Тогда
			ПРГ_МинВремя_Соединения_Операций = Окр(Выборка.МинВремя);
		КонецЕсли;
	Иначе	
		//определим из служебного справочника использование одного соединения
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВЫРАЗИТЬ(ПРГ_СлужебныйТаблицаПараметров.Параметр КАК БУЛЕВО) КАК ОдноСоединение
		                      |ИЗ
		                      |	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПРГ_Служебный КАК ПРГ_Служебный
		                      |		ПО ПРГ_СлужебныйТаблицаПараметров.Ссылка = ПРГ_Служебный.Ссылка
		                      |			И (ПРГ_Служебный.Наименование = ""Использовать_Одно_Соединение_при_обмене_с_логинет"")
		                      |			И (ПРГ_СлужебныйТаблицаПараметров.НомерСтроки = 1)");
		  	Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если ТипЗнч(Выборка.ОдноСоединение) = Тип("Булево") Тогда
					ПРГ_ИспользоватьОдноСоединение = Выборка.ОдноСоединение;
				КонецЕсли;	
			КонецЕсли;
		//начало изменений Ожиганов А. попробуем использовать одно соеденение при обмене с Логинет  05.12.2016  б/н 08.12.2016
		//параметр Connection: keep-alive и версия Http должна поддерживать.
		Если ПРГ_ИспользоватьОдноСоединение Тогда
			// если будем использовать одно соединение нужно переопределить
			//минимальное время
			КоэфДопустимогоПревышенияSLA = СтруктураНастроек.КоэфДопустимогоПревышенияSLA;
			Для Каждого ТекСтрока ИЗ СтруктураНастроек.МетодыСервиса Цикл
				 ПРГ_МинВремя_Соединения_Операций = Макс(ПРГ_МинВремя_Соединения_Операций,
				 Окр(КоэфДопустимогоПревышенияSLA * ТекСтрока.ТаймаутЗапросаВМс/1000));
			КонецЦикла;	
		КонецЕсли;	
		//конец изменений 	
	КонецЕслИ;	
	
	//начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
	ПРГ_ВыгружатьРегионИГород = Ложь;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(ПРГ_СлужебныйТаблицаПараметров.Параметр КАК ДАТА) КАК МинВремя
	                      |ИЗ
	                      |	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПРГ_Служебный КАК ПРГ_Служебный
	                      |		ПО ПРГ_СлужебныйТаблицаПараметров.Ссылка = ПРГ_Служебный.Ссылка
	                      |			И (ПРГ_СлужебныйТаблицаПараметров.НомерСтроки = 1)
	                      |			И (ПРГ_Служебный.Наименование = ""Использовать_с_Логинетом_ГЕО"")");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.МинВремя) = Тип("Дата") Тогда
			Если ТекущаяДата() >= Выборка.МинВремя Тогда
				 ПРГ_ВыгружатьРегионИГород = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	ПРГ_НеИспользоватьРегионВГороде = Ложь;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(ПРГ_СлужебныйТаблицаПараметров.Параметр КАК Булево) КАК НеИспользоватьРегионВГороде
	                      |ИЗ
	                      |	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПРГ_Служебный КАК ПРГ_Служебный
	                      |		ПО ПРГ_СлужебныйТаблицаПараметров.Ссылка = ПРГ_Служебный.Ссылка
	                      |			И (ПРГ_СлужебныйТаблицаПараметров.НомерСтроки = 1)
	                      |			И (ПРГ_Служебный.Наименование = ""НЕ_Использовать_с_Логинетом_3Знака_Региона"")");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.НеИспользоватьРегионВГороде) = Тип("Булево") Тогда
				 ПРГ_НеИспользоватьРегионВГороде = Выборка.НеИспользоватьРегионВГороде;
		КонецЕсли;
	КонецЕсли;
	 //конец изменений 	
	 
	//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера
	ПРГ_Предварительный_поиск_заявок_и_тендеров = ложь;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(ПРГ_СлужебныйТаблицаПараметров.Параметр КАК БУЛЕВО) КАК НеИспользоватьРегионВГороде
	                      |ИЗ
	                      |	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПРГ_Служебный КАК ПРГ_Служебный
	                      |		ПО ПРГ_СлужебныйТаблицаПараметров.Ссылка = ПРГ_Служебный.Ссылка
	                      |			И (ПРГ_СлужебныйТаблицаПараметров.НомерСтроки = 1)
	                      |			И (ПРГ_Служебный.Наименование = ""Предварительный_поиск_заявок_и_тендеров"")");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.НеИспользоватьРегионВГороде) = Тип("Булево") Тогда
			  ПРГ_Предварительный_поиск_заявок_и_тендеров = Выборка.НеИспользоватьРегионВГороде;
		КонецЕсли;
	КонецЕсли;
    //конец изменений 
	 
	
КонецПроцедуры	

//для тестирования
Процедура ВыполнитьПаузу(чСекунд,WshShell = Неопределено) Экспорт
    
    Если чСекунд = 0 Тогда
        Возврат;
    КонецЕсли;
    
    cmdLine= "timeout /t "+Формат(чСекунд,"ЧГ=0");
	Если WshShell = Неопределено Тогда
	    WshShell = Новый COMОбъект("WScript.Shell");
	КонецЕслИ;
    
    WshShell.Run(cmdLine, 0, -1);

КонецПроцедуры
//конец изменений 
//начало изменений Ожиганов А. 19.12.2016 60359 использование полей гео и стреет при передачи в логинет
Процедура СтарыеЗапросвВыгрузитьРейсы()
	
//		"ВЫБРАТЬ
//		|	ПТЛ_ПланДоставки.ПланДоставки,
//		|	ПТЛ_ПланДоставки.Рейс,
//		|	ПТЛ_ПланДоставки.Рейс.Представление КАК Name,
//		|	1 КАК Status,
//		|	ПТЛ_ПланДоставки.ПланДоставки.Организация.Наименование КАК SenderName,
//		|	ПТЛ_ПланДоставки.ПланДоставки.Организация.ИНН КАК SenderINN,
//		|	ПТЛ_ПланДоставки.ПланДоставки.Организация.ИНН КАК ShipOwnerINN,
//		|	МАКСИМУМ(ВЫРАЗИТЬ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Получатель.НаименованиеПолное КАК СТРОКА(250))) КАК ReceiverName,
//		|	МАКСИМУМ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Получатель.ИНН) КАК ReceiverINN,
//		|	ПТЛ_ПланДоставки.ТипТранспорта.ТипКузова.Id КАК VehicleType,
//		|	1 КАК ShippingType,
//		|	МАКСИМУМ(ВЫБОР
//		|			КОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Склад.НСИ_АП.НСИ_Город = ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки.НСИ_Город
//		|				ТОГДА 2
//		|			КОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки.Дивизион.РеализацияНаЭкспорт
//		|				ТОГДА 3
//		|			ИНАЧЕ 3
//		|		КОНЕЦ) КАК Service,
//		|	ВЫРАЗИТЬ(ПТЛ_ПланДоставкиМаршруты.Коментарий КАК СТРОКА(250)) КАК Comment,
//		|	ПТЛ_ПланДоставки.ДатаОтгрузки КАК Date,
//		|	ПТЛ_ПланДоставки.ТипТранспорта.ВидГрузоподъемности.Id КАК VehicleTonnage,
//		|	0 КАК VehicleVolume,
//		|	""RUR"" КАК DesiredPriceCurrency,
//		|	0 КАК DesiredPriceAmount,
//		|	ИСТИНА КАК DesiredPriceVAT,
//		|	0 КАК VehicleTemperature,
//		|	1 КАК VehicleCount,
//		|	0 КАК TotalCargoCost,
//		|	ПТЛ_ПланДоставки.Период КАК ПланДоставкиДата
//		|ПОМЕСТИТЬ втРейсы
//		|ИЗ
//		|	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
//		|		ПО ПТЛ_ПланДоставки.Регистратор = ПТЛ_ПланДоставкиМаршруты.Ссылка
//		|			И ПТЛ_ПланДоставки.Рейс = ПТЛ_ПланДоставкиМаршруты.Рейс
//		|ГДЕ
//		|	НЕ ПТЛ_ПланДоставки.Исключено
//		|	И ПТЛ_ПланДоставки.Рейс.GUIDТендернойПлощадки = """"
//		|	И ПТЛ_ПланДоставки.ПланДоставки.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ПТЛ_СтатусыПланаДоставки.Тендер)
//		|	И НЕ ПТЛ_ПланДоставкиМаршруты.Самовывоз
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВЫРАЗИТЬ(ПТЛ_ПланДоставкиМаршруты.Коментарий КАК СТРОКА(250)),
//		|	ПТЛ_ПланДоставки.ПланДоставки,
//		|	ПТЛ_ПланДоставки.Рейс,
//		|	ПТЛ_ПланДоставки.Рейс.Представление,
//		|	ПТЛ_ПланДоставки.ПланДоставки.Организация.Наименование,
//		|	ПТЛ_ПланДоставки.ПланДоставки.Организация.ИНН,
//		|	ПТЛ_ПланДоставки.ДатаОтгрузки,
//		|	ПТЛ_ПланДоставки.ТипТранспорта.ТипКузова.Id,
//		|	ПТЛ_ПланДоставки.ТипТранспорта.ВидГрузоподъемности.Id,
//		|	ПТЛ_ПланДоставки.Период,
//		|	ПТЛ_ПланДоставки.ПланДоставки.Организация.ИНН
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	втРейсы.ПланДоставки,
//		|	втРейсы.Рейс,
//		|	втРейсы.Name,
//		|	втРейсы.Status,
//		|	втРейсы.SenderName,
//		|	втРейсы.SenderINN,
//		|	втРейсы.ShipOwnerINN,
//		|	втРейсы.ReceiverName,
//		|	втРейсы.ReceiverINN,
//		|	втРейсы.VehicleType,
//		|	втРейсы.ShippingType,
//		|	втРейсы.Service,
//		|	втРейсы.Comment,
//		|	втРейсы.Date,
//		|	втРейсы.VehicleVolume,
//		|	втРейсы.DesiredPriceCurrency,
//		|	втРейсы.DesiredPriceAmount,
//		|	втРейсы.DesiredPriceVAT,
//		|	втРейсы.VehicleTemperature,
//		|	втРейсы.VehicleCount,
//		|	втРейсы.TotalCargoCost,
//		|	втРейсы.VehicleTonnage,
//		|	втРейсы.ПланДоставкиДата
//		|ИЗ
//		|	втРейсы КАК втРейсы
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	втРейсы.ПланДоставки,
//		|	втРейсы.Рейс,
////начало изменений Ожиганов А. Свертка информации по одинаковым АП по рейсу 59672 29.11.2016 		
////		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку,
////конец изменений 		
//		|	""Продукты питания"" КАК Name,
//		|	8 КАК Form,
//		|	1 КАК Type,
////начало изменений Ожиганов А. Свертка информации по одинаковым АП по рейсу 59672 29.11.2016 		
////		|	ИтогиПоЗаданиямНаПеревозку.Count КАК Count,
////		|	ИтогиПоЗаданиямНаПеревозку.Weight,
//		|	Сумма(ИтогиПоЗаданиямНаПеревозку.Count) КАК Count,
//		|	Сумма(ИтогиПоЗаданиямНаПеревозку.Weight) Как Weight,
////конец изменений 		
//		|	ПТЛ_ПланДоставки.ДатаОтгрузки КАК ДатаОтгрузки,
//		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Организация.ИНН КАК ОрганизацияИНН,
//		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Организация.Наименование КАК ОрганизацияНаименование,
//		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Склад.НСИ_АП КАК АПСкладаОтгрузки,
//		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ДатаДоставкиПлан КАК ДатаДоставки,
//		|	ВЫРАЗИТЬ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Получатель.НаименованиеПолное КАК СТРОКА(250)) КАК КонтрагентНаименование,
//		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Получатель.ИНН КАК КонтрагентИНН,
//		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки КАК АПКонтрагента,
////начало изменений Ожиганов А. Свертка информации по одинаковым АП по рейсу 59672 29.11.2016 		
////		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Коментарий КАК Comment,
////конец изменений 		
//		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Склад.НСИ_АП.НСИ_АдресДоставки КАК АдресПогрузки,
//		|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки.НСИ_АдресДоставки КАК АдресВыгрузки
//		|ИЗ
//		|	втРейсы КАК втРейсы
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
//		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		|				ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка КАК ЗаданиеНаПеревозку,
//		|				СУММА(ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.КоличествоМестФакт) КАК Count,
//		|				ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.ВесБруттоФакт * 1000 КАК Weight
//		|			ИЗ
//		|				втРейсы КАК втРейсы
//		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
//		|						ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЗаданиеНаПеревозку.СоставЗадания КАК ПТЛ_ЗаданиеНаПеревозкуСоставЗадания
//		|						ПО ПТЛ_ПланДоставки.ЗаданиеНаПеревозку = ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка
//		|							И (НЕ ПТЛ_ПланДоставки.Исключено)
//		|					ПО втРейсы.ПланДоставки = ПТЛ_ПланДоставки.Регистратор
//		|						И втРейсы.Рейс = ПТЛ_ПланДоставки.Рейс
//		|			
//		|			СГРУППИРОВАТЬ ПО
//		|				ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка,
//		|				ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.ВесБруттоФакт * 1000) КАК ИтогиПоЗаданиямНаПеревозку
//		|			ПО ПТЛ_ПланДоставки.ЗаданиеНаПеревозку = ИтогиПоЗаданиямНаПеревозку.ЗаданиеНаПеревозку
//		|				И (НЕ ПТЛ_ПланДоставки.Исключено)
//		|		ПО втРейсы.ПланДоставки = ПТЛ_ПланДоставки.Регистратор
//		|			И втРейсы.Рейс = ПТЛ_ПланДоставки.Рейс
////начало изменений Ожиганов А. Свертка информации по одинаковым АП по рейсу 59672 29.11.2016 		
//		| Сгруппировать ПО
//		|			втРейсы.ПланДоставки,
//		|			втРейсы.Рейс,
//		|			ПТЛ_ПланДоставки.ДатаОтгрузки,
//		|			ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Организация.ИНН,
//		|			ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Организация.Наименование,
//		|			ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Склад.НСИ_АП,
//		|			ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ДатаДоставкиПлан,
//		|			ВЫРАЗИТЬ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Получатель.НаименованиеПолное КАК СТРОКА(250)),
//		|			ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Получатель.ИНН,
//		|			ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки,
//		|			ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Склад.НСИ_АП.НСИ_АдресДоставки,
//		|			ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки.НСИ_АдресДоставки
////конец изменений 
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	0 КАК НомерПоПорядку,
//		|	втРейсы.Рейс
//		|ИЗ
//		|	втРейсы КАК втРейсы
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	втРейсы.Рейс";	
	
КонецПроцедуры	
//конец изменений 

//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера
 Процедура НайтиОбновитьИнфуПоЗаявкам(мВыбПланы=Неопределено)
	
	Если ТипЗнч(мВыбПланы) = тип("Массив") Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПТЛ_ПланДоставкиМаршруты.Ссылка КАК ПланДоставки,
		                      |	ПТЛ_ПланДоставкиМаршруты.Рейс,
		                      |	ПТЛ_ПланДоставкиМаршруты.Рейс.GUIDТендернойПлощадки КАК РейсGUIDТендернойПлощадки,
		                      |	ПТЛ_ПланДоставкиМаршруты.Исключен,
		                      |	ПТЛ_ПланДоставкиМаршруты.Ссылка.Дата КАК ПланДоставкиДата
		                      |ИЗ
		                      |	Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
		                      |ГДЕ
		                      |	ПТЛ_ПланДоставкиМаршруты.Ссылка В(&ПланыДоставки)");
							  
		Запрос.УстановитьПараметр("ПланыДоставки",мВыбПланы);
		ТаблРейсов = Запрос.Выполнить().Выгрузить();
	Иначе // заявки указаны неявно
		Если Не ПРГ_Предварительный_поиск_заявок_и_тендеров Тогда
			возврат;
		КонецЕсли;
		 Запрос = Новый Запрос("ВЫБРАТЬ
		                       |	ПТЛ_ПланДоставкиМаршруты.Рейс,
		                       |	ПТЛ_ПланДоставкиМаршруты.Рейс.GUIDТендернойПлощадки,
		                       |	ПТЛ_ПланДоставки.Период КАК ПланДоставкиДата,
		                       |	ПТЛ_ПланДоставкиМаршруты.Исключен,
		                       |	ПТЛ_ПланДоставки.ПланДоставки КАК ПланДоставки
		                       |ИЗ
		                       |	Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
		                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
		                       |		ПО (НЕ ПТЛ_ПланДоставки.Исключено)
		                       |			И (ПТЛ_ПланДоставки.Рейс.GUIDТендернойПлощадки = """")
		                       |			И (ПТЛ_ПланДоставки.ПланДоставки.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ПТЛ_СтатусыПланаДоставки.Тендер))
		                       |			И (НЕ ПТЛ_ПланДоставкиМаршруты.Самовывоз)
		                       |			И (ПТЛ_ПланДоставки.Регистратор = ПТЛ_ПланДоставкиМаршруты.Ссылка)
		                       |			И (ПТЛ_ПланДоставки.Рейс = ПТЛ_ПланДоставкиМаршруты.Рейс)
		                       |
		                       |СГРУППИРОВАТЬ ПО
		                       |	ПТЛ_ПланДоставки.ПланДоставки,
		                       |	ПТЛ_ПланДоставки.Период,
		                       |	ПТЛ_ПланДоставкиМаршруты.Исключен,
		                       |	ПТЛ_ПланДоставкиМаршруты.Рейс,
		                       |	ПТЛ_ПланДоставкиМаршруты.Рейс.GUIDТендернойПлощадки");
		
		ТаблРейсов = Запрос.Выполнить().Выгрузить();		
	КонецЕсли;	
	
	Если ТаблРейсов = Неопределено или ТаблРейсов.Количество() = 0 Тогда
		возврат;
	КонецЕсли;	
	
	ТаблРейсов.Колонки.Добавить("ИмяРейсаВлогинет");
	ТаблРейсов.Колонки.Добавить("НайденВЛогинет",Новый ОписаниеТипов("Булево"));
	ТаблРейсов.ЗаполнитьЗначения(Ложь,"НайденВЛогинет");
	
	//блокировка 
	
	ПроверитьЗаполненность(СтруктураНастроек.Токен,"Токен пустой.");
	
	ОбъектСерилизации = Новый Структура("T,DD",СтруктураНастроек.Токен,Новый Массив);	
	
	//определяем ключ
	для Каждого ТекСтрока Из ТаблРейсов Цикл			
		ИмяРейса = ""+ТекСтрока.Рейс+" от "+Строка(Формат(ТекСтрока.ПланДоставкиДата, "ДЛФ=Д"));
		ТекСтрока.ИмяРейсаВлогинет = ИмяРейса;
		ОбъектСерилизации.DD.Добавить(ИмяРейса);
	КонецЦикла;
	
	Request 	 = ЗаписатьJSON(ОбъектСерилизации);
	ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/sr.svc/JSON/FindBatch"))[0];
	Response	 = HTTPPOST(ПараметрыМетода,Request);
	JSONОбъект   = ПрочитатьJSON(Response.ResponseText);
	
	ПроверитьВхождениеВКоллекциюПоКлючу("DD", JSONОбъект,"/WCFService/sr.svc/JSON/FindBatch"); //Response.КодСостояния
	ПроверитьРавенство(Response.КодСостояния, 200,"/WCFService/sr.svc/JSON/FindBatch"); //Ответ должен быть HTTP/1.1 200 OK
	
	ИсклПланыДоставки = Новый ТаблицаЗначений;
	ИсклПланыДоставки.Колонки.Добавить("ПланДоставки");
	ИсклПланыДоставки.Индексы.Добавить("ПланДоставки");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ПТЛ_Рейсы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблРейсов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Рейс");
	
	НачатьТранзакцию();
	Блокировка.Заблокировать();
	
	
	для Каждого Элемент Из JSONОбъект.Получить("DD")  Цикл	
		ИмяРейса    = Элемент.Получить("Name");
		GUIDЛогинет = ""+Элемент.Получить("Id"); //приведем обратно к строке
		НайдЗнч 	= ТаблРейсов.Найти(ИмяРейса,"ИмяРейсаВлогинет");
		Если НайдЗнч = Неопределено Тогда
			Сообщить("Для рейса полученного из Логинет "+ИмяРейса+" не найден Рейс на стороне 1С
				|метод: /WCFService/sr.svc/JSON/FindBatch
				|name: "+ИмяРейса+"
				|Id:"+ GUIDЛогинет);
		Иначе
			
			Если GUIDЛогинет = Неопределено 
				или ПустаяСтрока(GUIDЛогинет)
				или GUIDЛогинет ="00000000-0000-0000-0000-000000000000" Тогда
				GUIDЛогинет = "";
			КонецЕсли;
			
			Если НайдЗнч.РейсGUIDТендернойПлощадки <> GUIDЛогинет Тогда
				 ОбъектРейса 					   = НайдЗнч.Рейс.ПолучитьОбъект();
				 ОбъектРейса.GUIDТендернойПлощадки = GUIDЛогинет;
				 ОбъектРейса.Записать();
				 НайдЗнч.РейсGUIDТендернойПлощадки = ОбъектРейса.GUIDТендернойПлощадки; 
			 КонецЕсли;	
			 
			НайдЗнч.НайденВЛогинет = ?(НайдЗнч.РейсGUIDТендернойПлощадки = "",Ложь,Истина);
			
		КонецЕсли;	
	КонецЦикла;
	//выведем сообщения
	НайдЗнч = Неопределено;
	ЗафиксироватьТранзакцию();
	
	ОбъектСерилизации = Новый Структура("T,DD",СтруктураНастроек.Токен,Новый массив);
	//1 - цикл исключим планы доставки, по котрым есть не найденные заявки
	//может конечно оно лишнее, но навсякий случай подстрахуемся
	для Каждого ТекСтрока Из ТаблРейсов Цикл
		Если Не ТекСтрока.Исключен тогда  // хотелось бы добиться, чтобы определялся тендер в случае явного указания плана доставки в случае исключенных рейсов
			  Если Не ТекСтрока.НайденВЛогинет Тогда
					 НайдЗнчПлана = ИсклПланыДоставки.Найти(ТекСтрока.ПланДоставки,"ПланДоставки");
					 Если НайдЗнчПлана = Неопределено Тогда
							НСПлана			= ИсклПланыДоставки.Добавить();
							НСПлана.ПланДоставки = ТекСтрока.ПланДоставки;
					КонецЕсли;	
			 КонецЕсли;	
		Конецесли;		
	КонецЦикла;	
	
	//2-цикл исключим из из рейсов, которые встречаются в исключенных планах доставки
	к = 0;
	Пока к < ТаблРейсов.Количество() Цикл
		Если Не ТаблРейсов[к].НайденВЛогинет Тогда
			 ТаблРейсов.Удалить(ТаблРейсов[к]);
		ИначеЕсли ИсклПланыДоставки.Найти(ТаблРейсов[к].ПланДоставки,"ПланДоставки") <> Неопределено Тогда
			 ТаблРейсов.Удалить(ТаблРейсов[к]);
		Иначе
			 ОбъектСерилизации.DD.Добавить(ТаблРейсов[к].РейсGUIDТендернойПлощадки);
			 к = к + 1;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблРейсов.Количество() = 0 Тогда
		возврат; //нет сущностей для которых нужно определять тендер в логинет
	КонецЕсли;	
	
	Request    = ЗаписатьJSON(ОбъектСерилизации);	
	ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/sr.svc/JSON/FindTenderBatch"))[0];
	Response   = HTTPPOST(ПараметрыМетода,Request);
	JSONОбъект = ПрочитатьJSON(Response.ResponseText);
	
	ПроверитьВхождениеВКоллекциюПоКлючу("DD", JSONОбъект,"/WCFService/sr.svc/JSON/FindTenderBatch"); //Response.КодСостояния
	ПроверитьРавенство(Response.КодСостояния, 200,"/WCFService/sr.svc/JSON/FindTenderBatch"); //Ответ должен быть HTTP/1.1 200 OK
	
	ТаблРейсов.Колонки.Добавить("GUIDТендера",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(40)));
	ТаблРейсов.Колонки.Добавить("СтатусРейса");
	ТаблРейсов.Колонки.Добавить("Ошибка");
	ТаблРейсов.ЗаполнитьЗначения(-1,"СтатусРейса");
	ТаблРейсов.ЗаполнитьЗначения("","Ошибка");
	
	
	
	ТаблПланов = Новый ТаблицаЗначений; 
	ТаблПланов.Колонки.Добавить("ПланДоставки");
	ТаблПланов.Индексы.Добавить("ПланДоставки");
	ТаблПланов.Колонки.Добавить("GUIDТендернойПлощадки");
	ТаблПланов.Колонки.Добавить("БылиОшибки",Новый ОписаниеТипов("Булево"));
	
	
	Для Каждого Элемент Из JSONОбъект.Получить("DD") Цикл
		GUIDЛогинетРейса 	= ""+Элемент.Получить("RId");
		GUIDЛогинетТендера  = ""+Элемент.Получить("P");
		СтатусЗаявки 	    = Элемент.Получить("Rst");
		Ошибка 				= ""+Элемент.Получить("Err");
		
		НайдЗнч 			= ТаблРейсов.Найти(GUIDЛогинетРейса,"РейсGUIDТендернойПлощадки");
		Если НайдЗнч = Неопределено Тогда
			Сообщить("Для GUID рейса полученного из Логинет "+GUIDЛогинетРейса+" не найден Рейс на стороне 1С
				|метод:/WCFService/sr.svc/JSON/FindTenderBatch
				|RId:"+GUIDЛогинетРейса+"
				|P:"+GUIDЛогинетТендера+"
				|Rst:"+СтатусЗаявки+"
				|Err:"+Ошибка);
		Иначе
			
			Если СтатусЗаявки = 6  и GUIDЛогинетТендера = "00000000-0000-0000-0000-000000000000"  Тогда
				//исключаем рейс 
				//согласно документации  Отменена.	
				//Грузоотправитель отменил заявку (при отмене была указана причина «По вине грузоотправителя»)
				//или удалил из тендера в ходе сбора ставок.
				ТаблРейсов.Удалить(НайдЗнч);
			Иначе
				Если GUIDЛогинетТендера = "00000000-0000-0000-0000-000000000000"
					или  СтатусЗаявки  = -1 Тогда
					GUIDЛогинетТендера = "";
				КонецЕсли;
				
				
				НайдЗнч.GUIDТендера   	= GUIDЛогинетТендера; 
				НайдЗнч.СтатусРейса		= СтатусЗаявки;
				НайдЗнч.Ошибка			= Ошибка;
				
				 
			КонецЕсли;	
		КонецЕсли;	
		//Сообщить("Rid:"+ ТекСтрока.Получить("RId")+" P:"+ТекСтрока.Получить("P")+" Rst:"+ТекСтрока.Получить("Rst")+" Err:"+ТекСтрока.Получить("Err"));
	КонеЦЦикла;	
	
	Для Каждого ТекСтрока Из ТаблРейсов Цикл
		Если ТекСтрока.Исключен и ТекСтрока.GUIDТендера = "" Тогда  // допускаем такой случай
		Иначе
			НайдПлан = ТаблПланов.Найти(ТекСтрока.ПланДоставки,"ПланДоставки");
			Если НайдПлан = Неопределено тогда
				НСПлан = ТаблПланов.Добавить();
				НСПлан.ПланДоставки = ТекСтрока.ПланДоставки;
				НСПлан.GUIDТендернойПлощадки  = ТекСтрока.GUIDТендера;
				НСПлан.БылиОшибки			  = ложь;
			Иначе
				Если НСПлан.GUIDТендернойПлощадки <> ТекСтрока.GUIDТендера Тогда
					НСПлан.БылиОшибки			  = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	
	Если ТаблПланов.Количество() = 0 Тогда
		возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ПТЛ_ПланДоставки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблПланов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ПланДоставки");
	
	НачатьТранзакцию();
	Блокировка.Заблокировать();
	//блокировка  ???
	//занесем информацию по статусам
	Для Каждого ТекСтрока Из ТаблРейсов Цикл
		Если ТекСтрока.СтатусРейса > -1 Тогда
			ЗафиксироватьИзменениеСтатусаОбъектаОбмена(ТекСтрока.Рейс,ТекСтрока.СтатусРейса,Текстрока.Ошибка);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого Текстрока Из ТаблПланов Цикл 
		Если Текстрока.GUIDТендернойПлощадки = "00000000-0000-0000-0000-000000000000"
			или Текстрока.GUIDТендернойПлощадки = ""
		Тогда
			продолжить;
		КонецЕсли;	
		
		АРеквВБазе 		 	= ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Текстрока.ПланДоставки,Новый Структура("Ссылка,GUIDТендернойПлощадки"));
		Если АРеквВБазе = Неопределено Тогда
			продолжить;
		КонецЕсли;
		Если АРеквВБазе.GUIDТендернойПлощадки = Текстрока.GUIDТендернойПлощадки Тогда
			продолжить;
		КонецЕсли;	
		
		Объект 						 = Текстрока.ПланДоставки.ПолучитьОбъект();
		Объект.GUIDТендернойПлощадки = Текстрока.GUIDТендернойПлощадки;
		Объект.Записать();
	КонецЦикла;	
	
	ЗафиксироватьТранзакцию();
	
 	//получим информацию о тендере 
	
КонецПроцедуры	

функция УбратьСокращение(ЗнчНасПункт)
	Если ПРГ_МаксКолВоСимв = 0 Тогда
		//начало изменений Ожиганов А. 08.02.2017 исправление ошибки остаются пробелы
		//возврат ЗнчНасПункт;
		возврат СокрЛП(ЗнчНасПункт);
		//конец изменений 
	конецесли;	
	Результат = Сокрлп(ЗнчНасПункт);
	длСтр     = СтрДлина(Результат);
	начЗнчСч  = макс(1,ПРГ_МинКолВоСимв);
	КонЗнч    = мин(ПРГ_МаксКолВоСимв,длСтр);
	для н = начЗнчСч по КонЗнч Цикл
		Если Сред(Результат,н+1,1)=" " тогда
			Если МассСокр.Найти(Сред(Результат,1,н)) <> Неопределено Тогда
				//начало изменений Ожиганов А. 08.02.2017 исправление ошибки остаются пробелы
				//возврат Сред(Результат,н+2);
				возврат СокрЛП(Сред(Результат,н+2));
				//конец изменений 
			КонецЕсли;	
		КонецЕсли;	
		Если  Сред(Результат,длСтр-н,1) = " " Тогда
			Если МассСокр.Найти(Сред(Результат,длСтр-н+1)) <> Неопределено Тогда
				//начало изменений Ожиганов А. 08.02.2017 исправление ошибки остаются пробелы
				//возврат Сред(Результат,1,длСтр-н);
				возврат СокрЛП(Сред(Результат,1,длСтр-н));
				//конец изменений 
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	возврат СокрЛП(Результат); 
КонецФункции	

Функция НайтиНасПунктЛогинет(НасПункт) Экспорт 
	
	
	ПРГ_HTTPСоединение = Неопределено;
	МассивОшибок = Новый Массив;
	
//начало изменений Ожиганов А. исправление ошибки 1,5 часового зависания при обменен с Логинет  05.12.2016  б/н 06.12.2016
//а также возникших блокировок при считывании информации 06.12.2016
//вставим исключения 	
	//1 - залогинимся (/WCFService/auth.svc/JSON/Login)
	//Попытка
//конец изменений 	

	    Результат = Неопределено;

		WCFService_auth_svc_JSON_Login(Истина);

		Попытка
		ПроверитьЗаполненность(СтруктураНастроек.Токен,"Токен пустой.");
	
		//ОбъектСерилизации = Новый Структура("T,DD",СтруктураНастроек.Токен,Новый Массив);
		ОбъектСерилизации = Новый Структура("P",НасПункт);
		
		Request = ЗаписатьJSON(ОбъектСерилизации);

		ПараметрыМетода = СтруктураНастроек.МетодыСервиса.НайтиСтроки(Новый Структура("Имя","/WCFService/sr.svc/JSON/FindGeo"))[0];
		Response = HTTPPOST(ПараметрыМетода,Request);
		JSONОбъект = ПрочитатьJSON(Response.ResponseText);
		
		резМассив = JSONОбъект.Получить("DD"); 
		Если ТипЗнч(резМассив) =  Тип("Массив")  Тогда
			Если резМассив.Количество() > 0 Тогда
				ЭлМассив = резМассив[0];
				Результат = Новый Структура("ID,Name,Full",ЭлМассив.Получить("ID"),ЭлМассив.Получить("Name"),ЭлМассив.Получить("Full"));
			КонецЕслИ;	
		КонецЕсли;	
	
		//ПроверитьВхождениеВКоллекциюПоКлючу("DD", JSONОбъект,"/WCFService/sr.svc/JSON/FindBatch"); //Response.КодСостояния
		//ПроверитьРавенство(Response.КодСостояния, 200,"/WCFService/sr.svc/JSON/FindBatch"); //Ответ должен быть HTTP/1.1 200 OK
	
		Исключение
			Результат = Неопределено;
		 	сообщить(ОписаниеОшибки());
		Конецпопытки;
		
		WCFService_auth_svc_JSON_Logout();
	
	   возврат Результат;
	  
КонецФункции	


//конец изменений 
функция НайтиКонтрПоИННКПП(Знач ИНН,Знач КПП)
	
	Если ТипЗнч(ИНН) <> Тип("Строка") Тогда
		    ИНН = "";
	КонецЕсли;	
		
	Если ПустаяСтрока(ИНН) Тогда
		возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;	
		
	Если ТипЗнч(КПП) <> Тип("Строка") Тогда
		    КПП = "";
	КонецЕсли;	
		
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Контрагенты.Ссылка,
	                      |	Контрагенты.Представление,
	                      |	1 КАК Сортировка
	                      |ИЗ
	                      |	Справочник.Контрагенты КАК Контрагенты
	                      |ГДЕ
	                      |	НЕ Контрагенты.ЭтоГруппа
	                      |	И Контрагенты.ИНН = &ИНН
	                      |	И Контрагенты.КПП = &КПП
	                      |	И Контрагенты.ПРГТК
	                      |	И НЕ Контрагенты.ПометкаУдаления
	                      | И Контрагенты.GUIDТендернойПлощадки ПОДОБНО ""%[1-9,a-z,A-Z]%""
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	Контрагенты.Ссылка,
	                      |	Контрагенты.Представление,
	                      |	2
	                      |ИЗ
	                      |	Справочник.Контрагенты КАК Контрагенты
	                      |ГДЕ
	                      |	НЕ Контрагенты.ЭтоГруппа
	                      |	И Контрагенты.ИНН = &ИНН
						  | И Контрагенты.GUIDТендернойПлощадки ПОДОБНО ""%[1-9,a-z,A-Z]%""
	                      |	И Контрагенты.ПРГТК
	                      |	И НЕ Контрагенты.ПометкаУдаления
	                      |	И Контрагенты.GUIDТендернойПлощадки <> """"
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Сортировка");
	
	Запрос.УстановитьПараметр("ИНН",ИНН);
	Запрос.УстановитьПараметр("КПП",КПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		возврат Выборка.Ссылка;
	Иначе
		возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции	



СформироватьСтруктуруНастроек();

//начало изменений Ожиганов А. исправление ошибки 1,5 часового зависания при обменен с Логинет  05.12.2016  б/н 08.12.2016
ПРГ_ИспользоватьОдноСоединение = Истина;
Определить_ПРГ_МинВремя_Соединения_Операций_ИсипользованиеОдногоСоединения();
ПРГ_HTTPСоединение = Неопределено;
//конец изменений 

//начало изменений Ожиганов А. 25.01.2017 предварительный поиск заявок и тендера
ПРГ_МД5ПослЗапроса = "";
МассСокр = Новый Массив; //в нижн регистре
МассСокр.Добавить("г");
МассСокр.Добавить("г.");
МассСокр.Добавить("д");
МассСокр.Добавить("с");
МассСокр.Добавить("пгт");

ПРГ_МаксКолВоСимв = 0;
ПРГ_МинКолВоСимв = 0;
Для н = 0 По МассСокр.Количество()-1 Цикл
	длСтр = СтрДлина(МассСокр[н]);
	Если ПРГ_МинКолВоСимв = 0 Тогда
		ПРГ_МинКолВоСимв = длСтр;
	Иначе
		ПРГ_МинКолВоСимв = Мин(длСтр,ПРГ_МинКолВоСимв);
	КонецЕсли;	
	ПРГ_МаксКолВоСимв = Макс(длСтр,ПРГ_МаксКолВоСимв);
КонецЦикла;	
//конец изменений  