Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция РассчитатьКалендарныеДниБолезни(ДатаНачалаСобытия, ДатаНачала, ДатаОкончания, ПричинаНетрудоспособности, СлучайУходаЗаБольнымРебенком) Экспорт 
	
	ДнейОплаты = 0;
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		Если ДатаНачалаСобытия <> ДатаНачала Тогда
			ДнейКОплате = (ДатаОкончания - ДатаНачалаСобытия) / мДлинаСуток + 1;
			ОплаченоРанее = (ДатаНачала - ДатаНачалаСобытия) / мДлинаСуток;
		Иначе
			ДнейКОплате = (ДатаОкончания - ДатаНачала) / мДлинаСуток + 1;
			ОплаченоРанее = 0;
		КонецЕсли;
		
		// учтем ограничение периода оплаты по одному страховому случаю
		Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании Тогда
			ДнейОплаты = Макс(Мин(ДнейКОплате, 24) - ОплаченоРанее,0) // п.2 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ
		ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Тогда
			ДнейОплаты = Макс(Мин(ДнейКОплате, 7) - ОплаченоРанее,0) // пп. 6 п.5 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ
		ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно
			Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре Тогда
			ДнейОплаты = Макс(Мин(ДнейКОплате, 15) - ОплаченоРанее,0) // пп. 2 п.5 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ
		Иначе
			ДнейОплаты = ДнейКОплате
		КонецЕсли;
	КонецЕсли;

	Возврат ДнейОплаты
	
КонецФункции

Функция ВернутьТекстВТПоСостояниюРаботников()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСостояний.Период КАК Период,
	|	ТаблицаСостояний.Регистратор КАК Регистратор,
	|	ТаблицаСостояний.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСостояний.Активность,
	|	ТаблицаСостояний.Сотрудник КАК Сотрудник,
	|	ТаблицаСостояний.Организация,
	|	ТаблицаСостояний.Состояние КАК Состояние,
	|	ТаблицаСостояний.ПериодЗавершения КАК ПериодЗавершения,
	|	ТаблицаСостояний.СостояниеЗавершения,
	|	ТаблицаСостояний.ПервичныйДокумент,
	|	ТаблицаСостояний.ВидДополнительногоОтпуска,
	|	ТаблицаСостояний.ДатаНачалаДоп
	|ПОМЕСТИТЬ ВТТаблицаСостояний
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК ТаблицаСостояний
	|ГДЕ
	|	(&НеОтбиратьПоСотруднику
	|			ИЛИ ТаблицаСостояний.Сотрудник = &Сотрудник)
	|	И (&НеОтбиратьПоОрганизации
	|			ИЛИ ТаблицаСостояний.Организация В
	|				(ВЫБРАТЬ
	|					СписокГоловныхОрганизаций.Ссылка
	|				ИЗ
	|					ВТГоловныеОрганизации КАК СписокГоловныхОрганизаций))
	|	И (НЕ ТаблицаСостояний.Регистратор ССЫЛКА Документ.ПереносДанных)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Период,
	|	НомерСтроки,
	|	Сотрудник,
	|	Состояние,
	|	ПериодЗавершения";
	
КонецФункции

Функция ВернутьТекстВТПоИсправляемымДокументам(ПараметрыЗапроса, СоответствиеДокументовИсправлений)
	
	МДСостояний = Метаданные.РегистрыСведений.СостояниеРаботниковОрганизаций;
	
	СписокДляВыбора = Новый СписокЗначений;
	СпискиРегистраторов = глЗначениеПеременной("глСпискиРегистраторов");
	СпискиРегистраторов.Свойство("СостояниеРаботниковОрганизаций", СписокДляВыбора);
	СтрокаТипов = "";
	Для каждого ЭлементСписка Из СписокДляВыбора Цикл
		ИмяДокумента = ЭлементСписка.Значение.ПустаяСсылка().Метаданные().Имя; // из списка значений получаем менеджер документа
		СтрокаТипов = СтрокаТипов + ?(Не ЗначениеЗаполнено(СтрокаТипов),"",",") + "ДокументСсылка." + ИмяДокумента;
	КонецЦикла;

	ТаблицаСостояний = Новый ТаблицаЗначений;
	ТаблицаСостояний.Колонки.Добавить("Регистратор",	Новый ОписаниеТипов(СтрокаТипов));
	ТаблицаСостояний.Колонки.Добавить("Период",			Новый ОписаниеТипов("Дата"));
	ТаблицаСостояний.Колонки.Добавить("НомерСтроки",	Новый ОписаниеТипов("Число"));
	Для Каждого Измерение Из МДСостояний.Измерения Цикл
		ТаблицаСостояний.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
	КонецЦикла;
	Для Каждого Ресурс Из МДСостояний.Ресурсы Цикл
		ТаблицаСостояний.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;
	Для Каждого Реквизит Из МДСостояний.Реквизиты Цикл
		ТаблицаСостояний.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеДокументовИсправлений Цикл
		ДвиженияИсправляемогоДокумента = КлючИЗначение.Значение.ДвиженияИсправляемогоДокумента.Получить();
		
		Если ДвиженияИсправляемогоДокумента = Неопределено ИЛИ ДвиженияИсправляемогоДокумента.Получить("СостояниеРаботниковОрганизаций") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СостоянияРаботников = ДвиженияИсправляемогоДокумента["СостояниеРаботниковОрганизаций"];
		Для Каждого Состояние Из СостоянияРаботников Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСостояний.Добавить(), Состояние);
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыЗапроса.Вставить("ТаблицаСостояний",	ТаблицаСостояний);
	
	Возврат
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаСостояний
	|ИЗ
	|	&ТаблицаСостояний КАК ТаблицаСостояний
	|
	|ГДЕ
	|	(&НеОтбиратьПоСотруднику
	|			ИЛИ ТаблицаСостояний.Сотрудник = &Сотрудник)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Период,
	|	НомерСтроки,
	|	Сотрудник,
	|	Состояние,
	|	ПериодЗавершения";
	
КонецФункции

// Формирует запрос по регистру СостояниеРаботниковОрганизаций
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапрос(Организации = Неопределено, ПодразделениеОрганизации, Регистраторы, ДатаНачала, ДатаОкончания, МаксимальноеКоличествоСобытий = 0, ТолькоСОтметкой = Ложь, Сотрудник = Неопределено, СоответствиеДокументовИсправлений = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистраторы",				Регистраторы);
	Запрос.УстановитьПараметр("ДатаНачала",					НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",				КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("СписокОрганизаций",			Организации);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",	ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Сотрудник",					Сотрудник);
	Запрос.УстановитьПараметр("ОтбиратьСобытияПоДокументу",	ЗначениеЗаполнено(Регистраторы));
	Запрос.УстановитьПараметр("НеОтбиратьПоПодразделению",	Не ЗначениеЗаполнено(ПодразделениеОрганизации));
	Запрос.УстановитьПараметр("НеОтбиратьПоСотруднику",		Не ЗначениеЗаполнено(Сотрудник));
	Запрос.УстановитьПараметр("НеОтбиратьПоОрганизации",	Не ЗначениеЗаполнено(Организации));
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Определим периоды смены (реальные или намеченные) состояния работников за указанный пользователем интервал.
	// Выбираем намеченные события, зарегистрированные тем же регистратором.
	// Составим список возможных расчетных документов за соответствующий период регистрации
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.Ссылка
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ВТГоловныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокОрганизаций)";
	Запрос.Выполнить();
	
	Если СоответствиеДокументовИсправлений = Неопределено Тогда
		Запрос.Текст = ВернутьТекстВТПоСостояниюРаботников();
	Иначе
		Запрос.Текст = ВернутьТекстВТПоИсправляемымДокументам(Запрос.Параметры, СоответствиеДокументовИсправлений);
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостояниеРаботников.Сотрудник КАК Сотрудник,
	|	СостояниеРаботников.Сотрудник.Физлицо КАК ФизЛицо,
	|	СостояниеРаботников.Период КАК ДатаНачала,
	|	ЕСТЬNULL(МИНИМУМ(ДОБАВИТЬКДАТЕ(СостояниеБудущее.Период, ДЕНЬ, -1)), БудущиеНамеченныеСобытия.Период) КАК ДатаОкончания,
	|	СостояниеРаботников.Состояние КАК Состояние,
	|	СостояниеРаботников.Регистратор КАК КадровыйДокумент,
	|	ОтпускаРаботниковОрганизации.ВидДополнительногоОтпуска,
	|	ОтпускаРаботниковОрганизации.ДатаНачалаДоп,
	|	ОтпускаРаботниковОрганизации.РабочийГодС,
	|	ОтпускаРаботниковОрганизации.РабочийГодПо,
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 05.08.2011 09:55 
	|	ЕСТЬNULL(ОтпускаРаботниковОрганизации.AVT_ДатаНачалаПервичногоОтпуска, ДАТАВРЕМЯ(1,1,1)) КАК AVT_ДатаНачалаПервичногоОтпуска,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|	СостояниеРаботников.Организация
	|ПОМЕСТИТЬ ВТСостояниеРаботников
	|ИЗ
	|	ВТТаблицаСостояний КАК СостояниеРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаРаботниковОрганизации
	|		ПО СостояниеРаботников.Регистратор = ОтпускаРаботниковОрганизации.Ссылка
	|			И СостояниеРаботников.Период = ОтпускаРаботниковОрганизации.ДатаНачала
	|			И СостояниеРаботников.Сотрудник = ОтпускаРаботниковОрганизации.Сотрудник
	|			И (&НеОтбиратьПоСотруднику
	|				ИЛИ СостояниеРаботников.Сотрудник = &Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СостояниеРаботников.Сотрудник КАК Сотрудник,
	|			СостояниеРаботников.Период КАК Период,
	|			СостояниеРаботников.Период КАК ДатаНачала
	|		ИЗ
	|			ВТТаблицаСостояний КАК СостояниеРаботников
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СостояниеРаботников.Сотрудник,
	|			СостояниеРаботников.ПериодЗавершения,
	|			СостояниеРаботников.Период
	|		ИЗ
	|			ВТТаблицаСостояний КАК СостояниеРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаСостояний КАК СостояниеРаботниковПроверка
	|				ПО (СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период)
	|					И (СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения)
	|					И СостояниеРаботников.Сотрудник = СостояниеРаботниковПроверка.Сотрудник
	|		ГДЕ
	|			СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			И СостояниеРаботниковПроверка.Сотрудник ЕСТЬ NULL ) КАК СостояниеБудущее
	|		ПО СостояниеРаботников.Период < СостояниеБудущее.Период
	|			И СостояниеРаботников.Сотрудник = СостояниеБудущее.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(ДОБАВИТЬКДАТЕ(НамеченныеСобытия.ДатаИзменения, ДЕНЬ, -1)) КАК Период,
	|			СостояниеРаботников.Регистратор КАК Регистратор,
	|			СостояниеРаботников.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТТаблицаСостояний КАК СостояниеРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НамеченныеСобытияПоПерсоналу КАК НамеченныеСобытия
	|				ПО СостояниеРаботников.Регистратор = НамеченныеСобытия.Регистратор
	|					И СостояниеРаботников.Период <= НамеченныеСобытия.ДатаИзменения
	|					И (ВЫБОР
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.ОтпускЕжегодный)
	|							ТОГДА ИСТИНА
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.ОтпускУчебный)
	|							ТОГДА ИСТИНА
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.ОтпускУчебныйНеоплачиваемый)
	|							ТОГДА ИСТИНА
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.ОтпускУчебныйНеоплачиваемый)
	|							ТОГДА ИСТИНА
	|						КОГДА СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка)
	|								И НамеченныеСобытия.ПланируемоеСобытие = ЗНАЧЕНИЕ(Перечисление.НамеченныеСобытияПоПерсоналу.Командировка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ)
	|					И СостояниеРаботников.Сотрудник = НамеченныеСобытия.Сотрудник
	|		ГДЕ
	|			((НЕ &ОтбиратьСобытияПоДокументу)
	|					ИЛИ СостояниеРаботников.Регистратор В (&Регистраторы))
	|			И (&ОтбиратьСобытияПоДокументу
	|					ИЛИ СостояниеРаботников.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СостояниеРаботников.Регистратор,
	|			СостояниеРаботников.НомерСтроки) КАК БудущиеНамеченныеСобытия
	|		ПО СостояниеРаботников.Регистратор = БудущиеНамеченныеСобытия.Регистратор
	|			И СостояниеРаботников.НомерСтроки = БудущиеНамеченныеСобытия.НомерСтроки
	|ГДЕ
	|	(НЕ СостояниеРаботников.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.НеРаботает), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком)))
	|	И ((НЕ &ОтбиратьСобытияПоДокументу)
	|			ИЛИ СостояниеРаботников.Регистратор В (&Регистраторы))
	|	И (&ОтбиратьСобытияПоДокументу
	|			ИЛИ СостояниеРаботников.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостояниеРаботников.Организация,
	|	СостояниеРаботников.Регистратор,
	|	СостояниеРаботников.Состояние,
	|	СостояниеРаботников.Период,
	|	БудущиеНамеченныеСобытия.Период,
	|	ОтпускаРаботниковОрганизации.ВидДополнительногоОтпуска,
	|	ОтпускаРаботниковОрганизации.ДатаНачалаДоп,
	|	ОтпускаРаботниковОрганизации.РабочийГодС,
	|	ОтпускаРаботниковОрганизации.РабочийГодПо,
	|	СостояниеРаботников.Сотрудник,
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 05.08.2011 09:55 
	|	ЕСТЬNULL(ОтпускаРаботниковОрганизации.AVT_ДатаНачалаПервичногоОтпуска, ДАТАВРЕМЯ(1,1,1)),
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|	СостояниеРаботников.Сотрудник.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	Запрос.Текст = АнализНеявокПереопределяемый.ВернутьТекстВТСписокРасчетныхДокументов();
	Запрос.Выполнить();
	
	Запрос.Текст = АнализНеявокПереопределяемый.ВернутьТекстВТНачислениеКомандировки();
	Запрос.Выполнить();
	
	Запрос.Текст = АнализНеявокПереопределяемый.ВернутьТекстВТНачислениеОтпуска();
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
		//Вадим
	//|	МИНИМУМ(ОсновныеНачисления.Ссылка) КАК ВидРасчета
	|	МАКСИМУМ(ОсновныеНачисления.Ссылка) КАК ВидРасчета
	//ВадимКонец
	|ПОМЕСТИТЬ ВТНачислениеУчебногоОтпуска
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке))
	|	И ОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)
	|	И ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииВДругойМестности), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение))
			//Вадим
	|	И (НЕ ОсновныеНачисления.ПометкаУдаления)
	//ВадимКонец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОсновныеНачисления.Ссылка) КАК ВидРасчета
	|ПОМЕСТИТЬ ВТНачислениеВынужденныйПрогул
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)
	|	И ОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)
	|	И ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВынужденныйПрогул)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОсновныеНачисления.Ссылка) КАК ВидРасчета
	|ПОМЕСТИТЬ ВТНачислениеГосударственныеОбязанности
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)
	|	И ОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)
	|	И ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности)";
	Запрос.Выполнить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетныеИКадровыеДанные.Отметка,
	|	РасчетныеИКадровыеДанные.Сотрудник,
	|	РасчетныеИКадровыеДанные.СотрудникНаименование КАК СотрудникНаименование,
	|	РасчетныеИКадровыеДанные.Физлицо,
	|	РасчетныеИКадровыеДанные.ДатаНачала КАК ДатаНачала,
	|	РасчетныеИКадровыеДанные.ДатаОкончания,
	|	РасчетныеИКадровыеДанные.Неявка КАК Неявка,
	|	РасчетныеИКадровыеДанные.КадровыйДокумент КАК КадровыйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК РасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА РасчетныеИКадровыеДанные.РасчетныйДокумент ЕСТЬ НЕ NULL 
	|			ТОГДА РасчетныеИКадровыеДанные.ВидРасчета
	|		КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам)
	|		КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ТравмаНаПроизводстве)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве)
	|		КОГДА РасчетныеИКадровыеДанные.Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПособиеПриДолечивании), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Протезирование), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Карантин), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПоУходуЗаВзрослым), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание))
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ)
	|		КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка)
	|			ТОГДА ПВРКомандировка.ВидРасчета
	|		КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|			ТОГДА ПВРОтпуск.ВидРасчета
	|		КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|			ТОГДА ПВРОтпускУчебный.ВидРасчета
	|		КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный)
	|		КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет)
	|		КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход)
	|		КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВынужденныйПрогул)
	|			ТОГДА ПВРВынужденныйПрогул.ВидРасчета
	|		КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ГосударственныеОбязанности)
	|			ТОГДА ПВРГосударственныеОбязанности.ВидРасчета
	|		КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул)
	|		КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами)
	|		КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой)
	|			ТОГДА NULL
	|	КОНЕЦ КАК ВидРасчета,
	|	РасчетныеИКадровыеДанные.ПорядокРасчетаОтпуска,
	|	РасчетныеИКадровыеДанные.ВидДополнительногоОтпуска,
	|	РасчетныеИКадровыеДанные.ДатаНачалаДоп,
	|	РасчетныеИКадровыеДанные.РабочийГодС,
	|	РасчетныеИКадровыеДанные.РабочийГодПо,
	|	РасчетныеИКадровыеДанные.ПричинаНетрудоспособности,
	|	РасчетныеИКадровыеДанные.ПроцентОплаты,
	|	РасчетныеИКадровыеДанные.ПервичныйБольничныйЛист,
	|	РасчетныеИКадровыеДанные.ОграничениеПособия,
	|	РасчетныеИКадровыеДанные.СлучайУходаЗаБольнымРебенком,
	|	РасчетныеИКадровыеДанные.ДатаНачалаСобытия,
	|	РасчетныеИКадровыеДанные.ДатаНачалаОплаты,
	|	РасчетныеИКадровыеДанные.ЯвляетсяПродолжениемБолезни,
	|	ВЫБОР
	|		КОГДА РасчетныеИКадровыеДанные.РасчетныйДокумент ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетныеИКадровыеДанные.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПособиеПриДолечивании)
	|						ТОГДА ВЫБОР
	|								КОГДА РАЗНОСТЬДАТ(РасчетныеИКадровыеДанные.ДатаНачала, ДОБАВИТЬКДАТЕ(РасчетныеИКадровыеДанные.ДатаОкончания, ДЕНЬ, 1), ДЕНЬ) < 0
	|									ТОГДА 0
	|								КОГДА РАЗНОСТЬДАТ(РасчетныеИКадровыеДанные.ДатаНачала, ДОБАВИТЬКДАТЕ(РасчетныеИКадровыеДанные.ДатаОкончания, ДЕНЬ, 1), ДЕНЬ) > 24
	|									ТОГДА 24
	|								ИНАЧЕ РАЗНОСТЬДАТ(РасчетныеИКадровыеДанные.ДатаНачала, ДОБАВИТЬКДАТЕ(РасчетныеИКадровыеДанные.ДатаОкончания, ДЕНЬ, 1), ДЕНЬ)
	|							КОНЕЦ
	|					КОГДА РасчетныеИКадровыеДанные.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоУходуЗаВзрослым)
	|						ТОГДА ВЫБОР
	|								КОГДА РАЗНОСТЬДАТ(РасчетныеИКадровыеДанные.ДатаНачала, ДОБАВИТЬКДАТЕ(РасчетныеИКадровыеДанные.ДатаОкончания, ДЕНЬ, 1), ДЕНЬ) < 0
	|									ТОГДА 0
	|								КОГДА РАЗНОСТЬДАТ(РасчетныеИКадровыеДанные.ДатаНачала, ДОБАВИТЬКДАТЕ(РасчетныеИКадровыеДанные.ДатаОкончания, ДЕНЬ, 1), ДЕНЬ) > 7
	|									ТОГДА 7
	|								ИНАЧЕ РАЗНОСТЬДАТ(РасчетныеИКадровыеДанные.ДатаНачала, ДОБАВИТЬКДАТЕ(РасчетныеИКадровыеДанные.ДатаОкончания, ДЕНЬ, 1), ДЕНЬ)
	|							КОНЕЦ
	|					КОГДА РасчетныеИКадровыеДанные.СлучайУходаЗаБольнымРебенком В (ЗНАЧЕНИЕ(Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно), ЗНАЧЕНИЕ(Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре))
	|						ТОГДА ВЫБОР
	|								КОГДА РАЗНОСТЬДАТ(РасчетныеИКадровыеДанные.ДатаНачала, ДОБАВИТЬКДАТЕ(РасчетныеИКадровыеДанные.ДатаОкончания, ДЕНЬ, 1), ДЕНЬ) < 0
	|									ТОГДА 0
	|								КОГДА РАЗНОСТЬДАТ(РасчетныеИКадровыеДанные.ДатаНачала, ДОБАВИТЬКДАТЕ(РасчетныеИКадровыеДанные.ДатаОкончания, ДЕНЬ, 1), ДЕНЬ) > 15
	|									ТОГДА 15
	|								ИНАЧЕ РАЗНОСТЬДАТ(РасчетныеИКадровыеДанные.ДатаНачала, ДОБАВИТЬКДАТЕ(РасчетныеИКадровыеДанные.ДатаОкончания, ДЕНЬ, 1), ДЕНЬ)
	|							КОНЕЦ
	|					ИНАЧЕ РАЗНОСТЬДАТ(РасчетныеИКадровыеДанные.ДатаНачала, ДОБАВИТЬКДАТЕ(РасчетныеИКадровыеДанные.ДатаОкончания, ДЕНЬ, 1), ДЕНЬ)
	|				КОНЕЦ
	|		ИНАЧЕ РасчетныеИКадровыеДанные.ДнейОплаты
	|	КОНЕЦ КАК ДнейОплаты,
	|	РасчетныеИКадровыеДанные.ДатаНарушенияРежима,
	|	РасчетныеИКадровыеДанные.НомерВходящегоДокумента,
	|	РасчетныеИКадровыеДанные.СерияВходящегоДокумента,
	|	РасчетныеИКадровыеДанные.ВидПростоя,
	|	РасчетныеИКадровыеДанные.Организация,
	|	РасчетныеИКадровыеДанные.ОрганизацияНаименование,
	|	ЕСТЬNULL(РасчетныеИКадровыеДанные.РасчетныеДанныеПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодРегистрации,
	|	РасчетныеИКадровыеДанные.СтажЛет,
	|	РасчетныеИКадровыеДанные.СтажМесяцев,
	|	РасчетныеИКадровыеДанные.СтажБезНестраховыхПериодовЛет,
	|	РасчетныеИКадровыеДанные.СтажБезНестраховыхПериодовСтажМесяцев
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетныеИКадровыеДанные.Сотрудник КАК Сотрудник,
	|		РасчетныеИКадровыеДанные.СотрудникНаименование КАК СотрудникНаименование,
	|		РасчетныеИКадровыеДанные.СотрудникВидДоговора КАК СотрудникВидДоговора,
	|		РасчетныеИКадровыеДанные.Неявка КАК Неявка,
	|		РасчетныеИКадровыеДанные.ДатаНачала КАК ДатаНачала,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(РасчетныеИКадровыеДанные.РасчетныйДокумент) ЕСТЬ НЕ NULL 
	|					И МАКСИМУМ(РасчетныеИКадровыеДанные.РасчетныйДокументПроведен) = ИСТИНА
	|				ТОГДА ЛОЖЬ
	|			КОГДА МАКСИМУМ(РасчетныеИКадровыеДанные.КадровыйДокумент) ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Отметка,
	|		ЕСТЬNULL(МАКСИМУМ(РасчетныеИКадровыеДанные.КадровыеДанныеФизЛицо), МАКСИМУМ(РасчетныеИКадровыеДанные.РасчетныеДанныеФизЛицо)) КАК Физлицо,
	|		ЕСТЬNULL(МАКСИМУМ(РасчетныеИКадровыеДанные.КадровыеДанныеДатаОкончания), МАКСИМУМ(РасчетныеИКадровыеДанные.РасчетныеДанныеДатаОкончания)) КАК ДатаОкончания,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.КадровыйДокумент) КАК КадровыйДокумент,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.РасчетныйДокумент) КАК РасчетныйДокумент,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.РасчетныйДокументПроведен) КАК РасчетныйДокументПроведен,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.ВидРасчета) КАК ВидРасчета,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(РасчетныеИКадровыеДанные.ПорядокРасчетаОтпуска) ЕСТЬ НЕ NULL 
	|				ТОГДА МАКСИМУМ(РасчетныеИКадровыеДанные.ПорядокРасчетаОтпуска)
	|			КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|			ИНАЧЕ NULL
	|		КОНЕЦ КАК ПорядокРасчетаОтпуска,
	|		ЕСТЬNULL(МАКСИМУМ(РасчетныеИКадровыеДанные.РасчетныеДанныеВидДополнительногоОтпуска), МАКСИМУМ(РасчетныеИКадровыеДанные.КадровыеДанныеВидДополнительногоОтпуска)) КАК ВидДополнительногоОтпуска,
	|		ЕСТЬNULL(МАКСИМУМ(РасчетныеИКадровыеДанные.РасчетныеДанныеДатаНачалаДоп), МАКСИМУМ(РасчетныеИКадровыеДанные.КадровыеДанныеДатаНачалаДоп)) КАК ДатаНачалаДоп,
	|		ЕСТЬNULL(МАКСИМУМ(РасчетныеИКадровыеДанные.РасчетныеДанныеРабочийГодС), МАКСИМУМ(РасчетныеИКадровыеДанные.КадровыеДанныеРабочийГодС)) КАК РабочийГодС,
	|		ЕСТЬNULL(МАКСИМУМ(РасчетныеИКадровыеДанные.РасчетныеДанныеРабочийГодПо), МАКСИМУМ(РасчетныеИКадровыеДанные.КадровыеДанныеРабочийГодПо)) КАК РабочийГодПо,
	|		ЕСТЬNULL(МАКСИМУМ(РасчетныеИКадровыеДанные.ПричинаНетрудоспособности), ВЫБОР
	|				КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
	|				КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ОбщееЗаболевание)
	|				КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ТравмаНаПроизводстве)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве)
	|				КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПоУходуЗаРебенком)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоУходуЗаРебенком)
	|				КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПоУходуЗаВзрослым)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоУходуЗаВзрослым)
	|				КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Карантин)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.Карантин)
	|				КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Протезирование)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.Протезирование)
	|				КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПособиеПриДолечивании)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПособиеПриДолечивании)
	|				ИНАЧЕ NULL
	|			КОНЕЦ) КАК ПричинаНетрудоспособности,
	|		ЕСТЬNULL(МАКСИМУМ(РасчетныеИКадровыеДанные.ПроцентОплаты), 100) КАК ПроцентОплаты,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.ПервичныйБольничныйЛист) КАК ПервичныйБольничныйЛист,
	|		ЕСТЬNULL(МАКСИМУМ(РасчетныеИКадровыеДанные.СлучайУходаЗаБольнымРебенком), ВЫБОР
	|				КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПоУходуЗаРебенком)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно)
	|				ИНАЧЕ NULL
	|			КОНЕЦ) КАК СлучайУходаЗаБольнымРебенком,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.ДнейОплаты) КАК ДнейОплаты,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.ДатаНарушенияРежима) КАК ДатаНарушенияРежима,
	|		ЕСТЬNULL(МАКСИМУМ(РасчетныеИКадровыеДанные.ОграничениеПособия), ВЫБОР
	|				КОГДА РасчетныеИКадровыеДанные.Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам))
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОграниченияПособия.ОбщееОграничение)
	|				ИНАЧЕ NULL
	|			КОНЕЦ) КАК ОграничениеПособия,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.НомерВходящегоДокумента) КАК НомерВходящегоДокумента,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.СерияВходящегоДокумента) КАК СерияВходящегоДокумента,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.ДатаНачалаСобытия) КАК ДатаНачалаСобытия,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.ДатаНачалаОплаты) КАК ДатаНачалаОплаты,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.ЯвляетсяПродолжениемБолезни) КАК ЯвляетсяПродолжениемБолезни,
	|		ЕСТЬNULL(МАКСИМУМ(РасчетныеИКадровыеДанные.ВидПростоя), ВЫБОР
	|				КОГДА РасчетныеИКадровыеДанные.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПростояРаботника.ПоНезависящимПричинам)
	|				ИНАЧЕ NULL
	|			КОНЕЦ) КАК ВидПростоя,
	|		РасчетныеИКадровыеДанные.Организация КАК Организация,
	|		РасчетныеИКадровыеДанные.ОрганизацияНаименование КАК ОрганизацияНаименование,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.РасчетныеДанныеПериодРегистрации) КАК РасчетныеДанныеПериодРегистрации,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.СтажЛет) КАК СтажЛет,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.СтажМесяцев) КАК СтажМесяцев,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.СтажБезНестраховыхПериодовЛет) КАК СтажБезНестраховыхПериодовЛет,
	|		МАКСИМУМ(РасчетныеИКадровыеДанные.СтажБезНестраховыхПериодовСтажМесяцев) КАК СтажБезНестраховыхПериодовСтажМесяцев
	|	ИЗ
	|		(ВЫБРАТЬ
	|			КадровыеДанные.Сотрудник КАК Сотрудник,
	|			КадровыеДанные.Сотрудник.Наименование КАК СотрудникНаименование,
	|			КадровыеДанные.Сотрудник.ВидДоговора КАК СотрудникВидДоговора,
	|			КадровыеДанные.Состояние КАК Неявка,
	|			КадровыеДанные.ДатаНачала КАК ДатаНачала,
	|			КадровыеДанные.ФизЛицо КАК КадровыеДанныеФизЛицо,
	|			КадровыеДанные.ДатаОкончания КАК КадровыеДанныеДатаОкончания,
	|			КадровыеДанные.КадровыйДокумент КАК КадровыйДокумент,
	|			КадровыеДанные.ВидДополнительногоОтпуска КАК КадровыеДанныеВидДополнительногоОтпуска,
	|			КадровыеДанные.ДатаНачалаДоп КАК КадровыеДанныеДатаНачалаДоп,
	|			КадровыеДанные.РабочийГодС КАК КадровыеДанныеРабочийГодС,
	|			КадровыеДанные.РабочийГодПо КАК КадровыеДанныеРабочийГодПо,
	|			NULL КАК РасчетныеДанныеФизЛицо,
	|			NULL КАК РасчетныеДанныеДатаОкончания,
	|			NULL КАК РасчетныйДокумент,
	|			NULL КАК РасчетныйДокументПроведен,
	|			NULL КАК ВидРасчета,
	|			NULL КАК ПорядокРасчетаОтпуска,
	|			NULL КАК РасчетныеДанныеВидДополнительногоОтпуска,
	|			NULL КАК РасчетныеДанныеДатаНачалаДоп,
	|			NULL КАК РасчетныеДанныеРабочийГодС,
	|			NULL КАК РасчетныеДанныеРабочийГодПо,
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ИЗМЕНЕНИЕ
	// Измайлова Полина 26.09.2011 09:50 
	//|			NULL КАК ПричинаНетрудоспособности,
	//|			NULL КАК ПроцентОплаты,
	//|			NULL КАК ПервичныйБольничныйЛист,
	|			РегистрацияБольничныхЛистовРаботники.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|			РегистрацияБольничныхЛистовРаботники.ПроцентОплаты КАК ПроцентОплаты,
	|			РегистрацияБольничныхЛистовРаботники.ПервичныйБольничныйЛист КАК ПервичныйБольничныйЛист,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ИЗМЕНЕНИЕ}                                          
	|			NULL КАК ОграничениеПособия,
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 26.09.2011 11:03 
	//|			NULL КАК СлучайУходаЗаБольнымРебенком,
    |			РегистрацияБольничныхЛистовРаботники.СлучайУходаЗаБольнымРебенком КАК СлучайУходаЗаБольнымРебенком,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
	|			NULL КАК ДнейОплаты,
	|			NULL КАК ДатаНарушенияРежима,
				///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ИЗМЕНЕНИЕ
	// Измайлова Полина 26.09.2011 09:52 
	//|			NULL КАК НомерВходящегоДокумента,
	//|			NULL КАК СерияВходящегоДокумента,
	//|			КадровыеДанные.ДатаНачала КАК ДатаНачалаСобытия,
	|			РегистрацияБольничныхЛистовРаботники.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|			РегистрацияБольничныхЛистовРаботники.СерияВходящегоДокумента КАК СерияВходящегоДокумента,
	|			ЕСТЬNULL(РегистрацияБольничныхЛистовРаботники.ДатаНачалаСобытия, КадровыеДанные.ДатаНачала) КАК ДатаНачалаСобытия,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ИЗМЕНЕНИЕ}                                          
	|			КадровыеДанные.ДатаНачала КАК ДатаНачалаОплаты,
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ИЗМЕНЕНИЕ
	// Измайлова Полина 26.09.2011 09:53 
	//|			NULL КАК ЯвляетсяПродолжениемБолезни,
	|			РегистрацияБольничныхЛистовРаботники.ЯвляетсяПродолжениемБолезни КАК ЯвляетсяПродолжениемБолезни,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ИЗМЕНЕНИЕ}    
	|			NULL КАК ВидПростоя,
	|			КадровыеДанные.Организация КАК Организация,
	|			КадровыеДанные.Организация.Наименование КАК ОрганизацияНаименование,
	|			NULL КАК РасчетныеДанныеПериодРегистрации,
	|			0 КАК СтажЛет,
	|			0 КАК СтажМесяцев,
	|			0 КАК СтажБезНестраховыхПериодовЛет,
	|			0 КАК СтажБезНестраховыхПериодовСтажМесяцев
	|		ИЗ
	|			ВТСостояниеРаботников КАК КадровыеДанные
			    	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 26.09.2011 09:53 
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.AVT_РегистрацияБольничныхЛистов.РаботникиОрганизации КАК РегистрацияБольничныхЛистовРаботники
	|				ПО КадровыеДанные.Сотрудник = РегистрацияБольничныхЛистовРаботники.Сотрудник
	|					И КадровыеДанные.КадровыйДокумент = РегистрацияБольничныхЛистовРаботники.Ссылка
	|					И КадровыеДанные.ДатаНачала = РегистрацияБольничныхЛистовРаботники.ДатаНачала
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			РасчетныеДанные.Сотрудник,
	|			РасчетныеДанные.Сотрудник.Наименование,
	|			РасчетныеДанные.Сотрудник.ВидДоговора,
	|			РасчетныеДанные.Состояние,
	|			РасчетныеДанные.ДатаНачала,
	|			NULL,
	|			NULL,
	|			NULL,
	|			NULL,
	|			NULL,
	|			NULL,
	|			NULL,
	|			РасчетныеДанные.Физлицо,
	|			РасчетныеДанные.ДатаОкончания,
	|			РасчетныеДанные.РасчетныйДокумент,
	|			РасчетныеДанные.РасчетныйДокумент.Проведен,
	|			РасчетныеДанные.ВидРасчета,
	|			РасчетныеДанные.ПорядокРасчетаОтпуска,
	|			РасчетныеДанные.ВидДополнительногоОтпуска,
	|			РасчетныеДанные.ДатаНачалаДоп,
	|			РасчетныеДанные.РабочийГодС,
	|			РасчетныеДанные.РабочийГодПо,
	|			РасчетныеДанные.ПричинаНетрудоспособности,
	|			РасчетныеДанные.ПроцентОплаты,
	|			РасчетныеДанные.ПервичныйБольничныйЛист,
	|			РасчетныеДанные.ОграничениеПособия,
	|			РасчетныеДанные.СлучайУходаЗаБольнымРебенком,
	|			РасчетныеДанные.ДнейОплаты,
	|			РасчетныеДанные.ДатаНарушенияРежима,
	|			РасчетныеДанные.НомерВходящегоДокумента,
	|			РасчетныеДанные.СерияВходящегоДокумента,
	|			РасчетныеДанные.ДатаНачалаСобытия,
	|			РасчетныеДанные.ДатаНачалаОплаты,
	|			РасчетныеДанные.ЯвляетсяПродолжениемБолезни,
	|			РасчетныеДанные.ВидПростоя,
	|			РасчетныеДанные.Организация,
	|			РасчетныеДанные.Организация.Наименование,
	|			РасчетныеДанные.ПериодРегистрации,
	|			РасчетныеДанные.СтажЛет,
	|			РасчетныеДанные.СтажМесяцев,
	|			РасчетныеДанные.СтажБезНестраховыхПериодовЛет,
	|			РасчетныеДанные.СтажБезНестраховыхПериодовСтажМесяцев
	|		ИЗ
	|			ВТСписокРасчетныхДокументов КАК РасчетныеДанные) КАК РасчетныеИКадровыеДанные
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасчетныеИКадровыеДанные.Сотрудник,
	|		РасчетныеИКадровыеДанные.СотрудникНаименование,
	|		РасчетныеИКадровыеДанные.СотрудникВидДоговора,
	|		РасчетныеИКадровыеДанные.Неявка,
	|		РасчетныеИКадровыеДанные.ДатаНачала,
	|		РасчетныеИКадровыеДанные.ОрганизацияНаименование,
	|		РасчетныеИКадровыеДанные.Организация) КАК РасчетныеИКадровыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеКомандировки КАК ПВРКомандировка
	|		ПО РасчетныеИКадровыеДанные.Сотрудник.ВидДоговора = ПВРКомандировка.ВидДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеОтпуска КАК ПВРОтпуск
	|		ПО РасчетныеИКадровыеДанные.Сотрудник.ВидДоговора = ПВРОтпуск.ВидДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеУчебногоОтпуска КАК ПВРОтпускУчебный
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеВынужденныйПрогул КАК ПВРВынужденныйПрогул
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеГосударственныеОбязанности КАК ПВРГосударственныеОбязанности
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаОкончания,
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТСостояниеРаботников.Сотрудник
	|					ИЗ
	|						ВТСостояниеРаботников КАК ВТСостояниеРаботников
	|				
	|					ОБЪЕДИНИТЬ ВСЕ
	|				
	|					ВЫБРАТЬ
	|						ВТСписокРасчетныхДокументов.Сотрудник
	|					ИЗ
	|						ВТСписокРасчетныхДокументов КАК ВТСписокРасчетныхДокументов)) КАК РаботникиОрганизации
	|		ПО РасчетныеИКадровыеДанные.Сотрудник = РаботникиОрганизации.Сотрудник
	|ГДЕ
	|	РасчетныеИКадровыеДанные.Неявка ЕСТЬ НЕ NULL 
	|	И (&НеОтбиратьПоОрганизации
	|			ИЛИ ВЫБОР
	|				КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаОкончания
	|						И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
	|				ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
	|			КОНЕЦ В (&СписокОрганизаций))
	|	И (&НеОтбиратьПоПодразделению
	|			ИЛИ ВЫБОР
	|				КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаОкончания
	|						И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|				ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|			КОНЕЦ В ИЕРАРХИИ (&ПодразделениеОрганизации))
	|	И ((НЕ &ОтбиратьСобытияПоДокументу)
	|			ИЛИ РасчетныеИКадровыеДанные.КадровыйДокумент ЕСТЬ НЕ NULL )
	|	И РасчетныеИКадровыеДанные.Отметка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала,
	|	СотрудникНаименование,
	|	Неявка,
	|	КадровыйДокумент,
	|	РасчетныеИКадровыеДанные.РасчетныйДокументПроведен УБЫВ";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НЕОПРЕДЕЛЕНО КАК РасчетныйДокумент",АнализНеявокПереопределяемый.ТекстОписанияРасчетногоДокумента());
	
	Если МаксимальноеКоличествоСобытий = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1","")
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1"," ПЕРВЫЕ " + МаксимальноеКоличествоСобытий)
	КонецЕсли;
	Если Не ТолькоСОтметкой Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РасчетныеИКадровыеДанные.Отметка","")
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапрос()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ

// Заполняет т.ч. обработки кадровыми и расчетными документами
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Булево - Истина, если успешно выполнено заполнение, иначе Ложь
//
Функция Автозаполнение() Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияЗК.СообщитьОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Необходимо указать организацию!"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ОтбиратьСобытияПоДокументу Тогда
		ДатаН = КадровыйДокументОтбора.Дата;
		РезультатЗапроса = СформироватьЗапрос(Организация, ПодразделениеОрганизации, КадровыйДокументОтбора, ДатаН, ДатаН);
	Иначе
		РезультатЗапроса = СформироватьЗапрос(Организация, ПодразделениеОрганизации, Неопределено, ДатаНачалаОтбора, ДатаОкончанияОтбора);
	КонецЕсли;

	Неявки.Загрузить(РезультатЗапроса.Выгрузить());
	ГоловнаяОрганизация = ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
	
	// обработаем табличную часть, проверяя на дублирование документов
	ПредыдущийКадровыйДокумент	= Неопределено;
	ПредыдущийСотрудник			= Неопределено;
	ПредыдущаяНеявка			= Неопределено;
	ПредыдущаяДатаНачала		= Неопределено;
	
	
	// структура для заполнения реквизитов расчетного документа
	ДанныеРасчетногоДокумента = Новый Структура();
	Для каждого Реквизит Из Метаданные().ТабличныеЧасти.Неявки.Реквизиты Цикл
		ДанныеРасчетногоДокумента.Вставить(Реквизит.Имя)
	КонецЦикла;
												
	ДанныеРасчетногоДокумента.Вставить("Организация", 		Организация);
	ДанныеРасчетногоДокумента.Вставить("ПериодРегистрации", ?(ЗначениеЗаполнено(ПериодРегистрации), ПериодРегистрации, НачалоМесяца(ОбщегоНазначенияЗК.ПолучитьРабочуюДату())));
	
	Для Каждого СтрокаТаблицы Из Неявки Цикл
		
		Если ПредыдущийКадровыйДокумент = СтрокаТаблицы.КадровыйДокумент
			 И ПредыдущийСотрудник = СтрокаТаблицы.Сотрудник
			 И ПредыдущаяНеявка = СтрокаТаблицы.Неявка
			 И ПредыдущаяДатаНачала = СтрокаТаблицы.ДатаНачала Тогда
			
			// полностью повторились ключевые реквизиты - отметим как дубль
			СтрокаТаблицы.ДублирующаясяСтрока = Истина;
			СтрокаТаблицы.Отметка = Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			
			ТипРасчетногоДокумента = ТипЗнч(СтрокаТаблицы.РасчетныйДокумент);
			Если ТипРасчетногоДокумента = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту")  Тогда
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаНачалаСобытия) Тогда
					СтрокаТаблицы.ДатаНачалаСобытия = СтрокаТаблицы.ДатаНачала;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаНачалаОплаты) Тогда
					СтрокаТаблицы.ДатаНачалаОплаты = СтрокаТаблицы.ДатаНачала;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ПериодРасчетаСреднегоЗаработкаНачало) Тогда
					СтрокаТаблицы.ПериодРасчетаСреднегоЗаработкаНачало = ДобавитьМесяц(НачалоМесяца(СтрокаТаблицы.ДатаНачалаСобытия), - 12);
					СтрокаТаблицы.ПериодРасчетаСреднегоЗаработкаОкончание = НачалоМесяца(СтрокаТаблицы.ДатаНачалаСобытия) - 1;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ДанныеРасчетногоДокумента, СтрокаТаблицы);
				НачислениеПоБольничномуЛистуСервис.ПрочитатьДанныеОЛьготах(ДанныеРасчетногоДокумента);
				НачислениеПоБольничномуЛистуСервис.ПрочитатьРазмерыПособия(ДанныеРасчетногоДокумента, Ложь, Ложь, ГоловнаяОрганизация);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеРасчетногоДокумента);
				
			ИначеЕсли ТипРасчетногоДокумента = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций")
				Или ТипРасчетногоДокумента = Тип("ДокументСсылка.РегистрацияПростоевРаботниковОрганизаций") 	
				Или ТипРасчетногоДокумента = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда	
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ПериодРасчетаСреднегоЗаработкаНачало) Тогда
					СтрокаТаблицы.ПериодРасчетаСреднегоЗаработкаНачало = ДобавитьМесяц(НачалоМесяца(СтрокаТаблицы.ДатаНачалаСобытия), - 12);
					СтрокаТаблицы.ПериодРасчетаСреднегоЗаработкаОкончание = НачалоМесяца(СтрокаТаблицы.ДатаНачалаСобытия) - 1;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Запоминаем текущие значения ключевых реквизитов
		ПредыдущийКадровыйДокумент	= СтрокаТаблицы.КадровыйДокумент;
		ПредыдущийСотрудник			= СтрокаТаблицы.Сотрудник;
		ПредыдущаяНеявка			= СтрокаТаблицы.Неявка;
		ПредыдущаяДатаНачала		= СтрокаТаблицы.ДатаНачала;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Процедура создает документы по пустым строкам табличной части
//
// Параметры: 
//  СписокКадровыхДокументов - Масиив строк ТЧ Неявки, отмеченные и соответствующие отбору
//
// Возвращаемое значение:
//  Нет
//
Процедура СоздатьДокументы(СписокКадровыхДокументов) Экспорт
	
	Если СписокКадровыхДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Неявки.НомерСтроки КАК НомерСтроки,
	|	Неявки.Сотрудник,
	|	Неявки.ФизЛицо,
	|	Неявки.Неявка,
	|	Неявки.ДатаНачалаСобытия,
	|	ВЫБОР
	|		КОГДА Неявки.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Неявки.ПорядокРасчетаОтпуска
	|	КОНЕЦ КАК ПорядокРасчетаОсновногоОтпуска,
	|	ВЫБОР
	|		КОГДА Неявки.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Неявки.ВидРасчета
	|	КОНЕЦ КАК ВидРасчетаОсновногоОтпуска,
	|	ВЫБОР
	|		КОГДА Неявки.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА Неявки.ДатаНачала <> Неявки.ДатаНачалаДоп
	|			ТОГДА Неявки.ДатаНачала
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ДатаНачалаОсновногоОтпуска,
	|	ВЫБОР
	|		КОГДА Неявки.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА Неявки.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Неявки.ДатаОкончания
	|		КОГДА Неявки.ДатаНачала <> Неявки.ДатаНачалаДоп
	|			ТОГДА ДОБАВИТЬКДАТЕ(Неявки.ДатаНачалаДоп, ДЕНЬ, -1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ДатаОкончанияОсновногоОтпуска,
	|	ВЫБОР
	|		КОГДА Неявки.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|			ТОГДА Неявки.ВидРасчета
	|		ИНАЧЕ Неявки.ВидДополнительногоОтпуска
	|	КОНЕЦ КАК ВидРасчетаДополнительногоОтпуска,
	|	ВЫБОР
	|		КОГДА Неявки.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|			ТОГДА Неявки.ДатаНачала
	|		ИНАЧЕ Неявки.ДатаНачалаДоп
	|	КОНЕЦ КАК ДатаНачалаДополнительногоОтпуска,
	|	ВЫБОР
	|		КОГДА Неявки.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|			ТОГДА Неявки.ДатаОкончания
	|		КОГДА Неявки.ДатаНачалаДоп <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Неявки.ДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ДатаОкончанияДополнительногоОтпуска,
	|	Неявки.РабочийГодС,
	|	Неявки.РабочийГодПо,
	|	Неявки.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Неявки.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Неявки.ПроцентОплаты КАК ПроцентОплатыДополнительногоОтпуска
	|ПОМЕСТИТЬ ВТОтпуска
	|ИЗ
	|	&Неявки КАК Неявки
	|ГДЕ
	|	Неявки.Отметка
	|	И Неявки.Неявка В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 06.07.2011 16:30 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтпуска.НомерСтроки,
	|	ВТОтпуска.Сотрудник,
	|	ВТОтпуска.Неявка,
	|	ВТОтпуска.ДатаНачалаОсновногоОтпуска КАК НачалоОтпуска,
	|	ВТОтпуска.ДатаОкончанияОсновногоОтпуска КАК ОкончаниеОтпуска,
	|	ИСТИНА КАК ОсновнойОтпуск
	|ПОМЕСТИТЬ ВТПериодыОтпусков
	|ИЗ
	|	ВТОтпуска КАК ВТОтпуска
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОтпуска.НомерСтроки,
	|	ВТОтпуска.Сотрудник,
	|	ВТОтпуска.Неявка,
	|	ВТОтпуска.ДатаНачалаДополнительногоОтпуска,
	|	ВТОтпуска.ДатаОкончанияДополнительногоОтпуска,
	|	ЛОЖЬ
	|ИЗ
	|	ВТОтпуска КАК ВТОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследКадрИзменение.НомерСтроки,
	|	ПоследКадрИзменение.Неявка,
	|	ПоследКадрИзменение.НачалоОтпуска,
	|	ПоследКадрИзменение.ОкончаниеОтпуска,
	|	ПоследКадрИзменение.ОсновнойОтпуск,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= ПоследКадрИзменение.НачалоОтпуска
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.AVT_ПроизводственныйКалендарь
	|		ИНАЧЕ РаботникиОрганизаций.ГрафикРаботы.AVT_ПроизводственныйКалендарь
	|	КОНЕЦ КАК Календарь
	|ПОМЕСТИТЬ ВТПериодыОтпусковСКалендарем
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТПериодыОтпусков.НомерСтроки КАК НомерСтроки,
	|		ВТПериодыОтпусков.Сотрудник КАК Сотрудник,
	|		ВТПериодыОтпусков.Неявка КАК Неявка,
	|		ВТПериодыОтпусков.НачалоОтпуска КАК НачалоОтпуска,
	|		ВТПериодыОтпусков.ОкончаниеОтпуска КАК ОкончаниеОтпуска,
	|		ВТПериодыОтпусков.ОсновнойОтпуск КАК ОсновнойОтпуск,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|	ИЗ
	|		ВТПериодыОтпусков КАК ВТПериодыОтпусков
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ВТПериодыОтпусков.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И ВТПериодыОтпусков.НачалоОтпуска >= РаботникиОрганизаций.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТПериодыОтпусков.НомерСтроки,
	|		ВТПериодыОтпусков.Сотрудник,
	|		ВТПериодыОтпусков.Неявка,
	|		ВТПериодыОтпусков.НачалоОтпуска,
	|		ВТПериодыОтпусков.ОкончаниеОтпуска,
	|		ВТПериодыОтпусков.ОсновнойОтпуск) КАК ПоследКадрИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ПоследКадрИзменение.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И ПоследКадрИзменение.Период = РаботникиОрганизаций.Период";
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
	Запрос.УстановитьПараметр("Неявки",Неявки.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Отпуска.НомерСтроки КАК НомерСтроки,
	|	Отпуска.Сотрудник,
	|	Отпуска.ФизЛицо,
	|	Отпуска.ПорядокРасчетаОсновногоОтпуска,
	|	Отпуска.ВидРасчетаОсновногоОтпуска,
	|	Отпуска.ДатаНачалаОсновногоОтпуска,
	|	Отпуска.ДатаНачалаСобытия,
	|	Отпуска.ДатаОкончанияОсновногоОтпуска,
	|	ДниОсновногоОтпуска.КалендарныеДни КАК КоличествоДнейОсновногоОтпуска,
	|	Отпуска.ВидРасчетаДополнительногоОтпуска,
	|	Отпуска.ДатаНачалаДополнительногоОтпуска,
	|	Отпуска.ДатаОкончанияДополнительногоОтпуска,
	|	ДниДопОтпуска.КалендарныеДни КАК КоличествоДнейДополнительногоОтпуска,
	|	Отпуска.РабочийГодС,
	|	Отпуска.РабочийГодПо,
	|	Отпуска.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Отпуска.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Отпуска.ПроцентОплатыДополнительногоОтпуска,
	|	ВЫБОР
	|		КОГДА Отпуска.ВидРасчетаДополнительногоОтпуска.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке))
	|			ТОГДА """"
	|		КОГДА Отпуска.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|			ТОГДА ""для учебного отпуска необходимо указать вид расчета по среднему заработку для отпуска""
	|		КОГДА Отпуска.ДатаНачалаДополнительногоОтпуска = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА """"
	|		ИНАЧЕ ""для дополнительного отпуска необходимо указать вид расчета по среднему заработку для отпуска""
	|	КОНЕЦ КАК СообщениеОбОшибке,
	|	ВЫБОР
	|		КОГДА Отпуска.ДатаНачалаОсновногоОтпуска = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОсновнойОтпуск,
	|	ВЫБОР
	|		КОГДА Отпуска.ДатаНачалаДополнительногоОтпуска = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДополнительныйОтпуск
	|ИЗ
	|	ВТОтпуска КАК Отпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Отпуска.НомерСтроки КАК НомерСтроки,
	|			СУММА(КалендарьОсновногоОтпуска.КалендарныеДни) КАК КалендарныеДни
	|		ИЗ
	// ЗАКОММЕНТИРОВАНО: Измайлова Полина 06.07.2011 16:31  
	//|			ВТОтпуска КАК Отпуска
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 06.07.2011 16:33 
	|			ВТПериодыОтпусковСКалендарем КАК Отпуска
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК КалендарьОсновногоОтпуска
	// ЗАКОММЕНТИРОВАНО: Измайлова Полина 06.07.2011 16:39  
	//|				ПО (КалендарьОсновногоОтпуска.ДатаКалендаря МЕЖДУ Отпуска.ДатаНачалаОсновногоОтпуска И Отпуска.ДатаОкончанияОсновногоОтпуска)
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 06.07.2011 16:36 
	|				ПО (КалендарьОсновногоОтпуска.ДатаКалендаря МЕЖДУ Отпуска.НачалоОтпуска И Отпуска.ОкончаниеОтпуска)
	|					И Отпуска.Календарь = КалендарьОсновногоОтпуска.AVT_ПроизводственныйКалендарь
	|		ГДЕ
	|			Отпуска.ОсновнойОтпуск
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Отпуска.НомерСтроки) КАК ДниОсновногоОтпуска
	|		ПО Отпуска.НомерСтроки = ДниОсновногоОтпуска.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА Отпуска.Неявка = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
	|					ТОГДА КОЛИЧЕСТВО(КалендарьДопОтпуска.ДатаКалендаря)
	|				ИНАЧЕ СУММА(КалендарьДопОтпуска.КалендарныеДни)
	|			КОНЕЦ КАК КалендарныеДни,
	|			Отпуска.НомерСтроки КАК НомерСтроки
	|		ИЗ
			// ЗАКОММЕНТИРОВАНО: Измайлова Полина 06.07.2011 16:38  
	//|			ВТОтпуска КАК Отпуска
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 06.07.2011 16:38 
	|			ВТПериодыОтпусковСКалендарем КАК Отпуска
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК КалендарьДопОтпуска
	// ЗАКОММЕНТИРОВАНО: Измайлова Полина 06.07.2011 16:41  
	//|				ПО (КалендарьДопОтпуска.ДатаКалендаря МЕЖДУ Отпуска.ДатаНачалаДополнительногоОтпуска И Отпуска.ДатаОкончанияДополнительногоОтпуска)
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 06.07.2011 16:39 
	|				ПО (КалендарьДопОтпуска.ДатаКалендаря МЕЖДУ Отпуска.НачалоОтпуска И Отпуска.ОкончаниеОтпуска)
	|					И Отпуска.Календарь = КалендарьДопОтпуска.AVT_ПроизводственныйКалендарь
	|		ГДЕ
	|			(НЕ Отпуска.ОсновнойОтпуск)
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Отпуска.Неявка,
	|			Отпуска.НомерСтроки) КАК ДниДопОтпуска
	|		ПО Отпуска.НомерСтроки = ДниДопОтпуска.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ДанныеОтпусков = Запрос.Выполнить().Выгрузить();
	ДанныеОтпусков.Индексы.Добавить("НомерСтроки");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисления.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.НулеваяСумма)
	|	И ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника)
	|	И ОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)";
	
	ВРНеоплачиваемыйПростой = Неопределено;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВРНеоплачиваемыйПростой = Выборка.ВидРасчета;
	КонецЕсли;
	
	МассивДокументовИсправлений = Новый Массив;
	СоответствиеДокументовИсправлений = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из СписокКадровыхДокументов Цикл
		Если СтрокаТаблицы.КадровыйДокумент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеРегистратора = СтрокаТаблицы.КадровыйДокумент.Метаданные();
		Если МетаданныеРегистратора.Реквизиты.Найти("ИсправляемыйДокумент") <> Неопределено Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.ИсправляемыйДокумент,
			|	Док.ДвиженияИсправляемогоДокумента
			|ИЗ
			|	Документ." + МетаданныеРегистратора.Имя + " КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка";
			
			Ссылка = СтрокаТаблицы.КадровыйДокумент;
			Пока Ссылка <> Неопределено И Не Ссылка.Пустая() Цикл
				Запрос.УстановитьПараметр("Ссылка",	Ссылка);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Ссылка = Выборка.ИсправляемыйДокумент;
					Если Не Ссылка.Пустая() Тогда
						МассивДокументовИсправлений.Добавить(Ссылка);
						ДокументИсправление = Новый Структура;
						ДокументИсправление.Вставить("ИсходныйДокумент",				СтрокаТаблицы.КадровыйДокумент);
						ДокументИсправление.Вставить("ДвиженияИсправляемогоДокумента",	Выборка.ДвиженияИсправляемогоДокумента);
						СоответствиеДокументовИсправлений.Вставить(Ссылка, ДокументИсправление);
					КонецЕсли;
				Иначе
					Ссылка = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетныеДокументыДляИсправления = Новый Соответствие;
	Если МассивДокументовИсправлений.Количество() > 0 Тогда
		РезультатЗапроса = СформироватьЗапрос(Организация, ПодразделениеОрганизации, МассивДокументовИсправлений, ДатаНачалаОтбора, ДатаОкончанияОтбора, , , , СоответствиеДокументовИсправлений);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.Отметка
				И ЗначениеЗаполнено(Выборка.КадровыйДокумент)
				И ЗначениеЗаполнено(Выборка.РасчетныйДокумент) Тогда
				
				ИсходныйДокумент = СоответствиеДокументовИсправлений[Выборка.КадровыйДокумент].ИсходныйДокумент;
				
				СтруктураРасчетногоДокумента = Новый Структура;
				СтруктураРасчетногоДокумента.Вставить("КадровыйДокумент",			Выборка.КадровыйДокумент);
				СтруктураРасчетногоДокумента.Вставить("РасчетныйДокумент",			Выборка.РасчетныйДокумент);
				СтруктураРасчетногоДокумента.Вставить("СовпадаетПериодРегистрации",	Выборка.ПериодРегистрации = ПериодРегистрации);
				
				РасчетныеДокументыДляИсправления.Вставить(ИсходныйДокумент, СтруктураРасчетногоДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеСотрудниковДляПилотногоПроекта = Неопределено;
	Если ПроведениеРасчетов.ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(ПериодРегистрации, Организация) Тогда
		Сотрудники = Неявки.Выгрузить(СписокКадровыхДокументов).Скопировать(Новый Структура("РасчетныйДокумент", Документы.НачислениеПоБольничномуЛисту.ПустаяСсылка()),"Сотрудник").ВыгрузитьКолонку("Сотрудник");
		ДанныеСотрудниковДляПилотногоПроекта = ОбменСведениямиОПособияхСФСС.ДанныеСотрудникаДляЗаявленияНаВыплатуПособия(Организация, Сотрудники, ТекущаяДата(), "ДляОбработки");
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	СтруктураСтрокиТабличнойЧасти = Новый Структура;
	МД = Метаданные.Обработки.АнализНеявок.ТабличныеЧасти.Неявки;
	Для Каждого Реквизит Из МД.СтандартныеРеквизиты Цикл
		СтруктураСтрокиТабличнойЧасти.Вставить(Реквизит.Имя);
	КонецЦикла;
	Для Каждого Реквизит Из МД.Реквизиты Цикл
		СтруктураСтрокиТабличнойЧасти.Вставить(Реквизит.Имя);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из СписокКадровыхДокументов Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.КадровыйДокумент)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиТабличнойЧасти, СтрокаТаблицы);
		
		СтруктураРасчетногоДокумента = РасчетныеДокументыДляИсправления.Получить(СтрокаТаблицы.КадровыйДокумент);
		Если СтруктураРасчетногоДокумента = Неопределено Тогда
			РасчетныйДокументДляИсправления = Неопределено;
			
		Иначе
			РасчетныйДокументДляИсправления = СтруктураРасчетногоДокумента.РасчетныйДокумент;
			
			Если СтруктураРасчетногоДокумента.СовпадаетПериодРегистрации Тогда
				Расшифровки = Новый Массив;
				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", СтрокаТаблицы.КадровыйДокумент, СтрокаТаблицы.КадровыйДокумент));
				
				РодительскаяСтрока = ОбработкаКомментариев.ДобавитьСообщение("Невозможно создание нового расчетного документа, так как текущий кадровый документ был исправлен, и для исправленного документа был зарегистрирован расчетный документ в текущем периоде",	Перечисления.ВидыСообщений.Раздел);
				
				Расшифровки = Новый Массив;
				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", СтрокаТаблицы.КадровыйДокумент, СтрокаТаблицы.КадровыйДокумент));
				ОбработкаКомментариев.ДобавитьСообщение("Текущий кадровый документ: ",	Перечисления.ВидыСообщений.Информация, Расшифровки, РодительскаяСтрока);
				
				Расшифровки = Новый Массив;
				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", СтруктураРасчетногоДокумента.КадровыйДокумент, СтруктураРасчетногоДокумента.КадровыйДокумент));
				ОбработкаКомментариев.ДобавитьСообщение("Исходный кадровый документ: ",	Перечисления.ВидыСообщений.Информация, Расшифровки, РодительскаяСтрока);
				
				Расшифровки = Новый Массив;
				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", СтрокаТаблицы.КадровыйДокумент, РасчетныйДокументДляИсправления));
				ОбработкаКомментариев.ДобавитьСообщение("Расчетный документ: ",			Перечисления.ВидыСообщений.Ошибка, Расшифровки, РодительскаяСтрока);
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ТипРасчетногоДокумента	= ТипЗнч(СтрокаТаблицы.РасчетныйДокумент);
		ВидНеявки = СтрокаТаблицы.Неявка;
		СтрокаСообщенияОбОшибке = Строка(СтрокаТаблицы.Сотрудник) + " " + ВидНеявки + " от " + Формат(СтрокаТаблицы.ДатаНачала,"ДФ=дд.ММ.гггг")+": ";
		
		Если ТипРасчетногоДокумента = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда
			
			РасчетныйДокумент = Документы.НачислениеПоБольничномуЛисту.СоздатьДокумент();
			РасчетныйДокумент.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления;
			НачислениеПоБольничномуЛистуПереопределяемый.ЗаполнитьДополнительныеРеквизиты(РасчетныйДокумент, , Истина);
			Если ЗначениеЗаполнено(РасчетныйДокументДляИсправления) И ТипЗнч(РасчетныйДокументДляИсправления) = ТипРасчетногоДокумента Тогда
				РасчетныйДокумент.ЗаполнитьПоПерерассчитываемомуДокументу(РасчетныйДокументДляИсправления, СтрокаТаблицы.Сотрудник);
			КонецЕсли;
			РасчетныйДокумент.ПериодРегистрации = ПериодРегистрации;
			РасчетныйДокумент.ДатаВыплатыДохода = ЗаполнениеДокументовЗК.ДатаВыплатыДохода(ОбщегоНазначенияЗК.ПолучитьРабочуюДату(), Организация);
			ЗаполнитьЗначенияСвойств(РасчетныйДокумент,СтрокаТаблицы);
			Если Не ЗначениеЗаполнено(РасчетныйДокумент.ВидРасчетаЗаСчетРаботодателя) Тогда
					///Вадим
				//РасчетныйДокумент.ВидРасчетаЗаСчетРаботодателя = ОбщегоНазначенияЗК.ОсобыйЭлемент(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций, "ОплатаБолезниЗаСчетРаботодателя");
				РасчетныйДокумент.ВидРасчетаЗаСчетРаботодателя = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("ИСП_Оплата больничных листов за счет работодателя");
				///ВадимКонец
			КонецЕсли;
			Если РасчетныйДокумент.ЕстьРасчетыПоКалендарнымГодам() Тогда
				ГодНачалаСобытия = Год(РасчетныйДокумент.ДатаНачалаСобытия);
				РасчетныйДокумент.ГодыРасчетаСреднего2011.Добавить().Год = ГодНачалаСобытия - 2;
				РасчетныйДокумент.ГодыРасчетаСреднего2011.Добавить().Год = ГодНачалаСобытия - 1;
			КонецЕсли;
			Если ДанныеСотрудниковДляПилотногоПроекта <> Неопределено Тогда
				СтрокаДанных = ДанныеСотрудниковДляПилотногоПроекта.Найти(СтрокаТаблицы.Сотрудник,"СотрудникЗаполнения"); 
				Если СтрокаДанных <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(РасчетныйДокумент,СтрокаДанных);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипРасчетногоДокумента = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета) 	
				 Или СтрокаТаблицы.ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаСообщенияОбОшибке + "необходимо указать вид расчета по среднему заработку");
				Продолжить;
			КонецЕсли;
			
			РасчетныйДокумент = Документы.ОплатаПоСреднемуЗаработку.СоздатьДокумент();
			Если ЗначениеЗаполнено(РасчетныйДокументДляИсправления) И ТипЗнч(РасчетныйДокументДляИсправления) = ТипРасчетногоДокумента Тогда
				РасчетныйДокумент.ЗаполнитьПоПерерассчитываемомуДокументу(РасчетныйДокументДляИсправления, СтрокаТаблицы.Сотрудник);
			КонецЕсли;
			РасчетныйДокумент.ПериодРегистрации 		= ПериодРегистрации;
			РасчетныйДокумент.СпособРегистрацииВремени 	= Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
			ЗаполнитьЗначенияСвойств(РасчетныйДокумент,СтрокаТаблицы);
			
		ИначеЕсли ТипРасчетногоДокумента = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда
			
			СтрокаДанных = ДанныеОтпусков.Найти(СтрокаТаблицы.НомерСтроки,"НомерСтроки");
			Если СтрокаДанных <> Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаДанных.СообщениеОбОшибке) Тогда
					ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаСообщенияОбОшибке + СтрокаДанных.СообщениеОбОшибке);
					Продолжить;
				КонецЕсли;
				РасчетныйДокумент = Документы.НачислениеОтпускаРаботникамОрганизаций.СоздатьДокумент();
				Если ЗначениеЗаполнено(РасчетныйДокументДляИсправления) И ТипЗнч(РасчетныйДокументДляИсправления) = ТипРасчетногоДокумента Тогда
					РасчетныйДокумент.ЗаполнитьПоПерерассчитываемомуДокументу(РасчетныйДокументДляИсправления, СтрокаТаблицы.Сотрудник);
					РасчетныйДокумент.ДатаВыплатыДохода = ЗаполнениеДокументовЗК.ДатаВыплатыДохода(ОбщегоНазначенияЗК.ПолучитьРабочуюДату(), Организация);
				КонецЕсли;
				РасчетныйДокумент.ПериодРегистрации	= ПериодРегистрации;
				ЗаполнитьЗначенияСвойств(РасчетныйДокумент,СтрокаДанных);
				РасчетныйДокумент.ОпределитьРасчетныйПериод();
				ЗаполнениеДокументовЗК.ЗаполнитьДатуВыплатыОтпускных(РасчетныйДокумент);
			КонецЕсли;
			
		ИначеЕсли ВидНеявки = Перечисления.СостоянияРаботникаОрганизации.Простой
				  И ЗначениеЗаполнено(СтрокаТаблицы.ВидПростоя) Тогда
			// оплачиваемый простой
			РасчетныйДокумент = Документы.РегистрацияПростоевРаботниковОрганизаций.СоздатьДокумент();
			Если ЗначениеЗаполнено(РасчетныйДокументДляИсправления) И ТипЗнч(РасчетныйДокументДляИсправления) = Тип("ДокументСсылка.РегистрацияПростоевРаботниковОрганизаций") Тогда
				РасчетныйДокумент.ЗаполнитьПоПерерассчитываемомуДокументу(РасчетныйДокументДляИсправления, СтрокаТаблицы.Сотрудник);
			КонецЕсли;
			РасчетныйДокумент.ПериодРегистрации			= ПериодРегистрации;
			РасчетныйДокумент.СпособРегистрацииВремени	= Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
			ЗаполнитьЗначенияСвойств(РасчетныйДокумент,СтрокаТаблицы);
			
		ИначеЕсли АнализНеявокПереопределяемый.НеобходимоСоздатьРасчетныйДокументПоНеявке(ТипРасчетногоДокумента, ВидНеявки, СтруктураСтрокиТабличнойЧасти) Тогда
			РасчетныйДокумент = АнализНеявокПереопределяемый.СоздатьРасчетныйДокументПоНеявке(ТипРасчетногоДокумента, ВидНеявки, СтруктураСтрокиТабличнойЧасти, ГоловнаяОрганизация, ПериодРегистрации, СтрокаСообщенияОбОшибке, РасчетныйДокументДляИсправления, ДанныеОтпусков);
			
			Если РасчетныйДокумент = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе // прочие невыходы
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета)
				 И ВидНеявки = Перечисления.СостоянияРаботникаОрганизации.Простой Тогда
				СтрокаТаблицы.ВидРасчета = ВРНеоплачиваемыйПростой;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета) 
				 Или СтрокаТаблицы.ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
				ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаСообщенияОбОшибке+"необходимо выбрать вид расчета по нулевой сумме");
				Продолжить;
			КонецЕсли;
			
			РасчетныйДокумент = Документы.НевыходыВОрганизациях.СоздатьДокумент();
			Если ЗначениеЗаполнено(РасчетныйДокументДляИсправления) И ТипЗнч(РасчетныйДокументДляИсправления) = Тип("ДокументСсылка.НевыходыВОрганизациях") Тогда
				РасчетныйДокумент.ЗаполнитьПоПерерассчитываемомуДокументу(РасчетныйДокументДляИсправления, СтрокаТаблицы.Сотрудник);
			КонецЕсли;
			РасчетныйДокумент.ПериодРегистрации = ПериодРегистрации;
			РасчетныйДокумент.СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
			
			СтрокаНачисления = РасчетныйДокумент.Начисления.Добавить();
			СтрокаНачисления.Авторасчет			= Истина;
			СтрокаНачисления.Сотрудник			= СтрокаТаблицы.Сотрудник;
			СтрокаНачисления.Физлицо			= СтрокаТаблицы.Физлицо;
			СтрокаНачисления.ДатаНачала 		= СтрокаТаблицы.ДатаНачала;
			СтрокаНачисления.ДатаОкончания 		= СтрокаТаблицы.ДатаОкончания;
			СтрокаНачисления.ДатаНачалаСобытия 	= СтрокаТаблицы.ДатаНачала;
			
			// Определим подразделение работника на дату события
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Сотрудник",			СтрокаТаблицы.Сотрудник);
			Запрос.УстановитьПараметр("Организация",		ГоловнаяОрганизация);
			Запрос.УстановитьПараметр("ДатаАктуальности",	СтрокаТаблицы.ДатаНачала);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаАктуальности
			|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
			|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
			|	КОНЕЦ КАК ПодразделениеОрганизации
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтрокаНачисления.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
			КонецЕсли;
			
			СтрокаНачисления.ВидРасчета = СтрокаТаблицы.ВидРасчета;
			
			РазницаВМесяцах = (Год(СтрокаНачисления.ДатаОкончания)*12 + Месяц(СтрокаНачисления.ДатаОкончания)) - (Год(СтрокаНачисления.ДатаНачала)*12 + Месяц(СтрокаНачисления.ДатаНачала));
			Если РазницаВМесяцах > 0 Тогда
				ПроведениеРасчетов.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(СтрокаНачисления, РасчетныйДокумент.Начисления);
			КонецЕсли;
			
		КонецЕсли;
		
		РасчетныйДокумент.Организация	= Организация;
		РасчетныйДокумент.Ответственный	= глЗначениеПеременной("глТекущийПользователь");
		ДатаКЗаписи = ТекущаяДата();
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если ИспользованиеРабочейДаты = РежимРабочейДаты.Назначать Тогда
				ДатаКЗаписи = НачалоДня(РабочаяДата) + 3600 * Час(ДатаКЗаписи) + 60 * Минута(ДатаКЗаписи) + Секунда(ДатаКЗаписи);
			КонецЕсли;
		#КонецЕсли
		РасчетныйДокумент.Дата = ДатаКЗаписи;
		РасчетныйДокумент.УстановитьНовыйНомер();
		РасчетныйДокумент.Записать();
		
		СтрокаТаблицы.РасчетныйДокумент	= РасчетныйДокумент.Ссылка;
		
	КонецЦикла;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры // СоздатьДокументы()

// Процедура рассчитывает отмеченные документы
//
// Параметры: 
//  СтрокиКРасчету - Масиив строк ТЧ Неявки, отмеченные и соответствующие отбору
//
// Возвращаемое значение:
//  Нет
//
Процедура РассчитатьДокументы(СтрокиКРасчету) Экспорт
	
	Если СтрокиКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет документов");
	
	Для Каждого СтрокаТаблицы Из СтрокиКРасчету Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			
			// этот документ не рассчитываем
			Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда 
				Продолжить
			КонецЕсли;
			
			// проверим можно ли что-то делать с документом
			ОписаниеПричиныОтказа = "";
			Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(СтрокаТаблицы.РасчетныйДокумент, ОписаниеПричиныОтказа) Тогда
				ОбщегоНазначенияЗК.КомментарийРасчета(СтрЗаменить(ОписаниеПричиныОтказа,"Документ ",Строка(СтрокаТаблицы.РасчетныйДокумент)), , "Открыть", СтрокаТаблицы.РасчетныйДокумент,Перечисления.ВидыСообщений.ВажнаяИнформация);
				Продолжить;
			КонецЕсли;
			
			РасчетныйДокумент = СтрокаТаблицы.РасчетныйДокумент.ПолучитьОбъект();
			Если РасчетныйДокумент.ПометкаУдаления Тогда
				Попытка
					РасчетныйДокумент.УстановитьПометкуУдаления(Ложь);
				Исключение
					ОбщегоНазначенияЗК.КомментарийРасчета(Строка(СтрокаТаблицы.РасчетныйДокумент) + ": не удалось отменить пометку документа на уделение!", , "Открыть", СтрокаТаблицы.РасчетныйДокумент,Перечисления.ВидыСообщений.Ошибка);
					Продолжить;
				КонецПопытки;
			ИначеЕсли РасчетныйДокумент.Проведен Тогда
				Попытка
					РасчетныйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения)
				Исключение
					ОбщегоНазначенияЗК.КомментарийРасчета(Строка(СтрокаТаблицы.РасчетныйДокумент) + ": не удалось отменить проведение документа!", , "Открыть", СтрокаТаблицы.РасчетныйДокумент,Перечисления.ВидыСообщений.Ошибка);
					Продолжить;
				КонецПопытки;
			КонецЕсли;
			
			// авторасчет документа
			Попытка
				Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументОбъект.НевыходыВОрганизациях") Тогда
					РасчетныйДокумент.Рассчитать();
					
				Иначе
					
					Если РасчетныйДокумент.Метаданные().ТабличныеЧасти.Найти("НДФЛ") <> Неопределено Тогда
						МассивТаблиц = НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьМассивТабличныхЧастей(РасчетныйДокумент, "НДФЛ");
						Для каждого ТабличнаяЧасть Из МассивТаблиц Цикл
							ТабличнаяЧасть.Очистить();
						КонецЦикла;
					КонецЕсли;
					
					РассчитываемыеТаблицы = АнализНеявокПереопределяемый.ПолучитьРассчитываемыеТаблицыПоТипуДокумента(ТипЗнч(РасчетныйДокумент));
					
					РасчетныйДокумент.Рассчитать(РассчитываемыеТаблицы);
					
				КонецЕсли;
				РасчетныйДокумент.Записать(РежимЗаписиДокумента.Запись);
				ОбщегоНазначенияЗК.КомментарийРасчета(Строка(РасчетныйДокумент) + " обработан успешно. ", Заголовок, "Открыть", СтрокаТаблицы.РасчетныйДокумент);
			Исключение
				ОбщегоНазначенияЗК.КомментарийРасчета(Строка(РасчетныйДокумент) + ": рассчитать не удалось!", , "Открыть", СтрокаТаблицы.РасчетныйДокумент,Перечисления.ВидыСообщений.Ошибка);
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // РассчитатьДокументы()

// Процедура проводит отмеченные документы
//
// Параметры: 
//  СтрокиНеявок - Масиив строк ТЧ Неявки, отмеченные и соответствующие отбору
//
// Возвращаемое значение:
//  Нет
//
Процедура ПровестиДокументы(СтрокиНеявок) Экспорт

	Если СтрокиНеявок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивУспешныхДокументов = Новый Массив;
	Для Каждого СтрокаТаблицы Из СтрокиНеявок Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			Продолжить;
		КонецЕсли;
		
		РасчетныйДокумент = СтрокаТаблицы.РасчетныйДокумент.ПолучитьОбъект();
		Если РасчетныйДокумент.ПометкаУдаления Тогда
			РасчетныйДокумент.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		Попытка
			РасчетныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			МассивУспешныхДокументов.Добавить(РасчетныйДокумент);
			СтрокаТаблицы.Отметка = Не СтрокаТаблицы.Отметка;
		Исключение
			ОбщегоНазначенияЗК.КомментарийРасчета("Документ №" + РасчетныйДокумент.Номер + " от " + РасчетныйДокумент.Дата + " провести не удалось!", , "Открыть", СтрокаТаблицы.РасчетныйДокумент,Перечисления.ВидыСообщений.Ошибка);
		КонецПопытки;
	КонецЦикла;
	
	Заголовок = ОбщегоНазначенияЗК.КомментарийРасчета("Проведение документов");
	Для Каждого РасчетныйДокумент Из МассивУспешныхДокументов Цикл
		ОбщегоНазначенияЗК.КомментарийРасчета("Документ №" + РасчетныйДокумент.Номер + " от " + РасчетныйДокумент.Дата + " обработан успешно. ", Заголовок, "Открыть", РасчетныйДокумент.Ссылка);
	КонецЦикла;
	
КонецПроцедуры // ПровестиДокументы()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА 

мДлинаСуток = 86400; // в секундах