Перем СтруктураНастроек Экспорт;
Перем ADODBConnection Экспорт;
Перем СоединениеУстановлено Экспорт;
//Перем JavaScript Экспорт;

//Основная процедура запуска выгрузки
//	РежимВыгрузки=0 - выгружаем все, РежимВыгрузки=1 - только факты, РежимВыгрузки=2 - только НСИ
Процедура Выгрузить(РежимВыгрузки=0,ИмяОбъекта=Неопределено,НачалоПериода='00010101',КонецПериода='00010101',Отладка=Ложь,МногопоточнаяВыгрузка=Ложь) Экспорт 

	ЛогОбмена = "";
	ОписаниеОшибки = ""; 
	ОбщаяДатаНачалаПериода = '00010101';
	
	//{26.04.2017 Островерхий заявка №б/н 
	Отладка = Макс(Отладка,СтруктураНастроек.РежимОтладки); 
	//26.04.2017 Островерхий} 
	
	Если НачалоПериода='00010101' Тогда
		
		Если СтруктураНастроек.ПолучатьДатуНачалаПериодаИзВнешнейБД Тогда
			
			//начать транзакцию
			//Если НЕ Отладка Тогда
			//	ВыполнитьЗапрос("begin tran",Ложь);
			//КонецЕсли; 
			НачалоПериода=ПолучитьДатуНачалаПериодаИзВнешнегоСервера(ИмяОбъекта);	
			
			//ТекстSQLЗапроса = "commit tran";
			//Успешно = НЕ ВыполнитьЗапрос(ТекстSQLЗапроса,Ложь) = Неопределено;
			//
			//Если НЕ Успешно Тогда
			//	ОписаниеОшибки = ОписаниеОшибки+" Произошли ошибки при выполнении SQL запроса: "+ТекстSQLЗапроса;
			//КонецЕсли;
		
		Иначе	
			НачалоПериода=НачалоМесяца(ТекущаяДата());
		КонецЕсли; 
			
	КонецЕсли; 
	
	Если СтруктураНастроек.ПолучатьДатуНачалаПериодаИзВнешнейБД Тогда
	
		ОбщаяДатаНачалаПериода=ПолучитьДатуНачалаПериодаИзВнешнегоСервера(Неопределено);	
		
		Если НачалоПериода='00010101' Тогда
			НачалоПериода = ОбщаяДатаНачалаПериода;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если КонецПериода='00010101' Тогда
		//{20.03.2015 Островерхий заявка №37982 
		//КонецПериода=КонецМесяца(ТекущаяДата()); 
		КонецПериода=КонецГода(ТекущаяДата());
		//20.03.2015 Островерхий} 	
	КонецЕсли; 

	//Начало выгрузки
	ЛогОбмена = ЛогОбмена + "Начало выгрузки "+ТекущаяДата()+"; ";
	
	//Чтение макета выгрузки
	ПравилаВыгрузкиМакет = ЭтотОбъект.ПолучитьМакет("ПравилаВыгрузки");	
	КоличествоЭлементов = ПравилаВыгрузкиМакет.ВысотаТаблицы - СтруктураНастроек.ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	Если МногопоточнаяВыгрузка Тогда
			
		ТаблицаОбъектовВыгрузки = Новый ТаблицаЗначений;
		ТаблицаОбъектовВыгрузки.Колонки.Добавить("ИндексПотока", Новый ОписаниеТипов("Число"));
	    ТаблицаОбъектовВыгрузки.Колонки.Добавить("ТекстЗапроса", Новый ОписаниеТипов("Строка"));
		ТаблицаОбъектовВыгрузки.Колонки.Добавить("ИмяОбъекта", Новый ОписаниеТипов("Строка"));
		ТаблицаОбъектовВыгрузки.Колонки.Добавить("ПолноеИмяОбъекта", Новый ОписаниеТипов("Строка"));
		ТаблицаОбъектовВыгрузки.Колонки.Добавить("Каталог", Новый ОписаниеТипов("Строка"));
		
		ТаблицаСоответствияОбъектовИПотоков = СформироватьТаблицуСоответствияОбъектовИПотокв();
		
		МассивЗаданий = Новый Массив;

	КонецЕсли; 
	
	Для К = СтруктураНастроек.ПерваяСтрокаДанныхТабличногоДокумента По ПравилаВыгрузкиМакет.ВысотаТаблицы Цикл
		
		ТекстыЯчеек = Неопределено;
		ТекущаяСтрока = СтрокаМакетаВСтруктуру(ПравилаВыгрузкиМакет, К, ТекстыЯчеек);
		
		Если (НЕ ИмяОбъекта = Неопределено
			И НЕ ТекущаяСтрока.ИмяОбъекта = ИмяОбъекта)
			ИЛИ (ТекущаяСтрока.ЭтоНСИ И РежимВыгрузки=1)
			ИЛИ (НЕ ТекущаяСтрока.ЭтоНСИ И РежимВыгрузки=2)
			ИЛИ (ТекущаяСтрока.НеВыгружатьАтоматически И ИмяОбъекта = Неопределено) Тогда
		
			Продолжить;	
		
		КонецЕсли; 
		
		Если МногопоточнаяВыгрузка Тогда
			
			тНоваяСтрока = ТаблицаОбъектовВыгрузки.Добавить();
			тНоваяСтрока.ТекстЗапроса     = ТекущаяСтрока.ТекстЗапроса; 
			тНоваяСтрока.ИмяОбъекта 	  = ТекущаяСтрока.ИмяОбъекта; 
			тНоваяСтрока.ПолноеИмяОбъекта = ТекущаяСтрока.ТипМетаданных+"."+ТекущаяСтрока.ИмяОбъекта; 
			тНоваяСтрока.ПолноеИмяОбъекта = ?(Лев(тНоваяСтрока.ПолноеИмяОбъекта,1)=".",Прав(тНоваяСтрока.ПолноеИмяОбъекта,СтрДлина(тНоваяСтрока.ПолноеИмяОбъекта)-1),тНоваяСтрока.ПолноеИмяОбъекта);
			тНоваяСтрока.Каталог 	  	  = ?(ТекущаяСтрока.ЭтоНСИ,СтруктураНастроек.КаталогНСИ,СтруктураНастроек.КаталогФактов);
			
			Отбор = Новый Структура();
			Отбор.Вставить("ИмяОбъекта",тНоваяСтрока.ПолноеИмяОбъекта);
			Строки = ТаблицаСоответствияОбъектовИПотоков.НайтиСтроки(Отбор);
            Если Строки.Количество() > 0 Тогда
				тНоваяСтрока.ИндексПотока     = Строки[0].ИндексПотока; 	
			КонецЕсли; 
			
		Иначе	
			
			ОписаниеОшибки = "";
			ЗаписьВФайл(ТекущаяСтрока.ТекстЗапроса, НачалоПериода, КонецПериода, ТекущаяСтрока.ИмяОбъекта, ТекущаяСтрока.ТипМетаданных+"."+ТекущаяСтрока.ИмяОбъекта, ?(ТекущаяСтрока.ЭтоНСИ,СтруктураНастроек.КаталогНСИ,СтруктураНастроек.КаталогФактов),ОписаниеОшибки, ЛогОбмена);
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();	
			#КонецЕсли
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если МногопоточнаяВыгрузка Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("ИндексПотока",0);
		Строки = ТаблицаОбъектовВыгрузки.НайтиСтроки(Отбор);
		
		ТаблицаОбъектовВыгрузки.Сортировать("ИндексПотока");
		МаксКоличествоПотоков = ТаблицаОбъектовВыгрузки[ТаблицаОбъектовВыгрузки.Количество()-1].ИндексПотока;
		
		//Запустить потоки
		
		Для ИндексПотока=?(Строки.Количество()>0,0,1) По МаксКоличествоПотоков Цикл
		
			НаборПараметров = Новый Массив;
			НаборПараметров.Добавить(ТаблицаОбъектовВыгрузки);
			НаборПараметров.Добавить(ИндексПотока);
			НаборПараметров.Добавить(НачалоПериода);				
			НаборПараметров.Добавить(КонецПериода);	
			
			// запуск фонового задания
			Задание = ФоновыеЗадания.Выполнить("АП_ОбщегоНазначенияСервер.ЗапуститьПотокВыгрузкиВКубыOLAP", НаборПараметров);
			
			// добавляем задание в массив, что бы потом отследить выполнение
			МассивЗаданий.Добавить(Задание);	
		
		КонецЦикла; 
		
		Если МассивЗаданий.Количество() > 0 Тогда
			Попытка
				ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки+" Произошли ошибки при разделении на потоки.";
			КонецПопытки;        
		КонецЕсли;
		
	КонецЕсли; 
	
	//Окончание выгрузки
	ЛогОбмена = ЛогОбмена + "Окончание выгрузки "+ТекущаяДата();
	
	Если НЕ Отладка И СтруктураНастроек.ПолучатьДатуНачалаПериодаИзВнешнейБД Тогда
		
		ТекстSQLЗапроса = "begin tran";
		Успешно = НЕ ВыполнитьЗапрос(ТекстSQLЗапроса,Ложь) = Неопределено;
		
		Если НЕ Успешно Тогда
			ОписаниеОшибки = ОписаниеОшибки+" Произошли ошибки при выполнении SQL запроса: "+ТекстSQLЗапроса;
		КонецЕсли;
		
		//Обновить данные
		//ТекстSQLЗапроса = "update [DWH_Production].[dbo].[SRV_LOAD_DATE_START] set [LAST_LOAD_TIME] = getdate(), [COMMENT] = '"+СтрЗаменить(ЛогОбмена,"'","""")+?(ОписаниеОшибки="","",", Описание ошибки = "+СтрЗаменить(ОписаниеОшибки,"'",""""))+"'";
		ТекстSQLЗапроса = "update [DWH_Production].[dbo].[SRV_LOAD_DATE_START] set [LAST_LOAD_TIME] = getdate(), [1C_DATE_START] = '"+Формат(НачалоПериода,"ДФ=ггггММдд")+"', [COMMENT] = '"+?(ОписаниеОшибки="","","Описание ошибки : "+СтрЗаменить(ОписаниеОшибки,"'",""""))+"' where OBJECT IS NULL";
		
		ВыполнитьЗапрос(ТекстSQLЗапроса,Ложь);
		
		//зафиксировать транзакцию
		ТекстSQLЗапроса = "commit tran";
		Успешно = НЕ ВыполнитьЗапрос(ТекстSQLЗапроса,Ложь) = Неопределено;
		
		Если НЕ Успешно Тогда
			ОписаниеОшибки = ОписаниеОшибки+" Произошли ошибки при выполнении SQL запроса: "+ТекстSQLЗапроса;
		КонецЕсли;
		
	КонецЕсли;	
	
	//{20.01.2016 Островерхий заявка №б/н 
	//СохранитьИОтправитьУведомленияОбшибках(ОписаниеОшибки,ЛогОбмена);
	Если НЕ Отладка Тогда
		СохранитьИОтправитьУведомленияОбшибках(ОписаниеОшибки,ЛогОбмена);	
	КонецЕсли;  
	//20.01.2016 Островерхий} 
	
	#Если Клиент Тогда
		Если НЕ ОписаниеОшибки = "" Тогда
			Сообщить(ОписаниеОшибки,СтатусСообщения.ОченьВажное);	
		КонецЕсли; 
	#КонецЕсли
КонецПроцедуры

Функция СформироватьТаблицуСоответствияОбъектовИПотокв()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРГСтатистикаВыгрузкиВКубыOLAP.ИмяОбъекта,
		|	ПРГСтатистикаВыгрузкиВКубыOLAP.ВремяВыгрузкиОбъектаВМс КАК ВремяВыгрузкиОбъектаВМс,
		|	ПРГСтатистикаВыгрузкиВКубыOLAP.ДатаПоследнейВыгрузки
		|ПОМЕСТИТЬ втИсточник
		|ИЗ
		|	РегистрСведений.ПРГСтатистикаВыгрузкиВКубыOLAP КАК ПРГСтатистикаВыгрузкиВКубыOLAP
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИсточник.ИмяОбъекта,
		|	втИсточник.ВремяВыгрузкиОбъектаВМс КАК ВремяВыгрузки,
		|	СУММА(втИсточник1.ВремяВыгрузкиОбъектаВМс) - втИсточник.ВремяВыгрузкиОбъектаВМс КАК До,
		|	СУММА(втИсточник1.ВремяВыгрузкиОбъектаВМс) КАК После
		|ПОМЕСТИТЬ втИсточникНарИтогом
		|ИЗ
		|	втИсточник КАК втИсточник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИсточник КАК втИсточник1
		|		ПО втИсточник.ДатаПоследнейВыгрузки >= втИсточник1.ДатаПоследнейВыгрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	втИсточник.ИмяОбъекта,
		|	втИсточник.ВремяВыгрузкиОбъектаВМс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ПРГСтатистикаВыгрузкиВКубыOLAP.ВремяВыгрузкиОбъектаВМс) КАК МаксВремяВыгрузкиОбъектаВМс,
		|	ВЫБОР
		|		КОГДА СУММА(ПРГСтатистикаВыгрузкиВКубыOLAP.ВремяВыгрузкиОбъектаВМс) / МАКСИМУМ(ПРГСтатистикаВыгрузкиВКубыOLAP.ВремяВыгрузкиОбъектаВМс) - (ВЫРАЗИТЬ(СУММА(ПРГСтатистикаВыгрузкиВКубыOLAP.ВремяВыгрузкиОбъектаВМс) / МАКСИМУМ(ПРГСтатистикаВыгрузкиВКубыOLAP.ВремяВыгрузкиОбъектаВМс) - 0.5 КАК ЧИСЛО(15, 0))) > 0
		|			ТОГДА (ВЫРАЗИТЬ(СУММА(ПРГСтатистикаВыгрузкиВКубыOLAP.ВремяВыгрузкиОбъектаВМс) / МАКСИМУМ(ПРГСтатистикаВыгрузкиВКубыOLAP.ВремяВыгрузкиОбъектаВМс) - 0.5 КАК ЧИСЛО(15, 0))) + 1
		|		ИНАЧЕ СУММА(ПРГСтатистикаВыгрузкиВКубыOLAP.ВремяВыгрузкиОбъектаВМс) / МАКСИМУМ(ПРГСтатистикаВыгрузкиВКубыOLAP.ВремяВыгрузкиОбъектаВМс)
		|	КОНЕЦ КАК МаксимальноеКоличествоПотоков
		|ПОМЕСТИТЬ втИтоги
		|ИЗ
		|	РегистрСведений.ПРГСтатистикаВыгрузкиВКубыOLAP КАК ПРГСтатистикаВыгрузкиВКубыOLAP
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.n,
		|	0 КАК До,
		|	ВложенныйЗапрос.МаксВремяВыгрузкиОбъектаВМс
		|ПОМЕСТИТЬ втПотоки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.n КАК n,
		|		втИтоги.МаксВремяВыгрузкиОбъектаВМс КАК МаксВремяВыгрузкиОбъектаВМс,
		|		втИтоги.МаксимальноеКоличествоПотоков КАК МаксимальноеКоличествоПотоков
		|	ИЗ
		|		втИтоги КАК втИтоги,
		|		(ВЫБРАТЬ
		|			4 * (t1.a - 1) + t2.b КАК n
		|		ИЗ
		|			(ВЫБРАТЬ
		|				1 КАК a
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				2
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				3
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				4) КАК t1
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					1 КАК b
		|				
		|				ОБЪЕДИНИТЬ
		|				
		|				ВЫБРАТЬ
		|					2
		|				
		|				ОБЪЕДИНИТЬ
		|				
		|				ВЫБРАТЬ
		|					3
		|				
		|				ОБЪЕДИНИТЬ
		|				
		|				ВЫБРАТЬ
		|					4) КАК t2
		|				ПО (ИСТИНА)) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.МаксимальноеКоличествоПотоков >= ВложенныйЗапрос.n
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПотоки.n,
		|	втПотоки.МаксВремяВыгрузкиОбъектаВМс,
		|	СУММА(втПотоки1.МаксВремяВыгрузкиОбъектаВМс) КАК После,
		|	СУММА(втПотоки1.МаксВремяВыгрузкиОбъектаВМс) - втПотоки.МаксВремяВыгрузкиОбъектаВМс КАК До
		|ПОМЕСТИТЬ втПотокиНарИтог
		|ИЗ
		|	втПотоки КАК втПотоки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПотоки КАК втПотоки1
		|		ПО втПотоки.n >= втПотоки1.n
		|
		|СГРУППИРОВАТЬ ПО
		|	втПотоки.n,
		|	втПотоки.МаксВремяВыгрузкиОбъектаВМс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИсточникНарИтогом.ИмяОбъекта КАК ИмяОбъекта,
		|	втИсточникНарИтогом.ВремяВыгрузки,
		|	втПотокиНарИтог.n КАК ИндексПотока,
		|	ВЫБОР
		|		КОГДА втПотокиНарИтог.n ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА втПотокиНарИтог.После < втИсточникНарИтогом.После
		|					ТОГДА втПотокиНарИтог.После
		|				ИНАЧЕ втИсточникНарИтогом.После
		|			КОНЕЦ - ВЫБОР
		|				КОГДА втПотокиНарИтог.До > втИсточникНарИтогом.До
		|					ТОГДА втПотокиНарИтог.До
		|				ИНАЧЕ втИсточникНарИтогом.До
		|			КОНЕЦ
		|	КОНЕЦ / втИсточникНарИтогом.ВремяВыгрузки КАК Коэф
		|ПОМЕСТИТЬ втПотокиСКоэф
		|ИЗ
		|	втИсточникНарИтогом КАК втИсточникНарИтогом
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПотокиНарИтог КАК втПотокиНарИтог
		|		ПО втИсточникНарИтогом.После > втПотокиНарИтог.До
		|			И втИсточникНарИтогом.До < втПотокиНарИтог.После
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПотокиСКоэф.ИмяОбъекта КАК ИмяОбъекта,
		|	втПотокиСКоэф.ВремяВыгрузки,
		|	втПотокиСКоэф.ИндексПотока,
		|	втПотокиСКоэф.Коэф
		|ИЗ
		|	(ВЫБРАТЬ
		|		втПотокиСКоэф.ИмяОбъекта КАК ИмяОбъекта,
		|		МАКСИМУМ(втПотокиСКоэф.Коэф) КАК Коэф
		|	ИЗ
		|		втПотокиСКоэф КАК втПотокиСКоэф
		|	
		|	СГРУППИРОВАТЬ ПО
		|		втПотокиСКоэф.ИмяОбъекта) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПотокиСКоэф КАК втПотокиСКоэф
		|		ПО ВложенныйЗапрос.ИмяОбъекта = втПотокиСКоэф.ИмяОбъекта
		|			И ВложенныйЗапрос.Коэф = втПотокиСКоэф.Коэф
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИмяОбъекта";

	Результат = Запрос.Выполнить();
    РезультатВыгрузить = Результат.Выгрузить();
	
	Если Результат.Пустой() Тогда
		
		РезультатВыгрузить = Новый ТаблицаЗначений;
		РезультатВыгрузить.Колонки.Добавить("ИндексПотока", Новый ОписаниеТипов("Число"));
		РезультатВыгрузить.Колонки.Добавить("ВремяВыгрузки", Новый ОписаниеТипов("Число"));
		РезультатВыгрузить.Колонки.Добавить("ИмяОбъекта", Новый ОписаниеТипов("Строка"));
		
	КонецЕсли; 

	Возврат РезультатВыгрузить;
	
КонецФункции // СформироватьТаблицуСоответствияОбъектовИПотокв()

Функция ПолучитьДатуНачалаПериодаИзВнешнегоСервера(ИмяОбъекта=Неопределено)

	//{04.02.2016 Островерхий заявка №б/н 
	//тНачалоПериода=НачалоМесяца(ТекущаяДата()); 
	тНачалоПериода='00010101';
	//04.02.2016 Островерхий} 
	
	Попытка
		
		Если ИмяОбъекта=Неопределено Тогда
			ТекстУсловия = "where OBJECT IS NULL";
		Иначе	
		 	ТекстУсловия = "where OBJECT = '"+?(Лев(ИмяОбъекта,1)=".",Прав(ИмяОбъекта,СтрДлина(ИмяОбъекта)-1),ИмяОбъекта)+"'";
		КонецЕсли; 
		
		ТекстSQLЗапроса = "select top 1 DATE_START from [DWH_Production].[dbo].[SRV_LOAD_DATE_START] "+ТекстУсловия;
		
		Выборка = ВыполнитьЗапрос(ТекстSQLЗапроса);
		
		Пока НЕ Выборка = Неопределено И Выборка.Eof() = 0 Цикл
			
			тНачалоПериода = НачалоМесяца(Выборка.Fields("DATE_START").Value);
			
			Выборка.MoveNext();
			
		КонецЦикла;
		
		//ЗакрытьСоединение();
	
	Исключение
		
		//Сохраним в журнал регистрации
		Если СтруктураНастроек.СохранятьВЖурналРегистрацииУведомленияОбОшибках Тогда
		
			ЗаписьЖурналаРегистрации("Выгрузка данных в кубы OLAP",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			"Ошибка выполнения запроса получения даты начала периода: "+ТекстSQLЗапроса, 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		КонецЕсли;
		
	КонецПопытки; 
		
	Возврат тНачалоПериода;
	
КонецФункции

Процедура СохранитьИОтправитьУведомленияОбшибках(ОписаниеОшибки,ЛогОбмена) Экспорт 

	Если НЕ ОписаниеОшибки = "" Тогда
		
		//Сохраним в журнал регистрации
		Если СтруктураНастроек.СохранятьВЖурналРегистрацииУведомленияОбОшибках Тогда
		
			ЗаписьЖурналаРегистрации("Выгрузка данных в кубы OLAP",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки, 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		КонецЕсли; 	
		
		Если СтруктураНастроек.ОтправлятьУведомленияОбОшибках И СтруктураНастроек.ПолучателиУведомленийОбОшибках.Количество() > 0 Тогда
			
			Для Каждого ЭлементМассива Из СтруктураНастроек.ПолучателиУведомленийОбОшибках Цикл
				
				СодержаниеПисьма = "Ошибки: "+ОписаниеОшибки+"<br>";
				СодержаниеПисьма = СодержаниеПисьма + "Лог: "+ЛогОбмена+"<br>";
                СодержаниеПисьма = СодержаниеПисьма + "Дата и время выгрузки: "+ТекущаяДата()+"<br>";
				
				ПРГ_Регламентый.ОправитьФайл("[NoReply] Ошибка при выгрузке данных к кубы OLAP", ЭлементМассива, СодержаниеПисьма, , , , Истина);
			
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры

//
//
Функция ПолучитьСписокОбъектов() Экспорт 

	СписокОбъктов = Новый СписокЗначений;
	
	ПравилаВыгрузкиМакет = ЭтотОбъект.ПолучитьМакет("ПравилаВыгрузки");	
	КоличествоЭлементов = ПравилаВыгрузкиМакет.ВысотаТаблицы - СтруктураНастроек.ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	Для К = СтруктураНастроек.ПерваяСтрокаДанныхТабличногоДокумента По ПравилаВыгрузкиМакет.ВысотаТаблицы Цикл
		
		ТекстыЯчеек = Неопределено;
		ТекущаяСтрока = СтрокаМакетаВСтруктуру(ПравилаВыгрузкиМакет, К, ТекстыЯчеек);
		
		СписокОбъктов.Добавить(ТекущаяСтрока.ИмяОбъекта);
		
	КонецЦикла;

	Возврат СписокОбъктов;
	
КонецФункции // ПолучитьСписокОбъектов()

//
//
Функция СформироватьСтруктуруНастроек() Экспорт 

	СтруктураНастроек = Новый Структура("ВерсияМодуля,КаталогНСИ,КаталогФактов,ПолучатьДатуНачалаПериодаИзВнешнейБД,РасширениеФайлов,РазделительДанных,ВременныйРазделительДанных
	|,ПерваяСтрокаДанныхТабличногоДокумента,СохранятьВЖурналРегистрацииУведомленияОбОшибках,ОтправлятьУведомленияОбОшибках,ВнешняяБД,ПолучателиУведомленийОбОшибках,РежимОтладки");
	
	//Заполним настройки из параметров
	Для каждого ТекПараметр Из Справочники.ПРГ_Служебный.OLAP.ТаблицаПараметров Цикл
		СтруктураНастроек.Вставить(ТекПараметр.Параметр,ТекПараметр.ЗначениеПараметра);	
	КонецЦикла; 
	
	СтруктураНастроек.Вставить("ВерсияМодуля",ПолучитьВерсиюМодуляВыгрузки());
	//{26.04.2017 Островерхий заявка №б/н 
	//СтруктураНастроек.Вставить("КаталогНСИ","\\COFS\Share\Mobile_Load\1C8_Реплика\Справочники\");  
	//СтруктураНастроек.Вставить("КаталогФактов","\\COFS\Share\Mobile_Load\1C8_Реплика\Факты\");
	//СтруктураНастроек.Вставить("ПолучатьДатуНачалаПериодаИзВнешнейБД",Истина);
	СтруктураНастроек.Вставить("КаталогНСИ",?(СтруктураНастроек.КаталогНСИ = Неопределено, "\\Lip-dwh-01\1c\Справочники\",СтруктураНастроек.КаталогНСИ)); 
	СтруктураНастроек.Вставить("КаталогФактов",?(СтруктураНастроек.КаталогФактов = Неопределено, "\\Lip-dwh-01\1c\Факты\",СтруктураНастроек.КаталогФактов)); 
	СтруктураНастроек.Вставить("ПолучатьДатуНачалаПериодаИзВнешнейБД",?(СтруктураНастроек.ПолучатьДатуНачалаПериодаИзВнешнейБД = Неопределено, Истина, СтруктураНастроек.ПолучатьДатуНачалаПериодаИзВнешнейБД));
	СтруктураНастроек.Вставить("РежимОтладки",?(СтруктураНастроек.РежимОтладки = Неопределено, Ложь, СтруктураНастроек.РежимОтладки));
	//26.04.2017 Островерхий} 
	СтруктураНастроек.Вставить("РасширениеФайлов","csv");
	СтруктураНастроек.Вставить("РазделительДанных",";");         
	СтруктураНастроек.Вставить("ВременныйРазделительДанных","&^%$#&");
	СтруктураНастроек.Вставить("ПерваяСтрокаДанныхТабличногоДокумента",2);
	СтруктураНастроек.Вставить("СохранятьВЖурналРегистрацииУведомленияОбОшибках",Истина);
	СтруктураНастроек.Вставить("ОтправлятьУведомленияОбОшибках",Истина);
	
	СтруктураНастроек.Вставить("ВнешняяБД",Новый Структура("Логин,Пароль,ИмяСервера,ИмяБазы","1C","1c_qaz_123","LIP-DWH-01","DWH_Production"));
    СтруктураНастроек.Вставить("ПолучателиУведомленийОбОшибках",СформироватьМассивПолучателейУведомленийОбОшибках());
	
	Возврат СтруктураНастроек;
	
КонецФункции // СформироватьСтруктуруНастроек()

//
//
Функция СформироватьМассивПолучателейУведомленийОбОшибках()

	МассивПолучателей = Новый Массив;
	
	СписокФизлиц = Справочники.ПРГ_Служебный.ПолучитьОбъектыИзГруппы(Справочники.ПРГ_Служебный.ПолучателиСообщенийОТехническихСбоях1С);
	
	Для Каждого Физлицо Из СписокФизлиц Цикл
		Если Не ЗначениеЗаполнено(Физлицо) Тогда
			Продолжить;
		КонецЕсли;
		МассивПолучателей.Добавить(УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Физлицо));
	КонецЦикла;
	
	Возврат МассивПолучателей;

КонецФункции // СформироватьМассивПолучателейУведомленийОбОшибках()

//
//
Функция ПолучитьВерсиюМодуляВыгрузки()

	//16.01.2015 - 1.0.1 - Первая версия.
	
	Возврат "1.0.1"; 

КонецФункции // ПолучитьВерсиюМодуляВыгрузки()

//
//
Процедура ЗаписьВФайл(пТекстЗапроса, Знач НачалоПериода, Знач КонецПериода, пТекСправочник, пТекИмяФайла, КаталогФайл, ОписаниеОшибки="",ЛогОбмена="",ПеремещатьФайлВыгрузки=Истина,ВозвратИмяВременногоФайла="") Экспорт 
	
	тНачалоПериода = ПолучитьДатуНачалаПериодаИзВнешнегоСервера(пТекИмяФайла); 
	//{05.02.2016 Островерхий заявка №б/н 
	//Если тНачалоПериода = НачалоМесяца(ТекущаяДата()) Тогда 
	Если тНачалоПериода = '00010101' Тогда
	//05.02.2016 Островерхий} 
		//Для объекта выбранна общая дата начала выгрузки
	Иначе	
		НачалоПериода = тНачалоПериода; //Для объекта выгрузки установлена определенная дата
	КонецЕсли; 
	
	КонецПериода = Макс(КонецПериода,КонецГода(НачалоПериода));
	
	//Начать замер
	НачалоВыполнения = ПолучитьТекущееВремяВМиллисекундах();
	
	//пТекстДок = Новый ТекстовыйДокумент;
	Попытка
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(СтруктураНастроек.РасширениеФайлов);
		пТекстДок = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.ANSI);	
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при выволнении запроса к объекту - "+пТекСправочник+Символы.ПС;
		Возврат;
	КонецПопытки; 
	
	//Запись данных в файл
	пЗапрос = Новый Запрос;
	пЗапрос.Текст = пТекстЗапроса;
	пЗапрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	пЗапрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	
	Попытка
		Рез = пЗапрос.Выполнить().Выгрузить();	
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при выволнении запроса к объекту - "+пТекСправочник+Символы.ПС;
		Возврат;
	КонецПопытки; 
	
	Если ОписаниеОшибки = "" И Рез.Количество() > 0 Тогда
		
		ТекСч = 1;
		мКолВоРеквизитов = Рез.Колонки.Количество();
		
		ОписаниеТиповРезультатаВыборки = Новый ТаблицаЗначений;
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ИндексКолонки", Новый ОписаниеТипов("Число"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоЧисло", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоСтрока", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоДата", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоПеречисление", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоДокумент", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоСправочник", Новый ОписаниеТипов("Булево")); 
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоКолонка_ТипСправочника_Владелец", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоКолонка_ТипСправочника_", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Индексы.Добавить("ИндексКолонки");
		
		СчКолонок = 0;
		
		Для каждого ТекКолонка Из Рез.Колонки Цикл
		
			тНоваяСтрока = ОписаниеТиповРезультатаВыборки.Добавить();	
			тНоваяСтрока.ИндексКолонки = СчКолонок;
			тНоваяСтрока.ИмяКолонки = ТекКолонка.Имя;
			
			Для каждого ТекТип Из ТекКолонка.ТипЗначения.Типы() Цикл
				
				Если ТекТип = Тип("Число") Тогда
					тНоваяСтрока.ЭтоЧисло = Истина;
					Прервать;
				ИначеЕсли ТекТип = Тип("Дата") Тогда
					тНоваяСтрока.ЭтоДата = Истина;
					Прервать;
				ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
					тНоваяСтрока.ЭтоПеречисление = Истина;
					Прервать;
				ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
					тНоваяСтрока.ЭтоДокумент = Истина;
					Прервать;
				ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТекТип) ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТекТип)Тогда
					тНоваяСтрока.ЭтоСправочник = Истина;
					Прервать;
				ИначеЕсли ТекТип = Тип("Строка") Тогда
					тНоваяСтрока.ЭтоСтрока = Истина;
					Прервать;
				КонецЕсли; 
				
				Если ТекКолонка.Имя = "ТипСправочника_Владелец" Тогда
					тНоваяСтрока.ЭтоКолонка_ТипСправочника_Владелец = Истина;
				ИначеЕсли Найти(ТекКолонка.Имя, "ТипСправочника_") > 0 Тогда
					тНоваяСтрока.ЭтоКолонка_ТипСправочника_ = Истина;
				КонецЕсли;
				
			КонецЦикла; 
			
			СчКолонок = СчКолонок+1;
			
		КонецЦикла; 
		
		Для Каждого ТекСтрока Из Рез Цикл
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();					 
			#КонецЕсли				
			
			мТекст = "";
			мРеквизитыСправочника = "";
			Для счКолонка = 0 По мКолВоРеквизитов - 1 Цикл				
				
				ОписаниеТиповТекКолонки = ОписаниеТиповРезультатаВыборки[счКолонка];
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();					 
				#КонецЕсли
				
				Если ТекСч = 1 Тогда
					
					мРеквизитыСправочника = мРеквизитыСправочника + ?(Рез.Колонки[счКолонка].Имя="Ссылка","УИД",Рез.Колонки[счКолонка].Имя)+СтруктураНастроек.РазделительДанных;
					
				КонецЕсли; 
				
				//Если ТипЗнч(ТекСтрока[счКолонка]) = Тип("Число") Тогда
				Если ОписаниеТиповТекКолонки.ЭтоЧисло Тогда	
					
					//мТекст = СокрЛП(мТекст) + Формат(ТекСтрока[счКолонка],"ЧГ=0") + СтруктураНастроек.ВременныйРазделительДанных; 
					Если ТекСтрока[счКолонка] = NULL Тогда
						тФорматированноеЧисло = NULL;
					ИначеЕсли ТекСтрока[счКолонка] = Неопределено Тогда
						тФорматированноеЧисло = "0";
					Иначе	
					    тФорматированноеЧисло = ?(ТекСтрока[счКолонка] > -1000 И ТекСтрока[счКолонка] < 1000, ТекСтрока[счКолонка],СтрЗаменить(ТекСтрока[счКолонка],Символы.НПП,""));
					КонецЕсли; 
					
					//мТекст = СокрЛП(мТекст) + тФорматированноеЧисло + СтруктураНастроек.ВременныйРазделительДанных;
					мТекст = мТекст + тФорматированноеЧисло + СтруктураНастроек.ВременныйРазделительДанных;
					
				//ИначеЕсли ТипЗнч(ТекСтрока[счКолонка]) = Тип("Дата") Тогда
				ИначеЕсли ОписаниеТиповТекКолонки.ЭтоДата Тогда	
					
					//мТекст = СокрЛП(мТекст) + Формат(ТекСтрока[счКолонка],"ДЛФ=Д") + СтруктураНастроек.ВременныйРазделительДанных; 
					//{06.07.2017 Островерхий заявка №б/н, по просьбе Захарова Олега 
					//мТекст = мТекст + Формат(ТекСтрока[счКолонка],"ДЛФ=Д") + СтруктураНастроек.ВременныйРазделительДанных;
					//{10.07.2017 Островерхий заявка №б/н, по просьбе Захарова Олега  
					Если ТекСтрока[счКолонка] = '00010101' Тогда
						мТекст = мТекст + "" + СтруктураНастроек.ВременныйРазделительДанных;
					Иначе	
						мТекст = мТекст + Строка(ТекСтрока[счКолонка]) + СтруктураНастроек.ВременныйРазделительДанных;
					КонецЕсли; 
					//10.07.2017 Островерхий} 
					//06.07.2017 Островерхий} 
					
					
				//ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ТекСтрока[счКолонка])) Тогда
				ИначеЕсли ОписаниеТиповТекКолонки.ЭтоПеречисление Тогда
					
					//мТекст = СокрЛП(мТекст) + СокрЛП(ТекСтрока[счКолонка]) + СтруктураНастроек.ВременныйРазделительДанных;
					мТекст = мТекст + Строка(ТекСтрока[счКолонка]) + СтруктураНастроек.ВременныйРазделительДанных;
					
				//ИначеЕсли НЕ ЭтоПримитивныйТип(ТипЗнч(ТекСтрока[счКолонка])) Тогда
				ИначеЕсли ОписаниеТиповТекКолонки.ЭтоСправочник ИЛИ ОписаниеТиповТекКолонки.ЭтоДокумент Тогда	
					
					Попытка
					
						Если ЗначениеЗаполнено(ТекСтрока[счКолонка]) Тогда
							//мТекст = СокрЛП(мТекст) + СокрЛП(ТекСтрока[счКолонка].УникальныйИдентификатор()) + СтруктураНастроек.ВременныйРазделительДанных;
							мТекст = мТекст + Строка(ТекСтрока[счКолонка].УникальныйИдентификатор()) + СтруктураНастроек.ВременныйРазделительДанных;
						Иначе
							//мТекст = СокрЛП(мТекст) + СтруктураНастроек.ВременныйРазделительДанных;
							мТекст = мТекст + СтруктураНастроек.ВременныйРазделительДанных;
						КонецЕсли;
					
					Исключение
						
						//мТекст = СокрЛП(мТекст) + СокрЛП(ТекСтрока[счКолонка]) + СтруктураНастроек.ВременныйРазделительДанных;	
						мТекст = мТекст + ТекСтрока[счКолонка] + СтруктураНастроек.ВременныйРазделительДанных;
						
					КонецПопытки; 
					
				//ИначеЕсли Рез.Колонки[счКолонка].Имя = "ТипСправочника_Владелец" Тогда
				ИначеЕсли ОписаниеТиповТекКолонки.ЭтоКолонка_ТипСправочника_Владелец Тогда	
				
					мИмяТипаСсылки = ВернемИмяРеквизитаПоМетаданным(ТипЗнч(ТекСтрока[счКолонка-1]));
					//мТекст = СокрЛП(мТекст) + мИмяТипаСсылки + СтруктураНастроек.ВременныйРазделительДанных;
					мТекст = мТекст + мИмяТипаСсылки + СтруктураНастроек.ВременныйРазделительДанных;
					
				//ИначеЕсли Найти(Рез.Колонки[счКолонка].Имя, "ТипСправочника_") > 0 Тогда
				ИначеЕсли ОписаниеТиповТекКолонки.ЭтоКолонка_ТипСправочника_ Тогда
				
					мИмяТипаСсылки = ВернемИмяРеквизитаПоМетаданным(ТипЗнч(ТекСтрока[счКолонка-1]));
					//мТекст = СокрЛП(мТекст) + мИмяТипаСсылки + СтруктураНастроек.ВременныйРазделительДанных;		
					мТекст = мТекст + мИмяТипаСсылки + СтруктураНастроек.ВременныйРазделительДанных;
					
				Иначе
					
					//мТекст = СокрЛП(мТекст) + ДополнительнаяОбработкаДанных(ТекСтрока[счКолонка]) + СтруктураНастроек.ВременныйРазделительДанных;
					мТекст = мТекст + СокрЛП(ТекСтрока[счКолонка]) + СтруктураНастроек.ВременныйРазделительДанных;

				КонецЕсли;
				
			КонецЦикла;
			
			Если ТекСч = 1 Тогда
				//пТекстДок.ДобавитьСтроку(мРеквизитыСправочника);
				Попытка
					пТекстДок.ЗаписатьСтроку(мРеквизитыСправочника);
				Исключение
					ОписаниеОшибки = ОписаниеОшибки + "Ошибка при записи файла объекта - "+пТекСправочник+Символы.ПС;
					Возврат;
				КонецПопытки; 
			КонецЕсли;
			
			//пТекстДок.ДобавитьСтроку(мТекст);
			Попытка
				//пТекстДок.ЗаписатьСтроку(мТекст);
				пТекстДок.ЗаписатьСтроку(ДополнительнаяОбработкаДанных(мТекст));
			Исключение
				ОписаниеОшибки = ОписаниеОшибки + "Ошибка при записи файла объекта - "+пТекСправочник+Символы.ПС;
				Возврат;
			КонецПопытки;
			ТекСч = ТекСч + 1;
			
		КонецЦикла;
		
		Попытка
			//ЗаписатьФайл(пТекстДок, КаталогФайл, пТекИмяФайла);
			пТекстДок.Закрыть();
			ВыбФайл = Новый Файл(ИмяВременногоФайла);
			
			Если ВыбФайл.Существует() Тогда
			
				Если ПеремещатьФайлВыгрузки ИЛИ ВыбФайл.Размер() < 1500000 Тогда //И размер < ~1.5 mb
					КопироватьФайл(ИмяВременногоФайла, КаталогФайл + СокрЛП(?(Лев(пТекИмяФайла,1)=".",Прав(пТекИмяФайла,СтрДлина(пТекИмяФайла)-1),пТекИмяФайла)) + "."+СтруктураНастроек.РасширениеФайлов);
					УдалитьФайлы(ИмяВременногоФайла);	
				Иначе
					ВозвратИмяВременногоФайла = ИмяВременногоФайла;
				КонецЕсли;	
			
			КонецЕсли; 
			  
			#Если Клиент Тогда
				Сообщить("Выгружено '"+пТекСправочник+"' "+Рез.Количество()+" элемента(ов)",СтатусСообщения.Информация);
				ЛогОбмена = ЛогОбмена + "Выгружено '"+пТекСправочник+"' "+Рез.Количество()+" элемента(ов)";
			#КонецЕсли
			
			//{10.11.2015 Островерхий заявка №б/н 
			СохранитьСтатистикуВыгрузкиДанных(пТекИмяФайла,НачалоВыполнения,Рез.Количество(),,НачалоПериода,КонецПериода); 
			//10.11.2015 Островерхий} 
			
		Исключение
			ОписаниеОшибки = ОписаниеОшибки + "Ошибка при записи файла объекта - "+пТекСправочник+Символы.ПС;
			
			//{10.11.2015 Островерхий заявка №б/н 
			СохранитьСтатистикуВыгрузкиДанных(пТекИмяФайла,НачалоВыполнения,Рез.Количество(),ОписаниеОшибки,НачалоПериода,КонецПериода); 
			//10.11.2015 Островерхий}
			
			Возврат;
		КонецПопытки;  
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура СохранитьСтатистикуВыгрузкиДанных(ИмяОбъекта,ТочкаНачалаЗамера,ВыгруженоОбъектов=0,ОписаниеОшибок="",НачалоПериода='00010101',КонецПериода='00010101') Экспорт 

	ТочкаЗавершенияЗамера = ПолучитьТекущееВремяВМиллисекундах();
	Коэф = ?(ТипЗнч(ТочкаЗавершенияЗамера) = Тип("Дата"),1000,1);
	
	НаборЗаписей = РегистрыСведений.ПРГСтатистикаВыгрузкиВКубыOLAP.СоздатьМенеджерЗаписи();
	НаборЗаписей.Период = ТекущаяДата();
	НаборЗаписей.ИмяОбъекта = ?(Лев(ИмяОбъекта,1)=".",Прав(ИмяОбъекта,СтрДлина(ИмяОбъекта)-1),ИмяОбъекта);
	НаборЗаписей.ВремяВыгрузкиОбъектаВМс = Макс((ТочкаЗавершенияЗамера-ТочкаНачалаЗамера)*Коэф,1);
	НаборЗаписей.ДатаПоследнейВыгрузки = ТекущаяДата();
	НаборЗаписей.ВыгруженоОбъектов = ВыгруженоОбъектов;
	НаборЗаписей.ОписаниеОшибок = ОписаниеОшибок;
	НаборЗаписей.НачалоПериода = НачалоПериода;
	НаборЗаписей.КонецПериода = КонецПериода;

	НаборЗаписей.Записать(Истина);

КонецПроцедуры

//
//
Функция ЗаписатьФайл(фТекстДок, фКаталогФайл, фИмяФайла)
	
	фТекстДок.Записать(фКаталогФайл + СокрЛП(?(Лев(фИмяФайла,1)=".",Прав(фИмяФайла,СтрДлина(фИмяФайла)-1),фИмяФайла)) + "."+СтруктураНастроек.РасширениеФайлов, КодировкаТекста.ANSI);
	
	Возврат Истина;
	
КонецФункции

//
//
Функция ВернемИмяРеквизитаПоМетаданным(ТипРеквизита)
	
    Если ЭтоПримитивныйТип(ТипРеквизита) Тогда
		Возврат "";	
	КонецЕсли; 
	
	мТипСсылки = Новый(ТипРеквизита);
	мИмяТипаСсылки = мТипСсылки.Метаданные().Имя;

    Возврат мИмяТипаСсылки;
	
КонецФункции // ()

Функция ЭтоПримитивныйТип(ТипРеквизита)

	Если ТипРеквизита = Тип("Строка") 
		ИЛИ ТипРеквизита = Тип("Неопределено")
		ИЛИ ТипРеквизита = Тип("Число")
		ИЛИ ТипРеквизита = Тип("Дата")
		ИЛИ ТипРеквизита = Тип("Булево")
		ИЛИ ТипРеквизита = Тип("NULL") Тогда
		
		Возврат Истина;	
		
	КонецЕсли;
	
    Возврат Ложь;
	
КонецФункции // ЭтоПримитивныйТип(ТипРеквизита)

//
//
Функция ДополнительнаяОбработкаДанных(мСтрока)

	тСтрока = СокрЛП(мСтрока);
	тСтрока = СтрЗаменить(тСтрока, СтруктураНастроек.РазделительДанных, ",");
	тСтрока = СтрЗаменить(тСтрока, Символы.ПС, ", ");
	тСтрока = СтрЗаменить(тСтрока, СтруктураНастроек.ВременныйРазделительДанных, СтруктураНастроек.РазделительДанных);
	тСтрока = СтрЗаменить(тСтрока, " "+СтруктураНастроек.РазделительДанных+" ", СтруктураНастроек.РазделительДанных);
	тСтрока = СтрЗаменить(тСтрока, СтруктураНастроек.РазделительДанных+" ", СтруктураНастроек.РазделительДанных);
	тСтрока = СтрЗаменить(тСтрока, " "+СтруктураНастроек.РазделительДанных, СтруктураНастроек.РазделительДанных);
	
	//тСтрока = СтрЗаменить(тСтрока, Символы.ВТаб, "");
	//тСтрока = СтрЗаменить(тСтрока, Символы.ВК, "");
	//тСтрока = СтрЗаменить(тСтрока, Символы.НПП, "");
	//тСтрока = СтрЗаменить(тСтрока, Символы.ПФ, "");
	//тСтрока = СтрЗаменить(тСтрока, Символы.Таб, "");
	//тСтрока = СтрЗаменить(тСтрока, Символы., "");
	
	//Шаблон = "^ |[;,]| $"; //СокрЛП(мСтрока) + СтрЗаменить(тСтрока, ";", ",")
	//тСтрока = RegExp_СтрЗаменить(мСтрока, Шаблон);
	//
	//Шаблон = "\n"; //СтрЗаменить(тСтрока, Символы.ПС, ", ")
	//тСтрока = RegExp_СтрЗаменить(мСтрока, Шаблон,", ");
	
	//Шаблон = "[ \t\v\r\n\f]{1,};[ \t\v\r\n\f]{1,}|;[ \t\v\r\n\f]{1,}|[ \t\v\r\n\f]{1,};"; //Замена пробелов от ; до след. ;
	//тСтрока = RegExp_СтрЗаменить(тСтрока, Шаблон);
	
	Возврат тСтрока;
	
КонецФункции

Функция RegExp_СтрЗаменить(Строка, ПодстрокаПоиска, ПодстрокаЗамены="")

	Попытка
	
		RegExp = Новый COMОбъект("VBScript.RegExp");// создаем объект для работы с регулярными выражениями
		RegExp.MultiLine = Истина;  // истина — текст многострочный, ложь — одна строка
		RegExp.Global = Истина;     // истина — поиск по всей строке, ложь — до первого совпадения
		RegExp.IgnoreCase = Истина; // истина — игнорировать регистр строки при поиске
		RegExp.Pattern = ПодстрокаПоиска; 	
		
		Возврат RegExp.Replace(Строка,ПодстрокаЗамены);	
	
	Исключение
		
		Возврат Строка;		
		
	КонецПопытки; 
	
КонецФункции // ()
 

//
//
Функция СтрокаМакетаВСтруктуру(ТабличныйДокумент, НомерСтроки, ТекстыЯчеек = Неопределено, КоличествоОшибок = 0)
	
	ТекстыЯчеек = Новый Массив;
	ТекстыЯчеек.Добавить(Неопределено);
	Для к = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		ТекстыЯчеек.Добавить(СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(К,"ЧГ=")).Текст));
	КонецЦикла;
	
	ТекущаяСтрока     = Новый Структура("ТипМетаданных,ИмяОбъекта,ТекстЗапроса,ЭтоНСИ,НеВыгружатьАтоматически",ТекстыЯчеек[1],ТекстыЯчеек[2],ТекстыЯчеек[3],Булево(Число(ТекстыЯчеек[4])),Булево(Число(ТекстыЯчеек[5])));
	
	Возврат ТекущаяСтрока;
	
КонецФункции

// Возвращает текущее время в миллисекундах.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Число.
//
Функция ПолучитьТекущееВремяВМиллисекундах() Экспорт
	
	//Если JavaScript = Неопределено Тогда
	//	Попытка
	//		JavaScript = Новый COMОбъект("MSScriptControl.ScriptControl");
	//	Исключение
	//		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
	//		Возврат ТекущаяДата();
	//	КонецПопытки;
	//	JavaScript.Language = "javascript";
	//КонецЕсли;
	//Результат = JavaScript.Eval("new Date().getTime()");
	
	Результат = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////
//Соединение с внешним сервером SQL
////////////////////////////////////

Функция УстановитьСоединение()Экспорт

	СоединениеУстановлено = Ложь;
	
	ИмяСервера = СтруктураНастроек.ВнешняяБД.ИмяСервера;
	ИмяБазы    = СтруктураНастроек.ВнешняяБД.ИмяБазы; 
	Логин      = СтруктураНастроек.ВнешняяБД.Логин;
	Пароль = СтруктураНастроек.ВнешняяБД.Пароль; 
	
	Если ADODBConnection = Неопределено Тогда
	
		Попытка      
			
			ADODBConnection  = Новый COMОбъект("ADODB.Connection");
			СтрокаСоедиенения = 
			"DRIVER={SQL Server};
			|DSN=MQIS;
			|SERVER="+СокрЛП(ИмяСервера)+";
			|DATABASE="+СокрЛП(ИмяБазы)+";
			|UID="+СокрЛП(Логин)+"; 
			|PWD="+СокрЛП(Пароль)+";";
			
			ADODBConnection.Open(СтрокаСоедиенения);   
			
			СохранитьСоединениеВГлобальнуюПеременную(ADODBConnection);
			СоединениеУстановлено = Истина;	
			
			//Сообщить("Установлено соединение с сервером БД "+Строка(ТекущаяДата()),СтатусСообщения.Информация);
			
		Исключение
			
			//Сообщить("Не удалось устновить соединение с сервером БД",СтатусСообщения.ОченьВажное);
			//Сообщить(ОписаниеОшибки());
			
		КонецПопытки;	
		
	Иначе
		
		СоединениеУстановлено = Истина;	
		
	КонецЕсли; 
	
	Возврат СоединениеУстановлено;	

КонецФункции // УстановитьСоединение()

Функция ЗакрытьСоединение()Экспорт

	СоединениеЗакрыто = Ложь;
	
	Если НЕ ADODBConnection = Неопределено Тогда
	
		Попытка      
			
			ADODBConnection.Close();   
			СоединениеЗакрыто = Истина;
			//Сообщить("Соединение с сервером БД закрыто "+Строка(ТекущаяДата()),СтатусСообщения.Информация);
			
		Исключение
			
			//Сообщить("Не удалось закрыть соединение с сервером БД",СтатусСообщения.ОченьВажное);
			//Сообщить(ОписаниеОшибки());
			
		КонецПопытки;	
		
	Иначе
		
		СоединениеЗакрыто = Истина;	
		
	КонецЕсли;

	Возврат СоединениеЗакрыто;
	
КонецФункции // ЗакрытьСоединение()

Процедура СохранитьСоединениеВГлобальнуюПеременную(Connection)

	ADODBConnection = Connection;	
	
КонецПроцедуры

Функция ВыполнитьЗапрос(ТекстЗапроса,ЗакрыватьСоединениеПослеВыполненияЗапроса=Ложь)Экспорт 

	РезультатЗапроса = Неопределено;
	
	ПопыткаУстановкиСоединения();
	
	Если СоединениеУстановлено Тогда
		
		Результат = Новый COMОбъект("ADODB.Command");
		Результат.ActiveConnection = ADODBConnection; 
		Результат.CommandTimeOut = 10; 
		Результат.CommandType = "adCmdText"; 
		Результат.CommandText = ТекстЗапроса;
		
		Попытка
			РезультатЗапроса = Результат.Execute(); // выполняем процедуру
		Исключение
			//Сообщить("Ошибка при выполнении запроса:", СтатусСообщения.ОченьВажное);
			//Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Если ЗакрыватьСоединениеПослеВыполненияЗапроса Тогда
		
			ЗакрытьСоединение();	
		
		КонецЕсли; 
		
	Иначе
		
		//Сообщить("Соединение с сервером БД не установлено",СтатусСообщения.ОченьВажное);
	
	КонецЕсли; 

	Возврат РезультатЗапроса;
	
КонецФункции // ВыполнитьЗапрос()
  
Процедура ПопыткаУстановкиСоединения()

	Если НЕ СоединениеУстановлено Тогда
	
		УстановитьСоединение();	
	
	КонецЕсли; 

КонецПроцедуры
 
СоединениеУстановлено = Ложь;

СтруктураНастроек = СформироватьСтруктуруНастроек();
 