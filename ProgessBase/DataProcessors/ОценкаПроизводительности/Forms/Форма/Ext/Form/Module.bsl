&НаКлиенте
Перем ТаблицаОбновлена;

&НаКлиенте
Перем ДиаграммаОбновлена;


///////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура загружает настройки ТЧ, если это первое открытие
// то в ТЧ добавляются все ключевые операции из справочника
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КлючОбъекта		= "Обработка.ОценкаПроизводительности.Формы.Форма";
	КлючНастройки	= "Производительность";
	
	Настройка = ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, КлючНастройки);
	Попытка
		
		Если Настройка = Неопределено Тогда
			ЗагружаемаяНастройка = ЗагрузитьКО();
		Иначе
			ЗагружаемаяНастройка = Настройка["Объект.Производительность"];
		КонецЕсли;
		
		Объект.Производительность.Загрузить(ЗагружаемаяНастройка);
		
	Исключение
		Сообщить("Не удалось загрузить настройки.", СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТаблицаОбновлена = Ложь;
	ДиаграммаОбновлена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохранитьНастройкиТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительностьКлючеваяОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительностьЦелевоеВремяПриИзменении(Элемент)
	
	Данные = Элементы.Производительность.ТекущиеДанные;
	Если НЕ Данные = Неопределено Тогда
		Если Данные.КлючеваяОперация = ОценкаПроизводительностиВызовСервера.ПолучитьПредопределенный() Тогда
			Данные.ЦелевоеВремя = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаРасшифровка" Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТаблицаОбновлена Или Не ДиаграммаОбновлена Тогда
		Если Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаДиаграмма" Тогда
			ДиаграммаОбновлена = Истина;
		ИначеЕсли Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаТаблица" Тогда
			ТаблицаОбновлена = Истина;
		КонецЕсли;
		ОбновитьПоказатели();
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД

&НаКлиенте
Процедура Обновить(Команда)
	
	Если Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаРасшифровка" Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаДиаграмма" Тогда
		ДиаграммаОбновлена = Истина;
		ТаблицаОбновлена = Ложь;
	ИначеЕсли Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаТаблица" Тогда
		ТаблицаОбновлена = Истина;
		ДиаграммаОбновлена = Ложь;
	КонецЕсли;
	
	ОбновитьПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	Врем = Объект.Производительность;
	ТекущийИндекс = Врем.Индекс(Элементы.Производительность.ТекущиеДанные);
	
	Если Врем.Количество() <= 1 ИЛИ ТекущийИндекс = 0 ИЛИ 
		Врем[ТекущийИндекс].КлючеваяОперация = ОценкаПроизводительностиВызовСервера.ПолучитьПредопределенный() Тогда
			Возврат;
	КонецЕсли;
	
	Врем.Сдвинуть(ТекущийИндекс, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	Врем = Объект.Производительность;
	ТекущийИндекс = Врем.Индекс(Элементы.Производительность.ТекущиеДанные);
	
	Если Врем.Количество() <= 1 ИЛИ ТекущийИндекс = Врем.Количество() - 1 ИЛИ
		Врем[ТекущийИндекс + 1].КлючеваяОперация = ОценкаПроизводительностиВызовСервера.ПолучитьПредопределенный() Тогда
			Возврат;
	КонецЕсли;
	
	Врем.Сдвинуть(ТекущийИндекс, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортДанных(Команда)
	
	РасширениеПодключено = Истина;
	#Если ВебКлиент Тогда
		Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
			
			РасширениеПодключено = Ложь;
			
			КодВозврата = Вопрос("Расширение для работы с файлами не установлено, установить?
								|""Да"" - Выполнить попытку установки расширения
								|""Нет"" - Экспорт будет выполнен стандартными средствами браузера
								|""Отмена"" - Отменить экспорт", РежимДиалогаВопрос.ДаНетОтмена);
			Если КодВозврата = КодВозвратаДиалога.Да Тогда
				
				УстановитьРасширениеРаботыСФайлами();
				Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
					КодВозврата = Вопрос("Выполнить стандартными средствами браузера?", РежимДиалогаВопрос.ДаНет);
					Если КодВозврата = КодВозвратаДиалога.Нет Тогда
						Возврат;
					КонецЕсли;
				Иначе
					РасширениеПодключено = Истина;
				КонецЕсли;
				
			ИначеЕсли КодВозврата = КодВозвратаДиалога.Отмена Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	#КонецЕсли
	
	Если РасширениеПодключено Тогда
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбора.Фильтр = "ZIP архив(*.zip)|*.zip";
		ДиалогВыбора.Расширение = "zip";
		Если НЕ ДиалогВыбора.Выбрать() Тогда
			Возврат;
		КонецЕсли;
		
		ИмяФайла = ДиалогВыбора.ПолноеИмяФайла;
	КонецЕсли;
	
	Состояние("Экспорт данных...");
	
	АдресВХранилище = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	
	#Если ВебКлиент Тогда
		Если РасширениеПодключено Тогда
			ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла;
			ОписаниеПередаваемогоФайла.Хранение = АдресВХранилище;
			ОписаниеПередаваемогоФайла.Имя = ИмяФайла;
			
			МассивФайлов = Новый Массив;
			МассивФайлов.Добавить(ОписаниеПередаваемогоФайла);
			
			ОписаниеВызова = Новый Массив;
			ОписаниеВызова.Добавить("ПолучитьФайлы");
			ОписаниеВызова.Добавить(МассивФайлов);
			ОписаниеВызова.Добавить("");
			ОписаниеВызова.Добавить("");
			ОписаниеВызова.Добавить(Ложь);
			
			Вызовы = Новый Массив;
			Вызовы.Добавить(ОписаниеВызова);
			
			ЗапроситьРазрешениеПользователя(Вызовы);
		КонецЕсли;
	#КонецЕсли
	
	КлючевыеОперации = Новый Массив;
	ЦелевоеВремя = Новый Массив;
	
	Для Каждого СтрокаТЗ Из Объект.Производительность Цикл
		
		Если СтрокаТЗ.КлючеваяОперация = ОценкаПроизводительностиВызовСервера.ПолучитьПредопределенный() Тогда
			Продолжить;
		КонецЕсли;
		
		КлючевыеОперации.Добавить(СтрокаТЗ.КлючеваяОперация);
		ЦелевоеВремя.Добавить(СтрокаТЗ.ЦелевоеВремя);
		
	КонецЦикла;
	
	МассивКО = Новый Массив;
	МассивКО.Добавить(КлючевыеОперации);
	МассивКО.Добавить(ЦелевоеВремя);
	
	ПараметрыЭкспорта = Новый Структура("ДатаНачала, ДатаОкончания, Шаг, МассивКО");
	ПараметрыЭкспорта.ДатаНачала	= Объект.Период.ДатаНачала;
	ПараметрыЭкспорта.ДатаОкончания	= Объект.Период.ДатаОкончания;
	ПараметрыЭкспорта.Шаг			= Строка(Объект.Шаг);
	ПараметрыЭкспорта.МассивКО		= МассивКО;
	
	Экспортировать(АдресВХранилище, ПараметрыЭкспорта);
	
	#Если ВебКлиент Тогда
		Если РасширениеПодключено Тогда
			ПолучитьФайлы(МассивФайлов, , ,Ложь);
		Иначе
			ПолучитьФайл(АдресВХранилище, , Истина);
		КонецЕсли;
	#Иначе
		ПолучитьФайл(АдресВХранилище, ИмяФайла, Ложь);
		Предупреждение("Экспорт завершен.");
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуМодально("Обработка.ОценкаПроизводительности.Форма.НастройкаПодсистемы");
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ПРОЦЕДУРЫ (СЕРВЕР)

// Процедура рассчитывает показатели производительности
//
&НаСервере
Процедура ОбновитьПоказатели()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.ОценкаПроизводительности"));
	УстановитьСоответствиеОбъектаИРеквизитаФормы(ОбработкаОбъект, "Объект");
	
	Если Не НастройкаВыполнена() Тогда
		Возврат;
	КонецЕсли;
	
	// Получение итоговой ТЗ которая будет выведена пользователю
	ТЗ = ОбработкаОбъект.ПолучитьПоказателиПроизводительности();
	
	Если ТЗ = Неопределено Тогда
		СП = Новый СообщениеПользователю;
		СП.ПутьКДанным = "Объект";
		СП.Поле = "Период";
		СП.Текст = "Период установлен не правильно.";
		СП.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТЗ) Тогда
		Возврат; 
	КонецЕсли;
	
	Если Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаДиаграмма" Тогда
		
		Диаграмма = Объект.Диаграмма;
		
		Диаграмма.Обновление = Ложь;
		
		Диаграмма.АвтоМаксимальноеЗначение	= Ложь;
		Диаграмма.АвтоМинимальноеЗначение	= Ложь;
		Диаграмма.МаксимальноеЗначение		= 1;
		Диаграмма.МинимальноеЗначение		= 0;
		Диаграмма.БазовоеЗначение			= 0;
		Диаграмма.ПропускатьБазовоеЗначение	= Истина;
		
		Диаграмма.Очистить();
		Элементы.Диаграмма.Заголовок = "Диаграмма производительности с " + Формат(Объект.Период.ДатаНачала, "ДФ=dd.MM.yyyy") + 
										" по " + Формат(Объект.Период.ДатаОкончания, "ДФ=dd.MM.yyyy") + " - " + "шаг: " + Объект.Шаг;
		
		ТЗ.Колонки.Удалить(1); // НомерСтроки
		ТЗ.Колонки.Удалить(1); // ЦелевоеВремя
		
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			
			Серия = Диаграмма.Серии.Добавить(СтрокаТЗ.КлючеваяОперация);
			Серия.Текст = СтрокаТЗ.КлючеваяОперация;
			
		КонецЦикла;
		
		ТЗ.Колонки.Удалить(0); // КлючеваяОперация
		
		Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
			
			Точка = Диаграмма.Точки.Добавить(КолонкаТЗ.Имя);
			Точка.Текст = ?(Объект.Шаг = "Час", Лев(КолонкаТЗ.Заголовок, 2), КолонкаТЗ.Заголовок); //Для отображения только часов если шаг Час
			Строка = 0;
			Столбец = ТЗ.Колонки.Индекс(КолонкаТЗ);
			Для Каждого Серия Из Диаграмма.Серии Цикл
				
				ЗначениеТочки = ТЗ[Строка][Столбец];
				Диаграмма.УстановитьЗначение(Точка, Серия, ?(ЗначениеТочки = 0.001 ИЛИ ЗначениеТочки = 0, ЗначениеТочки, ЗначениеТочки - 0.001));
				Строка = Строка + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Диаграмма.ТипДиаграммы = ТипДиаграммы.График;
		
		Диаграмма.Обновление = Истина;
		
	ИначеЕсли Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаТаблица" Тогда
	
		РеквизитыОбъекта = ПолучитьРеквизиты("Объект.Производительность");
		УдаляемыеРеквизиты = ПолучитьУдаляемыеРеквизиты(РеквизитыОбъекта);
		
		Если НЕ УдаляемыеРеквизиты.Количество() = ТЗ.Колонки.Количество() - 3 Тогда
			
			// Удаление колонок из табличной части "Производительность"
			Для а = 0 По УдаляемыеРеквизиты.Количество() - 1 Цикл
				
				Элемент = Элементы.Найти(Сред(УдаляемыеРеквизиты[а], 27));
				Если Элемент <> Неопределено Тогда
					Элементы.Удалить(Элемент);
				КонецЕсли;
				
			КонецЦикла;
			
			ДобавляемыеРеквизиты = ПолучитьДобавляемыеРеквизиты(ТЗ.Колонки);
			ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
			
			// Добавление колонок в табличную часть "Производительность"
			РеквизитыОбъекта = ПолучитьРеквизиты("Объект.Производительность");
			Для Каждого РеквизитОбъекта Из РеквизитыОбъекта Цикл
				
				ИмяРеквизита = РеквизитОбъекта.Имя;
				Если Лев(ИмяРеквизита, 18) = "Производительность" Тогда
					Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.Производительность);
					Элемент.Вид = ВидПоляФормы.ПолеВвода;
					Элемент.ПутьКДанным = "Объект.Производительность." + ИмяРеквизита;
					Элемент.Заголовок = РеквизитОбъекта.Заголовок;
					Элемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
					Элемент.Формат = "ЧЦ=5; ЧДЦ=2; ЧН=";
					Элемент.ТолькоПросмотр = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			// Формирование списков полей для условного оформления
			ПоляОтбора = Новый Массив;
			ПоляОформления = Новый Массив;
			
			Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
				
				Если ТЗ.Колонки.Индекс(КолонкаТЗ) <= 2 Тогда
					Продолжить;
				КонецЕсли;
				ПоляОтбора.Добавить("Объект.Производительность." + КолонкаТЗ.Имя);
				ПоляОформления.Добавить(КолонкаТЗ.Имя);
				
			КонецЦикла;
			
			УстановитьУсловноеОформлениеТЧ(ПоляОтбора, ПоляОформления, УсловноеОформление);
		Иначе
			а = -1;
			Для Каждого Элемент Из Элементы.Производительность.ПодчиненныеЭлементы Цикл
				
				а = а + 1;
				// Пропускаем первые 3 элемента, чтобы не менять заголовки у колонок "Ключевая операция", "Приоритет" и "Целевое время"
				Если а < 3 Тогда
					Продолжить;
				КонецЕсли;
				Элемент.Заголовок = ТЗ.Колонки[а].Заголовок;
				
			КонецЦикла;
		КонецЕсли;
		
		Объект.Производительность.Загрузить(ТЗ);
		
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ (СЕРВЕР)

// Процедура сохраняет настройки ТЧ "Производительность"
//
&НаСервере
Процедура СохранитьНастройкиТЧ()
	
	Настройка = Новый Соответствие;
	Настройка.Вставить("Объект.Производительность", Объект.Производительность.Выгрузить());
	Попытка
		ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта, КлючНастройки, Настройка);
	Исключение
	КонецПопытки;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////
// РАБОТА С ФОРМОЙ (СЕРВЕР)

// Функция создает массив реквизитов формы(колонки ТЧ "Производительность"), которые надо добавить
//
// Параметры:
//  ТЗ - ТаблицаЗначений, в которой находятся уже рассчитанные показатели проиозводительности
//
// Возвращаемое значение:
//  Массив - Массив реквизтов формы
//
&НаСервереБезКонтекста
Функция ПолучитьДобавляемыеРеквизиты(ТЗКолонки)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ТипЧисло63 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 3, ДопустимыйЗнак.Неотрицательный));
	
	Для Каждого КолонкаТЗ Из ТЗКолонки Цикл
		
		Если ТЗКолонки.Индекс(КолонкаТЗ) < 3 Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйРеквизитФормы = Новый РеквизитФормы(КолонкаТЗ.Имя, ТипЧисло63, "Объект.Производительность", КолонкаТЗ.Заголовок);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизитФормы);
		
	КонецЦикла;
	
	Возврат ДобавляемыеРеквизиты;
	
КонецФункции

// Функция создает массив реквизитов формы(колонки ТЧ "Производительность"), которые надо удалить
// и удаляет элементы формы связанные с реквизитами
//
// Возвращаемое значение:
//  Массив - Массив реквизтов формы
//
&НаСервереБезКонтекста
Функция ПолучитьУдаляемыеРеквизиты(РеквизитыОбъекта)
	
	УдаляемыеРеквизиты = Новый Массив;
	
	а = 0;
	Пока а < РеквизитыОбъекта.Количество() Цикл
		
		ИмяРеквизита = РеквизитыОбъекта[а].Имя;
		Если Лев(ИмяРеквизита, 18) = "Производительность" Тогда
			УдаляемыеРеквизиты.Добавить("Объект.Производительность." + ИмяРеквизита);
		КонецЕсли;
		а = а + 1;
		
	КонецЦикла;
	
	Возврат УдаляемыеРеквизиты;
	
КонецФункции

// Процедура устанавливает условное оформление ТЧ "Производительность"
//
&НаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеТЧ(ПоляОтбора, ПоляОформления, УсловноеОформление);
	
	УсловноеОформление.Элементы.Очистить();
	
	// Чтобы у ключевой операции ОбщаяПроизводительностьСистемы небыло приоритета
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.КлючеваяОперация");
	ЭлементОтбора.ПравоеЗначение = ОценкаПроизводительностиВызовСервера.ПолучитьПредопределенный();
	
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НомерСтроки");
	
	// Чтобы если целевое время не заполнено было отмечено у всех кроме ОбщаяПроизводительностьСистемы
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Условие для оформления
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.КлючеваяОперация");
	ЭлементОтбора.ПравоеЗначение = ОценкаПроизводительностиВызовСервера.ПолучитьПредопределенный();
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.ЦелевоеВремя");
	ЭлементОтбора.ПравоеЗначение = 0;
	
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ЦелевоеВремя");
	
	КоличествоПолей = ПоляОтбора.Количество() - 1;
	
	// Оформление если операция не выполнялась
	Для а = 0 По КоличествоПолей Цикл
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 255, 255));
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПоляОтбора[а]);
		ЭлементОтбора.ПравоеЗначение = 0;
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ПоляОформления[а]);
		
	КонецЦикла;
	
	// Оформление для показателей производительности
	Соответствие = ПолучитьСоответствие();
	Для Каждого КлючЗначение Из Соответствие Цикл
	
		Для а = 0 По КоличествоПолей Цикл
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			
			// Вид оформления
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", КлючЗначение.Значение.Цвет);
			
			// Условие для оформления
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПоляОтбора[а]);
			ЭлементОтбора.ПравоеЗначение = КлючЗначение.Значение.От;
			
			// Условие для оформления
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПоляОтбора[а]);
			ЭлементОтбора.ПравоеЗначение = КлючЗначение.Значение.До;
			
			// Оформляемое поле
			ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ПоляОформления[а]);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////
// ЭКСПОРТ ДАННЫХ

// Экспортировать данные замеров на указанном интервале
//
&НаСервереБезКонтекста
Процедура Экспортировать(АдресВХранилище, ПараметрыЭкспорта)
	
	ВременныйКаталог = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
	ИмяФайла = ВременныйКаталог + "/exp.zip";
	ИмяФайлаОписания = ВременныйКаталог + "/Description.txt";
	ИмяФайлаНастроек = ВременныйКаталог + "/Settings.xml";
	СоздатьКаталог(ВременныйКаталог);
	
	ЗаписьZip	= Новый ЗаписьZipФайла(ИмяФайла);
	Начало		= ПараметрыЭкспорта.ДатаНачала;
	Конец		= ПараметрыЭкспорта.ДатаОкончания;
	МассивКО	= ПараметрыЭкспорта.МассивКО;
	
	НачалоИнтервала = Начало;
	КонецИнтервала = Конец;
	
	ШиринаИнтервалаПакета = 3600 - 1;
	КоличествоПакетов = (Конец - Начало) / ШиринаИнтервалаПакета;
	КоличествоПакетов = Цел(КоличествоПакетов) + ?(КоличествоПакетов - Цел(КоличествоПакетов) > 0, 1, 0);
	
	Пока НачалоИнтервала < Конец Цикл
		КонецИнтервала = НачалоИнтервала + ШиринаИнтервалаПакета;
		
		Если КонецИнтервала > Конец Тогда
			КонецИнтервала = Конец;
		КонецЕсли;
		
		ИмяВременногоФайла = ВременныйКаталог + "/" + ИмяФайлаПоВремени(НачалоИнтервала) + ".1capd";
		ЭкспортироватьИнтервал(ИмяВременногоФайла, НачалоИнтервала, КонецИнтервала, МассивКО);
		
		ЗаписьZip.Добавить(ИмяВременногоФайла);
		
		НачалоИнтервала = КонецИнтервала + 1;
		
	КонецЦикла;
	
	ЗаполнитьОписание(ИмяФайлаОписания, Начало, Конец, МассивКО);
	ЗаписьZip.Добавить(ИмяФайлаОписания);
	
	ЗаполнитьНастройки(ИмяФайлаНастроек, Начало, Конец, ПараметрыЭкспорта.Шаг, МассивКО);
	ЗаписьZip.Добавить(ИмяФайлаНастроек);
	
	ЗаписьZip.Записать();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВХранилище);
	
	УдалитьФайлыНаСервере(ВременныйКаталог);
	
	
КонецПроцедуры // Экспортировать()

// Экспортировать данные замеров информационной базы на указанном интервале
//
// Параметры:
//  ИмяВременногоФайла - Строка, имя файла для записи данных
//  Начало - ДатаВремя, начало интервала поиска
//  Конец - ДатаВремя, конец интервала поиска
//  МассивКО - Массив, массив ключевых операций данные по которым надо экспортировать
//
&НаСервереБезКонтекста
Процедура ЭкспортироватьИнтервал(ИмяВременногоФайла, Начало, Конец, МассивКО)
	
	НаборЗаписейЗамеры = ПолучитьНаборЗаписейЗамерыВремени(Начало, Конец, МассивКО);
	
	Если Не ЗначениеЗаполнено(НаборЗаписейЗамеры) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("НаборЗаписей");
	ЗаписатьXML(ЗаписьXML, НаборЗаписейЗамеры);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЭкспортироватьИнтервал()

// Получить набор записей регистра
//
// Параметры:
//  Начало - ДатаВремя, начало интервала поиска
//  Конец - ДатаВремя, конец интервала поиска
//  МассивКО - Массив, экспортируемые ключевые операции
//
// Возвращаемое значение:
//  РегистрСведений.ЗамерыВремени.НаборЗаписей
//
&НаСервереБезКонтекста
Функция ПолучитьНаборЗаписейЗамерыВремени(Начало, Конец, МассивКО)
	
	НаборЗаписей = РегистрыСведений.ЗамерыВремени.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Конец);
	Запрос.УстановитьПараметр("МассивКО", МассивКО);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Замеры.ДатаЗамера КАК Период,
	|	Замеры.КлючеваяОперация КАК КлючеваяОперация,
	|	Замеры.НомерСеанса КАК НомерСеанса,
	|	Замеры.ВремяВыполнения КАК ВремяВыполнения
	|ИЗ
	|	РегистрСведений.ЗамерыВремени КАК Замеры
	|ГДЕ
	|	Замеры.ДатаЗамера МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Замеры.КлючеваяОперация В(&МассивКО)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат НаборЗаписей;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		Запись.ДатаЗамера = Выборка.Период;
		Запись.КлючеваяОперация = Выборка.КлючеваяОперация;
		Запись.НомерСеанса = Выборка.НомерСеанса;
		Запись.ВремяВыполнения = Выборка.ВремяВыполнения;
		
	КонецЦикла;
	
	Возврат НаборЗаписей;
	
КонецФункции

// Заполнить файл описания экспорта
//
// Параметры:
//  ИмяФайлаОписания - Строка, имя файла для размещения описания
//  Начало - ДатаВермя, начало периода экспорта
//  Конец - ДатаВремя, конец периода экспорта
//
&НаСервереБезКонтекста
Процедура ЗаполнитьОписание(ИмяФайлаОписания, Начало, Конец, МассивКО)
	
	Текст = Новый ЗаписьТекста(ИмяФайлаОписания);
	Текст.ЗаписатьСтроку("Версия       : 1.0.0.1");
	Текст.ЗаписатьСтроку("Интервал     : с " + Формат(Начало - Дата(1984,03,26,06,24,21), "ЧГ=0") + 
										" по " + Формат(Конец - Дата(1984,03,26,06,24,21), "ЧГ=0"));
	Текст.ЗаписатьСтроку("Дата экспорта: " + ТекущаяДата());
	Для а = 0 По МассивКО[0].Количество() - 1 Цикл
		Текст.ЗаписатьСтроку(МассивКО[0][а]);
	КонецЦикла;
	
	Текст.Закрыть();
	
КонецПроцедуры // ЗаполнитьОписание()

//Заполняет файл настроек
//
&НаСервереБезКонтекста
Процедура ЗаполнитьНастройки(ИмяФайлаНастроек, Начало, Конец, Шаг, МассивКО)
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.ОткрытьФайл(ИмяФайлаНастроек);
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОсновныеНастройки");
	ЗаписатьXML(ЗаписьXML, Начало);
	ЗаписатьXML(ЗаписьXML, Конец);
	ЗаписатьXML(ЗаписьXML, Шаг);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("НастройкиТаблицы");
	ЗаписьXML.ЗаписатьАтрибут("КоличествоСтрок", Формат(МассивКО[0].Количество(), "ЧГ=0"));
	
	Для а = 0 По МассивКО[0].Количество() - 1 Цикл
		
		ЗаписатьXML(ЗаписьXML, МассивКО[0][а]);
		ЗаписатьXML(ЗаписьXML, МассивКО[1][а]);
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура при первом открытии офрмы обработки заполняет 
// ТЧ "Производительность" из справочника "КлючевыеОперации"
//
&НаСервереБезКонтекста
Функция ЗагрузитьКО()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОПС", ОценкаПроизводительностиВызовСервера.ПолучитьПредопределенный());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючевыеОперации.Ссылка КАК КлючеваяОперация,
	|	ВЫБОР
	|		КОГДА КлючевыеОперации.Ссылка = &ОПС
	|			ТОГДА ""я""
	|		ИНАЧЕ КлючевыеОперации.Порядок
	|	КОНЕЦ КАК Порядок,
	|	0 КАК ЦелевоеВремя
	|ИЗ
	|	Перечисление.КлючевыеОперации КАК КлючевыеОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	КлючеваяОперация
	|АВТОУПОРЯДОЧИВАНИЕ";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат Результат.Выгрузить();
	
КонецФункции

// Процедура открывает форму выбора справочника КлючевыеОперации
// и устанавливает отбор, чтобы в списке небыло операций которые уже выбраны
//
&НаКлиенте
Процедура ОткрытьФормуВыбора()
	
	Элемент = Элементы.Производительность;
	ТЧ = Объект.Производительность;
	
	Отбор = Новый Массив;
	Для а = 0 По ТЧ.Количество() -1 Цикл
		
		Отбор.Добавить(ТЧ[а].КлючеваяОперация);
		
	КонецЦикла;
	
	Структура = Новый Структура("Отбор");
	Структура.Отбор = Отбор;
	
	ТекущаяСтрока = Элементы.Производительность.ТекущиеДанные;
	КлючеваяОперация = ОткрытьФормуМодально("Перечисление.КлючевыеОперации.ФормаВыбора", Структура, ЭтаФорма);
	
	Если КлючеваяОперация = Неопределено Тогда
		Врем = Элементы.Производительность.ТекущиеДанные;
		Если Врем = Неопределено ИЛИ ЗначениеЗаполнено(Врем.КлючеваяОперация) Тогда
			Возврат;
		КонецЕсли;
		ТЧ.Удалить(Врем.НомерСтроки - 1);
		Возврат;
	КонецЕсли;
	
	ПредопределенныйЭлемент = ОценкаПроизводительностиВызовСервера.ПолучитьПредопределенный();
	ТекущаяСтрока.КлючеваяОперация = КлючеваяОперация;
	ТекущаяСтрока.ЦелевоеВремя = 0;
	
	Если КлючеваяОперация = ПредопределенныйЭлемент Тогда
		ТекущийИндекс = ТекущаяСтрока.НомерСтроки - 1;
		ТЧ.Сдвинуть(ТекущийИндекс, ТЧ.Количество() - 1 - ТекущийИндекс);
	Иначе
		МассивСтрок = ТЧ.НайтиСтроки(Новый Структура("КлючеваяОперация", ПредопределенныйЭлемент));
		Если ЗначениеЗаполнено(МассивСтрок) Тогда
			ТекущийИндекс = ТЧ.Индекс(МассивСтрок[0]);
			ТЧ.Сдвинуть(ТекущийИндекс, ТЧ.Количество() - 1 - ТекущийИндекс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция получает имя файла по указанному времени
//
//
// Параметры:
//  Время - ДатаВремя
//
// Возвращаемое значение:
//  Строка - Имя файла
//
&НаСервереБезКонтекста
Функция ИмяФайлаПоВремени(Время)
	
	Возврат Формат(Время, "ДФ=""гггг-ММ-дд ЧЧ-мм-сс""");
	
КонецФункции // ИмяФайлаПоВремени()

// Процедура удаляет каталог на сервере
//
&НаСервереБезКонтекста
Процедура УдалитьФайлыНаСервере(Каталог)
	
	Попытка
		УдалитьФайлы(Каталог);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Функция возвращает цвет значения Неприемлимо
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветНеприемлимо()
	
	Возврат Новый Цвет(187, 187, 187);
	
КонецФункции

// Функция возвращает цвет значения Плохо
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветПлохо()
	
	Возврат Новый Цвет(255, 212, 171);
	
КонецФункции

// Функция возвращает цвет значения Удовлетворительно
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветУдовлетворительно()
	
	Возврат Новый Цвет(255, 255, 153);
	
КонецФункции

// Функция возвращает цвет значения Хорошо
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветХорошо()
	
	Возврат Новый Цвет(204, 255, 204);
	
КонецФункции

// Функция возвращает цвет значения Отлично
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветОтлично()
	
	Возврат Новый Цвет(204, 255, 255);
	
КонецФункции

// Функция возвращает соответствие, в котором 
// Ключ - Строка, оценка производительности
// Значение - Структура, параметры оценки
//
// Возвращаемое значение:
//  Соответствие
//
&НаСервереБезКонтекста
Функция ПолучитьСоответствие()
	
	Соответствие = Новый Соответствие;
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.001; // 0 означает что операция не выполнялась вообще
	Значения.До = 0.5;
	Значения.Цвет = ЦветНеприемлимо();
	Соответствие.Вставить("Неприемлимо", Значения);
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.5;
	Значения.До = 0.7;
	Значения.Цвет = ЦветПлохо();
	Соответствие.Вставить("Плохо", Значения);
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.7;
	Значения.До = 0.85;
	Значения.Цвет = ЦветУдовлетворительно();
	Соответствие.Вставить("Удовлетворительно", Значения);
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.85;
	Значения.До = 0.94;
	Значения.Цвет = ЦветХорошо();
	Соответствие.Вставить("Хорошо", Значения);
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.94;
	Значения.До = 1.002; // т.к. в условном оформлении к значению "До" применяется условие "Меньше", а не "МеньшеИлиРавно"
	Значения.Цвет = ЦветОтлично();
	Соответствие.Вставить("Отлично", Значения);
	
	Возврат Соответствие;
	
КонецФункции

// Функция проверяет правильность настроек формы
//
// Возварщаемое значение:
//  Истина - настройки верны
//  Ложь - Настройки не верны
//
&НаСервере
Функция НастройкаВыполнена()
	
	Выполнена = Истина;
	Для Каждого СтрокаТЧ Из Объект.Производительность Цикл
		
		Если СтрокаТЧ.ЦелевоеВремя = 0 
			И СтрокаТЧ.КлючеваяОперация <> ОценкаПроизводительностиВызовСервера.ПолучитьПредопределенный()
			Тогда
			СП = Новый СообщениеПользователю;
			СП.ПутьКДанным = "Объект";
			СП.Поле = "Производительность[" + Объект.Производительность.Индекс(СтрокаТЧ) + "].ЦелевоеВремя";
			СП.Текст = "Целевое время обязательно должно быть заполнено.";
			СП.Сообщить();
			
			Выполнена = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Выполнена;
	
КонецФункции


