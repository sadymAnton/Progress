
Перем мМассивПараметровПечати;

Функция ПоискЮрАдреса(фОрганизация, ВидКО)
	
	фАдресОрг = Новый Структура;
	фАдресОрг.Вставить("Индекс",  "");
	фАдресОрг.Вставить("ЮрАдрес",  "");
	
	фЗапрос = Новый Запрос;
	фЗапрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	КонтактнаяИнформация.Объект,
	                |	КонтактнаяИнформация.Тип,
	                |	КонтактнаяИнформация.Вид,
	                |	КонтактнаяИнформация.Представление КАК ЮрАдрес,
	                |	КонтактнаяИнформация.Поле1 КАК Индекс
	                |ИЗ
	                |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                |ГДЕ
	                |	КонтактнаяИнформация.Объект = &Организация
	                |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	                |	И КонтактнаяИнформация.Вид.Наименование ПОДОБНО """ + ВидКО + """";
	фЗапрос.УстановитьПараметр("Организация", фОрганизация);
	фРезАдрес = фЗапрос.Выполнить().Выбрать();
	Если НЕ фРезАдрес.Количество() = 0 Тогда
		фРезАдрес.Следующий();
		фАдресОрг.Очистить();
		
		//сообщить(фРезАдрес.Объект);
		//сообщить(фРезАдрес.ЮрАдрес);
		
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(фРезАдрес.Индекс) Тогда
			фАдресОрг.Вставить("Индекс",  СокрЛП(фРезАдрес.Индекс));
			фАдресОрг.Вставить("ЮрАдрес",  "РОССИЯ, "+СтрЗаменить(СокрЛП(фРезАдрес.ЮрАдрес),СокрЛП(фРезАдрес.Индекс)+",","") );
		Иначе
			фАдресОрг.Вставить("Индекс",  "");
			фАдресОрг.Вставить("ЮрАдрес",  СокрЛП(фРезАдрес.ЮрАдрес) );
		КонецЕсли;
	КонецЕсли;
			
	Возврат фАдресОрг;
	
КонецФункции

Функция ПоискКонтЛица(фОрганизация, ВидКО)
	
	фКонтЛицо = "";
	фТелефон = "";
	фКонтИнфо = Новый Структура;
	фКонтИнфо.Вставить("КонтЛицо",  "");
	фКонтИнфо.Вставить("Телефон",  "");
	
	фЗапрос = Новый Запрос;
	фЗапрос.Текст = "ВЫБРАТЬ
	                |	КонтактныеЛицаКонтрагентов.Ссылка,
	                |	КонтактныеЛицаКонтрагентов.Владелец,
	                |	КонтактнаяИнформация.Объект КАК КонтЛицо,
	                |	КонтактнаяИнформация.Тип,
	                |	КонтактнаяИнформация.Вид,
	                |	КонтактнаяИнформация.Представление КАК Телефон,
	                |	КонтактнаяИнформация.Поле1 КАК Индекс
	                |ИЗ
	                |	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	                |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                |		ПО (КонтактнаяИнформация.Объект = КонтактныеЛицаКонтрагентов.Ссылка)
	                |ГДЕ
	                |	КонтактныеЛицаКонтрагентов.Владелец = &Организация
	                |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	                |	И КонтактнаяИнформация.Вид.Наименование ПОДОБНО """ + ВидКО + """";          

	Если ТипЗнч(фОрганизация) = Тип("СправочникСсылка.Пользователи") Тогда
		фЗапрос.Текст = "ВЫБРАТЬ
		                |	КонтактнаяИнформация.Объект КАК КонтЛицо,
		                |	КонтактнаяИнформация.Тип,
		                |	КонтактнаяИнформация.Вид,
		                |	КонтактнаяИнформация.Представление КАК Телефон,
	                    |	КонтактнаяИнформация.Поле1 КАК Индекс
		                |ИЗ
		                |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		                |ГДЕ
		                |	КонтактнаяИнформация.Объект = &Организация
		                |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		                |	И КонтактнаяИнформация.Вид.Наименование ПОДОБНО """ + ВидКО + """";
	КонецЕсли;
	фЗапрос.УстановитьПараметр("Организация", фОрганизация);
	фРезАдрес = фЗапрос.Выполнить().Выгрузить();
	Если НЕ фРезАдрес.Количество() = 0 Тогда
		фКонтИнфо.Очистить();
		
		ТабКопия = фРезАдрес.Скопировать();
		ТабКопия.Свернуть("КонтЛицо");
		Для Каждого ТекСтрока Из ТабКопия Цикл
			//Сообщить(ТекСтрока.КонтЛицо);
			фКонтЛицо = СокрЛП(ТекСтрока.КонтЛицо) + "; " + фКонтЛицо;
		КонецЦикла;
		
		ТабКопия = фРезАдрес.Скопировать();
		ТабКопия.Свернуть("Телефон");
		Для Каждого ТекСтрока Из ТабКопия Цикл
			//Сообщить(ТекСтрока.Телефон);
			фТелефон = СокрЛП(ТекСтрока.Телефон) + "; " + фТелефон;
		КонецЦикла;
		
		фКонтИнфо.Вставить("КонтЛицо", СокрЛП(Лев(фКонтЛицо, СтрДлина(фКонтЛицо)-2)) );
		фКонтИнфо.Вставить("Телефон", СокрЛП(Лев(фТелефон, СтрДлина(фТелефон)-2)) );
		
	КонецЕсли;
			
	Возврат фКонтИнфо;
	
КонецФункции

Функция Печать(спПланДоставки = Неопределено, ВыводВФайл = Ложь, КаталогФайл = "", ТолькоЭксельФайлы = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Если спПланДоставки = Неопределено Тогда
		спПланДоставки = Новый Массив;
		спПланДоставки.Добавить(СсылкаНаОбъект); 
		
		//m.ionov@a-prof.ru 20.05.2015
		Форма = ПолучитьФорму("Форма");
		Форма.Открыть();
		
		Возврат Неопределено;
		//----m.ionov@a-prof.ru---
	КонецЕсли;
	ТабДокумент = Новый ТабличныйДокумент;
	
	Если НЕ ЗначениеЗаполнено(АП_ПечатныеФормыДокументов) И НЕ ДополнительныеПараметры = Неопределено Тогда
	
		ДополнительныеПараметры.Свойство("АП_ПечатныеФормыДокументов", АП_ПечатныеФормыДокументов);	
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(АП_ПечатныеФормыДокументов) Тогда
		
		мМассивПараметровПечати = АП_ОбщегоНазначенияКлиент.ПолучимНастройкиПечатнойФормы(СсылкаНаОбъект, СсылкаНаОбъект.Организация, АП_ПечатныеФормыДокументов);
		
	КонецЕсли;
	
	Рейс = Неопределено;
	ФильтрРейс = "";
	Если НЕ ДополнительныеПараметры = Неопределено Тогда
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			Если ДополнительныеПараметры.Свойство("Рейс", Рейс) Тогда 
				Если Рейс = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Рейс) Тогда 
					ФильтрРейс = "";
				Иначе
					ФильтрРейс = " И ПТЛ_ПланДоставки.Рейс = &Рейс ";
					Запрос.УстановитьПараметр("Рейс", Рейс);
				КонецЕсли; 
			КонецЕсли; 			
		КонецЕсли;
	КонецЕсли;
		
	Макет = ?(ВыводитьВремяДоставки, ПолучитьМакет("Макет"),ПолучитьМакет("Макет1"));
	
	ОбластьДанные	 = Макет.ПолучитьОбласть("Данные");
	
	ТабДокумент.Очистить();
	ТабДокумент.АвтоМасштаб			 = Истина;
	ТабДокумент.ИмяПараметровПечати	 = "Заявки на перевозчика сборных грузов";
	ТабДокумент.ОриентацияСтраницы	 = ОриентацияСтраницы.Портрет;
	//ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область(5, , 6, ); //Шапка_макета;
	ТабДокумент.ОтображатьЗаголовки	 = Ложь;
	ТабДокумент.ОтображатьСетку		 = Ложь;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПТЛ_ПланДоставки") Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Заказ КАК Заказ
		               |ПОМЕСТИТЬ ЗаказыВлож
		               |ИЗ
		               |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
		               |ГДЕ
		               |	ПТЛ_ПланДоставки.ПланДоставки В(&спСсылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗаказыВлож.Заказ,
		               |	ЗП.Количество,
		               |	ЗП.КоличествоМест,
		               |	ЗП.ВесБРУТТО,
		               |	ЗП.Объем,
		               |	ЗП.Стоимость
		               |ПОМЕСТИТЬ Заказы
		               |ИЗ
		               |	ЗаказыВлож КАК ЗаказыВлож
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ВложЗапр.Заказ КАК Заказ,
		               |			СУММА(ВложЗапр.Количество) КАК Количество,
		               |			СУММА(ВложЗапр.КоличествоМест) КАК КоличествоМест,
		               |			СУММА(ВложЗапр.ВесБРУТТО) КАК ВесБРУТТО,
		               |			СУММА(ВложЗапр.Объем) КАК Объем,
		               |			СУММА(ВложЗапр.Сумма) КАК Стоимость
		               |		ИЗ
		               |			(ВЫБРАТЬ
		               |				ЗаказПокупателя.Ссылка КАК Заказ,
		               |				ЗаказПокупателя.Количество КАК Количество,
		               |				ЗаказПокупателя.КоличествоМест КАК КоличествоМест,
		               |				ЗаказПокупателя.Количество * ЗаказПокупателя.ЕдиницаИзмерения.Вес КАК ВесБРУТТО,
		               |				ЗаказПокупателя.Количество * ЗаказПокупателя.ЕдиницаИзмерения.Объем КАК Объем,
		               |				ЗаказПокупателя.Сумма КАК Сумма
		               |			ИЗ
		               |				Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателя
		               |			
		               |			ОБЪЕДИНИТЬ ВСЕ
		               |			
		               |			ВЫБРАТЬ
		               |				ЗаказПокупателя.Ссылка,
		               |				ЗаказПокупателя.Количество,
		               |				ЗаказПокупателя.КоличествоМест,
		               |				ЗаказПокупателя.Количество * ЗаказПокупателя.ЕдиницаИзмерения.Вес,
		               |				ЗаказПокупателя.Количество * ЗаказПокупателя.ЕдиницаИзмерения.Объем,
		               |				0
		               |			ИЗ
		               |				Документ.ВнутреннийЗаказ.Товары КАК ЗаказПокупателя) КАК ВложЗапр
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			ВложЗапр.Заказ) КАК ЗП
		               |		ПО (ЗП.Заказ = ЗаказыВлож.Заказ)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   /// Кунов О.В., 10.11.2017 - 72638
					   |	МАКСИМУМ(Накладная.Заказ.КП_Отделение) КАК Отделение,
					   ///
		               |	МАКСИМУМ(Накладная.НакладнаяСсылка.Номер) КАК НомерНакладной,
		               |	МАКСИМУМ(Накладная.НакладнаяСсылка.Дата) КАК ДатаНакладной,
		               |	МАКСИМУМ(ВЫБОР КОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Заказ ССЫЛКА Документ.ЗаказПокупателя ТОГДА ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Заказ.Контрагент ИНАЧЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Заказ.Заказчик КОНЕЦ) КАК Получатель,
		               |	МАКСИМУМ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки.НСИ_Город) КАК ГородДоставки,
		               |	МАКСИМУМ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки.НСИ_АдресДоставки) КАК АдресДоставки,
					   
					   |	МАКСИМУМ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Заказ.Грузополучатель.ПТЛ_ВремяДоставкиС) КАК ВремяДоставкиС,
		               |	МАКСИМУМ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Заказ.Грузополучатель.ПТЛ_ВремяДоставкиПо) КАК ВремяДоставкиПо,
					   
		               |	СУММА(ПТЛ_ПланДоставки.КоличествоМест) КАК КолВоУпаковок,
		               |	СУММА(ПТЛ_ПланДоставки.ВесБрутто) КАК ВесБРУТТО,
		               |	СУММА(ПТЛ_ПланДоставки.Объем) КАК Объем,
		               |	СУММА(Накладная.Стоимость) КАК Стоимость,
		               |	СУММА(Накладная.Количество) КАК Количество,
		               |	СУММА(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ЗаданиеНаПодбор.КоличествоПаллетоМест) КАК КолВоПаллет,
		               |	МАКСИМУМ(ПТЛ_ПланДоставки.ДатаОтгрузки) КАК ДатаОтгрузки,
					   |	МАКСИМУМ(ПТЛ_ПланДоставки.ДатаДоставки) КАК ДатаДоставкиПлан,
		               |	МАКСИМУМ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Заказ.КП_ДатаДоставки) КАК ДатаДоставки,
					   //m.ionov@a-prof.ru 14.05.2015
					   |	МАКСИМУМ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ДатаДоставкиПлан) КАК ДатаДоставкиЗадание,
					   //----m.ionov@a-prof.ru---
		               |	МАКСИМУМ(ПТЛ_ПланДоставки.ВремяПодачиТС) КАК ВремяПодачиТС,
		               |	МАКСИМУМ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Организация) КАК Организация,
					   |	МАКСИМУМ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку) КАК ЗаданиеНаПеревозку,
		               |	МАКСИМУМ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Заказ.Грузополучатель) КАК АдресПоставки,
		               |	МАКСИМУМ(ПТЛ_ПланДоставки.ТЭК) КАК ТЭК,
		               |	ЕСТЬNULL(Накладная.Заказ, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК Заказ,
					   
		               |	ПТЛ_ПланДоставки.ПланДоставки.Ответственный КАК КонтЛицо
					   //++ НМА_Апроф 06.03.2015
					   |	, МАКСИМУМ(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.УсловиеПоставки) КАК УсловиеПоставки
					   //++ НМА_Апроф 06.03.2015
					   //Blik 060317 63043 н
					   |	, МАКСИМУМ(Выразить(ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Заказ.КП_КомментарийКДоставке КАК Строка(500))) КАК КомментарийКДоставке
					   //Blik 060317 63043 к
		               |ИЗ
		               |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
		               |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               //{17.06.2015 Островерхий заявка №б/н 
					   //|			ЗаказыВлож.Заказ КАК Заказ, 
					   |			Заказы.Заказ КАК Заказ,
					   //17.06.2015 Островерхий} 
		               |			Заказы.ВесБРУТТО КАК ВесБРУТТО,
		               |			Заказы.Объем КАК Объем,
		               |			Заказы.Стоимость КАК Стоимость,
		               |			Заказы.Количество КАК Количество,
		               |			ЗаказыВлож.НакладнаяСсылка КАК НакладнаяСсылка
		               |		ИЗ
		               |			(ВЫБРАТЬ
		               |				РТиУ.Ссылка.Сделка КАК Заказ,
		               |				МАКСИМУМ(РТиУ.Ссылка) КАК НакладнаяСсылка
		               |			ИЗ
		               |				Документ.РеализацияТоваровУслуг.Товары КАК РТиУ
		               |			ГДЕ
		               |				РТиУ.Ссылка.Проведен
		               |			
		               |			СГРУППИРОВАТЬ ПО
		               |				РТиУ.Ссылка.Сделка
		               |			
		               |			ОБЪЕДИНИТЬ ВСЕ
		               |			
		               |			ВЫБРАТЬ
		               |				ПТиУ.Ссылка.ВнутреннийЗаказ,
		               |				МАКСИМУМ(ПТиУ.Ссылка)
		               |			ИЗ
		               |				Документ.ПеремещениеТоваров.Товары КАК ПТиУ
		               |			ГДЕ
		               |				ПТиУ.Ссылка.Проведен
		               |			
		               |			СГРУППИРОВАТЬ ПО
		               |				ПТиУ.Ссылка.ВнутреннийЗаказ
					   //++ Spl_Апроф 06.02.2015 (k.russkih@a-prof.ru)
					   |			ОБЪЕДИНИТЬ ВСЕ
		               |			
		               |			ВЫБРАТЬ
		               |				ТребованиеНакладная.СП_ЗаданиеНаПодбор.Заказ,
		               |				МАКСИМУМ(ТребованиеНакладная.Ссылка)
		               |			ИЗ
		               |				Документ.ТребованиеНакладная КАК ТребованиеНакладная
		               |			ГДЕ
		               |				ТребованиеНакладная.Проведен
		               |			
		               |			СГРУППИРОВАТЬ ПО
		               |				ТребованиеНакладная.СП_ЗаданиеНаПодбор.Заказ) КАК ЗаказыВлож
		               //{17.06.2015 Островерхий заявка №б/н 
					   //|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Заказы КАК Заказы 
					   |				ПРАВОЕ СОЕДИНЕНИЕ Заказы КАК Заказы	 
					   //17.06.2015 Островерхий} 
		               |				ПО (Заказы.Заказ = ЗаказыВлож.Заказ)) КАК Накладная
		               |		ПО (Накладная.Заказ = ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Заказ)
		               |ГДЕ
		               |	ПТЛ_ПланДоставки.ПланДоставки В(&спСсылка)
		               |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ
					   //++ НМА_Апроф 06.03.2015
		               //|	И ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.ДоставкаДоТЭК)
					   //++ НМА_Апроф 06.03.2015
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Получатель,
		               |	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.АдресПоставки,
		               |	ПТЛ_ПланДоставки.Маршрут,
		               |	ЕСТЬNULL(Накладная.Заказ, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)),
		               |	ПТЛ_ПланДоставки.ПланДоставки.Ответственный
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПТЛ_ПланДоставки.Маршрут
		               |АВТОУПОРЯДОЧИВАНИЕ";
		Запрос.УстановитьПараметр("спСсылка", спПланДоставки);
		//Запрос.УстановитьПараметр("Организация", СсылкаНаОбъект.Организация);
		Рез = Запрос.Выполнить().Выбрать();
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	Накладные.Заказ,
		               |	Накладные.НакладнаяСсылка КАК НакладнаяСсылка
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		РТиУ.Ссылка.Сделка КАК Заказ,
		               |		РТиУ.Ссылка КАК НакладнаяСсылка
		               |	ИЗ
		               |		Документ.РеализацияТоваровУслуг.Товары КАК РТиУ
		               |	ГДЕ
		               |		РТиУ.Ссылка.Проведен
		               |		И РТиУ.Ссылка.Сделка = &Заказ
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ПТиУ.Ссылка.ВнутреннийЗаказ,
		               |		ПТиУ.Ссылка
		               |	ИЗ
		               |		Документ.ПеремещениеТоваров.Товары КАК ПТиУ
		               |	ГДЕ
		               |		ПТиУ.Ссылка.Проведен
		               |		И ПТиУ.Ссылка.ВнутреннийЗаказ = &Заказ
					   //++ Spl_Апроф 06.02.2015 (k.russkih@a-prof.ru)
					   |			ОБЪЕДИНИТЬ ВСЕ
		               |			
		               |			ВЫБРАТЬ
		               |				ТребованиеНакладная.СП_ЗаданиеНаПодбор.Заказ,
		               |				ТребованиеНакладная.Ссылка
		               |			ИЗ
		               |				Документ.ТребованиеНакладная КАК ТребованиеНакладная
		               |			ГДЕ
		               |				ТребованиеНакладная.Проведен И ТребованиеНакладная.СП_ЗаданиеНаПодбор.Заказ = &Заказ) КАК Накладные
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НакладнаяСсылка
		               |АВТОУПОРЯДОЧИВАНИЕ";
		
		Если НЕ Рез.Количество() = 0 Тогда
			Если ВыводВФайл Тогда 
				XML = Новый ЗаписьXML(); 
				XML.ОткрытьФайл(КаталогФайл, "Windows-1251"); 
				XML.ЗаписатьОбъявлениеXML(); 
				XML.ЗаписатьНачалоЭлемента("PlanDost");
			КонецЕсли; //Если ВыводВФайл Тогда
			
			Пока Рез.Следующий() Цикл
				//Заполнение инфо о плательщике
				//++ Spl_Апроф 08.06.2015 (k.russkih@a-prof.ru) Заменим
				//ОбластьДанные.Параметры.ПлательщикКод		 = СокрЛП(Рез.Организация.Код);
				//ОбластьДанные.Параметры.Плательщик			 = СокрЛП(Рез.Организация);
				//ОбластьДанные.Параметры.ПлательщикАдрес		 = СокрЛП(ПоискЮрАдреса(Рез.Организация, "%Юридич%").ЮрАдрес);
				//ОбластьДанные.Параметры.ПлательщикИндекс	 	 = СокрЛП(ПоискЮрАдреса(Рез.Организация, "%Юридич%").Индекс);
				//ОбластьДанные.Параметры.ПлательщикКЛТел		 = СокрЛП(ПоискКонтЛица(Рез.КонтЛицо, "%Теле%").Телефон);
				//ОбластьДанные.Параметры.ПлательщикКонтЛицо	 = СокрЛП(Рез.КонтЛицо);
				
				/// Кунов О.В., 13.11.2017 - 72638
				КодыПеревозчиковОтправитель = ОпределимКодыПеревозчиков(Отправитель, Рез.Отделение);
				///
				
				ОбластьДанные.Параметры.ПлательщикКод		 = СокрЛП(ОпределимКодыПеревозчиков(Плательщик, Рез.Отделение).КодПлательщика);
				ОбластьДанные.Параметры.Плательщик			 = СокрЛП(Плательщик);
				ОбластьДанные.Параметры.ПлательщикАдрес		 = СокрЛП(ПоискЮрАдреса(Плательщик, "%Юридич%").ЮрАдрес);
				ОбластьДанные.Параметры.ПлательщикИндекс	 = СокрЛП(ПоискЮрАдреса(Плательщик, "%Юридич%").Индекс);
				
				//начало изменений Ожиганов 30.06.2015 требование Юрия Помпушко 
				ОбластьДанные.Параметры.ПлательщикКонтЛицо	 = СокрЛП(ПРГ_ОпределимКонтактноеЛицо(Плательщик));
				ОбластьДанные.Параметры.ПлательщикКЛТел		 = ПРг_ПолучитьТелефонКонтЛица(ОбластьДанные.Параметры.ПлательщикКонтЛицо);
				//конец изменений  
				
				//++ Spl_Апроф 08.06.2015 (k.russkih@a-prof.ru)
				//Заполнение инфо об отправителе
				ОбластьДанные.Параметры.ОтправительКод		 = СокрЛП(ОпределимКодыПеревозчиков(Отправитель, Рез.Отделение).КодОтправителя);
				
				/// Кунов О.В., 13.11.2017 - 72638
				Если ЗначениеЗаполнено(КодыПеревозчиковОтправитель.АдресОтправителя) Тогда
					ОбластьДанные.Параметры.Отправитель			 = КодыПеревозчиковОтправитель.НаименованиеОтправителя;
					ОбластьДанные.Параметры.ОтправительАдрес	 = КодыПеревозчиковОтправитель.АдресОтправителя;
				Иначе
					ОбластьДанные.Параметры.Отправитель			 = СокрЛП(Отправитель);
					ОбластьДанные.Параметры.ОтправительАдрес	 = СокрЛП(ПоискЮрАдреса(Отправитель, "%Юридич%").ЮрАдрес);
				КонецЕсли;
				///
				
				ОбластьДанные.Параметры.ОтправительИндекс	 = СокрЛП(ПоискЮрАдреса(Отправитель, "%Юридич%").Индекс);
				
				//начало изменений Ожиганов 30.06.2015 требование Юрия Помпушко 
				//ОбластьДанные.Параметры.ОтправительКЛТел	 = СокрЛП(ОпределимКонтактноеЛицо(Отправитель, Истина));
				//ОбластьДанные.Параметры.ОтправительКонтЛицо	 = СокрЛП(ПРГ_ОпределимКонтактноеЛицо(Отправитель));
				
				/// Кунов О.В., 13.11.2017 - 72638
				Если ЗначениеЗаполнено(КодыПеревозчиковОтправитель.КонтактноеЛицоОтправителя) Тогда
					ОбластьДанные.Параметры.ОтправительКонтЛицо	 = КодыПеревозчиковОтправитель.КонтактноеЛицоОтправителя;
				Иначе
					ОбластьДанные.Параметры.ОтправительКонтЛицо	 = СокрЛП(ПРГ_ОпределимКонтактноеЛицо(Отправитель));
				КонецЕсли;
				///
				
				ОбластьДанные.Параметры.ОтправительКЛТел	 = ПРг_ПолучитьТелефонКонтЛица(ОбластьДанные.Параметры.ОтправительКонтЛицо);
				
				//конец изменений   
				
				//Заполнение инфо о месте отправления (ТЭК)
				//++ НМА_Апроф 06.03.2015
				//ОбластьДанные.Параметры.МестоОтпКод		 = СокрЛП(Рез.ТЭК.Код);
				//ОбластьДанные.Параметры.МестоОтп		 = СокрЛП(Рез.ТЭК);
				//ОбластьДанные.Параметры.МестоОтпАдрес	 = СокрЛП(ПоискЮрАдреса(Рез.ТЭК, "%Юридич%").ЮрАдрес);
				//ОбластьДанные.Параметры.МестоОтпИндекс	 = СокрЛП(ПоискЮрАдреса(Рез.ТЭК, "%Юридич%").Индекс);
				//ОбластьДанные.Параметры.МестоОтпКЛТел	 = СокрЛП(ПоискКонтЛица(Рез.ТЭК, "%Теле%").Телефон);
				//ОбластьДанные.Параметры.МестоОтпКонтЛицо = СокрЛП(ПоискКонтЛица(Рез.ТЭК, "%Теле%").КонтЛицо);
				//Если Рез.УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоТЭК Тогда
				//	ОбластьДанные.Параметры.МестоОтпКод		 = СокрЛП(Рез.ТЭК.Код);
				//	ОбластьДанные.Параметры.МестоОтп		 = СокрЛП(Рез.ТЭК);
				//	ОбластьДанные.Параметры.МестоОтпАдрес	 = СокрЛП(ПоискЮрАдреса(Рез.ТЭК, "%Юридич%").ЮрАдрес);
				//	ОбластьДанные.Параметры.МестоОтпИндекс	 = СокрЛП(ПоискЮрАдреса(Рез.ТЭК, "%Юридич%").Индекс);
				//	ОбластьДанные.Параметры.МестоОтпКЛТел	 = СокрЛП(ПоискКонтЛица(Рез.ТЭК, "%Теле%").Телефон);
				//	ОбластьДанные.Параметры.МестоОтпКонтЛицо = СокрЛП(ПоискКонтЛица(Рез.ТЭК, "%Теле%").КонтЛицо);
				//Иначе
				//	ОбластьДанные.Параметры.МестоОтпКод		 = СокрЛП("2000037");
				//	ОбластьДанные.Параметры.МестоОтп		 = СокрЛП("ЗАО ""ШЕНКЕР"" Львовский");
				//	ОбластьДанные.Параметры.МестоОтпАдрес	 = СокрЛП("пос. Львовский, ул Московская д.69");
				//	ОбластьДанные.Параметры.МестоОтпИндекс	 = СокрЛП("142155");
				//	ОбластьДанные.Параметры.МестоОтпКЛТел	 = СокрЛП("");
				//	ОбластьДанные.Параметры.МестоОтпКонтЛицо = СокрЛП("");
				//КонецЕсли;
				//++ НМА_Апроф 06.03.2015
				
				//++ Spl_Апроф 08.06.2015 (k.russkih@a-prof.ru)
				ОбластьДанные.Параметры.МестоОтпКод		 = СокрЛП(АдресПеревозчика.ПТЛ_КодКлиента);
				
				/// Кунов О.В., 13.11.2017 - 72638
				Если ЗначениеЗаполнено(КодыПеревозчиковОтправитель.НаименованиеМестаОтправления) Тогда
					ОбластьДанные.Параметры.МестоОтп		 = КодыПеревозчиковОтправитель.НаименованиеМестаОтправления;
				Иначе
					ОбластьДанные.Параметры.МестоОтп		 = СокрЛП(Перевозчик);
				КонецЕсли;
				///
				
				//начало изменений Ожиганов 30.06.2015 немножко оптимизируем 
				//ОбластьДанные.Параметры.МестоОтпАдрес	 = СокрЛП(ПолучимКИ_ПоОбъекту(АдресПеревозчика, Справочники.ВидыКонтактнойИнформации.АП_ЮрАдресАдресаПоставки).Представление);
				//ОбластьДанные.Параметры.МестоОтпИндекс	 = СокрЛП(ПолучимКИ_ПоОбъекту(АдресПеревозчика, Справочники.ВидыКонтактнойИнформации.АП_ЮрАдресАдресаПоставки).Индекс);
				ОбластьДанные.Параметры.МестоОтпАдрес	 = СокрЛП(ПолучимКИ_ПоОбъекту(АдресПеревозчика, Справочники.ВидыКонтактнойИнформации.АП_ФактАдресАдресаПоставки).Представление);
				ОбластьДанные.Параметры.МестоОтпИндекс	 = СокрЛП(ПолучимКИ_ПоОбъекту(АдресПеревозчика, Справочники.ВидыКонтактнойИнформации.АП_ФактАдресАдресаПоставки).Индекс);
				//конец изменений  
				//начало изменений Ожиганов 30.06.2015 требование Юрия Помпушко 
				ОбластьДанные.Параметры.МестоОтпКонтЛицо = ПРГ_ПолучитьКонтакноеЛицоАП(АдресПеревозчика);
				ОбластьДанные.Параметры.МестоОтпКЛТел	 = ПРг_ПолучитьТелефонКонтЛица(ОбластьДанные.Параметры.МестоОтпКонтЛицо);
				//конец изменений  
				
				//Заполнение инфо о получателе (клиент)
				//ОбластьДанные.Параметры.ПолучательКод		 = СокрЛП(Рез.Получатель.Код);
				//ОбластьДанные.Параметры.Получатель			 = СокрЛП(Рез.Получатель);
				//ОбластьДанные.Параметры.ПолучательАдрес		 = СокрЛП(ПоискЮрАдреса(Рез.Получатель, "%Юридич%").ЮрАдрес);
				//ОбластьДанные.Параметры.ПолучательИндекс	 = СокрЛП(ПоискЮрАдреса(Рез.Получатель, "%Юридич%").Индекс);
				//ОбластьДанные.Параметры.ПолучательКЛТел		 = СокрЛП(ПоискКонтЛица(Рез.Получатель, "%Теле%").Телефон);
				//ОбластьДанные.Параметры.ПолучательКонтЛицо	 = СокрЛП(ПоискКонтЛица(Рез.Получатель, "%Теле%").КонтЛицо);
				
				//++ Spl_Апроф 08.06.2015 (k.russkih@a-prof.ru)
				//начало изменений Ожиганов 30.06.2015 немножко оптимизируем 
				//ОбластьДанные.Параметры.ПолучательКод		 = СокрЛП(ОпределимКодыПеревозчиков(Перевозчик).КодПолучателя);
				//Blik 060717 67829 н
				//ОбластьДанные.Параметры.ПолучательКод		 = СокрЛП(ОпределимКодыПеревозчиков(Рез.Получатель).КодПолучателя);
				//Blik 100717 67829 н
				//ЭтоМетро = Справочники.ПРГ_Служебный.НайтиПоРеквизиту("Объект",Рез.ЗаданиеНаПеревозку.Получатель);
				ЭтоМетро = Справочники.ПРГ_Служебный.НайтиПоРеквизиту("Объект",Рез.Получатель);
				//Blik 100717 67829 к
				Если не ЭтоМетро = Справочники.ПРГ_Служебный.ПустаяСсылка() тогда
					//СокрЛП(СТрока(Рез.ЗаданиеНаПеревозку.Получатель.Код)) = "FN-000007891" Тогда
					ОбластьДанные.Параметры.ПолучательКод		 = СокрЛП(Рез.АдресПоставки.ПТЛ_КодКлиента);
				Иначе
					ОбластьДанные.Параметры.ПолучательКод		 = СокрЛП(ОпределимКодыПеревозчиков(Рез.Получатель, Рез.Отделение).КодПолучателя);
				Конецесли;
				//Blik 060717 67829 к
				//конец изменений  
				ОбластьДанные.Параметры.Получатель			 = СокрЛП(Рез.Получатель);
				Если ТипЗнч(Рез.Получатель) = Тип("СправочникСсылка.Склады") Тогда
					ОбластьДанные.Параметры.ПолучательАдрес		 = СокрЛП(ПолучимКИ_ПоОбъекту(Рез.Получатель.НСИ_АП, Справочники.ВидыКонтактнойИнформации.АП_ФактАдресАдресаПоставки).Представление);
					ОбластьДанные.Параметры.ПолучательИндекс	 = СокрЛП(ПолучимКИ_ПоОбъекту(Рез.Получатель.НСИ_АП, Справочники.ВидыКонтактнойИнформации.АП_ФактАдресАдресаПоставки).Индекс);
					//начало изменений Ожиганов 30.06.2015 требование Юрия Помпушко 
					ОбластьДанные.Параметры.ПолучательКЛТел		 = ОбластьДанные.Параметры.ОтправительКЛТел;
					ОбластьДанные.Параметры.ПолучательКонтЛицо	 = ОбластьДанные.Параметры.ПлательщикКонтЛицо;
					//конец изменений  
				Иначе	
					ОбластьДанные.Параметры.ПолучательАдрес		 = СокрЛП(ПолучимКИ_ПоОбъекту(Рез.Получатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента).Представление);
					ОбластьДанные.Параметры.ПолучательИндекс	 = СокрЛП(ПолучимКИ_ПоОбъекту(Рез.Получатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента).Индекс);
					//начало изменений Ожиганов 30.06.2015 требование Юрия Помпушко 
					ОбластьДанные.Параметры.ПолучательКонтЛицо	 = ПРГ_ПолучитьКонтакноеЛицоАП(Рез.АдресПоставки);
					ОбластьДанные.Параметры.ПолучательКЛТел		 = ПРг_ПолучитьТелефонКонтЛица(ОбластьДанные.Параметры.ПолучательКонтЛицо);
					//конец изменений  
					
				КонецЕсли; 
				//начало изменений Ожиганов 30.06.2015 требование Юрия Помпушко 
				//ОбластьДанные.Параметры.ПолучательКЛТел		 = ОбластьДанные.Параметры.ОтправительКЛТел;
				//ОбластьДанные.Параметры.ПолучательКонтЛицо	 = ОбластьДанные.Параметры.ПлательщикКонтЛицо;
				//конец изменений  
	
				//Заполнение инфо о месте доставки (клиент)
				//m.ionov@a-prof.ru 20.03.2015
				//ОбластьДанные.Параметры.МестоДоставкиКод		 = СокрЛП(Рез.Получатель.Код);
				ОбластьДанные.Параметры.МестоДоставкиКод		 = СокрЛП(Рез.АдресПоставки.ПТЛ_КодКлиента);
				//----m.ionov@a-prof.ru---
				ОбластьДанные.Параметры.МестоДоставки			 = СокрЛП(Рез.Получатель);
				ОбластьДанные.Параметры.МестоДоставкиАдрес		 = СокрЛП(ПолучимКИ_ПоОбъекту(Рез.АдресПоставки, Справочники.ВидыКонтактнойИнформации.АП_ФактАдресАдресаПоставки).Представление); //СокрЛП(Рез.ГородДоставки) + ", " + СокрЛП(Рез.АдресДоставки);
				ОбластьДанные.Параметры.МестоДоставкиИндекс		 = СокрЛП(ПолучимКИ_ПоОбъекту(Рез.АдресПоставки, Справочники.ВидыКонтактнойИнформации.АП_ФактАдресАдресаПоставки).Индекс); //СокрЛП("");
				//начало изменений Ожиганов 30.06.2015 требование Юрия Помпушко 
				ОбластьДанные.Параметры.МестоДоставкиКонтЛицо	 = ПРГ_ПолучитьКонтакноеЛицоАП(Рез.АдресПоставки);
				ОбластьДанные.Параметры.МестоДоставкиКЛТел		 = ПРг_ПолучитьТелефонКонтЛица(ОбластьДанные.Параметры.МестоДоставкиКонтЛицо);
				//конец изменений  
				
				//Информация о грузе
				ОбластьДанные.Параметры.КолВоПаллет	 = Формат(Рез.КолВоПаллет, "ЧГ=0");
				//m.ionov@a-prof.ru 06.05.2015
				//ОбластьДанные.Параметры.ВесБрутто	 = Формат(Рез.ВесБРУТТО, "ЧГ=0");
				ОбластьДанные.Параметры.ВесБрутто	 = Формат(Рез.ВесБРУТТО*1000, "ЧГ=0");
				//----- m.ionov@a-prof.ru 
				ОбластьДанные.Параметры.Объем		 = Формат(Рез.Объем, "ЧГ=0");
				ОбластьДанные.Параметры.Сумма		 = Формат(Рез.Стоимость, "ЧГ=0");
				
				ОбластьДанные.Параметры.ДопСтраховка = СокрЛП("");
				ОбластьДанные.Параметры.СрКонтроля	 = СокрЛП("");
				
				//m.ionov@a-prof.ru 07/06/2015
				ОбластьДанные.Параметры.Наименование1 = СокрЛП("детское питание");
				ОбластьДанные.Параметры.Наименование2 = СокрЛП("продукты");
				
				ОбластьДанные.Параметры.ДопСтраховка = СокрЛП("нет");
				ОбластьДанные.Параметры.СрКонтроля	 = СокрЛП("логоскотч");
				//----- m.ionov@a-prof.ru 07/06/2015              						
				
				//Информация о перевозке
				мНомераНакладных = "";
				Запрос.УстановитьПараметр("Заказ", Рез.Заказ);
				Рез_Накл = Запрос.Выполнить().Выбрать();
				Пока Рез_Накл.Следующий() Цикл
					мНомераНакладных = мНомераНакладных + СокрЛП(Рез_Накл.НакладнаяСсылка.Номер) + ", ";
				КонецЦикла;
				мНомераНакладных = ЛЕВ(мНомераНакладных, СтрДлина(мНомераНакладных)-2);
				
				//m.ionov@a-prof.ru 07/06/2015              						
				//ОбластьДанные.Параметры.ДатаЗагрузки	 = Формат(Рез.ДатаОтгрузки, "ДЛФ=Д");
				//ОбластьДанные.Параметры.ВремяЗагрузки	 = Формат(Рез.ВремяПодачиТС, "ДЛФ=T");
				ОбластьДанные.Параметры.ДатаЗагрузки	 = Формат(Рез.ДатаДоставкиПлан, "ДЛФ=Д");
				// ОбластьДанные.Параметры.ВремяЗагрузки	 = Формат(Рез.ДатаДоставкиПлан, "ДЛФ=T"); // #67993 Шевченков 20170426
				ОбластьДанные.Параметры.ВремяЗагрузки	 = "с 10 до 15";                              // #67993 Шевченков 20170426
				//----- m.ionov@a-prof.ru 07/06/2015              						
				ОбластьДанные.Параметры.ТемпРежим		 = ?(Рез.ЗаданиеНаПеревозку.ТемпературныйРежим,СокрЛП("да"),СокрЛП("нет"));
				ОбластьДанные.Параметры.ВозвратДок		 = СокрЛП("да – «при выгрузке»");     
				
				//m.ionov@a-prof.ru 07/06/2015              						
				//ОбластьДанные.Параметры.НакладнаяНомер	 = СокрЛП(мНомераНакладных);
				//ОбластьДанные.Параметры.ЗаказНомер		 = СокрЛП(Рез.Заказ.Номер);
				//{07.04.2016 Островерхий заявка №51145 
				//ОбластьДанные.Параметры.НакладнаяНомер	 = СокрЛП(Рез.Заказ.Номер); 
				//07.04.2016 Островерхий} 
				Если ТипЗнч(Рез.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					ОбластьДанные.Параметры.ЗаказНомер		 = СокрЛП(Рез.Заказ.НомерПоДаннымПокупателя);
				Иначе
					ОбластьДанные.Параметры.ЗаказНомер		 = СокрЛП("");
				КонецЕсли;
				//----- m.ionov@a-prof.ru 07/06/2015              						
				ОбластьДанные.Параметры.ДатаДоставкиПлан = Формат(Рез.ДатаДоставки, "ДЛФ=Д");
				//m.ionov@a-prof.ru 14.05.2015
				//ОбластьДанные.Параметры.Комментарий		 = СокрЛП("ДОСТАВКА СТРОГО ДО 17-00. Отметка и возврат накладных обязательны");
				ОбластьДанные.Параметры.СправочныеНомера = СокрЛП(Рез.АдресПоставки.КодПеревозчика);
				//Blik 131016 58008 н
				Если СокрЛП(СТрока(Рез.ЗаданиеНаПеревозку.Получатель.Код)) = "FN-000002922" Тогда
					ДопТекст = "Дополнительная услуга – выгрузка силами АО «ШЕНКЕР»";
					ДопПостТекст = СокрЛП(Строка(СтрЗаменить(Рез.КомментарийКДоставке,Символы.ПС," ")));
					//Blik 210617 67072 н
					//Blik 230617 67152 н  //попросили вернуть как было
					ОбластьДанные.Параметры.Комментарий		 = СокрЛП(Строка(Рез.Заказ.Номер))+". "+ДопТекст+"."+Символы.ПС+ДопПостТекст;
					//ОбластьДанные.Параметры.Комментарий		 = ДопТекст+"."+Символы.ПС+ДопПостТекст;
					//Blik 230617 67152 r
					//Blik 210617 67072 к
					//Blik 310517 66208 н
					ОбластьДанные.Параметры.НакладнаяНомер	 = СокрЛП(Рез.Заказ.Номер);
					//Blik 310517 66208 к
				Иначе
					ОбластьДанные.Параметры.Комментарий		 = СокрЛП(Рез.Заказ.Номер);
				КонецЕсли;
				//Blik 131016 58008 к
				//----m.ionov@a-prof.ru---
				
				//m.ionov@a-prof.ru 07/06/2015
				//ОбластьДанные.Параметры.Тариф			 = СокрЛП("Стандартный");
				ОбластьДанные.Параметры.Тариф			 = СокрЛП("Стандарт");
				//------ m.ionov@a-prof.ru 07/06/2015
				
				// <- Шевченков 20170424 #64894				
				Если ВыводитьВремяДоставки Тогда  // 65034
					ОбластьДанные.Параметры.ВремяДоставкиС  = ?(ЗначениеЗаполнено(Рез.ВремяДоставкиС),Формат(Рез.ВремяДоставкиС, "ДФ=Ч"), "");
					ОбластьДанные.Параметры.ВремяДоставкиПо = ?(ЗначениеЗаполнено(Рез.ВремяДоставкиПо),Формат(Рез.ВремяДоставкиПо, "ДФ=Ч"), "");
				КонецЕсли;				
				// ->				
				
				Если ВыводВФайл Тогда
					XML.ЗаписатьНачалоЭлемента("Order");     //Заказ
					XML.ЗаписатьНачалоЭлемента("Invoice");   //РТиУ
					//m.ionov@a-prof.ru 14.05.2015
					//XML.ЗаписатьАтрибут("WBID1",		 СокрЛП(Рез.НомерНакладной));          //Номер РТиУ
					//XML.ЗаписатьАтрибут("DocNo",		 СокрЛП(Рез.НомерНакладной));          //Номер РТиУ
					//XML.ЗаписатьАтрибут("Date",			 Формат(Рез.ДатаНакладной, "ДЛФ=Д"));  //Дата РТиУ
					XML.ЗаписатьАтрибут("WBID1",		 СокрЛП(Рез.Заказ.Номер));          //Номер задания
					XML.ЗаписатьАтрибут("DocNo",		 СокрЛП(Рез.Заказ.Номер));          //Номер задания					                                            					
					XML.ЗаписатьАтрибут("Date",			 Формат(Рез.ДатаОтгрузки, "ДЛФ=Д"));  //Плановая дата отгрузки из задания на перевозку
					//----m.ionov@a-prof.ru---					
					//m.ionov@a-prof.ru 20.03.2015
					//XML.ЗаписатьАтрибут("PointId",		 СокрЛП(Рез.Получатель.Код));          //Код контрагента-получателя
					XML.ЗаписатьАтрибут("PointId",		 СокрЛП(Рез.АдресПоставки.ПТЛ_КодКлиента));          //Код контрагента-получателя
					//----m.ionov@a-prof.ru---
					XML.ЗаписатьАтрибут("PointName",	 СокрЛП(Рез.Получатель)+" в "+СокрЛП(Рез.ГородДоставки) + ", " + СокрЛП(Рез.АдресДоставки));	 //Контрагент-получатель
					//m.ionov@a-prof.ru 14.05.2015
					//XML.ЗаписатьАтрибут("SupplyDate",	 Формат(Рез.ДатаДоставки, "ДЛФ=Д"));   //Дата доставки из заказа
					XML.ЗаписатьАтрибут("SupplyDate",	 Формат(Рез.ДатаДоставкиЗадание, "ДЛФ=Д"));   //Дата доставки из задания					
					//----m.ionov@a-prof.ru---
					XML.ЗаписатьАтрибут("PalletQnt",	 Формат(Рез.КолВоПаллет, "ЧГ=0"));	   //Кол-во паллет
					//m.ionov@a-prof.ru 14.05.2015
					//XML.ЗаписатьАтрибут("PackQnt",		 Формат(Рез.Количество, "ЧГ=0"));      //Количество
					XML.ЗаписатьАтрибут("PackQnt",		 Формат(Рез.КолВоУпаковок, "ЧГ=0"));      //Количество мест
					//----m.ionov@a-prof.ru---
					XML.ЗаписатьАтрибут("Weight",		 Формат(Рез.ВесБРУТТО*1000, "ЧГ=0"));	   //Вес брутто
					XML.ЗаписатьАтрибут("Sum",			 Формат(Рез.Стоимость, "ЧГ=0"));	   //Стоимость
					XML.ЗаписатьКонецЭлемента(); // РТиУ 
					XML.ЗаписатьКонецЭлемента(); // Заказ 
				КонецЕсли; //Если ВыводВФайл Тогда
					
					
				ТабДокумент.Вывести(ОбластьДанные);
				//m.ionov@a-prof.ru 15.05.2015
				Если ТолькоЭксельФайлы Тогда
					//Нужно сохранить в Эксель файл по указанному каталогу
					ИмяФайла = СокрЛП(КаталогВыгрузки) + "\" + СокрЛП(Рез.Заказ.Номер) + ".xls";
					ТабДокумент.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
					Сообщить("Сформирован файл " + ИмяФайла);
					ТабДокумент.Очистить();
				Иначе
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
			КонецЦикла; //Пока Рез.Следующий() Цикл
			
			Если ВыводВФайл Тогда
				XML.ЗаписатьКонецЭлемента();
				XML.Закрыть(); 	
				Сообщить("Файл xml сформирован.");
			КонецЕсли; //Если ВыводВФайл Тогда
			
		Иначе
			ТабДокумент.Вывести(ОбластьДанные);
		КонецЕсли; //Если НЕ Рез.Количество() = 0 Тогда
		
	КонецЕсли;
		
	Возврат ТабДокумент;	
	
КонецФункции // ()

Функция ОпределимКонтактноеЛицо(Объект, Телефон = Ложь)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтактныеЛицаКонтрагентов.КонтактноеЛицо,
	               |	КонтактнаяИнформация.Представление КАК Телефон
	               |ИЗ
	               |	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ПО КонтактныеЛицаКонтрагентов.Ссылка = КонтактнаяИнформация.Объект
	               |			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
				   |			И (КонтактнаяИнформация.Вид = &Вид)
	               |ГДЕ
	               |	КонтактныеЛицаКонтрагентов.Владелец = &Владелец
	               |	И КонтактныеЛицаКонтрагентов.РольКонтактногоЛица = &РольКонтактногоЛица";
				   
	Запрос.УстановитьПараметр("Владелец", Объект);
	Запрос.УстановитьПараметр("РольКонтактногоЛица", Справочники.РолиКонтактныхЛиц.ОтветсвенныйПоЛогистике);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛицаКонтрагента);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
	
		Если Телефон Тогда		
			Возврат Результат.Телефон;			
		Иначе
			Возврат Результат.КонтактноеЛицо;
		КонецЕсли; 	
		
	КонецЕсли;
	
	Возврат "";

КонецФункции // ()

Функция ПРГ_ОпределимКонтактноеЛицо(Объект)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтактныеЛицаКонтрагентов.КонтактноеЛицо
	               |ИЗ
	               |	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	               |ГДЕ
	               |	КонтактныеЛицаКонтрагентов.Владелец = &Владелец
	               |	И КонтактныеЛицаКонтрагентов.РольКонтактногоЛица = &РольКонтактногоЛица
	               |	И НЕ КонтактныеЛицаКонтрагентов.ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("Владелец", Объект);
	Запрос.УстановитьПараметр("РольКонтактногоЛица", Справочники.РолиКонтактныхЛиц.ОтветсвенныйПоЛогистике);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛицаКонтрагента);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
	
			Возврат Результат.КонтактноеЛицо;

		
	КонецЕсли;
	
	Возврат "";

КонецФункции // ()


Функция ОпределимКодыПеревозчиков(Объект, Отделение = Неопределено)

	мСтруктура = Новый Структура; 
	мСтруктура.Вставить("КодПлательщика", "");
	мСтруктура.Вставить("КодОтправителя", "");
	мСтруктура.Вставить("КодПолучателя", "");
	
	/// Кунов О.В., 13.11.2017 - 72638
	мСтруктура.Вставить("АдресОтправителя", "");
	мСтруктура.Вставить("КонтактноеЛицоОтправителя", "");
	мСтруктура.Вставить("НаименованиеОтправителя", "");
	мСтруктура.Вставить("НаименованиеМестаОтправления", "");
	///
	
	Запрос = Новый Запрос;
	/// Кунов О.В., 10.11.2017 - 72638
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			   |	ПТЛ_КодыПеревозчиков.КодПлательщика,
	//			   |	ПТЛ_КодыПеревозчиков.КодОтправителя,
	//			   |	ПТЛ_КодыПеревозчиков.КодПолучателя
	//			   |ИЗ
	//			   |	РегистрСведений.ПТЛ_КодыПеревозчиков КАК ПТЛ_КодыПеревозчиков
	//			   |ГДЕ
	//			   |	ПТЛ_КодыПеревозчиков.Контрагент = &Контрагент";
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Вложенный.КодПлательщика,
	               |	Вложенный.КодОтправителя,
				   |	Вложенный.АдресОтправителя,
				   |	Вложенный.КонтактноеЛицоОтправителя,
				   |	Вложенный.НаименованиеОтправителя,
				   |	Вложенный.НаименованиеМестаОтправления,
	               |	Вложенный.КодПолучателя,
	               |	Вложенный.Приоритет
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПТЛ_КодыПеревозчиков.КодПлательщика 			КАК КодПлательщика,
	               |		ПТЛ_КодыПеревозчиков.КодОтправителя 			КАК КодОтправителя,
	               |		ПТЛ_КодыПеревозчиков.КодПолучателя 				КАК КодПолучателя,
				   |		ПТЛ_КодыПеревозчиков.АдресОтправителя 			КАК АдресОтправителя,
				   |		ПТЛ_КодыПеревозчиков.КонтактноеЛицоОтправителя 	КАК КонтактноеЛицоОтправителя,
				   |		ПТЛ_КодыПеревозчиков.НаименованиеОтправителя 	КАК НаименованиеОтправителя,
				   |		ПТЛ_КодыПеревозчиков.НаименованиеМестаОтправления КАК НаименованиеМестаОтправления,
	               |		ВЫБОР
	               |			КОГДА ПТЛ_КодыПеревозчиков.Отделение = &Отделение
	               |				ТОГДА 1
	               |			КОГДА ПТЛ_КодыПеревозчиков.Отделение = &ПустоеОтделение
	               |				ТОГДА 2
	               |		КОНЕЦ КАК Приоритет
	               |	ИЗ
	               |		РегистрСведений.ПТЛ_КодыПеревозчиков КАК ПТЛ_КодыПеревозчиков
	               |	ГДЕ
	               |		ПТЛ_КодыПеревозчиков.Контрагент = &Контрагент) КАК Вложенный
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Вложенный.Приоритет";
				   
	Запрос.УстановитьПараметр("ПустоеОтделение", Справочники.НСИ_Отделения.ПустаяСсылка());			   
	Запрос.УстановитьПараметр("Отделение", ? (Отделение = Неопределено, Справочники.НСИ_Отделения.ПустаяСсылка(), Отделение));
	///
				   
	Запрос.УстановитьПараметр("Контрагент", Объект);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
	
		Возврат Результат;	
	
	КонецЕсли; 
	
	Возврат мСтруктура;
	
КонецФункции // ()

Функция ПолучимКИ_ПоОбъекту(Объект, ВидКИ)
	
	мСтруктура = Новый Структура; 
	мСтруктура.Вставить("Представление", "");
	мСтруктура.Вставить("Индекс", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Поле1 КАК Индекс
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Вид", ВидКИ);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
	
		Возврат Результат;
	
	КонецЕсли; 
	
	Возврат мСтруктура;

КонецФункции // ()
 

//начало изменений Ожиганов 30.06.2015 требование Юрия Помпушко 
Функция ПРГ_ПолучитьКонтакноеЛицоАП(ВыбАп)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(КонтактныеЛицаКонтрагентовНСИ_АдресаДоставки.Ссылка) КАК Ссылка
	                      |ИЗ
	                      |	Справочник.КонтактныеЛицаКонтрагентов.НСИ_АдресаДоставки КАК КонтактныеЛицаКонтрагентовНСИ_АдресаДоставки
	                      |ГДЕ
	                      |	КонтактныеЛицаКонтрагентовНСИ_АдресаДоставки.АдресДоставки = &АдресДоставки
	                      |	И НЕ КонтактныеЛицаКонтрагентовНСИ_АдресаДоставки.Ссылка.ПометкаУдаления
	                      |	И КонтактныеЛицаКонтрагентовНСИ_АдресаДоставки.Ссылка.РольКонтактногоЛица = &РольКонтактногоЛица");
						  
	Запрос.УстановитьПараметр("АдресДоставки",ВыбАп);
	Запрос.УстановитьПараметр("РольКонтактногоЛица",Справочники.РолиКонтактныхЛиц.ОтветсвенныйПоЛогистике);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		возврат  Выборка.Ссылка;
	Иначе
		возврат Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции	

Функция ПРг_ПолучитьТелефонКонтЛица(КонтЛицо)
	
	Если ТипЗнч(КонтЛицо) <> Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
		возврат "";
	КонецЕслИ;	
	
	Если  Не ЗначениеЗаполнено(КонтЛицо) Тогда
		возврат "";
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КонтактнаяИнформация.Представление,
	                      |	КонтактнаяИнформация.Тип,
	                      |	КонтактнаяИнформация.Вид,
	                      |	ВЫБОР
	                      |		КОГДА КонтактнаяИнформация.Вид = &Вид1
	                      |			ТОГДА 1
	                      |		КОГДА КонтактнаяИнформация.Вид = &Вид2
	                      |			ТОГДА 2
	                      |		ИНАЧЕ 3
	                      |	КОНЕЦ КАК Порядок
	                      |ИЗ
	                      |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                      |ГДЕ
	                      |	КонтактнаяИнформация.Объект = &Объект
	                      |	И КонтактнаяИнформация.Тип = &Тип
	                      |	И КонтактнаяИнформация.Вид В(&Вид)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Порядок");
						  
	 Запрос.УстановитьПараметр("Объект",КонтЛицо);
	 Запрос.УстановитьПараметр("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон);
	 Вид1 = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛицаКонтрагента;
	 Вид2 = Справочники.ВидыКонтактнойИнформации.РабочийТелефонКонтактногоЛицаКонтрагента;
	 Запрос.УстановитьПараметр("Вид1",Вид1);
	 Запрос.УстановитьПараметр("Вид2",Вид2);
	 Виды = Новый Массив;
	 Виды.Добавить(Вид1);
	 Виды.Добавить(Вид2);
	 Запрос.УстановитьПараметр("Вид",Виды);
	 
	 Выборка = Запрос.Выполнить().Выбрать();
	 Если Выборка.Следующий() Тогда
		 возврат Выборка.Представление;
	 Иначе 
		 возврат "";
	 КонецЕсли; 
	 
КонецФункции	
//конец изменений  
 

мМассивПараметровПечати = Новый Массив;





