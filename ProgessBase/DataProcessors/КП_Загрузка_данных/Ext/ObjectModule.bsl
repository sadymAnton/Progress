
Перем мДатаОбработки;

Перем мТаблицаОтчета;
Перем мМакетОтчета;
Перем мТаймаут;
Перем мСтрокаСообщения;
Перем мКолвоОбъектов;

Перем ДокXML;
Перем ДокXMLConf;
Перем confirmations;
Перем ДокXMLConfLog;
Перем confGroup;

Перем мСтруктураНастройки;

Перем мИнфоКодДистрибьютора	Экспорт;
Перем мИнфоКомпания			Экспорт;
Перем мИнфоВерсия			Экспорт;
Перем мИнфоДата				Экспорт;
Перем мИнфоКаталогДанных	Экспорт;
Перем мИнфоИмяКомпьютера	Экспорт;
Перем мИмяПользователя		Экспорт;

Перем мИспользоватьСостояния	Экспорт;
Перем мИспользоватьЛогСообщений;
//Для работы ДОп Обработки
Перем мТипXMLБибилиотеки Экспорт;

Перем ЛогXML;
Перем groupLogXML;
Перем мСтрокаЧасовойПояс;

//***********************************************//
//дистрибьюторские переменные

Перем мКаталогНайстроек;

Перем мКонстантаСклад, мКонстантаВалюта, мКонстантаФирма, мКонстантаДистрибуторКод, мКонстантаКасса, мКонстантаТипЦен;
Перем мКонстантаОсновнойПокупатель, мКонстантаДатаСозданияДокумента,  мКонстантаУстанавливатьЦеныБазы, мКонстантаЗагружатьИзмененныеДокументы; 
Перем НашТекущийПользователь;

//*******************************************
//пПоказыватьВремя = (0 - не выводить; 1 - выводить время; 2 - выводить дату; 3 - выводить дату и время)
//пВыводить = (0 - в никуда; 1 - выводить на экран; 2 - выводить в файл; 3 - выводить и в файл и на экран; 4 = 3 + Предупредить)
Процедура СообщитьПодробно(пТекcтСообщения = "", пчОтступ = 1, пПоказыватьВремя = 0, пВыводить = 1, пСекция = "Информация") Экспорт
	
	Если (пПоказыватьВремя = 1) или (пПоказыватьВремя = 3) Тогда
		пТекcтСообщения = XMLВернутьВремя() + "  " + пТекcтСообщения;
	КонецЕсли;
	
	Если (пПоказыватьВремя = 2) или (пПоказыватьВремя = 3) Тогда
		пТекcтСообщения = XMLВернутьДату() + "  " + пТекcтСообщения;
	КонецЕсли;
	
	Для р = 1 По пчОтступ Цикл
		пТекcтСообщения = Символы.Таб + пТекcтСообщения;
	КонецЦикла;
	
	Если (пВыводить = 1) или (пВыводить = 3) или (пВыводить = 4) Тогда
#Если Клиент Тогда
		Сообщить(пТекcтСообщения);
#КонецЕсли
	КонецЕсли;
	
	Если (пВыводить = 4) Тогда
#Если Клиент Тогда
		Сообщить(пТекcтСообщения, мТаймаут);
#КонецЕсли
	КонецЕсли;
	
	Если (пВыводить = 2) или (пВыводить = 3) или (пВыводить = 4) Тогда
		отчДобавитьВОтчетСтроку(пТекcтСообщения, пСекция);
	КонецЕсли;
	
КонецПроцедуры	//СообщитьПодробно()


//*******************************************
Функция XMLВернутьДату(пДата = "", пОбратныйФормат = 0) Экспорт
	
	Если пДата = "" Тогда
		пДата	= ТекущаяДата();
	КонецЕсли;
	
	Если пОбратныйФормат = 1 Тогда
		лДата	= Формат(пДата, "ДФ=""гггг.ММ.дд""");
	Иначе
		лДата	= Формат(пДата, "ДФ=""дд.ММ.гггг""");
	КонецЕсли;
	
	Возврат лДата;
	
КонецФункции	//XMLВернутьДату()

//*******************************************
Функция XMLВернутьВремя(пДата = "") Экспорт
	
	Если пДата = "" Тогда
		пДата	= ТекущаяДата();
	КонецЕсли;
	
	лЧас	= Строка(Час(пДата));
	лМин	= Строка(Минута(пДата));
	лСек	= Строка(Секунда(пДата));
	
	лЧас	= ?(СтрДлина(лЧас) = 2, лЧас, "0" + лЧас);
	лМин	= ?(СтрДлина(лМин) = 2, лМин, "0" + лМин);
	лСек	= ?(СтрДлина(лСек) = 2, лСек, "0" + лСек);
	
	лВремя	= лЧас + ":" + лМин + ":" + лСек;
	
	Возврат лВремя;
	
КонецФункции	//XMLВернутьВремя()

//*******************************************
Функция XMLПолучитьДату(лВходнойПараметр) Экспорт
	
	лСтрДата	= "";
	лПозиция	= Найти(лВходнойПараметр, ".");
	Пока лПозиция > 0 Цикл
		лСтрДата	= Лев(лВходнойПараметр, лПозиция - 1) + ?(лСтрДата = "", "", "-") + лСтрДата;
		лВходнойПараметр	= Сред(лВходнойПараметр, лПозиция + 1);
		лПозиция	= Найти(лВходнойПараметр, ".");
	КонецЦикла;
	лСтрДата	= лВходнойПараметр + ?(лСтрДата = "", "", "-") + лСтрДата;
	
	Возврат лСтрДата;
	
КонецФункции	//XMLПолучитьДату()

//*******************************************
Функция ПолучитьДатуИзСтроки(пВходнойПараметр, пБезВремени = Ложь) Экспорт
	
	лДата	= "";
	
	лНачалоВремени	= Найти(пВходнойПараметр, ":") - 2;
	лСтрГод	= Сред(пВходнойПараметр, 1, 4); Если СтрДлина(лСтрГод) = 2 Тогда лСтрГод	= "20" + лСтрГод; КонецЕсли;
	лСтрМес	= Сред(пВходнойПараметр, 6, 2); Если СтрДлина(лСтрМес) = 1 Тогда лСтрМес	= "0" + лСтрМес; КонецЕсли;
	лСтрДен	= Сред(пВходнойПараметр, 9, 2); Если СтрДлина(лСтрДен) = 1 Тогда лСтрДен	= "0" + лСтрДен; КонецЕсли;
	
	Если пБезВремени Тогда
		лНачалоВремени	= 0;
	КонецЕсли;
	
	лСтрЧас	= Сред(пВходнойПараметр, 12, 2); Если СтрДлина(лСтрЧас) = 1 Тогда лСтрЧас	= "0" + лСтрЧас; КонецЕсли;
	лСтрМин	= Сред(пВходнойПараметр, 15, 2); Если СтрДлина(лСтрМин) = 1 Тогда лСтрМин	= "0" + лСтрМин; КонецЕсли;
	лСтрСек	= Сред(пВходнойПараметр, 18, 2); Если СтрДлина(лСтрСек) = 1 Тогда лСтрСек	= "0" + лСтрСек; КонецЕсли;
	
	лСтрЧас	= "0";	лСтрМин	= "0";	лСтрСек	= "0";
	Если лНачалоВремени > 10 Тогда
		лСтрЧас	= СокрЛП(Сред(пВходнойПараметр, лНачалоВремени, 2));
		Если СтрДлина(лСтрЧас) = 1 Тогда лСтрЧас	= "0" + лСтрЧас; КонецЕсли;
		
		лСтрМин	= СокрЛП(Сред(пВходнойПараметр, лНачалоВремени + 3, 2));
		Если СтрДлина(лСтрМин) = 1 Тогда лСтрМин	= "0" + лСтрМин; КонецЕсли;
		
		лСтрСек	= СокрЛП(Сред(пВходнойПараметр, лНачалоВремени + 6, 2));
		Если СтрДлина(лСтрСек) = 1 Тогда лСтрСек	= "0" + лСтрСек; КонецЕсли;
	КонецЕсли;
	Попытка
		лДата	= Дата(лСтрГод, лСтрМес, лСтрДен, лСтрЧас, лСтрМин, лСтрСек);
	Исключение
		СообщитьПодробно("Дата из строки """ + пВходнойПараметр + """ не определилась, была установлена текущая дата!", 2, 0, 2, "Ошибка");
		лДата	= ТекущаяДата();
	КонецПопытки;
	
	Возврат лДата;
	
КонецФункции	//ПолучитьДатуИзСтроки()

//*******************************************
Функция ПолучитьЧастьИмени(лВходнойПараметр1, лВходнойПараметр2) Экспорт
	
	лИмя	= "";
	
	Если лВходнойПараметр2 = "" Тогда
		лВходнойПараметр2 = 1;
	КонецЕсли;
	лСтрока	= СокрЛП(лВходнойПараметр1);
	
	Для р = 1 По Число(лВходнойПараметр2) Цикл
		лПозиция	= Найти(лСтрока, " ");
		Если лПозиция = 0 Тогда
			лИмя	= лСтрока;
			Прервать;
		КонецЕсли;
		
		лИмя	= Лев(лСтрока, лПозиция - 1);
		лСтрока	= СокрЛП(Сред(лСтрока, лПозиция + 1));
	КонецЦикла;
	
	Возврат лИмя;
	
КонецФункции	//ПолучитьЧастьИмени()

//*******************************************
Функция СТ_ЗначениеВСтрокуВнутр(пЭлемент) Экспорт
	
	Если пЭлемент = "" Тогда
		Возврат "";
	КонецЕсли;
	
	//{"#",47e6dd42-cd5c-4e3a-9bc4-14816ed53d38,31:00000000000000000000000000000000}
	
	лСтрока	= ЗначениеВСтрокуВнутр(пЭлемент);
	
	лДвоеточие	= Найти(лСтрока, ":");
	Если лДвоеточие > 0 Тогда
		лСтрока	= Сред(лСтрока, лДвоеточие+1);
	КонецЕсли;
	лСтрока	= СтрЗаменить(лСтрока, "}", "");
	
	Возврат лСтрока;
	
КонецФункции	//СТ_ЗначениеВСтрокуВнутр()

//*******************************************
Функция СТ_ЗначениеИзСтрокиВнутр(пКод, пВид = "", пТип = "Спр") Экспорт
	
	Если пВид = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Если пТип = "Спр" Тогда
		лЭлемент	= Справочники[пВид].ПустаяСсылка();
	ИначеЕсли пТип = "Док" Тогда
		лЭлемент	= Документы[пВид].ПустаяСсылка();
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если пКод = "" Тогда
		Возврат лЭлемент;
	КонецЕсли;
	
	лМаска	= ЗначениеВСтрокуВнутр(лЭлемент);
	
	//{"#",47e6dd42-cd5c-4e3a-9bc4-14816ed53d38,31:00000000000000000000000000000000}
	
	лСтрока		= СтрЗаменить(лМаска, "00000000000000000000000000000000", пКод);
	Попытка
		лЭлемент	= ЗначениеИзСтрокиВнутр(лСтрока);
	Исключение
		СообщитьПодробно("Значение (" + пВид + ") из строки """ + пКод + """ не определено!!", 2, 0, 2, "Ошибка");
	КонецПопытки;
	
	Возврат лЭлемент;
	
КонецФункции	//СТ_ЗначениеИзСтрокиВнутр()
Функция СТ_ЗначениеИзСтрокиВнутрТовар(пКод) Экспорт
	
	лЭлементТовар = Справочники.Номенклатура.ПустаяСсылка();
	лЭлементХарТовара = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	СтрВозвр = Новый Структура;
	СтрВозвр.Вставить("Товар",лЭлементТовар);
	СтрВозвр.Вставить("Характеристика",лЭлементХарТовара);
	
	Если пКод = "" Тогда
		Возврат СтрВозвр;
	КонецЕсли;
	
	лМаскаТ	= ЗначениеВСтрокуВнутр(лЭлементТовар);
	лМаскаХ	= ЗначениеВСтрокуВнутр(лЭлементХарТовара);
	
	//{"#",47e6dd42-cd5c-4e3a-9bc4-14816ed53d38,31:00000000000000000000000000000000}
	
	лСтрока		= СтрЗаменить(лМаскаТ, "00000000000000000000000000000000", пКод);
	Попытка
		лЭлементТовар	= ЗначениеИзСтрокиВнутр(лСтрока);
	Исключение
	КонецПопытки;
	
	Если лЭлементТовар.Наименование = "" тогда
		лСтрока		= СтрЗаменить(лМаскаХ, "00000000000000000000000000000000", пКод);
		Попытка
			лЭлементХарТовара	= ЗначениеИзСтрокиВнутр(лСтрока);
			лЭлементТовар = лЭлементХарТовара.Владелец;
		Исключение
			СообщитьПодробно("Значение  из строки """ + пКод + """ не определено!!", 2, 0, 2, "Ошибка");
		КонецПопытки;
	КонецЕсли;
	СтрВозвр.Товар = лЭлементТовар;
	СтрВозвр.Характеристика = лЭлементХарТовара;
	
	Возврат СтрВозвр;
	
КонецФункции	//СТ_ЗначениеИзСтрокиВнутр()
//****************************************
Функция ДобавитьВЗапросОтбор(пЗапрос, пИмя, пПервоеУсловие = Ложь, пИмяПеременной = "Ссылка", пДобавитьРодителей = Ложь) Экспорт
	
	ЭлементОтбора	= Отбор.Найти(пИмя);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Если НЕ ЭлементОтбора.Использование Тогда
		Возврат "";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭлементОтбора.Имя) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОтбора	= "
	|" + ?(пПервоеУсловие, "ГДЕ ", "И ") + пИмяПеременной + " ";
	пЗапрос.УстановитьПараметр("Отбор_" + ЭлементОтбора.Имя, ЭлементОтбора.Значение);
	
	лВидСравнения	= ЭлементОтбора.ВидСравнения;
	
	Если пДобавитьРодителей Тогда
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
			лСЗнОтборСРодителями	= Новый СписокЗначений();
			лСЗнОтборСРодителями	= ЭлементОтбора.Значение.Скопировать();
			Для Каждого лЗначениеСписка Из ЭлементОтбора.Значение Цикл
				лРодитель	= лЗначениеСписка.Значение.Родитель;
				Пока ЗначениеЗаполнено(лРодитель) Цикл
					Если лСЗнОтборСРодителями.НайтиПоЗначению(лРодитель) = Неопределено Тогда
						лСЗнОтборСРодителями.Добавить(лРодитель);
					КонецЕсли;
					лРодитель	= лРодитель.Родитель;
				КонецЦикла;
			КонецЦикла;
		Иначе
			лСЗнОтборСРодителями	= Новый СписокЗначений();
			лРодитель	= ЭлементОтбора.Значение;
			Пока ЗначениеЗаполнено(лРодитель) Цикл
				лСЗнОтборСРодителями.Добавить(лРодитель);
				лРодитель	= лРодитель.Родитель;
			КонецЦикла;
		КонецЕсли;
		пЗапрос.УстановитьПараметр("Отбор_" + ЭлементОтбора.Имя, лСЗнОтборСРодителями);
		
		Если лВидСравнения = ВидСравнения.Равно Тогда
			лВидСравнения	= ВидСравнения.ВСписке;
		ИначеЕсли лВидСравнения = ВидСравнения.НеРавно Тогда
			лВидСравнения	= ВидСравнения.НеВСписке;
		ИначеЕсли лВидСравнения = ВидСравнения.ВИерархии Тогда
			лВидСравнения	= ВидСравнения.ВСпискеПоИерархии;
		ИначеЕсли лВидСравнения = ВидСравнения.НеВИерархии Тогда
			лВидСравнения	= ВидСравнения.НеВСпискеПоИерархии;
		КонецЕсли;
	Иначе
		пЗапрос.УстановитьПараметр("Отбор_" + ЭлементОтбора.Имя, ЭлементОтбора.Значение);
	КонецЕсли;
	
	Если лВидСравнения = ВидСравнения.Равно Тогда
		ТекстОтбора	= ТекстОтбора + " = &Отбор_" + ЭлементОтбора.Имя;
	ИначеЕсли лВидСравнения = ВидСравнения.НеРавно Тогда
		ТекстОтбора	= ТекстОтбора + " <> &Отбор_" + ЭлементОтбора.Имя;
	ИначеЕсли лВидСравнения = ВидСравнения.ВСписке Тогда
		ТекстОтбора	= ТекстОтбора + " В (&Отбор_" + ЭлементОтбора.Имя + ")";
	ИначеЕсли лВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
		ТекстОтбора	= ТекстОтбора + " В ИЕРАРХИИ(&Отбор_" + ЭлементОтбора.Имя + ")";
	ИначеЕсли лВидСравнения = ВидСравнения.ВИерархии Тогда
		ТекстОтбора	= ТекстОтбора + " В ИЕРАРХИИ(&Отбор_" + ЭлементОтбора.Имя + ")";
	ИначеЕсли лВидСравнения = ВидСравнения.НеВСписке Тогда
		ТекстОтбора	= ТекстОтбора + " НЕ В (&Отбор_" + ЭлементОтбора.Имя + ")";
	ИначеЕсли лВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		ТекстОтбора	= ТекстОтбора + " НЕ В ИЕРАРХИИ(&Отбор_" + ЭлементОтбора.Имя + ")";
	ИначеЕсли лВидСравнения = ВидСравнения.НеВИерархии Тогда
		ТекстОтбора	= ТекстОтбора + " НЕ В ИЕРАРХИИ(&Отбор_" + ЭлементОтбора.Имя + ")";
	КонецЕсли;
	
	Возврат ТекстОтбора;
	
КонецФункции	//ДобавитьВЗапросОтбор()

//****************************************
//Входные параметры:
//	пЭлемент		- проверяемый элемент
//	пРодитель		- группа, принадлежность которой проверяем
//	пИмяРодителя	- название группы, принадлежность которой проверяем (используется, если не указан пРодитель)
//	пТип			- если = 1, то пЭлемент должен принадлежать группе, а если = 0, то НЕ должен принадлежать
//Возврат: = 1, если элемент входит в группу, = о - в противном случае
Функция ПринадлежитРодителю(пЭлемент, пРодитель = "", пИмяРодителя = "", пТип = 1) Экспорт
	
	лРезультат	= ?(пТип = 1, 0, 1);
	Если НЕ ЗначениеЗаполнено(пЭлемент) Тогда
		Возврат 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(пРодитель) Тогда
		лИскомыйРодитель	= пЭлемент.Родитель;
		Пока ЗначениеЗаполнено(лИскомыйРодитель) = 0 Цикл
			Если лИскомыйРодитель = пРодитель Тогда
				лРезультат	= пТип;
				Прервать;
			КонецЕсли;
			
			лИскомыйРодитель	= лИскомыйРодитель.Родитель;
		КонецЦикла;
		
		Возврат лРезультат;
	КонецЕсли;
	
	Если пИмяРодителя <> "" Тогда
		лИскомыйРодитель	= пЭлемент.Родитель;
		Пока ЗначениеЗаполнено(лИскомыйРодитель) = 0 Цикл
			Если ВРег(лИскомыйРодитель.Наименование) = пИмяРодителя Тогда
				лРезультат	= пТип;
				Прервать;
			КонецЕсли;
			
			лИскомыйРодитель	= лИскомыйРодитель.Родитель;
		КонецЦикла;
		
		Возврат лРезультат;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции	//ПринадлежитРодителю()

//****************************************
Функция ОтборНеЗаполнен(пИмя) Экспорт
	
	ЭлементОтбора	= Отбор.Найти(пИмя);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЭлементОтбора.Использование Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	//ОтборНеЗаполнен()

//****************************************
Функция ПодходитПоОтбору(пИмя, пЗначение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(пЗначение) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭлементОтбора	= Отбор.Найти(пИмя);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЭлементОтбора.Использование Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭлементОтбора.Имя) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
		Если пЗначение = ЭлементОтбора.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
		Если пЗначение <> ЭлементОтбора.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
		Если ЭлементОтбора.Значение.НайтиПоЗначению(пЗначение) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
		//Сообщить("Отбор в списке по иерархии еще не работает!");
		Если ЭлементОтбора.Значение.НайтиПоЗначению(пЗначение.Родитель) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии Тогда
		//Сообщить("Отбор по иерархии еще не работает!");
		Если пЗначение.Родитель = ЭлементОтбора.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
		Если ЭлементОтбора.Значение.НайтиПоЗначению(пЗначение) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		//Сообщить("Отбор не в списке по иерархии еще не работает!");
		Если ЭлементОтбора.Значение.НайтиПоЗначению(пЗначение.Родитель) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВИерархии Тогда
		//Сообщить("Отбор не в иерархии еще не работает!");
		Если пЗначение.Родитель <> ЭлементОтбора.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	//ПодходитПоОтбору()

//****************************************
Функция ПолучитьЗначениеДляПодстановки(пИмя) Экспорт
	
	ЭлементОтбора	= Отбор.Найти(пИмя);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Если НЕ ЭлементОтбора.Использование Тогда
		Возврат "";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭлементОтбора.Имя) Тогда
		Возврат "";
	КонецЕсли;
	Если ЭлементОтбора.ВидСравнения <> ВидСравнения.Равно Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ЭлементОтбора.Значение;
	
КонецФункции	//ПолучитьЗначениеДляПодстановки()

//****************************************
Функция НадоЗагружатьОбъект(пКодВнутренний, пКодВнешний) Экспорт
	
	Если НЕ ЗначениеЗаполнено(пКодВнешний) Тогда
		Возврат Истина;
	КонецЕсли;
	
	лОтбор			= Новый Структура("КодВнешний", пКодВнешний);
	лВыборка		= РегистрыСведений.СТ_СостоянияОбъектов.Выбрать(лОтбор);
	Пока лВыборка.Следующий() Цикл
		Если лВыборка.ТипОбъекта = "from chicago" Тогда
			пКодВнутренний	= лВыборка.КодВнутренний;
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции	//НадоЗагружатьОбъект()

Функция НадоЗагружатьОбъектИзКПК(пКодМаршрута, пДатаКПК, пКодКПК) Экспорт
	
	Если НЕ ЗначениеЗаполнено(пКодКПК) Тогда
		Возврат Истина;
	КонецЕсли;
	
	лсКодКПК	= пКодМаршрута + "/" + пДатаКПК + "/" + пКодКПК;
	
	лОтбор			= Новый Структура("КодКПК", пКодКПК);
	лВыборка		= РегистрыСведений.СТ_СостоянияОбъектов.Выбрать(лОтбор);
	Пока лВыборка.Следующий() Цикл
		Если лВыборка.ТипОбъекта = "from chicago" Тогда
			Если СокрЛП(лВыборка.КодКПК) = лсКодКПК Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции	//НадоЗагружатьОбъектИзКПК()

//****************************************
Функция ПолучитьПроизвольноеЗначение(пТип, пФильтр = "") Экспорт
	
	лЗначение	= "";
	лСпр	= Справочники[пТип].Выбрать();
	Пока лСпр.Следующий() Цикл
		Если лСпр.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		Если пФильтр <> "" Тогда
			Если НЕ ПодходитПоОтбору(пФильтр, лСпр.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		лЗначение		= лСпр.Ссылка;
		Прервать;
	КонецЦикла;
	
	Возврат лЗначение;
	
КонецФункции	//ПолучитьПроизвольноеЗначение()

//***********************************************//
//***********************************************//
// Процедуры работы с файлами и каталогами       //
//                   Н А Ч А Л О                 //
//***********************************************//
//***********************************************//


Функция ДатаВФорматеXMLЛога(пДата, пВремя)
	
	лСтрокаДата = Формат(пДата, "ДФ=""гггг-ММ-дд""");
	лСтрокаВремя 	= пВремя;
	
	Возврат лСтрокаДата + "T" + лСтрокаВремя + мСтрокаЧасовойПояс;
	
КонецФункции

Процедура xmlЛогДобавитьПотомка(pParent, пНазвание, пЗначение)

	пДокВладелец= pParent.ownerDocument;
	Если пДокВладелец = Неопределено Тогда
		пДокВладелец = pParent; 
	КонецЕсли;
	
		//MS XML Parser
		child		= пДокВладелец.CreateElement(пНазвание);
		child.text	= пЗначение;
		pParent.AppendChild(child);
    	
КонецПроцедуры	//xmlДобавитьПотомка()

// Процедура делает запись в XML-лог обмена
// Параметры:
//
//BeginDate - дата начала выполнения события, если параметр не задан, заполняется текущей датой
//BeginTime - время начала выполнения события, если параметр не задан, заполняется текущим временем
//
//Description - здесь будет вся информация о событии загрузки или выгрузки через разделитель "точка с запятой".  ";"
//Содержание поля Description:
//	Интеграция с УС; Операция обмена; Объект (как в xml); Описание информации; Количественная мера информации
//Пример Description:
//	Интеграция с УС; Выгрузка данных; currencies; Выгружено элементов; 5 
//
//ID - внешний код, может отсутствовать. Можно использовать когда ошибка в каком-то документе
//
//State - Описывает состояние события. Ошибка, В процессе или Успешно. Для нас интересны только Ошибка (сработает автоинформатор) и событие Успешно. 
//Возможные значения:
//	Audit_State_Fail        Ошибка
//	Audit_State_Progress    В процессе
//	Audit_State_Success    	Успешно
//
//Reason
//Возможные значения:
//	Audit_Reason_Error            	Ошибка данных
//	Audit_Reason_NoConnect        	Отсутствие связи
//	Audit_Reason_NoDataForObject    Нет данных для загрузки по текущему БО
//	Audit_Reason_NotDataForImport   Нет данных для загрузки
//	Audit_Reason_Null            	Пустое значение
//	Audit_Reason_SystemFail        	Сбой системы
//
//EventType - Тип события
//	всегда Audit_Type_ERP_to_Chicago	Обозначает выгрузку из УС в Чикаго

Процедура ВывестиВXMLЛог(BeginDate="", BeginTime="", Description="", ID="", State="Audit_State_Success", Reason="Audit_Reason_Null", EventType="Audit_Type_ERP_to_Chicago")
		
	Если (Description="")И(ID="") Тогда
		Возврат;
	КонецЕсли;
	
	BeginDate = ?(BeginDate="", ТекущаяДата(), BeginDate); 
	BeginTime = ?(BeginTime="", XMLВернутьВремя(), BeginTime);
	
	лDescription = СокрЛП("Интеграция с УС; Загрузка данных; "+Description);
		
	
	LogDataExchangeAudit = ЛогXML.CreateElement("LogDataExchangeAudit");

	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "State"		, State);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "EventType"	, EventType);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "BeginDate"	, ДатаВФорматеXMLЛога(BeginDate, BeginTime));
	
	//EndDate = ЛогXML.CreateElement("EndDate");
	//EndDate.SetAttribute("xsi:nil", "true");
	//LogDataExchangeAudit.AppendChild(EndDate);
	
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "EndDate"		, ДатаВФорматеXMLЛога(ТекущаяДата(),XMLВернутьВремя()));
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "ID"			, ID);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "Description"	, лDescription);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "Reason"		, Reason);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "IsUpdate"		, "true");
	
	groupLogXML.AppendChild(LogDataExchangeAudit);
	
КонецПроцедуры

//*******************************************  
Функция СоздатьНесуществующиеПодкаталоги(пПутьКФайлу) Экспорт
	
	лПутьКФайлу	= пПутьКФайлу;
	
	лСЗнПодкаталоги	= Новый СписокЗначений();
	
	лЭтоФайл	= 1;
	лФайл	= Новый Файл(лПутьКФайлу);
	Пока лФайл.Существует() = 0 Цикл
		Если лЭтоФайл = 1 Тогда
			лЭтоФайл	= 0;
		Иначе
			лСЗнПодкаталоги.Добавить(лПутьКФайлу);
		КонецЕсли;
		
		р	= СтрДлина(лПутьКФайлу);
		Пока р > 1 Цикл
			Если Сред(лПутьКФайлу, р, 1) <> "\" Тогда
				р	= р - 1;
				Продолжить;
			КонецЕсли;
			
			лПутьКФайлу	= Лев(лПутьКФайлу, р - 1);
			Прервать;
		КонецЦикла;
		
		Если СтрДлина(лПутьКФайлу) <= 1 Тогда
			Прервать;
		КонецЕсли;
		
		лФайл	= Новый Файл(лПутьКФайлу);
	КонецЦикла;
	
	р	= лСЗнПодкаталоги.Количество();
	Пока р > 0 Цикл
		Попытка
			СоздатьКаталог(лСЗнПодкаталоги.Получить(р-1));
		Исключение
			Возврат 0;
		КонецПопытки;
		
		р	= р - 1;
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции	//СоздатьНесуществующиеПодкаталоги()

//*******************************************  
Функция СоздатьИмяФайлаИзШаблона(пШаблонФайлаВыгрузки) Экспорт
	
	лИмяФайлаВыгрузки	= пШаблонФайлаВыгрузки;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYYYMMDD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "ДФ=yyyyMMdd");
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYYYMMDD", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYMMDD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Сред(лСтрЗамены, 3);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYMMDD", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYYYMM");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 6);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYYYMM", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYMM");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 6);
		лСтрЗамены = Сред(лСтрЗамены, 3);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYMM", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "MMDD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Сред(лСтрЗамены, 5);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "MMDD", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYYY");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 4);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYYY", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YY");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 4);
		лСтрЗамены = Сред(лСтрЗамены, 3);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YY", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "DD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Сред(лСтрЗамены, 7);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "DD", лСтрЗамены);
	КонецЕсли;
	
	лДата	= ТекущаяДата();
	лЧас	= Строка(Час(лДата));
	лМин	= Строка(Минута(лДата));
	лСек	= Строка(Секунда(лДата));
	
	лЧас	= ?(СтрДлина(лЧас) = 2, лЧас, "0" + лЧас);
	лМин	= ?(СтрДлина(лМин) = 2, лМин, "0" + лМин);
	лСек	= ?(СтрДлина(лСек) = 2, лСек, "0" + лСек);
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "HHMMSS");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лЧас + лМин + лСек;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "HHMMSS", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "HHMM");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лЧас + лМин;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "HHMM", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "MMSS");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лМин + лСек;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "MMSS", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "HH");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лЧас;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "HH", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "SS");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лСек;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "SS", лСтрЗамены);
	КонецЕсли;
	
	Возврат лИмяФайлаВыгрузки;
	
КонецФункции	//СоздатьИмяФайлаИзШаблона()

//***********************************************//
//***********************************************//
// Процедуры работы с файлами и каталогами       //
//                    К О Н Е Ц                  //
//***********************************************//
//***********************************************//


//***********************************************//
//***********************************************//
// Процедуры для работы со списком объектов      //
//                   Н А Ч А Л О                 //
//***********************************************//
//***********************************************//

//****************************************
Функция НадоЗагружать(пИмя = "")
	
	лИмя	= пИмя;
	Если НЕ флажокПодробно Тогда
		лСтрокаОбъекта	= ОбъектыЗагрузки.Найти(лИмя, "Название");
		Если лСтрокаОбъекта = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		лСтрокаГруппы	= ГруппыЗагрузки.Найти(лСтрокаОбъекта.КодГруппы, "КодГруппы");
		Если лСтрокаГруппы = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		лИмя	= лСтрокаГруппы.Название;
	КонецЕсли;
	
	лЭлементСЗн	= СЗнОбъекты.НайтиПоЗначению(лИмя);
	Если лЭлементСЗн = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат лЭлементСЗн.Пометка;
	
КонецФункции	//НадоЗагружать()

//***********************************************//
//***********************************************//
// Процедуры для работы со списком объектов      //
//                    К О Н Е Ц                  //
//***********************************************//
//***********************************************//


//***********************************************//
//***********************************************//
// Процедуры для работы с xml                    //
//                   Н А Ч А Л О                 //
//***********************************************//
//***********************************************//

//*******************************************
Процедура XMLДобавитьПотомка(pParent, пНазвание, пЗначение)
	
	child		= ДокXML.CreateElement(пНазвание);
	child.text	= пЗначение;
	pParent.AppendChild(child);
	
КонецПроцедуры	//XMLДобавитьПотомка()

//*******************************************
Процедура ДобавитьПотомка(pParent, пНазвание, пЗначение)
	
	Попытка
		XMLДобавитьПотомка(pParent, пНазвание, пЗначение);
	Исключение
		СообщитьПодробно("ОШИБКА: " + пНазвание + " - " + пЗначение, 2, 0, 2, "Ошибка");
	КонецПопытки;
	
КонецПроцедуры	//ДобавитьПотомка()

//****************************************
Процедура ДобавитьНоду(pParent, pChild)
	
	Если pChild.childNodes().length() > 0 Тогда
		pParent.AppendChild(pChild);
	КонецЕсли;
	
КонецПроцедуры	//ДобавитьНоду()

//****************************************
//Будем юзать ее для использование Доп Обработки
Функция ПолучитьРеквизит(section, пИмяРеквизита) Экспорт
	
	Попытка
		лРезультат	= СокрЛП(section.SelectSingleNode(пИмяРеквизита).text);
		Если Нрег(лРезультат) = "true" Тогда
			лРезультат	= Истина;
		ИначеЕсли Нрег(лРезультат) = "false" Тогда
			лРезультат	= Ложь;
		КонецЕсли;
	Исключение
		лРезультат	= "";
	КонецПопытки;
	
	Возврат лРезультат;
	
КонецФункции	//ПолучитьРеквизит()

//****************************************
Функция ПолучитьРеквизитЧислом(section, пИмяРеквизита) Экспорт
	
	лЧисло	= ПолучитьРеквизит(section, пИмяРеквизита);
	лРезультат	= Число(СтрЗаменить(лЧисло, ",", "."));
	
	Возврат лРезультат;
	
КонецФункции	//ПолучитьРеквизитЧислом()

//****************************************
Функция ПолучитьРеквизитБулевый(section, пИмяРеквизита)
	
	лЗначение	= ПолучитьРеквизит(section, пИмяРеквизита);
	лРезультат	= ?(лЗначение = 1, Истина, Ложь);
	лРезультат	= ?(НРег(лЗначение) = "true", Истина, ?(НРег(лЗначение) = "false", Ложь, лРезультат));
	
	Возврат лРезультат;
	
КонецФункции	//ПолучитьРеквизитБулевый()

//****************************************
Функция XMLВыполнитьОперацию(пТипОперации, пДокXML, пПараметр1 = "", пПараметр2 = "", пПараметр3 = "")
	
	Если пТипОперации = "СоздатьXML" Тогда
		
		пДокXML	= ПолучитьCOMОбъект("", мТипXMLБибилиотеки);
		node = пДокXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
		пДокXML.preserveWhiteSpace = 1;
		пДокXML.AppendChild(node);
		
		group = пДокXML.CreateElement(пПараметр2);
		
		Возврат group;
		
	ИначеЕсли пТипОперации = "СохранитьXML" Тогда
		
		лИмяФайлаВыгрузки	= пПараметр1;
		group				= пПараметр2;
		
		Если group.childNodes().length() = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		пДокXML.AppendChild(group);
		
		лПолноеИмяФайлаВыгрузки	= мКаталогДанных + лИмяФайлаВыгрузки;
		Если СоздатьНесуществующиеПодкаталоги(лПолноеИмяФайлаВыгрузки) = 0 Тогда
			СообщитьПодробно("Не удалось сохранить файл " + лПолноеИмяФайлаВыгрузки, 2, 0, 2, "Ошибка");
			ВывестиВXMLЛог(,,"documents; Не удалось сохранить файл "+лПолноеИмяФайлаВыгрузки, , "Audit_State_Fail", "Audit_Reason_Error");
			Возврат 0;
		КонецЕсли;
		
		пДокXML.Save(лПолноеИмяФайлаВыгрузки);
		
		Возврат 1;
		
	ИначеЕсли пТипОперации = "ЗаписатьLog" Тогда
		
		лИмяФайлаВыгрузкиДляЛога	= пПараметр1;
		лИмяФайлаЛога				= пПараметр2;
		
		лПолноеИмяФайлаЛога	= мКаталогДанных + лИмяФайлаЛога;
		лФайл	= Новый Файл(лПолноеИмяФайлаЛога);
		Если лФайл.Существует() Тогда
			пДокXML.Load(лПолноеИмяФайлаЛога);
		Иначе
			пДокXML	= ПолучитьCOMОбъект("", мТипXMLБибилиотеки);
			node = пДокXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
			пДокXML.preserveWhiteSpace = 1;
			пДокXML.AppendChild(node);
		КонецЕсли;
		
		Попытка
			group	= пДокXML.selectSingleNode("fileslog");
			Если group = Неопределено Тогда
				group = пДокXML.CreateElement("fileslog");
				пДокXML.AppendChild(group);
			КонецЕсли;
		Исключение
			group = пДокXML.CreateElement("fileslog");
			пДокXML.AppendChild(group);
		КонецПопытки;
		
		Попытка
			chicago = group.selectSingleNode("chicago");
			Если chicago = Неопределено Тогда
				chicago = пДокXML.CreateElement("chicago");
				group.AppendChild(chicago);
			КонецЕсли;
		Исключение
			chicago = пДокXML.CreateElement("chicago");
			group.AppendChild(chicago);
		КонецПопытки;
		
		Попытка
			client = group.selectSingleNode("client");
			Если client = Неопределено Тогда
				client = пДокXML.CreateElement("client");
				group.AppendChild(client);
			КонецЕсли;
		Исключение
			client = пДокXML.CreateElement("client");
			group.AppendChild(client);
		КонецПопытки;
		
		лПозиция	= Найти(лИмяФайлаВыгрузкиДляЛога, "\");
		Пока лПозиция <> 0 Цикл
			лИмяФайлаВыгрузкиДляЛога	= Сред(лИмяФайлаВыгрузкиДляЛога, лПозиция + 1);
			лПозиция	= Найти(лИмяФайлаВыгрузкиДляЛога, "\");
		КонецЦикла;
		Если Прав(лИмяФайлаВыгрузкиДляЛога, 4) = ".xml" Тогда
			лИмяФайлаВыгрузкиДляЛога	= Лев(лИмяФайлаВыгрузкиДляЛога, СтрДлина(лИмяФайлаВыгрузкиДляЛога) - 4);
		КонецЕсли;
		Node = пДокXML.CreateElement(лИмяФайлаВыгрузкиДляЛога);
		Node.SetAttribute("status", "false");
		client.AppendChild(Node);
		
		пДокXML.Save(мКаталогДанных + "filelog.xml");
		
		Возврат 1;
		
	КонецЕсли;
	
КонецФункции	//XMLВыполнитьОперацию()

//****************************************
//Процедура ЗаписатьСостояниеОбъекта(пОбъект, пКодВнутренний, пКодВнешний, пКодКПК, пДатаКПК)
//	
//	Если пОбъект <> "" И ЗначениеЗаполнено(пОбъект) Тогда
//		Если НЕ ЗначениеЗаполнено(пКодВнутренний) Тогда
//			пКодВнутренний	= СТ_ЗначениеВСтрокуВнутр(пОбъект);
//		КонецЕсли;
//		
//		лСостояния	= РегистрыСведений.СТСостоянияОбъектов.СоздатьМенеджерЗаписи();
//		лСостояния.Объект			= пОбъект;
//		лСостояния.КодВнутренний	= пКодВнутренний;
//		лСостояния.КодВнешний		= пКодВнешний;
//		лСостояния.КодКПК			= пКодКПК;
//		лСостояния.ДатаКПК			= пДатаКПК;
//		//лСостояния.КодХеш			= лКодХеш;
//		лСостояния.ТипОбъекта		= "from chicago";
//		лСостояния.ДатаЗаписи       = ТекущаяДата();
//		лСостояния.Записать();
//	Иначе
//		Если НЕ ЗначениеЗаполнено(пКодВнутренний) Тогда
//			пКодВнутренний	= "<no outercode>";
//		КонецЕсли;
//	КонецЕсли;
//	
//	пПозицияДроби	= Найти(пКодКПК, "/");
//	лКодМаршрута	= ?(пПозицияДроби = 0, "", Лев(пКодКПК, пПозицияДроби - 1));
//	лКодКПК			= ?(пПозицияДроби = 0, пКодКПК, Сред(пКодКПК, пПозицияДроби + 1));
//	
//	doc = ДокXMLConf.CreateElement("doc");
//	ДобавитьПотомка(doc, "chicagocode"	, пКодВнешний);
//	ДобавитьПотомка(doc, "outercode"	, пКодВнутренний);
//	ДобавитьПотомка(doc, "pdadocnum"	, лКодКПК);
//	ДобавитьПотомка(doc, "crdate"		, Строка(пДатаКПК));
//	ДобавитьПотомка(doc, "pdaroutecode"	, лКодМаршрута);
//	confirmations.AppendChild(doc);
//	
//КонецПроцедуры	//ЗаписатьСостояниеНенужногоЭлемента()

Процедура ЗаписатьСостояниеОбъекта(пОбъект, пКодВнутренний, пКодВнешний, пКодВнешнийПервый, пКодКПК, пДатаКПК, пКодДокКПК)
	
	Если НЕ ЗначениеЗаполнено(пКодКПК) = 0 Тогда
		лсКодКПК	= пКодКПК + "/" + пДатаКПК + "/" + пКодДокКПК;
	Иначе
		лсКодКПК    = "";
	КонецЕсли;
		
	Если пОбъект <> "" Тогда
		Если НЕ ЗначениеЗаполнено(пКодВнутренний) Тогда
			пКодВнутренний	= СТ_ЗначениеВСтрокуВнутр(пОбъект);
		КонецЕсли;
		
		лСостояния	= РегистрыСведений.СТ_СостоянияОбъектов.СоздатьМенеджерЗаписи();
		лСостояния.Объект			= пОбъект;
		лСостояния.КодВнутренний	= пКодВнутренний;
		лСостояния.КодВнешний		= пКодВнешнийПервый;
		лСостояния.КодКПК			= лсКодКПК;
		лСостояния.ДатаКПК			= пДатаКПК;
		лСостояния.ТипОбъекта		= "from chicago";
		лСостояния.ДатаЗаписи		= ТекущаяДата();
		
		//Попытка
		лСостояния.Записать();
			//	Исключение
			//КонецПопытки;
	Иначе
		Если НЕ ЗначениеЗаполнено(пКодВнутренний) Тогда
			пКодВнутренний	= "<no outercode>";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(пКодДокКПК) Тогда
		// требуется обратная замена, чтобы остался только код документа в КПК
		ПозицияСлеша = Найти(пКодДокКПК, "/");
		Если ПозицияСлеша <> 0 Тогда
			пКодДокКПК = Сред(пКодДокКПК, ПозицияСлеша +1);
		КонецЕсли;
	КонецЕсли;
		
	doc = ДокXMLConf.CreateElement("doc");
	ДобавитьПотомка(doc, "chicagocode"	, пКодВнешний);
	ДобавитьПотомка(doc, "outercode"	, пКодВнутренний);
	ДобавитьПотомка(doc, "pdadocnum"	, пКодДокКПК);
	ДобавитьПотомка(doc, "crdate"		, пДатаКПК);
	ДобавитьПотомка(doc, "pdaroutecode"	, пКодКПК);
	confirmations.AppendChild(doc);
	
КонецПроцедуры	//ЗаписатьСостояниеНенужногоЭлемента()

//***********************************************//
//***********************************************//
// Процедуры для работы с xml                    //
//                    К О Н Е Ц                  //
//***********************************************//
//***********************************************//


//***********************************************//
//***********************************************//
// Процедуры для формирования отчета             //
//                   Н А Ч А Л О                 //
//***********************************************//
//***********************************************//


Функция ПреобразоватьДатуВСтроку(пДата)
	
	лДень	= Строка(День(пДата));
	лМесяц	= Строка(Месяц(пДата));
	лГод	= Строка(Год(пДата));
	
	Если СтрДлина(лДень) < 2 Тогда
		лДень	= "0" + лДень;
	КонецЕсли;
	
	Если СтрДлина(лМесяц) < 2 Тогда
		лМесяц	= "0" + лМесяц;
	КонецЕсли;
	
	Если СтрДлина(лГод) < 2 Тогда
		лГод	= "0" + лГод;
	КонецЕсли;
	
	Возврат лГод + лМесяц + лДень;
	
КонецФункции	//ПреобразоватьДатуВСтроку()

//*******************************************
Функция отчПолучитьИмяФайлаОтчета(пДата)
	
	лСтрДата		= ПреобразоватьДатуВСтроку(пДата);
	лКаталогОтчетов	= мКаталогДанных + "reports\";
	лИмяФайла		= СокрЛП(" "+мИнфоКодДистрибьютора + "_" + лСтрДата + ".mxl");
	лПолноеИмяФайла	= лКаталогОтчетов + лИмяФайла;
	
	СоздатьНесуществующиеПодкаталоги(лПолноеИмяФайла);
	
	Возврат лПолноеИмяФайла;
	
КонецФункции	//отчПолучитьИмяФайлаОтчета()

//*******************************************
Процедура отчПросмотретьОтчет() Экспорт
	
	лНаименованиеОтчета	= "" + ДатаКонца + ": отчет по синхронизации с ""ST-Чикаго""";
	
	лПолноеИмяФайла	= отчПолучитьИмяФайлаОтчета(ТекущаяДата());
	лФайл	= Новый Файл(лПолноеИмяФайла);
	Если Не лФайл.Существует() Тогда
#Если Клиент Тогда
		Сообщить("Отчет по синхронизации за " + ДатаКонца + " не найден!");
#КонецЕсли
		Возврат;
	КонецЕсли;
	
	мТаблицаОтчета.Прочитать(лПолноеИмяФайла);
	мТаблицаОтчета.ТолькоПросмотр	= Истина;
	мТаблицаОтчета.Показать(лНаименованиеОтчета, "");
	
КонецПроцедуры	//отчПросмотретьОтчет()

//*******************************************
Процедура отчДобавитьВОтчет(пСЗнДанные = "", пСекция = "Действие", пВыводитьДату = 0, пВыводитьВремя = 0)
	
	Если Не мИспользоватьЛогСообщений Тогда
		Возврат;
	КонецЕсли;
	
	Если пСЗнДанные = "" Тогда
		Возврат;
	КонецЕсли;
	
	лОбласть	= мМакетОтчета.ПолучитьОбласть(пСекция + "|Вертикальная");
	Если ТипЗнч(пСЗнДанные) = Тип("СписокЗначений") Тогда
		лОбласть.Параметры.Текст		= пСЗнДанные.Получить(0).Значение;
		лОбласть.Параметры.Параметр1	= пСЗнДанные.Получить(1).Значение;
		лОбласть.Параметры.Параметр2	= пСЗнДанные.Получить(2).Значение;
		мТаблицаОтчета.Вывести(лОбласть);
		
		Для р = 4 По пСЗнДанные.Количество() Цикл
			лОбласть	= мМакетОтчета.ПолучитьОбласть(пСекция + "|Реквизит");
			лОбласть.Параметры.Реквизит	= пСЗнДанные.Получить(р-1).Значение;
			мТаблицаОтчета.Присоединить(лОбласть);
		КонецЦикла;
	Иначе
		лОбласть.Параметры.Текст		= пСЗнДанные;
		лОбласть.Параметры.Параметр1	= ?(пВыводитьДату = 0, "", XMLВернутьДату());
		лОбласть.Параметры.Параметр2	= ?(пВыводитьВремя = 0, "", XMLВернутьВремя());
		мТаблицаОтчета.Вывести(лОбласть);
	КонецЕсли;
	
КонецПроцедуры	//отчДобавитьВОтчет()

//*******************************************
Процедура отчДобавитьВОтчетСтроку(пСтрока = "", пСекция = "Информация")
	
	Если Не мИспользоватьЛогСообщений Тогда
		Возврат;
	КонецЕсли;
	
	Если пСтрока = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если пСекция = "Ошибка" Тогда
		Если пСтрока = мСтрокаСообщения Тогда
			Возврат;
		КонецЕсли;
		мСтрокаСообщения	= пСтрока;
	КонецЕсли;
	
	лОбласть	= мМакетОтчета.ПолучитьОбласть(пСекция + "|Вертикальная");
	лОбласть.Параметры.Текст		= пСтрока;
	мТаблицаОтчета.Вывести(лОбласть);
	
КонецПроцедуры	//отчДобавитьВОтчетСтроку()

//*******************************************
Процедура отчОткрытьОтчет()
	
	Если Не мИспользоватьЛогСообщений Тогда
		Возврат;
	КонецЕсли;
	
	мНаименованиеОтчета	= "" + ТекущаяДата() + ": отчет по синхронизации с ""ST-Чикаго""";
	
	мТаблицаОтчета.Очистить();
	
	лПолноеИмяФайла	= отчПолучитьИмяФайлаОтчета(ТекущаяДата());
	лФайл	= Новый Файл(лПолноеИмяФайла);
	Если лФайл.Существует() Тогда
		мТаблицаОтчета.Прочитать(лПолноеИмяФайла);
	КонецЕсли;
	
	мСтрокаСообщения	= "";
	лОбласть	= мМакетОтчета.ПолучитьОбласть("Пустая|Вертикальная");
	мТаблицаОтчета.Вывести(лОбласть);
	
КонецПроцедуры	//отчОткрытьОтчет()

//*******************************************
Процедура отчЗакрытьОтчет()
	
	Если Не мИспользоватьЛогСообщений Тогда
		Возврат;
	КонецЕсли;
	
	лНаименованиеОтчета	= "" + ДатаКонца + ": отчет по синхронизации с ""ST-Чикаго""";
	
	лПолноеИмяФайла	= отчПолучитьИмяФайлаОтчета(ТекущаяДата());
	//мТаблицаОтчета.ТолькоПросмотр	= Истина;
	//мТаблицаОтчета.Показать(лНаименованиеОтчета, "");
	мТаблицаОтчета.Вывод	= ИспользованиеВывода.Разрешить;
	Попытка
	мТаблицаОтчета.Записать(лПолноеИмяФайла);
Исключение
	//Инфо = ИнформацияОбОшибке();
	//Стр= Инфо.ИсходнаяСтрока ;
	//	
	//Тек=Новый ТекстовыйДокумент ;
	//Им=ТекущаяДата();
	//Им=СтрЗаменить(Им," ","_");
	//Им=СтрЗаменить(Им,":","_");
	//Им=СтрЗаменить(Им,".","_");
	//Сообщить("Записываем "+ИМ);
	////Предупреждение("Записываем "+ИМ);
	//ИмяТек=мКаталогДанных+"\"+СокрЛП(Им)+".TXT";
	//
	//Стр= Инфо.ИсходнаяСтрока ;
	//Тек.ДобавитьСтроку(Стр);  	
	//
	//Стр= Инфо.НомерСтроки ;
	//Тек.ДобавитьСтроку(Стр);
	//
	//Стр= Инфо.Описание ;
	//Тек.ДобавитьСтроку(Стр); 
	//
	//Тек.Записать(ИмяТек);

			КонецПопытки;
	
КонецПроцедуры	//отчЗакрытьОтчет()

//***********************************************//
//***********************************************//
// Процедуры для формирования отчета             //
//                    К О Н Е Ц                  //
//***********************************************//
//***********************************************//


//****************************************
Функция ПолучитьЕдиницуТовара(пТовар, пОКЕИ, пКоэффициент)
	
	Если НЕ ЗначениеЗаполнено(пТовар) Тогда
		Возврат "";
	КонецЕсли;
	
	лЕдиница	= "";
	лСпр		= Справочники.ЕдиницыИзмерения.Выбрать(, пТовар);
	Пока лСпр.Следующий() Цикл
		Если лСпр.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если лСпр.ЕдиницаПоКлассификатору.Код <> пОКЕИ.Код Тогда
			Продолжить;
		КонецЕсли;
		
		Если лСпр.ЕдиницаПоКлассификатору.Код = пТовар.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код Тогда
			Если лСпр.Коэффициент <> 1 Тогда
				Продолжить; // с такими данными МТ работать корректно не будет
			КонецЕсли;
		КонецЕсли;
		
		Если лСпр.Коэффициент <> пКоэффициент Тогда
			Продолжить;
		КонецЕсли;
		
		лЕдиница	= лСпр.Ссылка;
		Прервать;
	КонецЦикла;
	
	// случай, когда единицу измерения не удалось определить - по невысяненым причинам
	Если лЕдиница = "" Тогда
		// еще раз пробегаем по справочнику и берем базовую, но уже без ограничения по коэффициенту
		лСпр		= Справочники.ЕдиницыИзмерения.Выбрать(, пТовар);
		Пока лСпр.Следующий() Цикл
			Если лСпр.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			Если лСпр.ЕдиницаПоКлассификатору.Код = пТовар.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код Тогда
				лЕдиница	= лСпр.Ссылка;
				
				Если лЕдиница.Коэффициент = 1 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат лЕдиница;
	
КонецФункции	//ПолучитьЕдиницуТовара()

//****************************************
Функция ПолучитьВидОплаты(пКодВидаОплатыИзКПК)
	
	лКодВидаОплаты	= "";
	Если пКодВидаОплатыИзКПК = 1 Тогда
		лВидОплаты	= Перечисления.ТипыОплаты.Нал;		//для оплаты при отгрузке нал
	ИначеЕсли пКодВидаОплатыИзКПК = 2 Тогда
		лВидОплаты	= Перечисления.ТипыОплаты.БезНал;	//для отсрочки
	ИначеЕсли пКодВидаОплатыИзКПК = 3 Тогда
		лВидОплаты	= Перечисления.ТипыОплаты.ТовЧек;	//для предоплаты
	Иначе
		// для всех других случаев
		лВидОплаты	= Перечисления.ТипыОплаты.Нал;		//для оплаты при отгрузке нал
	КонецЕсли;
	
	Возврат лВидОплаты;
	
КонецФункции	//ПолучитьВидОплаты()


Функция МДобавитьПрефиксУзла(ПрефиксОрганизации)
	
	ПрефиксУзла	= ПланыОбмена.Склад.ЭтотУзел().ПрефиксУзла;
	Префикс		= ПрефиксОрганизации + ПрефиксУзла;
	
	Возврат Префикс;
	
КонецФункции	//МДобавитьПрефиксУзла()

//****************************************

Процедура ВывестиВЛогОшибкиЗагруженногоДокумента(пСписокОшибок, пТипОбъекта, пКодДокумента)
	
	Для Каждого ЭлСписка Из пСписокОшибок Цикл
		ВывестиВXMLЛог(,,пТипОбъекта+"; "+ЭлСписка, пКодДокумента, "Audit_State_Fail");
	КонецЦикла;
		
КонецПроцедуры

//***********************************************//
//***********************************************//
// Процедуры загрузки документов                 //
//                   Н А Ч А Л О                 //
//***********************************************//
//***********************************************//

Функция ВернутьБезДобавки(строкаДанных) Экспорт
	
	добавка = "_";
	позицияСимвола = Найти(строкаДанных, добавка);
	
	Если позицияСимвола = 0 Тогда
		Возврат строкаДанных;
	Иначе
		Возврат Сред(строкаДанных, 1, позицияСимвола-1);
	КонецЕсли;
		
КонецФункции	

Функция ПолучитьСсылкуПоВнешнемуКоду (пКодВнешний, пВидЗначения)
	
	Если НЕ ЗначениеЗаполнено(пКодВнешний) Тогда
		Возврат Документы[пВидЗначения].ПустаяСсылка();
	КонецЕсли;
	
	лОтбор			= Новый Структура("КодВнешний", пКодВнешний);
	лВыборка		= РегистрыСведений.СТ_СостоянияОбъектов.Выбрать(лОтбор);
	Пока лВыборка.Следующий() Цикл
		Если лВыборка.ТипОбъекта = "from chicago" Тогда
			Возврат лВыборка.Объект;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Документы[пВидЗначения].ПустаяСсылка();
	
КонецФункции

//Процедура УстановитьДатуОплатыПоДоговору(ДокОбъект, РежимВызова = "", мСтароеЗначениеДоговора=неопределено)Экспорт
//	ДоговорКонтрагента 	= ДокОбъект.ДоговорКонтрагента;
//	ДатаДокумента 		= ДокОбъект.Дата;

//	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
//		Возврат;
//	ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
//		Возврат;
//	КонецЕсли;
//	Если ДоговорКонтрагента.ДержатьРезервБезОплатыОграниченноеВремя Тогда
//		ЧислоДнейДоОплаты = ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
//	Иначе
//		ЧислоДнейДоОплаты = 0;
//	КонецЕсли;
//	Если ЧислоДнейДоОплаты = 0 Тогда
//		ДатаОплатыНовая = ДатаДокумента;
//	Иначе	
//		Если Константы.СпособКонтроляДнейЗадолженности.Получить() = Перечисления.СпособыКонтроляДнейЗадолженности.ПоКалендарнымДням Тогда
//			ДатаОплатыНовая = НачалоДня(ДатаДокумента) + 86400 * ЧислоДнейДоОплаты;
//		Иначе
//			ДатаОплатыНовая = ЗаполнениеДокументов.ОпределитьДату(ДатаДокумента, ЧислоДнейДоОплаты);
//			Если ДатаОплатыНовая = Неопределено Тогда
//				ДатаОплатыНовая = ДатаДокумента;
//			КонецЕсли;	
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ДокОбъект.ДатаОплаты <> ДатаОплатыНовая Тогда
//		ДокОбъект.ДатаОплаты = ДатаОплатыНовая;
//	КонецЕсли;

//КонецПроцедуры // УстановитьДатуОплатыПоДоговору()


//****************************************
Функция ЗагрузитьДокЗаказы(group, пВидЗначения)
	
	//<preorders> <!--предзаказ-->
	//	<preorder>
	//		<innercode/> 				<!--номер документа в Чикаго-->
	//		<outercode/>				<!--номер документа в УС-->
	//		<innerparentcode/>			<!--номер документа-основания в Чикаго-->
	//		<outerparentcode/>			<!--номер документа-основания-->
	//		<innercodefirstversion/>	<!--номер первой версии документа в Чикаго-->
	//		
	//		<date/>						<!--дата создания документа (ГГГГ-ММ-ДД)-->
	//		<docno/>					<!--номер документа (nchar (50))-->
	//		<printdocnum/>				<!--номер документа в Чикаго для отображения-->
	//		<prndocnum/>				<!--печатный номер документа-->
	//		
	//		<creatorcode/>				<!--код автора документа - employees-->
	//		<deleted/>					<!--признак того, что документ был удален-->
	//		
	//		<firmcode/>					<!--код фирмы - firms-->
	//		<routecode/>				<!--маршрут сбора заказа - routes-->
	//		<employeecode/>				<!--код сотрудника, работавшего на маршруте - employees-->
	//		<buypointcode/>				<!--код торговой точки - buypoints-->
	//		<comment/>					<!--коментарий-->
	//		
	//		<buyercode/>				<!--код покупателя - buyers-->
	//		<counteragentcode/>			<!--код контрагента - counteragents-->
	//		
	//		<deliveryroutecode/>		<!--маршрут доставки заказа - routes-->
	//		<deliverydate/>				<!--дата доставки заказа (ГГГГ-ММ-ДД)-->
	//		<deliverytimefrom/>			<!--время доставки заказа "с" (ЧЧ:ММ)-->
	//		<deliverytimetill/>			<!--время доставки заказа "по" (ЧЧ:ММ)-->
	//		
	//		<currencycode/>				<!--код валюты документа - currencies-->				
	//		<bw/>						<!--черная/белая 1=черная, 0=белая-->
	//		<paytypecode/>				<!--1-Оплата при отгрузке,2-Оплата с отсрочкой платежа,3-Предоплата-->
	//		<discountRate/>				<!--процент скидки на документ-->
	//		<usevatrate/>				<!--признак того, что документ учитывает ставку НДС-->
	//		<includevat/>				<!--признак того, что НДС включается в сумму-->
	//		
	//		<pdadocnum/>				<!--печатный номер документа в МТ-->
	//		<crdate/>					<!--дата создания документа-->
	//		<pdaroutecode/>				<!--код маршрута (только выгрузка из Чикаго)-->
	//		
	//		<body> <!--тело документа-->
	//			<item> <!--строка документа-->
	//				<SKUcode/>			<!--код товара - SKUs-->
	//				
	//				<unitcode/>			<!--код единицы измерения - units-->
	//				<unitfactor/>		<!--коэфициент пересчета единицы измерения в базовую (15, 6)-->
	//				<quantity/>			<!--количество в указанной единице измерения (15, 6)-->
	//				
	//				<priceDiscount/>	<!--цена без скидки (15, 4)-->
	//				<price/>			<!--цена (15, 4)-->
	//				<pricetypecode/>	<!--тип цены для покупателя-->
	//				<discountRate/>		<!--процент скидки-->
	//				<discountAmount/>	<!--сумма скидки (15, 4)-->
	//				<amount/>			<!--сумма (15, 4)-->
	//				
	//				<VATRate/>			<!--процент ставки НДС-->
	//				<VATAmount/>		<!--сумма НДС (15, 4)-->
	//			</item>
	//		</body>
	//	</preorder>
	//</preorders>
	    	
	Попытка
		preorders	= group.selectSingleNode("preorders").childNodes();
	Исключение
		ВывестиВXMLЛог(,,"preorders; Нет данных для загрузки",,,"Audit_Reason_NoDataForObject");
		Возврат 0;
	КонецПопытки;
         		
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	//++ Spl_Апроф 18.11.2014 (k.russkih@a-prof.ru)
	Если пВидЗначения = "ЗаказПокупателя" Тогда	
		пВидЗначения = "КП_ИмпортированныйЗаказ";			
	КонецЕсли; 
	//-- Spl_Апроф
	лДокументы	= Документы[пВидЗначения];
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Для р = 0 По preorders.Length() - 1 Цикл
		preorder	= preorders.Item(р);
		
		лСписокОшибокЗагруженногоДокумента = Новый СписокЗначений;
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		лКодВнешний			= ПолучитьРеквизит(preorder, "innercode");
		лКодВнешнийПервый	= ПолучитьРеквизит(preorder, "innercodefirstversion");
		лКодВнутренний		= ПолучитьРеквизит(preorder, "outercode");
		лНомерЧикаго        = ПолучитьРеквизит(preorder, "docno");
		
		лКодКПК				= ПолучитьРеквизит(preorder, "pdadocnum");
		лДатаКПК			= ПолучитьРеквизит(preorder, "crdate");
		лКодМаршрута		= ПолучитьРеквизит(preorder, "pdaroutecode");
		
		лДата 				= ПолучитьДатуИзСтроки(ПолучитьРеквизит(preorder, "date"));
		лДатаДоставки		= ПолучитьДатуИзСтроки(ПолучитьРеквизит(preorder, "deliverydate"));
		
		лНомерДокЧикаго 	= ПолучитьРеквизит(preorder, "innercode");
		
		
		//Если НЕ ((лКодВнешнийПервый="0") Или (НадоЗагружатьОбъект(лКодВнутренний, лКодВнешнийПервый))) Тогда
		//	СообщитьПодробно("Документ пропущен, чикаго номер "+лНомерЧикаго+", имеется более ранняя версия", 2, 0, 2, "Ошибка");
		//	ВывестиВXMLЛог(,,"preorders; "+лКодВнешний+" имеется более рання версия, документ пропущен", ,"Audit_State_Fail",,);
		//	ЗаписатьСостояниеОбъекта("", "copyoforder" + лКодВнешнийПервый, лКодВнешний, лКодМаршрута, лДатаКПК, лКодКПК);
		//	Продолжить;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(лКодМаршрута) Тогда
			лКодКПК	= лКодМаршрута + "/" + лКодКПК;
		КонецЕсли;
		Если Найти(лДатаКПК, "-") > 0 Тогда
			лДатаКПК	= ПолучитьДатуИзСтроки(лДатаКПК);
		КонецЕсли;
		
		Если (лКодВнешний = "") и (лКодКПК = "") Тогда
			Продолжить;
		КонецЕсли;
		
		Если (лДата < НачалоДня(ДатаНачала)) или (лДата > КонецДня(ДатаКонца)) Тогда
			// пропускаем документы не текущего дня
			ЗаписатьСостояниеОбъекта("", лКодВнутренний, лКодВнешний, лКодВнешнийПервый, лКодМаршрута, лДатаКПК, лКодКПК);
			СообщитьПодробно("Документ не загружен, чикаго номер "+лКодВнешний+", дата документа "+Строка(лДата)+" не попадает в период загрузки", 2, 0, 2, "Ошибка");
			ВывестиВXMLЛог(,,"preorders; "+лКодВнешний+" не попадает в период загрузки, документ пропущен", ,"Audit_State_Fail",,);
			Продолжить;
		КонецЕсли;
		
		лНадоЗагружатьОбъект	= НЕ ЗначениеЗаполнено(лКодВнутренний);
		Если лНадоЗагружатьОбъект Тогда лНадоЗагружатьОбъект = НадоЗагружатьОбъект(лКодВнутренний, лКодВнешний); КонецЕсли;
		Если лНадоЗагружатьОбъект Тогда лНадоЗагружатьОбъект = НадоЗагружатьОбъект(лКодВнутренний, лКодВнешнийПервый); КонецЕсли;
		Если лНадоЗагружатьОбъект Тогда лНадоЗагружатьОбъект = НадоЗагружатьОбъектИзКПК(лКодМаршрута, лДатаКПК, лКодКПК); КонецЕсли;
		                                                                                
		лНадоПровести	= 0;
		лНадоУдалить	= ПолучитьРеквизитБулевый(preorder, "deleted");
			
		Если НЕ лНадоЗагружатьОбъект ИЛИ лНадоУдалить Тогда
			Если лКодВнешнийПервый<>лКодВнешний Тогда
				лКодВнутренний = "copyoforder"+лКодВнешнийПервый;
				СообщитьПодробно("Документ пропущен, чикаго номер "+лКодВнешний+", имеется более ранняя версия", 2, 0, 2, "Ошибка");
				ВывестиВXMLЛог(,,"preorders; "+лКодВнешний+" имеется более ранняя версия, документ пропущен", ,"Audit_State_Fail",,);
 			КонецЕсли;
			ЗаписатьСостояниеОбъекта("", лКодВнутренний, лКодВнешний, лКодВнешнийПервый, лКодМаршрута, лДатаКПК, лКодКПК);
			Продолжить;
		КонецЕсли;
		
		лКонтрагент		= СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(preorder, "buyercode")		, "Контрагенты");
		лКонтрагент 	= ?(НЕ ЗначениеЗаполнено(лКонтрагент), мКонстантаОсновнойПокупатель, лКонтрагент);
		
		//++ Spl_Апроф 18.11.2014 (k.russkih@a-prof.ru)
		лТорговаяТочка  = СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(preorder, "buypointcode")	, "АдресаПоставки");
		Если НЕ ЗначениеЗаполнено(лТорговаяТочка) Тогда		
			лТорговаяТочка  = СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(preorder, "buypointcode")	, "Контрагенты");		
		КонецЕсли; 
		//лТорговаяТочка = "";
		
		лФирма			= СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(preorder, "firmcode")		, "Организации");
		лФирма 			= ?(НЕ ЗначениеЗаполнено(лФирма), мКонстантаФирма, лФирма);
		
		лСотрудник		= СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(preorder, "employeecode")	, "ФизическиеЛица");
		
		лСкидкаПоД		= 0;
		лСкидкаПоД		= ПолучитьРеквизитЧислом(preorder, "discountRate");
				
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		///////////////////////////////////////////////////////////////////////////
		//ЗАПОЛНЕНИЕ ШАПКИ ДОКУМЕНТА
		///////////////////////////////////////////////////////////////////////////
		
		лСклад = СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(preorder, "storecode")	, "Склады");
		лСклад = ?(НЕ ЗначениеЗаполнено(лСклад), мКонстантаСклад, лСклад);
		
		лКомментарийКПК   	= СокрЛП(ПолучитьРеквизит(preorder, "comment"));
		лКомментарий		= "Чикаго №"+ лНомерЧикаго + ?(лКомментарийКПК="", "", "; "+лКомментарийКПК);
				
		лВалюта				= мКонстантаВалюта;
		
		лУчитыватьНДС		= ПолучитьРеквизитБулевый(preorder, "usevatrate");
		лСуммаВключаетНДС	= ПолучитьРеквизитБулевый(preorder, "includevat");
		лУчитыватьНДС		= Истина;
		///////////////////////////////////////////////////////////////////////////
		//ЗАПОЛНЕНИЕ ШАПКИ ДОКУМЕНТА
		///////////////////////////////////////////////////////////////////////////
		
		лДок	= лДокументы.СоздатьДокумент();
		
		лДок.МобильнаяТорговля = Истина;
		
		Если мКонстантаДатаСозданияДокумента = истина тогда
			лДок.Дата			= лДата;
		Иначе
			лДок.Дата			= ТекущаяДата();
		КонецЕсли;
		
		лДок.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
		лДок.КП_ДатаДоставки	= лДатаДоставки;
		лДок.Организация		= лФирма;
		
		лДок.Ответственный		= НашТекущийПользователь;
		
		лДок.Контрагент			= лКонтрагент;
		лДок.Грузополучатель  	= лТорговаяТочка;
		Если НЕ лДок.Грузополучатель = Неопределено Тогда
			
			лДок.КП_ГородДоставки   = лДок.Грузополучатель.НСИ_Город;
			лДок.КП_УсловиеПоставки = лДок.Грузополучатель.НСИ_УсловияПоставки;
			лДок.КП_Отделение      	= лДок.Грузополучатель.НСИ_Отделение;			
			
		КонецЕсли; 
		
		лДок.ДоговорКонтрагента = ПолучитьДоговор(лФирма, лКонтрагент, лСотрудник);
		лДок.ДатаОплаты         = лДатаДоставки + лДок.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности * 86400;
		 		
		лДок.АдресДоставки 	= Строка(лТорговаяТочка);
		
		лДок.ВалютаДокумента	= лВалюта;
		Если ЗначениеЗаполнено(лВалюта) Тогда
			лСтруктура	= МодульВалютногоУчета.ПолучитьКурсВалюты(лВалюта, лДата);
			лДок.КурсВзаиморасчетов			= лСтруктура.Курс;
			лДок.КратностьВзаиморасчетов	= лСтруктура.Кратность;
		КонецЕсли;
		лДок.СтруктурнаяЕдиница	= лДок.Организация.ОсновнойБанковскийСчет;
		
		лДок.Комментарий		= лКомментарий;
		
		лДок.СкладГруппа		= лСклад;
				
		лДок.УчитыватьНДС		= лУчитыватьНДС;
		
		лДок.КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоПокупателя;
		
		лДок.ДатаОтгрузки		= АП_ОбщегоНазначенияСервер.РассчитатьДатуОтгрузки(лДатаДоставки, лДок.КП_Отделение, лДок.КП_УсловиеПоставки, лДок.КП_ГородДоставки, лДок.Грузополучатель);
				
		/////////////////////////////////////////////////////////////////////////////
		////ОПРЕДЕЛЕНИЕ ТИПА ДОКУМЕНТА
		/////////////////////////////////////////////////////////////////////////////
		
		//лБелая 		= Истина;
		//лЕстьДопАтр = Истина;
		//
		//Попытка
		//	Atrs	= preorder.selectSingleNode("hattributes").selectNodes("hattribute");
		//Исключение
		//	лЕстьДопАтр = Ложь;
		//КонецПопытки;
		//
		//Если лЕстьДопАтр тогда
		//	Для м = 0 По Atrs.Length() - 1 Цикл
		//		Atrib	= Atrs.Item(м);
		//	
		//		лКодДистра   = СокрЛП(ПолучитьРеквизит(Atrib, "attributecode"));
		//		лЗначениеАтр = СокрЛП(ПолучитьРеквизит(Atrib, "value"));

		//		//Если лКодДистра = "Розница" тогда
		//		//	Если  лЗначениеАтр = "1" тогда
		//		//		лБелая 	= Ложь;
		//		//	КонецЕсли;
		//		//КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;		
		
		//Если лБелая тогда
		//	лДок.ОтражатьВБухгалтерскомУчете=Истина;
		//	лДок.ОтражатьВНалоговомУчете=Истина;
		//КонецЕсли;		
		
		
		/////////////////////////////////////////////////////////////////////////////
		////ЗАПОЛНЕНИЕ ТАБЛИЧНОЙ ЧАСТИ ДОКУМЕНТА
		/////////////////////////////////////////////////////////////////////////////
		
		Попытка
			items	= preorder.selectSingleNode("body").selectNodes("item");
		Исключение
			СообщитьПодробно("ОШИБКА чтения табличной части заказа", 2, 0, 2, "Ошибка");
			ВывестиВXMLЛог(,,"preorders; "+лКодВнешний+" ОШИБКА чтения табличной части заказа", ,"Audit_State_Fail","Audit_Reason_Error",);
			Продолжить;
		КонецПопытки;
		
		Для м = 0 По items.Length() - 1 Цикл
			item	= items.Item(м);
			
			// дозаполняем тип цены
			Если НЕ ЗначениеЗаполнено(лДок.ТипЦен) Тогда
				лТипЦен 		= СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(item, "pricetypecode")		, "ТипыЦенНоменклатуры");
				лТипЦен 		= ?(НЕ ЗначениеЗаполнено(лТипЦен), мКонстантаТипЦен, лТипЦен);
				лДок.ТипЦен		= лТипЦен;
				лДок.СуммаВключаетНДС	= лДок.ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;
			
			лСтрТовара		= СТ_ЗначениеИзСтрокиВнутрТовар(ПолучитьРеквизит(item, "SKUcode"));
			
			Если Не ЗначениеЗаполнено(лСтрТовара.Товар) Тогда
				Продолжить;
			КонецЕсли;
			
			лКоличество		= ПолучитьРеквизитЧислом(item, "quantity");
			лОКЕИ			= СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(item, "unitcode"), "КлассификаторЕдиницИзмерения");
			лКоэффициент	= ПолучитьРеквизитЧислом(item, "unitfactor");
			лКоэффициент	= ?(лКоэффициент = 0, 1, лКоэффициент);
			лЕдиница		= ПолучитьЕдиницуТовара(лСтрТовара.Товар, лОКЕИ, лКоэффициент);
			лЦена			= ПолучитьРеквизитЧислом(item, "price") * лКоэффициент;
			
			лСкидкаПоТ		= 0;
			лСкидкаПоТ		= ПолучитьРеквизитЧислом(item, "discountRate"); 
            лСкидка = (лСкидкаПоТ + лСкидкаПоД)*(-1);  
			
		    Если лКоличество > 0 тогда
				лСтрока	= лДок.Товары.Добавить();
		    Иначе
				Продолжить;
			КонецЕсли;
			
			//++ Spl_Апроф 19.11.2014 (k.russkih@a-prof.ru)
			лСтрока.ЦенаЗагрузки		= лЦена;
			//-- Spl_Апроф
			лСтрока.Номенклатура		= лСтрТовара.Товар;
			лСтрока.ХарактеристикаНоменклатуры	= лСтрТовара.Характеристика;
			лСтрока.ЕдиницаИзмерения	= лЕдиница;
			лСтрока.Коэффициент			= лКоэффициент;
			лСтрока.Количество			= лКоличество/лКоэффициент;
			лСтрока.СтавкаНДС			= ?(лУчитыватьНДС, лСтрока.Номенклатура.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
			лСтрока.ПроцентСкидкиНаценки= лСкидка;

			//лДок.мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(лДок.Товары);
			//++ Spl_Апроф 19.11.2014 (k.russkih@a-prof.ru)
			лДок.ПриИзмененииНоменклатурыТоваров(лСтрока);

			лДок.ОбновимДанныеПоСуммамЗагрузки(лСтрока);
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(лСтрока, лДок);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(лСтрока, лДок);
 			
		КонецЦикла;
		
		// из процедуры ПриИзмененииДоговора() формы документа:
		
		// Зададим, какие реквизиты надо редактировать.
		СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(лДок);
	
		мМинимальныеЦены = Новый ТаблицаЗначений;
		мМинимальныеЦены.Колонки.Добавить("Номенклатура");
		мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
		мМинимальныеЦены.Колонки.Добавить("ЕдиницаИзмерения");
		мМинимальныеЦены.Колонки.Добавить("Цена");

		мСписокФильтров = УправлениеДопПравамиПользователей.ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа();
		мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(лДок.Товары);
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(ТекущаяДата(),ложь); 
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
		//СтруктураПараметров.Вставить("Карта",                               лДок.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                        лДок.УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                    лДок.СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мКонстантаВалюта);
		СтруктураПараметров.Вставить("УчетнаяПолитика",       				мУчетнаяПолитика);
		//ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(лДок, лДок.Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		
		//УстановитьДатуОплатыПоДоговору(лДок);
		
		//////////////////////////////////////////////////////////////////////////
		//СОХРАНЕНИЕ, ПРОВЕДЕНИЕ И РЕГИСТРАЦИЯ ДОКУМЕНТА
		///////////////////////////////////////////////////////////////////////////
		
		//++ Spl_Апроф 19.11.2014 (k.russkih@a-prof.ru)
		лДок.ПересчитатьЦены(Истина);
		
		лЗагруженОбъект	= Ложь;
		
		// запись документа в перую очередь
		Попытка
			лДок.Записать(РежимЗаписиДокумента.Запись);
			лЗагруженОбъект	= Истина;
			
		Исключение
	
			СообщитьПодробно("Невозможно записать" + " документ " + лДок, 2, 0, 2, "Ошибка");
			ВывестиВXMLЛог(,,"preorders; Не удалось записать новый документ "+лКодВнешний, ,"Audit_State_Fail");

		КонецПопытки;
		
		Если НЕ лЗагруженОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьСостояниеОбъекта(лДок.Ссылка, лКодВнутренний, лКодВнешний, лКодВнешнийПервый, лКодМаршрута, лДатаКПК, лКодКПК);		 			
		
		Если (лЗагруженОбъект) и (ЗначениеЗаполнено(лДок.Ссылка)) Тогда
			лСЗнДанные	= Новый СписокЗначений();
			лСЗнДанные.Добавить("" + лДок			, "Текст");
			лСЗнДанные.Добавить("Создан"			, "Параметр1");
			лСЗнДанные.Добавить(XMLВернутьВремя()	, "Параметр2");
			лСЗнДанные.Добавить(лДок.Организация	, "Реквизит1");
			лСЗнДанные.Добавить(лСотрудник			, "Реквизит2");
			лСЗнДанные.Добавить(лДок.Контрагент		, "Реквизит3");
			лСЗнДанные.Добавить(лДок.ДоговорКонтрагента, "Реквизит4");
			отчДобавитьВОтчет(лСЗнДанные, "Действие");
			
			СообщитьПодробно(?(лНадоПровести, "Проведен", "Записан") + " документ " + лДок, 2, 0, 1);
			
			ВывестиВXMLЛог(,,"preorders; "+?(лНадоПровести, "Проведен", "Записан") + " документ "+?(лСписокОшибокЗагруженногоДокумента.Количество()=0,Строка(лДок),", при загрузке возникли ошибки, см. лог"), СТ_ЗначениеВСтрокуВнутр(лДок.Ссылка));
			ВывестиВЛогОшибкиЗагруженногоДокумента(лСписокОшибокЗагруженногоДокумента, "preorders", СТ_ЗначениеВСтрокуВнутр(лДок.Ссылка));
		
		КонецЕсли;
		
		Если лНадоУдалить Тогда 
			лДок.УстановитьПометкуУдаления(Истина);
			СообщитьПодробно("Помечен на удаление документ " + лДок, 2, 0, 1);
			ВывестиВXMLЛог(,,"preorders; Помечен на удаление документ", СТ_ЗначениеВСтрокуВнутр(лДок.Ссылка));
		КонецЕсли;
		
	КонецЦикла;	//р = 0 По preorders.Length() - 1
	
КонецФункции	//ЗагрузитьДокЗаказы()  

Функция ЗагрузитьДокВозвраты(group, пВидЗначения)
	
	//<skusReturns> <!--Возврат товара-->
	//	<skusReturn>
	//		<innercode/> 				<!--номер документа в Чикаго-->
	//		<outercode/>				<!--номер документа в УС-->
	//		<innerparentcode/>			<!--номер документа-основания в Чикаго-->
	//		<outerparentcode/>			<!--номер документа-основания-->
	//		<innercodefirstversion/>	<!--номер первой версии документа в Чикаго-->
	//		
	//		<date/>						<!--дата создания документа (ГГГГ-ММ-ДД)-->
	//		<docno/>					<!--номер документа (nchar (50))-->
	//		<printdocnum/>				<!--номер документа в Чикаго для отображения-->
	//		<prndocnum/>				<!--печатный номер документа-->
	//		
	//		<creatorcode/>				<!--код автора документа - employees-->
	//		<deleted/>					<!--признак того, что документ был удален-->
	//		
	//		<firmcode/>					<!--код фирмы - firms-->
	//		<routecode/>				<!--маршрут сбора заказа - routes-->
	//		<employeecode/>				<!--код сотрудника, работавшего на маршруте - employees-->
	//		<buypointcode/>				<!--код торговой точки - buypoints-->
	//		<comment/>					<!--коментарий-->
	
	//		<storecode/>				<!--код склада-->
	//		<buyercode/>				<!--код покупателя - buyers-->
	//		<counteragentcode/>			<!--код контрагента - counteragents-->
	//		
	//		<deliveryroutecode/>		<!--маршрут доставки заказа - routes-->
	//		<deliverydate/>				<!--дата доставки заказа (ГГГГ-ММ-ДД)-->
	//		<deliverytimefrom/>			<!--время доставки заказа "с" (ЧЧ:ММ)-->
	//		<deliverytimetill/>			<!--время доставки заказа "по" (ЧЧ:ММ)-->
	//		
	//		<currencycode/>				<!--код валюты документа - currencies-->				
	//		<bw/>						<!--черная/белая 1=черная, 0=белая-->
	//		<paytypecode/>				<!--1-Оплата при отгрузке,2-Оплата с отсрочкой платежа,3-Предоплата-->
	//		
	//		<pdadocnum/>				<!--печатный номер документа в МТ-->
	//		<crdate/>					<!--дата создания документа-->
	//		<pdaroutecode/>				<!--код маршрута (только выгрузка из Чикаго)-->
	//		
	//		<body> <!--тело документа-->
	//			<item> <!--строка документа-->
	//				<SKUcode/>			<!--код товара - SKUs-->
	//				
	//				<unitcode/>			<!--код единицы измерения - units-->
	//				<unitfactor/>		<!--коэфициент пересчета единицы измерения в базовую (15, 6)-->
	//				<quantity/>			<!--количество в указанной единице измерения (15, 6)-->
	//				
	//				<price/>			<!--цена (15, 4)-->
	//				<amount/>			<!--сумма (15, 4)-->
	//				
	//				<VATAmount/>		<!--сумма НДС (15, 4)-->
	//				<Overdue/>			<!--1-просроченный товар,0-непросроченный-->
	//			</item>
	//		</body>
	//	</skusReturn>
	//</skusReturns>
	    	
	Попытка
		skusReturns	= group.selectSingleNode("skusReturns").childNodes();
	Исключение
		ВывестиВXMLЛог(,,"skusReturns; Нет данных для загрузки",,,"Audit_Reason_NoDataForObject");
		Возврат 0;
	КонецПопытки;
         		
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	//лДокументы	= Документы[пВидЗначения];
	лДокументы	= Документы.ПР_Претензия;
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Для р = 0 По skusReturns.Length() - 1 Цикл
		skusReturn	= skusReturns.Item(р);
		
		лСписокОшибокЗагруженногоДокумента = Новый СписокЗначений;
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		лКодВнешний			= ПолучитьРеквизит(skusReturn, "innercode");
		лКодВнешнийПервый	= ПолучитьРеквизит(skusReturn, "innercodefirstversion");
		лКодВнутренний		= ПолучитьРеквизит(skusReturn, "outercode");
		лНомерЧикаго        = ПолучитьРеквизит(skusReturn, "docno");
		
		лКодКПК				= ПолучитьРеквизит(skusReturn, "pdadocnum");
		лДатаКПК			= ПолучитьРеквизит(skusReturn, "crdate");
		лКодМаршрута		= ПолучитьРеквизит(skusReturn, "pdaroutecode");
		
		лДата 				= ПолучитьДатуИзСтроки(ПолучитьРеквизит(skusReturn, "date"));
		
		лНомерДокЧикаго 	= ПолучитьРеквизит(skusReturn, "innercode");
		
		лКодВнутреннийОснования	= ПолучитьРеквизит(skusReturn, "outerparentcode");
		лОснование	= ?(лКодВнутреннийОснования = "", "", СТ_ЗначениеИзСтрокиВнутр(лКодВнутреннийОснования, "РеализацияТоваровУслуг", "Док"));
		Если (лОснование <> "") и (ТипЗнч(лОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
			лНакладная	= лОснование;
		КонецЕсли;
		
		//Если НЕ ((лКодВнешнийПервый="0") Или (НадоЗагружатьОбъект(лКодВнутренний, лКодВнешнийПервый))) Тогда
		//	СообщитьПодробно("Документ пропущен, чикаго номер "+лНомерДокЧикаго+", имеется более ранняя версия", 2, 0, 2, "Ошибка");
		//	ВывестиВXMLЛог(,,"skusReturns; "+лКодВнешний+" имеется более рання версия, документ пропущен", ,"Audit_State_Fail",,);
		//	ЗаписатьСостояниеОбъекта("", "copyoforder" + лКодВнешнийПервый, лКодВнешний, лКодВнешнийПервый, лКодМаршрута, лДатаКПК, лКодКПК);
		//	Продолжить;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(лКодМаршрута) Тогда
			лКодКПК	= лКодМаршрута + "/" + лКодКПК;
		КонецЕсли;
		Если Найти(лДатаКПК, "-") > 0 Тогда
			лДатаКПК	= ПолучитьДатуИзСтроки(лДатаКПК);
		КонецЕсли;
		
		Если (лКодВнешний = "") и (лКодКПК = "") Тогда
			Продолжить;
		КонецЕсли;
		
		Если (лДата < НачалоДня(ДатаНачала)) или (лДата > КонецДня(ДатаКонца)) Тогда
			// пропускаем документы не текущего дня
			ЗаписатьСостояниеОбъекта("", лКодВнутренний, лКодВнешний, лКодВнешнийПервый, лКодМаршрута, лДатаКПК, лКодКПК);
			СообщитьПодробно("Документ не загружен, чикаго номер "+лКодВнешний+", дата документа "+Строка(лДата)+" не попадает в период загрузки", 2, 0, 2, "Ошибка");
			ВывестиВXMLЛог(,,"skusReturns; "+лКодВнешний+" не попадает в период загрузки, документ пропущен", ,"Audit_State_Fail",,);
			Продолжить;
		КонецЕсли;
		
		лНадоЗагружатьОбъект	= НЕ ЗначениеЗаполнено(лКодВнутренний);
		Если лНадоЗагружатьОбъект Тогда лНадоЗагружатьОбъект = НадоЗагружатьОбъект(лКодВнутренний, лКодВнешний); КонецЕсли;
		Если лНадоЗагружатьОбъект Тогда лНадоЗагружатьОбъект = НадоЗагружатьОбъект(лКодВнутренний, лКодВнешнийПервый); КонецЕсли;
		Если лНадоЗагружатьОбъект Тогда лНадоЗагружатьОбъект = НадоЗагружатьОбъектИзКПК(лКодМаршрута, лДатаКПК, лКодКПК); КонецЕсли;
		                                                                                
		лНадоПровести	= 0;
		лНадоУдалить	= ПолучитьРеквизитБулевый(skusReturn, "deleted");
			
		Если НЕ лНадоЗагружатьОбъект ИЛИ лНадоУдалить Тогда
			
			Если лКодВнешнийПервый<>лКодВнешний Тогда
				лКодВнутренний = "copyofskuret"+лКодВнешнийПервый;
				СообщитьПодробно("Документ пропущен, чикаго номер "+лКодВнешний+", имеется более ранняя версия", 2, 0, 2, "Ошибка");
				ВывестиВXMLЛог(,,"skusReturns; "+лКодВнешний+" имеется более рання версия, документ пропущен", ,"Audit_State_Fail",,);
 			КонецЕсли;

			ЗаписатьСостояниеОбъекта("", лКодВнутренний, лКодВнешний, лКодВнешнийПервый, лКодМаршрута, лДатаКПК, лКодКПК);
			Продолжить;
		КонецЕсли;
		
		лКонтрагент		= СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(skusReturn, "buyercode")		, "Контрагенты");
		лКонтрагент 	= ?(НЕ ЗначениеЗаполнено(лКонтрагент), мКонстантаОсновнойПокупатель, лКонтрагент);
		
		//++ Spl_Апроф 18.11.2014 (k.russkih@a-prof.ru)
		//лТорговаяТочка  = СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(skusReturn, "buypointcode")	, "алкПунктыРазгрузки");
		лТорговаяТочка = "";
						
		лФирма			= СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(skusReturn, "firmcode")		, "Организации");
		лФирма 			= ?(НЕ ЗначениеЗаполнено(лФирма), мКонстантаФирма, лФирма);
		
		лСотрудник		= СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(skusReturn, "employeecode")	, "ФизическиеЛица");
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		///////////////////////////////////////////////////////////////////////////
		//ЗАПОЛНЕНИЕ ШАПКИ ДОКУМЕНТА
		///////////////////////////////////////////////////////////////////////////
		
		//лСклад = СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(skusReturn, "storecode")	, "Склады");
		//лСклад = ?(НЕ ЗначениеЗаполнено(лСклад), мКонстантаСклад, лСклад);
		
		лКомментарийКПК   	= СокрЛП(ПолучитьРеквизит(skusReturn, "comment"));
		лКомментарий		= "Чикаго №"+ лНомерЧикаго + ?(лКомментарийКПК="", "", "; "+лКомментарийКПК);
				
		лВалюта				= мКонстантаВалюта;
		
		лУчитыватьНДС		= Истина;
		///////////////////////////////////////////////////////////////////////////
		//ЗАПОЛНЕНИЕ ШАПКИ ДОКУМЕНТА
		///////////////////////////////////////////////////////////////////////////
		
		лДок	= лДокументы.СоздатьДокумент();
		
		//лДок.АвтоРазмещение 	= Ложь;
		//лДок.АвтоРезервирование = Истина;
		
		Если мКонстантаДатаСозданияДокумента = истина тогда
			лДок.Дата			= лДата;
		Иначе
			лДок.Дата			= ТекущаяДата();
		КонецЕсли;
		
		лДок.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
		лДок.Организация		= лФирма;
		лДок.ВидПретензии		= Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаЧастично;
		//лДок.ВидПоступления 	= Перечисления.ВидыПоступленияТоваров.НаСклад;
		//Попытка
		//	лДок.Подразделение=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(НашТекущийПользователь, "ОсновноеПодразделение");
		//Исключение
		//КонецПопытки;
		
		лДок.Ответственный		= НашТекущийПользователь;
		
		лДок.Контрагент			= лКонтрагент;
		//лДок.алкПунктРазгрузки  = лТорговаяТочка;
		лДок.ДоговорКонтрагента = ПолучитьДоговор(лФирма, лКонтрагент, лСотрудник);
		
		//Если ЗначениеЗаполнено(лДок.ДоговорКонтрагента.ТипЦен) тогда
		//	лДок.ТипЦен				= лДок.ДоговорКонтрагента.ТипЦен;
		//Иначе
		//	лДок.ТипЦен				= мКонстантаТипЦен;
		//КонецЕсли;
		лДок.УчитыватьНДС 		= Истина;
		лДок.СуммаВключаетНДС	= лДок.лНакладная.СуммаВключаетНДС;
		лДок.ВалютаДокумента	= лВалюта;
		
		//Если ЗначениеЗаполнено(лВалюта) Тогда
		//	лСтруктура	= МодульВалютногоУчета.ПолучитьКурсВалюты(лВалюта, лДата);
		//	лДок.КурсВзаиморасчетов			= лСтруктура.Курс;
		//	лДок.КратностьВзаиморасчетов	= лСтруктура.Кратность;
		//КонецЕсли;
		
		лДок.Комментарий		= лКомментарий;
		//лДок.СкладОрдер		= лСклад;
				
		лДок.УчитыватьНДС		= лУчитыватьНДС;
		
		лДок.Накладная 			= лНакладная;
		лДок.ЗаполнимПоДаннымНакладной(лДок.Накладная);
				
		/////////////////////////////////////////////////////////////////////////////
		////ЗАПОЛНЕНИЕ ТАБЛИЧНОЙ ЧАСТИ ДОКУМЕНТА
		/////////////////////////////////////////////////////////////////////////////
		
		Попытка
			items	= skusReturn.selectSingleNode("body").selectNodes("item");
		Исключение
			СообщитьПодробно("ОШИБКА чтения табличной части возврата", 2, 0, 2, "Ошибка");
			ВывестиВXMLЛог(,,"skusReturns; "+лКодВнешний+" ОШИБКА чтения табличной части заказа", ,"Audit_State_Fail","Audit_Reason_Error",);
			Продолжить;
		КонецПопытки;
		
		мТовары_Загружаемые = лДок.Товары.Выгрузить();
		мТовары_Загружаемые.Очистить();
		
		Для м = 0 По items.Length() - 1 Цикл
			item	= items.Item(м);
			
			лСтрТовара		= СТ_ЗначениеИзСтрокиВнутрТовар(ПолучитьРеквизит(item, "SKUcode"));
			лХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			лКоличество		= ПолучитьРеквизитЧислом(item, "quantity");
			лОКЕИ			= СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(item, "unitcode"), "КлассификаторЕдиницИзмерения");
			лКоэффициент	= ПолучитьРеквизитЧислом(item, "unitfactor");
			лКоэффициент	= ?(лКоэффициент = 0, 1, лКоэффициент);
			лЕдиница		= ПолучитьЕдиницуТовара(лСтрТовара.Товар, лОКЕИ, лКоэффициент);
								 
		    Если лКоличество> 0 тогда
				//лСтрока	= лДок.Товары.Добавить();
				лСтрока	= мТовары_Загружаемые.Добавить();
		    Иначе
				Продолжить;
			КонецЕсли;
			
			лСтрока.Номенклатура		= лСтрТовара.Товар;
			лСтрока.ХарактеристикаНоменклатуры		= лСтрТовара.Характеристика;
			лСтрока.ЕдиницаИзмерения	= лЕдиница;
			лСтрока.Коэффициент			= лКоэффициент;
			лСтрока.Количество			= лКоличество;
			лСтрока.СтавкаНДС			= ?(лУчитыватьНДС, лСтрока.Номенклатура.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
			//лСтрока.Размещение 			= лСклад;
			//лСтрока.Качество			= Справочники.Качество.Новый;
			//ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(лСтрока, лДок, Константы.ВалютаРегламентированногоУчета.Получить()); 

			
			//лДок.мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(лДок.Товары);
			
 //   		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(лСтрока, лДок, "Реализация"); 
 //   		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(лСтрока, лДок, мКонстантаВалюта); 
 //   		лСтрока.Количество			= лКоличество;
 //   		// Рассчитать реквизиты табличной части.
 //   		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(лСтрока, лДок);
 //   		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(лСтрока, лДок);
 //
 //   		// Рассчитываем плановую себестоимость.
 //   		ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(лСтрока, лДок, мКонстантаВалюта);
			
		КонецЦикла;

		//++ Spl_Апроф 04.12.2014 (k.russkih@a-prof.ru) Заполним количество возврата
        Для каждого мСтрока Из мТовары_Загружаемые Цикл
		
			НайтиСтрока = лДок.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", мСтрока.Номенклатура, мСтрока.ХарактеристикаНоменклатуры));
			
			Если НЕ НайтиСтрока.Количество() = 0 Тогда
			
				НайтиСтрока[0].КоличествоВозврат = мСтрока.Количество;
			
			КонецЕсли; 
		
		КонецЦикла; 
		
		// из процедуры ПриИзмененииДоговора() формы документа:
		
		// Зададим, какие реквизиты надо редактировать.
	//	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(лДок);
	//
	//	мМинимальныеЦены = Новый ТаблицаЗначений;
	//	мМинимальныеЦены.Колонки.Добавить("Номенклатура");
	//	мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
	//	мМинимальныеЦены.Колонки.Добавить("ЕдиницаИзмерения");
	//	мМинимальныеЦены.Колонки.Добавить("Цена");

	//	мСписокФильтров = УправлениеДопПравамиПользователей.ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа();
	//	мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(лДок.Товары);
	//	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(ТекущаяДата(),ложь); 
	//	
	//	СтруктураПараметров = Новый Структура;
	//	СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
	//	СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
	//	//СтруктураПараметров.Вставить("Карта",                               лДок.ДисконтнаяКарта);
	//	СтруктураПараметров.Вставить("УчитыватьНДС",                        лДок.УчитыватьНДС);
	//	СтруктураПараметров.Вставить("СуммаВключаетНДС",                    лДок.СуммаВключаетНДС);
	//	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мКонстантаВалюта);
	//	СтруктураПараметров.Вставить("УчетнаяПолитика",       				мУчетнаяПолитика);
	//	ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(лДок, лДок.Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		
		
		//////////////////////////////////////////////////////////////////////////
		//СОХРАНЕНИЕ, ПРОВЕДЕНИЕ И РЕГИСТРАЦИЯ ДОКУМЕНТА
		///////////////////////////////////////////////////////////////////////////
	
		лЗагруженОбъект	= Ложь;
		лРежимЗаписи	= ?(лНадоПровести, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		
		// запись документа в перую очередь
		//Попытка
			лДок.Записать(РежимЗаписиДокумента.Запись);
			лЗагруженОбъект	= Истина;
			
		//Исключение
	
			СообщитьПодробно("Невозможно записать" + " документ " + лДок, 2, 0, 2, "Ошибка");
			ВывестиВXMLЛог(,,"skusReturns; Не удалось записать новый документ "+лКодВнешний, ,"Audit_State_Fail");

		//КонецПопытки;
		
		Если лРежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Попытка
				ДокументЗаказПокупателяПересч = лДок.Ссылка.ПолучитьОбъект();
				ДокументЗаказПокупателяПересч.Записать(лРежимЗаписи);
			Исключение
	
				СообщитьПодробно("Невозможно провести" + " документ " + лДок, 2, 0, 2, "Ошибка");
				лСписокОшибокЗагруженногоДокумента.Добавить("Не удалось провести документ");

			КонецПопытки;
		КонецЕсли;
		
		Если НЕ лЗагруженОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьСостояниеОбъекта(лДок.Ссылка, лКодВнутренний, лКодВнешний, лКодВнешнийПервый, лКодМаршрута, лДатаКПК, лКодКПК);		 			
		
		Если (лЗагруженОбъект) и (ЗначениеЗаполнено(лДок.Ссылка)) Тогда
			лСЗнДанные	= Новый СписокЗначений();
			лСЗнДанные.Добавить("" + лДок			, "Текст");
			лСЗнДанные.Добавить("Создан"			, "Параметр1");
			лСЗнДанные.Добавить(XMLВернутьВремя()	, "Параметр2");
			лСЗнДанные.Добавить(лДок.Организация	, "Реквизит1");
			лСЗнДанные.Добавить(лСотрудник			, "Реквизит2");
			лСЗнДанные.Добавить(лДок.Контрагент		, "Реквизит3");
			лСЗнДанные.Добавить(лДок.ДоговорКонтрагента, "Реквизит4");
			отчДобавитьВОтчет(лСЗнДанные, "Действие");
			
			СообщитьПодробно(?(лНадоПровести, "Проведен", "Записан") + " документ " + лДок, 2, 0, 1);
			
			ВывестиВXMLЛог(,,"skusReturns; "+?(лНадоПровести, "Проведен", "Записан") + " документ "+?(лСписокОшибокЗагруженногоДокумента.Количество()=0,Строка(лДок),", при загрузке возникли ошибки, см. лог"), СТ_ЗначениеВСтрокуВнутр(лДок.Ссылка));
			ВывестиВЛогОшибкиЗагруженногоДокумента(лСписокОшибокЗагруженногоДокумента, "preorders", СТ_ЗначениеВСтрокуВнутр(лДок.Ссылка));
		
		КонецЕсли;
		
		Если лНадоУдалить Тогда 
			лДок.УстановитьПометкуУдаления(Истина);
			СообщитьПодробно("Помечен на удаление документ " + лДок, 2, 0, 1);
			ВывестиВXMLЛог(,,"skusReturns; Помечен на удаление документ", СТ_ЗначениеВСтрокуВнутр(лДок.Ссылка));
		КонецЕсли;
		
	КонецЦикла;	//р = 0 По preorders.Length() - 1
	

	
КонецФункции

Функция ЗагрузитьДокОплаты(group, пВидЗначения) 
	
	//<receiptcashorders>
	//	<receiptcashorder>
	//		<innercode/> 				<!--номер документа в Чикаго-->
	//		<outercode/>				<!--номер документа в УС-->
	//		<innerparentcode/>			<!--номер документа-основания в Чикаго-->
	//		<outerparentcode/>			<!--номер документа-основания-->
	//		<innercodefirstversion/>	<!--номер первой версии документа в Чикаго-->
	//		
	//		<date/>						<!--дата создания документа (ГГГГ-ММ-ДД)-->
	//		<docno/>					<!--номер документа (nchar (50))-->
	//		<printdocnum/>				<!--номер документа в Чикаго для отображения-->
	//		<prndocnum/>				<!--печатный номер документа-->
	//		
	//		<creatorcode/>				<!--код автора документа - employees-->
	//		<deleted/>					<!--признак того, что документ был удален-->
	//		
	//		<firmcode/>					<!--код фирмы - firms-->
	//		<routecode/>				<!--маршрут сбора заказа - routes-->
	//		<employeecode/>				<!--код сотрудника, работавшего на маршруте - employees-->
	//		<buypointcode/>				<!--код торговой точки - buypoints-->
	//		<comment/>					<!--коментарий-->
	//		
	//		<buyercode/>				<!--код покупателя - buyers-->
	//		<counteragentcode/>			<!--код контрагента - counteragents-->
	//		<cashregistercode/>			<!--код кассы - cashregisters-->
	//		
	//		<currencycode/>				<!--код валюты документа - currencies-->				
	//		<amount/>					<!--сумма (15, 4)-->
	//		<pdadocnum/>				<!--печатный номер документа в МТ-->
	//		<crdate/>					<!--дата создания документа-->
	//		<pdaroutecode/>				<!--код маршрута (только выгрузка из Чикаго)-->
	//	</receiptcashorder>
	//</receiptcashorders>
	
	Попытка
		receiptcashorders	= group.selectSingleNode("receiptcashorders").childNodes();
	Исключение
		Возврат 0;
	КонецПопытки;
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	лДокументы	= Документы[пВидЗначения];
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Для р = 0 По receiptcashorders.Length() - 1 Цикл
		receiptcashorder	= receiptcashorders.Item(р);
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		лКодВнешний			= ПолучитьРеквизит(receiptcashorder, "innercode");
		лКодВнешнийПервый	= ПолучитьРеквизит(receiptcashorder, "innercodefirstversion");
		лКодВнутренний		= ПолучитьРеквизит(receiptcashorder, "outercode");
		
		лКодКПК				= ПолучитьРеквизит(receiptcashorder, "pdadocnum");
		лДатаКПК			= ПолучитьРеквизит(receiptcashorder, "crdate");
		лКодМаршрута		= ПолучитьРеквизит(receiptcashorder, "pdaroutecode");
		
		лДата				= ПолучитьДатуИзСтроки(ПолучитьРеквизит(receiptcashorder, "date"));
		
		лНомерДокЧикаго 	= ПолучитьРеквизит(receiptcashorder, "docno");
		
		Если (лКодВнешний = "") и (лКодКПК = "") Тогда
			Продолжить;
		КонецЕсли;
		
		//// к синхронизации принимаем только первую версию документа
		//Если НЕ ((лКодВнешнийПервый="0") Или (НадоЗагружатьОбъект(лКодВнутренний, лКодВнешнийПервый))) Тогда
		//	СообщитьПодробно("Документ пропущен, чикаго номер "+лНомерДокЧикаго+", имеется более ранняя версия", 2, 0, 2, "Ошибка");
		//	ЗаписатьСостояниеОбъекта("", "copyoforder" + лКодВнешнийПервый, лКодВнешний, лКодВнешнийПервый, лКодМаршрута, лДатаКПК, лКодКПК);
		//	Продолжить;
		//КонецЕсли;
		
		Если (лДата < НачалоДня(ТекущаяДата())) или (лДата > КонецДня(ТекущаяДата())) Тогда
			// пропускаем документы не текущего дня
			ЗаписатьСостояниеОбъекта("", лКодВнутренний, лКодВнешний, лКодВнешнийПервый, лКодМаршрута, лДатаКПК, лКодКПК);
			СообщитьПодробно("Документ не загружен, чикаго номер "+лНомерДокЧикаго+", дата документа "+Строка(лДата)+" отличается от текущей", 2, 0, 2, "Ошибка");
			Продолжить;
		КонецЕсли;
		
		лНадоЗагружатьОбъект	= НЕ ЗначениеЗаполнено(лКодВнутренний);
		Если лНадоЗагружатьОбъект Тогда лНадоЗагружатьОбъект = НадоЗагружатьОбъект(лКодВнутренний, лКодВнешний); КонецЕсли;
		Если лНадоЗагружатьОбъект Тогда лНадоЗагружатьОбъект = НадоЗагружатьОбъектИзКПК(лКодМаршрута, лДатаКПК, лКодКПК); КонецЕсли;
		
		лНадоПровести	= Ложь;
		лНадоУдалить	= ПолучитьРеквизитБулевый(receiptcashorder, "deleted");
		
		Если НЕ лНадоЗагружатьОбъект или лНадоУдалить Тогда
			
			Если лКодВнешнийПервый<>лКодВнешний Тогда
				лКодВнутренний = "copyofcashorder"+лКодВнешнийПервый;
				СообщитьПодробно("Документ пропущен, чикаго номер "+лКодВнешний+", имеется более ранняя версия", 2, 0, 2, "Ошибка");
 			КонецЕсли;

			ЗаписатьСостояниеОбъекта("", лКодВнутренний, лКодВнешний, лКодВнешнийПервый, лКодМаршрута, лДатаКПК, лКодКПК);
			Продолжить;
		КонецЕсли;
		
		лКонтрагент		= СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(receiptcashorder, "buyercode")		, "Контрагенты");
		лКонтрагент 	= ?(НЕ ЗначениеЗаполнено(лКонтрагент), мКонстантаОсновнойПокупатель, лКонтрагент);
		
		лФирма			= СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(receiptcashorder, "firmcode")	, "Организации");
		лАгент 			= СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(receiptcashorder, "routecode")	, "ФизическиеЛица");
       		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		///////////////////////////////////////////////////////////////////////////
		//ЗАПОЛНЕНИЕ ШАПКИ ДОКУМЕНТА
		///////////////////////////////////////////////////////////////////////////
		
		//лПечатныйНомер	= ПолучитьРеквизит(receiptcashorder, "prndocnum");
		лКасса			= мКонстантаКасса;
		лКомментарий    = "Создан загрузкой заказов из Чикаго, документ №"+ лНомерДокЧикаго;
		лКомментарий	= лКомментарий +  "; "+ПолучитьРеквизит(receiptcashorder, "comment");
		
		лДок	= лДокументы.СоздатьДокумент();
		
		Если мКонстантаДатаСозданияДокумента = истина тогда
			лДок.Дата			= лДата;
		Иначе
			лДок.Дата			= ТекущаяДата();
		КонецЕсли;
		лДок.ВидОперации	= Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		лДок.Основание 		= "За поставленный товар";
		
		лДок.Организация		= лФирма;
		
		лДок.Контрагент			= лКонтрагент;
		лДок.ДоговорКонтрагента	= ПолучитьДоговор(лФирма, лКонтрагент, лАгент);
		лДок.ПринятоОт			= лКонтрагент.НаименованиеПолное;
		//лДок.Касса				= лКасса;
		
		лДок.Ответственный		= НашТекущийПользователь;
	    лДок.СтавкаНДС			= Перечисления.СтавкиНДС.БезНДС;
		
		лВалюта					= СТ_ЗначениеИзСтрокиВнутр(ПолучитьРеквизит(receiptcashorder, "currencycode"), "Валюты");
		лВалюта 				= ?(НЕ ЗначениеЗаполнено(лВалюта),мКонстантаВалюта,лВалюта);
		лДок.ВалютаДокумента	= лВалюта;
		лСтруктура				= МодульВалютногоУчета.ПолучитьКурсВалюты(лВалюта, лДата);
		
		лДок.СуммаДокумента		= ПолучитьРеквизитЧислом(receiptcashorder, "amount");
		
		лДок.Комментарий		= лКомментарий;
		лДок.ОтражатьВУправленческомУчете	= Истина;
		//лДок.ОтражатьВБухгалтерскомУчете	= Истина;
		//лДок.ОтражатьВНалоговомУчете 		= Истина;
		//лДок.ОтраженоВОперУчете			= Истина;
		//лДок.Оплачено						= Истина;
		
		//лДок.Подразделение	= лПодразделение;

		// заполнение табличной части
		лСтрокаПлатежа	= лДок.РасшифровкаПлатежа.Добавить();
		лСтрокаПлатежа.ДоговорКонтрагента		= лДок.ДоговорКонтрагента;
		лСтрокаПлатежа.КурсВзаиморасчетов		= лСтруктура.Курс;
		лСтрокаПлатежа.КратностьВзаиморасчетов	= лСтруктура.Кратность;
		лСтрокаПлатежа.СуммаПлатежа				= лДок.СуммаДокумента;
		лСтрокаПлатежа.СуммаВзаиморасчетов		= лДок.СуммаДокумента;
		лСтрокаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Поступление от покупателей");
		лСтрокаПлатежа.СтавкаНДС				= Перечисления.СтавкиНДС.БезНДС;
		
		//УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(лСтрокаПлатежа);
		
		лКодВнутреннийОснования	= ПолучитьРеквизит(receiptcashorder, "outerparentcode");
		лОснование	= ?(лКодВнутреннийОснования = "", "", СТ_ЗначениеИзСтрокиВнутр(лКодВнутреннийОснования, "РеализацияТоваровУслуг", "Док"));
		Если (лОснование <> "") и (ТипЗнч(лОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
			лДок.ДокументОснование	= лОснование;
		КонецЕсли;
		
		// конец табличной части
		
		///////////////////////////////////////////////////////////////////////////
		//ПОСЛЕДНИЙ ШТРИХ ПО ЗАПОЛНЕНИЮ ДОКУМЕНТА
		///////////////////////////////////////////////////////////////////////////
		
		//ОбщегоНазначения.УстановитьНомерДокумента(лДок);
		
		///////////////////////////////////////////////////////////////////////////
		//СОХРАНЕНИЕ, ПРОВЕДЕНИЕ И РЕГИСТРАЦИЯ ДОКУМЕНТА
		///////////////////////////////////////////////////////////////////////////
		
		лЗагруженОбъект	= Ложь;
		лРежимЗаписи	= РежимЗаписиДокумента.Запись; // только записываем документ
		//Попытка
			лДок.Записать(лРежимЗаписи);
    		Сообщить("		" + ?(лНадоПровести, "Проведен", "Записан") + " документ " + лДок);
			лЗагруженОбъект	= Истина;
		//Исключение
		//	Сообщить("		Невозможно записать документ " + лДок, СтатусСообщения.Важное);
		//КонецПопытки;
		
		Если НЕ лЗагруженОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьСостояниеОбъекта(лДок.Ссылка, лКодВнутренний, лКодВнешний, лКодВнешнийПервый, лКодМаршрута, лДатаКПК, лКодКПК);
		
		Если (лЗагруженОбъект) и (ЗначениеЗаполнено(лДок.Ссылка)) Тогда
			лСЗнДанные	= Новый СписокЗначений();
			лСЗнДанные.Добавить("" + лДок			, "Текст");
			лСЗнДанные.Добавить("Создан"			, "Параметр1");
			лСЗнДанные.Добавить(XMLВернутьВремя()	, "Параметр2");
			лСЗнДанные.Добавить(лДок.Организация	, "Реквизит1");
			лСЗнДанные.Добавить(НашТекущийПользователь	, "Реквизит2");
			лСЗнДанные.Добавить(лДок.Контрагент		, "Реквизит3");
			отчДобавитьВОтчет(лСЗнДанные, "Действие");
			
			СообщитьПодробно("Записан документ " + лДок, 2, 0, 1);
		КонецЕсли;
		
	КонецЦикла;	//р = 0 По receiptcashorders.Length() - 1
	
КонецФункции	//ЗагрузитьДокОплаты()

//****************************************
Процедура ЗагрузитьПодтверждения(лИмяФайлаЗагрузки = "")
	
	Если лИмяФайлаЗагрузки = "" Тогда
		Возврат;
	КонецЕсли;
	
	лФайл	= Новый Файл(мКаталогДанных + "confirmation\" + лИмяФайлаЗагрузки + ".xml");
	Если Не лФайл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ДокXML	= Новый COMОбъект(мТипXMLБибилиотеки);
	ДокXML.Load(мКаталогДанных + "confirmation\" + лИмяФайлаЗагрузки + ".xml");
	
	Попытка
		group	= ДокXML.selectSingleNode("confirmations");
	Исключение
		Возврат;
	КонецПопытки;
	
	лЧислоДокументов	= 0;
	Попытка
		//docs	= group.selectSingleNode("confirmations").selectNodes("*");
		docs	= group.selectSingleNode("confirmations").selectNodes("doc");
		лЧислоДокументов	= docs.Length();
	Исключение
		Возврат;
	КонецПопытки;
	
	мКолвоОбъектов	= 0;
	лВремяНачала	= XMLВернутьВремя();
	лСЗнДанные	= Новый СписокЗначений();
	лСЗнДанные.Добавить(лИмяФайлаЗагрузки + ".xml, всего:"	, "Текст");
	лСЗнДанные.Добавить(лВремяНачала						, "Параметр1");
	лСЗнДанные.Добавить(лЧислоДокументов					, "Параметр2");
	отчДобавитьВОтчет(лСЗнДанные, "Действие");
	
	Для р = 0 По лЧислоДокументов - 1 Цикл
		doc	= docs.Item(р);
		лКодВнешний		= ПолучитьРеквизит(doc, "chicagocode");
		лКодВнутренний	= ПолучитьРеквизит(doc, "outercode");
		лКодКПК			= ПолучитьРеквизит(doc, "pdadocnum");
		лДатаКПК		= ПолучитьРеквизит(doc, "crdate");
		лКодМаршрута	= ПолучитьРеквизит(doc, "pdaroutecode");
		Если лКодМаршрута <> "" Тогда
			лКодКПК	= лКодМаршрута + "/" + лКодКПК;
		КонецЕсли;
		Если лКодКПК = "0" Тогда
			лКодКПК	= "";
		КонецЕсли;
		
		Если лКодВнутренний = "" Тогда
			Продолжить;
		КонецЕсли;
		
		лОбъект			= "";
		лПрежнийКодВнешний	= "";
		лПрежнийКодКПК		= "";
		лПрежнийКодХеш		= "";
		лПрежнийДатаКПК		= "";
		лПрежнийТипОбъекта	= "";
		
		лЗаписыватьСостояние	= Ложь;
		лУдалятьСостояние		= Ложь;
		лОтбор			= Новый Структура("КодВнутренний", лКодВнутренний);
		лВыборка		= РегистрыСведений.СТ_СостоянияОбъектов.Выбрать(лОтбор);
		Пока лВыборка.Следующий() Цикл
			Если лВыборка.ТипОбъекта = "from chicago" Тогда
				Продолжить;
			КонецЕсли;
			
			Если лВыборка.КодВнешний = лКодВнешний Тогда
				Прервать;
			КонецЕсли;
			
			лОбъект				= лВыборка.Объект;
			лПрежнийКодВнешний	= лВыборка.КодВнешний;
			лПрежнийКодКПК		= лВыборка.КодКПК;
			
			лПрежнийКодХеш		= лВыборка.КодХеш;
			лПрежнийДатаКПК		= лВыборка.ДатаКПК;
			лПрежнийТипОбъекта	= лВыборка.ТипОбъекта;
			
			лЗаписыватьСостояние	= Истина;
			лУдалятьСостояние		= Истина;
			Прервать;
		КонецЦикла;
		
		Если лУдалятьСостояние Тогда
			лСостояния	= РегистрыСведений.СТ_СостоянияОбъектов.СоздатьМенеджерЗаписи();
			лСостояния.Объект			= лОбъект;
			лСостояния.КодВнутренний	= лКодВнутренний;
			лСостояния.КодВнешний		= лПрежнийКодВнешний;
			лСостояния.КодКПК			= лПрежнийКодКПК;
			лСостояния.Удалить();
		КонецЕсли;
		
		Если лЗаписыватьСостояние Тогда
			лСостояния.Объект			= лОбъект;
			лСостояния.КодВнутренний	= лКодВнутренний;
			лСостояния.КодВнешний		= лКодВнешний;
			лСостояния.КодКПК			= ?(лКодКПК = "", лПрежнийКодКПК, лКодКПК);
			лСостояния.ДатаКПК			= ?(лДатаКПК = "", лПрежнийДатаКПК, лДатаКПК);
			лСостояния.КодХеш			= лПрежнийКодХеш;
			лСостояния.ТипОбъекта		= лПрежнийТипОбъекта;
			Попытка
			лСостояния.Записать();
		Исключение
	//		Инфо = ИнформацияОбОшибке();
	//Стр= Инфо.ИсходнаяСтрока ;
	//	
	//Тек=Новый ТекстовыйДокумент ;
	//Им=ТекущаяДата();
	//Им=СтрЗаменить(Им," ","_");
	//Им=СтрЗаменить(Им,":","_");
	//Им=СтрЗаменить(Им,".","_");
	//Сообщить("Записываем "+ИМ);
	////Предупреждение("Записываем "+ИМ);
	//ИмяТек=мКаталогДанных+"\"+СокрЛП(Им)+".TXT";
	//
	//Стр= Инфо.ИсходнаяСтрока ;
	//Тек.ДобавитьСтроку(Стр);  	
	//
	//Стр= Инфо.НомерСтроки ;
	//Тек.ДобавитьСтроку(Стр);
	//
	//Стр= Инфо.Описание ;
	//Тек.ДобавитьСтроку(Стр); 
	//
	//Тек.Записать(ИмяТек);

			КонецПопытки;
			
			мКолвоОбъектов	= мКолвоОбъектов + 1;
		КонецЕсли;
	КонецЦикла;
	
	лВремяКонца	= XMLВернутьВремя();
	лСЗнДанные	= Новый СписокЗначений();
	лСЗнДанные.Добавить(лИмяФайлаЗагрузки + ".xml, загружено:"	, "Текст");
	лСЗнДанные.Добавить(лВремяКонца								, "Параметр1");
	лСЗнДанные.Добавить(мКолвоОбъектов							, "Параметр2");
	отчДобавитьВОтчет(лСЗнДанные, "Действие");
	
КонецПроцедуры	//ЗагрузитьПодтверждения()

//****************************************
Процедура ЗагрузитьДокументы(пИмяФайлаЗагрузки = "")
	
	Если НЕ ЗначениеЗаполнено(пИмяФайлаЗагрузки) Тогда
		Возврат;
	КонецЕсли;
	
	лПолноеИмяФайлаЗагрузки	= "chicago\documentsYYYYMMDDHHMMSS.xml";
	лПолноеИмяФайлаЗагрузки	= СтрЗаменить(лПолноеИмяФайлаЗагрузки, "documentsYYYYMMDDHHMMSS.xml", пИмяФайлаЗагрузки + ".xml");
	лФайл	= Новый Файл(мКаталогДанных + лПолноеИмяФайлаЗагрузки);
	Если НЕ лФайл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ДокXML	= Новый COMОбъект(мТипXMLБибилиотеки);
	ДокXML.Load(мКаталогДанных + лПолноеИмяФайлаЗагрузки);
	
	Попытка
		group	= ДокXML.selectSingleNode("documents");
	Исключение
		Возврат;
	КонецПопытки;
	
	////////////////////////////////////////////////////
	//СОЗДАНИЕ ФАЙЛА ПОДТВЕРЖДЕНИЙ (начало)
	////////////////////////////////////////////////////
	
	ДокXMLConf	= Новый COMОбъект(мТипXMLБибилиотеки);
	лИмяПодтверждения		= "confirmationYYYYMMDDHHMMSS";
	лИмяПодтверждения		= СоздатьИмяФайлаИзШаблона(лИмяПодтверждения);
	лИмяФайлаПодтверждений	= "confirmation\" + лИмяПодтверждения + ".xml";
	
	лПолноеИмяФайлаПодтверждений	= мКаталогДанных + лИмяФайлаПодтверждений;
	confirmationsRoot = xmlВыполнитьОперацию("СоздатьXML", ДокXMLConf, лПолноеИмяФайлаПодтверждений, "confirmations", );
	confirmations = ДокXMLConf.CreateElement("confirmations");
	
	////////////////////////////////////////////////////
	//СОЗДАНИЕ ФАЙЛА ПОДТВЕРЖДЕНИЙ (конец)
	////////////////////////////////////////////////////
	
	Для Каждого лОбъектЗагрузки Из ОбъектыЗагрузки Цикл
		Если лОбъектЗагрузки.ТипОбъектов <> "Д" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ лОбъектЗагрузки.Включен Тогда
			Продолжить;
		КонецЕсли;
		
		лНазвание		= лОбъектЗагрузки.Название;
		лПредставление	= лОбъектЗагрузки.Представление;
		лВидЗначения	= лОбъектЗагрузки.ВидЗначения;
		лXMLСекция		= лОбъектЗагрузки.XMLСекция;
		
		//Если НЕ АвтоматическийЗапуск и НЕ НадоЗагружать(лНазвание) Тогда
		Если НЕ НадоЗагружать(лНазвание) Тогда
			Продолжить;
		КонецЕсли;
		
		мКолвоОбъектов	= 0;
		лВремяНачала	= XMLВернутьВремя();
		СообщитьПодробно("Загрузка данных """ + лПредставление + """.....", 1, 1, 1);
		
		лПроцедура	= лОбъектЗагрузки.Процедура;
		Выполнить(лПроцедура + "(group, лВидЗначения)");
		
		СообщитьПодробно("Загрузка данных """ + лПредставление + """ завершена.....", 1, 1, 1);
	КонецЦикла;
	
	////////////////////////////////////////////////////
	//СОХРАНЕНИЕ ФАЙЛА ПОДТВЕРЖДЕНИЙ (начало)
	////////////////////////////////////////////////////
	
	Если confirmations.childNodes().length() > 0 Тогда
		confirmationsRoot.AppendChild(confirmations);
		ДокXMLConf.AppendChild(confirmationsRoot);
		Если СоздатьНесуществующиеПодкаталоги(лПолноеИмяФайлаПодтверждений) = 0 Тогда
			СообщитьПодробно("Не удалось сохранить файл " + лПолноеИмяФайлаПодтверждений, 2, 0, 2, "Ошибка");
			Возврат;
		КонецЕсли;
		ДокXMLConf.Save(лПолноеИмяФайлаПодтверждений);
		
		confirmation = ДокXMLConfLog.CreateElement(лИмяПодтверждения);
		confirmation.SetAttribute("status", "false");
		confGroup.AppendChild(confirmation);
	КонецЕсли;
	
	////////////////////////////////////////////////////
	//СОХРАНЕНИЕ ФАЙЛА ПОДТВЕРЖДЕНИЙ (конец)
	////////////////////////////////////////////////////
	
КонецПроцедуры	//ЗагрузитьДокументы()

//***********************************************//
//***********************************************//
// Процедуры загрузки документов                 //
//                    К О Н Е Ц                  //
//***********************************************//
//***********************************************//


//****************************************
Функция ПроверитьПараметрыЗагрузки()
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		СообщитьПодробно("Дата начала должна быть заполнена!", 2, 0, 4);
		Возврат 0;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДатаКонца) Тогда
		СообщитьПодробно("Дата конца должна быть заполнена!", 2, 0, 4);
		Возврат 0;
	КонецЕсли;

	Если ДатаНачала > ДатаКонца Тогда
		СообщитьПодробно("Дата начала не должна превосходить дату конца!", 2, 0, 4);
		Возврат 0;
	КонецЕсли;
	
	//Если ДатаКонца > ТекущаяДата() Тогда
	//	ДатаКонца	= ТекущаяДата() + 4;
	//КонецЕсли;
	Если ДатаНачала > ДатаКонца Тогда
		ДатаНачала	= ДатаКонца;
	КонецЕсли;	
	
	//Если ОтборНеЗаполнен("Сотрудники") Тогда
	//	СообщитьПодробно("Не установлен обязательный фильтр по сотрудникам!", 2, 0, 4);
	//	Возврат 0;
	//КонецЕсли;
	
	Возврат 1;
	
КонецФункции	//ПроверитьПараметрыЗагрузки()

//****************************************
Процедура ИзменитьПометкиЗагружаемыхОбъектов(пТип = Истина) Экспорт
	
	Для Каждого лОбъектСписка Из СЗнОбъекты Цикл
		лНазвание	= лОбъектСписка.Значение;
		лПометка	= лОбъектСписка.Пометка;
		
		Если ФлажокПодробно = пТип Тогда
			лСтрока		= ОбъектыЗагрузки.Найти(лНазвание, "Название");
		Иначе
			лСтрока		= ГруппыЗагрузки.Найти(лНазвание, "Название");
		КонецЕсли;
		
		Если лСтрока <> Неопределено Тогда
			лСтрока.Отметка	= лПометка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	//ИзменитьПометкиЗагружаемыхОбъектов()

//****************************************
Процедура ОбновитьСписокЗагружаемыхОбъектов(Режим = "") Экспорт
	
	//Если Режим = "ОбновлениеСпискаПараметров" Тогда 
	//	// передан параметр преднастроенных объектов обмена, перезаполняем список параметров соглассно источнику вызова
	//	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
	//		Если ДополнительныеПараметры.СписокПараметров.Количество() <> 0 Тогда
	//			СЗнОбъекты.Очистить();
	//			
	//			Для Каждого строкаПараметра Из ДополнительныеПараметры.СписокПараметров Цикл
	//				СЗнОбъекты.Добавить(строкаПараметра.Наименование, строкаПараметра.Представление, строкаПараметра.Пометка); //Отметка);
	//			КонецЦикла;
	//		КонецЕсли;
	//	КонецЕсли;
	//Иначе
	ФлажокПодробно=Истина;
		СЗнОбъекты.Очистить();
		Если ФлажокПодробно Тогда
			Для Каждого лОбъектЗагрузки Из ОбъектыЗагрузки Цикл
				Если лОбъектЗагрузки.Включен Тогда
					СЗнОбъекты.Добавить(лОбъектЗагрузки.Название, лОбъектЗагрузки.Представление, лОбъектЗагрузки.Отметка); //ПоУмолчанию);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Для Каждого лГруппаЗагрузки Из ГруппыЗагрузки Цикл
				СЗнОбъекты.Добавить(лГруппаЗагрузки.Название, лГруппаЗагрузки.Представление, лГруппаЗагрузки.Отметка); //ПоУмолчанию);
			КонецЦикла;
		КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры	//ОбновитьСписокЗагружаемыхОбъектов()

//****************************************
Функция ПрочитатьНастройкуИзТаблицы(пОбласть, пВысота, пНазвание)
	
	лЗначение	= "";
	Для р = 1 По пВысота Цикл
		лНазвание	= пОбласть.Область(р, 3, р, 3).Текст;
		Если лНазвание = пНазвание Тогда
			лЗначение	= пОбласть.Область(р, 4, р, 4).Текст;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат лЗначение;
	
КонецФункции	//ПрочитатьНастройкуИзТаблицы()

//****************************************
Процедура ПрочитатьНастройкиИзТаблицы(пПолностью = 1)
	
	лТаблица	= ПолучитьМакет("Настройки");
	
	//////////////////////////////
	//1 - Общие настройки		//
	//////////////////////////////
	Если пПолностью = 1 Тогда
		лОбласть	= лТаблица.ПолучитьОбласть("ОбщиеНастройки");
		лВысота		= лОбласть.ВысотаТаблицы;
		
		мИнфоКомпания			= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Компания:");
		мИнфоКодДистрибьютора	= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Дистрибьютор:");
		мИнфоВерсия				= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Версия:");
		мИнфоДата				= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Дата:");
		
		мИнфоКаталогДанных		= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Каталог обмена:");
		мИнфоИмяКомпьютера		= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Имя компьютера:");
		мИмяПользователя		= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Имя пользователя:");
	КонецЕсли;
	
	//////////////////////////////
	//2 - Объекты загрузки		//
	//////////////////////////////
	
	лОбласть	= лТаблица.ПолучитьОбласть("ОбъектыЗагрузки");
	лВысота		= лОбласть.ВысотаТаблицы;
	
	//инициализация списка выгружаемых объектов
	Если ОбъектыЗагрузки.Колонки.Найти("Название") = Неопределено		Тогда ОбъектыЗагрузки.Колонки.Добавить("Название"); КонецЕсли;
	Если ОбъектыЗагрузки.Колонки.Найти("Представление") = Неопределено	Тогда ОбъектыЗагрузки.Колонки.Добавить("Представление"); КонецЕсли;
	Если ОбъектыЗагрузки.Колонки.Найти("Отметка") = Неопределено		Тогда ОбъектыЗагрузки.Колонки.Добавить("Отметка"); КонецЕсли;
	Если ОбъектыЗагрузки.Колонки.Найти("КодГруппы") = Неопределено		Тогда ОбъектыЗагрузки.Колонки.Добавить("КодГруппы"); КонецЕсли;
	Если ОбъектыЗагрузки.Колонки.Найти("ТипОбъектов") = Неопределено	Тогда ОбъектыЗагрузки.Колонки.Добавить("ТипОбъектов"); КонецЕсли;
	Если ОбъектыЗагрузки.Колонки.Найти("XMLСекция") = Неопределено		Тогда ОбъектыЗагрузки.Колонки.Добавить("XMLСекция"); КонецЕсли;
	Если ОбъектыЗагрузки.Колонки.Найти("Процедура") = Неопределено		Тогда ОбъектыЗагрузки.Колонки.Добавить("Процедура"); КонецЕсли;
	Если ОбъектыЗагрузки.Колонки.Найти("ПоУмолчанию") = Неопределено	Тогда ОбъектыЗагрузки.Колонки.Добавить("ПоУмолчанию"); КонецЕсли;
	Если ОбъектыЗагрузки.Колонки.Найти("Включен") = Неопределено		Тогда ОбъектыЗагрузки.Колонки.Добавить("Включен"); КонецЕсли;
	Если ОбъектыЗагрузки.Колонки.Найти("ВидЗначения") = Неопределено	Тогда ОбъектыЗагрузки.Колонки.Добавить("ВидЗначения"); КонецЕсли;
	
	ПрежниеОбъектыЗагрузки	= Новый ТаблицаЗначений();
	ПрежниеОбъектыЗагрузки	= ОбъектыЗагрузки.Скопировать();
	
	Для р = 1 По лВысота Цикл
		лНазвание	= лОбласть.Область(р, 4, р, 4).Текст;
		Если лНазвание = "" Тогда
			Продолжить;
		КонецЕсли;
		
		лСтрока	= ОбъектыЗагрузки.Найти(лНазвание, "Название");
		Если лСтрока = Неопределено Тогда
			лСтрока	= ОбъектыЗагрузки.Добавить();
			лСтрока.Название	= лНазвание;
			лСтрока.Отметка		= ?(лОбласть.Область(р, 3, р, 3).Текст = "X", Ложь, Истина);
		КонецЕсли;
		
		лСтрока.Представление	= лОбласть.Область(р, 6, р, 6).Текст;
		лСтрока.КодГруппы		= лОбласть.Область(р, 7, р, 7).Текст;
		лСтрока.XMLСекция		= лОбласть.Область(р, 8, р, 8).Текст;
		лСтрока.ТипОбъектов		= лОбласть.Область(р, 9, р, 9).Текст;
		лСтрока.Процедура		= лОбласть.Область(р, 10, р, 10).Текст;
		лСтрока.ВидЗначения		= лОбласть.Область(р, 11, р, 11).Текст;
		лСтрока.ПоУмолчанию		= ?(лОбласть.Область(р, 3, р, 3).Текст = "X", Ложь, Истина);	//включить в загрузку по умолчанию
		лСтрока.Включен			= ?(лОбласть.Область(р, 5, р, 5).Текст = "X", Ложь, Истина);	//не отображать (служебные)
		
		лСтрока	= ПрежниеОбъектыЗагрузки.Найти(лНазвание, "Название");
		Если лСтрока <> Неопределено Тогда
			ПрежниеОбъектыЗагрузки.Удалить(лСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого лСтрокаПрежняя Из ПрежниеОбъектыЗагрузки Цикл
		лНазвание	= лСтрокаПрежняя.Название;
		лСтрока		= ОбъектыЗагрузки.Найти(лНазвание, "Название");
		Если лСтрока <> Неопределено Тогда
			ОбъектыЗагрузки.Удалить(лСтрока);
		КонецЕсли;
	КонецЦикла;
	
	//////////////////////////////
	//3 - Группы загрузки		//
	//////////////////////////////
	
	лОбласть	= лТаблица.ПолучитьОбласть("ГруппыЗагрузки");
	лВысота		= лОбласть.ВысотаТаблицы;
	
	Если ГруппыЗагрузки.Колонки.Найти("Название") = Неопределено		Тогда ГруппыЗагрузки.Колонки.Добавить("Название"); КонецЕсли;
	Если ГруппыЗагрузки.Колонки.Найти("Представление") = Неопределено	Тогда ГруппыЗагрузки.Колонки.Добавить("Представление"); КонецЕсли;
	Если ГруппыЗагрузки.Колонки.Найти("Отметка") = Неопределено			Тогда ГруппыЗагрузки.Колонки.Добавить("Отметка"); КонецЕсли;
	Если ГруппыЗагрузки.Колонки.Найти("КодГруппы") = Неопределено		Тогда ГруппыЗагрузки.Колонки.Добавить("КодГруппы"); КонецЕсли;
	Если ГруппыЗагрузки.Колонки.Найти("ТипОбъектов") = Неопределено		Тогда ГруппыЗагрузки.Колонки.Добавить("ТипОбъектов"); КонецЕсли;
	Если ГруппыЗагрузки.Колонки.Найти("ПоУмолчанию") = Неопределено		Тогда ГруппыЗагрузки.Колонки.Добавить("ПоУмолчанию"); КонецЕсли;

	ПрежниеГруппыЗагрузки	= Новый ТаблицаЗначений();
	ПрежниеГруппыЗагрузки	= ГруппыЗагрузки.Скопировать();
	
	Для р = 1 По лВысота Цикл
		лНазвание	= лОбласть.Область(р, 4, р, 4).Текст;
		Если лНазвание = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если лОбласть.Область(р, 5, р, 5).Текст = "X" Тогда
			Продолжить;
		КонецЕсли;
		
		лСтрока	= ГруппыЗагрузки.Найти(лНазвание, "Название");
		Если лСтрока = Неопределено Тогда
			лСтрока	= ГруппыЗагрузки.Добавить();
			лСтрока.Название	= лНазвание;
			лСтрока.Отметка		= ?(лОбласть.Область(р, 3, р, 3).Текст = "X", Ложь, Истина);
		КонецЕсли;
		
		лПоУмолчанию	= 1;
		Если лОбласть.Область(р, 3, р, 3).Текст = "X" Тогда
			лПоУмолчанию	= 0;
		КонецЕсли;
		
		лСтрока.Представление	= лОбласть.Область(р, 6, р, 6).Текст;
		лСтрока.КодГруппы		= лОбласть.Область(р, 7, р, 7).Текст;
		лСтрока.ТипОбъектов		= лОбласть.Область(р, 9, р, 9).Текст;
		лСтрока.ПоУмолчанию		= ?(лОбласть.Область(р, 3, р, 3).Текст = "X", Ложь, Истина);
		
		лСтрока	= ПрежниеГруппыЗагрузки.Найти(лНазвание, "Название");
		Если лСтрока <> Неопределено Тогда
			ПрежниеГруппыЗагрузки.Удалить(лСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого лСтрокаПрежняя Из ПрежниеГруппыЗагрузки Цикл
		лНазвание	= лСтрокаПрежняя.Название;
		лСтрока		= ГруппыЗагрузки.Найти(лНазвание, "Название");
		Если лСтрока <> Неопределено Тогда
			ГруппыЗагрузки.Удалить(лСтрока);
		КонецЕсли;
	КонецЦикла;
	
	//////////////////////////////
	//5 - Отборы				//
	//////////////////////////////
	
	Если пПолностью = 1 Тогда
		лОбласть	= лТаблица.ПолучитьОбласть("Отборы");
		лВысота		= лОбласть.ВысотаТаблицы;
		
		ПоляНастройки.Очистить();
		
		ПрежниеОтборы	= Новый Массив();
		Для Каждого лСтрокаОтбора Из Отбор Цикл
			ПрежниеОтборы.Добавить(лСтрокаОтбора.Имя);
		КонецЦикла;
		
		Для р = 1 По лВысота Цикл
			лТип		= лОбласть.Область(р, 3, р, 3).Текст;
			лВключен	= ?(лОбласть.Область(р, 5, р, 5).Текст = "X", Ложь, Истина);
			
			Если лТип <> "Справочник" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не лВключен Тогда
				Продолжить;
			КонецЕсли;
			
			лНазвание		= лОбласть.Область(р, 6, р, 6).Текст;
			лПредставление	= лОбласть.Область(р, 7, р, 7).Текст;
			лВид			= лОбласть.Область(р, 4, р, 4).Текст;
			лОписаниеТипа	= Новый ОписаниеТипов(лТип + "Ссылка." + лВид);
			
			лНовоеПоле	= ПоляНастройки.Добавить(лНазвание, лПредставление, лОписаниеТипа, );
			лНовоеПоле.Отбор	= Истина;
			
			лОтборПрежний	= ПрежниеОтборы.Найти(лНазвание);
			Если лОтборПрежний <> Неопределено Тогда
				ПрежниеОтборы.Удалить(лОтборПрежний);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого лНазвание Из ПрежниеОтборы Цикл
			лЭлементОтбора	= Отбор.Найти(лНазвание);
			Если лЭлементОтбора <> Неопределено Тогда
				Отбор.Удалить(Отбор.Индекс(лЭлементОтбора));
			КонецЕсли;
		КонецЦикла;
		
		Отбор.УстановитьДоступныеПоля(ПоляНастройки);
		Для Каждого лПолеНастройки Из ПоляНастройки Цикл
			Если Отбор.Найти(лПолеНастройки.Имя) = Неопределено Тогда
			    Отбор.Добавить(лПолеНастройки.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	//ПрочитатьНастройкиИзТаблицы()

//****************************************
Функция IsNullРеквизит(section, пИмяРеквизита, пЗначениеПоУмолчанию)
	
	Попытка
		лРезультат	= СокрЛП(section.SelectSingleNode(пИмяРеквизита).text);
		Если Нрег(лРезультат) = "true" Тогда
			лРезультат	= 1;
		ИначеЕсли Нрег(лРезультат) = "false" Тогда
			лРезультат	= 0;
		КонецЕсли;
	Исключение
		лРезультат	= пЗначениеПоУмолчанию;
	КонецПопытки;
	
	Возврат лРезультат;
	
КонецФункции	//IsNullРеквизит()

//****************************************
Функция ПрочитатьНастройкиАвтоформирования() Экспорт
	
	лИмяФайлаНастроек	= ФайлАвтоНастроек;
	
	лФайл	= Новый Файл(мКаталогДанных + лИмяФайлаНастроек);
	Если НЕ лФайл.Существует() Тогда
		Возврат 0;
	КонецЕсли;
	
	ДокXMLSettings	= Новый COMОбъект(мТипXMLБибилиотеки);
	ДокXMLSettings.Load(мКаталогДанных + лИмяФайлаНастроек);
	
	Попытка
		settings	= ДокXMLSettings.selectSingleNode("settings");
	Исключение
		Возврат 0;
	КонецПопытки;
	
	Попытка
		sectionExport	= settings.selectSingleNode("export");
	Исключение
		Возврат 0;
	КонецПопытки;
	
	//ДатаНачала			= IsNullРеквизит(sectionExport, "datefrom"		, ДатаНачала);
	//ДатаКонца			= IsNullРеквизит(sectionExport, "dateto"		, ДатаКонца);
	флагОбновлять		= IsNullРеквизит(sectionExport, "refreshdocs"	, 0);
	флагВыгрузитьВсе	= IsNullРеквизит(sectionExport, "alldocs"		, 0);
	лВыгружатьРег		= ?(Число(IsNullРеквизит(sectionExport,"rests", 1)) = 1, "РО", "");
	лВыгружатьРег		= ?(Число(IsNullРеквизит(sectionExport,"regs", 0)) = 1, "Р", лВыгружатьРег);
	лВыгружатьДок		= ?(Число(IsNullРеквизит(sectionExport,"docs", 0)) = 1, "Д", "");
	лВыгружатьСпр		= ?(Число(IsNullРеквизит(sectionExport,"refs", 0)) = 1, "С", "");
	мТипВыгрузки		= лВыгружатьРег + лВыгружатьДок + лВыгружатьСпр;
	
	лТипФормирования	= ?(Число(IsNullРеквизит(sectionExport,"notrun",0)) = 1, 0, 1);
	
	Возврат лТипФормирования;
	
КонецФункции	//ПрочитатьНастройкиАвтоформирования()

//****************************************
Процедура ВыполнитьМодуль() Экспорт
		
	Если Прав(мКаталогДанных, 1) <> "\" Тогда
		мКаталогДанных	= мКаталогДанных + "\";
	КонецЕсли;
	
	отчОткрытьОтчет();
	отчДобавитьВОтчет("Загрузка данных  для ""ST-Чикаго""", "Заголовок", 1, 1);
	
	Если ПолучитьТипXMLБибилиотеки() = "" Тогда
		СообщитьПодробно("Не обнаружено библиотек для работы с xml-данными!", 2, 0, 4);
		Возврат;
	КонецЕсли;
	
	мДатаОбработки				= ДатаКонца;
	
	СообщитьПодробно("", 0, 0, 1);
	СообщитьПодробно("Загрузка данных из ""ST-Чикаго"".....", 0, 3, 1);
	отчДобавитьВОтчетСтроку("за период с " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаКонца, "ДФ=dd.MM.yyyy"));
	отчДобавитьВОтчетСтроку("Каталог данных:  " + мКаталогДанных);
	отчДобавитьВОтчетСтроку("ИБ:  " + СтрокаСоединенияИнформационнойБазы());
	отчДобавитьВОтчетСтроку("Обработка:  " + мИнфоВерсия + " от " + мИнфоДата);
	отчДобавитьВОтчетСтроку("Пользователь:  " + ПараметрыСеанса.ТекущийПользователь);
	
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, предварительная (начало)
	////////////////////////////////////////////////////	
	
	лФайл	= Новый Файл(мКаталогДанных + "intlogs");
	Если лФайл.Существует() = 0 Тогда
		Попытка
			СоздатьКаталог(мКаталогДанных + "intlogs");
		Исключение
			Сообщить("Не удалось создать каталог " + мКаталогДанных + "intlogs", "!!!");
		КонецПопытки;
	КонецЕсли;

	лПолноеИмяФайлаXMLЛога	= мКаталогДанных + "logdataexchangeaudit.xml";
	Если СоздатьНесуществующиеПодкаталоги(лПолноеИмяФайлаXMLЛога) = 0 Тогда
		Сообщить("Не удалось создать файл " + лПолноеИмяФайлаXMLЛога, "!!!");
	КонецЕсли;

	ЛогXML = Новый COMОбъект(мТипXMLБибилиотеки);

	groupLogXML = XMLВыполнитьОперацию("СоздатьXML", ЛогXML, , "LogDataExchangeAudits");
	groupLogXML.SetAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	groupLogXML.SetAttribute("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
	
	ВывестиВXMLЛог(,,"documents; Начало загрузки данных "+ СтрокаСоединенияИнформационнойБазы() + " (" + мИнфоВерсия + ")");
	
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, предварительная (конец)
	////////////////////////////////////////////////////

	////////////////////////////////////////////////////
	//ЧТЕНИЕ ЛОГА ПОДТВЕРЖДЕНИЙ confirmationslog (начало)
	////////////////////////////////////////////////////
	
	лИмяЛогаПодтверждений	= "confirmationslog.xml";
	лПолноеИмяЛогаПодтверждений	= мКаталогДанных + лИмяЛогаПодтверждений;
	ДокXMLConfLog = Новый COMОбъект(мТипXMLБибилиотеки);
	лФайл	= Новый Файл(лПолноеИмяЛогаПодтверждений);
	Если лФайл.Существует() Тогда
		ДокXMLConfLog.Load(лПолноеИмяЛогаПодтверждений);
	Иначе
		node = ДокXMLConfLog.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
		ДокXMLConfLog.preserveWhiteSpace = 1;
		ДокXMLConfLog.AppendChild(node);
		
		ДокXMLConfLog.Save(лПолноеИмяЛогаПодтверждений);
	КонецЕсли;
	
	лПопыткаУдачная	= Истина;
	Попытка
		confirmationslog	= ДокXMLConfLog.selectSingleNode("confirmationslog");
	Исключение
		лПопыткаУдачная	= Ложь;
	КонецПопытки;
	
	Попытка
		Если (НЕ лПопыткаУдачная) или (confirmationslog = Неопределено) Тогда
			confirmationslog = ДокXMLConfLog.CreateElement("confirmationslog");
			ДокXMLConfLog.AppendChild(confirmationslog);
		КонецЕсли;
	Исключение
		СообщитьПодробно("Не удалось обратиться к логу подтверждений! Операция будет прервана", 0, 0, 3, "Ошибка");
		Возврат;
	КонецПопытки;
	
	Попытка
		confGroup	= confirmationslog.selectSingleNode("confirmations");
		Если confGroup = Неопределено Тогда
			confGroup = ДокXMLConfLog.CreateElement("confirmations");
			confirmationslog.AppendChild(confGroup);
		КонецЕсли;
	Исключение
		confGroup = ДокXMLConfLog.CreateElement("confirmations");
		confirmationslog.AppendChild(confGroup);
	КонецПопытки;
	
	лЧислоФайловПодтверждений	= 0;
	Попытка
		confirmationsInLog	= confirmationslog.selectSingleNode("chicago").selectNodes("*[@status='false']");
		лЧислоФайловПодтверждений	= confirmationsInLog.Length();
	Исключение
	КонецПопытки;
	
	СообщитьПодробно("Загрузка подтверждений.....", 1, 1, 1);
	Для р = 0 По лЧислоФайловПодтверждений - 1 Цикл
		confInLog	= confirmationsInLog.Item(р);
		лИмяПодтверждения	= СокрЛП(confInLog.NodeName);
		
		//ЗагрузитьПодтверждения(лИмяПодтверждения);
		
		confInLog.SetAttribute("status","true");
	КонецЦикла;
	СообщитьПодробно("Загрузка подтверждений завершена.....", 1, 1, 1);
	
	////////////////////////////////////////////////////
	//ЧТЕНИЕ ЛОГА ПОДТВЕРЖДЕНИЙ confirmationslog (конец)
	////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////
	//ЧТЕНИЕ ЛОГА ДОКУМЕНТОВ filelog (начало)
	////////////////////////////////////////////////////
	
	лИмяФайлаЛога	= "filelog.xml";
	лПолноеИмяФайлаЛога	= мКаталогДанных + лИмяФайлаЛога;
	
	лФайл	= Новый Файл(лПолноеИмяФайлаЛога);
	Если лФайл.Существует() Тогда
		
		ДокXMLLog	= Новый COMОбъект(мТипXMLБибилиотеки);
		ДокXMLLog.Load(лПолноеИмяФайлаЛога);
		
		documentsInLog	= ДокXMLLog.DocumentElement.selectSingleNode("chicago").selectNodes("*[@status='false']");
		лСчетчик = 0;
		
		Если documentsInLog <> Неопределено Тогда
			Для p = 0  По documentsInLog.Length() - 1 Цикл
				
				docInLog	= documentsInLog.Item(лСчетчик);
						Если docInLog <> Неопределено Тогда
						лИмяФайла	= СокрЛП(docInLog.NodeName);
						 
						//Если р = 1 - documentsInLog.Length() Тогда
							лСЗнДанные	= Новый СписокЗначений();
							лСЗнДанные.Добавить("Загрузка из файла " + лИмяФайла, "Текст");
							лСЗнДанные.Добавить(""				, "Параметр1");
							лСЗнДанные.Добавить(""				, "Параметр2");
							лСЗнДанные.Добавить("Организация"	, "Реквизит1");
							лСЗнДанные.Добавить("Торговый агент", "Реквизит2");
							лСЗнДанные.Добавить("Контрагент"	, "Реквизит3");
							лСЗнДанные.Добавить("Торговая точка", "Реквизит4");
							отчДобавитьВОтчет(лСЗнДанные, "Шапка");
							
							ЗагрузитьДокументы(лИмяФайла);
						//Иначе
							docInLog.SetAttribute("status","true");
						Иначе
							СообщитьПодробно("Ошибка чтение fileslog.....", 0, 3, 1);
						КонецЕсли;
				лСчетчик = 	лСчетчик +1;	
			КонецЦикла;
		КонецЕсли;
		
		ДокXMLLog.Save(мКаталогДанных + лИмяФайлаЛога);
	КонецЕсли;
	
	ДокXMLConfLog.Save(лПолноеИмяЛогаПодтверждений);
	
	////////////////////////////////////////////////////
	//ЧТЕНИЕ ЛОГА ДОКУМЕНТОВ filelog (конец)
	////////////////////////////////////////////////////
	
	СообщитьПодробно("Загрузка данных для ""ST-Чикаго"" завершена.....", 0, 3, 1);
	отчДобавитьВОтчет("Загрузка данных  завершена", "Заголовок", 1, 1);
	отчЗакрытьОтчет();
	СообщитьПодробно("", 0, 0, 1);
	   		
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, завершающая (начало)
	////////////////////////////////////////////////////
	
	ВывестиВXMLЛог(,,"documents; Загрузка данных завершена");
	
	ЛогXML.AppendChild(groupLogXML);
	
	лИмяФайлаXMLЛога 		= мКаталогДанных + "logdataexchangeaudit.xml";
	лИмяФайлаXMLЛогаКопия 	= мКаталогДанных + СоздатьИмяФайлаИзШаблона("intlogs\logdataexchangeauditYYYYMMDDHHMMSS.xml");
	
	ЛогXML.Save(лИмяФайлаXMLЛога);
	ЛогXML.Save(лИмяФайлаXMLЛогаКопия);
	
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, завершающая (конец)
	////////////////////////////////////////////////////
             	
КонецПроцедуры	//ЗагрузитьМодуль()

Процедура ПриОткрытииМодуль() Экспорт
	
	ДатаКонца	= ТекущаяДата();
	ДатаНачала	= ДатаКонца - 24*60*60;
	
	ВосстановитьНастройки();				//прочитать настройки пользователя, сохраненные в предыдущем сеансе
	
	Если ПолучитьТипXMLБибилиотеки() = "" Тогда
		СообщитьПодробно("Не обнаружено библиотек для работы с xml-данными!", 2, 0, 4);
		Возврат;
	КонецЕсли;
	
	ПрочитатьНастройкиИзТаблицы();
	ОбновитьСписокЗагружаемыхОбъектов();
	
КонецПроцедуры	//ПриОткрытииМодуль()

//*******************************************  

Функция ПолучитьИмяФайлаНастройкиОбработки() Экспорт
	Попытка	
		Возврат мКаталогНайстроек+"\ST_RA_ImportSettings.ini";
	Исключение
		Сообщить("Невозможно создать файл настроек, обратитесь к администратору!");
	КонецПопытки;
	
КонецФункции

Функция ВосстановитьНастройки() Экспорт
	
	//Попытка	
	//	лЗначенияНастройки = ЗначениеИзФайла(ПолучитьИмяФайлаНастройкиОбработки());
	//Исключение 
	//	ЗаписьЖурналаРегистрации("АвтообменЧикаго.НаСервере", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.НастройкиПараметровОбмена_PRV, "",  ОписаниеОшибки());
	//	Возврат Ложь; 
	//КонецПопытки;
	
	//Если ТипЗнч(лЗначенияНастройки)<>Тип("Структура") Тогда
	//	Возврат Ложь; 
	//КонецЕсли;
	//
	//мКаталогДанных			= лЗначенияНастройки.ст_КаталогДанных;
	//ФлажокПодробно			= лЗначенияНастройки.ст_загрузка_Подробно;
	//Отбор					= лЗначенияНастройки.ст_загрузка_Отбор;
	//ОбъектыЗагрузки			= лЗначенияНастройки.ст_загрузка_Объекты;
	//ГруппыЗагрузки			= лЗначенияНастройки.ст_загрузка_Группы;
	//СЗнОбъекты				= лЗначенияНастройки.ст_загрузка_Список;
	//
	//СоответствияСотрудников.Загрузить(лЗначенияНастройки.ст_тзСотрудники);
	
	Возврат Истина;
	
КонецФункции	//ВосстановитьНастройки()

Функция СохранитьНастройки() Экспорт
	
	//лЗначенияНастройки = Новый Структура(
	//"ст_КаталогДанных, ст_загрузка_Подробно, ст_загрузка_Отбор, ст_загрузка_Объекты, ст_загрузка_Группы, ст_загрузка_Список, ст_тзСотрудники", 
	//мКаталогДанных, ФлажокПодробно, Отбор, ОбъектыЗагрузки, ГруппыЗагрузки, СЗнОбъекты, СоответствияСотрудников.Выгрузить());
	//
	//ЗначениеВФайл(ПолучитьИмяФайлаНастройкиОбработки(), лЗначенияНастройки);
	
	Возврат Истина;
	
КонецФункции	//СохранитьНастройки()

//****************************************
Функция ПолучитьТипXMLБибилиотеки() Экспорт
	
	мТипXMLБибилиотеки	= "";
	
	лСЗнТипыXML	= Новый СписокЗначений();
	лСЗнТипыXML.Добавить("MSXML2.DOMDocument.4.0");
	лСЗнТипыXML.Добавить("MSXML2.DOMDocument");
	
	Для Каждого лТипXMLБибилиотеки Из лСЗнТипыXML Цикл
		Попытка
			лТестовыйXML = Новый COMОбъект(лТипXMLБибилиотеки);
		Исключение
			Продолжить;
		КонецПопытки;
		мТипXMLБибилиотеки	= лТипXMLБибилиотеки;
		Прервать;
	КонецЦикла;
	
	Возврат мТипXMLБибилиотеки;
	
КонецФункции	//ПолучитьТипXMLБибилиотеки()

Функция ВернутьЦенуБазы(Номенклатура, ТипЦены, ЕдиницаИзмерения) Экспорт
	
	лВозвращаемоеЗначение =  Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура,, ТипЦены,, ЕдиницаИзмерения);
	Возврат лВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьДоговор(лФирма, лКонтрагент, лСотрудник)
	
	// Панов В.С. старый алгоритм, заменил его запросом, добавив доп. условия
	
	//ВыборкаДоговоров = Справочники.ДоговорыКонтрагентов.Выбрать(,лКонтрагент);
	//Пока ВыборкаДоговоров.Следующий() Цикл
	//	Если ВыборкаДоговоров.Организация = лФирма и ВыборкаДоговоров.ТорговыйПредставитель_ПРВ = лСотрудник тогда
	//		возврат ВыборкаДоговоров.Ссылка; 	
	//	КонецЕсли;
	//КонецЦикла;
       	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Владелец = &Владелец
	               |	И ДоговорыКонтрагентов.Организация = &Организация
				   //|	И ДоговорыКонтрагентов.ТорговыйПредставитель_ПРВ = &ТорговыйПредставитель_ПРВ
	               |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	               |	И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	               |			ИЛИ ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))";
				   
	Запрос.УстановитьПараметр("Владелец", лКонтрагент);
	Запрос.УстановитьПараметр("Организация", лФирма);
	//Запрос.УстановитьПараметр("ТорговыйПредставитель_ПРВ", лСотрудник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции


мТаблицаОтчета	= Новый ТабличныйДокумент();
мМакетОтчета	= ПолучитьМакет("Лог");
мТаймаут		= 6;

мИспользоватьЛогСообщений	= Истина;
мИспользоватьСостояния		= ?(Метаданные.РегистрыСведений.Найти("СТ_СостоянияОбъектов")=Неопределено, Ложь, Истина);
мИспользоватьКонстанты  	= ?(Метаданные.Справочники.Найти("СТ_КонстантыОбмена")=Неопределено, Ложь, Истина);

Если мИспользоватьКонстанты Тогда
	
	мКонстантаСклад 		 = Справочники.СТ_КонстантыОбмена["ОсновнойСклад"].ПолучитьОбъект().Значение;
	мКонстантаВалюта		 = Справочники.СТ_КонстантыОбмена["ОсновнаяВалюта"].ПолучитьОбъект().Значение;
	мКонстантаФирма			 = Справочники.СТ_КонстантыОбмена["ОсновнаяФирма"].ПолучитьОбъект().Значение;
	мКонстантаТипЦен		 = Справочники.СТ_КонстантыОбмена["ОсновнойТипЦен"].ПолучитьОбъект().Значение;
	мКонстантаОсновнойПокупатель = Справочники.СТ_КонстантыОбмена["ОсновнойПокупатель"].ПолучитьОбъект().Значение;
	мКонстантаДатаСозданияДокумента = Справочники.СТ_КонстантыОбмена["ДатаСозданияДокумента"].ПолучитьОбъект().Значение;
		
	//НашТекущийПользователь 	= Справочники.СТ_КонстантыОбмена["ОсновнойПользователь"].ПолучитьОбъект().Значение;
	//мКаталогНайстроек			= Справочники.СТ_КонстантыОбмена["КаталогФайловНастройки"].ПолучитьОбъект().Значение;
	НашТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
    мКаталогНастроек		 = КаталогПрограммы();
	
	Если Прав(мКаталогНастроек, 1) <> "\" Тогда
		мКаталогНастроек = мКаталогНастроек + "\";
	КонецЕсли;
	
	мКонстантаЧасовойПояс= Справочники.СТ_КонстантыОбмена["ЧасовойПояс"].ПолучитьОбъект().Значение;
	Если ТипЗнч(мКонстантаЧасовойПояс)<>Тип("Число") Тогда
		мКонстантаЧасовойПояс=2;
	КонецЕсли;
	Если (мКонстантаЧасовойПояс<-12)ИЛИ(мКонстантаЧасовойПояс>12) Тогда
		мКонстантаЧасовойПояс=2;
	КонецЕсли;

	лНомерЧасовогоПоясаСтрокой = Строка(Макс(мКонстантаЧасовойПояс,-мКонстантаЧасовойПояс));
	лДобавитьЛидирующийНоль = ?(СтрДлина(лНомерЧасовогоПоясаСтрокой)=1,1,0);
	мСтрокаЧасовойПояс = ?(мКонстантаЧасовойПояс<0,"-","+") + ?(лДобавитьЛидирующийНоль=1,"0","") + лНомерЧасовогоПоясаСтрокой + ":00";

	
КонецЕсли; 