//переменные для работы протоколов обмена
Перем ПротоколОбмена_КонтурEDI Экспорт;//Варианты: "FTP", "Каталог", "DialMail", "API"
Перем КомпонентаDialMailПодключена Экспорт;
//Перем Соединение Экспорт;//содержит соединение с FTP. Переделаем на КэшСоединений
Перем КэшСоединений_КонтурEDI Экспорт;//Структура, в ключах - GLN, в значениях - объекты FTPСоединение, COMОбъекты (DialMail) или HTTPСоединение, 
										//в зависимости от протокола обмена. На будущее - попытаться сделать отправку исходящих сообщений 
										//в рамках одной учетной записи, тогда от кэша можно будет уйти.
//+АПИ
Перем АдресАпи;
Перем КлючРазработчика;
Перем СоединениеАПИ;
//-АПИ

Перем УчетныеЗаписи Экспорт;

Перем МодульИнтеграции Экспорт;   
Перем МодульКонвертации Экспорт;
Перем МодульПроверкиДанных Экспорт;

Перем МодульИнтеграции_Новый Экспорт;

Перем НастройкиМодуля Экспорт; 

Перем БиблиотекаКартинокEDI Экспорт;

Перем ПараметрыАвтотестирования Экспорт;

Перем ИспользуетсяКЭШ Экспорт;
Перем Контур_КЭШ Экспорт;

Перем РаботаССерверомДиадок Экспорт;
Перем КонтурEDI_ВерсияПлатформы Экспорт;//будем смотреть сюда из прочих модулей

// + Внешнее хранилище. kns 2014.08.22
Перем СоединениеСХранилищем Экспорт;
Перем ВнешнееХранилище Экспорт;
// - Внешнее хранилище. kns 2014.08.22

Перем ТаблицаКэшПартнеров Экспорт;
Перем ТаблицаКэшПартнеровКонтрагентов Экспорт;

Перем ИспользуетсяПодключаемыйМодуль Экспорт;
Перем ВнешнийМодуль Экспорт; //объект обработки - подключаемого модуля.

Перем ТаблицаСвойств;//Хранение_Данных

Перем Адрес_edi_kontur_ru Экспорт;
Перем ПараметрыИнтернетСоединения_КонтурEDI Экспорт;//Структура: Адрес/порт FTP, параметры прокси, каталог обмена

//*********************************************************************
//							МОДУЛИ

Функция ПолучитьМодульИнтеграции_Новый() 
	
	РезультатИнициализации = Новый Структура();
	РезультатИнициализации.Вставить("Успешно");
	РезультатИнициализации.Вставить("ТекстОшибки");
	РезультатИнициализации.Вставить("НужноОбновитьКонфигурацию");
	РезультатИнициализации.Вставить("Модуль");
	
	Модуль = ПолучитьФорму("Модуль_Интеграция");
	МодульИнтеграции_Новый = Модуль;
	Результат = Модуль.Инициализировать();
	
	РезультатИнициализации.Успешно = Результат.Успешно;
	РезультатИнициализации.ТекстОшибки = Результат.ТекстОшибки;
	РезультатИнициализации.НужноОбновитьКонфигурацию = Результат.НужноОбновитьКонфигурацию;
	РезультатИнициализации.Модуль = Модуль;
	
	Возврат РезультатИнициализации;
	
КонецФункции

Функция ПолучитьМодульКонвертации() Экспорт
	
	Возврат ПолучитьФорму("Модуль_Конвертация_КонтурEDI_XML");
	
КонецФункции

Функция ПолучитьМодульПротоколаОбмена() Экспорт
	
	Возврат ПолучитьФорму("Модуль_ПротоколОбмена_FTP");
	
КонецФункции

Функция ПолучитьМодульПроверкиДанных() Экспорт
	
	Возврат ПолучитьФорму("Модуль_ПроверкаДанных");
	
КонецФункции

Функция ИнициализироватьПодключаемыеМодули() Экспорт
	
	РаботаССерверомДиадок = Новый Структура();
	РаботаССерверомДиадок.Вставить("Используется",Ложь);
	РаботаССерверомДиадок.Вставить("АПИ");
	РаботаССерверомДиадок.Вставить("Соединение");

	РезультатИнициализации = Новый Структура();
	РезультатИнициализации.Вставить("Успешно");
	РезультатИнициализации.Вставить("ТекстОшибки");
	РезультатИнициализации.Вставить("НужноОбновитьКонфигурацию");
	
	РезультатИнтеграции = ПолучитьМодульИнтеграции_Новый();

	Если НЕ РезультатИнтеграции.Успешно Тогда
		
		РезультатИнициализации.Успешно		= Ложь;
		РезультатИнициализации.ТекстОшибки	= РезультатИнтеграции.ТекстОшибки;
		РезультатИнициализации.НужноОбновитьКонфигурацию = РезультатИнтеграции.НужноОбновитьКонфигурацию;
		
		ФормаНастройкиХраненияДанных = ПолучитьФорму("ФормаСервис_НастройкаХраненияДанных");
		ФормаНастройкиХраненияДанных.ОткрытьМодально();
		
		Если ФормаНастройкиХраненияДанных.РезультатВыполнения = "ок" Тогда
			Возврат РезультатИнициализации;
		Иначе
			Возврат РезультатИнициализации;
		КонецЕсли;	
		
	КонецЕсли;
	
	МодульИнтеграции_Новый	= РезультатИнтеграции.Модуль;	
	
	МодульИнтеграции		= "";//ПолучитьМодульИнтеграции();
	МодульКонвертации		= ПолучитьМодульКонвертации();
	
	МодульПроверкиДанных    = ПолучитьМодульПроверкиДанных();
	
	ИнициализироватьВнешнийПодключаемыйМодуль();
	
	БиблиотекаКартинокEDI = ПолучитьФорму("ФормаСервис_БиблиотекаКартинокEDI");
	
	НастройкиМодуля = МодульИнтеграции_Новый.ПолучитьНастройкиМодуля();
	
	МодульИнтеграции_Новый.ПриИзмененииНастроекПартнеров();//обновим кэш партнеров
	
	ПротоколОбмена_КонтурEDI = МодульИнтеграции_Новый.ПолучитьКонстантуEDI("ПротоколОбмена_КонтурEDI");
	Если Не ЗначениеЗаполнено(ПротоколОбмена_КонтурEDI) Тогда
		
		//обновили модуль, в старом еще не было такой константы, так что надо достать из старых констант
		
		Если МодульИнтеграции_Новый.ПолучитьКонстантуEDI("ЗагрузкаИзКаталогов")=Истина Тогда
			ПротоколОбмена_КонтурEDI = "Каталог";
		ИначеЕсли МодульИнтеграции_Новый.ПолучитьКонстантуEDI("ИспользоватьDialMail")=Истина Тогда
			ПротоколОбмена_КонтурEDI = "DialMail";
		Иначе
			ПротоколОбмена_КонтурEDI = "FTP";
		КонецЕсли;	
		
		ПротоколОбмена_КонтурEDI = МодульИнтеграции_Новый.УстановитьКонстантуEDI("ПротоколОбмена_КонтурEDI",ПротоколОбмена_КонтурEDI);
		
	КонецЕсли;	
	
	//Проверить, есть ли в типовых объектах сообщения / соответствия товаров / партнеры. Если да, то предложить конвертацию.
	
	
	ПредложитьКонвертациюПриНеобходимости();
	
	РезультатИнициализации.Успешно = Истина;
	
	//инициализируем глобальные переменные
	Адрес_edi_kontur_ru = "edi.kontur.ru";
	АдресАпи = "edi-api.kontur.ru";
	КлючРазработчика = "1C-950f19df-10cd-4bef-aeed-768edd332693";
	
	Возврат РезультатИнициализации;
	
КонецФункции

Процедура ФинализироватьПодключаемыеМодули() Экспорт
	Если МодульИнтеграции_Новый<>Неопределено Тогда
		МодульИнтеграции_Новый.Финализировать();
	КонецЕсли;	
	
	МодульИнтеграции_Новый	= Неопределено;
	МодульИнтеграции		= Неопределено;
	МодульКонвертации		= Неопределено;
	МодульПроверкиДанных	= Неопределено;
	БиблиотекаКартинокEDI	= Неопределено;
	Соединение				= Неопределено;
	НастройкиМодуля			= Неопределено;
	ВнешнийМодуль			= Неопределено;
	ИспользуетсяПодключаемыйМодуль = Ложь;
КонецПроцедуры

//проверяет наличие добавленных объектов либо внешнего хранилища, а также наличие данных в типовых объектах
//и предлагает сконвертировать
Процедура ПредложитьКонвертациюПриНеобходимости()
	
	//конвертации с типовых объектов больше нет.
	//Зато может пригодиться конвертация с внешнего хранилища на добавленные бъекты конфигурации, что гораздо проще
	//Оставим функцию на будущее.
	
	////и возможность хранения данных в своих объектах / внешнем хранилище
	//ЗапросПроверкаНаличияСообщений = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	//
	//ЗапросПроверкаНаличияСообщений.Текст = 
	//"Выбрать Первые 1 1 Из Справочник.КонтурEDI_Сообщения";
	//Если ЗапросПроверкаНаличияСообщений.Выполнить().Пустой() Тогда
	//	//значит, в текущем хранилище еще нет ни одного сообщения
	//	
	//	//теперь проверим сообщения в типовых объектах
	//	
	//	Запрос = Новый Запрос(
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	ХранилищеДополнительнойИнформации.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	//	|ГДЕ
	//	|	ХранилищеДополнительнойИнформации.Наименование ПОДОБНО ""КонтурEDI_%""
	//	|	И ХранилищеДополнительнойИнформации.Наименование <> ""КонтурEDI.ПредыдущийМодуль""
	//	|	И ХранилищеДополнительнойИнформации.Наименование <> ""КонтурEDI.TeamViewer"""
	//	);
	//	Если Не Запрос.Выполнить().Пустой() Тогда
	//		//бинго! Предложим конвертацию
	//		
	//		Если Вопрос("Обнаружен переход на оптимизированное хранение данных. Сконвертировать старые данные?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	//			ПолучитьФорму("ФормаСервис_ПереходНаОптимизированныеОбъекты").ОткрытьМодально();
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;	
	
КонецПроцедуры	

//*********************************************************************
//							ПРОЧЕЕ

Процедура ПриОткрытииФормы(Форма) Экспорт
	
	Форма.КартинкаЗаголовка = ПолучитьФорму("Форма").КартинкаЗаголовка;
	Форма.Заголовок = "EDI.Контур. "+Форма.Заголовок;
	
	//на рефакторинг: картинку кинуть в отдельное место
КонецПроцедуры

Функция ПолучитьРезультатЗапроса(Запрос,ИмяПоля = "Ссылка") Экспорт
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка[ИмяПоля];
		
	КонецЕсли;
	
КонецФункции

Функция ВывестиПредупреждение_КонтурEDI(ТекстПредупреждения,Таймаут = 0,Заголовок = "EDI.Контур") Экспорт
	
	Если МодульИнтеграции_Новый<>Неопределено
		И ТипЗнч(МодульИнтеграции_Новый.ПараметрыПользователяEDI) = Тип("Структура")
		И МодульИнтеграции_Новый.ПараметрыПользователяEDI.ЭтоАвтообмен = Истина 
		Тогда
		//для пользователя автообмена будем писать все предупреждения в консоль, чтоб не было модальных окон
		Сообщить_КонтурEDI(ТекстПредупреждения);
	Иначе
		#Если Клиент Тогда
		Предупреждение(ТекстПредупреждения,Таймаут,Заголовок);
		#КонецЕсли
	КонецЕсли;
	
КонецФункции

Процедура ИнициализироватьКЭШ() Экспорт
	
	Контур_КЭШ = Новый Структура;
	
	ЮрЛица = Новый ТаблицаЗначений();
	ЮрЛица.Колонки.Добавить("Значение1С");
	ЮрЛица.Колонки.Добавить("ЗначениеEDI");
	
	ЮрЛица.Индексы.Добавить("Значение1С");
	
	Контур_КЭШ.Вставить("ЮрЛица",ЮрЛица);
	
	Контур_КЭШ.Вставить("ФильтрАлкоНоменклатуры");
	
КонецПроцедуры

Функция СтрокаУдовлетворяетДополнительномуОтбору(СтрокаТабличкиДокументов,Отбор) Экспорт
	//на рефакторинг
	
	ВсеЕщеУдовлетворяет= истина;
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если ЭлементОтбора.Использование и ЭлементОтбора.ПутьКДанным<>"" Тогда 
			Если ЭлементОтбора.ВидСравнения =  ВидСравнения.Равно Тогда
				ТекЗначение=Неопределено;
				АдресЯчейки="СтрокаТабличкиДокументов."+ЭлементОтбора.ПутьКДанным;
				     Выполнить("ТекЗначение="+АдресЯчейки);
				Если ТекЗначение <> ЭлементОтбора.Значение Тогда 
					ВсеЕщеУдовлетворяет=Ложь;
				КонецЕсли;
			ИначеЕсли ЭлементОтбора.ВидСравнения =  ВидСравнения.НеРавно Тогда
				ТекЗначение=Неопределено;
				АдресЯчейки="СтрокаТабличкиДокументов."+ЭлементОтбора.ПутьКДанным;
				     Выполнить("ТекЗначение="+АдресЯчейки);
				Если ТекЗначение = ЭлементОтбора.Значение Тогда 
					ВсеЕщеУдовлетворяет=Ложь;
				КонецЕсли;
			ИначеЕсли ЭлементОтбора.ВидСравнения =  ВидСравнения.Содержит Тогда
				ТекЗначение=Неопределено;
				АдресЯчейки="СтрокаТабличкиДокументов."+ЭлементОтбора.ПутьКДанным;
				     Выполнить("ТекЗначение="+АдресЯчейки);
				Если Найти(ТекЗначение,ЭлементОтбора.Значение)=0 Тогда 
					ВсеЕщеУдовлетворяет=Ложь;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ЭлементОтбора.Использование=ложь;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ВсеЕщеУдовлетворяет;
КонецФункции

Функция ЕстьАктивныйОтбор(Отбор) Экспорт
	Для Каждого ЭлементОтбора из Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ложь;
КонецФункции

Функция ЕстьОтборВСпискеЗначений(Список) Экспорт
	
	Если не ЗначениеЗаполнено(Список) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Варианты=Новый Массив;
	Для Каждого Эл Из Список Цикл
		Если Варианты.Найти(Эл.Пометка)=Неопределено Тогда
			Варианты.Добавить(Эл.Пометка);
		КонецЕсли;	
	КонецЦикла;	
	
	Если Варианты.Количество()=2 Тогда
		//есть и отмеченные, и пустые строки в списке
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

// ПЕЧАТЬ

Функция ПоказатьСостояниеЗагруженногоЗаказа(Документ = Неопределено,Модально = Ложь) Экспорт
	
	Если НЕ Документ = Неопределено Тогда
		СсылкаНаОбъект = Документ;
	КонецЕсли;
	
	ФормаПросмотраСостояния = ПолучитьФорму("ФормаСервис_ПросмотрСостоянияЗаказа");
	
	Если Модально Тогда
		
		ФормаПросмотраСостояния.ОткрытьМодально();
		
	Иначе
		
		ФормаПросмотраСостояния.Открыть();
	
	КонецЕсли;
	
КонецФункции

Функция Печать() Экспорт
	
	ИнициализироватьПодключаемыеМодули();
	
	ПоказатьСостояниеЗагруженногоЗаказа();
	
	Возврат Неопределено;
	
КонецФункции

// СЛУЖЕБНЫЕ

Функция ПроверитьСуществованиеФайлаКаталога(ИмяФайла) Экспорт  //только проверяем

	НайденныйФайл = Новый Файл(ИмяФайла);
	
	Возврат НайденныйФайл.Существует();
	
КонецФункции

Функция EDIПроверитьСуществованиеКаталога(ИмяКаталога) Экспорт  //проверяем и предлагаем создать
    КаталогНаДиске = Новый Файл(ИмяКаталога);
    Если КаталогНаДиске.Существует() Тогда
        Возврат Истина;
    Иначе
		#Если Клиент Тогда
		Ответ = Вопрос("Каталог: "+ИмяКаталога+" не существует. Создать?", 
                        РежимДиалогаВопрос.ОКОтмена);
        Если Ответ = КодВозвратаДиалога.ОК Тогда
            СоздатьКаталог(ИмяКаталога);
            Возврат Истина;
        Иначе
            Возврат Ложь;
		КонецЕсли;
		#Иначе
        СоздатьКаталог(ИмяКаталога);
        Возврат Истина;
		#КонецЕсли
	
    КонецЕсли;
КонецФункции

Процедура ЗарегистрироватьОшибку(Результат,ТекстОшибки) Экспорт
	
	НоваяСтрока = Результат.ТаблицаОшибок.Добавить();
	
	НоваяСтрока.ТекстОшибки = ТекстОшибки;
	
КонецПроцедуры

Функция ИнициализироватьСтруктуруРезультатаФункции() Экспорт
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ТекстОшибки");
	
	СтруктураРезультата = Новый Структура();
	СтруктураРезультата.Вставить("Успешно",			Ложь);
	СтруктураРезультата.Вставить("ТаблицаОшибок",	ТаблицаОшибок);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ОповеститьОбОшибках(Параметры,Заголовок) Экспорт 
	
	//сюда неплохо бы закостылить: если действие выполняется под пользователем для автообмена, то только вывести сообщения в консоль
	Если МодульИнтеграции_Новый.ПараметрыПользователяEDI.ЭтоАвтообмен = Истина Тогда
		
		Для Каждого Стр Из Параметры.ТаблицаОшибок Цикл
			Сообщить_КонтурEDI(""+Стр.ТекстОшибки);
		КонецЦикла;	
		
	Иначе //выведем сообщения интерактивно	
	
		#Если Клиент Тогда
		ТаблицаОшибок = Параметры.ТаблицаОшибок;
		
		Если ТаблицаОшибок.Количество() > 0 Тогда
			
			ФормаВыводаОшибок = ПолучитьФорму("ФормаСервис_ВыводОшибок");
			ФормаВыводаОшибок.ТекстЗаголовка = Заголовок;
			ФормаВыводаОшибок.ТаблицаОшибок = ТаблицаОшибок;
			ФормаВыводаОшибок.ОткрытьМодально();
			
		КонецЕсли;
		#Иначе
		Для Каждого Стр Из Параметры.ТаблицаОшибок Цикл
			Сообщить_КонтурEDI(""+Стр.ТекстОшибки);
		КонецЦикла;	
		#КонецЕсли
		
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьСледующееДействиеДляСтроки(Стр) Экспорт
	
	Стр.СледующееДействие = "";

	Если ЗначениеЗаполнено(Стр.СтатусИсходящегоСообщения) Тогда
		
		Если НЕ Стр.СтатусДокумента = "Отклонен" Тогда
			Если НЕ ЗначениеЗаполнено(Стр.Накладная) Тогда		
				Стр.СледующееДействие = "Создать реализацию";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Стр.СтатусВходящегоСообщения) Тогда
		
		Если Стр.СтатусВходящегоСообщения = МодульИнтеграции.ПолучитьЗначениеСтатуса("ВходящийЗагружен") Тогда
			Стр.СледующееДействие = "Подтвердить";
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции

Функция ТолькоЦифрыВСтроке_КонтурEDI(Стр) Экспорт
	
	Для к = 1 По СтрДлина(Стр) Цикл 
		Если Найти("0123456789",Сред(Стр,к,1))=0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
			
КонецФункции

Функция ПолучитьНомерНаПечать_КонтурEDI(ДокументСсылка) Экспорт
	
	НомерДокумента = ОбработкаСобытияПодключаемогоМодуля("ПолучитьНомерНаПечать",,
			Новый Структура("ДокументСсылка",
			ДокументСсылка));
			
	Если НомерДокумента<>Неопределено Тогда
		Возврат НомерДокумента;
	КонецЕсли;			
	
	Если МодульИнтеграции_Новый.ИмяКонфигурации1С = "УТ_10_2" ИЛИ МодульИнтеграции_Новый.ИмяКонфигурации1С = "RIT" Тогда
		Выполнить("НомерДокумента = ПолучитьНомерНаПечать(ДокументСсылка);");
	Иначе
		Попытка
			Выполнить("НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументСсылка);");
		Исключение
			Попытка
				Выполнить("НомерДокумента = ПолучитьНомерНаПечать(ДокументСсылка);"); // если нам попалась старая версия УПП с глобальными модулями
			Исключение
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;
	
	Возврат НомерДокумента;
	
КонецФункции	

//заглушка для вывода сообщений: в обычных формах и в УФ, сюда же можно закинуть логгирование
Процедура Сообщить_КонтурEDI(ТекстСообщения,Парам2="",Парам3="") Экспорт
	#Если Клиент Тогда
	Сообщить(ТекстСообщения);
	#КонецЕсли
    //а для УФ можно сделать СообщениеПользователю.
КонецПроцедуры	

//заглушка для отрисовки статуса
Процедура Состояние_КонтурEDI(ТекстСообщения,Парам2="",Парам3="") Экспорт
	#Если Клиент Тогда
	Состояние(ТекстСообщения);
	#КонецЕсли
    //а для УФ можно сделать СообщениеПользователю.
КонецПроцедуры	

//можем ли мы использовать DialMail вместо FTP из платформы
Процедура ПроверитьДоступностьКомпонентыDialMail() Экспорт
		
	НастройкаРаботатьЧерезDialMail = (ПротоколОбмена_КонтурEDI = "DialMail");
	
	Если НастройкаРаботатьЧерезDialMail = Истина Тогда
		
		УдачноеПодключение = Ложь;
		
		Попытка
			
			Если КомпонентаDialMailПодключена <> Истина Тогда
				
				КомпонентаDialMailПодключена = ПодключитьВнешнююКомпоненту_КонтурEDI("AddIn.FTP");
				
				УдачноеПодключение = КомпонентаDialMailПодключена;
			Иначе
				УдачноеПодключение = Истина;
			КонецЕсли;
		Исключение
			УдачноеПодключение = Ложь;
		КонецПопытки;
		
		Если Не УдачноеПодключение Тогда
//			МодульИнтеграции_Новый.УстановитьКонстантуEDI("ИспользоватьDialMail",	Ложь);
			МодульИнтеграции_Новый.УстановитьКонстантуEDI("ПротоколОбмена_КонтурEDI",	"FTP");//скинем на штатный FTP
			ПротоколОбмена_КонтурEDI = "FTP";
		КонецЕсли;
		
//		ИспользоватьDialMail = УдачноеПодключение;
		
	ИначеЕсли НастройкаРаботатьЧерезDialMail = Неопределено Тогда
		
//		МодульИнтеграции_Новый.УстановитьКонстантуEDI("ИспользоватьDialMail",	Ложь);
//		ИспользоватьDialMail = Ложь;
		
		//МодульИнтеграции_Новый.УстановитьКонстантуEDI("ПротоколОбмена_КонтурEDI",	"FTP");//скинем на штатный FTP
		//ПротоколОбмена_КонтурEDI = "FTP";
		
	Иначе
		
//		ИспользоватьDialMail = Ложь;
		//МодульИнтеграции_Новый.УстановитьКонстантуEDI("ПротоколОбмена_КонтурEDI",	"FTP");//скинем на штатный FTP
		//ПротоколОбмена_КонтурEDI = "FTP";
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКартинкуEDI(ИсточникКартинки,ИмяКартинки) Экспорт
	
	Если ИсточникКартинки = "ЭлементФормы" Тогда
		НайденныйЭлемент = БиблиотекаКартинокEDI.ЭлементыФормы.Найти(ИмяКартинки);
		Если НЕ НайденныйЭлемент = Неопределено Тогда
			
			Возврат НайденныйЭлемент.Картинка;
			
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьИдентификаторМодуля() Экспорт
	
	Возврат "KonturEDI_82";
	
КонецФункции

//заглушка для совместимости с 8.1
Функция ПодключитьВнешнююКомпоненту_КонтурEDI(ИмяКомпоненты) Экспорт
	Результат=Истина;
	СИ=Новый СистемнаяИнформация;
	Если Лев(СИ.ВерсияПриложения,3)="8.1"  //перед нами 8.1
			Или Лев(СИ.ВерсияПриложения,1)="1" Тогда //в документации путаница, на всякий случай попробуем так и так
		Попытка
			Выполнить("ПодключитьВнешнююКомпоненту("""+ИмяКомпоненты+""");");//в 8.1 это процедура, а не функция. Если будет ошибка, все равно свалимся в Исключение
		Исключение
			Результат=Ложь;
		КонецПопытки;	
	Иначе//8.2 и выше, тут все ок
		Выполнить("Результат = ПодключитьВнешнююКомпоненту(""AddIn.FTP"");");
	КонецЕсли;
	Возврат Результат;
КонецФункции	


// РАБОТА С ДИАДОКОМ
//#Если НаКлиенте Тогда
Процедура ИнициализироватьРаботуСДиадоком() Экспорт
	
	ТребуемаяВерсияКомпонентыДиадок = "3";
	
	// загружаем компоненту
	КраткоеИмяДиадок="Diadoc_EDI_"+ТребуемаяВерсияКомпонентыДиадок;
	ПутьКФайлуКомпонентыДД =  КаталогВременныхФайлов()+КраткоеИмяДиадок+".dll";
	
	ЗагрузилиКомпоненту = Ложь;
	ФайлКомпоненты = Новый Файл(ПутьКФайлуКомпонентыДД);
	Если Не ФайлКомпоненты.Существует() Тогда
		
		СохраненныйФайл=ПолучитьФайлИзБазы(КраткоеИмяДиадок);
		Если СохраненныйФайл=Неопределено Тогда
			
			Состояние_КонтурEDI("Загрузка модуля Диадок с сервера...");
			Сообщить_КонтурEDI("Загрузка модуля Диадок с сервера...");//дубль в окно сообщений на всякий случай
			
			Если Не	ПолучитьФайлHTTP(
				ПолучитьСоединениеHTTP(Адрес_edi_kontur_ru),
				"/1c/support/"+КраткоеИмяДиадок+".dll",
				ПутьКФайлуКомпонентыДД)
			Тогда
				ВывестиПредупреждение_КонтурEDI("Не удалось загрузить модуль Диадок с сервера. 
				|Обратитесь в техподдержку");
				Состояние_КонтурEDI("");
				Возврат;
			КонецЕсли;	
			
			Состояние_КонтурEDI("Сохранение (кэширование) модуля Диадок...");
			Если Не СохранитьФайлВБазу(ПутьКФайлуКомпонентыДД,КраткоеИмяДиадок) Тогда
				Сообщить_КонтурEDI("Не удалось сохранить модуль Диадок в базе, в следующий раз модуль будет повторно загружен с сайта");
			КонецЕсли;	
			
		Иначе	//модуль сохранен в базе
			СохраненныйФайл.Записать(ПутьКФайлуКомпонентыДД);
			Попытка
				ЗагрузитьВнешнююКомпоненту(ПутьКФайлуКомпонентыДД);	
				ЗагрузилиКомпоненту = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;	
	Иначе
		
		Попытка
			ЗагрузитьВнешнююКомпоненту(ПутьКФайлуКомпонентыДД);	
			ЗагрузилиКомпоненту = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	//диадок будем при первом запуске качать с файла и пытаться сохранить в конфигурации

	Если ЗагрузилиКомпоненту Тогда
		
		РаботаССерверомДиадок.Используется = Истина;
		
		// создание объекта контекста API
		ДиадокАПИ_ = Новый("AddIn.DiadocInvoiceAPI");
		ДиадокАПИ  = ДиадокАпи_.CreateObject();
		
		//Задаем параметры подлючения к серверу
		ДиадокАПИ.ApiClientId = "1S-Box2_19-b9b4602d-c9fa-4680-ad9a-0bd740eed1c8";
		ДиадокАПИ.ServerUrl   = "https://diadoc-api.kontur.ru:443";
		
		РаботаССерверомДиадок.АПИ = ДиадокАПИ;
		
	КонецЕсли;
	
КонецПроцедуры
//#КонецЕсли

Функция УстановитьСоединениеСДиадокомПоЛогину(Логин,Пароль) Экспорт
	
	Если НЕ РаботаССерверомДиадок.Используется Тогда
		ИнициализироватьРаботуСДиадоком();
	КонецЕсли;
	
	Если НЕ РаботаССерверомДиадок.Используется Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ДиадокСоединение = РаботаССерверомДиадок.АПИ.CreateConnectionByLogin(Логин,Пароль);
		РаботаССерверомДиадок.Соединение = ДиадокСоединение;         
	Исключение
		РаботаССерверомДиадок.Используется = Ложь;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция УстановитьСоединениеСДиадокомПоУмолчанию(ВыводитьПредупреждения = Истина) Экспорт
	
	Если РаботаССерверомДиадок.Используется Тогда
		Возврат Истина;
	КонецЕсли;
	
	Логин = МодульИнтеграции_Новый.ПараметрыПользователяEDI.ЛогинСлужебныйДиадок;
	Пароль = МодульИнтеграции_Новый.ПараметрыПользователяEDI.ПарольСлужебныйДиадок;
	
	Если ЗначениеЗаполнено(Логин) и ЗначениеЗаполнено(Пароль) Тогда
		Если УстановитьСоединениеСДиадокомПоЛогину(Логин,Пароль) Тогда
			Возврат Истина;
		Иначе
			Если ВыводитьПредупреждения Тогда
				ВывестиПредупреждение_КонтурEDI("Не удалось установить соединение с Диадоком! 
				|Проверьте параметры подключения в настройках модуля на вкладке ЭДО (Диадок).");
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Если ВыводитьПредупреждения Тогда
			ВывестиПредупреждение_КонтурEDI("Не указаны параметры подключения к Диадоку! 
			|Введите логин и пароль в меню настроек на вкладке ЭДО (Диадок).");
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
	

//#Область Внешнее_Соединение

//СтруктураКолонокПреобразуемыхВСсылки = Структура
//Ключ - имя преобразуемой колонки
//Значение - тип колонки в текущей базе (объект ОписаниеТипов)
Функция ПолучитьТаблицуИзВнешнейБазы(ВнешняяТаблица,СтруктураКолонокПреобразуемыхВСсылки=Неопределено) Экспорт
	
	//можно еще в ТипыПреобразуемыхКолонок дать возможность писать пустое значение, чтоб по умолчанию преобразовывалось в Строка(80)
	
	//на рефакторинг: разобраться с пакетным преобразованием колонок
	
	БыстроеПреобразование = Истина; //для отладки, чтобы можно было отключить в случае чего
		
	Если СтруктураКолонокПреобразуемыхВСсылки = Неопределено Тогда
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура;
	КонецЕсли;	
	ПреобразуемыеКолонки = Новый Массив;
	ТипыПреобразуемыхКолонок = Новый Массив;
	
	Для Каждого Эл Из СтруктураКолонокПреобразуемыхВСсылки Цикл
		ПреобразуемыеКолонки.Добавить(Эл.Ключ);
		ТипыПреобразуемыхКолонок.Добавить(Эл.Значение);
	КонецЦикла;	
	
	СтрокаПреобразуемыеКолонки = "";
	Для Каждого Эл Из ПреобразуемыеКолонки Цикл
		СтрокаПреобразуемыеКолонки = СтрокаПреобразуемыеКолонки+?(СтрокаПреобразуемыеКолонки="","",",")+Эл;
	КонецЦикла;	
	
	ВнутренняяТаблица = Новый ТаблицаЗначений;
	МассивКолонокПреобразуемыхВСтроки = Новый Массив;
	
	Для Каждого Колонка Из ВнешняяТаблица.Колонки Цикл
		
		ЭтоПримитивныйТип = Истина;
		ТипыВнешнейКолонки = Колонка.ТипЗначения.Типы();
		Для Каждого Эл Из ТипыВнешнейКолонки Цикл 
			ТипЗначенияКолонкиСтрокой = СоединениеСХранилищем.String(Эл);
			Если (ТипЗначенияКолонкиСтрокой <> "Дата"
				и ТипЗначенияКолонкиСтрокой <> "Булево"
				и ТипЗначенияКолонкиСтрокой <> "Строка"
				и ТипЗначенияКолонкиСтрокой <> "Число"
				и ТипЗначенияКолонкиСтрокой <> "Null")
				Тогда
				ЭтоПримитивныйТип = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		ИндексПреобразуемойКолонки = ПреобразуемыеКолонки.Найти(Колонка.Имя);
		
		Если ИндексПреобразуемойКолонки<>Неопределено Тогда
			//ВнутренняяТаблица.Колонки.Добавить(Колонка.Имя,ТипыПреобразуемыхКолонок[ИндексПреобразуемойКолонки]);
			Если ЗначениеЗаполнено(ТипыПреобразуемыхКолонок[ИндексПреобразуемойКолонки]) Тогда
				ВнутренняяТаблица.Колонки.Добавить(Колонка.Имя,ТипыПреобразуемыхКолонок[ИндексПреобразуемойКолонки]);
			Иначе
				ВнутренняяТаблица.Колонки.Добавить(Колонка.Имя);
			КонецЕсли;
		ИначеЕсли ЭтоПримитивныйТип	Тогда
		    //это примитивные типы. Их перетащим прямо как есть
			ВнутренняяТаблица.Колонки.Добавить(Колонка.Имя,ЗначениеИзСтрокиВнутр(СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Колонка.ТипЗначения)));
			
		Иначе	//это ссылки внешней базы. Преобразуем их в Строка(80)
			ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(80));
			ВнутренняяТаблица.Колонки.Добавить(Колонка.Имя,ОписаниеТиповСтрока);
			
			МассивКолонокПреобразуемыхВСтроки.Добавить(Колонка.Имя);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого СтрокаВнешнейТаблицы Из ВнешняяТаблица Цикл
		Нов = ВнутренняяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(Нов,СтрокаВнешнейТаблицы,,СтрокаПреобразуемыеКолонки);
	КонецЦикла;
	
	Для Каждого ТекКолонка Из ПреобразуемыеКолонки Цикл
		//преобразовать Строки внешней базы в Ссылки текущей базы
		
		Если Не БыстроеПреобразование Тогда
		//вариант поштучного преобразования
			Сч=0;
			Для Каждого СтрокаВнешнейТаблицы Из ВнешняяТаблица Цикл
				Если ЗначениеЗаполнено(СтрокаВнешнейТаблицы[ТекКолонка]) Тогда
					ВнутренняяТаблица[Сч][ТекКолонка] = ЗначениеИзСтрокиВнутр(СтрокаВнешнейТаблицы[ТекКолонка]);
				КонецЕсли;	
				Сч=Сч+1;
			КонецЦикла;	
		Иначе
			//а здесь - быстрое преобразование пачкой
			МассивДляПреобразования = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(ВнешняяТаблица.ВыгрузитьКолонку(ТекКолонка));
			НоваяСтрока = СтрЗаменить(МассивДляПреобразования,"{""S"",""{""""#"""",","{""#"",");
			НоваяСтрока = СтрЗаменить(НоваяСтрока,"}""}","}");
			ПреобразованноеЗначение = ЗначениеИзСтрокиВнутр(НоваяСтрока);
			ВнутренняяТаблица.ЗагрузитьКолонку(ПреобразованноеЗначение,ТекКолонка);
		 КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекКолонка Из МассивКолонокПреобразуемыхВСтроки Цикл
		//преобразовать Ссылки во внешней базе в Строки в текущей базе
		Попытка
			//быстрое преобразование пачкой
			МассивДляПреобразования = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(ВнешняяТаблица.ВыгрузитьКолонку(ТекКолонка));
			НоваяСтрока = СтрЗаменить(МассивДляПреобразования,"{""#"",","{""S"",""{""""#"""",");
			НоваяСтрока = СтрЗаменить(НоваяСтрока,"}","}""}");
			НоваяСтрока = СтрЗаменить(НоваяСтрока,"{""U""}""}","{""U""}");
			НоваяСтрока = СтрЗаменить(НоваяСтрока,"{""L""}""}","{""L""}");
			
			
			НоваяСтрока = "{""#"""+Сред(НоваяСтрока,13);
			НоваяСтрока = Лев(НоваяСтрока,СтрДлина(НоваяСтрока)-7)+
			"}
			|}";
			ПреобразованноеЗначение = ЗначениеИзСтрокиВнутр(НоваяСтрока);
			ВнутренняяТаблица.ЗагрузитьКолонку(ПреобразованноеЗначение,ТекКолонка);
		Исключение
			//вариант поштучного преобразования
			Сч=0;
			Для Каждого СтрокаВнешнейТаблицы Из ВнешняяТаблица Цикл
				Если СтрокаВнешнейТаблицы[ТекКолонка]=NULL Тогда
					ВнутренняяТаблица[Сч][ТекКолонка] = NULL
				ИначеЕсли СтрокаВнешнейТаблицы[ТекКолонка]=Неопределено Тогда
					ВнутренняяТаблица[Сч][ТекКолонка] = Неопределено
				Иначе	
					ВнутренняяТаблица[Сч][ТекКолонка] = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(СтрокаВнешнейТаблицы[ТекКолонка]);
				КонецЕсли;
				Сч=Сч+1;
			КонецЦикла;	
		КонецПопытки;	
	КонецЦикла;
	
	Возврат ВнутренняяТаблица;
	
КонецФункции	

//СтруктураКолонокПреобразуемыхВСсылки = Структура
//Ключ - имя преобразуемой колонки
//Значение - тип колонки во внешней базе
//Поскольку во внешней базе всего 3 ссылочных типа - КонтурEDI_ДополнительныеСправочники,КонтурEDI_ТочкиДоставки,КонтурEDI_Сообщения, то используются именно эти значения
Функция ПоместитьТаблицуВоВнешнююБазу(ВнутренняяТаблица,СтруктураКолонокПреобразуемыхВСсылки=Неопределено) Экспорт
	
	//на самом деле, мы можем преобразовать в таблице колонки и закинуть ее полностью через ЗначениеВСтрокуВнутр
	
	БыстроеПреобразование = Истина; //для отладки, чтобы можно было отключить в случае чего
	
	Если СтруктураКолонокПреобразуемыхВСсылки = Неопределено Тогда
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура;
	КонецЕсли;	
	ПреобразуемыеКолонки = Новый Массив;
	ТипыПреобразуемыхКолонок = Новый Массив;
	
	Для Каждого Эл Из СтруктураКолонокПреобразуемыхВСсылки Цикл
		ПреобразуемыеКолонки.Добавить(Эл.Ключ);
		ТипыПреобразуемыхКолонок.Добавить(Эл.Значение);
	КонецЦикла;	
	
	СтрокаПреобразуемыеКолонки = "";
	Для Каждого Эл Из ПреобразуемыеКолонки Цикл
		СтрокаПреобразуемыеКолонки = СтрокаПреобразуемыеКолонки+?(СтрокаПреобразуемыеКолонки="","",",")+Эл;
	КонецЦикла;	
	
	ВнешняяТаблица = СоединениеСХранилищем.NewObject("ТаблицаЗначений");	
	
	//1. Подготовим колонки таблицы
	МассивКолонокПреобразуемыхВСтроки = Новый Массив;
	
	Для Каждого Колонка Из ВнутренняяТаблица.Колонки Цикл
		
		ЭтоПримитивныйТип = Истина;
		ТипыВнутреннейКолонки = Колонка.ТипЗначения.Типы();
		Для Каждого Эл Из ТипыВнутреннейКолонки Цикл
			ТипЗначенияКолонкиСтрокой = Строка(Эл);
			Если (ТипЗначенияКолонкиСтрокой <> "Дата"
				и ТипЗначенияКолонкиСтрокой <> "Булево"
				и ТипЗначенияКолонкиСтрокой <> "Строка"
				и ТипЗначенияКолонкиСтрокой <> "Число"
				и ТипЗначенияКолонкиСтрокой <> "Null")
				Тогда
				ЭтоПримитивныйТип = Ложь;
			КонецЕсли;
		КонецЦикла;	
		
		ИндексПреобразуемойКолонки = ПреобразуемыеКолонки.Найти(Колонка.Имя);
		
		Если ИндексПреобразуемойКолонки<>Неопределено Тогда
			//такие колонки нам надо преобразовать в тип внешней базы
			
			ТипВнешнейБазы = СоединениеСХранилищем.ПолучитьТипЗначения(ТипыПреобразуемыхКолонок[ИндексПреобразуемойКолонки]);
			ВнешняяТаблица.Колонки.Добавить(Колонка.Имя,ТипВнешнейБазы);
		ИначеЕсли ЭтоПримитивныйТип Тогда
		    //это примитивные типы. Их перетащим прямо как есть
			ВнешняяТаблица.Колонки.Добавить(Колонка.Имя,СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Колонка.ТипЗначения)));
			
			
		Иначе
			//тут остаются типы, которые в текуще базе являются ссылками, а во внешней будут строками
			
			//преобразуем такие колонки в Строки
			ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(80));
			ВнешняяТаблица.Колонки.Добавить(Колонка.Имя,СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ОписаниеТиповСтрока)));
			
			//и пометить их, чтобы при заполнении внешней таблицы преобразовать их в Строки!!!
			МассивКолонокПреобразуемыхВСтроки.Добавить(Колонка.Имя);
			
		КонецЕсли;	
	КонецЦикла;	
	
	//2. Перекачаем строки в созданную таблицу
	
	Для Сч = 0 По ВнутренняяТаблица.Количество()-1 Цикл
		Нов = ВнешняяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(Нов,ВнутренняяТаблица[Сч],,СтрокаПреобразуемыеКолонки);
		//колонки из МассивКолонокПреобразуемыхВСтроки тоже заполнятся, ну и ладно пока
	КонецЦикла;
	
	Для Каждого ТекКолонка Из ПреобразуемыеКолонки Цикл
		//преобразовать Строки из текущей таблицы в Ссылки во внешней базе
		Если Не БыстроеПреобразование Тогда
			//поштучное преобразование
			Сч=0;
			Для Каждого ВнешняяСтрока Из ВнешняяТаблица Цикл
				ВнешняяСтрока[ТекКолонка] = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ВнутренняяТаблица[Сч][ТекКолонка]);
				Сч=Сч+1;
			КонецЦикла;	
		Иначе
			//а здесь - быстрое преобразование пачкой
			МассивДляПреобразования = ЗначениеВСтрокуВнутр(ВнутренняяТаблица.ВыгрузитьКолонку(ТекКолонка));
			НоваяСтрока = СтрЗаменить(МассивДляПреобразования,"{""S"",""{""""#"""",","{""#"",");
			НоваяСтрока = СтрЗаменить(НоваяСтрока,"}""}","}");
			ПреобразованноеЗначение = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(НоваяСтрока);
			ВнешняяТаблица.ЗагрузитьКолонку(ПреобразованноеЗначение,ТекКолонка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекКолонка Из МассивКолонокПреобразуемыхВСтроки Цикл
		//преобразовать Ссылки в текущей базе в Строки во внешней базе
		
		Попытка
			//быстрое преобразование пачкой
			МассивДляПреобразования = ЗначениеВСтрокуВнутр(ВнутренняяТаблица.ВыгрузитьКолонку(ТекКолонка));
			НоваяСтрока = СтрЗаменить(МассивДляПреобразования,"{""#"",","{""S"",""{""""#"""",");
			НоваяСтрока = СтрЗаменить(НоваяСтрока,"}","}""}");
			НоваяСтрока = СтрЗаменить(НоваяСтрока,"{""L""}""}","{""L""}");
			НоваяСтрока = СтрЗаменить(НоваяСтрока,"{""U""}""}","{""U""}");
			
			НоваяСтрока = "{""#"""+Сред(НоваяСтрока,13);
			НоваяСтрока = Лев(НоваяСтрока,СтрДлина(НоваяСтрока)-7)+
			"}
			|}";
			ПреобразованноеЗначение = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(НоваяСтрока);
			ВнешняяТаблица.ЗагрузитьКолонку(ПреобразованноеЗначение,ТекКолонка);
		Исключение	
			//поштучное преобразование
			Сч=0;
			Для Каждого ВнешняяСтрока Из ВнешняяТаблица Цикл
				Если ВнутренняяТаблица[Сч][ТекКолонка] = NULL Тогда
					ВнешняяСтрока[ТекКолонка] = NULL;
				ИначеЕсли ВнутренняяТаблица[Сч][ТекКолонка] = Неопределено Тогда
					ВнешняяСтрока[ТекКолонка] = Неопределено;
				Иначе	
					ВнешняяСтрока[ТекКолонка] = ЗначениеВСтрокуВнутр(ВнутренняяТаблица[Сч][ТекКолонка]);
				КонецЕсли;
				Сч=Сч+1;
			КонецЦикла;
		КонецПопытки;
	КонецЦикла;
	
	Возврат ВнешняяТаблица;
КонецФункции	

//Передает временную таблицу ИмяВТ из запроса ЛокальныйЗапрос в ВнешнийЗапрос.
//При необходимости индексирует ее по полям Индексы (Строка через запятые), и конвертирует поля СтруктураКолонокПреобразуемыхВСсылки.
Процедура ПередатьВременнуюТаблицуВоВнешнийЗапрос(ИмяВТ,ЛокальныйЗапрос,ВнешнийЗапрос,СтруктураКолонокПреобразуемыхВСсылки=Неопределено,Индексы=Неопределено) Экспорт
	ИсходныйТекстЗапроса_Локальный	= ЛокальныйЗапрос.Текст;
	ИсходныйТекстЗапроса_Внешний	= ВнешнийЗапрос.Текст;
	
	//выгрузим ВТ в ТаблицуЗначений
	ЛокальныйЗапрос.Текст = "Выбрать * Из "+ИмяВТ;
	ВТ = ЛокальныйЗапрос.Выполнить().Выгрузить();
	ВТ = ПоместитьТаблицуВоВнешнююБазу(ВТ,СтруктураКолонокПреобразуемыхВСсылки);//передадим ТаблицуЗначений с локальной базы во внешнее соединение
	
	//подготовим текст запроса для помещения ТаблицыЗначений во ВременнуюТаблицу ВнешнегоЗапроса
	ВнешнийЗапрос.Текст = "Выбрать * Поместить "+ИмяВТ+" Из &"+ИмяВТ+" как "+ИмяВТ;
	Если ЗначениеЗаполнено(Индексы) Тогда
		ВнешнийЗапрос.Текст = ВнешнийЗапрос.Текст+" Индексировать по "+Индексы;
	КонецЕсли;	
	ВнешнийЗапрос.УстановитьПараметр(ИмяВТ,ВТ);
	ВнешнийЗапрос.Выполнить();//создадим врем.таблицу
//	СоединениеСХранилищем.ВыполнитьЗапросСОтладкой(ВнешнийЗапрос); //отладка
	
	//вернем обратно исходные тексты запросов
	ЛокальныйЗапрос.Текст	= ИсходныйТекстЗапроса_Локальный;
	ВнешнийЗапрос.Текст		= ИсходныйТекстЗапроса_Внешний;
	
КонецПроцедуры	

//Передает временную таблицу ИмяВТ из запроса ВнешнийЗапрос в ЛокальныйЗапрос.
//При необходимости индексирует ее по полям Индексы (Строка через запятые), и конвертирует поля СтруктураКолонокПреобразуемыхВСсылки.
Процедура ПередатьВременнуюТаблицуВЛокальныйЗапрос(ИмяВТ,ЛокальныйЗапрос,ВнешнийЗапрос,СтруктураКолонокПреобразуемыхВСсылки=Неопределено,Индексы=Неопределено) Экспорт
	ИсходныйТекстЗапроса_Локальный	= ЛокальныйЗапрос.Текст;
	ИсходныйТекстЗапроса_Внешний	= ВнешнийЗапрос.Текст;
	
	//выгрузим ВТ в ТаблицуЗначений
	ВнешнийЗапрос.Текст = "Выбрать * Из "+ИмяВТ;
//	ВТ = СоединениеСХранилищем.ВыполнитьЗапросСОтладкой(ВнешнийЗапрос).Выгрузить(); //отладка
	ВТ = ВнешнийЗапрос.Выполнить().Выгрузить();
	ВТ = ПолучитьТаблицуИзВнешнейБазы(ВТ,СтруктураКолонокПреобразуемыхВСсылки);//конвертируем ТаблицуЗначений внешнего соединения в локальную ТаблицуЗначений
	
	//подготовим текст запроса для помещения ТаблицыЗначений во ВременнуюТаблицу ЛокальногоЗапроса
	ЛокальныйЗапрос.Текст = "Выбрать * Поместить "+ИмяВТ+" Из &"+ИмяВТ+" как "+ИмяВТ;
	
	Если ЗначениеЗаполнено(Индексы) Тогда
		ЛокальныйЗапрос.Текст = ЛокальныйЗапрос.Текст+" Индексировать по "+Индексы;
	КонецЕсли;	
	ЛокальныйЗапрос.УстановитьПараметр(ИмяВТ,ВТ);
	ЛокальныйЗапрос.Выполнить();//создадим врем.таблицу
	
	//вернем обратно исходные тексты запросов
	ЛокальныйЗапрос.Текст	= ИсходныйТекстЗапроса_Локальный;
	ВнешнийЗапрос.Текст		= ИсходныйТекстЗапроса_Внешний;
	
КонецПроцедуры	

//выбирает все поля из временной таблицы ИмяВТ запроса Запрос, и возвращает их в виде ТаблицыЗначений
//используется для отладки
Функция ПросмотретьВременнуюТаблицуЗапроса(Запрос,ИмяВТ) Экспорт
	ТекстЗапроса_Исходный = Запрос.Текст;
	Запрос.Текст = "Выбрать * Из "+ИмяВТ;
	ТЗ = Запрос.Выполнить().Выгрузить();
	Запрос.Текст = ТекстЗапроса_Исходный;
	Возврат ТЗ;
КонецФункции	


//заменяет в запросах таблицы: ЗаказПокупателя на РеализацияТоваров
//и основания счетов-фактур
//сюда же можно прикрутить нетиповые названия полей: Фирма вместо Организация, Покупатель вместо Контрагент и т.д.
Процедура ЗаменитьКастомныеПоляЗапроса(ТекстЗапроса, ЗаменятьСсылкиВнешнегоХранилища = Ложь, ИдентификаторЗапроса = Неопределено) Экспорт
	
	Если ИспользуетсяПодключаемыйМодуль = Истина Тогда
		СтандартнаяОбработкаEDI = Истина;
//		ПодключаемыйМодуль.ИзменитьТекстЗапроса(ИдентификаторЗапроса,ТекстЗапроса,ЗаменятьСсылкиВнешнегоХранилища,СтандартнаяОбработкаEDI);
		ОбработкаСобытияПодключаемогоМодуля("ИзменитьТекстЗапроса",СтандартнаяОбработкаEDI,
				Новый Структура("ИдентификаторЗапроса,ТекстЗапроса,ЗаменятьСсылкиВнешнегоХранилища",
				ИдентификаторЗапроса,ТекстЗапроса,ЗаменятьСсылкиВнешнегоХранилища));
		
		Если Не СтандартнаяОбработкаEDI Тогда
			Возврат;//ничего больше не делаем
		КонецЕсли;	
	КонецЕсли;	
	
	Если МодульИнтеграции_Новый.ИмяКонфигурации1С = "БП" 
		ИЛИ МодульИнтеграции_Новый.ПараметрыПользователяEDI.СоздаваемыйДокументИзORDERS = "РеализацияТоваровУслуг" Тогда
		ТипРеализации = МодульИнтеграции_Новый.ПолучитьТипЗначенияОбъекта("РеализацияТоваров",Истина);
		ТекстЗапроса  = СтрЗаменить(ТекстЗапроса,"Документ.ЗаказПокупателя","Документ.РеализацияТоваровУслуг");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,".Сделка",".Ссылка");
		
		ТекстЗапроса  = СтрЗаменить(ТекстЗапроса,"Документ.ЗаказПоставщику","Документ.ПоступлениеТоваровУслуг");
//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,".Сделка",".Ссылка");
	КонецЕсли;	

    InvoicИзРТУ = (МодульИнтеграции_Новый.ПолучитьКонстантуEDI("INVOIC_Из_РТУ") = Истина);
	
	Если InvoicИзРТУ Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.СчетФактураВыданный.ДокументыОснования","Документ.РеализацияТоваровУслуг");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПО (СчетФактураВыданныйДокументыОснования.ДокументОснование = РеализацияТоваровУслуг.Ссылка)","ПО (СчетФактураВыданныйДокументыОснования.Ссылка = РеализацияТоваровУслуг.Ссылка)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"СчетФактураВыданныйДокументыОснования.ДокументОснование КАК Документ.РеализацияТоваровУслуг","СчетФактураВыданныйДокументыОснования.Ссылка КАК Документ.РеализацияТоваровУслуг");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.СчетФактураВыданный","Документ.РеализацияТоваровУслуг");

	КонецЕсли;	
	

	
	Если МодульИнтеграции_Новый.ИмяКонфигурации1С = "УТ_10_2" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.СчетФактураВыданный.ДокументыОснования","Документ.СчетФактураВыданный");
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"СуммаДокумента","Сумма");
	КонецЕсли;
	
	Если ЗаменятьСсылкиВнешнегоХранилища Тогда
		
		//Поменяем Ссылки, вроде "Таб.Документ Ссылка Документ.РеализацияТоваров"
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Ссылка Документ.РеализацияТоваровУслуг","ЕСТЬ НЕ NULL");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Ссылка Документ.ЗаказПокупателя","ЕСТЬ НЕ NULL");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Ссылка Документ.СчетФактураВыданный","ЕСТЬ НЕ NULL");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Ссылка Документ.ВозвратТоваровОтПокупателя","ЕСТЬ НЕ NULL");
		
		//то же самое для верхнего регистра на всякий случай
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ССЫЛКА Документ.РеализацияТоваровУслуг","ЕСТЬ НЕ NULL");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ССЫЛКА Документ.ЗаказПокупателя","ЕСТЬ НЕ NULL");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ССЫЛКА Документ.СчетФактураВыданный","ЕСТЬ НЕ NULL");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ССЫЛКА Документ.ВозвратТоваровОтПокупателя","ЕСТЬ НЕ NULL");
		
		
		//заменим типы документов на Строки
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.ЗаказПокупателя","Строка (80)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.РеализацияТоваровУслуг","Строка (80)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.СчетФактураВыданный","Строка (80)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Справочник.Контрагенты","Строка (80)");
		
		
		//Сравнение на Is Null во внешней базе некорректно. Меняем его на сравнение с пустой строкой, но только для заранее заданных полей: 
		//Заказ,Реализация,СчетФактура,Документ, возможно еще Возврат или КорректировочныйСчетФактура
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"СчетФактура ЕСТЬ NULL","СчетФактура = """"");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Заказ ЕСТЬ NULL","Заказ = """"");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Реализация ЕСТЬ NULL","Реализация = """"");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ ЕСТЬ NULL","Документ = """"");
		

	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПопытатьсяПодключитьсяКВнешнемуХранилищу() Экспорт
	
	ВнешнееХранилище = Ложь;
	//Возврат; //пока не задействуем
		
	СИ=Новый СистемнаяИнформация;
	Если Лев(СИ.ВерсияПриложения,3)="8.1"  //перед нами 8.1
		Или Лев(СИ.ВерсияПриложения,1)="1" 
		Тогда //в документации путаница, на всякий случай попробуем так и так
		ВерсияКоннектора = "81";
	Иначе
		Если Лев(СИ.ВерсияПриложения,3)="8.3" Тогда
			ВерсияКоннектора = "83";
		Иначе
			ВерсияКоннектора = "82";
		КонецЕсли;
	КонецЕсли;	
	
	_ПараметрыБазы = РазобратьСтрокуСоединенияИнформационнойБазы();
	Если _ПараметрыБазы.ТипСоединения = "Файл" Тогда
		//	Внешним хранилищем считаем папку с именем "KonturEDI_Data", которая находится в каталоге ИБ
		
		ПутьКВнешнемуХранилищу = _ПараметрыБазы.КаталогБазы+"KonturEDI_Data\";
		
		КаталогНаДиске = Новый Файл(ПутьКВнешнемуХранилищу);
		Если КаталогНаДиске.Существует() Тогда
			
			Коннектор = Новый COMОбъект("V"+ВерсияКоннектора+".ComConnector");
			Попытка
				СоединениеСХранилищем = Коннектор.Connect("File="""+СокрЛП(ПутьКВнешнемуХранилищу)+""";Usr="""";Pwd = """";");
				ВнешнееХранилище = Истина;
			Исключение
				_ТекстОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли _ПараметрыБазы.ТипСоединения = "Сервер" Тогда
		//	Внешним хранилищем считаем базу на том же сервере, но с именем <Имябазы+Постфикс "KonturEDI_Data">
		//пока отключим вообще
		Возврат;
		
		// kns {метка} 
		Если НЕ _ПараметрыБазы.ИмяБазы = "svn" Тогда
			
			Коннектор = Новый COMОбъект("V"+ВерсияКоннектора+".ComConnector");
			Попытка
				СоединениеСХранилищем = Коннектор.Connect("Srvr="""+_ПараметрыБазы.ИмяСервера+""";Ref = """+_ПараметрыБазы.ИмяБазы+"_KonturEDI_Data"";Usr="""";Pwd = """";");
				ВнешнееХранилище = Истина;
			Исключение
				_ТекстОшибки = ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// kns {метка} обработать ошибку подключения
	Если ЗначениеЗаполнено(_ТекстОшибки) Тогда
		//попробуем обработать сообщение про версию COM коннектора
		Если Найти(_ТекстОшибки,"comcntr")<>0 
			И Найти(_ТекстОшибки,"core")<>0 Тогда
			//это как раз наш случай
			//Версия компоненты 'comcntr' (8.2.19.106) отличается от версии корневого модуля 'core82' (8.2.19.60)
			//есть описание вот тут
			//http://j008.ru/ps/016_V82.COMConnector
			
			СИ = Новый СистемнаяИнформация;
			ВерсияПлатформы = СИ.ВерсияПриложения;
			Позиция = Найти(_ТекстОшибки,"'comcntr' (");
			ВерсияКоннектора = Сред(_ТекстОшибки,Позиция+11,10);
			Если Прав(ВерсияКоннектора,1)=")" Тогда
				ВерсияКоннектора = Лев(ВерсияКоннектора,9);
			КонецЕсли;	
			
			ТекстПредупреждения = "Версия COM-коннектора ("+ВерсияКоннектора+") отличается от версии платформы ("+ВерсияПлатформы+")."
				+Символы.ПС+"Переустановите платформу "+ВерсияПлатформы+" или используйте платформу "+ВерсияКоннектора+" для запуска базы";
				
			ВывестиПредупреждение_КонтурEDI(ТекстПредупреждения);
		Иначе
			ВывестиПредупреждение_КонтурEDI("Не удалось подключиться к внешнему хранилищу по причине:"+Символы.ПС+СокрЛП(_ТекстОшибки));
		КонецЕсли;	
		
	КонецЕсли;	
	
	
//С 8.2.12 программа установки выполняет регистрацию COM-соединения "для компьютера". Имеется возможность выполнить регистрацию "для пользователя" с помощью командной строки 
//regsvr32 /n /i:user comcntr.dl	
	
КонецПроцедуры

Функция РазобратьСтрокуСоединенияИнформационнойБазы() Экспорт
	Результат = Новый Структура;
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если Найти(ВРег(СтрокаСоединения),"FILE")>0 Тогда
		Результат.Вставить("ТипСоединения","Файл");
		КаталогБазы = Сред(СтрокаСоединения,7);
		ПозицияРазделителя = Найти(КаталогБазы,"""");
		
		Если ПозицияРазделителя=0 Тогда
			ВывестиПредупреждение_КонтурEDI("Не удалось разобрать путь к базе:"+СтрокаСоединенияИнформационнойБазы());	
			Возврат Результат;
		КонецЕсли;	
		
		КаталогБазы = Лев(КаталогБазы,ПозицияРазделителя-1);
		Если Прав(КаталогБазы,1)<>"\" Тогда 
			КаталогБазы = КаталогБазы+"\"; 
		КонецЕсли;
		
		Результат.Вставить("КаталогБазы",КаталогБазы);
		
	ИначеЕсли Найти(ВРег(СтрокаСоединения),"SRVR")>0 Тогда
		Результат.Вставить("ТипСоединения","Сервер");
		СтрокаСоединения = Сред(СтрокаСоединения,7);
		ПозицияРазделителя = Найти(СтрокаСоединения,";");
		
		Если ПозицияРазделителя=0 Тогда
			ВывестиПредупреждение_КонтурEDI("Не удалось разобрать путь к базе:"+СтрокаСоединенияИнформационнойБазы());	
			Возврат Результат;
		КонецЕсли;	
		
		ИмяСервера = Лев(СтрокаСоединения,ПозицияРазделителя-2);
		
		ИмяБазы = Сред(СтрокаСоединения,ПозицияРазделителя+6);
		ПозицияРазделителя = Найти(ИмяБазы,";");
		
		Если ПозицияРазделителя=0 Тогда
			ВывестиПредупреждение_КонтурEDI("Не удалось разобрать путь к базе:"+СтрокаСоединенияИнформационнойБазы());	
			Возврат Результат;
		КонецЕсли;	
		
		ИмяБазы = Лев(ИмяБазы,ПозицияРазделителя-2);
		
		Результат.Вставить("ИмяСервера",ИмяСервера);
		Результат.Вставить("ИмяБазы",ИмяБазы);
		
		//Srvr="K1210006";Ref="test_trade_10_3";		
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции	

//пока только для файловых баз. Создает базу сообщений/настроек в папке с основной базой
//Может работать только на клиенте!
Функция РазвернутьВнешнееХранилище_КонтурEDI() Экспорт
	//есть еще параметр
	//UseTemplate "C:\Documents and Settings\User\My Documents\tmplts\TestVendor\TestConfig\1Cv8.cf"
	//на будущее можно использовать его вместо загрузки из DT
	
	_ПараметрыБазы = РазобратьСтрокуСоединенияИнформационнойБазы();
	Если _ПараметрыБазы.ТипСоединения = "Файл" Тогда
		
		ПутьКВнешнемуХранилищу = _ПараметрыБазы.КаталогБазы+"KonturEDI_Data\";
		
		//очистим то, что было создано в прошлый раз.
		//Внимание! Нельзя это делать, если хранилище уже развернуто.
		//в форме настройки вариантов хранения в этом случае данная закладка скрывается с глаз долой.
		УдалитьФайлы(ПутьКВнешнемуХранилищу);
		
		//ПутьКВнешнемуХранилищу_Врем = КаталогВременныхФайлов()+"KonturEDI_Data";
		ПутьКВнешнемуХранилищу_Врем = "%temp%\KonturEDI_Data";
		УдалитьФайлы(ПутьКВнешнемуХранилищу_Врем);
		
		КаталогНаДиске = Новый Файл(ПутьКВнешнемуХранилищу);
		Если Не КаталогНаДиске.Существует() Тогда
			
			ИмяФайлаКонфигурации = ПолучитьИмяВременногоФайла("dt");
			ПолучитьМакет("ВнешняяБазаХраненияДанных").Записать(ИмяФайлаКонфигурации);
			
			ПутьКПриложению = """"+КаталогПрограммы()+"1cv8.exe""";
			
			//создадим чистую базу. 
			//Приходится создавать во врем.каталоге, т.к. 1cv8.exe не умеет создавать базы в папках, содержащих пробелы в пути 
			//а 1cestart.exe создает базу под последнюю установленную версию платформы.
			КоманднаяСтрока = ПутьКПриложению
				+ " CREATEINFOBASE FILE="""+ПутьКВнешнемуХранилищу_Врем+"""";
				
				
			//развернем базу из DT	
			КоманднаяСтрока = КоманднаяСтрока+Символы.ПС+
			ПутьКПриложению+" CONFIG /F """+ПутьКВнешнемуХранилищу_Врем+""" /RestoreIB """               //LoadCfg
				+ ИмяФайлаКонфигурации+""" /DisableStartupMessages" ;//загрузить конфиг   /RestoreIB<Имя файла>
				
			//скопируем из врем.папки в каталог базы
			КоманднаяСтрока = КоманднаяСтрока+Символы.ПС+
			"xcopy """+ПутьКВнешнемуХранилищу_Врем+""" """+ПутьКВнешнемуХранилищу+"""  /E /I";
				
				
			ИмяБатФайла = КаталогВременныхФайлов()+"KonturEDI_CreateExternalStore.bat";	
			Бат=Новый ТекстовыйДокумент;
			Бат.УстановитьТекст(КоманднаяСтрока);
			Бат.Записать(ИмяБатФайла,КодировкаТекста.OEM);
			
			#Если Клиент Тогда
			КомандаСистемы(""""+ИмяБатФайла+"""");
			#Иначе
			ЗапуститьПриложение(ИмяБатФайла,,Истина);
			#КонецЕсли
			
			//и сразу подключимся, если это первый запуск модуля
			//Если УчетныеЗаписи=Неопределено Тогда
				ПопытатьсяПодключитьсяКВнешнемуХранилищу();
			//КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецФункции

Функция ИнициализироватьЗапрос_КонтурEDI(ДляВнешнегоХранилища = Ложь) Экспорт
	Если ДляВнешнегоХранилища Тогда
		_Запрос = СоединениеСХранилищем.NewObject("Запрос");
		_Запрос.МенеджерВременныхТаблиц = СоединениеСХранилищем.NewObject("МенеджерВременныхТаблиц");
	Иначе
		_Запрос = Новый Запрос();
		_Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	Возврат _Запрос;
КонецФункции	


//#КонецОбласти  //Внешнее_Соединение





//#Область Парсинг_JSON

//Код найден, вроде бы, на просторах Инфостарта, авторство установить уже вряд ли удастся, но в любом случае большое спасибо автору следующих строк!

Функция ПрочитатьJSON(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь) Экспорт 
	
	Возврат jsonПрочитатьИнициализация(Значение, Стандарт, ПредставленияСсылок);
	
КонецФункции // ПрочитатьJSON()

Функция jsonПрочитатьИнициализация(Значение, Знач Стандарт, Знач ПредставленияСсылок)
	
	// Проверка параметров.
	Если (Не Стандарт = Истина) И (Не Стандарт = Ложь) И (Не Стандарт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйПараметр("Стандарт"); КонецЕсли; 
	Если (Не ПредставленияСсылок = Истина) И (Не ПредставленияСсылок = Ложь) И (Не ПредставленияСсылок = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйПараметр("ПредставленияСсылок"); КонецЕсли; 
	
	// Использование более общего случая параметров.
	Альтернативный = (Стандарт = Неопределено) Или (Не Стандарт); Стандарт = (Стандарт = Неопределено) Или Стандарт; ПредставленияСсылок = (ПредставленияСсылок = Неопределено) Или ПредставленияСсылок;
	
	// Схема подстановок шестнадцатиричной системы.
	СхемаПодстановок = Новый Соответствие; ШестнадцатиричнаяСистема = "0123456789abcdef"; ДесятичноеЧисло = 0;
	Для ВторойРазряд = 1 По 16 Цикл Для ПервыйРазряд = 1 По 16 Цикл СхемаПодстановок.Вставить(Сред(ШестнадцатиричнаяСистема, ВторойРазряд, 1) + Сред(ШестнадцатиричнаяСистема, ПервыйРазряд, 1), ДесятичноеЧисло); ДесятичноеЧисло = ДесятичноеЧисло + 1; КонецЦикла; КонецЦикла;
	
	// Вспомогательные данные.
	ВспомогательныеДанные = Новый Структура("ТипСтроки,СхемаПодстановок,АвтоматическиПриводитьКСтруктуре",
		Тип("Строка"),
		СхемаПодстановок,
		Истина);
		
	// Стартовые значения.
	Индекс = 1; Длина = СтрДлина(Значение);
	
	// Форматирование (первый шаг парсера).
	Если Стандарт Тогда СимволыФорматирования = " " + Символы.ВК + Символы.ПС + Символы.Таб; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли;
	Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеПустойПакетДанных(); КонецЕсли; 
	
	// Парсер.
	Возврат jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Истина);
	
КонецФункции // jsonПрочитатьИнициализация()

Функция jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, ПервыйУровень)
	
	Символ = Сред(Значение, Индекс, 1);
	Если (Символ = """") Или (Символ = "'") Тогда        																	// " , '
		
		// Строка.
		Подстрока = Сред(Значение, Индекс + 1); Начало = Индекс; Пока Истина Цикл
			Позиция = Найти(Подстрока, Символ);
			
			Если (Позиция > 0) Тогда
				Индекс = Индекс + Позиция; Откат = Позиция - 1; Маскировка = Ложь; Пока (Сред(Подстрока, Откат, 1) = "\") И Откат Цикл Маскировка = Не Маскировка; Откат = Откат - 1; КонецЦикла;
				Если Маскировка Тогда Подстрока = Сред(Подстрока, Позиция + 1); Иначе Прервать; КонецЕсли;
			Иначе
		  		ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных();
			КонецЕсли;
			
		КонецЦикла;
		
		// Строка.
		Результат = jsonПрочитатьСтроку(Сред(Значение, Начало + 1, Индекс - Начало - 1), Стандарт, Начало, ВспомогательныеДанные.СхемаПодстановок, (Символ = "'"));
		
		Если jsonПрочитатьОпределитьДату(Результат) Тогда
			// Дата.
			Результат = jsonПрочитатьДату(Результат, Начало);
		ИначеЕсли jsonПрочитатьОпределитьИдентификатор(Результат) Тогда
			// Идентификатор.
			Результат = jsonПрочитатьИдентификатор(Результат, Начало);
		Иначе
			Если Альтернативный И jsonПрочитатьОпределитьВнутреннийТип(Результат) Тогда
				// Внутренний тип.
				Результат = jsonПрочитатьВнутреннийТип(Результат, Начало);
			КонецЕсли;
		КонецЕсли;
		
		// Корректировка индекса.
		Индекс = Индекс + 1;
		
	ИначеЕсли (Символ = "[") Тогда																							// [
		
		// Массив.
		Результат = Новый Массив;
		
		Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); Если (Символ = "]") Тогда														// ] 
			
			// Пустой массив.
			Индекс = Индекс + 1;
		
		Иначе
		
			Пока (Индекс <= Длина) Цикл
				
				// Значение.
				Результат.Добавить(jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь));
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = "]") Тогда																					// ]
					// Окончание массива.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение массива.
					Если (Символ = ",") Тогда																				// ,
						Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли (Символ = "{") Тогда																							// {
	
		// Объект.
		Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); Если (Символ = "}") Тогда														// } 
			
			// Пустой объект.
			Индекс = Индекс + 1;
			
			// Структура или соответствие.
			Если ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре Тогда Результат = Новый Структура; Иначе Результат = Новый Соответствие; КонецЕсли; 
		
		Иначе
			
			Результат = Новый Соответствие;
			
			ТипСтроки = ВспомогательныеДанные.ТипСтроки; Пока (Индекс <= Длина) Цикл
				
				// Ключ.
				Начало = Индекс; КлючЭлемента = jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь); Если (Не ТипЗнч(КлючЭлемента) = ТипСтроки) Тогда ВызватьИсключение ИсключениеНедопустимыйТипКлюча(Начало, КлючЭлемента); КонецЕсли;
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = ":") Тогда																					// :
					Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); КонецЕсли;
				Иначе
					ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ":");
				КонецЕсли;
				
				// Значение.
				ЗначениеЭлемента = jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь);
				
				// Коллекция.
				Результат.Вставить(КлючЭлемента, ЗначениеЭлемента);
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = "}") Тогда																					// }
					// Окончание объекта.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение объекта.
					Если (Символ = ",") Тогда																				// ,
						Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			// Структура или соответствие.
			Если ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре Тогда
				
				РезультатСтруктура = Новый Структура; 
				Для Каждого Элемент Из Результат Цикл Попытка РезультатСтруктура.Вставить(Элемент.Ключ, Элемент.Значение); Исключение РезультатСтруктура = Результат; АвтоматическоеПриведениеНеВыполнено = Истина; Прервать; КонецПопытки; КонецЦикла;
				Результат = РезультатСтруктура;
				
				// Ссылка.
				Если ПредставленияСсылок Тогда Результат = jsonПрочитатьСсылку(Результат, (АвтоматическоеПриведениеНеВыполнено = Истина)); КонецЕсли;
				
			Иначе
				
				// Ссылка.
				Если ПредставленияСсылок Тогда Результат = jsonПрочитатьСсылку(Результат, Истина); КонецЕсли;
				
			КонецЕсли; 
		
		КонецЕсли;
		
	Иначе
	
		// Остальные примитивные типы.
		Если (Символ = "n") Тогда
			
			// Null.
			Если (Сред(Значение, Индекс, 4) = "null") Тогда Индекс = Индекс + 4; Результат = Null; Иначе ВызватьИсключение ИсключениеНекорректныйТипNull(Индекс); КонецЕсли;
			
		ИначеЕсли (Символ = "t") Тогда
			
			// Истина.
			Если (Сред(Значение, Индекс, 4) = "true") Тогда Индекс = Индекс + 4; Результат = Истина; Иначе ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); КонецЕсли;
			
		ИначеЕсли (Символ = "f") Тогда
			
			// Ложь.
			Если (Сред(Значение, Индекс, 5) = "false") Тогда Индекс = Индекс + 5; Результат = Ложь; Иначе ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); КонецЕсли;
			
		ИначеЕсли (Символ = "u") Тогда
			
			// Неопределено.
			Если (Сред(Значение, Индекс, 9) = "undefined") Тогда Индекс = Индекс + 9; Результат = Неопределено; Иначе ВызватьИсключение ИсключениеНекорректныйТипНеопределено(Индекс); КонецЕсли;
			
		Иначе
			
			// Число.
			Начало = Индекс; Пока Найти("-+0123456789.", Символ) И (Индекс <= Длина) Цикл Индекс = Индекс + 1; Символ = Сред(Значение, Индекс, 1); КонецЦикла;
			
			// Преобразование числа.
			Попытка
				Результат = Число(Сред(Значение, Начало, Индекс - Начало));
			Исключение
				ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
			КонецПопытки;
			
			// Экспоненциальная часть.
			Если (Символ = "E") Или (Символ = "e") Тогда
				
				// Степень.
				Индекс = Индекс + 1; Позиция = Индекс; Символ = Сред(Значение, Индекс, 1); Пока Найти("-+0123456789", Символ) И (Индекс <= Длина) Цикл Индекс = Индекс + 1; Символ = Сред(Значение, Индекс, 1); КонецЦикла;
				
				// Преобразование степени.
				Попытка
					Степень = Число(Сред(Значение, Позиция, Индекс - Позиция));
				Исключение
					ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
				КонецПопытки;
				
				// Возвидение числа в степень.
				Результат = Результат * Pow(10, Степень);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Форматирование.
	Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если ПервыйУровень Тогда Если (Индекс <= Длина) Тогда ВызватьИсключение ИсключениеНекорректныйПакетДанных(Индекс); КонецЕсли; Иначе Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных(); КонецЕсли; КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // jsonПрочитать()

Функция jsonПрочитатьОпределитьДату(Значение)

	// Проверка.
	Если (СтрДлина(Значение) = 20) Тогда
		Если (Сред(Значение, 05, 1) = "-") И				// -
			 (Сред(Значение, 08, 1) = "-") И				// -
			 (Сред(Значение, 11, 1) = "T") И				// T
			 (Сред(Значение, 14, 1) = ":") И				// :
			 (Сред(Значение, 17, 1) = ":") И				// :
			 (Сред(Значение, 20, 1) = "Z") Тогда			// Z
			// Год. 
			Если Найти("0123456789", Сред(Значение, 01, 1)) И
				 Найти("0123456789", Сред(Значение, 02, 1)) И
				 Найти("0123456789", Сред(Значение, 03, 1)) И
				 Найти("0123456789", Сред(Значение, 04, 1)) И
			// Месяц.
				 Найти("0123456789", Сред(Значение, 06, 1)) И
				 Найти("0123456789", Сред(Значение, 07, 1)) И
			// День.
				 Найти("0123456789", Сред(Значение, 09, 1)) И
				 Найти("0123456789", Сред(Значение, 10, 1)) И
			// Час.
				 Найти("0123456789", Сред(Значение, 12, 1)) И
				 Найти("0123456789", Сред(Значение, 13, 1)) И
			// Минута.
				 Найти("0123456789", Сред(Значение, 15, 1)) И
				 Найти("0123456789", Сред(Значение, 16, 1)) И
			// Секунда.
				 Найти("0123456789", Сред(Значение, 18, 1)) И
				 Найти("0123456789", Сред(Значение, 19, 1)) Тогда
				Возврат Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьДату()

Функция jsonПрочитатьОпределитьИдентификатор(Значение)

	// Проверка.
	Если (СтрДлина(Значение) = 36) Тогда
		Если (Сред(Значение, 09, 1) = "-") И					// -
			 (Сред(Значение, 14, 1) = "-") И					// -
			 (Сред(Значение, 19, 1) = "-") И					// -
			 (Сред(Значение, 24, 1) = "-") Тогда				// -
			// Первая часть. 
			Для Индекс = 01 По 08 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Вторая часть. 
			Для Индекс = 10 По 13 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Третья часть. 
			Для Индекс = 15 По 18 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Четвертая часть. 
			Для Индекс = 20 По 23 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Пятая часть. 
			Для Индекс = 25 По 36 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьИдентификатор()

Функция jsonПрочитатьОпределитьВнутреннийТип(Значение)
	
	// Поиск.
	Возврат (Лев(Значение, 1) = "¦") И (Сред(Значение, 5, 1) = "¦") И (Прав(Значение, 1) = "¦"); // ¦xxx¦ ... ¦
	
КонецФункции // jsonПрочитатьОпределитьВнутреннийТип()

Функция jsonПрочитатьСтроку(Значение, Стандарт, Индекс, СхемаПодстановок, ОдинарнаяКавычка)
	
	// Последоавтельность перемаскировки.
	ПоследоавтельностьПеремаскировки = "\" + Символ(65535);
	
	// Демаскирование служебных символов.
	Результат = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Значение, 
						"\\",			ПоследоавтельностьПеремаскировки),		// Перемаскирование последовательности.
						"\/",			"/"),           // x2f
						"\b",			Символ(008)),	// x08
						"\t",			Символы.Таб),   // x09
						"\n",			Символы.ПС),    // x0a
						"\f",			Символы.ПФ),    // x0c
						"\r",			Символы.ВК),    // x0d
						"\""",			"""");          // x22
						
	// Демаскирование Юникод символов.
	Позиция = Найти(Результат, "\u"); Пока Позиция Цикл
		СтаршийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 2, 2))]; МладшийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 4, 2))]; Если (СтаршийБайт = Неопределено) Или (МладшийБайт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйФорматСтроки(Индекс); КонецЕсли;
		Результат = СтрЗаменить(Результат, Сред(Результат, Позиция, 6), Символ(256 * СтаршийБайт + МладшийБайт)); Позиция = Найти(Результат, "\u");
	КонецЦикла;
		
	// Одинарная кавычка.
	Если ОдинарнаяКавычка Тогда Результат = СтрЗаменить(Результат, "\'", "'"); КонецЕсли;
	
	// Демаскирование перемаскированой последовательности.
	Возврат СтрЗаменить(Результат, ПоследоавтельностьПеремаскировки, "\");				
						
КонецФункции // jsonПрочитатьСтроку()

Функция jsonПрочитатьДату(Значение, Индекс)
	
	// Поиск.
	Попытка
		Возврат Дата(Лев(Значение, 4) + Сред(Значение, 06, 2) + Сред(Значение, 09, 2) + 
					 Сред(Значение, 12, 2) + Сред(Значение, 15, 2) + Сред(Значение, 18, 2));
	Исключение
		ВызватьИсключение ИсключениеНекорректныйФорматДаты(Индекс, Значение);
	КонецПопытки;
	
КонецФункции // jsonПрочитатьДату()

Функция jsonПрочитатьСсылку(Значение, Соответствие)
	
	Перем Ссылка;
	
	// Ссылка.
	Если (Значение.Количество() = 2) Тогда 
		Если Соответствие Тогда
			Ссылка = Значение.Получить("Ссылка"); Если (Не Ссылка = Неопределено) И (Не Значение.Получить("Представление") = Неопределено) Тогда Возврат Ссылка; КонецЕсли;
		Иначе
			Если Значение.Свойство("Представление") И Значение.Свойство("Ссылка", Ссылка) Тогда Возврат Ссылка; КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Значение;
	
КонецФункции // jsonПрочитатьСсылку()

Функция jsonПрочитатьИдентификатор(Значение, Индекс)
	
	// Поиск.
	Возврат Новый УникальныйИдентификатор(Значение);
	
КонецФункции // jsonПрочитатьИдентификатор()

Функция jsonПрочитатьВнутреннийТип(Значение, Индекс)
#Если ВебКлиент Или ТонкийКлиент Тогда
	ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение);
#Иначе
	
	// Поиск.
	Тип = Сред(Значение, 2, 3); Данные = Сред(Значение, 6, СтрДлина(Значение) - 6);
	
	Если (Тип = "ref") Тогда
		Попытка
			Возврат ЗначениеИзСтрокиВнутр("{""#""," + СтрЗаменить(СтрЗаменить(Данные, "×", ":"), "÷", ",") + "}");
		Исключение
			ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение);
		КонецПопытки;
	КонецЕсли;
		
	ВызватьИсключение ИсключениеНеопознанныйТип(Индекс, Тип);
	
#КонецЕсли
КонецФункции // jsonПрочитатьВнутреннийТип()

Процедура jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования)
	
	// Пропуск форматирования.
	Пока (Индекс <= Длина) И Найти(СимволыФорматирования, Сред(Значение, Индекс, 1)) Цикл Индекс = Индекс + 1; КонецЦикла;
	// Пробел его не видно, \r, \n, \t .
	
КонецПроцедуры // jsonПрочитатьПропуститьФорматирование()


// ─────────────────────────────────────────────────────────────────────────────
//  ЛОКАЛИЗАЦИЯ JSON

Функция СформироватьСтрокуПоШаблону(Строка, Параметры)
	
	Результат = Строка;
		
	Для Каждого Параметр Из Параметры Цикл
		Результат = СтрЗаменить(Результат, "[" + Параметр.Ключ + "]", Строка(Параметр.Значение));
	КонецЦикла;

	Возврат Результат;
	
КонецФункции // СформироватьСтрокуПоШаблону()


Функция ИсключениеПустойПакетДанных()
	
	Возврат НСтр("ru = 'JSON: Пустой пакет данных.'; uk = 'JSON: Порожній пакет даних.'");

КонецФункции // ИсключениеНеожиданноеОкончаниеСтроки()

Функция ИсключениеНекорректныйПакетДанных(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный пакет данных в позиции [Индекс].'; uk = 'JSON: Некоректний пакет даних у позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйПакетДанных()

Функция ИсключениеНеожиданноеОкончаниеПакетаДанных()
	
	Возврат НСтр("ru = 'JSON: Неожиданное окончание пакета данных.'; uk = 'JSON: Несподіване закінчення пакета даних.'");

КонецФункции // ИсключениеНеожиданноеОкончаниеПакетаДанных()

Функция ИсключениеНеожиданноеОкончаниеМассива(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Неожиданное окончание массива в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення масиву у позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНеожиданноеОкончаниеМассива()

Функция ИсключениеНеожиданноеОкончаниеОбъетка(Индекс)

	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Неожиданное окончание объекта в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення об''єкту у позиції [Индекс].'"),
	   Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНеожиданноеОкончаниеОбъетка()

Функция ИсключениеНекорректныйТипNull(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный тип Null в позиции [Индекс].'; uk = 'JSON: Некоректний тип Null у позиції [Индекс].'"),
	   Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйТипNull()

Функция ИсключениеНекорректныйТипБулево(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный тип Булево в позиции [Индекс].'; uk = 'JSON: Некоректний тип Булево у позиції [Индекс].'"),
	   Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйТипБулево()

Функция ИсключениеНекорректныйТипНеопределено(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный тип Неопределено в позиции [Индекс].'; uk = 'JSON: Некоректний тип Невизначено у позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйТипНеопределено()

Функция ИсключениеНекорректныйФорматСтроки(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный формат строки в позиции [Индекс].'; uk = 'JSON: Некоректний формат рядка у позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));

КонецФункции // ИсключениеНекорректныйФорматСтроки()

Функция ИсключениеНекорректныйФорматДаты(Индекс, Значение)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный формат даты [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат дати [Значение] у позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции // ИсключениеНекорректныйФорматДаты()

Функция ИсключениеНекорректныйФорматЧисла(Индекс, Значение)
	
	Если ПустаяСтрока(Значение) Тогда
		
		Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Неверный формат данных в позиции [Индекс].'; uk = 'JSON: Невірний формат даних у позиції [Индекс].'"),
			Новый Структура("Индекс", Индекс));

	Иначе
		
		Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Некорректный формат числа [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат числа [Значение] у позиції [Индекс].'"),
			Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));
					   
	КонецЕсли;
					   
КонецФункции // ИсключениеНекорректныйФорматЧисла()

Функция ИсключениеНедопустимыйСимвол(Индекс, Символ)
	
	Если (Символ = Неопределено) Тогда
		
		Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс].'"),
			Новый Структура("Индекс", Индекс));

	Иначе
		
		Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс], ожидается [Символ].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс], очікується [Символ].'"),
			Новый Структура("Индекс,Символ", Индекс, Символ(034) + Символ + Символ(034)));

	КонецЕсли;
				   
КонецФункции // ИсключениеНедопустимыйСимвол()

Функция ИсключениеНеопознанныйТип(Индекс, Тип)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый тип [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип [Тип] у позиції [Индекс].'"),
		Новый Структура("Индекс,Тип", Индекс, Символ(034) + Тип + Символ(034)));

КонецФункции // ИсключениеНеопознанныйТип()

Функция ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Невозможно преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо перетворити значення [Значение] у позиції [Индекс].'"),
		Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции // ИсключениеНевозможноПреобразоватьЗначение()

Функция ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Невозможно на клиенте преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо на клієнті перетворити значення [Значение] у позиції [Индекс].'"),
		Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции // ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте()

Функция ИсключениеНекорректныйПараметр(Параметр)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимое значение параметра [Параметр].'; uk = 'JSON: Неприпустиме значення параметра [Параметр].'"),
		Новый Структура("Параметр", Символ(034) + Параметр + Символ(034)));

КонецФункции // ИсключениеНекорректныйПараметр()

Функция ИсключениеНедопустимыйТипКлюча(Индекс, Значение)
	
	Если (Индекс = Неопределено) Тогда
		
		Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип].'"),
			Новый Структура("Тип", ТипЗнч(Значение)));

	Иначе
		
		Возврат СформироватьСтрокуПоШаблону(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип] в позиції [Индекс].'"),
			Новый Структура("Индекс,Тип", Индекс, Символ(034) + ТипЗнч(Значение) + Символ(034)));

	КонецЕсли;

КонецФункции // ИсключениеНедопустимыйТипКлюча()

Функция ИсключениеНевозможноВыполнитьЗапрос(Описание)
	
	Позиция = Найти(Описание, "}: "); Если Позиция Тогда Позиция = Позиция + 3; Иначе Позиция = 1; КонецЕсли;
	Длина = Найти(Описание, Символы.ПС); Если Длина Тогда Длина = Длина - Позиция; Иначе Длина = СтрДлина(Описание); КонецЕсли;
	Возврат НСтр("ru = 'JSON: Невозможно выполнить запрос. '; uk = 'JSON: Неможливо виконати запит. '") + Сред(Описание, Позиция, Длина) + ".";

КонецФункции // ИсключениеНевозможноВыполнитьЗапрос()

//#КонецОбласти //Парсинг_JSON


//#Область Работа_С_Подключаемым_Модулем

//************************************************************
// РАБОТА С ПОДКЛЮЧАЕМЫМ МОДУЛЕМ

Процедура ИнициализироватьВнешнийПодключаемыйМодуль() Экспорт
	
	ПодключаемыйМодульТип			= МодульИнтеграции_Новый.ПолучитьКонстантуEDI("ПодключаемыйМодульТип");
	ПодключаемыйМодульПуть			= МодульИнтеграции_Новый.ПолучитьКонстантуEDI("ПодключаемыйМодульПуть");
	ПодключаемыйМодульИмяОбработки  = МодульИнтеграции_Новый.ПолучитьКонстантуEDI("ПодключаемыйМодульИмяОбработки");
	
	ИспользуетсяПодключаемыйМодуль = Ложь;
	
	Если ЗначениеЗаполнено(ПодключаемыйМодульТип) И НЕ ПодключаемыйМодульТип = "Нет" Тогда
		
		Если ПодключаемыйМодульТип = "Диск" Тогда
			
			Если ЗначениеЗаполнено(ПодключаемыйМодульПуть) Тогда
				
				Попытка
					ВнешнийМодуль = ВнешниеОбработки.Создать(СокрЛП(ПодключаемыйМодульПуть));
					ВнешнийМодуль.Инициализировать(ЭтотОбъект);
					ИспользуетсяПодключаемыйМодуль = Истина;
				Исключение
					ВывестиПредупреждение_КонтурEDI("Не удалось подключить внешний модуль!");
				КонецПопытки;
				
			КонецЕсли;	
			
		ИначеЕсли ПодключаемыйМодульТип = "1С" Тогда
			
			Попытка
				Модуль = МодульИнтеграции_Новый.ПолучитьСсылкуНаПодключаемыйМодуль();
				
				Если ЗначениеЗаполнено(Модуль) Тогда
					
					ИмяРеквизита = "";
					
					МетаданныеСправочника = Модуль.Метаданные();
					Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
						
						Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
							ИмяРеквизита = Реквизит.Имя;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
						
						МодульОбъект = Модуль.ПолучитьОбъект();
						
						ИмяФайла = ПолучитьИмяВременногоФайла();
						ДвоичныеДанные = МодульОбъект[ИмяРеквизита].Получить();
						ДвоичныеДанные.Записать(ИмяФайла);
						
						ВнешнийМодуль = ВнешниеОбработки.Создать(ИмяФайла);
						ВнешнийМодуль.Инициализировать(ЭтотОбъект);
						ИспользуетсяПодключаемыйМодуль = Истина;
						
						УдалитьФайлы(ИмяФайла);
						
					КонецЕсли;
					
				КонецЕсли;
			Исключение
				ВывестиПредупреждение_КонтурEDI("Не удалось подключить внешний модуль!");
			КонецПопытки;
			
		ИначеЕсли ПодключаемыйМодульТип = "Конфигурация" Тогда
			
			Если ЗначениеЗаполнено(ПодключаемыйМодульИмяОбработки) Тогда
				
				Попытка
					ВнешнийМодуль = Обработки[ПодключаемыйМодульИмяОбработки].Создать();
					ВнешнийМодуль.Инициализировать(ЭтотОбъект);
					ИспользуетсяПодключаемыйМодуль = Истина;
				Исключение
					ВывестиПредупреждение_КонтурEDI("Не удалось подключить внешний модуль!");
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
		
КонецПроцедуры

//	ИмяСобытия 				- 		Тип: Строка.
//									Идентификатор события, которое необходимо обработать
//
//	СтандартнаяОбработкаEDI - 		Тип: Булево. Необязательный
//									Передается признак выполнения стандартной обработки события. 
//									Если в теле процедуры указать ему значение Ложь, стандартная обработка события производиться не будет.
//	ПараметрыПодключаемогоМодуля - 	Тип: Структура. Необязательный
//									Параметры, которые будут доступны подключаемому модулю.
Функция ОбработкаСобытияПодключаемогоМодуля(ИмяСобытия,СтандартнаяОбработкаEDI=Неопределено,ПараметрыПодключаемогоМодуля = Неопределено) Экспорт
	
	//Примеры использования

	//Вариант 1 - вызов процедуры
			//ОбработкаСобытияПодключаемогоМодуля("ПослеЗагрузкиВходящегоСообщения",,
			//		Новый Структура("Сообщение,ДокументСсылка",
			//		"",""));

	//Вариант 2 - вызов функции
			//РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПослеЗагрузкиВходящегоСообщения",,
			//		Новый Структура("Сообщение,ДокументСсылка",
			//		"",""));
			//Если РезультатПМ <> Неопределено Тогда
			//	СтруктураНастроек = РезультатПМ.СтруктураНастроек;
			//КонецЕсли;

	
	Если ИспользуетсяПодключаемыйМодуль = Истина Тогда
		
		РезультатОбработки = ВнешнийМодуль.ОбработатьСобытиеКонтурEDI(ИмяСобытия, ПараметрыПодключаемогоМодуля, СтандартнаяОбработкаEDI);
		
		Возврат РезультатОбработки;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//#КонецОбласти //Работа_С_Подключаемым_Модулем


//#Область Хранение_Данных


Функция ПолучитьПрефиксСвойствЕДИ() 
	
	Возврат "КонтурEDI_";
	
КонецФункции

Функция ДобавитьОписаниеСвойства(ТаблицаСвойств, ИмяСвойства, ИмяНазначения, ИмяТипаЗначения, Глобальное = Ложь)
	
	НоваяСтрока = ТаблицаСвойств.Добавить();
	
	НоваяСтрока.ИмяСвойства		= ИмяСвойства;
	НоваяСтрока.ИмяНазначения	= ИмяНазначения;
	НоваяСтрока.ИмяТипаЗначения	= ИмяТипаЗначения;
	НоваяСтрока.Глобальное		= Глобальное;
	
КонецФункции

Функция ПолучитьТаблицуСвойств() Экспорт
	
	ТаблицаСвойств = Новый ТаблицаЗначений;
	ТаблицаСвойств.Колонки.Добавить("ИмяСвойства");
	ТаблицаСвойств.Колонки.Добавить("ИмяНазначения");
	ТаблицаСвойств.Колонки.Добавить("ИмяТипаЗначения");
	ТаблицаСвойств.Колонки.Добавить("Глобальное");
	ТаблицаСвойств.Колонки.Добавить("Значение");
	
	ТаблицаСвойств.Индексы.Добавить("ИмяСвойства");
	
	///******************************************************
	// !! Имя свойства не должно быть длиннее 50 символов !!
	
	// дополнительные поля справочников
	                                            // имя свойства						// назначение		// тип значения свойства
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"GLN_Контрагента",					"Справочник_Контрагенты",	"Строка");                 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"GLN_Организации",					"Справочник_Организации",	"Строка");                  
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"GLN_Партнера",						"Справочники",				"Строка");                  
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"GLN_Подразделения",				"Справочники",				"Строка");                  
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"GLN_НашегоПодразделения",			"Справочники",				"Строка");                  
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"GLN_ТочкиДоставки",				"Справочники",				"Строка");                  
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"GLN_НашейТочкиДоставки",			"Справочники",				"Строка");                  
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"Организация_Диадок_ID",			"Справочник_Организации",	"Строка");                  
	
    ДополнитьТаблицуСвойствИзМакета(ТаблицаСвойств,"Партнеры");
    ДополнитьТаблицуСвойствИзМакета(ТаблицаСвойств,"Общие");
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"GUIDТочкиДоставки1С",				"Справочники",				"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ЗагружатьСообщенияПоТочкеДоставки","Справочники",				"Булево");
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"Партнер",							"Справочники",				"ЗначенияСвойствОбъектов"); // свойство для точек доставки и подразделения
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПартнерКонтрагента",				"Справочник_Контрагенты",	"ЗначенияСвойствОбъектов"); // свойство для контрагентов 
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"КодСети",							"Справочники",				"Строка");                  
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПодразделениеСвое",				"Справочники",		"ЗначенияСвойствОбъектов");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПодразделениеСтороннее",			"Справочники",		"ЗначенияСвойствОбъектов");
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПартнерКакТорговаяСеть",			"Справочники",		"Булево");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПартнерКакПоставщик",				"Справочники",		"Булево");
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ЮрФизЛицо_ТочкиДоставки",			"Справочники",		"Контрагенты");             // контрагент по-умолчанию в точке доставки
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"УчетнаяЗаписьОрганизации",			"Справочники",		"ЗначенияСвойствОбъектов");             // организация в учетной записи для алко выгрузки
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ВладелецНоменклатуры",				"Справочники",		"Контрагенты");            // владелец списка номенклатуры партнера
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"УчетнаяЗапись",					"Справочники",		"ЗначенияСвойствОбъектов");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПарольУчетнойЗаписи",				"Справочники",		"Строка");
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ЗагрузкаИзКаталогов",				"Справочники",		"Булево",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"АдресКаталогаОбменаEDI",			"Справочники",		"Строка",	Истина); 
	
	// свойства пользователя
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ВариантОбмена",					"Справочники",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"РольПользователяEDI",				"Справочники",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПраваДоступаКСпискам",				"Справочники",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПраваДоступаКСообщениям",			"Справочники",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СлужебныйПользовательАвтообмен",	"Справочники",		"Булево");
	
	// свойства незагруженных сообщений
	ДобавитьОписаниеСвойства(ТаблицаСвойств,    "Сообщение_ID",						"Справочники",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,    "Сообщение_Тип",					"Справочники",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,    "Сообщение_ОтправленоУведомление",	"Справочники",		"Булево");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,    "Сообщение_НомерЗаказа",			"Справочники",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,    "Сообщение_ДатаЗаказа",				"Справочники",		"Дата");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,    "Сообщение_ДатаПоставки",			"Справочники",		"Дата");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,    "Сообщение_НомерСерииЗаказов",		"Справочники",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,    "Сообщение_ПартнерGLN",				"Справочники",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,    "Сообщение_ТочкаДоставкиGLN",		"Справочники",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,    "Сообщение_Статус",					"Справочники",		"Строка");
	
	// свойства создаваемых документов
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НомерСерииЗаказов",					"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НомерЗаказа",							"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ДатаЗаказа",							"Документы",		"Дата");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ДатаВремяПоставки",					"Документы",		"Дата");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ORDERS_ID",							"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ORDERS_Canceled_ID",					"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ORDRSP_ID",							"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"DESADV_ID",							"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"RECADV_ID",							"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"INVOIC_ID",							"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ALCRPT_ID",							"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"Архивный",								"Документы",		"Булево");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НужноОтправитьALCRPT",					"Документы",		"Булево");
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПартнерЗаказа",						"Документы",		"ЗначенияСвойствОбъектов"); // свойство для контрагентов и точек доставки
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ДатаИзменения",						"Документы",		"Дата");
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"Статус",								"Документы",		"Строка"); // будет заменен на нижние
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусВходящегоЗаказа",				"Документы",		"Строка"); // Загружен
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусИсходящегоЗаказа",				"Документы",		"Строка"); // Подтвержден, Уточнен, Отклонен
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусИсходящейРеализации",			"Документы",		"Строка"); // Отгружен
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусВходящейРеализации",				"Документы",		"Строка"); // Доставлен, ДоставленЧастично
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусИсходящегоЗаказаПоставщику",		"Документы",		"Строка"); // Отправлен
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусВходящегоЗаказаПоставщику",		"Документы",		"Строка"); // Подтвержден, Уточнен
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусИсходящегоПоступления",			"Документы",		"Строка"); // Отправлен
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусВходящегоПоступления",			"Документы",		"Строка"); // Подтвержден, Уточнен
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусИсходящегоСчетаФактуры",			"Документы",		"Строка"); // Отправлен
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусВходящегоСчетаФактуры",			"Документы",		"Строка"); // 
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусДокументаЗаказПокупателя",		"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусДокументаЗаказПоставщику",		"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусДокументаРеализацияТоваров",		"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусДокументаСчетФактураПолученный",	"Документы",		"Строка");
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ОтправленоУведомлениеЗаказа",		"Документы",		"Булево"); // отправлено
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ОтправленоУведомлениеРеализации",	"Документы",		"Булево"); // отправлено
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусДоставкиЗаказа",				"Документы",		"Строка"); // доставлен, не доставлен, неизвестно
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусДоставкиРеализации",			"Документы",		"Строка"); // доставлен, не доставлен, неизвестно
	// 
	
	// НОВЫЕ статусы сообщений. // kns {метка} старые удалить
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусСообщения_ORDERS",			"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусСообщения_ORDERS_Canceled",	"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусСообщения_ORDRSP",			"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусСообщения_DESADV",			"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусСообщения_RECADV",			"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусСообщения_INVOIC",			"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусСообщения_ALCRPT",			"Документы",		"Строка");

	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СтатусДокумента",					"Документы",		"Строка");
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"GLN_Грузополучателя",				"Документы",		"Строка");
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"boxId",							"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"messageId",						"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"invoiceId",						"Документы",		"Строка");
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"torg12Id",							"Документы",		"Строка");
	
	// глобальные параметры
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПроводитьЗагруженныеЗаказы",		"Справочники",		"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НомерВерсии",						"Справочники",		"Строка",	Истина);
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НеОтображатьНакладныеБезRECADV",	"Справочники",		"Булево",	Истина);
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НеСоздаватьЗаказыБезСвоихТД",		"Справочники",		"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НеСоздаватьЗаказыБезЮрФизЛицТД",	"Справочники",		"Булево",	Истина);
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СоздаваемыйДокументРСчетВид",		"Справочники",		"Строка",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СоздаваемыйДокументРСчетGUID",		"Справочники",		"Строка",	Истина);
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ГрузополучательИзЮрФизЛицаТД",		"Справочники",		"Булево",	Истина);
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НеПоказыватьПомощникаПриЗапуске",	"Справочники",		"Булево",	Истина); 
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"Сервер",							"Справочники",		"Строка",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"Порт",								"Справочники",		"Строка",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ЛогинFTP",							"Справочники",		"Строка",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПарольFTP",						"Справочники",		"Строка",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПассивныйРежим",					"Справочники",		"Булево",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ИспользуетсяПрокси",				"Справочники",		"Булево",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ЛогинПрокси",						"Справочники",		"Строка",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПарольПрокси",						"Справочники",		"Строка",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СерверПрокси",						"Справочники",		"Строка",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПортПрокси",						"Справочники",		"Строка",	Истина); 
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СоздаваемыйДокументИзORDERS",		"Справочники",		"Строка",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СоздаваемыйДокументРежимЗаписи",	"Справочники",		"Строка",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СоздаваемыйДокументДата",			"Справочники",		"Строка",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СоздаваемыйДокументСклад",			"Справочники",		"Склады",	Истина); 
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ТипСоединения",					"Справочники",		"Строка",	Истина); 
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"GLN_Основной",						"Справочники",		"Строка",	Истина); 
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"МыПоставщик",						"Справочники",		"Строка",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"МыТорговаяСеть",					"Справочники",		"Строка",	Истина);
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НеБратьАдресаПартнераИз1С",		"Справочники",		"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НеБратьСвоиАдресаИз1С",			"Справочники",		"Булево",	Истина);

	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ФильтрОбменаПоТочкамДоставки",		"Справочники",		"Строка",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ФильтрОбменаПоСетям",				"Справочники",		"Строка",	Истина);
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НеОбрабатыватьСтатусные",			"Справочники",		"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"РазрешитьПустыеКодыGTIN",			"Справочники",		"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НеПоказыватьФормуИсходящего",		"Справочники",		"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НеПоказыватьФормуВходящегоЗаказа",	"Справочники",		"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ВыгружатьОтчетОПродажеАлко",		"Справочники",		"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НеИскатьСоответствияВСписках",		"Справочники",		"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НеПоказыватьСоздатьРеализацию",	"Справочники",		"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ОткрыватьФормуЗаказаПередЗаписью",	"Справочники",		"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НеПоказыватьПровестиЗаказ",		"Справочники",		"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ОграничениеДнейВыводаДокументовВСписке",	"Справочники",		"Булево",	Истина);

	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ОбновлятьВесьСписокПриРаботеСЗаказами",	"Справочники",		"Булево",	Истина);
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ОтклонятьОтветыНаЗаказСДобавленнымТоваро",	"Справочники",		"Булево",	Истина); //КонтурEDI_ОтклонятьОтветыНаЗаказСДобавленнымТоваро<<Ограничение длниы 50 симв!!!
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ОткрыватьФормуОбратногоЗаказаПередЗаписью","Справочники",		"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПроводитьЗагруженныеОбратныеЗаказы",		"Справочники",		"Булево",	Истина);
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"УчетнаяЗаписьПоУмолчанию",			"Справочники",		"ЗначенияСвойствОбъектов",	Истина); 
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПодключаемыйМодульТип",			"Справочники",		"Строка",					Истина);  // Нет, Диск, 1С
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПодключаемыйМодульПуть",			"Справочники",		"Строка",					Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПодключаемыйМодульВидСправочника",	"Справочники",		"Строка",					Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПодключаемыйМодульGUID",			"Справочники",		"Строка",					Истина);
                                                   
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ЛогинСлужебныйДиадок",		"Справочники",	"Строка",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ПарольСлужебныйДиадок",	"Справочники",	"Строка",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"ИспользоватьКСФ",			"Справочники",	"Булево",	Истина);
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"СвойСправочникТочекДоставки",		"Справочники",		"Строка",	Истина);
	
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"box_ID_УчетнойЗаписи",	"Справочники",	"Строка",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"НеАктивна_УчетнаяЗапись",	"Справочники",	"Булево",	Истина);
	ДобавитьОписаниеСвойства(ТаблицаСвойств,	"GLN_УчетнойЗаписи",	"Справочники",	"Строка",	Истина);
	
	Возврат ТаблицаСвойств;
	
КонецФункции

Функция ПолучитьСвойствоОбъекта(ИмяСвойства, ИмяНазначения = Неопределено, ИмяТипаЗначения = Неопределено) Экспорт 
	
	ИмяСвойстваЕДИ = ПолучитьПрефиксСвойствЕДИ() + СокрЛП(ИмяСвойства);
	
	СтрокаСвойства = Неопределено;
	
	Если ИмяНазначения = Неопределено Тогда
		
		Если ТаблицаСвойств = Неопределено Тогда
			ТаблицаСвойств = ПолучитьТаблицуСвойств();
		КонецЕсли;	
			
		СтрокаСвойства = ТаблицаСвойств.Найти(ИмяСвойства,"ИмяСвойства");
		Если СтрокаСвойства = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСвойства.Значение) Тогда
			Возврат СтрокаСвойства.Значение;
		КонецЕсли;
		
		ИмяНазначения	= СтрокаСвойства.ИмяНазначения;
		ИмяТипаЗначения = СтрокаСвойства.ИмяТипаЗначения;
		
	КонецЕсли;
	
	Назначение	= ПолучитьНазначениеСвойства(ИмяНазначения);
	ТипЗначения = ПолучитьТипЗначенияСвойства(ИмяТипаЗначения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СвойстваОбъектов.Ссылка
	               |ИЗ
	               |	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	               |ГДЕ
	               |	СвойстваОбъектов.Наименование = &Наименование
	               |	И СвойстваОбъектов.НазначениеСвойства = &НазначениеСвойства";
	
	Запрос.УстановитьПараметр("Наименование", 		ИмяСвойстваЕДИ);
	Запрос.УстановитьПараметр("НазначениеСвойства", Назначение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
		
		Свойство.ОбменДанными.Загрузка = Истина;
		
		Свойство.Наименование		= ИмяСвойстваЕДИ;
		Свойство.НазначениеСвойства	= Назначение;
		Свойство.ТипЗначения		= ТипЗначения;
		Свойство.Записать();
		
		Если ЗначениеЗаполнено(СтрокаСвойства) Тогда
			СтрокаСвойства.Значение = Свойство.Ссылка;
		КонецЕсли;
		
		Возврат Свойство.Ссылка;
		
	Иначе
			
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(СтрокаСвойства) Тогда
			СтрокаСвойства.Значение = Выборка.Ссылка;
		КонецЕсли;
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНазначениеСвойства(ИмяНазначения)
	
	Если ИмяНазначения = "Справочники" Тогда
		
		Возврат ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочники;
		
	ИначеЕсли ИмяНазначения = "Справочник_Контрагенты" Тогда	
		
		Попытка
			ТекХар = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
		Исключение
			ТекХар = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочники;
		КонецПопытки;
		
		Возврат ТекХар;
		
	ИначеЕсли ИмяНазначения = "Справочник_Организации" Тогда	
		
		Попытка
			ТекХар = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации;
		Исключение
			ТекХар = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочники;
		КонецПопытки;
		
		Возврат ТекХар; 
		
	ИначеЕсли ИмяНазначения = "Документы" Тогда
		
		Возврат ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьТипЗначенияСвойства(ИмяТипаЗначения)
	
	МассивТипов = Новый Массив;
	
	Если ИмяТипаЗначения = "Строка" Тогда
		
		МассивТипов.Добавить(Тип("Строка"));
		ТипЗначения = Новый ОписаниеТипов(МассивТипов, ,Новый КвалификаторыСтроки(50))  ;
		
		Возврат ТипЗначения;
		
	ИначеЕсли ИмяТипаЗначения = "Контрагенты" Тогда	
		
		МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		
	ИначеЕсли ИмяТипаЗначения = "Склады" Тогда	
		
		МассивТипов.Добавить(Тип("СправочникСсылка.Склады"));
		
	ИначеЕсли ИмяТипаЗначения = "ЗначенияСвойствОбъектов" Тогда	
		
		МассивТипов.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
		
	ИначеЕсли ИмяТипаЗначения = "Дата" Тогда	
		
		МассивТипов.Добавить(Тип("Дата"));
		
	ИначеЕсли ИмяТипаЗначения = "Булево" Тогда	
		
		МассивТипов.Добавить(Тип("Булево"));
		
	ИначеЕсли ИмяТипаЗначения = "Число" Тогда	
		
		МассивТипов.Добавить(Тип("Число"));
		
	КонецЕсли;
	
	ТипЗначения = Новый ОписаниеТипов(МассивТипов, ,Новый КвалификаторыСтроки(50))  ;
	
	Возврат ТипЗначения;
	
КонецФункции

// основные
Функция ПреобразоватьЗначениеДляВнешнегоХранилища(Значение)

	Если Значение = Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗначения) ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		Возврат ЗначениеВСтрокуВнутр(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") 
		И Лев(Значение,4)="{""#""" Тогда //скорей всего, это ссылка
		_Значение = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Значение);
		Если _Значение<>Неопределено Тогда
			Возврат _Значение;
		Иначе
			Возврат Значение;
		КонецЕсли;	
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеСвойстваОбъектаEDI(Знач Объект, ИмяСвойства) Экспорт 
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	// kns {метка} преобразовывать все свойства
	Если ВнешнееХранилище Тогда
		Объект = ПреобразоватьЗначениеДляВнешнегоХранилища(Объект);
	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеРеквизиты.Значение
	|ИЗ
	|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеРеквизиты.Свойство = &Свойство
	|	И КонтурEDI_ДополнительныеРеквизиты.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Свойство",	ИмяСвойства);
	Запрос.УстановитьПараметр("Объект",		Объект);
	
	Значение = ПолучитьРезультатЗапроса(Запрос, "Значение");
	
	Если ТипЗнч(Значение) = Тип("COMОбъект") Тогда
		Значение = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция НайтиОбъектПоЗначениюСвойства(ИмяСвойства, Знач Значение) Экспорт 
	
	Если ИмяСвойства = "GLN_ТочкиДоставки" Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтурEDI_ТочкиДоставки.Ссылка
		               |ИЗ
		               |	Справочник.КонтурEDI_ТочкиДоставки КАК КонтурEDI_ТочкиДоставки
		               |ГДЕ
		               |	КонтурEDI_ТочкиДоставки.GLN = &GLN";
		
		Запрос.УстановитьПараметр("GLN", Значение);	
		
		Объект = ПолучитьРезультатЗапроса(Запрос, "Ссылка");
		
		Если ТипЗнч(Объект)=Тип("COMОбъект") Тогда
			Возврат СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Объект);
		Иначе
			Возврат Объект;
		КонецЕсли;
		
	ИначеЕсли ИмяСвойства = "ЮрФизЛицо_ТочкиДоставки" Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтурEDI_ТочкиДоставки.Ссылка
		               |ИЗ
		               |	Справочник.КонтурEDI_ТочкиДоставки КАК КонтурEDI_ТочкиДоставки
		               |ГДЕ
		               |	КонтурEDI_ТочкиДоставки.СвязанныйСправочник1 = &ЮрФизЛицо";
					   
		// + Внешнее хранилище. kns 2014.09.09
		Если ВнешнееХранилище Тогда
			Запрос.УстановитьПараметр("ЮрФизЛицо", ЗначениеВСтрокуВнутр(Значение));	
		Иначе
			Запрос.УстановитьПараметр("ЮрФизЛицо", Значение);	
		КонецЕсли;
		
		Объект = ПолучитьРезультатЗапроса(Запрос, "Ссылка");
		
		Если ТипЗнч(Объект)=Тип("COMОбъект") Тогда
			Возврат СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Объект);
		Иначе
			Возврат Объект;
		КонецЕсли;
		
	Иначе
		
		// + Внешнее хранилище. kns 2014.08.22
		Если ВнешнееХранилище Тогда
			Запрос = СоединениеСХранилищем.NewObject("Запрос");	
			Значение = ПреобразоватьЗначениеДляВнешнегоХранилища(Значение);
		// - Внешнее хранилище. kns 2014.08.22
		Иначе
			Запрос = Новый Запрос();
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтурEDI_ДополнительныеРеквизиты.Объект
		               |ИЗ
		               |	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
		               |ГДЕ
		               |	КонтурEDI_ДополнительныеРеквизиты.Свойство = &Свойство
		               |	И КонтурEDI_ДополнительныеРеквизиты.Значение = &Значение";
		
		Запрос.УстановитьПараметр("Свойство",ИмяСвойства);
		Запрос.УстановитьПараметр("Значение",Значение);
		
		Объект = ПолучитьРезультатЗапроса(Запрос, "Объект");
		
		Если ТипЗнч(Объект)=Тип("COMОбъект") Тогда
			Возврат СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Объект);
		Иначе
			Возврат Объект;
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции

Функция УдалитьСвойстваПоЗначению(ИмяСвойства, Значение) Экспорт

	Пока Истина Цикл
		
		ТекЗначение = НайтиОбъектПоЗначениюСвойства(ИмяСвойства, Значение);
		
		Если ЗначениеЗаполнено(ТекЗначение) Тогда
			УдалитьЗначениеСвойстваОбъекта(ТекЗначение, ИмяСвойства);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецФункции

Функция УстановитьЗначениеСвойстваОбъекта(Объект, ИмяСвойства, Значение, Отказ = Ложь) Экспорт 

	// + Внешнее хранилище. kns 2014.08.22
	Если ВнешнееХранилище Тогда
		
		Запись = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();

		Запись.Объект	= ПреобразоватьЗначениеДляВнешнегоХранилища(Объект);
		Запись.Свойство = ИмяСвойства;
		Запись.Значение = ПреобразоватьЗначениеДляВнешнегоХранилища(Значение);
		
		Попытка
			Запись.Записать();
		Исключение
			Отказ = Истина;
		КонецПопытки;
		
		// - Внешнее хранилище. kns 2014.08.22
		
	Иначе
		
		Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
		Запись.Объект	= Объект;
		Запись.Свойство = ИмяСвойства;
		Запись.Значение = Значение;
		
		Попытка
			Запись.Записать();
		Исключение
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
КонецФункции

Функция УдалитьЗначениеСвойстваОбъекта(Объект, ИмяСвойства, Отказ = Ложь) Экспорт 
	
	// + Внешнее хранилище. kns 2014.08.22
	Если ВнешнееХранилище Тогда
		
		Запись = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
		
		Запись.Объект	= ПреобразоватьЗначениеДляВнешнегоХранилища(Объект);
		Запись.Свойство = ИмяСвойства;
		
		Попытка
			Запись.Прочитать();
			Запись.Удалить();
		Исключение
			Отказ = Истина;
		КонецПопытки;
		
		// - Внешнее хранилище. kns 2014.08.22
		
	Иначе
		
		Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
		Запись.Объект	= Объект;
		Запись.Свойство = ИмяСвойства;
		
		Попытка
			Запись.Прочитать();
			Запись.Удалить();
		Исключение
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция УстановитьГлобальноеСвойство(ИмяСвойства,Значение) Экспорт
	
	// + Внешнее хранилище. kns 2014.08.22
	Если ВнешнееХранилище Тогда
		
		Запись = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
		Запись.Свойство = ИмяСвойства;
		Запись.Значение = ПреобразоватьЗначениеДляВнешнегоХранилища(Значение);
		
		Попытка
			Запись.Записать();
		Исключение
		КонецПопытки;
		
		// - Внешнее хранилище. kns 2014.08.22
		
	Иначе
		
		Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
		Запись.Свойство = ИмяСвойства;
		Запись.Значение = Значение;
		
		Попытка
			Запись.Записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьГлобальноеСвойство(ИмяСвойства) Экспорт 

	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеРеквизиты.Значение
	               |ИЗ
	               |	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеРеквизиты.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Свойство",	ИмяСвойства);
	
	Значение = ПолучитьРезультатЗапроса(Запрос, "Значение");
	
	Если ТипЗнч(Значение) = Тип("COMОбъект") Тогда
		Значение = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Если Лев(Значение,3)="{""#" Тогда
			Значение = ЗначениеИзСтрокиВнутр(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

//сохраняет внешний файл в базу. ИмяФайлаНаДиске - полный путь к файлу. 
//ИмяФайлаВБазе - имя, по которому потом этот файл можно из базы извлечь
//возвращает Истина, если сохранение удалось, иначе - Ложь.
Функция СохранитьФайлВБазу(ИмяФайлаНаДиске,ИмяФайлаВБазе) Экспорт
	Синоним = Метаданные.Синоним;
	ИмяСохраненнойНастройки = ИмяФайлаВБазе;
	Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаНаДиске));
	
	Если Найти(Синоним,"ТКТП")>0 Тогда
		//что с ней делать?
		
		
		
		Возврат Ложь;
		
	ИначеЕсли Найти(Синоним,"Бухгалтерия предприятия")>0 или Найти(Синоним,"Бухгалтерия сельскохозяйственного предприятия")>0 Тогда
		
		Ссылка=Неопределено;
		Если ПолучитьФайлИзБазы(ИмяФайлаВБазе,Ссылка)<>Неопределено Тогда
			СпрОбъект=Ссылка.ПолучитьОбъект();
		Иначе	
			СпрОбъект=Справочники.СохраненныеНастройки.СоздатьЭлемент();
		КонецЕсли;
		
		СпрОбъект.Наименование=ИмяСохраненнойНастройки;
		СпрОбъект.ХранилищеНастроек=Хранилище;
		
		Попытка
			//а вдруг прав не хватит?
			СпрОбъект.Записать();
		Исключение
			Возврат Ложь;
		КонецПопытки;	
		
	ИначеЕсли Найти(Синоним,"Управление торговлей, редакция 10.2") Тогда
		Возврат Ложь; //в УТ 10.2 нет внешних обработок	
		
	Иначе//УТ, КА, УПП, .... надо проверить все конфиги!!!
		Ссылка=Неопределено;
		
		Если ПолучитьФайлИзБазы(ИмяФайлаВБазе,Ссылка)<>Неопределено Тогда
			СпрОбъект=Ссылка.ПолучитьОбъект();
		Иначе	
			СпрОбъект=Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
		КонецЕсли;
		
		СпрОбъект.Наименование=ИмяСохраненнойНастройки;
		СпрОбъект.Хранилище=Хранилище;
		Попытка
			//а вдруг прав не хватит?
			СпрОбъект.Записать();
		Исключение
			Возврат Ложь;
		КонецПопытки;	
		
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции	

//возвращает объект ДвоичныеДанные по имени файла или Неопределено, 
//если такого файла нет или если хранение файлов в данной конфигурации не поддерживается
//СсылканаСправочник - получает ссылку на справочник, содержащий сохраненный файл, если такой уже есть в базе
Функция ПолучитьФайлИзБазы(ИмяФайлаВБазе,СсылкаНаСправочник=Неопределено) Экспорт

	Синоним = Метаданные.Синоним;
	
	Если Найти(Синоним,"ТКТП")>0 Тогда
		//что с ней делать?
		
		
		
		
		
		
		
		
		Возврат Неопределено;
		
	ИначеЕсли Найти(Синоним,"Бухгалтерия предприятия")>0 или Найти(Синоним,"Бухгалтерия сельскохозяйственного предприятия")>0 Тогда
		Запрос=Новый Запрос(
		"ВЫБРАТЬ Разрешенные Первые 1
		|	СохраненныеНастройки.Ссылка,
		|	СохраненныеНастройки.ХранилищеНастроек как Хранилище
		|ИЗ
		|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ТипНастройки = Значение(Перечисление.ТипыНастроек.)
		|	И СохраненныеНастройки.Наименование = &Наименование"
		);
		Запрос.УстановитьПараметр("Наименование",ИмяФайлаВБазе);
		Выб=Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			СсылкаНаСправочник=Выб.Ссылка;
			Возврат Выб.Хранилище.Получить();
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
		
	ИначеЕсли Найти(Синоним,"Управление торговлей, редакция 10.2") Тогда
		Возврат Неопределено; //в УТ 10.2 нет внешних обработок	
		
	Иначе
		Запрос=Новый Запрос(
		"ВЫБРАТЬ Разрешенные Первые 1
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.Хранилище
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.ВидДанных = Значение(Перечисление.ВидыДополнительнойИнформацииОбъектов.)
		|	И ХранилищеДополнительнойИнформации.Наименование = &Наименование"
		);
		Запрос.УстановитьПараметр("Наименование",ИмяФайлаВБазе);
		Выб=Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			СсылкаНаСправочник=Выб.Ссылка;
			Возврат Выб.Хранилище.Получить();
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	

//получает из наших "констант" строку, которую пытается преобразовать в ссылку на справочник "Внешние обработки"
Функция ПолучитьСсылкуВнешнейОбработкиДляАвтоматическогоОбновления() Экспорт
	Синоним = Метаданные.Синоним;
	
	
	Если Найти(Синоним,"ТКТП")>0 Тогда
		//что с ней делать?
		
		Возврат Неопределено;
		
		
	ИначеЕсли Найти(Синоним,"Управление торговлей, редакция 10.2") Тогда
		Возврат Неопределено; //в УТ 10.2 нет внешних обработок	
		
	Иначе	//УТ, КА, УПП, .... надо проверить все конфиги!!!
		УИДСтрокой=ПолучитьГлобальноеСвойство("СсылкаНаМодуль");
		Если не ЗначениеЗаполнено(УИДСтрокой) Тогда Возврат Неопределено КонецЕсли;
		Попытка
			УИД=Новый УникальныйИдентификатор(УИДСтрокой);
			Ссылка=Справочники.ВнешниеОбработки.ПолучитьСсылку(УИД);
			Если Ссылка.Пустая() Тогда
				Возврат Неопределено;
			Иначе
				Возврат Ссылка;
			КонецЕсли;	
		Исключение
			//наш УИД пустой, или ссылается на удаленный элемент справочника
			Возврат Неопределено;
		КонецПопытки;	
		
		//Запрос=Новый Запрос(
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	ВнешниеОбработки.Ссылка
		//|ИЗ
		//|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
		//|ГДЕ
		//|	ВнешниеОбработки.ВидОбработки = Значение(Перечисление.ВидыДополнительныхВнешнихОбработок.Обработка)
		//|	И ВнешниеОбработки.КомментарийКФайлуИсточнику ПОДОБНО &КомментарийКФайлуИсточнику"
		//);
		//
		//Запрос.УстановитьПараметр("КомментарийКФайлуИсточнику","КонтурEDI. Обновляется автоматически");
		//Таб=Запрос.Выполнить().Выгрузить();
		//Если Таб.Количество()<>1 Тогда
		//	Возврат Неопределено; //вдруг кто-то постарался сделать несколько таких обработок, несмотря ни на что
		//Иначе	
		//	Возврат Таб[0].Ссылка;
		//КонецЕсли;	
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

//пишет в "наши константы" свойство "СсылкаНаМодуль" - строковое представление ссылки на справочник "Внешние обработки"
Функция ПодготовитьСсылкуВнешнейОбработкиДляАвтоматическогоОбновления(Ссылка) Экспорт
	Синоним = Метаданные.Синоним;
	
	Если Найти(Синоним,"ТКТП")>0 Тогда
		//что с ней делать?
		
		
	ИначеЕсли Найти(Синоним,"Управление торговлей, редакция 10.2") Тогда
		Возврат Ложь; //в УТ 10.2 нет внешних обработок	
		
	Иначе	//УТ, КА, УПП, .... надо проверить все конфиги!!!
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			УИДСтрокой="";//очистим ссылку
		Иначе
			УИДСтрокой=Строка(Ссылка.УникальныйИдентификатор());
		КонецЕсли;	
		УстановитьГлобальноеСвойство("СсылкаНаМодуль",УИДСтрокой);
		Возврат Истина;
		
		//СпрОбъект=Ссылка.ПолучитьОбъект();
		//СпрОбъект.КомментарийКФайлуИсточнику="КонтурEDI. Обновляется автоматически";
		//Попытка
		//	//а вдруг прав не хватит?
		//	СпрОбъект.Записать();
		//Исключение
		//	Возврат Ложь;
		//КонецПопытки;	
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСписокСохраненныхФайловПредыдущихВерсий() Экспорт

	Синоним = Метаданные.Синоним;
	Список=Новый СписокЗначений;
	МаскаИмени="КонтурEDI.ПредыдущийМодуль.";
	
	Если Найти(Синоним,"ТКТП")>0 Тогда
		//что с ней делать?
		
		
	ИначеЕсли Найти(Синоним,"Бухгалтерия предприятия")>0 или Найти(Синоним,"Бухгалтерия сельскохозяйственного предприятия")>0 Тогда
		Запрос=Новый Запрос(
		"ВЫБРАТЬ Разрешенные 
		|	СохраненныеНастройки.Ссылка,
		|	СохраненныеНастройки.Наименование
		|ИЗ
		|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ТипНастройки = Значение(Перечисление.ТипыНастроек.)
		|	И СохраненныеНастройки.Наименование ПОДОБНО &Наименование
		|Упорядочить по СохраненныеНастройки.Наименование убыв"
		);
		Запрос.УстановитьПараметр("Наименование",МаскаИмени+"%");
		Выб=Запрос.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			Список.Добавить(Выб.Ссылка,Сред(Выб.Наименование,СтрДлина(МаскаИмени)+1));
		КонецЦикла;	
		
	ИначеЕсли Найти(Синоним,"Управление торговлей, редакция 10.2") Тогда
		//в УТ 10.2 нет внешних обработок, поэтому предполагаем, что для УТ 10.2 автообновление не используется
		//соответственно, и откат на предыдущую версию не поддерживаем
		
	Иначе
		Запрос=Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.Наименование
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.)
		|	И ХранилищеДополнительнойИнформации.Наименование ПОДОБНО &Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХранилищеДополнительнойИнформации.Наименование убыв"
		);
		Запрос.УстановитьПараметр("Наименование",МаскаИмени+"%");
		Выб=Запрос.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			Список.Добавить(Выб.Ссылка,Сред(Выб.Наименование,СтрДлина(МаскаИмени)+1));
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат Список;
	
КонецФункции	



//***************************************************************
// Управление деревом настроек (той частью, которая заполняется из макета НастройкиПараметры)

Функция ПолучитьТекстЯчейкиОбласти(Область,Строка,Колонка)
	Возврат Строка(Область.ПолучитьОбласть("R"+Формат(Строка,"ЧГ=0")+"C"+Формат(Колонка,"ЧГ=0")).ТекущаяОбласть.Текст);
КонецФункции	

//находит в макете из параметра Макет область ИмяСписка, и из первой колонки этой области вытаскивает список возможных значений
Функция ПолучитьСписокЗначенийИзМакета(Макет,ИмяСписка)
	Область=Макет.ПолучитьОбласть(ИмяСписка);
	СЗ=Новый СписокЗначений;
	Для Сч=1 По Область.ВысотаТаблицы Цикл
		СЗ.Добавить(ПолучитьТекстЯчейкиОбласти(Область,Сч,1));
	КонецЦикла;		
	Возврат СЗ;
КонецФункции	

//Используется в функции ПолучитьТаблицуСвойств для инициализации таблицы
Процедура ДополнитьТаблицуСвойствИзМакета(ТаблицаСвойств,ВидСправочника)
	Макет=ПолучитьМакет("НастройкиПараметры");
	Если ВидСправочника="Партнеры" Тогда
		Область=Макет.ПолучитьОбласть("НастройкиПартнеров");
		Глобальное=Ложь;
		Назначение="Справочники";
	ИначеЕсли ВидСправочника="Общие" Тогда
		Область=Макет.ПолучитьОбласть("НастройкиОбщие");
		Глобальное=Истина;
		Назначение="Справочники";
	КонецЕсли;	
	
	Для Сч=1 По Область.ВысотаТаблицы Цикл
		НастройкаИД					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,1);
		НастройкаНаименование		=	ПолучитьТекстЯчейкиОбласти(Область,Сч,2);
		ЭтоГруппа					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,3);
		ТекГруппа					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,4);
		_Тип						=	ПолучитьТекстЯчейкиОбласти(Область,Сч,6);
		Если не ЗначениеЗаполнено(_Тип) Тогда
			_Тип					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,5);
		КонецЕсли;	
		Если ЭтоГруппа<>"Истина" Тогда
			
			//по умолчанию тип возьмем из 3 колонки - это для примитивных: строка, дата, число, булево
			//остальные типы у нас называются по-своему, и их список можно найти в функции функции ПолучитьТипЗначенияСвойства
			НоваяСтрока = ТаблицаСвойств.Добавить();
			
			НоваяСтрока.ИмяСвойства		= НастройкаИД;
			НоваяСтрока.ИмяНазначения	= Назначение;
			НоваяСтрока.Глобальное		= Глобальное;
			
			Если Лев(_Тип,7) = "_Список"
				Или _Тип="Метаданные.Справочники"
				Тогда
				НоваяСтрока.ИмяТипаЗначения	= "Строка";
			Иначе
				//предполагаем, что в нашем макете все данные корректны
				//иначе будет исключение
				НоваяСтрока.ИмяТипаЗначения=Строка(_Тип);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры	

//создает дерево настроек, заданных в макете НастройкиПараметры
//ВидСправочника может принимать значения: 
//Партнеры - в этом случае берем настройки, описанные в области НастройкиПартнеров. Используется в ФормаПартнеры_Элемент
//Общие - "НастройкиОбщие". Используется в ФормаСервис_Настройка
Процедура СоздатьДеревоНастроек(ДеревоНастроек,ВидСправочника,СтруктураСвойств) Экспорт
	
	СоотвГрупп=Новый Соответствие;
	СоотвГрупп.Вставить("",ДеревоНастроек);
	
	Макет=ПолучитьМакет("НастройкиПараметры");
	
	Если ВидСправочника="Партнеры" Тогда
		Область=Макет.ПолучитьОбласть("НастройкиПартнеров");
	ИначеЕсли ВидСправочника="Общие" Тогда
		Область=Макет.ПолучитьОбласть("НастройкиОбщие");
	Иначе
		Возврат;
	КонецЕсли;	
	
	Для Сч=1 По Область.ВысотаТаблицы Цикл
		НастройкаИД					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,1);
		НастройкаНаименование		=	ПолучитьТекстЯчейкиОбласти(Область,Сч,2);
		ЭтоГруппа					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,3);
		ТекГруппа					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,4);
		_Тип						=	ПолучитьТекстЯчейкиОбласти(Область,Сч,5);
//		_ТипВнутренний				=	ПолучитьТекстЯчейкиОбласти(Область,Сч,6);//внутренний тип нужен только при заполнении таблицы свойств - в процедуре ДополнитьТаблицуСвойствИзМакета
		ЗначениеПоУмолчанию			=	ПолучитьТекстЯчейкиОбласти(Область,Сч,7);
		Подсказка					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,8);
		ДляСвоихОбъектов			=	ПолучитьТекстЯчейкиОбласти(Область,Сч,9);
		Если ЭтоГруппа="Истина" Тогда
			Нов=СоотвГрупп[ТекГруппа].Строки.Добавить();
			Нов.ЭтоГруппа=ЭтоГруппа;
			Нов.НастройкаИД				=	НастройкаИД;
			Нов.НастройкаНаименование	=	НастройкаНаименование;
			Нов.Подсказка				=	Подсказка;
			СоотвГрупп.Вставить(НастройкаИД,Нов);
		Иначе
			
			Нов=СоотвГрупп[ТекГруппа].Строки.Добавить();
			Нов.ЭтоГруппа=ЭтоГруппа;
			Нов.НастройкаИД				=	НастройкаИД;
			Нов.НастройкаНаименование	=	НастройкаНаименование;
			Нов.Подсказка				=	Подсказка;
			Нов.ДляСвоихОбъектов		=	ДляСвоихОбъектов;
			Если Лев(_Тип,7) = "_Список" Тогда
				//вытащим список доступных значений из того же макета, из отдельной области
				Нов.ОписаниеТипа	=	Новый ОписаниеТипов("СписокЗначений");
				Нов.Список=ЗначениеВСтрокуВнутр(ПолучитьСписокЗначенийИзМакета(Макет,_Тип));
			ИначеЕсли _Тип="Метаданные.Справочники" Тогда
				Нов.ОписаниеТипа	=	Новый ОписаниеТипов("СписокЗначений");
				СписокМетаданных=Новый СписокЗначений;
				СписокМетаданных.Добавить("","<ОЧИСТИТЬ>");
				Для Каждого ЭлМетаданных Из Метаданные.Справочники Цикл
					НовЭлементСписка=СписокМетаданных.Добавить(ЭлМетаданных.Имя,ЭлМетаданных.Синоним);
				КонецЦикла;	
				Нов.Список=ЗначениеВСтрокуВнутр(СписокМетаданных);
			Иначе	
				//предполагаем, что все типы заданы корректно
				Нов.ОписаниеТипа	=	Новый ОписаниеТипов(_Тип);
			КонецЕсли;	
			
			_Значение=Неопределено;
			ЕстьСохраненноеСвойство = (СтруктураСвойств=неопределено) //в тех случаях, когда добавляем новую торговую сеть или поставщика
									или СтруктураСвойств.Свойство(Нов.НастройкаИД,_Значение);
			Если ЕстьСохраненноеСвойство И ЗначениеЗаполнено(_Значение) Тогда
				Нов.Значение			=	СтруктураСвойств[Нов.НастройкаИД];
			Иначе
				Если ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
					Нов.Значение			=	Нов.ОписаниеТипа.ПривестиЗначение(ЗначениеПоУмолчанию);//если в макете в колонке "ЗначениеПоУмолчанию" пусто, то получим пустое значение данного типа
				Иначе	
					Нов.Значение			=	Нов.ОписаниеТипа.ПривестиЗначение(Неопределено);//получим пустое значение нужного типа
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

//рекурсивная процедура, обслуживающая СоздатьДеревоНастроек
Процедура ДобавитьСтрокиДереваВСтруктуру(СтрокаДерева,СтруктураПолейПартнера) Экспорт
	Для Каждого Стр Из СтрокаДерева.Строки Цикл
		ДобавитьСтрокиДереваВСтруктуру(Стр,СтруктураПолейПартнера);//обойдем рекурсивно все вложенные строки
		Если Не Стр.ЭтоГруппа Тогда
			СтруктураПолейПартнера.Вставить(Стр.НастройкаИД,Стр.Значение);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

//получает из макета НастройкиПараметры область, и выбирает из нее массив доступных настроек. 
//Используется в Модуль_Интеграция_УТ_УПП_КА в ПолучитьЭлементСправочника и в СохранитьЭлементСправочника
//а также в ФормаСервис_Настройка
Функция ПолучитьМассивДополнительныхНастроекИзМакета(ВидСправочника) Экспорт
	МассивНастроек=Новый Массив;
	Макет=ПолучитьМакет("НастройкиПараметры");
	Если ВидСправочника="Партнеры" Тогда
		Область=Макет.ПолучитьОбласть("НастройкиПартнеров");
	ИначеЕсли ВидСправочника="Общие" Тогда
		Область=Макет.ПолучитьОбласть("НастройкиОбщие");
	Иначе
		Возврат МассивНастроек;
	КонецЕсли;	
	
	Для Сч=1 По Область.ВысотаТаблицы Цикл
		НастройкаИД					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,1);
		ЭтоГруппа					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,3);
		Если ЭтоГруппа<>"Истина" Тогда
			МассивНастроек.Добавить(НастройкаИД);
		КонецЕсли;	
	КонецЦикла;		
	Возврат МассивНастроек;
КонецФункции



//#КонецОбласти //Хранение_Данных



//#Область Транспорт

//Документация по API: https://edi-api.kontur.ru/Documentation/V1/Index.html#authorization

//*********************************************************************
//							ТРАНСПОРТ  

//Загружает статусные сообщения, загружает основные сообщения, отправляет отчеты о доставке и исходящие сообщения, вызывает подключаемый модуль при необходимости
//из минусов - не дает вернуться на тонкий клиент при загрузке сообщений транзакциями
Процедура ВыполнитьОбменССервером(ИмяСписка="") Экспорт
	//ИмяСписка - устаревший параметр, оставлен для совместимости со старыми подключаемыми модулями
	
	//ПодключаемыйМодуль.ПередВыполнениемОбмена(ИмяСписка);
	ОбработкаСобытияПодключаемогоМодуля("ПередВыполнениемОбмена",,
			Новый Структура("ИмяСписка",
			ИмяСписка));
	
	СтандартнаяОбработкаEDI = Истина;
	ОбработкаСобытияПодключаемогоМодуля("ПередЗагрузкойНовыхСообщений",СтандартнаяОбработкаEDI,
			Новый Структура("ИмяСписка",
			ИмяСписка));
			
	УчетныеЗаписи = МодульИнтеграции_Новый.ПолучитьСписокЭлементовСправочника("УчетныеЗаписи");
	Для Каждого СтрокаУчетнойЗаписи Из УчетныеЗаписи Цикл//+
		
		Если СтрокаУчетнойЗаписи.НеАктивна=Истина Тогда
			Продолжить;
		КонецЕсли;	
		
		ПараметрыИнтернетСоединения_КонтурEDI = ПолучитьПараметрыИнтернетСоединения_KE();
		Если Не ПроверитьАктивностьПодключения(СтрокаУчетнойЗаписи,Неопределено) Тогда
			ВывестиПредупреждение_КонтурEDI("Не удалось подключиться к серверу."+Символы.ПС
					+"Проверьте соединение с сетью Интернет и правильность логина/пароля в учетной записи "+СтрокаУчетнойЗаписи.GLN);
				//раз нет подключения, значит, у нас либо кривой логин/пароль, либо проблемы с FTP/связью. В этом случае нет смысла продолжать.
			Продолжить;//пойдем на следующую учетку.
		КонецЕсли;	
			
		Если СтандартнаяОбработкаEDI Тогда		
			//сообщения загружаем пачками по 50 штук
			Пока Не ЗагрузитьНовыеСообщения(СтрокаУчетнойЗаписи,Истина) Цикл//выкачаем все статусные сообщения
				#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				#КонецЕсли
			КонецЦикла;
			
			Пока Не ЗагрузитьНовыеСообщения(СтрокаУчетнойЗаписи,Ложь) Цикл//загрузим "основные" сообщения - ORDERS, RECADV,...
				#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				#КонецЕсли
			КонецЦикла;
		КонецЕсли;	
		
		//не забыть вставить возможность только отправки сообщений (без получения статусных и входящих)
		//в старый интерфейс и в новый тоже
		
	КонецЦикла;	
	
	МодульИнтеграции_Новый.ОтправитьСообщенияОжидающиеОтправки();
	МодульИнтеграции_Новый.ОтправитьУведомленияОПрочтенииСообщений();
	МодульИнтеграции_Новый.ОтправитьALCRPT();
	
КонецПроцедуры

//возвращает Истина, если на сервере больше не осталось сообщений
Функция ЗагрузитьНовыеСообщения(СтрокаУчетнойЗаписи,ЭтоСтатусные) Экспорт//+
	
	ПараметрыИнтернетСоединения_КонтурEDI = ПолучитьПараметрыИнтернетСоединения_KE();//обновим кэш параметров интернет соединения
	
	мТипСообщения = ?(ЭтоСтатусные,"reports","");//надеюсь, в будущем мы от этого сможем уйти
	
	УчетнаяЗапись = МодульИнтеграции_Новый.ПолучитьЭлементСправочника("УчетныеЗаписи",СтрокаУчетнойЗаписи.Ссылка);
	
	ДанныеТранспортногоЯщика = Новый Структура;
	ДанныеТранспортногоЯщика.Вставить("ЭтоЯщикДляСтатусныхСообщений",ЭтоСтатусные);
	КаталогОбмена = ПолучитьЛокальныйКаталогОбменаСFTP(?(ЭтоСтатусные,"reports","inbox"),УчетнаяЗапись.GLN);
	
	Если ПротоколОбмена_КонтурEDI="API" Тогда
		
		ДанныеТранспортногоЯщика.Вставить("box_id",?(ЭтоСтатусные,УчетнаяЗапись.box_id_reports,УчетнаяЗапись.box_id_inbox));
		ДанныеТранспортногоЯщика.Вставить("event_id",?(ЭтоСтатусные,УчетнаяЗапись.ДатаИдентификаторПоследнегоReports,УчетнаяЗапись.ДатаИдентификаторПоследнегоInbox));
		
	КонецЕсли;	
		
	//РезультатЗагрузки - Структура, передающаяся из функции в функцию
	РезультатЗагрузки = ИнициализироватьСтруктуруРезультатаЗагрузкиСообщений();
	
	//найдем список новых сообщений на сервере/в каталоге
	ПолучитьСписокНовыхСообщений(РезультатЗагрузки,УчетнаяЗапись,ДанныеТранспортногоЯщика);
	
	Если Не РезультатЗагрузки.Успешно Тогда
		ОповеститьОбОшибках(РезультатЗагрузки,"Ошибки при обмене с сервером");
		Возврат Истина;
	КонецЕсли;	
	
	//собственно получение файлов
	ЗагрузитьСообщенияВоВременнуюПапку(РезультатЗагрузки,КаталогОбмена,УчетнаяЗапись,ЭтоСтатусные);
	
	Если Не РезультатЗагрузки.Успешно Тогда
		ОповеститьОбОшибках(РезультатЗагрузки,"Ошибки при обмене с сервером");
		Возврат Истина;
	КонецЕсли;	
	
	//для совместимости с текущей логикой модуля МодульКонвертации отсортируем сообщения по типам
	//впоследствии изменим МодульКонвертации и будем передавать в него все сообщения одной пачкой
	ТабСообщенийКопия = РезультатЗагрузки.ТаблицаСообщений.Скопировать(,"ТипСообщения");
	ТабСообщенийКопия.Свернуть("ТипСообщения");
	Для Каждого Эл Из ТабСообщенийКопия Цикл

		Если нрег(Эл.ТипСообщения) = "reports" Тогда
			РезультатКонвертации	= МодульКонвертации.КонвертироватьСписокВходящихСообщений(РезультатЗагрузки,Эл.ТипСообщения);//привести к КонвертироватьВходящиеСообщения
			РезультатПриемки		= МодульИнтеграции_Новый.ПринятьСтатусныеСообщения(РезультатКонвертации);
		Иначе
			РезультатКонвертации	= МодульКонвертации.КонвертироватьВходящиеСообщения(РезультатЗагрузки,Эл.ТипСообщения);
			РезультатПриемки		= МодульИнтеграции_Новый.ОбработатьВходящиеСообщения(РезультатКонвертации,Эл.ТипСообщения);	
			
			Если НЕ РезультатПриемки.Успешно Тогда
				ОповеститьОбОшибках(РезультатПриемки,"При загрузке EDI сообщений возникли ошибки:");
				Возврат Истина;//не будем заходить на вторую итерацию загрузки
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	//теперь обновим информацию о идентификаторах последних загруженных сообщений в Inbox и Reports
	Если ПротоколОбмена_КонтурEDI="API" Тогда
		
		РезультатЗагрузки.ВсеСообщенияЗагружены = (ДанныеТранспортногоЯщика.event_id = РезультатЗагрузки.ИдентификаторПоследнегоСообщения);
		
		Если ЭтоСтатусные Тогда
			УчетнаяЗапись.ДатаИдентификаторПоследнегоReports	= РезультатЗагрузки.ИдентификаторПоследнегоСообщения;
		Иначе
			УчетнаяЗапись.ДатаИдентификаторПоследнегоInbox		= РезультатЗагрузки.ИдентификаторПоследнегоСообщения;
		КонецЕсли;	
		
		МодульИнтеграции_Новый.СохранитьЭлементСправочника("УчетныеЗаписи",СтрокаУчетнойЗаписи.Ссылка,УчетнаяЗапись);
		
	КонецЕсли;	
	
	//если Ложь, то необходимо будет вызвать функцию из интерфейса еще раз
	Возврат РезультатЗагрузки.ВсеСообщенияЗагружены;
	
КонецФункции

Функция ОтправитьСообщение(ТипСообщения,ДокументСсылка,Параметры = Неопределено,ОтправкаУжеСозданногоСообщения = Ложь) Экспорт
	
	ПараметрыИнтернетСоединения_КонтурEDI = ПолучитьПараметрыИнтернетСоединения_KE();//обновим кэш параметров интернет соединения
	//внимание: надо найти все прямые вызовы Модуль_ПротоколОбмена.ОтправитьИсходящееСообщение() и продумать, как в этом случае работать с кэшем
	
	Если ОтправкаУжеСозданногоСообщения Тогда // сообщения уже созданы, нужно их только отправить
		Сообщение = МодульИнтеграции_Новый.ПрочитатьСообщение(,ДокументСсылка,ТипСообщения,"Исходящее",,Параметры);
	ИначеЕсли НЕ Параметры = Неопределено И Параметры.Свойство("ОтправитьСообщениеИзФормы") Тогда	
		Сообщение = Параметры.Сообщение;
	Иначе
		Сообщение = МодульИнтеграции_Новый.ПодготовитьИсходящееСообщение(ТипСообщения,ДокументСсылка,Параметры);
	КонецЕсли;
	
	// дополнительно проверим, не было ли отправлено это сообщение
	Если НЕ ОтправкаУжеСозданногоСообщения И НЕ (НЕ Параметры = Неопределено И Параметры.Свойство("ОтправитьСообщениеИзФормы")) Тогда
		
		Если НЕ ТипСообщения = "ORDERS" И НЕ (Сообщение.Статус = "Отменен" И Сообщение.Направление = "Исходящее") Тогда
			
			ТекущийСтатус = МодульИнтеграции_Новый.ПолучитьСтатусСообщения(, ДокументСсылка, ТипСообщения);
			
			Если ТекущийСтатус = "Отправлен" ИЛИ ТекущийСтатус = "Доставлен" Тогда
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Сообщение = Неопределено Тогда
		Если НЕ Сообщение.СодержитОшибки = Истина Тогда
			
			ОтклоняетсяНезагруженныйЗаказ = Ложь;
			
			Если ТипСообщения = "ORDRSP" И ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("ВходящийЗаказ") Тогда // отклонение незагруженного в 1С заказа
				ОтклоняетсяНезагруженныйЗаказ = Истина;
			КонецЕсли;
			
			РезультатКонвертации = МодульКонвертации.КонвертироватьИсходящееСообщениеПоНовому(Сообщение);
			
			Если НЕ ОтправкаУжеСозданногоСообщения И НЕ ОтклоняетсяНезагруженныйЗаказ Тогда
				МодульИнтеграции_Новый.ПередОтправкойИсходящегоСообщения(Сообщение,РезультатКонвертации);
			КонецЕсли;
			
			Если ТипСообщения = "ORDRSP"
				И МодульИнтеграции_Новый.ПолучитьКонстантуEDI("РазрешитьНесколькоДокументовИзORDERS") = Истина
				Тогда
			
				//в этот момент у нас сообщение сохранено в базу, нам надо растиражировать его на остальные реализации, 
				//если у нас ORDRSP исходящий
				//заодно проставить статус "Отправлен" всем сообщениям, кроме текущего, чтобы не ушло несколько ORDRSP в сеть
				//потом еще статусное сообщение при его приемке растиражировать на все связанные
			
				ТабВиртуальныхСообщений = МодульИнтеграции_Новый.ПолучитьВиртуальныеСвязанныеORDERS(Сообщение.ДокументСсылка);
				Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
					Если ТипЗнч(Параметры) = Тип("Структура") 
						И Параметры.Свойство("Статус")
						И Параметры.Статус = "Отклонить" Тогда
						Если Стр.ORDERS <> Сообщение.СообщениеСсылка Тогда
							//нам надо отклонить заказы, но не создавать по ним ORDRSP, а поставить статус "Отклонен"
							Если ВнешнееХранилище Тогда
								_ОтклоняемоеСообщение = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Стр.ORDERS).ПолучитьОбъект();
							Иначе
								_ОтклоняемоеСообщение = Стр.ORDERS.ПолучитьОбъект();
							КонецЕсли;	
							_ОтклоняемоеСообщение.Статус = "Отклонен";
							_ОтклоняемоеСообщение.Записать();
							
						КонецЕсли;	
					Иначе	
						Если Не ЗначениеЗаполнено(Стр.ORDRSP) 
							И Стр.ORDERS <> Сообщение.СообщениеСсылка
							Тогда
							//создадим копию
							Если ВнешнееХранилище Тогда
								_НовВиртуальноеСообщение = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Сообщение.СообщениеСсылка).Скопировать();
								_НовВиртуальноеСообщение.Документ = ЗначениеВСтрокуВнутр(Стр.Документ);
							Иначе
								_НовВиртуальноеСообщение = Сообщение.СообщениеСсылка.Скопировать();
								_НовВиртуальноеСообщение.Документ = Стр.Документ;
							КонецЕсли;	
							_НовВиртуальноеСообщение.УстановитьНовыйКод();
							_НовВиртуальноеСообщение.Статус = "Отправлен";
							_НовВиртуальноеСообщение.Записать();
							
							//и еще статус документа продублируем
							Если ВнешнееХранилище Тогда
								МЗ = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
								МЗ.Документ = ЗначениеВСтрокуВнутр(Стр.Документ);
							Иначе
								МЗ = РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
								МЗ.Документ = Стр.Документ;
							КонецЕсли;	
							
							МЗ.ИмяСтатуса = "Заказ";
							МЗ.Статус = Сообщение.Статус;
							МЗ.Записать();
						КонецЕсли;
					КонецЕсли;

				КонецЦикла;	
			КонецЕсли;
			
			Отправлять = Истина;
			
			Если НЕ МодульИнтеграции_Новый.ПараметрыПользователяEDI.ВариантОбмена = "Автоматический" Тогда
				Если НЕ ОтправкаУжеСозданногоСообщения Тогда
					Отправлять = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ОтклоняетсяНезагруженныйЗаказ = Истина Тогда
				Отправлять = Истина;
			КонецЕсли;
			
			Если Отправлять Тогда
				
				РезультатОтправки = ПередатьСообщениеНаСервер(РезультатКонвертации);
				
				Если РезультатОтправки.Успешно = Истина Тогда
					Если НЕ ОтклоняетсяНезагруженныйЗаказ Тогда
						МодульИнтеграции_Новый.ПослеОтправкиИсходящегоСообщения(Сообщение,РезультатОтправки);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОтклоняетсяНезагруженныйЗаказ Тогда
				Попытка
					Сообщение = МодульИнтеграции_Новый.ПолучитьОбъектСообщения(Параметры.ВходящийЗаказ.СообщениеСсылка);
					Сообщение.Статус = "Отклонен";
					Сообщение.Записать();
					//Параметры.ВходящийЗаказ.СообщениеСсылка.ПолучитьОбъект().Удалить();
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//возвращает HTTP соединение для скачивания какого-либо файла
//имеется в виду соединение с нашим сайтом edi.kontur.ru или тестовый локальный сервер
Функция ПолучитьСоединениеHTTP(Адрес) Экспорт
	СтруктураПараметровПрокси = ПолучитьПараметрыИнтернетСоединения_KE();
	
	Прокси = Новый ИнтернетПрокси;
	Если СтруктураПараметровПрокси.ИспользуетсяПрокси Тогда
		Прокси.Пользователь	= СтруктураПараметровПрокси.ЛогинПрокси;
		Прокси.Пароль		= СтруктураПараметровПрокси.ПарольПрокси;
	КонецЕсли;
	
	СоединениеHTTP = Новый HTTPСоединение(Адрес, , , ,Прокси ,Истина);//HTTPS
	//СоединениеHTTP = Новый HTTPСоединение("localhost", , , , ,);//отладка
	Возврат СоединениеHTTP;
КонецФункции	

//получает файл ИмяФайлаНаСервере с Соединения в ИмяЛокальногоФайла
//при обрыве связи возвращает Ложь и удаляет частично скачанный файл
Функция ПолучитьФайлHTTP(мСоединение,ИмяФайлаНаСервере,ИмяЛокальногоФайла) Экспорт
	Попытка
		мСоединение.Получить(ИмяФайлаНаСервере, ИмяЛокальногоФайла);
		мСоединение=Неопределено;
		Возврат Истина;
	Исключение
		Ф=новый Файл(ИмяЛокальногоФайла);
		Если Ф.Существует() Тогда
			УдалитьФайлы(ИмяЛокальногоФайла);
		КонецЕсли;	
		мСоединение=Неопределено;
		Возврат Ложь;
	КонецПопытки;
КонецФункции	

//**********************************************************
//	ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Старое название: ОтправитьИсходящееСообщение
Функция ПередатьСообщениеНаСервер(Параметры) Экспорт
	
	////эмулируем задержку в 3 секунды для отладки
	//ТекВремя = ТекущаяДата();
	//Пока ТекущаяДата()<ТекВремя+3 Цикл
	//КонецЦикла;	
	
	
	Результат = ИнициализироватьСтруктуруРезультатаФункции();
	
	//найдем, по какой учетной записи отправлять
	УчетнаяЗапись = УчетныеЗаписи.Найти(Параметры.GLN,"GLN");
	
	Если УчетнаяЗапись=Неопределено 
		Или УчетнаяЗапись.НеАктивна = Истина
	Тогда
	    ЗарегистрироватьОшибку(Результат,"Не найдена учетная запись для GLN "+Параметры.GLN);
		Возврат Результат;
	КонецЕсли;
	
	Если Не Параметры.Успешно Тогда
		Возврат Результат;
	КонецЕсли;	
		
	ТекущееСоединение = Неопределено;
	
	Если ПротоколОбмена_КонтурEDI = "Каталог" Тогда
		АдресКаталогаОбменаEDI				= ПараметрыИнтернетСоединения_КонтурEDI.АдресКаталогаОбменаEDI;
	КонецЕсли;
	
	
	ПутьКФайлу = Параметры.ПутьКФайлу;
	
	Файл = Новый Файл(ПутьКФайлу);
	
	Для НомерПопытки=1 По 2 Цикл//у нас 2 прохода: если в первый раз что-то пошло не так, то попробуем переподключиться и уйдем на второй круг. После второго выходим насовсем.
		
		Попытка
			ПроверитьАктивностьПодключения(УчетнаяЗапись,ТекущееСоединение);
			
			Если ПротоколОбмена_КонтурEDI = "DialMail" Тогда
				Если ТекущееСоединение.ОтправитьФайл(ПутьКФайлу,"outbox/"+Файл.Имя) = 0 Тогда
					РазорватьСоединениеDialMail(ТекущееСоединение);
			    КонецЕсли;	
			ИначеЕсли ПротоколОбмена_КонтурEDI = "FTP" Тогда
				ТекущееСоединение.Записать(ПутьКФайлу,"outbox/"+Файл.Имя);	
			ИначеЕсли ПротоколОбмена_КонтурEDI = "Каталог" Тогда
				КопироватьФайл(ПутьКФайлу,АдресКаталогаОбменаEDI+"/outbox/"+Файл.Имя);
			ИначеЕсли ПротоколОбмена_КонтурEDI = "API" Тогда
				ТД = Новый ТекстовыйДокумент;
				ТД.Прочитать(Параметры.ПутьКФайлу,"UTF8");
				_Результат = API_ВыполнитьHTTPЗапрос("/V1/Messages/SendMessage?boxId="+УчетнаяЗапись.box_id_inbox,"POST",УчетнаяЗапись,ТД.ПолучитьТекст());
			КонецЕсли;	
			Результат.Успешно = Истина;
			Прервать;//все успешно
		Исключение
			ТекущееСоединение=Неопределено;
			Если НомерПопытки=2 Тогда
				Результат.Успешно = Ложь;
				ЗарегистрироватьОшибку(Результат,"Не получилось подключиться к серверу");
				Возврат Результат;
			КонецЕсли;	
		КонецПопытки;
	КонецЦикла;
	
	УдалитьФайлы(ПутьКФайлу);
	
	Результат.Успешно = Истина;
		
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьСтруктуруРезультатаЗагрузкиСообщений()
	
	РезультатЗагрузки = ИнициализироватьСтруктуруРезультатаФункции();
	
	РезультатЗагрузки.Вставить("ПутьКЗагруженнымФайлам");
	РезультатЗагрузки.Вставить("КаталогОбмена");//похоже, дубль
	РезультатЗагрузки.Вставить("ИдентификаторПоследнегоСообщения");//только для API.
	РезультатЗагрузки.Вставить("ВсеСообщенияЗагружены",	Ложь);
	РезультатЗагрузки.Вставить("ТаблицаСообщений",		Новый ТаблицаЗначений);//основная таблица, куда пишется информация о загруженных сообщениях
	
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("ИмяФайла",				Новый ОписаниеТипов("Строка"));
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("ИмяФайлаНаСервере",	Новый ОписаниеТипов("Строка"));	//только для FTP, DialMail, Каталог
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("box_id",				Новый ОписаниеТипов("Строка"));	//только для API	
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("event_id",				Новый ОписаниеТипов("Строка"));	//только для API
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("ТипСообщения",			Новый ОписаниеТипов("Строка"));
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("Дата",					Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	//С этой же таблицей лучше и использовать ПослеУспешнойЗагрузкиСообщения в будущем. 
	Возврат РезультатЗагрузки;
	
КонецФункции	

//Проходит по РезультатЗагрузки.ТаблицаСообщений и закачивает указанные сообщения в КаталогОбмена
Процедура ЗагрузитьСообщенияВоВременнуюПапку(РезультатЗагрузки,КаталогОбмена,УчетнаяЗапись,ЭтоСтатусные)
	
	Попытка
		УдалитьФайлы(КаталогОбмена,"*.xml"); // перед каждой загрузкой чистим временную папку, т.к. другие пользователи могли уже загрузить эти временные файлы
	Исключение
	КонецПопытки;
	
	сч = 0;
	
	ТекущееСоединение = Неопределено;

	КоличествоСообщенийВсего = РезультатЗагрузки.ТаблицаСообщений.Количество();
	
	Для Каждого СтрокаСообщения Из РезультатЗагрузки.ТаблицаСообщений Цикл
		
		////эмулируем задержку в 3 секунды для отладки
		//ТекВремя = ТекущаяДата();
		//Пока ТекущаяДата()<ТекВремя+3 Цикл
		//КонецЦикла;	
		
		сч = сч+1;
		
		ПрефиксСостояния = ?(ЭтоСтатусные,"Загружаем новые статусные сообщения","Загружаем новые сообщения");
		
		Состояние_КонтурEDI(ПрефиксСостояния + ": "+СокрЛП(сч)+" из "+СокрЛП(КоличествоСообщенийВсего));
		
		ВременныйФайл = Новый Файл(КаталогОбмена + СтрокаСообщения.ИмяФайла);//???
		
		Если ВременныйФайл.Существует() Тогда
			Продолжить;//у нас уже есть такой файл в локальном каталоге. А откуда он взялся?? Не стоит ли его удалить?
		КонецЕсли;	
			
		Для НомерПопытки=1 По 2 Цикл//у нас 2 прохода: если в первый раз что-то пошло не так, то попробуем переподключиться и уйдем на второй круг. После второго выходим насовсем.
			
			Попытка
				ПроверитьАктивностьПодключения(УчетнаяЗапись,ТекущееСоединение);
				Если ПротоколОбмена_КонтурEDI = "DialMail" Тогда
					
					Если ТекущееСоединение.ПолучитьФайл("/"+СтрокаСообщения.ИмяФайлаНаСервере, КаталогОбмена + СтрокаСообщения.ИмяФайла) = 0 Тогда
						РазорватьСоединениеDialMail(ТекущееСоединение);
					КонецЕсли;
					
				ИначеЕсли ПротоколОбмена_КонтурEDI = "FTP" Тогда
					
					ТекущееСоединение.Получить(СтрокаСообщения.ИмяФайлаНаСервере, КаталогОбмена + СтрокаСообщения.ИмяФайла);
					//продумать ситуацию, когда файл был уже загружен соседним заданием обмена, например, с другого компа
					
				ИначеЕсли ПротоколОбмена_КонтурEDI = "Каталог" Тогда
					
					КопироватьФайл(СтрокаСообщения.ИмяФайлаНаСервере, КаталогОбмена + СтрокаСообщения.ИмяФайла);
					
				ИначеЕсли ПротоколОбмена_КонтурEDI = "API" Тогда
					
					АдресСообщения = "/V1/Messages/GetInboxMessage?boxId="+СтрокаСообщения.box_id+"&messageId="+СтрокаСообщения.event_id;
					РезультатЗапроса = API_ВыполнитьHTTPЗапрос(АдресСообщения,"GET",УчетнаяЗапись);
					Сообщение = ПрочитатьJSON(РезультатЗапроса);
					BASE64Значение(Сообщение.Data.MessageBody).Записать(КаталогОбмена + СтрокаСообщения.ИмяФайла);
					
				КонецЕсли;
				
				//установить файлу дату изменения равной дате этого файла на FTP
				ВремФайл= новый Файл(КаталогОбмена + СтрокаСообщения.ИмяФайла);
				Если ВремФайл.Существует() Тогда
					Если ПротоколОбмена_КонтурEDI = "FTP" или ПротоколОбмена_КонтурEDI = "Каталог" Тогда
					//В будущем можно будет убрать, когда модуль конвертации и приемки будут работать именно со списком файлов на входе
						ВремФайл.УстановитьВремяИзменения(СтрокаСообщения.Дата);
					КонецЕсли;
				КонецЕсли;
				
				Прервать;//успешно загрузили, идем дальше
				
			Исключение
				_Ошибка = ОписаниеОшибки();
				
				Если НомерПопытки=2 Тогда
					РезультатЗагрузки.Успешно = Ложь;
					ЗарегистрироватьОшибку(РезультатЗагрузки,"Не удалось получить с сервера файл: "+СтрокаСообщения.ИмяФайлаНаСервере);
					Возврат;
				КонецЕсли;	
				
			КонецПопытки;
			
		КонецЦикла;	//2 попытки переподключения
	КонецЦикла;//по файлам
	
	РезультатЗагрузки.ПутьКЗагруженнымФайлам = КаталогОбмена; //в будущем передавать на конвертацию конечный список файлов, а не локальный каталог
КонецПроцедуры	

Функция ПослеУспешнойЗагрузкиСообщения(Параметры,Папка = "inbox") Экспорт //удаляет либо фтп файл либо локальный фтп файл
	
	Перем ПутьКФайлу;
	
	Если ПротоколОбмена_КонтурEDI = "API" Тогда
		//не надо больше ничего делать, файлы из API не удаляются
		Возврат Неопределено;
	КонецЕсли;	
	
	Если Не Параметры.Свойство("ПутьКФайлу",ПутьКФайлу) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//найдем, по какой учетной записи удалять
	УчетнаяЗапись = УчетныеЗаписи.Найти(Параметры.GLN,"GLN");
	
	Если УчетнаяЗапись=Неопределено 
		Или УчетнаяЗапись.НеАктивна = Истина
	Тогда
		Сообщить_КонтурEDI("Сообщение "+ПутьКФайлу+" не было удалено с сервера. Проверьте настройки учетной записи с GLN "+Параметры.GLN);
		//такое может возникнуть, если в учетной записи указали неправильный GLN. В будущем будем пересматривать логику работы с учетными записями.
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПротоколОбмена_КонтурEDI = "Каталог" Тогда
		Если ПроверитьАктивностьПодключения(УчетнаяЗапись) Тогда
			АдресКаталогаОбменаEDI	= ПараметрыИнтернетСоединения_КонтурEDI.АдресКаталогаОбменаEDI;
			Файл = Новый Файл(ПутьКФайлу);
			
			// kns {метка} обработать исключение
			
			Попытка 
				УдалитьФайлы(АдресКаталогаОбменаEDI+"\"+Папка+"\"+Файл.Имя); //с псевдо фтп
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ПротоколОбмена_КонтурEDI = "DialMail" Или ПротоколОбмена_КонтурEDI = "FTP" Тогда
		
		ТекущееСоединение = Неопределено;
		Файл = Новый Файл(ПутьКФайлу);
		
		Для НомерПопытки=1 По 2 Цикл//у нас 2 прохода: если в первый раз что-то пошло не так, то попробуем переподключиться и уйдем на второй круг. После второго выходим насовсем.
		
			Попытка
				ПроверитьАктивностьПодключения(УчетнаяЗапись,ТекущееСоединение);
				Если ПротоколОбмена_КонтурEDI = "DialMail" Тогда
					Если ТекущееСоединение.УдалитьФайл("/"+Папка+"/"+Файл.Имя) = 0
						И СокрЛП(ТекущееСоединение.lastserveranswer)<>"550 File not found" Тогда
						//файла могло уже и не быть на сервере. 
						//На самом деле это костыль, т.к. в МодульИнтеграции_Новый.ОбработатьВходящиеСообщения сохранение сообщения иногда вызывается дважды
						РазорватьСоединениеDialMail(ТекущееСоединение);	
				    КонецЕсли;	
				Иначе
					ТекущееСоединение.Удалить(Папка+"/"+Файл.Имя);
				КонецЕсли;
				Прервать; //все успешно
			Исключение
				_Ошибка = ОписаниеОшибки();
				
				Если Найти(_Ошибка,"Путь не найден")<>0 Тогда
					Прервать;//все ок, просто файл был уже удален кем-то, например, с соседнего компа при обмене
				КонецЕсли;	
				
				Если НомерПопытки=2 Тогда
					Возврат Неопределено;
				КонецЕсли;	
			КонецПопытки;
		КонецЦикла;//2 попытки переподключения
			
	КонецЕсли;
	
	Попытка 
		УдалитьФайлы(ПутьКФайлу);
	Исключение
	КонецПопытки;
	
	
КонецФункции

//**********************************************************
//	ПОЛУЧЕНИЕ СПИСКОВ СООБЩЕНИЙ

//можно будет использовать "снаружи" для проверки наличия новых сообщений на сервере (без их загрузки)
Процедура ПолучитьСписокНовыхСообщений(РезультатЗагрузки,УчетнаяЗапись,ДанныеТранспортногоЯщика) Экспорт
	                    
	Если ПротоколОбмена_КонтурEDI = "Каталог" Тогда
		АдресКаталогаОбменаEDI				= ПараметрыИнтернетСоединения_КонтурEDI.АдресКаталогаОбменаEDI;
	КонецЕсли;
	
	ТекущееСоединение = Неопределено;
	РезультатЗагрузки.Успешно = Истина;
	РазмерБуфера = 50; //количество сообщений для одной транзакции
	
	Если ДанныеТранспортногоЯщика.ЭтоЯщикДляСтатусныхСообщений Тогда
		Состояние_КонтурEDI("Запрашиваем статусные сообщения");
		ЯщикПоискаФайлов = "reports";
		ЭтоСтатусные = Истина;
	Иначе
		Состояние_КонтурEDI("Запрашиваем новые сообщения");
		ЯщикПоискаФайлов = "inbox";
		ЭтоСтатусные = Ложь;
	КонецЕсли;
	
	//сначала получим список сообщений
	
	Для НомерПопытки=1 По 2 Цикл//у нас 2 прохода: если в первый раз что-то пошло не так, то попробуем переподключиться и уйдем на второй круг. После второго выходим насовсем.
		
		Попытка
			ПроверитьАктивностьПодключения(УчетнаяЗапись,ТекущееСоединение);
			//маску поиска файлов оставить внутри функций поиска
			Если ПротоколОбмена_КонтурEDI = "DialMail" Тогда
				НайтиФайлы_DialMail(ЯщикПоискаФайлов, "*.xml",ТекущееСоединение,РезультатЗагрузки);
			ИначеЕсли ПротоколОбмена_КонтурEDI = "FTP"
				Или ПротоколОбмена_КонтурEDI = "Каталог" Тогда
				НайтиФайлы_FTP_Каталог(ЯщикПоискаФайлов, "*.xml",ТекущееСоединение,РезультатЗагрузки);
			ИначеЕсли ПротоколОбмена_КонтурEDI = "API" Тогда
				НайтиФайлы_API(УчетнаяЗапись,ДанныеТранспортногоЯщика,РезультатЗагрузки,РазмерБуфера);
			КонецЕсли;
			
			Если ПротоколОбмена_КонтурEDI = "DialMail"
				Или ПротоколОбмена_КонтурEDI = "FTP"
				Или ПротоколОбмена_КонтурEDI = "Каталог"
			Тогда
				РезультатЗагрузки.ВсеСообщенияЗагружены = (РезультатЗагрузки.ТаблицаСообщений.Количество()<РазмерБуфера);
				Если Не РезультатЗагрузки.ВсеСообщенияЗагружены Тогда
					//будем загружать сообщения пачками по 50 штук. Отрежем пачку
					МассивДляЗагрузки = Новый Массив;
					Для Сч=1 По Мин(РазмерБуфера,РезультатЗагрузки.ТаблицаСообщений.Количество()) Цикл
						МассивДляЗагрузки.Добавить(РезультатЗагрузки.ТаблицаСообщений[Сч-1]);
					КонецЦикла;	
				    РезультатЗагрузки.ТаблицаСообщений = РезультатЗагрузки.ТаблицаСообщений.Скопировать(МассивДляЗагрузки);
				КонецЕсли;
			КонецЕсли;	
			
			Прервать;//успешно нашли, идем дальше за цикл
			
		Исключение
			РезультатЗагрузки.ТаблицаСообщений.Очистить();
			//_Ошибка = ОписаниеОшибки();
			//Сообщить_КонтурEDI(_Ошибка);
			Если НомерПопытки=2 Тогда
				РезультатЗагрузки.Успешно = Ложь;
				ЗарегистрироватьОшибку(РезультатЗагрузки,"Не получилось подключиться к FTP серверу");
				Возврат;
			КонецЕсли;	
		КонецПопытки;
	КонецЦикла;	
	
	//проставим типы сообщений - это времянка, потом будем определять тип сообщения по содержимому
	Для Каждого СтрокаСообщения Из РезультатЗагрузки.ТаблицаСообщений Цикл
		Если ПротоколОбмена_КонтурEDI = "API" Тогда
			СтрокаСообщения.ТипСообщения	= СтрокаСообщения.ТипСообщения;
		Иначе
			Если ЭтоСтатусные Тогда
				СтрокаСообщения.ТипСообщения = "reports";
			Иначе	
				ПозицияРазделителя = Найти(СтрокаСообщения.ИмяФайла,"_");
				СтрокаСообщения.ТипСообщения	= ВРЕГ(Лев(СтрокаСообщения.ИмяФайла,ПозицияРазделителя-1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Функция НайтиФайлы_FTP_Каталог(Каталог, МаскаФильтра,Соединение,РезультатЗагрузки)
	
	//работа с FTP и каталогом очень похожа, поэтому оставим их в единой функции
	Если ПротоколОбмена_КонтурEDI = "Каталог" Тогда //добавить тут автоопределение каталога - эмулятора FTP
		НайденныеФайлы = НайтиФайлы(ПараметрыИнтернетСоединения_КонтурEDI.АдресКаталогаОбменаEDI+"\"+Каталог, МаскаФильтра);
	Иначе	
		НайденныеФайлы = Соединение.НайтиФайлы("/"+Каталог, МаскаФильтра);
	КонецЕсли;	
	
	Для Каждого ТекущийФайл Из НайденныеФайлы Цикл
		Если ТекущийФайл.ЭтоФайл() 
			И ТекущийФайл.Размер()>0
			//пропускаем каталоги и пустые файлы
		Тогда
			
			НоваяСтрока						= РезультатЗагрузки.ТаблицаСообщений.Добавить();
			НоваяСтрока.ИмяФайлаНаСервере	= ТекущийФайл.ПолноеИмя;
			НоваяСтрока.ИмяФайла			= ТекущийФайл.ИмяБезРасширения+ТекущийФайл.Расширение;
			НоваяСтрока.Дата				= ТекущийФайл.ПолучитьВремяИзменения();
			
		КонецЕсли;
	КонецЦикла;
	
	РезультатЗагрузки.ТаблицаСообщений.Сортировать("Дата Возр");
	
	Возврат РезультатЗагрузки.ТаблицаСообщений;
	
КонецФункции
 
Функция НайтиФайлы_DialMail(Каталог, МаскаФильтра,Соединение,РезультатЗагрузки)
	
	РезультатПолученияСписка = Соединение.Лист("/"+Каталог, МаскаФильтра);
	
	Если РезультатПолученияСписка = 1 Тогда
		
		КоличествоФайлов = Соединение.КоличествоФайлов();
		
		Для к = 1 По КоличествоФайлов Цикл
			Если Соединение.ЭтоКаталог(к) = 0 Тогда
				
				ИмяТекущегоФайла = Соединение.ПолучитьИмяФайла(к);
				ТекущийФайл = Новый Файл("/"+Каталог+"/"+ИмяТекущегоФайла);
									
				Дата  = Соединение.ПолучитьДатуФайла(к);
				Время = Соединение.ПолучитьВремяФайла(к);
				
				НоваяСтрока = РезультатЗагрузки.ТаблицаСообщений.Добавить();
				НоваяСтрока.ИмяФайлаНаСервере	= "/"+Каталог+"/"+ИмяТекущегоФайла;
				НоваяСтрока.ИмяФайла			= ИмяТекущегоФайла;
				НоваяСтрока.Дата				= Дата( Число(Прав(Дата, 4)), Число(Сред(Дата,4,2)),  Число(Лев(Дата,2)),   Число(Лев(Время,2)), Число(Сред(Время,4,2)), Число(Прав(Время,2)) );
				
			КонецЕсли;
		КонецЦикла;
		
		РезультатЗагрузки.ТаблицаСообщений.Сортировать("Дата Возр");
		
	Иначе
		
		//считаем, что соединение пропало, вызываем исключение
		РазорватьСоединениеDialMail(Соединение);	
		
	КонецЕсли;
	
	Возврат Истина;//убрать
	
КонецФункции
 
Функция НайтиФайлы_API(УчетнаяЗапись,ДанныеТранспортногоЯщика,РезультатЗагрузки,РазмерБуфера = 50)
	
	ТекНачальноеСобытие = Неопределено; //точка отсчета, с которой будем грузить сообщения
	
	Если СтрДлина(ДанныеТранспортногоЯщика.event_id) = 8 Тогда
		//есть возможность в настройках учетной записи прописать сюда дату в формате ГГГГММДД
		//тогда первые сообщения будем грузить с этой даты, а не с ID сообщения
		//так можно перезагружать потерянные сообщения
		Попытка
			//попробуем преобразовать в дату
			ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
			НачалоПериода = ОписаниеТиповДата.ПривестиЗначение(ДанныеТранспортногоЯщика.event_id);
		Исключение
			НачалоПериода = Дата("20140101");
		КонецПопытки;
	Иначе
		Попытка
			_ТестИД = Новый УникальныйИдентификатор(ДанныеТранспортногоЯщика.event_id);
		Исключение
			НачалоПериода = Дата("20140101");
		КонецПопытки;	
		
		ТекНачальноеСобытие = ДанныеТранспортногоЯщика.event_id;
	КонецЕсли;
	
	Состояние_КонтурEDI("Получение сообщений...");
		
	Если Не ЗначениеЗаполнено(ТекНачальноеСобытие) Тогда
		//			АдресЗапросаСобытий = "/V1/Messages/GetEventsFrom?boxId="+boxId+"&fromDateTime="+Формат(НачалоПериода,"ДФ=yyyy-MM-ddTHH:mm:ss.0000000Z")+"&count=20";
		АдресЗапросаСобытий = "/V1/Messages/GetEventsFrom?boxId="+ДанныеТранспортногоЯщика.box_id+"&fromDateTime="+Формат(НачалоПериода,"ДФ=yyyy-MM-dd; ДП=00010101")+"&count="+Формат(РазмерБуфера,"ЧГ=0");
	Иначе	
		АдресЗапросаСобытий = "/V1/Messages/GetEvents?boxId="+ДанныеТранспортногоЯщика.box_id+"&exclusiveEventId="+ТекНачальноеСобытие+"&count="+Формат(РазмерБуфера,"ЧГ=0");
	КонецЕсли;
	
	РезультатЗапроса = API_ВыполнитьHTTPЗапрос(АдресЗапросаСобытий,"GET",УчетнаяЗапись);
	События = ПрочитатьJSON(РезультатЗапроса);
	МассивСобытий = События.Events;
	КоличествоСобытий = МассивСобытий.Количество();
	ТекНачальноеСобытие = Неопределено;
	
	Если КоличествоСобытий>0 Тогда
		
		Для н = 1 по КоличествоСобытий Цикл
			
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			ИДСообщения = Неопределено;
			
			ТекущееСобытие = События.Events[н-1];
			ТекНачальноеСобытие = ТекущееСобытие.EventId;//отметка, с которой будем грузить следующую пачку сообщений
			Если ЗначениеЗаполнено(ТекНачальноеСобытие) Тогда
				РезультатЗагрузки.ИдентификаторПоследнегоСообщения = Строка(ТекНачальноеСобытие);
				//запомним ID сообщения, с которого надо выполнять обмен в следующий раз
			КонецЕсли;	
			
			Если ТекущееСобытие.EventType = "NewInboxMessage" Тогда
				
				Если ВРЕГ(ТекущееСобытие.EventContent.InboxMessageMeta.DocumentDetails.DocumentType)="STSMSG" Тогда
					
					//это статусные
					ТипСообщения = "reports";
					ТипСообщенияКаталог = "reports";
					ИДСообщения = ТекущееСобытие.EventContent.InboxMessageMeta.MessageId;
					_boxid = ТекущееСобытие.EventContent.InboxMessageMeta.boxId;
					
				Иначе
					
					//это входящие
					ТипСообщения = ВРЕГ(ТекущееСобытие.EventContent.InboxMessageMeta.DocumentDetails.DocumentType);
					ТипСообщенияКаталог = "inbox";
					ИДСообщения = ТекущееСобытие.EventContent.InboxMessageMeta.MessageId;
					_boxid = ТекущееСобытие.EventContent.InboxMessageMeta.boxId;
					
				КонецЕсли;
				
			ИначеЕсли ТекущееСобытие.EventType = "MessageDelivered" Тогда
				//это тоже статусные, но другого вида, они нам не нужны пока
				Продолжить;
			Иначе
				Продолжить;//не загружаем это сообщение
			КонецЕсли;	
			
			НовСтрока = РезультатЗагрузки.ТаблицаСообщений.Добавить();
			НовСтрока.box_id				= _boxid;
			НовСтрока.event_id				= ИДСообщения;
			НовСтрока.ТипСообщения			= ТипСообщения;
			НовСтрока.ИмяФайлаНаСервере		= ""+ТипСообщения+"_"+ИДСообщения+"_"+_boxid+".xml";//надо ли это здесь?
			НовСтрока.ИмяФайла				= НовСтрока.ИмяФайлаНаСервере;
			
			//ДатаВремяСобытия = СтрЗаменить(Лев(ТекущееСобытие.EventDateTime,19),"T"," ");
		КонецЦикла;
		
		//этот кусок тоже продумать и по возможности убрать
		Если КоличествоСобытий<РазмерБуфера Тогда
			РезультатЗагрузки.ВсеСообщенияЗагружены = Истина;
		КонецЕсли;	
		
	Иначе //нет новых сообщений
		
		РезультатЗагрузки.ИдентификаторПоследнегоСообщения = ДанныеТранспортногоЯщика.event_id;//оставим входящий ID последнего сообщения
		РезультатЗагрузки.ВсеСообщенияЗагружены = Истина;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	


//**********************************************************
//	ИНИЦИАЛИЗАЦИЯ ПОДКЛЮЧЕНИЙ

//Проверяет, живо ли соединение для УчетнаяЗапись, и при необходимости переподключает.
//Новое соединение передает в СоединениеОбъект, а возвращает Истина или Ложь, в зависимости от того, живо ли соединение и удалось ли переподключиться
Функция ПроверитьАктивностьПодключения(УчетнаяЗапись,СоединениеОбъект=Неопределено) Экспорт
	
	Если ПротоколОбмена_КонтурEDI = "Каталог" Тогда
		АдресКаталогаОбменаEDI				= ПараметрыИнтернетСоединения_КонтурEDI.АдресКаталогаОбменаEDI;
		
		Если НЕ ЗначениеЗаполнено(АдресКаталогаОбменаEDI) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если  ПроверитьСуществованиеФайлаКаталога(АдресКаталогаОбменаEDI) и 
			ПроверитьСуществованиеФайлаКаталога(АдресКаталогаОбменаEDI+"\Inbox")
			и ПроверитьСуществованиеФайлаКаталога(АдресКаталогаОбменаEDI+"\Outbox")
			и ПроверитьСуществованиеФайлаКаталога(АдресКаталогаОбменаEDI+"\Reports")
			и ПроверитьСуществованиеФайлаКаталога(АдресКаталогаОбменаEDI+"\Settings")
			Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	Если ПротоколОбмена_КонтурEDI = "API" Тогда
		//проверим заполненность box_id
		Если Не ЗначениеЗаполнено(УчетнаяЗапись.box_id_inbox) 
			Или Не ЗначениеЗаполнено(УчетнаяЗапись.box_id_reports)
		Тогда
			ВывестиПредупреждение_КонтурEDI("Заполните все box_id для учетной записи "+УчетнаяЗапись.GLN);
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;	
		//проверим заполненность event_id
		Если Не ЗначениеЗаполнено(УчетнаяЗапись.ДатаИдентификаторПоследнегоInbox) 
			Или Не ЗначениеЗаполнено(УчетнаяЗапись.ДатаИдентификаторПоследнегоReports)
		Тогда
			ВывестиПредупреждение_КонтурEDI("Заполните все идентификаторы последних сообщений для учетной записи "+УчетнаяЗапись.GLN);
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;	
		//возможно, стоит проверять тут еще СоединениеАпи
	КонецЕсли;	
	
	//остались 2 варианта - FTP и  DialMail
	
	СоединениеОбъект = ПолучитьОбъектСоединенияИзКэша(УчетнаяЗапись);
	
	ЛогинFTP=УчетнаяЗапись.Логин;
	ПарольFTP=УчетнаяЗапись.Пароль;
	
	Если ПротоколОбмена_КонтурEDI = "DialMail" Тогда
		
		Если (Строка(ТипЗнч(СоединениеОбъект)) = "НеизвестныйОбъект"//похоже на объект DialMail
			или Строка(ТипЗнч(СоединениеОбъект)) = "AddIn.FTP")//точно DialMail
			И СокрЛП(СоединениеОбъект.Команда("noop")) = ("200 OK") Тогда
			Возврат Истина;
		КонецЕсли;	
		
	ИначеЕсли ПротоколОбмена_КонтурEDI = "FTP" Тогда
		
		Если СоединениеОбъект <> Неопределено
			И ТипЗнч(СоединениеОбъект) = Тип("FTPСоединение") Тогда
			Возврат Истина;  // соединение активно, заново не подключаемся
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЛогинFTP)
		Или ПустаяСтрока(ПараметрыИнтернетСоединения_КонтурEDI.Сервер) 
	Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Сч=1 По 5 Цикл //пробуем 5 раз переподключиться
	
		СоединениеОбъект = Неопределено;//сбросим объект соединения
		
		Попытка
			
			Если ПротоколОбмена_КонтурEDI = "DialMail" Тогда
				СоединениеОбъект = ПолучитьСоединениеDialMail(ЛогинFTP, ПарольFTP);
			ИначеЕсли ПротоколОбмена_КонтурEDI = "FTP" Тогда
				СоединениеОбъект = Новый FTPСоединение(
							СокрЛП(ПараметрыИнтернетСоединения_КонтурEDI.Сервер), 
							ПараметрыИнтернетСоединения_КонтурEDI.Порт, 
							СокрЛП(ЛогинFTP), 
							СокрЛП(ПарольFTP),
							, 
							ПараметрыИнтернетСоединения_КонтурEDI.ПассивныйРежим,);
			КонецЕсли;
			
			ПоместитьОбъектСоединенияВКэш(УчетнаяЗапись,СоединениеОбъект);//и кэшируем сразу
			
			Возврат Истина;
		Исключение
			
			Состояние_КонтурEDI("Потеряно соединение с ФТП сервером, восстанавливаю...");
			_ОписаниеОшибки = ОписаниеОшибки(); //Встроенный механизм FTP выдаст "Login denied", DialMail - "530 Login or password incorrect!"
			Если Найти(_ОписаниеОшибки,"Login denied")<>0 Тогда
				ВывестиПредупреждение_КонтурEDI("Неправильный пароль для логина "+ЛогинFTP);
				Возврат Ложь;//Прервать;
			КонецЕсли;	
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСоединениеDialMail(ЛогинFTP, ПарольFTP, КоличествоПопыток = 10)
	
	Если КомпонентаDialMailПодключена <> Истина Тогда
		
		КомпонентаDialMailПодключена = ПодключитьВнешнююКомпоненту_КонтурEDI("AddIn.FTP");
				
	КонецЕсли;
	
	Если КомпонентаDialMailПодключена Тогда
	
		Соединение = Новый("Addin.FTP");
		
		Если ПараметрыИнтернетСоединения_КонтурEDI.ИспользуетсяПрокси Тогда
			Соединение.ХостПрокси 			 = СокрЛП(ПараметрыИнтернетСоединения_КонтурEDI.СерверПрокси);
			Соединение.ПортПрокси 			 = СокрЛП(ПараметрыИнтернетСоединения_КонтурEDI.ПортПрокси);
			Соединение.ИмяПользователяПрокси = СокрЛП(ПараметрыИнтернетСоединения_КонтурEDI.ЛогинПрокси);
			Соединение.ПарольПрокси 		 = СокрЛП(ПараметрыИнтернетСоединения_КонтурEDI.ПарольПрокси);
			Соединение.ИспользоватьПрокси 	 = ПараметрыИнтернетСоединения_КонтурEDI.ТипПрокси;
		КонецЕсли;
			
		Если Соединение.Подключиться(
				СокрЛП(ПараметрыИнтернетСоединения_КонтурEDI.Сервер), 
				ПараметрыИнтернетСоединения_КонтурEDI.Порт, 
				СокрЛП(ЛогинFTP), 
				СокрЛП(ПарольFTP), 
				ПараметрыИнтернетСоединения_КонтурEDI.ПассивныйРежим, 
				КоличествоПопыток)
				= 1 Тогда
			Возврат Соединение;
		Иначе
			Если СокрЛП(Соединение.lastserveranswer)="530 Login or password incorrect!" Тогда
				Соединение = Неопределено;
				ВызватьИсключение "Login denied";//эмулируем ошибку FTP, встроенного в платформу
			КонецЕсли;	
			РазорватьСоединениеDialMail(Соединение);
		КонецЕсли;
		
	Иначе
	    РазорватьСоединениеDialMail(Соединение);
	КонецЕсли;
	
КонецФункции

Процедура РазорватьСоединениеDialMail(Соединение)
	
	Соединение = Неопределено;
	ВызовИсключения = 1/0;	
	
КонецПроцедуры

//при работе с несколькими учетными записями будем кэшировать подключения для обмена по FTP
Функция ПолучитьОбъектСоединенияИзКэша(УчетнаяЗапись)
	//переделать на ТаблицуЗначений, или, возможно, писать прямо в УчетнуюЗапись
	Если КэшСоединений_КонтурEDI=Неопределено Тогда
		КэшСоединений_КонтурEDI = Новый Структура;
	КонецЕсли;
	
	ТекОбъект = Неопределено;
	КэшСоединений_КонтурEDI.Свойство("_"+УчетнаяЗапись.GLN,ТекОбъект);
		
	Возврат ТекОбъект;
КонецФункции	

Процедура ПоместитьОбъектСоединенияВКэш(УчетнаяЗапись,ОбъектСоединения)
	Если КэшСоединений_КонтурEDI=Неопределено Тогда
		КэшСоединений_КонтурEDI = Новый Структура;
	КонецЕсли;
	
	Если КэшСоединений_КонтурEDI.Свойство("_"+УчетнаяЗапись.GLN) Тогда
		КэшСоединений_КонтурEDI.Удалить("_"+УчетнаяЗапись.GLN);
	КонецЕсли;	
	
	КэшСоединений_КонтурEDI.Вставить("_"+УчетнаяЗапись.GLN,ОбъектСоединения);
КонецПроцедуры

Функция ПолучитьЛокальныйКаталогОбменаСFTP(ВидКаталога,GLN_УчетнойЗаписи)
	
	ПутьКВременномуКаталогу =  КаталогВременныхФайлов()+"КонтурEDI_"+GLN_УчетнойЗаписи+"\"+ВидКаталога;
	КаталогНаДиске = Новый Файл(ПутьКВременномуКаталогу);
	Если НЕ КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(ПутьКВременномуКаталогу);
	КонецЕсли;
	
	Возврат ПутьКВременномуКаталогу+"\";
	
КонецФункции

//Возвращает Структуру с параметрами прокси: Использование, Логин, Пароль
//При перетаскивании обмена с FTP возврат будет расширен
Функция ПолучитьПараметрыИнтернетСоединения_KE() Экспорт
	
	СтруктураПараметровСоединения = Новый Структура;
	
	//для Прокси
	СтруктураПараметровСоединения.Вставить("ИспользуетсяПрокси",		МодульИнтеграции_Новый.ПолучитьКонстантуEDI("ИспользуетсяПрокси") = Истина);
	СтруктураПараметровСоединения.Вставить("ЛогинПрокси",				МодульИнтеграции_Новый.ПолучитьКонстантуEDI("ЛогинПрокси"));
	СтруктураПараметровСоединения.Вставить("ПарольПрокси",				МодульИнтеграции_Новый.ПолучитьКонстантуEDI("ПарольПрокси"));
	СтруктураПараметровСоединения.Вставить("СерверПрокси",				МодульИнтеграции_Новый.ПолучитьКонстантуEDI("СерверПрокси"));
	СтруктураПараметровСоединения.Вставить("ПортПрокси",				МодульИнтеграции_Новый.ПолучитьКонстантуEDI("ПортПрокси"));
	СтруктураПараметровСоединения.Вставить("ТипПрокси",					МодульИнтеграции_Новый.ПолучитьКонстантуEDI("ТипПрокси"));
	
	//для FTP
	СтруктураПараметровСоединения.Вставить("Сервер",					МодульИнтеграции_Новый.ПолучитьКонстантуEDI("Сервер"));
	СтруктураПараметровСоединения.Вставить("Порт",						МодульИнтеграции_Новый.ПолучитьКонстантуEDI("Порт"));
//	СтруктураПараметровСоединения.Вставить("ПассивныйРежим",			МодульИнтеграции_Новый.ПолучитьКонстантуEDI("ПассивныйРежим"));
	СтруктураПараметровСоединения.Вставить("ПассивныйРежим",			Истина);//никто не снимает этот флаг, и правильно.
	
	//для Каталога
	СтруктураПараметровСоединения.Вставить("АдресКаталогаОбменаEDI",	МодульИнтеграции_Новый.ПолучитьКонстантуEDI("АдресКаталогаОбменаEDI"));
	
	Если Не ЗначениеЗаполнено(СтруктураПараметровСоединения.Порт) Тогда
		СтруктураПараметровСоединения.Порт = 21;
	КонецЕсли;
	
	Возврат СтруктураПараметровСоединения;
КонецФункции	

//**********************************************************
//	API

//передает на сервер логин и пароль учетной записи вместе с ключом разработчика. При успешной авторизации записывает в УчетнаяЗапись полученный токен
Функция API_Авторизоваться(УчетнаяЗапись)
	
	Заголовки="Authorization: KonturEdiAuth konturediauth_api_client_id="+КлючРазработчика+" , konturediauth_login="+УчетнаяЗапись.Логин+" , konturediauth_password="+УчетнаяЗапись.Пароль;
	
	ИмяФайлаЗапроса=ПолучитьИмяВременногоФайла();
	ТД=Новый ТекстовыйДокумент;
	ТД.Записать(ИмяФайлаЗапроса,КодировкаТекста.UTF8);//чтоб хоть что-то туда записалось
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	Попытка
		Состояние_КонтурEDI("Авторизация на сервере...");
		СоединениеАПИ.ОтправитьДляОбработки(ИмяФайлаЗапроса,"/V1/Authenticate",ИмяФайлаОтвета,Заголовки);
		ТД=Новый ТекстовыйДокумент;
		ТД.Прочитать(ИмяФайлаОтвета,КодировкаТекста.UTF8);
		Токен=ТД.ПолучитьТекст();
		УдалитьФайлы(ИмяФайлаОтвета);
	Исключение
		Сообщить_КонтурEDI(ОписаниеОшибки());
	КонецПопытки;	
	
	УчетнаяЗапись.Токен = Токен;
	
	Возврат Истина; //удалось
	
КонецФункции

//выдает список сообщений для каждого партнера, подключенного в админке к этой организации
//под организацией пока что понимаем учетную запись и предполагаем, что она одна-единственная
Функция API_ПолучитьПараметрыСообщений(УчетнаяЗапись) Экспорт
	
	МассивBoxID = Новый Массив;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись.box_id_inbox) Тогда
		ТаблицаBoxID = API_ПолучитьТаблицуBoxID(УчетнаяЗапись.GLN,"inbox",УчетнаяЗапись);
		МассивBoxID = ТаблицаBoxID.ВыгрузитьКолонку("boxid");
	Иначе
		МассивBoxID.Добавить(УчетнаяЗапись.box_id_inbox);
	КонецЕсли;	
	
	Для Каждого Эл Из МассивBoxID Цикл
		//вернем первый попавшийся пока
		АдресЗапроса = "/V1/Messages/GetBoxDocumentsSettings?boxId="+Эл;
		
		ОтветСтрокой = API_ВыполнитьHTTPЗапрос(АдресЗапроса,"GET",УчетнаяЗапись);
		
		Если ОтветСтрокой = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		ОтветРазобранный = ПрочитатьJSON(ОтветСтрокой);
		
		Возврат ОтветРазобранный.DocumentsSettingsForPartner;
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

//ТипЯщика = "reports" / "inbox" 
Функция API_ПолучитьТаблицуBoxID(GLN,ТипЯщика,УчетнаяЗапись) Экспорт
	
	АдресЗапросаBoxesInfo = "/V1/Boxes/GetBoxesInfo";
	
	ОтветСтрокой = API_ВыполнитьHTTPЗапрос(АдресЗапросаBoxesInfo,"GET",УчетнаяЗапись);
	Если ОтветСтрокой = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	СведенияОЯщиках = ПрочитатьJSON(ОтветСтрокой);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("boxId");
	Таблица.Колонки.Добавить("partyId");
	//Таблица.Колонки.Добавить("isTest");
	//Таблица.Колонки.Добавить("GLN");
	
	МассивPartyID = Новый Массив;
	
	Для Каждого Ящик Из СведенияОЯщиках.Boxes Цикл
		
		Если 
			//ВРЕГ(Ящик.BoxSettings.InboxRelativePath) = ВРЕГ(ТипЯщика) 
			
			Ящик.BoxSettings.TransportType = "Api"
			Или ВРЕГ(Ящик.BoxSettings.InboxRelativePath) = ВРЕГ(ТипЯщика) 
			
			Тогда
			
			Нов = Таблица.Добавить();
			Нов.boxId = Строка(Ящик.id);
			Нов.partyId = Строка(Ящик.partyId);
			//в будущем будем проверять GLN и IsTest
			//кроме того: если у организации установлен основной транспорт API, тогда тег InboxRelativePath отсутствует, и ящиков становится 2 вместо 4.
			//это тоже надо как-то обрабатывать, чтобы не забирать сообщения по 2 раза.
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ТабPartyID = Таблица.Скопировать(,"partyId");
	ТабPartyID.Свернуть("partyId");
	Если ТабPartyID.Количество()<>1 Тогда
		//пока мы не можем получить GLN из Boxes, будем проверять: если пользователю доступно более одного ящика, то не будем грузить ничего
		Возврат Новый ТаблицаЗначений;//вернем пустую таблицу
	КонецЕсли;	
	
	Возврат Таблица;
	
	////теперь проверим, какой из полученных ящиков соответствует нашему GLN
	//Для Каждого Эл Из МассивBoxID Цикл
	//	box_id = Эл;//заглушка
	//	//увы, пока мы нигде не достанем GLN
	//	//поэтому предположим, что одной учетке доступен только одна организация
	//КонецЦикла;	
	//
	////заглушка для отладки
	////Если ВРЕГ(ТипЯщика) = "REPORTS" Тогда
	////	Возврат "";
	////ИначеЕсли ВРЕГ(ТипЯщика) = "INBOX" Тогда
	////	Возврат "";
	////КонецЕсли;	
	//
	//
	//Возврат box_id;
	
КонецФункции

//Эмуляция объекта HTTPЗапрос для 8.1
//Функция вызывается при любом получении/отправке данных с/на сервер
//переподключение вызывается тут же - продумать, как вынести отдельно.
Функция API_ВыполнитьHTTPЗапрос(АдресЗапроса,Метод,УчетнаяЗапись,ТекстФайла="") Экспорт
	
	Если СоединениеАПИ=Неопределено Тогда
		//соединение порвалось, создадим заново
		Попытка
			СоединениеАПИ = ПолучитьСоединениеHTTP(АдресАпи);
		Исключение
			Сообщить_КонтурEDI(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;	
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(УчетнаяЗапись.Токен) Тогда
		
		API_Авторизоваться(УчетнаяЗапись);
		Если не ЗначениеЗаполнено(УчетнаяЗапись.Токен) Тогда
			ВызватьИсключение "Не удалось авторизоваться с учетной записью "+УчетнаяЗапись.Логин;
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;	
	
	ИмяФайлаОтвета=ПолучитьИмяВременногоФайла();
	
	//Состояние_КонтурEDI("Запрос данных...");
	//Если мы нарисовали состояние "Получение сообщений", а потом пришлось авторизоваться, то в строке статуса будет висеть "Авторизация на сервере". Как бы красиво вывести пользователю, что сейчас действительно происходит?
		
	Для НомерПопытки=1 По 2 Цикл//после первой попытки можем переподключиться
		Заголовки =	"Authorization:KonturEdiAuth konturediauth_api_client_id="+КлючРазработчика+" , konturediauth_token="+УчетнаяЗапись.Токен;
		//Заголовки = Заголовки+"1";//эмулируем кривой токен
		
		Попытка//еще проверить на активность соединения
			Если Метод = "GET" Тогда
				СоединениеАПИ.Получить(АдресЗапроса,ИмяФайлаОтвета,Заголовки);
			ИначеЕсли Метод = "POST" Тогда
				ИмяФайлаЗапроса=ПолучитьИмяВременногоФайла();
				ТД=Новый ТекстовыйДокумент;
				ТД.УстановитьТекст(ТекстФайла);
				ТД.Записать(ИмяФайлаЗапроса,КодировкаТекста.UTF8);//чтоб хоть что-то туда записалось
				СоединениеАПИ.ОтправитьДляОбработки(ИмяФайлаЗапроса,АдресЗапроса,ИмяФайлаОтвета,Заголовки);
				УдалитьФайлы(ИмяФайлаЗапроса);
			КонецЕсли;
			
			ТД=Новый ТекстовыйДокумент;
			ТД.Прочитать(ИмяФайлаОтвета,КодировкаТекста.UTF8);
			ОтветСтрокой=ТД.ПолучитьТекст();
			УдалитьФайлы(ИмяФайлаОтвета);
			Прервать;//все хорошо
		Исключение
			//здесь может вернуться 401 (истек срок действия токена), надо заново авторизоваться
			_Ошибка = ОписаниеОшибки();
			Если Найти(_Ошибка,"(401)")<>Неопределено И НомерПопытки = 1 Тогда
				API_Авторизоваться(УчетнаяЗапись);
			Иначе//другая ошибка - ее вернем как есть
				Сообщить_КонтурEDI(_Ошибка);
				Возврат Неопределено;//не очень удачно, но что ж
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;	//Попытки
		
	Возврат ОтветСтрокой;
	
КонецФункции	


//**********************************************************
//#КонецОбласти //Транспорт




// РЕЛИЗЫ

Функция ПолучитьНомерРелиза_КонтурEDI() Экспорт
	
	Возврат ?(КонтурEDI_ВерсияПлатформы="81","3","4")+".02.001.02";
	//так удобнее обновлять 8.1

	//Лог изменений
	
	//4.02.001.02
	//Исправлена ошибка вывода списка документов в режиме внешнего хранилища.
	
	//4.02.001.01
	//Исправлена ошибка конвертации товаров при множественном соответствии.
	//Ускорена работа в режиме внешнего хранилища.
	//Добавлено отображение отправленных, но не подтвержденных PORDERS в новом интерфейсе.
	//Добавлены права на отображение списков в новом интерфейсе.
	//Добавлен автоматический отбор по организации и контрагенту
	//	в форме выбора накладной при привязке к RECADV.
	//Рефакторинг протокола обмена.
	//Удалена форма Модуль_ПротоколОбмена_FTP.
	//Исправлена обработка ORDERS без даты PORDERS.
	//Исправлена ошибка показа связанных сообщений для конфигурации "Бухгалтерия сельскохозяйственного предприятия".
	//Исправлена ошибка соединения с ДД через компоненту не с первого раза (Процедура ИнициализироватьРаботуСДиадоком()) 
	//Добавлен вызов подключаемого модуля в событии ПолучитьНомерНаПечать_КонтурEDI.
	//	Позволяет обрезать/добавить лидирующие нули в номерах документов.
	//Добавлена единица измерения "CT" в список допустимых значений.
	//Добавлена отправка ненулевого количества в теге "onePlaceQuantity".
	//Прекращена поддержка хранения данных в типовых объектах конфигураций
	//Добавлены функции для работы с XDTO (пока не используются).
	//Убрана форма "Модуль_ХранениеДанных" (все перенесено в модуль объекта)
	
	//4.01.055.02
	//Исправление ошибок перехода на оптимизированные объекты хранения данных.
	
	//4.01.055.01
	
	//ВНИМАНИЕ! Это последний релиз с поддержкой типовых объектов.
	//Работа в более свежих релизах возможна либо с добавлением объектов КонтурEDI, либо в режиме внешнего хранилища.
	
	//Исправлена ошибка, когда отмена заказа загружается как дубль при включенной настройке "Загружать сообщения только по настроенным сетям"
	//Исправлена ошибка с собственными точками доставки в режиме внешнего хранилища
	//Доработки для PORDERS в Дикси. Обновлен шаблон ПМ.
	//Оптимизация загрузки RECADV и подготовки исходящих сообщений
	//Частично исправлена инициализация запросов для внешнего хранилища
	//Все вызовы подключаемого модуля заменены на единую точку входа с возможностью расширения в любой момент.
	//Вызовы ПМ перенесены в модуль обработки.
	//Удалена форма "Модуль_ВызовПодключаемогоМодуля".
	//Исправлена конвертация сообщений при переходе на свои объекты со стороны торговой сети.
	//Рефакторинг функций КонвертироватьТовары1СвEDI и КонвертироватьТоварыEDIв1С, поддержка работы в режиме внешнего хранилища на стороне торговой сети.
	//Добавлена поддержка тега <actualDeliveryDateTime></actualDeliveryDateTime> при отправке в INVOIC для сети АТАК
	//Дата редактируется в карточке сообщения в поле "Дата поставки"
	//Протянут тег isTest в исходящих сообщениях. Можно заполнять только через подключаемый модуль так:
	//	Сообщение.Вставить("isTest",1).
	//Вся логика работы с API перенесена в модуль объекта. Форма Модуль_ПротоколОбменаAPI удалена.
	
	
	
	
	//4.01.054.01
	//Рефакторинг и исправления ошибок обработки RECADV
	//Добавлена общая настройка "Invoic из РТУ" - работает только в новом интерфейсе.
	//Проброшены вызовы подключаемого модуля в новом интерфейсе для запросов построения списков. Обновлен шаблон ПМ.
	//В новом интерфейсе добавлен запуск под служебным пользователем автообмена.
	//Исправлена ошибка группового создания заказов (https://yt.skbkontur.ru/issue/E1C_in-26199)
	//В алгоритм поиска накладной при загрузке RECADV добавлен фильтр по контрагентам (чтобы не привязывалось к реализации от другой организации с тем же номером).
	//При загрузке INVOIC на стороне торговой сети при поиске документа "Поступление товаров и услуг" добавлен фильтр по дате входящего документа и контрагенту.
	//Удален модуль Интеграция_Рарус_ТКПТ (вся логика перенесена в модуль Интеграция_УТ_УПП_КА).
	//Обрабатывается дата вывоза для Магнита.
	//Добавлена поддержка прокси при работе через API и для проверки обновлений.
	
	//4.01.053.02
	//Оптимизированы запросы в новом интерфейсе.
	//Теперь можно менять дату поставки в исходящем PORDERS.
	//Перемещены вызовы ПослеОбработкиРасхожденийПриемки в более логичные места.
	//Исправлена ошибка в обработке расхождений приемки.
	//Добавлен шаблон подключаемого модуля для ПослеОбработкиРасхожденийПриемки. 
	//	Включает в себя 2 варианта действий с возвратной тарой при отправке КСФ: 
	//	1) Корректировка исходного документа "Реализация товаров и услуг"
	//	2) Создание нового документа "Возврат товаров от покупателя" на расхождения по возвратной таре.
	
	//4.01.053.01
	//Объединено с 8.1
	//Исправление ошибок.
	//Оптимизированы запросы в новом интерфейсе.
	//Доработки в режиме внешнего хранилища:
	//	Сверка СФ;
	//	Групповая переотправка ALCRPT.
	//Добавлен шаблон подключаемого модуля для врат времени X5
	
	//4.01.052.04
	//Исправление ошибок
	
	//4.01.052.03
	//Исправление ошибок
	
	//4.01.052.02
	//Объединено с 8.1
	
	//4.01.052.01
	//Сообщения ALCRPT после групповой отправки сразу отправляются на сервер.
	
	//Добавлен метод ПослеОбработкиРасхожденияРезультатовПриемки в подключаемом модуле, 
	//	он позволяет обработать расхождения в возвратной таре в том случае, если по расхождениям приемки создаем документ КорректировкаРеализации.
	
	//В счетах-фактурах теперь пишется флаг "Выставлен электронно" и дата выставления при получении статусного о подписании поставщиком в Диадоке.
	
	//Добавлен метод подключаемого модуля "ПослеСравненияТаблицыТоваров"
	
	//Если пришел RECADV с расхождениями, и включен флаг "Отправлять возвратную тару в DESADV", и мы пытаемся из формы расхождений отправить КСФ,
	//	то расхождения по строкам с возвратной тарой обрабатываться не будут.
	//	В будущем будет прокинуто событие в подключаемый модуль для обработки расхождений возвратной тары. Пока эти расхождения просто игнорируются.
	
	//Частичный рефакторинг формы ФормаСервис_ОбработкаРасхожденийПриемки.
	
	//В модуле обработки (в этом самом) в процедуре ИнициализироватьПодключаемыеМодули() добавлена строка 
	//	МодульИнтеграции_Новый.ВариантХраненияДанных = "";	
	//	Если ее раскомментировать, получим модуль, работающий на типовых объектах, даже если уже добавлены наши.
	
	//Добавлена поддержка внешнего хранилища (текущее состояние - бета).
	
	//Добавлен стартовый помощник для добавления объектов / внешнего хранилища.
	
	//При первом запуске на сконвертированной базе или на внешнем хранилище автоматически выдается предложение сконвертировать.
	
	//Добавлены врата времени для X5.
	
	//Исправлены ошибки:
	//	-конвертации в свои объекты.
	//	-статусного сообщения на DESADV
	//	-определения даты поставки в DESADV
	//	-отправки ALCRPT
	//	-функции ПолучитьТоварыРеализации (неправильно считалась сумма НДС)
	//	-прочие ошибки.
	
	//Исправлены контекстные меню и командные панели в настройках.
	
	//Интерфейсное дополнение по групповым действиям.
	
	//4.01.051.01
	//Добавлена возможность открыть отказанные в подписи / запрошенные на уточнение документы в Диадоке.
	//Добавлена настройка партнера, отправляющая статус "Changed" в повторном сообщении DESADV.
	//Добавлена возможность редактировать дату поставки в карточке сообщения ORDRSP и 
	//	алгоритм заполнения даты поставки по умолчанию в сообщениях ORDRSP и DESADV.
	//В обработке расхождений приемки добавлена кнопка "Игнорировать расхождения".
	//Добавлена отправка даты поставки для PORDERS (из поля ДатаОтгрузки ЗаказаПокупателя).
	//Доработана настройка партнера "СверятьВRECADVЦеныИСтавки", описание приложено в самой настроке.
	//Изменена логика обработки дублирующих ORDERS на стороне поставщика.
	//Добавлен функционал для конфигурации "АСТОР: Торговый дом 7".
	//Добавлены групповые действия над заказами и поступлениями товаров (работа модуля в режиме ТС);
	//Добавлены настройки, связанные с созданием документов по обратным заказам (работа модуля в режиме ТС):
	// - "Открывать форму документа перед его созданием";
	// - "Проводить созданные заказы".
	//Добавлена инструкция Разрешенные в запросах функции НайтиИПолучитьНакладную().
	//Исправлено отображение ошибок из статусного сообщения в форме сообщения (разбивка на несколько строк).
	//Добавлена автоматическая пометка ORDRSP для переотправки в случае, если пришла новая версия ORDERS.
	//Добавлен протокол обмена API
	//Добавлена возможность отправки ALCRPT после подписания INVOIC. Переотправка ALCRPT из карточки сообщения. Групповая переотправка ALCRPT.
	//Добавлена возможность подключения ПМ из обработок, входящих в состав конфигурации.
	//В стартовом помощнике добавлена кнопка "Заполнить по данным сервера" : 
	//	подключает недостающие сети и исправляет настройки цепочек в существующих. Работает через API.
	//Изменена маска поля КодТовараПокупателя формы номенклатуры (теперь и цифры и буквы).
	//Исправлено формирование даты поставки при подготовке ответа на заказ и eго конвертации EDI->XML.
	//Добавлен вызов ПМ для изменения механизма сравнении таблиц товаров сообщения RECADV и накладной
	//			   (при приеме сообщения RECADV).
	//Исправления ошибок.
	//Интерфейсные изменения.
	
	
	//4.01.050.05
	//Исправление ошибки подготовки INVOIC, когда один из товаров был полностью возвращен
	//4.01.050.04
	//Исправление ошибки форматирования времени (9:00, когда должно быть 09:00)
	//4.01.050.03
	//Исправление ошибки при заполнении поля "Дата поставки" в исходящих сообщениях.
	//4.01.050.02
	//объединено с 8.1
	
	//4.01.050.01
	//Поправки по переотправке RECADV (сторона ТС).
	//При загрузке входящего сообщения товары больше не ищутся по internalSupplierCode на стороне поставщика.
	//Добавлена возможность переотправить RECADV (сторона ТС), при этом ранее отправленные сообщения RECADV и INVOIC по этой цепочке "архивируются"; при приеме нового сообщения INVOIC в документе СФ перезаполняются номер/дата вх. документа.
	//Добавлена возможность просмотра связанных сообщений/документов на стороне сети.
	//Добавлена возможность открытия карточки сообщения на стороне сети.
	//Дополнена функция получения стстуса документа.
	//Исправления по КСФ, поддержка новых версий компонент Диадока.
	//Исправлена ошибка отображения статуса исходящего ORDERS "Ожидает исправления ошибок" в режиме торговой сети.
	//Исправлена ошибка в функции поиска накладной при нахождении документа и по ORDERS и по DESADV.
	//В списке соответствий номенклатуры в форме торговой сети теперь выводятся также коды и артикулы товаров.
	//В форме соответствий номенклатуры добавлены колонки "Код" и "Артикул".
	//Исправлена ошибка при отправке заказа, созданного в более ранней версии модуля.
	//Добавлен пример подключаемого модуля для ALCRPT в шаблон ПМ.
	//Помеченные на удаление реализации больше не отражаются в списке.
	//При нажатии "Прекратить обработку заказа" во входящем Orders, если уже был создан связанный документ, этот документ будет помечен на удаление.
	//Если сеть посылает internalSupplierCode, то при настройке соответствия для данного товара подставляем его автоматически.
	//При получении ORDERS с номером обратном заказа, в случае, когда исходный заказ не был найден, будет создан новый (для Дикси).
	//При удалении сетей больше не происходит их физического удаления, а ставится пометка на удаление справочника.
	//Исправлена ошибка при удалении подключаемого модуля.
	//В АдресДоставки в точках доставки теперь загружается Индекс+Адрес.
	//При загрузке входящего RECADV проверялись расхождения только по количеству, теперь проверяется расхождение также и по ценам.
	//Перекрашены все формы, удалены лишние.
	//Исправлена ошибка в обработке расхождений, когда товар одной из строк реализаций был полностью возвращен документом "Возврат товаров от покупателя".
	//Исправлена ошибка со стороны ТС при позиционировании курсора после обработки PORDERS.
	//Добавлена проверка на отказ от подписи накладной при открытии карточки сообщения INVOIC.
	//Добавлен экспериментальный интерфейс.
	//Дополнено обновление конфигурации. 

	//4.01.049.01
	//	- Добавлена на форму сообщения закладку Дополнительно поле для отображения номера о.з.
	//	(отображается только при создании ORDERS).
	//  - Исправлено формирование bat-файла-регистратора DialMail.dll (кавычки в пути).
	//	- При приеме RECADV поле сообщения "Дата поставки", если оно не было заполнено в xml-файле,
	//	будет браться из соответствующего сообщения DESADV (для вывода списка СФ).
	//	- Исправлен баг конвертации обратного заказа при отправке ORDERS
	//	- Добавлена к проверке наличия запросов на уточнение СФ проверку на отказ в подписи накладных
	//  - Добавлена возможность принимать PORDERS со стороны сети
	//	- Добавлена цепочка PORDERS-ORDERS-DESADV-RECADV-INVOIC
	//	- Добавлена запись точки доставки в справочник Сообщений для RECADV и INVOIC
	//  - Добавлено заполнение тега signOfAlco в ALCRPT (для медовухи)
	//	- Добавлено заполнение тега contractIdentificator в INVOIC
	//	- Исправлена переотправка PORDERS после статусного сообщения с ошибкой
	//	- Изменения в конфигурации для хранения данных: поле "Партнер" в справочнике "КонтурEDI_Сообщения" теперь имеет тип "СправочникСсылка.КонтурEDI_ДополнительныеСправочники"
	//	- Настроено автоматическое закрытие вспомогательных окон при закрытии главного окна
	//	- Изменен алгоритм расчета цен с/без НДС в ПолучитьТоварыРеализации()
	//	- Флаг "РазрешитьНесколькоРеализацийИзORDERS" в общих настройках переименован в "РазрешитьНесколькоДокументовИзORDERS"
	//	- Разрешено привязывать несколько заказов к одному ORDERS (так же, как это делалось для реализаций, т.е. создаются виртуальные ORDERS и ORDRSP).
	//	- В главном окне из дополнительных отборов убран отбор по партнеру.
	//	- Изменен макет ОбновлениеДляХраненияДанных : в структуре конфигурации реквизит "АдресДоставки" справочника "КонтурEDI_ТочкиДоставки"
	//	обрезан до 255 символов. Это позволит запускать модуль с нетиповым полем "Адрес доставки" в документах без кастомизации.
	//	- Добавлено сообщение о неправильном пароле для FTP
	//	- Исправлена ошибка работы с 2 GLN через DialMail
	//4.01.048.12
	//	Заменено имя функции ПолучитьЗначениеСвойстваОбъекта на ПолучитьЗначениеСвойстваОбъектаEDI
	//  Теперь черновики документов в ДД открываются в браузере пользователя, а не внутри 1С.
	//4.01.048.11
	//поправил переотправку СФ по реестру
	//4.1.048.10
	//поправил функцию НайтиИПолучитьНакладную, т.к. метода ТИПЗНАЧЕНИЯ в запросе нет в 8.1
	//4.1.48.09
	//добавил проверку перед отправкой КСФ на существование дополнительного реквизита счета-фактуры "torg12Id",
	//как индикатора того, что получено и обработано статусное собщение со статусом "SigningBySender"
	//4.1.48.08
	//добавли в сининимы поддержку конфигурации Управление птицефабрикой, редакция 1.3 (на основе УПП)
	//4.01.48.07
	//добавил разлогинивание в ДД перед отправкой КСФ
	//добавил формирование файла регистрации *.bat для компоненты DialMail.dll в каталоге пользователя
	//		  и ярлык для запуска этого bat-файла на рабочий стол (для случаев включенного UAC)
	//4.01.048.06
	//поправил баг запроса поиска накладной (Функция НайтиИПолучитьНакладную(Сообщение))
	//4.01.048.05
	//поправил баг поиска заказа для отправки RECADV в конфигурации Рарус-ТКПТ
	//4.01.048.04
	//добавил возможность в ПМ нарисовать кнопку в списке документов и обработать ее нажатие
	//4.01.048.03
	//поправлен баг, при котором при открытии формы заказа перед созданием не заполняется склад по умолчанию
	//4.01.048.02
	//поправлена обработка регистрации ошибки, возникающей при отправке сообщения во время перезагрузки ftp
	//4.01.048.01
	//- логика для создания нескольких реализаций из одного входящего ORDERS
	//- ускорение построения списков на файловых базах (со стороны поставщика)
	//- изменен алгоритм заполнения GLN отправителя. Если отправляем сообщение со стороны поставщика, то берем GLN юр.лица. Если со стороны сети - то берем основной GLN
	//- Автоматически ставится статус "Принят частично (обработан)" в обработке расхождений приемки, если расхождений уже нет (поправили накладную за пределами модуля)
	//- Возвраты от покупателей в основании счетов-фактур: исправление ошибки при отправке INVOIC
	//- Заполнение поля ДатаЗаказа на закладке Реализаций
	//- Заполнение поля ДатаПоставки на закладке СФ
	//- Добавлена в разрешенных цепочках: ORDERS+RECADV+INVOIC
	//- Исправлены баги в установке соответствий номенклатуры
	//- Добавлены групповые проведения созданных документов
	//- Улучшена совместимость со старыми версиями УПП
	//- Быстрый отбор по 1 торговой сети
	//- Исправлено отображение "Номер серии заказов"
	//- Интерфейсные доработки
	//
	//4.01.048
	//добавил заполнение номера и даты накладной для сообщения ALCRPT (процедура ПодготовитьОтчетОПродажеАлкоголя())
	//4.01.048
	//Исправлена ошибка создания заказа при имеющихся дублях.
	//4.01.048
	//добавлен контроль установки склада при выборочном массовом создании реализаций
	//4.01.048
	//добавил сохранение и вывод НомерСерииЗаказов
	//сделал НастройкиФормы в форме сообщения экспортными..
	//Добавил invoicee o_O его почему-то никогда раньше не отправляли
	//4.01.047.02 поправил отправку INVOIC без НДС	
	//4.01.047.01
	//- групповые действия со всеми сообщениями
	//- работа с обратным заказом
	//- отправка данных по возвратной таре в INVOIC
	//- корректная отправка ORDRSP в Азбуку вкуса
	//- отображение количества документов в списке	
КонецФункции


СИ=Новый СистемнаяИнформация;
Если Лев(СИ.ВерсияПриложения,3)="8.1"  //перед нами 8.1
	Или Лев(СИ.ВерсияПриложения,1)="1" 
	Тогда //в документации путаница, на всякий случай попробуем так и так
	КонтурEDI_ВерсияПлатформы="81";
Иначе
	КонтурEDI_ВерсияПлатформы="82";
	//8.3 используем так же, как 8.2, они совместимы
КонецЕсли;	

ПопытатьсяПодключитьсяКВнешнемуХранилищу();
//на будущее: перенести вызов в инициализацию модулей
