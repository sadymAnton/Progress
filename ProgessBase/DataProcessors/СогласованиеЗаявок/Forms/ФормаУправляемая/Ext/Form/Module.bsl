////////////////////////////////////////////////////////////////////////////////
// ЗАЯВКИ

&НаКлиенте
Функция ПолучитьТекущуюСтрокуСписка()
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено 
		ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции // 

&НаКлиенте
Функция ПолучитьИмяФормыПоВидуОперации(ВидОперации)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	ИмяФормыПоВидуОперации = "ФормаОбъекта";
	#Иначе
	Если ВидОперации = ВидОперацииОплатаПоставщику 
		ИЛИ ВидОперации = ВидОперацииВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = ВидОперацииПрочиеРасчетыСКонтрагентами Тогда
		
		ИмяФормыПоВидуОперации = "Форма.РасчетыСКонтрагентами";
		
	ИначеЕсли ВидОперации = ВидОперацииВыдачаДенежныхСредствПодотчетнику Тогда
		ИмяФормыПоВидуОперации = "Форма.РасчетыСПодотчетнымиЛицами";
		
	ИначеЕсли ВидОперации = ВидОперацииПрочийРасходДенежныхСредств Тогда
		ИмяФормыПоВидуОперации = "Форма.ПрочийРасходДенежныхСредств";
		
	Иначе
		ИмяФормыПоВидуОперации = "ФормаОбъекта";
	КонецЕсли; 
	#КонецЕсли
	
	Возврат "Документ.ЗаявкаНаРасходованиеСредств." + ИмяФормыПоВидуОперации;
	
КонецФункции // 

&НаКлиенте
Процедура ОткрытьФормуВыбранногоДокумента()

	ТекущаяСтрока = ПолучитьТекущуюСтрокуСписка();
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПолноеИмяФормы = ПолучитьИмяФормыПоВидуОперации(ТекущиеДанные.ВидОперации);
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы);
	
КонецПроцедуры //

&НаКлиенте
Процедура ИзменитьСтатусЗаявок(НовоеСостояние)

	Объект.ЗаявкиНаРасходованиеСредств.Очистить();
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Для Каждого ИндексСтроки ИЗ ВыделенныеСтроки Цикл
		Если ТипЗнч(ИндексСтроки) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ИндексСтроки);
		
		СтрокаТабличнойЧасти = Объект.ЗаявкиНаРасходованиеСредств.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
		
		СтрокаТабличнойЧасти.Пометка          = Истина;
		СтрокаТабличнойЧасти.Заявка           = ДанныеСтроки.Ссылка;
		СтрокаТабличнойЧасти.ТекущееСостояние = ДанныеСтроки.Состояние;
	КонецЦикла;
	
	Если Объект.ЗаявкиНаРасходованиеСредств.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'Не выбрано ни одной заявки'"));
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Объект);
	ПараметрыФормы.Вставить("НовоеСостояние", НовоеСостояние);
	ПараметрыФормы.Вставить("Заявки", Объект.ЗаявкиНаРасходованиеСредств);
	
	СвойстваОбъекта = Новый Структура;
	СвойстваОбъекта.Вставить("ТекущийПользователь",  Объект.ТекущийПользователь);
	СвойстваОбъекта.Вставить("ПроизвольныйОтчет",    Объект.ПроизвольныйОтчет);
	СвойстваОбъекта.Вставить("СохраненнаяНастройка", Объект.СохраненнаяНастройка);
	
	ПараметрыФормы.Вставить("СвойстваОбъекта",  СвойстваОбъекта);
	
	ОткрытьФорму("Обработка.СогласованиеЗаявок.Форма.ИзменениеСостоянияЗаявокУправляемая", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбранногоДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФормуВыбранногоДокумента();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаКлиенте
Процедура Отклонить(Команда)
			
	Для Каждого СтрокаТабличнойЧасти Из Элементы.Список.ВыделенныеСтроки Цикл
				
		Попытка	
			
			ЗаявкаОбъект = СтрокаТабличнойЧасти.Ссылка.ПолучитьОбъект();
			ТекстКомментария = "";
			Подсказка        = "Введите причину отклонения для " + Строка(СтрокаТабличнойЧасти.Ссылка);
			Если ВвестиСтроку(ТекстКомментария, Подсказка) Тогда
				
				Если СтрДлина(СокрЛП(ТекстКомментария)) > 0 Тогда
					
					ЗаявкаОбъект.Комментарий = СокрЛП(ТекстКомментария);
					ЗаявкаОбъект.Заблокировать();
					ЗаявкаОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					
				Иначе
					Сообщить("Не указан комментарий, заявка отклонена не будет");
					Возврат;
				КонецЕсли;
				
			Иначе
				Сообщить("Не указан комментарий, заявка отклонена не будет");
				Возврат;
				//Пока СтрДлина(СокрЛП(ТекстКомментария)) < 1 Цикл
				//	ВвестиСтроку(ТекстКомментария, Подсказка);
				//КонецЦикла;
				//ЗаявкаОбъект.Комментарий = СокрЛП(ТекстКомментария);
			КонецЕсли;
			
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось отменить проведение документа &Заявка.
											|Состояние заявки изменено не будет.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "&Заявка", СтрокаТабличнойЧасти.Ссылка);
			Сообщить(ТекстСообщения);
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтаФорма, ТекстПоля,, Отказ);
			
		КонецПопытки;	
			         			
	КонецЦикла;
	// ->
	ИзменитьСтатусЗаявок(СостоянияОбъектовОтклонен);
	
КонецПроцедуры

&НаКлиенте
Процедура Отложить(Команда)
	
	ИзменитьСтатусЗаявок(СостоянияОбъектовОтложен);
	
КонецПроцедуры

&НаКлиенте
Процедура Согласовать(Команда)
	
	ИзменитьСтатусЗаявок(СостоянияОбъектовСогласован);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтчета(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПроизвольныйОтчет", Объект.ПроизвольныйОтчет);
	ПараметрыФормы.Вставить("СохраненнаяНастройка", Объект.СохраненнаяНастройка);
	
	РезультатНастройки = ОткрытьФормуМодально("Обработка.СогласованиеЗаявок.Форма.НастройкаОтчета", ПараметрыФормы);
	Если РезультатНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПроизвольныйОтчет = РезультатНастройки.ПроизвольныйОтчет;
	Объект.СохраненнаяНастройка   = РезультатНастройки.СохраненнаяНастройка;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ФОРМА

&НаСервере
Функция ПолучитьЭтапыСогласованияПользователя()
	
	СписокЭтапов = Новый Массив;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	МаршрутыСогласованияСогласующиеЛица.Ссылка КАК ЭтапСогласования
	               |ИЗ
	               |	Справочник.МаршрутыСогласования.СогласующиеЛица КАК МаршрутыСогласованияСогласующиеЛица
	               |ГДЕ
	               |	МаршрутыСогласованияСогласующиеЛица.Пользователь = &ТекПользователь
	               |";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекПользователь", Объект.ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокЭтапов.Добавить(Выборка.ЭтапСогласования);
	КонецЦикла;
	
	Возврат СписокЭтапов
	
КонецФункции // 

&НаСервере
Функция ПолучитьЭтапыМаршрутовВКоторыхУчаствуетПользователь(ЭтапыСогласования)
	
	СписокЭтапов = Новый Массив;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	МаршрутыСогласования.Ссылка КАК ЭтапСогласования
	               |ИЗ
	               |	Справочник.МаршрутыСогласования КАК МаршрутыСогласования
	               |ГДЕ
	               |	МаршрутыСогласования.Ссылка В ИЕРАРХИИ (&ЭтапыСогласования)";
	 
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекПользователь", Объект.ТекущийПользователь);
	Запрос.УстановитьПараметр("ЭтапыСогласования", ЭтапыСогласования);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокЭтапов.Добавить(Выборка.ЭтапСогласования);
	КонецЦикла;
	
	Возврат СписокЭтапов
	
КонецФункции // 

&НаСервере
Процедура ВосстановитьНастройкиОтборов(ДанныеОтбора)
	
	Список.Отбор.Элементы.Очистить();
	
	Если ДанныеОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТиповыеОтчеты.СкопироватьЭлементы(Список.Отбор, ДанныеОтбора);

КонецПроцедуры

// В процедуре инициализируются значения констант формы
// Константы используются при выполнении модуля формы
//
&НаСервере
Процедура УстановитьЗначенияКонстантФормы()
	
	ВидОперацииОплатаПоставщику                  = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
	ВидОперацииВозвратДенежныхСредствПокупателю  = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю;
	ВидОперацииПрочиеРасчетыСКонтрагентами       = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами;
	ВидОперацииВыдачаДенежныхСредствПодотчетнику = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику;
	ВидОперацииПрочийРасходДенежныхСредств       = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств;
	
	СостоянияОбъектовСогласован = Перечисления.СостоянияОбъектов.Согласован;
	СостоянияОбъектовОтклонен   = Перечисления.СостоянияОбъектов.Отклонен;
	СостоянияОбъектовОтложен    = Перечисления.СостоянияОбъектов.Отложен;
	
	Объект.ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
КонецПроцедуры //

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьЗначенияКонстантФормы();
	
	ЭтапыСогласования = ПолучитьЭтапыСогласованияПользователя();
	СписокЭтапов = ПолучитьЭтапыМаршрутовВКоторыхУчаствуетПользователь(ЭтапыСогласования);
	
	Список.Параметры.УстановитьЗначениеПараметра("ЭтапыСогласованияПользователя", ЭтапыСогласования);
	Список.Параметры.УстановитьЗначениеПараметра("ЭтапыМаршрутовВКоторыхУчаствуетПользователь", СписокЭтапов);
	
	МассивВидыОперацийРасчетыСКонтрагентами = Новый Массив;
	МассивВидыОперацийРасчетыСКонтрагентами.Добавить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю);
	МассивВидыОперацийРасчетыСКонтрагентами.Добавить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику);
	МассивВидыОперацийРасчетыСКонтрагентами.Добавить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами);
	МассивВидыОперацийРасчетыСКонтрагентами.Добавить(Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами);
	Список.Параметры.УстановитьЗначениеПараметра("ВидыОперацийРасчетыСКонтрагентами", МассивВидыОперацийРасчетыСКонтрагентами);
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекПользователь", Объект.ТекущийПользователь);
	
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеСогласован",  Перечисления.СостоянияОбъектов.Согласован);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеУтвержден",   Перечисления.СостоянияОбъектов.Утвержден);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеОтложен",     Перечисления.СостоянияОбъектов.Отложен);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеОтклонен",    Перечисления.СостоянияОбъектов.Отклонен);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеПодготовлен", Перечисления.СостоянияОбъектов.Подготовлен);
	
	// <- Шевченков №51673 20160513
	СписокВыбора = ПолучитьСписокОтбора();
	Если ЗначениеЗаполнено(СписокВыбора) Тогда
		
		Группа0 = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		Группа0.Использование = Истина;
    	Группа0.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора = Группа0.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦентрУчетаЗатрат");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		ЭлементОтбора.ПравоеЗначение = СписокВыбора;
		
		ЭлементОтбора = Группа0.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СарехОрех");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;		
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		ЭлементОтбора.ПравоеЗначение = Перечисления.ПРГ_СарехОрех.Сарех;
		
	КонецЕсли;	
	// ->
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СтатусЗаявокБылИзменен" Тогда
		Элементы.Список.Обновить();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ОтборСписка", Список.Отбор);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ВосстановитьНастройкиОтборов(Настройки.Получить("ОтборСписка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокОтбора()
	
	СписокВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРГ_СлужебныйТаблицаПараметров.Параметр КАК ЦентрУчетаЗатрат
	|ИЗ
	|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|ГДЕ
	|	ПРГ_СлужебныйТаблицаПараметров.Ссылка В ИЕРАРХИИ(&СогласованиеЗаявок)
	|	И ПРГ_СлужебныйТаблицаПараметров.Ссылка.Объект = &ТекущийПользователь
	|	И НЕ ПРГ_СлужебныйТаблицаПараметров.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("СогласованиеЗаявок", Справочники.ПРГ_Служебный.НайтиПоКоду("000000052"));
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		СписокВыбора.Добавить(Выборка.ЦентрУчетаЗатрат);		
	КонецЦикла;
	
	Возврат ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора);
	
КонецФункции

