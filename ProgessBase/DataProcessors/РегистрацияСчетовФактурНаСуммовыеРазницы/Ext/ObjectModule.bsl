Перем мВалютаРегламентированногоУчета Экспорт; 

//Пересчет суммы НДС и валютной суммы при изменении суммы регл.
Процедура ПересчетНДСПоСтроке(ТД) Экспорт
	
	ТД.СуммаНДС = 0;
	
	Если ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		ТД.СуммаНДС = ТД.Сумма * 20 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ТД.СуммаНДС = ТД.Сумма * 10 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ТД.СуммаНДС = ТД.Сумма * 18 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		ТД.СуммаНДС = ТД.Сумма * 20 / 120;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ТД.СуммаНДС = ТД.Сумма * 10 / 110;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ТД.СуммаНДС = ТД.Сумма * 18 / 118;
	КонецЕсли;
	
КонецПроцедуры 	

Процедура ЗаполнитьСтрокиДокумента(ТаблицаРезультатов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОбороты.Покупатель КАК Контрагент,
	|	НДСНачисленныйОбороты.СчетФактура КАК ДокументОснование,
	|	НДСНачисленныйОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСНачисленныйОбороты.СуммаБезНДСПриход + НДСНачисленныйОбороты.НДСПриход КАК Сумма,
	|	НДСНачисленныйОбороты.СчетФактура.Дата КАК Дата,
	|	НДСНачисленныйОбороты.НДСПриход КАК СуммаНДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Обороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		Период,
	|		Организация = &Организация
	|		    И ВидЦенности = &ВидЦенности_СуммыСвязанныеСРасчетамиПоОплате
	|		    И ВидНачисления = &ВидНачисления_НДСНачисленКУплате
	|		    И (НЕ ЕСТЬNULL(СчетФактура.ДокументОснование, НЕОПРЕДЕЛЕНО) ССЫЛКА Документ.ВводНачальныхОстатковНДС)) КАК НДСНачисленныйОбороты
	|ГДЕ
	|	НДСНачисленныйОбороты.СуммаБезНДСПриход + НДСНачисленныйОбороты.НДСПриход <> 0";
	
	Запрос.УстановитьПараметр("ПустаяДата",		'00010101');
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("НачалоПериода",	Новый граница (НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода",	Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидЦенности_СуммыСвязанныеСРасчетамиПоОплате", Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидНачисления_НДСНачисленКУплате", Перечисления.НДСВидНачисления.НДСНачисленКУплате);
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	
	// Определяем счет-фактуру, соответствующий строке (выписанный ранее)
	Если ТаблицаРезультатов.Количество()>0 Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СчетФактураВыданный.Ссылка КАК СчетФактура,
			|	СчетФактураВыданный.Ссылка.СтавкаНДС КАК СтавкаНДС,
			|	СчетФактураВыданный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование В(&ДокументыОснования)
			|	И СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)";
		
		Запрос.УстановитьПараметр("ДокументыОснования", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаРезультатов.ВыгрузитьКолонку("ДокументОснование"), Истина));
		
		СФПоДокументам = Запрос.Выполнить().Выгрузить();
		
		Если СФПоДокументам.Количество()>0 Тогда
			СФПоДокументам.Колонки.Добавить("Использован",Новый ОписаниеТипов("Булево"));
			ТаблицаРезультатов.Колонки.Добавить("СчетФактура");
			СтруктураОтбора = Новый Структура("ДокументОснование, СтавкаНДС");
			СтруктураОтбора.Вставить("Использован", Ложь);
			Для каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				ЗаполнитьЗначенияСвойств(СтруктураОтбора,СтрокаРезультата);
				
				СтрокаСФ = СФПоДокументам.НайтиСтроки(СтруктураОтбора);
				
				Если СтрокаСФ.Количество() > 0 Тогда
					СтрокаРезультата.СчетФактура = СтрокаСФ[0].СчетФактура;
					СтрокаСФ[0].Использован = Истина;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	Список.Загрузить(ТаблицаРезультатов);
	
КонецПроцедуры

Процедура СформироватьСчетаФактурыНаСуммовуюРазницу(НеиспользуемыеСчетаФактуры) Экспорт

	ПустаяСсылкаСФ = Новый(Тип("ДокументСсылка.СчетФактураВыданный"));
	Список.Сортировать("Дата Возр");
	ИспользоватьРанееОбнаруженныеДокументы = (НеиспользуемыеСчетаФактуры.Количество()>0);
	
	////////////////////////////////////////////////////////////////////////////
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	СписокСФ = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("СчетФактура"),Истина);
	Для каждого СчФ Из СписокСФ Цикл
		Если СчФ = ПустаяСсылкаСФ Тогда
			Продолжить;
		Иначе
			СчФ = СчФ.Ссылка.ПолучитьОбъект();
			СчФ.УстановитьПометкуУдаления(Истина);
		КонецЕсли; 
	КонецЦикла; 
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	////////////////////////////////////////////////////////////////////////////
	
	Для каждого СтрокаТП Из Список Цикл
        ОшибкаФормирования = Ложь;
		// Создать Счет-фактуру на суммовую разницу
		Если не СтрокаТП.СчетФактура = ПустаяСсылкаСФ Тогда
			СчФ = СтрокаТП.СчетФактура.ПолучитьОбъект();
		ИначеЕсли ИспользоватьРанееОбнаруженныеДокументы тогда
			СчФ = НеиспользуемыеСчетаФактуры.Найти(Ложь,"Использован");
			Если СчФ = Неопределено Тогда
				ИспользоватьРанееОбнаруженныеДокументы = Ложь;
				СчФ  = Документы.СчетФактураВыданный.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(СчФ,СтрокаТП);
				СчФ.Организация = Организация;
				
				СчФ.УстановитьВремя();
			Иначе
				СчФ.Использован = Истина;
				СчФ = СчФ.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(СчФ,СтрокаТП);
				СчФ.Организация = Организация;
			КонецЕсли; 
		Иначе
			СчФ  = Документы.СчетФактураВыданный.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(СчФ,СтрокаТП);
			СчФ.Организация = Организация;
			СчФ.УстановитьВремя();
		КонецЕсли; 
		
		СчФ.ДокументыОснования.Очистить();
		СчФ.ДокументыОснования.Добавить().ДокументОснование = СтрокаТП.ДокументОснование;
		
		СчФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу;
		СчФ.ПометкаУдаления = Ложь;
		СчФ.Организация = Организация;
		СчФ.ВалютаДокумента = мВалютаРегламентированногоУчета;
		СчФ.СуммаДокумента	= СтрокаТП.Сумма;
		СчФ.ВалютнаяСумма	= СтрокаТП.Сумма;
		СчФ.ДоговорКонтрагента = Неопределено;
		СчФ.Под0			= Ложь;
		СчФ.СформированПриВводеНачальныхОстатковНДС = Ложь;
		
		Если УчетНДС.ПолучитьВерсиюПостановления(СчФ.Дата) = 2 Тогда
			СчФ.КодВидаОперации = "09";
			СчФ.КодСпособаВыставления = 1;
			Счф.СчетФактураНеВыставляется = Истина;
		КонецЕсли;
		
		ТипОснования = ТипЗнч(СчФ.ДокументОснование);

		Если ТипОснования = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
			или ТипОснования = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
			СчФ.НомерПлатежноРасчетногоДокумента = СчФ.ДокументОснование.НомерВходящегоДокумента;
			СчФ.ДатаПлатежноРасчетногоДокумента =  СчФ.ДокументОснование.ДатаВходящегоДокумента;
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			СчФ.НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(СчФ.ДокументОснование);
			СчФ.ДатаПлатежноРасчетногоДокумента =  СчФ.ДокументОснование.Дата;
		Иначе
			СчФ.НомерПлатежноРасчетногоДокумента = "";
			СчФ.ДатаПлатежноРасчетногоДокумента =  Неопределено;
		КонецЕсли;
		
		ДатаНомерДокументовОплаты = СчФ.ДатаНомерДокументовОплаты.Добавить();
		ДатаНомерДокументовОплаты.НомерПлатежноРасчетногоДокумента = СчФ.НомерПлатежноРасчетногоДокумента;
		ДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента = СчФ.ДатаПлатежноРасчетногоДокумента; 		
		
		Попытка
			СчФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Сообщить("Выписан счет-фактура на суммовую разницу № " + СчФ.Номер + " от " + СчФ.Дата);
			СтрокаТП.СФсформирован = истина;
			СтрокаТП.СчетФактура = СчФ.Ссылка;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не выписан счет-фактура на суммовую разницу по строке "+Строка(СтрокаТП.НомерСтроки));
			СтрокаТП.СФсформирован = ложь;
			СтрокаТП.СчетФактура = Неопределено;
		КонецПопытки;
		
	КонецЦикла;

	

КонецПроцедуры

Функция ОпределитьНаличиеНеиспользуемыхСчетовФактурЗаПериод() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СчетФактураВыданный.Организация = &Организация
	|	И (НЕ СчетФактураВыданный.Ссылка В (&СФдляОбновления))
	|	И (НЕ СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Номер";

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("СФдляОбновления", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("СчетФактура"),Истина));

	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;

КонецФункции // ОпределитьНаличиеНеиспользуемыхСчетовФактурЗаПериод()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
