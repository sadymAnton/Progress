&НаСервере
Перем ОбработкаОбъект;

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта(ОбновитьКэш=Ложь)

	Если ОбработкаОбъект=Неопределено или ОбновитьКэш Тогда
		//TODO перекликается с функцией ПоместитьМОВХранилище()
		Если Параметры.КэшироватьМодульОбъекта Тогда
			Если Параметры.АдресХранилища<>"" и Не ОбновитьКэш Тогда
				_Структура = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
				Если ТипЗнч(_Структура) = Тип("Структура") Тогда
					_Структура.Свойство("ОбработкаОбъект",ОбработкаОбъект);
				КонецЕсли;
			КонецЕсли;
			
			Если ОбработкаОбъект=Неопределено или ОбновитьКэш Тогда //после некоторых действий важно обновлять кэш (например изменение ключевых настроек)
				ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
				ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
				Параметры.АдресХранилища = ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект",ОбработкаОбъект),УникальныйИдентификатор);
				ОбработкаОбъект.IDОсновнойФормы = Параметры.IDОсновнойФормы;
			КонецЕсли;
			
		Иначе
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
			ОбработкаОбъект.IDОсновнойФормы = Параметры.IDОсновнойФормы;
		КонецЕсли;

	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Процедура ОбновитьКэшМодуляОбъекта()
	
	Если Параметры.КэшироватьМодульОбъекта Тогда
		Заглушка=МодульОбъекта(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ИмяФормы, ПараметрыФормы = Неопределено , ВладелецФормы  = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь)
	
	Если ПараметрыФормы=Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	Если ВладелецФормы = Неопределено Тогда
		ВладелецФормы =	ЭтаФорма;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресХранилища",							Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("IDОсновнойФормы",							Параметры.IDОсновнойФормы);
	ПараметрыФормы.Вставить("КэшироватьМодульОбъекта",					Параметры.КэшироватьМодульОбъекта);
	
	ПолучаемаяФорма=	ПолучитьФорму(ПутьКФормам+ИмяФормы
										, ПараметрыФормы
										, ВладелецФормы
										, КлючУникальности);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы=	ВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

&НаКлиенте
Процедура СправкаОВерсии(Команда)
	
	ЭтаФорма.ОткрытьСправкуФормы();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеИВозможностьОбновления(Команда) Экспорт
	
	ДополнительнаяОбработкаСсылка=Этаформа.ВладелецФормы.Параметры.ДополнительнаяОбработкаСсылка;
	ПроверитьНаличиеИВозможностьОбновленияСервер(ДополнительнаяОбработкаСсылка);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеИВозможностьОбновленияСервер(ДополнительнаяОбработкаСсылка=неопределено)
	
	мИмяФайлаСписокРелизов=Неопределено;
	//1. Подгрузить с сервера XML со списком релизов
	Если Не МодульОбъекта().ЗагрузитьФайлВерсийВЛокальныйКаталог(мИмяФайлаСписокРелизов) Тогда
		Возврат;
	КонецЕсли;	
	
	//2. Проверить полученный XML, заполнить табличку версий
	ТЗСписокВерсий=РеквизитФормыВЗначение("СписокВерсий");	
	МодульОбъекта().РазобратьФайлВерсий(мИмяФайлаСписокРелизов,ТЗСписокВерсий);
	ЗначениеВРеквизитФормы(ТЗСписокВерсий,"СписокВерсий");
	
	Элементы.ВсеВерсии.Видимость = Истина;//если сюда дошли, значит, файл загружен
	
	//Если НомерАктуальногоРелиза=НомерУстановленногоРелиза Тогда
	//	Предупреждение("Вы используете самый свежий релиз!");
	//КонецЕсли;
	
	//2.5. Предложим пользователю указать обработку в справочнике, если она еще не указана
	Если РежимИспользования="Обработка в справочнике внешних обработок"
		И Автообновление="Не настроено"	
		Тогда
		НастроитьАвтоматическоеОбновлениеСервер();
		ОбновитьФормуСервер();
	КонецЕсли;
	
	//3. Проверить, не является ли наш модуль кастомным
	Если РежимИспользования="Обработка в справочнике внешних обработок"  Тогда
		//И Автообновление="Настроено"	Тогда
		//посчитаем КС того, что было записано в справочник "Внешние обработки"	
		Если ЗначениеЗаполнено(ДополнительнаяОбработкаСсылка) Тогда
			
			СсылкаАвтообновления=ДополнительнаяОбработкаСсылка;	
			Времфайл=ПолучитьИмяВременногоФайла("epf");
			
			УдалосьПолучитьФайлВнешнейОбработки=ложь;
			Попытка
				СсылкаАвтообновления.ХранилищеОбработки.Получить().Записать(Времфайл);
				УдалосьПолучитьФайлВнешнейОбработки=Истина;
			Исключение
			КонецПопытки;
			Попытка
				Если УдалосьПолучитьФайлВнешнейОбработки = ложь Тогда 
					СсылкаАвтообновления.ХранилищеВнешнейОбработки.Получить().Записать(Времфайл);
					УдалосьПолучитьФайлВнешнейОбработки=Истина;
				КонецЕсли;
			Исключение
			КонецПопытки;
			Если УдалосьПолучитьФайлВнешнейОбработки Тогда 
				МД5=МодульОбъекта().ПолучитьКонтрольнуюСуммуФайла(Времфайл);
				УдалитьФайлы(Времфайл);
			Иначе
				МД5="";
			КонецЕсли;
		Иначе
			МД5="";
		КонецЕсли;	
		
	ИначеЕсли РежимИспользования="Файл внешней обработки" Тогда
		//посчитаем КС того, что лежит на диске
		МД5=МодульОбъекта().ПолучитьКонтрольнуюСуммуФайла(МодульОбъекта().ИспользуемоеИмяФайла);
	Иначе 
		//в этом случае непонятно, откуда считать КС
		МД5="";
	КонецЕсли;		
	
	
	Если МД5="" Тогда
		ПолеСообщений="Для текущего релиза невозможно проверить модифицированность файла обработки. 
		|Обновление не гарантирует работоспособность нового модуля.
		|Перед обновлением обязательно сохраните старый модуль!";
		МодульОбъекта().ЗаписатьСостояниеИзмененностиМодуляEDI("Неизвестно");
	ИначеЕсли МД5<>МодульОбъекта().ПолучитьКонтрольнуюСуммуРелизаССервера(НомерУстановленногоРелиза,РеквизитФормыВЗначение("СписокВерсий")) Тогда
		МодульИзменен="Да";
		ПолеСообщений="Контрольные суммы не совпадают, возможно, текущая версия модуля была изменена. Автоматическое обновление невозможно";
		Элементы.МодульИзменен.ЦветФона=WebЦвета.Красный;
		МодульОбъекта().ЗаписатьСостояниеИзмененностиМодуляEDI("Изменен");
	Иначе
		МодульИзменен="Нет";
		Элементы.МодульИзменен.ЦветФона=WebЦвета.Зеленый;
		МодульОбъекта().ЗаписатьСостояниеИзмененностиМодуляEDI("НеИзменен");
	КонецЕсли;	
	
	Если (Автообновление="Настроено" 
		И РежимИспользования="Обработка в справочнике внешних обработок" 
		И МодульИзменен="Нет"
		И ОбработкаОбъект.ПараметрыПользователяEDI.РольПользователяEDI = "ПолныеПрава")
		//будем обновлять только типовые модули и под пользователем с полными правами EDI 
	Тогда
		Элементы.УстановитьВерсию.Доступность=Истина;
		//Элементы.КоманднаяПанельПредыдущиеРелизы.Кнопки.ОткатитьНаВыбранный.Доступность=Истина;
	Иначе
		Элементы.УстановитьВерсию.Доступность=Ложь;
		//Элементы.КоманднаяПанельПредыдущиеРелизы.Кнопки.ОткатитьНаВыбранный.Доступность=Ложь;
	КонецЕсли;
	
	//Функционал зависимости от Сетей на деле оказался очень редко используемым и на УФ его пока на будет
	////4. Пробежимся по списку сетей и выясним, требует ли какая-либо из наших сетей обновления модуля
	////или обновления структуры сетей!!! И как это сделать?
	//РезультатПроверки=ПроверитьНеобходимостьОбновлений(Ложь);
	//
	//ПолеСообщений=РезультатПроверки.Сообщения;
	
	//5. Это для отката на предыдущие версии, при необходимости.
	//ВывестиСтраницуПредыдущихРелизов();//оставим здесь, так быстрее	
	
	//ИмяВремФайлаОписания=ПолучитьИмяВременногоФайла("mxl");
	//ПолучитьСоединениеДляОбновлений().Получить(КаталогОбновленийНаСервере+"verinfo.mxl", ИмяВремФайлаОписания);
	//ЭлементыФормы.ОписаниеАктуальнойВерсии.Прочитать(ИмяВремФайлаОписания);
	//УдалитьФайлы(ИмяВремФайлаОписания);
КонецПроцедуры

&НаКлиенте
Процедура ЗабытьСообщения(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ИсторияТекущейВерсии(Команда)
	
    ПараметрыФормы=	Новый Структура;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_НовоеВРелизеУправляемая"", ПараметрыФормы,,,,РежимОткрытияОкнаФормы.Независимый)");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Сервис_НовоеВРелизеУправляемая",ПараметрыФормы).Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматическоеОбновление(Команда)
	НастроитьАвтоматическоеОбновлениеСервер();
КонецПроцедуры

&НаСервере
Процедура НастроитьАвтоматическоеОбновлениеСервер()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВерсию(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПутьКФормам = МодульОбъекта().Метаданные().ПолноеИмя() + ".Форма.";
	
	ОбновитьФормуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуСервер()
	
	НомерУстановленногоРелиза=МодульОбъекта().ПолучитьНомерРелиза_КонтурEDI();
	
	ЕстьПодключаемыйМодуль=?(МодульОбъекта().ИспользуетсяПодключаемыйМодуль=Истина,"Да","Нет");
	 
	МодульИзменен="???";
	
	//определим, откуда была запущена обработка
	СсылкаАвтообновления=МодульОбъекта().ПолучитьСсылкуВнешнейОбработкиДляАвтоматическогоОбновления();
	
	Попытка
		ИмяФайлаОбработки=МодульОбъекта().ИспользуемоеИмяФайла;
	Исключение
		//Сообщить("Возможно, обработка встроена в конфигурацию.");
	КонецПопытки;	
	
	Если ИмяФайлаОбработки="" Тогда
		//видимо, обработка запущена прямо из конфигурации
		РежимИспользования="Обработка в составе конфигурации";
		Автообновление="Невозможно";
		Элементы.НастроитьАвтоматическоеОбновление.Видимость=Ложь;
		
	ИначеЕсли Найти(ИмяФайлаОбработки,"e1cib\tempstorage")=1 ИЛИ ЗначениеЗаполнено(Параметры.ДополнительнаяОбработкаСсылка) Тогда
		//обработка запущена не из временного каталога
		РежимИспользования="Обработка в справочнике внешних обработок";
		Автообновление="Не настроено";
		
	ИначеЕсли Найти(ИмяФайлаОбработки,КаталогВременныхФайлов())=0 Тогда
		//обработка запущена не из временного каталога
		РежимИспользования="Файл внешней обработки";
		Автообновление="Невозможно";
		Элементы.НастроитьАвтоматическоеОбновление.Видимость=Ложь;
		
	ИначеЕсли Истина Тогда 
		
		//у нас есть ссылка на модуль в справочнике "Внешние обработки", который мы можем обновлять автоматом
		РежимИспользования="Обработка в справочнике внешних обработок";
		Элементы.НастроитьАвтоматическоеОбновление.Видимость=Истина;
		
		Если СсылкаАвтообновления=Неопределено Тогда
			//обработка запущена из временного каталога, и файл уже удален
			Автообновление="Не настроено";
		Иначе
			//обработка запущена из временного каталога, и файл уже удален. Значит, все-таки из справочника "Внешние обработки" запускали
			Автообновление="Настроено";
		КонецЕсли;	
		
	Иначе
		//маловероятный вариант: обработка запущена из временного каталога, но файл еще существует
		РежимИспользования="Не определен";
		Автообновление="Невозможно";
		Элементы.НастроитьАвтоматическоеОбновление.Видимость=Ложь;
		
	КонецЕсли;
	
	////пока на УФ решили не выводить этот список
	////и выведем страницу с предыдущим релизом, если он был сохранен 
	//ВывестиСтраницуПредыдущихРелизов();
	
КонецПроцедуры

//Область Клиентские Копии методов МодуляОбъекта
&НаКлиенте
Процедура ЗагрузитьВерсию(Команда)
	
	Адрес_edi_kontur_ru = "edi.kontur.ru";
	КаталогОбновленийНаСервере="/1c/KonturEDI_82/releases/";
	
	ВыбраннаяСтрока=Элементы.СписокВерсий.ТекущиеДанные;
	Если ВыбраннаяСтрока=Неопределено Тогда Возврат КонецЕсли;
	ДФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДФ.Фильтр="Внешняя обработка (*.epf)|*.epf";
	ДФ.ПолноеИмяФайла=ПолучитьИмяФайлаБезКаталогаКлиент(ВыбраннаяСтрока.ИмяФайла);
	ВремФайл=ПолучитьИмяВременногоФайла("epf");//сначала сохраним во врем.файл, т.к. в папку назначения может не быть доступа на запись
	Если ДФ.Выбрать() Тогда
		Состояние("Загрузка файла с сервера");
		Если Не	ПолучитьФайлHTTPКлиент(
			ПолучитьСоединениеHTTPКлиент(Адрес_edi_kontur_ru),
			КаталогОбновленийНаСервере+СтрЗаменить(ВыбраннаяСтрока.ИмяФайла,"\","/"), 
			ВремФайл) 
		Тогда
			Сообщить("Невозможно получить свежий релиз с сервера. Проверьте подключение к сети.");
		Иначе	
			Попытка//вдруг нет прав на запись
				КопироватьФайл(ВремФайл,ДФ.ПолноеИмяФайла);
				Сообщить("Файл успешно сохранен по адресу: "+ДФ.ПолноеИмяФайла);
			Исключение
				Сообщить("Не удалось сохранить файл по адресу: "+ДФ.ПолноеИмяФайла+"
					|Возможно, каталог не доступен для записи или отсутствует.");
				УдалитьФайлы(ВремФайл);
			КонецПопытки;	
			
		КонецЕсли;
	КонецЕсли;	
	Состояние("");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФайлHTTPКлиент(мСоединение,ИмяФайлаНаСервере,ИмяЛокальногоФайла) Экспорт
	Попытка
		мСоединение.Получить(ИмяФайлаНаСервере, ИмяЛокальногоФайла);
		мСоединение=Неопределено;
		Возврат Истина;
	Исключение
		Ф=новый Файл(ИмяЛокальногоФайла);
		Если Ф.Существует() Тогда
			УдалитьФайлы(ИмяЛокальногоФайла);
		КонецЕсли;	
		мСоединение=Неопределено;
		Возврат Ложь;
	КонецПопытки;
КонецФункции	

&НаКлиенте
Функция ПолучитьСоединениеHTTPКлиент(Адрес) Экспорт
	
	мПараметрыТранспорта = ПолучитьСписокСвойствEDIВызовСервера();
	
	Прокси = Новый ИнтернетПрокси;
	Если мПараметрыТранспорта.ИспользуетсяПрокси Тогда
		Прокси.Пользователь	= мПараметрыТранспорта.ЛогинПрокси;
		Прокси.Пароль		= мПараметрыТранспорта.ПарольПрокси;
		Если ЗначениеЗаполнено(мПараметрыТранспорта.СерверПрокси) Тогда
			Прокси.Установить("http", мПараметрыТранспорта.СерверПрокси, мПараметрыТранспорта.ПортПрокси);
		КонецЕсли;
	КонецЕсли;
	
	СоединениеHTTP = Новый HTTPСоединение(Адрес, , , ,Прокси , Истина);//HTTPS - 443
//	СоединениеHTTP = Новый HTTPСоединение(Адрес, , , ,Прокси , Ложь);//HTTP - 80
	Возврат СоединениеHTTP;
	
КонецФункции	

&НаСервере
Функция ПолучитьСписокСвойствEDIВызовСервера()

	Результат = МодульОбъекта().ПолучитьСписокСвойствEDI(
	"ИспользуетсяПрокси
	|ЛогинПрокси
	|ПарольПрокси
	|СерверПрокси
	|ПортПрокси
	|ТипПрокси
	|Сервер
	|Порт
	|НеЗагружатьСтатусныеСообщения
	|АдресКаталогаОбменаEDI"
	);
	
	Результат.ИспользуетсяПрокси = (Результат.ИспользуетсяПрокси = Истина);
	Результат.Вставить("ПассивныйРежим",			Истина);
	
	Если Не ЗначениеЗаполнено(Результат.Порт) Тогда
		Результат.Порт = 21;
	КонецЕсли;
	
    Возврат Результат;
	
КонецФункции // ПолучитьСписокСвойствEDIВызовСервера()

//убирает из полного пути каталог, оставляет только конечное имя файла
Функция ПолучитьИмяФайлаБезКаталогаКлиент(знач ПолноеИмяФайла)
	//получим имя файла обработки без каталога
	КраткоеИмяФайла=ПолноеИмяФайла;
	ПозСлэша=0;
	Пока истина Цикл
		ПозСлэша=Найти(КраткоеИмяФайла,"\");
		Если ПозСлэша=0 Тогда Прервать; КонецЕсли;
		КраткоеИмяФайла=Сред(КраткоеИмяФайла,ПозСлэша+1);
	КонецЦикла;
	Возврат КраткоеИмяФайла;
	//в конце концов получили имя файла без каталога
КонецФункции	
//КонецОбласть Клиентские Копии методов МодуляОбъекта
