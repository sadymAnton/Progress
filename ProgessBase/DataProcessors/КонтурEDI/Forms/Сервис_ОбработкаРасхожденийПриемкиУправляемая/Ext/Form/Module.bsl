&НаСервере
Перем ОбработкаОбъект;

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		
		Если Параметры.КэшироватьМодульОбъекта Тогда
			Если Параметры.АдресХранилища<>"" Тогда
				_Структура = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
				Если ТипЗнч(_Структура) = Тип("Структура") Тогда
					_Структура.Свойство("ОбработкаОбъект",ОбработкаОбъект);
				КонецЕсли;
			КонецЕсли;
			
			Если ОбработкаОбъект=Неопределено Тогда
				ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
				ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
				Параметры.АдресХранилища = ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект",ОбработкаОбъект),УникальныйИдентификатор);
				ОбработкаОбъект.IDОсновнойФормы = Параметры.IDОсновнойФормы;
			КонецЕсли;
		Иначе
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
			ОбработкаОбъект.IDОсновнойФормы = Параметры.IDОсновнойФормы;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции 


//{#Область Действия_Кнопок

&НаКлиенте
Процедура ПеренестиВДокумент1С(Команда)//для обратных заказов
	
	Если Не ЕстьВсеСоответствия() Тогда
		ТекстПредупреждения="Невозможно выполнить выбранное действие: для некоторых строк не установлены соответствия товаров.";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПеренестиВЗаказСервер() Тогда 
		ЭтаФорма.Закрыть(Неопределено); // неопределено - гарантированно вычеркнем строку в режиме вычеркивания, ведь нам удалось её обработать
	КонецЕсли;
	
КонецПроцедуры

// Обрабатываем расхождения на сервере
&НаСервере
Функция ПеренестиВЗаказСервер()
	
	ТабСоответствий = МодульОбъекта().РазложитьДеревоСоответствийВТаблицу(РеквизитФормыВЗначение("Таб"));
	
	Док = Документ.ПолучитьОбъект();
	
	НачатьТранзакцию();
	ЗаполнитьТоварыДокумента_Реализация_Заказ(Док,ТабСоответствий,
	"Заказ"
	);
	
	//продублировано из обычных форм	
	Попытка
		Док.Записать(?(Док.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
	Исключение
		//что-то пошло не так, и пользователя стоит об этом предупредить!
		_Ошибка = ОписаниеОшибки();
		
		//ОтменитьТранзакцию_КонтурEDI();
		МодульОбъекта().Сообщить_КонтурEDI("Не удалось обработать расхождения по причине:"+ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	МодульОбъекта().УстановитьСтатусДокумента(Документ,"НетРасхождений","ОбратныйЗаказ");
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции // ПеренестиВЗаказСервер()


&НаКлиенте
Процедура ПеренестиВДокументРеализация(Команда)//для обработок recadv
	
	Если Не ЕстьВсеСоответствия() Тогда
		ТекстПредупреждения="Невозможно выполнить выбранное действие: для некоторых строк не установлены соответствия товаров.";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПеренестиВДокументРеализацияСервер() Тогда 
		ЭтаФорма.Закрыть(Параметры.СообщениеСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПеренестиВДокументРеализацияСервер()

	СтандартнаяОбработкаEDI = Истина;
	
	ТабСоответствий = МодульОбъекта().РазложитьДеревоСоответствийВТаблицу(РеквизитФормыВЗначение("Таб"));
	
	МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ОбработатьРасхожденияРезультатовПриемки",
														СтандартнаяОбработкаEDI,
														Новый Структура("Накладная,ТаблицаРасхождений,ВыбранноеДействие,СообщениеСсылка",
																		Документ, ТабСоответствий, "ПеренестиВДокумент", Параметры.СообщениеСсылка));
	
	Если СтандартнаяОбработкаEDI = Истина Тогда
		//Корректировка	
		Док = Документ.ПолучитьОбъект();
		
		ЗаполнитьТоварыДокумента_Реализация_Заказ(Док,ТабСоответствий,
			"Реализация"
			);
		
		//продублировано из обычных форм	
		Попытка
			Док.Записать(?(Док.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		Исключение
			//что-то пошло не так, и пользователя стоит об этом предупредить!
			_Ошибка = ОписаниеОшибки();
			
			//ОтменитьТранзакцию_КонтурEDI();
			МодульОбъекта().Сообщить_КонтурEDI("Не удалось обработать расхождения по причине:"+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		//В УНФ перезаполнение СФ вызывается из формы документа РасходнаяНакладная в обработчике ПослеЗаписи
		Если МодульОбъекта().ИмяКонфигурации1С = "УФ_УНФ" Тогда
			Попытка
				СчетФактура = Неопределено;
				Выполнить("СчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Док.Ссылка);");
				Если ЗначениеЗаполнено(СчетФактура) Тогда
					Выполнить("УправлениеНебольшойФирмойСервер.ИзменитьПодчиненнуюСчетФактуру(Док.Ссылка);");
				КонецЕсли;
			Исключение
				//что-то пошло не так, и пользователя стоит об этом предупредить!
				_Ошибка = ОписаниеОшибки();
				
				//ОтменитьТранзакцию_КонтурEDI();
				МодульОбъекта().Сообщить_КонтурEDI("Не удалось перезаполнить счет-фактуру по причине:"+ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		//Попытка//старый вариант
		//	Док.Записать(РежимЗаписиДокумента.Проведение);
		//Исключение
		//	Док.Записать();
		//КонецПопытки;
			
		//Если ИмяКонфигурации1С = "БП" И МодульОбъекта().ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя",,Истина) = "схРеализацияСельхозПродукции" Тогда
		//	Док.Ссылка.ПолучитьФорму().ОткрытьМодально();
		//Иначе
		//	Форма = Док.ПолучитьФорму();
		//	Форма.ОткрытьМодально();
		//КонецЕсли;
		
		//перенесли в документ
		МодульОбъекта().УстановитьСтатусДокумента(Документ,"НакладнаяПринятЧастичноОбработан","Приемка",Параметры.СообщениеСсылка);
		
		//проверим, был ли уже отправлен INVIOC
		СчетФактура = МодульОбъекта().ПолучитьСчетФактуруНакладной(Документ);
		СообщениеINVOIC = МодульОбъекта().НайтиСообщениеДокумента(СчетФактура,"INVOIC");
		
		Если СообщениеINVOIC<>Неопределено Тогда
			//Будем просить переотправить INVOIC в любом случае
			//+надо указать в ошибке причину, почему мы это требуем
			
			МодульОбъекта().УстановитьСтатусСообщения(СообщениеINVOIC,	, "INVOIC", "ИсходящийОжидаетИсправленияОшибок");
			СообщениеОбъект = МодульОбъекта().ПолучитьОбъектСообщения(СообщениеINVOIC);
			СообщениеОбъект.ОписаниеОшибки = "!!!Внимание, была произведена обработка расхождений RECADV после отправки INVOIC! Требуется переотправить INVOIC";
			МодульОбъекта().СохранитьОбъектСообщения(СообщениеОбъект);
			
		КонецЕсли;
		
		//Можно выполнить какие-то еще действия. Например, обработать возвратную тару, если выбрали действие "Создать корректировку реализации".
		//Документ - сама Реализация. 
		МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ПослеОбработкиРасхожденияРезультатовПриемки",
															СтандартнаяОбработкаEDI,
															Новый Структура("Накладная,ВыбранноеДействие,ТаблицаРасхождений,СообщениеСсылка",
																			Документ, "Реализация", ТабСоответствий, Параметры.СообщениеСсылка));
	КонецЕсли; //СтандартнаяОбработкаEDI = Истина 
	
    Возврат Истина;
	
КонецФункции // ПеренестиВДокументРеализацияСервер()

&НаКлиенте
Процедура СоздатьВозвратОтПокупателя(Команда)
	
	СсылкаДокумента=СоздатьВозвратНаСервере();
	Если СсылкаДокумента<>Неопределено Тогда 
		ИмяТипаДокумента=ОпределитьИмяТипаДокумента(СсылкаДокумента);
		
		П = Новый Структура("Ключ", СсылкаДокумента);
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ОткрытьФорму(ИмяТипаДокумента+"".ФормаОбъекта"", П, ЭтаФорма, , , ,  Новый ОписаниеОповещения(""ОбработчикЗакрытияСозднногоДокумента"",ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)")
		Иначе                                                                              
			Форма = ПолучитьФорму(ИмяТипаДокумента+".ФормаОбъекта", П);       // например Документ.РеализацияТоваровУслуг
			Форма.ОткрытьМодально();
			ОбработчикЗакрытияСозднногоДокумента();
		КонецЕсли;
	Иначе
		Сообщить("Не удалось создать документ возврата");
		Сообщить(СписокОшибок);
	КонецЕсли;
	
	//ПараметрыФормы = Новый Структура("Ключ",СсылкаДокумента);
	//ПолучитьФорму("Документ.ВозвратТоваровОтПокупателя.ФормаОбъекта",ПараметрыФормы).Открыть();
	//ЭтаФорма.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытияСозднногоДокумента(Параметр=Неопределено, ДопПараметр=Неопределено) Экспорт
	
	ЭтаФорма.Закрыть();

КонецПроцедуры // ОбработчикЗакрытияСозднногоДокумента()


&НаСервереБезКонтекста
Функция ОпределитьИмяТипаДокумента(Ссылка)

Возврат "Документ."+Ссылка.Метаданные().Имя;	

КонецФункции // ОпределитьИмяТипаОбъекта(ТекСтрока.Документ)()

//TODO Протестировать на БП
&НаСервере
Функция СоздатьВозвратНаСервере()
	
	СтандартнаяОбработкаEDI = Истина;
	
	ТабСоответствий = РазложитьДеревоСоответствийВТаблицу(РеквизитФормыВЗначение("Таб"));
	
	РезультатПМ = МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ОбработатьРасхожденияРезультатовПриемки",
																		СтандартнаяОбработкаEDI,
																		Новый Структура("Накладная,ТаблицаРасхождений,ВыбранноеДействие,СообщениеСсылка", 
																						Документ, ТабСоответствий, "СоздатьВозврат", Параметры.СообщениеСсылка));

	Если СтандартнаяОбработкаEDI = Истина Тогда
		
		ДокументВозврата=Документы[МодульОбъекта().ПолучитьТипЗначенияОбъекта("ВходящийВозврат",,Истина)].СоздатьДокумент();
		ДокументВозврата.Заполнить(Документ);
		
		ЗаполнитьТоварыДокумента_Возврат(ДокументВозврата,ТабСоответствий,
		"Возврат"
		);
		
		Если МодульОбъекта().ИмяКонфигурации1С = "УФ_УТ" Тогда 
			Если ДокументВозврата.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаТаблицы = ДокументВозврата.РасшифровкаПлатежа[0];
				СтрокаТаблицы.Сумма = ДокументВозврата.Товары.Итог("СуммаСНДС");
				СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокОшибок="" Тогда
			
			ДокументВозврата.Дата = ТекущаяДата();
			ДокументВозврата.Записать();
			
			МодульОбъекта().УстановитьСтатусДокумента(Документ,"НакладнаяПринятЧастичноОбработан","Приемка",Параметры.СообщениеСсылка);
			
			СтандартнаяОбработкаEDI=Истина;
			МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ПослеОбработкиРасхожденияРезультатовПриемки",
																СтандартнаяОбработкаEDI,
																Новый Структура("Накладная,ВыбранноеДействие,ТаблицаРасхождений,СообщениеСсылка",
																				ДокументВозврата.Ссылка, "Возврат", ТабСоответствий, Параметры.СообщениеСсылка));
			
			Возврат ДокументВозврата.Ссылка;
		Иначе
			Возврат Неопределено; 
		КонецЕсли;
		
	Иначе
		Возврат РезультатПМ;
	КонецЕсли; // СтандартнаяОбработкаEDI = Истина
		
		//... и в прошлоеее закрооою двеееерь.....
//	ИначеЕсли МодульОбъекта().ИмяКонфигурации1С = "УФ_БП" Тогда
//		ДокументВозврата=Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
//		ДокументВозврата.Заполнить(Документ);
//		ДокументВозврата.Дата = ТекущаяДата();
//		
//		//////////////////////////////////////////////////////////////////
//		//////////////////////////////////////////////////////////////////
//		//////////////////////////////////////////////////////////////////
//		СписокУдаляемыхСтрок = Новый СписокЗначений;
//		
//		ИспользуютсяХарактеристики = Ложь;
//		
////		ТабРасхождений = РеквизитФормыВЗначение("Таб");

//		ТабРасхождений = МодульОбъекта().РазложитьДеревоСоответствийВТаблицу(РеквизитФормыВЗначение("Таб"));

//		
//		//Если МодульОбъекта().ИмяКонфигурации1С = "УНФ" Тогда 
//		//	ТабличнаяЧастьДокумента=Док.Запасы;
//		//иначе
//		ТабличнаяЧастьДокумента=ДокументВозврата.Товары;
//		//КонецЕсли;
//		
//		
//		Для каждого Стр ИЗ ТабличнаяЧастьДокумента Цикл
//			
//			//Если ИспользуютсяХарактеристики И ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
//			//	НайденнаяСтрока = Неопределено;
//			//	Для каждого СтрРасхождений Из Таб Цикл
//			//		Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
//			//			Если Стр.ХарактеристикаНоменклатуры = СтрРасхождений.ХарактеристикаНоменклатуры Тогда
//			//				НайденнаяСтрока = СтрРасхождений;
//			//			КонецЕсли;
//			//		КонецЕсли;
//			//	КонецЦикла;
//			//Иначе						
//			НайденнаяСтрока = ТабРасхождений.Найти(Стр.Номенклатура,"Номенклатура");
//			//КонецЕсли;	
//			
//			Если НЕ НайденнаяСтрока = Неопределено Тогда
//				Если НайденнаяСтрока.КоличествоПринято = Стр.Количество Тогда
//					СписокУдаляемыхСтрок.Добавить(Стр);
//				Иначе
//					Если НЕ НайденнаяСтрока.КоличествоПринято = Стр.Количество Тогда
//						//т.е. приняли меньше!   на эту величину:
//						Стр.Количество = Стр.Количество - НайденнаяСтрока.КоличествоПринято;
//						//её и ставим в возврат
//						Если МодульОбъекта().ИмяКонфигурации1С = "УФ_УТ" Тогда
//							
//							Стр.КоличествоУпаковок = Стр.Количество - НайденнаяСтрока.КоличествоПринято;
//							Выполнить("Ценообразование.ПересчитатьСуммыВСтроке(Стр,ложь,ложь,ложь,Док.ЦенаВключаетНДС)");
//							
//						ИначеЕсли МодульОбъекта().ИмяКонфигурации1С = "УФ_УНФ" Тогда
//							// Сумма.
//							Стр.Сумма = Стр.Количество * Стр.Цена;
//							
//							// Скидки.
//							Если Стр.ПроцентСкидкиНаценки = 100 Тогда
//								Стр.Сумма = 0;
//							ИначеЕсли Стр.ПроцентСкидкиНаценки <> 0 И Стр.Количество <> 0 Тогда
//								Стр.Сумма = Стр.Сумма * (1 - Стр.ПроцентСкидкиНаценки / 100);
//							КонецЕсли;
//							
//							// Сумма НДС.
//							СтавкаНДС=18;
//							Выполнить("СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Стр.СтавкаНДС)");
//							
//							Стр.СуммаНДС = ?(ДокументВозврата.СуммаВключаетНДС, 
//							Стр.Сумма - (Стр.Сумма) / ((СтавкаНДС + 100) / 100),
//							Стр.Сумма * СтавкаНДС / 100);
//							
//							// Всего.
//							Стр.Всего = Стр.Сумма + ?(ДокументВозврата.СуммаВключаетНДС, 0, Стр.СуммаНДС);
//						Иначе   //БП
//							ЗначениеПустогоКоличества = 0;
//							Выполнить("ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(Стр, ЗначениеПустогоКоличества)");
//							Выполнить("ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Стр, ДокументВозврата.СуммаВключаетНДС)");
//						КонецЕсли;
//						
//						//Если МодульИнтеграции_Новый.ИмяКонфигурации1С = "УТ_10_2" Тогда
//						//	
//						//	Выполнить("РассчитатьКоличествоМестТабЧасти(Стр, Док);");
//						//	Выполнить("РассчитатьСуммуТабЧасти(Стр, Док);");
//						//	Выполнить("РассчитатьСуммуНДСТабЧасти(Стр, Док);");
//						//	
//						//Иначе
//						//	
//						//	Если НЕ МодульИнтеграции_Новый.ИмяКонфигурации1С = "БП"  Тогда
//						//		
//						//		Выполнить("ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(Стр, Док);");
//						//		
//						//	КонецЕсли;
//						//	
//						//	Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Стр, Док);");
//						//	Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Стр, Док);");
//						//	
//						//КонецЕсли;
//						
//					КонецЕсли;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		
//		Для Каждого Стр Из СписокУдаляемыхСтрок Цикл
//			ТабличнаяЧастьДокумента.Удалить(Стр.Значение);
//		КонецЦикла;
//		//////////////////////////////////////////////////////////////////
//		//////////////////////////////////////////////////////////////////
//		//////////////////////////////////////////////////////////////////
//		
//		
//		ДокументВозврата.Записать();
//		//ДокументКорректировки.Записать(РежимЗаписиДокумента.Проведение);
//		
//		МодульОбъекта().УстановитьСтатусДокумента(Документ,"Принят частично (обработан)","Приемка",Параметры.СообщениеСсылка);
//		
//		Возврат ДокументВозврата.Ссылка;
//		
//	КонецЕсли;
	
КонецФункции

&НаСервере
Функция РазложитьДеревоСоответствийВТаблицу(ДеревоСоответствий) Экспорт
	
	ТабСоответствий = Новый ТаблицаЗначений;
	МодульОбъекта().ДобавитьКолонкиВТаблицуЗначений(ТабСоответствий,
			"Номенклатура
			|ЕдиницаИзмерения
			|ХарактеристикаНоменклатуры
			|СерияНоменклатуры
			|КоличествоВНакладной
			|КоличествоПринято
			|ЦенаБезНДСВНакладной
			|ЦенаСНДСВНакладной
			|СуммаБезНДСВНакладной
			|СуммаСНДСВНакладной
			|ЦенаБезНДСПринято
			|ЦенаСНДСПринято
			|СуммаБезНДСПринято
			|СуммаСНДСПринято"
		);
	
	Для Каждого СтрОсн Из ДеревоСоответствий.Строки Цикл
		
		Если СтрОсн.ГруппаНоменклатур Тогда
			Для Каждого Стр Из СтрОсн.Строки Цикл
				НоваяСтрока = ТабСоответствий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			КонецЦикла;
		Иначе
			НоваяСтрока = ТабСоответствий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрОсн);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабСоответствий;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыДокумента_Возврат(Док,ТабСоответствий,ВариантЗаполнения)
	
	СуммаВключаетНДС = МодульОбъекта().ПолучитьРеквизитДокументаДляСообщения(Док,"СуммаВключаетНДС");
	
	МассивНеобработанныхСтрокКорректировки = Новый Массив;
	
	//пройдемся по строкам
	Для Каждого СтрокаСоответствий Из ТабСоответствий Цикл
		
		//поищем строку с таким товаром в документе
		НайденнаяСтрока = МодульОбъекта().НайтиСоответствиеСтрокиВДокументе(СтрокаСоответствий,Док);
		
		//нашли или не нашли строку в документе. Обработаем это
		
		Если НайденнаяСтрока <> Неопределено Тогда
			//нашли такую строку в документе "Возврат товаров", дальше решим, что с ней делать
			//На рефакторинг: похоже здесь у нас жесткое допущение, что такая строка будет только одна, или что порядок строк в документе соответствует порядку строк в таблице соответствий
			
			Если СтрокаСоответствий.КоличествоПринято = СтрокаСоответствий.КоличествоВНакладной Тогда
				//если отгуженное и принятое количества совпадают, то нам эта строка не нужна в документе.
				ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(НайденнаяСтрока)).Имя;
				Док[ИмяТабличнойЧасти].Удалить(НайденнаяСтрока);
				
			ИначеЕсли СтрокаСоответствий.КоличествоПринято < СтрокаСоответствий.КоличествоВНакладной Тогда
				//Приняли меньше, чем отгружали. Оставим строку в документе возврата
				
				ТребуетсяПересчетПоТабличнойЧасти = Истина;
				Если МодульОбъекта().ИмяКонфигурации1С="УФ_УТ" Тогда 
					НайденнаяСтрока.КоличествоУпаковок = СтрокаСоответствий.КоличествоВНакладной - СтрокаСоответствий.КоличествоПринято;
					Если Не ЗначениеЗаполнено(НайденнаяСтрока.Упаковка) Тогда 
						НайденнаяСтрока.Количество			= НайденнаяСтрока.КоличествоУпаковок;//базовая единица
					иначе
						Если МодульОбъекта().ОпределитьРелизКонфигурации() = "11.2" Тогда
							СтруктураДействий=Новый Структура;
							СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
							Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока,СтруктураДействий,Неопределено);");
						Иначе
							НайденнаяСтрока.Количество			= НайденнаяСтрока.Количество*НайденнаяСтрока.Упаковка.Коэффициент;//в упаковках
						КонецЕсли;
					КонецЕсли;
				Иначе
					НайденнаяСтрока.Количество = СтрокаСоответствий.КоличествоВНакладной - СтрокаСоответствий.КоличествоПринято;
				КонецЕсли;
				НайденнаяСтрока.Цена = ?(СуммаВключаетНДС,СтрокаСоответствий.ЦенаСНДСВНакладной,СтрокаСоответствий.ЦенаБезНДСВНакладной);
				//здесь нам не нужны цены из RECADV - будем подставлять цены из исходной Реализации, что выглядит более логичным.
				//СтруктураПересчетаСуммы = новый структура;
				//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
				//СтруктураДействий = Новый Структура;
				//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				//СтруктураДействий.Вставить("ПересчитатьСумму");
				//СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				//
				//ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока, СтруктураДействий, Неопределено);

				МодульОбъекта().ПересчитатьСтрокуДокумента(НайденнаяСтрока,Док);
				
				
			ИначеЕсли СтрокаСоответствий.КоличествоПринято > СтрокаСоответствий.КоличествоВНакладной Тогда
				//это третий возможный случай, и тут мы не можем создать возврат товаров, поскольку в возврате появятся отрицательные количества
				СписокОшибок=?(СписокОшибок="","",СписокОшибок+Символы.ПС)+
				"Товар """+СтрокаСоответствий.Номенклатура+""" принят сетью в количестве "+СтрокаСоответствий.КоличествоПринято+", а отгружался в количестве "+СтрокаСоответствий.КоличествоВНакладной+".";
				
			КонецЕсли;
			
			//Дикий случай! Данного товара нет в реализации, но есть в приемке. 	Мы не сможем в возврат это закинуть! 
		ИначеЕсли СтрокаСоответствий.КоличествоПринято<>0 Тогда
			
			//СтрокаСообщения=ТоварыСообщения.Получить(ТабСоответствий.Индекс(СтрокаСоответствий));
			
			СписокОшибок=?(СписокОшибок="","",СписокОшибок+Символы.ПС)+
			"Товар """+СтрокаСоответствий.Номенклатура+""" принят сетью, но не отгружался.";
			
		КонецЕсли;
			
	КонецЦикла;//по строкам
	
КонецПроцедуры	

&НаКлиенте
Процедура СоздатьКорректировку(Команда)
	СсылкаДокумента=СоздатьКорректировкуСервер();
	
	Если СсылкаДокумента<>Неопределено Тогда 
		ИмяТипаДокумента=ОпределитьИмяТипаДокумента(СсылкаДокумента);
		
		П = Новый Структура("Ключ", СсылкаДокумента);
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ОткрытьФорму(ИмяТипаДокумента+"".ФормаОбъекта"", П, ЭтаФорма, , , ,  Новый ОписаниеОповещения(""ОбработчикЗакрытияСозднногоДокумента"",ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)")
		Иначе                                                                              
			Форма = ПолучитьФорму(ИмяТипаДокумента+".ФормаОбъекта", П);       // например Документ.РеализацияТоваровУслуг
			Форма.ОткрытьМодально();
			ОбработчикЗакрытияСозднногоДокумента();
		КонецЕсли;
	Иначе
		Сообщить("Не удалось создать корректировку");
		Сообщить(СписокОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьКорректировкуСервер()
	
	СтандартнаяОбработкаEDI = Истина;
	
	_Таб = МодульОбъекта().РазложитьДеревоСоответствийВТаблицу(РеквизитФормыВЗначение("Таб"));
	
	РезультатПМ = МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ОбработатьРасхожденияРезультатовПриемки",
																		СтандартнаяОбработкаEDI,
																		Новый Структура("Накладная,ТаблицаРасхождений,ВыбранноеДействие,СообщениеСсылка", 
																						Документ, _Таб, "СоздатьКорректировку", Параметры.СообщениеСсылка));
	
	Если СтандартнаяОбработкаEDI = Истина Тогда
		Если МодульОбъекта().ИмяКонфигурации1С = "УФ_УТ" Тогда 
			
			ДокументКорректировки=Документы.КорректировкаРеализации.СоздатьДокумент();
			//ДокументВозврата=Документы[МодульОбъекта().ПолучитьТипЗначенияОбъекта("Входящий???КОРРЕКТИРОВКА?",,Истина)].СоздатьДокумент();   //нет в макете с типами
			
			ДокументКорректировки.Заполнить(Документ);
			ДокументКорректировки.Дата = ТекущаяДата();
			
			//исправим ТЧ товары
			ТЧДокумента=ДокументКорректировки.Товары;
			Для Каждого СтрокаRECADV из _Таб Цикл
				Если СтрокаRECADV.КоличествоВНакладной<>СтрокаRECADV.КоличествоПринято Тогда
					НайденнаяСтрока=ТЧДокумента.Найти(СтрокаRECADV.Номенклатура,"Номенклатура");
					Если НайденнаяСтрока<>Неопределено Тогда 
						НайденнаяСтрока.КоличествоУпаковок=СтрокаRECADV.КоличествоПринято;
						Если Не ЗначениеЗаполнено(НайденнаяСтрока.Упаковка) Тогда 
							НайденнаяСтрока.Количество			= НайденнаяСтрока.КоличествоУпаковок;//базовая единица
						иначе
							//НайденнаяСтрока.Количество			= НайденнаяСтрока.КоличествоУпаковок*НайденнаяСтрока.Упаковка.Коэффициент;//в упаковках
							Если МодульОбъекта().ОпределитьРелизКонфигурации() = "11.2" Тогда
								СтруктураДействий=Новый Структура;
								СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
								Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока,СтруктураДействий,Неопределено);");
							Иначе
								НайденнаяСтрока.Количество			= НайденнаяСтрока.КоличествоУпаковок*НайденнаяСтрока.Упаковка.Коэффициент;//в упаковках
							КонецЕсли;
						КонецЕсли;
						//НайденнаяСтрока.Количество=СтрокаRECADV.КоличествоПринято;
						СтруктураПересчетов= Новый Структура;
						СтруктураПересчетов.Вставить("ПересчитатьСумму","КоличествоУпаковок");
						СтруктураПересчетов.Вставить("ПересчитатьСуммуНДС",Новый Структура ("ЦенаВключаетНДС",Документ.ЦенаВключаетНДС));
						СтруктураПересчетов.Вставить("ПересчитатьСуммуСНДС",Новый Структура ("ЦенаВключаетНДС",Документ.ЦенаВключаетНДС));
						
						Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока,СтруктураПересчетов,Неопределено)");
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ДокументКорректировки.Записать();
			
			Если МодульОбъекта().РелизКонфигурации1С = "11.1" Тогда 
				ДокументКорректировки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон;
				Документы.КорректировкаРеализации.ЗаполнитьРасхождения(ДокументКорректировки);
				Попытка
					ДокументКорректировки.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров;
				Исключение
					ДокументКорректировки.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж;
				КонецПопытки;
			иначе
				ДокументКорректировки.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж;
			КонецЕсли;
			
			ДокументКорректировки.АналитикаРасходов = ДокументКорректировки.Партнер;
			Для каждого Строкарасхождений из ДокументКорректировки.Расхождения цикл
				Строкарасхождений.ВариантОтражения= Перечисления.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы;
			КонецЦикла;
			
			Если МодульОбъекта().РелизКонфигурации1С = "11.1" Тогда
				Попытка
					ДокументКорректировки.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ДокументКорректировки.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
			иначе
				ДокументКорректировки.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			МодульОбъекта().УстановитьСтатусДокумента(Документ,"Принят частично (обработан)","Приемка",Параметры.СообщениеСсылка);
			
			Возврат ДокументКорректировки.Ссылка;
			
		ИначеЕсли МодульОбъекта().ИмяКонфигурации1С = "УФ_БП" Тогда
			ДокументКорректировки=Документы.КорректировкаРеализации.СоздатьДокумент();
			ДокументКорректировки.Заполнить(Документ);
			ДокументКорректировки.Дата = ТекущаяДата();
			
			ТЧДокумента=ДокументКорректировки.Товары;
			Для Каждого СтрокаRECADV из _Таб Цикл
				Если СтрокаRECADV.КоличествоВНакладной<>СтрокаRECADV.КоличествоПринято Тогда
					НайденнаяСтрока=ТЧДокумента.Найти(СтрокаRECADV.Номенклатура,"Номенклатура");
					Если НайденнаяСтрока<>Неопределено Тогда 
						НайденнаяСтрока.Количество=СтрокаRECADV.КоличествоПринято;
						
						НайденнаяСтрока.Сумма = НайденнаяСтрока.Цена * ?(НайденнаяСтрока.Количество =0, 0, НайденнаяСтрока.Количество);
						Выполнить("НайденнаяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(НайденнаяСтрока.Сумма, ДокументКорректировки.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НайденнаяСтрока.СтавкаНДС))");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ДокументКорректировки.Записать();
			ДокументКорректировки.Записать(РежимЗаписиДокумента.Проведение);
			
			МодульОбъекта().УстановитьСтатусДокумента(Документ,"Принят частично (обработан)","Приемка",Параметры.СообщениеСсылка);
			
			Возврат ДокументКорректировки.Ссылка;
			
		КонецЕсли; //УНФ не предусмотрено
		МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ПослеОбработкиРасхожденияРезультатовПриемки",,
															Новый Структура("Накладная,ВыбранноеДействие,ТаблицаРасхождений,СообщениеСсылка", 
																			ДокументКорректировки, "КорректировкаРеализации", _Таб, Параметры.СообщениеСсылка));
	Иначе
		Возврат РезультатПМ;
	КонецЕсли; // СтандартнаяОбработкаEDI = Истина
	//TODO продумать действия, если пользователь отказался от проведения Корректировки
	
КонецФункции

&НаКлиенте
Процедура ИгнорироватьРасхождения(Команда)
	ИгнорироватьРасхожденияСервер();
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура ИгнорироватьРасхожденияСервер()
	
	МодульОбъекта().УстановитьСтатусДокумента(Документ,"Принят частично (обработан)","Приемка",Параметры.СообщениеСсылка);
	МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ПослеОбработкиРасхожденияРезультатовПриемки",,
														Новый Структура("Накладная,ВыбранноеДействие,ТаблицаРасхождений,СообщениеСсылка",
																		Документ, "Игнорировать", Неопределено, Параметры.СообщениеСсылка));
	
КонецПроцедуры

//}#КонецОбласти Действия_Кнопок

//{#Область Интерфейсные_Обработчики
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.МодальностьЗапрещена=МодульОбъекта().МодальностьЗапрещена();
	
	Документ=Параметры.Документ;
	
	Если Параметры.ИсточникРасхождений = "ОбратныйЗаказ" Тогда
		
		Элементы.Документ.Заголовок = "Заказ:";
		ЭтаФорма.Заголовок = "Обработка уточнений по обратному заказу";
		
		Элементы.ТабСуммаБезНДСВНакладной.Видимость = Ложь;
		Элементы.ТабСуммаБезНДСПринято.Видимость = Ложь;
		Элементы.ТабСуммаСНДСВНакладной.Видимость = Ложь;
		Элементы.ТабСуммаСНДСПринято.Видимость = Ложь;
		
		Элементы.ТабКоличествоВНакладной.Заголовок = "Количество в заказе";
		Элементы.ТабКоличествоПринято.Заголовок = "Количество уточненное";
		
		Элементы.ТабЦенаБезНДСВНакладной.Заголовок = "Цена без НДС в заказе";
		Элементы.ТабЦенаСНДСВНакладной.Заголовок = "Цена с НДС в заказе";
		Элементы.ТабЦенаБезНДСПринято.Заголовок = "Цена без НДС уточненная";
		Элементы.ТабЦенаСНДСПринято.Заголовок = "Цена с НДС уточненная";
		
		Элементы.ПодменюОбработатьРезультатПриемки.Видимость=Ложь;//Обрабо ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОбработатьРезультатПриемки);
		
	Иначе
		
		Элементы.ФормаПеренестиВДокумент1С.Видимость=Ложь;
		
		//Если НЕ (ИмяКонфигурации1С="УПП" или ИмяКонфигурации1С="КА" или ИмяКонфигурации1С="УТ_10_3") Тогда
		//	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОбработатьРезультатПриемки.Кнопки.ОсновныеДействияФормыКорректировка.Доступность = ложь;
		//КонецЕсли;
		
		Если Метаданные.Документы.Найти("КорректировкаРеализации")=Неопределено Тогда
			//отключим для конфигураций, где нет такого документа
			Элементы.ФормаСоздатьКорректировку.Видимость = Ложь;
		КонецЕсли;	
		
		//определим, надо ли будет переносить в реализацию цены, или обойдемся количеством
		_Сообщение = МодульОбъекта().ПрочитатьСообщение(,Документ,"RECADV","Входящее");
		
		СверятьВRECADVЦеныИСтавки = (МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(_Сообщение.Отправитель1С, "СверятьВRECADVЦеныИСтавки") = Истина);
		ТекстПодсказки = "Перенести расхождения в накладную"+?(СверятьВRECADVЦеныИСтавки = Истина, " (будут перенесены количества и цены)"," (будут перенесены только количества)");
		          
		_Кнопка = Элементы.ПодменюОбработатьРезультатПриемки;
		_Кнопка.Подсказка = ТекстПодсказки;
		
		Если Не СверятьВRECADVЦеныИСтавки Тогда
			ИменаНевидимыхКолонок = МодульОбъекта().EDI_РазложитьСтрокуВМассивСлов(
				"ЦенаБезНДСВНакладной,ЦенаСНДСВНакладной,СуммаБезНДСВНакладной,СуммаСНДСВНакладной,"+
				"ЦенаБезНДСПринято,ЦенаСНДСПринято,СуммаБезНДСПринято,СуммаСНДСПринято",
				",");
			Для Каждого ИмяКолонки Из ИменаНевидимыхКолонок Цикл
				Элементы["Таб"+ИмяКолонки].Видимость = Ложь;
				Элементы["Таб"+ИмяКолонки].Видимость = Ложь;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МодульОбъекта().ИмяКонфигурации1С = "БП" или МодульОбъекта().ИмяКонфигурации1С = "УФ_БП" Тогда
		Элементы.ТабХарактеристикаНоменклатуры.Видимость = Ложь;
		Элементы.ТабСерияНоменклатуры.Видимость = Ложь;
		Если МодульОбъекта().ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя",,Истина) = "схРеализацияСельхозПродукции" Тогда
			Элементы.ФормаСоздатьВозвратОтПокупателя.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Успешно = Истина;
	ДеревоРасхождений = РеквизитФормыВЗначение("Таб",Тип("ДеревоЗначений"));
	МодульОбъекта().ЗаполнитьДеревоРасхожденийДокумента(ДеревоРасхождений,Документ,Параметры.ИсточникРасхождений,Успешно,,Параметры.СообщениеСсылка);
	
	Если Не Успешно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	МодульОбъекта().ПриОткрытииФормыОбработкиРасхождений(Параметры.СообщениеСсылка, ЭтаФорма);
	ЗначениеВРеквизитФормы(ДеревоРасхождений,"Таб");
	//ЗаполнитьТаблицу();//дерево :)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ЗначениеЗаполнено(Параметры.ПараметрыАвтотестирования) Тогда
		ПодключитьОбработчикОжидания("ЗапуститьАвтотесты",0.1,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабПередУдалением(Элемент, Отказ)
	Отказ=истина;
КонецПроцедуры

&НаКлиенте
Процедура ТабПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=истина;
КонецПроцедуры

&НаКлиенте
Процедура ТабКоличествоПринятоПриИзменении(Элемент)
	ПересчитатьСтрокуПринято(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТабЦенаБезНДСПринятоПриИзменении(Элемент)
	ПересчитатьСтрокуПринято(Элемент.Родитель);
КонецПроцедуры

&НаКлиенте
Процедура ТабЦенаСНДСПринятоПриИзменении(Элемент)
	ПересчитатьСтрокуПринято(Элемент.Родитель);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтрокуПринято(Элемент)

	ТекСтрокаДанныеФормы = Элемент.Родитель.ТекущиеДанные;
	ТекСтрокаДанныеФормы.СуммаБезНДСПринято = ТекСтрокаДанныеФормы.КоличествоПринято * ТекСтрокаДанныеФормы.ЦенаБезНДСПринято;
	ТекСтрокаДанныеФормы.СуммаСНДСПринято = ТекСтрокаДанныеФормы.КоличествоПринято * ТекСтрокаДанныеФормы.ЦенаСНДСПринято;

КонецПроцедуры // ПересчитатьСтрокуПринято()

//}#КонецОбласти Интерфейсные_Обработчики


//{#Область Сервисные_Функции

// СЕРВИСНЫЕ ФУНКЦИИ

&НаКлиенте
Функция ЕстьВсеСоответствия()
	//если у нас нет хотя бы одного соответствия товаров, то мы не сможем корректно заполнить реализацию, возврат или КСФ
	ФлагОтмены = Ложь;
	Для Каждого Стр1 Из Таб.ПолучитьЭлементы() Цикл
		Если Стр1.ГруппаНоменклатур Тогда
		Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
			Если ТипЗнч(Стр2.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") 
				Или Не ЗначениеЗаполнено(Стр2.Номенклатура) Тогда
				ФлагОтмены = Истина;
				Сообщить("Не назначено соответствие для наименования сети: "+Стр2.Номенклатура);
			КонецЕсли;	
		КонецЦикла;	
		
		ИначеЕсли ТипЗнч(Стр1.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") 
			Или Не ЗначениеЗаполнено(Стр1.Номенклатура) Тогда
			ФлагОтмены = Истина;
			Сообщить("Не назначено соответствие для наименования сети: "+Стр1.Номенклатура);
		КонецЕсли;	
	КонецЦикла;	
	Возврат Не ФлагОтмены;
КонецФункции	

&НаСервере
Процедура ЗаполнитьТоварыДокумента_Реализация_Заказ(Док,ТабСоответствий,ВариантЗаполнения)
	Сообщение =  МодульОбъекта().ПрочитатьСообщение(Параметры.СообщениеСсылка);
	Если ЗначениеЗаполнено(Сообщение) И Сообщение.Свойство("Партнер") И ЗначениеЗаполнено(Сообщение.Партнер) Тогда 
		ОтправлятьВозвратнуюТаруВDESADV	= (МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Партнер,"ОтправлятьВозвратнуюТаруВDESADV")=Истина);
	Иначе
		ОтправлятьВозвратнуюТаруВDESADV	= ложь;
	КонецЕсли;
	
	СуммаВключаетНДС = МодульОбъекта().ПолучитьРеквизитДокументаДляСообщения(Док,"СуммаВключаетНДС");
	
	МассивНеобработанныхСтрокКорректировки = Новый Массив;
	
	//пройдемся по строкам
	Для Каждого СтрокаСоответствий Из ТабСоответствий Цикл
		
		//поищем строку с таким товаром в документе
		НайденнаяСтрока = МодульОбъекта().НайтиСоответствиеСтрокиВДокументе(СтрокаСоответствий,Док);
		
		//нашли или не нашли строку в документе. Обработаем это
		Если ОтправлятьВозвратнуюТаруВDESADV=истина И НайденнаяСтрока=Неопределено Тогда
			//поищем в возвратной таре
			//она присутствует во всех типовых конфигурациях, но в ней нет ни серий, ни характеристик, ни НДС
			
			ПриоритетПоиска = 0;
			Для Каждого СтрРасхождений Из Док.ВозвратнаяТара Цикл
				Если СтрокаСоответствий.Номенклатура = СтрРасхождений.Номенклатура Тогда
					ТекПриоритет = 1;
					
					Если ТекПриоритет>ПриоритетПоиска Тогда
						НайденнаяСтрока = СтрРасхождений;
						ПриоритетПоиска = ТекПриоритет;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НайденнаяСтрока <> Неопределено Тогда
			//Если переносим расхождения в исходный документ, то строки с нулевым принятым количеством удаляем Из документа.
			Если (СтрокаСоответствий.КоличествоПринято = 0) Тогда
				ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(НайденнаяСтрока)).Имя;
				Док[ИмяТабличнойЧасти].Удалить(НайденнаяСтрока);
			Иначе //КоличествоПринято<>0, нам надо изменить Количество в строке документа, а также при необходимости перезаполнить/пересчитать цены
				ТребуетсяПересчетПоТабличнойЧасти = Ложь;
				
				Если СтрокаСоответствий.КоличествоПринято <> НайденнаяСтрока.Количество 
					ИЛИ (МодульОбъекта().ИмяКонфигурации1С="УФ_УТ" И СтрокаСоответствий.КоличествоПринято<>НайденнаяСтрока.КоличествоУпаковок) 
					Тогда
					НайденнаяСтрока.Количество = СтрокаСоответствий.КоличествоПринято;
					Если МодульОбъекта().ИмяКонфигурации1С = "УФ_УТ" Тогда
						НайденнаяСтрока.КоличествоУпаковок = СтрокаСоответствий.КоличествоПринято;
					КонецЕсли;
					ТребуетсяПересчетПоТабличнойЧасти = Истина;
				КонецЕсли;
				
				Если СверятьВRECADVЦеныИСтавки или ВариантЗаполнения="Заказ" Тогда
					
					//проверяем на нулевые значения цену и сумму Из RECADV, которыми при несовпадении с ценами по РТУ хотим перезаполнять текущую позицию
					//будем полагать, что Если цена или сумма нулевая, то ее не отправила сеть, следовательно не будем перезаполнять цену и сумму по текущей позиции
					
					_Цена = ?(СуммаВключаетНДС,СтрокаСоответствий.ЦенаСНДСПринято,СтрокаСоответствий.ЦенаБезНДСПринято);
					_Сумма = ?(СуммаВключаетНДС,СтрокаСоответствий.СуммаСНДСПринято,СтрокаСоответствий.СуммаБезНДСПринято);
					
					Если _Цена <> НайденнаяСтрока.Цена и _Цена <> 0 Тогда
						НайденнаяСтрока.Цена = _Цена;
						ТребуетсяПересчетПоТабличнойЧасти = Истина;
					КонецЕсли;
					
				КонецЕсли;	
				
				Если ТребуетсяПересчетПоТабличнойЧасти Тогда	
					МодульОбъекта().ПересчитатьСтрокуДокумента(НайденнаяСтрока,Док);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаСоответствий.КоличествоПринято<>0 Тогда
			//Не нашли такую строку в документе Реализация, придется ее добавить
			
			Если МодульОбъекта().Имяконфигурации1С = "УФ_УНФ" Тогда
				НоваяСтрока = Док.Запасы.Добавить();
			иначе
				НоваяСтрока = Док.Товары.Добавить();
			КонецЕсли;
			
			НоваяСтрока.Номенклатура		= СтрокаСоответствий.Номенклатура;
			
			Если МодульОбъекта().Имяконфигурации1С = "УФ_УТ" Тогда
				НоваяСтрока.Упаковка	= СтрокаСоответствий.ЕдиницаИзмерения;
			иначе
				НоваяСтрока.ЕдиницаИзмерения	= СтрокаСоответствий.ЕдиницаИзмерения;
			КонецЕсли;
			
			Если МодульОбъекта().Имяконфигурации1С <> "УФ_БП" Тогда
				//Если ЗначениеЗаполнено(СтрокаСоответствий.ЕдиницаИзмерения) и Лев(МодульОбъекта().Имяконфигурации1С,3) <> "УФ_" Тогда 
				//	НоваяСтрока.Коэффициент			= СтрокаСоответствий.ЕдиницаИзмерения.Коэффициент;
				//КонецЕсли;
				НоваяСтрока.Характеристика	= СтрокаСоответствий.ХарактеристикаНоменклатуры;
			КонецЕсли;
			
			НоваяСтрока.КоличествоУпаковок			= СтрокаСоответствий.КоличествоПринято;
			
			НоваяСтрока.Цена	= ?(СуммаВключаетНДС, СтрокаСоответствий.ЦенаСНДСПринято, СтрокаСоответствий.ЦенаБезНДСПринято );
			НоваяСтрока.Сумма	= ?(СуммаВключаетНДС, СтрокаСоответствий.СуммаСНДСПринято, СтрокаСоответствий.СуммаБезНДСПринято );  //а сумма НДС???
			Если МодульОбъекта().Имяконфигурации1С = "УФ_УТ" Тогда
				НоваяСтрока.Склад = Док.Склад;
			КонецЕсли;
			
			
		КонецЕсли;
	КонецЦикла;//по строкам
	
КонецПроцедуры	

&НаКлиенте
Функция Автотесты_ПолучитьКодСледующегоШага()
	
	Код = Неопределено;
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);

	Для Каждого Стр Из СтруктураПараметров.ВыполняемыйКод Цикл
		
		Если Стр.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.ФормаОбработки = "ФормаОбработкиРасхождений" Тогда
			Код = Стр.ВыполняемыйКод;
			Прервать;
		Иначе
			Прервать;//есть невыполненный код в другой форме
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Код;
	
КонецФункции

&НаКлиенте
Процедура Автотесты_ПометитьПоследнийШагКакВыполненный()
	
	Код = Неопределено;
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
	Для Каждого Стр Из СтруктураПараметров.ВыполняемыйКод Цикл
		
		Если Стр.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.ФормаОбработки = "ФормаОбработкиРасхождений" Тогда
			Стр.Выполнено = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СтруктураПараметров,Параметры.ПараметрыАвтотестирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьАвтотесты()
	
	Пока Истина Цикл
		
		Код = Автотесты_ПолучитьКодСледующегоШага();
		
		Если Код = Неопределено Тогда
			
			Прервать;
			
		Иначе
			
			Выполнить(Код);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	КомментарийПоПозиции = ТекСтрока.Комментарий;
	
КонецПроцедуры

//}#КонецОбласти Сервисные_Функции
