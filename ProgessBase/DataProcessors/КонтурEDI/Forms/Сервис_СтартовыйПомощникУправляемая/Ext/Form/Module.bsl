&НаСервере
Перем ОбработкаОбъект;

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции 

//придумать что делать с ПолучитьКартинкуEDI

&НаСервере
Процедура ОбработатьРежимОткрытияФормы()
	
	Если Параметры.ОткрытаКакДобавлениеПартнера = Истина Тогда 
		УстановитьСтраницу("СтраницаСведенияОПартнерах");
		Элементы.КнопкаНазад.Видимость=Ложь;
		Элементы.ГруппаСведенияОПартнерахАвтонастройкаТС.Видимость = Ложь;
		Элементы.ГруппаЭтапыНастройки.Видимость = Ложь;
		ЭтаФорма.Заголовок = "Контур.EDI. Добавление торговых сетей";
	Иначе
		УстановитьСтраницу("СтраницаНастройкаПодключения");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.МодальностьЗапрещена = МодульОбъекта().МодальностьЗапрещена();
	ПутьКФормам = МодульОбъекта().Метаданные().ПолноеИмя() + ".Форма.";
	
	Сервер				= МодульОбъекта().ПолучитьКонстантуEDI("Сервер");
	Порт				= МодульОбъекта().ПолучитьКонстантуEDI("Порт");
	
	//может быть пригодятся
	ЛогинПрокси			= МодульОбъекта().ПолучитьКонстантуEDI("ЛогинПрокси");
	ПарольПрокси		= МодульОбъекта().ПолучитьКонстантуEDI("ПарольПрокси");
	ИспользуетсяПрокси	= МодульОбъекта().ПолучитьКонстантуEDI("ИспользуетсяПрокси");
	
	GLNЮрФизЛица		= МодульОбъекта().ПолучитьКонстантуEDI("GLN_Основной");
	
	ТекЮрЛицо 			= Неопределено;
	СписокЮрЛиц 		= МодульОбъекта().ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСвои");
	Если СписокЮрЛиц.Количество()=1 Тогда
		ТекЮрЛицо = СписокЮрЛиц[0];
		ЮрФизЛицоСвое = СписокЮрЛиц[0].ЮрФизЛицо;
	ИначеЕсли СписокЮрЛиц.Количество()>1 Тогда
		Элементы.ЮрФизЛицоСвое.Доступность = Ложь;
		Элементы.GLNЮрФизЛица.Доступность = Ложь;
		ЮрФизЛицоСвое = СписокЮрЛиц[0].ЮрФизЛицо; 
	КонецЕсли;	
	
	УстановитьТипЗначенияПоля("ЮрФизЛицоСвое","ЮрФизЛицоСвое");
	УстановитьТипЗначенияКолонки(Элементы.СписокЮрФизЛицТорговыхСетей.ПодчиненныеЭлементы.Контрагент, "ЮрФизЛицоСтороннее");
	
	УчетнаяЗаписьПоУмолчанию = МодульОбъекта().ПолучитьКонстантуEDI("УчетнаяЗаписьПоУмолчанию");
	Если ЗначениеЗаполнено(УчетнаяЗаписьПоУмолчанию) Тогда
		УчетнаяЗаписьЭлемент = МодульОбъекта().ПолучитьЭлементСправочника("УчетныеЗаписи", УчетнаяЗаписьПоУмолчанию);
		Логин	= УчетнаяЗаписьЭлемент.Логин;
		Пароль	= УчетнаяЗаписьЭлемент.Пароль;
	КонецЕсли;
	
	GLN				= МодульОбъекта().ПолучитьКонстантуEDI("GLN_Основной");
	
	МыПоставщик		= МодульОбъекта().ПолучитьКонстантуEDI("МыПоставщик");
	МыТорговаяСеть	= МодульОбъекта().ПолучитьКонстантуEDI("МыТорговаяСеть");
	
	ПротоколОбмена_КонтурEDI = МодульОбъекта().ПолучитьКонстантуEDI("ПротоколОбмена_КонтурEDI");
	Если Не ЗначениеЗаполнено(ПротоколОбмена_КонтурEDI) Тогда
		ПротоколОбмена_КонтурEDI = "API";
	КонецЕсли;	
	
	ОбработатьРежимОткрытияФормы(); //может открываться только для добавления Партнеров

	УправлениеДоступностьюПолейНастройкиПрокси();
	
	ОбновитьДеревоЮрФизЛицТорговыхСетей();
	
	//Заполним начальные настройки цепочек документов.
	//По умолчанию выберем первые в списках - они самые полные.
	Если Не ЗначениеЗаполнено(МодульОбъекта().ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик")) Тогда
		СписокШаблонов = МодульОбъекта().ПолучитьСписокДоступныхШаблоновЦепочки("Поставщик");
		Если СписокШаблонов.Количество()>0 Тогда
			МодульОбъекта().УстановитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик",	СписокШаблонов[0].Представление);
		КонецЕсли;	
	КонецЕсли;	
	
	//пока покупателя на УФ нет
	//Если Не ЗначениеЗаполнено(МодульОбъекта().ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Покупатель")) Тогда
	//	СписокШаблонов = МодульОбъекта().ПолучитьСписокДоступныхШаблоновЦепочки("Покупатель");
	//	Если СписокШаблонов.Количество()>0 Тогда
	//		МодульОбъекта().УстановитьКонстантуEDI("ШаблонЦепочкиДокументов_Покупатель",	СписокШаблонов[0].Представление);
	//	КонецЕсли;	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначенияПоля(ИмяПоля,Тип1С)
	
	ТипПоля = МодульОбъекта().ПолучитьТипЗначенияОбъекта(Тип1С);
	
	Если ТипПоля = Неопределено Тогда
		
		Сообщить("Не задан тип объекта 1С для поля с типом "+Тип1С);
		
	Иначе	
		
		Элементы[ИмяПоля].ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма[ИмяПоля]) Тогда
			
			ЭтаФорма[ИмяПоля] = МодульОбъекта().ПолучитьПустуюСсылкуОбъекта(Тип1С);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначенияКолонки(Колонка,Тип1С)
	
	ТипПоля = МодульОбъекта().ПолучитьТипЗначенияОбъекта(Тип1С);
	
	Если ТипПоля = Неопределено Тогда
		
		Сообщить("Не задан тип объекта 1С для поля с типом "+Тип1С);
		
	Иначе	
		
		Колонка.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницу(ИмяСтраницы)
	
	ИмяТекущейСтраницы = ИмяСтраницы;
	
	Элементы.ГруппаЭтапыСтартовогоПомощника.ТекущаяСтраница = Элементы.ГруппаЭтапыСтартовогоПомощника.ПодчиненныеЭлементы[ИмяСтраницы];
		
	Если ИмяСтраницы = "СтраницаНастройкаПодключения" Тогда
		Элементы.КнопкаНазад.Видимость = Ложь;
	ИначеЕсли ИмяСтраницы = "СтраницаДанныеОКомпании" Тогда                      
		Элементы.КнопкаНазад.Видимость = Истина;
		Элементы.КнопкаДалее.Заголовок = "Далее";
		//Элементы.КнопкаДалее.Картинка = МодульОбъекта().ПолучитьКартинкуEDI("ЭлементФормы","КартинкаПраво");
	Иначе
		Элементы.КнопкаДалее.Заголовок = "Готово";
		//Элементы.КнопкаДалее.Картинка = МодульОбъекта().ПолучитьКартинкуEDI("ЭлементФормы","КартинкаГалочка");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюПолейНастройкиПрокси()
	
	Возврат;
	//включить обратно тогда, когда будем массово переходить на API
	
	//ЭлементыФормы.ЛогинПрокси.Доступность	= ИспользуетсяПрокси;
	//ЭлементыФормы.ПарольПрокси.Доступность	= ИспользуетсяПрокси;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоЮрФизЛицТорговыхСетей()
	
	СписокЮрФизЛицТорговыхСетей.ПолучитьЭлементы().Очистить();
	
	ТорговыеСети = МодульОбъекта().ПолучитьСписокТорговыхСетей();
	
		КоличествоНайденных = 0;
		
		Для каждого Стр ИЗ ТорговыеСети Цикл
			
			//Если Стр.Пометка И НЕ Стр.Подключена Тогда
				
				СтрокаТорговойСети = СписокЮрФизЛицТорговыхСетей.ПолучитьЭлементы().Добавить();
				СтрокаТорговойСети.Наименование = Стр.Наименование;
				СтрокаТорговойСети.КодСети = Стр.Код;
				
				Если Стр.Подключена Тогда
					СтрокаТорговойСети.Подключена 	= Стр.Подключена;
					СтрокаТорговойСети.Пометка 		= Истина;
				КонецЕсли;
				
				//ДанныеПоТС = ПолучитьСтруктуруДанныхТорговойСети(Стр.Код, Ложь);
				//
				//Если НЕ ДанныеПоТС = Неопределено Тогда
				//	
				//	ЮрФизЛицаТС = ДанныеПоТС.ЮрФизЛица;
				//	
				//	Для каждого СтрЮФ Из ЮрФизЛицаТС Цикл
				//		
				//		СтрокаКонтрагента = СтрокаТорговойСети.Строки.Добавить();
				//		СтрокаКонтрагента.Наименование = СтрЮФ.Наименование;
				//		СтрокаКонтрагента.ИНН = СтрЮФ.ИНН;
				//		СтрокаКонтрагента.КПП = СтрЮФ.КПП;
				//		СтрокаКонтрагента.GLN = СтрЮФ.GLN;
				//		
				//		СтрокаКонтрагента.Контрагент = НайтиЮрФизЛицоСтороннееПоРеквизитам(СтрЮФ.ИНН,СтрЮФ.КПП);
				//		
				//		Если ЗначениеЗаполнено(СтрокаКонтрагента.Контрагент) Тогда
				//			КоличествоНайденных=КоличествоНайденных+1;
				//		КонецЕсли;
				//		
				//	КонецЦикла;
				//	
				//КонецЕсли;
				
			//КонецЕсли;
			
		КонецЦикла;
	
КонецПроцедуры
          
&НаСервере
Функция АвторизоватьсяВAPIСервер(Логин, Пароль)
	
	Возврат МодульОбъекта().АвторизоватьсяВAPI(Логин, Пароль);
	
КонецФункции

&НаСервере
Функция ДалееСервер()
	
	Страницы 		= Элементы.ГруппаЭтапыСтартовогоПомощника.ПодчиненныеЭлементы;
	ТекущаяСтраница = Элементы.ГруппаЭтапыСтартовогоПомощника.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Страницы.СтраницаНастройкаПодключения Тогда
		
		РезультатАвторизации = АвторизоватьсяВAPIСервер(Логин, Пароль);
		Если РезультатАвторизации<>"ок" Тогда
			СП = Новый СообщениеПользователю;
			Если РезультатАвторизации="пароль" Тогда
				СП.Текст = "Проверьте логин и пароль"; 
			Иначе 
				СП.Текст = "Не удалось авторизоваться на сервере"; 
			КонецЕсли;
			СП.Сообщить();
			Возврат "ошибка подключения";
		КонецЕсли;
		
		УчетнаяЗаписьПоУмолчанию = МодульОбъекта().ПолучитьКонстантуEDI("УчетнаяЗаписьПоУмолчанию");
		УстановитьУчетнуюЗаписьПоУмолчанию = Ложь;
		
		Если УчетнаяЗаписьПоУмолчанию  = Неопределено Тогда
			УстановитьУчетнуюЗаписьПоУмолчанию = Истина;
		КонецЕсли;
		
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("Логин",	Логин);
		СтруктураПолей.Вставить("Пароль",	Пароль);
		
		МодульОбъекта().СохранитьЭлементСправочника("УчетныеЗаписи", УчетнаяЗаписьПоУмолчанию, СтруктураПолей);
		
		Если УстановитьУчетнуюЗаписьПоУмолчанию Тогда
			
			УчетнаяЗапись = УчетнаяЗаписьПоУмолчанию;
			
			// + Внешнее хранилище. kns 2014.09.25
			//Если ТипЗнч(УчетнаяЗапись) = Тип("Строка") Тогда
			//	УчетнаяЗапись = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(УчетнаяЗаписьПоУмолчанию);
			//КонецЕсли;
			// - Внешнее хранилище. kns 2014.09.25
			
			МодульОбъекта().УстановитьКонстантуEDI("УчетнаяЗаписьПоУмолчанию", УчетнаяЗапись);
			ПараметрыПользователяEDI = МодульОбъекта().ПолучитьПараметрыТекущегоПользователяEDI();	
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(МодульОбъекта().ПротоколОбмена_КонтурEDI) Тогда
			МодульОбъекта().УстановитьКонстантуEDI("ПротоколОбмена_КонтурEDI","API");//пока принудительно
			МодульОбъекта().ПротоколОбмена_КонтурEDI = "API";
		КонецЕсли;
		
		Если МодульОбъекта().ПротоколОбмена_КонтурEDI = "API" Тогда
			//создадим необходимые справочники в системе: Организации (API), ТранспортныеЯщики
			Если Не МодульОбъекта().ОбновитьСписокОрганизацийПоУчетнымЗаписям() Тогда
				СП = Новый СообщениеПользователю;
				СП.Текст = "Не удалось заполнить настройки обмена через API"; 
				СП.Сообщить();
				Возврат "ошибка подключения";
			КонецЕсли;
		КонецЕсли;
		
		Если Элементы.ЮрФизЛицоСвое.Доступность Тогда
			ПолучитьНастройкиССервера();
			ПроверитьСведенияОКомпании();
		КонецЕсли;
		
		Если Параметры.ОткрытаКакДобавлениеПартнера = Истина Тогда 
			УстановитьСтраницу("СтраницаСведенияОПартнерах");
		Иначе
			УстановитьСтраницу("СтраницаДанныеОКомпании");
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Страницы.СтраницаДанныеОКомпании Тогда
		
		Если ПроверитьСведенияОКомпании() Тогда
			
			Если Элементы.ЮрФизЛицоСвое.Доступность Тогда
				
				МодульОбъекта().УстановитьКонстантуEDI("МыТорговаяСеть",	МыТорговаяСеть);
				МодульОбъекта().УстановитьКонстантуEDI("МыПоставщик",	МыПоставщик);
				
				МодульОбъекта().УстановитьКонстантуEDI("GLN_Основной",	GLNЮрФизЛица);
				
				ТаблицаЮрФизЛиц = Новый ТаблицаЗначений;
				ТаблицаЮрФизЛиц.Колонки.Добавить("GLN");
				ТаблицаЮрФизЛиц.Колонки.Добавить("ЮрФизЛицо");
				ТаблицаЮрФизЛиц.Колонки.Добавить("ОрганизацияAPI");
				
				НоваяСтрока = ТаблицаЮрФизЛиц.Добавить();
				НоваяСтрока.GLN			= GLNЮрФизЛица;
				НоваяСтрока.ЮрФизЛицо	= ЮрФизЛицоСвое;
				
				МодульОбъекта().СохранитьСписокЭлементовСправочника("ЮрФизЛицаСвои",		ТаблицаЮрФизЛиц);
				
				УчетнаяЗаписьПоУмолчанию = МодульОбъекта().ПолучитьКонстантуEDI("УчетнаяЗаписьПоУмолчанию");
				СтруктураПолей		= МодульОбъекта().ПолучитьЭлементСправочника("УчетныеЗаписи", УчетнаяЗаписьПоУмолчанию);
				Структураполей.GLN	= GLNЮрФизЛица;
				МодульОбъекта().СохранитьЭлементСправочника("УчетныеЗаписи", УчетнаяЗаписьПоУмолчанию, СтруктураПолей);
				
			КонецЕсли;
			
			//Если МыТорговаяСеть Тогда
			//	ЭлементыФормы.ПанельПартнеров.ТекущаяСтраница = ЭлементыФормы.ПанельПартнеров.Страницы.СтраницаТорговойСети;
			//	ОбновитьСписокПартнеров();
			//Иначе
			//	ЭлементыФормы.ПанельПартнеров.ТекущаяСтраница = ЭлементыФормы.ПанельПартнеров.Страницы.СтраницаПоставщика;
			//КонецЕсли;
			
			УстановитьСтраницу("СтраницаСведенияОПартнерах");
			Возврат "Переход к выбору партнеров"; //обозначим что только перешли на страницу (тут важно не вернуть неопределено)
		Иначе
			
			СП = Новый СообщениеПользователю;
			СП.Текст = "Необходимо правильно заполнить все поля!"; 
			СП.Сообщить();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Страницы.СтраницаСведенияОПартнерах Тогда
		
		СписокНеотмеченныхСетей = "";
		
		Для Каждого СтрокаТС ИЗ СписокЮрФизЛицТорговыхСетей.ПолучитьЭлементы() Цикл
			
			Если СтрокаТС.Пометка И НЕ СтрокаТС.Подключена Тогда
				
				ЕстьПометки = Ложь;
				Для Каждого СтрокаЮФ ИЗ СтрокаТС.ПолучитьЭлементы() Цикл
					Если ЗначениеЗаполнено(СтрокаЮФ.Контрагент) Тогда
						ЕстьПометки = Истина;
						Прервать;	
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЕстьПометки Тогда
					СписокНеотмеченныхСетей = СписокНеотмеченныхСетей + Символы.ПС + " - " + СтрокаТС.Наименование;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(СписокНеотмеченныхСетей) Тогда
			СП = Новый СообщениеПользователю;
			СП.Текст = "У следующих торговых сетей вы не указали контрагентов из вашего справочника:"+СписокНеотмеченныхСетей; 
			СП.Сообщить();
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ МыТорговаяСеть Тогда
			СписокКодовДобавленныхТС = СохранитьТорговыеСети();
		КонецЕсли;
		
		МодульОбъекта().УстановитьКонстантуEDI("НеПоказыватьПомощникаПриЗапуске",	Истина);
		
		//Заполним начальные настройки цепочек документов.
		//По умолчанию выберем первые в списках - они самые полные.
		Если Не ЗначениеЗаполнено(МодульОбъекта().ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик")) Тогда
			СписокШаблонов = МодульОбъекта().ПолучитьСписокДоступныхШаблоновЦепочки("Поставщик");
			Если СписокШаблонов.Количество()>0 Тогда
				МодульОбъекта().УстановитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик",	СписокШаблонов[0].Представление);
			КонецЕсли;	
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(МодульОбъекта().ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Покупатель")) Тогда
			СписокШаблонов = МодульОбъекта().ПолучитьСписокДоступныхШаблоновЦепочки("Покупатель");
			Если СписокШаблонов.Количество()>0 Тогда
				МодульОбъекта().УстановитьКонстантуEDI("ШаблонЦепочкиДокументов_Покупатель",	СписокШаблонов[0].Представление);
			КонецЕсли;	
		КонецЕсли;
		
		МодульОбъекта().НастройкиМодуля = МодульОбъекта().ПолучитьНастройкиМодуля();//обновим кэш, вдруг галочку поменяли
		
		Возврат СписокКодовДобавленныхТС;
		
		//пока что принудительно запишем настройки
		//ФРМНастройка = ПолучитьФорму("ФормаСервис_Настройка");
		//ФРМНастройка.Открыть();
		//ФРМНастройка.КнопкаВыполнитьНажатие("");
		
		//ФРМСтруктураКомпании = ПолучитьФорму("ФормаСтруктураКомпании_Элемент");
		//ФРМСтруктураКомпании.Открыть();
		//ФРМСтруктураКомпании.ОсновныеДействияФормыОсновныеДействияФормыВыполнить("");
		
		//Оповестить("КонтурEDI_НастроитьФорму");
		
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ПолучитьНастройкиССервера()
	
	НастройкиССервера = МодульОбъекта().ПрочитатьНастройкиССервера(Новый Структура("Сервер,Порт,Логин,Пароль,ПассивныйРежим",Сервер,Порт,Логин,Пароль,ПассивныйРежим));
	
	//пока ТС нет
	//Если ЗначениеЗаполнено(НастройкиССервера.МыТорговаяСеть) Тогда
	//	МыТорговаяСеть = НастройкиССервера.МыТорговаяСеть;	
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиССервера.МыПоставщик) Тогда
		МыПоставщик = НастройкиССервера.МыПоставщик;
	КонецЕсли;
	Если ЗначениеЗаполнено(НастройкиССервера.ЮрФизЛицоСвое) Тогда
		ЮрФизЛицоСвое = НастройкиССервера.ЮрФизЛицоСвое;		
	КонецЕсли;
	Если ЗначениеЗаполнено(НастройкиССервера.GLNЮрФизЛица) Тогда
		GLNЮрФизЛица = НастройкиССервера.GLNЮрФизЛица;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПартнеров()
	
	//СписокПартнеров.Очистить();
	//
	//Партнеры = ПолучитьСписокЭлементовСправочника("Партнеры");
	//
	//Для каждого Стр Из Партнеры Цикл
	//	НоваяСтрока = СписокПартнеров.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьGLNЮрФизЛица()
	
	ЕстьОшибки = Ложь;
	
	ТаблицаОшибок = МодульОбъекта().ИнициализироватьТаблицуОшибок();
	МодульОбъекта().ПроверитьПолеФормы(ТаблицаОшибок, GLNЮрФизЛица, "GLN",	Истина, "GLN");
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		ЕстьОшибки = Истина;
		Элементы.ДекорацияУкажитеКодGLN.Видимость 			= Истина;
		Элементы.ДекорацияНадписьУкажитеКодGLN.Видимость 	= Истина;
	Иначе
		Элементы.ДекорацияУкажитеКодGLN.Видимость 			= Ложь;
		Элементы.ДекорацияНадписьУкажитеКодGLN.Видимость 	= Ложь;
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ВыполнитьАвтонастройкуТорговыхСетей()
	
	МодульОбъекта().ОбновитьСписокТорговыхСетейССервера();

	ОбновитьДеревоЮрФизЛицТорговыхСетей();
				   
	СП = Новый СообщениеПользователю;
	СП.Текст = "Торговые сети добавлены. 
			   |После закрытия стартового помощника проставьте в них соответствия юр.лиц и точек доставки.
			   |Это можно сделать в меню ""Торговые сети""."; 
	//СП.Поле	= "СписокЮрФизЛицТорговыхСетей";       //перст по умолчанию пишет лово "Ошибка" - нам никаких ошибок тут не надо!
	СП.Сообщить();
	
КонецПроцедуры

&НаСервере
Функция СохранитьТорговыеСети()
	
	СписокКодовДобавленныхТС = Новый СписокЗначений;
	
	Для Каждого СтрокаТорговойСети ИЗ СписокЮрФизЛицТорговыхСетей.ПолучитьЭлементы() Цикл
		
		Если СтрокаТорговойСети.Пометка И НЕ СтрокаТорговойСети.Подключена Тогда
			
			ТаблицаКонтрагентов = Новый ТаблицаЗначений;
			ТаблицаКонтрагентов.Колонки.Добавить("GLN");
			ТаблицаКонтрагентов.Колонки.Добавить("ЮрФизЛицо");
			ТаблицаКонтрагентов.Колонки.Добавить("Основной");
			
			Для Каждого СтрокаКонтрагента ИЗ СтрокаТорговойСети.ПолучитьЭлементы() Цикл
				
				Если ЗначениеЗаполнено(СтрокаКонтрагента.Контрагент) Тогда
					
					НоваяСтрока = ТаблицаКонтрагентов.Добавить();
					
					НоваяСтрока.GLN			= СокрЛП(СтрокаКонтрагента.GLN);
					НоваяСтрока.ЮрФизЛицо	= СтрокаКонтрагента.Контрагент;
					НоваяСтрока.Основной	= Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаКонтрагентов.Количество()>0 Тогда
				
				МодульОбъекта().СохранитьТорговуюСеть(СокрЛП(СтрокаТорговойСети.КодСети),ТаблицаКонтрагентов);
				СписокКодовДобавленныхТС.Добавить(СокрЛП(СтрокаТорговойСети.КодСети),СтрокаТорговойСети.Наименование);
								
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат СписокКодовДобавленныхТС;
	
КонецФункции

&НаСервере
Функция ПроверитьСведенияОКомпании()
			
	ЕстьОшибки = Ложь;
	
	//функция ПроверитьРольОрганизации()
	Если НЕ МыПоставщик И НЕ МыТорговаяСеть Тогда
		ЕстьОшибки = Истина;
		Элементы.ДекорацияУкажитеВидКомпании.Видимость 			= Истина;
		Элементы.ДекорацияНадписьУкажитеВидКомпании.Видимость 	= Истина;
	Иначе
		Элементы.ДекорацияУкажитеВидКомпании.Видимость 			= Ложь;
		Элементы.ДекорацияНадписьУкажитеВидКомпании.Видимость 	= Ложь;
	КонецЕсли;
	
	//Функция ПроверитьЮрФизЛицоСвое()
	Если ЗначениеЗаполнено(ЮрФизЛицоСвое) Тогда
		Элементы.ДекорацияУкажитеОрганизацию.Видимость 			= Ложь;
		Элементы.ДекорацияНадписьУкажитеОрганизацию.Видимость 	= Ложь;
	Иначе
		ЕстьОшибки = Истина;
		Элементы.ДекорацияУкажитеОрганизацию.Видимость			= Истина;
		Элементы.ДекорацияНадписьУкажитеОрганизацию.Видимость 	= Истина;
	КонецЕсли;
	
	ЕстьОшибки = ПроверитьGLNЮрФизЛица();
		
	Возврат НЕ ЕстьОшибки;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоТС(ТекущаяСтрокаИдентификатор, КодСети, БратьИзМодуля=ложь)
	
	ДанныеПоТС = ПолучитьСтруктуруДанныхТорговойСетиСервер(КодСети, БратьИзМодуля);
			
	Если НЕ ДанныеПоТС = Неопределено Тогда
						
		ЮрФизЛицаТС = ДанныеПоТС.ЮрФизЛица;
		
		ТекущаяСтрока = СписокЮрФизЛицТорговыхСетей.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
		
		Для Каждого СтрЮФ Из ЮрФизЛицаТС Цикл
			СтрокаКонтрагента = ТекущаяСтрока.ПолучитьЭлементы().Добавить();
			СтрокаКонтрагента.Наименование = СтрЮФ.Наименование;
			СтрокаКонтрагента.ИНН 			= СтрЮФ.ИНН;
			СтрокаКонтрагента.КПП 			= СтрЮФ.КПП;
			СтрокаКонтрагента.GLN 			= СтрЮФ.GLN;
			СтрокаКонтрагента.Контрагент 	= СтрЮФ.Контрагент;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
	

&НаСервере
Функция ПолучитьСтруктуруДанныхТорговойСетиСервер(КодСети,БратьИзМодуля=ложь)
	
	СтруктураДанныхТорговойСети = МодульОбъекта().ПолучитьСтруктуруДанныхТорговойСети(КодСети); //более не берем из модуля т.к. очень много сетей,БратьИзМодуля);
	
	//добавим и заполним контрагентов
	Если Не СтруктураДанныхТорговойСети = Неопределено Тогда
		ТаблицаЮрФизЛиц = СтруктураДанныхТорговойСети.ЮрФизЛица;
		ТаблицаЮрФизЛиц.Колонки.Добавить("Контрагент");
		Для Каждого Строка Из ТаблицаЮрФизЛиц Цикл
			Контрагент = МодульОбъекта().НайтиЮрФизЛицоСтороннееПоРеквизитам(Строка.ИНН,Строка.КПП);		
			Если Не ЗначениеЗаполнено(Контрагент) Тогда
				Контрагент = МодульОбъекта().ПолучитьПустуюСсылкуОбъекта("ЮрФизЛицоСтороннее");
			КонецЕсли;
			Строка.Контрагент = Контрагент;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураДанныхТорговойСети;  
	
КонецФункции

//----------------------------------------------------------------------------------------------------------------------------

&НаКлиенте
Процедура ОткрытьФормуОбъектаМодально(ИмяФормы, ПараметрыФормы = Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено,РежимБлокирования = Неопределено)
	//отказ от модальности
	Если РежимБлокирования = Неопределено Тогда
		РежимБлокирования=	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	Если ВладелецОбработчика = Неопределено Тогда
		ВладелецОбработчика=	ЭтаФорма;
	КонецЕсли;
	
	Если ИмяОбработчика = Неопределено Тогда
		ОписаниеОбработчика=	Неопределено;
	Иначе	
		Выполнить("ОписаниеОбработчика=	Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика)");
	КонецЕсли;
	
	Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецОбработчика, , , ,  ОписаниеОбработчика, РежимБлокирования)");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ИмяФормы, ПараметрыФормы = Неопределено , ВладелецФормы  = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь)
	
	ПолучаемаяФорма=	ПолучитьФорму(ПутьКФормам+ИмяФормы
										, ПараметрыФормы
										,
										, КлючУникальности);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы=	ВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДополнитьСписокЮрФизЛиц();
		
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСписокЮрФизЛиц()
	
	Для Каждого Строка Из СписокЮрФизЛицТорговыхСетей.ПолучитьЭлементы() Цикл
		
		Если ЗначениеЗаполнено(Строка.КодСети) Тогда
		    Если Не Строка.Подключена Тогда
				Строка.Галочка = Строка.Пометка;
			КонецЕсли;
		КонецЕсли;
			
		Если Строка.Подключена Тогда
			Строка.Наименование = Строка.Наименование + " (соединение настроено)";					
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры
	
&НаКлиенте
Процедура Назад(Команда)
	
	Страницы 		= Элементы.ГруппаЭтапыСтартовогоПомощника.ПодчиненныеЭлементы;
	ТекущаяСтраница = Элементы.ГруппаЭтапыСтартовогоПомощника.ТекущаяСтраница;
		
	Если ТекущаяСтраница = Страницы.СтраницаДанныеОКомпании Тогда
		
		УстановитьСтраницу("СтраницаНастройкаПодключения");
		
	ИначеЕсли ТекущаяСтраница = Страницы.СтраницаСведенияОПартнерах Тогда
		
		УстановитьСтраницу("СтраницаДанныеОКомпании");
		
	КонецЕсли;
	
КонецПроцедуры


//проверяет, не осталось ли открытых настроечных окон и если не осталось - захлапывает СП
&НаКлиенте
Процедура ОбработчикЗакрытьЭтотСтартовыйПомощник(Параметр=неопределено,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
		
ВсеОткрытыеОкна = ПолучитьОкна();
ЕстьОткрытыеОкнаНастроек=Ложь;
Для Каждого Окно1С Из ВсеОткрытыеОкна Цикл
	СодержимоеОкна=Окно1С.ПолучитьСодержимое();
	Если ТипЗнч(СодержимоеОкна)=Тип("УправляемаяФорма") Тогда 
		ИмяОткрытойФормы=СодержимоеОкна.ИмяФормы;
		Если Найти(ИмяОткрытойФормы,"СервисНастройкиУправляемая")<>0 ИЛИ Найти(ИмяОткрытойФормы,"Сервис_ОбновлениеДанныхПартнераУправляемая")<>0 Тогда 
			ЕстьОткрытыеОкнаНастроек=Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецЦикла;

Если не ЕстьОткрытыеОкнаНастроек Тогда 
	//закрыть эту форму	
	ЭтаФорма.Закрыть(Истина);
КонецЕсли;


  //to do:
//проверить, записались ли дефолтные настройки, и если не записались то заново открыть форму настроек

КонецПроцедуры 


&НаКлиенте
Процедура Далее(Команда)
	
	Состояние("Записываю параметры и перехожу на следующую закладку...",80,?(ИмяТекущейСтраницы="СтраницаНастройкаПодключения","В базу записывается учетная запись",""),Элементы.ДекорацияПереход1.Картинка);
	
	РезультатПерехода = ДалееСервер();
	Если РезультатПерехода = "ошибка подключения" Тогда 
		 Возврат;
	КонецЕсли;

	Если Параметры.ОткрытаКакДобавлениеПартнера = истина Тогда
		Если РезультатПерехода = Неопределено Тогда
			Возврат; 
		ИначеЕсли  РезультатПерехода.Количество()=0 Тогда 
			Сообщить("Не выбрано ни одной торговой сети для добавления");
			Возврат; 
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ГруппаЭтапыСтартовогоПомощника.ТекущаяСтраница = Элементы.ГруппаЭтапыСтартовогоПомощника.ПодчиненныеЭлементы.СтраницаСведенияОПартнерах Тогда
		Если ТипЗнч(РезультатПерехода) = Тип("СписокЗначений") Тогда
			
			//сначала откроем настройки модуля   и повесим на неё обработчик закрытия СП
			Если не Параметры.ОткрытаКакДобавлениеПартнера Тогда 
				ОткрытьНастройкиДляЗаписи();
			КонецЕсли;	
			//поверх откроем обновления ТД по выбранным сетям
			
			Для Каждого Элемент Из РезультатПерехода Цикл
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("КодСети", 						Элемент.Значение);
				ПараметрыФормы.Вставить("НаименованиеПартнера", 		Элемент.Представление);
				ПараметрыФормы.Вставить("GUIDФормыВыводаУведомлений", 	ЭтаФорма.УникальныйИдентификатор);
				
				Если Параметры.МодальностьЗапрещена Тогда 
					Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_ОбновлениеДанныхПартнераУправляемая"", ПараметрыФормы, ""ОбработчикЗакрытьЭтотСтартовыйПомощник"")");//,ДополнительныеПараметры);
				Иначе
					ПолучитьФормуОбработки("Сервис_ОбновлениеДанныхПартнераУправляемая",ПараметрыФормы,ЭтаФорма).ОткрытьМодально();
				КонецЕсли;		
			КонецЦикла;
			//открыть форму настроек
			//
			
		ИначеЕсли РезультатПерехода = Неопределено Тогда //не выбрали ни одной сети и не ошибка - опять таки запись дефолтных настроек
			ОткрытьНастройкиДляЗаписи();
		КонецЕсли;
		
		Если не Параметры.МодальностьЗапрещена Тогда
			ОбработчикЗакрытьЭтотСтартовыйПомощник();
		КонецЕсли;
		
	КонецЕсли;
	
	ОчиститьСообщения();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиДляЗаписи()
	
	ПараметрыФормы=	Новый Структура;
	ПараметрыФормы.Вставить("ФормаОткрытаСтартовымПомощником",Истина);
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""СервисНастройкиУправляемая"", ПараметрыФормы, ""ОбработчикЗакрытьЭтотСтартовыйПомощник"")");//,""ОбработчикПослередактированияНастроек"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("СервисНастройкиУправляемая",ПараметрыФормы).ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры // ОткрытьНастройкиДляЗаписи()

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Логин) Тогда
		СП = Новый СообщениеПользователю;
		СП.Текст = "Не указан логин для доступа к EDI!"; 
		СП.Поле	= "Логин";
		СП.Сообщить();
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Пароль) Тогда	
		СП = Новый СообщениеПользователю;
		СП.Текст = "Не указан пароль для доступа к EDI!"; 
		СП.Поле	= "Пароль";
		СП.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Состояние("Авторизуюсь на сервере",70,"Если процесс затягивается - проверьте доступ в интернет",Элементы.ДекорацияЛоготип.Картинка);
	
	РезультатАвторизации = АвторизоватьсяВAPIСервер(Логин, Пароль);
	
	Если РезультатАвторизации="ок" Тогда
		
		СП = Новый СообщениеПользователю;
		СП.Текст = "Проверка подключения прошла успешно!"; 
			
		//ЭлементыФормы.КартинкаПроверкиПодключения.Видимость	= Истина;
		//ЭлементыФормы.КартинкаПроверкиПодключения.Картинка	= ПолучитьКартинкуEDI("ЭлементФормы",	"КартинкаГалочка");
		
	ИначеЕсли РезультатАвторизации="пароль" Тогда
		
		СП = Новый СообщениеПользователю;
		СП.Текст = "Не удалось подключиться к EDI.
				   |Проверьте логин и пароль."; 
		
		//ЭлементыФормы.КартинкаПроверкиПодключения.Видимость	= Истина;
		//ЭлементыФормы.КартинкаПроверкиПодключения.Картинка	= ПолучитьКартинкуEDI("ЭлементФормы",	"КартинкаПредупреждение");
		
	Иначе//подключение	
		
		СП = Новый СообщениеПользователю;
		СП.Текст = "Не удалось подключиться к EDI.
				   |Возможно, с этого компьютера нет доступа к нашему серверу https://edi-api.kontur.ru.
				   |Обратитесь к системному администратору для настройки."; 
		
		//ЭлементыФормы.КартинкаПроверкиПодключения.Видимость	= Истина;
		//ЭлементыФормы.КартинкаПроверкиПодключения.Картинка	= ПолучитьКартинкуEDI("ЭлементФормы",	"КартинкаПредупреждение");
		
	КонецЕсли;
	    ТекстПредупреждения=СП.Текст;
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(Новый ОписаниеОповещения(""ОбработчикОзнакомленияСОшибкойПроверки"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик),ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
			ОбработчикОзнакомленияСОшибкойПроверки(ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
		
		//СП.Сообщить();

КонецПроцедуры
	
&НаКлиенте
Процедура ОбработчикОзнакомленияСОшибкойПроверки(ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт

//nop	

КонецПроцедуры 

&НаКлиенте
функция ПроверитьРольОрганизации()
	
	ЕстьОшибки = Ложь;
	
	Если НЕ МыПоставщик И НЕ МыТорговаяСеть Тогда
		ЕстьОшибки = Истина;
		Элементы.ДекорацияУкажитеВидКомпании.Видимость 			= Истина;
		Элементы.ДекорацияНадписьУкажитеВидКомпании.Видимость 	= Истина;
	Иначе
		Элементы.ДекорацияУкажитеВидКомпании.Видимость 			= Ложь;
		Элементы.ДекорацияНадписьУкажитеВидКомпании.Видимость 	= Ложь;
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Процедура МыПоставщикПриИзменении(Элемент)
	
	ПроверитьРольОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура МыТорговаяСетьПриИзменении(Элемент)
	
	ПроверитьРольОрганизации();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЮрФизЛицоСвое()
	
	ЕстьОшибки = Ложь;
	
	Если ЗначениеЗаполнено(ЮрФизЛицоСвое) Тогда
		Элементы.ДекорацияУкажитеОрганизацию.Видимость 			= Ложь;
		Элементы.ДекорацияНадписьУкажитеОрганизацию.Видимость 	= Ложь;
	Иначе
		ЕстьОшибки = Истина;
		Элементы.ДекорацияУкажитеОрганизацию.Видимость			= Истина;
		Элементы.ДекорацияНадписьУкажитеОрганизацию.Видимость 	= Истина;
	КонецЕсли;
	
	Возврат ЕстьОшибки;	
	
КонецФункции

&НаКлиенте
Процедура ЮрФизЛицоСвоеПриИзменении(Элемент)
	
	ПроверитьЮрФизЛицоСвое();
	
КонецПроцедуры

&НаКлиенте
Процедура GLNЮрФизЛицаПриИзменении(Элемент)
	
	ПроверитьGLNЮрФизЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтонастройкаТорговыхСетей(Команда)
	
	ВыполнитьАвтонастройкуТорговыхСетей();
	
КонецПроцедуры
                               
&НаКлиенте
Процедура ДекорацияСведенияОПартнерахАвтонастройкаНажатие(Элемент)
	
	Состояние("Запрашиваю данные по сетям и добавляю их настройки...",50,"В зависимости от их количества, процесс может занять определенное время",Элементы.ДекорацияЛоготип.Картинка);
	
	АвтонастройкаТорговыхСетей(ЭтаФорма.Команды.АвтонастройкаТорговыхСетей);		
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЮрФизЛицТорговыхСетейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.СписокЮрФизЛицТорговыхСетей.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.КодСети) Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЮрФизЛицТорговыхСетейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЮрФизЛицТорговыхСетейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры
               
&НаКлиенте
Процедура ГалочкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СписокЮрФизЛицТорговыхСетей.ТекущиеДанные;
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		ТекущаяСтрока.Пометка = Не ТекущаяСтрока.Пометка;
		
		Если ТекущаяСтрока.Пометка Тогда
			
			Состояние("Запрашиваю данные по сети...",70,,Элементы.СлужебнаяНевидимаяКартинка.Картинка);
			
			ЗаполнитьДанныеПоТС(ТекущаяСтрока.ПолучитьИдентификатор(), ТекущаяСтрока.КодСети);
						
			Элементы.СписокЮрФизЛицТорговыхСетей.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор(),Ложь);
			
		Иначе
			ТекущаяСтрока.ПолучитьЭлементы().Очистить();
			Элементы.СписокЮрФизЛицТорговыхСетей.Свернуть(ТекущаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура РаботаПоФТПНажатие(Элемент)
	ЭтаФорма.Закрыть(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ПредупреждениеAPIНажатие(Элемент)
	ТекстПредупреждения="Внимание! без указания логина и пароля от учетной записи Вы не сможете продолжить работу."+Символы.ПС+
	"Если у Вас нет учетной записи - обратитесь в техподдержку."+Символы.ПС+
	"FTP: просим перейти на использование протокола обмена API. Это несложно и даст существенный прирост в производительности. Обратитесь к внедренцу или в тех. поддержку.";
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
	Иначе
		Предупреждение(ТекстПредупреждения,,"Контур.EDI");
	КонецЕсли;
	
КонецПроцедуры

