&НаСервере
Перем ОбработкаОбъект; 

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции 

&НаКлиенте
Процедура ОткрытьФормуОбъектаМодально(ИмяФормы, ПараметрыФормы = Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено,РежимБлокирования = Неопределено)
	//отказ от модальности
	Если РежимБлокирования = Неопределено Тогда
		РежимБлокирования=	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	Если ВладелецОбработчика = Неопределено Тогда
		ВладелецОбработчика=	ЭтаФорма;
	КонецЕсли;
	
	Если ИмяОбработчика = Неопределено Тогда
		ОписаниеОбработчика=	Неопределено;
	Иначе	
		Выполнить("ОписаниеОбработчика=	Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика)");
	КонецЕсли;
	
	Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецОбработчика, , , ,  ОписаниеОбработчика, РежимБлокирования)");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ИмяФормы, ПараметрыФормы = Неопределено , ВладелецФормы  = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь)
	
	ПолучаемаяФорма=	ПолучитьФорму(ПутьКФормам+ИмяФормы
	, ПараметрыФормы
	,
	, КлючУникальности);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы=	ВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПользователя(Команда)
	
ОткрытьФормуПользователяДляРедактированияИлиДобавления(истина);	

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПользователя(Команда)
	
	ТекущаяСтрока = Элементы.СписокПользователей.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Вы действительно хотите удалить пользователя """ + ТекущаяСтрока.Пользователь + """?";
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Да, удалить");
	КнопкиВопроса.Добавить("Отмена");
	ДопПараметрДляПередачиВОбработчик=ТекущаяСтрока.Пользователь;
	РезультатВопроса = Неопределено;
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияУдаления"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
	Иначе
		РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
		ОбработчикСогласияУдаления(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСогласияУдаления(РезультатВопроса,ПользовательСсылка=Неопределено) Экспорт

	Если РезультатВопроса = "Да, удалить" и ПользовательСсылка<>Неопределено Тогда
		РезультатУдаления = УдалитьПользователяВызовСервера(ПользовательСсылка);
		Если Не РезультатУдаления.Успешно Тогда
			Если Параметры.МодальностьЗапрещена Тогда 
				Выполнить("ПоказатьПредупреждение(,РезультатУдаления.ОписаниеОшибки,,""Контур.EDI"")");
			Иначе
				Предупреждение(РезультатУдаления.ОписаниеОшибки,,"Контур.EDI");
			КонецЕсли;
		КонецЕсли;
		ОбновитьСписокПользователей();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция УдалитьПользователяВызовСервера(ПользовательСсылка)

	Возврат МодульОбъекта().УдалитьПользователя(ПользовательСсылка);

КонецФункции // УдалитьРасширениеВызовСервера()


&НаКлиенте
Процедура СписокПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.СписокПользователей.ТекущиеДанные;
	
	Если НЕ ТекСтрока=Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Пользователь) Тогда
			
			ПараметрыФормы=	Новый Структура;
			ПараметрыФормы.Вставить("Пользователь", ТекСтрока.Пользователь);
			
			Если Параметры.МодальностьЗапрещена Тогда       
				Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Пользователи_ЭлементУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияПользователя"")");//,ДополнительныеПараметры);
			Иначе
				ФормаЭлемента=ПолучитьФормуОбработки("Пользователи_ЭлементУправляемая",ПараметрыФормы);
				ФормаЭлемента.ОткрытьМодально();
				
				ОбработчикПослередактированияПользователя();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПользователяДляРедактированияИлиДобавления(ЭтоДобавление=Ложь)
	
	ТекСтрока = Элементы.СписокПользователей.ТекущиеДанные;
	
	
	Если (НЕ ТекСтрока=Неопределено) или ЭтоДобавление=Истина Тогда
		Если ТекСтрока<>Неопределено и ЗначениеЗаполнено(ТекСтрока.Пользователь) и ЭтоДобавление=Ложь Тогда
			СсылкаНаП = ТекСтрока.Пользователь;
		иначе
			СсылкаНаП = Неопределено;
		КонецЕсли;
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("Пользователь", СсылкаНаП);
		ПараметрыФормы.Вставить("Новый", ЭтоДобавление);
		
		Если Параметры.МодальностьЗапрещена Тогда       //УФ-ОФ переход   //на ОФ всегда разрешена модальность, оставлено для дальнейшего открытия УФ-УФ
			Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Пользователи_ЭлементУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияПользователя"")");//,ДополнительныеПараметры);
		Иначе
			ФормаЭлемента=ПолучитьФормуОбработки("Пользователи_ЭлементУправляемая",ПараметрыФормы);
			ФормаЭлемента.Пользователь = СсылкаНаП;
			ФормаЭлемента.ОткрытьМодально();
			
			ОбновитьСписокПользователей();	
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОбработчикПослередактированияПользователя(Параметр1=Неопределено,ДопПараметр=Неопределено) Экспорт

	 //обновить список
	 ОбновитьСписокПользователей();

КонецПроцедуры // ОбработчикПослередактированияПользователя()


&НаСервере
Процедура ОбновитьСписокПользователей()
	
	СписокПользователей.Очистить();
	
	СписокЭлементов = МодульОбъекта().ПолучитьСписокЭлементовСправочника("Пользователи");
	
	Для каждого Стр Из СписокЭлементов Цикл
		
		НоваяСтрока = СписокПользователей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПутьКФормам = МодульОбъекта().Метаданные().ПолноеИмя() + ".Форма.";
	Параметры.МодальностьЗапрещена=МодульОбъекта().МодальностьЗапрещена();
	ОбновитьСписокПользователей()
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//проверим, что в списке содержится хотя бы 1 пользователь, имеющий роль "Полные права"
	Если СписокПользователей.Количество() > 0 Тогда 
		ЕстьПользовательСПолнымиПравами = Ложь;
		Для Каждого Пользователь Из СписокПользователей Цикл
			Если Пользователь.Роль = "ПолныеПрава" Тогда
				ЕстьПользовательСПолнымиПравами = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьПользовательСПолнымиПравами Тогда
			Предупреждение("В списке пользователей не найден ни один пользователь с ролью ""Полные права""." + Символы.ПС +
			"Необходимо установить роль ""Полные права"" хотя бы одному из списка пользователей.");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КонтурEDI_ОбновитьСписокПользователей" Тогда
		
		//предусмотрено оновление в обработчике, который был указан при сохдании блокирующей/модальной формы элемента  ОбработчикПослередактированияПользователя
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

