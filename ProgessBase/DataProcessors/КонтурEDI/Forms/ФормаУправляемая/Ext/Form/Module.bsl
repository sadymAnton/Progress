Перем РежимОтладки;//вывод диагностических сообщений
Перем РазбиватьПакетыЗапросов;//так проще отлаживать скорость выполнения пакетных запросов

Перем Сообщение_До;

&НаСервере
Перем ОбработкаОбъект;

&НаКлиенте
Перем МодульКлиентПМ;
&НаКлиенте
Перем ФормаМеркурий_НастройкаУправляемая;//МУФ

//&НаКлиенте
//Перем РаботаССерверомДиадок;

&НаКлиенте
Перем МодульОбменКлиент Экспорт;  //API Диадока

//блок сервисных процедур

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта(ОбновитьКэш=Ложь)

	Если ОбработкаОбъект=Неопределено или ОбновитьКэш Тогда
		//TODO перекликается с функцией ПоместитьМОВХранилище()
		Если Параметры.КэшироватьМодульОбъекта Тогда
			Если Параметры.АдресХранилища<>"" и Не ОбновитьКэш Тогда
				_Структура = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
				Если ТипЗнч(_Структура) = Тип("Структура") Тогда
					_Структура.Свойство("ОбработкаОбъект",ОбработкаОбъект);
				КонецЕсли;
			КонецЕсли;
			
			Если ОбработкаОбъект=Неопределено или ОбновитьКэш Тогда //после некоторых действий важно обновлять кэш (например изменение ключевых настроек)
				ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
				ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
				Параметры.АдресХранилища = ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект",ОбработкаОбъект),УникальныйИдентификатор);
				ОбработкаОбъект.IDОсновнойФормы = Параметры.IDОсновнойФормы;
			КонецЕсли;
			
		Иначе
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
			ОбработкаОбъект.IDОсновнойФормы = Параметры.IDОсновнойФормы;
		КонецЕсли;

	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Процедура ОбновитьКэшМодуляОбъекта()
	
	Если Параметры.КэшироватьМодульОбъекта Тогда
		Заглушка=МодульОбъекта(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МодульОбменКлиент() Экспорт
	
	Если ТипЗнч(МодульОбменКлиент) = Тип("УправляемаяФорма") Тогда
		Возврат МодульОбменКлиент;
	КонецЕсли;
	
	ОсновнаяФорма = ОсновнаяФорма();
	Если ТипЗнч(ОсновнаяФорма) = Тип("УправляемаяФорма") Тогда
		
		Если Не ТипЗнч(ОсновнаяФорма.МодульОбменКлиент) = Тип("УправляемаяФорма") Тогда
			ИнициализироватьМодульОбменКлиент();
		КонецЕсли;
		
		Возврат ОсновнаяФорма.МодульОбменКлиент;
		
	Иначе
		Сообщить("Ошибка! Не удалось получить контекст основной формы.");
	КонецЕсли;
	          	
КонецФункции

&НаКлиенте
Процедура ИнициализироватьМодульОбменКлиент()
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	ПараметрыФормы.Вставить("КэшироватьМодульОбъекта", 		Параметры.КэшироватьМодульОбъекта);
	ПараметрыФормы.Вставить("АдресХранилища",				Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("IDОсновнойФормы",				Параметры.IDОсновнойФормы);
	ПолныйПутьКФорме = ПутьКФормам + "Сервис_ПодписаниеДДУправляемая";
	
	МодульОбменКлиент = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
    
	Возврат ЭтаФорма;
    	
КонецФункции

&НаКлиенте
Процедура ПоместитьВоВХ(Имя,Значение)
	
	ПоместитьВоВременноеХранилище(Значение, Объект.ПараметрыКлиентСервер.АдресаВХ[Имя]);
				
КонецПроцедуры

&НаКлиенте
Функция ИзвлечьИзВХ(Имя)
	
	АдресВХ = Объект.ПараметрыКлиентСервер.АдресаВХ[Имя];
	
	Если Не ЭтоАдресВременногоХранилища(АдресВХ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьИзВременногоХранилища(АдресВХ);
			
КонецФункции

&НаКлиенте
Процедура МодальныйВопрос(ТекстВопроса, СписокКнопок, ДопПараметрДляПередачиВОбработчик, ИмяОбработчика)
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения("""+ИмяОбработчика+""", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, СписокКнопок,,,""Контур.EDI"")");
	Иначе
		РезультатВопроса = Вопрос(ТекстВопроса, СписокКнопок,,,"Контур.EDI");
		Выполнить(ИмяОбработчика+"(РезультатВопроса,ДопПараметрДляПередачиВОбработчик)");
	КонецЕсли;
	
КонецПроцедуры

//конец блока сервисных процедур

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//этим реквизитом будем запускать обмен в фоне     //хорошо бы еще точки доставки сетей проверять в фоне
	Если Параметры.Свойство("ДополнительнаяОбработкаСсылка") Тогда 
		ДополнительнаяОбработкаСсылка=Параметры.ДополнительнаяОбработкаСсылка;
	Иначе
		ДополнительнаяОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("Модуль Контур.EDI");
	КонецЕсли;
	ВерсияБСП = ПолучитьВерсиюБСПСервер();
	Параметры.IDОсновнойФормы=Этаформа.УникальныйИдентификатор;
	Параметры.МодальностьЗапрещена=МодульОбъекта().МодальностьЗапрещена();
	ПутьКФормам = МодульОбъекта().Метаданные().ПолноеИмя() + ".Форма.";
	//Параметры.ПризнакАрхивВСообщенияхЗаполнен=МодульОбъекта().ПолучитьКонстантуEDI("ПризнакАрхивВСообщенияхЗаполнен");
	
	//Проверяем целостность наших метаданных
	ПроверкаМетаданныхПройдена = ПроверитьМетаданныеEDI();
	Если Не ПроверкаМетаданныхПройдена Тогда
		Возврат;
	КонецЕсли;
	НомерРелизаМодуля = СокрЛП(МодульОбъекта().ПолучитьНомерРелиза_КонтурEDI()+" "+МодульОбъекта().ПредставлениеОсобенностейМодуля());
	
	АвтообменСервер();   //для автообмена не интересен список сообщений - просто выполняем обмен.
	Если Параметры.АвтообменВыполнен Тогда Возврат; КонецЕсли;
	
	//дополнительно выведем описание изменений в текущей версии модуля
	НомерРелизаПоследнихОбновлений = МодульОбъекта().ПолучитьКонстантуEDI("ПоказатьОбновления_НомерРелиза");
	Если Лев(НомерРелизаПоследнихОбновлений,8) <> Лев(НомерРелизаМодуля,8) 
		И НЕ ЗначениеЗаполнено(Параметры.ПараметрыАвтотестирования) Тогда
		ПоказатьИсториюВерсий = Истина;   //При Открытии посмотрим на этот реквизит
	КонецЕсли;
	
	НеПоказыватьПомощник = МодульОбъекта().ПолучитьКонстантуEDI("НеПоказыватьПомощникаПриЗапуске");
    ЭтоПервыйЗапуск = Ложь;
	Если НеПоказыватьПомощник <> Истина Тогда
		ЭтоПервыйЗапуск = Истина;
	КонецЕсли;
	РезультатПроверкиЗапускНовойВерсииМодуля = МодульОбъекта().ПроверитьЗапускНовойВерсииМодуля(ЭтоПервыйЗапуск);
	
	ЗаполнитьРеквизитыФормы();
	
	Параметры.КэшироватьМодульОбъекта	= (МодульОбъекта().ПолучитьКонстантуEDI("КэшироватьМодульОбъекта")=Истина);//определение кеширования доступно только после проверки метаданных
	Параметры.РольПользователяEDI		= МодульОбъекта().ПараметрыПользователяEDI.РольПользователяEDI;
	
	ОпределитьРежимРаботы();
	
	ЗаполнитьНастройкиОтборов();
	ВосстановитьНастройкиФормы();
	
	ПроставитьСрокДействияСертификатов = (МодульОбъекта().ПолучитьКонстантуEDI("СрокДействияСертификатовПроставлен") <> Истина);
	
	ПредупредитьОбИстекающихСертификатах = ПроверитьНаличиеИстекающихСертификатовСервер(); 
	
	// предложим подключиться к другим торговым сетям
	ПредложитьПодключитьсяКДругимСетямСервер();
	
	ИнтерфейсныеПравкиДляПлатформы835();
	СтандартнаяОбработка=истина;
	МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ПриОткрытииОсновнойФормы",СтандартнаяОбработка, Новый Структура("Форма", ЭтаФорма));

	ИнициализироватьСтруктуруВХСервер();	
	
	Если МодульОбъекта().ИспользуетсяМеркурий = Истина Тогда
		ДобавитьКнопкуНастройкиМеркурий();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеИстекающихСертификатовСервер()
	
	Если ЗначениеЗаполнено(Параметры.ПараметрыАвтотестирования) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивИстекающихСертификатов = ПодготовитьМассивИстекающихСертификатовСервер();
	
	Если МассивИстекающихСертификатов.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПредупредитьОбИстекающихСертификатахСервер()

&НаСервере
Функция ПодготовитьМассивИстекающихСертификатовСервер()

	Возврат МодульОбъекта().ПодготовитьМассивИстекающихСертификатов();

КонецФункции

&НаСервере
Функция ИнициализироватьКлиентскийМодульПМ()
	
	Возврат МодульОбъекта().ПодключитьВнешнийКлиентскийПодключаемыйМодуль();
	 
КонецФункции

&НаСервере
Процедура ИнициализироватьСтруктуруВХСервер()

	//Раздел работы с api DD
	
	Объект.ПараметрыКлиентСервер = Новый Структура;
	
	АдресаВХ = Новый Структура;
	АдресаВХ.Вставить("Токены",							ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор));   //Соответствие: "отпечаток-токен" или "логин-токен"
	АдресаВХ.Вставить("СоединениеДД",					ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор));	//COM-объект
	АдресаВХ.Вставить("ТаблицыЗначений",				ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор));	//Структура: имя таблицы значений - таблица значений
	АдресаВХ.Вставить("КлючАвторизации",				ПоместитьВоВременноеХранилище("1S-Box2_19-b9b4602d-c9fa-4680-ad9a-0bd740eed1c8",УникальныйИдентификатор));	//Строка
	АдресаВХ.Вставить("НастройкиДоступаДД",				ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор));	//Соответствие: организация - данные авторизации
	АдресаВХ.Вставить("HttpКодыВозвратаAPI",			ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор));	//Таблица значений: колонки "ИмяРесурса","HttpКодВозврата","Описание"
	АдресаВХ.Вставить("ХранилищеСертификатовКонтурСВ",	ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор));	//COM-объект
	
	АдресаВХ.Вставить("НовыеСобытия",			ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор));   //Массив: структуры отправляемых событий
	АдресаВХ.Вставить("СостоянияОбмена",		ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор));	//Соответствие: организация - данные авторизации
	АдресаВХ.Вставить("РезультатВалидации",		ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор));	//ДеревоЗначений: результат валидации подписываемого документа
	//EDI 
	АдресаВХ.Вставить("МассивСообщений",				ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор));	//ДеревоЗначений: результат валидации подписываемого документа
	АдресаВХ.Вставить("ТабСФДляОтправкиИзвещений",		ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор));	//Таблица значений
	//	
	Объект.ПараметрыКлиентСервер.Вставить("АдресаВХ", 				АдресаВХ);
	Объект.ПараметрыКлиентСервер.Вставить("ИмяКонфигурации1С",		МодульОбъекта().ИмяКонфигурации1С);
	Объект.ПараметрыКлиентСервер.Вставить("МодальностьЗапрещена", 	МодульОбъекта().МодальностьЗапрещена());
	Объект.ПараметрыКлиентСервер.Вставить("ПутьКФормам", 			МодульОбъекта().Метаданные().ПолноеИмя() + ".Форма.");
	
КонецПроцедуры // ИнициализироватьСтруктуруВХСервер()

&НаСервере
Процедура АвтообменСервер()
	Параметры.АвтообменВыполнен=Ложь;
	Если МодульОбъекта().ПараметрыПользователяEDI.ЭтоАвтообмен = Истина Тогда
		
		СтандартнаяОбработкаEDI = Истина;
		МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ВыполнитьАвтообмен",СтандартнаяОбработкаEDI);
		
		Если СтандартнаяОбработкаEDI Тогда
			МодульОбъекта().ВыполнитьОбменССервером();
		КонецЕсли;
		
		Параметры.АвтообменВыполнен=Истина;
	КонецЕсли;
	
КонецПроцедуры // АвтообменСервер()

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()

	ОбновлятьВесьСписокПриРаботеСЗаказами = МодульОбъекта().ПолучитьКонстантуEDI("ОбновлятьВесьСписокПриРаботеСЗаказами");
	НужноПроверитьИзмененностьМодуляEDI = МодульОбъекта().НужноПроверитьИзмененностьМодуляEDI();
	ОткрыватьВебИнтерфейсДляПодписанияЕдиничнойПачки = МодульОбъекта().ПолучитьКонстантуEDI("ОткрыватьВебИнтерфейсДляПодписанияЕдиничнойПачки")=Истина;
	
КонецПроцедуры

//сюда будем закидывать всякие настройки формы - выбранные действия/партнеры в отборах, период и т.д.
&НаСервере
Процедура ВосстановитьНастройкиФормы()  //рефакторинг
	
	Если НЕ МодульОбъекта().ЕстьНеобходимыеМетаданные("РегистрыСведений.КонтурEDI_Статистика") Тогда 
		Элементы.Отчетность_ПересчитатьСтатичтикуSL.Доступность = Ложь;
	КонецЕсли;
	
	Если МодульОбъекта().ПараметрыПользователяEDI.ВариантОбмена <> "Ручной" Тогда
		Элементы.ВыполнитьОбмен.Доступность = Ложь;
	КонецЕсли;
	
	//Элементы.КнопкаНастройки.Кнопки.Сервис.Кнопки.ОткрытьВнешнееХранилище.Доступность = ВнешнееХранилище;
	
	Если МодульОбъекта().ПараметрыПользователяEDI.РольПользователяEDI <> "ПолныеПрава" Тогда
		
		// запретим открытие настроек и т.д.
		Элементы.ОткрытьСтруктуруКомпании.Доступность		= Ложь;
		Элементы.ОткрытьСписокПартнеров.Доступность			= Ложь;
		Элементы.ОткрытьНастройки.Доступность				= Ложь;
		Элементы.СтартовыйПомощник.Доступность				= Ложь;
		Элементы.ОтправитьПроизвольноеСообщение.Доступность	= Ложь;
		
		Элементы.ОткрытьСписокУчетныхЗаписей.Доступность	= Ложь;
		Элементы.ОткрытьСписокПользователей.Доступность		= Ложь;
		Элементы.ОткрытьСписокНашихОрганизаций.Доступность	= Ложь;
		
		Элементы.ДеревоФильтровИзменить.Видимость 			= Ложь;
		
	КонецЕсли;	
	
	ЗаполнитьСохраненнымиНастройками();
	
//	_СохраненноеЗначение = ВосстановитьЗначение("КонтурEDI_НастройкиГлавнойФормы");
////	_СохраненноеЗначение = Неопределено;//отладка
//	
//	НастройкиГлавнойФормы = ПолучитьСтруктуруНастроекГлавнойФормы();
//	Если _СохраненноеЗначение<>Неопределено Тогда
//		ЗаполнитьЗначенияСвойств(НастройкиГлавнойФормы,_СохраненноеЗначение);
//	КонецЕсли;	
//	
//	Если НЕ НастройкиГлавнойФормы.СверткаДереваФильтров = Неопределено Тогда
//		СвернутьРазвернутьДеревоФильтров(НЕ НастройкиГлавнойФормы.СверткаДереваФильтров);
//	Иначе
//		СвернутьРазвернутьДеревоФильтров(Истина);
//	КонецЕсли;
//	
//	Если НастройкаПериода = Неопределено Тогда
//		Если НастройкиГлавнойФормы.НастройкаПериода = Неопределено Тогда
//			//выведем документы/задачи только за текущий день
//			//в противном случае попадем в ситуацию, когда будет выводиться вся история полностью
//			//еще одна мысль: при начале обновления списка удалять сохраненную настройку периода, а при успешном окончании вывода - создавать ее заново.
//			//если вдруг кто укажет слишком большой интервал и не дождется окончания, то можно будет хотя бы завершить работу программы и запустить заново с периодом в 1 день
//			НастройкаПериода = Новый НастройкаПериода;
//			НастройкаПериода.ВариантНастройки=ВариантНастройкиПериода.Интервал;
//			НастройкаПериода.ВариантНачала = ВариантГраницыИнтервала.КонкретнаяДата;
//			НастройкаПериода.ВариантОкончания = ВариантГраницыИнтервала.БезОграничения;
//			НастройкаПериода.ДатаНачала = НачалоМесяца(НачалоМесяца(РабочаяДата)-1);//возьмем с начала предыдущего месяца
//			НастройкаПериода.ДатаОкончания = Дата("00010101");//КонецДня(РабочаяДата);
//		Иначе
//			НастройкаПериода = НастройкиГлавнойФормы.НастройкаПериода;
//			
//		КонецЕсли;	
//	КонецЕсли;
//	
//	
//	УстановитьЗаголовокФормы();
	
КонецПроцедуры	

&НаСервере
Процедура ИнтерфейсныеПравкиДляПлатформы835()
	
	//Свертываемость решено отключить т.к. не дает редактировать ширину и сделать сворачивание вручную как в ОФ
	//	Попытка
	//		//Выполнить("ЭтаФорма.Элементы.ГруппаДеревоФильтров.Поведение = ПоведениеОбычнойГруппы.Свертываемая");     
	//		//заменить цвет текста надписей
	//		
	//	Исключение
	//	КонецПопытки;
	
	//правки для Такси
	//Параметры.МодальностьЗапрещена - использовать нельзя так как возможно что мы на Такси но с разрешением модальности нап-р УНФ1.4 на 8.3.6
	СисИнфо = Новый СистемнаяИнформация;
	ТекВерсияПлатформы=СисИнфо.ВерсияПриложения;
	Остаток=Сред(СокрЛП(ТекВерсияПлатформы),3);  //и так ясно что "8." - в топку
	ВтораяЦифраВерсии=Число(Лев(Остаток,1)); //да полюбому 8.10.х не будет
	Остаток=Сред(СокрЛП(Остаток),3);
	ТретьяЦифраВерсии=Число(Лев(Остаток,Найти(Остаток,".")-1));
	
	
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Настройка = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения", "",, Пользователь.Имя);
	Если Не ТипЗнч(Настройка) = Тип("НастройкиКлиентскогоПриложения") Тогда
		Настройка = Новый НастройкиКлиентскогоПриложения;
	КонецЕсли;
	
	Если ((ВтораяЦифраВерсии=3 и ТретьяЦифраВерсии>=4) или ВтораяЦифраВерсии>3) Тогда
		
		СейчасВыбранТакси=Ложь;//придется завернуть без компиляции т.к. 8.2 не знает про эти штуки 
		Выполнить("СейчасВыбранТакси = Настройка.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси");
		
		Если СейчасВыбранТакси Тогда
			ТекущееСостояниеИнтерфейса = Неопределено;
			Выполнить("ТекущееСостояниеИнтерфейса = Настройка.ВариантМасштабаФормКлиентскогоПриложения");
			СейчасВыбранКомпактный=Ложь;
			Выполнить("СейчасВыбранКомпактный = ТекущееСостояниеИнтерфейса = ВариантМасштабаФормКлиентскогоПриложения.Компактный");
			
			Если НЕ СейчасВыбранКомпактный Тогда
				//Эти правки нужны только для Такси с вариантом масштаба авто или обычный!
				//слегка изменяем размеры и шрифты для того чтобы было аккуратнее
				Элементы.НадписьПодробно.ЦветТекста = Новый Цвет(51, 153, 102);
				Элементы.СвернутьНастройки.ЦветТекста = Новый Цвет(51, 153, 102); 
				Элементы.НадписьПодробно.Шрифт = Новый Шрифт(,12);
				Элементы.СвернутьНастройки.Шрифт =Новый Шрифт(,12);
				
				Элементы.ВыполнитьОбмен.Ширина = 30;
				Элементы.ВыполнитьВыбранныеЗадачи.Ширина = 8;
				Элементы.ВыбратьПериод.Ширина = 8;
				Элементы.ОбновитьСписок.Ширина = 8;
				Элементы.КнопкаЕще.Ширина = 8;
				Элементы.НадписьТехподдержка.Ширина = 30;
				Элементы.КоманднаяПанельНастройки.Ширина = 25;
				
			КонецЕсли;
		Иначе //переключение варианта актуально только для Такси
			Элементы.ПереключитьКомпактность.Доступность=Ложь;
			Элементы.ПереключитьКомпактность.Заголовок=Элементы.ПереключитьКомпактность.Заголовок+" доступно в режиме Такси";
		КонецЕсли;
	Иначе //переключение варианта актуально только 8.3+
		Элементы.ПереключитьКомпактность.Доступность=Ложь;
		Элементы.ПереключитьКомпактность.Заголовок=Элементы.ПереключитьКомпактность.Заголовок+" доступно на платформе 8.3.4 и старше";
	КонецЕсли;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ПредложитьПодключитьсяКДругимСетямСервер()
	
 	Если ЗначениеЗаполнено(Параметры.ПараметрыАвтотестирования) Тогда
		Параметры.ПредлагатьПодключиться = Ложь;
	Иначе
		Параметры.ПредлагатьПодключиться = Истина;
		
		ДатаПредложенияПодключенияТС = ХранилищеСистемныхНастроек.Загрузить("КонтурEDI_ДатаПредложенияПодключенияТС");	
		
		Если ТипЗнч(ДатаПредложенияПодключенияТС) = Тип("Структура") 
			и ДатаПредложенияПодключенияТС.Свойство("КонтурEDI_ДатаПредложенияПодключенияТС")
			и ТипЗнч(ДатаПредложенияПодключенияТС.КонтурEDI_ДатаПредложенияПодключенияТС) = Тип("Дата") Тогда
			Если ТекущаяДата() < ДатаПредложенияПодключенияТС.КонтурEDI_ДатаПредложенияПодключенияТС Тогда
				Параметры.ПредлагатьПодключиться = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПредложитьПодключитьсяКДругимСетям()

&НаСервере
Функция ЭтоЗапускОбъединенногоМодуляНаСтаромУФ()
	//наличие в конфигурации справочника КонтурEDI_Сообщения с отсутствующим реквизитом "Архив" и "ТребуемоеДействие
	Если  
		Метаданные.ОсновнойРежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение
		И Метаданные.Справочники.Найти("КонтурEDI_Сообщения")<>Неопределено
		И (Метаданные.Справочники.КонтурEDI_Сообщения.Реквизиты.Найти("Архив")=неопределено
		ИЛИ Метаданные.Справочники.КонтурEDI_Сообщения.Реквизиты.Найти("ТребуемоеДействие")=неопределено
		ИЛИ Метаданные.Справочники.КонтурEDI_Сообщения.Реквизиты.Найти("ФайлXML")=неопределено)
		Тогда
		Возврат Истина;
	иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//проверка самого первого бездумного запуска - нет объектов
&НаСервере
Функция ПроверитьМетаданныеEDI()//вернем ПроверкаПройдена
	
	ПроверкаМетаданныхПройдена=истина;
	
	Если ЭтоЗапускОбъединенногоМодуляНаСтаромУФ() Тогда
		Если  МодульОбъекта().ПолучитьКонстантуEDI("МыСеть")=истина Тогда
			СписокОшибок.Добавить("Внимание! Новая редакция модуля на текущем этапе не обладает функционалом торговой сети! Переход невозможен!");
			ПроверкаМетаданныхПройдена=Ложь;
			Возврат ПроверкаМетаданныхПройдена;

		иначе
			СписокОшибок.Добавить("Вы собираетесь запустить новую редакцию модуля КонтурEDI."+Символы.ПС+"Переход на новую редакцию возможен только после создания резервной копии базы данных"+Символы.ПС+
			"Рекомендуется сначала выполнить пробный переход на копии базы!!!");
			ПроверкаМетаданныхПройдена=Ложь;
			Параметры.ПереходСоСтаройРедакции = Истина;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверкиМетаданных = МодульОбъекта().ПроверитьКорректностьИДоступностьМетаданных();//проверка конфигурации, необходимых реквизитов наших справочников, прав доступа
	
	Если НЕ РезультатПроверкиМетаданных.Успешно Тогда
		
		СписокОшибок.Добавить(РезультатПроверкиМетаданных.ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
		
	ИмяКонфигурации1С = МодульОбъекта().ОпределитьКонфигурацию();
	
	Если Не ЗначениеЗаполнено(ИмяКонфигурации1С) Тогда
		
		СписокОшибок.Добавить(
		"Модуль Контур EDI (УФ) поддерживает конфигурации:
		|- Управление торговлей ред. 11
		|- Бухгалтерия предприятия ред. 3.0
		|- Бухгалтерия предприятия КОРП ред. 3.0
		|- Управление небольшой фирмой ред. 1.4
		|
		|
		|Для получения информации о поддержке Вашей конфигурации: """+Метаданные.Синоним+""" обратитесь к представителю Ритейл.Контур"
		);
		
		Возврат Ложь;

	КонецЕсли;
	
	Если Метаданные.Справочники.КонтурEDI_Сообщения.Реквизиты.Найти("ТребуемоеДействие")=Неопределено Тогда
		СписокОшибок.Добавить("Для работы этой версии модуля Контур.EDI необходимо обновить конфигурацию.");
		ПроверкаМетаданныхПройдена=Ложь;
	КонецЕсли;
	
	//Проверим типы данных, необходимые для реквизита "Документ" в справочнике "Сообщения".
		
	МыПоставщик = МодульОбъекта().НастройкиМодуля.МыПоставщик;
	МыПокупатель = МодульОбъекта().НастройкиМодуля.МыТорговаяСеть;
	
	Если Не (МыПокупатель или МыПоставщик) Тогда
		ПроверкаМетаданныхПройдена = Истина;
		Возврат ПроверкаМетаданныхПройдена;//не будем выдавать такие сообщения на не настроенном модуле
	КонецЕсли;	
	
	//Определим, какие типы документов у нас вообще используются
	МодульОбъекта().ОбновитьТаблицуТиповЗначенияОбъектов();//возможно, избыточно

	ТекстПредупреждения = МодульОбъекта().ПроверитьРеквизитДокументСправочникаСообщений();
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		СписокОшибок.Добавить(ТекстПредупреждения);

		ПроверкаМетаданныхПройдена=ложь;
		Возврат ПроверкаМетаданныхПройдена;

	КонецЕсли;	

	Возврат ПроверкаМетаданныхПройдена;

КонецФункции // ()

Функция ПроверитьЗапускНовойВерсииМодуляМодульОбработки()       
	
	РезультатПроверки = МодульОбъекта().ПроверитьЗапускНовойВерсииМодуля(ЭтоПервыйЗапуск);
	
	Возврат РезультатПроверки;
	
КонецФункции

//Область Дерево отборов
&НаСервере
Функция ПолучитьРодителяГруппыНастроек(ИмяГруппыНастроек,_Дерево)
	
	Возврат _Дерево.Строки.Найти(ИмяГруппыНастроек,"ГруппаНастроек");
	
КонецФункции

&НаСервере
Функция ПолучитьРодителяГруппыНастроекИзДанныхФормы(ИмяГруппыНастроек)
	ЭлементРодитель=Неопределено;
	
	 КоллекцияРодителей=ДеревоФильтров.ПолучитьЭлементы();
	 Для Каждого ЭлементКоллекции Из КоллекцияРодителей Цикл
		 Если ЭлементКоллекции.ГруппаНастроек = ИмяГруппыНастроек Тогда 
			 ЭлементРодитель= ЭлементКоллекции;
			 Прервать;
		 КонецЕсли;
	 КонецЦикла;
	 
	Возврат ЭлементРодитель;
КонецФункции

&НаКлиенте
Функция ПолучитьРодителяГруппыНастроекИзДанныхФормыКлиент(ИмяГруппыНастроек)
	ЭлементРодитель=Неопределено;
	
	 КоллекцияРодителей=ДеревоФильтров.ПолучитьЭлементы();
	 Для Каждого ЭлементКоллекции Из КоллекцияРодителей Цикл
		 Если ЭлементКоллекции.ГруппаНастроек = ИмяГруппыНастроек Тогда 
			 ЭлементРодитель= ЭлементКоллекции;
			 Прервать;
		 КонецЕсли;
	 КонецЦикла;
	 
	Возврат ЭлементРодитель;
КонецФункции

&НаСервере
Процедура ЗаполнитьНастройкиОтборов(ПерезаполнятьТипыСообщений=Истина,
									ПерезаполнятьПартнеров=Истина,
									ПерезаполнятьТребуемыеДействия=Истина,
									ПерезаполнятьОрганизации = Истина)
									
	//будем все делать на сервере - т.к. все равно туда ходить за настройками
	_ДеревоФильтров								= РеквизитФормыВЗначение("ДеревоФильтров",							Тип("ДеревоЗначений"));
	_НастройкаОформленияТребуемогоДействия		= РеквизитФормыВЗначение("НастройкаОформленияТребуемогоДействия",	Тип("ТаблицаЗначений"));
	
	НастройкиПерезаполнения = Новый Структура;
	НастройкиПерезаполнения.Вставить("ПерезаполнятьТипыСообщений",		ПерезаполнятьТипыСообщений);
	НастройкиПерезаполнения.Вставить("ПерезаполнятьПартнеров",			ПерезаполнятьПартнеров);
	НастройкиПерезаполнения.Вставить("ПерезаполнятьТребуемыеДействия",	ПерезаполнятьТребуемыеДействия);
	НастройкиПерезаполнения.Вставить("ПерезаполнятьОрганизации",		ПерезаполнятьОрганизации);

	МодульОбъекта().ЗаполнитьДеревоОтборовОсновнойФормы(_ДеревоФильтров, НастройкиПерезаполнения, Параметры.РежимРаботы, ПоказыватьЗавершенные, _НастройкаОформленияТребуемогоДействия);

	ЗначениеВРеквизитФормы(_ДеревоФильтров,							"ДеревоФильтров");
	ЗначениеВРеквизитФормы(_НастройкаОформленияТребуемогоДействия,	"НастройкаОформленияТребуемогоДействия");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборТиповСообщений()  //Устарела, следует использовать ЗаполнитьНастройкиОтборов()
	
	ЗаполнитьНастройкиОтборов(Истина,Ложь,Ложь,Ложь);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСписокПартнеров()  //Устарела, следует использовать ЗаполнитьНастройкиОтборов()
	
	ЗаполнитьНастройкиОтборов(Ложь,Истина,Ложь,Ложь);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСписокТребуемыхДействий()  //Устарела, следует использовать ЗаполнитьНастройкиОтборов()
	
	ЗаполнитьНастройкиОтборов(Ложь,Ложь,Истина,Ложь);
	
КонецПроцедуры
                                                              
&НаКлиенте
Процедура РазвернутьДеревоОтбораТребуемоеДействиеКлиент()
	
	//развернуть дерево отборов требуемого действия
	КоллекцияЭлементовДерева=ОтборТребуемыеДействия.ПолучитьЭлементы();
    Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
        ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
        Элементы.ОтборТребуемыеДействия.Развернуть(ИдентификаторСтроки,ИСТИНА);
	КонецЦикла;
	 
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоФильтровКлиент()
	
	//развернуть дерево отборов требуемого действия
	КоллекцияЭлементовДерева=ДеревоФильтров.ПолучитьЭлементы();
    Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
        ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
        Элементы.ДеревоФильтров.Развернуть(ИдентификаторСтроки,ИСТИНА);
	КонецЦикла;
	 
КонецПроцедуры

// Считаем что если есть старое свойство ОсновнойКодGLN то надо конвертировать, если его нет - не надо конвертировать
&НаСервере
Функция ЕстьНесконвертированныеНаНовыйРелизДанные()

	Если  МодульОбъекта().ПолучитьКонстантуEDI("ОсновнойКодGLN")=Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ЕстьНесконвертированныеНаНовыйРелизДанные()

&НаКлиенте
Процедура ОбработчикЗакрытияПомощникаПереходаНаНовыйРелиз(Параметры=Неопределено,ДопПараметры=Неопределено) Экспорт 
	Если ЭтаФорма.Открыта() Тогда 
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикРешенияПользователяОПродолженииПереходаНаНовуюРедакцию(РезультатВопросаОПродолжении,ДопПараметры=неопределено) Экспорт
	
	Если РезультатВопросаОПродолжении = "Я создал резервную копию, продолжить" Тогда 
		ВывестиОшибкиМетаданныхEDI(истина);
	Иначе
		 ДопПараметры=Истина;
		 
		 ТекстПредупреждения="Создайте резервную копию базы данных и запустите модуль вновь.";
		 ДопПараметрДляПередачиВОбработчик=Неопределено;
		 Если Параметры.МодальностьЗапрещена Тогда 
		 	Выполнить("ПоказатьПредупреждение(Новый ОписаниеОповещения(""ОбработчикОзнакомленияСТребованиемСоздатьРезервнуюКопию"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик),ТекстПредупреждения,,""Контур.EDI"")");
		 Иначе
		 	Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		 	ОбработчикОзнакомленияСТребованиемСоздатьРезервнуюКопию(ДопПараметрДляПередачиВОбработчик);
		 КонецЕсли;
		 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОзнакомленияСТребованиемСоздатьРезервнуюКопию(ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт

//Действия, связанные с обработкой ознакомления с предупреждением	

КонецПроцедуры 


&НаКлиенте
Процедура ВывестиОшибкиМетаданныхEDI(Отказ,ДопПараметры=неопределено) Экспорт
	
	Если СписокОшибок.Количество()>0 Тогда
	//Если истина Тогда 
		БылиОшибкиОбъектов= ложь;
		ТекстПредупреждения="";
		Для Каждого Ошибка из СписокОшибок ЦИкл
			ТекстПредупреждения=ТекстПредупреждения+""+Ошибка.Значение+Символы.ПС;  
			Если Найти(Ошибка.Значение,"В конфигурации отсутствует")<>0 ИЛИ Найти(Ошибка.Значение,"необходимо обновить")<>0 Тогда 
				БылиОшибкиОбъектов=Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если БылиОшибкиОбъектов или Параметры.ПереходСоСтаройРедакции=истина Тогда 
		//Если истина Тогда 

			ТекстПредупреждения=ТекстПредупреждения+Символы.ПС+"Обновите вашу конфигурацию с использованием файла КонтурEDI_upd. ";
			
			РезультатВопросаСохраненияФайла = Неопределено;
			
			Если Параметры.МодальностьЗапрещена Тогда
				Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ПриОткрытииВопросОбобновленииЗавершение"", ЭтаФорма), ТекстПредупреждения+Символы.ПС+Символы.ПС+""Сохранить файл обновления на диск?"", РежимДиалогаВопрос.ДаНет)");
			иначе
				РезультатВопросаСохраненияФайла = Вопрос(ТекстПредупреждения+Символы.ПС+Символы.ПС+"Сохранить файл обновления на диск?", РежимДиалогаВопрос.ДаНет);
				ПриОткрытииВопросОбОбновленииЗавершение(РезультатВопросаСохраненияФайла, Неопределено)
			КонецЕсли;
			
			Отказ=Истина;
			
			Возврат;
		
		КонецЕсли;
		
		ТекстПредупреждения=ТекстПредупреждения+Символы.ПС+"Устраните указанные проблемы и запустите обработку вновь!";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(Новый ОписаниеОповещения(""ОбработчикОтказаОткрытияЭтойФормы"", ЭтаФорма,),ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Обнаружены проблемы запуска модуля");
			ОбработчикОтказаОткрытияЭтойФормы();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
КонецПроцедуры

//Здесь сохраняем файлы обновления и инструкций
&НаКлиенте
Процедура ПриОткрытииВопросОбОбновленииЗавершение(РезультатВопроса1, ДополнительныеПараметры) Экспорт
	
	РезультатВопросаСохраненияФайла = РезультатВопроса1;
	
	Если РезультатВопросаСохраненияФайла  = КодВозвратаДиалога.Да Тогда
		
		Режим = РежимДиалогаВыбораФайла.Сохранение;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.Заголовок = "Укажите файл, в который нужно сохранить обновление для вашей конфигурации";
		ДиалогОткрытияФайла.Фильтр			= "Файл конфигурации 1С (*.cf)|*.cf";      
		ДиалогОткрытияФайла.ПолноеИмяФайла = "КонтурEDI_upd.cf";
		
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			АдресДляСохраненияФайла = ДиалогОткрытияФайла.ПолноеИмяФайла;
			АдресКаталогаДляСохраненияФайла = ДиалогОткрытияФайла.Каталог;
			файлсохранен=Ложь;
			инструкцияСохранена=Ложь;
			
			//СохранитьФайлОбновленияСервер(АдресКаталогаДляСохраненияФайла,файлсохранен,инструкцияСохранена);
			
			//Сам файл обновления
			Состояние("Сохраняю файл обновления");
			ДвоичныеДанные=ПолучитьДвоичныеДанныеФайлаОбновленияКонфигурацииВызовСервера();
			
			Если ДвоичныеДанные<>Неопределено Тогда 
				ДвоичныеДанные.Записать(АдресДляСохраненияФайла);
				файлсохранен=Истина;
			Иначе
				Сообщить("Не удалось сохранить файл обновления");
				файлсохранен=Ложь;
			КонецЕсли;
			
			//Инструкция по обновлению
			ДвоичныеДанныеИнструкции=ПолучитьДвоичныеДанныеФайлаИнструкцииВызовСервера();
			
			Если ДвоичныеДанныеИнструкции<>Неопределено Тогда 
				ДвоичныеДанныеИнструкции.Записать(ДиалогОткрытияФайла.Каталог+"\КонтурEDI_upd_ИнструкцияПоОбновлению.pdf");
				инструкцияСохранена=Истина;
			Иначе
				Сообщить("Не удалось сохранить файл инструкции");
				инструкцияСохранена=Ложь;
			КонецЕсли;
			
			КнопкиВопроса=новый СписокЗначений;
			КнопкиВопроса.Добавить("Открыть инструкцию");
			КнопкиВопроса.Добавить("Открыть инструкцию и видео");
			КнопкиВопроса.Добавить("Я знаю, что делать дальше");
			
			РезультатВопроса = Неопределено;
			Если Параметры.МодальностьЗапрещена Тогда
				Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОтветВопросОткрытиеИнструкцииЗавершение"", ЭтаФорма, Новый Структура(""АдресКаталогаДляСохраненияФайла"", АдресКаталогаДляСохраненияФайла)), ""Файл обновления сохранен в: "" + АдресКаталогаДляСохраненияФайла+""."", КнопкиВопроса)");
			Иначе
				РезультатВопроса = Вопрос("Файл обновления сохранены в: " + АдресКаталогаДляСохраненияФайла+".", КнопкиВопроса);
				ОтветВопросОткрытиеИнструкцииЗавершение(РезультатВопроса,Новый Структура("АдресКаталогаДляСохраненияФайла", АдресКаталогаДляСохраненияФайла));
				ОбработчикОтказаОткрытияЭтойФормы();
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстПредупреждения="Без обновления базы дальнейшая работа с Контур.EDI невозможна.";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(Новый ОписаниеОповещения(""ОбработчикОтказаОткрытияЭтойФормы"", ЭтаФорма,),ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения);
			ОбработчикОтказаОткрытияЭтойФормы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДвоичныеДанныеФайлаОбновленияКонфигурацииВызовСервера()
	Возврат МодульОбъекта().ДвоичныеДанныеФайлаОбновленияКонфигурацииСервер();	
КонецФункции

&НаСервере
Функция ПолучитьДвоичныеДанныеФайлаИнструкцииВызовСервера()
	
	ДвоичныеДанные = Неопределено;
	
	ИмяВременного=ПолучитьИмяВременногоФайла("pdf");

	Попытка
		Соединение=Новый HTTPСоединение("edi.kontur.ru",,,,,истина);
		Соединение.Получить("/1c/konturEDI_82/КонтурEDI_1С_8_ОбновлениеБазы.pdf", ИмяВременного);
		ИнструкцияСохранена=истина;
	Исключение                      
		ИнструкцияСохранена=Ложь;
	КонецПопытки;

	Если ИнструкцияСохранена Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременного);
	КонецЕсли;
	
	Возврат ДвоичныеДанные;
	
КонецФункции // ПолучитьДвоичныеДанныеФайлаИнструкцииВызовСервера()

&НаСервере
Функция СтрокаСоединенияПреобразованная()
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	
	Если EDI_ИнформационнаяБазаФайловая(СтрокаСоединенияСБД) Тогда
		Возврат "/F"+Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
	КонецЕсли;
		
	// Прибавить к имени сервера имя пути информационной базы
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "SRVR=");
	Если ПозицияПоиска <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
	НачальнаяПозицияКопирования = 6 + 1;
	КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
	
	ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
	
	СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
	
	// Позиция имени сервера
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "REF=");
	Если ПозицияПоиска <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачальнаяПозицияКопирования = 6;
	ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
	КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
	
	ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
	ПутьКБД = "/S" + ИмяСервера + "\" + ИмяИБНаСервере;
	Возврат ПутьКБД;
КонецФункции

&НаКлиенте
Процедура ОтветВопросОткрытиеИнструкцииЗавершение(РезультатВопроса1, ДополнительныеПараметры) Экспорт
	
	АдресКаталогаДляСохраненияФайла = ДополнительныеПараметры.АдресКаталогаДляСохраненияФайла;
	
	РезультатВопроса=РезультатВопроса1;
	
	Если РезультатВопроса = "Открыть инструкцию" или РезультатВопроса = "Открыть инструкцию и видео" Тогда 
		Попытка
			ЗапуститьПриложение("https://edi.kontur.ru/1c/konturEDI_82/КонтурEDI_1С_8_ОбновлениеБазы.pdf");
			//ОбработчикОтказаОткрытияЭтойФормы();
			Если РезультатВопроса = "Открыть инструкцию и видео" Тогда 
				ЗапуститьПриложение("http://www.screencast.com/users/SKB_LT_Co/folders/EDI/media/b9ffc8e1-701d-4553-93ba-5171de57b759");
			КонецЕсли;
		Исключение
			ТекстПредупреждения="Не удалось открыть файл по причине: "+ОписаниеОшибки();
			Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(Новый ОписаниеОповещения(""ОбработчикОтказаОткрытияЭтойФормы"", ЭтаФорма,),ТекстПредупреждения,,""Контур.EDI"")");
			Иначе
				Предупреждение(ТекстПредупреждения);
				ОбработчикОтказаОткрытияЭтойФормы();
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Если РезультатВопроса = "Я знаю, что делать дальше" Тогда
		ОбработчикОтказаОткрытияЭтойФормы(); // все сюда, тут пользователь-супергерой внедряет
	Иначе
		ТекстПредупреждения="Теперь обновите конфигурацию с использованием файла КонтурEDI_upd.cf и инструкции.";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(Новый ОписаниеОповещения(""ОбработчикОтказаОткрытияЭтойФормы"", ЭтаФорма,),ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения);
			ОбработчикОтказаОткрытияЭтойФормы()
		КонецЕсли;
	//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Скопирована в модуль для совместимости со всеми без исключения базами
// Функция ИнформационнаяБазаФайловая определяет режим эксплуатации
// информационной базы файловый (Истина) или Серверный (Ложь).
//  При проверке используется СтрокаСоединенияИнформационнойБазы, которую
// можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция EDI_ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

//для режима запрета модальности
Процедура СохранитьБатФайлОбновленияВспомогательныхДанных(АдресКаталогаДляСохраненияФайла)
	
	Если истина тогда //("Объект").МодальностьЗапрещена() Тогда 	    //делаем это все только для 8.3.5+
		
		Текст = Новый ЗаписьТекста(АдресКаталогаДляСохраненияФайла+"\ОбновлениеИБДляПримененияПравEDI.bat", КодировкаТекста.OEM);
		
		СисИнфо = Новый СистемнаяИнформация;
		ТекВерсияПлатформы=СисИнфо.ВерсияПриложения;
		
		Текст.ЗаписатьСтроку("""C:\Program Files (x86)\1cv8\"+ТекВерсияПлатформы+"\bin\1cv8.exe"" enterprise " +СтрокаСоединенияПреобразованная()+ " /C ЗапуститьОбновлениеИнформационнойБазы");
		Текст.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.АвтообменВыполнен=Истина Тогда 				
		ПрекратитьРаботуСистемы();
		Возврат;
	КонецЕсли;
	
	Если не ПроверкаМетаданныхПройдена и Параметры.ПереходСоСтаройРедакции=истина Тогда
		Отказ=истина;
		//выведем вопрос с предупреждением о резервной копии и если пользователь скажет что уже сделал бэкап вызовем  ВывестиОшибкиМетаданныхEDI
		ТекстВопроса ="Вы собираетесь запустить новую редакцию модуля КонтурEDI."+Символы.ПС+"Переход на новую редакцию возможен только после создания резервной копии"+Символы.ПС+
		"Рекомендуется сначала выполнить пробный переход на копии базы!!!"+Символы.ПС+Символы.ПС+"ВЫ СДЕЛАЛИ РЕЗЕРВНУЮ КОПИЮ?";
			КнопкиВопроса=новый СписокЗначений;
			КнопкиВопроса.Добавить("Я еще не создал резервную копию");
			КнопкиВопроса.Добавить("Я создал резервную копию, продолжить");
			
			РезультатВопроса = Неопределено;
			Если Параметры.МодальностьЗапрещена Тогда
				Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикРешенияПользователяОПродолженииПереходаНаНовуюРедакцию"", ЭтаФорма), ТекстВопроса, КнопкиВопроса)");
			Иначе
				РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса);
				ОбработчикРешенияПользователяОПродолженииПереходаНаНовуюРедакцию(РезультатВопроса,Отказ);
			КонецЕсли;
		Возврат
	КонецЕсли;
	
	Если не ПроверкаМетаданныхПройдена Тогда 
		//Выведем все что нам не нравится, предложим файлик сохранить и захлопнем модуль
		//т.е. закрытие модуля уже неизбежно             ОбработчикОтказаОткрытияЭтойФормы

		ВывестиОшибкиМетаданныхEDI(Отказ);

		Возврат;
	КонецЕсли;
	
	БыстрыеОтборыСвернуть("");        //рефакторинг фильтры
    Если ЗначениеЗаполнено(ТекущаяНастройкаФильтраСохранение) Тогда
		Для каждого ЭлементСохраненныхФильтров Из СохраненныеФильтры Цикл
			Если ТекущаяНастройкаФильтраСохранение = ЭлементСохраненныхФильтров.Настройка Тогда 
				ЭлементСохраненныхФильтров.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
		УстановитьСохраненныеНастройки();
	КонецЕсли;
 	РазвернутьДеревоФильтровКлиент();
    УстановитьСвернутостьПодробностейФильтра();
	//Элементы.СохраненныеФильтры.Высота=СохраненныеФильтры.Количество()*1;
	//Элементы.ГруппаСохраненныеОтборы.Высота = Элементы.СохраненныеФильтры.Высота+1;
	
	
	//Элементы.ОтборТипыСообщений.Высота=ОтборТипыСообщений.Количество()*1;
	
	////проверим возможность работы в этом интерфейсе    //Это только для ОФ актуально
	//ПроверитьВозможностьРаботыМодуля(Отказ);
	
	ЭтоПервыйЗапуск = Ложь;
	
	//проверим, не переходи ли это на ЭтотМодуль со старого модуля УФ
	Если НеПоказыватьПомощник <> Истина И ЕстьНесконвертированныеНаНовыйРелизДанные() Тогда 
		//открываем специализированную форму конвертации
		ПараметрыФормы=Новый Структура("Задача","ПереходНаНовуюРедакциюМодуля");
			Если Параметры.МодальностьЗапрещена Тогда 
				//Отказ = Истина;//переход всегда закрывает модуль после отработки  8.3.7 теперь не дает воспользоваться этой хитростью
				Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_ПомощникПереходаНаНовыйРелизУправляемая"", ПараметрыФормы,""ОбработчикЗакрытияПомощникаПереходаНаНовыйРелиз"")");//,ДополнительныеПараметры);
			Иначе
				ПолучитьФормуОбработки("Сервис_ПомощникПереходаНаНовыйРелизУправляемая",ПараметрыФормы).ОткрытьМодально();
				ОбработчикЗакрытияПомощникаПереходаНаНовыйРелиз();
				Отказ = Истина;//переход всегда закрывает модуль после отработки
			КонецЕсли;
			Возврат;
		//модуль придется перезапускать, этим займется обработчик
	КонецЕсли;
	
	Если НеПоказыватьПомощник <> Истина И НЕ ЗначениеЗаполнено(Параметры.ПараметрыАвтотестирования) Тогда
		ПодключитьОбработчикОжидания("ЗапуститьСтартовыйПомощник",0.1,Истина);
		ЭтоПервыйЗапуск = Истина;
	КонецЕсли;
	
	Если НЕ РезультатПроверкиЗапускНовойВерсииМодуля.ПродолжитьЗапуск Тогда
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьПредупреждение(Новый ОписаниеОповещения(""ОбработчикОтказаОткрытияЭтойФормы"", ЭтаФорма,),РезультатПроверкиЗапускНовойВерсииМодуля.ТекстОшибки,,""Контур.EDI"")");
		Иначе
			Предупреждение(РезультатПроверкиЗапускНовойВерсииМодуля.ТекстОшибки);
			Отказ=Истина;
			Возврат;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	//при первом запуске или в случае удаления настроек пользователя избежим долгого зависания
	Если НастройкаПериода.ДатаНачала=Дата(1,1,1) Тогда 
		НастройкаПериода.ДатаНачала=ДобавитьМесяц(ТекущаяДата(),-1);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПараметрыАвтотестирования) Тогда
		Автотесты_УстановитьНачальныеНастройки();
	Иначе
		//опять на сервер обновлять список
		Если не ЭтоПервыйЗапуск Тогда
			ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",0.1,Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ПараметрыАвтотестирования) Тогда
		//нужно понимать кастомы и управлять изменениями
		ПроверитьИзмененностьМодуля(); 
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	ПредложитьПодключитсяКДругимТСКлиент();
	
	Если ПроставитьСрокДействияСертификатов Тогда
		МодульОбменКлиент().ПроставитьСрокДействияСертификатов();
	КонецЕсли;
	
	Если ПредупредитьОбИстекающихСертификатах Тогда
   		ПодключитьОбработчикОжидания("ПредупредитьОбИстекающихСертификатах", 0.1, Истина);
	КонецЕсли;
	
	ИмяПМ = ИнициализироватьКлиентскийМодульПМ();
	Если ЗначениеЗаполнено(ИмяПМ) Тогда
		Попытка
			МодульКлиентПМ = ПолучитьФорму("ВнешняяОбработка."+ ИмяПМ +".Форма.МодульКлиент");
		Исключение
		КонецПопытки;
	КонецЕсли;	 
	
	ИмяММ = ИнициализироватьКлиентскийМодульМеркурий();
	Если ЗначениеЗаполнено(ИмяММ) Тогда
		ПутьКФормамМеркурий = "ВнешняяОбработка."+ ИмяММ +".Форма.";
	КонецЕсли;

	//вывести историю  //тоже обработчиком чтобы не улетело на задник
	Если ПоказатьИсториюВерсий = Истина Тогда 
		ПодключитьОбработчикОжидания("НовоеВРелизе",0.2,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбИстекающихСертификатах()
	
	МассивИстекающихСертификатов = ПодготовитьМассивИстекающихСертификатовСервер();

	Если МассивИстекающихСертификатов.Количество() > 0 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивСертификатов",	МассивИстекающихСертификатов);
		
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сертификаты_ПредупреждениеУправляемая"", ПараметрыФормы)");//,ДополнительныеПараметры);
		Иначе
			ПолучитьФормуОбработки("Сертификаты_ПредупреждениеУправляемая", ПараметрыФормы).ОткрытьМодально();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПредупредитьОбИстекающихСертификатах()

&НаКлиенте
Процедура ПроверитьИзмененностьМодуля()

	Если НужноПроверитьИзмененностьМодуляEDI=Истина Тогда
		Состояние("Проверяю целостность модуля Контур.EDI"); //Эта операция будет происходить не чаще 1 раза в 60 дней или каждый запуск если добавили во внешние
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДополнительнаяОбработкаСсылка",Параметры.ДополнительнаяОбработкаСсылка);
		ФормаПроверкиТекРелиза=ПолучитьФормуОбработки("Сервис_ОбновлениеУправляемая",ПараметрыФормы);
		ФормаПроверкиТекРелиза.ПроверитьНаличиеИВозможностьОбновления("Заглушка");
		Состояние("Целостность модуля проверена!");
	КонецЕсли;

КонецПроцедуры // ПроверитьИзмененностьМодуля()

&НаКлиенте
Процедура ОбработчикСогласияНаПервыйОбмен(РезультатВопроса,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт

	Если РезультатВопроса="Да, выполнить обмен с сервером" Тогда
		ВыполнитьОбмен(ЭтаФорма.Команды.Найти("ВыполнитьОбмен"));
	КонецЕсли;

КонецПроцедуры

//предложим подключиться к другим ТС если ПриСозданииНаСервере было решено это предложить
&НаКлиенте
Процедура ПредложитьПодключитсяКДругимТСКлиент()

    Если Параметры.ПредлагатьПодключиться Тогда
   		ПодключитьОбработчикОжидания("ПредложитьПодключитьсяКДругимТорговымСетямОбработчикОжидания",0.1,Истина);
    КонецЕсли;

КонецПроцедуры // ПредложитьПодключитсяКДругимТСКлиент()


&НаКлиенте
Процедура ПредложитьПодключитьсяКДругимТорговымСетямОбработчикОжидания()
	
	СтруктураПодключенияКДругимТС =  ПолучитьСписокНеподключенныхТорговыхСетейВызовСервера();
	Если СтруктураПодключенияКДругимТС.НеподключенныеСети.Количество()>0 Тогда
		
		
		
		//ФормаСетей = ПолучитьФорму("ФормаСервис_ПредложениеПодключитьсяКСетям");
		//ФормаСетей.ОсновнойGLN = ПолучитьКонстантуEDI("GLN_Основной");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОсновнойGLN",СтруктураПодключенияКДругимТС.ОсновнойGLN);
		ПараметрыФормы.Вставить("НеподключенныеСети",СтруктураПодключенияКДругимТС.НеподключенныеСети);
		
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_ПредложениеПодключитьсяКСетямУправляемая"", ПараметрыФормы,""ОбработчикПослеЗакрытияПредложенияПодключитьсяКСетям"")");//,ДополнительныеПараметры);
		Иначе
			ПолучитьФормуОбработки("Сервис_ПредложениеПодключитьсяКСетямУправляемая",ПараметрыФормы).ОткрытьМодально();
		КонецЕсли;
		//сунуть в форму
		//Для Каждого Сеть Из НеподключенныеСети Цикл
		//	НоваяСтрока = ФормаСетей.ТаблицаСетей.Добавить();
		//	НоваяСтрока.ТорговаяСеть = Сеть.Наименование;
		//	НоваяСтрока.Кнопка = "Подключиться";
		//	НоваяСтрока.СсылкаНаСайте = Сеть.СсылкаНаСайте;
		//КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// На всякий случай оставим разъем
&НаКлиенте
Процедура ОбработчикПослеЗакрытияПредложенияПодключитьсяКСетям(Параметры=Неопределено,ДопПараметры=Неопределено) Экспорт

	

КонецПроцедуры // ОбработчикПослеЗакрытияПредложенияПодключитьсяКСетям()


// Возвращаемое значение:
//   Структура   - ОсновнойGLN,НеподключенныеСети
&НаСервере
Функция ПолучитьСписокНеподключенныхТорговыхСетейВызовСервера()

	СтруктураПодключенияКДругимТС= Новый Структура("ОсновнойGLN,НеподключенныеСети",МодульОбъекта().ПолучитьКонстантуEDI("GLN_Основной"),МодульОбъекта().ПолучитьСписокНеподключенныхТорговыхСетей());	

	Возврат СтруктураПодключенияКДругимТС;
	
КонецФункции // ()


&НаКлиенте
Процедура ОбработчикОтказаОткрытияЭтойФормы(Параметр1=неопределено) Экспорт
	Если ЭтаФорма.Открыта() Тогда 
		ЭтаФорма.Закрыть(); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьРаботыМодуля(Отказ);
	
	Если Не МетаданныеМодуляВКонфигурацииАктуальны() Тогда
		Если Параметры.МодальностьЗапрещена = истина Тогда
			Выполнить("ПоказатьПредупреждение(,""Для использования данного интерфейса необходимо обновить конфигурацию"");");
		Иначе
			Предупреждение("Для использования данного интерфейса необходимо обновить конфигурацию");
			Отказ =истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//Если не Параметры.ПризнакАрхивВСообщенияхЗаполнен Тогда
	//	Если Не ЗаполнитьФлагАрхивВСообщениях() Тогда
	//		Отказ =истина;
	//	КонецЕсли;	
	//КонецЕсли;		

КонецПроцедуры

&НаСервере
Функция МетаданныеМодуляВКонфигурацииАктуальны()
	
	Если Метаданные.Справочники.КонтурEDI_Сообщения.Реквизиты.Найти("Архив")=Неопределено Тогда
		Возврат Ложь
	иначе
		Возврат Истина;
		
	КонецЕсли;
		
КонецФункции

//обновим сообщения: заполним флаг "Архив"
//и установим нужный признак
&НаКлиенте
Функция ЗаполнитьФлагАрхивВСообщениях()
	
	Если Вопрос("Необходимо сконвертировать сообщения для использования нового интерфейса. 
		|Это займет некоторое время, в зависимости от их количества.
		|Конвертацию можно прервать в любой момент нажатием Ctrl+Break и продолжить в следующий раз.
		|Продолжить?"
		,РежимДиалогаВопрос.ОКОтмена)<>КодВозвратаДиалога.ОК Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗаполнитьФлагАрхивВСообщенияхСервер() Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	               
КонецФункции

&НаСервере
Функция ЗаполнитьФлагАрхивВСообщенияхСервер()
	
	Попытка	
		//конвертация
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КонтурEDI_Сообщения.Ссылка
		|ИЗ
		|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		|ГДЕ
		|	(КонтурEDI_Сообщения.Архив <> ВЫБОР
		|				КОГДА КонтурEDI_Сообщения.Направление = ""Исходящее""
		|					ТОГДА ВЫБОР
		|							КОГДА КонтурEDI_Сообщения.Статус = ""Доставлен""
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА КонтурEDI_Сообщения.Статус = ""Загружен""
		|								ИЛИ КонтурEDI_Сообщения.Статус = ""Отклонен""
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			КОНЕЦ
		|			ИЛИ КонтурEDI_Сообщения.Партнер = ЗНАЧЕНИЕ(Справочник.КонтурEDI_ДополнительныеСправочники.)
		|			ИЛИ КонтурEDI_Сообщения.Партнер = НЕОПРЕДЕЛЕНО)"
		);
		Выборка = Запрос.Выполнить().Выбрать();
		Сч = 0;
		Пока Выборка.Следующий() Цикл
			Сч=Сч+1;
			#Если Клиент Тогда
				Состояние("Сконвертировано: "+Сч+" из "+Выборка.Количество());
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			Выборка.Ссылка.ПолучитьОбъект().Записать();
			
		КонецЦикла;
		
		МодульОбъекта().УстановитьКонстантуEDI("ПризнакАрхивВСообщенияхЗаполнен",Истина);
		
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьСтартовыйПомощник()
		
	ПараметрыФормы = Новый Структура;
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_СтартовыйПомощникУправляемая"", ПараметрыФормы, ""ОбработчикПослеРаботыСтартовогоПомощника"")");//,ДополнительныеПараметры);
	Иначе
		РезультатРаботыСтартовогоПомощника = ПолучитьФормуОбработки("Сервис_СтартовыйПомощникУправляемая",ПараметрыФормы,ЭтаФорма).ОткрытьМодально();
		ОбработчикПослеРаботыСтартовогоПомощника(РезультатРаботыСтартовогоПомощника);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработчикПослеРаботыСтартовогоПомощника(РезультатРаботыСтартовогоПомощника, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не РезультатРаботыСтартовогоПомощника = Истина Тогда
		
		ЭтаФорма.Закрыть(); //закрыли стартовый помощник	
		
	Иначе
	
		ОпределитьРежимРаботы();
		ЗаполнитьНастройкиОтборов();
		ВосстановитьНастройкиФормы();
		РазвернутьДеревоФильтровКлиент();
		ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",0.1,Истина);
		
		Если ЭтоПервыйЗапуск = истина Тогда 
			ТекстВопроса ="Выполнить первый обмен с сервером?";
			КнопкиВопроса=новый СписокЗначений;
			КнопкиВопроса.Добавить("Да, выполнить обмен с сервером");
			КнопкиВопроса.Добавить("Нет, я сначала проверю настройки");
			ДопПараметрДляПередачиВОбработчик=Неопределено;
			РезультатВопроса = Неопределено;
			
			Если Параметры.МодальностьЗапрещена Тогда
				Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияНаПервыйОбмен"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
			Иначе
				РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
				ОбработчикСогласияНаПервыйОбмен(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
//Включает/выключает видимость отборов
Процедура ОткрывашкаНажатие(Команда)
	
	Элементы.ПанельОтбораСообщений.Видимость= не Элементы.ПанельОтбораСообщений.Видимость;
	Элементы.Открывашка.Заголовок=?(Элементы.ПанельОтбораСообщений.Видимость,"<",">");
	Элементы.Открывашка.Ширина=?(Элементы.ПанельОтбораСообщений.Видимость,2,5);
	Элементы.Открывашка.Отображение=?(Элементы.ПанельОтбораСообщений.Видимость,ОтображениеКнопки.Текст,ОтображениеКнопки.КартинкаИТекст);
	ТекущийЭлемент = Элементы.ТабСообщения; // уберем рамку выделения у картинки
	Элементы.РазделительКартинка1.Видимость = Элементы.ПанельОтбораСообщений.Видимость;
	Элементы.РазделительКартинка2.Видимость = не Элементы.ПанельОтбораСообщений.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельОтборВидыСообщенийПоставщик(Команда)
	Параметры.РежимРаботы = "Поставщик";
	Если Не Элементы.Поставщик.Пометка Тогда
		Элементы.Поставщик.Пометка = Истина;
		ЗаполнитьНастройкиОтборов();
		РазвернутьДеревоФильтровКлиент();
		//ВосстановитьНастройкиФормы();
	КонецЕсли;
	Элементы.Сеть.Пометка = Ложь;
	ЗаполнитьСписокЗадачКлиент();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельОтборВидыСообщенийСеть(Команда)
	Параметры.РежимРаботы = "Покупатель";
	Если Не Элементы.Сеть.Пометка Тогда
		Элементы.Сеть.Пометка = Истина;
		ЗаполнитьНастройкиОтборов();
		РазвернутьДеревоФильтровКлиент();
		//ВосстановитьНастройкиФормы();
	КонецЕсли;
	Элементы.Поставщик.Пометка = Ложь;
	ЗаполнитьСписокЗадачКлиент();
КонецПроцедуры


&НаСервере
Функция ОпределитьРежимРаботы()
	// скинем
	Элементы.Сеть.Доступность = Ложь;
	Элементы.Сеть.Пометка = Ложь;
	Элементы.Поставщик.Доступность = Ложь;
	Элементы.Поставщик.Пометка = Ложь;
		
	Параметры.РежимРаботы = "Неизвестно";
	
	//в первую очередь прикинемся поставщиком
	Если МодульОбъекта().НастройкиМодуля.МыПоставщик
		И СокрЛП(МодульОбъекта().ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик"))<>""
	Тогда
		Параметры.РежимРаботы = "Поставщик";
		Элементы.Поставщик.Доступность = Истина;
		Элементы.Поставщик.Пометка = Истина;

	Иначе
		Элементы.Поставщик.Доступность = Ложь;
		Элементы.Поставщик.Пометка = Ложь;

	КонецЕсли;
	
	Если МодульОбъекта().НастройкиМодуля.МыТорговаяСеть
		И СокрЛП(МодульОбъекта().ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Покупатель"))<>""
	Тогда
		//дадим возможность переключения режима работы на "Покупатель"
		Элементы.Сеть.Доступность = Истина;
		Если Параметры.РежимРаботы <> "Поставщик" Тогда
			//и если сейчас мы не поставщик, то тогда уже постараемся работать как сеть
			Параметры.РежимРаботы = "Покупатель";
			Если Не Элементы.Поставщик.Пометка Тогда
				Элементы.Сеть.Пометка = Истина;
			КонецЕсли;	
		КонецЕсли;	
		
	Иначе
		Элементы.Сеть.Доступность = Ложь;
		Элементы.Сеть.Пометка = Ложь;
	КонецЕсли;	
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ВерсияПоддерживаетФоновыйОбмен(СсылкаНаСохраненныйМодуль)
	
	Попытка
		ТекВерсия =  СокрЛП(СсылкаНаСохраненныйМодуль.Версия);	
		
		ПерваяЦифраВерсии = Число(Лев(ТекВерсия,1));
		ВтороеЧислоВерсии = Число(Сред(ТекВерсия,3,2));
		ТретьеЧислоВерсии = Число(Сред(ТекВерсия,6,3));
		
		Если ПерваяЦифраВерсии=4 И ВтороеЧислоВерсии>=3 И ТретьеЧислоВерсии>=17 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ДополнительнаяОбработкаСсылка()

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	УдалосьЗапуститьВФоне=Ложь;
	ОбработкаВСправочникеНеПоддерживаетФоновыйОбмен = Неопределено;
	
	Если ЗначениеЗаполнено(ДополнительнаяОбработкаСсылка) Тогда 
		Если ВерсияПоддерживаетФоновыйОбмен(ДополнительнаяОбработкаСсылка) Тогда
			ОбработкаВСправочникеПоддерживаетФоновыйОбмен = Истина;
			Попытка
				Состояние("Запускаю обмен в фоне...",,,Элементы.ВыполнитьОбмен.Картинка);
				ЗапуститьОбменВФоне(УдалосьЗапуститьВФоне);
			Исключение
				УдалосьЗапуститьВФоне=Ложь;
			КонецПопытки;
		Иначе
			ОбработкаВСправочникеПоддерживаетФоновыйОбмен = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если УдалосьЗапуститьВФоне=Ложь Тогда
		Элементы.ВыполнитьОбмен.ЦветФона = новый Цвет(211, 242, 211);
		Элементы.ВыполнитьОбмен.Заголовок = "Обмен с сервером";

		//Обмен непосредственно из Этой формы
		Если ОбработкаВСправочникеПоддерживаетФоновыйОбмен=Ложь и УдалосьЗапуститьВФоне=Ложь Тогда
			Состояние("Выполняю обмен...",,"Обновите обработку в справочнике внешних и обмен будет запускаться в фоне",Элементы.ВыполнитьОбмен.Картинка);
		ИначеЕсли ОбработкаВСправочникеПоддерживаетФоновыйОбмен=Неопределено и УдалосьЗапуститьВФоне=Ложь Тогда
			Состояние("Выполняю обмен...",,"Сохраните обработку в справочнике внешних и обмен будет запускаться в фоне",Элементы.ВыполнитьОбмен.Картинка);
		Иначе
			Состояние("Выполняю обмен...",30,,Элементы.ВыполнитьОбмен.Картинка);
		КонецЕсли;
		
		ВыполнитьОбменСервер();
		ОтправитьИзвещенияОПолучении();
		ЗаполнитьСписокЗадачКлиент();
		#Если НЕ ВебКлиент Тогда
			Сигнал();
		#КонецЕсли
		
	КонецЕсли;
	
	//Состояние("Выполняю обмен...",30,,Элементы.ВыполнитьОбмен.Картинка);
	//ВыполнитьОбменСервер();
	//ЗаполнитьСписокЗадачКлиент();
	//#Если НЕ ВебКлиент Тогда
	//	Сигнал();
	//#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбменВФоне(УдалосьЗапуститьВФоне)
	
	ТекстЗаглушки="Обмен выполняется в фоне.
	|Вы можете продолжить работу с другими задачами или даже в другом приложении.
	|
	|По завершении обмена, мы подадим звуковой сигнал.";
	
	УдалосьЗапуститьВФоне=ложь;
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("ДополнительнаяОбработкаСсылка",ДополнительнаяОбработкаСсылка);
	ПараметрыКоманды.Вставить("СопровождающийТекст",ТекстЗаглушки);
	ПараметрыКоманды.Вставить("Заголовок","Контур.EDI обмен выполняется");
	ПараметрыКоманды.Вставить("ИдентификаторКоманды","ИнтерактивныйФоновыйОбмен");
	ОповещениеОЗавершении=неопределено;
	Выполнить("ОповещениеОЗавершении = Новый ОписаниеОповещения(""ВызовОбновленияСпискаПослеФоновогоОбмена"", ЭтаФорма, неопределено)");

	Попытка
		//ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне("ИнтерактивныйФоновыйОбмен",ПараметрыКоманды,Новый ОписаниеОповещения("ВызовОбновленияСпискаПослеФоновогоОбмена", ЭтаФорма, неопределено));
		//криворукие одинэсники, мало того что отобрали форму Дл.Оп.Доп.ОтчетовИОбработок, еще и фоном не дают запустить здесь
		Если Число(Лев(ВерсияБСП,1))=2 И Число(Сред(ВерсияБСП,3,1))>=3 Тогда
			
			Если Число(Сред(ВерсияБСП,5,1))>=4 Тогда
				
				ИмяПроцедуры = "ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне";
				Задание = Неопределено;
				Выполнить("Задание = ДополнительныеОтчетыИОбработкиВызовСервера.ЗапуститьДлительнуюОперацию(Этаформа.УникальныйИдентификатор, ПараметрыКоманды)");
				
				ПараметрыФормы = новый Структура();
				ПараметрыФормы.Вставить("ИдентификаторЗадания", Задание.ИдентификаторЗадания);
				ПараметрыФормы.Вставить("ВыводитьОкноОжидания", Истина);
				ПараметрыФормы.Вставить("ТекстСообщения", ТекстЗаглушки);
				
				Выполнить("ОткрытьФорму(""ОбщаяФорма.ДлительнаяОперация"", ПараметрыФормы,ЭтаФорма,,,,ОповещениеОЗавершении,РежимОткрытияОкнаФормы.Независимый)");
				
			ИначеЕсли Сред(ВерсияБСП,5,1)<4 Тогда
				
				ПараметрыФормыДлО=Новый Структура;
				ПараметрыФормыДлО.Вставить("ПараметрыЗапускаФоновогоЗадания",ПараметрыКоманды);
				Выполнить("ОткрытьФорму(""ОбщаяФорма.ДлительнаяОперацияДополнительныхОтчетовИОбработок"", ПараметрыФормыДлО, ЭтаФорма,,,,ОповещениеОЗавершении,РежимОткрытияОкнаФормы.Независимый)");
				
			Конецесли;
			
			
			УдалосьЗапуститьВФоне=Истина;
			ОригинальныйЦвет=Элементы.ВыполнитьОбмен.ЦветФона;
			Элементы.ВыполнитьОбмен.Доступность = Ложь;
			Элементы.ВыполнитьОбмен.ЦветФона = WebЦвета.ДымчатоБелый;
			Элементы.ВыполнитьОбмен.Заголовок = "Выполняется...";
			ЭтаФорма.Активизировать();
		Конецесли;
	Исключение
		УдалосьЗапуститьВФоне=Ложь;
		Элементы.ВыполнитьОбмен.ЦветФона = новый Цвет(211, 242, 211);
		Элементы.ВыполнитьОбмен.Заголовок = "Обмен с сервером";
	КонецПопытки;
	//ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне("ИнтерактивныйФоновыйОбмен",ПараметрыКоманды,ЭтаФорма);    //этот вариант не даст нам возможности вернуть управление после выполнения обмена
	
КонецПроцедуры // ЗапуститьОбменВФоне();()

&НаКлиенте
Процедура ВызовОбновленияСпискаПослеФоновогоОбмена(Параметр=Неопределено,ДопПараметр=Неопределено) Экспорт
	
	Состояние("Фоновый обмен завершен",100,,Элементы.ВыполнитьОбмен.Картинка);
	Элементы.ВыполнитьОбмен.Заголовок = "Обмен с сервером";
	Элементы.ВыполнитьОбмен.Доступность = Истина;
	Элементы.ВыполнитьОбмен.ЦветФона = новый Цвет(211, 242, 211);
	
	ПроверитьНеобходимостьОтправкиИзвещенийОПолучении();
	ОтправитьИзвещенияОПолучении();
	ЗаполнитьСписокЗадачКлиент();
	
	#Если НЕ ВебКлиент Тогда
		Сигнал();
	#КонецЕсли
	
КонецПроцедуры // ВызовОбновленияСпискаПослеФоновогоОбмена()

&НаСервере
Процедура ВыполнитьОбменСервер()
	
	МодульОбъекта().ВыполнитьОбменССервером();
	ПроверитьНеобходимостьОтправкиИзвещенийОПолучении();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьОтправкиИзвещенийОПолучении()
	
	НужноОтправитьИзвещенияОПолучении = МодульОбъекта().НужноОтправитьИзвещенияОПолучении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИзвещенияОПолучении()
	
	Если НужноОтправитьИзвещенияОПолучении Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ОбъектПараметрыКлиентСервер", 	Объект.ПараметрыКлиентСервер);
		
		МодульОбменКлиент().ОтправитьИзвещенияОПолучении();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрБыстрыеОтборыНажатие(Команда)
	БыстрыеОтборыСвернуть("");
	ТекущийЭлемент = Элементы.ТабСообщения;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПартнерыНажатие(Команда)
	ПартнерыСвернуть("");
	ТекущийЭлемент = Элементы.ТабСообщения;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыСвернуть(Кнопка)
	Параметры.СверткаБыстрыхОтборов = Не Параметры.СверткаБыстрыхОтборов;
	//Кнопка.Текст = ?(Кнопка.Пометка, "Типы сообщений", "Типы сообщений");
	Если Параметры.СверткаБыстрыхОтборов Тогда
		Элементы.БыстрыйОтборРазвернуть.Видимость = Истина;
		Элементы.БыстрыйОтборРазвернуть1.Видимость = Ложь;
		Элементы.ОтборГруппаБыстрыеОтборы.Видимость=Истина;
	Иначе
		Элементы.БыстрыйОтборРазвернуть.Видимость = Ложь;
		Элементы.БыстрыйОтборРазвернуть1.Видимость = Истина;
		Элементы.ОтборГруппаБыстрыеОтборы.Видимость=Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыСвернуть(Кнопка)
	Параметры.СверткаПартнеры = Не Параметры.СверткаПартнеры;
	//Кнопка.Текст = ?(Кнопка.Пометка, "Типы сообщений", "Типы сообщений");
	Если Параметры.СверткаПартнеры Тогда
		Элементы.ОтборПартнерыРазвернуть.Видимость = Истина;
		Элементы.ОтборПартнерыРазвернуть1.Видимость = Ложь;
		Элементы.ОтборПартнеры.Видимость=Истина;
	Иначе
		Элементы.ОтборПартнерыРазвернуть.Видимость = Ложь;
		Элементы.ОтборПартнерыРазвернуть1.Видимость = Истина;
		Элементы.ОтборПартнеры.Видимость=Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипыСообщенийСвернуть(Кнопка)
	Параметры.СверткаТипыСообщений = Не Параметры.СверткаТипыСообщений;
	//Кнопка.Текст = ?(Кнопка.Пометка, "Типы сообщений", "Типы сообщений");
	Если Параметры.СверткаТипыСообщений Тогда
		Элементы.ОтборТипыСообщенийРазвернуть.Видимость = Истина;
		Элементы.ОтборТипыСообщенийРазвернуть1.Видимость = Ложь;
		Элементы.ОтборТипыСообщений.Видимость=Истина;
	Иначе
		Элементы.ОтборТипыСообщенийРазвернуть.Видимость = Ложь;
		Элементы.ОтборТипыСообщенийРазвернуть1.Видимость = Истина;
		Элементы.ОтборТипыСообщений.Видимость=Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТребуемыеДействияСвернуть(Кнопка)
	Параметры.СверткаТребуемыеДействия = Не Параметры.СверткаТребуемыеДействия;
	//Кнопка.Текст = ?(Кнопка.Пометка, "Типы сообщений", "Типы сообщений");
	Если Параметры.СверткаТребуемыеДействия Тогда
		Элементы.ОтборТребуемыеДействияРазвернуть.Видимость = Истина;
		Элементы.ОтборТребуемыеДействияРазвернуть1.Видимость = Ложь;
		Элементы.ОтборТребуемыеДействия.Видимость=Истина;
	Иначе
		Элементы.ОтборТребуемыеДействияРазвернуть.Видимость = Ложь;
		Элементы.ОтборТребуемыеДействияРазвернуть1.Видимость = Истина;
		Элементы.ОтборТребуемыеДействия.Видимость=Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПартнерыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		Если Поле.Имя = "ОтборПартнерыИзменить" Тогда
			
			ВвестиНового=Ложь;
			Состояние("Открываю карточку партнера",50,,Элементы.Настройки.Картинка);
			ОткрытьФормуРедактированияПартнера(ВвестиНового);	
			
		ИначеЕсли Поле.Имя = "ОтборПартнерыЗначение" Тогда
			Для Каждого Стр Из ОтборПартнеры Цикл
				Стр.Пометка = (Стр.Значение=ТекДанные.Значение);
			КонецЦикла;
			
			ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",0.1,Истина);

		КонецЕсли;
		
	КонецЕсли;
	
	СтандартнаяОбработка=Ложь;
КонецПроцедуры



&НаКлиенте
Процедура ЗаполнитьСписокЗадачКлиент()
	
	Состояние("Строю список задач...",50,,Элементы.ОбновитьСписок.Картинка);
	
	//Запомним положение курсора
	ТекСтрока = Элементы.ТабСообщения.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда  //м.б. открытие модуля
		Параметры.ТекСообщение=Элементы.ТабСообщения.ТекущиеДанные.СообщениеСсылка;
		Параметры.ТекДокумент=Элементы.ТабСообщения.ТекущиеДанные.Документ;
	иначе
		Параметры.ТекСообщение=Неопределено;
		Параметры.ТекДокумент=Неопределено;
	КонецЕсли;
	
    Объект.ТабСообщения.Очистить();
	
	ЗаполнитьСписокЗадачСервер();
	УстановитьЗаголовокФормы();
	
	Состояние("Обновлено!",,"Список задач актуализирован",Элементы.ВыполнитьВыбранныеЗадачи.Картинка);
	
КонецПроцедуры
 
//общая точка входа для заполнения всего и всем
//дальше разбивается на разные блоки
&НаСервере
Процедура ЗаполнитьСписокЗадачСервер()
	
	//Если НастройкаОформленияТребуемогоДействия.Количество()=0 Тогда
	//НастройкаОформленияТребуемогоДействия.Загрузить(МодульОбъекта().ПолучитьТаблицуТребуемыхДействий(Параметры.РежимРаботы,ПоказыватьЗавершенные));
	//КонецЕсли; 
	
	// НастройкаОформленияТребуемогоДействия - и так заполняется в ключевые моменты (изменения настроек модуля и режима поставщик-сеть)
	
	//Непосредственно сборка списка
	СобратьТаблицуСообщенийИЗадач();
	
	//действия после обновления списка
	ДатаПоследнегоВыполненияОбмена = МодульОбъекта().ПолучитьКонстантуEDI("ДатаПоследнегоВыполненияОбмена");
	
КонецПроцедуры

&НаСервере
Процедура СобратьТаблицуСообщенийИЗадач()
	
	//МодульОбъекта().ОбновитьКэшПартнеров(); //соответствия контрагентов EDIпартнерам и настройки цепочек
	//все равно вызовется далее в ИнициализироватьЗапросСКэшемПартнеров
	
	//поместим сюда кэш партнеров
	//ЗапросСКэшемПартнеров = ИнициализироватьЗапросСКэшемПартнеров(ложь); //ВнешнееХранилище - ложь
	//давно потеряло актуальность МО ПостроитьСписокЗадач_Сервер - вполне самодостаточна
	
	//подготовим параметры для заполнения списка задач
	НачалоПериода = НастройкаПериода.ДатаНачала;
	Если Не ЗначениеЗаполнено(НастройкаПериода.ДатаОкончания) Тогда
		КонецПериода = КонецДня(Дата("39990101"));
	Иначе	
		КонецПериода = КонецДня(НастройкаПериода.ДатаОкончания);
	КонецЕсли;	
	
	МассивПартнеров = ПолучитьПартнеровОтбора(Ложь);
	МассивТиповСообщений = ПолучитьТипыСообщенийОтбора(Ложь);
	МассивТребуемыхДействий = ПолучитьТребуемыеДействияОтбора(Ложь);
	МассивОрганизаций = ПолучитьОрганизацииОтбора(Ложь);
	
	//заполним список задач
	ПодсчитанныеКоличестваВОтборах = МодульОбъекта().ПостроитьСписокЗадач_Сервер(Параметры.РежимРаботы,НачалоПериода,КонецПериода,МассивПартнеров,МассивТиповСообщений,МассивТребуемыхДействий,МассивОрганизаций,ПоказыватьЗавершенные);
	
	ПроставитьКоличествоВОтборах(ПодсчитанныеКоличестваВОтборах);
	
	МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ПослеОбновленияСпискаЗадач");
	
	ЗначениеВРеквизитФормы(МодульОбъекта().ТабСообщения,"Объект.ТабСообщения");   //не забыть вывести в форму
	
	Для каждого ДанныеСтроки ИЗ Объект.ТабСообщения Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ТребуемоеДействие) Тогда
			
			//		НастройкаОформленияТребуемогоДействия = НастройкаОтображенияСписка.ОформлениеКолонокПоЗначению.ТребуемоеДействие;
			
			НайденныеСтроки = НастройкаОформленияТребуемогоДействия.НайтиСтроки(Новый Структура("Значение",ДанныеСтроки.ТребуемоеДействие));
			Если НайденныеСтроки.Количество()=1 Тогда
				
				ДанныеСтроки.Иконка=НайденныеСтроки[0].Иконка;
				
				//еще цвет!!! и гиперссылка  но через элемент
				
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;

	ВосстановитьПоложениеТекСтрокиВСписке();
КонецПроцедуры

&НаСервере
Процедура ПроставитьКоличествоВОтборах(ПодсчитанныеКоличестваВОтборах)
	
	Если ПодсчитанныеКоличестваВОтборах<>Неопределено Тогда
		
		ТабКоличествоПартнеров = ПодсчитанныеКоличестваВОтборах.ТабКоличествоПартнеров;
		СтрокаГруппыПартнеров = ПолучитьРодителяГруппыНастроекИзДанныхФормы("Партнеры");
		Если ТипЗНЧ(СтрокаГруппыПартнеров)=Тип("ДанныеФормыЭлементДерева") Тогда
			Для Каждого СтрокаОтбора Из СтрокаГруппыПартнеров.ПолучитьЭлементы() Цикл
				СтрокаОтбора.Количество = "";//обнулим сначала
				НайденнаяСтрока = ТабКоличествоПартнеров.Найти(СтрокаОтбора.Значение);
				Если НайденнаяСтрока<>Неопределено Тогда
					СтрокаОтбора.Количество = "("+Формат(НайденнаяСтрока.Количество,"ЧЦ=3; ЧДЦ=0; ЧГ=")+")";
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
			
		ТабКоличествоСообщений = ПодсчитанныеКоличестваВОтборах.ТабКоличествоСообщений;
		СтрокаГруппыТиповСообщений = ПолучитьРодителяГруппыНастроекИзДанныхФормы("ТипыСообщений");
		Для Каждого СтрокаОтбора Из СтрокаГруппыТиповСообщений.ПолучитьЭлементы() Цикл
			СтрокаОтбора.Количество = "";//обнулим сначала
			НайденнаяСтрока = ТабКоличествоСообщений.Найти(СтрокаОтбора.Значение);
			Если НайденнаяСтрока<>Неопределено Тогда
				СтрокаОтбора.Количество = "("+Формат(НайденнаяСтрока.Количество,"ЧЦ=3; ЧДЦ=0; ЧГ=")+")";
			КонецЕсли;	
		КонецЦикла;	
		
		ТабКоличествоТребуемыхДействий = ПодсчитанныеКоличестваВОтборах.ТабКоличествоТребуемыхДействий;
		СтрокаГруппыДействий = ПолучитьРодителяГруппыНастроекИзДанныхФормы("ТребуемыеДействия");
		Для Каждого СтрокаОтбора1 Из СтрокаГруппыДействий.ПолучитьЭлементы() Цикл
			СтрокаОтбора1.Количество = "";
			СтрОтбора1КоличествоЧисло = 0;
			Для Каждого СтрокаОтбора2 Из СтрокаОтбора1.ПолучитьЭлементы() Цикл
				СтрокаОтбора2.Количество = "";//обнулим сначала
				НайденнаяСтрока = ТабКоличествоТребуемыхДействий.Найти(СтрокаОтбора2.Значение);
				Если НайденнаяСтрока<>Неопределено Тогда
					СтрокаОтбора2.Количество = "("+Формат(НайденнаяСтрока.Количество,"ЧЦ=3; ЧДЦ=0; ЧГ=")+")";
					СтрОтбора1КоличествоЧисло = СтрОтбора1КоличествоЧисло + НайденнаяСтрока.Количество;
					СтрокаОтбора1.Количество = "("+Формат(СтрОтбора1КоличествоЧисло,"ЧЦ=3; ЧДЦ=0; ЧГ=")+")";
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;	
		
		ТабКоличествоОрганизаций = ПодсчитанныеКоличестваВОтборах.ТабКоличествоОрганизаций;
		СтрокаГруппыОрганизаций = ПолучитьРодителяГруппыНастроекИзДанныхФормы("Организации");
		Для Каждого СтрокаОтбора Из СтрокаГруппыОрганизаций.ПолучитьЭлементы() Цикл
			СтрокаОтбора.Количество = "";//обнулим сначала
			НайденнаяСтрока = ТабКоличествоОрганизаций.Найти(СтрокаОтбора.Значение);
			Если НайденнаяСтрока<>Неопределено Тогда
				СтрокаОтбора.Количество = "("+Формат(НайденнаяСтрока.Количество,"ЧЦ=3; ЧДЦ=0; ЧГ=")+")";
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	

КонецПроцедуры // ПроставитьКоличествоВОтборах()

// Восстановим положение курсора
//тек строку установим на серверной части чтобы избежать перескоков строк
&НаСервере
Процедура ВосстановитьПоложениеТекСтрокиВСписке()
	СтараяСтрокаНайдена = Ложь;
	СтрОтбора=     Новый Структура("СообщениеСсылка", Параметры.ТекСообщение);
	НайденныеСтроки=Объект.ТабСообщения.НайтиСтроки(СтрОтбора);
	Если НайденныеСтроки.Количество()>0 Тогда 
		Идентификатор=НайденныеСтроки[0].ПолучитьИдентификатор();
		Элементы.ТабСообщения.ТекущаяСтрока=Идентификатор;
		СтараяСтрокаНайдена = Истина;
	КонецЕсли;
	
	Если Не СтараяСтрокаНайдена Тогда 
		СтрОтбора=     Новый Структура("Документ", Параметры.ТекДокумент);
		НайденныеСтроки=Объект.ТабСообщения.НайтиСтроки(СтрОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда 
			Идентификатор=НайденныеСтроки[0].ПолучитьИдентификатор();
			Элементы.ТабСообщения.ТекущаяСтрока=Идентификатор;
			СтараяСтрокаНайдена = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Создадим запрос, в котором уже будут временные таблицы партнеров и их цепочек сообщений
&НаСервере
Функция ИнициализироватьЗапросСКэшемПартнеров(ДляВнешнегоХранилища = Ложь)
	
	//гарантированно обновится далее в момент МодульОбъекта()
	//МодульОбъекта().ОбновитьКэшПартнеров(); //соответствия контрагентов EDIпартнерам и настройки цепочек
	
	Если ДляВнешнегоХранилища Тогда
		//Запрос = СоединениеСХранилищем.NewObject("Запрос");
		//Запрос.МенеджерВременныхТаблиц  = СоединениеСХранилищем.NewObject("МенеджерВременныхТаблиц");
		//
		//СтруктураКолонокПреобразуемыхВСсылки = Новый Структура(
		//					"Партнер",
		//					"КонтурEDI_ДополнительныеСправочники"
		//					);
		//
		//Запрос.УстановитьПараметр("ТаблицаКэшПартнеров",				ПоместитьТаблицуВоВнешнююБазу(ТаблицаКэшПартнеров,СтруктураКолонокПреобразуемыхВСсылки));
		//Запрос.УстановитьПараметр("ТаблицаКэшПартнеровКонтрагентов",	ПоместитьТаблицуВоВнешнююБазу(ТаблицаКэшПартнеровКонтрагентов,СтруктураКолонокПреобразуемыхВСсылки));
		//
	Иначе
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ТаблицаКэшПартнеров",				МодульОбъекта().ТаблицаКэшПартнеров);
		Запрос.УстановитьПараметр("ТаблицаКэшПартнеровКонтрагентов",	МодульОбъекта().ТаблицаКэшПартнеровКонтрагентов);
		
	КонецЕсли;
	Запрос.УстановитьПараметр("Партнеры",				ПолучитьПартнеровОтбора(ДляВнешнегоХранилища));
	
	Запрос.Текст = 
	"Выбрать * Поместить ТаблицаКэшПартнеров из &ТаблицаКэшПартнеров как _ТаблицаКэшПартнеров 
	| Где _ТаблицаКэшПартнеров.Партнер в (&Партнеры) 
	|Индексировать по Партнер,СообщениеБлокирующееORDERS,СообщениеБлокирующееORDRSP,СообщениеБлокирующееDESADV,СообщениеБлокирующееRECADV,СообщениеБлокирующееINVOIC;
	|Выбрать * Поместить ТаблицаКэшПартнеровКонтрагентов из &ТаблицаКэшПартнеровКонтрагентов как _ТаблицаКэшПартнеровКонтрагентов
	| Где _ТаблицаКэшПартнеровКонтрагентов.Партнер в (&Партнеры) 
	| Индексировать по Контрагент, Партнер,СообщениеБлокирующееORDERS,СообщениеБлокирующееORDRSP,СообщениеБлокирующееDESADV,СообщениеБлокирующееRECADV,СообщениеБлокирующееINVOIC";
	//может, и остальные поля индексировать? Надо глянуть, что в соединениях еще участвует
	
	Если ДляВнешнегоХранилища Тогда
		//СоединениеСХранилищем.ВыполнитьЗапросСОтладкой(Запрос);
		Запрос.Выполнить();
	Иначе
		Запрос.Выполнить();
	КонецЕсли;	
	
	//здесь же заполним даты для отбора
	//ну и отборы по партнерам удобно сюда же закинуть
	Запрос.УстановитьПараметр("НачалоПериода",НастройкаПериода.ДатаНачала);
	Если Не ЗначениеЗаполнено(НастройкаПериода.ДатаОкончания) Тогда
		Запрос.УстановитьПараметр("КонецПериода",КонецДня(Дата("39990101")));
	Иначе	
		Запрос.УстановитьПараметр("КонецПериода",КонецДня(НастройкаПериода.ДатаОкончания));
	КонецЕсли;	
	
	Возврат Запрос;
	
КонецФункции	

&НаСервере
//получает массив требуемых действий, которые отмечены флажками в отборе левой панели
//верхние строки не включает
Функция ПолучитьТребуемыеДействияОтбора(ДляВнешнегоХранилища,ДляСохраненияНастроек = Ложь)
	МассивТД = Новый Массив;
	
	СтрокаГруппыДействий = ПолучитьРодителяГруппыНастроекИзДанныхФормы("ТребуемыеДействия");
	
	ЕстьПропуски = Ложь;
	
	Для Каждого Стр1 Из СтрокаГруппыДействий.ПолучитьЭлементы() Цикл
		//Если Стр1.Пометка Тогда
		//	МассивТД.Добавить(Стр1.Значение);
		//КонецЕсли;	
		Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
			Если Стр2.Пометка Тогда
				МассивТД.Добавить(Стр2.Значение);
			Иначе
				ЕстьПропуски = Истина;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Если ДляСохраненияНастроек Тогда
		
		Если НЕ ЕстьПропуски Тогда
			МассивТД = Новый Массив;
		КонецЕсли;
		
		Возврат МассивТД;
		
	КонецЕсли;
	
	//Если ДляВнешнегоХранилища Тогда
	//	МассивВнешнейБазы = СоединениеСХранилищем.NewObject("Массив");
	//	Для Каждого Эл Из МассивТД Цикл
	//		МассивВнешнейБазы.Добавить(Эл);
	//	КонецЦикла;	
	//	Возврат МассивВнешнейБазы;
	//КонецЕсли;	
	
	Возврат МассивТД;
КонецФункции

//получает массив партнеров, которые отмечены флажками в отборе левой панели
&НаСервере
Функция ПолучитьПартнеровОтбора(ДляВнешнегоХранилища,ДляСохраненияНастроек = Ложь)
	
	МассивТД = Новый Массив;
	
	СтрокаГруппыПартнеров = ПолучитьРодителяГруппыНастроекИзДанныхФормы("Партнеры");
	
	ЕстьПропуски = Ложь;
	
	Для Каждого Стр Из СтрокаГруппыПартнеров.ПолучитьЭлементы() Цикл
		Если Стр.Пометка Тогда
			МассивТД.Добавить(Стр.Значение);
		Иначе
			ЕстьПропуски = Истина;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ДляСохраненияНастроек Тогда
		
		Если НЕ ЕстьПропуски Тогда
			МассивТД = Новый Массив;
		КонецЕсли;
		
		Возврат МассивТД;
		
	КонецЕсли;
		
	//Если ДляВнешнегоХранилища Тогда
	//	МассивВнешнейБазы = СоединениеСХранилищем.NewObject("Массив");
	//	Для Каждого Эл Из МассивТД Цикл
	//		МассивВнешнейБазы.Добавить(СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Эл));
	//	КонецЦикла;	
	//	Возврат МассивВнешнейБазы;
	//КонецЕсли;	
	
	Возврат МассивТД;
КонецФункции	

//получает массив Организаций, которые отмечены флажками в отборе левой панели
&НаСервере
Функция ПолучитьОрганизацииОтбора(ДляВнешнегоХранилища,ДляСохраненияНастроек = Ложь)
	
	МассивТД = Новый Массив;
	
	СтрокаГруппыПартнеров = ПолучитьРодителяГруппыНастроекИзДанныхФормы("Организации");
	
	ЕстьПропуски = Ложь;
	
	Для Каждого Стр Из СтрокаГруппыПартнеров.ПолучитьЭлементы() Цикл
		Если Стр.Пометка Тогда
			МассивТД.Добавить(Стр.Значение);
		Иначе
			ЕстьПропуски = Истина;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ДляСохраненияНастроек Тогда
		
		Если НЕ ЕстьПропуски Тогда
			МассивТД = Новый Массив;
		КонецЕсли;
		
		Возврат МассивТД;
		
	КонецЕсли;
		
	//Если ДляВнешнегоХранилища Тогда
	//	МассивВнешнейБазы = СоединениеСХранилищем.NewObject("Массив");
	//	Для Каждого Эл Из МассивТД Цикл
	//		МассивВнешнейБазы.Добавить(СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Эл));
	//	КонецЦикла;	
	//	Возврат МассивВнешнейБазы;
	//КонецЕсли;	
	
	Возврат МассивТД;
КонецФункции	

//получает массив типов сообщений, которые отмечены флажками в отборе левой панели
&НаСервере
Функция ПолучитьТипыСообщенийОтбора(ДляВнешнегоХранилища,ДляСохраненияНастроек = Ложь)
	МассивТД = Новый Массив;
	
	СтрокаГруппыТиповСообщений = ПолучитьРодителяГруппыНастроекИзДанныхФормы("ТипыСообщений");
	
	ЕстьПропуски = Ложь;
	
	Для Каждого Стр Из СтрокаГруппыТиповСообщений.ПолучитьЭлементы() Цикл
		Если Стр.Пометка Тогда
			МассивТД.Добавить(Стр.Значение);
		Иначе
			ЕстьПропуски = Истина;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ДляСохраненияНастроек Тогда
		
		Если НЕ ЕстьПропуски Тогда
			МассивТД = Новый Массив;
		КонецЕсли;
		
		Возврат МассивТД;
		
	КонецЕсли;
	
	//Если ДляВнешнегоХранилища Тогда
	//	МассивВнешнейБазы = СоединениеСХранилищем.NewObject("Массив");
	//	Для Каждого Эл Из МассивТД Цикл
	//		МассивВнешнейБазы.Добавить(Эл);
	//	КонецЦикла;	
	//	Возврат МассивВнешнейБазы;
	//КонецЕсли;	
	
	Возврат МассивТД;
КонецФункции	

&НаКлиенте
Процедура ОткрытьФормуРедактированияПартнера(ВвестиНового)
	
	ТекСтрока = Элементы.ДеревоФильтров.ТекущиеДанные;
	
	Если ВвестиНового=истина или НЕ ТекСтрока=Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Значение) Тогда
			
			ПараметрыФормы=	Новый Структура;
			ПараметрыФормы.Вставить("СсылкаНаПартнера", ТекСтрока.Значение);
			
			Если Параметры.МодальностьЗапрещена Тогда 
				Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Партнеры_ЭлементУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияПартнеров"")");//,ДополнительныеПараметры);
			Иначе
				ПолучитьФормуОбработки("Партнеры_ЭлементУправляемая",ПараметрыФормы).ОткрытьМодально();
				ОбработчикПослередактированияПартнеров();
			КонецЕсли;
			
		КонецЕсли;
	иначе
		ВызватьИсключение("Что-то не так с активностью строки партнера или вводом нового");//начинаем добавлять в модуль элементы защитного программирования
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ИмяФормы, ПараметрыФормы = Неопределено , ВладелецФормы  = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь, ПутьКФормамОбработки = Неопределено)
	
	Если ПараметрыФормы=Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	Если ВладелецФормы = Неопределено Тогда
		ВладелецФормы =	ЭтаФорма;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресХранилища",							Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("IDОсновнойФормы",							Параметры.IDОсновнойФормы);
	ПараметрыФормы.Вставить("КэшироватьМодульОбъекта",					Параметры.КэшироватьМодульОбъекта);
	
	ПолучаемаяФорма=	ПолучитьФорму(?(ПутьКФормамОбработки = Неопределено, ПутьКФормам, ПутьКФормамОбработки)+ИмяФормы
										, ПараметрыФормы
										, ВладелецФормы
										, КлючУникальности);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы=	ВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПартнера(Команда)
	ПараметрыФормы=	Новый Структура;
	ПараметрыФормы.Вставить("ОткрытаКакДобавлениеПартнера",Истина);
	
	Состояние("Запрашиваю данные по сетям...",30,,Элементы.ВыполнитьОбмен.Картинка);
	
	Если Параметры.РежимРаботы = "Поставщик" Тогда
		
		Если Параметры.МодальностьЗапрещена Тогда       
			Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_СтартовыйПомощникУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияПартнеров"")");//,ДополнительныеПараметры);
		Иначе
			
			ФормаЭлемента=ПолучитьФормуОбработки("Сервис_СтартовыйПомощникУправляемая",ПараметрыФормы);
			//ФормаЭлемента.СсылкаНаПартнера = ТекСтрока.Ссылка;
			ФормаЭлемента.ОткрытьМодально();
			ОбработчикПослередактированияПартнеров();
		КонецЕсли;
	Иначе
		
		Если Параметры.МодальностьЗапрещена Тогда       
			Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Партнеры_СписокУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияПартнеров"")");//,ДополнительныеПараметры);
		Иначе
			
			ФормаЭлемента=ПолучитьФормуОбработки("Партнеры",ПараметрыФормы);
			//ФормаЭлемента.СсылкаНаПартнера = ТекСтрока.Ссылка;
			ФормаЭлемента.ОткрытьМодально();
			ОбработчикПослередактированияПартнеров();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБыстрыеОтборы(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ФильтрТипыСообщенийНажатие(Команда)
	ТипыСообщенийСвернуть("");
	ТекущийЭлемент = Элементы.ТабСообщения;

КонецПроцедуры

&НаКлиенте
Процедура ОтборПартнерыПередУдалением(Элемент, Отказ)
	Отказ = истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипыСообщенийПередУдалением(Элемент, Отказ)
	Отказ = истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПартнерыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипыСообщенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = истина;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрТребуемыеДействияНажатие(Команда)
	ТребуемыеДействияСвернуть("");
	ТекущийЭлемент = Элементы.ТабСообщения;
КонецПроцедуры

&НаКлиенте
Процедура ОтборТребуемыеДействияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		Если Поле.Имя = "ОтборТребуемыеДействияЗначение" Тогда
			Для Каждого Стр Из ОтборТребуемыеДействия.ПолучитьЭлементы() Цикл
				Стр.Пометка = (Стр.Значение=ТекДанные.Значение);
				
				Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
					Стр2.Пометка = ((Стр2.Значение=ТекДанные.Значение) или Стр.Пометка);     //сбросим пометку везде за исключенем когда нам тыкнули в группу
				КонецЦикла;
			КонецЦикла;
			
			ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",0.1,Истина);
		КонецЕсли;
	КонецЕсли;
	СтандартнаяОбработка=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОтборТребуемыеДействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборТребуемыеДействияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборТребуемыеДействияПометкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ОтборТребуемыеДействия.ТекущиеДанные;
	УстановленныйФлажок=ТекДанные.Пометка;
	
	Для Каждого Стр Из ОтборТребуемыеДействия.ПолучитьЭлементы() Цикл
		Если Стр.Значение=ТекДанные.Значение и Стр.ПолучитьЭлементы().Количество()>0 Тогда 
			Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
				Стр2.Пометка = УстановленныйФлажок;     //ставим так же как у предка
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	////ЗаполнитьСписокЗадачКлиент();   //не надо так)
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипыСообщенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		Если Поле.Имя = "ОтборТипыСообщенийЗначение" Тогда
			Для Каждого Стр Из ОтборТипыСообщений Цикл
				Стр.Пометка = (Стр.Значение=ТекДанные.Значение);
			КонецЦикла;
			
			ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",0.1,Истина);

		КонецЕсли;
		
	КонецЕсли;
	
	СтандартнаяОбработка=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда=неопределено,ДопПараметр=Неопределено) Экспорт //может выступать обработчиком
	ЗаполнитьСписокЗадачКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	ОткрытьВыборПериода();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборПериода()
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = НастройкаПериода;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("Диалог.Показать(Новый ОписаниеОповещения(""ОбработчикВыбораПериода"", ЭтаФорма,))");
	Иначе
		Если Диалог.Редактировать() Тогда 
			ОбработчикВыбораПериода(Диалог.Период,неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработчикВыбораПериода(Период,ДополнительныеПараметры=неопределено) Экспорт
	Если Период<>Неопределено Тогда
		Если Период.ДатаНачала > Период.ДатаОкончания 
			И ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
			Предупреждение("Дата начала периода не должна превышать дату окончания периода.");
			Возврат;
		КонецЕсли;
		НастройкаПериода = Период;
		ЗаполнитьСписокЗадачКлиент();
		УстановитьЗаголовокФормы();
	КонецЕсли;
КонецПроцедуры // ОбработчикВыбораПериода()

//сформируем заголовок формы

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	_ПредставлениеПериода = ПредставлениеПериода(НастройкаПериода.ДатаНачала,НастройкаПериода.ДатаОкончания);
	ТекстЗаголовкаФормы = "Контур.EDI "+НомерРелизаМодуля+" / ";
	ТекстПериода = ?(_ПредставлениеПериода="","<период не установлен>",_ПредставлениеПериода);
	
	ЭтаФорма.Заголовок = ТекстЗаголовкаФормы + " "+ТекстПериода + " / Последний обмен с сервером: " + ДатаПоследнегоВыполненияОбмена;
	
КонецПроцедуры	


&НаКлиенте
Процедура ПоказатьЗавершенныеПереключение(Команда)
	
	Элементы.ПоказатьЗавершенные.Пометка = не Элементы.ПоказатьЗавершенные.Пометка;
	Элементы.ПоказатьЗавершенные.Заголовок = ?(Элементы.ПоказатьЗавершенные.Пометка,"Скрыть завершенные","Показать завершенные"); 
	ПоказыватьЗавершенные = Элементы.ПоказатьЗавершенные.Пометка;
	Состояние("Переключаю режим...",15,,Элементы.Настройки.Картинка);
	
	ЗаполнитьСписокТребуемыхДействий();
	
	РазвернутьДеревоОтбораТребуемоеДействиеКлиент();
	//Если Параметры.МодальностьЗапрещена Тогда 
	//	Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбновитьСписок"", ЭтаФорма), ""Обновить список задач?"", РежимДиалогаВопрос.ДаНет)");
	//иначе
	//	Если Вопрос("Обновить список задач?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ОбновитьСписок(ЭтаФорма.Команды.Найти("ОбновитьСписок"));
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуОбъектаМодально(ИмяФормы, ПараметрыФормы = Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено,РежимБлокирования = Неопределено)
	//отказ от модальности
	Если РежимБлокирования = Неопределено Тогда
		РежимБлокирования=	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	Если ПараметрыФормы=Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресХранилища",			Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("IDОсновнойФормы",			Параметры.IDОсновнойФормы);
	ПараметрыФормы.Вставить("КэшироватьМодульОбъекта",	Параметры.КэшироватьМодульОбъекта);
	
	Если ВладелецОбработчика = Неопределено Тогда
		ВладелецОбработчика=	ЭтаФорма;
	КонецЕсли;
	
	Если ИмяОбработчика = Неопределено Тогда
		ОписаниеОбработчика=	Неопределено;
	Иначе	
		Выполнить("ОписаниеОбработчика=	Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика)");
	КонецЕсли;
	
	Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецОбработчика, , , ,  ОписаниеОбработчика, РежимБлокирования)");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослередактированияУчетныхЗаписей(ПараметрыЗакрытияИнтерактивнойФормы = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбновитьКэшМодуляОбъекта();   //могли поменять ключевые настройки (например транспорт)
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокУчетныхЗаписей(Команда)
	ПараметрыФормы=	Новый Структура;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""УчетныеЗаписи_СписокУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияУчетныхЗаписей"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("УчетныеЗаписи_СписокУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослередактированияУчетныхЗаписей();
	КонецЕсли;
	
КонецПроцедуры                            

&НаКлиенте
Процедура ОткрытьСписокПользователей(Команда)
	ПараметрыФормы=	Новый Структура;
	
	Если Параметры.МодальностьЗапрещена Тогда                                                                           				//		\|/не ошибка
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Пользователи_СписокУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияУчетныхЗаписей"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Пользователи_СписокУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослередактированияУчетныхЗаписей();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтартовыйПомощник(Команда)
	
	ЗапуститьСтартовыйПомощник();			
	
КонецПроцедуры


&НаКлиенте
Процедура РазделительКартинкаНажатие(Элемент)
	ОткрывашкаНажатие("");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ПараметрыФормы=	Новый Структура;
	ПараметрыФормы.Вставить("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""СервисНастройкиУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияНастроек"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("СервисНастройкиУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослередактированияНастроек();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослередактированияНастроек(ПараметрыЗакрытияИнтерактивнойФормы=неопределено, ДополнительныеПараметры=неопределено) Экспорт
	//пересобрать требуемые действия т.к. мог поменяться шаблон документов upd- лучше пересобрать вообще все - могли и в партнеров сходить и м.б. еще куда-нибудь
	Состояние("Обновляю кэш...",1,,Элементы.Настройки.Картинка);	
	ОбновитьКэшМодуляОбъекта();   //могли поменять ключевые настройки (например транспорт)
	
	ЗаполнитьРеквизитыФормы();
	
	ЗаполнитьНастройкиОтборов();
	РазвернутьДеревоФильтровКлиент();
	ЗаполнитьСохраненнымиНастройками();      
	// переинициализируем форму обмена, т.к. в настройках могли переключить механизм криптографии
	ИнициализироватьМодульОбменКлиент();
	
	Состояние("Обновляю форму...",35,,Элементы.Настройки.Картинка);
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КонтурEDI_ОбновитьСписокПартнеров" 
		Или ИмяСобытия = "КонтурEDI_НастроитьФорму" Тогда
		ОпределитьРежимРаботы();
		ЗаполнитьНастройкиОтборов();
		ВосстановитьНастройкиФормы();
		РазвернутьДеревоФильтровКлиент();
		ЗаполнитьСписокЗадачКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработкаСобытияПодключаемогоМодуляКлиент(ИмяСобытия,СтандартнаяОбработкаEDI=Неопределено,ПараметрыПодключаемогоМодуля = Неопределено)

	Если НЕ МодульКлиентПМ = Неопределено Тогда
		
		МодульКлиентПМ.ОбработатьСобытиеКонтурEDI(ИмяСобытия, ПараметрыПодключаемогоМодуля, СтандартнаяОбработкаEDI);
		
	КонецЕсли;
	
КонецФункции
	
&НаКлиенте
Процедура ТабСообщенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	ТекКолонка = Поле;
	ТекСтрока = Элемент.ТекущиеДанные;
	
	// клиентский ПМ
	СтандартнаяОбработкаEDI = Истина;
	ОбработкаСобытияПодключаемогоМодуляКлиент("ВыборСтрокиОсновногоСписка",СтандартнаяОбработкаEDI,Новый Структура("Колонка,Строка",ТекКолонка,ТекСтрока));
	
	Если СтандартнаяОбработкаEDI = Истина Тогда
		Если ТекКолонка.Имя="ТабСообщенияТребуемоеДействие" Тогда
			//вообще у нас тут должна быть общая логика: что в карточке сообщения, что в списке, что в групповых действиях
			//еще один момент: неплохо бы сделать возможность обновления только одной строки.
			//как вариант, добавить соответствующее условие во все запросы.
			
			//Подпись в ДД по 1 строке с 16 релиза будет происходить через модуль если есть соотв. Общая настройка
			ПакетнаяОбработка=Ложь;
			Если ТекСтрока.ТребуемоеДействие = "Подписать в Диадоке" 
				И ОткрыватьВебИнтерфейсДляПодписанияЕдиничнойПачки <> Истина Тогда 
				МассивСообщений = Новый Массив;
				МассивСообщений.Добавить(ТекСтрока.СообщениеСсылка);
				ЗапроситьСертификатИПодписатьСФ(МассивСообщений);
			Иначе
				ВыполнитьЗадачу(ТекСтрока,Ложь);
			КонецЕсли;
			
			
		ИначеЕсли ТекКолонка.Имя = "ТабСообщенияДокумент"
			И ЗначениеЗаполнено(ТекСтрока.Документ)
			Тогда
			
			ИмяТипаДокумента=ОпределитьИмяТипаДокумента(ТекСтрока.Документ);			
			П = Новый Структура("Ключ", ТекСтрока.Документ);
			//откроем сам документ
			Если Параметры.МодальностьЗапрещена Тогда
				//Выполнить("ПоказатьЗначение(Новый ОписаниеОповещения(""ОбработчикПослеЗакрытияКарточкиСообщения"",ЭтаФорма),ТекСтрока.Документ)");//с обновлением 
				//не работает оповещение в такси - баг платформы
				
				Выполнить("ОткрытьФорму(ИмяТипаДокумента+"".ФормаОбъекта"", П, ЭтаФорма, , , ,  , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)")
			Иначе                                                                              //Новый ОписаниеОповещения(""ОбработчикПослеЗакрытияКарточкиСообщения"",ЭтаФорма)
				Форма = ПолучитьФорму(ИмяТипаДокумента+".ФормаОбъекта", П);       // например Документ.РеализацияТоваровУслуг
				Форма.ОткрытьМодально();
				
			КонецЕсли;
			
			Возврат;
			//рефакторинг предусмотерть блокирующее открытие с обработчиком закрытия
			
		Иначе	
			//откроем сообщение
			Если ЗначениеЗаполнено(ТекСтрока.СообщениеСсылка) Тогда
				Состояние("Открываю сообщение...",80,,Элементы.КнопкаЕщеОткрытьКарточкуСообщения.Картинка);
				мОткрытьКарточкуСообщения(ТекСтрока);
			Иначе
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЕсли;
	
	Если ОбновлятьВесьСписокПриРаботеСЗаказами Тогда 
		ЗаполнитьСписокЗадачКлиент();
	Иначе
		ВычеркнутьТекущиеСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВычеркнутьТекущиеСтроки()
	
	//Вычеркнем тек строки
	МассивИДвыделенных = Элементы.ТабСообщения.ВыделенныеСтроки;
	Если МассивИДвыделенных.Количество()>0 Тогда
		Для Каждого ВыделеннаяСтрокаИД Из МассивИДвыделенных ЦИкл
			ЭлементКоллекции = Объект.ТабСообщения.НайтиПоИдентификатору(ВыделеннаяСтрокаИД);
			ЭлементКоллекции.Обработан = Истина;
			ЭлементКоллекции.Иконка = 0;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ОпределитьИмяТипаДокумента(Ссылка)

Возврат "Документ."+Ссылка.Метаданные().Имя;	

КонецФункции // ОпределитьИмяТипаОбъекта(ТекСтрока.Документ)()


&НаКлиенте
Функция ПолучитьКодДействияПоПредставлению(ПредставлениеДействия)
	
	НужныеСтроки = НастройкаОформленияТребуемогоДействия.НайтиСтроки(Новый Структура("Значение",ПредставлениеДействия));
	Если НужныеСтроки.Количество()<>1 Тогда
		ВызватьИсключение "Проблемы с требуемыми действиями";
	КонецЕсли;
	Возврат НужныеСтроки[0].КодДействия;
	
КонецФункции	



////Общая точка входа для действий ниже
//Выполняет задачу в строке ВыбраннаяСтрока.
//Работает в 2 режимах - "Пакетном", когда дополнительные формы не открываются,
//	и "Основном", с открытием окон
&НаКлиенте
Процедура ВыполнитьЗадачу(ВыбраннаяСтрока,ПакетнаяОбработка=Ложь)
	
	Если ВыбраннаяСтрока.Обработан Тогда
		Возврат;//незачем еще раз делать
	КонецЕсли;	
	
	Результат = Ложь;
	КодДействия = ПолучитьКодДействияПоПредставлению(ВыбраннаяСтрока.ТребуемоеДействие);
	//здесь у нас и будет работа с кодами действий. Сюда же прокинем ПМ - продумать работу в УФ и ОФ сразу
	
	СтандартнаяОбработкаEDI = Истина;
	//возможно здесь будет когда-то ПМ
	
	Если Не СтандартнаяОбработкаEDI Тогда
		//сработал ПМ
		
	Иначе	
		//ПМ ничего не перехватывал		
		
		//общие действия
		Если КодДействия = "ПринятьСообщение" Тогда
			
			Состояние("Выполняю задачу...",75,,Элементы.Настройки.Картинка);
			Результат = _ОбработатьСообщение(ВыбраннаяСтрока,ПакетнаяОбработка,КодДействия);
			
		ИначеЕсли КодДействия = "ОбработатьНовуюВерсию" Тогда
			
			Состояние("Выполняю задачу...",75,,Элементы.Настройки.Картинка);
			Результат = _ОбработатьСообщение(ВыбраннаяСтрока,ПакетнаяОбработка,КодДействия);
			
		ИначеЕсли КодДействия = "РаботаЗавершена"
			Или КодДействия = "РаботаЗавершенаСУточнением"
			Или КодДействия = "ОжидайтеПодписьПартнера"
			Или КодДействия = "ДождатьсяДоставки"
			Или КодДействия = "НеПрошлоВалидацию" Тогда
			
			Если Не ПакетнаяОбработка Тогда
				мОткрытьКарточкуСообщения(ВыбраннаяСтрока);
			КонецЕсли;	
			
			Результат = Ложь;
			
		ИначеЕсли Лев(КодДействия,10) = "Отправить_" Тогда 
			
			Результат = _ОтправитьИсходящееСообщение(ВыбраннаяСтрока,ПакетнаяОбработка,КодДействия);
			
		ИначеЕсли КодДействия = "ИсправитьОшибки" Тогда
			
			Результат = _ПереотправитьСообщение(ВыбраннаяСтрока,ПакетнаяОбработка);
	
		ИначеЕсли Лев(КодДействия,15) = "СоздатьДокумент" Тогда
			
			Результат = _СоздатьДокументНаОснованииКлиент(ВыбраннаяСтрока,ПакетнаяОбработка);
			
		ИначеЕсли Лев(КодДействия,16) = "ПровестиДокумент" Тогда
			
			Результат = _ПровестиДокументКлиент(ВыбраннаяСтрока,ПакетнаяОбработка);
			
		КонецЕсли;
		
		//теперь действия, разделяющиеся для поставщика и для сети
		
		Если Параметры.РежимРаботы = "Поставщик" Тогда
			
			Если КодДействия = "ПодписатьВДиадок" Тогда
				
				Результат = _ПодписатьИОтправить(ВыбраннаяСтрока,ПакетнаяОбработка);
				
			ИначеЕсли КодДействия = "ОбработатьРасхождения_RECADV" Тогда
				
				Результат = _ОбработатьРезультатПриемки(ВыбраннаяСтрока,ПакетнаяОбработка,КодДействия);
				
			ИначеЕсли КодДействия = "ОбработатьРасхождения_ORDERS" Тогда
				
				Результат = _ОбработатьУточнениеОбратногоЗаказа(ВыбраннаяСтрока,ПакетнаяОбработка,КодДействия); 				
			КонецЕсли;	
			
		ИначеЕсли Параметры.РежимРаботы = "Покупатель" Тогда
			
			Если КодДействия = "ОбработатьРасхождения_ORDRSP" Тогда
				
				Результат = _ОбработатьУточнениеЗаказа(ВыбраннаяСтрока,ПакетнаяОбработка,КодДействия);     //сторона сети 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//ВыбраннаяСтрока.Обработан = Результат;        //УФ нет у нас результата здесь!
	
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьИсходящееСообщениеВызовСервера(ТипСообщения, Документ)

	ТекСообщение= МодульОбъекта().ПодготовитьИсходящееСообщение(ТипСообщения, Документ);
	
   возврат Истина;
КонецФункции // ПодготовитьИсходящееСообщениеВызовСервера()

&НаСервере
Функция ОтправитьИсходящееСообщениеБезОткрытияФормыСервер(ТипСообщения,_Документ, ПараметрыСсылка = Неопределено)
	
	Сообщение = МодульОбъекта().ПодготовитьИсходящееСообщение(ТипСообщения, _Документ, ПараметрыСсылка);
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("ОтправитьСообщениеИзФормы",	Истина);
	ПараметрыДействия.Вставить("Сообщение",					Сообщение);
	
	Если ТипСообщения="DESADV" Тогда
		//DESADV может отправляться вместе с INVOIC
		ОтправлятьINVOICсDESADV = МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С, "ОтправлятьINVOICсDESADV");
		
		Если ОтправлятьINVOICсDESADV = Истина Тогда
			СчетФактура = МодульОбъекта().ПолучитьСчетФактуруНакладной(_Документ);
			Если Не ЗначениеЗаполнено(СчетФактура) Тогда
				Сообщить("Не удалось найти счет-фактуру для отправки по документу "+_Документ);
				//если в партнере стоит флаг "Отправлять INVOIC вместе с DESADV", и мы не нашли документ для отправки INVOIC, то не будем отправлять и DESADV.
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		//DESADV может отправляться вместе с ALCRPT
		ОтправлятьALCRPTсDESADV = МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С, "ОтправлятьALCRPT");
		ОтправлятьALCRPTсINVOIC = МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С, "ОтправлятьALCRPTсINVOIC");
		Если ОтправлятьALCRPTсDESADV Или ОтправлятьALCRPTсINVOIC Тогда 
			//следует проверить валидность ALCRPT
			Сообщение = МодульОбъекта().ПодготовитьИсходящееСообщение("ALCRPT", _Документ, неопределено);
			Если Сообщение.СодержитОшибки Тогда
				МодульОбъекта().Сообщить_КонтурEDI("Ошибки проверки связанного сообщения ALCRPT по документу: "+_Документ);
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МодульОбъекта().ОтправитьСообщение(ТипСообщения,_Документ,ПараметрыДействия);
	
КонецФункции


&НаКлиенте
Функция _ОтправитьИсходящееСообщение(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь,КодДействия="")
	
	ТипСообщения = ВыбраннаяСтрока.ТипСообщения;
	
	//сообщение собирается непостредственно в самой карточке   (goto мОткрытьКарточкуСообщения())
	
	Если НеОткрыватьФормы Тогда
		
		//Если это DESADV, то на форме есть кнопка Сохранить. Возможно, нужно убрать кнопку, если не используется SSCC. 
		//Если сохранили, нужно передать параметр СообщениеСсылка для проверки в СохранитьСообщение.
		Если ТипСообщения = "DESADV" Тогда
			ПараметрыСсылка = Новый Структура;
			ПараметрыСсылка.Вставить("СообщениеСсылка", ВыбраннаяСтрока.СообщениеСсылка);
		КонецЕсли;
		//обработаем и вычеркнем если все ок
		Результат = ОтправитьИсходящееСообщениеБезОткрытияФормыСервер(ВыбраннаяСтрока.ТипСообщения, ВыбраннаяСтрока.Документ, ПараметрыСсылка);
		Возврат Результат;
	
	Иначе
		//с открытием формы
		//Сообщение_До = СтатусСсылкиИПризнакАрхивУСсылкиСообщения(ВыбраннаяСтрока.СообщениеСсылка);//более не анализируем для исходящих
		
		мОткрытьКарточкуСообщения(ВыбраннаяСтрока,КодДействия);
		
		Если не Параметры.МодальностьЗапрещена Тогда
			
			Возврат Истина;             //Рефакторинг - придумать хороший механизм действий после выполнения действия
			//теперь проверим, что произошло с сообщением после закрытия его формы
			//Сообщение_После = СтатусСсылкиИПризнакАрхивУСсылкиСообщения(ВыбраннаяСтрока.СообщениеСсылка);
			//
			//Если Сообщение_После<>Неопределено
			//	И (Сообщение_До.СтатусСсылки<>Сообщение_После.СтатусСсылки
			//	Или Сообщение_До.Архив<>Сообщение_После.Архив)
			//	Тогда
			//	Возврат Истина;//что-то произошло, вычеркиваем эту строку
			//Иначе
			//	
			//	Возврат Ложь;
			//	
			//КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция _ПереотправитьСообщение(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь,КодДействия="")
	
	ТипСообщения = ВыбраннаяСтрока.ТипСообщения;
	
	//В УФ мы не сможем вернуться на клиент для открытия формы с собраннымсообщением
	//т.к. там есть несериализуемая ТЗ!
	
	//////попробуем щас через реквизит формы его протолкать      скорее всего не получится, но пробуем!
	//// Резалт= ПодготовитьИсходящееСообщениеВызовСервера(ТипСообщения, ВыбраннаяСтрока.Документ);
	//ОТ ЭТОГО ВАРИАНТА ОТКАЗЫВАЕМСЯ Т.К. Сообщение через клиент (а карточку открыть мона ток там) передавать очень печально 
	//просто позволим собирать сообщение непостредственно самой карточке   (иди в мОткрытьКарточкуСообщения())
	
	Если НеОткрыватьФормы Тогда
		
		//обработаем и вычеркнем если все ок
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("ПереотправляемоеСообщениеСсылка", ВыбраннаяСтрока.СообщениеСсылка);

		Результат = ОтправитьИсходящееСообщениеБезОткрытияФормыСервер(ВыбраннаяСтрока.ТипСообщения, ВыбраннаяСтрока.Документ,ПараметрыОтправки);
		Возврат Результат;
	
	Иначе
		//с открытием формы
		//Сообщение_До = СтатусСсылкиИПризнакАрхивУСсылкиСообщения(ВыбраннаяСтрока.СообщениеСсылка);//более не анализируем для исходящих
		
		мОткрытьКарточкуСообщения(ВыбраннаяСтрока,КодДействия);
		
		Если не Параметры.МодальностьЗапрещена Тогда
			
			Возврат Истина;             //Рефакторинг - придумать хороший механизм действий после выполнения действия
			//теперь проверим, что произошло с сообщением после закрытия его формы
			//Сообщение_После = СтатусСсылкиИПризнакАрхивУСсылкиСообщения(ВыбраннаяСтрока.СообщениеСсылка);
			//
			//Если Сообщение_После<>Неопределено
			//	И (Сообщение_До.СтатусСсылки<>Сообщение_После.СтатусСсылки
			//	Или Сообщение_До.Архив<>Сообщение_После.Архив)
			//	Тогда
			//	Возврат Истина;//что-то произошло, вычеркиваем эту строку
			//Иначе
			//	
			//	Возврат Ложь;
			//	
			//КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//подпишем текущий СФ в Диадоке
&НаКлиенте
Функция _ПодписатьИОтправить(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь)
	
	Если НеОткрыватьФормы Тогда
		
		//добавим эту строку в таблицу СФ на подписание, само подписание с запросом сертификата пройдет отдельно
		НовСтрока = СчетаФактурыНаПодписание.Добавить();
		НовСтрока.Ссылка = ВыбраннаяСтрока.СообщениеСсылка;
		
		Возврат Ложь;
	Иначе
		
		РеквизитыПодписания=_ПодписатьИОтправитьСервер(ВыбраннаяСтрока.Документ);
		
		boxId =  РеквизитыПодписания.boxId;//СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(ВыбраннаяСтрока.Документ, "boxId"));
		messageId = РеквизитыПодписания.messageId;//СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(ВыбраннаяСтрока.Документ, "messageId"));
		
		Если ПустаяСтрока(boxId) Тогда
			
			ТекстПредупреждения = "Не удалось открыть неподписанный черновик.
				|Попробуйте зайти в Диадок через ваш веб браузер и подписать его оттуда.";
				
			Если Параметры.МодальностьЗапрещена Тогда
				Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
			Иначе
				Предупреждение(ТекстПредупреждения,,"Контур.EDI");
			КонецЕсли;
			
		Иначе
			
			СсылкаНаЧерновик = "https://diadoc.kontur.ru/ShowDraft?boxId=" + boxId + "&draftId=" + messageId;
			
			ЗапуститьПриложение(СсылкаНаЧерновик);
			//ссылка должна была открыться - лучше вычеркнуть строку, (пользователь мог конечно там ничего не подписать, по скорее всего подписал - все равно у нас нет информации - будем исходить из наиболее вероятного, а если все же не подписал - при обновлении списка - она снова вывалится)
			Если ОбновлятьВесьСписокПриРаботеСЗаказами<>Истина Тогда 
				ВычеркнутьТекущиеСтроки();
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция _ПодписатьИОтправитьСервер(Документ)
	
	СтруктураВозврата = новый Структура;
	СтруктураВозврата.Вставить("boxId", СокрЛП(МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Документ, "boxId")));
	СтруктураВозврата.Вставить("messageId", СокрЛП(МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Документ, "messageId")));
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция _ОбработатьСообщение(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь,КодДействия="")    //На ОФ ОбработатьВходящееСообщение()
	
	Если НеОткрыватьФормы Тогда
		
		//обработаем и вычеркнем если все ок
		Результат = ОбработкаСообщенияБезОткрытияФормыСервер(ВыбраннаяСтрока.ТипСообщения, ВыбраннаяСтрока.СообщениеСсылка);

		Возврат Результат;
	
	Иначе
		//с открытием формы
		Сообщение_До = СтатусСсылкиИПризнакАрхивУСсылкиСообщения(ВыбраннаяСтрока.СообщениеСсылка);
		
		мОткрытьКарточкуСообщения(ВыбраннаяСтрока,КодДействия);
		
		Если не Параметры.МодальностьЗапрещена Тогда 
			//теперь проверим, что произошло с сообщением после закрытия его формы
			Сообщение_После = СтатусСсылкиИПризнакАрхивУСсылкиСообщения(ВыбраннаяСтрока.СообщениеСсылка);
			
			Если Сообщение_После<>Неопределено
				И (Сообщение_До.СтатусСсылки<>Сообщение_После.СтатусСсылки
				Или Сообщение_До.Архив<>Сообщение_После.Архив)
				Тогда
				Возврат Истина;//что-то произошло, вычеркиваем эту строку
			Иначе
				
				Возврат Ложь;
				
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Функция _ОбработатьРезультатПриемки(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь,КодДействия="")
ОбработатьРасхожденияСообщенияИДокумента(ВыбраннаяСтрока,"Приемка");

////откроем форму обработки расхождений
//	ПараметрыФормы = Новый Структура; 
//	ПараметрыФормы.Вставить("Документ",						ВыбраннаяСтрока.Документ);
//	ПараметрыФормы.Вставить("ИсточникРасхождений",			"ОбработкаРезультатовПриемки");  //"ОбработкаРезультатовПриемки" заменено на "Приемка"
//	ПараметрыФормы.Вставить("ПараметрыАвтотестирования",	Параметры.ПараметрыАвтотестирования);
//	ПараметрыФормы.Вставить("СообщениеСсылка",				ВыбраннаяСтрока.СообщениеСсылка);
//												
//	Если Параметры.МодальностьЗапрещена Тогда 
//		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_ОбработкаРасхожденийПриемкиУправляемая"", ПараметрыФормы,""ОбработчикПослеЗакрытияКарточкиСообщения"",ВыбраннаяСтрока.СообщениеСсылка)");//,ДополнительныеПараметры);
//	Иначе
//		ПолучитьФормуОбработки("Сервис_ОбработкаРасхожденийПриемкиУправляемая",ПараметрыФормы).ОткрытьМодально();
//		ОбработчикПослеЗакрытияКарточкиСообщения(ВыбраннаяСтрока.СообщениеСсылка, ВыбраннаяСтрока.СообщениеСсылка);
//	КонецЕсли;
////обновим список
//	
КонецФункции

&НаКлиенте
Функция _ОбработатьУточнениеОбратногоЗаказа(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь,КодДействия="")
ОбработатьРасхожденияСообщенияИДокумента(ВыбраннаяСтрока,"ОбратныйЗаказ");

//откроем форму обработки расхождений
	//ПараметрыФормы = Новый Структура; 
	//ПараметрыФормы.Вставить("Документ",						ВыбраннаяСтрока.Документ);
	//ПараметрыФормы.Вставить("ИсточникРасхождений",			"ОбратныйЗаказ");
	//ПараметрыФормы.Вставить("ПараметрыАвтотестирования",	Параметры.ПараметрыАвтотестирования);
	//ПараметрыФормы.Вставить("СообщениеСсылка",				ВыбраннаяСтрока.СообщениеСсылка);
	//											
	//Если Параметры.МодальностьЗапрещена Тогда 
	//	Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_ОбработкаРасхожденийПриемкиУправляемая"", ПараметрыФормы,""ОбработчикПослеЗакрытияКарточкиСообщения"",ВыбраннаяСтрока.СообщениеСсылка)");//,ДополнительныеПараметры);
	//Иначе
	//	ПолучитьФормуОбработки("Сервис_ОбработкаРасхожденийПриемкиУправляемая",ПараметрыФормы).ОткрытьМодально();
	//	ОбработчикПослеЗакрытияКарточкиСообщения(ВыбраннаяСтрока.СообщениеСсылка, ВыбраннаяСтрока.СообщениеСсылка);
	//КонецЕсли;
//обновим список
	
КонецФункции

// откроем форму обработки расхождения сообщения и документа (Orders в ответ на porders или recadv в ответ на desadv) 
//
&НаКлиенте
Функция ОбработатьРасхожденияСообщенияИДокумента(ВыбраннаяСтрока,ИсточникРасхождений)

	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("Документ",						ВыбраннаяСтрока.Документ);
	ПараметрыФормы.Вставить("ИсточникРасхождений",			ИсточникРасхождений);
	ПараметрыФормы.Вставить("ПараметрыАвтотестирования",	Параметры.ПараметрыАвтотестирования);
	ПараметрыФормы.Вставить("СообщениеСсылка",				ВыбраннаяСтрока.СообщениеСсылка);
	                                            
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_ОбработкаРасхожденийПриемкиУправляемая"", ПараметрыФормы,""ОбработчикПослеЗакрытияКарточкиСообщения"",ВыбраннаяСтрока.СообщениеСсылка)");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Сервис_ОбработкаРасхожденийПриемкиУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослеЗакрытияКарточкиСообщения(ВыбраннаяСтрока.СообщениеСсылка, ВыбраннаяСтрока.СообщениеСсылка);
	КонецЕсли;

КонецФункции // ОбработатьРасхожденияСообщенияИДокумента()


&НаКлиенте
Функция _ОбработатьУточнениеЗаказа(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь,КодДействия="")
	
//откроем форму обработки расхождений
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("Документ",						ВыбраннаяСтрока.Документ);
	ПараметрыФормы.Вставить("ИсточникРасхождений",			"ОбработкаУточненияЗаказа");
	ПараметрыФормы.Вставить("ПараметрыАвтотестирования",	Параметры.ПараметрыАвтотестирования);
	ПараметрыФормы.Вставить("СообщениеСсылка",				ВыбраннаяСтрока.СообщениеСсылка);
	                                            
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_ОбработкаУточненногоЗаказаУправляемая"", ПараметрыФормы,""ОбработчикПослеЗакрытияКарточкиСообщения"",ВыбраннаяСтрока.СообщениеСсылка)");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Сервис_ОбработкаУточненногоЗаказаУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослеЗакрытияКарточкиСообщения(ВыбраннаяСтрока.СообщениеСсылка, ВыбраннаяСтрока.СообщениеСсылка);
	КонецЕсли;
//обновим список
	
КонецФункции

&НаСервере
Функция ОпределитьИмяКонфигурацииВызовСервера()

	 Возврат МодульОбъекта().ОпределитьКонфигурацию();

КонецФункции // ОпределитьИмяКонфигурацииВызовСервера()

&НаСервереБезКонтекста
Функция ПолучитьВидОперацииРТУБП30()
	Возврат Перечисления.ВидыОперацийРеализацияТоваров.Товары;
КонецФункции // Перечисления.ВидыОперацийРеализацияТоваров.Товары()

&НаСервереБезКонтекста
Функция ПолучитьОрганизациюДокументаПоСсылкеВызовСервераБК(ДокСсылка)
	
	Возврат ДокСсылка.ПолучитьОбъект().Организация;	

КонецФункции // ПолучитьОрганизациюДокументаПоСсылкеВызовСервераБК()

&НаКлиенте
Функция _СоздатьДокументНаОснованииКлиент(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь)  
	//Рефакторинг  заполнялку прокинуть в ПМ

	СозданныйДокумент =Неопределено;
	
	КодДействия = ПолучитьКодДействияПоПредставлению(ВыбраннаяСтрока.ТребуемоеДействие);
	ИмяСоздаваемогоДокумента = Сред(КодДействия,17);
	
	Если БылСозданДокументНаОснованииТекущего(ВыбраннаяСтрока.Документ,Параметры.РежимРаботы,ИмяСоздаваемогоДокумента) = Истина Тогда
		ТекстПредупреждения="Уже был создан дальнейший документ";
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		
		Возврат ложь;
	Иначе
		
		Если НеОткрыватьФормы = Истина Тогда
			СозданныйДокументСсылка = СоздатьДальнейшийДокумент1ССервер(ВыбраннаяСтрока.Документ,ИмяСоздаваемогоДокумента);
			Если ЗначениеЗаполнено(СозданныйДокументСсылка) Тогда 
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			
			//определить конфу
			ИмяКонфигурации = ОпределитьИмяКонфигурацииВызовСервера();
			
			//только для поставщика
			Если Параметры.РежимРаботы<>"Поставщик" Тогда Возврат Ложь; КонецЕсли;
			//рефакторинг реализовать для сети
			
			Если ВыбраннаяСтрока.ТипСообщения = "INVOIC" Тогда
				////////////////////////////////будем создавать СЧФ////////////////////////////////
				Если ИмяКонфигурации = "УФ_УТ" Тогда
					ДанныеСчетаФактуры = Новый Структура;
					ДанныеСчетаФактуры.Вставить("ДокументОснование", ВыбраннаяСтрока.Документ);
					ДанныеСчетаФактуры.Вставить("Организация", ПолучитьОрганизациюДокументаПоСсылкеВызовСервераБК(ВыбраннаяСтрока.Документ));
					ДанныеСчетаФактуры.Вставить("Дата", 	   '00010101');//?(ОткрыватьСуществующую, Форма.Объект.Дата, '00010101'));
					ДанныеСчетаФактуры.Вставить("Исправление", ложь);
					
					ПараметрыФормы = Новый Структура("Основание, ДокументОснование, ВозвращатьПараметрыПредставления",
					ДанныеСчетаФактуры, ВыбраннаяСтрока.Документ, Ложь
					);
					Если Параметры.МодальностьЗапрещена Тогда //11.1
						Выполнить("ОткрытьФорму(""Документ.СчетФактураВыданный.ФормаОбъекта"", ПараметрыФормы, ЭтаФорма,,,,Новый ОписаниеОповещения(""ОбработчикПослеЗакрытияКарточкиСообщения"",ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
					Иначе //11.0
						ОткрытьФормуМодально("Документ.СчетФактураВыданный.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
					    ОбработчикПослеЗакрытияКарточкиСообщения();
					КонецЕсли;
				ИначеЕсли ИмяКонфигурации = "УФ_БП" Тогда
					 Выполнить("ОткрытьФорму(""Документ.СчетФактураВыданный.ФормаОбъекта"", Новый Структура(""Основание"", ВыбраннаяСтрока.Документ), ЭтаФорма,,,,Новый ОписаниеОповещения(""ОбработчикПослеЗакрытияКарточкиСообщения"",ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
				ИначеЕсли ИмяКонфигурации = "УФ_УНФ" Тогда
					Если Параметры.МодальностьЗапрещена Тогда //1.5, 1.6
					 	Выполнить("ОткрытьФорму(""Документ.СчетФактура.ФормаОбъекта"", Новый Структура(""Основание"", ВыбраннаяСтрока.Документ), ЭтаФорма,,,,Новый ОписаниеОповещения(""ОбработчикПослеЗакрытияКарточкиСообщения"",ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
					Иначе//1.4
					 	ОткрытьФормуМодально("Документ.СчетФактура.ФормаОбъекта", Новый Структура("Основание", ВыбраннаяСтрока.Документ), ЭтаФорма);
					    ОбработчикПослеЗакрытияКарточкиСообщения();
					КонецЕсли;
					
				КонецЕсли;
				
				
			Иначе
				////////////////////////////////будем создавать РТУ////////////////////////////////
				
				
				СтруктураЗначенияЗаполнения=Новый Структура("ДокументОснование",ВыбраннаяСтрока.Документ);
				
				// кас_томные структуры
				Если ИмяКонфигурации = "УФ_БП" Тогда
					СтруктураЗначенияЗаполнения.Вставить("ВидОперации", ПолучитьВидОперацииРТУБП30()); 
				ИначеЕсли ИмяКонфигурации = "УФ_УТ" Тогда
					СтруктураЗначенияЗаполнения.Вставить("ДатаОтгрузки",?(ВыбраннаяСтрока.ДатаПоставки=Дата(1,1,1),ТекущаяДата(),ВыбраннаяСтрока.ДатаПоставки));  
				ИначеЕсли ИмяКонфигурации="УФ_УНФ" Тогда
					МассивЗаказов = Новый Массив();
					МассивЗаказов.Добавить(ВыбраннаяСтрока.Документ);
					СтруктураЗначенияЗаполнения.Вставить("МассивЗаказовПокупателей", МассивЗаказов); 
				КонецЕсли;
				//
				
				ПараметрыФормы = Новый Структура("ЗначенияЗаполнения",СтруктураЗначенияЗаполнения);
				ИмяФормыСоздаваемогоДокумента="ФормаОбъекта";
				Если ИмяКонфигурации = "УФ_БП" Тогда
					ИмяФормыСоздаваемогоДокумента="Форма.ФормаДокументаТовары";
				КонецЕсли;
				
				Если Параметры.МодальностьЗапрещена или ИмяКонфигурации="УФ_БП" Тогда
					Если ИмяКонфигурации="УФ_УТ" Тогда
						
						Выполнить("ОткрытьФорму(""Документ.""+ИмяСоздаваемогоДокумента+"".""+ИмяФормыСоздаваемогоДокумента, ПараметрыФормы, ЭтаФорма, , , ,  Новый ОписаниеОповещения(""ОбработчикПослеЗакрытияКарточкиСообщения"",ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)")
						
					ИначеЕсли ИмяКонфигурации="УФ_БП" Тогда
						
						ИмяФормыСоздаваемогоДокумента="ФормаОбъекта";
						ПараметрыФормы.ЗначенияЗаполнения.Вставить("Основание",ПараметрыФормы.ЗначенияЗаполнения.ДокументОснование);
						Выполнить("ОткрытьФорму(""Документ.""+ИмяСоздаваемогоДокумента+"".""+ИмяФормыСоздаваемогоДокумента, ПараметрыФормы, ЭтаФорма, , , ,  Новый ОписаниеОповещения(""ОбработчикПослеЗакрытияКарточкиСообщения"",ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
						
						//старый вариант
						//ФормаДокумента = ПолучитьФорму("Документ."+ИмяСоздаваемогоДокумента+"." + ИмяФормыСоздаваемогоДокумента, СтруктураЗначенияЗаполнения);
						//ДополнительныеПараметры=новый Структура("ВыбранноеЗначение",ВыбраннаяСтрока.Документ);
						//ДополнительныеПараметры.Вставить("ТабличнаяЧасть","Товары");
						//ФормаДокумента.Объект.Организация = ВыбраннаяСтрока.Организация;
						//ФормаДокумента.ВопросЗаполнитьДокументПоСчетуЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
						//ФормаДокумента.Модифицированность =	Истина;
						//ФормаДокумента.Объект.Дата = ВыбраннаяСтрока.ДатаПоставки;
						//ФормаДокумента.РежимОткрытияОкна  =	РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
						//Выполнить("ФормаДокумента.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ОбработчикПослеЗакрытияКарточкиСообщения"",ЭтаФорма)");
						//
						//ФормаДокумента.Открыть();
						
					ИначеЕсли ИмяКонфигурации="УФ_УНФ" Тогда  //1.5
						
						ФормаДокумента = ПолучитьФорму("Документ."+ИмяСоздаваемогоДокумента+"." + ИмяФормыСоздаваемогоДокумента, СтруктураЗначенияЗаполнения);
						ФормаДокумента.Объект.Заказ = ВыбраннаяСтрока.Документ;
						ФормаДокумента.ЗаполнитьПоЗаказуЗавершение(КодВозвратаДиалога.Да, "");
						ФормаДокумента.Модифицированность =	Истина;
						ФормаДокумента.Объект.Дата = ВыбраннаяСтрока.ДатаПоставки;
						ФормаДокумента.РежимОткрытияОкна  =	РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
						Выполнить("ФормаДокумента.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ОбработчикПослеЗакрытияКарточкиСообщения"",ЭтаФорма)");
						
						ФормаДокумента.Открыть();
						
					КонецЕсли;
				Иначе
					
					ИмяФормыСоздаваемогоДокумента="ФормаОбъекта";
					ФормаДокумента = ПолучитьФорму("Документ."+ИмяСоздаваемогоДокумента+"." + ИмяФормыСоздаваемогоДокумента,Новый Структура("Основание", ВыбраннаяСтрока.Документ), ЭтаФорма);
					Если ИмяКонфигурации="УФ_УНФ" Тогда  //не поддерживаем 1РТУ на несколько заказов (т.е. всегда только 1 заказ для рту)
						ФормаДокумента.Объект.Заказ = ВыбраннаяСтрока.Документ;
					КонецЕсли;
					ФормаДокумента.ОткрытьМодально();
					
					ОбработчикПослеЗакрытияКарточкиСообщения();
					
					//удалить
					//Если ИмяКонфигурации="УФ_УНФ" Тогда      //1.4
					
					
					//старый вариант
					//ДанныеФормы = ФормаДокумента.Объект;
					//УНФ_ЗаполнитьРТУНаСервере(ДанныеФормы,ВыбраннаяСтрока.Документ);
					//КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
					
					//иначе    //УТ11.0
					//	Форма = ПолучитьФорму("Документ."+ИмяСоздаваемогоДокумента+"."+ИмяФормыСоздаваемогоДокумента, Новый Структура("Основание", ВыбраннаяСтрока.Документ), ЭтаФорма);       // например Документ.РеализацияТоваровУслуг
					//	Форма.ОткрытьМодально();
					//КонецЕсли;
					
					
				КонецЕсли;
			КонецЕсли;
            Возврат ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
///Старый промежуточный вариант - открываем карточку текущего документа	
	//ИмяТипаДокумента=ОпределитьИмяТипаДокумента(ВыбраннаяСтрока.Документ);			
	//П = Новый Структура("Ключ", ВыбраннаяСтрока.Документ);
	//	//проверить модальность
	//Если Параметры.МодальностьЗапрещена Тогда 
	//	//Выполнить("ПоказатьЗначение(Новый ОписаниеОповещения(""ОбработчикПослеЗакрытияКарточкиСообщения"",ЭтаФорма),ВыбраннаяСтрока.Документ)");
	//	//баг платформы - не работает оповещение
	//	
	//	Выполнить("ОткрытьФорму(ИмяТипаДокумента+"".ФормаОбъекта"", П, ЭтаФорма, , , ,  Новый ОписаниеОповещения(""ОбработчикПослеЗакрытияКарточкиСообщения"",ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)")
	//Иначе
	//	Форма = ПолучитьФорму(ИмяТипаДокумента+".ФормаОбъекта", П);       // например Документ.РеализацияТоваровУслуг
	//	Форма.ОткрытьМодально();
	//	
	//	ОбработчикПослеЗакрытияКарточкиСообщения();
	//КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УНФ_ЗаполнитьРТУНаСервере(НовыйОбъект, Заказ)

	НовДок=Документы.РасходнаяНакладная.СоздатьДокумент();
	НовДок.Заполнить(Заказ);
	
	ЗначениеВДанныеФормы(НовДок,НовыйОбъект);
	
	//НовыйОбъект.Заказ = Заказ;

КонецПроцедуры


// Создает дальнейший документ 1С в цепочке сообщений 
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция СоздатьДальнейшийДокумент1ССервер(ДокументОснование,ИмяСоздаваемогоДокумента)
	//рефакторинг - затолкать в МО
	НовДок = Документы[ИмяСоздаваемогоДокумента].СоздатьДокумент();
	НовДок.Заполнить(ДокументОснование);
	
	//теперь кастомные заполнялки
	Если ИмяСоздаваемогоДокумента = "СчетФактураВыданный" Тогда
		Попытка
			Выполнить("НовДок.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию");
		Исключение //УФ, и проч
		КонецПопытки;	
		
		Попытка
			//в некоторых конфигурациях еще надо заполнить табличную часть "ДатаНомерДокументовОплаты"
			Выполнить("
			|Если НовыйДокумент.ДатаНомерДокументовОплаты.Количество() = 0 Тогда
			|	НовыйДокумент.ДатаНомерДокументовОплаты.Добавить();
			|	НовыйДокумент.ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента = НовыйДокумент.ДатаПлатежноРасчетногоДокумента;
			|	НовыйДокумент.ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента = НовыйДокумент.НомерПлатежноРасчетногоДокумента;
			|КонецЕсли;
			|");
		Исключение
			
		КонецПопытки;	
	КонецЕсли;	
	//конец заполнялок
	
	НовДок.Дата = ТекущаяДата();
	НовДок.УстановитьНовыйНомер();
	
	//еще кастомные проверки. Сюда тоже прокинуть ПМ
	Если ИмяСоздаваемогоДокумента = "РеализацияТоваровУслуг"
		Или ИмяСоздаваемогоДокумента = "схРеализацияТоваровУслуг"
		Тогда
		Если НовДок.Товары.Количество()=0 Тогда  //всякие тонкости с заполнениями складов и т.д.
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	НовДок.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат НовДок.Ссылка;
	
КонецФункции // СоздатьДальнейшийДокумент1ССервер()


// Проверяет, был ли создан дальнейший документ 1С в цепочке 
//
// Параметры
//  Документ  		-	<Документ.Ссылка> - текущий документ, из которого предполагается дальнейшее создание документа
//  РежимРаботы  	-	<Строка> - текущий вариант работы - сеть/поставщик
//
// Возвращаемое значение:
//   Булево   - Ложь: документ 1С не создан (не удалось найти последующий документ 1С), Истина: нашелся хотя бы 1 последующий документ 1С
//
&НаСервере
Функция БылСозданДокументНаОснованииТекущего(Документ,РежимРаботы,ИмяСоздаваемогоДокумента)
//рефакторинг - затолкать в МО
    НайденДальнейшийДокумент = Ложь;
	
	ИменаГруппировок = "";
	ТекстЗапроса = МодульОбъекта().ПолучитьТекстЗапросаПоСвязаннымДокументам(Документ,РежимРаботы,ИменаГруппировок);
	ЗапросПроверка = Новый Запрос(ТекстЗапроса);
	ЗапросПроверка.УстановитьПараметр("Ссылка",Документ);
	ТабЗапроса = ЗапросПроверка.Выполнить().Выгрузить();
	
	ИмяКолонкиТекущегоДокумента = "Док_"+Документ.Метаданные().Имя;
	ИмяКолонкиСоздаваемогоДокумента = "Док_"+ИмяСоздаваемогоДокумента;
	СтрокаТекущегоДокумента = ТабЗапроса.Найти(Документ,ИмяКолонкиТекущегоДокумента);
	Если СтрокаТекущегоДокумента<>Неопределено 
		И ЗначениеЗаполнено(СтрокаТекущегоДокумента[ИмяКолонкиСоздаваемогоДокумента])
		И Не СтрокаТекущегоДокумента[ИмяКолонкиСоздаваемогоДокумента].ПометкаУдаления
		Тогда НайденДальнейшийДокумент = Истина;
	КонецЕсли;	

	Возврат НайденДальнейшийДокумент;
КонецФункции // БылСозданДокументНаОснованииТекущего()


&НаКлиенте
//если документ сегодняшний, то пытаемся провести оперативно
Функция _ПровестиДокументКлиент(ВыбраннаяСтрока,НеОткрыватьФормы = Ложь)  
	
	Если ДокументПроведен(ВыбраннаяСтрока.Документ) Тогда
		//уже проведен
		Возврат Истина;
	КонецЕсли;
	
	Если НеОткрыватьФормы Тогда
		Возврат _ПровестиДокументСервер(ВыбраннаяСтрока.Документ);
	Иначе
		//проверить модальность
		
	ИмяТипаДокумента=ОпределитьИмяТипаДокумента(ВыбраннаяСтрока.Документ);			
	П = Новый Структура("Ключ", ВыбраннаяСтрока.Документ);
	
	Если Параметры.МодальностьЗапрещена Тогда 
		//Выполнить("ПоказатьЗначение(Новый ОписаниеОповещения(""ОбработчикПослеЗакрытияКарточкиСообщения"",ЭтаФорма),ВыбраннаяСтрока.Документ)");
		//когда же вы уже сделаете чтоб со ссылочными типами оповещение работало!

		Выполнить("ОткрытьФорму(ИмяТипаДокумента+"".ФормаОбъекта"", П, ЭтаФорма, , , ,  Новый ОписаниеОповещения(""ОбработчикПослеЗакрытияКарточкиСообщения"",ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)")
	Иначе
		Форма = ПолучитьФорму(ИмяТипаДокумента+".ФормаОбъекта", П);       // например Документ.РеализацияТоваровУслуг
		Форма.ОткрытьМодально();
		
		ОбработчикПослеЗакрытияКарточкиСообщения();
	КонецЕсли;
	
		//ОткрытьЗначение(ВыбраннаяСтрока.Документ);
		//Возврат ДокументПроведен(ВыбраннаяСтрока.Документ);
		

	КонецЕсли;
	
КонецФункции

&НаСервере
Функция _ПровестиДокументСервер(ДокСсылка)
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
	                                                                
		//Проводить = (ДокОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
		ПроводитьОперативно = 
					(ДокОбъект.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить)
					//проверим, проводится ли данный документ оперативно
					И (НачалоДня(ДокОбъект.Дата) = НачалоДня(ТекущаяДата()));
					//оперативно проводим только сегодняшние документы
		
		Попытка
			РежимПроведения  =?(ПроводитьОперативно,РежимПроведенияДокумента.Оперативный,РежимПроведенияДокумента.Неоперативный);
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведения);
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
КонецФункции // _ПровестиДокументСервер()

&НаСервереБезКонтекста
Функция ДокументПроведен(Ссылка)
	Возврат Ссылка.Проведен;
КонецФункции
// Для отклонения 
&НаСервере
Функция НайтиСообщениеДокументаСервер(ДокументСсылка, ТипСообщения, Направление)
	СообщениеСсылка = МодульОбъекта().НайтиСообщениеДокумента(ДокументСсылка, ТипСообщения, Направление);
	
	Возврат СообщениеСсылка;
КонецФункции // ПолучитьДанныеДляОтклоненияЗаказаПолностью()

//в первом параметре нам передана ссылка нового сообщения
//во втором параметре передана ссылка старого сообщения или структура анализа старого сообщения
&НаКлиенте
Процедура ОбработчикПослеЗакрытияКарточкиСообщения(НоваяСсылка=неопределено, СтараяСсылка=неопределено) Экспорт
	//теперь проверим, что произошло с сообщением после закрытия его формы для случая, когда мы не обновляем весь список, а вычеркиваем отработанную строку
	
	//проверим, есть ли изменения в состояния
	
	Если ОбновлятьВесьСписокПриРаботеСЗаказами Тогда
		//Замерим производительность - если обновление идет более 10 секунд при условии - предложить сделать настройку вычеркивания строк или изменить период
		ЗаполнитьСписокЗадачКлиентСАнализомПроизводительности();
		
	Иначе
		Если СообщенияПоСсылкамИзменились(НоваяСсылка,СтараяСсылка) Тогда 
			ВычеркнутьТекущиеСтроки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокЗадачКлиентСАнализомПроизводительности()

		//Попытка
		//	Выполнить("ПредВремя = ТекущаяУниверсальнаяДатаВМиллисекундах()");//не на всех платформах есть
		//Исключение
			ПредВремя=ТекущаяДата();
		//КонецПопытки;
		
		ЗаполнитьСписокЗадачКлиент();
		
		//Попытка
		//	Выполнить("ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах()-ПредВремя");
		//Исключение
		ВремяВыполнения = ТекущаяДата()-ПредВремя;
		//КонецПопытки;
		
		Если ВремяВыполнения>=10 Тогда
			ДатаОтказаОтВычерков = ПолучитьКонстантуEDIВызовСервера("ОтказВычеркиватьСтрокиДо");
			Если ДатаОтказаОтВычерков=Неопределено или ДатаОтказаОтВычерков<ТекущаяДата() Тогда 
				Элементы.ТекстПереходНаВычеркивание.Заголовок ="Мы заметили, что перестроение списка происходит слишком долго ("+ВремяВыполнения+" сек.) Это может быть вызвано слишком большим периодом выборки или низкой производительностью вашей системы.
				|
				|Попробуйте уменьшить интервал дат выборки документов.
				|
				|Если есть проблемы с производительностью системы - то для таких систем мы разарботали специальный режим вычеркивания строк с требуемыми действиями.
				|
				|В режиме вычеркивания мы не перестраиваем список после каждого действия, а лишь вычеркиваем эту строку, а перестроение списка происходит по кнопке обновить";
				
				Элементы.ГруппаВсплывающийДиалог.Видимость=истина;
				Элементы.ВсплывающийДиалогПереходНаВычеркивание.Видимость=истина;
				
			КонецЕсли;
		КонецЕсли;
		
КонецПроцедуры // ЗаполнитьСписокЗадачКлиентСАнализомПроизводительности()

&НаКлиенте
Процедура ОбработчикРешенияОпереключенииРежима(РезультатВопроса=Неопределено,ДопПараметр=Неопределено) Экспорт
	
	Если РезультатВопроса="Открыть выбор периода (рекомендуется)" Тогда
		ОткрытьВыборПериода();
	ИначеЕсли РезультатВопроса="Попробовать режим вычеркивания (рекомендуется)" Тогда
		ОбновлятьВесьСписокПриРаботеСЗаказами=Ложь;
		ТекстПредупреждения="Режим изменен только для текущего сеанса.";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса="Переключить режим на вычеркивание" Тогда
		УстановитьКонстантуEDIВызовСервера("ОбновлятьВесьСписокПриРаботеСЗаказами",ложь);
		ОбновлятьВесьСписокПриРаботеСЗаказами=Ложь;
		ТекстПредупреждения="Режим изменен";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
	ИначеЕсли РезультатВопроса="Отложить вопрос на день" Тогда
		УстановитьКонстантуEDIВызовСервера("ОтказВычеркиватьСтрокиДо",ТекущаяДата()+60*60*24);
	ИначеЕсли РезультатВопроса="Отказаться" Тогда  //на 7 дней
		УстановитьКонстантуEDIВызовСервера("ОтказВычеркиватьСтрокиДо",ТекущаяДата()+60*60*24*7);
	КонецЕсли;		

КонецПроцедуры // ОбработчикРешенияОпереключенииРежима()

&НаСервере
Функция ПолучитьКонстантуEDIВызовСервера(ИмяКонстнанты)

Возврат МодульОбъекта().ПолучитьКонстантуEDI(ИмяКонстнанты)	

КонецФункции // УстановитьКонстантуEDIВызовСервера()
&НаСервере
Процедура УстановитьКонстантуEDIВызовСервера(ИмяКонстнанты,Значение)

МодульОбъекта().УстановитьКонстантуEDI(ИмяКонстнанты,Значение)	

КонецПроцедуры // УстановитьКонстантуEDIВызовСервера()

//возвращает результат сравнения ключевых статусов ссылок на сообщения (допускается передать ссылки на разные сообщения)
//если сравнить не удается - считается что изменения были
&НаКлиенте
Функция СообщенияПоСсылкамИзменились(СсылкаНаСообщение1,СсылкаНаСообщение2)
	
		Если ТипЗнч(СсылкаНаСообщение1)=Тип("СправочникСсылка.КонтурEDI_Сообщения")
			И (ТипЗнч(СсылкаНаСообщение2)=Тип("СправочникСсылка.КонтурEDI_Сообщения")
			или ТипЗнч(СсылкаНаСообщение2)=Тип("Структура")) Тогда
			
			Сообщение_До = ?(ТипЗнч(СсылкаНаСообщение2)=Тип("Структура"),СсылкаНаСообщение2,СтатусСсылкиИПризнакАрхивУСсылкиСообщения(СсылкаНаСообщение2));
			Сообщение_После = СтатусСсылкиИПризнакАрхивУСсылкиСообщения(СсылкаНаСообщение1);
			Если Сообщение_До=Неопределено или Сообщение_После=Неопределено Тогда 
				Возврат Истина; 
			КонецЕсли;  //если не можем проанализировать - пессимистически считаем что изменение было
			
			Если (Сообщение_До.СтатусСсылки<>Сообщение_После.СтатусСсылки
				Или Сообщение_До.Архив<>Сообщение_После.Архив)
				Тогда
				Возврат Истина;//что-то произошло
			Иначе
				Возврат Ложь; //статусы полностью совпадают - походит на то что карточку сообщения просто закрыли не выполнив действия или действия выполнить не удалось
			КонецЕсли;
		Иначе
			Возврат Истина; //если не можем проанализировать - пессимистически считаем что изменение было
		КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Функция СтатусСсылкиИПризнакАрхивУСсылкиСообщения(СообщСсылка)
	
	Если СообщСсылка=Неопределено Тогда 
		СтруктураВозврата=Неопределено;	
	иначе
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("СтатусСсылки",СообщСсылка.Статус);
		СтруктураВозврата.Вставить("Архив",СообщСсылка.Архив);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОбработкаСообщенияБезОткрытияФормыСервер(ТипСообщения, СообщениеСсылка)
	
	Если ТипСообщения = "ORDERS" Тогда
		
		СообщениеЗаказ = МодульОбъекта().ПрочитатьСообщение(СообщениеСсылка,,"ORDERS","Входящее");
		МодульОбъекта().КонвертироватьСообщениеEDIв1С(СообщениеЗаказ);
		
		Если Не ЗначениеЗаполнено(СообщениеЗаказ.Партнер) Тогда
			СообщениеЗаказ.Партнер = МодульОбъекта().ОпределитьПартнераСообщения(СообщениеЗаказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СообщениеЗаказ.Партнер) Тогда
			Если СообщениеЗаказ.Направление = "Входящее" Тогда
				Если НЕ ЗначениеЗаполнено(СообщениеЗаказ.Отправитель1С) Тогда
					СообщениеЗаказ.Отправитель1С = СообщениеЗаказ.Партнер;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		РезультатПроверкиДанных = МодульОбъекта().ПроверитьПоля1С(СообщениеЗаказ);
		
		Если РезультатПроверкиДанных.Успешно Тогда
			
			РезультатВыполненияДействия = МодульОбъекта().ПринятьВходящееСообщение(СообщениеЗаказ);
			
			Возврат РезультатВыполненияДействия.Успешно;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
		
	Иначе //ВыбраннаяСтрока.ТипСообщения = "ORDERS" Тогда
		//пока не обрабатываем другие сообщения
		Возврат Ложь;
		
	КонецЕсли;
КонецФункции

&НаСервере
Функция _ОтправитьИсходящееСообщениеБезОткрытияФорм(ВыбраннаяСтрока,НеОткрыватьФормы=Истина)
	
	ТипСообщения = ВыбраннаяСтрока.ТипСообщения;
	
	Сообщение = МодульОбъекта().ПодготовитьИсходящееСообщение(ТипСообщения, ВыбраннаяСтрока.Документ);
	
	//Если НеОткрыватьФормы Тогда
		
		_Параметры = Новый Структура();
		_Параметры.Вставить("ОтправитьСообщениеИзФормы",	Истина);
		_Параметры.Вставить("Сообщение",					Сообщение);
		
		Если ТипСообщения="DESADV" Тогда
			//DESADV может отправляться вместе с INVOIC
			ОтправлятьINVOICсDESADV = МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С, "ОтправлятьINVOICсDESADV");
			
			Если ОтправлятьINVOICсDESADV = Истина Тогда
				СчетФактура = МодульОбъекта().ПолучитьСчетФактуруНакладной(ВыбраннаяСтрока.Документ);
				Если Не ЗначениеЗаполнено(СчетФактура) Тогда
					Сообщить("Не удалось найти счет-фактуру для отправки по документу "+ВыбраннаяСтрока.Документ);
					//если в партнере стоит флаг "Отправлять INVOIC вместе с DESADV", и мы не нашли документ для отправки INVOIC, то не будем отправлять и DESADV.
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		МодульОбъекта().ОтправитьСообщение(ТипСообщения,ВыбраннаяСтрока.Документ,_Параметры);
		
	//КонецЕсли;
	
КонецФункции


////открывает карточку сообщения СообщениеСсылка
&НаКлиенте
Процедура мОткрытьКарточкуСообщения(СтрокаСообщения, КодДействия = "", ПроизвольныеПараметры = Неопределено)  
	
	//!!! В управляемых формах несколько иной механизм сбора исходящих сообщения.
	//Сообщение мы не передаем в форму в уже готовом виде (как в ОФ) а передаем только параметры для сбора сообщения - СБОР сообщения вызывает САМА ФОРМА СООБЩЕНИЯ!!!
	//при этом на Эту процедуру наверчено больше чем в ОФ
	//в УФ больше используем КодДействия
	
	СообщениеСсылка = СтрокаСообщения.СообщениеСсылка;
	АнализСообщения_До = СтатусСсылкиИПризнакАрхивУСсылкиСообщения(СообщениеСсылка);
	
	ТолькоПросмотр=Ложь;
	Если Лев(КодДействия,10)="Отправить_"
		Или СтрокаСообщения.ТребуемоеДействие = "Обработать входящее сообщение"
		Или СтрокаСообщения.ТребуемоеДействие = "Переотправить сообщение"
		Или СтрокаСообщения.ТребуемоеДействие = "Обработать новую версию"
		Или (СтрокаСообщения.ТребуемоеДействие = "Не прошло валидацию" И Параметры.РежимРаботы = "Поставщик")
    Тогда
		ТолькоПросмотр = Ложь;
	Иначе
		ТолькоПросмотр = Истина;
	КонецЕсли;	

	ПараметрыФормы = Новый Структура("СообщениеСсылка",		СообщениеСсылка); 
	ПараметрыФормы.Вставить("Документ1С",					СтрокаСообщения.Документ);
	ПараметрыФормы.Вставить("ТипСообщения",					СтрокаСообщения.ТипСообщения);
	ПараметрыФормы.Вставить("Направление",					СтрокаСообщения.Направление);
	ПараметрыФормы.Вставить("ТолькоПросмотр",				ТолькоПросмотр);
	ПараметрыФормы.Вставить("КодДействия",					КодДействия);
	ПараметрыФормы.Вставить("РежимРаботы",					Параметры.РежимРаботы);
	ПараметрыФормы.Вставить("АдресХранилища",				Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("IDОсновнойФормы",				Параметры.IDОсновнойФормы);
	ПараметрыФормы.Вставить("ПараметрыАвтотестирования",	Параметры.ПараметрыАвтотестирования);
	
	Если СтрокаСообщения.ТребуемоеДействие = "Переотправить сообщение"
		или (СтрокаСообщения.ТребуемоеДействие = "Работа завершена" и Лев(КодДействия,10)="Отправить_") 
		или (СтрокаСообщения.ТребуемоеДействие = "Работа завершена с уточнением" и Лев(КодДействия,10)="Отправить_") 
		или (СтрокаСообщения.ТребуемоеДействие = "Ожидайте подпись партнера" и Лев(КодДействия,10)="Отправить_") 
		Тогда
		ПараметрыФормы.Вставить("ПереотправляемоеСообщениеСсылка",СообщениеСсылка);
	КонецЕсли;
	
	Если НЕ ПроизвольныеПараметры = Неопределено Тогда 
		ПараметрыФормы.Вставить("ПроизвольныеПараметры",	ПроизвольныеПараметры);
	КонецЕсли;
	
	Если КодДействия = "Отправить_ORDRSP" 
		и ТипЗНЧ(ПроизвольныеПараметры) = Тип("Структура") 
		и ПроизвольныеПараметры.Свойство("Статус") 
		и ПроизвольныеПараметры.Статус = "Отклонить" Тогда 
		ПараметрыФормы.ТипСообщения	= "ORDRSP";  
		//костылик для отправки полной отмены в ordrsp из списка
		//Еще костыль на случай, когда по архивному ORDERS отправляем отклонение
		//нужно убрать ПереотправляемоеСообщениеСсылка, потому что в нем сам ORDERS, 
		//или подставить ссылку на уже отправленный ORDRSP
		Если СтрокаСообщения.ТипСообщения = "ORDERS" 
			И ПараметрыФормы.Свойство("ПереотправляемоеСообщениеСсылка") Тогда
			ПереотправляемоеСообщениеСсылка = НайтиСообщениеДокументаСервер(СтрокаСообщения.Документ, "ORDRSP", "Исходящее");
			Если ПереотправляемоеСообщениеСсылка <> Неопределено Тогда
				ПараметрыФормы.ПереотправляемоеСообщениеСсылка = ПереотправляемоеСообщениеСсылка;
			Иначе
				ПараметрыФормы.Удалить("ПереотправляемоеСообщениеСсылка");	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (КодДействия = "Отправить_RETINS" ИЛИ КодДействия = "Отправить_RETREC") 
		И ТипЗНЧ(ПроизвольныеПараметры) = Тип("Структура") 
		И ПроизвольныеПараметры.Свойство("Действие") 
		И ПроизвольныеПараметры.Действие = "Отклонить" Тогда
		
		ПараметрыФормы.ТипСообщения	= СтрЗаменить(КодДействия, "Отправить_", "");
		
	КонецЕсли;
	
	ИмяКарточкиСообщения = "ФормаСообщенияУправляемая";//Единая карточка сообщения для большинства типов сообщений
	Если СтрокаСообщения.ТипСообщения = "PRICELIST" 
		ИЛИ СтрокаСообщения.ТипСообщения = "PRICAT" 
		ИЛИ СтрокаСообщения.ТипСообщения = "SLSRPT"
		ИЛИ СтрокаСообщения.ТипСообщения = "INVRPT" Тогда
		ИмяКарточкиСообщения = "ФормаНезависимогоСообщенияУправляемая";
	КонецЕсли;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ИмяКарточкиСообщения, ПараметрыФормы,""ОбработчикПослеЗакрытияКарточкиСообщения"",АнализСообщения_До)");//,ДополнительныеПараметры);
	Иначе
		СообщениеСсылкаНов = ПолучитьФормуОбработки(ИмяКарточкиСообщения,ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослеЗакрытияКарточкиСообщения(СообщениеСсылкаНов,АнализСообщения_До);
	КонецЕсли;
	
	
	//все это при создании на сервере сделать
	
	//Если ЗначениеЗаполнено(СообщениеСсылка) Тогда
	//	Сообщение = ПрочитатьСообщение(СообщениеСсылка,СтрокаСообщения.Документ,СтрокаСообщения.ТипСообщения,СтрокаСообщения.Направление,Ложь);
	//	Сообщение.Документ1С = СтрокаСообщения.Документ;//залечить этот костыль потом
	//Иначе
	//	Сообщение = ПодготовитьИсходящееСообщение(СтрокаСообщения.ТипСообщения, СтрокаСообщения.Документ);
	//	Сообщение.Документ1С = СтрокаСообщения.Документ;//залечить этот костыль потом
	//КонецЕсли;	
	
	//ФормаСообщения.Сообщение=Сообщение;
	//
	//Если СтрокаСообщения.ТребуемоеДействие = "Обработать сообщение"
	//	Или СтрокаСообщения.ТребуемоеДействие = "Переотправить сообщение"
	//	Или СтрокаСообщения.ТребуемоеДействие = "Обработать новую версию"
	//Тогда
	//	ТолькоПросмотр = Ложь;
	//Иначе
	//	ТолькоПросмотр = Истина;
	//КонецЕсли;	
	//
	//ФормаСообщения.ТолькоПросмотрСообщения = ТолькоПросмотр;
	//
	//Попытка
	//	ФормаСообщения.ОткрытьМодально();
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	ФормаСообщения=Неопределено;
	//КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокНашихОрганизаций(Команда)
	ПараметрыФормы=	Новый Структура;
	
	Если Параметры.МодальностьЗапрещена Тогда                                                                           				//		\|/не ошибка
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""НашиОрганизации_СписокУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияУчетныхЗаписей"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("НашиОрганизации_СписокУправляемая",ПараметрыФормы).ОткрытьМодально();
		//nop
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТребуемоеДействиеВСообщениях(Команда)
	ЗаполнитьТребуемоеДействиеВСообщенияхСервер();
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьТребуемоеДействиеВСообщенияхСервер()
	
	Запрос = МодульОбъекта().ИнициализироватьЗапрос_КонтурEDI(ложь);
	Запрос.Текст = 
	"ВЫБРАТЬ первые 1
	|	КонтурEDI_Сообщения.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.ТребуемоеДействие = """""
	;
	Если Запрос.Выполнить().Пустой() Тогда
		МодульОбъекта().УстановитьКонстантуEDI("Сообщения_ЗаполненоТребуемоеДействие",Истина);
	КонецЕсли;	
	
	
	//конвертация
	
	Запрос = МодульОбъекта().ИнициализироватьЗапрос_КонтурEDI(ложь);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_Сообщения.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.ТребуемоеДействие = """""
	;
	Выборка = Запрос.Выполнить().Выбрать();
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		Сч=Сч+1;
		
		ОбъектСообщения = Выборка.Ссылка.ПолучитьОбъект();
		СтруктураСообщения = МодульОбъекта().ПрочитатьСообщение(Выборка.Ссылка);
		МодульОбъекта().СохранитьОбъектСообщения(ОбъектСообщения,СтруктураСообщения);//перезаполним реквизиты справочника
		
	КонецЦикла;
	
	МодульОбъекта().УстановитьКонстантуEDI("Сообщения_ЗаполненоТребуемоеДействие",Истина);//как назвать константу?
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПартнеров(Команда)
	ПараметрыФормы=	Новый Структура;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Партнеры_СписокУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияПартнеров"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Партнеры_СписокУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослередактированияПартнеров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослередактированияПартнеров(ПараметрыЗакрытияИнтерактивнойФормы=неопределено, ДополнительныеПараметры=неопределено) Экспорт
	
	Состояние("Обновляю форму...",15,,Элементы.Настройки.Картинка);
	//переведем активный элемент чтобы при перезаполнении партнеров не произошла случайно активация ячейки добавления партнера
	Элементы.ДеревоФильтров.ТекущийЭлемент = Элементы.ДеревоФильтров.ПодчиненныеЭлементы.ДеревоФильтровГруппа.ПодчиненныеЭлементы.ДеревоФильтровПометка;
	ЗаполнитьСписокПартнеров();
	РазвернутьДеревоФильтровКлиент();
	Состояние("Обновляю форму...",35,,Элементы.Настройки.Картинка);
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтруктуруКомпании(Команда)
    ПараметрыФормы=	Новый Структура;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""СтруктураКомпании_ЭлементУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияСтруктурыКомпании"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("СтруктураКомпании_ЭлементУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослередактированияСтруктурыКомпании();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослередактированияСтруктурыКомпании(ПараметрыЗакрытияИнтерактивнойФормы=неопределено, ДополнительныеПараметры=неопределено) Экспорт
	Состояние("Обновляю кэш...",1,,Элементы.Настройки.Картинка);
	ОбновитьКэшМодуляОбъекта();
	Состояние("Обновляю форму...",10,,Элементы.Настройки.Картинка);
	ОпределитьРежимРаботы();
	Состояние("Обновляю форму...",15,,Элементы.Настройки.Картинка);
	ЗаполнитьНастройкиОтборов(истина,истина,истина,истина);
    РазвернутьДеревоФильтровКлиент();
	Состояние("Обновляю форму...",35,,Элементы.Настройки.Картинка);
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБыстрыеОтборы(default=Неопределено)
	
	ЕстьОтборПоНомеру=Ложь;
	ЕстьОтборДатеПоставки=Ложь;
	ЕстьОтборДатеЗаказа=Ложь;
	
	Если СокрЛП(ОтборНомерЗаказа)<>"" Тогда
		ЕстьОтборПоНомеру=Истина;
	КонецЕсли;
	Если ОтборДатаПоставки<>Дата(1,1,1) Тогда
		ЕстьОтборДатеПоставки=Истина;
	КонецЕсли;
	Если ОтборДатаЗаказа <>Дата(1,1,1) Тогда
		ЕстьОтборДатеЗаказа=Истина;
	КонецЕсли;
	
	Если Не ЕстьОтборДатеЗаказа и не ЕстьОтборДатеПоставки и не ЕстьОтборПоНомеру Тогда 
		Элементы.ТабСообщения.ОтборСтрок = Неопределено;
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	Если ЕстьОтборПоНомеру Тогда 
		СтруктураОтбора.Вставить("НомерЗаказа",СокрЛП(ОтборНомерЗаказа));
	КонецЕсли;
	Если ЕстьОтборДатеПоставки Тогда 
		СтруктураОтбора.Вставить("ДатаПоставки",ОтборДатаПоставки);
	КонецЕсли;
	Если ЕстьОтборДатеЗаказа Тогда 
		СтруктураОтбора.Вставить("ДатаЗаказа",ОтборДатаЗаказа);
	КонецЕсли;
	
	Элементы.ТабСообщения.ОтборСтрок = новый ФиксированнаяСтруктура(СтруктураОтбора);

КонецПроцедуры


//быстрые отборы: номер заказа
&НаКлиенте
Процедура ОтборНомерЗаказаПриИзменении(Элемент)
	УстановитьБыстрыеОтборы();
	
	//ЭлементОтбора = Элементы.ТабСообщения.ОтборСтрок.НомерЗаказа;
	//ЭлементОтбора.Значение = ОтборНомерЗаказа;
	//ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
	//ЭлементОтбора.Использование = ЗначениеЗаполнено(ОтборНомерЗаказа);
	
	//Пасхалочки ф студийю!!!
	Если ВРЕГ(ОтборНомерЗаказа)="     " Тогда    //5 пробелов - кул
		Предупреждение("Включено бессмертие");
		Элементы.ВыполнитьОбмен.Картинка = БиблиотекаКартинок.Константа;
		Элементы.ВыполнитьОбмен.Заголовок = "ОБМЕН!!!";
		
		Элементы.ВыполнитьОбмен.ЦветФона = WebЦвета.Красный;
		
		//ЭлементыФормы.Панель1.ЦветФона = WebЦвета.Красный;
		//ЭлементыФормы.ПанельОтбораСообщений.ЦветФона = WebЦвета.Красный;
		
		//ЭлементыФормы.ТабСообщения.ЦветФонаПоля = WebЦвета.Красный;
		
	ИначеЕсли ВРЕГ(ОтборНомерЗаказа)="контур" Тогда
		Предупреждение("Включено бесконечное оружие");
	ИначеЕсли ВРЕГ(ОтборНомерЗаказа)="12345" Тогда
		Предупреждение("Возможно, вы имели в виду ""54321""");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекЗначениеВБыстрыйОтборНомерЗаказа(Команда)
	ТекСтрока = Элементы.ТабСообщения.ТекущиеДанные;
	Если ТекСтрока<>Неопределено Тогда 
		ОтборНомерЗаказа=ТекСтрока.НомерЗаказа;
		УстановитьБыстрыеОтборы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекЗначениеВБыстрыйОтбордатаЗаказа(Команда)
	ТекСтрока = Элементы.ТабСообщения.ТекущиеДанные;
	Если ТекСтрока<>Неопределено Тогда 
		ОтборДатаЗаказа=ТекСтрока.ДатаЗаказа;
		УстановитьБыстрыеОтборы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекЗначениеВБыстрыйОтборДатаПоставки(Команда)
	ТекСтрока = Элементы.ТабСообщения.ТекущиеДанные;
	Если ТекСтрока<>Неопределено Тогда 
		ОтборДатаПоставки=ТекСтрока.ДатаПоставки;
		УстановитьБыстрыеОтборы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТребуемыеДействияСброситьФлажки(Команда)
	УстановитьИлиСброситьФлажкиТребуемыхДействий(Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура ТребуемыеДействияУстановитьФлажки(Команда)
	УстановитьИлиСброситьФлажкиТребуемыхДействий(Истина);	
	ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИлиСброситьФлажкиТребуемыхДействий(Установить)
	Для Каждого Стр Из ОтборТребуемыеДействия.ПолучитьЭлементы() Цикл
		Стр.Пометка = Установить;
		
		Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
			Стр2.Пометка = Установить;     //сбросим пометку везде за исключенем когда нам тыкнули в группу
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИлиСброситьФлажкиТиповСообщений(Установить)
	Для Каждого Стр Из ОтборТипыСообщений Цикл
		Стр.Пометка = Установить;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеСвязанныеСообщения(Команда)
	
	ТекСтрока = Элементы.ТабСообщения.ТекущиеДанные;
	
	Если ТекСтрока<>Неопределено
		И ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
	
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("ДокументСсылка",		ТекСтрока.Документ);
		ПараметрыФормы.Вставить("СообщениеСсылка",		ТекСтрока.СообщениеСсылка);
		ПараметрыФормы.Вставить("МодальностьЗапрещена",	Параметры.МодальностьЗапрещена);
		ПараметрыФормы.Вставить("РежимРаботы",			Параметры.РежимРаботы);
		
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_СвязанныеСообщенияУправляемая"", ПараметрыФормы,""ОбновитьСписок"")");//,ДополнительныеПараметры);
		Иначе
			ПолучитьФормуОбработки("Сервис_СвязанныеСообщенияУправляемая",ПараметрыФормы).ОткрытьМодально();
			ОбновитьСписок();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеПереотправить(Команда)
	
	МассивИДвыделенных = Элементы.ТабСообщения.ВыделенныеСтроки;
	
	Если МассивИДвыделенных.Количество()=0 Тогда
		
		Возврат;
		
	ИначеЕсли МассивИДвыделенных.Количество()=1 Тогда
		
		ВыбраннаяСтрока = Элементы.ТабСообщения.ТекущиеДанные;
		ПакетнаяОбработка = Ложь;
		
		КодДействия="";//"ИсправитьОшибки"
		Если ВыбраннаяСтрока<>Неопределено Тогда 
			Результат = _ОтправитьИсходящееСообщение(ВыбраннаяСтрока,ПакетнаяОбработка,"Отправить_");
			ВычеркнутьТекущиеСтроки();
		КонецЕсли;
		
	ИначеЕсли МассивИДвыделенных.Количество()>0 Тогда
		
		КнопкиВопроса=новый СписокЗначений;
		КнопкиВопроса.Добавить("Переотправить "+МассивИДвыделенных.Количество());
		КнопкиВопроса.Добавить("Отмена");
		
		МодальныйВопрос("Будет выполнена переотправка: "+МассивИДвыделенных.Количество()+" сообщений. Продолжить?", КнопкиВопроса, МассивИДвыделенных, "ОбработчикСогласиеНаПереотправку");	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСогласиеНаПереотправку(РезультатВопроса,МассивИДвыделенных) Экспорт
	
	Если РезультатВопроса<>Неопределено И Лев(РезультатВопроса,13)="Переотправить" Тогда 
		Переотправлено=ПереотправитьВызовСервера(МассивИДвыделенных);
		
		Если Переотправлено=0 Тогда
			Сообщить("Не удалось переотправить ни одного сообщения");
		Иначе
			Сообщить("Успешно переотправлено "+Переотправлено+" сообщений");
			Если ОбновлятьВесьСписокПриРаботеСЗаказами Тогда 
				ЗаполнитьСписокЗадачКлиент();
			Иначе
				ВычеркнутьТекущиеСтроки();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПереотправитьВызовСервера(МассивИДвыделенных)
	
        КоличествоУспешно=0;
		Для Каждого ВыделеннаяСтрокаИД Из МассивИДвыделенных Цикл
			ВыделеннаяСтрока = Объект.ТабСообщения.НайтиПоИдентификатору(ВыделеннаяСтрокаИД);
			
			Если ВыделеннаяСтрока.Направление<>"Исходящее"
				ИЛИ Лев(ВыделеннаяСтрока.ТребуемоеДействие,9)="Отправить" тогда 
				Продолжить; //не будем переотправлять входящие и те, которые и так к отправке
			КонецЕсли;

			Сообщение = МодульОбъекта().ПодготовитьИсходящееСообщение(ВыделеннаяСтрока.ТипСообщения, ВыделеннаяСтрока.Документ);
			Сообщение.Вставить("ПереотправляемоеСообщениеСсылка",ВыделеннаяСтрока.СообщениеСсылка);
			
			КопияСообщения		= МодульОбъекта().ПолучитьКопиюСообщения(Сообщение);
			РезультатПроверки	= МодульОбъекта().ПроверитьПоляСообщения(КопияСообщения);
			
			Если РезультатПроверки.Успешно = Истина Тогда
				МодульОбъекта().СохранитьСообщение(Сообщение);											
				КоличествоУспешно=КоличествоУспешно+1;
			КонецЕсли;
		КонецЦикла;
        Возврат КоличествоУспешно;
		
КонецФункции // ПереотправитьВызовСервера()


&НаКлиенте
Процедура КнопкаЕщеОткрытьКарточкуСообщения(Команда)
	ТекСтрока = Элементы.ТабСообщения.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.СообщениеСсылка) Тогда
    	мОткрытьКарточкуСообщения(ТекСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеОтменитьЗаказ(Команда)
	ТекСтрока = Элементы.ТабСообщения.ТекущиеДанные;
	Документ = ТекСтрока.Документ;
	СсылкаНаИсходныйORDERS = ТекСтрока.СообщениеСсылка;
	
	КнопкаЕщеОтменитьЗаказСервер(Документ,СсылкаНаИсходныйORDERS);
	
	ОбработчикПослеЗакрытияКарточкиСообщения();
КонецПроцедуры

&НаСервере
Процедура КнопкаЕщеОтменитьЗаказСервер(Документ,СсылкаНаИсходныйORDERS)
	
	ПараметрыСообщения = Новый Структура();
	ПараметрыСообщения.Вставить("Статус","Отменить");
	ПараметрыСообщения.Вставить("ИсходноеСообщение",МодульОбъекта().ПрочитатьСообщение(СсылкаНаИсходныйORDERS));
	
	МодульОбъекта().ОтправитьСообщение("ORDERS",Документ,ПараметрыСообщения);	

КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеОтклонитьЗаказПолностью(Команда)
	
	Если Элементы.ТабСообщения.ВыделенныеСтроки.Количество()=0 Тогда
		
		Возврат;
		
	ИначеЕсли Элементы.ТабСообщения.ВыделенныеСтроки[0]=Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Элементы.ТабСообщения.ВыделенныеСтроки.Количество()=1 Тогда
		
	ТекСтрока = Элементы.ТабСообщения.ТекущиеДанные;
	
	МожноОтклонитьЗаказ = МожноОтправитьСообщение(ТекСтрока.Партнер, "ORDRSP");
	Если Не МожноОтклонитьЗаказ Тогда
		
		ТекстПредупреждения = "Настройки торговой сети не позволяют отклонить заказ.";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ПроизвольныеПараметры = Новый Структура();
	ПроизвольныеПараметры.Вставить("Статус","Отклонить");
	
	Если ТекСтрока.ТипСообщения = "ORDERS" Тогда
		ВходящийЗаказСсылка = ТекСтрока.СообщениеСсылка;
	ИначеЕсли ТекСтрока.ТипСообщения = "ORDRSP" Тогда
		ВходящийЗаказСсылка = НайтиСообщениеДокументаСервер(ТекСтрока.Документ, "ORDERS", "Входящее");
	КонецЕсли;
	ПроизвольныеПараметры.Вставить("ВходящийЗаказ", ВходящийЗаказСсылка);   //теперь так можно
	
	мОткрытьКарточкуСообщения(ТекСтрока,"Отправить_ORDRSP",ПроизвольныеПараметры);
	
	Иначе
	
		//групповые действия для отклонения нескольких заказов
		
		ТекстВопроса ="Будет обработано строк: "+Элементы.ТабСообщения.ВыделенныеСтроки.Количество()+". Продолжить?";
		КнопкиВопроса=новый СписокЗначений;
		КнопкиВопроса.Добавить("Продолжить");
		КнопкиВопроса.Добавить("Отмена");
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		РезультатВопроса = Неопределено;
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияНагрупповыеORDRSP"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
		Иначе
			РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
			ОбработчикСогласияНагрупповыеORDRSP(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеОтклонитьВозвратПолностью(Команда)
	
	Если Элементы.ТабСообщения.ВыделенныеСтроки.Количество() = 0
		ИЛИ Элементы.ТабСообщения.ВыделенныеСтроки[0] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ТабСообщения.ТекущиеДанные;
	
	ПроизвольныеПараметры = Новый Структура();
	ПроизвольныеПараметры.Вставить("Действие", "Отклонить");
	ПроизвольныеПараметры.Вставить("ВходящийВозврат", ТекСтрока.СообщениеСсылка);
	
	Если ТекСтрока.ТипСообщения = "RETANN" Тогда
		ТипОтправляемогоСообщения = "RETINS";
	ИначеЕсли ТекСтрока.ТипСообщения = "RETDES" Тогда	
		ТипОтправляемогоСообщения = "RETREC";
    КонецЕсли;
	
	МожноОтклонитьВозврат = МожноОтправитьСообщение(ТекСтрока.Партнер, ТипОтправляемогоСообщения);
	
	Если Не МожноОтклонитьВозврат Тогда
		ТекстПредупреждения = "Настройки торговой сети не позволяют отклонить возврат.";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	мОткрытьКарточкуСообщения(ТекСтрока, "Отправить_" + ТипОтправляемогоСообщения, ПроизвольныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеРаспечататьЗаказы(Команда)

	МассивИДвыделенных = Элементы.ТабСообщения.ВыделенныеСтроки;
	МассивСообщений = Новый Массив;
	Если МассивИДвыделенных.Количество()>0 Тогда
		Для Каждого ВыделеннаяСтрокаИД Из МассивИДвыделенных Цикл
			ВыделеннаяСтрока = Объект.ТабСообщения.НайтиПоИдентификатору(ВыделеннаяСтрокаИД);
			Если ВыделеннаяСтрока.СообщениеСсылка <> Неопределено
				И ВыделеннаяСтрока.ТипСообщения = "ORDERS" Тогда
				МассивСообщений.Добавить(ВыделеннаяСтрока.СообщениеСсылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если МассивСообщений.Количество() = 0 Тогда
		ТекстПредупреждения="В выбранных строках нет заказов для печати.";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТабДокОбщий = ОбработатьМассовуюПечатьЗаказовСервер(МассивСообщений);
	
	ТабДокОбщий.Показать("Новые заявки ("+МассивСообщений.Количество()+" шт) - "+Формат(ТекущаяДата(),"ДЛФ=Д"));
	
КонецПроцедуры

&НаСервере
Функция ОбработатьМассовуюПечатьЗаказовСервер(МассивСообщений)
	
	ТабДокОбщий = МодульОбъекта().ОбработатьМассовуюПечатьЗаказов(МассивСообщений);

	Возврат ТабДокОбщий;
	
КонецФункции

&НаКлиенте
Процедура КнопкаЕщеРаспечататьПалетныеЛисты(Команда)
	
	МассивИДвыделенных = Элементы.ТабСообщения.ВыделенныеСтроки;
	МассивСообщений = Новый Массив;
	Если МассивИДвыделенных.Количество()>0 Тогда
		Для Каждого ВыделеннаяСтрокаИД Из МассивИДвыделенных Цикл
			ВыделеннаяСтрока = Объект.ТабСообщения.НайтиПоИдентификатору(ВыделеннаяСтрокаИД);
			Если ВыделеннаяСтрока.ТипСообщения = "DESADV"
				И ЗначениеЗаполнено(ВыделеннаяСтрока.СообщениеСсылка) Тогда
				МассивСообщений.Добавить(ВыделеннаяСтрока.СообщениеСсылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Результат = ОбработатьМассовуюПечатьПалетныхЛистовСервер(МассивСообщений);
	
	Если Не Результат.Успешно Тогда
		ТекстПредупреждения="Не удалось подключить внешнюю компоненту для формирования картинки штрихкода.";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
	Иначе
		Если Результат.КоличествоЛистов = 0 Тогда
			ТекстПредупреждения="В выбранных строках нет палетных листов для печати.";
			Если Параметры.МодальностьЗапрещена Тогда 
				Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
			Иначе
				Предупреждение(ТекстПредупреждения,,"Контур.EDI");
			КонецЕсли;
		Иначе
			Результат.ТабДокОбщий.Показать("Палетные листы ("+Результат.КоличествоЛистов+" шт) - "+Формат(ТекущаяДата(),"ДЛФ=Д"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьМассовуюПечатьПалетныхЛистовСервер(МассивСообщений)

	Результат = МодульОбъекта().ОбработатьМассовуюПечатьПалетныхЛистов(МассивСообщений);

	Возврат Результат;	

КонецФункции // ОбработатьМассовуюПечатьПалетныхЛистов()

&НаКлиенте
Процедура ОбработчикСогласияНагрупповыеORDRSP(РезультатВопроса,ДопПараметрДляПередачиВОбработчик) Экспорт
	Если РезультатВопроса= "Продолжить" Тогда 
	
		МассивСТрокДляОбработки = Новый Массив;
		Для Каждого ИдентификаторСтроки Из Элементы.ТабСообщения.ВыделенныеСтроки Цикл
		 	ТекСтрока = Объект.ТабСообщения.НайтиПоИдентификатору(ИдентификаторСтроки);
			МассивСТрокДляОбработки.Добавить(ТекСтрока);
		КонецЦикла;
		
		Для Каждого СтрокаДанныхФормы Из МассивСТрокДляОбработки Цикл
			 //проверим что перед нами строка orders
			 Если СтрокаДанныхФормы.ТипСообщения = "ORDERS" и СтрокаДанныхФормы.ТребуемоеДействие<>"Обработать уточнение обратного заказа" Тогда 
			 	ОтклонитьЗаказыСервер(СтрокаДанныхФормы.СообщениеСсылка,СтрокаДанныхФормы.Партнер,СтрокаДанныхФормы.Документ);
			 КонецЕсли;
		 КонецЦикла;
		 
		 //обновить список
		 ЗаполнитьСписокЗадачКлиент();
    КонецЕсли;
КонецПроцедуры // ОбработчикСогласияНагрупповыеORDRSP()

&НаСервере
Процедура ОтклонитьЗаказыСервер(СообщениеСсылка,Партнер,Документ1С)
	
	ПараметрыОтмены = Новый Структура();
	ПараметрыОтмены.Вставить("Статус","Отклонить");
	ПараметрыОтмены.Вставить("ВходящийЗаказ",СообщениеСсылка);
	
	МожноОтклонитьЗаказ = (МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Партнер,"ORDRSP")=Истина);
	Если Не МожноОтклонитьЗаказ Тогда
		ПредставлениеПартнера = МодульОбъекта().ПолучитьПредставлениеЭлементаСправочника(Партнер);
		МодульОбъекта().ВывестиПредупреждение_КонтурEDI("Настройки торговой сети """ + ПредставлениеПартнера + """ не позволяют отклонить заказ.");
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Сообщение = МодульОбъекта().ПодготовитьИсходящееСообщение("ORDRSP",Документ1С,ПараметрыОтмены);
	МодульОбъекта().СохранитьСообщение(Сообщение);
	
	//исходный заказ помечаем отклоненным
	СообщениеЗаказ=МодульОбъекта().ПолучитьОбъектСообщения(СообщениеСсылка);
	СообщениеЗаказ.Статус = "Отклонен";
	СообщениеЗаказ.ТребуемоеДействие = "СообщениеОтклоненоПолучателем";
    СообщениеЗаказ.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ОтклонитьЗаказСервер()

&НаСервере
Функция МожноОтправитьСообщение(Партнер, ТипСообщения)
	
	Возврат (МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, ТипСообщения) = Истина);
	
КонецФункции // МожноОтправитьСообщение()

&НаКлиенте
Процедура УстановитьДоступностьКнопокЕще(Элемент)
	
	Для Каждого КнопкаРазделаЕще Из Элементы.Еще.ПодчиненныеЭлементы  Цикл
		КнопкаРазделаЕще.Видимость=Ложь;
	КонецЦикла;
	
	//заполним общие действия
	Если Параметры.РежимРаботы = "Поставщик" Тогда 
		СкопироватьКнопкуЕще("ПоказатьНаЯндексКартах");
		СкопироватьКнопкуЕще("РаспечататьЗаказы");
		СкопироватьКнопкуЕще("РаспечататьПалетныеЛисты");
	КонецЕсли;
	
	СкопироватьКнопкуЕще("ВыделитьВсе");
	СкопироватьКнопкуЕще("ПереотправитьПоРеестру");
	СкопироватьКнопкуЕще("СверкаСчетовФактур");
	СкопироватьКнопкуЕще("ПроверитьНаличиеОтказовЗапросовНаУточнение");
	СкопироватьКнопкуЕще("Разделитель");
	
	Если Параметры.РежимРаботы = "Покупатель" Тогда
		СкопироватьКнопкуЕще("СоздатьЗаказ");
	ИначеЕсли Параметры.РежимРаботы = "Поставщик" Тогда
		Если Элементы.ТабСообщения.ВыделенныеСтроки.Количество()>1 Тогда
			Для Каждого ИдентификаторСтроки Из Элементы.ТабСообщения.ВыделенныеСтроки Цикл
		 		Строка = Объект.ТабСообщения.НайтиПоИдентификатору(ИдентификаторСтроки);
				Если Строка<>неопределено и Строка.ТипСообщения="ORDERS" и Строка.ТребуемоеДействие<>"Обработать уточнение обратного заказа" Тогда 
					СкопироватьКнопкуЕще("ОтклонитьЗаказПолностью");//сделаем кнопку массового отклонения заказов
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
	//теперь действия, зависящие от конкретной строки
	
	Если Элементы.ТабСообщения.ВыделенныеСтроки.Количество()=1
		И Элементы.ТабСообщения.ВыделенныеСтроки[0]<>Неопределено 
		Тогда
		
		ВыбраннаяСтрока = Элементы.ТабСообщения.ТекущиеДанные; 
		Если ВыбраннаяСтрока=неопределено Тогда 
			Состояние("Нет активной строки",100,,);
			Возврат;
		КонецЕсли;
		
		//установим доступность каждой кнопки
		
		//Кнопка "Открыть карточку сообщения"
		Если ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка) Тогда
			СкопироватьКнопкуЕще("ОткрытьКарточкуСообщения");
		КонецЕсли;	
		
		//Кнопка "Связанные сообщения"
		Если ЗначениеЗаполнено(ВыбраннаяСтрока.Документ) Тогда
			СкопироватьКнопкуЕще("СвязанныеСообщения");
		КонецЕсли;	
		
		//кнопки для поставщика
		
		Если Параметры.РежимРаботы = "Поставщик" Тогда
			
			//Кнопки "Показать расхождения входящего заказа и заказа в 1С"
			//	"Отклонить заказ полностью"
			Если (ВыбраннаяСтрока.ТипСообщения = "ORDERS"
				Или ВыбраннаяСтрока.ТипСообщения = "ORDRSP")
				И ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка)
				И ВыбраннаяСтрока.ТребуемоеДействие<>"Ожидайте заказ"
				Тогда
				СкопироватьКнопкуЕще("ПоказатьРасхожденияВходящегоЗаказаИЗаказаВ1С");
				Если ВыбраннаяСтрока.ТребуемоеДействие<>"Обработать уточнение обратного заказа" Тогда
					СкопироватьКнопкуЕще("ОтклонитьЗаказПолностью");
				КонецЕсли;
			КонецЕсли;
			
			//Кнопка "Отклонить возврат полностью"
			Если (ВыбраннаяСтрока.ТипСообщения = "RETDES" 
				ИЛИ ВыбраннаяСтрока.ТипСообщения = "RETANN")
				И ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка) Тогда
				СкопироватьКнопкуЕще("ОтклонитьВозвратПолностью");
			КонецЕсли;
			
			//Кнопка "Показать расхождения приемки"
			Если ВыбраннаяСтрока.ТипСообщения = "RECADV"
				И ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка)
				И ВыбраннаяСтрока.ТребуемоеДействие<>"Ожидайте уведомление о приемке"
				Тогда
				СкопироватьКнопкуЕще("ПоказатьРасхожденияПриемки");
			КонецЕсли;
			
			//Кнопка "Переотправить"
			Если ВыбраннаяСтрока.Направление = "Исходящее" Тогда
				СкопироватьКнопкуЕще("Переотправить");
			КонецЕсли;	
			
			Если (ВыбраннаяСтрока.ТипСообщения = "INVOIC" ИЛИ ВыбраннаяСтрока.ТипСообщения = "COINVOIC")
				И ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка) 
			Тогда
				
				//как отфильтровать?
				Если ВыбраннаяСтрока.ТребуемоеДействие <> "Создать счет-фактуру" 
					И ВыбраннаяСтрока.ТребуемоеДействие <> "Отправить счет-фактуру" 
					//И ВыбраннаяСтрока.ТребуемоеДействие <> "Подписать в Диадоке"   //c 16 релиза можно открыть
				Тогда
					СкопироватьКнопкуЕще("ОткрытьЭлДокументыВДиадоке");
				КонецЕсли;	
				
			КонецЕсли;

		//кнопки для сети	
		ИначеЕсли Параметры.РежимРаботы = "Покупатель" Тогда
			
			//Кнопка "Переотправить"
			Если (ВыбраннаяСтрока.ТипСообщения = "ORDERS"
				Или ВыбраннаяСтрока.ТипСообщения = "RECADV"
				Или ВыбраннаяСтрока.ТипСообщения = "RETANN")
				
				И ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка)
				
				И (ВыбраннаяСтрока.ТребуемоеДействие = "Работа завершена"
					или ВыбраннаяСтрока.ТребуемоеДействие = "Переотправить сообщение")
			Тогда
				СкопироватьКнопкуЕще("Переотправить");
			КонецЕсли;
			
			//Кнопка "Скопировать"
			Если ЗначениеЗаполнено(ВыбраннаяСтрока.Документ)
				И (ВыбраннаяСтрока.ТипСообщения = "ORDERS" или ВыбраннаяСтрока.ТипСообщения = "ORDRSP")
			Тогда
				СкопироватьКнопкуЕще("СкопироватьЗаказ");
			КонецЕсли;
			
			//Кнопка "Отменить заказ"
			Если ВыбраннаяСтрока.ТипСообщения = "ORDERS"
				И ЗначениеЗаполнено(ВыбраннаяСтрока.Документ)
				И ЗначениеЗаполнено(ВыбраннаяСтрока.СообщениеСсылка)
				//нужна ли проверка на то, что сообщение отправлено
			Тогда
				СкопироватьКнопкуЕще("ОтменитьЗаказ");
			КонецЕсли;
			
		КонецЕсли;	
	Иначе
		Состояние("Нет активной строки",100,,);
	КонецЕсли;	
	
	//установить доступность пунктов из "Еще"

КонецПроцедуры

//в УФ просто устанавливает видимость соответствующей кнопки  название оставлено для удобства || разработки уф оф
//В обычных формах работает так:
//Копирует кнопку с заданным именем из скрытого меню "Еще" в видимое меню
//Такие навороты нужны для того, чтобы в меню "Еще" были только доступные для выбранной строки действия
&НаКлиенте
Процедура СкопироватьКнопкуЕще(ИмяКнопки)
	//Источник = ЭлементыФормы.КнопкаЕщеСкрытая.Кнопки.Найти(ИмяКнопки);
	//Нов = ЭлементыФормы.КнопкаЕще.Кнопки.Добавить(Источник.Имя, Источник.ТипКнопки,Источник.Текст, Источник.Действие);
	//Нов.Картинка = Источник.Картинка;
	//Нов.СочетаниеКлавиш = Источник.СочетаниеКлавиш;
	//Нов.Доступность = Истина;
	//
	//Нов = ЭлементыФормы.МенюСпискаДокументов.Кнопки.Добавить(Источник.Имя, Источник.ТипКнопки,Источник.Текст, Источник.Действие);
	//Нов.Картинка = Источник.Картинка;
	//Нов.СочетаниеКлавиш = Источник.СочетаниеКлавиш;
	//Нов.Доступность = Истина;
	
	//метка рефакторинг - пока не все кнопки перенесены - в попытке. 
	Попытка
	Выполнить("Элементы.КнопкаЕще"+ИмяКнопки+".Видимость=Истина");
	Исключение
	КонецПопытки;
	
КонецПроцедуры	

&НаКлиенте
Процедура КнопкаЕщеНажатие(Команда)
	
	//Состояние("Определяю доступные действия", 60,,Элементы.Настройки.Картинка);
	
	УстановитьДоступностьКнопокЕще("");
	
	СписокКнопок=Новый СписокЗначений;
	Для Каждого КнопкаРазделаЕще Из Элементы.Еще.ПодчиненныеЭлементы  Цикл
		Если КнопкаРазделаЕще.Видимость = истина Тогда 
			СписокКнопок.Добавить(КнопкаРазделаЕще.Имя, КнопкаРазделаЕще.Заголовок, , КнопкаРазделаЕще.Картинка);
		КонецЕсли;
	КонецЦикла;
	
	
	Если Параметры.МодальностьЗапрещена Тогда 
		//Выполнить("ПоказатьВыборИзМеню(Новый ОписаниеОповещения(""ОбработчикВыбораДействияИзМенюЕще"",ЭтаФорма), СписокКнопок)"); 
		Выполнить("ПоказатьВыборИзСписка(Новый ОписаниеОповещения(""ОбработчикВыбораДействияИзМенюЕще"",ЭтаФорма), СписокКнопок)");//Привет тебе платформа 8.3.7! 
	Иначе
		ВыбранноеЗначение=ВыбратьИзМеню(СписокКнопок,Элементы.КнопкаЕще);
		ОбработчикВыбораДействияИзМенюЕще(ВыбранноеЗначение);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораДействияИзМенюЕще(ВыбранноеЗначение=неопределено,ДополнительныеПараметры=неопределено)Экспорт
	Если ВыбранноеЗначение<>Неопределено Тогда
		Состояние("Выполняю действие: " + НРег(ВыбранноеЗначение.Представление),50,,Элементы.Настройки.Картинка);
		ИмяОбработчика = ВыбранноеЗначение.Значение;
		Выполнить(ИмяОбработчика+"("""")");
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВыполнитьВыбранныеЗадачи(Команда)
	
	Если Элементы.ТабСообщения.ВыделенныеСтроки.Количество()=0 Тогда
		
		Возврат;
		
	ИначеЕсли Элементы.ТабСообщения.ВыделенныеСтроки[0]=Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Элементы.ТабСообщения.ВыделенныеСтроки.Количество()=1 Тогда
		//одиночное действие для одной строки
		ВыполнитьЗадачу(Объект.ТабСообщения.НайтиПоИдентификатору(Элементы.ТабСообщения.ВыделенныеСтроки[0]),Ложь);
		
	Иначе
		//групповые действия для нескольких строк
		
		ТекстВопроса ="Будет выполнено действий: "+Элементы.ТабСообщения.ВыделенныеСтроки.Количество()+". Продолжить?";
		КнопкиВопроса=новый СписокЗначений;
		КнопкиВопроса.Добавить("Да, выполнить действия");
		КнопкиВопроса.Добавить("Отмена");
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		РезультатВопроса = Неопределено;
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияНагрупповыеДействия"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
		Иначе
			РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
			ОбработчикСогласияНаГрупповыеДействия(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСогласияНаГрупповыеДействия(РезультатВопроса,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	
	Если РезультатВопроса= "Да, выполнить действия" Тогда 
		СчетаФактурыНаПодписание.Очистить();
		
		МассивСТрокДляОбработки = Новый Массив;
		Для Каждого ИдентификаторСтроки Из Элементы.ТабСообщения.ВыделенныеСтроки Цикл
		 	ТекСтрока = Объект.ТабСообщения.НайтиПоИдентификатору(ИдентификаторСтроки);
			МассивСТрокДляОбработки.Добавить(ТекСтрока);
		КонецЦикла;
		
		Для Каждого СтрокаДанныхФормы Из МассивСТрокДляОбработки Цикл 
			ВыполнитьЗадачу(СтрокаДанныхФормы,Истина);
		КонецЦикла;
		
		//если были выбраны строки с действием "Подписать в Диадок", тогда выполним это действие здесь.
		Если СчетаФактурыНаПодписание.Количество()>0 Тогда
			МассивСообщений = Новый Массив;
			Для Каждого Стр Из СчетаФактурыНаПодписание Цикл
				МассивСообщений.Добавить(Стр.Ссылка);
			КонецЦикла;
			
			// идентификаторы ДД получим уже в самой форме подписания //СобратьТаблицуСчетовФактурНаПодписание(МассивСообщений);
			
			ЗапроситьСертификатИПодписатьСФ(МассивСообщений);
			
		КонецЕсли;
		Если ОбновлятьВесьСписокПриРаботеСЗаказами <> Истина Тогда
			ВычеркнутьТекущиеСтроки();
		Иначе
			ЗаполнитьСписокЗадачКлиент();
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии()
	//ПриЗакрытииСервер();
	//немного перепалки: http://devtrainingforum.v8.1c.ru/forum/thread.jsp?id=649040
	//перенесено в форму настроек при их записи
КонецПроцедуры

//{#Область ГрупповоеПодписаниеСчетовФактур

&НаКлиенте
Процедура ЗапроситьСертификатИПодписатьСФ(МассивСообщений)
	
	//работу будем вести через вспомогательную форму - клиентский модуль API нам будут недоступны сертификаты, установленные на сервере 1С предприятия, 
	//пока что в EDI не было кейса когда серт на сервере. но он вполне возможно произойдет, тогда потребуется делать серверный модуль API как сделано, например в сверке
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
	//положим в вх массив сообщений клиентский модуль обмена будет брать их
	ПоместитьВоВХ("МассивСообщений", МассивСообщений);
	МодульОбменКлиент().ПодписатьПереданныеСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить_ПослеВыбораСертификатаПользователем(ВыбранныйЭлемент,Парам2=Неопределено) Экспорт
	//УСТАРЕЛа в связи с отказом от старой модели подписания
	
	////собственно подписание
	//Если ВыбранныйЭлемент=Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//	
	////создадим соединение с Диадоком
	//СоединениеДиадок = РаботаССерверомДиадок.АПИ.CreateConnectionByCertificate(ВыбранныйЭлемент.Значение);
	//
	//МассивСообщений = Новый Массив;
	//Для Каждого Стр Из СчетаФактурыНаПодписание Цикл
	//	МассивСообщений.Добавить(Стр.Ссылка);
	//КонецЦикла;
	//
	////получим boxId и messageId
	//СобратьТаблицуСчетовФактурНаПодписание(МассивСообщений);
	//
	////и подписание
	//КэшСоединений = Новый Соответствие;
	//
	//ПодписаниеУдалось = Ложь;
	//
	//Для Каждого ПодписываемыйДокумент Из СчетаФактурыНаПодписание Цикл
	//	ПриведенныйIDОрганизации = СтрЗаменить(ПодписываемыйДокумент.boxId,"-","");
	//	ТекущаяОрганизация = КэшСоединений.Получить(ПриведенныйIDОрганизации);
	//	Если ТекущаяОрганизация = Неопределено Тогда
	//		Попытка
	//			ТекущаяОрганизация = СоединениеДиадок.GetOrganizationById(ПриведенныйIDОрганизации+"@diadoc.ru");
	//			КэшСоединений.Вставить(ПриведенныйIDОрганизации,ТекущаяОрганизация);
	//		Исключение
	//			Сообщить("Сертификат не имеет доступа к организации либо документ уже подписан: "+ПодписываемыйДокумент.ДокументПредставление);
	//			Продолжить;
	//		КонецПопытки;
	//	КонецЕсли;
	//	
	//	Результат = ТекущаяОрганизация.SendDraftAsync(ПодписываемыйДокумент.messageId);
	//	//ПодписываемыйДокумент.Вставить("Результат",Результат);
	//	Сообщить("Подписан: "+ПодписываемыйДокумент.ДокументПредставление);
	//	//тут можно дождаться результата
	//	ПодписаниеУдалось = Истина;
	//КонецЦикла;
	//
	//ТекстПредупреждения="";
	//Если ПодписаниеУдалось Тогда
	//	ТекстПредупреждения="Выполните обмен с сервером для обновления статусов сообщений";
	//Иначе
	//	ТекстПредупреждения="Не удалось подписать счета-фактуры";
	//КонецЕсли;
	//
	//Если Параметры.МодальностьЗапрещена Тогда 
	//	Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
	//Иначе
	//	Предупреждение(ТекстПредупреждения,,"Контур.EDI");
	//КонецЕсли;
	//	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодписанияСФ(Результат=Неопределено,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт

	ЭтаФорма.Активизировать();	//на некоторых платформах Эта форма "проваливается на задник" в видимости 

КонецПроцедуры // ПослеПодписанияСФ()

// РАБОТА С ДИАДОКОМ

//Вернем двоичные данные файла ДД из базы
&НаСервере
Функция ПолучитьФайлИзБазы(КраткоеИмяДиадок)

	МодульОбъекта().ПолучитьФайлИзБазы(КраткоеИмяДиадок);	

КонецФункции // ПолучитьФайлИзБазы()

&НаСервере
Функция ПолучитьПараметрыИнтернетСоединения_KE_ВызовСервера()
	
	СтруктураПараметровСоединения = МодульОбъекта().ПолучитьСписокСвойствEDI(
	"ИспользуетсяПрокси
	|ЛогинПрокси
	|ПарольПрокси
	|СерверПрокси
	|ПортПрокси
	|ТипПрокси
	|Сервер
	|Порт
	|НеЗагружатьСтатусныеСообщения
	|АдресКаталогаОбменаEDI"
	);
	СтруктураПараметровСоединения.ИспользуетсяПрокси = (СтруктураПараметровСоединения.ИспользуетсяПрокси = Истина);

	СтруктураПараметровСоединения.Вставить("ПассивныйРежим",			Истина);//никто не снимает этот флаг, и правильно.
	
	Если Не ЗначениеЗаполнено(СтруктураПараметровСоединения.Порт) Тогда
		СтруктураПараметровСоединения.Порт = 21;
	КонецЕсли;
	
	Возврат СтруктураПараметровСоединения;
КонецФункции

&НаКлиенте
Функция ПолучитьСоединениеHTTP(Адрес) Экспорт
	СтруктураПараметровПрокси = ПолучитьПараметрыИнтернетСоединения_KE_ВызовСервера();
	
	Прокси = Новый ИнтернетПрокси;
	Если СтруктураПараметровПрокси.ИспользуетсяПрокси Тогда
		Прокси.Пользователь	= СтруктураПараметровПрокси.ЛогинПрокси;
		Прокси.Пароль		= СтруктураПараметровПрокси.ПарольПрокси;
	КонецЕсли;
	
	СоединениеHTTP = Новый HTTPСоединение(Адрес, , , ,Прокси , Истина);//HTTPS
	//СоединениеHTTP = Новый HTTPСоединение("localhost", , , , ,);//отладка
	Возврат СоединениеHTTP;
КонецФункции

&НаКлиенте
Функция ПолучитьФайлHTTP_Клиент(мСоединение,ИмяФайлаНаСервере,ИмяЛокальногоФайла) Экспорт
	Попытка
		мСоединение.Получить(ИмяФайлаНаСервере, ИмяЛокальногоФайла);
		мСоединение=Неопределено;
		Возврат Истина;
	Исключение
		Ф=новый Файл(ИмяЛокальногоФайла);
		Если Ф.Существует() Тогда
			УдалитьФайлы(ИмяЛокальногоФайла);
		КонецЕсли;	
		мСоединение=Неопределено;
		Возврат Ложь;
	КонецПопытки;
КонецФункции	

&НаСервере
Функция СохранитьФайлВБазуВызовСервера(ПутьКФайлуКомпонентыДД,КраткоеИмяДиадок)
	 Возврат МодульОбъекта().СохранитьФайлВБазу(ПутьКФайлуКомпонентыДД,КраткоеИмяДиадок);
КонецФункции

&НаКлиенте
Функция ЗагрузитьКомпонентуДиадок(ПутьКФайлуКомпонентыДД,КраткоеИмяДиадок,Адрес_edi_kontur_ru="edi.kontur.ru")
	
	СохраненныйФайл=ПолучитьФайлИзБазы(КраткоеИмяДиадок);
	Если СохраненныйФайл=Неопределено Тогда
		Состояние("Загружаю компоненту Диадок с сервера",40,,Элементы.ВыполнитьОбмен.Картинка);
		Если Не	ПолучитьФайлHTTP_Клиент(
			ПолучитьСоединениеHTTP(Адрес_edi_kontur_ru),
			"/1c/support/"+КраткоеИмяДиадок+".dll",
			ПутьКФайлуКомпонентыДД)
			Тогда
			ТекстПредупреждения="Не удалось загрузить модуль Диадок с сервера. 
			|Обратитесь в техподдержку";
			Если Параметры.МодальностьЗапрещена Тогда 
				Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
			Иначе
				Предупреждение(ТекстПредупреждения,,"Контур.EDI");
			КонецЕсли;
			
			Возврат "";
		КонецЕсли;	
		
		//Состояние_КонтурEDI("Сохранение (кэширование) модуля Диадок...");
		Если Не СохранитьФайлВБазуВызовСервера(ПутьКФайлуКомпонентыДД,КраткоеИмяДиадок) Тогда
			Сообщить("Не удалось сохранить модуль Диадок в базе, в следующий раз модуль будет повторно загружен с сайта");
		КонецЕсли;	
		
	Иначе	//модуль был сохранен в базе
		СохраненныйФайл.Записать(ПутьКФайлуКомпонентыДД);
		Попытка
			ПодключитьВнешнююКомпоненту(ПутьКФайлуКомпонентыДД,"DiadocAPI",ТипВнешнейКомпоненты.COM);	
			ЗагрузилиКомпоненту = Истина;
		Исключение
			Попытка
				//если компонента уже зарегистрирована в системе, попробуем ее инициализировать по имени класса
				ПодключитьВнешнююКомпоненту("DiadocAPI");    
				ЗагрузилиКомпоненту = Истина;
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки; 
		КонецПопытки;
	КонецЕсли;	
	
	Возврат ПутьКФайлуКомпонентыДД;
	
КонецФункции // ЗагрузитьКомпонентуДиадок()


&НаКлиенте
Процедура Удалить_ИнициализироватьРаботуСДиадоком()
	//
	//ТребуемаяВерсияКомпонентыДиадок = "5_0_0_4";
	//
	//// загружаем компоненту
	//КраткоеИмяДиадок="Diadoc_EDI_"+ТребуемаяВерсияКомпонентыДиадок;
	//ПутьКФайлуКомпонентыДД =  КаталогВременныхФайлов()+КраткоеИмяДиадок+".dll";
	//
	//ЗагрузилиКомпоненту = Ложь;
	//ФайлКомпоненты = Новый Файл(ПутьКФайлуКомпонентыДД);
	//Если Не ФайлКомпоненты.Существует() Тогда
	//	
	//	ПутьКФайлуКомпонентыДД=ЗагрузитьКомпонентуДиадок(ПутьКФайлуКомпонентыДД,КраткоеИмяДиадок);		
	//	
	//КонецЕсли;
	//
	//Если ПутьКФайлуКомпонентыДД="" Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	////теперь файл есть, подключим компоненту
	//Попытка
	//	//ЗагрузитьВнешнююКомпоненту(ПутьКФайлуКомпонентыДД); //ОФ
	//	ЗагрузилиКомпоненту=ПодключитьВнешнююКомпоненту(ПутьКФайлуКомпонентыДД,"DiadocAPI",ТипВнешнейКомпоненты.COM); //УФ
	//	
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Попытка
	//		//если компонента уже зарегистрирована в системе, попробуем ее инициализировать по имени класса
	//		ПодключитьВнешнююКомпоненту("DiadocAPI");    
	//		ЗагрузилиКомпоненту = Истина;
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки; 
	//КонецПопытки;
	//
	//РаботаССерверомДиадок = Новый Структура();
	//РаботаССерверомДиадок.Вставить("Используется",Ложь);
	//РаботаССерверомДиадок.Вставить("АПИ");
	//РаботаССерверомДиадок.Вставить("Соединение");

	////и дадим все нужные настройки/объекты модулю
	//Если ЗагрузилиКомпоненту Тогда
	//	
	//	
	//	РаботаССерверомДиадок.Используется = Истина;
	//	
	//	// создание объекта контекста API
	//	ДиадокАПИ_ = Новый("AddIn.DiadocAPI.DiadocInvoiceAPI");
	//	ДиадокАПИ  = ДиадокАпи_.CreateObject();
	//	
	//	//Задаем параметры подлючения к серверу
	//	ДиадокАПИ.ApiClientId = "1S-Box2_19-b9b4602d-c9fa-4680-ad9a-0bd740eed1c8";
	//	ДиадокАПИ.ServerUrl   = "https://diadoc-api.kontur.ru:443";
	//	
	//	РаботаССерверомДиадок.АПИ = ДиадокАПИ;
	//	
	//КонецЕсли;
	//
КонецПроцедуры

&НаКлиенте
Функция Удалить_УстановитьСоединениеСДиадокомПоЛогину(Логин,Пароль)
	//
	//Если РаботаССерверомДиадок=неопределено или НЕ РаботаССерверомДиадок.Используется Тогда
	//	ИнициализироватьРаботуСДиадоком();
	//КонецЕсли;
	//
	//Если НЕ РаботаССерверомДиадок.Используется Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Попытка
	//	ДиадокСоединение = РаботаССерверомДиадок.АПИ.CreateConnectionByLogin(Логин,Пароль);
	//	РаботаССерверомДиадок.Соединение = ДиадокСоединение;         
	//Исключение
	//	РаботаССерверомДиадок.Используется = Ложь;
	//	Возврат Ложь;
	//КонецПопытки;
	//
	//Возврат Истина;
	//
КонецФункции

&НаКлиенте
Функция Удалить_УстановитьСоединениеСДиадокомПоУмолчанию(ВыводитьПредупреждения = Истина) Экспорт
	//
	//Если РаботаССерверомДиадок=Неопределено Тогда
	//	ИнициализироватьРаботуСДиадоком();
	//КонецЕсли;
	//
	//Если не РаботаССерверомДиадок.Используется Тогда
	//	Возврат ложь;
	//КонецЕсли;
	//
	//СтруктураЛогинПароль = ПолучитьЛогинИПарольДДВызовСервера();	
	//Логин = СтруктураЛогинПароль.Логин;
	//Пароль = СтруктураЛогинПароль.Пароль;
	//
	//Если ЗначениеЗаполнено(Логин) и ЗначениеЗаполнено(Пароль) Тогда
	//	Если УстановитьСоединениеСДиадокомПоЛогину(Логин,Пароль) Тогда
	//		Возврат Истина;
	//	Иначе
	//		Если ВыводитьПредупреждения Тогда
	//			ТекстПредупреждения="Не удалось установить соединение с Диадоком! 
	//			|Проверьте параметры подключения в настройках модуля на вкладке ЭДО (Диадок).";
	//			Если Параметры.МодальностьЗапрещена Тогда 
	//				Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
	//			Иначе
	//				Предупреждение(ТекстПредупреждения,,"Контур.EDI");
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//	КонецЕсли;	
	//Иначе
	//	Если ВыводитьПредупреждения Тогда
	//		ТекстПредупреждения="Не указаны параметры подключения к Диадоку! 
	//		|Введите логин и пароль в меню настроек на вкладке ЭДО (Диадок).";
	//		Если Параметры.МодальностьЗапрещена Тогда 
	//			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
	//		Иначе
	//			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
	//		КонецЕсли;
	//	КонецЕсли;	
	//КонецЕсли;
	//
	//Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьЛогинИПарольДДВызовСервера()

	ПараметрыПользователяEDI = МодульОбъекта().ПолучитьПараметрыТекущегоПользователяEDI();	
	Логин = ПараметрыПользователяEDI.ЛогинСлужебныйДиадок;
	Пароль = ПараметрыПользователяEDI.ПарольСлужебныйДиадок;
    Возврат Новый Структура("Логин, Пароль",Логин,Пароль);
	
КонецФункции // ()

&НаСервере
Процедура СобратьТаблицуСчетовФактурНаПодписание(МассивСообщений)
	
	СчетаФактурыНаПодписание.Загрузить(МодульОбъекта().ПолучитьТаблицуСчетовФактурНаПодписание(МассивСообщений));
	
КонецПроцедуры


//}#КонецОбласти //ГрупповоеПодписаниеСчетовФактур

//{#Область Автотесты
	
&НаСервере
Процедура Автотесты_УстановитьНачальныеНастройкиНаСервере()
	
	МодульОбъекта = МодульОбъекта();
	МодульОбъекта.ПараметрыАвтотестирования = Истина;
	МодульОбъекта.Автотесты_ОчиститьДанныеМодуля();
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
	ВариантОбмена		= СтруктураПараметров.Настройки.ВариантОбменаДанными;
	
	МодульОбъекта().УстановитьКонстантуEDI("ПротоколОбмена_КонтурEDI",	ВариантОбмена.Вид);
	МодульОбъекта().УстановитьКонстантуEDI("Сервер",					ВариантОбмена.Сервер);
	МодульОбъекта().УстановитьКонстантуEDI("Порт",						21);
	МодульОбъекта().УстановитьКонстантуEDI("АдресКаталогаОбменаEDI",	ВариантОбмена.ПутьККаталогу);
	
	Если Не ЗначениеЗаполнено(МодульОбъекта().ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик")) Тогда
		СписокШаблонов = МодульОбъекта().ПолучитьСписокДоступныхШаблоновЦепочки("Поставщик");
		Если СписокШаблонов.Количество()>0 Тогда
			МодульОбъекта().УстановитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик",	СписокШаблонов[0].Представление);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Автотесты_УстановитьНачальныеНастройки()
	
	Автотесты_УстановитьНачальныеНастройкиНаСервере();
	
	Элементы.Поставщик.Пометка = Истина;
	Элементы.Сеть.Пометка = Ложь;
	Параметры.РежимРаботы = "Поставщик";
		
	// настраиваем структуру компании
	ПараметрыФормы = Новый Структура("ПараметрыАвтотестирования",Параметры.ПараметрыАвтотестирования);
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""СтруктураКомпании_ЭлементУправляемая"", ПараметрыФормы)");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("СтруктураКомпании_ЭлементУправляемая",ПараметрыФормы).ОткрытьМодально();
	КонецЕсли;
	
	// настраиваем учетные записи
	ПараметрыФормы = Новый Структура("ПараметрыАвтотестирования",Параметры.ПараметрыАвтотестирования);
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""УчетныеЗаписи_ЭлементУправляемая"", ПараметрыФормы)");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("УчетныеЗаписи_ЭлементУправляемая",ПараметрыФормы).ОткрытьМодально();
	КонецЕсли;
	
	// настраиваем параметры
	ПараметрыФормы = Новый Структура("ПараметрыАвтотестирования",Параметры.ПараметрыАвтотестирования);
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""СервисНастройкиУправляемая"", ПараметрыФормы)");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("СервисНастройкиУправляемая",ПараметрыФормы).ОткрытьМодально();
	КонецЕсли;
	
	// настраиваем партнера
	ПараметрыФормы = Новый Структура("ПараметрыАвтотестирования",Параметры.ПараметрыАвтотестирования);
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Партнеры_ЭлементУправляемая"", ПараметрыФормы,""ЗапуститьАвтотесты"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Партнеры_ЭлементУправляемая",ПараметрыФормы).ОткрытьМодально();
		ПодключитьОбработчикОжидания("ЗапуститьАвтотесты",0.1,Истина);
	КонецЕсли;
	                       
КонецПроцедуры

&НаСервере
Процедура Автотесты_ЗаменитьПеременныеПоШаблону(ТекСообщение)
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
	Переменные = СтруктураПараметров.Настройки.Переменные;
	
	Для Каждого ПолеСообщения Из ТекСообщение Цикл
		Если НЕ ПолеСообщения.Ключ = "Товары" Тогда
			Если Найти(СокрЛП(ПолеСообщения.Значение),"{**")>0 Тогда
				ШаблонПоляСообщения = СокрЛП(ПолеСообщения.Значение);
				Для Каждого ПолеПеременной Из Переменные Цикл
					ШаблонПеременной = ПолеПеременной.Значение.Шаблон;
					Если ШаблонПоляСообщения = ШаблонПеременной Тогда
						ТекСообщение[ПолеСообщения.Ключ] = ПолеПеременной.Значение.Значение;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция Автотесты_ПолучитьНовыйИдентификаторСообщения() 
	
	УИД = Новый УникальныйИдентификатор();
	УИД = СтрЗаменить(УИД,"-","");
	
	Возврат УИД;
	
КонецФункции

&НаСервере
Функция Автотесты_ОтправитьТестовоеСообщение(ИмяСообщения) Экспорт
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
	ВходящиеДанные = СтруктураПараметров.Настройки.ВходящиеДанные;
	
	НайденноеСообщение = Неопределено;
	Для Каждого Стр Из ВходящиеДанные Цикл
		Если Стр.Имя = ИмяСообщения Тогда
			НайденноеСообщение = Стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденноеСообщение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекСообщение = НайденноеСообщение.Значение;
	Автотесты_ЗаменитьПеременныеПоШаблону(ТекСообщение);
	
	Сообщение = МодульОбъекта().ПолучитьСтруктуруСообщения(ТекСообщение.ТипСообщения,"Исходящее");
	Сообщение.ТипСообщения		= ТекСообщение.ТипСообщения;
	Сообщение.Направление		= "Исходящее";
	Сообщение.ID = Автотесты_ПолучитьНовыйИдентификаторСообщения();
	
	Сообщение.ПокупательEDI.GLN = ТекСообщение.Покупатель;
	Сообщение.ПродавецEDI.GLN = ТекСообщение.Поставщик;
	Сообщение.ГрузополучательEDI.GLN = ТекСообщение.Грузополучатель;
	
	Сообщение.ДокументEDI.Номер = ТекСообщение.НомерДокумента;
	Сообщение.ДокументEDI.Дата = ТекСообщение.ДатаДокумента;
	
	Если Сообщение.ТипСообщения = "ORDERS" Тогда
		Сообщение.ОбратныйЗаказEDI.Номер	= ТекСообщение.НомерОбратногоЗаказа;
		Сообщение.ОбратныйЗаказEDI.Дата		= ТекСообщение.ДатаОбратногоЗаказа;
	КонецЕсли;
	
	Сообщение.ЗаказEDI.Номер = ТекСообщение.НомерЗаказа;
	Сообщение.ЗаказEDI.Дата = ТекСообщение.ДатаЗаказа;
	
	Сообщение.НакладнаяEDI.Номер = ТекСообщение.НомерНакладной;
	Сообщение.НакладнаяEDI.Дата = ТекСообщение.ДатаНакладной;
	
	Сообщение.ВалютаEDI = "RUB";
	
	Сообщение.Статус = ТекСообщение.Статус;
	
	Сообщение.ОтправительEDI.GLN = СокрЛП(СтруктураПараметров.Настройки.Партнер.GLN);
	Сообщение.ПолучательEDI.GLN = СокрЛП(СтруктураПараметров.Настройки.СтруктураКомпании.GLN);
	
	Для Каждого СтрокаТоваров Из ТекСообщение.Товары Цикл
		
		НоваяСтрока = Сообщение.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТоваров);
		НоваяСтрока.КодЕдиницыИзмеренияEDI = СтрокаТоваров.КодЕдиницыИзмерения;
		НоваяСтрока.СтавкаНДСEDI = СтрокаТоваров.СтавкаНДС;
		
	КонецЦикла;
	
	РезультатКонвертации = МодульОбъекта().КонвертироватьИсходящееСообщениеПоНовому(Сообщение);
	
	ТекПутьККаталогу = СтруктураПараметров.Настройки.ВариантОбменаДанными.ПутьККаталогу;
	Если ЗначениеЗаполнено(ТекПутьККаталогу) Тогда
		ПереместитьФайл(РезультатКонвертации.ПутьКФайлу,ТекПутьККаталогу+"\inbox\"+ИмяСообщения+"_"+СокрЛП(Сообщение.ДокументEDI.Номер)+".xml")
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура Автотесты_ЭмулироватьПолучениеСтатусногоСообщения(Документ,ТипСообщения,Этап,Статус) Экспорт
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
	
	Сообщение = МодульОбъекта().ПрочитатьСообщение(,Документ,ТипСообщения, "Исходящее", , );
	
 	ТекПутьККаталогу = СтруктураПараметров.Настройки.ВариантОбменаДанными.ПутьККаталогу;
	
	Результат = МодульОбъекта().СформироватьУведомлениеОПрочтенииСообщения(Сообщение,Этап,Статус);

	Если Результат.Успешно = Истина Тогда
		ФайлСтатусного = Новый Файл(Результат.ПутьКФайлу);
		Если ФайлСтатусного.Существует() Тогда
			ПереместитьФайл(Результат.ПутьКФайлу,ТекПутьККаталогу+"\Reports\"+ФайлСтатусного.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Автотесты_ВыполнитьКодНаСервере(ВыполняемыйКод,ПараметрыКода)
	
	Результат = Неопределено;
	
	Выполнить(ВыполняемыйКод);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Автотесты_ПолучитьКодСледующегоШага()
	
	Код = Неопределено;
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
	Для Каждого Стр Из СтруктураПараметров.ВыполняемыйКод Цикл
		
		Если Стр.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.ФормаОбработки = "Форма" Тогда
			Код = Стр.ВыполняемыйКод;
			Прервать;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Код;
	
КонецФункции

&НаКлиенте
Процедура Автотесты_ПометитьПоследнийШагКакВыполненный()
	
	Код = Неопределено;
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
	Для Каждого Стр Из СтруктураПараметров.ВыполняемыйКод Цикл
		
		Если Стр.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.ФормаОбработки = "Форма" Тогда
			Стр.Выполнено = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СтруктураПараметров,Параметры.ПараметрыАвтотестирования);
	
КонецПроцедуры

&НаКлиенте
Функция Автотесты_ПолучитьЗначениеПеременной(ИмяПеременной)
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
	
	Возврат СтруктураПараметров.Настройки.Переменные[ИмяПеременной].Значение;
	
КонецФункции

&НаКлиенте
Процедура Автотесты_УстановитьЗначениеПеременной(Имя,Значение,Шаблон)
	
	СтруктураПеременной = Новый Структура();
	
	СтруктураПеременной.Вставить("Имя", 	Имя);
	СтруктураПеременной.Вставить("Значение",Значение);
	СтруктураПеременной.Вставить("Шаблон",	Шаблон);

	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
	
	СтруктураПараметров.Настройки.Переменные.Вставить(СтруктураПеременной);
	
	ПоместитьВоВременноеХранилище(СтруктураПараметров,Параметры.ПараметрыАвтотестирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьАвтотесты() Экспорт
	
	ОбработчикПослередактированияПартнеров();
	
	ПодключитьОбработчикОжидания("Автотесты_ВыполнитьСледующийШаг",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Автотесты_ВыполнитьСледующийШаг()
	
	Код = Автотесты_ПолучитьКодСледующегоШага();
		
	Если Код = Неопределено Тогда
			
		Сообщить("Больше нет кода для выполнения");
			
		Возврат;
			
	Иначе
			
		Выполнить(Код);
			
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Автотесты_ВыполнитьСледующийШаг",0.1,Истина);

КонецПроцедуры

&НаКлиенте
Процедура Автотесты_ЗавершитьВыполнениеТестирования(Флаг) Экспорт
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
	
	Если Флаг = "fail" Тогда
	//	ПараметрыАвтотестирования.ВыполняемыеДействия.Очистить();
	КонецЕсли;	
		
	СтруктураВыполнения = Новый Структура;
	СтруктураВыполнения.Вставить("РезультатВыполнения",Неопределено);
	СтруктураВыполнения.Вставить("Переменные",Неопределено);
	//СтруктураВыполнения.Вставить("РезультатВыполнения",ПараметрыАвтотестирования.РезультатВыполненияСценария);
	//СтруктураВыполнения.Вставить("Переменные",ПараметрыАвтотестирования.Настройки.Переменные);
	
	ФайлРезультата = Новый ТекстовыйДокумент;
	//ФайлРезультата.УстановитьТекст(ЗначениеВСтрокуВнутр(СтруктураВыполнения));
	ФайлРезультата.Записать(СтруктураПараметров.КаталогСценария+"\out\result.txt");
	
	ПутьКФайлу = СтруктураПараметров.КаталогСценария+"\out\"+Флаг+".txt";

	Текст = Новый ТекстовыйДокумент;
	Текст.Записать(ПутьКФайлу);
	
КонецПроцедуры

//}#КонецОбласти //Автотесты

&НаКлиенте
Процедура ТабСообщенияПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТабСообщенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТабСообщенияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеПоказатьРасхожденияВходящегоЗаказаИЗаказаВ1С(Команда)
	
	ТекСтрока = Элементы.ТабСообщения.ТекущиеДанные;
	
	Если ТекСтрока<>Неопределено И ЗначениеЗаполнено(ТекСтрока.Документ) Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВидРасхождения", 		"РасхожденияЗаказа");
		ПараметрыФормы.Вставить("Заказ",				ТекСтрока.Документ);
		ПараметрыФормы.Вставить("Параметры",			Неопределено);
		
		ПолучитьФормуОбработки("Сервис_ПросмотрРасхожденийУправляемая",ПараметрыФормы).Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеПоказатьРасхожденияПриемки(Команда)
	
	ТекСтрока = Элементы.ТабСообщения.ТекущиеДанные;
	
	Если ТекСтрока<>Неопределено И ЗначениеЗаполнено(ТекСтрока.Документ) Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВидРасхождения", 	"РасхожденияПриемки");
		ПараметрыФормы.Вставить("Накладная",			ТекСтрока.Документ);
		ПараметрыФормы.Вставить("Параметры",			Неопределено);
		
		ПолучитьФормуОбработки("Сервис_ПросмотрРасхожденийУправляемая",ПараметрыФормы).Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновыйАвтообмен(Команда)
	
	РежимБлокирования=	РежимОткрытияОкнаФормы.Независимый;
	РежимОкна =  ВариантОткрытияОкна.ОтдельноеОкно;
	
	//только 8.3 балин!
	//ПараметрыОбработчика = Неопределено;
	//Выполнить("ОписаниеОбработчика=	Новый ОписаниеОповещения(ОбработчикОстановкиАвтообмена, ЭтаФорма, ПараметрыОбработчика)");

	ОткрытьФорму(ПутьКФормам + "ФоновыйОбменУправляемая", , ЭтаФорма, "Автообмен КонтурEDI" ,РежимОкна);
	
	Элементы.ВыполнитьОбмен.Доступность=Ложь;
	Элементы.ВыполнитьОбмен.Заголовок="Запущен автообмен";
	
	ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",600); //10 интервал обновления списка - пользователь уже успел налить чай, попить его и бросил взгляд на монитор
	
КонецПроцедуры

Процедура ОбработчикОстановкиАвтообмена(Параметр=Неопределено) Экспорт
	Элементы.ВыполнитьОбмен.Доступность=Истина;
	Элементы.ВыполнитьОбмен.Заголовок="Обмен с сервером";
	ОтключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент");
КонецПроцедуры

&НаКлиенте
Процедура ТипыСообщенийСброситьФлажки(Команда)
	УстановитьИлиСброситьФлажкиТиповСообщений(Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура ТипыСообщенийУстановитьФлажки(Команда)
	УстановитьИлиСброситьФлажкиТиповСообщений(Истина);	
	ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФильтровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФильтровПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФильтровВыбор(Элемент, ЗНАЧ ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбраннаяСтрока = Элементы.ДеревоФильтров.ТекущиеДанные;
	
	Если НЕ ВыбраннаяСтрока = Неопределено Тогда
		Если ВыбраннаяСтрока.ГруппаНастроек ="Организации" Тогда 
			Если НЕ ПроверитьДоступностьОрганизацийВызовСервера() Тогда //- выпилить с релиза  4.03.008
				ПредложитьОбновитьОбъектыМетаданныхКонтурEDI(,"Для возможности настраивать доступ необходимо обновить объекты Контур.EDI. Сохранить файл обновления?");
				Отказ=Истина;
			КонецЕсли;
		КонецЕсли;
		ГруппаНастроек = ВыбраннаяСтрока.ГруппаНастроек;
		
		
		Если ГруппаНастроек = "Партнеры" И Элемент.ТекущийЭлемент.Имя = "ДеревоФильтровИзменить" Тогда
			
			Если ВыбраннаяСтрока.ПолучитьРодителя() = Неопределено Тогда //в корень
				Если Параметры.РольПользователяEDI<>"ПолныеПрава" Тогда
					Возврат;//пользователю с ограниченными правами не разрешено добавлять партнеров
				Иначе	
					ДобавитьПартнера(ЭтаФорма.Команды.Найти("ДобавитьПартнера"));
				КонецЕсли;
			Иначе
				ВвестиНового=Ложь;
				Состояние("Открываю карточку партнера",50,,Элементы.Настройки.Картинка);
				ОткрытьФормуРедактированияПартнера(ВвестиНового);	
			КонецЕсли;
			
			ЗаполнитьНастройкиОтборов();
			РазвернутьДеревоФильтровКлиент();
			ЗаполнитьСохраненнымиНастройками();      //рефакторинг фильтры
			
		ИначеЕсли ГруппаНастроек = "ТипыСообщений" 
			И ВыбраннаяСтрока <> Неопределено  
			И Элемент.ТекущийЭлемент.Имя = "ДеревоФильтровИзменить" 
			И (ВыбраннаяСтрока.Значение = "PRICELIST"
			ИЛИ ВыбраннаяСтрока.Значение = "SLSRPT"
			ИЛИ ВыбраннаяСтрока.Значение = "INVRPT") Тогда
			
			//Нажатие на добавление нового сообщения
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ТипСообщения", ВыбраннаяСтрока.Значение);
			ДопПараметры.Вставить("Направление", "Исходящее");
			
            ОткрытьФормуНезависимогоСообщения(ДопПараметры);
		Иначе
			
			СброситьПометкиВыбранногоФильтра();
			
			ГруппаНастроек = ВыбраннаяСтрока.ПолучитьРодителя();
			
			Если НЕ ГруппаНастроек = Неопределено Тогда
				Если ВыбраннаяСтрока = ГруппаНастроек Тогда
					СнятьУстановитьФлажкиВеткиДерева(ВыбраннаяСтрока,Истина);//ткнули в чъего-то родителя
				Иначе
					ОставитьТолькоВыбраннуюСтроку(ГруппаНастроек,ВыбраннаяСтрока); //просто хотим только текущую строку оставить
				КонецЕсли;
			КонецЕсли;
			
			ПроверитьРодительскиеФлажкиДереваФильтров(ВыбраннаяСтрока);
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",0.1,Истина);
		
	КонецЕсли;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		Если Поле.Имя = "ДеревоФильтровЗначение" Тогда
			Для Каждого Стр Из ОтборТребуемыеДействия.ПолучитьЭлементы() Цикл
				Стр.Пометка = (Стр.Значение=ТекДанные.Значение);
				
				Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
					Стр2.Пометка = ((Стр2.Значение=ТекДанные.Значение) или Стр.Пометка);     //сбросим пометку везде за исключенем когда нам тыкнули в группу
				КонецЦикла;
			КонецЦикла;
			
			ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",0.1,Истина);
		КонецЕсли;
	КонецЕсли;
	СтандартнаяОбработка=Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНезависимогоСообщения(ПараметрыФормы = Неопределено)
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""ФормаНезависимогоСообщенияУправляемая"", ПараметрыФормы,""ОбработчикПослеОтправкиНезависимогоСообщения"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("ФормаНезависимогоСообщенияУправляемая", ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослеОтправкиНезависимогоСообщения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослеОтправкиНезависимогоСообщения(Параметр1 = Неопределено, ДопПараметр = Неопределено) Экспорт
	
	//обновить список, ведь там появилась новая строчка.
	Состояние("Обновляю форму...",35,,Элементы.Настройки.Картинка);
	ОбновитьСписок();
	
	//еще что-то? вроде нет.
	
КонецПроцедуры

&НаКлиенте
Процедура ОставитьТолькоВыбраннуюСтроку(ВеткаДерева,ВыбраннаяСтрока)
	
	Для Каждого Стр Из ВеткаДерева.ПолучитьЭлементы() Цикл
		Если Стр = ВыбраннаяСтрока Тогда
			Стр.Пометка = Истина;
			СнятьУстановитьФлажкиВеткиДерева(Стр,Истина);
			ТекРодитель = Стр.ПолучитьРодителя();
			Пока НЕ ТекРодитель = Неопределено Цикл
				ТекРодитель.Пометка = Истина;
				ТекРодитель = ТекРодитель.ПолучитьРодителя();
			КонецЦикла;
		Иначе
			Стр.Пометка = Ложь;
			ОставитьТолькоВыбраннуюСтроку(Стр,ВыбраннаяСтрока);
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

//Область Введние фильтра по организациям
&НаКлиенте
Процедура ПредложитьОбновитьОбъектыМетаданныхКонтурEDI(ИмяМакетаОбновления = Неопределено,ТекстВопроса = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		КнопкиВопроса=новый СписокЗначений;
		КнопкиВопроса.Добавить("Да");
		КнопкиВопроса.Добавить("Нет");
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		РезультатВопроса = Неопределено;
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияСохраненияФайла"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
		Иначе
			РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
			ОбработчикСогласияСохраненияФайла(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
		
	Иначе
		ОбработчикСогласияСохраненияФайла("Да","Не задан вопрос");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетВызовСервера(ИмяМакетаОбновления)

Возврат МодульОбъекта().ПолучитьМакет(ИмяМакетаОбновления);	

КонецФункции // ПолучитьМакет(ИмяМакетаОбновления)()

&НаКлиенте
Процедура ОбработчикСогласияСохраненияФайла(РезультатВопроса,ДопПараметр)Экспорт

	Если РезультатВопроса<>"Да" Тогда 
		Возврат;
	КонецЕсли;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.Заголовок		= "Укажите файл, в который нужно сохранить обновление для вашей конфигурации";
	ДиалогВыбора.Фильтр			= "Файл конфигурации 1С (*.cf)|*.cf";      
	ДиалогВыбора.ПолноеИмяФайла = "КонтурEDI_upd.cf";
	
	Если ДиалогВыбора.Выбрать() Тогда      
		
		ПутьКФайлу = ДиалогВыбора.ПолноеИмяФайла;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ИмяМакетаОбновления = "ОбновлениеДляХраненияДанных";
	
	Макет=ПолучитьМакетВызовСервера(ИмяМакетаОбновления);
	Макет.Записать(ПутьКФайлу);
	
	//еще высветим на экране текстовый документ с описанием того, что надо делать
	Чтиво=Новый ТекстовыйДокумент;
	Чтиво.УстановитьТекст(
	"ВНИМАНИЕ! 
	|При добавлении оптимизированных объектов хранения данных в окне ""Сравнение, объединение"" НЕОБХОДИМО снять флажок с раздела ""Свойства""!"
	);
	Чтиво.Показать();
	
	Предупреждение("Запустите модуль после обновления конфигурации базы из файла");

КонецПроцедуры // ОбработчикСогласияСохраненияФайла()

&НаСервере
Функция ПроверитьДоступностьОрганизацийВызовСервера()

	Возврат МодульОбъекта().ЕстьМетаданныеХраненияОрганизации;

КонецФункции // ПроверитьДоступностьНастроекВызовСервера()

//Конец Область Введние фильтра по организациям

&НаКлиенте
Процедура ДеревоФильтровПометкаПриИзменении(Элемент)
	ВыбраннаяСтрока = Элементы.ДеревоФильтров.ТекущиеДанные;
	Если ВыбраннаяСтрока<>Неопределено и ВыбраннаяСтрока.ГруппаНастроек ="Организации" Тогда 
		Если НЕ ПроверитьДоступностьОрганизацийВызовСервера() Тогда //- выпилить с релиза  4.03.008
			ПредложитьОбновитьОбъектыМетаданныхКонтурEDI(,"Для возможности настраивать доступ необходимо обновить объекты Контур.EDI. Сохранить файл обновления?");
			Отказ=Истина;
		КонецЕсли;
	КонецЕсли;
	
	СброситьПометкиВыбранногоФильтра();
	
	ТекСтрока = Элементы.ДеревоФильтров.ТекущиеДанные;
	//ТекСтрока.Пометка = НЕ ТекСтрока.Пометка;
	
	СнятьУстановитьФлажкиВеткиДерева(ТекСтрока,ТекСтрока.Пометка);
	
	ПроверитьРодительскиеФлажкиДереваФильтров(ТекСтрока);

	////вернем табличное поле обратно в режим одиночного выбора
	//ИзменитьРежимГрупповойОбработки();     //рефакторинг фильтры
	ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьУстановитьФлажкиВеткиДерева(ВеткаДерева,Пометка)
	
	Для Каждого Стр Из ВеткаДерева.ПолучитьЭлементы() Цикл
		Стр.Пометка = Пометка;
		СнятьУстановитьФлажкиВеткиДерева(Стр,Пометка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРодительскиеФлажкиДереваФильтров(ТекЭлемент=неопределено)
	Если ТекЭлемент=Неопределено Тогда //проверить всё дерево
		
		Для Каждого Стр1 ИЗ ДеревоФильтров.ПолучитьЭлементы() Цикл
			Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
				Если Стр2.ПолучитьЭлементы().Количество()>0 Тогда
					//Стр2.Пометка = (Стр2.ПолучитьЭлементы().Найти(Ложь,"Пометка") = Неопределено);
					Стр2.Пометка = (НайтиВДереве(Стр2,Ложь,"Пометка") = Неопределено);
				КонецЕсли;
			КонецЦикла;
			Если Стр1.ПолучитьЭлементы().Количество()>0 Тогда
				//Стр1.Пометка = (Стр1.ПолучитьЭлементы().Найти(Ложь,"Пометка") = Неопределено);
				Стр1.Пометка = (НайтиВДереве(Стр1,Ложь,"Пометка") = Неопределено);
			КонецЕсли;
		КонецЦикла;
		
	Иначе //проверить только от текущей строки вверх
		РодительскийЭлемент1=ТекЭлемент.ПолучитьРодителя(); 		
		Если РодительскийЭлемент1<>Неопределено Тогда 
			РодительскийЭлемент1.Пометка= НЕ УДочернихЭлементовЕстьСброшенныеПометки(РодительскийЭлемент1);
			РодительскийЭлемент2=РодительскийЭлемент1.ПолучитьРодителя(); 		
			Если РодительскийЭлемент2<>Неопределено Тогда 
				РодительскийЭлемент2.Пометка= НЕ УДочернихЭлементовЕстьСброшенныеПометки(РодительскийЭлемент2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НайтиВДереве(ДеревоИлиЕгоЭлемент,ЧтоИщем,ВКакойКолонке)
	НайденныйЭлемент = Неопределено;
	
	Для	Каждого ЭлементДерева Из ДеревоИлиЕгоЭлемент.ПолучитьЭлементы() Цикл
		ЗначениеВКолонке = Неопределено;
		НашлиПоСвойству = ЭлементДерева.Свойство(ВКакойКолонке,ЗначениеВКолонке);
		Если НашлиПоСвойству и ЗначениеВКолонке=ЧтоИщем Тогда 
			НайденныйЭлемент = ЭлементДерева;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
КонецФункции

&НаКлиенте
Функция УДочернихЭлементовЕстьСброшенныеПометки(ЭлементРодитель)
	ЕстьСброшенные=Ложь;
	
	Для Каждого ДочернийЭлемент Из ЭлементРодитель.ПолучитьЭлементы() Цикл
		Если ДочернийЭлемент.Пометка=Ложь Тогда 
			ЕстьСброшенные=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьСброшенные;
КонецФункции 

&НаКлиенте
Процедура ОбработчикВыбораНастройкиОтбора(ВыбранноеЗначение=Неопределено,ДопПараметр=Неопределено) Экспорт

	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		Если ВыбранноеЗначение.Значение = "Новый отбор" Тогда
			
			НазваниеОбора="";
			ДопПараметрДляПередачиВОбработчик="";
			ТекстПросьбы="Введите название нового отбора";
			Если Параметры.МодальностьЗапрещена Тогда 
				Выполнить("ПоказатьВводСтроки(Новый ОписаниеОповещения(""ОбработчикВыбораНазванияНовогоШаблона"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), НазваниеОбора, ТекстПросьбы, , ложь)"); 
			Иначе
				Если ВвестиСтроку(НазваниеОбора,ТекстПросьбы) Тогда
					ОбработчикВыбораНазванияНовогоШаблона(НазваниеОбора);	
				КонецЕсли;
			КонецЕсли;

		Иначе
			ТекНастройка = ВыбранноеЗначение.Значение;
			Если ЗначениеЗаполнено(ТекНастройка) Тогда
				СохранитьНастройкуОтбораВызовСервера(ТекНастройка);//,ПолучитьПартнеровОтбора(Ложь,Истина),ПолучитьТипыСообщенийОтбора(Ложь,Истина),ПолучитьТребуемыеДействияОтбора(Ложь,Истина),ПоказыватьЗавершенные,РежимРаботы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры // ОбработчикВыбораНастройкиОтбора()

&НаКлиенте
Процедура ОбработчикВыбораНазванияНовогоШаблона(НазваниеОтбора=Неопределено,ДопПараметр=Неопределено) Экспорт 
	
	Если НЕ НазваниеОтбора=Неопределено Тогда 
		СохранитьНастройкуОтбораВызовСервера(НазваниеОтбора);//,ПолучитьПартнеровОтбора(Ложь,Истина),ПолучитьТипыСообщенийОтбора(Ложь,Истина),ПолучитьТребуемыеДействияОтбора(Ложь,Истина),ПоказыватьЗавершенные,РежимРаботы);
		ЗаполнитьСохраненнымиНастройками();
		СброситьПометкиВыбранногоФильтра();
		Для Каждого Элемент Из СохраненныеФильтры Цикл
			Если Элемент.Настройка=НазваниеОтбора Тогда
			    Элемент.Пометка=Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработчикВыбораНазванияНовогоШаблона()

&НаСервере
Процедура СохранитьНастройкуОтбораВызовСервера(ТекНастройка)

	МодульОбъекта().СохранитьНастройкуОтбора(ТекНастройка,ПолучитьПартнеровОтбора(Ложь,Истина),ПолучитьТипыСообщенийОтбора(Ложь,Истина),ПолучитьТребуемыеДействияОтбора(Ложь,Истина),ПолучитьОрганизацииОтбора(Ложь,Истина),ПоказыватьЗавершенные,Параметры.РежимРаботы)	

КонецПроцедуры // СохранитьНастройкуОтбораВызовСервера()

&НаСервере
Процедура ЗаполнитьСохраненнымиНастройками()
	
	СохраненныеФильтры.Очистить();
	
	СписокНастроекОтбора = ПолучитьСписокНастроекОтбораВызовСервера();
	
	Для Каждого Стр Из СписокНастроекОтбора Цикл
		НоваяСтрока = СохраненныеФильтры.Добавить();
		НоваяСтрока.Настройка = Стр.Значение;
	КонецЦикла;
		
	НоваяСтрока = СохраненныеФильтры.Добавить();
	НоваяСтрока.Настройка = "Все документы";
	//установим высоту
	
	Элементы.СохраненныеФильтры.Высота=СохраненныеФильтры.Количество();
	Элементы.ГруппаСохраненныеОтборы.Высота = Элементы.СохраненныеФильтры.Высота+1;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокНастроекОтбораВызовСервера()

Возврат МодульОбъекта().ПолучитьСписокНастроекОтбора();	

КонецФункции // ПолучитьСписокНастроекОтбораВызовСервера()

&НаКлиенте
Процедура СохранитьНастройкуОтборов(Команда)
	
	СписокНастроекОтбора = ПолучитьСписокНастроекОтбораВызовСервера();
	
	СписокВыбораНастроек = Новый СписокЗначений();
	Для Каждого Стр Из СписокНастроекОтбора Цикл
		СписокВыбораНастроек.Добавить(Стр.Значение,,,БиблиотекаКартинок.ЗагрузитьНастройкиОтчета);
	КонецЦикла;
	
	СписокВыбораНастроек.Добавить("Новый отбор",,,БиблиотекаКартинок.НовоеОкно);
	
	Если СписокВыбораНастроек.Количество()=1 Тогда
		ВыбранноеЗначение = СписокВыбораНастроек[0];
		ОбработчикВыбораНастройкиОтбора(ВыбранноеЗначение);
	Иначе
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВыборИзСписка(Новый ОписаниеОповещения(""ОбработчикВыбораНастройкиОтбора"", ЭтаФорма), СписокВыбораНастроек,Элементы.СохранитьНастройку,)");
		Иначе
			ВыбранноеЗначение = СписокВыбораНастроек.ВыбратьЭлемент("Укажите, куда сохранить настройку");
			ОбработчикВыбораНастройкиОтбора(ВыбранноеЗначение); 
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФильтровУстановитьВсеФлажки(Команда)
	УстановитьИлиСброситьФлажкиДереваОтборов(Истина);	
	ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИлиСброситьФлажкиДереваОтборов(Установить) //ой жееесть, закидают жеж сейчас
	Для Каждого Стр Из ДеревоФильтров.ПолучитьЭлементы() Цикл
		Стр.Пометка = Установить;
		Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
			Стр2.Пометка = Установить;
			Для Каждого Стр3 Из Стр2.ПолучитьЭлементы() Цикл
				Стр3.Пометка = Установить;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗавершенныеПриИзменении(Элемент)
	
	ЗаполнитьНастройкиОтборов(Ложь,Ложь,);
	//РазвернутьДеревоФильтровКлиент();
	ПодключитьОбработчикОжидания("РазвернутьДеревоФильтровКлиент",0.01,Истина);
	ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",0.01,Истина);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьНастройкуОтборов(Команда)
	
	ТекСтрока = Элементы.СохраненныеФильтры.ТекущиеДанные;
	
	Если НЕ ТекСтрока=Неопределено Тогда
		ТекНастройка = ТекСтрока.Настройка;
		Если НЕ МожноИзменятьНастройкуОтбора(ТекНастройка,"Удалить") Тогда
			ТекстПредупреждения="Нельзя изменять предопределенную настройку.";
			Если Параметры.МодальностьЗапрещена Тогда 
				Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
			Иначе
				Предупреждение(ТекстПредупреждения,,"Контур.EDI");
			КонецЕсли;
		Иначе
			УдалитьНастройкуОтбораВызовСервера(ТекНастройка);
			ЗаполнитьСохраненнымиНастройками();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьНастройкуОтбораВызовСервера(ТекНастройка)

	МодульОбъекта().УдалитьНастройкуОтбора(ТекНастройка);	

КонецПроцедуры // УдалитьНастройкуОтбораВызовСервера()


&НаКлиенте
Функция МожноИзменятьНастройкуОтбора(ИмяНастройки,Действие) Экспорт
	
	Если ИмяНастройки = "Все документы" Тогда
		Возврат Ложь;
	//ИначеЕсли ИмяНастройки = "Мои задачи" И Действие = "Удалить" Тогда
	//	Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СохраненныеФильтрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Состояние("Заполняю настройки...",65,,Элементы.Настройки.Картинка);
	
	СброситьПометкиВыбранногоФильтра();
	Элемент.ТекущиеДанные.Пометка=Истина;
	
	УстановитьСохраненныеНастройки();
	
	ПодключитьОбработчикОжидания("ЗаполнитьСписокЗадачКлиент",0.01,Истина);

	РазвернутьДеревоФильтровКлиент();
	
	ТекущаяНастройкаФильтраСохранение=Элемент.ТекущиеДанные.Настройка;
КонецПроцедуры

&НаКлиенте
Процедура СброситьПометкиВыбранногоФильтра()
	
	Для каждого СтрокаВарианта Из СохраненныеФильтры Цикл
		
		СтрокаВарианта.Пометка=Ложь;
		
	КонецЦикла;	
	
КонецПроцедуры // СброситьПометкиВыбранногоФильтра()


&НаСервере
Функция ПолучитьНастройкуОтбораВызовСервера(Настройка)

	Возврат МодульОбъекта().ПолучитьНастройкуОтбора(Настройка);	

КонецФункции // ПолучитьНастройкуОтбораВызовСервера()

&НаКлиенте
Функция ПолучитьТекНастройкуФильтровКлиент()
	
	НайденнаяНастройка=неопределено;
	
	Для Каждого СтрокаНастройки ИЗ СохраненныеФильтры Цикл
		Если СтрокаНАстройки.Пометка=Истина Тогда 
			НайденнаяНастройка=СтрокаНастройки;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденнаяНастройка;
КонецФункции // ПолучитьТекНастройкуФильтровКлиент()

&НаКлиенте
Процедура УстановитьСохраненныеНастройки()
	
	ТекНастройка = ПолучитьТекНастройкуФильтровКлиент();
	
	Если Не ТекНастройка = Неопределено Тогда
		
		ТекущаяНастройкаФильтраСохранение=ТекНастройка.Настройка;
		
		Если ТекНастройка.Настройка = "Все документы" Тогда
			ПоказыватьЗавершенные = Ложь;
			ЗаполнитьНастройкиОтборов();
		Иначе
			
			СохраненнаяНастройка = ПолучитьНастройкуОтбораВызовСервера(ТекНастройка.Настройка);
			
			Если НЕ ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
				ПоказыватьЗавершенные = Ложь;
				ЗаполнитьНастройкиОтборов();
			Иначе
				
				ПоказыватьЗавершенные = СохраненнаяНастройка.ПоказыватьЗавершенные;
				ЗаполнитьНастройкиОтборов();
				
				МассивОтмеченныхПартнеров		= СохраненнаяНастройка.МассивОтмеченныхПартнеров;
				МассивОтмеченныхТиповСообщений	= СохраненнаяНастройка.МассивОтмеченныхТиповСообщений;
				МассивОтмеченныхДействий		= СохраненнаяНастройка.МассивОтмеченныхДействий;
				
				Если МассивОтмеченныхПартнеров.Количество()>0 Тогда
					СтрокаГруппы = ПолучитьРодителяГруппыНастроекИзДанныхФормыКлиент("Партнеры");
					Для Каждого Стр Из СтрокаГруппы.ПолучитьЭлементы() Цикл
						Если МассивОтмеченныхПартнеров.Найти(Стр.Значение) = Неопределено Тогда
							Стр.Пометка = Ложь;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
				
				Если МассивОтмеченныхТиповСообщений.Количество()>0 Тогда
					СтрокаГруппы = ПолучитьРодителяГруппыНастроекИзДанныхФормыКлиент("ТипыСообщений");
					Для Каждого Стр Из СтрокаГруппы.ПолучитьЭлементы() Цикл
						Если МассивОтмеченныхТиповСообщений.Найти(Стр.Значение) = Неопределено Тогда
							Стр.Пометка = Ложь;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
				
				Если МассивОтмеченныхДействий.Количество()>0 Тогда
					СтрокаГруппы = ПолучитьРодителяГруппыНастроекИзДанныхФормыКлиент("ТребуемыеДействия");
					Для Каждого Стр1 Из СтрокаГруппы.ПолучитьЭлементы() Цикл
						Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
							Если МассивОтмеченныхДействий.Найти(Стр2.Значение) = Неопределено Тогда
								Стр2.Пометка = Ложь;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьРодительскиеФлажкиДереваФильтров();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНастройкуОтборов(Команда)
	СохраненныеФильтрыВыбор("", "", "", ложь);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПодробностиФильтра(Команда)
	
	СвернутостьДереваФильтровСохранение = НЕ СвернутостьДереваФильтровСохранение;
	УстановитьСвернутостьПодробностейФильтра();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвернутостьПодробностейФильтра()

	Элементы.Растяжитель.Видимость = СвернутостьДереваФильтровСохранение;
	Элементы.СохранитьНастройку.Видимость = Не СвернутостьДереваФильтровСохранение;
	Элементы.ДеревоФильтров.Видимость = Не СвернутостьДереваФильтровСохранение;
	
	Элементы.СвернутьНастройки.Заголовок = ?(не СвернутостьДереваФильтровСохранение,"скрыть","показать");
	Элементы.СвернутьНастройки.Ширина = ?(не СвернутостьДереваФильтровСохранение,7,9);

КонецПроцедуры // УстановитьСвернутостьПодробностейФильтра()

&НаКлиенте
Процедура КнопкаЕщеВыделитьВсе(Команда)
	Элементы.ТабСообщения.ВыделенныеСтроки.Очистить();
	Для каждого стр из Объект.ТабСообщения Цикл
        Элементы.ТабСообщения.ВыделенныеСтроки.Добавить(стр.ПолучитьИдентификатор());
    КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИдентификаторыДД_Сервер(Документ,boxId,messageId,invoiceId,torg12Id,UniversalTransferDocumentId)
	
	МодульОбъекта().ЗаполнитьИдентификаторыДД_Сервер(Документ,boxId,messageId,invoiceId,torg12Id,UniversalTransferDocumentId);
	
КонецПроцедуры // ЗаполнитьИдентификаторыДД()


&НаКлиенте
Процедура КнопкаЕщеОткрытьЭлДокументыВДиадоке(Команда)
	
	ТекСтрока = Элементы.ТабСообщения.ТекущиеДанные;
	boxId = "";
	messageId = "";
	invoiceId = "";
	torg12Id = "";
	UniversalTransferDocumentId = "";
	
	ЗаполнитьИдентификаторыДД_Сервер(ТекСтрока.Документ,boxId,messageId,invoiceId,torg12Id,UniversalTransferDocumentId);
	
	Если ПустаяСтрока(boxId) 
		ИЛИ ПустаяСтрока(messageId) 
		ИЛИ (ПустаяСтрока(invoiceId)
			И ПустаяСтрока(torg12Id)
			И ПустаяСтрока(UniversalTransferDocumentId)) Тогда
		ТекстПредупреждения="Не удалось найти ссылки на созданные документы в Диадок.
		|Попробуйте зайти в Диадок через ваш веб браузер.";
		
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		
	Иначе
		
		НачалоСсылки = "https://diadoc.kontur.ru/"+boxId+"/Document/Show?letterId="+messageId;
		
		Если ПолучитьКодДействияПоПредставлению(ТекСтрока.ТребуемоеДействие) = "ПодписатьВДиадок" Тогда 
			СсылкаНаЧерновик = "https://diadoc.kontur.ru/ShowDraft?boxId=" + boxId + "&draftId=" + messageId;
			ЗапуститьПриложение(СсылкаНаЧерновик);
            Возврат;
		КонецЕсли;

		СписокСсылок = Новый СписокЗначений;
		
		Если НЕ ПустаяСтрока(torg12Id) Тогда
			СсылкаНаТорг12		= НачалоСсылки + "&documentId="+torg12Id;
			СписокСсылок.Добавить(СсылкаНаТорг12,"Торг-12");
		КонецЕсли;
		
		Если Не ПустаяСтрока(invoiceId) Тогда
			СсылкаНаСчетФактуру = НачалоСсылки + "&documentId="+invoiceId;
			СписокСсылок.Добавить(СсылкаНаСчетФактуру,"Счет-фактура");
		КонецЕсли;
		
		Если Не ПустаяСтрока(UniversalTransferDocumentId) Тогда
			СсылкаНаСчетФактуру = НачалоСсылки + "&documentId="+UniversalTransferDocumentId;
			СписокСсылок.Добавить(СсылкаНаСчетФактуру,"УПД (или УКД)");
		КонецЕсли;
		
		Если СписокСсылок.Количество() = 0 
			ИЛИ СписокСсылок.Количество() = 1 Тогда
			ОбработчикВыбораДокументаДД(СписокСсылок[0],Неопределено);
		Иначе
			ТекстОбращенияПриВыборе="Выберите документ для его просмотра в Диадоке";
			ДопПараметрДляПередачиВОбработчик=Неопределено;
			Если Параметры.МодальностьЗапрещена Тогда
				Выполнить("СписокСсылок.ПоказатьВыборЭлемента(Новый ОписаниеОповещения(""ОбработчикВыбораДокументаДД"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик),ТекстОбращенияПриВыборе)");	
			Иначе
				ВыбранноеЗначение = СписокСсылок.ВыбратьЭлемент(ТекстОбращенияПриВыборе);
				ОбработчикВыбораДокументаДД(ВыбранноеЗначение,ДопПараметрДляПередачиВОбработчик);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораДокументаДД(ВыбранноеЗначение=Неопределено,ДопПараметр=Неопределено)Экспорт
	
	СсылкаНаДокумент = "";

	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		СсылкаНаДокумент = ВыбранноеЗначение.Значение;
	КонецЕсли;
	
	Если НЕ СсылкаНаДокумент = "" Тогда
		
		ЗапуститьПриложение(СсылкаНаДокумент);
		
	КонецЕсли;
	
КонецПроцедуры // ()

//ПолныйДубль ОФ-УФ
//Поведение различается в МодульОбменКлиент() - управление передастся в Обычную или управляемую форму
//код отличается в Предупреждение(ТекстПредупреждения,,"Контур.EDI")
&НаКлиенте
Процедура КнопкаЕщеПроверитьНаличиеОтказовЗапросовНаУточнение(Команда)
	
	МассивДляУточнения = ПолучитьДокументыСУточнениямиСервер(); //сервер
	МассивУточненных = новый Массив; //сложим сюда те, по которым уточнили
	ДокументыПоКоторымНеУдалосьОбновитьСтатус=новый Массив;
	
	ПодлежитУточнению=МассивДляУточнения.Количество();
	Если ПодлежитУточнению>0 Тогда
		сч=0;
		МодульОбменКлиент().СброситьПроверкиДанныхАвторизации();
		
		Для Каждого ДокументСУточнением Из МассивДляУточнения Цикл
			сч=сч+1;
			ТекПроцент = Цел((сч * 100 / ПодлежитУточнению)); 

			Состояние("Получение статусов из Диадока: "+сч+" из "+ПодлежитУточнению, ТекПроцент);
			Отправитель1С=ДокументСУточнением.Отправитель1С;
			//отказ от компоненты
			//если к оргнизации привязан сертификат в настройках, то мы можем просто сходить в ДД за статусом
			
			СтатусыЮЗДО = МодульОбменКлиент().УзнатьСостояниепоСФ(Отправитель1С,ДокументСУточнением.boxId,ДокументСУточнением.messageId);
			
			Если СтатусыЮЗДО.Успешно=Истина Тогда
				
				//Интерпретируем статусы ДД в статус сообщения INVOIC (элемента справочника)         АктуальноеСостояниеСообщенияINVOIC - имеется в виду по тек. данным Диадока
				АктуальноеСостояниеСообщенияINVOIC=МодульОбменКлиент().ПолучитьСостояниеСообщенияINVOICПоСостояниюЮЗДО(СтатусыЮЗДО);  
				
				Если (ЗначениеЗаполнено(АктуальноеСостояниеСообщенияINVOIC.ТребуемоеДействие)
						И ДокументСУточнением.ТребуемоеДействие<>АктуальноеСостояниеСообщенияINVOIC.ТребуемоеДействие)
					ИЛИ (ЗначениеЗаполнено(АктуальноеСостояниеСообщенияINVOIC.Статус)
						И ДокументСУточнением.Статус<>АктуальноеСостояниеСообщенияINVOIC.Статус)
					Тогда 
					Попытка
						ОбновитьСтатусСообщенияINVOICИзДДВызовСервера(ДокументСУточнением.СообщениеСсылка,АктуальноеСостояниеСообщенияINVOIC);
						МассивУточненных.Добавить(ДокументСУточнением.Документ);
					Исключение
						//скорее всего документ заблокирован
					КонецПопытки;
				КонецЕсли;
				
				//действия со статусом
			Иначе
				Если ЗначениеЗаполнено(СтатусыЮЗДО.ОписаниеОшибки) Тогда
					Сообщить(СтатусыЮЗДО.ОписаниеОшибки);
				КонецЕсли;	
				ДокументыПоКоторымНеУдалосьОбновитьСтатус.Добавить(ДокументСУточнением.Документ);
			КонецЕсли;
			
		КонецЦикла;
		
		МодульОбменКлиент().СброситьПарольКонтейнераДанныхАвторизации();
		
		//сообщить что получилось, а что нет
		ТекстПредупреждения=?(МассивУточненных.Количество()=0,"Нет обновлений статусов.","Количество обновленных статусов: "+МассивУточненных.Количество());
		Если ДокументыПоКоторымНеУдалосьОбновитьСтатус.Количество()<>0 Тогда 
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + "Не удалось определить статус в Диадоке по " + ДокументыПоКоторымНеУдалосьОбновитьСтатус.Количество() + " документам." 
								+ Символы.ПС + "Возможно, не указаны логин и пароль или не назначен сертификат по организации.";
		КонецЕсли;
		
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		
		//обновить список
		ОбновитьСписок();
		
	Иначе
		ТекстПредупреждения="По текущему списку нет доступных для проверки счетов-фактур.";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//  <АктуальноеСостояниеСообщенияINVOIC>  - <Структура> - Статус/ТребуемоеДействие/Архив
&НаСервере
Процедура ОбновитьСтатусСообщенияINVOICИзДДВызовСервера(СообщениеСсылка,АктуальноеСостояниеСообщенияINVOIC)
	
	МодульОбъекта().ОбновитьСтатусСообщенияINVOICИзДД(СообщениеСсылка,АктуальноеСостояниеСообщенияINVOIC);
	
КонецПроцедуры // ОбновитьСтатусСообщенияINVOICИзДД()

&НаСервере
Функция ПолучитьДокументыСУточнениямиСервер()
	
	Возврат МодульОбъекта().ПолучитьДокументыСУточнениями();
	
КонецФункции // ПолучитьДокументыСУточнениями()

&НаКлиенте
Функция Удалить_ЗаполнитьИдентификаторыЧерезКомпонентуДД(МассивСтруктурИдентификаторов) Экспорт
	//
	//РезультатРаботы = Новый массив; //структура: keys: Документ/Статус/Комментарий
	//
	//Если РаботаССерверомДиадок = Неопределено или РаботаССерверомДиадок.Соединение = Неопределено Тогда
	//	ИнициализироватьРаботуСДиадоком();
	//КонецЕсли;
	//
	//Для Каждого СтруктураИдентификаторов ИЗ МассивСтруктурИдентификаторов ЦИкл
	//	
	//	Если ЗначениеЗаполнено(СтруктураИдентификаторов.boxId) 
	//		И ЗначениеЗаполнено(СтруктураИдентификаторов.messageId) 
	//		И (ЗначениеЗаполнено(СтруктураИдентификаторов.invoiceId) 
	//				или ЗначениеЗаполнено(СтруктураИдентификаторов.torg12Id) 
	//				или ЗначениеЗаполнено(СтруктураИдентификаторов.UniversalTransferDocumentId)) Тогда //нужен boxId, messageId  и один из идентификаторов entity
	//		
	//		Если УстановитьСоединениеСДиадокомПоУмолчанию(Ложь) Тогда
	//			
	//			Попытка
	//				ИДОрганизации = СтрЗаменить(СтруктураИдентификаторов.boxId,"-","")+"@diadoc.ru";
	//				ОрганизацияДД = РаботаССерверомДиадок.Соединение.GetOrganizationById(ИДОрганизации);
	//			Исключение
	//				Продолжить;
	//			КонецПопытки;
	//			
	//			ТОРГ12Получен = Ложь;
	//			Если ЗначениеЗаполнено(СтруктураИдентификаторов.torg12Id) Тогда
	//				Попытка
	//					ДокументДД_ТОРГ12 = ОрганизацияДД.GetDocumentById(СтруктураИдентификаторов.messageId+СтруктураИдентификаторов.torg12Id);
	//					ТОРГ12Получен = Истина;
	//				Исключение
	//				КонецПопытки;
	//			КонецЕсли;
	//			
	//			ЭСФПолучен = Ложь;
	//			Если ЗначениеЗаполнено(СтруктураИдентификаторов.invoiceId) Тогда
	//				Попытка
	//					ДокументДД_СФ = ОрганизацияДД.GetDocumentById(СтруктураИдентификаторов.messageId+СтруктураИдентификаторов.invoiceId);
	//					ЭСФПолучен = Истина;
	//				Исключение
	//				КонецПопытки;
	//			КонецЕсли;
	//			
	//			Если ТОРГ12Получен И ДокументДД_ТОРГ12.Status = "OutboundRecipientSignatureRequestRejected" Тогда // отказано в подписании накладной
	//				
	//				КомментарийОтказаВПодписи = ДокументДД_ТОРГ12.GetRejectionComment();
	//				
	//				СтруктураЭлементаРезультата = Новый Структура();
	//				
	//				СтруктураЭлементаРезультата.Вставить("Документ",СтруктураИдентификаторов.Документ);
	//				СтруктураЭлементаРезультата.Вставить("Статус","Отказ в подписи накладной");
	//				СтруктураЭлементаРезультата.Вставить("Комментарий",КомментарийОтказаВПодписи);
	//				
	//				РезультатРаботы.Добавить(СтруктураЭлементаРезультата);
	//				
	//			КонецЕсли;
	//			
	//			Если ЭСФПолучен И ДокументДД_СФ.AmendmentRequested = Истина Тогда // если запрошено уточнение
	//				
	//				КомментарийУточнения = ДокументДД_СФ.GetAmendmentRequestedComment();
	//				
	//				СтруктураЭлементаРезультата = Новый Структура();
	//				
	//				СтруктураЭлементаРезультата.Вставить("Документ",СтруктураИдентификаторов.Документ);
	//				СтруктураЭлементаРезультата.Вставить("Статус","Запрос на уточнение счета-фактуры");
	//				СтруктураЭлементаРезультата.Вставить("Комментарий",КомментарийУточнения);
	//				
	//				РезультатРаботы.Добавить(СтруктураЭлементаРезультата);
	//				
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Возврат РезультатРаботы;
КонецФункции

&НаКлиенте
Функция ПолучитьКлассификаторСтатусовДД() Экспорт

	Возврат ПолучитьКлассификаторСтатусовДДВызовСервера();	

КонецФункции // ПолучитьКлассификатор()

&НаСервере
Функция ПолучитьКлассификаторСтатусовДДВызовСервера()

	Возврат МодульОбъекта().ЗагрузитьКлассификаторИзМакета("СостоянияДокументовДД");

КонецФункции // ПолучитьКлассификаторСтатусовДД()


//Переотправка по реестру

&НаКлиенте
Функция ВыбратьФайлРеестра()

	ДФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДФ.Фильтр = "Файлы реестра документов из Диадока(*.csv)|*.csv";			
	ДФ.Заголовок = "Выберите файл реестра счетов-фактур из Диадока";
	Если ДФ.Выбрать() Тогда
		Состояние("Загрузка файла с сервера");
		
		Возврат ДФ.ВыбранныеФайлы[0];
	КонецЕсли;
	
    Возврат Неопределено;
КонецФункции // ВыбратьФайлРеестра()

&НаКлиенте
Функция ПрочитатьФайлРеестра(ПолноеИмяФайла)
	
	МассивДокументов = Новый Массив;
	
	Текст = Новый ТекстовыйДокумент;
	
	Попытка
		Текст.Прочитать(ПолноеИмяФайла);
	Исключение             
		Сообщить("Не удалось прочитать выбранный файл!");
		Сообщить(ОписаниеОшибки());
		Возврат МассивДокументов;
	КонецПопытки;
	
	
	КолСтрок = Текст.КоличествоСтрок();
	
	//ТипДокументаСчетФактура = ПолучитьТипЗначенияОбъекта("ИсходящийСчетФактура",,Истина);
	Если КолСтрок>1 Тогда
		
		Для н = 2 По КолСтрок Цикл
			
			ТекСтрока = Текст.ПолучитьСтроку(н);
			
			СписокПараметров = РазложитьСтрокуКлиент(ТекСтрока,";");
			
			Если Ложь Тогда
				СписокПараметров = Новый СписокЗначений;
			КонецЕсли;
			
			Если СписокПараметров.Количество()>6 Тогда
				
				СписокПараметров.Получить(3);
				
				ПредставлениеДокумента	= СписокПараметров.Получить(3).Значение;
				НомерДокумента			= СписокПараметров.Получить(4).Значение;  
				ДатаДокументаСтрокой	= СокрЛП(СписокПараметров.Получить(5));
				
				МассивДокументов.Добавить(Новый Структура("ДокументВДиадоке, Документ, НомерДокумента, ДатаДокументаСтрокой",ПредставлениеДокумента,Неопределено,НомерДокумента,ДатаДокументаСтрокой));
				
			КонецЕсли;
		КонецЦикла;
	Иначе
		Сообщить("Выбранный реестр документов не содержит данных!");
	КонецЕсли;	
	
	Возврат МассивДокументов;
КонецФункции // ПрочитатьФайлРеестра()

Функция РазложитьСтрокуКлиент(Знач Строка,Разделитель=",")
	
	СЗ=Новый СписокЗначений();
	
	Строка=СтрЗаменить(Строка,Разделитель,Символы.ПС);
	
	ЧислоСтрок = СтрЧислоСтрок(Строка);
	
	Для н=1 По ЧислоСтрок Цикл
		СЗ.Добавить(СтрПолучитьСтроку(Строка,н));
	КонецЦикла;
	
	Возврат СЗ;
	
КонецФункции

//Проставим документ1С ссылка в массиве структур
&НаСервере
Функция НайтиДокументы1ССервер(МассивДокументов)
	НайденоДокументов=0;
	
	ТипДокументаСчетФактура = МодульОбъекта().ПолучитьТипЗначенияОбъекта("ИсходящийСчетФактура",,Истина);
	
	Для каждого ТекСтрока Из МассивДокументов Цикл
		
		ДатаХорошая=Ложь;
		Попытка
			ДатаДокумента = Дата(Сред(ТекСтрока.ДатаДокументаСтрокой,7,4),Сред(ТекСтрока.ДатаДокументаСтрокой,4,2),Лев(ТекСтрока.ДатаДокументаСтрокой,2));
			ДатаХорошая = Истина;	
		Исключение
			ДатаДокумента = ТекущаяДата();
		КонецПопытки;
		
		НайденныйДокумент = Документы[ТипДокументаСчетФактура].НайтиПоНомеру(ТекСтрока.НомерДокумента,ДатаДокумента);
		
		Если НЕ ЗначениеЗаполнено(НайденныйДокумент) Тогда
			
			Запрос = Новый Запрос();
			
			ТекстУсловияДата = "";
			Если ДатаХорошая Тогда
				ТекстУсловияДата = "	И НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, День) = &Дата";
				Запрос.УстановитьПараметр("Дата",ДатаДокумента);
			КонецЕсли;
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	СчетФактураВыданный.Ссылка
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.Номер ПОДОБНО ""%"+ТекСтрока.НомерДокумента+"""
			|"+ТекстУсловияДата+"
			|УПОРЯДОЧИТЬ ПО СчетФактураВыданный.Дата УБЫВ";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"СчетФактураВыданный",ТипДокументаСчетФактура);
			
			НайденныйДокумент = МодульОбъекта().ПолучитьРезультатЗапроса(Запрос);
			
			Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
				ТекСтрока.Документ = НайденныйДокумент;
			КонецЕсли;

		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
			НайденоДокументов=НайденоДокументов+1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденоДокументов;
	
КонецФункции // НайтиДокументы1ССервер()

&НаКлиенте
Процедура ОбработчикСогласияПереотправки(Ответ,ТаблицаДокументовИзФайла)Экспорт
	Если Ответ= "Да, переотправить найденные" Тогда
	Состояние("Подготавливаю к отправке...",70,,Элементы.ОткрытьНастройки.Картинка);
	КоличествоУспешно = ПереотправитьПоРееструСервер(ТаблицаДокументовИзФайла);	
	ТекстПредупреждения="";
	Если КоличествоУспешно = 0 Тогда
		ТекстПредупреждения="Не было отправлено ни одного документа! 
		|Они содержат ошибки, поэтому не могут быть переотправлены.";
	Иначе
		ТекстПредупреждения="Подготовлено к переотправке счетов-фактур: "+СокрЛП(КоличествоУспешно)+"."+Символы.ПС+"Для завершения операции выполните обмен.";
	КонецЕсли;
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
	Иначе
		Предупреждение(ТекстПредупреждения,,"Контур.EDI");
	КонецЕсли;
	
	ОбновитьСписок();
	КонецЕсли;
КонецПроцедуры // ОбработчикСогласияПереотправки()

 &НаСервере
Функция ПереотправитьПоРееструСервер(ТаблицаДокументовИзФайла)
	
	КоличествоУспешно = 0;
	
	Для каждого Стр Из ТаблицаДокументовИзФайла Цикл
		
		Если ЗначениеЗаполнено(Стр.Документ) Тогда
			
			СФ = Стр.Документ;
			
			ИсходноеСообщение = МодульОбъекта().НайтиСообщениеДокумента(СФ,"INVOIC");
			Если ИсходноеСообщение = Неопределено Тогда
				Продолжить;//мы не отправляли сообщение по данному документу
			КонецЕсли;
			
			Сообщение = МодульОбъекта().ПодготовитьИсходящееСообщение("INVOIC", СФ);
			Сообщение.Вставить("ПереотправляемоеСообщениеСсылка",ИсходноеСообщение);
			
			КопияСообщения		= МодульОбъекта().ПолучитьКопиюСообщения(Сообщение);
			РезультатПроверки	= МодульОбъекта().ПроверитьПоляСообщения(КопияСообщения);
			
			Если РезультатПроверки.Успешно = Истина Тогда
				
				ПараметрыОтправки=Новый Структура;
				ПараметрыОтправки.Вставить("Сообщение",Сообщение);
				ПараметрыОтправки.Вставить("ОтправитьСообщениеИзФормы",Истина);
				
				МодульОбъекта().ОтправитьСообщение("INVOIC",СФ, ПараметрыОтправки);											
				
				КоличествоУспешно=КоличествоУспешно+1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоУспешно;
	
КонецФункции // ПереотправитьПоРееструСервер()


&НаКлиенте
Процедура КнопкаЕщеПереотправитьПоРеестру(Команда)
	
	ПолноеИмяФайла=ВыбратьФайлРеестра();
	Если ПолноеИмяФайла=Неопределено тогда Возврат; КонецЕсли;
	Состояние("Анализирую реестр...",50,,Элементы.ОткрытьНастройки.Картинка);
	ТаблицаДокументовИзФайла=ПрочитатьФайлРеестра(ПолноеИмяФайла);//массив
	
	НайденоДокументовВ1С=НайтиДокументы1ССервер(ТаблицаДокументовИзФайла);
	Если НайденоДокументовВ1С>0 Тогда 
		//спросим подтверждение отправки
		ТекстВопроса ="По этому реестру в 1С было найдено: "+НайденоДокументовВ1С+" документов. 
		|Переотправить их?";
		КнопкиВопроса=новый СписокЗначений;
		КнопкиВопроса.Добавить("Да, переотправить найденные");
		КнопкиВопроса.Добавить("Отмена");
		ДопПараметрДляПередачиВОбработчик=ТаблицаДокументовИзФайла;
		РезультатВопроса = Неопределено;
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияПереотправки"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
		Иначе
			РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
			ОбработчикСогласияПереотправки(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
	Иначе
		ТекстПредупреждения="По реестру в 1С не найдено ни одного документа.";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//Конец переотправка по реестру

&НаКлиенте
Процедура КнопкаЕщеПоказатьНаЯндексКартах(Команда)
	
	СодержимоеТД= Элементы.ТабСообщения.ТекущиеДанные.ТочкаДоставки;
	
	Если ЗначениеЗаполнено(СодержимоеТД) Тогда
		Если ТипЗнч(СодержимоеТД)=Тип("Строка")Тогда 
			АдресТД = СодержимоеТД;
		Иначе
			АдресТД=ПолучитьАдресТДДляЯндексКарты(СодержимоеТД);
		КонецЕсли;
		ПоказатьАдресНаКарте(АдресТД, "Яндекс.Карты");
	Иначе
		ТекстПредупреждения="В этой строке не заполнен адрес";
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		//по хорошему - надо метнуться в сообщение - конвертнуть shipTo и взять адрес оттуда
		//ждем деманд
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресТДДляЯндексКарты(ТДСсылка)
	Возврат МодульОбъекта().ПолучитьЭлементСправочника("ТочкиДоставкиСторонние", ТДСсылка).АдресДоставки;	
КонецФункции

&НаКлиенте
Процедура ПоказатьАдресНаКарте(Адрес, ИмяКартографическогоСервиса) Экспорт
	АдресКодированный = Адрес;
	Если ИмяКартографическогоСервиса = "GoogleMaps" Тогда
		СтрокаЗапуска = "https://maps.google.ru/?q=" + АдресКодированный;
	Иначе
		СтрокаЗапуска = "https://maps.yandex.ru/?text=" + АдресКодированный;
	КонецЕсли;
	
	ПерейтиПоНавигационнойСсылке(СтрокаЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьТехподдержкаПочтаНажатие(Элемент)
	
	Попытка
		темаОбращения="Проблема в модуле ("+Лев(ЭтаФорма.Заголовок,22)+")";
		текстОбращения="<шаблон> В форме ________ происходит_________ если__________ при этом________";
		
		ЗапуститьПриложение("mailto:edi@skbkontur.ru&subject="+темаОбращения+"&body="+текстОбращения);//&subject=тема&body=текст""c:\Io.sys""");
	Исключение
		Сообщить("Не получилось подключиться к вашей почтовой программе по-умолчанию."+Символы.ПС+"Мы по-прежнему хотим решить вашу проблему, звоните: 8 800 500-33-51")
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьТехподдержкаТелеграмЧатНажатие(Элемент)
	
	ЗапуститьПриложение("https://telegram.me/Modul_EDI_bot");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьТехподдержкаТелефонНажатие(Элемент)
	
	ЗапуститьПриложение("callto:+78005003351");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтправитьОтзывНажатие(Элемент)
	
	Попытка
		темаотзыва="Отзыв об интеграции ("+Лев(ЭтаФорма.Заголовок,22)+")";
		текстотзыва=СобратьРыбуОтзыва();
		
		ЗапуститьПриложение("mailto:edi-feedback@skbkontur.ru&subject="+темаотзыва+"&body="+текстотзыва);
	Исключение
		Сообщить("Не получилось подключиться к вашей почтовой программе по-умолчанию."+Символы.ПС+"Мы по-прежнему ждем ваш отзыв на edi-feedback@skbkontur.ru")
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция СобратьРыбуОтзыва()

Возврат "Добрый день,%0d
|Наш GLN: "+ОсновнойGLN()+"%0d%0d
|
|	- В модуле нам понравилось:%0d%0d
|
|		Нам НЕ понравилось:%0d%0d
|
|	- В процессе внедрения нам понравилось:%0d%0d
|
|		Нам НЕ понравилось:%0d%0d
|
|Мы хотим получить ответ на этот отзыв!"

КонецФункции

&НаСервере
Функция ОсновнойGLN()

Возврат МодульОбъекта().ПолучитьКонстантуEDI("GLN_Основной");	

КонецФункции // ОсновнойGLN()

&НаКлиенте
Процедура ПредоставитьУдаленныйДоступКонтурVNC(Команда)
	//все на клиенте!
	
	ПолныйПутьКФайлу = КаталогВременныхФайлов() + "Контур_VNC.exe";
	
	Состояние("Загрузка модуля удаленного доступа...");
	
	СоединениеHTTP_VNC = Новый HTTPСоединение("help.kontur.ru", , , , ,Истина);//HTTPS
	
	Если Не	ПолучитьФайлHTTPНаКлиенте(
		СоединениеHTTP_VNC,   
		"/content/components/helpers/Kontur-Help-VNC.exe",
		ПолныйПутьКФайлу) 
		Тогда
		Предупреждение("Не удалось загрузить модуль техподдержки с сервера. 
		|Вы можете попытаться самостоятельно скачать модуль с сайта www.help.kontur.ru/vnc 
		|или обратиться к системному администратору");
		Состояние("");
		Возврат;
	КонецЕсли;	
	
	
	Состояние("Запуск модуля удаленного доступа...");
	ЗапуститьПриложение(ПолныйПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьДиагностику(Команда)
	
	ЗапуститьПриложение("https://help.kontur.ru/diadoc");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФайлHTTPНаКлиенте(мСоединение,ИмяФайлаНаСервере,ИмяЛокальногоФайла)
	Попытка
		мСоединение.Получить(ИмяФайлаНаСервере, ИмяЛокальногоФайла);
		мСоединение=Неопределено;
		Возврат Истина;
	Исключение
		Ф=новый Файл(ИмяЛокальногоФайла);
		Если Ф.Существует() Тогда
			УдалитьФайлы(ИмяЛокальногоФайла);
		КонецЕсли;	
		мСоединение=Неопределено;
		Возврат Ложь;
	КонецПопытки;
КонецФункции


//Область Вслывающие неблокирующие диалоги
&НаКлиенте
Процедура ВД_ПопробоватьВычеркивание(Команда)
	ОбновлятьВесьСписокПриРаботеСЗаказами=Ложь;
	ТекстПредупреждения="Режим изменен только для текущего сеанса.";
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
	Иначе
		Предупреждение(ТекстПредупреждения,,"Контур.EDI");
	КонецЕсли;
	Элементы.ВсплывающийДиалогПереходНаВычеркивание.Видимость=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВД_ОткрытьВыборПериода(Команда)
	ОткрытьВыборПериода();
	Элементы.ВсплывающийДиалогПереходНаВычеркивание.Видимость=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВД_ПереключитьНаВычеркивание(Команда)
	УстановитьКонстантуEDIВызовСервера("ОбновлятьВесьСписокПриРаботеСЗаказами",ложь);
	ОбновлятьВесьСписокПриРаботеСЗаказами=Ложь;
	ТекстПредупреждения="Режим изменен";
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
	Иначе
		Предупреждение(ТекстПредупреждения,,"Контур.EDI");
	КонецЕсли;
	Элементы.ВсплывающийДиалогПереходНаВычеркивание.Видимость=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВД_Отложить(Команда)
	УстановитьКонстантуEDIВызовСервера("ОтказВычеркиватьСтрокиДо",ТекущаяДата()+60*60*24);
	Элементы.ВсплывающийДиалогПереходНаВычеркивание.Видимость=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВД_ВычеркиваниеЗакрыть(Команда)
	Элементы.ВсплывающийДиалогПереходНаВычеркивание.Видимость=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФильтровПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент <>Неопределено Тогда   
		
		Если Элемент.ТекущийЭлемент.Имя = "ДеревоФильтровИзменить"  
			и Элемент.ТекущиеДанные <> Неопределено  
			и ТипЗнч(Элемент.ТекущиеДанные.Изменить)= Тип("Картинка")
			и Элемент.ТекущиеДанные.Изменить.Вид <> ВидКартинки.Пустая
			Тогда 
			//выполнить действие                                     
			ДеревоФильтровВыбор(Элемент, Элемент.ТекущиеДанные, Элементы.ДеревоФильтровИзменить, ложь);
		КонецЕсли;
	КонецЕсли;
	
	//нечего делать в этой колонке
	Элемент.ТекущийЭлемент=Элементы.ДеревоФильтровЗначение;
КонецПроцедуры

&НаКлиенте
Процедура АнализЗаказов(Команда)
	
	////СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	////Каталог = "C:\";
	////Путь = Каталог+ "\КонтурEDI_АнализЗаказов.erf";
	////
	//////Помещаем обработку во временном хранилище
	////
	////АдресХранилища = "";
	////Результат = ПоместитьФайл(АдресХранилища, Путь, , Ложь);
	////ИмяОбработки = ПодключитьОтчетАнализ(АдресХранилища,Путь);
	////
	////// Откроем форму подключенной внешней обработки
	////ПараметрыОтчета = Новый Структура("ФормаРодительИдентификатор", ЭтаФорма.УникальныйИдентификатор);
	////ПараметрыОтчета.Вставить("АдресМО",ПоместитьМОВХранилище());
	////ПараметрыОтчета.Вставить("МодальностьЗапрещена",Параметры.МодальностьЗапрещена);
	////ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма",ПараметрыОтчета,ЭтаФорма);
	
	ПараметрыФормы=	Новый Структура;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Отчет_АнализЗаказовУправляемая"", ПараметрыФормы,)");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Отчет_АнализЗаказовУправляемая",ПараметрыФормы).ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьМОВХранилище()
    Возврат ПоместитьВоВременноеХранилище(МодульОбъекта(),ЭтаФорма.УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция ПодключитьОтчетАнализ(АдресХранилища,Путь)
	
	
	Возврат ВнешниеОтчеты.Подключить(АдресХранилища);
	
	//ВнешнийМодуль = ВнешниеОбработки.Создать(СокрЛП(Путь), Ложь); 	
	//ВнешнийМодуль.Инициализировать(МодульОбъекта());
	//Возврат ВнешнийМодуль.Имя;
КонецФункции

&НаКлиенте
Процедура НовоеВРелизе()
	
    ПараметрыФормы=	Новый Структура;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_НовоеВРелизеУправляемая"", ПараметрыФормы,,,,РежимОткрытияОкнаФормы.Независимый)");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Сервис_НовоеВРелизеУправляемая",ПараметрыФормы).Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Статистика_ПолучитьКоличествоНеотраженныхСообщений()
	
	Возврат МодульОбъекта().Отчетность_НеотраженнаяСтатистика_ПолучитьКоличествоСообщений();
	
КонецФункции

&НаСервере
Процедура Статистика_РассчитатьСтатистикуНаСервере()
	
	МодульОбъекта().Отчетность_НеотраженнаяСтатистика_Рассчитать();
				
КонецПроцедуры

//Здесь сохраняем файлы обновления и инструкций
&НаКлиенте
Процедура Статистика_Рассчитать(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса  = КодВозвратаДиалога.Да Тогда
        Статистика_РассчитатьСтатистикуНаСервере()
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Отчетность(Команда)
	//проверить доступность метаданных по отчетности
	//и либо вызвать отчет либо сказать обратитесь в контур
	Если ЕстьМетаданныеОтчетов() Тогда
		
		КоличествоНерасчитанных = Статистика_ПолучитьКоличествоНеотраженныхСообщений();
		Если КоличествоНерасчитанных > 0 Тогда
			
			ТекстВопроса = "Есть новые сообщения ("+КоличествоНерасчитанных+"). Рассчитать по ним статистику?";
			
			Если Параметры.МодальностьЗапрещена Тогда
				Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""Статистика_Рассчитать"", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет)");
			Иначе
				РезультатВопросаСохраненияФайла = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Статистика_Рассчитать(РезультатВопросаСохраненияФайла, Неопределено)
			КонецЕсли;
		
		КонецЕсли;
		
		//Попытка   //решено все-таки выводить стандартную ошибку среды исполнения, инструкция также нацелена на это
			ОткрытьФорму("Отчет.КонтурEDI_АнализДанных.Форма");
		//Исключение
		//	Сообщить("Похоже, требуется обновление вспомогательных данных. Обратитесь к инструкции. Ваша версия БСП: "+ПолучитьВерсиюБСПСервер());
		//КонецПопытки;
	Иначе
		ТекстПредупреждения="Для работы с Отчетностью Контур.EDI необходимо обновить конфигурацию!";	
		ТекстПредупреждения=ТекстПредупреждения+Символы.ПС+"Обновите вашу конфигурацию с использованием файла КонтурEDI_upd. ";
		
		РезультатВопросаСохраненияФайла = Неопределено;
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ПриОткрытииВопросОбобновленииЗавершение"", ЭтаФорма), ТекстПредупреждения+Символы.ПС+Символы.ПС+""Сохранить файл обновления на диск?"", РежимДиалогаВопрос.ДаНет)");
		иначе
			РезультатВопросаСохраненияФайла = Вопрос(ТекстПредупреждения+Символы.ПС+Символы.ПС+"Сохранить файл обновления на диск?", РежимДиалогаВопрос.ДаНет);
			ПриОткрытииВопросОбОбновленииЗавершение(РезультатВопросаСохраненияФайла, Неопределено)
		КонецЕсли;
		
		ЗапуститьПриложение("https://edi.kontur.ru/1c/konturEDI_82/КонтурEDI_УстановкаИЗапускОтчетности.pdf");
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВерсиюБСПСервер()
	Возврат СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
КонецФункции

&НаСервере
Функция ЕстьМетаданныеОтчетов()
	Возврат  (МодульОбъекта().ЕстьНеобходимыеМетаданные("РегистрыСведений.КонтурEDI_Статистика") 
			И МодульОбъекта().ЕстьНеобходимыеМетаданные("Отчеты.КонтурEDI_АнализДанных")); 
КонецФункции

&НаКлиенте
Процедура Отчетность_ПересчитатьСтатичтикуSL(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = НастройкаПериода;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("Диалог.Показать(Новый ОписаниеОповещения(""Обработчик_ПересчитатьСтатичтикуSL"", ЭтаФорма,))");
	Иначе
		Если Диалог.Редактировать() Тогда 
			Обработчик_ПересчитатьСтатичтикуSL(Диалог.Период,неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обработчик_ПересчитатьСтатичтикуSL(ПериодSL,ДопПараметр1=Неопределено) Экспорт
	
	Если ПериодSL<>Неопределено  Тогда 
		Состояние("Рассчитываю статистику сообщений за период...",50,,Элементы.Настройки.Картинка);
		
		ДатаС = ПериодSL.ДатаНачала;
		Если Не ЗначениеЗаполнено(ПериодSL.ДатаОкончания) Тогда
			ДатаПо = КонецДня(Дата("39990101"));
		Иначе	
			ДатаПо = КонецДня(ПериодSL.ДатаОкончания);
		КонецЕсли;	
		
		Отчетность_ПересчитатьСтатичтикуSLВызовСервера(ДатаС,ДатаПо);
		Предупреждение("Статистика по сообщениям за период с "+Формат(ДатаС,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаПо,"ДФ=dd.MM.yyyy")+" обновлена");
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура Отчетность_ПересчитатьСтатичтикуSLВызовСервера(ДатаС,ДатаПо)
	
	МодульОбъекта().Отчетность_ПересчитатьСтатичтикуSLСервер(ДатаС,ДатаПо);
	
КонецПроцедуры // Отчетность_ПересчитатьСтатичтикуSL()

&НаКлиенте
Процедура УзнатьСвоюВерсиюБСП(Команда)
	Сообщить("Ваша версия БСП: "+ ПолучитьВерсиюБСПСервер());
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьКомпактность(Команда)
	
	ПараметрыФормы=	Новый Структура;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_УФ_ПереключениеКомпактности"", ПараметрыФормы,""ОбработчикПослередактированияПартнеров"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Сервис_УФ_ПереключениеКомпактности",ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослередактированияПартнеров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтправкиПроизвольногоСообщения(Команда)
	
	ПараметрыФормы=	Новый Структура;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""ОтправкаПроизвольногоСообщенияУправляемая"", ПараметрыФормы,)");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("ОтправкаПроизвольногоСообщенияУправляемая",ПараметрыФормы).ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбновленияМодуля(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДополнительнаяОбработкаСсылка",Параметры.ДополнительнаяОбработкаСсылка);
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_ОбновлениеУправляемая"", ПараметрыФормы,)");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Сервис_ОбновлениеУправляемая",ПараметрыФормы).ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьСообщения(Команда)
	
	Состояние("Расчет количества сообщений для архивирования");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МодальностьЗапрещена", Параметры.МодальностьЗапрещена);
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_АрхивированиеСообщенийУправляемая"", ПараметрыФормы, ""ОбработчикПродолженияАрхивированияСообщений"")");
	Иначе
		Результат = ПолучитьФормуОбработки("Сервис_АрхивированиеСообщенийУправляемая", ПараметрыФормы).ОткрытьМодально();
		ОбработчикПродолженияАрхивированияСообщений(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПродолженияАрхивированияСообщений(ВыбранноеЗначение, ДопПараметры = Неопределено) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АрхивироватьДоДаты = ВыбранноеЗначение.АрхивироватьДоДаты;
	КоличествоСообщенийДляАрхивирования = ВыбранноеЗначение.КоличествоСообщенийДляАрхивирования;
	
	Состояние("Выполняется архивирование сообщений (" + КоличествоСообщенийДляАрхивирования + ") до " + Формат(АрхивироватьДоДаты, "ДЛФ=Д"));
	КоличествоЗаархивировано = АрхивироватьСообщенияСервер(АрхивироватьДоДаты);
	ОбновитьСписок();
	ТекстПредупреждения = "Процесс завершен, заархивировано сообщений: " + КоличествоЗаархивировано
	+ Символы.ПС + "Далее необходимо использовать стандартную обработку 1С ""Удаление помеченных объектов""";
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьПредупреждение(, ТекстПредупреждения, , ""Контур.EDI"")");
	Иначе
		Предупреждение(ТекстПредупреждения, , "Контур.EDI");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АрхивироватьСообщенияСервер(АрхивироватьДоДаты)
	
	Возврат МодульОбъекта().СформироватьИОбработатьДеревоАрхивированияСообщений(АрхивироватьДоДаты);
	
КонецФункции

//Меркурий
&НаСервере
Процедура ДобавитьКнопкуНастройкиМеркурий()
	
	Если Элементы.Найти("НастройкиМеркурий") = Неопределено Тогда
		МеркурийНастройки = Элементы.Добавить("НастройкиМеркурий", Тип("КнопкаФормы"), Элементы.Настройки);
		МеркурийНастройки.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		МеркурийНастройки.Заголовок = "Настройки ГИС Меркурий";
		МеркурийНастройки.ИмяКоманды = "ОткрытьНастройкиМеркурий";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиМеркурий(Команда)
	
	Если НЕ Параметры.КэшироватьМодульОбъекта Тогда//кэшируем принудительно, т.к. модуль нужен во временном хранилище
		Параметры.КэшироватьМодульОбъекта = Истина;
		ОбновитьКэшМодуляОбъекта();
	КонецЕсли;
	
	ПараметрыФормы=	Новый Структура;
	ПараметрыФормы.Вставить("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	ПараметрыФормы.Вставить("АдресХранилища", Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("МодальностьЗапрещена", Параметры.МодальностьЗапрещена);
	ПараметрыФормы.Вставить("ПутьКФормамМеркурий", ПутьКФормамМеркурий);
	ПараметрыФормы.Вставить("КэшироватьМодульОбъекта", Истина);
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормамМеркурий + ""Меркурий_НастройкаУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияНастроек"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Меркурий_НастройкаУправляемая",ПараметрыФормы,,,,ПутьКФормамМеркурий).ОткрытьМодально();
		ОбработчикПослередактированияНастроек();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьКлиентскийМодульМеркурий()
	
	Возврат МодульОбъекта().ПодключитьВнешнийКлиентскийМодульМеркурий();
	 
КонецФункции

//&НаСервере
//Функция ПолучитьФормуМеркурийНаСервере()
//	МодульМеркурий = МодульОбъекта().МодульМеркурий(); 
//	ФормаМеркурий = МодульМеркурий.ПолучитьФорму("Меркурий_НастройкаУправляемая",ЭтаФорма);
//	Возврат ФормаМеркурий;
//КонецФункции



//Конец Область Вслывающие неблокирующие диалоги

РежимОтладки = Ложь;
РазбиватьПакетыЗапросов = Ложь;

//РежимОтладки = Истина;//включить для вывода скорости выполнения запросов
//РазбиватьПакетыЗапросов = Истина;
