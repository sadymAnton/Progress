&НаСервере
Перем ОбработкаОбъект;

Перем ТочкиДоставкиОбъект;

//обработчики---------------------------------------------------------------------------------

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КодСети = Параметры.КодСети;
	
	ЗаполнитьДеревоТочекДоставкиСФильтром();
	
	ЭтаФорма.Заголовок=ЭтаФорма.Заголовок+": "+Параметры.НаименованиеПартнера;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоТочекДоставкиСФильтром(Фильтр = "все")
	
	ТочкиДоставкиОбъект = РеквизитФормыВЗначение("ТочкиДоставки");
	ТочкиДоставкиОбъект.Строки.Очистить();
	_ТочкиДоставкиОбъект = МодульОбъекта().ПолучитьДеревоТочекДоставки(КодСети, Фильтр);
	Если _ТочкиДоставкиОбъект=Неопределено Тогда
		ЗначениеВРеквизитФормы(ТочкиДоставкиОбъект,"ТочкиДоставки");		
		Возврат;
	КонецЕсли;
	ЗаполнитьДеревоРекурсивно(_ТочкиДоставкиОбъект.Строки, ТочкиДоставкиОбъект.Строки);	
	ЗначениеВРеквизитФормы(ТочкиДоставкиОбъект,"ТочкиДоставки");		
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗначениеВсехСтрок("Обновить", 1);
	УстановитьИтоги();
	
	УстановитьДоступностьОсновногоДействияФормы();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьОсновногоДействияФормы()

	Если ТочкиДоставки.ПолучитьЭлементы().Количество()>0 Тогда
		Элементы.ФормаОбновитьИЗакрыть.Доступность=Истина;
	Иначе
		Элементы.ФормаОбновитьИЗакрыть.Доступность=Ложь;
	КонецЕсли;
	

КонецПроцедуры // УстановитьДоступностьОсновногоДействияФормы()


&НаКлиенте
Процедура ТочкиДоставкиОбновитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТочкиДоставки.ТекущиеДанные;
	
	Если ТекущиеДанные.Обновить = 2 Тогда
		ТекущиеДанные.Обновить = 0;
	КонецЕсли;
	
	УстановитьСвойствоПодчиненным(ТекущиеДанные, "Обновить", ТекущиеДанные.Обновить);
		
	ОбновитьФлажокРодителя(ТекущиеДанные);
	
	УстановитьИтоги(?(ТекущиеДанные.ПолучитьРодителя()=Неопределено, ТекущиеДанные, ТекущиеДанные.ПолучитьРодителя()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкиДоставкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	УстановитьПризнакОтредактированаТД(ТекущиеДанные);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкиДоставкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкиДоставкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	УстановитьЗначениеВсехСтрок("Обновить", 1);
	УстановитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНовые(Команда)
	
	Для Каждого СтрокаРегион Из ТочкиДоставки.ПолучитьЭлементы() Цикл
		Для Каждого Строка Из СтрокаРегион.ПолучитьЭлементы() Цикл	
			Если Строка.НоваяТД = 1 Тогда 
				УстановитьСвойствоПодчиненным(Строка, "Обновить", 1);
			Иначе
				УстановитьСвойствоПодчиненным(Строка, "Обновить", 0);
			КонецЕсли;
		КонецЦикла;
		ОбновитьФлажокРодителя(Строка);
	КонецЦикла;
	УстановитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНеактуальные(Команда)
	
	Для Каждого СтрокаРегион Из ТочкиДоставки.ПолучитьЭлементы() Цикл
		Для Каждого Строка Из СтрокаРегион.ПолучитьЭлементы() Цикл	
			Если Строка.ИзмениласьТД = 1 Тогда 
				УстановитьСвойствоПодчиненным(Строка, "Обновить", 1);
			Иначе
				УстановитьСвойствоПодчиненным(Строка, "Обновить", 0);
			КонецЕсли;
		КонецЦикла;
		ОбновитьФлажокРодителя(Строка);
	КонецЦикла;
	УстановитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыбор(Команда)
	
	УстановитьЗначениеВсехСтрок("Обновить", 0);	
	УстановитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНовые(Команда)
	
	ЗаполнитьДеревоТочекДоставкиСФильтром("новые");	
	УстановитьЗначениеВсехСтрок("Обновить", 1);
	УстановитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНеактуальные(Команда)
	
	ЗаполнитьДеревоТочекДоставкиСФильтром("изменившиеся");	
	УстановитьЗначениеВсехСтрок("Обновить", 1);
	УстановитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсе(Команда)
	
	ЗаполнитьДеревоТочекДоставкиСФильтром();	
	УстановитьЗначениеВсехСтрок("Обновить", 1);
	УстановитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИЗакрыть(Команда)
	Если ТочкиДоставки.ПолучитьЭлементы().Количество()>0 Тогда 
		ЗаписатьДанные();
		ЭтаФорма.Закрыть();
	иначе
		УстановитьДоступностьОсновногоДействияФормы();
	КонецЕсли;
	
КонецПроцедуры
       
&НаКлиенте
Процедура Отмена(Команда)
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры


//сохранение данных ---------------------------------------------------------------------------------

&НаСервере
Процедура ЗаписатьДанные()
	
	ТочкиДоставкиОбъект = РеквизитФормыВЗначение("ТочкиДоставки");
		
	РезультатЗаписи = МодульОбъекта().ЗаписатьДанныеТочекДоставки(КодСети, ТочкиДоставкиОбъект);
	
	Для Каждого Строка Из РезультатЗаписи.ТаблицаУведомлений Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка.Текст;
		Сообщение.ИдентификаторНазначения = Новый УникальныйИдентификатор(Параметры.GUIDФормыВыводаУведомлений);
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры	

//подготовка, обработка и установка данных дерева ----------------------------------------------------

&НаСервере
Процедура ЗаполнитьДеревоРекурсивно(_Строки, Строки)
	
	Для Каждого _Строка Из _Строки Цикл
		Строка = Строки.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, _Строка);
		ЗаполнитьДеревоРекурсивно(_Строка.Строки, Строка.Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеВсехСтрок(Колонка, Значение)
	
	//устанавливает в выбранной колонке переданное значение
	
	Для Каждого Строка Из ТочкиДоставки.ПолучитьЭлементы() Цикл
		УстановитьСвойствоПодчиненным(Строка, Колонка, Значение);	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойствоПодчиненным(Строка, Колонка, Значение)
	
	//процедура рекурсивно устанавливает значения дочерним строкам
	
	//устанавливаем значение для текущей строки
	Строка[Колонка] = Значение;
	
	//заполняем новые данные на основании текущих данных/данных ТС
	Если Не Строка.ПолучитьРодителя() = Неопределено Тогда
		Если Строка.Обновить = 1 Тогда
			Строка.НаименованиеНовое		= Строка.НаименованиеТС;
			Строка.АдресТочкиДоставкиНовый 	= Строка.АдресТочкиДоставкиТС;
		ИначеЕсли Строка.Обновить = 0 Тогда
			Строка.НаименованиеНовое		= Строка.НаименованиеТекущее;
			Строка.АдресТочкиДоставкиНовый 	= Строка.АдресТочкиДоставкиТекущий;
		КонецЕсли;
	КонецЕсли;
	
	//обновим признак отредактирована ТД
	УстановитьПризнакОтредактированаТД(Строка);
		
	//рекурсивно устанавливаем значения на более низком уровне
	Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
		Подстрока[Колонка] = Значение;
		УстановитьСвойствоПодчиненным(Подстрока, Колонка, Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакОтредактированаТД(Строка)
	
	//Если Не (Элемент.ТекущаяКолонка = Неопределено) и
	//	 Не (Элемент.ТекущиеДанные  = Неопределено) Тогда
	Если Не Строка = Неопределено Тогда
		//Если Элемент.ТекущаяКолонка.Имя = "Обновить" 				или
		//	 Элемент.ТекущаяКолонка.Имя = "НаименованиеНовое" 		или
		//	 Элемент.ТекущаяКолонка.Имя = "АдресТочкиДоставкиНовый" Тогда
			Если Строка.Обновить = 0 Тогда 
					Если Не СокрЛП(Строка.НаименованиеТекущее) 		 = СокрЛП(Строка.НаименованиеНовое)		или
						 Не СокрЛП(Строка.АдресТочкиДоставкиТекущий) = СокрЛП(Строка.АдресТочкиДоставкиНовый) Тогда
						Строка.ОтредактированаТД = 1;
					Иначе
						Строка.ОтредактированаТД = 0;
					КонецЕсли;
			ИначеЕсли Строка.Обновить = 1 Тогда
				Если Не СокрЛП(Строка.НаименованиеТС) 		= СокрЛП(Строка.НаименованиеНовое)		или
					 Не СокрЛП(Строка.АдресТочкиДоставкиТС) = СокрЛП(Строка.АдресТочкиДоставкиНовый) Тогда
					Строка.ОтредактированаТД = 1;
				Иначе
					Строка.ОтредактированаТД = 0;
				КонецЕсли;		
			КонецЕсли;	
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФлажокРодителя(Строка)
	
	//обновляет значение флажка родительской строки (регион) в зависимости от
	//комбинации значений дочерних строк (для установки единого/смешанного значения)
	
	Если Не Строка.ПолучитьРодителя() = Неопределено Тогда
		
		ЕстьОбратныеЗначения = Ложь;
		СтрокиРегиона = Строка.ПолучитьРодителя().ПолучитьЭлементы();
		Для Каждого ТД из СтрокиРегиона Цикл
			Если Не ТД.Обновить = Строка.Обновить Тогда
				ЕстьОбратныеЗначения = Истина;	
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОбратныеЗначения Тогда
			Строка.ПолучитьРодителя().Обновить = 2;
		Иначе
			Строка.ПолучитьРодителя().Обновить = Строка.Обновить;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИтоги(Регион = Неопределено)
	
	Если Не Регион = Неопределено Тогда
		УстановитьИтогиРегиона(Регион);
	Иначе
	    Для Каждого Регион Из ТочкиДоставки.ПолучитьЭлементы() Цикл
			УстановитьИтогиРегиона(Регион);	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИтогиРегиона(Регион)
	
	КоличествоНовых 				= 0;
	КоличествоИзменились 			= 0;
	Для Каждого ТД Из Регион.ПолучитьЭлементы() Цикл
		КоличествоНовых 			= КоличествоНовых 		+ ТД.НоваяТД;
		КоличествоИзменились		= КоличествоИзменились 	+ ТД.ИзмениласьТД;
	КонецЦикла;
	КоличествоНовыхСтрока      	 	= СтрЗаменить(Строка(КоличествоНовых), 							Символы.НПП, "");
	КоличествоИзменилисьСтрока		= СтрЗаменить(Строка(КоличествоИзменились), 					Символы.НПП, "");
	КоличествоВсегоСтрока			= СтрЗаменить(Строка(Регион.ПолучитьЭлементы().Количество()), 	Символы.НПП, "");
	СтрокаИтоговОбновления			= ПолучитьСтрокуИтоговОбновления(Регион);
	
	Регион.GLN 						= "Всего: "+КоличествоВсегоСтрока;
	Регион.АдресТочкиДоставкиТС		= "Новых: " + КоличествоНовыхСтрока + "; изменившихся: " + КоличествоИзменилисьСтрока;
	Регион.АдресТочкиДоставкиНовый	= СтрокаИтоговОбновления;
			
	Регион.НоваяТД					= Число(КоличествоНовыхСтрока);
	Регион.ИзмениласьТД				= Число(КоличествоИзменилисьСтрока);
	
КонецПроцедуры

&НаКлиенте
Функция  ПолучитьСтрокуИтоговОбновления(СтрокаРегион)
	
	//возвращает строку с количествами точек доставки, которые будут добавлены и обновлены
	//при текущих настройках, для переданной родительской строки региона
	
	СтрокаРезультат = "";
	КоличествоБудетДобавлено = 0;
	КоличествоБудетОбновлено = 0;
		
	Для Каждого Строка Из СтрокаРегион.ПолучитьЭлементы() Цикл
		Обновить				= Строка.Обновить = 1;
		ЭтоНоваяТД 				= Строка.НоваяТД = 1;
		ЭтоИзменившаясяТД 		= Строка.ИзмениласьТД = 1;
		ЭтоОтредактированнаяТД 	= Строка.ОтредактированаТД = 1;
		Если Обновить и ЭтоНоваяТД Тогда
			КоличествоБудетДобавлено = КоличествоБудетДобавлено + 1;
		КонецЕсли;
		Если (Обновить 	  и ЭтоИзменившаясяТД) 		или
			 (Обновить    и ЭтоОтредактированнаяТД) или
			 (Не Обновить и ЭтоОтредактированнаяТД) Тогда
			КоличествоБудетОбновлено = КоличествоБудетОбновлено + 1; 
		КонецЕсли;				 
	КонецЦикла;
	
	СтрокаРезультат = "Добавятся: " + СтрЗаменить(Строка(КоличествоБудетДобавлено), Символы.НПП, "") + "; обновятся: " + СтрЗаменить(Строка(КоличествоБудетОбновлено), Символы.НПП, "");
	
	Возврат СтрокаРезультат;
	
КонецФункции
