
&НаСервере
Перем ОбработкаОбъект; 

&НаСервере
Перем ВнешнийМодуль;

&НаКлиенте
Перем МодульОбменКлиент;
      
Перем ПодключаемыйМодульТип;

////инициализация модуля и его экспортных функций
&НаСервере
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

// инициализация клиентского модуля работы с Диадок
&НаКлиенте
Функция МодульОбменКлиент()
	
	Если ТипЗнч(МодульОбменКлиент) = Тип("УправляемаяФорма") Тогда
		Возврат МодульОбменКлиент;
	КонецЕсли;
	
	ОсновнаяФорма = ОсновнаяФорма();
	Если ТипЗнч(ОсновнаяФорма) = Тип("УправляемаяФорма") Тогда
		МодульОбменКлиент = ОсновнаяФорма.МодульОбменКлиент();
		Возврат МодульОбменКлиент;
	Иначе
		Сообщить("Ошибка! Не удалось получить контекст основной формы.");
	КонецЕсли;
	          	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуОбъектаМодально(ИмяФормы, ПараметрыФормы = Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено,РежимБлокирования = Неопределено)
	//отказ от модальности
	Если РежимБлокирования = Неопределено Тогда
		РежимБлокирования=	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресХранилища",			Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("IDОсновнойФормы",			Параметры.IDОсновнойФормы);
	ПараметрыФормы.Вставить("КэшироватьМодульОбъекта",	Параметры.КэшироватьМодульОбъекта);
	
	Если ВладелецОбработчика = Неопределено Тогда
		ВладелецОбработчика=	ЭтаФорма;
	КонецЕсли;
	
	Если ИмяОбработчика = Неопределено Тогда
		ОписаниеОбработчика=	Неопределено;
	Иначе	
		Выполнить("ОписаниеОбработчика=	Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика)");
	КонецЕсли;
	
	Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецОбработчика, , , ,  ОписаниеОбработчика, РежимБлокирования)");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ИмяФормы, ПараметрыФормы = Неопределено , ВладелецФормы  = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь)
	
	ПараметрыФормы.Вставить("АдресХранилища",							Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("IDОсновнойФормы",							Параметры.IDОсновнойФормы);
	ПараметрыФормы.Вставить("КэшироватьМодульОбъекта",					Параметры.КэшироватьМодульОбъекта);
	
	ПолучаемаяФорма=	ПолучитьФорму(ПутьКФормам+ИмяФормы
										, ПараметрыФормы
										,
										, КлючУникальности);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы=	ВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);  //ДД
	Параметры.МодальностьЗапрещена=МодульОбъекта().МодальностьЗапрещена();
	ПутьКФормам = МодульОбъекта().Метаданные().ПолноеИмя() + ".Форма.";
	
	Если Параметры.ФормаОткрытаСтартовымПомощником Тогда 
		//обязательная запись дефолтных настроек - пока что уберем кнопку отмены 
		Элементы.ФормаЗакрыть.Доступность = Ложь;
	КонецЕсли;
	
	// Автотесты
	Если ЗначениеЗаполнено(Параметры.ПараметрыАвтотестирования) Тогда

		СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
		НастройкиМодуля = СтруктураПараметров.Настройки.НастройкиМодуля;

		Если ЗначениеЗаполнено(НастройкиМодуля) Тогда
			Для Каждого Стр ИЗ НастройкиМодуля Цикл
				Если Стр.Настройка = "СоздаваемыйДокументСклад" Тогда
					ТекЗначение = Справочники.Склады.НайтиПоНаименованию(Стр.Значение,Истина);
				Иначе
					ТекЗначение = Стр.Значение;
				КонецЕсли;
				МодульОбъекта().УстановитьКонстантуEDI(Стр.Настройка, ТекЗначение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Сервер				= МодульОбъекта().ПолучитьКонстантуEDI("Сервер");
	Порт				= МодульОбъекта().ПолучитьКонстантуEDI("Порт");
	ЛогинПрокси			= МодульОбъекта().ПолучитьКонстантуEDI("ЛогинПрокси");
	ПарольПрокси		= МодульОбъекта().ПолучитьКонстантуEDI("ПарольПрокси");
	ЛогинFTP			= МодульОбъекта().ПолучитьКонстантуEDI("ЛогинFTP");
	ПарольFTP			= МодульОбъекта().ПолучитьКонстантуEDI("ПарольFTP");
	ПассивныйРежим	   	= МодульОбъекта().ПолучитьКонстантуEDI("ПассивныйРежим");
	ИспользуетсяПрокси	= МодульОбъекта().ПолучитьКонстантуEDI("ИспользуетсяПрокси");
	
	ТипПрокси = МодульОбъекта().ПолучитьКонстантуEDI("ТипПрокси");
	
	СерверПрокси			= МодульОбъекта().ПолучитьКонстантуEDI("СерверПрокси");
	ПортПрокси				= МодульОбъекта().ПолучитьКонстантуEDI("ПортПрокси");
	
	ЛогинСлужебныйДиадок	= МодульОбъекта().ПолучитьКонстантуEDI("ЛогинСлужебныйДиадок");
	ПарольСлужебныйДиадок	= МодульОбъекта().ПолучитьКонстантуEDI("ПарольСлужебныйДиадок");
	
	
	ПереключательFTP 		= МодульОбъекта().ПолучитьКонстантуEDI("ПротоколОбмена_КонтурEDI");

	АдресКаталогаОбменаEDI	= МодульОбъекта().ПолучитьКонстантуEDI("АдресКаталогаОбменаEDI");

	МыПоставщик				= МодульОбъекта().НастройкиМодуля.МыПоставщик;
	МыТорговаяСеть			= МодульОбъекта().НастройкиМодуля.МыТорговаяСеть;
	
	ГрузополучательИзЮрФизЛицаТД			= ?(МодульОбъекта().ПолучитьКонстантуEDI("ГрузополучательИзЮрФизЛицаТД")<>ложь,"Грузополучатель","Контрагент");
	
	СоздаваемыйДокументИзORDERS		= МодульОбъекта().ПолучитьКонстантуEDI("СоздаваемыйДокументИзORDERS");

	СписокВозможныхДокументов = МодульОбъекта().ПолучитьВозможныеТипыСоздаваемыхДокументовПоВходящимЗаказам();
	
	//ПереходСоСтаройРедакции	= Параметры.ПереходСоСтаройРедакции; //удалить с 19 релиза
	
	Для Каждого ВозможныйДок Из СписокВозможныхДокументов Цикл
        Элементы.СоздаваемыйДокументИзORDERS.СписокВыбора.Добавить(ВозможныйДок.Значение) ;
    КонецЦикла;
	
	Если не ЗначениеЗаполнено(СоздаваемыйДокументИзORDERS) Тогда
	
		Если СписокВозможныхДокументов.Количество()>0 Тогда
			СоздаваемыйДокументИзORDERS = СписокВозможныхДокументов.Получить(0).Значение;
		КонецЕсли;
	КонецЕсли;
	
	НеПоказыватьПровестиЗаказ			= МодульОбъекта().ПолучитьКонстантуEDI("НеПоказыватьПровестиЗаказ");
	НеПоказыватьСоздатьРеализацию		= МодульОбъекта().ПолучитьКонстантуEDI("НеПоказыватьСоздатьРеализацию");
	
	//НеПоказыватьФормуВходящегоЗаказаПриЗагрузке	= МодульОбъекта().ПолучитьКонстантуEDI("НеПоказыватьФормуВходящегоЗаказа");
	//ПроводитьЗагруженныеЗаказы			= МодульОбъекта().ПолучитьКонстантуEDI("ПроводитьЗагруженныеЗаказы");
	
	СоздаваемыйДокументРСчет			= МодульОбъекта().ПолучитьСсылкуНаРСчет();
	СоздаваемыйДокументСклад			= МодульОбъекта().ПолучитьКонстантуEDI("СоздаваемыйДокументСклад");
	
	ПодключаемыйМодульТип			= МодульОбъекта().ПолучитьКонстантуEDI("ПодключаемыйМодульТип");
	ПодключаемыйМодульПуть			= МодульОбъекта().ПолучитьКонстантуEDI("ПодключаемыйМодульПуть");
	
	Если ПодключаемыйМодульТип = "1С" Тогда 
		ПодключаемыйМодульСсылка		= МодульОбъекта().ПолучитьСсылкуНаПодключаемыйМодуль();
	КонецЕсли;
	
	СписокОбработокКонфигурации = Новый СписокЗначений;
	Для Каждого Обработка Из Метаданные.Обработки Цикл
		СписокОбработокКонфигурации.Добавить(Обработка.Имя);
	КонецЦикла;
	
	Для Каждого ОбработкаКонфигурации Из СписокОбработокКонфигурации Цикл
        Элементы.ПодключаемыйМодульИмяОбработки.СписокВыбора.Добавить(ОбработкаКонфигурации.Значение, ОбработкаКонфигурации.Значение,,БиблиотекаКартинок.Обработка) ;
    КонецЦикла; 
	
	ПодключаемыйМодульИмяОбработки  = МодульОбъекта().ПолучитьКонстантуEDI("ПодключаемыйМодульИмяОбработки");
		
	Если ЗначениеЗаполнено(ПодключаемыйМодульТип) И НЕ ПодключаемыйМодульТип = "Нет" Тогда
		
		ИспользоватьПодключаемыйМодуль = Истина;
		
		МестонахождениеПодключаемогоМодуля = ПодключаемыйМодульТип;
		
	Иначе
		
		МестонахождениеПодключаемогоМодуля = "Диск";
		
	КонецЕсли;
	
	Если Порт = 0 Тогда
		Порт = 21;
	КонецЕсли;

	УстановитьТипПоля1С("СоздаваемыйДокументСклад","ТочкаДоставкиСвоя");
	
	Если НЕ МодульОбъекта().ИмяКонфигурации1С = "Розница" Тогда
		УстановитьТипПоля1С("СоздаваемыйДокументРСчет","РасчетныйСчет");
	КонецЕсли;	
	
    МассивНастроек=МодульОбъекта().ПолучитьМассивДополнительныхНастроекИзМакета("Общие");
	СтруктураНастроек=Новый Структура;
	Для Каждого Эл Из МассивНастроек Цикл
		СтруктураНастроек.Вставить(Эл,МодульОбъекта().ПолучитьКонстантуEDI(Эл));
	КонецЦикла;
	ДеревоОбъект=РеквизитФормыВЗначение("ДеревоНастроек");
	МодульОбъекта().СоздатьДеревоНастроек(ДеревоОбъект,"Общие",СтруктураНастроек);
	ЗначениеВРеквизитФормы(ДеревоОбъект,"ДеревоНастроек");

	Если МыПоставщик=Истина Тогда
		ИмяШаблонаПоставщик = МодульОбъекта().ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик");
		ЗаполнитьДеревоНастроекДокументовСообщений("Поставщик");
	Иначе
		Элементы.ГруппаШаблоны_Поставщик.Видимость = Ложь;
	КонецЕсли;	
	
	Если МыТорговаяСеть=Истина Тогда
		ИмяШаблонаПокупатель = МодульОбъекта().ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Покупатель");
		ЗаполнитьДеревоНастроекДокументовСообщений("Покупатель");
	Иначе
		Элементы.ГруппаШаблоны_Покупатель.Видимость = Ложь;
	КонецЕсли;
	
	//Построить сертификаты по порганизациям
	ЗаполнитьНазначенныеСертификаты();
	
	//расширения
	ЕстьМетаданныеХраненияРасширений = МодульОбъекта().ПроверитьНаличиеМетаданныхХраненияРасширений();
	Если ЕстьМетаданныеХраненияРасширений И МыПоставщик = Истина Тогда
		ЗаполнитьИнформациюОРасширениях();
		ПозиционироватьНаСтрокуРасширения();
	Иначе
		ЗаблокироватьПанельРасширений();
	КонецЕсли;
	
КонецПроцедуры

//расширения ----------------------------------------------------

//заполнение данных
&НаСервере
Процедура ЗаполнитьИнформациюОРасширениях()
	
	ТаблицаДанныхОбУстановленныхРасширениях = МодульОбъекта().ПолучитьДанныеОбУстановленныхРасширениях();
	
	СписокРасширения.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхОбУстановленныхРасширениях Цикл
		НоваяСтрокаСписка = СписокРасширения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСписка, СтрокаТаблицы);
		
		Если НоваяСтрокаСписка.Использование = Истина Тогда
			НоваяСтрокаСписка.Иконка=1;
		Иначе
			НоваяСтрокаСписка.Иконка=0;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьПанельРасширений()
	
	Элементы.СписокРасширения.Видимость 						= Ложь;
	Элементы.ПодсказкаРасширения.Видимость 						= Ложь;
	
	Элементы.НадписьРасширенияНедоступны.Видимость 				= Истина;
	Элементы.НадписьРасширенияНедоступныПодсказка.Видимость 	= Истина;
	
	Элементы.НадписьРасширенияНедоступны.Заголовок 				= "Для работы расширений обновите объекты Контур.EDI.";
	Элементы.НадписьРасширенияНедоступныПодсказка.Заголовок 	= "Сохранить файл обновления на диск";
	
	Если МыПоставщик = Ложь Тогда
		Элементы.НадписьРасширенияНедоступны.Заголовок 			= "Работа с расширениями недоступна.";
		Элементы.НадписьРасширенияНедоступныПодсказка.Заголовок = "Данная версия модуля не поддерживает работу с расширениями
																  |в режиме работы ""Торговая сеть"".";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПозиционироватьНаСтрокуРасширения(Идентификатор = "")
	
	//СтрокиПозиционирования = СписокРасширения.НайтиСтроки(Новый Структура("Идентификатор",Идентификатор));
	//
	//Если СтрокиПозиционирования.Количество()=1 Тогда
	//	Элементы.СписокРасширения.ТекущаяСтрока = СтрокиПозиционирования[0].ПолучитьИдентификатор();
	//КонецЕсли;
	////Элементы.СписокРасширения.ТекущийЭлемент = ;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоНастроекДокументовСообщений(РежимРаботы,Очищать = Ложь)
	
	_ДеревоНастроекДокументовСообщений = РеквизитФормыВЗначение("ДеревоНастроекДокументовСообщений");
	
	Если Очищать Тогда
		СуществующаяСтрока = _ДеревоНастроекДокументовСообщений.Строки.Найти(РежимРаботы,"НастройкаНаименование");
		Если СуществующаяСтрока<>Неопределено Тогда
			_ДеревоНастроекДокументовСообщений.Строки.Удалить(СуществующаяСтрока);
		КонецЕсли;	
	КонецЕсли;	
	
	МодульОбъекта().ЗаполнитьДеревоНастроекДокументовСообщений(_ДеревоНастроекДокументовСообщений,РежимРаботы);

	ЗначениеВРеквизитФормы(_ДеревоНастроекДокументовСообщений,"ДеревоНастроекДокументовСообщений");
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеДоступностьюПолейНастройкиПодключаемогоМодуля();
	УстановитьВидимостьФТПКаталог();
	
	//развернуть дерево прочих настроек
	КоллекцияЭлементовДерева=ДеревоНастроек.ПолучитьЭлементы();
    Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
        ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
        Элементы.ДеревоНастроек.Развернуть(ИдентификаторСтроки,ИСТИНА);
	КонецЦикла;

	//и второе дерево тоже развернем
	КоллекцияЭлементовДерева=ДеревоНастроекДокументовСообщений.ПолучитьЭлементы();
    Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
        ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
        Элементы.ДеревоНастроекДокументовСообщений.Развернуть(ИдентификаторСтроки,ИСТИНА);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Параметры.ПараметрыАвтотестирования) Тогда
		ПодключитьОбработчикОжидания("ЗаписатьНастройкиАвтотестирования",0.1,Истина);
	КонецЕсли;
	
	Если Параметры.ФормаОткрытаСтартовымПомощником Тогда 
		Отказ=Ложь;
		Состояние("Записываю настройки по умолчанию");
		СтруктураНастроек = СобратьСтруктуруНастроек();
		ЗаписатьНастройкиСервер(СтруктураНастроек,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиАвтотестирования()
	
	ЗаписатьНастройки("");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипПоля1С(ИмяНаФорме,Тип1С)

	ПолеФормы	= Элементы[ИмяНаФорме];
	ТипПоля		= МодульОбъекта().ПолучитьТипЗначенияОбъекта(Тип1С);
			
	Если ТипПоля = Неопределено Тогда
		
		Сообщить("Не задан тип объекта 1С для поля с типом "+Тип1С);
		
	Иначе	
		
		Элементы[ИмяНаФорме].ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма[ИмяНаФорме]) Тогда
			
			ЭтаФорма[ИмяНаФорме] = МодульОбъекта().ПолучитьПустуюСсылкуОбъекта(Тип1С);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьFTP(Команда)
	
	Если НЕ ЗначениеЗаполнено(Сервер) Тогда	
		Предупреждение("Не указан FTP сервер!");
		Элементы.КартинкаПроверкиПодключения1.Видимость	= Истина;
		Элементы.КартинкаПроверкиПодключения2.Видимость	= Ложь;
		Возврат;
	КонецЕсли;	
	
	Если мПодключитьсяКFTP() Тогда
		
		Предупреждение("Проверка подключения прошла успешно!");
		
		Элементы.КартинкаПроверкиПодключения1.Видимость	= Ложь;
		Элементы.КартинкаПроверкиПодключения2.Видимость	= Истина;
		
	Иначе
		
		Предупреждение("Не удалось подключиться к EDI с вашим логином и паролем!
		|Возможные причины:
		| - проверьте еще раз свой логин и пароль
		| - возможно с !СЕРВЕРА 1С! (или вашего компьютера для режима ""толстый клиент"") нет прямого доступа к нашему серверу
		|
		|Обратитесь к вашему системному администраторы для проверки настроек подключения.");
		
		Элементы.КартинкаПроверкиПодключения1.Видимость	= Истина;
		Элементы.КартинкаПроверкиПодключения2.Видимость	= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция мПодключитьсяКFTP() //проверяем соединение именно со стороны сервера
	
	//взять пароль от учетки этого пользователя         !
	УчетныеЗаписи = МодульОбъекта().ПолучитьСписокЭлементовСправочника("УчетныеЗаписи");
	ЕстьАктивнаяУЗ=Ложь;
	Если УчетныеЗаписи.Количество() = 0 Тогда 
		возврат Ложь;
	иначе
		Для Каждого СтрокаУчетнойЗаписи из УчетныеЗаписи Цикл 
			Если СтрокаУчетнойЗаписи.НеАктивна=Ложь Тогда 
				ЕстьАктивнаяУЗ=Истина;
			Если ПереключательFTP = "DialMail" Тогда  
				//тупиковый путь развития				
			Иначе
				
				Попытка
					ФТПСоединение = Новый FTPСоединение(СокрЛП(Сервер), Порт, СокрЛП(СтрокаУчетнойЗаписи.Логин), СокрЛП(СтрокаУчетнойЗаписи.Пароль), , ПассивныйРежим);
				Исключение
					Возврат Ложь;
				КонецПопытки;
				
			КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьАктивнаяУЗ тогда 
			Возврат Истина;   //все ок вроде
		иначе
			возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//оставляем на случай, если FTPСоединение научится корректно работать с прокси
	//Если ИспользуетсяПрокси Тогда
	//	ПроксиСервер = Новый ИнтернетПрокси();
	//	ПроксиСервер.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
	//	ПроксиСервер.Пользователь = ЛогинПрокси;
	//	ПроксиСервер.Пароль = ПарольПрокси;
	//	ПроксиСервер.Установить("ftp",СерверПрокси,ПортПрокси);  
	//	Попытка
	//		ФТПСоединение = Новый FTPСоединение(СокрЛП(Сервер), Порт, СокрЛП(ЛогинFTP), СокрЛП(ПарольFTP), ПроксиСервер, ПассивныйРежим);
	//	Исключение
	//		Возврат Ложь;
	//	КонецПопытки;
	//Иначе
	//КонецЕсли;
	
	
КонецФункции

&НаКлиенте
Процедура СправкаНажатие(Команда)
	
	Элемент = Этаформа.ТекущийЭлемент;
	
	Если Элемент=Неопределено Тогда возврат; КонецЕсли;
	
		Текст = "";
	
	// Заказы покупателей
	
	Если Элемент.Имя = "СправкаНажатиеСоздаваемыйДокументИзORDERS" Тогда
		
		Текст  = "На основании входящего заказа будет создаваться документ выбранного типа.";

	ИначеЕсли Элемент.Имя = "СправкаНажатиеЗначенияПоУмолчанию" или Элемент.Имя = "СправкаНажатиеЗначенияПоУмолчанию1" Тогда
		
		Текст  = "Данные значения будут подставляться автоматически во все создаваемые документы.";
		
	ИначеЕсли Элемент.Имя = "СправкаНажатиеГрузополучательИзЮрФизЛицаТД" Тогда
		
		Текст = "Если каждая точка доставки торговой сети заведена как отдельный контрагент,
		|то можно указать какое поле в заказе будет заполняться: Контрагент или Грузополучатель.
		|
		|Соответствие точки доставки и котрагента настраивается в карточке торговой сети.";
		
	ИначеЕсли Элемент.Имя = "СправкаНажатиеНеПоказыватьФормуВходящегоЗаказаПриЗагрузке" Тогда
		
		Текст = "!Настройка перенесена в настройки партнера! Заказ, у которого проставлены все соответствия, будет создан в 1С автоматически.";
		
	ИначеЕсли Элемент.Имя = "СправкаНажатиеПроводитьЗагруженныеЗаказы" Тогда
		
		Текст  = "!Настройка перенесена в настройки партнера! Созданный заказ 1С будет проведен автоматически.
		|
		|При одновременном использовании с настройкой выше заказы будут создаваться и проводиться полностью автоматически.";
		
	ИначеЕсли Элемент.Имя = "СправкаНажатиеНеПоказыватьСоздатьРеализацию" Тогда
		
		Текст  = "После завершения обработки входящего заказа кнопка для создания документа реализации не будет отображаться.";
		
	ИначеЕсли Элемент.Имя = "СправкаНажатиеНеПоказыватьПровестиЗаказ" Тогда
		
		Текст  = "Станет возможно подтверждать непроведенные заказы.";
	
	// Реализации товаров			
				
	ИначеЕсли Элемент.Имя = "СправкаНажатиеНеПоказыватьНакладныеБезRECADV" Тогда
		
		Текст  = "Документы реализации товаров не будут отображаться в общем списке, 
		|пока не будут получены соответствующие уведомления о приемке (RECADV).
		|
		|Актуально при работе по короткой цепочке RECADV+INVOIC";
		
	//подключаемый модуль	
	
	ИначеЕсли Элемент.Имя = "СправкаНажатиеИспользоватьПодключаемыйМодуль" Тогда
		
		Текст  = "Подключаемый модуль - это внешняя обработка, в которой вы можете описать особенности 
		|программной логики своей конфигурации и ""подключить"" ее к нашей обработке.
		|
		|Это упростит процесс обновления модуля Контур.EDI на новые версии.";
		
	// Прочие настройки	
		
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаЗагружатьСообщенияПоТД" Тогда
		
		Текст = "Входящие сообщения будут загружаться только для заранее выбранных точек доставки.
		|
		|Для их выбора необходимо зайти в карточку каждой точки доставки и отметить настройку ""Загружать сообщения от данной точки доставки"".";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаЗагружатьСообщенияПоНастроеннымСетям" Тогда
		
		Текст = "Входящие сообщения будут загружаться только для настроенных сетей.
		|
		|Для их выбора необходимо добавить сеть в список сетей, заполнить GLN и установить галочку ""Торговая сеть""";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаСвойСпраовчникТД" Тогда
		
		Текст = "Выбор собственного справочника точек доставки для сопоставления с точками торговой сети.
		|
		|Соотвествие точки доставки и элемента справочника настраивается в карточке точки доставки.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаНеСоздаватьЗаказыБезТД" Тогда
		
		Текст = "Заказы не будут создаваться для тех точек доставки, которым не сопоставлен элемент из справочника собственных точек.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаНеСоздаватьЗаказыБезЮФЛицаТД" Тогда
		
		Текст = "Заказы не будут создаваться для тех точек доставки, в которых не выбрано юр./физ. лицо.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаРеквизитыПартнераЗаполняютсяНаСервереПоGLN" Тогда
		
		Текст = "В исходящих сообщениях все реквизиты ваших партнеров (ИНН, адреса и т.д) будут подставляться на сервере, а не браться из данных 1С.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаРеквизитыКомпанииЗаполняютсяНаСервереПоGLN" Тогда
		
		Текст = "В исходящих сообщениях все реквизиты вашей компании (ИНН, адреса и т.д) будут подставляться на сервере, а не браться из данных 1С.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаОбновлениеДанныхВСписке" Тогда
		
		Текст = "При работе с документом его статус и требуемое действие меняются.
		|
		|Обновление всего списка позволит видеть сразу все изменения в документах. Полезно при многопользовательской работе.
		|Обновление только строки документа, который обрабатывается, повысит скорость работы модуля.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаОткрыватьЗаказПередСозданием" Тогда
		
		Текст  = "Перед созданием документа по входящему заказу будет открыта 
		|форма незаписанного документа для редактирования.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаНеПоказыватьПровестиЗаказ" Тогда
		
		Текст  = "Станет возможно подтверждать непроведенные заказы.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаОграничениеДнейВыводаДокументовВСписке" Тогда
		
		Текст = "Если указать параметр, то во всех списках документов будет автоматически устанавливаться отбор по датам.
		|Если этот параметр не указан, то отборы устанавливаться не будут.";
		
	КонецЕсли;
	
	//ВывестиПредупреждение_КонтурEDI(Текст,,"Контур.EDI: Справка");
	
				СП = Новый СообщениеПользователю;
				СП.Текст = Текст;
				СП.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюПолейНастройкиПодключаемогоМодуля()
	
	Элементы.ПодключаемыйМодульРасположение.Видимость 	= ИспользоватьПодключаемыйМодуль;
	Элементы.ПодключаемыйМодульПуть.Видимость 			= (МестонахождениеПодключаемогоМодуля = "Диск");
	Элементы.ПредупреждениеСерверныйПуть.Видимость 		= (МестонахождениеПодключаемогоМодуля = "Диск");
	Элементы.ПодключаемыйМодульСсылка.Видимость 		= (МестонахождениеПодключаемогоМодуля = "1С");
	Элементы.ПодключаемыйМодульИмяОбработки.Видимость 	= (МестонахождениеПодключаемогоМодуля = "Конфигурация");
	
	//Если МестонахождениеПодключаемогоМодуля = "Диск" Тогда     //перенесено в элемент формы и условное оформление
	//	ТекстПредупреждения="Внимание! Если у вас клиент-серверная база то путь нужно указать серверный (т.е. ""с:\новая папка"" будет означать что это папка на диске С:\ сервера 1С)";
	//	Если Параметры.МодальностьЗапрещена Тогда 
	//		Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
	//	Иначе
	//		Предупреждение(ТекстПредупреждения,,"Контур.EDI");
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьФТПКаталог()
		Элементы.ПанельФТП.Видимость=(ПереключательFTP="FTP" или ПереключательFTP="DialMail");
		Элементы.ПанельКаталог.Видимость=(ПереключательFTP="Каталог");
		Элементы.ПанельAPI.Видимость=(ПереключательFTP="API");
		УстановитьВидимостьЭлементовПрокси();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовПрокси()

	ВидимостьЭлементов = (ПереключательFTP = "DialMail" или ПереключательFTP = "API");
	
	Элементы.НадписьУведомлениеПрокси.Видимость = Не ВидимостьЭлементов;
	Элементы.ИспользуетсяПрокси.Видимость		= ВидимостьЭлементов;
	
	ВидимостьЭлементов2 = ВидимостьЭлементов И (ИспользуетсяПрокси = Истина);
	Элементы.ПараметрыПрокси.Видимость=ВидимостьЭлементов2;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокТиповПрокси()
	
	ТипыПрокси = Новый СписокЗначений;
	
	//ТипыПрокси.Добавить(0, "Нет прокси - прямое соединение");
	ТипыПрокси.Добавить(1, "Socks5");
	ТипыПрокси.Добавить(2, "Socks4/4a");
	ТипыПрокси.Добавить(3, "HTTP-Tunnel");
	
	Возврат ТипыПрокси;
	
КонецФункции

&НаКлиенте
Процедура ИспользоватьПодключаемыйМодульПриИзменении(Элемент)
	УправлениеДоступностьюПолейНастройкиПодключаемогоМодуля();
КонецПроцедуры

&НаКлиенте
Процедура МестонахождениеПодключаемогоМодуляПриИзменении(Элемент)
	УправлениеДоступностьюПолейНастройкиПодключаемогоМодуля();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательFTPПриИзменении(Элемент)
	УстановитьВидимостьФТПКаталог();
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяПроксиПриИзменении(Элемент)
	УстановитьВидимостьЭлементовПрокси();
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяПрокси1ПриИзменении(Элемент)
	УстановитьВидимостьЭлементовПрокси();
КонецПроцедуры


&НаКлиенте
Процедура ДеревоНастроекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.ДеревоНастроек.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение" 
		И Элементы.ДеревоНастроек.ТекущиеДанные.ЭтоГруппа Тогда
		СтандартнаяОбработка=Ложь;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Функция ПроверкаНаКоллизиюПройдена(Отказ)
	
    Если Элементы.ДеревоНастроек.ТекущиеДанные=Неопределено Тогда возврат Отказ; КонецЕсли;
	
	Если Элементы.ДеревоНастроек.ТекущиеДанные.НастройкаИД="НеБратьАдресаПартнераИз1С" и Элементы.ДеревоНастроек.ТекущиеДанные.Значение=Истина Тогда
		Сообщить("Для Вашей конфигурации эта настройка не редактируется");
		Отказ=Истина;
	КонецЕсли;
	Если Элементы.ДеревоНастроек.ТекущиеДанные.НастройкаИД="НеБратьСвоиАдресаИз1С" и Элементы.ДеревоНастроек.ТекущиеДанные.Значение=Истина Тогда
		Сообщить("Для Вашей конфигурации эта настройка не редактируется");
		Отказ=Истина;
	КонецЕсли;
	
    Возврат не Отказ;
КонецФункции // ПроверкаНаКоллизиюПройдена()


&НаКлиенте
Процедура ДеревоНастроекПередНачаломИзменения(Элемент, Отказ)
	Отказ= Не ПроверкаНаКоллизиюПройдена(Отказ);
	Если Отказ тогда Возврат; КонецЕсли;
	
	Если Элементы.ДеревоНастроек.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение" 
		И Элементы.ДеревоНастроек.ТекущиеДанные.ЭтоГруппа Тогда
		Отказ=Истина;
	КонецЕсли;	
	
	Если Элементы.ДеревоНастроек.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение"  
		И ТипЗнч(Элементы.ДеревоНастроек.ТекущиеДанные.Значение)=Тип("Булево") Тогда
		Элемент.ТекущиеДанные.Значение = Не Элемент.ТекущиеДанные.Значение;
		Отказ=Истина;
	КонецЕсли;
	
	//фиксированные списки редактировать не дадим
	Если Элементы.ДеревоНастроек.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение"  
		И Элемент.ТекущиеДанные.ОписаниеТипа=Новый ОписаниеТипов("СписокЗначений") Тогда
		Отказ=Истина;
		ДеревоНастроекЗначениеНачалоВыбора(Элемент,Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекСтрока=Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Список) Тогда
		СтандартнаяОбработка=Ложь;
		СЗ=ЗначениеИзСтрокиВнутрСервер(ТекСтрока.Список);
		Выб=СЗ.ВыбратьЭлемент();
		Если Выб<>Неопределено Тогда
			ТекСтрока.Значение=Выб.Значение;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиВнутрСервер(Параметр1)
	Возврат ЗначениеИзСтрокиВнутр(Параметр1) 
КонецФункции

&НаКлиенте
Процедура ЗаписатьНастройки(Команда)

	СтруктураНастроек = СобратьСтруктуруНастроек();
	
	Отказ = Ложь;
	ЗаписатьНастройкиСервер(СтруктураНастроек,Отказ);
	
	Если Отказ=Истина Тогда
		//Предупреждение("Обнаружены некорректные настройки");
		Возврат;//не закрывать
	иначе
		Оповестить("КонтурEDI_НастроитьФорму");
		ЭтаФорма.Закрыть();
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Функция СобратьСтруктуруНастроек()
	
	СтруктураНастроек = Новый Структура;
	
	Если ПереключательFTP="Каталог" Тогда
		СтруктураНастроек.Вставить("АдресКаталогаОбменаEDI",	АдресКаталогаОбменаEDI);//-
	КонецЕсли;
	
    СтруктураНастроек.Вставить("ПротоколОбмена_КонтурEDI", 	ПереключательFTP);
	
	СтруктураНастроек.Вставить("Сервер", 			Сервер);
	СтруктураНастроек.Вставить("Порт", 				Порт);
	
	СтруктураНастроек.Вставить("ЛогинПрокси", 		ЛогинПрокси);
	СтруктураНастроек.Вставить("ПарольПрокси", 		ПарольПрокси);
 	СтруктураНастроек.Вставить("СерверПрокси",		СерверПрокси);
	СтруктураНастроек.Вставить("ПортПрокси",		ПортПрокси);
	
	СтруктураНастроек.Вставить("ПассивныйРежим", 		ПассивныйРежим);
	СтруктураНастроек.Вставить("ИспользуетсяПрокси",	ИспользуетсяПрокси);
	СтруктураНастроек.Вставить("ТипПрокси",				ТипПрокси);
	
	СтруктураНастроек.Вставить("СоздаваемыйДокументСклад",		СоздаваемыйДокументСклад);
	СтруктураНастроек.Вставить("ПодключаемыйМодульСсылка",		ПодключаемыйМодульСсылка);
	
	//СтруктураНастроек.Вставить("МыПоставщик",	МыПоставщик);
	//СтруктураНастроек.Вставить("НеПоказыватьФормуВходящегоЗаказа", НеПоказыватьФормуВходящегоЗаказаПриЗагрузке); //перенесено в партнера
	
	СтруктураНастроек.Вставить("НеПоказыватьПровестиЗаказ", 			НеПоказыватьПровестиЗаказ);
	СтруктураНастроек.Вставить("НеПоказыватьСоздатьРеализацию", 		НеПоказыватьСоздатьРеализацию);	
		
	//СтруктураНастроек.Вставить("ПроводитьЗагруженныеЗаказы", ПроводитьЗагруженныеЗаказы);   //перенесено в партнера
	СтруктураНастроек.Вставить("ГрузополучательИзЮрФизЛицаТД", (ГрузополучательИзЮрФизЛицаТД="Грузополучатель"));
	
	СтруктураНастроек.Вставить("ЛогинСлужебныйДиадок",		ЛогинСлужебныйДиадок);
	СтруктураНастроек.Вставить("ПарольСлужебныйДиадок",		ПарольСлужебныйДиадок);
	
	Если ЗначениеЗаполнено(СоздаваемыйДокументРСчет) Тогда
		СтруктураНастроек.Вставить("СоздаваемыйДокументРСчетВид",	ИмяМетаданныхРСчета(СоздаваемыйДокументРСчет));
		СтруктураНастроек.Вставить("СоздаваемыйДокументРСчетGUID", 	СокрЛП(СоздаваемыйДокументРСчет.УникальныйИдентификатор()));
	Иначе
		СтруктураНастроек.Вставить("СоздаваемыйДокументРСчетВид",	Неопределено);
		СтруктураНастроек.Вставить("СоздаваемыйДокументРСчетGUID", 	Неопределено);
	КонецЕсли;
		
	Если ИспользоватьПодключаемыйМодуль Тогда
		ПодключаемыйМодульТип = МестонахождениеПодключаемогоМодуля;
	Иначе
		ПодключаемыйМодульТип = "Нет";
	КонецЕсли;
	
	СтруктураНастроек.Вставить("ПодключаемыйМодульТип",  	ПодключаемыйМодульТип);
	СтруктураНастроек.Вставить("ПодключаемыйМодульПуть",	ПодключаемыйМодульПуть);
	
	Если ЗначениеЗаполнено(ПодключаемыйМодульСсылка) Тогда
		СтруктураНастроек.Вставить("ПодключаемыйМодульВидСправочника",	ПолучитьИмяМетаданныхПодключаемыйМодульВидСправочника(ПодключаемыйМодульСсылка));
		СтруктураНастроек.Вставить("ПодключаемыйМодульGUID",			СокрЛП(ПодключаемыйМодульСсылка.УникальныйИдентификатор()));
	КонецЕсли;
	
	СтруктураНастроек.Вставить("ПодключаемыйМодульИмяОбработки", 		ПодключаемыйМодульИмяОбработки);
	
	СтруктураНастроек.Вставить("ШаблонЦепочкиДокументов_Поставщик",		ИмяШаблонаПоставщик);
	СтруктураНастроек.Вставить("ШаблонЦепочкиДокументов_Покупатель",	ИмяШаблонаПокупатель);
			
	Возврат СтруктураНастроек;
	
КонецФункции

//некоторые настройки могут быть взаимозависимыми. Проверим их корректность.
&НаСервере
Процедура ПроверитьКорректностьНастроек(СтруктураПараметров,Отказ,РезультатПроверки)
	
	Отказ = Отказ Или НЕ МодульОбъекта().ПроверитьКорректностьОбщихНастроекПередЗаписью(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиСервер(СтруктураНастроек,Отказ)
	
	СписокСоздаваемыхДокументов = МодульОбъекта().ПолучитьВозможныеТипыСоздаваемыхДокументовПоВходящимЗаказам();

	СоздаваемыйДокументИзORDERSЗначение = "";
	
	Для Каждого ЭлементСписка ИЗ СписокСоздаваемыхДокументов Цикл
		Если СокрЛП(СоздаваемыйДокументИзORDERS) = СокрЛП(ЭлементСписка.Представление) Тогда
			СоздаваемыйДокументИзORDERSЗначение = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;		
	КонецЦикла;

	МодульОбъекта().ДобавитьСтрокиДереваВСтруктуру(РеквизитФормыВЗначение("ДеревоНастроек"),СтруктураНастроек);
	
	МодульОбъекта().ДобавитьСтрокиДереваВСтруктуру(РеквизитФормыВЗначение("ДеревоНастроекДокументовСообщений"),СтруктураНастроек);//конструкторские настройка
	
	РезультатПроверки="";
	
	ПроверитьКорректностьНастроек(СтруктураНастроек,Отказ,РезультатПроверки);
	Если Отказ = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Эл из СтруктураНастроек Цикл
		МодульОбъекта().УстановитьКонстантуEDI(Эл.Ключ, Эл.Значение);
	КонецЦикла;
	
	СохранитьНастройкиСертификатовПоУмолчанию();
	ПроверкаОтключенияСтатусныхСообщений();
	
	//перекэшировать модуль объекта!
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаОтключенияСтатусныхСообщений()
	
	//заодно проверим, можно ли отключить загрузку старых статусных сообщений по API
	Если (Не Параметры.ПереходСоСтаройРедакции) 
		И МодульОбъекта().ПротоколОбмена_КонтурEDI = "API" 
		И МодульОбъекта().ПолучитьКонстантуEDI("НеЗагружатьСтатусныеСообщения") <> Истина
		И МодульОбъекта().ПроверитьВозможностьОтключенияСтатусныхСообщений() 
		Тогда
		МодульОбъекта().УстановитьКонстантуEDI("НеЗагружатьСтатусныеСообщения",Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяМетаданныхПодключаемыйМодульВидСправочника(Ссылка)
	Возврат Ссылка.Метаданные().Имя;	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяМетаданныхРСчета(СоздаваемыйДокументРСчет)   //объединить с функцией выше
	Возврат СоздаваемыйДокументРСчет.Метаданные().Имя;
КонецФункции

 &НаСервере
Функция EDIПроверитьСуществованиеКаталога(ИмяКаталога)  //проверяем и предлагаем создать
	
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Попытка
			СоздатьКаталог(ИмяКаталога);
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СохранитьШаблонПМНаДиск(Команда)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.Заголовок		= "Укажите файл, в который нужно сохранить подключаемый модуль";
	ДиалогВыбора.Фильтр		= "Файл внешней обработки 1С (*.epf)|*.epf";      
	ДиалогВыбора.ПолноеИмяФайла = "КонтурEDI_ПМ.epf";
	
	Если ДиалогВыбора.Выбрать() Тогда      
		
		ПутьКФайлу = ДиалогВыбора.ПолноеИмяФайла;
		
	Иначе
		
		//ЭтаФорма.Закрыть();
		Возврат;
		
	КонецЕсли;
	
	СохранитьШаблонПМНаДискСервер(ПутьКФайлу);
	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьШаблонПМНаДискСервер(ПутьКФайлу)
	
	МодульОбъекта().ПолучитьМакет("ШаблонПодключаемогоМодуля").Записать(ПутьКФайлу);
	
	Если ПодключаемыйМодульПуть="" и не ЗначениеЗаполнено(ПодключаемыйМодульСсылка) Тогда 
		ПодключаемыйМодульПуть= ПутьКФайлу;
		МестонахождениеПодключаемогоМодуля="Диск";
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекДокументовСообщенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.ДеревоНастроекДокументовСообщений.ТекущийЭлемент.Имя = "ДеревоНастроекДокументовСообщенийЗначение" 
		И Элементы.ДеревоНастроекДокументовСообщений.ТекущиеДанные.ЭтоГруппа Тогда
		СтандартнаяОбработка=Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекДокументовСообщенийПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ДеревоНастроекДокументовСообщений.ТекущийЭлемент.Имя = "ДеревоНастроекДокументовСообщенийЗначение" 
		И Элементы.ДеревоНастроекДокументовСообщений.ТекущиеДанные.ЭтоГруппа Тогда
		Отказ=Истина;
	КонецЕсли;	
	
	Если Элементы.ДеревоНастроекДокументовСообщений.ТекущийЭлемент.Имя = "ДеревоНастроекДокументовСообщенийЗначение"  
		И ТипЗнч(Элементы.ДеревоНастроекДокументовСообщений.ТекущиеДанные.Значение)=Тип("Булево") Тогда
		Элемент.ТекущиеДанные.Значение = Не Элемент.ТекущиеДанные.Значение;
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяШаблонаПоставщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Список = ПолучитьСписокДоступныхШаблонов("Поставщик");
	ДопПараметры=Новый Структура("Режим","Поставщик");
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВыборИзСписка(Новый ОписаниеОповещения(""ОбработчикВыбораШаблонаПоставщикПокупатель"", ЭтаФорма,ДопПараметры), Список,Элемент,)");
	Иначе
		Выбранный = Список.ВыбратьЭлемент();
		ОбработчикВыбораШаблонаПоставщикПокупатель(Выбранный,ДопПараметры); 
	КонецЕсли;
	
	
	Если Выбранный<>Неопределено Тогда
		
		ИмяШаблонаПоставщик = Выбранный.Представление;
		ПерезаполнитьДеревоНастроекДокументовСообщений("Поставщик",Выбранный.Значение);
	КонецЕсли;
	
	КоллекцияЭлементовДерева=ДеревоНастроекДокументовСообщений.ПолучитьЭлементы();
    Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
        ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
        Элементы.ДеревоНастроекДокументовСообщений.Развернуть(ИдентификаторСтроки,ИСТИНА);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяШаблонаПокупательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Список = ПолучитьСписокДоступныхШаблонов("Покупатель");
	ДопПараметры=Новый Структура("Режим","Покупатель");
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВыборИзСписка(Новый ОписаниеОповещения(""ОбработчикВыбораШаблонаПоставщикПокупатель"", ЭтаФорма,ДопПараметры), Список,Элемент,)");
	Иначе
		Выбранный = Список.ВыбратьЭлемент();
		ОбработчикВыбораШаблонаПоставщикПокупатель(Выбранный,ДопПараметры); 
	КонецЕсли;
	
	
	Если Выбранный<>Неопределено Тогда
		
		ИмяШаблонаПокупатель = Выбранный.Представление;
		ПерезаполнитьДеревоНастроекДокументовСообщений("Покупатель",Выбранный.Значение);
	КонецЕсли;
	
	КоллекцияЭлементовДерева=ДеревоНастроекДокументовСообщений.ПолучитьЭлементы();
    Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
        ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
        Элементы.ДеревоНастроекДокументовСообщений.Развернуть(ИдентификаторСтроки,ИСТИНА);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораШаблонаПоставщикПокупатель(ВыбранноеЗначение,ДопПараметр) Экспорт
	Выбранный=ВыбранноеЗначение;
	Если Выбранный<>Неопределено Тогда
		
		Выполнить("ИмяШаблона"+ДопПараметр.Режим+" = Выбранный.Представление;");
		ПерезаполнитьДеревоНастроекДокументовСообщений(ДопПараметр.Режим,Выбранный.Значение);
	КонецЕсли;
	
	КоллекцияЭлементовДерева=ДеревоНастроекДокументовСообщений.ПолучитьЭлементы();
    Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
        ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
        Элементы.ДеревоНастроекДокументовСообщений.Развернуть(ИдентификаторСтроки,ИСТИНА);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДоступныхШаблонов(РежимРаботы)
	Если ВнешнийМодуль<>Неопределено
		И ВнешнийМодуль.Метаданные().Макеты.Найти("ШаблоныЗапросов")<>Неопределено Тогда
		//возьмем шаблоны из ПМ
		СКД = ВнешнийМодуль.ПолучитьМакет("ШаблоныЗапросов");
		_ИмяКонфигурации = "ПодключаемыйМодуль";
	Иначе	//используем стандартные шаблоны
		СКД = МодульОбъекта().ПолучитьМакет("ШаблоныЗапросов");
		_ИмяКонфигурации = МодульОбъекта().ПолучитьИмяКонфигурацииДляЗапроса();
	КонецЕсли;
	
	//вариант работы для поставщика и покупателя отдельно
	
	СКД_ВеткаКонфигурации = СКД.НаборыДанных[_ИмяКонфигурации];
	СКД_ВеткаЦепочек = СКД_ВеткаКонфигурации.Элементы[РежимРаботы].Элементы.ЗапросОсновнойЦепочки.Элементы;
	Список = Новый СписокЗначений;
	
	Для Каждого Эл Из СКД_ВеткаЦепочек Цикл
		Список.Добавить(Эл.Запрос,Эл.Имя);
	КонецЦикла;	
	
	Возврат Список;
	
КонецФункции	

&НаСервере
Процедура ПерезаполнитьДеревоНастроекДокументовСообщений(РежимРаботы,ТекстШаблона)
	
	Если РежимРаботы="Поставщик" Тогда
		МодульОбъекта().ШаблонЗапросаЦепочкиДокументов_Поставщик = ТекстШаблона;
	Иначе
		МодульОбъекта().ШаблонЗапросаЦепочкиДокументов_Покупатель = ТекстШаблона;
	КонецЕсли;	
	
	ТабСборки = МодульОбъекта().ПолучитьТаблицуДляСборкиЗапросов(РежимРаботы);
	МодульОбъекта().ЗаполнитьСоответствиеДокументовСообщений(РежимРаботы);
	Если РежимРаботы="Поставщик" Тогда
		МодульОбъекта().ПараметрыПользователяEDI.СоздаваемыйДокументИзORDERS = СтрЗаменить(МодульОбъекта().ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя"),"ДокументСсылка.","");
	КонецЕсли;	
	
	ЗаполнитьДеревоНастроекДокументовСообщений(РежимРаботы,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоказатьШаблонПоставщикаНажатие(Элемент)
	
	РежимРаботы = ?(Элемент.Имя = "НадписьПоказатьШаблонПоставщика","Поставщик","Покупатель");
	ИмяШаблона = ?(РежимРаботы = "Поставщик",ИмяШаблонаПоставщик,ИмяШаблонаПокупатель);
	ТД = СформироватьМакетСоответствийДокументовСообщений(РежимРаботы);
	ТД.Показать(РежимРаботы+": шаблон "+ИмяШаблона);
	
КонецПроцедуры

&НаСервере
Функция СформироватьМакетСоответствийДокументовСообщений(РежимРаботы)
	
	СтрокиТаблицыТипов = МодульОбъекта().ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",РежимРаботы));
	
	Макет = МодульОбъекта().ПолучитьМакет("ПечатьСоответствияДокументовСообщений");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ТД = Новый ТабличныйДокумент;
	ТД.Вывести(Макет.ПолучитьОбласть("Заголовок"));
	
	Для каждого Стр Из СтрокиТаблицыТипов Цикл
		ОбластьСтрока.Параметры.Направление = МодульОбъекта().ПолучитьНаправлениеСообщения(Стр.ТипСообщения,РежимРаботы);
		ОбластьСтрока.Параметры.ТипДокумента1С = СтрЗаменить(Стр.ИмяТипа,"ДокументСсылка.","");
		ОбластьСтрока.Параметры.ТипСообщения = Стр.ТипСообщения+" ("+МодульОбъекта().ПеревестиТипСообщения(Стр.ТипСообщения)+")";
		
		ТД.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ТД.ТолькоПросмотр = Истина;
	Возврат ТД;
	
КонецФункции	

&НаКлиенте
Процедура ПодключаемыйМодульПутьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Режим = РежимДиалогаВыбораФайла.Открытие;
    ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = "Внешняя обработка 1С:Предприятия 8 (*.epf)|*.epf";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
    ДиалогОткрытияФайла.Заголовок = "Выберите файл подключаемого модуля";
    Если ДиалогОткрытияФайла.Выбрать() Тогда
         ПодключаемыйМодульПуть = ДиалогОткрытияФайла.ПолноеИмяФайла;
    КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗакрытьЭтуФорму(Команда)
	Если ЭтаФорма.Открыта() Тогда 
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораШаблонаПоставщик(ВыбранноеЗначение,ДопПараметр=Неопределено) Экспорт
	Выбранный=ВыбранноеЗначение;
	Если Выбранный<>Неопределено Тогда
		
		ИмяШаблонаПоставщик = Выбранный.Представление;
		ПерезаполнитьДеревоНастроекДокументовСообщений("Поставщик",Выбранный.Значение);
	КонецЕсли;
	
	КоллекцияЭлементовДерева=ДеревоНастроекДокументовСообщений.ПолучитьЭлементы();
    Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
        ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
        Элементы.ДеревоНастроекДокументовСообщений.Развернуть(ИдентификаторСтроки,ИСТИНА);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СписокРасширенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры


&НаКлиенте
Процедура СписокРасширенияПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьРасширениеБиблиотека(Команда)
	
	Состояние("Открываю библиотеку ",75);
	
	ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("", );  //заготовка
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""ФормаРасширения_СписокУправляемая"", ПараметрыФормы,""ОбработчикПерезаполнитьРасширения"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("ФормаРасширения_СписокУправляемая",ПараметрыФормы,ЭтаФорма).ОткрытьМодально();
		ОбработчикПерезаполнитьРасширения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполнитьРасширения(Параметр1=Неопределено,ДопПараметр=Неопределено) Экспорт 
	
	ЗаполнитьИнформациюОРасширениях();	
	
КонецПроцедуры // ОбработчикПерезаполнитьРасширения()

&НаКлиенте
Процедура СписокРасширенияПередНачаломИзменения(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокРасширенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	Колонка = Поле;
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено или Колонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//запоминаем позицию курсора  
	Идентификатор = ТекСтрока.Идентификатор;
   	
	Если Колонка.Имя = "СписокРасширенияАктивация" Тогда
		//!! активируем/деактивируем расширения ПриАктивизацииЯчейки
		//
	ИначеЕсли Колонка.Имя = "СписокРасширенияНаименование" Тогда
		////изменяем настройку расширения
		//Если ВыбраннаяСтрока.НеОткрыватьИнтерфейс Тогда
		//	ВыбраннаяСтрока.НеОткрыватьИнтерфейс = Ложь; //сбрасываем после вкл./откл. расширения
		//Иначе
		//	РезультатОткрытия = ОткрытьИнтерфейсНастройкиРасширения(ВыбраннаяСтрока.Ссылка,ВыбраннаяСтрока.Интерфейс);
		//КонецЕсли;
		////восстанавливаем позицию курсора
		//ПозиционироватьНаСтрокуРасширения(Идентификатор);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
//включение/отключение 
Функция ВключитьРасширение(РасширениеСсылка,Значение)
	
	РезультатВключения = МодульОбъекта().УстановитьФлагИспользованиеРасширения(РасширениеСсылка,Значение);
	
	Возврат РезультатВключения;
	
КонецФункции


&НаКлиенте
Процедура СписокРасширенияПриАктивизацииЯчейки(Элемент)
	
	//сбросим голубизну(желтизну) в выделенни
	Элементы.СписокРасширения.ВыделенныеСтроки.Очистить();
	
	Если СтартоваяАктивизацияПереключателяПропущена И Элемент.ТекущийЭлемент.Имя="СписокРасширенияАктивация" Тогда 
		Состояние("Переключаю...");
		//активируем/деактивируем расширения
		ТекСтрока = Элемент.ТекущиеДанные;
		
		ТекСтрока.Использование = Не ТекСтрока.Использование;
		ТекСтрока.Иконка = ?(ТекСтрока.Иконка=1,0,1);
		РезультатВключения = ВключитьРасширение(ТекСтрока.Ссылка,ТекСтрока.Использование);
		Если Не РезультатВключения.Успешно Тогда
			ТекСтрока.Использование = Не ТекСтрока.Использование;
			ТекСтрока.Иконка = ?(ТекСтрока.Иконка=1,0,1);
			Сообщить("Не удалось " + ?(ТекСтрока.Использование, "выключить", "включить") + " расширение: """ + РезультатВключения.ОписаниеОшибки + """.");
		КонецЕсли;
		ТекСтрока.НеОткрыватьИнтерфейс = Истина; //не открываем интерфейс, когда позиционируемся на колонке наименование и срабатывает выбор строки
		
		Состояние(?(ТекСтрока.Использование=Истина,"Включено!","Выключено!"));
		//восстанавливаем позицию курсора
		ПозиционироватьНаСтрокуРасширения(ТекСтрока.ПолучитьИдентификатор());
	КонецЕсли;
		
	СтартоваяАктивизацияПереключателяПропущена=Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьРасширение(Команда)
	
	ТекущаяСтрока = Элементы.СписокРасширения.ТекущиеДанные;
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		Идентификатор = ТекущаяСтрока.Идентификатор;
		ОткрытьФормуРасширения(ТекущаяСтрока.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасширения(СсылкаРасширения)

 	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РасширениеСсылка",СсылкаРасширения);  
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""ФормаРасширения_ЭлементУправляемая"", ПараметрыФормы,""ОбработчикПерезаполнитьРасширения"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("ФормаРасширения_ЭлементУправляемая",ПараметрыФормы,ЭтаФорма).ОткрытьМодально();
		ОбработчикПерезаполнитьРасширения();
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуРасширения()

&НаКлиенте
Процедура УдалитьРасширение(Команда)
	
	ТекущаяСтрока = Элементы.СписокРасширения.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса ="Вы действительно хотите удалить расширение """ + ТекущаяСтрока.Наименование + """?";
	КнопкиВопроса=новый СписокЗначений;
	КнопкиВопроса.Добавить("Да, удалить");
	КнопкиВопроса.Добавить("Отмена");
	ДопПараметрДляПередачиВОбработчик=ТекущаяСтрока.Ссылка;
	РезультатВопроса = Неопределено;
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияУдаления"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
	Иначе
		РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
		ОбработчикСогласияУдаления(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработчикСогласияУдаления(РезультатВопроса,РасширениеСсылка=Неопределено) Экспорт

	Если РезультатВопроса = "Да, удалить" и РасширениеСсылка<>Неопределено Тогда
		РезультатУдаления = УдалитьРасширениеВызовСервера(РасширениеСсылка);
		Если Не РезультатУдаления.Успешно Тогда
			Состояние(РезультатУдаления.ОписаниеОшибки);
		КонецЕсли;
		ЗаполнитьИнформациюОРасширениях();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция УдалитьРасширениеВызовСервера(РасширениеСсылка)

	Возврат МодульОбъекта().УдалитьРасширение(РасширениеСсылка);

КонецФункции // УдалитьРасширениеВызовСервера()


&НаКлиенте
Процедура ПереместитьВверхРасширения(Команда)
	
	ТекущаяСтрока = Элементы.СписокРасширения.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТекСтр=ТекущаяСтрока.ПолучитьИдентификатор();
	
	ТекущаяСтрокаИндекс = СписокРасширения.Индекс(ТекущаяСтрока);
	
	ВерхняяСтрокаИндекс = ТекущаяСтрокаИндекс - 1;
	Попытка
		ВерхняяСтрока 		= СписокРасширения.Получить(ВерхняяСтрокаИндекс);
		Состояние("Меняю порядок выполнения...");
		
		ИдентификаторПредСтр=ВерхняяСтрока.ПолучитьИдентификатор();
		
		СменитьПорядокВыполненияРасширенийВызовСервера(ИдентификаторТекСтр,ИдентификаторПредСтр);
		
		Состояние("Готово!");
	Исключение
		//нет верхней строки
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВнизРасширения(Команда)
	
	ТекущаяСтрока = Элементы.СписокРасширения.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТекСтр=ТекущаяСтрока.ПолучитьИдентификатор();
	
	ТекущаяСтрокаИндекс = СписокРасширения.Индекс(ТекущаяСтрока);
	
	НижняяСтрокаИндекс = ТекущаяСтрокаИндекс + 1;
	Попытка
		НижняяСтрока 		= СписокРасширения.Получить(НижняяСтрокаИндекс);
		Состояние("Меняю порядок выполнения...");
		
		ИдентификаторСледСтр=НижняяСтрока.ПолучитьИдентификатор();
		
		СменитьПорядокВыполненияРасширенийВызовСервера(ИдентификаторСледСтр,ИдентификаторТекСтр);
		
		Состояние("Готово!");
	Исключение
		//нет нижней строки
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура  СменитьПорядокВыполненияРасширенийВызовСервера(ИдентификаторТекСтр,ИдентификаторПредСтр)
	
	МассивСтрокТЗ = Новый Массив;
	
	ПредСтрокаЭлементКоллекции = СписокРасширения.НайтиПоИдентификатору(ИдентификаторПредСтр);
	ТекСтрокаЭлементКоллекции  = СписокРасширения.НайтиПоИдентификатору(ИдентификаторТекСтр);
	
	ТЗРасширений=РеквизитФормыВЗначение("СписокРасширения");
	
	МассивСтрокТЗ.Добавить(ТЗРасширений.Найти(ПредСтрокаЭлементКоллекции.Идентификатор,"Идентификатор"));
	МассивСтрокТЗ.Добавить(ТЗРасширений.Найти(ТекСтрокаЭлементКоллекции.Идентификатор,"Идентификатор"));
	
	РасширенияДляСменыПорядка = ТЗРасширений.Скопировать(МассивСтрокТЗ,"Ссылка,ПорядокВыполнения");
	
	РезультатСменыПорядка = МодульОбъекта().СменитьПорядокВыполненияРасширений(РасширенияДляСменыПорядка);
	
	Если РезультатСменыПорядка.Успешно Тогда
		ЗаполнитьИнформациюОРасширениях();
	Иначе
		Сообщить("Не удалось изменить порядок выполнения расширений: """ + РезультатСменыПорядка.ОписаниеОшибки + """.");
	КонецЕсли;
	
КонецПроцедуры // СменитьПорядокВыполненияРасширенийВызовСервера()

&НаКлиенте
Процедура ДобавитьРасширениеВручную(Команда)
	СоздатьРасширение();		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасширение()
	
	ОткрытьФормуРасширения(Неопределено)

КонецПроцедуры

&НаКлиенте
Процедура НадписьРасширенияНедоступныПодсказкаНажатие(Элемент)
	
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Укажите файл, в который нужно сохранить обновление для вашей конфигурации";
	ДиалогОткрытияФайла.Фильтр			= "Файл конфигурации 1С (*.cf)|*.cf";      
	ДиалогОткрытияФайла.ПолноеИмяФайла = "КонтурEDI_upd.cf";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		АдресДляСохраненияФайла = ДиалогОткрытияФайла.ПолноеИмяФайла;
		Состояние("Сохраняю файл обновления");
		ДвоичныеДанные=ПолучитьДвоичныеДанныеФайлаОбновленияКонфигурацииВызовСервера();
		
		Если ДвоичныеДанные<>Неопределено Тогда 
			ДвоичныеДанные.Записать(АдресДляСохраненияФайла);
			Состояние("Сохранен");
		Иначе
			Сообщить("Не удалось сохранить файл");
			Состояние("Ошибка сохранения");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДвоичныеДанныеФайлаОбновленияКонфигурацииВызовСервера()
	Возврат МодульОбъекта().ДвоичныеДанныеФайлаОбновленияКонфигурацииСервер();	
КонецФункции

//сертификаты
&НаСервере
Процедура ЗаполнитьНазначенныеСертификаты()
	
	СертификатыПоУмолчанию = МодульОбъекта().ПолучитьТаблицуСохраненныхСертификатов(, Истина);
	ЗначениеВРеквизитФормы(СертификатыПоУмолчанию, "СписокНазначенныхСертификатов");	
	
КонецПроцедуры // ЗаполнитьНазначенныеСертификаты()

&НаКлиенте
Процедура СписокСертификатовПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСертификатыПоУмолчаниюКлиент()
	
	//Сходить за текущими сертами
	МассивСертификатов = ОсновнаяФорма().МодульОбменКлиент().МассивСертификатов(Ложь);
	
	Если МассивСертификатов.Количество()=0 Тогда
		Элементы.СертификатыОргнизацийПоУмолчанию.Заголовок="Не установлен CAPICOM или список сертификатов пуст!";
		Элементы.СтраницаЭДО.Заголовок="ЭДО (Диадок) (!)";
		Возврат;
	КонецЕсли;
	
	Для Каждого НазначенныйОтпечаток Из СписокНазначенныхСертификатов Цикл
		НоваяСтрокаСертификата = СписокСертификатов.Добавить();
		НоваяСтрокаСертификата.Организация = НазначенныйОтпечаток.Организация;
		
		Для каждого СуществующийСертификат Из МассивСертификатов Цикл
			Если СуществующийСертификат.Отпечаток = НазначенныйОтпечаток.Отпечаток Тогда 
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСертификата, СуществующийСертификат);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НоваяСтрокаСертификата.ОкончаниеПериодаДействия) Тогда
			НоваяСтрокаСертификата.ОсталосьДней = РассчитатьОсталосьДнейДействияСертификата(НоваяСтрокаСертификата.ОкончаниеПериодаДействия);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция РассчитатьОсталосьДнейДействияСертификата(ОкончаниеПериодаДействия)

	Возврат Окр((НачалоДня(ОкончаниеПериодаДействия) - НачалоДня(ТекущаяДата())) / (60*60*24));	

КонецФункции // РассчитатьОсталосьДней()

&НаКлиенте
Процедура ИзменитьСертификатПоУмолчанию(Команда)
	
	// Предложим выбрать сертификат через специальную форму
	Состояние("Подготовка выбора сертификатов...",0);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	ПараметрыФормы.Вставить("Организация", Элементы.СписокСертификатов.ТекущиеДанные.Организация);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Действие", 				"ВыборСертификата");
	ДопПараметры.Вставить("ФинальныйОбработчик", 	"Оповестить_КонтурEDI_ПроверкаСертификата");
	ДопПараметры.Вставить("ЗапомнитьВыбор", 		Ложь);
	ДопПараметры.Вставить("НомерПопытки", 			1);
	ДопПараметры.Вставить("Успешно", 				Ложь);
	ДопПараметры.Вставить("ОписаниеОшибки", 		"");
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам+""Сертификаты_СписокУправляемая"",ПараметрыФормы,""ОбработчикВыбораСертификата"",ДопПараметры,МодульОбменКлиент())");
	Иначе
		ВыбранноеЗначение=ПолучитьФормуОбработки("Сертификаты_СписокУправляемая",ПараметрыФормы,ЭтаФорма).ОткрытьМодально();
		МодульОбменКлиент().ОбработчикВыбораСертификата(ВыбранноеЗначение, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельНастроекПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя="СтраницаЭДО" И СписокСертификатов.Количество()=0 Тогда 
		
		Состояние("Строю список сертификатов");
		//Узнаем сертификаты
		ЗаполнитьСертификатыПоУмолчаниюКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Если ЭтаФорма.ВладелецФормы = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ЭтаФорма.ВладелецФормы.ОсновнаяФорма();
	КонецЕсли;
    	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиСертификатовПоУмолчанию()

	ТаблицаСертификатов = СписокСертификатов.Выгрузить(,"Организация, Отпечаток, ОкончаниеПериодаДействия");
	
	МодульОбъекта().СохранитьСертификатыПоУмолчанию(ТаблицаСертификатов);

КонецПроцедуры // СозранитьНастройкиСертификатовПоУмолчанию()

&НаКлиенте
Процедура ОчиститьСертификатПоУмолчаниюПоОрганизации(Команда)
	
	ТекСтрока = Элементы.СписокСертификатов.ТекущиеДанные;
	ТекСтрока.НаименованиеОрганизацииСубъекта	= "";
	ТекСтрока.НаименованиеСубъекта				= "";
	ТекСтрока.НаименованиеУдостоверяющегоЦентра	= "";
	ТекСтрока.Отпечаток							= "";
	ТекСтрока.НачалоПериодаДействия				= Дата(1,1,1);
	ТекСтрока.ОкончаниеПериодаДействия			= Дата(1,1,1);
	ТекСтрока.Расположение						= "";
	ТекСтрока.РасположениеПользовательское		= "";
	ТекСтрока.ОсталосьДней						= 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИзменитьСертификатПоУмолчанию("Заглушка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КонтурEDI_ПроверкаСертификата" Тогда
		
		Если Параметр.Успешно = Истина Тогда
			ТекДанные = Элементы.СписокСертификатов.ТекущиеДанные;
			ЗаполнитьЗначенияСвойств(ТекДанные, Параметр.РеквизитыСертификата);
			ТекДанные.ОсталосьДней = РассчитатьОсталосьДнейДействияСертификата(ТекДанные.ОкончаниеПериодаДействия);
		Иначе
			Сообщить(Параметр.ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры




