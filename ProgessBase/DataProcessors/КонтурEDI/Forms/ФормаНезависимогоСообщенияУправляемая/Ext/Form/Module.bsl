&НаСервере
Перем ОбработкаОбъект;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МодальностьЗапрещена = МодульОбъекта().МодальностьЗапрещена();
	ПутьКФормам = МодульОбъекта().Метаданные().ПолноеИмя() + ".Форма.";
	
	ТипСообщения 	= Параметры.ТипСообщения;
	Направление 	= Параметры.Направление;
	
	Если ЗначениеЗаполнено(Параметры.ПереотправляемоеСообщениеСсылка) Тогда
		ПереотправляемоеСообщениеСсылка = Параметры.ПереотправляемоеСообщениеСсылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.СообщениеСсылка) Тогда
		СообщениеСсылка = Параметры.СообщениеСсылка;
		Сообщение = МодульОбъекта().ПрочитатьСообщение(СообщениеСсылка, , ТипСообщения, Направление);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сообщение) Тогда
		Сообщение = Новый Структура; //заглушка
	КонецЕсли;
	
	ТолькоПросмотрСообщения = (Параметры.ТолькоПросмотр = Истина);
	
	СторонаЮрФизЛицаПартнера = МодульОбъекта().ОпределитьСторонуЮрФизЛица(ТипСообщения, Направление, Истина);
	СторонаЮрФизЛицаОрганизации = МодульОбъекта().ОпределитьСторонуЮрФизЛица(ТипСообщения, Направление, Ложь);
	
	НастройкаФормы = МодульОбъекта().ПолучитьНастройкиФормыНезависимогоСообщения(ТипСообщения, Направление);
	ВыполнитьНастройкиФормы();
	

	Если ЗначениеЗаполнено(Сообщение) Тогда
		
		ЗаполнитьПоляНаФорме();
		ПредставлениеПолучателя = МодульОбъекта().ПолучитьПредставлениеЭлементаСправочника(Получатель);
		
		//почистить все ТЗ сообщения, т.к. их не получится передать на клиент. (передали в данных формы)
		Сообщение.Товары = Неопределено;
	Иначе
		
		ЗаполнитьПоляНаФормеЗначениямиПоУмолчанию();
		
	КонецЕсли;

	Если ТаблицаОшибок.Количество() > 0 Тогда
		ОткрытьПанельОшибок();
	Иначе
		ЗакрытьПанельОшибок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНастройкиФормы()

	ЗаполнитьСпискиВыбораПолей();
	ЗаполнитьСпискиВыбораКолонок();
  	УстановитьДоступностьЭлементов();
    УстановитьВидимостьЭлементов();
	УстановитьТипыПолей1С();
	УстановитьНадписиЭлементов();
	
	ЭтаФорма.Заголовок = НастройкаФормы.Заголовок + " (" + ТипСообщения + ")";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораПолей()
	
	СпискиВыбораПолей = НастройкаФормы.СпискиВыбораПолей;
	
	Для каждого ТекСписок Из СпискиВыбораПолей Цикл
	    ЗаполнитьСписокВыбораЭлемента(Элементы[ТекСписок.Ключ], ТекСписок.Значение);
	КонецЦикла;
	
	СписокЮрФизЛицСвоих = Новый СписокЗначений;
	СписокЮрФизЛицСвоих.ЗагрузитьЗначения(МодульОбъекта().ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСвои").ВыгрузитьКолонку("ЮрФизЛицо"));
	
	ЗаполнитьСписокВыбораЭлемента(Элементы.Отправитель, СписокЮрФизЛицСвоих);
	ЗаполнитьСписокВыбораЭлемента(Элементы[СторонаЮрФизЛицаОрганизации], СписокЮрФизЛицСвоих);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораКолонок()
	
	СпискиВыбораКолонок = НастройкаФормы.СпискиВыбораКолонок;
	
	Для каждого ТекСписок Из СпискиВыбораКолонок Цикл
	    ЗаполнитьСписокВыбораЭлемента(Элементы["Товары" + ТекСписок.Ключ], ТекСписок.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораЭлемента(Элемент, Список)
	
	Элемент.СписокВыбора.Очистить();
	
	Для каждого Эл Из Список Цикл
		Элемент.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	// только просмотр	
	
	Элементы.Отправитель.ТолькоПросмотр 				= ТолькоПросмотрСообщения;
	Элементы.ПредставлениеПолучателя.ТолькоПросмотр  	= ТолькоПросмотрСообщения;
	Элементы.Покупатель.ТолькоПросмотр  				= ТолькоПросмотрСообщения;
	Элементы.Продавец.ТолькоПросмотр  					= ТолькоПросмотрСообщения;
	Элементы.ТипЦен.ТолькоПросмотр		 				= ТолькоПросмотрСообщения;
	Элементы.СтатусТовараПоУмолчанию.ТолькоПросмотр		= ТолькоПросмотрСообщения;
	Элементы.Товары.ТолькоПросмотр		 				= ТолькоПросмотрСообщения;
	Элементы.ДатаНачалаПериода.ТолькоПросмотр      		= ТолькоПросмотрСообщения;
	Элементы.ДатаОкончанияПериода.ТолькоПросмотр   		= ТолькоПросмотрСообщения;
	Элементы.НомерДоговора.ТолькоПросмотр              	= ТолькоПросмотрСообщения;
	Элементы.ДатаДоговора.ТолькоПросмотр               	= ТолькоПросмотрСообщения;
	Элементы.ДатаИнвентаризации.ТолькоПросмотр      	= ТолькоПросмотрСообщения;
	Элементы.Валюта.ТолькоПросмотр     		 			= ТолькоПросмотрСообщения;
	
	// доступность
	
	Элементы.Товары.КоманднаяПанель.Доступность = Не ТолькоПросмотрСообщения;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	// кнопки
	
	Если ТипСообщения <> "PRICELIST" Тогда
		Элементы.КакиеТоварыНеПопадутВТаблицу.Видимость = Ложь;
		Элементы.ПодменюДобавить.Видимость = Ложь;
		Элементы.НомерПрайсЛиста.Видимость = Ложь;
	КонецЕсли;
	
	Если ТолькоПросмотрСообщения Тогда
		Элементы.ФормаОтправить.Видимость = Ложь;
	КонецЕсли;
	
	// видимость полей
	
	НевидимыеПоля = НастройкаФормы.НевидимыеПоля;
	
	Для каждого ИмяПоля Из НевидимыеПоля Цикл
		СделатьНевидимымЭлементФормы(ИмяПоля);	
	КонецЦикла;
	
	// видимость колонок товаров
	
	НевидимыеКолонки = НастройкаФормы.НевидимыеКолонки;
	
	Для каждого ИмяКолонки Из НевидимыеКолонки Цикл
		СделатьНевидимойКолонкуТоваров(ИмяКолонки);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СделатьНевидимымЭлементФормы(ИмяЭлементаФормы)
	
	НайденныйЭлемент = Элементы.Найти(ИмяЭлементаФормы);
	
	Если НайденныйЭлемент <> Неопределено Тогда
		НайденныйЭлемент.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СделатьНевидимойКолонкуТоваров(ИмяКолонки)
	
	НайденныйЭлемент = Элементы.Найти("Товары" + ИмяКолонки);
	
	Если НайденныйЭлемент <> Неопределено Тогда
		НайденныйЭлемент.Видимость		= Ложь;
		НайденныйЭлемент.Доступность	= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипыПолей1С()
	
	ТипТипыЦен 				= МодульОбъекта().ПолучитьТипЗначенияОбъекта("ТипыЦен");
	ТипВалюта 				= МодульОбъекта().ПолучитьТипЗначенияОбъекта("Валюта");
	ТипЮрФизЛицоСвое 		= МодульОбъекта().ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое");
    ТипЮрФизЛицоСтороннее	= МодульОбъекта().ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее");
	
	Если ЗначениеЗаполнено(ТипТипыЦен) Тогда
		
		Элементы.ТипЦен.ОграничениеТипа = Новый ОписаниеТипов(ТипТипыЦен);
		ТипЦен = МодульОбъекта().ПолучитьПустуюСсылкуОбъекта("ТипыЦен");
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипВалюта) Тогда
		
		Элементы.Валюта.ОграничениеТипа = Новый ОписаниеТипов(ТипВалюта);
		Валюта = МодульОбъекта().ПолучитьПустуюСсылкуОбъекта("Валюта");
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипЮрФизЛицоСвое) Тогда
		
		Элементы.Отправитель.ОграничениеТипа = Новый ОписаниеТипов(ТипЮрФизЛицоСвое);
		Элементы[СторонаЮрФизЛицаОрганизации].ОграничениеТипа = Новый ОписаниеТипов(ТипЮрФизЛицоСвое);

		ПустаяСсылкаЮрФизЛицоСвое = МодульОбъекта().ПолучитьПустуюСсылкуОбъекта("ЮрФизЛицоСвое");
		Отправитель = ПустаяСсылкаЮрФизЛицоСвое;
		ЭтаФорма[СторонаЮрФизЛицаОрганизации] = ПустаяСсылкаЮрФизЛицоСвое;
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипЮрФизЛицоСтороннее) Тогда
		
		Элементы[СторонаЮрФизЛицаПартнера].ОграничениеТипа = Новый ОписаниеТипов(ТипЮрФизЛицоСтороннее);

		ПустаяСсылкаЮрФизЛицоСтороннее = МодульОбъекта().ПолучитьПустуюСсылкуОбъекта("ЮрФизЛицоСтороннее");
		ЭтаФорма[СторонаЮрФизЛицаПартнера] = ПустаяСсылкаЮрФизЛицоСтороннее;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписиЭлементов()
	
	Если ТипСообщения = "PRICELIST" Тогда
		
		Элементы.ДатаНачалаПериода.Заголовок = "Дата начала действия цен";
		Элементы.ДатаОкончанияПериода.Заголовок = "Дата окончания действия цен";
		
	ИначеЕсли ТипСообщения = "SLSRPT" ИЛИ ТипСообщения = "INVRPT" Тогда
		
		Элементы.Отправитель.Заголовок = "Отправитель отчета";
		Элементы.ПредставлениеПолучателя.Заголовок = "Партнер";
		Элементы.Покупатель.Заголовок = "Отчитывающаяся сторона";
		Элементы.Продавец.Заголовок = "Получатель отчета";
		
		Элементы.ДатаНачалаПериода.Заголовок = "Начало периода отчета";
		Элементы.ДатаОкончанияПериода.Заголовок = "Окончание периода отчета";
		Элементы.Валюта.Заголовок = "Валюта отчета";
		
	КонецЕсли;
	
	Если ТипСообщения = "SLSRPT" Тогда	
		Элементы.ТипЦен.Заголовок = "Тип цен закупки";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПереотправляемоеСообщениеСсылка)
		И НЕ ТолькоПросмотрСообщения Тогда
		Элементы.ФормаОтправить.Заголовок = "Переотправить сообщение"; 
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЮрФизЛицПартнера(Получатель)

   	СписокЮрФизЛицПартнера = ПолучитьСписокЮрФизЛицПартнера(Получатель);
	ЗаполнитьСписокВыбораЭлемента(Элементы[СторонаЮрФизЛицаПартнера], СписокЮрФизЛицПартнера);	
	
КонецПроцедуры

//инициализация -----------------------------------------------------------------------

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
		
		//Если Параметры.АдресХранилища<>"" Тогда
		//	ОбработкаОбъект = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
		//	Возврат ОбработкаОбъект;
		//КонецЕсли;
		//
		//Если ОбработкаОбъект=Неопределено Тогда
		//	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		//	ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
		//КонецЕсли;
		//
		//Параметры.АдресХранилища = ПоместитьВоВременноеХранилище(ОбработкаОбъект,УникальныйИдентификатор);
	
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Процедура ОбновитьНомераСтрок()
	
	НомСтр = 1;
	
	Для Каждого Стр Из Товары Цикл
		Стр.НомерСтроки = НомСтр;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНомераСтрокКлиент()
	
	НомСтр = 1;
	
	Для Каждого Стр Из Товары Цикл
		Стр.НомерСтроки = НомСтр;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяСправочникаТипыЦен()
	
	ИмяСправочникаТипыЦен = МодульОбъекта().ПолучитьТипЗначенияОбъекта("ТипыЦен",,Истина);
	
	Возврат ИмяСправочникаТипыЦен;
	
КонецФункции

//получение и вывод данных ----------------------------------------------------------------

//у нас есть готовое сообщение - нужно распихать его по форме.
//по сути это обратная процедура для: ОтправитьСервер()
&НаСервере
Процедура ЗаполнитьПоляНаФорме()

	//заголовок
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " № " + Сообщение.ДокументEDI.Номер + " от " + Формат(Сообщение.ДокументEDI.Дата, "ДЛФ=Д");
	
	//шапка
	Отправитель = Сообщение.Отправитель1С;
	
	Если ЗначениеЗаполнено(Сообщение.Получатель1С) Тогда
		Получатель = Сообщение.Получатель1С;
	Иначе
		Получатель = Сообщение.Партнер;
	КонецЕсли;
	
	ЗаполнитьСписокЮрФизЛицПартнера(Получатель);
	
	Продавец 	= Сообщение.Продавец1С;
	Покупатель 	= Сообщение.Покупатель1С;
	
	Если ТипСообщения = "PRICELIST" Тогда
		ДатаНачалаПериода		= Сообщение.ДатаНачалаДействияЦен;
		ДатаОкончанияПериода 	= Сообщение.ДатаОкончанияДействияЦен;
		НомерПрайсЛиста 		= Сообщение.ДокументEDI.Номер;
		
	ИначеЕсли ТипСообщения = "SLSRPT" 
		ИЛИ ТипСообщения = "INVRPT" Тогда
		ДатаНачалаПериода		= Сообщение.ДатаНачалаПериодаОтчета;
		ДатаОкончанияПериода 	= Сообщение.ДатаОкончанияПериодаОтчета;
	
	КонецЕсли;
	
	Если ТипСообщения = "INVRPT" Тогда
		ДатаИнвентаризации		= Сообщение.ДатаИнвентаризации;
		
	КонецЕсли;
	
	Валюта = Сообщение.Валюта1С;
	
	Если ЗначениеЗаполнено(Сообщение.Контракт.Номер) Тогда 
		НомерДоговора 	= Сообщение.Контракт.Номер;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Сообщение.Контракт.Дата) Тогда 
		ДатаДоговора 	= Сообщение.Контракт.Дата;
	КонецЕсли;	
	
	Если Сообщение.Свойство("ТипЦен") Тогда //для совместимости со старыми сообщениями
		ТипЦен = Сообщение.ТипЦен;
	КонецЕсли;
	
	// товары
	Для Каждого Строка Из Сообщение.Товары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
	ОбновитьНомераСтрок();
	
	//описание ошибки
	Если ЗначениеЗаполнено(ПереотправляемоеСообщениеСсылка)
		И ЗначениеЗаполнено(Сообщение.СообщениеСсылка.ОписаниеОшибки) Тогда
		СообщениеСсылка = Сообщение.СообщениеСсылка;
		ОписаниеОшибки = СообщениеСсылка.ОписаниеОшибки;
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоляНаФорме()

&НаСервере
Процедура ЗаполнитьПоляНаФормеЗначениямиПоУмолчанию()
	
	Если МодульОбъекта().ИмяКОнфигурации1С = "УФ_УНФ" Тогда
		Валюта = Константы.ВалютаУчета.Получить();
	Иначе
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Если Элементы.Отправитель.СписокВыбора.Количество() = 1 Тогда
		Отправитель = Элементы.Отправитель.СписокВыбора.Получить(0).Значение;
		ЭтаФорма[СторонаЮрФизЛицаОрганизации] = Отправитель;
	КонецЕсли;
	
	Если ТипСообщения = "PRICELIST" Тогда
		СтатусТовараПоУмолчанию = Элементы.СтатусТовараПоУмолчанию.СписокВыбора.НайтиПоЗначению("Changed").Значение;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьПанельОшибок()
	
	Элементы.ГруппаОшибки.Видимость = истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьПанельОшибок()
	
	Элементы.ГруппаОшибки.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельОшибокКлиент()
	
	Элементы.ГруппаОшибки.Видимость = истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельОшибокКлиент()
	
	Элементы.ГруппаОшибки.Видимость = Ложь;
	
КонецПроцедуры

//кнопки нижней командной панели ----------------------------------------------------------
&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	
	Если НЕ (ПроверитьЗаполнениеШапки().Успешно 
		И ПроверитьЗаполнениеТаблицыТоваров().Успешно) Тогда
		ОткрытьПанельОшибок();
		Возврат;
	КонецЕсли;
	
	ОтправитьСообщениеСервер();
	
	Закрыть();	
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщениеСервер()
	
	ТоварыКопия = РеквизитФормыВЗначение("Товары");
	СтруктураПараметры = ПолучитьПараметрыДляПодготовкиСообщения(ТипСообщения);
	МодульОбъекта().ОтправитьНезависимоеСообщение(ТипСообщения, ТоварыКопия, СтруктураПараметры);
	
КонецПроцедуры // Отправить()

//кнопки верхней командной панели ---------------------------------------------------------

&НаКлиенте
Процедура ДобавитьЭлемент(Команда)
	
	Если Не ПроверитьЗаполнениеШапки().Успешно Тогда
		ОткрытьПанельОшибокКлиент();		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипЦен) Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Признак", "ОдинИлиГруппаТоваров");
		ДопПараметры.Вставить("Команда", Команда);
		ЗадатьВопросПроЗаполнениеТипаЦен(ДопПараметры);
	Иначе
		ВыбратьОдинИлиГруппуТоваров(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПроЗаполнениеТипаЦен(ДопПараметры = Неопределено)
	
	ТекстВопроса = "Не выбран тип цен. Заполнить товар(ы) без цен?";
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Да, заполнить без цен");
	КнопкиВопроса.Добавить("Выбрать тип цен");
	КнопкиВопроса.Добавить("Отмена");
	РезультатВопроса = Неопределено;
	
	Если МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияЗаполненияТоваровБезЦен"", ЭтаФорма, ДопПараметры), ТекстВопроса, КнопкиВопроса,,""Да, заполнить без цен"",""Контур.EDI. Заполнение типа цен"")");
	Иначе
		РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,"Да, заполнить без цен","Контур.EDI. Заполнение типа цен");
		ОбработчикСогласияЗаполненияТоваровБезЦен(РезультатВопроса, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОдинИлиГруппуТоваров(Команда)
	
	ВыбратьГруппу = (Команда.Имя = "ДобавитьГруппу");
	
	ПараметрыФормыВыбораНоменклатуры = Новый Структура;
	
	Если ВыбратьГруппу Тогда 
		ПараметрыФормыВыбораНоменклатуры.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Группы);
	иначе //элемент
		ПараметрыФормыВыбораНоменклатуры.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		ПараметрыФормыВыбораНоменклатуры.Вставить("РежимВыбора",Истина);
	КонецЕсли;
	
	ИмяФормыВыбора=?(ВыбратьГруппу,"Справочник.Номенклатура.ФормаВыбораГруппы","Справочник.Номенклатура.ФормаВыбора");
	
	Если МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ИмяФормыВыбора, ПараметрыФормыВыбораНоменклатуры,""ОбработчикПодбораНоменклатуры"")");//,ДополнительныеПараметры);
	Иначе
		ВыбранаяНоменклатура=ПолучитьФорму(ИмяФормыВыбора,ПараметрыФормыВыбораНоменклатуры).ОткрытьМодально();
		ОбработчикПодбораНоменклатуры(ВыбранаяНоменклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПодбораНоменклатуры(ВыбранаяНоменклатура, ДопПараметр = Неопределено) Экспорт
	
	//один и тот же на элемент и группу
	Если ВыбранаяНоменклатура <> Неопределено Тогда
		СтруктураДопПараметры = Новый Структура("Номенклатура", ВыбранаяНоменклатура);
		ЗаполнитьТоварыКлиент(ТипСообщения, СтруктураДопПараметры);
	КонецЕсли;

КонецПроцедуры // ОбработчикПодбораНоменклатуры()

&НаКлиенте
Процедура ОбработчикВыбораТипаЦен(Значение, ДопПараметрПереданныйВОбработчик = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Значение) Тогда 
		ТипЦен = Значение;
		ТипЦенОбработкаВыбораСервер(Значение);
		Если ДопПараметрПереданныйВОбработчик.Признак = "ОдинИлиГруппаТоваров" Тогда
			ВыбратьОдинИлиГруппуТоваров(ДопПараметрПереданныйВОбработчик.Команда);
		ИначеЕсли ДопПараметрПереданныйВОбработчик.Признак = "ВсеТовары" Тогда
			ЗаполнитьТоварыКлиент(ТипСообщения);
		КонецЕсли;
	Иначе
		//Пользователь не выбрал элемент справочника
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Для заполнения цены товара(ов) необходимо выбрать тип цен";
		ОткрытьПанельОшибокКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСогласияПерезаполненияТЧ(РезультатВопроса,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	
	Если РезультатВопроса = "Да, перезаполнить" Тогда 
		ОбработчикСогласияЗаполнения();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСогласияЗаполнения()
	
	Если Не ЗначениеЗаполнено(ТипЦен) Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Признак", "ВсеТовары");
		ЗадатьВопросПроЗаполнениеТипаЦен(ДопПараметры);
	Иначе
		ЗаполнитьТоварыКлиент(ТипСообщения);
	КонецЕсли;

КонецПроцедуры // ОбработчикСогласияЗаполнения()

&НаКлиенте
Процедура ОбработчикСогласияЗаполненияТоваровБезЦен(РезультатВопроса,ДопПараметрПереданныйВОбработчик = Неопределено) Экспорт
	
	Если РезультатВопроса = "Выбрать тип цен" Тогда
		
		ИмяСправочникаТипыЦен = ПолучитьИмяСправочникаТипыЦен();
		Если Не ЗначениеЗаполнено(ИмяСправочникаТипыЦен) Тогда
			//Не смогли определить тип справочника
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ОписаниеОшибки = "Для заполнения цены товара(ов) необходимо выбрать тип цен."
										+ Символы.ПС + "Не определено имя справочника ""Типы цен"" в таблице типов";
			ОткрытьПанельОшибокКлиент();
		Иначе	
			ИмяФормыВыбора = "Справочник." + ИмяСправочникаТипыЦен + ".ФормаВыбора";
			Если МодальностьЗапрещена Тогда 
				Выполнить("ОткрытьФормуОбъектаМодально(ИмяФормыВыбора,,""ОбработчикВыбораТипаЦен"",ДопПараметрПереданныйВОбработчик)");//,ДополнительныеПараметры);
			Иначе
				ВыбранныйТипЦен = ПолучитьФорму(ИмяФормыВыбора).ОткрытьМодально();
				ОбработчикВыбораТипаЦен(ВыбранныйТипЦен, ДопПараметрПереданныйВОбработчик);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = "Да, заполнить без цен" Тогда
		
		Если ДопПараметрПереданныйВОбработчик.Признак = "ОдинИлиГруппаТоваров" Тогда
			ВыбратьОдинИлиГруппуТоваров(ДопПараметрПереданныйВОбработчик.Команда);
		ИначеЕсли ДопПараметрПереданныйВОбработчик.Признак = "ВсеТовары" Тогда
			ЗаполнитьТоварыКлиент(ТипСообщения);
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуТовары(Команда)
	
	Если Товары.Количество() <> 0 Тогда
	
		ТекстВопроса = "Данные таблицы товаров будут очищены. Продолжить?";
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("Да, очистить");
		КнопкиВопроса.Добавить("Нет, НЕ очищать");
		ДопПараметрДляПередачиВОбработчик = Неопределено;
		РезультатВопроса = Неопределено;
		
		Если МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикОчиститьТЧ"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
		Иначе
			РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
			ОбработчикОчиститьТЧ(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
		
	Иначе
		//нечего очищать
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОчиститьТЧ(РезультатВопроса,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	
	Если  РезультатВопроса = "Да, очистить" Тогда 
		Товары.Очистить();
		ПроверитьТаблицуТоваров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КакиеТоварыНеПопадутВТаблицуКнопка(Команда)
	
	ТекстПодсказки = "При стандартном заполнении не будут добавлены товары:
					|
					| - которые помечены на удаление;
					| - с нулевой ценой для выбранного типа цен;
					| - которые по виду номенклатуры относятся к услугам.
					|
					|Для разработки своего алгоритма заполнения товаров можно
					|воспользоваться событием ""ПолучитьТоварыДляНезависимогоСообщения"" 
					|подключаемого модуля или расширения.";
					
	Если МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьПредупреждение(,ТекстПодсказки,,""Какие товары не попадут в таблицу?"")");
	Иначе
		Предупреждение(ТекстПодсказки,,"Какие товары не попадут в таблицу?");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЮрФизЛицПартнера(Получатель)
		
	СписокЮрФизЛицПартнера = Новый СписокЗначений;
	
	ДанныеПартнера = МодульОбъекта().ТаблицаКэшПартнеровКонтрагентов.НайтиСтроки(Новый Структура("Партнер", Получатель));
	Для Каждого Элемент Из ДанныеПартнера Цикл
		СписокЮрФизЛицПартнера.Добавить(Элемент.Контрагент);		
	КонецЦикла;
	
	Возврат СписокЮрФизЛицПартнера;
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеПолучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Состояние("Открытие формы выбора партнеров");
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОткрытаКакВыбор",истина);
	Если МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Партнеры_СписокУправляемая"", ПараметрыФормы,""ОбработчикВыбораПартнера"")");//,ДополнительныеПараметры);
	Иначе
		ВыбранныйПартнер = ПолучитьФормуОбработки("Партнеры_СписокУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикВыбораПартнера(ВыбранныйПартнер);
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораПартнера(Значение, ДопПараметр = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Значение) Тогда 
		
		Состояние("Обработка выбора партнера");
		Получатель = Значение;
		ОбработчикВыбораПартнераСервер();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработчикВыбораПартнера()()

&НаСервере
Процедура ОбработчикВыбораПартнераСервер()
	
	ПредставлениеПолучателя = МодульОбъекта().ПолучитьПредставлениеЭлементаСправочника(Получатель);
	ЗаполнитьСписокЮрФизЛицПартнера(Получатель);
	ВыбратьЮрФизЛицоПартнераПоУмолчанию(СторонаЮрФизЛицаПартнера);
	ПриИзмененииПолучателя();
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьЮрФизЛицоПартнераПоУмолчанию(СторонаЮрФизЛицаПартнера)

	Если Элементы[СторонаЮрФизЛицаПартнера].СписокВыбора.Количество() = 1 Тогда
		ЭтаФорма[СторонаЮрФизЛицаПартнера] = Элементы[СторонаЮрФизЛицаПартнера].СписокВыбора.Получить(0).Значение;
	Иначе
		ЭтаФорма[СторонаЮрФизЛицаПартнера] = МодульОбъекта().ПолучитьПустуюСсылкуОбъекта("ЮрФизЛицоСтороннее");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПолучателя()

	НЕОбязателенGTIN = (ЗначениеЗаполнено(Получатель)
						И (МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Получатель, "РазрешитьПустыеКодыGTINВИсходящихСообщениях") = Истина)); 
	//только в этом случае можно говорить о том можно отправить без GTIN
		
	ОбязателенGTIN = Не НЕОбязателенGTIN;
	
КонецПроцедуры

//обработчики формы и элементов шапки ----------------------------------------------------

&НаКлиенте
Процедура ОткрытьФормуОбъектаМодально(ИмяФормы, ПараметрыФормы = Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено,РежимБлокирования = Неопределено)
	//отказ от модальности
	Если РежимБлокирования = Неопределено Тогда
		РежимБлокирования=	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	Если ВладелецОбработчика = Неопределено Тогда
		ВладелецОбработчика=	ЭтаФорма;
	КонецЕсли;
	
	Если ИмяОбработчика = Неопределено Тогда
		ОписаниеОбработчика=	Неопределено;
	Иначе	
		Выполнить("ОписаниеОбработчика=	Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика)");
	КонецЕсли;
	
	Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецОбработчика, , , ,  ОписаниеОбработчика, РежимБлокирования)");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ИмяФормы, ПараметрыФормы = Неопределено , ВладелецФормы  = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь)
	
	ПолучаемаяФорма=	ПолучитьФорму(ПутьКФормам+ИмяФормы
										, ПараметрыФормы
										,
										, КлючУникальности);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы=	ВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

//валидация значений полей ----------------------------------------------------------------

&НаКлиенте
Функция ПроверитьЗаполнениеШапки()
	
	ТаблицаОшибок.Очистить();
	
	Успешно 		  = Истина;
	РезультатПроверки = Новый Структура("Успешно",Успешно);
		
	Если Не ЗначениеЗаполнено(Отправитель) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не выбран ""Отправитель""";
		Успешно = Ложь;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не выбран ""Партнер"" получатель";
		Успешно = Ложь;
	КонецЕсли;
	
	РезультатПроверки.Успешно = Успешно;

	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеТаблицыТоваров()
	
	ТаблицаОшибок.Очистить();
	
	Успешно 		  = Истина;
	РезультатПроверки = Новый Структура("Успешно",Успешно);
	
	Если Товары.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Таблица товаров пуста. Нет данных для отправки.";
		Успешно = Ложь;
	КонецЕсли;
	
	Для Каждого Стр Из Товары Цикл
		Успешно = ?(ПроверитьСтрокуТаблицыТоваров(Стр), Успешно, Ложь);	
	КонецЦикла;
	
	РезультатПроверки.Успешно 		 = Успешно;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Функция ПроверитьСтрокуТаблицыТоваров(СтрокаТовара)
	
	Успешно = Истина;
	
	Если ТипСообщения = "PRICELIST" Тогда
		Если ЭтаФорма.ОбязателенGTIN 
			И Не ЗначениеЗаполнено(СтрокаТовара.GTIN) Тогда
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ОписаниеОшибки = "Не заполнено обязательное поле ""GTIN"" в строке № " + СтрокаТовара.НомерСтроки;
			Успешно = Ложь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТовара.СтавкаНДС1С) Тогда
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ОписаниеОшибки = "Не заполнено обязательное поле ""Ставка НДС"" в строке № " + СтрокаТовара.НомерСтроки;
			Успешно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

//обработчики табличной части ---------------------------------------------------------

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьНомераСтрокКлиент();
	ПроверитьТаблицуТоваров();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.НомерСтроки = ЭтаФорма.Товары.Количество();
		ПроверитьСтрокуТаблицыТоваров(Элементы.Товары.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РезультатПроверки = ПроверитьЗаполнениеТаблицыТоваров();
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибокКлиент();
	Иначе
		ЗакрытьПанельОшибокКлиент();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТовары(Команда)
	
	Если Не ПроверитьЗаполнениеШапки().Успешно Тогда
		ОткрытьПанельОшибокКлиент();
		Возврат;
	КонецЕсли;

	Если Товары.Количество() <> 0 Тогда
		ТекстВопроса = "Данные таблицы товаров будут очищены. Продолжить?";
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("Да, перезаполнить");
		КнопкиВопроса.Добавить("Нет, не перезаполнять");
		ДопПараметрДляПередачиВОбработчик = Неопределено;
		РезультатВопроса = Неопределено;
		
		Если МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияПерезаполненияТЧ"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
		Иначе
			РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
			ОбработчикСогласияПерезаполненияТЧ(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
	Иначе
		ОбработчикСогласияЗаполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляПодготовкиСообщения(ТипСообщения, ДопПараметры = Неопределено)
	
	СтруктураПараметры = Новый Структура;
	
	СтруктураПараметры.Вставить("Отправитель", 				Отправитель);
	СтруктураПараметры.Вставить("Получатель", 				Получатель);
	СтруктураПараметры.Вставить("Покупатель", 				Покупатель); 
	СтруктураПараметры.Вставить("Продавец", 				Продавец);
	СтруктураПараметры.Вставить("Партнер", 					Получатель);
	СтруктураПараметры.Вставить("ДатаНачалаПериода", 		ДатаНачалаПериода);
	СтруктураПараметры.Вставить("ДатаОкончанияПериода", 	ДатаОкончанияПериода);
	СтруктураПараметры.Вставить("ТипЦен", 					ТипЦен);
	СтруктураПараметры.Вставить("ЦенаВключаетНДС", 			ЦенаВключаетНДС);
	СтруктураПараметры.Вставить("Валюта", 					Валюта);
	
	Если ТипСообщения = "PRICELIST" Тогда
		СтруктураПараметры.Вставить("НомерДоговора", 			НомерДоговора);
		СтруктураПараметры.Вставить("ДатаДоговора", 			ДатаДоговора);
		СтруктураПараметры.Вставить("Номенклатура", 			Неопределено);
		СтруктураПараметры.Вставить("СтатусТовараПоУмолчанию", 	СтатусТовараПоУмолчанию);
		СтруктураПараметры.Вставить("НомерПрайсЛиста", 	СокрЛП(НомерПрайсЛиста));
	ИначеЕсли ТипСообщения = "SLSRPT" Тогда 
		СтруктураПараметры.Вставить("ДатаИнвентаризации", 		ДатаИнвентаризации);
		СтруктураПараметры.Вставить("НомерДоговора", 			НомерДоговора);
		СтруктураПараметры.Вставить("ДатаДоговора", 			ДатаДоговора);
		
	ИначеЕсли ТипСообщения = "INVRPT" Тогда 
		СтруктураПараметры.Вставить("ДатаИнвентаризации", 		ДатаИнвентаризации);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПереотправляемоеСообщениеСсылка) Тогда
		СтруктураПараметры.Вставить("ПереотправляемоеСообщениеСсылка", ПереотправляемоеСообщениеСсылка);
	КонецЕсли;
	
	Если ДопПараметры <> Неопределено 
		И ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Для каждого Эл Из ДопПараметры Цикл
			СтруктураПараметры.Вставить(Эл.Ключ, Эл.Значение);		
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПараметры;
	
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьТоварыКлиент(ТипСообщения, ДопПараметры = Неопределено)

	Результат = ЗаполнитьТоварыСервер(ТипСообщения, ДопПараметры);
	
	Если НЕ Результат.Успешно Тогда
		ТекстПодсказки = Результат.ОписаниеОшибки;
		ЗаголовокПодсказки = "Контур.EDI. Заполнение товаров сообщения " + ТипСообщения;
		Если МодальностьЗапрещена Тогда
			Выполнить("ПоказатьПредупреждение(,ТекстПодсказки,,ЗаголовокПодсказки)");
		Иначе
			Предупреждение(ТекстПодсказки,,ЗаголовокПодсказки);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьНомераСтрокКлиент();
	ПроверитьТаблицуТоваров();

КонецПроцедуры

&НаСервере
Функция ЗаполнитьТоварыСервер(ТипСообщения, ДопПараметры = Неопределено)
	
	Результат = Новый Структура("Успешно, ОписаниеОшибки", Ложь, "");

	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("Номенклатура") Тогда
		// это добавление одной/группы номенклатуры для Pricelist
	Иначе
		Товары.Очистить();
    КонецЕсли;
		
	СтруктураПараметры = ПолучитьПараметрыДляПодготовкиСообщения(ТипСообщения, ДопПараметры);
	РезультатПолучения = МодульОбъекта().ПолучитьТоварыДляНезависимогоСообщения(ТипСообщения, СтруктураПараметры);
	
	Если РезультатПолучения.Успешно Тогда
		
		Для каждого Стр Из РезультатПолучения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатПолучения);
	
	Возврат Результат;

КонецФункции // ЗаполнитьТоварыСервер()

&НаКлиенте
Процедура ОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭтаФорма[СторонаЮрФизЛицаОрганизации] = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПолучателяОчистка(Элемент, СтандартнаяОбработка)
	
	Состояние("Очистка списка юр. лиц партнера");
	ПредставлениеПолучателяОчисткаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПредставлениеПолучателяОчисткаСервер()

	ПустойСписок = Новый СписокЗначений;
	ЗаполнитьСписокВыбораЭлемента(Элементы[СторонаЮрФизЛицаПартнера], ПустойСписок);	
	ЭтаФорма[СторонаЮрФизЛицаПартнера] = МодульОбъекта().ПолучитьПустуюСсылкуОбъекта("ЮрФизЛицоСтороннее");

КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьТаблицуТоваров()
	
	РезультатПроверки = ПроверитьЗаполнениеТаблицыТоваров();
	
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибокКлиент();
	Иначе
		ЗакрытьПанельОшибокКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКаналСбыта1СОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекМестоПродаж = Элементы.Товары.ТекущиеДанные.МестоПродаж1С;
	НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("МестоПродаж1С", ТекМестоПродаж));
	
	Для каждого Строка Из НайденныеСтроки Цикл
		Строка.КаналСбыта1С = ВыбранноеЗначение;	
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ТипЦенОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипЦенОбработкаВыбораСервер(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ТипЦенОбработкаВыбораСервер(ВыбранноеЗначение)
	
	Если МодульОбъекта().ЕстьРеквизитОбъекта_Контур(ВыбранноеЗначение, "ЦенаВключаетНДС") Тогда
		ЦенаВключаетНДС = ВыбранноеЗначение.ЦенаВключаетНДС;
	КонецЕсли;		
	
	Если НЕ ЗначениеЗаполнено(НомерПрайсЛиста) Тогда  //E1C_in-30790
			Если ЗначениеЗаполнено(ВыбранноеЗначение.Код) Тогда  
				НомерПрайсЛиста = ВыбранноеЗначение.Код;
			Иначе
				НомерПрайсЛиста = ВыбранноеЗначение.Наименование;
			КонецЕсли;
		КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенОчистка(Элемент, СтандартнаяОбработка)
	
	ЦенаВключаетНДС = Ложь;
	
КонецПроцедуры


