&НаСервере
Перем ОбработкаОбъект; 

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции 

&НаСервере
Процедура УстановитьТипПоля1С(ИмяНаФорме,Тип1С)
	
	ПолеФормы	= Элементы[ИмяНаФорме];
	ТипПоля		= МодульОбъекта().ПолучитьТипЗначенияОбъекта(Тип1С);
			
	Если ТипПоля = Неопределено Тогда
		
		Сообщить("Не задан тип объекта 1С для поля с типом "+Тип1С);
		
	Иначе	
		
		Элементы[ИмяНаФорме].ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма[ИмяНаФорме]) Тогда
			
			ЭтаФорма[ИмяНаФорме] = МодульОбъекта().ПолучитьПустуюСсылкуОбъекта(Тип1С);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыполнитьНажатие(Команда)
	
	УспешноеСохранение = СохранитьУчетнуюЗаписьСервер();

	Если УспешноеСохранение=Истина Тогда 
		Оповестить("КонтурEDI_ОбновитьСписокУчетныхЗаписей");
		
		Соединение = Неопределено;
		
		ЭтаФорма.Закрыть(Истина);
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьУчетнуюЗаписьСервер()
	
	Если НЕ ПроверитьЗначенияФормы() Тогда
		Возврат ложь;
	КонецЕсли;
	
	СтруктураПолей = СоздатьСтруктуруУчетнойЗаписиДляСохранения();  

	МодульОбъекта().СохранитьЭлементСправочника("УчетныеЗаписи", СсылкаУчетнойЗаписи, СтруктураПолей);
	
    Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьЗначенияФормы()
	
	// 1. инициализируем таблицу вывода ошибок
	ТаблицаОшибок = МодульОбъекта().ИнициализироватьТаблицуОшибок();
	
	// 2. передать структуру для проверки
	МодульОбъекта().ПроверитьПолеФормы(ТаблицаОшибок, Логин,	"Строка50", Истина, "Логин");
	МодульОбъекта().ПроверитьПолеФормы(ТаблицаОшибок, Пароль, 	"Строка50",	Истина, "Пароль");
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		Если ПустаяСтрока(Логин) Тогда
			
			ТекстЗаголовка = "При заполнении учетной записи найдены ошибки.";
			
		Иначе
			
			ТекстЗаголовка = "При заполнении учетной записи """+СокрЛП(Логин)+""" найдены ошибки.";
			
		КонецЕсли;
			
		//МодульПроверкиДанных.ОткрытьФормуВыводаОшибок(ТекстЗаголовка,ТаблицаОшибок,ЭтаФорма);
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция  СоздатьСтруктуруУчетнойЗаписиДляСохранения()
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Логин", 									СокрЛП(Логин));
	СтруктураПолей.Вставить("Пароль", 									Пароль);
	СтруктураПолей.Вставить("Организация", 								Организация);
	СтруктураПолей.Вставить("Подразделение", 							Подразделение);
	СтруктураПолей.Вставить("GLN", 										СокрЛП(GLN));
	СтруктураПолей.Вставить("Неактивная",								Неактивная);
	СтруктураПолей.Вставить("Токен",									"");
	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ЭтаОбработка.ПриОткрытииФормы(ЭтаФорма);       такое на УФ не вызываем!
	
	СсылкаУчетнойЗаписи=Параметры.СсылкаУчетнойЗаписи;
	
	Если ЗначениеЗаполнено(СсылкаУчетнойЗаписи) Тогда
		
		СтруктураЭлемента = МодульОбъекта().ПолучитьЭлементСправочника("УчетныеЗаписи", СсылкаУчетнойЗаписи);
		
		Если НЕ СтруктураЭлемента = Неопределено Тогда
		
            Логин									= СтруктураЭлемента.Логин;
			Пароль									= СтруктураЭлемента.Пароль;
			Организация								= СтруктураЭлемента.Организация;
			GLN										= СтруктураЭлемента.GLN;
			Неактивная								= СтруктураЭлемента.Неактивная;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьТипПоля1С("Организация",	"ЮрФизЛицоСвое");
	//// + Внешнее хранилище. kns 2014.09.10
	//Если НЕ ЭтаОбработка.КэшСеансаКонтурEDI.ВнешнееХранилище Тогда
	//// - Внешнее хранилище. kns 2014.09.10		
	//	УстановитьТипПоля1С("Подразделение","ПодразделениеСвое");
	//КонецЕсли;
	//
	//Оповестить("КонтурEDI_АктивизироватьФормуОшибок","Открытие",ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ЗначениеЗаполнено(Параметры.ПараметрыАвтотестирования) Тогда
		ПодключитьОбработчикОжидания("ЗаписатьНастройкиАвтотестирования",0.1,Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиАвтотестирования()
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
	СтруктураПараметров = СтруктураПараметров.Настройки.СтруктураКомпании;
	
	Если СтруктураПараметров.УчетныеЗаписи.Количество()>0 Тогда
		
		ТекДанные = СтруктураПараметров.УчетныеЗаписи[0];
		GLN = ТекДанные.GLN;
		Логин = ТекДанные.Логин;
		Пароль = ТекДанные.Пароль;
		
	КонецЕсли;
	
	КнопкаВыполнитьНажатие("");
	
КонецПроцедуры

