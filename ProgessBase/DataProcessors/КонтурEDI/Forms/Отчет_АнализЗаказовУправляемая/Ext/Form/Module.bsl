&НаСервере
Перем ОбработкаОбъект;

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
		
		//Если Параметры.АдресХранилища<>"" Тогда
		//	ОбработкаОбъект = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
		//	Возврат ОбработкаОбъект;
		//КонецЕсли;
		//
		//Если ОбработкаОбъект=Неопределено Тогда
		//	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		//	ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
		//КонецЕсли;
		//
		//Параметры.АдресХранилища = ПоместитьВоВременноеХранилище(ОбработкаОбъект,УникальныйИдентификатор);
	
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.МодальностьЗапрещена = МодульОбъекта().МодальностьЗапрещена();
	ПутьКФормам = МодульОбъекта().Метаданные().ПолноеИмя() + ".Форма.";
	
	СхемаКомпоновки = МодульОбъекта().ПолучитьМакет("Отчет_АнализЗаказов");
	
    АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	Настройки = СхемаКомпоновки.НастройкиПоУмолчанию;
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	
	ЕстьРеквизитОрганизация = ПроверитьНаличиеРеквизитаОрганизация();
	
	Если Не ЕстьРеквизитОрганизация Тогда 
		Сообщить("Для формирования отчета необходим реквизит справочника КонтурEDI_Сообщения ""Организация"""+Символы.ПС+"Обновите объекты Контур.EDI");
		
		ЭтаФорма.ТолькоПросмотр=Истина;
		Элементы.СформироватьИсходныеДанные.Доступность=Ложь;
		Элементы.СформироватьИсходныеДанные.Заголовок="Обновите объекты Контур.EDI";
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ВыбратьПериодДатыПоставки(Команда)
	ОткрытьВыборПериодаДатыПоставки("Поставки");
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодДатыЗаказов(Команда)
	ОткрытьВыборПериодаДатыПоставки("Заказы");
КонецПроцедуры

 &НаКлиенте
Процедура ОткрытьВыборПериодаДатыПоставки(РедактируемыПериод)
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Если РедактируемыПериод = "Поставки" Тогда
		Диалог.Период = НастройкаПериодаДатаПоставки;
	Иначе
		Диалог.Период = НастройкаПериодаДатаЗаказов;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РедактируемыПериод",РедактируемыПериод);
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("Диалог.Показать(Новый ОписаниеОповещения(""ОбработчикВыбораПериодаДатыПоставки"", ЭтаФорма,СтруктураПараметров))");
	Иначе
		Если Диалог.Редактировать() Тогда 
			ОбработчикВыбораПериодаДатыПоставки(Диалог.Период,СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораПериодаДатыПоставки(Период,СтруктураПараметров) Экспорт 
	
	Если Период<>Неопределено Тогда
		НастройкаПериодаДатаПоставки=Неопределено;
		НастройкаПериодаДатаЗаказов=Неопределено;
		Если СтруктураПараметров.РедактируемыПериод="Поставки" Тогда
			НастройкаПериодаДатаПоставки=Период;
		Иначе
			НастройкаПериодаДатаЗаказов=Период;
		КонецЕсли;
	КонецЕсли;
	Если не ЗначениеЗаполнено(НастройкаПериодаДатаЗаказов) Тогда
		Элементы.НастройкаПериодаДатаЗаказов.Видимость = Ложь;
	КонецЕсли;
	Если не ЗначениеЗаполнено(НастройкаПериодаДатаПоставки) Тогда
		Элементы.НастройкаПериодаДатаПоставки.Видимость = Ложь;
	КонецЕсли;
	
		
	
	
КонецПроцедуры // ОбработчикВыбораПериода()

&НаКлиенте
Процедура СформироватьИсходныеДанные(Команда)
	Состояние("СобираюИсходныеДанные...",50,,);
	
	СформироватьИсходныеДанныеСервер();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеРеквизитаОрганизация()

Возврат МодульОбъекта().ЕстьНеобходимыеМетаданные("Справочники.КонтурEDI_Сообщения.Реквизиты.Организация");

КонецФункции // ПроверитьНаличиеРеквизитаОрганизация()

&НаСервере
Процедура СформироватьИсходныеДанныеСервер()
    ИзвлеченныеДанные.Очистить();
	
	НастройкаПериода=?(ЗначениеЗаполнено(НастройкаПериодаДатаПоставки),НастройкаПериодаДатаПоставки,НастройкаПериодаДатаЗаказов);
	
	НачалоПериода = НастройкаПериода.ДатаНачала;
	Если Не ЗначениеЗаполнено(НастройкаПериода.ДатаОкончания) Тогда
		КонецПериода = КонецДня(Дата("39990101"));
	Иначе	
		КонецПериода = КонецДня(НастройкаПериода.ДатаОкончания);
	КонецЕсли;	

	ОтборПоДатеПоставки = ЗначениеЗаполнено(НастройкаПериодаДатаПоставки);
	ЗначениеВРеквизитФормы(МодульОбъекта().Анализ_СформироватьИсходныеДанныеСервер(НачалоПериода,КонецПериода,ОтборПоДатеПоставки),"ИзвлеченныеДанные");
	
	Элементы.ГруппаСформироватьОтчет.Доступность=Истина;
КонецПроцедуры // СформироватьИсходныеДанныеСервер()

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	СформироватьОтчетНаСервере();
	ТекущийЭлемент = Элементы.Результат;
	
	Результат.ПоказатьУровеньГруппировокСтрок(1);
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере()

	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ORDERS",РеквизитФормыВЗначение("ИзвлеченныеДанные"));
	
	СхемаКомпоновки = МодульОбъекта().ПолучитьМакет("Отчет_АнализЗаказов");
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	//Настройки = СхемаКомпоновки.НастройкиПоУмолчанию;
	//
	//КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки,КомпоновщикНастроек.ПолучитьНастройки(),ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);
	
	//ДокументРезультат = Новый ТабличныйДокумент;
	Результат.Очистить();
	
	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	//Возврат ДокументРезультат;
	

КонецФункции // СформироватьОтчетНаСервере()

&НаКлиенте
Процедура НастроитьОтчет(Команда)
	ТекущийЭлемент = Элементы.КомпоновщикНастроекНастройки;
КонецПроцедуры



