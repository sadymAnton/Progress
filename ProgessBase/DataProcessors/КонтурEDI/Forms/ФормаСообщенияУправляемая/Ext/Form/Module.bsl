&НаСервере
Перем ОбработкаОбъект;

&НаСервере
Перем ОсобенностиСообщений;

Перем ПараметрыАвтотестирования Экспорт;

////Перем Сообщение; // для создания формы  перенесено в реквизиты формы
//Перем НастройкаФормы;
Перем МетаданныеСообщения;
Перем ВнешнееХранилище;
Перем ОбязательныйКодТовараПокупателя;     
Перем СообщениеАлко;
Перем ОбязательныйСФвDESADV;
Перем ПараметрыДействия;
Перем СтруктураВременногоХранилища;

&НаКлиенте
Перем ЗакрытиеРазрешено;

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		
		Если Параметры.КэшироватьМодульОбъекта Тогда
			Если Параметры.АдресХранилища<>"" Тогда
				_Структура = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
				Если ТипЗнч(_Структура) = Тип("Структура") Тогда
					_Структура.Свойство("ОбработкаОбъект",ОбработкаОбъект);
					_Структура.Свойство("ОсобенностиСообщений",ОсобенностиСообщений);
				КонецЕсли;
			КонецЕсли;
			
			Если ОбработкаОбъект=Неопределено Тогда
				ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
				ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
				Параметры.АдресХранилища = ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект,ОсобенностиСообщений",ОбработкаОбъект,ОсобенностиСообщений),УникальныйИдентификатор);
				ОбработкаОбъект.IDОсновнойФормы = Параметры.IDОсновнойФормы;
			КонецЕсли;
		Иначе
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
			ОбработкаОбъект.IDОсновнойФормы = Параметры.IDОсновнойФормы;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	
	Если ЭтаФорма.ВладелецФормы = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ЭтаФорма.ВладелецФормы.ОсновнаяФорма();
	КонецЕсли;
    	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуОбъектаМодально(ИмяФормы, ПараметрыФормы = Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено,РежимБлокирования = Неопределено)
	//отказ от модальности
	Если РежимБлокирования = Неопределено Тогда
		РежимБлокирования=	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресХранилища",			Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("IDОсновнойФормы",			Параметры.IDОсновнойФормы);
	ПараметрыФормы.Вставить("КэшироватьМодульОбъекта",	Параметры.КэшироватьМодульОбъекта);
	
	Если ВладелецОбработчика = Неопределено Тогда
		ВладелецОбработчика=	ЭтаФорма;
	КонецЕсли;
	
	Если ИмяОбработчика = Неопределено Тогда
		ОписаниеОбработчика=	Неопределено;
	Иначе	
		Выполнить("ОписаниеОбработчика=	Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика)");
	КонецЕсли;
	
	Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецОбработчика, , , ,  ОписаниеОбработчика, РежимБлокирования)");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ИмяФормы, ПараметрыФормы = Неопределено , ВладелецФормы  = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь)
	
	ПараметрыФормы.Вставить("АдресХранилища",							Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("IDОсновнойФормы",							Параметры.IDОсновнойФормы);
	ПараметрыФормы.Вставить("КэшироватьМодульОбъекта",					Параметры.КэшироватьМодульОбъекта);
	
	Если ВладелецФормы = Неопределено Тогда
		ВладелецФормы =	ЭтаФорма.ВладелецФормы;
	КонецЕсли;
	
	ПолучаемаяФорма =	ПолучитьФорму(ПутьКФормам + ИмяФормы
										, ПараметрыФормы
										, ВладелецФормы
										, КлючУникальности);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы =	ВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.МодальностьЗапрещена=МодульОбъекта().МодальностьЗапрещена();
	ПутьКФормам = МодульОбъекта().Метаданные().ПолноеИмя() + ".Форма.";
	ТолькоПросмотрСообщения = Параметры.ТолькоПросмотр;
	
	ТипСообщения = Параметры.ТипСообщения;   //нужны для условного оформления
	РежимРаботы = Параметры.РежимРаботы;     

	СформироватьСообщениеДляОткрытияКарточки(); //Здесь заполняем ключевой реквизит формы "Сообщение"
	
	//заполнение формы
	ПроизвестиПервоначальноеЗаполнениеПолейНаФорме();
	
	ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();	
	
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
	ДозаполнитьАртикулКодПолноеНаименованиеТЧТовары();
	
КонецПроцедуры

//Формирование сообщения которое будет показываться в карточке
&НаСервере
Процедура СформироватьСообщениеДляОткрытияКарточки()

	//исключение №1 - сохраненный в базе desadv - обрабатывается особым образом
	ЭтоСохраненныйDESADVсSSCC = (ЗначениеЗаполнено(Параметры.СообщениеСсылка) И Параметры.СообщениеСсылка.ТипСообщения = "DESADV" и Параметры.СообщениеСсылка.Направление = "Исходящее" И Параметры.ТипСообщения = "DESADV");
	
	Если ЭтоСохраненныйDESADVсSSCC Тогда
		Если Параметры.ПроизвольныеПараметры = Неопределено Тогда
			Параметры.ПроизвольныеПараметры = Новый Структура;
		КонецЕсли;
		Параметры.ПроизвольныеПараметры.Вставить("СообщениеСсылка",МодульОбъекта().НайтиСообщениеДокумента(Параметры.Документ1С,Параметры.ТипСообщения,"Исходящее"));
	КонецЕсли;
	
	Если Параметры.ТолькоПросмотр Тогда
		//открываем уже существующее сообщение по ссылке и это все только для просмотра
		Сообщение = МодульОбъекта().ПрочитатьСообщение(Параметры.СообщениеСсылка,,Параметры.ТипСообщения,Параметры.СообщениеСсылка.Направление);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ПереотправляемоеСообщениеСсылка) Тогда
		//сообщение существует, но пользователь хочет его переотправить
		Сообщение = МодульОбъекта().ПодготовитьИсходящееСообщение(Параметры.ТипСообщения, Параметры.Документ1С, Параметры.ПроизвольныеПараметры);//добавлены ПроизвольныеПараметры для отклонения ORDRSP
		Сообщение.Вставить("ПереотправляемоеСообщениеСсылка",Параметры.ПереотправляемоеСообщениеСсылка);
	Иначе
		//В ТабСообщения направление может не соответствовать сообщению, которое формируем,
		//поэтому будем проверять направление по совокупности факторов: тип сообщения и режим работы
		НаправлениеСообщения = МодульОбъекта().ПолучитьНаправлениеСообщения(Параметры.ТипСообщения, Параметры.РежимРаботы);
		Если НаправлениеСообщения = "Исходящее" Тогда 
			Сообщение = МодульОбъекта().ПодготовитьИсходящееСообщение(Параметры.ТипСообщения, Параметры.Документ1С,Параметры.ПроизвольныеПараметры);
		Иначе
			Сообщение = МодульОбъекта().ПрочитатьСообщение(Параметры.СообщениеСсылка,,Параметры.ТипСообщения,Параметры.СообщениеСсылка.Направление);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СвормироватьСообщениеДляОткрытияКарточки()


&НаСервере
Процедура ДозаполнитьАртикулКодПолноеНаименованиеТЧТовары()
	//получим тек.колонку номенклатуры
	ТекПереченьНоменклатуры= Товары.Выгрузить(,"Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Данные.Номенклатура
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	&Данные КАК Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(спрНоменклатура.Код, """") КАК Код,
	|	ЕСТЬNULL(спрНоменклатура.Артикул, """") КАК Артикул,
	|	ЕСТЬNULL(спрНоменклатура.НаименованиеПолное, """") КАК НаименованиеПолное
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|		ПО ИсходныеДанные.Номенклатура = спрНоменклатура.Ссылка";
	
	Запрос.УстановитьПараметр("Данные",ТекПереченьНоменклатуры);
	ТЗРеквизитов=Запрос.Выполнить().Выгрузить();
	КолонкаКод=ТЗРеквизитов.ВыгрузитьКолонку("Код");
	КолонкаАртикул=ТЗРеквизитов.ВыгрузитьКолонку("Артикул");
	КолонкаНаименованиеПолное=ТЗРеквизитов.ВыгрузитьКолонку("НаименованиеПолное");
	
	ТЗТовары=РеквизитФормыВЗначение("Товары");
	ТЗТовары.ЗагрузитьКолонку(КолонкаКод,"НоменклатураКод");
	ТЗТовары.ЗагрузитьКолонку(КолонкаАртикул,"Артикул");
	ТЗТовары.ЗагрузитьКолонку(КолонкаНаименованиеПолное,"НаименованиеНоменклатурыПолное");
	
	ЗначениеВРеквизитФормы(ТЗТовары,"Товары");
КонецПроцедуры // ДозаполнитьАртикулКодПолноеНаименованиеТЧ()

&НаКлиенте
Процедура ПроанализироватьСостояниеЮЗсчф()
	
	Если (Сообщение.ТипСообщения = "INVOIC" ИЛИ Сообщение.ТипСообщения = "COINVOIC")
		И ЗначениеЗаполнено(Сообщение.СообщениеСсылка) 
		И Сообщение.Направление = "Исходящее" Тогда 
		
		Состояние("Получение статусов из Диадока...");
		
		СтруктураИдентификаторов = Новый Структура;
		СтруктураИдентификаторов.Вставить("boxId",boxId); //идентификаторы определены при создании на сервере в ПроверитьЗаполнениеПолей - по сути это проверка
		СтруктураИдентификаторов.Вставить("messageId",messageId);
		СтруктураИдентификаторов.Вставить("invoiceId",invoiceId);
		СтруктураИдентификаторов.Вставить("torg12Id",torg12Id);
		СтруктураИдентификаторов.Вставить("UniversalTransferDocumentId",UniversalTransferDocumentId);
		СтруктураИдентификаторов.Вставить("Документ",Документ1С);
		
		ОсновнаяФормаМодуля = ОсновнаяФорма();

		ОсновнаяФормаМодуля.МодульОбменКлиент().СброситьПроверкиДанныхАвторизации();
		
		СтатусыЮЗДО=ОсновнаяФормаМодуля.МодульОбменКлиент().УзнатьСостояниепоСФ(Отправитель1С,СтруктураИдентификаторов.boxId,СтруктураИдентификаторов.messageId);
		
		ОсновнаяФормаМодуля.МодульОбменКлиент().СброситьПарольКонтейнераДанныхАвторизации();
		
		Если СтатусыЮЗДО.Успешно=Ложь Тогда 
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ТекстОшибки = "Не удалось получить статус из Диадок.";
			НоваяСтрока.Действие 	= "";
			НоваяСтрока.ИмяПоля		= "СтатусДиадок";
			
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ТекстОшибки = СтатусыЮЗДО.ОписаниеОшибки;
			НоваяСтрока.Действие 	= "";
			НоваяСтрока.ИмяПоля		= "СтатусДиадок";

		Иначе
			ВывестиВОшибкиСостояниеЮЗДО(СтатусыЮЗДО);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроанализироватьСостояниеЮЗсчф()

&НаКлиенте
Процедура ВывестиВОшибкиСостояниеЮЗДО(СтатусыЮЗДО) //они не являются ошибками, это уведомления
	
	КлассификаторСтатусовДД=ОсновнаяФорма().ПолучитьКлассификаторСтатусовДД();
	
	МассивСвойств = Новый СписокЗначений;
	МассивСвойств.Добавить("СтатусСФ","Статус СФ");
	МассивСвойств.Добавить("СтатусТорг12","Статус Торг12");
	МассивСвойств.Добавить("СтатусУПД","Статус");
	МассивСвойств.Добавить("КомментарийКЗапросуУточнения","Комментарий к запросу уточнения");
	МассивСвойств.Добавить("КомментарийКОтказуВПодписи","Комментарий к отказу");
	МассивСвойств.Добавить("КомментарийКЗапросуАннулированияСФ","Запрос аннулирования СФ");
	МассивСвойств.Добавить("КомментарийКЗапросуАннулированияТОРГ12","Запрос аннулирования Торг12");
	МассивСвойств.Добавить("КомментарийКЗапросуАннулированияУПД","Запрос аннулирования УПД");
    МассивСвойств.Добавить("СтатусАннулированияСФ","Статус аннулирования СФ");   
	МассивСвойств.Добавить("СтатусАннулированияТорг12","Статус аннулирования Торг12");
	МассивСвойств.Добавить("СтатусАннулированияУПД","Статус аннулирования УПД");

	Для Каждого СвойствоДокумента Из МассивСвойств Цикл
		ЗначениеСвойства="";
		СтатусыЮЗДО.Свойство(СвойствоДокумента.Значение,ЗначениеСвойства);
		Если ЗначениеСвойства<>"" и ЗначениеСвойства<>Неопределено Тогда
			Если Лев(СвойствоДокумента.Значение,11)= "Комментарий" Тогда
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = СвойствоДокумента.Представление+": """+ЗначениеСвойства+"""";
				НоваяСтрока.ИмяПоля		= "СтатусДиадок";
			Иначе
				ПсевдонимСтатуса=КлассификаторСтатусовДД.НайтиПоЗначению(ЗначениеСвойства);
				Если ПсевдонимСтатуса<>Неопределено Тогда 
					НоваяСтрока = ТаблицаОшибок.Добавить();
					НоваяСтрока.ТекстОшибки = СвойствоДокумента.Представление+": "+ПсевдонимСтатуса.Представление;
					//НоваяСтрока.Действие 	= "Открыть счет-фактуру в Диадоке";
					НоваяСтрока.ИмяПоля		= "СтатусДиадок";
				КонецЕсли;
				
			КонецЕсли;
			
		Конецесли;
	КонецЦикла;
	
КонецПроцедуры // ВывестиСостояниеЮЗДО()



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//доступность реквизитов и значения типов установлены при создании на сервере
	//Здесь только мелкие штрихи
	
	ПроанализироватьСостояниеЮЗсчф();//если это INVOIC	
	
	Если СообщениеСодержитДанныеОбУпаковках Тогда 
		ОбновитьДанныеРазмещения();
		//Элементы.ТранспортныеУпаковки.Развернуть(ТранспортныеУпаковки.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	КонецЕсли;
	
	Если Элементы.ГруппаТранспортировка.Видимость=истина Тогда 
		Сообщить("В заказе указаны врата времени РЦ");
		УстановитьВысотуСпискаВрат();
	КонецЕсли;
	
	Если ТаблицаОшибок.Количество() = 0 Тогда
		ЗакрытьПанельОшибокКлиент();
	Иначе
		ОткрытьПанельОшибокКлиент();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПараметрыАвтотестирования) Тогда
		ПодключитьОбработчикОжидания("ЗапуститьАвтотесты",0.1,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция Автотесты_ПолучитьКодСледующегоШага()
	
	Код = Неопределено;
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);

	Для Каждого Стр Из СтруктураПараметров.ВыполняемыйКод Цикл
		
		Если Стр.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.ФормаОбработки = "ФормаСообщения" Тогда
			Код = Стр.ВыполняемыйКод;
			Прервать;
		Иначе
			Прервать;//есть невыполненный код в другой форме
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Код;
	
КонецФункции

&НаКлиенте
Процедура Автотесты_ПометитьПоследнийШагКакВыполненный()
	
	Код = Неопределено;
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
	Для Каждого Стр Из СтруктураПараметров.ВыполняемыйКод Цикл
		
		Если Стр.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.ФормаОбработки = "ФормаСообщения" Тогда
			Стр.Выполнено = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СтруктураПараметров,Параметры.ПараметрыАвтотестирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьАвтотесты()
	
	Пока Истина Цикл
		
		Код = Автотесты_ПолучитьКодСледующегоШага();
		
		Если Код = Неопределено Тогда
			
			Прервать;
			
		Иначе
			
			Выполнить(Код);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроизвестиПервоначальноеЗаполнениеПолейНаФорме() Экспорт
	
	ОбязательныйКодТовараПокупателя = Ложь;
	Элементы.СтраницаАлкоголь.Видимость = Ложь;
	
	КтоМы = МодульОбъекта().ОпределитьКемМыЯвляемся(Сообщение);
	
	НастройкаФормы = МодульОбъекта().ПолучитьНастройкиФормыСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
	
	НастройкаСсылокИсправленияОшибок = МодульОбъекта().ПолучитьНастройкуВыводаСсылокНаОбъектыСообщения();
	//ЗначениеВРеквизитФормы(НастройкаСсылокИсправленияОшибокТаблицаЗначений,"НастройкаСсылокИсправленияОшибок");

	ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();
	
	МетаданныеСообщения = МодульОбъекта().ПолучитьМетаданныеСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
	
	
	Если ТолькоПросмотрСообщения Тогда
		НастройкаФормы.ТолькоПросмотрПолей1С = Истина;
		НастройкаФормы.ТолькоПросмотрПолейEDI = Истина;
		ТолькоПросмотр = Истина;
	КонецЕсли;
		
	Если Сообщение.Направление = "Входящее" Тогда
		МодульОбъекта().КонвертироватьСообщениеEDIв1С(Сообщение); //сообщене следует переконвертировать т.к. с момента его загрузки могли измениться настройки соответствий и проч.
	КонецЕсли;
	
	МодульОбъекта().ПриОткрытииФормыСообщения(Сообщение,ЭтаФорма);//только вызов ПМ
	
	СоздатьКнопки(НастройкаФормы.КнопкиКоманднойПанели);
	
	//Заполним Особенности
	ЗаполнитьОсобенностиСообщенияНаФорме();
	
	ЗаполнитьСпискиВыбораКолонок();
	ЗаполнитьПоляНаФорме();
	УстановитьТипыПолей1С();
	УстановитьВидимость();
	УстановитьДоступностьПолей();

	НетОшибок = Истина;
	
	Если НастройкаФормы.ПроверятьПоляПриОткрытииФормы Тогда
		
		НетОшибок = ПроверитьЗаполнениеПолей();
		
	КонецЕсли;
	
	ЗаполнитьСписокВерсийORDERS();
	
	ЭтаФорма.Заголовок = НастройкаФормы.Заголовок+" ("+СокрЛП(Сообщение.ТипСообщения)+") ";
	Если Сообщение.Свойство("ДатаСоздания")	И ЗначениеЗаполнено(Сообщение.ДатаСоздания) Тогда
		Если Сообщение.Направление = "Входящее" Тогда
			//Для входящих выводим на форму время в формате МСК(UTC+3), для этого добавим 3 часа к UTC.
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + "Дата отправки (МСК): " + (Сообщение.ДатаСоздания + 60*60*3);
		ИначеЕсли Сообщение.Направление = "Исходящее" И Сообщение.Свойство("Архив") И Сообщение.Архив Тогда
			//Для исходящих выводим местное время создания сообщения
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + "Дата создания: " + Сообщение.ДатаСоздания;
		КонецЕсли;
	КонецЕсли;
	
	Если Сообщение.Направление = "Входящее" Тогда
		Элементы.ТоварыНоменклатура.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораКолонок()
	
	СпискиВыбораКолонок = НастройкаФормы.СпискиВыбораКолонок;
	
	Для каждого ТекСписок Из СпискиВыбораКолонок Цикл
	    ЗаполнитьСписокВыбораЭлемента(Элементы["Товары" + ТекСписок.Ключ], ТекСписок.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораЭлемента(Элемент, Список)
	
	Элемент.СписокВыбора.Очистить();
	
	Для каждого Эл Из Список Цикл
		Элемент.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
	КонецЦикла;	

КонецПроцедуры

//Заполним список версий, если он есть
	//1. Получить все похожие сообщения - ИЗ МОДУЛЯ ИНТЕГРАЦИИ. 
	//По партнеру, номеру заказа, дате (+- месяц, например)
	//формат: таблица - ссылка, дата, номер (на всякий случай)
	//последнее сообщение должно быть актуальным
	//и пронумеровать их
	//2. Создать кнопки версий
	//каждая кнопка должна открывать нужное сообщение
	//причем остальные кнопки должны быть доступны только в актуальном сообщении! Т.е. создавать документы можно только из актуального
	//и если документы уже были созданы в каком-то старом сообщении, то их надо переподцепить к новому
	//тоже через МОДУЛЬ ИНТЕГРАЦИИ            
&НаСервере
Процедура ЗаполнитьСписокВерсийORDERS()
	
	Если Сообщение.Направление = "Входящее"
		И Сообщение.ТипСообщения = "ORDERS"
		Тогда
		//условие на тип сообщения - ?
		Дубли=МодульОбъекта().ПолучитьДублирующиеСообщения(Сообщение.СообщениеСсылка);
		Если Дубли<>Неопределено 
			И Дубли.Количество()>1 
		Тогда
		
			ЕстьДокумент1С = Ложь;
			Для Каждого Стр Из Дубли Цикл
				Если ЗначениеЗаполнено(Стр.Документ1С) Тогда
					ЕстьДокумент1С = Истина;
				КонецЕсли;	
			КонецЦикла;
			
			Элементы.СписокВерсий.Видимость=Истина;
				
			ГлавнаяКнопка = Неопределено;
			Если Элементы.ОсновноеДействиеФормы1.ИмяКоманды<>"NOP" Тогда 
				ГлавнаяКнопка = Элементы.ОсновноеДействиеФормы1;
			ИначеЕсли Элементы.ОсновноеДействиеФормы2.ИмяКоманды<>"NOP" Тогда
				ГлавнаяКнопка = Элементы.ОсновноеДействиеФормы2;
			ИначеЕсли Элементы.ОсновноеДействиеФормы3.ИмяКоманды<>"NOP" Тогда
				ГлавнаяКнопка = Элементы.ОсновноеДействиеФормы3;
			ИначеЕсли Элементы.ОсновноеДействиеФормы4.ИмяКоманды<>"NOP" Тогда
				ГлавнаяКнопка = Элементы.ОсновноеДействиеФормы4;
			КонецЕсли;
			
			Если ГлавнаяКнопка <> Неопределено Тогда
				ГлавнаяКнопка.Заголовок = "Выбрать текущую версию";
				ГлавнаяКнопка.ИмяКоманды = "КнопкаДействияФормыВыборВерсииНажатие";//подменим на клиентскую команду, которая будет задавать вопрос о дальнейшей судьбе
			КонецЕсли;
			 			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокВерсийORDERS()

&НаСервере
Функция ПроверитьЗаполнениеПолей() Экспорт
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	
	ОчиститьПометкиПолей();
	
	ТаблицаОшибок.Очистить();
	
	ЕстьОшибкиВПрикрепленных = Ложь;
	
	// смотрим на статусное сообщение
	Если Сообщение.Направление = "Исходящее" Тогда
		
		СтатусноеСообщениеОбОшибке = МодульОбъекта().ПрочитатьСообщение(,Сообщение.ДокументСсылка,Сообщение.ТипСообщения);
		
		Если НЕ СтатусноеСообщениеОбОшибке = Неопределено Тогда
			
			СтатусноеСообщениеОбъект = МодульОбъекта().ПолучитьОбъектСообщения(СтатусноеСообщениеОбОшибке.СообщениеСсылка);
			ТекстОшибки = СтатусноеСообщениеОбъект.ОписаниеОшибки;
			
			Если СтрДлина(ТекстОшибки) > 0 Тогда
				Если Найти(ТекстОшибки,Символы.ПС)>0 Тогда
					Пока Найти(ТекстОшибки,Символы.ПС)>0 Цикл
						НоваяСтрока = ТаблицаОшибок.Добавить();
						НоваяСтрока.ТекстОшибки = Лев(ТекстОшибки, Найти(ТекстОшибки,Символы.ПС)-1);
					    ТекстОшибки = Сред(ТекстОшибки, Найти(ТекстОшибки,Символы.ПС)+1);
					КонецЦикла;
					Если СтрДлина(ТекстОшибки)>0 Тогда
						НоваяСтрока = ТаблицаОшибок.Добавить();
						НоваяСтрока.ТекстОшибки = ТекстОшибки;
					КонецЕсли;
				Иначе
					НоваяСтрока = ТаблицаОшибок.Добавить();
					НоваяСтрока.ТекстОшибки = ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		//УДАЛИТЬ РАНЕЕ В КАРТОЧКЕ COINVOIC ВЫВОДИЛИ статусы исходной СЧФ теперь самого коинвойка
		//Если Сообщение.ТипСообщения = "COINVOIC" Тогда
		//	boxId = СокрЛП(МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.СчетФактура1С, "boxId"));
		//	messageId = СокрЛП(МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.СчетФактура1С, "messageId"));
		//	Если Не ЗначениеЗаполнено(boxId) Или Не ЗначениеЗаполнено(messageId) Тогда
		//		ТекстОшибки = "Не найдены идентификаторы ДД исходного счета-фактуры.";
		//		НоваяСтрока = ТаблицаОшибок.Добавить();
		//		НоваяСтрока.ТекстОшибки = ТекстОшибки;
		//	КонецЕсли;
		//	
		//КонецЕсли;
			
		// попробуем прочитать статус уточнения из Диадока
		Если Сообщение.ТипСообщения = "INVOIC" или Сообщение.ТипСообщения = "COINVOIC" Тогда
			#Если Клиент Тогда
			Состояние("Проверка статусов документа в Диадоке...");
				
			#КонецЕсли
			
		СтруктураИдентификаторовДД = МодульОбъекта().ПолучитьСписокСвойствEDI("boxId,messageId,invoiceId,torg12Id,UniversalTransferDocumentId",Сообщение.ДокументСсылка);
			
			boxId 				= СтруктураИдентификаторовДД.boxId;
			messageId 			= СтруктураИдентификаторовДД.messageId;
			invoiceId 			= СтруктураИдентификаторовДД.invoiceId;
			torg12Id 			= СтруктураИдентификаторовДД.torg12Id;
	UniversalTransferDocumentId = СтруктураИдентификаторовДД.UniversalTransferDocumentId;
	
			// В Диадок по этим идентификаторам пойдем на клиенте
			// При открытии  в процедуре ПроанализироватьСостояниеЮЗсчф используем вызов экспортного клиентского метода ОсновнойУправляемойФормы "ЗаполнитьИдентификаторыЧерезКомпонентуДД"
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СообщениеАлко) Тогда
			
			СтатусноеСообщениеОбОшибке = МодульОбъекта().ПрочитатьСообщение(,СообщениеАлко.ДокументСсылка,СообщениеАлко.ТипСообщения,,Истина);
			
			Если НЕ СтатусноеСообщениеОбОшибке = Неопределено Тогда
				
				ТекстОшибки = СтатусноеСообщениеОбОшибке.СообщениеСсылка.ОписаниеОшибки;
				
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = ТекстОшибки;
				
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого Стр ИЗ ТаблицаПрикрепленныхСообщений Цикл
			
			Если ЗначениеЗаполнено(Стр.Примечание) Тогда
				
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = "В прикрепленных сообщениях были найдены ошибки: "+СокрЛП(Стр.Примечание);
				ЕстьОшибкиВПрикрепленных = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	//
	
	// проверка алко полей
	ЕстьАлкоОшибки = Ложь;
	Если ЗначениеЗаполнено(СообщениеАлко) Тогда
		Если СообщениеАлко.СодержитОшибки = Истина Тогда
			
			ЕстьАлкоОшибки=Истина;	
			РезультатПроверки = МодульОбъекта().ПроверитьПоляСообщения(СообщениеАлко,Неопределено);
			Для Каждого Стр Из РезультатПроверки.СписокОшибок Цикл
				НоваяСтрока = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			КонецЦикла;
			
		КонецЕсли;
		//проверки перенесены в МО.ПроверитьПоляСообщения
	КонецЕсли;
	//
	
	//sscc
	ЕстьОшибкиУпаковок = Ложь;
	Если ОтправлятьДанныеОбУпаковках 
		 И Не ТранспортныеУпаковки.ПолучитьЭлементы().Количество() = 0 Тогда
		//Будем полагать, что если размещение товаров по упаковкам не начали, 
		//значит в этом не было необходимости, не смотря на возможность размещение.
		//проверяем полное размещение товара по упаковкам
		Если Не ТоварныеПозиции.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ТекстОшибки = "Не все товарные позиции размещены по упаковкам.";
			ЕстьОшибкиУпаковок = Истина;	
		КонецЕсли;
		//проверим наличие "пустых" упаковок
		Для Каждого Упаковка Из ТранспортныеУпаковки.ПолучитьЭлементы() Цикл
			Если Упаковка.ПолучитьЭлементы().Количество() = 0 Тогда
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = "В упаковку " + Упаковка.СоставУпаковки + " не размещен ни один товар.";
				ЕстьОшибкиУпаковок = Истина;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//
	
	ПроверитьЗаполнениеОбязательныхПолей();    
	
	Эталон = МодульОбъекта().ПолучитьСтруктуруСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
	МодульОбъекта().ДополнитьСтруктуруСообщенияИзЭталона(Сообщение,Эталон);
	
	
	КопияСообщения = МодульОбъекта().ПолучитьКопиюСообщения(Сообщение);
	
	Если Сообщение.Направление = "Входящее" Тогда
		
		ПеренестиПоля1СвСообщение(КопияСообщения);
		
		Если РежимРаботы = "Поставщик"
			И Сообщение.СтатусСсылки = "ВходящийНеПрошелВалидацию" Тогда
			СообщениеОбъект = МодульОбъекта().ПолучитьОбъектСообщения(Сообщение.СообщениеСсылка);
			ОшибкиВалидации = МодульОбъекта().ПолучитьОшибкиВалидацииИзОбъектаСообщения(СообщениеОбъект);
			Для Каждого ОшибкаВалидации Из ОшибкиВалидации Цикл
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ИмяПоля = "ОшибкаВалидации";
				НоваяСтрока.ТекстОшибки = ОшибкаВалидации.Значение;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДействиеЮрФизЛицаСервер("ЮрФизЛицоСвое",		"Подробнее");
	УстановитьДействиеЮрФизЛицаСервер("ЮрФизЛицоСтороннее",	"Подробнее");
	УстановитьДействиеЮрФизЛицаСервер("Грузоотправитель",		"Подробнее");
	УстановитьДействиеЮрФизЛицаСервер("Грузополучатель",		"Подробнее");
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("ОбязательныйКодТовараПокупателя",?(МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(КопияСообщения.Получатель1С, "ОбязательныйКодТовараТорговойСети") = Истина,Истина,Ложь));
	Если Сообщение.ТипСообщения = "DESADV" Тогда
		ПараметрыПроверки.Вставить("ОбязательныйСФвDESADV",?(МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(КопияСообщения.Получатель1С, "ОбязательныйСФвDESADV") = Истина,Истина,Ложь));
	КонецЕсли;	
	РезультатПроверки = МодульОбъекта().ПроверитьПоляСообщения(КопияСообщения,ПараметрыПроверки);
	
	Если НЕ РезультатПроверки.Успешно Тогда
		
		Для Каждого Стр Из РезультатПроверки.СписокОшибок Цикл
				
			НоваяСтрока = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			
			НайденнаяСтрока = НастройкаСсылокИсправленияОшибок.Найти(Стр.ИмяПоля,"ИмяПоля");
			Если Не НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока.Действие = НайденнаяСтрока.ТекстСсылки;
			КонецЕсли;
			
			Если Сообщение.ТипСообщения = "ORDRSP" Тогда
				Если Стр.ИмяПоля = "GTIN" Тогда
					НоваяСтрока.Действие = "";
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Стр.ИмяТабличнойЧасти) Тогда
			
				Поле = Элементы.Найти(Стр.ИмяПоля);
				Если Не Поле = Неопределено Тогда
				    Поле.ЦветФона = WebЦвета.ЛососьСветлый;
				КонецЕсли;
				
			Иначе
				
				Если НЕ Стр.ИмяПоля = Стр.ИмяТабличнойЧасти И Стр.ИмяТабличнойЧасти = "Товары" Тогда
					
					ТекКолонка = Элементы.Найти(Стр.ИмяТабличнойЧасти+Стр.ИмяПоля);    //это поле формы а не колонка
					
					Если НЕ ТекКолонка = Неопределено Тогда
						Если ТекКолонка.Видимость = Ложь Тогда
							
							ТекКолонка.Видимость	= Истина;
							ТекКолонка.Доступность	= Истина;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Стр.ИмяПоля = "Продавец1С" Тогда
				
				Если КтоМы = "Поставщик" Тогда
					УстановитьДействиеЮрФизЛицаСервер("ЮрФизЛицоСвое",		"Установить соответствие", Истина);
				Иначе
					УстановитьДействиеЮрФизЛицаСервер("ЮрФизЛицоСтороннее",	"Установить соответствие", Истина);
				КонецЕсли;
				
			ИначеЕсли Стр.ИмяПоля = "ПродавецEDI" Тогда
				
				Если КтоМы = "Поставщик" Тогда
					УстановитьДействиеЮрФизЛицаСервер("ЮрФизЛицоСвое",		"Исправить ошибки", Истина);
				Иначе
					УстановитьДействиеЮрФизЛицаСервер("ЮрФизЛицоСтороннее",	"Исправить ошибки", Истина);
				КонецЕсли;
				
			ИначеЕсли Стр.ИмяПоля = "Покупатель1С" Тогда
				
				Если КтоМы = "Поставщик" Тогда
					УстановитьДействиеЮрФизЛицаСервер("ЮрФизЛицоСтороннее",	"Установить соответствие", Истина);
				Иначе
					УстановитьДействиеЮрФизЛицаСервер("ЮрФизЛицоСвое",		"Установить соответствие", Истина);
				КонецЕсли;
				
			ИначеЕсли Стр.ИмяПоля = "ПокупательEDI" Тогда
				
				Если КтоМы = "Поставщик" Тогда
					УстановитьДействиеЮрФизЛицаСервер("ЮрФизЛицоСтороннее",	"Исправить ошибки", Истина);
				Иначе
					УстановитьДействиеЮрФизЛицаСервер("ЮрФизЛицоСвое",		"Исправить ошибки", Истина);
				КонецЕсли;
				
			ИначеЕсли Стр.ИмяПоля = "ГрузополучательEDI" Тогда	
				
				УстановитьДействиеЮрФизЛицаСервер("Грузополучатель",	"Исправить ошибки", Истина);
				
			ИначеЕсли Стр.ИмяПоля = "ГрузоотправительEDI" Тогда	
				
				УстановитьДействиеЮрФизЛицаСервер("Грузоотправитель",	"Исправить ошибки", Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаОшибок.Количество()=0 Тогда
		ЗакрытьПанельОшибокСервер();
	Иначе
		ОткрытьПанельОшибокСервер();
	КонецЕсли;
	
	
	Если РезультатПроверки.Успешно Тогда
		РезультатПроверки.Успешно = НЕ ЕстьАлкоОшибки;
	КонецЕсли;
	
	Если РезультатПроверки.Успешно Тогда
		РезультатПроверки.Успешно = НЕ ЕстьОшибкиУпаковок;
	КонецЕсли;
	
	Если РезультатПроверки.Успешно Тогда
		РезультатПроверки.Успешно = НЕ ЕстьОшибкиВПрикрепленных;
	КонецЕсли;
	
	Если НЕ РезультатПроверки.Успешно Тогда
		Если Сообщение.Направление = "Исходящее" Тогда
			ВывестиПанельИнформации("В сообщении найдены ошибки, их необходимо исправить перед отправкой.","Плохо");
		Иначе
			ВывестиПанельИнформации("Для загрузки сообщения проставьте соответствия.","Плохо");
		КонецЕсли;
	Иначе
		Если Сообщение.Направление = "Исходящее" Тогда
			Если Не ТаблицаОшибок.Количество() = 0 Тогда
				ВывестиПанельИнформации("В сообщении найдены ошибки, их необходимо исправить перед отправкой.");		
			Иначе
				ВывестиПанельИнформации("Поздравляем! Все ошибки исправлены, теперь можно отправить сообщение.","Хорошо");
			КонецЕсли;
		Иначе
			ВывестиПанельИнформации("Поздравляем! Все соответствия проставлены, теперь можно загрузить сообщение.","Хорошо");
		КонецЕсли;
	КонецЕсли;
	
	КопияСообщения = Неопределено;
	
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
	Возврат РезультатПроверки.Успешно;
	
КонецФункции

&НаСервере
Процедура ЗакрытьПанельОшибокСервер()
	
	Элементы.ПанельОшибок.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьПанельОшибокСервер()
	
	Элементы.ПанельОшибок.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельОшибокКлиент()
	
	Элементы.ПанельОшибок.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельОшибокКлиент()
	
	Элементы.ПанельОшибок.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДействиеЮрФизЛицаСервер(ИмяПоля,Текст,ЕстьОшибки = Ложь)
	
	Надпись = Элементы["Действие"+ИмяПоля];	
	Надпись.Заголовок = Текст;
	Если ЕстьОшибки Тогда
		Надпись.ЦветТекста = WebЦвета.Коричневый;
	Иначе
		Надпись.ЦветТекста = WebЦвета.СинийСоСтальнымОттенком;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиПоля1СвСообщение(ТекСообщение)
	
	ТекСообщение.Продавец1С 		= Продавец1С;
	ТекСообщение.Покупатель1С 		= Покупатель1С;
	ТекСообщение.Грузоотправитель1С = Грузоотправитель1С;
	ТекСообщение.Грузополучатель1С	= Грузополучатель1С;
	ТекСообщение.Валюта1С			= Валюта1С;
	
	ТекСообщение.Отправитель1С		= Отправитель1С;
	ТекСообщение.Получатель1С		= Получатель1С;
	
	ПереформироватьЕдиницыИзмерения=Ложь;
	
	ИсключаяСвойства = "СтранаEDI,НомерГТДEDI";
	
	Если ТекСообщение.ТипСообщения = "RECADV" Тогда
		ИсключаяСвойства = ИсключаяСвойства + ",КоличествоКВозвратуИПричинаEDI,КоличествоКВозвратуИПричина1С";	
	КонецЕсли;
		
	сч = 0;
	
	Для каждого Стр Из Товары Цикл
		
		ТекСтрокаТоваров = ТекСообщение.Товары[сч];
 		ЗаполнитьЗначенияСвойств(ТекСтрокаТоваров, Стр, , ИсключаяСвойства);
		Если ТипЗнч(ТекСтрокаТоваров.ЕдиницаИзмерения) <> ТипЗнч(Стр.ЕдиницаИзмерения) Тогда
			ПереформироватьЕдиницыИзмерения = Истина;
		КонецЕсли;
		
		сч = сч+1;
		
	КонецЦикла;
	
	Если ПереформироватьЕдиницыИзмерения Тогда //замена типа единицы измерения интерактивными действиями 
		ТекСообщение.Товары.Колонки.Удалить(ТекСообщение.Товары.Колонки.ЕдиницаИзмерения);
		ТекСообщение.Товары.Колонки.Добавить("ЕдиницаИзмерения");
		сч = 0;
		Для каждого Стр Из Товары Цикл
			ТекСтрокаТоваров = ТекСообщение.Товары[сч];
			ТекСтрокаТоваров.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
			сч = сч+1;
		КонецЦикла;
	КонецЕсли;//
	
	
	Если ТекСообщение.Направление = "Входящее" Тогда
		
		ТекСообщение.Партнер = Отправитель1С;
		
	Иначе
		
		ТекСообщение.Партнер = Получатель1С;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПометкиПолей()
	
	//рефакторинг оживить пометки
	
	//ЭлементыФормы.ПометкаПродавец1С.Видимость = Ложь;
	//ЭлементыФормы.ПометкаПродавецEDI.Видимость = Ложь;
	//ЭлементыФормы.ПометкаПокупатель1С.Видимость = Ложь;
	//ЭлементыФормы.ПометкаПокупательEDI.Видимость = Ложь;
	//
	//ЭлементыФормы.ПометкаГрузоотправитель1С.Видимость = Ложь;
	//ЭлементыФормы.ПометкаГрузоотправительEDI.Видимость = Ложь;
	//ЭлементыФормы.ПометкаГрузополучатель1С.Видимость = Ложь;
	//ЭлементыФормы.ПометкаГрузополучательEDI.Видимость = Ложь;
	//
	//ЭлементыФормы.ПометкаВалюта1С.Видимость = Ложь;
	//ЭлементыФормы.ПометкаВалютаEDI.Видимость = Ложь;
	//
	//ЭлементыФормы.ПометкаСтатус.Видимость = Ложь;
	//ЭлементыФормы.ПометкаКомментарий.Видимость = Ложь;
	//
	//ЭлементыФормы.ПометкаДатаВремяПоставки.Видимость = Ложь;
	//ЭлементыФормы.ПометкаДоговор.Видимость = Ложь;
	//
	//ЭлементыФормы.ПометкаЗаказ1С.Видимость = Ложь;
	//ЭлементыФормы.ПометкаЗаказEDI.Видимость = Ложь;
	//ЭлементыФормы.ПометкаНакладная1С.Видимость = Ложь;
	//ЭлементыФормы.ПометкаНакладнаяEDI.Видимость = Ложь;
	//ЭлементыФормы.ПометкаПриемка1С.Видимость = Ложь;
	//ЭлементыФормы.ПометкаПриемкаEDI.Видимость= Ложь;
	//ЭлементыФормы.ПометкаСчетФактура1С.Видимость = Ложь;
	//ЭлементыФормы.ПометкаСчетФактураEDI.Видимость= Ложь;
	//
	//ЭлементыФормы.ПометкаОтправитель1С.Видимость = Ложь;
	//ЭлементыФормы.ПометкаОтправительEDI.Видимость = Ложь;
	//ЭлементыФормы.ПометкаПолучатель1С.Видимость = Ложь;
	//ЭлементыФормы.ПометкаПолучательEDI.Видимость = Ложь;
	//
	//ЭлементыФормы.ПометкаСуммаВсего.Видимость = Ложь;
	//ЭлементыФормы.ПометкаСуммаВсегоБезНДС.Видимость = Ложь;
	//ЭлементыФормы.ПометкаСуммаВсегоНДС.Видимость = Ложь;
	//
	//ЭлементыФормы.ПометкаДатаОтгрузки.Видимость = Ложь;
	
	
	
КонецПроцедуры

&НаСервере
Процедура СделатьНевидимымЭлементФормы(ИмяЭлементаФормы)
	
	НайденныйЭлемент = Элементы.Найти(ИмяЭлементаФормы);
	Если НЕ НайденныйЭлемент = Неопределено Тогда
		
		НайденныйЭлемент.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура УстановитьВидимость()
	
	//НастройкаФормы была получена в МодульОбъекта().ПолучитьНастройкиФормыСообщения()
	
	НевидимыеПоля = НастройкаФормы.НевидимыеПоля;
	
	Для Каждого Стр ИЗ НевидимыеПоля Цикл
		
		ИмяПоля = Стр.Значение;
		
		// пробуем всевозможные варианты
		СделатьНевидимымЭлементФормы("Надпись"+ИмяПоля);
		СделатьНевидимымЭлементФормы("НадписьНомер"	+ ИмяПоля);
		СделатьНевидимымЭлементФормы("НадписьДата"	+ ИмяПоля);
		СделатьНевидимымЭлементФормы(ИмяПоля);
		СделатьНевидимымЭлементФормы(ИмяПоля+"1С");
		СделатьНевидимымЭлементФормы(ИмяПоля+"EDI");
		СделатьНевидимымЭлементФормы(ИмяПоля+"Номер");
		СделатьНевидимымЭлементФормы(ИмяПоля+"Дата");
		
	КонецЦикла;
	
	НевидимыеКолонки = НастройкаФормы.НевидимыеКолонки;
	
	Для Каждого Колонка ИЗ Элементы.Товары.ПодчиненныеЭлементы Цикл
		
	Если ТипЗнч(Колонка) = Тип("ПолеФормы") Тогда 
		
		НайденнаяКолонка = НевидимыеКолонки.НайтиПоЗначению(Сред(Колонка.Имя,7));
		
		Если НайденнаяКолонка = Неопределено Тогда
			Колонка.Видимость	= Истина;
			Колонка.Доступность = Истина;
		Иначе
			Колонка.Видимость	= Ложь;
			Колонка.Доступность	= Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Колонка) = Тип("ГруппаФормы") Тогда
		
		Для Каждого Колонка ИЗ Колонка.ПодчиненныеЭлементы Цикл
			
		НайденнаяКолонка = НевидимыеКолонки.НайтиПоЗначению(Сред(Колонка.Имя,7));
		
			Если НайденнаяКолонка = Неопределено Тогда
				Колонка.Видимость	= Истина;
				Колонка.Доступность = Истина;
			Иначе
				Колонка.Видимость	= Ложь;
				Колонка.Доступность	= Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	КонецЦикла;
	
	Если НЕ Элементы.Заказ1С.Видимость И НЕ Элементы.Накладная1С.Видимость И НЕ Элементы.Приемка1С.Видимость И НЕ Элементы.СчетФактура1С.Видимость Тогда
		Элементы.ГруппаСвязанныеДокументы.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбязательныйКодТовараПокупателя = Истина Тогда
		КолонкаКода = Элементы.ТоварыКодТовараПокупателя;
		КолонкаКода.Видимость = Истина;
		КолонкаКода.ТолькоПросмотр = Ложь;
		КолонкаКода.Доступность = Истина;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "ORDERS" И Сообщение.Направление = "Входящее" Тогда
		Элементы.ТоварыНеЗагружать.Видимость = Истина;
	Иначе
		Элементы.ТоварыНеЗагружать.Видимость = Ложь;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "ORDRSP"
		ИЛИ Сообщение.ТипСообщения = "RECADV" Тогда
		Элементы.ТоварыКомментарий.Видимость = Истина;
		Элементы.ТоварыКомментарий.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ТоварыКомментарий.ТолькоПросмотр = НЕ (Сообщение.ТипСообщения = "ORDRSP");
	
	Если (Сообщение.ТипСообщения = "DESADV" И Сообщение.Направление = "Исходящее")
		 ИЛИ (Сообщение.ТипСообщения = "ORDRSP" И Сообщение.Направление = "Исходящее")
		 ИЛИ (Сообщение.ТипСообщения = "PORDERS" И Сообщение.Направление = "Исходящее")
	Тогда
		Элементы.ДействиеДатаПоставки.Видимость = Истина;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "INVOIC" Тогда
		
		Если НЕ ЗначениеЗаполнено(ДатаПоставки) Тогда
			Элементы.ДействиеДатаПоставки.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "ORDERS" И Сообщение.Направление = "Входящее" Тогда
		Если Сообщение.Свойство("ОбратныйЗаказEDI") И ЗначениеЗаполнено(Сообщение.ОбратныйЗаказEDI.Номер) Тогда
            Элементы.ТоварыНеЗагружать.Доступность = Ложь;
			Элементы.ТоварыНеЗагружать.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
			
	//+Для Магнита
	Если Не (Сообщение.Свойство("ДатаВывозаОтПоставщика")
		и ЗначениеЗаполнено(Сообщение.ДатаВывозаОтПоставщика))
	Тогда
		Элементы.ДатаВывозаОтПоставщика.Видимость = Ложь;
		Элементы.НадписьДатаВывоза.Видимость = Ложь;
	КонецЕсли;
	Если Сообщение.ТипСообщения <> "ORDRSP" Тогда 
//		ЭлементыФормы.ДатаВывозаОтПоставщика.ТолькоПросмотр = Истина;
		Элементы.ДатаВывозаОтПоставщика.Доступность = Ложь;
	Иначе
		Элементы.ДатаВывозаОтПоставщика.КнопкаВыбора = Истина;
	КонецЕсли;
	//-
	
	//устанавливаем видимой закладку "Данные об упаковках"
	//если у партнера установлена соответствующая настройка и в сообщении есть раздел для хранения данных об упаковках
	СообщениеМожетСодержатьДанныеОбУпаковках = Сообщение.Свойство("ТранспортныеУпаковки");
	Элементы.СтраницаТранспортныеУпаковки.Видимость = (ОтправлятьДанныеОбУпаковках = Истина) И СообщениеМожетСодержатьДанныеОбУпаковках;
	
	//Врата X5
	Если  ((Сообщение.ТипСообщения = "ORDERS" И Сообщение.Направление = "Входящее") ИЛИ (Сообщение.ТипСообщения = "ORDRSP" И Сообщение.Направление = "Исходящее"))
		и Сообщение.Свойство("Транспортировка")
		и Сообщение.Транспортировка<>Неопределено
		и Сообщение.Транспортировка.Свойство("ДатаВремяПрибытия") 
		и Сообщение.Транспортировка.ДатаВремяПрибытия<>неопределено 
		и Сообщение.Транспортировка.ДатаВремяПрибытия.Количество()>0
		Тогда 
		Элементы.ГруппаТранспортировка.Видимость = истина;
	КонецЕсли;
	
	ОтображатьКонтакты = ложь;
	Если (Сообщение.ТипСообщения = "ORDERS" или Сообщение.ТипСообщения = "ORDRSP" или Сообщение.ТипСообщения = "DESADV") и 
		Сообщение.Свойство("КонтактноеЛицоФИО") и ЗначениеЗаполнено(Сообщение.КонтактноеЛицоФИО) Тогда
		ОтображатьКонтакты = Истина;
	КонецЕсли;
			
	Элементы.ГруппаКонтакты.Видимость = ОтображатьКонтакты;		
	Элементы.ДействиеДатаПоставки.Ширина = ?(ОтображатьКонтакты, 8, Элементы.ДействиеЮрФизЛицоСвое.Ширина);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПолей()
	
	// пока опускаем грузоотправителя
	Элементы.Грузоотправитель1С.ТолькоПросмотр = Истина;
	
	ТолькоПросмотрПолей1С = НастройкаФормы.ТолькоПросмотрПолей1С;
	
	//Если НастройкаФормы.ТолькоПросмотрПолей1С Тогда
	
	Элементы.Документ1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	
	Элементы.Покупатель1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.Продавец1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.Грузоотправитель1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.Грузополучатель1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.Договор.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.Валюта1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	
	Элементы.Заказ1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.Накладная1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.Приемка1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.СчетФактура1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	//Элементы.ДатаВывозаОтПоставщика.ТолькоПросмотр = ТолькоПросмотрПолей1С;//+Для Магнита
	
	Элементы.Отправитель1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.Получатель1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	
	Элементы.ТоварыНоменклатура.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.ТоварыХарактеристикаНоменклатуры.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.ТоварыЕдиницаИзмерения.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.ТоварыСтавкаНДС1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.ТоварыСтрана1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.ТоварыНомерГТД1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	Элементы.ТоварыРешениеПоВозврату1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;	
	
	Элементы.ТоварыПричинаРешения.ТолькоПросмотр = ТолькоПросмотрСообщения;
	
	//КонецЕсли;
	
	ТолькоПросмотрПолейEDI = НастройкаФормы.ТолькоПросмотрПолейEDI;
	
	Элементы.ПокупательEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ПродавецEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ГрузоотправительEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ГрузополучательEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	
	Элементы.ВалютаEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	
	Элементы.ОбратныйЗаказНомер.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ЗаказНомер.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ЗаказДата.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.НакладнаяНомер.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.НакладнаяДата.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ПриемкаНомер.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ПриемкаДата.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.СчетФактураНомер.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.СчетФактураДата.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	
	Элементы.ОтправительEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ПолучательEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	
	Элементы.ТоварыGTIN.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Если ОбязательныйКодТовараПокупателя = Истина Тогда
		Элементы.ТоварыКодТовараПокупателя.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ТоварыКодТовараПокупателя.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	КонецЕсли;
	Элементы.ТоварыКодТовараПоставщика.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ТоварыНаименование.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ТоварыКодЕдиницыИзмеренияEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	
	Элементы.ТоварыСтавкаНДСEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ТоварыСтранаEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ТоварыНомерГТДEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ТоварыКоличествоКВозвратуИПричинаEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Элементы.ТоварыКоличествоКВозвратуИПричина1С.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	
	//КонецЕсли;
	
	Элементы.ТоварыКоличество.ТолькоПросмотр = Истина;
	Элементы.ТоварыЦенаСНДС.ТолькоПросмотр = Истина;
	Элементы.ТоварыЦенаБезНДС.ТолькоПросмотр = Истина;
	Элементы.ТоварыСуммаСНДС.ТолькоПросмотр = Истина;
	Элементы.ТоварыСуммаБезНДС.ТолькоПросмотр = Истина;
	Элементы.ТоварыСуммаНДС.ТолькоПросмотр = Истина;
	
	Элементы.ТоварыКоличествоСверхпоставки.ТолькоПросмотр = Истина;
	Элементы.ТоварыКоличествоНедопоставки.ТолькоПросмотр = Истина;
	
	Если СообщениеСодержитДанныеОбУпаковках Тогда	//если сообщение открыто "на просмотр"  //если нужно исправить упаковки такого сообщения - сообщение следует удалять
		Элементы.ТоварныеПозиции.Доступность 																= НЕ Параметры.ТолькоПросмотр;
		Элементы.ТранспортныеУпаковки.КоманднаяПанель.Доступность 											= НЕ Параметры.ТолькоПросмотр;
		Элементы.ТранспортныеУпаковки.ПодчиненныеЭлементы.ТранспортныеУпаковкиСоставУпаковки.Доступность 	= НЕ Параметры.ТолькоПросмотр;
		Элементы.ТранспортныеУпаковки.ПодчиненныеЭлементы.ТранспортныеУпаковкиКоличество.Доступность 		= НЕ Параметры.ТолькоПросмотр;
		Элементы.ГруппаРазделительИУправляющиеКнопки.Доступность											= НЕ Параметры.ТолькоПросмотр;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипПоля1С(ИмяПоля)
	
	Если МетаданныеСообщения=Неопределено Тогда 
		МетаданныеСообщения=МодульОбъекта().ПолучитьМетаданныеСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
	КонецЕсли;
	
	СтрокаМетаданных = МетаданныеСообщения.Найти(ИмяПоля,"ИмяПоля");
	
	Если НЕ СтрокаМетаданных = Неопределено Тогда
		
		Тип1С = СтрокаМетаданных.Тип1С;
		Если ЗначениеЗаполнено(Тип1С) Тогда
			
			Если СтрокаМетаданных.Принадлежность = "1С" ИЛИ СтрокаМетаданных.Принадлежность = "=" Тогда
				ИмяНаФорме = ИмяПоля;
			Иначе
				ИмяНаФорме = ИмяПоля+"1С";
			КонецЕсли;
			
			ПолеФормы	= Элементы[ИмяНаФорме];
			ТипПоля		= МодульОбъекта().ПолучитьТипЗначенияОбъекта(Тип1С);
			
			Если ТипПоля = Неопределено ИЛИ (ВнешнееХранилище И Найти(ТипПоля,"КонтурEDI_")>0) Тогда
				//Сообщить("Не задан тип объекта 1С для поля с типом "+Тип1С);
			Иначе	
				
				Элементы[ИмяНаФорме].ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
				                     
				Если НЕ ЗначениеЗаполнено(Сообщение[ИмяНаФорме]) Тогда
					
					ЭтаФорма[ИмяНаФорме] = МодульОбъекта().ПолучитьПустуюСсылкуОбъекта(Тип1С);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры
&НаСервере
Процедура УстановитьТипКолонки1С(ИмяПоля)
	
	СвойстваПоля = МодульОбъекта().ПолучитьСвойстваПоля(ИмяПоля,МетаданныеСообщения);
	
	Если ЗначениеЗаполнено(СвойстваПоля.ИмяНаФорме1С) И ЗначениеЗаполнено(СвойстваПоля.Тип1С) Тогда
		
		ПолеФормы	= Элементы["Товары"+СвойстваПоля.ИмяНаФорме1С];
		ТипПоля		= МодульОбъекта().ПолучитьТипЗначенияОбъекта(СвойстваПоля.Тип1С);
		
		Если ТипПоля = Неопределено Тогда
			
			//Сообщить("Не задан тип объекта 1С для поля с типом "+СвойстваПоля.Тип1С);
			
		Иначе	
			
			ПолеФормы.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура УстановитьТипыПолей1С()
	
	УстановитьТипПоля1С("Документ");
	
	УстановитьТипПоля1С("Продавец");
	УстановитьТипПоля1С("Покупатель");
	УстановитьТипПоля1С("Грузоотправитель");
	УстановитьТипПоля1С("Грузополучатель");
	УстановитьТипПоля1С("Договор");
	УстановитьТипПоля1С("Валюта");
	УстановитьТипПоля1С("Отправитель");
	УстановитьТипПоля1С("Получатель");
	УстановитьТипПоля1С("Заказ");
	УстановитьТипПоля1С("Накладная");
	УстановитьТипПоля1С("Приемка");
	
	УстановитьТипКолонки1С("Номенклатура");
	УстановитьТипКолонки1С("ХарактеристикаНоменклатуры");
	УстановитьТипКолонки1С("ЕдиницаИзмерения");
	УстановитьТипКолонки1С("СтавкаНДС");
	УстановитьТипКолонки1С("Страна");
	УстановитьТипКолонки1С("НомерГТД");
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПрикрепленныеСообщения()
	
	ТаблицаПрикрепленныхСообщений.Очистить();
	
	ОтправкаТолькоALCRPT = Ложь;
	
	Накладная = Неопределено;

	Если Найти("\DESADV\INVOIC\",Сообщение.ТипСообщения) > 0 Тогда
		Если Сообщение.ТипСообщения = "DESADV" И МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С,"ОтправлятьALCRPT") = Истина Тогда
			 Накладная = Сообщение.Документ1С;
		ИначеЕсли Сообщение.ТипСообщения = "INVOIC" И МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С,"ОтправлятьALCRPTсINVOIC") = Истина Тогда
			 Накладная = МодульОбъекта().ПолучитьНакладнуюСчетаФактуры(Сообщение.Документ1С);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Накладная) Тогда // Нужно отправить ALCRPT
		
		Элементы.СтраницаАлкоголь.Видимость = Истина;
		
		АлкоТовары.Очистить();
		
		СообщениеАлко = МодульОбъекта().ПодготовитьИсходящееСообщение("ALCRPT",Накладная);
		//!! если сделать произвольным реквизитом при передаче на клиент упадет! или чистить ТЗ у неё
		
		Для каждого Стр Из СообщениеАлко.Товары Цикл
			
			НоваяСтрока = АлкоТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			
			НоваяСтрока.АлкоЛицензияПоставщика	= МодульОбъекта().ПолучитьПредставлениеАлкоЛицензии(Стр.АлкоЛицензияПоставщика); 
			НоваяСтрока.АлкоСертификатПродукции = МодульОбъекта().ПолучитьПредставлениеАлкоЛицензии(Стр.АлкоСертификатПродукции); 
			
		КонецЦикла;
		
		НомерТТН	= СообщениеАлко.ТранспортнаяНакладнаяEDI.Номер;
		ДатаТТН		= СообщениеАлко.ТранспортнаяНакладнаяEDI.Дата;
		
		//отправляем только алко если desadv уже дошел и явно не указано что это переотправка desadv
		Если Сообщение.ТипСообщения = "DESADV" Тогда
			Если МодульОбъекта().ПолучитьСтатусСообщения(, Накладная, "DESADV") = "Доставлен" 
				И НЕ ЗначениеЗаполнено(Параметры.ПереотправляемоеСообщениеСсылка) Тогда
				ОтправкаТолькоALCRPT = Истина;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПрикрепленныхСообщений.Добавить();
		НоваяСтрока.СообщениеПредставление = "Данные об алкогольной продукции (ALCRPT)";
		НоваяСтрока.Документ = Сообщение.ДокументСсылка;
		
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "DESADV" Тогда
		
		Если МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С,"ОтправлятьINVOICсDESADV") = Истина Тогда
			
			СчетФактура = МодульОбъекта().ПолучитьСчетФактуруНакладной(Сообщение.Документ1С);
			//!! если сделать произвольным реквизитом при передаче на клиент упадет! или чистить ТЗ у неё
			
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				СообщениеСФ = МодульОбъекта().ПодготовитьИсходящееСообщение("INVOIC",СчетФактура);
				
				НоваяСтрока = ТаблицаПрикрепленныхСообщений.Добавить();
				НоваяСтрока.СообщениеПредставление = "Счет-фактура (INVOIC)";
				НоваяСтрока.Документ = СчетФактура;
				
			Иначе
				
				НоваяСтрока = ТаблицаПрикрепленныхСообщений.Добавить();
				НоваяСтрока.СообщениеПредставление = "Счет-фактура (INVOIC)";
				НоваяСтрока.Документ = СчетФактура;
				НоваяСтрока.Примечание = "Не найден счет-фактура!";
				НоваяСтрока.ЕстьОшибки = Истина;
				
			КонецЕсли;
			
		КонецЕсли
		
	КонецЕсли;
	
	Если ТаблицаПрикрепленныхСообщений.Количество()=0 Тогда
		
		Элементы.ПанельДопИнформации.ТекущаяСтраница = Элементы.ПанельДопИнформации.ПодчиненныеЭлементы.СтраницаНаименований;
		
	Иначе
		
		Элементы.ПанельДопИнформации.ТекущаяСтраница = Элементы.ПанельДопИнформации.ПодчиненныеЭлементы.СтраницаПрикрепленныхСообщений;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляНаФорме()
	
	Если НЕ Сообщение = Неопределено Тогда
		
		Документ1С			= Сообщение.Документ1С;
		
		ПолучитьПрикрепленныеСообщения();
		
		НадписьЗаголовок = Элементы.НадписьОткрытьДокумент;
		
		Если ЗначениеЗаполнено(Документ1С) Тогда
			НадписьЗаголовок.Заголовок = СокрЛП(Документ1С);
			НадписьЗаголовок.Гиперссылка = Истина;
			НадписьЗаголовок.ЦветТекста = WebЦвета.СинийСоСтальнымОттенком;
		Иначе
			Если Сообщение.ТипСообщения = "ORDERS" Тогда
				НадписьЗаголовок.Заголовок = "не создан";
			Иначе
				НадписьЗаголовок.Заголовок = "не привязан";
			КонецЕсли;
			НадписьЗаголовок.Гиперссылка = Ложь;
			НадписьЗаголовок.ЦветТекста = Элементы.НадписьЮрФизЛицоСвое.ЦветТекста;
		КонецЕсли;
		
		ДокументНомер		= Сообщение.ДокументEDI.Номер;
		ДокументДата		= Сообщение.ДокументEDI.Дата;
		
		ПродавецEDI			= Сообщение.ПродавецEDI.GLN;
		ПокупательEDI		= Сообщение.ПокупательEDI.GLN;
		ГрузоотправительEDI = Сообщение.ГрузоотправительEDI.GLN;
		ГрузополучательEDI	= Сообщение.ГрузополучательEDI.GLN;
		ВалютаEDI			= Сообщение.ВалютаEDI;
		
		ОтправительEDI	= Сообщение.ОтправительEDI.GLN;
		ПолучательEDI	= Сообщение.ПолучательEDI.GLN;
		
		Продавец1С			= Сообщение.Продавец1С;
		Покупатель1С		= Сообщение.Покупатель1С;
		Грузополучатель1С	= Сообщение.Грузополучатель1С;
		Грузоотправитель1С  = Сообщение.Грузоотправитель1С;
		
		Элементы.НадписьПримечание.Видимость = Ложь;
		
		ТекНомерСерииЗаказов = "";
		Если Сообщение.Свойство("НомерСерииЗаказов",ТекНомерСерииЗаказов) Тогда
			Если ЗначениеЗаполнено(ТекНомерСерииЗаказов) Тогда
				Элементы.НадписьПримечание.Заголовок = "№ серии заказов: " + СокрЛП(ТекНомерСерииЗаказов);
				Элементы.НадписьПримечание.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Сообщение.Свойство("Комментарий") Тогда
			ТипПоставки = МодульОбъекта().ТипПоставкиСообщения(Сообщение);
			Комментарий = ""+Сообщение.Комментарий + ?(ТипПоставки = "",""," Тип поставки: "+ТипПоставки);
		КонецЕсли;
		
		Если Сообщение.Свойство("ПромоНомер") Тогда
			ПромоНомер	= Сообщение.ПромоНомер;
		КонецЕсли;
		
		Если Сообщение.Свойство("Контракт") Тогда
			КонтрактНомер	= Сообщение.Контракт.Номер;
			КонтрактДата	= Сообщение.Контракт.Дата;
			Если Не ЗначениеЗаполнено(КонтрактНомер) и не ЗначениеЗаполнено(КонтрактДата) Тогда
				НастройкаФормы.НевидимыеПоля.Добавить("Контракт");;	
			КонецЕсли;
		КонецЕсли;
		
		// представления юр\физ лиц
		Если КтоМы=Неопределено Тогда 
			КтоМы = МодульОбъекта().ОпределитьКемМыЯвляемся(Сообщение);
		КонецЕсли;

		Если КтоМы = "Поставщик" Тогда
			Элементы.ПредставлениеЮрФизЛицоСвое.Заголовок		= МодульОбъекта().ПолучитьПредставлениеЮрФизЛица(Сообщение.ПродавецEDI, Сообщение.Продавец1С);
			Элементы.ПредставлениеЮрФизЛицоСтороннее.Заголовок = МодульОбъекта().ПолучитьПредставлениеЮрФизЛица(Сообщение.ПокупательEDI, Сообщение.Покупатель1С);
		Иначе
			Элементы.ПредставлениеЮрФизЛицоСвое.Заголовок		= МодульОбъекта().ПолучитьПредставлениеЮрФизЛица(Сообщение.ПокупательEDI, Сообщение.Покупатель1С);
			Элементы.ПредставлениеЮрФизЛицоСтороннее.Заголовок = МодульОбъекта().ПолучитьПредставлениеЮрФизЛица(Сообщение.ПродавецEDI, Сообщение.Продавец1С);
		КонецЕсли;
		
		Элементы.ПредставлениеГрузополучатель.Заголовок	= МодульОбъекта().ПолучитьПредставлениеЮрФизЛица(Сообщение.ГрузополучательEDI,	Сообщение.Грузополучатель1С,	Истина);
		Элементы.ПредставлениеГрузоотправитель.Заголовок	= МодульОбъекта().ПолучитьПредставлениеЮрФизЛица(Сообщение.ГрузоотправительEDI,	Сообщение.Грузоотправитель1С);
	
		Если Элементы.ПредставлениеЮрФизЛицоСвое.Заголовок = "не указан" Тогда
			Элементы.ПредставлениеЮрФизЛицоСвое.Заголовок = "не указана";
			Элементы.ДействиеЮрФизЛицоСвое.Видимость = Ложь;
		Иначе
			Элементы.ДействиеЮрФизЛицоСвое.Видимость = Истина;
		КонецЕсли;
		Если Элементы.ПредставлениеЮрФизЛицоСтороннее.Заголовок = "не указан" Тогда
			Элементы.ДействиеЮрФизЛицоСтороннее.Видимость = Ложь;
		Иначе
			Элементы.ДействиеЮрФизЛицоСтороннее.Видимость = Истина;
		КонецЕсли;
		Если Элементы.ПредставлениеГрузоотправитель.Заголовок = "не указан" Тогда
			Элементы.ДействиеГрузоотправитель.Видимость = Ложь;
		Иначе
			Элементы.ДействиеГрузоотправитель.Видимость = Истина;
		КонецЕсли;
		Если Элементы.ПредставлениеГрузополучатель.Заголовок = "не указан" Тогда
			Элементы.ДействиеГрузополучатель.Видимость = Ложь;
		Иначе
			Элементы.ДействиеГрузополучатель.Видимость = Истина;
		КонецЕсли;
		
		//+для АТАК
		Если Сообщение.Свойство("ДатаПоставкиФактическая") 
			И ЗначениеЗаполнено(Сообщение.ДатаПоставкиФактическая) Тогда
			Элементы.ПредставлениеДатыПоставки.Заголовок		= ПолучитьПредставлениеДатыПоставки(Сообщение.ДатаПоставкиФактическая)	
		//-
		Иначе
			Элементы.ПредставлениеДатыПоставки.Заголовок		= ПолучитьПредставлениеДатыПоставки(Сообщение.ДатаПоставки);
			Если Сообщение.ТипСообщения = "ORDRSP" Тогда
				Результат = ПроверитьИзменениеДатыПоставки();
				Если Результат.Изменение Тогда
					Элементы.ПредставлениеДатыПоставки.ЦветТекста = WebЦвета.ТемноОранжевый;
				Иначе
					Элементы.ПредставлениеДатыПоставки.ЦветТекста = WebЦвета.ТемноЗеленый;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Сообщение.Свойство("КонтактноеЛицоФИО") 
			И ЗначениеЗаполнено(Сообщение.КонтактноеЛицоФИО) Тогда
			Элементы.ПредставлениеКонтакты.Заголовок = ПолучитьПредставлениеКонтактногоЛицаПоЗаказу();
		КонецЕсли;

		Отправитель1С		= Сообщение.Отправитель1С;
		Получатель1С		= Сообщение.Получатель1С;
		
		Валюта1С			= Сообщение.Валюта1С;
		
		Если Не ЗначениеЗаполнено(Сообщение.Договор) Тогда
			Сообщение.Договор = МодульОбъекта().ПолучитьДоговорКонтрагентаДляСообщения(Сообщение,МодульОбъекта().ОпределитьКемМыЯвляемся(Сообщение));
		КонецЕсли;
		Договор				= Сообщение.Договор;
		
		Статус				= Сообщение.Статус;
		
		Заказ1С				= Сообщение.Заказ1С;
		Накладная1С			= Сообщение.Накладная1С;
		Приемка1С			= Сообщение.Приемка1С;
		Если Сообщение.Свойство("СчетФактура1С") Тогда
			СчетФактура1С		= Сообщение.СчетФактура1С;
		КонецЕсли;
		
		Если Сообщение.Свойство("ОбратныйЗаказEDI") Тогда
			ОбратныйЗаказНомер  = Сообщение.ОбратныйЗаказEDI.Номер;
		КонецЕсли;
		
		ЗаказНомер			= Сообщение.ЗаказEDI.Номер;
		ЗаказДата			= Сообщение.ЗаказEDI.Дата;
		НакладнаяНомер		= Сообщение.НакладнаяEDI.Номер;
		НакладнаяДата		= Сообщение.НакладнаяEDI.Дата;
		ПриемкаНомер		= Сообщение.ПриемкаEDI.Номер;
		ПриемкаДата			= Сообщение.ПриемкаEDI.Дата;
		Если Сообщение.Свойство("СчетФактураEDI") Тогда
			СчетФактураНомер	= Сообщение.СчетФактураEDI.Номер;
			СчетФактураДата		= Сообщение.СчетФактураEDI.Дата;
		КонецЕсли;
		
		//+для Магнита
		Если Сообщение.Свойство("ДатаВывозаОтПоставщика") И ЗначениеЗаполнено(Сообщение.ДатаВывозаОтПоставщика) Тогда
			ДатаВывозаОтПоставщика	= Сообщение.ДатаВывозаОтПоставщика;
		КонецЕсли;
		//-
		
		Если (Сообщение.ТипСообщения = "INVOIC") ИЛИ (Сообщение.ТипСообщения = "COINVOIC") Тогда
			
			Если Сообщение.Свойство("Исправление") Тогда
				
				Исправление = Сообщение.Исправление;
				НомерИсправления = Сообщение.НомерИсправления;
				
				Элементы.ГруппаСтатусИсправление.Видимость=Истина;
				
			КонецЕсли;
			
		КонецЕсли;	

		Если Сообщение.ТипСообщения = "COINVOIC" Тогда
			
			СуммаВсегоУвеличение		= Сообщение.СуммаВсегоУвеличение;
			СуммаВсегоНДСУвеличение		= Сообщение.СуммаВсегоНДСУвеличение;
			СуммаВсегоБезНДСУвеличение	= Сообщение.СуммаВсегоБезНДСУвеличение;
			
			СуммаВсегоУменьшение		= Сообщение.СуммаВсегоУменьшение;
			СуммаВсегоНДСУменьшение		= Сообщение.СуммаВсегоНДСУменьшение;
			СуммаВсегоБезНДСУменьшение	= Сообщение.СуммаВсегоБезНДСУменьшение;
			
			Элементы.ПанельСумм.ТекущаяСтраница = Элементы.ГруппаИтогиТабличнойЧастиПлюсМинус;
			
		Иначе
			
			СуммаВсего			= Сообщение.СуммаВсего;
			СуммаВсегоНДС		= Сообщение.СуммаВсегоНДС;
			СуммаВсегоБезНДС	= Сообщение.СуммаВсегоБезНДС;
			
		КонецЕсли;
		
		КоличествоСтрок		= Сообщение.Товары.Количество();
		
		Если КоличествоСтрок = 0 Тогда
			НадписьТовары = "Товары";
		Иначе
			НадписьТовары = "Товары ("+КоличествоСтрок+")";
		КонецЕсли;
		
		Элементы.СтраницаТовары.Заголовок = НадписьТовары;
		
		ПустаяСсылкаНоменклатуры				= МодульОбъекта().ПолучитьПустуюСсылкуОбъекта("Номенклатура");
		ПустаяСсылкаХарактеристикиНоменклатуры	= МодульОбъекта().ПолучитьПустуюСсылкуОбъекта("ХарактеристикаНоменклатуры");
		ПустаяСсылкаЕдиницыИзмерения			= МодульОбъекта().ПолучитьПустуюСсылкуОбъекта("ЕдиницаИзмерения");
		ПустаяСсылкаСтавкиНДС					= МодульОбъекта().ПолучитьПустуюСсылкуОбъекта("СтавкаНДС");
		ПустаяСсылкаСтрана						= МодульОбъекта().ПолучитьПустуюСсылкуОбъекта("Страна");
		ПустаяСсылкаНомерГТД					= МодульОбъекта().ПолучитьПустуюСсылкуОбъекта("НомерГТД");
		
		Товары.Очистить();
		ТоварныеПозиции.Очистить();
		НомСтр = 1;
				
		ПробоватьСчитатьУпаковки = Ложь;
		ПоказыватьКоличествоУпаковок = Ложь;
		ПоказыватьКоличествоВОдномМесте = Ложь;
		ЕстьКонечныйГрузополучательВТоварах = Ложь;
		ЕстьКоличествоКВозвратуИПричина = Ложь;
		ЕстьКоличествоСверхпоставки = Ложь;
		ЕстьКоличествоНедопоставки = Ложь;
		
		Если Сообщение.ТипСообщения = "ORDERS" Тогда
			Если НЕ Сообщение.Товары.Колонки.Найти("КоличествоВОдномМесте")=Неопределено Тогда
				ПробоватьСчитатьУпаковки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ОтправлятьДанныеОбУпаковках 		= Ложь;
		СообщениеСодержитДанныеОбУпаковках 	= Ложь;
		Если КтоМы = "Поставщик" Тогда
			Если Сообщение.Направление = "Исходящее" Тогда
				Если ЗначениеЗаполнено(Сообщение.Получатель1С) Тогда
					ОбязательныйКодТовараПокупателя = (МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С, "ОбязательныйКодТовараТорговойСети") = Истина);
					Если Сообщение.ТипСообщения = "DESADV" Тогда
						ОбязательныйСФвDESADV 		= (МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С, "ОбязательныйСФвDESADV") = Истина);
						ОтправлятьДанныеОбУпаковках = (МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С, "ОтправлятьДанныеОбУпаковках") = Истина);
						Если Сообщение.Свойство("ТранспортныеУпаковки") И Сообщение.ТранспортныеУпаковки<>Неопределено И Не Сообщение.ТранспортныеУпаковки.Строки.Количество() = 0 Тогда
							СообщениеСодержитДанныеОбУпаковках  = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Стр Из Сообщение.Товары Цикл
			
			НоваяСтрока = Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			НоваяСтрока.НомерСтроки = НомСтр;
			НомСтр = НомСтр + 1;
			
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				НоваяСтрока.Номенклатура = ПустаяСсылкаНоменклатуры;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
				НоваяСтрока.ХарактеристикаНоменклатуры = ПустаяСсылкаХарактеристикиНоменклатуры;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
				НоваяСтрока.ЕдиницаИзмерения = ПустаяСсылкаЕдиницыИзмерения;
			КонецЕсли;
			Если НЕ Сообщение.ТипСообщения = "COINVOIC" Тогда
				Если НЕ ЗначениеЗаполнено(Стр.СтавкаНДС1С) Тогда
					НоваяСтрока.СтавкаНДС1С = ПустаяСсылкаСтавкиНДС;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Стр.Страна1С) Тогда
				НоваяСтрока.Страна1С = ПустаяСсылкаСтрана;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Стр.НомерГТД1С) Тогда
				НоваяСтрока.НомерГТД1С = ПустаяСсылкаНомерГТД;
			КонецЕсли;
			
			Если ПробоватьСчитатьУпаковки Тогда
				
				Если НоваяСтрока.КодЕдиницыИзмеренияEDI = "CT" ИЛИ НоваяСтрока.КодЕдиницыИзмеренияEDI = "PA" Тогда
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				Иначе
					Если ЗначениеЗаполнено(НоваяСтрока.КоличествоВОдномМесте) И ЗначениеЗаполнено(НоваяСтрока.Количество) Тогда
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество/НоваяСтрока.КоличествоВОдномМесте;
					КонецЕсли;						
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрока.КоличествоУпаковок) Тогда
					ПоказыватьКоличествоУпаковок = Истина;
				КонецЕсли;					
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоваяСтрока.КоличествоВОдномМесте) Тогда
				ПоказыватьКоличествоВОдномМесте = Истина;
			КонецЕсли;
			
			//заполняем товарные позиции (sscc) только для создаваемых (новых) сообщений (элемент справочника "Сообщения" отсутствует)
			ДобавитьТоварнуюПозицию(НоваяСтрока);
			
			Если Сообщение.ТипСообщения = "ORDERS" И Сообщение.Товары.Колонки.Найти("КонечныйГрузополучательGLN")<>Неопределено  и Значениезаполнено(Стр.КонечныйГрузополучательGLN) Тогда
				НоваяСтрока.КонечныйГрузополучательПредставление = Стр.КонечныйГрузополучательGLN;
				ЕстьКонечныйГрузополучательВТоварах=Истина;
			иначе
				НоваяСтрока.КонечныйГрузополучательПредставление = "";
			КонецЕсли;
			
			Если Сообщение.ТипСообщения = "RECADV" Тогда
				Если Сообщение.Товары.Колонки.Найти("КоличествоКВозвратуИПричина1С") <> Неопределено
					И ЗначениеЗаполнено(НоваяСтрока.КоличествоКВозвратуИПричина1С) Тогда
					ЕстьКоличествоКВозвратуИПричина = Истина;
				КонецЕсли;
				
				Если Сообщение.Товары.Колонки.Найти("КоличествоСверхпоставки") <> Неопределено
					И ЗначениеЗаполнено(НоваяСтрока.КоличествоСверхпоставки) Тогда
					ЕстьКоличествоСверхпоставки = Истина;
				КонецЕсли;
				
				Если Сообщение.Товары.Колонки.Найти("КоличествоНедопоставки") <> Неопределено
					И ЗначениеЗаполнено(НоваяСтрока.КоличествоНедопоставки) Тогда
					ЕстьКоличествоНедопоставки = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкаФормы.НевидимыеКолонки.Добавить("КоличествоКВозвратуИПричинаEDI");
		Если НЕ ЕстьКоличествоКВозвратуИПричина Тогда
			НастройкаФормы.НевидимыеКолонки.Добавить("КоличествоКВозвратуИПричина1С");
		КонецЕсли;
		Если НЕ ЕстьКоличествоСверхпоставки Тогда
			НастройкаФормы.НевидимыеКолонки.Добавить("КоличествоСверхпоставки");
		КонецЕсли;
		Если НЕ ЕстьКоличествоНедопоставки Тогда
			НастройкаФормы.НевидимыеКолонки.Добавить("КоличествоНедопоставки");
		КонецЕсли;
		
		Если НЕ ЕстьКонечныйГрузополучательВТоварах Тогда
			НастройкаФормы.НевидимыеКолонки.Добавить("КонечныйГрузополучательПредставление");
		КонецЕсли;
		Если НЕ ПоказыватьКоличествоВОдномМесте Тогда
			НастройкаФормы.НевидимыеКолонки.Добавить("КоличествоВОдномМесте");
		КонецЕсли;
		Если НЕ ПоказыватьКоличествоУпаковок Тогда
			НастройкаФормы.НевидимыеКолонки.Добавить("КоличествоУпаковок");
		КонецЕсли;
		
		КоличествоВсего	= Товары.Итог("Количество");
		
		Если СуммаВсего = 0 Тогда
			СуммаВсего = Товары.Итог("СуммаСНДС");
		КонецЕсли;
		Если СуммаВсегоБезНДС = 0 Тогда
			СуммаВсегоБезНДС = Товары.Итог("СуммаБезНДС");
		КонецЕсли;
		Если СуммаВсегоНДС = 0 Тогда
			СуммаВсегоНДС = Товары.Итог("СуммаНДС");
		КонецЕсли;	
		
		Если Сообщение.ТипСообщения = "ORDERS" 
			И Сообщение.Направление = "Входящее" Тогда
			
			//вызов ПМ по товарной группе товаров
			ЗаполнитьТоварнуюГруппуТаблицыТоваровВызовСервера();
		Иначе
			//Элементы.ТоварыТоварнаяГруппа.Видимость = Ложь;
			НастройкаФормы.НевидимыеКолонки.Добавить("ТоварнаяГруппа");
			//еще можно скрывать, если товарные группы не используются или если все товары вошли в одну группу.
		КонецЕсли;
		
		//если партнер может отправлять данные об упаковках и есть элемент справочника "Сообщения" (т.е. сообщение открыто на просмотр) и транспортные упаковки присутствуют в сообщении
		//тогда заполняем данные о распределении товаров в упаковках
		//иначе очищаем данные об упаковках
		Если ОтправлятьДанныеОбУпаковках И СообщениеСодержитДанныеОбУпаковках Тогда
			ЗначениеВРеквизитФормы(Сообщение.ТранспортныеУпаковки,"ТранспортныеУпаковки");		
		Иначе
			ТранспортныеУпаковки.ПолучитьЭлементы().Очистить();
		КонецЕсли;
		
		//Врата времени Х5
		Если ((Сообщение.ТипСообщения = "ORDERS" И Сообщение.Направление = "Входящее") ИЛИ (Сообщение.ТипСообщения = "ORDRSP" И Сообщение.Направление = "Исходящее"))
			и Сообщение.Свойство("Транспортировка") и Сообщение.Транспортировка<>Неопределено Тогда 
			Для каждого Стр ИЗ Сообщение.Транспортировка.ДатаВремяПрибытия Цикл
				ОригинальныйСписок=Сообщение.Транспортировка.ДатаВремяПрибытия.Скопировать();
				Если ОригинальныйСписок[0].значение="" тогда
					ОригинальныйСписок.удалить(0);
				Конецесли;
			КонецЦикла;
			Транспортировка=ОригинальныйСписок;
			для каждого элемент из Транспортировка цикл
				элемент.Представление=МодульОбъекта().ДатаXML_в_ДатаВремя1С(элемент.Значение);
			конеццикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьИзменениеДатыПоставки()
	
	РезультатПроверки = Новый Структура("Изменение", Ложь);
	
	Партнер = МодульОбъекта().ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",Сообщение.Покупатель1С));
	_СтатусChangedДляИзмененнойДатыПоставкиORDRSP = МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, "СтатусChangedДляИзмененнойДатыПоставкиORDRSP");
	
	Если Не _СтатусChangedДляИзмененнойДатыПоставкиORDRSP = Истина Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ВходящийЗаказ = МодульОбъекта().ПрочитатьСообщение(,Сообщение.Заказ1С,"ORDERS","Входящее");
	
	Если Не ЗначениеЗаполнено(ВходящийЗаказ) Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВходящийЗаказ.ДатаПоставки) И Не Сообщение.ДатаПоставки = ВходящийЗаказ.ДатаПоставки Тогда
		РезультатПроверки.Вставить("Изменение", Истина);
		РезультатПроверки.Вставить("Значение",  ВходящийЗаказ.ДатаПоставки);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

//добавление / изменение / удаление данных

Процедура ДобавитьТоварнуюПозицию(Строка)
	
	//заполняем товарные позиции (sscc) если:
	//1. (у партнера установлена галка отправлять данные по SSCC)
	//    И
	//2. (Сообщение не содержит транспортные упаковки (например, была отправка без sscc, а теперь переотправка))
	Если ОтправлятьДанныеОбУпаковках И Не СообщениеСодержитДанныеОбУпаковках Тогда
		 //И 
		 //( Не ЗначениеЗаполнено(Сообщение.СообщениеСсылка)
		 //  И Сообщение.Свойство("ТранспортныеУпаковки") 
		 //  И Сообщение.ТранспортныеУпаковки.Строки.Количество() = 0 ) Тогда
	    НоваяСтрока = ТоварныеПозиции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			НоваяСтрока.Номенклатура = Строка.Наименование;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКнопки(НастройкаКнопок)
	
	КнопкиКоманднойПанели = Этаформа.КоманднаяПанель.ПодчиненныеЭлементы;
	
	СписокКнопокНаУдаление = Новый СписокЗначений;
	
	// удалить кнопки и все левое, кроме "Закрыть" и изменить форму
	
	Для Каждого Кнопка ИЗ КнопкиКоманднойПанели Цикл
		
		Если ТипЗНЧ(Кнопка) = Тип("ГруппаФормы") Тогда 
			//Кнопка.Видимость=Ложь //группы сразу в топку //временно (а скорее всего навсегда) отключим удаление
		КонецЕсли;
		
		Если  Кнопка.Имя <> "ФормаЗакрыть" и Кнопка.Имя <>  "ФормаИзменитьФорму" Тогда
			СписокКнопокНаУдаление.Добавить(Кнопка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КнопкаНаУдаление Из СписокКнопокНаУдаление Цикл
		//КнопкаНаУдаление.Значение.Видимость=Ложь;      //временно (а скорее всего навсегда) отключим удаление
	КонецЦикла;
	
	
	КнопкиДобавлены = Ложь;
	КоличествоДобавленныхКнопок = 0;
	счКнопок=0;
	Если НЕ ТолькоПросмотрСообщения Тогда
		Для Каждого ОписаниеКнопки Из НастройкаКнопок Цикл
			
			КоличествоДобавленныхКнопок=КоличествоДобавленныхКнопок+1;
			
			Если ОписаниеКнопки.ВидКнопки = "Кнопка" Тогда
				
				счКнопок=счКнопок+1;
			
				Если Сообщение.ТипСообщения = "ORDRSP" Тогда
					Если Сообщение.Статус = "Отклонен" Тогда
						Если ОписаниеКнопки.Имя = "ПоказатьРасхожденияЗаказаПокупателя" Тогда
							счКнопок=счКнопок-1; //такая кнопка не в счет - т.к. её не показываем
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Сообщение.ТипСообщения = "ORDERS" Тогда
					Если Сообщение.Свойство("ОбратныйЗаказ1С") И ЗначениеЗаполнено(Сообщение.ОбратныйЗаказ1С) Тогда
						Если ОписаниеКнопки.Имя = "СоздатьЗаказ" Тогда
							ОписаниеКнопки.Представление = "Загрузить входящий заказ";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				НоваяКнопка=неопределено;
				Выполнить("НоваяКнопка = Элементы.ОсновноеДействиеФормы"+счКнопок);
				
				
				НоваяКнопка.Заголовок = ОписаниеКнопки.Представление;
				НоваяКнопка.ИмяКоманды = ОписаниеКнопки.Имя; //команда формы будет называться так же как имя кнопки и как дальнейший ключ в модуле обхекта
				НоваяКнопка.Видимость = Истина;
				
				Если ОписаниеКнопки.КнопкаПоУмолчанию Тогда
					НоваяКнопка.КнопкаПоУмолчанию = Истина;
				КонецЕсли;
				
				//проверим, не был ли заказ отклонен, и отключим возможность создания документа по данному ORDERS
				_СообщениеСсылка = Сообщение.СообщениеСсылка;
				Если ВнешнееХранилище 
					И ТипЗнч(_СообщениеСсылка)<>Тип("COMОбъект")
					И ЗначениеЗаполнено(_СообщениеСсылка)
					Тогда
				КонецЕсли;
				
				Если ложь //(ВнешнееХранилище И СоединениеСХранилищем.ЗначениеЗаполнено(_СообщениеСсылка))
					Или (Не ВнешнееХранилище И ЗначениеЗаполнено(_СообщениеСсылка))
				Тогда
					Если _СообщениеСсылка.ОтклоненоОтправителем
						И ОписаниеКнопки.Имя = "СоздатьЗаказ" Тогда
						НоваяКнопка.Доступность = Ложь;
						НоваяКнопка.Текст = "Заказ отклонен отправителем";
					КонецЕсли;	
				КонецЕсли;
				
			ИначеЕсли ОписаниеКнопки.ВидКнопки = "Разделитель" Тогда
				//	 нет разделителей на уф     			//счКнопок=счКнопок+0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
    //Уберем не потребовавшиеся кнопари
	Пока счКнопок<7 Цикл
		счКнопок=счКнопок+1;
		НоваяКнопка=неопределено;
		Выполнить("НоваяКнопка = Элементы.ОсновноеДействиеФормы"+счКнопок);
		НоваяКнопка.Видимость=ложь;
		//НоваяКнопка.ИмяКоманды="";
	КонецЦикла;
	
	
	//Кнопки подменю ЕЩЕ сделаны иначе чем в ОФ, просто регулируем видимость
	ВидимостьДополнительныхДействийФормы(КнопкиДобавлены);	
	
КонецПроцедуры

//Кнопки подменю ЕЩЕ сделаны иначе чем в ОФ, просто регулируем видимость
&НаСервере
Процедура ВидимостьДополнительныхДействийФормы(КнопкиДобавлены)

	Если НЕ КнопкиДобавлены Тогда

		Если ЗначениеЗаполнено(Сообщение.Документ1С) Тогда
			Элементы.ПривязатьСообщение.Видимость=Ложь;
			
			Если Сообщение.Направление = "Входящее" Тогда
				Элементы.ОтвязатьДокумент.Видимость = Истина;
				Если Сообщение.ТипСообщения = "ORDERS" 
					ИЛИ Сообщение.ТипСообщения = "RETANN"
					ИЛИ Сообщение.ТипСообщения = "RETDES" Тогда
					Элементы.ПерезаполнитьДокумент.Видимость = Истина;
				КонецЕсли;
			КонецЕсли;	
			
		Иначе
			Элементы.ПерезаполнитьДокумент.Видимость=Ложь;
			Элементы.ОтвязатьДокумент.Видимость=Ложь;
			Если Сообщение.ТипСообщения = "ORDERS" 
				ИЛИ Сообщение.ТипСообщения = "RETANN"
				ИЛИ Сообщение.ТипСообщения = "RETDES" Тогда
				Если Сообщение.Направление = "Входящее" Тогда
					Элементы.ПривязатьСообщение.Видимость = Истина;
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
		
		Если МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Партнер,"ORDRSP")=Истина 
			И ((Сообщение.ТипСообщения = "ORDERS" 
			И Сообщение.Направление = "Входящее" 
			И Сообщение.СтатусСсылки <> "Отклонен") 
			ИЛИ (Сообщение.ТипСообщения = "ORDRSP" 
			И Сообщение.Направление = "Исходящее" 
			И Сообщение.Статус <> "Отклонен")) Тогда
			
			Элементы.ОтклонитьЗаказПолностью.Видимость=Истина;
			
		КонецЕсли;
		
		Если МодульОбъекта().МожноПрекратитьОбработкуВходящегоСообщения(Сообщение) Тогда
			
			Элементы.ПрекратитьОбработкуВходящегоСообщения.Видимость = Истина;
			
		КонецЕсли;
		
		Если МодульОбъекта().МожноПрекратитьОбработкуИсходящегоСообщения(Сообщение) Тогда
			
			Элементы.ПрекратитьОбработкуИсходящегоСообщения.Видимость = Истина;
			
		КонецЕсли;

		Элементы.ОткрытьФайл.Видимость=Истина;
		
		Если ЗначениеЗаполнено(Сообщение.Документ1С) Тогда
			Элементы.НайтиСвязанныеСообщения.Видимость=Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сообщение.СообщениеСсылка) Тогда
			
			Если Сообщение.Направление = "Исходящее" Тогда
				
				Если Найти("\DESADV\INVOIC\",Сообщение.ТипСообщения)>0 Тогда
					Если ЗначениеЗаполнено(Сообщение.Получатель1С) Тогда
						ПоказыватьКнопкуПереотправкиАлко = Ложь;
						Партнер = МодульОбъекта().ПолучитьЭлементСправочника("Партнеры",Сообщение.Получатель1С);
						Если Сообщение.ТипСообщения = "DESADV" И Партнер.Свойство("ОтправлятьALCRPT") И Партнер.ОтправлятьALCRPT = Истина Тогда
							ПоказыватьКнопкуПереотправкиАлко = Истина;
						ИначеЕсли Сообщение.ТипСообщения = "INVOIC" И Партнер.Свойство("ОтправлятьALCRPTсINVOIC") И Партнер.ОтправлятьALCRPTсINVOIC = Истина Тогда
							ПоказыватьКнопкуПереотправкиАлко = Истина;
						КонецЕсли;
						Если ПоказыватьКнопкуПереотправкиАлко Тогда
							Элементы.ПереотправитьALCRPT.Видимость=Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
						
				Если Сообщение.ТипСообщения = "ORDRSP" ИЛИ Сообщение.ТипСообщения = "DESADV" Тогда
					Элементы.ПереотправитьСообщение.Видимость=Истина;
				КонецЕсли;
				
			КонецЕсли;
		
			Элементы.УдалитьСообщение.Видимость=Истина;
		Иначе
			
			Если Сообщение.ТипСообщения = "INVOIC" и Сообщение.СуммаВсего = 0 и МодульОбъекта().ЕстьКоррИспрСФ Тогда
		
				ДокОснование = МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаМетаданныхПоИмени("ДокументОснование", Сообщение.Документ1С);
				Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					Элементы.ПрекратитьОбработкуНулевойСФ.Видимость = Истина;
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВидимостьДополнительныхДейсвийФормы()


&НаСервере
Функция ПроверитьЗаполнениеОбязательныхПолей()
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	
	Для Каждого Стр Из НастройкаФормы.ОбязательныеПоля Цикл
		
		Если НЕ ЗначениеЗаполнено(Стр.ИмяТабличнойЧасти) Тогда
			
			Если ЗначениеЗаполнено(ЭтаФорма[Стр.ИмяПоля]) Тогда
				
			//	ПометкаПоля = ЭлементыФормы["Пометка"+Стр.ИмяПоля];
			//
			//	ПометкаПоля.Картинка = ЭлементыФормы.КартинкаГалочкаМаленькая.Картинка;
			//	ПометкаПоля.Видимость = Истина;
			
			//подкрасим в зеленый лосось :Р
				Поле = Элементы[Стр.ИмяПоля];
			
				//Поле.Картинка = ЭлементыФормы.КартинкаГалочкаМаленькая.Картинка; //(маленькая зеленая галочка)
				//Не уверен что будем добавять пометки галочки как в ОФ т.к. они слопают очень много места, особенно в такси! пока просто не будем ничего устанавливать
			КонецЕсли;
			
			Элементы[Стр.ИмяПоля].АвтоОтметкаНезаполненного = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ВывестиПанельИнформации(Текст,Вид = Неопределено)
	
	// Возможные виды:
	//	- Хорошо
	//	- Плохо
	//	- Нейтрально
	
	Если Вид = "Хорошо" Тогда
		
		//Элементы.ПанельИнформации.ЦветФона		= WebЦвета.Роса;
		Элементы.ПанельИнформации.ЦветТекста		= WebЦвета.ЦианТемный;
		//Элементы.ПанельИнформации.ЦветРамки	= WebЦвета.ЗеленыйЛес;
		
		//ЭлементыФормы.ИконкаПанелиИнформации.Картинка = ПолучитьКартинкуEDI("ЭлементФормы","КартинкаГалочка");
		
	ИначеЕсли Вид = "Плохо" Тогда
		
		//Элементы.ПанельИнформации.ЦветФона		= WebЦвета.ТусклоРозовый;
		Элементы.ПанельИнформации.ЦветТекста		= WebЦвета.Киноварь;
		//Элементы.ПанельИнформации.ЦветРамки	= WebЦвета.Шоколадный;
		
		//ЭлементыФормы.ИконкаПанелиИнформации.Картинка = ПолучитьКартинкуEDI("ЭлементФормы","КартинкаИсправитьОшибки");
		
	Иначе	
		
		//Элементы.ПанельИнформации.ЦветФона		= WebЦвета.СлоноваяКость;
		Элементы.ПанельИнформации.ЦветТекста		= WebЦвета.ТемноОранжевый;
		//Элементы.ПанельИнформации.ЦветРамки	= WebЦвета.РыжеватоКоричневый;
		
		//Элементы.ИконкаПанелиИнформации.Картинка = ПолучитьКартинкуEDI("ЭлементФормы","КартинкаИнформация");
		
	КонецЕсли;
		
	Элементы.ПанельИнформации.Заголовок = СокрЛП(Текст);
				 
КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруИзмененныхРеквизитов()
	
	ИзмененныеРеквизиты = Новый Структура;
	
	Для Каждого Реквизит Из ТаблицаИзмененныхРеквизитов Цикл
		ИзмененныеРеквизиты.Вставить(Реквизит.Наименование, Реквизит.Значение); 
	КонецЦикла;
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

//пробегает по таблице значений Дубли и смотрит, были ли созданы по этим сообщениям документы
//если такой документ был создан, и в единственном экземпляре, то функция перепривяжет его к последнему сообщению
//а все остальные пометит как уже загруженные. В списке документов все равно будет светиться только одно из них
&НаСервере
Функция ПерепривязатьСообщенияИнтерактивно()
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	
	//вызвать магическую заполнялку
	МодульОбъекта().МагическиОбработатьДублиORDERS(Сообщение,"НоваяВерсия");
	//нужен ли именно этот статус? Или ставить "ВходящийОжидаетУстановкиСоответствий"?
	
	_Сообщение = МодульОбъекта().ПрочитатьСообщение(Сообщение.СообщениеСсылка,,Сообщение.ТипСообщения,"Входящее");
	
	Если ЗначениеЗаполнено(_Сообщение) Тогда
		
		//МодульИнтеграции_Новый.КонвертироватьСообщениеEDIв1С(_Сообщение);
		
		_ТекущиеТовары = Товары.Выгрузить();
		//_Сообщение.СообщениеСсылка = _СообщениеСсылка;
		//Сообщение=ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(_Сообщение));//копия сообщения
		Сообщение=_Сообщение;//копия сообщения
		//Сообщение.Документ1С=_СообщениеСсылка.Документ;
		Сообщение.Документ1С=Сообщение.ДокументСсылка;
		
		//ПриСозданииНаСервере("","");  //видимо ранее здесь инициировалось перезаполнение формы. Это лишнее.
		
		//костыль - до полной переработки данной формы
		//скопировать бы товары заново
		Товары.Загрузить(_ТекущиеТовары);
		
		ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();
		УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// формат даты поставки

Функция ПолучитьДеньНедели(ДатаПоставки)
	
	НомерДняНедели = ДеньНедели(ДатаПоставки);
	
	Если НомерДняНедели = 1 Тогда
		Возврат "понедельник";
	ИначеЕсли НомерДняНедели = 2 Тогда
		Возврат "вторник";
	ИначеЕсли НомерДняНедели = 3 Тогда
		Возврат "среда";
	ИначеЕсли НомерДняНедели = 4 Тогда
		Возврат "четверг";
	ИначеЕсли НомерДняНедели = 5 Тогда
		Возврат "пятница";
	ИначеЕсли НомерДняНедели = 6 Тогда
		Возврат "суббота";
	ИначеЕсли НомерДняНедели = 7 Тогда
		Возврат "воскресенье";
	КонецЕсли;
	
	Возврат "";
		
КонецФункции

Функция ПолучитьТекстРазностиЧасовМинут(КоличествоСекунд)
	
	Часов = Цел(КоличествоСекунд/3600);
	Минут = Цел((КоличествоСекунд-Часов*3600)/60);
	
	Если Часов = 0 Тогда
		Если Минут = 0 Тогда
			Минут = 1;
		КонецЕсли;
		Возврат СокрЛП(Минут)+" мин.";
	Иначе
		Если Минут = 0 Тогда
			Возврат СокрЛП(Часов)+" час.";
		Иначе
			Возврат СокрЛП(Часов)+" час. "+СокрЛП(Минут)+" мин.";
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстРазностиДней(КоличествоДней)
	
	Стр = ЧислоПрописью(КоличествоДней,"НД = Ложь","день,дня,дней,м");
	
	Если Найти(Стр,"день") Тогда
		Стр = "день";
	ИначеЕсли Найти(Стр,"дней") Тогда	
		Стр = "дней";
	ИначеЕсли Найти(Стр,"дня") Тогда
		Стр = "дня";
	Иначе
		Стр = "дней";
	КонецЕсли;
	
	Возврат СокрЛП(КоличествоДней)+" "+Стр;
	
КонецФункции

Функция ПолучитьПредставлениеДатыПоставки(ДатаПоставки)

	Если НЕ ЗначениеЗаполнено(ДатаПоставки) Тогда
		Возврат "не указана";
	КонецЕсли;
	
	Если ДатаПоставки = НачалоДня(ДатаПоставки) Тогда
		ТекстДаты = Формат(ДатаПоставки,"ДФ=dd.MM.yyyy")+" г.";
	Иначе
		ТекстДаты = Формат(ДатаПоставки,"ДФ=dd.MM.yyyy") + " г. в " + Формат(ДатаПоставки,"ДФ=HH:mm");
	КонецЕсли;
	
	ИмяДняНедели = ПолучитьДеньНедели(ДатаПоставки);
	
	ТекДата = ТекущаяДата();
	
	НачалоДатыПоставки	= НачалоДня(ДатаПоставки);
	НачалоТекущейДаты	= НачалоДня(ТекДата);
	
	ИмяРазности = "";
	
	Если НачалоДатыПоставки = НачалоТекущейДаты Тогда
		Если ДатаПоставки = НачалоДатыПоставки Тогда
			ИмяРазности = "сегодня";
		ИначеЕсли ДатаПоставки<ТекДата Тогда	
			ТекстРазности = ПолучитьТекстРазностиЧасовМинут(ТекДата-ДатаПоставки);
			ИмяРазности = "сегодня "+ТекстРазности + " назад";
		ИначеЕсли ДатаПоставки>ТекДата Тогда	
			ТекстРазности = ПолучитьТекстРазностиЧасовМинут(ДатаПоставки-ТекДата);
			ИмяРазности = "сегодня через "+ТекстРазности;
		Иначе
			ИмяРазности = "сейчас";
		КонецЕсли;
	ИначеЕсли НачалоДатыПоставки > НачалоТекущейДаты Тогда
		
		РазностьДат = Цел((НачалоДатыПоставки-НачалоТекущейДаты)/(3600*24));
		
		Если РазностьДат = 1 Тогда
			ИмяРазности = "завтра";
		ИначеЕсли РазностьДат = 2 Тогда
			ИмяРазности = "послезавтра";
		Иначе
			ИмяРазности = "через "+ПолучитьТекстРазностиДней(РазностьДат-1);
		КонецЕсли;                      
		
	Иначе
		
		РазностьДат = Цел((НачалоТекущейДаты-НачалоДатыПоставки)/(3600*24));
		
		Если РазностьДат = 1 Тогда
			ИмяРазности = "вчера";
		ИначеЕсли РазностьДат = 2 Тогда
			ИмяРазности = "позавчера";
		Иначе
			ИмяРазности = ПолучитьТекстРазностиДней(РазностьДат-1) + " назад";
		КонецЕсли;                      
		
	КонецЕсли;

	Возврат ТекстДаты+" ("+ИмяДняНедели+", "+ИмяРазности+")";
	
КонецФункции

&НаСервере
Функция ПерезаполнитьДокумент1С()
	
	ПервоначальнаяЗагрузкаСообщения = Ложь;
	//в случае, если документов несколько, то мы можем только пометить на удаление старые, и создать вместо них новые.
	
	Если ЗначениеЗаполнено(Документ1С) Тогда
		ТабВиртуальныхСообщений = МодульОбъекта().ПолучитьВиртуальныеСвязанныеORDERS(Документ1С);
		Если ТабВиртуальныхСообщений.Количество()>1 Тогда
			
			//ТекстВопроса = "Следующие документы будут помечены на удаление:";
			//Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
			//	ТекстВопроса = ТекстВопроса+Символы.ПС+Стр.Документ;
			//КонецЦикла;	
			//ТекстВопроса = ТекстВопроса+Символы.ПС+"Вместо них будут созданы новые документы. Продолжить?";
			//
			Если ложь тогда //Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Нет,"Контур.EDI") = КодВозвратаДиалога.Нет Тогда
				
				Возврат Ложь;
			Иначе
				МодульОбъекта().НачатьТранзакцию_КонтурEDI();
				//как будем с этим жить?
				//обязательно надо учесть, что текущее сообщение тоже будет удалено.
				Попытка
					Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
						Стр.Документ.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
						СообщениеОбъект_ORDERS = МодульОбъекта().ПолучитьОбъектСообщения(Стр.ORDERS);
						Если Стр.ЭтоТекущийДокумент Тогда
							СообщениеОбъект_ORDERS.Документ = Неопределено;
							//статус?
							МодульОбъекта().СохранитьОбъектСообщения(СообщениеОбъект_ORDERS);
						Иначе
							СообщениеОбъект_ORDERS.Удалить();
						КонецЕсли;
						
						//заодно уберем ORDRSP, чтобы его переотправить потом с новыми данными
						Если ЗначениеЗаполнено(Стр.ORDRSP) Тогда
							СообщениеОбъект_ORDRSP = МодульОбъекта().ПолучитьОбъектСообщения(Стр.ORDRSP);
							СообщениеОбъект_ORDRSP.Удалить();
						КонецЕсли;
						
					КонецЦикла;	
					Документ1С = Неопределено;
					Сообщение.Документ1С = Неопределено;
					Сообщение.ДокументСсылка = Неопределено;
					
					ПервоначальнаяЗагрузкаСообщения = Истина;//костыль
					
					
					МодульОбъекта().ЗафиксироватьТранзакцию_КонтурEDI();
				Исключение
					МодульОбъекта().ОтменитьТранзакцию_КонтурEDI();
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;	
	Иначе
		ПервоначальнаяЗагрузкаСообщения = Истина;
	КонецЕсли;	
	
	//Если ЗначениеЗаполнено(Сообщение.Документ1С) Тогда     вынести заранее в клиента
	//	Если Вопрос("Документ "+СокрЛП(Сообщение.Документ1С)+" будет перезаполнен. Продолжить?",РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Нет,"Контур.EDI") = КодВозвратаДиалога.Нет Тогда
	//		Возврат Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	
	ПеренестиПоля1СвСообщение(Сообщение);
	
	Если НЕ ЗначениеЗаполнено(Сообщение.ДокументСсылка) Тогда
		Сообщение.ДокументСсылка = Сообщение.Документ1С;
	КонецЕсли;
	
	Результат = МодульОбъекта().ПринятьВходящееСообщение(Сообщение,ПервоначальнаяЗагрузкаСообщения);
	
	ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();

	Если Результат.Успешно Тогда
		
		Если Сообщение.ТипСообщения = "ORDERS" Тогда
			//костыль для версионности ORDERS
			МодульОбъекта().УстановитьСтатусСообщения(Сообщение.СообщениеСсылка,Сообщение.ДокументСсылка,Сообщение.ТипСообщения,"ВходящийЗагружен");
		КонецЕсли;
		
		Возврат Истина;
	Иначе
		Сп=Новый СообщениеПользователю;
		Сп.Текст="Не удалось перезаполнить документ!";
		Сп.Сообщить();
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

&НаСервере
Процедура УничтожитьТаблицыЗначенийПроизвольныхРеквизитов()
	
	НастройкаСсылокИсправленияОшибок = Неопределено;//  
	НастройкаФормы.КнопкиКоманднойПанели=неопределено;//
	НастройкаФормы.ОбязательныеПоля=неопределено;//
	Сообщение.Товары = неопределено;
	Если ТипЗнч(Сообщение) = Тип("Структура") И Сообщение.Свойство("ТранспортныеУпаковки") Тогда
		Сообщение.ТранспортныеУпаковки = неопределено;
	КонецЕсли;
	Если ТипЗнч(Сообщение) = Тип("Структура") И Сообщение.Свойство("Транспортировка") Тогда
		Сообщение.Транспортировка.ДатаВремяПрибытия = неопределено;
	КонецЕсли;
	Если ТипЗнч(Сообщение) = Тип("Структура") И Сообщение.Свойство("ТочкиСамовывоза") Тогда
		Сообщение.ТочкиСамовывоза = неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище()
	Отказ=истина;
	//сохраним только значащие реквизиты
	СтруктураВременногоХранилища = новый Структура;
	Если НастройкаФормы.КнопкиКоманднойПанели<>Неопределено Тогда 
		СтруктураВременногоХранилища.Вставить("НастройкаФормыКнопкиКоманднойПанели",НастройкаФормы.КнопкиКоманднойПанели);
		Отказ = Ложь;
	КонецЕсли;
	
	Если НастройкаФормы.ОбязательныеПоля<>Неопределено Тогда 
		СтруктураВременногоХранилища.Вставить("НастройкаФормыОбязательныеПоля",НастройкаФормы.ОбязательныеПоля);
		Отказ = Ложь;
	КонецЕсли;
	
	Если Сообщение.Свойство("ТочкиСамовывоза") И Сообщение.ТочкиСамовывоза<>Неопределено Тогда 
		СтруктураВременногоХранилища.Вставить("СообщениеТочкиСамовывоза",Сообщение.ТочкиСамовывоза);
		Отказ = Ложь;
	КонецЕсли;
	Если Сообщение.Товары<>Неопределено Тогда 
		СтруктураВременногоХранилища.Вставить("СообщениеТовары",Сообщение.Товары);
		Отказ = Ложь;
	КонецЕсли;
	
	Если НастройкаСсылокИсправленияОшибок<>Неопределено Тогда 
		СтруктураВременногоХранилища.Вставить("НастройкаСсылокИсправленияОшибок",НастройкаСсылокИсправленияОшибок);
		Отказ = Ложь;
	КонецЕсли;
	
	Если не Отказ Тогда 
		АдресВХ=ПоместитьВоВременноеХранилище(СтруктураВременногоХранилища,ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища()
	
	//извлечем из ВХ если не инициализированы реквизиты и при этом там хоть что-то есть
	
	Если 	(НастройкаСсылокИсправленияОшибок = Неопределено
		ИЛИ НастройкаФормы.ОбязательныеПоля = Неопределено
		ИЛИ НастройкаФормы.КнопкиКоманднойПанели = Неопределено
		ИЛИ Сообщение.Товары = Неопределено) и АдресВХ<>""
		ИЛИ Сообщение.Свойство("ТранспортныеУпаковки") И Сообщение.ТранспортныеУпаковки = Неопределено  
		ИЛИ Сообщение.Свойство("ТочкиСамовывоза") И Сообщение.ТочкиСамовывоза = Неопределено Тогда 
		
		СтруктураВременногоХранилища=ПолучитьИзВременногоХранилища(АдресВХ);
		Если СтруктураВременногоХранилища=Неопределено Тогда 
			ВызватьИсключение "Сервер потерял временное хранилище (откройте форму заново)";
		КонецЕсли;
		НастройкаСсылокИсправленияОшибок		= СтруктураВременногоХранилища.НастройкаСсылокИсправленияОшибок;
		НастройкаФормы.КнопкиКоманднойПанели	= СтруктураВременногоХранилища.НастройкаФормыКнопкиКоманднойПанели;
		НастройкаФормы.ОбязательныеПоля			= СтруктураВременногоХранилища.НастройкаФормыОбязательныеПоля;
		Сообщение.Товары						= СтруктураВременногоХранилища.СообщениеТовары;
		Если Сообщение.Свойство("ТранспортныеУпаковки") Тогда
			Сообщение.ТранспортныеУпаковки = РеквизитФормыВЗначение("ТранспортныеУпаковки");
		КонецЕсли;
		Если Сообщение.Свойство("ТочкиСамовывоза") И СтруктураВременногоХранилища.Свойство("СообщениеТочкиСамовывоза") Тогда //могли загрузить сообщение предыдущей версией модуля тогда в хранилище будет пусто
			Сообщение.ТочкиСамовывоза = СтруктураВременногоХранилища.СообщениеТочкиСамовывоза;
		КонецЕсли;
		Если Сообщение.Свойство("Транспортировка") Тогда
			Сообщение.Транспортировка.ДатаВремяПрибытия = Транспортировка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыборВерсииНажатие(ИмяКоманды)
	
	Состояние("Ищу версии сообщений",50,,БиблиотекаКартинок.НайтиВСодержании);
	
	СписокКнопок = ПолучитьСписокИменКнопокДублей();	
	//показать выбор из меню
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьВыборИзМеню(Новый ОписаниеОповещения(""ОбработчикВыбораВерсии"",ЭтаФорма), СписокКнопок,Элементы.СуммаВсего)"); 
	Иначе
		ВыбранноеЗначение=ВыбратьИзМеню(СписокКнопок,Элементы.СуммаВсего);     //,)
		ОбработчикВыбораВерсии(ВыбранноеЗначение);  //и обработать
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораВерсии(ВыбраннаяВерсия = Неопределено,ДопПараметр = Неопределено)Экспорт
	
	Если ВыбраннаяВерсия<>Неопределено Тогда 
		Если Лев(ВыбраннаяВерсия.Значение,6)="Версия" Тогда
		Состояние("Собираю выбранное сообщение",50,,БиблиотекаКартинок.СформироватьОтчет);
		//откроем карточку выбранной версии
		ГУИДСообщения=СтрЗаменить(Сред(ВыбраннаяВерсия.Значение,8),"_","-");
		ОбработчикВыбораВерсииСервер(ГУИДСообщения);
		ПриОткрытии(ложь);
		ИначеЕсли ВыбраннаяВерсия.Значение = "СравнитьВерсии" Тогда
		Состояние("Сравниваю сообщеиня",50,,БиблиотекаКартинок.СформироватьОтчет);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВидРасхождения", 	"РасхожденияВерсийЗаказа");
		ПараметрыФормы.Вставить("Заказ",				Сообщение.СообщениеСсылка);
		ПараметрыФормы.Вставить("Параметры",			Неопределено);
		
		ПолучитьФормуОбработки("Сервис_ПросмотрРасхожденийУправляемая",ПараметрыФормы).Открыть();
		
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры // ОбработчикВыбораВерсии()

&НаСервере
Процедура ОбработчикВыбораВерсииСервер(ГУИДСообщения)
	//Если ВнешнееХранилище Тогда
	//	_СообщениеСсылка=СоединениеСХранилищем.Справочники.КонтурEDI_Сообщения.ПолучитьСсылку(СоединениеСХранилищем.NewObject("УникальныйИдентификатор",ГУИДСообщения));
	//	_СообщениеСсылка = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(_СообщениеСсылка);
	//	_Сообщение = ПрочитатьСообщение(_СообщениеСсылка,,Сообщение.ТипСообщения,"Входящее");
	//Иначе
	_СообщениеСсылка=Справочники.КонтурEDI_Сообщения.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДСообщения));
	_Сообщение = МодульОбъекта().ПрочитатьСообщение(_СообщениеСсылка,,Сообщение.ТипСообщения,"Входящее");
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(_Сообщение) Тогда
		
		МодульОбъекта().КонвертироватьСообщениеEDIв1С(_Сообщение);    //взято из оф - а в тут наверно можно выпилить
		
		_Сообщение.СообщениеСсылка = _СообщениеСсылка;
		Сообщение=_Сообщение;
		Если ВнешнееХранилище Тогда
			Если ЗначениеЗаполнено(_Сообщение.ДокументСсылка) Тогда
				Сообщение.Документ1С=_Сообщение.ДокументСсылка;
			Иначе
				Сообщение.Документ1С=Неопределено;
			КонецЕсли;
		Иначе
			Сообщение.Документ1С=_СообщениеСсылка.Документ;
		КонецЕсли;	
		
		Параметры.СообщениеСсылка	= _СообщениеСсылка; 
		Параметры.Документ1С		= _СообщениеСсылка.Документ;
		
		ПриСозданииНаСервере(ложь,истина);
		
	КонецЕсли;
КонецПроцедуры // ()


&НаСервере
Функция ПолучитьСписокИменКнопокДублей()
	Дубли=МодульОбъекта().ПолучитьДублирующиеСообщения(Сообщение.СообщениеСсылка);
	
	СписокКнопок = новый СписокЗначений;
	
	//оживить
	Для Каждого Стр Из Дубли Цикл
		//добавить кнопку
		ГУИДСообщения=СтрЗаменить(Стр.УникальныйИдентификатор,"-","_");
		
		_ИмяКнопки = "Версия "+Стр.Номерстроки+" ("+Стр.ДатаДокумента+")"+?(Лев(Стр.ТипСообщения,1)="#"," (архив)","");
		
		Нов=СписокКнопок.Добавить("Версия_"+ГУИДСообщения,_ИмяКнопки,,);
		Если Стр.Ссылка=Сообщение.СообщениеСсылка Тогда
			нов.Картинка = БиблиотекаКартинок.СформироватьОтчет;
		КонецЕсли;
	КонецЦикла;
	
	Если Дубли.Количество()>1 Тогда 
		//Добавим кнопку показать расхождения
		Нов=СписокКнопок.Добавить("СравнитьВерсии",	"Сравнить версии",,);
		Если Стр.Ссылка=Сообщение.СообщениеСсылка Тогда
			Нов.Картинка=БиблиотекаКартинок.Отчет;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокКнопок;		
КонецФункции

&НаКлиенте
Процедура КнопкаДействияФормыВыборВерсииНажатие(Команда)
	
	ПерепривязатьСообщенияИнтерактивно();  
	
	//далее спросим о действии с сообщением
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Перезаполнить заказ");
	СписокВыбора.Добавить("Игнорировать новую версию");
	
	//показать выбор из списка
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьВыборИзСписка(Новый ОписаниеОповещения(""ОбработчикВыбораДействияНадДокументом1С"", ЭтаФорма), СписокВыбора,Элементы.Пробел2,)");
	Иначе
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора,Элементы.Пробел2,);
		ОбработчикВыбораДействияНадДокументом1С(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораДействияНадДокументом1С(ВыбранноеЗначение=неопределено,ДополнительныйПараметр=Неопределено) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		//пользователь еще подумает
		
	ИначеЕсли ВыбранноеЗначение.Значение = "Перезаполнить заказ" Тогда
		
		//РезультатДействия=КнопкаДействияФормыНажатие("СоздатьЗаказ");
		
		ПерезаполнитьДокумент(Команды.Найти("ПерезаполнитьДокумент"));
		
		//Если РезультатДействия.ЗакрытьФорму=Истина Тогда 
		//	ЭтаФорма.Закрыть(неопределено);
		//КонецЕсли;
	ИначеЕсли ВыбранноеЗначение.Значение = "Игнорировать новую версию" Тогда
		
		ОбработатьИгнорированиеНовойВерсии();
		ЗакрытиеРазрешено=Истина;
		ЭтаФорма.Закрыть(неопределено);
		
	Иначе
		//пользователь еще подумает
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИгнорированиеНовойВерсии()
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	ВиртуальныеORDERS = МодульОбъекта().ПолучитьВиртуальныеСвязанныеORDERS(Сообщение.ДокументСсылка);
	Для Каждого Стр Из ВиртуальныеORDERS Цикл
		МодульОбъекта().УстановитьСтатусСообщения(Стр.ORDERS,Стр.Документ,"ORDERS","ВходящийЗагружен");
	КонецЦикла;	
	
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
КонецПроцедуры

 &НаСервере
 Процедура ДобавитьПроизвольныеПараметрыФормы(ПараметрыДействия)
 
		ПроизвольныеПараметры=Параметры.ПроизвольныеПараметры;
		Если НЕ ПроизвольныеПараметры = Неопределено Тогда
			Для Каждого ПроизвольныйПараметр Из ПроизвольныеПараметры Цикл
				ПараметрыДействия.Вставить(ПроизвольныйПараметр.Ключ,	ПроизвольныйПараметр.Значение);
			КонецЦикла;
		КонецЕсли;
 
 КонецПроцедуры // ДобавитьПроизвольныеПараметрыФормы()
 

//Обработчики команд нажатия кнопок - реализация иная чем в ОФ в связи с тем что в обработчик передается имя команды а не элемент формы
//so, создадим все возможные команды которые могут случиться в форме и в них пропишем обработчики а выводить или нет саму кнопку будем решать при создании на сервере
//точно так же будем придумыва
&НаСервере
Функция КнопкаДействияФормыНажатие(ИмяКоманды)
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();	
	
	СвойстваКнопки = НастройкаФормы.КнопкиКоманднойПанели.Найти(ИмяКоманды,"Имя");
	
	Элемент = ОпределитьКнопкуЭлементФормыПоИмениКоманды(ИмяКоманды);//ЭтаФорма.ТекущийЭлемент;
	
	Если НЕ СвойстваКнопки = Неопределено Тогда
		
		Если СвойстваКнопки.ПроверятьПоля Тогда
			Если НЕ ПроверитьЗаполнениеПолей() Тогда
				
				ОткрытьПанельОшибокСервер();
				
				Возврат неопределено;
				
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваКнопки.СохранятьСоответствия Тогда
			ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
			ПеренестиПоля1СвСообщение(Сообщение);
			//МодульИнтеграции_Новый.УстановитьСоответствияПолейEDIи1С(Сообщение);
			ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();

		КонецЕсли;
		
		Если НЕ ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
			ПараметрыДействия = Новый Структура();
		КонецЕсли;
		
		Если Сообщение.ТипСообщения = "ORDRSP" Тогда
			
			сч = 0;
			ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();	
			Для каждого Стр Из Товары Цикл
				
				СтрокаСообщения = Сообщение.Товары.Получить(сч);
				СтрокаСообщения.Комментарий = Стр.Комментарий;
				
				сч=сч+1;
				
			КонецЦикла;
			ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();	
			
		ИначеЕсли Сообщение.ТипСообщения = "RETINS" Тогда
			
			сч = 0;
			ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();	
			Для каждого Стр Из Товары Цикл
				
				СтрокаСообщения = Сообщение.Товары.Получить(сч);
				СтрокаСообщения.РешениеПоВозвратуEDI = МодульОбъекта().КонвертироватьЗначение1СвEDI(Стр.РешениеПоВозврату1С,,"ДействиеПоВозврату");
				СтрокаСообщения.ПричинаРешения = Стр.ПричинаРешения;
				
				сч=сч+1;
			КонецЦикла;
			ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();	
			
		КонецЕсли;
		
		Если Сообщение.Направление = "Исходящее" Тогда
			ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();	
		КонецЕсли;
		
		ПараметрыДействия.Вставить("ОтправитьСообщениеИзФормы",	Истина);
		ПараметрыДействия.Вставить("Сообщение",					Сообщение);
		ПараметрыДействия.Вставить("Объект",					МодульОбъекта());
		ПараметрыДействия.Вставить("ОтправкаТолькоALCRPT",		ОтправкаТолькоALCRPT);
		ПараметрыДействия.Вставить("ИзмененныеРеквизиты",		ПодготовитьСтруктуруИзмененныхРеквизитов());
		
		ДобавитьПроизвольныеПараметрыФормы(ПараметрыДействия);

		Если ИмяКоманды = "ОтправитьОтветНаЗаказ" и ПараметрыДействия.Свойство("ВходящийЗаказ")Тогда  //костылек на отмену заказа через спец кнопку
			ПараметрыДействия.ВходящийЗаказ = МодульОбъекта().ПрочитатьСообщение(ПараметрыДействия.ВходящийЗаказ,,"ORDERS","Входящее");
		ИначеЕсли ИмяКоманды = "СоздатьЗаказ" 
			И Элемент<>Неопределено
			И Элемент.Заголовок = "Перезаполнить заказ" Тогда//название было подменено, значит, у нас пришла новая версия заказа, и ее надо перезаполнить
			
			Если ПерезаполнитьДокумент1С() Тогда
				
				//обработаем виртуальные ORDERS
//				Дубли=ПолучитьДублирующиеСообщения(Сообщение.СообщениеСсылка,Сообщение.ТипСообщения,Сообщение.Партнер,Сообщение.ДокументEDI.Номер,Сообщение.ДокументEDI.Дата,Сообщение.Грузополучатель1С,Сообщение.ID);
//				Для Каждого СтрокаДубля Из Дубли Цикл
//					ВиртуальныеСообщения = Н
//				КонецЦикла;	

				//ТабВиртуальныхСообщений = ПолучитьВиртуальныеСвязанныеORDERS(Документ1С);
				////вместе с рефакторингом: проверить на внешнем хранилище

				//Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
				//	Если ЗначениеЗаполнено(Стр.ORDERS)
				//		И Стр.ORDERS <> Сообщение.СообщениеСсылка
				//	Тогда
				//		ОбъектВиртуальногоORDERS = ПолучитьОбъектСообщения(Стр.ORDERS);
				//		ОбъектВиртуальногоORDERS.ID = Сообщение.ID;
				//		СохранитьОбъектСообщения(ОбъектВиртуальногоORDERS);
				//	КонецЕсли;
				//КонецЦикла;	
				//
				////еще найдем ORDRSP, если он был, и пометим его для переотправки
				//ORDRSP = ПрочитатьСообщение(Неопределено, Документ1С, "ORDRSP", "Исходящее");
				//Если ЗначениеЗаполнено(ORDRSP) Тогда
				//	ORDRSP_Объект = ORDRSP.СообщениеСсылка.ПолучитьОбъект();//для внешнего хранения пока не переделываю
				//	ORDRSP_Объект.Статус = "Ожидает исправления ошибок";
				//	ORDRSP_Объект.ОписаниеОшибки = "Получена новая версия заказа; необходимо переотправить подтверждение заказа";
				//	ORDRSP_Объект.Записать();
				//КонецЕсли;	
				
				ЭтаФорма.Закрыть(Параметры.СообщениеСсылка);
				//Оповестить("КонтурEDI_ОбновитьЖурналСообщений");//попробуем так
				Возврат Неопределено;
			КонецЕсли;	//ПерезаполнитьДокумент1С
			
			
		ИначеЕсли ОтправлятьДанныеОбУпаковках 
			И (ИмяКоманды="ОтправитьУведомлениеОбОтгрузке"
			ИЛИ ИмяКоманды="Сохранить") Тогда
			ПромаркироватьУпаковкиSSCCКодом();                                                  //присваиваем SSCC-коды и присваиваем имена палетам (с SSCC-кодом)
			УстановитьНомерПоследнейУпаковки(); 				   								//сохраняем последний SSCC-код
			Сообщение.ТранспортныеУпаковки = РеквизитФормыВЗначение("ТранспортныеУпаковки"); 	//записываем в сообщение данные о транспортных упаковках			
																								//SSCC-кода юр.лица и фиксируем код заключительной упаковки сообщения, как последний			
		ИначеЕсли ИмяКоманды="СоздатьЗаказ"
			И Элемент<>Неопределено
			И Элемент.Заголовок = "Выбрать текущую версию" Тогда//название было подменено, значит, у нас пришла новая версия заказа, и ее надо перезаполнить
			
			ПеренестиПоля1СвСообщение(Сообщение);
			//УстановитьСоответствияПолейEDIи1С(Сообщение);
			//теперь надо сохранить сообщение в базу
			МодульОбъекта().СохранитьСообщение(Сообщение);
			
			
			//тут сначала надо сохранить сообщение
			ПерепривязатьСообщенияИнтерактивно();
			
			//теперь перезаполним заказ - уже спршивали и пользователь так решил
			//в этот момент документ/документы уже должны быть привязаны к текущему сообщению, открытому в окне
			Элементы.ОсновноеДействиеФормы1.Заголовок = "Перезаполнить заказ";
			КнопкаДействияФормыНажатие(Элемент);
			
			//где-то здесь надо добавить кнопки: "Отвязать+удалить ВСЕ созданные заказы" и "Я обработал изменения вручную".
			
			//Первая будет работать так:
			//получить виртуальные ORDERS с документами, и для каждого из них сделать "Отвязать сообщение" - проверить, сработает ли. + удалить документ.
			
			//Вторая - так:
			//получить виртуальные ORDERS с документами, и для каждого ORDERS выставить статус "Загружен".
			
			//обе должны быть видны только при наличии виртуальных ORDERS
			
			
			////сразу предложим перезаполнить документ
			//Если Вопрос("Перезаполнить документ?",РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
			//КонецЕсли;	
			
			//Оповестить("КонтурEDI_ОбновитьЖурналСообщений");//попробуем так
			Возврат неопределено;
		КонецЕсли;	//СоздатьЗаказ
		
		СтандартнаяОбработкаEDI = Истина;
		РезультатДействия = МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("КнопкаФормыСообщенияНажатие",СтандартнаяОбработкаEDI,Новый Структура("ИмяКоманды,Сообщение,Параметры,Форма,РезультатКлиента",ИмяКоманды,Сообщение,Параметры,ЭтаФорма,Неопределено));
		
		Если СтандартнаяОбработкаEDI = Истина Тогда
			РезультатДействия = МодульОбъекта().КнопкаФормыСообщенияНажатие(ИмяКоманды,Сообщение, ПараметрыДействия); //КонвертироватьПарамтрыФормыВСтруктуруСервер());
		    Если РезультатДействия.СозданДокумент=Истина Тогда
				Документ1С = РезультатДействия.СсылкаНаДокумент;
				ЗакрытиеРазрешено = Истина;
			КонецЕсли;
		    Если РезультатДействия.ЗакрытьФорму=Истина Тогда
				ЗакрытиеРазрешено = Истина;
			КонецЕсли;
		КонецЕсли;
			
		ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();
		УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
		Возврат РезультатДействия;
		
	КонецЕсли;
	
	ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();

	Возврат Неопределено;     
КонецФункции

&НаСервере
Функция КонвертироватьПарамтрыФормыВСтруктуруСервер()
    //только ключевые
	Сконвертированнаятруктура=Новый Структура;
	
	Сконвертированнаятруктура.Вставить("Документ1С",Параметры.Документ1С);
	Сконвертированнаятруктура.Вставить("КодДействия",Параметры.КодДействия);
	Сконвертированнаятруктура.Вставить("МодальностьЗапрещена",Параметры.МодальностьЗапрещена);
	Сконвертированнаятруктура.Вставить("РежимРаботы",Параметры.РежимРаботы);
	Сконвертированнаятруктура.Вставить("СообщениеСсылка",Параметры.СообщениеСсылка);
	Сконвертированнаятруктура.Вставить("ТипСообщения",Параметры.ТипСообщения);
	Сконвертированнаятруктура.Вставить("ОтправкаТолькоALCRPT",ОтправкаТолькоALCRPT);    //добавим сервисный реквизит, костыльно смотрится - //метка рефакторинг
	//добавить произвольные параметры если там структура - опять же смотрится костыльно - //метка рефакторинг
	
	Если Параметры.ПроизвольныеПараметры<>Неопределено Тогда
		Если Параметры.ПроизвольныеПараметры.Свойство("Статус") Тогда 
			Сконвертированнаятруктура.Вставить("Статус",		Параметры.ПроизвольныеПараметры.Статус);
		КонецЕсли;
		Если Параметры.ПроизвольныеПараметры.Свойство("ВходящийЗаказ") Тогда
			
			СообщениеЗаказ = МодульОбъекта().ПрочитатьСообщение(Параметры.ПроизвольныеПараметры.ВходящийЗаказ,,"ORDERS","Входящее");
			МодульОбъекта().КонвертироватьСообщениеEDIв1С(СообщениеЗаказ);
			
			Сконвертированнаятруктура.Вставить("ВходящийЗаказ",	СообщениеЗаказ);
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Сконвертированнаятруктура;
	
КонецФункции // КонвертироватьПарамтрыФормыВСтруктуру()


&НаКлиенте
Процедура КнопкаДополнительныеДействияФормыНажатие(Команда)
	
	РезультатДействия = КнопкаДействияФормыНажатие(Команда.Имя);		
	
	//для печати паллетных листов
	Если ТипЗнч(РезультатДействия) = Тип("ТабличныйДокумент") Тогда
		РезультатДействия.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказ(Команда)
	РезультатДействия=КнопкаДействияФормыНажатие(Команда.Имя);
	
	Если РезультатДействия<>Неопределено и РезультатДействия.ЗакрытьФорму Тогда
		ЗакрытиеРазрешено = Истина;
		ЭтаФорма.Закрыть(Параметры.СообщениеСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказПоставщику(Команда)
	РезультатДействия=КнопкаДействияФормыНажатие(Команда.Имя);
	
	Если РезультатДействия<>Неопределено и РезультатДействия.ЗакрытьФорму Тогда
		ЗакрытиеРазрешено = Истина;
		ЭтаФорма.Закрыть(Параметры.СообщениеСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВозврат(Команда)
	РезультатДействия=КнопкаДействияФормыНажатие(Команда.Имя);
	
	Если РезультатДействия<>Неопределено и РезультатДействия.ЗакрытьФорму Тогда
		ЗакрытиеРазрешено = Истина;
		ЭтаФорма.Закрыть(Параметры.СообщениеСсылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОтветНаЗаказ(Команда)
	
	РезультатДействия=КнопкаДействияФормыНажатие(Команда.Имя);
	
	Если РезультатДействия<>Неопределено и РезультатДействия.ЗакрытьФорму Тогда
		ЗакрытиеРазрешено = Истина;
		ЭтаФорма.Закрыть(Параметры.СообщениеСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУведомлениеОбОтгрузке(Команда)
	Результат = КнопкаДействияФормыНажатие(Команда.Имя);
	
	Если Результат<>Неопределено и Результат.Свойство("ЗакрытьФорму") и Результат.ЗакрытьФорму=истина  и ЭтаФорма.Открыта() тогда
		ЗакрытиеРазрешено=Истина;
		ЭтаФорма.Закрыть(неопределено); //отправим вместо ссылки на новое сообщение чтобы гарантированно вычеркнуть строку, ведь нам удалось отправить сообщение
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУведомлениеОбОтгрузкеВозврата(Команда)
	
	РезультатДействия=КнопкаДействияФормыНажатие(Команда.Имя);
	
	Если РезультатДействия<>Неопределено и РезультатДействия.ЗакрытьФорму Тогда
		ЗакрытиеРазрешено = Истина;
		ЭтаФорма.Закрыть(Параметры.СообщениеСсылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасхожденияЗаказаПокупателя(Команда)
	
	//собрать параметры и показать расхождения
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасхождения", 	"РасхожденияЗаказа");
	ПараметрыФормы.Вставить("Заказ",			Документ1С);
	
	ПолучитьФормуОбработки("Сервис_ПросмотрРасхожденийУправляемая",ПараметрыФормы).Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьУведомлениеОбОтгрузке(Команда)
	Результат = КнопкаДействияФормыНажатие(Команда.Имя);
	
	Если Результат<>Неопределено и Результат.Свойство("ЗакрытьФорму") и Результат.ЗакрытьФорму=истина  и ЭтаФорма.Открыта() тогда
		ЗакрытиеРазрешено=Истина;
		ЭтаФорма.Закрыть(неопределено); //отправим вместо ссылки на новое сообщение чтобы гарантированно вычеркнуть строку, ведь нам удалось отправить сообщение
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьУведомлениеОПриемке(Команда)
	Результат =	КнопкаДействияФормыНажатие(Команда.Имя);
	Если Результат<>Неопределено и Результат.Свойство("ЗакрытьФорму") и Результат.ЗакрытьФорму=истина  и ЭтаФорма.Открыта() тогда
		ЗакрытиеРазрешено=Истина;
		ЭтаФорма.Закрыть(неопределено); //отправим вместо ссылки на новое сообщение чтобы гарантированно вычеркнуть строку, ведь нам удалось отправить сообщение
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаУведомлениеОВозврате(Команда)
	
	Результат = КнопкаДействияФормыНажатие(Команда.Имя);
	
	Если Результат <> Неопределено 
		И Результат.Свойство("ЗакрытьФорму") 
		И Результат.ЗакрытьФорму = Истина 
		И ЭтаФорма.Открыта() тогда
		ЗакрытиеРазрешено = Истина;
		ЭтаФорма.Закрыть(Неопределено); //отправим вместо ссылки на новое сообщение чтобы гарантированно вычеркнуть строку, ведь нам удалось отправить сообщение
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьУведомлениеОПриемкеВозврата(Команда)
	
	Результат = КнопкаДействияФормыНажатие(Команда.Имя);
	
	Если Результат<>Неопределено и Результат.Свойство("ЗакрытьФорму") и Результат.ЗакрытьФорму=истина  и ЭтаФорма.Открыта() тогда
		ЗакрытиеРазрешено=Истина;
		ЭтаФорма.Закрыть(неопределено); //отправим вместо ссылки на новое сообщение чтобы гарантированно вычеркнуть строку, ведь нам удалось отправить сообщение
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаказ(Команда)
	Результат =	КнопкаДействияФормыНажатие(Команда.Имя);
	Если Результат<>Неопределено и Результат.Свойство("ЗакрытьФорму") и Результат.ЗакрытьФорму=истина  и ЭтаФорма.Открыта() тогда
		ЗакрытиеРазрешено=Истина;
		ЭтаФорма.Закрыть(неопределено); //отправим вместо ссылки на новое сообщение чтобы гарантированно вычеркнуть строку, ведь нам удалось отправить сообщение
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаЗаказ(Команда)
	Результат =	КнопкаДействияФормыНажатие(Команда.Имя);
	Если Результат<>Неопределено и Результат.Свойство("ЗакрытьФорму") и Результат.ЗакрытьФорму=истина  и ЭтаФорма.Открыта() тогда
		ЗакрытиеРазрешено=Истина;
		ЭтаФорма.Закрыть(неопределено); //отправим вместо ссылки на новое сообщение чтобы гарантированно вычеркнуть строку, ведь нам удалось отправить сообщение
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСчетФактуру(Команда)
	Результат =	КнопкаДействияФормыНажатие(Команда.Имя);
	Если Результат<>Неопределено и Результат.Свойство("ЗакрытьФорму") и Результат.ЗакрытьФорму=истина  и ЭтаФорма.Открыта() тогда
		ЗакрытиеРазрешено=Истина;
		ЭтаФорма.Закрыть(неопределено); //отправим вместо ссылки на новое сообщение чтобы гарантированно вычеркнуть строку, ведь нам удалось отправить сообщение
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	КнопкаДействияФормыНажатие(Команда.Имя);
КонецПроцедуры

&НаСервере
Функция ОпределитьКнопкуЭлементФормыПоИмениКоманды(ИмяКоманды)
	Если Этаформа.КоманднаяПанель.ПодчиненныеЭлементы.ОсновноеДействиеФормы1.ИмяКоманды = ИмяКоманды Тогда 
		Возврат Этаформа.КоманднаяПанель.ПодчиненныеЭлементы.ОсновноеДействиеФормы1;
	ИначеЕсли Этаформа.КоманднаяПанель.ПодчиненныеЭлементы.ОсновноеДействиеФормы2.ИмяКоманды = ИмяКоманды Тогда 
		Возврат Этаформа.КоманднаяПанель.ПодчиненныеЭлементы.ОсновноеДействиеФормы2; 
	ИначеЕсли Этаформа.КоманднаяПанель.ПодчиненныеЭлементы.ОсновноеДействиеФормы3.ИмяКоманды = ИмяКоманды Тогда 
		Возврат Этаформа.КоманднаяПанель.ПодчиненныеЭлементы.ОсновноеДействиеФормы3; 
	ИначеЕсли Этаформа.КоманднаяПанель.ПодчиненныеЭлементы.ОсновноеДействиеФормы4.ИмяКоманды = ИмяКоманды Тогда 
		Возврат Этаформа.КоманднаяПанель.ПодчиненныеЭлементы.ОсновноеДействиеФормы4; 
	иначе
		Возврат Неопределено;
	КонецЕсли;		
КонецФункции // ОпределитьКнопкуЭлементФормыПоИмениКоманды()


//прямые обработчики дополнтельных кнопок - расширить
&НаКлиенте
Процедура ОтклонитьЗаказПолностью(Команда)
	
	ПараметрыФормы = Новый Структура("СообщениеСсылка",		Параметры.СообщениеСсылка); 
	ПараметрыФормы.Вставить("Документ1С",					Параметры.Документ1С);
	ПараметрыФормы.Вставить("ТипСообщения",					"ORDRSP");
	ПараметрыФормы.Вставить("Направление",					"Исходящее");
	ПараметрыФормы.Вставить("ТолькоПросмотр",				Ложь);
	ПараметрыФормы.Вставить("КодДействия",					"Отправить_ORDRSP");
	ПараметрыФормы.Вставить("РежимРаботы",					Параметры.РежимРаботы);
	ПараметрыФормы.Вставить("АдресХранилища",				Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("ПараметрыАвтотестирования",	Параметры.ПараметрыАвтотестирования);
	
	ДанныеДляОтклоненияЗаказаПолностью = ПолучитьДанныеДляОтклоненияЗаказаПолностью(Параметры.Документ1С);
	
	Если ДанныеДляОтклоненияЗаказаПолностью.ПереотправляемоеСообщениеСсылка <> Неопределено Тогда
		ПараметрыФормы.Вставить("ПереотправляемоеСообщениеСсылка",	
								ДанныеДляОтклоненияЗаказаПолностью.ПереотправляемоеСообщениеСсылка);
	КонецЕсли;	
	
	ПроизвольныеПараметры = Новый Структура();
	ПроизвольныеПараметры.Вставить("Статус", "Отклонить");
	
	Если Параметры.ТипСообщения = "ORDERS" Тогда
		ВходящийЗаказСсылка = Параметры.СообщениеСсылка;
	ИначеЕсли Параметры.ТипСообщения = "ORDRSP" Тогда
		ВходящийЗаказСсылка = ДанныеДляОтклоненияЗаказаПолностью.ВходящийЗаказСсылка;
	КонецЕсли;
	ПроизвольныеПараметры.Вставить("ВходящийЗаказ", ВходящийЗаказСсылка);
	ПараметрыФормы.Вставить("ПроизвольныеПараметры",	ПроизвольныеПараметры);
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""ФормаСообщенияУправляемая"", ПараметрыФормы,""ОбработчикПослеЗакрытияКарточкиПереотправкиСообщения"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("ФормаСообщенияУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослеЗакрытияКарточкиПереотправкиСообщения();
	КонецЕсли;

КонецПроцедуры

//Объединим в одну функцию, чтобы не ходить дважды на сервер
&НаСервере
Функция ПолучитьДанныеДляОтклоненияЗаказаПолностью(ДокументСсылка)
	Результат = Новый Структура;
	Результат.Вставить("ВходящийЗаказСсылка", 	Неопределено);
	Результат.Вставить("ПереотправляемоеСообщениеСсылка", Неопределено);
	
	Результат.ВходящийЗаказСсылка = МодульОбъекта().НайтиСообщениеДокумента(ДокументСсылка, "ORDERS", "Входящее");
	Результат.ПереотправляемоеСообщениеСсылка = МодульОбъекта().НайтиСообщениеДокумента(ДокументСсылка, "ORDRSP", "Исходящее");
	
	Возврат Результат;
КонецФункции // ПолучитьДанныеДляОтклоненияЗаказаПолностью()

&НаКлиенте
Процедура ПерезаполнитьДокумент(Команда)
	
	ТекстВопроса ="Документ "+СокрЛП(Сообщение.Документ1С)+" будет перезаполнен. Продолжить?";
	КнопкиВопроса=новый СписокЗначений;
	КнопкиВопроса.Добавить("Да, перезаполнить документ");
	КнопкиВопроса.Добавить("Отмена");
	ДопПараметрДляПередачиВОбработчик=Неопределено;
	РезультатВопроса = Неопределено;
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияПерезаполненияДокумента"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
	Иначе
		РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
		ОбработчикСогласияПерезаполненияДокумента(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
	КонецЕсли; 
	 
КонецПроцедуры
 
&НаКлиенте
Процедура ОбработчикСогласияПерезаполненияДокумента(РезультатВопроса,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	
	Если РезультатВопроса =	"Да, перезаполнить документ" Тогда 
		ДокументПерезаполнен=ПерезаполнитьДокумент1С();
		Если ДокументПерезаполнен = Истина Тогда 
			ЗакрытиеРазрешено=Истина;
			ЭтаФорма.Закрыть(неопределено);
		Иначе
			Сообщить("Не удалось перезаполнить документ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтвязатьДокумент(Команда)
	
	Если НЕ ЭтоПоследнееСообщениеВЦепочкеВызовСервера() Тогда
		
		ТекстПредупреждения="Можно отвязывать только последнее сообщение в цепочке!";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ПараметрыАвтотестирования=Неопределено;
	Если НЕ ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
		
		ТекстВопроса ="Сообщение будет отвязано от документа "+СокрЛП(Сообщение.Документ1С)+". Продолжить?";
		КнопкиВопроса=новый СписокЗначений;
		КнопкиВопроса.Добавить("Да, отвязать сообщение");
		КнопкиВопроса.Добавить("Отмена");
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		РезультатВопроса = Неопределено;
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикПодтвержденияОтвязкиДокумента"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
		Иначе
			РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
			ОбработчикПодтвержденияОтвязкиДокумента(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПодтвержденияОтвязкиДокумента(РезультатВопроса,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	
	//Действия, связанные с обработкой результата ответа на вопрос
	Если РезультатВопроса= "Да, отвязать сообщение" Тогда 
		
		ОтвязатьСообщениеОтДокументаВызовСервера();
		
		ТолькоПросмотрСообщения = Ложь;
		
		Сообщение.ДокументСсылка	= Неопределено;
		Сообщение.Документ1С		= Неопределено;
		
		Если Сообщение.ТипСообщения = "RECADV" Тогда
			Сообщение.Накладная1С = Неопределено;
		КонецЕсли;
		
		ВыполнитьСерверныедействияПослеОтвязыванияСообщения();
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСерверныедействияПослеОтвязыванияСообщения()
	
    ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	ПроизвестиПервоначальноеЗаполнениеПолейНаФорме();
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ОтвязатьСообщениеОтДокументаВызовСервера()
	
    ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	МодульОбъекта().ОтвязатьСообщениеОтДокумента(Сообщение, Сообщение.ДокументСсылка);	
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
КонецПроцедуры // ОтвязатьСообщениеОтДокументаВызовСервера()

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	//РезультатКонвертации = ОткрытьФайлВызовСервера();
	//ЗапуститьПриложение(РезультатКонвертации.ПутьКФайлу);
	
	#Если Не ВебКлиент Тогда
		
	ТекстФайла = ОткрытьФайлВызовСервера();
	
	ТекДок = Новый ТекстовыйДокумент;
	ТекДок.УстановитьТекст(ТекстФайла);
	ИмяВремФайла = ПолучитьИмяВременногоФайла("xml");
	
	ТекДок.Записать(ИмяВремФайла,КодировкаТекста.UTF8);
	
	ЗапуститьПриложение(ИмяВремФайла);
		
	#КонецЕсли
		
КонецПроцедуры

&НаСервере
Функция ОткрытьФайлВызовСервера()
	
	Если Параметры.ПроизвольныеПараметры=Неопределено Тогда
		Параметры.ПроизвольныеПараметры = Новый Структура;
	КонецЕсли;
	
	Параметры.ПроизвольныеПараметры.Вставить("ИзмененныеРеквизиты",		ПодготовитьСтруктуруИзмененныхРеквизитов());

	Если Сообщение.Направление = "Входящее" 
		ИЛИ Параметры.ТолькоПросмотр = истина 
		Тогда //на входящих сообщениях и открытых только на просмотр у нас уже есть сообщение
		
		времСообщение = МодульОбъекта().ПрочитатьСообщение(Параметры.СообщениеСсылка,Параметры.Документ1С);//,Параметры.ТипСообщения,Параметры.СообщениеСсылка.Направление); //уточнять тип и направление не следует т.к. мы могли просматривать сообщение из строки с треб действием по созданию документа 
	Иначе
		СохраненноесообщениеФормы = Сообщение;
		
		ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
		ПеренестиПоля1СвСообщение(Сообщение);
		КонвертироватьРедактируемыеПоляСообщенияВEDI(Сообщение);
		
		времСообщение = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Сообщение));
		Сообщение = СохраненноесообщениеФормы;
		
		//ранее готовили сообщение
		//времСообщение = МодульОбъекта().ПодготовитьИсходящееСообщение(Параметры.ТипСообщения, Параметры.Документ1С,Параметры.ПроизвольныеПараметры);

	КонецЕсли;
	
	Результат = МодульОбъекта().КонвертироватьИсходящееСообщениеПоНовому(времСообщение);
	
	//Возврат Результат;
	
	ТекДок = Новый ТекстовыйДокумент;
	ТекДок.Прочитать(Результат.ПутьКФайлу,КодировкаТекста.UTF8);
	
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	Возврат ТекДок.ПолучитьТекст();
	
КонецФункции

&НаСервере
Процедура КонвертироватьРедактируемыеПоляСообщенияВEDI(Сообщение)
	
	Если Сообщение.ТипСообщения = "RETINS" Тогда
		
		Для каждого Строка Из Сообщение.Товары Цикл
			Строка.РешениеПоВозвратуEDI = МодульОбъекта().КонвертироватьЗначение1СвEDI(Строка.РешениеПоВозврату1С,,"ДействиеПоВозврату");
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДокументКлиент(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

//подготовка / поиск данных

&НаКлиенте
Функция НайтиРекурсивноНижнююСтроку(Строки)
	
	НижняяСтрока = Строки[Строки.Количество()-1];
	
	Если НижняяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
		НижняяСтрока = НайтиРекурсивноНижнююСтроку(НижняяСтрока.ПолучитьЭлементы());
	КонецЕсли;
	
	Возврат НижняяСтрока;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОбщееКоличествоТоварныхПозиций(Строка)
	
	Количество 		= 0;
	НайденнаяСтрока = Неопределено;
	
	МассивНайденныхСтрок = Товары.НайтиСтроки(Новый Структура("НомерСтроки", Строка.НомерСтроки));
	Если Не МассивНайденныхСтрок.Количество() = 0 Тогда
		НайденнаяСтрока = МассивНайденныхСтрок[0];
	КонецЕсли;
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		Количество = НайденнаяСтрока.Количество;	
	КонецЕсли;
		
	Возврат Количество;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРазмещенноеКоличество(Строка)
	
	Количество = 0;

	//для вложений не более одного: верхний уровень - упаковки, нижний - товары
	Для Каждого Упаковка Из ТранспортныеУпаковки.ПолучитьЭлементы() Цикл
		Для Каждого Товар Из Упаковка.ПолучитьЭлементы() Цикл
			Если Товар.НомерСтроки = Строка.НомерСтроки Тогда
				Количество = Количество + Товар.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

//учет упаковок по sscc

&НаКлиенте
Функция ПолучитьТипУпаковки(КодТипа)
	
	ТипУпаковки = "Упаковка";
	
	Если КодТипа = "201" Тогда
		ТипУпаковки = "Европалета";
	КонецЕсли;
	
	Возврат ТипУпаковки;
	
КонецФункции

&НаСервере
Функция ПолучитьТипУпаковкиСервер(КодТипа)
	
	ТипУпаковки = "Упаковка";
	
	Если КодТипа = "201" Тогда
		ТипУпаковки = "Европалета";
	КонецЕсли;
	
	Возврат ТипУпаковки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРазвернутоеНаименованиеТовара(Строка)
	
	Наименование = "";
	
	Номенклатура = Строка(Строка.Номенклатура); 
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Наименование = Наименование + Номенклатура;
	КонецЕсли;
	
	ХарактеристикаНоменклатуры = Строка(Строка.ХарактеристикаНоменклатуры); 
		
	ЕдиницаИзменения = Строка(Строка.ЕдиницаИзмерения);
	
	Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) 
		 ИЛИ ЗначениеЗаполнено(ЕдиницаИзменения) Тогда
		 
		Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры)
			 И ЗначениеЗаполнено(ЕдиницаИзменения) Тогда
			Наименование = Наименование + " " + "( " + ХарактеристикаНоменклатуры + "," + " " + ЕдиницаИзменения + " )";
		Иначе
			Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
				Наименование = Наименование + " " + "( " + ХарактеристикаНоменклатуры + " )";
			ИначеЕсли ЗначениеЗаполнено(ЕдиницаИзменения) Тогда
				Наименование = Наименование + " " + "( " + ЕдиницаИзменения + " )";
			КонецЕсли;				 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

//интерфейсная обработка

&НаКлиенте
Процедура ВыделитьСтроку(Строка)
	
	Элементы.ТранспортныеУпаковки.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	Элементы.ТранспортныеУпаковки.ТекущийЭлемент = Элементы.ТранспортныеУпаковки.ПодчиненныеЭлементы.ТранспортныеУпаковкиКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЯчейку(Строка, ВыделитьТекст = Ложь)
	
	Элементы.ТранспортныеУпаковки.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	Элементы.ТранспортныеУпаковки.ТекущийЭлемент = Элементы.ТранспортныеУпаковки.ПодчиненныеЭлементы.ТранспортныеУпаковкиКоличество;
	Если ВыделитьТекст = Истина Тогда
		Элементы.ТранспортныеУпаковки.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеРазмещения()

	//заполнили "Товарные позиции" заново
	ТоварныеПозиции.Очистить();
	Для Каждого Строка Из Товары Цикл
		НоваяСтрока = ТоварныеПозиции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			НоваяСтрока.Номенклатура = Строка.Наименование;
		КонецЕсли;
	КонецЦикла;
	
	//уменьшаем товарные позиции на распределенные количества
	Для Каждого Упаковка Из ТранспортныеУпаковки.ПолучитьЭлементы() Цикл
		Для Каждого Товар Из Упаковка.ПолучитьЭлементы() Цикл
			
			Отбор = Новый Структура("НомерСтроки",Товар.НомерСтроки);
			МассивТоварныхПозиций = ТоварныеПозиции.НайтиСтроки(Отбор);
			
			Если МассивТоварныхПозиций.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТоварнойПозиции = МассивТоварныхПозиций.Получить(0);
			
			СтрокаТоварнойПозиции.Количество = СтрокаТоварнойПозиции.Количество - Товар.Количество;  				
			
			Если СтрокаТоварнойПозиции.Количество = 0 Тогда
				ТоварныеПозиции.Удалить(СтрокаТоварнойПозиции);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;	
	
		
	ВычислитьКоличествоВУпаковках(ТранспортныеУпаковки.ПолучитьЭлементы());
		
	СортироватьТоварныеПозиции();
		
	ПронумероватьУпаковкиСквознымПорядковымНомером();
	ПроименоватьУпаковки();
	РазвернутьВсеУровниТранспортныхУпаковок();
		
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеУровниТранспортныхУпаковок()

	Для каждого Строка Из ТранспортныеУпаковки.получитьЭлементы() Цикл
		ИдСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ТранспортныеУпаковки.Развернуть(ИдСтроки);
	КонецЦикла;	

КонецПроцедуры


&НаКлиенте
Процедура ВычислитьКоличествоВУпаковках(Упаковки)
	
	Для Каждого Упаковка Из Упаковки Цикл
		Количество = 0;
		Для Каждого Товар Из Упаковка.ПолучитьЭлементы() Цикл
			Количество = Количество + Товар.Количество;
		КонецЦикла;
		Упаковка.Количество = Количество;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьТоварныеПозиции()
	
	ТоварныеПозиции.Сортировать("НомерСтроки");	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНомераГТДПоСтроке(НомерСтроки)
	НомераГТД="";
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	СтрокаТоваров = Сообщение.Товары[НомерСтроки-1].НомерГТДEDI;
	Для каждого СтрокаГТД Из СтрокаТоваров Цикл
		НомераГТД = ?(НомераГТД="",НомераГТД,НомераГТД+Символы.ПС) + СтрокаГТД.НомерГТД;
	КонецЦикла;
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
	Возврат НомераГТД;
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоКВозвратуИПричины1С(НомерСтроки)
	
	КоличествоКВозвратуИПричины1С = "";
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	КоличествоИПричина = Сообщение.Товары[НомерСтроки-1].КоличествоКВозвратуИПричина1С;
	Для каждого Строка Из КоличествоИПричина Цикл
		КоличествоКВозвратуИПричины1С = КоличествоКВозвратуИПричины1С + Строка.ПричинаВозврата + "-" + Строка.КоличествоКВозврату + Символы.ПС;
	КонецЦикла;
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
	Возврат КоличествоКВозвратуИПричины1С;
	
КонецФункции

// нумерация упаковок и товаров

&НаКлиенте
Процедура ПронумероватьУпаковкиСквознымПорядковымНомером()
	
	//на будущее: когда появятся вложения - тогда здесь рекурсивно проваливаться вниз
	
	НомерУпаковки = 1; 
	
	Для Каждого Строка Из ТранспортныеУпаковки.ПолучитьЭлементы() Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ТипУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.НомерУпаковки = НомерУпаковки + 1; //делаем +1 - поскольку в формате имеется корневой узел, начинаем нумеровать упаковки с 2-ки
		
		ПронумероватьТоварыУпаковки(Строка);
		
		НомерУпаковки = НомерУпаковки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПронумероватьТоварыУпаковки(Упаковка)
	
	Для Каждого Товар Из Упаковка.ПолучитьЭлементы() Цикл
		
		Товар.НомерУпаковки = Упаковка.НомерУпаковки;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроименоватьУпаковки()
	
	Для Каждого Строка Из ТранспортныеУпаковки.ПолучитьЭлементы() Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ТипУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьСоставУпаковки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоставУпаковки(Упаковка)
	
	ТекстSSCC = ?(ЗначениеЗаполнено(Упаковка.SSCC), " (" + Упаковка.SSCC + ")", "");
	
	РасшифровкаТипУпаковки = ПолучитьТипУпаковки(Упаковка.ТипУпаковки);
	
	Упаковка.СоставУпаковки = РасшифровкаТипУпаковки + " " + "№" + Строка(Упаковка.НомерУпаковки-1) + ТекстSSCC;
	
КонецПроцедуры

&НаСервере
Процедура ПромаркироватьУпаковкиSSCCКодом()
	
	//на будущее: когда появятся вложения - тогда здесь рекурсивно проваливаться вниз
	
	Нумератор = 1;
	
	Для Каждого Строка Из ТранспортныеУпаковки.ПолучитьЭлементы() Цикл
        //маркируем только строки упаковок, в которых не заполнен SSCC-код
		Если Не ЗначениеЗаполнено(Строка.ТипУпаковки) или ЗначениеЗаполнено(Строка.SSCC) Тогда  
			Продолжить;
		КонецЕсли;
		
		РасшифровкаТипУпаковки	= ПолучитьТипУпаковкиСервер(Строка.ТипУпаковки);
		
		Строка.SSCC 			= ПолучитьSSCCКодУпаковки(Нумератор);
		//делаем -1 - поскольку в формате имеется корневой узел, начинаем нумеровать упаковки с 2-ки
		Строка.СоставУпаковки 	= РасшифровкаТипУпаковки + " " + "№" + Строка(Строка.НомерУпаковки-1) + " " + "(" + Строка.SSCC + ")";
		Нумератор = Нумератор + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьSSCCКодУпаковки(НомерУпаковкиТекущейОтгрузки)
	
	SSCC = "";
	Продавец = Сообщение.Продавец1С;
	GLNПродавца = Сообщение.ПродавецEDI.GLN;
			
	НомерПоследнейОтгруженнойУпаковки = ПолучитьНомерПоследнейУпаковки(Продавец);
	
	СтрокаНомерФормируемойУпаковки = СтрЗаменить( Строка(НомерПоследнейОтгруженнойУпаковки + НомерУпаковкиТекущейОтгрузки), Символы.НПП, "" );
	
	SSCC = СгенерироватьSSCC(GLNПродавца, СтрокаНомерФормируемойУпаковки); 
	
	Возврат SSCC;			
	
КонецФункции

&НаСервере
Функция ПолучитьНомерПоследнейУпаковки(Продавец)
	
	НомерПоследнейУпаковки = 0;
	
	РезервнаяСхемаSSCC = (МодульОбъекта().ПолучитьКонстантуEDI("РезервнаяСхемаSSCC")=Истина);
	ПоследнийSSCCКод = МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Продавец, "ПоследнийSSCCКод");
	
	НачалоНомераУпаковки 				= ?(РезервнаяСхемаSSCC,14,11);  
	КоличествоСимволовНомераУпаковки 	= ?(РезервнаяСхемаSSCC,4,7);
		
	Если ПоследнийSSCCКод = Неопределено Тогда
		НомерПоследнейУпаковки = 0;
	Иначе
		НомерПоследнейУпаковки = Число(Сред(ПоследнийSSCCКод,НачалоНомераУпаковки,КоличествоСимволовНомераУпаковки));
	КонецЕсли;
		
	Возврат НомерПоследнейУпаковки;
	
КонецФункции

&НаСервере
Процедура УстановитьНомерПоследнейУпаковки()
	
	Продавец = Сообщение.Продавец1С;

	ПоследнийSSCCКодТекущейПоставкиЧисло  = 0;
	ПоследнийSSCCКодТекущейПоставкиСтрока = 0;
	
	Для Каждого Строка Из ТранспортныеУпаковки.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Строка.SSCC) И Число(Строка.SSCC) > ПоследнийSSCCКодТекущейПоставкиЧисло Тогда
			ПоследнийSSCCКодТекущейПоставкиЧисло  = Число(Строка.SSCC);
			ПоследнийSSCCКодТекущейПоставкиСтрока = Строка.SSCC;
		КонецЕсли;
	КонецЦикла;
	
	ПоследнийSSCCКодВсехПоставок = МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Продавец, "ПоследнийSSCCКод");
    Если ПоследнийSSCCКодВсехПоставок = Неопределено Тогда
        ПоследнийSSCCКодВсехПоставок = "0";
    КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПоследнийSSCCКодТекущейПоставкиСтрока) и Число(ПоследнийSSCCКодВсехПоставок) < ПоследнийSSCCКодТекущейПоставкиЧисло Тогда	
		МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(Продавец, "ПоследнийSSCCКод", ПоследнийSSCCКодТекущейПоставкиСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СгенерироватьSSCC(GLNПродавца, НомерУпаковки)
	
	SSCC = "";
	
	РезервнаяСхемаSSCC = (МодульОбъекта().ПолучитьКонстантуEDI("РезервнаяСхемаSSCC")=Истина);
	
	ПрефиксПродавца = Лев(GLNПродавца,?(РезервнаяСхемаSSCC,12,9));
	ДлинаSSCCКода 	= 17;
	СуммаЧетных 	= 0;
	СуммаНечетных 	= 0;
	
	//добиваем нулями номер паллеты
	КоличествоНулей 	= ?(РезервнаяСхемаSSCC,4,7) - СтрДлина(НомерУпаковки);
	СтрокаНомерУпаковки = "";
	Для К = 1 По КоличествоНулей Цикл
		СтрокаНомерУпаковки = СтрокаНомерУпаковки + "0";	
	КонецЦикла;
	СтрокаНомерУпаковки = СтрокаНомерУпаковки + НомерУпаковки;
	
	Шаблон = "1" + ПрефиксПродавца + СтрокаНомерУпаковки;
	
	//вычисляем контрольный разряд
	КопияШаблон = Шаблон;
	Для Позиция = 1 По ДлинаSSCCКода Цикл
		Фрагмент   	= Число( Прав( КопияШаблон, 1 ) );
		КопияШаблон = Лев( Шаблон, ДлинаSSCCКода - Позиция);
		Если (Позиция/2) = Цел(Позиция/2) Тогда
			СуммаНечетных = СуммаНечетных + Фрагмент;
		Иначе	
			СуммаЧетных = СуммаЧетных + Фрагмент;
		КонецЕсли;			
	КонецЦикла;
	КонтрольнаяСумма = Строка(СуммаЧетных*3 + СуммаНечетных);
	КонтрольныйРазряд = 10 - Число( Прав( КонтрольнаяСумма,1 ) );
	Если КонтрольныйРазряд = 10 Тогда
		КонтрольныйРазряд = 0;
	КонецЕсли;	
	SSCC = Шаблон + Строка(КонтрольныйРазряд);
	
	Возврат SSCC;	
	
КонецФункции

&НаКлиенте
Процедура ТаблицаОшибокПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаОшибок.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		СделатьАктивнымПоле(ТекущаяСтрока.ИмяПоля,ТекущаяСтрока.ИмяТабличнойЧасти,ТекущаяСтрока.НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьАктивнымПоле(ИмяПоля,ИмяТабличнойЧасти,НомерСтроки)//
	
	Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		
		ТабличнаяЧасть = Элементы[ИмяТабличнойЧасти];
		
		ЭтаФорма.ТекущийЭлемент = ТабличнаяЧасть;
		
		Если НЕ НомерСтроки = 0 Тогда
			
			ТабличнаяЧасть.ТекущийЭлемент	= Элементы.Найти(ИмяТабличнойЧасти+ИмяПоля);
			Выполнить("ТабличнаяЧасть.ТекущаяСтрока	= "+ИмяТабличнойЧасти+"[НомерСтроки-1].ПолучитьИдентификатор()");
			
		КонецЕсли;
		
	Иначе	
		
		Если ЗначениеЗаполнено(ИмяПоля) Тогда
			
			Если Найти(ИмяПоля,"Грузоотправитель") > 0 Тогда
				
				ЭтаФорма.ТекущийЭлемент = Элементы.ДействиеГрузоотправитель;
				
			ИначеЕсли Найти(ИмяПоля,"Грузополучатель") > 0 Тогда
				
				ЭтаФорма.ТекущийЭлемент = Элементы.ДействиеГрузополучатель;
				
			ИначеЕсли Найти(ИмяПоля,"Продавец") > 0 Тогда
				
				Если КтоМы = "Поставщик" Тогда
					ЭтаФорма.ТекущийЭлемент = Элементы.ДействиеЮрФизЛицоСвое;
				Иначе
					ЭтаФорма.ТекущийЭлемент = Элементы.ДействиеЮрФизЛицоСтороннее;
				КонецЕсли;
				
			ИначеЕсли Найти(ИмяПоля,"Покупатель") > 0 Тогда
				
				Если КтоМы = "Поставщик" Тогда
					ЭтаФорма.ТекущийЭлемент = Элементы.ДействиеЮрФизЛицоСтороннее;
				Иначе
					ЭтаФорма.ТекущийЭлемент = Элементы.ДействиеЮрФизЛицоСвое;
				КонецЕсли;
				
			ИначеЕсли Найти(ИмяПоля,"ЗаказEDI") > 0 Тогда
				
				
			ИначеЕсли Найти(ИмяПоля,"СчетФактураEDI") > 0 Тогда
				
				ЭтаФорма.ТекущийЭлемент = Элементы.СчетФактура1С;
				
			ИначеЕсли Особенности.НайтиСтроки(Новый Структура("Идентификатор",ИмяПоля )).Количество() > 0 Тогда
				
				ТабличнаяЧасть = Элементы.Особенности;
				ЭтаФорма.ТекущийЭлемент = ТабличнаяЧасть;
				
				ТабличнаяЧасть.ТекущаяСтрока	= Особенности.НайтиСтроки(Новый Структура("Идентификатор",ИмяПоля ))[0].ПолучитьИдентификатор();				
				ТабличнаяЧасть.ТекущийЭлемент	= Элементы.ОсобенностиЗначение;
				
			Иначе
				
				НайденноеПоле = Элементы.Найти(ИмяПоля);
				Если НЕ НайденноеПоле = Неопределено Тогда
					ЭтаФорма.ТекущийЭлемент = НайденноеПоле;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОшибокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаОшибокДействие" Тогда
		
		ИмяПоля=Элемент.ТекущиеДанные.ИмяПоля;
		
		НайденнаяСтрока = НайтиСтрокуНастройкиСсылокИсправленияОшибок(Элемент.ТекущиеДанные.ИмяПоля);
		                  
		Если Не НайденнаяСтрока = Неопределено Тогда
			
			ОбработчикИсправленияОшибкиКлиент(НайденнаяСтрока,ИмяПоля,Элемент.ТекущаяСтрока,Элемент.ТекущиеДанные.ТекстОшибки);
			
			ОбработчикПослеИсправленияОшибки(ИмяПоля);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуНастройкиСсылокИсправленияОшибок(ИмяПоля)
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	НайденнаяСтрока = НастройкаСсылокИсправленияОшибок.Найти(ИмяПоля, "ИмяПоля");
	Если НайденнаяСтрока <> Неопределено Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ИмяПоля",НайденнаяСтрока.ИмяПоля);
		СтруктураВозврата.Вставить("ТекстСсылки",НайденнаяСтрока.ТекстСсылки);
		СтруктураВозврата.Вставить("ТипСсылки",НайденнаяСтрока.ТипСсылки);
	Иначе
		СтруктураВозврата = неопределено;
	КонецЕсли;
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
	
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура ОбработчикПослеИсправленияОшибки(ИмяПоля,ДопПараметр=неопределено) Экспорт//
	
	
	Если Сообщение.Направление = "Исходящее" Тогда
		ПерезаполнитьИсходящееСообщение();
	Иначе
		Если ИмяПоля = "Грузополучатель1С"
			Или ИмяПоля = "Покупатель1С"
			Тогда
			
			//Сообщение[ИмяПоля] = КопияСообщения[ИмяПоля];     //включить, когда будет передаваться копия сообщения
			//ЭтаФорма[ИмяПоля] = Сообщение[ИмяПоля];
			
			ПроверитьЗаполнениеПолей();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработчикИсправленияОшибкиКлиент(НайденнаяСтрока,ИмяПоля,НомерСтроки,ТекстОшибки) Экспорт//
		//Сообщить("Функционал в разработке, исправьте вручную");
		//КопияСообщения = МодульИнтеграции_Новый.ПолучитьКопиюСообщения(Сообщение);
		КопияСообщения=Неопределено;
		ВыполнитьДействиеДляИсправлениеОшибкиСообщения(КопияСообщения,ИмяПоля,НайденнаяСтрока.ТипСсылки,НомерСтроки,ТекстОшибки);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикРедактированияТочкиДоставкиСторонней(Параметр1,ДопПараметр=Неопределено) Экспорт
	ПроверитьЗаполнениеПолей();	
КонецПроцедуры

&НаКлиенте                                             
Функция ВыполнитьДействиеДляИсправлениеОшибкиСообщения(Сообщение,ИмяПоля,ТипСсылки,НомерСтроки = Неопределено,ТекстОшибки = Неопределено) Экспорт //Только для ОФ.
	//В УФ Неопределено                                                                                           //Для УФ эта клиентская функция определена в ФормаСообщенияУправляемая
	Если ТипСсылки = "КарточкаКонтрагента" Тогда
		
		Если ИмяПоля = "Грузополучатель1С" Тогда
			Если ЭтаФорма.Сообщение.ТипСообщения = "ORDERS" Тогда
				Если Найти(ТекстОшибки,"не указана связь с точкой доставк")>0 или Найти(ТекстОшибки,"не указана связь с юр.")>0 Тогда
					
					//Открыть форму ТД
					Состояние("Открываю точку доставки",75);
					
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("СсылкаТочкиДоставки", ЭтаФорма.Сообщение.Грузополучатель1С);
					Если Параметры.МодальностьЗапрещена Тогда 
						Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""ТочкиДоставкиСторонние_ЭлементУправляемая"", ПараметрыФормы,""ОбработчикРедактированияТочкиДоставкиСторонней"")");//,ДополнительныеПараметры);
					Иначе
						ТочкаДоставкиСторонняя = ПолучитьФормуОбработки("ТочкиДоставкиСторонние_ЭлементУправляемая",ПараметрыФормы,ЭтаФорма).ОткрытьМодально();
						ОбработчикРедактированияТочкиДоставкиСторонней(ТочкаДоставкиСторонняя);
					КонецЕсли;
					
					Возврат Неопределено;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//выше - была ТД но без соотв.
		
		//ниже - не было самой ТД
		Если Прав(ИмяПоля,3) = "EDI" Тогда
			ИмяПоляКонтрагента = Лев(ИмяПоля,СтрДлина(ИмяПоля)-3);
		ИначеЕсли Прав(ИмяПоля,2) = "1С" Тогда
			ИмяПоляКонтрагента = Лев(ИмяПоля,СтрДлина(ИмяПоля)-2);
		Иначе 
			ИмяПоляКонтрагента = ИмяПоля;
		КонецЕсли;
		
		//открыть форму контрагента для интерактивных действий пользователя
		ОткрытьФормуКонтрагента(ИмяПоляКонтрагента);
		
	ИначеЕсли ТипСсылки = "Документ1С" Тогда
		
		//Сообщение.ДокументСсылка.ПолучитьФорму().ОткрытьМодально();
		
	ИначеЕсли ТипСсылки = "НоменклатураСсылка" Тогда
		
		ТекстПредупреждения="Необходимо открыть карточку партнера, перейти в соответствия номенклатуры и проверить соответствия.";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		
	//	Если Сообщение.ТипСообщения = "PORDERS" Тогда
	//		
	//		Если НомерСтроки > 0 Тогда
	//			Номенклатура  		= Сообщение.Товары[НомерСтроки-1].Номенклатура;
	//			ЕдиницаИзмерения 	= Сообщение.Товары[НомерСтроки-1].ЕдиницаИзмерения;
	//			Если ЗначениеЗаполнено(Номенклатура) и ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
	//				ХарактеристикаНоменклатуры = Сообщение.Товары[НомерСтроки-1].ХарактеристикаНоменклатуры;
	//				Штрихкод = ПолучитьШтрихкодНоменклатуры(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения",Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения));
	//				ФормаНоменклатуры = ПолучитьФорму("ФормаНоменклатура_Элемент");
	//				ФормаНоменклатуры.Партнер				= Сообщение.Получатель1С;
	//				ФормаНоменклатуры.Наименование			= Номенклатура.Наименование;
	//				ФормаНоменклатуры.GTIN					= Штрихкод;
	//				ФормаНоменклатуры.КодТовараВнутренний 	= Номенклатура.Код;
	//				СписокНоменклатуры = ФормаНоменклатуры.СписокНоменклатуры;
	//				НоваяСтрока = СписокНоменклатуры.Добавить();
	//				НоваяСтрока.Номенклатура 				= Номенклатура;
	//				НоваяСтрока.ХарактеристикаНоменклатуры 	= ХарактеристикаНоменклатуры;
	//				НоваяСтрока.ЕдиницаИзмерения 			= ЕдиницаИзмерения;
	//				ФормаНоменклатуры.ОткрытьМодально();
	//			КонецЕсли;				
	//		КонецЕсли;
	//		
	//	Иначе
	//	
	//		Если НомерСтроки>0 Тогда
	//			Номенклатура = Сообщение.Товары[НомерСтроки-1].Номенклатура;
	//			Если ЗначениеЗаполнено(Номенклатура) Тогда
	//				Номенклатура.ПолучитьФорму().ОткрытьМодально();
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//ИначеЕсли ТипСсылки = "ДокументДиадок" Тогда
	//	
	//	Если Не Найти(ТекстОшибки, "Отказ в подписи накладной") = 0 Тогда
	//		
	//		boxId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "boxId"));
	//		messageId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "messageId"));
	//		torg12Id = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "torg12Id"));
	//		Если ЗначениеЗаполнено(boxId) и ЗначениеЗаполнено(messageId) и ЗначениеЗаполнено(torg12Id) Тогда
	//			ЗапуститьПриложение("https://diadoc.kontur.ru/"+boxId+"/Document/Show?letterId="+messageId+"&documentId="+torg12Id);
	//		КонецЕсли;
	//		
	//	ИначеЕсли Не Найти(ТекстОшибки, "Запрос на уточнение счета-фактуры") = 0 Тогда
	//		
	//		boxId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "boxId"));
	//		messageId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "messageId"));
	//		invoiceId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "invoiceId"));
	//		Если ЗначениеЗаполнено(boxId) и ЗначениеЗаполнено(messageId) и ЗначениеЗаполнено(invoiceId) Тогда
	//			ЗапуститьПриложение("https://diadoc.kontur.ru/"+boxId+"/Document/Show?letterId="+messageId+"&documentId="+invoiceId);
	//		КонецЕсли;
	//		
	//	КонецЕсли;
		
	КонецЕсли;
	
	
КонецФункции


&НаСервере
Процедура ОбработчикИсправленияОшибкиСервер()//
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)//!!
	
	ИмяКолонки=Поле.Имя;
	
	Если Сообщение.Направление = "Входящее" Тогда
		Если ИмяКолонки = "ТоварыНоменклатура" ИЛИ ИмяКолонки = "ТоварыЕдиницаИзмерения" ИЛИ ИмяКолонки = "ТоварыХарактеристикаНоменклатуры" Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Если Сообщение.ТипСообщения = "RETDES" Тогда 
				// supplier code & buyer code поменяны местами EDI_An-354
				СписокВыбора = СоставитьСписокВыбораПоСтрокеТоваров(Элементы.Товары.ТекущиеДанные.GTIN,Элементы.Товары.ТекущиеДанные.КодТовараПоставщика,Отправитель1С);
			Иначе
				СписокВыбора = СоставитьСписокВыбораПоСтрокеТоваров(Элементы.Товары.ТекущиеДанные.GTIN,Элементы.Товары.ТекущиеДанные.КодТовараПокупателя,Отправитель1С);
			КонецЕсли;
			
			Если Параметры.МодальностьЗапрещена Тогда
				
				Выполнить("ПоказатьВыборИзМеню(Новый ОписаниеОповещения(""ОбработчикВыбораСоответствияИзМеню"",ЭтаФорма), СписокВыбора)");//в активный элемент//, Элемент) 
				
			иначе
				ВыбранноеЗначение = ВыбратьИзМеню(СписокВыбора,Элемент);
				
				ОбработчикВыбораСоответствияИзМеню(ВыбранноеЗначение,неопределено)
				
			КонецЕсли;
			
			////перезаполнить товарную группу реализовано в обработчике: ОбработчикВыбораСоответствияИзМеню
			
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяКолонки = "ТоварыНомерГТДEDI" Тогда
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.НомерГТДEDI) Тогда 
			Попытка
				ТекстГТД = ПолучитьНомераГТДПоСтроке(Элемент.ТекущиеДанные.НомерСтроки);
				Если Параметры.МодальностьЗапрещена Тогда 
					Выполнить("ПоказатьПредупреждение(,ТекстГТД,,""Номера ГТД"")");
				Иначе
					Предупреждение(ТекстГТД,,"Номера ГТД");
				КонецЕсли;
			Исключение
			УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Если ИмяКолонки = "ТоварыКоличествоКВозвратуИПричина1С" Тогда
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.КоличествоКВозвратуИПричина1С) Тогда 
			Попытка
				ТекстКоличествоКВозвратуИПричины1С = ПолучитьКоличествоКВозвратуИПричины1С(Элемент.ТекущиеДанные.НомерСтроки);
				Если Параметры.МодальностьЗапрещена Тогда 
					Выполнить("ПоказатьПредупреждение(,ТекстКоличествоКВозвратуИПричины1С,,""Количество к возврату"")");
				Иначе
					Предупреждение(ТекстКоличествоКВозвратуИПричины1С,,"Количество к возврату");
				КонецЕсли;
			Исключение
				УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Если ИмяКолонки = "ТоварыНеЗагружать" Тогда
		
		Элемент.ТекущиеДанные.НеЗагружать = НЕ Элемент.ТекущиеДанные.НеЗагружать;
		ПроверитьЗаполнениеПолей();

	КонецЕсли;
	
	Если НЕ ТолькоПросмотрСообщения
		И ИмяКолонки = "ТоварыРешениеПоВозврату1С" Тогда
		
		СписокВыбора = Поле.СписокВыбора;
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВыборИзМеню(Новый ОписаниеОповещения(""ОбработчикВыбораРешенияПоВозврату"",ЭтаФорма), СписокВыбора)"); 
		иначе
			ВыбранноеЗначение = ВыбратьИзМеню(СписокВыбора, Поле);
			ОбработчикВыбораРешенияПоВозврату(ВыбранноеЗначение);
		КонецЕсли;
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораРешенияПоВозврату(ВыбранноеЗначение, Параметры = Неопределено) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		ТекДанные = Элементы.Товары.ТекущиеДанные;
		Элементы.Товары.ТекущиеДанные.РешениеПоВозврату1С = ВыбранноеЗначение.Значение;
		
		НайденныеСтроки = ТаблицаОшибок.НайтиСтроки(Новый Структура("ИмяПоля,НомерСтроки", "РешениеПоВозвратуEDI", ТекДанные.НомерСтроки));
		Если НЕ НайденныеСтроки.Количество() = 0 Тогда
			ТаблицаОшибок.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослеИнтерактивнойНастройкиСоответствий(ВыбранноеЗначение,Параметры) Экспорт
        ТекСтрока = Элементы.Товары.ТекущиеДанные;
	    ИдентификаторТекСтроки=ТекСтрока.ПолучитьИдентификатор();
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
			//на сервер!!!
			ОбработчикПослеИнтерактивнойНастройкиСоответствийСервер(ИдентификаторТекСтроки);//передать идентификатор строки
		иначе
			//уже была какая-то номенклатура выбрана в поле, но возможно у неё поменяли артикул...
			ДозаполнитьАртикулКодПолноеНаименованиеТЧТовары();
		КонецЕсли;
		
		ЗаполнитьТоварнуюГруппуТаблицыТоваровВызовСервера();
КонецПроцедуры

&НаСервере
Процедура ОбработчикПослеИнтерактивнойНастройкиСоответствийСервер(ИдентификаторТекСтроки)     //найти строку по идентификатору
	
	ВыбраннаяСтрока=Товары.НайтиПоИдентификатору(ИдентификаторТекСтроки);
	
	Если Сообщение.ТипСообщения = "RETDES" Тогда 
		// supplier code & buyer code поменяны местами EDI_An-354
		СоответствиеТоваров = МодульОбъекта().СоответствиеТоваров_НайтиНоменклатуру(ВыбраннаяСтрока.GTIN,ВыбраннаяСтрока.КодТовараПоставщика,Отправитель1С);
	Иначе	
		СоответствиеТоваров = МодульОбъекта().СоответствиеТоваров_НайтиНоменклатуру(ВыбраннаяСтрока.GTIN,ВыбраннаяСтрока.КодТовараПокупателя,Отправитель1С);
	КонецЕсли;	
	
	Для каждого Стр Из СоответствиеТоваров Цикл
		Если Стр.Основной Тогда
			
			ВыбраннаяСтрока.Номенклатура				= Стр.Номенклатура;
			ВыбраннаяСтрока.ХарактеристикаНоменклатуры	= Стр.ХарактеристикаНоменклатуры;
			ВыбраннаяСтрока.ЕдиницаИзмерения			= Стр.ЕдиницаИзмерения;
			
			ПроверитьЗаполнениеПолей();
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//дозаполним код, артикул, ПолноеНаименование
	ДозаполнитьАртикулКодПолноеНаименованиеТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораСоответствияИзМеню(ВыбранноеЗначение,ДопПараметры) Экспорт//!
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Если ВыбранноеЗначение.Значение = "Настроить соответствие товаров" Тогда
			
			ТекСтрока = Элементы.Товары.ТекущиеДанные;
			
			ПараметрыФормы=	Новый Структура;
			ПараметрыФормы.Вставить("Партнер"			,Отправитель1С);
			ПараметрыФормы.Вставить("GTIN"				,ТекСтрока.GTIN);
			
			ПараметрыФормы.Вставить("Наименование"		,ТекСтрока.Наименование);
			Если Сообщение.ТипСообщения = "RETDES" Тогда
				// supplier code & buyer code поменяны местами EDI_An-354
				ПараметрыФормы.Вставить("КодТовараПартнера"	,ТекСтрока.КодТовараПоставщика);
			ИначеЕсли КтоМы="Поставщик" тогда
				ПараметрыФормы.Вставить("КодТовараПартнера"	,ТекСтрока.КодТовараПокупателя);
			Иначе
				ПараметрыФормы.Вставить("КодТовараПартнера"	,ТекСтрока.КодТовараПоставщика);
			КонецЕсли;
			
			Если Параметры.МодальностьЗапрещена Тогда 
				Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Номенклатура_ЭлементУправляемая"", ПараметрыФормы,""ОбработчикПослеИнтерактивнойНастройкиСоответствий"")");//,ДополнительныеПараметры);
			Иначе
				ПолучитьФормуОбработки("Номенклатура_ЭлементУправляемая",ПараметрыФормы).ОткрытьМодально();
				ОбработчикПослеИнтерактивнойНастройкиСоответствий("", "")
			КонецЕсли;
			
		Иначе
			
			СтруктураТовара = ВыбранноеЗначение.Значение;
			
			ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные,СтруктураТовара,"Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,КоэффициентEDIВ1С");
			
			ОчиститьСообщения();//на рефакторинг - перетащить к пометкам
			ПроверитьЗаполнениеПолей();
			
			//дозаполним код, артикул, ПолноеНаименование
			ДозаполнитьАртикулКодПолноеНаименованиеТЧТовары();
			
			ЗаполнитьТоварнуюГруппуТаблицыТоваровВызовСервера();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварнуюГруппуТаблицыТоваровВызовСервера()

	МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьТоварнуюГруппуТаблицыТоваров",,Новый Структура("Сообщение,Товары",Сообщение,Товары));

КонецПроцедуры // ЗаполнитьТоварнуюГруппуТаблицыТоваровВызовСервера()


&НаКлиенте
Процедура ОбработчикПослеВводаДаты(ВыбраннаяДата, ПараметрыЗакрытия) Экспорт
	Если НЕ ВыбраннаяДата = Неопределено Тогда
		
		//+для АТАК
		Если Сообщение.Свойство("ДатаПоставкиФактическая") Тогда
			ДатаПоставкиФактическая = ВыбраннаяДата;
			Сообщение.ДатаПоставкиФактическая = ВыбраннаяДата;
			Элементы.ПредставлениеДатыПоставки.Заголовок = ПолучитьПредставлениеДатыПоставки(Сообщение.ДатаПоставкиФактическая);
		КонецЕсли;
		//-
			
		Если Сообщение.ТипСообщения = "ORDRSP" И Не ВыбраннаяДата = Сообщение.ДатаПоставки Тогда
			ДополнитьТаблицуИзмененныхРеквизитов("ДатаПоставки", ВыбраннаяДата);
			ПерезаполнитьИсходящееСообщение();
		Иначе	
			ДатаПоставки = ВыбраннаяДата;
			Сообщение.ДатаПоставки = ВыбраннаяДата;
			Элементы.ПредставлениеДатыПоставки.Заголовок = ПолучитьПредставлениеДатыПоставки(Сообщение.ДатаПоставки);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоставитьСписокВыбораПоСтрокеТоваров(GTIN,КодТовараПокупателя,Отправитель1С)
	
	СоответствиеТоваров = МодульОбъекта().СоответствиеТоваров_НайтиНоменклатуру(GTIN,КодТовараПокупателя,Отправитель1С);
	
	СписокВыбора = Новый СписокЗначений;
	Для Каждого Стр Из СоответствиеТоваров Цикл
		
		СтруктураТовара = Новый Структура();
		
		СтруктураТовара.Вставить("Номенклатура",				Стр.Номенклатура);
		СтруктураТовара.Вставить("ХарактеристикаНоменклатуры",	Стр.ХарактеристикаНоменклатуры);
		СтруктураТовара.Вставить("ЕдиницаИзмерения",			Стр.ЕдиницаИзмерения);
		СтруктураТовара.Вставить("КоэффициентEDIВ1С",			Стр.КоэффициентEDIВ1С);
		
		Представление = СокрЛП(Стр.Номенклатура);
		Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
			Представление = Представление+", "+СокрЛП(Стр.ХарактеристикаНоменклатуры);
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
			Представление = Представление + ", " + СокрЛП(Стр.ЕдиницаИзмерения);
		КонецЕсли;
		
		СписокВыбора.Добавить(СтруктураТовара,Представление);
		
	КонецЦикла;
	
	СписокВыбора.Добавить("Настроить соответствие товаров",,,);//ПолучитьКартинкуEDI("ЭлементФормы","КартинкаПодписатьИОтправить"));
	
	Возврат СписокВыбора;
КонецФункции


&НаКлиенте
Процедура ТоварыНеЗагружатьПриИзменении(Элемент)
		ПроверитьЗаполнениеПолей();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДействиеДатаПоставкиНажатие(Элемент)
	
	ВыбраннаяДата = ДокументДата;
	Если ЗначениеЗаполнено(НакладнаяДата) Тогда
		ВыбраннаяДата = НакладнаяДата;
	ИначеЕсли ЗначениеЗаполнено(ПриемкаДата) Тогда
		ВыбраннаяДата = ПриемкаДата;
	КонецЕсли;
	
	Подсказка = "Укажите дату поставки";
	ЧастьДаты = ЧастиДаты.ДатаВремя;
	
	Если Параметры.МодальностьЗапрещена Тогда
		Оповещение = Неопределено;
		Выполнить("Оповещение = Новый ОписаниеОповещения(""ОбработчикПослеВводаДаты"",ЭтаФорма, Параметры)");
		Выполнить("ПоказатьВводДаты(Оповещение, ВыбраннаяДата, Подсказка, ЧастьДаты)");
	Иначе
		Если ВвестиДату(ВыбраннаяДата,Подсказка,ЧастьДаты) Тогда 			
			ОбработчикПослеВводаДаты(ВыбраннаяДата, Неопределено);

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьТаблицуИзмененныхРеквизитов(Наименование, Значение)

	//проверим наличие добавляемого реквизита в таблице
	ОтборСтрок = Новый Структура("Наименование",Наименование);
	
	НайденныеСтроки = ТаблицаИзмененныхРеквизитов.НайтиСтроки(ОтборСтрок);
	//НайденнаяСтрока = ТаблицаИзмененныхРеквизитов.Найти(Наименование, "Наименование");
	Если НайденныеСтроки.Количество() = 0 Тогда
		НовыйРеквизит = ТаблицаИзмененныхРеквизитов.Добавить();
		НовыйРеквизит.Наименование  = Наименование;
		НовыйРеквизит.Значение		= Значение;		
	Иначе
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			НайденнаяСтрока.Значение	= Значение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьИсходящееСообщение()
	
	ПараметрыПерезаполнения = Новый Структура("ИзмененныеРеквизиты", ПодготовитьСтруктуруИзмененныхРеквизитов());
	
	ПереотправляемоеСообщениеСсылка = Неопределено;
	Сообщение.Свойство("ПереотправляемоеСообщениеСсылка",ПереотправляемоеСообщениеСсылка);
	
	Сообщение = МодульОбъекта().ПодготовитьИсходящееСообщение(Сообщение.ТипСообщения, Сообщение.ДокументСсылка, ПараметрыПерезаполнения);
	
	Если ПереотправляемоеСообщениеСсылка<>Неопределено Тогда
		Сообщение.Вставить("ПереотправляемоеСообщениеСсылка",ПереотправляемоеСообщениеСсылка);
	КонецЕсли;
	
	ПолучитьПрикрепленныеСообщения();
	
	ЗаполнитьПоляНаФорме();

	НетОшибок = ПроверитьЗаполнениеПолей();
	
	Если НетОшибок И ТаблицаОшибок.Количество() = 0 Тогда
		
		ЗакрытьПанельОшибокСервер();
		
		Если КтоМы = "Поставщик" Тогда
			ВывестиПанельИнформации("В этой форме вы можете проверить данные, которые будут отправлены в торговую сеть.");
		Иначе
			ВывестиПанельИнформации("В этой форме вы можете проверить данные, которые будут отправлены поставщику.");
		КонецЕсли;
		
	Иначе

		ОткрытьПанельОшибокСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НайтиСвязанныеСообщения(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументСсылка",		Документ1С);
	ПараметрыФормы.Вставить("СообщениеСсылка",		Сообщение.СообщениеСсылка);
	ПараметрыФормы.Вставить("МодальностьЗапрещена",	Параметры.МодальностьЗапрещена);
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_СвязанныеСообщенияУправляемая"", ПараметрыФормы,)");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Сервис_СвязанныеСообщенияУправляемая",ПараметрыФормы).ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Документ1СНажатие(Элемент, СтандартнаяОбработка)
	НадписьОткрытьДокументНажатие(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НадписьОткрытьДокументНажатие(Элемент)
	Если ЗначениеЗаполнено(Документ1С) Тогда
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьЗначение(,Документ1С)");
		Иначе
			ОткрытьЗначение(Документ1С);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДействиеЮрФизЛицоСтороннееНажатие(Элемент)
	
	Если КтоМы = "Поставщик" Тогда
		ОткрытьФормуКонтрагента("Покупатель");
	Иначе
		ОткрытьФормуКонтрагента("Продавец");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействиеЮрФизЛицоСвоеНажатие(Элемент)
	
	Если КтоМы = "Поставщик" Тогда
		ОткрытьФормуКонтрагента("Продавец");
	Иначе
		ОткрытьФормуКонтрагента("Покупатель");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтрагента(ИмяПоляСообщения)
	
	 АдресСообщенияВВХ = ПоместитьКопиюСообщенияВВХ(); //сервер
 
 	//открыть форму
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("АдресСообщенияВВХ",	АдресСообщенияВВХ);
	ПараметрыФормы.Вставить("ИмяПоляСообщения",		ИмяПоляСообщения);
	
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""ФормаКонтрагентаУправляемая"", ПараметрыФормы,""ОбработчикПослеЗакрытияКарточкиКонтрагента"")");//,ДополнительныеПараметры);
	Иначе
		Результат=ПолучитьФормуОбработки("ФормаКонтрагентаУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослеЗакрытияКарточкиКонтрагента(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьКопиюСообщенияВВХ()

	АдресВВХ = Неопределено;
	
	КопияСообщения = МодульОбъекта().ПолучитьКопиюСообщения(Сообщение);
	АдресВВХ = ПоместитьВоВременноеХранилище(КопияСообщения,новый УникальныйИдентификатор);
	
	Возврат АдресВВХ;	

КонецФункции // ПоместитьКопиюСообщенияВВХ()


&НаКлиенте
Процедура ОбработчикПослеЗакрытияКарточкиКонтрагента(Результат=Неопределено,ДопПараметр=Неопределено) Экспорт

	Если Результат<>Неопределено и Результат.Свойство("Успешно") и Результат.Успешно = Истина Тогда
	Сообщение = ПолучитьИзВременногоХранилища(Результат.АдресВВХСообщения);	
		
		ЭтаФорма[Результат.ИмяПоля+"1С"] = Результат.ЮрФизЛицо1С;
		
		Если Сообщение.Направление = "Исходящее" Тогда
			
			Сообщение[Результат.ИмяПоля+"EDI"] = Результат.ЮрФизЛицо;
			
		Иначе
			Сообщение[Результат.ИмяПоля+"1С"] = Результат.ЮрФизЛицо1С;
		КонецЕсли;
		
		ПроверитьЗаполнениеПолей();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеГрузополучательНажатие(Элемент)
	
	ОткрытьФормуКонтрагента("Грузополучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеГрузоотправительНажатие(Элемент)
	ОткрытьФормуКонтрагента("Грузоотправитель");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОбратныйЗаказ(Команда)
	Результат = КнопкаДействияФормыНажатие(Команда.Имя);
	Если Результат<>Неопределено и Результат.Свойство("ЗакрытьФорму") и Результат.ЗакрытьФорму=истина  и ЭтаФорма.Открыта() тогда
		ЗакрытиеРазрешено=Истина;
		ЭтаФорма.Закрыть(неопределено); //отправим вместо ссылки на новое сообщение чтобы гарантированно вычеркнуть строку, ведь нам удалось отправить сообщение
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДействиеКонтактыНажатие(Элемент)
	
	ТекстПредупреждения = ПолучитьПредставлениеКонтактногоЛицаПоЗаказу();
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контакты по заказу"")");
	Иначе
		Предупреждение(ТекстПредупреждения,,"Контакты по заказу");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеКонтактногоЛицаПоЗаказу()
	Возврат МодульОбъекта().ПолучитьПредставлениеКонтактногоЛицаПоЗаказу(Сообщение);
КонецФункции

//sscc -------------------------------------------------------------------------------

//обработчики таблицы "Товарные позиции"

&НаКлиенте
Процедура ТоварныеПозицииВыбор(Элемент, ВыбраннаяСтрокаИдентификатор, Поле, СтандартнаяОбработка)
	
	Значение = Новый Массив;
	Значение.Добавить(ТоварныеПозиции.НайтиПоИдентификатору(ВыбраннаяСтрокаИдентификатор));
	
	ПараметрыПеретаскивания = Новый Структура;
	ПараметрыПеретаскивания.Вставить("Действие",			ДействиеПеретаскивания.Перемещение);
	ПараметрыПеретаскивания.Вставить("ДопустимыеДействия",	ДопустимыеДействияПеретаскивания.КопированиеИПеремещение);
	ПараметрыПеретаскивания.Вставить("Значение",			Значение);
	
	СтрокаТранспортнойУпаковки = Неопределено;
	Если Не Элементы.ТранспортныеУпаковки.ТекущаяСтрока = Неопределено Тогда
		СтрокаТранспортнойУпаковки 	= ТранспортныеУпаковки.НайтиПоИдентификатору(Элементы.ТранспортныеУпаковки.ТекущаяСтрока);
	КонецЕсли;
	КолонкаТранспортнойУпаковки	= Элементы.ТранспортныеУпаковки.ПодчиненныеЭлементы.ТранспортныеУпаковкиСоставУпаковки;
	
	ТранспортныеУпаковкиПеретаскивание(Элементы.ТоварныеПозиции, ПараметрыПеретаскивания, Истина, СтрокаТранспортнойУпаковки, КолонкаТранспортнойУпаковки)	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеПозицииПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПеретаскиваемаяСтрока = ПараметрыПеретаскивания.Значение[0];
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Число") Тогда
		ПеретаскиваемаяСтрока = ТоварныеПозиции.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	КонецЕсли; 
	
	ВнутреннееПеретаскивание = ПеретаскиваемаяСтрока.Свойство("Номенклатура");
	
	Если ВнутреннееПеретаскивание Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
	Если СообщениеСодержитДанныеОбУпаковках Тогда
		СтандартнаяОбработка = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеПозицииПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
		УдалитьСтрокуТранспортнойУпаковки(Строка);
	КонецЦикла;
	
	ОбновитьДанныеРазмещения();
	
КонецПроцедуры

//обработчики таблицы "Транспортные упаковки"

&НаКлиенте
Процедура ТранспортныеУпаковкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТранспортныеУпаковкиСоставУпаковки" И Поле.Доступность Тогда
		УдаляемаяСтрока = ТранспортныеУпаковки.НайтиПоИдентификатору(Элементы.ТранспортныеУпаковки.ТекущаяСтрока);
		УдалитьСтрокуТранспортнойУпаковки(УдаляемаяСтрока);
		ОбновитьДанныеРазмещения();
	ИначеЕсли Поле.Имя = "ТранспортныеУпаковкиКоличество"
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТипУпаковки) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеУпаковкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеУпаковкиПередУдалением(Элемент, Отказ)
	
	//отказываемся от стандартного удаления из-за падения платформы в некоторых случаях
	Отказ = Истина;
	
	//вместо стандартного удаления рекурсивно удаляем с нижнего уровня наверх
	ВыделенныеСтроки = Элементы.ТранспортныеУпаковки.ВыделенныеСтроки;
	Количество = ВыделенныеСтроки.Количество();
	Для К = 1 По Количество Цикл
		УдалитьСтрокуТранспортнойУпаковки(ТранспортныеУпаковки.НайтиПоИдентификатору(ВыделенныеСтроки[К-1]));
	КонецЦикла;
	ОбновитьДанныеРазмещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеУпаковкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОбновитьДанныеРазмещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеУпаковкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = ТранспортныеУпаковки.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	НовоеКоличество = ТекущаяСтрока.Количество;
	
	//проверим не ввел ли пользователь 0
	Если НовоеКоличество = 0 И ТекущаяСтрока.SSCC = "" Тогда
		УдалитьСтрокуТранспортнойУпаковки(ТекущаяСтрока);
		ОбновитьДанныеРазмещения();
		Возврат;
	КонецЕсли;
	
	ОбщееКоличество 		= ПолучитьОбщееКоличествоТоварныхПозиций(ТекущаяСтрока);
	РазмещенноеКоличество   = ПолучитьРазмещенноеКоличество(ТекущаяСтрока) - НовоеКоличество;
	ДоступноеКоличество		= ОбщееКоличество - РазмещенноеКоличество;
	
	Если НовоеКоличество > ДоступноеКоличество Тогда
		ТекущаяСтрока.Количество = ДоступноеКоличество;
	Иначе
		ТекущаяСтрока.Количество = НовоеКоличество;
	КонецЕсли;
	
	ОбновитьДанныеРазмещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеУпаковкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	пСтрока = ?(ТипЗнч(Строка)=Тип("Число"),ТранспортныеУпаковки.НайтиПоИдентификатору(Строка),Строка);
	
	СтрокаПриемник = пСтрока;
	
	//еще не добавлена ни одна упаковка
	Если ТранспортныеУпаковки.ПолучитьЭлементы().Количество() = 0 Тогда
		СтрокаПриемник = ДобавитьНовуюУпаковку();
	КонецЕсли;
	
	//пользователь разместил товарную позицию в пустое место (не попал ни в одну строку)
	Если СтрокаПриемник = Неопределено Тогда
		СтрокаПриемник = НайтиРекурсивноНижнююСтроку(ТранспортныеУпаковки.ПолучитьЭлементы());		
	КонецЕсли;
	
	//не позволим добавить товар в товар
	Если Не ЗначениеЗаполнено(СтрокаПриемник.ТипУпаковки) Тогда
		СтрокаПриемник = СтрокаПриемник.ПолучитьРодителя();
	КонецЕсли;
	
	МассовоеДействие = (ПараметрыПеретаскивания.Значение.Количество() > 1);
	Для Каждого Значение Из ПараметрыПеретаскивания.Значение Цикл
		пЗначение = ?(ТипЗнч(Значение)=Тип("Число"),ТранспортныеУпаковки.НайтиПоИдентификатору(Значение),Значение);
		ПеремещениеМеждуУпаковками = пЗначение.Свойство("ТипУпаковки");
		Если ПеремещениеМеждуУпаковками Тогда
			ПереместитьТоварнуюПозицию(пЗначение, СтрокаПриемник, МассовоеДействие);	
		Иначе
		    РазместитьТоварнуюПозицию(пЗначение, СтрокаПриемник, МассовоеДействие);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанныеРазмещения();
	 	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеУпаковкиПослеУдаления(Элемент)
	
	ОбновитьДанныеРазмещения();	
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеУпаковкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	//заменяем переменную "Строка" на "пСтрока" = ?(ТипЗнч(Строка)=Тип("Число"),ТранспортныеУпаковки.НайтиПоИдентификатору(Строка),Строка)
	//поскольку при перетаскивании из Товарных позиций = это ДанныеФормыЭлементДерева, а в рамках Транспортных упаковок - идентификатор
	
	Перем пСтрока;
	
	СтандартнаяОбработка = Ложь;
	
	пСтрока = ?(ТипЗнч(Строка)=Тип("Число"),ТранспортныеУпаковки.НайтиПоИдентификатору(Строка),Строка);
	
	ПеретаскиваемаяСтрока = ПараметрыПеретаскивания.Значение[0];
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Число") Тогда
		ПеретаскиваемаяСтрока = ТранспортныеУпаковки.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	КонецЕсли;	
	
	ВнутреннееПеретаскивание = ПеретаскиваемаяСтрока.Свойство("ТипУпаковки");
	
	//запрещаем перетаскивание групп
	Если ВнутреннееПеретаскивание И ЗначениеЗаполнено(ПеретаскиваемаяСтрока.ТипУпаковки) Тогда                                                                                                         
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
	//запрещаем перетаскивание в свою же группу
	Если ВнутреннееПеретаскивание И Не пСтрока = Неопределено И ЗначениеЗаполнено(пСтрока.ТипУпаковки) Тогда
		Если ПеретаскиваемаяСтрока.ПолучитьРодителя() = пСтрока Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;                                                                                                                                
    КонецЕсли;
		
	//запрещаем перетаскивание в товар своей же группы
	Если ВнутреннееПеретаскивание И Не пСтрока = Неопределено И Не ЗначениеЗаполнено(пСтрока.ТипУпаковки) Тогда
		Если ПеретаскиваемаяСтрока.ПолучитьРодителя() = пСтрока.ПолучитьРодителя() Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
 
//команды страницы "Данные по упаковкам"                                                                                                                     

&НаКлиенте
Процедура ДобавитьУпаковку(Команда)
	
	ДобавитьНовуюУпаковку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложеннуюУпаковку(Команда)
	
	//пока не используется	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоВУпаковке(Команда)
	
	ТекСтрока = Элементы.ТранспортныеУпаковки.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекСтрока.ТипУпаковки) Тогда
		Возврат
	КонецЕсли;
	
	ВыделитьЯчейку(ТекСтрока, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьУпаковку(Команда)
	
	ТекСтрока = Элементы.ТранспортныеУпаковки.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено ИЛИ ТоварныеПозиции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ТекСтрока.ТипУпаковки) Тогда
		КопируемаяУпаковка = ТекСтрока.ПолучитьРодителя();
	Иначе
		КопируемаяУпаковка = ТекСтрока;
	КонецЕсли;
	
	КопируемыеСтроки = КопируемаяУпаковка.ПолучитьЭлементы();
	НоваяУпаковкаДобавлена = Ложь;
	
	// найти строки с таким товаром в ТоварныеПозиции
	Для каждого Стр Из КопируемыеСтроки Цикл
		
		НайденныеСтроки = ТоварныеПозиции.НайтиСтроки(Новый Структура("НомерСтроки", Стр.НомерСтроки));
		
		Если НЕ НайденныеСтроки.Количество() = 0 Тогда
			
			Если НЕ НоваяУпаковкаДобавлена Тогда
				НоваяУпаковка = ДобавитьНовуюУпаковку();
				НоваяУпаковкаДобавлена = Истина;
			КонецЕсли;
			
			Если НайденныеСтроки[0].Количество > Стр.Количество Тогда
				РазместитьТоварнуюПозицию(НайденныеСтроки[0], НоваяУпаковка, ,Стр.Количество);
			Иначе
				РазместитьТоварнуюПозицию(НайденныеСтроки[0], НоваяУпаковка, ,НайденныеСтроки[0].Количество);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НоваяУпаковкаДобавлена Тогда
		ОбновитьДанныеРазмещения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУпаковку(Команда)
	
	ВыделенныеСтроки = Элементы.ТранспортныеУпаковки.ВыделенныеСтроки;
	Количество = ВыделенныеСтроки.Количество();
	Для К = 1 По Количество Цикл
		УдаляемаяСтрока = ТранспортныеУпаковки.НайтиПоИдентификатору(ВыделенныеСтроки[К-1]);
		УдалитьСтрокуТранспортнойУпаковки(УдаляемаяСтрока);
	КонецЦикла;
	
	ОбновитьДанныеРазмещения();
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьПалетныйЛист(Команда)
	
	Справка = "Палетные листы можно напечатать после сохранения или отправки уведомления об отгрузке. 
			  |
			  |Для групповой печати необходимо:
			  |		1. Закрыть карточку сообщения - перейти в основной список модуля.
			  |		2. Выделить строки с сообщениями, по которым необходимо распечатать палетные листы.
			  |		3. В верхней панели кнопок модуля нажать ""Еще"" -> ""Распечатать палетные листы"".
			  |
			  |Для печати палетных листов из карточки сообщения необходимо установить расширение 
			  |""Печать палетных листов из карточки DESADV"".
			  |Подробнее: Торговая сеть -> Настройки -> Данные об упаковках (SSCC).";
			  
 	Если Параметры.МодальностьЗапрещена = Истина Тогда
		Выполнить("ПоказатьПредупреждение(,Справка)");
	Иначе
		Предупреждение(Справка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПеренестиВправо(Команда)
	
	ВыделенныеСтроки = Элементы.ТоварныеПозиции.ВыделенныеСтроки;
	Количество  = ВыделенныеСтроки.Количество();
	Для К = 1 По Количество Цикл
		ТоварныеПозицииВыбор(Элементы.ТоварныеПозиции, ВыделенныеСтроки[К-1], Элементы.ТоварныеПозиции.ПодчиненныеЭлементы.ТоварныеПозицииНомерСтроки, Истина);	
	КонецЦикла;
	
	//не предлагаем редактировать количество
	Если Не Количество = 1 Тогда
		Элементы.ТранспортныеУпаковки.ТекущаяСтрока = Элементы.ТранспортныеУпаковки.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПеренестиВсеВправо(Команда)
	
	Количество = ТоварныеПозиции.Количество();
	
	Пока Не ТоварныеПозиции.Количество() = 0 Цикл
		ТоварныеПозицииВыбор(Элементы.ТоварныеПозиции, ТоварныеПозиции[0].ПолучитьИдентификатор(), Элементы.ТоварныеПозиции.ПодчиненныеЭлементы.ТоварныеПозицииНомерСтроки, Истина);	
	КонецЦикла;
	
	//не предлагаем редактировать количество
	Если Не Количество = 1 Тогда
		Элементы.ТранспортныеУпаковки.ТекущаяСтрока = Элементы.ТранспортныеУпаковки.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПеренестиВлево(Команда)
	
	ВыделенныеСтроки = Элементы.ТранспортныеУпаковки.ВыделенныеСтроки;
	Количество = ВыделенныеСтроки.Количество();
	Для К = 1 По Количество Цикл
		УдаляемаяСтрока = ТранспортныеУпаковки.НайтиПоИдентификатору(ВыделенныеСтроки[К-1]);
		УдалитьСтрокуТранспортнойУпаковки(УдаляемаяСтрока);
	КонецЦикла;
	
	ОбновитьДанныеРазмещения();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПеренестиВсеВлево(Команда)
	
	Количество = ТранспортныеУпаковки.ПолучитьЭлементы().Количество();
	Для К = 1 По Количество Цикл
		УдалитьСтрокуТранспортнойУпаковки(ТранспортныеУпаковки.ПолучитьЭлементы()[0]);	
	КонецЦикла;	
	ОбновитьДанныеРазмещения();	
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаРазделитьПоПалетам(Команда)
	
	ТекДанные = Элементы.ТоварныеПозиции.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = ТекДанные.НомерСтроки;
	КоличествоРаспределить = ТекДанные.Количество;
	КоличествоНаПалете = 0;
	
	ТекстПодсказка = "Сколько на палете?";
	ДопПараметрДляПередачиВОбработчик = Новый Структура("НомерСтроки,КоличествоРаспределить", НомерСтроки, КоличествоРаспределить);
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьВводЧисла(Новый ОписаниеОповещения(""ОбработчикВводаКоличествоНаПалете"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), КоличествоНаПалете, ТекстПодсказка, 10, 2)"); 
	Иначе
		Если ВвестиЧисло(КоличествоНаПалете, ТекстПодсказка, 10, 2) Тогда
			ОбработчикВводаКоличествоНаПалете(КоличествоНаПалете, ДопПараметрДляПередачиВОбработчик);	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВводаКоличествоНаПалете(КоличествоНаПалете, ДопПараметрОбработчика = Неопределено) Экспорт
	
	Если КоличествоНаПалете = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = ДопПараметрОбработчика.НомерСтроки;
	КоличествоРаспределить = ДопПараметрОбработчика.КоличествоРаспределить;	
	
	Пока КоличествоРаспределить > 0 Цикл
		
		НайденныеСтроки = ТоварныеПозиции.НайтиСтроки(Новый Структура("НомерСтроки", НомерСтроки));
		
		Если НЕ НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяУпаковка 	= ДобавитьНовуюУпаковку();
			
			Если КоличествоРаспределить > КоличествоНаПалете Тогда
				РазместитьТоварнуюПозицию(НайденныеСтроки[0], НоваяУпаковка, ,КоличествоНаПалете);
			Иначе
				РазместитьТоварнуюПозицию(НайденныеСтроки[0], НоваяУпаковка, ,КоличествоРаспределить);
			КонецЕсли;
			
			КоличествоРаспределить = КоличествоРаспределить - КоличествоНаПалете;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанныеРазмещения();
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьНовуюУпаковку(Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		НоваяСтрока = ТранспортныеУпаковки.ПолучитьЭлементы().Добавить()
	Иначе
		НоваяСтрока = Родитель.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	НоваяСтрока.ТипУпаковки		= "201";
	
	ПронумероватьУпаковкиСквознымПорядковымНомером();
	//ПромаркироватьУпаковкиSSCCКодом();
	ПроименоватьУпаковки();
	
	ВыделитьСтроку(НоваяСтрока);
	
	Возврат НоваяСтрока;
		
КонецФункции

&НаКлиенте
Процедура РазместитьТоварнуюПозицию(Позиция, Упаковка, МассовоеДействие = Истина, РазмещаемоеКоличество = 0)
	
	НоваяСтрока = Неопределено;
	Для Каждого Строка Из Упаковка.ПолучитьЭлементы() Цикл
		Если Строка.НомерСтроки = Позиция.НомерСтроки Тогда
			НоваяСтрока = Строка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РазмещаемоеКоличество = ?(РазмещаемоеКоличество = 0, Позиция.Количество, РазмещаемоеКоличество);
		
	Если НоваяСтрока = Неопределено Тогда
		НоваяСтрока = Упаковка.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Позиция);
		НоваяСтрока.СоставУпаковки = ПолучитьРазвернутоеНаименованиеТовара(Позиция);
		НоваяСтрока.Количество = РазмещаемоеКоличество;
	Иначе
		НоваяСтрока.Количество = НоваяСтрока.Количество + РазмещаемоеКоличество; 
	КонецЕсли;
	
	Если МассовоеДействие Тогда
		ВыделитьСтроку(НоваяСтрока);
	Иначе
		ВыделитьЯчейку(НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьТоварнуюПозицию(Позиция, Упаковка, МассовоеДействие = Истина)
	
	Для Каждого Товар Из Упаковка.ПолучитьЭлементы() Цикл
		Если Товар.НомерСтроки = Позиция.НомерСтроки Тогда
			НоваяСтрока = Товар;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НоваяСтрока = Неопределено Тогда
		НоваяСтрока = Упаковка.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Позиция);
	Иначе
		НоваяСтрока.Количество = НоваяСтрока.Количество + Позиция.Количество;
	КонецЕсли;
	
	Если Позиция.ПолучитьРодителя() = Неопределено Тогда
		ТранспортныеУпаковки.ПолучитьЭлементы().Удалить(Позиция);
	Иначе
		Позиция.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Позиция);
	КонецЕсли;
		
	ВыделитьСтроку(НоваяСтрока);
			
КонецПроцедуры

&НаКлиенте
Функция ДобавитьНераспределеннуюТоварнуюПозицию(Строка)
	
	НоваяСтрока = ТоварныеПозиции.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Функция УдалитьСтрокуТранспортнойУпаковки(УдаляемаяСтрока = Неопределено, ЗапроситьПодтверждение = Ложь)
	
	МожноУдалятьСтроку = Истина;
	
	Если УдаляемаяСтрока = Неопределено Тогда
		СП = Новый СообщениеПользователю;
		СП.Текст = "Не выбрана удаляемая строка.";
		СП.Поле = "ТранспортныеУпаковки";
		СП.Сообщить();
		МожноУдалятьСтроку = Ложь;
		Возврат МожноУдалятьСтроку;
	КонецЕсли;
	
	//проверим, существует ли строка, не удалена ли она уже
	ЭтоУпаковка 	 = Истина;
	СтрокаСуществует = Ложь;
	Попытка
		ЭтоУпаковка = ЗначениеЗаполнено(УдаляемаяСтрока.ТипУпаковки);
		СтрокаСуществует = Истина;
	Исключение
	КонецПопытки;
	Если Не СтрокаСуществует Тогда
		Возврат Истина;		
	КонецЕсли;
	
	Если ЗапроситьПодтверждение Тогда
		Ответ = Вопрос("Удалить выбранную " + ?(ЭтоУпаковка, "упаковку", "товарную позицию") + "?",РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Контур.EDI");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			МожноУдалятьСтроку = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если МожноУдалятьСтроку Тогда
		УдалитьСтрокуРекурсивно(УдаляемаяСтрока);
	КонецЕсли;
		
	Возврат МожноУдалятьСтроку;
			
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокуРекурсивно(ТекущаяСтрока)
	
	//проваливаемся вложенные строки
	Количество  = ТекущаяСтрока.ПолучитьЭлементы().Количество() - 1;
	Для К = 0 По Количество Цикл
		Строка = ТекущаяСтрока.ПолучитьЭлементы()[0];
		Если Не Строка.ПолучитьЭлементы().Количество() = 0 Тогда
			УдалитьСтрокуРекурсивно(Строка);
		Иначе
			//удаляем текущую строку
			Если Не Строка.ПолучитьРодителя() = Неопределено Тогда
				ВеткаСтроки = Строка.ПолучитьРодителя().ПолучитьЭлементы();
			Иначе
				ВеткаСтроки = ТранспортныеУпаковки.ПолучитьЭлементы();
			КонецЕсли;
			ВеткаСтроки.Удалить(Строка);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	//удаляем родительскую строку
	Если Не ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
		ВеткаСтроки = ТекущаяСтрока.ПолучитьРодителя().ПолучитьЭлементы();
	Иначе
		ВеткаСтроки = ТранспортныеУпаковки.ПолучитьЭлементы();
	КонецЕсли;
	ВеткаСтроки.Удалить(ТекущаяСтрока);
	
КонецПроцедуры

//Удаление сообщения
&НаКлиенте
Процедура УдалитьСообщение(Команда)
	
	Если НЕ ЭтоПоследнееСообщениеВЦепочкеВызовСервера() Тогда
		ТекстПредупреждения="Можно удалять только последнее сообщение в цепочке!";
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(Новый ОписаниеОповещения(""ОбработчикНеПоследнееСообщениеОзнакомление"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик),ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
			ОбработчикНеПоследнееСообщениеОзнакомление(ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
	Иначе
		ВерныйПароль = Ложь;
		ТекПароль = "";
		ТекстПросьбы = "Введите пароль от учетной записи";
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьВводСтроки(Новый ОписаниеОповещения(""ОбработчикВводаПароля"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекПароль, ТекстПросьбы, , ложь)"); 
		Иначе
			Если ВвестиСтроку(ТекПароль,ТекстПросьбы) Тогда
				ОбработчикВводаПароля(ТекПароль);	
			иначе
				//nop
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНеПоследнееСообщениеОзнакомление(ДопПараметр=Неопределено)Экспорт

//nop	

КонецПроцедуры // ОбработчикПоследнееСообщениеОзнакомление()

&НаКлиенте
Процедура ОбработчикВводаПароля(ТекПароль,ДопПараметрОбработчика=Неопределено) Экспорт
	
	ТекущийПарольПользователя=ПолучитьПарольВызовСервера();
	
	    ВерныйПароль=Ложь;
	 	Если СокрЛП(ТекПароль) = СокрЛП(ТекущийПарольПользователя) или СокрЛП(ТекПароль)="******" Тогда
			ВерныйПароль = Истина;
		КонецЕсли;
		Если НЕ ВерныйПароль и ТекПароль=Неопределено Тогда
			Возврат;  //отказ от ввода
		ИначеЕсли НЕ ВерныйПароль Тогда
			Сообщить("Неверный пароль");
			Возврат;
		КонецЕсли;
		
		ТекстВопроса ="Текущее сообщение будет навсегда удалено из 1С. Продолжить?";
		КнопкиВопроса=новый СписокЗначений;
		КнопкиВопроса.Добавить("Да, удалить сообщение");
		КнопкиВопроса.Добавить("Нет, не удалять");
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		РезультатВопроса = Неопределено;
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияУдаленияСообщения"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
		Иначе
			РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
			ОбработчикСогласияУдаленияСообщения(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
	

КонецПроцедуры // ОбработчикВводаПароля()

&НаКлиенте
Процедура ОбработчикСогласияУдаленияСообщения(РезультатВопроса,ДопПараметр=Неопределено) Экспорт

	Если РезультатВопроса = "Да, удалить сообщение" Тогда 
		УдалитьСообщениеВызовСервера();
		ЗакрытиеРазрешено=Истина;
		ЭтаФорма.Закрыть(неопределено);
	КонецЕсли;

КонецПроцедуры // ОбработчикСогласияУдаленияСообщения()

&НаСервере
Функция ПолучитьПарольВызовСервера()

Возврат МодульОбъекта().ПараметрыПользователяEDI.Пароль;	

КонецФункции // ПолучитьПарольВызовСервера()

&НаСервере
Процедура УдалитьСообщениеВызовСервера()
	
	Если НЕ ЗначениеЗаполнено(Сообщение.ДокументСсылка) Тогда
		Сообщение.ДокументСсылка = Сообщение.Документ1С;
	КонецЕсли;
	
	МодульОбъекта().УдалитьСообщение(Сообщение);

КонецПроцедуры // УдалитьСообщениеВызовСервера()

&НаСервере
Функция ЭтоПоследнееСообщениеВЦепочкеВызовСервера()

	Возврат МодульОбъекта().ЭтоПоследнееСообщениеВЦепочке(Сообщение.СообщениеСсылка, Сообщение.ДокументСсылка) = Истина;	

КонецФункции // ЭтоПоследнееСообщениеВЦепечкеВызовСервера()

//конец Удаление сообщения

&НаКлиенте
Процедура Накладная1СПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Накладная1С) Тогда
		
		РезультатПроверкиНакладной = ПриПопыткеИзмененияНакладнойВСообщенииВызовСервера();
		
		Если НЕ РезультатПроверкиНакладной.Успешно Тогда
			
			ТекстПредупреждения=РезультатПроверкиНакладной.ТекстОшибки;
			ДопПараметрДляПередачиВОбработчик=Неопределено;
			Если Параметры.МодальностьЗапрещена Тогда 
				Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
			Иначе
				Предупреждение(ТекстПредупреждения,,"Контур.EDI");
			КонецЕсли;
			
			Накладная1С = Неопределено;
			Сообщение.Накладная1С = Неопределено;

			УстановитьТипПоля1С("Накладная");
			Возврат;	
		КонецЕсли;
		
	КонецЕсли;
	
	Сообщение.Накладная1С = Накладная1С;
	
	//сбросить цвет
	Элемент.ЦветФона = новый Цвет();
	ПроверитьЗаполнениеПолей();
	
КонецПроцедуры

&НаСервере
Функция ПриПопыткеИзмененияНакладнойВСообщенииВызовСервера()

Результат=МодульОбъекта().ПриПопыткеИзмененияНакладнойВСообщении(Сообщение,Накладная1С);

Возврат Результат;

КонецФункции // ПриПопыткеИзмененияНакладнойВСообщенииВызовСервера()

&НаКлиенте
Процедура Накладная1СНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	СтруктураОтбора = Новый Структура("Организация,Контрагент", Сообщение.Продавец1С, Сообщение.Покупатель1С);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	
	ТипДокумента=ОпределитьИмяТипаДокумента(Документ1С);	

	ОткрытьФорму(ТипДокумента+".ФормаВыбора", СтруктураПараметров, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура Заказ1СПриИзменении(Элемент)
	ПроверитьЗаполнениеПолей();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУведомлениеОПриемке(Команда)
	РезультатНажатия = КнопкаДействияФормыНажатие(Команда.Имя);
	Если РезультатНажатия.ЗакрытьФорму Тогда
		ЭтаФорма.Закрыть(неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьСообщение(Команда)
	//Перевод на УФ
	//Понять тип
	
	ТипДокумента=ОпределитьИмяТипаДокумента(Документ1С);	
		//открыть отбор
	СтандартнаяОбработка=Ложь;
	
	Если ТипСообщения = "RETDES" Тогда
		ОрганизацияВСообщении = Сообщение.Покупатель1С;
		КонтрагентВСообщении = Сообщение.Продавец1С;
	Иначе
		ОрганизацияВСообщении = Сообщение.Продавец1С;
		КонтрагентВСообщении = Сообщение.Покупатель1С;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Организация,Контрагент", ОрганизацияВСообщении, КонтрагентВСообщении);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ТипДокумента+"".ФормаВыбора"", СтруктураПараметров,""Документ1СПриИзменении"")");//,ДополнительныеПараметры);
	Иначе
		ВыбранноеЗначение = ПолучитьФорму(ТипДокумента+".ФормаВыбора",СтруктураПараметров,ЭтаФорма).ОткрытьМодально();
		Документ1СПриИзменении(ВыбранноеЗначение)
	КонецЕсли;
	
	//ОткрытьФорму(ТипДокумента+".ФормаВыбора", СтруктураПараметров, Элементы.Документ1С);
КонецПроцедуры

&НаКлиенте
Процедура Документ1СПриИзменении(ВыбранноеЗначение, ДопПараметр = Неопределено) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Пробуем Связать
	РезультатПривязки = СвязатьСообщениеСДокументомВызовСервера(ВыбранноеЗначение); 
	
	Если РезультатПривязки.Успешно = Ложь Тогда
		ТекстПредупреждения = РезультатПривязки.ОписаниеОшибки;
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
	Иначе
		//ну ок
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СвязатьСообщениеСДокументомВызовСервера(ВыбранноеЗначение)
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Успешно",Ложь);
	СтруктураРезультата.Вставить("ОписаниеОшибки","");
	
	Если НЕ МодульОбъекта().НайтиСообщениеДокумента(ВыбранноеЗначение,Сообщение.ТипСообщения) = Неопределено Тогда
		
		СтруктураРезультата.ОписаниеОшибки = "К данному документу уже привязано другое сообщение " + Сообщение.ТипСообщения;
		СтруктураРезультата.Успешно = Ложь;
		
	Иначе
		
		РезультатПроверки = МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля(
								"ПередСвязываниемСообщенияСДокументомЧерезФорму",,
								Новый Структура("Документ, Сообщение, Форма", ВыбранноеЗначение, Сообщение, ЭтаФорма));
								
		Если РезультатПроверки <> Неопределено
			И НЕ РезультатПроверки.Успешно Тогда
			СтруктураРезультата.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
			Возврат СтруктураРезультата;
		КонецЕсли;
								
		Документ1С = ВыбранноеЗначение;
		ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
		
		МодульОбъекта().СвязатьСообщениеСДокументом(Сообщение,Документ1С);
		ТолькоПросмотрСообщения = Истина;
		Сообщение.ДокументСсылка	= Документ1С;
		Сообщение.Документ1С		= Документ1С;
		
		ПроизвестиПервоначальноеЗаполнениеПолейНаФорме();

		ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();
		УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
		
		СтруктураРезультата.Успешно=Истина;
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьИмяТипаДокумента(Ссылка)

Возврат "Документ."+Ссылка.Метаданные().Имя;	

КонецФункции // ОпределитьИмяТипаОбъекта(ТекСтрока.Документ)()

&НаКлиенте
Процедура ПереотправитьСообщение(Команда)
	
	ПараметрыФормы = Новый Структура("СообщениеСсылка",		Сообщение.СообщениеСсылка); 
	ПараметрыФормы.Вставить("Документ1С",					Сообщение.Документ1С);
	ПараметрыФормы.Вставить("ТипСообщения",					Сообщение.ТипСообщения);
	ПараметрыФормы.Вставить("Направление",					Сообщение.Направление);
	ПараметрыФормы.Вставить("ТолькоПросмотр",				ложь);
	ПараметрыФормы.Вставить("КодДействия",					"Отправить_");
	ПараметрыФормы.Вставить("РежимРаботы",					Параметры.РежимРаботы);
	ПараметрыФормы.Вставить("АдресХранилища",				Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("ПараметрыАвтотестирования",	Параметры.ПараметрыАвтотестирования);
	ПараметрыФормы.Вставить("ПереотправляемоеСообщениеСсылка",Сообщение.СообщениеСсылка);
	
	Если НЕ Параметры.ПроизвольныеПараметры = Неопределено Тогда 
		ПараметрыФормы.Вставить("ПроизвольныеПараметры",	Параметры.ПроизвольныеПараметры);
	КонецЕсли;
	
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""ФормаСообщенияУправляемая"", ПараметрыФормы,""ОбработчикПослеЗакрытияКарточкиПереотправкиСообщения"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("ФормаСообщенияУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослеЗакрытияКарточкиПереотправкиСообщения();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослеЗакрытияКарточкиПереотправкиСообщения(Параметр = Неопределено, ДопПараметр = Неопределено)Экспорт

	ЭтаФорма.Закрыть(неопределено);

КонецПроцедуры // ОбработчикПослеЗакрытияКарточкиПереотправкиСообщения()

&НаКлиенте
Процедура ПрекратитьОбработкуВходящегоСообщения(Команда)
	
	ТекстВопроса = "Обработка сообщения будет прекращена. Продолжить?";
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Да, прекратить обработку");
	КнопкиВопроса.Добавить("Отмена");
	ДопПараметрДляПередачиВОбработчик = Неопределено;
	РезультатВопроса = Неопределено;
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияОстановкиОбработки"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
	Иначе
		РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
		ОбработчикСогласияОстановкиОбработки(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСогласияОстановкиОбработки(РезультатВопроса,ДопПараметрПереданныйВОбработчик = Неопределено) Экспорт
	
    Если РезультатВопроса = "Да, прекратить обработку" Тогда 
		ПрекратитьОбработкуВходящегоСообщенияВызовСервера();
		ЗакрытиеРазрешено = Истина;
    	ЭтаФорма.Закрыть(неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрекратитьОбработкуВходящегоСообщенияВызовСервера()

	МодульОбъекта().ПрекратитьОбработкуВходящегоСообщения(Сообщение.СообщениеСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьОбработкуНулевойСФ(Команда)
	
	ТекстВопроса ="Обработка счет-фактуры будет прекращена. Продолжить?";
	КнопкиВопроса=новый СписокЗначений;
	КнопкиВопроса.Добавить("Да, прекратить обработку");
	КнопкиВопроса.Добавить("Отмена");
	ДопПараметрДляПередачиВОбработчик=Неопределено;
	РезультатВопроса = Неопределено;
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияОстановкиОбработкиНулевойСФ"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
	Иначе
		РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
		ОбработчикСогласияОстановкиОбработкиНулевойСФ(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСогласияОстановкиОбработкиНулевойСФ(РезультатВопроса,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	
	Если РезультатВопроса = "Да, прекратить обработку" Тогда 
		ПрекратитьОбработкуНулевойСФВызовСервера();
		ЗакрытиеРазрешено = Истина;
    	ЭтаФорма.Закрыть(неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрекратитьОбработкуНулевойСФВызовСервера()

	МодульОбъекта().ПрекратитьОбработкуНулевойСФ(Сообщение);
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
КонецПроцедуры // ПрекратитьОбработкуСообщенияВызовСервера()

&НаКлиенте
Процедура ЗакрытьФормуБезПримененияДействия(Команда)
	ЗакрытиеРазрешено=Истина;
	ЭтаФорма.Закрыть(Параметры.СообщениеСсылка);//возвращаем ту же самую ссылку что и пришла на входе - обработчик не будет вычеркивать строку
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ЗакрытиеРазрешено=Неопределено Тогда
		СтандартнаяОбработка=Ложь;
		Отказ=Истина;
		ЗакрытиеРазрешено=Истина;
		ЭтаФорма.Закрыть(Параметры.СообщениеСсылка);//возвращаем ту же самую ссылку что и пришла на входе - обработчик не будет вычеркивать строку
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСчетФактуру(Команда)
	РезультатНажатия = КнопкаДействияФормыНажатие(Команда.Имя);
	Если РезультатНажатия.ЗакрытьФорму Тогда
		ЭтаФорма.Закрыть(неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТранспортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=истина;
КонецПроцедуры

&НаКлиенте
Процедура ТранспортировкаПередУдалением(Элемент, Отказ)
	Отказ=истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВрата(Команда)
	
	ВыбраннаяДата=Сообщение.ДатаПоставки;
	ПоказатьВводВрат(ВыбраннаяДата);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВрата(Команда)
	//ТекущиеВрата= определить!!!
	
	
	ТекущиеВрата= Сообщение.ДатаПоставки;
	
	ДопПараметры = новый Структура;
	ДопПараметры.Вставить("СтрокаСпискаВрат",Элементы.Транспортировка.ТекущаяСтрока);

	ПоказатьВводВрат(ТекущиеВрата,ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводВрат(ИсходнаяДата,ДопПараметры=неопределено)
	
	ВыбраннаяДата=ИсходнаяДата;
	Подсказка = "Укажите новые врата времени";
	ЧастьДаты = ЧастиДаты.ДатаВремя;
	//ДопПараметры = новый Структура;
	//ДопПараметры.Вставить("СтрокаСпискаВрат",неопределено);
	Если Параметры.МодальностьЗапрещена Тогда
		Оповещение = Неопределено;
		Выполнить("Оповещение = Новый ОписаниеОповещения(""ОбработчикПослеВводаВрат"",ЭтаФорма, ДопПараметры)");
		Выполнить("ПоказатьВводДаты(Оповещение, ВыбраннаяДата, Подсказка, ЧастьДаты)");
	Иначе
		Если ВвестиДату(ВыбраннаяДата,Подсказка,ЧастьДаты) Тогда 			
			ОбработчикПослеВводаВрат(ВыбраннаяДата, ДопПараметры);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьВводВрат()

&НаКлиенте
Процедура ОбработчикПослеВводаВрат(ВыбраннаяДата, ДопПараметры=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		Если ДопПараметры=Неопределено или ДопПараметры.СтрокаСпискаВрат=Неопределено Тогда 
			Транспортировка.Добавить(ВызовСервера_Дата1С_в_ДатаВремяXML(ВыбраннаяДата),ВыбраннаяДата,истина);
		Иначе
			Транспортировка[ДопПараметры.СтрокаСпискаВрат].Пометка=Истина;
			Транспортировка[ДопПараметры.СтрокаСпискаВрат].Значение=ВызовСервера_Дата1С_в_ДатаВремяXML(ВыбраннаяДата);
			Транспортировка[ДопПараметры.СтрокаСпискаВрат].Представление=ВыбраннаяДата;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВысотуСпискаВрат()

КонецПроцедуры // ОбработчикПослеВводаВрат()

&НаСервере
Функция ВызовСервера_Дата1С_в_ДатаВремяXML(Дата)

Возврат МодульОбъекта().Дата1С_в_ДатаВремяXML(Дата);	

КонецФункции // ВызовСервера_Дата1С_в_ДатаВремяXML()

&НаКлиенте
Процедура УдалитьВрата(Команда)
	
	ВыделенныеСтроки=Элементы.Транспортировка.ВыделенныеСтроки;
	
	Количество = ВыделенныеСтроки.Количество();
	
	Если Количество=0 Тогда 
		Сообщить("Не выделены строки врат времени для удаления");	
	КонецЕсли;
	
	Для К = 1 По Количество Цикл
		УдаляемаяСтрока = Транспортировка.НайтиПоИдентификатору(ВыделенныеСтроки[К-1]);
		Транспортировка.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	УстановитьВысотуСпискаВрат();
	
	Если Транспортировка.Количество() = 0 Тогда 
		ТекстПредупреждения="Внимание, для этого заказа необходимо указать хотя бы 1 врата времени."+Символы.ПС+"В противном случае торговая сеть не получит сведения о времени прибытия машины.";
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВысотуСпискаВрат()

	//Пересчитать высоту
	Элементы.Транспортировка.Высота=Транспортировка.Количество()+1;
	Если  Элементы.Транспортировка.Высота<=1 Тогда 
		Элементы.Транспортировка.Высота = 2;
	КонецЕсли;

КонецПроцедуры // УстановитьВысотуСпискаВрат()

&НаКлиенте
Процедура ОтправитьКорректировочныйСчетФактуру(Команда)
	Результат =	КнопкаДействияФормыНажатие(Команда.Имя);
	Если Результат<>Неопределено и Результат.Свойство("ЗакрытьФорму") и Результат.ЗакрытьФорму=истина  и ЭтаФорма.Открыта() тогда
		ЗакрытиеРазрешено=Истина;
		ЭтаФорма.Закрыть(неопределено); //отправим вместо ссылки на новое сообщение чтобы гарантированно вычеркнуть строку, ведь нам удалось отправить сообщение
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьОбработкуИсходящегоСообщения(Команда)

	ТекстВопроса = "Сообщение будет помечено как успешно доставленное. Продолжить?";
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Да, пометить сообщение как доставленное");
	КнопкиВопроса.Добавить("Отмена");
	ДопПараметрДляПередачиВОбработчик = Неопределено;
	РезультатВопроса = Неопределено;
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияПометитьСообщениеКакДоставленное"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
	Иначе
		РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
		ОбработчикСогласияПометитьСообщениеКакДоставленное(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСогласияПометитьСообщениеКакДоставленное(РезультатВопроса,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	
    Если РезультатВопроса = "Да, пометить сообщение как доставленное" Тогда 
		ПометитьСообщениеКакДоставленноеВызовСервера();
		ЗакрытиеРазрешено = Истина;
    	ЭтаФорма.Закрыть(неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПометитьСообщениеКакДоставленноеВызовСервера()
	
	Если(Сообщение.Свойство("ПереотправляемоеСообщениеСсылка") 
		ИЛИ Сообщение.Свойство("СообщениеСсылка")) Тогда 
			Если Сообщение.Свойство("СообщениеСсылка") И ЗначениеЗаполнено(Сообщение.СообщениеСсылка) Тогда
				ТекСсылкаНаСообщение=Сообщение.СообщениеСсылка;
			ИначеЕсли Сообщение.Свойство("ПереотправляемоеСообщениеСсылка") И ЗначениеЗаполнено(Сообщение.ПереотправляемоеСообщениеСсылка) Тогда 
				ТекСсылкаНаСообщение=Сообщение.ПереотправляемоеСообщениеСсылка;
			КонецЕсли;
		
		МодульОбъекта().УстановитьСтатусСообщения(ТекСсылкаНаСообщение, , , "ИсходящийДоставлен"); // условие на наличие этого свойства есть в процедуре СоздатьКнопки()
	Иначе
		Сообщить("Не удалось прекратить обработку сообщения, возможно запись была изменена или удалена");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныеПозицииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Действие 			= ДействиеПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.ДопустимыеДействия 	= ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеУпаковкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Действие 			= ДействиеПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.ДопустимыеДействия 	= ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
	
КонецПроцедуры

//точки самовывоза ТС Магнит
&НаКлиенте
Процедура ОбработчикОтказОтСамовывоза(РезультатВопроса,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт

	ОтказОтСамовывозаСервер(РезультатВопроса);
	
КонецПроцедуры

&НаСервере
Процедура ОтказОтСамовывозаСервер(РезультатВопроса)
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища(); //потребуется для ПроверитьПоляСообщения
	
	Если РезультатВопроса="Самостоятельно" Тогда 
		Сообщение.ОтветственныйЗаДоставку = "TransportBySupplier";
	ИначеЕсли РезультатВопроса="Силами стороннего перевозчика" Тогда 
		Сообщение.ОтветственныйЗаДоставку = "TransportByLogisticProvider";
	Иначе
		Сообщение.ОтветственныйЗаДоставку = "TransportByCustomer";
	КонецЕсли;
	
	РезультатПроверки = МодульОбъекта().ПроверитьПоляСообщения(Сообщение);
	Сообщение.СодержитОшибки =  НЕ РезультатПроверки.Успешно;
	
	ПроверитьЗаполнениеПолей();
	
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
КонецПроцедуры // ОтказОтСамовывозаСервер()

&НаКлиенте
Процедура ВыбратьТочкуСамовывоза()
	
	Если ЗначениеЗаполнено(Параметры.СообщениеСсылка) Тогда 
		АдресТаблицыТочекСамовывоза=ПоместитьТочкиСамовывозаВВХ();
		Если АдресТаблицыТочекСамовывоза=Неопределено Тогда 
			Сообщить("Не указаны точки самовывоза"); 
		иначе
			ПараметрыФормы=	Новый Структура;
			ПараметрыФормы.Вставить("АдресТаблицыВХранилище",АдресТаблицыТочекСамовывоза);
			Если Параметры.МодальностьЗапрещена Тогда 
				Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""УниверсальнаяФормаВыбораУправляемая"", ПараметрыФормы,""ОбработчикПослеВыбораТочкиСамовывоза"",ПараметрыФормы)");//,ДополнительныеПараметры);
			Иначе
				АдресВхСРезультатом = ПолучитьФормуОбработки("УниверсальнаяФормаВыбораУправляемая",ПараметрыФормы).ОткрытьМодально();
				ОбработчикПослеВыбораТочкиСамовывоза(АдресВхСРезультатом, ПараметрыФормы)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослеВыбораТочкиСамовывоза(Параметр=Неопределено,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	Если Параметр=Неопределено Тогда
		//так и не выбрали
	Иначе
		ОбработчикПослеВыбораТочкиСамовывозаСервер(Параметр);	
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработчикПослеВыбораТочкиСамовывозаСервер(АдресВХ)

	//поместить выбранное в сообщение
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();
	
	ТаблицаВыбранныхТочекСамовывоза=ПолучитьИзВременногоХранилища(АдресВХ);
	НоваяТЗТочкиСамовывоза=ТаблицаВыбранныхТочекСамовывоза;	
	ВсегоТочекСамовывоза=НоваяТЗТочкиСамовывоза.Количество();
	
	Для й=1 По ВсегоТочекСамовывоза Цикл
		Если НоваяТЗТочкиСамовывоза[ВсегоТочекСамовывоза-й].Выбор=Ложь Тогда
			НоваяТЗТочкиСамовывоза.Удалить(ВсегоТочекСамовывоза-й);
		КонецЕсли;
	КонецЦикла;
	
	Сообщение.ОтветственныйЗаДоставку = "TransportByCustomer";
	Сообщение.ТочкиСамовывоза=НоваяТЗТочкиСамовывоза;
	ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();
	
	//перепроверить сообщение
	РезультатПроверки = МодульОбъекта().ПроверитьПоляСообщения(Сообщение);
	Сообщение.СодержитОшибки =  НЕ РезультатПроверки.Успешно;
	
	ПроверитьЗаполнениеПолей();
	
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
КонецПроцедуры // ОбработчикПослеВыбораТочкиСамовывозаСервер()

&НаКлиенте
Процедура ОтказОтСамовывоза()
	
	Если ЗначениеЗаполнено(Параметры.СообщениеСсылка) Тогда 
		ТекстВопроса ="Доставка будет осуществляться:";
		КнопкиВопроса=новый СписокЗначений;
		КнопкиВопроса.Добавить("Самостоятельно");
		КнопкиВопроса.Добавить("Силами стороннего перевозчика");
		КнопкиВопроса.Добавить("ОТМЕНА операции");
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		РезультатВопроса = Неопределено;
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикОтказОтСамовывоза"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
		Иначе
			РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
			ОбработчикОтказОтСамовывоза(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТочкиСамовывозаВВХ()

	СообщениеССамовывозом = МодульОбъекта().ПрочитатьСообщение(Параметры.СообщениеСсылка,,Параметры.ТипСообщения,Параметры.СообщениеСсылка.Направление);
	
	Если СообщениеССамовывозом.Свойство("ТочкиСамовывоза") И ЗначениеЗаполнено(СообщениеССамовывозом.ТочкиСамовывоза) И СообщениеССамовывозом.ТочкиСамовывоза.Количество()>0 Тогда 
		АдресвВХ=ПоместитьВоВременноеХранилище(СообщениеССамовывозом.ТочкиСамовывоза);
		Возврат АдресвВХ;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВвестиКоличествоПаллет()
	Если Сообщение.ПаллетоМеста.КоличествоПаллет=неопределено Тогда Сообщение.ПаллетоМеста.КоличествоПаллет=0; КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.СообщениеСсылка) Тогда 
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВводЗначения(Новый ОписаниеОповещения(""ОбработчикПерепроверитьСообщение"",ЭтаФорма), Сообщение.ПаллетоМеста.КоличествоПаллет)");//в активный элемент//, Элемент) 
		иначе
			Если ВвестиЗначение(Сообщение.ПаллетоМеста.КоличествоПаллет,"Укажите количество паллет") Тогда
				ОбработчикПерепроверитьСообщение(Сообщение.ПаллетоМеста.КоличествоПаллет);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВвестиКоличествоПаллетоМест()
	Если Сообщение.ПаллетоМеста.КоличествоПаллетоМест=неопределено Тогда Сообщение.ПаллетоМеста.КоличествоПаллетоМест=0; КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.СообщениеСсылка) Тогда 
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВводЗначения(Новый ОписаниеОповещения(""ОбработчикПерепроверитьСообщение"",ЭтаФорма), Сообщение.ПаллетоМеста.КоличествоПаллетоМест)");//в активный элемент//, Элемент) 
		иначе
			Если ВвестиЗначение(Сообщение.ПаллетоМеста.КоличествоПаллетоМест,"Укажите количество паллето-мест") Тогда
				ОбработчикПерепроверитьСообщение(Сообщение.ПаллетоМеста.КоличествоПаллетоМест);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерепроверитьСообщение(Параметр=Неопределено,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	
	ПерепроверитьСообщениеСервер();
	
КонецПроцедуры // ОбработчикВвестиКоличествоПаллет()
&НаСервере
Процедура ПерепроверитьСообщениеСервер() Экспорт
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища(); //потребуется для ПроверитьПоляСообщения
	РезультатПроверки = МодульОбъекта().ПроверитьПоляСообщения(Сообщение);
	Сообщение.СодержитОшибки =  НЕ РезультатПроверки.Успешно;
	
	ПроверитьЗаполнениеПолей();
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
КонецПроцедуры

//Универсальный Акцептор Нажатия Доавбленной Кнопки
&НаКлиенте
Процедура АкцепторДобавленнойКнопки(Команда)
	
	//действия, которые нужно выполнить на клиенте, например что-то спросить
	КлиентскийКодОбработчика=ПолучитьКлиентскийКодОбработчикаНажатияКнопки(Команда.Имя);
	
	Если КлиентскийКодОбработчика<>неопределено Тогда 
		
		//в этот моент мы знаем Команда.Имя и можем выполнить нужный код внутри КлиентскийКодОбработчика смотри описание функции ПолучитьКлиентскийКодОбработчикаНажатияКнопки
		//для дальнейшей передачи на сервер для обработки Использовать  ОбработчикИнтерактивногоДействияДобавленнойкнопки(РезультатДействия,ИмяКоманды)
		Выполнить(КлиентскийКодОбработчика); 
	Иначе
		//действия, которые Нужно выполнить на сервере т.к. нет клиентского обработчика
		РезультатКлиента=Неопределено;
		АкцепторДобавленнойКнопкиСервер(Команда.Имя,РезультатКлиента)
	КонецЕсли;
	
КонецПроцедуры

//////Пример кода события "ПолучениеКодаКлиентскогоОбработчика"
//Если Команда.Имя = "ПроверитьАдекватность" Тогда
//	
//	ТекстВопроса ="Сколько будет 3 + 1000000 ?";
//	КнопкиВопроса=новый СписокЗначений;
//	КнопкиВопроса.Добавить("не знаю");
//	КнопкиВопроса.Добавить("1000003");
//	ДопПараметрДляПередачиВОбработчик=Команда.Имя;
//	РезультатВопроса = Неопределено;
//	Если Параметры.МодальностьЗапрещена Тогда                     
//		Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикИнтерактивногоДействияДобавленнойкнопки"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""Контур.EDI"")");
//	Иначе
//		РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"Контур.EDI");
//		ОбработчикИнтерактивногоДействияДобавленнойкнопки(РезультатВопроса,ДопПараметрДляПередачиВОбработчик); 
//	КонецЕсли;
//КонецЕсли;
&НаСервере
Функция ПолучитьКлиентскийКодОбработчикаНажатияКнопки(ИмяКоманды)
	
	СтандартнаяОбработкаEDI=Истина;	
	КлиентскийКодОбработчика = МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ПолучениеКодаКлиентскогоОбработчика",СтандартнаяОбработкаEDI,Новый Структура("ИмяКоманды,Сообщение,Параметры,Форма",ИмяКоманды,Сообщение,Параметры,ЭтаФорма));
	
	Если ЗначениеЗаполнено(СокрЛП(КлиентскийКодОбработчика)) Тогда 
		Возврат КлиентскийКодОбработчика;
	Иначе
		Возврат неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьКлиентскийКодОбработчикаНажатияКнопки()

//если мы хотим в режиме запрета модальности спросить что-то у пользователя, то его ответ требуется положить в обработчик
&НаКлиенте
Процедура ОбработчикИнтерактивногоДействияДобавленнойкнопки(РезультатКлиента,ИмяКоманды) Экспорт
	
	АкцепторДобавленнойКнопкиСервер(ИмяКоманды,РезультатКлиента);	
	
КонецПроцедуры // ОбработчикИнтерактивногоДействияДобавленнойкнопки()

&НаСервере
Процедура АкцепторДобавленнойКнопкиСервер(ИмяКоманды,РезультатКлиента)
	
	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();   //нужны, например для перепроверки таб части
	СтандартнаяОбработкаEDI=истина;

	МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("КнопкаФормыСообщенияНажатие",СтандартнаяОбработкаEDI,Новый Структура("ИмяКоманды,Сообщение,Параметры,Форма,РезультатКлиента",ИмяКоманды,Сообщение,Параметры,ЭтаФорма,РезультатКлиента));
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();
	
КонецПроцедуры

&НаКлиенте                                
Процедура ОбработкаОповещения(ИмяСобытияОповещения, Параметр, Источник)
	                                      //ждем  Параметр.ИмяКоманды, Параметр.Результат
	Если ИмяСобытияОповещения = "ОповещениеИзПодключаемогоМодуля" Тогда 
		АкцепторДобавленнойКнопкиСервер(Параметр.ИмяКоманды,Параметр.Результат)
	КонецЕсли;
	
КонецПроцедуры


//типы ТС Магнит
&НаКлиенте
Процедура ВыбратьТипТС()
	
	Если ЗначениеЗаполнено(Параметры.СообщениеСсылка) Тогда 
		//список типов тс
		ОригинальныйСписок=ПолучитьСписокТиповТССообщения(Сообщение);
		
		Если ОригинальныйСписок=Неопределено или ОригинальныйСписок.Количество() = 0 Тогда 
			Сообщить("Не указаны типы ТС"); 
		иначе
			Если Параметры.МодальностьЗапрещена Тогда
				Выполнить("ОригинальныйСписок.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения(""ОбработчикПослеВыбораТипаТС"", ЭтаФорма),""Выберите тип транспортного средства"")");
			Иначе
				Если ОригинальныйСписок.ОтметитьЭлементы("Выберите тип транспортного средства") Тогда 			
					ОбработчикПослеВыбораТипаТС(ОригинальныйСписок, Неопределено)
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСписокТиповТССообщения(Сообщение)
	
	ВходящийЗаказДокумент1С = МодульОбъекта().НайтиСвязанныйДокументПоТипуСообщения(Сообщение.Документ1С,"ORDERS");
	СообщениеORDERS = МодульОбъекта().ПрочитатьСообщение(,ВходящийЗаказДокумент1С,"ORDERS","Входящее",,);
	//открытие формы для выбора и добавления даты, времени прибытия.
	ОригинальныйСписок=СообщениеORDERS.Транспортировка.ТипТранспортногоСредства.Скопировать();
	ТекущийСписок=Сообщение.Транспортировка.ТипТранспортногоСредства.Скопировать();
	Если ТекущийСписок.Количество()>0 Тогда 
		ОригинальныйСписок=ТекущийСписок;
	КонецЕсли;
	
	Возврат ОригинальныйСписок;
	
КонецФункции // ПолучитьСписокТиповТССообщения()

&НаКлиенте
Процедура ОбработчикПослеВыбораТипаТС(Параметр=Неопределено,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	Если Параметр=Неопределено Тогда
		//так и не выбрали
	Иначе
		Сообщение.Транспортировка.ТипТранспортногоСредства=Параметр;
	КонецЕсли;
	
	ОбработчикПослеВыбораТипаТССервер();
	
КонецПроцедуры 

&НаСервере
Процедура ОбработчикПослеВыбораТипаТССервер()

	// только перепроверить сообщение
	ПроверитьЗаполнениеПолей();
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();

КонецПроцедуры // ОбработчикПослеВыбораТочкиСамовывозаСервер()


//Блок Особенности
&НаКлиенте
Процедура ОсобенностиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры
&НаКлиенте
Процедура ОсобенностиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьОсобенностиСообщенияНаФорме()

	Особенности.Очистить();
	
	ОсобенностиСообщений = ОсобенностиСообщений();
	//штатный обход таблицы особенностей
	Для каждого ОсобенностьСообщения Из ОсобенностиСообщений Цикл
		
		Если НЕ МодульОбъекта().ОсобенностьВыводитсяВКарточкуСообщения(ОсобенностьСообщения,Сообщение) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоРеквизитТоваров = Найти(ОсобенностьСообщения.Путьxml,"lineItem.")<>0;
		
		Если ЭтоРеквизитТоваров = истина  Тогда
			
			ДобавитьОсобенностьТоваров(ОсобенностьСообщения);
			
		ИначеЕсли ЭтоРеквизитТоваров = Ложь  Тогда
			
			ДобавитьОсобенностьШапки(ОсобенностьСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Особенности.Количество() = 0 Тогда
		Элементы.СтраницаОсобенности.Видимость = Ложь;
	Иначе
		Элементы.СтраницаОсобенности.Видимость = Истина;
		Элементы.СтраницаОсобенности.Заголовок = "Особенности ("+Особенности.Количество()+")";
	КонецЕсли;

КонецПроцедуры
&НаСервере
Процедура ДобавитьОсобенностьШапки(Особенность) //Особенность - строка таблицы Особенностей
	
	//в таблицу Особенности
	НоваяОсобенность = Особенности.Добавить();
	НоваяОсобенность.Наименование = Особенность.Наименование;
	НоваяОсобенность.Идентификатор = Особенность.Идентификатор;
	НоваяОсобенность.Подсказка = Особенность.ПодробноеОписание;
	ЗначениеСвойстваСообщения = "";
	Если Сообщение.Свойство(Особенность.Идентификатор,ЗначениеСвойстваСообщения) Тогда
		НоваяОсобенность.Значение 	= ЗначениеСвойстваСообщения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеСвойстваСообщения) Тогда
		Дефолт = МодульОбъекта().ПолучитьПустоеЗначениеОсобенности(Особенность);
		Если Дефолт<>неопределено Тогда
		НоваяОсобенность.Значение = Дефолт;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ДобавитьОсобенностьТоваров(Особенность)
	//надо бы проверить наличие колонки перед добавлением!
	
	//создать колонку и привязать данные
	
	ТипЗначенияКолонкиОсобенность = МодульОбъекта().ПолучитьТипОсобенности(Особенность);
	НовыеРеквизиты = Новый Массив;
	НовыеРеквизиты.Добавить(Новый РеквизитФормы(Особенность.Идентификатор, ТипЗначенияКолонкиОсобенность, "Товары", Особенность.Идентификатор, Истина));
	ИзменитьРеквизиты(НовыеРеквизиты);
	
	НоваяКолонкаНаФорме = Элементы.Добавить("Товары"+Особенность.Идентификатор, Тип("ПолеФормы"), Элементы.Товары); 
	Если ТипЗначенияКолонкиОсобенность = Новый ОписаниеТипов("Булево") Тогда
		НоваяКолонкаНаФорме.Вид = ВидПоляФормы.ПолеФлажка; 
	Иначе
		НоваяКолонкаНаФорме.Вид = ВидПоляФормы.ПолеВвода; 
		НоваяКолонкаНаФорме.Ширина = 15;
	КонецЕсли;
	НоваяКолонкаНаФорме.ПутьКДанным = "Товары."+Особенность.Идентификатор; 	
	НоваяКолонкаНаФорме.Подсказка = "Эта колонка добавлена из-за особенности партнера: """+Особенность.Наименование+"""";
	НоваяКолонкаНаФорме.КартинкаШапки = Элементы.СтраницаОсобенности.Картинка;	
	НоваяКолонкаНаФорме.УстановитьДействие("ПриИзменении", "ПеренестиОсобенностиИПерепроверитьСообщение");
	
	//значение туда положит механизм  ЗаполнитьПоляНаФорме()
	
КонецПроцедуры
&НаКлиенте
Процедура ПеренестиОсобенностиИПерепроверитьСообщение(Заглушка=Неопределено) //чтобы можно было привязать ПриИзменении
	
	//на сервер
	ПеренестиОсобенностиИПерепроверитьСообщениеВызовСервера();
	
КонецПроцедуры
&НаСервере
Процедура ПеренестиОсобенностиИПерепроверитьСообщениеВызовСервера()

	ВосстановитьТаблицыЗначенийПроизвольныхРеквизитовИзХранилища();	

	ПеренестиОсобенностиВСообщение();
	
	ОшибокБольшеНет = ПроверитьЗаполнениеПолей();	
	Если ОшибокБольшеНет = Истина Тогда
		Сообщение.СодержитОшибки = Ложь;
	КонецЕсли;
	
	ПоместитьТаблицыЗначенийПроизвольныхРеквизитовВХранилище();
	УничтожитьТаблицыЗначенийПроизвольныхРеквизитов();

КонецПроцедуры // ПеренестиОсобенностиИПерепроверитьСообщениеВызовСервера()
&НаСервере
Процедура ПеренестиОсобенностиВСообщение()

	ОсобенностиСообщений = ОсобенностиСообщений();
	ВремТовары = РеквизитФормыВЗначение("Товары");
	ВремОсобенности = РеквизитФормыВЗначение("Особенности");
	Для каждого ОсобенностьСообщения Из ОсобенностиСообщений Цикл
		
		Если НЕ МодульОбъекта().ОсобенностьВыводитсяВКарточкуСообщения(ОсобенностьСообщения,Сообщение) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоРеквизитТоваров = Найти(ОсобенностьСообщения.Путьxml,"lineItem.")<>0;
		
		Если ЭтоРеквизитТоваров = истина  Тогда
			
			Сообщение.Товары.ЗагрузитьКолонку(ВремТовары.ВыгрузитьКолонку(ОсобенностьСообщения.Идентификатор),ОсобенностьСообщения.Идентификатор);
			
		ИначеЕсли ЭтоРеквизитТоваров = Ложь  Тогда
			
			НайденнаяОсобенность = ВремОсобенности.Найти(ОсобенностьСообщения.Идентификатор,"Идентификатор");
			Если НайденнаяОсобенность <> Неопределено Тогда
				Сообщение.Вставить(ОсобенностьСообщения.Идентификатор, НайденнаяОсобенность.Значение); 
			КонецЕсли;
		
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПеренестиОсобенностиВСообщение()
&НаСервере
Функция ОсобенностиСообщений()
	//это базовая таблица доступная после инициализации Модуля Объекта
	
	Если ОсобенностиСообщений=Неопределено Тогда
		Возврат МодульОбъекта().ОсобенностиСообщений;
	Иначе
		Возврат ОсобенностиСообщений;
	КонецЕсли;
	
КонецФункции // ОсобенностиСообщений()
&НаКлиенте
Процедура ОсобенностиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПеренестиОсобенностиИПерепроверитьСообщениеВызовСервера();
	
КонецПроцедуры


ВнешнееХранилище=ложь;