&НаСервере
Перем ОбработкаОбъект;

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура СписокРасширенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокРасширенияПередУдалением(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТолькоПодходящие=Истина;
	Партнер = Параметры.Партнер;
	ЗаполнитьДанныеОРасширениях();
	
	ПозиционироватьНаСтроку();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОРасширениях()
	
	РезультатДанныеОРасширениях = МодульОбъекта().ПолучитьДанныеОРасширенияхССервера(ТолькоПодходящие,ТолькоРекомендованные,Партнер);
	Если Не РезультатДанныеОРасширениях.Успешно Тогда
		МодульОбъекта().ВывестиПредупреждение_КонтурEDI("Не удалось получить данные о расширениях: """ + РезультатДанныеОРасширениях.ОписаниеОшибки + """.");
		Отказ = Истина;
	КонецЕсли;
	
	ОтобразитьДанныеОРасширениях(РезультатДанныеОРасширениях.ДанныеОРасширениях);	
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеОРасширениях(ДанныеОРасширениях)
	
	//СписокРасширения.Очистить();
	Дерево = ДанныеФормыВЗначение(СписокРасширения,Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	//СОздатьПапки	
	ТипыРасширений=ДанныеОРасширениях.Скопировать(,"ТипРасширения");
	ТипыРасширений.Свернуть("ТипРасширения");
	ТипыРасширений.Сортировать("ТипРасширения");
	Для Каждого СтрокаТипа Из ТипыРасширений Цикл
		ГруппаТипа = Дерево.Строки.Добавить();
		ГруПпаТипа.Наименование = СтрокаТипа.ТипРасширения;
		СтрокиЭтогоТипа = ДанныеОРасширениях.НайтиСтроки(Новый Структура("ТипРасширения",СтрокаТипа.ТипРасширения));
		Для Каждого СтрокаЭтогоТипа Из СтрокиЭтогоТипа Цикл
			НоваяСтрокаРасширения = ГруппаТипа.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасширения,СтрокаЭтогоТипа);
		КонецЦикла;
		
	КонецЦикла;
	Дерево.Строки.Сортировать("ТипРасширения");
	
	//СписокРасширения = ДанныеОРасширениях;	       
	//ЗначениеВРеквизитФормы(ДанныеОРасширениях,"СписокРасширения");
	ЗначениеВРеквизитФормы(Дерево,"СписокРасширения");
	
КонецПроцедуры

&НаСервере
Процедура ПозиционироватьНаСтроку(Идентификатор = "")
	//теперь дерево!
	
	//СтрокиПозиционирования = СписокРасширения.НайтиСтроки(Новый Структура("Идентификатор",Идентификатор));
	//
	//Если СтрокиПозиционирования.Количество()=1 Тогда
	//	Элементы.СписокРасширения.ТекущаяСтрока = СтрокиПозиционирования[0].ПолучитьИдентификатор();
	//КонецЕсли;
	////Элементы.СписокРасширения.ТекущийЭлемент = ;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРасширенияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокРасширенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Колонка = Поле;
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено или Колонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//установка / обновление расширения
	Если (Колонка.Имя = "СписокРасширенияУстановить") И 
		 (ТекСтрока.Установить = "установить" или ТекСтрока.Установить = "обновить") Тогда
		ТекущийИдентификаторРасширения = ТекСтрока.Идентификатор; 
		
		РезультатУстановки = УстановитьРасширениеВызовСервера(ТекСтрока.Наименование,ТекущийИдентификаторРасширения,ТекСтрока.ТекИнтерфейс,ТекСтрока.Ссылка,ТекущийИдентификаторРасширения);
		
	ИначеЕсли (Колонка.Имя = "СписокРасширенияУстановить") И 
		ТекСтрока.Установить = "удалить" Тогда
		РезультатУстановки = УдалитьРасширениеВызовСервера(ТекСтрока.Ссылка);
		
	ИначеЕсли (Колонка.Имя = "СписокРасширенияУстановить") И 
		ТекСтрока.Установить = "устарело" Тогда
		ТекстПредупреждения="Когда-то расширение трудилось на благо поставщиков, но теперь оно никому не нужно.";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	РазвернутьРасширения();
	
КонецПроцедуры

&НаСервере
Функция УстановитьРасширениеВызовСервера(Наименование,Идентификатор,Интерфейс,Знач РасширениеСсылка = Неопределено,ТекущийИдентификаторРасширения)

	РезультатУстановки = МодульОбъекта().УстановитьРасширение(Наименование,Идентификатор,Интерфейс,РасширениеСсылка);
	
	Если Не РезультатУстановки.Успешно Тогда
		МодульОбъекта().ВывестиПредупреждение_КонтурEDI(РезультатУстановки.ОписаниеОшибки);
	Иначе
		ЗаполнитьДанныеОРасширениях();	
		ПозиционироватьНаСтроку(ТекущийИдентификаторРасширения);
	КонецЕсли;

КонецФункции // УстановитьРасширениеВызовСервера()

&НаСервере
Функция УдалитьРасширениеВызовСервера(РасширениеСсылка)

	РезультатУдаления = МодульОбъекта().УдалитьРасширение(РасширениеСсылка);
	Если Не РезультатУдаления.Успешно Тогда
		МодульОбъекта().ВывестиПредупреждение_КонтурEDI(РезультатУдаления.ОписаниеОшибки);
	Иначе
		ЗаполнитьДанныеОРасширениях();	
	КонецЕсли;

КонецФункции // УдалитьРасширениеВызовСервера()

&НаКлиенте
Процедура СписокРасширенияПриАктивизацииЯчейки(Элемент)
	////сбросим голубизну(желтизну) в выделенни
	//Элементы.СписокРасширения.ВыделенныеСтроки.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьРасширения()
	
	Элементы1Ур = СписокРасширения.ПолучитьЭлементы();
	Для Каждого Элемент1Ур ИЗ Элементы1Ур Цикл
		Элементы.СписокРасширения.Развернуть(Элемент1Ур.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры // РазвернутьРасширения()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РазвернутьРасширения();
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРекомендованныеПриИзменении(Элемент)
	Состояние("Ищем нужные расширения...",,"применяем отборы",БиблиотекаКартинок.ДобавитьВИзбранное);
	ЗаполнитьДанныеОРасширениях();
	РазвернутьРасширения();
	Состояние("Готово!",,,БиблиотекаКартинок.ВыполнитьЗадачу);
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПодходящиеПриИзменении(Элемент)
	Состояние("Ищем нужные расширения...",,"применяем отборы",БиблиотекаКартинок.ДобавитьВИзбранное);
	ЗаполнитьДанныеОРасширениях();
	РазвернутьРасширения();
	Состояние("Готово!",,,БиблиотекаКартинок.ВыполнитьЗадачу);
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент = Неопределено)
	Состояние("Ищем нужные расширения...",,"применяем отборы",БиблиотекаКартинок.ДобавитьВИзбранное);
	ЗаполнитьДанныеОРасширениях();
	РазвернутьРасширения();
	Состояние("Готово!",,,БиблиотекаКартинок.ВыполнитьЗадачу);
КонецПроцедуры

&НаКлиенте
Процедура ПартнерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокПартнеров = ПолучитьСписокПартнеровКлиент();
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьВыборИзСписка(Новый ОписаниеОповещения(""ПартнерВыборЗавершение"", ЭтаФорма), СписокПартнеров,Элемент,)");
	Иначе
		ВыбранноеЗначение = ВыбратьИзСписка(СписокПартнеров,Элемент,);
		ПартнерВыборЗавершение(ВыбранноеЗначение, );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерВыборЗавершение(ВыбранноеЗначение=Неопределено,ДопПараметр=Неопределено)Экспорт

	Если ВыбранноеЗначение<>Неопределено И ЗначениеЗаполнено(ВыбранноеЗначение.Значение) Тогда
		Партнер = ВыбранноеЗначение.Значение;
		ПартнерПриИзменении();
	КонецЕсли;

КонецПроцедуры // СписокПользователейИБВыборЗавершение()

&НаСервере
Функция ПолучитьСписокПартнеровКлиент()
	
	СписокПартнеров = Новый СписокЗначений();
	СписокПартнеров.ЗагрузитьЗначения(МодульОбъекта().ПолучитьСписокЭлементовСправочника("Партнеры").ВыгрузитьКолонку("Ссылка"));
	Возврат СписокПартнеров;
	
КонецФункции

