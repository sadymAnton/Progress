&НаСервере
Перем ОбработкаОбъект; 
 
&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

 &НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.МодальностьЗапрещена=МодульОбъекта().МодальностьЗапрещена();
	ПутьКФормам = МодульОбъекта().Метаданные().ПолноеИмя() + ".Форма.";
	
	Если ЗначениеЗаполнено(Параметры.СсылкаНаПартнера) Тогда
		
		Партнер = МодульОбъекта().ПолучитьЭлементСправочника("Партнеры",Параметры.СсылкаНаПартнера);
		
		Наименование 	= Партнер.Наименование;
		GLN				= Партнер.GLN;
		ЭтоТорговаяСеть	= Партнер.ТорговаяСеть;
		ЭтоПоставщик	= Партнер.Поставщик;
		КодСети			= Партнер.КодСети;
		
		СписокЮрЛиц = МодульОбъекта().ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСторонние",Параметры.СсылкаНаПартнера);
		
		Для каждого Стр ИЗ СписокЮрЛиц Цикл
			
			НоваяСтрока = ТаблицаЮрФизЛиц.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			
		КонецЦикла;
		
		ОбновитьСписокНоменклатуры();
		
		ОбновитьСписокТочекДоставки();
        ОбновитьСписокПодразделений();

//		Элементы.ТаблицаТочекДоставкиОбновитьСписокТочекДоставок.Доступность = ЗначениеЗаполнено(КодСети);
		
	Иначе
		
		ЭтоНовыйПартнер = Истина;
		
		Если МодульОбъекта().ПолучитьВидКомпании() = "Поставщик" Тогда
        	ЭтоТорговаяСеть = Истина;
		Иначе
			ЭтоПоставщик = Истина;
		КонецЕсли;
				
	КонецЕсли;
	
	УстановитьТипыЗначенийПолей();

	УправлениеВидимостью();
	
	ДеревоОбъект=РеквизитФормыВЗначение("ДеревоНастроек");
	МодульОбъекта().СоздатьДеревоНастроек(ДеревоОбъект,"Партнеры",Партнер);
	
	// автотесты
	Если ЗначениеЗаполнено(Параметры.ПараметрыАвтотестирования) Тогда
		СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
		СтруктураПараметров = СтруктураПараметров.Настройки.Партнер;
		Для Каждого СтрНастроек Из СтруктураПараметров.Настройки Цикл
			
			УстановитьЗначениеНастройки(ДеревоОбъект,СокрЛП(СтрНастроек.Настройка),СтрНастроек.Значение);
			
		КонецЦикла;
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(ДеревоОбъект,"ДеревоНастроек");
	
КонецПроцедуры

&НаСервере
Функция УстановитьЗначениеНастройки(Ветка,ИмяНастройки,Значение)
	
	Для Каждого Стр ИЗ Ветка.Строки Цикл
		Если СокрЛП(Стр.НастройкаИД) = ИмяНастройки Тогда
			Стр.Значение = Значение;
			Возврат Истина;
		КонецЕсли;
		Если УстановитьЗначениеНастройки(Стр,ИмяНастройки,Значение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УправлениеВидимостью()
	
	Элементы.ГруппаСтраницаТочкиДоставки.Видимость = (ЭтоТорговаяСеть=истина);
	
	Если МодульОбъекта().ПараметрыПользователяEDI.РольПользователяEDI<>"ПолныеПрава" Тогда
		
		//пользователь с ограниченными правами будет редактировать только точки доставки и номенклатуру
		ДоступныеСтраницы = МодульОбъекта().EDI_РазложитьСтрокуВМассивСлов("ГруппаСтраницаТочкиДоставки,ГруппаНоменклатура",",");
		Для Каждого Страница Из Элементы.ГруппаСтраницы.ПодчиненныеЭлементы Цикл
			Если ДоступныеСтраницы.Найти(Страница.Имя)=Неопределено Тогда
				Страница.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.GLN.ТолькоПросмотр					= Истина;
		Элементы.Наименование.ТолькоПросмотр		= Истина;
		Элементы.ЭтоТорговаяСеть.ТолькоПросмотр		= Истина;
		Элементы.ЭтоПоставщик.ТолькоПросмотр		= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипыЗначенийПолей()
	
	УстановитьТипЗначенияКолонки(Элементы.ТаблицаЮрФизЛицЮрФизЛицо,		"ЮрФизЛицоСтороннее");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначенияКолонки(ПолеФормы,Тип1С)
	
	ТипПоля		= МодульОбъекта().ПолучитьТипЗначенияОбъекта(Тип1С);
	
	Если ТипПоля = Неопределено Тогда
		Сообщить("Не задан тип объекта 1С для поля с типом "+Тип1С);
	Иначе	
		
		ПолеФормы.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ЗначениеЗаполнено(Параметры.ПараметрыАвтотестирования) Тогда

		ПодключитьОбработчикОжидания("ЗаписатьНастройкиАвтотестирования",0.1,Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НайтиКонтрагентаПоНаименованию(НаименованиеКонтрагента)
	
	Возврат Справочники.Контрагенты.НайтиПоНаименованию(НаименованиеКонтрагента);
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНастройкиАвтотестирования()
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыАвтотестирования);
	СтруктураПараметров = СтруктураПараметров.Настройки.Партнер;
	
	Наименование = СтруктураПараметров.Наименование;
	GLN = СтруктураПараметров.GLN;
	
	ЭтоТорговаяСеть = Истина;
	
	ЗаписатьИзменения();
	
	Для Каждого ЮрЛицо Из СтруктураПараметров.ЮрЛица Цикл
		НоваяСтрока = ТаблицаЮрФизЛиц.Добавить();
		НоваяСтрока.ЮрФизЛицо = НайтиКонтрагентаПоНаименованию(ЮрЛицо.Контрагент);
		НоваяСтрока.GLN = ЮрЛицо.GLN;
		НоваяСтрока.Основной = Истина;
	КонецЦикла;
	
	// настраиваем точки доставки
	Для Каждого ТД Из СтруктураПараметров.ТочкиДоставки Цикл
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ПараметрыАвтотестирования",Параметры.ПараметрыАвтотестирования);
		ПараметрыФормы.Вставить("Партнер",Параметры.СсылкаНаПартнера);
		ПараметрыФормы.Вставить("Наименование",ТД.АдресДоставки);
		ПараметрыФормы.Вставить("АдресДоставки",ТД.АдресДоставки);
		ПараметрыФормы.Вставить("GLN",ТД.GLN);
		
		Если ЗначениеЗаполнено(ТД.Контрагент) Тогда
			ПараметрыФормы.Вставить("ЮрФизЛицо",НайтиКонтрагентаПоНаименованию(ТД.Контрагент));
		КонецЕсли;
		
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""ТочкиДоставкиСторонние_ЭлементУправляемая"", ПараметрыФормы)");//,ДополнительныеПараметры);
		Иначе
			ПолучитьФормуОбработки("ТочкиДоставкиСторонние_ЭлементУправляемая",ПараметрыФормы).ОткрытьМодально();
		КонецЕсли;
		
	КонецЦикла;
	
	// настраиваем номенклатуру
	Для Каждого СтрТоваров Из СтруктураПараметров.СоответствияТоваров Цикл
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ПараметрыАвтотестирования",Параметры.ПараметрыАвтотестирования);
		ПараметрыФормы.Вставить("Партнер",Параметры.СсылкаНаПартнера);
		ПараметрыФормы.Вставить("GTIN",СтрТоваров.GTIN);
		ПараметрыФормы.Вставить("КодТовараПартнера",СтрТоваров.КодТовараПартнера);
		// остальные параметры будут найдены в форме сопоставления номенклатуры
		
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Номенклатура_ЭлементУправляемая"", ПараметрыФормы)");//,ДополнительныеПараметры);
		Иначе
			ПолучитьФормуОбработки("Номенклатура_ЭлементУправляемая",ПараметрыФормы).ОткрытьМодально();
		КонецЕсли;
		
	КонецЦикла;
	
	// чтобы нормально отработали предыдущие открытые формы тд и номенклатуры
	ПодключитьОбработчикОжидания("Автотесты_НажатьЗаписатьИЗакрыть",0.1,Истина);

КонецПроцедуры

&НаКлиенте
Процедура Автотесты_НажатьЗаписатьИЗакрыть()
	ЗаписатьИЗакрыть("");
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНоменклатуры()
	
	МодульОбъекта().ОбновитьСписокНоменклатуры(ТаблицаНоменклатуры,Параметры.СсылкаНаПартнера);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТочекДоставки()
	
	//запоминаем gln текущей строки
	ТекGLN = Неопределено;
	ТекСтрокаИдентификатор = Элементы.ТаблицаТочекДоставки.ТекущаяСтрока;
	Если Не ТекСтрокаИдентификатор = Неопределено Тогда
		ТекGLN = ТаблицаТочекДоставки.НайтиПоИдентификатору(ТекСтрокаИдентификатор).GLN;
	КонецЕсли;
	
	ТаблицаТочекДоставкиОбъект = РеквизитФормыВЗначение("ТаблицаТочекДоставки");
	ТаблицаТочекДоставкиОбъект.Очистить();
	
	СписокТочекДоставки = МодульОбъекта().ПолучитьСписокЭлементовСправочника("ТочкиДоставкиСторонние",Параметры.СсылкаНаПартнера);
	Если НЕ СписокТочекДоставки = Неопределено Тогда
		Для каждого Стр ИЗ СписокТочекДоставки Цикл
			НоваяСтрока = ТаблицаТочекДоставкиОбъект.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаТочекДоставкиОбъект, "ТаблицаТочекДоставки");
	
	//восстанавливаем текущую строку по gln
	Если НЕ ТекGLN = Неопределено Тогда
		НайденныеСтроки = ТаблицаТочекДоставки.НайтиСтроки(Новый Структура("GLN",ТекGLN));
		Если Не НайденныеСтроки.Количество() = 0 Тогда
			Элементы.ТаблицаТочекДоставки.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПодразделений()
 //все подразделения выпилены уже давно за ненадобностью.
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбъектаМодально(ИмяФормы, ПараметрыФормы = Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено,РежимБлокирования = Неопределено)
	//отказ от модальности
	Если РежимБлокирования = Неопределено Тогда
		РежимБлокирования=	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	Если ВладелецОбработчика = Неопределено Тогда
		ВладелецОбработчика=	ЭтаФорма;
	КонецЕсли;
	
	Если ИмяОбработчика = Неопределено Тогда
		ОписаниеОбработчика=	Неопределено;
	Иначе	
		Выполнить("ОписаниеОбработчика=	Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика)");
	КонецЕсли;
	
	Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецОбработчика, , , ,  ОписаниеОбработчика, РежимБлокирования)");
	
КонецПроцедуры

// Отказы действиям пользователя
&НаКлиенте
Процедура ТаблицаЮрФизЛицПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЮрФизЛицПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТочекДоставкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТочекДоставкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ДобавитьЮрФизЛицо(Команда)
	ТаблицаЮрФизЛиц.Добавить();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЮрФизЛицо(Команда)
	
	ТекСтрока = Элементы.ТаблицаЮрФизЛиц.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		ТаблицаЮрФизЛиц.Удалить(ТекСтрока);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПартнеров(Команда)
	Состояние("Запрашиваю данные о юр. лицах сети",75);
	
	КодСети=Неопределено;
	Если Не ЗначениеЗаполнено(Параметры.СсылкаНаПартнера) Тогда
		Предупреждение("Сохраните данные партнёра для продолжения");
		Возврат;
	КонецЕсли;	
	
	Если не ЗначениеЗаполнено(КодСети) Тогда
		КодСети = ПолучитьКодСети();
		//Поищем код сети в list._xml
		Если Не ЗначениеЗаполнено(КодСети) Тогда
			Сообщить("Сеть не найдена на сервере");
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КодСети", КодСети);
	ПараметрыФормы.Вставить("Партнер", Параметры.СсылкаНаПартнера);
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_ОбновлениеЮрЛицСетиУправляемая"", ПараметрыФормы,""ОбработчикОбновленияСпискаЮрЛиц"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Сервис_ОбновлениеЮрЛицСетиУправляемая",ПараметрыФормы,ЭтаФорма).ОткрытьМодально();
		ОбработчикОбновленияСпискаЮрЛиц()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОбновленияСпискаЮрЛиц(Параметр1=Неопределено,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	Состояние("Перезаполняю список юр. лиц",80);
	ПерезаполнитьЮрЛиц();	
КонецПроцедуры 

&НаСервере
Процедура ПерезаполнитьЮрЛиц()
	
	ТаблицаЮрФизЛиц.Очистить();
	
	СписокЮрЛиц = МодульОбъекта().ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСторонние",Параметры.СсылкаНаПартнера);
	
	Для каждого Стр ИЗ СписокЮрЛиц Цикл
		
		НоваяСтрока = ТаблицаЮрФизЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		
	КонецЦикла;

КонецПроцедуры // ПерезаполнитьЮрЛиц()

&НаКлиенте
Процедура УдалитьТочкуДоставки(Команда)
	
	ТекСтрока = Элементы.ТаблицаТочекДоставки.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		
		ТекстВопроса ="Точка доставки """+ТекСтрока.АдресДоставки +"("+ТекСтрока.Наименование+")"+""" будет удалена. Продолжить?";
		
			Если Параметры.МодальностьЗапрещена Тогда
				Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикПодтверждениеУдаленияТД"", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет)");
			иначе
				РезультатВопросаУдаленияТД = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
				ОбработчикПодтверждениеУдаленияТД(РезультатВопросаУдаленияТД, Неопределено)
			КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПодтверждениеУдаленияТД(ОтветНаВопрос=Неопределено,ДопПараметр=Неопределено) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ОбработчикПодтверждениеУдаленияТДСервер(Элементы.ТаблицаТочекДоставки.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработчикПодтверждениеУдаленияТДСервер(СсылкаТД)
	
	МодульОбъекта().УдалитьЭлементСправочника("ТочкиДоставкиСторонние",СсылкаТД);
	ОбновитьСписокТочекДоставки();
	
КонецПроцедуры // ОбработчикПодтверждениеУдаленияТД()

&НаКлиенте
Процедура ОбновитьСписокТочекДоставок(Команда)
	
	Если Не ЗначениеЗаполнено(Параметры.СсылкаНаПартнера) Тогда
		Предупреждение("Сохраните данные партнёра для продолжения");
		Возврат;
	КонецЕсли;	
	
	Если не ЗначениеЗаполнено(КодСети) Тогда
		КодСети = ПолучитьКодСети();
		//Поищем код сети в list._xml
		Если Не ЗначениеЗаполнено(КодСети) Тогда
			Сообщить("Сеть не найдена на сервере");
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КодСети", 						КодСети);
	ПараметрыФормы.Вставить("GUIDФормыВыводаУведомлений", 	ЭтаФорма.УникальныйИдентификатор);
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Сервис_ОбновлениеДанныхПартнераУправляемая"", ПараметрыФормы, ""ОбработчикПослеПроверкиНовыхТД"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Сервис_ОбновлениеДанныхПартнераУправляемая",ПараметрыФормы,ЭтаФорма).ОткрытьМодально();
		ОбработчикПослеПроверкиНовыхТД();

	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослеПроверкиНовыхТД(Параметр1=Неопределено,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	ОбновитьСписокТочекДоставки();
КонецПроцедуры 


&НаСервере
Функция ПолучитьКодСети()
	
	СписокСетей = МодульОбъекта().ПолучитьСтруктуруДанныхТорговойСети("list");
	Если СписокСетей<>Неопределено Тогда
		
		ПодходящаяСеть = СписокСетей.Сети.Найти(GLN,"GLN");
		Если ПодходящаяСеть<>Неопределено Тогда
			КодСети = ПодходящаяСеть.Код;
			МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(ЭтаФорма.Параметры.СсылкаНаПартнера,"КодСети",КодСети);
		КонецЕсли;
		
	КонецЕсли;
	Возврат КодСети;
		
КонецФункции


&НаКлиенте
Процедура КоманднаяПанельНоменклатурыДобавить(Команда)
	
	//убедимся что партнер записан
	Если Не ЗначениеЗаполнено(Параметры.СсылкаНаПартнера) Тогда 
		Состояние("Запись партнера",70);

		Если ЗаписатьИзменения() Тогда
			//все ок
			//Параметры.СсылкаНаПартнера установлены
		Иначе
			Если Параметры.МодальностьЗапрещена Тогда 
				Выполнить("ПоказатьПредупреждение(Новый ОписаниеОповещения(""NOP"", ЭтаФорма),""Не удалось записать партнера перед добавлением точки доставки"")");
			Иначе
				Предупреждение("Не удалось записать партнера перед добавлением точки доставки");    //модальность
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Состояние("Создаю форму...",75);
	ТекСтрока= Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	
	ПараметрыФормы=	Новый Структура;
	ПараметрыФормы.Вставить("Партнер"			,Параметры.СсылкаНаПартнера);
	ПараметрыФормы.Вставить("GTIN"				,"");
	ПараметрыФормы.Вставить("КодТовараПартнера"	,"");
	ПараметрыФормы.Вставить("Наименование"		,"");
	                                                       
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Номенклатура_ЭлементУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияНоменклатуры"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("Номенклатура_ЭлементУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикПослередактированияНоменклатуры("", "")
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослередактированияНоменклатуры(ПараметрыЗакрытияИнтерактивнойФормы, ДополнительныеПараметры) Экспорт
	ОбновитьСписокНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура NOP(Параметр1 = Неопределено)Экспорт

//заглушка - для обработчиков предупреждений, не имеющих неадобности	

КонецПроцедуры


&НаКлиенте
Процедура КоманднаяПанельНоменклатурыИзменить(Команда)
	
	//Запомним положение курсора
	ТекСтрока = Элементы.ТаблицаНоменклатуры.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда  //м.б. открытие модуля
		ТекGTIN=Элементы.ТаблицаНоменклатуры.ТекущиеДанные.GTIN;
		ТекКодТовараПартнера=Элементы.ТаблицаНоменклатуры.ТекущиеДанные.КодТовараПартнера;
	КонецЕсли;

	//Откроем карточку элемента
	Если ТекСтрока<>Неопределено Тогда 
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("Партнер"			,Параметры.СсылкаНаПартнера);
		ПараметрыФормы.Вставить("GTIN"				,ТекСтрока.GTIN);
		ПараметрыФормы.Вставить("КодТовараПартнера"	,ТекСтрока.КодТовараПартнера);
		ПараметрыФормы.Вставить("Наименование"		,ТекСтрока.Наименование);
		
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Номенклатура_ЭлементУправляемая"", ПараметрыФормы,""ОбработчикПослередактированияНоменклатуры"")");//,ДополнительныеПараметры);
		Иначе
			ПолучитьФормуОбработки("Номенклатура_ЭлементУправляемая",ПараметрыФормы).ОткрытьМодально();
			ОбработчикПослередактированияНоменклатуры("", "")
		КонецЕсли;
	КонецЕсли;
	
	// Восстановим положение курсора
	СтрОтбора=     Новый Структура("GTIN", ТекGTIN);
	СтрОтбора.Вставить("КодТовараПартнера",ТекКодТовараПартнера);
	НайденныеСтроки=ТаблицаНоменклатуры.НайтиСтроки(СтрОтбора);
	Если НайденныеСтроки.Количество()>0 Тогда 
		Идентификатор=НайденныеСтроки[0].ПолучитьИдентификатор();
		Элементы.ТаблицаНоменклатуры.ТекущаяСтрока=Идентификатор;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ИмяФормы, ПараметрыФормы = Неопределено , ВладелецФормы  = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь)
	
	ПолучаемаяФорма=	ПолучитьФорму(ПутьКФормам+ИмяФормы
										, ПараметрыФормы
										,
										, КлючУникальности);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы=	ВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

&НаКлиенте
Процедура КоманднаяПанельНоменклатурыОбновить(Команда)
	ОбновитьСписокНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя="ДеревоНастроекЗначение" 
		И Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Отказ=Истина;
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент.Имя="ДеревоНастроекЗначение" 
		И ТипЗнч(Элементы.ДеревоНастроек.ТекущиеДанные.Значение)=Тип("Булево") Тогда
		Элемент.ТекущиеДанные.Значение = Не Элемент.ТекущиеДанные.Значение;
		Отказ=Истина;
	КонецЕсли;
	
	//фиксированные списки редактировать не дадим
	Если Элемент.ТекущийЭлемент.Имя="ДеревоНастроекЗначение" 
		И Элемент.ТекущиеДанные.ОписаниеТипа=Новый ОписаниеТипов("СписокЗначений") Тогда
		Отказ=Истина;
		ДеревоНастроекЗначениеНачалоВыбора(Элемент,ложь,Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока=Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Список) Тогда
		СтандартнаяОбработка=Ложь;
		СЗ=ЗначениеИзСтрокиВнутрВызовСервера(ТекСтрока.Список);
		Выб=СЗ.ВыбратьЭлемент();
		Если Выб<>Неопределено Тогда
			ТекСтрока.Значение=Выб.Значение;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиВнутрВызовСервера(Значение)
	Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") 
		или ТипЗнч(Значение) = Тип("ДеревоЗначений")
		тогда
		ВызватьИсключение("ЗначениеИзСтрокиВнутр тут быть не должно");
	КонецЕсли;
	
	Возврат ЗначениеИзСтрокиВнутр(Значение);
КонецФункции

&НаКлиенте
Процедура ДеревоНастроекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущийЭлемент.Имя="ДеревоНастроекЗначение" 
		И Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		СтандартнаяОбработка=Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если ЗаписатьИзменения() Тогда 
		ЭтаФорма.Закрыть(Истина);
	Иначе
		ТекстПредупреждения="Не удалось записать настройки";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"Контур.EDI");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьИзменения()
	
	Если НЕ ПроверитьЗначенияФормы() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПолейПартнера = Новый Структура();
	СтруктураПолейПартнера.Вставить("Наименование",							Наименование);
	СтруктураПолейПартнера.Вставить("GLN",									GLN);
	СтруктураПолейПартнера.Вставить("КодСети",								КодСети);
	СтруктураПолейПартнера.Вставить("ЭтоТорговаяСеть",						ЭтоТорговаяСеть);
	СтруктураПолейПартнера.Вставить("ЭтоПоставщик",							ЭтоПоставщик);
	
	МодульОбъекта().ДобавитьСтрокиДереваВСтруктуру(ДеревоНастроек,СтруктураПолейПартнера);
	
	Отказ = НЕ МодульОбъекта().ПроверитьКорректностьНастроекПартнераПередЗаписью(СтруктураПолейПартнера);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульОбъекта().НачатьТранзакцию_КонтурEDI();
	
	Попытка
    	
		МодульОбъекта().СохранитьЭлементСправочника("Партнеры",Параметры.СсылкаНаПартнера,СтруктураПолейПартнера);
		МодульОбъекта().СохранитьСписокЭлементовСправочника("ЮрФизЛицаСторонние",ТаблицаЮрФизЛиц,Параметры.СсылкаНаПартнера);
		
		МодульОбъекта().ЗафиксироватьТранзакцию_КонтурEDI();
		Модифицированность	= Ложь;
		ЭтоНовыйПартнер		= Ложь;
		
    Исключение
		
		МодульОбъекта().ОтменитьТранзакцию_КонтурEDI();
		
		Если Параметры.ЭтоНовыйПартнер Тогда
			Параметры.СсылкаНаПартнера = Неопределено;
		КонецЕсли;	
		
    КонецПопытки;
	
	Возврат НЕ Отказ;
	
КонецФункции // ЗаписатьИзменения()

&НаСервере
Функция ПроверитьЗначенияФормы()
	
	// 1. инициализируем таблицу вывода ошибок
	ТаблицаОшибок = МодульОбъекта().ИнициализироватьТаблицуОшибок();
	
	// 2. передать структуру для проверки
	МодульОбъекта().ПроверитьПолеФормы(ТаблицаОшибок, Наименование, "Строка50",	Истина, "Наименование");
	МодульОбъекта().ПроверитьПолеФормы(ТаблицаОшибок, GLN,			 "GLN",			Истина, "GLN");
	
	// юр лица
	
	ТабПроверки = РеквизитФормыВЗначение("ТаблицаЮрФизЛиц").Скопировать();
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("ЮрФизЛицо", "Юр\физ лицо");
	СписокПолей.Добавить("GLN","GLN");
	
	МодульОбъекта().НайтиДублиВТаблице(ТаблицаОшибок,ТабПроверки, "ЮрФизЛицо", "Юр. лица", "Юр\физ лицо");
	
	//Старая проверка. теперь в этой таблице может быть несколько GLN
	//МодульОбъекта().НайтиДублиВТаблице(ТаблицаОшибок,ТабПроверки, "GLN", 		"Юр. лица", "GLN");
	
	Если НЕ ЭтоТорговаяСеть и НЕ ЭтоПоставщик Тогда
		МодульОбъекта().ЗафиксироватьОшибку(ТаблицаОшибок,"GLN",,,"Необходимо указать, кем является ваш партнер: поставщиком или торговой сетью.");
	КонецЕсли;
	
	сч = 0;
	
	Для каждого Стр Из ТабПроверки Цикл
		
		сч = сч + 1;
		
		Если ЗначениеЗаполнено(Стр.GLN) ИЛИ ЗначениеЗаполнено(Стр.ЮрФизЛицо) Тогда
		
	 		МодульОбъекта().ПроверитьПолеФормы(ТаблицаОшибок, Стр.GLN,			"GLN", Истина, "GLN", 		"ТаблицаЮрФизЛиц",сч,				,"Юр. лица");
	 		МодульОбъекта().ПроверитьПолеФормы(ТаблицаОшибок, Стр.ЮрФизЛицо,		 , Истина, "ЮрФизЛицо", "ТаблицаЮрФизЛиц",сч,"Юр\физ лицо"	,"Юр. лица");
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.ЮрФизЛицо) Тогда
			
			ПартнерЮрФизЛица = МодульОбъекта().ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",Стр.ЮрФизЛицо));
			//// + Внешнее хранилище. kns 2014.08.22 // kns {метка} вернуть строку или ком?
			//Если ВнешнееХранилище Тогда
			//	Если ТипЗнч(ПартнерЮрФизЛица)=Тип("COMОбъект") Тогда
			//		ПартнерЮрФизЛица = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(ПартнерЮрФизЛица);
			//	КонецЕсли;
			//КонецЕсли;
			//// - Внешнее хранилище. kns 2014.08.22
			Если ЗначениеЗаполнено(ПартнерЮрФизЛица) И НЕ ПартнерЮрФизЛица = Параметры.СсылкаНаПартнера Тогда
				МодульОбъекта().ЗафиксироватьОшибку(ТаблицаОшибок,"GLN","ТаблицаЮрФизЛиц",сч,"Юр.\физ лицо """+СокрЛП(Стр.ЮрФизЛицо)+""" уже выбрано у партнера: "+СокрЛП(ПартнерЮрФизЛица));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// проверяем возможные комбинации настроек
	СтруктураПолейПартнера = Новый Структура();
	СтруктураПолейПартнера.Вставить("Наименование",							Наименование);
	СтруктураПолейПартнера.Вставить("GLN",									GLN);
	СтруктураПолейПартнера.Вставить("КодСети",								КодСети);
	СтруктураПолейПартнера.Вставить("ЭтоТорговаяСеть",						ЭтоТорговаяСеть);
	СтруктураПолейПартнера.Вставить("ЭтоПоставщик",							ЭтоПоставщик);
	
	МодульОбъекта().ДобавитьСтрокиДереваВСтруктуру(ДеревоНастроек,СтруктураПолейПартнера);
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		ТекстЗаголовка = "При заполнения партнера найдены ошибки.";
		
		//ОткрытьФормуВыводаОшибок(ТекстЗаголовка,ТаблицаОшибок,ЭтаФорма);
		Для Каждого СтрокаОшибки из ТаблицаОшибок Цикл 
			СП = новый СообщениеПользователю;
			СП.Текст = СтрокаОшибки.СведенияОбОшибках;
			Сп.Сообщить();
			
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	КоманднаяПанельНоменклатурыИзменить("");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТочекДоставкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Состояние("Открываю точку доставки",75);
	
	СтандартнаяОбработка = Ложь;	
	ТекСтрока = Элемент.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
	   	ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СсылкаТочкиДоставки", ТекСтрока.Ссылка);
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""ТочкиДоставкиСторонние_ЭлементУправляемая"", ПараметрыФормы,""ОбработчикМодификацииТочкиДоставки"")");//,ДополнительныеПараметры);
		Иначе
			ПолучитьФормуОбработки("ТочкиДоставкиСторонние_ЭлементУправляемая",ПараметрыФормы,ЭтаФорма).ОткрытьМодально();
			ОбработчикМодификацииТочкиДоставки()
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТочкуДоставки(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	//убедимся что партнер записан
	
	Если Не ЗначениеЗаполнено(Параметры.СсылкаНаПартнера) Тогда 
		Состояние("Запись партнера",70);

		Если ЗаписатьИзменения() Тогда
			//все ок
			//Параметры.СсылкаНаПартнера установлены
		Иначе
			Если Параметры.МодальностьЗапрещена Тогда 
				Выполнить("ПоказатьПредупреждение(Новый ОписаниеОповещения(""NOP"", ЭтаФорма),""Не удалось записать партнера перед добавлением точки доставки"")");
			Иначе
				Предупреждение("Не удалось записать партнера перед добавлением точки доставки");    //модальность
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Состояние("Создаю форму...",75);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Партнер", Параметры.СсылкаНаПартнера);
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""ТочкиДоставкиСторонние_ЭлементУправляемая"", ПараметрыФормы,""ОбработчикМодификацииТочкиДоставки"")");//,ДополнительныеПараметры);
	Иначе
		ПолучитьФормуОбработки("ТочкиДоставкиСторонние_ЭлементУправляемая",ПараметрыФормы,ЭтаФорма).ОткрытьМодально();
		ОбработчикМодификацииТочкиДоставки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикМодификацииТочкиДоставки(Параметр1=Неопределено, Параметр2=Неопределено) Экспорт

	ОбновитьСписокТочекДоставки();

КонецПроцедуры

&НаКлиенте
Процедура КРасширениям(Команда)
	
	Если ЗначениеЗаполнено(Параметры.СсылкаНаПартнера) Тогда 
		Состояние("Открываю библиотеку ",75);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Партнер",Параметры.СсылкаНаПартнера);
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""ФормаРасширения_СписокУправляемая"", ПараметрыФормы,)");//,ДополнительныеПараметры);
		Иначе
			ПолучитьФормуОбработки("ФормаРасширения_СписокУправляемая",ПараметрыФормы,ЭтаФорма).ОткрытьМодально();
		КонецЕсли;
	Иначе
		Сообщить("Переход к расширениям станет доступным после записи партнера");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаЮрФизЛицОсновнойПриИзменении(Элемент)
	
	Если Элементы.ТаблицаЮрФизЛиц.ТекущиеДанные.Основной = Истина Тогда
		УстановилиКонтрагенту=Элементы.ТаблицаЮрФизЛиц.ТекущиеДанные.ЮрФизЛицо;
		//Необходимо проверить, нет ли другого основного контрагента на этот GLN
		Поиск = Новый Структура("GLN, Основной",Элементы.ТаблицаЮрФизЛиц.ТекущиеДанные.GLN,Истина);
		НайденыТакиеЖеОсновные = ТаблицаЮрФизЛиц.НайтиСтроки(Поиск);
		Если НайденыТакиеЖеОсновные.Количество()>1 Тогда 
			Для Каждого СтрокаСброситьОсновной Из НайденыТакиеЖеОсновные Цикл
				Если УстановилиКонтрагенту<>СтрокаСброситьОсновной.ЮрФизЛицо Тогда 
					СтрокаСброситьОсновной.Основной = Ложь;
					
					ТекстПредупреждения="Контрагент: """+СтрокаСброситьОсновной.ЮрФизЛицо+""" теперь НЕ основной";
					Если Параметры.МодальностьЗапрещена Тогда 
						Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""Контур.EDI"")");
					Иначе
						Предупреждение(ТекстПредупреждения,,"Контур.EDI");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЮрФизЛицGLNПриИзменении(Элемент)
	
	Поиск = Новый Структура("GLN",Элементы.ТаблицаЮрФизЛиц.ТекущиеДанные.GLN);
	НайденыТакиеЖе = ТаблицаЮрФизЛиц.НайтиСтроки(Поиск);
	Если НайденыТакиеЖе.Количество()=1 Тогда //только Эта строка
		Элементы.ТаблицаЮрФизЛиц.ТекущиеДанные.Основной = Истина;
	КонецЕсли;
	
КонецПроцедуры

