&НаСервере
Перем ОбработкаОбъект;


&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
		
		//Если Параметры.АдресХранилища<>"" Тогда
		//	ОбработкаОбъект = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
		//	Возврат ОбработкаОбъект;
		//КонецЕсли;
		//
		//Если ОбработкаОбъект=Неопределено Тогда
		//	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		//	ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
		//КонецЕсли;
		//
		//Параметры.АдресХранилища = ПоместитьВоВременноеХранилище(ОбработкаОбъект,УникальныйИдентификатор);
	
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.МодальностьЗапрещена=МодульОбъекта().МодальностьЗапрещена();
	ПутьКФормам = МодульОбъекта().Метаданные().ПолноеИмя() + ".Форма.";
	НомерРелизаМодуля = МодульОбъекта().ПолучитьНомерРелиза_КонтурEDI();
	
	установитьВидимостьСтраницыДляЗадачи();
	
	Р_ДатаС = ТекущаяДата()-60*60*24*7; // - 7 дней
	
	Если Параметры.Задача="ПереходНаНовуюРедакциюМодуля" Тогда
		ЗаполнитьСтраницуПереходаНаНовуюРедакцию();
	Иначе
		Сообщить("Не передана задача");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтраницуПереходаНаНовуюРедакцию()

	Р_ОбщиеНастройки=Истина;
	Р_Сети_Настройки=Истина;
	Р_Сети_СоответствияНоменклатуры=Истина;
	Р_Сети_ТочкиДоставки=Истина;
	Р_Сети_ЮрЛица= Истина;
	Р_Сообщения=Истина;
	Р_УчетныеЗаписи=Ложь;
	Р_Сообщения_ТолькоАктивные = Истина;
	
	Если  МодульОбъекта().ПолучитьКонстантуEDI("ИспользоватьПодключаемыйМодуль")=истина Тогда 
		Элементы.ГруппаПодключаемыйМодуль.Видимость=Истина;
	Иначе
		Элементы.ГруппаПодключаемыйМодуль.Видимость=Ложь;
	КонецЕсли;        
	Если  МодульОбъекта().ПолучитьКонстантуEDI("ИспользоватьАвтоматическийОбмен")=истина Тогда 
		Элементы.ГруппаАвтоматическийОбмен.Видимость=Истина;
	Иначе
		Элементы.ГруппаАвтоматическийОбмен.Видимость=Ложь;
	КонецЕсли;        
	
	
	Если  МодульОбъекта().ПолучитьКонстантуEDI("МыСеть")=истина Тогда 
		Элементы.ГруппаМыСеть.Видимость=Истина;
		ЭтаФорма.ТолькоПросмотр=Истина;
	Иначе
		Элементы.ГруппаМыСеть.Видимость=Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтраницуПереходаНаНовуюРедакцию()


&НаСервере
Процедура УстановитьВидимостьСтраницыДляЗадачи()
	Для Каждого Страница из Элементы.Задачи.ПодчиненныеЭлементы Цикл
		Страница.Видимость=?(Страница.Имя=Параметры.Задача,Истина,Ложь);
	КонецЦикла;
КонецПроцедуры // ()


&НаКлиенте
Процедура СконвертироватьНаНовуюРедакцию(Команда)
	Если не ЗначениеЗаполнено(Р_ДатаС) Тогда 
		Сообщить("Выберите дату с которой конвертировать цепочки сообщений");
		Возврат;
	КонецЕсли;
	
	СконвертироватьНаСервере();
	//
	Сообщить("Сконвертировано успешно, перезапустите модуль");
	ЭтаФорма.ТолькоПросмотр=Истина;
	
КонецПроцедуры

&НаСервере
Процедура СконвертироватьНаСервере()
    НачатьТранзакцию();
	
	Если Р_ОбщиеНастройки Тогда
		СконвертироватьОбщиеНастройки();
	КонецЕсли;
	//	СконвертироватьУчетныеЗаписи();  //не конвертируем, момент важный ручное перезаполнение
	Если Р_Сети_Настройки Тогда
		СконвертироватьНастройкиСетей();
	КонецЕсли;
	
	Если Р_Сети_ЮрЛица Тогда
		СконвертироватьЮрЛицаСетей();
	КонецЕсли;
	
	Если Р_Сети_ТочкиДоставки Тогда
		СконвертироватьТочкиДоставки();
	КонецЕсли;
	
	Если Р_Сети_СоответствияНоменклатуры Тогда
		СконвертироватьСоответствияНоменклатуры();
	КонецЕсли;
	
	Если Р_Сообщения Тогда
		СконвертироватьСообщения();
	КонецЕсли;
	
	////не забываем удалить старое значение основного gln
	//МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(неопределено, "ОсновнойКодGLN");
	ЗафиксироватьТранзакцию();
	
	
	//еще пометим на удаление все остальные сообщения
	УдалитьСтарыеСообщения();
	
КонецПроцедуры // СконвертироватьНаСервере()

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ОпределитьПартнераУКоневертируемогоСообщения(Сообщение)
	
	СообщениеСтруктура= МодульОбъекта().ПрочитатьСообщение(Сообщение.Ссылка,,Сообщение.ТипСообщения,Сообщение.Направление);
	Возврат МодульОбъекта().ОпределитьПартнера(Новый Структура("ТипЗначения,Сообщение","Сообщение",СообщениеСтруктура));
	
КонецФункции // ОпределитьПартнераУКоневертируемогоСообщения(Сообщение)()


// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура СконвертироватьСообщения()
	
	//у нас добавились колонки "Архив", "ТребуемоеДействие", "ФайлXML"
	
	//Определимся со списком сообщений, который нужно конвертировать а какие просто поставить Архив-истина и ТребуемоеДействие-РаботаЗавершена
	СписокСообщений = ПолучитьСписокСообщенийДляКонвертации();
	
	Для Каждого Сообщение Из СписокСообщений Цикл 
		
		Сообщение = Сообщение.ПолучитьОбъект();
		ТипСообщения = Сообщение.ТипСообщения;
		Направление = Сообщение.Направление;
		Статус = Сообщение.Статус;
		
		Если Направление = "Исходящее" Тогда
			//не везде мог быть заполнен партнер
			Если НЕ ЗначениеЗаполнено(Сообщение.Партнер) Тогда
				Сообщение.Партнер = ОпределитьПартнераУКоневертируемогоСообщения(Сообщение);
			КонецЕсли;
			
			Если ТипСообщения = "ORDRSP" или ТипСообщения = "DESADV" Тогда
				
				Если Статус = "Отправлен" Тогда
					Сообщение.ТребуемоеДействие="ДождатьсяДоставки";
					//Сообщение.Статус="Отправлен";
				ИначеЕсли Статус = "Доставлен" Тогда
					Сообщение.Архив=Истина;
					Сообщение.ТребуемоеДействие="РаботаЗавершена";
					Сообщение.Статус="ИсходящийДоставлен";
				ИначеЕсли Статус = "ОжидаетОтправки" Тогда
					Сообщение.ТипСообщения = "#"+Сообщение.ТипСообщения; //удалим сообщение
				КонецЕсли;
				
			ИначеЕсли ТипСообщения = "INVOIC" Тогда
				
				Если Статус = "Отправлен" Тогда
					Сообщение.ТребуемоеДействие="ДождатьсяДоставки";
					//Сообщение.Статус="Отправлен";
				ИначеЕсли Статус = "Доставлен" Тогда
					Сообщение.Архив=Истина;
					Сообщение.ТребуемоеДействие="РаботаЗавершена";
					Сообщение.Статус="ИсходящийДоставлен";
				ИначеЕсли Статус = "ОжидаетОтправки" Тогда
					Сообщение.ТипСообщения = "#"+Сообщение.ТипСообщения; //удалим сообщение
					
				ИначеЕсли Статус = "Подписан и отправлен" Тогда
					Сообщение.Статус="ИсходящийПодписанВДиадок";
					Сообщение.ТребуемоеДействие="РаботаЗавершена";
				ИначеЕсли Статус = "Ожидает подписания" Тогда
					Сообщение.Статус="ИсходящийПодписанВДиадок";
					Сообщение.ТребуемоеДействие="РаботаЗавершена";
				КонецЕсли;
				
			ИначеЕсли ТипСообщения = "PORDERS" Тогда
				
			КонецЕсли;
			
		ИначеЕсли Направление = "Входящее" Тогда
			
			Если ТипСообщения = "ORDERS" Тогда
				Если Статус = "ВходящийОжидаетУстановкиСоответствий" Тогда
					Сообщение.ТребуемоеДействие="ПринятьСообщение";
				ИначеЕсли Статус = "Загружен" Тогда
					Сообщение.Архив=Истина;
					Сообщение.ТребуемоеДействие="РаботаЗавершена";
					Сообщение.ОтправленоУведомлениеОПрочтении=Истина;
				Иначе
					//неизвестный статус, оставим так как есть
				КонецЕсли;
				
			ИначеЕсли ТипСообщения = "RECADV" Тогда
				Если Статус = "ВходящийОжидаетУстановкиСоответствий" Тогда
					Сообщение.ТребуемоеДействие="ПринятьСообщение";
				ИначеЕсли Статус = "Загружен" Тогда
					//проверим статус
					Если ЗначениеЗаполнено(Сообщение.Документ) И МодульОбъекта().ПолучитьСтатусДокумента(Сообщение.Документ,"Приемка")="НакладнаяПринятЧастично" Тогда
						Сообщение.ТребуемоеДействие="ПринятьСообщение";  //не обработан
					Иначе
						Сообщение.Архив=Истина;
						Сообщение.ТребуемоеДействие="РаботаЗавершена";
						Сообщение.ОтправленоУведомлениеОПрочтении=Истина;
					КонецЕсли;
				Иначе
					//неизвестный статус, оставим так как есть
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Сообщение.Записать();
		
	КонецЦикла;
	
	//Проверить специфические сообщения типа ALCRPT и INVOIC  на предмет корректности их свойств в регистрах
	                   //проверить PORDERS
					   
КонецПроцедуры // СконвертироватьСообщения()

&НаСервере
Процедура УдалитьСтарыеСообщения()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтурEDI_Сообщения.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	НЕ КонтурEDI_Сообщения.ПометкаУдаления
	|	И НЕ ПОДСТРОКА(КонтурEDI_Сообщения.ТипСообщения, 1, 1) = ""#""
	|	И КонтурEDI_Сообщения.ТребуемоеДействие = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтурEDI_Сообщения.ДатаДокумента"
	);
	
	ВыборкаСообщений = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСообщений.Следующий() Цикл
		
		ОбъектСообщения = ВыборкаСообщений.Ссылка.ПолучитьОбъект();
		ОбъектСообщения.ТипСообщения = "#"+ОбъектСообщения.ТипСообщения;
		ОбъектСообщения.ПометкаУдаления = Истина;
		ОбъектСообщения.Записать();
		
	КонецЦикла;
	
КонецПроцедуры


// берем уникальные номера заказов с этой даты и вытряхиваем из спровочника все сообщения с таким номером заказа или номером документа если заказ
&НаСервере
Функция ПолучитьСписокСообщенийДляКонвертации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтурEDI_Сообщения.НомерДокумента КАК НомерЗаказа
	|ПОМЕСТИТЬ НомераЗаказов
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""
	|	И КонтурEDI_Сообщения.ДатаДокумента >= &ДатаПервогоЗаказа
	|	И НЕ КонтурEDI_Сообщения.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтурEDI_Сообщения.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомераЗаказов КАК НомераЗаказов
	|		ПО (КонтурEDI_Сообщения.НомерЗаказа = НомераЗаказов.НомерЗаказа
	|				ИЛИ КонтурEDI_Сообщения.НомерДокумента = НомераЗаказов.НомерЗаказа)
	|			И (КонтурEDI_Сообщения.ДатаДокумента >= ДОБАВИТЬКДАТЕ(&ДатаПервогоЗаказа, МЕСЯЦ, -1)
	|				ИЛИ КонтурEDI_Сообщения.ДатаЗаказа >= ДОБАВИТЬКДАТЕ(&ДатаПервогоЗаказа, МЕСЯЦ, -1))
	|			И (ПОДСТРОКА(КонтурEDI_Сообщения.ТипСообщения, 1, 1) <> ""#"")
	|			И (НЕ КонтурEDI_Сообщения.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ДатаПервогоЗаказа",?(ЗначениеЗаполнено(Р_ДатаС),Р_ДатаС,ТекущаяДата()-60*60*24*30 ));
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("ссылка");

КонецФункции // ПолучитьСписокСообщенийДляКонвертации()

// <Описание процедуры>
&НаСервере
Процедура СконвертироватьСоответствияНоменклатуры()
	
	//требуется проставить флаг основной номенклатуры если переходим совсем со старого модуля
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КОЛИЧЕСТВО(КонтурEDI_СоответствияТоваров.Номенклатура) КАК Основных
	               |ИЗ
	               |	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	               |ГДЕ
	               |	КонтурEDI_СоответствияТоваров.ОсновноеСоответствие = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() и Выборка.Основных>0 Тогда
		//есть какие-то основные
	иначе
		//нет основных. теперь основные все
		НаборЗаписейСоответствий = РегистрыСведений.КонтурEDI_СоответствияТоваров.СоздатьНаборЗаписей();
		НаборЗаписейСоответствий.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписейСоответствий Цикл
			ЗаписьНабора.ОсновноеСоответствие=истина;
		КонецЦикла;
        НаборЗаписейСоответствий.Записать(истина);
	КонецЕсли;	

КонецПроцедуры // СконвертироватьСоответствияНоменклатуры()

// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура СконвертироватьТочкиДоставки()
	
	//сущности те же  переложить связанный справочник 1 в 2 для УТ 11.
	Если МодульОбъекта().ИмяКонфигурации1С = "УФ_УТ" и МодульОбъекта().УТ11_1_Константа_ИспользоватьПартнеровИКонтрагентов()Тогда
		//в зависимости от значения функциональной опции
		//при раздельном учете партнеров и контрагентов точками доставки являются партнеры (по методологии 1С)
		МодульОбъекта().УстановитьКонстантуEDI("СвойСправочникТочекДоставки","Партнеры");
		УТ11_ПереставитьПартнераВоВторойСлот();
	КонецЕсли;
	
	//более по тд ничего не требуется
	
КонецПроцедуры // СконвертироватьТочкиДоставки()


// <Описание процедуры>
&НаСервере
Процедура СконвертироватьЮрЛицаСетей()

//нечего конвертирвать	

КонецПроцедуры // СконвертироватьЮрЛицаСетей()


// <Описание процедуры>
&НаСервере
Процедура СконвертироватьНастройкиСетей()
	Сети=ПолучитьСписокСетейНастроенныхВМодуле();
	Для Каждого ТекСеть Из Сети Цикл 
		//в справочнике остаются те же самые сущности!
		
		//старые свойства, которые остаются
		//DESADV
		//GLN_Партнера
		//INVOIC
		//ORDERS
		//ORDRSP
		//PORDERS
		//RECADV
		//RETANN
		
		//КодСети
		//ОбязательныйСФвDESADV
		//ОтправлятьALCRPT
		//ПартнерКакПоставщик
		//ПартнерКакТорговаяСеть
		
		
		//свойства которые надо сконвертировать в новые
		//1	
		МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(ТекСеть.Ссылка,"INVOICДоОбработкиRECADV", МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(ТекСеть.Ссылка, "РазрешитьОтправкуINVOICДоRECADV"));	
		МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(ТекСеть.Ссылка, "РазрешитьОтправкуINVOICДоRECADV");
		//2
		//3
		
		//новые свойства, которые надо добавить дефолтами
		МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(ТекСеть.Ссылка,"НеОтправлятьКодПоставщика",Ложь);		
		МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(ТекСеть.Ссылка,"ОбрезатьЛидирующиеНулиGTIN",Истина); 
		МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(ТекСеть.Ссылка,"ОбязательныйКодТовараТорговойСети",Ложь);
		МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(ТекСеть.Ссылка,"ОтправлятьALCRPTсINVOIC",Ложь); 	
		МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(ТекСеть.Ссылка,"ОтправлятьINVOICсDESADV",Ложь); 	
		МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(ТекСеть.Ссылка,"ОтправлятьДанныеОбУпаковках",Ложь); 	
		МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(ТекСеть.Ссылка,"СверятьВRECADVЦеныИСтавки",Истина); 	
		МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(ТекСеть.Ссылка,"СинхронизироватьТоварыТолькоПоGTIN",Ложь); 	
		МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(ТекСеть.Ссылка,"СтатусChangedДляИзмененнойДатыПоставкиORDRSP",Ложь); 	
		МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(ТекСеть.Ссылка,"СтатусChangedДляПовторныхDESADV",Ложь); 	
		МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(ТекСеть.Ссылка,"УстанавливатьСобственныеЦеныВЗаказах",Ложь); 	
		
	КонецЦикла;
	
	ПроверитьПеревестиЦепочкиНаФлажки();
КонецПроцедуры // СконвертироватьНастройкиСетей()

&НаСервере
Функция ПолучитьСписокСетейНастроенныхВМодуле()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеСправочники.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники
	|ГДЕ
	|	КонтурEDI_ДополнительныеСправочники.ИмяСправочника = ""Партнеры""
	|	И НЕ КонтурEDI_ДополнительныеСправочники.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	
	Возврат ТЗ;

КонецФункции // ПолучитьСписокСетей()


// <Описание процедуры>
&НаСервере
Процедура СконвертироватьОбщиеНастройки()
	
	//Конвертируемые константы
	МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(неопределено, "ЗаказИсточникКонтрагентаЮрЛицо");
	МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(неопределено, "ИспользоватьПодключаемыйМодуль");
	МодульОбъекта().УстановитьКонстантуEDI("ПодключаемыйМодульТип","Нет");
	
	МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(неопределено, "ЛогинFTP");
	
	МодульОбъекта().УстановитьКонстантуEDI("МыПоставщик",истина);
	
	МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(неопределено, "МыСеть");
	МодульОбъекта().УстановитьКонстантуEDI("МыТорговаяСеть",ложь);
	
	МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(неопределено, "ПарольFTP");
	
	МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(неопределено, "ПортFTP");
	
	МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(неопределено, "СерверFTP");
	
	МодульОбъекта().УстановитьКонстантуEDI("GLN_Основной",МодульОбъекта().ПолучитьКонстантуEDI("ОсновнойКодGLN"));
	МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(неопределено, "ОсновнойКодGLN");
	
	СоздаваемыйДокументБанковскийСчет = МодульОбъекта().ПолучитьКонстантуEDI("СоздаваемыйДокументБанковскийСчет");
	Если ЗначениеЗаполнено(СоздаваемыйДокументБанковскийСчет) Тогда
		МодульОбъекта().УстановитьКонстантуEDI("СоздаваемыйДокументРСчетВид",СокрЛП(СоздаваемыйДокументБанковскийСчет.Метаданные().Имя));
		МодульОбъекта().УстановитьКонстантуEDI("СоздаваемыйДокументРСчетGUID",СокрЛП(СоздаваемыйДокументБанковскийСчет.УникальныйИдентификатор()));
		МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(неопределено, "СоздаваемыйДокументБанковскийСчет");
	Иначе
		МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(неопределено, "СоздаваемыйДокументБанковскийСчет");
	КонецЕсли;
	
	Если МодульОбъекта().ПолучитьКонстантуEDI("СоздаваемыйДокументИзORDERS") = "РеализацияТоваровУслуг" Тогда 
		//без заказа - это может быть Реализация_СФ или Реализация в терминах нового модуля
		Если МодульОбъекта().ПолучитьКонстантуEDI("ОтправлятьINVOICизРеализации") = Истина Тогда
			//без СФ
			МодульОбъекта().УстановитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик","Реализация");
		Иначе 
			МодульОбъекта().УстановитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик","Реализация_СФ");
		КонецЕсли;
	Иначе
		//С заказом
		Если МодульОбъекта().ПолучитьКонстантуEDI("ОтправлятьINVOICизРеализации") = Истина Тогда
			//без СФ
			МодульОбъекта().УстановитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик",?(МодульОбъекта().ИмяКонфигурации1С="УФ_БП","Счет_Реализация","Заказ_Реализация"));
		Иначе 
			МодульОбъекта().УстановитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик",?(МодульОбъекта().ИмяКонфигурации1С="УФ_БП","Счет_Реализация_СФ","Заказ_Реализация_СФ"));
		КонецЕсли;
	КонецЕсли;
	
	//ФильтрОбменаПоТочкамДоставки //остается
	//ПодключаемыйМодульСсылка      //остаются
	//ПодключаемыйМодульПуть
	//МестонахождениеПодключаемогоМодуля
	
	
	МодульОбъекта().УстановитьКонстантуEDI("ОПНД_ORDRSP",МодульОбъекта().ПолучитьКонстантуEDI("НеПоказыватьПровестиЗаказ"));
	МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(неопределено, "НеПоказыватьПровестиЗаказ");
	
	//Добавляемые константы (их добавит стартовый помощник + автооткрывающиеся настройки модуля после стартового помощника) - нас устроят значения по умолчанию
	
	//GLN_Основной
	//INVOIC_Из_РТУ
	//АвтоматическаяПроверкаОбновлений
	//ВалидироватьВходящиеСообщения
	//ГрузополучательИзЮрФизЛицаТД
	//ДобавлятьВозвратВОснованияСчетФактуры
	//ИспользоватьКлассическийИнтерфейс
	//ИспользоватьКСФ
	//ИспользуетсяПрокси
	//ЛогинПрокси
	//ЛогинСлужебныйДиадок
	
	
	//НеБратьАдресаПартнераИз1С
	//НеБратьСвоиАдресаИз1С
	//НеЗагружатьСтатусныеСообщения
	//НеПоказыватьПомощникаПриЗапуске
	//НеПоказыватьПровестиЗаказ
	//НеПоказыватьСоздатьРеализацию
	//НеПоказыватьФормуВходящегоЗаказа
	//НеСоздаватьЗаказыБезСвоихТД
	//НеСоздаватьЗаказыБезЮрФизЛицТД
	//НомерВерсии
	//НПД_ЗаказПокупателя
	//НПД_РасходнаяНакладная
	//НПД_СчетФактура
	//НСД_РасходнаяНакладная
	//НСД_СчетФактура
	//ОбновлятьВесьСписокПриРаботеСЗаказами
	//ОПНД_DESADV
	//ОПНД_INVOIC
	//ОПНД_ORDRSP
	//ОПНД_PORDERS
	//ОтправлятьDESADVпоПроведеннымРеализациям
	//ОтправлятьВозвратнуюТаруВDESADV
	//ПарольПрокси
	//ПарольСлужебныйДиадок
	//ПассивныйРежим
	//ПодключаемыйМодульИмяОбработки
	//ПодключаемыйМодульПуть
	//ПодключаемыйМодульТип
	//Порт
	//ПортПрокси
	//ПроводитьЗагруженныеЗаказы
	//ПротоколОбмена_КонтурEDI
	//СвойСправочникТочекДоставки
	//Сервер
	//СерверПрокси
	
	//СоздаваемыйДокументРСчетGUID
	//СоздаваемыйДокументРСчетВид
	
	//СПНО_РасходнаяНакладная
	//СПНО_СчетФактура
	//СсылкаНаМодуль
	//ТипПрокси
	//УчетнаяЗаписьПоУмолчанию
	//ФильтрОбменаПоСетям
	//ФильтрОбменаПоТочкамДоставки
	//ШаблонЦепочкиДокументов_Покупатель
	//ШаблонЦепочкиДокументов_Поставщик	

КонецПроцедуры // СконвертироватьОбщиеНастройки()

Процедура УТ11_ПереставитьПартнераВоВторойСлот()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_ТочкиДоставки.Ссылка,
	|	КонтурEDI_ТочкиДоставки.СвязанныйСправочник1
	|ИЗ
	|	Справочник.КонтурEDI_ТочкиДоставки КАК КонтурEDI_ТочкиДоставки";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.СвязанныйСправочник1) Тогда 
			ОбъектТД=Выборка.Ссылка.ПолучитьОбъект();
			ОбъектТД.СвязанныйСправочник2 =Выборка.СвязанныйСправочник1;
			ОбъектТД.СвязанныйСправочник1 = Справочники.Контрагенты.ПустаяСсылка();
			ОбъектТД.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтменитьПереход(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

//блок для перевода со старых цепочек старых версий старого модуля
Процедура ПроверитьПеревестиЦепочкиНаФлажки() Экспорт
	Отказ = Ложь;
	 //найдем, есть ли в регистре старые свойства "цепочки"
	 НайденныеПартнерыСоСтарымиЦепочками=ПолучитьПартнеровСоСтарымиЦепочками();
	 Если НайденныеПартнерыСоСтарымиЦепочками.Количество()>0 Тогда 
		 Для Каждого СтрокаПартнераСоСтаройЦепочкой из НайденныеПартнерыСоСтарымиЦепочками Цикл
			 Если СтрокаПартнераСоСтаройЦепочкой.Свойство="ЦепочкаСообщений" Тогда
				 
				 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "PORDERS", МодульОбъекта().ПолучитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект,"СообщениеPORDERS"), Отказ);
				 
				 Если СтрокаПартнераСоСтаройЦепочкой.Значение="Полная" Тогда
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "ORDERS", истина, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "ORDRSP", истина, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "DESADV", истина, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "RECADV", истина, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "INVOIC", истина, Отказ);
				 ИначеЕсли СтрокаПартнераСоСтаройЦепочкой.Значение="RECADV+INVOIC" Тогда
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "ORDERS", ложь, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "ORDRSP", ложь, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "DESADV", ложь, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "RECADV", истина, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "INVOIC", истина, Отказ);
				 ИначеЕсли СтрокаПартнераСоСтаройЦепочкой.Значение="DESADV" Тогда
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "ORDERS", ложь, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "ORDRSP", ложь, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "DESADV", истина, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "RECADV", ложь, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "INVOIC", ложь, Отказ);
				 ИначеЕсли СтрокаПартнераСоСтаройЦепочкой.Значение="ORDERS+DESADV+RECADV+INVOIC" Тогда
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "ORDERS", истина, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "ORDRSP", ложь, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "DESADV", истина, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "RECADV", истина, Отказ);
					 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "INVOIC", истина, Отказ);
				 КонецЕсли;
			 иначе
				 //была только полная цепочка для ЦепочкаСообщенийСПоставщиком
				 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "PORDERS", ложь, Отказ);
				 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "ORDERS", истина, Отказ);
				 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "ORDRSP", истина, Отказ);
				 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "DESADV", истина, Отказ);
				 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "RECADV", истина, Отказ);
				 МодульОбъекта().УстановитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "INVOIC", истина, Отказ);
			 КонецЕсли;
			 
			 //выпилить понятие цепочка из регистра   и  свойства "СообщениеPORDERS"  - потеряли актуальность с версии  "5.03.039
			 МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "ЦепочкаСообщений",Ложь);
			 МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "ЦепочкаСообщенийСПоставщиком",Ложь);
			 МодульОбъекта().УдалитьЗначениеСвойстваОбъекта(СтрокаПартнераСоСтаройЦепочкой.Объект, "СообщениеPORDERS",Ложь);
		 КонецЦикла;
		 
	 КонецЕсли;
	 
КонецПроцедуры
Функция ПолучитьПартнеровСоСтарымиЦепочками()
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	КонтурEDI_ДополнительныеРеквизиты.Объект,
|	КонтурEDI_ДополнительныеРеквизиты.Свойство,
|	КонтурEDI_ДополнительныеРеквизиты.Значение
|ИЗ
|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
|ГДЕ
|	КонтурEDI_ДополнительныеРеквизиты.Свойство В(&НазванияСвойствЦепочек)";

СписокназванийЦепочек = новый СписокЗначений;
СписокназванийЦепочек.Добавить("ЦепочкаСообщений");
СписокназванийЦепочек.Добавить("ЦепочкаСообщенийСПоставщиком");

Запрос.УстановитьПараметр("НазванияСвойствЦепочек", СписокназванийЦепочек);

Результат = Запрос.Выполнить();

Возврат Результат.Выгрузить();

КонецФункции
//

