Перем СтруктураНастроек Экспорт;

//Основная процедура запуска выгрузки
//	РежимВыгрузки=0 - выгружаем все, РежимВыгрузки=1 - только факты, РежимВыгрузки=2 - только НСИ
Процедура Выгрузить(РежимВыгрузки=0,ИмяОбъекта=Неопределено,НачалоПериода='00010101',КонецПериода='00010101') Экспорт 

	ЛогОбмена = "";
	
	Если НачалоПериода='00010101' Тогда
		НачалоПериода=НачалоМесяца(ТекущаяДата());	
	КонецЕсли; 
	
	Если КонецПериода='00010101' Тогда
		//{20.03.2015 Островерхий заявка №37982 
		//КонецПериода=КонецМесяца(ТекущаяДата()); 
		КонецПериода=КонецГода(ТекущаяДата());
		//20.03.2015 Островерхий} 	
	КонецЕсли; 

	//Начало выгрузки
	ЛогОбмена = ЛогОбмена + "Начало выгрузки "+ТекущаяДата()+"; ";
	
	//Чтение макета выгрузки
	ПравилаВыгрузкиМакет = ЭтотОбъект.ПолучитьМакет("ПравилаВыгрузки");	
	КоличествоЭлементов = ПравилаВыгрузкиМакет.ВысотаТаблицы - СтруктураНастроек.ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	Для К = СтруктураНастроек.ПерваяСтрокаДанныхТабличногоДокумента По ПравилаВыгрузкиМакет.ВысотаТаблицы Цикл
		
		ТекстыЯчеек = Неопределено;
		ТекущаяСтрока = СтрокаМакетаВСтруктуру(ПравилаВыгрузкиМакет, К, ТекстыЯчеек);
		
		Если (НЕ ИмяОбъекта = Неопределено
			И НЕ ТекущаяСтрока.ИмяОбъекта = ИмяОбъекта)
			ИЛИ (ТекущаяСтрока.ЭтоНСИ И РежимВыгрузки=1)
			ИЛИ (НЕ ТекущаяСтрока.ЭтоНСИ И РежимВыгрузки=2) Тогда
		
			Продолжить;	
		
		КонецЕсли; 
		
		ОписаниеОшибки = "";
		ЗаписьВФайл(ТекущаяСтрока.ТекстЗапроса, НачалоПериода, КонецПериода, ТекущаяСтрока.ИмяОбъекта, ТекущаяСтрока.ТипМетаданных+"."+ТекущаяСтрока.ИмяОбъекта, ?(ТекущаяСтрока.ЭтоНСИ,СтруктураНастроек.КаталогНСИ,СтруктураНастроек.КаталогФактов),ОписаниеОшибки, ЛогОбмена);
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();	
		#КонецЕсли 
		
	КонецЦикла;
	
	//Окончание выгрузки
	ЛогОбмена = ЛогОбмена + "Окончание выгрузки "+ТекущаяДата();
	
	#Если Клиент Тогда
		Если НЕ ОписаниеОшибки = "" Тогда
			Сообщить(ОписаниеОшибки,СтатусСообщения.ОченьВажное);	
		КонецЕсли; 
	#КонецЕсли
	
	СохранитьИОтправитьУведомленияОбшибках(ОписаниеОшибки,ЛогОбмена);
	
КонецПроцедуры

Процедура СохранитьИОтправитьУведомленияОбшибках(ОписаниеОшибки,ЛогОбмена)

	Если НЕ ОписаниеОшибки = "" Тогда
		
		//Сохраним в журнал регистрации
		Если СтруктураНастроек.СохранятьВЖурналРегистрацииУведомленияОбОшибках Тогда
		
			ЗаписьЖурналаРегистрации("Выгрузка данных в кубы OLAP",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки, 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		КонецЕсли; 	
		
		Если СтруктураНастроек.ОтправлятьУведомленияОбОшибках И СтруктураНастроек.ПолучателиУведомленийОбОшибках.Количество() > 0 Тогда
			
			Для Каждого ЭлементМассива Из СтруктураНастроек.ПолучателиУведомленийОбОшибках Цикл
				
				СодержаниеПисьма = "Ошибки: "+ОписаниеОшибки+"<br>";
				СодержаниеПисьма = СодержаниеПисьма + "Лог: "+ЛогОбмена+"<br>";
                СодержаниеПисьма = СодержаниеПисьма + "Дата и время выгрузки: "+ТекущаяДата()+"<br>";
				
				ПРГ_Регламентый.ОправитьФайл("[NoReply] Ошибка при выгрузке данных к кубы OLAP", ЭлементМассива, СодержаниеПисьма, , , , Истина);
			
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры

//
//
Функция ПолучитьСписокОбъектов() Экспорт 

	СписокОбъктов = Новый СписокЗначений;
	
	ПравилаВыгрузкиМакет = ЭтотОбъект.ПолучитьМакет("ПравилаВыгрузки");	
	КоличествоЭлементов = ПравилаВыгрузкиМакет.ВысотаТаблицы - СтруктураНастроек.ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	Для К = СтруктураНастроек.ПерваяСтрокаДанныхТабличногоДокумента По ПравилаВыгрузкиМакет.ВысотаТаблицы Цикл
		
		ТекстыЯчеек = Неопределено;
		ТекущаяСтрока = СтрокаМакетаВСтруктуру(ПравилаВыгрузкиМакет, К, ТекстыЯчеек);
		
		СписокОбъктов.Добавить(ТекущаяСтрока.ИмяОбъекта);
		
	КонецЦикла;

	Возврат СписокОбъктов;
	
КонецФункции // ПолучитьСписокОбъектов()

//
//
Функция СформироватьСтруктуруНастроек() Экспорт 

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВерсияМодуля",ПолучитьВерсиюМодуляВыгрузки());
	СтруктураНастроек.Вставить("КаталогНСИ","\\COFS\Share\Mobile_Load\1C8_Реплика\Справочники\");
    СтруктураНастроек.Вставить("КаталогФактов","\\COFS\Share\Mobile_Load\1C8_Реплика\Факты\");
	//СтруктураНастроек.Вставить("КаталогНСИ","\\COFS\Share\Mobile_Load\1C8_Реплика\Справочники_тестирование\");
	//СтруктураНастроек.Вставить("КаталогФактов","\\COFS\Share\Mobile_Load\1C8_Реплика\Факты_тестирование\");  
	СтруктураНастроек.Вставить("РасширениеФайлов","csv");
	СтруктураНастроек.Вставить("РазделительДанных",";");         
	СтруктураНастроек.Вставить("ПерваяСтрокаДанныхТабличногоДокумента",2);
	СтруктураНастроек.Вставить("СохранятьВЖурналРегистрацииУведомленияОбОшибках",Истина);
	СтруктураНастроек.Вставить("ОтправлятьУведомленияОбОшибках",Истина);
    СтруктураНастроек.Вставить("ПолучателиУведомленийОбОшибках",СформироватьМассивПолучателейУведомленийОбОшибках());
	
	Возврат СтруктураНастроек;
	
КонецФункции // СформироватьСтруктуруНастроек()

//
//
Функция СформироватьМассивПолучателейУведомленийОбОшибках()

	МассивПолучателей = Новый Массив;
	
	СписокФизлиц = Справочники.ПРГ_Служебный.ПолучитьОбъектыИзГруппы(Справочники.ПРГ_Служебный.ПолучателиСообщенийОТехническихСбоях1С);
	
	Для Каждого Физлицо Из СписокФизлиц Цикл
		Если Не ЗначениеЗаполнено(Физлицо) Тогда
			Продолжить;
		КонецЕсли;
		МассивПолучателей.Добавить(УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Физлицо));
	КонецЦикла;
	
	Возврат МассивПолучателей;

КонецФункции // СформироватьМассивПолучателейУведомленийОбОшибках()

//
//
Функция ПолучитьВерсиюМодуляВыгрузки()

	//16.01.2015 - 1.0.1 - Первая версия.
	
	Возврат "1.0.1"; 

КонецФункции // ПолучитьВерсиюМодуляВыгрузки()

//
//
Процедура ЗаписьВФайл(пТекстЗапроса, НачалоПериода, КонецПериода, пТекСправочник, пТекИмяФайла, КаталогФайл, ОписаниеОшибки="",ЛогОбмена="")
	
	//пТекстДок = Новый ТекстовыйДокумент;
	Попытка
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(СтруктураНастроек.РасширениеФайлов);
		пТекстДок = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.ANSI);	
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при выволнении запроса к объекту - "+пТекСправочник+Символы.ПС;
		Возврат;
	КонецПопытки; 
	
	//Запись данных в файл
	пЗапрос = Новый Запрос;
	пЗапрос.Текст = пТекстЗапроса;
	пЗапрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	пЗапрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	
	Попытка
		Рез = пЗапрос.Выполнить().Выгрузить();	
	Исключение
		ОписаниеОшибки = ОписаниеОшибки + "Ошибка при выволнении запроса к объекту - "+пТекСправочник+Символы.ПС;
		Возврат;
	КонецПопытки; 
	
	Если ОписаниеОшибки = "" И Рез.Количество() > 0 Тогда
		
		ТекСч = 1;
		мКолВоРеквизитов = Рез.Колонки.Количество();
		
		ОписаниеТиповРезультатаВыборки = Новый ТаблицаЗначений;
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ИндексКолонки", Новый ОписаниеТипов("Число"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоЧисло", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоСтрока", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоДата", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоПеречисление", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоДокумент", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоСправочник", Новый ОписаниеТипов("Булево")); 
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоКолонка_ТипСправочника_Владелец", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Колонки.Добавить("ЭтоКолонка_ТипСправочника_", Новый ОписаниеТипов("Булево"));
		ОписаниеТиповРезультатаВыборки.Индексы.Добавить("ИндексКолонки");
		
		СчКолонок = 0;
		
		Для каждого ТекКолонка Из Рез.Колонки Цикл
		
			тНоваяСтрока = ОписаниеТиповРезультатаВыборки.Добавить();	
			тНоваяСтрока.ИндексКолонки = СчКолонок;
			тНоваяСтрока.ИмяКолонки = ТекКолонка.Имя;
			
			Для каждого ТекТип Из ТекКолонка.ТипЗначения.Типы() Цикл
				
				Если ТекТип = Тип("Число") Тогда
					тНоваяСтрока.ЭтоЧисло = Истина;
					Прервать;
				ИначеЕсли ТекТип = Тип("Дата") Тогда
					тНоваяСтрока.ЭтоДата = Истина;
					Прервать;
				ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
					тНоваяСтрока.ЭтоПеречисление = Истина;
					Прервать;
				ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
					тНоваяСтрока.ЭтоДокумент = Истина;
					Прервать;
				ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
					тНоваяСтрока.ЭтоСправочник = Истина;
					Прервать;
				ИначеЕсли ТекТип = Тип("Строка") Тогда
					тНоваяСтрока.ЭтоСтрока = Истина;
					Прервать;
				КонецЕсли; 
				
				Если ТекКолонка.Имя = "ТипСправочника_Владелец" Тогда
					тНоваяСтрока.ЭтоКолонка_ТипСправочника_Владелец = Истина;
				ИначеЕсли Найти(ТекКолонка.Имя, "ТипСправочника_") > 0 Тогда
					тНоваяСтрока.ЭтоКолонка_ТипСправочника_ = Истина;
				КонецЕсли;
				
			КонецЦикла; 
			
			СчКолонок = СчКолонок+1;
			
		КонецЦикла; 
		
		Для Каждого ТекСтрока Из Рез Цикл
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();					 
			#КонецЕсли				
			
			мТекст = "";
			мРеквизитыСправочника = "";
			Для счКолонка = 0 По мКолВоРеквизитов - 1 Цикл				
				
				ОписаниеТиповТекКолонки = ОписаниеТиповРезультатаВыборки[счКолонка];
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();					 
				#КонецЕсли
				
				Если ТекСч = 1 Тогда
					
					мРеквизитыСправочника = мРеквизитыСправочника + ?(Рез.Колонки[счКолонка].Имя="Ссылка","УИД",Рез.Колонки[счКолонка].Имя)+СтруктураНастроек.РазделительДанных;
					
				КонецЕсли; 
				
				//Если ТипЗнч(ТекСтрока[счКолонка]) = Тип("Число") Тогда
				Если ОписаниеТиповТекКолонки.ЭтоЧисло Тогда	
					
					//мТекст = СокрЛП(мТекст) + Формат(ТекСтрока[счКолонка],"ЧГ=0") + СтруктураНастроек.РазделительДанных; 
					Если ТекСтрока[счКолонка] = NULL Тогда
						тФорматированноеЧисло = NULL;
					ИначеЕсли ТекСтрока[счКолонка] = Неопределено Тогда
						тФорматированноеЧисло = "0";
					Иначе	
					    тФорматированноеЧисло = ?(ТекСтрока[счКолонка] > -1000 И ТекСтрока[счКолонка] < 1000, ТекСтрока[счКолонка],СтрЗаменить(ТекСтрока[счКолонка],Символы.НПП,""));
					КонецЕсли; 
					
					мТекст = СокрЛП(мТекст) + тФорматированноеЧисло + СтруктураНастроек.РазделительДанных;
					
				//ИначеЕсли ТипЗнч(ТекСтрока[счКолонка]) = Тип("Дата") Тогда
				ИначеЕсли ОписаниеТиповТекКолонки.ЭтоДата Тогда	
					
					мТекст = СокрЛП(мТекст) + Формат(ТекСтрока[счКолонка],"ДЛФ=Д") + СтруктураНастроек.РазделительДанных; 
					
				//ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ТекСтрока[счКолонка])) Тогда
				ИначеЕсли ОписаниеТиповТекКолонки.ЭтоПеречисление Тогда
					
					мТекст = СокрЛП(мТекст) + СокрЛП(ТекСтрока[счКолонка]) + СтруктураНастроек.РазделительДанных;
					
				//ИначеЕсли НЕ ЭтоПримитивныйТип(ТипЗнч(ТекСтрока[счКолонка])) Тогда
				ИначеЕсли ОписаниеТиповТекКолонки.ЭтоСправочник ИЛИ ОписаниеТиповТекКолонки.ЭтоДокумент Тогда	
					
					Попытка
					
						Если ЗначениеЗаполнено(ТекСтрока[счКолонка]) Тогда
							мТекст = СокрЛП(мТекст) + СокрЛП(ТекСтрока[счКолонка].УникальныйИдентификатор()) + СтруктураНастроек.РазделительДанных;
						Иначе
							мТекст = СокрЛП(мТекст) + СтруктураНастроек.РазделительДанных;
						КонецЕсли;
					
					Исключение
						
						мТекст = СокрЛП(мТекст) + СокрЛП(ТекСтрока[счКолонка]) + СтруктураНастроек.РазделительДанных;	
						
					КонецПопытки; 
					
				//ИначеЕсли Рез.Колонки[счКолонка].Имя = "ТипСправочника_Владелец" Тогда
				ИначеЕсли ОписаниеТиповТекКолонки.ЭтоКолонка_ТипСправочника_Владелец Тогда	
				
					мИмяТипаСсылки = ВернемИмяРеквизитаПоМетаданным(ТипЗнч(ТекСтрока[счКолонка-1]));
					мТекст = СокрЛП(мТекст) + мИмяТипаСсылки + СтруктураНастроек.РазделительДанных;
					
				//ИначеЕсли Найти(Рез.Колонки[счКолонка].Имя, "ТипСправочника_") > 0 Тогда
				ИначеЕсли ОписаниеТиповТекКолонки.ЭтоКолонка_ТипСправочника_ Тогда
				
					мИмяТипаСсылки = ВернемИмяРеквизитаПоМетаданным(ТипЗнч(ТекСтрока[счКолонка-1]));
					мТекст = СокрЛП(мТекст) + мИмяТипаСсылки + СтруктураНастроек.РазделительДанных;		
					
				Иначе
					
					мТекст = СокрЛП(мТекст) + ДополнительнаяОбработкаДанных(ТекСтрока[счКолонка]) + СтруктураНастроек.РазделительДанных;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТекСч = 1 Тогда
				//пТекстДок.ДобавитьСтроку(мРеквизитыСправочника);
				Попытка
					пТекстДок.ЗаписатьСтроку(мРеквизитыСправочника);
				Исключение
					ОписаниеОшибки = ОписаниеОшибки + "Ошибка при записи файла объекта - "+пТекСправочник+Символы.ПС;
					Возврат;
				КонецПопытки; 
			КонецЕсли;
			
			//пТекстДок.ДобавитьСтроку(мТекст);
			Попытка
				пТекстДок.ЗаписатьСтроку(мТекст);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки + "Ошибка при записи файла объекта - "+пТекСправочник+Символы.ПС;
				Возврат;
			КонецПопытки;
			ТекСч = ТекСч + 1;
			
		КонецЦикла;
		
		Попытка
			//ЗаписатьФайл(пТекстДок, КаталогФайл, пТекИмяФайла);
			пТекстДок.Закрыть();
			КопироватьФайл(ИмяВременногоФайла, КаталогФайл + СокрЛП(?(Лев(пТекИмяФайла,1)=".",Прав(пТекИмяФайла,СтрДлина(пТекИмяФайла)-1),пТекИмяФайла)) + "."+СтруктураНастроек.РасширениеФайлов);
			УдалитьФайлы(ИмяВременногоФайла); 
			#Если Клиент Тогда
				Сообщить("Выгружено '"+пТекСправочник+"' "+Рез.Количество()+" элемента(ов)",СтатусСообщения.Информация);
				ЛогОбмена = ЛогОбмена + "Выгружено '"+пТекСправочник+"' "+Рез.Количество()+" элемента(ов)";
			#КонецЕсли
		Исключение
			ОписаниеОшибки = ОписаниеОшибки + "Ошибка при записи файла объекта - "+пТекСправочник+Символы.ПС;
			Возврат;
		КонецПопытки;  
	
	КонецЕсли; 
	
КонецПроцедуры

//
//
Функция ЗаписатьФайл(фТекстДок, фКаталогФайл, фИмяФайла)
	
	фТекстДок.Записать(фКаталогФайл + СокрЛП(?(Лев(фИмяФайла,1)=".",Прав(фИмяФайла,СтрДлина(фИмяФайла)-1),фИмяФайла)) + "."+СтруктураНастроек.РасширениеФайлов, КодировкаТекста.ANSI);
	
	Возврат Истина;
	
КонецФункции

//
//
Функция ВернемИмяРеквизитаПоМетаданным(ТипРеквизита)
	
    Если ЭтоПримитивныйТип(ТипРеквизита) Тогда
		Возврат "";	
	КонецЕсли; 
	
	мТипСсылки = Новый(ТипРеквизита);
	мИмяТипаСсылки = мТипСсылки.Метаданные().Имя;

    Возврат мИмяТипаСсылки;
	
КонецФункции // ()

Функция ЭтоПримитивныйТип(ТипРеквизита)

	Если ТипРеквизита = Тип("Строка") 
		ИЛИ ТипРеквизита = Тип("Неопределено")
		ИЛИ ТипРеквизита = Тип("Число")
		ИЛИ ТипРеквизита = Тип("Дата")
		ИЛИ ТипРеквизита = Тип("Булево")
		ИЛИ ТипРеквизита = Тип("NULL") Тогда
		
		Возврат Истина;	
		
	КонецЕсли;
	
    Возврат Ложь;
	
КонецФункции // ЭтоПримитивныйТип(ТипРеквизита)

//
//
Функция ДополнительнаяОбработкаДанных(мСтрока)

	тСтрока = СокрЛП(мСтрока);
	тСтрока = СокрЛП(СтрЗаменить(тСтрока, ";", ","));
	тСтрока = СокрЛП(СтрЗаменить(тСтрока, Символы.ПС, ", "));
	//тСтрока = СтрЗаменить(тСтрока, Символы.ВТаб, "");
	//тСтрока = СтрЗаменить(тСтрока, Символы.ВК, "");
	//тСтрока = СтрЗаменить(тСтрока, Символы.НПП, "");
	//тСтрока = СтрЗаменить(тСтрока, Символы.ПФ, "");
	//тСтрока = СтрЗаменить(тСтрока, Символы.Таб, "");
	//тСтрока = СтрЗаменить(тСтрока, Символы., "");
    Возврат тСтрока;
	
КонецФункции

//
//
Функция СтрокаМакетаВСтруктуру(ТабличныйДокумент, НомерСтроки, ТекстыЯчеек = Неопределено, КоличествоОшибок = 0)
	
	ТекстыЯчеек = Новый Массив;
	ТекстыЯчеек.Добавить(Неопределено);
	Для к = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		ТекстыЯчеек.Добавить(СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(К,"ЧГ=")).Текст));
	КонецЦикла;
	
	ТекущаяСтрока     = Новый Структура("ТипМетаданных,ИмяОбъекта,ТекстЗапроса,ЭтоНСИ",ТекстыЯчеек[1],ТекстыЯчеек[2],ТекстыЯчеек[3],Булево(Число(ТекстыЯчеек[4])));
	
	Возврат ТекущаяСтрока;
	
КонецФункции


СтруктураНастроек = СформироватьСтруктуруНастроек();
 