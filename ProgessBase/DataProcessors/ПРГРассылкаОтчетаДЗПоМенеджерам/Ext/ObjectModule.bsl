
Функция ПолучитьПросроченнуюДебеторскуюЗадолженность_Таблица(СписокКонтрагентов, Дата, ВВалютеВзаиморасчетов = Ложь, ДатаНачала = Неопределено) Экспорт
	
	Перем ТаблИтого;
	ТаблИтого = Новый ТаблицаЗначений;
	ТаблИтого.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	//++ Spl_Апроф 18.11.2014 (k.russkih@a-prof.ru)
	ТаблИтого.Колонки.Добавить("НомерДокумента",Новый ОписаниеТипов("Строка"));
	//ТаблИтого.Колонки.Добавить("АдресПоставки", Новый ОписаниеТипов("СправочникСсылка.АдресаПоставки"));
	//-- Spl_Апроф
	ТаблИтого.Колонки.Добавить("ДатаОплаты",Новый ОписаниеТипов("Дата"));
	ТаблИтого.Колонки.Добавить("Регистратор",Документы.ТипВсеСсылки());
	ТаблИтого.Колонки.Добавить("ДнейПросрочено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	ТаблИтого.Колонки.Добавить("Организация");
	ТаблИтого.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблИтого.Колонки.Добавить("ДоговорКонтрагента",Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблИтого.Колонки.Добавить("Просрочено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	ТаблИтого.Колонки.Добавить("НачОст", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Приход", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Расход", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("КонОст", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Погашено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
			
	ПостроительЗапроса = Новый ПостроительЗапроса;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА 0
	               |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |		КОНЕЦ) КАК ПриходКон,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА 0
	               |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |		КОНЕЦ) КАК РасходКон,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ПриходНач,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК РасходНач,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Приход,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Расход
	               |ПОМЕСТИТЬ ТаблКонтр
	               |{ВЫБРАТЬ
	               |	Организация.*,
	               |	ДоговорКонтрагента.*,
	               |	Контрагент.*}
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	               |ГДЕ
	               |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	               |	И ВзаиморасчетыСКонтрагентами.Активность
	               |	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
	               |	И ВзаиморасчетыСКонтрагентами.Контрагент В(&Контрагент)
	               |{ГДЕ
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.*,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент.*,
	               |	ВзаиморасчетыСКонтрагентами.Организация.*,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВзаиморасчетыСКонтрагентами.Организация,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент
	               |
	               |ИМЕЮЩИЕ
	               |	(СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА 0
	               |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						КОНЕЦ
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |							ИНАЧЕ 0
	               |						КОНЕЦ
	               |			КОНЕЦ - ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА 0
	               |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						КОНЕЦ
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |							ИНАЧЕ 0
	               |						КОНЕЦ
	               |			КОНЕЦ) <> 0
	               |		ИЛИ СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ - ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) <> 0
	               |		ИЛИ СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) <> 0
	               |		ИЛИ СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) <> 0)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Организация,
	               |	ДоговорКонтрагента,
	               |	Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВЫБОР
	               |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	               |	КОНЕЦ КАК Дата,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	               |	КОНЕЦ КАК Регистратор,
				   //|	ВЫБОР
				   //|		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				   //|			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
				   //|		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
				   //|			ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
				   //|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
				   //|	КОНЕЦ КАК ДатаОплаты,
				   |	ВЫБОР
				   |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				   |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
				   |			ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
				   |			ТОГДА КорректировкаРеализации.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
				   |			ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
				   |			ТОГДА КорректировкаДолга.АП_ДатаОплаты
				   |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
				   |	КОНЕЦ КАК ДатаОплаты,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Приход,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Расход,
	               |	Минимум(ТаблКонтр.ПриходНач) КАК ПриходНач,
	               |	Минимум(ТаблКонтр.РасходНач) КАК РасходНач,
	               |	Минимум(ТаблКонтр.ПриходКон) КАК ПриходКон,
	               |	Минимум(ТаблКонтр.РасходКон) КАК РасходКон,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения.Номер
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор.Номер
	               |	КОНЕЦ КАК НомерДокумента,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор.Грузополучатель
	               |	КОНЕЦ КАК АдресПоставки
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				   |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = РеализацияТоваровУслуг.Ссылка
				   |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
				   |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаРеализации.Ссылка
				   |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
				   |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаЗаписейРегистров.Ссылка
				   |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаДолга КАК КорректировкаДолга
				   |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаДолга.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
	               |		ПО ВзаиморасчетыСКонтрагентами.Организация = ТаблКонтр.Организация
	               |			И ВзаиморасчетыСКонтрагентами.Контрагент = ТаблКонтр.Контрагент
	               |			И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
	               |ГДЕ
	               |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	               |	И ВзаиморасчетыСКонтрагентами.Активность
	               |	И ВзаиморасчетыСКонтрагентами.Контрагент В(&Контрагент)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВзаиморасчетыСКонтрагентами.Организация,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	               |	ВЫБОР
	               |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	               |	КОНЕЦ,
				   |	ВЫБОР
				   |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				   |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
				   |			ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
				   |			ТОГДА КорректировкаРеализации.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
				   |			ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
				   |			ТОГДА КорректировкаДолга.АП_ДатаОплаты
				   |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
				   |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения.Номер
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор.Номер
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор.Грузополучатель
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организация,
	               |	Контрагент,
	               |	ДоговорКонтрагента,
				   |	Дата,
	               |	ДатаОплаты,
	               |	Регистратор";
				   
				   
	Если ВВалютеВзаиморасчетов Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаВзаиморасчетов");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаУпр");
	КонецЕсли;
			   
	Если ДатаНачала = Неопределено Тогда
		Дата1 = НачалоГода(ТекущаяДата());
	Иначе
		Дата1 = НачалоДня(ДатаНачала);
	КонецЕсли;
	Дата2 = КонецДня(Дата);
	
	ПостроительЗапроса.Параметры.Вставить("Дата1", Дата1);
	ПостроительЗапроса.Параметры.Вставить("Дата2", Дата2);
	ПостроительЗапроса.Параметры.Вставить("Контрагент", СписокКонтрагентов);
	//начало изменений
	//ПостроительЗапроса.Параметры.Вставить("ПустойДокумент", Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков = Новый Массив;
	МассивДоков .Добавить(Неопределено);
	МассивДоков .Добавить(Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков .Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	МассивДоков .Добавить(Документы.ВводНачальныхОстатковПоВзаиморасчетам.ПустаяСсылка());
	ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",МассивДоков );
	//конец изменений 
	
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ПостроительЗапроса.Параметры.Вставить("ВидДоговора",МассивВидовДоговоров);
	
	ТекОрганизация 		   = Неопределено;
	ТекКонтрагент  		   = Неопределено;
	ТекДоговорКонтрагента  = Неопределено;
	ТекВалюта			   = Неопределено;
	ТекСтрока			   =  Неопределено;
	ТекВремя               = ТекущаяДата();
	
	ТаблИтоговаяРазвернуто = Истина;
	ВыводитьВремя = Ложь;
	ДатаДляРасчетаПроср    = НачалоДня(Дата2);
	
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.Выполнить();	
	РезЗапроса	 = ПостроительЗапроса.Результат;
	ВыборкаДетальная 	   = РезЗапроса.Выбрать();
	
	Пока ВыборкаДетальная.Следующий() Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		ИзмГруппировка = Ложь;
		Если ТекОрганизация <>ВыборкаДетальная.Организация Тогда
			ТекОрганизация  = ВыборкаДетальная.Организация;
			ИзмГруппировка = Истина;
		КонецЕсли;	
		
		Если ТекКонтрагент <>ВыборкаДетальная.Контрагент Тогда
			ТекКонтрагент  = ВыборкаДетальная.Контрагент;
			ИзмГруппировка = Истина;
		КонецЕсли;	
		
		Если ТекДоговорКонтрагента <> ВыборкаДетальная.ДоговорКонтрагента Тогда
			ТекДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
			ИзмГруппировка 		 = Истина;
		КонецЕсли;	
		
		//Если ТекВалюта <> ВыборкаДетальная.Валюта Тогда
		//	ТекВалюта       = ВыборкаДетальная.Валюта;
		//	ИзмГруппировка = Истина;
		//КонецЕсли;	
		
		Если ИзмГруппировка Тогда
			ИтогКонОст 	   	   = ВыборкаДетальная.ПриходКон - ВыборкаДетальная.РасходКон;
			
			ИтогоРасход  	   = ВыборкаДетальная.РасходКон;
			ИтогоПриход  	   = ВыборкаДетальная.ПриходКон;
			
			ИтогоРасходНач   = ВыборкаДетальная.РасходНач;
			ИтогоПриходНач   = ВыборкаДетальная.ПриходНач;
			
			ИтогНачОст 		   = ИтогоПриходНач - ИтогоРасходНач;
			
			ЗнакКонОст  	   = ?(ИтогКонОст > 0,1,-1);
			ЗнакНачОст  	   = ?(ИтогНачОст > 0,1,-1);
			ИзмГруппировка 	= Ложь;
			Если Не ТаблИтоговаяРазвернуто Тогда
				ТекСтрока = ТаблИтого.Добавить();
			КонецЕсли;
		КонецЕсли; 
		
		КонОст = 0;
		НачОст = 0;
		Приход = 0;
		Расход = 0;
		
		Если ЗнакКонОст = 1 Тогда
			КонОст	      = Макс(ВыборкаДетальная.Приход - ИтогоРасход,0);
			ИтогоРасход    = Макс(ИтогоРасход - ВыборкаДетальная.Приход,0);
		Иначе // знак -1
			КонОст	      = Макс(ВыборкаДетальная.Расход - ИтогоПриход,0)*-1;
			ИтогоПриход    = Макс(ИтогоПриход 			 - ВыборкаДетальная.Расход,0);
		КонецЕсли;	  
		
		Если ЗнакНачОст = 1 Тогда
			НачОст 	   	   = Макс(ВыборкаДетальная.Приход - ИтогоРасходНач,0);
			ИтогоРасходНач = Макс(ИтогоРасходНач - ВыборкаДетальная.Приход,0);
		Иначе	
			НачОст 	   	   = Макс(ВыборкаДетальная.Расход - ИтогоПриходНач,0)*-1;
			ИтогоПриходНач = Макс(ИтогоПриходНач 		  - ВыборкаДетальная.Расход,0);
		КонецЕсли;
		
		Если ВыборкаДетальная.Дата < Дата1 Тогда
			Приход = 0;
			Расход = 0;
		ИначеЕсли ВыборкаДетальная.Дата <= Дата2 Тогда
			Приход = ВыборкаДетальная.Приход;
			Расход = ВыборкаДетальная.Расход;
			НачОст = 0;
		КонецЕсли;	   
		
		Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
			продолжить;
		КонецЕсли;  
		
		Погашено   = 0;
		ДатаОплаты  = '00010101';
		Если Приход > 0 или НачОст > 0 Тогда
			ДатаОплаты   =  ВыборкаДетальная.ДатаОплаты;
			Если ДатаОплаты  = '00010101' Тогда
				ДатаОплаты = ВыборкаДетальная.Дата;
			КонецЕсли;	  
			Погашено = НачОст+Приход-КонОст;
		КонецЕсли; 
		
		ДнейПросрочено = 0;
		Если ДатаОплаты<>'00010101' и ДатаОплаты < ДатаДляРасчетаПроср и КонОст >0 Тогда
			ДнейПросрочено = (ДатаДляРасчетаПроср-НачалоДня(ДатаОплаты))/(3600*24);
		КонецЕсли; 
		
		Если ТаблИтоговаяРазвернуто Тогда
			НоваяСтрока 	   				  = ТаблИтого.Добавить();
			НоваяСтрока.Дата 				  = ВыборкаДетальная.Дата;
			НоваяСтрока.ДатаОплаты		  	  = ДатаОплаты; //?(Приход>0 или НачОст>0,ВыборкаДетальная.ДатаОплаты,'00010101');
			НоваяСтрока.Регистратор 		  = ВыборкаДетальная.Регистратор;
			НоваяСтрока.ДнейПросрочено	  	  = ДнейПросрочено;
			//++ Spl_Апроф 18.11.2014 (k.russkih@a-prof.ru)
			НоваяСтрока.НомерДокумента        = ВыборкаДетальная.НомерДокумента;
			//НоваяСтрока.АдресПоставки         = ВыборкаДетальная.АдресПоставки;
			//-- Spl_Апроф
		Иначе
			НоваяСтрока 					  = ТекСтрока;
		КонецЕсли;
		
		НоваяСтрока.Организация		  = ВыборкаДетальная.Организация;
		НоваяСтрока.Контрагент		  = ВыборкаДетальная.Контрагент;
		НоваяСтрока.ДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
		
		Если ДнейПросрочено > 0 Тогда
			НоваяСтрока.Просрочено			  = НоваяСтрока.Просрочено + КонОст;
		КонецЕсли;	  
		
		НоваяСтрока.НачОст			  = НоваяСтрока.НачОст + НачОст;
		НоваяСтрока.Приход			  = НоваяСтрока.Приход + Приход;
		НоваяСтрока.Расход			  = НоваяСтрока.Расход + Расход;
		НоваяСтрока.КонОст			  = НоваяСтрока.КонОст + КонОст;
		НоваяСтрока.Погашено 		  = НоваяСтрока.Погашено + Погашено;
		
	КонецЦикла; 
	
	Возврат ТаблИтого;
	
КонецФункции

Процедура СформироватьОтчеты(НаДату,ВременныйКаталог)

	МассивКонтрагентовДляРасчетаЗадолженности = СформироватьМассивКонтрагентовДляРасчетаЗадолженности(НаДату);	
	 //начало изменений Ожиганов 25.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	//ТаблицаЗадолженности = ПолучитьПросроченнуюДебеторскуюЗадолженность_Таблица(МассивКонтрагентовДляРасчетаЗадолженности,НаДату,Истина,НачалоДня(ТекущаяДата()));
	МаксДнейПросрочено =  0;
	//ТаблицаЗадолженности = ПКК_КредитныйКонтроль.ПолучитьПросроченнуюДебеторскуюЗадолженность_Таблица(МассивКонтрагентовДляРасчетаЗадолженности,НаДату,Истина,НачалоДня(ТекущаяДата()),МаксДнейОтсрочки);
	ТаблицаЗадолженности = ПКК_КредитныйКонтроль.ПолучитьТаблицуПросроченнойЗадолженности(МассивКонтрагентовДляРасчетаЗадолженности, Истина,НачалоДня(ТекущаяДата()),НаДату,МаксДнейПросрочено);
	//конец изменений 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗадолженности.Контрагент,
		|	ТаблицаЗадолженности.Дата,
		|	ТаблицаЗадолженности.ДатаОплаты,
		|	ТаблицаЗадолженности.ДнейПросрочено,
		|	ТаблицаЗадолженности.ДоговорКонтрагента,
		|	ТаблицаЗадолженности.Просрочено,
		|	ТаблицаЗадолженности.Регистратор,
		|	ТаблицаЗадолженности.КонОст,
		|	ТаблицаЗадолженности.КонОст - ТаблицаЗадолженности.Просрочено КАК НеПросрочено,
		|	ТаблицаЗадолженности.Погашено
		|ПОМЕСТИТЬ втТаблицаЗадолженности
		|ИЗ
		|	&ТаблицаЗадолженности КАК ТаблицаЗадолженности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	спрКонтрагенты.Дивизион,
		|	втТаблицаЗадолженности.Дата,
		|	втТаблицаЗадолженности.ДатаОплаты,
		|	втТаблицаЗадолженности.ДнейПросрочено,
		|	втТаблицаЗадолженности.ДоговорКонтрагента,
		|	втТаблицаЗадолженности.Просрочено,
		|	втТаблицаЗадолженности.Регистратор,
		|	втТаблицаЗадолженности.Контрагент,
		|	спрКонтрагенты.ОсновнойМенеджерПокупателя,
		|	КонтактнаяИнформацияДивизион.Представление КАК EmailДиректораДивизиона,
		|	КонтактнаяИнформацияТорговаяКоманда.Представление КАК EmailРуководителяТорговойКоманды,
		|	ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних.ДопустимаяСуммаЗадолженности КАК КредитныйЛимит,
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(втТаблицаЗадолженности.Дата, втТаблицаЗадолженности.ДатаОплаты, ДЕНЬ) < 0
		|			ТОГДА 0
		|		ИНАЧЕ РАЗНОСТЬДАТ(втТаблицаЗадолженности.Дата, втТаблицаЗадолженности.ДатаОплаты, ДЕНЬ)
		|	КОНЕЦ КАК ДнейОтсрочки,
		|	ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних.ПричинаБлокировкиОтгрузки КАК ПричинаБлокировки,
		|	ПКК_СтатусыДЗСрезПоследних.СтатусДЗ,
		|	спрДоговорыКонтрагентов.ВалютаВзаиморасчетов,
		|	втТаблицаЗадолженности.КонОст,
		|	втТаблицаЗадолженности.НеПросрочено,
		|	втТаблицаЗадолженности.Погашено,
		|	спрКонтрагенты.НСИ_ТорговаяКоманда КАК ТорговаяКоманда,
		|	спрКонтрагенты.НСИ_ТорговаяКоманда.Ответственный.Физлицо КАК РуководительТорговойКоманды
		|ПОМЕСТИТЬ втТаблицаЗадолженностиРасширенная
		|ИЗ
		|	втТаблицаЗадолженности КАК втТаблицаЗадолженности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК спрКонтрагенты
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияДивизион
		|			ПО (КонтактнаяИнформацияДивизион.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|				И (КонтактнаяИнформацияДивизион.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|				И спрКонтрагенты.Дивизион.Ответственный.Физлицо = КонтактнаяИнформацияДивизион.Объект
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежа.СрезПоследних КАК ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних
		|			ПО спрКонтрагенты.Ссылка = ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних.Объект
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_ПричиныБлокировкиОтгрузки.СрезПоследних КАК ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних
		|			ПО спрКонтрагенты.Ссылка = ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних.Контрагент
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_СтатусыДЗ.СрезПоследних КАК ПКК_СтатусыДЗСрезПоследних
		|			ПО спрКонтрагенты.Ссылка = ПКК_СтатусыДЗСрезПоследних.Контрагент
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияТорговаяКоманда
		|			ПО (КонтактнаяИнформацияТорговаяКоманда.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|				И (КонтактнаяИнформацияТорговаяКоманда.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|				И спрКонтрагенты.НСИ_ТорговаяКоманда.Ответственный.Физлицо = КонтактнаяИнформацияТорговаяКоманда.Объект
		|		ПО втТаблицаЗадолженности.Контрагент = спрКонтрагенты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК спрДоговорыКонтрагентов
		|		ПО втТаблицаЗадолженности.ДоговорКонтрагента = спрДоговорыКонтрагентов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаЗадолженностиРасширенная.Дивизион КАК Дивизион,
		|	втТаблицаЗадолженностиРасширенная.Дата,
		|	втТаблицаЗадолженностиРасширенная.ДатаОплаты,
		|	втТаблицаЗадолженностиРасширенная.ДнейПросрочено КАК ДнейПросрочено,
		|	втТаблицаЗадолженностиРасширенная.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	втТаблицаЗадолженностиРасширенная.Просрочено КАК Просрочено,
		|	втТаблицаЗадолженностиРасширенная.Регистратор,
		|	втТаблицаЗадолженностиРасширенная.Контрагент КАК Контрагент,
		|	втТаблицаЗадолженностиРасширенная.ОсновнойМенеджерПокупателя,
		|	ВЫРАЗИТЬ(втТаблицаЗадолженностиРасширенная.EmailДиректораДивизиона КАК СТРОКА(255)) КАК EmailДиректораДивизиона,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.EmailОсновногоМенеджера КАК СТРОКА(255)) КАК EmailОсновногоМенеджера,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.EmailРуководителяМенеджера КАК СТРОКА(255)) КАК EmailРуководителяМенеджера,
		|	втТаблицаЗадолженностиРасширенная.ПричинаБлокировки,
		|	втТаблицаЗадолженностиРасширенная.СтатусДЗ,
		|	втТаблицаЗадолженностиРасширенная.ДнейОтсрочки КАК ДнейОтсрочки,
		|	втТаблицаЗадолженностиРасширенная.КредитныйЛимит,
		|	втТаблицаЗадолженностиРасширенная.ВалютаВзаиморасчетов,
		|	ВложенныйЗапрос.СотрудникФизлицо КАК СотрудникФизлицо,
		|	ВложенныйЗапрос.ФизическоеЛицо КАК ФизическоеЛицо,
		|	втТаблицаЗадолженностиРасширенная.КонОст КАК КонОст,
		|	втТаблицаЗадолженностиРасширенная.НеПросрочено КАК НеПросрочено,
		|	ВЫБОР
		|		КОГДА втТаблицаЗадолженностиРасширенная.КонОст > 0
		|			ТОГДА ВЫРАЗИТЬ(втТаблицаЗадолженностиРасширенная.Просрочено / втТаблицаЗадолженностиРасширенная.КонОст * 100 КАК ЧИСЛО(15, 1))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентПДЗ,
		|	втТаблицаЗадолженностиРасширенная.Погашено КАК Погашено,
		|	втТаблицаЗадолженностиРасширенная.ТорговаяКоманда КАК ТорговаяКоманда,
		|	втТаблицаЗадолженностиРасширенная.EmailРуководителяТорговойКоманды,
		|	втТаблицаЗадолженностиРасширенная.РуководительТорговойКоманды КАК РуководительТорговойКоманды
		|ИЗ
		|	втТаблицаЗадолженностиРасширенная КАК втТаблицаЗадолженностиРасширенная
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК СотрудникФизлицо,
		|			РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
		|			РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|			ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
		|			ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|			НСИ_ТорговыеПредставители.Ссылка КАК СотрудникПродаж,
		|			КонтактнаяИнформация1.Представление КАК EmailОсновногоМенеджера,
		|			КонтактнаяИнформация2.Представление КАК EmailРуководителяМенеджера
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(, ) КАК РаботникиОрганизацийСрезПоследних
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|				ПО РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница
		|					И (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель))
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НСИ_ТорговыеПредставители КАК НСИ_ТорговыеПредставители
		|				ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = НСИ_ТорговыеПредставители.Физлицо
		|					И РаботникиОрганизацийСрезПоследних.Сотрудник.ДатаПриемаНаРаботу = НСИ_ТорговыеПредставители.ДатаПриемаНаРаботу
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация1
		|				ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = КонтактнаяИнформация1.Объект
		|					И (КонтактнаяИнформация1.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|					И (КонтактнаяИнформация1.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация2
		|				ПО (КонтактнаяИнформация2.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизЛица))
		|					И (КонтактнаяИнформация2.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|					И (ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = КонтактнаяИнформация2.Объект)
		|		ГДЕ
		|			НЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК ВложенныйЗапрос
		|		ПО втТаблицаЗадолженностиРасширенная.ОсновнойМенеджерПокупателя = ВложенныйЗапрос.СотрудникПродаж
		|ИТОГИ
		|	МАКСИМУМ(ДнейПросрочено),
		|	СУММА(Просрочено),
		|	МАКСИМУМ(EmailДиректораДивизиона),
		|	МАКСИМУМ(EmailОсновногоМенеджера),
		|	МАКСИМУМ(EmailРуководителяТорговойКоманды) КАК EmailРуководителяМенеджера,
		|	СУММА(КонОст),
		|	СУММА(НеПросрочено),
		|	ВЫБОР
		|		КОГДА СУММА(КонОст) > 0
		|			ТОГДА ВЫРАЗИТЬ(СУММА(Просрочено) / СУММА(КонОст) * 100 КАК ЧИСЛО(15, 1))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПроцентПДЗ,
		|	СУММА(Погашено)
		|ПО
		|	ОБЩИЕ,
		|	Дивизион,
		|	РуководительТорговойКоманды,
		|	СотрудникФизлицо,
		|	Контрагент,
		|	ДоговорКонтрагента";
		
	Запрос.УстановитьПараметр("ТаблицаЗадолженности",ТаблицаЗадолженности);	
	Результат = Запрос.Выполнить();

	Макет = ПолучитьМакет("Макет");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьОбщийИтог = Макет.ПолучитьОбласть("ОбщиеИтоги");
	ОбластьДивизион = Макет.ПолучитьОбласть("Дивизион");
	ОбластьФизическоеЛицо = Макет.ПолучитьОбласть("ФизическоеЛицо");
	ОбластьСотрудникФизлицо = Макет.ПолучитьОбласть("СотрудникФизлицо");
	ОбластьКонтрагент = Макет.ПолучитьОбласть("Контрагент");
	ОбластьДоговорКонтрагента = Макет.ПолучитьОбласть("ДоговорКонтрагента");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ВыборкаОбщийИтог.Следующий();		// Общий итог
	//ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
	//ТабДок.Вывести(ОбластьОбщийИтог, ВыборкаОбщийИтог.Уровень());

	ВыборкаДивизион = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаДивизион.Следующий() Цикл
		
		//Документ директору дивизиона
		ТабДок = Новый ТабличныйДокумент;
		//{24.08.2016 Островерхий заявка №б/н 
		//ОбластьЗаголовок.Параметры.ТекущаяДата  = НаДату;
		ОбластьЗаголовок.Параметры.ТекущаяДата  = ТекущаяДата();
		//24.08.2016 Островерхий} 
		
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		ТабДок.НачатьАвтогруппировкуСтрок();
		
		ОбластьДивизион.Параметры.Заполнить(ВыборкаДивизион);
		ТабДок.Вывести(ОбластьДивизион, ВыборкаДивизион.Уровень());
		
		ВыборкаФизическоеЛицо = ВыборкаДивизион.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаФизическоеЛицо.Следующий() Цикл
			ОбластьФизическоеЛицо.Параметры.Заполнить(ВыборкаФизическоеЛицо);
			ТабДок.Вывести(ОбластьФизическоеЛицо, ВыборкаФизическоеЛицо.Уровень());

			//Документ руководителю менеджера
			ТабДок2 = Новый ТабличныйДокумент;
			//{24.08.2016 Островерхий заявка №б/н 
			//ОбластьЗаголовок.Параметры.ТекущаяДата  = НаДату;
			ОбластьЗаголовок.Параметры.ТекущаяДата  = ТекущаяДата();
			//24.08.2016 Островерхий} 
			
			ТабДок2.Вывести(ОбластьЗаголовок);
			ТабДок2.Вывести(ОбластьШапкаТаблицы);
			ТабДок2.НачатьАвтогруппировкуСтрок();
			
			ТабДок2.Вывести(ОбластьФизическоеЛицо, ВыборкаФизическоеЛицо.Уровень());
			
			ВыборкаСотрудникФизлицо = ВыборкаФизическоеЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаСотрудникФизлицо.Следующий() Цикл
				
				ОбластьСотрудникФизлицо.Параметры.Заполнить(ВыборкаСотрудникФизлицо);
				ТабДок.Вывести(ОбластьСотрудникФизлицо, ВыборкаСотрудникФизлицо.Уровень());
				ТабДок2.Вывести(ОбластьСотрудникФизлицо, ВыборкаСотрудникФизлицо.Уровень());
				
				//Документ менеджеру
				ТабДок3 = Новый ТабличныйДокумент;
				//{24.08.2016 Островерхий заявка №б/н 
				//ОбластьЗаголовок.Параметры.ТекущаяДата  = НаДату;
				ОбластьЗаголовок.Параметры.ТекущаяДата  = ТекущаяДата();
				//24.08.2016 Островерхий} 
				
				ТабДок3.Вывести(ОбластьЗаголовок);
				ТабДок3.Вывести(ОбластьШапкаТаблицы);
				ТабДок3.НачатьАвтогруппировкуСтрок();
				
				ТабДок3.Вывести(ОбластьСотрудникФизлицо, ВыборкаСотрудникФизлицо.Уровень());
			
				ВыборкаКонтрагент = ВыборкаСотрудникФизлицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

				Пока ВыборкаКонтрагент.Следующий() Цикл
					ОбластьКонтрагент.Параметры.Заполнить(ВыборкаКонтрагент);
					ТабДок.Вывести(ОбластьКонтрагент, ВыборкаКонтрагент.Уровень());
                    ТабДок2.Вывести(ОбластьКонтрагент, ВыборкаКонтрагент.Уровень());
					ТабДок3.Вывести(ОбластьКонтрагент, ВыборкаКонтрагент.Уровень());
					
					ВыборкаДоговорКонтрагента = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

					Пока ВыборкаДоговорКонтрагента.Следующий() Цикл
						ОбластьДоговорКонтрагента.Параметры.Заполнить(ВыборкаДоговорКонтрагента);
						ТабДок.Вывести(ОбластьДоговорКонтрагента, ВыборкаДоговорКонтрагента.Уровень());
                        ТабДок2.Вывести(ОбластьДоговорКонтрагента, ВыборкаДоговорКонтрагента.Уровень());
						ТабДок3.Вывести(ОбластьДоговорКонтрагента, ВыборкаДоговорКонтрагента.Уровень());
						
						ВыборкаДетальныеЗаписи = ВыборкаДоговорКонтрагента.Выбрать();

						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
							ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
							ТабДок2.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
							ТабДок3.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
				
				ТабДок3.ЗакончитьАвтогруппировкуСтрок();
				ТабДок3.Вывести(ОбластьПодвалТаблицы);
				ТабДок3.Вывести(ОбластьПодвал);
				
				Если ЗначениеЗаполнено(ВыборкаСотрудникФизлицо.EmailОсновногоМенеджера)
					И НЕ ВыборкаСотрудникФизлицо.EmailОсновногоМенеджера = ВыборкаФизическоеЛицо.EmailРуководителяМенеджера Тогда
					//{24.08.2016 Островерхий заявка №55906 
					//ТабДок3.Записать(ВременнаяПапка+ВыборкаСотрудникФизлицо.EmailОсновногоМенеджера+".xlsx",ТипФайлаТабличногоДокумента.XLSX);
					ТабДок3.Записать(СформироватьИмяУникальноеИмяФайла(ВременнаяПапка+ВыборкаСотрудникФизлицо.EmailОсновногоМенеджера),ТипФайлаТабличногоДокумента.XLSX);
					//24.08.2016 Островерхий} 
				КонецЕсли;
				
			КонецЦикла;
			
			ТабДок2.ЗакончитьАвтогруппировкуСтрок();
			ТабДок2.Вывести(ОбластьПодвалТаблицы);
			ТабДок2.Вывести(ОбластьПодвал);
			
			Если ЗначениеЗаполнено(ВыборкаФизическоеЛицо.EmailРуководителяМенеджера)
				И НЕ ВыборкаФизическоеЛицо.EmailРуководителяМенеджера = ВыборкаДивизион.EmailДиректораДивизиона Тогда
				//{24.08.2016 Островерхий заявка №55906 
				//ТабДок2.Записать(ВременнаяПапка+ВыборкаФизическоеЛицо.EmailРуководителяМенеджера+".xlsx",ТипФайлаТабличногоДокумента.XLSX);
				ТабДок2.Записать(СформироватьИмяУникальноеИмяФайла(ВременнаяПапка+ВыборкаФизическоеЛицо.EmailРуководителяМенеджера),ТипФайлаТабличногоДокумента.XLSX);
				//24.08.2016 Островерхий} 
			КонецЕсли;
			
		КонецЦикла;
		
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		ТабДок.Вывести(ОбластьПодвалТаблицы);
		ТабДок.Вывести(ОбластьПодвал);
		
		Если ЗначениеЗаполнено(ВыборкаДивизион.EmailДиректораДивизиона) Тогда
			
			//{24.08.2016 Островерхий заявка №55906 
			//ТабДок.Записать(ВременнаяПапка+ВыборкаДивизион.EmailДиректораДивизиона+".xlsx",ТипФайлаТабличногоДокумента.XLSX);
			ТабДок.Записать(СформироватьИмяУникальноеИмяФайла(ВременнаяПапка+ВыборкаДивизион.EmailДиректораДивизиона),ТипФайлаТабличногоДокумента.XLSX);
			//24.08.2016 Островерхий} 
			
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

Процедура ОтправитьОтчеты(ВременныйКаталог,УдалятьКаталог=Истина) Экспорт 

	МассивФайлов = НайтиФайлы(ВременныйКаталог, "*.xlsx", Ложь);
	
	ТЧФайлов = Новый ТаблицаЗначений;
	ТЧФайлов.Колонки.Добавить("Email", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(255)));
	ТЧФайлов.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500)));
	
	Для каждого ЭлементМассива Из МассивФайлов Цикл
	
		Email = ЭлементМассива.ИмяБезРасширения;
		ПолноеИмя = ЭлементМассива.ПолноеИмя;
		
		//{24.08.2016 Островерхий заявка №55906 
		Если Найти(Email,"_") > 0 Тогда
			Email = Лев(Email,Найти(Email,"_")-1);	
		КонецЕсли;  
		
		тНоваяСтрока = ТЧФайлов.Добавить();
		тНоваяСтрока.Email = Email;
		тНоваяСтрока.ПолноеИмя = ПолноеИмя;
		//24.08.2016 Островерхий} 
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧФайлов.Email,
		|	ТЧФайлов.ПолноеИмя
		|ПОМЕСТИТЬ втТЧФайлов
		|ИЗ
		|	&ТЧФайлов КАК ТЧФайлов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТЧФайлов.Email КАК Email,
		|	втТЧФайлов.ПолноеИмя
		|ИЗ
		|	втТЧФайлов КАК втТЧФайлов
		|ИТОГИ ПО
		|	Email";

	Запрос.УстановитьПараметр("ТЧФайлов",ТЧФайлов);
	Результат = Запрос.Выполнить();
	
	ВыборкаEmail = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаEmail.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаEmail.Выбрать();
		
		тСписокФайлов = Новый СписокЗначений;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			тСписокФайлов.Добавить(ВыборкаДетальныеЗаписи.ПолноеИмя);		
			
		КонецЦикла;
		
		//{24.08.2016 Островерхий заявка №55906 
		//ПРГ_Регламентый.ОправитьФайл("Дебиторская задолженность по срокам долга", Email, СформироватьТекстПисьма(), ПолноеИмя, , , Истина);
		Если тСписокФайлов.Количество() > 0 Тогда
			ПРГ_Регламентый.ОправитьФайл("Дебиторская задолженность по срокам долга", ВыборкаEmail.Email, СформироватьТекстПисьма(), тСписокФайлов, , , Истина);
		КонецЕсли; 
		//24.08.2016 Островерхий} 
		
	КонецЦикла;	
	
	Если УдалятьКаталог Тогда
	
		УдалитьФайлы(ВременныйКаталог);		
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформироватьИОтправитьПисьма(НаДату,Отладка=Ложь) Экспорт 

	ВременнаяПапка = КаталогВременныхФайлов()+СтрЗаменить(Новый УникальныйИдентификатор(),"-","")+"\";
	СоздатьКаталог(ВременнаяПапка);
	
	СформироватьОтчеты(НаДату,ВременнаяПапка);
	
	Если НЕ Отладка Тогда
		ОтправитьОтчеты(ВременнаяПапка);	
	КонецЕсли; 
	
КонецПроцедуры
 
Функция СформироватьМассивКонтрагентовДляРасчетаЗадолженности(НаДату)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Контрагент,
		|	СУММА(ВложенныйЗапрос.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
		|	СУММА(ВложенныйЗапрос.СуммаУпрОстаток) КАК СуммаУпрОстаток
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзаиморасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток,
		|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&НаДату, ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)) КАК ВзаиморасчетыСКонтрагентамиОстатки) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.ДоговорКонтрагента";

	Запрос.УстановитьПараметр("НаДату", КонецДня(НаДату));

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	Возврат Результат;

КонецФункции // СформироватьТаблицуЗадолженности()
 
Функция СформироватьТекстПисьма()
	
	ШапкаХТМЛ =
	"<!DOCTYPE html>
	|<html>
	|<head>
	|<style type='text/css'>
	|body { font-size: 16; }
	|caption { text-align: left; font-weight: bold; }
	|th { font-weight: normal; text-align: center; background-color: lightgray; border: 1px solid black; border-bottom-width: 0px; }
	|td { padding: 2px; }
	|table { border-collapse: collapse; }
	|table, td { border: 1px solid black; }
	|.red { color: red; }
	|.ar { text-align: right; }
	|.grayinfo { font-size: 13; color: gray; }
	|</style>
	|</head>
	|<body>
	|";

	ШапкаПисьма =
	"<p>Здравствуйте,</p>
	|<p>Во вложении находится отчет(ы) по дебиторской задолженности ваших клиентов.</p>
	|<p>Если у вас возникли вопросы по рассылки отчета, просьба обратиться в отдел кредитного контроля.</p>
	|";
	
	ПодвалПисьма =
	"<br><p>
	|<span class='grayinfo'>Сообщение сгенерировано автоматически, отвечать на это письмо не нужно.</span>
	|</p>
	|<p><span class='grayinfo'>С уважением,</span></p>
	|<p><span class='grayinfo'>Департамент информационных технологий.</span></p>
	|</html>
	|";
	
	ТекстПисьма = ШапкаХТМЛ + ШапкаПисьма + ПодвалПисьма;
	
	Возврат ТекстПисьма;
	
КонецФункции

Функция СформироватьИмяУникальноеИмяФайла(ИмяФайла,Расщирение="xlsx",Разделитель="_")

	УникальноеИмяФайла = ИмяФайла+Разделитель+Строка(Новый УникальныйИдентификатор)+"."+Расщирение;		

	Возврат УникальноеИмяФайла;
	
КонецФункции // СформироватьИмяУникальноеИмяФайла()
 
