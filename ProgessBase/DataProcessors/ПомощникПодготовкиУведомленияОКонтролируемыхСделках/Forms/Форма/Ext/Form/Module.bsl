////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ПодготовитьДанныеАвтоматическогоЗаполненияНаСервере()
	
	Документы.УведомлениеОКонтролируемыхСделках.ПодготовитьДанныеАвтоматическогоЗаполнения(Объект.Уведомление);
	НайтиУведомление(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУведомлениеНаСервере()
	
	Документы.УведомлениеОКонтролируемыхСделках.СформироватьКонтролируемыеСделкиУведомления(Объект.Уведомление);
	НайтиУведомление("Указанный");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСделок(СделкиСуществуют, ДатаФормированияСпискаСделок)
	
	СделкиЗаполнены = ?(СделкиСуществуют, НСтр("ru = 'Сформирован %ДатаФормированияСпискаСделок%'"),НСтр("ru = 'Список сделок пуст'"));
	СделкиЗаполнены = СтрЗаменить(СделкиЗаполнены, "%ДатаФормированияСпискаСделок%", ДатаФормированияСпискаСделок);
	
	Возврат СделкиЗаполнены;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеУведомления(УведомлениеЗаполнено, ДатаЗаполненияУведомления);
	
	Представление = ?(УведомлениеЗаполнено, НСтр("ru = 'Уведомление о контролируемых сделках сформировано (%ДатаЗаполненияУведомления%)'"),НСтр("ru = 'Уведомление о контролируемых сделках не заполнено'"));
	Представление = СтрЗаменить(Представление, "%ДатаЗаполненияУведомления%", ДатаЗаполненияУведомления);
	
	Возврат Представление;

КонецФункции

&НаСервере
Процедура НайтиУведомление(ТипПоиска)
	
	Если Не ЗначениеЗаполнено(Объект.ОтчетныйГод) Тогда 
		Объект.ОтчетныйГод = Год(ДобавитьМесяц(ТекущаяДата(), -6));
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Результат = КонтролируемыеСделки.НайтиУведомлениеОрганизацииВОтчетномГоду(Объект.Организация,Объект.ОтчетныйГод,ТипУведомления,НомерКорректировки,ТипПоиска);
		
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		Объект.Уведомление = Результат;
		ТипУведомления = ?(Результат.НомерКорректировки = 0, 0, 1);
		НомерКорректировки = ?(ТипУведомления = 0, 0, Результат.НомерКорректировки);
		СделкиСуществуют = Документы.УведомлениеОКонтролируемыхСделках.ДанныеАвтоматическогоЗаполненияПодготовлены(Объект.Уведомление);
		УведомлениеЗаполнено = Документы.УведомлениеОКонтролируемыхСделках.УведомлениеЗаполнено(Объект.Уведомление);
		ДатаФормированияСпискаСделок = Результат.ДатаФормированияСпискаСделок;
		ДатаЗаполненияУведомления = Результат.ДатаЗаполненияУведомления;
	Иначе
		Объект.Уведомление = Документы.УведомлениеОКонтролируемыхСделках.ПустаяСсылка();
		СделкиСуществуют = Ложь;
		УведомлениеЗаполнено = Ложь;
		ДатаФормированияСпискаСделок = Дата(1,1,1);
		ДатаЗаполненияУведомления    = Дата(1,1,1);
	КонецЕсли;

	ПредставлениеСделок = ПредставлениеСделок(СделкиСуществуют, ДатаФормированияСпискаСделок);
	ПредставлениеУведомления = ПредставлениеУведомления(УведомлениеЗаполнено, ДатаЗаполненияУведомления);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.НомерКорректировки.Доступность = Форма.ТипУведомления <> 0;
	
	ДоступностьГиперссылок = ЗначениеЗаполнено(Форма.Объект.Организация) И ЗначениеЗаполнено(Форма.Объект.ОтчетныйГод);
	
	Форма.Элементы.ДекорацияВзаимозависимыеЛица.Доступность              = ДоступностьГиперссылок;
	Форма.Элементы.ДекорацияКонтрагентыНеРФ.Доступность                  = ДоступностьГиперссылок;
	Форма.Элементы.ДекорацияТоварыМировойБиржевойТорговли.Доступность    = ДоступностьГиперссылок;
	Форма.Элементы.ПредставлениеСделок.Доступность                       = ДоступностьГиперссылок;
	Форма.Элементы.ДекорацияСписокСделок.Доступность                     = ДоступностьГиперссылок;
	Форма.Элементы.ДекорацияСписокПрочихКонтролируемыхСделок.Доступность = ДоступностьГиперссылок;
	Форма.Элементы.КомандаСформироватьСписокСделок.Доступность           = ДоступностьГиперссылок;
	Форма.Элементы.ДекорацияНастройкиЗаполненияУведомления.Доступность   = ДоступностьГиперссылок;
	
	Форма.Элементы.ДекорацияСведенияОбОрганизации.Доступность         = ДоступностьГиперссылок;
	Форма.Элементы.ДекорацияСведенияОВзаимозависимыхЛицах.Доступность = ДоступностьГиперссылок;
	Форма.Элементы.КнопкаОтчетНастройкиКонтрагентов.Доступность       = ДоступностьГиперссылок;
	Форма.Элементы.ДекорацияНастройкиПредметов.Доступность            = ДоступностьГиперссылок;
	Форма.Элементы.ДекорацияСведенияГраницахВключения.Доступность     = ДоступностьГиперссылок;
	Форма.Элементы.ДекорацияСведенияОбОрганизации.Доступность         = ДоступностьГиперссылок;
	Форма.Элементы.ДекорацияСписокКонтролируемыхСделок.Доступность    = ДоступностьГиперссылок;
	Форма.Элементы.КомандаЗаполнитьУведомление.Доступность            = ДоступностьГиперссылок;
	Форма.Элементы.ПредставлениеУведомления.Доступность               = ДоступностьГиперссылок;
	Форма.Элементы.ДекорацияСоставУведомления.Доступность             = ДоступностьГиперссылок;
	Форма.Элементы.ДекорацияАнализУведомления.Доступность             = ДоступностьГиперссылок;
	
	Форма.Элементы.КомандаПечатьУведомленияОКонтролируемыхСделках.Доступность = ДоступностьГиперссылок;
	Форма.Элементы.КомандаВыгрузитьУведомлениеВXML.Доступность                = ДоступностьГиперссылок;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьУведомление()
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И Объект.ОтчетныйГод > 2000 Тогда
		НовоеУведомление = Документы.УведомлениеОКонтролируемыхСделках.СоздатьДокумент();
		НовоеУведомление.Дата = ТекущаяДатаСеанса();
		НовоеУведомление.Организация = Объект.Организация;
		НовоеУведомление.ОтчетныйГод = Дата(Объект.ОтчетныйГод, 1, 1);
		НовоеУведомление.НомерКорректировки = НомерКорректировки;
		
		СвойстваПредыдущегоУведомления = ПолучитьСвойстваПредыдущегоУведомления(НовоеУведомление.Организация, НовоеУведомление.ОтчетныйГод, НовоеУведомление.НомерКорректировки);
		
		НовоеУведомление.КодМестаПредставления = СвойстваПредыдущегоУведомления.КодМестаПредставления;
		НовоеУведомление.ГруппироватьСделкиСОдинаковойЦеной = СвойстваПредыдущегоУведомления.ГруппироватьСделкиСОдинаковойЦеной;
		
		НовоеУведомление.Записать();
		
		НайтиУведомление("Указанный");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренумероватьЛисты1А(Уведомление)
	
	КонтролируемыеСделки.ПеренумерацияКонтролируемыхСделокУведомления(Уведомление);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомераКонтролируемыхСделокКорректны(Уведомление)
	
	Возврат КонтролируемыеСделки.НомераКонтролируемыхСделокУведомленияКоректны(Уведомление);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвойстваПредыдущегоУведомления(Организация, ОтчетныйГод, НомерКорректировки)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ОтчетныйГод", ОтчетныйГод);
	Запрос.Параметры.Вставить("НомерКорректировки", НомерКорректировки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УведомлениеОКонтролируемыхСделках.Ссылка,
	|	УведомлениеОКонтролируемыхСделках.Организация,
	|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ОтчетныйГод,
	|	УведомлениеОКонтролируемыхСделках.НомерКорректировки КАК НомерКорректировки,
	|	УведомлениеОКонтролируемыхСделках.КодМестаПредставления,
	|	УведомлениеОКонтролируемыхСделках.ГруппироватьСделкиСОдинаковойЦеной,
	|	1 КАК Приоритет
	|ИЗ
	|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
	|ГДЕ
	|	УведомлениеОКонтролируемыхСделках.Организация = &Организация
	|	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод = &ОтчетныйГод
	|	И УведомлениеОКонтролируемыхСделках.НомерКорректировки < &НомерКорректировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОКонтролируемыхСделках.Ссылка,
	|	УведомлениеОКонтролируемыхСделках.Организация,
	|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод,
	|	УведомлениеОКонтролируемыхСделках.НомерКорректировки,
	|	УведомлениеОКонтролируемыхСделках.КодМестаПредставления,
	|	УведомлениеОКонтролируемыхСделках.ГруппироватьСделкиСОдинаковойЦеной,
	|	2
	|ИЗ
	|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
	|ГДЕ
	|	УведомлениеОКонтролируемыхСделках.Организация = &Организация
	|	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод < &ОтчетныйГод
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ОтчетныйГод,
	|	НомерКорректировки";
	
	
	СвойстваУведомления = Новый Структура("КодМестаПредставления, ГруппироватьСделкиСОдинаковойЦеной", "", Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СвойстваУведомления, Выборка);
	КонецЕсли;
	
	Возврат СвойстваУведомления;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫГРУЗКИ

&НаСервере
Функция ВыгрузитьНаСервере(УникальныйИдентификатор)
	
	Если ЗначениеЗаполнено(Объект.Уведомление) Тогда
		ОбъектДокумента = Объект.Уведомление.ПолучитьОбъект();
		Возврат ОбъектДокумента.ВыгрузитьДокумент(УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПутьВыгрузки(ПутьДляВыгрузки = Неопределено) Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьДляВыгрузки", ПутьДляВыгрузки);
	
	ФормаПараметровСохранения = ПолучитьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.НастройкаПараметровСохраненияРегламентированногоОтчета", ПараметрыФормы);
	
	РезВыбора = ФормаПараметровСохранения.ОткрытьМодально();
	Если РезВыбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ РезВыбора Тогда
		Возврат Ложь;
	Иначе
		Возврат ФормаПараметровСохранения.ПутьДляВыгрузки;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ 

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	НомерКорректировки 	= 0;
	ТипУведомления 		= 0;
	НайтиУведомление("Последний");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйГодПриИзменении(Элемент)
	
	НомерКорректировки 	= 0;
	ТипУведомления 		= 0;
	НайтиУведомление("Последний");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипУведомленияПриИзменении(Элемент)
	
	НомерКорректировки = ?(ТипУведомления = 0, 0, ?(НомерКорректировки = 0,1,НомерКорректировки));
	НайтиУведомление("Указанный");
	
КонецПроцедуры

&НаКлиенте
Процедура НомерКорректировкиПриИзменении(Элемент)
	
	НайтиУведомление("Указанный");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСведенияОбОрганизацииНажатие(Элемент)
	ПараметрыОткрытия = Новый Структура("Организация, ОтчетныйГод", Объект.Организация, Объект.ОтчетныйГод);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаСведенияОбОрганизации", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКонтрагентыОфшорыНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура("Организация, ОтчетныйГод", Объект.Организация, Объект.ОтчетныйГод);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаКонтрагентыЗарегистрированныеЗаПределамиРФ", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТоварыМировойБиржевойТорговлиНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура("Организация, ОтчетныйГод", Объект.Организация, Объект.ОтчетныйГод);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаТоварыМировойТорговли", ПараметрыОткрытия, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОтчетНастройкиКонтрагентовНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СоздатьУведомление();
	КонецЕсли;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ЗначениеПараметраУведомление = ПользовательскиеНастройки.Элементы.Добавить(Тип("ЗначениеПараметраНастроекКомпоновкиДанных"));
	ЗначениеПараметраУведомление.ИдентификаторПользовательскойНастройки = "Уведомление";
	ЗначениеПараметраУведомление.Параметр = Новый ПараметрКомпоновкиДанных("Уведомление");
	ЗначениеПараметраУведомление.Значение = Объект.Уведомление;
	ЗначениеПараметраУведомление.Использование = Истина;
	
	ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление, ПользовательскиеНастройки", "ДанныеКонтрагентов", Объект.Уведомление, ПользовательскиеНастройки);
	ОткрытьФорму("Отчет.КонтрагентыКонтролируемыхСделок.Форма.ФормаОтчетаКонтрагенты", ПараметрыОткрытия, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокКонтролируемыхСделокНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СоздатьУведомление();
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Уведомление, КлючВарианта", Объект.Уведомление,  "КонтролируемыеСделкиДляВключенияВУведомление");
	ОткрытьФорму("Отчет.КонтролируемыеСделкиДляВключенияВУведомление.Форма.ФормаОтчета", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокПрочихКонтролируемыхСделокНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СоздатьУведомление();
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыФормы=Новый Структура; 
	ПараметрыФормы.Вставить("Отбор", Новый Структура("УведомлениеОКонтролируемойСделке", Объект.Уведомление));
	ПараметрыФормы.Вставить("УведомлениеОКонтролируемыхСделках", Объект.Уведомление);
	ОткрытьФорму("Документ.ПрочиеКонтролируемыеСделки.ФормаСписка", ПараметрыФормы, , Объект.Уведомление);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьСписокСделок(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СоздатьУведомление();
	КонецЕсли;
	
	Если Объект.Уведомление <> ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
		ТекстВопроса = НСтр("ru = 'Заполнение списка сделок может занять длительное время%ОчисткаСпискаСделок%
			|Продолжить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОчисткаСпискаСделок%",
			?(СделкиСуществуют, НСтр("ru = ',
			|существующие данные о сделках при заполнении будут очищены.'"), НСтр("ru = '.'")));
			
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ПодготовитьДанныеАвтоматическогоЗаполненияНаСервере();
			УправлениеФормой(ЭтаФорма);
			Предупреждение(НСтр("ru = 'Список сделок успешно заполнен по данным учета'"), 60);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСведенияОВзаимозависимыхЛицахНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СоздатьУведомление();
	КонецЕсли;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ЗначениеПараметраУведомление = ПользовательскиеНастройки.Элементы.Добавить(Тип("ЗначениеПараметраНастроекКомпоновкиДанных"));
	ЗначениеПараметраУведомление.ИдентификаторПользовательскойНастройки = "Уведомление";
	ЗначениеПараметраУведомление.Параметр = Новый ПараметрКомпоновкиДанных("Уведомление");
	ЗначениеПараметраУведомление.Значение = Объект.Уведомление;
	ЗначениеПараметраУведомление.Использование = Истина;
	
	ЗначениеПараметраУведомление = ПользовательскиеНастройки.Элементы.Добавить(Тип("ЗначениеПараметраНастроекКомпоновкиДанных"));
	ЗначениеПараметраУведомление.ИдентификаторПользовательскойНастройки = "Период";
	ЗначениеПараметраУведомление.Параметр = Новый ПараметрКомпоновкиДанных("Период");
	ЗначениеПараметраУведомление.Значение = Дата(Объект.ОтчетныйГод, 1, 1);
	ЗначениеПараметраУведомление.Использование = Истина;
	
	ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление, ПользовательскиеНастройки", "ВзаимозависимыеЛицаКонтролируемыхСделок", Объект.Уведомление, ПользовательскиеНастройки);
	ОткрытьФорму("Отчет.ВзаимозависимыеЛицаКонтролируемыхСделок.Форма.ВзаимозависимыеЛица", ПараметрыОткрытия, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьУведомление(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СоздатьУведомление();
	КонецЕсли;
	
	Если Объект.Уведомление <> ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
		ТекстВопроса = НСтр("ru = 'Заполнение уведомления может занять значительное время%ОчисткаУведомления%
			|Продолжить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОчисткаУведомления%",
			?(УведомлениеЗаполнено, НСтр("ru = ',
			|существующие листы 1А при заполнении будут помечены на удаление.'"), НСтр("ru = '.'")));
			
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаполнитьУведомлениеНаСервере();
			УправлениеФормой(ЭтаФорма);
			Предупреждение(НСтр("ru = 'Листы 1А уведомления успешно заполнены'"), 60);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоставУведомленияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыФормы=Новый Структура; 
	ПараметрыФормы.Вставить("Отбор", Новый Структура("УведомлениеОКонтролируемойСделке", Объект.Уведомление));
	ПараметрыФормы.Вставить("УведомлениеОКонтролируемыхСделках", Объект.Уведомление);
	ОткрытьФорму("Документ.КонтролируемаяСделка.ФормаСписка", ПараметрыФормы, , Объект.Уведомление);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАнализУведомленияНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СоздатьУведомление();
	КонецЕсли;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ЗначениеПараметраУведомление = ПользовательскиеНастройки.Элементы.Добавить(Тип("ЗначениеПараметраНастроекКомпоновкиДанных"));
	ЗначениеПараметраУведомление.ИдентификаторПользовательскойНастройки = "Уведомление";
	ЗначениеПараметраУведомление.Параметр = Новый ПараметрКомпоновкиДанных("Уведомление");
	ЗначениеПараметраУведомление.Значение = Объект.Уведомление;
	ЗначениеПараметраУведомление.Использование = Истина;
	
	ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление, ПользовательскиеНастройки", "АнализУведомления", Объект.Уведомление, ПользовательскиеНастройки);
	ОткрытьФорму("Отчет.АнализУведомления.Форма.ФормаОтчета", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиПредметовНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СоздатьУведомление();
	КонецЕсли;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ЗначениеПараметраУведомление = ПользовательскиеНастройки.Элементы.Добавить(Тип("ЗначениеПараметраНастроекКомпоновкиДанных"));
	ЗначениеПараметраУведомление.ИдентификаторПользовательскойНастройки = "Уведомление";
	ЗначениеПараметраУведомление.Параметр = Новый ПараметрКомпоновкиДанных("Уведомление");
	ЗначениеПараметраУведомление.Значение = Объект.Уведомление;
	ЗначениеПараметраУведомление.Использование = Истина;
	
	ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление, ПользовательскиеНастройки", "ПредметыКонтролируемыхСделок", Объект.Уведомление, ПользовательскиеНастройки);
	ОткрытьФорму("Отчет.ПредметыКонтролируемыхСделок.Форма.ФормаОтчетаПредметы", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВзаимозависимыеЛицаНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура("Организация, ОтчетныйГод", Объект.Организация, Объект.ОтчетныйГод);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаВзаимозависимыеЛица", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСведенияГраницахВключенияНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура("ОтчетныйГод", Объект.ОтчетныйГод);
	ОткрытьФорму("Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.Форма.ФормаГраницыВключенияСделок", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечатьУведомленияОКонтролируемыхСделках(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СоздатьУведомление();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Уведомление) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПечати = Новый Структура("Уведомление", Объект.Уведомление);
	ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.ФормаПечатиУведомления", ПараметрыПечати, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписокСделокНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ЗначениеПараметраУведомление = ПользовательскиеНастройки.Элементы.Добавить(Тип("ЗначениеПараметраНастроекКомпоновкиДанных"));
	ЗначениеПараметраУведомление.ИдентификаторПользовательскойНастройки = "Уведомление";
	ЗначениеПараметраУведомление.Параметр = Новый ПараметрКомпоновкиДанных("Уведомление");
	ЗначениеПараметраУведомление.Значение = Объект.Уведомление;
	ЗначениеПараметраУведомление.Использование = Истина;
	
	ПараметрыОткрытия = Новый Структура("КлючВарианта, Уведомление, ПользовательскиеНастройки", "КонтролируемыеСделки", Объект.Уведомление, ПользовательскиеНастройки);
	ОткрытьФорму("Отчет.СписокКонтролируемыхСделок.Форма.ФормаОтчетаКонтролируемыеСделки", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиЗаполненияУведомленияНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СоздатьУведомление();
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура("Уведомление", Объект.Уведомление);
	ОткрытьФорму("Документ.УведомлениеОКонтролируемыхСделках.Форма.НастройкиЗаполнения", ПараметрыОткрытияФормы, ЭтаФорма, Объект.Уведомление);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НайтиУведомление("Последний");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьУведомлениеВXML(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Уведомление) Тогда
		СоздатьУведомление();
	КонецЕсли;
	
	Если НЕ НомераКонтролируемыхСделокКорректны(Объект.Уведомление) Тогда
		ТекстВопроса = Нстр("ru = 'Нумерация листов 1А не корректна.#РазделительСтрок#Перенумеровать листы 1А?#РазделительСтрок#(операция может занять продолжительное время)'");
		Перенумеровать = Вопрос(СтрЗаменить(ТекстВопроса, "#РазделительСтрок#", Символы.ПС), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
		Если Перенумеровать Тогда
			ПеренумероватьЛисты1А(Объект.Уведомление);
		КонецЕсли;
	КонецЕсли;
	
	ВыгружаемыеДанные = ВыгрузитьНаСервере(УникальныйИдентификатор);
	
	#Если НЕ ВебКлиент Тогда
		ПутьВыгрузки = ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные Цикл
		
		#Если ВебКлиент Тогда
			Попытка
				ПолучитьФайл(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки);
			Исключение
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщения = "Не удалось записать файл """ + ФайлВыгрузки.ИмяФайлаВыгрузки 
							   + """! Возможно, недостаточно места на диске, диск защищен от записи"
							   + " или не подключено расширение для работы с файлами.";
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
				Сообщение.Сообщить();
			КонецПопытки;
		#Иначе
			ДвоичныйФайл = ПолучитьИзВременногоХранилища(ФайлВыгрузки.АдресФайлаВыгрузки);
			Попытка
				ДвоичныйФайл.Записать(ПутьВыгрузки + ФайлВыгрузки.ИмяФайлаВыгрузки);
				ТекстСообщения = "Файл выгрузки регламентированного отчета """ + ФайлВыгрузки.ИмяФайлаВыгрузки + """ сохранен в каталог """ + ПутьВыгрузки + """.";
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
				Сообщение.Сообщить();
			Исключение
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщения = "Не удалось записать файл """ + ФайлВыгрузки.ИмяФайлаВыгрузки + """! Возможно, недостаточно места на диске или диск защищен от записи.";
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
				Сообщение.Сообщить();
			КонецПопытки;
		#КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

