
Перем мДатаОбработки;

Перем мТаблицаОтчета;
Перем мМакетОтчета;
Перем мСтрокаСообщения;
Перем мКолвоОбъектов;

Перем ДокXML;

Перем ЛогXML;
Перем groupLogXML;
Перем мСтрокаЧасовойПояс;

Перем мСтруктураНастройки;

Перем мИнфоКодДистрибьютора	Экспорт;
Перем мИнфоКомпания			Экспорт;
Перем мИнфоВерсия			Экспорт;
Перем мИнфоДата				Экспорт;
Перем мИнфоКаталогДанных	Экспорт;
Перем мИнфоИмяКомпьютера	Экспорт;
Перем мИмяПользователя		Экспорт;

Перем мИспользоватьСостояния	Экспорт;
Перем мИспользоватьКонстанты;
Перем мИспользоватьЛогСообщений;

Перем мТипXMLБибилиотеки;
//Перем мТипВыгрузки;

//***********************************************//
//дистрибьюторские переменные

Перем мКаталогНастроек;

Перем мКонстантаСклад, мКонстантаВалюта, мКонстантаФирма, мКонстантаТипЦен, мКонстантаДистрибуторКод, мКонстантаТипМерч, мКонстантаОснПокупатель;
Перем тзнГруппаНоменклатуры, тзнСотрудники, тзнПокупателиВсе, тзнТипыЦен; 
Перем спкВыгруженыеДокументы, спкСклады;
Перем мТЗнДокументыПродаж;
Перем мСчВыгрузки;
Перем мСуммаДокументов;
Перем мКоличествоДокументов;
//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
Перем ПргЗапросХешаРеал,ПргЗапросХешаПерем,ПргЗапросХешаВозвр;
//конец изменений 


//*******************************************
//пПоказыватьВремя = (0 - не выводить; 1 - выводить время; 2 - выводить дату; 3 - выводить дату и время)
//пВыводить = (0 - в никуда; 1 - выводить на экран; 2 - выводить в файл; 3 - выводить и в файл и на экран; 4 = 3 + Предупредить)
Процедура СообщитьПодробно(пТекcтСообщения = "", пчОтступ = 1, пПоказыватьВремя = 0, пВыводить = 1, пСекция = "Информация") Экспорт
	
	Если (пПоказыватьВремя = 1) или (пПоказыватьВремя = 3) Тогда
		пТекcтСообщения = XMLВернутьВремя() + "  " + пТекcтСообщения;
	КонецЕсли;
	
	Если (пПоказыватьВремя = 2) или (пПоказыватьВремя = 3) Тогда
		пТекcтСообщения = XMLВернутьДату() + "  " + пТекcтСообщения;
	КонецЕсли;
	
	Для р = 1 По пчОтступ Цикл
		пТекcтСообщения = Символы.Таб + пТекcтСообщения;
	КонецЦикла;
	
	Если (пВыводить = 1) или (пВыводить = 3) или (пВыводить = 4) Тогда
		#Если Клиент Тогда
			Сообщить(пТекcтСообщения);
		#КонецЕсли
	КонецЕсли;
	
	Если (пВыводить = 4) Тогда
		#Если Клиент Тогда
			Сообщить(пТекcтСообщения);
		#КонецЕсли
	КонецЕсли;
	
	Если (пВыводить = 2) или (пВыводить = 3) или (пВыводить = 4) Тогда
		отчДобавитьВОтчетСтроку(пТекcтСообщения, пСекция);
	КонецЕсли;
	
КонецПроцедуры	//СообщитьПодробно()


//*******************************************
Функция XMLВернутьДату(пДата = "", пОбратныйФормат = 0) Экспорт
	
	Если пДата = "" Тогда
		пДата	= ТекущаяДата();
	КонецЕсли;
	
	Если пОбратныйФормат = 1 Тогда
		лДата	= Формат(пДата, "ДФ=""гггг.ММ.дд""");
	Иначе
		лДата	= Формат(пДата, "ДФ=""дд.ММ.гггг""");
	КонецЕсли;
	
	Возврат лДата;
	
КонецФункции	//XMLВернутьДату()

//*******************************************
Функция XMLВернутьВремя(пДата = "") Экспорт
	
	Если пДата = "" Тогда
		пДата	= ТекущаяДата();
	КонецЕсли;
	
	лЧас	= Строка(Час(пДата));
	лМин	= Строка(Минута(пДата));
	лСек	= Строка(Секунда(пДата));
	
	лЧас	= ?(СтрДлина(лЧас) = 2, лЧас, "0" + лЧас);
	лМин	= ?(СтрДлина(лМин) = 2, лМин, "0" + лМин);
	лСек	= ?(СтрДлина(лСек) = 2, лСек, "0" + лСек);
	
	лВремя	= лЧас + ":" + лМин + ":" + лСек;
	
	Возврат лВремя;
	
КонецФункции	//XMLВернутьВремя()

//*******************************************
Функция XMLПолучитьДату(лВходнойПараметр) Экспорт
	
	лСтрДата	= "";
	лПозиция	= Найти(лВходнойПараметр, ".");
	Пока лПозиция > 0 Цикл
		лСтрДата	= Лев(лВходнойПараметр, лПозиция - 1) + ?(лСтрДата = "", "", "-") + лСтрДата;
		лВходнойПараметр	= Сред(лВходнойПараметр, лПозиция + 1);
		лПозиция	= Найти(лВходнойПараметр, ".");
	КонецЦикла;
	лСтрДата	= лВходнойПараметр + ?(лСтрДата = "", "", "-") + лСтрДата;
	
	Возврат лСтрДата;
	
КонецФункции	//XMLПолучитьДату()

//*******************************************
Функция ПолучитьЧастьИмени(лВходнойПараметр1, лВходнойПараметр2) Экспорт
	
	лИмя	= "";
	
	Если лВходнойПараметр2 = "" Тогда
		лВходнойПараметр2 = 1;
	КонецЕсли;
	лСтрока	= СокрЛП(лВходнойПараметр1);
	
	Для р = 1 По Число(лВходнойПараметр2) Цикл
		лПозиция	= Найти(лСтрока, " ");
		Если лПозиция = 0 Тогда
			лИмя	= лСтрока;
			Прервать;
		КонецЕсли;
		
		лИмя	= Лев(лСтрока, лПозиция - 1);
		лСтрока	= СокрЛП(Сред(лСтрока, лПозиция + 1));
	КонецЦикла;
	
	Возврат лИмя;
	
КонецФункции	//ПолучитьЧастьИмени()

//*******************************************
Функция СТ_ЗначениеВСтрокуВнутр(пЭлемент) Экспорт
	
	//++ Spl_Апроф 21.10.2014 (k.russkih@a-prof.ru)
	Если пЭлемент = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(пЭлемент) Тогда
		Возврат "";
	КонецЕсли;	
	
	Если НЕ ВыгружатьПоGUID Тогда	
		
		Если Метаданные.Документы.Содержит(пЭлемент.Метаданные()) Тогда
		    Возврат пЭлемент.Номер;
		Иначе	
			Возврат пЭлемент.Код;
		КонецЕсли; 
		
	ИначеЕсли МастерВыгрузка Тогда
		
		Если Метаданные.Справочники.Содержит(пЭлемент.Метаданные()) Тогда
			Возврат пЭлемент.Код;
		КонецЕсли;
		
	КонецЕсли; 	
	//-- Spl_Апроф	
	
	//Если пЭлемент = "" Тогда
	//	Возврат "";
	//КонецЕсли;
	//
	//Если НЕ ЗначениеЗаполнено(пЭлемент) Тогда
	//	Возврат "";
	//КонецЕсли; 
	//{"#",47e6dd42-cd5c-4e3a-9bc4-14816ed53d38,31:00000000000000000000000000000000}
	
	лСтрока	= ЗначениеВСтрокуВнутр(пЭлемент);
	
	лДвоеточие	= Найти(лСтрока, ":");
	Если лДвоеточие > 0 Тогда
		лСтрока	= Сред(лСтрока, лДвоеточие+1);
	КонецЕсли;
	лСтрока	= СтрЗаменить(лСтрока, "}", "");
	
	Возврат лСтрока;
	
КонецФункции	//СТ_ЗначениеВСтрокуВнутр()

//****************************************
Функция ДобавитьВЗапросОтбор(пЗапрос, пИмя, пПервоеУсловие = Ложь, пИмяПеременной = "Ссылка", пДобавитьРодителей = Ложь) Экспорт
	
	ЭлементОтбора	= Отбор.Найти(пИмя);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Если НЕ ЭлементОтбора.Использование Тогда
		Возврат "";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭлементОтбора.Имя) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОтбора	= "
	|" + ?(пПервоеУсловие, "ГДЕ ", "И ") + пИмяПеременной + " ";
	пЗапрос.УстановитьПараметр("Отбор_" + ЭлементОтбора.Имя, ЭлементОтбора.Значение);
	

	лВидСравнения	= ЭлементОтбора.ВидСравнения;
	
	Если пДобавитьРодителей Тогда
		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
			лСЗнОтборСРодителями	= Новый СписокЗначений();
			лСЗнОтборСРодителями	= ЭлементОтбора.Значение.Скопировать();
			Для Каждого лЗначениеСписка Из ЭлементОтбора.Значение Цикл
				лРодитель	= лЗначениеСписка.Значение.Родитель;
				Пока ЗначениеЗаполнено(лРодитель) Цикл
					Если лСЗнОтборСРодителями.НайтиПоЗначению(лРодитель) = Неопределено Тогда
						лСЗнОтборСРодителями.Добавить(лРодитель);
					КонецЕсли;
					лРодитель	= лРодитель.Родитель;
				КонецЦикла;
			КонецЦикла;
		Иначе
			лСЗнОтборСРодителями	= Новый СписокЗначений();
			лРодитель	= ЭлементОтбора.Значение;
			Пока ЗначениеЗаполнено(лРодитель) Цикл
				лСЗнОтборСРодителями.Добавить(лРодитель);
				лРодитель	= лРодитель.Родитель;
			КонецЦикла;
		КонецЕсли;
		пЗапрос.УстановитьПараметр("Отбор_" + ЭлементОтбора.Имя, лСЗнОтборСРодителями);
		
		Если лВидСравнения = ВидСравнения.Равно Тогда
			лВидСравнения	= ВидСравнения.ВСписке;
		ИначеЕсли лВидСравнения = ВидСравнения.НеРавно Тогда
			лВидСравнения	= ВидСравнения.НеВСписке;
		ИначеЕсли лВидСравнения = ВидСравнения.ВИерархии Тогда
			лВидСравнения	= ВидСравнения.ВСпискеПоИерархии;
		ИначеЕсли лВидСравнения = ВидСравнения.НеВИерархии Тогда
			лВидСравнения	= ВидСравнения.НеВСпискеПоИерархии;
		КонецЕсли;
	Иначе
		// для некоторых отборов нужно добавить значение по умолчанию из настроек
		// для типов цен
		//Если пИмя = "ТипыЦен" Тогда
		//	Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
		//		Если ЭлементОтбора.Значение.НайтиПоЗначению(мКонстантаТипЦен) = Неопределено Тогда
		//			ЭлементОтбора.Значение.Добавить(мКонстантаТипЦен);
		//		КонецЕсли;
		//	Конецесли;
		//КонецЕсли;
		
		// для складов
		//Если пИмя = "Склады" Тогда
		//	Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
		//		Если ЭлементОтбора.Значение.НайтиПоЗначению(мКонстантаСклад) = Неопределено Тогда
		//			ЭлементОтбора.Значение.Добавить(мКонстантаСклад);
		//		КонецЕсли;
		//	Конецесли;
		//КонецЕсли;
		
		// для организаций
		//Если пИмя = "Фирмы" Тогда
		//	Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
		//		Если ЭлементОтбора.Значение.НайтиПоЗначению(мКонстантаФирма) = Неопределено Тогда
		//			ЭлементОтбора.Значение.Добавить(мКонстантаФирма);
		//		КонецЕсли;
		//	Конецесли;
		//КонецЕсли;
		
		//пЗапрос.УстановитьПараметр("Отбор_" + ЭлементОтбора.Имя, ЭлементОтбора.Значение);
	КонецЕсли;
	
	Если лВидСравнения = ВидСравнения.Равно Тогда
		ТекстОтбора	= ТекстОтбора + " = &Отбор_" + ЭлементОтбора.Имя;
	ИначеЕсли лВидСравнения = ВидСравнения.НеРавно Тогда
		ТекстОтбора	= ТекстОтбора + " <> &Отбор_" + ЭлементОтбора.Имя;
	ИначеЕсли лВидСравнения = ВидСравнения.ВСписке Тогда
		ТекстОтбора	= ТекстОтбора + " В (&Отбор_" + ЭлементОтбора.Имя + ")";
	ИначеЕсли лВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
		ТекстОтбора	= ТекстОтбора + " В ИЕРАРХИИ(&Отбор_" + ЭлементОтбора.Имя + ")";
	ИначеЕсли лВидСравнения = ВидСравнения.ВИерархии Тогда
		ТекстОтбора	= ТекстОтбора + " В ИЕРАРХИИ(&Отбор_" + ЭлементОтбора.Имя + ")";
	ИначеЕсли лВидСравнения = ВидСравнения.НеВСписке Тогда
		ТекстОтбора	= ТекстОтбора + " НЕ В (&Отбор_" + ЭлементОтбора.Имя + ")";
	ИначеЕсли лВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		ТекстОтбора	= ТекстОтбора + " НЕ В ИЕРАРХИИ(&Отбор_" + ЭлементОтбора.Имя + ")";
	ИначеЕсли лВидСравнения = ВидСравнения.НеВИерархии Тогда
		ТекстОтбора	= ТекстОтбора + " НЕ В ИЕРАРХИИ(&Отбор_" + ЭлементОтбора.Имя + ")";
	КонецЕсли;
	
	Возврат ТекстОтбора;
	
КонецФункции	//ДобавитьВЗапросОтбор()

//****************************************
//Входные параметры:
//	пЭлемент		- проверяемый элемент
//	пРодитель		- группа, принадлежность которой проверяем
//	пИмяРодителя	- название группы, принадлежность которой проверяем (используется, если не указан пРодитель)
//	пТип			- если = 1, то пЭлемент должен принадлежать группе, а если = 0, то НЕ должен принадлежать
//Возврат: = 1, если элемент входит в группу, = о - в противном случае
Функция ПринадлежитРодителю(пЭлемент, пРодитель = "", пИмяРодителя = "", пТип = 1) Экспорт
	
	лРезультат	= ?(пТип = 1, 0, 1);
	Если НЕ ЗначениеЗаполнено(пЭлемент) Тогда
		Возврат 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(пРодитель) Тогда
		лИскомыйРодитель	= пЭлемент.Родитель;
		Пока ЗначениеЗаполнено(лИскомыйРодитель) = 0 Цикл
			Если лИскомыйРодитель = пРодитель Тогда
				лРезультат	= пТип;
				Прервать;
			КонецЕсли;
			
			лИскомыйРодитель	= лИскомыйРодитель.Родитель;
		КонецЦикла;
		
		Возврат лРезультат;
	КонецЕсли;
	
	Если пИмяРодителя <> "" Тогда
		лИскомыйРодитель	= пЭлемент.Родитель;
		Пока ЗначениеЗаполнено(лИскомыйРодитель) = 0 Цикл
			Если ВРег(лИскомыйРодитель.Наименование) = пИмяРодителя Тогда
				лРезультат	= пТип;
				Прервать;
			КонецЕсли;
			
			лИскомыйРодитель	= лИскомыйРодитель.Родитель;
		КонецЦикла;
		
		Возврат лРезультат;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции	//ПринадлежитРодителю()

//****************************************
Функция ОтборНеЗаполнен(пИмя) Экспорт
	
	ЭлементОтбора	= Отбор.Найти(пИмя);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЭлементОтбора.Использование Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	//ОтборНеЗаполнен()

//****************************************
Функция ПодходитПоОтбору(пИмя, пЗначение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(пЗначение) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭлементОтбора	= Отбор.Найти(пИмя);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЭлементОтбора.Использование Тогда
		Возврат Ложь; // отбор должен быть задан, иначе просто ничего не выгружается, кроме значений по умолчанию
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭлементОтбора.Имя) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
		Если пЗначение = ЭлементОтбора.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
		Если пЗначение <> ЭлементОтбора.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
		Если ЭлементОтбора.Значение.НайтиПоЗначению(пЗначение) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
		//Если ЭлементОтбора.Значение.НайтиПоЗначению(пЗначение.Родитель) <> Неопределено Тогда
		//	Возврат Истина;
		//КонецЕсли;
		
		Для Каждого лЭлемент Из ЭлементОтбора.Значение Цикл
			Если (пЗначение.ПринадлежитЭлементу(лЭлемент.Значение)) ИЛИ 
				(пЗначение = лЭлемент.Значение) Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЦикла;
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии Тогда
		//Если пЗначение.Родитель = ЭлементОтбора.Значение Тогда
		//	Возврат Истина;
		//КонецЕсли;
		
		Если (пЗначение.ПринадлежитЭлементу(ЭлементОтбора.Значение)) ИЛИ 
			(пЗначение = ЭлементОтбора.Значение) Тогда 
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
		Если ЭлементОтбора.Значение.НайтиПоЗначению(пЗначение) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		//Если ЭлементОтбора.Значение.НайтиПоЗначению(пЗначение.Родитель) = Неопределено Тогда
		//	Возврат Истина;
		//КонецЕсли;
		
		Для Каждого лЭлемент Из ЭлементОтбора.Значение Цикл
			Если (пЗначение.ПринадлежитЭлементу(лЭлемент.Значение)) ИЛИ 
				(пЗначение = лЭлемент.Значение) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		Возврат Истина;
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВИерархии Тогда
		Если пЗначение.Родитель <> ЭлементОтбора.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	//ПодходитПоОтбору()

//****************************************
Функция ПолучитьЗначениеДляПодстановки(пИмя) Экспорт
	
	ЭлементОтбора	= Отбор.Найти(пИмя);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Если НЕ ЭлементОтбора.Использование Тогда
		Возврат "";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭлементОтбора.Имя) Тогда
		Возврат "";
	КонецЕсли;
	Если ЭлементОтбора.ВидСравнения <> ВидСравнения.Равно Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ЭлементОтбора.Значение;
	
КонецФункции	//ПолучитьЗначениеДляПодстановки()

//****************************************
Функция ПолучитьПроизвольноеЗначение(пТип, пФильтр = "") Экспорт
	
	лЗначение	= "";
	лСпр	= Справочники[пТип].Выбрать();
	Пока лСпр.Следующий() Цикл
		Если лСпр.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		Если пФильтр <> "" Тогда
			Если НЕ ПодходитПоОтбору(пФильтр, лСпр.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		лЗначение		= лСпр.Ссылка;
		Прервать;
	КонецЦикла;
	
	Возврат лЗначение;
	
КонецФункции	//ПолучитьПроизвольноеЗначение()


//***********************************************//
//***********************************************//
// Процедуры работы с файлами и каталогами       //
//                   Н А Ч А Л О                 //
//***********************************************//
//***********************************************//

//*******************************************  
Функция СоздатьНесуществующиеПодкаталоги(пПутьКФайлу) Экспорт
	
	лПутьКФайлу	= пПутьКФайлу;
	
	лСЗнПодкаталоги	= Новый СписокЗначений();
	
	лЭтоФайл	= 1;
	лФайл	= Новый Файл(лПутьКФайлу);
	Пока лФайл.Существует() = 0 Цикл
		Если лЭтоФайл = 1 Тогда
			лЭтоФайл	= 0;
		Иначе
			лСЗнПодкаталоги.Добавить(лПутьКФайлу);
		КонецЕсли;
		
		р	= СтрДлина(лПутьКФайлу);
		Пока р > 1 Цикл
			Если Сред(лПутьКФайлу, р, 1) <> "\" Тогда
				р	= р - 1;
				Продолжить;
			КонецЕсли;
			
			лПутьКФайлу	= Лев(лПутьКФайлу, р - 1);
			Прервать;
		КонецЦикла;
		
		Если СтрДлина(лПутьКФайлу) <= 1 Тогда
			Прервать;
		КонецЕсли;
		
		лФайл	= Новый Файл(лПутьКФайлу);
	КонецЦикла;
	
	р	= лСЗнПодкаталоги.Количество();
	Пока р > 0 Цикл
		Попытка
			СоздатьКаталог(лСЗнПодкаталоги.Получить(р-1));
		Исключение
			Возврат 0;
		КонецПопытки;
		
		р	= р - 1;
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции	//СоздатьНесуществующиеПодкаталоги()

//*******************************************  
Функция СоздатьИмяФайлаИзШаблона(пШаблонФайлаВыгрузки) Экспорт
	
	лИмяФайлаВыгрузки	= пШаблонФайлаВыгрузки;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYYYMMDD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "ДФ=yyyyMMdd");
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYYYMMDD", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYMMDD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Сред(лСтрЗамены, 3);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYMMDD", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYYYMM");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 6);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYYYMM", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYMM");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 6);
		лСтрЗамены = Сред(лСтрЗамены, 3);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYMM", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "MMDD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Сред(лСтрЗамены, 5);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "MMDD", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYYY");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 4);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYYY", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YY");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 4);
		лСтрЗамены = Сред(лСтрЗамены, 3);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YY", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "DD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Сред(лСтрЗамены, 7);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "DD", лСтрЗамены);
	КонецЕсли;
	
	лДата	= ТекущаяДата();
	лЧас	= Строка(Час(лДата));
	лМин	= Строка(Минута(лДата));
	лСек	= Строка(Секунда(лДата));
	
	лЧас	= ?(СтрДлина(лЧас) = 2, лЧас, "0" + лЧас);
	лМин	= ?(СтрДлина(лМин) = 2, лМин, "0" + лМин);
	лСек	= ?(СтрДлина(лСек) = 2, лСек, "0" + лСек);
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "HHMMSS");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лЧас + лМин + лСек;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "HHMMSS", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "HHMM");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лЧас + лМин;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "HHMM", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "MMSS");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лМин + лСек;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "MMSS", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "HH");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лЧас;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "HH", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "SS");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лСек;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "SS", лСтрЗамены);
	КонецЕсли;
	
	Возврат лИмяФайлаВыгрузки;
	
КонецФункции	//СоздатьИмяФайлаИзШаблона()

//***********************************************//
//***********************************************//
// Процедуры работы с файлами и каталогами       //
//                    К О Н Е Ц                  //
//***********************************************//
//***********************************************//


//***********************************************//
//***********************************************//
// Процедуры для работы со списком объектов      //
//                   Н А Ч А Л О                 //
//***********************************************//
//***********************************************//

//****************************************
Функция НадоВыгружать(пИмя = "") Экспорт
	
	лИмя	= пИмя;
	Если НЕ флажокПодробно Тогда
		лСтрокаОбъекта	= ОбъектыВыгрузки.Найти(лИмя, "Название");
		Если лСтрокаОбъекта = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		лСтрокаГруппы	= ГруппыВыгрузки.Найти(лСтрокаОбъекта.КодГруппы, "КодГруппы");
		Если лСтрокаГруппы = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		лИмя	= лСтрокаГруппы.Название;
	КонецЕсли;
	
	лЭлементСЗн	= СЗнОбъекты.НайтиПоЗначению(лИмя);
	Если лЭлементСЗн = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат лЭлементСЗн.Пометка;
	
КонецФункции	//НадоВыгружать()

//***********************************************//
//***********************************************//
// Процедуры для работы со списком объектов      //
//                    К О Н Е Ц                  //
//***********************************************//
//***********************************************//


//***********************************************//
//***********************************************//
// Процедуры для работы с xml                    //
//                   Н А Ч А Л О                 //
//***********************************************//
//***********************************************//

//*******************************************
Процедура XMLДобавитьПотомка(pParent, пНазвание, пЗначение) Экспорт
	
	child		= ДокXML.CreateElement(пНазвание);
	child.text	= пЗначение;
	pParent.AppendChild(child);
	
КонецПроцедуры	//XMLДобавитьПотомка()

//*******************************************
Процедура ДобавитьПотомка(pParent, пНазвание, пЗначение) Экспорт
	
	Попытка
		XMLДобавитьПотомка(pParent, пНазвание, пЗначение);
	Исключение
		СообщитьПодробно("ОШИБКА: " + пНазвание + " - " + пЗначение, 2, 0, 2, "Ошибка");
	КонецПопытки;
	
КонецПроцедуры	//ДобавитьПотомка()

//****************************************
Процедура ДобавитьНоду(pParent, pChild) Экспорт
	
	Если pChild.childNodes().length() > 0 Тогда
		pParent.AppendChild(pChild);
	КонецЕсли;
	
КонецПроцедуры	//ДобавитьНоду()

//****************************************
Функция XMLВыполнитьОперацию(пТипОперации, пДокXML, пПараметр1 = "", пПараметр2 = "", пПараметр3 = "") Экспорт
	
	Если пТипОперации = "СоздатьXML" Тогда
		
		пДокXML	= ПолучитьCOMОбъект("", мТипXMLБибилиотеки);
		node = пДокXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
		пДокXML.preserveWhiteSpace = 1;
		пДокXML.AppendChild(node);
		
		group = пДокXML.CreateElement(пПараметр2);
		
		Возврат group;
		
	ИначеЕсли пТипОперации = "СохранитьXML" Тогда
		
		лИмяФайлаВыгрузки	= пПараметр1;
		group				= пПараметр2;
		
		Если group.childNodes().length() = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		пДокXML.AppendChild(group);
		
		лПолноеИмяФайлаВыгрузки	= мКаталогДанных + лИмяФайлаВыгрузки;
		Если СоздатьНесуществующиеПодкаталоги(лПолноеИмяФайлаВыгрузки) = 0 Тогда
			СообщитьПодробно("Не удалось сохранить файл #1" + лПолноеИмяФайлаВыгрузки, 2, 0, 2, "Ошибка");
			Возврат 0;
		КонецЕсли;
		
		Попытка
			пДокXML.Save(лПолноеИмяФайлаВыгрузки);
		Исключение
			Попытка
				пДокXML.Save(лПолноеИмяФайлаВыгрузки);
			Исключение
				СообщитьПодробно("Не удалось сохранить файл #2" + лПолноеИмяФайлаВыгрузки, 2, 0, 2, "Ошибка");
				СообщитьПодробно(ОписаниеОшибки(), 2, 0, 2, "Ошибка")
			КонецПопытки;
		КонецПопытки; 
		
		
		Возврат 1;
		
	ИначеЕсли пТипОперации = "ЗаписатьLog" Тогда
		
		лИмяФайлаВыгрузкиДляЛога	= пПараметр1;
		лИмяФайлаЛога				= пПараметр2;
		
		лПолноеИмяФайлаЛога	= мКаталогДанных + лИмяФайлаЛога;
		лФайл	= Новый Файл(лПолноеИмяФайлаЛога);
		Если лФайл.Существует() Тогда
			пДокXML.Load(лПолноеИмяФайлаЛога);
		Иначе
			пДокXML	= ПолучитьCOMОбъект("", мТипXMLБибилиотеки);
			node = пДокXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
			пДокXML.preserveWhiteSpace = 1;
			пДокXML.AppendChild(node);
		КонецЕсли;
		
		Попытка
			group	= пДокXML.selectSingleNode("fileslog");
			Если group = Неопределено Тогда
				group = пДокXML.CreateElement("fileslog");
				пДокXML.AppendChild(group);
			КонецЕсли;
		Исключение
			group = пДокXML.CreateElement("fileslog");
			пДокXML.AppendChild(group);
		КонецПопытки;
		
		Попытка
			chicago = group.selectSingleNode("chicago");
			Если chicago = Неопределено Тогда
				chicago = пДокXML.CreateElement("chicago");
				group.AppendChild(chicago);
			КонецЕсли;
		Исключение
			chicago = пДокXML.CreateElement("chicago");
			group.AppendChild(chicago);
		КонецПопытки;
		
		Попытка
			client = group.selectSingleNode("client");
			Если client = Неопределено Тогда
				client = пДокXML.CreateElement("client");
				group.AppendChild(client);
			КонецЕсли;
		Исключение
			client = пДокXML.CreateElement("client");
			group.AppendChild(client);
		КонецПопытки;
		
		лПозиция	= Найти(лИмяФайлаВыгрузкиДляЛога, "\");
		Пока лПозиция <> 0 Цикл
			лИмяФайлаВыгрузкиДляЛога	= Сред(лИмяФайлаВыгрузкиДляЛога, лПозиция + 1);
			лПозиция	= Найти(лИмяФайлаВыгрузкиДляЛога, "\");
		КонецЦикла;
		Если Прав(лИмяФайлаВыгрузкиДляЛога, 4) = ".xml" Тогда
			лИмяФайлаВыгрузкиДляЛога	= Лев(лИмяФайлаВыгрузкиДляЛога, СтрДлина(лИмяФайлаВыгрузкиДляЛога) - 4);
		КонецЕсли;
		Node = пДокXML.CreateElement(лИмяФайлаВыгрузкиДляЛога);
		Node.SetAttribute("status", "false");
		client.AppendChild(Node);
		
		пДокXML.Save(мКаталогДанных + "filelog.xml");
		
		Возврат 1;
		
	КонецЕсли;
	
КонецФункции	//XMLВыполнитьОперацию()

//****************************************
Функция syncВыполнитьОперацию(пТипОперации, пПараметр1 = "", пПараметр2 = "") Экспорт
	
	Если пТипОперации = "ЗагрузитьВЧикаго" Тогда
		
		//Если флажокЗагрузитьВЧикаго Тогда
		Если пПараметр1 = "Документы" Тогда
			//ЗапуститьКомандуСистемы("nbk_sync_get_docs.bat", "nbk_u_sync_get_docs.bat");
		ИначеЕсли пПараметр1 = "Справочники" Тогда
			//ЗапуститьКомандуСистемы("nbk_sync_get_refs.bat", "nbk_u_sync_get_refs.bat");
		ИначеЕсли пПараметр1 = "Регистры" Тогда
			//ЗапуститьКомандуСистемы("nbk_sync_get_regs.bat", "nbk_u_sync_get_regs.bat");
		КонецЕсли;
		//КонецЕсли;
		
	ИначеЕсли пТипОперации = "ЧтоНибудьДругое" Тогда
		Возврат 1;
	КонецЕсли;
	
КонецФункции	//syncВыполнитьОперацию()

//****************************************
Функция ДатаВФорматеXMLЛога(пДата, пВремя)
	
	лСтрокаДата = Формат(пДата, "ДФ=""гггг-ММ-дд""");
	лСтрокаВремя 	= пВремя;
	
	Возврат лСтрокаДата + "Т" + лСтрокаВремя + мСтрокаЧасовойПояс;
	
КонецФункции

Процедура xmlЛогДобавитьПотомка(pParent, пНазвание, пЗначение)

	пДокВладелец= pParent.ownerDocument;
	Если пДокВладелец = Неопределено Тогда
		пДокВладелец = pParent; 
	КонецЕсли;
	
	child		= пДокВладелец.CreateElement(пНазвание);
	child.text	= пЗначение;
	pParent.AppendChild(child);
    	
КонецПроцедуры	//xmlДобавитьПотомка()

// Процедура делает запись в XML-лог обмена
// Параметры:
//
//BeginDate - дата начала выполнения события, если параметр не задан, заполняется текущей датой
//BeginTime - время начала выполнения события, если параметр не задан, заполняется текущим временем
//
//Description - здесь будет вся информация о событии загрузки или выгрузки через разделитель "точка с запятой".  ";"
//Содержание поля Description:
//	Интеграция с УС; Операция обмена; Объект (как в xml); Описание информации; Количественная мера информации
//Пример Description:
//	Интеграция с УС; Выгрузка данных; currencies; Выгружено элементов; 5 
//
//ID - внешний код, может отсутствовать. Можно использовать когда ошибка в каком-то документе
//
//State - Описывает состояние события. Ошибка, В процессе или Успешно. Для нас интересны только Ошибка (сработает автоинформатор) и событие Успешно. 
//Возможные значения:
//	Audit_State_Fail        Ошибка
//	Audit_State_Progress    В процессе
//	Audit_State_Success    	Успешно
//
//Reason
//Возможные значения:
//	Audit_Reason_Error            	Ошибка данных
//	Audit_Reason_NoConnect        	Отсутствие связи
//	Audit_Reason_NoDataForObject    Нет данных для загрузки по текущему БО
//	Audit_Reason_NotDataForImport   Нет данных для загрузки
//	Audit_Reason_Null            	Пустое значение
//	Audit_Reason_SystemFail        	Сбой системы
//
//EventType - Тип события
//	всегда Audit_Type_ERP_to_Chicago	Обозначает выгрузку из УС в Чикаго

Процедура ВывестиВXMLЛог(BeginDate="", BeginTime="", Description="", ID="", State="Audit_State_Success", Reason="Audit_Reason_Null", EventType="Audit_Type_ERP_to_Chicago")
		
	Если (Description="")И(ID="") Тогда
		Возврат;
	КонецЕсли;
	
	BeginDate = ?(BeginDate="", ТекущаяДата(), BeginDate); 
	BeginTime = ?(BeginTime="", XMLВернутьВремя(), BeginTime);
	
	лDescription = СокрЛП("Интеграция с УС; Выгрузка данных; "+Description);
		
	
	LogDataExchangeAudit = ЛогXML.CreateElement("LogDataExchangeAudit");

	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "State"		, State);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "EventType"	, EventType);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "BeginDate"	, ДатаВФорматеXMLЛога(BeginDate, BeginTime));
	
	//EndDate = ЛогXML.CreateElement("EndDate");
	//EndDate.SetAttribute("xsi:nil", "true");
	//LogDataExchangeAudit.AppendChild(EndDate);
	
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "EndDate"		, ДатаВФорматеXMLЛога(ТекущаяДата(),XMLВернутьВремя()));
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "ID"			, ID);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "Description"	, лDescription);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "Reason"		, Reason);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "IsUpdate"		, "true");
	
	groupLogXML.AppendChild(LogDataExchangeAudit);
	
КонецПроцедуры

//***********************************************//
//***********************************************//
// Процедуры для работы с xml                    //
//                    К О Н Е Ц                  //
//***********************************************//
//***********************************************//


//***********************************************//
//***********************************************//
// Процедуры для формирования отчета             //
//                   Н А Ч А Л О                 //
//***********************************************//
//***********************************************//


Функция ПреобразоватьДатуВСтроку(пДата) Экспорт
	
	лДень	= Строка(День(пДата));
	лМесяц	= Строка(Месяц(пДата));
	лГод	= Строка(Год(пДата));
	
	Если СтрДлина(лДень) < 2 Тогда
		лДень	= "0" + лДень;
	КонецЕсли;
	
	Если СтрДлина(лМесяц) < 2 Тогда
		лМесяц	= "0" + лМесяц;
	КонецЕсли;
	
	Если СтрДлина(лГод) < 2 Тогда
		лГод	= "0" + лГод;
	КонецЕсли;
	
	Возврат лГод + лМесяц + лДень;
	
КонецФункции	//ПреобразоватьДатуВСтроку()

//*******************************************
Функция отчПолучитьИмяФайлаОтчета(пДата) Экспорт
	
	лСтрДата		= ПреобразоватьДатуВСтроку(пДата);
	лКаталогОтчетов	= мКаталогДанных + "reports\";
	лИмяФайла		= СокрЛП("  "+Строка(мИнфоКодДистрибьютора) + "_" + лСтрДата + ".mxl");
	лПолноеИмяФайла	= лКаталогОтчетов + лИмяФайла;
	
	СоздатьНесуществующиеПодкаталоги(лПолноеИмяФайла);
	
	Возврат лПолноеИмяФайла;
	
КонецФункции	//отчПолучитьИмяФайлаОтчета()

//*******************************************
Процедура отчПросмотретьОтчет() Экспорт
	
	лНаименованиеОтчета	= "" + ДатаКонца + ": отчет по синхронизации с ""ST-Чикаго""";
	
	лПолноеИмяФайла	= отчПолучитьИмяФайлаОтчета(ДатаКонца);
	лФайл	= Новый Файл(лПолноеИмяФайла);
	Если Не лФайл.Существует() Тогда
		#Если Клиент Тогда
			Сообщить("Отчет по синхронизации за " + ДатаКонца + " не найден!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	мТаблицаОтчета.Прочитать(лПолноеИмяФайла);
	мТаблицаОтчета.ТолькоПросмотр	= Истина;
	мТаблицаОтчета.Показать(лНаименованиеОтчета, "");
	
КонецПроцедуры	//отчПросмотретьОтчет()

//*******************************************
Процедура отчДобавитьВОтчет(пСЗнДанные = "", пСекция = "Действие", пВыводитьДату = 0, пВыводитьВремя = 0) Экспорт
	
	Если Не мИспользоватьЛогСообщений Тогда
		Возврат;
	КонецЕсли;
	
	Если пСЗнДанные = "" Тогда
		Возврат;
	КонецЕсли;
	
	лОбласть	= мМакетОтчета.ПолучитьОбласть(пСекция + "|Вертикальная");
	Если ТипЗнч(пСЗнДанные) = Тип("СписокЗначений") Тогда
		лОбласть.Параметры.Текст		= пСЗнДанные.Получить(0).Значение;
		лОбласть.Параметры.Параметр1	= пСЗнДанные.Получить(1).Значение;
		лОбласть.Параметры.Параметр2	= пСЗнДанные.Получить(2).Значение;
		мТаблицаОтчета.Вывести(лОбласть);
		
		Для р = 4 По пСЗнДанные.Количество() Цикл
			лОбласть	= мМакетОтчета.ПолучитьОбласть(пСекция + "|Реквизит");
			лОбласть.Параметры.Реквизит	= пСЗнДанные.Получить(р-1).Значение;
			мТаблицаОтчета.Присоединить(лОбласть);
		КонецЦикла;
	Иначе
		лОбласть.Параметры.Текст		= пСЗнДанные;
		лОбласть.Параметры.Параметр1	= ?(пВыводитьДату = 0, "", XMLВернутьДату());
		лОбласть.Параметры.Параметр2	= ?(пВыводитьВремя = 0, "", XMLВернутьВремя());
		мТаблицаОтчета.Вывести(лОбласть);
	КонецЕсли;
	
КонецПроцедуры	//отчДобавитьВОтчет()

//*******************************************
Процедура отчДобавитьВОтчетСтроку(пСтрока = "", пСекция = "Информация") Экспорт
	
	Если Не мИспользоватьЛогСообщений Тогда
		Возврат;
	КонецЕсли;
	
	Если пСтрока = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если пСекция = "Ошибка" Тогда
		Если пСтрока = мСтрокаСообщения Тогда
			Возврат;
		КонецЕсли;
		мСтрокаСообщения	= пСтрока;
	КонецЕсли;
	
	лОбласть	= мМакетОтчета.ПолучитьОбласть(пСекция + "|Вертикальная");
	лОбласть.Параметры.Текст		= пСтрока;
	мТаблицаОтчета.Вывести(лОбласть);
	
КонецПроцедуры	//отчДобавитьВОтчетСтроку()

//*******************************************
Процедура отчОткрытьОтчет() Экспорт
	
	Если Не мИспользоватьЛогСообщений Тогда
		Возврат;
	КонецЕсли;
	
	мНаименованиеОтчета	= "" + ТекущаяДата() + ": отчет по синхронизации с ""ST-Чикаго""";
	
	мТаблицаОтчета.Очистить();
	
	лПолноеИмяФайла	= отчПолучитьИмяФайлаОтчета(ТекущаяДата());
	лФайл	= Новый Файл(лПолноеИмяФайла);
	Если лФайл.Существует() Тогда
		мТаблицаОтчета.Прочитать(лПолноеИмяФайла);
	КонецЕсли;
	
	мСтрокаСообщения	= "";
	лОбласть	= мМакетОтчета.ПолучитьОбласть("Пустая|Вертикальная");
	мТаблицаОтчета.Вывести(лОбласть);
	
КонецПроцедуры	//отчОткрытьОтчет()

//*******************************************
Процедура отчЗакрытьОтчет() Экспорт
	
	Если Не мИспользоватьЛогСообщений Тогда
		Возврат;
	КонецЕсли;
	
	лНаименованиеОтчета	= "" + ДатаКонца + ": отчет по синхронизации с ""ST-Чикаго""";
	
	лПолноеИмяФайла	= отчПолучитьИмяФайлаОтчета(ТекущаяДата());
	//мТаблицаОтчета.ТолькоПросмотр	= Истина;
	//мТаблицаОтчета.Показать(лНаименованиеОтчета, "");
	мТаблицаОтчета.Вывод	= ИспользованиеВывода.Разрешить;
	мТаблицаОтчета.Записать(лПолноеИмяФайла);
	
КонецПроцедуры	//отчЗакрытьОтчет()

//***********************************************//
//***********************************************//
// Процедуры для формирования отчета             //
//                    К О Н Е Ц                  //
//***********************************************//
//***********************************************//


//****************************************
Функция ДобавитьОбъект(пДокXML, пПредставление, пXMLСекция, пСообщать = Истина) Экспорт
	мСчВыгрузки=мСчВыгрузки+1;
	мКолвоОбъектов	= мКолвоОбъектов + 1;
	object	= пДокXML.CreateElement(пXMLСекция);
	
	Возврат object;
	
КонецФункции	//ДобавитьОбъект()

//*******************************************  
Функция ПолучитьУдаленныеДокументы(пТипОбъекта) Экспорт
	
	лМасУдаленныеДокументы	= Новый ТаблицаЗначений;
	
	Если (пТипОбъекта = "")ИЛИ(НЕ мИспользоватьСостояния) Тогда
		Возврат лМасУдаленныеДокументы;
	КонецЕсли;

	Запрос	= Новый Запрос();
	
	ТекстЗапроса	= 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СТ_СостоянияОбъектов.КодВнутренний,
	|	СТ_СостоянияОбъектов.КодВнешний,
	|	СТ_СостоянияОбъектов.ТипОбъекта
	|ИЗ
	|	РегистрСведений.СТ_СостоянияОбъектов КАК СТ_СостоянияОбъектов
	|ГДЕ
	|	СТ_СостоянияОбъектов.ТипОбъекта = &ТипОбъекта
	|	И НЕ СТ_СостоянияОбъектов.КодВнутренний В (&СписокВнутрКодовВыгруженныхДокументов)
	|	И СТ_СостоянияОбъектов.ДатаЗаписи >= &ДатаНачала
	|	И СТ_СостоянияОбъектов.ДатаЗаписи <= &ДатаКонца";
	
	Запрос.Текст	= ТекстЗапроса;
	Запрос.УстановитьПараметр("ТипОбъекта"	, пТипОбъекта);
	Запрос.УстановитьПараметр("ДатаНачала"	, НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКонца"	, КонецДня(ДатаКонца));
	Запрос.УстановитьПараметр("СписокВнутрКодовВыгруженныхДокументов", спкВыгруженыеДокументы);
	
	Попытка
		лТЗнЭлементы	= Запрос.Выполнить().Выгрузить();
	Исключение
		СообщитьПодробно("Не удалось выполнить запрос по удаленным документам ""пТипОбъекта""!", 2, 0, 2, "Ошибка");
		Возврат лМасУдаленныеДокументы;
	КонецПопытки;
	
	лМасУдаленныеДокументы	= лТЗнЭлементы.Скопировать(, "КодВнешний,КодВнутренний");
	
	Возврат лМасУдаленныеДокументы;
	
КонецФункции	//ПолучитьУдаленныеДокументы()

//*******************************************
Функция ПолучитьКодХеш(пДокумент, пТип) Экспорт
	
	Если пДокумент = "" Тогда
		Возврат 0;
	КонецЕсли;
	
	лСтрЦифры	= "0123456789";
	
	лПарам1	= День(пДокумент.Дата);
	лПарам2	= Месяц(пДокумент.Дата);
	лПарам3	= Год(пДокумент.Дата);
	
	лНомерДок	= пДокумент.Номер;
	
	Для р = 1 По СтрДлина(лНомерДок) Цикл
		лБуква	= Сред(лНомерДок, р, 1);
		Если Найти(лСтрЦифры, лБуква) = 0 Тогда
			лНомерДок	= СтрЗаменить(лНомерДок, лБуква, "з");
		КонецЕсли;
	КонецЦикла;
	лНомерДок	= СтрЗаменить(лНомерДок, "з", "");
	лПарам4	= Число(лНомерДок);
	
	Попытка
		лПарам5	= ?(Метаданные.Документы[пТип].Реквизиты.Найти("Склад") <> Неопределено, Число(пДокумент.Склад.Код), 0);
	Исключение
		лПарам5	= 0;
	КонецПопытки;
	Попытка
		лПарам6	= ?(Метаданные.Документы[пТип].Реквизиты.Найти("Контрагент") <> Неопределено, Число(пДокумент.Контрагент.Код), 0);
	Исключение
		лПарам6	= 0;
	КонецПопытки;
	Попытка
		лПарам7	= ?(Метаданные.Документы[пТип].Реквизиты.Найти("ВалютаДокумента") <> Неопределено, Число(пДокумент.ВалютаДокумента.Код), 0);
	Исключение
		лПарам7	= 0;
	КонецПопытки;
	
	лПарам8	= 0;
	лПарам9	= 0;
	лПарамА	= 0;
	Если Метаданные.Документы[пТип].ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
		лПарам8	= Число(пДокумент.Товары.Количество());
		лПарам9	= ?(Метаданные.Документы[пТип].ТабличныеЧасти["Товары"].Реквизиты.Найти("Сумма") <> Неопределено, Число(пДокумент.Товары.Итог("Сумма")), 0);
		лПарамА	= ?(Метаданные.Документы[пТип].ТабличныеЧасти["Товары"].Реквизиты.Найти("СуммаНДС") <> Неопределено, Число(пДокумент.Товары.Итог("СуммаНДС")), 0);
	КонецЕсли;
	
	лХешКод	= лПарам1 + лПарам2 + лПарам3 + лПарам4 + лПарам5 + 
	лПарам6 + лПарам7 + лПарам8 + лПарам9 + лПарамА;
	
	Возврат лХешКод;
	
КонецФункции	//ПолучитьКодХеш()

//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
Функция ПолучитьКодХеш2(пДокумент, пТип) Экспорт
	
	Если пДокумент = "" Тогда
		Возврат 0;
	КонецЕсли;
	
	лСтрЦифры	= "0123456789";
	
	лПарам1	= День(пДокумент.Дата);
	лПарам2	= Месяц(пДокумент.Дата);
	лПарам3	= Год(пДокумент.Дата);
	
	лНомерДок	= пДокумент.Номер;
	
	Для р = 1 По СтрДлина(лНомерДок) Цикл
		лБуква	= Сред(лНомерДок, р, 1);
		Если Найти(лСтрЦифры, лБуква) = 0 Тогда
			лНомерДок	= СтрЗаменить(лНомерДок, лБуква, "з");
		КонецЕсли;
	КонецЦикла;
	лНомерДок	= СтрЗаменить(лНомерДок, "з", "");
	лПарам4	= Число(лНомерДок);
	
	Попытка
		лПарам5	= ?(Метаданные.Документы[пТип].Реквизиты.Найти("Склад") <> Неопределено, Число(пДокумент.СкладКод), 0);
	Исключение
		лПарам5	= 0;
	КонецПопытки;
	Попытка
		лПарам6	= ?(Метаданные.Документы[пТип].Реквизиты.Найти("Контрагент") <> Неопределено, Число(пДокумент.КонтрагентКод), 0);
	Исключение
		лПарам6	= 0;
	КонецПопытки;
	Попытка
		лПарам7	= ?(Метаданные.Документы[пТип].Реквизиты.Найти("ВалютаДокумента") <> Неопределено, Число(пДокумент.ВалютаДокументаКод), 0);
	Исключение
		лПарам7	= 0;
	КонецПопытки;
	
	лПарам8	= 0;
	лПарам9	= 0;
	лПарамА	= 0;
	Если Метаданные.Документы[пТип].ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
		лПарам8	= Число(пДокумент.ТоварыКоличествоСтрок);
		лПарам9	= ?(Метаданные.Документы[пТип].ТабличныеЧасти["Товары"].Реквизиты.Найти("Сумма") <> Неопределено, Число(пДокумент.ТоварыСумма), 0);
		лПарамА	= ?(Метаданные.Документы[пТип].ТабличныеЧасти["Товары"].Реквизиты.Найти("СуммаНДС") <> Неопределено, Число(пДокумент.ТоварыСуммаНДС), 0);
	КонецЕсли;
	
	лХешКод	= лПарам1 + лПарам2 + лПарам3 + лПарам4 + лПарам5 + 
	лПарам6 + лПарам7 + лПарам8 + лПарам9 + лПарамА;
	
	Возврат лХешКод;
	
КонецФункции	//ПолучитьКодХеш()

//конец изменений 

//*******************************************
Функция МПолучитьСтавкуНДС(пСтавкаНДС) Экспорт
	
	Если пСтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ пСтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;
	ИначеЕсли пСтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ пСтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 10;
	ИначеЕсли пСтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ пСтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 18;
	//++ Spl_Апроф 11.11.2014 (k.russkih@a-prof.ru)
	ИначеЕсли пСтавкаНДС = Перечисления.СтавкиНДС.БезНДС ИЛИ пСтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Возврат 0;
	//-- Spl_Апроф
	КонецЕсли;
	
	Возврат 18;
	
КонецФункции	//МПолучитьСтавкуНДС()

//****************************************
// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ФорматДаты(пДата) Экспорт
	
	лДата  = пДата;
	
	Если Найти(лДата,"/") = 0 Тогда	
		Возврат лДата;
	КонецЕсли; 
	лФигня = Прав(лДата,3);
	лДата  = СтрЗаменить(лДата,лФигня,"");
	лДата  = СтрЗаменить(лДата,"/",".");
	лДата  = СокрЛП(лДата);
	//Если формат даты такой 7/25/2009
	лДата  = ?(Прав(Лев(лДата,2),1) = ".","0"+лДата,лДата);
	
	//Если формат даты такой 07/5/2009
	лДата  = ?(Прав(Лев(лДата,5),1) = ".",СтрЗаменить(лДата,"."+Прав(Лев(лДата,5),2),".0"+Прав(Лев(лДата,4),1)+"."),лДата);
	Сообщить("--------------------");
	//Менят число и месяц местами
	лМесяц = Лев(лДата,2);			
	лЧисло = Прав(Лев(лДата,5),2);
	лДата  = СтрЗаменить(лДата,лМесяц,лЧисло);
	лДата  = Дата(СтрЗаменить(лДата,"."+лЧисло,"."+лМесяц));
	
	Возврат лДата;
КонецФункции // ФорматДаты (пДата)()

//***********************************************//
//***********************************************//
// Процедуры выгрузки справочников               //
//                   Н А Ч А Л О                 //
//***********************************************//
//***********************************************//


//****************************************
Процедура ВыгрузитьПодчАктивность(group, пТипАктивации = 1) Экспорт
	
	//		<activityhistory>
	//			<event>
	//				<eventtype/>	<!--тип события, 0 - Деактивация, 1 - Активация-->
	//				<eventdate/>	<!--дата события-->
	//			</event>
	//		</activityhistory>
	
	activityhistory	= ДокXML.CreateElement("activityhistory");
	
	event = ДокXML.CreateElement("event");
	
	ДобавитьПотомка(event, "eventtype"	, пТипАктивации);
	ДобавитьПотомка(event, "eventdate"	, НачалоГода(мДатаОбработки));
	
	activityhistory.AppendChild(event);
	
	ДобавитьНоду(group, activityhistory);
	
КонецПроцедуры	//ВыгрузитьПодчАктивность()

//****************************************
Процедура ВыгрузитьПодчАтрибуты(group, пКодАтрибута, пНазвание, пЗначение) Экспорт
	
	//		<attributes>
	//			<attribute>
	//				<attributecode/>	<!--код дополнительного атрибута-->
	//				<name/>				<!--название атрибута-->
	//				<valuetype/>		<!--тип значения (bool(13), integer(14), string(15), double(16), datetime(17))-->
	//				<value/>			<!--значение дополнительного атрибута-->
	//			</attribute>
	//		</attributes>
	
	attributes	= ДокXML.CreateElement("attributes");
	
	attribute = ДокXML.CreateElement("attribute");
	
	ДобавитьПотомка(attribute, "attributecode"	, пКодАтрибута);
	ДобавитьПотомка(attribute, "name"			, пНазвание);
	ДобавитьПотомка(attribute, "valuetype"		, "string");
	ДобавитьПотомка(attribute, "value"			, пЗначение);
	
	attributes.AppendChild(attribute);
	
	ДобавитьНоду(group, attributes);
	
КонецПроцедуры	//ВыгрузитьПодчАтрибуты()

//****************************************
Функция ВыгрузитьСпрОКЕИ(group, пИмяXML) Экспорт
	
	//<units>	 <!--единицы измерения товаров-->
	//	<unit>
	//		<code/>		<!--код элемента в УС-->
	//		<name/>		<!--наименование единицы измерения-->
	//		<deleted/>	<!--признак того, что элемент был удален-->
	//		
	//		<shortname/>	<!--краткое наименование единицы измерения-->
	//	</unit>
	//</units>
	
	units = ДокXML.CreateElement("units");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	ЗапросЕд = новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                        |	ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Ссылка КАК Ссылка,
	                        |	ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Наименование КАК Наименование,
	                        |	ЕдиницыИзмерения.ЕдиницаПоКлассификатору.НаименованиеПолное КАК НаименованиеПолное
	                        |ИЗ
	                        |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	                        |ГДЕ
	                        |	НЕ ЕдиницыИзмерения.ПометкаУдаления
	                        |	И ЕдиницыИзмерения.Владелец В(&тзнГруппаНоменклатуры)
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	ЕдиницыИзмерения.ЕдиницаПоКлассификатору,
	                        |	ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Ссылка,
	                        |	ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Наименование,
	                        |	ЕдиницыИзмерения.ЕдиницаПоКлассификатору.НаименованиеПолное");
	 
	ЗапросЕд.УстановитьПараметр("тзнГруппаНоменклатуры",тзнГруппаНоменклатуры);
	ВыборкаЕд = ЗапросЕд.Выполнить().Выбрать();
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	Пока ВыборкаЕд.Следующий() Цикл
		
		лЭлемент		= ВыборкаЕд.Ссылка;
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		Если НЕ ЗначениеЗаполнено(лЭлемент) Тогда		
			продолжить;	
		КонецЕсли;
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		unit	= ДобавитьОбъект(ДокXML, Строка(лЭлемент), "unit");
		
		//начало изменений Ожиганов 17.02.2016 49181 изменения выгружаемых объектов в части единиц 
		//ДобавитьПотомка(unit, "code"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент));
		//ДобавитьПотомка(unit, "code"		, ВыборкаЕд.Наименование);
		ДобавитьПотомка(unit, "code"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент));
		//конец изменений 	
		ДобавитьПотомка(unit, "name"		, ВыборкаЕд.НаименованиеПолное);
		ДобавитьПотомка(unit, "deleted"		, 0);
		
		ДобавитьПотомка(unit, "shortname"	, ВыборкаЕд.Наименование);
		
		ДобавитьНоду(units, unit);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;

	ДобавитьНоду(group, units);
	
КонецФункции	//ВыгрузитьСпрОКЕИ()

//****************************************
Функция ВыгрузитьСпрВалюты(group, пИмяXML) Экспорт
	
	//<currencies> <!--валюты-->
	//	<currency>
	//		<code/>			<!--код элемента в УС-->
	//		<name/>			<!--наименование nvarchar(50)-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<currencycode/>		<!--международный код-->
	//		<notation/>		<!--международная нотация-->
	//		<isbasecurrency/>	<!--признак того, что валюта явлется основной-->
	//		<rate/>			<!--курс по отношению к основной валюте-->
	//	</currency>
	//</currencies>
	
	currencies = ДокXML.CreateElement("currencies");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	лСпр	= Справочники.Валюты.Выбрать();
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Пока лСпр.Следующий() Цикл
		лЭлемент		= лСпр.Ссылка;
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		Если лСпр.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		currency	= ДобавитьОбъект(ДокXML, Строка(лСпр), "currency");
		
		лСтруктураКурсЦены	= МодульВалютногоУчета.ПолучитьКурсВалюты(лЭлемент, мДатаОбработки);
		лКурсЦены			= лСтруктураКурсЦены.Курс;

		ДобавитьПотомка(currency, "code"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент));
		ДобавитьПотомка(currency, "name"		, СокрЛП(лСпр.НаименованиеПолное));
		ДобавитьПотомка(currency, "deleted"		, 0);
		
		ДобавитьПотомка(currency, "currencycode"	, лСпр.Код);
		ДобавитьПотомка(currency, "notation"		, СокрЛП(лСпр.Наименование));
		ДобавитьПотомка(currency, "isbasecurrency"	, ?(мКонстантаВалюта = лЭлемент, 1, 0));
		ДобавитьПотомка(currency, "rate"			, лКурсЦены);
		
		ДобавитьНоду(currencies, currency);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
	ДобавитьНоду(group, currencies);
	
КонецФункции	//ВыгрузитьСпрВалюты()

//****************************************
Функция ВыгрузитьСпрСтавкиНДС(group, пИмяXML) Экспорт
	
	//<VATRates> <!--ставки НДС-->
	//	<vatrate>
	//		<code/>		<!--код элемента в УС-->
	//		<name/>		<!--наименование ставки НДС-->
	//		<deleted/>	<!--признак того, что элемент был удален-->
	//		
	//		<rate/>		<!--процент ставки НДС (15, 4)-->
	//	</vatrate>
	//</VATRates>
	
	VATRates = ДокXML.CreateElement("VATRates");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Для Каждого лЭлемент Из Перечисления.СтавкиНДС Цикл
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		// принимаем только ставки 0,10,18 и 20%
		Если (лЭлемент = Перечисления.СтавкиНДС.НДС18_118) или (лЭлемент = Перечисления.СтавкиНДС.НДС10_110)
			или (лЭлемент = Перечисления.СтавкиНДС.НДС0) или (лЭлемент = Перечисления.СтавкиНДС.НДС20_120) Тогда
			Продолжить;
		Конецесли;
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		vatrate	= ДобавитьОбъект(ДокXML, Строка(лЭлемент), "vatrate");
		
		ДобавитьПотомка(vatrate, "code"		, Перечисления.СтавкиНДС.Индекс(лЭлемент) + 1);
		ДобавитьПотомка(vatrate, "name"		, Строка(лЭлемент));
		ДобавитьПотомка(vatrate, "deleted"	, 0);
		
		ДобавитьПотомка(vatrate, "rate"		, МПолучитьСтавкуНДС(лЭлемент));
		
		ДобавитьНоду(VATRates, vatrate);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
	ДобавитьНоду(group, VATRates);
	
КонецФункции	//ВыгрузитьСпрСтавкиНДС()

//****************************************
Функция ВыгрузитьСпрТипыЦен(group, пИмяXML) Экспорт
	
	//<pricetypes>  <!--типы цен-->
	//	<pricetype>
	//		<code/>		<!--код элемента в УС-->
	//		<name/>		<!--наименование типа цен-->
	//		<deleted/>	<!--признак того, что элемент был удален-->
	//		
	//		<basecode/>	<!--код базового типа цен-->
	//		<rate/>		<!--процент наценки к базовому типу цены (15,4)-->
	//		<currencycode/>	<!--код валюты-->
	//	</pricetype>
	//</pricetypes>
	
	
	pricetypes	= ДокXML.CreateElement("pricetypes");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Для Каждого Элемент Из тзнТипыЦен Цикл
		//////ОбработкаПрерыванияПользователя();
		
		лЭлемент		= Элемент.ТипЦен;
		Если ЗначениеЗаполнено(лЭлемент) тогда
			
			//////////////////////////////
			//основное тело цикла (начало)
			//добавление элемента в xml
			//////////////////////////////
			
			pricetype	= ДобавитьОбъект(ДокXML, Строка(лЭлемент), "pricetype");
			
				ДобавитьПотомка(pricetype, "code"			, СТ_ЗначениеВСтрокуВнутр(лЭлемент));
				ДобавитьПотомка(pricetype, "name"			, СокрЛП(лЭлемент.Наименование));
				ДобавитьПотомка(pricetype, "deleted"		, ?(лЭлемент.ПометкаУдаления = Истина,"1","0"));
				ДобавитьПотомка(pricetype, "basecode"		, "");   
				ДобавитьПотомка(pricetype, "rate"			, "");	
				ДобавитьПотомка(pricetype, "currencycode"	, СТ_ЗначениеВСтрокуВнутр(мКонстантаВалюта));
			
			ДобавитьНоду(pricetypes, pricetype);
			
			//////////////////////////////
			//основное тело цикла (конец)
			//добавление элемента в xml
			//////////////////////////////
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьНоду(group, pricetypes);
	
КонецФункции	//ВыгрузитьСпрТипыЦен()

//****************************************
Функция ВыгрузитьСпрСклады(group, пИмяXML) Экспорт
	
	//<stores> <!--склады-->
	//	<store>
	//		<code/>			<!--код элемента в УС-->
	//		<name/>			<!--наименование склада-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<storekeepercode/>	<!-- код кладовщика - emloyees-->
	//		<storetype/>		<!--тип склада - 1=Автомобиль,2=Наземный,3=Временный-->
	//	</store>
	//</stores>
	
	stores	= ДокXML.CreateElement("stores");
	
	Для каждого ТекЗнчС из спкСклады Цикл
		лЭлемент = ТекЗнчС.Значение;
		       
		store	= ДобавитьОбъект(ДокXML, Строка(лЭлемент), "store");
		
		ДобавитьПотомка(store, "code"			, СТ_ЗначениеВСтрокуВнутр(лЭлемент));
		ДобавитьПотомка(store, "name"			, СокрЛП(лЭлемент.Наименование));
		ДобавитьПотомка(store, "deleted"		, ?(лЭлемент.ПометкаУдаления = Истина,"1","0"));
		
		//ДобавитьПотомка(store, "storekeepercode", "");	//СТ_ЗначениеВСтрокуВнутр(лСпр.МОЛ));	//Строка
		ДобавитьПотомка(store, "storetype"		, 2);
		
		ДобавитьНоду(stores, store);
		
	КонецЦикла;
	ДобавитьНоду(group, stores);
	
КонецФункции	//ВыгрузитьСпрСклады()

//****************************************
Функция ВыгрузитьСпрФирмы(group, пИмяXML) Экспорт
	
	//<firms>	<!--фирмы-->
	//	<firm>
	//		<code/>				<!--код элемента в УС-->
	//		<name/>				<!--наименование фирмы-->
	//		<deleted/>			<!--признак того, что элемент был удален-->
	//		
	//		<bankaccount/>			<!--расчетный счет-->
	//		<ownjuridicalpersoncode/>	<!--код юридического лица - ownjuridicalpersons-->
	//	</firm>
	//</firms>
	
	firms	= ДокXML.CreateElement("firms");
	
	
	Если ЗначениеЗаполнено(мКонстантаФирма) Тогда
			// не задан в отборе, добавляем принудительно
			firm	= ДобавитьОбъект(ДокXML, Строка(мКонстантаФирма), "firm");
			
			ДобавитьПотомка(firm, "code"					, СТ_ЗначениеВСтрокуВнутр(мКонстантаФирма));
			ДобавитьПотомка(firm, "name"					, СокрЛП(мКонстантаФирма.Наименование));
			ДобавитьПотомка(firm, "deleted"					, ?(мКонстантаФирма.ПометкаУдаления = Истина,"1","0"));
			                                                  
			Если ЗначениеЗаполнено(мКонстантаФирма.ОсновнойБанковскийСчет) Тогда
				ДобавитьПотомка(firm, "bankaccount"			, СокрЛП(мКонстантаФирма.ОсновнойБанковскийСчет.НомерСчета));
			КонецЕсли;
			ДобавитьПотомка(firm, "ownjuridicalpersoncode"	, СТ_ЗначениеВСтрокуВнутр(мКонстантаФирма));
			
			ДобавитьНоду(firms, firm);
			
			// добавялем в список значений
	КонецЕсли;
	
	ДобавитьНоду(group, firms);
	
КонецФункции	//ВыгрузитьСпрФирмы()

//****************************************
Функция ВыгрузитьСпрСвоиЮрЛица(group, пИмяXML) Экспорт
	
	//<ownjuridicalpersons>			<!--юридические лица-->
	//	<ownjuridicalperson>
	//		<code/>			<!--код элемента в УС-->
	//		<name/>			<!--наименование юридического лица nvarchar(30)-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<address/>		<!--улица, дом, квартира nvarchar(30)-->
	//		<factaddress/>		<!--улица, дом, квартира nvarchar(30)-->
	//		<postindex/>		<!--почтовый индекс nvarchar(5)-->
	//		<phone/>		<!--телефон nvarchar(16)-->
	//		
	//		<juridicalname/>	<!--официальное наименование юр. лица nvarchar(30)-->
	//		<INN/>			<!--номер налогоплательщика nvarchar(12)-->
	//		<INNNumber/>		<!--номер свидетельства налогоплательщика nvarchar(10)-->
	//		<VATStatus/>		<!--является ли плательщиком НДС, 1=является, 0=не является-->
	//		
	//		<chiefcode/>		<!--код руководителя - emloyees-->
	//		<accountantcode/>	<!--код главного бухгалтера - emloyees-->
	//		<cashiercode/>		<!--код кассира - emloyees-->
	//	</ownjuridicalperson>
	//</ownjuridicalpersons>
	
	ownjuridicalpersons	= ДокXML.CreateElement("ownjuridicalpersons");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Если ЗначениеЗаполнено(мКонстантаФирма) Тогда		
		ownjuridicalperson	= ДобавитьОбъект(ДокXML, Строка(мКонстантаФирма), "ownjuridicalperson");
		
		ДобавитьПотомка(ownjuridicalperson, "code"			, СТ_ЗначениеВСтрокуВнутр(мКонстантаФирма));
		ДобавитьПотомка(ownjuridicalperson, "name"			, СокрЛП(мКонстантаФирма.Наименование));
		ДобавитьПотомка(ownjuridicalperson, "deleted"		, ?(мКонстантаФирма.ПометкаУдаления = Истина,"1","0"));
		
		//++ Spl_Апроф 19.10.2014 (k.russkih@a-prof.ru) Временно не выгружаем данные
		//ДобавитьПотомка(ownjuridicalperson, "jurstreet"		, УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(мКонстантаФирма,"Юридический"));
		ДобавитьПотомка(ownjuridicalperson, "address"		, УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(мКонстантаФирма,"Фактический"));
		ДобавитьПотомка(ownjuridicalperson, "phone"			, УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(мКонстантаФирма));
		                                              
		ДобавитьПотомка(ownjuridicalperson, "postindex"		, "");
		
		//ДобавитьПотомка(ownjuridicalperson, "juridicalname"	, СокрЛП(мКонстантаФирма.НаименованиеПолное));
		ДобавитьПотомка(ownjuridicalperson, "INN"			, СокрЛП(мКонстантаФирма.ИНН));
		ДобавитьПотомка(ownjuridicalperson, "INNNumber"		, СокрЛП(мКонстантаФирма.КПП));
		ДобавитьПотомка(ownjuridicalperson, "VATStatus"		, 1);
		
		//++ Spl_Апроф 19.10.2014 (k.russkih@a-prof.ru)  не выгружаем
		//ДобавитьПотомка(ownjuridicalperson, "chiefcode"		, "");
		//ДобавитьПотомка(ownjuridicalperson, "accountantcode", "");
		//ДобавитьПотомка(ownjuridicalperson, "cashiercode"	, "");
		
		ДобавитьНоду(ownjuridicalpersons, ownjuridicalperson);
	КонецЕсли; 										
	ДобавитьНоду(group, ownjuridicalpersons);
	
КонецФункции	//ВыгрузитьСпрСвоиЮрЛица()

//****************************************
Функция ВыгрузитьСпрСотрудники(group, пИмяXML) Экспорт
	
	//<employees>
	//	<employee>   <!--сотрудники-->
	//		<code/>			<!--код элемента в УС-->
	//		<name/>			<!--намименование сотрудника nvarchar(50)-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<firstname/>	<!--имя сотрудника nvarchar(50)-->
	//		<lastname/>		<!--фамилия сотрудника nvarchar(50)-->
	//		<middlename/>	<!--отчество сотрудника nvarchar(50)-->
	//		<address/>		<!--адрес прописки nvarchar(255)-->
	//		<factaddress/>	<!--адрес проживания nvarchar(255)-->
	//		<INN/>			<!--номер налогоплательщика nvarchar(12)-->
	//		<passport/>		<!--документ, удостоверяющий личность nvarchar(50)-->
	//		<phone/>		<!--телефон nvarchar(50)-->
	//	</employee>
	//</employees>
	
	employees	= ДокXML.CreateElement("employees");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Для Каждого Элемент Из тзнСотрудники Цикл
		//////ОбработкаПрерыванияПользователя();
		
		лЭлемент		= Элемент.Агент;
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		employee	= ДобавитьОбъект(ДокXML, Строка(лЭлемент), "employee");

		
			ДобавитьПотомка(employee, "code"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент));
			ДобавитьПотомка(employee, "deleted"		, ?(лЭлемент.ПометкаУдаления = Истина,"1","0"));
			ДобавитьПотомка(employee, "INN"			, лЭлемент.Физлицо.ИНН);
			ДобавитьПотомка(employee, "comment"		, лЭлемент.Комментарий);
			//ДобавитьПотомка(employee, "phone"		, УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(лЭлемент,Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица));
			
			МассивФИО = ОбщегоНазначения.ПолучитьМассивФИО(лЭлемент.Наименование);
			
			//++ Spl_Апроф 19.10.2014 (k.russkih@a-prof.ru) Изменим формат
			ДобавитьПотомка(employee, "name"		, лЭлемент.Наименование);
			ДобавитьПотомка(employee, "firstname"	, МассивФИО[1]);
			ДобавитьПотомка(employee, "lastname"	, МассивФИО[0]);
			
			//ДобавитьПотомка(employee, "name"		, МассивФИО[1]);
			//ДобавитьПотомка(employee, "firstname"	, МассивФИО[0]);
			
			//ДобавитьПотомка(employee, "middlename"	, МассивФИО[2]);
		
		ДобавитьНоду(employees, employee);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
	ДобавитьНоду(group, employees);
	
КонецФункции	//ВыгрузитьСпрСотрудники()

Процедура ВыгрузитьПодчСпрТорговыеТочки(group, лРодитель, тзнТочкиАгентов) Экспорт
	СообщитьПодробно(мСтрокаСообщения + " """ + "...выгрузка точек маршрута "+лРодитель+ """.....", 1, 1, 3);
	
	Если НЕ ЗначениеЗаполнено(лРодитель) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	//		<routebuypoints>			<!--торговые точки для маршрута-->
	//			<buypoint>
	//				<buypointcode/>	<!--код торговой точки-->
	//				<day/>			<!--день посещения торговой точки в 28-дневном цикле-->
	//				<order/>		<!--порядок посещения торговой точки в вышеуказанный день-->
	//			</buypoint>
	//		</routebuypoints>
	
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	мТочкиМаршрута = тзнТочкиАгентов.НайтиСтроки(Новый Структура("АгентТочки", лРодитель));
	     
	routebuypoints	= ДокXML.CreateElement("routebuypoints");
	
	Если мТочкиМаршрута.Количество()=0 тогда
		возврат;
	КонецЕсли;
	
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	Для р = 0 По мТочкиМаршрута.Количество()-1 Цикл
		//////ОбработкаПрерыванияПользователя();
		лЭлемент = мТочкиМаршрута.Получить(р);
		выборкаТТ = Справочники.алкПунктыРазгрузки.Выбрать(,лЭлемент.ТорговаяТочка);
		Пока ВыборкаТТ.Следующий() Цикл
			
			лЭлементПредставлениеТТ = СТ_ЗначениеВСтрокуВнутр(ВыборкаТТ.Ссылка);
			buypoint = ДокXML.CreateElement("buypoint");
				
				ДобавитьПотомка(buypoint, "buypointcode"	, лЭлементПредставлениеТТ);
				//ДобавитьПотомка(buypoint, "day"			, 0);
				//ДобавитьПотомка(buypoint, "order"			, 0);
			
			routebuypoints.AppendChild(buypoint);
		КонецЦикла;
	КонецЦикла;
	
	ДобавитьНоду(group, routebuypoints);

КонецПроцедуры	//ВыгрузитьПодчСпрТорговыеТочки()

// убирает из переданной строки все нечисловые символы и возвращает результат
Функция ВернутьСтрокуЧислом(лПараметр) Экспорт
	рез = "";
	Для сч = 1 По СтрДлина(лПараметр) Цикл
		
		Если (КодСимвола(Сред(лПараметр,сч,1)) < 48)ИЛИ (КодСимвола(Сред(лПараметр,сч,1)) >57) Тогда
			Продолжить;
		КонецЕсли;
		
		рез = рез+Сред(лПараметр,сч,1);
		
	КонецЦикла;
	
	Возврат рез;
	
КонецФункции

Функция ВыгрузитьСпрМаршруты(group, пИмяXML) Экспорт
	
	//<routes>  <!--маршруты-->
	//	<route>
	//		<code/>			<!--код элемента в УС--> (внетренее представление) 
	//		<producercode>  <!--код элемента в УС--> 
	//		<name/>			<!--наименование маршрута-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<storecode/>	<!--код склада-автомобиля - stores-->
	//		<agentcode/>	<!--код агента-->
	//		<buypoints>		<!--торговые точки маршрута-->
	//			<buypoint>
	//				<buypointcode/>	<!--код торговой точки - buypoints-->
	//				<day/>		<!--день посещения торговой точки в 28-дневном цикле-->
	//				<order/>	<!--порядок посещения торговой точки в вышеуказанный день-->
	//			</buypoint>
	//		</buypoints>
	//	</route>
	//</routes>
	
	routes	= ДокXML.CreateElement("routes");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	лЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	АдресаПоставки.Владелец.Ссылка КАК ТорговаяТочка,
	                       |	АдресаПоставки.НСИ_ТорговыйПредставитель КАК АгентТочки
	                       |ИЗ
	                       |	Справочник.АдресаПоставки КАК АдресаПоставки
	                       |ГДЕ
	                       |	АдресаПоставки.НСИ_ТорговыйПредставитель В (&НСИ_ТорговыйПредставитель)");
	
	лЗапрос.УстановитьПараметр("НСИ_ТорговыйПредставитель", тзнСотрудники.ВыгрузитьКолонку("Агент"));
	лРезультат = лЗапрос.Выполнить().Выгрузить();
	лРезультат.Свернуть("ТорговаяТочка, АгентТочки");
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Для Каждого Элемент Из тзнСотрудники Цикл
		//////ОбработкаПрерыванияПользователя();
		
		лЭлемент		= Элемент.Агент;
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		route	= ДобавитьОбъект(ДокXML, Строка(лЭлемент), "route");
		
			лАгентПредставление = СТ_ЗначениеВСтрокуВнутр(лЭлемент);
			
			ДобавитьПотомка(route, "code"			, лАгентПредставление);
			ДобавитьПотомка(route, "producercode"	, Число(СокрЛП(Строка(СокрЛП(Строка(мКонстантаДистрибуторКод)))+"0"+СокрЛП(ВернутьСтрокуЧислом(Прав(лЭлемент.Код,6))))));
			ДобавитьПотомка(route, "name"			, СокрЛП(лЭлемент.Наименование));
			ДобавитьПотомка(route, "storecode"		, "");
			ДобавитьПотомка(route, "agentcode"		, лАгентПредставление);
			ДобавитьПотомка(route, "deleted"		, ?(лЭлемент.ПометкаУдаления = Истина,"1","0")); 
			                             
			ВыгрузитьПодчСпрТорговыеТочки(route, лЭлемент, лРезультат);
		
		ДобавитьНоду(routes, route);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
	ДобавитьНоду(group, routes);
	
КонецФункции	//ВыгрузитьСпрМаршруты()

//****************************************
Процедура ВыгрузитьПодчСпрКонтрагенты(group, пРодитель) Экспорт
	
	Если НЕ ЗначениеЗаполнено(пРодитель) Тогда
		Возврат;
	КонецЕсли;
	
	//		<counteragents>
	//			<counteragent>
	//				<counteragentcode/>	<!--код контрагента-->
	//			</counteragent>
	//		</counteragents>
	
	Если НЕ ЗначениеЗаполнено(пРодитель) Тогда
		Возврат;
	КонецЕсли;
	
	//		<counteragents>
	//			<counteragent>
	//				<counteragentcode/>	<!--код контрагента-->
	//			</counteragent>
	//		</counteragents>
	
	counteragents	= ДокXML.CreateElement("counteragents");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	//лСпр.ВыбратьЭлементы();
	//Пока лСпр.ПолучитьЭлемент() = 1 Цикл
	
	//////////////////////////////
	//фильтрующие условия (начало)
	//////////////////////////////
	
	//////////////////////////////
	//фильтрующие условия (конец)
	//////////////////////////////
	
	//////////////////////////////
	//основное тело цикла (начало)
	//добавление элемента в xml
	//////////////////////////////
	
	counteragent = ДокXML.CreateElement("counteragent");
	
	ДобавитьПотомка(counteragent, "counteragentcode", СТ_ЗначениеВСтрокуВнутр(пРодитель));
	
	//++ Spl_Апроф 20.10.2014 (k.russkih@a-prof.ru)
	//ДобавитьПотомка(counteragent, "code"	, СТ_ЗначениеВСтрокуВнутр(пРодитель));
	//ДобавитьПотомка(counteragent, "name"	, "."+СокрЛП(пРодитель));
	//ДобавитьПотомка(counteragent, "deleted"	, ?(пРодитель.ПометкаУдаления = Истина,"1","0"));
	//
	//ДобавитьПотомка(counteragent, "address"			, УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(пРодитель,"Юридический"));
	//ДобавитьПотомка(counteragent, "postindex"		, "");
	//ДобавитьПотомка(counteragent, "phone"			, УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(пРодитель));
	//ДобавитьПотомка(counteragent, "contactperson"	, "");
	//ДобавитьПотомка(counteragent, "type"			, "1");
	//ДобавитьПотомка(counteragent, "juridicalname"	, СокрЛП(пРодитель.НаименованиеПолное));
	//ДобавитьПотомка(counteragent, "INN"				, СокрЛП(пРодитель.ИНН));
	//ДобавитьПотомка(counteragent, "INNNumber"		, СокрЛП(пРодитель.КПП));
	//ДобавитьПотомка(counteragent, "VATStatus"		, "1");
	//ДобавитьПотомка(counteragent, "bankaccount"		, "1");	
	//-- Spl_Апроф
	
	counteragents.AppendChild(counteragent);
	
	//////////////////////////////
	//основное тело цикла (конец)
	//добавление элемента в xml
	//////////////////////////////
	
	//КонецЦикла;
	
	ДобавитьНоду(group, counteragents);

	
КонецПроцедуры	//ВыгрузитьПодчСпрКонтрагенты()

//****************************************
Функция ВыгрузитьСпрПокупатели(group, пИмяXML) Экспорт
	
	//<buyers> <!--покупатели-->
	//	<buyer>
	//		<code/>			<!--код элемента в УС-->
	//		<innercode/>	<!--код элемента в Чикаго-->
	//		<producercode/>	<!--код производителя-->
	//		<name/>			<!--наименование покупателя-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<address/>		<!--улица, дом, квартира nvarchar(120)-->
	//		<postindex/>		<!--почтовый индекс nvarchar(5)-->
	//		<phone/>		<!--телефон nvarchar(16)-->
	//		<contactperson/>	<!--контактное лицо nvarchar(50)-->
	//		
	//		<pricetypecode/>	<!--тип цен для покупателя-->
	//		<creditlimit/>		<!--лимит кредита покупателя в основной валюте системы (15, 4)-->
	//		<creditdeadline/>	<!--срок кредита покупателя в днях-->
	//		
	//		<classifier1code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier2code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier3code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier4code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier5code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier6code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier7code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier8code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier9code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier10code/>	<!--код классификатора для покупателя - classifiers-->
	//		
	//		<counteragents>
	//			<counteragent>
	//				<counteragentcode/>	<!--код контрагента-->
	//			</counteragent>
	//		</counteragents>
	//	</buyer>
	//</buyers>
	
	buyers = ДокXML.CreateElement("buyers");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	Для Каждого лЭлемент Из тзнПокупателиВсе Цикл
		
		лКонтрагент = лЭлемент.Контрагент;
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		buyer	= ДобавитьОбъект(ДокXML, Строка(лКонтрагент), "buyer");
		
		ДобавитьПотомка(buyer, "code"			, СТ_ЗначениеВСтрокуВнутр(лКонтрагент));
		ДобавитьПотомка(buyer, "producercode"	, лКонтрагент.Код);
		ДобавитьПотомка(buyer, "name"			, СокрЛП(лКонтрагент.Наименование));
		ДобавитьПотомка(buyer, "deleted"		, ?(лКонтрагент.ПометкаУдаления = Истина,"1","0"));
		
		ДобавитьПотомка(buyer, "address"		, УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(лКонтрагент,"Юридический"));
		ДобавитьПотомка(buyer, "postindex"		, "");
		ДобавитьПотомка(buyer, "phone"			, УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(лКонтрагент));
		ДобавитьПотомка(buyer, "contactperson"	, "");
		                                             
		ДобавитьПотомка(buyer, "pricetypecode"		, СТ_ЗначениеВСтрокуВнутр(мКонстантаТипЦен));
		ДобавитьПотомка(buyer, "creditlimit"		, лКонтрагент.ОсновнойДоговорКонтрагента.ДопустимаяСуммаЗадолженности);
		ДобавитьПотомка(buyer, "creditdeadline"		, лКонтрагент.ОсновнойДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности);
		
		/////////////////////////////////////////////
		//выгрузка подчиненных справочников (начало)
		/////////////////////////////////////////////
		
		ВыгрузитьПодчСпрКонтрагенты(buyer, лКонтрагент);
		
		/////////////////////////////////////////////
		//выгрузка подчиненных справочников (начало)
		/////////////////////////////////////////////
		
		ДобавитьНоду(buyers, buyer);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
	ДобавитьНоду(group, buyers);
	
КонецФункции	//ВыгрузитьСпрПокупатели()

//****************************************
Функция ВыгрузитьСпрФормальныеПокупатели(group, пИмяXML) Экспорт
	
	//<counteragents>	<!--контрагенты (формальные покупатели)-->
	//	<counteragent>
	//		<code/>			<!--код элемента в УС-->
	//		<innercode/>	<!--код элемента в Чикаго-->
	//		<producercode/>	<!--код производителя-->
	//		<name/>			<!--наименование контрагента nvarchar(30)-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<address/>		<!--улица, дом, квартира-nvarchar(120)-->
	//		<phone/>		<!--телефон nvarchar(16)-->
	//		<postindex/>		<!--почтовый индекс nvarchar(5)-->
	//		
	//		<type/>			<!--признак, является ли юрлицом или физлицом. 1=ЮЛ, 0=ФЛ-->
	//		<juridicalname/>	<!--юридическое наименование nvarchar(30)-->
	//		<INN/>			<!--номер налогоплательщика nvarchar(12)-->
	//		<INNNumber/>		<!--номер свидетельства налогоплательщика nvarchar(10)-->
	//		<VATStatus/>		<!--является ли плательщиком НДС, 1=является, 0=не является-->
	//		<bankaccount/>		<!--расчетный счет nvarchar(14)-->
	//	</counteragent>
	//</counteragents>
	
	counteragents = ДокXML.CreateElement("counteragents");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Для Каждого лЭлемент Из тзнПокупателиВсе Цикл
		
		лКонтрагент = лЭлемент.Контрагент;
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		counteragent	= ДобавитьОбъект(ДокXML, Строка(лКонтрагент), "counteragent");
		
			ДобавитьПотомка(counteragent, "code"			, СТ_ЗначениеВСтрокуВнутр(лКонтрагент));
			ДобавитьПотомка(counteragent, "producercode"	, лКонтрагент.Код);
			ДобавитьПотомка(counteragent, "name"			, СокрЛП(лКонтрагент.Наименование));
			ДобавитьПотомка(counteragent, "deleted"			, ?(лКонтрагент.ПометкаУдаления = Истина,"1","0"));
			
			ДобавитьПотомка(counteragent, "address"			, УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(лКонтрагент,"Юридический"));
			ДобавитьПотомка(counteragent, "postindex"		, "");
			ДобавитьПотомка(counteragent, "phone"			, УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(лКонтрагент));
			
			ДобавитьПотомка(counteragent, "type"			, ?(лКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, 1, 0));
			ДобавитьПотомка(counteragent, "juridicalname"	, СокрЛП(лКонтрагент.НаименованиеПолное));
			ДобавитьПотомка(counteragent, "INN"				, СокрЛП(лКонтрагент.ИНН));
			ДобавитьПотомка(counteragent, "INNNumber"		, СокрЛП(лКонтрагент.КПП));
			ДобавитьПотомка(counteragent, "VATStatus"		, "F");
			ДобавитьПотомка(counteragent, "bankaccount"		, СокрЛП(лКонтрагент.ОсновнойБанковскийСчет.НомерСчета));	
			
		ДобавитьНоду(counteragents, counteragent);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
	ДобавитьНоду(group, counteragents);
		
КонецФункции	//ВыгрузитьСпрФормальныеПокупатели()

//****************************************
Процедура ВыгрузитьПодчСпрТипыЦен(group, пРодитель, пТЗнТипыЦен, пТЗнКлассы, пСЗнКлассы) Экспорт
	
	Если НЕ ЗначениеЗаполнено(пРодитель) Тогда
		Возврат;
	КонецЕсли;
	
	//		<skupricetypes>
	//			<skupricetype>
	//				<SKUcode/>			<!--код товара (если не указан код классификатора) - SKUs-->
	//				<skuclassifier/>	<!--код товара (если не указан код классификатора) - classifiers-->
	//				<pricetypecode/>	<!--код типа цен - pricetypes-->
	//			</skupricetype>
	//		</skupricetypes>
	
	skupricetypes	= ДокXML.CreateElement("skupricetypes");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	лСтруктура		= Новый Структура("Контрагент", пРодитель);
	лСтрокиТипыЦен	= пТЗнТипыЦен.НайтиСтроки(лСтруктура);
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Для Каждого лСтрокаТипЦен Из лСтрокиТипыЦен Цикл
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		Если лСтрокаТипЦен.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		лТипЦен	= СТ_ЗначениеВСтрокуВнутр(лСтрокаТипЦен.ТипЦен);
		Если лСтрокаТипЦен.Процент <> 0 Тогда
			лТипЦен	= лТипЦен + "/" + Строка(лСтрокаТипЦен.Процент);
		КонецЕсли;
		лНоменклатураВнутр	= СТ_ЗначениеВСтрокуВнутр(лСтрокаТипЦен.Номенклатура);
		
		skupricetype = ДокXML.CreateElement("skupricetype");
		
		ДобавитьПотомка(skupricetype, "SKUcode"			, ?(лСтрокаТипЦен.ЭтоГруппа, "", лНоменклатураВнутр));
		ДобавитьПотомка(skupricetype, "skuclassifier"	, ?(лСтрокаТипЦен.ЭтоГруппа, лНоменклатураВнутр, ""));
		ДобавитьПотомка(skupricetype, "pricetypecode"	, лТипЦен);
		
		skupricetypes.AppendChild(skupricetype);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
	Для Каждого лКласс Из пСЗнКлассы Цикл
		лНайден	= Ложь;
		лСтруктура		= Новый Структура("Ссылка", лКласс.Значение);
		лСтрокиКласс	= пТЗнКлассы.НайтиСтроки(лСтруктура);
		Для Каждого лОбщийКласс Из лСтрокиКласс Цикл
			лСтруктура		= Новый Структура("Контрагент", пРодитель);
			лСтруктура.Вставить("Номенклатура", лОбщийКласс.Родитель);
			лСтрокиОбщийКласс	= пТЗнТипыЦен.НайтиСтроки(лСтруктура);
			Для Каждого лСтрокаТипЦен Из лСтрокиОбщийКласс Цикл
				лТипЦен	= СТ_ЗначениеВСтрокуВнутр(лСтрокаТипЦен.ТипЦен);
				Если лСтрокаТипЦен.Процент <> 0 Тогда
					лТипЦен	= лТипЦен + "/" + Строка(лСтрокаТипЦен.Процент);
				КонецЕсли;
				лНоменклатураВнутр	= СТ_ЗначениеВСтрокуВнутр(лКласс.Значение);
				
				skupricetype = ДокXML.CreateElement("skupricetype");
				
				ДобавитьПотомка(skupricetype, "SKUcode"			, ?(лСтрокаТипЦен.ЭтоГруппа, "", лНоменклатураВнутр));
				ДобавитьПотомка(skupricetype, "skuclassifier"	, ?(лСтрокаТипЦен.ЭтоГруппа, лНоменклатураВнутр, ""));
				ДобавитьПотомка(skupricetype, "pricetypecode"	, лТипЦен);
				
				skupricetypes.AppendChild(skupricetype);
				
				лНайден	= Истина;
				Прервать;
			КонецЦикла;
			
			Если лНайден Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если лНайден Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьНоду(group, skupricetypes);
	
КонецПроцедуры	//ВыгрузитьПодчСпрЦены()

//****************************************
Функция ВыгрузитьСпрТорговыеТочки(group, пИмяXML) Экспорт
	
	//<buypoints>	<!--торговые точки-->
	//	<buypoint>
	//		<code/>			<!--код элемента в УС-->
	//		<innercode/>	<!--код элемента в Чикаго-->
	//		<producercode/>	<!--код производителя-->
	//		<name/>			<!--наименование торговой точки nvarchar(30)-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<buyercode/>		<!--код покупателя, которому принадлежит торговая точка - buyers-->
	//		<buypointtypecode/>	<!--код типа торговой точки - buypointtypes-->
	//		
	//		<address/>		<!--улица, дом, квартира nvarchar(120)-->
	//		<postindex/>		<!--почтовый индекс nvarchar(5)-->
	//		<phone/>		<!--телефон nvarchar(16)-->
	//		<contactperson/>	<!--контактное лицо nvarchar(50)-->
	//		
	//		<juridicalname/>	<!--вывеска nvarchar(30)-->
	//		<discountRate/>		<!--процент скидки торговой точке-->
	//		<creditlimit/>		<!--лимит кредита торговой точки в основной валюте системы (15, 4)-->
	//		<creditdeadline/>	<!--срок кредита торговой точки в днях-->
	//		
	//		<classifier1code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier2code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier3code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier4code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier5code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier6code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier7code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier8code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier9code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier10code/>	<!--код классификатора для ТТ - classifiers-->
	//
	//		<skupricetypes>
	//			<skupricetype>
	//				<SKUcode/>			<!--код товара (если не указан код классификатора) - SKUs-->
	//				<skuclassifier/>	<!--код товара (если не указан код классификатора) - classifiers-->
	//				<pricetypecode/>	<!--код типа цен - pricetypes-->
	//			</skupricetype>
	//		</skupricetypes>
	//
	//		<activityhistory>
	//			<event>
	//				<eventtype/>	<!--тип события, 0 - Деактивация, 1 - Активация-->
	//				<eventdate/>	<!--дата события-->
	//			</event>
	//		</activityhistory>
	//	</buypoint>
	//</buypoints>
	
	Перем лНаборКонтактнойИнформации;
	
	buypoints = ДокXML.CreateElement("buypoints");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Для Каждого лЭлемент Из тзнПокупателиВсе  Цикл
		
		лКонтрагент = лЭлемент.Контрагент; 
		лСпр = Справочники.АдресаПоставки.Выбрать(,лКонтрагент);
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		Пока лСпр.Следующий() Цикл
			
			лТТ = лСпр.Ссылка;
			buypoint	= ДобавитьОбъект(ДокXML, Строка(лТТ), "buypoint");
			
			ДобавитьПотомка(buypoint, "code"			, СТ_ЗначениеВСтрокуВнутр(лТТ));
			ДобавитьПотомка(buypoint, "producercode"	, "");
			ДобавитьПотомка(buypoint, "distributorcode"	, лТТ.Код); 
			ДобавитьПотомка(buypoint, "name"			, "."+СокрЛП(лКонтрагент.Наименование));
			ДобавитьПотомка(buypoint, "deleted"			, ?(лТТ.ПометкаУдаления = Истина,"1","0"));

			ДобавитьПотомка(buypoint, "buyercode"		, СТ_ЗначениеВСтрокуВнутр(лКонтрагент));
			
			ДобавитьПотомка(buypoint, "address"			, СокрЛП(лТТ.Наименование));
			ДобавитьПотомка(buypoint, "postindex"		, "");
			ДобавитьПотомка(buypoint, "phone"			, "");
			
			ДобавитьПотомка(buypoint, "juridicalname"	, "."+СокрЛП(лКонтрагент.НаименованиеПолное));
			
			//++ Spl_Апроф 20.10.2014 (k.russkih@a-prof.ru)
			ДобавитьПотомка(buypoint, "contactperson"	, "");
			ДобавитьПотомка(buypoint, "comment"			, СокрЛП(лКонтрагент.Родитель));			
			//-- Spl_Апроф			
			
			//лТипЦен                 = лКонтрагент.ОсновнойДоговорКонтрагента.ТипЦен;
			//Если (НЕ ЗначениеЗаполнено(лТипЦен))ИЛИ(ТипЗнч(лТипЦен)<>Тип("СправочникСсылка.ТипыЦенНоменклатуры")) Тогда 
			//	лТипЦен = мКонстантаТипЦен;
			//КонецЕсли;
			лСписокТипЦен = ПЦ_Ценообразование.ПолучитьТипЦенПродажи(ДатаКонца, 
														лТТ.НСИ_Регион,
														Справочники.ПРГ_ПроектыГП.НайтиПоКоду("ДП"),//временно
														лКонтрагент.НСИ_КаналПродаж,
														//лТТ.НСИ_КаналПродаж,
														лТТ.НСИ_УсловияПоставки,
														,//Контрагент,
														,//ДоговорКонтрагента,
														,лТТ//Грузополучатель,
														,//СтрокаТабличнойЧасти.Номенклатура.НСИ_ТоварнаяКатегория,
														,//СтрокаТабличнойЧасти.Номенклатура.НСИ_Брендообъем,
														,//СтрокаТабличнойЧасти.Номенклатура,
														,//СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры
														);			
			лТипЦен = "";
			
			Если НЕ лСписокТипЦен.Количество() = 0 Тогда
			
				лТипЦен = лСписокТипЦен[0].Значение;
			
			КонецЕсли; 
			
			лСуммаКредита 			= лКонтрагент.ОсновнойДоговорКонтрагента.ДопустимаяСуммаЗадолженности;
			лГлубинаКредита 		= лКонтрагент.ОсновнойДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
			лРазрешитьПревышение 	= Число(лКонтрагент.ОсновнойДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности);
			
			ДобавитьПотомка(buypoint, "pricetypecode"	, ?(ЗначениеЗаполнено(лТипЦен),СТ_ЗначениеВСтрокуВнутр(лТипЦен),""));
			
			
			ДобавитьПотомка(buypoint, "creditlimit"		, ?(лСуммаКредита=0,"",лСуммаКредита));
			ДобавитьПотомка(buypoint, "creditdeadline"	, ?(лГлубинаКредита=0,"",лГлубинаКредита));
			ДобавитьПотомка(buypoint, "canexceedlimit"	, ?(лРазрешитьПревышение=0,"",лРазрешитьПревышение)); 
			
			//ВыгрузитьПодчАктивность(buypoint, ?(лЭлемент.ПометкаУдаления, 0, 1));
			//ВыгрузитьПодчАтрибуты(buypoint, "КодТТвУС", "Код ТТ в УС", лСпр.Код);
			
			ДобавитьНоду(buypoints, buypoint);
			
		КонецЦикла;
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
	ДобавитьНоду(group, buypoints);
	
КонецФункции	//ВыгрузитьСпрТорговыеТочки()

//****************************************
Функция ВыгрузитьСпрКассы(group, пИмяXML) Экспорт
	
	//<cashregisters>	<!-- кассы -->
	//	<cashregister>
	//		<code/>		<!--код элемента в УС-->
	//		<name/>		<!--наименование кассы-->
	//		<deleted/>	<!--признак того, что элемент был удален-->
	//		
	//		<cashiercode/>	<!--код кассира - emloyees-->
	//		<storecode/>	<!--код склада, к которому относится касса - stores-->
	//	</cashregister>
	//</cashregisters>
	
	cashregisters	= ДокXML.CreateElement("cashregisters");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	
	//////////////////////////////
	//основное тело цикла (начало)
	//добавление элемента в xml
	//////////////////////////////
	
	//cashregister	= ДобавитьОбъект(ДокXML, Строка(мКонстантаКасса), "cashregister");
	//
	//ДобавитьПотомка(cashregister, "code"		, СТ_ЗначениеВСтрокуВнутр(мКонстантаКасса));
	//ДобавитьПотомка(cashregister, "name"		, СокрЛП(мКонстантаКасса.Наименование));
	//ДобавитьПотомка(cashregister, "deleted"		, мКонстантаКасса.ПометкаУдаления);
	//
	//кОтбор = Новый Структура("СтруктурнаяЕдиница", мКонстантаКасса.Ссылка);
	//СрезПоследних   = РегистрыСведений.ОтветственныеЛица.СрезПоследних(ТекущаяДата(), кОтбор);
	//
	//Если СрезПоследних.Количество() < 1 Тогда
	//	ОтветственноеЛицо = Неопределено;
	//Иначе
	//	ОтветственноеЛицо = СрезПоследних[0].ФизическоеЛицо;
	//КонецЕсли;
	//
	//ДобавитьПотомка(cashregister, "cashiercode"	, ?(ОтветственноеЛицо = Неопределено, "", СТ_ЗначениеВСтрокуВнутр(ОтветственноеЛицо)));
	//ДобавитьПотомка(cashregister, "storecode"		, "");
	//
	//ДобавитьНоду(cashregisters, cashregister);
	
	//////////////////////////////
	//основное тело цикла (конец)
	//добавление элемента в xml
	//////////////////////////////
	
	ДобавитьНоду(group, cashregisters);
	
КонецФункции	//ВыгрузитьСпрКассы()

//****************************************
Функция ВыгрузитьСпрТипыТорговыхТочек(group, пИмяXML) Экспорт
	
	//<buypointtypes> <!--ставки НДС-->
	//	<buypointtype>
	//		<code/>				<!--код типа торговой точки-->
	//		<name/>				<!--наименование типа-->
	//		<deleted/>			<!--признак того, что элемент был удален-->
	//	</buypointtype>
	//</buypointtypes>
	
	buypointtypes = ДокXML.CreateElement("buypointtypes");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	лЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	ЗначенияСвойствОбъектов.Ссылка КАК ТипТТ
	                       |ИЗ
	                       |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                       |ГДЕ
	                       |	ЗначенияСвойствОбъектов.Владелец.НазначениеСвойства = &НазначениеСвойства
	                       |	И ЗначенияСвойствОбъектов.Владелец = &Владелец");
	лЗапрос.УстановитьПараметр("НазначениеСвойства", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("00101").Ссылка);
	лЗапрос.УстановитьПараметр("Владелец", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00134").Ссылка);
	
	лРезультат = лЗапрос.Выполнить().Выгрузить();
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Для Каждого лЭлемент Из лРезультат Цикл
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		buypointtype	= ДобавитьОбъект(ДокXML, Строка(лЭлемент.ТипТТ), "buypointtype");
		
		ДобавитьПотомка(buypointtype, "code"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент.ТипТТ));
		ДобавитьПотомка(buypointtype, "name"		, Строка(лЭлемент.ТипТТ.Наименование));
		ДобавитьПотомка(buypointtype, "deleted"	, 0);
		
		ДобавитьНоду(buypointtypes, buypointtype);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
	ДобавитьНоду(group, buypointtypes);
	
КонецФункции	//ВыгрузитьСпрСтавкиНДС()

//****************************************
Функция ВыгрузитьСпрГруппыТоваров(group, пИмяXML) Экспорт
	
	//<SKUgroups>	 <!--группы товаров-->
	//	<SKUgroup>
	//		<code/>		<!--код элемента в УС-->
	//		<name/>		<!--наименование группы-->
	//		<deleted/>	<!--признак того, что элемент был удален-->
	//		
	//		<parentcode/>	<!--код группы-родителя-->
	//	</SKUgroup>
	//</SKUgroups>
	
	//группы
	
	SKUgroups	= ДокXML.CreateElement("SKUgroups");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Запрос	= Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	      	               |	Номенклатура.Ссылка КАК Ссылка
	      	               |ИЗ
	      	               |	Справочник.Номенклатура КАК Номенклатура
	      	               |ГДЕ
	      	               |	Номенклатура.Ссылка В(&СписокНоменклатуры)
	      	               |ИТОГИ ПО
	      	               |	Ссылка ТОЛЬКО ИЕРАРХИЯ");
	
	Запрос.УстановитьПараметр("СписокНоменклатуры",тзнГруппаНоменклатуры);
	
	ВыборкаГруппы	= Запрос.Выполнить().Выбрать();
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Пока ВыборкаГруппы.Следующий() Цикл
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		Если ВыборкаГруппы.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		SKUgroup	= ДобавитьОбъект(ДокXML, Строка(ВыборкаГруппы.Ссылка), "SKUgroup");
		
		ДобавитьПотомка(SKUgroup, "code"		, СТ_ЗначениеВСтрокуВнутр(ВыборкаГруппы.Ссылка));
		ДобавитьПотомка(SKUgroup, "name"		, СокрЛП(ВыборкаГруппы.Ссылка.Наименование));
		ДобавитьПотомка(SKUgroup, "deleted"		, 0);
		
		лРодительКод = ?(ЗначениеЗаполнено(ВыборкаГруппы.Ссылка.Родитель), СТ_ЗначениеВСтрокуВнутр(ВыборкаГруппы.Ссылка.Родитель), "");
		ДобавитьПотомка(SKUgroup, "parentcode"	, лРодительКод);
		
		ДобавитьНоду(SKUgroups, SKUgroup);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
	ДобавитьНоду(group, SKUgroups);
	
КонецФункции	//ВыгрузитьСпрГруппыТоваров()

//****************************************
Функция ВыгрузитьПодчСпрЦены(group, пРодитель, пХарактеристикаРодителя, пТЗнЦены) Экспорт
	
	Если НЕ ЗначениеЗаполнено(пРодитель) Тогда
		Возврат 0;
	КонецЕсли;
	
	//		<prices>
	//			<price>
	//				<pricetypecode/>	<!--код типа цен - pricetypes-->
	//				<paytypecode/>		<!--1-Оплата при отгрузке,2-Оплата с отсрочкой платежа,3-Предоплата-->
	//				<unitcode/>		<!--код единицы измерения для товара - units-->
	//				
	//				<price/>		<!--цена (15, 4)-->
	//			</price>
	//		</prices>
	
	prices	= ДокXML.CreateElement("prices");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	лЦена	= 0;
	лСтруктура	= Новый Структура("Номенклатура", пРодитель);
	лСтрокиЦен	= пТЗнЦены.НайтиСтроки(лСтруктура);
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	
	////////////////////////////////////////////
	////1 - фиксированные цены из регистра сведений
	////////////////////////////////////////////

	Для Каждого лСпр Из лСтрокиЦен Цикл
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		Если лСпр.Цена = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если лСпр.ХарактеристикаНоменклатуры <> пХарактеристикаРодителя тогда
			Продолжить;
		КонецЕсли;
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		лЕдиницаПредставление	= СТ_ЗначениеВСтрокуВнутр(лСпр.ЕдиницаИзмерения.ЕдиницаПоКлассификатору);
		лТипЦенПредставление	= СТ_ЗначениеВСтрокуВнутр(лСпр.ТипЦен);
		
		price = ДокXML.CreateElement("price");
		
		ДобавитьПотомка(price, "pricetypecode"	, лТипЦенПредставление);
		ДобавитьПотомка(price, "paytypecode"	, 2);
		ДобавитьПотомка(price, "unitcode"		, лЕдиницаПредставление);
		ДобавитьПотомка(price, "price"			, лСпр.Цена);
		
		prices.AppendChild(price);
		
	КонецЦикла;
	
	// выгрузим расчетные типы цен
	лЕдиница	 = пРодитель.ЕдиницаХраненияОстатков;
	лЕдиницаОКЕИ = пРодитель.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору;

	Для каждого лСпр из тзнТипыЦен Цикл
	
		Если Не ЗначениеЗаполнено(лСпр.ТипЦен) Тогда
			Продолжить;
		КонецЕсли;
		          				
		Если ТипЗнч(лСпр.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов")	тогда	
			Продолжить;
		КонецЕсли;
		
		Если Не лСпр.ТипЦен.Рассчитывается Тогда
			Продолжить;
		КонецЕсли;
		
		лТипЦен	= лСпр.ТипЦен;
		
		
		лЦена = Ценообразование.ПолучитьЦенуНоменклатуры(пРодитель,,лТипЦен,мДатаОбработки,лЕдиница);
		
		price = ДокXML.CreateElement("price");
		
		ДобавитьПотомка(price, "pricetypecode"	, СТ_ЗначениеВСтрокуВнутр(лТипЦен));
		ДобавитьПотомка(price, "paytypecode"	, 2);
		ДобавитьПотомка(price, "unitcode"		, СТ_ЗначениеВСтрокуВнутр(лЕдиницаОКЕИ));
		ДобавитьПотомка(price, "price"			, лЦена);
		
		prices.AppendChild(price);
		
    КонецЦикла;
		
	
	ДобавитьНоду(group, prices);
	
КонецФункции // ВыгрузитьПодчСпрЦены()

Функция ВыгрузитьПодчСпрЕдиницыИзмерения(group, пРодитель) Экспорт
	
	Если НЕ ЗначениеЗаполнено(пРодитель) Тогда
		Возврат 0;
	КонецЕсли;
	
	//		<units>			<!--единицы измерения для товара-->
	//			<unit>
	//				<code/>	<!--код единицы измерения-->
	//				<rate/>	<!--коэффициент пересчета в базовую (15,6)-->
	//				<barcode/>	<!--штрихкод-->
	//			</unit>
	//		</units>
	
	units	= ДокXML.CreateElement("units");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////

	лСпр	= Справочники.ЕдиницыИзмерения.Выбрать(, пРодитель);
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	лСЗнВыгруженныеЕдИзм	= Новый СписокЗначений();

	Пока лСпр.Следующий() Цикл
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		Если лСпр.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если лСпр.Коэффициент < 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(лСпр.ЕдиницаПоКлассификатору) Тогда
			СообщитьПодробно("У номенклатуры: " + пРодитель + " существует едниница измерения, в которой не задана единица по классификатору. Выгрузка этой единицы измерения невозможна.", 1, 1, 1);
			Продолжить;
		КонецЕсли;
		
		Если лСЗнВыгруженныеЕдИзм.НайтиПоЗначению(лСпр.ЕдиницаПоКлассификатору)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		лСЗнВыгруженныеЕдИзм.Добавить(лСпр.ЕдиницаПоКлассификатору);
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		unit = ДокXML.CreateElement("unit");
		
		//ДобавитьПотомка(unit, "code"		, СТ_ЗначениеВСтрокуВнутр(лСпр.ЕдиницаПоКлассификатору));
		//начало изменений Ожиганов 16.02.2016 49181 изменения выгружаемых объектов в части единиц 
		//ДобавитьПотомка(unit, "code"		, лСпр.ЕдиницаПоКлассификатору.Наименование);
		//получается вернем как  было :))) непрошло и года
		ДобавитьПотомка(unit, "code"		, СТ_ЗначениеВСтрокуВнутр(лСпр.ЕдиницаПоКлассификатору));
		//конец изменений 
		ДобавитьПотомка(unit, "rate"		, лСпр.Коэффициент);
		ДобавитьПотомка(unit, "barcode"		, "");                       		
		units.AppendChild(unit);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
	ДобавитьНоду(group, units);
	
КонецФункции	//ВыгрузитьПодчСпрЕдиницыИзмерения()

Функция ВыгрузитьСпрТовары(group, пИмяXML) Экспорт
	
	//<SKUs> <!-- stock keeping units - товары -->
	//	<SKU>
	//		<code/>			<!--код элемента в УС-->
	//		<name/>			<!--наименование товара nvarchar(100)-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<article/>		<!--артикул товара (уникальный смысловой код) nvarchar(15)-->
	//		<shortname/>	<!--краткое наименование товара (для КПК) (15 символов)-->
	//		<parentcode/>	<!--код группы товара - SKUgroups-->
	//	 	<SKUType/>		<!-- тип товара -->
	//		
	//		<baseunitcode/>		<!--код базовой единицы измерения для товара - units-->
	//		<activeunitcode/>	<!--код активной единицы измерения для товара - units-->
	//		<weight/>			<!--вес базовой единицы измерения товара-->
	//		<VATRateCode/>		<!--код ставки НДС для товара - VATRates-->
	//		
	//		<classifier1code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier2code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier3code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier4code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier5code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier6code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier7code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier8code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier9code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier10code/>	<!--код классификатора для товара - classifiers-->
	//		
	//		<countrycode/>		<!--Страна происхожения-->
	//		<GTD/>				<!--номер Грузовой Таможенной Декларации-->
	//		
	//		<units>			<!--единицы измерения для товара-->
	//			<unit>
	//				<code/>		<!--код единицы измерения-->
	//				<rate/>		<!--коэффициент пересчета в базовую (15,6)-->
	//				<barcode/>	<!--штрихкод-->
	//			</unit>
	//		</units>
	//		
	//		<prices>
	//			<price>
	//				<pricetypecode/>	<!--код типа цен - pricetypes-->
	//				<paytypecode/>		<!--1-Оплата при отгрузке,2-Оплата с отсрочкой платежа,3-Предоплата-->
	//				<unitcode/>		<!--код единицы измерения для товара - units-->
	//				
	//				<price/>		<!--цена (15, 4)-->
	//			</price>
	//		</prices>
	//
	//		<activityhistory>
	//			<event>
	//				<eventtype/>	<!--тип события, 0 - Деактивация, 1 - Активация-->
	//				<eventdate/>	<!--дата события-->
	//			</event>
	//		</activityhistory>
	//	</SKU>
	//</SKUs>
	
	
	SKUs	= ДокXML.CreateElement("SKUs");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Запрос	= Новый Запрос();  	
	ТекстОтбора 	= "";
	ТекстЗапроса	= 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Валюта,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура В(&ГруппаНоменклатуры)
	|	И ЦеныНоменклатурыСрезПоследних.ТипЦен В(&лТипыЦен)";
	Запрос.УстановитьПараметр("лТипыЦен", тзнТипыЦен.ВыгрузитьКолонку("ТипЦен"));
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", тзнГруппаНоменклатуры);
	
	Запрос.Текст	= ТекстЗапроса + ТекстОтбора;
	лТЗнЦены	= Запрос.Выполнить().Выгрузить();

	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	Для Каждого лЭлемент Из тзнГруппаНоменклатуры Цикл
		
		лТовар = лЭлемент.Ссылка;
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		Если СокрЛП(лТовар.Наименование) = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если лТовар.ВестиУчетПоХарактеристикам Тогда
			ВыгрузкаТовара(SKUs,лТовар, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), лТЗнЦены);	
			ВыборкаХар = Справочники.ХарактеристикиНоменклатуры.Выбрать(,лТовар);
			Пока ВыборкаХар.Следующий() Цикл
				ВыгрузкаТовара(SKUs,лТовар,ВыборкаХар.Ссылка, лТЗнЦены);	
			КонецЦикла;
		Иначе
			ВыгрузкаТовара(SKUs,лТовар, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), лТЗнЦены);	
		КонецЕсли;
	КонецЦикла;
	ДобавитьНоду(group, SKUs);
	
КонецФункции	//ВыгрузитьСпрТовары()

Процедура ВыгрузкаТовара(SKUs,лНоменклатура,лХарактеристика, лТЗнЦены)
	
	SKU	= ДобавитьОбъект(ДокXML, Строка(лНоменклатура), "SKU");
	
	Если ЗначениеЗаполнено(лХарактеристика) Тогда
		ДобавитьПотомка(SKU, "code"				, СТ_ЗначениеВСтрокуВнутр(лХарактеристика));
		ДобавитьПотомка(SKU, "name"				, СокрЛП(лНоменклатура.Наименование) + СокрЛП(лХарактеристика.Наименование)); 
		ДобавитьПотомка(SKU, "shortname"		, СокрЛП(лНоменклатура.Наименование) + СокрЛП(лХарактеристика.Наименование));
		ДобавитьПотомка(SKU, "deleted"			, ?(лХарактеристика.ПометкаУдаления = Истина,"1","0"));
		ДобавитьПотомка(SKU, "classifier9code"	, "Акция");
	Иначе
		ДобавитьПотомка(SKU, "code"				, СТ_ЗначениеВСтрокуВнутр(лНоменклатура));
		ДобавитьПотомка(SKU, "name"				, СокрЛП(лНоменклатура.Наименование)); 
		ДобавитьПотомка(SKU, "shortname"		, СокрЛП(лНоменклатура.Наименование));
		ДобавитьПотомка(SKU, "deleted"			, ?(лНоменклатура.ПометкаУдаления = Истина,"1","0"));
	КонецЕсли;
	
	ДобавитьПотомка(SKU, "article"			, СокрЛП(лНоменклатура.Код));
	ДобавитьПотомка(SKU, "parentcode"		, СТ_ЗначениеВСтрокуВнутр(лНоменклатура.Родитель));
	ДобавитьПотомка(SKU, "SKUType"			, 30);
	
	Если лНоменклатура.ЕдиницаХраненияОстатков.Коэффициент <> 0 Тогда
		лВес = лНоменклатура.ЕдиницаХраненияОстатков.Вес/лНоменклатура.ЕдиницаХраненияОстатков.Коэффициент;
	Иначе
		лВес = лНоменклатура.ЕдиницаХраненияОстатков.Вес;
	КонецЕсли;	
	
	ДобавитьПотомка(SKU, "weight"			, Формат(лВес,"ЧДЦ=3; ЧГ="));
	
	лБазоваяЕдиницаПредставление = СТ_ЗначениеВСтрокуВнутр(лНоменклатура.БазоваяЕдиницаИзмерения); 	
	лАктивнаяЕдиницаПредставление = СТ_ЗначениеВСтрокуВнутр(лНоменклатура.ЕдиницаДляОтчетов.ЕдиницаПоКлассификатору); 	
	
	ДобавитьПотомка(SKU, "baseunitcode"		, лБазоваяЕдиницаПредставление);
	//++ Spl_Апроф 20.10.2014 (k.russkih@a-prof.ru)
	//ДобавитьПотомка(SKU, "activeunitcode"	, лАктивнаяЕдиницаПредставление);
	ДобавитьПотомка(SKU, "activeunitcode"	, лБазоваяЕдиницаПредставление);
	
	//начало изменений Ожиганов 16.02.2016 49181 изменения выгружаемых объектов в части единиц 
	//ДобавитьПотомка(SKU, "activeunitcodemt"	, лАктивнаяЕдиницаПредставление);
	ДобавитьПотомка(SKU, "activeunitcodemt"	, лБазоваяЕдиницаПредставление);
	//конец изменений 
	
	лСтавкаНДС	= ?(ЗначениеЗаполнено(лНоменклатура.СтавкаНДС), Перечисления.СтавкиНДС.Индекс(лНоменклатура.СтавкаНДС) + 1, 1);
	ДобавитьПотомка(SKU, "VATRateCode"		, лСтавкаНДС);
	
	//Если ЗначениеЗаполнено(мКонстантаТипМерч) тогда
	ДобавитьПотомка(SKU, "merchparticipation"	, 3);
	//КонецЕсли;	
	
	//ДобавитьПотомка(SKU, "countrycode"		, "");
	//ДобавитьПотомка(SKU, "GTD"				, "");
	
	/////////////////////////////////////////////
	//выгрузка подчиненных справочников (начало)
	/////////////////////////////////////////////
	
	ВыгрузитьПодчСпрЕдиницыИзмерения(SKU, лНоменклатура);
	
	Если НЕ МастерВыгрузка Тогда
	
		ВыгрузитьПодчСпрЦены(SKU, лНоменклатура, лХарактеристика, лТЗнЦены);	
	
	КонецЕсли; 
	
	/////////////////////////////////////////////
	//выгрузка подчиненных справочников (конец)
	/////////////////////////////////////////////
	
	ДобавитьНоду(SKUs, SKU);
		
КонецПроцедуры
 
//****************************************
Процедура ВыгрузитьСправочники() Экспорт
	
	//Если Найти(мТипВыгрузки, "С") = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	
	лБылаВыгрузка		= 0;
	лИмяФайлаВыгрузки	= "references.xml";
	
	ДокXML	= Новый COMОбъект(мТипXMLБибилиотеки);
	group = XMLВыполнитьОперацию("СоздатьXML", ДокXML, лИмяФайлаВыгрузки, "references", "Справочники");
	
	Для Каждого лОбъектВыгрузки Из ОбъектыВыгрузки Цикл
		Если лОбъектВыгрузки.ТипОбъектов <> "С" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ лОбъектВыгрузки.Включен Тогда
			Продолжить;
		КонецЕсли;
		
		лНазвание		= лОбъектВыгрузки.Название;
		лПредставление	= лОбъектВыгрузки.Представление;
		лXMLСекция		= лОбъектВыгрузки.XMLСекция;
		
		//Если НЕ АвтоматическийЗапуск и НЕ НадоВыгружать(лНазвание) Тогда
		Если НЕ НадоВыгружать(лНазвание) Тогда
			Продолжить;
		КонецЕсли;
		
		Если лБылаВыгрузка = 0 Тогда
			лСЗнДанные	= Новый СписокЗначений();
			лСЗнДанные.Добавить("Справочники"		, "Текст");
			лСЗнДанные.Добавить(XMLВернутьВремя()	, "Параметр1");
			лСЗнДанные.Добавить(""					, "Параметр2");
			отчДобавитьВОтчет(лСЗнДанные, "Шапка");
			лБылаВыгрузка	= 1;
		КонецЕсли;
		
		мКолвоОбъектов	= 0;
		лДатаНачала		= ТекущаяДата();
		лВремяНачала	= XMLВернутьВремя();
		СообщитьПодробно("Выгрузка данных """ + лПредставление + """...", 1, 1, 1);
		
		лПроцедура	= лОбъектВыгрузки.Процедура;
		мСчВыгрузки=0;
		Выполнить(лПроцедура + "(group, лXMLСекция)");
		
		лСЗнДанные	= Новый СписокЗначений();
		лСЗнДанные.Добавить(лПредставление	, "Текст");
		лСЗнДанные.Добавить(лВремяНачала	, "Параметр1");
		лСЗнДанные.Добавить(мКолвоОбъектов	, "Параметр2");
		отчДобавитьВОтчет(лСЗнДанные, "Действие");
		
		СообщитьПодробно("Выгрузка данных """ + лПредставление + """ завершена."+" Выгружено элементов: "+мСчВыгрузки, 1, 1, 1);
		
		ВывестиВXMLЛог(лДатаНачала, лВремяНачала, лXMLСекция+"; Выгружено объектов; "+мКолвоОбъектов);

	КонецЦикла;
	
	Если xmlВыполнитьОперацию("СохранитьXML", ДокXML, лИмяФайлаВыгрузки, group) = 0 Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры	//ВыгрузитьСправочники()

//***********************************************//
//***********************************************//
// Процедуры выгрузки справочников               //
//                    К О Н Е Ц                  //
//***********************************************//
//***********************************************//


//***********************************************//
//***********************************************//
// Процедуры выгрузки регистров                  //
//                   Н А Ч А Л О                 //
//***********************************************//
//***********************************************//

//****************************************
Функция ВыгрузитьРегОстатки(group) Экспорт
	
	//<rests>
	//	<SKU>
	//		<skucode/>		<!--Код товара-->
	//		<storecode/>	<!--Код склада-->
	//		<firmcode/>		<!--Код фирмы-->
	//		<period/>		<!--Дата остатка товара-->
	//		<quantity/>		<!--Количество-->
	//	</SKU>
	//</rests>
	
	rests	= ДокXML.CreateElement("rests");
    
	лДатаНачала		= ТекущаяДата();
	лВремяНачала	= XMLВернутьВремя();
	лДатаНачалаПериодаВыгрузки = ДатаНачала;
	
	rests	= ДокXML.CreateElement("rests");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	лФирмаПредставление	= СТ_ЗначениеВСтрокуВнутр(мКонстантаФирма);
	
	Запрос	= Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
	               |	ТоварыНаСкладахОстатки.Склад,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&ДатаОтчета,
	               |			Склад В (&СписокСкладов)
	               |				И Номенклатура В (&СписокТоваров)) КАК ТоварыНаСкладахОстатки
	               |ГДЕ
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток > 0";
	
	Запрос.УстановитьПараметр("СписокТоваров"	, тзнГруппаНоменклатуры);
	Запрос.УстановитьПараметр("СписокСкладов"	, спкСклады);
	
	НачКолДней = 0;
	РазностьДатВДнях = (НачалоДня(ДатаКонца) - НачалоДня(лДатаНачалаПериодаВыгрузки)) / (60 * 60 * 24); 
	Если РазностьДатВДнях>31 Тогда
		лДатаНачалаПериодаВыгрузки = ДобавитьМесяц(ДатаКонца,-1);
		РазностьДатВДнях = (НачалоДня(ДатаКонца) - НачалоДня(лДатаНачалаПериодаВыгрузки)) / (60 * 60 * 24);
	КонецЕсли;
		
	Для Период=НачКолДней по РазностьДатВДнях Цикл
		
		лОстатокНаДату = 0;
		
		лДатаЗапроса = КонецДня(лДатаНачалаПериодаВыгрузки+Период*24*60*60);
		лДатаДляВывода = Формат(лДатаЗапроса,"ДЛФ=Д");
		
		Запрос.УстановитьПараметр("ДатаОтчета"	, лДатаЗапроса);
		
		лТЗнЭлементы    = Новый ТаблицаЗначений;
		лТЗнЭлементы	= Запрос.Выполнить().Выгрузить();
		
		Для Каждого лЭлемент Из лТЗнЭлементы Цикл

		лОстаток   = лЭлемент.КоличествоОстаток;
			
		SKU	= ДобавитьОбъект(ДокXML, "Остаток №X", "SKU");
		
		
			Если НЕ ЗначениеЗаполнено(лЭлемент.ХарактеристикаНоменклатуры) Тогда
				ДобавитьПотомка(SKU, "skucode"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Номенклатура));
			Иначе
				ДобавитьПотомка(SKU, "skucode"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент.ХарактеристикаНоменклатуры));
			КонецЕсли;
			
			ДобавитьПотомка(SKU, "storecode"	, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Склад));
			ДобавитьПотомка(SKU, "firmcode"		, лФирмаПредставление);
			ДобавитьПотомка(SKU, "period"		, лДатаДляВывода); 
			ДобавитьПотомка(SKU, "quantity"		, лОстаток);
			
		ДобавитьНоду(rests, SKU);
			
		лОстатокНаДату = лОстатокНаДату + лОстаток;
	КонецЦикла;
		
	СообщитьПодробно("Остаток товаров на "+Формат(лДатаЗапроса,"ДЛФ=Д")+": "+лОстатокНаДату, 2, 1, 1);
	ВывестиВXMLЛог(лДатаНачала, лВремяНачала, "rests; Выгружено остатков на "+Формат(лДатаЗапроса, "ДФ=""гггг-ММ-дд""")+"; "+лОстатокНаДату);
	КонецЦикла;
	ДобавитьНоду(group, rests);
	
КонецФункции	//ВыгрузитьРегОстатки()

//****************************************
Функция ВыгрузитьРегДолги(group) Экспорт
	
	//<debts>
	//	<debt>
	//		<buypointcode/>		<!--Код торговой точки-->
	//		<buyercode/>		<!--Код покупателя-->
	//		<counteragentcode/>	<!--Код контрагента-->
	//		
	//		<firmcode/>			<!--Код фирмы-->
	//		<currencycode/>		<!--Код валюты-->
	//		
	//		<doccode/>       	<!--Код документа (накладной)-->
	//		<docinfo/>			<!--Описание документа-->
	//		<amount/>			<!--Сумма-->
	//	</debt>
	//</debts>
	
	debts	= ДокXML.CreateElement("debts");
	
		лДатаНачала		= ТекущаяДата();
		лВремяНачала	= XMLВернутьВремя();
		
		////////////////////////////////////////////////////
		//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
		////////////////////////////////////////////////////
		//то, что лучше вынести из цикла в целях оптимизации
		////////////////////////////////////////////////////
		
		Если ЗначениеЗаполнено(мКонстантаФирма) Тогда
			лФирмаПредставление = СТ_ЗначениеВСтрокуВнутр(мКонстантаФирма);
		иначе
			лФирмаПредставление = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(мКонстантаВалюта) Тогда
			лВалютаПредставление = СТ_ЗначениеВСтрокуВнутр(мКонстантаВалюта);
		иначе
			лВалютаПредставление = "";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВзаиморасчетыБезДокументовОстатки.Организация,
		               |	ВзаиморасчетыБезДокументовОстатки.Контрагент,
		               |	ВзаиморасчетыБезДокументовОстатки.ДоговорКонтрагента,
					   |	ВзаиморасчетыБезДокументовОстатки.СуммаВзаиморасчетовОстаток КАК ОстатокДолга,
		               |	0 КАК ОстатокПросроченногоДолга0
		               |ИЗ
		               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		               |			&ДатаОстатков,
					   //|			НЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
		               |				Организация = &ТекОрганизация) КАК ВзаиморасчетыБезДокументовОстатки
		               |ГДЕ
		               |	ВзаиморасчетыБезДокументовОстатки.СуммаВзаиморасчетовОстаток > 0";
		
		Запрос.УстановитьПараметр("ДатаОстатков"	, КонецДня(ДатаКонца));
		//Запрос.УстановитьПараметр("ПустойДокументРН", Документы.РеализацияТоваровУслуг.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТекОрганизация"	, мКонстантаФирма);
		
		//начало изменений Ожиганов 20.07.2015 оптимизация выгрузки мобильной торговли 
		//лТЗнВзаиморасчеты	= Запрос.Выполнить().Выгрузить();
		//конец изменений 
		
		//начало изменений Ожиганов 20.07.2015 оптимизация выгрузки мобильной торговли 
		//лТЗнВзаиморасчеты.Свернуть("Организация, Контрагент, ДоговорКонтрагента", "ОстатокДолга, ОстатокПросроченногоДолга0");
		//конец изменений 
		
		//начало изменений Ожиганов 20.07.2015 зачем понадобилось выгружать все движения не понятно
		//судя по дальнейшему коду интересует информация по просрочке
		// и конечному долгу
		// зачем константин всталяет подобные шткуи не совсем непонятно
		
		ТаблицаДолгов = ПКК_КредитныйКонтроль.ПолучитьПросроченнуюДебеторскуюЗадолженность_Таблица(, КонецДня(ДатаКонца),Ложь,КонецДня(ДатаКонца),Истина);
		//ТаблицаДолгов = ПКК_КредитныйКонтроль.ПолучитьПросроченнуюДебеторскуюЗадолженность_Таблица(лТЗнВзаиморасчеты.ВыгрузитьКолонку("Контрагент"), КонецДня(ДатаКонца));
		//конец изменений 
		
		//ТаблИтого[0].КонОст;
		//ТаблИтого[0].Просрочено;
		//ТаблИтого[0].ДнейПросрочено;
		
		ДЗИтого=0;
		ИндексСтрокиВзаиморассчетов=0;
		Для Каждого лЭлемент Из ТаблицаДолгов Цикл
			
			//++ Spl_Апроф 20.11.2014 (k.russkih@a-prof.ru) Выгружаем только документы только с адресами поставки
			Если НЕ ЗначениеЗаполнено(лЭлемент.АдресПоставки) Тогда
			    Продолжить;			
			КонецЕсли;
			//начало изменений Ожиганов 20.07.2015 оптимизация выгрузки мобильной торговли 
			Если лЭлемент.Коност <= 0 Тогда
				продолжить;
			КонецЕсли;	
			//конец изменений 
			
			ИндексСтрокиВзаиморассчетов=ИндексСтрокиВзаиморассчетов+1;
			
			лДокРасчетов = лЭлемент.Регистратор;
			мИмяДокумента = лЭлемент.Регистратор.Метаданные().Синоним;
			лДатаДокумента = Формат(лЭлемент.Дата, "ДЛФ=DT");
			лНомерДокумента = СокрЛП(лЭлемент.НомерДокумента);
			////++ Spl_Апроф 20.10.2014 (k.russkih@a-prof.ru)
			лОписаниеДокумента 	= "";
			мИмяДокумента  = СтрЗаменить(мИмяДокумента,"Реализация товаров и услуг","РН");
			мИмяДокумента  = СтрЗаменить(мИмяДокумента,"Корректировка долга","КД");
			мИмяДокумента  = СтрЗаменить(мИмяДокумента,"Документ расчетов с контрагентом (ручной учет)","ДРК");
			мИмяДокумента  = СтрЗаменить(мИмяДокумента,"Платежное поручение исходящее","ППИ");
			мИмяДокумента  = СтрЗаменить(мИмяДокумента,"Расходный кассовый ордер","РКО");
			
			лОписаниеДокумента = мИмяДокумента + "_" + лНомерДокумента + "_" + лДатаДокумента;
			//лОписаниеДокумента = "";
			Если СтрДлина(лОписаниеДокумента)>50 Тогда
				лОписаниеДокумента = Сред(лОписаниеДокумента, 1, 50); 
			КонецЕсли;
			
			//Попытка
				//++ Spl_Апроф 20.10.2014 (k.russkih@a-prof.ru)
				лКодДокумента		= СТ_ЗначениеВСтрокуВнутр(лДокРасчетов);				
				//лКодДокумента		= "";
				
				Если ЗначениеЗаполнено(лЭлемент.Контрагент) тогда
					лКонтрагент 		= СТ_ЗначениеВСтрокуВнутр(лЭлемент.Контрагент);
				Иначе
					лКонтрагент 		= СТ_ЗначениеВСтрокуВнутр(мКонстантаОснПокупатель);
				КонецЕсли;     
				
				лТорговаяТочка 		= СТ_ЗначениеВСтрокуВнутр(лЭлемент.АдресПоставки);
				//лТорговаяТочка = "";
				
				//++ Spl_Апроф 20.10.2014 (k.russkih@a-prof.ru)
				//Если ТипЗнч(лДокРасчетов.Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") Тогда
				//	лСотрудник			= СТ_ЗначениеВСтрокуВнутр(лДокРасчетов.Грузополучатель.НСИ_ТорговыйПредставитель);
				//Иначе	
				лСотрудник			= "";
				//КонецЕсли;
				
			//Исключение
			//	Если ЗначениеЗаполнено(лЭлемент.Контрагент) тогда
			//		лКонтрагент 		= СТ_ЗначениеВСтрокуВнутр(лЭлемент.Контрагент);
			//	Иначе
			//		лКонтрагент 		= СТ_ЗначениеВСтрокуВнутр(мКонстантаОснПокупатель);
			//	КонецЕсли;
			//	лТорговаяТочка 		= "";
			//	лКодДокумента		= "";
			//КонецПопытки;			
			    			

			//////////////////////////////
			//основное тело цикла (начало)
			//добавление элемента в xml
			//////////////////////////////
			
			debt	= ДобавитьОбъект(ДокXML, "Долг №" + ИндексСтрокиВзаиморассчетов, "debt");
				
			ДобавитьПотомка(debt, "buyercode"		, лКонтрагент);
			ДобавитьПотомка(debt, "counteragentcode", лКонтрагент);
			
			//++ Spl_Апроф 13.11.2014 (k.russkih@a-prof.ru)
			//Если ЗначениеЗаполнено(лТорговаяТочка) тогда
			ДобавитьПотомка(debt, "buypointcode"	, лТорговаяТочка);
			//Иначе	
			//	ДобавитьПотомка(debt, "buypointcode"	, лКонтрагент);
			//конецЕсли;
			
			ДобавитьПотомка(debt, "firmcode"		, лФирмаПредставление);
			ДобавитьПотомка(debt, "currencycode"	, лВалютаПредставление);
			
			ДобавитьПотомка(debt, "doccode"			, лКодДокумента);
			ДобавитьПотомка(debt, "docinfo"			, лОписаниеДокумента);
			ДобавитьПотомка(debt, "period"			, лДатаДокумента);
			
			ДобавитьПотомка(debt, "amount"			, лЭлемент.Просрочено);			
			
			ДобавитьНоду(debts, debt);
			ДЗИтого=ДЗИтого+лЭлемент.Просрочено;
			
			//////////////////////////////
			//основное тело цикла (конец)
			//добавление элемента в xml
			//////////////////////////////
			
		КонецЦикла;
		
		СообщитьПодробно("Всего ДЗ: "+ДЗИтого, 2, 1, 1);
		
		ВывестиВXMLЛог(лДатаНачала, лВремяНачала, "debts; Выгружено долгов на "+Формат(ДатаКонца, "ДФ=""гггг-ММ-дд""")+"; "+ДЗИтого);
	
	ДобавитьНоду(group, debts);
	
	//начало изменений Ожиганов 20.07.2015 оптимизация выгрузки мобильной торговли 
	ТаблицаДолгов = Неопределено;
	//конец изменений 
	
КонецФункции	//ВыгрузитьРегДолги()

//****************************************
Процедура ВыгрузитьРегистры() Экспорт
	
	//Если Найти(мТипВыгрузки, "Р") = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//лТипВыгрузкиРегистров	= ?(Найти(мТипВыгрузки, "РО") = 0, "Р", "РО");
	
	лБылаВыгрузка		= 0;
	//лИмяФайлаВыгрузки	= "registers.xml";
	
	//ДокXML	= Новый COMОбъект(мТипXMLБибилиотеки);
	//group = XMLВыполнитьОперацию("СоздатьXML", ДокXML, лИмяФайлаВыгрузки, "registers", "Регистры");
	
	Для Каждого лОбъектВыгрузки Из ОбъектыВыгрузки Цикл
		Если Найти(лОбъектВыгрузки.ТипОбъектов, "Р") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ лОбъектВыгрузки.Включен Тогда
			Продолжить;
		КонецЕсли;
		
		лНазвание		= лОбъектВыгрузки.Название;
		лПредставление	= лОбъектВыгрузки.Представление;
		лXMLСекция		= лОбъектВыгрузки.XMLСекция;
		
		//Если НЕ АвтоматическийЗапуск и НЕ НадоВыгружать(лНазвание) Тогда
		Если НЕ НадоВыгружать(лНазвание) Тогда
			Продолжить;
		КонецЕсли;
		
		Если лБылаВыгрузка = 0 Тогда
			лСЗнДанные	= Новый СписокЗначений();
			лСЗнДанные.Добавить("Регистры"			, "Текст");
			лСЗнДанные.Добавить(XMLВернутьВремя()	, "Параметр1");
			лСЗнДанные.Добавить(""					, "Параметр2");
			отчДобавитьВОтчет(лСЗнДанные, "Шапка");
			лБылаВыгрузка	= 1;
		КонецЕсли;
		
		лИмяФайлаВыгрузки	= лXMLСекция+".xml";
		
		ДокXML	= Новый COMОбъект(мТипXMLБибилиотеки);
		group = XMLВыполнитьОперацию("СоздатьXML", ДокXML, лИмяФайлаВыгрузки, "registers", лНазвание);
		
		мКолвоОбъектов	= 0;
		лВремяНачала	= XMLВернутьВремя();
		СообщитьПодробно("Выгрузка данных """ + лПредставление + """...", 1, 1, 1);
		мСчВыгрузки=0;
		лПроцедура	= лОбъектВыгрузки.Процедура;
		Выполнить(лПроцедура + "(group)");
		
		лСЗнДанные	= Новый СписокЗначений();
		лСЗнДанные.Добавить(лПредставление	, "Текст");
		лСЗнДанные.Добавить(лВремяНачала	, "Параметр1");
		лСЗнДанные.Добавить(мКолвоОбъектов	, "Параметр2");
		отчДобавитьВОтчет(лСЗнДанные, "Действие");
		
		Если xmlВыполнитьОперацию("СохранитьXML", ДокXML, лИмяФайлаВыгрузки, group) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СообщитьПодробно("Выгрузка данных """ + лПредставление + """ завершена. Выгружено элементов:"+мСчВыгрузки, 1, 1, 1);
		
	КонецЦикла;
	
	//Если xmlВыполнитьОперацию("СохранитьXML", ДокXML, лИмяФайлаВыгрузки, group) = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры	//ВыгрузитьРегистры()


//***********************************************//
//***********************************************//
// Процедуры выгрузки регистров                  //
//                    К О Н Е Ц                  //
//***********************************************//
//***********************************************//


//***********************************************//
//***********************************************//
// Процедуры выгрузки документов                 //
//                   Н А Ч А Л О                 //
//***********************************************//
//***********************************************//

//****************************************
Процедура ВыгрузитьДокУдаленные(pXMLParent, pXMLName, пТип = "РеализацияТоваровУслуг") Экспорт
	
	//<invoices>
	//	<invoice>
	//		<innercode/>	<!--номер документа в Чикаго-->
	//		<outercode/>	<!--номер документа в УС-->
	//		<deleted/>		<!--признак того, что документ был удален-->
	//	</invoice>
	//</invoices>
	
	спкУдаленныеДокументы = новый СписокЗначений;
	
	лМасУдаленныеДокументы	= ПолучитьУдаленныеДокументы("Док." + пТип);
	Для Каждого лКодВнешний Из лМасУдаленныеДокументы Цикл
		
		Если спкУдаленныеДокументы.НайтиПоЗначению(лКодВнешний.КодВнутренний) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		                       
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		lXML	= ДокXML.CreateElement(pXMLName);
		
		ДобавитьПотомка(lXML, "innercode"	, лКодВнешний.КодВнешний);
		ДобавитьПотомка(lXML, "outercode"	, лКодВнешний.КодВнутренний);
		ДобавитьПотомка(lXML, "deleted"		, 1);
		
		ДобавитьНоду(pXMLParent, lXML);
		
		спкУдаленныеДокументы.Добавить(лКодВнешний.КодВнутренний);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
КонецПроцедуры	//ВыгрузитьДокУдаленные()

//****************************************
Функция ВыгрузитьДокПродажи(group, пИмяXML) Экспорт
	
	//<invoices>
	//	<invoice>
	//		<innercode/>		<!--номер документа в Чикаго-->
	//		<outercode/>		<!--номер документа в УС-->
	//		<innerparentcode/>	<!--номер документа-основания в Чикаго-->
	//		<outerparentcode/>	<!--номер документа-основания-->
	//		
	//		<date/>				<!--дата создания документа (ГГГГ-ММ-ДД)-->
	//		<docno/>			<!--номер документа (nchar (50))-->
	//		<printdocnum/>		<!--номер документа в Чикаго для отображения-->
	//		<prndocnum/>		<!-- печатный номер документа-->
	//		
	//		<creatorcode/>		<!--код автора документа - employees-->
	//		<deleted/>			<!--признак того, что документ был удален-->
	//		
	//		<firmcode/>			<!--код фирмы - firms-->
	//		<routecode/>		<!--код маршрута создания документа - routes-->
	//		<employeecode/>		<!--код сотрудника, работавшего на маршруте - employees-->
	//		<buypointcode/>		<!--код торговой точки - buypoints-->
	//		<comment/>			<!--коментарий-->
	//		
	//		<storecode/>		<!--код склада-->
	//		
	//		<buyercode/>		<!--код покупателя - buyers-->
	//		<counteragentcode/>	<!--код контрагента - counteragents-->
	//		
	//		<currencycode/>		<!--код валюты документа - currencies-->
	//		<bw/>				<!--черная/белая 1=черная, 0=белая-->
	//		<paytypecode/>		<!--1-Оплата при отгрузке,2-Оплата с отсрочкой платежа,3-Предоплата-->				
	//		<discountRate/>		<!--процент скидки на документ-->
	//		<usevatrate/>		<!--признак того, что документ учитывает ставку НДС-->
	//		<includevat/>		<!--признак того, что НДС включается в сумму-->
	//		
	//		<body>
	//			<item>
	//				<SKUcode/>			<!--код товара - SKUs-->
	//				
	//				<unitcode/>			<!--код единицы измерения - units-->
	//				<unitfactor/>		<!--коэфициент пересчета единицы измерения в базовую (15, 6)-->
	//				<quantity/>			<!--количество в указанной единице измерения (15, 6)-->
	//				
	//				<priceDiscount/>	<!--цена без скидки (15, 4)-->
	//				<price/>			<!--цена (15, 4)-->
	//				<pricetypecode/>	<!--тип цены для покупателя-->
	//				<discountRate/>		<!--процент скидки-->
	//				<discountAmount/>	<!--сумма скидки (15, 4)-->
	//				<amount/>			<!--сумма (15, 4)-->
	//				
	//				<VATRate/>			<!--процент ставки НДС-->
	//				<VATAmount/>		<!--сумма НДС (15, 4)-->
	//			</item>
	//		</body>
	//	</invoice>
	//</invoices>
	
	invoices	= ДокXML.CreateElement("invoices");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	спкВыгруженыеДокументы.Очистить();
	
	лТЗнЭлементы			= мТЗнДокументыПродаж.Скопировать();
	лОтбор					= Новый Структура("ЭтоОтгрузка", 1);
	лМассивСтрокОтгрузки	= лТЗнЭлементы.НайтиСтроки(лОтбор);
	лТЗнЭлементы			= лТЗнЭлементы.Скопировать(лМассивСтрокОтгрузки);
	
	лТЗнЭлементы.Свернуть("Ссылка, Дата, Номер, Организация, Комментарий, МенеджерПокупателя, Контрагент, ТТ, Сделка, ТипЦен, Склад, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС");
	лТЗнЭлементы.Сортировать("Дата");
	
	
	
	лДатаНачала	= НачалоДня(ДатаНачала);
	лДатаКонца	= КонецДня(ДатаКонца);
	
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	лЧас	= 0;
	Для Каждого лЭлемент Из лТЗнЭлементы Цикл
		
		//Если (лЭлемент.Дата>лДатаКонца) ИЛИ (лЭлемент.Дата<лДатаНачала) тогда
		//	продолжить;
		//КонецЕсли;
		
		лКодВнутренний	= СТ_ЗначениеВСтрокуВнутр(лЭлемент.Ссылка);
		лКодВнешний		= "";
		лКодХеш			= "";
		лКодКПК			= "";
		лКодВнешнийОснования	= "";
		лКодВнутреннийОснования	= "";   
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		Если мИспользоватьСостояния Тогда
		
			лОтбор			= Новый Структура("КодВнутренний", лКодВнутренний);
			лВыборка		= РегистрыСведений.СТ_СостоянияОбъектов.Выбрать(лОтбор);
			Пока лВыборка.Следующий() Цикл
				Если лВыборка.ТипОбъекта = "from chicago" Тогда
					лКодВнешнийОснования	= лВыборка.КодВнешний;
					лКодВнутреннийОснования = лКодВнутренний; 
					Продолжить;
				КонецЕсли;
				
				лКодВнешний	= лВыборка.КодВнешний;
				лКодХеш		= лВыборка.КодХеш;
				лКодКПК		= лВыборка.КодКПК;
			КонецЦикла;
			лКодХешПрежний	= лКодХеш;
			//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
			//лКодХеш	= ПолучитьКодХеш(лЭлемент.Ссылка, "РеализацияТоваровУслуг");
			ПргЗапросХешаРеал.УстановитьПараметр("Ссылка",лЭлемент.Ссылка);
			ВыборкаХэш = ПргЗапросХешаРеал.Выполнить().Выбрать();
			Если ВыборкаХэш.Следующий() Тогда
				лКодХеш	 = ПолучитьКодХеш2(ВыборкаХэш,"РеализацияТоваровУслуг");
			КонецЕсли;	
			
			
			//конец изменений 
			
			Если лКодХеш <> лКодХешПрежний Тогда
				лСостояния	= РегистрыСведений.СТ_СостоянияОбъектов.СоздатьМенеджерЗаписи();
				лСостояния.Объект			= лЭлемент.Ссылка;
				лСостояния.КодВнутренний	= лКодВнутренний;
				лСостояния.КодВнешний		= лКодВнешний;
				лСостояния.КодКПК			= лКодКПК;
				лСостояния.КодХеш			= лКодХеш;
				лСостояния.ТипОбъекта		= "Док.Реализация";
				лСостояния.ДатаЗаписи		= лЭлемент.Дата;
				лСостояния.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		Если лКодВнешнийОснования = "" Тогда
			// пробуем найти по внутреннему коду заявки номер документа Чикаго на регистра состояний объектов
			лКодВнутреннийОснование	= СТ_ЗначениеВСтрокуВнутр(лЭлемент.Сделка);
			лОтбор			= Новый Структура("КодВнутренний", лКодВнутреннийОснование);
			лВыборка		= РегистрыСведений.СТ_СостоянияОбъектов.Выбрать(лОтбор);
			Пока лВыборка.Следующий() Цикл
				Если лВыборка.ТипОбъекта = "from chicago" Тогда
					// нашли такую запись, значит действительно реализация создана на основании заявки из Чикаго
					// получаем номер документа основания в Чикаго
					лКодВнешнийОснования	= СокрЛП(лВыборка.КодВнешний);
					лКодВнутреннийОснования	= СокрЛП(лВыборка.КодВнутренний);  // добавлен код документа основания по 1С
					// прерываем
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		#Если Клиент Тогда
			Если лЧас <> Час(лЭлемент.Дата) Тогда
				Состояние("Выгрузка данных ""Расходные накладные"": " + лЭлемент.Дата);
				лЧас	= Час(лЭлемент.Дата);
			КонецЕсли;
		#КонецЕсли
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////		
		
		invoice	= ДобавитьОбъект(ДокXML, Строка(лЭлемент.Ссылка), "invoice");
		
		ДобавитьПотомка(invoice, "outercode"		, лКодВнутренний);
		ДобавитьПотомка(invoice, "innerparentcode"	, лКодВнешнийОснования);					
		ДобавитьПотомка(invoice, "outerparentcode"	, лКодВнутреннийОснования);					
		лДата = ФорматДаты(лЭлемент.Дата); 		
		ДобавитьПотомка(invoice, "date"				, Строка(лДата));
		ДобавитьПотомка(invoice, "docno"			, лЭлемент.Номер);
		ДобавитьПотомка(invoice, "printdocnum"		, лЭлемент.Номер);
		ДобавитьПотомка(invoice, "prndocnum"		, лЭлемент.Номер);
		
		ДобавитьПотомка(invoice, "creatorcode"		, "");
		ДобавитьПотомка(invoice, "deleted"			, 0);
		
		ДобавитьПотомка(invoice, "firmcode"			, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Организация));
		ДобавитьПотомка(invoice, "routecode"		, "");
		
		Если ЗначениеЗаполнено(лЭлемент.МенеджерПокупателя) Тогда
			лТоргПред = СТ_ЗначениеВСтрокуВнутр(лЭлемент.МенеджерПокупателя);
		Иначе
			лТоргПред = "";
		КонецЕсли;			 
			
		ДобавитьПотомка(invoice, "employeecode"		, лТоргПред);
		
		
		ДобавитьПотомка(invoice, "comment"			, СокрЛП(лЭлемент.Комментарий));
		ДобавитьПотомка(invoice, "storecode"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Склад));
		Если ЗначениеЗаполнено(лЭлемент.ТТ) тогда
			ДобавитьПотомка(invoice, "buypointcode"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент.ТТ));
		Иначе
			ДобавитьПотомка(invoice, "buypointcode"		, "");
		КонецЕсли;
		
		ДобавитьПотомка(invoice, "buyercode"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Контрагент));
		ДобавитьПотомка(invoice, "counteragentcode"	, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Контрагент));
		
		ДобавитьПотомка(invoice, "currencycode"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент.ВалютаДокумента));
		ДобавитьПотомка(invoice, "bw"				, 0);
		ДобавитьПотомка(invoice, "paytypecode"		, 2);
		
		ДобавитьПотомка(invoice, "discountRate"		, 0);
		ДобавитьПотомка(invoice, "usevatrate"		, ?(лЭлемент.УчитыватьНДС, 1, 0));
		ДобавитьПотомка(invoice, "includevat"		, ?(лЭлемент.СуммаВключаетНДС, 1, 0));
		
		//////////////////////////////////////
		//добавление табличной части (начало)
		//////////////////////////////////////
		
		body	= ДокXML.CreateElement("body");
		
		лЕстьТовары	= Ложь;

		лТЗнСтрокиЭлемента = мТЗнДокументыПродаж.НайтиСтроки(Новый Структура("Ссылка", лЭлемент.Ссылка));
		лТипЦенПредставление = СТ_ЗначениеВСтрокуВнутр(лЭлемент.ТипЦен);
		
		Для Каждого лСтрока Из лТЗнСтрокиЭлемента Цикл
			
			лЕстьТовары	= Истина;
			
			item	= ДокXML.CreateElement("item");
			
			Если  ЗначениеЗаполнено(лСтрока.ХарактеристикаНоменклатуры) тогда
				ДобавитьПотомка(item, "SKUcode"			, СТ_ЗначениеВСтрокуВнутр(лСтрока.ХарактеристикаНоменклатуры));
			Иначе
				ДобавитьПотомка(item, "SKUcode"			, СТ_ЗначениеВСтрокуВнутр(лСтрока.Номенклатура));
			КонецЕсли;
			
			//++ Spl_Апроф 30.10.2014 (k.russkih@a-prof.ru)
			ДобавитьПотомка(item, "unitcode"		, СТ_ЗначениеВСтрокуВнутр(лСтрока.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору));
			ДобавитьПотомка(item, "unitfactor"		, 1);
			
			лКоличество = лСтрока.Количество;
			
			Если лКоличество=0 Тогда
				Продолжить;
			КонецЕсли;
			
			лСумма		= лСтрока.Стоимость;
			лСуммаНДС	= лСтрока.НДС;
			
			//++ Spl_Апроф 30.10.2014 (k.russkih@a-prof.ru)
			лСуммаБезСкидки	= лСтрока.СуммаБезСкидки;
			л_СуммаСкидки = лСуммаБезСкидки - лСумма;
			Если НЕ лСуммаБезСкидки = 0 Тогда			
				л_ПроцентСкидки = л_СуммаСкидки / лСуммаБезСкидки * 100;	
			Иначе
				л_ПроцентСкидки = 0;
			КонецЕсли; 
			
			//-- Spl_Апроф
			
			лЦена 		= Окр(лСумма/лКоличество, 4);

			ДобавитьПотомка(item, "quantity"		, лКоличество);
			ДобавитьПотомка(item, "priceDiscount"	, лЦена);
          	ДобавитьПотомка(item, "price"			, лЦена); 
			ДобавитьПотомка(item, "pricetypecode"	, лТипЦенПредставление);
			//++ Spl_Апроф 30.10.2014 (k.russkih@a-prof.ru)
			//ДобавитьПотомка(item, "discountRate"	, 0);
			//ДобавитьПотомка(item, "discountAmount"	, 0);
			ДобавитьПотомка(item, "discountRate"	, л_ПроцентСкидки);
			ДобавитьПотомка(item, "discountAmount"	, л_СуммаСкидки);
			//-- Spl_Апроф
			ДобавитьПотомка(item, "amount"			, лСумма);
		
			ДобавитьПотомка(item, "VATRate"			, Перечисления.СтавкиНДС.Индекс(лСтрока.Номенклатура.СтавкаНДС) + 1);
			ДобавитьПотомка(item, "VATAmount"		, лСуммаНДС);
			
			мСуммаДокументов 		= мСуммаДокументов + лКоличество * лЦена;
			мКоличествоДокументов 	= мКоличествоДокументов + лКоличество;
			
			body.AppendChild(item);
		КонецЦикла;

		
		Если Не лЕстьТовары Тогда
			Продолжить;
		КонецЕсли;
		
		invoice.AppendChild(body);
		
		//////////////////////////////////////
		//добавление табличной части (конец)
		//////////////////////////////////////
		
		ДобавитьНоду(invoices, invoice);
			
		спкВыгруженыеДокументы.Добавить(лКодВнутренний);	
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
	Если мИспользоватьСостояния Тогда
		ВыгрузитьДокУдаленные(invoices, "invoice", "Реализация");
	КонецЕсли;
	
	спкВыгруженыеДокументы.Очистить();

	ДобавитьНоду(group, invoices);

КонецФункции	//ВыгрузитьДокПродажи()

//****************************************
Функция ВыгрузитьДокВозвраты(group, пИмяXML) Экспорт
	
	//<skusReturns>
	//	<skusReturn>
	//		<innercode/>		<!--номер документа в Чикаго-->
	//		<outercode/>		<!--номер документа в УС-->
	//		<innerparentcode/>	<!--номер документа-основания в Чикаго-->
	//		<outerparentcode/>	<!--номер документа-основания-->
	//		
	//		<date/>				<!--дата создания документа (ГГГГ-ММ-ДД)-->
	//		<docno/>			<!--номер документа (nchar (50))-->
	//		<printdocnum/>		<!--номер документа в Чикаго для отображения-->
	//		<prndocnum/>		<!-- печатный номер документа-->
	//		
	//		<creatorcode/>		<!--код автора документа - employees-->
	//		<deleted/>			<!--признак того, что документ был удален-->
	//		
	//		<firmcode/>			<!--код фирмы - firms-->
	//		<routecode/>		<!--код маршрута создания документа - routes-->
	//		<employeecode/>		<!--код сотрудника, работавшего на маршруте - employees-->
	//		<buypointcode/>		<!--код торговой точки - buypoints-->
	//		<comment/>			<!--коментарий-->
	//		
	//		<storecode/>		<!--код склада-->
	//		
	//		<buyercode/>		<!--код покупателя - buyers-->
	//		<counteragentcode/>	<!--код контрагента - counteragents-->
	//		
	//		<currencycode/>		<!--код валюты документа - currencies-->
	//		<bw/>				<!--черная/белая 1=черная, 0=белая-->
	//		<paytypecode/>		<!--1-Оплата при отгрузке,2-Оплата с отсрочкой платежа,3-Предоплата-->				
	//		
	//		<body>
	//			<item>
	//				<SKUcode/>		<!--код товара - SKUs-->
	//				
	//				<unitcode/>		<!--код единицы измерения - units-->
	//				<unitfactor/>	<!--коэфициент пересчета единицы измерения в базовую (15, 6)-->
	//				<quantity/>		<!--количество в указанной единице измерения (15, 6)-->
	//				
	//				<price/>		<!--цена (15, 4)-->
	//				<amount/>		<!--сумма (15, 4)-->
	//				<VATAmount/>	<!--сумма НДС (15, 4)-->
	//				
	//				<Overdue/>		<!--1-просроченный товар, 0-непросроченный-->
	//			</item>
	//		</body>
	//	</skusReturn>
	//</skusReturns>
	
	
	skusReturns	= ДокXML.CreateElement("skusReturns");
	
	спкВыгруженыеДокументы.Очистить();
	
	лТЗнЭлементы			= мТЗнДокументыПродаж.Скопировать();
	лОтбор					= Новый Структура("ЭтоОтгрузка", 0);
	лМассивСтрокОтгрузки	= лТЗнЭлементы.НайтиСтроки(лОтбор);
	
	лТЗнСтрокиДокументыВозврат = лТЗнЭлементы.Скопировать(лМассивСтрокОтгрузки);
	лТЗнЭлементы			= лТЗнЭлементы.Скопировать(лМассивСтрокОтгрузки);
	
	лТЗнЭлементы.Свернуть("Ссылка, Дата, Номер, Организация, Комментарий, МенеджерПокупателя, Контрагент, ТТ, Сделка, ТипЦен, Склад, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС");
	лТЗнЭлементы.Сортировать("Дата");
	
	лДатаНачала	= НачалоДня(ДатаНачала);
	лДатаКонца	= КонецДня(ДатаКонца);
	
	
	лЧас	= 0;
	Для Каждого лЭлемент Из лТЗнЭлементы Цикл
		лКодВнутренний	= СТ_ЗначениеВСтрокуВнутр(лЭлемент.Ссылка);
		лКодВнешний		= "";
		лКодХеш			= "";
		лКодКПК			= "";
		лКодВнешнийОснования	= "";
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		     		
		Если мИспользоватьСостояния Тогда
			
			лОтбор			= Новый Структура("КодВнутренний", лКодВнутренний);
			лВыборка		= РегистрыСведений.СТ_СостоянияОбъектов.Выбрать(лОтбор);
			Пока лВыборка.Следующий() Цикл
				лКодВнешний	= лВыборка.КодВнешний;
				лКодХеш		= лВыборка.КодХеш;
				лКодКПК		= лВыборка.КодКПК;
				//Прервать;	//закомментировано, чтобы код документа-основания не забыть прочитать
			КонецЦикла;
			лКодХешПрежний	= лКодХеш;
			
			//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
			//лКодХеш	= ПолучитьКодХеш(лЭлемент.Ссылка, "ВозвратТоваровОтПокупателя");
			ПргЗапросХешаВозвр.УстановитьПараметр("Ссылка",лЭлемент.Ссылка);
			ВыборкаХэш = ПргЗапросХешаВозвр.Выполнить().Выбрать();
			Если ВыборкаХэш.Следующий() Тогда
				лКодХеш = ПолучитьКодХеш2(ВыборкаХэш,"ВозвратТоваровОтПокупателя");
			КонецЕсли;	
			
			//конец изменений 
            			
			Если лКодХеш <> лКодХешПрежний Тогда
				лСостояния	= РегистрыСведений.СТ_СостоянияОбъектов.СоздатьМенеджерЗаписи();
				лСостояния.Объект			= лЭлемент.Ссылка;
				лСостояния.КодВнутренний	= лКодВнутренний;
				лСостояния.КодВнешний		= лКодВнешний;
				лСостояния.КодКПК			= лКодКПК;
				лСостояния.КодХеш			= лКодХеш;
				лСостояния.ТипОбъекта		= "Док.Возврат";
				лСостояния.ДатаЗаписи		= лЭлемент.Дата;
				лСостояния.Записать();
			КонецЕсли;
		
		КонецЕсли;
	
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		#Если Клиент Тогда
			Если лЧас <> Час(лЭлемент.Дата) Тогда
				Состояние("Выгрузка данных ""Возвратные накладные"": " + лЭлемент.Дата);
				лЧас	= Час(лЭлемент.Дата);
			КонецЕсли;
		#КонецЕсли
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////

		skusReturn	= ДобавитьОбъект(ДокXML, Строка(лЭлемент.Ссылка), "skusReturn");
		
		ДобавитьПотомка(skusReturn, "outercode"			, лКодВнутренний);
		//ДобавитьПотомка(skusReturn, "innerparentcode"	, лКодВнешнийОснования);
		лДата = ФорматДаты(лЭлемент.Дата); 		
		
		ДобавитьПотомка(skusReturn, "date"				, Строка(лДата));
		ДобавитьПотомка(skusReturn, "docno"				, лЭлемент.Номер);
		ДобавитьПотомка(skusReturn, "printdocnum"		, лЭлемент.Номер);
		ДобавитьПотомка(skusReturn, "prndocnum"			, лЭлемент.Номер);
		
		ДобавитьПотомка(skusReturn, "creatorcode"		, "");
		ДобавитьПотомка(skusReturn, "deleted"			, 0);
		
		ДобавитьПотомка(skusReturn, "firmcode"			, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Организация));
		ДобавитьПотомка(skusReturn, "routecode"			, "");
		ДобавитьПотомка(skusReturn, "employeecode"		, ?(ЗначениеЗаполнено(лЭлемент.МенеджерПокупателя),СТ_ЗначениеВСтрокуВнутр(лЭлемент.МенеджерПокупателя),""));
		
		ДобавитьПотомка(skusReturn, "comment"			, СокрЛП(лЭлемент.Комментарий));
		ДобавитьПотомка(skusReturn, "storecode"			, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Склад));
		
		Если ЗначениеЗаполнено(лЭлемент.ТТ) тогда
			ДобавитьПотомка(skusReturn, "buypointcode"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент.ТТ));
		Иначе
			ДобавитьПотомка(skusReturn, "buypointcode"		, "");
		КонецЕсли;
		ДобавитьПотомка(skusReturn, "buyercode"			, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Контрагент));
		ДобавитьПотомка(skusReturn, "counteragentcode"	, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Контрагент));
		
		ДобавитьПотомка(skusReturn, "currencycode"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент.ВалютаДокумента));
		ДобавитьПотомка(skusReturn, "bw"				, 0);
		ДобавитьПотомка(skusReturn, "paytypecode"		, 2);
		
		//////////////////////////////////////
		//добавление табличной части (начало)
		//////////////////////////////////////
		
		body	= ДокXML.CreateElement("body");
		
		лЕстьТовары	= Ложь;
		лОтбор	= Новый Структура("Ссылка", лЭлемент.Ссылка);
		лТЗнСтрокиЭлемента	= лТЗнСтрокиДокументыВозврат.НайтиСтроки(лОтбор);
		Для Каждого лСтрока Из лТЗнСтрокиЭлемента Цикл
			лЕстьТовары	= Истина;
			
			item	= ДокXML.CreateElement("item");
			
			Если  ЗначениеЗаполнено(лСтрока.ХарактеристикаНоменклатуры) тогда
				ДобавитьПотомка(item, "SKUcode"			, СТ_ЗначениеВСтрокуВнутр(лСтрока.ХарактеристикаНоменклатуры));
			Иначе
				ДобавитьПотомка(item, "SKUcode"			, СТ_ЗначениеВСтрокуВнутр(лСтрока.Номенклатура));
			КонецЕсли;
			
			ДобавитьПотомка(item, "unitcode"		, СТ_ЗначениеВСтрокуВнутр(лСтрока.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору));
			ДобавитьПотомка(item, "unitfactor"		, 1);
			
			лКоличество = -лСтрока.Количество;
			
			Если лКоличество=0 Тогда
				Продолжить;
			КонецЕсли;

			ДобавитьПотомка(item, "quantity"		, лКоличество);
			
			лСумма		= -лСтрока.Стоимость;
			лСуммаНДС	= -лСтрока.НДС;
			
			лЦена 		= Окр(лСумма/лКоличество, 4);
           			
			ДобавитьПотомка(item, "price"			, лЦена);
			ДобавитьПотомка(item, "amount"			, лСумма);
			ДобавитьПотомка(item, "VATAmount"		, лСуммаНДС);
			
			ДобавитьПотомка(item, "Overdue"			, 0);
			
			body.AppendChild(item);
			
			мСуммаДокументов 		= мСуммаДокументов + лКоличество * лЦена;
			мКоличествоДокументов 	= мКоличествоДокументов + лКоличество;
           			
		КонецЦикла;
		
		Если Не лЕстьТовары Тогда
			Продолжить;
		КонецЕсли;
		
		skusReturn.AppendChild(body);
		
		//////////////////////////////////////
		//добавление табличной части (конец)
		//////////////////////////////////////
		
		ДобавитьНоду(skusReturns, skusReturn);
			
		спкВыгруженыеДокументы.Добавить(лКодВнутренний);		

		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;
	
	Если мИспользоватьСостояния Тогда
		ВыгрузитьДокУдаленные(skusReturns, "skusReturn", "Возврат");
	КонецЕсли;
	
	спкВыгруженыеДокументы.Очистить();

	ДобавитьНоду(group, skusReturns);
	
КонецФункции	//ВыгрузитьДокВозвраты()

//****************************************
Функция ВыгрузитьДокПеремещения(group, пИмяXML) Экспорт
	
	//<movements>
	//	<movement>
	//		<innercode/>		<!--номер документа в Чикаго-->
	//		<outercode/>		<!--номер документа в УС-->
	//		<innerparentcode/>	<!--номер документа-основания в Чикаго-->
	//		<outerparentcode/>	<!--номер документа-основания-->
	//		
	//		<date/>				<!--дата создания документа (ГГГГ-ММ-ДД)-->
	//		<docno/>			<!--номер документа (nchar (50))-->
	//		<printdocnum/>		<!--номер документа в Чикаго для отображения-->
	//		<prndocnum/>		<!-- печатный номер документа-->
	//		
	//		<creatorcode/>		<!--код автора документа - employees-->
	//		<comment/>			<!--коментарий-->
	//		<deleted/>			<!--признак того, что документ был удален-->
	//		
	//		<firmcode/>			<!--код фирмы-получателя - firms-->
	//		<storecode/>		<!--код склада-получателя - stores-->
	//		<firmsendercode/>	<!--код фирмы-отправителя - firms-->
	//		<storesendercode/>	<!--код склада-отправителя - stores-->
	//		<routecode/>		<!--код маршрута создания документа - routes-->
	//		
	//		<body>
	//			<item>
	//				<SKUcode/>		<!--код товара - SKUs-->
	//				
	//				<unitcode/>		<!--код единицы измерения - units-->
	//				<unitfactor/>	<!--коэфициент пересчета единицы измерения в базовую (15, 6)-->
	//				<quantity/>		<!--количество в указанной единице измерения (15, 6)-->
	//			</item>
	//		</body>
	//	</movement>
	//</movements>
	
	movements	= ДокXML.CreateElement("movements");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	лДатаНачала	= НачалоДня(ДатаНачала);
	лДатаКонца	= КонецДня(ДатаКонца);
	
	Запрос	= Новый Запрос();
	
	ТекстЗапроса	= 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.Дата,
	|	ПеремещениеТоваров.Номер,
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.Комментарий,
	|	ПеремещениеТоваров.СкладОтправитель,
	|	ПеремещениеТоваров.СкладПолучатель,
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Коэффициент,
	|	ПеремещениеТоваровТовары.Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО ПеремещениеТоваровТовары.Ссылка = ПеремещениеТоваров.Ссылка
	|ГДЕ
	|	ПеремещениеТоваров.Дата >= &ДатаНачала
	|	И ПеремещениеТоваров.Дата <= &ДатаКонца
	|	И (НЕ ПеремещениеТоваров.ПометкаУдаления)
	|	И ПеремещениеТоваров.Проведен
	|	И ПеремещениеТоваров.ВидОперации = &ВидОперации
	| 	И ПеремещениеТоваровТовары.Номенклатура В (&ГруппаНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидОперации"	, Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция);
	Запрос.УстановитьПараметр("ДатаНачала"	, лДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца"	, лДатаКонца);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", тзнГруппаНоменклатуры);
	
	ТекстЗапроса = ТекстЗапроса + ДобавитьВЗапросОтбор(Запрос, "Склады", Ложь, "ПеремещениеТоваров.СкладОтправитель");
	ТекстЗапроса = ТекстЗапроса + ДобавитьВЗапросОтбор(Запрос, "Склады", Ложь, "ПеремещениеТоваров.СкладПолучатель");
	
	Запрос.Текст	= ТекстЗапроса;
	лТЗнСтроки	= Запрос.Выполнить().Выгрузить();
	
	лТЗнЭлементы	= лТЗнСтроки.Скопировать(, "Ссылка, Дата, Номер, Организация, Комментарий, СкладОтправитель, СкладПолучатель");
	лТЗнЭлементы.Свернуть("Ссылка, Дата, Номер, Организация, Комментарий, СкладОтправитель, СкладПолучатель");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	лЧас	= 0;
	Для Каждого лЭлемент Из лТЗнЭлементы Цикл
		лКодВнутренний	= СТ_ЗначениеВСтрокуВнутр(лЭлемент.Ссылка);
		лКодВнешний		= "";
		лКодХеш			= "";
		лКодКПК			= "";
		лКодВнешнийОснования	= "";
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		Если мИспользоватьСостояния Тогда
			лОтбор			= Новый Структура("КодВнутренний", лКодВнутренний);
			лВыборка		= РегистрыСведений.СТ_СостоянияОбъектов.Выбрать(лОтбор);
			Пока лВыборка.Следующий() Цикл
				Если лВыборка.ТипОбъекта = "from chicago" Тогда
					лКодВнешнийОснования	= лВыборка.КодВнешний;
					Продолжить;
				КонецЕсли;
				
				лКодВнешний	= лВыборка.КодВнешний;
				лКодХеш		= лВыборка.КодХеш;
				лКодКПК		= лВыборка.КодКПК;
				//Прервать;	//закомментировано, чтобы код документа-основания не забыть прочитать
			КонецЦикла;
			лКодХешПрежний	= лКодХеш;
			//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
			//лКодХеш	= ПолучитьКодХеш(лЭлемент.Ссылка, "ПеремещениеТоваров");
			ПргЗапросХешаПерем.УстановитьПараметр("Ссылка",лЭлемент.Ссылка);
			ВыборкаХэш = ПргЗапросХешаПерем.Выполнить().Выбрать();
			Если ВыборкаХэш.Следующий() Тогда
				лКодХеш = ПолучитьКодХеш2(ВыборкаХэш,"ПеремещениеТоваров");
			КонецЕсли;	
			//конец изменений 
			
			Если лКодХеш <> лКодХешПрежний Тогда
				лСостояния	= РегистрыСведений.СТ_СостоянияОбъектов.СоздатьМенеджерЗаписи();
				лСостояния.Объект= лЭлемент.Ссылка;
				лСостояния.КодВнутренний	= лКодВнутренний;
				лСостояния.КодВнешний		= лКодВнешний;
				лСостояния.КодКПК			= лКодКПК;
				лСостояния.КодХеш			= лКодХеш;
				лСостояния.ТипОбъекта		= "Док.Перемещение";
				лСостояния.ДатаЗаписи		= лЭлемент.Дата;
				лСостояния.Записать();
			КонецЕсли;
		КонецЕсли;
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		#Если Клиент Тогда
			Если лЧас <> Час(лЭлемент.Дата) Тогда
				Состояние("Выгрузка данных ""Перемещения"": " + лЭлемент.Дата);
				лЧас	= Час(лЭлемент.Дата);
			КонецЕсли;
		#КонецЕсли
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		movement	= ДобавитьОбъект(ДокXML, Строка(лЭлемент.Ссылка), "movement");
		
		ДобавитьПотомка(movement, "outercode"		, лКодВнутренний);
		//ДобавитьПотомка(movement, "innerparentcode"	, лКодВнешнийОснования);
		лДата = ФорматДаты(лЭлемент.Дата);	
		
		ДобавитьПотомка(movement, "date"			, Строка(лДата));
		ДобавитьПотомка(movement, "docno"			, лЭлемент.Номер);
		ДобавитьПотомка(movement, "printdocnum"		, лЭлемент.Номер);
		ДобавитьПотомка(movement, "prndocnum"		, лЭлемент.Номер);
		
		ДобавитьПотомка(movement, "creatorcode"		, "");
		ДобавитьПотомка(movement, "comment"			, СокрЛП(лЭлемент.Комментарий));
		ДобавитьПотомка(movement, "deleted"			, 0);
		
		ДобавитьПотомка(movement, "firmcode"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Организация));
		ДобавитьПотомка(movement, "storecode"		, СТ_ЗначениеВСтрокуВнутр(лЭлемент.СкладПолучатель));
		ДобавитьПотомка(movement, "firmsendercode"	, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Организация));
		ДобавитьПотомка(movement, "storesendercode"	, СТ_ЗначениеВСтрокуВнутр(лЭлемент.СкладОтправитель));
		
		//////////////////////////////////////
		//добавление табличной части (начало)
		//////////////////////////////////////
		
		body	= ДокXML.CreateElement("body");
		
		лЕстьТовары	= Ложь;
		лОтбор	= Новый Структура("Ссылка", лЭлемент.Ссылка);
		лТЗнСтрокиЭлемента	= лТЗнСтроки.НайтиСтроки(лОтбор);
		Для Каждого лСтрока Из лТЗнСтрокиЭлемента Цикл
			лЕстьТовары	= Истина;
			
			item	= ДокXML.CreateElement("item");
			
			лКоэффициент	= ?(лСтрока.Коэффициент = 0, 1, лСтрока.Коэффициент);
			лКоличество		= лСтрока.Количество * лКоэффициент;
			
			ДобавитьПотомка(item, "SKUcode"			, СТ_ЗначениеВСтрокуВнутр(лСтрока.Номенклатура));
			
			ДобавитьПотомка(item, "unitcode"		, СТ_ЗначениеВСтрокуВнутр(лСтрока.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору));
			ДобавитьПотомка(item, "unitfactor"		, 1);
			ДобавитьПотомка(item, "quantity"		, лКоличество);
			
			body.AppendChild(item);
			
			мКоличествоДокументов 	= мКоличествоДокументов + лКоличество;
		
		КонецЦикла;
		
		Если Не лЕстьТовары Тогда
			Продолжить;
		КонецЕсли;
		
		movement.AppendChild(body);
		
		//////////////////////////////////////
		//добавление табличной части (конец)
		//////////////////////////////////////
		
		ДобавитьНоду(movements, movement);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;

	ДобавитьНоду(group, movements);
	
КонецФункции	//ВыгрузитьДокПеремещения()

//****************************************
Функция ВыгрузитьДокПриходы(group, пИмяXML) Экспорт
	
	//<skusreceipts>
	//	<skusreceipt>
	//		<innercode/>		<!--номер документа в Чикаго-->
	//		<outercode/>		<!--номер документа в УС-->
	//		<innerparentcode/>	<!--номер документа-основания в Чикаго-->
	//		<outerparentcode/>	<!--номер документа-основания-->
	//		
	//		<date/>				<!--дата создания документа (ГГГГ-ММ-ДД)-->
	//		<docno/>			<!--номер документа (nchar (50))-->
	//		<printdocnum/>		<!--номер документа в Чикаго для отображения-->
	//		<prndocnum/>		<!-- печатный номер документа-->
	//		
	//		<creatorcode/>		<!--код автора документа - employees-->
	//		<deleted/>			<!--признак того, что документ был удален-->
	//		
	//		<employeecode/>		<!--код сотрудника, работавшего на маршруте - employees-->
	//		<storecode/>		<!--код склада-->
	//		<ownjuridicalpersoncode/>	<!--код юр.лица - ownjuridicalpersons-->
	//		
	//		<body>
	//			<item>
	//				<SKUcode/>		<!--код товара - SKUs-->
	//				
	//				<unitcode/>		<!--код единицы измерения - units-->
	//				<unitfactor/>	<!--коэфициент пересчета единицы измерения в базовую (15, 6)-->
	//				<quantity/>		<!--количество в указанной единице измерения (15, 6)-->
	//				
	//				<price/>		<!--цена (15, 4)-->
	//			</item>
	//		</body>
	//	</skusreceipt>
	//</skusreceipts>
	
	skusreceipts	= ДокXML.CreateElement("skusreceipts");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	лДатаНачала	= НачалоДня(ДатаНачала);
	лДатаКонца	= КонецДня(ДатаКонца);
	
	Запрос	= Новый Запрос();
	
	ТекстЗапроса	= 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Дата,
	|	ПоступлениеТоваровУслуг.Номер,
	|	ПоступлениеТоваровУслуг.Организация,
	|	ПоступлениеТоваровУслуг.СкладОрдер КАК Склад,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Цена
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ПоступлениеТоваровУслугТовары.Ссылка = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Дата >= &ДатаНачала
	|	И ПоступлениеТоваровУслуг.Дата <= &ДатаКонца
	|	И (НЕ ПоступлениеТоваровУслуг.ПометкаУдаления)
	|	И ПоступлениеТоваровУслуг.Проведен
	|	И ПоступлениеТоваровУслуг.ВидПоступления = &ВидПоступления
	| 	И ПоступлениеТоваровУслугТовары.Номенклатура В (&ГруппаНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидПоступления"	, Перечисления.ВидыПоступленияТоваров.НаСклад);
	Запрос.УстановитьПараметр("ДатаНачала"	, лДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца"	, лДатаКонца);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", тзнГруппаНоменклатуры);
	
	ТекстЗапроса = ТекстЗапроса + ДобавитьВЗапросОтбор(Запрос, "Поставщики", Ложь, "ПоступлениеТоваровУслуг.Контрагент");
	
	Запрос.Текст	= ТекстЗапроса ; 
	лТЗнСтроки	= Запрос.Выполнить().Выгрузить();
	
	лТЗнЭлементы	= лТЗнСтроки.Скопировать(, "Ссылка, Дата, Номер, Организация, Склад");
	лТЗнЭлементы.Свернуть("Ссылка, Дата, Номер, Организация, Склад");
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	лЧас	= 0;
	Для Каждого лЭлемент Из лТЗнЭлементы Цикл
		лКодВнутренний	= СТ_ЗначениеВСтрокуВнутр(лЭлемент.Ссылка);
		лКодВнешний		= "";
		лКодХеш			= "";
		лКодКПК			= "";
		лКодВнешнийОснования	= "";
		
		//////////////////////////////
		//фильтрующие условия (начало)
		//////////////////////////////
		
		Если мИспользоватьСостояния Тогда
			
			лОтбор			= Новый Структура("КодВнутренний", лКодВнутренний);
			лВыборка		= РегистрыСведений.СТ_СостоянияОбъектов.Выбрать(лОтбор);
			Пока лВыборка.Следующий() Цикл
				Если лВыборка.ТипОбъекта = "from chicago" Тогда
					лКодВнешнийОснования	= лВыборка.КодВнешний;
					Продолжить;
				КонецЕсли;
				
				лКодВнешний	= лВыборка.КодВнешний;
				лКодХеш		= лВыборка.КодХеш;
				лКодКПК		= лВыборка.КодКПК;
				//Прервать;	//закомментировано, чтобы код документа-основания не забыть прочитать
			КонецЦикла;
			лКодХешПрежний	= лКодХеш;
			лКодХеш	= ПолучитьКодХеш(лЭлемент.Ссылка, "ПоступлениеТоваровУслуг");
			
			Если лКодХеш <> лКодХешПрежний Тогда
				лСостояния	= РегистрыСведений.СТ_СостоянияОбъектов.СоздатьМенеджерЗаписи();
				лСостояния.Объект			= лЭлемент.Ссылка;
				лСостояния.КодВнутренний	= лКодВнутренний;
				лСостояния.КодВнешний		= лКодВнешний;
				лСостояния.КодКПК			= лКодКПК;
				лСостояния.КодХеш			= лКодХеш;
				лСостояния.ТипОбъекта		= "Док.Поступление";
				лСостояния.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		//////////////////////////////
		//фильтрующие условия (конец)
		//////////////////////////////
		
		#Если Клиент Тогда
			Если лЧас <> Час(лЭлемент.Дата) Тогда
				Состояние("Выгрузка данных ""Приходные накладные"": " + лЭлемент.Дата);
				лЧас	= Час(лЭлемент.Дата);
			КонецЕсли;
		#КонецЕсли
		
		//////////////////////////////
		//основное тело цикла (начало)
		//добавление элемента в xml
		//////////////////////////////
		
		skusreceipt	= ДобавитьОбъект(ДокXML, Строка(лЭлемент.Ссылка), "skusreceipt");
		
		ДобавитьПотомка(skusreceipt, "outercode"		, лКодВнутренний);
		//ДобавитьПотомка(skusreceipt, "innerparentcode"	, лКодВнешнийОснования);
		лДата = ФорматДаты(лЭлемент.Дата);	
		
		ДобавитьПотомка(skusreceipt, "date"				, Строка(лДата));
		ДобавитьПотомка(skusreceipt, "docno"			, лЭлемент.Номер);
		ДобавитьПотомка(skusreceipt, "printdocnum"		, лЭлемент.Номер);
		ДобавитьПотомка(skusreceipt, "prndocnum"		, лЭлемент.Номер);
		
		ДобавитьПотомка(skusreceipt, "creatorcode"		, "");
		ДобавитьПотомка(skusreceipt, "deleted"			, 0);
		
		ДобавитьПотомка(skusreceipt, "employeecode"				, "");
		ДобавитьПотомка(skusreceipt, "storecode"				, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Склад));
		ДобавитьПотомка(skusreceipt, "ownjuridicalpersoncode"	, СТ_ЗначениеВСтрокуВнутр(лЭлемент.Организация));
		
		//////////////////////////////////////
		//добавление табличной части (начало)
		//////////////////////////////////////
		
		body	= ДокXML.CreateElement("body");
		
		лЕстьТовары	= Ложь;
		лОтбор	= Новый Структура("Ссылка", лЭлемент.Ссылка);
		лТЗнСтрокиЭлемента	= лТЗнСтроки.НайтиСтроки(лОтбор);
		Для Каждого лСтрока Из лТЗнСтрокиЭлемента Цикл
			лЕстьТовары	= Истина;
			
			item	= ДокXML.CreateElement("item");
			
			лКоэффициент	= ?(лСтрока.Коэффициент = 0, 1, лСтрока.Коэффициент);
			лКоличество  	= лСтрока.Количество * лКоэффициент;
			
			ДобавитьПотомка(item, "SKUcode"			, СТ_ЗначениеВСтрокуВнутр(лСтрока.Номенклатура));
			
			ДобавитьПотомка(item, "unitcode"		, СТ_ЗначениеВСтрокуВнутр(лСтрока.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору));
			ДобавитьПотомка(item, "unitfactor"		, 1);
			ДобавитьПотомка(item, "quantity"		, лКоличество);
			
			ДобавитьПотомка(item, "price"			, лСтрока.Цена);
			
			body.AppendChild(item);
			
			мКоличествоДокументов 	= мКоличествоДокументов + лКоличество;
			мСуммаДокументов		= мСуммаДокументов + лКоличество * лСтрока.Цена;

		КонецЦикла;
		
		Если Не лЕстьТовары Тогда
			Продолжить;
		КонецЕсли;
		
		skusreceipt.AppendChild(body);
		
		//////////////////////////////////////
		//добавление табличной части (конец)
		//////////////////////////////////////
		
		ДобавитьНоду(skusreceipts, skusreceipt);
		
		//////////////////////////////
		//основное тело цикла (конец)
		//добавление элемента в xml
		//////////////////////////////
		
	КонецЦикла;

	ДобавитьНоду(group, skusreceipts);
	
КонецФункции	//ВыгрузитьДокПриходы()

//****************************************
Процедура ВыгрузитьДокументы() Экспорт
	
	//Если Найти(мТипВыгрузки, "Д") = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	
	лБылаВыгрузка		= 0;
	лИмяФайлаВыгрузки	= "client\documentsYYYYMMDDHHMMSS.xml";
	
	ДокXML	= Новый COMОбъект(мТипXMLБибилиотеки);
	group = XMLВыполнитьОперацию("СоздатьXML", ДокXML, лИмяФайлаВыгрузки, "documents", "Документы");
	
	Для Каждого лОбъектВыгрузки Из ОбъектыВыгрузки Цикл
		Если лОбъектВыгрузки.ТипОбъектов <> "Д" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ лОбъектВыгрузки.Включен Тогда
			Продолжить;
		КонецЕсли;
		
		лНазвание		= лОбъектВыгрузки.Название;
		лПредставление	= лОбъектВыгрузки.Представление;
		лXMLСекция		= лОбъектВыгрузки.XMLСекция;
		
		//Если НЕ АвтоматическийЗапуск и НЕ НадоВыгружать(лНазвание) Тогда
		Если НЕ НадоВыгружать(лНазвание) Тогда
			Продолжить;
		КонецЕсли;
		
		Если лБылаВыгрузка = 0 Тогда
			лСЗнДанные	= Новый СписокЗначений();
			лСЗнДанные.Добавить("Документы"			, "Текст");
			лСЗнДанные.Добавить(XMLВернутьВремя()	, "Параметр1");
			лСЗнДанные.Добавить(""					, "Параметр2");
			отчДобавитьВОтчет(лСЗнДанные, "Шапка");
			лБылаВыгрузка	= 1;
		КонецЕсли;
		
		мКолвоОбъектов	= 0;
		мСчВыгрузки=0;
		мСуммаДокументов=0;
		мКоличествоДокументов=0;
		лДатаНачала 	= ТекущаяДата();
		лВремяНачала	= XMLВернутьВремя();
		СообщитьПодробно("Выгрузка данных """ + лПредставление + """...", 1, 1, 1);
		
		лПроцедура	= лОбъектВыгрузки.Процедура;
		Выполнить(лПроцедура + "(group, лXMLСекция)");
		
		лСЗнДанные	= Новый СписокЗначений();
		лСЗнДанные.Добавить(лПредставление	, "Текст");
		лСЗнДанные.Добавить(лВремяНачала	, "Параметр1");
		лСЗнДанные.Добавить(мКолвоОбъектов	, "Параметр2");
		отчДобавитьВОтчет(лСЗнДанные, "Действие");
		
		СообщитьПодробно("Выгрузка данных """ + лПредставление + """ завершена."+" Выгружено документов: "+мСчВыгрузки+?(мКоличествоДокументов=0,""," на сумму "+мСуммаДокументов+" руб, "+мКоличествоДокументов+" ед."), 1, 1, 1);
		
		ВывестиВXMLЛог(лДатаНачала, лВремяНачала, лXMLСекция+"; "+Формат(ДатаНачала, "ДФ=""гггг-ММ-дд""")+" - "+Формат(ДатаКонца, "ДФ=""гггг-ММ-дд""")+" выгружено документов "+мКоличествоДокументов+"; "+мСуммаДокументов);

	КонецЦикла;
	
	лИмяФайлаВыгрузки	= СоздатьИмяФайлаИзШаблона(лИмяФайлаВыгрузки);	//вынесено из процедуры, чтобы передавалось в "ЗаписатьLog"
	Если xmlВыполнитьОперацию("СохранитьXML", ДокXML, лИмяФайлаВыгрузки, group) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	xmlВыполнитьОперацию("ЗаписатьLog", ДокXML, лИмяФайлаВыгрузки, "filelog.xml");
	
КонецПроцедуры	//ВыгрузитьДокументы()

//***********************************************//
//***********************************************//
// Процедуры выгрузки документов                 //
//                    К О Н Е Ц                  //
//***********************************************//
//***********************************************//


//****************************************
Функция ПроверитьПараметрыВыгрузки() Экспорт
	
	лОК = 1;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		СообщитьПодробно("Дата начала должна быть заполнена!", 2, 0, 4);
		лОК = 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаКонца) Тогда
		СообщитьПодробно("Дата конца должна быть заполнена!", 2, 0, 4);
		лОК = 0;
	КонецЕсли;
	
	Если ДатаНачала > ДатаКонца Тогда
		СообщитьПодробно("Дата начала не должна превосходить дату конца!", 2, 0, 4);
		лОК = 0;
	КонецЕсли;
	
	Если ДатаКонца > ТекущаяДата() Тогда
		ДатаКонца	= ТекущаяДата();
	КонецЕсли;
	Если ДатаНачала > ДатаКонца Тогда
		ДатаНачала	= ДатаКонца;
	КонецЕсли;	
	
	//Если ОтборНеЗаполнен("Покупатели") Тогда
	//	СообщитьПодробно("Не установлен обязательный фильтр по покупателям!", 2, 0, 4);
	//	лОК = 0;
	//КонецЕсли;
	
	//Если ОтборНеЗаполнен("Сотрудники") Тогда
	//	СообщитьПодробно("Не установлен обязательный фильтр по сотрудникам!", 2, 0, 4);
	//	лОК = 0;
	//КонецЕсли;
	
	Если ОтборНеЗаполнен("Склады") Тогда
		СообщитьПодробно("Не установлен обязательный фильтр по складам!", 2, 0, 4);
		лОК = 0;
	КонецЕсли;
	
	Если ОтборНеЗаполнен("Товары") Тогда
		СообщитьПодробно("Не установлен обязательный фильтр по товарам!", 2, 0, 4);
		лОК = 0;
	КонецЕсли;
                      	         
	Возврат лОК;
	
КонецФункции	//ПроверитьПараметрыВыгрузки()

//****************************************
Процедура ИзменитьПометкиВыгружаемыхОбъектов(пТип = Истина) Экспорт
	
	Для Каждого лОбъектСписка Из СЗнОбъекты Цикл
		лНазвание	= лОбъектСписка.Значение;
		лПометка	= лОбъектСписка.Пометка;
		
		Если ФлажокПодробно = пТип Тогда
			лСтрока		= ОбъектыВыгрузки.Найти(лНазвание, "Название");
		Иначе
			лСтрока		= ГруппыВыгрузки.Найти(лНазвание, "Название");
		КонецЕсли;
		
		Если лСтрока <> Неопределено Тогда
			лСтрока.Отметка	= лПометка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	//ИзменитьПометкиВыгружаемыхОбъектов()

//****************************************
Процедура ОбновитьСписокВыгружаемыхОбъектов(Режим = "") Экспорт
	
	Если Режим = "ОбновлениеСпискаПараметров" Тогда
		// передан параметр преднастроенных объектов обмена, перезаполняем список параметров соглассно источнику вызова
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			Если ДополнительныеПараметры.СписокПараметров.Количество() <> 0 Тогда
				СЗнОбъекты.Очистить();
				
				Для Каждого строкаПараметра Из ДополнительныеПараметры.СписокПараметров Цикл
					
	//ФлажокПодробно			= лЗначенияНастройки.ст_выгрузка_Подробно;
	//Отбор					= лЗначенияНастройки.ст_выгрузка_Отбор;
	//ОбъектыВыгрузки			= лЗначенияНастройки.ст_выгрузка_Объекты;
	//ГруппыВыгрузки			= лЗначенияНастройки.ст_выгрузка_Группы;
	//СЗнОбъекты				= лЗначенияНастройки.ст_выгрузка_Список;
					
	Если строкаПараметра.Наименование="ст_выгрузка_Отбор" тогда
		   Отбор=строкаПараметра.Получить(); 		   
		   иначе			
					СЗнОбъекты.Добавить(строкаПараметра.Наименование, строкаПараметра.Представление, строкаПараметра.Пометка); //Отметка);
	конецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СЗнОбъекты.Очистить();
		// при передаче любого другого парамтера запуска обработки выполняем действия по умолчанию
		Если ФлажокПодробно Тогда
			Для Каждого лОбъектВыгрузки Из ОбъектыВыгрузки Цикл
				Если лОбъектВыгрузки.Включен Тогда
					СЗнОбъекты.Добавить(лОбъектВыгрузки.Название, лОбъектВыгрузки.Представление, лОбъектВыгрузки.Отметка); //Отметка);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Для Каждого лГруппаВыгрузки Из ГруппыВыгрузки Цикл
				СЗнОбъекты.Добавить(лГруппаВыгрузки.Название, лГруппаВыгрузки.Представление, лГруппаВыгрузки.Отметка); //Отметка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	//ОбновитьСписокВыгружаемыхОбъектов()

//****************************************
Функция ПрочитатьНастройкуИзТаблицы(пОбласть, пВысота, пНазвание) Экспорт
	
	лЗначение	= "";
	Для р = 1 По пВысота Цикл
		лНазвание	= пОбласть.Область(р, 3, р, 3).Текст;
		Если лНазвание = пНазвание Тогда
			лЗначение	= пОбласть.Область(р, 4, р, 4).Текст;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат лЗначение;
	
КонецФункции	//ПрочитатьНастройкуИзТаблицы()

//****************************************
Процедура ПрочитатьНастройкиИзТаблицы(пПолностью = 1) Экспорт
	
	лТаблица	= ПолучитьМакет("Настройки");
	
	//////////////////////////////
	//1 - Общие настройки		//
	//////////////////////////////
	Если пПолностью = 1 Тогда
		лОбласть	= лТаблица.ПолучитьОбласть("ОбщиеНастройки");
		лВысота		= лОбласть.ВысотаТаблицы;
		
		мИнфоКомпания			= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Компания:");
		мИнфоКодДистрибьютора	= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Дистрибьютор:");
		мИнфоВерсия				= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Версия:");
		мИнфоДата				= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Дата:");
		
		мИнфоКаталогДанных		= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Каталог обмена:");
		мИнфоИмяКомпьютера		= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Имя компьютера:");
		мИмяПользователя		= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Имя пользователя:");
	КонецЕсли;
	
	//////////////////////////////
	//2 - Объекты выгрузки		//
	//////////////////////////////
	
	лОбласть	= лТаблица.ПолучитьОбласть("ОбъектыВыгрузки");
	лВысота		= лОбласть.ВысотаТаблицы;
	
	//инициализация списка выгружаемых объектов
	Если ОбъектыВыгрузки.Колонки.Найти("Название") 		= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("Название"); 		КонецЕсли;
	Если ОбъектыВыгрузки.Колонки.Найти("Представление") = Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("Представление"); 	КонецЕсли;
	Если ОбъектыВыгрузки.Колонки.Найти("Отметка") 		= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("Отметка"); 			КонецЕсли;
	Если ОбъектыВыгрузки.Колонки.Найти("КодГруппы") 	= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("КодГруппы"); 		КонецЕсли;
	Если ОбъектыВыгрузки.Колонки.Найти("ТипОбъектов") 	= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("ТипОбъектов"); 		КонецЕсли;
	Если ОбъектыВыгрузки.Колонки.Найти("XMLСекция") 	= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("XMLСекция"); 		КонецЕсли;
	Если ОбъектыВыгрузки.Колонки.Найти("Процедура") 	= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("Процедура"); 		КонецЕсли;
	Если ОбъектыВыгрузки.Колонки.Найти("ПоУмолчанию") 	= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("ПоУмолчанию"); 		КонецЕсли;
	Если ОбъектыВыгрузки.Колонки.Найти("Включен") 		= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("Включен"); 			КонецЕсли;
	
	ПрежниеОбъектыВыгрузки	= Новый ТаблицаЗначений();
	ПрежниеОбъектыВыгрузки	= ОбъектыВыгрузки.Скопировать();
	
	Для р = 1 По лВысота Цикл
		лНазвание	= лОбласть.Область(р, 4, р, 4).Текст;
		Если лНазвание = "" Тогда
			Продолжить;
		КонецЕсли;
		
		лСтрока	= ОбъектыВыгрузки.Найти(лНазвание, "Название");
		Если лСтрока = Неопределено Тогда
			лСтрока	= ОбъектыВыгрузки.Добавить();
			лСтрока.Название	= лНазвание;
			лСтрока.Отметка		= ?(лОбласть.Область(р, 3, р, 3).Текст = "X", Ложь, Истина);
		КонецЕсли;
		
		лСтрока.Представление	= лОбласть.Область(р, 6, р, 6).Текст;
		лСтрока.КодГруппы		= лОбласть.Область(р, 7, р, 7).Текст;
		лСтрока.XMLСекция		= лОбласть.Область(р, 8, р, 8).Текст;
		лСтрока.ТипОбъектов		= лОбласть.Область(р, 9, р, 9).Текст;
		лСтрока.Процедура		= лОбласть.Область(р, 10, р, 10).Текст;
		лСтрока.ПоУмолчанию		= ?(лОбласть.Область(р, 3, р, 3).Текст = "X", Ложь, Истина);	//включить в выгрузку по умолчанию
		лСтрока.Включен			= ?(лОбласть.Область(р, 5, р, 5).Текст = "X", Ложь, Истина);	//не отображать (служебные)
		
		лСтрока	= ПрежниеОбъектыВыгрузки.Найти(лНазвание, "Название");
		Если лСтрока <> Неопределено Тогда
			ПрежниеОбъектыВыгрузки.Удалить(лСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого лСтрокаПрежняя Из ПрежниеОбъектыВыгрузки Цикл
		лНазвание	= лСтрокаПрежняя.Название;
		лСтрока		= ОбъектыВыгрузки.Найти(лНазвание, "Название");
		Если лСтрока <> Неопределено Тогда
			ОбъектыВыгрузки.Удалить(лСтрока);
		КонецЕсли;
	КонецЦикла;
	
	//////////////////////////////
	//3 - Группы выгрузки		//
	//////////////////////////////
	
	лОбласть	= лТаблица.ПолучитьОбласть("ГруппыВыгрузки");
	лВысота		= лОбласть.ВысотаТаблицы;
	
	Если ГруппыВыгрузки.Колонки.Найти("Название") = Неопределено		Тогда ГруппыВыгрузки.Колонки.Добавить("Название"); КонецЕсли;
	Если ГруппыВыгрузки.Колонки.Найти("Представление") = Неопределено	Тогда ГруппыВыгрузки.Колонки.Добавить("Представление"); КонецЕсли;
	Если ГруппыВыгрузки.Колонки.Найти("Отметка") = Неопределено			Тогда ГруппыВыгрузки.Колонки.Добавить("Отметка"); КонецЕсли;
	Если ГруппыВыгрузки.Колонки.Найти("КодГруппы") = Неопределено		Тогда ГруппыВыгрузки.Колонки.Добавить("КодГруппы"); КонецЕсли;
	Если ГруппыВыгрузки.Колонки.Найти("ТипОбъектов") = Неопределено		Тогда ГруппыВыгрузки.Колонки.Добавить("ТипОбъектов"); КонецЕсли;
	Если ГруппыВыгрузки.Колонки.Найти("ПоУмолчанию") = Неопределено		Тогда ГруппыВыгрузки.Колонки.Добавить("ПоУмолчанию"); КонецЕсли;
	
	ПрежниеГруппыВыгрузки	= Новый ТаблицаЗначений();
	ПрежниеГруппыВыгрузки	= ГруппыВыгрузки.Скопировать();
	
	Для р = 1 По лВысота Цикл
		лНазвание	= лОбласть.Область(р, 4, р, 4).Текст;
		Если лНазвание = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если лОбласть.Область(р, 5, р, 5).Текст = "X" Тогда
			Продолжить;
		КонецЕсли;
		
		лСтрока	= ГруппыВыгрузки.Найти(лНазвание, "Название");
		Если лСтрока = Неопределено Тогда
			лСтрока	= ГруппыВыгрузки.Добавить();
			лСтрока.Название	= лНазвание;
			лСтрока.Отметка		= ?(лОбласть.Область(р, 3, р, 3).Текст = "X", Ложь, Истина);
		КонецЕсли;
		
		лПоУмолчанию	= 1;
		Если лОбласть.Область(р, 3, р, 3).Текст = "X" Тогда
			лПоУмолчанию	= 0;
		КонецЕсли;
		
		лСтрока.Представление	= лОбласть.Область(р, 6, р, 6).Текст;
		лСтрока.КодГруппы		= лОбласть.Область(р, 7, р, 7).Текст;
		лСтрока.ТипОбъектов		= лОбласть.Область(р, 9, р, 9).Текст;
		лСтрока.ПоУмолчанию		= ?(лОбласть.Область(р, 3, р, 3).Текст = "X", Ложь, Истина);
		
		лСтрока	= ПрежниеГруппыВыгрузки.Найти(лНазвание, "Название");
		Если лСтрока <> Неопределено Тогда
			ПрежниеГруппыВыгрузки.Удалить(лСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого лСтрокаПрежняя Из ПрежниеГруппыВыгрузки Цикл
		лНазвание	= лСтрокаПрежняя.Название;
		лСтрока		= ГруппыВыгрузки.Найти(лНазвание, "Название");
		Если лСтрока <> Неопределено Тогда
			ГруппыВыгрузки.Удалить(лСтрока);
		КонецЕсли;
	КонецЦикла;
	
	//////////////////////////////
	//5 - Отборы				//
	//////////////////////////////
	
	Если пПолностью = 1 Тогда
		лОбласть	= лТаблица.ПолучитьОбласть("Отборы");
		лВысота		= лОбласть.ВысотаТаблицы;
		
		ПоляНастройки.Очистить();
		
		ПрежниеОтборы	= Новый Массив();
		Для Каждого лСтрокаОтбора Из Отбор Цикл
			ПрежниеОтборы.Добавить(лСтрокаОтбора.Имя);
		КонецЦикла;
		
		Для р = 1 По лВысота Цикл
			лТип		= лОбласть.Область(р, 3, р, 3).Текст;
			лВключен	= ?(лОбласть.Область(р, 5, р, 5).Текст = "X", Ложь, Истина);
			
			Если лТип <> "Справочник" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не лВключен Тогда
				Продолжить;
			КонецЕсли;
			
			лНазвание		= лОбласть.Область(р, 6, р, 6).Текст;
			лПредставление	= лОбласть.Область(р, 7, р, 7).Текст;
			лВид			= лОбласть.Область(р, 4, р, 4).Текст;
			лОписаниеТипа	= Новый ОписаниеТипов(лТип + "Ссылка." + лВид);
			
			лНовоеПоле	= ПоляНастройки.Добавить(лНазвание, лПредставление, лОписаниеТипа, );
			лНовоеПоле.Отбор	= Истина;
			
			лОтборПрежний	= ПрежниеОтборы.Найти(лНазвание);
			Если лОтборПрежний <> Неопределено Тогда
				ПрежниеОтборы.Удалить(лОтборПрежний);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого лНазвание Из ПрежниеОтборы Цикл
			лЭлементОтбора	= Отбор.Найти(лНазвание);
			Если лЭлементОтбора <> Неопределено Тогда
				Отбор.Удалить(Отбор.Индекс(лЭлементОтбора));
			КонецЕсли;
		КонецЦикла;
		
		Отбор.УстановитьДоступныеПоля(ПоляНастройки);
		Для Каждого лПолеНастройки Из ПоляНастройки Цикл
			Если Отбор.Найти(лПолеНастройки.Имя) = Неопределено Тогда
				Отбор.Добавить(лПолеНастройки.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	//ПрочитатьНастройкиИзТаблицы()

//****************************************
Функция IsNullРеквизит(section, пИмяРеквизита, пЗначениеПоУмолчанию) Экспорт
	
	Попытка
		лРезультат	= СокрЛП(section.SelectSingleNode(пИмяРеквизита).text);
		Если Нрег(лРезультат) = "true" Тогда
			лРезультат	= 1;
		ИначеЕсли Нрег(лРезультат) = "false" Тогда
			лРезультат	= 0;
		КонецЕсли;
	Исключение
		лРезультат	= пЗначениеПоУмолчанию;
	КонецПопытки;
	
	Возврат лРезультат;
	
КонецФункции	//IsNullРеквизит()

//****************************************
Процедура ВыполнитьМодуль() Экспорт
	
	Если Прав(мКаталогДанных, 1) <> "\" Тогда
		мКаталогДанных	= мКаталогДанных + "\";
	КонецЕсли;
	
	отчОткрытьОтчет();
	отчДобавитьВОтчет("Выгрузка данных  для ""ST-Чикаго""", "Заголовок", 1, 1);
	
	Если ПолучитьТипXMLБибилиотеки() = "" Тогда
		СообщитьПодробно("Не обнаружено библиотек для работы с xml-данными!", 2, 0, 4);
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПараметрыВыгрузки() = 0 Тогда
		отчЗакрытьОтчет();
		Возврат;
	КонецЕсли;
	мДатаОбработки				= ДатаКонца;
	
	////////////////////////////////////////////////////
	//СОЗДАНИЕ ПУСТЫХ ЗАГОТОВОК ФАЙЛОВ (начало)
	////////////////////////////////////////////////////
	//необходимо, чтобы не завалилась репликация
	////////////////////////////////////////////////////
	
	лФайл	= Новый Файл(мКаталогДанных + "confirmation");
	Если НЕ лФайл.Существует() Тогда
		Попытка
			СоздатьКаталог(мКаталогДанных + "confirmation");
		Исключение
			СообщитьПодробно("Не удалось создать каталог " + мКаталогДанных + "confirmation", 0, 0, 3, "Ошибка");
		КонецПопытки;
	КонецЕсли;
	
	лПолноеИмяФайлаЛога	= мКаталогДанных + "confirmationslog.xml";
	лФайл	= Новый Файл(лПолноеИмяФайлаЛога);
	Если НЕ лФайл.Существует() Тогда
		ДокXML = Новый COMОбъект(мТипXMLБибилиотеки);
		node = ДокXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
		ДокXML.preserveWhiteSpace = 1;
		ДокXML.AppendChild(node);
		
		group = ДокXML.CreateElement("confirmationslog");
		ДокXML.AppendChild(group);
		group1 = ДокXML.CreateElement("confirmations");
		group.AppendChild(group1);
		
		Попытка
			ДокXML.Save(лПолноеИмяФайлаЛога);
		Исключение
			СообщитьПодробно(лПолноеИмяФайлаЛога, 0, 0, 3, "Ошибка");
			СообщитьПодробно(ОписаниеОшибки(), 0, 0, 3, "Ошибка");
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		chicago = ДокXML.DocumentElement.selectSingleNode("chicago");
	Исключение
	КонецПопытки;
	
	////////////////////////////////////////////////////
	//СОЗДАНИЕ ПУСТЫХ ЗАГОТОВОК ФАЙЛОВ (конец)
	////////////////////////////////////////////////////
	//необходимо, чтобы не завалилась репликация
	////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, предварительная (начало)
	////////////////////////////////////////////////////	
	
	лФайл	= Новый Файл(мКаталогДанных + "intlogs");
	Если лФайл.Существует() = 0 Тогда
		Попытка
			СоздатьКаталог(мКаталогДанных + "intlogs");
		Исключение
			Сообщить("Не удалось создать каталог " + мКаталогДанных + "intlogs", "!!!");
		КонецПопытки;
	КонецЕсли;

	лПолноеИмяФайлаXMLЛога	= мКаталогДанных + "logdataexchangeaudit.xml";
	Если СоздатьНесуществующиеПодкаталоги(лПолноеИмяФайлаXMLЛога) = 0 Тогда
		Сообщить("Не удалось создать файл " + лПолноеИмяФайлаXMLЛога, "!!!");
	КонецЕсли;

	ЛогXML = Новый COMОбъект(мТипXMLБибилиотеки);

	groupLogXML = XMLВыполнитьОперацию("СоздатьXML", ЛогXML, , "LogDataExchangeAudits");
	groupLogXML.SetAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	groupLogXML.SetAttribute("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
	
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, предварительная (конец)
	////////////////////////////////////////////////////

	
	СообщитьПодробно("", 0, 0, 1);
	СообщитьПодробно("Выгрузка данных для ""ST-Чикаго""...", 0, 3, 1);
	отчДобавитьВОтчетСтроку("за период с " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаКонца, "ДФ=dd.MM.yyyy"));
	отчДобавитьВОтчетСтроку("Каталог данных:  " + мКаталогДанных);
	
	ПредварительныеЗапросы();   // запросы по часто используемым данным
	
	ВыгрузитьСправочники();		//создаем файл выгрузки references.xml
	
	ВыгрузитьРегистры();		//создаем файл выгрузки registers.xml
	
	ВыгрузитьДокументы();		//создаем файл выгрузки documents.xml
	
	СообщитьПодробно("Выгрузка данных для ""ST-Чикаго"" завершена.", 0, 3, 1);
	отчДобавитьВОтчет("Выгрузка данных  завершена", "Заголовок", 1, 1);
	отчЗакрытьОтчет();
	СообщитьПодробно("", 0, 0, 1);
	
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, завершающая (начало)
	////////////////////////////////////////////////////
		
	ЛогXML.AppendChild(groupLogXML);
	
	лИмяФайлаXMLЛога 		= мКаталогДанных + "logdataexchangeaudit.xml";
	лИмяФайлаXMLЛогаКопия 	= мКаталогДанных + СоздатьИмяФайлаИзШаблона("intlogs\logdataexchangeauditYYYYMMDDHHMMSS.xml");
	
	ЛогXML.Save(лИмяФайлаXMLЛога);
	ЛогXML.Save(лИмяФайлаXMLЛогаКопия);
	
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, завершающая (конец)
	////////////////////////////////////////////////////

КонецПроцедуры	//ВыгрузитьМодуль()

Процедура ПриОткрытииМодуль() Экспорт
	
    мКаталогДанных="";  
	ДатаНачала	= ТекущаяДата();
	ДатаКонца	= ТекущаяДата();
	                            	
	// определяем параметры обмена данных, для записи в справочник
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство = "ПолучениеСпискаПараметров" Тогда
			ФлажокПодробно = Истина;
		КонецЕсли;
	Иначе
		ФлажокПодробно	= ?(мИспользоватьСостояния, Ложь, Истина);
	КонецЕсли;
	
	ВосстановитьНастройки();				//прочитать настройки пользователя, сохраненные в предыдущем сеансе
	
	Если ПолучитьТипXMLБибилиотеки() = "" Тогда
		СообщитьПодробно("Не обнаружено библиотек для работы с xml-данными!", 2, 0, 4);
		Возврат;
	КонецЕсли;
	
	ПрочитатьНастройкиИзТаблицы();			//прочитать настройки по умолчанию с ПФ Настройки, зашитые в обработке
	ОбновитьСписокВыгружаемыхОбъектов();	//заполнить список объектов на форме актуальными значениями объектов
	
	// определяем параметры обмена данных, для исполнения обработки
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство = "ОбновлениеСпискаПараметров" Тогда
			ФлажокПодробно = Истина;
			ОбновитьСписокВыгружаемыхОбъектов("ОбновлениеСпискаПараметров");
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	//ПриОткрытииМодуль()

//*******************************************  
//Процедура ВосстановитьНастройку(пСтруктура, пКлюч, пЗначение)
//	
//	лЗначение	= "";
//	Если пСтруктура.Свойство(пКлюч, лЗначение) Тогда
//		пЗначение	= лЗначение;
//	КонецЕсли;
//	
//КонецПроцедуры	//ВосстановитьНастройку()

//******************************************* 
Функция ПолучитьИмяФайлаНастройкиОбработки() Экспорт
	
	Попытка	
		Возврат мКаталогНастроек+"\ST_RA_ExportSettings.ini";
	Исключение
		Сообщить("Невозможно создать файл настроек, обратитесь к администратору!");
	КонецПопытки;
	
КонецФункции

Функция ВосстановитьНастройки() Экспорт
	
	//Попытка	
	//	лЗначенияНастройки = ЗначениеИзФайла(ПолучитьИмяФайлаНастройкиОбработки());
	//Исключение 
	//	Сообщить("Невозможно открыть файл настроек, обратитесь к администратору!" + ОписаниеОшибки());  
	//	Возврат Ложь; 
	//КонецПопытки;
	//
	//Если ТипЗнч(лЗначенияНастройки)<>Тип("Структура") Тогда
	//	Возврат Ложь; 
	//КонецЕсли;
	//
	//мКаталогДанных			= лЗначенияНастройки.ст_КаталогДанных;
	//
	//ФлажокПодробно			= лЗначенияНастройки.ст_выгрузка_Подробно;
	//Отбор						= лЗначенияНастройки.ст_выгрузка_Отбор;
	//ОбъектыВыгрузки			= лЗначенияНастройки.ст_выгрузка_Объекты;
	//ГруппыВыгрузки			= лЗначенияНастройки.ст_выгрузка_Группы;
	//СЗнОбъекты				= лЗначенияНастройки.ст_выгрузка_Список;
	
	Возврат Истина;
	
КонецФункции	//ВосстановитьНастройки()

//*******************************************  
Функция СохранитьНастройки() Экспорт
	
	//лЗначенияНастройки = Новый Структура(
	//"ст_КаталогДанных, ст_выгрузка_Подробно, ст_выгрузка_Отбор, ст_выгрузка_Объекты,	ст_выгрузка_Группы, ст_выгрузка_Список", 
	//мКаталогДанных, ФлажокПодробно, Отбор, ОбъектыВыгрузки, ГруппыВыгрузки, СЗнОбъекты);
	
	//ЗначениеВФайл(ПолучитьИмяФайлаНастройкиОбработки(), лЗначенияНастройки);
	
	Возврат Истина;
	
КонецФункции	//СохранитьНастройки()

//****************************************
Функция ПолучитьТипXMLБибилиотеки() Экспорт
	
	мТипXMLБибилиотеки	= "";
	
	лСЗнТипыXML	= Новый СписокЗначений();
	лСЗнТипыXML.Добавить("MSXML2.DOMDocument.4.0");
	лСЗнТипыXML.Добавить("MSXML2.DOMDocument");
	
	Для Каждого лТипXMLБибилиотеки Из лСЗнТипыXML Цикл
		Попытка
			лТестовыйXML = Новый COMОбъект(лТипXMLБибилиотеки);
		Исключение
			Продолжить;
		КонецПопытки;
		мТипXMLБибилиотеки	= лТипXMLБибилиотеки;
		Прервать;
	КонецЦикла;
	
	Возврат мТипXMLБибилиотеки;
	
КонецФункции	//ПолучитьТипXMLБибилиотеки()

Процедура ПредварительныеЗапросы() Экспорт
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	СообщитьПодробно("Запрос по доступным товарам...", 1, 1, 1);
	ДоступныеТовары(); 
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	СообщитьПодробно("Запрос по доступным сотрудникам...", 1, 1, 1);
		
	зСотрудники = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТорговыеПредставители.Ссылка КАК Агент
	               |ИЗ
	               |	Справочник.НСИ_ТорговыеПредставители КАК ТорговыеПредставители
	               |ГДЕ
	               |	НЕ ТорговыеПредставители.ЭтоГруппа
				   //|	И ТорговыеПредставители.НСИ_ИспользоватьВМобильнойТорговле
				   |";
	ТекстЗапроса = ТекстЗапроса + ДобавитьВЗапросОтбор(зСотрудники, "Сотрудники", Ложь, "ТорговыеПредставители.Ссылка");
	
	зСотрудники.Текст = ТекстЗапроса;
	тзнСотрудники = зСотрудники.Выполнить().Выгрузить();
	тзнСотрудники.Сортировать("Агент Возр");
	ДоступныеТовары(); 
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	СообщитьПодробно("Запрос по доступным складам...", 1, 1, 1);
	
	спкСклады = Новый СписокЗначений();
	
	зСклады = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Склады.Ссылка КАК Склад
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |ГДЕ
	               |	НЕ Склады.ЭтоГруппа";
	ТекстЗапроса = ТекстЗапроса + ДобавитьВЗапросОтбор(зСклады, "Склады", Ложь, "Склады.Ссылка");
	
	зСклады.Текст = ТекстЗапроса;
	тзнСклады = зСклады.Выполнить().Выбрать();
	
	Пока тзнСклады.Следующий() Цикл
		лЭлемент		= тзнСклады.Склад;
		спкСклады.Добавить(лЭлемент);
	КонецЦикла;
	
	Если мИспользоватьКонстанты Тогда             		
		Если спкСклады.НайтиПоЗначению(мКонстантаСклад) = Неопределено Тогда
			спкСклады.Добавить(мКонстантаСклад);
		КонецЕсли;
	КонецЕсли;         								
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	СообщитьПодробно("Запрос по доступным торговым точкам из отбора...", 1, 1, 1);
	
	
	лДатаНачала	= НачалоДня(ДатаНачала);
	лДатаКонца	= КонецДня(ДатаКонца);
	Запрос	= Новый Запрос();
	
	тзнПокупателиВсе = новый ТаблицаЗначений;
	тзнПокупателиВсе.Колонки.Добавить("Контрагент");
	
	ТекстОтбора 	= "";
	ТекстЗапроса	= 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПродажиОбороты.Регистратор.Ссылка КАК Ссылка,
	|	ПродажиОбороты.Регистратор.Дата КАК Дата,
	|	ПродажиОбороты.Регистратор.Номер КАК Номер,
	|	ПродажиОбороты.Регистратор.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ПродажиОбороты.Регистратор.Ссылка ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЭтоОтгрузка,
	|	ЕСТЬNULL(ПродажиОбороты.Регистратор.Склад, ПродажиОбороты.Регистратор.СкладОрдер) КАК Склад,
	|	ПродажиОбороты.Регистратор.Контрагент КАК Контрагент,
	//++ Spl_Апроф 15.10.2014 (k.russkih@a-prof.ru)
	|	ПродажиОбороты.ДокументПродажи.Грузополучатель.НСИ_ТорговыйПредставитель КАК МенеджерПокупателя,
	|	ПродажиОбороты.ДокументПродажи.Грузополучатель КАК ТТ,
	//-- Spl_Апроф
	|	ПродажиОбороты.Регистратор.Сделка КАК Сделка,
	|	ПродажиОбороты.Регистратор.ТипЦен КАК ТипЦен,
	|	ПродажиОбороты.Регистратор.ВалютаДокумента КАК ВалютаДокумента,
	|	ПродажиОбороты.Регистратор.УчитыватьНДС КАК УчитыватьНДС,
	|	ПродажиОбороты.Регистратор.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПродажиОбороты.Регистратор.Комментарий КАК Комментарий,
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.КоличествоОборот КАК Количество,
	|	ПродажиОбороты.СтоимостьОборот КАК Стоимость,
	|	ПродажиОбороты.НДСОборот КАК НДС,
	|	ПродажиОбороты.ХарактеристикаНоменклатуры,
	//++ Spl_Апроф 30.10.2014 (k.russkih@a-prof.ru)
	|	ПродажиОбороты.СтоимостьБезСкидокОборот	КАК СуммаБезСкидки
	//-- Spl_Апроф
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Регистратор,
	|			Номенклатура В (&ГруппаНоменклатуры)
	|				И Организация = &ОрганизацияИзКонстанты
	|				И Номенклатура.НСИ_ИспользоватьВМобильнойТорговле
	|) КАК ПродажиОбороты
	|ГДЕ
	|	(ПродажиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ИЛИ ПродажиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя)";
	
 	
	Запрос.УстановитьПараметр("ДатаНачала"	, лДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца"	, лДатаКонца);
	Запрос.УстановитьПараметр("ОрганизацияИзКонстанты", мКонстантаФирма);
 	Запрос.УстановитьПараметр("ГруппаНоменклатуры", тзнГруппаНоменклатуры);
	
	Запрос.Текст	= ТекстЗапроса ;
	мТЗнДокументыПродаж = Запрос.Выполнить().Выгрузить();
	
	//++ Spl_Апроф 30.10.2014 (k.russkih@a-prof.ru)
	мТЗнДокументыПродаж.Свернуть("ЭтоОтгрузка, Ссылка, Дата, Номер, Организация, Комментарий, Склад, Контрагент, МенеджерПокупателя, ТТ, Сделка, ТипЦен, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС, Номенклатура, ХарактеристикаНоменклатуры", "Количество, Стоимость, НДС, СуммаБезСкидки");
	
	ВремТаб = мТЗнДокументыПродаж.Скопировать();
	ВремТаб.Свернуть("Контрагент, ТТ");
	Для Каждого стр Из ВремТаб Цикл
		НоваяСтрока = тзнПокупателиВсе.Добавить();
		НоваяСтрока.Контрагент = стр.Контрагент;
		Если ЗначениеЗаполнено(стр.ТТ) тогда
			НоваяСтрока = тзнПокупателиВсе.Добавить();
			НоваяСтрока.Контрагент = стр.ТТ.Владелец;
		КонецЕсли;
	КонецЦикла;	
	
	// не самый лучший вариант, но все же. Собираем дополнительные ТТ по продажам
	ДополнительныйЗаапросПоТТ = Новый Запрос;
	ДополнительныйЗаапросПоТТ.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыПоДокументамОстатки.Организация,
	|	ВзаиморасчетыПоДокументамОстатки.Контрагент,
	|	ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом,
	|	0 КАК ОстатокДолга,
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток КАК ОстатокПросроченногоДолга0
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&ДатаОстатков, {(Организация).* КАК Организация, (Контрагент).* КАК Контрагент, (ДоговорКонтрагента).* КАК ДоговорКонтрагента, (Сделка).* КАК Сделка}) КАК ВзаиморасчетыПоДокументамОстатки
	|ГДЕ
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток > 0
	|	И НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ, ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности + 1), ДЕНЬ) < НАЧАЛОПЕРИОДА(&ДатаОстатков, ДЕНЬ)
	|	И ВзаиморасчетыПоДокументамОстатки.УпрУчет = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументамОстатки.Организация,
	|	ВзаиморасчетыПоДокументамОстатки.Контрагент,
	|	ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом,
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&ДатаОстатков, {(Организация).* КАК Организация, (Контрагент).* КАК Контрагент, (ДоговорКонтрагента).* КАК ДоговорКонтрагента, (Сделка).* КАК Сделка}) КАК ВзаиморасчетыПоДокументамОстатки
	|ГДЕ
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток > 0
	|	И ВзаиморасчетыПоДокументамОстатки.УпрУчет = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыБезДокументовОстатки.Организация,
	|	ВзаиморасчетыБезДокументовОстатки.Контрагент,
	|	ВзаиморасчетыБезДокументовОстатки.ДоговорКонтрагента,
	|	&ПустойДокументРН,
	|	ВзаиморасчетыБезДокументовОстатки.СуммаВзаиморасчетовОстаток,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаОстатков, НЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом {(Организация).* КАК Организация, (Контрагент).* КАК Контрагент, (ДоговорКонтрагента).* КАК ДоговорКонтрагента, (Сделка).* КАК Сделка}) КАК ВзаиморасчетыБезДокументовОстатки
	|ГДЕ
	|	ВзаиморасчетыБезДокументовОстатки.СуммаВзаиморасчетовОстаток > 0";
	
	ДополнительныйЗаапросПоТТ.УстановитьПараметр("ДатаОстатков"	, КонецДня(ДатаКонца));
	ДополнительныйЗаапросПоТТ.УстановитьПараметр("ПустойДокументРН", Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	ВремТаб = ДополнительныйЗаапросПоТТ.Выполнить().Выгрузить();
	ВремТаб.Свернуть("Контрагент");
	
	// склеиваем таблицы покупателей из доп таблицы продаж
	Для Каждого стр Из ВремТаб Цикл
		НоваяСтрока = тзнПокупателиВсе.Добавить();
		НоваяСтрока.Контрагент = стр.Контрагент;
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(мКонстантаОснПокупатель) тогда
		НоваяСтрока = тзнПокупателиВсе.Добавить();
		НоваяСтрока.Контрагент = мКонстантаОснПокупатель;
	КонецЕсли;
	
	
	лЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                       |	АдресаПоставки.Владелец.Ссылка КАК ТорговаяТочка
	                       |ИЗ
	                       |	Справочник.АдресаПоставки КАК АдресаПоставки
	                       |ГДЕ
	                       |	АдресаПоставки.НСИ_ТорговыйПредставитель В (&НСИ_ТорговыйПредставитель)
						   |");
	
	лЗапрос.УстановитьПараметр("НСИ_ТорговыйПредставитель", тзнСотрудники.ВыгрузитьКолонку("Агент"));
	лРезультат = лЗапрос.Выполнить().Выгрузить();

	Для Каждого стр Из лРезультат Цикл
		НоваяСтрока = тзнПокупателиВсе.Добавить();
		НоваяСтрока.Контрагент = стр.ТорговаяТочка;
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(мКонстантаОснПокупатель) тогда
		НоваяСтрока = тзнПокупателиВсе.Добавить();
		НоваяСтрока.Контрагент = мКонстантаОснПокупатель;
	КонецЕсли;
	тзнПокупателиВсе.Свернуть("Контрагент");
	
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	СообщитьПодробно("Запрос по доступным типам цен...", 1, 1, 1);
	
	СписокИсключенийТиповЦен = Новый СписокЗначений;
	СписокИсключенийТиповЦен.Добавить(Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	СписокИсключенийТиповЦен.Добавить(Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());
	СписокИсключенийТиповЦен.Добавить(Неопределено);
	
	зТипыЦен = Новый Запрос;
	//++ Spl_Апроф 19.10.2014 (k.russkih@a-prof.ru)
	//ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			   |	ДоговорыКонтрагентов.ТипЦен
	//			   |ИЗ
	//			   |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//			   |ГДЕ
	//			   |	НЕ ДоговорыКонтрагентов.ЭтоГруппа
	//			   |	И ДоговорыКонтрагентов.Владелец В(&СписокК)
	//			   |	И НЕ ДоговорыКонтрагентов.ТипЦен В (&СписокИсключений)";
	//зТипыЦен.УстановитьПараметр("СписокК",тзнПокупателиВсе.ВыгрузитьКолонку("Контрагент"));
	//зТипыЦен.УстановитьПараметр("СписокИсключений",СписокИсключенийТиповЦен);

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПЦ_ЦеновыеЭшелоныСрезПоследних.ТипЦен
	               |ИЗ
	               |	РегистрСведений.ПЦ_ЦеновыеЭшелоны.СрезПоследних КАК ПЦ_ЦеновыеЭшелоныСрезПоследних
	               |ГДЕ
	               |	НЕ ПЦ_ЦеновыеЭшелоныСрезПоследних.ТипЦен = &ТипЦен";
				   
	зТипыЦен.УстановитьПараметр("ТипЦен",Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	
	зТипыЦен.Текст = ТекстЗапроса;
	тзнТипыЦен = зТипыЦен.Выполнить().Выгрузить();
	тзнТипыЦен.Свернуть("ТипЦен");
	
	Если мИспользоватьКонстанты Тогда             		
		НайденнаяСтрока = тзнТипыЦен.Найти(мКонстантаТипЦен, "ТипЦен");
		Если НайденнаяСтрока = Неопределено Тогда
			СтрокаТЗ = тзнТипыЦен.Добавить();
			СтрокаТЗ.ТипЦен = мКонстантаТипЦен;
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

 Функция ВыгрузитьСпрКлассификаторы(group, пИмяXML) Экспорт
	
	//<classifiers>   <!--классификаторы товаров-->
	//	<classifier>
	//		<code/>			<!--код элемента в УС-->
	//		<name/>			<!--наименование классификатора-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<classifiertype/>	<!--тип классифкатора - от 1 до 10-->
	//	</classifier>
	//</classifiers> 
	
	// Делаем псевдокласификатор, кот. у всех точек одинаковый, для блокировки
	classifiers = ДокXML.CreateElement("classifiers");
	
	classifier    = ДобавитьОбъект(ДокXML, "Блокировка", "classifier");
	
		ДобавитьПотомка(classifier, "code"                , "Акция");
		ДобавитьПотомка(classifier, "name"                , "Акция");
		ДобавитьПотомка(classifier, "deleted"             , 0);
		ДобавитьПотомка(classifier, "classifiertype"      , "109");
	
	ДобавитьНоду(classifiers, classifier);
	
	
	//// это классификатор блокировки договора оплаты с отсрочкой
	//classifier    = ДобавитьОбъект(ДокXML, "Блокировка", "classifier");
	//
	//ДобавитьПотомка(classifier, "code"                , "Блокировка");
	//ДобавитьПотомка(classifier, "name"                , "Блокирована");
	//ДобавитьПотомка(classifier, "deleted"             , 0);
	//ДобавитьПотомка(classifier, "classifiertype"      , "120");
	//
	//ДобавитьНоду(classifiers, classifier);
	//
	//// это классификатор блокировки договора оплаты по факту
	//classifier    = ДобавитьОбъект(ДокXML, "Блокировка", "classifier");
	//
	//ДобавитьПотомка(classifier, "code"                , "Оплата по факту");
	//ДобавитьПотомка(classifier, "name"                , "Блокирована");
	//ДобавитьПотомка(classifier, "deleted"             , 0);
	//ДобавитьПотомка(classifier, "classifiertype"      , "119");
	//
	//ДобавитьНоду(classifiers, classifier);
	
	ДобавитьНоду(group, classifiers);     
	
КонецФункции	//ВыгрузитьСпрКлассификаторы()

Функция ВыгрузитьСпрВидыОплат(group, пИмяXML) Экспорт
	
	//<paytypes>   <!--виды оплаты в чикаго-->
	//	<paytype>
	//		<innercode/>	<!--код в Чикаго - для предотвращения повторной выгрузки-->
	//		<code/>			<!--код вида оплаты-->
	//		<name/>			<!--название выда оплаты-->
	//		<paykind/>		<!--тип вида оплаты(673 - Оплата при отгрузке, 674 - Оплата с отсрочкой платежа, 675 - Предоплата)-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//	</paytype>
	//</paytypes> 
	
	// Выгружаем только значения видов оплат с кодом выше 3, т.к. от 1 до 3 - это зарезервированные значения в Чикаго
	paytypes = ДокXML.CreateElement("paytypes");
	
	//Выборка = Справочники.СТ_РА_ВидыОплат.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Объект = Выборка.ПолучитьОбъект();
	//	Если Объект.Код <= 3 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если Объект.ПометкаУдаления Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	paytype    = ДобавитьОбъект(ДокXML, "ВидыОплат", "paytype");
	//	
	//	ДобавитьПотомка(paytype, "code"     , СТ_ЗначениеВСтрокуВнутр(Объект.Ссылка));
	//	ДобавитьПотомка(paytype, "name"     , СокрЛП(Объект.Наименование));
	//	ДобавитьПотомка(paytype, "paykind"  , "674"); // принимаем как оплату с отсрочкой
	//	ДобавитьПотомка(paytype, "deleted"  , 0);
	//	
	//	ДобавитьНоду(paytypes, paytype);
	//КонецЦикла;
	
	ДобавитьНоду(group, paytypes);     
	
КонецФункции	//ВыгрузитьСпрВидыОплат()

Функция ДоступныеТовары() Экспорт
	
	Запрос	= Новый Запрос(); 		
	ТекстОтбора 	= "";
	ТекстЗапроса	= 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.НСИ_ИспользоватьВМобильнойТорговле";

	ТекстЗапроса	= ТекстЗапроса + ДобавитьВЗапросОтбор(Запрос, "Товары", Ложь, "Номенклатура.Ссылка");
	
	Запрос.Текст	= ТекстЗапроса;
	тзнГруппаНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Возврат тзнГруппаНоменклатуры;
	
КонецФункции //ДоступныеТовары


мСчВыгрузки		= 0;
мТаблицаОтчета	= Новый ТабличныйДокумент();
мМакетОтчета	= ПолучитьМакет("Лог");

мИспользоватьЛогСообщений	= Истина;
мИспользоватьСостояния		= ?(Метаданные.РегистрыСведений.Найти("СТ_СостоянияОбъектов")=Неопределено, Ложь, Истина);
мИспользоватьКонстанты  	= ?(Метаданные.Справочники.Найти("СТ_КонстантыОбмена")=Неопределено, Ложь, Истина);

спкВыгруженыеДокументы = Новый Массив;
//мИспользоватьКонстанты = Ложь;
Если мИспользоватьКонстанты Тогда
	
	мКонстантаСклад 		 = Справочники.СТ_КонстантыОбмена["ОсновнойСклад"].Значение;
	мКонстантаВалюта		 = Справочники.СТ_КонстантыОбмена["ОсновнаяВалюта"].Значение;
	//++ Spl_Апроф 30.10.2014 (k.russkih@a-prof.ru)
	мКонстантаТипМерч		 = Справочники.СТ_КонстантыОбмена["ТипУчастияВМерчандайзинге"].Значение;

	Если НЕ ЗначениеЗаполнено(мКонстантаВалюта) Тогда
		мКонстантаВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;

	мКонстантаФирма			 = Справочники.СТ_КонстантыОбмена["ОсновнаяФирма"].Значение;
	мКонстантаТипЦен		 = Справочники.СТ_КонстантыОбмена["ОсновнойТипЦен"].Значение;
	//мКаталогНастроек		 = Справочники.СТ_КонстантыОбмена["КаталогФайловНастройки"].Значение;
	//++ Spl_Апроф 30.10.2014 (k.russkih@a-prof.ru)
	мКонстантаДистрибуторКод = Справочники.СТ_КонстантыОбмена["КодДистрибутора"].ПолучитьОбъект().Значение;
	мКаталогНастроек		 = КаталогПрограммы();
	//мКонстантаДистрибуторКод = 0;
	//-- Spl_Апроф
	мКонстантаОснПокупатель	 = Справочники.СТ_КонстантыОбмена["ОсновнойПокупатель"].ПолучитьОбъект().Значение;
	
	Если (мКаталогНастроек<>"")И(Прав(мКаталогНастроек, 1)<>"\") Тогда
		мКаталогНастроек	= СокрЛП(мКаталогНастроек) + "\";
	КонецЕсли;
	
	мКонстантаЧасовойПояс= Справочники.СТ_КонстантыОбмена["ЧасовойПояс"].Значение;
	Если ТипЗнч(мКонстантаЧасовойПояс)<>Тип("Число") Тогда
		мКонстантаЧасовойПояс=2;
	ИначеЕсли (мКонстантаЧасовойПояс<-12)ИЛИ(мКонстантаЧасовойПояс>12) Тогда
		мКонстантаЧасовойПояс=2;
	КонецЕсли;
	
Иначе
	
	мКонстантаСклад 		= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойСклад");
	мКонстантаВалюта 		= Константы.ВалютаРегламентированногоУчета.Получить();
	мКонстантаФирма			= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
   	мКонстантаТипЦен 		= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойТипЦенПродажи");
    мКаталогНастроек		= КаталогПрограммы();
	мКонстантаЧасовойПояс 	= 2;	
	мКонстантаДистрибуторКод= 0;
КонецЕсли;

лНомерЧасовогоПоясаСтрокой = Строка(Макс(мКонстантаЧасовойПояс,-мКонстантаЧасовойПояс));
лДобавитьЛидирующийНоль = ?(СтрДлина(лНомерЧасовогоПоясаСтрокой)=1,1,0);
мСтрокаЧасовойПояс = ?(мКонстантаЧасовойПояс<0,"-","+") + ?(лДобавитьЛидирующийНоль=1,"0","") + лНомерЧасовогоПоясаСтрокой + ":00";

ВыгружатьПоGUID = Истина;

//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
	ПргЗапросХешаРеал = Новый Запрос("ВЫБРАТЬ
	                                 |	РеализацияТоваровУслуг.Номер,
	                                 |	РеализацияТоваровУслуг.Дата,
	                                 |	РеализацияТоваровУслуг.Склад,
	                                 |	РеализацияТоваровУслуг.Склад.Код,
	                                 |	РеализацияТоваровУслуг.Контрагент,
	                                 |	РеализацияТоваровУслуг.Контрагент.Код,
	                                 |	РеализацияТоваровУслуг.ВалютаДокумента,
	                                 |	РеализацияТоваровУслуг.ВалютаДокумента.Код,
	                                 |	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ТоварыКоличествоСтрок,
	                                 |	ЕСТЬNULL(СУММА(РеализацияТоваровУслугТовары.Сумма), 0) КАК ТоварыСумма,
	                                 |	ЕСТЬNULL(СУММА(РеализацияТоваровУслугТовары.СуммаНДС), 0) КАК ТоварыСуммаНДС
	                                 |ИЗ
	                                 |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                                 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                                 |		ПО РеализацияТоваровУслуг.Ссылка = РеализацияТоваровУслугТовары.Ссылка
	                                 |ГДЕ
	                                 |	РеализацияТоваровУслуг.Ссылка = &Ссылка
	                                 |
	                                 |СГРУППИРОВАТЬ ПО
	                                 |	РеализацияТоваровУслуг.Номер,
	                                 |	РеализацияТоваровУслуг.Дата,
	                                 |	РеализацияТоваровУслуг.Склад,
	                                 |	РеализацияТоваровУслуг.Склад.Код,
	                                 |	РеализацияТоваровУслуг.Контрагент,
	                                 |	РеализацияТоваровУслуг.Контрагент.Код,
	                                 |	РеализацияТоваровУслуг.ВалютаДокумента,
	                                 |	РеализацияТоваровУслуг.ВалютаДокумента.Код");
									 
	ПргЗапросХешаПерем = Новый Запрос("ВЫБРАТЬ
	                                 |	ПеремещениеТоваров.Номер,
	                                 |	ПеремещениеТоваров.Дата,
	                                 |	ПеремещениеТоваров.Контрагент,
	                                 |	ПеремещениеТоваров.Контрагент.Код,
	                                 |	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ТоварыКоличествоСтрок
	                                 |ИЗ
	                                 |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	                                 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	                                 |		ПО ПеремещениеТоваров.Ссылка = ПеремещениеТоваровТовары.Ссылка
	                                 |ГДЕ
	                                 |	ПеремещениеТоваров.Ссылка = &Ссылка
	                                 |
	                                 |СГРУППИРОВАТЬ ПО
	                                 |	ПеремещениеТоваров.Номер,
	                                 |	ПеремещениеТоваров.Дата,
	                                 |	ПеремещениеТоваров.Контрагент,
	                                 |	ПеремещениеТоваров.Контрагент.Код");									 
									 
	ПргЗапросХешаВозвр = Новый Запрос("ВЫБРАТЬ
	                                 |	ВозвратТоваровОтПокупателяТовары.Номер,
	                                 |	ВозвратТоваровОтПокупателяТовары.Дата,
	                                 |	ВозвратТоваровОтПокупателяТовары.СкладОрдер КАК Склад,
	                                 |	ВозвратТоваровОтПокупателяТовары.СкладОрдер.Код КАК СкладКод,
	                                 |	ВозвратТоваровОтПокупателяТовары.Контрагент,
	                                 |	ВозвратТоваровОтПокупателяТовары.Контрагент.Код,
	                                 |	ВозвратТоваровОтПокупателяТовары.ВалютаДокумента,
	                                 |	ВозвратТоваровОтПокупателяТовары.ВалютаДокумента.Код,
	                                 |	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ТоварыКоличествоСтрок,
	                                 |	ЕСТЬNULL(СУММА(РеализацияТоваровУслугТовары.Сумма), 0) КАК ТоварыСумма,
	                                 |	ЕСТЬNULL(СУММА(РеализацияТоваровУслугТовары.СуммаНДС), 0) КАК ТоварыСуммаНДС
	                                 |ИЗ
	                                 |	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателяТовары
	                                 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК РеализацияТоваровУслугТовары
	                                 |		ПО ВозвратТоваровОтПокупателяТовары.Ссылка = РеализацияТоваровУслугТовары.Ссылка
	                                 |ГДЕ
	                                 |	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
	                                 |
	                                 |СГРУППИРОВАТЬ ПО
	                                 |	ВозвратТоваровОтПокупателяТовары.Номер,
	                                 |	ВозвратТоваровОтПокупателяТовары.Дата,
	                                 |	ВозвратТоваровОтПокупателяТовары.СкладОрдер,
	                                 |	ВозвратТоваровОтПокупателяТовары.СкладОрдер.Код,
	                                 |	ВозвратТоваровОтПокупателяТовары.Контрагент,
	                                 |	ВозвратТоваровОтПокупателяТовары.Контрагент.Код,
	                                 |	ВозвратТоваровОтПокупателяТовары.ВалютаДокумента,
	                                 |	ВозвратТоваровОтПокупателяТовары.ВалютаДокумента.Код");					  									 
//конец изменений 