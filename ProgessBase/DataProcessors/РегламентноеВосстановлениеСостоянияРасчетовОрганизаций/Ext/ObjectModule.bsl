Перем мВалютаРегламентированногоУчета Экспорт;
Перем мКэшВидовСубконтоПоСчетам;

// Определяет рабочий период документа
//
// Параметры:
//  СтруктураПараметров - структура, содержащая набор параметров.
//
Функция  ОпределитьПериод(ДатаКон) Экспорт

	//По последовательности определяем дату
	Периоды = Новый Структура("Приобретение,Реализация");

	Отбор = Новый Структура ("Организация",Организация);
	Если АвансыПоПриобретению тогда
		Периоды.приобретение = Последовательности.РасчетыПоПриобретениюОрганизации.ПолучитьГраницу(Отбор);
		Если Периоды.приобретение.Дата>КонецДня(ДатаКон) тогда
			ОбщегоНазначения.СообщитьОбОшибке("Граница последовательности по приобретению организации <"+Строка(Организация)+"> больше чем дата обработки.
			|Восстановление расчетов по приобретению производиться не будет.");
		КонецЕсли;
	КонецЕсли;	
	Если АвансыПоРеализации тогда
		Периоды.Реализация = Последовательности.РасчетыПоРеализацииОрганизации.ПолучитьГраницу(Отбор);
		Если Периоды.Реализация.Дата>КонецДня(ДатаКон) тогда
			ОбщегоНазначения.СообщитьОбОшибке("Граница последовательности по реализации организации <"+Строка(Организация)+"> больше чем дата обработки.
			|Восстановление расчетов по реализации производиться не будет.");
		КонецЕсли;
	КонецЕсли;	
	Возврат  Периоды;
КонецФункции // ОпределитьПериод()

Процедура ВосстановитьПоследовательностиПоРасчетам() Экспорт
	
	Если НЕ (АвансыПоПриобретению ИЛИ АвансыПоРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Периоды  = ОпределитьПериод(ДатаАктуализации);
	мКэшВидовСубконтоПоСчетам = Неопределено;
	
	УдаляемыеВидыРегОпераций = Новый Массив;
	Если АвансыПоПриобретению Тогда
		УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовПриобретение);
	КонецЕсли;
	Если АвансыПоРеализации Тогда
		УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовРеализация);
	КонецЕсли;
	УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах);
	УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.СуммовыеРазницы);
	УдаляемыеВидыРегОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСчетов);
	
	Запрос    = Новый Запрос;
	ЗапросПоДокументам = Новый Запрос;
	
	ТекстОсновногоЗапроса = 
	"ВЫБРАТЬ
	|	РасчетыПоПриобретениюОрганизации.*,
	|	РасчетыПоПриобретениюОрганизации.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	РасчетыПоПриобретениюОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РасчетыПоПриобретениюОрганизации.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом КАК ВестиПоДокументамРасчетовСКонтрагентом,
	|	РасчетыПоПриобретениюОрганизации.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	РасчетыПоПриобретениюОрганизации.СуммаСНДС КАК РублеваяСумма,
	|	РасчетыПоПриобретениюОрганизации.СуммаВзаиморасчетов КАК ВалютнаяСумма
	|ИЗ
	|	РегистрСведений.РасчетыПоПриобретениюОрганизации КАК РасчетыПоПриобретениюОрганизации
	|ГДЕ
	|	РасчетыПоПриобретениюОрганизации.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоПриобретениюОрганизации.Активность
	|	И РасчетыПоПриобретениюОрганизации.Организация = &Организация
	|	И НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковПоВзаиморасчетам
	|	И НЕ РасчетыПоПриобретениюОрганизации.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыПоПриобретениюОрганизации.Период,
	|	РасчетыПоПриобретениюОрганизации.Регистратор
	|ИТОГИ
	|	МИНИМУМ(Период),
	|	СУММА(СуммаСНДС),
	|	СУММА(СуммаВзаиморасчетов),
	|	СУММА(СуммаНДС)
	|ПО
	|	РасчетыПоПриобретениюОрганизации.Регистратор
	|";
	
	ТекстЗапросаКВзаиморасчетамПоДокументам = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументам.Регистратор КАК Регистратор,
	|	ВзаиморасчетыПоДокументам.ДоговорКонтрагента,
	|	ВзаиморасчетыПоДокументам.Сделка,
	|	ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом,
	|	СУММА(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ВзаиморасчетыПоДокументам.СуммаРегл) КАК СуммаРегл
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов КАК ВзаиморасчетыПоДокументам
	|ГДЕ
	|	ВзаиморасчетыПоДокументам.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВзаиморасчетыПоДокументам.Активность
	|	И ВзаиморасчетыПоДокументам.Организация = &Организация
	|	И ВзаиморасчетыПоДокументам.ВидРасчетовСКонтрагентом = &ВидРасчетовСКонтрагентом
	|	И НЕ ВзаиморасчетыПоДокументам.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковПоВзаиморасчетам
	|	И НЕ ВзаиморасчетыПоДокументам.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыПоДокументам.Регистратор,
	|	ВзаиморасчетыПоДокументам.ДоговорКонтрагента,
	|	ВзаиморасчетыПоДокументам.Сделка,
	|	ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом
	|ИТОГИ ПО
	|	Регистратор";
	
	Если АвансыПоПриобретению Тогда
		
		МоментВремени = Периоды.Приобретение;
		ДатаНач = МоментВремени.Дата;
		
		Запрос.УстановитьПараметр("НачалоПериода"	,ДатаНач );
		Запрос.УстановитьПараметр("КонецПериода" ,КонецДня(ДатаАктуализации));
		Запрос.УстановитьПараметр("Организация"		,Организация );
		Запрос.УстановитьПараметр("ПроведениеВзаимозачета", Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета);
	
		Запрос.Текст = ТекстОсновногоЗапроса;
		Результат = Запрос.Выполнить();
		ТаблицаДвижений = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ЗапросПоДокументам.УстановитьПараметр("НачалоПериода", ДатаНач);
		ЗапросПоДокументам.УстановитьПараметр("КонецПериода", КонецДня(ДатаАктуализации));
		ЗапросПоДокументам.УстановитьПараметр("Организация", Организация );
		ЗапросПоДокументам.УстановитьПараметр("ВидРасчетовСКонтрагентом", Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению);
	
		ЗапросПоДокументам.Текст = ТекстЗапросаКВзаиморасчетамПоДокументам;
		РезультатЗапросаПоДокументам = ЗапросПоДокументам.Выполнить();
		ТаблицаРасчетовПоДокументам = РезультатЗапросаПоДокументам.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ПоследовательностьДляРегистрации = Последовательности.РасчетыПоПриобретениюОрганизации;
		Результат = ОбработатьДвижения(ТаблицаДвижений, УдаляемыеВидыРегОпераций, ПоследовательностьДляРегистрации.СоздатьНаборЗаписей(),
			"РасчетыПоПриобретению", ТаблицаРасчетовПоДокументам);
		Если Результат.Ошибка тогда
			ОбщегоНазначения.СообщитьОбОшибке("Организация <"+Организация+">: Обнаружена ошибка при проведении документа """+Результат.Документ+""".
			| Граница последовательности расчетов по приобретению установлена на "+Результат.Граница,,"Восстановление последовательности расчетов по приобретению");
			ПоследовательностьДляРегистрации.УстановитьГраницу(Новый МоментВремени(Результат.Граница,Результат.Документ),Новый Структура("Организация",Организация));
		Иначе
			#Если Клиент Тогда
			Сообщить("Организация <"+Организация+">: Восстановление последовательности расчетов по приобретению успешно завершено");		
			#КонецЕсли
			ПоследовательностьДляРегистрации.УстановитьГраницу(Новый МоментВремени(Результат.Граница),Новый Структура("Организация",Организация));
		КонецЕсли;

		ПерепровестиСчетаФактурыВУЕ(ДатаНач, Ложь);

	КонецЕсли;
	
	Если АвансыПоРеализации Тогда
		
		МоментВремени = Периоды.Реализация;
		ДатаНач = МоментВремени.Дата;
		
		Запрос.УстановитьПараметр("НачалоПериода"	,ДатаНач );
		Запрос.УстановитьПараметр("КонецПериода" ,   КонецДня(ДатаАктуализации));
		Запрос.УстановитьПараметр("Организация"		,Организация );
		Запрос.УстановитьПараметр("ПроведениеВзаимозачета", Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета);
		
		Запрос.Текст = СтрЗаменить(ТекстОсновногоЗапроса, "РасчетыПоПриобретениюОрганизации", "РасчетыПоРеализацииОрганизации");
		Результат = Запрос.Выполнить();
		ТаблицаДвижений = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ЗапросПоДокументам.УстановитьПараметр("НачалоПериода", ДатаНач);
		ЗапросПоДокументам.УстановитьПараметр("КонецПериода", КонецДня(ДатаАктуализации));
		ЗапросПоДокументам.УстановитьПараметр("Организация", Организация );
		ЗапросПоДокументам.УстановитьПараметр("ВидРасчетовСКонтрагентом", Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации);
	
		ЗапросПоДокументам.Текст = ТекстЗапросаКВзаиморасчетамПоДокументам;
		РезультатЗапросаПоДокументам = ЗапросПоДокументам.Выполнить();
		ТаблицаРасчетовПоДокументам = РезультатЗапросаПоДокументам.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ПоследовательностьДляРегистрации = Последовательности.РасчетыПоРеализацииОрганизации;
		
		Результат = ОбработатьДвижения(ТаблицаДвижений, УдаляемыеВидыРегОпераций, ПоследовательностьДляРегистрации.СоздатьНаборЗаписей(), 
			"РасчетыПоРеализации", ТаблицаРасчетовПоДокументам);
		Если Результат.Ошибка тогда
			ОбщегоНазначения.СообщитьОбОшибке("Организация <"+Организация+">: Обнаружена ошибка при проведении документа """+Результат.Документ+""".
			| Граница последовательности расчетов по реализации установлена на "+Результат.Граница,,"Восстановление последовательности расчетов по реализации");
			ПоследовательностьДляРегистрации.УстановитьГраницу(Новый МоментВремени(Результат.Граница,Результат.Документ),Новый Структура("Организация",Организация));
		Иначе
			#Если Клиент Тогда
			Сообщить("Организация <"+Организация+">: Восстановление последовательности расчетов по реализации успешно завершено");		
			#КонецЕсли
			ПоследовательностьДляРегистрации.УстановитьГраницу(Новый МоментВремени(Результат.Граница),Новый Структура("Организация",Организация));
		КонецЕсли;
		
		ПерепровестиСчетаФактурыВУЕ(ДатаНач, Истина);
		
	КонецЕсли;
	#Если Клиент Тогда
		Состояние("Организация <"+Организация+">: Корректировка движений успешна завершена.");
	#КонецЕсли

КонецПроцедуры

Функция ВыполнитьДвижениеДенег(СтруктураПараметров, СформированныеДвижения, СтруктураШапкиДокумента, УдаляемыеВидыРегОпераций)
	
	ОшибкаПриФормированииДвижений = Ложь;
	БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметров, СтруктураШапкиДокумента, СформированныеДвижения, ОшибкаПриФормированииДвижений, СтруктураПараметров.Заголовок,,Истина,УдаляемыеВидыРегОпераций, мКэшВидовСубконтоПоСчетам);
	
	Возврат ОшибкаПриФормированииДвижений;
	
КонецФункции // ВыполнитьДвижениеДенег()

Функция ОбработатьДвижения(ТаблицаДвижений, УдаляемыеВидыРегОпераций, ПоследовательностьДляРегистрации, ВидРасчетов, ТаблицаРасчетовПоДокументам)
	
	ЕстьОшибка = Ложь;
	ДокументОшибки = Неопределено;
	Граница = КонецДня(ДатаАктуализации);
	
	ПустаяТаблицаПоВзаиморасчетам = Новый ТаблицаЗначений;
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("ДоговорКонтрагента");
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("Сделка");
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("ДокументРасчетовСКонтрагентом");
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("ДатаОплаты");
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ПустаяТаблицаПоВзаиморасчетам.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Для каждого Документ Из ТаблицаДвижений.Строки Цикл
		Попытка
		СформированныеДвижения =новый Структура();
		ВидДокумента = Документ.Строки[0].ВидДокумента;
		
		Если ВидДокумента = "КорректировкаДолга" Тогда
			
			ДокументОбъект = Документ.Регистратор.ПолучитьОбъект();
			ДокументОбъект.РежимВосстановленияПоследовательностейРасчетов = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			Продолжить;
		КонецЕсли;
		НаправлениеДвиженияДляДокументаДвиженияДенежныхСредств = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента).Направление;
		НаправлениеДвиженияДляДокументаДвиженияПриобретенияРеализации = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента).Направление;
		Если НаправлениеДвиженияДляДокументаДвиженияДенежныхСредств=Неопределено 
			И НаправлениеДвиженияДляДокументаДвиженияПриобретенияРеализации=неопределено Тогда
			ЕстьОшибка = Истина;
			Если ДокументОшибки = Неопределено тогда
				ДокументОшибки = Документ.Регистратор;
			КонецЕслИ;
			Граница = МиН(Документ.Строки[0].Период,Граница);
			Продолжить;
		КонецЕсли;
	
		Если не (ВидДокумента = "ВозвратТоваровПоставщику" или ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ")
			и НаправлениеДвиженияДляДокументаДвиженияДенежныхСредств <> Неопределено тогда
			//Документ обрабатывается в блоке движений денежных средств			
			СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенегИзРегистраСведений(Документ.Строки,ТаблицаДвижений.Колонки);
			// Регистрация в последовательности
			ПоследовательностьДляРегистрации.Отбор.Регистратор.Установить(Документ.регистратор);
			ПоследовательностьДляРегистрации.Очистить();
			ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
			ЗаписьРегистрации.Период = Документ.Строки[0].Период;
			ЗаписьРегистрации.Организация = Организация;
			ПоследовательностьДляРегистрации.Записать();
				
			СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Документ.Регистратор);
			СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
				
			#Если Клиент Тогда
				Состояние("Корректировка движений документа: " + СтруктураПараметров.Заголовок);
			#КонецЕсли
			ПроводкиБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Хозрасчетный,истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиБУ,УдаляемыеВидыРегОпераций);
			СформированныеДвижения.Вставить("Хозрасчетный",ПроводкиБУ);
			
			ПроводкиНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Налоговый,истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиНУ,УдаляемыеВидыРегОпераций);
			СформированныеДвижения.Вставить("Налоговый",ПроводкиНУ);
			
			Если ВыполнитьДвижениеДенег(СтруктураПараметров, СформированныеДвижения, СтруктураШапкиДокумента, УдаляемыеВидыРегОпераций) Тогда
				ЕстьОшибка = Истина;
				Если ДокументОшибки = Неопределено тогда
					ДокументОшибки = Документ.Регистратор;
				КонецЕслИ;
				Граница = МиН(СтруктураПараметров.Период,Граница);
			КонецЕсли;
		ИначеЕсли НаправлениеДвиженияДляДокументаДвиженияПриобретенияРеализации <> Неопределено тогда
			//Документ приобретения или реализации
			СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАвансаИзРегистраСведений(Документ.Строки,ТаблицаДвижений.Колонки);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
			Если ВидДокумента = "ОтчетКомиссионераОПродажах" Тогда
				Если ВидРасчетов = "РасчетыПоРеализации" Тогда
					СтруктураПараметров.Вставить("Направление", "Выбытие");
				Иначе
					СтруктураПараметров.Вставить("Направление", "Поступление");
				КонецЕсли;
			КонецЕсли;
			// Регистрация в последовательности
			ПоследовательностьДляРегистрации.Отбор.Регистратор.Установить(Документ.регистратор);
			ПоследовательностьДляРегистрации.Очистить();
			ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
			ЗаписьРегистрации.Период = Документ.Строки[0].Период;
			ЗаписьРегистрации.Организация = Организация;
			ПоследовательностьДляРегистрации.Записать();
			
			СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Документ.Регистратор);
			
			Для каждого Параметр Из СтруктураШапкиДокумента Цикл
				Если не СтруктураПараметров.Свойство(Параметр.Ключ) Тогда
					СтруктураПараметров.Вставить(Параметр.Ключ,Параметр.Значение);
				КонецЕсли; 
			КонецЦикла; 
			
			#Если Клиент Тогда
				Состояние("Корректировка движений документа: " + СтруктураПараметров.Заголовок);
			#КонецЕсли
			Если СтруктураПараметров.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				СтрокиТаблицыПоВзаиморасчетам = ТаблицаРасчетовПоДокументам.Строки.Найти(Документ.Регистратор, "Регистратор", Ложь);
				ЕстьТаблицаПоВзаиморасчетам = НЕ (СтрокиТаблицыПоВзаиморасчетам = Неопределено);
				Если ЕстьТаблицаПоВзаиморасчетам Тогда
					ТаблицаПоВзаиморасчетам = ПустаяТаблицаПоВзаиморасчетам.Скопировать();
					Для каждого СтрокаДвижения Из СтрокиТаблицыПоВзаиморасчетам.Строки Цикл
						НоваяСтрока = ТаблицаПоВзаиморасчетам.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
					КонецЦикла;
					СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
				КонецЕсли;
			КонецЕсли;
			ПроводкиБУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Хозрасчетный,истина);
			БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиБУ,УдаляемыеВидыРегОпераций);
			БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметров,ПроводкиБУ,мВалютаРегламентированногоУчета);
			СформированныеДвижения.Вставить("ПроводкиБУ",ПроводкиБУ);
			СформированныеДвижения.Вставить("Хозрасчетный",ПроводкиБУ);
				
			 Если СтруктураПараметров.ОтражатьВНалоговомУчете ИЛИ СтруктураПараметров.Дата >= '20070101' Тогда
				ПроводкиНУ = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураПараметров.Регистратор, РегистрыБухгалтерии.Налоговый,истина);
				БухгалтерскийУчет.ЗачиститьНаборЗаписейОтРегламентныхОпераций(ПроводкиНУ,УдаляемыеВидыРегОпераций);
				СформированныеДвижения.Вставить("ПроводкиНУ",ПроводкиНУ);
				СтруктураПараметров.Вставить("ПроводкиНУ",ПроводкиНУ);
				СтруктураПараметров.Вставить("Налоговый",ПроводкиНУ);
			КонецЕсли;
			ДвиженияСУчетомКорректировок = БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметров,мВалютаРегламентированногоУчета,,ПроводкиБУ,,,УдаляемыеВидыРегОпераций);
			Если ДвиженияСУчетомКорректировок = Истина Тогда	
				//Нет корректировок
			ИначеЕсли ДвиженияСУчетомКорректировок = Ложь Тогда
				ЕстьОшибка = Истина;
				Если ДокументОшибки = Неопределено тогда
					ДокументОшибки = Документ.Регистратор;
				КонецЕсли;
				Граница = МиН(СтруктураПараметров.Период,Граница);
				Продолжить;
			Иначе
				Для каждого Движение из ДвиженияСУчетомКорректировок Цикл
					СформированныеДвижения.Вставить(Движение.Ключ,Движение.Значение);
				КонецЦикла;
			КонецЕсли;

		Иначе
			ЕстьОшибка = Истина;
			Если ДокументОшибки = Неопределено тогда
				ДокументОшибки = Документ.Регистратор;
			КонецЕслИ;
			Граница = МиН(Документ.Строки[0].Период,Граница);
			Продолжить;
		КонецЕсли;  //Если не (ВидДокумента = "ВозвратТоваровПоставщику" или ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ")
		Для каждого Движение из СформированныеДвижения Цикл
			Если Движение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Движение.Значение.Модифицированность() Тогда
				Движение.Значение.Записать();
			КонецЕсли; 
		КонецЦикла;
		
		Исключение
			ЕстьОшибка = Истина;
			Если ДокументОшибки = Неопределено тогда
				ДокументОшибки = Документ.Регистратор;
			КонецЕслИ;
			Граница = МиН(Документ.Строки[0].Период,Граница);
			Прервать;
		КонецПопытки; 
	КонецЦикла;
	
	Возврат Новый структура ("Ошибка,Документ,Граница",ЕстьОшибка,ДокументОшибки,Граница);
	
КонецФункции // 

Функция СоздатьДокументыПереоценкиВалютныхСредств(ДатаНачала) Экспорт

	// Определяем дни, за которые необходимо наличие документов "Переоценка валютных средств"
	
	Правила2008 = (ДатаАктуализации >= '20080101');
	
	Запрос = Новый Запрос;
	
	// Валютные счета, подлежащие переоценке
	// Все балансовые валютные счета
	// Счета, переоцениваемые в особом порядке, исключаются
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И (НЕ Хозрасчетный.Забалансовый)
	|	И (НЕ Хозрасчетный.Ссылка В
	|				(ВЫБРАТЬ
	|					СчетаСОсобымПорядкомПереоценки.Счет
	|				ИЗ
	|					РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценки))";
	
	СчетаПодлежащиеПереоценке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Если Правила2008 Тогда
		СчетаПодлежащиеПереоценке.Добавить(ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте);
		СчетаПодлежащиеПереоценке.Добавить(ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(ПроводкиБУ.Период, ДЕНЬ) КАК Дата
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК ПроводкиБУ
	|ГДЕ
	|	(ПроводкиБУ.СчетДт В (&СчетаПодлежащиеПереоценке)
	|			ИЛИ ПроводкиБУ.СчетКт В (&СчетаПодлежащиеПереоценке))
	|	И ПроводкиБУ.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И ПроводкиБУ.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала",  ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца",   КонецДня(ДатаАктуализации));
	Запрос.УстановитьПараметр("СчетаПодлежащиеПереоценке", СчетаПодлежащиеПереоценке);
	
	ТаблицаДней = Запрос.Выполнить().Выгрузить();
	
	// Существующие документы
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОНЕЦПЕРИОДА(ПереоценкаВалютныхСредств.Дата, ДЕНЬ) КАК Дата,
	|	ПереоценкаВалютныхСредств.Ссылка КАК Документ
	|ИЗ
	|	Документ.ПереоценкаВалютныхСредств КАК ПереоценкаВалютныхСредств
	|ГДЕ
	|	ПереоценкаВалютныхСредств.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И ПереоценкаВалютныхСредств.Организация = &Организация
	|	И ПереоценкаВалютныхСредств.ОтражатьВБухгалтерскомУчете
	|	И НЕ ПереоценкаВалютныхСредств.ПометкаУдаления
	|ИТОГИ ПО Дата";
	
	ДеревоДокументов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТекДата = КонецДня(ДатаНачала);
	Пока ТекДата <= КонецДня(ДатаАктуализации) Цикл
		
		ДокументыЗаДату     = ДеревоДокументов.Строки.Найти(ТекДата, "Дата");
		ЕстьДокументыЗаДату = ДокументыЗаДату <> Неопределено;
		НуженДокумент       = ТаблицаДней.Найти(ТекДата, "Дата") <> Неопределено 
			ИЛИ ТекДата = КонецМесяца(ТекДата);
		
		Если ЕстьДокументыЗаДату Тогда
			
			Если НуженДокумент Тогда
				НачИндексУдаления = 1;
			Иначе
				НачИндексУдаления = 0;
			КонецЕсли;
			КолДокументов = ДокументыЗаДату.Строки.Количество();
			
			Для ТекИндекс = НачИндексУдаления По КолДокументов - 1 Цикл
				Попытка
					УдаляемыйДокумент = ДокументыЗаДату.Строки[ТекИндекс].Документ.ПолучитьОбъект();
					УдаляемыйДокумент.УстановитьПометкуУдаления(Истина);
					ОбщегоНазначения.Сообщение("Установлена пометка удаления документа: " + Строка(УдаляемыйДокумент));
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), , "Установка пометки удаления документа: " + Строка(УдаляемыйДокумент));
					Возврат ТекДата;
				КонецПопытки;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НуженДокумент И (НЕ ЕстьДокументыЗаДату) Тогда
			
			ДокументПереоценки = Документы.ПереоценкаВалютныхСредств.СоздатьДокумент();
			ДокументПереоценки.Дата                                    = ТекДата;
			ДокументПереоценки.Организация                             = Организация;
			ДокументПереоценки.ОтражатьВБухгалтерскомУчете             = Истина;
			ДокументПереоценки.ОтражатьВНалоговомУчете                 = Истина;
			ДокументПереоценки.ПереоценкаВалютныхСредствРегл           = Истина;
			ДокументПереоценки.ПереоценкаРасчетовВУсловныхЕдиницахРегл = Истина;
			ДокументПереоценки.Комментарий                             = "<Создан автоматически обработкой восстановления состояния расчетов>";
			ДокументПереоценки.Ответственный                           = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
				глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
			Попытка
				ДокументПереоценки.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), , "Ошибка при записи документа: " + Строка(ДокументПереоценки));
				Возврат ТекДата;
			КонецПопытки;
			
		КонецЕсли;
		
		ТекДата = ТекДата + 60*60*24;
		
	КонецЦикла;
	
	Возврат ТекДата;

КонецФункции

Функция ПереоценитьВалютныеОстатки(ДатаНачала) Экспорт
	
	ДатаСозданныхДокументов = СоздатьДокументыПереоценкиВалютныхСредств(ДатаНачала);
	
	Если ДатаСозданныхДокументов < КонецДня(ДатаАктуализации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Переоценка не выполнена из-за ошибок при создании документов переоценки", , "Переоценка валютных средств по организации: " + Организация);
		Возврат ДатаНачала;
	КонецЕсли;
	
	// Дни, за которые необходимо наличие документов "Переоценка валютных средств",
	// определяем по фактическому наличию документов переоценки
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПереоценкаВалютныхСредств.Дата КАК Дата,
	|	ПереоценкаВалютныхСредств.Ссылка КАК Документ
	|ИЗ
	|	Документ.ПереоценкаВалютныхСредств КАК ПереоценкаВалютныхСредств
	|ГДЕ
	|	ПереоценкаВалютныхСредств.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И ПереоценкаВалютныхСредств.Организация = &Организация
	|	И ПереоценкаВалютныхСредств.ОтражатьВБухгалтерскомУчете
	|	И НЕ ПереоценкаВалютныхСредств.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ПереоценкаВалютныхСредств.Дата ВОЗР";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала",  ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца",   КонецДня(ДатаАктуализации));
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументПереоценки = ВыборкаДокументов.Документ.ПолучитьОбъект();
		
		ДокументПереоценки.ОтражатьВНалоговомУчете                 = Истина;
		ДокументПереоценки.ПереоценкаВалютныхСредствРегл           = Истина;
		ДокументПереоценки.ПереоценкаРасчетовВУсловныхЕдиницахРегл = Истина;
			
		Попытка
			ДокументПереоценки.Записать(РежимЗаписиДокумента.Проведение);
			ОбщегоНазначения.Сообщение("Проведен документ: " + Строка(ДокументПереоценки));
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), , "Проведение документа: " + Строка(ДокументПереоценки));
			Возврат (НачалоДня(ВыборкаДокументов.Дата) - 1);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат (КонецДня(ДатаАктуализации) + 1);

КонецФункции

Процедура ПерепровестиСчетаФактурыВУЕ(ДатаНачала, ВыданныеСчетаФактуры)

	// Выполним перепроведения документов "Счет-фактура выданный" 
	// и "Счет-фактура полученный", которые оформлены по договорам в у.е., 
	// чтобы в регистр сведений "Журнал учета счетов-фактур" были записаны суммы 
	// с учетом корректировок по курсу на дату оплаты.
	// В журнале учета счетов-фактур периодичность в пределах квартала, поэтому
	// выбираем необходимые для перепроведения счета-фактуры исходя из тех документов-оснований,
	// по которым сейчас было выполнено восстановление последовательности расчетов.

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаАктуализации));
	Запрос.УстановитьПараметр("Организация", Организация );
	Запрос.УстановитьПараметр("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
	Если ВыданныеСчетаФактуры Тогда
		Запрос.УстановитьПараметр("ВидСчетаФактурыНаАванс", Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	Иначе
		Запрос.УстановитьПараметр("ВидСчетаФактурыНаАванс", Перечисления.ВидСчетаФактурыПолученного.НаАванс);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПоРеализацииОрганизации.Регистратор
	|ПОМЕСТИТЬ ВТ_Расчеты
	|ИЗ
	|	РегистрСведений.РасчетыПоРеализацииОрганизации КАК РасчетыПоРеализацииОрганизации
	|ГДЕ
	|	РасчетыПоРеализацииОрганизации.Организация = &Организация
	|	И РасчетыПоРеализацииОрганизации.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоРеализацииОрганизации.Активность
	|	И ЕСТЬNULL(РасчетыПоРеализацииОрганизации.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетыПоРеализацииОрганизации.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Ссылка.Дата КАК ДатаСФ
	|ПОМЕСТИТЬ ВТ_СчетаФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Расчеты КАК ВТ_Расчеты
	|		ПО СчетФактураВыданный.ДокументОснование = ВТ_Расчеты.Регистратор
	|ГДЕ
	|	СчетФактураВыданный.Ссылка.Проведен
	|	И ЕСТЬNULL(СчетФактураВыданный.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|	И СчетФактураВыданный.Ссылка.ВалютаДокумента <> &ВалютаРеглУчета
	|	И СчетФактураВыданный.Ссылка.ВидСчетаФактуры <> &ВидСчетаФактурыНаАванс
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактураВыданный.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналУчетаСчетовФактур.Регистратор КАК Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(ЖурналУчетаСчетовФактур.Регистратор) КАК ПредставлениеРегистратора,
	|	ВТ_СчетаФактуры.ДатаСФ КАК ДатаСФ
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетаФактуры КАК ВТ_СчетаФактуры
	|		ПО ЖурналУчетаСчетовФактур.Регистратор = ВТ_СчетаФактуры.Ссылка
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСФ,
	|	Регистратор";
	
	Если НЕ ВыданныеСчетаФактуры Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыПоРеализацииОрганизации", "РасчетыПоПриобретениюОрганизации");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СчетФактураВыданный", "СчетФактураПолученный");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Попытка
			#Если Клиент Тогда
			Состояние("Перепроведение документа: " + Выборка.ПредставлениеРегистратора);
			#КонецЕсли
		
			ДокОбъект = Выборка.Регистратор.ПолучитьОбъект();
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение

			ОбщегоНазначения.СообщитьОбОшибке("Организация <"+Организация+">: Обнаружена ошибка при проведении документа """+Выборка.ПредставлениеРегистратора+""": " + Символы.ПС + ОписаниеОшибки());
		
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
