
Функция ВыгрузитьВсеНастройки() Экспорт 
	лДанные = Новый Структура;
	
	лДанные.Вставить("ВидыИсточников", Новый Массив);
	лВыборка = Справочники.isВидыИсточниковОтчетовПЭО.Выбрать();
	Пока лВыборка.Следующий() Цикл 
		лДанные.ВидыИсточников.Добавить(ПолучитьДанныеОбъекта(лВыборка.Ссылка));
	КонецЦикла;
	
	лДанные.Вставить("Выражения", Новый Массив);
	лВыборка = Справочники.isВыраженияОтчетовПЭО.Выбрать();
	Пока лВыборка.Следующий() Цикл 
		лДанные.Выражения.Добавить(ПолучитьДанныеОбъекта(лВыборка.Ссылка));
	КонецЦикла;
	
	лДанные.Вставить("Источники", Новый Массив);
	лВыборка = Справочники.isИсточникиОтчетовПЭО.Выбрать();
	Пока лВыборка.Следующий() Цикл 
		лДанные.Источники.Добавить(ПолучитьДанныеОбъекта(лВыборка.Ссылка));
	КонецЦикла;
	
	лДанные.Вставить("Настройки", Новый Массив);
	лВыборка = Справочники.isНастройкиОтчетовПЭО.Выбрать();
	Пока лВыборка.Следующий() Цикл 
		лДанные.Настройки.Добавить(ПолучитьДанныеОбъекта(лВыборка.Ссылка));
	КонецЦикла;
	
	лДанные.Вставить("Параметры", Новый Массив);
	лВыборка = Справочники.isПараметрыОтчетовПЭО.Выбрать();
	Пока лВыборка.Следующий() Цикл 
		лДанные.Параметры.Добавить(ПолучитьДанныеОбъекта(лВыборка.Ссылка));
	КонецЦикла;
	
	лДанные.Вставить("Секции", Новый Массив);
	лВыборка = Справочники.isСекцииОтчетов.Выбрать();
	Пока лВыборка.Следующий() Цикл 
		лДанные.Секции.Добавить(ПолучитьДанныеОбъекта(лВыборка.Ссылка));
	КонецЦикла;
	
	лДанные.Вставить("Строки", Новый Массив);
	лВыборка = Справочники.isСтрокиОтчетовПЭО.Выбрать();
	Пока лВыборка.Следующий() Цикл 
		лДанные.Строки.Добавить(ПолучитьДанныеОбъекта(лВыборка.Ссылка));
	КонецЦикла;
	
	Возврат ЗначениеВСтрокуВнутр(лДанные);
КонецФункции

Функция ЗагрузитьНастройки(Данные) Экспорт 
	
	Попытка
		лДанные = ЗначениеИзСтрокиВнутр(Данные);
	Исключение
		Сообщить("Ошибка при распаковке: "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Возврат Ложь;
	КонецПопытки;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого лДанныеОъекта Из лДанные.ВидыИсточников Цикл 
			ЗагрузитьДанныеОбъекта(лДанныеОъекта);
		КонецЦикла;
		
		Для Каждого лДанныеОъекта Из лДанные.Выражения Цикл 
			ЗагрузитьДанныеОбъекта(лДанныеОъекта);
		КонецЦикла;
		
		Для Каждого лДанныеОъекта Из лДанные.Источники Цикл 
			ЗагрузитьДанныеОбъекта(лДанныеОъекта);
		КонецЦикла;
		
		Для Каждого лДанныеОъекта Из лДанные.Настройки Цикл 
			ЗагрузитьДанныеОбъекта(лДанныеОъекта);
		КонецЦикла;
		
		Для Каждого лДанныеОъекта Из лДанные.Параметры Цикл 
			ЗагрузитьДанныеОбъекта(лДанныеОъекта);
		КонецЦикла;
		
		Для Каждого лДанныеОъекта Из лДанные.Секции Цикл 
			ЗагрузитьДанныеОбъекта(лДанныеОъекта);
		КонецЦикла;
		
		Для Каждого лДанныеОъекта Из лДанные.Строки Цикл 
			ЗагрузитьДанныеОбъекта(лДанныеОъекта);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		Сообщить("Ошибка при загрузке: "+ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции


Функция ПолучитьДанныеОбъекта(Объект)
	лДанныеОбъекта = Новый Структура;
	
	лМетаданные = Объект.Метаданные();
	
	лДанныеОбъекта.Вставить("Ссылка", Объект);
	лДанныеОбъекта.Вставить("Ссылка_Имя", Объект.Метаданные().ПолноеИмя());
	лДанныеОбъекта.Вставить("Ссылка_УИ", Объект.УникальныйИдентификатор());
	
	Для Каждого лРеквизит Из лМетаданные.СтандартныеРеквизиты Цикл 
		лДанныеОбъекта.Вставить(лРеквизит.Имя, Объект[лРеквизит.Имя]);
	КонецЦикла;
	
	Для Каждого лРеквизит Из лМетаданные.Реквизиты Цикл 
		Если ТипЗнч(Объект[лРеквизит.Имя]) = Тип("ХранилищеЗначения") Тогда 
			лДанныеОбъекта.Вставить(лРеквизит.Имя, Объект[лРеквизит.Имя].Получить());
		Иначе
			лДанныеОбъекта.Вставить(лРеквизит.Имя, Объект[лРеквизит.Имя]);
		КонецЕсли;
		Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Объект[лРеквизит.Имя]) Тогда 
			лДанныеОбъекта.Вставить(лРеквизит.Имя+"_Имя", Объект[лРеквизит.Имя].Метаданные().ПолноеИмя());
			лМетаданныеРеквизита = Объект[лРеквизит.Имя].Метаданные();
			Если Найти(лМетаданныеРеквизита.ПолноеИмя(), "Перечисление.") = 1 Тогда 
				лПеречисление = Перечисления[лМетаданныеРеквизита.Имя];
				лИмяЗначения = "";
				Для Каждого лЗначение Из лМетаданныеРеквизита.ЗначенияПеречисления Цикл 
					Если лПеречисление[лЗначение.Имя] = Объект[лРеквизит.Имя] Тогда 
						лИмяЗначения = лЗначение.Имя;
					КонецЕсли;
				КонецЦикла;
				лДанныеОбъекта.Вставить(лРеквизит.Имя+"_УИ", лИмяЗначения);
			Иначе
				лДанныеОбъекта.Вставить(лРеквизит.Имя+"_УИ", Объект[лРеквизит.Имя].УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого лТабличнаяЧасть Из лМетаданные.ТабличныеЧасти Цикл 
		лМассивСтрок = Новый Массив;
		Для Каждого лСтрокаТЧ Из Объект[лТабличнаяЧасть.Имя] Цикл 
			лДанныеСтроки = Новый Структура;
			Для Каждого лРеквизит Из лТабличнаяЧасть.Реквизиты Цикл 
				Если ТипЗнч(лСтрокаТЧ[лРеквизит.Имя]) = Тип("ХранилищеЗначения") Тогда 
					лДанныеСтроки.Вставить(лРеквизит.Имя, лСтрокаТЧ[лРеквизит.Имя].Получить());
				Иначе
					лДанныеСтроки.Вставить(лРеквизит.Имя, лСтрокаТЧ[лРеквизит.Имя]);
				КонецЕсли;
				Если ОбщегоНазначения.ЗначениеСсылочногоТипа(лСтрокаТЧ[лРеквизит.Имя]) Тогда 
					лДанныеСтроки.Вставить(лРеквизит.Имя+"_Имя", лСтрокаТЧ[лРеквизит.Имя].Метаданные().ПолноеИмя());
					лМетаданныеРеквизита = лСтрокаТЧ[лРеквизит.Имя].Метаданные();
					Если Найти(лМетаданныеРеквизита.ПолноеИмя(), "Перечисление.") = 1 Тогда 
						лПеречисление = Перечисления[лМетаданныеРеквизита.Имя];
						лИмяЗначения = "";
						Для Каждого лЗначение Из лМетаданныеРеквизита.ЗначенияПеречисления Цикл 
							Если лПеречисление[лЗначение.Имя] = Объект[лРеквизит.Имя] Тогда 
								лИмяЗначения = лЗначение.Имя;
							КонецЕсли;
						КонецЦикла;
						лДанныеСтроки.Вставить(лРеквизит.Имя+"_УИ", лИмяЗначения);
					Иначе
						лДанныеСтроки.Вставить(лРеквизит.Имя+"_УИ", лСтрокаТЧ[лРеквизит.Имя].УникальныйИдентификатор());
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			лМассивСтрок.Добавить(лДанныеСтроки);
		КонецЦикла;
		лДанныеОбъекта.Вставить(лТабличнаяЧасть.Имя, лМассивСтрок);
	КонецЦикла;
	
	Возврат лДанныеОбъекта;
КонецФункции

Процедура ЗагрузитьДанныеОбъекта(ДанныеОбъекта)
	
	лМетаданные = ДанныеОбъекта.Ссылка.Метаданные();
	лПолноеИмя = лМетаданные.ПолноеИмя();
	лПозицияРазделителя = Найти(лПолноеИмя, ".");
	лВидОбъекта = Сред(лПолноеИмя, 1, лПозицияРазделителя-1);
	
	лСсылка = ПолучитьЗначение(ДанныеОбъекта, "Ссылка");
	лОбъект = лСсылка.ПолучитьОбъект();
	Если лОбъект = Неопределено Тогда 
		Если лВидОбъекта = "Справочник" Тогда 
			Если ДанныеОбъекта.Свойство("ЭтоГруппа") 
			 И ДанныеОбъекта.ЭтоГруппа Тогда 
				лОбъект = Справочники[лМетаданные.Имя].СоздатьГруппу();
			Иначе
				лОбъект = Справочники[лМетаданные.Имя].СоздатьЭлемент();
			КонецЕсли;
			лОбъект.УстановитьСсылкуНового(лСсылка);
		Иначе
			ВызватьИсключение "Необрабатываемый вид объекта: "+лВидОбъекта;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого лРеквизит Из лМетаданные.СтандартныеРеквизиты Цикл 
		Попытка 
			лОбъект[лРеквизит.Имя] = ПолучитьЗначение(ДанныеОбъекта, лРеквизит.Имя);
		Исключение
			//
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого лРеквизит Из лМетаданные.Реквизиты Цикл 
		Попытка 
			Если ТипЗнч(лОбъект[лРеквизит.Имя]) = Тип("ХранилищеЗначения") Тогда 
				лОбъект[лРеквизит.Имя] = Новый ХранилищеЗначения(ПолучитьЗначение(ДанныеОбъекта, лРеквизит.Имя));
			Иначе
				лОбъект[лРеквизит.Имя] = ПолучитьЗначение(ДанныеОбъекта, лРеквизит.Имя);
			КонецЕсли;
		Исключение
			//
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого лТабличнаяЧасть Из лМетаданные.ТабличныеЧасти Цикл 
		Попытка 
			лОбъект[лТабличнаяЧасть.Имя].Очистить();
			Для Каждого лДанныеСтроки Из ДанныеОбъекта[лТабличнаяЧасть.Имя] Цикл 
				лСтрокаТЧ = лОбъект[лТабличнаяЧасть.Имя].Добавить();
				Для Каждого лРеквизит Из лТабличнаяЧасть.Реквизиты Цикл 
					Попытка 
						Если ТипЗнч(лСтрокаТЧ[лРеквизит.Имя]) = Тип("ХранилищеЗначения") Тогда 
							лСтрокаТЧ[лРеквизит.Имя] = Новый ХранилищеЗначения(ПолучитьЗначение(лДанныеСтроки, лРеквизит.Имя));
						Иначе
							лСтрокаТЧ[лРеквизит.Имя] = ПолучитьЗначение(лДанныеСтроки, лРеквизит.Имя);
						КонецЕсли;
					Исключение
						//
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
		Исключение
			//
		КонецПопытки;
	КонецЦикла;
	
	лОбъект.ОбменДанными.Загрузка = Истина;
	лОбъект.Записать();

КонецПроцедуры

Функция ПолучитьЗначение(Данные, Имя)
	лЗначение = Неопределено;
	
	Если Данные.Свойство(Имя) Тогда 
		лЗначение = Данные[Имя];
		Если Данные.Свойство(Имя+"_Имя") И Данные.Свойство(Имя+"_УИ") Тогда 
			лПозицияРазделителя = Найти(Данные[Имя+"_Имя"], ".");
			лВидОбъекта = Сред(Данные[Имя+"_Имя"], 1, лПозицияРазделителя-1);
			лИмяОбъекта = Сред(Данные[Имя+"_Имя"], лПозицияРазделителя+1);
			Если лВидОбъекта = "Справочник" Тогда 
				лЗначение = Справочники[лИмяОбъекта].ПолучитьСсылку(Данные[Имя+"_УИ"]);
			ИначеЕсли лВидОбъекта = "Документ" Тогда 
				лЗначение = Документы[лИмяОбъекта].ПолучитьСсылку(Данные[Имя+"_УИ"]);
			ИначеЕсли лВидОбъекта = "ПланВидовХарактеристик" Тогда 
				лЗначение = ПланыВидовХарактеристик[лИмяОбъекта].ПолучитьСсылку(Данные[Имя+"_УИ"]);
			ИначеЕсли лВидОбъекта = "ПланСчетов" Тогда 
				лЗначение = ПланыСчетов[лИмяОбъекта].ПолучитьСсылку(Данные[Имя+"_УИ"]);
			ИначеЕсли лВидОбъекта = "ПланВидовРасчета" Тогда 
				лЗначение = ПланыВидовРасчета[лИмяОбъекта].ПолучитьСсылку(Данные[Имя+"_УИ"]);
			ИначеЕсли лВидОбъекта = "Перечисление" Тогда 
				Если ЗначениеЗаполнено(Данные[Имя+"_УИ"]) Тогда 
					лЗначение = Перечисления[лИмяОбъекта][Данные[Имя+"_УИ"]];
				Иначе
					лЗначение = Перечисления[лИмяОбъекта].Пустаяссылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат лЗначение;
КонецФункции

