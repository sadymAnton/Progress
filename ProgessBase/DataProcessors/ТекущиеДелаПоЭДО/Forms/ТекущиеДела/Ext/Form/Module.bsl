
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;

	ИспользоватьЭлектронныеЦифровыеПодписи = Константы.ИспользоватьЭлектронныеЦифровыеПодписи.Получить();
	
	ИнициализироватьДерево();
	ОбновитьДанныеОКоличестве();
	
	Если Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Получить() Тогда
		Элементы.Подписать.Заголовок = Нстр("ru = 'Подписать'");
		Элементы.СформироватьПодписатьИОтправить.Заголовок = Нстр("ru = 'Утвердить и подписать'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = Нстр("ru = 'Утвердить, подписать и подготовить к отправке
																	|выделенные электронные документы'");
		Если НЕ ИспользоватьЭлектронныеЦифровыеПодписи Тогда
			Элементы.СформироватьПодписатьИОтправить.Заголовок = Нстр("ru = 'Утвердить'");
			Команды.УтвердитьПодписатьИОтправить.Подсказка = Нстр("ru = 'Утвердить и подготовить к отправке
																		|выделенные электронные документы'");
		КонецЕсли;
	ИначеЕсли НЕ ИспользоватьЭлектронныеЦифровыеПодписи Тогда
		Элементы.СформироватьПодписатьИОтправить.Заголовок = Нстр("ru = 'Утвердить и отправить'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = Нстр("ru = 'Утвердить и отправить
																	|выделенные электронные документы'");
	КонецЕсли;

	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	СформироватьТаблицуБыстрогоОтбора();
	
	Если НЕ ИспользоватьЭлектронныеЦифровыеПодписи Тогда
		Элементы.СтраницаНаПодписи.Видимость = Ложь;
	КонецЕсли;
	
	Отборы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ЭтаФорма.ИмяФормы, "Отборы", Новый ТаблицаЗначений);
	
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Для Каждого ЭлементКоллекции Из БыстрыеОтборы Цикл
			Если ЭлементОтбора.Параметр = ЭлементКоллекции.Параметр Тогда
				ЗаполнитьЗначенияСвойств(ЭлементКоллекции, ЭлементОтбора);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Отборы.Количество() > 0 Тогда
		УстановитьОтборыДинамическихСписков(ЭтаФорма, Отборы);
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Ложь) Тогда
		Элементы.Подписать.Видимость                                                  = Ложь;
		Элементы.КомандаУтвердитьЭД.Видимость                                         = Ложь;
		Элементы.ОтправитьИПолучитьЭД.Видимость                                       = Ложь;
		Элементы.ТаблицаСформироватьЭД.Видимость                                      = Ложь;
		Элементы.РаспаковатьВыделенныеПакеты.Видимость                                = Ложь;
		Элементы.СформироватьПодписатьИОтправить.Видимость                            = Ложь;
		Элементы.НеотправленныеПакетыОтправитьПакеты.Видимость                        = Ложь;
		Элементы.ЭДНаПодписиУстановитьОтветственного.Видимость                        = Ложь;
		Элементы.ЭДКОбработкеУстановитьОтветственного.Видимость                       = Ложь;
		Элементы.ТаблицаСформироватьПодписатьИОтправить.Видимость                     = Ложь;
		Элементы.ЭДНаУтвержденииУстановитьОтветственного.Видимость                    = Ложь;
		Элементы.ДокументыКФормированиюЗакрытьПринудительно.Видимость                 = Ложь;
		Элементы.ДокументыНаКонтролеУстановитьОтветственного.Видимость                = Ложь;
		Элементы.НеотправленныеПакетыУстановитьСтатусОтменен.Видимость                = Ложь;
		Элементы.НераспакованныеПакетыУстановитьСтатусОтменен.Видимость               = Ложь;
		Элементы.НаУточненииУстановитьОтветственногоНаУточнении.Видимость             = Ложь;
		Элементы.ЭДНаИсправленииУстановитьОтветственногоНаИсправлении.Видимость       = Ложь;
		Элементы.НеизвестныеПакетыУстановитьСтатусОтмененНеизвестногоПакета.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ОбновитьДанныеНаФорме();
		ЭтаФорма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьОтборы(ЭтаФорма.ИмяФормы, "Отборы", БыстрыеОтборы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ БыстрыеОтборы

&НаКлиенте
Процедура БыстрыеОтборыЗначениеПриИзменении(Элемент)
	
	УстановитьОтборы(ЭтаФорма);
	Если Элемент.Родитель.ТекущиеДанные.Тип = "Число" Тогда
		ВведеноЧисло = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Значение = Неопределено Тогда
		Элемент.ТекущиеДанные.Значение = 0;
	Иначе
		ВведеноЧисло = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ВведеноЧисло И Элемент.ТекущиеДанные.Тип = "Число" Тогда
		Элемент.ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;
	
	ВведеноЧисло = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр = "ВидЭД" Тогда
		ДанныеВыбора = СписокАктуальныхВидовЭД();
		СтандартнаяОбработка = Ложь;
	КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоДействий

&НаКлиенте
Процедура ДеревоДействийПриАктивизацииСтроки(Элемент)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы["Страница" + Элемент.ТекущиеДанные.Значение];
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Строка = Элементы.БыстрыеОтборы.ТекущиеДанные;
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1, 1, 1);
	ИначеЕсли Строка.Тип = "Число" Тогда
		Строка.Значение = Неопределено;
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка.Контрагенты" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка.Организации" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
	КонецЕсли;
	Элементы.БыстрыеОтборы.ЗакончитьРедактированиеСтроки(Ложь);
	
	УстановитьОтборы(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЭДНаУтверждении

&НаКлиенте
Процедура ЭДНаУтвержденииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.ЭлектронныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЭДНаИсправлении

&НаКлиенте
Процедура ЭДНаИсправленииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.ЭлектронныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЭДНаПодписи

&НаКлиенте
Процедура ЭДНаПодписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.ЭлектронныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЭДНаПодписи

&НаКлиенте
Процедура НаУточненииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.ЭлектронныйДокумент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЭДКОбработке

&НаКлиенте
Процедура ЭДКОбработкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.ЭлектронныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДокументыКФормированию

&НаКлиенте
Процедура ДокументыКФормированиюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДокументыНаКонтроле

&НаКлиенте
Процедура ДокументыНаКонтролеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.ЭлектронныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДинамическийСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИПолучитьЭД(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьПолучитьЭлектронныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоНаУтверждении(Команда)
	
	УстановитьОтветственного(Элементы.ЭДНаУтверждении.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоНаПодписи(Команда)
	
	УстановитьОтветственного(Элементы.ЭДНаПодписи.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоНаУточнении(Команда)
	
	УстановитьОтветственного(Элементы.ЭДНаУточнении.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоНаИсправлении(Команда)
	
	УстановитьОтветственного(Элементы.ЭДНаИсправлении.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоНаОбработке(Команда)
	
	УстановитьОтветственного(Элементы.ЭДКОбработке.ВыделенныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоНаКонтроле(Команда)
	
	УстановитьОтветственного(Элементы.ДокументыНаКонтроле.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокумент(Команда)
	
	ТекущиеДанные = Элементы.ДокументыКФормированию.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНеотправленныеПакеты(Команда)
	
	УстановитьСтатусОтменен(Элементы.НеотправленныеПакеты.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНераспакованныеПакеты(Команда)
	
	УстановитьСтатусОтменен(Элементы.НераспакованныеПакеты.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНеизвестныеПакеты(Команда)
	
	УстановитьСтатусОтменен(Элементы.НеизвестныеПакеты.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Распаковать(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.РаспаковатьМассивПакетовЭД(Элементы.НераспакованныеПакеты.ВыделенныеСтроки);
	ОбновитьДанныеНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодписатьИОтправить(Команда)
	
	МассивДокументов = МассивДокументов(Элементы.ДокументыКФормированию.ВыделенныеСтроки);
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивДокументов, "СформироватьУтвердитьПодписатьОтправить");
	ОбновитьДанныеНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭД(Команда)
	
	МассивДокументов = МассивДокументов(Элементы.ДокументыКФормированию.ВыделенныеСтроки);
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивДокументов, "СформироватьПоказать");
	ОбновитьДанныеНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПринудительно(Команда)
	
	ЗакрытьДокументыПринудительно(Элементы.ДокументыКФормированию.ВыделенныеСтроки);
	
	ТекстОповещения = НСтр("ru = 'Изменено состояние ЭД документов на ""Закрыт принудительно"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Элементы.ДокументыКФормированию.ВыделенныеСтроки.Количество());
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обработка документов'"), , ТекстОповещения);
	
	ОбновитьДанныеНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(
			Элементы.ЭДНаУтверждении.ВыделенныеСтроки,
			"Утвердить");
	ОбновитьДанныеНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Элементы.ЭДНаПодписи.ВыделенныеСтроки);
	ОбновитьДанныеНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПодписатьИОтправить(Команда)
	
	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Элементы.ЭДКОбработке.ВыделенныеСтроки);
	ОбновитьДанныеНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПакеты(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
			ЭлектронныеДокументыСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы(
																										"РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	СоотвСоглашенийИСтруктурСертификатов = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации();
	
	КоличествоОтправленных = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправкаПакетовЭД(
													Элементы.НеотправленныеПакеты.ВыделенныеСтроки,
													СоотвСоглашенийИСтруктурСертификатов);

	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КоличествоОтправленных);
	
	Оповестить("ОбновитьСостояниеЭД");
		
	ЗаголовокОповещения = НСтр("ru = 'Отправка электронных документов'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	
	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "Число" Тогда
			Строка.Значение = Неопределено;
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Контрагенты" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Организации" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
	УстановитьОтборы(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция МассивДокументов(Знач МассивКлючей)
	
	МассивВозврата = Новый Массив;
	Для Каждого Запись Из МассивКлючей Цикл
		МассивВозврата.Добавить(Запись.СсылкаНаОбъект);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗакрытьДокументыПринудительно(Знач МассивДокументов)
	
	ТабБлокировки = Новый ТаблицаЗначений;
	ТабБлокировки.Колонки.Добавить("СсылкаНаОбъект");
	
	Для Каждого Запись Из МассивДокументов Цикл
		НовСтрока = ТабБлокировки.Добавить();
		НовСтрока.СсылкаНаОбъект = Запись.СсылкаНаОбъект;
	КонецЦикла;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияЭД");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТабБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СсылкаНаОбъект", "СсылкаНаОбъект");
	Блокировка.Заблокировать();
	
	Для Каждого Строка ИЗ ТабБлокировки Цикл
		ЗаписьРегистра = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.СсылкаНаОбъект = Строка.СсылкаНаОбъект;
		ЗаписьРегистра.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		ЗаписьРегистра.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		ЗаписьРегистра.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
		ЗаписьРегистра.ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		ЗаписьРегистра.Записать();
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСумме(Форма, Значение, ВидСравнения)

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.ДокументыКФормированию.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.ДокументыНаКонтроле.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.ЭДНаУтверждении.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.ЭДКОбработке.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.ЭДНаПодписи.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.ЭДНаИсправлении.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.ЭДНаУточнении.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДате(Форма, ЗначениеОтбора, ВидСравнения)

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.ЭДНаПодписи.Отбор, "Дата", ВидСравнения, ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.ЭДНаИсправлении.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.ЭДНаУточнении.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.ЭДКОбработке.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.ЭДНаУтверждении.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.НеизвестныеПакеты.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.ДокументыНаКонтроле.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.НеотправленныеПакеты.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.НераспакованныеПакеты.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.ДокументыКФормированию.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОтветственному(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаУтверждении.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаПодписи.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаИсправлении.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаУточнении.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДКОбработке.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ДокументыНаКонтроле.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НераспакованныеПакеты.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НеотправленныеПакеты.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НеизвестныеПакеты.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоКонтрагенту(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ДокументыКФормированию.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаУтверждении.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаПодписи.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаИсправлении.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаУточнении.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДКОбработке.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ДокументыНаКонтроле.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НеотправленныеПакеты.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НераспакованныеПакеты.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОрганизации(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ДокументыКФормированию.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаУтверждении.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаПодписи.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаИсправлении.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаУточнении.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДКОбработке.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ДокументыНаКонтроле.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НеотправленныеПакеты.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НераспакованныеПакеты.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НеизвестныеПакеты.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоВидуЭД(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаУтверждении.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаПодписи.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаИсправлении.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаУточнении.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДКОбработке.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ДокументыНаКонтроле.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НераспакованныеПакеты.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НеизвестныеПакеты.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоНаправлениюЭД(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаУтверждении.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаПодписи.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаИсправлении.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаУточнении.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДКОбработке.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ДокументыНаКонтроле.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НераспакованныеПакеты.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НеизвестныеПакеты.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДополнительнойИнформации(Форма, ЗначениеОтбора)

	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаУтверждении.Отбор,
										"ДополнительнаяИнформация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Содержит,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаИсправлении.Отбор,
										"ДополнительнаяИнформация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Содержит,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаУточнении.Отбор,
										"ДополнительнаяИнформация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Содержит,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДНаПодписи.Отбор,
										"ДополнительнаяИнформация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Содержит,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ЭДКОбработке.Отбор,
										"ДополнительнаяИнформация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Содержит,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.ДокументыНаКонтроле.Отбор,
										"ДополнительнаяИнформация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Содержит,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаФорме()
	
	ОбновитьДинамическиеСписки();
	ОбновитьДанныеОКоличестве();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДинамическиеСписки()
	
	Элементы.ЭДНаПодписи.Обновить();
	Элементы.ЭДКОбработке.Обновить();
	Элементы.ЭДНаУточнении.Обновить();
	Элементы.ЭДНаИсправлении.Обновить();
	Элементы.ЭДНаУтверждении.Обновить();
	Элементы.НеизвестныеПакеты.Обновить();
	Элементы.ДокументыНаКонтроле.Обновить();
	Элементы.НеотправленныеПакеты.Обновить();
	Элементы.НераспакованныеПакеты.Обновить();
	Элементы.ДокументыКФормированию.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОКоличестве(ТекущаяСтраница = Неопределено)
	
	Запрос = Новый Запрос;
	
	Если ТекущаяСтраница = Неопределено ИЛИ ТекущаяСтраница = "СтраницаСформировать" Тогда
		Запрос.Текст = ДокументыКФормированию.ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		КолКФормированию = Выборка.Количество();
		ПредставлениеСтроки = НСтр("ru = 'Сформировать'");
		УстановитьПредставлениеСтрокДереваРекурсивно(ДеревоДействий, "Сформировать", ПредставлениеСтроки, КолКФормированию);
	КонецЕсли;
	
	Если ТекущаяСтраница = Неопределено ИЛИ ТекущаяСтраница = "СтраницаНаУтверждении" Тогда
		Запрос.Текст = ЭДНаУтверждении.ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		КолНаУтверждении = Выборка.Количество();
		ПредставлениеСтроки = НСтр("ru = 'Утвердить'");
		УстановитьПредставлениеСтрокДереваРекурсивно(ДеревоДействий, "НаУтверждении", ПредставлениеСтроки, КолНаУтверждении);
	КонецЕсли;
	
	Если ТекущаяСтраница = Неопределено ИЛИ ТекущаяСтраница = "СтраницаНаПодписи" Тогда
		Запрос.Текст = ЭДНаПодписи.ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		КолНаПодписи = Выборка.Количество();
		УстановитьПредставлениеСтрокДереваРекурсивно(ДеревоДействий, "НаПодписи", НСтр("ru = 'Подписать'"), КолНаПодписи);
	КонецЕсли;
	
	Если ТекущаяСтраница = Неопределено ИЛИ ТекущаяСтраница = "СтраницаНаИсправлении" Тогда
		Запрос.Текст = ЭДНаИсправлении.ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		КолНаИсправлении = Выборка.Количество();
		ПредставлениеСтроки = НСтр("ru = 'Исправить'");
		УстановитьПредставлениеСтрокДереваРекурсивно(ДеревоДействий, "НаИсправлении", ПредставлениеСтроки, КолНаИсправлении);
	КонецЕсли;
	
	Если ТекущаяСтраница = Неопределено ИЛИ ТекущаяСтраница = "СтраницаНаУточнении" Тогда
		Запрос.Текст = ЭДНаУточнении.ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		КолНаУточнении = Выборка.Количество();
		ПредставлениеСтроки = НСтр("ru = 'Уточнить'");
		УстановитьПредставлениеСтрокДереваРекурсивно(ДеревоДействий, "НаУточнении", ПредставлениеСтроки, КолНаУточнении);
	КонецЕсли;
	
	Если ТекущаяСтраница = Неопределено ИЛИ ТекущаяСтраница = "СтраницаОбработать" Тогда
		Запрос.Текст = ЭДКОбработке.ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		КолКОбработке = Выборка.Количество();
		УстановитьПредставлениеСтрокДереваРекурсивно(ДеревоДействий, "Обработать", НСтр("ru = 'Обработать'"), КолКОбработке);
	КонецЕсли;
	
	Если ТекущаяСтраница = Неопределено ИЛИ ТекущаяСтраница = "СтраницаНаКонтроле" Тогда
		Запрос.Текст = ДокументыНаКонтроле.ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		КолНаКонтроле = Выборка.Количество();
		ПредставлениеСтроки = НСтр("ru = 'На контроле'");
		УстановитьПредставлениеСтрокДереваРекурсивно(ДеревоДействий, "НаКонтроле", ПредставлениеСтроки, КолНаКонтроле);
	КонецЕсли;
	
	Если ТекущаяСтраница = Неопределено ИЛИ ТекущаяСтраница = "СтраницаКОтправке" Тогда
		Запрос.Текст = НеотправленныеПакеты.ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		КолНеотправленных = Выборка.Количество();
		ПредставлениеСтроки =  НСтр("ru = 'Отправить'");
		УстановитьПредставлениеСтрокДереваРекурсивно(ДеревоДействий, "КОтправке", ПредставлениеСтроки, КолНеотправленных);
	КонецЕсли;
	
	Если ТекущаяСтраница = Неопределено ИЛИ ТекущаяСтраница = "СтраницаКРаспаковке" Тогда
		Запрос.Текст = НераспакованныеПакеты.ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		КолНераспакованных = Выборка.Количество();
		ПредставлениеСтроки = НСтр("ru = 'Распаковать'");
		УстановитьПредставлениеСтрокДереваРекурсивно(ДеревоДействий, "КРаспаковке", ПредставлениеСтроки, КолНераспакованных);
	КонецЕсли;

	Если ТекущаяСтраница = Неопределено ИЛИ ТекущаяСтраница = "СтраницаНаРучномРазборе" Тогда
		Запрос.Текст = НеизвестныеПакеты.ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		КолНеизвестныхПакетов = Выборка.Количество();
		ПредставлениеСтроки = НСтр("ru = 'Разобрать'");
		УстановитьПредставлениеСтрокДереваРекурсивно(
								ДеревоДействий,
								"НаРучномРазборе",
								ПредставлениеСтроки,
								КолНеизвестныхПакетов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусПакетов(Знач МассивЭД, Знач СтатусПакета, КоличествоИзмененных)
	
	КоличествоИзмененных = 0;
	Для Каждого СтрокаТаблицы Из МассивЭД Цикл
		Попытка
			Пакет = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			Пакет.СтатусПакета = СтатусПакета;
			Пакет.Записать();
			КоличествоИзмененных = КоличествоИзмененных + 1;
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОперации  = НСтр("ru = 'изменение статуса пакетов ЭД'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ТекстОперации,
																						ТекстОшибки,
																						ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДерево()

	Дерево = РеквизитФормыВЗначение("ДеревоДействий");
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Сформировать";
	Обработать = Дерево.Строки.Добавить();
	Обработать.Значение = "Обработать";
	НовЗапись = Обработать.Строки.Добавить();
	НовЗапись.Значение = "НаУтверждении";
	Если ИспользоватьЭлектронныеЦифровыеПодписи Тогда
		НовЗапись = Обработать.Строки.Добавить();
		НовЗапись.Значение = "НаПодписи";
	КонецЕсли;
	НовЗапись = Обработать.Строки.Добавить();
	НовЗапись.Значение = "НаУточнении";
	НовЗапись = Обработать.Строки.Добавить();
	НовЗапись.Значение = "НаИсправлении";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "КОтправке";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "КРаспаковке";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "НаКонтроле";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "НаРучномРазборе";
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДействий");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, Значение, Представление, Количество)
	
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	
	Для Каждого ЭлементКоллекции Из ЭлементыДерева Цикл
		
		Если ЭлементКоллекции.ПолучитьЭлементы().Количество() > 0 Тогда
			УстановитьПредставлениеСтрокДереваРекурсивно(ЭлементКоллекции, Значение, Представление, Количество);
		КонецЕсли;
		
		Если ЭлементКоллекции.Значение = Значение Тогда
			ЭлементКоллекции.Представление = Представление + ?(Количество > 0, " (" + Количество + ")", "");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()
	
	БыстрыеОтборы.Очистить();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Организация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Организация:'");
	НоваяСтрока.Тип = "СправочникСсылка.Организации";
	НоваяСтрока.Значение = Справочники.Организации.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Контрагент";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Контрагент:'");
	НоваяСтрока.Тип = "СправочникСсылка.Контрагенты";
	НоваяСтрока.Значение = Справочники.Контрагенты.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата с:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата по:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма с:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма по:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ВидЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Вид документа:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.ВидыЭД";
	НоваяСтрока.Значение = Перечисления.ВидыЭД.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "НаправлениеЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Направление:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.НаправленияЭД";
	НоваяСтрока.Значение = Перечисления.НаправленияЭД.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ДополнительнаяИнформация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Доп. информация:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Ответственный";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Ответственный:'");
	НоваяСтрока.Тип = "СправочникСсылка.Пользователи";
	НоваяСтрока.Значение = глЗначениеПеременной("глТекущийПользователь");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборы(Форма)
	
	УдалитьОтборыПоСумме(Форма);
	УдалитьОтборыПоДате(Форма);
	
	УстановитьОтборыДинамическихСписков(Форма, Форма.БыстрыеОтборы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыДинамическихСписков(Форма, Отборы)
	
	Для Каждого СтрокаОтбора ИЗ Отборы Цикл
		Если СтрокаОтбора.Параметр = "Ответственный" Тогда
			УстановитьОтборПоОтветственному(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Контрагент" Тогда
			УстановитьОтборПоКонтрагенту(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Организация" Тогда
			УстановитьОтборПоОрганизации(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "НаправлениеЭД" Тогда
			УстановитьОтборПоНаправлениюЭД(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "ВидЭД" Тогда
			УстановитьОтборПоВидуЭД(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_С"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			УстановитьОтборПоСумме(Форма, СтрокаОтбора.Значение, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_По"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			УстановитьОтборПоСумме(Форма, СтрокаОтбора.Значение, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_С" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			УстановитьОтборПоДате(Форма, НачалоДня(СтрокаОтбора.Значение), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_По" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			УстановитьОтборПоДате(Форма, КонецДня(СтрокаОтбора.Значение), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "ДополнительнаяИнформация" Тогда
			УстановитьОтборПоДополнительнойИнформации(Форма, СтрокаОтбора.Значение);
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьОтборыПоСумме(Форма)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ДокументыКФормированию.Отбор, "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ДокументыНаКонтроле.Отбор,    "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ЭДНаУтверждении.Отбор,        "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ЭДНаИсправлении.Отбор,        "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ЭДНаУточнении.Отбор,          "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ЭДКОбработке.Отбор,           "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ЭДНаПодписи.Отбор,            "СуммаДокумента");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьОтборыПоДате(Форма)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ДокументыКФормированию.Отбор, "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.НераспакованныеПакеты.Отбор,  "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.НеотправленныеПакеты.Отбор,   "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ДокументыНаКонтроле.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.НеизвестныеПакеты.Отбор,      "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ЭДНаУтверждении.Отбор,        "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ЭДНаИсправлении.Отбор,        "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ЭДНаУточнении.Отбор,          "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ЭДКОбработке.Отбор,           "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.ЭДНаПодписи.Отбор,            "Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтменен(МассивЭД)
	
	Количество = 0;
	УстановитьСтатусПакетов(МассивЭД,
							ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Отменен"),
							Количество);
	ТекстОповещения = НСтр("ru = 'Изменен статус пакетов на ""Отменен"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен электронными документами'"), , ТекстОповещения);
	ОбновитьДанныеНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(МассивЭД)
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",      Истина);
	ПараметрыФормы.Вставить("РежимВыбора",             Истина);
	
	НовыйОтветственный = ОткрытьФормуМодально("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
	Если НЕ НовыйОтветственный = Неопределено Тогда
		КоличествоОбработанныхЭД = 0;
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьОтветственногоЭД(
														МассивЭД,
														НовыйОтветственный,
														КоличествоОбработанныхЭД);
		ЭлектронныеДокументыСлужебныйКлиент.ОповеститьПользователяОСменеОтветственного(
														НовыйОтветственный,
														МассивЭД.Количество(),
														КоличествоОбработанныхЭД);
	КонецЕсли;
	
	ОбновитьДинамическиеСписки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтборы(Знач ИмяФормы, Знач Ключ, Знач Значение)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, Ключ, Значение.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДинамическийСписок()

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСформировать Тогда
		Элементы.ДокументыКФормированию.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНаУтверждении Тогда
		Элементы.ЭДНаУтверждении.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНаПодписи Тогда
		Элементы.ЭДНаПодписи.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбработать Тогда
		Элементы.ЭДКОбработке.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНаУточнении Тогда
		Элементы.ЭДНаУточнении.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНаИсправлении Тогда
		Элементы.ЭДНаИсправлении.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНаКонтроле Тогда
		Элементы.ДокументыНаКонтроле.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКОтправке Тогда
		Элементы.НеотправленныеПакеты.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКРаспаковке Тогда
		Элементы.НераспакованныеПакеты.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНаРучномРазборе Тогда
		Элементы.НеизвестныеПакеты.Обновить();
	КонецЕсли;
	
	ОбновитьДанныеОКоличестве(Элементы.Страницы.ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокАктуальныхВидовЭД()
	
	МассивАктуальныхЭД = Новый Массив;
	ЭлектронныеДокументыПереопределяемый.ПолучитьАктуальныеВидыЭД(МассивАктуальныхЭД);
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(МассивАктуальныхЭД);
	Возврат СписокВозврата;
	
КонецФункции