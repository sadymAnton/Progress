Перем мВалютаРегламентированногоУчета Экспорт;
Перем ПустыеСсылкиДокументовРасчетов;
Перем НаличиеРеквизитаСписаниеПартийВРегистре;
Перем НаличиеРеквизитаВидРегламентнойОперацииВРегистре;

// Процедура проведения всех необходимых документов по регистрам подсистемы НДС.
//
Процедура ПровестиДокументы(МассивОрганизаций) Экспорт
	
	ЕстьДокументы = Истина;
	ДокументСсылка = Неопределено;
	БылПоследнийДокумент = Ложь;
	СписыватьПартииРасходнымОрдером = Константы.СписыватьПартииРасходнымОрдером.Получить();
	
	Если ПроводитьДокументыВыбранногоПериода Тогда
		ДатаДокумента = ДатаНач;
		ДатаКонца = КонецДня(ДатаКон);
	Иначе
		ДатаДокумента = Дата('00010101');
		ДатаКонца = Дата('29991231');
	КонецЕсли;
	
	ТаблицаДокументовСписанияПартий = Новый ТаблицаЗначений();
	ТаблицаДокументовСписанияПартий.Колонки.Добавить("Регистратор");
	ТаблицаДокументовСписанияПартий.Добавить();
	
	Пока ЕстьДокументы Цикл
		
		ВыборкаДокументов = ПолучитьТаблицуДокументов(ДатаДокумента, ДокументСсылка, ДатаКонца, БылПоследнийДокумент, МассивОрганизаций);
		
		ЕстьДокументы = ВыборкаДокументов.Количество() > 0;
		БылПоследнийДокумент = ЕстьДокументы;
		
		Если ЕстьДокументы Тогда
			Для Каждого СтрокаДокумента Из ВыборкаДокументов Цикл
				
				Если (ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.АккредитивПереданный")
					ИЛИ ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.АккредитивПолученный")
					ИЛИ ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное")
					ИЛИ ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное")
					ИЛИ ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
					ИЛИ ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
					ИЛИ ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное")
					ИЛИ ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное")
					ИЛИ ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств")
					ИЛИ ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
					ИЛИ ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
					ИЛИ ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер"))
					И ОтразитьСуммовыеИКурсовыеРазницыВРегистрахНДС
				Тогда
					ПровестиПлатежныйДокументПоРегистрамНДС(СтрокаДокумента.Ссылка);
					
				ИначеЕсли ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
					
					ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
					
					ОчиститьДвиженияРегистровНДС(ДокументОбъект, СтрокаДокумента.Ссылка);
					
					СтруктураШапкиДокумента = Новый Структура;
					Заголовок = "";
					ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
										
					УчетНДСФормированиеДвижений.ПровестиКорректировкуПоступленияПоРегистрамНДС(СтруктураШапкиДокумента, СтрокаДокумента.Ссылка);
					
				ИначеЕсли ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					
					ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
					
					ОчиститьДвиженияРегистровНДС(ДокументОбъект, СтрокаДокумента.Ссылка);
					
					СтруктураШапкиДокумента = Новый Структура;
					Заголовок = "";
					ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);

					УчетНДСФормированиеДвижений.ПровестиКорректировкуРеализацииПоРегистрамНДС(СтруктураШапкиДокумента, СтрокаДокумента.Ссылка);
					
				Иначе
					
					Если ПроводитьДокументыПоОперативнымРегистрам Тогда
						ДокументОбработан = ПровестиНеПлатежныйДокументПоРегистрамНДС(СтрокаДокумента.Ссылка, СтрокаДокумента.РасчетыВУсловныхЕдиницах);
						Если НЕ ДокументОбработан И ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					ИспользуетсяРасширеннаяАналитикаУчета = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтрокаДокумента.Дата);
					
					//При реализации по ордеру помимо значения "СписаниеПартий" нужно учитывать значение константы СписыватьПартииРасходнымОрдером
					//и прмененение РАУЗ.
					//Применение РАУЗ соотвествует значению СписыватьПартииРасходнымОрдером = Ложь.
					Если ТипЗнч(СтрокаДокумента.Ссылка) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда
						ВремСписыватьПартииРасходнымОрдером = СписыватьПартииРасходнымОрдером ИЛИ СтрокаДокумента.Ссылка.ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику;
						СписаниеПартий = СтрокаДокумента.СписаниеПартий И ВремСписыватьПартииРасходнымОрдером И НЕ ИспользуетсяРасширеннаяАналитикаУчета;
					Иначе
						СписаниеПартий = СтрокаДокумента.СписаниеПартий;
					КонецЕсли;
					
					// Обработать документ в партионном учете НДС - вызыв процедур списания партий
					Если ПроводитьДокументыПоРегистрамПартий И СписаниеПартий Тогда
						ТаблицаДокументовСписанияПартий[0].Регистратор = СтрокаДокумента.Ссылка;
						УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ДвижениеНДС(ТаблицаДокументовСписанияПартий, ИспользуетсяРасширеннаяАналитикаУчета);
					КонецЕсли;
					
					// Обработка особенностей расчетов в условных единицах по прочим видам документов
					Если ОтразитьСуммовыеИКурсовыеРазницыВРегистрахНДС И СтрокаДокумента.РасчетыВУсловныхЕдиницах Тогда
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ *
							|ИЗ
							|	РегистрСведений.РасчетыПоПриобретениюОрганизации КАК Расчеты
							|ГДЕ
							|	Расчеты.Регистратор = &Ссылка
							|ИТОГИ ПО
							|	Регистратор";	
						
						Запрос.УстановитьПараметр("Ссылка", СтрокаДокумента.Ссылка);
						
						Результат = Запрос.Выполнить();
						Если НЕ Результат.Пустой() Тогда
							ДанныеДокумента = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							ОтразитьКорректировкиПоРасчетамВУЕпоРегистрамНДС(СтрокаДокумента.Ссылка, ДанныеДокумента.Строки[0].Строки,ДанныеДокумента.Колонки);
						
						КонецЕсли; 
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ *
							|ИЗ
							|	РегистрСведений.РасчетыПоРеализацииОрганизации КАК Расчеты
							|ГДЕ
							|	Расчеты.Регистратор = &Ссылка
							|ИТОГИ ПО
							|	Регистратор";	
						
						Запрос.УстановитьПараметр("Ссылка", СтрокаДокумента.Ссылка);
						
						Результат = Запрос.Выполнить();
						Если НЕ Результат.Пустой() Тогда
							ДанныеДокумента = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							ОтразитьКорректировкиПоРасчетамВУЕпоРегистрамНДС(СтрокаДокумента.Ссылка, ДанныеДокумента.Строки[0].Строки,ДанныеДокумента.Колонки);
						
						КонецЕсли; 
					КонецЕсли;

				КонецЕсли;
				
				#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
			КонецЦикла; 
		
			ДокументСсылка = СтрокаДокумента.Ссылка;
			ДатаДокумента  = СтрокаДокумента.Дата;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПровестиДокументы()

// Возвращает список документов, которые нужно проводить по регистрам НДС.
//
Функция ПолучитьТаблицуДокументов(ДатаНачала, СсылкаНач, ДатаКонца, БылПоследнийДокумент, МассивОрганизаций)
	
	Если СсылкаНач = Неопределено Тогда
		МоментНач = Новый МоментВремени(ДатаНачала);
	Иначе
		МоментНач = Новый МоментВремени(ДатаНачала, СсылкаНач);
	КонецЕсли;
	
	//Получим массив организаций, для которых установлено начисление НДС по отгрузке 
	//	для проведения по регистрам НДС документа Реализация отгруженных товаров
	МассивОрганизацийНачислениеНДСПоОтгрузке = новый Массив;
	ЗапросОрганизации = новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ Организация
	|ИЗ РегистрСведений.УчетнаяПолитикаОрганизаций
	|ГДЕ Организация в (&МассивОрганизаций) И НачислятьНДСПоОтгрузке";
	Если ЗначениеЗаполнено(ДатаКонца) Тогда
		ТекстЗапроса = ТекстЗапроса + " И Период<=&ДатаКон";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ТекстЗапроса = ТекстЗапроса + " И Период>=&ДатаНач";
		//доп запрос - добавление среза на начало периода
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ Организация
		|ИЗ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&ДатаНач,Организация в (&МассивОрганизаций))
		|ГДЕ НачислятьНДСПоОтгрузке";
	КонецЕсли;
    ЗапросОрганизации.Текст = ТекстЗапроса;
	ЗапросОрганизации.УстановитьПараметр("ДатаНач",ДатаНачала);
	ЗапросОрганизации.УстановитьПараметр("ДатаКон",ДатаКонца);
    ЗапросОрганизации.УстановитьПараметр("МассивОрганизаций",МассивОрганизаций);
    ВыборкаОрганизации = ЗапросОрганизации.Выполнить().Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
		МассивОрганизацийНачислениеНДСПоОтгрузке.Добавить(ВыборкаОрганизации.организация);
	КонецЦикла;
	
	ТекстНачалоПакета = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписанныеТовары.Организация КАК Организация,
		|	НАЧАЛОПЕРИОДА(СписанныеТовары.Период, МЕСЯЦ) КАК МесяцОбработки
		|ПОМЕСТИТЬ МесяцаПроведения
		|ИЗ
		|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
		|ГДЕ
		|	СписанныеТовары.Период >= &ДатаПоследнего
		|	И СписанныеТовары.Период <= &ДатаКон
		|	И СписанныеТовары.Организация В(&МассивОрганизаций)
		|	И СписанныеТовары.МоментВремени > &МоментНач
		|	И СписанныеТовары.ОтражатьВБухгалтерскомУчете
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцОбработки,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(УчетнаяПолитикаОрганизаций.Период) КАК Период,
		|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
		|	МесяцаПроведения.МесяцОбработки
		|ПОМЕСТИТЬ ПериодыУП
		|ИЗ
		|	МесяцаПроведения КАК МесяцаПроведения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
		|		ПО МесяцаПроведения.Организация = УчетнаяПолитикаОрганизаций.Организация
		|			И МесяцаПроведения.МесяцОбработки >= УчетнаяПолитикаОрганизаций.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	УчетнаяПолитикаОрганизаций.Организация,
		|	МесяцаПроведения.МесяцОбработки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетнаяПолитикаОрганизаций.СложныйУчетНДС,
		|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
		|	ПериодыУП.МесяцОбработки КАК МесяцОбработки
		|ПОМЕСТИТЬ ЗначенияУП
		|ИЗ
		|	ПериодыУП КАК ПериодыУП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
		|		ПО ПериодыУП.Период = УчетнаяПолитикаОрганизаций.Период
		|			И ПериодыУП.Организация = УчетнаяПолитикаОрганизаций.Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцОбработки,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Источник.Регистратор КАК Ссылка,
		|	Источник.Период КАК Дата,
		|	Источник.МоментВремени КАК МоментВремени,
		|	ИСТИНА КАК СписаниеПартий,
		|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах
		|ИЗ
		|	РегистрСведений.СписанныеТовары КАК Источник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияУП КАК ЗначенияУП
		|		ПО Источник.Организация = ЗначенияУП.Организация
		|			И (НАЧАЛОПЕРИОДА(Источник.Период, МЕСЯЦ) = ЗначенияУП.МесяцОбработки)
		|ГДЕ
		|	Источник.Период >= &ДатаПоследнего
		|	И Источник.Период <= &ДатаКон
		|	И Источник.Организация В(&МассивОрганизаций)
		|	И Источник.МоментВремени > &МоментНач
		|	И Источник.ОтражатьВБухгалтерскомУчете
		|	И (Источник.НеСписывать = ЛОЖЬ
		|			ИЛИ Источник.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И (Источник.Период >= &НачалоПримененияРасширеннойАналитики
		|					ИЛИ НЕ &СписыватьПартииРасходнымОрдером И Источник.Период < &НачалоПримененияРасширеннойАналитики)
		|			ИЛИ Источник.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
		|				И (Источник.Период >= &НачалоПримененияРасширеннойАналитики))
		//Если не применяется РАУЗ и установлен флаг "Списывать партии расходным ордером"
		//Признак НеСписывать у движений документа реализации = ИСТИНА, списание не выполняется (списание выполняется расходным ордером)
		|	И (ЕСТЬNULL(ЗначенияУП.СложныйУчетНДС, ЛОЖЬ)
		//Обрабатываем списание партий только при наличии сложного учета НДС или особых ситуаций
		|			ИЛИ Источник.Период < &НачалоПримененияРасширеннойАналитики 
		//Если движения формируются механизмами партионного учета, важно правильно заполнить признкак СписаниеПартий
		//на тот случай, если документ попадет в выборку по другим условиям (не для списания партий)
		|			ИЛИ Источник.СчетУчетаБУ В (&СчетаУчетаОС) 
		//По ОС всегда ведется учет по пратиям запасов, независимо от учетной политики
		|			ИЛИ Источник.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику ИЛИ Источник.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщикуИзНТТ
		//Возврат товаров поставщику требует специализированной обработки
		|			ИЛИ Источник.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах)
		//Отчет комиссионера о продажах обрабатывается дополнительно для НДС налогового агента (комиссионера - нерезидента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Источник.Регистратор,
		|	Источник.Период,
		|	Источник.МоментВремени,
		|	ЛОЖЬ,
		|	Источник.РасчетыВУсловныхЕдиницах
		|ИЗ
		|	РегистрСведений.РасчетыПоПриобретениюОрганизации КАК Источник
		|ГДЕ
		|	Источник.Период >= &ДатаПоследнего
		|	И Источник.Период <= &ДатаКон
		|	И Источник.Организация В(&МассивОрганизаций)
		|	И Источник.МоментВремени > &МоментНач
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Источник.Регистратор,
		|	Источник.Период,
		|	Источник.МоментВремени,
		|	ЛОЖЬ,
		|	Источник.РасчетыВУсловныхЕдиницах
		|ИЗ
		|	РегистрСведений.РасчетыПоРеализацииОрганизации КАК Источник
		|ГДЕ
		|	Источник.Период >= &ДатаПоследнего
		|	И Источник.Период <= &ДатаКон
		|	И Источник.Организация В(&МассивОрганизаций)
		|	И Источник.МоментВремени > &МоментНач
		|
		//Добавим документы корректировки поступления и реализации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Источник.Ссылка,
		|	Источник.Дата,
		|	Источник.МоментВремени,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.КорректировкаПоступления КАК Источник
		|ГДЕ
		|	Источник.Дата >= &ДатаПоследнего
		|	И Источник.Дата <= &ДатаКон
		|	И Источник.Организация В(&МассивОрганизаций)
		|	И Источник.МоментВремени > &МоментНач
		|	И Источник.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Источник.Ссылка,
		|	Источник.Дата,
		|	Источник.МоментВремени,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.КорректировкаРеализации КАК Источник
		|ГДЕ
		|	Источник.Дата >= &ДатаПоследнего
		|	И Источник.Дата <= &ДатаКон
		|	И Источник.Организация В(&МассивОрганизаций)
		|	И Источник.МоментВремени > &МоментНач
		|	И Источник.Проведен";
		
	ДополнительныйЗапрос = "
		|ВЫБРАТЬ
		|	Источник.Ссылка,
		|	Источник.Дата,
		|	Источник.МоментВремени,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.%ИмяДокумента% КАК Источник
		|ГДЕ
		|	Источник.Дата >= &ДатаПоследнего
		|	И Источник.Дата <= &ДатаКон
		|	И Источник.Организация В(&МассивОрганизаций)
		|	И Источник.МоментВремени > &МоментНач
		|	И Источник.Проведен";

	Если ПроводитьДокументыПоОперативнымРегистрам ИЛИ ОтразитьСуммовыеИКурсовыеРазницыВРегистрахНДС Тогда
		
		// Добить документами по типам
		ДополнительныеДокументы = Новый Структура("
			| АвансовыйОтчет
			|,АктОбОказанииПроизводственныхУслуг
			|,ВозвратМатериаловИзЭксплуатации
			|,ВосстановлениеНДС
			|,ГТДИмпорт
			|,МодернизацияОС
			|,ОприходованиеТоваров
			|,ОтчетКомиссионераОПродажах
			|,ОтчетКомитентуОПродажах
			|,ОтчетОРозничныхПродажах
			|,ОтчетПроизводстваЗаСмену
			|,ПередачаНМА
			|,ПередачаОС
			|,ПолучениеУслугПоПереработке
			|,ПоступлениеДопРасходов
			|,ПоступлениеНМА
			|,ПоступлениеТоваровИзПереработки
			|,ПоступлениеТоваровУслуг
			|,ПоступлениеТоваровУслугВНТТ
			|,ПринятиеКУчетуОС
			|,РеализацияТоваровУслуг
			|,РеализацияУслугПоПереработке
			|,СчетФактураВыданный
			|,СчетФактураПолученный
			|,ПеремещениеТоваров
			|");
		Если МассивОрганизацийНачислениеНДСПоОтгрузке.Количество() > 0 Тогда
			ДополнительныеДокументы.Вставить("РеализацияОтгруженныхТоваров");
		КонецЕсли;
		
		Для Каждого ВидДокументов Из ДополнительныеДокументы Цикл
			
			Если Метаданные.Документы.Найти(ВидДокументов.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДопЗапрос = СтрЗаменить(ДополнительныйЗапрос, "%ИмяДокумента%", ВидДокументов.Ключ);
			Если ВидДокументов.Ключ = "РеализацияОтгруженныхТоваров" Тогда
				ДопЗапрос = СтрЗаменить(ДопЗапрос, "&МассивОрганизаций", "&МассивОрганизацийНачислениеНДСПоОтгрузке");
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса+"
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|" + ДопЗапрос;

			Если ВидДокументов.Ключ = "СчетФактураВыданный" Тогда
				// Обработкой формируются движения только исправленных счетов-фактур на аванс 
				// и исправленных счетов-фактур налогового агента
				ТекстЗапроса = ТекстЗапроса + " И Источник.Исправление 
				|	И (Источник.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс) 
				|		ИЛИ Источник.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент)) 
				|	И НЕ Источник.СформированПриВводеНачальныхОстатковНДС";
			ИначеЕсли ВидДокументов.Ключ = "СчетФактураПолученный" Тогда
				// Обработкой формируются движения только исправленных счетов-фактур на аванс 
				ТекстЗапроса = ТекстЗапроса + " И Источник.Исправление 
				|	И Источник.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс) 
				|	И НЕ Источник.СформированПриВводеНачальныхОстатковНДС";
			ИначеЕсли ВидДокументов.Ключ = "РеализацияТоваровУслуг" Тогда
				ТекстЗапроса = ТекстЗапроса + " И (Источник.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) 
				|	ИЛИ Источник.Организация В (&МассивОрганизацийНачислениеНДСПоОтгрузке))";
			ИначеЕсли ВидДокументов.Ключ = "РеализацияОтгруженныхТоваров" Тогда
				ТекстЗапроса = ТекстЗапроса + " И Источник.Организация НЕ В (&МассивОрганизацийНачислениеНДСПоОтгрузке)";
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
		
	ТекстЗапроса = ТекстНачалоПакета + 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	Источник.Ссылка,
		|	Источник.Дата,
		|	Источник.МоментВремени,
		|	МАКСИМУМ(Источник.СписаниеПартий) КАК СписаниеПартий,
		|	МАКСИМУМ(Источник.РасчетыВУсловныхЕдиницах) КАК РасчетыВУсловныхЕдиницах
		|ИЗ
		|	("+ТекстЗапроса+") КАК Источник
		|
		|СГРУППИРОВАТЬ ПО
		|	Источник.Ссылка,
		|	Источник.Дата,
		|	Источник.МоментВремени
		|
		|ИМЕЮЩИЕ
		|	(МАКСИМУМ(Источник.СписаниеПартий) = ИСТИНА
		|		ИЛИ &ПроводитьДокументыПоОперативнымРегистрам
		|		ИЛИ &ОтразитьСуммовыеИКурсовыеРазницыВРегистрахНДС)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	МоментВремени";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивОрганизаций",МассивОрганизаций);
    Запрос.УстановитьПараметр("МассивОрганизацийНачислениеНДСПоОтгрузке",МассивОрганизацийНачислениеНДСПоОтгрузке);
	Запрос.УстановитьПараметр("СчетаУчетаОС",УчетНДС.ОпределитьСчетаУчетаОСиНМА("ОС"));
    Запрос.УстановитьПараметр("ПроводитьДокументыПоОперативнымРегистрам", ПроводитьДокументыПоОперативнымРегистрам);
    Запрос.УстановитьПараметр("ОтразитьСуммовыеИКурсовыеРазницыВРегистрахНДС", ОтразитьСуммовыеИКурсовыеРазницыВРегистрахНДС);
	Запрос.УстановитьПараметр("НачалоПримененияРасширеннойАналитики", 
								?(глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат"), 
									НачалоДня(глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат")),
									ДатаКонца));
	Запрос.УстановитьПараметр("СписыватьПартииРасходнымОрдером", Константы.СписыватьПартииРасходнымОрдером.Получить());

	Если БылПоследнийДокумент Тогда
		Запрос.УстановитьПараметр("ДатаПоследнего",   ДатаНачала);
	Иначе
		Запрос.УстановитьПараметр("ДатаПоследнего",   Дата("01.01.0001 00:00:00"));
		// Документ, на котором стоит граница последовательности может быть не проведен по партиям
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Источник.МоментВремени > &МоментНач", "Источник.МоментВремени >= &МоментНач");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МоментНач", МоментНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонца);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПлатежныхДокументов()

Функция СформироватьТаблицуОплаты(ДокументСсылка, ТаблицаОплат, ТаблицаСуммовыхРазниц, РасчетыПоПриобретению = Истина)

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегСведений.Контрагент,
	|	ДанныеРегСведений.ДоговорКонтрагента,
	|	ДанныеРегСведений.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеРегСведений.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ДанныеРегСведений.Сделка,
	|	ВЫБОР
	|		КОГДА ДанныеРегСведений.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеРегСведений.СчетФактура В (&ПустыеСсылки)
	|						ТОГДА НЕОПРЕДЕЛЕНО
	|					ИНАЧЕ ДанныеРегСведений.СчетФактура
	|				КОНЕЦ
	|		КОГДА (НЕ ЕСТЬNULL(ДанныеРегНакопления.СчетФактура, НЕОПРЕДЕЛЕНО) = &ДокументСсылка)
	|			ТОГДА ЕСТЬNULL(ДанныеРегНакопления.СчетФактура, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ДанныеРегСведений.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|					ТОГДА ВЫБОР
	|							КОГДА ДанныеРегСведений.СчетФактура В (&ПустыеСсылки)
	|								ТОГДА НЕОПРЕДЕЛЕНО
	|							ИНАЧЕ ДанныеРегСведений.СчетФактура
	|						КОНЕЦ
	|				КОГДА (НЕ ЕСТЬNULL(ДанныеРегНакопления.СчетФактура, НЕОПРЕДЕЛЕНО) = &ДокументСсылка)
	|					ТОГДА ЕСТЬNULL(ДанныеРегНакопления.СчетФактура, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ = НЕОПРЕДЕЛЕНО
	|			ТОГДА ДанныеРегСведений.ДокументОплаты
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА ДанныеРегНакопления.ВалютнаяСумма ЕСТЬ НЕ NULL 
	|				И ДанныеРегСведений.ВалютнаяСумма <> 0
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеРегСведений.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|						ТОГДА ВЫРАЗИТЬ(ДанныеРегСведений.РублеваяСумма * ДанныеРегНакопления.ВалютнаяСумма / ДанныеРегСведений.ВалютнаяСумма КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ДанныеРегНакопления.РублеваяСумма - (ВЫРАЗИТЬ(ДанныеРегСведений.РублеваяСумма * ДанныеРегНакопления.ВалютнаяСумма / ДанныеРегСведений.ВалютнаяСумма КАК ЧИСЛО(15, 2)) - ДанныеРегНакопления.РублеваяСумма)
	|				КОНЕЦ
	|		ИНАЧЕ ДанныеРегСведений.РублеваяСумма
	|	КОНЕЦ КАК РублеваяСумма,
	|	ВЫБОР
	|		КОГДА ДанныеРегСведений.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|			ТОГДА ДанныеРегСведений.ВалютнаяСумма
	|		КОГДА ДанныеРегНакопления.ВалютнаяСумма ЕСТЬ НЕ NULL 
	|			ТОГДА ДанныеРегНакопления.ВалютнаяСумма
	|		ИНАЧЕ ДанныеРегСведений.ВалютнаяСумма
	|	КОНЕЦ КАК ВалютнаяСумма,
	|	ВЫБОР
	|		КОГДА ДанныеРегНакопления.РублеваяСумма ЕСТЬ NULL 
	|				ИЛИ ДанныеРегСведений.ВалютнаяСумма = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ВЫРАЗИТЬ(ДанныеРегСведений.РублеваяСумма * ДанныеРегНакопления.ВалютнаяСумма / ДанныеРегСведений.ВалютнаяСумма КАК ЧИСЛО(15, 2))) - ДанныеРегНакопления.РублеваяСумма
	|	КОНЕЦ КАК КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ДанныеРегСведений.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|					ТОГДА ВЫБОР
	|							КОГДА ДанныеРегСведений.СчетФактура В (&ПустыеСсылки)
	|								ТОГДА НЕОПРЕДЕЛЕНО
	|							ИНАЧЕ ДанныеРегСведений.СчетФактура
	|						КОНЕЦ
	|				КОГДА (НЕ ЕСТЬNULL(ДанныеРегНакопления.СчетФактура, НЕОПРЕДЕЛЕНО) = &ДокументСсылка)
	|					ТОГДА ЕСТЬNULL(ДанныеРегНакопления.СчетФактура, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДанныеРегСведений.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|			ТОГДА ИСТИНА
	|		КОГДА ДанныеРегНакопления.ДоговорКонтрагента ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РезультатРаспределения,
	|	ВЫБОР
	|		КОГДА (ДанныеРегСведений.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|				ИЛИ ДанныеРегСведений.ДоговорКонтрагента.УчетАгентскогоНДС
	|					И ДанныеРегСведений.ДоговорКонтрагента.НалоговыйАгентПоОплате)
	|				И ВЫБОР
	|					КОГДА ДанныеРегНакопления.РублеваяСумма ЕСТЬ NULL 
	|							ИЛИ ДанныеРегСведений.ВалютнаяСумма = 0
	|						ТОГДА 0
	|					ИНАЧЕ (ВЫРАЗИТЬ(ДанныеРегСведений.РублеваяСумма * ДанныеРегНакопления.ВалютнаяСумма / ДанныеРегСведений.ВалютнаяСумма КАК ЧИСЛО(15, 2))) - ДанныеРегНакопления.РублеваяСумма
	|				КОНЕЦ <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьСуммоваяРазница,
	|	ВЫБОР
	|		КОГДА ДанныеРегСведений.ДоговорКонтрагента.УчетАгентскогоНДС
	|				И ДанныеРегСведений.ДоговорКонтрагента.НалоговыйАгентПоОплате
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьНалоговыйАгент
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегСведений.Документ КАК ДокументОплаты,
	|		РегСведений.Контрагент КАК Контрагент,
	|		РегСведений.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		РегСведений.Сделка КАК Сделка,
	|		РегСведений.ДокументРасчетов КАК СчетФактура,
	|		СУММА(РегСведений.СуммаСНДС) КАК РублеваяСумма,
	|		СУММА(РегСведений.СуммаВзаиморасчетов) КАК ВалютнаяСумма
	|	ИЗ
	|		РегистрСведений.РасчетыПоПриобретениюОрганизации КАК РегСведений
	|	ГДЕ
	|		РегСведений.Документ = &ДокументСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РегСведений.Документ,
	|		РегСведений.Контрагент,
	|		РегСведений.ДоговорКонтрагента,
	|		РегСведений.Сделка,
	|		РегСведений.ДокументРасчетов) КАК ДанныеРегСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РегНакопления.Контрагент КАК Контрагент,
	|			РегНакопления.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|			РегНакопления.Сделка КАК Сделка,
	|			РегНакопления.Документ КАК СчетФактура,
	|			СУММА(РегНакопления.СуммаРег) КАК РублеваяСумма,
	|			СУММА(РегНакопления.СуммаВзаиморасчетов) КАК ВалютнаяСумма
	|		ИЗ
	|			РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации КАК РегНакопления
	|		ГДЕ
	|			РегНакопления.Регистратор = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегНакопления.Контрагент,
	|			РегНакопления.ДоговорКонтрагента,
	|			РегНакопления.Сделка,
	|			РегНакопления.Документ) КАК ДанныеРегНакопления
	|		ПО ДанныеРегСведений.Контрагент = ДанныеРегНакопления.Контрагент
	|			И ДанныеРегСведений.ДоговорКонтрагента = ДанныеРегНакопления.ДоговорКонтрагента
	|			И ДанныеРегСведений.Сделка = ДанныеРегНакопления.Сделка
	|			И (ВЫБОР
	|				КОГДА ДанныеРегСведений.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|					ТОГДА ДанныеРегСведений.СчетФактура = ДанныеРегНакопления.СчетФактура
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РезультатРаспределения УБЫВ";
	
	Если НЕ РасчетыПоПриобретению Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыПоПриобретению", "РасчетыПоРеализации");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустыеСсылки", ПустыеСсылкиДокументовРасчетов[РасчетыПоПриобретению]);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаОплат = Результат.Выгрузить();
	
	ТаблицаСуммовыхРазниц = ТаблицаОплат.Скопировать(Новый Структура("ЕстьСуммоваяРазница", Истина), 
		"Контрагент, ДоговорКонтрагента, Сделка, СчетФактура, ВалютаВзаиморасчетов, КурсоваяРазница"
		+ ?(РасчетыПоПриобретению, ", ЕстьНалоговыйАгент", ""));
		
	ТаблицаОплат.Колонки.Удалить("ЕстьСуммоваяРазница");
	ТаблицаОплат.Колонки.Удалить("ЕстьНалоговыйАгент");
	
	ТаблицаСуммовыхРазниц.Колонки.СчетФактура.Имя     = "Документ";
	ТаблицаСуммовыхРазниц.Колонки.КурсоваяРазница.Имя = "СуммоваяРазница";
	ТаблицаСуммовыхРазниц.Колонки.Добавить("Регистратор");
	ТаблицаСуммовыхРазниц.ЗагрузитьКолонку(ТаблицаСуммовыхРазниц.ВыгрузитьКолонку("Документ"), "Регистратор");
	
	Возврат Истина;
	
КонецФункции

// Процедура очищает движения документа по регистрам подсистемы НДС.
//
Процедура ОчиститьДвиженияРегистровНДС(ДокументОбъект, ДокументСсылка, ТолькоОперативныеДвижения = Ложь, РасчетыВУсловныхЕдиницах = Истина)
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			Инд = НаборЗаписей.Количество();
			Пока Инд > 0 Цикл
				Инд = Инд - 1;
				Удалять = НаборЗаписей[Инд].ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПроведениеДокументовПоНДС;
				Если Удалять Тогда
					НаборЗаписей.Удалить(Инд);
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
		КонецЕсли;		
	КонецЕсли;
	
	НеУдлятьКорректировкуВалютныхРасчетов = (НЕ ОтразитьСуммовыеИКурсовыеРазницыВРегистрахНДС) ИЛИ (НЕ РасчетыВУсловныхЕдиницах);
	
	Для Каждого Движение Из ДокументОбъект.Движения Цикл
		
		Если ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСВключенныйВСтоимость")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСКосвенныеРасходы")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСНачисленный")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСНезавершенноеПроизводство")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСПартииТоваров")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСПредъявленный")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСПредъявленныйРеализация0")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСРеализация0")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСсАвансов")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСЗаписиКнигиПокупок")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСЗаписиКнигиПродаж")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСпоОСиНМА")
		 ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСУчетРаспределенныхОплатПоставщикам")
		 Тогда
		 	текМетаданные = Движение.Метаданные();
		 	НаборЗаписей = РегистрыНакопления[текМетаданные.Имя].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			Если НаличиеРеквизитаСписаниеПартийВРегистре[ТипЗнч(Движение)] = Неопределено Тогда
				НаличиеРеквизитаСписаниеПартийВРегистре.Вставить(ТипЗнч(Движение), Не текМетаданные.Реквизиты.Найти("СписаниеПартий") = Неопределено);
			КонецЕсли;
			Если НаличиеРеквизитаВидРегламентнойОперацииВРегистре[ТипЗнч(Движение)] = Неопределено Тогда
				НаличиеРеквизитаВидРегламентнойОперацииВРегистре.Вставить(ТипЗнч(Движение), Не текМетаданные.Реквизиты.Найти("ВидРегламентнойОперации") = Неопределено);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				Если ТолькоОперативныеДвижения И НаличиеРеквизитаСписаниеПартийВРегистре[ТипЗнч(Движение)] Тогда
					// Если в регистре есть реквизит "СписаниеПартий", строки списания партий будут затерты партионным
					// учетом при вызове соотвествущей процедуры
					Инд = НаборЗаписей.Количество();
					Пока Инд > 0 Цикл
						Инд = Инд - 1;
						КорректировкаВалютныхРасчетов = НаличиеРеквизитаВидРегламентнойОперацииВРегистре[ТипЗнч(Движение)] 
														И НаборЗаписей[Инд].ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах
														И НеУдлятьКорректировкуВалютныхРасчетов;
														
						Удалять = (Не НаборЗаписей[Инд].СписаниеПартий) И (НЕ КорректировкаВалютныхРасчетов);
						Если Удалять Тогда
							НаборЗаписей.Удалить(Инд);
						КонецЕсли;
					КонецЦикла;
					НаборЗаписей.Записать(Истина);
				ИначеЕсли НаличиеРеквизитаВидРегламентнойОперацииВРегистре[ТипЗнч(Движение)] 
					И (НеУдлятьКорректировкуВалютныхРасчетов) Тогда
					// Если в регистре есть реквизит "ВидРегламентнойОперации", строки списания партий будут затерты партионным
					// учетом при вызове соотвествущей процедуры
					Инд = НаборЗаписей.Количество();
					Пока Инд > 0 Цикл
						Инд = Инд - 1;
						Удалять = НЕ НаборЗаписей[Инд].ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах;
						Если Удалять Тогда
							НаборЗаписей.Удалить(Инд);
						КонецЕсли;
					КонецЦикла;
					НаборЗаписей.Записать(Истина);
				Иначе
					НаборЗаписей.Очистить();
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьДвиженияРегистровНДС()

// Процедура перепроводит документы по регистрам подсистемы НДС.
//
Функция ПровестиНеПлатежныйДокументПоРегистрамНДС(ДокументВыборка, РасчетыВУсловныхЕдиницах)
	
	Перем Заголовок, СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли;
	Перем ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства, ТаблицаПоДенежнымСредствам;
	
	Если ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		// Некоторые документы не имеют механизма оперативного проведения
		Возврат Ложь;
	КонецЕсли; 
	
	#Если Клиент Тогда
		Состояние("Проведение по НДС документа:" + Строка(ДокументВыборка));
	#КонецЕсли
	
	ДокументОбъект = ДокументВыборка.ПолучитьОбъект();
	Отказ = Ложь;
	
	ОчиститьДвиженияРегистровНДС(ДокументОбъект, ДокументВыборка, СравнитьТипДокумента(ДокументВыборка, "ОтчетПроизводстваЗаСмену"), РасчетыВУсловныхЕдиницах);
	
	Если ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.АвансовыйОтчет") тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ);
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Неопределено);
		
		ТаблицыДляПроведенияПоНДС = Новый Структура();
		ТаблицыДляПроведенияПоНДС.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		ТаблицыДляПроведенияПоНДС.Вставить("ТаблицаПоПрочее",  ТаблицаПоУслугам);

		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДляПроведенияПоНДС, Отказ);
		
		ПровестиПлатежныйДокументПоРегистрамНДС(ДокументВыборка, Ложь);

	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") тогда
		
		Попытка
			ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, , Отказ);
		Исключение
			Отказ = Истина;
		КонецПопытки;
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам);
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ВосстановлениеНДС") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, Отказ);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварам, ТаблицаПоУслугам);
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокументаВалюта, ТаблицаПоТоварам, Отказ);
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокументаРубли, ТаблицаПоУслугам, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.МодернизацияОС") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено, Отказ, Заголовок);
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок, Ложь);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, , Отказ);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам);
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДСПоступление(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоДенежнымСредствам, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено);

		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ);
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		
		СтруктураТаблицыВыручки = Новый Структура("НомерСтроки, Номенклатура, Услуга, , ВидЦенности, Ценность, Партия, СчетУчетаНДСПоРеализации,СчетУчетаБУ, СчетДоходовБУ, СубконтоБУ, 
													|СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал, ПринадлежностьНоменклатуры, Комиссионный, Комитент, ДоговорКомиссии, 
													|СчетРасчетовПоАвансамСКомитентом, СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, СуммаСписания, Количество");

		ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам, СтруктураТаблицыВыручки, , Истина);
		ТаблицаВыручки.ЗаполнитьЗначения(Ложь, "Комиссионный");
		ТаблицаВыручки.ЗаполнитьЗначения(0,    "Количество");

		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ);
		
	ИначеЕсли СравнитьТипДокумента(ДокументВыборка, "ОтчетПроизводстваЗаСмену") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, Неопределено, Неопределено, ТаблицаПоТоварам);
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ПередачаНМА") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ПередачаОС") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, , Отказ);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);
		
		ТаблицыДокумента = Новый Структура;
		ТаблицыДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		ТаблицыДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);

		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, , Отказ);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию, Отказ, Заголовок);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		ТаблицыДокумента.Вставить("ТаблицаПоОборудованию", ТаблицаПоОборудованию);
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, , Отказ);
		Если Отказ Тогда
		   Возврат Ложь;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
			И СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		   
			ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства, Неопределено, Неопределено); //m.ionov@a-prof.ru 24/03/2014 - не хватало передачи таблицы по Таре

			ТаблицыДокумента = Новый Структура();
			ТаблицыДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			ТаблицыДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
			ТаблицыДокумента.Вставить("ТаблицаПоОборудованию", ТаблицаПоОборудованию);
			ТаблицыДокумента.Вставить("ТаблицаПоОбъектамСтроительства", ТаблицаПоОбъектамСтроительства);

			ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, , Отказ);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			
			ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Неопределено);
			ДокументОбъект.ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);

			ТаблицыДокумента = Новый Структура();
			ТаблицыДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			ТаблицыДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);

			ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок, Ложь);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, , Отказ);
		
		УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		Иначе
			СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке", УчетнаяПолитикаРегл.НачислятьНДСПоОтгрузке);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
        
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			И (НЕ СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности ИЛИ СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке) Тогда
			
			ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Неопределено);
			
			СтруктураТаблицыВыручки = Новый Структура("НомерСтроки, Номенклатура, ВидЦенности, Ценность, Партия, СчетУчетаНДСПоРеализации,СчетУчетаБУ, СчетДоходовБУ, СубконтоБУ, 
			|СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал,ПринадлежностьНоменклатуры,Комиссионный,Комитент,ДоговорКомиссии,СчетРасчетовПоАвансамСКомитентом,СчетРасчетовСКомитентом,ВалютаРасчетовСКомитентом,СуммаСписания, Количество");
			
			ВыручкаПоТоварам = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам, СтруктураТаблицыВыручки, , Истина);
			ВыручкаПоТоварам.ЗаполнитьЗначения(Ложь, "Комиссионный");		
			
			ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ВыручкаПоТоварам, Отказ);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		
		ДокументОбъект = ДокументВыборка.ПолучитьОбъект();
		Отказ = Ложь;
		Попытка
			ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,,Отказ);
		Исключение
			Отказ = Истина;
		КонецПопытки;
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Неопределено);

		СтруктураТаблицыВыручки = Новый Структура("НомерСтроки, Номенклатура, ВидЦенности, Ценность, Партия, СчетУчетаНДСПоРеализации,СчетУчетаБУ, СчетДоходовБУ, СубконтоБУ, 
												  |СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал, Комиссионный, Комитент, ДоговорКомиссии, 
												  |СчетРасчетовПоАвансамСКомитентом, СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, СуммаСписания, Количество");

		//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
		
		ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам,СтруктураТаблицыВыручки, , Истина);
		ТаблицаВыручки.ЗаполнитьЗначения(Ложь, "Комиссионный");
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаВыручки, Отказ);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		ДокументОбъект.ПодготовитьТаблицыДокумента(Неопределено, ТаблицаПоУслугам);
		
		УчетНДСФормированиеДвижений.ПровестиИсправленныйВыданныйСчетФактуру(СтруктураШапкиДокумента, ТаблицаПоУслугам);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Ложь);
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам);
		
		УчетНДСФормированиеДвижений.ПровестиИсправленныйПолученныйСчетФактуру(СтруктураШапкиДокумента, ТаблицаПоУслугам);
		
	ИначеЕсли ТипЗнч(ДокументВыборка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		
		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,,Отказ);
		УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		Иначе
			СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке", УчетнаяПолитикаРегл.НачислятьНДСПоОтгрузке);
		КонецЕсли;
		Если Отказ Или СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
			
		СтруктураТаблицыВыручки = Новый структура("НомерСтроки, Номенклатура, ВидЦенности, Ценность, Партия, СчетУчетаНДСПоРеализации,СчетУчетаБУ, СчетДоходовБУ, СубконтоБУ, 
		|СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал,ПринадлежностьНоменклатуры,Комиссионный,Комитент, ДоговорКомиссии, СчетРасчетовПоАвансамСКомитентом, СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, СуммаСписания, Количество");
		
		ВыручкаПоТоварам = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам, СтруктураТаблицыВыручки, , Истина);
		ВыручкаПоТоварам.ЗаполнитьЗначения(Ложь, "Комиссионный");		
		
		ДокументОбъект.ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ВыручкаПоТоварам, Отказ);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПровестиДокументыПоРегистрамНДС()

// Процедура проводит платежный документ по регистрам подсистемы НДС.
//
Процедура ПровестиПлатежныйДокументПоРегистрамНДС(ДокументСсылка, ОчищатьДвижения = Истина)
	
	#Если Клиент Тогда
		Состояние("Проведение по НДС документа:" + Строка(ДокументСсылка));
	#КонецЕсли
	Объект = ДокументСсылка.ПолучитьОбъект();
		
	Если ОчищатьДвижения Тогда
		ОчиститьДвиженияРегистровНДС(Объект,ДокументСсылка);
	КонецЕсли; 
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ДокументСсылка);
	
	Если СтруктураШапкиДокумента.Свойство("ДатаОплаты") и ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) тогда
		СтруктураШапкиДокумента.Вставить("Период",?(СтруктураШапкиДокумента.Оплачено, УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(СтруктураШапкиДокумента.Дата,СтруктураШапкиДокумента.ДатаОплаты),СтруктураШапкиДокумента.Дата));
	Иначе
		СтруктураШапкиДокумента.Вставить("Период",СтруктураШапкиДокумента.Дата);
	Конецесли;

	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета",мВалютаРегламентированногоУчета);
		
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	НаправлениеДвижения = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента).Направление;
			
	Если СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет" Тогда
		ЭтоВозврат = Ложь;
	Иначе
		ЭтоВозврат = (БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента,СтруктураШапкиДокумента.ВидОперации).РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);
	КонецЕсли;
			
	ТаблицаОплат = Неопределено;
	ТаблицаСуммовыхРазниц = Неопределено;
	Если Не (НаправлениеДвижения = "Поступление") = ЭтоВозврат тогда 
		
		НаличиеДвиженийКРегистрации = СформироватьТаблицуОплаты(ДокументСсылка, ТаблицаОплат, ТаблицаСуммовыхРазниц, Ложь);
		Если НаличиеДвиженийКРегистрации Тогда
			Если Не ТаблицаСуммовыхРазниц = неопределено 
				И Не ТаблицаСуммовыхРазниц.Количество() =0
				И Не ЭтоВозврат
				Тогда
					УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Реализация(СтруктураШапкиДокумента, ТаблицаСуммовыхРазниц);
			КонецЕсли; 
			
			Если ТаблицаОплат <> Неопределено 
				И Не ТаблицаОплат.Количество() = 0 Тогда
				УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСРеализация0_КурсовыеРазницы(СтруктураШапкиДокумента, ТаблицаОплат, Ложь);
			КонецЕсли;
			
		КонецЕсли; 
		
	Иначе
		НаличиеДвиженийКРегистрации = СформироватьТаблицуОплаты(ДокументСсылка, ТаблицаОплат, ТаблицаСуммовыхРазниц, Истина);
		Если НаличиеДвиженийКРегистрации Тогда
			Если не ТаблицаСуммовыхРазниц = неопределено 
				и не ТаблицаСуммовыхРазниц.Количество() =0 
				и не ЭтоВозврат
				Тогда
					ТаблицаРазницУЕ = ТаблицаСуммовыхРазниц.Скопировать(Новый Структура("ЕстьНалоговыйАгент", Ложь));
					ТаблицаРазницНА = ТаблицаСуммовыхРазниц.Скопировать(Новый Структура("ЕстьНалоговыйАгент", Истина));
					Если ТаблицаРазницУЕ.Количество() > 0 Тогда
						УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураШапкиДокумента, ТаблицаРазницУЕ);
					КонецЕсли;
					Если ТаблицаРазницНА.Количество() > 0 Тогда
						УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураШапкиДокумента, ТаблицаРазницНА,,, Истина);
					КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ПровестиПлатежныйДокументПоРегистрамНДС()

// Процедура проводит приходный или расходный документ по регистрам подсистемы НДС.
//
Процедура ОтразитьКорректировкиПоРасчетамВУЕпоРегистрамНДС(ДокументСсылка, ТаблицаДокумента, Колонки)
	
	Перем ТаблицаРегистрации;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Возврат;
	КонецЕсли; 
	
	Отказ = Ложь;
	
	
	СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАвансаИзРегистраСведений(ТаблицаДокумента, Колонки);
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураПараметров.РасчетыВУсловныхЕдиницах Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ДокументСсылка);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ДокументСсылка);

	Для каждого Параметр Из СтруктураШапкиДокумента Цикл
		Если не СтруктураПараметров.Свойство(Параметр.Ключ) Тогда
			СтруктураПараметров.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЕсли; 
	КонецЦикла; 
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	#Если Клиент Тогда
		Состояние("Проведение по НДС документа:" + Строка(ДокументСсылка));
	#КонецЕсли
	
	Контрагент			= СтруктураПараметров.Контрагент;
	ДоговорКонтрагента 	= СтруктураПараметров.ДоговорКонтрагента;
	СчетОплаты			= СтруктураПараметров.СчетУчетаРасчетовСКонтрагентом;
	СчетАванса			= СтруктураПараметров.СчетУчетаРасчетовПоАвансам;
	ЭтоВозврат			= (СтруктураПараметров.РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат);
	ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	Сделка 				= СтруктураПараметров.Сделка;
	Если ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом 
		и НЕ ЗначениеЗаполнено(Сделка) тогда
		Сделка = Неопределено;
	КонецЕсли;
	Если ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		СделкаРасчетов	= ДокументСсылка;
	ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		  ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам тогда
		СделкаРасчетов	= ДокументСсылка;
	Иначе
		СделкаРасчетов	= Неопределено;
	КонецЕсли;
	
	ПокупкиПродажи = БухгалтерскийУчетРасчетовСКонтрагентами.ПроверкаРасчетыВУсловныхЕдиницах(СтруктураПараметров, ДоговорКонтрагента,СчетОплаты,СчетАванса, мВалютаРегламентированногоУчета,Отказ,Заголовок);
	Если ПокупкиПродажи=Ложь тогда
		Возврат;
	Иначе
		Покупки	= (ПокупкиПродажи.Покупки);
		Продажи	= (ПокупкиПродажи.Продажи);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ТаблицаРегистрации",ТаблицаРегистрации)= Истина тогда
		Если Не(ТипЗнч(ТаблицаРегистрации)=Тип("ТаблицаЗначений")) тогда
			ТаблицаРегистрации=Неопределено;
		ИначеЕсли ТаблицаРегистрации.Количество()=0 тогда
			ТаблицаРегистрации=Неопределено;
		КонецЕсли;
	КонецЕслИ;
	
	Если ТаблицаРегистрации=Неопределено тогда
		Возврат;
	КонецЕсли;
	
	// Создание таблицы для последующего отражения расчетов по НДС.
	ТаблицаРасчетыНДС = Новый ТаблицаЗначений();
	ТаблицаРасчетыНДС.Колонки.Добавить("СчетУчетаЦенности");
	ТаблицаРасчетыНДС.Колонки.Добавить("СуммаБезНДС",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаРасчетыНДС.Колонки.Добавить("СуммаБезНДСВал",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаРасчетыНДС.Колонки.Добавить("НДС",				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаРасчетыНДС.Колонки.Добавить("НДСВал",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаАвансов = Новый ТаблицаЗначений();
	ТаблицаАвансов.Колонки.Добавить("ДокументОплаты", Документы.ТипВсеСсылки());
	ТаблицаАвансов.Колонки.Добавить("Сделка",         Документы.ТипВсеСсылки());
	ТаблицаАвансов.Колонки.Добавить("Сумма",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАвансов.Колонки.Добавить("СуммаВал",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАвансов.Колонки.Добавить("КурсоваяРазница",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаАвансов.Колонки.Добавить("Контрагент", новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаАвансов.Колонки.Добавить("ДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаАвансов.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Если Покупки Тогда
		РегистрРасчетов = "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации";
	Иначе
		РегистрРасчетов = "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Расчеты.Регистратор,
	|	Расчеты.Документ,
	|	СУММА(Расчеты.СуммаВзаиморасчетов) КАК СуммаВал,
	|	СУММА(Расчеты.СуммаРег) КАК СуммаРег
	|ИЗ
	|	РегистрНакопления." + РегистрРасчетов + " КАК Расчеты
	|ГДЕ
	|	Расчеты.Регистратор = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор,
	|	Расчеты.Документ
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СуммоваяРазница=0;
	СуммаДокументаРег = ТаблицаРегистрации.Итог("СуммаСНДС");
	Если СтруктураПараметров.РасчетыВУсловныхЕдиницах ИЛИ ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		СуммаДокументаВал = ТаблицаРегистрации.Итог("СуммаВзаиморасчетов");
	Иначе
		СуммаДокументаВал = СуммаДокументаРег;
	КонецЕсли;
	
	Для Каждого Строка Из РезультатЗапроса Цикл
		
		// Если был зачет аванса рассчитаем суммовую разницу.
		ТекущаяСуммоваяРазница = 0;
		Если Строка.Документ <> ДокументСсылка Тогда
			ТекущаяСуммоваяРазница = ?(СуммаДокументаВал <> 0, Окр(Строка.СуммаВал * СуммаДокументаРег / СуммаДокументаВал, 2, 1) - Строка.СуммаРег, 0);
			СуммоваяРазница = СуммоваяРазница + ТекущаяСуммоваяРазница;
		КонецЕсли;
		
		// Добавим строку в таблицы для расчетов по НДС.
		НоваяСтрока = ТаблицаРасчетыНДС.Добавить();
		НоваяСтрока.СуммаБезНДС 	= Строка.СуммаРег + ТекущаяСуммоваяРазница;
		НоваяСтрока.СуммаБезНДСВал 	= Строка.СуммаВал;
		
		НоваяСтрока = ТаблицаАвансов.Добавить();
		НоваяСтрока.Контрагент		= Контрагент;
		НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
		НоваяСтрока.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
		Если Строка.Документ <> ДокументСсылка Тогда
			НоваяСтрока.ДокументОплаты 	= Строка.Документ;
		КонецЕсли;
		НоваяСтрока.Сделка 			= ДокументСсылка;
		НоваяСтрока.Сумма			= Строка.СуммаРег;
		НоваяСтрока.СуммаВал		= Строка.СуммаВал;
		НоваяСтрока.КурсоваяРазница = ТекущаяСуммоваяРазница;
		
	КонецЦикла;
	
	ТаблицаРасчетыНДС.ЗаполнитьЗначения("нет","СчетУчетаЦенности");
	
	Если СуммоваяРазница <> 0 Тогда
		СуммоваяРазницаПоДокументам = Новый ТаблицаЗначений();
		СуммоваяРазницаПоДокументам.Колонки.Добавить("Регистратор");
		СуммоваяРазницаПоДокументам.Колонки.Добавить("СуммоваяРазница",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			
		СуммоваяРазницаПоДокументам.Колонки.Добавить("Документ", Документы.ТипВсеСсылки());
		СуммоваяРазницаПоДокументам.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		СуммоваяРазницаПоДокументам.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		СуммоваяРазницаПоДокументам.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			
		СтрокаСуммовыхРазниц =  СуммоваяРазницаПоДокументам.Добавить();
		СтрокаСуммовыхРазниц.Регистратор = ДокументСсылка;
		СтрокаСуммовыхРазниц.СуммоваяРазница = -СуммоваяРазница;
			
		СтрокаСуммовыхРазниц.Документ = ДокументСсылка;
		СтрокаСуммовыхРазниц.Контрагент = Контрагент;
		СтрокаСуммовыхРазниц.ДоговорКонтрагента =  ДоговорКонтрагента;
		СтрокаСуммовыхРазниц.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Если Покупки Тогда
		Если СуммоваяРазница <> 0 Тогда
			УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Приобретение(СтруктураПараметров, СуммоваяРазницаПоДокументам, Истина, Истина);
		КонецЕсли;
	Иначе
		Если СуммоваяРазница <> 0 Тогда
			УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Реализация(СтруктураПараметров, СуммоваяРазницаПоДокументам, Истина, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПровестиПриходныйРасходныйДокументПоРегистрамНДС()

Функция СравнитьТипДокумента(ДокументСсылка, ИмяТипа)
	
	Если Метаданные.Документы.Найти(ИмяТипа) = Неопределено Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	Возврат ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка." + ИмяТипа);
	
КонецФункции
	
мВалютаРегламентированногоУчета 		= глЗначениеПеременной("ВалютаРегламентированногоУчета");
НаличиеРеквизитаСписаниеПартийВРегистре = Новый Соответствие;
НаличиеРеквизитаВидРегламентнойОперацииВРегистре = Новый Соответствие;
ПустыеСсылкиДокументовРасчетов 			= Новый Соответствие;

ДокументыРасчетов = Новый Массив;
Для Каждого ТекущийТип Из Метаданные.РегистрыСведений.РасчетыПоПриобретениюОрганизации.Ресурсы.ДокументРасчетов.Тип.Типы() Цикл
	 ДокументыРасчетов.Добавить(Новый(ТекущийТип));
КонецЦикла; 
ПустыеСсылкиДокументовРасчетов.Вставить(Истина, ДокументыРасчетов);

ДокументыРасчетов = Новый Массив;
Для Каждого ТекущийТип Из Метаданные.РегистрыСведений.РасчетыПоРеализацииОрганизации.Ресурсы.ДокументРасчетов.Тип.Типы() Цикл
	 ДокументыРасчетов.Добавить(Новый(ТекущийТип));
КонецЦикла; 
ПустыеСсылкиДокументовРасчетов.Вставить(Ложь, ДокументыРасчетов);
