
 Функция СоздатьОбъектОбработки(пИмяСсылкаОбработки) Экспорт
	
	Обработка = "";
	
	Если Не ЗначениеЗаполнено(пИмяСсылкаОбработки) Тогда
		Возврат Обработка;
	КонецЕсли;
    	
	Если ТипЗнч(пИмяСсылкаОбработки)=Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		
	//#Если Клиент Тогда		
		//Ищем внешнюю обработку
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные = пИмяСсылкаОбработки.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Обработка;
		КонецПопытки; 
		
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;
	//#Иначе
	//	Возврат "Использование внешних обработок на сервере 1С не поддерживается";
	//#КонецЕсли		
		
	ИначеЕсли ТипЗнч(пИмяСсылкаОбработки)=Тип("Строка") Тогда
		
		Попытка
			Обработка = Обработки[пИмяСсылкаОбработки].Создать();
		Исключение
			Возврат ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Обработка;
	
КонецФункции	

Функция ВернутьВремяВМинутах(пДата = "") Экспорт
	
	Если пДата = "" Тогда
		пДата	= ТекущаяДата();
	КонецЕсли;
	
	лЧас	= Час(пДата);
	лМин	= Минута(пДата);
	
	лВремя	= лЧас*60 + лМин;
	
	Возврат лВремя;
	
КонецФункции

Функция ВернутьВремяВСекундах(пДата = "") Экспорт
	
	Если пДата = "" Тогда
		пДата	= ТекущаяДата();
	КонецЕсли;
	
	лЧас	= Час(пДата);
	лМин	= Минута(пДата);
	лСек	= Секунда(пДата);
	лВремя	= лЧас*3600 + лМин*60 + лСек;
	
	Возврат лВремя;
	
КонецФункции

Процедура AutoExchange_Chicago() Экспорт
	
	#Если Клиент Тогда
		ЭтоСервер = Ложь;
		ИмяСобытия = "АвтообменЧикаго.НаКлиенте";
		Сообщить("" + ТекущаяДата() + " Проверка наличия заданий к выполнению...");
	#ИначеЕсли ВнешнееСоединение Тогда	
		ЭтоСервер = Ложь;
		ИмяСобытия = "АвтообменЧикаго.ВнешнееСоединение";
	#Иначе
		ЭтоСервер = Истина;
		ИмяСобытия = "АвтообменЧикаго.НаСервере";
	#КонецЕсли
			
	// получаем все активные задачи к выполнению
			
	ТекущаяДатаВремя = ТекущаяДата();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СТ_НастройкиПараметровОбмена.Ссылка,
	               |	СТ_НастройкиПараметровОбмена.Наименование КАК Наименование,
	               |	СТ_НастройкиПараметровОбмена.ПоследнийЗапуск,
	               |	СТ_НастройкиПараметровОбмена.ВремяИсполнения,
	               |	СТ_НастройкиПараметровОбмена.ВремяИсполненияКонечное,
	               |	СТ_НастройкиПараметровОбмена.ИмяСсылкаОбработки,
	               |	СТ_НастройкиПараметровОбмена.ИнтервалЗапускаПериодичныхЗаданий,
	               |	СТ_НастройкиПараметровОбмена.ВидПериодаЗапуска,
	               |	СТ_НастройкиПараметровОбмена.ГлубинаВыгрузкиДанных,
	               |	СТ_НастройкиПараметровОбмена.ВидПериодаГлубины,
	               |	СТ_НастройкиПараметровОбмена.МастерВыгрузка,
	               |	СТ_НастройкиПараметровОбмена.мКаталогДанных,
	               |	СТ_НастройкиПараметровОбмена.ОтборХранилище
	               |ИЗ
	               |	Справочник.СТ_НастройкиПараметровОбмена КАК СТ_НастройкиПараметровОбмена
	               |ГДЕ
	               |	НЕ СТ_НастройкиПараметровОбмена.ПометкаУдаления
	               |	И НЕ СТ_НастройкиПараметровОбмена.ЭтоГруппа
	               |	И СТ_НастройкиПараметровОбмена.Активность
	               |	И СТ_НастройкиПараметровОбмена.РегламентыйЗапуск = &ЭтоСервер
	               |	И СТ_НастройкиПараметровОбмена.ДатаНачала <= &ТекущаяДатаВремя
	               |	И СТ_НастройкиПараметровОбмена.СледующийЗапуск <= &ТекущаяДатаВремя
	               |	И (СТ_НастройкиПараметровОбмена.Пользователь = &ТекущийПользователь
	               |			ИЛИ СТ_НастройкиПараметровОбмена.Родитель.Пользователь = &ТекущийПользователь)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	Запрос.УстановитьПараметр("ЭтоСервер", ЭтоСервер);
	Запрос.УстановитьПараметр("ТекущаяДатаВремя", ТекущаяДатаВремя);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		
	Выборка = Запрос.Выполнить().Выбрать();
	ПропуститьПроверкуИнтервалаЗапуска = ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Задача = Выборка.Ссылка;
		ТекущаяДатаВремя = ТекущаяДата();
		
		// проверем по времени запуска задания
		// если задача не подходит по времени - пропускаем
		
		Если ВернутьВремяВСекундах(Выборка.ВремяИсполнения) > ВернутьВремяВСекундах(ТекущаяДатаВремя) Тогда // время запуска еще не наступило
			Продолжить;			
		КонецЕсли;
		
		Если ВернутьВремяВСекундах(Выборка.ВремяИсполненияКонечное) < ВернутьВремяВСекундах(ТекущаяДатаВремя) Тогда // время запуска уже прошло
			Продолжить;
		КонецЕсли;
        				
		// инициализируем внешнюю обработку
		Обработка = СоздатьОбъектОбработки(Выборка.ИмяСсылкаОбработки);
		
		Если ТипЗнч(Обработка)=Тип("Строка") Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.СТ_НастройкиПараметровОбмена, Задача, Выборка.Наименование + ": "+Обработка);
			ДобавитьСтрокуВЖурнал(Выборка.Наименование, ТекущаяДатаВремя, ТекущаяДата(), Обработка);
			Продолжить;	
		Иначе
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СТ_НастройкиПараметровОбмена, Задача, Выборка.Наименование + ": успешная инициализация внешней обработки "+Выборка.ИмяСсылкаОбработки);
		КонецЕсли;		
		
		Обработка.ДополнительныеПараметры = Новый Структура("Свойство, СписокПараметров", "ОбновлениеСпискаПараметров", Задача.ТаблицаПараметров);
		Обработка.ПриОткрытииМодуль();
		
		// устанавливаем период обработки
		Обработка.ДатаКонца		= ТекущаяДатаВремя;

		ГлубинаВыгрузкиДанных = Выборка.ГлубинаВыгрузкиДанных;
		ВидПериодаГлубины = Выборка.ВидПериодаГлубины;
		Если ВидПериодаГлубины = 3 Тогда // день
			Обработка.ДатаНачала	= ТекущаяДатаВремя - (ГлубинаВыгрузкиДанных-1) * 24 * 60 * 60;
		ИначеЕсли ВидПериодаГлубины = 4 Тогда // неделя	
			Обработка.ДатаНачала	= ТекущаяДатаВремя - ГлубинаВыгрузкиДанных * 7 * 24 * 60 * 60;
		ИначеЕсли  ВидПериодаГлубины = 5 Тогда // месяц
			Обработка.ДатаНачала	= ДобавитьМесяц(ТекущаяДатаВремя,-ГлубинаВыгрузкиДанных);
		Иначе // минута, час
			Обработка.ДатаНачала	= ТекущаяДатаВремя;
		КонецЕсли;

		//++ Spl_Апроф 30.01.2015 (k.russkih@a-prof.ru)
		мХранилищеОтбор = Выборка.ОтборХранилище.Получить().Отбор;
		Обработка.Отбор = мХранилищеОтбор;
		Обработка.МастерВыгрузка = Выборка.МастерВыгрузка;
		Обработка.мКаталогДанных = Выборка.мКаталогДанных;		
		//-- Spl_Апроф		
		
		// выполняем
		Попытка			
			Обработка.ВыполнитьМодуль();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СТ_НастройкиПараметровОбмена, Задача, Выборка.Наименование + ", выполнено");
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.СТ_НастройкиПараметровОбмена, Задача, Выборка.Наименование + ", ошибка при выполнении: "+ОписаниеОшибки());
			ДобавитьСтрокуВЖурнал(Выборка.Наименование, ТекущаяДатаВремя, ТекущаяДата(), "Ошибка при выполнении: "+ОписаниеОшибки());
		КонецПопытки;
		
		// рассчитываем время следующего запуска задачи по расписанию
		ИнтервалЗапуска = Выборка.ИнтервалЗапускаПериодичныхЗаданий;
		ВидПериодаЗапуска = Выборка.ВидПериодаЗапуска;
		Если ВидПериодаЗапуска = 1 Тогда // минута
			ДатаСледующегоЗапуска = ТекущаяДатаВремя + ИнтервалЗапуска * 60;
		ИначеЕсли ВидПериодаЗапуска = 2 Тогда // час
			ДатаСледующегоЗапуска = ТекущаяДатаВремя + ИнтервалЗапуска * 60 * 60; 
		ИначеЕсли ВидПериодаЗапуска = 3 Тогда // день
			ДатаСледующегоЗапуска = НачалоДня(ТекущаяДатаВремя + ИнтервалЗапуска * 60 * 60 * 24) + ВернутьВремяВСекундах(Выборка.ВремяИсполнения); 
		ИначеЕсли ВидПериодаЗапуска = 4 Тогда // неделя
			ДатаСледующегоЗапуска = НачалоДня(ТекущаяДатаВремя + ИнтервалЗапуска * 60 * 60 * 24 * 7) + ВернутьВремяВСекундах(Выборка.ВремяИсполнения);
		ИначеЕсли ВидПериодаЗапуска = 5 Тогда // месяц
			ДатаСледующегоЗапуска	= НачалоДня(ДобавитьМесяц(ТекущаяДатаВремя, ИнтервалЗапуска)) + ВернутьВремяВСекундах(Выборка.ВремяИсполнения);
		Иначе
			ДатаСледующегоЗапуска = ТекущаяДатаВремя + ИнтервалЗапуска * 60;
		КонецЕсли;

       
		Объект = Задача.ПолучитьОбъект();
		Объект.ПоследнийЗапуск = ТекущаяДатаВремя;
		Объект.СледующийЗапуск = ДатаСледующегоЗапуска;
		Объект.Записать();
		
		ДобавитьСтрокуВЖурнал(Выборка.Наименование, ТекущаяДатаВремя, ТекущаяДата(), Обработка);
					
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСтрокуВЖурнал(Задание, НачалоВыполнения, ОкончаниеВыполнения, РезультатВыполнения) Экспорт
	
	НоваяСтрока = ЖурналВыполненияЗаданий.Добавить();
	НоваяСтрока.Задание = Задание;
	НоваяСтрока.НачалоВыполнения = НачалоВыполнения;
	НоваяСтрока.ОкончаниеВыполнения = ОкончаниеВыполнения;
	НоваяСтрока.РезультатВыполнения = РезультатВыполнения;
	
КонецПроцедуры
