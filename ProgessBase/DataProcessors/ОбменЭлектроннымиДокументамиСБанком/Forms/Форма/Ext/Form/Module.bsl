
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Элементы.Выписки.Обновить();
	Элементы.ПлатежныеПорученияВОбработке.Обновить();
	ОбновитьЭлектронныеДокументыНаОтправку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПараметры();
	ЗаполнитьТабличныеЧасти();
	ПереключитьСтраницы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СоглашениеЭДПриИзменении(Элемент)
	
	ЗаполнитьПараметры();
	ЭтаФорма.Модифицированность = Ложь;
	ПереключитьСтраницы();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры


&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВЫПИСКИ

&НаКлиенте
Процедура ВыпискиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.ВыпискаБанка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВыпискиБанкаСбербанк

&НаКлиенте
Процедура ВыпискаБанкаСбербанкВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("СсылкаНаОбъект", ВыбраннаяСтрока);
	ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПлатежныеПорученияКОтправке

&НаКлиенте
Процедура ПлатежныеПорученияКОтправкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("СсылкаНаОбъект", Элемент.ТекущиеДанные.ЭлектронныйДокумент);
	ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗапроситьВыписку(Команда)
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		СообщениеТекст = Нстр("ru = 'Необходимо выбрать период запроса'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеТекст, , "Период");
		Возврат;
	КонецЕсли;
		
	ЭД = Неопределено;
	
	СформироватьЭДЗаказВыписки(ЭД);
		
	Попытка
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
		Иначе
			МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
		КонецЕсли;
		МассивСтруктурДоступныхСертификатов = МассивСтруктурДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов);
	Исключение
		МассивСтруктурДоступныхСертификатов = Новый Массив;
	КонецПопытки;
	
	НастройкиОбмена = ОпределитьНастройкиОбменаЭДПоИсточнику(МассивСтруктурДоступныхСертификатов, ЭД);
	Если НастройкиОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкиОбмена.СертификатОрганизацииДляПодписи) Тогда
		ТекстСообщения = НСтр("ru = 'Не найден подходящий сертификат для подписи документа Запрос выписки'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(ЭД);
	КолПодписанных = ЭлектронныеДокументыСлужебныйКлиент.ПодписатьЭДОпределеннымСертификатом(
																МассивЭД,
																НастройкиОбмена.СертификатОрганизацииДляПодписи);
	Если КолПодписанных = 0 тогда
		Возврат;
	КонецЕсли;
	
	КолОтправленных = 0;
	КолПолученных = 0;
	
	СформироватьИОтправитьПакетВБанк(МассивЭД, КолОтправленных, КолПолученных);
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ТекстОповещения = НСтр("ru = 'Отправленных пакетов нет'");
	
	Если КолОтправленных > 0 Тогда
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправлено документов: (%1)'"),
																				  КолОтправленных);
	КонецЕсли;
	
	Если КолПолученных = 0 Тогда
		ТекстОповещения = ТекстОповещения + НСтр("ru = ', полученных документов нет'");
	Иначе
		ТекстОповещения = ТекстОповещения
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ', получено документов: (%1)'"), КолПолученных);
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеЭД");
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязи(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ПроверитьНаличиеСвязиСБанком(Объект.СоглашениеЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыделенные(Команда)
		
	МассивСтрок = Элементы.ПлатежныеПорученияКОтправке.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТаблицы = ПлатежныеПорученияКОтправке.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.Выгружать = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСоВсехСтрок(Команда)
	
	Для Каждого ТекДокумент Из ПлатежныеПорученияКОтправке Цикл
		Если ТекДокумент.Выгружать Тогда
			ТекДокумент.Выгружать = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтмеченные(Команда)

	МассивОтправки = Новый Массив();
	Для каждого строка из ПлатежныеПорученияКОтправке Цикл
		Если Строка.Выгружать Тогда
			МассивОтправки.Добавить(Строка.ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	КолОтправленных = 0;
	Если МассивОтправки.Количество() > 0 Тогда
		ЭлектронныеДокументыСлужебныйКлиент.ОтправитьПлатежныеПорученияСбербанк(МассивОтправки,
																				КолОтправленных,
																				Объект.СоглашениеЭД);
	КонецЕсли;
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	
	Если КолОтправленных > 0 Тогда
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															НСтр("ru = 'Отправлено документов: (%1)'"),
															КолОтправленных);
		Оповестить("ОбновитьСостояниеЭД");
	Иначе
		ТекстОповещения = НСтр("ru = 'Отправленных пакетов нет'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	ОбновитьЭлектронныеДокументыНаОтправку();
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьЭлектронныеДокументыНаОтправку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыписку(Команда)
	
	КаналСоздан = ложь;
	ЭлектронныеДокументыСлужебныйКлиент.УстановитьВиртуальныйКанал(Объект.СоглашениеЭД, КаналСоздан);
	Если НЕ КаналСоздан Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьЗапросНаНочныеВыписки(Объект.СоглашениеЭД);
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьРезультатыОбработкиЗапросов(
												Объект.СоглашениеЭД,
												ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки"));
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьРезультатыОбработкиЗапросов(
												Объект.СоглашениеЭД,
												ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка"));
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьРезультатыОбработкиЗапросов(
												Объект.СоглашениеЭД,
												ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросНочнойВыписки"));
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьЗапросНаПолучениеГотовыхВыписок(Объект.СоглашениеЭД);
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьРезультатыОбработкиЗапросов(
												Объект.СоглашениеЭД,
												ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка"));
	Элементы.ВыпискаБанкаСбербанк.Обновить();
	
	ПоследнийЭД = ПоследнийЭД(Объект.СоглашениеЭД);
	
	Если ЗначениеЗаполнено(ПоследнийЭД) ТОгда
		Элементы.ВыпискаБанкаСбербанк.ТекущаяСтрока = ПоследнийЭД;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусы(Команда)
	
	КаналСоздан = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.УстановитьВиртуальныйКанал(Объект.СоглашениеЭД, КаналСоздан);
	Если НЕ КаналСоздан Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьРезультатыОбработкиЗапросов(
												Объект.СоглашениеЭД,
												ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение"));
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьСостоянияПлатежныхПоручений(Объект.СоглашениеЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьВыпискуСбербанк(Команда)
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		СообщениеТекст = НСтр("ru = 'Необходимо выбрать период запроса'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеТекст, , "Период");
		Возврат;
	КонецЕсли;
		
	Если Период.ДатаНачала > Период.ДатаОкончания Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала периода должна быть меньше даты окончания'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеТекст, , "Период");
		Возврат;
	КонецЕсли;
	
	ЭД = Неопределено;
	
	ЭлектронныеДокументыСлужебныйКлиент.ЗапроситьВыпискуСбербанк(
												Объект.СоглашениеЭД,
												Объект.Организация,
												Период.ДатаНачала,
												Период.ДатаОкончания,
												,
												ЭД);
	
	Элементы.ВыпискаБанкаСбербанк.Обновить();
	
	Если ЗначениеЗаполнено(ЭД) ТОгда
		Элементы.ВыпискаБанкаСбербанк.ТекущаяСтрока = ЭД;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ВыборСтандартногоПериода(ПериодОтбора);
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ВыпискаБанкаСбербанк.Отбор, "ДатаСоздания");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ВыпискаБанкаСбербанк.Отбор,
			"ДатаСоздания",
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
			ПериодОтбора.ДатаНачала,
			,
			ЗначениеЗаполнено(ПериодОтбора.ДатаНачала));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ВыпискаБанкаСбербанк.Отбор,
			"ДатаСоздания",
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
			КонецДня(ПериодОтбора.ДатаОкончания),
			,
			ЗначениеЗаполнено(ПериодОтбора.ДатаОкончания));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыборСтандартногоПериода(Период)

	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Период;
	Если Диалог.Редактировать() Тогда
		Период = Диалог.Период;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСтраницы()
	
	Если ЗначениеЗаполнено(Объект.СоглашениеЭД) Тогда
		ПрограммаБанка =  ПрограммаБанка(Объект.СоглашениеЭД);
		Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Элементы.СтраницаСбербанк;
			
			#Если НЕ (ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение) Тогда
				
				Элементы.СтраницыОтправкаПолучение.ТекущаяСтраница    = Элементы.Ошибка;
				Элементы.Ошибка.Видимость                             = Истина;
				Элементы.СтраницыОтправкаПолучение.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
				
			#КонецЕсли
			
		Иначе
			Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Элементы.СтраницаТиповой;
		КонецЕсли;
	Иначе
		Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Элементы.СтраницаТиповой;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметры()
	
	Если ЗначениеЗаполнено(Объект.СоглашениеЭД) Тогда
		РеквизитыСоглашения = РеквизитыСоглашения(Объект.СоглашениеЭД);
		Объект.Банк = РеквизитыСоглашения.Контрагент;
		Объект.Организация = РеквизитыСоглашения.Организация;
	Иначе
		Объект.Банк        = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	КонецЕсли;
	
	ВыпискиБанка.Параметры.УстановитьЗначениеПараметра("СоглашениеЭД", Объект.СоглашениеЭД);
	ВыпискаБанкаСбербанк.Параметры.УстановитьЗначениеПараметра("СоглашениеЭД", Объект.СоглашениеЭД);
	ПлатежныеПорученияВОбработке.Параметры.УстановитьЗначениеПараметра("СоглашениеЭД", Объект.СоглашениеЭД);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрограммаБанка(СоглашениеЭД)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ПрограммаБанка");
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыСоглашения(СоглашениеЭД)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СоглашениеЭД, "Организация, Контрагент");
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользуетсяОбменЭДСБанками = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
																				"ИспользоватьОбменЭДСБанками");
	Если НЕ ИспользуетсяОбменЭДСБанками Тогда
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы(
																				"РаботаСБанками");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Элементы.СтраницыВидыБанковскихСистем.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Если Не ПустаяСтрока(Параметры.ОткрытьСтраницу) Тогда
		Элементы.СтраницыОтправкаПолучение.ТекущаяСтраница = Элементы[Параметры.ОткрытьСтраницу];
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЭДЗаказВыписки(ЭД)
	
	ЭлектронныеДокументыВнутренний.СформироватьЭДЗаказВыписки(
										Период.ДатаНачала,
										Период.ДатаОкончания,
										Объект.СоглашениеЭД,
										ЭД);

КонецПроцедуры

&НаСервере
Функция МассивСтруктурДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов)
	
	Возврат ЭлектронныеДокументыСлужебный.МассивСтруктурДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов);
	
КонецФункции

&НаСервере
Функция ОпределитьНастройкиОбменаЭДПоИсточнику(МассивСтруктурДоступныхСертификатов, ЭД)
	
	Возврат ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Объект.СоглашениеЭД,
																				 Истина,
																				 МассивСтруктурДоступныхСертификатов,
																				 ЭД);
																				 
КонецФункции

&НаСервере
Процедура СформироватьИОтправитьПакетВБанк(МассивЭД, КолОтправленных, КолПолученных)

	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СоглашениеЭД,
																	 "АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов");
	Настройки = Новый Структура("Адрес", РеквизитыСоглашения.АдресСервера);
	КолОтправленных = 0;
	
	Для Каждого ЭД Из МассивЭД Цикл
	
		Данные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
		URI = "urn:x-obml:1.0";
		ТипMessage = ФабрикаXDTO.Тип("urn:x-obml:1.0","CMSDETACHED");
		Message = ФабрикаXDTO.Создать(ТипMessage);
		ТипData = ТипMessage.Свойства[0].Тип;
		Data = ФабрикаXDTO.Создать(ТипData);
		Data.ContentType = "application/xml";
		Data.__content = Данные;
		Message.data = Data;
		
		Для Каждого СтрокаПодписи ИЗ ЭД.ЭлектронныеЦифровыеПодписи Цикл
			Message.signature.Добавить(СтрокаПодписи.Подпись.Получить());
		КонецЦикла;
	
		ПутьКФайлуОтправки = ПолучитьИмяВременногоФайла();
		Запись = Новый ЗаписьXML;
		Запись.ОткрытьФайл(ПутьКФайлуОтправки);
		Запись.ЗаписатьОбъявлениеXML();

		ФабрикаXDTO.ЗаписатьXML(Запись,Message,"signed",URI,,НазначениеТипаXML.Явное);
	
		Запись.Закрыть();
				
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВидЭД");

		Если ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
			Настройки.Вставить("Ресурс", РеквизитыСоглашения.РесурсИсходящихДокументов);
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
			Настройки.Вставить("Ресурс", РеквизитыСоглашения.РесурсВходящихДокументов);
		КонецЕсли;
		
		Попытка
			ОтветБанка = "";
			ОтправитьПакетЧерезРесурсБанка(Настройки, ПутьКФайлуОтправки, ОтветБанка);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Отправлен);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
			
			КолОтправленных = КолОтправленных + 1;
			УдалитьФайлы(ПутьКФайлуОтправки);
			ДанныеОтвета = ЭлектронныеДокументыСлужебный.ПолучитьДанныеИзОтветаБанка(ОтветБанка, ЭД);
			Если ДанныеОтвета=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КолПолученных = КолПолученных + 1;
			ЭлектронныеДокументыСлужебный.ОбработатьОтветБанка(ДанныеОтвета, ЭД);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОшибкаПередачи);
			СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстОшибки);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
			
			ТекстСообщения = НСтр("ru = ' При отправке документа произошла ошибка, подробности см. в Журнале регистрации.'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Отправка ЭД в банк'"),
																						ТекстОшибки,
																						ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(МассивЭД);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПакетЧерезРесурсБанка(Настройки, Данные, Результат)

	Соединение = ЭлектронныеДокументыСлужебный.ПолучитьСоединение(Настройки);
	
	ЗаголовокЗапроса = "";
	ЭлектронныеДокументыСлужебный.ДобавитьПараметрВЗаголовок(ЗаголовокЗапроса, "Accept" , "*/*");
	ЭлектронныеДокументыСлужебный.ДобавитьПараметрВЗаголовок(ЗаголовокЗапроса, "User-Agent" , "1C+Enterprise/8.2");
	ЭлектронныеДокументыСлужебный.ДобавитьПараметрВЗаголовок(ЗаголовокЗапроса,
															 "Content-Type" ,
															 "application/xml; charset=UTF-8");
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	
	Соединение.ОтправитьДляОбработки(Данные,Настройки.Ресурс,ИмяФайлаРезультата,ЗаголовокЗапроса);
	УдалитьФайлы(Данные);
	ФайлРезультата = Новый ТекстовыйДокумент;
	ФайлРезультата.Прочитать(ИмяФайлаРезультата,КодировкаТекста.UTF8);
	УдалитьФайлы(ИмяФайлаРезультата);
	Результат = ФайлРезультата.ПолучитьТекст();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлектронныеДокументыНаОтправку()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияЭД.СсылкаНаОбъект.Контрагент КАК Получатель,
	               |	СостоянияЭД.СсылкаНаОбъект.Номер КАК Номер,
	               |	СостоянияЭД.СсылкаНаОбъект.Дата КАК Дата,
	               |	СостоянияЭД.СсылкаНаОбъект.СуммаДокумента КАК СуммаДокумента,
	               |	СостоянияЭД.СсылкаНаОбъект.НазначениеПлатежа КАК НазначениеПлатежа,
	               |	СостоянияЭД.СсылкаНаОбъект.СчетКонтрагента КАК СчетПолучателя,
	               |	СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	               |	СостоянияЭД.СсылкаНаОбъект.СчетОрганизации КАК СчетОрганизации
	               |ИЗ
	               |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	               |ГДЕ
	               |	СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка)
	               |	И СостоянияЭД.ЭлектронныйДокумент.СоглашениеЭД = &СоглашениеЭД
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата";
	Запрос.УстановитьПараметр("СоглашениеЭД", Объект.СоглашениеЭД);
	ПлатежныеПорученияКОтправке.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеЧасти()
	
	ОбновитьЭлектронныеДокументыНаОтправку();
	УстановитьДоступностьЭлементов();
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()

	Элементы.СтраницыВидыБанковскихСистем.Доступность = ЗначениеЗаполнено(Объект.СоглашениеЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеЭДОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.СоглашениеЭД) Тогда
		ОткрытьФорму(
				"Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлементаБанк",
				Новый Структура("Ключ", Объект.СоглашениеЭД));
	КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоследнийЭД(СоглашениеЭД)
	
	Запрос = новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭлектронныйДокумент
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД
	|	И (ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ЗапросВыписки)
	|			ИЛИ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ВыпискаБанка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭлектронныйДокумент;
	КонецЕсли
	
КонецФункции

