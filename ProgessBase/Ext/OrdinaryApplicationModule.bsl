//m.ionov@a-prof.ru 19.11.2014
//Из подписки на событие "ПередЗаписьюДокументаДатаЗапретаРедактирования" убрали документ "Акт сверки взаиморасчетов"
//----m.ionov@a-prof.ru---

//РаботаСВнешнимОборудованием
Перем глПодключаемоеОборудование Экспорт; // для кэширования на клиенте
//Конец РаботаСВнешнимОборудованием

Перем глОбщиеЗначения Экспорт;

Перем глСерверТО Экспорт;
Перем АдресРесурсовОбозревателя Экспорт; // В переменной содержится значение 
                                         // адреса ресурса данной конфигурации

Перем мКлиентOnline;

Перем ПараметрыВнешнихРегламентированныхОтчетов Экспорт;
Перем КонтекстЭДО Экспорт;
Перем КонтекстОнлайнСервисовРегламентированнойОтчетности Экспорт;

// СтандартныеПодсистемы

// БазоваяФункциональность

// СписокЗначений для накапливания пакета сообщений в журнал регистрации, 
// формируемых в клиентской бизнес-логике.
Перем СообщенияДляЖурналаРегистрации Экспорт; 

// Признак того, что в данном сеансе не нужно запрашивать стандартное подтверждение при выходе
Перем ПропуститьПредупреждениеПередЗавершениемРаботыСистемы Экспорт;

// Конец БазоваяФункциональность

// ОбновлениеКонфигурации
// Информация о доступном обновлении конфигурации, обнаруженном в Интернете
// при запуске программы.
Перем ДоступноеОбновлениеКонфигурации Экспорт;
// Структура с параметрами помощника обновления конфигурации.
Перем НастройкиОбновленияКонфигурации Экспорт; 

// Конец ОбновлениеКонфигурации

// ФайловыеФункции
Перем ПроверкаДоступаКРабочемуКаталогуВыполнена Экспорт; // Кэшируется, чтобы в данном сеансе повторно не делать проверку доступа к каталогу на диске
// Конец ФайловыеФункции

// Конец СтандартныеПодсистемы

// ЭлектронныеДокументы
Перем глWSОпределениеСбербанк Экспорт; 
Перем глКриптоДЛЛСбербанк Экспорт;
Перем глПинКодСбербанк Экспорт;
Перем глНомерКонтейнераСбербанк Экспорт;
Перем глТекущееСоглашениеСбербанк Экспорт;
Перем глУстановленКаналСоСберБанком Экспорт;
Перем глВыполненаАвторизацияСбербанк Экспорт;
// Конец ЭлектронныеДокументы

//начало изменений внешние файлы
Перем глОбъектМД5 Экспорт;
//конец изменений внешние файлы 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Перед началом работы системы
//
Процедура ПередНачаломРаботыСистемы(Отказ)
	
	Если НЕ РольДоступна("Пользователь")
		И (НЕ РольДоступна("ПолныеПрава"))
		/////Вадим 07.11.2012 9:42:24
		И (НЕ РольДоступна("ПРГ_Все_ФизЛица"))
		
		////ВадимКонец
		Тогда
		
		Предупреждение("Вам не назначена роль ""Пользователь"". Запуск конфигурации невозможен.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Отказ = НЕ УправлениеПользователями.ПользовательОпределен();
	
	// ОбновлениеВерсииИБ
	Отказ = Отказ ИЛИ НЕ ОбновлениеИнформационнойБазыКлиент.ВозможноВыполнитьОбновлениеИнформационнойБазы();
	// Конец ОбновлениеВерсииИБ
	
	//m.ionov@a-prof.ru 21.05.2014
	ПараметрыСеанса.ПроведениеДокументов = Ложь;
	//----m.ionov@a-prof.ru---
	//начало изменений обновление границы изменений
	ПараметрыСеанса.ПРГ_СчетчикИзменений = Константы.ПРГ_СчетчикИзменений.Получить();
	//конец изменений
	
КонецПроцедуры

// При начале работы системы
//
Процедура ПриНачалеРаботыСистемы()
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.УстановитьПроизвольныйЗаголовокПриложения();
	// Конец СтандартныеПодсистемы
	
	АдресРесурсовОбозревателя = ОбновлениеКонфигурацииПереопределяемый.КороткоеИмяКонфигурации();
	
	// Установить начальное значение ТипДетализацииСтандартныхОтчетов
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ТипДетализацииСтандартныхОтчетов") = Перечисления.ТипДетализацииСтандартныхОтчетов.ПустаяСсылка() Тогда
		//УстановитьЗначениеПоУмолчанию(глТекущийПользователь, "ТипДетализацииСтандартныхОтчетов", Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы);
		СсылкаНастройки = ПланыВидовХарактеристик.НастройкиПользователей["ТипДетализацииСтандартныхОтчетов"];
		МенеджерЗаписи = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		МенеджерЗаписи.Настройка = СсылкаНастройки;
		МенеджерЗаписи.Значение = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	    
	ЗапретитьОткрытиеНесколькихСеансов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗапретитьОткрытиеНесколькихСеансов");
	Если ЗапретитьОткрытиеНесколькихСеансов Тогда
		ТекущийНомерСоединения = НомерСоединенияИнформационнойБазы();
		УникальныйИдентификаторПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		
		МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
		Для Каждого ТекСоединение Из МассивСоединений Цикл
			Если (ТекСоединение.ИмяПриложения = "1CV8") 
			   И (НЕ ТекСоединение.НомерСоединения = ТекущийНомерСоединения)
			   И (НЕ ТекСоединение.Пользователь = неопределено)
			   И (ТекСоединение.Пользователь.УникальныйИдентификатор = УникальныйИдентификаторПользователя) Тогда
			  
				Предупреждение("Пользователем с таким именем уже выполнен вход в систему",30);
				ЗавершитьРаботуСистемы(Ложь);
				Возврат;
				
			КонецЕсли;
		КонецЦикла;	
	//начало изменений запретим открытие более двух сееансов если не полные права Ожиганов
	Иначе
		
		Если Не РольДоступна("ПолныеПрава") Тогда
			ТекущийНомерСоединения = НомерСоединенияИнформационнойБазы();
			УникальныйИдентификаторПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
			КолВоСоеденений = 0;
			МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
			Для Каждого ТекСоединение Из МассивСоединений Цикл
				Если (ТекСоединение.ИмяПриложения = "1CV8") 
				   И (НЕ ТекСоединение.НомерСоединения = ТекущийНомерСоединения)
				   И (НЕ ТекСоединение.Пользователь = неопределено)
				   И (ТекСоединение.Пользователь.УникальныйИдентификатор = УникальныйИдентификаторПользователя) Тогда
				  
					КолВоСоеденений = КолВоСоеденений+1;
					
				КонецЕсли;
			КонецЦикла;	
			
			Если КолВоСоеденений >= 2 Тогда			
				Предупреждение("Нельзя открывать более двух сеансов !!!",30);
				ЗавершитьРаботуСистемы(Ложь);
			КонецЕсли;
		КонецЕсли;

	//конец изменений
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыКлиент.ВыполнитьОбновлениеИнформационнойБазы();
	
	//{24.11.2014 Островерхий заявка №б/н 
	ПРГОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы(); 
	//24.11.2014 Островерхий} 
	
	// Выполнить проверку разницы времени с сервером приложения
	Если НЕ ПроверкаРазницыВремениКлиент.ВыполнитьПроверку() Тогда
		Возврат;	
	КонецЕсли;
	
	// отработка параметров запуска системы
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	// ЗавершениеРаботыПользователей
	СоединенияИБКлиент.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();
	// Конец ЗавершениеРаботыПользователей
	
	СформироватьОтчеты();
	
	ПроверитьПодключениеОбработчикаОжидания(Истина);

	// Проверка заполнения констант валют учетов
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаРегламентированногоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты регламентированного учета!");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаУправленческогоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты управленческого учета!");
	КонецЕсли;
	Если Метаданные.Константы.Найти("ВалютаМеждународногоУчета") <> Неопределено 
		И НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаМеждународногоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты международного учета!");
	КонецЕсли;

	// Проверка наличия комплекта обновления обработок обслуживания торгового оборудования
	ПроверятьООПриЗапуске = ВосстановитьЗначение("ПроверкаНаличияОбновленияОбработокОбслуживанияПриЗапуске");
	ПроверятьООПриЗапуске = ?(ПроверятьООПриЗапуске = Неопределено, Ложь, ПроверятьООПриЗапуске);

	Если ПроверятьООПриЗапуске Тогда
		АдресИПараметрыСервера = Новый Структура;
		АдресИПараметрыСервера.Вставить("АдресОбработок", ПолучитьСерверТО().ПолучитьАдресОбновленияОбработокОбслуживания());

		Если РаботаСТорговымОборудованием.ПроверитьДоступностьНовыхОбработок(АдресИПараметрыСервера, Истина) Тогда
			Ответ = Вопрос("Доступны новые обработки обслуживания торгового оборудования.
			|Открыть форму проверки и обновления обработок обслуживания?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				РаботаСТорговымОборудованием.ОткрытьОбновлениеОбработокОбслуживания(АдресИПараметрыСервера);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ВключенИнтерфейсКассира = Ложь;
	УправлениеРозничнойТорговлей.ЗапускИнтерфейсаКассира(глЗначениеПеременной("глТекущийПользователь"), ВключенИнтерфейсКассира);

	// Если интерфейс кассира включен - эти действия выполнять не нужно.
	Если НЕ ВключенИнтерфейсКассира Тогда
		
		//Если ПравоДоступа("Использование", Метаданные.Обработки.АвтоПолучениеОтправкаЭлектронныхПисем) Тогда
		//	глОбработкаАвтоПолученияОтправкиЭлектронныхПисем = Обработки.АвтоПолучениеОтправкаЭлектронныхПисем.ПолучитьФорму();
		//КонецЕсли; 
		
		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "АвтооткрытиеМенеджераКонтактовПриЗапускеПрограммы") = Истина Тогда
			Если ПравоДоступа("Использование", Метаданные.Обработки.МенеджерКонтактов) Тогда
				Обработки.МенеджерКонтактов.ПолучитьФорму().Открыть();
			Иначе
				ОбщегоНазначения.Сообщение("Недостаточно прав доступа к обработке ""Менеджер контактов"". Обратитесь к администратору пользователей.", Перечисления.ВидыСообщений.ВажнаяИнформация);
			КонецЕсли; 
		КонецЕсли; 

		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "АвтооткрытиеФормыРабочегоМестаМенеджераПоПродажамПриЗапускеПрограммы") = Истина Тогда
			Если ПравоДоступа("Использование", Метаданные.Обработки.РабочееМестоМенеджераПоПродажам) Тогда
				Обработки.РабочееМестоМенеджераПоПродажам.ПолучитьФорму().Открыть();
			Иначе
				ОбщегоНазначения.Сообщение("Недостаточно прав доступа к обработке ""Рабочее место менеджера по продажам"". Обратитесь к администратору пользователей.", Перечисления.ВидыСообщений.ВажнаяИнформация);
			КонецЕсли; 
		КонецЕсли;
		
		ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
		
		Если ЭтоФайловаяИБ Тогда
						
			ПользовательДляВыполненияРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
			
			Если глЗначениеПеременной("глТекущийПользователь") = ПользовательДляВыполненияРеглЗаданий Тогда
				
				// с интервалом секунд вызываем процедуру работы с регламентными заданиями
				ПоддержкаРегламентныхЗаданиеДляФайловойВерсии();
				
				ИнтервалДляОпроса = Константы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Получить();
				
				Если ИнтервалДляОпроса = Неопределено
					ИЛИ ИнтервалДляОпроса = 0 Тогда
					
					ИнтервалДляОпроса = 60;	
					
				КонецЕсли;
				
				ПодключитьОбработчикОжидания("ПоддержкаРегламентныхЗаданиеДляФайловойВерсии", ИнтервалДляОпроса);
		
			КонецЕсли;
			
		КонецЕсли;

		Если глЗначениеПеременной("глОбработкаАвтоОбменДанными") <> Неопределено Тогда
			// подключим обработчик обменов данными
			ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));
		КонецЕсли;
		
		// защищенный документооборот с ФНС
		Если ИнициализироватьКонтекстДокументооборотаСНалоговымиОрганами() Тогда
			ПодключитьОбработчикАвтообменаСНалоговымиОрганами();
			ПроверитьОтветыНаЗаявленияНаПодключение();
			ПодключитьОбработчикОжидания("ПроверитьОтветыНаЗаявленияНаПодключение", 86400); // = 24(ч)*60(мин)*60(сек) = 1 сутки
			ПодключитьОбработчикОжидания("ПредупредитьОбИстеченииСертификатов", 900, Истина); // = 15(мин)*60(сек)
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьПроверкуДинамическогоОбновленияИБ();

	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗагружатьАктуальныеКурсыВалютПриЗапускеСистемы") = Истина Тогда
		Если ПравоДоступа("Использование", Метаданные.Обработки.КурсыВалютРБК) Тогда
			ОбработкаЗагрузкиКурсовВалют = Обработки.КурсыВалютРБК.Создать();
			ОбработкаЗагрузкиКурсовВалют.УстановитьПериодЗагрузки();
			ОбработкаЗагрузкиКурсовВалют.ЗаполнитьВалюты(Истина);
			ОбработкаЗагрузкиКурсовВалют.ЗагрузитьКурсыСРБК();
		Иначе
			ОбщегоНазначения.Сообщение("Недостаточно прав доступа к обработке ""Загрузка курсов валют с РБК"". Курсы валют не загружены. Обратитесь к администратору пользователей.", Перечисления.ВидыСообщений.ВажнаяИнформация);
		КонецЕсли; 
	КонецЕсли;

	Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ИспользованиеТорговогоОборудования") Тогда
		мКлиентOnline = Обработки.ТОКлиентККМOnline.Создать();
		мКлиентOnline.НачатьРаботу();
	КонецЕсли;
	
	МодульОбычногоПриложенияПереопределяемый.ИнициализироватьСтартовуюФорму();	
	
	ПолучитьВнешниеКомпонентыПриНеобходимости();
	
	// Календарь бухгалтера. Регламентированная отчетность.
	ПроверитьНапоминанияКалендарьБухгалтераСобытия();

	// Открытие дополнительной информации
	Форма = Обработки.ДополнительнаяИнформация.ПолучитьФорму("ФормаРабочийСтол");
	Форма.Открыть();
	
	// ОбновлениеКонфигурации
	ОбновлениеКонфигурацииКлиент.ПроверитьОбновлениеКонфигурации();	
	// Конец ОбновлениеКонфигурации
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОткрыватьПриЗапускеСписокТекущихЗадачПользователя") Тогда
		Задачи.ЗадачаИсполнителя.ПолучитьФормуСписка().Открыть();
	КонецЕсли;
		
	РабочийСтолПереопределяемый.ИнициализироватьРабочийСтол();
	
	//Добавление обязательных значений в кеш ОбщиеЗначения
	РаботаСОбщимиПеременными.ДобавитьОбязательныеЗначенияВКэш();
	
	//РаботаСВнешнимОборудованием
	МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы();
	//Конец РаботаСВнешнимОборудованием
	
	//начало изменений 
	 ПараметрыСеанса.ПРГ_КаталогХраненияФайлов = "";
	 ИмяКаталога = СокрЛп(Константы.ПРГ_КаталогХраненияФайлов.Получить());
	 Если Прав(ИмяКаталога,1) <> "\" Тогда
			 ИмяКаталога = ИмяКаталога+"\";
	 КонецЕсли;	
	 СтрокаПодкл = СокрЛП(Константы.ПРГ_СтрокаПодключения.Получить());
     КаталогНаДиске = Новый Файл(ИмяКаталога);
	 Если КаталогНаДиске.Существует()
			и Нрег(СтрокаПодкл) = Нрег(СтрокаСоединенияИнформационнойБазы())
			Тогда
			  ПараметрыСеанса.ПРГ_КаталогХраненияФайлов = ИмяКаталога;
	 Иначе
			  ПараметрыСеанса.ПРГ_КаталогХраненияФайлов = "";
	 КонецЕсли;
	
	//конец изменений 
	//начало изменений внешние файлы
	Попытка
		глОбъектМД5 = Новый COMОбъект("XStandard.MD5");	
	Исключение
		глОбъектМД5 = Неопределено;
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОшибкаЗагрузкиДЛМД5", 
        УровеньЖурналаРегистрации.Ошибка, , ,
        "Ошибка загрузки XStandard.MD5");
	КонецПопытки; 
	
	//конец изменений внешние файлы 
	//начало изменений обработчик ожидания для границы
	ПодключитьОбработчикОжидания("ПРГ_ОбрабочикИзмененияГраницы",190,Ложь);	
	//конец изменений
КонецПроцедуры

// Перед завершением работы системы
//
Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	ЗапрашиватьПотверждение = 
		ПропуститьПредупреждениеПередЗавершениемРаботыСистемы <> Истина
		И глЗначениеПеременной("глЗапрашиватьПодтверждениеПриЗакрытии") <> Ложь
		И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ЗапрашиватьПодтверждениеПриЗакрытии") = Истина;
	
	Если ЗапрашиватьПотверждение Тогда
		Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
		Отказ = (Ответ = КодВозвратаДиалога.Нет);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// отдельно получаем настройки для которых нужно выполнить обмен при выходе из программы
	ПроцедурыОбменаДанными.ВыполнитьОбменПриЗавершенииРаботыПрограммы(глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
	
	//РаботаСВнешнимОборудованием
	МенеджерОборудованияКлиент.ПередЗавершениемРаботыСистемы();
	//Конец РаботаСВнешнимОборудованием

КонецПроцедуры

// Процедура осуществляет обработку события "При завершении работы системы".
// Данное событие возникает перед завершением работы в режиме 1С:Предприятие
// после закрытия главного окна.
// В данной процедуре могут быть выполнены действия, необходимые при выходе
// из программы.
// Примечание:
// В данной процедуре не допускаются открытие форм и других окон, не
// поддерживаются выдача сообщений, установка текста в панели состояния,
// а также другие действия, требующие наличия главного окна.
//
// Параметры:
//  Нет.
//
Процедура ПриЗавершенииРаботыСистемы()

	Если мКлиентOnline <> Неопределено Тогда
		мКлиентOnline.ЗавершитьРаботу();
	КонецЕсли;
	
	// Показ финальной дополнительной информации
	Форма = Обработки.ДополнительнаяИнформация.Создать();
	Форма.ВыполнитьДействие();

КонецПроцедуры // ПриЗавершенииРаботыСистемы()

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в данной процедуре.
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)

	Если мКлиентOnline <> Неопределено Тогда
		мКлиентOnline.ВнешнееСобытие(Источник, Событие, Данные);
	КонецЕсли;

	ПолучитьСерверТО().ЗавершитьОбработкуВнешнегоСобытия(Источник, Событие, Данные);

КонецПроцедуры // ВнешнееСобытие()


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура проверяет Напоминания
//
Процедура ПроверитьНапоминания() Экспорт
	
	УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"));
	
КонецПроцедуры

// ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия
//
Процедура ПроверитьНапоминанияКалендарьБухгалтераСобытия() Экспорт
	РегламентированнаяОтчетность.ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия(глЗначениеПеременной("глТекущийПользователь"));
КонецПроцедуры // ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия

// Процедура проверяет и при необходимости подключает обработчик ожидания
// на запуск процедуры ПроверитьНапоминания()
//
// Параметры:
//  Нет.
//
Процедура ПроверитьПодключениеОбработчикаОжидания(ПроверятьДеньРождения = Ложь) Экспорт
	
	ИнтервалПроверкиНапоминанийВСекундах = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
	
	Если глЗначениеПеременной("глТекущийПользователь") <> Неопределено
		 И ТипЗнч(глЗначениеПеременной("глТекущийПользователь")) = Тип("СправочникСсылка.Пользователи")
		 И НЕ глЗначениеПеременной("глТекущийПользователь").Пустая()
		 И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьНапоминания")
		 И ИнтервалПроверкиНапоминанийВСекундах > 0 Тогда
		 
		ПодключитьОбработчикОжидания("ПроверитьНапоминания", ИнтервалПроверкиНапоминанийВСекундах);

		УправлениеКонтактами.ПроверитьНапоминанияПользователя(глЗначениеПеременной("глТекущийПользователь"), ПроверятьДеньРождения);

	Иначе
		
		ОтключитьОбработчикОжидания("ПроверитьНапоминания");
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура осуществляет проверку на необходимость обмена данными с заданным интервалом
//
Процедура ПроверкаОбменаДанными() Экспорт

	Если глЗначениеПеременной("глОбработкаАвтоОбменДанными") = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ОтключитьОбработчикОжидания("ПроверкаОбменаДанными");
	
	// проводим обмен данными
	глЗначениеПеременной("глОбработкаАвтоОбменДанными").ПровестиОбменДанными(); 
		
	ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глЗначениеПеременной("глКоличествоСекундОпросаОбмена"));


КонецПроцедуры


// Открывает форму текущего пользователя для изменения его настроек.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуТекущегоПользователя() Экспорт

	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан текущий пользователь.");
	Иначе
		Форма = глЗначениеПеременной("глТекущийПользователь").ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуТекущегоПользователя()

// Функция вызова формы редактирования настройки файла обновления конфигурации
//
Процедура ОткрытьФормуРедактированияНастройкиФайлаОбновления() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		
		Предупреждение("Нет прав на чтение данных константы ""Настройка файла обновления конфигурации""", 30, "Настройка файла обновления конфигурации");		
		Возврат;
		
	КонецЕсли;

	ФормаРедактирования = ПолучитьОбщуюФорму("НастройкаФайлаОбновленияКонфигурации");
	ФормаРедактирования.СтруктураПараметров = ПроцедурыОбменаДанными.ПолучитьНастройкиДляФайлаОбновленияКонфигурации(); 
	ФормаРедактирования.Открыть();
	
КонецПроцедуры

// Процедура служит для поддержки работы регламентных заданий в файловой версии
//
Процедура ПоддержкаРегламентныхЗаданиеДляФайловойВерсии() Экспорт
	
	ВыполнитьОбработкуЗаданий();
	
КонецПроцедуры

// Функция возвращает объект для взаимодействия с торговым оборудованием.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  <ОбработкаОбъект> - Объект для взаимодействия с торговым оборудованием.
//
Функция ПолучитьСерверТО() Экспорт

	Если глСерверТО = Неопределено Тогда
		глСерверТО = Обработки.ТОСервер.Создать();
	КонецЕсли;

	Возврат глСерверТО;

КонецФункции // ПолучитьСерверТО()


////////////////////////////////////////////////////////////////////////////////
// ДОКУМЕНТООБОРОТ С НАЛОГОВЫМИ ОРГАНАМИ

Функция ИнициализироватьКонтекстДокументооборотаСНалоговымиОрганами() Экспорт
	
	ЭтоПерваяИтерация = Истина;
	ИнициализироватьКонтекст = Истина;
	Пока ИнициализироватьКонтекст Цикл
	
		ИнициализироватьКонтекст = Ложь;
		
		// если подключена внешняя обработка, то используем ее
		Если ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль)
		И ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль) Тогда
			
			// если подключена внешняя обработка, то используем ее
			Если Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Получить() Тогда
				ВнешниеОбъектыХранилище = Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль;
				ДвоичныеДанныеОбработки = ВнешниеОбъектыХранилище.Получить().Получить();
				Если ДвоичныеДанныеОбработки <> Неопределено Тогда
					ИмяФайлаОбработки = ПолучитьИмяВременногоФайла("epf");
					ДвоичныеДанныеОбработки.Записать(ИмяФайлаОбработки);
					Попытка
						КонтекстЭДО = ВнешниеОбработки.Создать(ИмяФайлаОбработки);
					Исключение
						Сообщить("Не удалось загрузить внешний модуль для документооборота с налоговыми органами:
								|" + ИнформацияОбОшибке().Описание + "
								|Будет использован модуль, встроенный в конфигурацию.", СтатусСообщения.Важное);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// если внешняя не подключена, то используем встроенную
		Если КонтекстЭДО = Неопределено И ПравоДоступа("Использование", Метаданные.Обработки.ДокументооборотСКонтролирующимиОрганами) Тогда
			КонтекстЭДО = Обработки.ДокументооборотСКонтролирующимиОрганами.Создать();
		КонецЕсли;
		
		// обновляем модуль документооборота с ФНС из Интернет при необходимости
		Если ЭтоПерваяИтерация И КонтекстЭДО <> Неопределено Тогда
			Попытка
				//Blik 67182 010917 не проверяем на обновление, тк обносление только в ручном режиме
				//МодульОбновлен = КонтекстЭДО.ОбновитьМодульДокументооборотаСФНСПриНеобходимости();
				//Если МодульОбновлен Тогда
				//	ИнициализироватьКонтекст = Истина;
				//КонецЕсли;
				//Blik 67182 010917 к
			Исключение
				Сообщить("Не удалось проверить доступность обновления модуля документооборота с ФНС по причине внутренней ошибки:
						|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
		
		ЭтоПерваяИтерация = Ложь;
		
	КонецЦикла;
	
	Возврат (КонтекстЭДО <> Неопределено);
	
КонецФункции

Процедура ОбработчикАвтообменаСНалоговымиОрганами() Экспорт
	
	Если КонтекстЭДО <> Неопределено Тогда
		КонтекстЭДО.ОбработчикАвтообмена();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьОбработчикАвтообменаСНалоговымиОрганами()
	
	Если РольДоступна("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами") ИЛИ РольДоступна("ПолныеПрава") Тогда
		Если КонтекстЭДО <> Неопределено Тогда
			Попытка
				КонтекстЭДО.ПодключитьОбработчикАвтообменаСНалоговымиОрганами();
			Исключение
				Сообщить("Не удалось инициализировать обработчик автоматического обмена с контролирующими органами:
								|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОтветыНаЗаявленияНаПодключение() Экспорт
	
	Если КонтекстЭДО <> Неопределено Тогда
		КонтекстЭДО.ПроверитьОтветыНаЗаявленияНаПодключениеЛокальная();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредупредитьОбИстеченииСертификатов() Экспорт
	
	Если КонтекстЭДО <> Неопределено Тогда
		КонтекстЭДО.ПредупредитьОбИстеченииСертификатовЛокальная();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура подключает внешние компоненты, которые поставляются с конфигурацией.
//
Процедура ПолучитьВнешниеКомпонентыПриНеобходимости()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеКомпоненты.ИмяФайла,
	|	ВнешниеКомпоненты.ДатаИзмененияФайла
	|ИЗ
	|	РегистрСведений.ВнешниеКомпоненты КАК ВнешниеКомпоненты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Файл = Новый Файл(КаталогПрограммы()+ Выборка.ИмяФайла);
		
		Если Не Файл.Существует() Или Не Файл.ПолучитьВремяИзменения() = Выборка.ДатаИзмененияФайла Тогда
			НаборЗаписей = РегистрыСведений.ВнешниеКомпоненты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИмяФайла.Установить(Выборка.ИмяФайла);
			НаборЗаписей.Прочитать();
			
			Попытка
				НаборЗаписей[0].ХранилищеФайла.Получить().Записать(КаталогПрограммы()+ Выборка.ИмяФайла);
				Файл = Новый Файл(КаталогПрограммы()+ Выборка.ИмяФайла);
				Файл.УстановитьВремяИзменения(Выборка.ДатаИзмененияФайла);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьВнешниеКомпонентыПриНеобходимости()

// Обработать параметр запуска программы.
// Реализация функции может быть расширена для обработки новых параметров.
//
// Параметры
//  ПараметрЗапуска  – Строка – параметр запуска, переданный в конфигурацию 
//								с помощью ключа командной строки /C.
//
// Возвращаемое значение:
//   Булево   – Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска(Знач ПараметрЗапуска)

	// есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	Результат = СоединенияИБКлиент.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	Возврат Результат;

КонецФункции 

// Процедура выполняет запуск отчетов, у которых установлен признак "Формировать при входе в систему"
//
Процедура СформироватьОтчеты()
	
	ВыбраннаяНастройка = ВосстановитьЗначение("ОбработкаРапортРуководителю_Настройки");
	Если НЕ ВыбраннаяНастройка = Неопределено Тогда
		
		Параметры = Неопределено;
		Если ВыбраннаяНастройка.Свойство("_ДанныеФормы", Параметры) Тогда
			АвтоЗапуск = Неопределено;
			Параметры.Свойство("ФормироватьПриСтартеСистемы", АвтоЗапуск);
			Если НЕ АвтоЗапуск = Неопределено И АвтоЗапуск Тогда
				НовыйОтчет = Отчеты.РапортРуководителю.Создать();
				НовыйОтчетФорма = НовыйОтчет.ПолучитьФорму("ФормаГлавная");
				НовыйОтчетФорма.НачальноеЗначениеВыбора = Истина;
				НовыйОтчетФорма.Открыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//начало изменеий 
Процедура ПРГ_ОбрабочикИзмененияГраницы() Экспорт 
	СчетчикВБазе = Константы.ПРГ_СчетчикИзменений.Получить();
	Если ПараметрыСеанса.ПРГ_СчетчикИзменений <> СчетчикВБазе  Тогда
		ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
		//убрать ниже
		//Сообщить("Прошло обновление");
		//начало изменений Ожиганов А. 06.06.2017 б/н обновление данных по границе запрета изменения данных МСФО 
		ПРГ_Привелегированный.УстановитьПараметрГраницыЗапретаИзмененияДанныхМСФО();
		//конец изменений 
		ПараметрыСеанса.ПРГ_СчетчикИзменений = СчетчикВБазе;
	КонецЕсли;	
КонецПроцедуры 	