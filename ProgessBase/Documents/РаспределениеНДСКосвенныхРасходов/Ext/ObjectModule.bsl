Перем мУдалятьДвижения Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мКэшВидовСубконтоПоСчетам;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ВЫВОДА ПЕЧАТНОЙ ФОРМЫ ДОКУМЕНТА

#Если Клиент Тогда

Функция ПечатьОтчетаОРаспределенииНДСКосвенныхРасходов()
	
	Отчет = Отчеты.РаспределениеНДСКосвенныхРасходов.Создать();
	Отчет.Организация = Организация;
	Отчет.ДокументРаспределения = ЭтотОбъект.Ссылка;
	Отчет.ВыручкаПоДокументам = Истина;
	Отчет.ДатаНач = НачалоПериода;
	Отчет.ДатаКон = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, НачалоПериода);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ВысотаЗаголовка = 0;
	
	Отчет.СформироватьОтчет(ТабличныйДокумент, Истина, ВысотаЗаголовка);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "РаспределениеНДСПоКосвеннымРасходам" Тогда
		
		ТабДокумент = ПечатьОтчетаОРаспределенииНДСКосвенныхРасходов();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("РаспределениеНДСПоКосвеннымРасходам", "Распределение НДС по косвенным расходам");
	

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ АВТОЗАПОЛНЕНИЯ ДОКУМЕНТА

Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ОшибкаЗаполнения = Истина;
			СтрокаСообщения = " перед заполнением требуется отменить проведение документа";
			Если Сообщать Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
			КонецЕсли; 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Расчет выручки от реализации
	РассчитатьВыручку();
	Если ВыручкаЕНВД = 0 и ВыручкаБезНДС = 0 и ВыручкаНДС0 = 0 и ВыручкаНДС = 0 тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС + " - отсутствует выручка от реализации"
	КонецЕсли;

	// Заполнение списка расходов к распределению
	ЗаполнитьТабличныеЧастиПоКосвеннымРасходам();
	Если СоставКосвенныхРасходов.Количество() = 0 Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС + " - не обнаружены расходы к распределению"
	КонецЕсли; 
	
    Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	// Распределение косвенных расходов по выручке
	РаспределитьПоВыручке();
	
КонецПроцедуры

// Функция определяет счет затрат по деятельности, облагаемой ЕНВД.
//
Функция ПолучитьСчетЗатратЕНВД(СчетЗатрат) Экспорт
	
	Родитель = СчетЗатрат.Родитель;
	Если Родитель = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваОблагаемоеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыОблагаемыеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыОблагаемыеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.БракВПроизводстве Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.БракВПроизводствеОблагаемоеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваОблагаемоеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.ИздержкиОбращения Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияОблагаемыеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.КоммерческиеРасходы Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыОблагаемыеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.ПрочиеРасходы Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ПрочиеРасходыОблагаемыеЕНВД;
	КонецЕсли;
	
	Возврат СчетЗатратЕНВД;
	
КонецФункции // ПолучитьСчетЗатратЕНВД()

// Функция определяет счет затрат по деятельности, не облагаемой ЕНВД.
//
Функция ПолучитьСчетЗатратНеЕНВД(СчетЗатрат) Экспорт
	
	Родитель = СчетЗатрат.Родитель;
	Если Родитель = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваНеОблагаемоеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыНеОблагаемыеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.БракВПроизводстве Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.БракВПроизводствеНеОблагаемоеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваНеОблагаемоеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.ИздержкиОбращения Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияНеОблагаемыеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.КоммерческиеРасходы Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД;
	ИначеЕсли Родитель = ПланыСчетов.Хозрасчетный.ПрочиеРасходы Тогда
		СчетЗатратЕНВД = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
	КонецЕсли;
	
	Возврат СчетЗатратЕНВД;
	
КонецФункции // ПолучитьСчетЗатратНеЕНВД()

// Процедура вызывается по кнопке "Распределить" в форме диалога документа.
// В процедуре реализуется алгоритм распределения косвенных расходов в табличной
// части "СоставКосвенныхРасходов" на различные виды реализации в текущем периоде.
//
Процедура РаспределитьПоВыручке() Экспорт

	БазаРаспределенияСЕНВД = ВыручкаНДС + ВыручкаБезНДС + ВыручкаЕНВД + ВыручкаНДС0;
	БазаРаспределенияБезЕНВД =  ВыручкаНДС + ВыручкаБезНДС + ВыручкаНДС0;

	Если БазаРаспределенияСЕНВД = 0 Тогда
		Сообщить("На закладке ""Выручка от реализации"" не указаны параметры реализации!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Для Каждого СтрТабЧасти Из СоставКосвенныхРасходов Цикл
		
		Если СтрТабЧасти.БазисРаспределенияВключаетЕНВД Тогда
		    БазаРаспределения = БазаРаспределенияСЕНВД;
		Иначе
		    БазаРаспределения = БазаРаспределенияБезЕНВД;
		КонецЕсли; 

		УчтеноСуммы   = 0;
		УчтеноНДС     = 0;
		УчтеноВыручки = 0;

		Если ВыручкаНДС <> 0 Тогда

			СтрТабЧасти.НДССумма = Окр(СтрТабЧасти.СуммаВсего * (ВыручкаНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммы;
			СтрТабЧасти.НДС      = Окр(СтрТабЧасти.НДСВсего * (ВыручкаНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

			УчтеноСуммы     = УчтеноСуммы + СтрТабЧасти.НДССумма;
			УчтеноНДС       = УчтеноНДС + СтрТабЧасти.НДС;
			УчтеноВыручки   = УчтеноВыручки + ВыручкаНДС;

		Иначе
			СтрТабЧасти.НДССумма = 0;
			СтрТабЧасти.НДС      = 0;
		КонецЕсли;

		Если ВыручкаБезНДС <> 0 Тогда

			СтрТабЧасти.БезНДССумма = Окр(СтрТабЧасти.СуммаВсего * (ВыручкаБезНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммы;
			СтрТабЧасти.БезНДС      = Окр(СтрТабЧасти.НДСВсего * (ВыручкаБезНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

			УчтеноСуммы   = УчтеноСуммы + СтрТабЧасти.БезНДССумма;
			УчтеноНДС     = УчтеноНДС + СтрТабЧасти.БезНДС;
			УчтеноВыручки = УчтеноВыручки + ВыручкаБезНДС;

		Иначе
			СтрТабЧасти.БезНДССумма = 0;
			СтрТабЧасти.БезНДС      = 0;

		КонецЕсли;

		Если ВыручкаЕНВД <> 0 и СтрТабЧасти.БазисРаспределенияВключаетЕНВД Тогда

			СтрТабЧасти.ЕНВДСумма = Окр(СтрТабЧасти.СуммаВсего * (ВыручкаЕНВД + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммы;
			СтрТабЧасти.ЕНВДНДС   = Окр(СтрТабЧасти.НДСВсего *   (ВыручкаЕНВД + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

			УчтеноСуммы   = УчтеноСуммы + СтрТабЧасти.ЕНВДСумма;
			УчтеноНДС     = УчтеноНДС + СтрТабЧасти.ЕНВДНДС;
			УчтеноВыручки = УчтеноВыручки + ВыручкаЕНВД;

		Иначе
			СтрТабЧасти.ЕНВДСумма = 0;
			СтрТабЧасти.ЕНВДНДС   = 0;

		КонецЕсли;
		
		Если ВыручкаНДС0 <> 0 Тогда

			СтрТабЧасти.НДС0Сумма = Окр(СтрТабЧасти.СуммаВсего * (ВыручкаНДС0 + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммы;
			СтрТабЧасти.НДС0      = Окр(СтрТабЧасти.НДСВсего * (ВыручкаНДС0 + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

			УчтеноСуммы   = УчтеноСуммы + СтрТабЧасти.НДС0Сумма;
			УчтеноНДС     = УчтеноНДС + СтрТабЧасти.НДС0;
			УчтеноВыручки = УчтеноВыручки + ВыручкаНДС0;

		Иначе
			СтрТабЧасти.НДС0Сумма = 0;
			СтрТабЧасти.НДС0      = 0;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // РаспределитьПоВыручке()

// Процедура вызывается по кнопке "Рассчитать" из формы диалога документа.
// Выполняется расчет объемов реализации в текущем периоде по данным
// регистра НДСПродажи в разрезе различных ставок НДС.
//
Процедура РассчитатьВыручку() Экспорт

	ВыручкаЕНВД   = 0;
	ВыручкаБезНДС = 0;
	ВыручкаНДС0   = 0;
	ВыручкаНДС    = 0;

	Отказ = Ложь;
	КонецПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, НачалоПериода, Отказ);
	
	Если Не Отказ Тогда
		УчетНДС.РассчитатьВыручкуДляНДС(Организация, НачалоПериода, КонецПериода, ВыручкаЕНВД, ВыручкаБезНДС, ВыручкаНДС0, ВыручкаНДС);
	КонецЕсли;

КонецПроцедуры // РассчитатьВыручку()

// Заполнение табличной части документа по регистру НДСКосвенныхРасходов
//
Процедура ЗаполнитьТабличныеЧастиПоКосвеннымРасходам(ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СоставКосвенныхРасходов.Очистить();
	СчетаУчетаРасходов.Очистить();
	
	//m.ionov@a-prof.ru 17.04.2014
	Если ЗаполнитьПоНДСПредъявленный Тогда
		ЗаполнитьТабличныеЧастиПоНДСПредъявленный(Организация, НачалоПериода, Дата);
		ВыручкаБезНДС = 0;
		Возврат;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	Результат = ПолучитьВыборкуИзРегистраНДСКосвенныеРасходы(Организация, НачалоПериода, Дата);
		
	КонтрагентПоСчетуФактуре = ПолучитьСписокКонтрагентовПоСчетамФактурам(Организация, Результат.Выгрузить());
	
	Ключ = 1;
	ВыборкаПоСчетуФактуре = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаПоСчетуФактуре.Следующий() Цикл
		
		ВыборкаПоВидуЦенности = ВыборкаПоСчетуФактуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Контрагент = КонтрагентПоСчетуФактуре.Найти(ВыборкаПоСчетуФактуре.СчетФактура,"СчетФактура");
		
		Пока ВыборкаПоВидуЦенности.Следующий() Цикл
				
			ВыборкаПоСтавкеНДС = ВыборкаПоВидуЦенности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				
				Пока ВыборкаПоСтавкеНДС.Следующий() Цикл
					
					ВыборкаПоСчетуУчетаНДС = ВыборкаПоСтавкеНДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
					
					Пока ВыборкаПоСчетуУчетаНДС.Следующий() Цикл
						
						ВыборкаПоВключениюНДСВСтоимость = ВыборкаПоСчетуУчетаНДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
						
						Пока ВыборкаПоВключениюНДСВСтоимость.Следующий() Цикл
					
						ВыборкаПоБазисуРаспределения = ВыборкаПоВключениюНДСВСтоимость.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
						
						РассчитатьСуммуКОтражению = (ВыборкаПоБазисуРаспределения.Количество()>1);
						
						Если РассчитатьСуммуКОтражению Тогда
							НомерПервойСтрокиКосвенныхРасходовКзаполнению = СоставКосвенныхРасходов.Количество();
							БазисРаспределенияСНДС = Новый Массив();
							БазисРаспределенияНДС = Новый Массив();
						КонецЕсли; 
						
						Пока ВыборкаПоБазисуРаспределения.Следующий() Цикл
							
							Если РассчитатьСуммуКОтражению Тогда
								БазисРаспределенияСНДС.Добавить(0);
								БазисРаспределенияНДС.Добавить(0);
							КонецЕсли;
							
							ПолучитьСуммуИзВыборки = Истина;
							
							
							НоваяСтрока = СоставКосвенныхРасходов.Добавить();
							
							НоваяСтрока.ВидЦенности = ВыборкаПоБазисуРаспределения.ВидЦенности;
							НоваяСтрока.Поставщик   = ?(Контрагент <> Неопределено, Контрагент.Поставщик, Справочники.Контрагенты.ПустаяСсылка());					НоваяСтрока.СчетФактура = ВыборкаПоСчетуФактуре.СчетФактура;
							НоваяСтрока.СтавкаНДС   = ВыборкаПоБазисуРаспределения.СтавкаНДС;
							НоваяСтрока.СчетУчетаНДС= ВыборкаПоБазисуРаспределения.СчетУчетаНДС;
							НоваяСтрока.НДСВключенВСтоимость = ВыборкаПоБазисуРаспределения.НДСВключенВСтоимость;
							
							НоваяСтрока.БазисРаспределенияВключаетЕНВД    = ВыборкаПоБазисуРаспределения.БазисРаспределенияВключаетЕНВД;
							НоваяСтрока.КлючСтроки  = Ключ;
							
							Выборка = ВыборкаПоБазисуРаспределения.Выбрать();
							
							
							Пока Выборка.Следующий() Цикл
								
								Если РассчитатьСуммуКОтражению Тогда
									БазисРаспределенияСНДС[БазисРаспределенияСНДС.Количество()-1] = БазисРаспределенияСНДС[БазисРаспределенияСНДС.Количество()-1] + Выборка.СуммаБезНДСПроводка+Выборка.НДСПроводка;
									БазисРаспределенияНДС[БазисРаспределенияНДС.Количество()-1] = БазисРаспределенияНДС[БазисРаспределенияНДС.Количество()-1] +Выборка.НДСПроводка;
									Если ПолучитьСуммуИзВыборки Тогда
										СуммаСНДСкРаспределению	= Выборка.СуммаБезНДС+Выборка.НДС;
										НДСКРаспределению		= Выборка.НДС;
									КонецЕсли;
								ИначеЕсли ПолучитьСуммуИзВыборки Тогда
									НоваяСтрока.СуммаВсего  = Выборка.СуммаБезНДС;
									НоваяСтрока.НДСВсего    = Выборка.НДС;
								КонецЕсли;
								
								Если Не Выборка.ЕНВД Тогда
									СчетЗатрат = Выборка.СчетЗатрат;
									СчетЗатратЕНВД = ПолучитьСчетЗатратЕНВД(СчетЗатрат);
									
								ИначеЕсли Выборка.ЕНВД И Не Выборка.БазисРаспределенияВключаетЕНВД Тогда
									СчетЗатратЕНВД = Выборка.СчетЗатрат;
									СчетЗатрат = ПолучитьСчетЗатратНеЕНВД(СчетЗатратЕНВД);
									
								Иначе
									СчетЗатрат = ПолучитьСчетЗатратНеЕНВД(Выборка.СчетЗатрат);
									СчетЗатратЕНВД = ПолучитьСчетЗатратЕНВД(Выборка.СчетЗатрат);
								КонецЕсли;
								
								НоваяСтрокаСчетов = СчетаУчетаРасходов.Добавить();
								НоваяСтрокаСчетов.КлючСтроки  				= Ключ;
								
								НоваяСтрокаСчетов.СчетЗатрат  				= СчетЗатрат;
								НоваяСтрокаСчетов.СчетЗатратЕНВД			= СчетЗатратЕНВД;
								НоваяСтрокаСчетов.СтатьяЗатрат 				= Выборка.СтатьяЗатрат;
								НоваяСтрокаСчетов.ПодразделениеОрганизации 	= Выборка.Подразделение;
								НоваяСтрокаСчетов.НоменклатурнаяГруппа 		= Выборка.НоменклатурнаяГруппа;
								НоваяСтрокаСчетов.Заказ 					= Выборка.Заказ;
								
								НоваяСтрокаСчетов.Затрата 					= Выборка.Затрата;
								НоваяСтрокаСчетов.ХарактеристикаЗатраты		= Выборка.ХарактеристикаЗатраты;
								НоваяСтрокаСчетов.СерияЗатраты 				= Выборка.СерияЗатраты;
								
								НоваяСтрокаСчетов.СчетЗатрат 	 = СчетЗатрат;
								НоваяСтрокаСчетов.СчетЗатратЕНВД = СчетЗатратЕНВД;
								НоваяСтрокаСчетов.Субконто1  	 = Выборка.Субконто1;
								НоваяСтрокаСчетов.Субконто2   = Выборка.Субконто2;
								НоваяСтрокаСчетов.Субконто3   = Выборка.Субконто3;
								НоваяСтрокаСчетов.СуммаБезНДС = Выборка.СуммаБезНДСПроводка;
								НоваяСтрокаСчетов.НДС         = Выборка.НДСПроводка;
								НоваяСтрокаСчетов.ОтражатьВНалоговомУчете = Выборка.ОтражатьВНалоговомУчете;
								
								Если Выборка.ОтражатьВНалоговомУчете Тогда
									НоваяСтрокаСчетов.СчетЗатратНУ  = Выборка.СчетЗатратНУ;
									НоваяСтрокаСчетов.СубконтоНУ1   = Выборка.СубконтоНУ1;
									НоваяСтрокаСчетов.СубконтоНУ2   = Выборка.СубконтоНУ2;
									НоваяСтрокаСчетов.СубконтоНУ3   = Выборка.СубконтоНУ3;
								КонецЕсли;					
								
								ПолучитьСуммуИзВыборки = Ложь;
								
							КонецЦикла;
							
							Ключ = Ключ + 1;
						
							
						КонецЦикла; // Пока ВыборкаПоБазисуРаспределения
						
						Если РассчитатьСуммуКОтражению Тогда
							Если не СуммаСНДСкРаспределению = 0 Тогда
								СуммаСНДСРезультатРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СуммаСНДСкРаспределению,БазисРаспределенияСНДС);
							КонецЕсли; 
							Если не НДСКРаспределению = 0 Тогда
								НДСРезультатРаспределения = ОбщегоНазначения.РаспределитьПропорционально(НДСкРаспределению,БазисРаспределенияНДС);
							КонецЕсли; 
							
							Для ИндексСтрокиТекущейВыборки = 0 По БазисРаспределенияСНДС.Количество()-1 Цикл
								СоставКосвенныхРасходов[НомерПервойСтрокиКосвенныхРасходовКзаполнению+ИндексСтрокиТекущейВыборки].НДСВсего =?(НДСкРаспределению = 0, 0 ,НДСРезультатРаспределения[ИндексСтрокиТекущейВыборки]);
								СоставКосвенныхРасходов[НомерПервойСтрокиКосвенныхРасходовКзаполнению+ИндексСтрокиТекущейВыборки].СуммаВсего =
									?(СуммаСНДСкРаспределению = 0, 0 ,СуммаСНДСРезультатРаспределения[ИндексСтрокиТекущейВыборки])
									- СоставКосвенныхРасходов[НомерПервойСтрокиКосвенныхРасходовКзаполнению+ИндексСтрокиТекущейВыборки].НДСВсего;
							КонецЦикла; 
						КонецЕсли;
						
					КонецЦикла; // Пока ВыборкаПоВключениюНДСВСтоимость
					
				КонецЦикла; // Пока ВыборкаПоСчетуУчетаНДС
					
			КонецЦикла; // Пока ВыборкаПоСтавкеНДС
				
		КонецЦикла; // Пока ВыборкаПоВидуЦенности
		
	КонецЦикла; // Пока ВыборкаПоСчетуФактуре
		
КонецПроцедуры	

//Возвращает выборку по регистру НДС по косвенным расходам за период с итогами по измерениям 
Функция ПолучитьВыборкуИзРегистраНДСКосвенныеРасходы(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСКосвенныеРасходы.СчетФактура КАК СчетФактура,
	|	НДСКосвенныеРасходы.ВидЦенности КАК ВидЦенности,
	|	НДСКосвенныеРасходы.СтавкаНДС КАК СтавкаНДС,
	|	НДСКосвенныеРасходы.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСКосвенныеРасходы.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	СУММА(НДСКосвенныеРасходы.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(НДСКосвенныеРасходы.НДС) КАК НДС,
	|	НДСКосвенныеРасходы.СтатьяЗатрат КАК СтатьяЗатрат,
	|	НДСКосвенныеРасходы.Подразделение КАК Подразделение,
	|	НДСКосвенныеРасходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	НДСКосвенныеРасходы.Заказ КАК Заказ,
	|	НДСКосвенныеРасходы.Затрата КАК Затрата,
	|	НДСКосвенныеРасходы.ХарактеристикаЗатраты КАК ХарактеристикаЗатраты,
	|	НДСКосвенныеРасходы.СерияЗатраты КАК СерияЗатраты,
	|	НДСКосвенныеРасходы.СчетЗатрат КАК СчетЗатрат,
	|	НДСКосвенныеРасходы.Субконто1 КАК Субконто1,
	|	НДСКосвенныеРасходы.Субконто2 КАК Субконто2,
	|	НДСКосвенныеРасходы.Субконто3 КАК Субконто3,
	|	НДСКосвенныеРасходы.ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете,
	|	НДСКосвенныеРасходы.СчетЗатратНУ КАК СчетЗатратНУ,
	|	НДСКосвенныеРасходы.СубконтоНУ1 КАК СубконтоНУ1,
	|	НДСКосвенныеРасходы.СубконтоНУ2 КАК СубконтоНУ2,
	|	НДСКосвенныеРасходы.СубконтоНУ3 КАК СубконтоНУ3
	|ПОМЕСТИТЬ ТаблицаНДСКосвенныеРасходы
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы КАК НДСКосвенныеРасходы
	|ГДЕ
	|	НДСКосвенныеРасходы.Организация = &Организация
	|	И НДСКосвенныеРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И НДСКосвенныеРасходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСКосвенныеРасходы.СтатьяЗатрат,
	|	НДСКосвенныеРасходы.Подразделение,
	|	НДСКосвенныеРасходы.НоменклатурнаяГруппа,
	|	НДСКосвенныеРасходы.Заказ,
	|	НДСКосвенныеРасходы.Затрата,
	|	НДСКосвенныеРасходы.ХарактеристикаЗатраты,
	|	НДСКосвенныеРасходы.СерияЗатраты,
	|	НДСКосвенныеРасходы.СчетЗатрат,
	|	НДСКосвенныеРасходы.Субконто1,
	|	НДСКосвенныеРасходы.Субконто2,
	|	НДСКосвенныеРасходы.Субконто3,
	|	НДСКосвенныеРасходы.ОтражатьВНалоговомУчете,
	|	НДСКосвенныеРасходы.СчетЗатратНУ,
	|	НДСКосвенныеРасходы.СчетФактура,
	|	НДСКосвенныеРасходы.ВидЦенности,
	|	НДСКосвенныеРасходы.СтавкаНДС,
	|	НДСКосвенныеРасходы.СчетУчетаНДС,
	|	НДСКосвенныеРасходы.НДСВключенВСтоимость,
	|	НДСКосвенныеРасходы.Организация,
	|	НДСКосвенныеРасходы.СубконтоНУ1,
	|	НДСКосвенныеРасходы.СубконтоНУ2,
	|	НДСКосвенныеРасходы.СубконтоНУ3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСКосвенныеРасходы.СчетФактура КАК СчетФактура,
	|	НДСКосвенныеРасходы.ВидЦенности КАК ВидЦенности,
	|	НДСКосвенныеРасходы.СтавкаНДС КАК СтавкаНДС,
	|	НДСКосвенныеРасходы.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСКосвенныеРасходы.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	НДСКосвенныеРасходы.СуммаБезНДС КАК СуммаБезНДС,
	|	НДСКосвенныеРасходы.НДС КАК НДС,
	|	НДСКосвенныеРасходы.СтатьяЗатрат КАК СтатьяЗатрат,
	|	НДСКосвенныеРасходы.Подразделение КАК Подразделение,
	|	НДСКосвенныеРасходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	НДСКосвенныеРасходы.Заказ КАК Заказ,
	|	НДСКосвенныеРасходы.Затрата КАК Затрата,
	|	НДСКосвенныеРасходы.ХарактеристикаЗатраты КАК ХарактеристикаЗатраты,
	|	НДСКосвенныеРасходы.СерияЗатраты КАК СерияЗатраты,
	|	НДСКосвенныеРасходы.СчетЗатрат КАК СчетЗатрат,
	|	НДСКосвенныеРасходы.Субконто1 КАК Субконто1,
	|	НДСКосвенныеРасходы.Субконто2 КАК Субконто2,
	|	НДСКосвенныеРасходы.Субконто3 КАК Субконто3,
	|	НДСКосвенныеРасходы.ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете,
	|	НДСКосвенныеРасходы.СчетЗатратНУ КАК СчетЗатратНУ,
	|	НДСКосвенныеРасходы.СубконтоНУ1 КАК СубконтоНУ1,
	|	НДСКосвенныеРасходы.СубконтоНУ2 КАК СубконтоНУ2,
	|	НДСКосвенныеРасходы.СубконтоНУ3 КАК СубконтоНУ3
	|ПОМЕСТИТЬ НДСКосвенныеРасходы
	|ИЗ
	|	ТаблицаНДСКосвенныеРасходы КАК НДСКосвенныеРасходы
	|ГДЕ
	|	НДСКосвенныеРасходы.СуммаБезНДС <> 0
	|	ИЛИ НДСКосвенныеРасходы.НДС <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	СчетУчетаНДС,
	|	НДСВключенВСтоимость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСКосвенныеРасходыОбороты.СчетФактура КАК СчетФактура,
	|	НДСКосвенныеРасходыОбороты.ВидЦенности КАК ВидЦенности,
	|	НДСКосвенныеРасходыОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСКосвенныеРасходыОбороты.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	НДСКосвенныеРасходыОбороты.СуммаБезНДСОборот КАК СуммаБезНДСОборот,
	|	НДСКосвенныеРасходыОбороты.НДСОборот КАК НДСОборот
	|ПОМЕСТИТЬ НДСКосвенныеРасходыОбороты
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК НДСКосвенныеРасходыОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСКосвенныеРасходыОбороты.СчетФактура,
	|	НДСКосвенныеРасходыОбороты.ВидЦенности,
	|	НДСКосвенныеРасходыОбороты.СтавкаНДС,
	|	НДСКосвенныеРасходыОбороты.СчетУчетаНДС,
	|	НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСКосвенныеРасходыОбороты.СчетФактура КАК СчетФактура,
	|	НДСКосвенныеРасходыОбороты.ВидЦенности КАК ВидЦенности,
	|	НДСКосвенныеРасходыОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСКосвенныеРасходыОбороты.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	НДСКосвенныеРасходы.СтатьяЗатрат,
	|	НДСКосвенныеРасходы.Подразделение,
	|	НДСКосвенныеРасходы.НоменклатурнаяГруппа,
	|	НДСКосвенныеРасходы.Заказ,
	|	НДСКосвенныеРасходы.Затрата,
	|	НДСКосвенныеРасходы.ХарактеристикаЗатраты,
	|	НДСКосвенныеРасходы.СерияЗатраты,
	|	НДСКосвенныеРасходы.СчетЗатрат,
	|	НДСКосвенныеРасходы.Субконто1,
	|	НДСКосвенныеРасходы.Субконто2,
	|	НДСКосвенныеРасходы.Субконто3,
	|	НДСКосвенныеРасходы.ОтражатьВНалоговомУчете,
	|	НДСКосвенныеРасходы.СчетЗатратНУ,
	|	НДСКосвенныеРасходы.СубконтоНУ1,
	|	НДСКосвенныеРасходы.СубконтоНУ2,
	|	НДСКосвенныеРасходы.СубконтоНУ3,
	|	ВЫБОР
	|		КОГДА СчетаУчетаПоДеятельностиЕНВД.Счет ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕНВД,
	|	ВЫБОР
	|		КОГДА СчетаУчетаПоДеятельностиЕНВД.Счет ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ СчетаУчетаПоДеятельностиЕНВД.ПодлежитРаспределению
	|	КОНЕЦ КАК БазисРаспределенияВключаетЕНВД,
	|	СУММА(НДСКосвенныеРасходыОбороты.СуммаБезНДСОборот) КАК СуммаБезНДС,
	|	СУММА(НДСКосвенныеРасходыОбороты.НДСОборот) КАК НДС,
	|	СУММА(НДСКосвенныеРасходы.СуммаБезНДС) КАК СуммаБезНДСПроводка,
	|	СУММА(НДСКосвенныеРасходы.НДС) КАК НДСПроводка,
	|	NULL КАК Поставщик
	|ИЗ
	|	НДСКосвенныеРасходыОбороты КАК НДСКосвенныеРасходыОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НДСКосвенныеРасходы КАК НДСКосвенныеРасходы
	|		ПО НДСКосвенныеРасходыОбороты.СчетФактура = НДСКосвенныеРасходы.СчетФактура
	|			И НДСКосвенныеРасходыОбороты.ВидЦенности = НДСКосвенныеРасходы.ВидЦенности
	|			И НДСКосвенныеРасходыОбороты.СтавкаНДС = НДСКосвенныеРасходы.СтавкаНДС
	|			И НДСКосвенныеРасходыОбороты.СчетУчетаНДС = НДСКосвенныеРасходы.СчетУчетаНДС
	|			И НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость = НДСКосвенныеРасходы.НДСВключенВСтоимость
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
	|		ПО (НДСКосвенныеРасходы.СчетЗатрат = СчетаУчетаПоДеятельностиЕНВД.Счет)
	|ГДЕ
	|	НЕ(ЕСТЬNULL(НДСКосвенныеРасходыОбороты.СуммаБезНДСОборот, 0) = 0
	|				И ЕСТЬNULL(НДСКосвенныеРасходыОбороты.НДСОборот, 0) = 0)
	|	И (СчетаУчетаПоДеятельностиЕНВД.Счет ЕСТЬ NULL 
	|			ИЛИ СчетаУчетаПоДеятельностиЕНВД.ПодлежитРаспределению)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСКосвенныеРасходыОбороты.СчетФактура,
	|	НДСКосвенныеРасходыОбороты.ВидЦенности,
	|	СчетаУчетаПоДеятельностиЕНВД.Счет,
	|	СчетаУчетаПоДеятельностиЕНВД.ПодлежитРаспределению,
	|	НДСКосвенныеРасходыОбороты.СтавкаНДС,
	|	НДСКосвенныеРасходыОбороты.СчетУчетаНДС,
	|	НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость,
	|	НДСКосвенныеРасходы.СтатьяЗатрат,
	|	НДСКосвенныеРасходы.Подразделение,
	|	НДСКосвенныеРасходы.НоменклатурнаяГруппа,
	|	НДСКосвенныеРасходы.Заказ,
	|	НДСКосвенныеРасходы.Затрата,
	|	НДСКосвенныеРасходы.ХарактеристикаЗатраты,
	|	НДСКосвенныеРасходы.СерияЗатраты,
	|	НДСКосвенныеРасходы.СчетЗатрат,
	|	НДСКосвенныеРасходы.Субконто1,
	|	НДСКосвенныеРасходы.Субконто2,
	|	НДСКосвенныеРасходы.Субконто3,
	|	НДСКосвенныеРасходы.СчетЗатратНУ,
	|	НДСКосвенныеРасходы.СубконтоНУ1,
	|	НДСКосвенныеРасходы.СубконтоНУ2,
	|	НДСКосвенныеРасходы.СубконтоНУ3,
	|	НДСКосвенныеРасходы.ОтражатьВНалоговомУчете
	|ИТОГИ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	СчетУчетаНДС,
	|	НДСВключенВСтоимость,
	|	БазисРаспределенияВключаетЕНВД";
				   
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьВыборкуИзРегистраНДСКосвенныеРасходы()

Функция ПолучитьСписокКонтрагентовПоСчетамФактурам(Организация, СписокСчетовФактур)
	
	// Получение поставщиков по счету-фактуре
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("СчетаФактуры",       ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокСчетовФактур.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура прверяет соответствие даты налоговому периоду.
//
Процедура ПроверитьСоответствиеДатыПериоду(Отказ, Заголовок)
	
	КонецПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, Дата, Отказ);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если (Дата > КонецПериода) ИЛИ (Дата < НачалоПериода) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Дата документа не входит в указанный налоговый период", Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(ТаблицаПоКосвеннымРасходам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	Если Дата >= '20060101' И Не ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат Тогда
		
		СтруктураПоиска = Новый Структура("КлючСтроки, ОтражатьВНалоговомУчете", Неопределено, Истина);
		ЕстьВключениеВСтоимость = Ложь;
		ОтражатьВключениеВНУ = Ложь;
		
		Если ЕстьВключениеВСтоимость Тогда
			СтруктураОбязательныхПолей.Вставить("СчетСписанияНДС");
		КонецЕсли;
		Если ОтражатьВключениеВНУ Тогда
			СтруктураОбязательныхПолей.Вставить("СчетСписанияНДСНУ");
		КонецЕсли;
		
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоКосвеннымРасходам(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставРасходов.ВидЦенности,
		|	СоставРасходов.Поставщик,
		|	СоставРасходов.СчетФактура,
		|	СоставРасходов.СтавкаНДС,
		|	СоставРасходов.СуммаВсего,
		|	СоставРасходов.НДСВсего,
		|	СоставРасходов.БезНДССумма,
		|	СоставРасходов.БезНДС,
		|	СоставРасходов.НДС0Сумма,
		|	СоставРасходов.ЕНВДСумма,
		|	СоставРасходов.ЕНВДНДС,
		|	СоставРасходов.НДС0,
		|	СоставРасходов.НДССумма,
		|	СоставРасходов.НДС,
		|	СоставРасходов.КлючСтроки,
		|	СоставРасходов.БазисРаспределенияВключаетЕНВД,
		|	СоставРасходов.НДСВключенВСтоимость,
		|	СоставРасходов.СчетУчетаНДС,
		|	РаспределениеНДСКосвенныхРасходов.СчетаУчетаРасходов.(
		|		КлючСтроки,
		|		СчетЗатрат,
		|		Субконто1,
		|		Субконто2,
		|		Субконто3,
		|		СуммаБезНДС,
		|		НДС,
		|		СчетЗатратНУ,
		|		СубконтоНУ1,
		|		СубконтоНУ2,
		|		СубконтоНУ3,
		|		ОтражатьВНалоговомУчете,
		|		СчетЗатратЕНВД,
		|		СтатьяЗатрат,
		|		ПодразделениеОрганизации,
		|		НоменклатурнаяГруппа,
		|		Заказ,
		|		Затрата,
		|		ХарактеристикаЗатраты,
		|		СерияЗатраты
		|	),
		|	СоставРасходов.СчетФактура.ДоговорКонтрагента
		|ИЗ
		|	Документ.РаспределениеНДСКосвенныхРасходов.СоставКосвенныхРасходов КАК СоставРасходов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеНДСКосвенныхРасходов КАК РаспределениеНДСКосвенныхРасходов
		|		ПО СоставРасходов.Ссылка = РаспределениеНДСКосвенныхРасходов.Ссылка
		|ГДЕ
		|	РаспределениеНДСКосвенныхРасходов.Ссылка = &Ссылка
		|	И СоставРасходов.Ссылка = &Ссылка
		|	И РаспределениеНДСКосвенныхРасходов.СчетаУчетаРасходов.КлючСтроки = СоставРасходов.КлючСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	
	РезультатЗапросаПоКосвеннымРасходам = Запрос.Выполнить();
	
	Таблица = РезультатЗапросаПоКосвеннымРасходам.Выгрузить();
	
	Таблица.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ПроводкаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ПроводкаНДС0", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ПроводкаЕНВД", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ПроводкаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("НДСДвижений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	КоличествоСтрок = Таблица.Количество();
	
	Для К = 0 По КоличествоСтрок - 1 Цикл
		СтрокаТаблицы = Таблица[К];
		Если СтрокаТаблицы.НДСВключенВСтоимость Тогда
			Продолжить;
		ИначеЕсли СтрокаТаблицы.ЕНВДСумма + СтрокаТаблицы.ЕНВДНДС <> 0 Тогда
			
			// Новая строка - ЕНВД, текущая - без НДС (не ЕНВД)
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,,"СчетаУчетаРасходов");
			НоваяСтрока.СчетаУчетаРасходов = СтрокаТаблицы.СчетаУчетаРасходов.Скопировать();
			// Подготовка счетов затрат ЕНВД
			Для Каждого СтрокаТаблицыСчетов Из НоваяСтрока.СчетаУчетаРасходов Цикл
				
				ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТаблицыСчетов.СчетЗатрат, СтрокаТаблицыСчетов.СтатьяЗатрат);
				Если Не ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
					СтрокаТаблицыСчетов.СчетЗатрат = СтрокаТаблицыСчетов.СчетЗатратЕНВД;
					СтрокаТаблицыСчетов.СчетЗатратНУ = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
				КонецЕсли;
				
			КонецЦикла;
			
			НоваяСтрока.БезНДССумма = 0;
			НоваяСтрока.БезНДС = 0;
			НоваяСтрока.НДС0 = 0;
			НоваяСтрока.НДС0Сумма = 0;
			НоваяСтрока.СуммаВсего = НоваяСтрока.ЕНВДСумма;
			НоваяСтрока.НДСВсего = НоваяСтрока.ЕНВДНДС;
			
			СтрокаТаблицы.ЕНВДСумма = 0;
			СтрокаТаблицы.ЕНВДНДС = 0;
			СтрокаТаблицы.СуммаВсего = СтрокаТаблицы.СуммаВсего - НоваяСтрока.ЕНВДСумма;
			СтрокаТаблицы.НДСВсего = СтрокаТаблицы.НДСВсего - НоваяСтрока.ЕНВДНДС;
			
		КонецЕсли;
	КонецЦикла;
	// Подготовка сумм для включения и исключения
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если СтрокаТаблицы.НДСВключенВСтоимость Тогда
			
			СтрокаТаблицы.СуммаБезНДС = (СтрокаТаблицы.НДССумма + СтрокаТаблицы.НДС0Сумма);
			СтрокаТаблицы.НДСДвижений = (СтрокаТаблицы.НДС + СтрокаТаблицы.НДС0);
			СтрокаТаблицы.ПроводкаНДС = СтрокаТаблицы.НДС;
			СтрокаТаблицы.ПроводкаНДС0 = СтрокаТаблицы.НДС0;
			
		Иначе
			
			СтрокаТаблицы.СуммаБезНДС = (СтрокаТаблицы.БезНДССумма + СтрокаТаблицы.ЕНВДСумма);
			СтрокаТаблицы.НДСДвижений = (СтрокаТаблицы.БезНДС + СтрокаТаблицы.ЕНВДНДС);
			СтрокаТаблицы.ПроводкаБезНДС = СтрокаТаблицы.БезНДС;
			СтрокаТаблицы.ПроводкаЕНВД = СтрокаТаблицы.ЕНВДНДС;
			
		КонецЕсли;
		
			
	КонецЦикла;
		
	Возврат Таблица;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСоставКосвенныхРасходов(ТаблицаКосвенныхРасходов, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, Поставщик, СчетФактура, СтавкаНДС, СчетУчетаНДС");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставКосвенныхРасходов", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверка совпадения информации по выручке в документе и в регистре НДСНачисленный
	ВыручкаЕНВДПоРегистру   = 0;
	ВыручкаБезНДСПоРегистру = 0;
	ВыручкаНДС0ПоРегистру	= 0;
	ВыручкаНДСПоРегистру    = 0;
	
	КонецПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, НачалоПериода);
	
	Если Не Отказ Тогда
		УчетНДС.РассчитатьВыручкуДляНДС(Организация, НачалоПериода, КонецПериода, ВыручкаЕНВДПоРегистру, ВыручкаБезНДСПоРегистру, ВыручкаНДС0ПоРегистру, ВыручкаНДСПоРегистру);
	
		ВалютаУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		
		Если ВыручкаНДС <> ВыручкаНДСПоРегистру Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Сумма выручки по обычным ставкам НДС (" + ВыручкаНДС + " " + ВалютаУчета + ") не совпадает с информацией в регистрах учета (" + ВыручкаНДСПоРегистру + " " + ВалютаУчета + ")!", , Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		Если ВыручкаЕНВД <> ВыручкаЕНВДПоРегистру Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Сумма выручки облагаемой ЕНВД (" + ВыручкаЕНВД + " " + ВалютаУчета + ") не совпадает с информацией в регистрах учета (" + ВыручкаЕНВДПоРегистру + " " + ВалютаУчета + ")!", , Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		Если ВыручкаБезНДС <> ВыручкаБезНДСПоРегистру И Не ЗаполнитьПоНДСПредъявленный Тогда //m.ionov@a-prof.ru 17.04.2014
			ОбщегоНазначения.СообщитьОбОшибке("Сумма выручки без НДС (" + ВыручкаБезНДС + " " + ВалютаУчета + ") не совпадает с информацией в регистрах учета (" + ВыручкаБезНДСПоРегистру + " " + ВалютаУчета + ")!", , Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		Если ВыручкаНДС0 <> ВыручкаНДС0ПоРегистру Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Сумма выручки облагаемой НДС по ставке 0% (" + ВыручкаНДС0 + " " + ВалютаУчета + ") не совпадает с информацией в регистрах учета (" + ВыручкаНДС0ПоРегистру + " " + ВалютаУчета + ")!", , Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
		
	// Дополнительно нужно проверить арифметику распределения.
	Для Каждого Строка Из СоставКосвенныхРасходов Цикл
		Если Строка.СуммаВсего <> (Строка.БезНДССумма + Строка.НДС0Сумма + Строка.ЕНВДСумма + Строка.НДССумма) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для строки """ + Строка.НомерСтроки + """ общая сумма в колонке ""Сумма по счету"" не совпадает с итогом распределения этой суммы в других колонках!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Строка.НДСВсего <> (Строка.БезНДС + Строка.НДС0 + Строка.ЕНВДНДС + Строка.НДС) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для строки """ + Строка.НомерСтроки + """ общая сумма в колонке ""НДС по счету"" не совпадает с итогом распределения этой суммы в других колонках!", Отказ, Заголовок);
		КонецЕсли;
		
		Если (Не Строка.НДСВключенВСтоимость И (Строка.БезНДС <> 0 или Строка.ЕНВДНДС <> 0)) Или 
			 (Строка.НДСВключенВСтоимость И (Строка.НДС <> 0 или Строка.НДС0 <> 0)) Тогда
			// Следует проверить направления отнесения затрат для включения части НДС
			// в стоимость этих затрат
			СтруктураПоиска = Новый Структура("КлючСтроки", Строка.КлючСтроки);
			СтрокиСчетовУчета = СчетаУчетаРасходов.НайтиСтроки(СтруктураПоиска);
			Если СтрокиСчетовУчета.Количество() > 0 Тогда
				СчетчикСуммы = 0;
				Для Каждого СтрокаУчета Из СтрокиСчетовУчета Цикл		
					СчетчикСуммы = СчетчикСуммы + СтрокаУчета.СуммаБезНДС + СтрокаУчета.НДС;
				КонецЦикла;
				
				Если СчетчикСуммы = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для строки """ + Строка.НомерСтроки + """ на закладке ""Счета учета расходов"" не указаны суммы, использующиеся для распределения по движениям (при включении(исключении) НДС в стоимость)!", Отказ, Заголовок);
				КонецЕсли;
				
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке("Для строки """ + Строка.НомерСтроки + """ на закладке ""Счета учета расходов"" не указаны счета и суммы относимых затрат. Невозможно выполнить включение НДС в стоимость затрат!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		Если не (Строка.НДСВсего = 0  и Строка.БезНДС =0 и Строка.НДС0 =0 и Строка.ЕНВДНДС =0 и Строка.НДС =0) и НЕ ЗначениеЗаполнено(Строка.СчетУчетаНДС) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер """ + Строка.НомерСтроки + """ табличной части ""Состав косвенных расходов"": Не заполнено значение реквизита ""Счет учета НДС""!", Отказ, Заголовок);
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСчетаУчетаРасходов(Отказ, Заголовок,ТаблицаКосвенныхРасходов)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СчетЗатрат, СтатьяЗатрат, ПодразделениеОрганизации");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СчетаУчетаРасходов", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Теперь проверим СчетЗатратНУ
	Для Каждого Строка Из СчетаУчетаРасходов Цикл
		Если Строка.ОтражатьВНалоговомУчете И НЕ ЗначениеЗаполнено(Строка.СчетЗатратНУ) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
			                               """ табличной части ""Счета учета расходов"": ";

			СтрокаТКР = ТаблицаКосвенныхРасходов.Найти(Строка.КлючСтроки,"КлючСтроки");
			Если не СтрокаТКР = Неопределено Тогда
				Если не СтрокаТКР.ЕНВДНДС = 0 и не ЗначениеЗаполнено(Строка.СчетЗатратЕНВД) Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Счет затрат ЕНВД""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли; 
			КонецЕсли; 
			
			СтрокаСообщения = "Не заполнено значение реквизита ""Счет затрат НУ""!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			
			
			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Формирование движений по регистрам подсистемы НДС.
//
//
Процедура ДвиженияПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, РаспределениеКосвенныхРасходов, Отказ, Заголовок);
	
	Если РаспределениеКосвенныхРасходов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения_НДСКосвенныеРасходы = Движения.НДСКосвенныеРасходы;
	
	ТаблицаДвиженийНДСКосвенныеРасходы = Движения_НДСКосвенныеРасходы.ВыгрузитьКолонки();
	
	//m.ionov@a-prof.ru 17.04.2014
	//ТаблицаДляРаспределения = РаспределениеКосвенныхРасходов.Скопировать();
	//ТаблицаДляРаспределения.Колонки.Удалить("НДС");
	//ТаблицаДляРаспределения.Колонки.Удалить("СуммаБезНДС");
	//ТаблицаДляРаспределения.Колонки.НДСВсего.Имя = "НДС";
	//ТаблицаДляРаспределения.Колонки.СуммаВсего.Имя = "СуммаБезНДС";
	//
	//ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДляРаспределения, ТаблицаДвиженийНДСКосвенныеРасходы);
	Если ЗаполнитьПоНДСПредъявленный Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(СтруктураШапкиДокумента.НачалоПериода));
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураШапкиДокумента.Дата));
		
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.ВидЦенности,
		|	РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.СчетФактура,
		|	РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.Ссылка.Организация КАК Организация,
		|	РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.СтавкаНДС,
		|	РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.СчетУчетаНДС,
		|	РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.НДСВключенВСтоимость,
		|	ВЫБОР
		|		КОГДА РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.СуммаВсего > НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток
		|			ТОГДА НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток
		|		ИНАЧЕ РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.СуммаВсего
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ВЫБОР
		|		КОГДА РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.НДСВсего > НДСКосвенныеРасходыОстатки.НДСОстаток
		|			ТОГДА НДСКосвенныеРасходыОстатки.НДСОстаток
		|		ИНАЧЕ РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.НДСВсего
		|	КОНЕЦ КАК НДС
		|ИЗ
		|	Документ.РаспределениеНДСКосвенныхРасходов.СоставКосвенныхРасходов КАК РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСКосвенныеРасходы.Остатки(&КонецПериода, ) КАК НДСКосвенныеРасходыОстатки
		|		ПО РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.Ссылка.Организация = НДСКосвенныеРасходыОстатки.Организация
		|		И РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.ВидЦенности = НДСКосвенныеРасходыОстатки.ВидЦенности
		|		И РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.СчетФактура = НДСКосвенныеРасходыОстатки.СчетФактура
		|		И РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.СтавкаНДС = НДСКосвенныеРасходыОстатки.СтавкаНДС
		|		И РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.СчетУчетаНДС = НДСКосвенныеРасходыОстатки.СчетУчетаНДС
		|		И РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.НДСВключенВСтоимость = НДСКосвенныеРасходыОстатки.НДСВключенВСтоимость
		|ГДЕ
		|	РаспределениеНДСКосвенныхРасходовСоставКосвенныхРасходов.Ссылка = &Ссылка";
		
		Результат = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Результат, ТаблицаДвиженийНДСКосвенныеРасходы);
	Иначе
		ТаблицаДляРаспределения = РаспределениеКосвенныхРасходов.Скопировать();
		ТаблицаДляРаспределения.Колонки.Удалить("НДС");
		ТаблицаДляРаспределения.Колонки.Удалить("СуммаБезНДС");
		ТаблицаДляРаспределения.Колонки.НДСВсего.Имя = "НДС";
		ТаблицаДляРаспределения.Колонки.СуммаВсего.Имя = "СуммаБезНДС";
	    	
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДляРаспределения, ТаблицаДвиженийНДСКосвенныеРасходы);
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	ТаблицаДвиженийНДСКосвенныеРасходы.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	
	СтрокиКУдалению = ТаблицаДвиженийНДСКосвенныеРасходы.НайтиСтроки(Новый Структура("СуммаБезНДС, НДС", 0, 0));
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвиженийНДСКосвенныеРасходы.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если Не Отказ Тогда
		Движения_НДСКосвенныеРасходы.мПериод = СтруктураШапкиДокумента.Дата;
		Движения_НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвиженийНДСКосвенныеРасходы;
		Движения_НДСКосвенныеРасходы.ВыполнитьРасход();
	КонецЕсли;
	
	//Для Каждого ТекущееДвижение Из Движения Цикл
	//	Если ТекущееДвижение.Модифицированность() Тогда
	//		ТекущееДвижение.Записать();
	//	КонецЕсли;
	//КонецЦикла;
	ДвиженияПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, РаспределениеКосвенныхРасходов, Отказ, Заголовок);
	ДвиженияПоРегистрамВключениеИсключениеИзСтоимости(СтруктураШапкиДокумента, РаспределениеКосвенныхРасходов, Отказ, Заголовок);
								  
КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

// Включение НДС в стоимость и исключение из стоимости по результатам распределения
//
Процедура ДвиженияПоРегистрамВключениеИсключениеИзСтоимости(СтруктураШапкиДокумента, РаспределениеКосвенныхРасходов, Отказ, Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Распределение = Новый Структура("СуммаБезНДС, НДСДвижений", "СуммаБезНДС", "НДС");
	Отбор		  = Новый Структура("КлючСтроки");
	СписокИсключаемыхКолонок = Новый Структура("БезНДССумма, БезНДС, НДС0, НДС0Сумма, ЕНВДСумма, ЕНВДНДС, СуммаВсего, НДСВсего, НДССумма,НДС");

	
	ТаблицаВключенияИсключения = ОбщегоНазначения.РазвернутьПоВложеннойТаблице(РаспределениеКосвенныхРасходов, "СчетаУчетаРасходов",Распределение,СписокИсключаемыхКолонок,);
	
	Если ТаблицаВключенияИсключения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВключенияИсключения.Колонки.СуммаБезНДС.Имя = "Стоимость";
	ТаблицаВключенияИсключения.Колонки.НДСДвижений.Имя = "НДС";
	ТаблицаВключенияИсключения.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость", Новый ОписаниеТипов("Булево"));
	ТаблицаВключенияИсключения.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости", Новый ОписаниеТипов("Булево"));
	ТаблицаВключенияИсключения.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СтрокиКУдалению = Новый Массив();
	Для каждого СтрокаРасходов Из ТаблицаВключенияИсключения Цикл
		Если СтрокаРасходов.НДС = 0 и СтрокаРасходов.Стоимость = 0 тогда
			СтрокиКУдалению.Добавить(СтрокаРасходов);
		Иначе
			СтрокаРасходов.Стоимость = СтрокаРасходов.Стоимость + СтрокаРасходов.НДС;
			СтрокаРасходов.Организация = СтруктураШапкиДокумента.Организация;
			СтрокаРасходов.ДействияНДСПокупки_ВключитьВСтоимость = Не СтрокаРасходов.НДСВключенВСтоимость;
			СтрокаРасходов.ДействияНДСПокупки_ИсключитьИзСтоимости = СтрокаРасходов.НДСВключенВСтоимость;
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаВключенияИсключения.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	// Добавление колонок нужных для включения НДС в стоимость
	ТаблицаВключенияИсключения.Колонки.Добавить("СчетСписанияНДСБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаВключенияИсключения.Колонки.Добавить("СчетСписанияНДСНУ", Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаВключенияИсключения.Колонки.Добавить("СубконтоСписанияНДСБУ1");
	ТаблицаВключенияИсключения.Колонки.Добавить("СубконтоСписанияНДСБУ2");
	ТаблицаВключенияИсключения.Колонки.Добавить("СубконтоСписанияНДСБУ3");
	ТаблицаВключенияИсключения.Колонки.Добавить("СубконтоСписанияНДСНУ1");
	ТаблицаВключенияИсключения.Колонки.Добавить("СубконтоСписанияНДСНУ2");
	ТаблицаВключенияИсключения.Колонки.Добавить("СубконтоСписанияНДСНУ3");
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСчетСписанияБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСчетСписанияНУ", Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСчетБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСчетНУ", Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСубконтоСписанияБУ1");
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСубконтоСписанияБУ2");
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСубконтоСписанияБУ3");
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСубконтоСписанияНУ1");
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСубконтоСписанияНУ2");
	ТаблицаВключенияИсключения.Колонки.Добавить("КорСубконтоСписанияНУ3");
	
	Для Каждого СтрокаТаблицы Из ТаблицаВключенияИсключения Цикл
		Если СтруктураШапкиДокумента.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат Или СтрокаТаблицы.НДСВключенВСтоимость Тогда
			СтрокаТаблицы.СчетСписанияНДСБУ = СтрокаТаблицы.СчетЗатрат;
			СтрокаТаблицы.СчетСписанияНДСНУ = СтрокаТаблицы.СчетЗатратНУ;
			СтрокаТаблицы.СубконтоСписанияНДСБУ1 = СтрокаТаблицы.Субконто1;
			СтрокаТаблицы.СубконтоСписанияНДСБУ2 = СтрокаТаблицы.Субконто2;
			СтрокаТаблицы.СубконтоСписанияНДСБУ3 = СтрокаТаблицы.Субконто3;
			СтрокаТаблицы.СубконтоСписанияНДСНУ1 = СтрокаТаблицы.СубконтоНУ1;
			СтрокаТаблицы.СубконтоСписанияНДСНУ2 = СтрокаТаблицы.СубконтоНУ2;
			СтрокаТаблицы.СубконтоСписанияНДСНУ3 = СтрокаТаблицы.СубконтоНУ3;
		Иначе
			СтрокаТаблицы.СчетСписанияНДСБУ = СтруктураШапкиДокумента.СчетСписанияНДС;
			СтрокаТаблицы.СчетСписанияНДСНУ = СтруктураШапкиДокумента.СчетСписанияНДСНУ;
			СтрокаТаблицы.СубконтоСписанияНДСБУ1 = СтруктураШапкиДокумента.СубконтоСписанияНДС1;
			СтрокаТаблицы.СубконтоСписанияНДСБУ2 = СтруктураШапкиДокумента.СубконтоСписанияНДС2;
			СтрокаТаблицы.СубконтоСписанияНДСБУ3 = СтруктураШапкиДокумента.СубконтоСписанияНДС3;
			СтрокаТаблицы.СубконтоСписанияНДСНУ1 = СтруктураШапкиДокумента.СубконтоСписанияНДСНУ1;
			СтрокаТаблицы.СубконтоСписанияНДСНУ2 = СтруктураШапкиДокумента.СубконтоСписанияНДСНУ2;
			СтрокаТаблицы.СубконтоСписанияНДСНУ3 = СтруктураШапкиДокумента.СубконтоСписанияНДСНУ3;
		КонецЕсли;
		СтрокаТаблицы.КорСчетСписанияБУ = СтрокаТаблицы.СчетЗатрат;
		СтрокаТаблицы.КорСчетСписанияНУ = СтрокаТаблицы.СчетЗатратНУ;
		СтрокаТаблицы.КорСчетБУ = СтрокаТаблицы.СчетЗатрат;
		СтрокаТаблицы.КорСчетНУ = СтрокаТаблицы.СчетЗатратНУ;
		СтрокаТаблицы.КорСубконтоСписанияБУ1 = СтрокаТаблицы.Субконто1;
		СтрокаТаблицы.КорСубконтоСписанияБУ2 = СтрокаТаблицы.Субконто2;
		СтрокаТаблицы.КорСубконтоСписанияБУ3 = СтрокаТаблицы.Субконто3;
		СтрокаТаблицы.КорСубконтоСписанияНУ1 = СтрокаТаблицы.СубконтоНУ1;
		СтрокаТаблицы.КорСубконтоСписанияНУ2 = СтрокаТаблицы.СубконтоНУ2;
		СтрокаТаблицы.КорСубконтоСписанияНУ3 = СтрокаТаблицы.СубконтоНУ3;
	КонецЦикла;
	
	УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаВключенияИсключения, Неопределено, Истина, , Заголовок, Ложь);
	УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаВключенияИсключения, Неопределено, Ложь, , Заголовок, Ложь);
	
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаВключенияИсключения, Отказ, Заголовок);
		
КонецПроцедуры

// Распределение НДС по ставке 0%
//
Процедура ДвиженияПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, РаспределениеКосвенныхРасходов, Отказ, Заголовок)

	КонецПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(СтруктураШапкиДокумента.Организация, НачалоПериода, Отказ);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если РаспределениеКосвенныхРасходов.Итог("НДС0Сумма") + РаспределениеКосвенныхРасходов.Итог("НДС0") = 0 Тогда
		// Нет сумм для распределения
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);

	Запрос.УстановитьПараметр("СостоянияОжидание", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРеализация0Обороты.СчетФактура КАК ДокументОтгрузки,
		|	СУММА(НДСРеализация0Обороты.СуммаБезНДСПриход + НДСРеализация0Обороты.НДСПриход) КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Обороты(
		|			НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ),
		|			КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ),
		|			Период,
		|			Организация = &Организация
		|				И Состояние = &СостоянияОжидание) КАК НДСРеализация0Обороты
		|ГДЕ
		|	НДСРеализация0Обороты.СуммаБезНДСПриход + НДСРеализация0Обороты.НДСПриход > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСРеализация0Обороты.СчетФактура";
					
	// Определим реализацию по ставке 0% за налоговый период 
	БазоваяТаблицаРаспределения = Запрос.Выполнить().Выгрузить();
	
	СписокДокументовОтгрузки = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(БазоваяТаблицаРаспределения.ВыгрузитьКолонку("ДокументОтгрузки"), Истина);
	
	Если СписокДокументовОтгрузки.Количество()>0 Тогда
		Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(Новый МоментВремени(Дата, Ссылка), ВидГраницы.Включая));
		
		Запрос.УстановитьПараметр("СписокДокументовОтгрузки", СписокДокументовОтгрузки);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРеализация0Остатки.СчетФактура КАК ДокументОтгрузки,
		|	НДСРеализация0Остатки.Состояние,
		|	СУММА(НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток) КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Остатки(
		|		&МоментДокумента,
		|		Организация = &Организация
		|			И СчетФактура В (&СписокДокументовОтгрузки)) КАК НДСРеализация0Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСРеализация0Остатки.СчетФактура,
		|	НДСРеализация0Остатки.Состояние";
		ТаблицаТекущихСостояний = Запрос.Выполнить().Выгрузить(); 
	
		ТаблицаРаспределения = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(БазоваяТаблицаРаспределения,ТаблицаТекущихСостояний,Новый Структура("СуммаПриход"),,,,Истина);
		СтрокиБезСостояния =  ТаблицаРаспределения.НайтиСтроки(Новый Структура("Состояние",Неопределено));
		Для каждого Строка Из СтрокиБезСостояния Цикл
			Строка.Состояние = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
		КонецЦикла; 
	Иначе
	    ТаблицаРаспределения = БазоваяТаблицаРаспределения.Скопировать();
		ТаблицаРаспределения.Колонки.Добавить("Состояние", Новый описаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ТаблицаРаспределения.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение ,"Состояние");
	КонецЕсли; 
	
	ТаблицаДвижений	= РаспределениеКосвенныхРасходов.Скопировать();
	ТаблицаДвижений.Свернуть("ВидЦенности, Поставщик, СчетФактура, СтавкаНДС, СчетУчетаНДС", "НДС0Сумма, НДС0");
	ТаблицаДвижений.Колонки.НДС0Сумма.Имя = "СуммаБезНДС";
	ТаблицаДвижений.Колонки.НДС0.Имя = "НДС";
	
	МассивКоэффициентов = ТаблицаРаспределения.ВыгрузитьКолонку("СуммаПриход");
	
	ТаблицаДвижений.Колонки.Добавить("СуммыДвижений", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Для Каждого СтрокаРасхода Из ТаблицаДвижений Цикл
		
		СтрокаРасхода.СуммыДвижений = ТаблицаРаспределения.Скопировать();
		СтрокаРасхода.СуммыДвижений.Колонки.Добавить("СуммаБезНДС");
		СтрокаРасхода.СуммыДвижений.Колонки.Добавить("НДС");
		МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаРасхода.СуммаБезНДС, МассивКоэффициентов);
		Если МассивСумм <> Неопределено Тогда
			СтрокаРасхода.СуммыДвижений.ЗагрузитьКолонку(МассивСумм, "СуммаБезНДС");
		КонецЕсли;
		МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаРасхода.НДС, МассивКоэффициентов);
		Если МассивСумм <> Неопределено Тогда
			СтрокаРасхода.СуммыДвижений.ЗагрузитьКолонку(МассивСумм, "НДС");
		КонецЕсли;
		
	КонецЦикла;
	
	СписокРаспределяемыхКолонок = Новый Структура("СуммаБезНДС, НДС");
	СписокИсключаемыхКолонок = Новый Структура("СуммаПриход");
	
	ТаблицаДвижений = ОбщегоНазначения.РазвернутьПоВложеннойТаблице(ТаблицаДвижений, "СуммыДвижений", СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок);
		
	Движения_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0;
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0 = Движения_НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0 = Движения_НДСПредъявленныйРеализация0.Выгрузить();
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Колонки.Добавить("Поставщик",новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	СчетНДС0 = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаСобытия");
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСПредъявленныйРеализация0 Цикл
		Если СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение Тогда
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
		ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
		ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 Тогда
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
		КонецЕсли;
		
		Если не СтрокаДвижения.НДС = 0 Тогда
		
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период                  = Дата;
			Проводка.Активность              = Истина;
			Проводка.Организация             = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание              = "НДС по косв. расх. (по реализ., предполаг НДС 0%)";

			Проводка.СчетДт                  = СчетНДС0;
			БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДвижения.поставщик);
			БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура);
			БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРеализации", СтрокаДвижения.ДокументОтгрузки);
			

			Проводка.СчетКт                  = СтрокаДвижения.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаДвижения.поставщик);
			БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаДвижения.СчетФактура);
			
			Проводка.Сумма = СтрокаДвижения.НДС;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Колонки.Удалить(ТаблицаДвиженийНДСПредъявленныйРеализация0.Колонки.Поставщик);
	
	Если ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество() <> 0 Тогда
		Движения_НДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		Движения_НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		Движения_НДСПредъявленныйРеализация0.ВыполнитьПриход();
	КонецЕсли;
	
	Если Движения.Хозрасчетный.Модифицированность() Тогда
		Движения.Хозрасчетный.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Проверка остатков по регистру НДС по косвенным регистрам после проведения. 
// В случае если они не нулевые, проведение отменяется
Процедура ПроверитьСписаниеПоРегиструНДСКосвенныеРасходы(СтруктураШапкиДокумента, Заголовок, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(СтруктураШапкиДокумента.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураШапкиДокумента.Дата));
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Расхождения.СчетФактура,
		|	Расхождения.ВидЦенности,
		|	Расхождения.СтавкаНДС,
		|	Расхождения.СчетУчетаНДС,
		|	Расхождения.НДСВключенВСтоимость,
		|	СУММА(Расхождения.РасхождениеБезНДС) КАК РасхождениеБезНДС,
		|	СУММА(Расхождения.РасхождениеНДС) КАК РасхождениеНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСКосвенныеРасходыОбороты.СчетФактура КАК СчетФактура,
		|		НДСКосвенныеРасходыОбороты.ВидЦенности КАК ВидЦенности,
		|		НДСКосвенныеРасходыОбороты.СтавкаНДС КАК СтавкаНДС,
		|		НДСКосвенныеРасходыОбороты.СчетУчетаНДС КАК СчетУчетаНДС,
		|		НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
		|		НДСКосвенныеРасходыОбороты.СуммаБезНДСОборот КАК РасхождениеБезНДС,
		|		НДСКосвенныеРасходыОбороты.НДСОборот КАК РасхождениеНДС
		|	ИЗ
		|		РегистрНакопления.НДСКосвенныеРасходы.Обороты(&НачалоПериода, &КонецПериода, Период, Организация = &Организация) КАК НДСКосвенныеРасходыОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеДокумента.СчетФактура,
		|		ДанныеДокумента.ВидЦенности,
		|		ДанныеДокумента.СтавкаНДС,
		|		ДанныеДокумента.СчетУчетаНДС,
		|		ДанныеДокумента.НДСВключенВСтоимость,
		|		ДанныеДокумента.СуммаВсего * -1,
		|		ДанныеДокумента.НДСВсего * -1
		|	ИЗ
		|		Документ.РаспределениеНДСКосвенныхРасходов.СоставКосвенныхРасходов КАК ДанныеДокумента
		|	ГДЕ
		|		ДанныеДокумента.Ссылка = &Ссылка) КАК Расхождения
		|
		|СГРУППИРОВАТЬ ПО
		|	Расхождения.СтавкаНДС,
		|	Расхождения.ВидЦенности,
		|	Расхождения.СчетФактура,
		|	Расхождения.НДСВключенВСтоимость,
		|	Расхождения.СчетУчетаНДС
		|
		|ИМЕЮЩИЕ
		|	(НЕ(СУММА(Расхождения.РасхождениеБезНДС) = 0
		|			И СУММА(Расхождения.РасхождениеНДС) = 0))";
				   			   
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	    Возврат;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	ПервоеСообщение = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если ПервоеСообщение Тогда
			СтрокаСообщения = "Обнаружено расхождение данных о суммах НДС по косвенным расходам, подлежащих распределению:"+Символы.ПС;
			ПервоеСообщение = Ложь;
		Иначе
			СтрокаСообщения = "";	
		КонецЕсли; 
		
		СтрокаСообщения = СтрокаСообщения+" - Счет-фактура '" + Выборка.СчетФактура + "', вид ценности '" + Выборка.ВидЦенности + "'
					  |ставка НДС '" + Выборка.СтавкаНДС + "', счет учета НДС '" + Выборка.СчетУчетаНДС + "', " +
					  ?(Выборка.НДСВключенВСтоимость, "НДС включен в стоимость", "НДС не включен в стоимость") + ":";
	
		Если не Выборка.РасхождениеБезНДС=0 Тогда
			СтрокаСообщения = СтрокаСообщения+Символы.ПС+Символы.Таб+?(Выборка.РасхождениеБезНДС>0," не распределена", " распределена не отраженная в составе косвенных расходов ")+" сумма без НДС "+Формат(?(Выборка.РасхождениеБезНДС<0,-1,1)*Выборка.РасхождениеБезНДС, "ЧЦ=15; ЧДЦ=2")+" "+строка(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
		КонецЕсли; 
		Если не Выборка.РасхождениеНДС=0 Тогда
			СтрокаСообщения = СтрокаСообщения+Символы.ПС+Символы.Таб+?(Выборка.РасхождениеНДС>0," не распределен", " распределен не отраженный в составе косвенных расходов ")+" НДС "+Формат(?(Выборка.РасхождениеНДС<0,-1,1)*Выборка.РасхождениеНДС, "ЧЦ=15; ЧДЦ=2")+" "+строка(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
		КонецЕсли; 

		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание); 
	
	КонецЦикла; //Пока Выборка.Следующий()
																	
КонецПроцедуры

// Формирование движений по регистрам регламентированного учета.
//
//
Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, РаспределениеКосвенныхРасходов, Отказ, Заголовок);
	
	СчетЕН = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
	
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	
	Для Каждого СтрокаТаблицы Из РаспределениеКосвенныхРасходов Цикл
		ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаТаблицы.СчетЗатрат);
		Если СтрокаТаблицы.ОтражатьВНалоговомУчете Тогда
			ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаТаблицы.СчетЗатратНУ, "Налоговый");
		КонецЕсли;
		Если ПроизводственныеРасходы Или ПроизводственныеРасходыНУ Тогда
								
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			НоваяСтрока.СтатьяЗатрат               = СтрокаТаблицы.СтатьяЗатрат;
			Если Не СтрокаТаблицы.СписаниеНДС Тогда 
				НоваяСтрока.СчетЗатрат                 = СтрокаТаблицы.СчетЗатрат;
				НоваяСтрока.СчетЗатратНУ               = СтрокаТаблицы.СчетЗатратНУ;
			Иначе
				НоваяСтрока.СчетЗатрат                 = СтрокаТаблицы.СчетСписанияНДСБУ;
				НоваяСтрока.СчетЗатратНУ               = СтрокаТаблицы.СчетСписанияНДСНУ;
			КонецЕсли;
			НоваяСтрока.ПодразделениеОрганизации   = СтрокаТаблицы.ПодразделениеОрганизации;
			НоваяСтрока.НоменклатурнаяГруппа       = СтрокаТаблицы.НоменклатурнаяГруппа;
			НоваяСтрока.Заказ       			   = СтрокаТаблицы.Заказ;
			
			НоваяСтрока.Номенклатура       		   = СтрокаТаблицы.Затрата;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаЗатраты;
			НоваяСтрока.СерияНоменклатуры 		   = СтрокаТаблицы.СерияЗатраты;
			
			НоваяСтрока.СуммаРегл                  = СтрокаТаблицы.НДС;
			Если СтрокаТаблицы.ОтражатьВНалоговомУчете И СтрокаТаблицы.СчетЗатратНУ <> СчетЕН Тогда
				НоваяСтрока.СуммаНал               = СтрокаТаблицы.НДС;
			КонецЕсли;
								
			Если СтрокаТаблицы.ДействияНДСПокупки_ИсключитьИзСтоимости Тогда
				НоваяСтрока.СуммаРегл = (-1)*НоваяСтрока.СуммаРегл;
				НоваяСтрока.СуммаНал = (-1)*НоваяСтрока.СуммаНал;
			КонецЕсли;
								
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаЗатрат.Количество() > 0 Тогда
		
		// В документе нет флагов отражения в учете - он нужен только для регл. учета
		// Поэтому добавим "вручную" в структуру шапки
		//   1. значения флагов
		СтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Истина);
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", 	Истина);
		
		//   2. значения параметров, которые зависят от флагов
		ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(
			СтруктураШапкиДокумента, 
			СтруктураШапкиДокумента.Дата, 
			Отказ, 
			СтруктураШапкиДокумента.Организация, 
			"Бух", 
			Новый Структура("ПоддержкаПБУ18"));
		
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(СтруктураШапкиДокумента, ТаблицаЗатрат, Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
//

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	
	КолвоСтрокДопТЧ = СчетаУчетаРасходов.Количество(); 
	Для ОбратныйИндекс = 1 По КолвоСтрокДопТЧ Цикл 
		СтрокаДопТЧ = СчетаУчетаРасходов[КолвоСтрокДопТЧ - ОбратныйИндекс]; 
			
		Если СоставКосвенныхРасходов.Найти(СтрокаДопТЧ.КлючСтроки, "КлючСтроки") = Неопределено 
		 ИЛИ СтрокаДопТЧ.КлючСтроки = 0 Тогда 
			СчетаУчетаРасходов.Удалить(СтрокаДопТЧ); 
		КонецЕсли; 			
			
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		НачалоПериода = УчетНДС.ПолучитьНачалоПериодаПоУчетнойПолитике(Организация, Дата);
	КонецЕсли;
		
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим) Экспорт
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не установлен период документа!", Отказ, Заголовок);
	КонецЕсли; 
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Ссылка);
	
	//Отображение данных о валютах
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	ТаблицаПоКосвеннымРасходам = ПодготовитьТаблицуПоКосвеннымРасходам(СтруктураШапкиДокумента);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части счетов расхода.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Очистить();
	СтруктураПолей.Вставить("СтатьяЗатрат",		"СтатьяЗатрат");
	СтруктураПолей.Вставить("ПодразделениеОрганизации", "ПодразделениеОрганизации");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", 	"НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Заказ", 			"Заказ");
	СтруктураПолей.Вставить("Затрата", 			"Затрата");
	СтруктураПолей.Вставить("ХарактеристикаЗатраты", "ХарактеристикаЗатраты");
	СтруктураПолей.Вставить("СерияЗатраты", 	"СерияЗатраты");
	СтруктураПолей.Вставить("СчетЗатрат",		"СчетЗатрат");
	СтруктураПолей.Вставить("СчетЗатратЕНВД",	"СчетЗатратЕНВД");
	СтруктураПолей.Вставить("Субконто1",		"Субконто1");
	СтруктураПолей.Вставить("Субконто2",		"Субконто2");
	СтруктураПолей.Вставить("Субконто3",		"Субконто3");
	СтруктураПолей.Вставить("ОтражатьВНалоговомУчете",		"ОтражатьВНалоговомУчете");
	СтруктураПолей.Вставить("СчетЗатратНУ",		"СчетЗатратНУ");
	СтруктураПолей.Вставить("СубконтоНУ1",		"СубконтоНУ1");
	СтруктураПолей.Вставить("СубконтоНУ2",		"СубконтоНУ2");
	СтруктураПолей.Вставить("СубконтоНУ3",		"СубконтоНУ3");
	СтруктураПолей.Вставить("КлючСтроки",		"КлючСтроки");
	СтруктураПолей.Вставить("СуммаБезНДС",		"СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",				"НДС");
	
	РезультатЗапросаПоСчетамУчета = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СчетаУчетаРасходов", СтруктураПолей);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(ТаблицаПоКосвеннымРасходам, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиСоставКосвенныхРасходов(ТаблицаПоКосвеннымРасходам, Отказ, Заголовок);
	
//БП12 Отключено 
//	ПроверитьЗаполнениеТабличнойЧастиСчетаУчетаРасходов(Отказ, Заголовок, ТаблицаПоКосвеннымРасходам);
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	ПроверитьСоответствиеДатыПериоду(Отказ, Заголовок);
	
	Если Не Отказ Тогда
		//m.ionov@a-prof.ru 17.04.2014
		//ПроверитьСписаниеПоРегиструНДСКосвенныеРасходы(СтруктураШапкиДокумента, Заголовок, Отказ);
		Если Не ЗаполнитьПоНДСПредъявленный Тогда
			ПроверитьСписаниеПоРегиструНДСКосвенныеРасходы(СтруктураШапкиДокумента, Заголовок, Отказ);
		КонецЕсли;
		ДвиженияПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоКосвеннымРасходам, Отказ, Заголовок);
	КонецЕсли;
 
КонецПроцедуры

//m.ionov@a-prof.ru 17.04.2014
Процедура ЗаполнитьТабличныеЧастиПоНДСПредъявленный(Организация, НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам);
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НДСПредъявленныйОбороты.Организация,
	               |	НДСПредъявленныйОбороты.СчетФактура КАК СчетФактура,
	               |	НДСПредъявленныйОбороты.ВидЦенности КАК ВидЦенности,
	               |	НДСПредъявленныйОбороты.СтавкаНДС КАК СтавкаНДС,
	               |	НДСПредъявленныйОбороты.СчетУчетаНДС КАК СчетУчетаНДС,
	               |	НДСПредъявленныйОбороты.Поставщик,
	               |	СУММА(НДСПредъявленныйОбороты.СуммаБезНДСПриход) + СУММА(НДСПредъявленныйОбороты.НДСПриход) КАК СуммаВсего,
	               |	СУММА(НДСПредъявленныйОбороты.НДСПриход) КАК НДСВсего
	               |ИЗ
	               |	РегистрНакопления.НДСПредъявленный.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			СчетУчетаНДС В (&СписокСчетов)
	               |				И Организация = &Организация) КАК НДСПредъявленныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСПредъявленныйОбороты.Организация,
	               |	НДСПредъявленныйОбороты.СчетФактура,
	               |	НДСПредъявленныйОбороты.ВидЦенности,
	               |	НДСПредъявленныйОбороты.СтавкаНДС,
	               |	НДСПредъявленныйОбороты.СчетУчетаНДС,
	               |	НДСПредъявленныйОбороты.Поставщик
	               |
	               |ИМЕЮЩИЕ
	               |	НЕ СУММА(НДСПредъявленныйОбороты.НДСПриход) = 0 ИЛИ
	               |	НЕ СУММА(НДСПредъявленныйОбороты.СуммаБезНДСПриход) = 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СчетУчетаНДС,
	               |	ВидЦенности,
	               |	СчетФактура,
	               |	СтавкаНДС";
				   
	Ключ = 1;
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		НоваяСтрока = СоставКосвенныхРасходов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		
		НоваяСтрока.КлючСтроки = Ключ;
		
		НоваяСтрока = СчетаУчетаРасходов.Добавить();
		НоваяСтрока.ОтражатьВНалоговомУчете = Истина;
		НоваяСтрока.КлючСтроки = Ключ;
		
		Ключ = Ключ + 1;
	КонецЦикла;
КонецПроцедуры
//----m.ionov@a-prof.ru---

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
