Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мУчетнаяПолитика Экспорт;         // (Общ)
Перем мУчетнаяПолитикаБух Экспорт;      // (Регл)
Перем мУчетнаяПолитикаНал Экспорт;		// (Нал)
Перем мПорядокСписанияПартий;           // (Общ)
Перем мУчетЗатратПоЗаказамНаПроизводство;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

Перем мИспользоватьТолькоСборочныеСпецификации Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мИспользоватьНаработку Экспорт;
Перем мИспользоватьЗаказыНаПроизводство Экспорт;
Перем мИспользоватьПотребностиЗаказовНаПроизводство;
Перем мСпособЗакрытияПотребностейЗаказовНаПроизводство;

//начало изменений БП 04 
Перем ИспользоватьРегистрСвободныеОстатки;
//конец изменений БП 04	 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура выводит печатную форму МХ-18
//
Функция ВывестиПечатнуюФормуМХ18( Шапка, СтрокаПродукция)
	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	
	ТабДокумент  = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетПроизводстваЗаСмену_МХ18";

	Макет = ПолучитьОбщийМакет("МХ18");

	// Выводим общие реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Получатель     = СтрокаПродукция.Родитель.Получатель;
	ОбластьМакета.Параметры.КоррСчет       = СтрокаПродукция.Родитель.КоррСчет;
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;

	// Выводим всевозможные коды
	ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОбОрганизации.КодПоОКПО;

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 20;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = СтрокаПродукция.Количество();

	Если КоличествоСтрок <= 2 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице  	   = 0;

	// инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
	ИтогоСумма  	 = 0;
	Ном              = 0;

	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из СтрокаПродукция Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			ОбщегоНазначения.Сообщение("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		
		// Проверим, помещается ли строка с данными и последняя строка (или итоги) на странице.
		СтрокаТаблицы = Новый Массив;
		СтрокаТаблицы.Добавить(ОбластьСтрока);
		Если Ном = КоличествоСтрок Тогда
			СтрокаТаблицы.Добавить(ОбластьИтого);
			СтрокаТаблицы.Добавить(ОбластьПодвал);
		КонецЕсли;

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда
		
			// очистим итоги по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоМестНаСтранице        = 0;
			ИтогоКоличествоНаСтранице  = 0;
			ИтогоСуммаНаСтранице  	   = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрок);

		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			МассаБрутто = 0;
		Иначе
			МассаБрутто = ВыборкаСтрок.МассаБрутто;
			МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
		КонецЕсли;

		Мест        = ВыборкаСтрок.КоличествоМест;
		Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);

		Количество  = ВыборкаСтрок.Количество;

		ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
		ИтогоСуммаНаСтранице  	   = ИтогоСуммаНаСтранице		+ ВыборкаСтрок.Сумма;

		// увеличим итоги по дукументу
		ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
		ИтогоМест        = ИтогоМест        + Мест;
		ИтогоКоличество  = ИтогоКоличество  + Количество;
		ИтогоСумма  	 = ИтогоСумма		+ ВыборкаСтрок.Сумма;

	КонецЦикла;

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогМест        = ИтогоМест;
	ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогСумма 		= ИтогоСумма;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабДокумент;
	
КонецФункции // ВывестиПечатнуюФормуМХ18()
	
// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьМХ18()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата КАК ДатаДокумента,
	|	Организация,
	|	Подразделение
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену КАК ОтчетПроизводстваЗаСмену
	|
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	//определим курс валюты УУ для перевода в рубли цены и суммы по документу
	Если ОтражатьВБухгалтерскомУчете Тогда
		КоэффициентПересчета = 1;
	Иначе
		СтруктураКурсУпр = 	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", мВалютаУправленческогоУчета));
	    СтруктураКурсРегл = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", мВалютаРегламентированногоУчета));
		Если (СтруктураКурсРегл.Курс * СтруктураКурсУпр.Кратность) = 0 Тогда
			КоэффициентПересчета = 1;
		Иначе	
	    	КоэффициентПересчета = (СтруктураКурсУпр.Курс * СтруктураКурсРегл.Кратность) / (СтруктураКурсРегл.Курс * СтруктураКурсУпр.Кратность);
		КонецЕсли;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр( "НачГраница",      Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр( "КонГраница",      Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр( "НаСклад",         Перечисления.НаправленияВыпуска.НаСклад);
	Запрос.УстановитьПараметр( "НаЗатраты",       Перечисления.НаправленияВыпуска.НаЗатраты);
	Запрос.УстановитьПараметр( "НаЗатратыСписок", Перечисления.НаправленияВыпуска.НаЗатратыСписок);
    Запрос.УстановитьПараметр( "КоэффициентПересчета", КоэффициентПересчета);

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление КАК ВидУпаковки,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоМест > 0
	|			ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Серия КАК Серия,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест КАК КоличествоМест,
	|	ВЫБОР КОГДА ВложенныйЗапрос.КоличествоВсего ЕСТЬ NULL ИЛИ ВложенныйЗапрос.КоличествоВсего = 0 ТОГДА
	|		0
	|	ИНАЧЕ
	|		ВложенныйЗапрос.СтоимостьОборот / ВложенныйЗапрос.КоличествоВсего
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР КОГДА ВложенныйЗапрос.КоличествоВсего ЕСТЬ NULL ИЛИ ВложенныйЗапрос.КоличествоВсего = 0 ТОГДА
	|		0
	|	КОГДА ВложенныйЗапрос.Количество = ВложенныйЗапрос.КоличествоВсего ТОГДА
	|		ВложенныйЗапрос.СтоимостьОборот
	|	ИНАЧЕ
	|		ВложенныйЗапрос.СтоимостьОборот * ВложенныйЗапрос.Количество / ВложенныйЗапрос.КоличествоВсего
	|	КОНЕЦ КАК Сумма,
	|	ВложенныйЗапрос.НомерСтроки 	КАК НомерСтроки,
	|	ВложенныйЗапрос.Получатель 		КАК Получатель,
	|	ВложенныйЗапрос.КоррСчет 		КАК КоррСчет
	|ИЗ (
	|	ВЫБРАТЬ
	|		ОтчетПроизводстваЗаСмену.Номенклатура КАК Номенклатура,
	|		ОтчетПроизводстваЗаСмену.Коэффициент КАК Коэффициент,
	|		ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ОтчетПроизводстваЗаСмену.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		ОтчетПроизводстваЗаСмену.ЕдиницаИзмеренияМест.Коэффициент КАК КоэффициентМест,
	|		ОтчетПроизводстваЗаСмену.ХарактеристикаНоменклатуры КАК Характеристика,
	|		ОтчетПроизводстваЗаСмену.СерияНоменклатуры КАК Серия,
	|		СУММА(	ВЫБОР КОГДА НаправленияСписанияВсего.Коэффициент ЕСТЬ NULL
	|							ИЛИ НаправленияСписанияВсего.Коэффициент = 0 ТОГДА
	|					ОтчетПроизводстваЗаСмену.Количество
	|				ИНАЧЕ
	|					ОтчетПроизводстваЗаСмену.Количество * НаправленияСписания.Коэффициент / НаправленияСписанияВсего.Коэффициент
	|				КОНЕЦ
	|			) КАК Количество,
	|		СУММА(	ВЫБОР КОГДА НаправленияСписанияВсего.Коэффициент ЕСТЬ NULL
	|							ИЛИ НаправленияСписанияВсего.Коэффициент = 0 ТОГДА
	|					ОтчетПроизводстваЗаСмену.КоличествоМест
	|				ИНАЧЕ
	|					ОтчетПроизводстваЗаСмену.КоличествоМест * НаправленияСписания.Коэффициент / НаправленияСписанияВсего.Коэффициент
	|				КОНЕЦ
	|			) КАК КоличествоМест,
	|		СУММА(ОтчетПроизводстваЗаСмену.Количество) КАК КоличествоВсего,
	|		
	|		ОтчетПроизводстваЗаСмену.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР КОГДА Не ОтчетПроизводстваЗаСмену.Ссылка.ИспользоватьНаправленияВыпуска
	|			ИЛИ (ОтчетПроизводстваЗаСмену.Ссылка.ИспользоватьНаправленияВыпуска
	|				И ОтчетПроизводстваЗаСмену.НаправлениеВыпуска = &НаСклад) ТОГДА
	|			ОтчетПроизводстваЗаСмену.Ссылка.Склад
	|		КОГДА ОтчетПроизводстваЗаСмену.НаправлениеВыпуска = &НаЗатраты ТОГДА
	|			ВЫБОР КОГДА ОтчетПроизводстваЗаСмену.Ссылка.ОтражатьВБухгалтерскомУчете ТОГДА
	|				ОтчетПроизводстваЗаСмену.ПодразделениеОрганизацииПолучатель
	|			ИНАЧЕ
	|				ОтчетПроизводстваЗаСмену.ПодразделениеПолучатель
	|			КОНЕЦ
	|		КОГДА ОтчетПроизводстваЗаСмену.НаправлениеВыпуска = &НаЗатратыСписок ТОГДА
	|			НаправленияСписания.Подразделение
	|		КОНЕЦ КАК Получатель,
	|		
	|		ВЫБОР КОГДА Не ОтчетПроизводстваЗаСмену.Ссылка.ИспользоватьНаправленияВыпуска
	|			ИЛИ (ОтчетПроизводстваЗаСмену.Ссылка.ИспользоватьНаправленияВыпуска
	|				И ОтчетПроизводстваЗаСмену.НаправлениеВыпуска = &НаСклад) ТОГДА
	|			ОтчетПроизводстваЗаСмену.Счет
	|		КОГДА ОтчетПроизводстваЗаСмену.НаправлениеВыпуска = &НаЗатраты ТОГДА
	|			ОтчетПроизводстваЗаСмену.СчетЗатратПолучатель
	|		КОГДА ОтчетПроизводстваЗаСмену.НаправлениеВыпуска = &НаЗатратыСписок ТОГДА
	|			НаправленияСписания.СчетЗатрат
	|		КОНЕЦ КАК КоррСчет,
	|		
	|		СУММА(ЕСТЬNULL(ВыпускПродукции.Стоимость,0))*&КоэффициентПересчета КАК СтоимостьОборот
	|	ИЗ
	|		Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСмену
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				ВыпускПродукции.НомерСтрокиДокумента,
	|				СУММА(ВыпускПродукции.Стоимость) КАК Стоимость
	|           ИЗ
	|				РегистрНакопления.ВыпускПродукции%Суффикс% КАК ВыпускПродукции
	|			ГДЕ
	|				ВыпускПродукции.Регистратор = &ТекущийДокумент
	|			СГРУППИРОВАТЬ ПО
	|				ВыпускПродукции.НомерСтрокиДокумента
	|			) КАК ВыпускПродукции
	|		ПО 
	|			ОтчетПроизводстваЗаСмену.НомерСтроки = ВыпускПродукции.НомерСтрокиДокумента
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				ВЫБОР КОГДА НаправленияСписания.Ссылка.ОтражатьВБухгалтерскомУчете ТОГДА
	|					ПодразделениеОрганизации
	|				ИНАЧЕ
	|					Подразделение
	|				КОНЕЦ КАК Подразделение,
	|				СчетЗатрат,
	|				КлючСвязи,
	|				СУММА(Коэффициент) КАК Коэффициент
	|			ИЗ
	|				Документ.ОтчетПроизводстваЗаСмену.НаправленияСписания КАК НаправленияСписания
	|			ГДЕ
	|				НаправленияСписания.Ссылка = &ТекущийДокумент
	|			СГРУППИРОВАТЬ ПО
	|				НаправленияСписания.Ссылка,
	|				Подразделение,
	|				ПодразделениеОрганизации,
	|				СчетЗатрат,
	|				КлючСвязи
	|			) КАК НаправленияСписания
	|		ПО
	|			ОтчетПроизводстваЗаСмену.НаправлениеВыпуска = &НаЗатратыСписок
	|			И ОтчетПроизводстваЗаСмену.Ссылка.ИспользоватьНаправленияВыпуска
	|			И ОтчетПроизводстваЗаСмену.КлючСвязи = НаправленияСписания.КлючСвязи
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				КлючСвязи,
	|				СУММА(Коэффициент) КАК Коэффициент
	|			ИЗ
	|				Документ.ОтчетПроизводстваЗаСмену.НаправленияСписания КАК НаправленияСписания
	|			ГДЕ
	|				НаправленияСписания.Ссылка = &ТекущийДокумент
	|			СГРУППИРОВАТЬ ПО
	|				КлючСвязи	
	|			) КАК НаправленияСписанияВсего
	|		ПО
	|			ОтчетПроизводстваЗаСмену.НаправлениеВыпуска = &НаЗатратыСписок
	|			И ОтчетПроизводстваЗаСмену.Ссылка.ИспользоватьНаправленияВыпуска
	|			И ОтчетПроизводстваЗаСмену.КлючСвязи = НаправленияСписания.КлючСвязи
	|			
	|	ГДЕ
	|		ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОтчетПроизводстваЗаСмену.Ссылка,
	|		ОтчетПроизводстваЗаСмену.Номенклатура,
	|		ОтчетПроизводстваЗаСмену.Коэффициент,
	|		ОтчетПроизводстваЗаСмену.ЕдиницаИзмерения,
	|		ОтчетПроизводстваЗаСмену.ЕдиницаИзмеренияМест,
	|		ОтчетПроизводстваЗаСмену.ХарактеристикаНоменклатуры,
	|		ОтчетПроизводстваЗаСмену.СерияНоменклатуры,
	|		ОтчетПроизводстваЗаСмену.ЕдиницаИзмеренияМест.Коэффициент,
	|		ОтчетПроизводстваЗаСмену.НаправлениеВыпуска,
	|		ОтчетПроизводстваЗаСмену.ПодразделениеПолучатель,
	|		ОтчетПроизводстваЗаСмену.ПодразделениеОрганизацииПолучатель,
	|		НаправленияСписания.Подразделение,
	|		НаправленияСписания.СчетЗатрат,
	|		ОтчетПроизводстваЗаСмену.Счет,
	|		ОтчетПроизводстваЗаСмену.СчетЗатратПолучатель,
	|		ОтчетПроизводстваЗаСмену.НомерСтроки
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Получатель,
	|	КоррСчет
	|";
		
	Если ОтражатьВБухгалтерскомУчете Тогда
		Запрос.Текст = СтрЗаменить( ТекстЗапроса, "%Суффикс%", "БухгалтерскийУчет");
	Иначе
		Запрос.Текст = СтрЗаменить( ТекстЗапроса, "%Суффикс%", "");
	КонецЕсли;
	ЗапросТовары = Запрос.Выполнить().Выгрузить( ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДокумент = Новый Массив;
	
	Для Каждого СтрокаПолучатель Из ЗапросТовары.Строки Цикл
		Для Каждого СтрокаКоррСчет Из СтрокаПолучатель.Строки Цикл
			ТабДокумент.Добавить( ВывестиПечатнуюФормуМХ18( Шапка, СтрокаКоррСчет.Строки));
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьМХ18()

// Функция осуществляет запуск обработки формирующей печатную форму
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьСерийныеНомера()
	
	Обработка = Обработки.ПечатьСерийныхНомеров.ПолучитьФорму("Форма");
	Обработка.Печать(Продукция, СерийныеНомера);
	
	Возврат Неопределено;
	
КонецФункции // ПечатьСерийныеНомера()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "МХ18" Тогда
	
		ТабДокумент = ПечатьМХ18();
		
	ИначеЕсли ИмяМакета = "СерНомера" Тогда
	
		ТабДокумент = ПечатьСерийныеНомера();
		
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Продукция");
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ТипЗнч(ТабДокумент) = Тип("Массив") Тогда
		Для К = 0 По ТабДокумент.ВГраница() Цикл
			УниверсальныеМеханизмы.НапечататьДокумент( ТабДокумент[К], КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), ТабДокумент[К]);
		КонецЦикла;
	Иначе
		УниверсальныеМеханизмы.НапечататьДокумент( ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
	КонецЕсли;

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СерНомера = Обработки.ПечатьСерийныхНомеров.ПолучитьФорму("Форма").ПредставлениеВМеню();
	Если СерНомера <> "" Тогда
		СтруктураМакетов = Новый Структура("МХ18,СерНомера", "МХ-18 (Накладная на передачу готовой продукции)", СерНомера);
	Иначе
		СтруктураМакетов = Новый Структура("МХ18", "МХ-18 (Накладная на передачу готовой продукции)");
	КонецЕсли;
	
	СтруктураМакетов.Вставить("СерийныеНомера",      "Список серийных номеров");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
							   |Материалы.ПодразделениеНЗП, РаспределениеМатериалов.ПодразделениеНЗП,
							   |ВозвратныеОтходы.ПодразделениеНЗП, РаспределениеВозвратныхОтходов.ПодразделениеНЗП,
							   |ПрочиеЗатраты.ПодразделениеНЗП, РаспределениеПрочихЗатрат.ПодразделениеНЗП,
							   |ТехнологическиеОперации.ПодразделениеНЗП, РаспределениеТехнологическихОпераций.ПодразделениеНЗП,
							   |ПрочиеЗатраты.Сумма,
							   |Получатели.Подразделение,
							   |РаспределениеПрочихЗатрат.Сумма,
							   |ТехнологическиеОперации.СчетЗатрат,ТехнологическиеОперации.Сумма,
							   |Исполнители.СуммаКНачислению,
							   |ВозвратныеОтходы.Сумма,
							   |ВозвратныеОтходы.СтатусПартии,
							   |Продукция.СтатусПартии";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
							   |Материалы.ПодразделениеОрганизацииНЗП, РаспределениеМатериалов.ПодразделениеОрганизацииНЗП,
							   |ВозвратныеОтходы.ПодразделениеОрганизацииНЗП, РаспределениеВозвратныхОтходов.ПодразделениеОрганизацииНЗП,
							   |ПрочиеЗатраты.ПодразделениеОрганизацииНЗП, РаспределениеПрочихЗатрат.ПодразделениеОрганизацииНЗП,
							   |ТехнологическиеОперации.ПодразделениеОрганизацииНЗП, РаспределениеТехнологическихОпераций.ПодразделениеОрганизацииНЗП,
 							   |Продукция.СчетЗатрат, 
							   |Получатели.ПодразделениеОрганизации, Получатели.СчетЗатрат,
							   |РаспределениеМатериалов.СчетЗатрат, 
							   |ТехнологическиеОперации.СчетЗатрат,ТехнологическиеОперации.СуммаРегл,
							   |Исполнители.СуммаКНачислениюРегл,
							   |ПрочиеЗатраты.СуммаРегл,
							   |РаспределениеПрочихЗатрат.СчетЗатрат, РаспределениеПрочихЗатрат.СуммаРегл,
							   |РаспределениеТехнологическихОпераций.СчетЗатрат, РаспределениеТехнологическихОпераций.СуммаРегл,
							   |ВозвратныеОтходы.СчетЗатрат, ВозвратныеОтходы.СуммаРегл,
							   |РаспределениеВозвратныхОтходов.СчетЗатрат";
							   
	мСтрокаРеквизитыНалУчета = "Продукция.СчетЗатратНУ,
							   |Материалы.ПодразделениеОрганизацииНЗП, РаспределениеМатериалов.ПодразделениеОрганизацииНЗП,
							   |ВозвратныеОтходы.ПодразделениеОрганизацииНЗП, РаспределениеВозвратныхОтходов.ПодразделениеОрганизацииНЗП,
							   |ПрочиеЗатраты.ПодразделениеОрганизацииНЗП, РаспределениеПрочихЗатрат.ПодразделениеОрганизацииНЗП,
							   |ТехнологическиеОперации.ПодразделениеОрганизацииНЗП, РаспределениеТехнологическихОпераций.ПодразделениеОрганизацииНЗП,
							   |Получатели.СчетЗатратНУ, 
							   |РаспределениеМатериалов.СчетЗатратНУ, 
							   |РаспределениеПрочихЗатрат.СчетЗатратНУ, 
							   |ТехнологическиеОперации.СчетЗатратНУ,
							   |РаспределениеТехнологическихОпераций.СчетЗатратНУ, 
							   |ВозвратныеОтходы.СчетЗатратНУ,
							   |РаспределениеВозвратныхОтходов.СчетЗатратНУ";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Функция возвращает тех. операции для указанных спецификаций
//
Функция ПолучитьТехОперации(Спецификация, Продукция = Неопределено, ХарактеристикаПродукции = Неопределено) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Маршрут.НомерОперации,
	|	Маршрут.ТехнологическаяОперация КАК ТехОперация,
	|	ВЫБОР КОГДА (ВыходныеИзделия.КоличествоПродукции ЕСТЬ NULL) ИЛИ (ВыходныеИзделия.КоличествоПродукции = 0) ТОГДА
	|		Маршрут.Количество
	|	ИНАЧЕ
	|		Маршрут.Количество / ВыходныеИзделия.КоличествоПродукции
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Справочник.ТехнологическиеКартыПроизводства.Маршрут КАК Маршрут
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			СУММА(ВыходныеИзделия.Количество / ВыходныеИзделия.ЕдиницаИзмерения.Коэффициент) КАК КоличествоПродукции
	|		ИЗ
	|			Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК ВыходныеИзделия
	|		ГДЕ
	|			ВыходныеИзделия.Ссылка = &Спецификация
	|			И ВыходныеИзделия.Номенклатура = &Продукция
	|			И ВыходныеИзделия.ХарактеристикаНоменклатуры = &ХарактеристикаПродукции
	|		) КАК ВыходныеИзделия
	|	ПО
	|		ИСТИНА
	|		
	| ГДЕ
	|	Маршрут.Ссылка В (
	|		ВЫБРАТЬ 
	|			РегТехКарта.ТехнологическаяКарта
	|		ИЗ
	|			РегистрСведений.ТехнологическиеКартыСпецификацийПланирования.СрезПоследних(&КонДата, Спецификация = &Спецификация) КАК РегТехКарта
	|		)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("КонДата", 				 Новый Граница( Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Спецификация", 			 Спецификация);
	Запрос.УстановитьПараметр("Продукция", 				 Продукция);
	Запрос.УстановитьПараметр("ХарактеристикаПродукции", ХарактеристикаПродукции);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // ПолучитьТехОперации()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "ТехнологическиеОперации"
//
Процедура ЗаполнитьТехОперации() Экспорт
	
	// Таблица выпуска по документу
	ВыпускПоДокументу = Продукция.Выгрузить();
	
	Для каждого СтрокаВыпускПоДокументу из ВыпускПоДокументу Цикл
		
		// Количество выпуска без доделки
		СтрокаВыпускПоДокументу.Количество = Макс(СтрокаВыпускПоДокументу.Количество - СтрокаВыпускПоДокументу.КоличествоДоделка, 0) * СтрокаВыпускПоДокументу.Коэффициент;
		
	КонецЦикла;
	
	ВыпускПоДокументу.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Спецификация, НоменклатурнаяГруппа, Заказ, ВидВыпуска", "Количество");
	
	// Таблица количества выпусков по спецификациям для получения технологических операций
	ВыпускПоСпецификациям = Новый ТаблицаЗначений;
	ВыпускПоСпецификациям.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
	ВыпускПоСпецификациям.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ВыпускПоСпецификациям.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство, ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказНаОбслуживаниеОС"));
	ВыпускПоСпецификациям.Колонки.Добавить("ВидВыпуска", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВыпуска"));
	ВыпускПоСпецификациям.Колонки.Добавить("КоличествоВыпусков");
	
	// Таблица сопутствующих выпусков по спецификациям для уменьшения основного выпуска
	СопутствующийВыпускПоСпецификациям = Новый ТаблицаЗначений;
	СопутствующийВыпускПоСпецификациям.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СопутствующийВыпускПоСпецификациям.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СопутствующийВыпускПоСпецификациям.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
	СопутствующийВыпускПоСпецификациям.Колонки.Добавить("КоличествоВыпусков");
	
	// Обход строк табличной части "Продукция"
	Для каждого СтрокаПродукция из ВыпускПоДокументу Цикл
		
		// Строки пустой спецификацией или пустым количеством без доделки пропускаются
		Если НЕ ЗначениеЗаполнено(СтрокаПродукция.Спецификация) ИЛИ СтрокаПродукция.Количество = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Добавление новой строки в таблицу выпусков
		НоваяСтрокаВыпускПоСпецификациям = ВыпускПоСпецификациям.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаВыпускПоСпецификациям, СтрокаПродукция);
		НоваяСтрокаВыпускПоСпецификациям.КоличествоВыпусков = 0;
		
		// Количество выпуска по спецификации, соответствующее строке таблицы выпусков
		КоличествоВыпускаПоСпецификации = 0;

		// Обход строк спецификации для расчета количества выпусков для текущей строки табличной части "Продукция"
		Для каждого СтрокаСпецификации Из СтрокаПродукция.Спецификация.ВыходныеИзделия Цикл
			
			// Подходят строки с совпадающей номенклатурой, совпадающей или пустой характеристикой, заполненным количеством
			Если СтрокаСпецификации.Номенклатура = СтрокаПродукция.Номенклатура
				И (СтрокаСпецификации.ХарактеристикаНоменклатуры = СтрокаПродукция.ХарактеристикаНоменклатуры
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаСпецификации.ХарактеристикаНоменклатуры))
				И СтрокаСпецификации.Количество <> 0 Тогда
			   
				КоличествоВыпускаПоСпецификации = КоличествоВыпускаПоСпецификации + СтрокаСпецификации.Количество * СтрокаСпецификации.ЕдиницаИзмерения.Коэффициент;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоВыпускаПоСпецификации > 0 Тогда
		
			НоваяСтрокаВыпускПоСпецификациям.КоличествоВыпусков = СтрокаПродукция.Количество / КоличествоВыпускаПоСпецификации;
			  
		КонецЕсли;
		
		// Уменьшение количества выпуска по спецификации за счет сопутствующего выпуска
		Если КоличествоВыпускаПоСпецификации > 0 Тогда
			
			// Обход строк сопуствующего выпуска для уменьшения количества выпуска по спецификации за счет сопутствующих выпусков
			Для каждого СтрокаСопутствующийВыпуск из СопутствующийВыпускПоСпецификациям Цикл
				
				// Подходят строки с совпадающей спецификацией, совпадающей номенклатурой, совпадающей или пустой характеристикой, заполненным количеством
				Если СтрокаСопутствующийВыпуск.Спецификация = СтрокаПродукция.Спецификация
					И СтрокаСопутствующийВыпуск.Номенклатура = СтрокаПродукция.Номенклатура
					И (СтрокаСопутствующийВыпуск.ХарактеристикаНоменклатуры = СтрокаПродукция.ХарактеристикаНоменклатуры
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаСопутствующийВыпуск.ХарактеристикаНоменклатуры))
					И СтрокаСопутствующийВыпуск.КоличествоВыпусков <> 0 Тогда
				   
					НоваяСтрокаВыпускПоСпецификациям.КоличествоВыпусков = НоваяСтрокаВыпускПоСпецификациям.КоличествоВыпусков - СтрокаСопутствующийВыпуск.КоличествоВыпусков;
					СтрокаСопутствующийВыпуск.КоличествоВыпусков = -Мин(НоваяСтрокаВыпускПоСпецификациям.КоличествоВыпусков, 0);
					НоваяСтрокаВыпускПоСпецификациям.КоличествоВыпусков = Макс(НоваяСтрокаВыпускПоСпецификациям.КоличествоВыпусков, 0);
					
					Если НоваяСтрокаВыпускПоСпецификациям.КоличествоВыпусков = 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Расчет сопутствующих выпусков
		Если НоваяСтрокаВыпускПоСпецификациям.КоличествоВыпусков > 0 Тогда
		
			// Обход строк спецификации для расчета количества сопутствующих выпусков для текущей строки табличной части "Продукция"
			Для каждого СтрокаСпецификации Из СтрокаПродукция.Спецификация.ВыходныеИзделия Цикл
				
				// Подходят строки с не совпадающей номенклатурой или не совпадающей и пустой характеристикой, заполненным количеством
				Если СтрокаСпецификации.Номенклатура <> СтрокаПродукция.Номенклатура
					ИЛИ (СтрокаСпецификации.ХарактеристикаНоменклатуры <> СтрокаПродукция.ХарактеристикаНоменклатуры
					И ЗначениеЗаполнено(СтрокаСпецификации.ХарактеристикаНоменклатуры))
					И СтрокаСпецификации.Количество <> 0 Тогда
					
					НоваяСтрокаСопутствующийВыпускПоСпецификациям = СопутствующийВыпускПоСпецификациям.Добавить();
					НоваяСтрокаСопутствующийВыпускПоСпецификациям.Номенклатура = СтрокаСпецификации.Номенклатура;
					НоваяСтрокаСопутствующийВыпускПоСпецификациям.ХарактеристикаНоменклатуры = СтрокаСпецификации.ХарактеристикаНоменклатуры;
					НоваяСтрокаСопутствующийВыпускПоСпецификациям.Спецификация = СтрокаПродукция.Спецификация;
					НоваяСтрокаСопутствующийВыпускПоСпецификациям.КоличествоВыпусков = НоваяСтрокаВыпускПоСпецификациям.КоличествоВыпусков;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТехнологическиеОперации = ТехнологическиеОперации.Выгрузить();
	
	ВыпускПоСпецификациям.Сортировать("Спецификация, ВидВыпуска, КоличествоВыпусков УБЫВ");
	
	Для каждого ВыпускПоСпецификации Из ВыпускПоСпецификациям Цикл
		
		ТехОперацииНаВыпускПоСпецификации = ПолучитьТехОперацииНаВыпускПоСпецификации(ВыпускПоСпецификации.Спецификация, ВыпускПоСпецификации.КоличествоВыпусков);
		
		Если ТехОперацииНаВыпускПоСпецификации <> Неопределено Тогда
			
			ДобавитьСтрокуВТехОперации(ТаблицаТехнологическиеОперации, ВыпускПоСпецификации, ТехОперацииНаВыпускПоСпецификации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТехнологическиеОперации.Свернуть("ТехнологическаяОперация, Валюта, Расценка, СтатьяЗатрат, Заказ, 
			|НоменклатурнаяГруппа, ВидВыпуска, СчетЗатрат, СчетЗатратНУ",
			"Количество, СуммаВВалютеРасценки, Сумма, СуммаРегл");
			
	ТехнологическиеОперации.Загрузить(ТаблицаТехнологическиеОперации);
	
КонецПроцедуры // КоманднаяПанельТехнологическиеОперацииЗаполнить()

Процедура ДобавитьСтрокуВТехОперации(ТаблицаТехнологическиеОперации, СтрокаВыпуска, ТехОпер)
	
	Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", мВалютаУправленческогоУчета));
	КурсВалютыУпрУчета = Структура.Курс;
	КратностьВалютыУпрУчета = Структура.Кратность;

	СтруктПоиска = Новый Структура;
	СтруктПоиска.Вставить( "Спецификация", СтрокаВыпуска.Спецификация);
	СтруктПоиска.Вставить( "ВидВыпуска",   СтрокаВыпуска.ВидВыпуска);
	
	ТабЗнач = Продукция.Выгрузить();
	ТабЗнач.Свернуть( "Спецификация, Заказ, НоменклатурнаяГруппа, ВидВыпуска", "ДоляСтоимости");
	
	РезПоиска = ТабЗнач.НайтиСтроки(СтруктПоиска);
	
	МассивКоэф = Новый Массив;
	Для К = 0 По РезПоиска.ВГраница() Цикл
		Если РезПоиска[К].ДоляСтоимости = 0 Тогда
			ДоляСтоимости = 1;
		Иначе
			ДоляСтоимости = РезПоиска[К].ДоляСтоимости;
		КонецЕсли;
		МассивКоэф.Добавить(ДоляСтоимости);
	КонецЦикла;
	
	Для Каждого СтрокаТехОпер Из ТехОпер Цикл
		
		ВалРасценки = ?(НЕ ЗначениеЗаполнено(СтрокаТехОпер.ТехОперация.Валюта), мВалютаУправленческогоУчета, СтрокаТехОпер.ТехОперация.Валюта);
		КурсВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты( ВалРасценки, Дата);
		
		СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТехОпер.Количество * СтрокаТехОпер.ТехОперация.Расценка,
			ВалРасценки,
			мВалютаУправленческогоУчета,
			КурсВалюты.Курс,      КурсВалютыУпрУчета,
			КурсВалюты.Кратность, КратностьВалютыУпрУчета);
			
		СуммаБух = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТехОпер.Количество * СтрокаТехОпер.ТехОперация.Расценка,
			ВалРасценки,
			мВалютаРегламентированногоУчета,
			КурсВалюты.Курс,      1,
			КурсВалюты.Кратность, 1);
			
		МассивСуммУпр = ОбщегоНазначения.РаспределитьПропорционально( СуммаУпр, МассивКоэф, 2);
		МассивСуммБух = ОбщегоНазначения.РаспределитьПропорционально( СуммаБух, МассивКоэф, 2);
		МассивСуммВал = ОбщегоНазначения.РаспределитьПропорционально( СтрокаТехОпер.Количество * СтрокаТехОпер.ТехОперация.Расценка, МассивКоэф, 2);
		
		Если МассивСуммУпр = Неопределено И МассивСуммБух = Неопределено И МассивСуммВал = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для К = 0 По РезПоиска.ВГраница() Цикл
			
			НоваяСтрока = ТаблицаТехнологическиеОперации.Добавить();
			НоваяСтрока.ТехнологическаяОперация = СтрокаТехОпер.ТехОперация;
					
			НоваяСтрока.Валюта       = ВалРасценки;
			НоваяСтрока.Расценка     = СтрокаТехОпер.ТехОперация.Расценка;
			НоваяСтрока.СтатьяЗатрат = СтрокаТехОпер.ТехОперация.ОсновнаяСтатьяЗатратНаПроизводство;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыпуска);
					
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(
				НоваяСтрока,
				ПодразделениеОрганизации,
				НоваяСтрока.СтатьяЗатрат);
					
			НоваяСтрока.Количество           = СтрокаТехОпер.Количество;
			НоваяСтрока.СуммаВВалютеРасценки = ?(МассивСуммВал = Неопределено, 0, МассивСуммВал[К]);
			НоваяСтрока.Сумма                = ?(МассивСуммУпр = Неопределено, 0, МассивСуммУпр[К]);
			НоваяСтрока.СуммаРегл            = ?(МассивСуммБух = Неопределено, 0, МассивСуммБух[К]);

		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокуВТехОперации()

// Функция возвращает тех. операции для указанных спецификаций
//
Функция ПолучитьТехОперацииНаВыпускПоСпецификации(Спецификация, КолВыпуск) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Маршрут.НомерОперации,
	|	Маршрут.ТехнологическаяОперация КАК ТехОперация,
	|	Маршрут.Количество * &КолВыпуск КАК Количество
	|ИЗ
	|	Справочник.ТехнологическиеКартыПроизводства.Маршрут КАК Маршрут
	|ГДЕ
	|	Маршрут.Ссылка В
	|			(ВЫБРАТЬ
	|				РегТехКарта.ТехнологическаяКарта
	|			ИЗ
	|				РегистрСведений.ТехнологическиеКартыСпецификацийПланирования.СрезПоследних(&КонДата, Спецификация = &Спецификация) КАК РегТехКарта)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата",      Новый Граница( Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр( "Спецификация", Спецификация);
	Запрос.УстановитьПараметр( "КолВыпуск",    КолВыпуск);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // ПолучитьТехОперацииНаВыпускПоСпецификации()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ДОКУМЕНТА 

// Процедура заполнения документа по заданию на производство.
//
Процедура ЗаполнитьПродукциюПоЗаданиюНаПроизводство() Экспорт
	
	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ЗаданиеНаПроизводство) Тогда
		ТекстПредупреждения = "Не выбрано задание на производство. Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;
	
	Если НЕ ЗаполнятьТабличнуюЧасть Тогда
		#Если Клиент Тогда
		Предупреждение(ТекстПредупреждения);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Если Продукция.Количество() > 0 Тогда
		#Если Клиент Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		#КонецЕсли
		Продукция.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ЗаданиеНаПроизводство", ЗаданиеНаПроизводство);
	Запрос.УстановитьПараметр("ДатаОстатков", 		   ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Остатки.Номенклатура 									КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры 						КАК ХарактеристикаНоменклатуры,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков 			КАК ЕдиницаИзмерения,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	Остатки.Заказ 											КАК Заказ,
	|	Остатки.КонечнаяПродукция 								КАК КонечнаяПродукция,
	|	Остатки.КоличествоОстаток 								КАК КоличествоОстатокПоЗаданию,
	|	ЕСТЬNULL(ЗаданиеНаПроизводствоВыпуск.ДоляСтоимости, 1)	КАК ДоляСтоимости,
	|	ЗаданиеНаПроизводствоВыпуск.Спецификация 				КАК Спецификация
	|ИЗ
	|	РегистрНакопления.ЗаданияНаВыпуск.Остатки(&ДатаОстатков, ЗаданиеНаПроизводство = &ЗаданиеНаПроизводство) КАК Остатки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЗаданиеНаПроизводство.Номенклатура КАК Номенклатура,
	|			ЗаданиеНаПроизводство.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ЗаданиеНаПроизводство.КонечнаяПродукция,
	|			ЗаданиеНаПроизводство.Заказ,
	|			ЗаданиеНаПроизводство.Спецификация,
	|			СпецификацииНоменклатуры.ДоляСтоимости КАК ДоляСтоимости
	|		ИЗ
	|			Документ.ЗаданиеНаПроизводство.ВыпускТехПроцесс КАК ЗаданиеНаПроизводство
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ 
	|				Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК СпецификацииНоменклатуры
	|			ПО 
	|				ЗаданиеНаПроизводство.Спецификация 					= СпецификацииНоменклатуры.Ссылка
	|				И ЗаданиеНаПроизводство.Номенклатура 				= СпецификацииНоменклатуры.Номенклатура
	|				И ЗаданиеНаПроизводство.ХарактеристикаНоменклатуры 	= СпецификацииНоменклатуры.ХарактеристикаНоменклатуры
	|		ГДЕ
	|			ЗаданиеНаПроизводство.Ссылка = &ЗаданиеНаПроизводство
	|			
	|		) КАК ЗаданиеНаПроизводствоВыпуск
	|			
	|	ПО 
	|		Остатки.Номенклатура 					= ЗаданиеНаПроизводствоВыпуск.Номенклатура
	|		И Остатки.ХарактеристикаНоменклатуры 	= ЗаданиеНаПроизводствоВыпуск.ХарактеристикаНоменклатуры
	|		И Остатки.КонечнаяПродукция 			= ЗаданиеНаПроизводствоВыпуск.КонечнаяПродукция
	|		И Остатки.Заказ							= ЗаданиеНаПроизводствоВыпуск.Заказ
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КолвоСпис = Выборка.КоличествоОстатокПоЗаданию;
		
		Если КолвоСпис <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Продукция.Добавить();
		
		СтрокаТабличнойЧасти.Количество 				= КолвоСпис;
		СтрокаТабличнойЧасти.Номенклатура     			= Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      			= Выборка.Коэффициент;
		
		Если ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		КонецЕсли;
		
		Если ТипЗнч(Выборка.Заказ) = Тип("ДокументСсылка.ЗаказНаОбслуживаниеОС")
		 ИЛИ ТипЗнч(Выборка.Заказ) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			СтрокаТабличнойЧасти.ЗаказВыпуска  			= Выборка.Заказ;
		Иначе	
			СтрокаТабличнойЧасти.Заказ      			= Выборка.Заказ;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.КонечнаяПродукция      	= Выборка.КонечнаяПродукция;
		
		СтрокаТабличнойЧасти.ВидВыпуска 				= Перечисления.ВидыВыпуска.Выпуск;
		СтрокаТабличнойЧасти.СтатусПартии 				= Перечисления.СтатусыПартийТоваров.Продукция;
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа 		= Выборка.Номенклатура.НоменклатурнаяГруппа;
		СтрокаТабличнойЧасти.ДоляСтоимости 				= Выборка.ДоляСтоимости;
		
		Если НЕ ЗначениеЗаполнено(Выборка.Спецификация) Тогда
			СтрокаТабличнойЧасти.Спецификация  			= УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(
				СтрокаТабличнойЧасти.Номенклатура,
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
				Дата,
				Подразделение);
		Иначе
			СтрокаТабличнойЧасти.Спецификация  			= Выборка.Спецификация;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Продукция", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПродукциюПоЗаданиюНаПроизводство()

// Процедура заполняет материалы по спецификациям.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если Материалы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		Материалы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьМатериалы = Материалы.Выгрузить();
	ТабличнаяЧастьПродукция = Продукция.Выгрузить();
	
	//начало изменений БП 04 
	МассивВидовВоспроизводства = Новый Массив;
	МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Закупка);
	МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка);
	//m_ionov@mail.ru 13.10.2016
	//В материалы должно попадать все кроме купажа (на купаж выпуск продукции не оформляется)
	МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
	//------- m_ionov@mail.ru -------
	//конец изменений БП 04 
	
	СтруктураДопКолонок = Новый Структура("Заказ, ЗаказВыпуска, НоменклатурнаяГруппа, ВидВыпуска, Спецификация");
	//начало изменений БП 04 
	//m_ionov@mail.ru 13.10.2016
	//В материалы должно попадать все кроме купажа (на купаж выпуск продукции не оформляется)
	//Отбор = Новый Структура("СписаниеКомплектующей,ВидВоспроизводства", Перечисления.ВариантыСписанияКомплектующих.Всегда,МассивВидовВоспроизводства);
	Отбор = Новый Структура("СписаниеКомплектующей,ВидВоспроизводства,ЭтоКупаж", Перечисления.ВариантыСписанияКомплектующих.Всегда,МассивВидовВоспроизводства,Ложь);
	//------- m_ionov@mail.ru -------
	///Отбор = Новый Структура("ВидВоспроизводства",МассивВидовВоспроизводства);
	
	//конец изменений БП 04 

	Для каждого СтрокаТаблицы из ТабличнаяЧастьПродукция Цикл
		
		КоличествоВыпускБезНаработки = СтрокаТаблицы.Количество - ?(ИспользоватьНаработку, СтрокаТаблицы.КоличествоДоделка, 0);
		СтрокаТаблицы.Количество = ?(КоличествоВыпускБезНаработки > 0, КоличествоВыпускБезНаработки, 0);
	КонецЦикла;
	
	//(ТабличнаяЧастьМатериалы, ТаблицаПродукция, СтруктураДопКолонок, Отбор, ДатаСпецификации, КоличествоУровнейРазузлования = 1, ПараметрыВыпускаПродукции = Неопределено) Экспорт
	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата,2, ПараметрыВыпускаПродукции, Истина);
	
	//начало изменений БП 14 
	//ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, НоменклатурнаяГруппа, СтатьяЗатрат, Заказ, ЗаказВыпуска, ВидВыпуска, Спецификация", "Количество");
	//m_ionov@mail.ru 01.12.2016
	//Аналитика НЗП не используется, чтобы при заполнении по спецификации не разбивались строки по основному продукту и побочную свернем без учета номенклатурной группы
	//ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, НоменклатурнаяГруппа, СтатьяЗатрат, Заказ, ЗаказВыпуска, ВидВыпуска, Спецификация, Качество", "Количество");
	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, СтатьяЗатрат, Заказ, ЗаказВыпуска, ВидВыпуска, Спецификация, Качество", "Количество");
	//------- m_ionov@mail.ru -------
	КачествоНовый = Справочники.Качество.Новый;
	Если ТабличнаяЧастьМатериалы.Колонки.Найти("Качество") = Неопределено Тогда
		ТабличнаяЧастьМатериалы.Колонки.Добавить("Качество");
		ТабличнаяЧастьМатериалы.ЗаполнитьЗначения(КачествоНовый, "Качество");
	Иначе
		Для Каждого ТекСтрока Из ТабличнаяЧастьМатериалы Цикл
			Если Не ЗначениеЗаполнено(ТекСтрока.Качество) Тогда
			    ТекСтрока.Качество = КачествоНовый;
			КонецЕслИ; 
		КонецЦикла;	
	КонецЕсли;	

	//конец изменений БП 14 
	
	Материалы.Загрузить(ТабличнаяЧастьМатериалы);
		
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		
	КонецЦикла;
	
	//начало изменений БП 14
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(Материалы, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	//конец изменений БП 14 
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

// Процедура заполняет возвратные отходы по спецификациям.
//
Процедура ЗаполнитьВозвратныеОтходыПоСпецификации() Экспорт
	
	Если ВозвратныеОтходы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Возвратные отходы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		ВозвратныеОтходы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьВозвратныеОтходы = ВозвратныеОтходы.Выгрузить();
	ТабличнаяЧастьПродукция = Продукция.Выгрузить();
	
	СтруктураДопКолонок = Новый Структура("Заказ, ВидВыпуска, Спецификация, НоменклатурнаяГруппа, СчетЗатрат, СчетЗатратНУ");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	
	Для каждого СтрокаТаблицы из ТабличнаяЧастьПродукция Цикл
		КоличествоВыпускБезНаработки = СтрокаТаблицы.Количество - ?(ИспользоватьНаработку, СтрокаТаблицы.КоличествоДоделка, 0);
		СтрокаТаблицы.Количество = ?(КоличествоВыпускБезНаработки > 0, КоличествоВыпускБезНаработки, 0);
	КонецЦикла;

	УправлениеПроизводством.ЗаполнитьВозвратныеОтходыПоСпецификациям(ТабличнаяЧастьВозвратныеОтходы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата, , ПараметрыВыпускаПродукции);

	ТабличнаяЧастьВозвратныеОтходы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, СтатьяЗатрат, Заказ,
			|ВидВыпуска, Спецификация, НоменклатурнаяГруппа, СчетЗатрат, СчетЗатратНУ", "Количество, Цена, Сумма, СуммаРегл");
	
	ВозвратныеОтходы.Загрузить(ТабличнаяЧастьВозвратныеОтходы);
	
	Для Каждого СтрокаТабличнойЧасти Из ВозвратныеОтходы Цикл
		
		СтрокаТабличнойЧасти.СтатусПартии 			= Перечисления.СтатусыПартийТоваров.Продукция;
		СтрокаТабличнойЧасти.ОтражениеВУСН 			= Перечисления.ОтражениеВУСН.Принимаются;
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти       (СтрокаТабличнойЧасти, Ссылка, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"ВозвратныеОтходы");
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, Ссылка);
		
		
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВТабЧасти(ВозвратныеОтходы, "ВозвратныеОтходы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Ложь, Истина);//заполняем только счета номенклатуры
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

#Если Клиент Тогда

// Процедура заполняет табличную часть "Прочие затраты" остатками в НЗП.
//
Процедура ЗаполнитьПрочиеЗатратыПоОстаткам() Экспорт
	
	ПрочиеЗатраты.Очистить();
	
	ТаблицаПрочиеЗатраты = ПрочиеЗатраты.Выгрузить();
	
	ДопПараметры = Новый Структура;
	Параметры = Новый Массив;
	Параметры.Добавить(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	ДопПараметры.Вставить("ХарЗатрат", Параметры);
	
	УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамНЗП(ЭтотОбъект, ТаблицаПрочиеЗатраты, ДопПараметры);
	
	ТаблицаПрочиеЗатраты.ЗаполнитьЗначения( Перечисления.ВидыВыпуска.Выпуск, "ВидВыпуска");
	ПрочиеЗатраты.Загрузить(ТаблицаПрочиеЗатраты);
	
КонецПроцедуры // ЗаполнитьПрочиеЗатратыПоОстаткам()

// Процедура добавляет данные по продукции из заказа покупателя (переработка)
//
Процедура ДобавитьИзЗаказаПокупателя() Экспорт
	
	ФормаВыбора = Документы.ЗаказПокупателя.ПолучитьФормуВыбора(,, ЭтотОбъект);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	Заказ = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Заказ.Товары Цикл
		
		НоваяСтрока = Продукция.Добавить();
		
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаТЧ);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "Продукция", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
		//Счета учета установим явно, если заполняем по заказу на переработку.
		Если Заказ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			Если ОтражатьВБухгалтерскомУчете Тогда
				НоваяСтрока.Счет = ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья;
			КонецЕсли;
			Если ОтражатьВНалоговомУчете Тогда
				НоваяСтрока.СчетНУ = ПланыСчетов.Налоговый.ПроизводствоИзДавальческогоСырья;
			КонецЕсли;
        КонецЕсли;
		НоваяСтрока.Заказ              		= Заказ;
		НоваяСтрока.Качество           		= Справочники.Качество.Новый;
		НоваяСтрока.НаправлениеВыпуска 		= Перечисления.НаправленияВыпуска.НаСклад;
		НоваяСтрока.ВидВыпуска         		= Перечисления.ВидыВыпуска.Выпуск;
		НоваяСтрока.НоменклатурнаяГруппа 	= СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
		НоваяСтрока.СтатусПартии 			= Перечисления.СтатусыПартийТоваров.Продукция;
		НоваяСтрока.ДоляСтоимости 			= 1;
	КонецЦикла;
КонецПроцедуры // ДобавитьИзЗаказаПокупателя()

// Процедура добавляет данные по материалам из требование-накладная
//
Процедура ДобавитьИзТребованиеНакладной() Экспорт
	
	ФормаВыбора = Документы.ТребованиеНакладная.ПолучитьФормуВыбора(,, ЭтотОбъект);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете И ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Подразделение;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Отбор = ФормаВыбора.Отбор.ПодразделениеОрганизации;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = ПодразделениеОрганизации;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокТН = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокТН) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ДокТН.Материалы Цикл
		
		НоваяСтрока = Материалы.Добавить();
		
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.ВидВыпуска         = Перечисления.ВидыВыпуска.Выпуск;
	КонецЦикла;
	
	
	//начало изменений БП 14
	ЗаполнитьСчетаУчетаВТабЧасти(Материалы, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	//конец изменений БП 14 

	
КонецПроцедуры // ДобавитьИзТребованиеНакладной()

#КонецЕсли

// Процедура заполнения табличной части распределение материалов.
//
Процедура ЗаполнитьТаблицуРаспределенияМатериалов(Спрашивать = Истина) Экспорт
	
	Если Не ИспользоватьМатериалы Тогда
		Возврат;
	КонецЕсли;
	
	Если Материалы.Количество() = 0 Тогда
		Если РаспределениеМатериалов.Количество() > 0 Тогда
			РаспределениеМатериалов.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РаспределениеМатериалов.Количество() > 0 Тогда
		Если Спрашивать И Не АвтораспределениеМатериалов Тогда
			#Если Клиент Тогда
			Ответ = Вопрос("Табличная часть ""Распределение материалов"" уже содержит строки."
						  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
						   РежимДиалогаВопрос.ДаНет);
			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		РаспределениеМатериалов.Очистить();
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураДопКолонок = Новый Структура("Заказ, ЗаказВыпуска, НоменклатурнаяГруппа, ВидВыпуска, Спецификация, 
										|СчетЗатрат, СчетЗатратНУ, ДоляСтоимости");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	УправлениеПроизводством.ЗаполнитьРаспределениеМатериаловНаПродукцию(СтруктураШапкиДокумента, Материалы, Продукция, РаспределениеМатериалов, СтруктураДопКолонок, Отбор, ПараметрыВыпускаПродукции);
	
	//m_ionov@mail.ru 24.09.2016
	//Скорректируем распределение материалов
	СкорректироватьРасперелениеМатериалов();
	//------- m_ionov@mail.ru -------
	
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияМатериалов()

// Процедура заполнения табличной части распределение прочих затрат
//
Процедура ЗаполнитьТаблицуРаспределенияПрочихЗатрат(Отказ = Неопределено) Экспорт
	
	Если ПрочиеЗатраты.Количество() = 0 Тогда
		Если РаспределениеПрочихЗатрат.Количество() > 0 Тогда
			РаспределениеПрочихЗатрат.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РаспределениеПрочихЗатрат.Количество() > 0 Тогда
		Если Не АвтораспределениеПрочихЗатрат Тогда
			#Если Клиент Тогда
			Ответ = Вопрос("Табличная часть ""Распределение прочих затрат"" уже содержит строки."
						  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
						   РежимДиалогаВопрос.ДаНет);
			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		РаспределениеПрочихЗатрат.Очистить();
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	УправлениеПроизводством.ЗаполнитьРаспределениеПрочихЗатратНаПродукцию(СтруктураШапкиДокумента, ПрочиеЗатраты, Продукция, РаспределениеПрочихЗатрат);
	
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияПрочихЗатрат()

// Процедура заполнения табличной части распределение прочих затрат
//
Процедура ЗаполнитьТаблицуРаспределенияТехнологическихОпераций(Отказ = Неопределено, Спрашивать = Истина) Экспорт
	
	Если Не ИспользоватьТехнологическиеОперации Тогда
		Возврат;
	КонецЕсли;
	
	Если ТехнологическиеОперации.Количество() = 0 Тогда
		Если РаспределениеТехнологическихОпераций.Количество() > 0 Тогда
			РаспределениеТехнологическихОпераций.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Спрашивать И РаспределениеТехнологическихОпераций.Количество() > 0 Тогда
		Если Не АвтораспределениеТехнологическихОпераций Тогда
			#Если Клиент Тогда
			Ответ = Вопрос("Табличная часть ""Распределение тех. операций"" уже содержит строки."
						  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
						   РежимДиалогаВопрос.ДаНет);
			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		РаспределениеТехнологическихОпераций.Очистить();
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	УправлениеПроизводством.ЗаполнитьРаспределениеПрочихЗатратНаПродукцию(
		СтруктураШапкиДокумента, 
		ТехнологическиеОперации, 
		Продукция, 
		РаспределениеТехнологическихОпераций
	);
	
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияТехнологическихОпераций()

// Процедура заполнения табличной части распределение материалов
//
Процедура ЗаполнитьТаблицуРаспределенияВозвратныхОтходов(Отказ = Неопределено, Спрашивать = Истина) Экспорт
	
	Если Не ИспользоватьВозвратныеОтходы Тогда
		Возврат;
	КонецЕсли;
	
	Если ВозвратныеОтходы.Количество() = 0 Тогда
		Если РаспределениеВозвратныхОтходов.Количество() > 0 Тогда
			РаспределениеВозвратныхОтходов.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РаспределениеВозвратныхОтходов.Количество() > 0 Тогда
		Если Спрашивать И Не АвтораспределениеВозвратныхОтходов Тогда
			#Если Клиент Тогда
			Ответ = Вопрос("Табличная часть ""Распределение возвратных отходов"" уже содержит строки."
						  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
						   РежимДиалогаВопрос.ДаНет);
			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		РаспределениеВозвратныхОтходов.Очистить();
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураДопКолонок = Новый Структура("Заказ, НоменклатурнаяГруппа, ВидВыпуска, Спецификация, 
										|СчетЗатрат, СчетЗатратНУ, ДоляСтоимости");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	УправлениеПроизводством.ЗаполнитьРаспределениеВозвратныхОтходовНаПродукцию(СтруктураШапкиДокумента, ВозвратныеОтходы, Продукция, РаспределениеВозвратныхОтходов, СтруктураДопКолонок, Отбор, ПараметрыВыпускаПродукции);
		
КонецПроцедуры // ЗаполнитьТаблицуРаспределенияВозвратныхОтходов()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	РеквизитыШапки     = "Организация, Подразделение, ПодразделениеОрганизации";
	РеквизитыТабМат    = "Номенклатура, Количество";
	РеквизитыТабПрод   = "Номенклатура, Количество, СтатусПартии";
	РеквизитыТабЗатр   = "СтатьяЗатрат";
	РеквизитыТабОтходы = "Номенклатура, Количество, СтатьяЗатрат, СтатусПартии";
	РеквизитыТабТехОп  = "ТехнологическаяОперация, СтатьяЗатрат, Количество, СчетЗатрат";
	
	Если ИспользоватьНаработку Тогда
		РеквизитыТабПрод 	= РеквизитыТабПрод + ", ВидВыпуска";
		РеквизитыТабМат 	= РеквизитыТабМат + ", ВидВыпуска";
		РеквизитыТабЗатр 	= РеквизитыТабЗатр + ", ВидВыпуска";
		РеквизитыТабОтходы 	= РеквизитыТабОтходы + ", ВидВыпуска";
		РеквизитыТабТехОп 	= РеквизитыТабТехОп + ", ВидВыпуска";
	КонецЕсли;
	
	Если ИспользоватьНаработку
	   И Продукция.Найти(Перечисления.ВидыВыпуска.Выпуск, "ВидВыпуска") = Неопределено
	Тогда
		ПроверятьЗаполнениеСклада = Ложь;
		
	ИначеЕсли ИспользоватьНаправленияВыпуска
	   И Продукция.Найти(Перечисления.НаправленияВыпуска.НаСклад, "НаправлениеВыпуска") = Неопределено
	Тогда
		ПроверятьЗаполнениеСклада = Ложь;
		
	Иначе
		ПроверятьЗаполнениеСклада = Истина;
		
	КонецЕсли;
	
	Если ПроверятьЗаполнениеСклада Тогда
		РеквизитыШапки = РеквизитыШапки + ", Склад";
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		РеквизитыТабТехОп = РеквизитыТабТехОп + ", СчетЗатратНУ";
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		РеквизитыТабЗатр = РеквизитыТабЗатр + ", Сумма";
	КонецЕсли;
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
		  И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		РеквизитыТабЗатр = РеквизитыТабЗатр + ", СуммаРегл";
	КонецЕсли;
	
	РеквизитыТабИсп	   = "Сотрудник";
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки,     СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабПрод,   СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "Продукция");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабЗатр,   СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ПрочиеЗатраты");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОтходы, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ВозвратныеОтходы");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабТехОп,  СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ТехнологическиеОперации");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабИсп,	СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "Исполнители");
	
	РеквизитыШапки  = Новый Структура(РеквизитыШапки);
	Если ИспользоватьМатериалы И ВводитьСтатьиЗатратПоСтрокам Тогда
		РеквизитыТабМат = РеквизитыТабМат + ", СтатьяЗатрат";
	ИначеЕсли ИспользоватьМатериалы И Материалы.Количество() > 0 Тогда
		РеквизитыШапки.Вставить( "СтатьяЗатрат", "Не заполнено значение реквизита ""Статья затрат"" (закладка ""Материалы"")!");
	КонецЕсли;
	
	Если ИспользоватьВозвратныеОтходы И ВозвратныеОтходы.Количество() > 0 Тогда
		РеквизитыШапки.Вставить( "СкладОтходов", "Не заполнено значение реквизита ""Склад"" (закладка ""Возвратные отходы"")!");
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, РеквизитыШапки, Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);
	УправлениеЗатратами.ПроверитьПодразделениеОрганизацииВСтрокахТабЧасти(ЭтотОбъект, Продукция, "Продукция", "ПодразделениеОрганизацииПолучатель", Отказ, Заголовок);
	УправлениеЗатратами.ПроверитьПодразделениеОрганизацииВСтрокахТабЧасти(ЭтотОбъект, НаправленияСписания, "Направления списания", "ПодразделениеОрганизации", Отказ, Заголовок);
	
	// Проверим что указаны производственные подразделения в шапке документа
	УправлениеПроизводством.ПроверитьПроизводственныеПодразделения(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если ИспользоватьВозвратныеОтходы И ВозвратныеОтходы.Количество() > 0 Тогда
		УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок, "СкладОтходов", "");
	КонецЕсли;

	
	// Проверка табличных частей
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СписокСчетовКосвенныхРасходовНУ = НалоговыйУчет.ПолучитьСчетаУчетаКосвенныхРасходов();
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Продукция",               Новый Структура(РеквизитыТабПрод),   Отказ, Заголовок);
	УправлениеПроизводством.ПроверитьКоличествоДоделка( ЭтотОбъект, "Продукция", Продукция, Отказ, Заголовок);
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		УправлениеПроизводством.ПроверитьЧтоНетСчетовКосвенныхРасходовНУ(Продукция, "Продукция", СписокСчетовКосвенныхРасходовНУ, Отказ, Заголовок);	
	КонецЕсли;
	
	Если ИспользоватьМатериалы Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы",           Новый Структура(РеквизитыТабМат ),   Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьПрочиеЗатраты Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПрочиеЗатраты",       Новый Структура(РеквизитыТабЗатр),   Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьВозвратныеОтходы Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы",    Новый Структура(РеквизитыТабОтходы), Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьТехнологическиеОперации Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ТехнологическиеОперации", Новый Структура(РеквизитыТабТехОп),  Отказ, Заголовок);
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Исполнители",			 Новый Структура(РеквизитыТабИсп),	  Отказ, Заголовок);
	КонецЕсли;
	
	// Проверим заполнение качества и счетов учета.
	Для Каждого СтрокаТаблицы Из Продукция Цикл
		Если СтрокаТаблицы.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск ИЛИ Не ИспользоватьНаработку Тогда
			
			Если Не СтрокаТаблицы.Номенклатура.Услуга Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Качество)  Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указано качество в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
				Иначе
					 Если СтрокаТаблицы.Качество <> Справочники.Качество.Новый Тогда
						Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказВыпуска) Тогда
							ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"") указан заказ-выпуска для бракованной продукции. Данная продукция не может быть выпущена под заказ.", Отказ, Заголовок);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказРезерв) Тогда
							ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"") указан документ-резерва для бракованной продукции. Данная продукция не может быть зарезервирована.", Отказ, Заголовок);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
						
			Если СтруктураШапкиДокумента.ИспользоватьНаправленияВыпуска И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НаправлениеВыпуска) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указано направление выпуска в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
			КонецЕсли;
			Если СтруктураШапкиДокумента.ИспользоватьНаправленияВыпуска И СтрокаТаблицы.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаЗатраты Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатратПолучатель) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указана статья затрат в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПодразделениеПолучатель) И (СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указано подразделение в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);	
				КонецЕсли;
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПодразделениеОрганизацииПолучатель) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указано подразделение организации в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);	
				КонецЕсли;
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратПолучатель) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указан счет затрат в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);	
				КонецЕсли;
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратПолучательНУ) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указан счет затрат НУ в строке № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);	
				КонецЕсли;
				Если СтрокаТаблицы.СтатьяЗатратПолучатель.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
				    ОбщегоНазначения.СообщитьОбОшибке("Нельзя указывать статьи затрат со статусом ""Возвратные отходы"". Строка № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);
				КонецЕсли;
				Если СтрокаТаблицы.СтатьяЗатратПолучатель.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
				    ОбщегоНазначения.СообщитьОбОшибке("Нельзя указывать статьи затрат со статусом ""Принятые в переработку"". Строка № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Получатели"")", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ИспользоватьНаправленияВыпуска И СтрокаТаблицы.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаЗатратыСписок Тогда
				ЕстьНаправленияСписания = Ложь;
				Для Каждого СтрокаНаправления Из НаправленияСписания Цикл
					Если СтрокаНаправления.КлючСвязи <> СтрокаТаблицы.КлючСвязи Тогда
						Продолжить;
					КонецЕсли;
					ЕстьНаправленияСписания = Истина;
					
					Если СтрокаНаправления.Коэффициент = 0 Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не указан коэффициент в направлениях списания для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СтрокаНаправления.СтатьяЗатрат) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не указана статья затрат в направлениях списания для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
					КонецЕсли;
					Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И НЕ ЗначениеЗаполнено(СтрокаНаправления.Подразделение) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не указано подразделение в направлениях списания для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
					КонецЕсли;
					Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(СтрокаНаправления.ПодразделениеОрганизации) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не указано подразделение организации в направлениях списания для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
					КонецЕсли;
					Если СтрокаНаправления.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
					    ОбщегоНазначения.СообщитьОбОшибке("Нельзя в направлениях списания указывать статьи затрат со статусом ""Возвратные отходы"". Строка № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
					КонецЕсли;
					Если СтрокаНаправления.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
					    ОбщегоНазначения.СообщитьОбОшибке("Нельзя в направлениях списания указывать статьи затрат со статусом ""Принятые в переработку"". Строка № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);
					КонецЕсли;
					Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(СтрокаНаправления.СчетЗатрат) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не указан счет затрат в направлениях списания для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);	
					КонецЕсли;
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И НЕ ЗначениеЗаполнено(СтрокаНаправления.СчетЗатратНУ) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не указан счет затрат НУ в направлениях списания для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);	
					КонецЕсли;
				КонецЦикла;
				Если ЕстьНаправленияСписания = Ложь Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указаны получатели для строки № " + СтрокаТаблицы.НомерСтроки + " (таб. часть ""Продукция"")", Отказ, Заголовок);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьПрочиеЗатраты Тогда
		Для Каждого СтрокаТЧ Из ПрочиеЗатраты Цикл
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				Если СтрокаТЧ.Сумма = 0 И СтрокаТЧ.СуммаРегл = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указана сумма для статьи затрат """ + СтрокаТЧ.СтатьяЗатрат + """ (строка № " + СтрокаТЧ.НомерСтроки + " табличной части ""Прочие затраты"")", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьМатериалы И ВводитьСтатьиЗатратПоСтрокам Тогда
		УправлениеПроизводством.ПроверитьСтатьиЗатрат(Материалы, "СтатьяЗатрат", "Материальные",     Отказ, Заголовок);
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат(Материалы, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
	Иначе
		Если ИспользоватьМатериалы И ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			Если Не СтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Укажите материальную статью затрат (закладка ""Материалы"")!", Отказ, Заголовок);
			КонецЕсли;
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И Не СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Укажите производственную статью затрат (закладка ""Материалы"")!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПрочиеЗатраты Тогда
		УправлениеПроизводством.ПроверитьСтатьиЗатрат(ПрочиеЗатраты,           "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьТехнологическиеОперации Тогда
		УправлениеПроизводством.ПроверитьСтатьиЗатрат(ТехнологическиеОперации, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
	КонецЕсли;
	
	//УправлениеПроизводством.ПроверитьВидВнутреннихЗаказов(Продукция, "Продукция", Отказ, Заголовок, "СтатьяЗатратПолучатель");
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Продукция", , Отказ, Заголовок);
	
	Если ИспользоватьМатериалы Тогда
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьВозвратныеОтходы Тогда
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратныеОтходы", , Отказ, Заголовок);
	КонецЕсли;
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Продукция", Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Материалы".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");

	ТаблицаПоВозвратнымОтходам              = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы", СтруктураПолей).Выгрузить();
	ТаблицаПоРаспределениюВозвратныхОтходов = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РаспределениеВозвратныхОтходов", СтруктураПолей).Выгрузить();
	
	Если ИспользоватьВозвратныеОтходы Тогда
		УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратныеОтходы", ТаблицаПоВозвратнымОтходам, Отказ, Заголовок);
		УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "РаспределениеВозвратныхОтходов", ТаблицаПоРаспределениюВозвратныхОтходов, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не СтруктураШапкиДокумента.ИспользоватьНаправленияВыпуска Тогда
		
		СтруктураПолей.Вставить("ВидВыпуска", "ВидВыпуска");
		ТаблицаПоПродукции = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей).Выгрузить();
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Услуга", 		истина);
		СтруктураПоиска.Вставить("ВидВыпуска",	Перечисления.ВидыВыпуска.Выпуск);
		
		Строки = ТаблицаПоПродукции.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() > 0 тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документом отражается выпуск услуг, установите использование направления выпуска!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ МАТЕРИАЛОВ
	Если ИспользоватьМатериалы И Не АвтораспределениеМатериалов Тогда
		
		//начало изменений БП 14 
		РеквизитыТабРаспМат = "Номенклатура, Количество, Продукция, СчетЗатрат";
		
		Если СтруктураШапкиДокумента.ИспользоватьНаработку Тогда
			РеквизитыТабРаспМат = РеквизитыТабРаспМат + ", ВидВыпуска";
		КонецЕсли;
		
		Если ВводитьСтатьиЗатратПоСтрокам Тогда
			РеквизитыТабРаспМат = РеквизитыТабРаспМат + ", СтатьяЗатрат";
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Материальные",     Отказ, Заголовок);
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспМат, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "РаспределениеМатериалов");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеМатериалов", Новый Структура(РеквизитыТабРаспМат), Отказ, Заголовок);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			УправлениеПроизводством.ПроверитьЧтоНетСчетовКосвенныхРасходовНУ(РаспределениеМатериалов, "Распределение материалов", СписокСчетовКосвенныхРасходовНУ, Отказ, Заголовок);
		КонецЕсли;
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "РаспределениеМатериалов", , Отказ, Заголовок);
		
	КонецЕсли;
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ ПРОЧИХ ЗАТРАТ
	Если ИспользоватьПрочиеЗатраты И Не АвтораспределениеПрочихЗатрат Тогда
		
		РеквизитыТабРаспЗатр = "Продукция, СтатьяЗатрат, СчетЗатрат";
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			РеквизитыТабРаспЗатр = РеквизитыТабРаспЗатр + ", СчетЗатратНУ";
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
		И НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			РеквизитыТабРаспЗатр = РеквизитыТабРаспЗатр + ", Сумма";
		КонецЕсли;
		Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
			  И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			РеквизитыТабРаспЗатр = РеквизитыТабРаспЗатр + ", СуммаРегл";
		КонецЕсли;
		Если СтруктураШапкиДокумента.ИспользоватьНаработку Тогда
			РеквизитыТабРаспЗатр = РеквизитыТабРаспЗатр + ", ВидВыпуска";
		КонецЕсли;
		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспЗатр, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "РаспределениеПрочихЗатрат");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеПрочихЗатрат", Новый Структура(РеквизитыТабРаспЗатр), Отказ, Заголовок);
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из РаспределениеПрочихЗатрат Цикл
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				Если СтрокаТЧ.Сумма = 0 И СтрокаТЧ.СуммаРегл = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указана сумма для статьи затрат """ + СтрокаТЧ.СтатьяЗатрат + """ (строка № " + СтрокаТЧ.НомерСтроки + " табличной части ""Распределение прочих затрат"")", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			УправлениеПроизводством.ПроверитьЧтоНетСчетовКосвенныхРасходовНУ(РаспределениеПрочихЗатрат, "Распределение прочих затрат", СписокСчетовКосвенныхРасходовНУ, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ ТЕХ. ОПЕРАЦИЙ
	Если ИспользоватьТехнологическиеОперации И Не АвтораспределениеТехнологическихОпераций Тогда
		
		РеквизитыТаблицыРаспределения = "Номенклатура, СтатьяЗатрат, СчетЗатрат";
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			РеквизитыТаблицыРаспределения = РеквизитыТаблицыРаспределения + ", СчетЗатратНУ";
		КонецЕсли;
		Если СтруктураШапкиДокумента.ИспользоватьНаработку Тогда
			РеквизитыТаблицыРаспределения = РеквизитыТаблицыРаспределения + ", ВидВыпуска";
		КонецЕсли;
		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТаблицыРаспределения, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "РаспределениеПрочихЗатрат");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеТехнологическихОпераций", Новый Структура(РеквизитыТаблицыРаспределения), Отказ, Заголовок);
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат(РаспределениеТехнологическихОпераций, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
		
	КонецЕсли;
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ ВОЗВРАТНЫХ ОТХОДОВ
	Если ИспользоватьВозвратныеОтходы И Не АвтораспределениеВозвратныхОтходов Тогда
		
		РеквизитыТабРаспределенияОтходов = "Номенклатура, СтатьяЗатрат, Количество, Продукция, СчетЗатрат";
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			РеквизитыТабРаспределенияОтходов = РеквизитыТабРаспределенияОтходов + ", СчетЗатратНУ";
		КонецЕсли;
		Если СтруктураШапкиДокумента.ИспользоватьНаработку Тогда
			РеквизитыТабРаспределенияОтходов = РеквизитыТабРаспределенияОтходов + ", ВидВыпуска";
		КонецЕсли;

		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспределенияОтходов, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "РаспределениеВозвратныхОтходов");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеВозвратныхОтходов", Новый Структура(РеквизитыТабРаспределенияОтходов), Отказ, Заголовок);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			УправлениеПроизводством.ПроверитьЧтоНетСчетовКосвенныхРасходовНУ(РаспределениеВозвратныхОтходов, "Распределение возвратных отходов", СписокСчетовКосвенныхРасходовНУ, Отказ, Заголовок);
		КонецЕсли;
		
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "РаспределениеВозвратныхОтходов", , Отказ, Заголовок);
		
	КонецЕсли;
	
	//начало изменений БП 14
	//МояОбработка = ВнешниеОбработки.Создать("C:\Documents and Settings\aozhiganov\My Documents\1С\Проект УПП\ОтчетПроизводстваЗаСмену.epf");
	//МояОбработка.ВыполнитьДопПроверкуСучетомИзменений(ЭтотОбъект,Отказ, Заголовок);
	//МояОбработка = Неопределено;
	ВыполнитьДопПроверкуСучетомИзменений(ЭтотОбъект,Отказ, Заголовок);
	//конец изменений БП 14 
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ, ЗаполнятьСчетаЗатрат=Истина, ЗаполнятьСчетаНоменклатуры=Истина) Экспорт
	
	Если ИмяТабЧасти="РаспределениеВозвратныхОтходов" Тогда
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, Неопределено);
	Иначе
		ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ, ЗаполнятьСчетаЗатрат, ЗаполнятьСчетаНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти,
										ЗаполнятьБУ, ЗаполнятьНУ,
										ЗаполнятьСчетаЗатрат = Истина, ЗаполнятьСчетаНоменклатуры = Истина,
										ЗаполнятьСчетаЗатратПолучателя = Истина) Экспорт
	
	Если ИмяТабЧасти="РаспределениеВозвратныхОтходов" Тогда
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ, ЗаполнятьСчетаЗатрат, ЗаполнятьСчетаНоменклатуры);
		КонецЦикла;
	//начало изменений БП 14
	ИначеЕсли ИмяТабЧасти="Материалы" Тогда	
		Если ВидСписанияМПЗ <> Перечисления.ВидыСписанияМПЗ.СписыватьСоСклада Тогда
			возврат;
		КонецЕсли;	
		//Если ТипЗнч(ТабличнаяЧасть) = ТипЗнч(ЭтотОбъект[ИмяТабЧасти]) Тогда
		Если Не ВводитьСтатьиЗатратПоСтрокам Тогда
			Если (ТипЗнч(ТабличнаяЧасть) = ТипЗнч(ЭтотОбъект[ИмяТабЧасти]))  Тогда
				//передали таб часть
				Для каждого ТекСтрока Из ТабличнаяЧасть Цикл
					ТекСтрока.СтатьяЗатрат = СтатьяЗатрат;
				КонецЦикла;	
			Иначе
				ТабличнаяЧасть.СтатьяЗатрат = СтатьяЗатрат;
			КонецЕсли;	
		КонецЕсли;	
		//Иначе
			СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ, Ложь,Истина);
		//КонецЕслИ;	
	//конец изменений БП 14 
	Иначе
		
		ТабличнаяЧастьСодержитНоменклатуру = Найти("/ТехнологическиеОперации/РаспределениеПрочихЗатрат/НаправленияСписания/","/"+ИмяТабЧасти+"/")=0;
		
		Если ЗаполнятьСчетаЗатрат ИЛИ (ЗаполнятьСчетаНоменклатуры И ТабличнаяЧастьСодержитНоменклатуру) Тогда
			СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ, 
				ЗаполнятьСчетаЗатрат, 
				ЗаполнятьСчетаНоменклатуры И ТабличнаяЧастьСодержитНоменклатуру,
				Истина); //в этом документе заполняем счета независимо от режима "Определение счетов при проведении документов"
		КонецЕсли;
			
		// Заполняем реквизиты СчетЗатратПолучатель и СчетЗатратПолучательНУ
		Если ЗаполнятьСчетаЗатратПолучателя И ИмяТабЧасти="Продукция" Тогда
			Если ТипЗнч(ТабличнаяЧасть) = ТипЗнч(ЭтотОбъект[ИмяТабЧасти]) Тогда
				Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
					Если СтрокаТабЧасти.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаЗатраты Тогда
						УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабЧасти, СтрокаТабЧасти.ПодразделениеОрганизацииПолучатель, СтрокаТабЧасти.СтатьяЗатратПолучатель, "СчетЗатратПолучатель", "СчетЗатратПолучательНУ");
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТабличнаяЧасть.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаЗатраты Тогда
				УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(ТабличнаяЧасть, ТабличнаяЧасть.ПодразделениеОрганизацииПолучатель, ТабличнаяЧасть.СтатьяЗатратПолучатель, "СчетЗатратПолучатель", "СчетЗатратПолучательНУ");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()


// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамЗаказНаПроизводство(ТабличнаяЧасть, ЗаказНаПроизводство = Неопределено) Экспорт

	Если ТабличнаяЧасть <> Продукция Тогда
		Возврат;
	КонецЕсли;	
	
	// Получим остаток по заказу на производство.
	ЗапросПоЗаказам = Новый Запрос;
	ЗапросПоЗаказам.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	ЗапросПоЗаказам.УстановитьПараметр("ВидВоспроизводства", Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
	ЗапросПоЗаказам.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ЗапросПоЗаказам.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Номенклатура.НаправлениеВыпуска КАК НаправлениеВыпуска,
	|	ЗаказыОстатки.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ЗаказыОстатки.Номенклатура.Услуга КАК Услуга,
	|	ЗаказыОстатки.ЕдиницаИзмерения,
	|	ЗаказыОстатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ЗаказыОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыОстатки.Спецификация,
	|	ЕСТЬNULL(СпецификацииНоменклатуры.ДоляСтоимости, 1) КАК ДоляСтоимости,
	|	ЕСТЬNULL(ЗаказыОстатки.КоличествоОстаток, 0) КАК КоличествоЗаказано,
	|	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводство.Остатки(&ДатаОстатков
	|		,
	|		ЗаказНаПроизводство = &ЗаказНаПроизводство
	|		    И ВидВоспроизводства = &ВидВоспроизводства) КАК ЗаказыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СпецификацииНоменклатуры.Ссылка КАК Спецификация,
	|			СпецификацииНоменклатуры.Номенклатура КАК Номенклатура,
	|			СпецификацииНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			СпецификацииНоменклатуры.ДоляСтоимости КАК ДоляСтоимости
	|		ИЗ
	|			Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК СпецификацииНоменклатуры) КАК СпецификацииНоменклатуры
	|		ПО ЗаказыОстатки.Номенклатура = СпецификацииНоменклатуры.Номенклатура
	|			И ЗаказыОстатки.ХарактеристикаНоменклатуры = СпецификацииНоменклатуры.ХарактеристикаНоменклатуры
	|			И ЗаказыОстатки.Спецификация = СпецификацииНоменклатуры.Спецификация";

	ТЗПоЗаказамНаПроизводство = ЗапросПоЗаказам.Выполнить().Выгрузить();

	
	// Получим размещения заказов в заказах на производство.
	ЗапросПоРазмещениям = Новый Запрос();
	ЗапросПоРазмещениям.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
	ЗапросПоРазмещениям.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	ЗапросПоРазмещениям.УстановитьПараметр("ВидВоспроизводства", Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
	ЗапросПоРазмещениям.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ЗапросПоРазмещениям.Текст =
	"ВЫБРАТЬ
	|	РазмещениеЗаказовПокупателейОстатки.Номенклатура,
	|	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры,
	|	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя,
	|	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КАК КоличествоРазмещено
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков
	|		,
	|		ЗаказПоставщику = &ЗаказНаПроизводство
	|			И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки";
	
	ТЗПоРазмещениямЗаказов = ЗапросПоРазмещениям.Выполнить().Выгрузить();
	
	СтруктураСвязи = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры");
	
	// Распределим остаток по заказу на производство по заказам.
	Для Каждого СтрокаТЗПоЗаказамНаПроизводство Из ТЗПоЗаказамНаПроизводство Цикл 
		
		Если СтрокаТЗПоЗаказамНаПроизводство.КоличествоЗаказано <= 0 Тогда
			Продолжить;
		КонецЕсли;
		КоличествоНеРаспределено = СтрокаТЗПоЗаказамНаПроизводство.КоличествоЗаказано;
		ЗаполнитьЗначенияСвойств(СтруктураСвязи, СтрокаТЗПоЗаказамНаПроизводство);
		
		МассивСтрокПоРазмещениям = ТЗПоРазмещениямЗаказов.НайтиСтроки(СтруктураСвязи);
		
		Для Каждого СтрокаРамещения Из МассивСтрокПоРазмещениям Цикл
			Если СтрокаРамещения.КоличествоРазмещено <= 0 Тогда
				Продолжить;
			КонецЕсли;
			Если КоличествоНеРаспределено <= 0 Тогда
				Прервать;
			КонецЕсли;	
			КоличествоДляЗаказа = Мин(КоличествоНеРаспределено, СтрокаРамещения.КоличествоРазмещено);
			
			//Заполняем строку табличной части
			СтрокаТЧ = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЗПоЗаказамНаПроизводство);
			СтрокаТЧ.ЗаказВыпуска         = ЗаказНаПроизводство;
			Если не СтрокаТЗПоЗаказамНаПроизводство.Услуга Тогда
				СтрокаТЧ.ЗаказРезерв          = СтрокаРамещения.ЗаказПокупателя;
			КонецЕсли;
			
			ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);
			СтрокаТЧ.ВидВыпуска 		  = Перечисления.ВидыВыпуска.Выпуск;
			СтрокаТЧ.СтатусПартии 		  = Перечисления.СтатусыПартийТоваров.Продукция;
			СтрокаТЧ.Количество           = (КоличествоДляЗаказа * СтрокаТЗПоЗаказамНаПроизводство.ЕдиницаХраненияОстатковКоэффициент / СтрокаТЧ.Коэффициент); 
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Продукция", Истина, Истина);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТЧ, ЭтотОбъект, Ложь);

			
			КоличествоНеРаспределено = КоличествоНеРаспределено - КоличествоДляЗаказа;
		КонецЦикла;	
		
		Если КоличествоНеРаспределено > 0 Тогда
			//Заполняем строку табличной части
			СтрокаТЧ = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЗПоЗаказамНаПроизводство);
			СтрокаТЧ.ЗаказВыпуска        = ЗаказНаПроизводство;
			ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);
			СтрокаТЧ.ВидВыпуска 		 = Перечисления.ВидыВыпуска.Выпуск;
			СтрокаТЧ.СтатусПартии 		 = Перечисления.СтатусыПартийТоваров.Продукция;
			СтрокаТЧ.Количество          = (КоличествоНеРаспределено * СтрокаТЗПоЗаказамНаПроизводство.ЕдиницаХраненияОстатковКоэффициент / СтрокаТЧ.Коэффициент); 
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Продукция", Истина, Истина);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТЧ, ЭтотОбъект, ложь);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ()

// Процедура заполняет таб.части материалы/распределение материалов по данным о потребностях по заказам.
// Список заказов берется из табличной части продукция (если заказ не передан явно в виде параметра)
//
Процедура ЗаполнитьПотребностямиПоЗаказамНаПроизводство(ТабЧасть, МассивЗаказов) Экспорт

	//начало изменений БП 14 
	КачествоНовый = Справочники.Качество.Новый;
	//конец изменений БП 14 
	ЗаказыНаПроизводствоИПереработку.ЗаполнитьТабличнуюЧастьПоПотребностямЗаказаНаПроизводство(ТабЧасть, МассивЗаказов);
	Для каждого СтрокаТЧ из Материалы цикл
		СтрокаТЧ.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		//начало изменений БП 14
		СтрокаТЧ.Качество = КачествоНовый;
		//конец изменений БП 14 
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из РаспределениеМатериалов Цикл
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);
		СтрокаТЧ.НоменклатурнаяГруппа = СтрокаТЧ.Продукция.НоменклатурнаяГруппа;
		СтрокаТЧ.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( СтрокаТЧ,
			?(ТабЧасть = РаспределениеМатериалов, "РаспределениеМатериалов", "Материалы"),
			ОтражатьВБухгалтерскомУчете,
			ОтражатьВНалоговомУчете);
		//начало изменений БП 14
		СтрокаТЧ.Качество = КачествоНовый;
		//конец изменений БП 14 
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПотребностямиПоЗаказамНаПроизводство()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА
// Дополняет полями, нужными для регл. учета.
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиПродукцияРегл(СтруктураПолей)

	СтруктураПолей.Вставить("Счет"                      	, "Счет");
	СтруктураПолей.Вставить("СчетНУ"                      	, "СчетНУ");
	СтруктураПолей.Вставить("СчетЗатрат"                    , "СчетЗатрат");
	СтруктураПолей.Вставить("СчетЗатратНУ"                  , "СчетЗатратНУ");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиПродукцияРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

    ТаблицаТоваров.Колонки.Добавить("Стоимость", 	   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Формирует таблицу значений по табличным частям "Продукция" и "Направления списания".
//
Функция ПодготовитьТаблицуСписанияНаЗатраты()
	
	Если Не ИспользоватьНаправленияВыпуска Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСмену.Номенклатура,
	|	ОтчетПроизводстваЗаСмену.ХарактеристикаНоменклатуры,
	|	ОтчетПроизводстваЗаСмену.СерияНоменклатуры,
	|	ОтчетПроизводстваЗаСмену.Номенклатура 				КАК Затрата,
	|	ОтчетПроизводстваЗаСмену.ХарактеристикаНоменклатуры КАК ХарактеристикаЗатраты,
	|	ОтчетПроизводстваЗаСмену.СерияНоменклатуры 			КАК СерияЗатраты,
	|				
	|	ЕСТЬNULL(НаправленияСписания.Подразделение, 			ОтчетПроизводстваЗаСмену.ПодразделениеПолучатель) 				КАК Подразделение,
	|	ЕСТЬNULL(НаправленияСписания.ПодразделениеОрганизации, 	ОтчетПроизводстваЗаСмену.ПодразделениеОрганизацииПолучатель) 	КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(НаправленияСписания.НоменклатурнаяГруппа, 		ОтчетПроизводстваЗаСмену.НоменклатурнаяГруппаПолучатель) 		КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(НаправленияСписания.СтатьяЗатрат, 				ОтчетПроизводстваЗаСмену.СтатьяЗатратПолучатель) 				КАК СтатьяЗатрат,
	|	ЕСТЬNULL(НаправленияСписания.Заказ, 					ОтчетПроизводстваЗаСмену.ЗаказПолучатель) 						КАК Заказ,
	|	ЕСТЬNULL(НаправленияСписания.Продукция, 				ОтчетПроизводстваЗаСмену.Продукция) 							КАК Продукция,
	|	ЕСТЬNULL(НаправленияСписания.ХарактеристикаПродукции, 	ОтчетПроизводстваЗаСмену.ХарактеристикаПродукции) 				КАК ХарактеристикаПродукции,
	|	ЕСТЬNULL(НаправленияСписания.СерияПродукции, 			ОтчетПроизводстваЗаСмену.СерияПродукции) 						КАК СерияПродукции,
	|	ЕСТЬNULL(НаправленияСписания.ОбъектСтроительства, 		ОтчетПроизводстваЗаСмену.ОбъектСтроительства) 					КАК ОбъектСтроительства,
	|	ЕСТЬNULL(НаправленияСписания.СпособСтроительства, 		ОтчетПроизводстваЗаСмену.СпособСтроительства)					КАК СпособСтроительства,
	|	ЕСТЬNULL(НаправленияСписания.Проект, 					ОтчетПроизводстваЗаСмену.Проект) 								КАК Проект,
	|	ЕСТЬNULL(НаправленияСписания.Субконто1, 				ОтчетПроизводстваЗаСмену.Субконто1) 							КАК Субконто1,
	|	ЕСТЬNULL(НаправленияСписания.Субконто2, 				ОтчетПроизводстваЗаСмену.Субконто2) 							КАК Субконто2,
	|	ЕСТЬNULL(НаправленияСписания.Субконто3, 				ОтчетПроизводстваЗаСмену.Субконто3) 							КАК Субконто3,
	|	ЕСТЬNULL(НаправленияСписания.СубконтоНУ1, 				ОтчетПроизводстваЗаСмену.СубконтоНУ1) 							КАК СубконтоНУ1,
	|	ЕСТЬNULL(НаправленияСписания.СубконтоНУ2, 				ОтчетПроизводстваЗаСмену.СубконтоНУ2) 							КАК СубконтоНУ2,
	|	ЕСТЬNULL(НаправленияСписания.СубконтоНУ3, 				ОтчетПроизводстваЗаСмену.СубконтоНУ3) 							КАК СубконтоНУ3,
	|	ЕСТЬNULL(НаправленияСписания.СчетЗатрат, 				ОтчетПроизводстваЗаСмену.СчетЗатратПолучатель) 					КАК СчетЗатрат,
	|	ЕСТЬNULL(НаправленияСписания.СчетЗатратНУ, 				ОтчетПроизводстваЗаСмену.СчетЗатратПолучательНУ) 				КАК СчетЗатратНУ,
	|	ЕСТЬNULL(НаправленияСписания.СчетЗатрат, 				ОтчетПроизводстваЗаСмену.СчетЗатратПолучатель) 					КАК СчетУчета,
	|	ЕСТЬNULL(НаправленияСписания.СчетЗатратНУ, 				ОтчетПроизводстваЗаСмену.СчетЗатратПолучательНУ) 				КАК СчетУчетаНУ,
	|		
	|	СУММА(	ВЫБОР КОГДА НаправленияСписанияВсего.Коэффициент ЕСТЬ NULL
	|						ИЛИ НаправленияСписанияВсего.Коэффициент = 0 ТОГДА
	|				ОтчетПроизводстваЗаСмену.Количество
	|			ИНАЧЕ
	|				ОтчетПроизводстваЗаСмену.Количество * НаправленияСписания.Коэффициент / НаправленияСписанияВсего.Коэффициент
	|			КОНЕЦ
	|		) КАК Количество,
	|	СУММА(ОтчетПроизводстваЗаСмену.Количество) КАК КоличествоВсего
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСмену
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Подразделение,
	|			ПодразделениеОрганизации,
	|			СтатьяЗатрат,
	|			НоменклатурнаяГруппа,
	|			Заказ,
	|			Продукция,
	|			ХарактеристикаПродукции,
	|			СерияПродукции,
	|			ОбъектСтроительства,
	|			СпособСтроительства,
	|			Проект,
	|			Субконто1,
	|			Субконто2,
	|			Субконто3,
	|			СубконтоНУ1,
	|			СубконтоНУ2,
	|			СубконтоНУ3,
	|			СчетЗатрат,
	|			СчетЗатратНУ,
	|			КлючСвязи,
	|			СУММА(Коэффициент) КАК Коэффициент
	|		ИЗ
	|			Документ.ОтчетПроизводстваЗаСмену.НаправленияСписания КАК НаправленияСписания
	|		ГДЕ
	|			НаправленияСписания.Ссылка = &ТекущийДокумент
	|			И КлючСвязи В (
	|				ВЫБРАТЬ
	|					ТабличнаяЧастьПродукция.КлючСвязи
	|				ИЗ
	|					Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ТабличнаяЧастьПродукция
	|				ГДЕ
	|					ТабличнаяЧастьПродукция.Ссылка = &ТекущийДокумент
	|					И ТабличнаяЧастьПродукция.Ссылка.ИспользоватьНаправленияВыпуска
	|					И ТабличнаяЧастьПродукция.НаправлениеВыпуска = &НаЗатратыСписок
	|					И (ТабличнаяЧастьПродукция.ВидВыпуска = &Выпуск
	|						И ТабличнаяЧастьПродукция.Ссылка.ИспользоватьНаработку
	|						ИЛИ Не ТабличнаяЧастьПродукция.Ссылка.ИспользоватьНаработку)
	|				)
	|				
	|		СГРУППИРОВАТЬ ПО
	|			НаправленияСписания.Ссылка,
	|			Подразделение,
	|			ПодразделениеОрганизации,
	|			СтатьяЗатрат,
	|			НоменклатурнаяГруппа,
	|			Заказ,
	|			Продукция,
	|			ХарактеристикаПродукции,
	|			СерияПродукции,
	|			ОбъектСтроительства,
	|			СпособСтроительства,
	|			Проект,
	|			Субконто1,
	|			Субконто2,
	|			Субконто3,
	|			СубконтоНУ1,
	|			СубконтоНУ2,
	|			СубконтоНУ3,
	|			СчетЗатрат,
	|			СчетЗатратНУ,
	|			КлючСвязи
	|		) КАК НаправленияСписания
	|	ПО
	|		ОтчетПроизводстваЗаСмену.КлючСвязи = НаправленияСписания.КлючСвязи
	|			
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			КлючСвязи,
	|			СУММА(Коэффициент) КАК Коэффициент
	|		ИЗ
	|			Документ.ОтчетПроизводстваЗаСмену.НаправленияСписания КАК НаправленияСписания
	|		ГДЕ
	|			НаправленияСписания.Ссылка = &ТекущийДокумент
	|			И КлючСвязи В (
	|				ВЫБРАТЬ
	|					ТабличнаяЧастьПродукция.КлючСвязи
	|				ИЗ
	|					Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ТабличнаяЧастьПродукция
	|				ГДЕ
	|					ТабличнаяЧастьПродукция.Ссылка = &ТекущийДокумент
	|					И ТабличнаяЧастьПродукция.Ссылка.ИспользоватьНаправленияВыпуска
	|					И ТабличнаяЧастьПродукция.НаправлениеВыпуска = &НаЗатратыСписок
	|					И (ТабличнаяЧастьПродукция.ВидВыпуска = &Выпуск
	|						И ТабличнаяЧастьПродукция.Ссылка.ИспользоватьНаработку
	|						ИЛИ Не ТабличнаяЧастьПродукция.Ссылка.ИспользоватьНаработку)
	|				)
	|		СГРУППИРОВАТЬ ПО
	|			КлючСвязи	
	|		) КАК НаправленияСписанияВсего
	|	ПО
	|		ОтчетПроизводстваЗаСмену.КлючСвязи = НаправленияСписания.КлючСвязи
	|			
	|ГДЕ
	|	ОтчетПроизводстваЗаСмену.Ссылка = &ТекущийДокумент
	|	И ОтчетПроизводстваЗаСмену.Ссылка.ИспользоватьНаправленияВыпуска
	|	И (ОтчетПроизводстваЗаСмену.НаправлениеВыпуска = &НаЗатратыСписок
	|		ИЛИ ОтчетПроизводстваЗаСмену.НаправлениеВыпуска = &НаЗатраты)
	|	И (ОтчетПроизводстваЗаСмену.ВидВыпуска = &Выпуск
	|		И ОтчетПроизводстваЗаСмену.Ссылка.ИспользоватьНаработку
	|		ИЛИ Не ОтчетПроизводстваЗаСмену.Ссылка.ИспользоватьНаработку)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ОтчетПроизводстваЗаСмену.Ссылка,
	|	ОтчетПроизводстваЗаСмену.Номенклатура,
	|	ОтчетПроизводстваЗаСмену.ХарактеристикаНоменклатуры,
	|	ОтчетПроизводстваЗаСмену.СерияНоменклатуры,
	|	ЕСТЬNULL(НаправленияСписания.Подразделение, 			ОтчетПроизводстваЗаСмену.ПодразделениеПолучатель),
	|	ЕСТЬNULL(НаправленияСписания.ПодразделениеОрганизации, 	ОтчетПроизводстваЗаСмену.ПодразделениеОрганизацииПолучатель),
	|	ЕСТЬNULL(НаправленияСписания.НоменклатурнаяГруппа, 		ОтчетПроизводстваЗаСмену.НоменклатурнаяГруппаПолучатель),
	|	ЕСТЬNULL(НаправленияСписания.СтатьяЗатрат, 				ОтчетПроизводстваЗаСмену.СтатьяЗатратПолучатель),
	|	ЕСТЬNULL(НаправленияСписания.Заказ, 					ОтчетПроизводстваЗаСмену.ЗаказПолучатель),
	|	ЕСТЬNULL(НаправленияСписания.Продукция, 				ОтчетПроизводстваЗаСмену.Продукция),
	|	ЕСТЬNULL(НаправленияСписания.ХарактеристикаПродукции, 	ОтчетПроизводстваЗаСмену.ХарактеристикаПродукции),
	|	ЕСТЬNULL(НаправленияСписания.СерияПродукции, 			ОтчетПроизводстваЗаСмену.СерияПродукции),
	|	ЕСТЬNULL(НаправленияСписания.ОбъектСтроительства, 		ОтчетПроизводстваЗаСмену.ОбъектСтроительства),
	|	ЕСТЬNULL(НаправленияСписания.СпособСтроительства, 		ОтчетПроизводстваЗаСмену.СпособСтроительства),
	|	ЕСТЬNULL(НаправленияСписания.Проект, 					ОтчетПроизводстваЗаСмену.Проект),
	|	ЕСТЬNULL(НаправленияСписания.Субконто1, 				ОтчетПроизводстваЗаСмену.Субконто1),
	|	ЕСТЬNULL(НаправленияСписания.Субконто2, 				ОтчетПроизводстваЗаСмену.Субконто2),
	|	ЕСТЬNULL(НаправленияСписания.Субконто3, 				ОтчетПроизводстваЗаСмену.Субконто3),
	|	ЕСТЬNULL(НаправленияСписания.СубконтоНУ1, 				ОтчетПроизводстваЗаСмену.СубконтоНУ1),
	|	ЕСТЬNULL(НаправленияСписания.СубконтоНУ2, 				ОтчетПроизводстваЗаСмену.СубконтоНУ2),
	|	ЕСТЬNULL(НаправленияСписания.СубконтоНУ3, 				ОтчетПроизводстваЗаСмену.СубконтоНУ3),
	|	ЕСТЬNULL(НаправленияСписания.СчетЗатрат, 				ОтчетПроизводстваЗаСмену.СчетЗатратПолучатель),
	|	ЕСТЬNULL(НаправленияСписания.СчетЗатратНУ, 				ОтчетПроизводстваЗаСмену.СчетЗатратПолучательНУ)
	|";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТекущийДокумент",    Ссылка);
	Запрос.УстановитьПараметр("Выпуск", 			Перечисления.ВидыВыпуска.Выпуск);
	Запрос.УстановитьПараметр("НаЗатраты", 			Перечисления.НаправленияВыпуска.НаЗатраты);
	Запрос.УстановитьПараметр("НаЗатратыСписок",	Перечисления.НаправленияВыпуска.НаЗатратыСписок);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаСписанияНаЗатраты = РезультатЗапроса.Выгрузить();
	
	Если мУчетнаяПолитикаБух <> Неопределено Тогда
		УчетЗатратПоЗаказамНаПроизводство = мУчетнаяПолитикаБух.УчетЗатратПоЗаказамНаПроизводство;
	Иначе
		УчетЗатратПоЗаказамНаПроизводство = Ложь;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаСписанияНаЗатраты Цикл
		Заказ = Неопределено;
		Если ИспользоватьЗаказы Тогда
			Заказ = УправлениеПроизводством.ПолучитьЗаказДляУчетаЗатрат(Строка.Заказ, , УчетЗатратПоЗаказамНаПроизводство, мИспользоватьЗаказыНаПроизводство);
		КонецЕсли;
		Строка.Заказ = Заказ;
	КонецЦикла;
	
	Возврат ТаблицаСписанияНаЗатраты;	
	
КонецФункции // ПодготовитьТаблицуСписанияНаЗатраты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// Процедура формирует движения регистров по табличной части Продукция
//
Процедура ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)
	
	Если Продукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ДвиженияПоТабличнойЧастиПродукцияУпр (ТаблицаПоПродукции, СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукция()

// Процедура формирует движения упр. регистров по табличной части Продукция
//
Процедура ДвиженияПоТабличнойЧастиПродукцияУпр(ТаблицаПоПродукции, СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)
		
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвиженийПоРазмещению   = Движения.РазмещениеЗаказовПокупателей;
	ТаблицаДвиженийПоРазмещению = НаборДвиженийПоРазмещению.Выгрузить();
	ТаблицаДвиженийПоРазмещению.Очистить();
	
	// Движения по размещению заказов.
	НаборДвиженийПоРазмещению.КонтрольОстатков(ЭтотОбъект, "Продукция", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	Если НЕ Отказ Тогда
	
		ТаблицаПоПродукцииДляРазмещения = ТаблицаПоПродукции.Скопировать();
		
		МассивНаУдаление = Новый Массив();
		Для Каждого СтрокаТабРазмещения Из ТаблицаПоПродукцииДляРазмещения Цикл
			Если СтрокаТабРазмещения.Качество <> Справочники.Качество.Новый Тогда
				МассивНаУдаление.Добавить(СтрокаТабРазмещения);					
			КонецЕсли;
		КонецЦикла;
		Для Каждого Элемент Из МассивНаУдаление Цикл
			ТаблицаПоПродукцииДляРазмещения.Удалить(Элемент);
		КонецЦикла;	
		
		ТабИмен = Неопределено;
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоПродукцииДляРазмещения, ТабИмен, "ЗаказПокупателя");
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоПродукцииДляРазмещения, ТабИмен, "ЗаказНаПроизводство", "ЗаказПоставщику");
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоПродукцииДляРазмещения, ТабИмен, "ЗаказРезерв",         "ЗаказПокупателя");
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПродукцииДляРазмещения, ТаблицаДвиженийПоРазмещению);
		
		ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоПродукцииДляРазмещения, ТабИмен);
		
		ТаблицаДвиженийПоРазмещению.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
		
		МассивНаУдаление = Новый Массив();
		Для Каждого Запись Из ТаблицаДвиженийПоРазмещению Цикл
			Если НЕ ЗначениеЗаполнено(Запись.ЗаказПокупателя) ИЛИ НЕ ЗначениеЗаполнено(Запись.ЗаказПоставщику) или Запись.Номенклатура.Услуга Тогда
				МассивНаУдаление.Добавить(Запись);					
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Элемент Из МассивНаУдаление Цикл
			ТаблицаДвиженийПоРазмещению.Удалить(Элемент);
		КонецЦикла;	

		НаборДвиженийПоРазмещению.мПериод = Дата;
		НаборДвиженийПоРазмещению.мТаблицаДвижений = ТаблицаДвиженийПоРазмещению;
		НаборДвиженийПоРазмещению.ВыполнитьРасход();
		
	КонецЕсли;
	
	// Движение по регистру ЛимитноЗаборныеКарты.
	ИспользоватьЛимитыОтпускаМатериалов = УправлениеПроизводством.ИспользоватьЛимитыОтпускаМатериалов();
	Если ИспользоватьНаправленияВыпуска И ИспользоватьЛимитыОтпускаМатериалов Тогда
		
		НаборДвижений = Движения.ЛимитноЗаборныеКарты;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
			
		ТаблицаПоТоварамЛимиты = ТаблицаПоПродукции.Скопировать();
		
		ТаблицаПоТоварамЛимиты.Колонки.ПодразделениеПолучатель.Имя = "Подразделение";
		
		ТаблицаПоТоварамЛимиты.Колонки.Добавить("Склад");
		ТаблицаПоТоварамЛимиты.ЗаполнитьЗначения(Склад, "Склад");
		
		КолвоЭлементов = ТаблицаПоТоварамЛимиты.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			СтрокаТаблицы = ТаблицаПоТоварамЛимиты[КолвоЭлементов - ОбратныйИндекс];
		  
			// Проверяем явно, т.к. может быть NULL.
			Если СтрокаТаблицы.НаправлениеВыпуска <> Перечисления.НаправленияВыпуска.НаЗатраты
		   	 ИЛИ СтрокаТаблицы.ВидВыпуска <> Перечисления.ВидыВыпуска.Выпуск Тогда
				ТаблицаПоТоварамЛимиты.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		УправлениеПроизводством.ПолучитьИспользованиеЛимитовОтпускаМатериалов(ЭтотОбъект, "Продукция", ТаблицаПоТоварамЛимиты);
			
		КолвоЭлементов = ТаблицаПоТоварамЛимиты.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			СтрокаТаблицы = ТаблицаПоТоварамЛимиты[КолвоЭлементов - ОбратныйИндекс];
			Если СтрокаТаблицы.КонтролироватьЛимит = 0
			 ИЛИ СтрокаТаблицы.Отпущено = 0
			Тогда
				ТаблицаПоТоварамЛимиты.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЛимиты, ТаблицаДвижений);

		// Недостающие поля.
		Если Не СтруктураШапкиДокумента.РазрешитьПревышениеЛимита Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(0, "ОтпущеноСверхЛимита");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка лимитов при проведении.
		НаборДвижений.КонтрольЛимитов(ЭтотОбъект, "Продукция", СтруктураШапкиДокумента, Отказ, Заголовок);
				
		Если Не Отказ Тогда
			Движения.ЛимитноЗаборныеКарты.ДобавитьДвижение();
		КонецЕсли;
		
	КонецЕсли;
	
	// Движение по заказам на производство.
	Если мИспользоватьЗаказыНаПроизводство И ИспользоватьЗаказы Тогда
		
		ТаблицаПоПродукцииНаСклад = ТаблицаПоПродукции.Скопировать();
		
		КолвоЭлементов = ТаблицаПоПродукцииНаСклад.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			СтрокаТаблицы = ТаблицаПоПродукцииНаСклад[КолвоЭлементов - ОбратныйИндекс];
			  
			Если (СтрокаТаблицы.ВидВыпуска <> Перечисления.ВидыВыпуска.Выпуск И ИспользоватьНаработку) Тогда
				ТаблицаПоПродукцииНаСклад.Удалить(СтрокаТаблицы);
			КонецЕсли;

		КонецЦикла;
		
		УправлениеПроизводством.ДвижениеПоЗаказамНаПроизводство(ЭтотОбъект, ТаблицаПоПродукцииНаСклад, "Продукция", СтруктураШапкиДокумента, РежимПроведения, Отказ, Заголовок);
		
		// ДВИЖЕНИЯ ПО РЕГИСТРУ ПотребностиЗаказовНаПроизводство
		Если мИспользоватьПотребностиЗаказовНаПроизводство Тогда
			ДопПараметры = новый Структура("СпособЗакрытияПотребностейЗаказовНаПроизводство",мСпособЗакрытияПотребностейЗаказовНаПроизводство);
			Если мСпособЗакрытияПотребностейЗаказовНаПроизводство = Перечисления.СпособыЗакрытияПотребностейЗаказовНаПроизводство.АвтоматическиПриРаспределении Тогда
				Если РаспределениеМатериалов.Количество() <> 0 Тогда
					ЗаказыНаПроизводствоИПереработку.ВыполнитьПогашениеПотребностиЗаказаНаПроизводство(ЭтотОбъект, "ОтчетПроизводстваЗаСмену", ДопПараметры);
				КонецЕсли;				
			Иначе
				ЗаказыНаПроизводствоИПереработку.ВыполнитьПогашениеПотребностиЗаказаНаПроизводство(ЭтотОбъект, "ОтчетПроизводстваЗаСмену", ДопПараметры);
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	// Движение по внутренним заказам
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяТабЧасти",         "Продукция");
	ДопПараметры.Вставить("СтатусПартии",        Перечисления.СтатусыПартийТоваров.Купленный);
	ДопПараметры.Вставить("РежимПроведения",     РежимПроведения);
	ДопПараметры.Вставить("КачествоТолькоНовый", Истина);
	ДопПараметры.Вставить("ИмяРеквизитаЗаказ",   "ЗаказРезерв");
	ДопПараметры.Вставить("ЗаказВШапке",         Ложь);
	
	ТаблицаПоВнутреннимЗаказам = ТаблицаПоПродукции.Скопировать();
	
	КолвоЭлементов = ТаблицаПоВнутреннимЗаказам.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
   		СтрокаТаблицы = ТаблицаПоВнутреннимЗаказам[КолвоЭлементов - ОбратныйИндекс];
  
		Если ТипЗнч(СтрокаТаблицы.ЗаказРезерв) <> Тип("ДокументСсылка.ВнутреннийЗаказ")
		ИЛИ НЕ (СтрокаТаблицы.ЗаказРезерв.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад
		     И  Склад = СтрокаТаблицы.ЗаказРезерв.Заказчик)
		ИЛИ     СтрокаТаблицы.Качество <> Справочники.Качество.Новый Тогда
		      
			ТаблицаПоВнутреннимЗаказам.Удалить(СтрокаТаблицы);
			
		Иначе
		
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, движение делаем на оставшееся количество
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ЗаказРезерв, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура,
																   СтрокаТаблицы.ХарактеристикаНоменклатуры, 
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   Перечисления.СтатусыПартийТоваров.Купленный);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
			Иначе
				ТаблицаПоВнутреннимЗаказам.Удалить(СтрокаТаблицы);
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Если ТаблицаПоВнутреннимЗаказам.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТаблицаПоВнутреннимЗаказам, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукцияУпр()

// Процедура формирует движения регл. регистров по табличной части Продукция
//
Процедура ДвиженияПоТабличнойЧастиПродукцияОтходы(СтруктураШапкиДокумента)
	ЕстьЗадания = ЗначениеЗаполнено(ЗаданиеНаПроизводство) И ИспользоватьЗаданияНаПроизводство;
	
	Если ЕстьЗадания Тогда
		НаборДвиженийЗаданияНаВыпуск   = Движения.ЗаданияНаВыпуск;
		ТаблицаДвиженийЗаданияНаВыпуск = НаборДвиженийЗаданияНаВыпуск.Выгрузить();
	КонецЕсли;
	
	//начало изменений БП 14
	Если  СтруктураШапкиДокумента.ВидОперации 
		= Перечисления.ВидыОперацийОтчетаПроизводстваЗаСмену.РаспределениеМатериаловНаВыпуск Тогда
		Если ЕстьЗадания Тогда
			
			    МассивПрод = Продукция.ВыгрузитьКолонку("Продукция");
			
				запрос = Новый Запрос;
				запрос.Текст = "ВЫБРАТЬ
				               |	ЗаданияНаВыпускОстатки.ЗаданиеНаПроизводство,
				               |	ЗаданияНаВыпускОстатки.Заказ,
				               |	ЗаданияНаВыпускОстатки.КонечнаяПродукция,
				               |	ЗаданияНаВыпускОстатки.Номенклатура,
				               |	ЗаданияНаВыпускОстатки.ХарактеристикаНоменклатуры,
				               |	ЗаданияНаВыпускОстатки.КоличествоОстаток
				               |ИЗ
				               |	РегистрНакопления.ЗаданияНаВыпуск.Остатки(
				               |			,
				               |			ЗаданиеНаПроизводство = &ЗаданиеНаПроизводство
				               |				И Номенклатура В (&МассивПрод)) КАК ЗаданияНаВыпускОстатки";
							
			Запрос.УстановитьПараметр("МассивПрод",МассивПрод);							
			Запрос.УстановитьПараметр("ЗаданиеНаПроизводство",ЗаданиеНаПроизводство);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.КоличествоОстаток <> 0  Тогда
					НоваяСтрокаЗаданияНаВыпуск = ТаблицаДвиженийЗаданияНаВыпуск.Добавить();
					НоваяСтрокаЗаданияНаВыпуск.ЗаданиеНаПроизводство      = Выборка.ЗаданиеНаПроизводство;
					НоваяСтрокаЗаданияНаВыпуск.Номенклатура               = Выборка.Номенклатура;
					НоваяСтрокаЗаданияНаВыпуск.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
					НоваяСтрокаЗаданияНаВыпуск.Заказ                      = Выборка.Заказ;
					НоваяСтрокаЗаданияНаВыпуск.КонечнаяПродукция          = Выборка.КонечнаяПродукция;
					НоваяСтрокаЗаданияНаВыпуск.Количество                 = Выборка.КоличествоОстаток;
					НоваяСтрокаЗаданияНаВыпуск.ПРГ_КодОперации			  = Перечисления.ПРГ_КодыОпераций.ЗакрытиеЗаданияНаВыпуск;
				КонецЕсли;
			КонецЦикла;	
		НаборДвиженийЗаданияНаВыпуск.мПериод = Дата;
		НаборДвиженийЗаданияНаВыпуск.мТаблицаДвижений = ТаблицаДвиженийЗаданияНаВыпуск;
		НаборДвиженийЗаданияНаВыпуск.ВыполнитьРасход();
		КонецЕслИ;
		возврат;
	Иначе	
		
	КонецЕсли;	
	//конец изменений БП 14 
	
	Для Каждого Строка Из Продукция Цикл
		
		ВыпускНаСклад = Не ИспользоватьНаправленияВыпуска ИЛИ (Строка.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаСклад);
		ВидВыпускаВыпуск = Не ИспользоватьНаработку ИЛИ (Строка.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск);
		Если ЗначениеЗаполнено(Строка.Номенклатура.ЕдиницаХраненияОстатков) Тогда
			Количество = Строка.Количество * Строка.Коэффициент / Строка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		Иначе
			Количество = Строка.Количество;
		КонецЕсли;
		
		Если ЕстьЗадания Тогда
			
			НоваяСтрокаЗаданияНаВыпуск = ТаблицаДвиженийЗаданияНаВыпуск.Добавить();
			НоваяСтрокаЗаданияНаВыпуск.ЗаданиеНаПроизводство      = ЗаданиеНаПроизводство;
			НоваяСтрокаЗаданияНаВыпуск.Номенклатура               = Строка.Номенклатура;
			НоваяСтрокаЗаданияНаВыпуск.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			НоваяСтрокаЗаданияНаВыпуск.Заказ                      = Строка.Заказ;
			НоваяСтрокаЗаданияНаВыпуск.КонечнаяПродукция          = Строка.КонечнаяПродукция;
			НоваяСтрокаЗаданияНаВыпуск.Количество                 = Количество;
			
		КонецЕсли;
			
	КонецЦикла;
		
	Если ЕстьЗадания Тогда
		НаборДвиженийЗаданияНаВыпуск.мПериод = Дата;
		НаборДвиженийЗаданияНаВыпуск.мТаблицаДвижений = ТаблицаДвиженийЗаданияНаВыпуск;
		НаборДвиженийЗаданияНаВыпуск.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиПродукцияОбщ()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаЗатрат, Отказ) Экспорт
	
	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	// Отражаем в регистре партионного учета для НДС
	Если Не ТаблицаЗатрат.Количество() = 0 
		И СтруктураШапкиДокумента.ИспользоватьНаправленияВыпуска Тогда
	
		УчетНДСФормированиеДвижений.СформироватьДвиженияНДСНезавершенноеПроизводство_ОтчетПроизводстваЗаСмену(СтруктураШапкиДокумента, ТаблицаЗатрат.Скопировать());
		
	КонецЕсли;
		
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура формирует движения регистров по табличной части Материалы
//
Процедура ДвиженияПоТабличнойЧастиМатериалыУпр(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьМатериалы Тогда
		Возврат;
	КонецЕсли;

	//начало изменений БП 14
	Если СтруктураШапкиДокумента.ВидСписанияМПЗ = Перечисления.ВидыСписанияМПЗ.СписыватьСоСклада Тогда
		возврат;
	КонецЕсли;	
	//конец изменений БП 14 
	
	// Проверка остатков при оперативном проведении.
	Движения.МатериалыВПроизводстве.КонтрольОстатков(
		СтруктураШапкиДокумента, 
		Отказ, 
		Заголовок, 
		РежимПроведения);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	// Формирование движений расход по регистру "Материалы в производстве".
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоМатериаламВПроизводстве(
		СтруктураШапкиДокумента, 
		мУчетнаяПолитика
	);

КонецПроцедуры // ДвиженияПоТабличнойЧастиМатериалыУпр()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента)

	мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		мУчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			мУчетнаяПолитикаНал = мУчетнаяПолитикаБух;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()
 
// Процедура формирует движения в регистры по ТЧ тех.операции
//
Процедура ДвиженияПоТабличнойЧастиТехОперации(СтруктураШапкиДокумента)
	
	Если Не СтруктураШапкиДокумента.ИспользоватьТехнологическиеОперации Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЗатратамиДвиженияПоРегистрам.СформироватьДвиженияПоОтражениюЗатрат(
		СтруктураШапкиДокумента,
		Неопределено, // ТаблицаЗатрат,
		Неопределено // ВидОтраженияВУчете
	);
	
	Если ЗначениеЗаполнено(ЗаданиеНаПроизводство) Тогда
		
		НаборДвиженийЗаданияНаТехОперации   = Движения.ЗаданияНаТехОперации;
		ТаблицаДвиженийЗаданияНаТехОперации = НаборДвиженийЗаданияНаТехОперации.Выгрузить();
		
		Для Каждого Строка Из ТехнологическиеОперации Цикл
			
			НоваяСтрокаЗаданияНаТехОперации = ТаблицаДвиженийЗаданияНаТехОперации.Добавить();
			НоваяСтрокаЗаданияНаТехОперации.ЗаданиеНаПроизводство      = ЗаданиеНаПроизводство;
			НоваяСтрокаЗаданияНаТехОперации.ТехОперация                = Строка.ТехнологическаяОперация;
			НоваяСтрокаЗаданияНаТехОперации.Количество                 = Строка.Количество;
				
		КонецЦикла;
		
		НаборДвиженийЗаданияНаТехОперации.мПериод = Дата;
		НаборДвиженийЗаданияНаТехОперации.мТаблицаДвижений = ТаблицаДвиженийЗаданияНаТехОперации;
		НаборДвиженийЗаданияНаТехОперации.ВыполнитьРасход();
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиТехОперации()

// Процедура формирует движения в регистры по ТЧ исполнители
//
Процедура ДвиженияПоТабличнойЧастиИсполнители(ВыборкаПоШапкеДокумента)
	
	Если Не ИспользоватьТехнологическиеОперации Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРаботРегл = СформироватьЗапросПоВыработкаРегл().Выгрузить();
	ВыборкаПоРаботникиРегл = СформироватьЗапросПоИсполнителиРегл().Выбрать();
	
	// фактическая выработка работников
	ДвиженияФактическойВыработкиУпр(ВыборкаПоШапкеДокумента, Исполнители);
	ДвиженияФактическойВыработкиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл);
	
	ВыборкаПоРаботникиРегл.Сбросить();
	ДвиженияРегистровБУиНУРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл);
	
	
КонецПроцедуры // ДвиженияПоТабличнойЧастиТехОперации()

Процедура ДвиженияФактическойВыработкиУпр(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники)
	//Вместо ВыборкаПоШапкеДокумента.ОтражатьВУправленческомУчете анализируем реквизит шапки - чтобы данные движения 
	//	формировались независимо от функционала отложенного проведения
	Если ОтражатьВУправленческомУчете Тогда
		
		НаборДвижений = Движения.ФактическаяВыработкаРаботников;
	
		Для Каждого СтрокаТЧ Из ВыборкаПоРаботники Цикл 
			Если СтрокаТЧ.СуммаКНачислению <> 0 Тогда
				НоваяСтрока = НаборДвижений.Добавить();
				НоваяСтрока.Физлицо				= СтрокаТЧ.Физлицо;
				НоваяСтрока.Выработка			= СтрокаТЧ.СуммаКНачислению;
				НоваяСтрока.Период				= Дата;
				НоваяСтрока.СпособВводаДанных	= Перечисления.СпособыВводаДанныхОВремени.ЗаДень;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияФактическойВыработкиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, ТаблицаРабот)
	//Вместо ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете анализируем реквизит шапки - чтобы данные движения 
	//	формировались независимо от функционала отложенного проведения
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
		
		НаборДвижений = Движения.ФактическаяВыработкаРаботниковОрганизаций;
		
		СчетУчетаРасчетовСРаботниками = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		СчетУчетаРасчетовСРаботникамиНУ = ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда;
		МассивСуммЗаРаботы = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
		ОстатокСуммЗаРаботы = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
		
		Работников = ВыборкаПоРаботники.Количество();
		РегистрироватьСтраховыеВзносы = ВыборкаПоШапкеДокумента.Дата >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		
		Сч = 0;
		Пока ВыборкаПоРаботники.Следующий() Цикл 
			Сч = Сч + 1;
			Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
				
				НоваяСтрока = НаборДвижений.Добавить();
				НоваяСтрока.Сотрудник			= ВыборкаПоРаботники.Сотрудник;
				НоваяСтрока.Организация			= ГоловнаяОрганизация;
				НоваяСтрока.Выработка			= ВыборкаПоРаботники.СуммаКНачислению;
				НоваяСтрока.Период				= Дата;
				НоваяСтрока.СпособВводаДанных	= Перечисления.СпособыВводаДанныхОВремени.ЗаДень;
				
				МассивСуммКНачислению = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению,МассивСуммЗаРаботы);
				
				Для каждого СтрокаТЗ Из ТаблицаРабот Цикл
					
					НомерУчета = ТаблицаРабот.Индекс(СтрокаТЗ);
					Если Сч = Работников Тогда
						Результат = ОстатокСуммЗаРаботы[НомерУчета];
					Иначе
					    Результат = Мин(МассивСуммКНачислению[НомерУчета],ОстатокСуммЗаРаботы[НомерУчета]);
						ОстатокСуммЗаРаботы[НомерУчета] = ОстатокСуммЗаРаботы[НомерУчета] - Результат;
					КонецЕсли;
						
					Строка = Движения.БУОсновныеНачисления.Добавить();
					
					// свойства
					Строка.ПериодДействияНачало			= Дата;
					Строка.ПериодДействияКонец			= Дата;
					Строка.ВидРасчета					= ВыборкаПоРаботники.ВидРасчета;
					Строка.ПериодРегистрации			= Дата;
					
					// Измерения
					Строка.Сотрудник					= ВыборкаПоРаботники.Сотрудник;
					Строка.ФизЛицо						= ВыборкаПоРаботники.ФизЛицо;
					Строка.Организация					= ГоловнаяОрганизация;
					
					// ресурсы
					Строка.Результат = Результат;
					
					// реквизиты
					Строка.ГрафикРаботы					= ВыборкаПоРаботники.ГрафикРаботы;
					Строка.ВидУчетаВремени				= Перечисления.ВидыУчетаВремени.ПоЧасам;
					Строка.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
					
					Строка.СчетДт = СтрокаТЗ.СчетЗатрат;
					Строка.СчетКт = СчетУчетаРасчетовСРаботниками;
					Строка.СубконтоКт1 = ВыборкаПоРаботники.ФизЛицо;
					
					Для СчСк = 1 По 3 Цикл
						
						ВидыСубконтоСк = СтрокаТЗ["ВидСубконто" + СчСк];
						
						Если ВидыСубконтоСк = NULL Тогда
							
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
							Строка["СубконтоДт" + СчСк] = СтрокаТЗ.СтатьяЗатрат;
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
							Строка["СубконтоДт" + СчСк] = СтрокаТЗ.НоменклатурнаяГруппа;
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда
							Строка["СубконтоДт" + СчСк] = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
							Строка["СубконтоДт" + СчСк] = СтрокаТЗ.ОбъектСтроительства;
							Строка["СубконтоДт" + (СчСк + 1)] = СтрокаТЗ.СпособСтроительства;
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
							Строка["СубконтоДт" + СчСк] = СтрокаТЗ.Продукция;
						КонецЕсли;
						
					КонецЦикла; 
					//Вместо ВыборкаПоШапкеДокумента.ОтражатьВНалоговомУчетеУСН - чтобы данные движения 
					//	формировались независимо от функционала отложенного проведения
					Если ВыборкаПоШапкеДокумента.ОрганизацияПрименяетУСН И ОтражатьВНалоговомУчете Тогда
						//Строка.РасходыУСН = СтрокаТЗ.ОтражениеВУСН;
					ИначеЕсли Не СтрокаТЗ.ОблагаетсяЕНВД Тогда
						
						Строка.СчетДтНУ = СтрокаТЗ.СчетЗатратНУ;
						Строка.СчетКтНУ = СчетУчетаРасчетовСРаботникамиНУ;
						
						// субконто
						Для СчСк = 1 По 3 Цикл
							
							ВидыСубконтоСк = СтрокаТЗ["ВидСубконтоНУ" + СчСк];
							
							Если ВидыСубконтоСк = NULL Тогда
								
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
								Строка["СубконтоДтНУ" + СчСк] = СтрокаТЗ.СтатьяЗатрат;
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
								Строка["СубконтоДтНУ" + СчСк] = СтрокаТЗ.НоменклатурнаяГруппа;
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда
								Строка["СубконтоДтНУ" + СчСк] = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
								Строка["СубконтоДтНУ" + СчСк] = СтрокаТЗ.ОбъектСтроительства;
								Строка["СубконтоДтНУ" + (СчСк + 1)] = СтрокаТЗ.СпособСтроительства;
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
								Строка["СубконтоДтНУ" + СчСк] = СтрокаТЗ.Продукция;
							КонецЕсли;
						
						КонецЦикла;
						
						Строка.СубконтоКтНУ1 = ВыборкаПоРаботники.ФизЛицо;
						Строка.СубконтоКтНУ2 = ВыборкаПоРаботники.ВидНачисленияНУ;
						
					КонецЕсли;
					
					
					СтрокаНабора = Движения.ЕСНОсновныеНачисления.Добавить();
					
					// свойства
					СтрокаНабора.ПериодДействияНачало		= Дата;
					СтрокаНабора.ПериодДействияКонец		= Дата;
					СтрокаНабора.ВидРасчета					= ВыборкаПоРаботники.ВидРасчета;
					СтрокаНабора.ПериодРегистрации			= Дата;
					
					// Измерения
					СтрокаНабора.Сотрудник					= ВыборкаПоРаботники.Сотрудник;
					СтрокаНабора.Физлицо					= ВыборкаПоРаботники.Физлицо;
					СтрокаНабора.Организация				= ГоловнаяОрганизация;
					
					// ресурсы
					СтрокаНабора.Результат					= Результат;
					
					// реквизиты
					СтрокаНабора.ГрафикРаботы				= ВыборкаПоРаботники.ГрафикРаботы;
					СтрокаНабора.ВидУчетаВремени			= Перечисления.ВидыУчетаВремени.ПоЧасам;
					СтрокаНабора.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
					СтрокаНабора.КодДоходаЕСН				= ?(РегистрироватьСтраховыеВзносы, ВыборкаПоРаботники.КодПоСтраховымВзносам, ВыборкаПоРаботники.КодПоЕСН);
					СтрокаНабора.ОблагаетсяЕНВД				= СтрокаТЗ.ОблагаетсяЕНВД;
					
					Если РегистрироватьСтраховыеВзносы Тогда
						
						// сведения о доходах для целей исчисления страховых взносов
						СтрокаНабора = Движения.СтраховыеВзносыСведенияОДоходах.Добавить();
						
						// Измерения
						СтрокаНабора.ОблагаетсяПоДополнительномуТарифу = ВыборкаПоРаботники.ОблагаетсяПоДополнительномуТарифу;
						СтрокаНабора.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам  = ВыборкаПоРаботники.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам;
						СтрокаНабора.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией = ВыборкаПоРаботники.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией;
						СтрокаНабора.ЯвляетсяДоходомФармацевта 					 = ВыборкаПоРаботники.ЯвляетсяДоходомФармацевта;
						СтрокаНабора.ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ = ВыборкаПоРаботники.ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ;
						// реквизиты
						СтрокаНабора.ВидДохода = ВыборкаПоРаботники.КодПоСтраховымВзносам;
						СтрокаНабора.ВидРасчета	= ВыборкаПоРаботники.ВидРасчета;
						
					Иначе
						
						// сведения о доходах для целей исчисления ЕСН
						СтрокаНабора = Движения.ЕСНСведенияОДоходах.Добавить();
						
						// реквизиты
						СтрокаНабора.КодДоходаЕСН = ВыборкаПоРаботники.КодПоЕСН;
					КонецЕсли;
					// свойства
					СтрокаНабора.Период						= НачалоМесяца(Дата);
					// Измерения
					СтрокаНабора.ФизЛицо					= ВыборкаПоРаботники.ФизЛицо;
					СтрокаНабора.Организация				= ГоловнаяОрганизация;
					
					// ресурсы
					СтрокаНабора.Результат					= Результат;
					
					// реквизиты
					СтрокаНабора.ОблагаетсяЕНВД				= СтрокаТЗ.ОблагаетсяЕНВД;
					СтрокаНабора.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияРегистровБУиНУРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, ТаблицаРабот)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		// Определим способ ведения учета расчетов с персоналом - сводно/подробно
		ВестиРеглУчетРасчетовСПерсоналомПодробно = Не глЗначениеПеременной("ВестиРеглУчетРасчетовСПерсоналомСводно");
		
		СчетУчетаРасчетовСРаботниками = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		СчетУчетаРасчетовСРаботникамиНУ = ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда;
		МассивСуммЗаРаботы = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
		ОстатокСуммЗаРаботы = ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
		
		Работников = ВыборкаПоРаботники.Количество();
		
		Сч = 0;
		Пока ВыборкаПоРаботники.Следующий() Цикл 
			Сч = Сч + 1;
			Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
				
				МассивСуммКНачислению = ОбщегоНазначения.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению,МассивСуммЗаРаботы);
				
				Для каждого СтрокаТЗ Из ТаблицаРабот Цикл
					
					НомерУчета = ТаблицаРабот.Индекс(СтрокаТЗ);
					Если Сч = Работников Тогда
						Результат = ОстатокСуммЗаРаботы[НомерУчета];
					Иначе
						Результат = Мин(МассивСуммКНачислению[НомерУчета],ОстатокСуммЗаРаботы[НомерУчета]);
						ОстатокСуммЗаРаботы[НомерУчета] = ОстатокСуммЗаРаботы[НомерУчета] - Результат;
					КонецЕсли;
					
					Проводка = Движения.Хозрасчетный.Добавить();
					
					// свойства
					Проводка.Период = Дата;
					Проводка.СчетДт = СтрокаТЗ.СчетЗатрат;
					Для СчСк = 1 По 3 Цикл
						
						ВидыСубконтоСк = СтрокаТЗ["ВидСубконто" + СчСк];
						
						Если ВидыСубконтоСк = NULL Тогда
							
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
							Проводка.СубконтоДт[ВидыСубконтоСк] = СтрокаТЗ.СтатьяЗатрат;
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
							Проводка.СубконтоДт[ВидыСубконтоСк] = СтрокаТЗ.НоменклатурнаяГруппа;
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда
							Проводка.СубконтоДт[ВидыСубконтоСк] = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
							Проводка.СубконтоДт[ВидыСубконтоСк] = СтрокаТЗ.ОбъектСтроительства;
							Проводка.СубконтоДт.СпособыСтроительства = СтрокаТЗ.СпособСтроительства;
						ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
							Проводка.СубконтоДт[ВидыСубконтоСк] = СтрокаТЗ.Продукция;
						КонецЕсли;
						
					КонецЦикла; 
					Проводка.СчетКт = СчетУчетаРасчетовСРаботниками;
					Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
						Проводка.СубконтоКт.РаботникиОрганизации = ВыборкаПоРаботники.ФизЛицо;
					КонецЕсли;
					
					// Измерения
					Проводка.Организация = ВыборкаПоШапкеДокумента.Организация;
					
					// ресурсы                               
					Проводка.Сумма       = Результат;
					
					// реквизиты
					Проводка.Содержание  = "Сдельная зарплата";
					Проводка.НомерЖурнала  = "ЗП";
					
					Если ВыборкаПоШапкеДокумента.ОтражатьВНалоговомУчете Тогда
						Проводка = Движения.Налоговый.Добавить();
						
						// свойства
						Проводка.Период = Дата;
						Проводка.СчетДт = СтрокаТЗ.СчетЗатратНУ;
						Для СчСк = 1 По 3 Цикл
							
							ВидыСубконтоСк = СтрокаТЗ["ВидСубконтоНУ" + СчСк];
							
							Если ВидыСубконтоСк = NULL Тогда
								
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
								Проводка.СубконтоДт[ВидыСубконтоСк] = СтрокаТЗ.СтатьяЗатрат;
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
								Проводка.СубконтоДт[ВидыСубконтоСк] = СтрокаТЗ.НоменклатурнаяГруппа;
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда
								Проводка.СубконтоДт[ВидыСубконтоСк] = ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
								Проводка.СубконтоДт[ВидыСубконтоСк] = СтрокаТЗ.ОбъектСтроительства;
								Проводка.СубконтоДт.СпособыСтроительства = СтрокаТЗ.СпособСтроительства;
							ИначеЕсли ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
								Проводка.СубконтоДт[ВидыСубконтоСк] = СтрокаТЗ.Продукция;
							КонецЕсли;
							
						КонецЦикла; 
						Проводка.СчетКт = СчетУчетаРасчетовСРаботникамиНУ;
						Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
							Проводка.СубконтоКт.РаботникиОрганизации = ВыборкаПоРаботники.ФизЛицо;
							Проводка.СубконтоКт.ВидНачисленийОплатыТрудаПоСтатье255НК = ВыборкаПоРаботники.ВидНачисленияНУ;
						КонецЕсли;
						
						// Измерения
						Проводка.Организация = ВыборкаПоШапкеДокумента.Организация;
						НалоговыйУчет.ВидУчетаПоПБУ18(Проводка);
						
						// ресурсы                               
						Проводка.Сумма       = Результат;
						
						// реквизиты
						Проводка.Содержание  = "Сдельная зарплата";
						Проводка.НомерЖурнала  = "ЗП";
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Движения.Хозрасчетный.Записать(Ложь);
		Движения.Налоговый.Записать(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоПродукции        - таблица значений, содержащая данные для проведения и проверки ТЧ Продукция
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоВозвратнымОтходам,
								ТаблицаСписанияНаЗатраты, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете И РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		МассивСерий = Новый Массив;
		Для Каждого СтрокаТЧ Из ТаблицаПоПродукции Цикл
			Если СтрокаТЧ.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаЗатраты Тогда
				МассивСерий.Добавить( СтрокаТЧ.СерияНоменклатуры);
			Иначе
				МассивСерий.Добавить( Неопределено);
			КонецЕсли;
		КонецЦикла;
		УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( МассивСерий, Дата, Отказ, Заголовок);
	КонецЕсли;
	
	// Формирование движений по регистрам "Затраты на выпуск продукции".
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукции(
		СтруктураШапкиДокумента, 
		"ОтчетПроизводстваЗаСмену",
		мУчетнаяПолитика, 
		мУчетнаяПолитикаБух
		);
		
	// Формирование движений по регистрам "Выпуск продукции" и направлениям выпуска.
		УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска(
			СтруктураШапкиДокумента, 
			"ОтчетПроизводстваЗаСмену",
			мУчетнаяПолитика, 
			мУчетнаяПолитикаБух,
			мУчетнаяПолитикаНал
			);

	
	ДвиженияПоТабличнойЧастиПродукцияОтходы(СтруктураШапкиДокумента);
	ДвиженияПоТабличнойЧастиПродукция(ТаблицаПоПродукции, СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	ДвиженияПоТабличнойЧастиТехОперации(СтруктураШапкиДокумента);
	ДвиженияПоТабличнойЧастиИсполнители(СтруктураШапкиДокумента);
	
	// Формирование движений регистров.
	ДвиженияПоТабличнойЧастиМатериалыУпр(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаСписанияНаЗатраты, Отказ);
	
	// Зарегистрируем документ в последовательности.
	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
		ЭтотОбъект, 
		Дата, 
		СтруктураШапкиДокумента.Организация,
		ОтражатьВУправленческомУчете,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации
	);
	
	//m.ionov@a-prof.ru 02.04.2014
	Если Не Отказ
		И Константы.УП_КонтролироватьСписаниеВСоответсвииСоСпецификациями.Получить() = Истина Тогда
		
		ПроверкаНаСоответсвиеСпецификации(СтруктураШапкиДокумента, Заголовок, Отказ);
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует запрос по таблице "Выработка" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоВыработкаРегл()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	// Описание текста запроса:
	// 
	// 1. Выборка "Выработка": 
	//		Выбираются строки документа.  
	// 2. Выборки "ВидСубконтоДт i": 
	//		По плану счетов Хозрасчетный определяем тип 
    //      значения субконто, требуемых счету учета 
    //
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(Выработка.СуммаРегл) КАК СуммаЗаРаботу,
	|	Выработка.НоменклатурнаяГруппа,
	|	Выработка.СтатьяЗатрат,
	|	Выработка.СчетЗатрат,
	|	Выработка.СчетЗатратНУ,
	|	Выработка.Продукция,
	|	Выработка.СерияПродукции,
	|	Выработка.ХарактеристикаПродукции,
	|	Выработка.ОбъектСтроительства,
	|	Выработка.СпособСтроительства,
	|	ВидСубконтоДтНУ1.ВидСубконто КАК ВидСубконтоНУ1,
	|	ВидСубконтоДтНУ2.ВидСубконто КАК ВидСубконтоНУ2,
	|	ВидСубконтоДтНУ3.ВидСубконто КАК ВидСубконтоНУ3,
	|	ВидСубконтоДт1.ВидСубконто КАК ВидСубконто1,
	|	ВидСубконтоДт2.ВидСубконто КАК ВидСубконто2,
	|	ВидСубконтоДт3.ВидСубконто КАК ВидСубконто3,
	|	ВЫБОР
	|		КОГДА СчетаУчетаПоДеятельностиЕНВД.Счет ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОблагаетсяЕНВД
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.ТехнологическиеОперации КАК Выработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт1
	|		ПО Выработка.СчетЗатрат = ВидСубконтоДт1.Ссылка
	|			И (ВидСубконтоДт1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт2
	|		ПО Выработка.СчетЗатрат = ВидСубконтоДт2.Ссылка
	|			И (ВидСубконтоДт2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт3
	|		ПО Выработка.СчетЗатрат = ВидСубконтоДт3.Ссылка
	|			И (ВидСубконтоДт3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидСубконтоДтНУ1
	|		ПО Выработка.СчетЗатратНУ = ВидСубконтоДтНУ1.Ссылка
	|			И (ВидСубконтоДтНУ1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидСубконтоДтНУ2
	|		ПО Выработка.СчетЗатратНУ = ВидСубконтоДтНУ2.Ссылка
	|			И (ВидСубконтоДтНУ2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидСубконтоДтНУ3
	|		ПО Выработка.СчетЗатратНУ = ВидСубконтоДтНУ3.Ссылка
	|			И (ВидСубконтоДтНУ3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
	|		ПО Выработка.СчетЗатрат = СчетаУчетаПоДеятельностиЕНВД.Счет
	|ГДЕ
	|	Выработка.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Выработка.НоменклатурнаяГруппа,
	|	Выработка.СтатьяЗатрат,
	|	Выработка.СчетЗатрат,
	|	Выработка.СчетЗатратНУ,
	|	Выработка.Продукция,
	|	Выработка.СерияПродукции,
	|	Выработка.ХарактеристикаПродукции,
	|	Выработка.ОбъектСтроительства,
	|	Выработка.СпособСтроительства,
	|	ВидСубконтоДтНУ1.ВидСубконто,
	|	ВидСубконтоДтНУ2.ВидСубконто,
	|	ВидСубконтоДтНУ3.ВидСубконто,
	|	ВидСубконтоДт1.ВидСубконто,
	|	ВидСубконтоДт2.ВидСубконто,
	|	ВидСубконтоДт3.ВидСубконто,
	|	ВЫБОР
	|		КОГДА СчетаУчетаПоДеятельностиЕНВД.Счет ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВыработкаРегл()

// Формирует запрос по таблице "Исполнители" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоИсполнителиРегл()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаАктуальности", Дата);
	Запрос.УстановитьПараметр("ВР", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата);
	Запрос.УстановитьПараметр("ВидНачисленияНУ", Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп1ст255);
	Запрос.УстановитьПараметр("КодДоходаЕСН", Справочники.ДоходыЕСН.ОблагаетсяЦеликом);
	Запрос.УстановитьПараметр("СпособРасчета", Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
    Запрос.УстановитьПараметр("НачальнаяДата", '00010101');
	
	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядИсполнители": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением 
	//		реквизитов "Сотрудник".
	// 3. Выборка "РаботникиОрганизацииСрезПоследних": 
	//		Из регистра (срез последних) РаботникиОрганизации выбираются строки, 
	//		соответствующие работникам документа.  
    //
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСменуИсполнители.НомерСтроки КАК НомерСтроки,
	|	ОтчетПроизводстваЗаСменуИсполнители.Сотрудник КАК Сотрудник,
	|	ОтчетПроизводстваЗаСменуИсполнители.Сотрудник.ФизЛицо КАК ФизЛицо,
	|	ОтчетПроизводстваЗаСменуИсполнители.СуммаКНачислениюРегл КАК СуммаКНачислению,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.ЯвляетсяДолжностьюЛетногоЭкипажа
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.ЯвляетсяДолжностьюЛетногоЭкипажа
	|	КОНЕЦ КАК ОблагаетсяПоДополнительномуТарифу,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.ЯвляетсяДолжностьюЛетногоЭкипажа
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.ЯвляетсяШахтерскойДолжностью
	|	КОНЕЦ КАК ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией
	|	КОНЕЦ КАК ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.ЯвляетсяФармацевтическойДолжностью
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.ЯвляетсяФармацевтическойДолжностью
	|	КОНЕЦ КАК ЯвляетсяДоходомФармацевта,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.ЯвляетсяФармацевтическойДолжностью
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.СоответствуетСудамПодФлагомРФ
	|	КОНЕЦ КАК ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения < &ДатаАктуальности
	|					И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> &НачальнаяДата
	|				ТОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчетаЗавершения
	|			ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчета
	|		КОНЕЦ, &ВР) КАК ВидРасчета,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения < &ДатаАктуальности
	|					И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> &НачальнаяДата
	|				ТОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчетаЗавершения.ВидНачисленияПоСт255НК
	|			ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчета.ВидНачисленияПоСт255НК
	|		КОНЕЦ, &ВидНачисленияНУ) КАК ВидНачисленияНУ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения < &ДатаАктуальности
	|					И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> &НачальнаяДата
	|				ТОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчетаЗавершения.КодДоходаЕСН
	|			ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчета.КодДоходаЕСН
	|		КОНЕЦ, &КодДоходаЕСН) КАК КодПоЕСН,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|					И ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчетаЗавершения.КодДоходаСтраховыеВзносы
	|			ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчета.КодДоходаСтраховыеВзносы
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.ОблагаетсяЦеликом)) КАК КодПоСтраховымВзносам
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Исполнители КАК ОтчетПроизводстваЗаСменуИсполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Исполнители1.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(Исполнители2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ОтчетПроизводстваЗаСмену.Исполнители КАК Исполнители1
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПроизводстваЗаСмену.Исполнители КАК Исполнители2
	|				ПО Исполнители1.Сотрудник = Исполнители2.Сотрудник
	|					И Исполнители1.НомерСтроки < Исполнители2.НомерСтроки
	|					И Исполнители1.Ссылка = Исполнители2.Ссылка
	|		ГДЕ
	|			Исполнители1.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Исполнители1.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ОтчетПроизводстваЗаСменуИсполнители.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&ДатаАктуальности,
	|		Организация = &ГоловнаяОрганизация
	|		    И Сотрудник В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            ОтчетПроизводстваЗаСменуИсполнители.Сотрудник
	|		        ИЗ
	|		            Документ.ОтчетПроизводстваЗаСмену.Исполнители КАК ОтчетПроизводстваЗаСменуИсполнители
	|		        ГДЕ
	|		            ОтчетПроизводстваЗаСменуИсполнители.Ссылка = &ДокументСсылка)) КАК РаботникиОрганизацииСрезПоследних
	|		ПО ОтчетПроизводстваЗаСменуИсполнители.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|		&ДатаАктуальности,
	|		Организация = &ГоловнаяОрганизация
	|		    И Сотрудник В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            ОтчетПроизводстваЗаСменуИсполнители.Сотрудник
	|		        ИЗ
	|		            Документ.ОтчетПроизводстваЗаСмену.Исполнители КАК ОтчетПроизводстваЗаСменуИсполнители
	|		        ГДЕ
	|		            ОтчетПроизводстваЗаСменуИсполнители.Ссылка = &ДокументСсылка)
	|		    И ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО) КАК ПлановыеНачисленияРаботниковОрганизацииСрезПоследних
	|		ПО ОтчетПроизводстваЗаСменуИсполнители.Сотрудник = ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.Сотрудник
	|			И (ПлановыеНачисленияРаботниковОрганизацииСрезПоследних.ВидРасчета.СпособРасчета = &СпособРасчета)
	|ГДЕ
	|	ОтчетПроизводстваЗаСменуИсполнители.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоИсполнители()

// Дополняет полями, нужными для упр. учета.
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "УчетЗатратПоЗаказамНаПроизводство", "УчетЗатратПоЗаказамНаПроизводство");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()

// Дополняет полями, нужными для регл. учета.
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеРегл()

// Дополняет полями, нужными для регл. учета.
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратныеОтходыРегл(СтруктураПолей)

    СтруктураПолей.Вставить("Счет"                      , "Счет");
	СтруктураПолей.Вставить("СчетНУ"                    , "СчетНУ");
    СтруктураПолей.Вставить("СчетЗатрат"                , "СчетЗатрат");
	СтруктураПолей.Вставить("СчетЗатратНУ"              , "СчетЗатратНУ");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиВозвратныеОтходы()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаданиеНаПроизводство") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Дата = Основание.ДатаЗадания;
		
		ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, мТекущийПользователь);
		
		ЗаданиеНаПроизводство 			  = Основание;
		ИспользоватьЗаданияНаПроизводство = Истина;
		
		Если НЕ мИспользоватьНаработку Тогда
			ИспользоватьНаработку 		  = Ложь;
		КонецЕсли;
		
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновнаяОрганизация");
		
		// Установим признаки отражения документа в бух. и налог. учете для того,
		// чтобы процедура ЗаполнитьПродукциюПоЗаданиюНаПроизводство смогла заполнить счета учета в ТЧ Продукция
		Если ЗначениеЗаполнено(Организация)
		 И ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ОтражатьВРегламентированномУчете") Тогда
			ОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОтражатьДокументыВБухгалтерскомУчете" );
			ОтражатьВНалоговомУчете 	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОтражатьДокументыВНалоговомУчете" );
		КонецЕсли;
		
		Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновнойСклад");
		
		ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновноеПодразделениеОрганизации");
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		Если Основание.Проведен Тогда

			ЗаполнитьПродукциюПоЗаданиюНаПроизводство();
			ЗаполнитьТехОперации();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, мТекущийПользователь);
		Если Не мИспользоватьНаработку Тогда
			ИспользоватьНаработку = мИспользоватьНаработку;
		КонецЕсли;
		
		#Если Клиент Тогда
		СписокПодразделений = РаботаСДиалогами.ПолучитьСписокПодразделенийОрганизаций(Основание.Подразделение,Основание.Организация);
		Если СписокПодразделений.Количество()=0 Тогда
			ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновноеПодразделениеОрганизации");
		Иначе
			ПодразделениеОрганизации = СписокПодразделений[0].Значение;
		КонецЕсли;
		#КонецЕсли
		
		Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновнойСклад");
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		ИспользоватьЗаказы = Истина;
		
		Если Основание.Проведен Тогда
			
			ЗаполнитьТабличнуюЧастьПоОстаткамЗаказНаПроизводство(Продукция, Основание);
			
			ЗаполнитьПотребностямиПоЗаказамНаПроизводство(РаспределениеМатериалов, Основание);
			
			ТабЧасть = РаспределениеМатериалов.Выгрузить();
			Материалы.Загрузить(ТабЧасть);
			Материалы.Свернуть("ЗаказВыпуска,Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент,Спецификация,СтатьяЗатрат","Количество");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если не ИспользоватьМатериалы и Материалы.Количество()>0 Тогда
		ИспользоватьМатериалы = истина;
	КонецЕсли;
	Если не ИспользоватьПрочиеЗатраты и ПрочиеЗатраты.Количество()>0 Тогда
		ИспользоватьпрочиеЗатраты = истина;
	КонецЕсли;
	Если не ИспользоватьТехнологическиеОперации и ТехнологическиеОперации.Количество()>0 Тогда
		ИспользоватьТехнологическиеОперации = истина;
	КонецЕсли;
	Если не ИспользоватьВозвратныеОтходы и ВозвратныеОтходы.Количество()>0 Тогда
		ИспользоватьВозвратныеОтходы = истина;
	КонецЕсли;
	
	Если АвтораспределениеМатериалов и РаспределениеМатериалов.Количество()>0 Тогда
		АвтораспределениеМатериалов = Ложь;
	КонецЕсли;
	Если АвтораспределениеПрочихЗатрат и РаспределениеПрочихЗатрат.Количество()>0 Тогда
		АвтораспределениепрочихЗатрат = Ложь;
	КонецЕсли;
	Если АвтораспределениеТехнологическихОпераций и РаспределениеТехнологическихОпераций.Количество()>0 Тогда
		АвтораспределениеТехнологическихОпераций = Ложь;
	КонецЕсли;
	Если АвтораспределениеВозвратныхОтходов и РаспределениеВозвратныхОтходов.Количество()>0 Тогда
		АвтораспределениеВозвратныхОтходов = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ=ложь) Экспорт
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	// Дополним полями, нужными для регл. и упр. учета
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СкладОтходов) Тогда
		СтруктураШапкиДокумента.Вставить( "СкладОтходов", СтруктураШапкиДокумента.Склад);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ВидВоспроизводства", Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);

	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоВозвратнымОтходам, ТаблицаСписанияНаЗатраты) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Продукция".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              			, "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"			, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         			, "СерияНоменклатуры");
	
	СтруктураПолей.Вставить("Количество"                			, "Количество * ВЫБОР КОГДА Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL ИЛИ Коэффициент = 0 ТОГДА 1 ИНАЧЕ Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КОНЕЦ");
	СтруктураПолей.Вставить("КоличествоДоделка"                		, "КоличествоДоделка * ВЫБОР КОГДА Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL ИЛИ Коэффициент = 0 ТОГДА 1 ИНАЧЕ Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КОНЕЦ");
	СтруктураПолей.Вставить("Отпущено"                				, "Количество * ВЫБОР КОГДА Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL ИЛИ Коэффициент = 0 ТОГДА 1 ИНАЧЕ Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КОНЕЦ");
	СтруктураПолей.Вставить("ОтпущеноСверхЛимита"           		, "ОтпущеноСверхЛимита * ВЫБОР КОГДА Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ЕСТЬ NULL ИЛИ Коэффициент = 0 ТОГДА 1 ИНАЧЕ Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КОНЕЦ");

	СтруктураПолей.Вставить("Услуга"								, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"									, "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"								, "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ЗаказПокупателя"						, "Заказ");
	СтруктураПолей.Вставить("Заказ"									, "Заказ");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"					, "ЗаказРезерв.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"					, "ЗаказРезерв.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
							"ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ЗаказНаПроизводство"					, "ЗаказВыпуска");
	СтруктураПолей.Вставить("ЗаказРезерв"					        , "ЗаказРезерв");

	СтруктураПолей.Вставить("ЕдиницаИзмерения"						, "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Коэффициент"							, "Коэффициент");
	
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"			, "Номенклатура.ВестиПартионныйУчетПоСериям");
	
	СтруктураПолей.Вставить("ВидВыпуска"		   					, "ВидВыпуска");
	СтруктураПолей.Вставить("Качество"		   						, "Качество");
	СтруктураПолей.Вставить("КонечнаяПродукция"		   				, "КонечнаяПродукция");
	СтруктураПолей.Вставить("НаправлениеВыпуска"		   			, "НаправлениеВыпуска");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		   			, "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Спецификация"		   					, "Спецификация");
	
	СтруктураПолей.Вставить("КлючСвязи"		   						, "КлючСвязи");
	
	// Получатели.
	СтруктураПолей.Вставить("ЗаказПолучатель"		   				, "ЗаказПолучатель");
	СтруктураПолей.Вставить("НоменклатурнаяГруппаПолучатель"		, "НоменклатурнаяГруппаПолучатель");
	СтруктураПолей.Вставить("ПодразделениеОрганизацииПолучатель"	, "ПодразделениеОрганизацииПолучатель");
	СтруктураПолей.Вставить("ПодразделениеПолучатель"				, "ПодразделениеПолучатель");
	СтруктураПолей.Вставить("СтатьяЗатратПолучатель"				, "СтатьяЗатратПолучатель");
	СтруктураПолей.Вставить("ХарактерЗатрат"         				, "СтатьяЗатратПолучатель.ХарактерЗатрат");
	СтруктураПолей.Вставить("Продукция"         					, "Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукции"       		, "ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияПродукции"         				, "СерияПродукции");
	СтруктураПолей.Вставить("ОбъектСтроительства"         			, "ОбъектСтроительства");
	СтруктураПолей.Вставить("СпособСтроительства"         			, "СпособСтроительства");
	СтруктураПолей.Вставить("СтатусПартии"                          , "СтатусПартии");

	// Дополним полями, нужными для регл. и упр. учета.
	ДополнитьСтруктуруПолейТабличнойЧастиПродукцияРегл(СтруктураПолей);

	РезультатЗапросаПоПродукции = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей);
	
	// Подготовим таблицу продукции для проведения.
	ТаблицаПоПродукции = ПодготовитьТаблицуТоваров(РезультатЗапросаПоПродукции, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Возвратные отходы".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Партия"         			, "Ссылка");
	СтруктураПолей.Вставить("Услуга"					, "Номенклатура.Услуга");
	
	СтруктураПолей.Вставить("Заказ"						, "Заказ");
	СтруктураПолей.Вставить("ЗаказРезерв"		        , "ЗаказРезерв");
	
	СтруктураПолей.Вставить("Затрата"              		, "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаЗатраты"		, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияЗатраты"         		, "СерияНоменклатуры");
	СтруктураПолей.Вставить("СтатусМатериальныхЗатрат"	, "СтатьяЗатрат.СтатусМатериальныхЗатрат");
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратныеОтходыРегл(СтруктураПолей);

	РезультатЗапросаПоВозвратнымОтходам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратныеОтходы", СтруктураПолей);
	
	// Подготовим таблицы продукции и возвратной тары для проведения.
	ТаблицаПоВозвратнымОтходам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоВозвратнымОтходам, СтруктураШапкиДокумента);
	
	// Подготовим таблицу списания на затраты.
	ТаблицаСписанияНаЗатраты = ПодготовитьТаблицуСписанияНаЗатраты();
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоПродукции, СтруктураШапкиДокумента, Ложь);
		Если ИспользоватьВозвратныеОтходы Тогда
			БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоВозвратнымОтходам, СтруктураШапкиДокумента, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоВозвратнымОтходам, ТаблицаСписанияНаЗатраты;
	
	Если мУдалятьДвижения Тогда
		//начало изменений Ожиганов 10.09.2015 немного оптимизируем  
		//ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
		//конец изменений 
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ);
		
	ПроверкаРеквизитов(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	// проверка совпадения сумм по т.ч. 
	Если ИспользоватьТехнологическиеОперации Тогда
		//Вместо СтруктураШапки.ОтражатьВУправленческомУчете и СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		//анализируем реквизит шапки - чтобы данные движения формировались независимо от функционала отложенного проведения
		Если ОтражатьВУправленческомУчете Тогда

			Если ТехнологическиеОперации.Итог("Сумма") <> Исполнители.Итог("СуммаКНачислению") Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоговые суммы к начислению по управленческому учету по табличным частям ""Тех. операции"" и ""Исполнители""!", Отказ, Заголовок);
			КонецЕсли;
			Если ТехнологическиеОперации.Итог("Сумма") <> РаспределениеТехнологическихОпераций.Итог("Сумма") Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоговые суммы по управленческому учету по табличным частям ""Тех. операции"" и ""Распределение тех.операций""!", , Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			Если ТехнологическиеОперации.Итог("СуммаРегл") <> Исполнители.Итог("СуммаКНачислениюРегл") Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоговые суммы к начислению по регламентированному учету по табличным частям ""Тех. операции"" и ""Исполнители""!", Отказ, Заголовок);
			КонецЕсли;
			Если ТехнологическиеОперации.Итог("СуммаРегл") <> РаспределениеТехнологическихОпераций.Итог("СуммаРегл") Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не совпадают итоговые суммы по регламентированному учету по табличным частям ""Тех. операции"" и ""Распределение тех.операций""!", , Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	/// Кунов О.В., 03.06.2014
	ДатаНачалаКонтроляВыпусков = Константы.ПРГ_ДатаНачалаКонтроляВыпусковВОтчетеПроизводства.Получить();
	Если ЗначениеЗаполнено(ДатаНачалаКонтроляВыпусков) И Дата >= ДатаНачалаКонтроляВыпусков Тогда
		КонтрольВыпусков(Отказ);
	КонецЕсли;
	///
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоВозвратнымОтходам, ТаблицаСписанияНаЗатраты);
	
	//Проверим заполнение счетов учета.
	//Проверка выполняется только для двух табличных частей: Продукция и ВозвратныеОтходы.
	//Для остальных табличных частей проверка выполняется в процедуре ПроверкаРеквизитов()
	//Продукция.СчетЗатратПолучатель также проверяется в процедуре ПроверкаРеквизитов()
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Продукция", 		ТаблицаПоПродукции, СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратныеОтходы", ТаблицаПоВозвратнымОтходам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//начало изменений БП 14
	//МояОбработка = ВнешниеОбработки.Создать("C:\Documents and Settings\aozhiganov\My Documents\1С\Проект УПП\ОтчетПроизводстваЗаСмену.epf");
	//СтруктураШапкиДокумента.Вставить("ДокОбъект",ЭтотОбъект);
	//МояОбработка.мУчетнаяПолитика        = мУчетнаяПолитика;         // (Общ)
	//МояОбработка.мУчетнаяПолитикаБух     = мУчетнаяПолитикаБух;      // (Регл)
	//МояОбработка.мУчетнаяПолитикаНал     = мУчетнаяПолитикаНал;		// (Нал)
	//МояОбработка.мПорядокСписанияПартий	 = мПорядокСписанияПартий;           // (Общ)
	//
	//МояОбработка .СформироватьДвиженияПоСырью(СтруктураШапкиДокумента, Отказ, Заголовок);
	//МояОбработка = Неопределено;
	
	//{26.01.2016 Островерхий заявка №46457 
	Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
		ПолныеПрава.ЗаписатьНаборЗаписейНаСервере("СвободныеОстатки", Ссылка,, "РегистрНакопления");
	КонецЕсли; 
	//26.01.2016 Островерхий}
	
	СтруктураШапкиДокумента.Вставить("ДокОбъект",ЭтотОбъект);
	СформироватьДвиженияПоСырью(СтруктураШапкиДокумента, Отказ, Заголовок);
	СтруктураШапкиДокумента.Удалить("ДокОбъект");
	//конец изменений БП 14
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции, ТаблицаПоВозвратнымОтходам,
							ТаблицаСписанияНаЗатраты, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()


/// Кунов О.В., 03.06.2014
Процедура КонтрольВыпусков(Отказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСменуВыпускПродукции.ДокументВыпуска.Подразделение,
	|	ОтчетПроизводстваЗаСменуВыпускПродукции.ДокументВыпуска.Ссылка КАК ДокументВыпуска
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.ВыпускПродукции КАК ОтчетПроизводстваЗаСменуВыпускПродукции
	|ГДЕ
	|	ОтчетПроизводстваЗаСменуВыпускПродукции.ДокументВыпуска.Подразделение <> &Подразделение
	|	И ОтчетПроизводстваЗаСменуВыпускПродукции.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ДоступнаРольПолныеПрава = РольДоступна("ПолныеПрава");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		#Если Клиент Тогда
			Сообщить("В табличной части ""Выпуск продукции"" обнаружены документы выпуска, в которых указано другое подразделение:");
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Сообщить(Строка(Выборка.ДокументВыпуска));
			КонецЦикла;
			Если Не ДоступнаРольПолныеПрава Тогда
				Сообщить("В проведении отказано.");
			КонецЕсли;
		#КонецЕсли
		Если Не ДоступнаРольПолныеПрава Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоПродукцииПоДокументамВыпуска = 0;
	Для Каждого ВыпускПродукцииСтрока Из ВыпускПродукции Цикл
		КоличествоПродукцииПоДокументамВыпуска = КоличествоПродукцииПоДокументамВыпуска + ВыпускПродукцииСтрока.ДокументВыпуска.Продукция.Итог("Количество");
	КонецЦикла;
	
	Если КоличествоПродукцииПоДокументамВыпуска <> Продукция.Итог("Количество") Тогда
		#Если Клиент Тогда
			Сообщить("Общее количество выпущенной продукции по документам выпуска не совпадает с количеством в отчете производства!");
			Если Не ДоступнаРольПолныеПрава Тогда
				Сообщить("В проведении отказано.");
			КонецЕсли;
		#КонецЕсли
		Если Не ДоступнаРольПолныеПрава Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
///


/// Кунов О.В., 05.03.2015 - 37066
Процедура КонтрольАктуальностиВерсийСпецификаций(Отказ)
	
	//СписокНомеклатуры = Новый Массив;
	//
	//Для Каждого СтрокаПродукции Из Продукция Цикл
	//	СписокНомеклатуры.Добавить(СтрокаПродукции.Номенклатура);
	//КонецЦикла;
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	ОсновныеСпецификацииНоменклатурыСрезПоследних.Номенклатура,
	//|	ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	//|	ВЫБОР
	//|		КОГДА (ОсновныеСпецификацииНоменклатурыСрезПоследних.Подразделение = &Подразделение) ИЛИ 
	//|			ТОГДА 1
	//|		КОГДА ОсновныеСпецификацииНоменклатурыСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	//|			ТОГДА 2
	//|		ИНАЧЕ 3
	//|	КОНЕЦ КАК Приоритет
	//|ПОМЕСТИТЬ втПриоритеты
	//|ИЗ
	//|	РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(&ДатаПолученияДанных, Номенклатура В (&СписокНоменклатуры)) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	втПриоритеты.Номенклатура,
	//|	МИНИМУМ(втПриоритеты.Приоритет) КАК Приоритет
	//|ПОМЕСТИТЬ втМинимальныеПриоритеты
	//|ИЗ
	//|	втПриоритеты КАК втПриоритеты
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	втПриоритеты.Номенклатура
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	втПриоритеты.Номенклатура,
	//|	втПриоритеты.СпецификацияНоменклатуры
	//|ИЗ
	//|	втПриоритеты КАК втПриоритеты
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМинимальныеПриоритеты КАК втМинимальныеПриоритеты
	//|		ПО втПриоритеты.Номенклатура = втМинимальныеПриоритеты.Номенклатура
	//|			И втПриоритеты.Приоритет = втМинимальныеПриоритеты.Приоритет");	
	//
	//Запрос.УстановитьПараметр("ДатаПолученияДанных", МоментВремени());
	//Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНомеклатуры);
	//Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	
	НомераСтрокСОшибками = Новый Массив;
	
	Для Каждого СтрокаПродукции Из Продукция Цикл
	//Пока Выборка.Следующий() Цикл
		//m_ionov@mail.ru 28.09.2016
		//Если спецификация полная и продукция побочная, то изменим проверку
		Если ЗначениеЗаполнено(СтрокаПродукции.Спецификация) 
			И СтрокаПродукции.Спецификация.ВидСпецификации = Перечисления.ВидыСпецификаций.Полная
			И СтрокаПродукции.Спецификация.ВыходныеИзделия.Количество() > 1 Тогда
			
			СтрокаВыходныхИзделий = СтрокаПродукции.Спецификация.ВыходныеИзделия.Найти(СтрокаПродукции.Номенклатура, "Номенклатура"); 
			Если Не СтрокаВыходныхИзделий = Неопределено
				И СтрокаПродукции.Спецификация.ВыходныеИзделия.Индекс(СтрокаВыходныхИзделий) > 0 Тогда
				//Это побочный продукт и он есть в спецификации
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//------- m_ionov@mail.ru -------
	
		//Спецификация = Выборка.СпецификацияНоменклатуры;
		Спецификация = ПРГ_ДопФункцииКлиентСервер.ОпределитьСпецификацию(СтрокаПродукции.Номенклатура, СтрокаПродукции.ХарактеристикаНоменклатуры, Дата, Подразделение);
		
		СтрокиПоНоменклатуре = Новый Массив;
		
		СтрокиПоНоменклатуре.Добавить(СтрокаПродукции);
		//Для Каждого СтрокаПоПродукции Из Продукция Цикл
		//	СтрокиПоНоменклатуре.Добавить(СтрокаПоПродукции);
		//КонецЦикла;		
		
		Для Каждого СтрокаПоМатериалам Из Материалы Цикл
			ВыходныеИзделия = СтрокаПоМатериалам.Спецификация.ВыходныеИзделия;
			Если ВыходныеИзделия.Количество() > 0 И ВыходныеИзделия[0].Номенклатура = СтрокаПродукции.Номенклатура Тогда
				СтрокиПоНоменклатуре.Добавить(СтрокаПоМатериалам);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаПоНоменклатуре Из СтрокиПоНоменклатуре Цикл
			Если СтрокаПоНоменклатуре.Спецификация <> Спецификация Тогда
				НомераСтрокСОшибками.Добавить(СтрокаПоНоменклатуре.НомерСтроки);
			КонецЕсли;
		КонецЦикла;
			
	КонецЦикла;
	
	ДоступнаРольПолныеПрава = РольДоступна("ПолныеПрава");
	
	Если НомераСтрокСОшибками.Количество() > 0 Тогда
		#Если Клиент Тогда
		Для Каждого НомерСтрокиСОшибкой Из НомераСтрокСОшибками Цикл
			Сообщить("В строке №" + НомерСтрокиСОшибкой + " указана неактуальная спецификация! Документ записывать нельзя.");
		КонецЦикла;
		#КонецЕсли
		Если Не ДоступнаРольПолныеПрава Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
///


// Процедура - обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 	
	
	//m_ionov@mail.ru 09.02.2017
	ДатаЗапускаМолочногоПроизводства = НачалоДня(Константы.МЗ_ДатаЗапускаМолочногоПроизводства.Получить());	
	НужноПроверитьСерии = Ложь;
	СерияИзВыпуска = Ложь;
	Если Дата > ДатаЗапускаМолочногоПроизводства
		И РежимЗаписи = РежимЗаписиДокумента.Проведение
		И Не ПараметрыСеанса.ПроведениеДокументов
		И ВидОперации = Перечисления.ВидыОперацийОтчетаПроизводстваЗаСмену.РаспределениеМатериаловНаВыпуск 
	//начало изменений Ожиганов А. 10.02.2017 проверка по сериям 		
		И Не РольДоступна("ПолныеПрава")
	//конец изменений 
		Тогда
		
		НужноПроверитьСерии = Истина;
	КонецЕсли;
	//Соберем таблицу по выпуску продукции
	//начало изменений Ожиганов А. 10.02.2017 проверка по сериям 
	//По шустрее будет ниже
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВыпускПродукцииПродукция.Номенклатура,
	                      |	ВыпускПродукцииПродукция.СерияНоменклатуры,
	                      |	ВыпускПродукцииПродукция.ХарактеристикаНоменклатуры
	                      |ИЗ
	                      |	Документ.ВыпускПродукции.Продукция КАК ВыпускПродукцииПродукция
	                      |ГДЕ
	                      |	ВыпускПродукцииПродукция.Ссылка В(&МассСсылка)");
	Запрос.УстановитьПараметр("МассСсылка",ВыпускПродукции.ВыгрузитьКолонку("ДокументВыпуска"));					  
	ТабПродукцияВыпуска = Запрос.Выполнить().Выгрузить();
	//конец изменений 
	//ТабПродукцияВыпуска = Новый ТаблицаЗначений;
	//ТабПродукцияВыпуска.Колонки.Добавить("Номенклатура");
	//ТабПродукцияВыпуска.Колонки.Добавить("ХарактеристикаНоменклатуры");
	//ТабПродукцияВыпуска.Колонки.Добавить("СерияНоменклатуры");
	Для каждого ДокВыпуска Из ВыпускПродукции Цикл
		
		Если Не ЗначениеЗаполнено(ДокВыпуска.ДокументВыпуска) Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаВыпуска Из ДокВыпуска.ДокументВыпуска.Продукция Цикл
		
			НоваяСтрокаВыпуска = ТабПродукцияВыпуска.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВыпуска, СтрокаВыпуска); 
		
		КонецЦикла; 	
	
	КонецЦикла; 
	//------- m_ionov@mail.ru -------
	// Заполним значениями по умолчанию незаполненные реквизиты табличной части "Продукция", влияющие на распределение
	Для Каждого СтрокаТЧ Из Продукция Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидВыпуска) Тогда
			СтрокаТЧ.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НаправлениеВыпуска) 
			И СтрокаТЧ.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда // Для услуг нельзя указывать "на склад"
			СтрокаТЧ.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаСклад;
		КонецЕсли;
		
		//m_ionov@mail.ru 02.02.2017
		//Так как появились полные спецификации, то при выпуске 2-х ПФ нужно чтобы была заполнена доля стоимости
		СтрокаТЧ.ДоляСтоимости = 1;
		//------- m_ionov@mail.ru -------
		
		//m_ionov@mail.ru 09.02.2017
		//Добавили проверку на заполненность серии номенклатуры
		
		Если СтрокаТЧ.Номенклатура.ВестиУчетПоСериям Тогда
			Если Дата > ДатаЗапускаМолочногоПроизводства
				И Не ЗначениеЗаполнено(СтрокаТЧ.СерияНоменклатуры) Тогда
				//Попробуем подставить серию из выпуска продукции
				СтрокиИзВыпуска = ТабПродукцияВыпуска.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",СтрокаТЧ.Номенклатура,СтрокаТЧ.ХарактеристикаНоменклатуры));
				Если СтрокиИзВыпуска.Количество() = 1 Тогда
					СтрокаТЧ.СерияНоменклатуры = СтрокиИзВыпуска[0].СерияНоменклатуры;
					СерияИзВыпуска = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НужноПроверитьСерии Тогда
				Если Не ЗначениеЗаполнено(СтрокаТЧ.СерияНоменклатуры) Тогда
					
					Если РольДоступна("ПолныеПрава") Тогда
						ОбщегоНазначения.СообщитьОбОшибке("В строке №" + СокрЛП(Продукция.Индекс(СтрокаТЧ) + 1) + " табличной части Продукция не заполнена серия номенклатуры", Ложь, "Проведение документа " + СокрЛП(ЭтотОбъект));
					Иначе
						ОбщегоНазначения.СообщитьОбОшибке("В строке №" + СокрЛП(Продукция.Индекс(СтрокаТЧ) + 1) + " табличной части Продукция не заполнена серия номенклатуры", Отказ, "Проведение документа " + СокрЛП(ЭтотОбъект));
					КонецЕсли;
				ИначеЕсли Не СерияИзВыпуска Тогда 
					Если ТабПродукцияВыпуска.Найти(СтрокаТЧ.СерияНоменклатуры, "СерияНоменклатуры") = Неопределено Тогда	
						Если РольДоступна("ПолныеПрава") Тогда
							ОбщегоНазначения.СообщитьОбОшибке("В строке №" + СокрЛП(Продукция.Индекс(СтрокаТЧ) + 1) +" табличной части Продукция указана серия номенклатуры, которой нет в документе выпуска", Ложь, "Проведение документа " + СокрЛП(ЭтотОбъект));
						Иначе
							ОбщегоНазначения.СообщитьОбОшибке("В строке №" + СокрЛП(Продукция.Индекс(СтрокаТЧ) + 1) +" табличной части Продукция указана серия номенклатуры, которой нет в документе выпуска", Отказ, "Проведение документа " + СокрЛП(ЭтотОбъект));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//------- m_ionov@mail.ru -------
		
	КонецЦикла;
	
	/// Кунов О.В., 05.03.2015 - 37066
	КонтрольАктуальностиВерсийСпецификаций(Отказ);
	///
	
	//начало изменений БП 14
	ДополнительныеДействияПередЗаписью(Отказ, РежимЗаписи, РежимПроведения);
	//конец изменений БП 14 
		
	Если АвтораспределениеМатериалов Тогда
		ЗаполнитьТаблицуРаспределенияМатериалов();
	КонецЕсли;

	Если АвтораспределениеПрочихЗатрат Тогда
		ЗаполнитьТаблицуРаспределенияПрочихЗатрат();
	КонецЕсли;
	
	Если АвтораспределениеВозвратныхОтходов Тогда
		ЗаполнитьТаблицуРаспределенияВозвратныхОтходов();
	КонецЕсли;
	
	Если АвтораспределениеТехнологическихОпераций Тогда
		ЗаполнитьТаблицуРаспределенияТехнологическихОпераций();
	КонецЕсли;
	
	Если Не мИспользоватьНаработку Тогда
		ИспользоватьНаработку = мИспользоватьНаработку;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете Тогда
		Для Каждого СтрокаТЧ Из Продукция Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатусПартии) Тогда
				СтрокаТЧ.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
			КонецЕсли;
			Если СтрокаТЧ.ЗаказРезерв <> неопределено И (СтрокаТЧ.Номенклатура.Услуга или 
				(ИспользоватьНаработку И СтрокаТЧ.ВидВыпуска = Перечисления.ВидыВыпуска.Наработка)) 
				 Тогда
				СтрокаТЧ.ЗаказРезерв = неопределено;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ВозвратныеОтходы Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатусПартии) Тогда
				СтрокаТЧ.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Материалы);
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Продукция");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Продукция", "ПараметрыВыпускаПродукции");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Продукция", "НаправленияСписания");
	
	Если Не ВводитьСтатьиЗатратПоСтрокам Тогда
		УправлениеПроизводством.ЗаполнитьСтатьюЗатратВСтрокахТабЧасти(ЭтотОбъект, Материалы);
		УправлениеПроизводством.ЗаполнитьСтатьюЗатратВСтрокахТабЧасти(ЭтотОбъект, РаспределениеМатериалов);
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

//начало изменений БП 14

Функция ПодготовитьТаблицуТоваровСписываемыхМатериалов(СтруктураШапкиДокумента, Отказ, Заголовок)
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              	, "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"              , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ВидНоменклатуры"              , "Номенклатура.ВидНоменклатуры");
	СтруктураПолей.Вставить("Услуга"                    	, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     	, "Номенклатура.Набор");
	//СтруктураПолей.Вставить("ВестиОперативныйУчетОстатковНЗП", "Номенклатура.ВестиОперативныйУчетОстатковНЗП");
	СтруктураПолей.Вставить("Количество"                	, "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"	, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         	, "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиУчетПоСериямВНЗП"         , "Номенклатура.ВестиУчетПоСериямВНЗП");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"   , "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("ВестиСкладскойУчетПоСериям"   , "Номенклатура.ВестиУчетПоСериям");
	СтруктураПолей.Вставить("Склад" 						, "Склад");
	СтруктураПолей.Вставить("ВидСклада"                     , "Склад.ВидСклада");
	//
	СтруктураПолей.Вставить("Качество"         				, "Качество");
//	СтруктураПолей.Вставить("ДокументРезерва"         		, "Заказ");
	СтруктураПолей.Вставить("Заказ"         				, "Заказ");
	//СтруктураПолей.Вставить("ВнутреннийЗаказ"         	, "ВнутреннийЗаказ");
	СтруктураПолей.Вставить("ЗаказСписания"         		, "Заказ");
	СтруктураПолей.Вставить("ЗаказПартии"         			, "ЗаказРезерв");
	СтруктураПолей.Вставить("ЗаказРезерв"         	        , "ЗаказРезерв");
	
	СтруктураПолей.Вставить("ДоговорКонтрагента"         	, "Заказ.ДоговорКонтрагента");
	//
	СтруктураПолей.Вставить("Затрата"              			, "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаЗатраты"			, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияЗатраты"         			, "СерияНоменклатуры");
	//
	СтруктураПолей.Вставить("СтатьяЗатрат"         			, "СтатьяЗатрат");
	//СтруктураПолей.Вставить("СтатьяЗатратНДС"         		, "СтатьяЗатратНДС");
	СтруктураПолей.Вставить("ХарактерЗатрат"      			, "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ВидЗатрат"      				, "СтатьяЗатрат.ВидЗатрат");
	СтруктураПолей.Вставить("СтатусМатериальныхЗатрат"      , "СтатьяЗатрат.СтатусМатериальныхЗатрат");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"         	, "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Продукция"         			, "Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукции"       , "ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияПродукции"         		, "СерияПродукции");
	
	//СтруктураПолей.Вставить("ОбъектСтроительства"         	, "ОбъектСтроительства");
	//СтруктураПолей.Вставить("СпособСтроительства"         	, "СпособСтроительства");
	//СтруктураПолей.Вставить("Проект"         				, "Проект");
	//
	СтруктураПолей.Вставить("ХарактеристикаНоменклатурыНовая", "ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияНоменклатурыНовая"        , "СерияПродукции");
	//СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей" , "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	//
	СтруктураПолей.Вставить("Комплект", 						"Номенклатура.Комплект");
	СтруктураПолей.Вставить("ВидРасходовНУ",    				"СтатьяЗатрат.ВидРасходовНУ");
	
	СтруктураОбрабатываемыхКолонок = Новый Структура();
	СтруктураЗависимыхКолонок = Новый Структура();
	//ДополнитьСтруктуруПолейДаннымиНоменклатуры(СтруктураПолей, СтруктураОбрабатываемыхКолонок, СтруктураЗависимыхКолонок);
	
	//ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

				СтруктураПолей.Вставить("Счет", 		"СчетУчетаБУ");
				СтруктураПолей.Вставить("СчетЗабалансовый",	"СчетУчетаБУ.Забалансовый");
				СтруктураПолей.Вставить("СчетНУ", 		"СчетУчетаНУ");
				
				СтруктураПолей.Вставить("СчетУчетаБУ", 	"СчетУчетаБУ");
				СтруктураПолей.Вставить("СчетУчетаНУ",  "СчетУчетаНУ");
				СтруктураПолей.Вставить("СчетЗатрат", 	"СчетЗатрат");
				СтруктураПолей.Вставить("СчетЗатратБУ", "СчетЗатрат");
				СтруктураПолей.Вставить("СчетЗатратНУ", "СчетЗатратНУ");
				
				СтруктураПолей.Вставить("КорСчетБУ", 	"СчетЗатрат");
				СтруктураПолей.Вставить("КорСчетНУ", 	"СчетЗатратНУ");
		
	КонецЕсли;	
	
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(СтруктураШапкиДокумента.ДокОбъект, "РаспределениеМатериалов", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	//ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаМатериалов  = РезультатЗапросаПоТоварам.Выгрузить();
	//РезультатЗапросаПоТоварам.Выгрузить().ВыбратьСтроку();
	//ТаблицаПоТоварам.ВыбратьСтроку();
	ТаблицаМатериалов .Колонки.Добавить("ДокументРезерва");
	ТаблицаМатериалов .Колонки.Добавить("ВнутреннийЗаказ");
	//ТаблицаМатериалов .Колонки.Добавить("ЗаказСписания");
	
	ТаблицаМатериалов .Колонки.Добавить("ОбъектСтроительства");
	ТаблицаМатериалов .Колонки.Добавить("СпособСтроительства");
	ТаблицаМатериалов .Колонки.Добавить("Проект");
	
	
	СтруктураШапкиДокумента.Вставить("ВедениеУчетаПоПроектам",Ложь);
	
	
	ТаблицаМатериалов .Колонки.Добавить("Субконто1");
	ТаблицаМатериалов .Колонки.Добавить("Субконто2");
	ТаблицаМатериалов .Колонки.Добавить("Субконто3");
	
	ТаблицаМатериалов .Колонки.Добавить("СубконтоНУ1");
	ТаблицаМатериалов .Колонки.Добавить("СубконтоНУ2");
	ТаблицаМатериалов .Колонки.Добавить("СубконтоНУ3");
	
	ТаблицаМатериалов .Колонки.Добавить("КорСубконтоБУ1");
	ТаблицаМатериалов .Колонки.Добавить("КорСубконтоБУ2");
	ТаблицаМатериалов .Колонки.Добавить("КорСубконтоБУ3");
	
	ТаблицаМатериалов .Колонки.Добавить("КорСубконтоНУ1");
	ТаблицаМатериалов .Колонки.Добавить("КорСубконтоНУ2");
	ТаблицаМатериалов .Колонки.Добавить("КорСубконтоНУ3");
	
	
	Для каждого ТекСтрока Из  ТаблицаМатериалов Цикл 
		
		ТекСтрока.Субконто1 	=  СтруктураШапкиДокумента.ДокОбъект.ПодразделениеОрганизации;
		ТекСтрока.Субконто2 	=  ТекСтрока.НоменклатурнаяГруппа;
		ТекСтрока.Субконто3 	=  ТекСтрока.СтатьяЗатрат;
		
		ТекСтрока.СубконтоНУ1 	= ТекСтрока.Субконто1;
		ТекСтрока.СубконтоНУ2 	= ТекСтрока.Субконто2;
		ТекСтрока.СубконтоНУ3 	= ТекСтрока.Субконто3;
		
		ТекСтрока.КорСубконтоБУ1 	= ТекСтрока.Субконто1;
		ТекСтрока.КорСубконтоБУ2 	= ТекСтрока.Субконто2;
		ТекСтрока.КорСубконтоБУ3 	= ТекСтрока.Субконто3;
		
		ТекСтрока.КорСубконтоНУ1 	= ТекСтрока.Субконто1;
		ТекСтрока.КорСубконтоНУ2 	= ТекСтрока.Субконто2;
		ТекСтрока.КорСубконтоНУ3 	= ТекСтрока.Субконто3;
		
	КонецЦикла;	
	
	// УДАЛИМ ВОДУ
	
	ВидНоменклатураВода = Константы.ПРГ_ВидНоменклатурыВода.Получить();
	
	Если ЗначениеЗаполнено(ВидНоменклатураВода) тогда
		к = 0;
		Пока к < ТаблицаМатериалов.Количество() Цикл
			Если ТаблицаМатериалов[к].ВидНоменклатуры  = ВидНоменклатураВода Тогда
				ТаблицаМатериалов.Удалить(ТаблицаМатериалов[к]);
			КонецЕсли;	
			к = к + 1;
		КонецЦикла;	
	КонецЕсли;	
 	
	// ТаблицаМатериалов .ВыбратьСтроку();
	возврат ТаблицаМатериалов;
	
КонецФункции
			
Процедура ЗаполнитьКолонкиРегистраСписанныеМатериалыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Подразделение,									"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВУправленческомУчете,						"ОтражатьВУправленческомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,		"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,	"ДопустимыйСтатус3");
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
		
		Если СтрокаТЧ.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			Строка.ДопустимыйСтатус2 = Перечисления.СтатусыПартийТоваров.ВПереработку;
		Иначе
			Строка.ДопустимыйСтатус2 = Перечисления.СтатусыПартийТоваров.Купленный;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеМатериалыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации,								"ПодразделениеОрганизации");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,                							"Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, 	"ОтражатьВБухгалтерскомУчете");
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
		
		ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТЧ.СчетЗатратБУ, СтрокаТЧ.СтатьяЗатрат);
		ХарактерЗатратНУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТЧ.СчетЗатратНУ, СтрокаТЧ.СтатьяЗатрат, "Налоговый");
		
		Если ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			Строка.КорСубконтоБУ1 = Строка.ОбъектСтроительства;
			Строка.КорСубконтоБУ2 = Строка.СтатьяЗатрат;
			Строка.КорСубконтоБУ3 = СтрокаТЧ.СпособСтроительства;
		ИначеЕсли ХарактерЗатратБУ <> Перечисления.ХарактерЗатрат.Прочие Тогда
			Строка.КорСубконтоБУ1 = Неопределено;
			Строка.КорСубконтоБУ2 = Неопределено;
			Строка.КорСубконтоБУ3 = Неопределено;
		КонецЕсли;
		
		Если ХарактерЗатратНУ <> Перечисления.ХарактерЗатрат.Прочие Тогда
			Строка.КорСубконтоНУ1 = Неопределено;
			Строка.КорСубконтоНУ2 = Неопределено;
			Строка.КорСубконтоНУ3 = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл()
			
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = СтруктураШапкиДокумента.ДокОбъект.Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
		УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам),
		ТаблицаДвижений,
		Истина);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, "ОтражатьВНалоговомУчете");
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		ПРГСтатьяЗатрат = Строка.СтатьяЗатрат;
		ПРГХарактерЗатрат = ПРГСтатьяЗатрат.ХарактерЗатрат;
		
		Если ПРГХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеПартийВПроизводствоОперативно;
		ИначеЕсли ПРГХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаБрак;
		ИначеЕсли ПРГХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаВложенияВоВнеоборотныеАктивы;
		Иначе
			Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеНаЗатраты;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			Строка.ОтражатьВНалоговомУчете = Истина;
			Строка.СчетУчетаНУ = Строка.СчетУчетаБУ;
		КонецЕсли;
		
		Если ПРГХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы 
		 И Строка.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
      		Строка.ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;
		
		Если ПРГХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			Строка.КорСубконтоБУ1 = Строка.ОбъектСтроительства;
			Строка.КорСубконтоБУ2 = СтатьяЗатрат;
			Строка.КорСубконтоБУ3 = ТаблицаПоТоварам[Строка.НомерСтроки].СпособСтроительства;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Товары,   	  	"ВидТабличнойЧасти");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,   											"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, 											"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, 											"Активность");

	ЗаполнитьКолонкиРегистраСписанныеМатериалыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ЗаполнитьКолонкиРегистраСписанныеМатериалыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	КонецЕсли;
	
	ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений(ТаблицаДвижений, "НомерСтрокиДокумента");
	
	НаборДвижений.мПериод          = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если НЕ Отказ Тогда
		СтруктураШапкиДокумента.ДокОбъект.Движения.СписанныеТовары.ВыполнитьДвижения();
		СтруктураШапкиДокумента.ДокОбъект.Движения.СписанныеТовары.Записать();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

Процедура ДвиженияПоРегиструТоварыОрганизацийМатериалы(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	
	//начало изменений Ожиганов 10.09.2015 немного оптимизируем  
	//НаборДвижений = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
	//НаборДвижений .Отбор.Регистратор.Значение 	  =  СтруктураШапкиДокумента.Ссылка;
	//НаборДвижений .Отбор.Регистратор.Использование = Истина;
	НаборДвижений  = Движения.ТоварыОрганизаций;
	//конец изменений 
	

	// Проверка остатков при оперативном проведении.
	НаборДвижений.КонтрольОстатков(СтруктураШапкиДокумента.ДокОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

	Если Не Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварам);
						
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
							
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", СтруктураШапкиДокумента.Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		
		Если НЕ СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
		КонецЕсли;
								
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, СтруктураШапкиДокумента.Дата);
		//начало изменений Ожиганов 10.09.2015 немного оптимизируем  
		//НаборДвижений.Записать(Ложь);
		//конец изменений 
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()


Процедура ДвиженияПоРегистрамУпрМатериалы(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, УчетнаяПолитика, Отказ, Заголовок)

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидСписанияМПЗ <> Перечисления.ВидыСписанияМПЗ.СписыватьСоСклада  Тогда
		 возврат;
	КонецЕсли;	
	 
	 Если ТаблицаПоТоварам.Количество() = 0 Тогда
		возврат;
	 КонецЕслИ;	 

	//Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
	//	МассивСерий = Новый Массив;
	//	Для Каждого СтрокаТЧ Из Материалы Цикл
	//		Если ЗначениеЗаполнено(СтрокаТЧ.СтатьяЗатрат)
	//			  И СтрокаТЧ.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
	//			МассивСерий.Добавить(СтрокаТЧ.СерияНоменклатуры);
	//		КонецЕсли;
	//	КонецЦикла;
	//	УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( МассивСерий, Дата, Отказ, Заголовок);
	//КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	  //РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
	  //				 Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый));

	//Если Не РезультатЗапроса.Пустой() Тогда
	
	//начало изменений Ожиганов 10.09.2015 немного оптимизируем  
		//НаборДвижений = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		//НаборДвижений .Отбор.Регистратор.Значение =   СтруктураШапкиДокумента.Ссылка;
		//НаборДвижений .Отбор.Регистратор.Использование = Истина;
		НаборДвижений  = Движения.ТоварыНаСкладах;
	//конец изменений 
		
		// Контроль остатков товара
		Если НЕ ИспользоватьРегистрСвободныеОстатки Тогда
			Если СтруктураШапкиДокумента.ИспользоватьМатериалы и   СтруктураШапкиДокумента.АвтораспределениеМатериалов Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			Иначе
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("РаспределениеМатериалов", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;	
		КонецЕсли;

		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварам);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, СтруктураШапкиДокумента.Дата);
			
			//начало изменений Ожиганов 10.09.2015 немного оптимизируем  
			//НаборДвижений.Записать(Ложь);
			//конец изменений 
		КонецЕсли;
		
	// Если есть списание из резерва, то надо списать резерв
    ТаблицаПоТоварамИзРезерва = ТаблицаПоТоварам.Скопировать();
    Сч = 0;
    Пока Сч < ТаблицаПоТоварамИзРезерва.Количество() Цикл
    	СтрокаТаблицы = ТаблицаПоТоварамИзРезерва.Получить(Сч);
    	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказРезерв) Тогда
    		 ТаблицаПоТоварамИзРезерва.Удалить(СтрокаТаблицы);
    	Иначе 
    		Сч = Сч + 1;
    		СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.Заказ;
    	КонецЕсли; 
	КонецЦикла;
	
   	
    Если ТаблицаПоТоварамИзРезерва.Количество() > 0 Тогда
    
    	НаборДвижений = СтруктураШапкиДокумента.ДокОбъект.Движения.ТоварыВРезервеНаСкладах;

    	// Контроль остатков товара
		Если СтруктураШапкиДокумента.ДокОбъект.Материалы.Количество() <> 0 Тогда
			_ДокОбъект = Неопределено;
			Если СтруктураШапкиДокумента.Свойство("ДокОбъект",_ДокОбъект) Тогда
				СтруктураШапкиДокумента.Удалить("ДокОбъект");
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ИспользоватьМатериалы и   СтруктураШапкиДокумента.АвтораспределениеМатериалов Тогда
    			ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			Иначе
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("РаспределениеМатериалов", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			СтруктураШапкиДокумента.Вставить("ДокОбъект",_ДокОбъект); 
    	КонецЕсли;
    	
    	Если Не Отказ Тогда
    	
    		СтруктТаблицДокумента = Новый Структура;
    		СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварамИзРезерва);
    			
    		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
    			
    		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, СтруктураШапкиДокумента.Дата);
    		
    	КонецЕсли;
    	
    КонецЕсли;
  //  
  //  УчетЗатратПоЗаказамНаПроизводство = мУчетнаяПолитика.УчетЗатратПоЗаказамНаПроизводство;
  //  
  //  // ТОВАРЫ ПО РЕГИСТРУ МатериалыВПроизводстве.
  //  НаборДвижений = Движения.МатериалыВПроизводстве;
  //  
  //  ТаблицаПоТоварамОперативныйУчет = ТаблицаПоТоварам.Скопировать();
  //  
  //  ИспользоватьЗаказыНаПроизводство = УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();
  //  
  //  КолвоЭлементов = ТаблицаПоТоварамОперативныйУчет.Количество();
  //  Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
  // 		СтрокаТаблицы = ТаблицаПоТоварамОперативныйУчет[КолвоЭлементов - ОбратныйИндекс];
  //
  //  	Если Не СтрокаТаблицы.ВестиОперативныйУчетОстатковНЗП 
  //  	 ИЛИ СтрокаТаблицы.ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
  //			ТаблицаПоТоварамОперативныйУчет.Удалить(СтрокаТаблицы);
  //  	Иначе
  //  		Если Не СтрокаТаблицы.ВестиУчетПоСериямВНЗП Тогда
  //  			СтрокаТаблицы.СерияЗатраты = Справочники.СерииНоменклатуры.ПустаяСсылка();
  //  		КонецЕсли;
  //  		СтрокаТаблицы.Заказ = УправлениеПроизводством.ПолучитьЗаказДляУчетаЗатрат(СтрокаТаблицы.Заказ, , УчетЗатратПоЗаказамНаПроизводство, ИспользоватьЗаказыНаПроизводство);
  //  	КонецЕсли;

  //  КонецЦикла;
  //  
  //  Если ТаблицаПоТоварамОперативныйУчет.Количество() > 0 И НЕ Отказ Тогда

  //  	СтруктТаблицДокумента = Новый Структура;
  //  	СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварамОперативныйУчет);
  //  			
  //  	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
  //  		
  //  	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение", Подразделение);
  //  	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации",   Перечисления.КодыОперацийМатериалыВПроизводстве.СписаниеПартийВПроизводствоОперативно);
  //  			
  //  	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
  //  		
  //  КонецЕсли;
  //  
  //  Если Не глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументов
  //	 И Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
  //	 И НЕ Отказ
  //  Тогда
  //  	
  //  	ТаблицаПоТоварамНЗП = ТаблицаПоТоварам.Скопировать();
  //  	
  //  	ИспользоватьЗаказыНаПроизводство = УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();
  //  
  //  	КолвоЭлементов = ТаблицаПоТоварамНЗП.Количество();
  //  	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
  //	 		СтрокаТаблицы = ТаблицаПоТоварамНЗП[КолвоЭлементов - ОбратныйИндекс];
  //	
  //	 		Если СтрокаТаблицы.ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
  //				ТаблицаПоТоварамНЗП.Удалить(СтрокаТаблицы);
  //  		Иначе
  //  			Если Не СтрокаТаблицы.ВестиУчетПоСериямВНЗП Тогда
  //  				СтрокаТаблицы.СерияЗатраты = Справочники.СерииНоменклатуры.ПустаяСсылка();
  //  			КонецЕсли;
  //  			СтрокаТаблицы.Заказ = УправлениеПроизводством.ПолучитьЗаказДляУчетаЗатрат(СтрокаТаблицы.Заказ, , УчетЗатратПоЗаказамНаПроизводство, ИспользоватьЗаказыНаПроизводство);
  //  		КонецЕсли;

  //  	КонецЦикла;
  //  	
  //  	// ПРИХОД ТОВАРОВ ПО РЕГИСТРУ НезавершенноеПроизводство.
  //  	НаборДвижений = Движения.НезавершенноеПроизводство;
  //  	
  //  	СтруктТаблицДокумента = Новый Структура;
  //  	СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварамНЗП);
  //  			
  //  	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
  //  		
  //  	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение", Подразделение);
  //  	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации",   Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеКоличестваВПроизводствоОперативно);
  //  	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СписаниеПартий",Истина);
  //  			
  //  	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

  //  КонецЕсли;
  //  
  //  // Движения по регистру ЛимитноЗаборныеКарты.
  //  Если УправлениеПроизводством.ИспользоватьЛимитыОтпускаМатериалов() Тогда
  //  	
  //  	РезультатЗапросаЛимиты = УправлениеПроизводством.СформироватьЗапросЛимитыОтпускаМатериаловПоТабличнойЧасти(ЭтотОбъект);
  //  		
  //  	Если НЕ РезультатЗапросаЛимиты.Пустой() Тогда
  //  		
  //  		НаборДвижений = Движения.ЛимитноЗаборныеКарты;
  //  		ТаблицаДвижений = НаборДвижений.Выгрузить();

  //  		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
  //  			РезультатЗапросаЛимиты.Выгрузить(), 
  //  			ТаблицаДвижений);

  //  		Если Не СтруктураШапкиДокумента.РазрешитьПревышениеЛимита Тогда
  //  			ТаблицаДвижений.ЗаполнитьЗначения(0, "ОтпущеноСверхЛимита");
  //  		КонецЕсли;
  //  	
  //  		НаборДвижений.мПериод            = Дата;
  //  		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

  //  		// Проверка лимитов при проведении.
  //  		НаборДвижений.КонтрольЛимитов(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок);
  //  					
  //  		Если Не Отказ Тогда
  //  			Движения.ЛимитноЗаборныеКарты.ДобавитьДвижение();
  //  		КонецЕсли;
  //  		
  //  	КонецЕсли;
  //  	
  //  КонецЕсли;
  //  
	//// Движение по внутренним заказам
	//ДопПараметры = Новый Структура;
	//ДопПараметры.Вставить("ИмяТабЧасти",       "Материалы");
	//ДопПараметры.Вставить("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
	//ДопПараметры.Вставить("РежимПроведения",   РежимПроведения);
	//ДопПараметры.Вставить("ИмяРеквизитаЗаказ", "ВнутреннийЗаказ");
	//ДопПараметры.Вставить("ЗаказВШапке",       Ложь);
	//
	//ТабИсходная = ТаблицаПоТоварам.Скопировать();
		
	//ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.Купленный);
	//Если ТабИсходная.Количество() > 0 Тогда
	//	УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	//КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ПроверитьЗаполнениеТабЧастиРаспрМатериалы(СтруктураШапкиДокумента, ТаблицаМатериалов, Отказ, Заголовок)
	
	Если Отказ Тогда
		возврат;
	КонецЕсли;	
	
	Для Каждого ТекСтрока Из ТаблицаМатериалов Цикл
		Если ТекСтрока.ВестиСкладскойУчетПоСериям Тогда
			Если Не ЗначениеЗаполнено(ТекСтрока.СерияЗатраты) Тогда
				 ОбщегоНазначения.СообщитьОбОшибке("Не заполнена серия для номенклатуры " + ТекСтрока.Номенклатура, Отказ, Заголовок);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура СформироватьДвиженияПоСырью(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт;
	                                 
	
	Если СтруктураШапкиДокумента.ВидСписанияМПЗ <> Перечисления.ВидыСписанияМПЗ.СписыватьСоСклада Тогда
		возврат;
	КонецЕсли;	
	
	ИспользоватьРегистрСвободныеОстатки = глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки");
	
	ТаблицаМатериалов = ПодготовитьТаблицуТоваровСписываемыхМатериалов(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабЧастиРаспрМатериалы(СтруктураШапкиДокумента, ТаблицаМатериалов, Отказ, Заголовок);
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаМатериалов, Отказ, Заголовок);
	
	СтруктураШапкиДокумента.Вставить("ОтладочныйРежим",Истина);

	ДвиженияПоРегистрамУпрМатериалы(РежимПроведенияДокумента.Оперативный , СтруктураШапкиДокумента, ТаблицаМатериалов, мУчетнаяПолитика, Отказ, Заголовок);
	ДвиженияПоРегиструТоварыОрганизацийМатериалы(РежимПроведенияДокумента.Оперативный, СтруктураШапкиДокумента, ТаблицаМатериалов, Отказ, Заголовок);
	

	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	Если ПРГ_ДопФункцииКлиентСервер.ПРГПроводитьПоПартиям(СтруктураШапкиДокумента) Тогда	
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента.ДокОбъект.Движения.СписанныеТовары.Выгрузить());
		СтруктураШапкиДокумента.ДокОбъект.Движения.ПартииТоваровНаСкладахБухгалтерскийУчет.Записать(Ложь);
	КонецЕсли;	
	
	Если ИспользоватьРегистрСвободныеОстатки И СтруктураШапкиДокумента.ИспользоватьМатериалы
			И СтруктураШапкиДокумента.ДокОбъект.Материалы.Количество() <> 0 
			И НЕ Отказ 
			Тогда
			Если глЗначениеПеременной("ИспользоватьБлокировкуДанных")  Тогда
					СтруктураШапкиДокумента.ДокОбъект.Движения.СвободныеОстатки.БлокироватьДляИзменения = Истина;
			КонецЕсли;
			СтруктураШапкиДокумента.ДокОбъект.Движения.Записать();
			Если   СтруктураШапкиДокумента.АвтораспределениеМатериалов Тогда
				РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
				"Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведенияДокумента.Оперативный);
			Иначе
				РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
				"РаспределениеМатериалов", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведенияДокумента.Оперативный);
			КонецЕсли;	
	КонецЕсли;

	                                                       
	//Сообщить("ТУТВ");

КонецПроцедуры
 
Процедура ДополнительныеДействияПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//начало изменений БП 14
	//ИзменитьЗаказПерерабочика();
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения или Отказ Тогда
		возврат;
	КонецЕслИ;	
		
	КачествоНовый = Справочники.Качество.Новый;
	
	ДокОбъект = ЭтотОбъект;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВспомогТаблица.НомерСтрокиДокумента,
	                      |	ВспомогТаблица.Номенклатура,
	                      |	ВспомогТаблица.СчетУчетаБУ,
	                      |	ВспомогТаблица.НоменклатурнаяГруппа
	                      |ПОМЕСТИТЬ ВспомогТаблица
	                      |ИЗ
	                      |	&ВспомогТаблица КАК ВспомогТаблица
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВспомогТаблица.НомерСтрокиДокумента,
	                      |	ВспомогТаблица.Номенклатура,
	                      |	ВспомогТаблица.СчетУчетаБУ,
	                      |	ВспомогТаблица.НоменклатурнаяГруппа,
	                      |	Ном.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаНоменклатуры,
	                      |	Ном.ВидНоменклатуры
	                      |ИЗ
	                      |	ВспомогТаблица КАК ВспомогТаблица
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Ном
	                      |		ПО ВспомогТаблица.Номенклатура = Ном.Ссылка");
						  
	ВспомогТаблица = ДокОбъект.Продукция.Выгрузить(,"НомерСтроки,Номенклатура,Счет,НоменклатурнаяГруппа,НаправлениеВыпуска");
	к = 0;
	Пока к < ВспомогТаблица.Количество()-1 Цикл
		Если ВспомогТаблица[к].НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаСклад Тогда
			ВспомогТаблица.Удалить(ВспомогТаблица[к]);
		Иначе
		    к = к +1;
		КонецЕсли;	
	КонецЦикла;	
	ВспомогТаблица.Колонки.НомерСтроки.Имя ="НомерСтрокиДокумента";
	ВспомогТаблица.Колонки.Счет.Имя ="СчетУчетаБУ";
	Запрос.УстановитьПараметр("ВспомогТаблица",ВспомогТаблица);
	
	ВидНоменклатурыГПИзДавальческогосырья   = Константы.ПРГ_ВидНоменклатурыПродукцияИЗДавальческогоСырья.Получить();
	ЗначениеЗаполненоГПИзДавСырья   		= ЗначениеЗаполнено(ВидНоменклатурыГПИзДавальческогосырья);
	СчетБУПроизводствоИзДавальческогоСырья   =ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекСтрока = ДокОбъект.Продукция[Выборка.НомерСтрокиДокумента-1];
		Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатурнаяГруппа) и  АвтораспределениеМатериалов Тогда
			ТекСтрока.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппаНоменклатуры;
		КонецЕслИ;	
		
		Если ДокОбъект.ИспользоватьЗаказПереработчика Тогда
			ЗаполнятьЗаказы = Ложь;
			Если ЗначениеЗаполненоГПИзДавСырья Тогда
				ЗаполнятьЗаказы = ЗначениеЗаполненоГПИзДавСырья и (Выборка.ВидНоменклатуры = ВидНоменклатурыГПИзДавальческогосырья);
			КонецЕсли;	
			Если Не ЗаполнятьЗаказы и ДокОбъект.ОтражатьВБухгалтерскомУчете тогда
				 ЗаполнятьЗаказы =  Выборка.СчетУчетаБУ = СчетБУПроизводствоИзДавальческогоСырья;
			КонецЕсли;	                                            
			
			Если ЗаполнятьЗаказы Тогда
				ТекСтрока.Заказ         =  ДокОбъект.ЗаказПереработчика;
				ТекСтрока.ЗаказРезерв	 = ДокОбъект.ЗаказПереработчика;
			КонецЕсли;	
		КонецЕслИ;	
		
	КонецЦикла;	
	
	
	//для давальческого сырья заполним поле заказ резерв
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВсмомгатТаблица.НомерСтроки КАК НомерСтрокиДокумента,
	               |	ВсмомгатТаблица.Номенклатура,
	               |	ВсмомгатТаблица.СчетУчетаБУ КАК СчетУчета,
	               |	ВсмомгатТаблица.СтатьяЗатрат
	               |ПОМЕСТИТЬ ВпомогТаблица
	               |ИЗ
	               |	&ВсмомгатТаблица КАК ВсмомгатТаблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВпомогТаблица.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	               |	ВпомогТаблица.Номенклатура КАК Номенклатура,
	               |	ВпомогТаблица.СчетУчета,
	               |	Ном.ВидНоменклатуры,
	               |	Хозр.Забалансовый КАК СчетУчетаЗабалансовый,
	               |	ВЫБОР
	               |		КОГДА Ном.СтатьяЗатрат = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.Пустаяссылка)
	               |			ТОГДА ВпомогТаблица.СтатьяЗатрат
	               |		ИНАЧЕ Ном.СтатьяЗатрат
	               |	КОНЕЦ КАК СтатьяЗатрат
	               |ИЗ
	               |	ВпомогТаблица КАК ВпомогТаблица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Ном
	               |		ПО ВпомогТаблица.Номенклатура = Ном.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозр
	               |		ПО ВпомогТаблица.СчетУчета = Хозр.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтрокиДокумента";
				   
				   
	//ИмяТабЧасти  =  ?(АвтораспределениеМатериалов,"Материалы","РаспределениеМатериалов");
	ВсмомгатТаблица = ЭтотОбъект["Материалы"].Выгрузить(,"НомерСтроки,Номенклатура,СчетУчетаБУ,СтатьяЗатрат");
	Запрос.УстановитьПараметр("ВсмомгатТаблица",ВсмомгатТаблица);
  	РезТаблицаМат = Запрос.Выполнить().Выгрузить();
	
	ВсмомгатТаблица = ЭтотОбъект["РаспределениеМатериалов"].Выгрузить(,"НомерСтроки,Номенклатура,СчетУчетаБУ,СтатьяЗатрат");
	Запрос.УстановитьПараметр("ВсмомгатТаблица",ВсмомгатТаблица);
  	РезТаблицаРаспр = Запрос.Выполнить().Выгрузить();
	
	
	
	
	ВидНоменклатурыДавальческоеСырье = Константы.ПРГ_ВидНоменклатурыДавальческоеСырье;	
	
	ПустойЗаказ 			=  Документы.ЗаказПокупателя.ПустаяСсылка();
	
	ЗаполнятьЗаказРезерв =  ВидСписанияМПЗ = Перечисления.ВидыСписанияМПЗ.СписыватьСоСклада;
	
	ПерезапСтатью = Истина; // Не РольДоступна("ПолныеПрава");
	
	для каждого ТекСтрока Из Материалы Цикл
		ТекСтрока.Склад = СкладМатериалов;
		
		ТекСтрока.ЗаказРезерв	= ПустойЗаказ;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Качество) Тогда
			ТекСтрока.Качество = КачествоНовый;
		КонецЕсли;	
		
		НайдСтрока = РезТаблицаМат.Найти(ТекСтрока.НомерСтроки,"НомерСтрокиДокумента");
		Если  ПерезапСтатью и НайдСтрока <> Неопределено  Тогда
			 ТекСтрока.СтатьяЗатрат  = НайдСтрока.СтатьяЗатрат;
		КонецЕсли;	
		
		Если АвтораспределениеМатериалов Тогда
				
				Если НайдСтрока <> Неопределено Тогда
					Если ИспользоватьЗаказПереработчика Тогда
						Если ОтражатьВБухгалтерскомУчете Тогда
							Если НайдСтрока.СчетУчетаЗабалансовый 
							 или НайдСтрока.ВидНоменклатуры = ВидНоменклатурыДавальческоеСырье Тогда
							 	  ТекСтрока.Заказ 		=  ЗаказПереработчика;
							 КонецЕсли;	
						 ИначеЕсли НайдСтрока.ВидНоменклатуры = ВидНоменклатурыДавальческоеСырье Тогда
						   	  ТекСтрока.Заказ 		=  ЗаказПереработчика;
						 КонецЕсли;	
					КонецЕслИ;	
					
					Если ВидСписанияМПЗ = Перечисления.ВидыСписанияМПЗ.СписыватьСоСклада
						Тогда
							Если ОтражатьВБухгалтерскомУчете Тогда
								Если НайдСтрока.СчетУчетаЗабалансовый 
								 или НайдСтрока.ВидНоменклатуры = ВидНоменклатурыДавальческоеСырье Тогда
								      ТекСтрока.ЗаказРезерв	=  ТекСтрока.Заказ;
								 КонецЕсли;	
							 ИначеЕсли НайдСтрока.ВидНоменклатуры = ВидНоменклатурыДавальческоеСырье Тогда
								 ТекСтрока.ЗаказРезерв	=  ТекСтрока.Заказ;
							КонецЕсли;	
						КонецЕсли;	
				  КонецЕсли;			
		КонецЕсли;	
	КонецЦикла;	
	
	для каждого ТекСтрока Из РаспределениеМатериалов Цикл
		ТекСтрока.Склад = СкладМатериалов;
		Если Не ЗначениеЗаполнено(ТекСтрока.Качество) Тогда
			ТекСтрока.Качество = КачествоНовый;
		КонецЕсли;	
		НайдСтрока = РезТаблицаРаспр.Найти(ТекСтрока.НомерСтроки,"НомерСтрокиДокумента");
		Если ПерезапСтатью и НайдСтрока <> Неопределено  Тогда
					ТекСтрока.СтатьяЗатрат  = НайдСтрока.СтатьяЗатрат;
		КонецЕсли;	
		
		Если Не АвтораспределениеМатериалов
			и ВидСписанияМПЗ = Перечисления.ВидыСписанияМПЗ.СписыватьСоСклада Тогда
			
			Если НайдСтрока <> Неопределено Тогда
				
				Если ИспользоватьЗаказПереработчика Тогда
					Если ОтражатьВБухгалтерскомУчете Тогда
						Если НайдСтрока.СчетУчетаЗабалансовый 
						 или НайдСтрока.ВидНоменклатуры = ВидНоменклатурыДавальческоеСырье Тогда
						 	  ТекСтрока.Заказ 		=  ЗаказПереработчика;
						 КонецЕсли;	
					 ИначеЕсли НайдСтрока.ВидНоменклатуры = ВидНоменклатурыДавальческоеСырье Тогда
					   	  ТекСтрока.Заказ 		=  ЗаказПереработчика;
					 КонецЕсли;	
				КонецЕслИ;	

				Если ОтражатьВБухгалтерскомУчете Тогда
					Если НайдСтрока.СчетУчетаЗабалансовый 
					 или НайдСтрока.ВидНоменклатуры = ВидНоменклатурыДавальческоеСырье Тогда
					      ТекСтрока.ЗаказРезерв	=  ТекСтрока.Заказ;
					 КонецЕсли;	
				ИначеЕсли НайдСтрока.ВидНоменклатуры = ВидНоменклатурыДавальческоеСырье Тогда
					 ТекСтрока.ЗаказРезерв	=  ТекСтрока.Заказ;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕслИ;	
	КонецЦикла;	
	//конец изменений БП 14 
КонецПроцедуры	

Процедура ПрверитьТабличнуюЧастьПоМатериалам(ДокОбъект,Отказ,Заголовок,ИмяТабличнойЧасти,
		ВидНоменклатураВода,
		ВидНоменклатурыГПИзДавальческогосырья,
		ВидНоменклатурыДавальческоеСырье,
		ПроверитьСпецификацию,
		ПроверятьНоменклатурнуюГруппу)
		
	Если Отказ Тогда
		возврат;
	КонецЕсли;	
	
	
	ПроверятьМатериалыДавальца   		    = ЗначениеЗаполнено(ВидНоменклатурыДавальческоеСырье);
	ВсегдаПроверятьМатериалыДавальца 		= Ложь;
	Если ЗначениеЗаполнено(ВидНоменклатурыГПИзДавальческогосырья) Тогда
		ВсегдаПроверятьМатериалыДавальца 		= ДокОбъект.Продукция.Количество() = 1 и (ДокОбъект.Продукция[0].Номенклатура.ВидНоменклатуры = ВидНоменклатурыГПИзДавальческогосырья);
	КонецЕсли;	
	
	КачествоНовый  = Справочники.Качество.Новый;
	
	Если ДокОбъект.ОтражатьВБухгалтерскомУчете или ПроверятьМатериалыДавальца или ПроверитьСпецификацию Тогда
		
     	СтруктураПолей = Новый Структура();
	 	СтруктураПолей.Вставить("НомерСтрокиДокумента" , "НомерСтроки");
	 	СтруктураПолей.Вставить("Номенклатура" , "Номенклатура");
	 	СтруктураПолей.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
	 	СтруктураПолей.Вставить("ВидНоменклатуры", "Номенклатура.ВидНоменклатуры");
	 	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	 	СтруктураПолей.Вставить("СчетУчетаБУЗабалансовый", "СчетУчетаБУ.Забалансовый");
	 	СтруктураПолей.Вставить("СчетУчетаНУ", "СчетУчетаНУ");
	 	СтруктураПолей.Вставить("Заказ","Заказ");
	 	СтруктураПолей.Вставить("ЗаказВидОперации","Заказ.ВидОперации");
	 	СтруктураПолей.Вставить("Спецификация","Спецификация");
		СтруктураПолей.Вставить("Качество","Качество");
		
		Если ПроверятьНоменклатурнуюГруппу Тогда
			СтруктураПолей.Вставить("НоменклатурнаяГруппа","НоменклатурнаяГруппа");
			СтруктураПолей.Вставить("ВидВыпуска","ВидВыпуска");
		КонецЕсли;	

	 
	  	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ДокОбъект,ИмяТабличнойЧасти,СтруктураПолей);
      
	
		Выборка = РезультатЗапросаПоМатериалам.Выбрать();
		Пока Выборка .Следующий() Цикл
			// воду не проверяем на счета учета
			Если КачествоНовый <> Выборка.Качество  Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В табличной части "+ИмяТабличнойЧасти+" строка " + Выборка .НомерСтрокиДокумента+" должно быть выбрано качество Ок!!!",Отказ,Заголовок);
			КонецЕсли;	
				
			Если ПроверитьСпецификацию Тогда
				Если Не ЗначениеЗаполнено(Выборка.Спецификация) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В табличной части "+ИмяТабличнойЧасти+" строка " + Выборка .НомерСтрокиДокумента+" не заполнена спецификация",Отказ,Заголовок);
				КонецЕсли;	
			КонецЕсли;	
			
					
			Если (ПроверятьНоменклатурнуюГруппу) Тогда
			  Если (Выборка.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск) Тогда	
					Если Не ЗначениеЗаполнено(Выборка.НоменклатурнаяГруппа) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("В табличной части  "+ИмяТабличнойЧасти+" строка " + Выборка .НомерСтрокиДокумента+" не заполнена номенклатурная группа",Отказ,Заголовок);
					КонецЕслИ;	
			  КонецЕсли;		
			КонецЕсли;	

			Если ПроверятьМатериалыДавальца Тогда
					Если ВидНоменклатурыДавальческоеСырье =  Выборка.ВидНоменклатуры или ВсегдаПроверятьМатериалыДавальца Тогда
						Если Не ЗначениеЗаполнено(Выборка.Заказ) Тогда
							ОбщегоНазначения.СообщитьОбОшибке("В табличной части "+ИмяТабличнойЧасти+" строка " + Выборка .НомерСтрокиДокумента+" не заполнен заказ",Отказ,Заголовок);
						Иначе
							Если Выборка.ЗаказВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
								ОбщегоНазначения.СообщитьОбОшибке("В табличной части "+ИмяТабличнойЧасти+" строка " + Выборка .НомерСтрокиДокумента+" должен быть выбран заказ покупателя с видом операции ""Переработка""",Отказ,Заголовок);
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;
					Если ДокОбъект.ОтражатьВБухгалтерскомУчете и ВидНоменклатурыДавальческоеСырье =  Выборка.ВидНоменклатуры  Тогда	
						 Если Не Выборка.СчетУчетаБУЗабалансовый Тогда
							   ОбщегоНазначения.СообщитьОбОшибке("В табличной части "+ИмяТабличнойЧасти+" строка " + Выборка .НомерСтрокиДокумента+" должен быть выбран забалансовый счет учета """,Отказ,Заголовок);
						 КонецЕсли;
					КонецЕсли;	
			КонецЕсли;	
				
			Если ДокОбъект.ОтражатьВБухгалтерскомУчете Тогда
				Если ЗначениеЗаполнено(ВидНоменклатураВода)  Тогда
					Если ВидНоменклатураВода =  Выборка .ВидНоменклатуры Тогда
						 продолжить;
					КонецЕсли;	
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(Выборка.СчетУчетаБУ) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В табличной части материалы строка " + Выборка .НомерСтрокиДокумента+" не заполнен счет учета БУ",Отказ,Заголовок);
				КонецЕслИ;	
				Если ДокОбъект.ОтражатьВНалоговомУчете Тогда
					Если Не Выборка.СчетУчетаБУЗабалансовый и Не ЗначениеЗаполнено(Выборка.СчетУчетаНУ) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("В табличной части материалы строка " + Выборка .НомерСтрокиДокумента+" не заполнен счет учета НУ",Отказ,Заголовок);
					КонецЕслИ;	
				КонецЕсли;	
			 КонецЕслИ;	
	    // проверка счетов учетов
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры		
	

Процедура ВыполнитьДопПроверкуСучетомИзменений(ДокОбъект,Отказ,Заголовок) Экспорт
	
	Если Отказ Тогда
		возврат;
	КонецЕсли;	
	
	ВидНоменклатураВода 					= Константы.ПРГ_ВидНоменклатурыВода.Получить();
	ВидНоменклатурыГПИзДавальческогосырья   = Константы.ПРГ_ВидНоменклатурыПродукцияИЗДавальческогоСырья.Получить();
	ВидНоменклатурыДавальческоеСырье   		= Константы.ПРГ_ВидНоменклатурыДавальческоеСырье.Получить();
	
	ПроверятьНоменклатурнуюГруппу = Не РольДоступна("ПолныеПрава");
	
	//жестко чтобы не забыть про воду
	Если Не ЗначениеЗаполнено(ВидНоменклатураВода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не определены настройки по виду номенклатуры вода",Отказ,Заголовок);
		возврат;
	КонецЕслИ;		
	
	//жестко чтобы не забыть про воду
	Если Не ЗначениеЗаполнено(ВидНоменклатураВода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не определены настройки по виду номенклатуры вода",Отказ,Заголовок);
		возврат;
	КонецЕсли;	
	
	//{28.01.2015 Островерхий заявка №35879 //Отключили условие
	//Если Не ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУПользователя("РазрешитьПроводитьВыпускиБезЗаданияНаПроизводство") Тогда 
	//	Если Не ЗначениеЗаполнено(ДокОбъект.ЗаданиеНаПроизводство) Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке("Не выбран документ задание на производство",Отказ,Заголовок);
	//		возврат;
	//	КонецЕсли;	
	//КонецЕслИ;	
	//28.01.2015 Островерхий}
	
	Если ДокОбъект.ВидСписанияМПЗ = Перечисления.ВидыСписанияМПЗ.СписыватьСоСклада и ДокОбъект.Материалы.Количество() > 0 Тогда
		Если Не ЗначениеЗаполнено(ДокОбъект.СкладМатериалов) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнен склад сырья !!!", Отказ);
		КонецЕсли;	
		Если  ДокОбъект.ИспользоватьПодразделенияНЗП или ДокОбъект.ИспользоватьАналитикуНЗП Тогда
			 ОбщегоНазначения.СообщитьОбОшибке("Нельзя использовать подразделения НЗП совместно со списанием материалов со склада !!!", Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	ПроверитьСпецификацию = ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУПользователя("РазрешитьПроводитьДокументыБезСпецификаций") = Ложь;	
	
	Если ДокОбъект.ИспользоватьМатериалы
		и ДокОбъект.Материалы.Количество() > 0 
		и ДокОбъект.АвтораспределениеМатериалов
		Тогда
		ПрверитьТабличнуюЧастьПоМатериалам(ДокОбъект,Отказ,Заголовок,"Материалы",
		ВидНоменклатураВода,
		ВидНоменклатурыГПИзДавальческогосырья,
		ВидНоменклатурыДавальческоеСырье,
		ПроверитьСпецификацию,
		Ложь);
	КонецЕсли;	
	
	Если (Не ДокОбъект.АвтораспределениеМатериалов)
		и (ДокОбъект.ВидСписанияМПЗ = Перечисления.ВидыСписанияМПЗ.СписыватьСоСклада)
		и (ДокОбъект.РаспределениеМатериалов.Количество() > 0)
		Тогда
		ПрверитьТабличнуюЧастьПоМатериалам(ДокОбъект,Отказ,Заголовок,"РаспределениеМатериалов",
		ВидНоменклатураВода,
		ВидНоменклатурыГПИзДавальческогосырья,
		ВидНоменклатурыДавальческоеСырье,
		ПроверитьСпецификацию,
		ПроверятьНоменклатурнуюГруппу)
	КонецЕсли;	
	
	// табличная часть продукция
	
	Если ДокОбъект.Продукция.Количество() > 0 Тогда
		
		ЗначениеЗаполненоГПИзДавСырья   		= ЗначениеЗаполнено(ВидНоменклатурыГПИзДавальческогосырья);
		СчетБУПроизводствоИзДавальческогоСырья = ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья;
		
		
	    СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ВидВыпуска","ВидВыпуска");
		СтруктураПолей.Вставить("НоменклатурнаяГруппа","НоменклатурнаяГруппа");
	 	СтруктураПолей.Вставить("НомерСтрокиДокумента" , "НомерСтроки");
	 	СтруктураПолей.Вставить("Номенклатура" , "Номенклатура");
	 	СтруктураПолей.Вставить("ВидНоменклатуры", "Номенклатура.ВидНоменклатуры");
		СтруктураПолей.Вставить("ВидНоменклатуры", "Номенклатура.ВидНоменклатуры");
		СтруктураПолей.Вставить("СчетУчетаБУ","Счет");
		
	 	СтруктураПолей.Вставить("Заказ","Заказ");
	 	СтруктураПолей.Вставить("ЗаказВидОперации","Заказ.ВидОперации");
		СтруктураПолей.Вставить("ЗаказРезерв","ЗаказРезерв.ВидОперации");
		СтруктураПолей.Вставить("ЗаказРезервВидОперации","ЗаказРезерв.ВидОперации");
	 	СтруктураПолей.Вставить("Спецификация","Спецификация");
		
		РезультатЗапросаПоПродукции = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ДокОбъект,"Продукция",СтруктураПолей);
		Выборка =  РезультатЗапросаПоПродукции.Выбрать();
		Пока Выборка .Следующий() Цикл
			// воду не проверяем на счета учета
			Если (Выборка.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск) и (ПроверятьНоменклатурнуюГруппу) Тогда
				Если Не ЗначениеЗаполнено(Выборка.НоменклатурнаяГруппа) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В табличной части Продукция строка " + Выборка .НомерСтрокиДокумента+" не заполнена номенклатурная группа",Отказ,Заголовок);
				КонецЕслИ;	
			КонецЕсли;	
			Если ПроверитьСпецификацию Тогда
				Если Не ЗначениеЗаполнено(Выборка.Спецификация) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В табличной части Продукция строка " + Выборка .НомерСтрокиДокумента+" не заполнена спецификация",Отказ,Заголовок);
				КонецЕсли;	
			КонецЕсли;	
			
			ПроверятьЗаказы = Ложь;
			Если ЗначениеЗаполненоГПИзДавСырья Тогда
				ПроверятьЗаказы = ЗначениеЗаполненоГПИзДавСырья и (Выборка.ВидНоменклатуры = ВидНоменклатурыГПИзДавальческогосырья);
			КонецЕсли;	
			Если Не ПроверятьЗаказы и ДокОбъект.ОтражатьВБухгалтерскомУчете тогда
				 ПроверятьЗаказы =  Выборка.СчетУчетаБУ = СчетБУПроизводствоИзДавальческогоСырья;
			КонецЕсли;	                                            
			
			Если ПроверятьЗаказы Тогда
				
				Если Не ЗначениеЗаполнено(Выборка.Заказ) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В табличной части Продукция строка " + Выборка .НомерСтрокиДокумента+" не заполнен заказ",Отказ,Заголовок);
				КонецЕсли;	
				
				Если Выборка.ЗаказВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В табличной части Продукция строка " + Выборка .НомерСтрокиДокумента+" должен быть выбран заказ покупателя с видом операции ""Переработка""",Отказ,Заголовок);
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(Выборка.ЗаказРезерв) Тогда
					 ОбщегоНазначения.СообщитьОбОшибке("В табличной части Продукция строка " + Выборка .НомерСтрокиДокумента+" не заполнен заказ резерв",Отказ,Заголовок);
				КонецЕсли;	
				
				Если Выборка.ЗаказРезервВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В табличной части Продукция строка " + Выборка .НомерСтрокиДокумента+" должен быть выбран зака резерв з покупателя с видом операции ""Переработка""",Отказ,Заголовок);
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры		
 
//конец изменений БП 14 

//m.ionov@a-prof.ru 02.04.2014
Процедура ПроверкаНаСоответсвиеСпецификации(СтруктураШапкиДокумента, Заголовок, Отказ)
	//Получим таблицу разузловой продукции
	ИсхПараметры = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Количество,Спецификация");
		
	МассивВидовВоспроизводства = Новый Массив;
	МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Закупка);
	МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка);
	
	Параметры = Новый Структура;
	//Параметры.Вставить("ДатаСпецификации", КонецДня( Дата2));
	Параметры.Вставить("КоличествоУровнейРазузлования", 1);
	//Параметры.Вставить("Отбор", Новый Структура("ВидВоспроизводства", МассивВидовВоспроизводства));
	Результат = Новый Структура;
	Результат.Вставить("ИсходныеКомплектующие");
	Результат.Вставить("МаксимальныйУровень", 1);
	
	Если ТипЗнч(Результат.ИсходныеКомплектующие) = Тип("ТаблицаЗначений") Тогда			
		Результат.ИсходныеКомплектующие.Очистить();
	КонецЕсли;	
	
	Для каждого СтрокаПродукция Из Продукция Цикл
		
		ЗаполнитьЗначенияСвойств(ИсхПараметры, СтрокаПродукция); 
				
		МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(ИсхПараметры, Результат, Параметры,Ложь,Истина);
		
		Если МассивОшибок.Количество() > 0 Тогда
			
			Для каждого Ошибка из МассивОшибок Цикл
				
				#Если Клиент Тогда
				Сообщить("Ошибка: " + Ошибка.Причина, Ошибка.СтатусОшибки);
				Сообщить(" Спецификация: " + Ошибка.Спецификация);
				Сообщить(" Номер строки: " + Ошибка.НомерСтроки);
				Сообщить(" Описание ошибки: " + Ошибка.ОписаниеОшибки);
				#КонецЕсли
				
			КонецЦикла;
		КонецЕсли;
		
		МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(ИсхПараметры, Результат, Параметры,Истина,Истина);
		
		Если МассивОшибок.Количество() > 0 Тогда
			
			Для каждого Ошибка из МассивОшибок Цикл
				
				#Если Клиент Тогда
				Сообщить("Ошибка: " + Ошибка.Причина, Ошибка.СтатусОшибки);
				Сообщить(" Спецификация: " + Ошибка.Спецификация);
				Сообщить(" Номер строки: " + Ошибка.НомерСтроки);
				Сообщить(" Описание ошибки: " + Ошибка.ОписаниеОшибки);
				#КонецЕсли
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТипЗнч(Результат.ИсходныеКомплектующие) = Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	//Теперь проверим все ли материалы есть в плановых исходных комплектующих
	Для каждого СтрокаМатериал  Из Материалы  Цикл
	
		СтрокиПоиска = Результат.ИсходныеКомплектующие.НайтиСтроки(Новый Структура("Номенклатура", СтрокаМатериал.Номенклатура));		
		Если СтрокиПоиска.Количество() = 0 Тогда
			ВрОтказ = Отказ;
			ОбщегоНазначения.СообщитьОбОшибке("Указанный материал " + СокрЛП(СтрокаМатериал.Номенклатура) + " код: " + СокрЛП(СтрокаМатериал.Номенклатура.Код) + " не указан ни в одной спецификации готовой продукции", ВрОтказ);
			Если Не РазрешитьПревышениеЛимита Тогда
				Отказ = ВрОтказ;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла; 
КонецПроцедуры
//----m.ionov@a-prof.ru---

//m_ionov@mail.ru 24.09.2016
Процедура СкорректироватьРасперелениеМатериалов()
			
	ПРГ_ИсппользуетсяБлокМолочногоПроизводства = ПРГ_ДопФункцииКлиентСервер.ПРГ_ИсппользуетсяБлокМолочногоПроизводства(Дата);
	//Для отчета по потерям запомним количество до корректировки распределения
	Если ПРГ_ИсппользуетсяБлокМолочногоПроизводства Тогда
		//РаспределениеМатериалов.ЗагрузитьКолонку(РаспределениеМатериалов.ВыгрузитьКолонку("Количество"),"КоличествоДо");
		РаспределениеМатериаловДо.Загрузить(РаспределениеМатериалов.Выгрузить());
		ИспользоватьРаспределениеДО = Истина;
	Иначе
		РаспределениеМатериаловДо.Очистить();
		ИспользоватьРаспределениеДО = Ложь;
		Возврат;
	КонецЕсли;
	
	//m_ionov@mail.ru 02.11.2016
	//Принято решение что не использовать дополнительный коэффициент, поэтому показываем реальное распределение в отчете по потерям,
	//и поэтому заполнять табличную часть с распределением до нет необходимости - не понятно только что с сывороткой делать
	РаспределениеМатериаловДо.Очистить();
	ИспользоватьРаспределениеДО = Ложь;
	//------- m_ionov@mail.ru -------
		
	СпГотовойПродукции = Продукция.ВыгрузитьКолонку("Номенклатура");
	СпМатериалов = Материалы.ВыгрузитьКолонку("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних.Номенклатура,
	               |	МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних.ТипНоменклатуры,
	               //|	МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних.ДополнительныйКоэффициент
				   |	1 КАК ДополнительныйКоэффициент
	               |ИЗ
	               |	РегистрСведений.МЗ_ДанныеДляРасчетаСебестоимости.СрезПоследних(&ДатаСреза, Номенклатура В (&Номенклатура)) КАК МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних";
	Запрос.УстановитьПараметр("ДатаСреза", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Номенклатура", СпГотовойПродукции);
	                                                                                 
	ТабКоэфициентов = Запрос.Выполнить().Выгрузить();
	Если ТабКоэфициентов.Количество() = 0 Тогда
		//Нет продукции по которой корректируется распределение
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", СпМатериалов);
	ТабКоэфициентовМатериалов = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних.Номенклатура,
	               |	МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних.ТипНоменклатуры,
	               |	МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних.ДополнительныйКоэффициент
	               |ИЗ
	               |	РегистрСведений.МЗ_ДанныеДляРасчетаСебестоимости.СрезПоследних(&ДатаСреза, ТипНоменклатуры = &ЦельноеМолоко) КАК МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних";
	Запрос.УстановитьПараметр("ДатаСреза", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ЦельноеМолоко", Перечисления.МЗ_ТипНоменклатуры.СыроеМолоко);
	ТабЦельноеМолоко = Запрос.Выполнить().Выгрузить();	
		
	//По таблице материалов нужно получить где цельное молоко, где нормализованная смесь
	
	Для каждого СтрокаПродукция Из Продукция Цикл
						
		//Распределим материалы по сыворотке
		СтрокиСыворотка = ТабКоэфициентов.НайтиСтроки(Новый Структура("Номенклатура, ТипНоменклатуры", СтрокаПродукция.Номенклатура, Перечисления.МЗ_ТипНоменклатуры.Сыворотка)); 	
		Если СтрокиСыворотка.Количество() > 0 Тогда
			//Значит это сыворотка
			
			КолВоДляРаспределения = Макс(0.001,СтрокаПродукция.Количество*0.001);
			
			//Но по такой же спецификации должна быть по крайней мере еще одна продукция
			СтрокиПродукции = Продукция.НайтиСтроки(Новый Структура("Спецификация", СтрокаПродукция.Спецификация));
			Если СтрокиПродукции.Количество() < 2 Тогда
				//нет второй продукции для корректировки распределения
				ОбщегоНазначения.Сообщение("По строке " + СокрЛП(Продукция.Индекс(СтрокаПродукция) + 1) + " не удалось распределить материалы по сыворотке, так как не найден основной продукт для выпуска");
				Продолжить;
			КонецЕсли;
			
			ОсновнаяПродукция = Неопределено;
			Для каждого ПоискОсновнойПродукции Из СтрокиПродукции Цикл
				Если Не ПоискОсновнойПродукции.Номенклатура = СтрокаПродукция.Номенклатура Тогда
					ОсновнаяПродукция = ПоискОсновнойПродукции;
					Прервать;
				КонецЕсли;			
			КонецЦикла;
			
			Если ОсновнаяПродукция = Неопределено Тогда
				//Такое может быть если в отчете производства будет две строчки с сывороткой, но с разной серией номенклатуры
				ОбщегоНазначения.Сообщение("По строке " + СокрЛП(Продукция.Индекс(СтрокаПродукция) + 1) + " не удалось распределить материалы по сыворотке, так как не найден основной продукт для выпуска");
				Продолжить;
			КонецЕсли;
			
			//Если (СтрокаПродукция.Количество*СтрокаПродукция.Номенклатура.ПРГ_Базис+ОсновнаяПродукция.Количество*ОсновнаяПродукция.Номенклатура.ПРГ_Базис) = 0 Тогда
			//	КоэфициентРаспределенияДо = 0;
			//Иначе
			//	КоэфициентРаспределенияДо = (СтрокаПродукция.Количество*СтрокаПродукция.Номенклатура.ПРГ_Базис/(СтрокаПродукция.Количество*СтрокаПродукция.Номенклатура.ПРГ_Базис+ОсновнаяПродукция.Количество*ОсновнаяПродукция.Номенклатура.ПРГ_Базис));
			//КонецЕсли;
			
			//Мы должны определить 0,001 кг нормализованного молока, но если в материалах нет молока - то любой первый материал
			
			//Получим таблицу распределенных материалов
			Распределили = Ложь;
			СтрокиРаспределения = РаспределениеМатериалов.НайтиСтроки(Новый Структура("Продукция,СерияПродукции,Спецификация",СтрокаПродукция.Номенклатура,СтрокаПродукция.СерияНоменклатуры,СтрокаПродукция.Спецификация));
			//Сначала пытаемся распределить именно нормализованное молоко
			Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				
				СтрокиНормМолоко = ТабКоэфициентовМатериалов.НайтиСтроки(Новый Структура("Номенклатура, ТипНоменклатуры", СтрокаРаспределения.Номенклатура, Перечисления.МЗ_ТипНоменклатуры.НормализованнаяСмесь)); 							
				Если СтрокиНормМолоко.Количество() > 0 И КолВоДляРаспределения > 0 Тогда
					//Значит это нормализованное молоко
					КолВо = Мин(СтрокаРаспределения.Количество, КолВоДляРаспределения); 
					Если СтрокаРаспределения.Количество > КолВоДляРаспределения Тогда
						//Значит полностью закрываем кол-во
						НоваяСтрокаРаспределения = РаспределениеМатериалов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределения,СтрокаРаспределения);
						
						НоваяСтрокаРаспределения.Количество = НоваяСтрокаРаспределения.Количество - КолВоДляРаспределения;
						СтрокаРаспределения.Количество = КолВоДляРаспределения;
						КолВоДляРаспределения = 0;
						
						//СтрокаРаспределения.КоличествоДо = СтрокаРаспределения.КоличествоДо*КоэфициентРаспределенияДо;
						//НоваяСтрокаРаспределения.КоличествоДо = НоваяСтрокаРаспределения.КоличествоДо - СтрокаРаспределения.КоличествоДо;
						
						//Остаток относим на основную продукцию
						НоваяСтрокаРаспределения.Продукция = ОсновнаяПродукция.Номенклатура;
						НоваяСтрокаРаспределения.СерияПродукции = ОсновнаяПродукция.СерияНоменклатуры;
						НоваяСтрокаРаспределения.НоменклатурнаяГруппа = ОсновнаяПродукция.НоменклатурнаяГруппа;
												
					Иначе
						//Данные по распределению не меняются
						КолВоДляРаспределения = КолВоДляРаспределения - СтрокаРаспределения.Количество; 
					КонецЕсли;							
				Иначе
					//Если не нормализованное молоко - значит все на основную продукцию
					СтрокаРаспределения.Продукция = ОсновнаяПродукция.Номенклатура;
					СтрокаРаспределения.СерияПродукции = ОсновнаяПродукция.СерияНоменклатуры;
					СтрокаРаспределения.НоменклатурнаяГруппа = ОсновнаяПродукция.НоменклатурнаяГруппа;
				КонецЕсли;
				
				Если КолВоДляРаспределения = 0 Тогда
					Распределили = Истина;
					//Прервать;
				КонецЕсли; 				
			КонецЦикла;
			
			Если КолВоДляРаспределения > 0 Тогда
				СтрокиРаспределения = РаспределениеМатериалов.НайтиСтроки(Новый Структура("Продукция,СерияПродукции,Спецификация",ОсновнаяПродукция.Номенклатура,ОсновнаяПродукция.СерияНоменклатуры,ОсновнаяПродукция.Спецификация));
				
				Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
					СтрокиНормМолоко = ТабКоэфициентовМатериалов.НайтиСтроки(Новый Структура("Номенклатура, ТипНоменклатуры", СтрокаРаспределения.Номенклатура, Перечисления.МЗ_ТипНоменклатуры.НормализованнаяСмесь)); 							
					Если СтрокиНормМолоко.Количество() > 0 Тогда
						//Значит это нормализованное молоко
						КолВо = Мин(СтрокаРаспределения.Количество, КолВоДляРаспределения); 
						Если СтрокаРаспределения.Количество > КолВоДляРаспределения Тогда
							//Значит полностью закрываем кол-во
							НоваяСтрокаРаспределения = РаспределениеМатериалов.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределения,СтрокаРаспределения);
							
							НоваяСтрокаРаспределения.Количество = КолВоДляРаспределения;
							СтрокаРаспределения.Количество = СтрокаРаспределения.Количество - КолВоДляРаспределения;
							КолВоДляРаспределения = 0;
							//НоваяСтрокаРаспределения.КоличествоДо = НоваяСтрокаРаспределения.КоличествоДо*КоэфициентРаспределенияДо;
							//СтрокаРаспределения.КоличествоДо = СтрокаРаспределения.КоличествоДо - НоваяСтрокаРаспределения.КоличествоДо;
							
							НоваяСтрокаРаспределения.Продукция = СтрокаПродукция.Номенклатура;
							НоваяСтрокаРаспределения.СерияПродукции = СтрокаПродукция.СерияНоменклатуры;
							НоваяСтрокаРаспределения.НоменклатурнаяГруппа = СтрокаПродукция.НоменклатурнаяГруппа;
														
						Иначе
							//Все относим на сыворотку
							КолВоДляРаспределения = КолВоДляРаспределения - СтрокаРаспределения.Количество; 
							СтрокаРаспределения.Продукция = СтрокаПродукция.Номенклатура;
							СтрокаРаспределения.СерияПродукции = СтрокаПродукция.СерияНоменклатуры;
							СтрокаРаспределения.НоменклатурнаяГруппа = СтрокаПродукция.НоменклатурнаяГруппа;
						КонецЕсли;							
					КонецЕсли;
					
					Если КолВоДляРаспределения = 0 Тогда
						Распределили = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если КолВоДляРаспределения > 0 Тогда
				//Значит или нормализованного молока нет в материалах, или его не хватило
				//Все что не нормализованное молоко по сыворотке мы уже ранее отнесли на основную продукцию, поэтому распределение делаем только по основной продукции
				СтрокиРаспределения = РаспределениеМатериалов.НайтиСтроки(Новый Структура("Продукция,СерияПродукции,Спецификация",ОсновнаяПродукция.Номенклатура,ОсновнаяПродукция.СерияНоменклатуры,ОсновнаяПродукция.Спецификация));
				Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
					Если СтрокаРаспределения.Количество > КолВоДляРаспределения Тогда
						НоваяСтрокаРаспределения = РаспределениеМатериалов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределения,СтрокаРаспределения);
						
						НоваяСтрокаРаспределения.Количество = КолВоДляРаспределения;
						СтрокаРаспределения.Количество = СтрокаРаспределения.Количество - КолВоДляРаспределения;
						КолВоДляРаспределения = 0;
						
						//НоваяСтрокаРаспределения.КоличествоДо = НоваяСтрокаРаспределения.КоличествоДо*КоэфициентРаспределенияДо;
						//СтрокаРаспределения.КоличествоДо = СтрокаРаспределения.КоличествоДо - НоваяСтрокаРаспределения.КоличествоДо;
						
						НоваяСтрокаРаспределения.Продукция = СтрокаПродукция.Номенклатура;
						НоваяСтрокаРаспределения.СерияПродукции = СтрокаПродукция.СерияНоменклатуры;
						НоваяСтрокаРаспределения.НоменклатурнаяГруппа = СтрокаПродукция.НоменклатурнаяГруппа;
												
					Иначе
						
						КолВоДляРаспределения = КолВоДляРаспределения - СтрокаРаспределения.Количество; 
						
						СтрокаРаспределения.Продукция = СтрокаПродукция.Номенклатура;
						СтрокаРаспределения.СерияПродукции = СтрокаПродукция.СерияНоменклатуры;
						СтрокаРаспределения.НоменклатурнаяГруппа = СтрокаПродукция.НоменклатурнаяГруппа;
					КонецЕсли;
					
					Если КолВоДляРаспределения = 0 Тогда
						Распределили = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;   				
			КонецЕсли;
						
			Если Не Распределили Тогда
				ОбщегоНазначения.Сообщение("По строке " + СокрЛП(Продукция.Индекс(СтрокаПродукция) + 1) + " не удалось распределить материалы по сыворотке");
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;		
		
		//Распределим материалы по сливкам
		СтрокиСливки = ТабКоэфициентов.НайтиСтроки(Новый Структура("Номенклатура, ТипНоменклатуры", СтрокаПродукция.Номенклатура, Перечисления.МЗ_ТипНоменклатуры.Сливки)); 	
		Если СтрокиСливки.Количество() > 0 Тогда
			//Значит это сливки
			//Для распределение сливок обязательно должна быть указана серия номенклатуры
			Если Не ЗначениеЗаполнено(СтрокаПродукция.СерияНоменклатуры) Тогда
				ОбщегоНазначения.Сообщение("По строке " + СокрЛП(Продукция.Индекс(СтрокаПродукция) + 1) + " для сливок не указана серия номенклатуры. Распределение материалов не будет выполненно");
				Продолжить;
			КонецЕсли;
			
			ФактСВСливки = (СтрокаПродукция.Количество*СтрокаПродукция.Коэффициент)*СтрокаПродукция.СерияНоменклатуры.УЗ_ПроцентСухихВеществ;
			Если ФактСВСливки = 0 Тогда
				ОбщегоНазначения.Сообщение("По строке " + СокрЛП(Продукция.Индекс(СтрокаПродукция) + 1) + " для сливок в серии номенклатуры не указан показатель СВ. Распределение материалов не будет выполненно");
				Продолжить;
			КонецЕсли;	
					
			//Получим что еще выпускаем вместе со сливками
			СтрокиПродукции = Продукция.НайтиСтроки(Новый Структура("Спецификация", СтрокаПродукция.Спецификация));
			Если СтрокиПродукции.Количество() < 2 Тогда
				//нет второй продукции для корректировки распределения
				ОбщегоНазначения.Сообщение("По строке " + СокрЛП(Продукция.Индекс(СтрокаПродукция) + 1) + " не удалось распределить материалы по сливкам, так как не найден основной продукт для выпуска");
				Продолжить;
			КонецЕсли;
			
			ОсновнаяПродукция = Неопределено;
			Для каждого ПоискОсновнойПродукции Из СтрокиПродукции Цикл
				Если Не ПоискОсновнойПродукции.Номенклатура = СтрокаПродукция.Номенклатура Тогда
					ОсновнаяПродукция = ПоискОсновнойПродукции;
					Прервать;
				КонецЕсли;			
			КонецЦикла;
			Если ОсновнаяПродукция = Неопределено	Тогда
				//Такое может быть если в отчете производства будет две строчки со сливками, но с разной серией номенклатуры
				ОбщегоНазначения.Сообщение("По строке " + СокрЛП(Продукция.Индекс(СтрокаПродукция) + 1) + " не удалось распределить материалы по сливкам, так как не найден основной продукт для выпуска");
				Продолжить;
			КонецЕсли; 
			
			//Если (СтрокаПродукция.Количество*СтрокаПродукция.Номенклатура.ПРГ_Базис+ОсновнаяПродукция.Количество*ОсновнаяПродукция.Номенклатура.ПРГ_Базис) = 0 Тогда
			//	КоэфициентРаспределенияДо = 0;
			//Иначе
			//	КоэфициентРаспределенияДо = (СтрокаПродукция.Количество*СтрокаПродукция.Номенклатура.ПРГ_Базис/(СтрокаПродукция.Количество*СтрокаПродукция.Номенклатура.ПРГ_Базис+ОсновнаяПродукция.Количество*ОсновнаяПродукция.Номенклатура.ПРГ_Базис));
			//КонецЕсли;
			
			ПроцентСВДляОсновногоПродукта = ОсновнаяПродукция.СерияНоменклатуры.УЗ_ПроцентСухихВеществ;
			ФактСВВторойПродукции = (ОсновнаяПродукция.Количество*ОсновнаяПродукция.Коэффициент)*ОсновнаяПродукция.СерияНоменклатуры.УЗ_ПроцентСухихВеществ;
			Если ФактСВВторойПродукции = 0 Тогда
				ОбщегоНазначения.Сообщение("По строке " + СокрЛП(Продукция.Индекс(СтрокаПродукция) + 1) + " для основной продукции при выпуске сливок " + СокрЛП(ОсновнаяПродукция.Номенклатура) + " в серии номенклатуры не указан показатель СВ. Распределение материалов не будет выполненно");
				Продолжить;
			КонецЕсли;
			
			//Если коктельная смесь то из СВ будем вычитать СВ всех остальных материалов
			ЭтоКоктельнаяСмесь = ТабКоэфициентов.НайтиСтроки(Новый Структура("Номенклатура, ТипНоменклатуры", ОсновнаяПродукция.Номенклатура, Перечисления.МЗ_ТипНоменклатуры.КоктельнаяСмесь)); 	
			Если ЭтоКоктельнаяСмесь.Количество() > 0 Тогда
				ЭтоКоктельнаяСмесь = Истина;
			Иначе
				ЭтоКоктельнаяСмесь = Ложь;
			КонецЕсли;
						
			//Посчитаем сколько цельного молока
			ФактЦельногоМолока = 0;
			СтрокиРаспределения = РаспределениеМатериалов.НайтиСтроки(Новый Структура("Продукция,СерияПродукции,Спецификация",СтрокаПродукция.Номенклатура,СтрокаПродукция.СерияНоменклатуры,СтрокаПродукция.Спецификация));
			Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				ЭтоЦельноеМолоко = ТабЦельноеМолоко.Найти(СтрокаРаспределения.Номенклатура,"Номенклатура");			
				Если ЭтоЦельноеМолоко = Неопределено Тогда
					//На сливки ничего не распределяется кроме цельного молока
					СтрокаРаспределения.Продукция = ОсновнаяПродукция.Номенклатура;
					СтрокаРаспределения.СерияПродукции = ОсновнаяПродукция.СерияНоменклатуры;
					СтрокаРаспределения.НоменклатурнаяГруппа = ОсновнаяПродукция.НоменклатурнаяГруппа;
				Иначе
					ФактЦельногоМолока = ФактЦельногоМолока + СтрокаРаспределения.Количество*СтрокаРаспределения.Коэффициент;					
				КонецЕсли;
			КонецЦикла; 
			
			СтрокиРаспределения = РаспределениеМатериалов.НайтиСтроки(Новый Структура("Продукция,СерияПродукции,Спецификация",ОсновнаяПродукция.Номенклатура,ОсновнаяПродукция.СерияНоменклатуры,ОсновнаяПродукция.Спецификация));
			Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				ЭтоЦельноеМолоко = ТабЦельноеМолоко.Найти(СтрокаРаспределения.Номенклатура,"Номенклатура");			
				Если Не ЭтоЦельноеМолоко = Неопределено Тогда
					ФактЦельногоМолока = ФактЦельногоМолока + СтрокаРаспределения.Количество*СтрокаРаспределения.Коэффициент;					
				Иначе
					Если ЭтоКоктельнаяСмесь Тогда
						ПроцентСВДляОсновногоПродукта = ПроцентСВДляОсновногоПродукта - СтрокаРаспределения.СерияНоменклатуры.УЗ_ПроцентСухихВеществ;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			
			Если ПроцентСВДляОсновногоПродукта <= 0 Тогда
				ОбщегоНазначения.Сообщение("По строке " + СокрЛП(Продукция.Индекс(СтрокаПродукция) + 1) + " для основной продукции при выпуске сливок " + СокрЛП(ОсновнаяПродукция.Номенклатура) + " при учете МДСВ распределенных материалов, СВ получился отрицательный. Распределение материалов не будет выполненно");
				Продолжить;
			КонецЕсли;
			ФактСВВторойПродукции = (ОсновнаяПродукция.Количество*ОсновнаяПродукция.Коэффициент)*ПроцентСВДляОсновногоПродукта;
			
			Если ФактЦельногоМолока = 0 Тогда
				ОбщегоНазначения.Сообщение("По строке " + СокрЛП(Продукция.Индекс(СтрокаПродукция) + 1) + " для при выпуске сливок в материалах нет цельного молока. Распределение материалов по сливкам не будет выполненно");
				Продолжить;
			КонецЕсли;	
			
			ИтогоСВ = ФактСВСливки + ФактСВВторойПродукции;
			
			//Для сливок применяем дополнительный коэффициент
			Если СтрокиСливки[0].ДополнительныйКоэффициент > 0 Тогда
				ФактСВСливки = ФактСВСливки * СтрокиСливки[0].ДополнительныйКоэффициент;
			КонецЕсли;
						
			РаспределитьЦельногоМолока = Окр(ФактЦельногоМолока*Окр(ФактСВСливки/ИтогоСВ,4),3);
			
			//Теперь это количество должны оставить в материалах по сливкам
			СтрокиРаспределения = РаспределениеМатериалов.НайтиСтроки(Новый Структура("Продукция,СерияПродукции,Спецификация",СтрокаПродукция.Номенклатура,СтрокаПродукция.СерияНоменклатуры,СтрокаПродукция.Спецификация));
			Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				ЭтоЦельноеМолоко = ТабЦельноеМолоко.Найти(СтрокаРаспределения.Номенклатура,"Номенклатура");			
				Если Не ЭтоЦельноеМолоко = Неопределено Тогда
					КолВоПоСтроке = СтрокаРаспределения.Количество*СтрокаРаспределения.Коэффициент;	
					Если КолВоПоСтроке > РаспределитьЦельногоМолока Тогда
						//Значит нужно разбить строчки
						НоваяСтрокаРаспределения = РаспределениеМатериалов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределения,СтрокаРаспределения);
							
						НоваяСтрокаРаспределения.Количество = НоваяСтрокаРаспределения.Количество - РаспределитьЦельногоМолока/НоваяСтрокаРаспределения.Коэффициент;
						СтрокаРаспределения.Количество = РаспределитьЦельногоМолока/СтрокаРаспределения.Коэффициент;
						РаспределитьЦельногоМолока = 0;
						
						//СтрокаРаспределения.КоличествоДо = СтрокаРаспределения.КоличествоДо*КоэфициентРаспределенияДо;
						//НоваяСтрокаРаспределения.КоличествоДо = НоваяСтрокаРаспределения.КоличествоДо - СтрокаРаспределения.КоличествоДо;
						
						НоваяСтрокаРаспределения.Продукция = ОсновнаяПродукция.Номенклатура;
						НоваяСтрокаРаспределения.СерияПродукции = ОсновнаяПродукция.СерияНоменклатуры;
						НоваяСтрокаРаспределения.НоменклатурнаяГруппа = ОсновнаяПродукция.НоменклатурнаяГруппа;
												
					Иначе
						РаспределитьЦельногоМолока = РаспределитьЦельногоМолока - КолВоПоСтроке;
					КонецЕсли;						
				КонецЕсли;
				
				Если РаспределитьЦельногоМолока = 0 Тогда
					Прервать;
				КонецЕсли;

			КонецЦикла;
			
			Если РаспределитьЦельногоМолока > 0 Тогда
				СтрокиРаспределения = РаспределениеМатериалов.НайтиСтроки(Новый Структура("Продукция,СерияПродукции,Спецификация",ОсновнаяПродукция.Номенклатура,ОсновнаяПродукция.СерияНоменклатуры,ОсновнаяПродукция.Спецификация));
				Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
					ЭтоЦельноеМолоко = ТабЦельноеМолоко.Найти(СтрокаРаспределения.Номенклатура,"Номенклатура");			
					Если Не ЭтоЦельноеМолоко = Неопределено Тогда
						КолВоПоСтроке = СтрокаРаспределения.Количество*СтрокаРаспределения.Коэффициент;	
						Если КолВоПоСтроке > РаспределитьЦельногоМолока Тогда
							//Значит нужно разбить строчки
							НоваяСтрокаРаспределения = РаспределениеМатериалов.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределения,СтрокаРаспределения);
							
							НоваяСтрокаРаспределения.Количество = РаспределитьЦельногоМолока/НоваяСтрокаРаспределения.Коэффициент;
							СтрокаРаспределения.Количество = СтрокаРаспределения.Количество - РаспределитьЦельногоМолока/СтрокаРаспределения.Коэффициент;
							РаспределитьЦельногоМолока = 0;
							
							//НоваяСтрокаРаспределения.КоличествоДо = НоваяСтрокаРаспределения.КоличествоДо*КоэфициентРаспределенияДо;
							//СтрокаРаспределения.КоличествоДо = СтрокаРаспределения.КоличествоДо - НоваяСтрокаРаспределения.КоличествоДо;
							
							НоваяСтрокаРаспределения.Продукция = СтрокаПродукция.Номенклатура;
							НоваяСтрокаРаспределения.СерияПродукции = СтрокаПродукция.СерияНоменклатуры;
							НоваяСтрокаРаспределения.НоменклатурнаяГруппа = СтрокаПродукция.НоменклатурнаяГруппа;
														
						Иначе
							РаспределитьЦельногоМолока = РаспределитьЦельногоМолока - КолВоПоСтроке;
							
							СтрокаРаспределения.Продукция            = СтрокаПродукция.Номенклатура;
							СтрокаРаспределения.СерияПродукции       = СтрокаПродукция.СерияНоменклатуры;
							СтрокаРаспределения.НоменклатурнаяГруппа = СтрокаПродукция.НоменклатурнаяГруппа;
						КонецЕсли;
					КонецЕсли;
					Если РаспределитьЦельногоМолока = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;   	
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры
//------- m_ionov@mail.ru -------

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");
мИспользоватьТолькоСборочныеСпецификации = глЗначениеПеременной("ИспользоватьТолькоСборочныеСпецификации");
мИспользоватьНаработку = Константы.ИспользоватьНаработку.Получить();
мИспользоватьЗаказыНаПроизводство = УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();
мУчетЗатратПоЗаказамНаПроизводство = Ложь;
мИспользоватьПотребностиЗаказовНаПроизводство 		= глЗначениеПеременной("ИспользоватьПотребностиЗаказовНаПроизводство");
мСпособЗакрытияПотребностейЗаказовНаПроизводство 	= глЗначениеПеременной("СпособЗакрытияПотребностейЗаказовНаПроизводство");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Продукция", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));


