Перем мУдалятьДвижения;

Перем мВалютаВзаиморасчетовДоговора Экспорт;
Перем мСоответствиеКурсовВалют Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция возвращает стуктуру курса по переданной валюте
//
Функция ПолучитьСтруктуруКурсаВалюты(Валюта)
	
	СтруктураВозврата = мСоответствиеКурсовВалют[Валюта];
	
	Если СтруктураВозврата = Неопределено Тогда
		
		СтруктураВозврата = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, Дата);
		мСоответствиеКурсовВалют.Вставить(Валюта,СтруктураВозврата);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Процедура определяет чтобы в указанном пользователем периоде выбранная периодичность поместилась
//  бы хотя бы один раз.
//
// Параметры
//  Отказ - булево, отказ от проведения документа
//  Заголовок - строка, для информирования пользователя об ошибке
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ПроверитьСоответствиеПериодичностиИПериода(Отказ, Заголовок)
	
	Если ЗначениеЗаполнено(Периодичность) И ДатаОкончания <> '00010101' Тогда
		
		РасчетнаяДатаКонца = ОбщегоНазначения.ПолучитьДатуНачалаПериодаПоДатеОкончанияКоличествуПериодов(ДатаНачала, Периодичность, -1);
		
		Если РасчетнаяДатаКонца > КонецДня(ДатаОкончания) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке("Некорректная дата окончания, не будет закончен хотя бы один период с указанной периодичностью!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет сумму по ТЧ в валюте взаиморасчетов
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Число
//
Функция РассчитатьСуммуТЧ() Экспорт
                         
	СуммаПоТЧ = 0;
	
	Если НЕ ЗначениеЗаполнено(мВалютаВзаиморасчетовДоговора) Тогда
		Возврат СуммаПоТЧ;
	КонецЕсли; 
	
	СтруктураВалютыВзаиморасчетов = ПолучитьСтруктуруКурсаВалюты(мВалютаВзаиморасчетовДоговора);
	КурсВзаиморасчетов      = СтруктураВалютыВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураВалютыВзаиморасчетов.Кратность;
	
	Для каждого СтрокаТаблицы Из НоменклатураДоговора Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВалютаЦены) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВалютаЦены = мВалютаВзаиморасчетовДоговора Тогда
			СуммаПоТЧ = СуммаПоТЧ + СтрокаТаблицы.Сумма;
		Иначе
			СтуктураКурсаВалютыНоменклатуры = ПолучитьСтруктуруКурсаВалюты(СтрокаТаблицы.ВалютаЦены);
			КурсВалютыНоменклатуры      = СтуктураКурсаВалютыНоменклатуры.Курс;
			КратностьВалютыНоменклатуры = СтуктураКурсаВалютыНоменклатуры.Кратность;
			СуммаПоТЧ = СуммаПоТЧ + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтрокаТаблицы.ВалютаЦены, мВалютаВзаиморасчетовДоговора,
									КурсВалютыНоменклатуры, КурсВзаиморасчетов, КратностьВалютыНоменклатуры, КратностьВзаиморасчетов);
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат СуммаПоТЧ;
	
КонецФункции // РассчитатьСуммуТЧ()

// Процедура проверяет нет ли пересекающихся интервалами документов с текущим.
//
Процедура ПроверитьПересекающиесяДокументы(Отказ, Заголовок)
	
	//m.ionov@a-prof.ru 26/11/2013
	//Разрешим ввод разных условий поставки в один пересикающий период
	Возврат;
	//----- m.ionov@a-prof.ru

	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.Регистратор               КАК Регистратор,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.Регистратор.ДатаНачала    КАК ДатаНачала,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.Регистратор.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовОбщие КАК УсловияПоставокПоДоговорамКонтрагентовОбщие
	|ГДЕ
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.ДоговорКонтрагента = &ТекущийДоговорКонтрагента
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.Регистратор,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.Регистратор.ДатаНачала,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.Регистратор.ДатаОкончания
	|";
	
	Запрос.УстановитьПараметр("ТекущийДоговорКонтрагента", ДоговорКонтрагента);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтрокаДокументовПересечений = "";
	
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
	
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда // Без даты окончания
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания) Тогда
				Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
					СтрокаДокументовПересечений = СтрокаДокументовПересечений + Символы.ПС;
				КонецЕсли; 
				СтрокаДокументовПересечений = СтрокаДокументовПересечений + Строка(СтрокаТаблицы.Регистратор) + " с " + Формат(СтрокаТаблицы.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания), "...", Формат(СтрокаТаблицы.ДатаОкончания, "ДФ=dd.MM.yyyy"));
			ИначеЕсли СтрокаТаблицы.ДатаОкончания > ДатаНачала Тогда
				Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
					СтрокаДокументовПересечений = СтрокаДокументовПересечений + Символы.ПС;
				КонецЕсли; 
				СтрокаДокументовПересечений = СтрокаДокументовПересечений + Строка(СтрокаТаблицы.Регистратор) + " с " + Формат(СтрокаТаблицы.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания), "...", Формат(СтрокаТаблицы.ДатаОкончания, "ДФ=dd.MM.yyyy"));
			КонецЕсли; 
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания) Тогда 
				Если ДатаОкончания > СтрокаТаблицы.ДатаНачала Тогда
					Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
						СтрокаДокументовПересечений = СтрокаДокументовПересечений + Символы.ПС;
					КонецЕсли; 
					СтрокаДокументовПересечений = СтрокаДокументовПересечений + Строка(СтрокаТаблицы.Регистратор) + " с " + Формат(СтрокаТаблицы.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания), "...", Формат(СтрокаТаблицы.ДатаОкончания, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			ИначеЕсли (ДатаНачала >= СтрокаТаблицы.ДатаНачала И ДатаОкончания <= СтрокаТаблицы.ДатаОкончания)
				  ИЛИ (ДатаНачала <= СтрокаТаблицы.ДатаНачала И ДатаОкончания >= СтрокаТаблицы.ДатаОкончания)
				  ИЛИ (ДатаНачала <= СтрокаТаблицы.ДатаНачала И ДатаОкончания >= СтрокаТаблицы.ДатаНачала)
				  ИЛИ (ДатаНачала <= СтрокаТаблицы.ДатаОкончания И ДатаОкончания >= СтрокаТаблицы.ДатаОкончания) Тогда
					Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
						СтрокаДокументовПересечений = СтрокаДокументовПересечений + Символы.ПС;
					КонецЕсли; 
					СтрокаДокументовПересечений = СтрокаДокументовПересечений + Строка(СтрокаТаблицы.Регистратор) + " с " + Формат(СтрокаТаблицы.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания), "...", Формат(СтрокаТаблицы.ДатаОкончания, "ДФ=dd.MM.yyyy"));
			КонецЕсли; 
		КонецЕсли; 
	
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(("Найдены условия поставок, которые уже действуют в выбранном периоде:" + Символы.ПС + СтрокаДокументовПересечений), Отказ, Заголовок);
		Отказ = Истина;
	КонецЕсли; 

КонецПроцедуры

// Функция определяет валюту взаиморасчетов из договора
//
Функция ОпределитьВалютуВзаиморасчетовДоговора() Экспорт

	Если ДоговорКонтрагента.Пустая() Тогда
		Возврат Неопределено;
	Иначе
		Возврат ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли; 

КонецФункции

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Док.Дата                                        КАК Дата,
	|	Док.Ссылка                                      КАК Ссылка,
	|	Док.Контрагент                                  КАК Контрагент,
	|	Док.ДоговорКонтрагента                          КАК ДоговорКонтрагента,
	|	Док.ДоговорКонтрагента.ВидДоговора              КАК ВидДоговора,
	|	Док.ДоговорКонтрагента.ВидУсловийДоговора       КАК ВидУсловийДоговора,
	|	Док.ДатаНачала                                  КАК ДатаНачала,
	|	Док.ДатаОкончания                               КАК ДатаОкончания,
	|	Док.Периодичность                               КАК Периодичность,
	|	Док.СуммаУсловийДоговора                        КАК СуммаУсловийДоговора
	|ИЗ 
	|	Документ.УсловияПоставокПоДоговорамКонтрагентов КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Договор
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран договор контрагента в документе!", Отказ, Заголовок);
	Иначе
		Если ВыборкаПоШапкеДокумента.ВидУсловийДоговора <> Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В договоре взаиморасчетов не указан признак ведения договора с дополнительными условиями поставок !", Отказ, Заголовок);
		КонецЕсли; 
		Если ВыборкаПоШапкеДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка()
		 ИЛИ ВыборкаПоШапкеДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Вид договора взаиморасчетов может быть только ""С поставщиком"" или ""С покупателем"" !", Отказ, Заголовок);
		КонецЕсли; 
	КонецЕсли;
	
	// Контрагент
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Контрагент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран контрагент в документе!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана дата начала в документе!", Отказ, Заголовок);
	КонецЕсли;
	
	// Периодичность и дата окончания
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Периодичность) И НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана периодичность или дата окончания в документе!", Отказ, Заголовок);
	КонецЕсли;
	
	// Даты начала и окончания
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) И ВыборкаПоШапкеДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата окончания не может быть меньше даты начала!", Отказ, Заголовок);
	КонецЕсли;
	
	// Периодичность
	//m.ionov@a-prof.ru 10.09.2014
	//Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СуммаУсловийДоговора) Тогда
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СуммаУсловийДоговора) И Не ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ОграничениеОбъема
		И Не ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ПереносОстатков Тогда
	//----m.ionov@a-prof.ru---
		ОбщегоНазначения.СообщитьОбОшибке("Не указана сумма условий по договору в документе!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Товары" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиНоменклатуры(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Товары"": ";
									
	// Номенклатура
	//m.ionov@a-prof.ru 29.09.2014
	//Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Номенклатура) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрана номенклатура!", Отказ, Заголовок);
	//КонецЕсли;
	Если Не ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ОграничениеОбъема
		И Не ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ПереносОстатков Тогда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Номенклатура) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрана номенклатура!", Отказ, Заголовок);
		КонецЕсли;
	ИначеЕсли ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ОграничениеОбъема Тогда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Номенклатура)
			И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Брендообъем) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "должна быть заполнена или номенклатура или брендообъем!", Отказ, Заголовок);
		КонецЕсли;		
	КонецЕсли;
	//----m.ionov@a-prof.ru---

	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Номенклатура) И ВыборкаПоСтрокамДокумента.Номенклатура.Набор Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "выбранная номенклатура не может быть набором!", Отказ, Заголовок);
	КонецЕсли;

	// Валюта
	//m.ionov@a-prof.ru 10.09.2014
	//Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВалютаЦены) Тогда
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВалютаЦены) И Не ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ОграничениеОбъема
		И Не ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ПереносОстатков Тогда
	//----m.ionov@a-prof.ru---
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрана валюта цены!", Отказ, Заголовок);
	КонецЕсли;

	// ЕдиницаИзмерения
	//m.ionov@a-prof.ru 29.09.2014
	//Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЕдиницаИзмерения) Тогда
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Номенклатура) И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЕдиницаИзмерения) Тогда
	//----m.ionov@a-prof.ru---
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрана единица!", Отказ, Заголовок);
	КонецЕсли;
	
	// Цена
	//m.ionov@a-prof.ru 10.09.2014
	//Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Цена) Тогда
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Цена) И Не ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ОграничениеОбъема
		И Не ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ПереносОстатков Тогда
	//----m.ionov@a-prof.ru---
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрана цена!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиТоваров()

// Формирует запрос по товарам документа, при оперативном проведении добавляет данные регистров
//
// Параметры: 
//  Режим                   - режим проведения,
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоНоменклатуре(Режим, ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ПЦ_Брендообъем КАК Брендообъем, //m.ionov@a-prof.ru 29.09.2014
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.Цена,
	|	Док.ВалютаЦены,
	|	Док.ЕдиницаИзмерения,
	|	Док.Количество,
	|	Док.Сумма,
	|	Док.Ссылка.ДатаОкончания,
	|	Док.Ссылка.ДатаНачала,
	|	Док.Ссылка.Периодичность,
	|	Док.Ссылка.ДоговорКонтрагента,
	|	Док.НомерСтроки, // Для контроля заполнения
	|	1 КАК КоличествоДублей
	|ИЗ
	|	Документ.УсловияПоставокПоДоговорамКонтрагентов.НоменклатураДоговора КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|
	|ИТОГИ КОЛИЧЕСТВО(КоличествоДублей) 
	|ПО Номенклатура, ХарактеристикаНоменклатуры";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТоварам()

// По строке выборки результата запроса по документу, которая соответствует строке шапке документа,
// формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьШапкуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	// Если документ нужно проводить по регистру, то для него есть ключ в структуре
	Движение = Движения.УсловияПоставокПоДоговорамКонтрагентовОбщие.Добавить();

	// Свойства
	Движение.Период                = НачалоДня(ВыборкаПоШапкеДокумента.ДатаНачала);

	// Измерения
	Движение.ДоговорКонтрагента = ВыборкаПоШапкеДокумента.ДоговорКонтрагента;

	// Ресурсы
	
	ВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	Если ВалютаУпрУчета = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		Движение.СуммаУпрУчета = ВыборкаПоШапкеДокумента.СуммаУсловийДоговора;
	Иначе
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтруктураКурсаУпрУчета  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
		Движение.СуммаУпрУчета = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ВыборкаПоШапкеДокумента.СуммаУсловийДоговора, ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаУпрУчета, СтруктураКурсаВзаиморасчетов.Курс, СтруктураКурсаУпрУчета.Курс, СтруктураКурсаВзаиморасчетов.Кратность, СтруктураКурсаУпрУчета.Кратность);
	КонецЕсли; 
	
	Движение.СуммаВзаиморасчетов   = ВыборкаПоШапкеДокумента.СуммаУсловийДоговора;
	Движение.Периодичность         = ВыборкаПоШапкеДокумента.Периодичность;

	// Реквизиты
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		Движение.ДатаОкончания = ВыборкаПоШапкеДокумента.ДатаОкончания;
	Иначе
		Движение.ДатаОкончания = КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания);
	КонецЕсли; 
	
КонецПроцедуры

// По строке выборки результата запроса по документу, которая соответствует строке ТЧ документа,
// формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента              - спозиционированная на определеной строке выборка 
//                                           из результата запроса по товарам документа, 
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)

	Движение = Движения.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.Добавить();

	// Свойства
	Движение.Период                     = НачалоДня(ВыборкаПоСтрокамДокумента.ДатаНачала);

	// Измерения
	Движение.ДоговорКонтрагента         = ВыборкаПоСтрокамДокумента.ДоговорКонтрагента;
	Движение.Номенклатура               = ВыборкаПоСтрокамДокумента.Номенклатура;
	//m.ionov@a-prof.ru 29.09.2014
	Если ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ОграничениеОбъема Тогда
		Движение.ПЦ_Брендообъем        = ВыборкаПоСтрокамДокумента.Брендообъем;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	Движение.ХарактеристикаНоменклатуры = ВыборкаПоСтрокамДокумента.ХарактеристикаНоменклатуры;

	// Ресурсы
	Движение.ЕдиницаИзмерения           = ВыборкаПоСтрокамДокумента.ЕдиницаИзмерения;
	Движение.ВалютаЦены                 = ВыборкаПоСтрокамДокумента.ВалютаЦены;
	Движение.Цена                       = ВыборкаПоСтрокамДокумента.Цена;
	Движение.ВалютаЦены                 = ВыборкаПоСтрокамДокумента.ВалютаЦены;
	Движение.Количество                 = ВыборкаПоСтрокамДокумента.Количество;
	
	//m.ionov@a-prof.ru 26/11/2013
	Движение.ДатаОкончания = КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания);

	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
	
		Движение = Движения.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.Добавить();

		// Свойства
		Движение.Период             = КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания);

		// Измерения
		Движение.ДоговорКонтрагента         = ВыборкаПоСтрокамДокумента.ДоговорКонтрагента;
		Движение.Номенклатура               = ВыборкаПоСтрокамДокумента.Номенклатура;
		//m.ionov@a-prof.ru 29.09.2014
		Если ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ОграничениеОбъема Тогда
			Движение.ПЦ_Брендообъем        = ВыборкаПоСтрокамДокумента.Брендообъем;
		КонецЕсли;
		//----m.ionov@a-prof.ru---

		Движение.ХарактеристикаНоменклатуры = ВыборкаПоСтрокамДокумента.ХарактеристикаНоменклатуры;

		// Ресурсы
		// все пусто, т.к. условия с этой даты не действуют
		
		//m.ionov@a-prof.ru 26/11/2013
		Движение.ДатаОкончания = КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания);
		
		//Вот тут смотрим запись предедущего документа, если он был на этот же период - то запишем его сюда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних.Цена,
		               |	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних.Количество,
		               |	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних.ВалютаЦены,
		               |	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних.ЕдиницаИзмерения,
		               |	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних.ДатаОкончания
		               |ИЗ
		               |	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(
		               |			&ДатаСреза,
		               |			НЕ Регистратор = &Ссылка
		               |				И Номенклатура = &Номенклатура
					   |				И ПЦ_Брендообъем = &ПЦ_Брендообъем
		               |				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
		               |				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних
		               |ГДЕ
		               |	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних.ДатаОкончания > &ДатаСреза";
					   
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания));
		Запрос.УстановитьПараметр("Номенклатура", ВыборкаПоСтрокамДокумента.Номенклатура);
		Запрос.УстановитьПараметр("ПЦ_Брендообъем", ВыборкаПоСтрокамДокумента.Брендообъем);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ВыборкаПоСтрокамДокумента.ХарактеристикаНоменклатуры);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ВыборкаПоСтрокамДокумента.ДоговорКонтрагента);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
								
			ЗаполнитьЗначенияСвойств(Движение, Результат);
					
		КонецЕсли;
		
        //------ m.ionov@a-prof.ru
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// Проверяет дубли номенклатуры (разные строки с одинаковой номенклатурой) в товарах документа.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента - спозиционированная на определеной строке выборка 
//                              из результата запроса по товарам документа, 
//  Отказ                     - флаг отказа в проведении.
//
Процедура ПроверитьДублиНоменклатуры(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	Если ВыборкаПоСтрокамДокумента.КоличествоДублей > 1 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("""" + СокрЛП(ВыборкаПоСтрокамДокумента.Номенклатура) + ", " + СокрЛП(ВыборкаПоСтрокамДокумента.ХарактеристикаНоменклатуры) + """
			               |: дублей строк номенклатуры в этом документе быть не должно!", Отказ, Заголовок);
	КонецЕсли; 

КонецПроцедуры // ПроверитьДублиНоменклатуры

// Процедура проверяет что бы сумма товаров в табличной части была не больше суммы всего по
// условиям поставок
Процедура ПроверитьСуммыТабличнойЧастиИШапки(Отказ, Заголовок)

	СуммаПоТЧ = РассчитатьСуммуТЧ();
	
	Если СуммаПоТЧ > СуммаУсловийДоговора Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("Сумма по всем номенклатурным позициям табличной части, не может быть больше суммы условий по договору!", Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработкик события "Проведение" объекта.
//
Процедура ОбработкаПроведения(Отказ, Режим)

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения
	Заголовок = "Проведение документа " + Ссылка;

	// Добудем нужные реквизиты по шапке запросом
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		Если НЕ Отказ Тогда
			ПроверитьПересекающиесяДокументы(Отказ, Заголовок);
		КонецЕсли; 
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьШапкуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
		
		// Сформируем структуру параметров проведения по шапке документа
		// чтобы не рассчитывать их для каждого движения
		СтруктураПараметров = Новый Структура(); //Зарезервировано для дальнейшего использования
		
		// Добудем нужные реквизиты по строкам табличной части запросом
		РезультатЗапросаПоНоменклатуре   = СформироватьЗапросПоНоменклатуре(Режим, ВыборкаПоШапкеДокумента);
		
		// В цикле по строкам табличной части будем добавлять информацию в движения документа
		ВыборкаПоСтрокамДокумента = РезультатЗапросаПоНоменклатуре.Выбрать();
		
		/// Кунов О.В., 30.10.2014 - 
		УжеБылаДетальнаяЗапись = Ложь;
		///
		
		Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 
			
			// Если тип записи выборки - итог по группировке, то это итог для проверки дублей строк
			/// Кунов О.В., 30.10.2014 - 
			Если ВыборкаПоСтрокамДокумента.Уровень() = 1 Тогда
			//	// В документе не должно быть дублей строк с одинаковой номенклатурой
			//	ПроверитьДублиНоменклатуры(ВыборкаПоСтрокамДокумента, Отказ, Заголовок);
				УжеБылаДетальнаяЗапись = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаПоСтрокамДокумента.ТипЗаписи() <> ТипЗаписиЗапроса.ДетальнаяЗапись Или УжеБылаДетальнаяЗапись Тогда
				Продолжить;
			КонецЕсли; 
			
			УжеБылаДетальнаяЗапись = Истина;
			/// 
			
			//Надо позвать проверку заполнения реквизитов ТЧ
			ПроверитьЗаполнениеСтрокиНоменклатуры(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок);
			
			// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
			Если Отказ Тогда
				Продолжить;
			КонецЕсли; 
			
			ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьСуммыТабличнойЧастиИШапки(Отказ, Заголовок);
	
	ПроверитьСоответствиеПериодичностиИПериода(Отказ, Заголовок);
	
	/// Кунов О.В., 31.10.2014 - 
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком И НЕ ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ОграничениеОбъема Тогда
		СоздатьДвиженияПоРегиструВариантовЦен(Отказ); 
	КонецЕсли;
	///
	
	//++ torchinov@a-prof.ru 24.09.2014 
	Если НЕ Отказ И ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ОграничениеОбъема Тогда
		ТЧОграничения = СформироватьТЧОграниченияОбъема();
		Если ТЧОграничения.Количество() > 0 Тогда
			НаборДвижений 	= Движения.ПЦ_ОграничениеОбъемаПоставки;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТЧОграничения, ТаблицаДвижений);
			//++ Spl_Апроф 09.02.2015 (k.russkih@a-prof.ru) Движения должны отражаться на дату начала
			НаборДвижений.мПериод          = ДатаНачала;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
            Движения.ПЦ_ОграничениеОбъемаПоставки.ВыполнитьПриход();				
		КонецЕсли;	

	КонецЕсли;
	//--torchinov@a-prof.ru 24.09.2014
	
	/// Кунов О.В., 23.08.2017 - 66373
	Если Не Отказ И ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУсловияПоставкиПоДоговорамКонтрагентов.ПереносОстатков Тогда
		ДвиженияПоПереносуОстатков();
	КонецЕсли;
	///

КонецПроцедуры // ОбработкаПроведения

// Обработкик события "ПередЗаписью" объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(НоменклатураДоговора);

	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

/// Кунов О.В., 31.10.2014 - 
Процедура СоздатьДвиженияПоРегиструВариантовЦен(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУсловийПоставки = НоменклатураДоговора.Выгрузить(, "Номенклатура, Цена");
	ТаблицаУсловийПоставки.Свернуть("Номенклатура, Цена");
	ТаблицаУсловийПоставки.Сортировать("Номенклатура, Цена");
	
	ТекущаяНоменклатура = Неопределено;
	НомерВарианта = 0;
	
	Для Каждого СтрокаУсловийПоставки Из ТаблицаУсловийПоставки Цикл
		
		Если ТекущаяНоменклатура <> СтрокаУсловийПоставки.Номенклатура Тогда
			НомерВарианта = 1;
			ТекущаяНоменклатура = СтрокаУсловийПоставки.Номенклатура;
		Иначе
			НомерВарианта = НомерВарианта + 1;
		КонецЕсли;
			
		Движение = Движения.ПРГ_ВариантыЦенПоУсловиямПоставок.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаУсловийПоставки);
		Движение.Период = Дата;
		Движение.НомерВарианта = НомерВарианта;
		
	КонецЦикла;
	
КонецПроцедуры

//++ torchinov@a-prof.ru 24.09.2014
Функция СформироватьТЧОграниченияОбъема()
	ЗапросОграниченияОбъема = Новый Запрос;
	ЗапросОграниченияОбъема.Текст = "ВЫБРАТЬ
	                                |	УсловияПоставокПоДоговорамКонтрагентовНоменклатураДоговора.Ссылка.ДоговорКонтрагента,
	                                |	УсловияПоставокПоДоговорамКонтрагентовНоменклатураДоговора.Номенклатура,
	                                |	УсловияПоставокПоДоговорамКонтрагентовНоменклатураДоговора.ХарактеристикаНоменклатуры,
	                                |	УсловияПоставокПоДоговорамКонтрагентовНоменклатураДоговора.Ссылка КАК УсловиеПоставкиПоДоговоруСКонтрагентом,
									|	УсловияПоставокПоДоговорамКонтрагентовНоменклатураДоговора.ПЦ_Брендообъем КАК Брендообъем,
	                                |	СУММА(УсловияПоставокПоДоговорамКонтрагентовНоменклатураДоговора.Количество) КАК Количество
	                                |ИЗ
	                                |	Документ.УсловияПоставокПоДоговорамКонтрагентов.НоменклатураДоговора КАК УсловияПоставокПоДоговорамКонтрагентовНоменклатураДоговора
	                                |ГДЕ
	                                |	УсловияПоставокПоДоговорамКонтрагентовНоменклатураДоговора.Ссылка = &Ссылка
	                                |
	                                |СГРУППИРОВАТЬ ПО
	                                |	УсловияПоставокПоДоговорамКонтрагентовНоменклатураДоговора.Ссылка,
	                                |	УсловияПоставокПоДоговорамКонтрагентовНоменклатураДоговора.Номенклатура,
									|	УсловияПоставокПоДоговорамКонтрагентовНоменклатураДоговора.ПЦ_Брендообъем,
	                                |	УсловияПоставокПоДоговорамКонтрагентовНоменклатураДоговора.ХарактеристикаНоменклатуры,
	                                |	УсловияПоставокПоДоговорамКонтрагентовНоменклатураДоговора.Ссылка.ДоговорКонтрагента";
	ЗапросОграниченияОбъема.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаОграниченияОбъема = ЗапросОграниченияОбъема.Выполнить().Выгрузить();
	
	Возврат ВыборкаОграниченияОбъема;
	
КонецФункции	

Процедура ПриКопировании(ОбъектКопирования)
	Статус = Перечисления.ПРГ_СтатусыДокументаУсловияПоставки.Создан;
КонецПроцедуры
//-- torchinov@a-prof.ru 24.09.2014

/// Кунов О.В., 23.08.2017 - 66373
Процедура ЗаполнитьОстаткиПоДоговору(Приказ) Экспорт
	
	НоменклатураДоговора.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПЦ_ОграничениеОбъемаПоставкиОстатки.ДоговорКонтрагента,
	|	ПЦ_ОграничениеОбъемаПоставкиОстатки.Номенклатура,
	|	ПЦ_ОграничениеОбъемаПоставкиОстатки.УсловиеПоставкиПоДоговоруСКонтрагентом КАК ДокументУсловияПоставок,
	|	ПЦ_ОграничениеОбъемаПоставкиОстатки.Брендообъем КАК ПЦ_Брендообъем,
	|	ПЦ_ОграничениеОбъемаПоставкиОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ПЦ_ОграничениеОбъемаПоставки.Остатки(
	|			&ДатаОстатков,
	|			&УсловиеДоговор
	|				И &УсловиеПриказ) КАК ПЦ_ОграничениеОбъемаПоставкиОстатки
	|ГДЕ
	|	ПЦ_ОграничениеОбъемаПоставкиОстатки.УсловиеПоставкиПоДоговоруСКонтрагентом.ДатаНачала <= &ДатаОстатков
	|	И ПЦ_ОграничениеОбъемаПоставкиОстатки.УсловиеПоставкиПоДоговоруСКонтрагентом.ДатаОкончания >= &ДатаОстатков");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДоговор", "ДоговорКонтрагента = &Договор");
	
	Если Приказ <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПриказ", "УсловиеПоставкиПоДоговоруСКонтрагентом = &Приказ");
		Запрос.УстановитьПараметр("Приказ", Приказ);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПриказ", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОстатков", Дата);
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	НоменклатураДоговора.Загрузить(Данные);
	
КонецПроцедуры

Процедура ДвиженияПоПереносуОстатков()
	
	ТЧОграничения = НоменклатураДоговора.Выгрузить(, "Номенклатура, Количество, ПЦ_Брендообъем, ДокументУсловияПоставок");
	ТЧОграничения.Колонки.ПЦ_Брендообъем.Имя = "Брендообъем";
	ТЧОграничения.Колонки.ДокументУсловияПоставок.Имя = "УсловиеПоставкиПоДоговоруСКонтрагентом";
	
	НаборДвижений 	= Движения.ПЦ_ОграничениеОбъемаПоставки;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТЧОграничения, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	НаборДвижений.мПериод          = ДатаНачала;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	Движения.ПЦ_ОграничениеОбъемаПоставки.ВыполнитьРасход();
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагентаНовый, "ДоговорКонтрагента");
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	Движения.ПЦ_ОграничениеОбъемаПоставки.ВыполнитьПриход();	
	
КонецПроцедуры
///

мСоответствиеКурсовВалют = Новый Соответствие;


