Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мСтруктураПараметровДляДокументовРасчетов Экспорт;
Перем мУчетнаяПолитикаРегл;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОтчетаКомитенту()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомитентуОПродажах.Номер,
	|	ОтчетКомитентуОПродажах.Дата,
	|	ОтчетКомитентуОПродажах.ДоговорКонтрагента,
	|	ОтчетКомитентуОПродажах.Контрагент,
	|	ОтчетКомитентуОПродажах.Организация,
	|	ОтчетКомитентуОПродажах.СуммаДокумента,
	|	ОтчетКомитентуОПродажах.ВалютаДокумента,
	|	ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения,
	|	ОтчетКомитентуОПродажах.СуммаВознаграждения
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
    Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомитентуОПродажахТовары.Номенклатура,
	|	ОтчетКомитентуОПродажахТовары.Номенклатура.НаименованиеПолное КАК Товар,
	|	ОтчетКомитентуОПродажахТовары.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ОтчетКомитентуОПродажахТовары.КоличествоМест КАК КоличествоМест,
	|	ОтчетКомитентуОПродажахТовары.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмерения,
	|	ОтчетКомитентуОПродажахТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаХранения,
	|	ОтчетКомитентуОПродажахТовары.Количество КАК Количество,
	|	ОтчетКомитентуОПродажахТовары.Цена,
	|	ОтчетКомитентуОПродажахТовары.Сумма КАК Сумма,
	|	ОтчетКомитентуОПродажахТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ОтчетКомитентуОПродажахТовары.СерияНоменклатуры КАК Серия,
	|	ОтчетКомитентуОПродажахТовары.Покупатель КАК Покупатель,
	|	ОтчетКомитентуОПродажахТовары.ДатаРеализации КАК ДатаПродажи
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
	|ГДЕ
	|	ОтчетКомитентуОПродажахТовары.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Покупатель,
	|	ОтчетКомитентуОПродажахТовары.НомерСтроки
	|ИТОГИ
	|	СУММА(КоличествоМест),
	|	СУММА(Количество),
	|	СУММА(Сумма)
	|ПО
	|	Покупатель";
	
	ВыборкаПокупателей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Покупатель");
	
	Итого = 0;
	НомерПП = 1;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомитентуОПродажах_ОтчетКомитентуОПродажах";
	Макет       = ПолучитьМакет("ОтчетКомитентуОПродажах");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Отчет комитенту");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик               = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель              = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	Пока ВыборкаПокупателей.Следующий() Цикл
		
		СведенияОбПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаПокупателей.Покупатель, Дата);
		ТекстПокупатель = "Покупатель: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
		ТекстПокупатель = ТекстПокупатель + " Адрес: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ТекстПокупатель = ТекстПокупатель + " ИНН/КПП покупателя: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;

		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПокупатель");
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ТекстПокупатель;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		ВыборкаСтрокТовары = ВыборкаПокупателей.Выбрать();
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.НомерСтроки = НомерПП;
					
			ТабДокумент.Вывести(ОбластьМакета);
			
			Итого = Итого + ВыборкаСтрокТовары.Сумма;
			НомерПП = НомерПП + 1;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПокупательИтог");
		ОбластьМакета.Параметры.Заполнить(ВыборкаПокупателей);
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = Итого;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.СуммаПрописью       = ОбщегоНазначения.СформироватьСуммуПрописью(Итого, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаВознаграждения = "Сумма комиссионного вознаграждения составила " 
	                                            + ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаВознаграждения, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.ИтоговаяСтрока      = "Всего наименований " + (НомерПП-1) 
	                                            + ", на сумму " + ОбщегоНазначения.ФорматСумм(Итого, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаКомитенту()

//  Функция формирует табличиный документ как акт об оказании услуг
// на сумму вознаграждения
// 
Функция ПечатьАкта()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	СтавкаНДСВознаграждения,
	|	СуммаВознаграждения КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомитентуОПродажах_АктОбУслугах";
	Макет       = ПолучитьМакет("АктОбУслугах");

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета.Параметры.ТекстЗаголовка      = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт об оказании услуг");
	ОбластьМакета.Параметры.ТекстОСуммеПрописью = 
		"Сумма комиссионного вознаграждения составила " 
		+ ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента)
		+ ", в том числе НДС " + Шапка.СтавкаНДСВознаграждения;

	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;

КонецФункции // ПечатьАкта() 

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ОтчетКомитентуОПродажах" Тогда

		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаКомитенту();
	ИначеЕсли ИмяМакета = "АктОбОказанииУслуг" Тогда

		// Напечатаем акт об оказании услуг на сумму комисиионного вознаграждения
		ТабДокумент = ПечатьАкта();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;	
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОтчетКомитентуОПродажах,АктОбОказанииУслуг","Отчет комитенту","Акт об оказании услуг");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполниение табличной части.
//
// Параметры:
//  ДокументПоставки - ссылка на документ основание.
//
Процедура ЗаполнитьТовары(ДокументПоставки = Неопределено, Реализованными = Ложь) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);

	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Сделка);
	КонецЕсли;

	Запрос.УстановитьПараметр("ДокументПоставки"      , ДокументПоставки);
	Запрос.УстановитьПараметр("ВидДвиженияРасход"     , ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("СтатусПолучения"       , Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("Купленный"             , Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("НаКомиссию"            , Перечисления.СтатусыПартийТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("ВидДвиженияРасход"     , ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ОперацияПередача",       Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию);
	Запрос.УстановитьПараметр("ОперацияРеализация",     Перечисления.КодыОперацийПартииТоваров.Реализация);
	Запрос.УстановитьПараметр("ДатаОстатков"		  , ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	ИмяДокумента = "ПоступлениеТоваровУслуг";

	Если ТипЗнч(ДокументПоставки)=Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		ИмяДокумента = "ПоступлениеТоваровУслугВНТТ";
	КонецЕсли;
	ТекстНоменклатура = "Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
		|   ИЗ Документ."+ИмяДокумента+".Товары
		|   ГДЕ Документ."+ИмяДокумента+".Товары.Ссылка = &ДокументПоставки)";


	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Полученные.Номенклатура                                     КАК Номенклатура,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|	Полученные.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры, 
	|	Полученные.СерияНоменклатуры                                КАК СерияНоменклатуры, 
	|" + ?(Реализованными, "СУММА(Партии.Количество)                КАК РасходПоПартиям,
	|   СУММА(ПартииПереданные.Количество)                          КАК КоличествоРеализованных,", "") + "
	|	СУММА(Полученные.КоличествоОстаток)                         КАК КоличествоОстаток,
	|	СУММА(Заказы.КоличествоОстаток)                             КАК ОстатокЗаказанного,
	|	СУММА(Полученные.СуммаВзаиморасчетовОстаток)                КАК СуммаВзаиморасчетовОстаток,
	|	СУММА(Заказы.СуммаВзаиморасчетовОстаток)                    КАК СуммаЗаказанного
	|ИЗ
	|	РегистрНакопления.ТоварыПолученные.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента
	|" + ?(ДокументПоставки <> Неопределено, ("И " + ТекстНоменклатура), "") + "
	|                                              И Сделка                = &Сделка
	|                                              И СтатусПолучения       = &СтатусПолучения) КАК Полученные
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента
	|                                              И ЗаказПоставщику        = &Сделка
	|                                              И СтатусПартии           = &Купленный) КАК Заказы
	|ПО
	|	Полученные.Номенклатура = Заказы.Номенклатура
	| И Полученные.ХарактеристикаНоменклатуры = Заказы.ХарактеристикаНоменклатуры 
	| " + ?(Реализованными, "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Партии
	|ПО Партии.Номенклатура = Полученные.Номенклатура
	|	И Партии.ХарактеристикаНоменклатуры = Полученные.ХарактеристикаНоменклатуры
	|	" + ?(ДокументПоставки <> Неопределено, "И Партии.ДокументОприходования = &ДокументПоставки", "И Партии.ДокументОприходования.ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|	И Партии.СтатусПартии = &НаКомиссию
	|	И Партии.КодОперации = &ОперацияРеализация
	|	" + ?(ДокументПоставки <> Неопределено, ("И Партии." + ТекстНоменклатура), "") + "
	|	И Партии.ВидДвижения = &ВидДвиженияРасход
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииПередача
	|ПО ПартииПередача.Номенклатура = Полученные.Номенклатура
	|	И ПартииПередача.ХарактеристикаНоменклатуры = Полученные.ХарактеристикаНоменклатуры
	|	" + ?(ДокументПоставки <> Неопределено, "И ПартииПередача.ДокументОприходования = &ДокументПоставки", "И ПартииПередача.ДокументОприходования.ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|	И ПартииПередача.СтатусПартии = &НаКомиссию
	|	И ПартииПередача.КодОперации = &ОперацияПередача
	|	" + ?(ДокументПоставки <> Неопределено, ("И ПартииПередача." + ТекстНоменклатура), "") + "
	|	И ПартииПередача.ВидДвижения = &ВидДвиженияРасход
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ПартииТоваровПереданные КАК ПартииПереданные
	|		ПО ПартииПереданные.Номенклатура = ПартииПередача.Номенклатура
	|		   И ПартииПереданные.ХарактеристикаНоменклатуры = ПартииПередача.ХарактеристикаНоменклатуры
	|		   И ПартииПереданные.ДокументОприходования = ПартииПередача.ДокументОприходования
	|	       И ПартииПереданные.СтатусПартии = &НаКомиссию
	|	       И ПартииПереданные.КодОперации = &ОперацияРеализация
	|	       " + ?(ДокументПоставки <> Неопределено, ("И ПартииПереданные." + ТекстНоменклатура), "") + "
	|	       И ПартииПереданные.ВидДвижения = &ВидДвиженияРасход
	|", "") + "
	|СГРУППИРОВАТЬ ПО
	|	Полученные.Номенклатура,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	|	Полученные.ХарактеристикаНоменклатуры,
	|	Полученные.СерияНоменклатуры
	|";

	ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		КоличествоОстатокЗаказанного = ?(Выборка.ОстатокЗаказанного = NULL, 0, Выборка. ОстатокЗаказанного);
		СуммаВзаиморасчетовОстаток   = ?(Выборка.СуммаВзаиморасчетовОстаток = NULL, 0, Выборка.СуммаВзаиморасчетовОстаток);
		КоличествоОстаток            = ?(Выборка.КоличествоОстаток = NULL, 0, Выборка.КоличествоОстаток);

		СуммаЗаказанного = ?(Выборка.СуммаЗаказанного = NULL, 0, Выборка.СуммаЗаказанного);

		Если Не Реализованными Тогда
			КоличествоДляОтчета = Выборка.КоличествоОстаток - КоличествоОстатокЗаказанного; 
		Иначе
			РасходПоПартиям = ?(Выборка.РасходПоПартиям = NULL, 0, Выборка.РасходПоПартиям) + ?(Выборка.КоличествоРеализованных = NULL, 0, Выборка.КоличествоРеализованных);
			КоличествоДляОтчета = Мин(Выборка.КоличествоОстаток - КоличествоОстатокЗаказанного, РасходПоПартиям);
		КонецЕсли; 

		Если КоличествоДляОтчета <= 0 Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Количество                 = КоличествоДляОтчета;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаХраненияОстатковКоэффициент;
		СтрокаТабличнойЧасти.ЦенаПоступления            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаВзаиморасчетовОстаток - СуммаЗаказанного, 
														ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, 
														ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)) 
														 / (КоличествоОстаток - КоличествоОстатокЗаказанного);

		СтрокаТабличнойЧасти.СуммаПоступления    = СтрокаТабличнойЧасти.ЦенаПоступления * КоличествоДляОтчета ;
		СтрокаТабличнойЧасти.Цена                = СтрокаТабличнойЧасти.ЦенаПоступления;
		СтрокаТабличнойЧасти.Сумма               = СтрокаТабличнойЧасти.СуммаПоступления;
		СтрокаТабличнойЧасти.ДокументПоступления = ДокументПоставки;

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
			                                    * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
																		Истина, Истина, 
																		УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТовары()

// Процедура выполняет заполнение табличной части реализованными товарами
// на основании данных регистра "Реализованные товары комитента"
//
// ДокументПоставки - если задан, то заполняет товарами, полученными по 
//                    заданному документу
//
Процедура ЗаполнитьРеализованными(ДокументПоставки = Неопределено) Экспорт

	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата) Тогда
		ЗаполнитьРеализованнымиУпр(ДокументПоставки);
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументПоставки", ДокументПоставки);
	Запрос.УстановитьПараметр("ДатаОстатков",    ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Сделка);
	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Реализованные.Номенклатура										КАК Номенклатура,
	|	Реализованные.Номенклатура.ЕдиницаХраненияОстатков 				КАК ЕдиницаИзмерения,
	|	Реализованные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 	КАК Коэффициент,
	|	Реализованные.ХарактеристикаНоменклатуры						КАК ХарактеристикаНоменклатуры,
	|	Реализованные.СерияНоменклатуры									КАК СерияНоменклатуры,
	|	Реализованные.ДокументПоставки									КАК ДокументПоставки,
	| 	МАКСИМУМ(Полученные.КоличествоОстаток)							КАК КоличествоПолученных, 
	|	МАКСИМУМ(Полученные.СуммаВзаиморасчетовОстаток)					КАК СуммаПоступления,
	|	СУММА(Реализованные.ВыручкаОстаток)								КАК Выручка,
	|	СУММА(Реализованные.КоличествоОстаток)							КАК КоличествоРеализованных,
	|	Реализованные.Покупатель										КАК Покупатель,
	|	Реализованные.ДатаРеализации									КАК ДатаРеализации
	|ИЗ
	|	РегистрНакопления.РеализованныеТовары.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента И Сделка = &Сделка
	|                                                 " + ?(НЕ ЗначениеЗаполнено(ДокументПоставки), "", "И ДокументПоставки = &ДокументПоставки ") + ") КАК Реализованные
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|   РегистрНакопления.ТоварыПолученные.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента
	|                                                И Сделка = &Сделка) КАК Полученные
	|ПО
	|	Полученные.Номенклатура                 = Реализованные.Номенклатура
	|	И Полученные.ХарактеристикаНоменклатуры = Реализованные.ХарактеристикаНоменклатуры
	|	И Полученные.СерияНоменклатуры          = Реализованные.СерияНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	Реализованные.Номенклатура,
	|	Реализованные.ХарактеристикаНоменклатуры,
	|	Реализованные.СерияНоменклатуры,
	|	Реализованные.ДокументПоставки,
	|	Реализованные.Покупатель,
	|	Реализованные.ДатаРеализации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Покупатель,
	|	ДатаРеализации";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		КоличествоРеализованных = ?(Выборка.КоличествоРеализованных = NULL, 0, Выборка.КоличествоРеализованных);
		КоличествоПолученных    = ?(Выборка.КоличествоПолученных = NULL, 0, Выборка.КоличествоПолученных);
		Выручка                 = ?(Выборка.Выручка = NULL, 0, Выборка.Выручка);
		Количество              = Мин(КоличествоПолученных, КоличествоРеализованных);

		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Покупатель                 = Выборка.Покупатель;
		НоваяСтрока.ДатаРеализации             = Выборка.ДатаРеализации;
		НоваяСтрока.ДокументПоступления        = Выборка.ДокументПоставки;
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		НоваяСтрока.Количество                 = Количество;
		НоваяСтрока.Сумма                      = ?(КоличествоРеализованных = 0, 0, Выручка * НоваяСтрока.Количество / КоличествоРеализованных);
		НоваяСтрока.СуммаПоступления           = ?(КоличествоПолученных = 0, 0, Выборка.СуммаПоступления * НоваяСтрока.Количество / КоличествоПолученных);
		НоваяСтрока.Цена                       = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		НоваяСтрока.ЦенаПоступления            = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.СуммаПоступления / НоваяСтрока.Количество);

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения
			                                    * НоваяСтрока.Сумма / 100;
			НоваяСтрока.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения,
																		Истина, Истина, 
																		УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		ИначеЕсли СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения
			                                    * (НоваяСтрока.Сумма - НоваяСтрока.СуммаПоступления) / 100;
			НоваяСтрока.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения,
																		Истина, Истина, 
																		УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРеализованными()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Добавляем колонки, используемые при проведении.
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр" ,             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Колонка для проведения по регистру ТоварыПолученные, не зависит от флага удержания вознаграждения.
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаПоступления;

		// Стимость для регистра "Продажи" - сумма комиссионного вознаграждения в валюте упр. учета
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДСУпр    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Стоимость;

	КонецЦикла;

КонецПроцедуры

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	
	ТаблицаТоваров.Колонки.Добавить("СчетДоходовБУ", 	Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаТоваров.Колонки.Добавить("СчетДоходовНУ", 	Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаТоваров.Колонки.Добавить("СубконтоБУ", 	 	ОписаниеТиповСубконто);
	ТаблицаТоваров.Колонки.Добавить("СубконтоНУ",		ОписаниеТиповСубконто);
	
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетДоходовБУ, "СчетДоходовБУ");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетДоходовНУ, "СчетДоходовНУ");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоБУ, 	"СубконтоБУ");
	ТаблицаТоваров.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоНУ, 	"СубконтоНУ");
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоДенежнымСредствам - результат запроса по табличной части "ДенежныеСредства",
//  СтруктураШапкиДокумента             - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуДенежныхСредств(РезультатЗапросаПоДенежнымСредствам, СтруктураШапкиДокумента)

	ТаблицаДенежныхСредств = РезультатЗапросаПоДенежнымСредствам.Выгрузить();

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуДенежныхСредствУпр(ТаблицаДенежныхСредств, СтруктураШапкиДокумента);

	Возврат ТаблицаДенежныхСредств;

КонецФункции // ПодготовитьТаблицуДенежныхСредств()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Процедура ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента)

	// Создаем колонку "СуммаУпр"
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаВзаиморасчетов Цикл
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсВзаиморасчетов, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента)

	ТаблицаВзаиморасчетов = РезультатЗапросаПоДокументамРасчетовСКонтрагентами.Выгрузить();
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0), ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	// Если сумма взиморасчетов по документу превышает итог по таблице взаиморасчетов, то 
	// добавляем в таблицу новую строку со сылкой на проводимый документ
	СуммаВзаиморасчетовПоТекущемуДокументу = СуммаВзаиморасчетов - ТаблицаВзаиморасчетов.Итог("СуммаВзаиморасчетов");
	Если СуммаВзаиморасчетовПоТекущемуДокументу > 0 Тогда
		НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.СуммаВзаиморасчетов           = СуммаВзаиморасчетовПоТекущемуДокументу;
		НоваяСтрока.СуммаРегл   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетовПоТекущемуДокументу, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														мВалютаРегламентированногоУчета,
														КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);
	КонецЕсли;

	ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции // ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
// Параметры: 
//  РезультатЗапросаПоДенежнымСредствам - результат запроса по табличной части "ДенежныеСредства",
//  СтруктураШапкиДокумента             - выборка по результату запроса по шапке документа.
//
Процедура ПодготовитьТаблицуДенежныхСредствУпр(ТаблицаДенежныхСредств, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаДенежныхСредств.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДенежныхСредств.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаДенежныхСредств Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КурсДокумента,
		                                    СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуДенежныхСредствУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, СпособРасчетаКомиссионногоВознаграждения, КратностьВзаиморасчетов");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	
	Если НЕ УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата) Тогда
		СтруктураОбязательныхПолей.Вставить("ДокументПоступления");
    КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "ДенежныеСредства".
//
// Параметры:
// Параметры: 
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки 
//                               ТЧ ТаблицаПоДенежнымСредствам
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента,
                                                            Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОтчетаПоПлатежам, Сумма, СтавкаНДС");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДенежныеСредства", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства()

// Проверяет правильность заполнения строк табличной части "Документы расчетов с контрагентом".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументРасчетовСКонтрагентом, СуммаВзаиморасчетов");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	Если (СуммаВзаиморасчетов - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0)) < ТаблицаПоДокументамРасчетовСКонтрагентом.Итог("СуммаВзаиморасчетов") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма по таблице документов расчетов с контрагентами превышает сумму взаиморасчетов по документу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства()

// По результатам запросов и данным документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки ТЧ ДенежныеСредства,
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
		ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
		ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);

	ДвиженияПоРегистрамОперативныхВзаиморасчетов(
		РежимПроведения, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок, СтруктураШапкиДокумента);

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);

	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата) Тогда
		Движения.Хозрасчетный.Записать();
		Движения.Налоговый.Записать();
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоОтчетуКомитенту(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		
		// Сформируем движения по регистру УчетПродажИСебестоимости
		ТаблицаПродажи = ТаблицаПоТоварам.Скопировать();
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(СтруктураШапкиДокумента, ТаблицаПродажи);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегиструРеализованныеТовары(СтруктураШапкиДокумента, ТаблицаПродажи, ТаблицаДвижений, Отказ)
	
	ИспользуетсяРасширеннаяАналитика = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.ХарактеристикаНоменклатуры,
	|	ТаблицаПродажи.СерияНоменклатуры
	|ПОМЕСТИТЬ ТаблицаОтбораПоНоменклатуре
	|ИЗ
	|	&ТаблицаПродажи КАК ТаблицаПродажи
	|;
	|
	|///////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура               КАК Номенклатура,
	|	РеализованныеТоварыКомитентовОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РеализованныеТоварыКомитентовОстатки.СерияНоменклатуры          КАК СерияНоменклатуры,
	|	РеализованныеТоварыКомитентовОстатки.ДокументПоставки           КАК ДокументПоставки,
	|	РеализованныеТоварыКомитентовОстатки.Покупатель                 КАК Покупатель,
	|	РеализованныеТоварыКомитентовОстатки.ДатаРеализации             КАК ДатаРеализации,
	|	СУММА(РеализованныеТоварыКомитентовОстатки.КоличествоОстаток)   КАК КоличествоОстаток,
	|	СУММА(РеализованныеТоварыКомитентовОстатки.ВыручкаОстаток)      КАК ВыручкаОстаток
	|ИЗ
	|	РегистрНакопления.РеализованныеТовары.Остатки(
	|		&Период,
	|		(Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры) В (
	|				ВЫБРАТЬ
	|					Номенклатура,
	|					ХарактеристикаНоменклатуры,
	|					СерияНоменклатуры
	|				ИЗ
	|					ТаблицаОтбораПоНоменклатуре)
	|//ИспользуетсяРА		И Организация = &Организация
	|//НеИспользуетсяРА		И ДоговорКонтрагента = &ДоговорКонтрагента
	|//НеИспользуетсяРА		И Сделка = &Сделка
	|		) КАК РеализованныеТоварыКомитентовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура,
	|	РеализованныеТоварыКомитентовОстатки.Покупатель,
	|	РеализованныеТоварыКомитентовОстатки.ДатаРеализации,
	|	РеализованныеТоварыКомитентовОстатки.ХарактеристикаНоменклатуры,
	|	РеализованныеТоварыКомитентовОстатки.СерияНоменклатуры,
	|	РеализованныеТоварыКомитентовОстатки.ДокументПоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	ДокументПоставки,
	|	Покупатель,
	|	ДатаРеализации";
	
	Запрос.УстановитьПараметр("Период", 		Новый МоментВремени(Ссылка.Дата, Ссылка));
	Запрос.УстановитьПараметр("ТаблицаПродажи", ТаблицаПродажи);
	Если ИспользуетсяРасширеннаяАналитика Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ИспользуетсяРА", "");
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//НеИспользуетсяРА", "");
		Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Сделка", 			?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка), СтруктураШапкиДокумента.Сделка, Неопределено));
	КонецЕсли;
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПродажи.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ДокументПоставки, Покупатель, ДатаРеализации", "Количество, Выручка, СуммаПоступления");
	ТаблицаОстатков.Индексы.Добавить("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ДокументПоставки, Покупатель, ДатаРеализации");
	
	Если ТаблицаОстатков.Количество() > 0.00 Тогда
		Для Каждого Строка Из ТаблицаПродажи Цикл
			
			Для НомерФильтра = 1 По ?(ЗначениеЗаполнено(Строка.Покупатель), 2, 1) Цикл
				//Если покупатель указан, списание выполняется в 2 прохода -
				//сначала по строкам с указанным покупателем, а потом по строкам 
				//с пустым покупателем
				СтруктураОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, Строка.СерияНоменклатуры);
				Если ЗначениеЗаполнено(Строка.Покупатель) Тогда
					СтруктураОтбора.Вставить("Покупатель", ?(НомерФильтра = 1, Строка.Покупатель, Справочники.Контрагенты.ПустаяСсылка()));
				КонецЕсли;
				//Отбор по датам реализации при отборе по пустому покупателю не устанавливается
				Если ЗначениеЗаполнено(Строка.ДатаРеализации) И НомерФильтра = 1 Тогда
					СтруктураОтбора.Вставить("ДатаРеализации", Строка.ДатаРеализации);
				КонецЕсли;
				// Отбор по документу поставки только в случае, когда не используется РА
				Если Не ИспользуетсяРасширеннаяАналитика Тогда
					СтруктураОтбора.Вставить("ДокументПоставки", Строка.ДокументПоставки);
				КонецЕсли;
				
				НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
				Для Каждого Запись Из НайденныеСтроки Цикл
					Если Запись.КоличествоОстаток = 0 Тогда
						Продолжить;
					КонецЕсли;
					Списать = Мин(Строка.Количество, Запись.КоличествоОстаток);
					Если Списать > 0 Тогда
						Движение = ТаблицаДвижений.Добавить();
						Движение.ДоговорКонтрагента          = СтруктураШапкиДокумента.ДоговорКонтрагента;
						Движение.Сделка                      = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка), СтруктураШапкиДокумента.Сделка, Неопределено);
						Движение.Номенклатура                = Строка.Номенклатура;
						Движение.ХарактеристикаНоменклатуры  = Строка.ХарактеристикаНоменклатуры;
						Движение.СерияНоменклатуры           = Строка.СерияНоменклатуры;
						Движение.ДокументПоставки            = Строка.ДокументПоставки;
						Движение.Покупатель                  = Запись.Покупатель;
						Движение.ДатаРеализации              = Запись.ДатаРеализации;
						Движение.Количество                  = Списать;
						Если Запись.КоличествоОстаток = 0 Тогда
							Движение.Выручка          = Запись.ВыручкаОстаток;
						ИначеЕсли Списать = Строка.Количество или Строка.Количество = 0 Тогда
							Движение.Выручка          = Строка.Выручка;
						Иначе 
							Движение.Выручка          = Окр(Строка.Выручка * Списать / Строка.Количество, 2);
						КонецЕсли;
						
						Строка.Количество        = Строка.Количество - Движение.Количество;
						Строка.Выручка           = Строка.Выручка - Движение.Выручка;
						Запись.ВыручкаОстаток    = Запись.ВыручкаОстаток - Движение.Выручка;
						Запись.КоличествоОстаток = Запись.КоличествоОстаток - Движение.Количество;
					КонецЕсли;
					Если Строка.Количество = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Строка.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаПродажи Цикл
		Если Строка.Количество > 0.00 ИЛИ Строка.Выручка Тогда
			Движение = ТаблицаДвижений.Добавить();
			Движение.ДоговорКонтрагента          = СтруктураШапкиДокумента.ДоговорКонтрагента;
			Движение.Сделка                      = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка), СтруктураШапкиДокумента.Сделка, Неопределено);
			Движение.Номенклатура                = Строка.Номенклатура;
			Движение.ХарактеристикаНоменклатуры  = Строка.ХарактеристикаНоменклатуры;
			Движение.СерияНоменклатуры           = Строка.СерияНоменклатуры;
			Движение.ДокументПоставки            = Строка.ДокументПоставки;
			Движение.Покупатель                  = Справочники.Контрагенты.ПустаяСсылка();
			Движение.ДатаРеализации              = Дата(01, 01, 01);
			Движение.Количество                  = Строка.Количество;
			Движение.Выручка                     = Строка.Выручка;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуетсяРасширеннаяАналитика Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ДокументПоставки");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, 	"Организация");
		
		//При использовании РА в регистре Реализованные товары храниться сумма в валюте упр. учета
		мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
		СтруктраКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета,Дата);
		Для Каждого ТекущаяСтрока Из ТаблицаДвижений Цикл
			
			ТекущаяСтрока.Выручка = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущаяСтрока.Выручка,
				ДоговорКонтрагента.ВалютаВзаиморасчетов, 
				мВалютаУправленческогоУчета,
				КурсВзаиморасчетов,
				СтруктраКурса.Курс,
				КратностьВзаиморасчетов,
				СтруктраКурса.Кратность);
				
		КонецЦикла;
			
	КонецЕсли;

КонецПроцедуры

// По результатам запросов и данным документа формируем движения по регистрам упр. учета.
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки ТЧ ДенежныеСредства,
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
                                 ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		// Если комиссионное вознаграждение удерживается, то на него уменьшаем сумму долга.
		СуммаДолга = ?(СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение, СуммаДокумента - СуммаВознаграждения, СуммаДокумента);

		// По регистру ВзаиморасчетыСКонтрагентами.
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда

			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументамРасчетовСКонтрагентом, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");

			ТаблицаДвижений.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");

		Иначе
            Если  СуммаДолга<>0 Тогда
				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
				СтрокаДвижений.Контрагент  		   = Контрагент;
				СтрокаДвижений.Организация  	   = Организация;
				СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
				СтрокаДвижений.СуммаВзаиморасчетов = СуммаДолга;
				СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
            КонецЕсли;
		КонецЕсли;

		НаборДвижений.мПериод              = Дата;
		НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;

		// Долг перед комитентом за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		   И СуммаВознаграждения <> 0 Тогда

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов = СуммаВознаграждения;
			
			
			СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НаборДвижений.мПериод              = Дата;
			НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

			СтруктураПараметров = Новый Структура("ТаблицаСделок", ТаблицаДвижений);
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "", СтруктураШапкиДокумента, СтруктураПараметров, Отказ, Заголовок, РежимПроведения);
			
			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;

		// По регистру "РасчетыСКонтрагентами".
		НаборДвижений = Движения.РасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		Если СуммаДолга<>0 Тогда
			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов = СуммаДолга;
			СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;
											 
		НаборДвижений.мПериод              = Дата;
		НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;

		// Долг комитента за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		// При этих же условиях проводим по продажам.
		Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		   И СуммаВознаграждения <> 0 Тогда

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов = СуммаВознаграждения;
			СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НаборДвижений.мПериод              = Дата;
			НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;

		ИтогНДС = ТаблицаПоТоварам.Итог("НДС");
		ИтогНДСВознаграждения = ТаблицаПоТоварам.Итог("НДСВознаграждения");
		Если СтруктураШапкиДокумента.СуммаВознаграждения <> 0 ИЛИ ИтогНДС <> 0 Тогда
			// По регистру ПРОДАЖИ.
			НаборДвижений = Движения.Продажи;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			НоваяСтрока = ТаблицаДвижений.Добавить();

			НоваяСтрока.Номенклатура               = СтруктураШапкиДокумента.УслугаПоВознаграждению;
			НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НоваяСтрока.ДокументПродажи            = Ссылка;
			НоваяСтрока.ДоговорКонтрагента         = ДоговорКонтрагента;
			НоваяСтрока.Контрагент                 = Контрагент;
			НоваяСтрока.Организация                = Организация;
			НоваяСтрока.ЗаказПокупателя            = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			НоваяСтрока.Подразделение              = Подразделение;
			НоваяСтрока.Количество                 = 0;
			
			НоваяСтрока.Стоимость                  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВознаграждения,
				СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента,
				СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НоваяСтрока.СтоимостьБезСкидок         = НоваяСтрока.Стоимость;
			НоваяСтрока.НДС                        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ИтогНДСВознаграждения,
				СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента,
				СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.Продажи.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыПолученные.

		НаборДвижений = Движения.ТоварыПолученные;

		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыПолученныеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
							
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
						
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
			// ПО РЕГИСТРУ РеализованныеТовары
			НаборДвижений = Движения.РеализованныеТовары;
			
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			ТаблицаПродажи 	= ТаблицаПоТоварам.Скопировать();
			ДвиженияПоРегиструРеализованныеТовары(СтруктураШапкиДокумента, ТаблицаПродажи, ТаблицаДвижений, Отказ);
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			НаборДвижений.ВыполнитьРасход();
			
		КонецЕсли; // НЕ Отказ
		
	КонецЕсли;

	//ДЕНЕЖНЫЕ СРЕДСТВА КОМИТЕНТА
	// По денежным средствам комитента проводим только если в договоре выставлен флаг.
	Если СтруктураШапкиДокумента.КонтролироватьДенежныеСредстваКомитента И Не Отказ Тогда

		НаборДвижений = Движения.ДенежныеСредстваКомитента;

		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаДенежныеСредства = ТаблицаПоДенежнымСредствам.Скопировать();

		Сч = 0;
		// Зачеты аванса в движения не включаем.
		Пока Сч < ТаблицаДенежныеСредства.Количество() Цикл
			СтрокаТаблицы = ТаблицаДенежныеСредства.Получить(Сч);
			Если СтрокаТаблицы.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса Тогда 
				 ТаблицаДенежныеСредства.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ДенежныеСредства", ТаблицаДенежныеСредства);
							
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
								
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
							
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()	

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
	// Долг комитента за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
	Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		И СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом
		И СуммаВознаграждения <> 0 Тогда
	   
		ВидДвижения = ВидДвиженияНакопления.Приход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		
		ТаблицаВознаграждения = ТаблицаПоВзаиморасчетам.СкопироватьКолонки();
		
		НоваяСтрока = ТаблицаВознаграждения.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.Сделка                        = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
		НоваяСтрока.СуммаВзаиморасчетов           = СуммаВознаграждения;
		НоваяСтрока.СуммаРегл   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СуммаВознаграждения, 
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
			КурсВзаиморасчетов, 1, 
			КратностьВзаиморасчетов, 1);
		
		УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаВознаграждения, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	   
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ) Экспорт

	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если Не ТаблицаВыручки.Количество() = 0 Тогда
	
		ТаблицаВыручкиДляНДС = ТаблицаВыручки.Скопировать();
		ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(СтруктураШапкиДокумента.УслугаПоВознаграждению, "Ценность, Номенклатура");
		ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ПосредническиеУслуги, "ВидЦенности");
		ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(Истина, "Услуга");
		ТаблицаВыручкиДляНДС.Свернуть("ВидЦенности, Ценность, СчетУчетаЦенности, СтавкаНДС, Номенклатура, Услуга",
										"Сумма, СуммаБезНДС, НДС, СуммаВал, СуммаБезНДСВал, НДСВал, Количество");
			
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручкиДляНДС, , Отказ, УчетНДС.СчетОтнесенияНДС(СтруктураШапкиДокумента));
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                  , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                   , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"               , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                            , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьДенежныеСредстваКомитента", "КонтролироватьДенежныеСредстваКомитента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"                , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом" , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"        , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "ВидОперации"                            , "СделкаВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "Склад.ВидСклада"                        , "ВидСклада");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УслугаПоВознаграждению", "НоменклатурнаяГруппа", "НоменклатурнаяГруппаУслугиПоВознаграждению");

	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	//Пока не добавили реквизиты в шапку
	Если не СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС") тогда
		СтруктураШапкиДокумента.Вставить("СуммаВключаетНДС",Истина);
	КонецЕсли;

	Если не СтруктураШапкиДокумента.Свойство("УчитыватьНДС") тогда
		СтруктураШапкиДокумента.Вставить("УчитыватьНДС",Истина);
	КонецЕсли;

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если не ЗначениеЗаполнено(мУчетнаяПолитикаРегл) ИЛИ НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл.МоментОпределенияНалоговойБазыНДС) тогда
			СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
		Иначе
			СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС", мУчетнаяПолитикаРегл.МоментОпределенияНалоговойБазыНДС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ЦенаПродажи"               , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "СуммаВознаграждения");
	СтруктураПолей.Вставить("Выручка"                   , "Сумма");
	СтруктураПолей.Вставить("СуммаПоступления"          , "СуммаПоступления");
	СтруктураПолей.Вставить("СуммаВознаграждения"       , "СуммаВознаграждения");
	СтруктураПолей.Вставить("СтавкаНДСВознаграждения"   , "Ссылка.СтавкаНДСВознаграждения");
	СтруктураПолей.Вставить("СтавкаНДС"   				, "Ссылка.СтавкаНДСВознаграждения");
	СтруктураПолей.Вставить("НДСВознаграждения"    		, "СуммаНДСВознаграждения");
	СтруктураПолей.Вставить("НДС"         				, "СуммаНДСВознаграждения");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ДокументПоставки"          , "ДокументПоступления");
	СтруктураПолей.Вставить("Покупатель"                , "Покупатель");
	СтруктураПолей.Вставить("ДатаРеализации"            , "ДатаРеализации");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(
		ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(
			ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	
	// Формируем отдельную таблицу для Комиссионного вознаграждения.
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(
			ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	
	Если не ТаблицаПоУслугам.Колонки.Найти("ВидЦенности") = Неопределено Тогда
		ТаблицаПоУслугам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ПосредническиеУслуги, "ВидЦенности");
	КонецЕсли; 
	
КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		И ТипОснования <> Тип("ДокументСсылка.ЗаказПоставщику")
		И ТипОснования <> Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		возврат;
	КонецЕсли;

	СтавкаНДСВознаграждения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Сделку заполняем только если взаиморасчеты ведутся не по договору в целом
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Сделка = Основание.Сделка;
		КонецЕсли;

		Если Не ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Договор с контрагентом должен иметь вид договора с комитентом!");
			Возврат;
		КонецЕсли;

		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		Если Основание.Проведен Тогда
			ЗаполнитьРеализованными(Основание);
		КонецЕсли;

	КонецЕсли;

	ЗаполнитьДокументПоОснованиюУпр(Основание);

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента      = Товары.Итог("Сумма");
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения");
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
		
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Заполнение и проверка заполнения счетов учета доходов/расходов
	Если СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаШапки(
			СтруктураШапкиДокумента, Отказ, Заголовок, "УслугаПоВознаграждению");
	КонецЕсли;

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);
	
	Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом = Истина Тогда
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом", "ДокументРасчетовСКонтрагентом");
		СтруктураПолей.Вставить("ДатаОплаты"                   , "ДатаОплаты");
		СтруктураПолей.Вставить("СуммаВзаиморасчетов"          , "СуммаВзаиморасчетов");
		СтруктураПолей.Вставить("СуммаРегл"                    , "СуммаРегл");
	
		РезультатЗапросаПоДокументамРасчетовСКонтрагентами = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(
			ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураПолей);
		ТаблицаПоДокументамРасчетовСКонтрагентом = ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(
			РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента);
		ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(
			ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок);
	Иначе
		ТаблицаПоДокументамРасчетовСКонтрагентом = Неопределено;
	КонецЕсли;

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	ТаблицаПоДенежнымСредствам = Новый ТаблицаЗначений();
	Если НЕ Отказ И СтруктураШапкиДокумента.КонтролироватьДенежныеСредстваКомитента Тогда

		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ВидОтчетаПоПлатежам", "ВидОтчетаПоПлатежам");
		СтруктураПолей.Вставить("Сумма"              , "Сумма");
		СтруктураПолей.Вставить("СтавкаНДС"          , "СтавкаНДС");
		СтруктураПолей.Вставить("СуммаНДС"           , "СуммаНДС");

		РезультатЗапросаПоДенежнымСредствам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(
			ЭтотОбъект, "ДенежныеСредства", СтруктураПолей);

		// Подготовим таблицу денежных средств для проведения.
		ТаблицаПоДенежнымСредствам = ПодготовитьТаблицуДенежныхСредств(
			РезультатЗапросаПоДенежнымСредствам, СтруктураШапкиДокумента);

		// Проверить заполнение ТЧ "ДенежныеСредства"
		ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(
			ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента, Отказ, Заголовок);

	КонецЕсли;
	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
			ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
			мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам,
			ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура выполняет заполнение табличной части реализованными товарами
// на основании данных регистра "Реализованные товары комитента"
//
// ДокументПоставки - если задан, то заполняет товарами, полученными по 
//                    заданному документу
//
Процедура ЗаполнитьРеализованнымиУпр(ДокументПоставки = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументПоставки", 	ДокументПоставки);
	Запрос.УстановитьПараметр("ДатаОстатков",    	ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Сделка);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реализованные.Номенклатура,
	|	Реализованные.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	Реализованные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	Реализованные.ХарактеристикаНоменклатуры,
	|	Реализованные.СерияНоменклатуры,
	|	Реализованные.ДокументПоставки,
	|	Реализованные.Покупатель,
	|	Реализованные.ДатаРеализации,
	|//ЕстьДокПоставки	МАКСИМУМ(ВЫБОР
	|//ЕстьДокПоставки			КОГДА ТоварыПолученныеОбороты.КоличествоПриход < Полученные.КоличествоОстаток
	|//ЕстьДокПоставки				ТОГДА ТоварыПолученныеОбороты.КоличествоПриход
	|//ЕстьДокПоставки			ИНАЧЕ Полученные.КоличествоОстаток
	|//ЕстьДокПоставки		КОНЕЦ) КАК КоличествоПолученных,
	|//ЕстьДокПоставки	МАКСИМУМ(ВЫБОР
	|//ЕстьДокПоставки			КОГДА ТоварыПолученныеОбороты.СуммаВзаиморасчетовПриход < Полученные.СуммаВзаиморасчетовОстаток
	|//ЕстьДокПоставки				ТОГДА ТоварыПолученныеОбороты.СуммаВзаиморасчетовПриход
	|//ЕстьДокПоставки			ИНАЧЕ Полученные.СуммаВзаиморасчетовОстаток
	|//ЕстьДокПоставки		КОНЕЦ) КАК СуммаПоступления,
	|//НетДокПоставки	МАКСИМУМ(Полученные.КоличествоОстаток) КАК КоличествоПолученных,
	|//НетДокПоставки	МАКСИМУМ(Полученные.СуммаВзаиморасчетовОстаток) КАК СуммаПоступления,
	|	СУММА(Реализованные.ВыручкаОстаток) КАК Выручка,
	|	СУММА(Реализованные.КоличествоОстаток) КАК КоличествоРеализованных
	|ИЗ
	|	РегистрНакопления.РеализованныеТовары.Остатки(&ДатаОстатков, Организация = &Организация) КАК Реализованные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПолученные.Остатки(
	|				&ДатаОстатков,
	|				ДоговорКонтрагента = &ДоговорКонтрагента
	|					И Сделка = &Сделка) КАК Полученные
	|		ПО (Полученные.Номенклатура = Реализованные.Номенклатура)
	|			И (Полученные.ХарактеристикаНоменклатуры = Реализованные.ХарактеристикаНоменклатуры)
	|			И (Полученные.СерияНоменклатуры = Реализованные.СерияНоменклатуры)
	|//ЕстьДокПоставки		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПолученные.Обороты(, , Регистратор, ) КАК ТоварыПолученныеОбороты
	|//ЕстьДокПоставки		ПО Реализованные.Номенклатура = ТоварыПолученныеОбороты.Номенклатура
	|//ЕстьДокПоставки			И Реализованные.ХарактеристикаНоменклатуры = ТоварыПолученныеОбороты.ХарактеристикаНоменклатуры
	|//ЕстьДокПоставки			И Реализованные.СерияНоменклатуры = ТоварыПолученныеОбороты.СерияНоменклатуры
	|//ЕстьДокПоставки			И (ТоварыПолученныеОбороты.Регистратор = &ДокументПоставки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Реализованные.Номенклатура,
	|	Реализованные.ХарактеристикаНоменклатуры,
	|	Реализованные.СерияНоменклатуры,
	|	Реализованные.ДокументПоставки,
	|	Реализованные.Покупатель,
	|	Реализованные.ДатаРеализации,
	|	Реализованные.Номенклатура.ЕдиницаХраненияОстатков,
	|	Реализованные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент";	
	  
	Если ЗначениеЗаполнено(ДокументПоставки) ТОгда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ЕстьДокПоставки","");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//НетДокПоставки","");
	КонецЕсли;	
	   
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		КоличествоРеализованных = ?(Выборка.КоличествоРеализованных = NULL, 0, Выборка.КоличествоРеализованных);
		Если КоличествоРеализованных < 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Обнаружено отрицательное количество реализованных товаров " + Выборка.Номенклатура + " " + Выборка.ХарактеристикаНоменклатуры + " " + Выборка.СерияНоменклатуры);
			Продолжить;
		КонецЕсли;	
		КоличествоПолученных    = ?(Выборка.КоличествоПолученных = NULL, 0, Выборка.КоличествоПолученных);
		Если КоличествоПолученных < 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Обнаружено отрицательное количество полученных на комиссию товаров " + Выборка.Номенклатура + " " + Выборка.ХарактеристикаНоменклатуры + " " + Выборка.СерияНоменклатуры);
			Продолжить;
		КонецЕсли;
		Выручка                 = ?(Выборка.Выручка = NULL, 0, Выборка.Выручка);
		Количество              = Мин(КоличествоПолученных, КоличествоРеализованных);

		мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
		СтруктраКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета,Дата);
		Выручка	 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выручка,
			мВалютаУправленческогоУчета,
			ДоговорКонтрагента.ВалютаВзаиморасчетов,
			СтруктраКурса.Курс, 
			КурсВзаиморасчетов,
			СтруктраКурса.Кратность, 
			КратностьВзаиморасчетов);
		
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.ДокументПоступления        = ДокументПоставки;
		НоваяСтрока.Покупатель                 = Выборка.Покупатель;
		НоваяСтрока.ДатаРеализации             = Выборка.ДатаРеализации;
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		НоваяСтрока.Количество                 = Количество;
		НоваяСтрока.Сумма                      = ?(КоличествоРеализованных = 0, 0, Выручка * НоваяСтрока.Количество / КоличествоРеализованных);
		НоваяСтрока.СуммаПоступления           = ?(КоличествоПолученных = 0, 0, Выборка.СуммаПоступления * НоваяСтрока.Количество / КоличествоПолученных);
		НоваяСтрока.Цена                       = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		НоваяСтрока.ЦенаПоступления            = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.СуммаПоступления / НоваяСтрока.Количество);

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения
			                                    * НоваяСтрока.Сумма / 100;
			НоваяСтрока.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения,
																		Истина, Истина, 
																		УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		ИначеЕсли СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения
			                                    * (НоваяСтрока.Сумма - НоваяСтрока.СуммаПоступления) / 100;
			НоваяСтрока.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения,
																		Истина, Истина, 
																		УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРеализованными()

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Не ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Возврат;
		КонецЕсли;
		
		Если Основание.Проведен Тогда

			Сделка = Основание;
			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;

			ЗаполнитьТовары();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДокументПоОснованиюУпр()

//Заполняет счета учета номенклатуры и затрат в шапке документа
Процедура ЗаполнитьСчетаУчетаВШапке() Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаШапки(ЭтотОбъект, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Ложь, Истина, "УслугаПоВознаграждению");
	
КонецПроцедуры

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом"	, СчетаУчета.СчетРасчетовПокупателя);
		Если УдержатьКомиссионноеВознаграждение Тогда
			СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам"	, СчетаУчета.СчетРасчетовСКомитентом);
		Иначе
			СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам"	, СчетаУчета.СчетАвансовПокупателя);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;
	
КонецФункции

Функция ПодготовитьТаблицуУслуг(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС"               , Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаУслуг.Колонки.Добавить("СчетДоходовБУ"           , Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаУслуг.Колонки.Добавить("СчетУчетаНДС"            , Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаУслуг.Колонки.Добавить("СчетДоходовНУ"           , Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаУслуг.Колонки.Добавить("Сумма"                   , Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("НДС"                     , Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("Субконто1");
	ТаблицаУслуг.Колонки.Добавить("Субконто2");
	ТаблицаУслуг.Колонки.Добавить("Субконто3");
	ТаблицаУслуг.Колонки.Добавить("СубконтоНУ1");
	ТаблицаУслуг.Колонки.Добавить("СубконтоНУ2");
	ТаблицаУслуг.Колонки.Добавить("СубконтоНУ3");
	
	СтрокаУслуги = ТаблицаУслуг.Добавить();
	СтрокаУслуги.СтавкаНДС                = СтруктураШапкиДокумента.СтавкаНДСВознаграждения;
	СтрокаУслуги.СчетДоходовБУ            = СтруктураШапкиДокумента.СчетДоходовБУ;
	СтрокаУслуги.СчетУчетаНДС             = СтруктураШапкиДокумента.СчетУчетаНДСПоРеализации;
	СтрокаУслуги.СчетДоходовНУ            = СтруктураШапкиДокумента.СчетДоходовНУ;
	СтрокаУслуги.Субконто1                = СтруктураШапкиДокумента.СубконтоБУ;
	//СтрокаУслуги.Субконто2                = СтруктураШапкиДокумента.Субконто2;
	//СтрокаУслуги.Субконто3                = СтруктураШапкиДокумента.Субконто3;
	СтрокаУслуги.СубконтоНУ1              = СтруктураШапкиДокумента.СубконтоНУ;
	//СтрокаУслуги.СубконтоНУ2              = СтруктураШапкиДокумента.СубконтоНУ2;
	//СтрокаУслуги.СубконтоНУ3              = СтруктураШапкиДокумента.СубконтоНУ3;
	//Сумма должна быть без учета НДС если установлено что сумма не включает НДС (в реквизите шапки сумма всегда с НДС)
	СтрокаУслуги.Сумма                    = СтруктураШапкиДокумента.СуммаВознаграждения 
		- ?(СтруктураШапкиДокумента.СуммаВключаетНДС, 0, ТаблицаПоТоварам.Итог("НДСВознаграждения"));
	СтрокаУслуги.НДС                      = ТаблицаПоТоварам.Итог("НДСВознаграждения");
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПодготовитьТаблицуУслуг()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаПоУслугам)
					
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;				
	
	ТаблицаДвижений = Новый ТаблицаЗначений();				
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства, СправочникСсылка.Номенклатура"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаЦенности"	, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНДС"			, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("НДС"					, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаДвижений.Колонки.Добавить("НоменклатурнаяГруппа"	, Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаДвижений.Колонки.Добавить("СтатьяЗатрат"			, Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаДвижений.Колонки.Добавить("Субконто1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("Субконто2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("Субконто3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("Сделка"				, Документы.ТипВсеСсылки());
	
	УчетНДС.ПереименованиеКолонок(ТаблицаПоУслугам, Новый Структура("СчетДоходовНУ","СчетУчетаНУ"));
	
	НаборТаблиц = Новый Массив;
	НаборТаблиц.Добавить(ТаблицаПоУслугам);
	
	Для каждого ТекущаяТаблица Из НаборТаблиц Цикл
		Для каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
			СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
			
			СтрокаНовойТаблицы.СуммаВзаиморасчетов	= СтруктураПараметров.СуммаДокументаСНДС;
			СтрокаНовойТаблицы.НДС					= Окр(УчетНДС.РассчитатьСуммуНДС(СтрокаНовойТаблицы.СуммаВзаиморасчетов,
													 Истина, Истина,
													 УчетНДС.ПолучитьСтавкуНДС(СтрокаНовойТаблицы.СтавкаНДС)),2);
			СтрокаНовойТаблицы.СуммаСНДС			= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураПараметров.СуммаДокументаСНДС, 
													 СтруктураПараметров.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
													 СтруктураПараметров.КурсВзаиморасчетов, 1,
													 СтруктураПараметров.КратностьВзаиморасчетов, 1);

		КонецЦикла; 
	КонецЦикла; 
	
	СтруктураДляПереименованияКолонок = Новый Структура("НДС,СчетУчетаЦенности,СчетУчетаНДС,ПодразделениеОрганизации, СубконтоНУ1,СубконтоНУ2,СубконтоНУ3"
														,"СуммаНДС","КоррСчет","СчетНДС","Подразделение","СубконтоНУ1Базовое","СубконтоНУ2Базовое","СубконтоНУ3Базовое");
														
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, СтруктураДляПереименованияКолонок);
	УчетНДС.ПереименованиеКолонок(ТаблицаПоУслугам,	Новый Структура("СчетУчетаНУ", "СчетДоходовНУ"));
	
	ЧисловыеКолонкиСтрокой = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура = новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой = "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Не ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1",ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2",ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	КонецЕсли;
	Для Каждого Движение Из ТаблицаДвижений Цикл
		КоррСчет = Движение["КоррСчет"];
		Для каждого ВидСубконто из КоррСчет.ВидыСубконто Цикл
			ДопустимыеТипыСубконто = ВидСубконто.ВидСубконто.ТипЗначения;
			Если ЗначениеЗаполнено(Движение["СтатьяЗатрат"]) и не УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(Движение["СтатьяЗатрат"]) Тогда
				// Это услуги непроизводственного характера. При формировании проводок использовалась аналитика из ТЧ.  
				Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Субконто"+ВидСубконто.НомерСтроки])) Тогда
					Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["Субконто"+ВидСубконто.НомерСтроки];
                КонецЕсли;
			Иначе
				Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["СтатьяЗатрат"])) Тогда
					Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["СтатьяЗатрат"];
				ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["НоменклатурнаяГруппа"])) Тогда
					Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["НоменклатурнаяГруппа"];
				ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Подразделение"])) Тогда
					Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["Подразделение"];
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;	
		
		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
			СчетУчетаНУ = Движение["СчетУчетаНУ"];
			Для каждого ВидСубконто из СчетУчетаНУ.ВидыСубконто Цикл
				ДопустимыеТипыСубконто = ВидСубконто.ВидСубконто.ТипЗначения;
				Если ЗначениеЗаполнено(Движение["СтатьяЗатрат"]) и не УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(Движение["СтатьяЗатрат"]) Тогда
					// Это услуги непроизводственного характера. При формировании проводок использовалась аналитика из ТЧ.  
					Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["СубконтоНУ"+ВидСубконто.НомерСтроки+"Базовое"])) Тогда
						Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["СубконтоНУ"+ВидСубконто.НомерСтроки+"Базовое"];
	                КонецЕсли;
				Иначе
					Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["СтатьяЗатрат"])) Тогда
						Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["СтатьяЗатрат"];
					ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["НоменклатурнаяГруппа"])) Тогда
						Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["НоменклатурнаяГруппа"];
					ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Подразделение"])) Тогда
						Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["Подразделение"];
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
	
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	Иначе //.ПоСчетам или .ПоЗаказам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "Сделка");
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоВзаиморасчетам(СтруктураШапкиДокумента, Заголовок = Неопределено, СуммаДокументаСНДС, ТаблицаПоВзаиморасчетам = Неопределено ) Экспорт
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура(
		"ВидДокумента
		|, Организация, ВалютаРегламентированногоУчета
		|, ОрганизацияПрименяетУСН, ОтражатьВНалоговомУчете, ОтражатьВНалоговомУчетеУСН, ОтражатьВНалоговомУчетеУСНДоходы
		|, НДСВключенВСтоимость
		|, ВалютаДокумента, КурсДокумента, КратностьДокумента
		|, Контрагент, Сделка
		|, ДоговорКонтрагента, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС, ВедениеВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом
		|, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШапкиДокумента);
	                                                               
	// Зачет аванса по расчетам по приобретению выполняется по счету расчетов с комитентом.
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("СчетУчетаРасчетовСКонтрагентом", 	СчетаУчета.СчетРасчетовСКомитентом);
	СтруктураПараметров.Вставить("СчетУчетаРасчетовПоАвансам", 		СчетаУчета.СчетРасчетовСКомитентом);
	СтруктураПараметров.Вставить("ВидОперации", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);	
	СтруктураПараметров.Вставить("Заголовок",Заголовок);	
	
	СтруктураПараметров.Вставить("СуммаДокументаСНДС",СуммаДокументаСНДС);
	СтруктураПараметров.Вставить("Период",Дата);	
	СтруктураПараметров.Вставить("Дата",Дата);	
	СтруктураПараметров.Вставить("Ссылка",Ссылка);	
	
	//Определение вида операции
	СтруктураПараметров.Вставить("Направление", "Поступление");	
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	СтруктураПараметров.Вставить("РасчетыВозврат", 
		БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(
			СтруктураПараметров.ВидДокумента).РасчетыВозврат);
	
	Если СтруктураПараметров.РасчетыВозврат = Неопределено Тогда
		//Другие операции не обрабатываются
		ОбщегоНазначения.СообщитьОбОшибке("Документ не обрабатывается в блоке расчета авансов.", Ложь, Заголовок);
		Возврат Ложь;                                  
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
	
	//Будут заполнены в модуле зачета аванса
	СтруктураПараметров.Вставить("СуммаАвансаРег",0);
	СтруктураПараметров.Вставить("СуммаАвансаВал",0);

	СтруктураПараметров.Вставить("УчетАгентскогоНДС", Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров, СтруктураШапкиДокумента,	ТаблицаПоУслугам)
	
	Счет91    = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	Счет90_03 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	
	ТаблицаДвижений = Новый ТаблицаЗначений();
	
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя"		, Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСчет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоБУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетНДС"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаНДС"				, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		
	КонецЕсли;
	
	ПереименованиеКолонокРезультирующейТаблицы = Новый Структура();
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("КоррСчет", "СчетДоходовБУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СчетУчетаНУ", "СчетДоходовНУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СуммаНДС", "НДС");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы);
	
	Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		
		СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
		
		СтрокаНовойТаблицы.СчетНДС = СтрокаТаблицы.СчетУчетаНДС;
		
		СтрокаНовойТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаНовойТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
		
		//Если СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение Тогда
		//	СтрокаНовойТаблицы.СуммаСНДС = СтрокаНовойТаблицы.СуммаСНДС - СтрокаТаблицы.ВознаграждениеСНДСрегл;
		//	СтрокаНовойТаблицы.СуммаВзаиморасчетов = СтрокаНовойТаблицы.СуммаВзаиморасчетов - СтрокаТаблицы.ВознаграждениеСНДС;
		//	СтрокаНовойТаблицы.НДС = СтрокаНовойТаблицы.НДС - СтрокаТаблицы.СуммаНДСВознагражденияРегл;
		//КонецЕсли;
		
		КоррСчет = СтрокаНовойТаблицы.СчетДоходовБУ;
		
		Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
			ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
				СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
			ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) тогда
				СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
			Конецесли;
		КонецЦикла; 
		
		КоррСчет = СтрокаНовойТаблицы.СчетНДС;
		
		Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
			ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
				СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
			ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) ТОгда
				СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
			Конецесли;
		КонецЦикла; 
		
		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
			КоррСчет = СтрокаНовойТаблицы.СчетДоходовНУ;
			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.Номенклатура)) Тогда
					СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.Номенклатура;
				Конецесли;
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла; 
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы, Истина);
	
	ТаблицаДвижений.Колонки.ЗаказПокупателя.Имя = "Сделка";
	
	ЧисловыеКолонкиСтрокой = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура = новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой = "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Не ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоУслугам(СтруктураШапкиДокумента, Заголовок = Неопределено, СуммаДокументаСНДС, ТаблицаПоВзаиморасчетам = Неопределено ) Экспорт
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура(
		"ВидДокумента
		|, Организация, ВалютаРегламентированногоУчета
		|, ОрганизацияПрименяетУСН, ОтражатьВНалоговомУчете, ОтражатьВНалоговомУчетеУСН, ОтражатьВНалоговомУчетеУСНДоходы
		|, НДСВключенВСтоимость
		|, ВалютаДокумента, КурсДокумента, КратностьДокумента
		|, Контрагент, Сделка
		|, ДоговорКонтрагента, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС, ВедениеВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом
		|, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШапкиДокумента);
	                                                               
	СтруктураПараметров.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
	СтруктураПараметров.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам);
	СтруктураПараметров.Вставить("ВидОперации", Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);	
	СтруктураПараметров.Вставить("Заголовок",Заголовок);	
	
	СтруктураПараметров.Вставить("СуммаДокументаСНДС",СуммаДокументаСНДС);
	СтруктураПараметров.Вставить("Период",Дата);	
	СтруктураПараметров.Вставить("Дата",Дата);	
	СтруктураПараметров.Вставить("Ссылка",Ссылка);	
	
	//Определение вида операции
	СтруктураПараметров.Вставить("Направление", "Выбытие");	
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	СтруктураПараметров.Вставить("РасчетыВозврат", 
		БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(
			СтруктураПараметров.ВидДокумента).РасчетыВозврат);
	
	Если СтруктураПараметров.РасчетыВозврат = Неопределено Тогда
		//Другие операции не обрабатываются
		ОбщегоНазначения.СообщитьОбОшибке("Документ не обрабатывается в блоке расчета авансов.", Ложь, Заголовок);
		Возврат Ложь;                                  
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
	
	//Будут заполнены в модуле зачета аванса
	СтруктураПараметров.Вставить("СуммаАвансаРег",0);
	СтруктураПараметров.Вставить("СуммаАвансаВал",0);

	СтруктураПараметров.Вставить("УчетАгентскогоНДС", Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейШапкиРегл()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
		ТаблицаПоУслугам, Отказ, Заголовок)

	ДатаДок    = Дата;

	ВалютаРег  = мВалютаРегламентированногоУчета;
	Данные     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	
	// Движения по взаиморасчетам на сумму долга. Если комиссионное вознаграждение удерживается, то на него уменьшаем сумму долга.
	СуммаДолга = ?(СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение, СтруктураШапкиДокумента.СуммаДокумента - СтруктураШапкиДокумента.СуммаВознаграждения, СтруктураШапкиДокумента.СуммаДокумента);
	СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоВзаиморасчетам(СтруктураШапкиДокумента, Заголовок, СуммаДолга);
	
	Если НЕ СтруктураПараметровЗачетАванса = Ложь Тогда
		
		ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураПараметровЗачетАванса,
				СтруктураШапкиДокумента, ТаблицаПоУслугам);
		СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, 
				ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению);
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
		Конецесли;
		БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса, 
				мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ, , Истина);
	Конецесли;
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		И (ТаблицаПоУслугам.Итог("СуммаБезНДС") + ТаблицаПоУслугам.Итог("НДС")) > 0) Тогда
		Возврат;
	КонецЕсли; 
	
	// Реализацию услуги комиссионного вознаграждения фиксируем только тогда, когда оно не удерживается.
	Если НЕ СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение Тогда 
	
		СуммаПоУслугам = ТаблицаПоУслугам.Итог("СуммаБезНДСВал") + ТаблицаПоУслугам.Итог("НДСВал");
		СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоУслугам(СтруктураШапкиДокумента, Заголовок, СуммаПоУслугам);
		
		Если СтруктураПараметровЗачетАванса = Ложь Тогда
		   ТаблицаАвансов = 0;
		Иначе
			ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметровЗачетАванса, 
					СтруктураШапкиДокумента, ТаблицаПоУслугам);
			ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса,
						ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации);
		КонецЕсли;

		Если не ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
				СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
			Конецесли;
			БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса,
						мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
		Конецесли;
	
	КонецЕсли;
	
	// Сформируем проводку по переносу задолженности на счет учета расчетов за комиссионные товары.
	
	Если СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		И ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам) 
		И СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам <> СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом
		Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Оказание услуг по договору комиссии";
		
		Проводка.Сумма       = ТаблицаПоУслугам.Итог("СуммаБезНДС") + ТаблицаПоУслугам.Итог("НДС");
		
		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
		
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = ТаблицаПоУслугам.Итог("СуммаБезНДСВал") + ТаблицаПоУслугам.Итог("НДСВал");
		КонецЕсли;
		
		Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
		
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = ТаблицаПоУслугам.Итог("СуммаБезНДСВал") + ТаблицаПоУслугам.Итог("НДСВал");
		КонецЕсли;
		
	КонецЕсли; 
	
	// Проводка по выручке, бухгалтерский учет
	
	Проводка   = ПроводкиБУ.Добавить();

	Проводка.Период      = ДатаДок;
	Проводка.Организация = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание  = "Оказание услуг по договору комиссии";
	
	Проводка.Сумма		 = ТаблицаПоУслугам.Итог("СуммаБезНДС") + ТаблицаПоУслугам.Итог("НДС");
	
	Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	Если СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
		Проводка.ВалютнаяСуммаДт = ТаблицаПоУслугам.Итог("СуммаБезНДСВал") + ТаблицаПоУслугам.Итог("НДСВал");
		Проводка.ВалютаДт    	 = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Проводка.СчетКт = СтруктураШапкиДокумента.СчетДоходовБУ;
	//Установим субконто, совпадающее по типу с заданным в документе
	Для каждого СубконтоСчета Из Проводка.СчетКт.ВидыСубконто Цикл
		Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ)) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,СубконтоСчета.НомерСтроки, СтруктураШапкиДокумента.СубконтоБУ);
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтруктураШапкиДокумента.СтавкаНДСВознаграждения);

	ОплаченоУслуг = Проводка.Сумма;

	// Проводка по выручке, налоговый учет
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

		Проводка = ПроводкиНУ.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Оказание услуг по договору комиссии";
				
		Проводка.СчетДт                   = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
		Проводка.СубконтоДт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
		Проводка.СубконтоДт.Контрагенты   = СтруктураШапкиДокумента.Контрагент;
		Проводка.СубконтоДт.Договоры      = СтруктураШапкиДокумента.ДоговорКонтрагента;

		Проводка.СчетКт                   = СтруктураШапкиДокумента.СчетДоходовНУ;
		Для каждого СубконтоСчета Из Проводка.СчетКт.ВидыСубконто Цикл
			Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтруктураШапкиДокумента.СубконтоНУ)) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,СубконтоСчета.НомерСтроки, СтруктураШапкиДокумента.СубконтоНУ);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтруктураШапкиДокумента.УслугаПоВознаграждению);

		Проводка.Сумма       = ТаблицаПоУслугам.Итог("СуммаБезНДС");
		
	КонецЕсли;

	// Проводка по НДС
	
	СуммаНДС = ТаблицаПоУслугам.Итог("НДС");

	Если СуммаНДС > 0 Тогда

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период      = ДатаДок;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Оказание услуг по договору комиссии";
		Проводка.Сумма       = СуммаНДС;

		Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаНДСПоРеализации;
		
		Для каждого СубконтоСчета Из Проводка.СчетДт.ВидыСубконто Цикл
			Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтруктураШапкиДокумента.СубконтоБУ)) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,СубконтоСчета.НомерСтроки, СтруктураШапкиДокумента.СубконтоБУ);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СтавкиНДС",СтруктураШапкиДокумента.СтавкаНДСВознаграждения);

		Если СтруктураШапкиДокумента = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", Ссылка);
		Иначе
 			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Вызывается из тела процедуры "ДвиженияПоРегистрам" в процедуре формируются движения, отражающие
// поступление доп. расходов в подсистеме учета УСН.
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если (Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН) Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений = Движения.РасходыПриУСН;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаДвижений, 
							Перечисления.ВидыРасходовУСН.Услуги, СтруктураШапкиДокумента.ДоговорКонтрагента,
							Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
																
	//Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
			
КонецПроцедуры

Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента)
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДляДокументовРасчетов = Новый Структура;
мСтруктураПараметровДляДокументовРасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары"));
мСтруктураПараметровДляДокументовРасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровДляДокументовРасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровДляДокументовРасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");


мСтруктураПараметровДляПолученияДоговора = Новый Структура();
мСписокДопустимыхВидовДоговоров = Новый СписокЗначений();
мСписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокДопустимыхВидовДоговоров);