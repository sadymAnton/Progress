Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета;

Перем мМожноЗагружать Экспорт; //Если есть рейсы которые нельзя удалять
//начало изменений Ожиганов 18.07.2015 избавимвся от лишней перезаписи  
Перем ПРГ_РеквРейсов;
//конец изменений 
//начало изменений Ожиганов А. б/н добавление ограничений доставка до ж/д станции 25.10.2016 
Перем ПРГ_ИспользоватьОграниченияПоЖд Экспорт;
Перем ПРГ_ИспользоватьОбменСТендернойПлощадкой Экспорт;
//конец изменений 
//начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
Перем ПРГ_ПроверятьРегионИГород Экспорт;
Перем ПРГ_ПроверятьИсключенныеЗадания Экспорт;
 //конец изменений 
//начало изменений Ожиганов А. б/н Кириченко оищаем определенные реквизиты при копировании 25.11.2016 

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли; 
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,, Ссылка));
		
КонецПроцедуры // Печать
	
// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
	Возврат Новый Структура();
		
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
	//перенесем ниже
	//Если мУдалятьДвижения Тогда
	//	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	//КонецЕсли;
	Заголовок = НСтр("ru = 'Проведение документа """ + СокрЛП(Ссылка) + """: '");
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке(),
	ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект), мВалютаРегламентированногоУчета);
	//конец изменений 
	
	/// Кунов О.В., 18.06.2015 - 40343
	//начало изменений Ожиганов 18.07.2015 избавимвся от лишней перезаписи  
//	Если ЕстьНеподобранныеЗаданияНаПеревозку() Тогда
   //начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
   //перенесем  проверку в ПроверитьЗаполнениеТабличнойЧастиЗаданияНаПеревозку
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//					  |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку
	//					  |ИЗ
	//					  |	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	//					  |ГДЕ
	//					  |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка
	//					  |	И ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНАПодбор.ПустаяСсылка)
	//					  //blik 071116 57270 н
	//					  |И НЕ ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)");
	//					  //blik 071116 57270 к
	//					  
	//Запрос.УстановитьПараметр("Ссылка",Ссылка);					  
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Есть неподобранные задания не перевозку!", Отказ);
	//КонецЕсли;	
//	КонецЕсли;
	///
	//конец изменений 
	
	//начало изменений Ожиганов А. б/н добавление ограничений доставка до ж/д станции 25.10.2016 
	//начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
	//перенесем проверку в ПроверитьЗаполнениеТабличнойЧастиЗаданияНаПеревозку
	//ПРГ_ПроверитьУсловияПоставки(Отказ);
	//конец изменений 
	//начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
	ПроверитьЗаполнениеТабличнойЧастиЗаданияНаПеревозку(СтруктураШапкиДокумента, Отказ, Заголовок);
	//конец изменений 
	Если Отказ Тогда
		возврат;
	КонецЕсли;	
	
	//начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	//конец изменений 
	
	//конец изменений 
	
	Если ЭтоНовый() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сначала запишите документ", Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	//начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
	//перенесемм выше
	//Заголовок = НСтр("ru = 'Проведение документа """ + СокрЛП(Ссылка) + """: '");
	//конец изменений 
	
		
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	//СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке(),
	//ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект), мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверить заполнение ТЧ "Маршруты".
	ПроверитьЗаполнениеТабличнойЧастиМаршруты(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "ЗаданияНаПеревозку".
	//начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
	//перенесем выше 
	//ПроверитьЗаполнениеТабличнойЧастиЗаданияНаПеревозку(СтруктураШапкиДокумента, Отказ, Заголовок);
	//конец изменений 
	 	
	// Подготовим таблицу СоставПлана для проведения.
	ТаблицаПоСоставПлана = ПодготовитьТаблицуСоставПлана(СтруктураШапкиДокумента);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, ТаблицаПоСоставПлана, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ИзменитьСтатусыЗаданийНаПеревозку(Отказ);
	КонецЕсли;
			
КонецПроцедуры

Процедура ИзменитьСтатусПланаДоставкиНаГотов()

	//{05.09.2016 Островерхий заявка №48833
	//{22.09.2017 Островерхий заявка №б/н 
	//Если ЗначениеЗаполнено(GUIDТендернойПлощадки) Тогда 
	//22.09.2017 Островерхий} 
		
		ЕстьРейсыСНезаполненнойОбязательнойИнформацией = Ложь;
		Для каждого СтрокаТЧ Из Маршруты Цикл
			Если НЕ СтрокаТЧ.Исключен И НЕ СтрокаТЧ.Самовывоз Тогда 
				ЕстьРейсыСНезаполненнойОбязательнойИнформацией = СтрокаТЧ.ТЭК.Пустая() ИЛИ СтрокаТЧ.Водитель.Пустая() ИЛИ СтрокаТЧ.ТранспортноеСредство.Пустая() ИЛИ СтрокаТЧ.СтоимостьПеревозки = 0;
				Если ЕстьРейсыСНезаполненнойОбязательнойИнформацией Тогда
					Прервать;
				КонецЕсли; 	
			КонецЕсли; 
		КонецЦикла; 
		
		//По всем рейсам есть ставки и заполнена информация о ТС и водителе
		Если НЕ ЕстьРейсыСНезаполненнойОбязательнойИнформацией
			И СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Тендер Тогда 
			
			//меняем статус документа на готов	
			СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Готов;
			
		КонецЕсли;
	//{22.09.2017 Островерхий заявка №б/н 
	//КонецЕсли; 
	//22.09.2017 Островерхий} 	
	//05.09.2016 Островерхий}

КонецПроцедуры
 
Процедура ЗаписатьИзменениеСтатусов(Отказ) Экспорт
	
	//Движения по регистру накопления "АП_СтатусыДокументов"
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		СформируемЗаписьПоРегиструСтатусы();
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = СтатусДокумента Тогда
	    СформируемЗаписьПоРегиструСтатусы();
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструСтатусы()

	мДатаЗаписи = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = СтатусДокумента;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры  

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//Создадим рейсы
	Для каждого СтрМаршруты Из Маршруты Цикл
		Если ЭтоНовый() Тогда
			СтрМаршруты.Рейс = Справочники.ПТЛ_Рейсы.ПустаяСсылка();
			
		ИначеЕсли (РежимЗаписи = РежимЗаписиДокумента.Запись ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) 
			И ПометкаУдаления Тогда		//Не обрабатываем пометку удаления
			
			Если ЗначениеЗаполнено(СтрМаршруты.Рейс) И Не СтрМаршруты.Рейс.ПометкаУдаления Тогда
				ОбъектРейс = СтрМаршруты.Рейс.ПолучитьОбъект();
				ОбъектРейс.ПометкаУдаления = Истина;
				Попытка
					ОбъектРейс.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			СтрМаршруты.Рейс = СформироватьЗаписьРейса(СтрМаршруты, Отказ);
		КонецЕсли;	
	КонецЦикла;
	//начало изменений Ожиганов 19.05.2016 б/н регистрация плана доставки в таблице изменений только при необходимости, попытаемся исключить блокировки при выгрузке 
	Если Не Отказ Тогда
		 ДополнительныеСвойства.Удалить("НеРегистрироватьВПланеОбмена");
		 Если Не ПРГ_ОпределитьНужнолиРегистрироватьПланДоставки(РежимЗаписи) Тогда
			 ДополнительныеСвойства.Вставить("НеРегистрироватьВПланеОбмена");
		 КонецЕсли; 
		 
		 //{08.09.2016 Островерхий заявка №48833 
		 Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			 И НЕ ЭтоНовый() Тогда
		
			 ИзменитьСтатусПланаДоставкиНаГотов();
		
		КонецЕсли;  
		//08.09.2016 Островерхий}
		 
	 КонецЕсли;	
	//конец изменений 
	//начало изменений Ожиганов А. 17.03.2017 63437 Время подачи ТС в зависимости отделения 
	Если ЗначениеЗаполнено(Отделение) и (СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Новый или СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен) Тогда
		ПРГГ_ВремяПодачи = Отделение.ВремяПодачиТС;
		Если Час(ПРГГ_ВремяПодачи) > 0 или Минута(ПРГГ_ВремяПодачи) > 0 Тогда
			НовоеВремя = Час(ПРГГ_ВремяПодачи)*3600+Минута(ПРГГ_ВремяПодачи)*60;
			Для Каждого ТекСтрока Из Маршруты Цикл
				Если НачалоДня(ТекСтрока.ВремяПодачиТС) = ТекСтрока.ВремяПодачиТС и не ТекСтрока.Исключен Тогда
					ТекСтрока.ВремяПодачиТС = ТекСтрока.ВремяПодачиТС+НовоеВремя;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 
	//начало изменений Ожиганов А. б/н добавление ограничений доставка до ж/д станции 25.10.2016
	ПРГ_ОпределитьИспользоватьОбменСТендернойПлощадкой();
	//конец изменений 
КонецПроцедуры

Функция СформироватьЗаписьРейса(СтрМаршруты, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(СтрМаршруты.Рейс) Тогда
		ОбъектРейс = СтрМаршруты.Рейс.ПолучитьОбъект();
		Если ОбъектРейс = Неопределено Тогда
			ОбъектРейс = Справочники.ПТЛ_Рейсы.СоздатьЭлемент();
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	ПТЛ_Рейсы.Ссылка КАК Рейс
		               |ИЗ
		               |	Справочник.ПТЛ_Рейсы КАК ПТЛ_Рейсы
		               |ГДЕ
		               |	ПТЛ_Рейсы.ПланДоставки = &Ссылка
		               |	И ПТЛ_Рейсы.КлючСтроки = &КлючСтроки
		               |
		               |ДЛЯ ИЗМЕНЕНИЯ
		               |	Справочник.ПТЛ_Рейсы";
					   
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("КлючСтроки", СтрМаршруты.КлючСтроки);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ОбъектРейс = Результат.Рейс.ПолучитьОбъект();
		Иначе
			ОбъектРейс = Справочники.ПТЛ_Рейсы.СоздатьЭлемент();
		КонецЕсли;
	КонецЕсли;
	
	//начало изменений Ожиганов 18.07.2015 избавимвся от лишней перезаписи  
	Если ПРГ_РеквРейсов = Неопределено Тогда
		ПРГ_РеквРейсов = Новый Структура;
		МетаРеквРейса = Метаданные.Справочники.ПТЛ_Рейсы.Реквизиты;
		Для Каждого ТекЭлемПРГ  ИЗ Метаданные.Документы.ПТЛ_ПланДоставки.ТабличныеЧасти.Маршруты.Реквизиты Цикл
			Если МетаРеквРейса.Найти(ТекЭлемПРГ.Имя) <> Неопределено Тогда
				ПРГ_РеквРейсов.Вставить(ТекЭлемПРГ.Имя);
			КонецЕсли;	
		КонецЦикла;	
		ПРГ_РеквРейсов.Вставить("ПланДоставки");
		ПРГ_РеквРейсов.Вставить("ДатаОтгрузки");
		ПРГ_РеквРейсов.Вставить("Наименование");
		ПРГ_РеквРейсов.Вставить("ПометкаУдаления");
	КонецЕсли;	
	
	аОбъектРейс = ПРГ_РеквРейсов;
	ЗаполнитьЗначенияСвойств(аОбъектРейс, СтрМаршруты);
	аОбъектРейс.ПланДоставки = Ссылка;
	аОбъектРейс.ДатаОтгрузки = ДатаОтгрузки;
	аОбъектРейс.Наименование = "Рейс № " + СокрЛП(СтрМаршруты.КлючСтроки) + " План № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	аОбъектРейс.ПометкаУдаления = Ложь;
	
	Для Каждого ТекЭлемПРГ Из аОбъектРейс Цикл
		Если ОбъектРейс[ТекЭлемПРГ.Ключ] <> аОбъектРейс[ТекЭлемПРГ.Ключ] Тогда
			ОбъектРейс[ТекЭлемПРГ.Ключ] = аОбъектРейс[ТекЭлемПРГ.Ключ];
		КонецЕсли;
	КонецЦикла;	
		
	Попытка
	
		Если ОбъектРейс.Модифицированность() Тогда
			ОбъектРейс.Записать();
		КонецЕсли;	
	 //конец изменений 	
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
		Возврат Справочники.ПТЛ_Рейсы.ПустаяСсылка();
	КонецПопытки;
	
	Возврат ОбъектРейс.Ссылка;
	
КонецФункции


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДатаОтгрузки, Организация, Отделение");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//{30.03.2017 Островерхий заявка №б/н 
	ПроверитьЧтоДатаОтгрузкиМеньшеДатыДоставки(Отказ, Заголовок); 
	//30.03.2017 Островерхий} 
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// ПроверитьЧтоДатаОтгрузкиМеньшеДатыДоставки(Отказ, Заголовок)
//
Процедура ПроверитьЧтоДатаОтгрузкиМеньшеДатыДоставки(Отказ, Заголовок)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПТЛ_ПланДоставкиМаршруты.Ссылка,
		|	ПТЛ_ПланДоставкиМаршруты.Рейс,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПТЛ_ПланДоставкиМаршруты.Рейс),
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ПТЛ_ПланДоставкиМаршруты.Ссылка.ДатаОтгрузки, ЧАС, ЧАС(ПТЛ_ПланДоставкиМаршруты.ВремяПодачиТС)), МИНУТА, МИНУТА(ПТЛ_ПланДоставкиМаршруты.ВремяПодачиТС)) КАК ДатаВремяОтгрузки,
		|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ДатаДоставки КАК ДатаВремяДоставки
		|ИЗ
		|	Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
		|		ПО ПТЛ_ПланДоставкиМаршруты.Ссылка = ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка
		|			И ПТЛ_ПланДоставкиМаршруты.КлючСтроки = ПТЛ_ПланДоставкиЗаданияНаПеревозку.КлючСтроки
		|			И (ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ПТЛ_ПланДоставкиМаршруты.Ссылка.ДатаОтгрузки, ЧАС, ЧАС(ПТЛ_ПланДоставкиМаршруты.ВремяПодачиТС)), МИНУТА, МИНУТА(ПТЛ_ПланДоставкиМаршруты.ВремяПодачиТС)) > ПТЛ_ПланДоставкиЗаданияНаПеревозку.ДатаДоставки)
		|			И (ПТЛ_ПланДоставкиМаршруты.Ссылка = &Ссылка)";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбщегоНазначения.СообщитьОбОшибке("По рейсу '"+ВыборкаДетальныеЗаписи.РейсПредставление+"' дата отгрузки больше даты доставки", ?(РольДоступна("ПолныеПрава"),Ложь,Отказ), Заголовок);
	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоДатаОтгрузкиМеньшеДатыДоставки(Отказ, Заголовок)
  

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоСоставПлана - результат запроса по табличной части "СоставПлана",
//  ВыборкаПоШапкеДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСоставПлана(ВыборкаПоШапкеДокумента)

	ТаблицаСоставПлана = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПТЛ_ПланДоставкиМаршруты.Рейс КАК Рейс,
	               |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка КАК ПланДоставки,
	               |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	               |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Исключено,
	               |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ДатаДоставки,
	               |	ПТЛ_ПланДоставкиМаршруты.Маршрут,
	               |	ПТЛ_ПланДоставкиМаршруты.ТЭК,
	               |	ПТЛ_ПланДоставкиМаршруты.Водитель,
	               |	ПТЛ_ПланДоставкиМаршруты.ТранспортноеСредство,
	               |	ПТЛ_ПланДоставкиМаршруты.ПриоритетОтгрузки,
	               |	ПТЛ_ПланДоставкиМаршруты.ВремяПодачиТС,
	               |	ПТЛ_ПланДоставкиМаршруты.СтоимостьПеревозки КАК Стоимость,
	               |	ПТЛ_ПланДоставкиМаршруты.ТипТранспорта,
	               |	ПТЛ_ПланДоставкиМаршруты.Самовывоз
	               |ИЗ
	               |	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
	               |		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.КлючСтроки = ПТЛ_ПланДоставкиМаршруты.КлючСтроки
	               |			И ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = ПТЛ_ПланДоставкиМаршруты.Ссылка
	               |ГДЕ
	               |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка";
				   
	//начало изменений Ожиганов 17.07.2015 немного оптимизируем 
	Запрос.Текст =	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА НЕ ВнутреннийЗаказ.КП_КоличествоПаллетоМест ЕСТЬ NULL 
	|			ТОГДА ВнутреннийЗаказ.КП_КоличествоПаллетоМест
	|		КОГДА НЕ ЗаказПокупателя.КП_КоличествоПаллетоМест ЕСТЬ NULL 
	|			ТОГДА ЗаказПокупателя.КП_КоличествоПаллетоМест
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КП_КоличествоПаллетоМест,
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку
	|ПОМЕСТИТЬ ПалеттоМест
	|ИЗ
	|	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|			ПО ПТЛ_ЗаданиеНаПеревозку.Заказ = ЗаказПокупателя.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннийЗаказ КАК ВнутреннийЗаказ
	|			ПО ПТЛ_ЗаданиеНаПеревозку.Заказ = ВнутреннийЗаказ.Ссылка
	|		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку = ПТЛ_ЗаданиеНаПеревозку.Ссылка
	|ГДЕ
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	|	ВЫБОР
	|		КОГДА НЕ ВнутреннийЗаказ.КП_КоличествоПаллетоМест ЕСТЬ NULL 
	|			ТОГДА ВнутреннийЗаказ.КП_КоличествоПаллетоМест
	|		КОГДА НЕ ЗаказПокупателя.КП_КоличествоПаллетоМест ЕСТЬ NULL 
	|			ТОГДА ЗаказПокупателя.КП_КоличествоПаллетоМест
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|;
	//Blik 081116 57270 н 
	|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	//|	СУММА(ВЫБОР
	//|			КОГДА Заказпоставщику.КоличествоМест = 0
	//|				ТОГДА Заказпоставщику.ЕдиницаИзмерения.Вес * Заказпоставщику.Количество
	//|			ИНАЧЕ Заказпоставщику.ЕдиницаИзмеренияМест.Вес * Заказпоставщику.КоличествоМест
	//|		КОНЕЦ) / 1000 КАК ВесБрутто,
	//|	СУММА(ВЫБОР
	//|			КОГДА Заказпоставщику.КоличествоМест = 0
	//|				ТОГДА Заказпоставщику.ЕдиницаИзмерения.Объем * Заказпоставщику.Количество
	//|			ИНАЧЕ Заказпоставщику.ЕдиницаИзмеренияМест.Объем * Заказпоставщику.КоличествоМест
	//|		КОНЕЦ) / 1000 КАК Объем,
	//|	СУММА(ВЫБОР
	//|			КОГДА Заказпоставщику.КоличествоМест = 0
	//|				ТОГДА Заказпоставщику.ЕдиницаИзмерения.ПРГ_Нетто * Заказпоставщику.Количество
	//|			ИНАЧЕ Заказпоставщику.ЕдиницаИзмеренияМест.ПРГ_Нетто * Заказпоставщику.КоличествоМест
	//|		КОНЕЦ) / 1000 КАК ВесНетто,
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказпоставщику.Номенклатура) КАК КоличествоПозиций,
	//|	Заказпоставщику.Ссылка КАК ЗаказПоставщику,
	//|	СУММА(Заказпоставщику.КоличествоМест) КАК КоличествоМест
	//|ПОМЕСТИТЬ ТабВесаЗаказПоставщику
	//|ИЗ
	//|	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
	//|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК Заказпоставщику
	//|			ПО ПТЛ_ЗаданиеНаПеревозку.Заказ = Заказпоставщику.Ссылка
	//|				И ПТЛ_ЗаданиеНаПеревозку.ДатаОтгрузкиПлан = Заказпоставщику.ТП_ДатаОтгрузкитч
	//|				И ПТЛ_ЗаданиеНаПеревозку.ДатаДоставкиПлан = Заказпоставщику.ДатаПоставки
	//|		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку = ПТЛ_ЗаданиеНаПеревозку.Ссылка
	//|ГДЕ
	//|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка
	//|	И Заказпоставщику.ЕдиницаИзмерения.ПРГ_Нетто + Заказпоставщику.ЕдиницаИзмерения.ПРГ_Нетто > 0
	//|	И ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	//|	Заказпоставщику.Ссылка
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	|ПТЛ_ЗаданиеНаПеревозку.ТП_ВесБрутто КАК ВесБрутто,
	|ПТЛ_ЗаданиеНаПеревозку.ТП_Объем КАК Объем,
	|ПТЛ_ЗаданиеНаПеревозку.ТП_ВесНетто КАК ВесНетто,
	|КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПТЛ_ЗаданиеНаПеревозкуТП_Товары.Номенклатура) КАК КоличествоПозиций,
	|ПТЛ_ЗаданиеНаПеревозку.Заказ КАК ЗаказПоставщику,
	|СУММА(ПТЛ_ЗаданиеНаПеревозку.ТП_КоличествоПалеттоМест) КАК КоличествоМест
	|ПОМЕСТИТЬ ТабВесаЗаказПоставщику
	|ИЗ
	|	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
	|		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку = ПТЛ_ЗаданиеНаПеревозку.Ссылка
	|		Левое СОЕДИНЕНИЕ Документ.ПТЛ_ЗаданиеНаПеревозку.ТП_Товары КАК ПТЛ_ЗаданиеНаПеревозкуТП_Товары
	|		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку = ПТЛ_ЗаданиеНаПеревозкуТП_Товары.Ссылка
	|ГДЕ
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка
	|	И ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	|	ПТЛ_ЗаданиеНаПеревозку.Заказ,
	|	ПТЛ_ЗаданиеНаПеревозку.ТП_ВесБрутто,
	|	ПТЛ_ЗаданиеНаПеревозку.ТП_Объем,
	|	ПТЛ_ЗаданиеНаПеревозку.ТП_ВесНетто
	//Blik 081116 57270  к
	//Blik 65458 220817 н
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	|	СУММА(ВЫБОР
	|			КОГДА ВнутреннийЗаказТовары.Количество = 0
	|				ТОГДА ВнутреннийЗаказТовары.ЕдиницаИзмерения.Вес * ВнутреннийЗаказТовары.Количество
	|			ИНАЧЕ ВнутреннийЗаказТовары.ЕдиницаИзмеренияМест.Вес * ВнутреннийЗаказТовары.КоличествоМест
	|		КОНЕЦ) / 1000 КАК ВесБрутто,
	|	СУММА(ВЫБОР
	|			КОГДА ВнутреннийЗаказТовары.КоличествоМест = 0
	|				ТОГДА ВнутреннийЗаказТовары.ЕдиницаИзмерения.Объем * ВнутреннийЗаказТовары.Количество
	|			ИНАЧЕ ВнутреннийЗаказТовары.ЕдиницаИзмеренияМест.Объем * ВнутреннийЗаказТовары.КоличествоМест
	|		КОНЕЦ) / 1000 КАК Объем,
	|	СУММА(ВЫБОР
	|			КОГДА ВнутреннийЗаказТовары.КоличествоМест = 0
	|				ТОГДА ВнутреннийЗаказТовары.ЕдиницаИзмерения.ПРГ_Нетто * ВнутреннийЗаказТовары.Количество
	|			ИНАЧЕ ВнутреннийЗаказТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * ВнутреннийЗаказТовары.КоличествоМест
	|		КОНЕЦ) / 1000 КАК ВесНетто,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВнутреннийЗаказТовары.Номенклатура) КАК КоличествоПозиций,
	|	ВнутреннийЗаказТовары.Ссылка КАК ЗаданиеНаПодбор,
	|	СУММА(ВнутреннийЗаказТовары.КоличествоМест) КАК КоличествоМест
	|ПОМЕСТИТЬ ТабВесаКопекер
	|ИЗ
	|	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
	|			ПО ПТЛ_ЗаданиеНаПеревозку.Заказ = ВнутреннийЗаказТовары.Ссылка
	|		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку = ПТЛ_ЗаданиеНаПеревозку.Ссылка
	|ГДЕ
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка
	|	И ВнутреннийЗаказТовары.ЕдиницаИзмерения.ПРГ_Нетто + ВнутреннийЗаказТовары.ЕдиницаИзмерения.ПРГ_Нетто > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	|	ВнутреннийЗаказТовары.Ссылка
	//Blik 65458 220817 к
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	|	СУММА(ВЫБОР
	|			КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест = 0
	|				ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Вес * СП_ЗаданиеНаПодборТовары.Количество
	|			ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Вес * СП_ЗаданиеНаПодборТовары.КоличествоМест
	|		КОНЕЦ) / 1000 КАК ВесБрутто,
	|	СУММА(ВЫБОР
	|			КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест = 0
	|				ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.Объем * СП_ЗаданиеНаПодборТовары.Количество
	|			ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Объем * СП_ЗаданиеНаПодборТовары.КоличествоМест
	|		КОНЕЦ) / 1000 КАК Объем,
	|	СУММА(ВЫБОР
	|			КОГДА СП_ЗаданиеНаПодборТовары.КоличествоМест = 0
	|				ТОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.Количество
	|			ИНАЧЕ СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто * СП_ЗаданиеНаПодборТовары.КоличествоМест
	|		КОНЕЦ) / 1000 КАК ВесНетто,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СП_ЗаданиеНаПодборТовары.Номенклатура) КАК КоличествоПозиций,
	|	СП_ЗаданиеНаПодборТовары.Ссылка КАК ЗаданиеНаПодбор,
	|	СУММА(СП_ЗаданиеНаПодборТовары.КоличествоМест) КАК КоличествоМест
	|ПОМЕСТИТЬ ТабВеса
	|ИЗ
	|	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СП_ЗаданиеНаПодбор.Товары КАК СП_ЗаданиеНаПодборТовары
	|			ПО ПТЛ_ЗаданиеНаПеревозку.ЗаданиеНаПодбор = СП_ЗаданиеНаПодборТовары.Ссылка
	|		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку = ПТЛ_ЗаданиеНаПеревозку.Ссылка
	|ГДЕ
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка
	|	И СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.ПРГ_Нетто + СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения.ПРГ_Нетто > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	|	СП_ЗаданиеНаПодборТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПТЛ_ПланДоставкиМаршруты.Рейс КАК Рейс,
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка КАК ПланДоставки,
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Исключено,
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ДатаДоставки,
	|	ПТЛ_ПланДоставкиМаршруты.Маршрут,
	|	ПТЛ_ПланДоставкиМаршруты.ТЭК,
	|	ПТЛ_ПланДоставкиМаршруты.Водитель,
	|	ПТЛ_ПланДоставкиМаршруты.ТранспортноеСредство,
	/// Кунов О.В., 26.10.2016 - 58421
	|	ПТЛ_ПланДоставкиМаршруты.Коментарий,
	///
	|	ПТЛ_ПланДоставкиМаршруты.ПриоритетОтгрузки,
	|	ПТЛ_ПланДоставкиМаршруты.ВремяПодачиТС,
	|	ПТЛ_ПланДоставкиМаршруты.СтоимостьПеревозки КАК Стоимость,
	|	ПТЛ_ПланДоставкиМаршруты.ТипТранспорта,
	|	ПТЛ_ПланДоставкиМаршруты.Самовывоз,
	//Blik 081116 57270 н
	//|	ЕСТЬNULL(ТабВеса.ВесБрутто, 0) КАК ВесБрутто,
	//|	ЕСТЬNULL(ТабВеса.Объем, 0) КАК Объем,
	//|	ЕСТЬNULL(ТабВеса.ВесНетто, 0) КАК Вес,
	//|	ЕСТЬNULL(ТабВеса.КоличествоПозиций, 0) КАК КоличествоПозиций,
	//|	ЕСТЬNULL(ПалеттоМест.КП_КоличествоПаллетоМест, 0) КАК КоличествоПаллетоМест,
	//|	ЕСТЬNULL(ТабВеса.КоличествоМест, 0) КАК КоличествоМест,
	|ВЫБОР
	|КОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	|	ТОГДА ЕСТЬNULL(ТабВесаЗаказПоставщику.ВесБрутто, 0)
	//Blik 65458 220817 н
	|КОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
	|			ИЛИ ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру)
	|		ТОГДА ЕСТЬNULL(ТабВесаКопекер.ВесБрутто, 0)
	//Blik 65458 220817 к
	|ИНАЧЕ ЕСТЬNULL(ТабВеса.ВесБрутто, 0)
	|КОНЕЦ КАК ВесБрутто,
	|ВЫБОР
	|	КОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	|		ТОГДА ЕСТЬNULL(ТабВесаЗаказПоставщику.Объем, 0)
	//Blik 65458 220817 н
	|КОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
	|			ИЛИ ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру)
	|		ТОГДА ЕСТЬNULL(ТабВесаКопекер.Объем, 0)
	//Blik 65458 220817 к
	|	ИНАЧЕ ЕСТЬNULL(ТабВеса.Объем, 0)
	|КОНЕЦ КАК Объем,
	|ВЫБОР
	|	КОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	|		ТОГДА ЕСТЬNULL(ТабВесаЗаказПоставщику.ВесНетто, 0)
	//Blik 65458 220817 н
	|КОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
	|			ИЛИ ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру)
	|		ТОГДА ЕСТЬNULL(ТабВесаКопекер.ВесНетто, 0)
	//Blik 65458 220817 к
	|	ИНАЧЕ ЕСТЬNULL(ТабВеса.ВесНетто, 0)
	|КОНЕЦ КАК Вес,
	|ВЫБОР
	|	КОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	|		ТОГДА ЕСТЬNULL(ТабВесаЗаказПоставщику.КоличествоПозиций, 0)
	//Blik 65458 220817 н
	|КОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
	|			ИЛИ ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру)
	|		ТОГДА ЕСТЬNULL(ТабВесаКопекер.КоличествоПозиций, 0)
	//Blik 65458 220817 к
	|	ИНАЧЕ ЕСТЬNULL(ТабВеса.КоличествоПозиций, 0)
	|КОНЕЦ КАК КоличествоПозиций,
	|ЕСТЬNULL(ПалеттоМест.КП_КоличествоПаллетоМест, 0) КАК КоличествоПаллетоМест,
	|ВЫБОР
	|	КОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	|		ТОГДА ЕСТЬNULL(ТабВесаЗаказПоставщику.КоличествоМест, 0)
	//Blik 65458 220817 н
	|КОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
	|			ИЛИ ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру)
	|		ТОГДА ЕСТЬNULL(ТабВесаКопекер.КоличествоМест, 0)
	//Blik 65458 220817 к
	|	ИНАЧЕ ЕСТЬNULL(ТабВеса.КоличествоМест, 0)
	|КОНЕЦ КАК КоличествоМест,
	//Blik 081116 57270 к
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор КАК ЗаданиеНаПодбор
	|ИЗ
	|	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
	|		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.КлючСтроки = ПТЛ_ПланДоставкиМаршруты.КлючСтроки
	|			И ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = ПТЛ_ПланДоставкиМаршруты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПалеттоМест КАК ПалеттоМест
	|		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку = ПалеттоМест.ЗаданиеНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабВеса КАК ТабВеса
	|		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку = ТабВеса.ЗаданиеНаПеревозку
	//Blik 081116 57270 н
	|        ЛЕВОЕ СОЕДИНЕНИЕ ТабВесаЗаказПоставщику КАК ТабВесаЗаказПоставщику
	|	    ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку = ТабВесаЗаказПоставщику.ЗаданиеНаПеревозку
	//Blik 081116 57270 к
	//Blik 65458 220817 н
	|ЛЕВОЕ СОЕДИНЕНИЕ ТабВесаКопекер КАК ТабВесаКопекер
	|	ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку = ТабВесаКопекер.ЗаданиеНаПеревозку
	//Blik 65458 220817 к
	|ГДЕ
	|	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка";
					
	аСтрокаТаблицы = Новый Структура("ЗаданиеНаПодбор,КоличествоПаллетоМест,КоличествоМест,КоличествоПозиций,ВесБрутто,Вес,Объем");
	обнуляемРекв  =  Новый Структура("КоличествоПаллетоМест,КоличествоМест,КоличествоПозиций,ВесБрутто,Вес,Объем");
	//
	//конец изменений 
				   
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	ТаблицаСоставПлана = Запрос.Выполнить().Выгрузить();
	//ТаблицаСоставПлана.Колонки.Добавить("аЗаданиеНаПодбор");
	//
	//ТаблицаСоставПлана.Колонки.Добавить("аВес");
	//ТаблицаСоставПлана.Колонки.Добавить("аВесБрутто");
	//ТаблицаСоставПлана.Колонки.Добавить("аОбъем");
	//ТаблицаСоставПлана.Колонки.Добавить("аКоличествоМест");
	//ТаблицаСоставПлана.Колонки.Добавить("аКоличествоПаллетоМест");
	//ТаблицаСоставПлана.Колонки.Добавить("аКоличествоПозиций");

	//// Переименуем колонки (как в регистрах).
	//ТаблицаСоставПлана.Колонки.Сумма.Имя = "Стоимость";
	
	//m.ionov@a-prof.ru 24.02.2015
	//Выполним распределение стоимости по заданиям
	ТаблицаСоставПлана.Колонки.Добавить("СтоимостьПоЗаданиям");
	ТаблицаСоставПлана.Колонки.Добавить("СтоимостьПоРаспределили");
	//----m.ionov@a-prof.ru---

	// Дорасчет показателей
	Для каждого СтрокаТаблицы Из ТаблицаСоставПлана Цикл
		
		//начало изменений Ожиганов 17.07.2015 немного оптимизируем 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаданиеНаПеревозку) или 
			Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаданиеНаПодбор)
			Тогда
			//Blik 081116 57270 н
			Если не ЗначениеЗаполнено(СтрокаТаблицы.ЗаданиеНаПеревозку) и 
				не СтрокаТаблицы.ЗаданиеНаПеревозку.ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика
				Тогда
				//Blik 081116 57270 к
				для Каждого ТекЭлем из обнуляемРекв Цикл
					СтрокаТаблицы[ТекЭлем.Ключ] = 0;
				КонецЦикла;	
				продолжить;
			КонецЕсли;//Blik 081116 57270
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьПоЗаданиям = 0;
		СтрокаТаблицы.СтоимостьПоРаспределили = СтрокаТаблицы.Стоимость;
		
		
	//	Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаданиеНаПеревозку) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	/// Кунов О.В., 18.06.2015 - 40343
	//	Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаданиеНаПеревозку.ЗаданиеНаПодбор) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	///
	//	
	//	//СтрокаТаблицы.ЗаданиеНаПодбор = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(СтрокаТаблицы.ЗаданиеНаПеревозку.Заказ);
	//	СтрокаТаблицы.аЗаданиеНаПодбор = СтрокаТаблицы.ЗаданиеНаПодбор;
	//	
	//	СтрокаТаблицы.ЗаданиеНаПодбор = СтрокаТаблицы.ЗаданиеНаПеревозку.ЗаданиеНаПодбор;
	//	
	//	СтрокаТаблицы.аКоличествоПаллетоМест = СтрокаТаблицы.ЗаданиеНаПодбор.Заказ.КП_КоличествоПаллетоМест;
	//	СтрокаТаблицы.аКоличествоМест = СтрокаТаблицы.ЗаданиеНаПодбор.Товары.Итог("КоличествоМест");
	//	
	//	ТабВеса = СтрокаТаблицы.ЗаданиеНаПодбор.Товары.Выгрузить(,"Номенклатура,Количество,КоличествоМест,ЕдиницаИзмерения,ЕдиницаИзмеренияМест");
	//
	//	СтуктураВесов = АП_ОбщегоНазначенияКлиент.ПолучитьИтоговыйВес(ТабВеса);
	//	
	//	ТабВеса.Свернуть("Номенклатура","");
	//	   		
	//	СтрокаТаблицы.аВес = СтуктураВесов.ВесНетто;
	//	СтрокаТаблицы.аВесБрутто = СтуктураВесов.ВесБрутто;
	//	СтрокаТаблицы.аОбъем = СтуктураВесов.Объем;    		
	//	
	//	СтрокаТаблицы.аКоличествоПозиций = ТабВеса.Количество();
		
		//СтрокаТаблицы.СтоимостьПоЗаданиям = 0;
		//СтрокаТаблицы.СтоимостьПоРаспределили = СтрокаТаблицы.Стоимость;
		
		//начало изменений Ожиганов 17.07.2015 немного оптимизируем 
		//ЗаполнитьЗначенияСвойств(аСтрокаТаблицы,);
		//для Каждого ТекЭлем из аСтрокаТаблицы Цикл
		//	Если СтрокаТаблицы["а"+ТекЭлем.Ключ] <> СтрокаТаблицы[ТекЭлем.Ключ] Тогда
		//		вызватьисключение "различаются "+ТекЭлем.Ключ+" /"+СтрокаТаблицы["а"+ТекЭлем.Ключ]+" / "+ СтрокаТаблицы[ТекЭлем.Ключ];
		//	КонецЕсли;	
		//КонецЦикла;	
		//конец изменений 
		//конец изменений 
	КонецЦикла;
	
	//В первом цикле мы получили вес, теперь распределим стоимость по весу
	ВремТаб = ТаблицаСоставПлана.Скопировать();
	ВремТаб.Свернуть("Рейс,Исключено,Стоимость,СтоимостьПоРаспределили","ВесБрутто");
	Для каждого СтрокаТаблицы Из ТаблицаСоставПлана Цикл
		
		Если СтрокаТаблицы.Исключено ИЛИ СтрокаТаблицы.Стоимость = 0 Тогда //Если стоимть 0 - значит стоимость по рейсу не задана
			Продолжить;
		КонецЕсли;
		
		СтрокаРейса = ВремТаб.НайтиСтроки(Новый Структура("Рейс,Исключено", СтрокаТаблицы.Рейс, Ложь)); 
		
		Если СтрокаРейса.Количество() > 0 Тогда 
			Если СтрокаРейса[0].ВесБрутто > 0 Тогда
				СтрокаТаблицы.СтоимостьПоЗаданиям = Окр(СтрокаРейса[0].Стоимость*СтрокаТаблицы.ВесБрутто/СтрокаРейса[0].ВесБрутто,2);
				СтрокаРейса[0].СтоимостьПоРаспределили = СтрокаРейса[0].СтоимостьПоРаспределили - СтрокаТаблицы.СтоимостьПоЗаданиям;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//{18.12.2015 Островерхий заявка №47243 при проведении пустого документа выпадает ошибка, закоментировал. 
	////Посмотрим что осталось не распределенное
	//ВремТаб = ВремТаб.Скопировать(ВремТаб.НайтиСтроки(Новый Структура("Исключено", СтрокаТаблицы.Рейс, Ложь)));
	//Если Не ВремТаб.Итог("СтоимостьПоРаспределили") = 0 Тогда
	//	//Не смогли с имитировать данную ситуацию
	//КонецЕсли;
	//18.12.2015 Островерхий} 

	Возврат ТаблицаСоставПлана;

КонецФункции // ПодготовитьТаблицуСоставПлана()

Процедура ПроверитьЗаполнениеТабличнойЧастиМаршруты(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("КлючСтроки, Рейс");
	//{15.09.2016 Островерхий заявка №48833 
	//начало изменений Ожиганов А. б/н добавление ограничений доставка до ж/д станции 25.10.2016 
	//Если Константы.ТП_ДатаНачалаОбменаСТендернойПлощадкой.Получить() <= ТекущаяДата() Тогда
	Если ПРГ_ИспользоватьОбменСТендернойПлощадкой  Тогда
	//конец изменений 	
		СтруктураОбязательныхПолей.Вставить("ТипТранспорта");	
	КонецЕсли;  
	//15.09.2016 Островерхий} 
	//СтруктураОбязательныхПолей.Вставить("ДатаДоставки");
	

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Маршруты", СтруктураОбязательныхПолей, Отказ, Заголовок);

	//{27.08.2015 Островерхий заявка №43411 
	Для каждого ТекСтрока Из Маршруты Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ТипТранспорта) Тогда
			Продолжить;
		КонецЕсли; 
		
		//начало изменений Ожиганов А. б/н дополнительные проверки при статусе тендер 16.11.2016 
		Если СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Тендер Тогда
			Если Не ЗначениеЗаполнено(ТекСтрока.ТипТранспорта.ВидГрузоподъемности) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("У типа транспортного средства "+ТекСтрока.ТипТранспорта+" не заполнен вид грузоподъемности !!!",Отказ);
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(ТекСтрока.ТипТранспорта.ТипКузова) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("У типа транспортного средства "+ТекСтрока.ТипТранспорта+" не заполнен вид тип кузова !!!",Отказ);
			КонецЕсли;	
			
		КонецЕсли;	
		//конец изменений 
		
		СтрокиЗаданийНаПеревозку = ЗаданияНаПеревозку.НайтиСтроки(Новый Структура("КлючСтроки,Исключено", ТекСтрока.КлючСтроки,Ложь));
		
		СписокЗаданий = Новый Массив;
		Для Каждого ТекЭлем из СтрокиЗаданийНаПеревозку Цикл
			СписокЗаданий.Добавить(ТекЭлем.ЗаданиеНаПеревозку);
		КонецЦикла;	
		
		ТемпДокСодержание = ПРГ_ПолучитьИинформациюДляСодержания(СписокЗаданий,0,0);
		
		тВесБрутто = ТемпДокСодержание.Итог("ВесБрутто");
		
		Если тВесБрутто > ТекСтрока.ТипТранспорта.Грузоподъемность Тогда
		
			Сообщить("По рейсу '"+ТекСтрока.Рейс + "' есть превышение максимальной грузоподъемности на "+Строка(тВесБрутто-ТекСтрока.ТипТранспорта.Грузоподъемность)+" т.", СтатусСообщения.ОченьВажное);
			
			//{08.09.2016 Островерхий заявка №48833 
			//{15.09.2016 Островерхий заявка №48833 
			//начало изменений Ожиганов А. б/н добавление ограничений доставка до ж/д станции 25.10.2016
			//Если Константы.ТП_ДатаНачалаОбменаСТендернойПлощадкой.Получить() <= ТекущаяДата() Тогда
			Если ПРГ_ИспользоватьОбменСТендернойПлощадкой  Тогда
			//конец изменений 
				//15.09.2016 Островерхий} 
				//{30.09.2016 Островерхий заявка №48833 
				//Отказ = Истина;
				//30.09.2016 Островерхий} 
			//08.09.2016 Островерхий}
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла; 
	//27.08.2015 Островерхий} 
	
КонецПроцедуры 

Процедура ПроверитьЗаполнениеТабличнойЧастиЗаданияНаПеревозку(СтруктураШапкиДокумента, Отказ, Заголовок)

	//начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.КлючСтроки,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор КАК ЗаданиеНаПодбор,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.Склад КАК Склад,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.АдресПоставки КАК АдресПоставки,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.АдресПоставки.НСИ_Город.Наименование КАК ГородДоставки,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.АдресПоставки.НСИ_Регион.Наименование КАК РегионДоставки,
	                      |	ВЫБОР
	                      |		КОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	                      |			ТОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.Склад.НСИ_АП.НСИ_Город.Наименование
	                      |		ИНАЧЕ ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ТП_АдресОтгрузки.НСИ_Город.Наименование
	                      |	КОНЕЦ КАК ГородОтгрузки,
	                      |	ВЫБОР
	                      |		КОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	                      |			ТОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.Склад.НСИ_АП.НСИ_Регион.Наименование
	                      |		ИНАЧЕ ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ТП_АдресОтгрузки.НСИ_Регион.Наименование
	                      |	КОНЕЦ КАК РегионОтгрузки,
	                      |	ВЫБОР
	                      |		КОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	                      |			ТОГДА ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.Склад.НСИ_АП
	                      |		ИНАЧЕ ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ТП_АдресОтгрузки
	                      |	КОНЕЦ КАК АдресОтгрузки,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ВидОперации КАК ВидОперации,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.УсловиеПоставки КАК УсловиеПоставки,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.НомерСтроки КАК НомерСтроки,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ДатаДоставки,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Исключено КАК ЗаданиеИсключено,
	                      |	ЕстьNull(ПТЛ_ПланДоставкиМаршруты.Исключен,Ложь) КАК МаршрутИсключен
	                      |ИЗ
	                      |	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	                      |		Левое СОЕДИНЕНИЕ Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
	                      |		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = ПТЛ_ПланДоставкиМаршруты.Ссылка
	                      |			И ПТЛ_ПланДоставкиЗаданияНаПеревозку.КлючСтроки = ПТЛ_ПланДоставкиМаршруты.КлючСтроки
	                      |ГДЕ
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НомерСтроки");
						  
	Запрос.УстановитьПараметр("Ссылка",Ссылка);					  
	
	//конец изменений 
	ПРГ_определитьИспользоватьОграниченияПоЖд();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		  ТекстОшибки = "";
		  Если Выборка.КлючСтроки = 0 Тогда
			  ТекстОшибки = Символы.ПС+"не заполнен ключ строки.";
		  КонецЕсли; 
		
		   Если Не ЗначениеЗаполнено(Выборка.ЗаданиеНаПеревозку)Тогда
			   ТекстОшибки = Символы.ПС+"не заполнено задание на перевозку.";
		   КонецЕсли; 
		   
		   Если Не ЗначениеЗаполнено(Выборка.ДатаДоставки)  Тогда
			   ТекстОшибки = Символы.ПС+"не заполнен реквизит  ""дата поставки"".";
		   КонецЕсли; 
		   
		   Если ПРГ_ИспользоватьОграниченияПоЖд  Тогда
				   Если (Выборка.УсловиеПоставки <> Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоЖДСтанции и ПРГ_ДоставкаДоЖДСтанции)
					  или (Выборка.УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоЖДСтанции и Не ПРГ_ДоставкаДоЖДСтанции)
					Тогда
					   ТекстОшибки = Символы.ПС+"В документе "+Выборка.ЗаданиеНаПеревозку+" условие поставки "+Выборка.УсловиеПоставки+"! Не соотвествует флагу доставка до ж/д станции  в плане доставке.";
				   КонецЕсли;
		   КонецЕсли; 
		   
		  Если Не ЗначениеЗаполнено(Выборка.ЗаданиеНаПодбор) и Выборка.ВидОперации <> Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика  Тогда
			   ТекстОшибки = Символы.ПС+"в документе "+Выборка.ЗаданиеНаПеревозку+" не заполнено задание на подбор.";
		  КонецЕсли;	 
		   
		  Если ПРГ_ПроверятьИсключенныеЗадания Тогда
			  Если Не Выборка.МаршрутИсключен  и Выборка.ЗаданиеИсключено Тогда
			   	ТекстОшибки = Символы.ПС+"документ "+Выборка.ЗаданиеНаПеревозку+" нельзя исключать в плане доставке, при используемом рейсе." ;
			  КонецЕсли; 
		  КонецЕсли; 
		   
		  Если СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Тендер и ПРГ_ПроверятьРегионИГород
		  Тогда
		  		Если ЗначениеЗаполнено(Выборка.АдресПоставки) Тогда
					Если ПустаяСтрока(Выборка.ГородДоставки) Тогда
						 ТекстОшибки = Символы.ПС+"в документе "+Выборка.ЗаданиеНаПеревозку+" выбран адрес поставки "+Выборка.АдресПоставки+"
						 	|, в котором не заполнен реквизит город";
					 КонецЕсли;	
					 
					Если ПустаяСтрока(Выборка.РегионДоставки) Тогда
						 ТекстОшибки = Символы.ПС+"в документе "+Выборка.ЗаданиеНаПеревозку+" выбран адрес поставки "+Выборка.АдресПоставки+"
						 	|, в котором не заполнен реквизит регион.";
					КонецЕсли;	
			    Иначе
			       ТекстОшибки = Символы.ПС+"в документе "+Выборка.ЗаданиеНаПеревозку+" не заполнен адрес поставки ";
			    КонецЕсли; 
			    
				Если ЗначениеЗаполнено(Выборка.АдресОтгрузки) Тогда
					 Если ПустаяСтрока(Выборка.ГородОтгрузки) Тогда
						 Если Выборка.ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика  Тогда
							 ТекстОшибки = Символы.ПС+"в документе "+Выборка.ЗаданиеНаПеревозку+" выбран адрес отгрузки "+Выборка.АдресОтгрузки+"
							 	|, в котором не заполнен реквизит город.";
						 Иначе 
							 ТекстОшибки = Символы.ПС+"в документе "+Выборка.ЗаданиеНаПеревозку+" выбран склад, в адресе поставке склада "+Выборка.АдресОтгрузки+"
							 	 |не заполнен реквизит город.";
						 КонецЕсли;		
					 КонецЕсли;	
					 
					 Если ПустаяСтрока(Выборка.РегионОтгрузки) Тогда
						 Если Выборка.ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика  Тогда
							 ТекстОшибки = Символы.ПС+"в документе "+Выборка.ЗаданиеНаПеревозку+" выбран адрес отгрузки "+Выборка.АдресОтгрузки+"
							 	|, в котором не заполнен реквизит регион.";
						 Иначе 
							 ТекстОшибки = Символы.ПС+"в документе "+Выборка.ЗаданиеНаПеревозку+" выбран склад, в адресе поставке склада "+Выборка.АдресОтгрузки+"
							 	 |не заполнен реквизит регион.";
						 КонецЕсли;		
					 КонецЕсли;	
					 
				 Иначе
				   Если Выборка.ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика  Тогда
					   ТекстОшибки = Символы.ПС+"в документе "+Выборка.ЗаданиеНаПеревозку+" не заполнен адрес отгрузки.";	 
				   Иначе
					   ТекстОшибки = Символы.ПС+"в документе "+Выборка.ЗаданиеНаПеревозку+" выбран склад, в адрес поставки склада не заполнен.";	 
				   КонецЕсли; 
			    КонецЕсли;
			   
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					ОбщегоНазначения.СообщитьОбОшибке( "В строке номер """+ СокрЛП(Выборка.НомерСтроки) +
											""" табличной части Задания на перевозку: "+ТекстОшибки
											,Отказ);
				КонецЕслИ;	
		  КонецЕсли; 
		
	КонецЦикла;	
	// Укажем, что надо проверить:
  //начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
  //СтруктураОбязательныхПолей = Новый Структура("КлючСтроки, ЗаданиеНаПеревозку"); 
  // проверяем выше
	
	//СтруктураОбязательныхПолей.Вставить("ДатаДоставки");
	

	// Теперь вызовем общую процедуру проверки.
//	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ЗаданияНаПеревозку", СтруктураОбязательныхПолей, Отказ, Заголовок);

	//конец изменений 
КонецПроцедуры 

// По результату збапроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  ВыборкаПоШапкеДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоСоставПлана      - таблица значений, содержащая данные для проведения и проверки ТЧ СоставПлана
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, ТаблицаПоСоставПлана, Отказ, Заголовок)

	// ПО регистру "ПТЛ_ПланДоставки".
	
	НаборДвижений = Движения.ПТЛ_ПланДоставки;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСоставПлана, ТаблицаДвижений);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Отделение, "Отделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ДатаОтгрузки, "ДатаОтгрузки");
		
	
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		
		Движения.ПТЛ_ПланДоставки.ВыполнитьДвижения();
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//Если Не Отказ Тогда
	//	ОбновитьЖурналыУчетаАМ(Отказ);
	//КонецЕсли;
	
	Если Не Отказ Тогда
		//Запишем изменение статуса
		ЗаписатьИзменениеСтатусов(Отказ);
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьСтатусыЗаданийНаПеревозку(Отказ) Экспорт
	
	//Blik 220817 65458 н
	СпосокУсловийБезПодбора = Новый СписокЗначений;
	СпосокУсловийБезПодбора.Добавить(Перечисления.ПТЛ_УсловияПоставки.ДоставкаОтПоставщика);
	СпосокУсловийБезПодбора.Добавить(Перечисления.ПТЛ_УсловияПоставки.ДоставкаОтКопекера);
	СпосокУсловийБезПодбора.Добавить(Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоКопекера);
	//Blik 220817 65458 к
	
	Если Отказ Тогда
		возврат;
	КонецЕсли;	
	//начало изменений Ожиганов 17.07.2015 избавимвся от лишней перезаписи  
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ДатаОтгрузкиПлан,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.СтатусДокумента,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.Проведен,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.КлючСтроки,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ДатаДоставки,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор.СтатусДокумента КАК ЗаданиеНаПодборСтатусДокумента,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор.ПлановаяДатаОтгрузки КАК ЗаданиеНаПодборПлановаяДатаОтгрузки,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор.ПриоритетОтгрузки КАК ЗаданиеНаПодборПриоритетОтгрузки,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор.КП_ТипТранспорта КАК ЗаданиеНаПодборКП_ТипТранспорта,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ТипТранспорта,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.Маршрут,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ТЭК,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.Водитель,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ТранспортноеСредство,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.СтоимостьПеревозки,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.НомерСтроки КАК НомерСтроки,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Исключено,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ДатаДоставкиПлан,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ДатаДоставкиФакт,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор
	                      |ИЗ
	                      |	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	                      |ГДЕ
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НомерСтроки");
	Запрос .УстановитьПараметр("Ссылка",Ссылка);					  
	//конец изменений 
	аЗаданияНаПеревозку = Запрос.Выполнить().Выгрузить();
	//начало изменений Ожиганов 18.07.2015 избавимвся от лишней перезаписи  
	ЗапросПоДругимПланам = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                    |	ПТЛ_ПланДоставки.ПланДоставки,
	                                    |	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку
	                                    |ИЗ
	                                    |	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	                                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	                                    |		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку = ПТЛ_ПланДоставки.ЗаданиеНаПеревозку
										//начало изменений Ожиганов А. 15.12.2016 60167 исключим изменение статуса задания на перевозку, 										
										//забыл убрать проверку на исключенные задания текщуего плана
										//теперь нужно проверять все задания исключенные и не исключенные
	                                    //|			И (НЕ ПТЛ_ПланДоставкиЗаданияНаПеревозку.Исключено)
										//конец изменений 									
										|			И (ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка)
	                                    |			И (НЕ ПТЛ_ПланДоставки.ПланДоставки = &Ссылка)
										|   			И (НЕ ПТЛ_ПланДоставки.Исключено)
	                                    |");
	ЗапросПоДругимПланам.УстановитьПараметр("Ссылка",Ссылка);
	
	ТаблДругихПланов = ЗапросПоДругимПланам.Выполнить().Выгрузить();
	ТаблДругихПланов.Индексы.Добавить("ЗаданиеНаПеревозку");
	//конец изменений 
	
	Для Каждого СтрЗаданиеНаПеревозку Из аЗаданияНаПеревозку Цикл
		//Blik 081116 57270 н
		текЗаданиеНаперевозку = СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку;
		ТекДатаОтгрузки = текЗаданиеНаперевозку.ДатаОтгрузкиПлан;
		ТекДадаДоставки = текЗаданиеНаперевозку.ДатаДоставкиПлан;
		//Blik 081116 57270 к
		СтрМаршрута = Маршруты.Найти(СтрЗаданиеНаПеревозку.КлючСтроки, "КлючСтроки");
		Если СтрМаршрута = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СокрЛП(СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку) + " включено в не созданный рейс " + СокрЛП(СтрЗаданиеНаПеревозку.КлючСтроки), Отказ);
			Продолжить;
		КонецЕсли;
	//начало изменений Ожиганов А. 15.12.2016 60167 исключим изменение статуса задания на перевозку, 
	//если задание на перевозку в текущем плане исключено, а вдругом плане не исключено
	НайдЗнч = ТаблДругихПланов.Найти(СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку,"ЗаданиеНаПеревозку");
	ДругойПлан = ?(НайдЗнч <> Неопределено,НайдЗнч.ПланДоставки,Неопределено);
	//конец изменений 
		
		
		//Проверим чтобы в одном плане не было двух строк с одним заданием
		СтрокиСЗаданием = ЗаданияНаПеревозку.НайтиСтроки(Новый Структура("ЗаданиеНаПеревозку", СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку));
		Если СтрокиСЗаданием.Количество() > 1 Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СокрЛП(СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку) + " включено в несколько рейсов или несколько раз в один!", Отказ);
			Продолжить;
		КонецЕсли;	
		
		Если СтрЗаданиеНаПеревозку.Исключено Тогда
			
			//начало изменений Ожиганов А. 15.12.2016 60167 исключим изменение статуса задания на перевозку, 
			//если задание на перевозку в текущем плане исключено, а вдругом плане не исключено
			// менять статус будет план где данное задание не исклюено
			//Если Не ЗначениеЗаполнено(ДругойПлан) тогда //Blik 211216
			Если ЗначениеЗаполнено(ДругойПлан) тогда
				продолжить;
			КонецЕсли;	
			//конец изменений  
			
			//Пропишем дату переноса если она задана
			Если (Не СтрМаршрута.ДатаПереноса = Дата(1,1,1)
				И Не СтрМаршрута.ДатаПереноса = СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуДатаОтгрузкиПлан)
				ИЛИ Не СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуСтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Открыто Тогда
				
				БылиИзменения = Ложь;
				
				//начало изменений Ожиганов 18.07.2015 избавимвся от лишней перезаписи  
				//ОбъектЗаданиеНаПеревозку = СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуПолучитьОбъект();
				ОбъектЗаданиеНаПеревозку = Новый Структура("ДатаДоставкиПлан,ДатаОтгрузкиПлан,СтатусДокумента"); //СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуПолучитьОбъект();
				Для каждого ТекЭлем из  ОбъектЗаданиеНаПеревозку Цикл
					ОбъектЗаданиеНаПеревозку[ТекЭлем.Ключ] = СтрЗаданиеНаПеревозку["ЗаданиеНаПеревозку"+ТекЭлем.Ключ];
				КонецЦикла;	
				//конец изменений 
				
				Если (Не СтрМаршрута.ДатаПереноса = Дата(1,1,1)
					И Не СтрМаршрута.ДатаПереноса = СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуДатаОтгрузкиПлан) Тогда
					ОбъектЗаданиеНаПеревозку.ДатаДоставкиПлан = СтрЗаданиеНаПеревозку.ДатаДоставки;
					ОбъектЗаданиеНаПеревозку.ДатаОтгрузкиПлан = СтрМаршрута.ДатаПереноса;
					БылиИзменения = Истина;
				КонецЕсли;
				
				Если СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуСтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.ВРаботе
					ИЛИ СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуСтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.ВключенаВПлан Тогда
					ОбъектЗаданиеНаПеревозку.СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Открыто;
					БылиИзменения = Истина;
				КонецЕсли;
				
				Если БылиИзменения Тогда
					Попытка
						
						//начало изменений Ожиганов 18.07.2015 избавимвся от лишней перезаписи  
						Меняем = Ложь;
						аОбъектЗаданиеНаПеревозку = Неопределено;
						Для каждого ТекЭлем из  ОбъектЗаданиеНаПеревозку Цикл
							Если СтрЗаданиеНаПеревозку["ЗаданиеНаПеревозку"+ТекЭлем.Ключ]
								<>ОбъектЗаданиеНаПеревозку[ТекЭлем.Ключ] Тогда
								Если аОбъектЗаданиеНаПеревозку = Неопределено Тогда
									аОбъектЗаданиеНаПеревозку = СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку.ПолучитьОбъект();
								КонецЕсли;	
								аОбъектЗаданиеНаПеревозку[ТекЭлем.Ключ] = ОбъектЗаданиеНаПеревозку[ТекЭлем.Ключ];
							КонецЕсли;	
						КонецЦикла;	
						
						Если аОбъектЗаданиеНаПеревозку <> Неопределено  Тогда
							аОбъектЗаданиеНаПеревозку.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
							аОбъектЗаданиеНаПеревозку.Записать(РежимЗаписиДокумента.Запись);
							аОбъектЗаданиеНаПеревозку.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
							
						КонецЕсли;	
						
						//конец изменений 
						
					Исключение
						
						ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
						
					КонецПопытки;
				КонецЕсли;
				//Если есть журнал то помещаем на удаление
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
			
		Если Не СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуПроведен Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В рейс " + СокрЛП(СтрЗаданиеНаПеревозку.КлючСтроки) + " включено не проведенное задание " + СокрЛП(СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку), Отказ);
			Продолжить;
		КонецЕсли; 
		
		Если СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуСтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Отменено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В рейс " + СокрЛП(СтрЗаданиеНаПеревозку.КлючСтроки) + " включено задание " + СокрЛП(СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку) + " со статусом Отменено", Отказ);
			Продолжить;
		КонецЕсли; 
		
		Если СтрЗаданиеНаПеревозку.ЗаданиеНаПодборСтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В рейс " + СокрЛП(СтрЗаданиеНаПеревозку.КлючСтроки) + " включено задание " + СокрЛП(СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуЗаданиеНаПодбор) + " со статусом Отменено", Отказ);
			Продолжить;
		КонецЕсли; 
		
		//Проверим на включение в другие планы доставки
		//начало изменений Ожиганов А. 15.12.2016 60167 исключим изменение статуса задания на перевозку, 
		//если задание на перевозку в текущем плане исключено, а вдругом плане не исключено
		//перенесем коды выше
//		НайдЗнч = ТаблДругихПланов.Найти(СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку,"ЗаданиеНаПеревозку");
//		ДругойПлан = ?(НайдЗнч <> Неопределено,НайдЗнч.ПланДоставки,Неопределено);
		//конец изменений 
		//ДругойПлан = АП_ОбщегоНазначенияСервер.ПроверкаНаДубльВключенияЗаданияВПланДоставки(СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку, Ссылка);
		//{06.10.2016 Островерхий заявка №48833 
		//Если ЗначениеЗаполнено(ДругойПлан) Тогда
		Если ЗначениеЗаполнено(ДругойПлан) И НЕ РольДоступна("ПолныеПрава") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В рейсе " + СокрЛП(СтрЗаданиеНаПеревозку.КлючСтроки) + " указано задание " + СокрЛП(СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку) + " которое уже включено в план доставки " + СокрЛП(ДругойПлан), Отказ);	  
			Продолжить;
		КонецЕсли; 
		//06.10.2016 Островерхий} 
		//начало изменений Ожиганов 18.07.2015 избавимвся от лишней перезаписи  
		//ОбъектЗаданиеНаПеревозку = СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку.ПолучитьОбъект();
		ОбъектЗаданиеНаПеревозку = Новый Структура("ДатаДоставкиПлан,ДатаОтгрузкиПлан,ТипТранспорта,Маршрут,ТЭК,Водитель,ТранспортноеСредство,СтоимостьПеревозки,СтатусДокумента");
		Для каждого ТекЭлем из  ОбъектЗаданиеНаПеревозку Цикл
			ОбъектЗаданиеНаПеревозку[ТекЭлем.Ключ] = СтрЗаданиеНаПеревозку["ЗаданиеНаПеревозку"+ТекЭлем.Ключ];
		КонецЦикла;	
		//конец изменений 
		
		ОбъектЗаданиеНаПеревозку.ДатаДоставкиПлан = СтрЗаданиеНаПеревозку.ДатаДоставки;
		ОбъектЗаданиеНаПеревозку.ДатаОтгрузкиПлан = ДатаОтгрузки;
		
		ОбъектЗаданиеНаПеревозку.ТипТранспорта        = СтрМаршрута.ТипТранспорта;
		ОбъектЗаданиеНаПеревозку.Маршрут              = СтрМаршрута.Маршрут;
		ОбъектЗаданиеНаПеревозку.ТЭК                  = СтрМаршрута.ТЭК;
		ОбъектЗаданиеНаПеревозку.Водитель             = СтрМаршрута.Водитель;
		ОбъектЗаданиеНаПеревозку.ТранспортноеСредство = СтрМаршрута.ТранспортноеСредство;
		ОбъектЗаданиеНаПеревозку.СтоимостьПеревозки   = СтрМаршрута.СтоимостьПеревозки;
		
		Если СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуСтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Открыто
			ИЛИ СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуСтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.ВРаботе Тогда
			
			//начало изменений Ожиганов А. 15.12.2016 б/н учтем новые статусы
			//Если СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен Тогда
			Если СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен 
				или СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Тендер
				или СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Готов Тогда
			//конец изменений 	
				ОбъектЗаданиеНаПеревозку.СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.ВключенаВПлан;
			Иначе
				ОбъектЗаданиеНаПеревозку.СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.ВРаботе;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			
			//начало изменений Ожиганов 18.07.2015 избавимвся от лишней перезаписи  
				Меняем = Ложь;
				аОбъектЗаданиеНаПеревозку = Неопределено;
				Для каждого ТекЭлем из  ОбъектЗаданиеНаПеревозку Цикл
					Если СтрЗаданиеНаПеревозку["ЗаданиеНаПеревозку"+ТекЭлем.Ключ]
						<>ОбъектЗаданиеНаПеревозку[ТекЭлем.Ключ] Тогда
						Если аОбъектЗаданиеНаПеревозку = Неопределено Тогда
							аОбъектЗаданиеНаПеревозку = СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку.ПолучитьОбъект();
						КонецЕсли;	
						аОбъектЗаданиеНаПеревозку[ТекЭлем.Ключ] = ОбъектЗаданиеНаПеревозку[ТекЭлем.Ключ];
					КонецЕсли;	
				КонецЦикла;	
				
				Если аОбъектЗаданиеНаПеревозку <> Неопределено Тогда
			
					Если СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуСтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Открыто Тогда
						Если аОбъектЗаданиеНаПеревозку.Проведен Тогда
							аОбъектЗаданиеНаПеревозку.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						Иначе
							аОбъектЗаданиеНаПеревозку.Записать(РежимЗаписиДокумента.Запись);
						КонецЕсли;
					Иначе
												
						аОбъектЗаданиеНаПеревозку.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
						аОбъектЗаданиеНаПеревозку.Записать(РежимЗаписиДокумента.Запись);
						аОбъектЗаданиеНаПеревозку.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
					КонецЕсли;						
				КонецЕсли;		
			//конец изменений 
		Исключение
			
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
			
		КонецПопытки;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		//m.ionov@a-prof.ru 02.02.2015
		//Подтвердили что передаем на склад только в финешном варианте
		//начало изменений Ожиганов А. 59449 изменяем передан на склад в зп в случае статуса готов или тендер 25.11.2016 
		//Если СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен
		Если (СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен 
			или СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Тендер
			или СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Готов)
		//конец изменений 		
		И СтрЗаданиеНаПеревозку.ЗаданиеНаПодборСтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт Тогда
		///Blik 071116 57270 в доставке от поставщика нет задания на подбор
		Если не ТипЗнч(СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			//Blik 220817 65458 н
			Если СпосокУсловийБезПодбора.НайтиПоЗначению(СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку.УсловиеПоставки) = НЕОПРЕДЕЛЕНО Тогда
				//Blik 220817 65458 к
				
				ОбъектЗаданиеНаПодбор = СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуЗаданиеНаПодбор.ПолучитьОбъект();
				ОбъектЗаданиеНаПодбор.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.ПереданНаСклад;
				
				ОбъектЗаданиеНаПодбор.ПлановаяДатаОтгрузки = ДатаОтгрузки;
				ОбъектЗаданиеНаПодбор.ПриоритетОтгрузки = СтрМаршрута.ПриоритетОтгрузки;
				
				Попытка
					
					ОбъектЗаданиеНаПодбор.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
					ОбъектЗаданиеНаПодбор.Записать(РежимЗаписиДокумента.Запись);
					ОбъектЗаданиеНаПодбор.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
					
				Исключение
					
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
					
				КонецПопытки;
				//Blik 220817 65458 н	
			Иначе
				ОбъектЗаказ = СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку.ДокументОснование.ПолучитьОбъект();
				Попытка
					
					ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
					ОбъектЗаказ.Записать(РежимЗаписиДокумента.Запись);
					ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
					
				Исключение
					
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
					
				КонецПопытки;
			КонецЕсли;
			//Blik 220817 65458 к
			//Blik 081116 57270 н	
		Иначе
			ОбъектЗаказ = СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку.ДокументОснование.ПолучитьОбъект();
			Отбор = Новый Структура;
			Отбор.Вставить("ДатаПоставки", ТекДадаДоставки);
			Отбор.Вставить("ТП_ДатаОтгрузкитч", ТекДатаОтгрузки);
			
			Строки = ОбъектЗаказ.Товары.НайтиСтроки(Отбор);
			Для Каждого Стр Из Строки Цикл
				Стр.ДатаПоставки = СтрЗаданиеНаПеревозку.ДатаДоставки;
				Стр.ТП_ДатаОтгрузкитч = ДатаОтгрузки;
			КонецЦикла;
			
			Попытка
				
				ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
				ОбъектЗаказ.Записать(РежимЗаписиДокумента.Запись);
				ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
				
			Исключение
				
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
				
			КонецПопытки;
			
		КонецЕсли;
		//Blik 081116 57270 к

		Иначе//Если Не СтрЗаданиеНаПеревозку.ЗаданиеНаПодборСтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен 
			
			Если Не СтрЗаданиеНаПеревозку.ЗаданиеНаПодборПлановаяДатаОтгрузки = ДатаОтгрузки
				ИЛИ Не СтрЗаданиеНаПеревозку.ЗаданиеНаПодборПриоритетОтгрузки = СтрМаршрута.ПриоритетОтгрузки
				ИЛИ Не СтрЗаданиеНаПеревозку.ЗаданиеНаПодборКП_ТипТранспорта = СтрМаршрута.ТипТранспорта Тогда
				///Blik 071116 57270 в доставке от поставщика нет задания на подбор
				Если не ТипЗнч(СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					//Blik 220817 65458 н
					Если СпосокУсловийБезПодбора.НайтиПоЗначению(СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку.УсловиеПоставки) = НЕОПРЕДЕЛЕНО Тогда
						//Blik 220817 65458 к
						ОбъектЗаданиеНаПодбор = СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозкуЗаданиеНаПодбор.ПолучитьОбъект();
						
						ОбъектЗаданиеНаПодбор.ПлановаяДатаОтгрузки = ДатаОтгрузки;
						ОбъектЗаданиеНаПодбор.ПриоритетОтгрузки = СтрМаршрута.ПриоритетОтгрузки;
						ОбъектЗаданиеНаПодбор.КП_ТипТранспорта = СтрМаршрута.ТипТранспорта;
						
						Попытка
							
							ОбъектЗаданиеНаПодбор.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
							ОбъектЗаданиеНаПодбор.Записать(РежимЗаписиДокумента.Запись);
							ОбъектЗаданиеНаПодбор.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
							
						Исключение
							
							ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
							
						КонецПопытки; 
					//Blik 220817 65458 н	
				Иначе
					ОбъектЗаказ = СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку.ДокументОснование.ПолучитьОбъект();
						Попытка
							
							ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
							ОбъектЗаказ.Записать(РежимЗаписиДокумента.Запись);
							ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
							
						Исключение
							
							ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
							
						КонецПопытки;
					КонецЕсли;
					//Blik 220817 65458 н
				//Blik 081116 57270 н	
			Иначе
				ОбъектЗаказ = СтрЗаданиеНаПеревозку.ЗаданиеНаПеревозку.ДокументОснование.ПолучитьОбъект();
				Отбор = Новый Структура;
				Отбор.Вставить("ДатаПоставки", ТекДадаДоставки);
				Отбор.Вставить("ТП_ДатаОтгрузкитч", ТекДатаОтгрузки);
				
				Строки = ОбъектЗаказ.Товары.НайтиСтроки(Отбор);
				Для Каждого Стр Из Строки Цикл
					Стр.ДатаПоставки = СтрЗаданиеНаПеревозку.ДатаДоставки;
					Стр.ТП_ДатаОтгрузкитч = ДатаОтгрузки;
				КонецЦикла;
				
				Попытка
					
					ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
					ОбъектЗаказ.Записать(РежимЗаписиДокумента.Запись);
					ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
					
				Исключение
					
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
					
				КонецПопытки;
				
			КонецЕсли;
			//Blik 081116 57270 к
			КонецЕсли;
	
		КонецЕсли;	
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВернутьЖурналУчетаАМ(Рейс) Экспорт
	//Если возращаем неопределено, значит не заведен еще план доставки
	
	СтрМаршрут = Маршруты.Найти(Рейс,"КлючСтроки");
	Если СтрМаршрут = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.Ссылка КАК ЖурналУчета
	               |ИЗ
	               |	Документ.ПТЛ_ЖурналУчетаВъездаВыездаАМ КАК ПТЛ_ЖурналУчетаВъездаВыездаАМ
	               |ГДЕ
	               |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.ПланДоставки = &ПланДоставки
	               |	И ПТЛ_ЖурналУчетаВъездаВыездаАМ.Рейс = &Рейс";   
				   
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("Рейс", СтрМаршрут.Рейс);
	Запрос.УстановитьПараметр("ПланДоставки", Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.ЖурналУчета;
	КонецЕсли;
	
	Возврат Документы.ПТЛ_ЖурналУчетаВъездаВыездаАМ.ПустаяСсылка();
	
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Отмена проведения " + СокрЛП(Ссылка) + ". Нельзя отменить проведение в статусе Подготовлен!", Отказ);
		
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЕстьЛиДокументыПоПлану() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Отмена проведения " + СокрЛП(Ссылка) + ". По документу есть введенные документы на основании (журнал, накладные). Отмена проведения не возможна!", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЖурналыУчетаАМ(Отказ) Экспорт
	//Blik 161116 59307 н
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен);
	СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Тендер);
	СписокСтатусов.Добавить(Перечисления.ПТЛ_СтатусыПланаДоставки.Готов);
	//Blik 161116 59307 к
	Если Не Проведен ИЛИ СписокСтатусов.НайтиПоЗначению(СтатусДокумента) = Неопределено //СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен //Blik 161116 59307
		Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 12.11.2015 б/н уменьшение вероятности взаимоблокировки при проведении Журна учета и плана доставки 
	ЗапросПоИзменениюТабличнойЧастиЖурналаУчета = ПолучитьЗапросПоИзменениюТабличнойЧастиЖурналаУчета();
	ЗапросКРеквизитамЖурнала 					= ПолучитьЗапросКРеквизитамЖурнала();
	СтруктРеквЖурнала 			= Новый Структура("ПометкаУдаления,МаршрутныйЛист,Дата,Рейс,ПланДоставки,ЕстьДанные,ТЭК,Водитель,ТранспортноеСредство,Телефон,ПаспортныеДанные,Исключено,ДатаОтгрузки,ПеревозчикНеПоПлану,ЕстьДанные,Проведен");
	
	//конец изменений 
	
	//Для каждого рейса сформируем журнал учета а/м
	Для каждого Рейс Из Маршруты Цикл
		
		//Обновляем и которые перенесли
		//Если Не Рейс.ДатаПереноса = Дата(1,1,1) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Рейс.Рейс) Тогда
			Продолжить;
		КонецЕсли;
		
		ЖурналУчетаВъезда = ВернутьЖурналУчетаАМ(Рейс.КлючСтроки);
		Если ЖурналУчетаВъезда = Неопределено Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(ЖурналУчетаВъезда) Тогда
			
			ЖурналУчетаВъезда = Неопределено;
			
			//Проверим не был ли перенесен данный рейс
			СтрокаЗаданияНаПеревозки = ЗаданияНаПеревозку.Найти(Рейс.КлючСтроки,"КлючСтроки");
			Если Не СтрокаЗаданияНаПеревозки = Неопределено И ЗначениеЗаполнено(СтрокаЗаданияНаПеревозки.ЗаданиеНаПеревозку) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				               |	ПТЛ_ПланДоставкиМаршруты.КлючСтроки,
				               |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.Ссылка КАК ЖурналУчета
				               |ИЗ
				               |	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
				               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
				               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЖурналУчетаВъездаВыездаАМ КАК ПТЛ_ЖурналУчетаВъездаВыездаАМ
				               |			ПО ПТЛ_ПланДоставкиМаршруты.Рейс = ПТЛ_ЖурналУчетаВъездаВыездаАМ.Рейс
				               |				И ПТЛ_ПланДоставкиМаршруты.Ссылка = ПТЛ_ЖурналУчетаВъездаВыездаАМ.ПланДоставки
				               |		ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.КлючСтроки = ПТЛ_ПланДоставкиМаршруты.КлючСтроки
				               |			И ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = ПТЛ_ПланДоставкиМаршруты.Ссылка
				               |ГДЕ
				               |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
				               |	И ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка.Проведен = ИСТИНА
				               |	И НЕ ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка.Ссылка = &Ссылка
				               |	И ПТЛ_ПланДоставкиЗаданияНаПеревозку.Исключено = ИСТИНА
				               |	И ПТЛ_ПланДоставкиМаршруты.ДатаПереноса = &ДатаПереноса
				               |	И ПТЛ_ЖурналУчетаВъездаВыездаАМ.Проведен = ИСТИНА";
				Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", СтрокаЗаданияНаПеревозки.ЗаданиеНаПеревозку);
				Запрос.УстановитьПараметр("Ссылка", Ссылка);
				Запрос.УстановитьПараметр("ДатаПереноса", ДатаОтгрузки);
				
				Результат = Запрос.Выполнить().Выбрать();
				Если Результат.Следующий() Тогда
					БылЖурналУчета = Результат.ЖурналУчета;
					Если ЗначениеЗаполнено(БылЖурналУчета) Тогда
						ЖурналУчетаВъезда = БылЖурналУчета.Скопировать();
						ЖурналУчетаВъезда.Дата = ТекущаяДата();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//Blik 040117 57270 н  //Blik 190117 не будет круговых рейсов закком
			//Если ЗначениеЗаполнено(БылЖурналУчета) Тогда
			//	ЗаполнитьРеквизитыЖурналаИЗаписать(ЖурналУчетаВъезда,Истина,Отказ,Рейс);  	
			//КонецЕсли;
			//Blik 040117 57270 к
			Если ЖурналУчетаВъезда = Неопределено Тогда
				//СоздаемЖурналыШт = ПолучитьДанныеПоСтатусуИКруговомуРейсу(Рейс);
				//Blik 040117 57270 н
				//1 создаем 1 журнал
				//2 создаем 2 док журнал это круговой рейс
				//Blik 190117 не будет круговых рейсов закком
				//Если СоздаемЖурналыШт = 1 тогда
					ЖурналУчетаВъезда = Документы.ПТЛ_ЖурналУчетаВъездаВыездаАМ.СоздатьДокумент();
					ЖурналУчетаВъезда.Дата = ТекущаяДата();
				//	ЗаполнитьРеквизитыЖурналаИЗаписать(ЖурналУчетаВъезда,Истина,Отказ,Рейс);
				//ИначеЕсли СоздаемЖурналыШт = 2 тогда
				//	ЖурналУчетаВъезда = Документы.ПТЛ_ЖурналУчетаВъездаВыездаАМ.СоздатьДокумент();
				//	ЖурналУчетаВъезда.Дата = ТекущаяДата();
				//	ЗаполнитьРеквизитыЖурналаИЗаписать(ЖурналУчетаВъезда,Истина,Отказ,Рейс);
				//	ЖурналУчетаВъезда = Документы.ПТЛ_ЖурналУчетаВъездаВыездаАМ.СоздатьДокумент();
				//	ЖурналУчетаВъезда.Дата = ТекущаяДата();
				//	ЗаполнитьРеквизитыЖурналаИЗаписать(ЖурналУчетаВъезда,Истина,Отказ,Рейс);
				//КонецЕсли;
				//Blik 040117 57270 к
			КонецЕсли;
			//начало изменений Ожиганов 12.11.2015 б/н уменьшение вероятности взаимоблокировки при проведении Журна учета и плана доставки 
			ЗаполнитьРеквизитыЖурналаИЗаписать(ЖурналУчетаВъезда,Истина,Отказ,Рейс);  //Blik 040117 57270 
			продолжить;
			//конец изменений 
		Иначе
			
			//начало изменений Ожиганов 12.11.2015 б/н уменьшение вероятности взаимоблокировки при проведении Журна учета и плана доставки 
			ЗапросПоИзменениюТабличнойЧастиЖурналаУчета.УстановитьПараметр("Рейс",Рейс.Рейс);
			ЗапросПоИзменениюТабличнойЧастиЖурналаУчета.УстановитьПараметр("ПланДоставки",Ссылка);
			ЗапросПоИзменениюТабличнойЧастиЖурналаУчета.УстановитьПараметр("Журнал",ЖурналУчетаВъезда);
			НужноМенятьТабличнуюЧасть = Истина;
			ВыбркаНужноМенятьТаблЧасть = ЗапросПоИзменениюТабличнойЧастиЖурналаУчета.Выполнить().Выбрать();
			Если ВыбркаНужноМенятьТаблЧасть.Следующий() Тогда
				Если  Не ВыбркаНужноМенятьТаблЧасть.НужноМенять  Тогда
					НужноМенятьТабличнуюЧасть  =   Ложь;
				КонецЕсли;	
			КонецЕсли;
			
			НужноМенятьШапку = Ложь;
			ЗапросКРеквизитамЖурнала.УстановитьПараметр("Ссылка",ЖурналУчетаВъезда);
			Выборка = ЗапросКРеквизитамЖурнала.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтруктРеквЖурнала,Выборка);
			Иначе
				вызватьисключение "Сбой в программе!!! Обратитесь к программисту!";
			КонецЕслИ;	
			
			ЗаполнитьРеквизитыЖурналаИЗаписать(СтруктРеквЖурнала,Ложь,Отказ,Рейс);
			Для каждого ТекЭлем Из СтруктРеквЖурнала Цикл
				Если  ТекЭлем.Значение <> Выборка[ТекЭлем.Ключ] Тогда
					  НужноМенятьШапку = Истина;
					  прервать;
				КонецЕсли;	
			КонецЦикла; 
			
			//Сообщить(""+ЖурналУчетаВъезда+" "+?(НужноМенятьТабличнуюЧасть,"Меняем","НЕМЕНЯЕМ"));
			
			Если НужноМенятьШапку или НужноМенятьТабличнуюЧасть Тогда
				ОбъектЖурнала  = ЖурналУчетаВъезда.ПолучитьОбъект();
				Если НужноМенятьШапку Тогда
						Для каждого ТекЭлем Из СтруктРеквЖурнала Цикл
							Если  ТекЭлем.Значение <> ОбъектЖурнала[ТекЭлем.Ключ] Тогда
								  ОбъектЖурнала[ТекЭлем.Ключ] = ТекЭлем.Значение;
							КонецЕсли;	
						КонецЦикла; 
				КонецЕслИ;	
				Если НужноМенятьТабличнуюЧасть Тогда
					ОбъектЖурнала.ОбновитьДанныеПоНакладным();
				КонецЕсли;	
				Если ОбъектЖурнала.Проведен и ОбъектЖурнала.ПометкаУдаления Тогда
					ОбъектЖурнала.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ИначеЕсли ОбъектЖурнала.Проведен и НЕ  ОбъектЖурнала.ПометкаУдаления Тогда
					ОбъектЖурнала.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ОбъектЖурнала.Записать(РежимЗаписиДокумента.Запись);
				КонецЕслИ;	
			КонецЕсли;	
			//конец изменений 
			
			//ЖурналУчетаВъезда = ЖурналУчетаВъезда.ПолучитьОбъект();
			
		КонецЕсли;
		
		//начало изменений Ожиганов 12.11.2015 б/н уменьшение вероятности взаимоблокировки при проведении Журна учета и плана доставки 
		
		//ЖурналУчетаВъезда.Заполнить(Рейс.Рейс);
		//
		//ЖурналУчетаВъезда.ДатаОтгрузки = ДатаОтгрузки;
		//
		//Если Не ЖурналУчетаВъезда.ПеревозчикНеПоПлану И Не ЖурналУчетаВъезда.ЕстьДанные Тогда
		//	
		//	ЖурналУчетаВъезда.ТЭК = Рейс.ТЭК;
		//	ЖурналУчетаВъезда.Водитель = Рейс.Водитель;
		//	ЖурналУчетаВъезда.ТранспортноеСредство = Рейс.ТранспортноеСредство;
		//	
		//	Если ТипЗнч(Рейс.Водитель) = Тип("СправочникСсылка.ПТЛ_Водители") Тогда
		//		ЖурналУчетаВъезда.Телефон = Рейс.Водитель.Телефон;
		//		ЖурналУчетаВъезда.ПаспортныеДанные = Рейс.Водитель.ПаспортныеДанные;
		//	КонецЕсли;
		//КонецЕсли;
		//
		//Если Не Рейс.ДатаПереноса = Дата(1,1,1) Тогда
		//	ЖурналУчетаВъезда.Исключено = Истина;	
		//КонецЕсли;
		//
		//Попытка
		//	
		//	Если Рейс.ДатаПереноса = Дата(1,1,1) Тогда
		//		
		//		Если ЖурналУчетаВъезда.ПометкаУдаления Тогда
		//			ЖурналУчетаВъезда.ПометкаУдаления = Ложь;
		//			ЖурналУчетаВъезда.Записать();
		//		КонецЕсли;

		//		ЖурналУчетаВъезда.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		//	Иначе
		//		Если ЖурналУчетаВъезда.ЕстьДанные Тогда
		//			Если ЖурналУчетаВъезда.ПометкаУдаления Тогда
		//				ЖурналУчетаВъезда.ПометкаУдаления = Ложь;
		//				ЖурналУчетаВъезда.Записать();
		//			КонецЕсли;

		//			ЖурналУчетаВъезда.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
		//		Иначе
		//			Если ЖурналУчетаВъезда.Проведен Тогда
		//				ЖурналУчетаВъезда.ПометкаУдаления = Истина;						
		//			КонецЕсли;
		//			ЖурналУчетаВъезда.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//		КонецЕсли;				
		//	КонецЕсли;
		//Исключение
		//	
		//	ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),Отказ);
		//	
		//КонецПопытки;
		//конец изменений 
	КонецЦикла; 
	
КонецПроцедуры

Функция ДоступенСтатусДокумента() Экспорт

	Возврат Истина;	

КонецФункции // ()

Функция ПолучитьСсылкиНаПлан(Рейс = Неопределено) Экспорт
	
	Если ЭтоНовый() Тогда
		Возврат Ложь; //нет ссылок
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор
	               |ПОМЕСТИТЬ ТабЗадания
	               |ИЗ
	               |	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	               |ГДЕ
	               |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка 
				   //{07.08.2015 Островерхий заявка №б/н 
				   |	И НЕ ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка)" 
				   //07.08.2015 Островерхий} 
				   + ?(Рейс = Неопределено,"","
	               |	И ПТЛ_ПланДоставкиЗаданияНаПеревозку.КлючСтроки = &КлючСтроки") + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.ЗаданиеНаПодбор,
	               |	ВложенныйЗапрос.Журнал + ВложенныйЗапрос.РеализацияТоваровУслуг + ВложенныйЗапрос.ТребованиеНакладная + ВложенныйЗапрос.ПеремещениеТоваров КАК ЕстьСсылки
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТабЗадания.ЗаданиеНаПеревозкуЗаданиеНаПодбор КАК ЗаданиеНаПодбор,
	               |		ВЫБОР
	               |			КОГДА ПТЛ_ЖурналУчетаВъездаВыездаАМЗаданияНаПодбор.Ссылка ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ КАК Журнал,
	               |		ВЫБОР
	               |			КОГДА РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ КАК РеализацияТоваровУслуг,
	               |		ВЫБОР
	               |			КОГДА ТребованиеНакладная.Ссылка ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ КАК ТребованиеНакладная,
	               |		ВЫБОР
	               |			КОГДА ПеремещениеТоваров.Ссылка ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ КАК ПеремещениеТоваров
	               |	ИЗ
	               |		ТабЗадания КАК ТабЗадания
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЖурналУчетаВъездаВыездаАМ.ЗаданияНаПодбор КАК ПТЛ_ЖурналУчетаВъездаВыездаАМЗаданияНаПодбор
	               |			ПО ТабЗадания.ЗаданиеНаПеревозкуЗаданиеНаПодбор.Ссылка = ПТЛ_ЖурналУчетаВъездаВыездаАМЗаданияНаПодбор.ЗаданиеНаПодбор.Ссылка
	               |				И (НЕ ПТЛ_ЖурналУчетаВъездаВыездаАМЗаданияНаПодбор.Ссылка.ПометкаУдаления)
				   |				И (НЕ ПТЛ_ЖурналУчетаВъездаВыездаАМЗаданияНаПодбор.Ссылка.Исключено)
				   //|				И (ПТЛ_ЖурналУчетаВъездаВыездаАМЗаданияНаПодбор.Ссылка.Рейс)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |			ПО ТабЗадания.ЗаданиеНаПеревозкуЗаданиеНаПодбор = РеализацияТоваровУслуг.СП_ЗаданиеНаПодбор
	               |				И (РеализацияТоваровУслуг.Проведен = Истина)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТребованиеНакладная КАК ТребованиеНакладная
	               |			ПО ТабЗадания.ЗаданиеНаПеревозкуЗаданиеНаПодбор = ТребованиеНакладная.СП_ЗаданиеНаПодбор
	               |				И (ТребованиеНакладная.Проведен = Истина)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |			ПО ТабЗадания.ЗаданиеНаПеревозкуЗаданиеНаПодбор = ПеремещениеТоваров.СП_ЗаданиеНаПодбор
	               |				И (ПеремещениеТоваров.Проведен = Истина)) КАК ВложенныйЗапрос
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТабЗадания";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КлючСтроки", Рейс);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Итог("ЕстьСсылки") > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьЕстьЛиДокументыПоПлану() Экспорт
	//Посмотрим есть ли введенные документы по рейсу
	мМожноЗагружать = Истина;
	
	Если ЭтоНовый() или Не Проведен Тогда
		Возврат НЕ мМожноЗагружать;
	КонецЕсли;
	
	мМожноЗагружать = Не ПолучитьСсылкиНаПлан();
		
	Возврат НЕ мМожноЗагружать;	
КонецФункции

/// Кунов О.В., 18.06.2015 - 40343
Функция ЕстьНеподобранныеЗаданияНаПеревозку() Экспорт
	
    //начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
	//переделаем на запрос
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПТЛ_ЗаданиеНаПеревозку.Ссылка
	               |ИЗ
	               |	Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
	               |ГДЕ
	               |	ПТЛ_ЗаданиеНаПеревозку.ЗаданиеНаПодбор = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНАПодбор.ПустаяСсылка)
	               |	И ПТЛ_ЗаданиеНаПеревозку.Ссылка В(&ЗаданияНаПеревозку)
	               |	И ПТЛ_ЗаданиеНаПеревозку.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)";
				   
	Запрос.УстановитьПараметр("ЗаданияНаПеревозку",ЗаданияНаПеревозку.ВыгрузитьКолонку("ЗаданиеНаПеревозку"));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕслИ;	
	//конец изменений  	
	
	//Для Каждого СтрокаЗаданиеНаПеревозку Из ЗаданияНаПеревозку Цикл
	//	//Blik 221116 для доставки от поставщика нет задания на подбор - его не проверяем
	//	//Если не СтрокаЗаданиеНаПеревозку.ЗаданиеНаПеревозку.ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика Тогда
	//		Если Не ЗначениеЗаполнено(СтрокаЗаданиеНаПеревозку.ЗаданиеНаПеревозку.ЗаданиеНаПодбор) Тогда
	//			Возврат Истина;
	//		КонецЕсли; 
	//	//КонецЕсли;
	//КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
///

//начало изменений Ожиганов 30.07.2015 уберем формирование журнала авто, там где не требуется 
Функция ПРГ_НужноФормироватьДокиЖурналаАвто() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СП_ПривязкаСкладовКОтделениям.ФормироватьЖурналАвто
	                      |ИЗ
	                      |	РегистрСведений.СП_ПривязкаСкладовКОтделениям КАК СП_ПривязкаСкладовКОтделениям
	                      |ГДЕ
	                      |	СП_ПривязкаСкладовКОтделениям.Отделение = &Отделение");
						  
	Запрос.УстановитьПараметр("Отделение",Отделение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка .Следующий() Тогда
		возврат Выборка .ФормироватьЖурналАвто;
	Иначе
		возврат Ложь;
	КонецЕсли;	
КонецФункции
//конец изменений 

Функция ПРГ_ПолучитьИинформациюДляСодержания(СписокЗаданий,КолВоТочек,КолвоПалетоМест) Экспорт
	
	//{27.08.2015 Островерхий заявка №б/н 
	//Если ПРГЗапросДляСодержания = Неопределено Тогда 
	//27.08.2015 Островерхий} 
	ПРГЗапросДляСодержания = Новый Запрос("ВЫБРАТЬ
	|	ПТЛ_ЗаданиеНаПеревозку.Ссылка КАК ЗаданиеНаПеревозку,
	|	ПТЛ_ЗаданиеНаПеревозку.Заказ,
	|	ПТЛ_ЗаданиеНаПеревозку.ЗаданиеНаПодбор
	|ПОМЕСТИТЬ ТаблЗаданий
	|ИЗ
	|	Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
	|ГДЕ
	|	ПТЛ_ЗаданиеНаПеревозку.Ссылка В(&СписокЗаданий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//Blik 57270 091116 н
	//| ВЫБРАТЬ
	//|	СУММА(ЗаказПоставщикуТовары.ТП_КоличествоПалеттоМест) КАК ТП_КоличествоПалеттоМест,
	//|	ТаблЗаданий.ЗаданиеНаПеревозку
	//|ПОМЕСТИТЬ ВТ_КолвоПМест
	//|ИЗ
	//|	ТаблЗаданий КАК ТаблЗаданий
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	//|		ПО ТаблЗаданий.ЗаданиеНаПеревозку.Заказ = ЗаказПоставщикуТовары.Ссылка
	//|			И ТаблЗаданий.ЗаданиеНаПеревозку.ДатаОтгрузкиПлан = ЗаказПоставщикуТовары.ТП_ДатаОтгрузкитч
	//|			И ТаблЗаданий.ЗаданиеНаПеревозку.ДатаДоставкиПлан = ЗаказПоставщикуТовары.ДатаПоставки
	//|ГДЕ
	//|	ТаблЗаданий.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ТаблЗаданий.ЗаданиеНаПеревозку
	|ВЫБРАТЬ
	|СУММА(ТаблЗаданий.ЗаданиеНаПеревозку.ТП_КоличествоПалеттоМест) КАК ТП_КоличествоПалеттоМест,
	|ТаблЗаданий.ЗаданиеНаПеревозку
	|ПОМЕСТИТЬ ВТ_КолвоПМест
	|ИЗ
	|	ТаблЗаданий КАК ТаблЗаданий
	|ГДЕ
	|	ТаблЗаданий.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	|	или ТаблЗаданий.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
	|	или ТаблЗаданий.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблЗаданий.ЗаданиеНаПеревозку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//Blik 57270 091116 к
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ТоварнаяКатегория,
	|	ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.ВесБрутто) КАК ЧИСЛО(10, 3)) КАК ВесБрутто,
	|	ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.Объем) КАК ЧИСЛО(10, 3)) КАК Объем,
	|	ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.ВесНетто) КАК ЧИСЛО(10, 3)) КАК ВесНетто,
	|	СУММА(ВложенныйЗапрос.КоличествоМест) КАК КоличествоМест,
	|	СУММА(ВложенныйЗапрос.КоличествоПозиций) КАК КоличествоПозиций
	|ИЗ
	|	(ВЫБРАТЬ
	|		СП_ЗаданиеНаПодборТовары.Номенклатура.НСИ_ТоварнаяКатегория КАК ТоварнаяКатегория,
	|		СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест ЕСТЬ NULL 
	|						ТОГДА СП_ЗаданиеНаПодборТовары.Количество
	|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.Количество * СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Вес / СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Коэффициент
	|				КОНЕЦ / 1000 КАК ЧИСЛО(15, 6))) КАК ВесБрутто,
	|		СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест ЕСТЬ NULL 
	|						ТОГДА СП_ЗаданиеНаПодборТовары.Количество
	|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.Количество * СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Объем / СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Коэффициент
	|				КОНЕЦ / 1000 КАК ЧИСЛО(15, 6))) КАК Объем,
	|		СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест ЕСТЬ NULL 
	|						ТОГДА СП_ЗаданиеНаПодборТовары.Количество
	|					ИНАЧЕ СП_ЗаданиеНаПодборТовары.Количество * СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто / СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест.Коэффициент
	|				КОНЕЦ / 1000 КАК ЧИСЛО(15, 6))) КАК ВесНетто,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СП_ЗаданиеНаПодборТовары.Номенклатура) КАК КоличествоПозиций,
	|		СУММА(СП_ЗаданиеНаПодборТовары.КоличествоМест) КАК КоличествоМест
	|	ИЗ
	|		ТаблЗаданий КАК ТаблЗаданий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СП_ЗаданиеНаПодбор.Товары КАК СП_ЗаданиеНаПодборТовары
	|			ПО ТаблЗаданий.ЗаданиеНаПодбор = СП_ЗаданиеНаПодборТовары.Ссылка
	|				И (ТаблЗаданий.ЗаданиеНаПодбор <> ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СП_ЗаданиеНаПодборТовары.Номенклатура.НСИ_ТоварнаяКатегория
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПокупателяТовары.Номенклатура.НСИ_ТоварнаяКатегория,
	|		СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ЗаказПокупателяТовары.ЕдиницаИзмеренияМест ЕСТЬ NULL 
	|						ТОГДА ЗаказПокупателяТовары.Количество
	|					ИНАЧЕ ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.Вес / ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.Коэффициент
	|				КОНЕЦ / 1000 КАК ЧИСЛО(15, 6))),
	|		СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ЗаказПокупателяТовары.ЕдиницаИзмеренияМест ЕСТЬ NULL 
	|						ТОГДА ЗаказПокупателяТовары.Количество
	|					ИНАЧЕ ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.Объем / ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.Коэффициент
	|				КОНЕЦ / 1000 КАК ЧИСЛО(15, 6))),
	|		СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ЗаказПокупателяТовары.ЕдиницаИзмеренияМест ЕСТЬ NULL 
	|						ТОГДА ЗаказПокупателяТовары.Количество
	|					ИНАЧЕ ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто / ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.Коэффициент
	|				КОНЕЦ / 1000 КАК ЧИСЛО(15, 6))),
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателяТовары.Номенклатура),
	|		СУММА(ЗаказПокупателяТовары.КоличествоМест)
	|	ИЗ
	|		ТаблЗаданий КАК ТаблЗаданий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|			ПО ТаблЗаданий.Заказ = ЗаказПокупателяТовары.Ссылка
	|				И (ТаблЗаданий.ЗаданиеНаПодбор = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка))
	|				И (ТаблЗаданий.Заказ ССЫЛКА Документ.ЗаказПокупателя)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателяТовары.Номенклатура.НСИ_ТоварнаяКатегория
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	//Blik 65458 220817 н
	|   Выбор Когда ВнутреннийЗаказТовары.ссылка.ПРГ_ВидОперации = Значение(Перечисление.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера)
	|   или ВнутреннийЗаказТовары.ссылка.ПРГ_ВидОперации = Значение(Перечисление.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру)
	|   Тогда
	|  ""СиМ""
	|  Иначе
	|		ВнутреннийЗаказТовары.Номенклатура.НСИ_ТоварнаяКатегория Конец,
	//|		ВнутреннийЗаказТовары.Номенклатура.НСИ_ТоварнаяКатегория,
	//Blik 65458 220817 к
	|		СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ВнутреннийЗаказТовары.ЕдиницаИзмеренияМест ЕСТЬ NULL 
	|						ТОГДА ВнутреннийЗаказТовары.Количество
	|					ИНАЧЕ ВнутреннийЗаказТовары.Количество * ВнутреннийЗаказТовары.ЕдиницаИзмеренияМест.Вес / ВнутреннийЗаказТовары.ЕдиницаИзмеренияМест.Коэффициент
	|				КОНЕЦ / 1000 КАК ЧИСЛО(15, 6))),
	|		СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ВнутреннийЗаказТовары.ЕдиницаИзмеренияМест ЕСТЬ NULL 
	|						ТОГДА ВнутреннийЗаказТовары.Количество
	|					ИНАЧЕ ВнутреннийЗаказТовары.Количество * ВнутреннийЗаказТовары.ЕдиницаИзмеренияМест.Объем / ВнутреннийЗаказТовары.ЕдиницаИзмеренияМест.Коэффициент
	|				КОНЕЦ / 1000 КАК ЧИСЛО(15, 6))),
	|		СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ВнутреннийЗаказТовары.ЕдиницаИзмеренияМест ЕСТЬ NULL 
	|						ТОГДА ВнутреннийЗаказТовары.Количество
	|					ИНАЧЕ ВнутреннийЗаказТовары.Количество * ВнутреннийЗаказТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто / ВнутреннийЗаказТовары.ЕдиницаИзмеренияМест.Коэффициент
	|				КОНЕЦ / 1000 КАК ЧИСЛО(15, 6))),
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВнутреннийЗаказТовары.Номенклатура),
	|		СУММА(ВнутреннийЗаказТовары.КоличествоМест)
	|	ИЗ
	|		ТаблЗаданий КАК ТаблЗаданий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
	|			ПО ТаблЗаданий.Заказ = ВнутреннийЗаказТовары.Ссылка
	|				И (ТаблЗаданий.ЗаданиеНаПодбор = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка))
	|				И (ТаблЗаданий.Заказ ССЫЛКА Документ.ВнутреннийЗаказ)
	|	
	|	СГРУППИРОВАТЬ ПО
	//Blik 65458 220817 н
	|   Выбор Когда ВнутреннийЗаказТовары.ссылка.ПРГ_ВидОперации = Значение(Перечисление.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера)
	|   или ВнутреннийЗаказТовары.ссылка.ПРГ_ВидОперации = Значение(Перечисление.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру)
	|   Тогда
	|  ""СиМ""
	|  Иначе
	|		ВнутреннийЗаказТовары.Номенклатура.НСИ_ТоварнаяКатегория Конец
	//|		ВнутреннийЗаказТовары.Номенклатура.НСИ_ТоварнаяКатегория
	//Blik 65458 220817 к

	//Blik 57270 31016 н добавлен запрос для заказа поставщику 
	|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|	ЗаказПоставщикуТовары.Номенклатура.НСИ_ТоварнаяКатегория,
	//|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	//|				КОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест ЕСТЬ NULL 
	//|					ТОГДА ЗаказПоставщикуТовары.Количество
	//|				ИНАЧЕ ЗаказПоставщикуТовары.Количество * ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.Вес / ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.Коэффициент
	//|			КОНЕЦ / 1000 КАК ЧИСЛО(15, 6))),
	//|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	//|				КОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест ЕСТЬ NULL 
	//|					ТОГДА ЗаказПоставщикуТовары.Количество
	//|				ИНАЧЕ ЗаказПоставщикуТовары.Количество * ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.Объем / ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.Коэффициент
	//|			КОНЕЦ / 1000 КАК ЧИСЛО(15, 6))),
	//|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	//|				КОГДА ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест ЕСТЬ NULL 
	//|					ТОГДА ЗаказПоставщикуТовары.Количество
	//|				ИНАЧЕ ЗаказПоставщикуТовары.Количество * ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.ПРГ_Нетто / ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест.Коэффициент
	//|			КОНЕЦ / 1000 КАК ЧИСЛО(15, 6))),
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщикуТовары.Номенклатура),
	//|	СУММА(ЗаказПоставщикуТовары.КоличествоМест)
	//|ИЗ
	//|	ТаблЗаданий КАК ТаблЗаданий
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	//|		ПО ТаблЗаданий.Заказ = ЗаказПоставщикуТовары.Ссылка
	//|			И (ТаблЗаданий.ЗаданиеНаПодбор = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка))
	//|			И (ТаблЗаданий.Заказ ССЫЛКА Документ.ЗаказПоставщику)
	//|			И (ЗаказПоставщикуТовары.ТП_ДатаОтгрузкитч = ТаблЗаданий.ЗаданиеНаПеревозку.ДатаОтгрузкиПлан
	//|				И ЗаказПоставщикуТовары.ДатаПоставки = ТаблЗаданий.ЗаданиеНаПеревозку.ДатаДоставкиПлан)
	|ВЫБРАТЬ
	|""СиМ"",
	//Blik 060217 62085 н
	//|СУММА(ВЫРАЗИТЬ(ТаблЗаданий.ЗаданиеНаПеревозку.ТП_ВесБрутто КАК ЧИСЛО(15, 6))),
	//|СУММА(ВЫРАЗИТЬ(ТаблЗаданий.ЗаданиеНаПеревозку.ТП_Объем КАК ЧИСЛО(15, 6))),
	//|СУММА(ВЫРАЗИТЬ(ТаблЗаданий.ЗаданиеНаПеревозку.ТП_ВесНетто КАК ЧИСЛО(15, 6))),
	//|КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПТЛ_ЗаданиеНаПеревозкуТП_Товары.Номенклатура),
	//|СУММА(ТаблЗаданий.ЗаданиеНаПеревозку.ТП_КоличествоПалеттоМест)
	|ВЫРАЗИТЬ(ТаблЗаданий.ЗаданиеНаПеревозку.ТП_ВесБрутто КАК ЧИСЛО(15, 6)),
	|ВЫРАЗИТЬ(ТаблЗаданий.ЗаданиеНаПеревозку.ТП_Объем КАК ЧИСЛО(15, 6)),
	|ВЫРАЗИТЬ(ТаблЗаданий.ЗаданиеНаПеревозку.ТП_ВесНетто КАК ЧИСЛО(15, 6)),
	|КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПТЛ_ЗаданиеНаПеревозкуТП_Товары.Номенклатура),
	|ТаблЗаданий.ЗаданиеНаПеревозку.ТП_КоличествоПалеттоМест
	//Blik 060217 62085 к
	|ИЗ                                      
	|	ТаблЗаданий КАК ТаблЗаданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЗаданиеНаПеревозку.ТП_Товары КАК ПТЛ_ЗаданиеНаПеревозкуТП_Товары
	|		ПО ТаблЗаданий.ЗаданиеНаПеревозку.Ссылка = ПТЛ_ЗаданиеНаПеревозкуТП_Товары.Ссылка
	|ГДЕ
	|	ТаблЗаданий.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	|
	|СГРУППИРОВАТЬ ПО
	|	""СиМ"",
	//Blik 060217 62085 н
	|	ВЫРАЗИТЬ(ТаблЗаданий.ЗаданиеНаПеревозку.ТП_ВесБрутто КАК ЧИСЛО(15, 6)),
	|	ВЫРАЗИТЬ(ТаблЗаданий.ЗаданиеНаПеревозку.ТП_Объем КАК ЧИСЛО(15, 6)),
	|	ВЫРАЗИТЬ(ТаблЗаданий.ЗаданиеНаПеревозку.ТП_ВесНетто КАК ЧИСЛО(15, 6)),
	|	ТаблЗаданий.ЗаданиеНаПеревозку.ТП_КоличествоПалеттоМест
	//Blik 060217 62085 к
	//начало изменений Ожиганов А. поправим чтобы выводилось если хотябы одно задание на перевозку 15.12.2016
	| Имеющие Количество(*) > 0
	//конец изменений 
	 
	|) КАК ВложенныйЗапрос
	///Blik 57270 31016 к
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ТоварнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	///Blik 57270 091116 н 
	//|	СУММА(ЕСТЬNULL(ПТЛ_ЗаданиеНаПеревозку.Заказ.КП_КоличествоПаллетоМест, 0)) КАК КП_КоличествоПаллетоМест,
	|	СУММА(ВЫБОР
	|		КОГДА ПТЛ_ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	|			ТОГДА ЕСТЬNULL(ВТ_КолвоПМест.ТП_КоличествоПалеттоМест, 0)
	|		ИНАЧЕ ЕСТЬNULL(ПТЛ_ЗаданиеНаПеревозку.Заказ.КП_КоличествоПаллетоМест, 0)
	|	КОНЕЦ) КАК КП_КоличествоПаллетоМест,
	///Blik 57270 091116 к
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПТЛ_ЗаданиеНаПеревозку.АдресПоставки) КАК КоличествоТочек
	|ИЗ
	|	ТаблЗаданий КАК ТаблЗаданий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
	|		ПО ТаблЗаданий.ЗаданиеНаПеревозку = ПТЛ_ЗаданиеНаПеревозку.Ссылка
	|		Левое СОЕДИНЕНИЕ ВТ_КолвоПМест КАК ВТ_КолвоПМест
	|	    ПО ТаблЗаданий.ЗаданиеНаПеревозку.Ссылка = ВТ_КолвоПМест.ЗаданиеНаПеревозку.Ссылка");
	//КонецЕсли;	
										  
	ПРГЗапросДляСодержания.УстановитьПараметр("СписокЗаданий",СписокЗаданий);
	
	МассРез = ПРГЗапросДляСодержания.ВыполнитьПакет();
	Результат = МассРез[2].Выгрузить();//МассРез[1].Выгрузить();
	
	КолВоТочек = 0; КолвоПалетоМест	 = 0;
	Выборка	 = МассРез[3].Выбрать();//МассРез[2].Выбрать();
	Если Выборка.Следующий() Тогда
		КолВоТочек 		= Выборка.КоличествоТочек; 
		КолвоПалетоМест	= Выборка.КП_КоличествоПаллетоМест;
	КонецЕслИ;	
	
	возврат  Результат;
		
КонецФункции	
//конец изменений 

//начало изменений Ожиганов 12.11.2015 б/н уменьшение вероятности взаимоблокировки при проведении Журна учета и плана доставки 
Функция ПолучитьЗапросПоИзменениюТабличнойЧастиЖурналаУчета()
	возврат Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                     |	ПТЛ_ПланДоставки.ЗаданиеНаПодбор,
	                     |	МАКСИМУМ(ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЕСТЬNULL(ПеремещениеТоваров.Ссылка, ЕСТЬNULL(ТребованиеНакладная.Ссылка, НЕОПРЕДЕЛЕНО)))) КАК Накладная
	                     |ПОМЕСТИТЬ ТаблЗаданий
	                     |ИЗ
	                     |	Документ.СП_ЗаданиеНаПодбор КАК Задания
	                     |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	                     |		ПО Задания.Ссылка = ПТЛ_ПланДоставки.ЗаданиеНаПодбор
	                     |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                     |		ПО Задания.Ссылка = РеализацияТоваровУслуг.СП_ЗаданиеНаПодбор
	                     |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТребованиеНакладная КАК ТребованиеНакладная
	                     |		ПО Задания.Ссылка = ТребованиеНакладная.СП_ЗаданиеНаПодбор
	                     |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	                     |		ПО Задания.Ссылка = ПеремещениеТоваров.СП_ЗаданиеНаПодбор
	                     |			И Задания.Склад = ПеремещениеТоваров.СкладОтправитель
	                     |ГДЕ
	                     |	ПТЛ_ПланДоставки.ПланДоставки = &ПланДоставки
	                     |	И ПТЛ_ПланДоставки.Рейс = &Рейс
	                     |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ
	                     |
	                     |СГРУППИРОВАТЬ ПО
	                     |	ПТЛ_ПланДоставки.ЗаданиеНаПодбор
	                     |;
	                     |
	                     |////////////////////////////////////////////////////////////////////////////////
	                     |ВЫБРАТЬ
	                     |	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	                     |				КОГДА ТаблЖурнала.ЗаданиеНаПодбор = ТаблЗаданий.ЗаданиеНаПодбор
	                     |						И ТаблЖурнала.Накладная = ТаблЗаданий.Накладная
	                     |					ТОГДА ЛОЖЬ
	                     |				ИНАЧЕ ИСТИНА
	                     |			КОНЕЦ), ЛОЖЬ) КАК НужноМенять
	                     |ИЗ
	                     |	Документ.ПТЛ_ЖурналУчетаВъездаВыездаАМ.ЗаданияНаПодбор КАК ТаблЖурнала
	                     |		ПОЛНОЕ СОЕДИНЕНИЕ ТаблЗаданий КАК ТаблЗаданий
	                     |		ПО ТаблЖурнала.ЗаданиеНаПодбор = ТаблЗаданий.ЗаданиеНаПодбор
	                     |ГДЕ
	                     |	ТаблЖурнала.Ссылка = &Журнал");
КонецФункции	
					 
Функция ПолучитьЗапросКРеквизитамЖурнала()
	
	возврат Новый Запрос("ВЫБРАТЬ
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.Ссылка,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.ПометкаУдаления,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.Проведен,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.Дата,
						 |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.МаршрутныйЛист,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.Рейс,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.ПланДоставки,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.ЕстьДанные,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.ТЭК,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.Водитель,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.ТранспортноеСредство,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.Телефон,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.ПаспортныеДанные,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.Исключено,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.ПеревозчикНеПоПлану,
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.ДатаОтгрузки
	                     |ИЗ
	                     |	Документ.ПТЛ_ЖурналУчетаВъездаВыездаАМ КАК ПТЛ_ЖурналУчетаВъездаВыездаАМ
	                     |ГДЕ
	                     |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.Ссылка = &Ссылка")
	
КонецФункции	

Процедура ЗаполнитьРеквизитыЖурналаИЗаписать(ЖурналУчетаВъезда,НужноЗаписывать,Отказ,Рейс)
	
	
		Если НужноЗаписывать Тогда
			ЖурналУчетаВъезда.Рейс = Рейс.Рейс;
			ЖурналУчетаВъезда.ПланДоставки  = Ссылка;
			
			ЖурналУчетаВъезда.Заполнить(Рейс.Рейс);
			
		Иначе
			//ЖурналУчетаВъезда.Рейс = Рейс.Рейс;
		КонецЕслИ;	
		
		ЖурналУчетаВъезда.МаршрутныйЛист = СокрЛП(Номер)+ "/"+СокрЛп(Рейс.КлючСтроки);
		
		ЖурналУчетаВъезда.ДатаОтгрузки = ДатаОтгрузки;
		
		Если Не ЖурналУчетаВъезда.ПеревозчикНеПоПлану И Не ЖурналУчетаВъезда.ЕстьДанные Тогда
			
			ЖурналУчетаВъезда.ТЭК = Рейс.ТЭК;
			ЖурналУчетаВъезда.Водитель = Рейс.Водитель;
			ЖурналУчетаВъезда.ТранспортноеСредство = Рейс.ТранспортноеСредство;
			
			Если ТипЗнч(Рейс.Водитель) = Тип("СправочникСсылка.ПТЛ_Водители") Тогда
		
				ЖурналУчетаВъезда.Телефон = Рейс.Водитель.Телефон;
		
    			//начало изменений Ожиганов А. б/н почему стали заполнять серию и номер 16.11.2016 
				СерияПаспорт = СокрЛП(Рейс.Водитель.СерияПаспорта);
				НомерПаспорт = СокрЛП(Рейс.Водитель.НомерПаспорта);
				НомерПаспорт = ?(ПустаяСтрока(СерияПаспорт),"",СерияПаспорт+" ")+?(Пустаястрока(НомерПаспорт),"",НомерПаспорт+" ");
				
				ЖурналУчетаВъезда.ПаспортныеДанные = НомерПаспорт + Рейс.Водитель.ПаспортныеДанные;				
				//конец изменений 
				
			КонецЕсли;
		КонецЕсли;
		
		Если Не Рейс.ДатаПереноса = Дата(1,1,1) Тогда
			ЖурналУчетаВъезда.Исключено = Истина;	
		КонецЕсли;
		
		Попытка
			
			Если Рейс.ДатаПереноса = Дата(1,1,1) Тогда
				
				Если ЖурналУчетаВъезда.ПометкаУдаления Тогда
					ЖурналУчетаВъезда.ПометкаУдаления = Ложь;
					Если НужноЗаписывать Тогда
						ЖурналУчетаВъезда.Записать();
					КонецЕсли;
				КонецЕсли;

				Если НужноЗаписывать Тогда
					ЖурналУчетаВъезда.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Иначе
					ЖурналУчетаВъезда.Проведен = Истина;
				КонецЕсли;	
			Иначе
				Если ЖурналУчетаВъезда.ЕстьДанные Тогда
					Если ЖурналУчетаВъезда.ПометкаУдаления Тогда
						ЖурналУчетаВъезда.ПометкаУдаления = Ложь;
						Если НужноЗаписывать Тогда
							ЖурналУчетаВъезда.Записать();
						КонецЕсли;	
					КонецЕсли;
                   Если НужноЗаписывать Тогда
						ЖурналУчетаВъезда.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				   Иначе
						ЖурналУчетаВъезда.Проведен = Истина;
				   КонецЕслИ;	
				Иначе
					Если ЖурналУчетаВъезда.Проведен Тогда
						ЖурналУчетаВъезда.ПометкаУдаления = Истина;						
					КонецЕсли;
					
					Если НужноЗаписывать Тогда
						ЖурналУчетаВъезда.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						ЖурналУчетаВъезда.Проведен = Ложь;
					КонецЕслИ;	
				КонецЕсли;				
			КонецЕсли;
		Исключение
			
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),Отказ);
			
		КонецПопытки;
	
	
КонецПроцедуры	
					 
//конец изменений 
//начало изменений Ожиганов 19.05.2016 б/н регистрация плана доставки в таблице изменений только при необходимости, попытаемся исключить блокировки при выгрузке 
Функция  ПРГ_ОпределитьНужнолиРегистрироватьПланДоставки(РежимЗаписи)
	
	//удалить
	//начало изменений Ожиганов 19.05.2016 б/н исправление ошибок при записи статуса в одну и туже секунду 

	Объект = ЭтотОбъект;
	//Ссылка = Объект.Ссылка; 
	//конец изменений 
	
	Если Не ЗначениеЗаполнено(Объект.Отделение) Тогда
		возврат Ложь;
	КонецЕсли;	
	
	Если Не Объект.Проведен Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
			возврат Ложь;
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда	
			возврат Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	АП_ОбменSolvo.Ссылка
	                      |ИЗ
	                      |	ПланОбмена.АП_ОбменSolvo.Отделения КАК АП_ОбменSolvoОтделения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.АП_ОбменSolvo КАК АП_ОбменSolvo
	                      |		ПО АП_ОбменSolvoОтделения.Ссылка = АП_ОбменSolvo.Ссылка
	                      |			И (АП_ОбменSolvoОтделения.Отделение = &Отделение)
	                      |ГДЕ
	                      |	АП_ОбменSolvo.Ссылка <> &Ссылка
	                      |	И НЕ АП_ОбменSolvo.ПриостановитьОбмен");
						  
	Запрос.УстановитьПараметр("Ссылка",ПланыОбмена.АП_ОбменSolvo.ЭтотУзел());
	Запрос.УстановитьПараметр("Отделение",Объект.Отделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		возврат Ложь;
	КонецЕсли;	
	
	Если  Объект.ЭтоНовый() Тогда
		возврат Истина;
	КонецЕсли;	
	
	СсылкаНаПлан  = Ссылка;
	// проверим есть ли запись в таблице регистрации
	Запрос.Текст = "ВЫБРАТЬ
	                      |	АП_ОбменSolvo.Ссылка,
	                      |	ПТЛ_ПланДоставкиИзменения.Узел
	                      |ИЗ
	                      |	ПланОбмена.АП_ОбменSolvo КАК АП_ОбменSolvo
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПТЛ_ПланДоставки.Изменения КАК ПТЛ_ПланДоставкиИзменения
	                      |		ПО ПТЛ_ПланДоставкиИзменения.Ссылка = &ВыбДок
						  | 	И  АП_ОбменSolvo.Ссылка = ПТЛ_ПланДоставкиИзменения.Узел
						  |		И ПТЛ_ПланДоставкиИзменения.НомерСообщения ЕСТЬ NULL
	                      |ГДЕ
	                      |	АП_ОбменSolvo.Ссылка <> &Ссылка
	//начало изменений Ожиганов 15.07.2016 исправление ошибки
	                      |	И НЕ АП_ОбменSolvo.ПриостановитьОбмен
	//конец изменений 
	                      |	И ПТЛ_ПланДоставкиИзменения.Узел ЕСТЬ NULL";
						  
	Запрос.УстановитьПараметр("Ссылка",ПланыОбмена.АП_ОбменSolvo.ЭтотУзел());
	//начало изменений Ожиганов 15.07.2016 исправление ошибки
	Запрос.УстановитьПараметр("ВыбДок",Ссылка);
	//конец изменений 
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		возврат Ложь;
	КонецЕсли;	
	
	//запрос к шапке 
	
	Запрос.Текст =  	 "ВЫБРАТЬ
	                	 |	ПТЛ_ПланДоставки.ДатаОтгрузки,
	                	 |	ПТЛ_ПланДоставки.СтатусДокумента,
	                	 |	ПТЛ_ПланДоставки.Дата,
	                	 |	ПТЛ_ПланДоставки.Проведен,
	                	 |	ПТЛ_ПланДоставки.ПометкаУдаления,
	                	 |	ПТЛ_ПланДоставки.Отделение
	                	 |ИЗ
	                	 |	Документ.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	                	 |ГДЕ
	                	 |	ПТЛ_ПланДоставки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаПлан);
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Если Выборка.Следующий() Тогда
		Если Выборка.ДатаОтгрузки <> Объект.ДатаОтгрузки 
			или Выборка.СтатусДокумента <> Объект.СтатусДокумента 
			или Выборка.Дата <> Объект.Дата
			или Выборка.Проведен <> Объект.Проведен
			или Выборка.ПометкаУдаления <> Объект.ПометкаУдаления
			или Выборка.Отделение  <> Объект.Отделение
			Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	
	//Просверим совпадает ли количество строк
	Запрос.Текст =  	 "ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(*) КАК Колво
	                      |ИЗ
	                      |	Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
	                      |ГДЕ
	                      |	ПТЛ_ПланДоставкиМаршруты.Ссылка = &Ссылка";
						  
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаПлан);
	Выборка = Запрос.Выполнить().Выбрать(); 
	Если Выборка.Следующий() Тогда
		Если Выборка.КолВо <> Объект.Маршруты.Количество()  Тогда
			возврат Истина;
		КонецЕслИ;	
	КонецЕсли;	
	
	Запрос.Текст =  	 "ВЫБРАТЬ
	                	 |	КОЛИЧЕСТВО(*) КАК Колво
	                	 |ИЗ
	                	 |	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	                	 |ГДЕ
	                	 |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаПлан);
	Выборка = Запрос.Выполнить().Выбрать(); 
	Если Выборка.Следующий() Тогда
		Если Выборка.КолВо <> Объект.ЗаданияНаПеревозку.Количество()  Тогда
			возврат Истина;
		КонецЕслИ;	
	КонецЕсли;	
	
	//более детальные проверки	
	ТаблПроверки = Объект.Маршруты.Выгрузить(,"Номерстроки,Рейс,Водитель,ТранспортноеСредство,ПриоритетОтгрузки,ТЭК");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблПроверки.Номерстроки,
	               |	ТаблПроверки.Рейс,
	               |	ТаблПроверки.Водитель,
	               |	ТаблПроверки.ТранспортноеСредство,
	               |	ТаблПроверки.ПриоритетОтгрузки,
	               |	ТаблПроверки.ТЭК
	               |ПОМЕСТИТЬ ТаблПроверки
	               |ИЗ
	               |	&ТаблПроверки КАК ТаблПроверки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПТЛ_ПланДоставкиМаршруты.Ссылка
	               |ИЗ
	               |	ТаблПроверки КАК ТаблПроверки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ПланДоставки.Маршруты КАК ПТЛ_ПланДоставкиМаршруты
	               |		ПО ТаблПроверки.Номерстроки = ПТЛ_ПланДоставкиМаршруты.НомерСтроки
	               |			И (ПТЛ_ПланДоставкиМаршруты.Ссылка = &Ссылка)
	               |ГДЕ
	               |	(ТаблПроверки.Рейс <> ПТЛ_ПланДоставкиМаршруты.Рейс
	               |			ИЛИ ТаблПроверки.Водитель <> ПТЛ_ПланДоставкиМаршруты.Водитель
	               |			ИЛИ ТаблПроверки.ТранспортноеСредство <> ПТЛ_ПланДоставкиМаршруты.ТранспортноеСредство
	               |			ИЛИ ТаблПроверки.ПриоритетОтгрузки <> ПТЛ_ПланДоставкиМаршруты.ПриоритетОтгрузки
	               |			ИЛИ ТаблПроверки.ТЭК <> ПТЛ_ПланДоставкиМаршруты.ТЭК)";
				   
	Запрос.УстановитьПараметр("ТаблПроверки",ТаблПроверки);
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаПлан);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	Если Выборка.Следующий() Тогда
			возврат Истина;
	КонецЕсли;	
	
	ТаблПроверки = Неопределено;
	ТаблПроверки = Объект.ЗаданияНаПеревозку.Выгрузить(,"Номерстроки,ЗаданиеНаПеревозку,Исключено");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблПроверки.НомерСтроки,
	               |	ТаблПроверки.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	               |	ТаблПроверки.Исключено
	               |ПОМЕСТИТЬ ТаблПроверки
	               |ИЗ
	               |	&ТаблПроверки КАК ТаблПроверки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПланДоставкиЗаданияНаПеревозку.Ссылка
	               |ИЗ
	               |	ТаблПроверки КАК ТаблПроверки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПланДоставкиЗаданияНаПеревозку
	               |		ПО ТаблПроверки.НомерСтроки = ПланДоставкиЗаданияНаПеревозку.НомерСтроки
	               |			И (ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка)
	               |ГДЕ
	               |	(ТаблПроверки.ЗаданиеНаПеревозку <> ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку
	               |			ИЛИ ТаблПроверки.Исключено <> ПланДоставкиЗаданияНаПеревозку.Исключено)";
				   
	Запрос.УстановитьПараметр("ТаблПроверки",ТаблПроверки);
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаПлан);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	Если Выборка.Следующий() Тогда
			возврат Истина;
	КонецЕсли;	
	
	возврат Ложь;
	
КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	
	GUIDТендернойПлощадки = "";

	
КонецПроцедуры

//начало изменений Ожиганов А. б/н добавление ограничений доставка до ж/д станции 25.10.2016 
Процедура ПРГ_определитьИспользоватьОграниченияПоЖд() Экспорт
	Если Дата = '00010101' Тогда
		ПРГ_ИспользоватьОграниченияПоЖд	=Ложь;
		возврат;
	КонецЕсли;	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПРГ_Служебный.Ссылка,
	                      |	ПРГ_Служебный.ПРГ_Дата
	                      |ИЗ
	                      |	Справочник.ПРГ_Служебный КАК ПРГ_Служебный
	                      |ГДЕ
	                      |	ПРГ_Служебный.Ссылка = ЗНАЧЕНИЕ(Справочник.ПРГ_Служебный.ИспользоватьОграниченияПоЖд)");
						  
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.ПРГ_Дата) = Тип("Дата") Тогда
			ПРГ_ИспользоватьОграниченияПоЖд = Дата >= Выборка.ПРГ_Дата и Выборка.ПРГ_Дата > '20150101';
		Иначе
			ПРГ_ИспользоватьОграниченияПоЖд = Ложь;
		КонецЕсли;	
	КонецЕслИ;	
	
КонецПроцедуры	

Процедура ПРГ_ПроверитьУсловияПоставки(Отказ)
	ПРГ_определитьИспользоватьОграниченияПоЖд();
	
	Если Не ПРГ_ИспользоватьОграниченияПоЖд Тогда
		возврат;
	КонецЕсли;	
	
	ДолжноБыть = "";
	мУсловиеПоставки = Новый Массив;
	Если ПРГ_ДоставкаДоЖДСтанции  Тогда
		мУсловиеПоставки.Добавить(Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоЖДСтанции);
		
	Иначе	
		для Каждого ТекЗнч Из Перечисления.ПТЛ_УсловияПоставки Цикл 
			Если Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоЖДСтанции <> ТекЗнч Тогда
				мУсловиеПоставки.Добавить(ТекЗнч);
			КонецЕсли;	
		КонецЦикла;	
		мУсловиеПоставки.Добавить(Перечисления.ПТЛ_УсловияПоставки.ПустаяСсылка()); // на всякий пожарный
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку,
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.УсловиеПоставки
	                      |ИЗ
	                      |	Документ.ПТЛ_ПланДоставки.ЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
	                      |ГДЕ
	                      |	ПТЛ_ПланДоставкиЗаданияНаПеревозку.Ссылка = &Ссылка
	                      |	И НЕ ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку.УсловиеПоставки В (&мУсловиеПоставки)");	
						  
    Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("мУсловиеПоставки",мУсловиеПоставки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьОбОшибке("В документе "+Выборка.ЗаданиеНаПеревозку+" условие поставки "+Выборка.ЗаданиеНаПеревозкуУсловиеПоставки+"! Не соотвествует флагу доставка до ж/д станции  в плане доставке.",Отказ);
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПРГ_ОпределитьИспользоватьОбменСТендернойПлощадкой()  Экспорт
	  ПРГ_ИспользоватьОбменСТендернойПлощадкой = Ложь;
	 
	 Запрос = Новый Запрос("ВЫБРАТЬ
	 	                      |	ПРГ_СлужебныйТаблицаПараметров.Параметр КАК Отделение,
	 	                      |	ПРГ_СлужебныйТаблицаПараметров.ЗначениеПараметра КАК Дата
	 	                      |ИЗ
	 	                      |	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	 	                      |ГДЕ
	 	                      |	ПРГ_СлужебныйТаблицаПараметров.Ссылка = ЗНАЧЕНИЕ(Справочник.ПРГ_Служебный.ДатыОбменаСТендернойПлощадкойПоОтделениям)
	 	                      |	И ПРГ_СлужебныйТаблицаПараметров.Параметр = &Отделение");
							  
	Запрос.УстановитьПараметр("Отделение",Отделение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Дата) = Тип("Дата") Тогда
			Если Выборка.Дата >= '20150101' Тогда
				//начало изменений Ожиганов А. 22.12.2016 б/н поправим для запуска питера 09.01.2017
			 	//ПРГ_ИспользоватьОбменСТендернойПлощадкой = Дата >= Выборка.Дата;
				ПРГ_ИспользоватьОбменСТендернойПлощадкой = ДатаОтгрузки >= Выборка.Дата;
				//конец изменений 
			Иначе 
				ПРГ_ИспользоватьОбменСТендернойПлощадкой  = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Процедура УстановитьСнятьФлагНеОтправлятьРейсНаТендер() Экспорт 

	//Установить/снять флаг "не отправлять на тендер" допустимо только в момент подготовки плана доставки
	Если НЕ СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Новый
		И НЕ СтатусДокумента = Перечисления.ПТЛ_СтатусыПланаДоставки.Подготовлен Тогда
		Возврат;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Маршруты.Рейс,
		|	Маршруты.КлючСтроки
		|ПОМЕСТИТЬ втМаршруты
		|ИЗ
		|	&Маршруты КАК Маршруты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданияНаПеревозку.ЗаданиеНаПеревозку,
		|	ЗаданияНаПеревозку.КлючСтроки
		|ПОМЕСТИТЬ втЗаданияНаПеревозку
		|ИЗ
		|	&ЗаданияНаПеревозку КАК ЗаданияНаПеревозку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.КлючСтроки,
		|	ВложенныйЗапрос.Рейс,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.ЗаданиеНаПеревозкуГородДоставки > 1
		|				ИЛИ ВложенныйЗапрос.ЗаданиеНаПеревозкуАдресПоставки > 1
		|				ИЛИ ВложенныйЗапрос.ЗаданиеНаПеревозкуГородДоставкиСуществуетЭксклюзивныйТарифНаПеревозку = ЛОЖЬ
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НеОтправлятьНаТендер,
		|	ВложенныйЗапрос.ЗаданиеНаПеревозкуГородДоставки КАК КоличествоГородовДоставки,
		|	ВложенныйЗапрос.ЗаданиеНаПеревозкуАдресПоставки КАК КоличествоАдресовПоставки,
		|	ВложенныйЗапрос.ЗаданиеНаПеревозкуГородДоставкиСуществуетЭксклюзивныйТарифНаПеревозку КАК СуществуетЭксклюзивныйТарифНаПеревозку
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПТЛ_ПланДоставкиМаршруты.Рейс КАК Рейс,
		|		ЛОЖЬ КАК НеОтправлятьНаТендер,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПТЛ_ЗаданиеНаПеревозку.ГородДоставки) КАК ЗаданиеНаПеревозкуГородДоставки,
		|		МАКСИМУМ(ПТЛ_ЗаданиеНаПеревозку.ГородДоставки.СуществуетЭксклюзивныйТарифНаПеревозку) КАК ЗаданиеНаПеревозкуГородДоставкиСуществуетЭксклюзивныйТарифНаПеревозку,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПТЛ_ЗаданиеНаПеревозку.АдресПоставки) КАК ЗаданиеНаПеревозкуАдресПоставки,
		|		ПТЛ_ПланДоставкиМаршруты.КлючСтроки КАК КлючСтроки
		|	ИЗ
		|		втМаршруты КАК ПТЛ_ПланДоставкиМаршруты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗаданияНаПеревозку КАК ПТЛ_ПланДоставкиЗаданияНаПеревозку
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЗаданиеНаПеревозку КАК ПТЛ_ЗаданиеНаПеревозку
		|				ПО ПТЛ_ПланДоставкиЗаданияНаПеревозку.ЗаданиеНаПеревозку = ПТЛ_ЗаданиеНаПеревозку.Ссылка
		|			ПО ПТЛ_ПланДоставкиМаршруты.КлючСтроки = ПТЛ_ПланДоставкиЗаданияНаПеревозку.КлючСтроки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПТЛ_ПланДоставкиМаршруты.Рейс,
		|		ПТЛ_ПланДоставкиМаршруты.КлючСтроки) КАК ВложенныйЗапрос";

    Запрос.УстановитьПараметр("Маршруты", Маршруты.Выгрузить());
	Запрос.УстановитьПараметр("ЗаданияНаПеревозку", ЗаданияНаПеревозку.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("КлючСтроки", ВыборкаДетальныеЗаписи.КлючСтроки);
		НайденныеСтроки = Маршруты.НайтиСтроки(ПараметрыОтбора);	
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			НайденныеСтроки[0].НеОтправлятьНаТендер = ВыборкаДетальныеЗаписи.НеОтправлятьНаТендер;	
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры
 

//начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
Процедура ОпределитьПроверкуГородаИРегиона() Экспорт 
	ПРГ_ПроверятьРегионИГород = Ложь;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫРАЗИТЬ(ПРГ_СлужебныйТаблицаПараметров.Параметр КАК ДАТА) КАК МинВремя
	                      |ИЗ
	                      |	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПРГ_Служебный КАК ПРГ_Служебный
	                      |		ПО ПРГ_СлужебныйТаблицаПараметров.Ссылка = ПРГ_Служебный.Ссылка
	                      |			И (ПРГ_СлужебныйТаблицаПараметров.НомерСтроки = 1)
	                      |			И (ПРГ_Служебный.Наименование = ""Использовать_с_Логинетом_ГЕО"")");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.МинВремя) = Тип("Дата") Тогда
			Если ДатаОтгрузки >= Выборка.МинВремя Тогда
				 ПРГ_ПроверятьРегионИГород = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	
 //конец изменений 
 
 //Blik 040117 57270 н
Функция ПолучитьДанныеПоСтатусуИКруговомуРейсу(Рейс)
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации КАК Видоперации
	|ИЗ
	|	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	|ГДЕ
	|	ПТЛ_ПланДоставки.ПланДоставки = &ПланДоставки
	|	И ПТЛ_ПланДоставки.Рейс = &Рейс";   
	
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("ПланДоставки", Ссылка);
	Запрос.УстановитьПараметр("Рейс", Рейс.Рейс);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Возврат 1;// не круговой рейс
	ИначеЕсли Выборка.Количество() > 1 Тогда
		Поставщик = 0;
		Остальное = 0;
		Пока Выборка.Следующий() Цикл
			Если Выборка.Видоперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика Тогда
				Поставщик = 1;
			Иначе
				Остальное = 1;
			КонецЕсли;
		КонецЦикла;
		Возвращаем  = Поставщик+Остальное;//тут 2 если встречаются виды опер поставщику и покуп или перемещение
		Возврат Возвращаем;
	КонецЕсли;
КонецФункции
//Blik 040117 57270 к
ИспользоватьОграниченияПоЖд = ложь;
ПРГ_ИспользоватьОбменСТендернойПлощадкой  = Ложь;

//конец изменений 
//конец изменений 
//начало изменений Ожиганов А. 15.12.2016 60359 использование полей гео и стреет при передачи в логинет
ПРГ_ПроверятьРегионИГород= Ложь;
ПРГ_ПроверятьИсключенныеЗадания = Ложь;
//конец изменений 
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");