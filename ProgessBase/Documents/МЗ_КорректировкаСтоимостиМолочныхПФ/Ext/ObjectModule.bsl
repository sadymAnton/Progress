//m_ionov@mail.ru 22.12.2016
//Документ разработан согласовано техническому проекту
//------- m_ionov@mail.ru -------

Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
			
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
    		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаКорректировки;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
		    		
	Если НЕ НачалоМесяца(ПериодРегистрации) = НачалоМесяца(Дата) Тогда
		ОбщегоНазначения.Сообщение("Период регистрации не совпадает с датой документа. Движения по регистрам и проводки будут сформированы в соответствии с периодом регистрации.");
	КонецЕсли;
		
	ТекстПроверкиВозможностиПроведения = ПроверкаВозможностиПроведения();
	Если НЕ ТекстПроверкиВозможностиПроведения = Неопределено ТОгда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстПроверкиВозможностиПроведения, Отказ, "Проведение документа " + СокрЛП(Ссылка));
	КонецЕсли;
		
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаКорректировки);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаКорректировки, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаКорректировки, Отказ, Заголовок)
	ВалютаРубли = Константы.ВалютаРегламентированногоУчета.Получить();
	
	//Партии БУ
	НаборДвиженийПартийБУ = Движения.ПартииТоваровНаСкладахБухгалтерскийУчет;
	ТаблицаДвиженийПартийБУ	= НаборДвиженийПартийБУ.ВыгрузитьКолонки();
	ТаблицаДвиженийПартийБУ.Очистить();
	
	//Партии НУ
	НаборДвиженийПартийНУ = Движения.ПартииТоваровНаСкладахНалоговыйУчет;
	ТаблицаДвиженийПартийНУ	= НаборДвиженийПартийНУ.ВыгрузитьКолонки();
	ТаблицаДвиженийПартийНУ.Очистить();
	
	Для каждого Строка Из ТаблицаКорректировки Цикл
		
		Если Строка.ОшибкаЗаполнения Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.СуммаКорректировки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Движения сливки
		//Партии БУ
		Движение = ТаблицаДвиженийПартийБУ.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);
		
		Движение.Номенклатура = Строка.НоменклатураСливки; 
		Движение.СчетУчета = Строка.СчетУчетаБУСливки; 
		Движение.Качество = Строка.КачествоСливки; 
		
		Движение.Стоимость = Строка.СуммаКорректировки; 
				
		Движение.Регистратор = ЭтотОбъект.Ссылка;
		Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.Оприходование;
		
		//Партии НУ
		СчетНУСливки = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", Строка.СчетУчетаБУСливки));
		
		Если ЗначениеЗаполнено(СчетНУСливки) Тогда
			Движение = ТаблицаДвиженийПартийНУ.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);
			
			Движение.Номенклатура = Строка.НоменклатураСливки; 
			Движение.СчетУчета = СчетНУСливки; 
			Движение.Качество = Строка.КачествоСливки; 
			
			Движение.Стоимость = Строка.СуммаКорректировки; 
			
			Движение.Регистратор = ЭтотОбъект.Ссылка;
			Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.Оприходование;
		КонецЕсли;
		
		//Движения молоко
		Движение = ТаблицаДвиженийПартийБУ.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);
		
		Движение.Номенклатура = Строка.НоменклатураМолоко; 
		Движение.СчетУчета = Строка.СчетУчетаБУМолоко; 
		Движение.Качество = Строка.КачествоМолоко; 
		
		Движение.Стоимость = (-1)*Строка.СуммаКорректировки; 
				
		Движение.Регистратор = ЭтотОбъект.Ссылка;
		Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.Оприходование;
		
		//Партии НУ
		СчетНУМолоко = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", Строка.СчетУчетаБУМолоко));
		Если ЗначениеЗаполнено(СчетНУМолоко) Тогда
			Движение = ТаблицаДвиженийПартийНУ.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);
			
			Движение.Номенклатура = Строка.НоменклатураМолоко; 
			Движение.СчетУчета = СчетНУМолоко; 
			Движение.Качество = Строка.КачествоМолоко; 
			
			Движение.Стоимость = (-1)*Строка.СуммаКорректировки; 
			
			Движение.Регистратор = ЭтотОбъект.Ссылка;
			Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.Оприходование;
		КонецЕсли;
		
		//Проводки БУ
		Движение = Движения.Хозрасчетный.Добавить();
		Движение.Период		 = КонецМесяца(ПериодРегистрации);
		Движение.Сумма		 = Строка.СуммаКорректировки;
		Движение.Организация = Организация;
		
		Движение.СчетДт = Строка.СчетУчетаБУСливки;
		Движение.СчетКт = Строка.СчетУчетаБУМолоко;
		
		Движение.Регистратор = ЭтотОбъект.Ссылка;
		
		Движение.Содержание = "Корректировка стоимости п/ф";
		
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, Строка.НоменклатураСливки); 
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, Строка.НоменклатураМолоко); 
		
		//Проводки НУ
		Если ЗначениеЗаполнено(СчетНУСливки) И ЗначениеЗаполнено(СчетНУМолоко) Тогда
			Движение = Движения.Налоговый.Добавить();
			Движение.Период		 = КонецМесяца(ПериодРегистрации);
			Движение.Сумма		 = Строка.СуммаКорректировки;
			Движение.Организация = Организация;
			
			Движение.СчетДт = СчетНУСливки;
			Движение.СчетКт = СчетНУМолоко;
			
			Движение.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
			Движение.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
			
			Движение.Регистратор = ЭтотОбъект.Ссылка;
			
			Движение.Содержание = "Корректировка стоимости п/ф";
			
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, Строка.НоменклатураСливки); 
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, Строка.НоменклатураМолоко); 
		КонецЕсли;
		
	КонецЦикла;
	
	//Партии БУ
	НаборДвиженийПартийБУ.мТаблицаДвижений  = ТаблицаДвиженийПартийБУ;
	НаборДвиженийПартийБУ.мПериод			= КонецМесяца(ПериодРегистрации);
	
	Движения.ПартииТоваровНаСкладахБухгалтерскийУчет.ВыполнитьПриход();
	НаборДвиженийПартийБУ.Записать();
	
	//Партии НУ
	НаборДвиженийПартийНУ.мТаблицаДвижений  = ТаблицаДвиженийПартийНУ;
	НаборДвиженийПартийНУ.мПериод			= КонецМесяца(ПериодРегистрации);
	
	Движения.ПартииТоваровНаСкладахНалоговыйУчет.ВыполнитьПриход();
	НаборДвиженийПартийНУ.Записать();
	
	Движения.Хозрасчетный.Записать();
	Движения.Налоговый.Записать();
	
КонецПроцедуры

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
    		
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ПериодРегистрации");
		
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаКорректировки) Экспорт
	
	// Таблицу корректировки преобразуем при формировании движений
	ТаблицаКорректировки = Корректировки.Выгрузить();
			
КонецПроцедуры // СформироватьТаблицыДокумента()

Функция ПроверкаВозможностиПроведения() Экспорт
	
	ТекстПроверкиВозможностиПроведения = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МЗ_КорректировкаСтоимостиМолочныхПФ.Ссылка
	               |ИЗ
	               |	Документ.МЗ_КорректировкаСтоимостиМолочныхПФ КАК МЗ_КорректировкаСтоимостиМолочныхПФ
	               |ГДЕ
	               |	МЗ_КорректировкаСтоимостиМолочныхПФ.Проведен = ИСТИНА
	               |	И МЗ_КорректировкаСтоимостиМолочныхПФ.ПериодРегистрации = &ПериодРегистрации
	               |	И МЗ_КорректировкаСтоимостиМолочныхПФ.Организация = &Организация
	               |	И НЕ МЗ_КорректировкаСтоимостиМолочныхПФ.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		ТекстПроверкиВозможностиПроведения = "В рамках одного месяца " + СокрЛП(РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации)) + " нельзя проводить несколько документов. Перезаполните уже проведенный документ или отмените его проведение";	
	КонецЕсли;
	
	Возврат ТекстПроверкиВозможностиПроведения;

КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	Корректировки.Очистить();
	Расшифровка.Очистить();
КонецПроцедуры

Процедура ЗаполнитьКорректировкиСтоимостиМолочныхПФ() Экспорт
	
	Запрос = Новый Запрос;
	
	//1. Заполним списки разных видов продукции
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних.Номенклатура,
	               |	МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних.ДополнительныйКоэффициент
	               |ИЗ
	               |	РегистрСведений.МЗ_ДанныеДляРасчетаСебестоимости.СрезПоследних(&ДатаСреза, ТипНоменклатуры = &ТипНоменклатуры) КАК МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних";
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ПериодРегистрации));
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.МЗ_ТипНоменклатуры.Сливки);
	
	//Сливки
	ТабСливки = Запрос.Выполнить().Выгрузить();
	Если ТабСливки.Количество() = 0 Тогда
		ОбщегоНазначения.Сообщение("Нет данных в настройках Системы о номенклатуре с типом Сливки. Обратитесь к администратору Системы");
		Возврат;
	КонецЕсли;
			
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.МЗ_ТипНоменклатуры.НормализованнаяСмесь);
		                                                                                 
	ТабКоэфициентов = Запрос.Выполнить().Выгрузить();
	Если ТабКоэфициентов.Количество() = 0 Тогда
		ОбщегоНазначения.Сообщение("Нет данных в настройках Системы о номенклатуре с типом Нормализованное молоко. Обратитесь к администратору Системы");
		Возврат;
	КонецЕсли;
	
	//Нормализованное молоко
	СпМолоко = ТабКоэфициентов.ВыгрузитьКолонку("Номенклатура");
	
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.МЗ_ТипНоменклатуры.СыроеМолоко);
		                                                                                 
	ТабКоэфициентов = Запрос.Выполнить().Выгрузить();
	Если ТабКоэфициентов.Количество() = 0 Тогда
		ОбщегоНазначения.Сообщение("Нет данных в настройках Системы о номенклатуре с типом Цельное молоко. Обратитесь к администратору Системы");
		Возврат;
	КонецЕсли;
	
	//Цельное молоко
	СпЦельноеМолоко = ТабКоэфициентов.ВыгрузитьКолонку("Номенклатура");

	//2. Получим отчеты производства в которых отражен выпуск сливок и нормализованного молока
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтчетПроизводстваЗаСменуПродукция.Ссылка
	               |ИЗ
	               |	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МЗ_ДанныеДляРасчетаСебестоимости.СрезПоследних(&ДатаСреза, ) КАК МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних
	               |		ПО ОтчетПроизводстваЗаСменуПродукция.Номенклатура = МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних.Номенклатура
	               |			И (МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних.ТипНоменклатуры = &ТипСливки
	               |				ИЛИ МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних.ТипНоменклатуры = &ТипМолоко)
	               |ГДЕ
	               |	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Проведен = ИСТИНА
	               |	И ОтчетПроизводстваЗаСменуПродукция.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
	               |	И ОтчетПроизводстваЗаСменуПродукция.Ссылка.ОтражатьВБухгалтерскомУчете = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтчетПроизводстваЗаСменуПродукция.Ссылка"; 
	
			 
    Запрос.УстановитьПараметр("ТипСливки", Перечисления.МЗ_ТипНоменклатуры.Сливки);
	Запрос.УстановитьПараметр("ТипМолоко", Перечисления.МЗ_ТипНоменклатуры.НормализованнаяСмесь);
	Запрос.УстановитьПараметр("ДатаС", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаПо", КонецМесяца(ПериодРегистрации));
	
	ТабДокументов = Запрос.Выполнить().Выгрузить();
	Сч = 0;
	
	//3. Получим списанную себестоимость затрат (цельного молока)
	СпДокументов = ТабДокументов.ВыгрузитьКолонку("Ссылка");
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартииТоваровНаСкладахБухгалтерскийУчет.Номенклатура КАК Номенклатура,
	               |	СУММА(ПартииТоваровНаСкладахБухгалтерскийУчет.Стоимость) КАК Стоимость,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчет.КорСубконто2 КАК НоменклатурнаяГруппа,
	               |	ВЫБОР
	               |		КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену
	               |			ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор
	               |		ИНАЧЕ ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументДвижения
	               |	КОНЕЦ КАК ОтчетПроизводства
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладахБухгалтерскийУчет
	               |ГДЕ
	               |	ПартииТоваровНаСкладахБухгалтерскийУчет.ВидДвижения = &ВидДвижения
	               |	И ПартииТоваровНаСкладахБухгалтерскийУчет.Период МЕЖДУ &ДатаС И &ДатаПо
	               |	И ПартииТоваровНаСкладахБухгалтерскийУчет.Номенклатура В(&Номенклатура)
	               |	И (ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор В (&Регистратор)
	               |			ИЛИ ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументДвижения В (&Регистратор))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПартииТоваровНаСкладахБухгалтерскийУчет.Номенклатура,
	               |	ПартииТоваровНаСкладахБухгалтерскийУчет.КорСубконто2,
	               |	ВЫБОР
	               |		КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену
	               |			ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор
	               |		ИНАЧЕ ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументДвижения
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура";
				   
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);			   
	Запрос.УстановитьПараметр("Номенклатура", СпЦельноеМолоко);
	Запрос.УстановитьПараметр("Регистратор", СпДокументов);
	
	ТабЗатрат = Запрос.Выполнить().Выгрузить();
				   
	//4. заполняем расшифорвку корректировки
	Для каждого ВыборкаДокументов Из ТабДокументов Цикл
	    			    		
		АнализируемыйДокумент = ВыборкаДокументов.Ссылка;
		СтрокаКорректировки   = Неопределено;
		Сч = Сч + 1;
		
		#Если Клиент Тогда
		Состояние("Обрабатывается документ " + СокрЛП(АнализируемыйДокумент) + " " + СокрЛП(Сч) + "/" + СокрЛП(ТабДокументов.Количество()));
		#КонецЕсли
	
	    //Так как не ведется партионный учет по сериям, то мы должны обработать выпуск продукции без учета серий
		ТабПродукция = АнализируемыйДокумент.Продукция.Выгрузить();
		ТабПродукция.Свернуть("Номенклатура,НоменклатурнаяГруппа,Счет,Качество,Спецификация","");
		
		Для каждого СтрокаПродукция Из ТабПродукция Цикл
			СтрокаСливки = ТабСливки.Найти(СтрокаПродукция.Номенклатура);
			Если СтрокаСливки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			//Тогда можно уже добавлять строку расшифровки
			СтрокаКорректировки = Расшифровка.Добавить();
			СтрокаКорректировки.ОтчетПроизводства = АнализируемыйДокумент;
			СтрокаКорректировки.НоменклатураСливки = СтрокаПродукция.Номенклатура;
			СтрокаКорректировки.НоменклатурнаяГруппаСливки = СтрокаПродукция.НоменклатурнаяГруппа;
			СтрокаКорректировки.СчетУчетаБУСливки = СтрокаПродукция.Счет;
			СтрокаКорректировки.КачествоСливки = СтрокаПродукция.Качество;
			
			СтрокаКорректировки.КоэффициентНаСливки = СтрокаСливки.ДополнительныйКоэффициент; 
			
			//Получим что еще выпускаем вместе со сливками
			СтрокиПродукции = ТабПродукция.НайтиСтроки(Новый Структура("Спецификация", СтрокаПродукция.Спецификация));
			Если СтрокиПродукции.Количество() < 2 Тогда
				//нет второй продукции для корректировки распределения
				ПроверитьСтрокуПродукции(СтрокаКорректировки);
				Продолжить;
			КонецЕсли;
			
			ОсновнаяПродукция = Неопределено;
			Для каждого ПоискОсновнойПродукции Из СтрокиПродукции Цикл
				Если Не ПоискОсновнойПродукции.Номенклатура = СтрокаПродукция.Номенклатура
					И Не СпМолоко.Найти(ПоискОсновнойПродукции.Номенклатура) = Неопределено Тогда
					ОсновнаяПродукция = ПоискОсновнойПродукции;
					Прервать;
				КонецЕсли;			
			КонецЦикла;
			Если ОсновнаяПродукция = Неопределено Тогда
				//Такое может быть если в отчете производства будет две строчки со сливками, но с разной серией номенклатуры
				ПроверитьСтрокуПродукции(СтрокаКорректировки);
				Продолжить;
			КонецЕсли; 
			
			СтрокаКорректировки.НоменклатураМолоко = ОсновнаяПродукция.Номенклатура;
			СтрокаКорректировки.НоменклатурнаяГруппаМолоко = ОсновнаяПродукция.НоменклатурнаяГруппа;
			СтрокаКорректировки.СчетУчетаБУМолоко = ОсновнаяПродукция.Счет;
			СтрокаКорректировки.КачествоМолоко = ОсновнаяПродукция.Качество;
			
			ПроверитьСтрокуПродукции(СтрокаКорректировки);
			
			//Теперь заполним суммы
			СтрокиЗатрат = ТабЗатрат.НайтиСтроки(Новый Структура("ОтчетПроизводства", СтрокаКорректировки.ОтчетПроизводства));
			Затрата = Неопределено;
			СтрокаЗаполненияЗатрат = СтрокаКорректировки;
			
			Для каждого СтрокаЗатрат Из СтрокиЗатрат Цикл
				Если СтрокаЗатрат.Стоимость = 0 Тогда
					//Значит уже обрабатывали эту строку
					Продолжить;
				КонецЕсли;
				
				Если Не Затрата = Неопределено
					И НЕ Затрата = СтрокаЗатрат.Номенклатура Тогда 
					//Значит на производство сливок пошло несколько номенклатур цельного молока
					//С учетом того что таблица затрат отсортирована по затратам - то тут можем добавлять новую строку расшифровки
					
					Если СтрокаЗаполненияЗатрат.КоэффициентНаСливки > 0 Тогда
						СтрокаЗаполненияЗатрат.СуммаКорректировки = СтрокаЗаполненияЗатрат.СуммаНаСливки*СтрокаЗаполненияЗатрат.КоэффициентНаСливки - СтрокаЗаполненияЗатрат.СуммаНаСливки;
					Иначе
						СтрокаЗаполненияЗатрат.СуммаКорректировки = 0;
					КонецЕсли;

					СтрокаЗаполненияЗатрат = Расшифровка.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаЗаполненияЗатрат, СтрокаКорректировки); 
				КонецЕсли;
				
				Затрата = СтрокаЗатрат.Номенклатура;
				СтрокаЗаполненияЗатрат.Затрата = СтрокаЗатрат.Номенклатура;
				Если СтрокаЗатрат.НоменклатурнаяГруппа = СтрокаЗаполненияЗатрат.НоменклатурнаяГруппаСливки Тогда
					СтрокаЗаполненияЗатрат.СуммаНаСливки = СтрокаЗатрат.Стоимость;
					СтрокаЗатрат.Стоимость = 0;
				ИначеЕсли СтрокаЗатрат.НоменклатурнаяГруппа = СтрокаЗаполненияЗатрат.НоменклатурнаяГруппаМолоко Тогда
					СтрокаЗаполненияЗатрат.СуммаНаМолоко = СтрокаЗатрат.Стоимость;
					СтрокаЗатрат.Стоимость = 0;
				КонецЕсли;								
			КонецЦикла; 
			
			Если СтрокаЗаполненияЗатрат.КоэффициентНаСливки > 0 Тогда
				СтрокаЗаполненияЗатрат.СуммаКорректировки = СтрокаЗаполненияЗатрат.СуммаНаСливки*СтрокаЗаполненияЗатрат.КоэффициентНаСливки - СтрокаЗаполненияЗатрат.СуммаНаСливки;
			Иначе
				СтрокаЗаполненияЗатрат.СуммаКорректировки = 0;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	//5. Заполняем корректировку (сварачиваем строки для формирования движений регистров)
	Корректировки.Загрузить(Расшифровка.Выгрузить());
	Корректировки.Свернуть("НоменклатураСливки,НоменклатурнаяГруппаСливки,СчетУчетаБУСливки,КачествоСливки,НоменклатураМолоко,НоменклатурнаяГруппаМолоко,СчетУчетаБУМолоко,КачествоМолоко","СуммаКорректировки");
КонецПроцедуры

//Проставляет в строке "ОшибкаЗаполнения"
//Ложь - проверки пройдены
//Истина - ошибка заполнения, по данной строке движений регистров не будет
Функция ПроверитьСтрокуПродукции(СтрокаПродукции) Экспорт
	Если СтрокаПродукции = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтрокаПродукции.СчетУчетаБУСливки = СтрокаПродукции.СчетУчетаБУМолоко
		ИЛИ Не СтрокаПродукции.СчетУчетаБУСливки = ПланыСчетов.Хозрасчетный.Полуфабрикаты Тогда
		
		СтрокаПродукции.ОшибкаЗаполнения = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаПродукции.НоменклатураСливки)
		ИЛИ Не ЗначениеЗаполнено(СтрокаПродукции.НоменклатураМолоко)
		ИЛИ Не ЗначениеЗаполнено(СтрокаПродукции.НоменклатурнаяГруппаСливки)
		ИЛИ Не ЗначениеЗаполнено(СтрокаПродукции.НоменклатурнаяГруппаМолоко) Тогда
		
		СтрокаПродукции.ОшибкаЗаполнения = Истина;
	КонецЕсли;
	
	Если СтрокаПродукции.КоэффициентНаСливки = 0 Тогда
		СтрокаПродукции.ОшибкаЗаполнения = Истина;
	КонецЕсли;

	Возврат СтрокаПродукции.ОшибкаЗаполнения;
	
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры




