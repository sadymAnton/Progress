////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Список значений перечисления "ВидыУчетаВремени" и названий ячеек.
Перем СписокСоответствийВидаУчетаВремениИНазванийЯчеек;

// Значение  "ПоДням" перечисления ВидыУчетаВремени
Перем ВидУчетаВремениПоДням;

// Производственный календарь для заполнения реквизитов регистров
Перем ПроизводственныйКалендарь;

// список информационных сообщений, для вывода
Перем СписокСообщений;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура предназначена для автозаполнения документа
// Если заполнен параметр сотрудники, то в табличную часть будут добавлены 
// строки по указаным сотрудникам.
Процедура Автозаполнение(Запрос = Неопределено, Сотрудник = Неопределено, ТекущаяСтрокаГрафикаРаботы = Неопределено) Экспорт
		
	Если Запрос = Неопределено Тогда
		
		ЗапросАвтоЗаполнения = Новый Запрос;
		
		Если Сотрудник = Неопределено Тогда
			ЗапросАвтоЗаполнения.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаботникиОрганизаций.Сотрудник КАК Ссылка,
			|	РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоМесяца, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций
			|ГДЕ
			|	ВЫБОР
			|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
			|			ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
			|		КОНЕЦ = &ОбособленноеПодразделение
			|	И ВЫБОР
			|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
			|			ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
			|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|	И (ВЫБОР
			|				КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|						И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|					ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
			|				ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
			|			КОНЕЦ = &Подразделение
			|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 21.06.2011 15:43 
			|	И ВЫБОР
			|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.AVT_ПроизводственныйКалендарь
			|			ИНАЧЕ РаботникиОрганизаций.ГрафикРаботы.AVT_ПроизводственныйКалендарь
			|		КОНЕЦ = &Календарь
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник,
			|	РаботникиОрганизаций.Сотрудник.Физлицо
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|ГДЕ
			|	РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
			|	И РаботникиОрганизаций.Период > &НачалоМесяца
			|	И РаботникиОрганизаций.Период <= &КонецМесяца
			|	И РаботникиОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
			|	И (РаботникиОрганизаций.ПодразделениеОрганизации = &Подразделение
			|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 21.06.2011 15:48 
			|	И РаботникиОрганизаций.ГрафикРаботы.AVT_ПроизводственныйКалендарь = &Календарь
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка"; 
			
			ЗапросАвтоЗаполнения.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ОбособленноеПодразделение", Организация);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Ложь);
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 21.06.2011 15:47 
			ЗапросАвтоЗаполнения.УстановитьПараметр("Календарь", AVT_Календарь);
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
		Иначе 
			ЗапросАвтоЗаполнения.Текст = 
			"ВЫБРАТЬ 
			|	СотрудникиОрганизаций.Ссылка КАК Ссылка,
			|	СотрудникиОрганизаций.Физлицо
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
			ЗапросАвтоЗаполнения.УстановитьПараметр("Сотрудник", Сотрудник);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Истина);
		КонецЕсли;
		
	Иначе
		
		ЗапросАвтоЗаполнения = Запрос;
		ЗапросАвтоЗаполненияТекст = СтрЗаменить(ЗапросАвтоЗаполнения.Текст,"РаботникиОрганизации.Сотрудник КАК Сотрудник","РаботникиОрганизации.Сотрудник КАК Ссылка");
		ПозицияИндексирования = Найти(ЗапросАвтоЗаполненияТекст,"ИНДЕКСИРОВАТЬ");
		ЗапросАвтоЗаполнения.Текст = Лев(ЗапросАвтоЗаполненияТекст,ПозицияИндексирования - 1) + "
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
		ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Ложь);
		
	КонецЕсли;
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	ЗапросАвтоЗаполнения.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПериодРегистрации));
	ЗапросАвтоЗаполнения.УстановитьПараметр("КонецМесяца", КонецМесяца(ПериодРегистрации));
	ЗапросАвтоЗаполнения.УстановитьПараметр("Месяц", ПериодРегистрации);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоДням", ВидУчетаВремениПоДням);
	ЗапросАвтоЗаполнения.УстановитьПараметр("ДокументСсылка", Ссылка);
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 21.06.2011 15:20 
	ЗапросАвтоЗаполнения.УстановитьПараметр("Календарь", AVT_Календарь);
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}   
	ЗапросАвтоЗаполнения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросАвтоЗаполнения.Выполнить();
	
	ЗапросАвтоЗаполнения.Текст = "ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Ссылка,
	|	СотрудникиОрганизаций.Физлицо,
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
	|ПОМЕСТИТЬ ВТСписокРаботниковДата
	|ИЗ
	|	ВТСписокРаботников КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ПО (ИСТИНА)
	|ГДЕ
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 21.06.2011 15:19 
	|	РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = &Календарь И
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоМесяца И &КонецМесяца
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &НачалоМесяца
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	РаботникиОрганизацийСрезПоследних.Период КАК Период,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТГрафикиСотрудников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоМесяца,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТСписокРаботников.ССылка
	|				ИЗ
	|					ВТСписокРаботников)) КАК РаботникиОрганизацийСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА NULL
	|		ИНАЧЕ РаботникиОрганизаций.ГрафикРаботы
	|	КОНЕЦ,
	|	РаботникиОрганизаций.Период,
	|	СписокРаботников.Ссылка
	|ИЗ
	|	ВТСписокРаботниковДата КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СписокРаботников.Ссылка = РаботникиОрганизаций.Сотрудник
	|			И (РаботникиОрганизаций.Период > &НачалоМесяца)
	|			И (РаботникиОрганизаций.Период <= &КонецМесяца)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА NULL
	|		ИНАЧЕ РаботникиОрганизаций.ГрафикРаботыЗавершения
	|	КОНЕЦ,
	|	РаботникиОрганизаций.ПериодЗавершения,
	|	СписокРаботников.Ссылка
	|ИЗ
	|	ВТСписокРаботниковДата КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СписокРаботников.Ссылка = РаботникиОрганизаций.Сотрудник
	|			И (РаботникиОрганизаций.ПериодЗавершения > &НачалоМесяца)
	|			И (РаботникиОрганизаций.ПериодЗавершения <= &КонецМесяца)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокРаботников.Ссылка КАК Ссылка,
	|	СписокРаботников.ДатаКалендаря КАК ДатаКалендаря,
	|	ГрафикиСотрудников.ГрафикРаботы
	|ПОМЕСТИТЬ ВТОбщиеГрафикиРаботников
	|ИЗ
	|	ВТСписокРаботниковДата КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокРаботников.Ссылка КАК Ссылка,
	|			СписокРаботников.ДатаКалендаря КАК ДатаКалендаря,
	|			МАКСИМУМ(ГрафикиСотрудников.Период) КАК ДатаГрафика
	|		ИЗ
	|			ВТСписокРаботниковДата КАК СписокРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК ГрафикиСотрудников
	|				ПО (ГрафикиСотрудников.Сотрудник = СписокРаботников.Ссылка)
	|		ГДЕ
	|			ГрафикиСотрудников.Период <= СписокРаботников.ДатаКалендаря
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СписокРаботников.Ссылка,
	|			СписокРаботников.ДатаКалендаря) КАК ДатыГрафика
	|		ПО (ДатыГрафика.Ссылка = СписокРаботников.Ссылка)
	|			И (ДатыГрафика.ДатаКалендаря = СписокРаботников.ДатаКалендаря)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК ГрафикиСотрудников
	|		ПО (ГрафикиСотрудников.Сотрудник = СписокРаботников.Ссылка)
	|			И (ГрафикиСотрудников.Период = ДатыГрафика.ДатаГрафика)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ДатаКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Ссылка.Наименование КАК Наименование,
	|	СотрудникиОрганизаций.Физлицо,
	|	ЕСТЬNULL(ПосчитанноеВремя.День, 0) КАК День,
	|	ВЫБОР
	|		КОГДА ПосчитанноеВремя.РегистраторВведенныхВЦеломГрафиков ЕСТЬ NULL 
	|				И ПосчитанноеВремя.РегистраторВведенныхПоДнямГрафиков ЕСТЬ NULL 
	|			ТОГДА ПосчитанноеВремя.ВидУчетаВремени
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА ПосчитанноеВремя.РегистраторВведенныхВЦеломГрафиков ЕСТЬ NULL 
	|				И ПосчитанноеВремя.РегистраторВведенныхПоДнямГрафиков ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(ПосчитанноеВремя.ОсновноеЗначение, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОсновноеЗначение
	|ИЗ
	|	ВТСписокРаботников КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВведенныеГрафикиВЦелом.Регистратор КАК РегистраторВведенныхВЦеломГрафиков,
	|			ВведенныеГрафикиПоДням.Документ КАК РегистраторВведенныхПоДнямГрафиков,
	|			РаботникиОрганизацийСрезПоследних.Ссылка КАК Сотрудник,
	|			ДЕНЬ(РаботникиОрганизацийСрезПоследних.ДатаКалендаря) КАК День,
	|			ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|			ГрафикиРаботыПоВидамВремени.ОсновноеЗначение КАК ОсновноеЗначение
	|		ИЗ
	|			ВТОбщиеГрафикиРаботников КАК РаботникиОрганизацийСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|					ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|					ГрафикиРаботыПоВидамВремени.Дата КАК ДатаГрафикаРаботы,
	|					СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ОсновноеЗначение
	|				ИЗ
	|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ГДЕ
	|					ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|					И ГрафикиРаботыПоВидамВремени.Месяц = &Месяц
	|					И ГрафикиРаботыПоВидамВремени.План
	|					И ГрафикиРаботыПоВидамВремени.ОсновноеЗначение <> 0
	|					И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени <> &ВидУчетаВремениПоДням
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|					ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
	|					ГрафикиРаботыПоВидамВремени.Дата) КАК ГрафикиРаботыПоВидамВремени
	|				ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = РаботникиОрганизацийСрезПоследних.ГрафикРаботы)
	|					И РаботникиОрганизацийСрезПоследних.ДатаКалендаря = ГрафикиРаботыПоВидамВремени.ДатаГрафикаРаботы
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ВведенныеГрафикиПоДням
	|				ПО (ВведенныеГрафикиПоДням.ГрафикРаботы = РаботникиОрганизацийСрезПоследних.Ссылка)
	|					И (ВведенныеГрафикиПоДням.Месяц = &Месяц)
	|					И (ВведенныеГрафикиПоДням.План)
	|					И (ВведенныеГрафикиПоДням.Документ <> &ДокументСсылка)
	|					И (ВведенныеГрафикиПоДням.Дата = РаботникиОрганизацийСрезПоследних.ДатаКалендаря)
	|					И (ВведенныеГрафикиПоДням.ВидУчетаВремени = &ВидУчетаВремениПоДням)
	|					И (ВведенныеГрафикиПоДням.ОсновноеЗначение <> 0)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК ВведенныеГрафикиВЦелом
	|				ПО (ВведенныеГрафикиВЦелом.Сотрудник = РаботникиОрганизацийСрезПоследних.Ссылка)
	|					И (ВведенныеГрафикиВЦелом.Регистратор <> &ДокументСсылка)
	|					И (ВведенныеГрафикиВЦелом.Месяц = НАЧАЛОПЕРИОДА(РаботникиОрганизацийСрезПоследних.ДатаКалендаря, МЕСЯЦ))) КАК ПосчитанноеВремя
	|		ПО (ПосчитанноеВремя.Сотрудник = СотрудникиОрганизаций.Ссылка)
	|ГДЕ
	|	(&ВключатьВРезультатПустыеЗаписи
	|			ИЛИ ПосчитанноеВремя.РегистраторВведенныхВЦеломГрафиков ЕСТЬ NULL 
	|				И ПосчитанноеВремя.РегистраторВведенныхПоДнямГрафиков ЕСТЬ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	Сотрудник,
	|	ВидУчетаВремени,
	|	День";
	
	РезультатЗапроса = ЗапросАвтоЗаполнения.Выполнить();
		
	МассивДней = Новый Массив(32);
	
	Если Сотрудник = Неопределено Тогда
		ГрафикРаботы.Очистить();
	КонецЕсли;
	// Заполняем строку документа, даже если в запросе ничего не получили, но 
	// необходимо заполнить по одному сотруднику.
	Если РезультатЗапроса.Пустой() И ЗначениеЗаполнено(Сотрудник) И ТекущаяСтрокаГрафикаРаботы <> Неопределено Тогда
		ТекущаяСтрокаГрафикаРаботы.Сотрудник = Сотрудник;
		ТекущаяСтрокаГрафикаРаботы.ВсегоДней = 0;
		ТекущаяСтрокаГрафикаРаботы.ВсегоЧасов = 0;
		ТекущаяСтрокаГрафикаРаботы.ВсегоЧасовВечерних = 0;
		ТекущаяСтрокаГрафикаРаботы.ВсегоЧасовНочных = 0;
		Для НомерДня = 1 По 31 Цикл
			ТекущаяСтрокаГрафикаРаботы["Часов" + Строка(НомерДня)] = 0;
			ТекущаяСтрокаГрафикаРаботы["ЧасовВечерних" + Строка(НомерДня)] = 0;
			ТекущаяСтрокаГрафикаРаботы["ЧасовНочных" + Строка(НомерДня)] = 0;
		КонецЦикла;
	Иначе 	
		ВыборкаРезультата = РезультатЗапроса.Выбрать();
		ИндивидуальныеГрафикиПоСотруднику =  Новый Соответствие;
		Пока ВыборкаРезультата.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			Если ТекущаяСтрокаГрафикаРаботы = Неопределено Тогда
				СтрокаТаблицыГрафикРаботы = ГрафикРаботы.Добавить();
			Иначе
				СтрокаТаблицыГрафикРаботы = ТекущаяСтрокаГрафикаРаботы;
				Для НомерДня = 1 По 31 Цикл
					СтрокаТаблицыГрафикРаботы["Часов" + Строка(НомерДня)] = 0;
					СтрокаТаблицыГрафикРаботы["ЧасовВечерних" + Строка(НомерДня)] = 0;
					СтрокаТаблицыГрафикРаботы["ЧасовНочных" + Строка(НомерДня)] = 0;
				КонецЦикла;
				СтрокаТаблицыГрафикРаботы.ВсегоДней = 0;
				СтрокаТаблицыГрафикРаботы.ВсегоЧасов = 0;
				СтрокаТаблицыГрафикРаботы.ВсегоЧасовВечерних = 0;
				СтрокаТаблицыГрафикРаботы.ВсегоЧасовНочных = 0;
			КонецЕсли;
			СтрокаТаблицыГрафикРаботы.Сотрудник = ВыборкаРезультата.Сотрудник;
			Для К = 1 По 31 Цикл
				МассивДней[К] = Ложь;
			КонецЦикла;
			Пока ВыборкаРезультата.Следующий() Цикл
			          				
				Если ВыборкаРезультата.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам Тогда
					ИндексКолонки = "Часов"+Строка(ВыборкаРезультата.День);
					СтрокаТаблицыГрафикРаботы.ВсегоЧасов = СтрокаТаблицыГрафикРаботы.ВсегоЧасов + ВыборкаРезультата.ОсновноеЗначение;
					МассивДней[ВыборкаРезультата.День] = Истина;
				ИначеЕсли ВыборкаРезультата.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам Тогда
					ИндексКолонки = "ЧасовВечерних"+Строка(ВыборкаРезультата.День);
					СтрокаТаблицыГрафикРаботы.ВсегоЧасовВечерних = СтрокаТаблицыГрафикРаботы.ВсегоЧасовВечерних + ВыборкаРезультата.ОсновноеЗначение;
					МассивДней[ВыборкаРезультата.День] = Истина;
				ИначеЕсли ВыборкаРезультата.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам Тогда
					ИндексКолонки = "ЧасовНочных"+Строка(ВыборкаРезультата.День);
					СтрокаТаблицыГрафикРаботы.ВсегоЧасовНочных = СтрокаТаблицыГрафикРаботы.ВсегоЧасовНочных + ВыборкаРезультата.ОсновноеЗначение;
					МассивДней[ВыборкаРезультата.День] = Истина;
				Иначе
					Продолжить;
				КонецЕсли;
				СтрокаТаблицыГрафикРаботы[ИндексКолонки] = ВыборкаРезультата.ОсновноеЗначение;
			КонецЦикла;
			 			
			КоличествоДней = 0;
			Для К = 1 По 31 Цикл
				Если МассивДней[К] Тогда
					КоличествоДней = КоличествоДней + 1;
				КонецЕсли;
			КонецЦикла;
			СтрокаТаблицыГрафикРаботы.ВсегоДней = КоличествоДней;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // Автозаполнение()

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Проведен Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после его проведения!");
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеПечатнойФормы = ВводИндивидуальныхГрафиковРаботыОрганизацииПереопределяемый.ПолучитьОписаниеПечатнойФормы(ИмяМакета);
	
	Если СпособВводаДанных <> Перечисления.СпособыВводаДанныхОВремени.ПоДням  Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		ОбработкаКомментариев.ДобавитьСообщение("Предупреждение", Перечисления.ВидыСообщений.Раздел);
		ОбработкаКомментариев.ДобавитьСообщение(ОписаниеПечатнойФормы + " формируется на основе данных введенных подневно, и не использует данные, введенные сводно за месяц.", Перечисления.ВидыСообщений.ВажнаяИнформация);
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
	СписокСотрудников = ГрафикРаботы.ВыгрузитьКолонку("Сотрудник");
		
	Если ИмяМакета = "Т13" Тогда
		ТабДокумент = ФормированиеПечатныхФормЗК.СформироватьПечатнуюФормуТ13(ЭтотОбъект, СписокСотрудников)
	Иначе 
		ТабДокумент = ВводИндивидуальныхГрафиковРаботыОрганизацииПереопределяемый.СформироватьПечатнуюФорму(ИмяМакета, ЭтотОбъект, СписокСотрудников);
	КонецЕсли;
	
	Если ТабДокумент = Неопределено Тогда
		Возврат Неопределено;
	Иначе 	
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + "(" + НРег(ОписаниеПечатнойФормы) + ")"),, ТабДокумент);
	КонецЕсли;
	
КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("Т13", "Форма Т-13");
	
	ВводИндивидуальныхГрафиковРаботыОрганизацииПереопределяемый.ДополнитьСтруктуруПечатныхФорм(СтруктураМакетов);
	
	Возврат СтруктураМакетов
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Удаляет записи из регистра сведений ГрафикиРаботыПоВидамВремени.
Процедура УдалитьЗаписиГрафика()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Дата,
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.Документ = &Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц, ГрафикРаботы, Дата";
	
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.СледующийПоЗначениюПоля("Месяц") Цикл
		НаборЗаписей.Отбор.Месяц.Установить(ВыборкаЗапроса.Месяц);
		Пока ВыборкаЗапроса.СледующийПоЗначениюПоля("ГрафикРаботы") Цикл
			НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаЗапроса.ГрафикРаботы);
			НаборЗаписей.Отбор.План.Установить(Истина);
			
			НаборЗаписей.Прочитать();
			СписокИндексовПоДате = Новый СписокЗначений;
			СписокИндексовПоДате.ЗагрузитьЗначения(НаборЗаписей.ВыгрузитьКолонку("Дата"));
			Пока ВыборкаЗапроса.Следующий() Цикл
				ЭлементСпискаИндексовПоДате = СписокИндексовПоДате.НайтиПоЗначению(ВыборкаЗапроса.Дата);
				Если ЭлементСпискаИндексовПоДате <> Неопределено Тогда
					НаборЗаписей.Удалить(СписокИндексовПоДате.Индекс(ЭлементСпискаИндексовПоДате));
					СписокИндексовПоДате.Удалить(ЭлементСпискаИндексовПоДате);
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЗаписиГрафика()

// Функция возвращает 1, если проверяемая дата участвует в расчете нормы времени - Ресурс
Функция ОтмеченВРесурсеПроизводственногоКалендаря(ПроверяемаяДата, Ресурс, ТаблицаДанныхКалендаря)
	
	НайденнаяСтрока = ТаблицаДанныхКалендаря.Найти(ПроверяемаяДата, "ДатаКалендаря");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	Возврат НайденнаяСтрока[Ресурс];
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводИндивидуальныхГрафиковРаботыОрганизации.Дата,
	|	ВводИндивидуальныхГрафиковРаботыОрганизации.ПериодРегистрации,
	|	ВводИндивидуальныхГрафиковРаботыОрганизации.Ссылка,
	|	ВЫБОР
	|		КОГДА ВводИндивидуальныхГрафиковРаботыОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВводИндивидуальныхГрафиковРаботыОрганизации.Организация
	|		ИНАЧЕ ВводИндивидуальныхГрафиковРаботыОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВводИндивидуальныхГрафиковРаботыОрганизации.Организация КАК ОбособленноеПодразделение
	|ИЗ
	|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации КАК ВводИндивидуальныхГрафиковРаботыОрганизации
	|ГДЕ
	|	ВводИндивидуальныхГрафиковРаботыОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "ГрафикРаботы" документа
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоГрафикРаботы(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.НомерСтроки КАК НомерСтроки,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов1,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов2,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов3,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов4,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов5,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов6,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов7,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов8,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов9,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов10,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов11,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов12,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов13,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов14,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов15,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов16,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов17,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов18,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов19,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов20,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов21,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов22,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов23,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов24,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов25,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов26,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов27,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов28,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов29,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов30,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов31,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних1,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних2,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних3,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних4,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних5,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних6,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних7,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних8,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних9,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних10,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних11,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних12,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних13,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних14,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних15,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних16,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних17,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних18,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних19,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних20,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних21,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних22,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних23,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних24,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних25,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних26,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних27,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних28,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних29,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних30,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних31,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных1,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных2,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных3,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных4,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных5,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных6,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных7,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных8,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных9,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных10,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных11,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных12,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных13,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных14,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных15,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных16,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных17,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных18,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных19,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных20,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных21,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных22,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных23,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных24,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных25,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных26,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных27,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных28,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных29,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных30,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных31,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ВсегоДней,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ВсегоЧасов,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ВсегоЧасовВечерних,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ВсегоЧасовНочных,
	|	Дубли.КоличествоДублей КАК КоличествоДублейСотрудников
	|ИЗ
	|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник КАК Сотрудник,
	|			КОЛИЧЕСТВО(ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник) КАК КоличествоДублей
	|		ИЗ
	|			Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы
	|		ГДЕ
	|			ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник) КАК Дубли
	|		ПО (Дубли.Сотрудник = ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник)
	|ГДЕ
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоГрафикРаботы()

// Формирует запрос по таблице "ГрафикРаботы" документа
//	Необходим для заполнения дополнительных реквизитов регистра сведений 
//	ГрафикиРаботыПоВидамВремени
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросГрафикиСотрудников(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НачалоДатыСтрокой = Формат(Год(ПериодРегистрации), "ЧГ=4") + ", " + Месяц(ПериодРегистрации) + " , ";
	
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
		
	// Запрос дат периода
	ДатыМесяцаТекст = 
	"ВЫБРАТЬ
	|	1 КАК НомерДня,
	|	ДАТАВРЕМЯ(" + НачалоДатыСтрокой + "1) КАК ДатаМесяца
	|	";
	Для НомерДня = 2 По День(КонецМесяца(ПериодРегистрации)) Цикл
		ДатыМесяцаТекст = ДатыМесяцаТекст + 
		"ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	" + НомерДня +",
		|	ДАТАВРЕМЯ(" + НачалоДатыСтрокой + НомерДня + ")
		|	";
	КонецЦикла;
			
	СотрудникиТекст =
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.НомерСтроки,
	|	ДатыМесяца.НомерДня,
	|	ДатыМесяца.ДатаМесяца
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДатыМесяцаТекст + ") КАК ДатыМесяца
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Сотрудники.Ссылка = &ДокументСсылка";
	Запрос.Текст = СотрудникиТекст;
	Запрос.Выполнить();
	СотрудникиТекст = "ВТСотрудники";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.НомерДня КАК НомерДня,
	|	Сотрудники.ДатаМесяца КАК ДатаМесяца,
	|	ГрафикиРаботы.ОсновноеЗначениеНорма КАК НормаДней,
	|	ГрафикиРаботы.ДополнительноеЗначениеНорма КАК НормаЧасов,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВЫБОР
	|					КОГДА РаботникиОрганизаций.ПериодЗавершения <= Сотрудники.ДатаМесяца
	|							И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|					ИНАЧЕ РаботникиОрганизаций.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|				КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ, ЛОЖЬ) КАК ЭтоГрафикНеполногоРабочегоВремени,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= Сотрудники.ДатаМесяца
	|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВЫБОР
	|						КОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
	|								И РаботникиОрганизаций.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|							ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|						ИНАЧЕ РаботникиОрганизаций.ГрафикРаботыЗавершения.ДлительностьРабочейНедели
	|					КОНЕЦ
	|			КОГДА РаботникиОрганизаций.ГрафикРаботы.СокращенноеРабочееВремя
	|					И РаботникиОрганизаций.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				ТОГДА РаботникиОрганизаций.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|			ИНАЧЕ РаботникиОрганизаций.ГрафикРаботы.ДлительностьРабочейНедели
	|		КОНЕЦ, 8) КАК ДлительностьРабочейНедели
	|ИЗ
	|	(ВЫБРАТЬ
	|		Сотрудники.Сотрудник КАК Сотрудник,
	|		Сотрудники.НомерСтроки КАК НомерСтроки,
	|		Сотрудники.НомерДня КАК НомерДня,
	|		Сотрудники.ДатаМесяца КАК ДатаМесяца,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|	ИЗ
	|		ВТСотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО Сотрудники.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И Сотрудники.ДатаМесяца >= РаботникиОрганизаций.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Сотрудники.Сотрудник,
	|		Сотрудники.НомерСтроки,
	|		Сотрудники.НомерДня,
	|		Сотрудники.ДатаМесяца) КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО Сотрудники.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И Сотрудники.Период = РаботникиОрганизаций.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|		ПО (ГрафикиРаботы.ГрафикРаботы = РаботникиОрганизаций.ГрафикРаботы)
	|			И (ГрафикиРаботы.Месяц = НАЧАЛОПЕРИОДА(Сотрудники.ДатаМесяца, МЕСЯЦ))
	|			И (ГрафикиРаботы.План)
	|			И (ГрафикиРаботы.Дата = Сотрудники.ДатаМесяца)
	|			И (ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	НомерДня";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросГрафикиСотрудников()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)
	
	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		СписокСообщений.Добавить(Перечисления.ВидыСообщений.Ошибка, "Не задан период индивидуального графика!");
		Отказ = Истина;
	КонецЕсли;
	
	 //  Организация
	 Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		СписокСообщений.Добавить(Перечисления.ВидыСообщений.Ошибка, ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация, по которой вводится индивидуальный график!"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ГрафикРаботы" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиГрафикРаботы(ВыборкаПоСтрокамДокумента, Отказ)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""График работы"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		СписокСообщений.Добавить(Перечисления.ВидыСообщений.Ошибка, СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!");
		Отказ = Истина;
	КонецЕсли;
	
	// Несколько одинаковых сотрудников
	Если ВыборкаПоСтрокамДокумента.КоличествоДублейСотрудников > 1 Тогда
		СписокСообщений.Добавить(Перечисления.ВидыСообщений.Ошибка, СтрокаНачалаСообщенияОбОшибке + "обнаружен сотрудник, который введен второй раз!");
		Отказ = Истина;
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		СписокСообщений.Добавить(Перечисления.ВидыСообщений.Ошибка, СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"));
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиГрафикРаботы()

// Проверяет уникальность записей сотрудников, чтобы на одного сотрудника в одном 
// периоде был только один документ Ввода индивидуальных графиков.
//
Процедура ПроверитьУникальностьЗаписей(Отказ)
	
	ЗапросПроверкаУникальности = Новый Запрос;
	ЗапросПроверкаУникальности.УстановитьПараметр("ДокументСсылка", Ссылка);
	ЗапросПроверкаУникальности.УстановитьПараметр("Месяц", ПериодРегистрации);
	ЗапросПроверкаУникальности.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПериодРегистрации));
	ЗапросПроверкаУникальности.УстановитьПараметр("КонецМесяца", КонецМесяца(ПериодРегистрации));
	
	ЗапросПроверкаУникальности.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник,
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник.Наименование,
	|	ВЫБОР
	|		КОГДА (НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL )
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(ГрафикиРаботыПоВидамВремени.Документ КАК Документ.ВводИндивидуальныхГрафиковРаботыОрганизации))
	|		КОГДА (НЕ СводныеИндивидуальныеГрафики.НомерСтроки ЕСТЬ NULL )
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(СводныеИндивидуальныеГрафики.Регистратор)
	|	КОНЕЦ КАК ДокументПредставление
	|ИЗ
	|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СводныеИндивидуальныеГрафики.Сотрудник = ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник
	|			И (СводныеИндивидуальныеГрафики.Месяц = &Месяц)
	|			И (СводныеИндивидуальныеГрафики.Регистратор <> &ДокументСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (СводныеИндивидуальныеГрафики.НомерСтроки ЕСТЬ NULL )
	|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
	|			И (ГрафикиРаботыПоВидамВремени.Документ <> ЗНАЧЕНИЕ(Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ПустаяСсылка))
	|			И (ГрафикиРаботыПоВидамВремени.Документ <> НЕОПРЕДЕЛЕНО)
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
	|			И ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник
	|ГДЕ
	|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Ссылка = &ДокументСсылка
	|	И ((НЕ СводныеИндивидуальныеГрафики.НомерСтроки ЕСТЬ NULL )
	|			ИЛИ (НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ))";
	
	РезультатЗапроса = ЗапросПроверкаУникальности.Выполнить().Выбрать();		
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		СтрокаСотрудников = "";
		
		Пока РезультатЗапроса.Следующий() Цикл
			СтрокаСотрудников = СтрокаСотрудников + Символы.ПС + РезультатЗапроса.СотрудникНаименование + " (" + РезультатЗапроса.ДокументПредставление + ")";
		КонецЦикла;
		
		СписокСообщений.Добавить(Перечисления.ВидыСообщений.Ошибка, "На следующих сотрудников уже введены документы учета времени в этом периоде:" + СтрокаСотрудников);
		Отказ = Истина;
 	КонецЕсли;

КонецПроцедуры // ПроверитьУникальностьЗаписей()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определенной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуСводныеИндивидуальныеГрафики(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборСводныеИндивидуальныеГрафики)
	
	Движение = НаборСводныеИндивидуальныеГрафики.Добавить();
	 
	// Измерения
	Движение.Сотрудник = ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
	 
	// Ресурсы
	Движение.Дней = ВыборкаПоСтрокамДокумента.ВсегоДней;
	Движение.Часов = ВыборкаПоСтрокамДокумента.ВсегоЧасов;
	Движение.ЧасовВечерних = ВыборкаПоСтрокамДокумента.ВсегоЧасовВечерних;
	Движение.ЧасовНочных = ВыборкаПоСтрокамДокумента.ВсегоЧасовНочных;
	
КонецПроцедуры // ДобавитьСтрокуСводныеИндивидуальныеГрафики()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определенной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремени(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, ВыборкаГрафикиСотрудников, ТаблицаНабора)
	
	// Выборки ВыборкаПоСтрокамДокумента и ВыборкаГрафикиСотрудников упорядочены одинаково -
	// по номеру строки документа
	
	СтруктураПоискаСотрудник = Новый Структура("НомерСтроки",ВыборкаПоСтрокамДокумента.НомерСтроки);
	
	Пока ВыборкаГрафикиСотрудников.НайтиСледующий(СтруктураПоискаСотрудник) Цикл
		
		НомерДня = ВыборкаГрафикиСотрудников.НомерДня;
		УсловнаяПродолжительностьДня = ВыборкаГрафикиСотрудников.ДлительностьРабочейНедели / 5;
		НормаДней = ВыборкаГрафикиСотрудников.НормаДней;
		НормаЧасов = ВыборкаГрафикиСотрудников.НормаЧасов;
		ЭтоГрафикНеполногоРабочегоВремени = ВыборкаГрафикиСотрудников.ЭтоГрафикНеполногоРабочегоВремени;
		
		ОбрабатываемаяДата = ВыборкаГрафикиСотрудников.ДатаМесяца;
		
		Для Каждого ЭлементСпискаСоответствий Из СписокСоответствийВидаУчетаВремениИНазванийЯчеек Цикл
			
			ЗначениеЯчейки = ВыборкаПоСтрокамДокумента[ЭлементСпискаСоответствий.Представление+Строка(НомерДня)];
			
			// Запись движений по часам.
			Движение = ТаблицаНабора.Добавить();
			Движение.ГрафикРаботы = ВыборкаПоСтрокамДокумента.Сотрудник;
			
			Движение.ВидУчетаВремени = ЭлементСпискаСоответствий.Значение;
			Движение.Дата = ОбрабатываемаяДата;
			Движение.План = Истина;
			Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
			
			// Ресурсы
			Движение.ОсновноеЗначение = ЗначениеЯчейки;
			Движение.ДополнительноеЗначение = ?(ЗначениеЯчейки = 0, 0, 1);
			
			Если ЭтоГрафикНеполногоРабочегоВремени Тогда
				Движение.ОсновноеЗначениеНорма = НормаЧасов;
				Движение.ДополнительноеЗначениеНорма = НормаДней;
			Иначе
				Движение.ОсновноеЗначениеНорма = Движение.ОсновноеЗначение;
				Движение.ДополнительноеЗначениеНорма = Движение.ДополнительноеЗначение;
			КонецЕсли;
			
			Движение.ПроизводственныйКалендарьПятидневка = ОтмеченВРесурсеПроизводственногоКалендаря(ОбрабатываемаяДата, "Пятидневка", ПроизводственныйКалендарь);
			Движение.ПроизводственныйКалендарьПятидневкаЧасы = УсловнаяПродолжительностьДня * Движение.ПроизводственныйКалендарьПятидневка;
			Движение.ПроизводственныйКалендарьШестидневка = ОтмеченВРесурсеПроизводственногоКалендаря(ОбрабатываемаяДата, "Шестидневка",  ПроизводственныйКалендарь);
			Движение.ПроизводственныйКалендарьКалендарныеДни = ОтмеченВРесурсеПроизводственногоКалендаря(ОбрабатываемаяДата, "КалендарныеДни", ПроизводственныйКалендарь);
			
			// Реквизиты
			Движение.Документ = Ссылка;
			
		КонецЦикла;	
		
		Движение = ТаблицаНабора.Добавить();
		Движение.ГрафикРаботы = ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.ВидУчетаВремени = ВидУчетаВремениПоДням;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Истина;
		Движение.Месяц = ВыборкаПоШапкеДокумента.ПериодРегистрации;
		
		// Ресурсы
		КоличествоЧасов = ВыборкаПоСтрокамДокумента["Часов"+Строка(НомерДня)];
		Движение.ОсновноеЗначение = ?(КоличествоЧасов = 0, 0,1);
		Движение.ДополнительноеЗначение = КоличествоЧасов;
		
		Если ЭтоГрафикНеполногоРабочегоВремени Тогда
			Движение.ОсновноеЗначениеНорма = НормаЧасов;
			Движение.ДополнительноеЗначениеНорма = НормаДней;
		Иначе
			Движение.ОсновноеЗначениеНорма = Движение.ОсновноеЗначение;
			Движение.ДополнительноеЗначениеНорма = Движение.ДополнительноеЗначение;
		КонецЕсли;
				
		Движение.ПроизводственныйКалендарьПятидневка = ОтмеченВРесурсеПроизводственногоКалендаря(ОбрабатываемаяДата, "Пятидневка", ПроизводственныйКалендарь);
		Движение.ПроизводственныйКалендарьПятидневкаЧасы = УсловнаяПродолжительностьДня * Движение.ПроизводственныйКалендарьПятидневка;
		Движение.ПроизводственныйКалендарьШестидневка = ОтмеченВРесурсеПроизводственногоКалендаря(ОбрабатываемаяДата, "Шестидневка",  ПроизводственныйКалендарь);
		Движение.ПроизводственныйКалендарьКалендарныеДни = ОтмеченВРесурсеПроизводственногоКалендаря(ОбрабатываемаяДата, "КалендарныеДни", ПроизводственныйКалендарь);
		
		// Реквизиты
		Движение.Документ = Ссылка;
		
	КонецЦикла;

КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремени()

// Процедура удаляет все записи из регистра за ПериодРегистрации,
// если документ последний в этом периоде, в разрезе сотрудников
Процедура УдалитьЗаписиЗаПериодДокумента()
	Если НЕ ДополнительныеСвойства.ЗаписьПроведенного Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник Как Сотрудник,
	               |	ВводИндивидуальныхГрафиковРаботыОрганизации.ПериодРегистрации
	               |ИЗ
	               |	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации КАК ВводИндивидуальныхГрафиковРаботыОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы
	               |		ПО (ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Ссылка = &Документ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	               |		ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник.ФизЛицо
	               |			И ГрафикиРаботыПоВидамВремени.Месяц = ВводИндивидуальныхГрафиковРаботыОрганизации.ПериодРегистрации
	               |			И (ГрафикиРаботыПоВидамВремени.Документ <>  &ПустойДокумент)
	               |			И (ГрафикиРаботыПоВидамВремени.План)
	               |ГДЕ
	               |	ВводИндивидуальныхГрафиковРаботыОрганизации.Ссылка = &Документ
	               |	И ГрафикиРаботыПоВидамВремени.Документ ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.УстановитьПараметр("ПустойДокумент", Документы.ВводИндивидуальныхГрафиковРаботыОрганизации.ПустаяСсылка());
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	Пока ВыборкаЗапроса.Следующий() Цикл
		НаборЗаписей.Отбор.План.Установить(Истина);
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаЗапроса.Сотрудник);
		НаборЗаписей.Отбор.Месяц.Установить(ВыборкаЗапроса.ПериодРегистрации);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры // УдалитьЗаписиЗаПериодДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Проецура - обработчик события "ПередЗаписью" документа
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(ГрафикРаботы);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	ДополнительныеСвойства.Вставить("ЗаписьПроведенного", Проведен);
	
	// проверим допустимо ли изменение состава сотрудников по которым введен табель
	Если Не ЭтоНовый() 
		И СпособВводаДанных <> Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод 
		И РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		
		СоответствиеСотрудники = Новый Соответствие;
		Для Каждого Строка Из ГрафикРаботы Цикл
			СоответствиеСотрудники.Вставить(Строка.Сотрудник, "");
		КонецЦикла;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НовыеСотрудники.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТНовыеСотрудники
			|ИЗ
			|	&НовыеСотрудники КАК НовыеСотрудники
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисления.Регистратор КАК Документ,
			|	ПРЕДСТАВЛЕНИЕ(ОсновныеНачисления.Регистратор) КАК ДокументПредставление,
			|	ОсновныеНачисления.Сотрудник.Наименование КАК СотрудникНаименование
			|ИЗ
			|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК СтарыеСотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНовыеСотрудники КАК НовыеСотрудники
			|		ПО СтарыеСотрудники.Сотрудник = НовыеСотрудники.Сотрудник
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ПО СтарыеСотрудники.Сотрудник = ОсновныеНачисления.Сотрудник
			|			И (ОсновныеНачисления.ПериодДействия = НАЧАЛОПЕРИОДА(СтарыеСотрудники.Ссылка.ПериодРегистрации, МЕСЯЦ))
			|			И (ОсновныеНачисления.ГрафикРаботы = ОсновныеНачисления.Сотрудник)
			|ГДЕ
			|	СтарыеСотрудники.Ссылка = &Документ
			|	И НовыеСотрудники.Сотрудник ЕСТЬ NULL ");
			
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("Документ", Ссылка);
			
			НовыеСотрудники = Новый ТаблицаЗначений;
			НовыеСотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
			Для Каждого КлючЗначение Из СоответствиеСотрудники Цикл
				Строка = НовыеСотрудники.Добавить();
				Строка.Сотрудник = КлючЗначение.Ключ;
			КонецЦикла;
			Запрос.УстановитьПараметр("НовыеСотрудники", НовыеСотрудники);
			
			Выборка = Запрос.ВыполнитьПакет()[1].Выбрать();
			
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисления.Регистратор КАК Документ,
			|	ПРЕДСТАВЛЕНИЕ(ОсновныеНачисления.Регистратор) КАК ДокументПредставление,
			|	ОсновныеНачисления.Сотрудник.Наименование КАК СотрудникНаименование
			|ИЗ
			|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК СтарыеСотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ПО СтарыеСотрудники.Сотрудник = ОсновныеНачисления.Сотрудник
			|			И (ОсновныеНачисления.ПериодДействия = НАЧАЛОПЕРИОДА(СтарыеСотрудники.Ссылка.ПериодРегистрации, МЕСЯЦ))
			|			И (ОсновныеНачисления.ГрафикРаботы = ОсновныеНачисления.Сотрудник)
			|ГДЕ
			|	СтарыеСотрудники.Ссылка = &Документ");
			
			Запрос.УстановитьПараметр("Документ", Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
		КонецЕсли;
		
		Если Выборка.Количество() > 0 Тогда
			ОбработкаКомментариев.УдалитьСообщения();
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Изменение документа невозможно, так как по следующим сотрудникам уже выполнено начисление зарплаты");
			Пока Выборка.Следующий() Цикл 
				Расшифровки = Новый Массив;
				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", Выборка.ДокументПредставление, Выборка.Документ));
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(
						Выборка.СотрудникНаименование + " документом %%",
						Отказ, , Перечисления.ВидыСообщений.Ошибка, Расшифровки);
			КонецЦикла;
			ОбработкаКомментариев.ПоказатьСообщения();
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения" документа
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	УдалитьЗаписиГрафика();
	УдалитьЗаписиЗаПериодДокумента();

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СписокСообщений = Новый СписокЗначений;
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
		ПроверитьУникальностьЗаписей(Отказ);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			// Графики работы
			// получим реквизиты табличной части
			ВыборкаПоГрафикуРаботы = СформироватьЗапросПоГрафикРаботы(ВыборкаПоШапкеДокумента).Выбрать();
			
			Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
				Пока ВыборкаПоГрафикуРаботы.Следующий() Цикл
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиГрафикРаботы(ВыборкаПоГрафикуРаботы, Отказ);
					Если НЕ Отказ Тогда
						
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуСводныеИндивидуальныеГрафики(ВыборкаПоГрафикуРаботы, ВыборкаПоШапкеДокумента, Движения.СводныеИндивидуальныеГрафики);
						
					КонецЕсли;
				КонецЦикла;
			Иначе
				
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("Месяц", ПериодРегистрации);
				///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
				// Измайлова Полина 22.06.2011 09:54 
				Запрос.УстановитьПараметр("Календарь", AVT_Календарь);
				////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
				// Получим таблицу сведений о производственном календаре за нужные месяцы
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
				|	РегламентированныйПроизводственныйКалендарь.Пятидневка,
				|	РегламентированныйПроизводственныйКалендарь.Шестидневка,
				|	РегламентированныйПроизводственныйКалендарь.КалендарныеДни,
				|	РегламентированныйПроизводственныйКалендарь.ВидДня
				|ИЗ
				|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
				|ГДЕ
				///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
				// Измайлова Полина 22.06.2011 09:53 
				|	РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = &Календарь И
				////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
				|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) = &Месяц";
				
				ПроизводственныйКалендарь = Запрос.Выполнить().Выгрузить();
				ПроизводственныйКалендарь.Индексы.Добавить("ДатаКалендаря");
				
				ВыборкаГрафикиСотрудников = СформироватьЗапросГрафикиСотрудников(ВыборкаПоШапкеДокумента).Выбрать();
				
				НаборГрафикиРаботыПоВидамВремени = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
				
				НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ВыборкаПоШапкеДокумента.ПериодРегистрации);
				НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Истина);
				
				Пока ВыборкаПоГрафикуРаботы.Следующий() Цикл
					
					ПроверитьЗаполнениеСтрокиГрафикРаботы(ВыборкаПоГрафикуРаботы, Отказ);
					Если НЕ Отказ Тогда
						
						НаборГрафикиРаботыПоВидамВремени.Отбор.ГрафикРаботы.Установить(ВыборкаПоГрафикуРаботы.Сотрудник);
						НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Истина);
						НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ВыборкаПоШапкеДокумента.ПериодРегистрации);
						НаборГрафикиРаботыПоВидамВремени.Прочитать();
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуГрафикиРаботыПоВидамВремени(ВыборкаПоГрафикуРаботы, ВыборкаПоШапкеДокумента, ВыборкаГрафикиСотрудников, НаборГрафикиРаботыПоВидамВремени);
						
						НаборГрафикиРаботыПоВидамВремени.Записать();
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СписокСообщений.Количество() > 0 Тогда
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			ОбработкаКомментариев.ДобавитьСообщение(Заголовок, Перечисления.ВидыСообщений.Раздел);
			Для каждого ЭлементСписка Из СписокСообщений Цикл
				ОбработкаКомментариев.ДобавитьСообщение(ЭлементСписка.Представление, ЭлементСписка.Значение);
			КонецЦикла;
			ОбработкаКомментариев.ПоказатьСообщения();
		#Иначе
			Для каждого ЭлементСписка Из СписокСообщений Цикл
				ОбщегоНазначенияЗК.СообщитьОбОшибке(ЭлементСписка.Представление, Отказ, Заголовок);
			КонецЦикла; 
		#КонецЕсли 
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения" документа
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УдалитьЗаписиГрафика();
	УдалитьЗаписиЗаПериодДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

СписокСоответствийВидаУчетаВремениИНазванийЯчеек = Новый СписокЗначений;
СписокСоответствийВидаУчетаВремениИНазванийЯчеек.Добавить(Перечисления.ВидыУчетаВремени.ПоЧасам, "Часов");
СписокСоответствийВидаУчетаВремениИНазванийЯчеек.Добавить(Перечисления.ВидыУчетаВремени.ПоВечернимЧасам, "ЧасовВечерних");
СписокСоответствийВидаУчетаВремениИНазванийЯчеек.Добавить(Перечисления.ВидыУчетаВремени.ПоНочнымЧасам, "ЧасовНочных");

ВидУчетаВремениПоДням  = Перечисления.ВидыУчетаВремени.ПоДням;

