
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПечатьСЗВ_ИСХ" Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		
		Заголовок = "Печать документа: " + СокрЛП(ЭтотОбъект);
		
		Отказ = Ложь;
		
		//Проверка корректности заполнения документа
		ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь);
		
		Если Отказ Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат Неопределено;
		КонецЕсли;	 
		
		ТабДокумент = ПроцедурыПерсонифицированногоУчета.ПечатнаяФормаОДВ_1(Ссылка);
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Опись ОДВ-1 " + ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект, "по документу"), , ТабДокумент);
		
		ТабДокумент = ПечатнаяФормаСЗВ_ИСХ();
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Форма СЗВ-ИСХ " + ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект, "по документу"), , ТабДокумент);
		
	КонецЕсли;
	
КонецФункции

Функция ПечатнаяФормаСЗВ_ИСХ()
	
	Макет = ПолучитьМакет("ФормаСЗВ_ИСХ");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЗВ_ИСХ";
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
	ОбластьСтраница1 = Макет.ПолучитьОбласть("Страница1");
	ОбластьСтрокаРаздела4 = Макет.ПолучитьОбласть("СтрокаРаздела4");
	ОбластьИтогоРаздел4 = Макет.ПолучитьОбласть("ИтогоРаздел4");
	ОбластьРаздел5 = Макет.ПолучитьОбласть("Раздел5");
	ОбластьСтраница2 = Макет.ПолучитьОбласть("Страница2");
	ОбластьСтрокаСтажа = Макет.ПолучитьОбласть("СтрокаСтажа");
	ОбластьДвустрочнаяСтрокаСтажа = Макет.ПолучитьОбласть("ДвустрочнаяСтрокаСтажа");
	ОбластьСтрокаКодПозицииСписка = Макет.ПолучитьОбласть("СтрокаКодПозицииСписка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати().Выбрать();
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати().Выбрать();
	ВыборкаПоДоходам = ЗапросПоЗаработкуДляПечати().Выбрать();
	ВыборкаПоДоходамНаВредныхИТяжелыхРаботах = ЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати().Выбрать();
	ВыборкаПоНачисленнымВзносам = ЗапросПоНачисленнымВзносам().Выбрать();
	ВыборкаПоУплаченнымВзносам = ЗапросПоСведениямОбУплаченныхВзносах().Выбрать();
	
	ЭтоПервыйДокументКоллекции = Истина;
	ПорядокМесяцев = ПорядокМесяцевСЗВ_КОРР();
	
	Пока ВыборкаПоШапкеДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		СписокМесяцев = Новый Массив;
		КодыМесяцев = КодыМесяцевСЗВ();
		ПервыйМесяц = Месяц(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		ПоследнийМесяц  = Месяц(ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ВыборкаПоШапкеДокумента.ОтчетныйПериод));
		Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл 
			СписокМесяцев.Добавить(КодыМесяцев[Сч]);
		КонецЦикла;
		
		ВыборкаПоРаботникам.Сбросить();
		Если ВыборкаПоРаботникам.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка)) Тогда
			
			ВыборкаПоРаботникам.СледующийПоЗначениюПоля("Ссылка");
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				
				Если ЭтоПервыйДокументКоллекции Тогда
					ЭтоПервыйДокументКоллекции = Ложь;
				Иначе
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ОчиститьОбласть(ОбластьСтраница1);
				ОчиститьОбласть(ОбластьСтрокаРаздела4);
				ОчиститьОбласть(ОбластьИтогоРаздел4);
				ОчиститьОбласть(ОбластьРаздел5);
				ОчиститьОбласть(ОбластьСтраница2);
				ОчиститьОбласть(ОбластьСтрокаСтажа);
				ОчиститьОбласть(ОбластьСтрокаКодПозицииСписка);
				ОчиститьОбласть(ОбластьПодвал);
				
				РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
				РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьКолонтитул, "НомРег", 12);
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьСтраница1, "НомРег", 12, 13);
				
				ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ИНН, ОбластьКолонтитул, "ИНН", 12);
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ИНН, ОбластьСтраница1, "ИНН", 12, 13);
				
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьКолонтитул, "КПП", 9);
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьСтраница1, "КПП", 9, 10);
				
				НомерСтраницы = 1;
				НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 3);
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьКолонтитул, "НомСтр", 3);
				
				ОбластьСтраница1.Параметры.КодПериода = ПроцедурыПерсонифицированногоУчета.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
				
				ОбластьСтраница1.Параметры.Год = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
				
				ОбластьСтраница1.Параметры.НаименованиеОрганизации = ВыборкаПоШапкеДокумента.НаименованиеОрганизации;
				ОбластьСтраница1.Параметры.Организация = ВыборкаПоШапкеДокумента.Организация;
				
				ЗаполнитьЗначенияСвойств(ОбластьСтраница1.Параметры, ВыборкаПоРаботникам);
				Если ВыборкаПоРаботникам.ТипДоговора = 1 Тогда
					ОбластьСтраница1.Параметры.ТипДоговора = "трудовой";
				ИначеЕсли ВыборкаПоРаботникам.ТипДоговора = 2 Тогда
					ОбластьСтраница1.Параметры.ТипДоговора = "гражданско-правовой";
				Иначе
					ОбластьСтраница1.Параметры.ТипДоговора = "";
				КонецЕсли;
				ОбластьСтраница1.Параметры.КодДТ = ?(ВыборкаПоРаботникам.ДополнительныйТариф, "АВИА", "");
				
				ДокументРезультат.Вывести(ОбластьШапка);
				ДокументРезультат.Вывести(ОбластьКолонтитул);
				ДокументРезультат.Вывести(ОбластьСтраница1);
				
				// Раздел 4
				СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника, КодМесяца");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);
				
				КодыКатегорий = Новый Массив;
				
				Заработок = 0;
				ОблагаетсяВзносамиДоПредельнойВеличины = 0;
				ПоДоговорамГПХДоПредельнойВеличины = 0;
				ОблагаетсяВзносамиСвышеПредельнойВеличины = 0;
				ПоДоговорамГПХСвышеПредельнойВеличины = 0;
				
				Для Сч = 1 По 12 Цикл 
					ОчиститьОбласть(ОбластьСтрокаРаздела4);
					ОбластьСтрокаРаздела4.Параметры.Месяц = Формат(Дата(2010, Сч, 1), "ДФ=""ММММ""");
					Если Сч >= ПервыйМесяц И Сч <= ПоследнийМесяц Тогда  
						СтруктураПоиска.КодМесяца = КодыМесяцев[Сч];
						ВыводитьПустуюСтроку = Истина;
						Пока ВыборкаПоДоходам.НайтиСледующий(СтруктураПоиска) Цикл
							ВыводитьПустуюСтроку = Ложь;
							ОбластьСтрокаРаздела4.Параметры.КодКатегории = ВыборкаПоДоходам.КодКатегории;
							ОбластьСтрокаРаздела4.Параметры.Заработок = ВыборкаПоДоходам.Заработок;
							ОбластьСтрокаРаздела4.Параметры.ОблагаетсяВзносамиДоПредельнойВеличины = ВыборкаПоДоходам.ОблагаетсяВзносамиДоПредельнойВеличины;
							ОбластьСтрокаРаздела4.Параметры.ПоДоговорамГПХДоПредельнойВеличины = ВыборкаПоДоходам.ПоДоговорамГПХДоПредельнойВеличины;
							ОбластьСтрокаРаздела4.Параметры.ОблагаетсяВзносамиСвышеПредельнойВеличины = ВыборкаПоДоходам.ОблагаетсяВзносамиСвышеПредельнойВеличины;
							ОбластьСтрокаРаздела4.Параметры.ПоДоговорамГПХСвышеПредельнойВеличины = ВыборкаПоДоходам.ПоДоговорамГПХСвышеПредельнойВеличины;
							ДокументРезультат.Вывести(ОбластьСтрокаРаздела4);
							// Расчет итогов
							КодыКатегорий.Добавить(ВыборкаПоДоходам.КодКатегории);
							Заработок = Заработок + ВыборкаПоДоходам.Заработок;
							ОблагаетсяВзносамиДоПредельнойВеличины = ОблагаетсяВзносамиДоПредельнойВеличины + ВыборкаПоДоходам.ОблагаетсяВзносамиДоПредельнойВеличины;
							ПоДоговорамГПХДоПредельнойВеличины = ПоДоговорамГПХДоПредельнойВеличины + ВыборкаПоДоходам.ПоДоговорамГПХДоПредельнойВеличины;
							ОблагаетсяВзносамиСвышеПредельнойВеличины = ОблагаетсяВзносамиСвышеПредельнойВеличины + ВыборкаПоДоходам.ОблагаетсяВзносамиСвышеПредельнойВеличины;
							ПоДоговорамГПХСвышеПредельнойВеличины = ПоДоговорамГПХСвышеПредельнойВеличины + ВыборкаПоДоходам.ПоДоговорамГПХСвышеПредельнойВеличины;
						КонецЦикла;
						Если ВыводитьПустуюСтроку Тогда 
							ДокументРезультат.Вывести(ОбластьСтрокаРаздела4);
						КонецЕсли;
					Иначе 
						ДокументРезультат.Вывести(ОбластьСтрокаРаздела4);
					КонецЕсли;
				КонецЦикла;
				
				ОбластьИтогоРаздел4.Параметры.Заработок = Заработок;
				ОбластьИтогоРаздел4.Параметры.ОблагаетсяВзносамиДоПредельнойВеличины = ОблагаетсяВзносамиДоПредельнойВеличины;
				ОбластьИтогоРаздел4.Параметры.ПоДоговорамГПХДоПредельнойВеличины = ПоДоговорамГПХДоПредельнойВеличины;
				ОбластьИтогоРаздел4.Параметры.ОблагаетсяВзносамиСвышеПредельнойВеличины = ОблагаетсяВзносамиСвышеПредельнойВеличины;
				ОбластьИтогоРаздел4.Параметры.ПоДоговорамГПХСвышеПредельнойВеличины = ПоДоговорамГПХСвышеПредельнойВеличины;
				
				КодыКатегорийСотрудника = Новый Массив;
				ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(КодыКатегорийСотрудника, КодыКатегорий);
				Если КодыКатегорийСотрудника.Количество() = 1 Тогда 
					ОбластьИтогоРаздел4.Параметры.КодКатегории = КодыКатегорийСотрудника[0];
				КонецЕсли;
				ДокументРезультат.Вывести(ОбластьИтогоРаздел4);
				
				// Раздел 5
				СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);
				
				Если ВыборкаПоНачисленнымВзносам.НайтиСледующий(СтруктураПоиска) Тогда
					ЗаполнитьЗначенияСвойств(ОбластьРаздел5.Параметры, ВыборкаПоНачисленнымВзносам);
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьРаздел5);
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				
				ТекущийЛист = Новый ТабличныйДокумент;
				ТекущийЛист.ПолеСлева = ДокументРезультат.ПолеСлева;
				ТекущийЛист.ПолеСправа = ДокументРезультат.ПолеСправа;
				ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
				
				НомерСтраницы = 2;
				НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 3);
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьКолонтитул, "НомСтр", 3);
				ТекущийЛист.Вывести(ОбластьКолонтитул);
				
				// Раздел 6
				Если ВыборкаПоУплаченнымВзносам.НайтиСледующий(СтруктураПоиска) Тогда
					ЗаполнитьЗначенияСвойств(ОбластьСтраница2.Параметры, ВыборкаПоУплаченнымВзносам);
				КонецЕсли;
				
				// Раздел 7
				СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника, КодМесяца");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);
				
				ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах = 0;
				ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах = 0;
				
				Для Сч = 1 По 3 Цикл
					КодМесяца = СписокМесяцев[Сч - 1];
					СтруктураПоиска.КодМесяца = КодМесяца;
					Если ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.НайтиСледующий(СтруктураПоиска) Тогда
						ОбластьСтраница2.Параметры["КодКлассаУсловийТруда" + Сч] = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.КодКлассаУсловийТруда;
						ОбластьСтраница2.Параметры["ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах" + Сч] = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах;
						ОбластьСтраница2.Параметры["ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах" + Сч] = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах;
						ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах = ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах + ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах;
						ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах = ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах + ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах;
					КонецЕсли;
				КонецЦикла;
				
				ОбластьСтраница2.Параметры.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах = ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах;
				ОбластьСтраница2.Параметры.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах = ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах;
				
				ТекущийЛист.Вывести(ОбластьСтраница2);
				ОчиститьОбласть(ОбластьСтраница2);
				
				ОчиститьОбласть(ОбластьСтрокаСтажа);
				ОчиститьОбласть(ОбластьДвустрочнаяСтрокаСтажа);
				ЗаполнитьЗначенияСвойств(ОбластьСтрокаСтажа.Параметры, ВыборкаПоРаботникам);
				ЗаполнитьЗначенияСвойств(ОбластьДвустрочнаяСтрокаСтажа.Параметры, ВыборкаПоРаботникам);
				
				Если ВыборкаПоРаботникам.ЗаполненСтаж Тогда
					Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл
						Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка) Тогда
							ЗаполнитьДвустрочнуюОбластьСтаж(ВыборкаПоРаботникам, ОбластьДвустрочнаяСтрокаСтажа);
							ВывестиОбласть(ОбластьДвустрочнаяСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
						Иначе
							ЗаполнитьОбластьСтаж(ВыборкаПоРаботникам, ОбластьСтрокаСтажа);
							ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
						КонецЕсли;
						Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл
							Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
								Продолжить;
							КонецЕсли;
							Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка) Тогда
								ЗаполнитьДвустрочнуюОбластьСтаж(ВыборкаПоРаботникам, ОбластьДвустрочнаяСтрокаСтажа);
								ОбластьДвустрочнаяСтрокаСтажа.Параметры.ДатаНачалаПериода = "";
								ОбластьДвустрочнаяСтрокаСтажа.Параметры.ДатаОкончанияПериода = "";
								ВывестиОбласть(ОбластьДвустрочнаяСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
							Иначе
								ЗаполнитьОбластьСтаж(ВыборкаПоРаботникам, ОбластьСтрокаСтажа);
								ОбластьСтрокаСтажа.Параметры.ДатаНачалаПериода = "";
								ОбластьСтрокаСтажа.Параметры.ДатаОкончанияПериода = "";
								ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				Иначе
					ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);
				ВывестиОбласть(ОбластьПодвал, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
				ДокументРезультат.Вывести(ТекущийЛист);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("ПечатьСЗВ_ИСХ","СЗВ-ИСХ");
	Возврат СтруктураПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция КодыМесяцевСЗВ() Экспорт 
	
	КодыМесяцев = Новый Соответствие;
	КодыМесяцев.Вставить(1, "Янв");
	КодыМесяцев.Вставить(2, "Фев");
	КодыМесяцев.Вставить(3, "Мрт");
	КодыМесяцев.Вставить(4, "Апр");
	КодыМесяцев.Вставить(5, "Май");
	КодыМесяцев.Вставить(6, "Июн");
	КодыМесяцев.Вставить(7, "Июл");
	КодыМесяцев.Вставить(8, "Авг");
	КодыМесяцев.Вставить(9, "Сен");
	КодыМесяцев.Вставить(10, "Окт");
	КодыМесяцев.Вставить(11, "Нбр");
	КодыМесяцев.Вставить(12, "Дек");
	
	Возврат КодыМесяцев;
	
КонецФункции

Функция ПорядокМесяцевСЗВ_КОРР()
	
	ПорядокМесяцев = Новый Соответствие;
	ПорядокМесяцев.Вставить("Янв", 1);
	ПорядокМесяцев.Вставить("Фев", 2);
	ПорядокМесяцев.Вставить("Мрт", 3);
	ПорядокМесяцев.Вставить("Апр", 4);
	ПорядокМесяцев.Вставить("Май", 5);
	ПорядокМесяцев.Вставить("Июн", 6);
	ПорядокМесяцев.Вставить("Июл", 7);
	ПорядокМесяцев.Вставить("Авг", 8);
	ПорядокМесяцев.Вставить("Сен", 9);
	ПорядокМесяцев.Вставить("Окт", 10);
	ПорядокМесяцев.Вставить("Нбр", 11);
	ПорядокМесяцев.Вставить("Дек", 12);
	
	Возврат ПорядокМесяцев;
	
КонецФункции

Функция ВидимостьКолонокТабличныхЧастей(ОтчетныйГод) Экспорт
	
	ВидимостьКолонок = Новый Соответствие();
	ВидимостьКолонок.Вставить("РаботникиОрганизации", Новый Структура);
	ВидимостьКолонок.Вставить("СведенияОЗаработке", Новый Структура);
	ВидимостьКолонок.Вставить("УплаченныеВзносыРасшифровка", Новый Структура);
	ВидимостьКолонок.Вставить("Взносы", Новый Структура);
	
	ВидимостьКолонокТЧ = ВидимостьКолонок["РаботникиОрганизации"];
	ВидимостьКолонокТЧ.Вставить("НомерДоговора", ОтчетныйГод <= 2001);
	ВидимостьКолонокТЧ.Вставить("ДатаДоговора", ОтчетныйГод <= 2001);
	ВидимостьКолонокТЧ.Вставить("ДополнительныйТариф", ОтчетныйГод >= 2000 И ОтчетныйГод <= 2009);
	ВидимостьКолонокТЧ.Вставить("ТипДоговора", ОтчетныйГод >= 2010 И ОтчетныйГод <= 2013);
	
	ВидимостьКолонокТЧ = ВидимостьКолонок["СведенияОЗаработке"];
	ВидимостьКолонокТЧ.Вставить("Заработок", ОтчетныйГод <= 2001 Или ОтчетныйГод >= 2010);
	ВидимостьКолонокТЧ.Вставить("ОблагаетсяВзносамиДоПредельнойВеличины", ОтчетныйГод <= 2001 Или ОтчетныйГод >= 2010);
	ВидимостьКолонокТЧ.Вставить("ПоДоговорамГПХДоПредельнойВеличины", ОтчетныйГод >= 2010);
	ВидимостьКолонокТЧ.Вставить("ОблагаетсяВзносамиСвышеПредельнойВеличины", ОтчетныйГод >= 2010);
	ВидимостьКолонокТЧ.Вставить("ПоДоговорамГПХСвышеПредельнойВеличины", ОтчетныйГод >= 2010);
	
	ВидимостьКолонокТЧ = ВидимостьКолонок["Взносы"];
	ВидимостьКолонокТЧ.Вставить("СВпоТарифуНеПревышающие", ОтчетныйГод >= 2014);
	ВидимостьКолонокТЧ.Вставить("Страховая", ОтчетныйГод >= 2002 И ОтчетныйГод <= 2013);
	ВидимостьКолонокТЧ.Вставить("Накопительная", ОтчетныйГод >= 2002 И ОтчетныйГод <= 2013);
	ВидимостьКолонокТЧ.Вставить("СВстрахователя", ОтчетныйГод <= 2000);
	ВидимостьКолонокТЧ.Вставить("СВизЗаработка", ОтчетныйГод <= 2000);
	ВидимостьКолонокТЧ.Вставить("СВпоТарифу", ОтчетныйГод = 2001);
	ВидимостьКолонокТЧ.Вставить("СВпоДопТарифу", ОтчетныйГод = 2001);
	ВидимостьКолонокТЧ.Вставить("УплаченоСтраховая", ОтчетныйГод >= 2010 И ОтчетныйГод <= 2013);
	ВидимостьКолонокТЧ.Вставить("УплаченоНакопительная", ОтчетныйГод >= 2010 И ОтчетныйГод <= 2013);
	
	ВидимостьКолонокТЧ = ВидимостьКолонок["УплаченныеВзносыРасшифровка"];
	ВидимостьКолонокТЧ.Вставить("НаСтраховуюПенсию", ОтчетныйГод >= 2002 И ОтчетныйГод <= 2013);
	ВидимостьКолонокТЧ.Вставить("НаНакопительнуюПенсию", ОтчетныйГод >= 2002 И ОтчетныйГод <= 2013);
	ВидимостьКолонокТЧ.Вставить("ПоТарифуСтраховыхВзносов", ОтчетныйГод >= 2014);
	
	Возврат ВидимостьКолонок;
	
КонецФункции

Процедура ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица)
	
	СтрокиДоговоров = ЗаписиФизлица.НайтиСтроки(СтруктураПоискаДоговоров);
	Для Каждого СтрокаТЗ Из СтрокиДоговоров Цикл
		ЗаполнитьЗначенияСвойств(ВременнаяТаблицаФизлица.Добавить(),СтрокаТЗ);
		ЗаписиФизлица.Удалить(СтрокаТЗ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьНумерациюЗаписейОСтаже(СообщатьОПроблемах) Экспорт
	
	Отказ = Ложь;
	Если СообщатьОПроблемах Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ИдентификаторСтроки");
	СтруктураПоискаДоговоров = Новый Структура("ИдентификаторСтроки,ТретийПараметрИсчисляемогоСтажа");
	ВременнаяТаблица = ЗаписиОСтаже.ВыгрузитьКолонки();
	ВременнаяТаблицаФизлица = ЗаписиОСтаже.ВыгрузитьКолонки();
	
	ТЗЗаписиОСтаже = ЗаписиОСтаже.Выгрузить();
	ТЗЗаписиОСтаже.Сортировать("ФизЛицо, ИдентификаторСтроки, НомерСтроки");
	
	Для Каждого СтрокаТЧ Из РаботникиОрганизации Цикл
		
		СтруктураПоиска.ИдентификаторСтроки = СтрокаТЧ.ИдентификаторСтроки;
		СтруктураПоискаДоговоров.ИдентификаторСтроки = СтрокаТЧ.ИдентификаторСтроки;
		
		ВременнаяТаблицаФизлица.Очистить();
		
		ЗаписиФизлица = ТЗЗаписиОСтаже.Скопировать(СтруктураПоиска);
		
		СтруктураПоискаДоговоров.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДОГОВОР;
		ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица);
		СтруктураПоискаДоговоров.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.НЕОПЛАВТ;
		ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица);
		СтруктураПоискаДоговоров.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.НЕОПЛДОГ;
		ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица);
		
		ВременнаяТаблицаФизлица.Сортировать("ДатаНачалаПериода");
		ОбщегоНазначенияЗК.ЗагрузитьВТаблицуЗначений(ЗаписиФизлица, ВременнаяТаблицаФизлица);
		
		//Нумерация записей стажа 
		НомерОсновнойЗаписи = 0; 
		НомерСтроки = 0;
		Для Каждого СтрокаСтажа Из ВременнаяТаблицаФизлица цикл
			
			НомерСтроки = НомерСтроки + 1;
			ТекстОшибкиСНомеромСтроки = "В строке стажа " + НомерСтроки + ": ";
			
			//Контролируем смену основной записи
			Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) И ЗначениеЗаполнено(СтрокаСтажа.ДатаОкончанияПериода) тогда
				//Встретили основную запись
				НомерОсновнойЗаписи = НомерОсновнойЗаписи + 1; 
				НомерДополнительнойЗаписи = 0;
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) И Не ЗначениеЗаполнено(СтрокаСтажа.ДатаОкончанияПериода) тогда	
				Если НомерОсновнойЗаписи <> 0 Тогда
					НомерДополнительнойЗаписи = НомерДополнительнойЗаписи + 1; 
				ИначеЕсли СообщатьОПроблемах Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указаны даты начала и окончания периода!", Отказ);
				КонецЕсли;
			ИначеЕсли СообщатьОПроблемах Тогда
				Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указана дата окончания периода!", Отказ);
				Иначе
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указана начала окончания периода!", Отказ);
				КонецЕсли;
			КонецЕсли;	
			
			СтрокаСтажа.НомерОсновнойЗаписи = НомерОсновнойЗаписи;
			СтрокаСтажа.НомерДополнительнойЗаписи = НомерДополнительнойЗаписи;
			
		КонецЦикла;	
		
		ОбщегоНазначенияЗК.ЗагрузитьВТаблицуЗначений(ВременнаяТаблицаФизлица, ВременнаяТаблица);
		
	КонецЦикла;
	
	ВременнаяТаблица.Сортировать("ФизЛицо, ИдентификаторСтроки, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
	ЗаписиОСтаже.Загрузить(ВременнаяТаблица);
	
	Если СообщатьОПроблемах И Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьЗначенияКолонок(ИмяТабличнойЧасти, ИменаКолонок)
	
	Если ИменаКолонок.Количество() И ЭтотОбъект[ИмяТабличнойЧасти].Количество() Тогда
		ВременнаяТаблица = ЭтотОбъект[ИмяТабличнойЧасти].Выгрузить();
		Для Каждого ИмяКолонки Из ИменаКолонок Цикл
			ВременнаяТаблица.Колонки.Удалить(ИмяКолонки);
		КонецЦикла;
		ЭтотОбъект[ИмяТабличнойЧасти].Очистить();
		ЭтотОбъект[ИмяТабличнойЧасти].Загрузить(ВременнаяТаблица);
	КонецЕсли;
	
КонецПроцедуры

Процедура РегулированиеОтчетногоПериода(ПолеОтчетныйПериод, ПредставлениеОтчетногоПериода, Направление, МинимальныйПериод = '00010101', МаксимальныйПериод = '00010101', Отказ = Ложь) Экспорт 
	
	Если ЗначениеЗаполнено(МинимальныйПериод)
		И ПолеОтчетныйПериод = МинимальныйПериод
		И Направление = -1 Тогда
		
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(МаксимальныйПериод)
		И ПолеОтчетныйПериод = МаксимальныйПериод
		И Направление = 1 Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если Не (ПолеОтчетныйПериод = '19960101' И Направление = -1) Тогда
		
		Если ПолеОтчетныйПериод > '20170101' Или (ПолеОтчетныйПериод = '20170101' И Направление = 1) Тогда
			Шаг = 12;
		ИначеЕсли ПолеОтчетныйПериод > '20110101' Или (ПолеОтчетныйПериод = '20110101' И Направление = 1) Тогда
			Шаг = 3;
		ИначеЕсли ПолеОтчетныйПериод > '20100101' Или (ПолеОтчетныйПериод = '20100101' И Направление = 1) Тогда
			Шаг = 6;
		Иначе 
			Шаг = 12;
		КонецЕсли;
		
		ПолеОтчетныйПериод = ДобавитьМесяц(ПолеОтчетныйПериод, Направление * Шаг);
		
		ПредставлениеОтчетногоПериода = ПредставлениеПериода(НачалоГода(ПолеОтчетныйПериод), ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ПолеОтчетныйПериод), "ФП = Истина");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПравильностьЗаполненияДокумента(ЕстьОшибки, СообщатьОбУспехе = Истина, ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоРаботникам = Неопределено) Экспорт
	
	Обработка = глЗначениеПеременной("глОбработкаСообщений");
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапкеДокументов().Выбрать();
	КонецЕсли;
	Если ВыборкаПоРаботникам = Неопределено Тогда
		ВыборкаПоРаботникам = СформироватьЗапросПоРаботникам().Выбрать();
	КонецЕсли;
	
	Заработки = СведенияОЗаработке.Выгрузить();
	Заработки.Индексы.Добавить("ФизЛицо,ИдентификаторСтроки,КодМесяца,КатегорияЗастрахованныхЛиц");
	Заработки.Сортировать("ФизЛицо,ИдентификаторСтроки,КодМесяца,КатегорияЗастрахованныхЛиц");
	ПроверкаСтрокЗаработка = Заработки.СкопироватьКолонки("КодМесяца, КатегорияЗастрахованныхЛиц, Заработок");
	
	ЗаработкиВредныеТяжелые = СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Выгрузить();
	ЗаработкиВредныеТяжелые.Индексы.Добавить("ФизЛицо,ИдентификаторСтроки,КодМесяца");
	ЗаработкиВредныеТяжелые.Сортировать("ФизЛицо,ИдентификаторСтроки,КодМесяца");
	
	Отказ = Ложь;
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		ТекущийДокумент = ВыборкаПоШапкеДокумента.Ссылка;
		
		// Заголовок для сообщений об ошибках проведения.
		Заголовок =  "Проверка документа " + СокрЛП(ВыборкаПоШапкеДокумента.Ссылка);
		СообщенияРазделПроверки = Обработка.ДобавитьСообщение(Заголовок, Перечисления.ВидыСообщений.Информация);
		
		КоличествоДокументов = ВыборкаПоШапкеДокумента.Количество;
		Если КоличествоДокументов = 0 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Список застрахованных лиц пуст!", Отказ, Заголовок,,, СообщенияРазделПроверки);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок,,, СообщенияРазделПроверки);
		ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР)) <> 14 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Предупреждение: Регистрационный номер организации в ПФР скорее всего неправильный",,Заголовок,,, СообщенияРазделПроверки);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОтчетныйПериод) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан отчетный период!", Отказ, Заголовок,,, СообщенияРазделПроверки);
		ИначеЕсли ВыборкаПоШапкеДокумента.ОтчетныйПериод >= РасчетСтраховыхВзносов.ДатаПередачиАдминистрированияВзносовФНС() Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Форма СЗВ-ИСХ представляется за периоды до 2017 года!", Отказ,,,, СообщенияРазделПроверки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайла) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указано имя файла!", Отказ, Заголовок);
		КонецЕсли;
		
		// проверим данные руководителя
		Если Не ЗначениеЗаполнено(Руководитель) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан руководитель!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДолжностьРуководителя) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана должность руководителя!", Отказ, Заголовок);
		КонецЕсли;
		
		ВыборкаПоРаботникам.Сбросить();
		Если ВыборкаПоРаботникам.НайтиСледующий(ВыборкаПоШапкеДокумента.Ссылка, "Ссылка") Тогда
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") цикл
				
				Если ВыборкаПоРаботникам.Ссылка <> ТекущийДокумент Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаНачалаСообщенияОбОшибке = "В строке № "+ СокрЛП(ВыборкаПоРаботникам.НомерСтроки);
				
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ФизЛицо) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ": Не выбран сотрудник!", Отказ, Заголовок,,, СообщенияРазделПроверки);
				Иначе
					
					СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " по сотруднику " + ВыборкаПоРаботникам.ФизЛицоНаименование + ": ";
					
					Если Не ВыборкаПоРаботникам.ФизЛицоРаботаетВОрганизации тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- не зарегистрирован(а) как сотрудник организации " + ВыборкаПоШапкеДокумента.ОрганизацияНаименование, Отказ, Заголовок,,, СообщенияРазделПроверки);
					КонецЕсли;
					
					СтраховойНомерПФР = ВыборкаПоРаботникам.СтраховойНомерПФР;
					Если Не ЗначениеЗаполнено(СтраховойНомерПФР) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан страховой номер!", Отказ, Заголовок,,, СообщенияРазделПроверки);
					ИначеЕсли Не РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомерПФР) тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Задан неверный страховой номер!", Отказ, Заголовок,,, СообщенияРазделПроверки);
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.Фамилия) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.Имя) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не заданы фамилия и имя!", Отказ ,Заголовок,,, СообщенияРазделПроверки);
					КонецЕсли;	
					
					//Контроль дубля строк
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерПовторяющейсяСтроки) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Строка №" + ВыборкаПоРаботникам.НомерПовторяющейсяСтроки + ": Сотрудник " + ВыборкаПоРаботникам.ФизЛицоНаименование + " указан в документе дважды!", Отказ, Заголовок,,, СообщенияРазделПроверки);
					КонецЕсли;
					
					ПроверкаСтрокЗаработка.Очистить();
					Для Каждого СтрокаЗаработка Из Заработки.НайтиСтроки(Новый Структура("ФизЛицо, ИдентификаторСтроки", ВыборкаПоРаботникам.ФизЛицо, ВыборкаПоРаботникам.ИдентификаторСтроки)) Цикл
						КонтрольнаяСтрока = ПроверкаСтрокЗаработка.Добавить();
						КонтрольнаяСтрока.КодМесяца = СтрокаЗаработка.КодМесяца;
						КонтрольнаяСтрока.КатегорияЗастрахованныхЛиц = СтрокаЗаработка.КатегорияЗастрахованныхЛиц;
						КонтрольнаяСтрока.Заработок = 1;
					КонецЦикла;
					ПроверкаСтрокЗаработка.Свернуть("КодМесяца, КатегорияЗастрахованныхЛиц", "Заработок");
					Для Каждого КонтрольнаяСтрока Из ПроверкаСтрокЗаработка Цикл
						Если КонтрольнаяСтрока.Заработок > 1 Тогда
							ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В строках заработка месяц " + КонтрольнаяСтрока.КодМесяца + " указан более одного раза!", Отказ, Заголовок,,, СообщенияРазделПроверки);
						КонецЕсли;
					КонецЦикла;
					
					МесяцыДохода = Новый Соответствие;
					Для Каждого СтрокаЗаработка Из ЗаработкиВредныеТяжелые.НайтиСтроки(Новый Структура("ФизЛицо, ИдентификаторСтроки", ВыборкаПоРаботникам.ФизЛицо, ВыборкаПоРаботникам.ИдентификаторСтроки)) Цикл
						Если МесяцыДохода[СтрокаЗаработка.КодМесяца] = Неопределено Тогда
							МесяцыДохода.Вставить(СтрокаЗаработка.КодМесяца, Новый Соответствие());
						КонецЕсли;
						
						Если МесяцыДохода[СтрокаЗаработка.КодМесяца][СтрокаЗаработка.КлассУсловийТруда] = Неопределено Тогда
							МесяцыДохода[СтрокаЗаработка.КодМесяца].Вставить(СтрокаЗаработка.КлассУсловийТруда, 1);
						Иначе
							МесяцыДохода[СтрокаЗаработка.КодМесяца].Вставить(СтрокаЗаработка.КлассУсловийТруда, МесяцыДохода[СтрокаЗаработка.КодМесяца][СтрокаЗаработка.КлассУсловийТруда] + 1);
						КонецЕсли;
					КонецЦикла;
					Для Каждого МесяцДохода Из МесяцыДохода Цикл
						Для Каждого КлючИЗначение Из МесяцДохода.Значение Цикл
							Если КлючИЗначение.Значение > 1 Тогда
								ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В строках заработка на вредных и тяжелых работах месяц " + МесяцДохода.Ключ + " и класс условий " + КлючИЗначение.Ключ+ " указан более одного раза!", Отказ, Заголовок,,, СообщенияРазделПроверки);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Отказ Или Не ПроцедурыПерсонифицированногоУчета.НаборЗаписейОСтажеСоответствуетТребованиям(Ссылка, Истина, СообщенияРазделПроверки);
	
	Если Отказ Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;	 
	
	Если СообщатьОбУспехе И Не ЕстьОшибки Тогда
		Обработка.ДобавитьСообщение("Ошибок не обнаружено.", Перечисления.ВидыСообщений.Информация, , СообщенияРазделПроверки);		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьВыходнойФайл(Отказ) Экспорт
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	Отказ = Ложь;
	
	//Проверка корректности заполнения документа
	ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь);
	Если Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат "";
	КонецЕсли;
	
	ВыборкаПоШапкеДокумента = ПроцедурыПерсонифицированногоУчета.ЗапросПоШапкеДляПечатиОДВ_1(Ссылка, Дата).Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоДаннымВзносов = ПроцедурыПерсонифицированногоУчета.ЗапросПоДаннымНачисленныхУплаченныхВзносовОДВ_1(Ссылка, "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ").Выбрать();
	ВыборкаУплаченныхВзносов = ПроцедурыПерсонифицированногоУчета.ЗапросПоДаннымРасшифровкиУплаченныхВзносовОДВ_1(Ссылка, "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ").Выбрать();
	ВыборкаПоДаннымДНП = ПроцедурыПерсонифицированногоУчета.ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(Ссылка, "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ").Выбрать();
	
	// Загружаем формат файла сведений
	ДеревоФорматаXML = ПолучитьОбщийМакет("ФорматПФР_2017");
	
	ФорматОДВ_1 = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(ДеревоФорматаXML, "ОДВ_1");
	
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.ДатаЗаполнения));
	ФорматОДВ_1.Удалить("ДатаЗаполнения");
	НаборЗаписейРуководитель = Новый Структура("Руководитель", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.Руководитель));
	ФорматОДВ_1.Удалить("Руководитель");
	ФорматОснованияДНП = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.ОснованияДНП.Значение);
	ФорматОДВ_1.Удалить("ОснованияДНП");
	ФорматУплата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.Уплата.Значение);
	ФорматОДВ_1.Удалить("Уплата");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/ВС/СЗВ-ИСХ/2017-01-01");
	Атрибуты.Вставить("xmlns:АФ", "http://пф.рф/АФ");
	Атрибуты.Вставить("xmlns:АФ2", "http://пф.рф/АФ/2016-06-21");
	Атрибуты.Вставить("xmlns:УТ", "http://пф.рф/унифицированныеТипы/2014-01-01");
	Атрибуты.Вставить("xmlns:ВС", "http://пф.рф/ВС/типы/2014-01-01");
	Атрибуты.Вставить("xmlns:РВ", "http://пф.рф/ВС/типыРВ/2014-01-01");
	Атрибуты.Вставить("xmlns:ИС", "http://пф.рф/ВС/типыИС/2017-01-01");
	
	УзелПФР = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(ДеревоФорматаXML, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР) Тогда
		ЧастиИмениФайла = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР),"_");
		НаборЗаписейСлужебнаяИнформация.АФ__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ__ДатаВремя.Значение = ПроцедурыПерсонифицированногоУчета.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	НаборЗаписейСлужебнаяИнформация.АФ2__ПрограммаПодготовки.Значение = ИсправленныйСимвольныйЭлемент("1С:" + РегламентированнаяОтчетность.ИДКонфигурации()) + " " + РегламентированнаяОтчетность.РедакцияКонфигурации();
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация", ""), НаборЗаписейСлужебнаяИнформация);
	
	// Данные формы и страхователя
	ФорматОДВ_1.Тип.Значение = 0;
	НаборЗаписейСтрахователь = ФорматОДВ_1.Страхователь.Значение;
	НаборЗаписейСтрахователь.ИС__Наименование = ИсправленныйСимвольныйЭлемент(ВыборкаПоШапкеДокумента.НаименованиеСокращенное);
	НаборЗаписейСтрахователь.УТ__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейСтрахователь.УТ__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейСтрахователь.УТ__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейСтрахователь.Удалить("УТ__КПП");
		СтрокаПоляКПП = ФорматОДВ_1.Страхователь.Поля.Найти("УТ__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматОДВ_1.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;
	КонецЕсли;
	НаборЗаписейОтчетныйПериод = ФорматОДВ_1.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Код = ПроцедурыПерсонифицированногоУчета.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
	НаборЗаписейОтчетныйПериод.Год = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
	
	ФорматОДВ_1.КоличествоЗЛ.Значение = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
	
	Если ВыборкаПоДаннымВзносов.Следующий()
		И (ВыборкаПоДаннымВзносов.ЕстьСтраховая Или ВыборкаПоДаннымВзносов.ЕстьНакопительная Или ВыборкаПоДаннымВзносов.ЕстьТарифСВ) Тогда 
		
		ФорматОДВ_1.Страховая.Значение.ИС__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоПериодаСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС__Начислено = ВыборкаПоДаннымВзносов.НачисленоСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС__Уплачено = ВыборкаПоДаннымВзносов.УплаченоСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецПериодаСтраховая;
		
		ФорматОДВ_1.Накопительная.Значение.ИС__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоПериодаНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС__Начислено = ВыборкаПоДаннымВзносов.НачисленоНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС__Уплачено = ВыборкаПоДаннымВзносов.УплаченоНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецПериодаНакопительная;
		
		ФорматОДВ_1.ТарифСВ.Значение.ИС__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоПериодаТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС__Начислено = ВыборкаПоДаннымВзносов.НачисленоТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС__Уплачено = ВыборкаПоДаннымВзносов.УплаченоТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецПериодаТарифСВ;
		
	Иначе
		ФорматОДВ_1.Удалить("Страховая");
		ФорматОДВ_1.Удалить("Накопительная");
		ФорматОДВ_1.Удалить("ТарифСВ");
	КонецЕсли;
	
	УзелФормы = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "ОДВ-1", "");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, ФорматОДВ_1);
	
	Пока ВыборкаУплаченныхВзносов.Следующий() Цикл 
		НаборЗаписейТипУплата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматУплата);
		НаборЗаписейТипУплата.ИС__Год.Значение = ВыборкаУплаченныхВзносов.Год;
		НаборЗаписейТипУплата.ИС__Страховая.Значение = ВыборкаУплаченныхВзносов.НаСтраховуюПенсию;
		НаборЗаписейТипУплата.ИС__Накопительная.Значение = ВыборкаУплаченныхВзносов.НаНакопительнуюПенсию;
		НаборЗаписейТипУплата.ИС__ТарифСВ.Значение = ВыборкаУплаченныхВзносов.ПоТарифуСтраховыхВзносов;
		УзелУплата = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелФормы, "Уплата", "");
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелУплата, НаборЗаписейТипУплата);
	КонецЦикла;
	
	Если ВыборкаПоДаннымДНП.Количество() > 0 Тогда 
		УзелСпискаОснованияДНП = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелФормы, "ОснованияДНП", "");
		ФорматОснование = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОснованияДНП.ИС__Основание.Значение);
		ФорматОснованияДНП.Удалить("ИС__Основание");
		ВсегоШтат = 0;
		ВсегоФакт = 0;
		Пока ВыборкаПоДаннымДНП.Следующий() Цикл 
			НаборЗаписейОснование = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОснование);
			НаборЗаписейОснование.ИС__Подразделение.Значение =ВРег(ВыборкаПоДаннымДНП.НаименованиеПодразделения);
			НаборЗаписейОснование.ИС__ПрофессияДолжность.Значение = ВРег(ВыборкаПоДаннымДНП.НаименованиеДолжности);
			НаборЗаписейОснование.ИС__КоличествоШтат.Значение = ВыборкаПоДаннымДНП.КоличествоРабочихМест;
			НаборЗаписейОснование.ИС__КоличествоФакт.Значение = ВыборкаПоДаннымДНП.КоличествоРаботающих;
			НаборЗаписейОснование.ИС__Описание.Значение = ВРег(ВыборкаПоДаннымДНП.ХарактерВыполняемыхРабот);
			НаборЗаписейОснование.ИС__Документы.Значение = ВРег(ВыборкаПоДаннымДНП.ПервичныеДокументы);
			НаборЗаписейОУТ = НаборЗаписейОснование.ИС__ОУТ.Значение;
			ОписаниеПолей = НаборЗаписейОснование.ИС__ОУТ.Поля;
			Если ЗначениеЗаполнено(ВыборкаПоДаннымДНП.ОснованиеВыслугиЛетКод) Тогда
				НаборЗаписейОУТ.ИС__Код = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоДаннымДНП.ОснованиеВыслугиЛетКод));
			Иначе
				НаборЗаписейОУТ.Удалить("ИС__Код");
				СтрокаКУдалению = ОписаниеПолей.Найти("ИС__Код", "ИмяПоля");
				ОписаниеПолей.Удалить(СтрокаКУдалению);
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаПоДаннымДНП.КодПозицииСпискаКод) Тогда
				НаборЗаписейОУТ.ИС__ПозицияСписка = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоДаннымДНП.КодПозицииСпискаКод));
			Иначе
				НаборЗаписейОУТ.Удалить("ИС__ПозицияСписка");
				СтрокаКУдалению = ОписаниеПолей.Найти("ИС__ПозицияСписка", "ИмяПоля");
				ОписаниеПолей.Удалить(СтрокаКУдалению);
			КонецЕсли;
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСпискаОснованияДНП, "ИС__Основание", ""), НаборЗаписейОснование);
			ВсегоШтат = ВсегоШтат + ВыборкаПоДаннымДНП.КоличествоРабочихМест;
			ВсегоФакт = ВсегоФакт + ВыборкаПоДаннымДНП.КоличествоРаботающих;
		КонецЦикла;
		ФорматОснованияДНП.ИС__ВсегоШтат.Значение = ВсегоШтат;
		ФорматОснованияДНП.ИС__ВсегоФакт.Значение = ВсегоФакт;
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСпискаОснованияДНП, ФорматОснованияДНП);
	КонецЕсли;
	
	НаборЗаписейРуководитель.Руководитель.Значение.Должность.Значение = ВРег(ВыборкаПоШапкеДокумента.ДолжностьРуководителя);
	НаборЗаписейФИО = НаборЗаписейРуководитель.Руководитель.Значение.ФИО.Значение;
	НаборЗаписейФИО.УТ__Фамилия = ВРег(ВыборкаПоШапкеДокумента.ФамилияРуководителя);
	НаборЗаписейФИО.УТ__Имя = ВРег(ВыборкаПоШапкеДокумента.ИмяРуководителя);
	НаборЗаписейФИО.УТ__Отчество = ВРег(ВыборкаПоШапкеДокумента.ОтчествоРуководителя);
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейРуководитель);
	
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=yyyy-MM-dd");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати().Выбрать();
	ВыборкаПоДоходам = ЗапросПоЗаработкуДляПечати().Выбрать();
	ВыборкаПоДоходамНаВредныхИТяжелыхРаботах = ЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати().Выбрать();
	ВыборкаПоНачисленнымВзносам = ЗапросПоНачисленнымВзносам().Выбрать();
	ВыборкаПоУплаченнымВзносам = ЗапросПоСведениямОбУплаченныхВзносах().Выбрать();
	
	ФорматСЗВ_ИСХ = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(ДеревоФорматаXML, "СЗВ_ИСХ");
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		ФорматСЗВ_ИСХ.Страхователь.Значение.Удалить("УТ__КПП");
		СтрокаПоляКПП = ФорматСЗВ_ИСХ.Страхователь.Поля.Найти("УТ__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_ИСХ.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;
	КонецЕсли;
	
	ФорматВыплаты = Новый Структура("Выплаты", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_ИСХ.Выплаты));
	ФорматСЗВ_ИСХ.Удалить("Выплаты");
	
	ФорматНачисления = Новый Структура("Начисления", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_ИСХ.Начисления));
	ФорматСЗВ_ИСХ.Удалить("Начисления");
	
	ФорматУплата = Новый Структура("Уплата", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_ИСХ.Уплата));
	ФорматСЗВ_ИСХ.Удалить("Уплата");
	
	ФорматВыплатыДТ = Новый Структура("ВыплатыДТ", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_ИСХ.ВыплатыДТ));
	ФорматСЗВ_ИСХ.Удалить("ВыплатыДТ");
	
	ФорматСтажевыйПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_ИСХ.СтажевыйПериод.Значение);
	ФорматСЗВ_ИСХ.Удалить("СтажевыйПериод");
	
	Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		ЗаписьСЗВ_ИСХ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_ИСХ);
		
		// Данные страхователя
		НаборЗаписейСтрахователь = ЗаписьСЗВ_ИСХ.Страхователь.Значение;
		НаборЗаписейСтрахователь.ИС__Наименование = ВРег(ВыборкаПоШапкеДокумента.НаименованиеСокращенное);
		НаборЗаписейСтрахователь.УТ__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
		НаборЗаписейСтрахователь.УТ__ИНН = ВыборкаПоШапкеДокумента.ИНН;
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
			НаборЗаписейСтрахователь.УТ__КПП = ВыборкаПоШапкеДокумента.КПП;
		КонецЕсли;
		
		// Данные по физлицу
		НаборЗаписейФИО = ЗаписьСЗВ_ИСХ.ФИО.Значение;
		НаборЗаписейФИО.УТ__Фамилия = ВРег(СокрЛП(ВыборкаПоРаботникам.Фамилия));
		НаборЗаписейФИО.УТ__Имя = ВРег(СокрЛП(ВыборкаПоРаботникам.Имя));
		НаборЗаписейФИО.УТ__Отчество = ВРег(СокрЛП(ВыборкаПоРаботникам.Отчество));
		
		ЗаписьСЗВ_ИСХ.СНИЛС.Значение = ВыборкаПоРаботникам.СтраховойНомерПФР;
		
		НаборЗаписейДоговор = ЗаписьСЗВ_ИСХ.Договор.Значение;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТипДоговора) Тогда
			НаборЗаписейДоговор.Тип.Значение = ВыборкаПоРаботникам.ТипДоговора;
		Иначе
			НаборЗаписейДоговор.Удалить("Тип");
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерДоговора) Тогда 
			НаборЗаписейДоговор.Реквизиты.Значение.УТ__Дата = ВыборкаПоРаботникам.ДатаДоговора;
			НаборЗаписейДоговор.Реквизиты.Значение.УТ__Номер = ВыборкаПоРаботникам.НомерДоговора;
		Иначе 
			НаборЗаписейДоговор.Удалить("Реквизиты");
		КонецЕсли;
		Если Не (ЗначениеЗаполнено(ВыборкаПоРаботникам.ТипДоговора) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерДоговора)) Тогда
			ЗаписьСЗВ_ИСХ.Удалить("Договор");
		КонецЕсли;
		
		Если ВыборкаПоРаботникам.ДополнительныйТариф Тогда
			ЗаписьСЗВ_ИСХ.КодДТ.Значение = "АВИА";
		Иначе
			ЗаписьСЗВ_ИСХ.Удалить("КодДТ");
		КонецЕсли;
		
		// Отчетный период
		НаборЗаписейОтчетныйПериод = ЗаписьСЗВ_ИСХ.ОтчетныйПериод.Значение;
		НаборЗаписейОтчетныйПериод.Код = ПроцедурыПерсонифицированногоУчета.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		НаборЗаписейОтчетныйПериод.Год = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		
		УзелФормы = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "СЗВ-ИСХ", "");
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, ЗаписьСЗВ_ИСХ);
		
		СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника, КодМесяца");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);
		
		СписокМесяцев = Новый Массив;
		КодыМесяцев = КодыМесяцевСЗВ();
		ПервыйМесяц = Месяц(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		ПоследнийМесяц  =Месяц(ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ВыборкаПоШапкеДокумента.ОтчетныйПериод));
		Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл 
			СписокМесяцев.Добавить(КодыМесяцев[Сч]);
		КонецЦикла;
		
		// Выплаты
		УзелВыплаты = Неопределено;
		ВсегоСуммаВыплат = 0;
		ВсегоНеПревышающие = 0;
		ВсегоНеПревышающиеПоГПД = 0;
		ВсегоПревышающие = 0;
		ВсегоПревышающиеПоГПД = 0;
		КодыКатегорииСотрудника = Новый Массив;
		Для Каждого КодМесяца Из СписокМесяцев Цикл 
			СтруктураПоиска.КодМесяца = КодМесяца;
			Пока ВыборкаПоДоходам.НайтиСледующий(СтруктураПоиска) Цикл 
				НаборЗаписейПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматВыплаты.Выплаты.Значение.Период.Значение);
				НаборЗаписейПериод.Месяц.Значение = КодМесяца;
				НаборЗаписейПериод.Категория.Значение = ВыборкаПоДоходам.КодКатегории;
				Если Не ЗначениеЗаполнено(ВыборкаПоДоходам.КодКатегории) Тогда
					НаборЗаписейПериод.Удалить("Категория");
				КонецЕсли;
				НаборЗаписейПериод.СуммаВыплат.Значение = ВыборкаПоДоходам.Заработок;
				НаборЗаписейПериод.НеПревышающие.Значение.Всего.Значение = ВыборкаПоДоходам.ОблагаетсяВзносамиДоПредельнойВеличины;
				НаборЗаписейПериод.НеПревышающие.Значение.ПоГПД.Значение = ВыборкаПоДоходам.ПоДоговорамГПХДоПредельнойВеличины;
				НаборЗаписейПериод.Превышающие.Значение.Всего.Значение = ВыборкаПоДоходам.ОблагаетсяВзносамиСвышеПредельнойВеличины;
				НаборЗаписейПериод.Превышающие.Значение.ПоГПД.Значение = ВыборкаПоДоходам.ПоДоговорамГПХСвышеПредельнойВеличины;
				Если ВыборкаПоДоходам.ОблагаетсяВзносамиДоПредельнойВеличины = 0 Тогда 
					НаборЗаписейПериод.Удалить("НеПревышающие");
				КонецЕсли;
				Если ВыборкаПоДоходам.ОблагаетсяВзносамиСвышеПредельнойВеличины = 0 Тогда 
					НаборЗаписейПериод.Удалить("Превышающие");
				КонецЕсли;
				
				ВсегоСуммаВыплат = ВсегоСуммаВыплат + ВыборкаПоДоходам.Заработок;
				ВсегоНеПревышающие = ВсегоНеПревышающие + ВыборкаПоДоходам.ОблагаетсяВзносамиДоПредельнойВеличины;
				ВсегоНеПревышающиеПоГПД = ВсегоНеПревышающиеПоГПД + ВыборкаПоДоходам.ПоДоговорамГПХДоПредельнойВеличины;
				ВсегоПревышающие = ВсегоПревышающие + ВыборкаПоДоходам.ОблагаетсяВзносамиСвышеПредельнойВеличины;
				ВсегоПревышающиеПоГПД = ВсегоПревышающиеПоГПД + ВыборкаПоДоходам.ПоДоговорамГПХСвышеПредельнойВеличины;
				Если КодыКатегорииСотрудника.Найти(ВыборкаПоДоходам.КодКатегории) = Неопределено Тогда
					КодыКатегорииСотрудника.Добавить(ВыборкаПоДоходам.КодКатегории);
				КонецЕсли;
				
				Если УзелВыплаты = Неопределено Тогда 
					УзелВыплаты = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелФормы, "Выплаты", "");
				КонецЕсли;
				УзелПериод = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелВыплаты, "Период", "");
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелПериод, НаборЗаписейПериод);
			КонецЦикла;
		КонецЦикла;
		Если УзелВыплаты <> Неопределено Тогда
			НаборЗаписейВсего = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматВыплаты.Выплаты.Значение.Всего.Значение);
			Если КодыКатегорииСотрудника.Количество() = 1 И ЗначениеЗаполнено(КодыКатегорииСотрудника[0]) Тогда
				НаборЗаписейВсего.Категория.Значение = КодыКатегорииСотрудника[0];
			Иначе 
				НаборЗаписейВсего.Удалить("Категория");
			КонецЕсли;
			НаборЗаписейВсего.СуммаВыплат.Значение = ВсегоСуммаВыплат;
			НаборЗаписейВсего.НеПревышающие.Значение.Всего.Значение = ВсегоНеПревышающие;
			НаборЗаписейВсего.НеПревышающие.Значение.ПоГПД.Значение = ВсегоНеПревышающиеПоГПД;
			НаборЗаписейВсего.Превышающие.Значение.Всего.Значение = ВсегоПревышающие;
			НаборЗаписейВсего.Превышающие.Значение.ПоГПД.Значение = ВсегоПревышающиеПоГПД;
			Если ВсегоНеПревышающие = 0 Тогда 
				НаборЗаписейВсего.Удалить("НеПревышающие");
			КонецЕсли;
			Если ВсегоПревышающие = 0 Тогда 
				НаборЗаписейВсего.Удалить("Превышающие");
			КонецЕсли;
			УзелВсего = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелВыплаты, "Всего", "");
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелВсего, НаборЗаписейВсего);
		КонецЕсли;
		
		// Начисленные взносы
		СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);
		Если ВыборкаПоНачисленнымВзносам.НайтиСледующий(СтруктураПоиска) Тогда
			НаборЗаписейНачисления = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматНачисления);
			НаборЗаписейНачисленныеВзносы = НаборЗаписейНачисления.Начисления.Значение;
			Если ВыборкаПоШапкеДокумента.ОтчетныйПериод < '20010101' Тогда 
				ВыводитьВФайл = ВыборкаПоНачисленнымВзносам.СВстрахователя <> 0 Или ВыборкаПоНачисленнымВзносам.СВизЗаработка <> 0;
				НаборЗаписейНачисленныеВзносы.СВстрахователя.Значение = ВыборкаПоНачисленнымВзносам.СВстрахователя;
				НаборЗаписейНачисленныеВзносы.СВизЗаработка.Значение = ВыборкаПоНачисленнымВзносам.СВизЗаработка;
				НаборЗаписейНачисленныеВзносы.Удалить("СВпоТарифу");
				НаборЗаписейНачисленныеВзносы.Удалить("СВпоДопТарифу");
				НаборЗаписейНачисленныеВзносы.Удалить("Страховая");
				НаборЗаписейНачисленныеВзносы.Удалить("Накопительная");
				НаборЗаписейНачисленныеВзносы.Удалить("СВпоТарифуНеПревышающие");
			ИначеЕсли ВыборкаПоШапкеДокумента.ОтчетныйПериод < '20020101' Тогда 
				ВыводитьВФайл = ВыборкаПоНачисленнымВзносам.СВпоДопТарифу <> 0 Или ВыборкаПоНачисленнымВзносам.СВпоДопТарифу <> 0;
				НаборЗаписейНачисленныеВзносы.СВпоТарифу.Значение = ВыборкаПоНачисленнымВзносам.СВстрахователя;
				НаборЗаписейНачисленныеВзносы.СВпоДопТарифу.Значение = ВыборкаПоНачисленнымВзносам.СВизЗаработка;
				НаборЗаписейНачисленныеВзносы.Удалить("СВстрахователя");
				НаборЗаписейНачисленныеВзносы.Удалить("СВизЗаработка");
				НаборЗаписейНачисленныеВзносы.Удалить("Страховая");
				НаборЗаписейНачисленныеВзносы.Удалить("Накопительная");
				НаборЗаписейНачисленныеВзносы.Удалить("СВпоТарифуНеПревышающие");
			ИначеЕсли ВыборкаПоШапкеДокумента.ОтчетныйПериод < '20140101'Тогда 
				ВыводитьВФайл = ВыборкаПоНачисленнымВзносам.Страховая <> 0 Или ВыборкаПоНачисленнымВзносам.Накопительная <> 0;
				НаборЗаписейНачисленныеВзносы.Страховая.Значение = ВыборкаПоНачисленнымВзносам.Страховая;
				НаборЗаписейНачисленныеВзносы.Накопительная.Значение = ВыборкаПоНачисленнымВзносам.Накопительная;
				НаборЗаписейНачисленныеВзносы.Удалить("СВстрахователя");
				НаборЗаписейНачисленныеВзносы.Удалить("СВизЗаработка");
				НаборЗаписейНачисленныеВзносы.Удалить("СВпоТарифу");
				НаборЗаписейНачисленныеВзносы.Удалить("СВпоДопТарифу");
				НаборЗаписейНачисленныеВзносы.Удалить("СВпоТарифуНеПревышающие");
			Иначе 
				ВыводитьВФайл = ВыборкаПоНачисленнымВзносам.СВпоТарифуНеПревышающие <> 0;
				НаборЗаписейНачисленныеВзносы.СВпоТарифуНеПревышающие.Значение = ВыборкаПоНачисленнымВзносам.СВпоТарифуНеПревышающие;
				НаборЗаписейНачисленныеВзносы.Удалить("СВстрахователя");
				НаборЗаписейНачисленныеВзносы.Удалить("СВизЗаработка");
				НаборЗаписейНачисленныеВзносы.Удалить("СВпоТарифу");
				НаборЗаписейНачисленныеВзносы.Удалить("СВпоДопТарифу");
				НаборЗаписейНачисленныеВзносы.Удалить("Страховая");
				НаборЗаписейНачисленныеВзносы.Удалить("Накопительная");
			КонецЕсли;
			Если ВыводитьВФайл Тогда 
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейНачисления);
			КонецЕсли;
		КонецЕсли;
		
		// Уплаченные взносы
		СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);
		Если ВыборкаПоУплаченнымВзносам.НайтиСледующий(СтруктураПоиска) Тогда
			НаборЗаписейУплата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматУплата);
			НаборЗаписейУплата.Уплата.Значение.Страховая.Значение = ВыборкаПоУплаченнымВзносам.УплаченоСтраховая;
			НаборЗаписейУплата.Уплата.Значение.Накопительная.Значение = ВыборкаПоУплаченнымВзносам.УплаченоНакопительная;
			Если ВыборкаПоУплаченнымВзносам.УплаченоСтраховая <> 0 Или ВыборкаПоУплаченнымВзносам.УплаченоНакопительная <> 0 Тогда 
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейУплата);
			КонецЕсли;
		КонецЕсли;
		
		// ВыплатыДТ
		УзелВыплатыДТ = Неопределено;
		ВсегоДопТарифП1 = 0;
		ВсегоДопТарифП2_18 = 0;
		СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника, КодМесяца");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);
		Для Каждого КодМесяца Из СписокМесяцев Цикл 
			СтруктураПоиска.КодМесяца = КодМесяца;
			НаборЗаписейПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматВыплатыДТ.ВыплатыДТ.Значение.Период.Значение);
			НаборЗаписейПериод.Месяц.Значение = КодМесяца;
			Если ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.НайтиСледующий(СтруктураПоиска) Тогда
				НаборЗаписейПериод.КодСОУТ.Значение = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.КодКлассаУсловийТруда;
				НаборЗаписейПериод.ИС__ДопТарифП1.Значение = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах;
				НаборЗаписейПериод.ИС__ДопТарифП2_18.Значение = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах;
				ВсегоДопТарифП1 = ВсегоДопТарифП1 + ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах;
				ВсегоДопТарифП2_18 = ВсегоДопТарифП2_18 + ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах;
				Если УзелВыплатыДТ = Неопределено Тогда 
					УзелВыплатыДТ = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелФормы, "ВыплатыДТ", "");
					УзелВсего = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелВыплатыДТ, "Всего", "");
				КонецЕсли;
				УзелПериод = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелВыплатыДТ, "Период", "");
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелПериод, НаборЗаписейПериод);
			КонецЕсли;
		КонецЦикла;
		Если УзелВыплатыДТ <> Неопределено Тогда
			НаборЗаписейВсего = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматВыплатыДТ.ВыплатыДТ.Значение.Всего.Значение);
			НаборЗаписейВсего.ИС__ДопТарифП1.Значение = ВсегоДопТарифП1;
			НаборЗаписейВсего.ИС__ДопТарифП2_18.Значение = ВсегоДопТарифП2_18;
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелВсего, НаборЗаписейВсего);
		КонецЕсли;
		
		ВписатьЗаписиОСтажеВНаборДанных(УзелФормы, ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСтажевыйПериод), ВыборкаПоРаботникам);
		
	КонецЦикла;
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML(, "UTF-8");
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ТекстФайла = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции

Процедура ВписатьЗаписиОСтажеВНаборДанных(УзелСотрудника, ФорматСтажевыйПериод, ВыборкаПоРаботникам) 
	
	ФорматЛьготныйСтаж = ФорматСтажевыйПериод.ИС__ЛьготныйСтаж.Значение;
	ФорматСтажевыйПериод.Удалить("ИС__ЛьготныйСтаж");
	ПараметрыСтажаСПравомНаДосрочнуюПенсию = ПроцедурыПерсонифицированногоУчета.ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерОсновнойЗаписи) Тогда
		
		Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл
			
			УзелСтажевыйПериод = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСотрудника, "СтажевыйПериод", "");
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
			
			УзелСтажевыйПериод.Строки.Найти("ИС__Период").Строки.Найти("УТ__С").Значение = Формат(ВыборкаПоРаботникам.ДатаНачалаПериода, "ДФ=yyyy-MM-dd");
			УзелСтажевыйПериод.Строки.Найти("ИС__Период").Строки.Найти("УТ__По").Значение = Формат(ВыборкаПоРаботникам.ДатаОкончанияПериода, "ДФ=yyyy-MM-dd");
			
			НаборЗаписейЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
			
			ВыводитьЛьготныйСтаж = Ложь;
			НеВыводитьВФайлТУ = Ложь;
			НеВыводитьВФайлОУТ = Ложь;
			НеВыводитьВФайлИС = Ложь;
			НеВыводитьВФайлДопСведенияИС = Ложь;
			НеВыводитьВФайлВЛ = Ложь;
			
			// ДопСведенияИС
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
				НаборЗаписейЛьготныйСтаж.ИС__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажаКод;
				ВыводитьЛьготныйСтаж = Истина;
			Иначе
				НеВыводитьВФайлДопСведенияИС = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа)
				И ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда 
				
				НеВыводитьВФайлВЛ = Истина;
				НеВыводитьВФайлИС = Истина;
				НеВыводитьВФайлОУТ = Истина;
				НеВыводитьВФайлТУ = Истина;
				
			Иначе
				
				// Территориальные условия
				НаборЗаписейТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС__ТУ.Значение;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияКод) Тогда
					НаборЗаписейТерриториальныеУсловия.ИС__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
					НаборЗаписейТерриториальныеУсловия.ИС__Коэффициент = ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка;
					Если ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКС 
						Или ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКС 
						Или ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКСМ 
						Или ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКСР Тогда
						НаборЗаписейТерриториальныеУсловия.ИС__Коэффициент = ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка;
					Иначе
						ОписаниеПолей = НаборЗаписейЛьготныйСтаж.ИС__ТУ.Поля;
						СтрокаКУдалению = ОписаниеПолей.Найти("ИС__Коэффициент", "ИмяПоля");
						ОписаниеПолей.Удалить(СтрокаКУдалению);
					КонецЕсли;
				Иначе
					НеВыводитьВФайлТУ = Истина;	
				КонецЕсли;	
				
				ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ИС__Основание);
				
				// Особые условия труда
				НаборЗаписейОсобыеУсловияТруда = НаборЗаписейЛьготныйСтаж.ИС__ОУТ.Значение;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод) Тогда
					НаборЗаписейОсобыеУсловияТруда.ИС__Код = СокрЛП(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод);
					НаборЗаписейОсобыеУсловияТруда.ИС__ПозицияСписка = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.КодПозицииСпискаКод));
					ВыводитьЛьготныйСтаж = Истина;
				Иначе
					НеВыводитьВФайлОУТ = Истина;
				КонецЕсли;	
				
				// Исчисляемый стаж
				НаборЗаписейИсчисляемыйСтаж = НаборЗаписейЛьготныйСтаж.ИС__ИС.Значение;
				НаборЗаписейИсчисляемыйСтаж.ИС__Основание.Значение = СокрЛП(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод);
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) И ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
					НеВыводитьВФайлИС = Истина;
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа) Тогда		
					НеВыводитьВФайлВыработкаВЧасахИС = Ложь;
					НеВыводитьВФайлВыработкаКалендарнаяИС = Ложь;
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
						НеВыводитьВФайлВыработкаВЧасахИС = Истина;
					ИначеЕсли ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
						НаборЗаписейВыработкаВЧасах = НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.ВС__Часы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаВЧасах.ВС__Минуты = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
						НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
					ИначеЕсли ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
						НеВыводитьВФайлВыработкаВЧасахИС = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
					Иначе
						НеВыводитьВФайлВыработкаВЧасахИС = Истина;
						НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаВЧасахИС Тогда
						НаборЗаписейИсчисляемыйСтаж.Удалить("ВС__ВыработкаВЧасах")
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаКалендарнаяИС Тогда
						НаборЗаписейИсчисляемыйСтаж.Удалить("ВС__ВыработкаКалендарная")
					КонецЕсли;
					ВыводитьЛьготныйСтаж = Истина;
					Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Тогда
						НаборЗаписейИсчисляемыйСтаж.Удалить("ИС__Основание")
					КонецЕсли;
				Иначе
					НеВыводитьВФайлИС = Истина;
				КонецЕсли;	

				ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ИС__Основание.Значение);
				
				// Выслуга лет
				НаборЗаписейВыслугаЛет = НаборЗаписейЛьготныйСтаж.ИС__ВЛ.Значение;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод) Тогда
					НеВыводитьВФайлВыработкаВЧасахВЛ = Ложь;
					НеВыводитьВФайлВыработкаКалендарнаяВЛ = Ложь;
					НаборЗаписейВыслугаЛет.ИС__Основание.Значение = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод));
					НаборЗаписейВыслугаЛет.ИС__ДоляСтавки.Значение = ВыборкаПоРаботникам.ТретийПараметрВыслугиЛет;
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда	
						НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
						НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
					ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет) Тогда
						НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
						НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
					ИначеЕсли ВыборкаПоРаботникам.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15 Тогда
						НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейВыслугаЛет.ВС__ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					Иначе
						НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
						НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВС__ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.ВС__Часы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаВЧасах.ВС__Минуты = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаВЧасахВЛ Тогда
						НаборЗаписейВыслугаЛет.Удалить("ВС__ВыработкаВЧасах")
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаКалендарнаяВЛ Тогда
						НаборЗаписейВыслугаЛет.Удалить("ВС__ВыработкаКалендарная")
					КонецЕсли;
					ВыводитьЛьготныйСтаж = Истина;
				Иначе
					НеВыводитьВФайлВЛ = Истина;	
				КонецЕсли;	
					
			КонецЕсли;
			
			Если ВыводитьЛьготныйСтаж Тогда
				
				Если НеВыводитьВФайлТУ Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ТУ")
				КонецЕсли;
				Если НеВыводитьВФайлОУТ Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ОУТ")
				КонецЕсли;
				Если НеВыводитьВФайлИС Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ИС")
				КонецЕсли;
				Если НеВыводитьВФайлДопСведенияИС Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ДопСведенияИС")
				КонецЕсли;
				Если НеВыводитьВФайлВЛ Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ВЛ")
				КонецЕсли;
				
				УзелЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ИС__ЛьготныйСтаж","");
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
			КонецЕсли;
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
				
				//В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НаборЗаписейЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
				
				// Территориальные условия
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловия) Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ТУ")
				Иначе
					НаборЗаписейДопТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС__ТУ.Значение;
					НаборЗаписейДопТерриториальныеУсловия.ИС__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
					НаборЗаписейДопТерриториальныеУсловия.ИС__Коэффициент = ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка;
					Если ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКС
						Или ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКС
						Или ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКСМ 
						Или ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКСР Тогда
						
						НаборЗаписейДопТерриториальныеУсловия.ИС__Коэффициент = ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка;
					Иначе
						ОписаниеПолей = НаборЗаписейЛьготныйСтаж.ИС__ТУ.Поля;
						СтрокаКУдалению = ОписаниеПолей.Найти("ИС__Коэффициент","ИмяПоля");
						ОписаниеПолей.Удалить(СтрокаКУдалению);
					КонецЕсли;
				КонецЕсли;
				
				// Особые условия труда
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОсобыеУсловияТруда) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСписка) Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ОУТ")
				Иначе
					НаборЗаписейДопОсобыеУсловияТруда = НаборЗаписейЛьготныйСтаж.ИС__ОУТ.Значение;
					НаборЗаписейДопОсобыеУсловияТруда.ИС__Код = СокрЛП(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод);
					НаборЗаписейДопОсобыеУсловияТруда.ИС__ПозицияСписка = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.КодПозицииСпискаКод));
				КонецЕсли;
				
				// Исчисляемый стаж
				НаборЗаписейДопИсчисляемыйСтаж = НаборЗаписейЛьготныйСтаж.ИС__ИС.Значение;
				НеВыводитьВФайлВыработкаВЧасахИС = Ложь;
				НеВыводитьВФайлВыработкаКалендарнаяИС = Ложь;
				Если ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
					НаборЗаписейВыработкаВЧасах = НаборЗаписейДопИсчисляемыйСтаж.ВС__ВыработкаВЧасах.Значение;
					НаборЗаписейВыработкаВЧасах.ВС__Часы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейВыработкаВЧасах.ВС__Минуты = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
					НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
				ИначеЕсли ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа > 0 
					ИЛИ ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
					
					НаборЗаписейДопВыработкаКалендарная = НаборЗаписейДопИсчисляемыйСтаж.ВС__ВыработкаКалендарная.Значение;
					НаборЗаписейДопВыработкаКалендарная.ВС__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейДопВыработкаКалендарная.ВС__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
					НеВыводитьВФайлВыработкаВЧасахИС = Истина;
				Иначе
					НеВыводитьВФайлВыработкаВЧасахИС = Истина;
					НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
				КонецЕсли;
				Если НеВыводитьВФайлВыработкаВЧасахИС Тогда
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВС__ВыработкаВЧасах")
				КонецЕсли;
				Если НеВыводитьВФайлВыработкаКалендарнаяИС Тогда
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВС__ВыработкаКалендарная")
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Тогда
					НаборЗаписейДопИсчисляемыйСтаж.ИС__Основание.Значение = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод));
				ИначеЕсли НеВыводитьВФайлВыработкаВЧасахИС И НеВыводитьВФайлВыработкаКалендарнаяИС Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ИС")
				Иначе
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ИС__Основание")
				КонецЕсли;
				
				// Выслуга лет
				НаборЗаписейДопВыслугаЛет = НаборЗаписейЛьготныйСтаж.ИС__ВЛ.Значение;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеВыслугиЛет) Тогда
					НаборЗаписейДопВыслугаЛет.ИС__Основание.Значение = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод));
					НаборЗаписейДопВыслугаЛет.ИС__ДоляСтавки.Значение = ВыборкаПоРаботникам.ТретийПараметрВыслугиЛет;
					НеВыводитьВФайлВыработкаВЧасахВЛ = Ложь;
					НеВыводитьВФайлВыработкаКалендарнаяВЛ = Ложь;
					Если ВыборкаПоРаботникам.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15 Тогда
						НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейДопВыслугаЛет.ВС__ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					Иначе
						НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
						НаборЗаписейДопВыработкаВЧасах = НаборЗаписейДопВыслугаЛет.ВС__ВыработкаВЧасах.Значение;
						НаборЗаписейДопВыработкаВЧасах.ВС__Часы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейДопВыработкаВЧасах.ВС__Минуты = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаВЧасахВЛ Тогда
						НаборЗаписейДопВыслугаЛет.Удалить("ВС__ВыработкаВЧасах")
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаКалендарнаяВЛ Тогда
						НаборЗаписейДопВыслугаЛет.Удалить("ВС__ВыработкаКалендарная")
					КонецЕсли;
				Иначе
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ВЛ")
				КонецЕсли;
				
				// ДопСведенияИС
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
					НаборЗаписейЛьготныйСтаж.ИС__ДопСведенияИС.Значение = Строка(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажаКод);
				Иначе	
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ДопСведенияИС")
				КонецЕсли;
				
				УзелЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ИС__ЛьготныйСтаж", "");
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Функция КодыКатегорий()
	
	ТаблицаКодовКатегорий = Новый ТаблицаЗначений;
	ТаблицаКодовКатегорий.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(10)));
	ТаблицаКодовКатегорий.Колонки.Добавить("Категория", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииЗастрахованныхЛицПФР"));
	
	МетаданныхПеречисления = Метаданные.Перечисления.КатегорииЗастрахованныхЛицПФР;
	
	Для каждого Элемент Из Перечисления.КатегорииЗастрахованныхЛицПФР Цикл
		ИндексЗначения = Перечисления.КатегорииЗастрахованныхЛицПФР.Индекс(Элемент);
		
		НоваяСтрока = ТаблицаКодовКатегорий.Добавить();
		НоваяСтрока.Код = МетаданныхПеречисления.ЗначенияПеречисления[ИндексЗначения].Имя;
		НоваяСтрока.Категория = Элемент;
	КонецЦикла;
	
	Возврат ТаблицаКодовКатегорий;
	
КонецФункции

Функция ИсправленныйСимвольныйЭлемент(СтроковоеЗначение, ИспользоватьВРег = Истина) 
	
	НовоеЗначение = ?(ИспользоватьВРег, ВРег(СтроковоеЗначение), СтроковоеЗначение); // традиционно в файле строки передаются в верхнем регистре
	// правило ВС.ОИС2017.1.2: Лидирующие пробелы в символьных элементах, за исключением элементов блока ФИО, не допускаются
	НовоеЗначение = СокрЛП(НовоеЗначение);
	// правило ВС.ОИС2017.1.3: Если в символьном элементе, за исключением элементов блока ФИО, использован символ '-', то рядом с этим символом пробелы недопустимы
	Пока Найти(НовоеЗначение," -") > 0 Или Найти(НовоеЗначение,"- ") > 0 Цикл
		НовоеЗначение = СтрЗаменить(НовоеЗначение," -","-");
		НовоеЗначение = СтрЗаменить(НовоеЗначение,"- ","-");
	КонецЦикла;
	// правило ВС.ОИС2017.1.4: Наличие двух и более пробелов подряд внутри символьных элементов, за исключением элементов блока ФИО, не допускается (только один)
	Пока Найти(НовоеЗначение,"  ") > 0 Цикл
		НовоеЗначение = СтрЗаменить(НовоеЗначение,"  "," ");
	КонецЦикла;
	
	Возврат НовоеЗначение
	
КонецФункции

Функция СформироватьЗапросПоШапкеДокументов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РаботникиОрганизации.НомерСтроки) КАК Количество,
	|	РаботникиОрганизации.Ссылка
	|ПОМЕСТИТЬ ВТИтоги
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.РаботникиОрганизации КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Ссылка В(&ДокументСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка,
	|	Документы.Номер,
	|	Документы.Дата,
	|	Документы.Проведен,
	|	Документы.Организация,
	|	Документы.ОтчетныйПериод,
	|	ГОД(Документы.ОтчетныйПериод) КАК Год,
	|	Документы.ПринятоВПФР,
	|	Документы.Ответственный,
	|	ЗНАЧЕНИЕ(Перечисление.ФорматФайлаПФР.Версия07) КАК ФорматФайла,
	|	Документы.Организация.Наименование,
	|	Документы.Организация.ЮрФизЛицо,
	|	Документы.Организация.НаименованиеОКОПФ,
	|	Документы.Организация.НаименованиеПолное,
	|	Документы.Организация.НаименованиеСокращенное,
	|	Документы.Организация.РегистрационныйНомерПФР,
	|	Документы.Организация.ИНН,
	|	Документы.Организация.КПП,
	|	ВЫБОР
	|		КОГДА Документы.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Документы.Организация
	|		ИНАЧЕ Документы.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Документы.Организация.КодПоОКПО КАК ОКПО,
	|	ЕСТЬNULL(Итоги.Количество, 0) КАК Количество,
	|	Документы.ИмяФайла
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоги КАК Итоги
	|		ПО Документы.Ссылка = Итоги.Ссылка
	|ГДЕ
	|	Документы.Ссылка В(&ДокументСсылка)";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьЗапросПоРаботникам()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Ссылка КАК Ссылка,
	|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	РаботникиОрганизации.ИдентификаторСтроки,
	|	РаботникиОрганизации.СтраховойНомерПФР,
	|	РаботникиОрганизации.Фамилия,
	|	РаботникиОрганизации.Имя,
	|	РаботникиОрганизации.Отчество,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизации.Ссылка.Организация
	|		ИНАЧЕ РаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	РаботникиОрганизации.ТипДоговора,
	|	РаботникиОрганизации.ДополнительныйТариф
	|ПОМЕСТИТЬ ВТЗастрахованныеЛица
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.РаботникиОрганизации КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Ссылка В(&ДокументСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрг.Ссылка
	|ПОМЕСТИТЬ ВТЗарегистрированныеСотрудниками
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ТЧРаботникиОрг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ТЧРаботникиОрг.ФизЛицо = СотрудникиОрганизаций.Физлицо
	|			И ТЧРаботникиОрг.ГоловнаяОрганизация = СотрудникиОрганизаций.Организация
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК НомерПовторяющейсяСтроки,
	|	ПерваяТаблица.Ссылка КАК Ссылка,
	|	ПерваяТаблица.ФизЛицо,
	|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|	ПерваяТаблица.ИдентификаторСтроки,
	|	ПерваяТаблица.СтраховойНомерПФР,
	|	ПерваяТаблица.Фамилия,
	|	ПерваяТаблица.Имя,
	|	ПерваяТаблица.Отчество,
	|	ПерваяТаблица.ФизЛицо.Наименование,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеСотрудниками.НомерСтроки ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ПерваяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированныеСотрудниками КАК ЗарегистрированныеСотрудниками
	|		ПО ПерваяТаблица.НомерСтроки = ЗарегистрированныеСотрудниками.НомерСтроки
	|			И ПерваяТаблица.Ссылка = ЗарегистрированныеСотрудниками.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеЛица КАК ВтораяТаблица
	|		ПО ПерваяТаблица.ФизЛицо = ВтораяТаблица.ФизЛицо
	|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
	|			И ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
	|			И ПерваяТаблица.ТипДоговора = ВтораяТаблица.ТипДоговора
	|			И ПерваяТаблица.ДополнительныйТариф = ВтораяТаблица.ДополнительныйТариф
	|
	|СГРУППИРОВАТЬ ПО
	|	ПерваяТаблица.Ссылка,
	|	ПерваяТаблица.ФизЛицо,
	|	ПерваяТаблица.НомерСтроки,
	|	ПерваяТаблица.ИдентификаторСтроки,
	|	ПерваяТаблица.СтраховойНомерПФР,
	|	ПерваяТаблица.Фамилия,
	|	ПерваяТаблица.Имя,
	|	ПерваяТаблица.Отчество,
	|	ПерваяТаблица.ФизЛицо.Наименование,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеСотрудниками.НомерСтроки ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоШапкеДляПечати()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокДокументов", Ссылка);
	Запрос.УстановитьПараметр("Руководитель", Руководитель);
	Запрос.УстановитьПараметр("ДатаФИО", Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ФизическиеЛица.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|	КОНЕЦ КАК ФИОРуководителя
	|ПОМЕСТИТЬ ВТФИОРуководителя
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаФИО, ФизЛицо = &Руководитель) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Руководитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОЗаработкеСтаже.Ссылка КАК Ссылка,
	|	СведенияОЗаработкеСтаже.Организация,
	|	СведенияОЗаработкеСтаже.Организация.НаименованиеСокращенное КАК НаименованиеОрганизации,
	|	СведенияОЗаработкеСтаже.Организация.ЮрФизЛицо КАК ЮридическоеФизическоеЛицо,
	|	СведенияОЗаработкеСтаже.ОтчетныйПериод,
	|	СведенияОЗаработкеСтаже.ОкончаниеОтчетногоПериода,
	|	СведенияОЗаработкеСтаже.Руководитель КАК Руководитель,
	|	СведенияОЗаработкеСтаже.ДолжностьРуководителя.Наименование КАК ДолжностьРуководителя,
	|	СведенияОЗаработкеСтаже.Дата,
	|	СведенияОЗаработкеСтаже.Организация.КодПоОКПО КАК КодПоОКПО,
	|	СведенияОЗаработкеСтаже.Организация.ОГРН КАК ОГРН,
	|	СведенияОЗаработкеСтаже.Организация.НаименованиеПолное КАК НаименованиеПолное,
	|	СведенияОЗаработкеСтаже.Организация.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	СведенияОЗаработкеСтаже.Организация.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	СведенияОЗаработкеСтаже.Организация.КПП КАК КПП,
	|	СведенияОЗаработкеСтаже.Организация.ИНН КАК ИНН,
	|	СведенияОЗаработкеСтаже.ИмяФайла КАК ИмяФайлаДляПФР
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ КАК СведенияОЗаработкеСтаже
	|ГДЕ
	|	СведенияОЗаработкеСтаже.Ссылка В(&СписокДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Руководитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	ДанныеДокументов.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ДанныеДокументов.ЮридическоеФизическоеЛицо,
	|	ДанныеДокументов.ИНН КАК ИНН,
	|	ДанныеДокументов.КПП КАК КПП,
	|	ДанныеДокументов.ОГРН КАК ОГРН,
	|	ДанныеДокументов.КодПоОКПО КАК ОКПО,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.НаименованиеПолное КАК НаименованиеПолное,
	|	ДанныеДокументов.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ДанныеДокументов.ОтчетныйПериод,
	|	ДанныеДокументов.ОкончаниеОтчетногоПериода,
	|	ЕСТЬNULL(ВТФИОПоследние.ФИОРуководителя, """") КАК Руководитель,
	|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.ИмяФайлаДляПФР
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОРуководителя КАК ВТФИОПоследние
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.ОтчетныйПериод УБЫВ,
	|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоСотрудникамДляПечати() 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.ФизЛицо КАК Сотрудник,
	|	Сотрудники.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	Сотрудники.Фамилия КАК Фамилия,
	|	Сотрудники.Имя КАК Имя,
	|	Сотрудники.Отчество КАК Отчество,
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ТипДоговора КАК ТипДоговора,
	|	Сотрудники.НомерДоговора КАК НомерДоговора,
	|	Сотрудники.ДатаДоговора КАК ДатаДоговора,
	|	Сотрудники.ДополнительныйТариф КАК ДополнительныйТариф,
	|	Сотрудники.ИдентификаторСтроки КАК ИдентификаторСтрокиСотрудника
	|ПОМЕСТИТЬ ВТСотрудникиДокумента
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.РаботникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.Ссылка.ОтчетныйПериод < ДАТАВРЕМЯ(2009, 1, 1)
	|			ТОГДА ЗаписиОСтаже.ОсобыеУсловияТруда.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОсобыеУсловияТруда.КодДляОтчетности2010
	|	КОНЕЦ КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.Ссылка.ОтчетныйПериод < ДАТАВРЕМЯ(2009, 1, 1)
	|			ТОГДА ЗаписиОСтаже.ОснованиеВыслугиЛет.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОснованиеВыслугиЛет.КодДляОтчетности2010
	|	КОНЕЦ КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	|	СотрудникиДокумента.НомерСтроки КАК НомерСтроки,
	|	СотрудникиДокумента.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,
	|	СотрудникиДокумента.Сотрудник КАК Сотрудник,
	|	СотрудникиДокумента.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	СотрудникиДокумента.Фамилия КАК Фамилия,
	|	СотрудникиДокумента.Имя КАК Имя,
	|	СотрудникиДокумента.Отчество КАК Отчество,
	|	СотрудникиДокумента.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.НомерОсновнойЗаписи ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаполненСтаж,
	|	ВЫБОР
	|		КОГДА СотрудникиДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипДоговораСЗВ63.Трудовой)
	|			ТОГДА 1
	|		КОГДА СотрудникиДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипДоговораСЗВ63.ГражданскоПравовой)
	|			ТОГДА 2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТипДоговора,
	|	СотрудникиДокумента.НомерДоговора КАК НомерДоговора,
	|	СотрудникиДокумента.ДатаДоговора КАК ДатаДоговора,
	|	СотрудникиДокумента.ДополнительныйТариф КАК ДополнительныйТариф
	|ИЗ
	|	ВТСотрудникиДокумента КАК СотрудникиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Ссылка = ЗаписиОСтаже.Ссылка
	|			И СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.ФизЛицо
	|			И СотрудникиДокумента.ИдентификаторСтрокиСотрудника = ЗаписиОСтаже.ИдентификаторСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникиДокумента.Ссылка.ОтчетныйПериод УБЫВ,
	|	Ссылка,
	|	НомерСтроки,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоЗаработкуДляПечати()
	
	ТаблицаКодовКатегорий = КодыКатегорий();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаКодовКатегорий", ТаблицаКодовКатегорий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаКодовКатегорий.Код КАК КодКатегории,
	|	ТаблицаКодовКатегорий.Категория КАК Категория
	|ПОМЕСТИТЬ ВТКодыКатегорий
	|ИЗ
	|	&ТаблицаКодовКатегорий КАК ТаблицаКодовКатегорий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ФизЛицо КАК Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.РаботникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	СведенияОЗаработке.КодМесяца КАК КодМесяца,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	Сотрудники.ИдентификаторСтроки КАК ИдентификаторСтрокиСотрудника,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.КодМесяца ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаработокЗаполнен,
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ЕСТЬNULL(СведенияОЗаработке.Заработок, 0) КАК Заработок,
	|	ЕСТЬNULL(СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины, 0) КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	ЕСТЬNULL(СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины, 0) КАК ПоДоговорамГПХДоПредельнойВеличины,
	|	ЕСТЬNULL(СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины, 0) КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	ЕСТЬNULL(СведенияОЗаработке.ПоДоговорамГПХСвышеПредельнойВеличины, 0) КАК ПоДоговорамГПХСвышеПредельнойВеличины,
	|	КодыКатегорий.КодКатегории КАК КодКатегории
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.СведенияОЗаработке КАК СведенияОЗаработке
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыКатегорий КАК КодыКатегорий
	|			ПО СведенияОЗаработке.КатегорияЗастрахованныхЛиц = КодыКатегорий.Категория
	|		ПО Сотрудники.Ссылка = СведенияОЗаработке.Ссылка
	|			И Сотрудники.Сотрудник = СведенияОЗаработке.ФизЛицо
	|			И Сотрудники.ИдентификаторСтроки = СведенияОЗаработке.ИдентификаторСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Ссылка.ОтчетныйПериод УБЫВ,
	|	Ссылка,
	|	НомерСтрокиСотрудник,
	|	СведенияОЗаработке.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати() Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ФизЛицо КАК Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.ИдентификаторСтроки КАК ИдентификаторСтрокиСотрудника
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.РаботникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	СведенияОЗаработке.КодМесяца КАК КодМесяца,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Опасный)
	|			ТОГДА ""О4""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный4)
	|			ТОГДА ""В3.4""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3)
	|			ТОГДА ""В3.3""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный2)
	|			ТОГДА ""В3.2""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный1)
	|			ТОГДА ""В3.1""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодКлассаУсловийТруда,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	Сотрудники.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.КодМесяца ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаработокЗаполнен,
	|	СведенияОЗаработке.КлассУсловийТруда КАК КлассУсловийТруда,
	|	СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.СведенияОЗаработкеНаВредныхИТяжелыхРаботах КАК СведенияОЗаработке
	|		ПО Сотрудники.Ссылка = СведенияОЗаработке.Ссылка
	|			И Сотрудники.Сотрудник = СведенияОЗаработке.ФизЛицо
	|			И Сотрудники.ИдентификаторСтрокиСотрудника = СведенияОЗаработке.ИдентификаторСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Ссылка.ОтчетныйПериод УБЫВ,
	|	Ссылка,
	|	НомерСтрокиСотрудник,
	|	СведенияОЗаработке.НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция ЗапросПоНачисленнымВзносам()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ФизЛицо КАК Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	Сотрудники.ИдентификаторСтроки КАК ИдентификаторСтрокиСотрудника,
	|	Сотрудники.СВпоТарифуНеПревышающие КАК СВпоТарифуНеПревышающие,
	|	Сотрудники.Страховая КАК Страховая,
	|	Сотрудники.Накопительная КАК Накопительная,
	|	Сотрудники.СВстрахователя КАК СВстрахователя,
	|	Сотрудники.СВизЗаработка КАК СВизЗаработка,
	|	Сотрудники.СВпоТарифу КАК СВпоТарифу,
	|	Сотрудники.СВпоДопТарифу КАК СВпоДопТарифу
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.РаботникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Ссылка.ОтчетныйПериод УБЫВ,
	|	НомерСтрокиСотрудник";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоСведениямОбУплаченныхВзносах()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ФизЛицо КАК Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	Сотрудники.ИдентификаторСтроки КАК ИдентификаторСтрокиСотрудника,
	|	Сотрудники.УплаченоСтраховая КАК УплаченоСтраховая,
	|	Сотрудники.УплаченоНакопительная КАК УплаченоНакопительная
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.РаботникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Ссылка.ОтчетныйПериод УБЫВ,
	|	НомерСтрокиСотрудник";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ВывестиОбласть(ВыводимаяОбласть, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы)
	
	ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыводимаяОбласть);
	Если ТекущийЛист.ПроверитьВывод(ВыводимыеОбласти) Тогда 
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	Иначе 
		ДокументРезультат.Вывести(ТекущийЛист);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ТекущийЛист = НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы);
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	КонецЕсли;	
	
КонецПроцедуры 

Функция НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы)
	
	ТекущийЛист = Новый ТабличныйДокумент;
	ТекущийЛист.ПолеСлева = 0;
	ТекущийЛист.ПолеСправа = 0;
	ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
	РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12);
	
	НомерСтраницы = НомерСтраницы + 1;
	НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 3);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьШапка, "НомСтр", 3);
	
	ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ИНН, ОбластьШапка, "ИНН", 12);
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьШапка, "КПП", 9);
	
	ТекущийЛист.Вывести(ОбластьШапка);
	ТекущийЛист.Вывести(ОбластьПустаяСтрока);
	
	Возврат ТекущийЛист;
	
КонецФункции

Процедура ОчиститьОбласть(ОбластьМакета)
	
	Для Счетчик = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		ОбластьМакета.Параметры[Счетчик] = ""
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбластьСтаж(ВыборкаЗаписейСтажа, ОбластьСтаж)
	
	ОбластьСтаж.Параметры.ДатаНачалаПериода = Формат(ВыборкаЗаписейСтажа.ДатаНачалаПериода, "ДФ=""дд.ММ.гггг""");
	ОбластьСтаж.Параметры.ДатаОкончанияПериода = Формат(ВыборкаЗаписейСтажа.ДатаОкончанияПериода, "ДФ=""дд.ММ.гггг""");
	
	ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ВыборкаЗаписейСтажа.ТерриториальныеУсловияКод;
	ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ВыборкаЗаписейСтажа.ОсобыеУсловияТрудаКод;
	ОбластьСтаж.Параметры.ОснованиеИсчисляемогоСтажаКод = ВыборкаЗаписейСтажа.ОснованиеИсчисляемогоСтажаКод;
	ОбластьСтаж.Параметры.ОснованиеВыслугиЛетКод = ВыборкаЗаписейСтажа.ОснованиеВыслугиЛетКод;
	ОбластьСтаж.Параметры.ДопИТС = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ВыборкаЗаписейСтажа);
	
	ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ВыборкаЗаписейСтажа, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
	
КонецПроцедуры

Процедура ЗаполнитьДвустрочнуюОбластьСтаж(ВыборкаЗаписейСтажа, ОбластьСтаж)
	
	ОбластьСтаж.Параметры.ДатаНачалаПериода = Формат(ВыборкаЗаписейСтажа.ДатаНачалаПериода, "ДФ=""дд.ММ.гггг""");
	ОбластьСтаж.Параметры.ДатаОкончанияПериода = Формат(ВыборкаЗаписейСтажа.ДатаОкончанияПериода, "ДФ=""дд.ММ.гггг""");
	
	ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ВыборкаЗаписейСтажа.ТерриториальныеУсловияКод;
	ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ВыборкаЗаписейСтажа.ОсобыеУсловияТрудаКод;
	ОбластьСтаж.Параметры.КодПозицииСпискаКод = ВыборкаЗаписейСтажа.КодПозицииСпискаКод;
	ОбластьСтаж.Параметры.ОснованиеИсчисляемогоСтажаКод = ВыборкаЗаписейСтажа.ОснованиеИсчисляемогоСтажаКод;
	ОбластьСтаж.Параметры.ОснованиеВыслугиЛетКод = ВыборкаЗаписейСтажа.ОснованиеВыслугиЛетКод;
	ОбластьСтаж.Параметры.ДопИТС = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ВыборкаЗаписейСтажа);
	ЗаписьТУ = Новый Структура("ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа");
	ЗаполнитьЗначенияСвойств(ЗаписьТУ, ВыборкаЗаписейСтажа);
	ЗаписьТУ.Вставить("Коэффициент", ВыборкаЗаписейСтажа.ТерриториальныеУсловияСтавка);
	ОбластьСтаж.Параметры.ДопТУ = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровТерриториальныхУсловий(ЗаписьТУ);
	
	ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ВыборкаЗаписейСтажа, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Проведен И ПринятоВПФР Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь);
	
	Если Отказ тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	ТекстФайла = СформироватьВыходнойФайл(Отказ);
	
	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл формы СЗВ-КОРР";
	Запись.Данные = ТекстФайла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
	
	Соответствие = Новый Соответствие;
	Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
		Соответствие.Вставить(СтрокаТЧ.ИдентификаторСтроки, Истина)
	КонецЦикла;
	
	
	ОтчетныйГод = Год(ОтчетныйПериод);
	ОкончаниеОтчетногоПериода = ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод);
	
	ВидимостьКолонок = ВидимостьКолонокТабличныхЧастей(ОтчетныйГод);
	
	Для Каждого Колонка Из ВидимостьКолонок["Взносы"] Цикл
		ВидимостьКолонок["РаботникиОрганизации"].Вставить(Колонка.Ключ, Колонка.Значение);
	КонецЦикла;
	ВидимостьКолонок.Удалить("Взносы");
	
	Для Каждого ТабличнаяЧастьДокумента Из ВидимостьКолонок Цикл
		ИменаКолонок = Новый Массив;
		Для Каждого Колонка Из ТабличнаяЧастьДокумента.Значение Цикл
			Если Колонка.Значение = Ложь Тогда
				ИменаКолонок.Добавить(Колонка.Ключ);
			КонецЕсли;
		КонецЦикла;
		ОчиститьЗначенияКолонок(ТабличнаяЧастьДокумента.Ключ, ИменаКолонок);
	КонецЦикла;
	
	Если Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуютсяРаботыСДосрочнойПенсией") 
		Или ОтчетныйГод < 2013 Тогда
		СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Очистить();
	КонецЕсли;
	
	Если ОтчетныйГод < 2002 Тогда
		НачисленныеУплаченныеВзносы.Очистить();
		УплаченныеВзносыРасшифровка.Очистить();
	КонецЕсли;

	ЗависимыеТЧ = Новый Массив;
	ЗависимыеТЧ.Добавить("СведенияОЗаработке");
	ЗависимыеТЧ.Добавить("СведенияОЗаработкеНаВредныхИТяжелыхРаботах");
	ЗависимыеТЧ.Добавить("ЗаписиОСтаже");
	
	Для Каждого ИмяТЧ Из ЗависимыеТЧ Цикл
		ТабличнаяЧасть = ЭтотОбъект[ИмяТЧ];
		ВсегоСтрок = ТабличнаяЧасть.Количество();
		Для Сч = 1 По ВсегоСтрок Цикл
			СтрокаТЧ = ТабличнаяЧасть[ВсегоСтрок - Сч];
			Если Соответствие[СтрокаТЧ.ИдентификаторСтроки] = Неопределено Тогда
				ТабличнаяЧасть.Удалить(СтрокаТЧ)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВыполнитьНумерациюЗаписейОСтаже(РежимЗаписи = РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры
 
Процедура ОбработкаУдаленияПроведения(Отказ)
		
	Отказ = ПринятоВПФР;
	
	Если Не Отказ Тогда
		Для Каждого Набор Из Движения Цикл
			Набор.Очистить();
			Набор.Записать();
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры

