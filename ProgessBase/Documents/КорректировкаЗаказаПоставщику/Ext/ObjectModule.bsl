//m.ionov@a-prof.ru 26/11/2013
//Добавили реквизит  Спецификация тип ДокументСсылка.УсловияПоставокПоДоговорам
//Вынесли его на форму списка и выбора
//Заполняется в ручную пользователем или при вводе на основании заказа поставщику
//Цены берутся из указанной спецификации, если она указана 

//---  m.ionov@a-prof.ru

Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчетаОрганизаций Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Для обеспечения работы глоб. процедур и функций.
Перем ВалютаДокумента Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Если НЕ ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		Сообщить("Не указан заказ поставщика");
		Возврат Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ЗаказПоставщику,
	|	ЗаказПоставщику.ВидОперации КАК ВидОперации,
	|	ЗаказПоставщику.Контрагент  КАК Контрагент,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	СуммаДокумента,
	|	ЗаказПоставщику.ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику КАК КорректировкаЗаказаПоставщику
	|
	|ГДЕ
	|	КорректировкаЗаказаПоставщику.Ссылка = &ТекущийДокумент";
	
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Если НЕ ЗначениеЗаполнено(Шапка.Организация) Тогда
		Сообщить("В документе основании не указана организация");
		Возврат Неопределено;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Шапка.Контрагент) Тогда
		Сообщить("В документе основании не указан контрагент");
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаЗаказаПоставщику_КорректировкаЗаказа";

	Макет = ПолучитьМакет("КорректировкаЗаказа");
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|НомерСтроки");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Корректировка заказа поставщику");
	ТабДокумент.Вывести(ОбластьМакета);
	Если ВыводитьКоды Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|КолонкаКодов");
		ТабДокумент.Присоединить(ОбластьМакета);
	КонецЕсли;
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|Данные");
	ТабДокумент.Присоединить(ОбластьМакета);
	
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЗаказПоставщику.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заказ");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	НазваниеДокумента = Шапка.ЗаказПоставщику.Метаданные().Представление();
	Если Шапка.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		НазваниеДокумента = НазваниеДокумента + " (на переработку)";
	КонецЕсли;
	ОбластьМакета.Параметры.ПредставлениеЗаказа = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка.ЗаказПоставщику, НазваниеДокумента);
	ТабДокумент.Вывести(ОбластьМакета);
	
	
	// Выводим табличную часть
	ИспользоватьОборудование = Шапка.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Оборудование;
	ИспользоватьМатериалы = Шапка.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка;
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		ТабЧасть.НомерСтроки,
	|		ТабЧасть.Номенклатура,
	|		ТабЧасть.Номенклатура.Артикул            КАК Артикул,
	|		ТабЧасть.Номенклатура.Код                КАК Код,
	|		ТабЧасть.Номенклатура.НаименованиеПолное КАК Товар,
	|		ТабЧасть.Количество,
	|		ТабЧасть.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		ТабЧасть.Цена,
	|		ТабЧасть.Сумма,
	|		ТабЧасть.СуммаНДС,
	|		ТабЧасть.ХарактеристикаНоменклатуры КАК Характеристика,
	|		NULL КАК Серия
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику.Товары КАК ТабЧасть
	|
	|ГДЕ
	|	ТабЧасть.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		2 КАК НомерТЧ,
	|		ТабЧасть.НомерСтроки,
	|		ТабЧасть.Номенклатура,
	|		ТабЧасть.Номенклатура.Артикул            КАК Артикул,
	|		ТабЧасть.Номенклатура.Код                КАК Код,
	|		" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|		ТабЧасть.Количество,
	|		ТабЧасть.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|		ТабЧасть.Цена,
	|		ТабЧасть.Сумма,
	|		ТабЧасть.СуммаНДС,
	|		NULL КАК Характеристика,
	|		NULL КАК Серия
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику.Услуги КАК ТабЧасть
	|
	|ГДЕ
	|	ТабЧасть.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|" + ?(ИспользоватьМатериалы, "
	|ВЫБРАТЬ
	|		4 КАК НомерТЧ,
	|		ТабЧасть.НомерСтроки,
	|		ТабЧасть.Номенклатура,
	|		ТабЧасть.Номенклатура.Артикул            КАК Артикул,
	|		ТабЧасть.Номенклатура.Код                КАК Код,
	|		ТабЧасть.Номенклатура.НаименованиеПолное КАК Товар,
	|		ТабЧасть.Количество,
	|		ТабЧасть.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		ТабЧасть.Цена,
	|		ТабЧасть.Сумма,
	|		0 КАК СуммаНДС,
	|		ТабЧасть.ХарактеристикаНоменклатуры КАК Характеристика,
	|		NULL КАК Серия
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику.Материалы КАК ТабЧасть
	|
	|ГДЕ
	|	ТабЧасть.Ссылка = &ТекущийДокумент","
	|ВЫБРАТЬ
	|		3 КАК НомерТЧ,
	|		ТабЧасть.НомерСтроки,
	|		ТабЧасть.Номенклатура,
	|		ТабЧасть.Номенклатура.Артикул            КАК Артикул,
	|		ТабЧасть.Номенклатура.Код                КАК Код,
	|		ТабЧасть.Номенклатура.НаименованиеПолное КАК Товар,
	|		ТабЧасть.Количество,
	|		ТабЧасть.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|		ТабЧасть.Цена,
	|		ТабЧасть.Сумма,
	|		0 КАК СуммаНДС,
	|		NULL КАК Характеристика,
	|		NULL КАК Серия
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику.ВозвратнаяТара КАК ТабЧасть
	|
	|ГДЕ
	|	ТабЧасть.Ссылка = &ТекущийДокумент") + "
	|
	|" + ?(ИспользоватьОборудование, "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		5 КАК НомерТЧ,
	|		ТабЧасть.НомерСтроки,
	|		ТабЧасть.Номенклатура,
	|		ТабЧасть.Номенклатура.Артикул            КАК Артикул,
	|		ТабЧасть.Номенклатура.Код                КАК Код,
	|		ТабЧасть.Номенклатура.НаименованиеПолное КАК Товар,
	|		ТабЧасть.Количество,
	|		ТабЧасть.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		ТабЧасть.Цена,
	|		ТабЧасть.Сумма,
	|		ТабЧасть.СуммаНДС,
	|		ТабЧасть.ХарактеристикаНоменклатуры КАК Характеристика,
	|		NULL КАК Серия
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику.Оборудование КАК ТабЧасть
	|
	|ГДЕ
	|	ТабЧасть.Ссылка = &ТекущийДокумент", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();
	
	Всего    = 0;
	ВсегоНДС = 0;
	ДобавленоПозиций = 0;
	ОтмененоПозиций  = 0;
	
	Для Сч = 1 По 4 Цикл
		ИтогоСумма = 0;
		ЕстьСтроки = Ложь;
		НомерПоПорядку = 0;
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если Сч = 1 И НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			// Материалы выведем отдельно
			Если Сч = 1 И ВыборкаСтрокТовары.Количество > 0 И ВыборкаСтрокТовары.НомерТЧ <> 4 Тогда
				ДобавленоПозиций = ДобавленоПозиций + 1;
			ИначеЕсли Сч = 2 И ВыборкаСтрокТовары.Количество < 0 И ВыборкаСтрокТовары.НомерТЧ <> 4 Тогда
				ОтмененоПозиций = ОтмененоПозиций + 1;
			ИначеЕсли Сч = 3 И ВыборкаСтрокТовары.Количество > 0 И ВыборкаСтрокТовары.НомерТЧ = 4 Тогда
				ДобавленоПозиций = ДобавленоПозиций + 1;
			ИначеЕсли Сч = 4 И ВыборкаСтрокТовары.Количество < 0 И ВыборкаСтрокТовары.НомерТЧ = 4 Тогда
				ОтмененоПозиций = ОтмененоПозиций + 1;
			Иначе
				Продолжить;
			КонецЕсли;
			
			НомерПоПорядку = НомерПоПорядку + 1;
			
			Если НЕ ЕстьСтроки Тогда
				Если Сч = 1 ИЛИ Сч = 3 Тогда
					ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВПлюс"+?(ВыборкаСтрокТовары.НомерТЧ = 4,"Материалы",""));
				Иначе
					ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВМинус"+?(ВыборкаСтрокТовары.НомерТЧ = 4,"Материалы",""));
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьСекции);
				
				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
				
				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);
				
				ЕстьСтроки = Истина;
			КонецЕсли;
			
			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			
			ОбластьНомера.Параметры.НомерСтроки = НомерПоПорядку;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ИтогоСумма = ИтогоСумма + ВыборкаСтрокТовары.Сумма;
			Всего      = Всего + ВыборкаСтрокТовары.Сумма;
			ВсегоНДС   = ВсегоНДС + ВыборкаСтрокТовары.СуммаНДС;
		КонецЦикла;
		
		Если ЕстьСтроки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ТабДокумент.Вывести(ОбластьМакета);
			Если ВыводитьКоды Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
				ТабДокумент.Присоединить(ОбластьМакета);
			КонецЕсли;
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
			ТабДокумент.Присоединить(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итого|НомерСтроки");
			ТабДокумент.Вывести(ОбластьМакета);
			Если ВыводитьКоды Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
				ТабДокумент.Присоединить(ОбластьМакета);
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итого|Данные");
			ОбластьМакета.Параметры.ТекстИтого = "По разделу:";
			ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(ИтогоСумма);
			ТабДокумент.Присоединить(ОбластьМакета);
			
		КонецЕсли;
		
		ВыборкаСтрокТовары.Сбросить();
	КонецЦикла; 
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ТабДокумент.Вывести(ОбластьИтого);
	Если ВыводитьКоды Тогда
		ОбластьИтого = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ТабДокумент.Присоединить(ОбластьИтого);
	КонецЕсли;
	ОбластьИтого = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьИтого.Параметры.ТекстИтого = "Итого по документу:";
	ОбластьИтого.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Всего);
	ТабДокумент.Присоединить(ОбластьИтого);

	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ТабДокумент.Вывести(ОбластьМакета);
		Если ВыводитьКоды Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ВсегоНДС);
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьМакета);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Всего+ ?(Шапка.СуммаВключаетНДС, 0, ВсегоНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Добавлено наименований " + ДобавленоПозиций + 
		", отменено " + ОтмененоПозиций + ", сумма изменения " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ЗаказПоставщикуВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = "Итоговая сумма изменения заказа: " + 
		ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ЗаказПоставщикуВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "КорректировкаЗаказа" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировкаЗаказа","Корректировка заказа поставщику");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполниение табличной части неполученными ТМЦ по заказу поставщику.
//
Процедура ЗаполнитьОборудованиеПоОстаткам(Сообщать = Истина) Экспорт
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Товар",   Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Договор", ЗаказПоставщику.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",  ЗаказПоставщику);
	Запрос.УстановитьПараметр("СтатусОборудование", Перечисления.СтатусыПартийТоваров.Оборудование);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура                         КАК Номенклатура,
	|	Остатки.Номенклатура.СтавкаНДС               КАК СтавкаНДС,
	|	Остатки.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков КАК Единица,
	|	Остатки.Цена,
	|	СУММА(Остатки.КоличествоОстаток)             КАК КоличествоОстатокПоЗаказу,
	|	МАКСИМУМ(Размещение.КоличествоОстаток)       КАК КоличествоПоРазмещению,
	|	Размещение.ЗаказПокупателя                   КАК ЗаказПокупателя
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор И ЗаказПоставщику = &Сделка	И СтатусПартии = &СтатусОборудование) КАК Остатки
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|    РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, ЗаказПоставщику = &Сделка И ТоварТара  = &Товар) КАК Размещение
	|ПО
	|    Размещение.Номенклатура = Остатки.Номенклатура
	|    И Размещение.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|
	|ГДЕ НЕ Остатки.Номенклатура.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|   Остатки.Цена,
	|	Остатки.ХарактеристикаНоменклатуры,
	|	Размещение.ЗаказПокупателя
	|ИТОГИ СУММА(КоличествоОстатокПоЗаказу) ПО Номенклатура, ХарактеристикаНоменклатуры";

	РезультатЗапроса = Запрос.Выполнить();
	Если Сообщать И РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет данных для заполнения.", СтатусСообщения.Важное);
		Возврат;
	Иначе
		Оборудование.Очистить();
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			КолвоОстПоЗаказу = ?(Выборка.КоличествоОстатокПоЗаказу = NULL, 0, Выборка.КоличествоОстатокПоЗаказу);
			Продолжить;
		КонецЕсли;

		Для Сч = 1 По 2 Цикл
			
			Если Сч = 1 Тогда
				Если Выборка.КоличествоПоРазмещению = NULL Тогда
					Продолжить;
				КонецЕсли;
				КолвоСпис = Мин(КолвоОстПоЗаказу, Выборка.КоличествоПоРазмещению);
			Иначе
				КолвоСпис = КолвоОстПоЗаказу;
			КонецЕсли;
			
			Если КолвоСпис <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КолвоОстПоЗаказу = КолвоОстПоЗаказу - КолвоСпис;
			
			СтрокаТабличнойЧасти = Оборудование.Добавить();

			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = -КолвоСпис;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.Единица;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.Цена,
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
											ЗаказПоставщику.СуммаВключаетНДС,
											УчитыватьНДС,
											СуммаВключаетНДС,
											УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти   (СтрокаТабличнойЧасти, Ссылка);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Ссылка);
			
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, Ссылка); 

			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьОборудованиеПоОстаткам()

// Заполняет табличную часть "Материалы" по остаткам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьМатериалыПоОстаткам(Сообщать = Истина) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр( "ДоговорКонтрагента", ЗаказПоставщику.ДоговорКонтрагента);
	Запрос.УстановитьПараметр( "ЗаказПокупателя"   , ЗаказПоставщику);
	Запрос.УстановитьПараметр( "ВПереработку"      , Перечисления.СтатусыПартийТоваров.ВПереработку);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура                                     КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК Единица,
	|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ЗаказыПокупателейОстатки.Цена,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток                                КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента 
	|                                               И ЗаказПокупателя = &ЗаказПокупателя
	|                                               И СтатусПартии = &ВПереработку) КАК ЗаказыПокупателейОстатки
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Сообщать И РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет данных для заполнения.", СтатусСообщения.Важное);
		Возврат;
	Иначе
		Материалы.Очистить();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = Материалы.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.Единица;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.Количество                 = - Выборка.КоличествоОстаток;
		СтрокаТабличнойЧасти.КоличествоМест             = - Выборка.КоличествоОстаток;
		СтрокаТабличнойЧасти.Цена			            = Выборка.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьМатериалыПоОстаткам()

// Процедура заполняет материалы по спецификациям.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если Материалы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		Материалы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьМатериалы = Материалы.Выгрузить();
	ТабличнаяЧастьПродукция = Товары.Выгрузить();
	
	СтруктураДопКолонок = Новый Структура();
	Отбор = Новый Структура();

	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата);

	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент", "Количество");
	
	Материалы.Загрузить(ТабличнаяЧастьМатериалы);
	
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ЗаказПоставщику.ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
		
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Ложь);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

#Если Клиент Тогда
	
// Процедура копирует таб.часть Товары из заказа в документ
//
// Параметры:
//  Нет.
//
Процедура СкопироватьТовары() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения,
	|	ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест,
	|	ЗаказПоставщикуТовары.Количество,
	|	ЗаказПоставщикуТовары.КоличествоМест,
	|	ЗаказПоставщикуТовары.Коэффициент,
	|	ЗаказПоставщикуТовары.Номенклатура,
	|	ЗаказПоставщикуТовары.Заказ КАК ЗаказПокупателя,
	|	ЗаказПоставщикуТовары.СтавкаНДС,
	|	ЗаказПоставщикуТовары.Сумма,
	|	ЗаказПоставщикуТовары.СуммаНДС,
	|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры,
	|	ЗаказПоставщикуТовары.Цена,
	|	ЗаказПоставщикуТовары.Ссылка.ВалютаДокумента	  КАК ВалютаДокумента,
	|	ВЫБОР КОГДА ЗаказПоставщикуТовары.Ссылка.ВалютаДокумента = ЗаказПоставщикуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПоставщикуТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                             КАК КурсДокумента,
	|	ВЫБОР КОГДА ЗаказПоставщикуТовары.Ссылка.ВалютаДокумента = ЗаказПоставщикуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПоставщикуТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                             КАК КратностьДокумента,
	|	ЗаказПоставщикуТовары.Ссылка.СуммаВключаетНДС	  КАК СуммаВключаетНДС,
	|	ЗаказПоставщикуТовары.Ссылка.УчитыватьНДС		  КАК УчитыватьНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка.Ссылка = &ЗаказПоставщику
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщикуТовары.НомерСтроки";

	КратностьДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ЗаказПоставщику.ВалютаДокумента,Дата).Кратность;
	Выборка = Запрос.Выполнить().Выбрать();

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.КоличествоМест             = -Выборка.КоличествоМест;
		НоваяСтрока.Количество                 = -Выборка.Количество;
		НоваяСтрока.Заказ			           = Выборка.ЗаказПокупателя;
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(-Выборка.Сумма,
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
										Выборка.СуммаВключаетНДС,
										УчитыватьНДС,
										СуммаВключаетНДС,
										УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
	КонецЦикла;

	ОбработкаТабличныхЧастей.ЗаполнитьПлановуюСебестоимостьНаОсновании(ЭтотОбъект, ЗаказПоставщику, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // СкопироватьТовары()

// Процедура копирует таб.часть ВозвратнаяТара из заказа в документ
//
// Параметры:
//  Нет.
//
Процедура СкопироватьВозвратнуюТару() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуВозвратнаяТара.Количество,
	|	ЗаказПоставщикуВозвратнаяТара.Номенклатура,
	|	ЗаказПоставщикуВозвратнаяТара.Заказ КАК ЗаказПокупателя,
	|	ЗаказПоставщикуВозвратнаяТара.Сумма,
	|	ЗаказПоставщикуВозвратнаяТара.Цена,
	|	ЗаказПоставщикуВозвратнаяТара.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА ЗаказПоставщикуВозвратнаяТара.Ссылка.ВалютаДокумента = ЗаказПоставщикуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПоставщикуВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                                   КАК КурсДокумента,
	|	ВЫБОР КОГДА ЗаказПоставщикуВозвратнаяТара.Ссылка.ВалютаДокумента = ЗаказПоставщикуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПоставщикуВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                                   КАК КратностьДокумента
	|ИЗ
	|	Документ.ЗаказПоставщику.ВозвратнаяТара КАК ЗаказПоставщикуВозвратнаяТара
	|
	|ГДЕ
	|	ЗаказПоставщикуВозвратнаяТара.Ссылка.Ссылка = &ЗаказПоставщику
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщикуВозвратнаяТара.НомерСтроки";
	
	КратностьДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ЗаказПоставщику.ВалютаДокумента,Дата).Кратность;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КратностьИзВыборки = МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаДокумента,ЗаказПоставщику.Дата).Кратность;

		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура    = Выборка.Номенклатура;
		НоваяСтрока.Количество      = -1 * Выборка.Количество;
		НоваяСтрока.Заказ			= Выборка.ЗаказПокупателя;
		НоваяСтрока.Цена            = Выборка.Цена;
		НоваяСтрока.Сумма           = -1 * Выборка.Сумма;
	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

// Процедура копирует таб.часть Услуги из заказа в документ
//
// Параметры:
//  Нет.
//
Процедура СкопироватьУслуги() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуУслуги.Количество,
	|	ЗаказПоставщикуУслуги.Номенклатура,
	|	ЗаказПоставщикуУслуги.СтавкаНДС,
	|	ЗаказПоставщикуУслуги.Сумма,
	|	ЗаказПоставщикуУслуги.СуммаНДС,
	|	ЗаказПоставщикуУслуги.Цена,
	|	ЗаказПоставщикуУслуги.Ссылка.ВалютаДокумента	  КАК ВалютаДокумента,
	|	ВЫБОР КОГДА ЗаказПоставщикуУслуги.Ссылка.ВалютаДокумента = ЗаказПоставщикуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПоставщикуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                             КАК КурсДокумента,
	|	ВЫБОР КОГДА ЗаказПоставщикуУслуги.Ссылка.ВалютаДокумента = ЗаказПоставщикуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		ЗаказПоставщикуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                             КАК КратностьДокумента,
	|	ЗаказПоставщикуУслуги.Ссылка.СуммаВключаетНДС	  КАК СуммаВключаетНДС,
	|	ЗаказПоставщикуУслуги.Ссылка.УчитыватьНДС		  КАК УчитыватьНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.Услуги КАК ЗаказПоставщикуУслуги
	|
	|ГДЕ
	|	ЗаказПоставщикуУслуги.Ссылка.Ссылка = &ЗаказПоставщику И
	|	ЗаказПоставщикуУслуги.Номенклатура.Услуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщикуУслуги.НомерСтроки";

	КратностьДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ЗаказПоставщику.ВалютаДокумента,Дата).Кратность;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл
		
        НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = -Выборка.Количество;
		НоваяСтрока.СтавкаНДС    = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			-Выборка.Сумма,
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			Выборка.СуммаВключаетНДС,
			УчитыватьНДС,
			СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС( НоваяСтрока.СтавкаНДС));
			
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти ( НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти( НоваяСтрока, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьУслуги()

// Процедура копирует таб.часть Материалы из заказа в документ
//
// Параметры:
//  Нет.
//
Процедура СкопироватьМатериалы() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуМатериалы.ЕдиницаИзмерения,
	|	ЗаказПоставщикуМатериалы.Количество,
	|	ЗаказПоставщикуМатериалы.Коэффициент,
	|	ЗаказПоставщикуМатериалы.Номенклатура,
	|	ЗаказПоставщикуМатериалы.Сумма,
	|	ЗаказПоставщикуМатериалы.ХарактеристикаНоменклатуры,
	|	ЗаказПоставщикуМатериалы.Цена,
	|	ЗаказПоставщикуМатериалы.КоличествоМест
	|ИЗ
	|	Документ.ЗаказПоставщику.Материалы КАК ЗаказПоставщикуМатериалы
	|
	|ГДЕ
	|	ЗаказПоставщикуМатериалы.Ссылка.Ссылка = &ЗаказПоставщику
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщикуМатериалы.НомерСтроки";

	КратностьДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ЗаказПоставщику.ВалютаДокумента,Дата).Кратность;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл
		
        НоваяСтрока = Материалы.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент      = Выборка.Коэффициент;
		НоваяСтрока.Количество       = -Выборка.Количество;
		НоваяСтрока.КоличествоМест   = -Выборка.КоличествоМест;
		НоваяСтрока.Цена  = Выборка.Цена;
		НоваяСтрока.Сумма = -Выборка.Сумма;
		
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Материалы");
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьМатериалы()

// Процедура копирует таб.часть Оборудование из заказа в документ
//
// Параметры:
//  Нет.
//
Процедура СкопироватьОборудование() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщикуОборудование.ЕдиницаИзмерения,
	|	ЗаказПоставщикуОборудование.Количество,
	|	ЗаказПоставщикуОборудование.КоличествоМест,
	|	ЗаказПоставщикуОборудование.Коэффициент,
	|	ЗаказПоставщикуОборудование.Номенклатура,
	|	ЗаказПоставщикуОборудование.СтавкаНДС,
	|	ЗаказПоставщикуОборудование.Сумма,
	|	ЗаказПоставщикуОборудование.СуммаНДС,
	|	ЗаказПоставщикуОборудование.ХарактеристикаНоменклатуры,
	|	ЗаказПоставщикуОборудование.Цена,
	|	ЗаказПоставщикуОборудование.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПоставщикуОборудование.Ссылка.УчитыватьНДС КАК УчитыватьНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.Оборудование КАК ЗаказПоставщикуОборудование
	|
	|ГДЕ
	|	ЗаказПоставщикуОборудование.Ссылка.Ссылка = &ЗаказПоставщику
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщикуОборудование.НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл
		
        НоваяСтрока = Оборудование.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент      = Выборка.Коэффициент;
		НоваяСтрока.Количество       = -Выборка.Количество;
		НоваяСтрока.КоличествоМест   = -Выборка.КоличествоМест;
		НоваяСтрока.СтавкаНДС        = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			-Выборка.Сумма,
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			Выборка.СуммаВключаетНДС,
			УчитыватьНДС,
			СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС( НоваяСтрока.СтавкаНДС));
			
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти ( НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Оборудование");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти( НоваяСтрока, ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры // СкопироватьОборудование()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии(ИмяТЧ = "Товары") 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Если ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ПокупкаКомиссия Тогда

		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 

	ИначеЕсли ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда

		Статус = Перечисления.СтатусыПартийТоваров.ВПереработку; 
		
	ИначеЕсли ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Оборудование Тогда

		Если ИмяТЧ = "Оборудование" Тогда
			Статус = Перечисления.СтатусыПартийТоваров.Оборудование; 
		Иначе
			Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
		КонецЕсли;
		
	Иначе    

		Сообщить("По виду операции """ +
		ЗаказПоставщику.ВидОперации + """ не удалось определить статус партии товаров!", СтатусСообщения.Важное); 
	КонецЕсли; 

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);


		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС" .
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);


		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
    ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));



	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов
		
		СтрокаТаблицы.СуммаУпр    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);


		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);



		СтрокаТаблицы.НДС = 0;

	КонецЦикла;

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ЗаказПоставщику");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
     Если ЗначениеЗаполнено(ЗаказПоставщику) И НЕ ЗаказПоставщику.Проведен Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нельзя корректировать непроведенный документ!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок, ИмяТЧ)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	Если ИмяТЧ = "Товары" Тогда
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	КонецЕсли;

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТЧ, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТЧ, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТЧ, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, ИмяТЧ, ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Функция удаляет из исходной таблицы строки не требующие размещения
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам)

	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
		
	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // СоздатьТаблицуРазмещенияЗаказов()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаОборудование,
	                          Отказ, Заголовок);

	// Движения по документу.
	Если Не Отказ Тогда
        Если СуммаДокумента <> 0 Тогда
			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента = ЗаказПоставщику.ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		  = ЗаказПоставщику.Контрагент;
			СтрокаДвижений.Организация  	  = ЗаказПоставщику.Организация;

			СтрокаДвижений.Сделка                = ЗаказПоставщику; 
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;
		КонецЕсли;
		
		// Контроль лимитов возвратной тары
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			УправлениеЗапасами.КонтрольЛимитовВозвратнойТарыПоставщика(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
			
		НаборДвижений = Движения.ЗаказыПоставщикам;
		НаборДвижений.КонтрольОстатков(ЭтотОбъект,"Товары",СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		НаборДвижений.КонтрольОстатков(ЭтотОбъект,"ВозвратнаяТара",СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		НаборДвижений.КонтрольОстатков(ЭтотОбъект,"Услуги",СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		НаборДвижений.КонтрольОстатков(ЭтотОбъект,"Оборудование",СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			
		// ТОВАРЫ, УСЛУГИ, ТАРА И ОБОРУДОВАНИЕ ПО РЕГИСТРУ ЗаказыПоставщикам.
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам",    ТаблицаПоУслугам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",       ТаблицаПоТаре);
		СтруктТаблицДокумента.Вставить("ТаблицаОборудование", ТаблицаОборудование);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику",    ЗаказПоставщику);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ЗаказПоставщику.ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартии(),                         "ТаблицаПоТоварам, ТаблицаПоУслугам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартии("Оборудование"),           "ТаблицаОборудование");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");

		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
		// ТОВАРЫ И ТАРА ПО РЕГИСТРУ РазмещениеЗаказовПокупателей.
		ТаблицаПоТоварамРазмещение = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам);
		ТаблицаПоТареРазмещение    = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТаре);
		Если ТаблицаПоТоварамРазмещение.Количество() > 0 ИЛИ ТаблицаПоТареРазмещение.Количество() > 0 Тогда 
			
			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			
			Если НЕ Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("Товары", ТаблицаПоТоварамРазмещение);
				СтруктТаблицДокумента.Вставить("Тара",   ТаблицаПоТареРазмещение);
						
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", ЗаказПоставщику);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Товар, "Товары");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Тара,  "Тара");

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирования движений по регистрам в случае заказа на переработку
// 
Процедура ДвиженияПоРегистрамПереработка(СтруктураШапкиДокумента)
	
	НаборДвиженийПокуп = Движения.ЗаказыПокупателей;
	ТаблицаДвиженийПокуп = НаборДвиженийПокуп.Выгрузить();
	
	Для Каждого Строка Из Материалы Цикл

		// Измерения
		НоваяСтрока = ТаблицаДвиженийПокуп.Добавить();
		НоваяСтрока.ДоговорКонтрагента      = ЗаказПоставщику.ДоговорКонтрагента;
		НоваяСтрока.ЗаказПокупателя            = ЗаказПоставщику;
		НоваяСтрока.Номенклатура               = Строка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения           = Строка.ЕдиницаИзмерения;
		НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
		НоваяСтрока.СтатусПартии               = Перечисления.СтатусыПартийТоваров.ВПереработку;
		НоваяСтрока.Цена                       = Строка.Цена;

		// Ресурсы
		НоваяСтрока.Количество = Строка.Количество;
		НоваяСтрока.СуммаВзаиморасчетов = Строка.Сумма;
		НоваяСтрока.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;
	
	НаборДвиженийПокуп.мПериод = Дата;
	НаборДвиженийПокуп.мТаблицаДвижений = ТаблицаДвиженийПокуп;
	НаборДвиженийПокуп.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияПоРегистрамПереработка()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ЗаказПоставщику = Основание; 
		
		УЗ_Спецификация = Основание.УЗ_Спецификация; //m.ionov@a-prof.ru 26/11/2013

		СтруктурнаяЕдиница      = Основание.СтруктурнаяЕдиница;
		КурсВзаиморасчетов      = Основание.КурсВзаиморасчетов;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;

		Если Основание.Проведен Тогда

			// Заполним табличные части неотгруженными товарами по заказу поставщику.
			ПараметрыОстатков = Новый Структура;
			ПараметрыОстатков.Вставить( "ТоварТара",    Перечисления.ТоварТара.Товар);
			Если Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
				ПараметрыОстатков.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВПереработку);
			Иначе	
				ПараметрыОстатков.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
			КонецЕсли;
			
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить( "УчитыватьНДС",     Основание.УчитыватьНДС);
			ДопПараметры.Вставить( "СуммаВключаетНДС", Основание.СуммаВключаетНДС);
			ДопПараметры.Вставить( "ЗнакКоличества",   -1);
			
			УправлениеЗаказами.ЗаполнитьТабЧастьТоварыПоЗаказуПоставщику( Основание, Товары,         УправлениеЗаказами.ОстаткиТоваровПоЗаказуПоставщику( Основание, Основание.ДоговорКонтрагента, Дата, ПараметрыОстатков), ДопПараметры);
			Если Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
				УправлениеЗаказами.ЗаполнитьТабЧастьУслугиПоЗаказу          ( Основание, Услуги, Основание, УправлениеЗаказами.ОстаткиУслугПоЗаказуПоставщику  ( Основание, Основание.ДоговорКонтрагента, Дата, Перечисления.СтатусыПартийТоваров.ВПереработку), ДопПараметры);
                ЗаполнитьМатериалыПоОстаткам();

				//заполним спецификацию
				Для каждого СтрокаТабличнойЧасти из Товары Цикл
					СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата);
				КонецЦикла;
            Иначе
				ОбработкаТабличныхЧастей.ЗаполнитьПлановуюСебестоимостьНаОсновании(ЭтотОбъект, ЗаказПоставщику, мВалютаРегламентированногоУчета);
				
				ПараметрыОстатков.Вставить( "ТоварТара",    Перечисления.ТоварТара.Тара);
				ПараметрыОстатков.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
				
				ДопПараметры     .Вставить( "ФлагЭтоТара",  Истина);
				
				УправлениеЗаказами.ЗаполнитьТабЧастьТоварыПоЗаказуПоставщику( Основание, ВозвратнаяТара, УправлениеЗаказами.ОстаткиТоваровПоЗаказуПоставщику( Основание, Основание.ДоговорКонтрагента, Дата, ПараметрыОстатков), ДопПараметры);
				
				УправлениеЗаказами.ЗаполнитьТабЧастьУслугиПоЗаказу          ( Основание, Услуги, Основание, УправлениеЗаказами.ОстаткиУслугПоЗаказуПоставщику  ( Основание, Основание.ДоговорКонтрагента, Дата), ДопПараметры);
				Если Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Оборудование Тогда
					УправлениеЗаказами.ЗаполнитьТабЧастьОборудованиеПоЗаказуПоставщику(Основание, Оборудование, УправлениеЗаказами.ОстаткиОборудованияПоЗаказуПоставщику  ( Основание, Основание.ДоговорКонтрагента, Дата), ДопПараметры);
				КонецЕсли;

			КонецЕсли;	
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
    
	Контрагент 		= ЗаказПоставщику.Контрагент;
	Организация 	= ЗаказПоставщику.Организация;
	Подразделение 	= ЗаказПоставщику.Подразделение;
	
	// Если договор с комитентом, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ЗаказПоставщику.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Услуги.Очистить();

	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Оборудование);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Материалы);
	
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Оборудование);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	СуммаДокумента = СуммаДокумента - УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Материалы");
	
	// Посчитать итоговую сумму плановой себестоимости документа и записать ее в соответствующий реквизит шапки
	ИтогПлановаяСебестоимость = Ценообразование.ИтогПлановаяСебестоимость(ЭтотОбъект);

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЗаказПоставщику);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",            "ВалютаУправленческогоУчета",     "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",            "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов",          "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов",           "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация",                    "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Ссылка",                         "ДоговорКонтрагента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                "ВидСклада",                      "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЗаказПоставщику, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "Заказ");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	//Бирюков добавил ДатуПоставки
	//{24.11.2014 Островерхий заявка №б/н 
	//СтруктураПолей.Вставить("ДатаПоставки"				, "ДатаПоставки"); 
	//24.11.2014 Островерхий}
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	РезультатЗапросаПоТоварам      = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
//Бирюков добавления записываем не меняя и не контролируя, уменьшения - контроль на остаток
	ТаблицаКорректировки = РезультатЗапросаПоТоварам.Выгрузить();
	
	Для Каждого Строка ИЗ ТаблицаКорректировки Цикл 
		Количество = Строка.Количество;
		Если Количество < 0 Тогда
			Запрос = Новый Запрос;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Количество,
			|	ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток,
			|	ЗаказыПоставщикамОстатки.СуммаУпрОстаток
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
			|			,
			|			ЗаказПоставщику = &Заказ
			|				И Номенклатура = &Номенклатура
			//{24.11.2014 Островерхий заявка №б/н 
			|				И УдалитьДатаПоставки = &УдалитьДатаПоставки 
			//24.11.2014 Островерхий} 
			|) КАК ЗаказыПоставщикамОстатки
			|ГДЕ
			|	ЗаказыПоставщикамОстатки.КоличествоОстаток <> 0
			|	ИЛИ ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток <> 0
			|	ИЛИ ЗаказыПоставщикамОстатки.СуммаУпрОстаток <> 0";
		   
			// Установим параметры запроса.
			Запрос.УстановитьПараметр("Заказ" , ЗаказПоставщику.Ссылка);
			Запрос.УстановитьПараметр("Номенклатура" , Строка.Номенклатура);
			//{24.11.2014 Островерхий заявка №б/н
			Запрос.УстановитьПараметр("УдалитьДатаПоставки" , Строка.ДатаПоставки);
			//24.11.2014 Островерхий}
			
		    Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				Отказ = Истина;
				//{24.11.2014 Островерхий заявка №б/н 
				Сообщить("Корректировка невозможна для такого набора значений: Номенклатура [" +СокрЛП(Строка.Номенклатура.Наименование)+ "], дата поставки [" +Строка.УдалитьДатаПоставки+ "] нет остатка по заказу [" +ЗаказПоставщику+ "]!"); 
				//Сообщить("Корректировка невозможна для такого набора значений: Номенклатура [" +СокрЛП(Строка.Номенклатура.Наименование)+ "] нет остатка по заказу [" +ЗаказПоставщику+ "]!");
				//24.11.2014 Островерхий} 
				
				Возврат;
			КонецЕсли;
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Если Выборка.Количество < -Количество Тогда
				Отказ = Истина;
				//{24.11.2014 Островерхий заявка №б/н
				Сообщить("Корректировка невозможна для такого набора значений: Номенклатура [" +СокрЛП(Строка.Номенклатура.Наименование)+ "], дата поставки [" +Строка.УдалитьДатаПоставки+ "] из необходимых [" +-Количество+ "] количество в остатке [" +Выборка.Количество+ "]!");
				//Сообщить("Корректировка невозможна для такого набора значений: Номенклатура [" +СокрЛП(Строка.Номенклатура.Наименование)+ "] из необходимых [" +-Количество+ "] количество в остатке [" +Выборка.Количество+ "]!");
				//24.11.2014 Островерхий}
				Возврат;
			КонецЕсли;
			Если Выборка.СуммаВзаиморасчетовОстаток < -Строка.Сумма Тогда
				Отказ = Истина;
				//{24.11.2014 Островерхий заявка №б/н 
				Сообщить("Корректировка невозможна для такого набора значений: Номенклатура [" +СокрЛП(Строка.Номенклатура.Наименование)+ "], дата поставки [" +Строка.УдалитьДатаПоставки+ "] из необходимых [" +-Строка.Сумма+ "] сумма в остатке [" +Выборка.СуммаВзаиморасчетовОстаток+ "]!"); 
				//Сообщить("Корректировка невозможна для такого набора значений: Номенклатура [" +СокрЛП(Строка.Номенклатура.Наименование)+ "] из необходимых [" +-Строка.Сумма+ "] сумма в остатке [" +Выборка.СуммаВзаиморасчетовОстаток+ "]!");
				//24.11.2014 Островерхий} 
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//{24.11.2014 Островерхий заявка №б/н 
	СтруктураПолей.Удалить("УдалитьДатаПоставки"); 
	//24.11.2014 Островерхий} 
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	СтруктураПолей.Удалить("ЗаказПокупателя");
	РезультатЗапросаПоОборудованию = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам    = ПодготовитьТаблицуТоваров( РезультатЗапросаПоТоварам,      СтруктураШапкиДокумента);
	ТаблицаОборудование = ПодготовитьТаблицуТоваров( РезультатЗапросаПоОборудованию, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "Заказ");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары", "Услуги", "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары        ( ТаблицаПоТоварам,    СтруктураШапкиДокумента, Отказ, Заголовок, "Товары");
	ПроверитьЗаполнениеТабличнойЧастиТовары        ( ТаблицаОборудование, СтруктураШапкиДокумента, Отказ, Заголовок, "Оборудование");
	ПроверитьЗаполнениеТабличнойЧастиУслуги        ( ТаблицаПоУслугам,    СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара( ТаблицаПоТаре,       СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, ТаблицаОборудование,
							Отказ, Заголовок);
		Если ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
			ДвиженияПоРегистрамПереработка(СтруктураШапкиДокумента);
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
ВалютаДокумента                   = ЗаказПоставщику.ВалютаДокумента;

