////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ОбработкаКомментариев;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати()

	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Ссылка",				Ссылка);
    Запрос.УстановитьПараметр("Адрес",				Перечисления.ТипыКонтактнойИнформации.Адрес);
    Запрос.УстановитьПараметр("АдресЮридический",	Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
    Запрос.УстановитьПараметр("ФизЛицо",			Сотрудник.ФизЛицо);
    Запрос.УстановитьПараметр("Дата",				Дата);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Номер,
	|	ДоговорНаВыполнениеРаботСФизЛицом.Дата,
	|	ДоговорНаВыполнениеРаботСФизЛицом.Организация.НаименованиеПолное КАК НазваниеОрганизации,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ХарактерОплаты КАК ЧастотаВыплат,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Наименование) КАК РаботникНаименование,
	|	ДоговорНаВыполнениеРаботСФизЛицом.СуммаЗаРаботу,
	|	ДоговорНаВыполнениеРаботСФизЛицом.ВалютаДокумента.НаименованиеПолное КАК ВалютаДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Наименование КАК ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан,
	|	КонтактнаяИнформация.Представление КАК АдресОрганизации,
	|	ЕСТЬNULL(ДоговорНаВыполнениеРаботСФизЛицом.Организация.ОсновнойБанковскийСчет.НомерСчета, ""__________________"") КАК НомерСчета,
	|	ЕСТЬNULL(ДоговорНаВыполнениеРаботСФизЛицом.Организация.ОсновнойБанковскийСчет.Банк.Наименование, ""______________________________________________________________________________________"") КАК Банк
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ДоговорНаВыполнениеРаботСФизЛицом.Организация = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = &Адрес)
	|			И (КонтактнаяИнформация.Вид = &АдресЮридический)
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Ссылка = &Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	Если ИмяМакета = "Договор" Тогда
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДоговорНаВыполнениеРаботСФизЛицом_Договор";
		
		// получаем макет
		Если Сотрудник.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский тогда
			Макет = ПолучитьМакет("ДоговорАвторскогоЗаказа");
		Иначе
			Макет = ПолучитьМакет(ИмяМакета);
		КонецЕсли;
		
		// получаем данные для печати
		Выборка = СформироватьЗапросДляПечати().Выбрать();
		Если Выборка.Следующий() Тогда
			Макет.Параметры.Заполнить(Выборка);
			Макет.Параметры.ДатаНачала    = Формат(Выборка.ДатаНачала, "ДФ=dd.MM.yyyy");
			Макет.Параметры.ДатаОкончания = Формат(Выборка.ДатаОкончания, "ДФ=dd.MM.yyyy");
			Макет.Параметры.ДокументДатаВыдачи = Формат(Выборка.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		Макет.Параметры.ЧастотаВыплат = Нрег(Макет.Параметры.ЧастотаВыплат);
		Макет.Параметры.НазваниеОрганизации = СокрЛП(Макет.Параметры.НазваниеОрганизации);
		
		ТабДокумент.Вывести(Макет);
		
	КонецЕсли;
	
	Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,"Договор "));
	
КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Договор","Договор");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	//  Организация
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан сотрудник, с которым заключается договор!", Отказ, Заголовок);
	Иначе 
		Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Указан сотрудник другой организации!"), Отказ, Заголовок);
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ОшибкаСотрудникНеДоговорник Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Указан сотрудник, не являющийся договорником!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский И ВидАвторскогоДоговора.Пустая() Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан вид авторского договора!", Отказ, Заголовок);
	КонецЕсли;	
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указано начисление!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоШапкеДокумента.ОшибкаКодаДоходаНДФЛ Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Указанный вид расчета имеет неподходящий код дохода по НДФЛ!", , Заголовок);
	КонецЕсли;
	
	// ХарактерОплаты
	Если НЕ ЗначениеЗаполнено(ХарактерОплаты) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан порядок оплаты!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаНачала
	Если Не ЗначениеЗаполнено(ДатаНачала) или НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указаны даты договора!", Отказ, Заголовок);
	ИначеЕсли ДатаНачала > ДатаОкончания Тогда	
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Неверно указаны даты договора!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДобавитьСтрокуВПлановыеНачисления(ВыборкаПоШапкеДокумента)
	
	Если ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.Ежемесячно Тогда
		Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
		Движение.Период	= ДатаНачала;
	ИначеЕсли ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.ОднократноВКонцеСрока Тогда
		Движение = Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить();
		Движение.Период	= Макс(НачалоМесяца(ДатаОкончания),ДатаНачала);
	Иначе
		Возврат
	КонецЕсли;
	
	// Измерения
	Движение.Сотрудник		= Сотрудник;
	Движение.Организация	= ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
	Движение.ДокументОснование = Ссылка;
	Движение.ВидРасчетаИзмерение = ВидРасчета;
	
	// Ресурсы
	Движение.ВидРасчета		= ВидРасчета;
	Движение.Действие		= Перечисления.ВидыДействияСНачислением.Начать;
	Движение.Показатель1	= СуммаЗаРаботу;
	Если Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте") Тогда
		Движение.Валюта1			= Константы.ВалютаРегламентированногоУчета.Получить();
	Иначе
		Движение.Валюта1			= ВалютаДокумента;
	КонецЕсли;
	// Реквизиты
	
	Движение.ПериодЗавершения 	= ДатаОкончания + 86400;
	Движение.ДействиеЗавершения	= Перечисления.ВидыДействияСНачислением.Прекратить;
	
КонецПроцедуры

Процедура ДвиженияРегистров(ВыборкаПоШапкеДокумента)
	
	ДобавитьСтрокуВПлановыеНачисления(ВыборкаПоШапкеДокумента);
	
	ДоговорНаВыполнениеРаботСФизЛицомПереопределяемый.ДобавитьСтрокуВРеглУчетПлановыхНачисленийРаботниковОрганизаций(ЭтотОбъект, ВыборкаПоШапкеДокумента);
	
КонецПроцедуры

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",	ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("парамСсылка",	Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Договор.Сотрудник.Организация = &парамГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА Договор.Сотрудник.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаСотрудникНеДоговорник,
	|	Договор.ВидРасчета.КодДоходаЕСН КАК КодДоходаЕСН,
	|	ВЫБОР
	|		КОГДА Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда)
	|			ТОГДА ВЫБОР
	|					КОГДА Договор.ВидРасчета.КодДоходаНДФЛ В (ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.КодДоходаПоУмолчанию), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2010))
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОГДА Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский)
	|				И Договор.ВидАвторскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАвторскогоДоговора.АвторскогоЗаказа)
	|			ТОГДА ВЫБОР
	|					КОГДА Договор.ВидРасчета.КодДоходаНДФЛ В (ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2201), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2202), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2203), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2204), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2205), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2206), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2207), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2208), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2209), ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2210))
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОГДА Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский)
	|				И Договор.ВидАвторскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАвторскогоДоговора.Лицензионный)
	|			ТОГДА ВЫБОР
	|					КОГДА Договор.ВидРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1300)
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОГДА Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский)
	|				И Договор.ВидАвторскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАвторскогоДоговора.ОбОтчужденииИсключительныхПрав)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаКодаДоходаНДФЛ
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Договор
	|ГДЕ
	|	Договор.Ссылка = &парамСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			ДвиженияРегистров(ВыборкаПоШапкеДокумента)
			
		КонецЕсли; 
	КонецЕсли;
		
	ОбработкаКомментариев.ПоказатьСообщения();
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);	
	Если ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, "Организация, ВидДоговора, ФизЛицо");
		
		Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			
			Организация = ""; ВидДоговора = ""; ФизЛицо = "";
			
			Возврат
		Иначе
			
			Сотрудник = Основание;
			
			Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
				ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ДоговорПодряда;
			ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
				ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.АвторскийДоговор;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

