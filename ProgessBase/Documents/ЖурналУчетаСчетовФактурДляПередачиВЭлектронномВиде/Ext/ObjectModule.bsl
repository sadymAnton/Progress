Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует сведения необходимые для сохранения и передачи файла (файлов) электронного
// представления документа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - сведения электронного представления документа, включающие в себя
//                    имя файла(файлов), текст(тексты) и кодировку представления.
//
Функция ЭлектронноеПредставление() Экспорт
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления();
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаполнитьДанными(ЗаписьXML, ОсновныеСведения);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Текст = ЗаписьXML.Закрыть();
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ПометкаУдаления ИЛИ ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода",НачалоКвартала(НалоговыйПериод));
	Запрос.УстановитьПараметр("КонецНалоговогоПериода",КонецКвартала(НалоговыйПериод));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка
	|ИЗ
	|	Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка <> &Ссылка
	|	И Таблица.Организация = &Организация
	|	И Таблица.НалоговыйПериод >= &НачалоНалоговогоПериода
	|	И Таблица.НалоговыйПериод <= &КонецНалоговогоПериода
	|	И НЕ Таблица.ПометкаУдаления";

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		НалоговыйПериодПредставление = ПредставлениеПериода(НачалоКвартала(НалоговыйПериод), КонецКвартала(НалоговыйПериод), "ФП = Истина" );
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Уже имеется оформленный журнал учета счетов фактур за %1",НалоговыйПериодПредставление);
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение);
		Отказ = Истина;		
	КонецЕсли;	
	
	ПериодСоставления = НалоговыйПериод;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

Процедура ЗаполнитьДокумент() Экспорт
	
	Если УчетНДС.ВерсияПостановленияНДС1137(НалоговыйПериод) = 3 Тогда 
		ВызватьИсключение НСтр("ru = 'Начиная с 4 квартала 2014 г. возможность заполнения, печати и выгрузки документа отсутствует (до утверждения формата выгрузки ФНС)'");
	КонецЕсли;
	
	Если ВыставленныеСчетаФактуры.Количество() > 0 Тогда
		ВыставленныеСчетаФактуры.Очистить();
	КонецЕсли;
	
	Если ПолученныеСчетаФактуры.Количество() > 0 Тогда
		ПолученныеСчетаФактуры.Очистить();
	КонецЕсли;
	
	СведенияОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, КонецКвартала(Дата));
	НаименованиеОрганизацииДляПечатныхФорм = ОписаниеОрганизации(СведенияОрганизации, "ПолноеНаименование,");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("НалоговыйПериод", НалоговыйПериод);
	СтруктураПараметров.Вставить("НаименованиеОрганизацииДляПечатныхФорм", НаименованиеОрганизацииДляПечатныхФорм);
	
	СтруктураЗаписейЖурнала = УчетНДС.ПолучитьЗаписиЖурналаСчетовФактур(СтруктураПараметров);
	
	НомерПП = 1;
	
	ВыборкаГруппировка = СтруктураЗаписейЖурнала.ВыставленныеСчетаФактуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГруппировка.Следующий() Цикл 

		ВыборкаЗаписи = ВыборкаГруппировка.Выбрать();
		Пока ВыборкаЗаписи.Следующий() Цикл
			НоваяСтрока	= ВыставленныеСчетаФактуры.Добавить();
			УчетНДС.ЗаполнитьСтрокуЖурналаУчетаСчетовФактур(НоваяСтрока, ВыборкаЗаписи, СтруктураПараметров);
			
			НоваяСтрока.Ном	= НомерПП;
			
			НомерПП = НомерПП + 1;
		КонецЦикла;

	КонецЦикла;
	
	НомерПП = 1;
	
	Выборка = СтруктураЗаписейЖурнала.ПолученныеСчетаФактуры.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока	= ПолученныеСчетаФактуры.Добавить();
		УчетНДС.ЗаполнитьСтрокуЖурналаУчетаСчетовФактур(НоваяСтрока, Выборка, СтруктураПараметров);
		
		НоваяСтрока.Ном	= НомерПП;
		
		НомерПП = НомерПП + 1;

	КонецЦикла;
	
КонецПроцедуры

Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ЖурналУчетаСчетовФактур" Тогда
		
		ТабДокумент = ПечатьЖурналаУчетаСчетовФактур();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры

Функция ПечатьЖурналаУчетаСчетовФактур()
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ВерсияПостановленияНДС1137 = УчетНДС.ВерсияПостановленияНДС1137(НалоговыйПериод);
	Если ВерсияПостановленияНДС1137 = 3 Тогда
		ВызватьИсключение НСтр("ru = 'Начиная с 4 квартала 2014 г. возможность заполнения, печати и выгрузки документа отсутствует (до утверждения формата выгрузки ФНС)'");
	Иначе
		Макет = ПолучитьОбщийМакет("ЖурналУчетаСчетовФактур1137");
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЖурналУчетаСчетовФактур";
	
	СведенияОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, КонецКвартала(Дата));
	НаименованиеОрганизацииДляПечатныхФорм = ОписаниеОрганизации(СведенияОрганизации, "ПолноеНаименование,");
	
	Отступ = Макет.ПолучитьОбласть("Отступ");
	
	// ШАПКА
	
	Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
	ТабличныйДокумент.Вывести(Секция);
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	СведенияОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, КонецКвартала(Дата));
	Шапка.Параметры.Организация = НаименованиеОрганизацииДляПечатныхФорм;
	Шапка.Параметры.ИННКПП = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	Шапка.Параметры.Квартал = Формат(НалоговыйПериод, "ДФ = к");
	Шапка.Параметры.Год = Формат(НалоговыйПериод, "ДФ = гггг");
	
	ТабличныйДокумент.Вывести(Шапка);
	
	ТабличныйДокумент.Вывести(Отступ);
	
	// ЧАСТЬ 1
	
	Часть1Заголовок = Макет.ПолучитьОбласть("Часть1Заголовок");
	ТабличныйДокумент.Вывести(Часть1Заголовок);
	
	Часть1Строка = Макет.ПолучитьОбласть("Часть1Строка");
	Для каждого СтрокаЖурнала Из ВыставленныеСчетаФактуры Цикл
		ЗаполнитьЗначенияСвойств(Часть1Строка.Параметры, СтрокаЖурнала);
		ТабличныйДокумент.Вывести(Часть1Строка);
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(Отступ);
	
	// ЧАСТЬ 2
	
	Часть2Заголовок = Макет.ПолучитьОбласть("Часть2Заголовок");
	ТабличныйДокумент.Вывести(Часть2Заголовок);
	
	Часть2Строка = Макет.ПолучитьОбласть("Часть2Строка");
	Для каждого СтрокаЖурнала Из ПолученныеСчетаФактуры Цикл
		ЗаполнитьЗначенияСвойств(Часть2Строка.Параметры, СтрокаЖурнала);
		ТабличныйДокумент.Вывести(Часть2Строка);
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(Отступ);
	
	// ПОДВАЛ
	
	Подвал = Макет.ПолучитьОбласть("Подвал");
	
	СписокПоказателей = Новый Массив;
	СписокПоказателей.Добавить("ФИОРук");
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), СписокПоказателей);
	СведенияОЮрФизЛице    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ТекущаяДата());
	СведенияОбОрганизации.Вставить("Свидетельство", ОписаниеОрганизации(СведенияОЮрФизЛице, "Свидетельство,"));
		
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	Подвал.Параметры.ИмяРук = ?(НЕ ЭтоПБОЮЛ, СведенияОбОрганизации.ФИОРук, "");
	Подвал.Параметры.ИмяОрг = ?(ЭтоПБОЮЛ, СведенияОбОрганизации.ФИОРук, "");
	Подвал.Параметры.Свидетельство = СведенияОбОрганизации.Свидетельство;

	ТабличныйДокумент.Вывести(Подвал);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецЕсли

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	Возврат Новый Структура("ЖурналУчетаСчетовФактур", "Журнал учета счетов-фактур");

КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления()
	
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ДатаФормированияФайла", ТекущаяДата());
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетность.СформироватьВерсПрог());
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ОсновныеСведения.Вставить("ЭтоЮЛ", НЕ ЭтоПБОЮЛ);
	ОсновныеСведения.Вставить("ЭтоИП", ЭтоПБОЮЛ);
	
	СведенияОбОрганизации = СведенияОбОрганизации();
	
	Если ЭтоПБОЮЛ Тогда
		ОсновныеСведения.Вставить("ИННФЛ", СведенияОбОрганизации.ИННЮЛ);
		СведенияОЮрФизЛице  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ТекущаяДата());
		СвидетельствоОРегистрации = ОписаниеОрганизации(СведенияОЮрФизЛице, "Свидетельство");
		ОсновныеСведения.Вставить("СвГосРегИП", СвидетельствоОРегистрации);
		
		СведенияОбИП = СведенияОбИП();
		ОсновныеСведения.Вставить("ФамилияИП",  СведенияОбИП.Фамилия);
		ОсновныеСведения.Вставить("ИмяИП",      СведенияОбИП.Имя);
		ОсновныеСведения.Вставить("ОтчествоИП", СведенияОбИП.Отчество);
	Иначе
		ОсновныеСведения.Вставить("НаимОрг", СведенияОбОрганизации.НаимЮЛПол);
		ОсновныеСведения.Вставить("ИННЮЛ", СведенияОбОрганизации.ИННЮЛ);
		ОсновныеСведения.Вставить("КПП", СведенияОбОрганизации.КППЮЛ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИФНС) Тогда
		ОсновныеСведения.Вставить("КодНО", ИФНС.Код);
	Иначе
		ОсновныеСведения.Вставить("КодНО", СведенияОбОрганизации.КодНО);
	КонецЕсли;
	
	ДобавитьСведенияОПодписанте(ОсновныеСведения);
	
	ОсновныеСведения.Вставить("Период", ПериодПоСКНП);
	
	ОтчетныйГод = Формат(НалоговыйПериод, "ДФ=yyyy");
	ОсновныеСведения.Вставить("ОтчГод", ОтчетныйГод);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
	
КонецФункции

Функция СведенияОбОрганизации()
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации, ФИО, ОКВЭД, ОКАТО";
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), СтрокаСведений);
	
	Возврат СведенияОбОрганизации;
	
КонецФункции

Процедура ДобавитьСведенияОПодписанте(ОсновныеСведения)
	
	Если ЗначениеЗаполнено(ИФНС) И ЗначениеЗаполнено(ИФНС.Представитель) Тогда
		Если ТипЗнч(ИФНС.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ФИОПодписанта = СведенияОФизЛице(ИФНС.Представитель);
			ОсновныеСведения.Вставить("ПрПодп", "2");
			ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
			ОсновныеСведения.Вставить("НаимДокПодп",  ИФНС.ДокументПредставителя);
			
		ИначеЕсли НЕ ПустаяСтрока(ИФНС.УполномоченноеЛицоПредставителя) Тогда
			ОсновныеСведения.Вставить("ПрПодп", "2");
			СоставляющиеФИО = СоставляющиеФИО(ИФНС.УполномоченноеЛицоПредставителя);
			ОсновныеСведения.Вставить("ПодпФамилия",  СоставляющиеФИО.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      СоставляющиеФИО.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", СоставляющиеФИО.Отчество);
			ОсновныеСведения.Вставить("НаимДокПодп",  ИФНС.ДокументПредставителя);
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОсновныеСведения.Свойство("ПрПодп") ИЛИ (ОсновныеСведения.Свойство("ПрПодп") И ОсновныеСведения.ПрПодп <> "2") Тогда
		Если ЗначениеЗаполнено(Подписант) Тогда
			ФИОПодписанта = СведенияОФизЛице(Подписант);
			ОсновныеСведения.Вставить("ПрПодп", "1");
			ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
			
		Иначе
			ФИОПодписанта = СведенияОРуководителе();
			ОсновныеСведения.Вставить("ПрПодп", "1");
			ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СведенияОРуководителе()
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Руководитель = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Дата, Данные);
	
	Если Руководитель <> Неопределено И Руководитель.Количество() > 0 Тогда
		ФЛ = Руководитель[0]["ФизическоеЛицо"];
		Если ЗначениеЗаполнено(ФЛ) Тогда
			ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо",ФЛ));
			Если ДанныеФЛ.Количество() > 0 Тогда
				Результат.Фамилия  = СокрЛП(ДанныеФЛ[0].Фамилия);
				Результат.Имя      = СокрЛП(ДанныеФЛ[0].Имя);
				Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СведенияОФизЛице(ФизЛицо)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");

	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", ФизЛицо));
		Если ДанныеФЛ.Количество() > 0 Тогда
			Результат.Фамилия  = СокрЛП(ДанныеФЛ[0].Фамилия);
			Результат.Имя      = СокрЛП(ДанныеФЛ[0].Имя);
			Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоставляющиеФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

Функция СведенияОбИП()
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ИндивидуальныйПредприниматель = Организация.ИндивидуальныйПредприниматель;
	Если ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
		ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", ИндивидуальныйПредприниматель));
		Если ДанныеФЛ.Количество() > 0 Тогда
			Результат.Фамилия = СокрЛП(ДанныеФЛ[0].Фамилия);
			Результат.Имя = СокрЛП(ДанныеФЛ[0].Имя);
			Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления(СведенияОтправки)
	
	Префикс = "1115104";
	Если СведенияОтправки.ЭтоПБОЮЛ Тогда
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННФЛ);
	Иначе
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННЮЛ) + СокрЛП(СведенияОтправки.КПП);
	КонецЕсли;
	ИдентификаторПолучателя = СведенияОтправки.КодНО;
	ИдентификационныйНомер1 = Строка(Новый УникальныйИдентификатор);
	ДатаФормированияФайла = Формат(СведенияОтправки.ДатаФормированияФайла, "ДФ=yyyyMMdd");
	ИдентификационныйНомер2 = Строка(Новый УникальныйИдентификатор);
	
	ИдентификаторФайла = Префикс
	                   + "_" + ИдентификаторОтправителя
	                   + "_" + ИдентификаторПолучателя
	                   + "_" + ИдентификационныйНомер1
	                   + "_" + ДатаФормированияФайла
	                   + "_" + ИдентификационныйНомер2;
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Процедура ЗаполнитьДанными(МодельВыгрузки, Параметры)
	
	ЗаписатьАтрибут(МодельВыгрузки, "ИдФайл", Параметры.ИдФайл, "Т, 200, , О");
	ЗаписатьАтрибут(МодельВыгрузки, "ВерсПрог", Параметры.ВерсПрог, "Т, 40, , Н");
	ЗаписатьАтрибут(МодельВыгрузки, "ВерсФорм", "5.01");
	
	МодельВыгрузки.ЗаписатьНачалоЭлемента("Документ");
		
		ЗаписатьАтрибут(МодельВыгрузки, "КНД", "1115104");
		ЗаписатьАтрибут(МодельВыгрузки, "Период", Параметры.Период, "Т, 2, , О");
		ЗаписатьАтрибут(МодельВыгрузки, "ОтчетГод", Параметры.ОтчГод, "Т, 4, , О");
		
		МодельВыгрузки.ЗаписатьНачалоЭлемента("СвНП");
			Если Параметры.ЭтоИП Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("СведИП");
					ЗаписатьАтрибут(МодельВыгрузки, "ИННФЛ", Параметры.ИННФЛ, "Т, 12, , О");
					ЗаписатьАтрибут(МодельВыгрузки, "СвГосРегИП", Параметры.СвГосРегИП, "Т, 100, , О");
					МодельВыгрузки.ЗаписатьНачалоЭлемента("ФИОИП");
						ЗаписатьАтрибут(МодельВыгрузки, "Фамилия", Параметры.ФамилияИП, "Т, 60, , О");
						ЗаписатьАтрибут(МодельВыгрузки, "Имя", Параметры.ИмяИП, "Т, 60, , О");
						ЗаписатьАтрибут(МодельВыгрузки, "Отчество", Параметры.ОтчествоИП, "Т, 60, , Н");
					МодельВыгрузки.ЗаписатьКонецЭлемента();
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			Иначе
				МодельВыгрузки.ЗаписатьНачалоЭлемента("СведЮЛ");
					ЗаписатьАтрибут(МодельВыгрузки, "НаимОрг", Параметры.НаимОрг, "Т, 1000, , О");
					ЗаписатьАтрибут(МодельВыгрузки, "ИННЮЛ", Параметры.ИННЮЛ, "Т, 10, , О");
					ЗаписатьАтрибут(МодельВыгрузки, "КПП", Параметры.КПП, "Т, 9, , О");
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
		МодельВыгрузки.ЗаписатьКонецЭлемента();
		
		ЗаполнитьДаннымиТабличнойЧастиВыставленныеСФ(МодельВыгрузки, Параметры);
		ЗаполнитьДаннымиТабличнойЧастиПолученныеСФ(МодельВыгрузки, Параметры);
		
		МодельВыгрузки.ЗаписатьНачалоЭлемента("Подписант");
			ЗаписатьАтрибут(МодельВыгрузки, "ПрПодп", Параметры.ПрПодп, "Т, 1, , О");
			
			МодельВыгрузки.ЗаписатьНачалоЭлемента("ФИО");
				ЗаписатьАтрибут(МодельВыгрузки, "Фамилия", Параметры.ПодпФамилия, "Т, 60, , О");
				ЗаписатьАтрибут(МодельВыгрузки, "Имя", Параметры.ПодпИмя, "Т, 60, , О");
				ЗаписатьАтрибут(МодельВыгрузки, "Отчество", Параметры.ПодпОтчество, "Т, 60, , Н");
			МодельВыгрузки.ЗаписатьКонецЭлемента();
			
			Если Параметры.Свойство("НаимДокПодп") Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("СвПред");
					ЗаписатьАтрибут(МодельВыгрузки, "НаимДок", Параметры.НаимДокПодп, "Т, 120, , О");
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
		МодельВыгрузки.ЗаписатьКонецЭлемента();
		
	МодельВыгрузки.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьПараметры(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ЗаполнитьПараметры(Параметры, Стр);
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ИмяПараметра = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если Параметры.Свойство(ИмяПараметра) Тогда
					ВывестиПоказательВXML(Стр, Параметры[ИмяПараметра]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиТабличнойЧастиВыставленныеСФ(МодельВыгрузки, Параметры)
	
	Для Каждого СтрокаТабличнойЧасти Из ВыставленныеСчетаФактуры Цикл
		МодельВыгрузки.ЗаписатьНачалоЭлемента("СвЧ1");
		
		ЗаписатьАтрибут(МодельВыгрузки, "НомПП", СтрокаТабличнойЧасти.Ном, "Ч, 6, 0, О");
		ЗаписатьАтрибут(МодельВыгрузки, "ДатаВыстСчФ", СтрокаТабличнойЧасти.ДатаПередачиПолучения, "Д, , , Н");
		ЗаписатьАтрибут(МодельВыгрузки, "КодСпосВыст", СтрокаТабличнойЧасти.КодСпособаВыставления, "Т, 1, , О");
		
		ЗаписатьАтрибут(МодельВыгрузки, "НомерСчФ", СтрокаТабличнойЧасти.НомерСчетаФактуры, "Т, 256, , О");
		ЗаписатьАтрибут(МодельВыгрузки, "ДатаСчФ", СтрокаТабличнойЧасти.ДатаСчетаФактуры, "Д, , , О");
		
		ЗаписатьАтрибут(МодельВыгрузки, "НомерКСчФ", СтрокаТабличнойЧасти.НомерКорректировочногоСчетаФактуры, "Т, 256, , Н");
		ЗаписатьАтрибут(МодельВыгрузки, "ДатаКСчФ", СтрокаТабличнойЧасти.ДатаКорректировочногоСчетаФактуры, "Д, , , Н");
		
		ЗаписатьАтрибут(МодельВыгрузки, "НомИспрСчФ", СтрокаТабличнойЧасти.НомерИсправления, "Т, 3, , Н");
		ЗаписатьАтрибут(МодельВыгрузки, "ДатаИспрСчФ", СтрокаТабличнойЧасти.ДатаИсправления, "Д, , , Н");
		
		ЗаписатьАтрибут(МодельВыгрузки, "НаимПок", СтрокаТабличнойЧасти.КонтрагентНаименование, "Т, 1000, , О");
		РеквизитыПокупателя = РасщепленнаяСтрока(СтрокаТабличнойЧасти.КонтрагентИННКПП, "/");
		ИНН = СокрЛП(РеквизитыПокупателя[0]);
		КПП = СокрЛП(РеквизитыПокупателя[1]);
		Если СтрДлина(ИНН) = 12 Тогда
			ЗаписатьАтрибут(МодельВыгрузки, "ИННФЛ", ИНН, "Т, 12, , Н");
		ИНаче
			ЗаписатьАтрибут(МодельВыгрузки, "ИННЮЛ", ИНН, "Т, 10, , Н");
			ЗаписатьАтрибут(МодельВыгрузки, "КПП", КПП, "Т, 9, , Н");
		КонецЕсли;
		
		РеквизитыВалюты = РасщепленнаяСтрока(СтрокаТабличнойЧасти.Валюта, ",");
		КодОКВ = СокрЛП(РеквизитыВалюты[1]);
		ЗаписатьАтрибут(МодельВыгрузки, "КодОКВ", КодОКВ, "Т, 3, , О");
		
		ЗаписатьАтрибут(МодельВыгрузки, "СтТовУчНалВсего", СтрокаТабличнойЧасти.СуммаДокумента, "Ч, 17, 2, Н");
		
		КодыОпераций = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаТабличнойЧасти.КодВидаОперации, ";");
		Для Каждого КодОперации Из КодыОпераций Цикл
			Если НЕ ПустаяСтрока(КодыОпераций) Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("КодВидОпер");
					МодельВыгрузки.ЗаписатьТекст(Лев(СокрЛП(КодОперации), 2));
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
		ВтчСумНДС = ПредставлениеСуммыНДС(СтрокаТабличнойЧасти.СуммаНДС);
		Если ЗначениеЗаполнено(ВтчСумНДС) Тогда
			МодельВыгрузки.ЗаписатьНачалоЭлемента("ВтчСумНДС");
				ЗаписатьАтрибут(МодельВыгрузки, "СумНДС", ВтчСумНДС, "Т, 18, , О");
			МодельВыгрузки.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаДокументаРазницаУменьшение)
		 ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаДокументаРазницаУвеличение) Тогда
			МодельВыгрузки.ЗаписатьНачалоЭлемента("РазнСтоимКСчФ");
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаДокументаРазницаУменьшение) Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("Ум");
					МодельВыгрузки.ЗаписатьТекст(ФорматДеньги(СтрокаТабличнойЧасти.СуммаДокументаРазницаУменьшение));
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаДокументаРазницаУвеличение) Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("Увел");
					МодельВыгрузки.ЗаписатьТекст(ФорматДеньги(СтрокаТабличнойЧасти.СуммаДокументаРазницаУвеличение));
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			МодельВыгрузки.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДСРазницаУменьшение)
		 ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДСРазницаУвеличение) Тогда
			МодельВыгрузки.ЗаписатьНачалоЭлемента("РазнНДСКСчФ");
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДСРазницаУменьшение) Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("Ум");
					ЗаписатьАтрибут(МодельВыгрузки, "СумНДС", ПредставлениеСуммыНДС(СтрокаТабличнойЧасти.СуммаНДСРазницаУменьшение), "Т, 18, , О");
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДСРазницаУвеличение) Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("Увел");
					ЗаписатьАтрибут(МодельВыгрузки, "СумНДС", ПредставлениеСуммыНДС(СтрокаТабличнойЧасти.СуммаНДСРазницаУвеличение), "Т, 18, , О");
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
			МодельВыгрузки.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		МодельВыгрузки.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиТабличнойЧастиПолученныеСФ(МодельВыгрузки, Параметры)
	
	Для Каждого СтрокаТабличнойЧасти Из ПолученныеСчетаФактуры Цикл
		МодельВыгрузки.ЗаписатьНачалоЭлемента("СвЧ2");
		
		ЗаписатьАтрибут(МодельВыгрузки, "НомПП", СтрокаТабличнойЧасти.Ном, "Ч, 6, 0, О");
		ЗаписатьАтрибут(МодельВыгрузки, "ДатаПолСчФ", СтрокаТабличнойЧасти.ДатаПередачиПолучения, "Д, , , О");
		ЗаписатьАтрибут(МодельВыгрузки, "КодСпосВыст", СтрокаТабличнойЧасти.КодСпособаВыставления, "Т, 1, , О");
		
		ЗаписатьАтрибут(МодельВыгрузки, "НомерСчФ", СтрокаТабличнойЧасти.НомерСчетаФактуры, "Т, 256, , О");
		ЗаписатьАтрибут(МодельВыгрузки, "ДатаСчФ", СтрокаТабличнойЧасти.ДатаСчетаФактуры, "Д, , , О");
		
		ЗаписатьАтрибут(МодельВыгрузки, "НомерКСчФ", СтрокаТабличнойЧасти.НомерКорректировочногоСчетаФактуры, "Т, 256, , Н");
		ЗаписатьАтрибут(МодельВыгрузки, "ДатаКСчФ", СтрокаТабличнойЧасти.ДатаКорректировочногоСчетаФактуры, "Д, , , Н");
		
		ЗаписатьАтрибут(МодельВыгрузки, "НомИспрСчФ", СтрокаТабличнойЧасти.НомерИсправления, "Т, 3, , Н");
		ЗаписатьАтрибут(МодельВыгрузки, "ДатаИспрСчФ", СтрокаТабличнойЧасти.ДатаИсправления, "Д, , , Н");
		
		ЗаписатьАтрибут(МодельВыгрузки, "НаимПрод", СтрокаТабличнойЧасти.КонтрагентНаименование, "Т, 1000, , О");
		РеквизитыПокупателя = РасщепленнаяСтрока(СтрокаТабличнойЧасти.КонтрагентИННКПП, "/");
		ИНН = СокрЛП(РеквизитыПокупателя[0]);
		КПП = СокрЛП(РеквизитыПокупателя[1]);
		Если СтрДлина(ИНН) = 12 Тогда
			ЗаписатьАтрибут(МодельВыгрузки, "ИННФЛ", ИНН, "Т, 12, , Н");
		ИНаче
			ЗаписатьАтрибут(МодельВыгрузки, "ИННЮЛ", ИНН, "Т, 10, , Н");
			ЗаписатьАтрибут(МодельВыгрузки, "КПП", КПП, "Т, 9, , Н");
		КонецЕсли;
		
		РеквизитыВалюты = РасщепленнаяСтрока(СтрокаТабличнойЧасти.Валюта, ",");
		КодОКВ = СокрЛП(РеквизитыВалюты[1]);
		ЗаписатьАтрибут(МодельВыгрузки, "КодОКВ", КодОКВ, "Т, 3, , О");
		
		ЗаписатьАтрибут(МодельВыгрузки, "СтТовУчНалВсего", СтрокаТабличнойЧасти.СуммаДокумента, "Ч, 17, 2, Н");
		
		КодыОпераций = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаТабличнойЧасти.КодВидаОперации, ";");
		Для Каждого КодОперации Из КодыОпераций Цикл
			Если НЕ ПустаяСтрока(КодыОпераций) Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("КодВидОпер");
					МодельВыгрузки.ЗаписатьТекст(Лев(СокрЛП(КодОперации), 2));
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
		ВтчСумНДС = ПредставлениеСуммыНДС(СтрокаТабличнойЧасти.СуммаНДС);
		Если ЗначениеЗаполнено(ВтчСумНДС) Тогда
			МодельВыгрузки.ЗаписатьНачалоЭлемента("ВтчСумНДС");
				ЗаписатьАтрибут(МодельВыгрузки, "СумНДС", ВтчСумНДС, "Т, 18, , О");
			МодельВыгрузки.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаДокументаРазницаУменьшение)
		 ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаДокументаРазницаУвеличение) Тогда
			МодельВыгрузки.ЗаписатьНачалоЭлемента("РазнСтоимКСчФ");
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаДокументаРазницаУменьшение) Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("Ум");
					МодельВыгрузки.ЗаписатьТекст(ФорматДеньги(СтрокаТабличнойЧасти.СуммаДокументаРазницаУменьшение));
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаДокументаРазницаУвеличение) Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("Увел");
					МодельВыгрузки.ЗаписатьТекст(ФорматДеньги(СтрокаТабличнойЧасти.СуммаДокументаРазницаУвеличение));
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			МодельВыгрузки.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДСРазницаУменьшение)
		 ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДСРазницаУвеличение) Тогда
			МодельВыгрузки.ЗаписатьНачалоЭлемента("РазнНДСКСчФ");
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДСРазницаУменьшение) Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("Ум");
					ЗаписатьАтрибут(МодельВыгрузки, "СумНДС", ПредставлениеСуммыНДС(СтрокаТабличнойЧасти.СуммаНДСРазницаУменьшение), "Т, 18, , О");
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СуммаНДСРазницаУвеличение) Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("Увел");
					ЗаписатьАтрибут(МодельВыгрузки, "СумНДС", ПредставлениеСуммыНДС(СтрокаТабличнойЧасти.СуммаНДСРазницаУвеличение), "Т, 18, , О");
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
			МодельВыгрузки.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		МодельВыгрузки.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеСуммыНДС(ЗначениеСуммыНДС)
	
	Возврат Формат(ЗначениеСуммыНДС, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
	
КонецФункции

Функция РасщепленнаяСтрока(СтрокаЗначения, Разделитель)
	
	Результат = Новый Массив;
	
	ПозицияРазделителя = Найти(СтрокаЗначения, Разделитель);
	Если ПозицияРазделителя = 0 Тогда
		Результат.Добавить(СтрокаЗначения);
		Результат.Добавить("");
	Иначе
		Результат.Добавить(Лев(СтрокаЗначения, ПозицияРазделителя - 1));
		Результат.Добавить(Сред(СтрокаЗначения, ПозицияРазделителя + 1));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьОбязательныйАтрибут(МодельВыгрузки, ИмяАтрибута, ЗначениеАтрибута)
	
	ЗаписатьАтрибут(МодельВыгрузки, ИмяАтрибута, ЗначениеАтрибута);
	
КонецПроцедуры

Процедура ЗаписатьНеобязательныйАтрибут(МодельВыгрузки, ИмяАтрибута, ЗначениеАтрибута)
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		ЗаписатьАтрибут(МодельВыгрузки, ИмяАтрибута, ЗначениеАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьАтрибут(МодельВыгрузки, ИмяАтрибута, Знач ЗначениеАтрибута, ОписаниеАтрибута = Неопределено)
	
	Перем МодельАтрибута;
	
	// ТипЗнч: Т, T - текст
	//         Ч, N - число
	//         Д, D - дата
	// Длина - общая длина значения
	// Точность - точность для числовых значений
	// Обязательность: Н - необязательный атрибут
	//                 О - обязательный атрибут
	ОписаниеСтруктуры = "ТипЗнч, Длина, Точность, Обязательность";
	
	Если ЗначениеЗаполнено(ОписаниеАтрибута) Тогда
		Описание = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОписаниеАтрибута);
		МодельАтрибута = Новый Структура(ОписаниеСтруктуры);
		МодельАтрибута.ТипЗнч         = НРег(СокрЛП(Описание[0]));
		МодельАтрибута.Длина          = ?(ЗначениеЗаполнено(Описание[1]), Число(СокрЛП(Описание[1])), 0);
		МодельАтрибута.Точность       = ?(ЗначениеЗаполнено(Описание[2]), Число(СокрЛП(Описание[2])), 0);
		МодельАтрибута.Обязательность = НРег(СокрЛП(Описание[3]));
	Иначе
		МодельАтрибута = Новый Структура(ОписаниеСтруктуры, , , , "о");
	КонецЕсли;
	
	ЗаписыватьАтрибут = НЕ (МодельАтрибута.Обязательность = "н" И НЕ ЗначениеЗаполнено(ЗначениеАтрибута));
	
	// Приведение значения атрибута к текстовому представлению.
	Если МодельАтрибута.ТипЗнч = "т" ИЛИ МодельАтрибута.ТипЗнч = "t" Тогда
		Если ЗначениеЗаполнено(МодельАтрибута.Длина) Тогда
			ЗначениеАтрибута = Лев(ЗначениеАтрибута, МодельАтрибута.Длина);
		КонецЕсли;
		
	ИначеЕсли МодельАтрибута.ТипЗнч = "ч" ИЛИ МодельАтрибута.ТипЗнч = "n" Тогда
		ОписаниеФормата = "ЧРД=.; ЧН=; ЧГ=0";
		Если ЗначениеЗаполнено(МодельАтрибута.Длина) Тогда
			ОписаниеФормата = ОписаниеФормата + "; ЧЦ=" + Формат(МодельАтрибута.Длина, "ЧДЦ=0; ЧГ=0");
			ОписаниеФормата = ОписаниеФормата + "; ЧДЦ=" + Формат(МодельАтрибута.Точность, "ЧДЦ=0; ЧН=; ЧГ=0");
		КонецЕсли;
		
		ЗначениеАтрибута = Формат(ЗначениеАтрибута, ОписаниеФормата);
		
	ИначеЕсли МодельАтрибута.ТипЗнч = "д" ИЛИ МодельАтрибута.ТипЗнч = "d" Тогда
		Если ЗначениеЗаполнено(ЗначениеАтрибута)
		   И ТипЗнч(ЗначениеАтрибута) = Тип("Дата") Тогда
			ЗначениеАтрибута = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеАтрибута = Лев(СокрЛП(ЗначениеАтрибута), 10);
		КонецЕсли;
		
	Иначе
		ЗначениеАтрибута = Строка(ЗначениеАтрибута);
		Если ЗначениеЗаполнено(МодельАтрибута.Длина) Тогда
			ЗначениеАтрибута = Лев(ЗначениеАтрибута, МодельАтрибута.Длина);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписыватьАтрибут Тогда
		МодельВыгрузки.ЗаписатьАтрибут(ИмяАтрибута, ЗначениеАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Функция ФорматДеньги(Сумма)
	
	Возврат Формат(Сумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
	
КонецФункции

Функция ФорматЧисло(Значение, ФорматЧисла = "ЧРД=.; ЧГ=0")
	
	Возврат Формат(Значение, ФорматЧисла);
	
КонецФункции

Функция ФорматДата(Значение)
	
	Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
	
КонецФункции

Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина)

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли;

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", 		" ");
	СоответствиеПараметров.Вставить("НаименованиеСокращенное", 	" ");
	СоответствиеПараметров.Вставить("ИНН",                		" ИНН ");
	СоответствиеПараметров.Вставить("КПП",                		" КПП ");
	СоответствиеПараметров.Вставить("Свидетельство",			" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",	" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   		" ");
	СоответствиеПараметров.Вставить("ФактическийАдрес",   		" ");
	СоответствиеПараметров.Вставить("Телефоны",           		" тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета",         		" р/с ");
	СоответствиеПараметров.Вставить("Банк",               		" в банке ");
	СоответствиеПараметров.Вставить("БИК",                		" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           		" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          		" Код по ОКПО ");


	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

