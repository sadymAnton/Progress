Перем мУдалятьДвижения;


Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяПолитика;                 // (Общ)
Перем УчетнаяПолитикаБух;

Перем мЕстьЗаказ;
Перем мУказаниеПроектовВТабличнойЧастиДокументов Экспорт;
Перем мСтруктураПараметровВзаиморасчетов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ унифицированной формы М-4
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ4()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номер КАК Номер,
	|	Дата  КАК ДатаСоставления,
	|	НомерВходящегоДокумента КАК НомерСопроводительногоДокумента,
	|	Организация,
	|	Организация             КАК ЮрФизЛицо,
	|	NULL              		КАК МестоПриемки,
	|	NULL 					КАК СкладНаименование,
	|	Подразделение,
	|	Подразделение  КАК ПредставлениеПодразделения,
	|	Контрагент.Код КАК ПоставщикКод,
	|	Контрагент     КАК Поставщик,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	СчетУчетаРасчетовСКонтрагентом КАК СубСчет
	|ИЗ
	|	Документ.ПолучениеУслугПоПереработке КАК ПолучениеУслугПоПереработке
	|ГДЕ
	|	ПолучениеУслугПоПереработке.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Если КурсВзаиморасчетов <> 0 И КратностьВзаиморасчетов <> 0 Тогда
		ЗапросПоТоварам.УстановитьПараметр("Курс", КурсВзаиморасчетов);
		ЗапросПоТоварам.УстановитьПараметр("Кратность", КратностьВзаиморасчетов);
	Иначе
		ЗапросПоТоварам.УстановитьПараметр("Курс", 1);
		ЗапросПоТоварам.УстановитьПараметр("Кратность", 1);
	КонецЕсли;
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	                        |	ВложенныйЗапрос.Номенклатура,
	                        |	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                        |	ВложенныйЗапрос.Номенклатура.Код КАК ТоварКод,
	                        |	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	                        |	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	                        |	ВложенныйЗапрос.СтавкаНДС,
	                        |	ВложенныйЗапрос.КоличествоПринято,
	                        |	ВложенныйЗапрос.Цена,
	                        |	ВложенныйЗапрос.Стоимость,
	                        |	ВложенныйЗапрос.СуммаНДС,
	                        |	ВложенныйЗапрос.Характеристика,
	                        |	ВложенныйЗапрос.Серия
	                        |ИЗ
	                        |	(ВЫБРАТЬ
	                        |		ПолучениеУслугПоПереработке.Номенклатура КАК Номенклатура,
	                        |		ПолучениеУслугПоПереработке.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                        |		ПолучениеУслугПоПереработке.СтавкаНДС КАК СтавкаНДС,
	                        |		МИНИМУМ(ПолучениеУслугПоПереработке.НомерСтроки) КАК НомерСтроки,
	                        |		СУММА(ПолучениеУслугПоПереработке.Количество) КАК КоличествоПринято,
	                        |		СУММА(ПолучениеУслугПоПереработке.Цена * &Курс / &Кратность) КАК Цена,
	                        |		СУММА(ПолучениеУслугПоПереработке.Сумма * &Курс / &Кратность) КАК Стоимость,
	                        |		СУММА(ПолучениеУслугПоПереработке.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	                        |		ПолучениеУслугПоПереработке.ХарактеристикаНоменклатуры КАК Характеристика,
	                        |		ПолучениеУслугПоПереработке.СерияНоменклатуры КАК Серия
	                        |	ИЗ
	                        |		Документ.ПолучениеУслугПоПереработке.Товары КАК ПолучениеУслугПоПереработке
	                        |	ГДЕ
	                        |		ПолучениеУслугПоПереработке.Ссылка = &ТекущийДокумент
	                        |	
	                        |	СГРУППИРОВАТЬ ПО
	                        |		ПолучениеУслугПоПереработке.Номенклатура,
	                        |		ПолучениеУслугПоПереработке.ЕдиницаИзмерения,
	                        |		ПолучениеУслугПоПереработке.СтавкаНДС,
	                        |		ПолучениеУслугПоПереработке.ХарактеристикаНоменклатуры,
	                        |		ПолучениеУслугПоПереработке.СерияНоменклатуры) КАК ВложенныйЗапрос
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	ВложенныйЗапрос.НомерСтроки";
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
	
	Макет = ПолучитьОбщийМакет("М4");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры печатной формы по умолчанию
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Восстановим установленные пользователем параметры печатной формы
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_М4";
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим заголовок докмента
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаСоставления), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	НомерСтраницы   = 1;

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	ИтогоСуммаБезНДС = 0;
	ИтогоСуммаНДС    = 0;
	ИтогоВсегоСНДС   = 0;
	Ном              = 0;

	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;	

	// Выводим многострочную часть докмента
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтрок");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			ОбщегоНазначения.Сообщение("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
		ВсегоСНДС = (ВыборкаСтрокТовары.Стоимость
			+ ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС));

		КоличествоПринято = ВыборкаСтрокТовары.КоличествоПринято;
		СуммаНДС          = ВыборкаСтрокТовары.СуммаНДС / ?(Шапка.Кратность <> 0, Шапка.Кратность, 1);
		Цена              = (ВсегоСНДС - СуммаНДС) / КоличествоПринято;

		ОбластьМакета.Параметры.КоличествоПринято = КоличествоПринято;
		ОбластьМакета.Параметры.ВсегоСНДС         = ВсегоСНДС;
		ОбластьМакета.Параметры.СуммаБезНДС       = ВсегоСНДС - СуммаНДС;
		ОбластьМакета.Параметры.СуммаНДС          = СуммаНДС;
		ОбластьМакета.Параметры.Цена              = Цена;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
		Если Ном = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивВыводимыхОбластей) Тогда

			НомерСтраницы	= НомерСтраницы + 1;
			ПодвалСтрок 	= Макет.ПолучитьОбласть("ПодвалСтрок");
			ТабДокумент.Вывести(ПодвалСтрок);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;		

		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;
		ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС - СуммаНДС;
		ИтогоСуммаНДС          = ИтогоСуммаНДС          + СуммаНДС;
		ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;

	КонецЦикла;
	
	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	
	ОбластьМакета.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
	ОбластьМакета.Параметры.ИтогоСуммаБезНДС = ИтогоСуммаБезНДС;
	ОбластьМакета.Параметры.ИтогоСуммаНДС    = ИтогоСуммаНДС;
	ОбластьМакета.Параметры.ИтогоВсегоСНДС   = ИтогоВсегоСНДС;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ4()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если      ИмяМакета = "М4" Тогда
		
		// Унифицированная форма М-4 (приходный ордер).
		ТабДокумент = ПечатьМ4();
		
	ИначеЕсли ИмяМакета = "СправкаРасчетВал" тогда

		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("М4", "М-4 (Приходный ордер)");
	СтруктураМакетов.Вставить( "СправкаРасчетВал", "Справка-расчет ""Рублевая сумма документа в валюте""");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура выполняет заполниение табличной части неполученными ТМЦ по заказу поставщику.
//
Процедура ЗаполнитьТоварыПоОстаткамУпр() Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", Заказ);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВложенныйЗапрос.КоличествоОстатокПоЗаказу) КАК КоличествоОстатокПоЗаказу,
	|	СУММА(ВложенныйЗапрос.КоличествоПоРазмещению) КАК КоличествоПоРазмещению,
	|	ВложенныйЗапрос.Размещение,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент
	|ИЗ (
	|	ВЫБРАТЬ
	|		Остатки.Номенклатура,
	|		Остатки.ХарактеристикаНоменклатуры,
	|		ЗаказПоставщикуТовары.Спецификация,
	|		Остатки.Цена,
	|		Остатки.ЕдиницаИзмерения,
	|		Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|		Остатки.КоличествоОстаток КАК КоличествоОстатокПоЗаказу,
	|		0 КАК КоличествоПоРазмещению,
	|		Неопределено КАК Размещение
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, 
	|			ДоговорКонтрагента = &Договор
	|			И ЗаказПоставщику = &Сделка
	|			И СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВПереработку)
	|		) КАК Остатки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Номенклатура,
	|				ХарактеристикаНоменклатуры,
	|				Спецификация
	|			ИЗ
	|				Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|			ГДЕ
	|				ЗаказПоставщикуТовары.Ссылка = &Сделка
	|
	|			) КАК ЗаказПоставщикуТовары
	|		ПО 
	|			Остатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
	|			И Остатки.ХарактеристикаНоменклатуры = ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры
	|
	|	ГДЕ
	|		НЕ Остатки.Номенклатура.Услуга И Остатки.КоличествоОстаток <> 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Размещение.Номенклатура,
	|		Размещение.ХарактеристикаНоменклатуры,
	|		ЗНАЧЕНИЕ(Справочник.СпецификацииНоменклатуры.ПустаяСсылка) КАК Спецификация,
	|		0 КАК Цена,
	|		ВЫБОР КОГДА &ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка) ТОГДА
	|			Размещение.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ
	|			ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|				Размещение.Номенклатура.ЕдиницаХраненияОстатков
	|			ИНАЧЕ
	|				ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения
	|			КОНЕЦ
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|
	|		ВЫБОР КОГДА &ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка) ТОГДА
	|			Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		ИНАЧЕ
	|			ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|				Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|			ИНАЧЕ
	|				ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|			КОНЕЦ
	|		КОНЕЦ КАК Коэффициент,
	|		0 КАК КоличествоОстатокПоЗаказу,
	|		Размещение.КоличествоОстаток КАК КоличествоПоРазмещению,
	|		Размещение.ЗаказПокупателя КАК Размещение
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, 
	|			ЗаказПоставщику = &Сделка 
	|			И ТоварТара = ЗНАЧЕНИЕ(Перечисление.ТоварТара.Товар)
	|		) КАК Размещение
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|	ПО 
	|		Размещение.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
	|		И Размещение.ХарактеристикаНоменклатуры = ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры
	|
	|	ГДЕ
	|		НЕ Размещение.Номенклатура.Услуга
	|		И Размещение.КоличествоОстаток > 0
	|
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.Размещение,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();

	// Таблица остатков по размещению покупателям
	ТаблицаПоРазмещению = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоРазмещению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоРазмещению.Получить(Сч);
		Если СтрокаТаблицы.КоличествоПоРазмещению <= 0 Тогда
			ТаблицаПоРазмещению.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Таблица остатков по заказу поставщику
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Нам надо знать сколько на самом деле осталось номенклатуры
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
	ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Спецификация", "КоличествоОстатокПоЗаказу");

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Для каждого СтрокаБезЦен ИЗ ТаблицаБезЦен Цикл
		ВсегоПоЗаказу = СтрокаБезЦен.КоличествоОстатокПоЗаказу;
		ВсегоСписано  = 0;

		Если ВсегоСписано >= ВсегоПоЗаказу Тогда
			Прервать;
		КонецЕсли;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаБезЦен.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаБезЦен.ХарактеристикаНоменклатуры);

		СтрокиПоРазмещению = ТаблицаПоРазмещению.НайтиСтроки(СтруктураПоиска);
		СтрокиПоЗаказу     = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);

		Для Каждого СтрокаЗаказа Из СтрокиПоЗаказу Цикл
			КолвоПоЗаказу       = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			СписатьПоРазмещению = 0;
			СписатьПоЗаказу     = 0;
			СписаноПоСтроке     = 0;

			Если КолвоПоЗаказу <= 0 Тогда
				Продолжить;
			КонецЕсли;

			// Cписываем по размещению
			Для Каждого СтрокаРазмещения Из СтрокиПоРазмещению Цикл
				КолвоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению;

				Если КолвоПоРазмещению <= 0 Тогда
					Продолжить;
				КонецЕсли;

				СписатьПоРазмещению = Мин(КолвоПоРазмещению, Мин(КолвоПоЗаказу - СписаноПоСтроке, ВсегоПоЗаказу - ВсегоСписано));
				СписаноПоСтроке     = СписаноПоСтроке + СписатьПоРазмещению;
				ВсегоСписано        = ВсегоСписано + СписатьПоРазмещению;

				Если КолвоПоРазмещению > 0 Тогда
					СтрокаТабличнойЧасти = Товары.Добавить();
					СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
					СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
					СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
					СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
					СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
					СтрокаТабличнойЧасти.Заказ            			= СтрокаРазмещения.Размещение;
					СтрокаТабличнойЧасти.Количество                 = СписатьПоРазмещению * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
																      /СтрокаЗаказа.Коэффициент;
																	  
					ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);												  
					СтрокаТабличнойЧасти.НоменклатурнаяГруппа       = СтрокаЗаказа.НоменклатурнаяГруппа;
					СтрокаТабличнойЧасти.Спецификация 				= СтрокаБезЦен.Спецификация;

					СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					                            МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
					                            Заказ.ВалютаДокумента, ВалютаДокумента,
					                            ЗаполнениеДокументов.КурсДокумента(Заказ, мВалютаРегламентированногоУчета), Курс,
					                            ЗаполнениеДокументов.КратностьДокумента(Заказ, мВалютаРегламентированногоУчета), Кратность),
					                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
					                            Заказ.СуммаВключаетНДС,
					                            УчитыватьНДС,
					                            СуммаВключаетНДС,
					                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

					ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);

					СтрокаРазмещения.КоличествоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению - СписатьПоРазмещению;
				КонецЕсли;


			КонецЦикла;

			// Cписываем без размещения
			СписатьПоЗаказу = Мин(КолвоПоЗаказу - СписаноПоСтроке, ВсегоПоЗаказу - ВсегоСписано);
			СписаноПоСтроке = СписаноПоСтроке + СписатьПоЗаказу;
			ВсегоСписано    = ВсегоСписано  + СписатьПоЗаказу;

			Если СписатьПоЗаказу > 0 Тогда
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
				СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
				СтрокаТабличнойЧасти.Заказ            			= Неопределено;
				СтрокаТабличнойЧасти.Количество                 = СписатьПоЗаказу * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
																  /СтрокаЗаказа.Коэффициент;
																  				
				ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
				СтрокаТабличнойЧасти.НоменклатурнаяГруппа       = СтрокаЗаказа.НоменклатурнаяГруппа;
				СтрокаТабличнойЧасти.Спецификация 				= СтрокаБезЦен.Спецификация;

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				                            МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
				                            Заказ.ВалютаДокумента, ВалютаДокумента,
				                            ЗаполнениеДокументов.КурсДокумента(Заказ, мВалютаРегламентированногоУчета), Курс,
				                            ЗаполнениеДокументов.КратностьДокумента(Заказ, мВалютаРегламентированногоУчета), Кратность),
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                            Заказ.СуммаВключаетНДС,
				                            УчитыватьНДС,
				                            СуммаВключаетНДС,
				                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

				ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);
			КонецЕсли;

			СтрокаЗаказа.КоличествоОстатокПоЗаказу = СтрокаЗаказа.КоличествоОстатокПоЗаказу - СписаноПоСтроке;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОстаткамУпр()

// Процедура выполняет заполниение табличной части неполученными ТМЦ по заказу поставщику.
//
Процедура ЗаполнитьТоварыПоПоступлениюИпоОстаткам(Основание)
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВПереработку);
	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Товар",        Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Сделка",       Заказ);
	Запрос.УстановитьПараметр("ТипЦен",       ТипЦен);
	Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия",  Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСпецификация",  Справочники.СпецификацииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("Основание",    Основание);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                     	КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков             	КАК ЕдиницаХранения,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 	КАК КоэффициентЕдиницыХранения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры                       	КАК ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.СерияНоменклатуры                       			КАК СерияНоменклатуры,
	|	ВложенныйЗапрос.Спецификация                       					КАК Спецификация,
	|	ВложенныйЗапрос.Номенклатура.НоменклатурнаяГруппа                	КАК НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.Цена                                             	КАК Цена,
	|	ВложенныйЗапрос.Номенклатура.СтавкаНДС                           	КАК СтавкаНДС,
	|	СУММА(ВложенныйЗапрос.КоличествоПоПоступлению)                 		КАК КоличествоПоПоступлению,
	|	СУММА(ВложенныйЗапрос.КоличествоОстатокПоЗаказу)                 	КАК КоличествоОстатокПоЗаказу,
	|	СУММА(ВложенныйЗапрос.КоличествоПоРазмещению)                    	КАК КоличествоПоРазмещению,
	|	ВложенныйЗапрос.Размещение                                       	КАК Размещение,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                                 	КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент                                      	КАК Коэффициент
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|	Поступление.Номенклатура                КАК Номенклатура,
	|	Поступление.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|	Поступление.СерияНоменклатуры   		КАК СерияНоменклатуры,
	|	Поступление.Спецификация   				КАК Спецификация,
	|	0                         				КАК Цена,
	|	Поступление.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
	|	Поступление.Коэффициент 				КАК Коэффициент,
	|	Поступление.Количество            		КАК КоличествоПоПоступлению,
	|	0            							КАК КоличествоОстатокПоЗаказу,
	|	0                                    	КАК КоличествоПоРазмещению,
	|	Неопределено                         	КАК Размещение
	|ИЗ
	|	Документ.ПоступлениеТоваровИзПереработки.Продукция КАК Поступление
	|ГДЕ	
	|	Поступление.Ссылка = &Основание
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Остатки.Номенклатура                 	КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры   	КАК ХарактеристикаНоменклатуры,
	|	&ПустаяСерия                         	КАК СерияНоменклатуры,
	|	&ПустаяСпецификация                     КАК Спецификация,
	|	Остатки.Цена                         	КАК Цена,
	|	Остатки.ЕдиницаИзмерения             	КАК ЕдиницаИзмерения,
	|	Остатки.ЕдиницаИзмерения.Коэффициент 	КАК Коэффициент,
	|	0            							КАК КоличествоПоПоступлению,
	|	Остатки.КоличествоОстаток            	КАК КоличествоОстатокПоЗаказу,
	|	0                                    	КАК КоличествоПоРазмещению,
	|	Неопределено                         	КАК Размещение
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор
	|	                                              И ЗаказПоставщику  = &Сделка
	|	                                              И СтатусПартии     = &СтатусПартии) КАК Остатки
	|
	|ГДЕ
	|	НЕ Остатки.Номенклатура.Услуга И Остатки.КоличествоОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Размещение.Номенклатура               	КАК Номенклатура,
	|	Размещение.ХарактеристикаНоменклатуры 	КАК ХарактеристикаНоменклатуры,
	|	&ПустаяСерия                         	КАК СерияНоменклатуры,
	|	&ПустаяСпецификация                     КАК Спецификация,
	|	0                                     	КАК Цена,
	|	ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА
	|		Размещение.Номенклатура.ЕдиницаХраненияОстатков
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|			Размещение.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения
	|		КОНЕЦ
	|	КОНЕЦ                                 КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА &ТипЦен = &ПустойТипЦен ТОГДА
	|		Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|			Размещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		ИНАЧЕ
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ
	|	КОНЕЦ                                 	КАК Коэффициент,
	|	0            							КАК КоличествоПоПоступлению,
	|	0                                     	КАК КоличествоОстатокПоЗаказу,
	|	Размещение.КоличествоОстаток	        КАК КоличествоПоРазмещению,
	|	Размещение.ЗаказПокупателя            	КАК Размещение
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, ЗаказПоставщику = &Сделка И ТоварТара = &Товар) КАК Размещение
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|		ПО Размещение.Номенклатура               = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
	|		 И Размещение.ХарактеристикаНоменклатуры = ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры
	|
	|ГДЕ
	|	НЕ Размещение.Номенклатура.Услуга  И Размещение.КоличествоОстаток > 0
	|
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.СерияНоменклатуры,
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.Размещение,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент
	|";

	РезультатЗапроса = Запрос.Выполнить();
	
	// Таблица остатков по поступлению из переработки.
	ТаблицаПоПоступлению = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоПоступлению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоПоступлению.Получить(Сч);
		Если СтрокаТаблицы.КоличествоПоПоступлению <= 0 Тогда
			ТаблицаПоПоступлению.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Таблица остатков по размещению покупателям.
	ТаблицаПоРазмещению = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоРазмещению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоРазмещению.Получить(Сч);
		Если СтрокаТаблицы.КоличествоПоРазмещению <= 0 Тогда
			ТаблицаПоРазмещению.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Таблица остатков по заказу поставщику
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу <= 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Нам надо знать сколько на самом деле осталось номенклатуры
	ТаблицаБезЦен = ТаблицаПоПоступлению.Скопировать();
	ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Спецификация", "КоличествоПоПоступлению");

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Для каждого СтрокаБезЦен ИЗ ТаблицаБезЦен Цикл
		ВсегоПоЗаказу = СтрокаБезЦен.КоличествоПоПоступлению;
		ВсегоСписано  = 0;

		Если ВсегоСписано >= ВсегоПоЗаказу Тогда
			Прервать;
		КонецЕсли;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаБезЦен.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаБезЦен.ХарактеристикаНоменклатуры);

		СтрокиПоРазмещению = ТаблицаПоРазмещению.НайтиСтроки(СтруктураПоиска);
		СтрокиПоЗаказу     = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);

		Для Каждого СтрокаЗаказа Из СтрокиПоЗаказу Цикл
			КолвоПоЗаказу       = Мин(СтрокаЗаказа.КоличествоОстатокПоЗаказу, ВсегоПоЗаказу);
			СписатьПоРазмещению = 0;
			СписатьПоЗаказу     = 0;

			Если КолвоПоЗаказу <= 0 Тогда
				Продолжить;
			КонецЕсли;

			// Cписываем по размещению
			Для Каждого СтрокаРазмещения Из СтрокиПоРазмещению Цикл
				КолвоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению;

				Если КолвоПоРазмещению <= 0 Тогда
					Продолжить;
				КонецЕсли;

				СписатьПоРазмещению = Мин(КолвоПоРазмещению, КолвоПоЗаказу);
				ВсегоСписано        = ВсегоСписано + КолвоПоРазмещению;
				КолвоПоЗаказу		= КолвоПоЗаказу - СписатьПоРазмещению;

				Если КолвоПоРазмещению > 0 Тогда
					СтрокаТабличнойЧасти = Товары.Добавить();
					СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
					СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
					СтрокаТабличнойЧасти.СерияНоменклатуры 			= СтрокаБезЦен.СерияНоменклатуры;
					СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
					СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
					СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
					СтрокаТабличнойЧасти.Заказ            			= СтрокаРазмещения.Размещение;
					СтрокаТабличнойЧасти.Количество                 = СписатьПоРазмещению;
					
					ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
					
					СтрокаТабличнойЧасти.НоменклатурнаяГруппа       = СтрокаЗаказа.НоменклатурнаяГруппа;
					СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);

					СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					                            МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
					                            Заказ.ВалютаДокумента, ВалютаДокумента,
					                            ЗаполнениеДокументов.КурсДокумента(Заказ, мВалютаРегламентированногоУчета), Курс,
					                            ЗаполнениеДокументов.КратностьДокумента(Заказ, мВалютаРегламентированногоУчета), Кратность),
					                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
					                            Заказ.СуммаВключаетНДС,
					                            УчитыватьНДС,
					                            СуммаВключаетНДС,
					                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

					ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);

					СтрокаРазмещения.КоличествоПоРазмещению = СтрокаРазмещения.КоличествоПоРазмещению - СписатьПоРазмещению;
				КонецЕсли;
				
			КонецЦикла;

			// Cписываем без размещения
			СписатьПоЗаказу = КолвоПоЗаказу - ВсегоСписано;
			ВсегоСписано    = ВсегоСписано  + СписатьПоЗаказу;

			Если СписатьПоЗаказу > 0 Тогда
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура               = СтрокаЗаказа.Номенклатура;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.СерияНоменклатуры 			= СтрокаБезЦен.СерияНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаЗаказа.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент                = СтрокаЗаказа.Коэффициент;
				СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаЗаказа.СтавкаНДС;
				СтрокаТабличнойЧасти.Заказ	           			= Неопределено;
				СтрокаТабличнойЧасти.Количество                 = СписатьПоЗаказу;
				
				ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
				
				СтрокаТабличнойЧасти.НоменклатурнаяГруппа       = СтрокаЗаказа.НоменклатурнаяГруппа;
				СтрокаТабличнойЧасти.Спецификация 				= СтрокаБезЦен.Спецификация;

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				                            МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
				                            Заказ.ВалютаДокумента, ВалютаДокумента,
				                            ЗаполнениеДокументов.КурсДокумента(Заказ, мВалютаРегламентированногоУчета), Курс,
				                            ЗаполнениеДокументов.КратностьДокумента(Заказ, мВалютаРегламентированногоУчета), Кратность),
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                            Заказ.СуммаВключаетНДС,
				                            УчитыватьНДС,
				                            СуммаВключаетНДС,
				                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
				ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,    ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти,   ЭтотОбъект);
			КонецЕсли;

			СтрокаЗаказа.КоличествоОстатокПоЗаказу = СтрокаЗаказа.КоличествоОстатокПоЗаказу - СписатьПоРазмещению - СписатьПоЗаказу;

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюИпоОстаткам()

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткамУпр() Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВПереработку);
	Запрос.УстановитьПараметр("Товар",   Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",  Заказ);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура               				КАК Номенклатура,
	|	Остатки.Номенклатура.НоменклатурнаяГруппаЗатрат КАК НоменклатурнаяГруппа,
	|	Остатки.Номенклатура.СтатьяЗатрат 				КАК СтатьяЗатрат,
	|	Остатки.Номенклатура.СтавкаНДС     				КАК СтавкаНДС,
	|	Остатки.Цена,
	|	Остатки.КоличествоОстаток          				КАК КоличествоОстатокПоЗаказу
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор 
	|												И ЗаказПоставщику = &Сделка 
	|												И СтатусПартии = &СтатусПартии) КАК Остатки
	|
	|ГДЕ Остатки.Номенклатура.Услуга
	|
	|";

	РезультатЗапроса = Запрос.Выполнить();
	
	ЗапросСодержаний = Новый Запрос;
	ЗапросСодержаний.УстановитьПараметр("Сделка",  Заказ);
	ЗапросСодержаний.Текст = 
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Содержание
	|ИЗ
	|	Документ.ЗаказПоставщику.Услуги КАК Док
	|ГДЕ
	|	Док.Ссылка = &Сделка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";
	
	ТабСодержаний = ЗапросСодержаний.Выполнить().Выгрузить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаУслуг = Услуги.Добавить();
		СтрокаУслуг.Номенклатура = Выборка.Номенклатура;
		СтрокаУслуг.Количество   = Выборка.КоличествоОстатокПоЗаказу;
		СтрокаУслуг.СтавкаНДС    = Выборка.СтавкаНДС;
		
		СтрокаУслуг.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
		СтрокаУслуг.СтатьяЗатрат 		 = Выборка.СтатьяЗатрат;
		
		СтрокаСодержания = ТабСодержаний.Найти(Выборка.Номенклатура, "Номенклатура");
		
		Если СтрокаСодержания <> Неопределено Тогда
			СтрокаУслуг.Содержание   = СтрокаСодержания.Содержание;
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаУслуг, ЭтотОбъект);
		КонецЕсли;

		СтрокаУслуг.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
										Заказ.ВалютаДокумента, ВалютаДокумента,
										ЗаполнениеДокументов.КурсДокумента(Заказ, мВалютаРегламентированногоУчета), Курс,
										ЗаполнениеДокументов.КратностьДокумента(Заказ, мВалютаРегламентированногоУчета), Кратность);
										
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаУслуг, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаУслуг, ЭтотОбъект);
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаУслуг, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		СтрокаУслуг.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьУслугиПоОстаткамУпр()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ, ЗаполнятьСчетаУчетаНоменклатуры=Истина) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ, ЗаполнятьСчетаУчетаНоменклатуры);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

//Выполняет заполнение счетов учета в табличной части
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ, ЗаполнятьСчетаУчетаНоменклатуры=Истина) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ, , ЗаполнятьСчетаУчетаНоменклатуры);

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

//Выполняет заполнение счетов учета номенклатуры, затрат и налогов в шапке документа
//
Процедура ЗаполнитьСчетаУчетаВШапке(ЗаполнятьСчетаУчетаНоменклатуры=Истина) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаШапки(ЭтотОбъект, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Истина, ЗаполнятьСчетаУчетаНоменклатуры);

КонецПроцедуры

// Возвращает структуру со значениями по-умолчанию счетов учета расчетов в шапке.
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
	
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетов);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансов);
		
	КонецЕсли;
		
	Возврат СтруктураСчетов;
	
КонецФункции

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОснованиюУпр(ДокументОснование, ТабличнаяЧасть) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	ИмяТабличнойЧасти = "Товары";

	ДополнительныеРеглПоляОбщ    = "";
	ДополнительныеРеглПоляТовары = "";

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокТовары.Номенклатура," + ДополнительныеРеглПоляОбщ +"
	|	СУММА(ДокТовары.Количество)         КАК КоличествоПоДокументу,
	|	NULL                                КАК ЦенаВРознице, " + 
	?(ТабличнаяЧасть = Товары, "
	|	ДокТовары.СерияНоменклатуры," + ДополнительныеРеглПоляТовары +"
	|	ДокТовары.ХарактеристикаНоменклатуры, ", "") + "
	|	МИНИМУМ(ДокТовары.НомерСтроки)         КАК НомерСтроки, 
	|	СУММА(ДокТовары.Количество)         КАК КоличествоПоСерии, 
	|	МАКСИМУМ(Остатки.КоличествоОстаток) КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары." + ИмяТабличнойЧасти + " КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура" + 
	?(ТабличнаяЧасть = Товары, "
	| И ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры", "") + " 
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура" +
	?(ТабличнаяЧасть = Товары, ",
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.КоличествоМест   = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0, СтрокаТабличнойЧасти.Количество / СтрокаТабличнойЧасти.Коэффициент);
			СтрокаТабличнойЧасти.СтавкаНДС        = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);

		КонецЕсли;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Поцедура выполняет заполнение табличной части "Использованные материалы".
//
Процедура ЗаполнитьИспользованныеМатериалы() Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		#Если Клиент Тогда
			ОбщегоНазначения.Сообщение("Не указан контрагент! Заполнение невозможно.", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		#Если Клиент Тогда
			ОбщегоНазначения.Сообщение("Не указан договор контрагента! Заполнение невозможно.", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	УсловиеПоЗаказу = "";
	
	Если ОтражатьВУправленческомУчете Тогда
		Если ЗначениеЗаполнено(Заказ) Тогда
			УсловиеПоЗаказу = " И Сделка = &Заказ ";
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	РегТоварыПереданные.Номенклатура 					        КАК Номенклатура,
		|	РегТоварыПереданные.ХарактеристикаНоменклатуры              КАК ХарактеристикаНоменклатуры,
		|	РегТоварыПереданные.Номенклатура.НоменклатурнаяГруппаЗатрат КАК НоменклатурнаяГруппа,
		|	РегТоварыПереданные.Номенклатура.СтатьяЗатрат 				КАК СтатьяЗатрат,
		|	СУММА(РегТоварыПереданные.КоличествоОстаток)                КАК КолКонОст,
		|	СУММА(РегТоварыПереданные.СуммаВзаиморасчетовОстаток)       КАК СумКонОст
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков, 
		|											   ДоговорКонтрагента = &ДоговорКонтрагента
		|											   " + УсловиеПоЗаказу + "
		|											   И СтатусПередачи = &СтатусПередачи
		|											   ) КАК РегТоварыПереданные
		|
		|СГРУППИРОВАТЬ ПО
		|	РегТоварыПереданные.Номенклатура,
		|	РегТоварыПереданные.ХарактеристикаНоменклатуры
		|";
	ИначеЕсли ОтражатьВБухгалтерскомУчете Тогда
		
		Если ЗначениеЗаполнено(Заказ) Тогда
			УсловиеПоЗаказу = " И ДокументПередачи.Заказ = &Заказ ";
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	РегПартииТоваровПереданные.Номенклатура 					        КАК Номенклатура,
		|	РегПартииТоваровПереданные.ХарактеристикаНоменклатуры              	КАК ХарактеристикаНоменклатуры,
		|	РегПартииТоваровПереданные.СчетУчета              					КАК СчетУчета,
		|	РегПартииТоваровПереданные.Номенклатура.НоменклатурнаяГруппаЗатрат 	КАК НоменклатурнаяГруппа,
		|	РегПартииТоваровПереданные.Номенклатура.СтатьяЗатрат 				КАК СтатьяЗатрат,
		|	СУММА(РегПартииТоваровПереданные.КоличествоОстаток)                	КАК КолКонОст,
		|	0       															КАК СумКонОст
		|ИЗ
		|	РегистрНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.Остатки(&ДатаОстатков, 
		|											   ДоговорКонтрагента = &ДоговорКонтрагента
		|											   " + УсловиеПоЗаказу + "
		|											   И ДокументПередачи ССЫЛКА Документ.ПередачаТоваров
		|											   ) КАК РегПартииТоваровПереданные
		|
		|СГРУППИРОВАТЬ ПО
		|	РегПартииТоваровПереданные.Номенклатура,
		|	РегПартииТоваровПереданные.ХарактеристикаНоменклатуры,
		|	РегПартииТоваровПереданные.СчетУчета
		|";
	Иначе
		#Если Клиент Тогда
			ОбщегоНазначения.Сообщение("Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский""! Заполнение невозможно.", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "Заказ", ?(НЕ ЗначениеЗаполнено( Заказ), Неопределено, Заказ));
	Запрос.УстановитьПараметр( "ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр( "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		#Если Клиент Тогда
		Предупреждение("По выбранному заказу / контрагенту / договору в остатках у переработчика материалов нет!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	ИспользованныеМатериалы.Очистить();
	Обход = РезультатЗапроса.Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Обход.Следующий() Цикл
		
		НоваяСтрока = ИспользованныеМатериалы.Добавить();
		НоваяСтрока.Номенклатура               = Обход.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаНоменклатуры;
		НоваяСтрока.НоменклатурнаяГруппа       = Обход.НоменклатурнаяГруппа;
		НоваяСтрока.СтатьяЗатрат 		  	   = Обход.СтатьяЗатрат;
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуТабЧасти        (НоваяСтрока, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти     (НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.Количество                 = Обход.КолКонОст;
		НоваяСтрока.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Обход.СумКонОст, 
		                   ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, Курс,
		                   КратностьВзаиморасчетов, Кратность);
						   
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект, Ложь);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"ИспользованныеМатериалы");
		Если НЕ ОтражатьВУправленческомУчете Тогда
			НоваяСтрока.СчетУчетаБУ = Обход.СчетУчета;
			НоваяСтрока.СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", НоваяСтрока.СчетУчетаБУ));
		КонецЕсли;
		НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
	КонецЦикла;
	
	Если ОтражатьВУправленческомУчете Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(ИспользованныеМатериалы, "ИспользованныеМатериалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	Иначе
		//Заполним только счета затрат, так как счета учета взяли из запроса
		ЗаполнитьСчетаУчетаВТабЧасти(ИспользованныеМатериалы, "ИспользованныеМатериалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Ложь);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьИспользованныеМатериалы()

// Процедура заполняет материалы по спецификациям.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если ИспользованныеМатериалы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Использованные материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		ИспользованныеМатериалы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьМатериалы = ИспользованныеМатериалы.Выгрузить();
	ТабличнаяЧастьПродукция = Товары.Выгрузить();
	
	СтруктураДопКолонок = Новый Структура("НоменклатурнаяГруппа, Заказ, Спецификация");
	Отбор = Новый Структура();
	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата);
	
	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, НоменклатурнаяГруппа, СтатьяЗатрат, Заказ", "Количество");
	ИспользованныеМатериалы.Загрузить(ТабличнаяЧастьМатериалы);
	
	Для Каждого СтрокаТабличнойЧасти Из ИспользованныеМатериалы Цикл
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		
	    СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВТабЧасти(ИспользованныеМатериалы, "ИспользованныеМатериалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание, ВидОперации = Неопределено)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		Если Не Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
			Возврат;
		КонецЕсли;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
		ОтражатьВУправленческомУчете = Истина;

		СтатьяЗатрат = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтатьяЗатратУслугПоПереработке");
		
		// Попробуем заполнить подразделение организации.
		ПодразделениеОрганизации = УправлениеЗатратами.ПолучитьПодразделениеОрганизации(
			Организация,
			Подразделение,
			ОтражатьВБухгалтерскомУчете
		);
		
		ЗаполнитьСчетаУчетаВШапке();
		
		// Табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			Заказ = Основание;

			Если Заказ.Проведен Тогда

				// Заполним табличные части неполученными ТМЦ по заказу поставщику.
				ЗаполнитьТоварыПоОстаткамУпр();

				Для каждого СтрокаТабЧасти Из Товары Цикл
					СтрокаТабЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				КонецЦикла;
				
				ЗаполнитьУслугиПоОстаткамУпр();
				ЗаполнитьИспользованныеМатериалы();

			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Заказ = Основание.Заказ;
		ПодразделениеОрганизации = Основание.ПодразделениеОрганизации;
		УчитыватьНДС     = Истина;
		СуммаВключаетНДС = Истина;
		
		Если Заказ.Проведен Тогда

			// Заполним табличные части неполученными ТМЦ по заказу поставщику.
			ЗаполнитьТоварыПоПоступлениюИпоОстаткам(Основание);

			Для каждого СтрокаТабЧасти Из Товары Цикл
				СтрокаТабЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			КонецЦикла;
			
			ЗаполнитьУслугиПоОстаткамУпр();
			ЗаполнитьИспользованныеМатериалы();

		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Основание.Проведен Тогда
			// Заполним табличную часть "Товары" по приходному ордеру на товары.
			ЗаполнитьТоварыПоОснованиюУпр(Основание, Товары);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		СуммаДокумента                 = Основание.СуммаДокумента;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
		
		Контрагент  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации( Основание.Организация);
		Организация = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту( Основание.Контрагент);
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
		
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты( ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Для Каждого ТекСтрокаИспользованныеМатериалы Из Основание.ИспользованныеМатериалы Цикл
			
			НоваяСтрока = ИспользованныеМатериалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаИспользованныеМатериалы);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "ИспользованныеМатериалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаПродукция Из Основание.Продукция Цикл
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаПродукция);
			
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Приобретение");

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл
			
			НоваяСтрока = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаУслуги);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаУпр() 

	Возврат Перечисления.СтатусыПартийТоваров.ВПереработку;

КонецФункции // ОпределитьСтатусПартииПриходаУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");

	ТаблицаТоваров.Колонки.Добавить("КоличествоМинус", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.КоличествоМинус = - ?(ЗначениеЗаполнено(СтрокаТаблицы.Количество), СтрокаТаблицы.Количество, 0);
	КонецЦикла;

	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость + 
										 ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента, 
										 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсДокумента, 
										 КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
										 СтруктураШапкиДокумента.КурсДокумента,
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
										 СтруктураШапкиДокумента.КратностьДокумента,
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
    ТаблицаТоваров.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		НДС   = СтрокаТаблицы.НДС;
		Сумма = ?(СуммаВключаетНДС, СтрокаТаблицы.Стоимость - НДС, СтрокаТаблицы.Стоимость);

		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
			СтрокаТаблицы.СуммаРегл = Сумма + НДС;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
											 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
											 СтруктураШапкиДокумента.КурсДокумента,
											 Данные.Курс, 
											 СтруктураШапкиДокумента.КратностьДокумента,
											 Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НДС, СтруктураШапкиДокумента.ВалютаДокумента,
											 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
											 СтруктураШапкиДокумента.КурсДокумента,
											 Данные.Курс, 
											 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета,
											 Данные.Кратность);
			СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту((Сумма+НДС), СтруктураШапкиДокумента.ВалютаДокумента,
											 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
											 СтруктураШапкиДокумента.КурсДокумента,
											 Данные.Курс, 
											 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета,
											 Данные.Кратность);
								 
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуМатериалов(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТоваров.Колонки.Сумма.Имя = "Стоимость";

	ТаблицаТоваров.Колонки.Добавить("КоличествоМинус", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СтрокаТаблицы.Количество = NULL Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;
		СтрокаТаблицы.КоличествоМинус = - СтрокаТаблицы.Количество;
		
		//{15.10.2014 Островерхий заявка №28397
		//Заменим затратные счета и аналитику на данные указанные в шапке
		МассивАналитик = Новый Массив;
		Если ПРГСчетаЗатратВШапке Тогда // Шевченков 20160226 №49300 (Дабы в проводках не было пустого субконто, добавил только условие)
			МассивАналитик.Добавить("НоменклатурнаяГруппа");
		КонецЕсли;
		МассивАналитик.Добавить("ОбъектСтроительства");
		МассивАналитик.Добавить("СпособСтроительства");
		
		Если ПРГСчетаЗатратВШапке Тогда
			
			СтрокаТаблицы.СтатьяЗатрат = СтатьяЗатрат;
			СтрокаТаблицы.СчетЗатрат = СчетЗатрат;
			СтрокаТаблицы.КорСчетБУ = СчетЗатрат;
			СтрокаТаблицы.СчетЗатратНУ = СчетЗатратНУ;
			СтрокаТаблицы.КорСчетНУ = СчетЗатратНУ;
			
			УстановитьЗначенияАналитики(СтрокаТаблицы,МассивАналитик);
			
		Иначе
			
			Для каждого ЭлементМассива Из МассивАналитик Цикл
				СтрокаТаблицы[ЭлементМассива] = Неопределено;
			КонецЦикла;
			
		КонецЕсли; 
		
		Если ОтражатьВБухгалтерскомУчете Тогда
		
			СтрокаТаблицы.ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(
					СтрокаТаблицы.СчетЗатрат,
					СтрокаТаблицы.СтатьяЗатрат);	
		
		КонецЕсли;
		//15.10.2014 Островерхий}
		
	КонецЦикла;
	
	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуМатериаловРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуМатериаловУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуМатериалов()

Процедура УстановитьЗначенияАналитики(СтрокаТаблицы,МассивАналитик)
	
	Для каждого ЭлементМассива Из МассивАналитик Цикл
		
		Если ТипЗнч(СтрокаТаблицы[ЭлементМассива]) = ТипЗнч(ПРГСубконтоШапка1) Тогда
			СтрокаТаблицы[ЭлементМассива] = ПРГСубконтоШапка1;
		ИначеЕсли ТипЗнч(СтрокаТаблицы[ЭлементМассива]) = ТипЗнч(ПРГСубконтоШапка2) Тогда
			СтрокаТаблицы[ЭлементМассива] = ПРГСубконтоШапка2;
		ИначеЕсли ТипЗнч(СтрокаТаблицы[ЭлементМассива]) = ТипЗнч(ПРГСубконтоШапка3) Тогда
			СтрокаТаблицы[ЭлементМассива] = ПРГСубконтоШапка3;
		Иначе	
			СтрокаТаблицы[ЭлементМассива] = Неопределено;	
		КонецЕсли;
		
	КонецЦикла; 	
	
КонецПроцедуры

Процедура ПодготовитьТаблицуМатериаловУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость;

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента, 
										 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсДокумента, 
										 КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
										 СтруктураШапкиДокумента.КурсДокумента,
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
										 СтруктураШапкиДокумента.КратностьДокумента,
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуМатериаловУпр()

//начало изменений Ожиганов 05.04.2016 б/ исправление ошибки в случае если счет затрат указан 91 счет 
Процедура ПРГ_ЗаполнитьАналитикуВКолонке(ПРГСчетЗатрат,ТаблицаТоваров,ВидУчета,ИмяСубкШапка)
	
		Для к =1 По ПРГСчетЗатрат.ВидыСубконто.Количество() Цикл
		     ВидСубконто = ПРГСчетЗатрат.ВидыСубконто[к-1].ВидСубконто;  
			 Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
				      ТаблицаТоваров.ЗаполнитьЗначения(СтатьяЗатрат,"КорСубконто"+ВидУчета+к);
			  ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПодразделениеОрганизации или 
					 ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения Тогда
					ТаблицаТоваров.ЗаполнитьЗначения(ПодразделениеОрганизации,"КорСубконто"+ВидУчета+к);
			  Иначе
				  ТаблицаТоваров.ЗаполнитьЗначения(ЭтотОбъект[ИмяСубкШапка+к],"КорСубконто"+ВидУчета+к);
			  КонецЕсли;		 
		КонецЦикла;	
	
КонецПроцедуры	
//конец изменений 

Процедура ПодготовитьТаблицуМатериаловРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);
	//начало изменений Ожиганов 05.04.2016 б/ исправление ошибки в случае если счет затрат указан 91 счет 
	Если ПРГСчетаЗатратВШапке Тогда
		ТаблицаТоваров.Колонки.Добавить("КорСубконтоБУ1");
		ТаблицаТоваров.Колонки.Добавить("КорСубконтоБУ2");
		ТаблицаТоваров.Колонки.Добавить("КорСубконтоБУ3");
		
		ТаблицаТоваров.Колонки.Добавить("КорСубконтоНУ1");
		ТаблицаТоваров.Колонки.Добавить("КорСубконтоНУ2");
		ТаблицаТоваров.Колонки.Добавить("КорСубконтоНУ3");
		
		ПРГ_ЗаполнитьАналитикуВКолонке(СчетЗатрат, ТаблицаТоваров, "БУ", "ПРГСубконтоШапка");
		ПРГ_ЗаполнитьАналитикуВКолонке(СчетЗатратНУ, ТаблицаТоваров, "НУ", "ПРГСубконтоНУШапка");
		
	КонецЕсли;	
	//конец изменений 

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		Сумма = СтрокаТаблицы.Стоимость;

		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
											 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
											 СтруктураШапкиДокумента.КурсДокумента,
											 Данные.Курс, 
											 СтруктураШапкиДокумента.КратностьДокумента,
											 Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуМатериаловРегл()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		СтруктураОбязательныхПолей.Вставить( "Подразделение");
	КонецЕсли;

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить( "СчетУчетаРасчетовСКонтрагентом");
		СтруктураОбязательныхПолей.Вставить( "ПодразделениеОрганизации");
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, 
								 |ВалютаДокумента, Контрагент, ДоговорКонтрагента, 
								 |КурсВзаиморасчетов,КратностьВзаиморасчетов");

	Если Товары.Количество() > 0 
	//{16.10.2014 Островерхий заявка №28397 
	ИЛИ ИспользованныеМатериалы.Количество() > 0 
	//16.10.2014 Островерхий}  
	Тогда
		СтруктураОбязательныхПолей.Вставить("СтатьяЗатрат");
	КонецЕсли;
	
	// Заказ должен быть заполнен, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		СтруктураОбязательныхПолей.Вставить("Заказ",
			"По выбранному договору установлен способ ведения взаиморасчетов ""По заказам""!
			|Заполните поле ""Заказ""!");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиУпр (СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		//{16.10.2014 Островерхий заявка №28397 
		//Если СтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке("Укажите нематериальную статью затрат (закладка ""Учет затрат"")!", Отказ, Заголовок);
		//КонецЕсли; 
		//16.10.2014 Островерхий} 
		//{15.10.2014 Островерхий заявка №28397
		//Если Не СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке("Укажите производственную статью затрат (закладка ""Учет затрат"")!", Отказ, Заголовок);
		//КонецЕсли;
		//15.10.2014 Островерхий}
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Количество, Номенклатура, Сумма, СтатьяЗатрат");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл

		Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) и НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат.ХарактерЗатрат) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В статье затрат """ + СтрокаТаблицы.СтатьяЗатрат + """ не указан вид расхода (строка № " + СтрокаТаблицы.НомерСтроки + " табличной части ""Услуги"")", Отказ, Заголовок);
		КонецЕсли

	КонецЦикла;

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Процедура формирует движение по регистру сведений "Списанные товары".
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтрокаТабличнойЧасти - СтрокаТаблицыЗначений - Текущая строка таблицы
//	НаборЗаписейСписанныеТовары - РегистрНакопленияНаборЗаписей - Набор записей регистра "Списанные товары"
//
Процедура СформироватьДвижениеПоРегиструСписанныеТовары(
	СтруктураШапкиДокумента,
	СтрокаТабличнойЧасти,
	НаборЗаписейСписанныеТовары
	)

	НоваяСтрока = НаборЗаписейСписанныеТовары.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	
	НоваяСтрока.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	НоваяСтрока.ЗаказПартии = СтруктураШапкиДокумента.Заказ;
	
	НоваяСтрока.ДопустимыйСтатус1 = Перечисления.СтатусыПартийТоваров.ВПереработку;
	НоваяСтрока.ДопустимыйСтатус2 = Перечисления.СтатусыПартийТоваров.Купленный;
	НоваяСтрока.ДопустимыйСтатус3 = Перечисления.СтатусыПартийТоваров.Продукция;
	
//начало изменений Ожиганов 05.04.2016 б/ исправление ошибки в случае если счет затрат указан 91 счет 	
	//Если СтрокаТабличнойЧасти.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
	Если ПРГСчетаЗатратВШапке Тогда
		//ничего не делаем иформация заполнена в процедуреПодготовить ТаблицуМатериаловРегл
	ИначеЕсли СтрокаТабличнойЧасти.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
//конец изменений 	
		НоваяСтрока.КорСубконтоБУ1 = СтрокаТабличнойЧасти.ОбъектСтроительства;
		НоваяСтрока.КорСубконтоБУ2 = СтрокаТабличнойЧасти.СтатьяЗатрат;
		НоваяСтрока.КорСубконтоБУ3 = СтрокаТабличнойЧасти.СпособСтроительства;
	Иначе
		НоваяСтрока.КорСубконтоБУ1 = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		НоваяСтрока.КорСубконтоБУ2 = СтрокаТабличнойЧасти.НоменклатурнаяГруппа;
		НоваяСтрока.КорСубконтоБУ3 = СтрокаТабличнойЧасти.СтатьяЗатрат;
	КонецЕсли;
	
	НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
	НоваяСтрока.Подразделение = СтруктураШапкиДокумента.Подразделение;
	НоваяСтрока.ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизации;
	
	НоваяСтрока.ОтражатьВБухгалтерскомУчете = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	НоваяСтрока.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
	НоваяСтрока.ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН;
		
	НоваяСтрока.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство;
		
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		НоваяСтрока.СчетУчетаНУ = СтрокаТабличнойЧасти.СчетУчетаБУ;
	КонецЕсли;

КонецПроцедуры // СформироватьДвижениеПоРегиструСписанныеТовары()

// Процедура формирует движение по регистру накопления "Незавершенное производство".
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	СтрокаТабличнойЧасти - СтрокаТаблицыЗначений - Текущая строка таблицы
//	ХарактерЗатрат - ПеречислениеСсылка.ХарактерЗатрат - Характер затрат
//  ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
//	НаборЗаписейНезавершенноеПроизводство - РегистрНакопленияНаборЗаписей - Набор записей регистра "Незавершенное производство"
//
Процедура СформироватьДвижениеПоРегиструНезавершенноеПроизводство(
	СтруктураШапкиДокумента,
	СтрокаТабличнойЧасти,
	ХарактерЗатрат,
	ВидОтраженияВУчете,
	НаборЗаписейНезавершенноеПроизводство
	)
	
	Если ХарактерЗатрат <> Перечисления.ХарактерЗатрат.ПроизводственныеРасходы 
		//{15.10.2014 Островерхий заявка №28397
			ИЛИ ПараметрыСеанса.НеведетсяУПРУчетВЧастиЗатратИОС
		//15.10.2014 Островерхий}
		Тогда
		Возврат;
	КонецЕсли;

	НоваяСтрока = НаборЗаписейНезавершенноеПроизводство.Добавить();
	НоваяСтрока.Активность = Истина;
	НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;
	НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
		НоваяСтрока.Заказ = СтрокаТабличнойЧасти.Заказ;
	Иначе
		НоваяСтрока.Заказ = Неопределено;
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		НоваяСтрока.Подразделение = СтруктураШапкиДокумента.Подразделение;
	Иначе
		НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Подразделение = СтруктураШапкиДокумента.ПодразделениеОрганизации;
	КонецЕсли;
	
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете Тогда
		НоваяСтрока.СчетУчета = СтрокаТабличнойЧасти.СчетЗатрат;
		
	ИначеЕсли ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете Тогда
		НоваяСтрока.СчетУчета = СтрокаТабличнойЧасти.СчетЗатратНУ;
		
	КонецЕсли;
	
	НоваяСтрока.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеКоличестваВПроизводствоОперативно;
	НоваяСтрока.СписаниеПартий = Истина;
	
КонецПроцедуры // СформироватьДвижениеПоРегиструНезавершенноеПроизводство()

// Процедура формирует двжиения по партиям товаров переданных
//
// Параметры:
//	СтруктураШапкиДокумента, - Структура - Реквизиты документа
//	ТаблицаПоМатериалам - ТаблицаЗначений - Таблица использованных материалов
//	
Процедура ДвиженияСписаниеПартий(
	СтруктураШапкиДокумента,
	ТаблицаПоМатериалам
	)
	
	Если ТаблицаПоМатериалам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоМатериалам Цикл

		СформироватьДвижениеПоРегиструСписанныеТовары(
			СтруктураШапкиДокумента,
			СтрокаТабличнойЧасти,
			Движения.СписанныеТовары
		);
		
		// Если режим онлайн данное движение формируется в глоб.функции СписаниеПартийТоваров()
		Если Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
				И НЕ глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументов
		    Тогда
				ХарактерЗатратУУ = СтрокаТабличнойЧасти.ХарактерЗатрат;
				
				СформироватьДвижениеПоРегиструНезавершенноеПроизводство(
					СтруктураШапкиДокумента,
					СтрокаТабличнойЧасти,
					ХарактерЗатратУУ,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете,
					Движения.НезавершенноеПроизводство
				);
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
				И НЕ глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух
			Тогда
				ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(
					СтрокаТабличнойЧасти.СчетЗатрат, 
					СтрокаТабличнойЧасти.СтатьяЗатрат
				);
				
				СформироватьДвижениеПоРегиструНезавершенноеПроизводство(
					СтруктураШапкиДокумента,
					СтрокаТабличнойЧасти,
					ХарактерЗатратБУ,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете,
					Движения.НезавершенноеПроизводствоБухгалтерскийУчет
				);
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
				И НЕ глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовНал
			Тогда
				ХарактерЗатратНУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(
					СтрокаТабличнойЧасти.СчетЗатратНУ,
					СтрокаТабличнойЧасти.СтатьяЗатрат,
					"Налоговый"
				);
				
				СформироватьДвижениеПоРегиструНезавершенноеПроизводство(
					СтруктураШапкиДокумента,
					СтрокаТабличнойЧасти,
					ХарактерЗатратНУ,
					Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете,
					Движения.НезавершенноеПроизводствоНалоговыйУчет
				);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Движения.СписанныеТовары.Записать();
	
	// Запишем движения регистров "Незавершенное производство" явно, т.к. будут добавлены еще движения по затратам.
	Если Движения.НезавершенноеПроизводство.Модифицированность() Тогда
		Движения.НезавершенноеПроизводство.Записать();
	КонецЕсли;
	Если Движения.НезавершенноеПроизводствоБухгалтерскийУчет.Модифицированность() Тогда
		Движения.НезавершенноеПроизводствоБухгалтерскийУчет.Записать();
	КонецЕсли;
	Если Движения.НезавершенноеПроизводствоНалоговыйУчет.Модифицированность() Тогда
		Движения.НезавершенноеПроизводствоНалоговыйУчет.Записать();
	КонецЕсли;
		
	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
		ЭтотОбъект,
		Дата,
		СтруктураШапкиДокумента.Организация,
		ОтражатьВУправленческомУчете,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации
	);
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(
		Ссылка, 
		Движения.СписанныеТовары.Выгрузить()
	);
	
КонецПроцедуры // ДвиженияСписаниеПартий()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если (Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН) Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений = Движения.РасходыПриУСН;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаДвижений, 
							Перечисления.ВидыРасходовУСН.Услуги, СтруктураШапкиДокумента.ДоговорКонтрагента,
							Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
							
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаДвижений, 
							Перечисления.ВидыРасходовУСН.Услуги, СтруктураШапкиДокумента.ДоговорКонтрагента,
							Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
																
	//Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры
                                                                                                                       
// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							  ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоМатериалам, 
							  ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);

	ДвиженияСписаниеПартий(
		СтруктураШапкиДокумента,
		ТаблицаПоМатериалам
	);
	
	// Формирование движений по отражению затрат.
	УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		СтруктураШапкиДокумента, 
		ТаблицаПоТоварам
	);
	
	//{15.10.2014 Островерхий заявка №28397
	мОтражатьВУправленческомУчете = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	СтруктураШапкиДокумента.ОтражатьВУправленческомУчете = Ложь;
	//15.10.2014 Островерхий}
	
	УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		СтруктураШапкиДокумента, 
		ТаблицаПоУслугам
	);

	//{15.10.2014 Островерхий заявка №28397
	СтруктураШапкиДокумента.ОтражатьВУправленческомУчете = мОтражатьВУправленческомУчете;
	//15.10.2014 Островерхий}

	
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
							  ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоМатериалам, 
							  ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
	                          Отказ, Заголовок, СтруктураШапкиДокумента);

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
							  ТаблицаПоТоварам, ТаблицаПоУслугам, 
							  ТаблицаПоВзаиморасчетам, Отказ, Заголовок);

	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
							  ТаблицаПоУслугам, Отказ, Заголовок);
							  
	// Формирование движений документа для подсистемы НДС.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		ТаблицыДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
		
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоМатериалам, 
							ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

    УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		        мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		        ВидДвиженияНакопления.Расход, Отказ, Заголовок);

	// Движения по регистру ЗаказыПоставщикам
	Если мЕстьЗаказ Тогда
	
		НаборДвижений = Движения.ЗаказыПоставщикам;
		
		// Проверка остатков при оперативном проведении.
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Услуги", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
								
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
									
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику",    Заказ);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартииПриходаУпр());
								
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;

	КонецЕсли;

	// МАТЕРИАЛЫ ПО РЕГИСТРУ МатериалыВПроизводстве.
	НаборДвижений = Движения.МатериалыВПроизводстве;
	
	ТаблицаПоМатериаламОперативныйУчет = ТаблицаПоМатериалам.Скопировать();
	
	КолвоЭлементов = ТаблицаПоМатериаламОперативныйУчет.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
   		СтрокаТаблицы = ТаблицаПоМатериаламОперативныйУчет[КолвоЭлементов - ОбратныйИндекс];
  
   		Если Не СтрокаТаблицы.ВестиОперативныйУчетОстатковНЗП Тогда
      		ТаблицаПоМатериаламОперативныйУчет.Удалить(СтрокаТаблицы);
		КонецЕсли;

	КонецЦикла;

	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоМатериаламОперативныйУчет);
								
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
									
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение", Подразделение);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации",   Перечисления.КодыОперацийМатериалыВПроизводстве.СписаниеПартийВПроизводствоОперативно);
								
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
	// УСЛУГИ ПО РЕГИСТРУ Закупки.
	НаборДвижений = Движения.Закупки;
	
	ТабИмен = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварам, ТабИмен, "НДС");
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварам, ТабИмен, "НДСУпр", "НДС");
	
	ТабИменУслуги = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоУслугам, ТабИменУслуги, "НДС");
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоУслугам, ТабИменУслуги, "НДСУпр", "НДС");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
				
		// В этом случае таблицы документа обрабатываются особым образом
		ТаблицаДвижений = Движения.Закупки.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаДвиженийТовары = ТаблицаДвижений.Скопировать();
		ТаблицаДвиженийУслуги = ТаблицаДвижений.Скопировать();
			
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварам, ТаблицаДвиженийТовары, Проект, Дата, "Закупки");
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоУслугам, ТаблицаДвиженийУслуги, Проект, Дата, "Закупки");
			
		// Вставляем уже подготовленные таблицы движений.
		ТаблицыДанныхДокумента = Новый Структура;
		ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам", ТаблицаДвиженийТовары);
		ТаблицыДанныхДокумента.Вставить("ТаблицаПоУслугам", ТаблицаДвиженийУслуги);
						
	Иначе
						
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
										
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
	КонецЕсли;
	
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоТоварам, ТабИмен);
	ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоУслугам, ТабИменУслуги);
										
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартииПриходаУпр());
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументЗакупки",    Ссылка);
									
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, Неопределено, ТаблицыДанныхДокумента, Дата);
		
	// Списание из регистра остатков
	Если ТаблицаПоМатериалам.Количество() > 0 Тогда
		
		// Контроль остатков товара
		ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("ИспользованныеМатериалы", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку, Отказ, Заголовок, РежимПроведения);
		
		Если НЕ Отказ Тогда
			
			НаборДвиженийТовары = Движения.ТоварыПереданные;
			
			СтруктураТаблицДокумента = Новый Структура("ТаблицаПоМатериалам", ТаблицаПоМатериалам);
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвиженийТовары, СтруктураТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент", Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", Заказ);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвиженийТовары, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли; 
		
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
									ТаблицаПоВзаиморасчетам, Отказ, Заголовок);

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	ПроводкиБУ = Движения.Хозрасчетный;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПроводкиНУ = Движения.Налоговый;
	Конецесли;

	// Движения по производственным регистрам, в случае
	// поступления от контрагента услуг производственного характера
	ДатаДока = Дата;

	Если Не Отказ Тогда
		
		// Формирование проводок по ТЧ "Услуги"
		Для Каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл

			НоваяПроводка = ПроводкиБУ.Добавить();
			НоваяПроводка.Организация = Организация;
			НоваяПроводка.Период      = ДатаДока;
			НоваяПроводка.Содержание  = СтрокаТЧ.Содержание;
			
			Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				НоваяПроводка.Сумма = СтрокаТЧ.ПроводкаСумма + СтрокаТЧ.ПроводкаСуммаНДС;
			Иначе
				НоваяПроводка.Сумма = СтрокаТЧ.ПроводкаСумма;
			КонецЕсли;
			
			ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаТЧ.СчетЗатрат);

			НоваяПроводка.СчетДт = СтрокаТЧ.СчетЗатрат;
			Если ПроизводственныеРасходы Тогда
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТЧ.СтатьяЗатрат);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        СтруктураШапкиДокумента.ПодразделениеОрганизации);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТЧ.ОбъектСтроительства);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СпособыСтроительства", СтрокаТЧ.СпособСтроительства);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаТЧ.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаТЧ.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаТЧ.Субконто3);
			КонецЕсли;

			НоваяПроводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);

			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				НоваяПроводка.ВалютаКт 		  = СтруктураШапкиДокумента.ВалютаДокумента;
				НоваяПроводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаВал;
			КонецЕсли;

			НалоговыйАгентЗаСчетСобственныхСредств = УчетНДС.НалоговыйАгентЗаСчетСобственныхСредств(СтрокаТЧ.ВидЦенности);
			
			Если СтруктураШапкиДокумента.УчитыватьНДС 
			   И НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость 
			   И СтрокаТЧ.ПроводкаСуммаНДС > 0 Тогда

				НоваяПроводка = ПроводкиБУ.Добавить();
				НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
				НоваяПроводка.Период      = ДатаДока;
				НоваяПроводка.Содержание  = СтрокаТЧ.Содержание;
				НоваяПроводка.Сумма       = СтрокаТЧ.ПроводкаСуммаНДС;

				НоваяПроводка.СчетДт = СтрокаТЧ.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СФПолученные", Ссылка);

				Если Не НалоговыйАгентЗаСчетСобственныхСредств 
					Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
						
					НоваяПроводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						НоваяПроводка.ВалютаКт = СтруктураШапкиДокумента.ВалютаДокумента;
						НоваяПроводка.ВалютнаяСуммаКт = СтрокаТЧ.ПроводкаСуммаНДС / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
					КонецЕсли;
					
				Иначе
					
					НоваяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт,НоваяПроводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт,НоваяПроводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					
				КонецЕсли;					

			КонецЕсли;
			
			Если СтруктураШапкиДокумента.УчетАгентскогоНДС
				И (Не НалоговыйАгентЗаСчетСобственныхСредств 
				Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда
				// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
				Проводка2 = ПроводкиБУ.Добавить();

				Проводка2.Период                 = Дата;
				Проводка2.Организация            = СтруктураШапкиДокумента.Организация;
				Проводка2.Сумма                  = СтрокаТЧ.ПроводкаСуммаНДС;
				Проводка2.Содержание             = СтрокаТЧ.Содержание + " (НДС в качестве налогового агента)";

				Проводка2.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				Проводка2.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
				Проводка2.СубконтоДт.Договоры    = СтруктураШапкиДокумента.ДоговорКонтрагента;
				
				Если Проводка2.СчетДт.Валютный Тогда
					Проводка2.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка2.ВалютнаяСуммаДт = СтрокаТЧ.ПроводкаСуммаНДС / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
				КонецЕсли;
					
				Если Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
					Проводка2.СчетКт                 = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				Иначе
					Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				КонецЕсли;	

			КонецЕсли;

		КонецЦикла;

		// Формирование проводок по ТЧ "Товары"
		Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

			НоваяПроводка = ПроводкиБУ.Добавить();
			НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
			НоваяПроводка.Период      = ДатаДока;
			НоваяПроводка.Содержание  = СтрокаТЧ.Содержание;
			
			Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				НоваяПроводка.Сумма = СтрокаТЧ.ПроводкаСумма + СтрокаТЧ.ПроводкаСуммаНДС;
			Иначе
				НоваяПроводка.Сумма = СтрокаТЧ.ПроводкаСумма;
			КонецЕсли;

			НоваяПроводка.СчетДт = СтруктураШапкиДокумента.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         СтруктураШапкиДокумента.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        СтруктураШапкиДокумента.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);

			НоваяПроводка.СчетКт = СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				НоваяПроводка.ВалютаКт = СтруктураШапкиДокумента.ВалютаДокумента;
				НоваяПроводка.ВалютнаяСуммаКт = СтрокаТЧ.ПроводкаСумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
			КонецЕсли;

			Если СтруктураШапкиДокумента.УчитыватьНДС 
			   И НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость 
			   И СтрокаТЧ.ПроводкаСуммаНДС > 0 Тогда

				НоваяПроводка = ПроводкиБУ.Добавить();
				НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
				НоваяПроводка.Период      = ДатаДока;
				НоваяПроводка.Содержание  = СтрокаТЧ.Содержание;
				НоваяПроводка.Сумма       = СтрокаТЧ.ПроводкаСуммаНДС;

				НоваяПроводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СФПолученные", Ссылка);

				НоваяПроводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					НоваяПроводка.ВалютаКт = СтруктураШапкиДокумента.ВалютаДокумента;
					НоваяПроводка.ВалютнаяСуммаКт = СтрокаТЧ.ПроводкаСуммаНДС / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
				КонецЕсли;

			КонецЕсли;
			
			Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
				// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
				Проводка2 = ПроводкиБУ.Добавить();

				Проводка2.Период                 = Дата;
				Проводка2.Организация            = СтруктураШапкиДокумента.Организация;
				Проводка2.Сумма                  = СтрокаТЧ.ПроводкаСуммаНДС;
				Проводка2.Содержание             = СтрокаТЧ.Содержание + " (НДС в качестве налогового агента)";

				Проводка2.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				Проводка2.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
				Проводка2.СубконтоДт.Договоры    = СтруктураШапкиДокумента.ДоговорКонтрагента;
				
				Если Проводка2.СчетДт.Валютный Тогда
					Проводка2.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка2.ВалютнаяСуммаДт = СтрокаТЧ.ПроводкаСуммаНДС / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
				КонецЕсли;
					
				Проводка2.СчетКт                 = ПланыСчетов.Хозрасчетный.НДС;

			КонецЕсли;

		КонецЦикла;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

			Для Каждого СтрокаТЧ Из ТаблицаПоУслугам Цикл

				НоваяПроводка = ПроводкиНУ.Добавить();
				НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
				НоваяПроводка.Период      = ДатаДока;
				НоваяПроводка.Содержание  = СтрокаТЧ.Содержание;
				
				Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
					НоваяПроводка.Сумма = СтрокаТЧ.ПроводкаСумма + СтрокаТЧ.ПроводкаСуммаНДС;
				Иначе
					НоваяПроводка.Сумма = СтрокаТЧ.ПроводкаСумма;
				КонецЕсли;
				
				ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаТЧ.СчетЗатратНУ, "Налоговый");

				НоваяПроводка.СчетДт = СтрокаТЧ.СчетЗатратНУ;
				Если ПроизводственныеРасходыНУ Тогда
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТЧ.СтатьяЗатрат);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        СтруктураШапкиДокумента.ПодразделениеОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТЧ.ОбъектСтроительства);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СпособыСтроительства", СтрокаТЧ.СпособСтроительства);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаТЧ.СубконтоНУ1);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаТЧ.СубконтоНУ2);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаТЧ.СубконтоНУ3);
				КонецЕсли;

				НоваяПроводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);

			КонецЦикла;
			
			Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

				НоваяПроводка = ПроводкиНУ.Добавить();
				НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
				НоваяПроводка.Период      = ДатаДока;
				НоваяПроводка.Содержание  = СтрокаТЧ.Содержание;
				
				Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
					НоваяПроводка.Сумма = СтрокаТЧ.ПроводкаСумма + СтрокаТЧ.ПроводкаСуммаНДС;
				Иначе
					НоваяПроводка.Сумма = СтрокаТЧ.ПроводкаСумма;
				КонецЕсли;

				НоваяПроводка.СчетДт = СтруктураШапкиДокумента.СчетЗатратНУ;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         СтруктураШапкиДокумента.СтатьяЗатрат);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        СтруктураШапкиДокумента.ПодразделениеОрганизации);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);

				НоваяПроводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетКт, НоваяПроводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);

			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;

	// Движения по взаиморасчетам
	Если мСтруктураПараметровВзаиморасчетов.ПроводитьПоВзаиморасчетам Тогда
	   
		СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок,, ТаблицаПоВзаиморасчетам, СтруктураШапкиДокумента);
		Если НЕ СтруктураПараметровЗачетАванса = Ложь Тогда
			// Движения по регистру сведений РасчетыПоПриобретениюОрганизации
			// и проводки по зачету аванса
			ТаблицаРасчетовПоПриобретению = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовитьТаблицуДляРегистраРасчетовПоПриобретению(
				мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента);
			СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, 
				ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ТаблицаРасчетовПоПриобретению);
			// Движения по регистру РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
			Конецесли;
			БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса, 
				мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
		Конецесли;

	КонецЕсли; // Движения по взаиморасчетам

	ПроводкиБУ.Записать(Ложь);
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		ПроводкиНУ.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамРегл()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НДС

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ) Экспорт

	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ТабЧасть = ТаблицаДокумента.Значение;

		Если Не ТабЧасть.Количество() = 0 Тогда 
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТабЧасть, Отказ);
		КонецЕсли; 

	КонецЦикла;
	
	// Если по договору с контрагентом организация выступает в качестве налогового агента, требуется отразить начисление НДС
	Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента);
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");

	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СчетУчетаНДС", 		"Ссылка.СчетУчетаНДС");
	
	СтруктураПолей.Вставить("СчетУчета",   			"Ссылка.СчетЗатрат" );
	СтруктураПолей.Вставить("СчетЗатрат",   		"Ссылка.СчетЗатрат" );
	СтруктураПолей.Вставить("СчетУчетаБУ",   		"Ссылка.СчетЗатрат" );
	СтруктураПолей.Вставить("СчетУчетаНУ", 			"Ссылка.СчетЗатратНУ" );
	СтруктураПолей.Вставить("СчетЗатратНУ", 		"Ссылка.СчетЗатратНУ" );
	
	СтруктураПолей.Вставить("ОтражениеВУСН",        "ОтражениеВУСН");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетЗатрат",   "СчетЗатрат" );
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетЗатратНУ", "СчетЗатратНУ" );
	СтруктураПолей.Вставить("Субконто1",    "Субконто1");
	СтруктураПолей.Вставить("Субконто2",    "Субконто2");
	СтруктураПолей.Вставить("Субконто3",    "Субконто3");
	СтруктураПолей.Вставить("СубконтоНУ1",  "СубконтоНУ1");
	СтруктураПолей.Вставить("СубконтоНУ2",  "СубконтоНУ2");
	СтруктураПолей.Вставить("СубконтоНУ3",  "СубконтоНУ3");
	СтруктураПолей.Вставить("ОтражениеВУСН","ОтражениеВУСН");

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиИспользованныеМатериалыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ" , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетЗатрат"  , "СчетЗатрат");
	СтруктураПолей.Вставить("КорСчетБУ"   , "СчетЗатрат");
	СтруктураПолей.Вставить("СчетУчетаНУ" , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетЗатратНУ", "СчетЗатратНУ");
	СтруктураПолей.Вставить("КорСчетНУ"   , "СчетЗатратНУ");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиИспользованныеМатериалыРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Перем ВидОперации;
	
	ОтражатьВУправленческомУчете = Истина;
	ОтражатьВБухгалтерскомУчете  = Истина;
	ОтражатьВНалоговомУчете 	 = Истина;
	
	ТипЗначения = ТипЗнч(Основание);
	Если ТипЗначения = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗначения = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки")
	 ИЛИ ТипЗначения = Тип("ДокументСсылка.РеализацияУслугПоПереработке")
	Тогда

		ЗаполнитьДокументПоОснованиюУпр(Основание, ВидОперации);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
		
		Если НЕ ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
			Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
			   И ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

				ОтражатьВНалоговомУчете = Истина;

			КонецЕсли;

			Для каждого СтрокаТЧ Из Товары Цикл
				СтрокаТЧ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);
	
	Если Не мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.ЗаполнитьПроектВСтрокахТабЧасти(ЭтотОбъект, Услуги);
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
					 
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");

	// Заполним субконто затрат
	СчетаУчетаВДокументах.ЗаполнитьСубконтоТабличнойЧасти("Услуги", ЭтотОбъект, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//{15.10.2014 Островерхий заявка №28397
	Если ПРГСчетаЗатратВШапке Тогда
	
		Для каждого СтрокаТаблицы Из ИспользованныеМатериалы Цикл
			СтрокаТаблицы.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();	
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из Услуги Цикл
			СтрокаТаблицы.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();	
		КонецЦикла;

	КонецЕсли; 
	//15.10.2014 Островерхий}	
	
КонецПроцедуры // ПередЗаписью

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ) Экспорт

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли; 
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
   	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

	СтруктураШапкиДокумента.Вставить("Сделка", Заказ); // Для контроля взаиморасчетов


	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                   , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                   , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"                , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом"  , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "УчетАгентскогоНДС"                       , "УчетАгентскогоНДС");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидАгентскогоДоговора"         , "ВидАгентскогоДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "НалоговыйАгентПоОплате"        , "НалоговыйАгентПоОплате");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"        , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Заказ"               , "ВидОперации"                   , "СделкаВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "СписыватьПартииПриПроведенииДокументов", "СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам", "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
		
	СтруктураШапкиДокумента.Вставить("СписаниеПартий", Ложь);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Вставить("Услуга"                , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                 , "Номенклатура.Набор");
	СтруктураПолей.Вставить("ЗаказПокупателя"       , "Заказ");
	СтруктураПолей.Вставить("Заказ"					, "Заказ");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"   , "Заказ.ВидОперации");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
							"Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"      , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                  , "Цена");
	СтруктураПолей.Вставить("Коэффициент"           , "Коэффициент");
	СтруктураПолей.Вставить("СтатьяЗатрат",            "Ссылка.СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат",          "Ссылка.СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ВидЗатрат",          	   "Ссылка.СтатьяЗатрат.ВидЗатрат");
	СтруктураПолей.Вставить("ПодразделениеОрганизации","Ссылка.ПодразделениеОрганизации");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;
	КонецЕсли;
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"           , "Номенклатура");
	СтруктураПолей.Вставить("Набор"                  , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"             , "Количество");
	СтруктураПолей.Вставить("Сумма"                  , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"              , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                    , "СуммаНДС");
	
	СтруктураПолей.Вставить("Услуга",                  "Номенклатура.Услуга");
	СтруктураПолей.Вставить("ЗаказПокупателя", 		   "Заказ");
	СтруктураПолей.Вставить("Заказ", 				   "Заказ");
	СтруктураПолей.Вставить("СтатьяЗатрат",            "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат",          "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ВидЗатрат",          	   "СтатьяЗатрат.ВидЗатрат");
	СтруктураПолей.Вставить("Продукция",               "Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукции", "ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияПродукции",          "СерияПродукции");
	СтруктураПолей.Вставить("Цена"                   , "Цена");
	СтруктураПолей.Вставить("ПодразделениеОрганизации","Ссылка.ПодразделениеОрганизации");
	СтруктураПолей.Вставить("ПроектЗатрат", "Проект");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураПолей.Вставить("Проект", "Проект");
	КонецЕсли;

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей);
	
	СтруктураПолей.Вставить("ОбъектСтроительства", "ОбъектСтроительства");
	СтруктураПолей.Вставить("СпособСтроительства", "СпособСтроительства");
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоУслугам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	//Заполнение счетов в документах на этапе проведения
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаШапки			(СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Услуги", ТаблицаПоУслугам, СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента,СтруктураШапкиДокумента.НДСВключенВСтоимость,мВалютаРегламентированногоУчета);
	
		
    БухгалтерскийУчет.СформироватьКолонкиДляСодержанияПроводкиПоВходящемуДокументу(ТаблицаПоУслугам, "вх.док.", НомерВходящегоДокумента, ДатаВходящегоДокумента);	
	БухгалтерскийУчет.СформироватьСодержаниеПроводкиПоВходящемуДокументу(ТаблицаПоУслугам, "Услуги по переработке ");
	БухгалтерскийУчет.СформироватьКолонкиДляСодержанияПроводкиПоВходящемуДокументу(ТаблицаПоТоварам, "вх.док.", НомерВходящегоДокумента, ДатаВходящегоДокумента);	
	БухгалтерскийУчет.СформироватьСодержаниеПроводкиПоВходящемуДокументу(ТаблицаПоТоварам, "Услуги по переработке ");
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам;
    Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТара();
	СтруктураПолей.Вставить("ЗаказПокупателя"      , "Ссылка.Сделка");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"  , "Ссылка.Сделка.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя", "Ссылка.Сделка.Склад");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
							"Ссылка.Сделка.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Использованные материалы".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтрокиДокумента"      , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ВестиОперативныйУчетОстатковНЗП", "Номенклатура.ВестиОперативныйУчетОстатковНЗП");
	
	СтруктураПолей.Вставить("Затрата"              		, "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаЗатраты"		, "ХарактеристикаНоменклатуры");

	СтруктураПолей.Вставить("Услуга"                	, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Заказ"       				, "Заказ");
	СтруктураПолей.Вставить("ЗаказСписания"       		, "Заказ");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"      	, "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Цена"                  	, "Цена");
	СтруктураПолей.Вставить("Коэффициент"           	, "Коэффициент");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"  	, "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СтатьяЗатрат"  			, "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат"  			, "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ВидЗатрат"  				, "СтатьяЗатрат.ВидЗатрат");
	СтруктураПолей.Вставить("ОбъектСтроительства"		, "ОбъектСтроительства");
	СтруктураПолей.Вставить("СпособСтроительства"		, "СпособСтроительства");

	// Дополним полями, нужными для регл. и упр. учета
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ДополнитьСтруктуруПолейТабличнойЧастиИспользованныеМатериалыРегл(СтруктураПолей);
	КонецЕсли;
	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ИспользованныеМатериалы", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоМатериалам = ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);
	
	ПроводитьПоВзаиморасчетам = (СуммаДокумента > 0);
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураОбязательныхПолей = Новый Структура();
	СтруктураОбязательныхПолей.Вставить("Номенклатура");
	СтруктураОбязательныхПолей.Вставить("Количество");
	//{16.10.2014 Островерхий заявка №28397 
	Если НЕ ПРГСчетаЗатратВШапке Тогда
		СтруктураОбязательныхПолей.Вставить("СтатьяЗатрат");	
	КонецЕсли;  
	//16.10.2014 Островерхий} 

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ИспользованныеМатериалы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ИспользованныеМатериалы", ТаблицаПоМатериалам, Отказ, Заголовок);
	
	//Заполнение счетов в документах на этапе проведения
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаШапки			(СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти	("Услуги", 						ТаблицаПоУслугам, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//{16.10.2014 Островерхий заявка №28397 
	Если НЕ ПРГСчетаЗатратВШапке Тогда
		СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("ИспользованныеМатериалы", 	ТаблицаПоМатериалам, 	СтруктураШапкиДокумента, Отказ, Заголовок);;	
	КонецЕсли; 
	//16.10.2014 Островерхий} 
	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;
	
	мЕстьЗаказ = ЗначениеЗаполнено(Заказ);
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента,
							ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоМатериалам, 
							ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);

	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоМатериалам", ТаблицаПоМатериалам));
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	 
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мУказаниеПроектовВТабличнойЧастиДокументов = УправлениеПроектами.УказаниеПроектовВТабличнойЧастиДокументов();

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяСделкиВШапкеДокумента", "Заказ"); 

