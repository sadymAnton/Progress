//m.ionov@a-prof.ru 10.09.2014
//Для задания ограничения скидки будем использовать типовой реквизит "ОграничениеСкидкиНаценки". Увеличиваем точность до 3 знаков (для задания количества)
//----m.ionov@a-prof.ru---
Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Проверяет необходимость расчета автоматических скидок.
//
// Параметры:
//  ТекВид - вид автоматических скидок, для которого нужно выполнить проверку.
//
Функция РассчитыватьАвтоматическиеСкидки(ТекВид)
	ИспользованиеСкидок = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
	Если НЕ ЗначениеЗаполнено(ИспользованиеСкидок) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТекВид = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
		Результат = ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара;
	ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
		Результат = ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента;
	ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
		Результат = ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте;
	ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
		Результат = ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты;
	Иначе
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции // РассчитыватьАвтоматическиеСкидки()

// Функция возвращает массив строк из ТЧ "СоставНабора"
// по заданному ключу строки.
//
// Параметры:
//  КлючСтроки – ключ по которому нужно отобрать строки.
//  СтрокаТабличнойЧасти – строка ТЧ "Бонусы". Если указана,
//   и СтрокаТабличнойЧасти.Номенклатура.Комплект,
//   то в массиве возвращается только эта строка.
//
// Возвращаемое значение:
//  Массив, состоящий из строк ТЧ "СоставНабора"
//  или из одного элемента - переданная СтрокаТабличнойЧасти.
//
Функция ПолучитьСоставСтроки(КлючСтроки, СтрокаТабличнойЧасти = Неопределено) Экспорт

	Если СтрокаТабличнойЧасти <> Неопределено И Не СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить(СтрокаТабличнойЧасти);
	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСтроки", КлючСтроки);

		МассивЭлементов = СоставНабора.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;

	Возврат МассивЭлементов;

КонецФункции // ПолучитьСоставСтроки()

// Функция определяет пуст ли состав ТЧ "СоставНабора"
// по заданному ключу строки.
//
// Параметры:
//  КлючСтроки – ключ, по которому нужно определить, пуст ли состав.
//
// Возвращаемое значение:
//  Булево. Истина - если, состав по заданному ключу пустой.
//
Функция СоставСтрокиНеЗаполнен(КлючСтроки) Экспорт

	Результат = (СоставНабора.Найти(КлючСтроки, "КлючСтроки") = Неопределено);

	Возврат Результат;

КонецФункции // СоставСтрокиНеЗаполнен()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов, влияющих на проведение, не заполнен или
// заполнен некорректно, то устанавливается флаг отказа в проведении.
//
// Параметры:
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ВидОперации");
	СтруктураОбязательныхПолей.Вставить("ДатаНачала");

	Если ВидОперации <> Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.НатуральныеСкидки Тогда
		СтруктураОбязательныхПолей.Вставить("Валюта");
	КонецЕсли;

	Если ДляВсейНоменклатуры И ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре Тогда
		СтруктураОбязательныхПолей.Вставить("Качество");
	КонецЕсли;
	
	//m.ionov@a-prof.ru 27.01.2015
	//>>170816 Если ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.Период Тогда
		СтруктураОбязательныхПолей.Вставить("ДатаОкончания");
	//>>170816 КонецЕсли;
	//----m.ionov@a-prof.ru---

	//{20.12.2016 Островерхий заявка №60385 
	Если СтруктураШапкиДокумента.Дата >= '20161220' Тогда
		СтруктураОбязательныхПолей.Вставить("ТипСкидкиНаценки");	
	КонецЕсли;  
	//20.12.2016 Островерхий} 
	
	Если (ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре
	 Или ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоЦеновымГруппам)
	   И (Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты
	 Или Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт
	 Или Условие = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗначениеУсловия");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если ДатаНачала > ДатаОкончания И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата начала действия скидки не может быть больше даты окончания действия скидки" , Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения табличной части "Товары".
// Если какой-то из реквизитов, влияющих на проведение, не заполнен или
// заполнен некорректно, то устанавливается флаг отказа в проведении.
//
// Параметры:
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	//m.ionov@a-prof.ru 29.09.2014
	//СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Качество");
	СтруктураОбязательныхПолей = Новый Структура("Качество");
	//----m.ionov@a-prof.ru---

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//m.ionov@a-prof.ru 29.09.2014
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер " + СокрЛП(ТаблицаПоТоварам.Индекс(СтрокаТаблицы)+1) + " табличной части товары ";

		// Номенклатура.
		//>>040816 Степанов 54372
		//Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
		//	И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Брендообъем) 
		//	И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ТоварнаяКатегория) Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "должна быть заполнена или номенклатура или брендообъем или товарная категория.", Отказ, Заголовок);
		//КонецЕсли;  	
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Брендообъем) 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ТоварнаяКатегория) 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОбъектСкидки) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "должна быть заполнена или номенклатура или брендообъем или товарная категория или Объект скидки.", Отказ, Заголовок);
		КонецЕсли;  	
		
	КонецЦикла;
    //----m.ionov@a-prof.ru---

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения табличной части "ЦеновыеГруппы".
// Если какой-то из реквизитов, влияющих на проведение, не заполнен или
// заполнен некорректно, то устанавливается флаг отказа в проведении.
//
// Параметры:
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЦеновыеГруппы(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ЦеновыеГруппы.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить перечень ценовых групп!", Отказ, Заголовок);
	КонецЕсли;

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ЦеноваяГруппа,  Качество");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ЦеновыеГруппы", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЦеновыеГруппы()

// Проверяет правильность заполнения табличной части "Бонусы".
// Если какой-то из реквизитов, влияющих на проведение, не заполнен или
// заполнен некорректно, то устанавливается флаг отказа в проведении.
//
// Параметры:
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиБонусы(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если Бонусы.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить перечень бонусов!", Отказ, Заголовок);
	КонецЕсли;

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Качество, СпецПредложение");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Бонусы", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["Бонусы"].Представление();

	Для Каждого СтрокаБонус Из Бонусы Цикл
		Если (ЗначениеЗаполнено(СтрокаБонус.Номенклатура)
		   И СтрокаБонус.Номенклатура.Услуга)
		 Или (ЗначениеЗаполнено(СтрокаБонус.СпецПредложение)
		   И СтрокаБонус.СпецПредложение.Услуга) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаБонус.НомерСтроки) +
			                                """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится услуга. Услуг здесь быть не должно!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиБонусы()

// Проверяет правильность заполнения табличной части "СоставНабора".
// Если какой-то из реквизитов, влияющих на проведение, не заполнен или
// заполнен некорректно, то устанавливается флаг отказа в проведении.
//
// Параметры:
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСоставНабора(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["Бонусы"].Представление();

	Для Каждого СтрокаБонус Из Бонусы Цикл
		Если СтрокаБонус.Номенклатура.Комплект Тогда
			Если СоставСтрокиНеЗаполнен(СтрокаБонус.КлючСтроки - 1) Тогда
				СтрокаНачалаСообщенияОбОшибке = "Для комплекта номенклатуры в строке номер """+ СокрЛП(СтрокаБонус.НомерСтроки) +
				                                """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан состав!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		Если СоставСтрокиНеЗаполнен(СтрокаБонус.КлючСтроки) Тогда
			СтрокаНачалаСообщенияОбОшибке = "Для спец. предложения в строке номер """+ СокрЛП(СтрокаБонус.НомерСтроки) +
			                                """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан состав!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСоставНабора()

// Выполняет движения по регистрам.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоТоварам, ТаблицаПоПолучателям, ТаблицаПоДнямНедели, ТаблицаПоЦеновымГруппам, ТаблицаПоБонусам, Отказ, Заголовок)

	
	//>>040816 Степанов 54372 закомментировано движение по неиспользуемым далее регистрам СкидкиНаценкиНоменклатуры , СкидкиНаценкиПоЦеновымГруппам , СкидкиНоменклатурыНатуральные, ВремяДействияСкидок
	
	//Если СтруктураШапкиДокумента.ДляВсехПолучателей Тогда
	//	ТаблицаПоПолучателям.Очистить();

	//	ПустойПолучатель = ТаблицаПоПолучателям.Добавить();
	//	Если ВидСкидки = Перечисления.ВидыСкидок.Оптовая Тогда
	//		ПустойПолучатель.Получатель = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	//	Иначе
	//		ПустойПолучатель.Получатель = Справочники.Склады.ПустаяСсылка();
	//	КонецЕсли;
	//КонецЕсли;

	//Если ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре Тогда
	//	Если СтруктураШапкиДокумента.ДляВсейНоменклатуры Тогда
	//		ТаблицаПоТоварам.Очистить();

	//		ПустойТовар = ТаблицаПоТоварам.Добавить();
	//		ПустойТовар.Номенклатура               = Неопределено;
	//		ПустойТовар.ХарактеристикаНоменклатуры = Неопределено;
	//		ПустойТовар.Качество                   = СтруктураШапкиДокумента.Качество;
	//		ПустойТовар.ПроцентСкидкиНаценки       = СтруктураШапкиДокумента.ПроцентСкидкиНаценки;
	//		ПустойТовар.ОграничениеСкидкиНаценки   = СтруктураШапкиДокумента.ОграничениеСкидкиНаценки;
	//	КонецЕсли;

	//	НаборДвижений = Движения.СкидкиНаценкиНоменклатуры;
	//	ТаблицаДвижений = НаборДвижений.Выгрузить();

	//	Для каждого ТекСтрокаПолучателя Из ТаблицаПоПолучателям Цикл
	//		Для каждого ТекСтрокаТовара Из ТаблицаПоТоварам Цикл
	//			Движение = ТаблицаДвижений.Добавить();
	//			ПустойПолучатель = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Получатель);
	//			ПустойКонтрагент = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Контрагент);
	//			Если ПустойКонтрагент Тогда
	//				ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
	//			Иначе
	//				Если ПустойПолучатель Тогда
	//					ПолучательДвижения = ТекСтрокаПолучателя.Контрагент;
	//				Иначе
	//					ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
	//				КонецЕсли;
	//			КонецЕсли;

	//			Движение.ПолучательСкидки           = ПолучательДвижения;

	//			Движение.Номенклатура               = ТекСтрокаТовара.Номенклатура;
	//			Движение.ХарактеристикаНоменклатуры = ТекСтрокаТовара.ХарактеристикаНоменклатуры;
	//			Движение.Качество                   = ТекСтрокаТовара.Качество;

	//			Движение.Условие                    = ?(СтруктураШапкиДокумента.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
	//													Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара, СтруктураШапкиДокумента.Условие);
	//			Движение.ЗначениеУсловия            = ?(СтруктураШапкиДокумента.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
	//													0, СтруктураШапкиДокумента.ЗначениеУсловия);
	//			
	//			Движение.ПроцентСкидкиНаценки       = ТекСтрокаТовара.ПроцентСкидкиНаценки;
	//			//m.ionov@a-prof.ru 24.12.2014
	//			//Не используем данный реквизит ограничения
	//			//Движение.ОграничениеСкидкиНаценки   = ТекСтрокаТовара.ОграничениеСкидкиНаценки;
	//			//----m.ionov@a-prof.ru---
	//			
	//			Движение.Валюта                     = СтруктураШапкиДокумента.Валюта;
	//			
	//			//m.ionov@a-prof.ru 07.10.2014
	//			Если Не ЗначениеЗаполнено(ТекСтрокаТовара.Номенклатура) Тогда
	//				Если ЗначениеЗаполнено(ТекСтрокаТовара.Брендообъем) Тогда
	//					Движение.ПЦ_Брендообъем         = ТекСтрокаТовара.Брендообъем;
	//				Иначе
	//					Движение.ПЦ_ТоварнаяКатегория   = ТекСтрокаТовара.ТоварнаяКатегория;
	//				КонецЕсли;
	//			КонецЕсли;
	//			//----m.ionov@a-prof.ru---
	//			
	//			//bolshevykh@a-prof.ru 24.04.2015
	//			Если Не ЗначениеЗаполнено(ТекСтрокаПолучателя.ПЦ_АдресПоставки) Тогда
	//				Движение.ПЦ_ДивизионАдрес   = ТекСтрокаПолучателя.ПЦ_Дивизион;
	//			Иначе
	//				Движение.ПЦ_ДивизионАдрес   = ТекСтрокаПолучателя.ПЦ_АдресПоставки;
	//			КонецЕсли;
	//			//------bolshevykh@a-prof.ru 24.043.2015
	//			
	//		КонецЦикла;
	//	КонецЦикла;

	//	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДатаОкончания,"ДатаОкончания");

	//	Если Не Отказ Тогда
	//		НаборДвижений.мПериод          = СтруктураШапкиДокумента.ДатаНачала;
	//		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	//		Движения.СкидкиНаценкиНоменклатуры.ВыполнитьДвижения();
	//	КонецЕсли;
	//ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоЦеновымГруппам Тогда
	//	Если ТаблицаПоЦеновымГруппам.Количество() <> 0 Тогда
	//		НаборДвижений = Движения.СкидкиНаценкиПоЦеновымГруппам;
	//		ТаблицаДвижений = НаборДвижений.Выгрузить();

	//		Для каждого ТекСтрокаПолучателя Из ТаблицаПоПолучателям Цикл
	//			Для каждого ТекСтрокаЦеноваяГруппа Из ТаблицаПоЦеновымГруппам Цикл
	//				Движение=ТаблицаДвижений.Добавить();
	//				ПустойПолучатель = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Получатель);
	//				ПустойКонтрагент = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Контрагент);

	//				Если ПустойКонтрагент Тогда
	//					ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
	//				Иначе
	//					Если ПустойПолучатель Тогда
	//						ПолучательДвижения = ТекСтрокаПолучателя.Контрагент;
	//					Иначе
	//						ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
	//					КонецЕсли;
	//				КонецЕсли;

	//				Движение.ПолучательСкидки           = ПолучательДвижения;

	//				Движение.ЦеноваяГруппа              = ТекСтрокаЦеноваяГруппа.ЦеноваяГруппа;
	//				Движение.Качество                   = ТекСтрокаЦеноваяГруппа.Качество;

	//				Движение.Условие                    = ?(СтруктураШапкиДокумента.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
	//				Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара, СтруктураШапкиДокумента.Условие);
	//				Движение.ЗначениеУсловия            = ?(СтруктураШапкиДокумента.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
	//				0, СтруктураШапкиДокумента.ЗначениеУсловия);

	//				Движение.ПроцентСкидкиНаценки       = ТекСтрокаЦеноваяГруппа.ПроцентСкидкиНаценки;
	//				Движение.ОграничениеСкидкиНаценки   = ТекСтрокаЦеноваяГруппа.ОграничениеСкидкиНаценки;

	//				Движение.Валюта                     = СтруктураШапкиДокумента.Валюта;
	//			КонецЦикла;
	//		КонецЦикла;

	//		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДатаОкончания,"ДатаОкончания");

	//		Если Не Отказ Тогда
	//			НаборДвижений.мПериод          = СтруктураШапкиДокумента.ДатаНачала;
	//			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	//			Движения.СкидкиНаценкиПоЦеновымГруппам.ВыполнитьДвижения();
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.НатуральныеСкидки Тогда
	//	Если ТаблицаПоБонусам.Количество() <> 0 Тогда
	//		НаборДвижений = Движения.СкидкиНоменклатурыНатуральные;
	//		ТаблицаДвижений = НаборДвижений.Выгрузить();

	//		Для Каждого ТекСтрокаПолучателя Из ТаблицаПоПолучателям Цикл
	//			Для Каждого ТекСтрокаБонус Из ТаблицаПоБонусам Цикл
	//				Движение = ТаблицаДвижений.Добавить();
	//				ПустойПолучатель = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Получатель);
	//				ПустойКонтрагент = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Контрагент);

	//				Если ПустойКонтрагент Тогда
	//					ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
	//				Иначе
	//					Если ПустойПолучатель Тогда
	//						ПолучательДвижения = ТекСтрокаПолучателя.Контрагент;
	//					Иначе
	//						ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
	//					КонецЕсли;
	//				КонецЕсли;

	//				Движение.ПолучательСкидки = ПолучательДвижения;
	//				Движение.Номенклатура = ТекСтрокаБонус.Номенклатура;
	//				Движение.ХарактеристикаНоменклатуры = ТекСтрокаБонус.ХарактеристикаНоменклатуры;
	//				Движение.Качество = ТекСтрокаБонус.Качество;
	//				Движение.СпецПредложение = ТекСтрокаБонус.СпецПредложение;
	//				Движение.ХарактеристикаСпецПредложения = ТекСтрокаБонус.ХарактеристикаСпецПредложения;
	//				Движение.Количество = ТекСтрокаБонус.Количество * ТекСтрокаБонус.ЕдиницаИзмерения.Коэффициент / ТекСтрокаБонус.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
	//			КонецЦикла;
	//		КонецЦикла;

	//		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДатаОкончания,"ДатаОкончания");

	//		Если Не Отказ Тогда
	//			НаборДвижений.мПериод          = СтруктураШапкиДокумента.ДатаНачала;
	//			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	//			Движения.СкидкиНоменклатурыНатуральные.ВыполнитьДвижения();
	//		КонецЕсли;

	//		НаборДвижений = Движения.СпецПредложения;
	//		ТаблицаДвижений = НаборДвижений.Выгрузить();

	//		Для Каждого ТекСтрокаБонус Из ТаблицаПоБонусам Цикл
	//			СоставКомплекта = ПолучитьСоставСтроки(ТекСтрокаБонус.КлючСтроки - 1, ТекСтрокаБонус);

	//			//Запишем движения комплектующих спец. предложения.
	//			//Комплектующие, за которые даются бонусы.
	//			Для Каждого СтрокаКомплектующей Из СоставКомплекта Цикл
	//				Движение = ТаблицаДвижений.Добавить();
	//				Движение.Номенклатура = ТекСтрокаБонус.СпецПредложение;
	//				Движение.ХарактеристикаНоменклатуры = ТекСтрокаБонус.ХарактеристикаСпецПредложения;
	//				Движение.Комплектующая = СтрокаКомплектующей.Номенклатура;
	//				Движение.ХарактеристикаКомплектующей = СтрокаКомплектующей.ХарактеристикаНоменклатуры;
	//				Движение.Количество = СтрокаКомплектующей.Количество * СтрокаКомплектующей.ЕдиницаИзмерения.Коэффициент / СтрокаКомплектующей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
	//				Движение.ЭтоБонус = Ложь;
	//			КонецЦикла;

	//			//И комплектующие-бонусы.
	//			СоставКомплекта = ПолучитьСоставСтроки(ТекСтрокаБонус.КлючСтроки);

	//			Для Каждого СтрокаКомплектующей Из СоставКомплекта Цикл
	//				Движение = ТаблицаДвижений.Добавить();
	//				Движение.Номенклатура = ТекСтрокаБонус.СпецПредложение;
	//				Движение.ХарактеристикаНоменклатуры = ТекСтрокаБонус.ХарактеристикаСпецПредложения;
	//				Движение.Комплектующая = СтрокаКомплектующей.Номенклатура;
	//				Движение.ХарактеристикаКомплектующей = СтрокаКомплектующей.ХарактеристикаНоменклатуры;
	//				Движение.Количество = СтрокаКомплектующей.Количество * СтрокаКомплектующей.ЕдиницаИзмерения.Коэффициент / СтрокаКомплектующей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
	//				Движение.ЭтоБонус = Истина;
	//			КонецЦикла;
	//		КонецЦикла;

	//		Если Не Отказ Тогда
	//			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	//			НаборДвижений.мПериод          = СтруктураШапкиДокумента.ДатаНачала;
	//			Движения.СпецПредложения.ВыполнитьДвижения();
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
    //
	//ЗаписыватьДвиженияПоВремениСкидок = Ложь;
	//НаборДвиженийВремяДействияСкидок = Движения.ВремяДействияСкидок;
	//ТаблицаДвижений = НаборДвиженийВремяДействияСкидок.Выгрузить();
	//ВремяНачала = Неопределено;
	//ВремяОкончания = Неопределено;

	//Для каждого ДеньНедели Из ТаблицаПоДнямНедели Цикл
	//	Если ДеньНедели.Выбран Тогда
	//		Движение                = ТаблицаДвижений.Добавить();
	//		Движение.ВремяНачала    = ДеньНедели.ВремяНачала;
	//		Движение.ВремяОкончания = ДеньНедели.ВремяОкончания;
	//		Движение.ДеньНедели     = ДеньНедели.ДеньНедели;

	//		Если ВремяНачала = Неопределено Тогда
	//			ВремяНачала = ДеньНедели.ВремяНачала;
	//		ИначеЕсли ВремяНачала <> ДеньНедели.ВремяНачала Тогда
	//			ЗаписыватьДвиженияПоВремениСкидок = Истина;
	//		КонецЕсли;

	//		Если ЗначениеЗаполнено(ДеньНедели.ВремяНачала)
	//		 Или Движение.ВремяОкончания <> '00010101235959' Тогда
	//			ЗаписыватьДвиженияПоВремениСкидок = Истина;
	//		КонецЕсли;

	//		Если ВремяОкончания = Неопределено Тогда
	//			ВремяОкончания = ДеньНедели.ВремяОкончания;
	//		ИначеЕсли ВремяОкончания <> ДеньНедели.ВремяОкончания Тогда
	//			ЗаписыватьДвиженияПоВремениСкидок = Истина;
	//		КонецЕсли;
	//	Иначе
	//		ЗаписыватьДвиженияПоВремениСкидок = Истина;
	//	КонецЕсли;
	//	
	//КонецЦикла;

	//Если Не Отказ И ЗаписыватьДвиженияПоВремениСкидок Тогда
	//	НаборДвиженийВремяДействияСкидок.мПериод          = СтруктураШапкиДокумента.ДатаНачала;
	//	НаборДвиженийВремяДействияСкидок.мТаблицаДвижений = ТаблицаДвижений;
	//	Движения.ВремяДействияСкидок.ВыполнитьДвижения();
	//КонецЕсли;

	//++ torchinov@a-prof.ru 24.09.2014
	Если ЗначениеЗаполнено(ПЦ_ОграниченияСкидки) И НЕ ПЦ_ОграниченияСкидки	=	Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.Период Тогда
		ТЧОграничения = СформироватьЗапросОграничения();
		Если ТЧОграничения.Количество() > 0 Тогда
			//>>050816 Если ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг 
			//>>	ИЛИ ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки Тогда 
			//>>	ТЧОграничения.Свернуть("ДоговорКонтрагента, Контрагент, УстановкаСкидокНоменклатуры", "СуммаСкидки");			
			//>>КонецЕсли;	
			НаборДвижений 	= Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТЧОграничения, ТаблицаДвижений);
			НаборДвижений.мПериод          = СтруктураШапкиДокумента.ДатаНачала;//Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
            Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам.ВыполнитьПриход();	
			
			//>>250516 Степанов 
			Если ПараметрыСеанса.ПроведениеДокументов = ложь Тогда
				//>>05.10.2016 Степанов убрано условие
				//Если НЕ ПРГ_ОбъединятьБрендообъем тогда
					//Контроль отрицательного сальдо по регистру
					Движения.Записать();
					ЗапросОстатки = Новый Запрос;
					ЗапросОстатки.Текст = 
					"ВЫБРАТЬ
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ОбъектСкидки,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Дивизион,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.АдресПоставки,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ПолучательСкидки,
					|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) КАК КоличествоОстаток,
					|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) КАК СуммаСкидкиОстаток
					|ИЗ
					|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(, УстановкаСкидокНоменклатуры = &УстановкаСкидокНоменклатуры) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
					|
					|СГРУППИРОВАТЬ ПО
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ОбъектСкидки,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ПолучательСкидки,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Дивизион,
					|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.АдресПоставки
					|
					|ИМЕЮЩИЕ
					|	(СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) < 0
					|		ИЛИ СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) < -20)";
					ЗапросОстатки.УстановитьПараметр("УстановкаСкидокНоменклатуры",Ссылка);
					РезОстатки = ЗапросОстатки.Выполнить().Выбрать();
					Пока РезОстатки.Следующий() Цикл
						Сообщить("Проведение документа приведет к излишнему предоставлению скидки!",СтатусСообщения.Важное);
						/// Кунов О.В., 08.09.2017 - 70538
						Если ЗначениеЗаполнено(РезОстатки.Контрагент) Тогда
							СтрокаКонтрагент = РезОстатки.Контрагент;
						ИначеЕсли ЗначениеЗаполнено(РезОстатки.ПолучательСкидки) Тогда
							СтрокаКонтрагент = РезОстатки.ПолучательСкидки;
						Иначе
							СтрокаКонтрагент = "";
						КонецЕсли;
						Сообщить(Строка(РезОстатки.УстановкаСкидокНоменклатуры)+ ? (ЗначениеЗаполнено(СтрокаКонтрагент), ", " + СтрокаКонтрагент, "") + ?(РезОстатки.КоличествоОстаток<0,"; Кол-во: "+Строка(РезОстатки.КоличествоОстаток),"")+?(РезОстатки.СуммаСкидкиОстаток<0,"; Сумма: "+Строка(РезОстатки.СуммаСкидкиОстаток),""));
						///
						Отказ = Истина;
					КонецЦикла;
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли; 	
	//-- torchinov@a-prof.ru 24.09.2014
	
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	ТекВид = ?(Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий, Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара, Условие);
	Если Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий Тогда
		ТекВид = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара;
	ИначеЕсли Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт Тогда
		ТекВид = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
	Иначе
		ТекВид = Условие;
	КонецЕсли;

	Если Не РассчитыватьАвтоматическиеСкидки(ТекВид) Тогда
		НаименованиеВида = "";
		Если ТекВид = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
			НаименованиеВида = "Скидка по количеству товара";
		ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
			НаименованиеВида = "Скидка по сумме документа";
		ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
			НаименованиеВида = "Скидка по дисконтной карте";
		ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
			НаименованиеВида = "Скидка по виду оплаты";
		КонецЕсли;

		ОбщегоНазначения.СообщитьОбОшибке("В учетной политике не указано использование скидок этого вида ("+ НаименованиеВида + ")."
		                    + Символы.ПС + "Скидка не может быть назначена." , Отказ, Заголовок);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа.
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	Если ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре
		И Не ДляВсейНоменклатуры И Товары.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить перечень товаров или установить флажок ""Для всей номенклатуры""!", Отказ, Заголовок);
	КонецЕсли;

	Если ПолучателиСкидки.Количество() = 0 И Не ДляВсехПолучателей Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо заполнить перечень получателей скидки или установить флажок ""Для всех получателей""!", Отказ, Заголовок);
	КонецЕсли;

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Качество"                  , "Качество");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ОграничениеСкидкиНаценки"  , "ОграничениеСкидкиНаценки");
	
	//m.ionov@a-prof.ru 29.09.2014
	СтруктураПолей.Вставить("ТоварнаяКатегория"  , "ПЦ_ТоварнаяКатегория");
	СтруктураПолей.Вставить("Брендообъем"  , "ПЦ_Брендообъем");
	//----m.ionov@a-prof.ru---
	//>>040816 Степанов 54372 
	СтруктураПолей.Вставить("ОбъектСкидки"  , "ОбъектСкидки");
	//<<
				
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Контрагент", "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	
	//bolshevykh@a-prof.ru 24.04.2015
	СтруктураПолей.Вставить("ПЦ_Дивизион"  , "ПЦ_Дивизион");
	СтруктураПолей.Вставить("ПЦ_АдресПоставки"  , "ПЦ_АдресПоставки");
	//-----bolshevykh@a-prof.ru 24.04.2015
	//>>040816 Степанов 54372 
	СтруктураПолей.Вставить("ПолучательСкидки"  , "ПолучательСкидки");
	//<<

	РезультатЗапросаПоПолучателям = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПолучателиСкидки", СтруктураПолей);
	ТаблицаПоПолучателям = РезультатЗапросаПоПолучателям.Выгрузить();

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Выбран"        , "Выбран");
	СтруктураПолей.Вставить("ДеньНедели"    , "ДеньНедели");
	СтруктураПолей.Вставить("ВремяНачала"   , "ВремяНачала");
	СтруктураПолей.Вставить("ВремяОкончания", "ВремяОкончания");

	РезультатЗапросаПоДнямНедели = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВремяПоДнямНедели", СтруктураПолей);
	ТаблицаПоДнямНедели = РезультатЗапросаПоДнямНедели.Выгрузить();

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ЦеноваяГруппа"           , "ЦеноваяГруппа");
	СтруктураПолей.Вставить("Качество"                , "Качество");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"    , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ОграничениеСкидкиНаценки", "ОграничениеСкидкиНаценки");

	РезультатЗапросаПоЦеновымГруппам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ЦеновыеГруппы", СтруктураПолей);
	ТаблицаПоЦеновымГруппам = РезультатЗапросаПоЦеновымГруппам.Выгрузить();
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"   , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Качество"                     , "Качество");
	СтруктураПолей.Вставить("СпецПредложение"              , "СпецПредложение");
	СтруктураПолей.Вставить("ХарактеристикаСпецПредложения", "ХарактеристикаСпецПредложения");
	СтруктураПолей.Вставить("КлючСтроки"                   , "КлючСтроки");
	СтруктураПолей.Вставить("Количество"                   , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"             , "ЕдиницаИзмерения");

	РезультатЗапросаПоБонусам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Бонусы", СтруктураПолей);
	ТаблицаПоБонусам = РезультатЗапросаПоБонусам.Выгрузить();

	Если ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре Тогда
		ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		//m.ionov@a-prof.ru 15.12.2014
		ПроверитьЗаполнениеТабличнойЧастиПолучатели(СтруктураШапкиДокумента, Отказ, Заголовок);
		//----m.ionov@a-prof.ru---
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоЦеновымГруппам Тогда
		ПроверитьЗаполнениеТабличнойЧастиЦеновыеГруппы(СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.НатуральныеСкидки Тогда
		ПроверитьЗаполнениеТабличнойЧастиБонусы(СтруктураШапкиДокумента, Отказ, Заголовок);
		ПроверитьЗаполнениеТабличнойЧастиСоставНабора(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	//++ torchinov@a-prof.ru 24.09.2014
	//Если Не Отказ Тогда
	
	Если НЕ ПЦ_СтатусДокумента = Перечисления.ПЦ_СтатусыУстановкиСкидокНоменклатуры.Отклонено И ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.Период Тогда
		ВыполнитьПроверкуНаПересекающиесяПериоды(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПолучателям, Отказ,Заголовок);
	КонецЕсли;	
	
	Если Не Отказ И ПЦ_СтатусДокумента = Перечисления.ПЦ_СтатусыУстановкиСкидокНоменклатуры.Согласовано Тогда
	//--torchinov@a-prof.ru 24.09.2014	
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПолучателям, ТаблицаПоДнямНедели, ТаблицаПоЦеновымГруппам, ТаблицаПоБонусам, Отказ, Заголовок);
	КонецЕсли;
	
	//m.ionov@a-prof.ru 25.02.2015
	Если ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг Тогда
		Для Каждого СтрокаПолучатели Из ПолучателиСкидки Цикл
			Если ТипЗнч(СтрокаПолучатели.ПЦ_ОграничениеСкидкиНаценки) = Тип("ДокументСсылка.ПКК_АктНачисленияБонусовУслуг") Тогда
				ЕстьДокументыПоБонусномуАкту(СтрокаПолучатели.ПЦ_ОграничениеСкидкиНаценки, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//----m.ionov@a-prof.ru---

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

    //m.ionov@a-prof.ru 15.10.2014
	Если Не Отказ Тогда
		РазрешитьЗапись = Ложь;
		Если ДополнительныеСвойства.Свойство("РазрешитьЗапись", РазрешитьЗапись) = Ложь Тогда
			РазрешитьЗапись = Ложь;
		КонецЕсли;
		
		Если Не РазрешитьЗапись Тогда
			Отказ = Не МожноМенятьДокумент();						
		КонецЕсли;		
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	//m.ionov@a-prof.ru 26.02.2015
	ПЦ_Контрагенты = "";
	Для Каждого СтрокаКонтрагента Из ПолучателиСкидки Цикл
		/// Кунов О.В., 06.10.2016 - 57511
		КонтрагентНаименование 			= СокрЛП(СтрокаКонтрагента.Контрагент.Наименование);
		ПолучательСкидкиНаименование 	= СокрЛП(СтрокаКонтрагента.ПолучательСкидки.Наименование);
		ПЦ_Контрагенты = ПЦ_Контрагенты + ? (СтрДлина(КонтрагентНаименование) > 1, КонтрагентНаименование + "; ", "");
		ПЦ_Контрагенты = ПЦ_Контрагенты + ? (СтрДлина(ПолучательСкидкиНаименование) > 1, ПолучательСкидкиНаименование + "; ", "");
		///
	КонецЦикла;
	
	Если СтрДлина(ПЦ_Контрагенты) > 2 Тогда
		ПЦ_Контрагенты = Лев(ПЦ_Контрагенты, СтрДлина(ПЦ_Контрагенты)-2);
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//>>250416 Степанов б/н запрет на запись приказа с типом скидки, отличающимся от типа скидки в подчиненных проведенных заказах
	Если НЕ ЭтоНовый() тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателяТовары.Ссылка) КАК КоличествоЗаказ
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка.Проведен
		|	И ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки = &УстановкаСкидокНоменклатуры
		|	И ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок > 0";
		Запрос.УстановитьПараметр("УстановкаСкидокНоменклатуры",Ссылка);
		
		ЗапросПЦ = Новый Запрос;
		ЗапросПЦ.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор) КАК КоличествоПЦ
		|ИЗ
		|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
		|ГДЕ
		|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения = &ВидДвиженияРасход
		|	И ПЦ_ОграничениеПоПредоставленнымСкидкам.Активность
		|	И ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры = &УстановкаСкидокНоменклатуры";
		ЗапросПЦ.УстановитьПараметр("ВидДвиженияРасход",ВидДвиженияНакопления.Расход);
		ЗапросПЦ.УстановитьПараметр("УстановкаСкидокНоменклатуры",Ссылка);
		
		РезЗаказы = Запрос.Выполнить().Выбрать();
		КоличествоЗаказов = 0;
		Пока РезЗаказы.Следующий() цикл
			КоличествоЗаказов = РезЗаказы.КоличествоЗаказ;
		КонецЦикла;	
		Если КоличествоЗаказов>0 тогда
			
			КоличествоПЦ = 0;
			РезПЦ = ЗапросПЦ.Выполнить().Выбрать();
			Пока РезПЦ.Следующий() Цикл
				КоличествоПЦ = РезПЦ.КоличествоПЦ;
			КонецЦикла;
			
			//если это лимитированная скидка - в регистре "ПЦ_ОграниченияПоПредоставленнымСкидкам" должны быть записи, периодическая - их там быть не должно
			Если ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг или 
				ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки или
				ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем тогда
				
				Если КоличествоПЦ = 0 тогда
					Отказ = Истина;
					Если РольДоступна("АП_Администратор") Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Запрещено изменение параметров приказа. По приказу сформированы документы!", Ложь, "Отмена записи приказа на установку скидки");
					Иначе
						ОбщегоНазначения.СообщитьОбОшибке("Запрещено изменение параметров приказа. По приказу сформированы документы!", Отказ, "Отмена записи приказа на установку скидки");
					КонецЕсли;
				КонецЕсли;
				
			Иначе	
				Если КоличествоПЦ <> 0 тогда
					Отказ = Истина;
					Если РольДоступна("АП_Администратор") Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Запрещено изменение параметров приказа. По приказу сформированы документы!", Ложь, "Отмена записи приказа на установку скидки");
					Иначе
						ОбщегоНазначения.СообщитьОбОшибке("Запрещено изменение параметров приказа. По приказу сформированы документы!", Отказ, "Отмена записи приказа на установку скидки");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//
		
		//>>250516 Степанов запрет записи отменного приказа на скидку
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтменаСкидокНоменклатурыДокументы.Ссылка) КАК КоличествоОтмен
		|ИЗ
		|	Документ.ОтменаСкидокНоменклатуры.Документы КАК ОтменаСкидокНоменклатурыДокументы
		|ГДЕ
		|	ОтменаСкидокНоменклатурыДокументы.Ссылка.Проведен
		|	И ОтменаСкидокНоменклатурыДокументы.УстановкаСкидокНоменклатуры = &УстановкаСкидокНоменклатуры";
		Запрос.УстановитьПараметр("УстановкаСкидокНоменклатуры",Ссылка);
		КоличествоОтмен = 0;
		Рез = Запрос.Выполнить().Выбрать();
		Пока Рез.Следующий() цикл
			КоличествоОтмен = Рез.КоличествоОтмен;
		КонецЦикла;	
		Если КоличествоОтмен > 0 тогда
			Отказ = Истина;
			Если РольДоступна("АП_Администратор") Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Запрещено изменение отмененного приказа!", Ложь, "Отмена записи приказа на установку скидки");
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке("Запрещено изменение отмененного приказа!", Отказ, "Отмена записи приказа на установку скидки");
			КонецЕсли;
		КонецЕсли;	
		
		////>>040816 Степанов 54372 для суммового приказа должен быть либо установлен флаг ДляВсейНоменклатуры либо указано не более одной строки в тч товары
		////>>                      для фильтра будет принята только одна первая строка
		//Если ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг или 
		//	ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки тогда
		//	Если ДляВсейНоменклатуры=Ложь тогда
		//		Если Товары.Количество()>1 тогда
		//			Отказ = Истина;
		//			ОбщегоНазначения.СообщитьОбОшибке("Для записи приказа с суммовым ограничением фильтр по номенклатуре не может содержать более одной строки!", Отказ, "Отмена записи приказа на установку скидки");
		//		КонецЕсли;	
		//	КонецЕсли;	
		//	
		//КонецЕсли;	
			
		
		
		////>>250516 Степанов проверка на наличие минусов по приказу
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры,
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры,
		//|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		//|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) КАК СуммаСкидкиОстаток
		//|ИЗ
		//|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(, УстановкаСкидокНоменклатуры = &УстановкаСкидокНоменклатуры) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры,
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
		//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры
		//|
		//|ИМЕЮЩИЕ
		//|	(СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) < 0
		//|		ИЛИ СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) < 0)";
		//Запрос.УстановитьПараметр("УстановкаСкидокНоменклатуры",Ссылка);
		//
		//Рез = Запрос.Выполнить().Выбрать();
		//Если Рез.Количество()>0 тогда
		//	Отказ = Истина;
		//	Если РольДоступна("АП_Администратор") Тогда
		//		ОбщегоНазначения.СообщитьОбОшибке("По данному приказу обнаружены отрицательные остатки по Ограничениям скидок!", Ложь, "Отмена записи приказа на установку скидки");
		//	Иначе
		//		ОбщегоНазначения.СообщитьОбОшибке("По данному приказу обнаружены отрицательные остатки по Ограничениям скидок!", Отказ, "Отмена записи приказа на установку скидки");
		//	КонецЕсли;
		//КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры // ПередЗаписью

//m.ionov@a-prof.ru 24.10.2014
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИзменениеСтатусов(Отказ);
КонецПроцедуры
   
Процедура ЗаписатьИзменениеСтатусов(Отказ) Экспорт
	
	//Движения по регистру накопления "АП_СтатусыДокументов"
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		СформируемЗаписьПоРегиструСтатусы(Отказ);
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = ПЦ_СтатусДокумента Тогда
	    СформируемЗаписьПоРегиструСтатусы(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструСтатусы(Отказ)

	мДатаЗаписи = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = ПЦ_СтатусДокумента;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры

//++ torchinov@a-prof.ru 24.09.2014
Функция СформироватьЗапросОграничения()
	ЗапросОграничения = Новый Запрос;
	//>>040816 Степанов 
	//ЗапросОграничения.Текст = "ВЫБРАТЬ
	//						  |	УстановкаСкидокНоменклатурыПолучателиСкидки.Получатель КАК ДоговорКонтрагента,
	//						  |	УстановкаСкидокНоменклатурыПолучателиСкидки.Контрагент КАК Контрагент,
	//						  |	ЕСТЬNULL(ВЫБОР
	//						  |			КОГДА УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг)
	//						  |				ТОГДА УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_ОграничениеСкидкиНаценки.СуммаДокумента
	//						  |			ИНАЧЕ УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_ОграничениеСкидкиНаценки
	//						  |		КОНЕЦ, 0) КАК СуммаСкидки,
	//						  |	УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка
	//						  |ПОМЕСТИТЬ ВТ_Получатели
	//						  |ИЗ
	//						  |	Документ.УстановкаСкидокНоменклатуры.ПолучателиСкидки КАК УстановкаСкидокНоменклатурыПолучателиСкидки
	//						  |ГДЕ
	//						  |	УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка = &Ссылка
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	УстановкаСкидокНоменклатурыТовары.Ссылка,
	//						  |	УстановкаСкидокНоменклатурыТовары.Номенклатура,
	//						  |	УстановкаСкидокНоменклатурыТовары.ХарактеристикаНоменклатуры,
	//						  |	УстановкаСкидокНоменклатурыТовары.ПЦ_ТоварнаяКатегория КАК ТоварнаяКатегория,
	//						  |	УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем КАК Брендообъем,
	//						  |	УстановкаСкидокНоменклатурыТовары.ОграничениеСкидкиНаценки КАК Количество
	//						  |ПОМЕСТИТЬ ВТ_Номенклатура
	//						  |ИЗ
	//						  |	Документ.УстановкаСкидокНоменклатуры.Товары КАК УстановкаСкидокНоменклатурыТовары
	//						  |ГДЕ
	//						  |	УстановкаСкидокНоменклатурыТовары.Ссылка = &Ссылка
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	//						  |	ВТ_Номенклатура.ХарактеристикаНоменклатуры,
	//						  |	ВЫБОР КОГДА ВТ_Номенклатура.Брендообъем = Значение(Справочник.НСИ_Брендообъемы.ПустаяСсылка) ТОГДА ВТ_Номенклатура.ТоварнаяКатегория ИНАЧЕ Значение(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка) КОНЕЦ КАК ТоварнаяКатегория,
	//						  |	ВЫБОР КОГДА ВТ_Номенклатура.Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка) ТОГДА ВТ_Номенклатура.Брендообъем ИНАЧЕ Значение(Справочник.НСИ_Брендообъемы.ПустаяСсылка) КОНЕЦ КАК Брендообъем,
	//						  |	ВТ_Номенклатура.Количество,
	//						  |	ВТ_Получатели.ДоговорКонтрагента,
	//						  |	ВТ_Получатели.Контрагент КАК Контрагент,
	//						  |	ВТ_Получатели.СуммаСкидки,
	//						  |	&Ссылка КАК УстановкаСкидокНоменклатуры
	//						  |ИЗ
	//						  |	ВТ_Получатели КАК ВТ_Получатели
	//						  |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	//						  |		ПО ВТ_Получатели.Ссылка = ВТ_Номенклатура.Ссылка
	//						  |		И ВТ_Получатели.Ссылка.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем)
	//						  |ГДЕ
	//						  |	(ЕСТЬNULL(ВТ_Получатели.СуммаСкидки, 0) <> 0
	//						  |			ИЛИ ЕСТЬNULL(ВТ_Номенклатура.Количество, 0) <> 0)
	//						  |
	//						  |УПОРЯДОЧИТЬ ПО
	//						  |	Контрагент,
	//						  |	Номенклатура";
	ЗапросОграничения.Текст = "ВЫБРАТЬ
	                          |	УстановкаСкидокНоменклатурыПолучателиСкидки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	                          |	УстановкаСкидокНоменклатурыПолучателиСкидки.Контрагент КАК Контрагент,
	                          |	ЕСТЬNULL(ВЫБОР
	                          |			КОГДА УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг)
	                          |				ТОГДА УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_ОграничениеСкидкиНаценки.СуммаДокумента
	                          |			ИНАЧЕ УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_ОграничениеСкидкиНаценки
	                          |		КОНЕЦ, 0) КАК СуммаСкидки,
	                          |	УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка,
	                          |	УстановкаСкидокНоменклатурыПолучателиСкидки.ПолучательСкидки,
	                          |	УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_Дивизион,
	                          |	УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_АдресПоставки
	                          |ПОМЕСТИТЬ ВТ_Получатели
	                          |ИЗ
	                          |	Документ.УстановкаСкидокНоменклатуры.ПолучателиСкидки КАК УстановкаСкидокНоменклатурыПолучателиСкидки
	                          |ГДЕ
	                          |	УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка = &Ссылка
	                          |;
	                          |";
							  Если ПРГ_ОбъединятьБрендообъем тогда
								  ЗапросОграничения.Текст = ЗапросОграничения.Текст+"
	                          |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ
	                          |	УстановкаСкидокНоменклатурыТовары.Ссылка,
	                          |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	                          |	ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка) КАК ТоварнаяКатегория,
	                          |	УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем КАК Брендообъем,
	                          |	СУММА(УстановкаСкидокНоменклатурыТовары.ОграничениеСкидкиНаценки) КАК Количество,
	                          |	ЗНАЧЕНИЕ(Справочник.ОбъектыСкидок.ПустаяСсылка) КАК ОбъектСкидки
	                          |ПОМЕСТИТЬ ВТ_Номенклатура
	                          |ИЗ
	                          |	Документ.УстановкаСкидокНоменклатуры.Товары КАК УстановкаСкидокНоменклатурыТовары
	                          |ГДЕ
	                          |	УстановкаСкидокНоменклатурыТовары.Ссылка = &Ссылка
	                          |
	                          |СГРУППИРОВАТЬ ПО
	                          |	УстановкаСкидокНоменклатурыТовары.Ссылка,
	                          |	УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем
	                          |;
	                          |";
							  Иначе
								  ЗапросОграничения.Текст = ЗапросОграничения.Текст+"
	                          |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ
	                          |	УстановкаСкидокНоменклатурыТовары.Ссылка,
	                          |	УстановкаСкидокНоменклатурыТовары.Номенклатура,
	                          |	УстановкаСкидокНоменклатурыТовары.ПЦ_ТоварнаяКатегория КАК ТоварнаяКатегория,
	                          |	УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем КАК Брендообъем,
	                          |	УстановкаСкидокНоменклатурыТовары.ОграничениеСкидкиНаценки КАК Количество,
	                          |	УстановкаСкидокНоменклатурыТовары.ОбъектСкидки
	                          |ПОМЕСТИТЬ ВТ_Номенклатура
	                          |ИЗ
	                          |	Документ.УстановкаСкидокНоменклатуры.Товары КАК УстановкаСкидокНоменклатурыТовары
	                          |ГДЕ
	                          |	УстановкаСкидокНоменклатурыТовары.Ссылка = &Ссылка
	                          |;
							  |";
						      Конецесли;
						      ЗапросОграничения.Текст = ЗапросОграничения.Текст+"
	                          |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ
	                          |	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	                          |	ВТ_Номенклатура.ОбъектСкидки КАК ОбъектСкидки,
	                          |	ВЫБОР
	                          |		КОГДА ВТ_Номенклатура.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
	                          |			ТОГДА ВТ_Номенклатура.ТоварнаяКатегория
	                          |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
	                          |	КОНЕЦ КАК ТоварнаяКатегория,
	                          |	ВЫБОР
	                          |		КОГДА ВТ_Номенклатура.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	                          |			ТОГДА ВТ_Номенклатура.Брендообъем
	                          |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
	                          |	КОНЕЦ КАК Брендообъем,
							  | ВЫБОР 
							  |     КОГДА ВТ_Номенклатура.Ссылка.ПРГ_ОбъединятьБрендообъем
							  /// Кунов О.В., 04.10.2017 - 70641 - было 1.1
							  |         ТОГДА ВТ_Номенклатура.Количество * 1.2
							  ///
							  |		ИНАЧЕ ВТ_Номенклатура.Количество
	                          |	КОНЕЦ КАК Количество,
	                          |	ВТ_Получатели.Контрагент КАК Контрагент,
	                          |	ВТ_Получатели.ДоговорКонтрагента,
	                          |	ВТ_Получатели.ПолучательСкидки КАК ПолучательСкидки,
	                          |	ВТ_Получатели.ПЦ_Дивизион КАК Дивизион,
	                          |	ВТ_Получатели.ПЦ_АдресПоставки КАК АдресПоставки,
	                          |	ВТ_Получатели.СуммаСкидки,
	                          |	&Ссылка КАК УстановкаСкидокНоменклатуры
	                          |ИЗ
	                          |	ВТ_Получатели КАК ВТ_Получатели
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	                          |		ПО ВТ_Получатели.Ссылка = ВТ_Номенклатура.Ссылка
	                          |ГДЕ
	                          |	(ЕСТЬNULL(ВТ_Получатели.СуммаСкидки, 0) <> 0
	                          |			ИЛИ ЕСТЬNULL(ВТ_Номенклатура.Количество, 0) <> 0)
	                          |
	                          |УПОРЯДОЧИТЬ ПО
	                          |	Контрагент,
	                          |	ПолучательСкидки,
	                          |	Номенклатура,
	                          |	ОбъектСкидки";
	ЗапросОграничения.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаОграничения = ЗапросОграничения.Выполнить().Выгрузить();
	
	Возврат  ВыборкаОграничения;
КонецФункции	

Функция ВыполнитьПроверкуНаПересекающиесяПериоды(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПолучателям, Отказ, Заголовок)
	
	Если ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре Тогда
		Если СтруктураШапкиДокумента.ДляВсейНоменклатуры Тогда
			ТаблицаПоТоварам.Очистить();

			ПустойТовар = ТаблицаПоТоварам.Добавить();
			ПустойТовар.Номенклатура               = Неопределено;
			ПустойТовар.ХарактеристикаНоменклатуры = Неопределено;
			ПустойТовар.Качество                   = СтруктураШапкиДокумента.Качество;
			ПустойТовар.ПроцентСкидкиНаценки       = СтруктураШапкиДокумента.ПроцентСкидкиНаценки;
			ПустойТовар.ОграничениеСкидкиНаценки   = СтруктураШапкиДокумента.ОграничениеСкидкиНаценки;
		КонецЕсли;

		НаборДвижений = Движения.СкидкиНаценкиНоменклатуры;
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		Для каждого ТекСтрокаПолучателя Из ТаблицаПоПолучателям Цикл
			Для каждого ТекСтрокаТовара Из ТаблицаПоТоварам Цикл
				Движение = ТаблицаДвижений.Добавить();
				ПустойДоговорКонтрагента = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.ДоговорКонтрагента);
				ПустойКонтрагент = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Контрагент);
				Если ПустойКонтрагент Тогда
					ПолучательДвижения = ТекСтрокаПолучателя.ДоговорКонтрагента;
				Иначе
					Если ПустойДоговорКонтрагента Тогда
						ПолучательДвижения = ТекСтрокаПолучателя.Контрагент;
					Иначе
						ПолучательДвижения = ТекСтрокаПолучателя.ДоговорКонтрагента;
					КонецЕсли;
				КонецЕсли;

				Движение.ПолучательСкидки           = ПолучательДвижения;

				Движение.Номенклатура               = ТекСтрокаТовара.Номенклатура;
				Движение.ХарактеристикаНоменклатуры = ТекСтрокаТовара.ХарактеристикаНоменклатуры;
				Движение.Качество                   = ТекСтрокаТовара.Качество;

				Движение.Условие                    = ?(СтруктураШапкиДокумента.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
														Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара, СтруктураШапкиДокумента.Условие);
				Движение.ЗначениеУсловия            = ?(СтруктураШапкиДокумента.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
														0, СтруктураШапкиДокумента.ЗначениеУсловия);
				
				Движение.ПроцентСкидкиНаценки       = ТекСтрокаТовара.ПроцентСкидкиНаценки;
				//m.ionov@a-prof.ru 24.12.2014
				//Не используем данный реквизит ограничения
				//Движение.ОграничениеСкидкиНаценки   = ТекСтрокаТовара.ОграничениеСкидкиНаценки;
				//----m.ionov@a-prof.ru---
				
				Движение.Валюта                     = СтруктураШапкиДокумента.Валюта;
				
				//m.ionov@a-prof.ru 07.10.2014
				Если Не ЗначениеЗаполнено(ТекСтрокаТовара.Номенклатура) Тогда
					Если ЗначениеЗаполнено(ТекСтрокаТовара.Брендообъем) Тогда
						Движение.ПЦ_Брендообъем         = ТекСтрокаТовара.Брендообъем;
					Иначе
						Движение.ПЦ_ТоварнаяКатегория   = ТекСтрокаТовара.ТоварнаяКатегория;
					КонецЕсли;
				КонецЕсли;
				//----m.ionov@a-prof.ru---
				
				//>>130416 Степанов 49661 не дает записать в одном периоде скидки по разным адресам поставки
				Если ЗначениеЗаполнено(ТекСтрокаПолучателя.ПЦ_АдресПоставки) Тогда
					Движение.ПЦ_ДивизионАдрес         = ТекСтрокаПолучателя.ПЦ_АдресПоставки;
				КонецЕсли;
				//<<
				
			КонецЦикла;
		КонецЦикла;

		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДатаОкончания,"ДатаОкончания");

		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц	=	Новый МенеджерВременныхТаблиц;
		//>>130416 Степанов 49661 в текст запроса добавлена проверка на адрес поставки
		//>>250516 Степанов б/н в текст запроса добавлено исключение периодов после проведения документа отмены скидок
		//Запрос.Текст	=	"ВЫБРАТЬ
		//				 	|	ВТ.Номенклатура,
		//				 	|	ВТ.ХарактеристикаНоменклатуры,
		//				 	|	ВТ.Качество,
		//				 	|	ВТ.Условие,
		//				 	|	ВТ.ЗначениеУсловия,
		//				 	|	ВТ.ПолучательСкидки,
		//				 	|	ВТ.ПЦ_ДивизионАдрес,
		//				 	|	ВТ.ПЦ_ТоварнаяКатегория,
		//				 	|	ВТ.ПЦ_Брендообъем
		//				 	|ПОМЕСТИТЬ ВТ
		//				 	|ИЗ
		//				 	|	&ВТ КАК ВТ
		//				 	|;
		//				 	|
		//				 	|////////////////////////////////////////////////////////////////////////////////
		//				 	|ВЫБРАТЬ
		//				 	|	СкидкиНаценкиНоменклатуры.Регистратор,
		//				 	|	СкидкиНаценкиНоменклатуры.Номенклатура,
		//				 	|	СкидкиНаценкиНоменклатуры.ХарактеристикаНоменклатуры,
		//				 	|	СкидкиНаценкиНоменклатуры.Качество,
		//				 	|	СкидкиНаценкиНоменклатуры.Условие,
		//				 	|	СкидкиНаценкиНоменклатуры.ЗначениеУсловия,
		//				 	|	СкидкиНаценкиНоменклатуры.ПолучательСкидки,
		//				 	|	СкидкиНаценкиНоменклатуры.ПЦ_ДивизионАдрес,
		//				 	|	СкидкиНаценкиНоменклатуры.ПЦ_ТоварнаяКатегория,
		//				 	|	СкидкиНаценкиНоменклатуры.ПЦ_Брендообъем
		//				 	|ИЗ
		//				 	|	ВТ КАК ВТ
		//				 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкиНаценкиНоменклатуры КАК СкидкиНаценкиНоменклатуры
		//				 	|		ПО ВТ.Номенклатура = СкидкиНаценкиНоменклатуры.Номенклатура
		//				 	|			И ВТ.ХарактеристикаНоменклатуры = СкидкиНаценкиНоменклатуры.ХарактеристикаНоменклатуры
		//				 	|			И ВТ.Качество = СкидкиНаценкиНоменклатуры.Качество
		//				 	|			И ВТ.Условие = СкидкиНаценкиНоменклатуры.Условие
		//				 	|			И ВТ.ЗначениеУсловия = СкидкиНаценкиНоменклатуры.ЗначениеУсловия
		//				 	|			И ВТ.ПолучательСкидки = СкидкиНаценкиНоменклатуры.ПолучательСкидки
		//				 	|			И ВТ.ПЦ_ДивизионАдрес = СкидкиНаценкиНоменклатуры.ПЦ_ДивизионАдрес
		//				 	|			И ВТ.ПЦ_ТоварнаяКатегория = СкидкиНаценкиНоменклатуры.ПЦ_ТоварнаяКатегория
		//				 	|			И ВТ.ПЦ_Брендообъем = СкидкиНаценкиНоменклатуры.ПЦ_Брендообъем
		//				 	|ГДЕ
		//				 	|	(СкидкиНаценкиНоменклатуры.Период МЕЖДУ &ДатаНач И &ДатаКон
		//				 	|			ИЛИ СкидкиНаценкиНоменклатуры.ДатаОкончания МЕЖДУ &ДатаНач И &ДатаКон)
		//				 	|	И СкидкиНаценкиНоменклатуры.Регистратор <> &Регистратор
		//				 	|	И СкидкиНаценкиНоменклатуры.Регистратор ССЫЛКА Документ.УстановкаСкидокНоменклатуры
		//				 	|	И СкидкиНаценкиНоменклатуры.Регистратор.ПЦ_ОграниченияСкидки = &ОграничениеСкидки";
		
		Запрос.Текст	=	"ВЫБРАТЬ
		            	 	|	ВТ.Номенклатура,
		            	 	|	ВТ.ХарактеристикаНоменклатуры,
		            	 	|	ВТ.Качество,
		            	 	|	ВТ.Условие,
		            	 	|	ВТ.ЗначениеУсловия,
		            	 	|	ВТ.ПолучательСкидки,
		            	 	|	ВТ.ПЦ_ДивизионАдрес,
		            	 	|	ВТ.ПЦ_ТоварнаяКатегория,
		            	 	|	ВТ.ПЦ_Брендообъем
		            	 	|ПОМЕСТИТЬ ВТ
		            	 	|ИЗ
		            	 	|	&ВТ КАК ВТ
		            	 	|;
		            	 	|
		            	 	|////////////////////////////////////////////////////////////////////////////////
		            	 	|ВЫБРАТЬ
		            	 	|	СкидкиНаценкиНоменклатуры.Регистратор,
		            	 	|	СкидкиНаценкиНоменклатуры.Номенклатура,
		            	 	|	СкидкиНаценкиНоменклатуры.ХарактеристикаНоменклатуры,
		            	 	|	СкидкиНаценкиНоменклатуры.Качество,
		            	 	|	СкидкиНаценкиНоменклатуры.Условие,
		            	 	|	СкидкиНаценкиНоменклатуры.ЗначениеУсловия,
		            	 	|	СкидкиНаценкиНоменклатуры.ПолучательСкидки,
		            	 	|	СкидкиНаценкиНоменклатуры.ПЦ_ДивизионАдрес,
		            	 	|	СкидкиНаценкиНоменклатуры.ПЦ_ТоварнаяКатегория,
		            	 	|	СкидкиНаценкиНоменклатуры.ПЦ_Брендообъем,
		            	 	|	СкидкиНаценкиНоменклатуры.Период,
		            	 	|	СкидкиНаценкиНоменклатуры.ДатаОкончания
		            	 	|ПОМЕСТИТЬ ВТ_СкидкиБезУчетаОтмен
		            	 	|ИЗ
		            	 	|	ВТ КАК ВТ
		            	 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкидкиНаценкиНоменклатуры КАК СкидкиНаценкиНоменклатуры
		            	 	|		ПО ВТ.Номенклатура = СкидкиНаценкиНоменклатуры.Номенклатура
		            	 	|			И ВТ.ХарактеристикаНоменклатуры = СкидкиНаценкиНоменклатуры.ХарактеристикаНоменклатуры
		            	 	|			И ВТ.Качество = СкидкиНаценкиНоменклатуры.Качество
		            	 	|			И ВТ.Условие = СкидкиНаценкиНоменклатуры.Условие
		            	 	|			И ВТ.ЗначениеУсловия = СкидкиНаценкиНоменклатуры.ЗначениеУсловия
		            	 	|			И ВТ.ПолучательСкидки = СкидкиНаценкиНоменклатуры.ПолучательСкидки
		            	 	|			И ВТ.ПЦ_ДивизионАдрес = СкидкиНаценкиНоменклатуры.ПЦ_ДивизионАдрес
		            	 	|			И ВТ.ПЦ_ТоварнаяКатегория = СкидкиНаценкиНоменклатуры.ПЦ_ТоварнаяКатегория
		            	 	|			И ВТ.ПЦ_Брендообъем = СкидкиНаценкиНоменклатуры.ПЦ_Брендообъем
		            	 	|ГДЕ
		            	 	|	(СкидкиНаценкиНоменклатуры.Период МЕЖДУ &ДатаНач И &ДатаКон
		            	 	|			ИЛИ СкидкиНаценкиНоменклатуры.ДатаОкончания МЕЖДУ &ДатаНач И &ДатаКон)
		            	 	|	И СкидкиНаценкиНоменклатуры.Регистратор <> &Регистратор
		            	 	|	И СкидкиНаценкиНоменклатуры.Регистратор ССЫЛКА Документ.УстановкаСкидокНоменклатуры
		            	 	|	И СкидкиНаценкиНоменклатуры.Регистратор.ПЦ_ОграниченияСкидки = &ОграничениеСкидки
		            	 	|;
		            	 	|
		            	 	|////////////////////////////////////////////////////////////////////////////////
		            	 	|ВЫБРАТЬ РАЗЛИЧНЫЕ
		            	 	|	ОтменаСкидокНоменклатурыДокументы.УстановкаСкидокНоменклатуры КАК ОтмененныйПриказ,
		            	 	|	ОтменаСкидокНоменклатурыДокументы.Ссылка.Дата КАК ДатаОтменыПриказа
		            	 	|ПОМЕСТИТЬ ВТ_ОтмененныеПриказы
		            	 	|ИЗ
		            	 	|	Документ.ОтменаСкидокНоменклатуры.Документы КАК ОтменаСкидокНоменклатурыДокументы
		            	 	|ГДЕ
		            	 	|	ОтменаСкидокНоменклатурыДокументы.Ссылка.Проведен
		            	 	|;
		            	 	|
		            	 	|////////////////////////////////////////////////////////////////////////////////
		            	 	|ВЫБРАТЬ
		            	 	|	ВТ_СкидкиБезУчетаОтмен.Регистратор,
		            	 	|	ВТ_СкидкиБезУчетаОтмен.Номенклатура,
		            	 	|	ВТ_СкидкиБезУчетаОтмен.ХарактеристикаНоменклатуры,
		            	 	|	ВТ_СкидкиБезУчетаОтмен.Качество,
		            	 	|	ВТ_СкидкиБезУчетаОтмен.Условие,
		            	 	|	ВТ_СкидкиБезУчетаОтмен.ЗначениеУсловия,
		            	 	|	ВТ_СкидкиБезУчетаОтмен.ПолучательСкидки,
		            	 	|	ВТ_СкидкиБезУчетаОтмен.ПЦ_ДивизионАдрес,
		            	 	|	ВТ_СкидкиБезУчетаОтмен.ПЦ_ТоварнаяКатегория,
		            	 	|	ВТ_СкидкиБезУчетаОтмен.ПЦ_Брендообъем,
		            	 	|	ВТ_СкидкиБезУчетаОтмен.Период,
		            	 	|	ВЫБОР
		            	 	|		КОГДА ВТ_ОтмененныеПриказы.ДатаОтменыПриказа ЕСТЬ NULL 
		            	 	|			ТОГДА ВТ_СкидкиБезУчетаОтмен.ДатаОкончания
		            	 	|		ИНАЧЕ ВЫБОР
		            	 	|				КОГДА ВТ_ОтмененныеПриказы.ДатаОтменыПриказа < ВТ_СкидкиБезУчетаОтмен.ДатаОкончания
		            	 	|					ТОГДА ВТ_ОтмененныеПриказы.ДатаОтменыПриказа
		            	 	|				ИНАЧЕ ВТ_СкидкиБезУчетаОтмен.ДатаОкончания
		            	 	|			КОНЕЦ
		            	 	|	КОНЕЦ КАК ДатаОкончания
		            	 	|ПОМЕСТИТЬ ВТ_СкидкиСОтменами
		            	 	|ИЗ
		            	 	|	ВТ_СкидкиБезУчетаОтмен КАК ВТ_СкидкиБезУчетаОтмен
		            	 	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтмененныеПриказы КАК ВТ_ОтмененныеПриказы
		            	 	|		ПО ВТ_СкидкиБезУчетаОтмен.Регистратор = ВТ_ОтмененныеПриказы.ОтмененныйПриказ
		            	 	|;
		            	 	|
		            	 	|////////////////////////////////////////////////////////////////////////////////
		            	 	|ВЫБРАТЬ
		            	 	|	ВТ_СкидкиСОтменами.Регистратор,
		            	 	|	ВТ_СкидкиСОтменами.Номенклатура,
		            	 	|	ВТ_СкидкиСОтменами.ХарактеристикаНоменклатуры,
		            	 	|	ВТ_СкидкиСОтменами.Качество,
		            	 	|	ВТ_СкидкиСОтменами.Условие,
		            	 	|	ВТ_СкидкиСОтменами.ЗначениеУсловия,
		            	 	|	ВТ_СкидкиСОтменами.ПолучательСкидки,
		            	 	|	ВТ_СкидкиСОтменами.ПЦ_ДивизионАдрес,
		            	 	|	ВТ_СкидкиСОтменами.ПЦ_ТоварнаяКатегория,
		            	 	|	ВТ_СкидкиСОтменами.ПЦ_Брендообъем,
		            	 	|	ВТ_СкидкиСОтменами.Период,
		            	 	|	ВТ_СкидкиСОтменами.ДатаОкончания
		            	 	|ИЗ
		            	 	|	ВТ_СкидкиСОтменами КАК ВТ_СкидкиСОтменами
		            	 	|ГДЕ
		            	 	|	ВТ_СкидкиСОтменами.ДатаОкончания МЕЖДУ &ДатаНач И &ДатаКон";
							
		
	Запрос.УстановитьПараметр("ДатаНач", СтруктураШапкиДокумента.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", СтруктураШапкиДокумента.ДатаОкончания);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ОграничениеСкидки", Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.Период);
	Запрос.УстановитьПараметр("ВТ", ТаблицаДвижений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Отказ = Истина;
		Пока Выборка.Следующий() Цикл
			СтрокаТовары = "";
			Если ЗначениеЗаполнено(Выборка.ПолучательСкидки) Тогда
			СтрокаТовары = "для получателя скидки " + СокрЛП(Выборка.ПолучательСкидки.Наименование);	
		    КонецЕсли;
		
		    //>>130416 Степанов 49661
			Если ЗначениеЗаполнено(Выборка.ПЦ_ДивизионАдрес) Тогда
			     СтрокаТовары = "по адресу поставки: " + СокрЛП(Выборка.ПЦ_ДивизионАдрес.Наименование);	
		    КонецЕсли;
			//<<
			
			Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
				СтрокаТовары = СтрокаТовары + " по номенклатуре: " + СокрЛП(Выборка.Номенклатура.Наименование);
			КонецЕсли;	
			Если ЗначениеЗаполнено(Выборка.ПЦ_ТоварнаяКатегория) Тогда
				СтрокаТовары = СтрокаТовары + ", по товарной категории: " + СокрЛП(Выборка.ПЦ_ТоварнаяКатегория.Наименование);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПЦ_Брендообъем) Тогда
				СтрокаТовары = СтрокаТовары + ", по брендообъему: " + СокрЛП(Выборка.ПЦ_Брендообъем.Наименование);
			КонецЕсли;
			
			СтрокаНачалаСообщенияОбОшибке = "уже установлены скидки в этом периоде " + СтрокаТовары + ", документом: " + Строка(Выборка.Регистратор);
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке, Отказ, Заголовок);
		КонецЦикла;	
	КонецЕсли;	
		
КонецЕсли;	
КонецФункции	
//-- torchinov@a-prof.ru 24.09.2014

Функция МожноМенятьДокумент(ВыводитьСообщение = Истина) Экспорт
	МожноМенять = Истина;
	
	Если ЭтоНовый() Тогда
		Возврат МожноМенять;
	КонецЕсли;
		
	Если Ссылка.ПЦ_СтатусДокумента = Перечисления.ПЦ_СтатусыУстановкиСкидокНоменклатуры.Подготовлен ИЛИ Ссылка.ПЦ_СтатусДокумента = Перечисления.ПЦ_СтатусыУстановкиСкидокНоменклатуры.Согласовано Тогда
		//Только сотрудник Сервис службы (установка скидок)
		Если Не АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.УстановкаСкидок) Тогда
			Если ВыводитьСообщение Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ согласован, изменения доступны только сотруднику с правом установки скидок", Ложь);
			КонецЕсли;
			МожноМенять = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если РольДоступна("АП_Администратор") Тогда
		МожноМенять = Истина;
	КонецЕсли;
	
	Возврат МожноМенять;

КонецФункции

// Проверяет правильность заполнения табличной части "Товары".
// Если какой-то из реквизитов, влияющих на проведение, не заполнен или
// заполнен некорректно, то устанавливается флаг отказа в проведении.
//
// Параметры:
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПолучатели(СтруктураШапкиДокумента, Отказ, Заголовок)

	Для Каждого СтрокаТаблицы из ПолучателиСкидки цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер " + СокрЛП(СтрокаТаблицы.НомерСтроки) + " табличной части Получатели скидки ";

		//>>040816 Степанов 54372
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент)
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПолучательСкидки) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "должен быть указан или контрагент или получатель скидки.", Отказ, Заголовок);
		КонецЕсли;  	
		Если ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки
			ИЛИ ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПЦ_ОграничениеСкидкиНаценки) тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "должно быть указано ограничение скидки.", Отказ, Заголовок);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.Период Тогда
	
		ПроверяемыеРеквизиты.Добавить("ДатаНачала");
		ПроверяемыеРеквизиты.Добавить("ДатаОкончания");
	
	КонецЕсли; 
	
КонецПроцедуры

//m.ionov@a-prof.ru 25.02.2015
Функция ЕстьДокументыПоБонусномуАкту(ПКК_АктНачисленияБонусов, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.УстановкаСкидокНоменклатуры.ПолучателиСкидки КАК УстановкаСкидокНоменклатурыПолучателиСкидки
	               |ГДЕ
	               |	НЕ УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка = &Ссылка
	               |	И УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка.Проведен = ИСТИНА
	               |	И УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_ОграничениеСкидкиНаценки = &ПКК_АктНачисленияБонусов";
	Запрос.УстановитьПараметр("ПКК_АктНачисленияБонусов", ПКК_АктНачисленияБонусов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Бонусный акт " + СокрЛП(ПКК_АктНачисленияБонусов) + " уже используются в документе " + СокрЛП(Результат.Ссылка), Отказ);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	
	//{20.12.2016 Островерхий заявка №60385 
	ТипСкидкиНаценки = Неопределено; 
	//20.12.2016 Островерхий} 
	
КонецПроцедуры

//----m.ionov@a-prof.ru---
