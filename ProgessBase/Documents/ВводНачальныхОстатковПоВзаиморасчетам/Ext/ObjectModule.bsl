Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ПриИзмененииДоговораРасчетов(СтрокаТЧ) Экспорт
	
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;

	Если СтрокаТЧ.КурсВзаиморасчетов = 0
		ИЛИ СтрокаТЧ.ВалютаВзаиморасчетов <> ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		
		СтруктураКурсаВзаиморасчетов	 = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаТЧ.КурсВзаиморасчетов      = ?(СтруктураКурсаВзаиморасчетов.Курс = 0, 1, СтруктураКурсаВзаиморасчетов.Курс);
		СтрокаТЧ.КратностьВзаиморасчетов = ?(СтруктураКурсаВзаиморасчетов.Кратность = 0, 1, СтруктураКурсаВзаиморасчетов.Кратность);
		
	КонецЕсли; 
	
	СтрокаТЧ.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

КонецПроцедуры


// Процедура пересчитывает СуммаУпр от суммы взаиморасчетов
//
Процедура ПересчетСуммыУпр(ТекСтрока) Экспорт
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтрока.ВалютаВзаиморасчетов.Пустая()
		ИЛИ ТекСтрока.КурсВзаиморасчетов      = 0
		ИЛИ ТекСтрока.КратностьВзаиморасчетов = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КурсУпр = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Дата);
	ТекСтрока.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		ТекСтрока.СуммаВзаиморасчетов,
		ТекСтрока.ВалютаВзаиморасчетов, мВалютаУправленческогоУчета,
		ТекСтрока.КурсВзаиморасчетов, КурсУпр.Курс,
		ТекСтрока.КратностьВзаиморасчетов, КурсУпр.Кратность);
	
КонецПроцедуры // ПересчетСуммыУпр()

// Процедура пересчитывает СуммаРегл от суммы взаиморасчетов
//
Процедура ПересчетСуммыРегл(ТекСтрока, РасчетСуммыСУчетомПереоценки = Ложь) Экспорт
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтрока.ВалютаВзаиморасчетов.Пустая()
		ИЛИ ТекСтрока.КурсВзаиморасчетов      = 0
		ИЛИ ТекСтрока.КратностьВзаиморасчетов = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекСтрока.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		ТекСтрока.СуммаВзаиморасчетов,
		ТекСтрока.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
		ТекСтрока.КурсВзаиморасчетов, 1,
		ТекСтрока.КратностьВзаиморасчетов, 1);
		
	Если РасчетСуммыСУчетомПереоценки Тогда
	
		ТекКурс = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекСтрока.ВалютаВзаиморасчетов, Дата);
		ТекСтрока.СуммаРеглСУчетомПереоценки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.СуммаВзаиморасчетов,
			ТекСтрока.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
			ТекСтрока.КурсВзаиморасчетов, 1,
			ТекСтрока.КратностьВзаиморасчетов, 1);
	
	КонецЕсли;
	
КонецПроцедуры // ПересчетСуммыРегл()

// Заполнение пустых значений ДокументРасчетовСКонтрагентом в строках указанной табличной части
// создаваемыми документами типа ДокументРасчетовСКонтрагентом.
// Вызывается по кнопке подменю Заполнить табличных частей
//
Процедура ЗаполнитьДокументыРасчетов(ТабЧасть, ИмяТабЧасти = "ДанныеПоРасчетам") Экспорт

	Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Ввод начальных остатков по взаиморасчетам");
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена организация!", , Заголовок);
		Возврат;
	КонецЕсли;
	
	Префикс = Организация.Префикс;
	Если ПустаяСтрока(Префикс) Тогда
		Префикс = "00";
	КонецЕсли;
	
	ИмяРеквизитаДокумент = ?(ИмяТабЧасти = "ДанныеПоРасчетам", "ДокументРасчетовСКонтрагентом", "ДокументОплаты");
	
	Для каждого СтрокаТабЧасти Из ТабЧасть Цикл
	
		Если ЗначениеЗаполнено(СтрокаТабЧасти[ИмяРеквизитаДокумент]) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОшибки = "";
		Если НЕ ЗначениеЗаполнено(СтрокаТабЧасти.Контрагент) Тогда
			ТекстОшибки = ТекстОшибки  + "Не заполнен контрагент. ";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТабЧасти.ДоговорКонтрагента) Тогда
			ТекстОшибки = ТекстОшибки  + "Не заполнен договор контрагента. ";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТабЧасти.ВалютаВзаиморасчетов) Тогда
			ТекстОшибки = ТекстОшибки  + "Не заполнена валюта взаиморасчетов. ";
		КонецЕсли;
		Если СтрокаТабЧасти.СуммаВзаиморасчетов = 0 Тогда
			ТекстОшибки = ТекстОшибки  + "Сумма взаиморасчетов равна нулю. ";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(
			"Строка " + СтрокаТабЧасти.НомерСтроки 
			+ " табличной части " + ?(ИмяТабЧасти = "ДанныеПоРасчетам", "Расчеты с контрагентами", "ДанныеПоАвансам") +": 
			|" + ТекстОшибки + "
			|Документ расчетов по строке " + СтрокаТабЧасти.НомерСтроки + " не будет создан.", , Заголовок);
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			НовыйДокумент = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
			
			НовыйДокумент.Дата               = Дата;
			НовыйДокумент.Организация        = Организация;
			НовыйДокумент.Контрагент         = СтрокаТабЧасти.Контрагент;
			НовыйДокумент.ДоговорКонтрагента = СтрокаТабЧасти.ДоговорКонтрагента;
			НовыйДокумент.ВалютаДокумента    = СтрокаТабЧасти.ВалютаВзаиморасчетов;
			НовыйДокумент.СуммаДокумента     = СтрокаТабЧасти.СуммаВзаиморасчетов;
			НовыйДокумент.Комментарий        = "Создан автоматически (" + Заголовок + ")";
			
			НовыйДокумент.Записать();
			
			СтрокаТабЧасти[ИмяРеквизитаДокумент] = НовыйДокумент.Ссылка;
			
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(
			"Не удалось записать документ расчетов в строке " + СтрокаТабЧасти.НомерСтроки + ":
			|" + ОписаниеОшибки(), , Заголовок);
			Продолжить;
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСуммуСУчетомПереоценки(ТабЧасть, ЗаполнятьТолькоНулевые = Истина, ЭтоАванс = Ложь) Экспорт

	КурсыВалют = Новый Соответствие;
	
	Если ЭтоАванс Тогда
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабЧасть.ДоговорКонтрагента
		|ПОМЕСТИТЬ ТабЧасть
		|ИЗ &ТабЧасть КАК ТабЧасть";
		Запрос.УстановитьПараметр("ТабЧасть", ТабЧасть);
		Запрос.Выполнить();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабЧасть.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ИЗ ТабЧасть КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах";
		МассивДоговоровУЕ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДоговорКонтрагента"); 
	
	КонецЕсли;
	
	Для каждого СтрокаТабЧасти Из ТабЧасть Цикл
	
		Если ЗаполнятьТолькоНулевые И СтрокаТабЧасти.СуммаРеглСУчетомПереоценки <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураКурса = КурсыВалют[СтрокаТабЧасти.ВалютаВзаиморасчетов];
		Если СтруктураКурса = Неопределено Тогда
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТабЧасти.ВалютаВзаиморасчетов, Дата);
			КурсыВалют.Вставить(СтрокаТабЧасти.ВалютаВзаиморасчетов, СтруктураКурса);
		КонецЕсли;
		
		Если ЭтоАванс Тогда
			
			Если СтрокаТабЧасти.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета
				И МассивДоговоровУЕ.Найти(СтрокаТабЧасти.ДоговорКонтрагента) = Неопределено 
				Тогда
				СтрокаТабЧасти.СуммаРеглСУчетомПереоценки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабЧасти.СуммаВзаиморасчетов,
					СтрокаТабЧасти.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
					СтруктураКурса.Курс, 1,
					СтруктураКурса.Кратность, 1);
			Иначе
				СтрокаТабЧасти.СуммаРеглСУчетомПереоценки = СтрокаТабЧасти.СуммаРегл;
			КонецЕсли;
			
		Иначе
		
			СтрокаТабЧасти.СуммаРеглСУчетомПереоценки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабЧасти.СуммаВзаиморасчетов,
				СтрокаТабЧасти.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
				СтруктураКурса.Курс, 1,
				СтруктураКурса.Кратность, 1);
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет табличную часть "ДанныеПоРезервамПоСомнительнымДолгам" 
// данными по сомнительной задолженности.
//
Процедура ЗаполнитьПоСомнительнойЗадолженности() Экспорт

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Дата", КонецДня(Дата));
	СтруктураПараметров.Вставить("Организация", Организация);
	
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("УчетнаяПолитика", УчетнаяПолитикаРегл);
	
	ТаблицаРезервов = УправлениеВзаиморасчетами.ПровестиРасчетРезервовПоСомнительнымДолгам(СтруктураПараметров, Ложь, 0, Истина);
	Для Каждого СтрокаРезерва Из ТаблицаРезервов Цикл
		НоваяСтрока = ДанныеПоРезервамПоСомнительнымДолгам.Добавить();
		
		НоваяСтрока.Контрагент 						= СтрокаРезерва.Контрагент;
		НоваяСтрока.ДоговорКонтрагента 				= СтрокаРезерва.Договор;
		НоваяСтрока.ДокументРасчетовСКонтрагентом 	= СтрокаРезерва.ДокументДолга;
		НоваяСтрока.СчетУчетаРасчетовСКонтрагентом 	= СтрокаРезерва.Счет;
		НоваяСтрока.СуммаБУ 						= СтрокаРезерва.НачисленоБУ;
		НоваяСтрока.СуммаНУ 						= СтрокаРезерва.НачисленоНУ;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоСомнительнойЗадолженности()

#Если Клиент Тогда
///////////////////////////////////////////////////////////
// Заполнение при переходе на ведение расчетов на регистрах

//Процедура заполнения табличных частей с помощью сервиса "Заполнить по взаиморасчетам УСН"
//Параметры: ТабЧасть - заполняемая табличная часть
//		ЭтоАванс - булево, принак заполнения таб части Авансы
Процедура ЗаполнитьПоОстаткамВзаиморасчетыУСН(ТабЧасть, ЭтоАванс = Ложь) Экспорт
	Если Организация.Пустая() Тогда
		Предупреждение("Не выбрана организация",,"Заполнить по взаиморасчетам УСН");
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыПоПрочимОперациям Тогда
		Предупреждение("Заполнение по взаиморасчетам УСН не предусмотрено для вида операции """ + ВидОперации + """",, "Заполнить по взаиморасчетам УСН");
		Возврат;
	КонецЕсли;
	Если НЕ НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
		Предупреждение("Выбранная организация не применяет УСН",, "Заполнить по взаиморасчетам УСН");
		Возврат;
	КонецЕсли;
	
	Если ТабЧасть.Количество() > 0 Тогда
		Ответ = Вопрос("Перед заполнением табличная часть будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, "Заполнить по взаиморасчетам УСН");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		ТабЧасть.Очистить();
	КонецЕсли;
	СписокВидовДоговоров = ПолучитьВидыДоговоровДляВидаОперации();
	
	//Общий порядок заполнения:
	//1. Извлекаются остатки по регистру ВзаиморасчетыУСН, помещаются во временную таблицу
	//2. По списку договоров, по которым есть остатки, извлекаются остатки на счетах учета взаиморасчетов
	//3. По остаткам регистра ВзаиморасчетыУСН и остаткам на счетах происходит заполнение табличной части
	
	//Создание временной таблицы с остатками по регистру ВзаиморасчетыУСН
	//Будет использоваться в запросах по остаткам на счетах БУ и регистру ВзаиморасчетыУСН
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ЗапросВзаиморасчеты = Новый Запрос;
	ЗапросВзаиморасчеты.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
		ТекстУсловияВзаиморасчеты = ?(ЭтоАванс, "> 0","< 0");
		Множитель = ?(ЭтоАванс, 1, -1);
	Иначе
		ТекстУсловияВзаиморасчеты = ?(ЭтоАванс, "< 0","> 0");
		Множитель = ?(ЭтоАванс, -1, 1);
	КонецЕсли;

	ЗапросВзаиморасчеты.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыОстатки.ДоговорКонтрагента 								КАК ДоговорКонтрагента,
	|	ВзаиморасчетыОстатки.Сделка												КАК Сделка,
	|	ВзаиморасчетыОстатки.РасчетныйДокумент									КАК ДокументРасчетовСКонтрагентом,
	|	&Множитель * ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток			КАК СуммаРегл
	|ПОМЕСТИТЬ ТаблицаДанныхОВзаиморасчетах
	|ИЗ 
	|	РегистрНакопления.ВзаиморасчетыУСН.Остатки(&Дата, 
	|					ДоговорКонтрагента ССЫЛКА Справочник.ДоговорыКонтрагентов
	|					И ВЫРАЗИТЬ(ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).ВидДоговора в (&СписокВидовДоговоров)
	|					И Организация=&Организация
	|					И ВЫРАЗИТЬ(ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|					) 														КАК ВзаиморасчетыОстатки
	|ГДЕ ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток " + ТекстУсловияВзаиморасчеты + "
	|";

	ЗапросВзаиморасчеты.УстановитьПараметр("Организация", 			Организация);
	ЗапросВзаиморасчеты.УстановитьПараметр("ВалютаРеглУчета", 		мВалютаРегламентированногоУчета);
	ЗапросВзаиморасчеты.УстановитьПараметр("Дата",					КонецДня(Дата)+1);
	ЗапросВзаиморасчеты.УстановитьПараметр("СписокВидовДоговоров", 	СписокВидовДоговоров);
	ЗапросВзаиморасчеты.УстановитьПараметр("Множитель", 			Множитель);
	ЗапросВзаиморасчеты.Выполнить();
	
	//Получение остатков взаиморасчетов на счетах БУ
	ТаблицаОстатковНаСчетах = ПодготовитьТаблицуОстаткиНаСчетах(МенеджерВременныхТаблиц, ЭтоАванс);
	
	//Выборка остатков по регистру ВзаиморасчетыУСН
	ЗапросВзаиморасчеты.Текст = "ВЫБРАТЬ
	|	ТаблицаДанныхОВзаиморасчетах.ДоговорКонтрагента.Владелец				КАК Контрагент,
	|	ТаблицаДанныхОВзаиморасчетах.ДоговорКонтрагента 						КАК ДоговорКонтрагента,
	|	ТаблицаДанныхОВзаиморасчетах.Сделка										КАК Сделка,
	//Имя псевдонима зависит от заполняемой табличной части - реквизит называется по-разному
	|	ТаблицаДанныхОВзаиморасчетах.ДокументРасчетовСКонтрагентом				КАК " + ?(ЭтоАванс, "ДокументОплаты,", "ДокументРасчетовСКонтрагентом,")+"
	|	ТаблицаДанныхОВзаиморасчетах.СуммаРегл									КАК СуммаРегл
	|ИЗ 
	|	ТаблицаДанныхОВзаиморасчетах 											КАК ТаблицаДанныхОВзаиморасчетах
	|ИТОГИ Сумма(СуммаРегл) ПО ДоговорКонтрагента";
	Результат = ЗапросВзаиморасчеты.Выполнить();
	Если Результат.Пустой() Тогда
		Предупреждение("Нет данных для заполнения"); 
		Возврат;
	КонецЕсли;

	ВыборкаДоговоры = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДоговоры.Следующий() Цикл
		ДоговорКонтрагента = ВыборкаДоговоры.ДоговорКонтрагента;
		//Строки с остатками на счетах БУ, относящиеся к текущему договору
		СтрокиТаблицыСчетов = ТаблицаОстатковНаСчетах.НайтиСтроки(Новый Структура("ДоговорКонтрагента", ДоговорКонтрагента));
		
		//Массив строк табличной части, которые будут добавлены в процессе обработки данного договора
		МассивСтрокПоДоговору = Новый Массив;
		//Выборка по детальным записям - документам, сделкам
		Выборка = ВыборкаДоговоры.Выбрать();
		Пока Выборка.Следующий() цикл
			//Добавление строк в табличную часть документа
			НоваяСтрока = ТабЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
			МассивСтрокПоДоговору.Добавить(НоваяСтрока);
		КонецЦикла;
		//Заполним счета учета для строк по данному договору
		ЗаполнитьСчетаВзаиморасчетов(ТабЧасть, МассивСтрокПоДоговору, СтрокиТаблицыСчетов, ЭтоАванс);
		
		//Если остались нераспределенные остатки на счетах - добавим строки с пустыми документами и сделками
		//По каждому из договоров сумма в ТЧ будет наибольшей из сумм по данным счетов и регистра
		Заголовок = "Контрагент """+ДоговорКонтрагента.Владелец+""", Договор """+ДоговорКонтрагента+"""";
		ТекстОшибки = "Не удалось заполнить документ " + ?(ЭтоАванс, "оплаты", "расчетов") +
						?(ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом,"",", сделку");
		Для каждого СтрокаТабСчетов из СтрокиТаблицыСчетов Цикл
			//Остался нераспределенный остаток по счету - добавим его в табличную часть
			Если СтрокаТабСчетов.СуммаРегл > 0 Тогда
				НоваяСтрока = ТабЧасть.Добавить();
				НоваяСтрока.Контрагент 				= ДоговорКонтрагента.Владелец;
				НоваяСтрока.ДоговорКонтрагента 		= ДоговорКонтрагента;
				НоваяСтрока.СуммаРегл 				= СтрокаТабСчетов.СуммаРегл;
				НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СтрокаТабСчетов.СчетУчетаВзаиморасчетов;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки + Символы.ПС + " для остатка на счете " + СтрокаТабСчетов.СчетУчетаВзаиморасчетов,,Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//Заполним в табличной части курс, кратность и сумму взаиморасчетов
	Для каждого СтрокаТЧ Из ТабЧасть Цикл
		СтрокаТЧ.ВалютаВзаиморасчетов 		= мВалютаРегламентированногоУчета;
		СтрокаТЧ.КурсВзаиморасчетов 		= 1;
		СтрокаТЧ.КратностьВзаиморасчетов 	= 1;
		СтрокаТЧ.СуммаВзаиморасчетов 		= СтрокаТЧ.СуммаРегл;
	КонецЦикла;
	//Отсортируем табличную часть по контрагентам и договорам
	ТабЧасть.Сортировать("Контрагент, ДоговорКонтрагента, Сделка, "+?(ЭтоАванс, "ДокументОплаты", "ДокументРасчетовСКонтрагентом"));

КонецПроцедуры

//Функция используется в сервисах автоматического заполнения табличных частей документов "Заполнить по данным НДС" и "Заполнить по взаиморасчетам УСН"
//Предназначена для получения списка видов договоров, остатки по которым должны попадать в табличную часть.
//Возвращаемое значение - массив со списком видов договоров
Функция ПолучитьВидыДоговоровДляВидаОперации()
	СписокВидовДоговоров = Новый Массив;
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;
    Возврат СписокВидовДоговоров;
КонецФункции

//Функция используется в сервисах автоматического заполнения табличных частей документов "Заполнить по данным НДС" и "Заполнить по взаиморасчетам УСН"
//Предназначена для получения таблицы значений с остатками взаиморасчетов на счетах бухгалтерского учета
//Параметры: МенеджерВременныхТаблиц, в котором хранится таблица с обрабатываемыми договорами
//			ЭтоАванс - булево, признак заполняемой табличной части (расчеты либо авансы)
//Возвращаемое значение - таблица значений с колонками "ДоговорКонтрагента", "СуммаРегл", "СчетУчетаВзаиморасчетов", "Приоритет"
Функция ПодготовитьТаблицуОстаткиНаСчетах(МенеджерВременныхТаблиц, ЭтоАванс)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
		ТекстУсловия 			= ?(ЭтоАванс, "> 0","< 0");
		Запрос.УстановитьПараметр("СчетОсновной", 		ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками); //60
		Запрос.УстановитьПараметр("СчетДополнительный", ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками); //76.05
		Множитель = ?(ЭтоАванс, 1, -1);
	Иначе
		ТекстУсловия 			= ?(ЭтоАванс, "< 0","> 0");
		Запрос.УстановитьПараметр("СчетОсновной", 		ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками); //62
		Запрос.УстановитьПараметр("СчетДополнительный", ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками); //76.06
		Множитель = ?(ЭтоАванс, -1, 1);
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Субконто1 								КАК ДоговорКонтрагента,
	|	&Множитель * ХозрасчетныйОстатки.СуммаОстаток				КАК СуммаРегл,
	|	ХозрасчетныйОстатки.Счет 									КАК СчетУчетаВзаиморасчетов,
	|	ВЫБОР 
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (&СчетОсновной) ТОГДА
	|			0
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (&СчетДополнительный) ТОГДА
	|			1
	|		ИНАЧЕ 2 
	|	КОНЕЦ 														КАК Приоритет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|						&Дата, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры), 
	|						Организация = &Организация
	|						И Субконто1 В (ВЫБРАТЬ РАЗЛИЧНЫЕ ДоговорКонтрагента ИЗ ТаблицаДанныхОВзаиморасчетах)
	|						) 										КАК ХозрасчетныйОстатки
	|ГДЕ ХозрасчетныйОстатки.СуммаОстаток " + ТекстУсловия + "
	|УПОРЯДОЧИТЬ ПО ДоговорКонтрагента, Приоритет, СчетУчетаВзаиморасчетов";
	
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Дата",			КонецДня(Дата)+1);
	Запрос.УстановитьПараметр("Множитель", 		Множитель);
	ТаблицаОстатковНаСчетах = Запрос.Выполнить().Выгрузить();
	ТаблицаОстатковНаСчетах.Индексы.Добавить("ДоговорКонтрагента");
	Возврат ТаблицаОстатковНаСчетах;
КонецФункции

//Процедура используется в сервисах автоматического заполнения табличных частей документов "Заполнить по данным НДС" и "Заполнить по взаиморасчетам УСН"
//Предназначена для заполнения счета взаиморасчетов с контрагентом в добавленных строках табличной части
//	При необходимости одна строка разбивается на несколько строк с разными счетами учета
//Вызывается один раз для каждого договора
//Параметры:
//		ТабЧасть - табличная часть
//		МассивСтрокПоДоговору - массив добавленных строк в табличной части, в которых требуется заполнить счет. Все строки массива принадлежат одному договору
//		СтрокиТаблицыСчетов - строки таблицы значений с остатками в разрезе бух счетов по обрабатываемому договору
//		ЭтоАванс - признак заполняемой табличной части (расчеты / авансы)
Процедура ЗаполнитьСчетаВзаиморасчетов(ТабЧасть, МассивСтрокПоДоговору, СтрокиТаблицыСчетов, ЭтоАванс)
	Если МассивСтрокПоДоговору.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = "Контрагент """+МассивСтрокПоДоговору[0].Контрагент+""", Договор """ + МассивСтрокПоДоговору[0].ДоговорКонтрагента + """";
	ТекстСообщения = "Не удалось заполнить счет учета взаиморасчетов";
	СчетУчетаРасчетовСКонтрагентом = Неопределено;
	ОстатокНаСчете = 0;
	//Нет остатков по договору на счетах БУ
	Если СтрокиТаблицыСчетов.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,Заголовок);
		Возврат;
	КонецЕсли;
	
	Если СтрокиТаблицыСчетов.Количество() = 1 Тогда //Остаток по договору на единственном счете - его будем подставлять во все строки
		СчетУчетаРасчетовСКонтрагентом = СтрокиТаблицыСчетов[0].СчетУчетаВзаиморасчетов;
		ОстатокНаСчете = СтрокиТаблицыСчетов[0].СуммаРегл;
	КонецЕсли;

	Для каждого СтрокаТЧ из МассивСтрокПоДоговору Цикл

		Если СчетУчетаРасчетовСКонтрагентом <> Неопределено Тогда //Если для всех строк по данному договору подставляется одинаковый счет
			Если ОстатокНаСчете >= СтрокаТЧ.СуммаРегл Тогда //Остатка на счете хватает для данной строки - просто заполним счет
				СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
				ОстатокНаСчете 							= ОстатокНаСчете - СтрокаТЧ.СуммаРегл;
			Иначе
				//Остатка на счете не хватает для данной строки
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,Заголовок);
				Если ОстатокНаСчете = 0 Тогда //Остатка на счете совсем не осталось - ничего не можем заполнить
					Прервать;
				КонецЕсли;
				//Можем заполнить счет только на часть суммы текущей строки
				НеРаспределено = СтрокаТЧ.СуммаРегл - ОстатокНаСчете;   //Сумма, на которую не хватило остатка на счете

				СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
				СтрокаТЧ.СуммаРегл 						= ОстатокНаСчете;
				
				//На недостающую сумму добавим в документ отдельную строку с пустым счетом
				НоваяСтрока = ТабЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ,, "СуммаРегл, СчетУчетаРасчетовСКонтрагентом");
				НоваяСтрока.СуммаРегл 				= НеРаспределено;
				ОстатокНаСчете 						= 0;
				Прервать;
			КонецЕсли;
		Иначе
			 //Остаток взаиморасчетов есть на нескольких счетах. Сумму по текущей строке документа необходимо распределить по нескольким счетам учета
			СуммаКРаспределению 		= СтрокаТЧ.СуммаРегл;
			//Признак того, что текущая строка табличной части обработана - счет в ней заполнен
			флОбработалиТекущуюСтроку 	= Ложь;
			ЗаполняемаяСтрока = СтрокаТЧ;
			Для Каждого СтрокаТаблицыСчетов ИЗ СтрокиТаблицыСчетов Цикл
				//Вся сумма по строке табличной части распределена
				Если СуммаКРаспределению <= 0 Тогда
					Прервать; 
				КонецЕсли;
				//Остаток на данном счете уже распределен по другим строкам документа
				Если СтрокаТаблицыСчетов.СуммаРегл <= 0 Тогда 
					Продолжить;
				КонецЕсли;
				Если флОбработалиТекущуюСтроку Тогда
					//Не вся сумма текущей строки табличной части распределилась по счетам. Надо добавить новую строку
					НоваяСтрока = ТабЧасть.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
					ЗаполняемаяСтрока = НоваяСтрока;
				Иначе
					флОбработалиТекущуюСтроку 		= Истина;
				КонецЕсли;	
				ЗаполняемаяСтрока.СчетУчетаРасчетовСКонтрагентом 	= СтрокаТаблицыСчетов.СчетУчетаВзаиморасчетов;
				ЗаполняемаяСтрока.СуммаРегл 						= Мин(СтрокаТаблицыСчетов.СуммаРегл, СуммаКРаспределению);
				
				СуммаКРаспределению 								= СуммаКРаспределению - ЗаполняемаяСтрока.СуммаРегл;
				СтрокаТаблицыСчетов.СуммаРегл 						= СтрокаТаблицыСчетов.СуммаРегл - ЗаполняемаяСтрока.СуммаРегл;
			КонецЦикла;
			//Не всю сумму взаиморасчетов по обрабатываемой строке табличной части удалось распределить по счетам. 
			//Оставшаяся сумма будет с незаполненным счетом
			Если СуммаКРаспределению > 0 Тогда
				Если флОбработалиТекущуюСтроку Тогда
					//Часть суммы по строке не удалось распределить по счетам - добавим новую строку на остаток суммы
					НоваяСтрока = ТабЧасть.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ,,"СуммаРегл, СчетУчетаРасчетовСКонтрагентом");
					НоваяСтрока.СуммаРегл 				= СуммаКРаспределению;
				КонецЕсли;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,, Заголовок);
				Прервать;
			КонецЕсли; //Если СуммаКРаспределению > 0 Тогда
		КонецЕсли; // Если СчетУчетаРасчетовСКонтрагентом <> Неопределено Тогда
	КонецЦикла;
	//Если для всех строк по данному договору подставлялся одинаковый счет - запомним нераспределенный остаток на счете
	Если СчетУчетаРасчетовСКонтрагентом <> Неопределено Тогда
		СтрокиТаблицыСчетов[0].СуммаРегл 		= ОстатокНаСчете;
	КонецЕсли;
КонецПроцедуры

#КонецЕсли
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров табл. части регл. параметрами
//
Процедура ДополнитьОбязательныеРеквизитыТабРасчетыРегл(СтруктураШапкиДокумента, Реквизиты)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Реквизиты = Реквизиты + ", " + "СчетУчетаРасчетовСКонтрагентом";
	КонецЕсли;

КонецПроцедуры // ДополнитьОбязательныеРеквизитыТабРасчетыРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация";
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Ввод остатков по резервам выполняется только в случае, если в учетной политике установлены 
	// соответствующие настройки.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РезервыПоСомнительнымДолгам Тогда
		
		Если СтруктураШапкиДокумента.Свойство("УчетнаяПолитика")
			 И ЗначениеЗаполнено(СтруктураШапкиДокумента.УчетнаяПолитика)
			 И НЕ СтруктураШапкиДокумента.УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамБУ
			 И НЕ СтруктураШапкиДокумента.УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамНУ Тогда
			
			СтрокаСообщения = "В учетной политике (бухгалтерский и налоговый учет) за " + Формат(СтруктураШапкиДокумента.Дата, "ДФ='ММММ гггг'") + " для " + СтруктураШапкиДокумента.Организация 
							  + Символы.ПС + " не установлены настройки ""Формировать резервы по сомнительным долгам"" в бухгалтерском и налоговом учете, поэтому ввод начальных остатков не требуется.";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
			 
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()
                                                              		
// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ( СтруктураШапкиДокумента, Отказ, Заголовок)

	РеквизитыТабРасчеты = "Контрагент, ДоговорКонтрагента, ДокументРасчетовСКонтрагентом, ВалютаВзаиморасчетов";
	РеквизитыТабАвансы  = "Контрагент, ДоговорКонтрагента, ДокументОплаты, ВалютаВзаиморасчетов";
	РеквизитыТабРезервы = "Контрагент, ДоговорКонтрагента, ДокументРасчетовСКонтрагентом";
	
	ДополнитьОбязательныеРеквизитыТабРасчетыРегл(СтруктураШапкиДокумента, РеквизитыТабРасчеты);
	ДополнитьОбязательныеРеквизитыТабРасчетыРегл(СтруктураШапкиДокумента, РеквизитыТабАвансы);
	ДополнитьОбязательныеРеквизитыТабРасчетыРегл(СтруктураШапкиДокумента, РеквизитыТабРезервы);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДанныеПоРасчетам", Новый Структура(РеквизитыТабРасчеты), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДанныеПоАвансам",  Новый Структура(РеквизитыТабАвансы ), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДанныеПоРезервамПоСомнительнымДолгам",  Новый Структура(РеквизитыТабРезервы ), Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитовТЧ()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, Истина);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		Иначе
			СтруктураШапкиДокумента.Вставить("УчетнаяПолитика", УчетнаяПолитикаБух);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура подготавливает к проведению таблицы документа 
//
Процедура ПодготовитьТаблицыДокумента(ТаблицаРасчеты, ТаблицаАвансы)

	Для каждого СтрокаТаблицы Из ТаблицаРасчеты Цикл
		
		Если НЕ СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаТаблицы.ДокументРасчетовСКонтрагентом = Неопределено;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			СтрокаТаблицы.Сделка = Неопределено;	
		КонецЕсли;	
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ТаблицаАвансы Цикл
		
		Если НЕ СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаТаблицы.ДокументРасчетовСКонтрагентом = Неопределено;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			СтрокаТаблицы.Сделка = Неопределено;	
		КонецЕсли;	
		
	КонецЦикла;

КонецПроцедуры                                                                               

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаРасчеты            - таблица значений, содержащая данные для проведения и проверки ТЧ "Расчеты с контрагентами"
//  ТаблицаАвансы             - таблица значений, содержащая данные для проведения и проверки ТЧ "ДанныеПоАвансам"
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаРасчеты, ТаблицаАвансы, ТаблицаРезервы, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаРасчеты, ТаблицаАвансы, Отказ, Заголовок);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаРасчеты, ТаблицаАвансы, ТаблицаРезервы, Отказ, Заголовок);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтразитьВРегистреВзаиморасчетовПоДокументам Тогда
		ДвиженияПоРегиструОперативныхРасчетов(РежимПроведения, СтруктураШапкиДокумента, ТаблицаРасчеты, ТаблицаАвансы, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаРасчеты, ТаблицаАвансы, Отказ, Заголовок)

	// Движения по регистру ВзаиморасчетыСКонтрагентами
	
	// Таблица расчетов
	ТаблицаДвиженийВзаиморасчеты = Движения.ВзаиморасчетыСКонтрагентами.ВыгрузитьКолонки();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРасчеты, ТаблицаДвиженийВзаиморасчеты);
	
	Движения.ВзаиморасчетыСКонтрагентами.мПериод = Дата;
	Движения.ВзаиморасчетыСКонтрагентами.мТаблицаДвижений   = ТаблицаДвиженийВзаиморасчеты;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
	Иначе
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
	КонецЕсли;
	
	// Таблица авансов
	ТаблицаДвиженийВзаиморасчеты = Движения.ВзаиморасчетыСКонтрагентами.ВыгрузитьКолонки();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансы, ТаблицаДвиженийВзаиморасчеты);
	
	Движения.ВзаиморасчетыСКонтрагентами.мТаблицаДвижений   = ТаблицаДвиженийВзаиморасчеты;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
	Иначе
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;
	
	// Движения по регистру РасчетыСКонтрагентами
	// делаются по авансам всегда, по расчетам - если не заполнена сделка или если расчеты "по счетам"
	
	Движения.РасчетыСКонтрагентами.мПериод = Дата;
		
	// Таблица расчетов
	ТаблицаДвиженийРасчеты = Движения.РасчетыСКонтрагентами.ВыгрузитьКолонки();
	Для каждого СтрокаРасчеты Из ТаблицаРасчеты Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаРасчеты.Сделка)
			ИЛИ СтрокаРасчеты.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам 
			Тогда
			СтрокаДвиженийРасчеты = ТаблицаДвиженийРасчеты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвиженийРасчеты, СтрокаРасчеты);
		КонецЕсли;
	
	КонецЦикла;
	ТаблицаДвиженийРасчеты.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты, "РасчетыВозврат");
	Движения.РасчетыСКонтрагентами.мТаблицаДвижений = ТаблицаДвиженийРасчеты;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
		Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
	Иначе
		Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
	КонецЕсли;
	
	// Таблица авансов
	ТаблицаДвиженийРасчеты = Движения.РасчетыСКонтрагентами.ВыгрузитьКолонки();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансы, ТаблицаДвиженийРасчеты);
	ТаблицаДвиженийРасчеты.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты, "РасчетыВозврат");
	Движения.РасчетыСКонтрагентами.мТаблицаДвижений = ТаблицаДвиженийРасчеты;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
		Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
	Иначе
		Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирование движений по регистрам по регламентированному учету.
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаРасчеты, ТаблицаАвансы, ТаблицаРезервы, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтразитьВРегистрахРасчетовОрганизации Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
			
			// Движения по регистру РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации
			// и регистру сведений РасчетыПоПриобретениюОрганизации
			
			// Таблица расчетов
			ТаблицаДвиженийРасчетыВУЕ = Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ВыгрузитьКолонки();
			ТаблицаРегистраСведений   = Движения.РасчетыПоПриобретениюОрганизации.ВыгрузитьКолонки();
			Для Каждого СтрокаРасчетов Из ТаблицаРасчеты Цикл
				НоваяСтрока = ТаблицаДвиженийРасчетыВУЕ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов);
				
				Если СтрокаРасчетов.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
				
					СтрокаРегистраСведений = ТаблицаРегистраСведений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРегистраСведений, СтрокаРасчетов);
					СтрокаРегистраСведений.СуммаСНДС = СтрокаРасчетов.СуммаРег;
				
				КонецЕсли;
					
			КонецЦикла;
			
			Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.мПериод = Дата;
			Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.мТаблицаДвижений = ТаблицаДвиженийРасчетыВУЕ;
			Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ВыполнитьРасход();
			
			ТаблицаРегистраСведений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");
			ТаблицаРегистраСведений.ЗаполнитьЗначения(0, "НомерСтроки"); // установится в модуле набора записей
			ТаблицаРегистраСведений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидОперации, "ВидОперации");
			Движения.РасчетыПоПриобретениюОрганизации.Загрузить(ТаблицаРегистраСведений);
			
			// Таблица авансов
			ТаблицаДвиженийРасчетыВУЕ = Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ВыгрузитьКолонки();
			Для Каждого СтрокаАванса Из ТаблицаАвансы Цикл
				НоваяСтрока = ТаблицаДвиженийРасчетыВУЕ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАванса);
			КонецЦикла;
			Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.мТаблицаДвижений = ТаблицаДвиженийРасчетыВУЕ;
			Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.ВыполнитьПриход();
			
			// Сдвиг границы последовательности на начало следующего дня
			БухгалтерскийУчетРасчетовСКонтрагентами.СдвигГраницыПоследовательностиНазад(
				"РасчетыПоПриобретениюОрганизации", 
				Новый МоментВремени(КонецДня(СтруктураШапкиДокумента.Дата) + 1), 
				Новый Структура("Организация", СтруктураШапкиДокумента.Организация));
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
			
			// Движения по регистру РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
			
			// Таблица расчетов
			ТаблицаДвиженийРасчетыВУЕ = Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВыгрузитьКолонки();
			ТаблицаРегистраСведений          = Движения.РасчетыПоРеализацииОрганизации.ВыгрузитьКолонки();
			Для Каждого СтрокаРасчетов Из ТаблицаРасчеты Цикл
				НоваяСтрока = ТаблицаДвиженийРасчетыВУЕ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов);
				
				Если СтрокаРасчетов.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
				
					СтрокаРегистраСведений = ТаблицаРегистраСведений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРегистраСведений, СтрокаРасчетов);
					СтрокаРегистраСведений.СуммаСНДС = СтрокаРасчетов.СуммаРег;
				
				КонецЕсли;
					
			КонецЦикла;
			
			Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.мПериод = Дата;
			Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.мТаблицаДвижений = ТаблицаДвиженийРасчетыВУЕ;
			Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВыполнитьРасход();
			
			ТаблицаРегистраСведений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");
			ТаблицаРегистраСведений.ЗаполнитьЗначения(0, "НомерСтроки"); // установится в модуле набора записей
			ТаблицаРегистраСведений.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ПрочиеДоходы, "Коррсчет"); // 91.01
			ТаблицаРегистраСведений.ЗаполнитьЗначения(Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы, "КоррСубконто1"); 
			ТаблицаРегистраСведений.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.ПрочиеРасходыРаспределяемые, "СчетНДС"); // 91.02.3
			ТаблицаРегистраСведений.ЗаполнитьЗначения(Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы, "СубконтоНДС1"); 
			ТаблицаРегистраСведений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидОперации, "ВидОперации");
			Движения.РасчетыПоРеализацииОрганизации.Загрузить(ТаблицаРегистраСведений);
			
			// Таблица авансов
			ТаблицаДвиженийРасчетыВУЕ = Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВыгрузитьКолонки();
			Для Каждого СтрокаАванса Из ТаблицаАвансы Цикл
				НоваяСтрока = ТаблицаДвиженийРасчетыВУЕ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАванса);
			КонецЦикла;
			Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.мТаблицаДвижений = ТаблицаДвиженийРасчетыВУЕ;
			Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВыполнитьПриход();
			
			// Сдвиг границы последовательности на начало следующего дня
			БухгалтерскийУчетРасчетовСКонтрагентами.СдвигГраницыПоследовательностиНазад(
				"РасчетыПоРеализацииОрганизации", 
				Новый МоментВремени(КонецДня(СтруктураШапкиДокумента.Дата) + 1), 
				Новый Структура("Организация", СтруктураШапкиДокумента.Организация));
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ФормироватьПроводкиПоВводуНачальныхОстатков Тогда
        
        ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьУчетПРпоРасчетамВУЕ(СтруктураШапкиДокумента.Дата);
        
        Если НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыПоПрочимОперациям
            И НЕ ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ
            И Дата >= '20070101' Тогда
            
			ФормироватьВременныеРазницы = СтруктураШапкиДокумента.УчетнаяПолитика.ПоддержкаПБУ18;
		Иначе
			ФормироватьВременныеРазницы = Ложь;
		КонецЕсли;
		
		ДатаОценкиДоходовРасходов	= КонецДня(СтруктураШапкиДокумента.Дата) + 1; 
		ОценкаДоходовРасходовПоКурсуАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьОценкуДоходовРасходовПоКурсуАвансов(ДатаОценкиДоходовРасходов);
        ФормироватьПроводкиПоСчетуВАЛ =
			Не ОценкаДоходовРасходовПоКурсуАвансов
			И (Дата >= '20071231')
			И НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН;
		
		ТабРасчеты = ТаблицаРасчеты.Скопировать();
		ТабРасчеты.Свернуть("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, СчетУчетаРасчетовСКонтрагентом", "СуммаВзаиморасчетов, СуммаРегл, СуммаРеглСУчетомПереоценки");
		
		ТабАвансы = ТаблицаАвансы.Скопировать();
		ТабАвансы.Свернуть("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, СчетУчетаРасчетовСКонтрагентом", "СуммаВзаиморасчетов, СуммаРегл, СуммаРеглСУчетомПереоценки");
		
		Счет00 = ПланыСчетов.Хозрасчетный.Вспомогательный;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
			
			Для каждого СтрокаРасчетов Из ТабРасчеты Цикл
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Организация = Организация;
				Проводка.Период      = Дата;
				Проводка.Содержание  = "Ввод начальных остатков по взаиморасчетам";
				
				Проводка.СчетКт = Счет00;
				Проводка.СчетДт = СтрокаРасчетов.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаРасчетов.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    СтрокаРасчетов.ДоговорКонтрагента);
				
				Если Дата < '20070101' Тогда
					Проводка.Сумма = СтрокаРасчетов.СуммаРегл;
				ИначеЕсли СтрокаРасчетов.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
					Проводка.Сумма = СтрокаРасчетов.СуммаРегл;
				Иначе
					Проводка.Сумма = СтрокаРасчетов.СуммаРеглСУчетомПереоценки;
				КонецЕсли;
				
				Если СтрокаРасчетов.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаДт        = СтрокаРасчетов.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрокаРасчетов.СуммаВзаиморасчетов;
				КонецЕсли;
				
				Если СтрокаРасчетов.РасчетыВУсловныхЕдиницах И ФормироватьВременныеРазницы Тогда
					
					СуммаВременнойРазницы = СтрокаРасчетов.СуммаРеглСУчетомПереоценки - СтрокаРасчетов.СуммаРегл;
					
					Если СуммаВременнойРазницы = 0 Тогда
						Продолжить;
					ИначеЕсли СуммаВременнойРазницы > 0 Тогда
						ДтКт = "Дт";
					Иначе
						ДтКт = "Кт";
						СуммаВременнойРазницы = -СуммаВременнойРазницы ;
					КонецЕсли;
					
					Проводка = Движения.Налоговый.Добавить();
						
					Проводка.Организация = Организация;
					Проводка.Период      = Дата;
					Проводка.Содержание  = "ВР вследствие разн.порядка признания курс.разниц";
						
					Проводка["Счет" + ДтКт]     = ПланыСчетов.Налоговый.ЗадолженностьПоРеализацииВУЕ;
					Проводка["ВидУчета" + ДтКт] = Перечисления.ВидыУчетаПоПБУ18.ВР;
					Проводка["Субконто" + ДтКт].Контрагенты = СтрокаРасчетов.Контрагент;
					Проводка["Субконто" + ДтКт].Договоры    = СтрокаРасчетов.ДоговорКонтрагента;
					
					Проводка.Сумма = СуммаВременнойРазницы;
						
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого СтрокаАванса Из ТабАвансы Цикл
				
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Организация = Организация;
				Проводка.Период      = Дата;
				Проводка.Содержание  = "Ввод начальных остатков по взаиморасчетам";
				
				Проводка.СчетДт = Счет00;
				Проводка.СчетКт = СтрокаАванса.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаАванса.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтрокаАванса.ДоговорКонтрагента);
				
				Проводка.Сумма = СтрокаАванса.СуммаРегл;
				
				Если СтрокаАванса.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтрокаАванса.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаАванса.СуммаВзаиморасчетов;
				КонецЕсли;
				
				ЭтоАвансВВалюте = СтрокаАванса.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета
					И НЕ СтрокаАванса.РасчетыВУсловныхЕдиницах;
				Если ЭтоАвансВВалюте И ФормироватьПроводкиПоСчетуВАЛ Тогда
				
					Проводка = Движения.Хозрасчетный.Добавить();
					Проводка.Организация = Организация;
					Проводка.Период      = Дата;
					Проводка.Содержание  = "Ввод начальных остатков по взаиморасчетам";
				
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаАванса.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтрокаАванса.ДоговорКонтрагента);
				
					Проводка.Сумма = СтрокаАванса.СуммаРеглСУчетомПереоценки;
				
					Проводка.ВалютаКт        = СтрокаАванса.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаАванса.СуммаВзаиморасчетов;
				
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Для каждого СтрокаРасчетов Из ТабРасчеты Цикл
				
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Организация = Организация;
				Проводка.Период      = Дата;
				Проводка.Содержание  = "Ввод начальных остатков по взаиморасчетам";
				
				Проводка.СчетДт = Счет00;
				Проводка.СчетКт = СтрокаРасчетов.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаРасчетов.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтрокаРасчетов.ДоговорКонтрагента);
				
				Если Дата < '20070101' Тогда
					Проводка.Сумма = СтрокаРасчетов.СуммаРегл;
				ИначеЕсли СтрокаРасчетов.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
					Проводка.Сумма = СтрокаРасчетов.СуммаРегл;
				Иначе
					Проводка.Сумма = СтрокаРасчетов.СуммаРеглСУчетомПереоценки;
				КонецЕсли;
				
				Если СтрокаРасчетов.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтрокаРасчетов.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаРасчетов.СуммаВзаиморасчетов;
				КонецЕсли;
				
				Если СтрокаРасчетов.РасчетыВУсловныхЕдиницах И ФормироватьВременныеРазницы Тогда
					
					СуммаВременнойРазницы = СтрокаРасчетов.СуммаРеглСУчетомПереоценки - СтрокаРасчетов.СуммаРегл;
					
					Если СуммаВременнойРазницы = 0 Тогда
						Продолжить;
					ИначеЕсли СуммаВременнойРазницы > 0 Тогда
						ДтКт = "Кт";
					Иначе
						ДтКт = "Дт";
						СуммаВременнойРазницы = -СуммаВременнойРазницы ;
					КонецЕсли;
					
					Проводка = Движения.Налоговый.Добавить();
						
					Проводка.Организация = Организация;
					Проводка.Период      = Дата;
					Проводка.Содержание  = "ВР вследствие разн.порядка признания курс.разниц";
						
					Проводка["Счет" + ДтКт]     = ПланыСчетов.Налоговый.ЗадолженностьПоПриобретениюВУЕ;
					Проводка["ВидУчета" + ДтКт] = Перечисления.ВидыУчетаПоПБУ18.ВР;
					Проводка["Субконто" + ДтКт].Контрагенты = СтрокаРасчетов.Контрагент;
					Проводка["Субконто" + ДтКт].Договоры    = СтрокаРасчетов.ДоговорКонтрагента;
					
					Проводка.Сумма = СуммаВременнойРазницы;
						
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого СтрокаАванса Из ТабАвансы Цикл
				
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Организация = Организация;
				Проводка.Период      = Дата;
				Проводка.Содержание  = "Ввод начальных остатков по взаиморасчетам";
				
				Проводка.СчетКт = Счет00;
				Проводка.СчетДт = СтрокаАванса.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаАванса.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    СтрокаАванса.ДоговорКонтрагента);
				
				Проводка.Сумма = СтрокаАванса.СуммаРегл;
				
				Если СтрокаАванса.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаДт        = СтрокаАванса.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрокаАванса.СуммаВзаиморасчетов;
				КонецЕсли;
				
				ЭтоАвансВВалюте = СтрокаАванса.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета
					И НЕ СтрокаАванса.РасчетыВУсловныхЕдиницах;
				Если ЭтоАвансВВалюте И ФормироватьПроводкиПоСчетуВАЛ Тогда
				
					Проводка = Движения.Хозрасчетный.Добавить();
					Проводка.Организация = Организация;
					Проводка.Период      = Дата;
					Проводка.Содержание  = "Ввод начальных остатков по взаиморасчетам";
				
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаАванса.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    СтрокаАванса.ДоговорКонтрагента);
				
					Проводка.Сумма = СтрокаАванса.СуммаРеглСУчетомПереоценки;
				
					Проводка.ВалютаДт        = СтрокаАванса.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = СтрокаАванса.СуммаВзаиморасчетов;
				
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ДвиженияПоРегистрамРезервовРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаРезервы, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Формирование движений по регистру резервов по сомнительным долгам.

Процедура ДвиженияПоРегистрамРезервовРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаРезервы, Отказ, Заголовок)

    Если НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РезервыПоСомнительнымДолгам Тогда
    	Возврат;
    КонецЕсли;
    
	ФормироватьРезервыПоСомнительнымДолгамБУ = СтруктураШапкиДокумента.УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамБУ;
	ФормироватьРезервыПоСомнительнымДолгамНУ = СтруктураШапкиДокумента.УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамНУ;
	ПоддержкаПБУ18	= СтруктураШапкиДокумента.УчетнаяПолитика.ПоддержкаПБУ18;
	
	Если НЕ ФормироватьРезервыПоСомнительнымДолгамБУ Тогда
		ТаблицаРезервы.ЗаполнитьЗначения(0, "СуммаБУ");
	КонецЕсли;

	Если НЕ ФормироватьРезервыПоСомнительнымДолгамНУ Тогда
		ТаблицаРезервы.ЗаполнитьЗначения(0, "СуммаНУ");
	КонецЕсли;
	
	// Движения по регистру РезервыПоСомнительнымДолгам
	
	ТаблицаДвиженийРезервы = Движения.РезервыПоСомнительнымДолгам.ВыгрузитьКолонки();
	ТаблицаДвиженийРезервы.Колонки.Документ.Имя = "ДокументРасчетовСКонтрагентом";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРезервы, ТаблицаДвиженийРезервы);
	ТаблицаДвиженийРезервы.Колонки.ДокументРасчетовСКонтрагентом.Имя = "Документ";
	ТаблицаДвиженийРезервы.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	
	Движения.РезервыПоСомнительнымДолгам.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.РезервыПоСомнительнымДолгам.мТаблицаДвижений = ТаблицаДвиженийРезервы;
	Движения.РезервыПоСомнительнымДолгам.ВыполнитьПриход();
	
	Счет000 	= ПланыСчетов.Хозрасчетный.Вспомогательный;
	Счет63БУ 	= ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам;
	Счет63НУ 	= ПланыСчетов.Налоговый.РезервыПоСомнительнымДолгам;
	
	// Проводки по Хозрасчетный и Налоговый
	
	Если СтруктураШапкиДокумента.ФормироватьПроводкиПоВводуНачальныхОстатков Тогда
	
		Для Каждого СтрокаРезерва Из ТаблицаРезервы Цикл
		
			СуммаБУ = 0;
			СуммаНУ = 0;
		
			Если ФормироватьРезервыПоСомнительнымДолгамБУ Тогда
				СуммаБУ = СтрокаРезерва.СуммаБУ;
			КонецЕсли;
			Если ФормироватьРезервыПоСомнительнымДолгамНУ Тогда
				СуммаНУ = СтрокаРезерва.СуммаНУ;
			КонецЕсли;
			
			СуммаПР = СуммаБУ - СуммаНУ;
		
			Если СуммаБУ <> 0 Тогда
			
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период		 = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Ввод начальных остатков резервов по сомнительным долгам";
				Проводка.Сумма		 = СуммаБУ;
				
				// Дт
				Проводка.СчетДт		 = Счет000;
				
				// Кт
				Проводка.СчетКт		 = Счет63БУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаРезерва.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтрокаРезерва.ДоговорКонтрагента);
			
			КонецЕсли;
		
			Если СуммаНУ <> 0 Тогда
			
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				ПроводкаНУ.Период		= СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание	= "Ввод начальных остатков резервов по сомнительным долгам";
				ПроводкаНУ.Сумма		= СуммаНУ;
				
				// Кт
				ПроводкаНУ.СчетКт		= Счет63НУ;
				ПроводкаНУ.ВидУчетаКт	= Перечисления.ВидыУчетаПоПБУ18.НУ;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Контрагенты", СтрокаРезерва.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Договоры", СтрокаРезерва.ДоговорКонтрагента);
				
			КонецЕсли;
			
			Если СуммаПР <> 0 И ПоддержкаПБУ18 Тогда
			
				ПроводкаНУ = Движения.Налоговый.Добавить();
				
				ПроводкаНУ.Период		= СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация 	= СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание	= "Ввод начальных остатков резервов по сомнительным долгам";
				ПроводкаНУ.Сумма		= СтрокаРезерва.СуммаБУ - СтрокаРезерва.СуммаНУ;
				
				// Кт
				ПроводкаНУ.СчетКт		= Счет63НУ;
				ПроводкаНУ.ВидУчетаКт	= Перечисления.ВидыУчетаПоПБУ18.ПР;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Контрагенты", СтрокаРезерва.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Договоры", СтрокаРезерва.ДоговорКонтрагента);
			
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамРезервовРегл()

// Формирование движений по регистру взаиморасчетов с контрагентами по документам
//
Процедура ДвиженияПоРегиструОперативныхРасчетов(РежимПроведения, СтруктураШапкиДокумента, ТаблицаРасчеты, ТаблицаАвансы, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
		ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
		ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	Иначе //.РасчетыПоПрочимОперациям - не обслуживаются
		Возврат;
	КонецЕсли;
	УпрУчет = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	
	// Таблица расчетов
	ТаблицаДвижений = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ВыгрузитьКолонки();
	Для Каждого СтрокаРасчетов Из ТаблицаРасчеты Цикл
		Если СтрокаРасчетов.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			Движение = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаРасчетов);
			Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
				ИЛИ СтрокаРасчетов.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
				Движение.СуммаРегл = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТаблицаДвижений.ЗаполнитьЗначения(ВидРасчетовСКонтрагентом, "ВидРасчетовСКонтрагентом");
	ТаблицаДвижений.ЗаполнитьЗначения(УпрУчет, "УпрУчет");
	
	Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.мПериод = Дата;
	Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.мТаблицаДвижений = ТаблицаДвижений;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
		Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ВыполнитьПриход();
	Иначе
		Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ВыполнитьРасход();
	КонецЕсли;
	
	// Таблица авансов
	ТаблицаДвижений = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ВыгрузитьКолонки();
	Для Каждого СтрокаАванса Из ТаблицаАвансы Цикл
		Если СтрокаАванса.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			Движение = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаАванса);
			Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
				ИЛИ СтрокаАванса.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
				Движение.СуммаРегл = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТаблицаДвижений.ЗаполнитьЗначения(ВидРасчетовСКонтрагентом, "ВидРасчетовСКонтрагентом");
	ТаблицаДвижений.ЗаполнитьЗначения(УпрУчет, "УпрУчет");
	
	Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.мТаблицаДвижений = ТаблицаДвижений;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
		Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ВыполнитьРасход();
	Иначе
		Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструОперативныхРасчетов

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверкаРеквизитовТЧ(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличных частей.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить( "Контрагент",                     "Контрагент");
	СтруктураПолей.Вставить( "ДоговорКонтрагента",             "ДоговорКонтрагента");
	СтруктураПолей.Вставить( "Организация",             	   "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить( "Сделка",                         "Сделка");
	СтруктураПолей.Вставить( "Документ",                       "ДокументРасчетовСКонтрагентом");
	СтруктураПолей.Вставить( "ДокументРасчетовСКонтрагентом",  "ДокументРасчетовСКонтрагентом");
	СтруктураПолей.Вставить( "ВалютаВзаиморасчетов",           "ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить( "СчетУчетаРасчетовСКонтрагентом", "СчетУчетаРасчетовСКонтрагентом");
	СтруктураПолей.Вставить( "СуммаВзаиморасчетов",            "СуммаВзаиморасчетов");
	СтруктураПолей.Вставить( "СуммаРегл",                      "СуммаРегл");
	СтруктураПолей.Вставить( "СуммаРег",                       "СуммаРегл");
	СтруктураПолей.Вставить( "СуммаРеглСУчетомПереоценки",     "СуммаРеглСУчетомПереоценки");
	СтруктураПолей.Вставить( "СуммаУпр",                       "СуммаУпр");
	СтруктураПолей.Вставить( "РасчетыВУсловныхЕдиницах",       "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураПолей.Вставить( "СчетОплаты",                     "СчетУчетаРасчетовСКонтрагентом");
	СтруктураПолей.Вставить( "ВедениеВзаиморасчетов",          "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить( "ВестиПоДокументамРасчетовСКонтрагентом", "ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом");
	
	РезультатЗапроса = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДанныеПоРасчетам", СтруктураПолей, Новый Структура());
	ТаблицаРасчеты   = РезультатЗапроса.Выгрузить();
	
	СтруктураПолей.Вставить( "ДатаОплаты",                     "ДокументОплаты.Дата");
	СтруктураПолей.Вставить( "Документ",                       "ДокументОплаты");
	СтруктураПолей.Вставить( "ДокументРасчетовСКонтрагентом",  "ДокументОплаты");
	
	РезультатЗапроса = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДанныеПоАвансам", СтруктураПолей, Новый Структура());
	ТаблицаАвансы    = РезультатЗапроса.Выгрузить();
	
	// Проведение по табличной части ДанныеПоРезервамПоСомнительнымДолгам.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить( "Контрагент",                     "Контрагент");
	СтруктураПолей.Вставить( "ДоговорКонтрагента",             "ДоговорКонтрагента");
	СтруктураПолей.Вставить( "ДокументРасчетовСКонтрагентом",  "ДокументРасчетовСКонтрагентом");
	СтруктураПолей.Вставить( "ВалютаВзаиморасчетов",           "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить( "СчетУчетаРасчетовСКонтрагентом", "СчетУчетаРасчетовСКонтрагентом");
	СтруктураПолей.Вставить( "СуммаБУ",            			   "СуммаБУ");
	СтруктураПолей.Вставить( "СуммаНУ",            			   "СуммаНУ");
	
	РезультатЗапроса = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДанныеПоРезервамПоСомнительнымДолгам", СтруктураПолей, Новый Структура());
	ТаблицаРезервы	 = РезультатЗапроса.Выгрузить();
	
	ПодготовитьТаблицыДокумента(ТаблицаРасчеты, ТаблицаАвансы);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаРасчеты, ТаблицаАвансы, ТаблицаРезервы, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения"
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	Если ОтразитьВРегистрахРасчетовОрганизации Тогда
		
		// Сдвиг границы последовательности на начало следующего дня
		
		Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
			
			БухгалтерскийУчетРасчетовСКонтрагентами.СдвигГраницыПоследовательностиНазад(
				"РасчетыПоПриобретениюОрганизации", 
				Новый МоментВремени(КонецДня(Дата) + 1), 
				Новый Структура("Организация", Организация));
				
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
				
			БухгалтерскийУчетРасчетовСКонтрагентами.СдвигГраницыПоследовательностиНазад(
				"РасчетыПоРеализацииОрганизации", 
				Новый МоментВремени(КонецДня(Дата) + 1), 
				Новый Структура("Организация", Организация));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения

// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС") Тогда
		
		// Заполнение шапки
		Организация = Основание.Организация;
		Дата        = Основание.Дата;
		
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойОтветственный");
 
		Если Основание.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям 
			Или Основание.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
			ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями;
		КонецЕсли;
		
		ОтражатьВУправленческомУчете                = Истина;
		ОтразитьВРегистреВзаиморасчетовПоДокументам = Истина;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
			
			Для Каждого СтрокаОснования Из Основание.ДанныеПоСФ Цикл
				
				НоваяСтрока = ДанныеПоАвансам.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОснования);
				
				НоваяСтрока.СуммаВзаиморасчетов = СтрокаОснования.СуммаБезНДС + СтрокаОснования.НДС - (СтрокаОснования.СуммаБезНДСОплата + СтрокаОснования.НДСОплата);
				НоваяСтрока.СуммаРегл           = НоваяСтрока.СуммаВзаиморасчетов;
				НоваяСтрока.ДокументОплаты      = СтрокаОснования.СчетФактура;
				
				ПересчетСуммыУпр(НоваяСтрока);
				
			КонецЦикла;
			
		Иначе
			Для Каждого СтрокаОснования Из Основание.РасчетыСКонтрагентами Цикл
				
				Если СтрокаОснования.Аванс Тогда
					НоваяСтрока = ДанныеПоАвансам.Добавить();
				Иначе
					НоваяСтрока = ДанныеПоРасчетам.Добавить();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОснования);
				
				НоваяСтрока.СуммаВзаиморасчетов = СтрокаОснования.ВалютнаяСуммаВзаиморасчетов;
				НоваяСтрока.СуммаРегл           = СтрокаОснования.СуммаВзаиморасчетов;
				Если НЕ СтрокаОснования.Аванс Тогда
					НоваяСтрока.ДокументРасчетовСКонтрагентом        = СтрокаОснования.СчетФактура;
				КонецЕсли;
				
				ПересчетСуммыУпр(НоваяСтрока);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
