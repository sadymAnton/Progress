////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выгружает документ и возвращает свойства файла выгрузки.
//
// Параметры:
//  Ссылка - ссылка на отчет (документ).
//
// Результат:
//	Массив структур или Неопределено, если не удалось сформировать файл выгрузки.
//	Ключи структуры:
//		- АдресФайлаВыгрузки - адрес двоичных данных файла выгрузки во временном хранилище
//		- ИмяФайлаВыгрузки - короткое имя файла выгрузки (с расширением)
//
Функция ВыгрузитьДокумент(УникальныйИдентификатор = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СодержаниеВыгрузки = ЭлектронноеПредставление();
	
	Для Каждого ЭлементВыгрузки Из СодержаниеВыгрузки Цикл
		
		Если Результат = Неопределено Тогда
			Результат = Новый Массив;
		КонецЕсли;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		СохраняемыйФайл = Новый ТекстовыйДокумент;
		СохраняемыйФайл.УстановитьТекст(ЭлементВыгрузки.ТекстФайла);
		СохраняемыйФайл.Записать(ИмяВременногоФайла, ЭлементВыгрузки.КодировкаТекста);
		
		ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
		Если УникальныйИдентификатор <> Неопределено Тогда
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, УникальныйИдентификатор);
		Иначе
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки);
		КонецЕсли;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ЭлементВыгрузки.ИмяФайла);
		
		Результат.Добавить(СтруктураВыгрузки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ОтчетныйГод", ОтчетныйГод);
	Запрос.Параметры.Вставить("НомерКорректировки", НомерКорректировки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УведомлениеОКонтролируемыхСделках.Ссылка,
	|	УведомлениеОКонтролируемыхСделках.Номер,
	|	УведомлениеОКонтролируемыхСделках.Дата
	|ИЗ
	|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
	|ГДЕ
	|	УведомлениеОКонтролируемыхСделках.Организация = &Организация
	|	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод = &ОтчетныйГод
	|	И УведомлениеОКонтролируемыхСделках.НомерКорректировки = &НомерКорректировки
	|	И УведомлениеОКонтролируемыхСделках.Ссылка <> &Ссылка";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Если НомерКорректировки > 0 Тогда
			ТекстИсключения = НСтр("ru = 'Корректировка №%НомерКорректировки% уведомления о контролируемых сделках за %ОтчетныйГод% уже существует'");
		Иначе
			ТекстИсключения = НСтр("ru = 'Уведомление о контролируемых сделках за %ОтчетныйГод% уже существует'");
		КонецЕсли;
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%НомерКорректировки%", НомерКорректировки);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ОтчетныйГод%", Формат(ОтчетныйГод, "ДФ=yyyy"));
		ВызватьИсключение(ТекстИсключения);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует сведения необходимые для сохранения и передачи файла (файлов) электронного
// представления документа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - сведения электронного представления документа, включающие в себя
//                    имя файла(файлов), текст(тексты) и кодировку представления.
//
Функция ЭлектронноеПредставление()
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления();
	
	СтруктураВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения);
	
	Текст = ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления()
	
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ДатаДок", ТекущаяДата());
	ОсновныеСведения.Вставить("НомКорр", Формат(НомерКорректировки, "ЧН=; ЧГ=0"));
	ОсновныеСведения.Вставить("ПоМесту", КодМестаПредставления);
	ВерсПрог = Лев("1С:ПРЕДПРИЯТИЕ 1.3 УПП " + СокрЛП(Метаданные.Версия), 40);
	ОсновныеСведения.Вставить("ВерсПрог", ВерсПрог);
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	ОтчетГод = Формат(ОтчетныйГод, "ДФ=yyyy");
	ОсновныеСведения.Вставить("ОтчетГод", ОтчетГод);
	
	СведенияОбОрганизации = СведенияОбОрганизации();
	
	ОсновныеСведения.Вставить("ОКАТО", СведенияОбОрганизации.ОКАТО);
	ОсновныеСведения.Вставить("ОКВЭД", СведенияОбОрганизации.ОКВЭД);
	ОсновныеСведения.Вставить("Тлф", СведенияОбОрганизации.ТелОрганизации);
	ОсновныеСведения.Вставить("ЭлПочта", "");
	
	Если ЭтоПБОЮЛ Тогда
		ИНН = СведенияОбОрганизации.ИННЮЛ;
		ЕстьИННФЛ = ЗначениеЗаполнено(ИНН);
		ОсновныеСведения.Вставить("ЕстьИННФЛ", ЕстьИННФЛ);
		
		ОсновныеСведения.Вставить("ИННФЛ", ИНН);
		СведенияОЮрФизЛице  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ТекущаяДата());
		
		СведенияОбИП = СведенияОбИП();
		ОсновныеСведения.Вставить("НПФЛФамилия",  СведенияОбИП.Фамилия);
		ОсновныеСведения.Вставить("НПФЛИмя",      СведенияОбИП.Имя);
		ОсновныеСведения.Вставить("НПФЛОтчество", СведенияОбИП.Отчество);
	Иначе
		ОсновныеСведения.Вставить("НаимОрг", СведенияОбОрганизации.НаимЮЛПол);
		ОсновныеСведения.Вставить("ИННЮЛ", СведенияОбОрганизации.ИННЮЛ);
		ОсновныеСведения.Вставить("КППЮЛ", СведенияОбОрганизации.КППЮЛ);
	КонецЕсли;
	
	ОсновныеСведения.Вставить("КодНО", СведенияОбОрганизации.КодНО);
	
	ДобавитьСведенияОПодписанте(ОсновныеСведения);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
	
КонецФункции

Функция СведенияОбОрганизации() Экспорт
	
	//СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации, ФИО, ОКВЭД, ОКАТО";
	ПараметрыОрганизации = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Организация,
		"ИНН, КПП, НаименованиеПолное, КодИМНС, ЮрФизЛицо, ИндивидуальныйПредприниматель, КодОКВЭД, КодПоОКАТО");
	Сведения = Новый Структура();
	
	ДатаЗначения = ТекущаяДатаСеанса();
	
	ПБОЮЛ = ПараметрыОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	
	Сведения.Вставить("ДатаДок", ТекущаяДатаСеанса());
	Сведения.Вставить("ИННЮЛ", ПараметрыОрганизации.ИНН);
	Сведения.Вставить("КППЮЛ", ПараметрыОрганизации.КПП);
	Сведения.Вставить("НаимЮЛПол", ПараметрыОрганизации.НаименованиеПолное);
	Сведения.Вставить("КодНО",     ПараметрыОрганизации.КодИМНС);
	
	Если ПБОЮЛ Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица;
		Данные = Новый Структура("Объект, Тип, Вид", ПараметрыОрганизации.ИндивидуальныйПредприниматель, Перечисления.ТипыКонтактнойИнформации.Телефон, ВидКонтактнойИнформации);
		ТелефонОрганизации = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
	Иначе
		ЭлементТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		Данные = Новый Структура("Объект, Тип, Вид", Организация, Перечисления.ТипыКонтактнойИнформации.Телефон, ЭлементТелефон);
		ТелефонОрганизации = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
	КонецЕсли;
	
	Сведения.Вставить("ТелОрганизации", ТелефонОрганизации);
	
	Если ПБОЮЛ Тогда
		ФЛ = ПараметрыОрганизации.ИндивидуальныйПредприниматель;
		Если ФЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			ФИО = ПараметрыОрганизации.НаименованиеПолное;
		Иначе
			ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФЛ));
			Если ДанныеФЛ.Количество() > 0 Тогда
				ФИО = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
			Иначе
				ФИО = "";
			КонецЕсли;
		КонецЕсли;
	Иначе
		ФИО = "";
	КонецЕсли;

	Сведения.Вставить("ФИО",   ФИО);
	Сведения.Вставить("ОКВЭД", ПараметрыОрганизации.КодОКВЭД);
	Сведения.Вставить("ОКАТО", ПараметрыОрганизации.КодПоОКАТО);
	
	Возврат Сведения;
	
КонецФункции

// ПолучитьПоКодамСведенияОПредставителе
Функция ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП = Неопределено)
	
	ТипПодписанта = "1";
	флПредставительЮрЛицо = Истина;
	НаименованиеОрганизацииПредставителя = "";
	ФИОПредставителя = "";
	ПредставительСсылка = Неопределено;
	ДокументПредставителя = "";
	
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	РегистрацияВИФНС.Представитель,
	               |	РегистрацияВИФНС.УполномоченноеЛицоПредставителя,
	               |	РегистрацияВИФНС.ДокументПредставителя,
	               |	РегистрацияВИФНС.Владелец.ЮрФизЛицо КАК ЮрФизЛицо
	               |ИЗ
	               |	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
	               |ГДЕ
	               |	РегистрацияВИФНС.Владелец = &Организация
	               |	И РегистрацияВИФНС.Код = &КодНО
	               |	И РегистрацияВИФНС.ПометкаУдаления = &ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);			   
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодНО", КодНО);
	
	Если КПП <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И РегистрацияВИФНС.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Представитель) Тогда
		ТипПодписанта = "2";
		ПредставительСсылка = Выборка.Представитель;
		ДокументПредставителя = Выборка.ДокументПредставителя;
		
		Если Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			флПредставительЮрЛицо = Истина;
			НаименованиеОрганизацииПредставителя = СокрЛП(ПредставительСсылка);
			ФИОПредставителя = СокрЛП(Выборка.УполномоченноеЛицоПредставителя);
		Иначе
			флПредставительЮрЛицо = Ложь;
			ФИОПредставителя = СокрЛП(ПредставительСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ТипПодписанта, флПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ФИОПредставителя, ПредставительСсылка, ДокументПредставителя", 
							 ТипПодписанта, флПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ФИОПредставителя, ПредставительСсылка, ДокументПредставителя);
							 
КонецФункции //ПолучитьПоКодамСведенияОПредставителе

Процедура ДобавитьСведенияОПодписанте(ОсновныеСведения) Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	КодНО = ОсновныеСведения.КодНО;
	КПП   = ?(ОсновныеСведения.Свойство("КППЮЛ"), ОсновныеСведения.КППЮЛ, "");
	
	СведенияОПредставителе = ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	ОсновныеСведения.Вставить("ПрПодп", ТипПодписанта);
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
			// ФИО подписанта не заполняется.
		Иначе
			ФИОПодписанта = СведенияОРуководителе();
			ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
		КонецЕсли;
	Иначе
		// Есть представитель.
		Если ТипЗнч(СведенияОПредставителе.ПредставительСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			ФИОПодписанта = РазделенныеФИО(СведенияОПредставителе.ФИОПредставителя);
			
			ОсновныеСведения.Вставить("НаимОргПодп", СведенияОПредставителе.НаименованиеОрганизацииПредставителя);
		Иначе
			ФИОПодписанта = РегламентированнаяОтчетность.ПолучитьФИОФизЛица(СведенияОПредставителе.ПредставительСсылка, ОсновныеСведения.ДатаДок);
		КонецЕсли;
		
		ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
		ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
		ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
		
		ОсновныеСведения.Вставить("НаимДокПодп", СведенияОПредставителе.ДокументПредставителя);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СведенияОРуководителе()
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Руководитель = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Дата, Данные);
	
	Если Руководитель <> Неопределено И Руководитель.Количество() > 0 Тогда
		ФЛ = Руководитель[0].ФизическоеЛицо;
		Если ЗначениеЗаполнено(ФЛ) Тогда
			ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо",ФЛ));
			Если ДанныеФЛ.Количество() > 0 Тогда
				Результат.Фамилия  = СокрЛП(ДанныеФЛ[0].Фамилия);
				Результат.Имя      = СокрЛП(ДанныеФЛ[0].Имя);
				Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазделенныеФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

Функция СведенияОбИП()
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИндивидуальныйПредприниматель") <> Неопределено Тогда
		ФЛ = Организация.ИндивидуальныйПредприниматель;
		Если ФЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			ФИОИП = Организация.НаименованиеПолное;
		Иначе
			ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", ФЛ));
			Если ДанныеФЛ.Количество() > 0 Тогда
				Результат.Фамилия = СокрЛП(ДанныеФЛ[0].Фамилия);
				Результат.Имя = СокрЛП(ДанныеФЛ[0].Имя);
				Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
		ИндивидуальныйПредприниматель = Организация.ИндивидуальныйПредприниматель;
		Если ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
			ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", ИндивидуальныйПредприниматель));
			Если ДанныеФЛ.Количество() > 0 Тогда
				Результат.Фамилия = СокрЛП(ДанныеФЛ[0].Фамилия);
				Результат.Имя = СокрЛП(ДанныеФЛ[0].Имя);
				Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления(СведенияОтправки)
	
	Префикс = "UT_UVKNRSD";
	Если СведенияОтправки.ЭтоПБОЮЛ Тогда
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННФЛ);
	Иначе
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННЮЛ) + СокрЛП(СведенияОтправки.КППЮЛ);
	КонецЕсли;
	ИдентификаторПолучателя = СведенияОтправки.КодНО + "_" + СведенияОтправки.КодНО;
	ДатаФормированияФайла = Формат(СведенияОтправки.ДатаДок, "ДФ=yyyyMMdd");
	ИдентификационныйНомер = Строка(Новый УникальныйИдентификатор);
	
	ИдентификаторФайла = Префикс
	                   + "_" + ИдентификаторПолучателя
	                   + "_" + ИдентификаторОтправителя
	                   + "_" + ДатаФормированияФайла
	                   + "_" + ИдентификационныйНомер;
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ПолучитьМакет("СтруктураXML501");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры)
	
	ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки);
	
	ЗаполнитьПараметры(Параметры, ДеревоВыгрузки);
	
	ЗаполнитьДаннымиПоКонтролируемымСделкам(Параметры, ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьПараметры(Параметры, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ЗаполнитьПараметры(Параметры, Стр);
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ИмяПараметра = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если Параметры.Свойство(ИмяПараметра) Тогда
					ВывестиПоказательВXML(Стр, Параметры[ИмяПараметра]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиПоКонтролируемымСделкам(Параметры, ДеревоВыгрузки)
	
	
	ДатаАктуальностиСведений = КонецГода(ЭтотОбъект.ОтчетныйГод);
	
	ЛистыУведомления = КонтролируемыеСделки.ПолучитьЛистыУведомления(ЭтотОбъект.Ссылка);
	
	Листы1А = ЛистыУведомления.ЛистыРаздела1А;
	Листы1Б = ЛистыУведомления.ЛистыРаздела1Б;
	ЛистыРаздела2 = ЛистыУведомления.ЛистыРаздела2;
	ЛистыРаздела3 = ЛистыУведомления.ЛистыРаздела3;
	ДанныеРаздела2 = ЛистыУведомления.ДанныеРаздела2;
	ДанныеРаздела3 = ЛистыУведомления.ДанныеРаздела3;
	
	Узел_Документ = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_УвКонтрСд = ПолучитьПодчиненныйЭлемент(Узел_Документ, "УвКонтрСд");
	
	ПрототипУзла_СвКонтрСд = ПолучитьПодчиненныйЭлемент(Узел_УвКонтрСд, "СвКонтрСд");
	Для Каждого Лист1А ИЗ Листы1А Цикл
		Узел_СвКонтрСд = НовыйУзелИзПрототипа(ПрототипУзла_СвКонтрСд);
		
		УстановитьЗначениеЭлемента(Узел_СвКонтрСд, "НомПорСд", Лист1А.НомерЛиста1А);
		
		Узел_ОснКонтрСд = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрСд, "ОснКонтрСд");
		ЗаполнитьСведенияОснованияКонтроляСделки(Узел_ОснКонтрСд, Лист1А);
		
		Узел_КонтрСд = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрСд, "КонтрСд");
		ЗаполнитьСведенияОСделке(Узел_КонтрСд, Лист1А);
		
		Узел_ДохРасхСд = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрСд, "ДохРасхСд");
		ЗаполнитьСведенияОДоходахРасходах(Узел_ДохРасхСд, Лист1А);
		
		ПрототипУзла_СвПредмСд = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрСд, "СвПредмСд");
		ЗаполнитьСведенияОПредметеСделки(ПрототипУзла_СвПредмСд, Листы1Б, Лист1А.Сделка);
		УдалитьУзел(ПрототипУзла_СвПредмСд);
		
		ПрототипУзла_СвОргУчаст = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрСд, "СвОргУчаст");
		ЗаполнитьСведенияОбУчастникахОрганизациях(ПрототипУзла_СвОргУчаст, ЛистыРаздела2, ДанныеРаздела2, Лист1А.Сделка);
		УдалитьУзел(ПрототипУзла_СвОргУчаст);
		
		ПрототипУзла_СвФЛУчаст = ПолучитьПодчиненныйЭлемент(Узел_СвКонтрСд, "СвФЛУчаст");
		ЗаполнитьСведенияОбУчастникахФизЛицах(ПрототипУзла_СвФЛУчаст, ЛистыРаздела3, ДанныеРаздела3, Лист1А.Сделка);
		УдалитьУзел(ПрототипУзла_СвФЛУчаст);
		
	КонецЦикла;
	УдалитьУзел(ПрототипУзла_СвКонтрСд);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОснованияКонтроляСделки(УзелВыгрузки, Сведения)
	
	УстановитьЗначениеЭлемента(УзелВыгрузки, "ВзЗавис", Сведения.Строка100Взаимозависимость);
	
	Узел_Осн105_14 = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "Осн105.14");
	УстановитьЗначениеЭлемента(Узел_Осн105_14, "Осн121", Сведения.Строка121СтороныВзаимозависимыПоКодексу);
	УстановитьЗначениеЭлемента(Узел_Осн105_14, "Осн122", Сведения.Строка122СделкаВОбластиВнешнейТорговли);
	УстановитьЗначениеЭлемента(Узел_Осн105_14, "Осн123", Сведения.Строка123СделкаСКонтрагентомСЛьготнымНалогообложением);
	УстановитьЗначениеЭлемента(Узел_Осн105_14, "Осн124", Сведения.Строка124СделкаСНезависимымПосредником);
	
	Узел_ОснРФ105_14 = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "ОснРФ105.14");
	УстановитьЗначениеЭлемента(Узел_ОснРФ105_14, "Осн131", Сведения.Строка131СуммаДоходовПоСделкамПревышаетПредел);
	УстановитьЗначениеЭлемента(Узел_ОснРФ105_14, "Осн132", Сведения.Строка132СделкаСПлательщикомНДПИ);
	УстановитьЗначениеЭлемента(Узел_ОснРФ105_14, "Осн133", Сведения.Строка133СделкаСКонтрагентомНаСпецрежимах);
	УстановитьЗначениеЭлемента(Узел_ОснРФ105_14, "Осн134", Сведения.Строка134СделкаСПлательщикомНалогаНаПрибыль);
	УстановитьЗначениеЭлемента(Узел_ОснРФ105_14, "Осн135", Сведения.Строка135СделкаСРезидентомОЭЗ);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОСделке(УзелВыгрузки, Сведения)
	
	ЭтоГруппаОднородныхСделок = Сведения.Количество1Б > 0;
	
	УстановитьЗначениеЭлемента(УзелВыгрузки, "ГрупОС",       ?(ЭтоГруппаОднородныхСделок, "1", "0"));
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КодНаимСд",    Сведения.Строка210КодНаименованияСделки);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КодСторСд",    Сведения.Строка211КодСтороныСделки);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "ПрОпрЦен",     Сведения.Строка220ПризнакОпределенияЦеныСделки);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КомПрОпрЦен",  Сведения.Строка220_1Комментарий);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КодОпрЦен",    Сведения.Строка230КодОпределенияЦены);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КомКодОпрЦен", Сведения.Строка230_1Комментарий);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КодМетЦен",    Сведения.Строка240КодМетодовЦенообразования);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КомКодМетЦен", Сведения.Строка240_1Комментарий);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КолУчСд",      Сведения.Строка260КоличествоУчастниковСделки);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "КомКолУчСд",   Сведения.Строка260_1Комментарий);
	
	Узел_КодИстИнф = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "КодИстИнф");
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист251", Сведения.Строка251);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист252", Сведения.Строка252);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист253", Сведения.Строка253);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист254", Сведения.Строка254);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист255", Сведения.Строка255);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист256", Сведения.Строка256);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист257", Сведения.Строка257);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист258", Сведения.Строка258);
	УстановитьЗначениеЭлемента(Узел_КодИстИнф, "Ист259", Сведения.Строка259);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОДоходахРасходах(УзелВыгрузки, Сведения)
	
	УстановитьЗначениеЭлемента(УзелВыгрузки, "СумДохСд",     Сведения.Строка300СуммаДоходов);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "СумДохСдРег",  Сведения.Строка301СуммаРегулируемыхДоходов);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "СумРасхСд",    Сведения.Строка310СуммаРасходов);
	УстановитьЗначениеЭлемента(УзелВыгрузки, "СумРасхСдРег", Сведения.Строка311СуммаРегулируемыхРасходов);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПредметеСделки(ПрототипУзлаВыгрузки, Листы1Б, Сделка)
	
	ТипыПредметовСделок = Новый Соответствие;
	
	СписокЛистов1Б = Листы1Б.НайтиСтроки(Новый Структура("Сделка", Сделка));
	Для Каждого Лист1Б Из СписокЛистов1Б Цикл
		ЛистыТипаПредмета = ТипыПредметовСделок.Получить(Лист1Б.Строка020ТипПредмета);
		Если ЛистыТипаПредмета = Неопределено Тогда
			ТипыПредметовСделок.Вставить(Лист1Б.Строка020ТипПредмета, Новый Массив());
			ЛистыТипаПредмета = ТипыПредметовСделок.Получить(Лист1Б.Строка020ТипПредмета);
		КонецЕсли;
		ЛистыТипаПредмета.Добавить(Лист1Б);
	КонецЦикла;
	
	Для Каждого ТипПредмета ИЗ ТипыПредметовСделок Цикл
		
		УзелВыгрузки = НовыйУзелИзПрототипа(ПрототипУзлаВыгрузки);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "ТипПредСд", ТипПредмета.Ключ);
		
		ПрототипУзла_ПерПредСд = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "ПерПредСд");
		Для Каждого Лист1Б ИЗ ТипПредмета.Значение Цикл
			
			Узел_ПерПредСд = НовыйУзелИзПрототипа(ПрототипУзла_ПерПредСд);
			
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "НаимПредСд",   Лист1Б.Строка030НаименованиеПредмета);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ТНВЭД",        Лист1Б.Строка040КодПоТНВЭД);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ОКП",          Лист1Б.Строка043КодПоОКП);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ОКВЭД",        Лист1Б.Строка045КодОКВЭД);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "НомУчСд",      Лист1Б.Строка050НомерУчастникаСделки);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "НомДог",       Лист1Б.Строка060НомерДоговора);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ДатаДог",      Лист1Б.Строка065ДатаДоговора);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ОКСМ",         Лист1Б.Строка070КодСтраныПроисхождения);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "КодУсловПост", Лист1Б.Строка100КодУсловийПоставки);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ОКЕИ",         Лист1Б.Строка110КодЕдиницыИзмерения);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "Количество",   Лист1Б.Строка120Количество);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ЦенаЕдин",     Лист1Б.Строка130Цена);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "СтоимИтог",    Лист1Б.Строка140Стоимость);
			УстановитьЗначениеЭлемента(Узел_ПерПредСд, "ДатаСовСд",    Лист1Б.Строка150ДатаСовершения);
			
			Узел_МестОтпрТов = ПолучитьПодчиненныйЭлемент(Узел_ПерПредСд, "МестОтпрТов");
			
			УстановитьЗначениеЭлемента(Узел_МестОтпрТов, "ОКСМ",       Лист1Б.Строка080КодСтраныОтправки);
			УстановитьЗначениеЭлемента(Узел_МестОтпрТов, "КодРегион",  Лист1Б.Строка080КодРегионаОтправки);
			УстановитьЗначениеЭлемента(Узел_МестОтпрТов, "Город",      Лист1Б.Строка080ГородОтправки);
			УстановитьЗначениеЭлемента(Узел_МестОтпрТов, "НаселПункт", Лист1Б.Строка080НаселенныйПунктОтправки);
			
			Узел_МестСовСд = ПолучитьПодчиненныйЭлемент(Узел_ПерПредСд, "МестСовСд");
			
			УстановитьЗначениеЭлемента(Узел_МестСовСд, "ОКСМ",       Лист1Б.Строка090КодСтраныСовершенияСделки);
			УстановитьЗначениеЭлемента(Узел_МестСовСд, "КодРегион",  Лист1Б.Строка090КодРегионаСовершенияСделки);
			УстановитьЗначениеЭлемента(Узел_МестСовСд, "Город",      Лист1Б.Строка090ГородСовершенияСделки);
			УстановитьЗначениеЭлемента(Узел_МестСовСд, "НаселПункт", Лист1Б.Строка090НаселенныйПунктСовершенияСделки);
			
		КонецЦикла;
		УдалитьУзел(ПрототипУзла_ПерПредСд);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчастникахОрганизациях(ПрототипУзлаВыгрузки, Листы2, ДанныеРаздела2, Сделка)
	
	СписокЛистов2 = Листы2.НайтиСтроки(Новый Структура("Сделка", Сделка));
	
	Для Каждого Лист2 Из СписокЛистов2 Цикл
		
		ДанныеЛиста2 = ДанныеРаздела2.Найти(Лист2.Контрагент, "Контрагент");
		
		УзелВыгрузки = НовыйУзелИзПрототипа(ПрототипУзлаВыгрузки);
		
		УстановитьЗначениеЭлемента(УзелВыгрузки, "НомПорСд",   ДанныеЛиста2.НомерКонтрагента);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "ПрОрг",      ДанныеЛиста2.Строка020ТипОрганизации);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "ОКСМ",       ДанныеЛиста2.Строка030КакКодСтраныРегистрации);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "НаимОрг",    ДанныеЛиста2.Строка040Наименование);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "ИННЮЛ",      ДанныеЛиста2.Строка050ИНН);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "КПП",        ДанныеЛиста2.Строка060КПП);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "РегНомИн",   ДанныеЛиста2.Строка070РегНомерВСтрокеРегистрации);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "КодНПРег",   ДанныеЛиста2.Строка080КодНалогВСтранеРегистрации);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "АдрИнТекст", ?(ДанныеЛиста2.Строка020ТипОрганизации = 1, "", ДанныеЛиста2.Строка090АдресИностраннойОрганизации));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчастникахФизЛицах(ПрототипУзлаВыгрузки, Листы3, ДанныеРаздела3, Сделка)
	
	СписокЛистов3 = Листы3.НайтиСтроки(Новый Структура("Сделка", Сделка));
	
	Для Каждого Лист3 Из СписокЛистов3 Цикл
		
		Физлицо = ДанныеРаздела3.Найти(Лист3.Контрагент, "Контрагент");
		
		УзелВыгрузки = НовыйУзелИзПрототипа(ПрототипУзлаВыгрузки);
		
		УстановитьЗначениеЭлемента(УзелВыгрузки, "НомПорСд", Физлицо.НомерКонтрагента);
		УстановитьЗначениеЭлемента(УзелВыгрузки, "КодВД", ФизЛицо.Строка020КодВидаДеятельности);
		
		Узел_ФИО = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "ФИО");
		
		УстановитьЗначениеЭлемента(Узел_ФИО, "Фамилия", ФизЛицо.Фамилия);
		УстановитьЗначениеЭлемента(Узел_ФИО, "Имя", ФизЛицо.Имя);
		УстановитьЗначениеЭлемента(Узел_ФИО, "Отчество", ФизЛицо.Отчество);
		
		Узел_ИННФЛ = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "ИННФЛ");
		Узел_СвФЛ = ПолучитьПодчиненныйЭлемент(УзелВыгрузки, "СвФЛ");
		
		Если ПустаяСтрока(ФизЛицо.Строка030ИНН) Тогда
			УдалитьУзел(Узел_ИННФЛ);
			
			УстановитьЗначениеЭлемента(Узел_СвФЛ, "ДатаРожд", ФизЛицо.ФизическоеЛицо.ДатаРождения);
			УстановитьЗначениеЭлемента(Узел_СвФЛ, "МестоРожд", ФизЛицо.ФизическоеЛицо.МестоРождения);
			УстановитьЗначениеЭлемента(Узел_СвФЛ, "НалГражд", ?(ФизЛицо.ГражданствоФизЛицСтрана = Справочники.КлассификаторСтранМира.Россия, "1", "2"));
			УстановитьЗначениеЭлемента(Узел_СвФЛ, "ОКСМ", ?(ЗначениеЗаполнено(ФизЛицо.ГражданствоФизЛицСтрана), ФизЛицо.ГражданствоФизЛицСтрана.Код, ""));
			
			Узел_УдЛичнФЛ = ПолучитьПодчиненныйЭлемент(Узел_СвФЛ, "УдЛичнФЛ");
			
			УстановитьЗначениеЭлемента(Узел_УдЛичнФЛ, "КодВидДок", КонтролируемыеСделкиПовтИсп.ПолучитьКодВидаДокументаПоВидуДокумента(ФизЛицо.ДокументВид));
			УстановитьЗначениеЭлемента(Узел_УдЛичнФЛ, "СерНомДок", Строка(ФизЛицо.ДокументСерия) + " " + ФизЛицо.ДокументНомер);
			УстановитьЗначениеЭлемента(Узел_УдЛичнФЛ, "ДатаДок", ФизЛицо.ДокументДатаВыдачи);
			УстановитьЗначениеЭлемента(Узел_УдЛичнФЛ, "ВыдДок", ФизЛицо.ДокументКемВыдан);
			
			Узел_СвАдрРФ = ПолучитьПодчиненныйЭлемент(Узел_СвФЛ, "СвАдрРФ");
			
			
			Если ФизЛицо.ГражданствоФизЛицСтрана = Справочники.КлассификаторСтранМира.Россия Тогда
				УстановитьЗначениеЭлемента(Узел_СвАдрРФ, "ПрАдр", "1");
			Иначе
				УстановитьЗначениеЭлемента(Узел_СвАдрРФ, "ПрАдр", "2");
			КонецЕсли;
			
			Узел_АдрРФ = ПолучитьПодчиненныйЭлемент(Узел_СвАдрРФ, "АдрРФ");
			
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Индекс",     ФизЛицо.КонтактнаяИнформацияПоле1);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "КодРегион",  РегламентированнаяОтчетность.КодРегионаПоНазванию(ФизЛицо.КонтактнаяИнформацияПоле2));
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Район",      ФизЛицо.КонтактнаяИнформацияПоле3);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Город",      ФизЛицо.КонтактнаяИнформацияПоле4);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "НаселПункт", ФизЛицо.КонтактнаяИнформацияПоле5);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Улица",      ФизЛицо.КонтактнаяИнформацияПоле6);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Дом",        ФизЛицо.КонтактнаяИнформацияПоле7);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Корпус",     ФизЛицо.КонтактнаяИнформацияПоле8);
			УстановитьЗначениеЭлемента(Узел_АдрРФ, "Кварт",      ФизЛицо.КонтактнаяИнформацияПоле9);
			
			Узел_АдрИн = ПолучитьПодчиненныйЭлемент(Узел_СвФЛ, "АдрИн");
			
			Если ФизЛицо.ГражданствоФизЛицСтрана <> Справочники.КлассификаторСтранМира.Россия Тогда
				НаименованиеСтраны = ФизЛицо.КонтактнаяИнформацияЗаРФПоле1;
				Если ЗначениеЗаполнено(НаименованиеСтраны) Тогда
					НайденнаяСтрана = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(НаименованиеСтраны);
					Если ЗначениеЗаполнено(НайденнаяСтрана) И НайденнаяСтрана <> Справочники.КлассификаторСтранМира.Россия Тогда
						УстановитьЗначениеЭлемента(Узел_АдрИн, "ОКСМ", НайденнаяСтрана.Код);
						УстановитьЗначениеЭлемента(Узел_АдрИн, "АдрИнТекст", ФизЛицо.КонтактнаяИнформацияЗаРФПредставление);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			УстановитьЗначениеЭлемента(УзелВыгрузки, "ИННФЛ", ФизЛицо.Строка030ИНН);
			УдалитьУзел(Узел_СвФЛ);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	ПодчиненныйЭлемент = ПолучитьПодчиненныйЭлемент(УзелРодитель, ИмяЭлемента);
	ВывестиПоказательВXML(ПодчиненныйЭлемент, ЗначениеЭлемента);
	
КонецПроцедуры

Процедура УдалитьУзел(Узел)
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

