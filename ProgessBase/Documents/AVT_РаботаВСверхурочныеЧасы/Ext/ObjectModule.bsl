////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("Приказ",	"Приказ");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Приказ" Тогда
		ТабДокумент = ПечатьПриказа(ИмяМакета);
		
	КонецЕсли;

	Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Работа в сверхурочные часы "));

КонецФункции // Печать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует табличный документ с печатной формой "Приказ о привлечении к сверхурочной работе",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПриказа(ИмяМакета)
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриказОСверхурочнойРаботе";
	Макет = ЭтотОбъект.ПолучитьМакет(ИмяМакета);
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаГруппировка = Макет.ПолучитьОбласть("Группировка");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаСтрокаПодпись = Макет.ПолучитьОбласть("СтрокаПодпись");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	AVT_РаботаВСверхурочныеЧасы.Дата КАК Дата,
	               |	AVT_РаботаВСверхурочныеЧасы.Номер КАК Номер,
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
	               |	AVT_РаботаВСверхурочныеЧасы.Организация.Наименование КАК Организация,
	               |	AVT_РаботаВСверхурочныеЧасы.Организация.НаименованиеПолное КАК ОрганизацияПолноеНаименование,
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	Документ.AVT_РаботаВСверхурочныеЧасы КАК AVT_РаботаВСверхурочныеЧасы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	               |				&Дата,
	               |				СтруктурнаяЕдиница = &Организация
	               |					И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	               |			ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = СотрудникиОрганизаций.Физлицо
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	AVT_РаботаВСверхурочныеЧасы.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ.Дата,
	               |	ВТ.Номер,
	               |	ВТ.ДолжностьРуководителя,
	               |	ВТ.Организация,
	               |	ВТ.ОрганизацияПолноеНаименование,
	               |	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") КАК Фамилия,
	               |	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") КАК Имя,
	               |	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") КАК Отчество
	               |ИЗ
	               |	ВТ КАК ВТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	               |				&Дата,
	               |				ФизЛицо В
	               |					(ВЫБРАТЬ
	               |						ВТ.ФизическоеЛицо
	               |					ИЗ
	               |						ВТ)) КАК ФИОФизЛицСрезПоследних
	               |		ПО ВТ.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	AVT_РаботаВСверхурочныеЧасыОтветственные.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ ВТ_Ответственные
	               |ИЗ
	               |	Документ.AVT_РаботаВСверхурочныеЧасы.Ответственные КАК AVT_РаботаВСверхурочныеЧасыОтветственные
	               |ГДЕ
	               |	AVT_РаботаВСверхурочныеЧасыОтветственные.Ссылка = &Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РаботникиОрганизацийСрезПоследних.Сотрудник,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	               |				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения
	               |		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность
	               |	КОНЕЦ КАК Должность,
	               |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Наименование КАК ФИО,
	               |	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо.Пол КАК Пол
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	               |			&Дата,
	               |			Сотрудник В
	               |				(ВЫБРАТЬ
	               |					Ответственные.Сотрудник
	               |				ИЗ
	               |					ВТ_Ответственные КАК Ответственные)) КАК РаботникиОрганизацийСрезПоследних
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	               |					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	               |			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
	               |		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
				   
	ВыборкаОтветственные = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.Заполнить(Выборка);
	ОбластьМакетаШапка.Параметры.Город = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "AVT_Город");
	ОбластьМакетаПодвал.Параметры.Заполнить(Выборка);  
	ОбластьМакетаШапка.Параметры.ОрганизацияПолноеНаименование  = Врег(СокрЛП(Строка(ОбластьМакетаШапка.Параметры.ОрганизацияПолноеНаименование))); //Blik 111116 58593
	
	РезультатСклонения = "";
	
	СтрокаОтветственные = "";
	Пока ВыборкаОтветственные.Следующий() Цикл
		МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ВыборкаОтветственные.Должность, " ");
			Должность = ВыборкаОтветственные.Должность;
				
			Если МассивСтрок.Количество() = 1 Тогда
				Для Каждого Строка Из МассивСтрок Цикл
					МассивСтрок1 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Строка, ".");
					Если МассивСтрок1.Количество() = 1 Тогда
						Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ВыборкаОтветственные.Должность, 2,, Должность) Тогда
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Если СтрокаОтветственные = "" Тогда
			Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ВыборкаОтветственные.ФИО, 2,ВыборкаОтветственные.Пол, РезультатСклонения) Тогда
				СтрокаОтветственные = РезультатСклонения + ", " + Нрег(Должность);
			КонецЕсли;
		Иначе
			Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ВыборкаОтветственные.ФИО, 2,ВыборкаОтветственные.Пол, РезультатСклонения) Тогда
				СтрокаОтветственные = СтрокаОтветственные + ", " + РезультатСклонения + ", " + Нрег(Должность);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбластьМакетаПодвал.Параметры.Ответственные = СтрокаОтветственные;
	//ОбластьМакетаПодвал.Параметры.ДолжностьОтветственного = Нрег(Выборка.ДолжностьОтветственного);
	ОбластьМакетаШапка.Параметры.Дата = Формат(Выборка.Дата, "ДЛФ=DD");
	Если Не(Выборка.Фамилия = "") Тогда
		ОбластьМакетаПодвал.Параметры.Руководитель = Выборка.Фамилия + " " + Лев(Выборка.Имя, 1) + "." + Лев(Выборка.Отчество, 1) + ".";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакетаШапка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.Сотрудник КАК Сотрудник,
	               |	AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.ДатаВыхода КАК ДатаВыхода,
	               |	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КАК ФИО,
	               |	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Подразделение,
	               |	РаботникиОрганизацийСрезПоследних.Должность,
	               |	ФИОФизЛицСрезПоследних.ФизЛицо.Пол КАК Пол
	               |ИЗ
	               |	Документ.AVT_РаботаВСверхурочныеЧасы.РаботникиОрганизации КАК AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	               |		ПО AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛицСрезПоследних
	               |		ПО AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	               |ГДЕ
	               |	AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаВыхода
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Сотрудник),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ФИО)
	               |ПО
	               |	ДатаВыхода";
				   
	ВыборкаПоГруппировкам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.Сотрудник КАК Сотрудник,
	               |	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КАК ФИО,
	               |	ФИОФизЛицСрезПоследних.ФизЛицо.Пол КАК Пол
	               |ИЗ
	               |	Документ.AVT_РаботаВСверхурочныеЧасы.РаботникиОрганизации КАК AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	               |		ПО AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛицСрезПоследних
	               |		ПО AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	               |ГДЕ
	               |	AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.Ссылка = &Ссылка
	               |ИТОГИ
	               |	МАКСИМУМ(ФИО)
	               |ПО
	               |	Сотрудник";
				   
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОбластьМакетаГруппировка.Параметры.Номер = "1.";
	
	Пока ВыборкаПоГруппировкам.Следующий() Цикл
		ОбластьМакетаГруппировка.Параметры.Заполнить(ВыборкаПоГруппировкам);
		ОбластьМакетаГруппировка.Параметры.ДатаВыхода = Формат(ВыборкаПоГруппировкам.ДатаВыхода, "ДЛФ=DD");
		ТабДокумент.Вывести(ОбластьМакетаГруппировка);
		ОбластьМакетаГруппировка.Параметры.Номер = "";
		Выборка = ВыборкаПоГруппировкам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьМакетаСтрока.Параметры.Заполнить(Выборка);
			РезультатСклонения = "";
			Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Выборка.ФИО, 4,Выборка.Пол, РезультатСклонения) Тогда
				ОбластьМакетаСтрока.Параметры.ФИО	= РезультатСклонения;
			КонецЕсли;
			МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Выборка.Должность, " ");
			Должность = Выборка.Должность;
				
			Если МассивСтрок.Количество() = 1 Тогда
				Для Каждого Строка Из МассивСтрок Цикл
					МассивСтрок1 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Строка, ".");
					Если МассивСтрок1.Количество() = 1 Тогда
						Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Выборка.Должность, 4,, Должность) Тогда
							ОбластьМакетаСтрока.Параметры.Должность	= Должность;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОбластьМакетаСтрока.Параметры.Должность = Нрег(Должность);
			ОбластьМакетаСтрока.Параметры.Подразделение = Нрег(Выборка.Подразделение);
			ТабДокумент.Вывести(ОбластьМакетаСтрока);
		КонецЦикла;
	КонецЦикла;
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		ОбластьМакетаСтрокаПодпись.Параметры.Заполнить(ВыборкаПоСотрудникам);
		ТабДокумент.Вывести(ОбластьМакетаСтрокаПодпись);
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа.
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботаВСверхурочныеЧасы.Дата,
	|	РаботаВСверхурочныеЧасы.Организация
	|ИЗ
	|	Документ.AVT_РаботаВСверхурочныеЧасы КАК РаботаВСверхурочныеЧасы
	|ГДЕ
	|	РаботаВСверхурочныеЧасы.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос по табличной части "РаботникиОрганизации".
Функция СформироватьЗапросПоТЧРаботники(ВыборкаПоШапкеДокумента)
	      
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.ДатаВыхода,
	|	&Организация,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных) КАК ВидРасчета,
	|	ТЧРаботникиОрганизации.ЧасовПолуторных + ТЧРаботникиОрганизации.ЧасовДвойных КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТТЧРаботникиОрганизации
	|ИЗ
	|	Документ.AVT_РаботаВСверхурочныеЧасы.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.ДатаВыхода,
	|	ТЧРаботникиОрганизации.Организация,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.ВидРасчета,
	|	ТЧРаботникиОрганизации.ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаВыхода
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизаций.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.Организация = &Организация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ДатыПоследнихДвиженийРаботников.МаксимальныйПериод КАК ДатаПоследнегоДвиженияПоРаботнику
	|ИЗ
	|	ВТТЧРаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РаботникиОрганизаций.Период) КАК МаксимальныйПериод
	|		ИЗ
	|			ВТТЧРаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|				ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизаций.Сотрудник
	|					И ТЧРаботникиОрганизации.ДатаВыхода >= РаботникиОрганизаций.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО (ДатыПоследнихДвиженийРаботников.МаксимальныйПериод = РаботникиОрганизаций.Период)
	|			И ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизаций.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ВТТЧРаботникиОрганизации1.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			ВТТЧРаботникиОрганизации КАК ВТТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТЧРаботникиОрганизации КАК ВТТЧРаботникиОрганизации1
	|				ПО ВТТЧРаботникиОрганизации.Сотрудник = ВТТЧРаботникиОрганизации1.Сотрудник
	|					И ВТТЧРаботникиОрганизации.ДатаВыхода = ВТТЧРаботникиОрганизации1.ДатаВыхода
	|					И ВТТЧРаботникиОрганизации.НомерСтроки < ВТТЧРаботникиОрганизации1.НомерСтроки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки";
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	запрос.УстановитьПараметр("Организация",    ВыборкаПоШапкеДокумента.Организация);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет правильность заполнения табличной части.
Процедура ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники организации"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаВыхода
	НетДатаВыхода = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаВыхода);
	Если НетДатаВыхода Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата выхода на работу!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетСотрудника ИЛИ НетДатаВыхода Тогда
		Возврат; // Дальше не проверяем
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса(" указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВыхода, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВыхода, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
	// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "указана повторяющаяся строка (см. строку  № " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента						- выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ)
	
	Движение = Движения.AVT_РаботаСверхНормы.Добавить();
	
	// Свойства
	Движение.Период		 = ВыборкаПоТЧ.ДатаВыхода;
	
	// Измерения
	Движение.Организация = ВыборкаПоШапкеДокумента.Организация;
	Движение.Сотрудник	 = ВыборкаПоТЧ.Сотрудник;
	Движение.ВидРасчета  = ВыборкаПоТЧ.ВидРасчета;
	
	// Ресурсы
	Движение.Часов     	 = ВыборкаПоТЧ.ОтработаноЧасов;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим реквизиты табличной части
			Выборка = СформироватьЗапросПоТЧРаботники(ВыборкаПоШапкеДокумента).Выбрать();
			Движения.AVT_РаботаСверхНормы.Записывать = Истина;
			
			Пока Выборка.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиТЧ(ВыборкаПоШапкеДокумента, Выборка, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, Выборка);
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры
