Перем мУдалятьДвижения;


// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

#Если Клиент Тогда

// Функция формирует табличный документ унифицированной формы ОС-3
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме ОС-3.
//
Функция ПечатьОС3(ПечатьПоДаннымУпрУчета = Истина)

	Макет       = ПолучитьМакет("ОС3");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Форма_ОС3";

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр( "Ссылка",  Ссылка);
	Запрос.УстановитьПараметр( "КонДата", Дата);
	
	Если ПечатьПоДаннымУпрУчета Тогда
		Валюта  = глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование; 
		ИтогоСуммаЗатрат = ОС.ИТОГ("СуммаМодернизацииУУ");
		СтоимостьОС      = ОС.ИТОГ("СтоимостьУУ");
	Иначе
		Валюта  = глЗначениеПеременной("ВалютаРегламентированногоУчета").Наименование; 
		ИтогоСуммаЗатрат = ОС.ИТОГ("СуммаМодернизацииБУ");
		СтоимостьОС      = ОС.ИТОГ("СтоимостьБУ");
	КонецЕсли;		
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МодернизацияОСОС.Ссылка.Организация КАК Организация,
	|	МодернизацияОСОС.Ссылка.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	МодернизацияОСОС.Ссылка.Организация.КодПоОКПО КАК КодПоОКПООрганизации,
	|	МодернизацияОСОС.Ссылка.Номер КАК НомерДок,
	|	МодернизацияОСОС.Ссылка.Дата КАК ДатаДок,
	|	МодернизацияОСОС.Ссылка.ВидОперацийСОсновнымиСредствами КАК ВидРабот,
	|	МодернизацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МодернизацияОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	|	МодернизацияОСОС.ОсновноеСредство.Код КАК ИнвНомерУпр,
	|	МодернизацияОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	МодернизацияОСОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	|	МодернизацияОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	МодернизацияОСОС.СтоимостьБУ КАК Стоимость,
	|	МодернизацияОСОС.СтоимостьБУ КАК СтоимостьБУ,
	|	МодернизацияОСОС.СтоимостьПР КАК СтоимостьПР,
	|	МодернизацияОСОС.СуммаМодернизацииБУ КАК СуммаЗатрат,
	|	МодернизацияОСОС.ФактСрокИспользованияБУ КАК СрокЭкспл,
	|	МодернизацияОСОС.НомерСтроки КАК ПорядковыйНомер
	|ИЗ
	|	Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|ГДЕ
	|	МодернизацияОСОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер";
				   
	Если ПечатьПоДаннымУпрУчета тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"БУ","УУ");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Не ПечатьПоДаннымУпрУчета тогда	
		СведенияОРуководителеГлавбухе = УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОРуководителеГлавБухе(Выборка.Организация,Выборка.ДатаДок);
	КонецЕсли;

	// Печать лицевой стороны.
	// Секция № 1
	Шапка         = Макет.ПолучитьОбласть("Шапка1");
	СтрокаТаблицы = Макет.ПолучитьОбласть("Строка1");
	Подвал        = Макет.ПолучитьОбласть("Строка1П");
	
	Шапка.Параметры.Заполнить(Выборка);
	Если Не ПечатьПоДаннымУпрУчета тогда	
		Шапка.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
	КонецЕсли;
	
	Шапка.Параметры.Валюта      = Валюта; 
	Шапка.Параметры.Организация = Выборка.ОрганизацияНаименованиеПолное;
	ТабДокумент.Вывести(Шапка);

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТаблицы.Параметры.Заполнить(Выборка);
		
		Если ПечатьПоДаннымУпрУчета тогда
			СтрокаТаблицы.Параметры.ИнвНомер = Выборка.ИнвНомерУпр;
		Иначе
			ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(Выборка.ДатаДок,
														Новый Структура("ОсновноеСредство",Выборка.ОсновноеСредство));
			ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
			СтрокаТаблицы.Параметры.ИнвНомер = ИнвНомерБух;
		КонецЕсли;
		
		Если ПустаяСтрока(Выборка.НаименованиеОС) Тогда
			СтрокаТаблицы.Параметры.НаименованиеОС = СокрЛП(Выборка.ОсновноеСредство);
		КонецЕсли; 
		
		СтрокаТаблицы.Параметры.ВосстановительнаяСтоимостьПеч = Выборка.Стоимость;

		ТабДокумент.Вывести(СтрокаТаблицы);

	КонецЦикла;

	Подвал.Параметры.Заполнить(Выборка);
	//ТабДокумент.Вывести(Подвал);
	
	// Секция № 2
	Шапка         		   = Макет.ПолучитьОбласть("Шапка2");
	Шапка.Параметры.Валюта = Валюта; 
	СтрокаТаблицы 		   = Макет.ПолучитьОбласть("Строка2");
	Подвал        		   = Макет.ПолучитьОбласть("Строка2П");
	
	ТабДокумент.Вывести(Шапка);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТаблицы.Параметры.Заполнить(Выборка);
		
		Если ПустаяСтрока(Выборка.НаименованиеОС) Тогда
			СтрокаТаблицы.Параметры.НаименованиеОС = СокрЛП(Выборка.ОсновноеСредство);
		КонецЕсли; 
		
		ТабДокумент.Вывести(СтрокаТаблицы);

	КонецЦикла;

	Подвал = Макет.ПолучитьОбласть("Подвал");
	Подвал.Параметры.ИтогоСуммаЗатрат = ИтогоСуммаЗатрат;
	
	Если Выборка.Количество()>0 Тогда
		Подвал.Параметры.Валюта = Валюта; 
		Подвал.Параметры.СтоимостьКонечнаяПеч = СтоимостьОС + ИтогоСуммаЗатрат;
	КонецЕсли; 
	
	ТабДокумент.Вывести(Подвал);
	
	// Печать оборотной стороны.
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	ОбластьПечати = Макет.ПолучитьОбласть("ОборотнаяСторона");
	Если Не ПечатьПоДаннымУпрУчета тогда	
		ОбластьПечати.Параметры.Заполнить(СведенияОРуководителеГлавбухе);
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьПечати);
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСнизу = 0;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьОС3()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС3упр" тогда
		ТабДокумент = ПечатьОС3();
	ИначеЕсли ИмяМакета = "ОС3бух" тогда
		ТабДокумент = ПечатьОС3(Ложь);
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Модернизация ОС"), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = новый Структура;
	
	СтруктураПечатныхФорм.Вставить("ОС3упр","Форма ОС-3(упр. учет)");
	СтруктураПечатныхФорм.Вставить("ОС3бух","Форма ОС-3(бух. учет)");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "Стоимость,
	                            |Событие,
								|ОС.СрокПолезногоИспользованияУУ,
								|ОС.ФактСрокИспользованияУУ,
								|ОС.ОстСрокИспользованияУУ,
								|ОС.ОбъемПродукцииРаботУУ,
								|ОС.ФактОбъемПродукцииРаботУУ,
								|ОС.ОстОбъемПродукцииРаботУУ,
								|ОС.СтоимостьУУ,
								|ОС.СуммаМодернизацииУУ,
								|ОС.АмортизацияУУ,
								|ОС.АмортизацияЗаМесяцУУ,
								|ОС.ОстСтоимостьУУ,
								|ОС.КоэффициентАмортизацииУУ,
								|ОС.КоэффициентУскоренияУУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "СтоимостьБУ,
								|СтоимостьБУХоз,
								|СобытиеРегл,
								|СчетУчетаБУВнеоборотногоАктива,
								|ОС.СрокПолезногоИспользованияБУ,
								|ОС.ФактСрокИспользованияБУ,
								|ОС.ОстСрокИспользованияБУ,
								|ОС.ОбъемПродукцииРаботБУ,
								|ОС.ФактОбъемПродукцииРаботБУ,
								|ОС.ОстОбъемПродукцииРаботБУ,
								|ОС.СтоимостьБУ,
								|ОС.СуммаМодернизацииБУ,
								|ОС.СуммаМодернизацииБУХоз,
								|ОС.АмортизацияБУ,
								|ОС.АмортизацияЗаМесяцБУ,
								|ОС.ОстСтоимостьБУ,
								|ОС.КоэффициентАмортизацииБУ,
								|ОС.КоэффициентУскоренияБУ";

	мСтрокаРеквизитыНалУчета =  "СтоимостьНУ,
								|СтоимостьНУХоз,
								|СтоимостьПР,
								|СтоимостьПРХоз,
								|СтоимостьВР,
								|СтоимостьВРХоз,
								|СчетУчетаНУВнеоборотногоАктива,
								|ОС.СтоимостьНУ,
								|ОС.СуммаМодернизацииНУ,
								|ОС.СрокПолезногоИспользованияНУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Функция заполняет список значений доступных видов событий
// только для регламентированного учета
//
Функция ПолучитьСписокЗначенийВидыСобытий() Экспорт
	
	ВидыСобытий = Новый СписокЗначений;
	
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.ТекущийРемонт);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.СреднийРемонт);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.КапитальныйРемонт);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Достройка);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	
	Возврат ВидыСобытий;
	
 КонецФункции
////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиУпр(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") +
			  "Событие";

КонецПроцедуры

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + 
			"СчетУчетаБУВнеоборотногоАктива,
			|СчетУчетаНУВнеоборотногоАктива,
			|СобытиеРегл";
			
КонецПроцедуры

// Проверяет правильность заполнения упр. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиУпр(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		Возврат;
	КонецЕсли;
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		
		ВыборкаЗаписей = РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.Остатки(Дата,Новый Структура("ОбъектСтроительства",СтруктураШапкиДокумента.ОбъектСтроительства));
		ОстатокСтоимости = 0;
		Если ВыборкаЗаписей.Количество() > 0 Тогда;
			ОстатокСтоимости = ВыборкаЗаписей[0].Сумма;
		КонецЕсли;
		Требуется = СтруктураШапкиДокумента.СтоимостьУУ;
		Если Требуется > ОстатокСтоимости Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("По управленческому учету для объекта строительства остаток суммы меньше суммы модернизации"+ Символы.ПС + Символы.Таб +
			"Не хватает " + ?(ОстатокСтоимости > 0 , Требуется - ОстатокСтоимости, Требуется ) +
			"; Остаток " + ОстатокСтоимости +
			"; Требуется " + Требуется , Отказ,Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// Проверим чем заполнено событие
	ВидыСобытий = ПолучитьСписокЗначенийВидыСобытий();
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
							  ВидыСобытий,
							  ПредставлениеРеквизита,Отказ);
	
КонецПроцедуры

// Проверяет правильность заполнения регл. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;
	
	// Проверим чем заполнено событие
	ВидыСобытий = ПолучитьСписокЗначенийВидыСобытий();
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
							  ВидыСобытий,
							  ПредставлениеРеквизита,Отказ);

	Если СтруктураШапкиДокумента.Свойство("ВариантУчетаРасходовПоАмортизационнойПремии") Тогда
							  
		Если СтруктураШапкиДокумента.ВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии Тогда
			Если НЕ (ОС.Итог("СуммаКапитальныхВложенийВключаемыхВРасходыНУ") = 0) Тогда
				Если СтруктураШапкиДокумента.СчетУчетаЗатратПоАмортизационнойПремии = ПланыСчетов.Налоговый.ПустаяСсылка() Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не указан счет учета затрат по амортизационной премии", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "ОбъектСтроительства";
	ДополнитьОбязательныеРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);
	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет список обязательных параметров табл. части
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСУпр(Реквизиты)

	//Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьУУ";

КонецПроцедуры

// Дополняет список обязательных параметров табл. части
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСРегл(Реквизиты)

	//Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьБУ,СтоимостьНУ";

КонецПроцедуры

// Проверка реквизитов в ТЧ по упр. учету
// 
Процедура ПроверкаРеквизитовТЧУпр(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок)
	// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
	Если ТаблицаОС.Итог("СуммаМодернизацииУУ")<> СтруктураШапкиДокумента.СтоимостьУУ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По управленческому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!",Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Проверка реквизитов в ТЧ по регл. учету
// 
Процедура ПроверкаРеквизитовТЧРегл(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок)
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если ТаблицаОС.Итог("СуммаМодернизацииБУ")<> СтруктураШапкиДокумента.СтоимостьБУ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По бухгалтерскому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если ТаблицаОС.Итог("СуммаМодернизацииБУХоз")<> СтруктураШапкиДокумента.СтоимостьБУХоз Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По бухгалтерскому учету общая сумма модернизации, выполненная хоз. способом, указанная в шапке документа, не соответствует в итоге суммам модернизации, отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если ТаблицаОС.Итог("СуммаМодернизацииНУ")<> СтруктураШапкиДокумента.СтоимостьНУ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По налоговому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если ТаблицаОС.Итог("СуммаМодернизацииНУХоз")<> СтруктураШапкиДокумента.СтоимостьНУХоз Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По налоговому учету общая сумма модернизации, выполненная хоз. способом, указанная в шапке документа, не соответствует в итоге суммам модернизации, отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
		Если ТаблицаОС.Итог("СуммаМодернизацииПР")<> СтруктураШапкиДокумента.СтоимостьПР Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По налоговому учету общая сумма постоянных разниц по модернизации, указанная в шапке документа, не соответствует в итоге суммам постоянных разниц , отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
		Если ТаблицаОС.Итог("СуммаМодернизацииПРХоз")<> СтруктураШапкиДокумента.СтоимостьПРХоз Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По налоговому учету общая сумма постоянных разниц по модернизации, выполненная хоз. способом, указанная в шапке документа, не соответствует в итоге суммам постоянных разниц модернизации, отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
		Если ТаблицаОС.Итог("СуммаМодернизацииВР")<> СтруктураШапкиДокумента.СтоимостьВР Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По налоговому учету общая сумма временных разниц по модернизации, указанная в шапке документа, не соответствует в итоге суммам временных разниц , отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
		Если ТаблицаОС.Итог("СуммаМодернизацииВРХоз")<> СтруктураШапкиДокумента.СтоимостьВРХоз Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По налоговому учету общая сумма временных разниц по модернизации, выполненная хоз. способом, указанная в шапке документа, не соответствует в итоге суммам временных разниц модернизации, отнесенным на основные средства!",Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		// Проверим что суммы модернизации относимые на каждый объект ОС в сумме равны данным из шапки документа
		Если НЕ (ТаблицаОС.Итог("СуммаМодернизацииУСН") = СтруктураШапкиДокумента.СтоимостьУСН) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По налоговому учету общая сумма модернизации, указанная в шапке документа, не соответствует в итоге суммам, отнесенным на основные средства!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(РежимПроведения,ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	ДополнитьОбязательныеРеквизитыТабОСУпр(РеквизитыТабОС);
	ДополнитьОбязательныеРеквизитыТабОСРегл(РеквизитыТабОС);
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	// Логические проверки
	ПроверкаРеквизитовТЧУпр(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок);
	ПроверкаРеквизитовТЧРегл(ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок);
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		// Проверим возможность изменения состояния ОС
		Для каждого СтрокаОС из ТаблицаОС Цикл
			Если ОтражатьВБухгалтерскомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьИзмененияСостоянияОС(СтрокаОС.ОсновноеСредство,Дата,СобытиеРегл,Отказ,Организация);
			КонецЕсли;
			Если ОтражатьВУправленческомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьИзмененияСостоянияОС(СтрокаОС.ОсновноеСредство,Дата,Событие,Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверкаРеквизитовТЧ()

Функция РаспределитьОплатыПоОС(СтруктураШапкиДокумента, ТаблицаОплат, ТаблицаПоОС)
	
	ТаблицаОплат.Свернуть("ДатаОплаты", "СуммаОплаты");
	
	ТаблицаОплатПоОС = Новый ТаблицаЗначений();
	ТаблицаОплатПоОС.Колонки.Добавить("ОсновноеСредство");
	ТаблицаОплатПоОС.Колонки.Добавить("ДатаОплаты");
	ТаблицаОплатПоОС.Колонки.Добавить("СуммаОплаты");
	
	ТаблицаБазыРаспределения = ТаблицаПоОС.Скопировать(,"ОсновноеСредство, СуммаМодернизацииУСН");
	Если ТаблицаБазыРаспределения.Количество() = 0 Тогда
		Возврат ТаблицаОплатПоОС;
	КонецЕсли;
	
	Для Каждого СтрокаОплата Из ТаблицаОплат Цикл
		Если СтрокаОплата.ДатаОплаты < Дата("20070101") Тогда
			//Такие оплаты не учитываются
			Продолжить;
		КонецЕсли;
		Если Окр(ТаблицаБазыРаспределения.Итог("СуммаМодернизацииУСН"),2,1) = 0 Тогда
			Возврат ТаблицаОплатПоОС;
		КонецЕсли;
		
		СуммаОплатыКРаспределению = Мин(СтрокаОплата.СуммаОплаты, ТаблицаБазыРаспределения.Итог("СуммаМодернизацииУСН"));
		КоэффОплаты = СуммаОплатыКРаспределению / ТаблицаБазыРаспределения.Итог("СуммаМодернизацииУСН");
		
		Для Каждого СтрокаОС Из ТаблицаБазыРаспределения Цикл
			СуммаОплатыОС = Мин(Окр(КоэффОплаты*СтрокаОС.СуммаМодернизацииУСН,2,1), СтрокаОС.СуммаМодернизацииУСН);
			Если СуммаОплатыОС = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицыОплатПоОС = ТаблицаОплатПоОС.Добавить();
			СтрокаТаблицыОплатПоОС.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			СтрокаТаблицыОплатПоОС.ДатаОплаты 		= СтрокаОплата.ДатаОплаты;
			СтрокаТаблицыОплатПоОС.СуммаОплаты 		= СуммаОплатыОС;
			
			СуммаОплатыКРаспределению = СуммаОплатыКРаспределению - СуммаОплатыОС;
			СтрокаОС.СуммаМодернизацииУСН = СтрокаОС.СуммаМодернизацииУСН - СуммаОплатыОС;
			
		КонецЦикла;
		
		//Распределим погрешность округления, списывая ее пропорционатьно убыванию остатков расходов
		ТаблицаБазыРаспределения.Сортировать("СуммаМодернизацииУСН Убыв");
		Если СуммаОплатыКРаспределению > 0 Тогда
			Для Каждого СтрокаОС Из ТаблицаБазыРаспределения Цикл
				Если СуммаОплатыКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;
				СуммаОплатыОС = Мин(СуммаОплатыКРаспределению, СтрокаОС.СуммаМодернизацииУСН);
				Если СуммаОплатыОС = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицыОплатПоОС = ТаблицаОплатПоОС.Добавить();
				СтрокаТаблицыОплатПоОС.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
				СтрокаТаблицыОплатПоОС.ДатаОплаты 		= СтрокаОплата.ДатаОплаты;
				СтрокаТаблицыОплатПоОС.СуммаОплаты 		= СуммаОплатыОС;
				
				СуммаОплатыКРаспределению = СуммаОплатыКРаспределению - СуммаОплатыОС;
				СтрокаОС.СуммаМодернизацииУСН = СтрокаОС.СуммаМодернизацииУСН - СуммаОплатыОС;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	ТаблицаОплатПоОС.Свернуть("ОсновноеСредство, ДатаОплаты", "СуммаОплаты");
	
	Возврат ТаблицаОплатПоОС;
	
КонецФункции

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, ТаблицаОплатПоОС, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплатПоОС, Отказ, Заголовок);
	
	// Отражение ввода в эксплуатацию модернизированного объекта ОС в подсистеме НДС
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДока = Дата;

	СобытиеОС           = Движения.СобытияОС;
	АмортизацияОС         = Движения.СтоимостьОС;
	ПараметрыАмортизацииОС= Движения.ПараметрыАмортизацииОС;

	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;

		// Движения по регистру СобытияОС
		Движение = СобытиеОС.Добавить();
		Движение.Период               = ДатаДока;
		Движение.ОсновноеСредство     = ТекОС;
		Движение.Событие              = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента 	  = Метаданные().Представление();
		Движение.НомерДокумента    	  = Номер;
		Движение.СуммаЗатрат    	  = СтрокаТЧ.СуммаМодернизацииУУ;

		// Движения по регистру ПараметрыАмортизацииОС
		Движение = ПараметрыАмортизацииОС.Добавить();
		Движение.Период                  = ДатаДока;
		Движение.ОсновноеСредство        = ТекОС;
		Движение.СрокПолезногоИспользования = СтрокаТЧ.СрокПолезногоИспользованияУУ;
		Движение.СрокИспользованияДляВычисленияАмортизации = СтрокаТЧ.СрокПолезногоИспользованияУУ - СтрокаТЧ.ФактСрокИспользованияУУ;
		Движение.СтоимостьДляВычисленияАмортизации = СтрокаТЧ.СтоимостьУУ + СтрокаТЧ.СуммаМодернизацииУУ - СтрокаТЧ.АмортизацияУУ - СтрокаТЧ.АмортизацияЗаМесяцУУ;
		Движение.КоэффициентАмортизации = СтрокаТЧ.КоэффициентАмортизацииУУ;
		Движение.КоэффициентУскорения = СтрокаТЧ.КоэффициентУскоренияУУ;
		Движение.ОбъемПродукцииРабот = СтрокаТЧ.ОбъемПродукцииРаботУУ;
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТЧ.ОбъемПродукцииРаботУУ - СтрокаТЧ.ФактОбъемПродукцииРаботУУ;
		Движение.ПрименитьВТекущемМесяце = Истина;
		
		// Движения по регистру СтоимостьОС
		Движение = ТаблицаДвиженийАмортизация.Добавить();
		Движение.ОсновноеСредство        = ТекОС;
		Движение.Амортизация             = 0;
		Движение.Стоимость               = СтрокаТЧ.СуммаМодернизацииУУ;

	КонецЦикла;

	АмортизацияОС.мПериод          = ДатаДока;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьПриход();
	
	// Движения по регистру Строительство
	СтроительствоОС       = Движения.СтроительствоОбъектовОсновныхСредств;
	ТаблицаСтроительство = СтроительствоОС.Выгрузить();
	Движение = ТаблицаСтроительство.Добавить();
	Движение.ОбъектСтроительства        = СтруктураШапкиДокумента.ОбъектСтроительства;
	Движение.Сумма                      = ТаблицаПоОС.Итог("СуммаМодернизацииУУ");
	
	СтроительствоОС.мПериод          = ДатаДока;
	СтроительствоОС.мТаблицаДвижений = ТаблицаСтроительство;
	Движения.СтроительствоОбъектовОсновныхСредств.ВыполнитьРасход();


КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплатПоОС, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация",  ТекОрганизация);
	Запрос.УстановитьПараметр("ТекДата",         ДатаДока);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство КАК ОС_БУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета КАК СчетУчетаНУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство КАК ОС_НУ,
	|	СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК НаправлениеАмортизации
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет.СрезПоследних(&ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчетСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|";
	ТаблицаСчетов  = Запрос.Выполнить().Выгрузить();

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 

		СобытиеОС              = Движения.СобытияОСОрганизаций;
		АмортизацияОС          = Движения.СтоимостьОСБухгалтерскийУчет;
		ПараметрыАмортизацииОС = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
		ПроводкиБУ             = Движения.Хозрасчетный;

		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();

		Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

			ТекОС = СтрокаТЧ.ОсновноеСредство;

			// Движения по регистру СобытияОС
			Движение = СобытиеОС.Добавить();
			Движение.Период               = ДатаДока;
			Движение.ОсновноеСредство     = ТекОС;
			Движение.Организация          = ТекОрганизация;
			Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
			Движение.НазваниеДокумента 	  = Метаданные().Представление();
			Движение.НомерДокумента    	  = Номер;
			Движение.СуммаЗатратБУ        = СтрокаТЧ.СуммаМодернизацииБУ;
			Движение.СуммаЗатратНУ        = СтрокаТЧ.СуммаМодернизацииНУ;
			Движение.СуммаЗатратУСН     = СтрокаТЧ.СуммаМодернизацииУСН;

			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			Движение.ОсновноеСредство      = ТекОС;
			Движение.Организация           = ТекОрганизация;
			Движение.Амортизация           = 0;
			Движение.Стоимость             = СтрокаТЧ.СуммаМодернизацииБУ;
			Движение.ВидОперации           = СтруктураШапкиДокумента.ВидОперацийСОсновнымиСредствами;
			Движение.СуммаЗатрат           = СтрокаТЧ.СуммаМодернизацииБУ;

			// Движения по регистру ПараметрыАмортизацииОС
			Движение = ПараметрыАмортизацииОС.Добавить();
			Движение.Период           = ДатаДока;
			Движение.ОсновноеСредство = ТекОС;
			Движение.Организация      = ТекОрганизация;
			Движение.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияБУ;
			Движение.СрокИспользованияДляВычисленияАмортизации   = СтрокаТЧ.СрокПолезногоИспользованияБУ - СтрокаТЧ.ФактСрокИспользованияБУ;
			Движение.СтоимостьДляВычисленияАмортизации           = СтрокаТЧ.СтоимостьБУ + СтрокаТЧ.СуммаМодернизацииБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
			Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТЧ.ОбъемПродукцииРаботБУ - СтрокаТЧ.ФактОбъемПродукцииРаботБУ;
			Движение.КоэффициентАмортизации = СтрокаТЧ.КоэффициентАмортизацииБУ;
			Движение.КоэффициентУскорения   = СтрокаТЧ.КоэффициентУскоренияБУ;
			Движение.ОбъемПродукцииРабот    = СтрокаТЧ.ОбъемПродукцииРаботБУ;

			СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_БУ");
			Если СтрокаТЗ <> Неопределено Тогда
				СчетУчетаСтоимости  = СтрокаТЗ.СчетУчетаБУ;
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке("Основное средство "+ ТекОс.Наименование 
									+" не стоит на бух учете в организации "+ ТекОрганизация,Отказ); 	
				Возврат;
			КонецЕсли;

			// списание амортизации Д 01.01 К 08.03
			СуммаПроводки = СтрокаТЧ.СуммаМодернизацииБУ - СтрокаТЧ.СуммаМодернизацииБУХоз;

			Если СуммаПроводки<>0 Тогда

				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Модернизация подрядн. способ";
				Проводка.СчетДт       = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
				Проводка.НомерЖурнала = "ОС";
				Проводка.Сумма        = СуммаПроводки;

			КонецЕсли;

			// списание амортизации Д 01.01 К 08.03
			СуммаПроводки = СтрокаТЧ.СуммаМодернизацииБУХоз;

			Если СуммаПроводки<>0 Тогда

				Проводка = ПроводкиБУ.Добавить();

				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Модернизация хоз. способ";
				Проводка.СчетДт       = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
				Проводка.НомерЖурнала = "ОС";
				Проводка.Сумма        = СуммаПроводки;

			КонецЕсли;
			
		КонецЦикла;

		АмортизацияОС.мПериод          = ДатаДока;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		РегОплаты = Движения.ОплатыОСДляУСН;
		
		Для Каждого Запись Из ТаблицаОплатПоОС Цикл
			
			СтрокаОплаты  = РегОплаты.Добавить();
			
			СтрокаОплаты.Период           = Запись.ДатаОплаты;
			СтрокаОплаты.Организация      = СтруктураШапкиДокумента.Организация;
			СтрокаОплаты.ОсновноеСредство = Запись.ОсновноеСредство;
			СтрокаОплаты.ДокументМодернизации = Ссылка;
			СтрокаОплаты.ДатаОплаты       = Запись.ДатаОплаты;
			СтрокаОплаты.СуммаОплаты      = Запись.СуммаОплаты;
			
		КонецЦикла;
		
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 

		АмортизацияОС          = Движения.СтоимостьОСНалоговыйУчет;
		ПараметрыАмортизацииОС = Движения.ПараметрыАмортизацииОСНалоговыйУчет;
		ПроводкиНУ             = Движения.Налоговый;

		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		
		ТабКапитальныхВложений = Новый ТаблицаЗначений();
		ТабКапитальныхВложений.Колонки.Добавить("ОбъектУчета",            Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабКапитальныхВложений.Колонки.Добавить("СчетАмортизации",        Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТабКапитальныхВложений.Колонки.Добавить("СчетАмортизацииНУ",      Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
		ТабКапитальныхВложений.Колонки.Добавить("ИмяСубконто",            ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(16));
		ТабКапитальныхВложений.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабКапитальныхВложений.Колонки.Добавить("Сумма",                  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ТабКапитальныхВложений.Колонки.Добавить("СуммаБУ",                ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

		Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл

			ТекОС = СтрокаТЧ.ОсновноеСредство;

			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			Движение.ОсновноеСредство      = ТекОС;
			Движение.Организация           = ТекОрганизация;
			Движение.Амортизация           = 0;
			Движение.Стоимость             = СтрокаТЧ.СуммаМодернизацииНУ;
			Движение.ВидОперации           = СтруктураШапкиДокумента.ВидОперацийСОсновнымиСредствами;
			Движение.СуммаЗатрат           = СтрокаТЧ.СуммаМодернизацииНУ;

			// Движения по регистру ПараметрыАмортизацииОС
			Движение = ПараметрыАмортизацииОС.Добавить();
			Движение.Период           = ДатаДока;
			Движение.Активность       = Истина;
			Движение.ОсновноеСредство = ТекОС;
			Движение.Организация      = ТекОрганизация;
			Движение.СрокПолезногоИспользования = СтрокаТЧ.СрокПолезногоИспользованияНУ;
	     	Движение.ПрДляВычисленияАмортизации = СтрокаТЧ.СтоимостьПР - СтрокаТЧ.АмортизацияПР - ?(СтрокаТЧ.СтоимостьБУ = 0, 0, СтрокаТЧ.АмортизацияЗаМесяцБУ / СтрокаТЧ.СтоимостьБУ) * СтрокаТЧ.СтоимостьПР + СтрокаТЧ.СуммаМодернизацииПР;

			СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС,"ОС_НУ");
			Если СтрокаТЗ <> Неопределено Тогда
				СчетУчетаСтоимости     = СтрокаТЗ.СчетУчетаНУ;
				НаправлениеАмортизации = СтрокаТЗ.НаправлениеАмортизации;
			КонецЕсли;

			//Д 01.01 К 08.03
			СуммаПроводки = СтрокаТЧ.СуммаМодернизацииНУ - СтрокаТЧ.СуммаМодернизацииНУХоз;

			Если СуммаПроводки<>0 Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Модернизация";
				Проводка.СчетДт       = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
				Проводка.НомерЖурнала = "ОС";
				Проводка.Сумма        = СуммаПроводки;

			КонецЕсли;
			
			//Д 01.01 К 08.03
			СуммаПроводки = СтрокаТЧ.СуммаМодернизацииНУХоз;

			Если СуммаПроводки<>0 Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Модернизация";
				Проводка.СчетДт       = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
				Проводка.НомерЖурнала = "ОС";
				Проводка.Сумма        = СуммаПроводки;

			КонецЕсли;
			
			//Д 01.01 К 08.03
			СуммаПроводки = СтрокаТЧ.СуммаМодернизацииПР - СтрокаТЧ.СуммаМодернизацииПРХоз;

			Если СуммаПроводки<>0 Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Модернизация";
				Проводка.СчетДт       = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
				Проводка.НомерЖурнала = "ОС";
				Проводка.Сумма        = СуммаПроводки;
				Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				
			КонецЕсли;
			
			//Д 01.01 К 08.03
			СуммаПроводки = СтрокаТЧ.СуммаМодернизацииПРХоз;

			Если СуммаПроводки<>0 Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Модернизация";
				Проводка.СчетДт       = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
				Проводка.НомерЖурнала = "ОС";
				Проводка.Сумма        = СуммаПроводки;
				Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;

			КонецЕсли;
			
			//Д 01.01 К 08.03
			СуммаПроводки = СтрокаТЧ.СуммаМодернизацииВР - СтрокаТЧ.СуммаМодернизацииВРХоз;

			Если СуммаПроводки<>0 Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Модернизация";
				Проводка.СчетДт       = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
				Проводка.НомерЖурнала = "ОС";
				Проводка.Сумма        = СуммаПроводки;
				Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
				Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
				
			КонецЕсли;
			
			//Д 01.01 К 08.03
			СуммаПроводки = СтрокаТЧ.СуммаМодернизацииВРХоз;

			Если СуммаПроводки<>0 Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Модернизация";
				Проводка.СчетДт       = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
				Проводка.НомерЖурнала = "ОС";
				Проводка.Сумма        = СуммаПроводки;
				Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
				Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;

			КонецЕсли;

			// Проводка по счету КВ.
			Если ЗначениеЗаполнено(СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ) Тогда
				
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.НомерЖурнала = "ОС";
				Проводка.Содержание   = "Амортизационная премия";
				Проводка.Сумма        = СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				
				Проводка.СчетДт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
				
				Если СтруктураШапкиДокумента.ВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыАмортизационнойПремии", Ссылка);
				КонецЕсли;
				
				// Начисление амортизационной премии.
				Если СтруктураШапкиДокумента.ВключатьАПВСоставРасходовПриОтраженииМодернизации Тогда
						
					// Списываем амортизационную премию со счета КВ.
					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.НомерЖурнала = "ОС";
					Проводка.Содержание   = "Амортизационная премия";
					Проводка.Сумма        = СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
					
					Проводка.СчетКт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					Если СтруктураШапкиДокумента.ВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыАмортизационнойПремии", Ссылка);
					КонецЕсли;
					
					// Уменьшение стоимости ОС по налоговому учету в регистре накопления.
					Движение = ТаблицаДвиженийАмортизация.Добавить();
					Движение.ВидДвижения      = ВидДвиженияНакопления.Расход;
					Движение.ОсновноеСредство = ТекОС;
					Движение.Организация      = СтруктураШапкиДокумента.Организация;
					Движение.Стоимость        = -СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
					
					Если СтруктураШапкиДокумента.ВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии Тогда
						
						// Начисляем амортизационную премию.
						Проводка = ПроводкиНУ.Добавить();
						
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.НомерЖурнала = "ОС";
						Проводка.Содержание   = "Амортизационная премия";
						Проводка.Сумма        = СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
						
						Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаЗатратПоАмортизационнойПремии;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоПоАмортизационнойПремии1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоПоАмортизационнойПремии2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоПоАмортизационнойПремии3);
						
						Проводка.СчетКт       = СчетУчетаСтоимости;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
						
						ЭтоНепринимаемые = НалоговыйУчет.ОпределитьНеПринимаемыеДоходыРасходы(Проводка);
						
						Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
							
							// Отражаем временные разницы.
							Проводка = ПроводкиНУ.Добавить();
							
							Проводка.Период       = ДатаДока;
							Проводка.Организация  = СтруктураШапкиДокумента.Организация;
							Проводка.НомерЖурнала = "ОС";
							Проводка.Содержание   = "Амортизационная премия";
							Проводка.Сумма        = -СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
							
							Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаЗатратПоАмортизационнойПремии;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоПоАмортизационнойПремии1);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоПоАмортизационнойПремии2);
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоПоАмортизационнойПремии3);
							
							Проводка.СчетКт       = СчетУчетаСтоимости;
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
							
							Если ЭтоНепринимаемые Тогда
								Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
								Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
							Иначе
								Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
								Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
							КонецЕсли;
						КонецЕсли;
						
						ТабКапитальныхВложений = УправлениеЗатратами.СформироватьТаблицуЗатрат();
						ТабКапитальныхВложений.Колонки.Добавить("СчетАмортизации");
						ТабКапитальныхВложений.Колонки.Добавить("СчетАмортизацииНУ");
						ТабКапитальныхВложений.Колонки.Добавить("ИмяСубконто");
						ТабКапитальныхВложений.Колонки.Добавить("ОбъектУчета");
						
						СтрокаТабКапитальныхВложений = ТабКапитальныхВложений.Добавить();
						Если  ЭтоНепринимаемые Тогда
							СтрокаТабКапитальныхВложений.ПостояннаяРазница = -СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
						Иначе
							СтрокаТабКапитальныхВложений.ВременнаяРазница = -СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
						КонецЕсли;
						
						СтрокаТабКапитальныхВложений.СуммаНал = СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ; 
						СтрокаТабКапитальныхВложений.СчетЗатратНУ = СтруктураШапкиДокумента.СчетУчетаЗатратПоАмортизационнойПремии;
						СтрокаТабКапитальныхВложений.СчетЗатрат   = РасширеннаяАналитикаУчета.ПолучитьСчетБУПоСчетуНУ(СтруктураШапкиДокумента.СчетУчетаЗатратПоАмортизационнойПремии, Неопределено);
						Массив = Новый Массив;
						Массив.Добавить(СтруктураШапкиДокумента.СубконтоПоАмортизационнойПремии1);
						Массив.Добавить(СтруктураШапкиДокумента.СубконтоПоАмортизационнойПремии2);
						Массив.Добавить(СтруктураШапкиДокумента.СубконтоПоАмортизационнойПремии3);
						СтрокаТабКапитальныхВложений.ПодразделениеОрганизации = НалоговыйУчет.НайтиЗначениеЗначениеСправочникаПоТипу("ПодразделенияОрганизаций",Массив);
						СтрокаТабКапитальныхВложений.НоменклатурнаяГруппа     = НалоговыйУчет.НайтиЗначениеЗначениеСправочникаПоТипу("НоменклатурныеГруппы",Массив);
						СтрокаТабКапитальныхВложений.СтатьяЗатрат             = НалоговыйУчет.НайтиЗначениеЗначениеСправочникаПоТипу("СтатьиЗатрат",Массив);
						
						// Затраты по амортизационной премии отражаются только в налоговом учете.
						// Поэтому нужно указать, что движения по "бухгалтерским" регистрам не нужны.
						// Для этого подменим в СтруктураШапкиДокумента значение ключа 
						// ОтражатьВБухгалтерскомУчете: укажем "Ложь".
						// Это важно только для традиционного учета затрат, но не создаст проблем и при РА
						
						// Запомним значения тех ключей, которые подменим
						ЗначенияКлючейДоИзменения = Новый Структура("ОтражатьВБухгалтерскомУчете");
						ЗаполнитьЗначенияСвойств(ЗначенияКлючейДоИзменения, СтруктураШапкиДокумента);
						
						// Движения по "бухгалтерским" регистрам учета затрат не нужны
						СтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
						
						// Выполним движения - только по регистрам налогового учета
						УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
							СтруктураШапкиДокумента, 
							ТабКапитальныхВложений, 
							Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете);
						
						// Восстановим значения ключей
						ЗаполнитьЗначенияСвойств(СтруктураШапкиДокумента, ЗначенияКлючейДоИзменения);
						
					Иначе
						
						НоваяСтрокаТабКапитальныхВложений = ТабКапитальныхВложений.Добавить();

						НоваяСтрокаТабКапитальныхВложений.ОбъектУчета            = ТекОС;
						НоваяСтрокаТабКапитальныхВложений.СчетАмортизацииНУ      = СчетУчетаСтоимости;
						НоваяСтрокаТабКапитальныхВложений.ИмяСубконто            = "ОсновныеСредства";
						НоваяСтрокаТабКапитальныхВложений.НаправлениеАмортизации = НаправлениеАмортизации;
						НоваяСтрокаТабКапитальныхВложений.Сумма                  = СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
		
		Если ТабКапитальныхВложений.Количество() > 0 И НЕ СтруктураШапкиДокумента.ВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии Тогда
			
			// Включение капитальных вложений в состав расходов.
			ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабКапитальныхВложений, СтруктураШапкиДокумента, "Нал", "ОС", "Амортизационная премия");
			
			// Формирование проводок по возникающим временным разницам.
			Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				ТабВременныхРазницПоКапитальнымВложениям = ТабКапитальныхВложений.Скопировать();
				Для Каждого СтрокаВременныхРазниц Из ТабВременныхРазницПоКапитальнымВложениям Цикл
					СтрокаВременныхРазниц.Сумма = -СтрокаВременныхРазниц.Сумма;
				КонецЦикла;
				ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабВременныхРазницПоКапитальнымВложениям, СтруктураШапкиДокумента, "ВР", "ОС", "Амортизационная премия");
			КонецЕсли;
			
		КонецЕсли;

		АмортизацияОС.мПериод          = ДатаДока;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьПриход();
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не Отказ Тогда
		ПРоводкиБУ.Записать(Ложь);
	КонецЕсли; 
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И Не Отказ тогда
		ПроводкиНУ.Записать(Ложь);
	КонецЕсли; 
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок, ФормироватьПроводки = Истина) Экспорт

	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоОС.Количество() = 0 Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли; 
	
	//Вычислим коэффициент распределения
	ИтоговаяСуммаМодернизацииБУ = ТаблицаПоОС.Итог("СуммаМодернизацииБУ");
	ИтоговаяСуммаМодернизацииБУХоз = ТаблицаПоОС.Итог("СуммаМодернизацииБУХоз");
	
	Если (ИтоговаяСуммаМодернизацииБУ <= 0) Тогда
		Возврат;
	КонецЕсли;
	
	//Вычислим коэффициент распределения
	Запрос = Новый Запрос;
			
	Запрос.УстановитьПараметр("КонецПериода"     	, Новый граница(новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Счет"       			, СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива);
	Запрос.УстановитьПараметр("Организация"			, СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Объект"				, СтруктураШапкиДокумента.ОбъектСтроительства);
			
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
		
	ЕстьСубконто_СпособыСтроительства = не (СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства,"ВидСубконто") = Неопределено);
		
	Если ЕстьСубконто_СпособыСтроительства Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
		Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
		Запрос.УстановитьПараметр("ХозСпособСтроительства",  Перечисления.СпособыСтроительства.Хозспособ);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
		|				ТОГДА 0
		|			ИНАЧЕ Остатки.СуммаОстаток
		|		КОНЕЦ) КАК СуммаОстаток,
		|	СУММА(ВЫБОР
		|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
		|				ТОГДА Остатки.СуммаОстаток
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Хозспособ_Остаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&КонецПериода,
		|		Счет = &Счет,
		|		&ВидыСубконто,
		|		Организация = &Организация
		|		    И Субконто1 = &Объект) КАК Остатки";
	Иначе
		Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Остатки.СуммаОстаток КАК СуммаОстаток,
		|	0 КАК Хозспособ_Остаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&КонецПериода,
		|		Счет = &Счет,
		|		&ВидыСубконто,
		|		Организация = &Организация
		|		    И Субконто1 = &Объект) КАК Остатки";
				
	КонецЕсли; 
			
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СуммаОстатка = 0;
		СуммаОстатка_Хозспособ = 0;
	иначе
		Результат = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		СуммаОстатка  = Результат.Итог("СуммаОстаток");
		СуммаОстатка_Хозспособ = Результат.Итог("Хозспособ_Остаток");
	КонецЕсли; 
	ТаблицаДвижений_НДСОСиНМА = неопределено;	
	Если (ИтоговаяСуммаМодернизацииБУ - ИтоговаяСуммаМодернизацииБУХоз) > 0 Тогда
		Если (СуммаОстатка = 0) тогда
			ОбщегоНазначения.СообщитьОбОшибке("Отсутствует (не определен) остаток по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
			КоэффициентРаспределения = 1;
		ИначеЕсли (СуммаОстатка < 0) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Определен отрицательный остаток ("+Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2")+") по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
			КоэффициентРаспределения = 1;
		Иначе
			КоэффициентРаспределения = (ИтоговаяСуммаМодернизацииБУ - ИтоговаяСуммаМодернизацииБУХоз)/СуммаОстатка;
		КонецЕсли;
		
		// отразим погашение события ОжидаетсяПринятиеКУчетуОбъектаСтроительства
		ТаблицаДвижений_НДСОСиНМА = УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС(СтруктураШапкиДокумента,
											СтруктураШапкиДокумента.ОбъектСтроительства,
											Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства,
											Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,СтруктураШапкиДокумента.Дата,
											КоэффициентРаспределения, Отказ);
	КонецЕсли;							
	ТаблицаДвижений_НДСПредъявленный = новый ТаблицаЗначений;

	// Отразим НДС при принятии к учету ОС хоз способом.
	Если ИтоговаяСуммаМодернизацииБУХоз > 0 Тогда
		СуммаНДСПоХозСпособу = УчетНДС.РассчитатьСуммуНДС(ИтоговаяСуммаМодернизацииБУХоз, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
		Если СтруктураШапкиДокумента.Дата >= '20060101' Тогда
			// НДС по хозспособу на джданный моемнт может быть уже начислен.
			// Необходимо определить долю погашения ранее начисленного НДС и долю текущего начисления
			Если (СуммаОстатка_Хозспособ = 0) тогда
				ОбщегоНазначения.СообщитьОбОшибке("Отсутствует (не определен) остаток по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Хозспособ""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
				КоэффициентРаспределения = 1;
			ИначеЕсли (СуммаОстатка_Хозспособ < 0) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Определен отрицательный остаток ("+Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2")+") по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Хозспособ""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
				КоэффициентРаспределения = 1;
			Иначе
				КоэффициентРаспределения = (ИтоговаяСуммаМодернизацииБУХоз)/СуммаОстатка_Хозспособ;
			КонецЕсли;
			Результат_Хозспособ = УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС_Хозспособ(СтруктураШапкиДокумента,
											СтруктураШапкиДокумента.ОбъектСтроительства,
											Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства,
											Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,СтруктураШапкиДокумента.Дата,
											КоэффициентРаспределения, Отказ);
	
			// Отразим погашение события ОжидаетсяПринятиеКУчетуОбъектаСтроительства по СМР собственными силами (НДС начислен ранее).
			СуммаБезНДСПоХозСпособу_НачисленоРанее = Результат_Хозспособ.СуммаБезНДС;
			Если Результат_Хозспособ.ТаблицаДвижений_НДСпоОСиНМА <> Неопределено И Результат_Хозспособ.ТаблицаДвижений_НДСпоОСиНМА.Количество() > 0 Тогда
				//дополним таблицу ТаблицаДвижений_НДСОСиНМА
				Если ТаблицаДвижений_НДСОСиНМА = неопределено Тогда
					ТаблицаДвижений_НДСОСиНМА = Результат_Хозспособ.ТаблицаДвижений_НДСпоОСиНМА.Скопировать();
				Иначе
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Результат_Хозспособ.ТаблицаДвижений_НДСпоОСиНМА,ТаблицаДвижений_НДСОСиНМА);
				конецЕсли;
			КонецЕсли;
												
			ИтоговаяСуммаМодернизацииБУХоз = ИтоговаяСуммаМодернизацииБУХоз - СуммаБезНДСПоХозСпособу_НачисленоРанее;
			СуммаНДСПоХозСпособу = УчетНДС.РассчитатьСуммуНДС(ИтоговаяСуммаМодернизацииБУХоз, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС18));
		КонецЕсли; 
			
		Если СтруктураШапкиДокумента.Дата < '20060101' 
			И ИтоговаяСуммаМодернизацииБУХоз > 0 Тогда
		
			ТаблицаДвижений_НДСПредъявленный = УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленныйПредъявленный_ПринятиеКУчету_ХозСпособ(СтруктураШапкиДокумента, Отказ,ИтоговаяСуммаМодернизацииБУХоз,СуммаНДСПоХозСпособу);
			
			// Проводка по уплате НДС в бюджет
			Если СуммаНДСПоХозСпособу <> 0 И ФормироватьПроводки Тогда
				ПроводкаБУ = Движения.Хозрасчетный.Добавить();
				ПроводкаБУ.Период = СтруктураШапкиДокумента.Дата;
				ПроводкаБУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаБУ.Содержание = "Начислен НДС по строительству хоз. способом";
				
				ПроводкаБУ.СчетДт = ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "СФПолученные", СтруктураШапкиДокумента.Ссылка);
				
				ПроводкаБУ.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				
				ПроводкаБУ.Сумма = СуммаНДСПоХозСпособу;
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не Отказ Тогда
					Движения.Хозрасчетный.Записать(Ложь);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаДвижений_НДСОСиНМА <> неопределено И СтоимостьБУ <> 0 Тогда
		ТаблицаДвижений_НДСОСиНМАДляЗаписи = ТаблицаДвижений_НДСОСиНМА.СкопироватьКолонки();
		
		// Распределяем каждую запись движения НДСОСиНМА между объектами ОС, 
		// пропорционально сумме модернизации
		Для Каждого СтрокаТаблицыНДСОСиНМА Из ТаблицаДвижений_НДСОСиНМА Цикл
		
			ИтогСуммаБезНДС = 0;
			ИтогСуммаНДС	= 0;
			
			Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
				КоэффициентРаспределенияСумм = СтрокаОС.СуммаМодернизацииБУ / СтоимостьБУ; 
			
				НоваяСтрока = ТаблицаДвижений_НДСОСиНМАДляЗаписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыНДСОСиНМА);
				НоваяСтрока.СуммаБезНДС = Окр(СтрокаТаблицыНДСОСиНМА.СуммаБезНДС * КоэффициентРаспределенияСумм, 2);
				НоваяСтрока.НДС 		= Окр(СтрокаТаблицыНДСОСиНМА.НДС * КоэффициентРаспределенияСумм, 2);
				НоваяСтрока.Объект 		= СтрокаОС.ОсновноеСредство;
				
				ИтогСуммаБезНДС = ИтогСуммаБезНДС + НоваяСтрока.СуммаБезНДС;
				ИтогСуммаНДС	= ИтогСуммаНДС + НоваяСтрока.НДС;
			КонецЦикла;
			
			РазницаСуммаБезНДС = ИтогСуммаБезНДС - СтрокаТаблицыНДСОСиНМА.СуммаБезНДС;
			РазницаСуммаНДС = ИтогСуммаНДС - СтрокаТаблицыНДСОСиНМА.НДС;
			Если РазницаСуммаБезНДС <> 0 ИЛИ РазницаСуммаНДС <> 0 Тогда
				НоваяСтрока.СуммаБезНДС = НоваяСтрока.СуммаБезНДС - РазницаСуммаБезНДС;
				НоваяСтрока.НДС			= НоваяСтрока.НДС - РазницаСуммаНДС;
			КонецЕсли;
		
		КонецЦикла; 
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСОСиНМА_ПринятиеКУчетуОС_Модернизация(СтруктураШапкиДокумента,ТаблицаДвижений_НДСПредъявленный,ТаблицаДвижений_НДСОСиНМАДляЗаписи);
		
	КонецЕсли;

КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоСтрокам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДатаОплаты, СуммаОплаты");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплатПоОС, Отказ, Заголовок) Экспорт
	
	СтруктураПолей = Новый Структура;

	СтруктураПолей.Вставить("ОсновноеСредство",     "ОсновноеСредство");
	СтруктураПолей.Вставить("СтоимостьУУ",          "СтоимостьУУ");
	СтруктураПолей.Вставить("СуммаМодернизацииУУ",  "СуммаМодернизацииУУ");
	СтруктураПолей.Вставить("АмортизацияУУ",        "АмортизацияУУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцУУ", "АмортизацияЗаМесяцУУ");
	
	СтруктураПолей.Вставить("СрокПолезногоИспользованияУУ", "СрокПолезногоИспользованияУУ");
	СтруктураПолей.Вставить("ФактСрокИспользованияУУ",      "ФактСрокИспользованияУУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботУУ",        "ОбъемПродукцииРаботУУ");
	
	СтруктураПолей.Вставить("ФактОбъемПродукцииРаботУУ",    "ФактОбъемПродукцииРаботУУ");
	СтруктураПолей.Вставить("КоэффициентАмортизацииУУ",     "КоэффициентАмортизацииУУ");
	СтруктураПолей.Вставить("КоэффициентУскоренияУУ",       "КоэффициентУскоренияУУ");

	СтруктураПолей.Вставить("СтоимостьБУ",                  "СтоимостьБУ");
	СтруктураПолей.Вставить("СуммаМодернизацииБУ",          "СуммаМодернизацииБУ");
	СтруктураПолей.Вставить("СуммаМодернизацииБУХоз",       "СуммаМодернизацииБУХоз");
	СтруктураПолей.Вставить("АмортизацияБУ",                "АмортизацияБУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ",         "АмортизацияЗаМесяцБУ");
	СтруктураПолей.Вставить("СтоимостьПР",                  "СтоимостьПР");
	СтруктураПолей.Вставить("АмортизацияПР",                "АмортизацияПР");
	
	СтруктураПолей.Вставить("СрокПолезногоИспользованияБУ", "СрокПолезногоИспользованияБУ");
	СтруктураПолей.Вставить("ФактСрокИспользованияБУ",      "ФактСрокИспользованияБУ");
	СтруктураПолей.Вставить("ОбъемПродукцииРаботБУ",        "ОбъемПродукцииРаботБУ");
	
	СтруктураПолей.Вставить("ФактОбъемПродукцииРаботБУ",    "ФактОбъемПродукцииРаботБУ");
	СтруктураПолей.Вставить("КоэффициентАмортизацииБУ",     "КоэффициентАмортизацииБУ");
	СтруктураПолей.Вставить("КоэффициентУскоренияБУ",       "КоэффициентУскоренияБУ");

	СтруктураПолей.Вставить("СрокПолезногоИспользованияНУ", "СрокПолезногоИспользованияНУ");
	СтруктураПолей.Вставить("СуммаМодернизацииНУ",          "СуммаМодернизацииНУ");
	СтруктураПолей.Вставить("СуммаМодернизацииНУХоз",       "СуммаМодернизацииНУХоз");
	
	СтруктураПолей.Вставить("СуммаМодернизацииПР",          "СуммаМодернизацииПР");
	СтруктураПолей.Вставить("СуммаМодернизацииПРХоз",       "СуммаМодернизацииПРХоз");

	СтруктураПолей.Вставить("СуммаМодернизацииВР",          "СуммаМодернизацииВР");
	СтруктураПолей.Вставить("СуммаМодернизацииВРХоз",       "СуммаМодернизацииВРХоз");
	
	СтруктураПолей.Вставить("СуммаМодернизацииУСН",          "СуммаМодернизацииУСН");
	
	СтруктураПолей.Вставить("СуммаКапитальныхВложенийВключаемыхВРасходыНУ", "СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
	
	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Строки".
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ДатаОплаты"	   ,"ДатаОплаты");
		СтруктураПолей.Вставить("СуммаОплаты"  	   ,"СуммаОплаты");
		
		РезультатЗапросаПоСтрокам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураПолей);
		ТаблицаОплат = РезультатЗапросаПоСтрокам.Выгрузить();
		
		ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаОплат, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		Если НЕ Отказ Тогда
			ТаблицаОплатПоОС = РаспределитьОплатыПоОС(СтруктураШапкиДокумента, ТаблицаОплат, ТаблицаПоОС);
		КонецЕсли;
		
	Иначе
		ТаблицаОплатПоОС = Новый ТаблицаЗначений();		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплатПоОС;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);	
	//начало изменений БП 07 
	СтруктураШапкиДокумента.ОтражатьВУправленческомУчете = Не ПараметрыСеанса.НеведетсяУПРУчетВЧастиЗатратИОС и ОтражатьВУправленческомУчете;
	//конец изменений БП 07	 
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("ВариантУчетаРасходовПоАмортизационнойПремии");
		ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
		
	КонецЕсли;

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплатПоОС, Отказ, Заголовок);

	ПроверкаРеквизитовТЧ(РежимПроведения, ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоОС, ТаблицаОплатПоОС, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	//начало изменений БП 07 
	Если ПараметрыСеанса.НеведетсяУПРУчетВЧастиЗатратИОС Тогда
		 Событие = СобытиеРегл;
	КонецЕсли;	
	//конец изменений БП 07	 

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	 
КонецПроцедуры


