Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Проверяет правильность заполнения шапки документа по рег учету.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ПериодРегистрации");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет движения по регистрам упр
//
Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ДатаДок = КонецМесяца(ПериодРегистрации);

	ТабАмортизации = Новый ТаблицаЗначений;
	ТабАмортизации = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииУпр(КонецМесяца(ПериодРегистрации));

	ТабАмортизации.Колонки.Упр.Имя = "Сумма";
	ТабАмортизации.Колонки.ОС.Имя  = "ОбъектУчета";
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);

	Если НЕ Отказ Тогда

		НаборДвижений   = Движения.СтоимостьОС;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		Для Каждого СтрокаТЧ из ТабАмортизации Цикл

			Если СтрокаТЧ.Сумма > 0 Тогда

				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОбъектУчета;
				СтрокаДвижений.Амортизация      = СтрокаТЧ.Сумма;

			КонецЕсли;

		КонецЦикла;

		НаборДвижений.мПериод          = ДатаДок;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		Движения.СтоимостьОС.ВыполнитьПриход();

	КонецЕсли;
	
КонецПроцедуры

// Выполняет движения по регистрам регл
//
Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если Не (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕслИ;

	ДатаДок = КонецМесяца(ПериодРегистрации);

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл(ДатаДок,СтруктураШапкиДокумента.Организация);
		ТабАмортизацииБУ = ТабАмортизации;
		ТабАмортизацииБУ.Колонки.Добавить("СчетУчета");
		ТабАмортизацииБУ.Колонки.Добавить("СчетАмортизацииНУ");
		мКэшСчетов = Новый Соответствие; 
		Для Каждого Строка Из ТабАмортизацииБУ Цикл
			СчетНУСоответствующийСчетуБУ = мКэшСчетов[Строка.СчетУчетаБУ];
			Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Строка.СчетУчетаБУ), Ложь, СтруктураШапкиДокумента.Дата);
				мКэшСчетов.Вставить(Строка.СчетУчетаБУ, СчетНУСоответствующийСчетуБУ);
			КонецЕсли;
			Строка.СчетУчета = СчетНУСоответствующийСчетуБУ;
			СчетНУСоответствующийСчетуБУ = мКэшСчетов[Строка.СчетАмортизацииБУ];
			Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Строка.СчетАмортизацииБУ), Ложь, СтруктураШапкиДокумента.Дата);
				мКэшСчетов.Вставить(Строка.СчетАмортизацииБУ, СчетНУСоответствующийСчетуБУ);
			КонецЕсли;
			Строка.СчетАмортизацииНУ = СчетНУСоответствующийСчетуБУ;
			
		КонецЦикла;
		
		ТабАмортизации.Колонки.Бух.Имя = "Сумма";
		ТабАмортизации.Колонки.ОС.Имя  = "ОбъектУчета";
		ТабАмортизации.Колонки.СчетАмортизацииБУ.Имя = "СчетАмортизации";
		
		мПроводкиБУ = Движения.Хозрасчетный;
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух","ОС");
        мПроводкиБУ.Записать(Ложь);

		Если НЕ Отказ Тогда

			НаборДвижений   = Движения.СтоимостьОСБухгалтерскийУчет;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			Для Каждого СтрокаТЧ из ТабАмортизации Цикл

				Если СтрокаТЧ.Сумма > 0 Тогда

					СтрокаДвижений = ТаблицаДвижений.Добавить();

					СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОбъектУчета;
					СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
					СтрокаДвижений.Амортизация      = СтрокаТЧ.Сумма;

				КонецЕсли;

			КонецЦикла;

			НаборДвижений.мПериод          = ДатаДок;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			НаборДвижений.ВыполнитьПриход();

		КонецЕсли;

	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда

		мПроводкиНУ = Движения.Налоговый;
		
		ТабАмортизации = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНалогРегл(ЭтотОбъект,ДатаДок,СтруктураШапкиДокумента.Организация);
		ТабАмортизации.Колонки.ОС.Имя = "ОбъектУчета";
		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
		
		// Включение амортизационной премии в состав расходов.
		Если ТабАмортизации.Итог("СуммаКапитальныхВложенийВключаемыхВРасходы") > 0 Тогда
			
			ТабКапитальныхВложений = ТабАмортизации.Скопировать();
			ТабКапитальныхВложений.Колонки.Добавить("СуммаБУ",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
			ТабКапитальныхВложений.Колонки.Добавить("СуммаПР",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
			
			НаборДвижений   = Движения.СтоимостьОСНалоговыйУчет;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			СписокОС = Новый Массив();
			Для Каждого СтрокаТабАмортизации Из ТабАмортизации Цикл
				Если СтрокаТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы > 0 Тогда
					СписокОС.Добавить(СтрокаТабАмортизации.ОбъектУчета);
				КонецЕсли;
			КонецЦикла;
			
			НалоговыйУчет.РасчетАмортизационнойПремии(ЭтотОбъект, СтруктураШапкиДокумента, СписокОС, ТабКапитальныхВложений, мПроводкиНУ, ТаблицаДвижений, Отказ, Заголовок);			
			
			// Уменьшение стоимости ОС по налоговому учету в регистре накопления.
			Если НЕ Отказ Тогда
				Для Каждого СтрокаТЧ из ТабКапитальныхВложений Цикл
					Если СтрокаТЧ.Сумма > 0 Тогда
						СтрокаДвижений = ТаблицаДвижений.Добавить();
						СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОбъектУчета;
							СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
							СтрокаДвижений.Стоимость        = СтрокаТЧ.Сумма;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				
			НаборДвижений.мПериод          = ДатаДок;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			НаборДвижений.ВыполнитьРасход();
				
		КонецЕсли;

		// Начисление амортизации.
		ТабАмортизации.Колонки.Налог.Имя = "Сумма";
			
		СтруктураШапкиДокумента.Дата = СтруктураШапкиДокумента.ПериодРегистрации;
		Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
			НалоговыйУчет.РасчетРазницПоАмортизации(СтруктураШапкиДокумента, "ОС", "", ТабАмортизации, ТабЗатрат, ТабАмортизацииБУ);
		КонецЕсли;
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Нал","ОС");
		

		Если НЕ Отказ И Не ТабАмортизации = Неопределено Тогда

			НаборДвижений   = Движения.СтоимостьОСНалоговыйУчет;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			Для Каждого СтрокаТЧ из ТабАмортизации Цикл

				Если СтрокаТЧ.Сумма > 0 Тогда

					СтрокаДвижений = ТаблицаДвижений.Добавить();

					СтрокаДвижений.ОсновноеСредство = СтрокаТЧ.ОбъектУчета;
					СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
					СтрокаДвижений.Амортизация      = СтрокаТЧ.Сумма;

				КонецЕсли;

			КонецЦикла;

			НаборДвижений.мПериод          = ДатаДок;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			НаборДвижений.ВыполнитьПриход();

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ПериодРегистрации", КонецМесяца(ПериодРегистрации));
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("ПоддержкаПБУ18");
		ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух", СтруктураПолейУчетнойПолитикиНУ);
	КонецЕсли;
	
	Заголовок = "";
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью



