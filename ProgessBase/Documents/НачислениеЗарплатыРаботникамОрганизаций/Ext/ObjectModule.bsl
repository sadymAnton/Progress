////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит массив типов наборов записей,
// движения по которому не контролируются документом
Перем мНеуправляемыеДвижения;

// Хранит соответствие доходов и положенных по ним вычетов
Перем мСоответствиеДоходовИВычетов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Выполняет автоматическое заполнение показателей в строке
//
Процедура ЗаполнитьПоказателиСтроки(СотрудникФизлицо, ВидРасчета, НомерСтроки, Подразделение = Неопределено, ГоловнаяОрганизация, ИмяТЧ = "", ДатаНачала, РучныеИзмененияСтроки = Неопределено) Экспорт 
	
	ПоказателиСтроки = ЗаполнениеДокументовЗК.ПоказателиСтроки(СотрудникФизлицо, ВидРасчета, Подразделение, ГоловнаяОрганизация, ДатаНачала);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект[ИмяТЧ][НомерСтроки - 1], ПоказателиСтроки, , ЗаполнениеДокументовЗК.ИзмененныеВручнуюПоказатели(РучныеИзмененияСтроки));
	
КонецПроцедуры // ЗаполнитьПоказателиСтроки

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Заполняет показатели
//
Функция ЗаполнитьПоказатели(ТекущийСотрудник, Источник) Экспорт 
	
	Если ТекущийСотрудник = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Начисления.Количество() = 0 И ДополнительныеНачисления.Количество() = 0 И Удержания.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТЗНачисления	= Начисления.Выгрузить(,"Сотрудник,ВидРасчета,ДатаОкончания");
	ТЗДопНачисления	= ДополнительныеНачисления.Выгрузить(,"Сотрудник,ВидРасчета,ДатаОкончания");
	ТЗУдержания		= Удержания.Выгрузить(,"ФизЛицо,ВидРасчета,ДатаОкончания");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления",ТЗНачисления);
	Запрос.УстановитьПараметр("ДопНачисления",ТЗДопНачисления);
	Запрос.УстановитьПараметр("Удержания",ТЗУдержания);
	Запрос.УстановитьПараметр("ПарамДата",НачалоМесяца(ПериодНачисленияДатаНачала));
	Запрос.УстановитьПараметр("ПарамГоловнаяОрганизация",ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	
	// получим временную таблицу с сотрудниками и видами расчетов
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.Сотрудник,
	|	Начисления.ДатаОкончания
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.Сотрудник,
	|	Начисления.ДатаОкончания
	|ПОМЕСТИТЬ ВТДопНачисления
	|ИЗ
	|	&ДопНачисления КАК Начисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.ВидРасчета,
	|	Удержания.ФизЛицо КАК ФизЛицо,
	|	Удержания.ДатаОкончания
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	&Удержания КАК Удержания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.ВидДоговора,
	|	СотрудникиОрганизаций.Физлицо,
	|	СотрудникиОрганизаций.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &ПарамГоловнаяОрганизация
	|	И СотрудникиОрганизаций.Физлицо В
	|			(ВЫБРАТЬ
	|				Удержания.ФизЛицо КАК ФизЛицо
	|			ИЗ
	|				ВТУдержания КАК Удержания)
	|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И СотрудникиОрганизаций.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОсновноеМесто.Сотрудник КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	|	СотрудникиОрганизаций.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТДанныеОРаботниках
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ПарамДата,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Сотрудник
	|				ИЗ
	|					ВТСотрудники КАК Сотрудники)) КАК РаботникиОсновноеМесто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК СотрудникиОрганизаций
	|		ПО РаботникиОсновноеМесто.Сотрудник = СотрудникиОрганизаций.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОсновноеМесто.ПериодЗавершения <= &ПарамДата
	|					И РаботникиОсновноеМесто.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОсновноеМесто.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗанятости,
	|	Физлицо";			
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показатели.Показатель КАК Показатель,
	|	Показатели.Показатель.ВидПоказателя КАК ВидПоказателя,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО Начисления.ВидРасчета = Показатели.Ссылка
	|			И ((НЕ Показатели.Показатель.Предопределенный))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд))
	|ГДЕ
	|	Показатели.Показатель ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показатели.Показатель,
	|	Показатели.Показатель.ВидПоказателя,
	|	ДопНачисления.Сотрудник,
	|	ДопНачисления.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТДопНачисления КАК ДопНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО ДопНачисления.ВидРасчета = Показатели.Ссылка
	|			И ((НЕ Показатели.Показатель.Предопределенный))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд))
	|ГДЕ
	|	Показатели.Показатель ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показатели.Показатель,
	|	Показатели.Показатель.ВидПоказателя,
	|	Сотрудники.Сотрудник,
	|	Удержания.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТУдержания КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели
	|		ПО Удержания.ВидРасчета = Показатели.Ссылка
	|			И ((НЕ Показатели.Показатель.Предопределенный))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется))
	|			И (Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная))
	|			И (Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокСотрудников.Сотрудник КАК Сотрудник,
	|			СписокСотрудников.Физлицо КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|				РаботникиОсновноеМесто.Физлицо КАК Физлицо,
	|				1 КАК Приоритет
	|			ИЗ
	|				ВТДанныеОРаботниках КАК РаботникиОсновноеМесто
	|			ГДЕ
	|				РаботникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОсновноеМесто.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиСовместительство.Сотрудник),
	|				РаботникиСовместительство.Физлицо,
	|				2
	|			ИЗ
	|				ВТДанныеОРаботниках КАК РаботникиСовместительство
	|			ГДЕ
	|				РаботникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиСовместительство.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Сотрудник),
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|			ИЗ
	|				ВТСотрудники КАК СотрудникиДУ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ) КАК СписокСотрудников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СписокФизическихЛиц.Физлицо КАК Физлицо,
	|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
	|				ИЗ
	|					(ВЫБРАТЬ
	|						РаботникиОсновноеМесто.Физлицо КАК Физлицо,
	|						1 КАК Приоритет
	|					ИЗ
	|						ВТДанныеОРаботниках КАК РаботникиОсновноеМесто
	|					ГДЕ
	|						РаботникиОсновноеМесто.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						РаботникиСовместительство.Физлицо,
	|						2
	|					ИЗ
	|						ВТДанныеОРаботниках КАК РаботникиСовместительство
	|					ГДЕ
	|						РаботникиСовместительство.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						СотрудникиДУ.Физлицо,
	|						ВЫБОР
	|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|								ТОГДА 4
	|							ИНАЧЕ 5
	|						КОНЕЦ
	|					ИЗ
	|						ВТСотрудники КАК СотрудникиДУ) КАК СписокФизическихЛиц
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
	|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
	|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
	|		ПО Удержания.ФизЛицо = Сотрудники.Физлицо
	|ГДЕ
	|	Показатели.Показатель ЕСТЬ НЕ NULL 
	|	И Сотрудники.Сотрудник ЕСТЬ НЕ NULL ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		
		ТаблицаЗапроса = Результат.Выгрузить();
		Показатели = ТаблицаЗапроса.ВыгрузитьКолонку("Показатель");
		Сотрудники = ТаблицаЗапроса.ВыгрузитьКолонку("Сотрудник");
		
		ФормаВводаПоказателей = РегистрыСведений.ЗначенияПоказателейСхемМотивации.ПолучитьФорму("ФормаВводаЗначенийПоказателей");
		ФормаВводаПоказателей.Организация		= Организация;
		ФормаВводаПоказателей.ПериодДействия	= НачалоМесяца(ПериодНачисленияДатаНачала);
		ФормаВводаПоказателей.мИсточник			= Источник;

		ФормаВводаПоказателей.ФормаАвтозаполнение(ТаблицаЗапроса, Сотрудники, Показатели ,,);
		ФормаВводаПоказателей.мСотрудникДляОткрытия = ТекущийСотрудник;
		ФормаВводаПоказателей.Открыть();
		
		Возврат Истина;
		
	КонецЕсли;

КонецФункции //ЗаполнитьПоказатели

// формирует дополнительное описание строки расчетного листка
//
// Параметры
//  Выборка - строка из выборки результата запроса или из таблицы значений, по которой выводится строка РЛ 
//  ЭтоНачисление - булево: если Истина, выводится строка начисления
//
// Возвращаемое значение:
//   строка дополнительного описания
//
Функция ПримечаниеКСтрокеРасчетногоЛистка(Выборка, ЭтоНачисление = Истина)
	
	Описание = "";
	
	СведенияОВидахРасчета     = Новый Соответствие;
	СчДобавленныхСтрок = 1;
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(СведенияОВидахРасчета, Выборка.ВидРасчетаСсылка, "ПриРасчете");
	ПервыйРаз = истина;
	
	Для СчПоказатель = 1 по Мин(СведенияОВидеРасчета["КоличествоПоказателей"], 6) Цикл
		Если СведенияОВидеРасчета["Показатель"+СчПоказатель+"Видимость"] И СведенияОВидеРасчета["Показатель" + СчПоказатель + "Наименование"] <> Null тогда
			Если ПервыйРаз тогда
				Описание = Описание + " показатели:";
				ПервыйРаз                 = ложь;
			КонецЕсли;
			Описание = Описание + Символы.ПС + " " + СведенияОВидеРасчета["Показатель" + СчПоказатель + "Наименование"] + " - " + Выборка["Показатель"+СчПоказатель];
		ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказатель + "НаименованиеВидимость"] И СведенияОВидеРасчета["ПоказательТР" + СчПоказатель + "Наименование"] <> Null тогда
			Если ПервыйРаз тогда
				Описание    = Описание + " показатели:";
				ПервыйРаз   = ложь;
			КонецЕсли;
			Описание = Описание + Символы.ПС + " " + СведенияОВидеРасчета["ПоказательТР" + СчПоказатель + "Наименование"] + " - " + Выборка["Показатель"+СчПоказатель];
		КонецЕсли;                                                                  
	КонецЦикла;
	
	Если Выборка.Регистратор <> Ссылка Тогда
		Описание = Описание + ?(ПустаяСтрока(Описание),"",Символы.ПС) + ?(ЭтоНачисление,"Начислено документом: ","Зарегистрировано документом: ") + Выборка.ОписаниеРегистратора;
	КонецЕсли;
	
	Возврат Описание
	
КонецФункции // ПримечаниеКСтрокеРасчетногоЛистка()


// Функция заполняет табличный документ "РасчетныйЛисток"
//
// Параметры:
//	ФизЛицо	- элемент справочника "ФизическиеЛица"
//
// Возвращаемое значение:
//	Табличный документ с заполненным расчетным листком
//
Функция ЗаполнитьТаблицуРасчетногоЛистка(ФизЛицо) Экспорт
	
	ЗапросРЛ = Новый Запрос;
	ЗапросРЛ.УстановитьПараметр("ПериодРегистрации",			ПериодРегистрации);
	ЗапросРЛ.УстановитьПараметр("КонецПериодаРегистрации",		КонецМесяца(ПериодРегистрации));
	ЗапросРЛ.УстановитьПараметр("Расход",						ВидДвиженияНакопления.Расход);
	Авансы = Новый Массив;
	Авансы.Добавить(Перечисления.ХарактерВыплатыЗарплаты.АвансЗаПервуюПоловинуМесяца);
	Авансы.Добавить(Перечисления.ХарактерВыплатыЗарплаты.ПлановыйАванс);
	ЗапросРЛ.УстановитьПараметр("Аванс",						Авансы);
	
	
	ЗапросРЛ.УстановитьПараметр("Организация",					Организация);
	ЗапросРЛ.УстановитьПараметр("ГоловнаяОрганизация",			ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	ЗапросРЛ.УстановитьПараметр("Работник",						ФизЛицо);
	ЗапросРЛ.УстановитьПараметр("Ссылка",						Ссылка);
	
	МассивКодыМатвыгоды = Новый Массив;
	МассивКодыМатвыгоды.Добавить(Справочники.ДоходыНДФЛ.Код2610ПоСтавке13);
	МассивКодыМатвыгоды.Добавить(Справочники.ДоходыНДФЛ.Код2610ПоСтавке35);
	
	ЗапросРЛ.УстановитьПараметр("КодыМатвыгоды",				МассивКодыМатвыгоды);
	
	//из запроса исключаем данные по регистратору - этот документ, если документ проведен и модифицирован
	ИсключитьДанныеПоРегистратору = Проведен И Модифицированность() И ПериодНачисления <> Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца;
	ЗапросРЛ.УстановитьПараметр("ПоВсемРегистраторам",	Не ИсключитьДанныеПоРегистратору);
	
	//добавляем данные в расчетный листок из документа, если он не проведен или проведен и модифицирован
	ДобавитьДанныеИзДокумента = Модифицированность() Или Не Проведен Или ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца;
	
	Если ДобавитьДанныеИзДокумента И ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Работник",ФизЛицо);
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации",ПериодРегистрации);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Физлицо = &Работник
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации = &ПериодРегистрации
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодНачисленияЗарплаты.ТекущийМесяц)
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация = &Организация";
		ДобавитьДанныеИзДокумента = Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачисленияУдержания.ВидДвижения КАК ВидДвижения,
	|	НачисленияУдержания.НомерСтроки КАК НомерСтроки,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.ВидРасчета КАК ВидРасчета,
	|	НачисленияУдержания.ПорядокВидаРасчета КАК ПорядокВидаРасчета,
	|	НачисленияУдержания.ПериодДействияНачало КАК ПериодДействияНачало,
	|	НачисленияУдержания.ПериодДействияКонец КАК ПериодДействияКонец,
	|	НачисленияУдержания.ОтработаноДней КАК ОтработаноДней,
	|	НачисленияУдержания.ОтработаноЧасов КАК ОтработаноЧасов,
	|	НачисленияУдержания.ОплаченоДней КАК ОплаченоДней,
	|	НачисленияУдержания.ОплаченоЧасов КАК ОплаченоЧасов,
	|	НачисленияУдержания.Начисления КАК Начисления,
	|	НачисленияУдержания.Удержания КАК Удержания,
	|	Сальдо.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
	|	Сальдо.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток,
	|	НачисленияУдержания.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(НачисленияУдержания.Регистратор) КАК ОписаниеРегистратора,
	|	НачисленияУдержания.Показатель1,
	|	НачисленияУдержания.Показатель2,
	|	НачисленияУдержания.Показатель3,
	|	НачисленияУдержания.Показатель4,
	|	НачисленияУдержания.Показатель5,
	|	НачисленияУдержания.Показатель6,
	|	НачисленияУдержания.ВидРасчетаСсылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
	|				ТОГДА 6
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ВидДвижения,
	|		ОсновныеНачисленияРаботниковОрганизации.Регистратор КАК Регистратор,
	|		ОсновныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение КАК Организация,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации КАК ПериодРегистрации,
	|		ОсновныеНачисленияРаботниковОрганизации.ФизЛицо КАК ФизЛицо,
	|		ОсновныеНачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|		ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				ТОГДА """"
	|			ИНАЧЕ "" (по внутр. совмест-ву)""
	|		КОНЕЦ КАК ВидРасчета,
	|		""А"" + ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.Код КАК ПорядокВидаРасчета,
	|		ОсновныеНачисленияРаботниковОрганизации.НомерСтроки КАК НомерСтроки,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодДействияНачало КАК ПериодДействияНачало,
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодДействияКонец КАК ПериодДействияКонец,
	|		ОсновныеНачисленияРаботниковОрганизации.ОтработаноДней КАК ОтработаноДней,
	|		ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов КАК ОтработаноЧасов,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОплаченоДней,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизации.ВидУчетаВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|				ТОГДА ОсновныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОплаченоЧасов,
	|		ОсновныеНачисленияРаботниковОрганизации.Результат КАК Начисления,
	|		0 КАК Удержания,
	|		ОсновныеНачисленияРаботниковОрганизации.Показатель1 КАК Показатель1,
	|		ОсновныеНачисленияРаботниковОрганизации.Показатель2 КАК Показатель2,
	|		ОсновныеНачисленияРаботниковОрганизации.Показатель3 КАК Показатель3,
	|		ОсновныеНачисленияРаботниковОрганизации.Показатель4 КАК Показатель4,
	|		ОсновныеНачисленияРаботниковОрганизации.Показатель5 КАК Показатель5,
	|		ОсновныеНачисленияРаботниковОрганизации.Показатель6 КАК Показатель6,
	|		ОсновныеНачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчетаСсылка
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
	|	ГДЕ
	|		ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ОсновныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение = &Организация
	|		И ОсновныеНачисленияРаботниковОрганизации.ФизЛицо = &Работник
	|		И (&ПоВсемРегистраторам
	|				ИЛИ ОсновныеНачисленияРаботниковОрганизации.Регистратор <> &Ссылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
	|				ТОГДА 7
	|			ИНАЧЕ 2
	|		КОНЕЦ,
	|		ДополнительныеНачисленияРаботниковОрганизации.Регистратор,
	|		ДополнительныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение,
	|		НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации, МЕСЯЦ),
	|		ДополнительныеНачисленияРаботниковОрганизации.ФизЛицо,
	|		ДополнительныеНачисленияРаботниковОрганизации.Сотрудник,
	|		ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.Наименование + ВЫБОР
	|			КОГДА ЕСТЬNULL(ДополнительныеНачисленияРаботниковОрганизации.Сотрудник.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				ТОГДА """"
	|			ИНАЧЕ "" (по внутр. совмест-ву)""
	|		КОНЕЦ,
	|		""Б"" + ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета.Код,
	|		ДополнительныеНачисленияРаботниковОрганизации.НомерСтроки,
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.БазовыйПериодНачало = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации
	|			ИНАЧЕ ДополнительныеНачисленияРаботниковОрганизации.БазовыйПериодНачало
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.БазовыйПериодНачало = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации
	|			ИНАЧЕ ДополнительныеНачисленияРаботниковОрганизации.БазовыйПериодКонец
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|				ТОГДА ДополнительныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДополнительныеНачисленияРаботниковОрганизации.ВидУчетаВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|				ТОГДА ДополнительныеНачисленияРаботниковОрганизации.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ДополнительныеНачисленияРаботниковОрганизации.Результат,
	|		0,
	|		ДополнительныеНачисленияРаботниковОрганизации.Показатель1,
	|		ДополнительныеНачисленияРаботниковОрганизации.Показатель2,
	|		ДополнительныеНачисленияРаботниковОрганизации.Показатель3,
	|		ДополнительныеНачисленияРаботниковОрганизации.Показатель4,
	|		ДополнительныеНачисленияРаботниковОрганизации.Показатель5,
	|		ДополнительныеНачисленияРаботниковОрганизации.Показатель6,
	|		ДополнительныеНачисленияРаботниковОрганизации.ВидРасчета
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизации
	|	ГДЕ
	|		ДополнительныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ДополнительныеНачисленияРаботниковОрганизации.ОбособленноеПодразделение = &Организация
	|		И ДополнительныеНачисленияРаботниковОрганизации.ФизЛицо = &Работник
	|		И (&ПоВсемРегистраторам
	|				ИЛИ ДополнительныеНачисленияРаботниковОрганизации.Регистратор <> &Ссылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		7,
	|		НДФЛСведенияОДоходах.Регистратор,
	|		НДФЛСведенияОДоходах.ОбособленноеПодразделение,
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
	|		НДФЛСведенияОДоходах.ФизЛицо,
	|		NULL,
	|		""Мат. выгода по займам (кредитам)"",
	|		""Б9"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		СУММА(НДФЛСведенияОДоходах.СуммаДохода),
	|		0,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
	|	ГДЕ
	|		НДФЛСведенияОДоходах.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И НДФЛСведенияОДоходах.КодДохода В(&КодыМатвыгоды)
	|		И НДФЛСведенияОДоходах.ИсчисленоИзЗарплаты
	|		И НДФЛСведенияОДоходах.ОбособленноеПодразделение = &Организация
	|		И НДФЛСведенияОДоходах.ФизЛицо = &Работник
	|		И (&ПоВсемРегистраторам
	|				ИЛИ НДФЛСведенияОДоходах.Регистратор <> &Ссылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НДФЛСведенияОДоходах.ОбособленноеПодразделение,
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ),
	|		НДФЛСведенияОДоходах.ФизЛицо,
	|		НДФЛСведенияОДоходах.Регистратор,
	|		НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		4,
	|		УдержанияРаботниковОрганизации.Регистратор,
	|		УдержанияРаботниковОрганизации.ОбособленноеПодразделение,
	|		УдержанияРаботниковОрганизации.ПериодРегистрации,
	|		УдержанияРаботниковОрганизации.ФизЛицо,
	|		NULL,
	|		УдержанияРаботниковОрганизации.ВидРасчета.Наименование,
	|		""А"" + УдержанияРаботниковОрганизации.ВидРасчета.Код,
	|		NULL,
	|		УдержанияРаботниковОрганизации.БазовыйПериодНачало,
	|		УдержанияРаботниковОрганизации.БазовыйПериодКонец,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		УдержанияРаботниковОрганизации.Результат,
	|		УдержанияРаботниковОрганизации.Показатель1,
	|		УдержанияРаботниковОрганизации.Показатель2,
	|		УдержанияРаботниковОрганизации.Показатель3,
	|		УдержанияРаботниковОрганизации.Показатель4,
	|		УдержанияРаботниковОрганизации.Показатель5,
	|		УдержанияРаботниковОрганизации.Показатель6,
	|		УдержанияРаботниковОрганизации.ВидРасчета
	|	ИЗ
	|		РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
	|	ГДЕ
	|		УдержанияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И УдержанияРаботниковОрганизации.ОбособленноеПодразделение = &Организация
	|		И УдержанияРаботниковОрганизации.ФизЛицо = &Работник
	|		И (&ПоВсемРегистраторам
	|				ИЛИ УдержанияРаботниковОрганизации.Регистратор <> &Ссылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		3,
	|		НДФЛРасчетыСБюджетом.Регистратор,
	|		НДФЛРасчетыСБюджетом.ОбособленноеПодразделение,
	|		НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.Период, МЕСЯЦ),
	|		НДФЛРасчетыСБюджетом.ФизЛицо,
	|		NULL,
	|		""НДФЛ исчисленный "" + ВЫБОР
	|			КОГДА НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|				ТОГДА ""по ставке 13(30)%""
	|			КОГДА НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|				ТОГДА ""по дивидендам""
	|			ИНАЧЕ ""по ставке 35%""
	|		КОНЕЦ,
	|		""Б"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(ВЫБОР
	|				КОГДА НДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление)
	|					ТОГДА 1
	|				ИНАЧЕ -1
	|			КОНЕЦ * НДФЛРасчетыСБюджетом.Налог),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|	ГДЕ
	|		НДФЛРасчетыСБюджетом.ВидСтроки В (ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление), ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.ЗачетАвансовыхПлатежей))
	|		И НДФЛРасчетыСБюджетом.ИсчисленоИзЗарплаты
	|		И НДФЛРасчетыСБюджетом.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И НДФЛРасчетыСБюджетом.ОбособленноеПодразделение = &Организация
	|		И НДФЛРасчетыСБюджетом.ФизЛицо = &Работник
	|		И (&ПоВсемРегистраторам
	|				ИЛИ НДФЛРасчетыСБюджетом.Регистратор <> &Ссылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НДФЛРасчетыСБюджетом.ОбособленноеПодразделение,
	|		НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|		НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.Период, МЕСЯЦ),
	|		НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|		НДФЛРасчетыСБюджетом.ФизЛицо,
	|		НДФЛРасчетыСБюджетом.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		5,
	|		ПогашениеЗаймовРаботникамиОрганизаций.Регистратор,
	|		ПогашениеЗаймовРаботникамиОрганизаций.Организация,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		ПогашениеЗаймовРаботникамиОрганизаций.ФизЛицо,
	|		NULL,
	|		""Погашение займа"",
	|		""В"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(ПогашениеЗаймовРаботникамиОрганизаций.ОсновнойДолг + ПогашениеЗаймовРаботникамиОрганизаций.Проценты),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОрганизаций
	|	ГДЕ
	|		ПогашениеЗаймовРаботникамиОрганизаций.ВидДвижения = &Расход
	|		И ПогашениеЗаймовРаботникамиОрганизаций.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И ПогашениеЗаймовРаботникамиОрганизаций.УдержаноИзЗарплаты
	|		И ПогашениеЗаймовРаботникамиОрганизаций.Организация = &Организация
	|		И ПогашениеЗаймовРаботникамиОрганизаций.ФизЛицо = &Работник
	|		И (&ПоВсемРегистраторам
	|				ИЛИ ПогашениеЗаймовРаботникамиОрганизаций.Регистратор <> &Ссылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПогашениеЗаймовРаботникамиОрганизаций.ДоговорЗайма,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ),
	|		ПогашениеЗаймовРаботникамиОрганизаций.Организация,
	|		ПогашениеЗаймовРаботникамиОрганизаций.ФизЛицо,
	|		ПогашениеЗаймовРаботникамиОрганизаций.Регистратор,
	|		НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		8,
	|		Взаиморасчеты.Регистратор,
	|		Взаиморасчеты.Организация,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
	|		Взаиморасчеты.Физлицо,
	|		NULL,
	|		ВЫБОР
	|			КОГДА Взаиморасчеты.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|				ТОГДА ""Через кассу ""
	|			КОГДА Взаиморасчеты.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|				ТОГДА ""Перечислено в банк ""
	|			ИНАЧЕ ""Способ выплаты не указан ""
	|		КОНЕЦ + ВЫБОР
	|			КОГДА Взаиморасчеты.ХарактерВыплаты В (&Аванс)
	|				ТОГДА ""(аванс)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|				ТОГДА ""(под расчет)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПустаяСсылка)
	|					И Взаиморасчеты.СуммаВзаиморасчетов > 0
	|				ТОГДА ""(не указано)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПустаяСсылка)
	|					И Взаиморасчеты.СуммаВзаиморасчетов < 0
	|				ТОГДА ""(погашено задолженности)""
	|			ИНАЧЕ ""(межрасчет)""
	|		КОНЕЦ,
	|		""Г"",
	|		NULL,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		0,
	|		СУММА(Взаиморасчеты.СуммаВзаиморасчетов),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК Взаиморасчеты
	|	ГДЕ
	|		Взаиморасчеты.ВидДвижения = &Расход
	|		И Взаиморасчеты.СуммаВзаиморасчетов <> 0
	|		И Взаиморасчеты.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	|		И Взаиморасчеты.Организация = &Организация
	|		И Взаиморасчеты.Физлицо = &Работник
	|		И (&ПоВсемРегистраторам
	|				ИЛИ Взаиморасчеты.Регистратор <> &Ссылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Взаиморасчеты.Организация,
	|		Взаиморасчеты.Физлицо,
	|		ВЫБОР
	|			КОГДА Взаиморасчеты.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|				ТОГДА ""Через кассу ""
	|			КОГДА Взаиморасчеты.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|				ТОГДА ""Перечислено в банк ""
	|			ИНАЧЕ ""Способ выплаты не указан ""
	|		КОНЕЦ + ВЫБОР
	|			КОГДА Взаиморасчеты.ХарактерВыплаты В (&Аванс)
	|				ТОГДА ""(аванс)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|				ТОГДА ""(под расчет)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПустаяСсылка)
	|					И Взаиморасчеты.СуммаВзаиморасчетов > 0
	|				ТОГДА ""(не указано)""
	|			КОГДА Взаиморасчеты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПустаяСсылка)
	|					И Взаиморасчеты.СуммаВзаиморасчетов < 0
	|				ТОГДА ""(погашено задолженности)""
	|			ИНАЧЕ ""(межрасчет)""
	|		КОНЕЦ,
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.Период, МЕСЯЦ),
	|		НАЧАЛОПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		КОНЕЦПЕРИОДА(Взаиморасчеты.ПериодВзаиморасчетов, МЕСЯЦ),
	|		Взаиморасчеты.Регистратор) КАК НачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(Сальдо.СуммаВзаиморасчетовНачальныйОстаток) КАК СуммаВзаиморасчетовНачальныйОстаток,
	|			СУММА(Сальдо.СуммаВзаиморасчетовКонечныйОстаток) КАК СуммаВзаиморасчетовКонечныйОстаток
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
	|				ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток
	|			ИЗ
	|				РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.ОстаткиИОбороты(
	|						&ПериодРегистрации,
	|						&КонецПериодаРегистрации,
	|						Месяц,
	|						,
	|						Организация = &Организация
	|							И ФизЛицо = &Работник) КАК ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				НДФЛКЗачету.СуммаНДФЛКЗачетуНачальныйОстаток,
	|				НДФЛКЗачету.СуммаНДФЛКЗачетуКонечныйОстаток
	|			ИЗ
	|				РегистрНакопления.НДФЛКЗачету.ОстаткиИОбороты(
	|						&ПериодРегистрации,
	|						&КонецПериодаРегистрации,
	|						Месяц,
	|						,
	|						Организация = &Организация
	|							И ФизЛицо = &Работник) КАК НДФЛКЗачету) КАК Сальдо) КАК Сальдо
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДвижения,
	|	ПорядокВидаРасчета,
	|	ВидРасчета,
	|	ПериодДействияНачало";
	
	ЗапросРЛ.Текст		= ТекстЗапроса;
	РезультатЗапроса	= ЗапросРЛ.Выполнить();
	
	Макет						= ПолучитьМакет("РасчетныйЛисток");
	ОбластьЗаголовокТЧ			= Макет.ПолучитьОбласть("Заголовок");
	ОбластьНачисленоУдержано	= Макет.ПолучитьОбласть("НачисленоУдержано");
	ОбластьНатурДоходыВыплаты	= Макет.ПолучитьОбласть("НатурДоходыВыплаты");
	ОбластьВсего				= Макет.ПолучитьОбласть("Всего");
	ОбластьНатуральныеДоходы	= Макет.ПолучитьОбласть("НатуральныеДоходы");
	ОбластьПодвал				= Макет.ПолучитьОбласть("Подвал");
	
	КолонкаНачислено		= 2;
	КолонкаПериодНачислено	= 3;
	КолонкаОтработаноДней	= 5;
	КолонкаОтработаноЧасов	= 6;
	КолонкаОплаченоДней		= 7;
	КолонкаОплаченоЧасов	= 8;
	КолонкаСуммаНачислено	= 9;
	КолонкаУдержано			= 11;
	КолонкаПериодУдержано	= 14;
	КолонкаСуммаУдержано	= 16;
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	НеНайденыЗаписиВЗапросе	= Истина;
	
	// В этот табличный документ будет собираться данные для РЛ
	ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
	
	ФИОФизлица = Физлицо.Наименование;
	
	Если ДобавитьДанныеИзДокумента Тогда
		//к результату запроса необходимо добавить данные из табличных полей документа
		
		СтруктураПоиска    = Новый Структура("ФизЛицо",ФизЛицо);
		
		ТаблицаРезультатовЗапроса = РезультатЗапроса.Выгрузить();
		СуммаНаНачалоПериода = 0;
		СуммаНаКонецПериода = 0;
		
		Если ТаблицаРезультатовЗапроса.Количество()>0 Тогда
			СуммаНаНачалоПериода = ТаблицаРезультатовЗапроса[0].СуммаВзаиморасчетовНачальныйОстаток;
			Если НЕ ЗначениеЗаполнено(СуммаНаНачалоПериода) Тогда
				СуммаНаНачалоПериода = 0;
			КонецЕсли;
			СуммаНаКонецПериода = СуммаНаНачалоПериода;
		Иначе	
			ТЗ = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(Сальдо.СуммаВзаиморасчетовНачальныйОстаток) КАК СуммаВзаиморасчетовНачальныйОстаток,
			|	СУММА(Сальдо.СуммаВзаиморасчетовКонечныйОстаток) КАК СуммаВзаиморасчетовКонечныйОстаток
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
			|		ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток
			|	ИЗ
			|		РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.ОстаткиИОбороты(
			|				&ПериодРегистрации,
			|				&КонецПериодаРегистрации,
			|				,
			|				,
			|				Организация = &Организация
			|					И ФизЛицо = &Работник) КАК ВзаиморасчетыСРаботникамиОрганизацииОстаткиИОбороты
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		НДФЛКЗачету.СуммаНДФЛКЗачетуНачальныйОстаток,
			|		НДФЛКЗачету.СуммаНДФЛКЗачетуКонечныйОстаток
			|	ИЗ
			|		РегистрНакопления.НДФЛКЗачету.ОстаткиИОбороты(
			|				&ПериодРегистрации,
			|				&КонецПериодаРегистрации,
			|				,
			|				,
			|				Организация = &Организация
			|					И ФизЛицо = &Работник) КАК НДФЛКЗачету) КАК Сальдо";
			
			Запрос = Новый Запрос(ТЗ);
			Запрос.УстановитьПараметр("Работник", ФизЛицо);
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
			Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() тогда
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() тогда
					СуммаНаНачалоПериода = ?(Выборка.СуммаВзаиморасчетовНачальныйОстаток = NULL, 0, Выборка.СуммаВзаиморасчетовНачальныйОстаток);
					СуммаНаКонецПериода = ?(Выборка.СуммаВзаиморасчетовКонечныйОстаток = NULL, 0,  Выборка.СуммаВзаиморасчетовКонечныйОстаток);
					СуммаНаКонецПериода = ?(Проведен, СуммаНаНачалоПериода, СуммаНаКонецПериода);
				Иначе
					СуммаНаНачалоПериода = 0;
					СуммаНаКонецПериода = 0;
				КонецЕсли;
			Иначе
				СуммаНаНачалоПериода = 0;
				СуммаНаКонецПериода = 0;
			КонецЕсли;
		КонецЕсли;
		
		
		ТекстПериода = Формат(ПериодРегистрации, "ДФ = 'ММММ гггг ''г.'''");
		
		// Очистим временный табличный документ
		ВременныйТабличныйДокумент.Очистить();
		
		ВременныйТабличныйДокумент.Вывести(ОбластьЗаголовокТЧ);
		ВременныйТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
		
		ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВсегоНачисления = 0; КоличествоНачислений = 0;
		ВсегоУдержания = 0; КоличествоУдержаний  = 0;
		ИтогиНачисленийИУдержанийВыведены = Ложь;
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("парамФизЛицо", Физлицо);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ОсновныеНачисления.ДатаНачала,
		|	ОсновныеНачисления.ДатаОкончания,
		|	ОсновныеНачисления.Результат,
		|	ОсновныеНачисления.ОтработаноДней,
		|	ОсновныеНачисления.ОтработаноЧасов,
		|	ОсновныеНачисления.ОплаченоДнейЧасов,
		|	ОсновныеНачисления.Показатель1,
		|	ОсновныеНачисления.Показатель2,
		|	ОсновныеНачисления.Показатель3,
		|	ОсновныеНачисления.Показатель4,
		|	ОсновныеНачисления.Показатель5,
		|	ОсновныеНачисления.Показатель6,
		|	ОсновныеНачисления.ВидРасчета КАК ВидРасчетаСсылка
		|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
		|ИЗ
		|	&ОсновныеНачисления КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.Физлицо = &парамФизЛицо";
		
		Запрос.УстановитьПараметр("ОсновныеНачисления", Начисления);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДополнительныеНачисления.Сотрудник,
		|	ДополнительныеНачисления.ВидРасчета,
		|	ДополнительныеНачисления.ДатаНачала,
		|	ДополнительныеНачисления.ДатаОкончания,
		|	ДополнительныеНачисления.Результат,
		|	ДополнительныеНачисления.ОплаченоДнейЧасов,
		|	ДополнительныеНачисления.Показатель1,
		|	ДополнительныеНачисления.Показатель2,
		|	ДополнительныеНачисления.Показатель3,
		|	ДополнительныеНачисления.Показатель4,
		|	ДополнительныеНачисления.Показатель5,
		|	ДополнительныеНачисления.Показатель6,
		|	ДополнительныеНачисления.ВидРасчета КАК ВидРасчетаСсылка
		|ПОМЕСТИТЬ ВТ_ДополнительныеНачисления
		|ИЗ
		|	&ДополнительныеНачисления КАК ДополнительныеНачисления
		|ГДЕ
		|	ДополнительныеНачисления.Физлицо = &парамФизЛицо";
		
		Запрос.УстановитьПараметр("ДополнительныеНачисления", ДополнительныеНачисления);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДоговорыНаВыполнениеРабот.Сотрудник,
		|	ДоговорыНаВыполнениеРабот.ВидРасчета,
		|	ДоговорыНаВыполнениеРабот.ДатаНачала,
		|	ДоговорыНаВыполнениеРабот.ДатаОкончания,
		|	ДоговорыНаВыполнениеРабот.Результат
		|ПОМЕСТИТЬ ВТ_ДоговорыНаВыполнениеРабот
		|ИЗ
		|	&ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
		|ГДЕ
		|	ДоговорыНаВыполнениеРабот.Физлицо = &парамФизЛицо";
		
		Запрос.УстановитьПараметр("ДоговорыНаВыполнениеРабот", ДоговорыНаВыполнениеРабот);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Удержания.Физлицо,
		|	Удержания.ВидРасчета,
		|	Удержания.ДатаНачала,
		|	Удержания.ДатаОкончания,
		|	Удержания.Результат,
		|	Удержания.Показатель1,
		|	Удержания.Показатель2,
		|	Удержания.Показатель3,
		|	Удержания.Показатель4,
		|	Удержания.Показатель5,
		|	Удержания.Показатель6,
		|	Удержания.ВидРасчета КАК ВидРасчетаСсылка
		|ПОМЕСТИТЬ ВТ_Удержания
		|ИЗ
		|	&Удержания КАК Удержания
		|ГДЕ
		|	Удержания.Физлицо = &парамФизЛицо";
		
		Запрос.УстановитьПараметр("Удержания", Удержания);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НДФЛ.Физлицо,
		|	НДФЛ.Налог - НДФЛ.ЗачтеноАвансовыхПлатежей КАК Налог,
		|	НДФЛ.МесяцНалоговогоПериода
		|ПОМЕСТИТЬ ВТ_НДФЛ
		|ИЗ
		|	&НДФЛ КАК НДФЛ
		|ГДЕ
		|	НДФЛ.Физлицо = &парамФизЛицо";
		
		Запрос.УстановитьПараметр("НДФЛ", НДФЛ);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПогашениеЗаймов.Физлицо,
		|	ПогашениеЗаймов.ПогашеноЗайма,
		|	ПогашениеЗаймов.МатериальнаяВыгода,
		|	ПогашениеЗаймов.НалогНаМатериальнуюВыгоду,
		|	ПогашениеЗаймов.СтавкаНалогообложенияМатвыгоды
		|ПОМЕСТИТЬ ВТ_ПогашениеЗаймов
		|ИЗ
		|	&ПогашениеЗаймов КАК ПогашениеЗаймов
		|ГДЕ
		|	ПогашениеЗаймов.Физлицо = &парамФизЛицо";
		
		Запрос.УстановитьПараметр("ПогашениеЗаймов", ПогашениеЗаймов);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();

		
		ТекстЗапросаНачисления = 
		"ВЫБРАТЬ
		|	""Начисления"" КАК Таблица,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.Наименование, ""<не указано>"") КАК ВидРасчетаНаименование,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.Код, ""Я"") КАК ВидРасчетаКод,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме, ЛОЖЬ) КАК ЯвляетсяДоходомВНатуральнойФорме,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.СпособРасчета КАК ВидРасчетаСпособРасчета,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.ВидВремени,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			ТОГДА "" (по внутр. совмест-ву)""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ВидЗанятости,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ДатаОкончания,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Показатель1,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Показатель2,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Показатель3,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Показатель4,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Показатель5,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Показатель6,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчетаСсылка,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНачисления.Результат) КАК Результат,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНачисления.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНачисления.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНачисления.ОплаченоДнейЧасов) КАК ОплаченоДнейЧасов,
		|	NULL КАК МесяцНалоговогоПериода,
		|	NULL КАК ПогашеноЗайма,
		|	NULL КАК МатериальнаяВыгода,
		|	NULL КАК НалогНаМатериальнуюВыгоду,
		|	NULL КАК СтавкаНалогообложенияМатвыгоды
		|ИЗ
		|	ВТ_ОсновныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			ТОГДА "" (по внутр. совмест-ву)""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.СпособРасчета,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.ВидВремени,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.Код, ""Я""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме, ЛОЖЬ),
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Показатель1,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Показатель2,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Показатель3,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Показатель4,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Показатель5,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Показатель6,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчетаСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ДополнительныеНачисления"",
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.Код, ""Я""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме, ЛОЖЬ),
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.СпособРасчета,
		|	NULL,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			ТОГДА "" (по внутр. совмест-ву)""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ДатаОкончания,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Показатель1,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Показатель2,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Показатель3,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Показатель4,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Показатель5,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Показатель6,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчетаСсылка,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Результат),
		|	0,
		|	0,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ОплаченоДнейЧасов),
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ДатаОкончания,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.СпособРасчета,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			ТОГДА "" (по внутр. совмест-ву)""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме, ЛОЖЬ),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета.Код, ""Я""),
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Показатель1,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Показатель2,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Показатель3,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Показатель4,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Показатель5,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Показатель6,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчетаСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ДоговорыНаВыполнениеРабот"",
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.Код, ""Я""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме, ЛОЖЬ),
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.СпособРасчета,
		|	NULL,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			ТОГДА "" (по внутр. совмест-ву)""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ДатаОкончания,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Результат),
		|	0,
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_ДоговорыНаВыполнениеРабот КАК НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ДатаОкончания,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.СпособРасчета,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|			ТОГДА "" (по внутр. совмест-ву)""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме, ЛОЖЬ),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.ВидРасчета.Код, ""Я"")
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Удержания"",
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ФизЛицо,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчета,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчета.Код, ""Я""),
		|	ЛОЖЬ,
		|	NULL,
		|	NULL,
		|	NULL,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ДатаОкончания,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Показатель1,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Показатель2,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Показатель3,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Показатель4,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Показатель5,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Показатель6,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчетаСсылка,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийУдержания.Результат),
		|	0,
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_Удержания КАК НачислениеЗарплатыРаботникамОрганизацийУдержания
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ФизЛицо,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчета,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ДатаОкончания,
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчета.Наименование, ""<не указано>""),
		|	ЕСТЬNULL(НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчета.Код, ""Я""),
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Показатель1,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Показатель2,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Показатель3,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Показатель4,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Показатель5,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.Показатель6,
		|	НачислениеЗарплатыРаботникамОрганизацийУдержания.ВидРасчетаСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НДФЛ"",
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Налог,
		|	NULL,
		|	NULL,
		|	NULL,
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.МесяцНалоговогоПериода,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТ_НДФЛ КАК НачислениеЗарплатыРаботникамОрганизацийНДФЛ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ПогашениеЗаймов"",
		|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ФизЛицо,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ПогашеноЗайма),
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.МатериальнаяВыгода),
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.НалогНаМатериальнуюВыгоду),
		|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.СтавкаНалогообложенияМатвыгоды
		|ИЗ
		|	ВТ_ПогашениеЗаймов КАК НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.СтавкаНалогообложенияМатвыгоды,
		|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Таблица";
		
		
		Запрос.Текст = ТекстЗапросаНачисления;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("парамФизЛицо", Физлицо);
		
		ВыборкаЗапросаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Пока ВыборкаЗапросаПоСотрудникам.Следующий() Цикл
			
			Если ВыборкаЗапросаПоСотрудникам.Таблица = "Начисления" тогда
				
				ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаЗапросаПоСотрудникам.ВидРасчетаСпособРасчета, ВыборкаЗапросаПоСотрудникам.ВидРасчетаВидВремени, , ВыборкаЗапросаПоСотрудникам.ВидРасчетаСсылка.Показатели);
				
				СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
				
				СтрокаТаблицы.ВидДвижения			= ?(ВыборкаЗапросаПоСотрудникам.ЯвляетсяДоходомВНатуральнойФорме,6,1);
				СтрокаТаблицы.ВидРасчета			= ВыборкаЗапросаПоСотрудникам.ВидРасчетаНаименование + ВыборкаЗапросаПоСотрудникам.ВидЗанятости;
				СтрокаТаблицы.ПорядокВидаРасчета	= "А" + ВыборкаЗапросаПоСотрудникам.ВидРасчетаКод;
				СтрокаТаблицы.ПериодДействияНачало	= ВыборкаЗапросаПоСотрудникам.ДатаНачала;
				СтрокаТаблицы.ПериодДействияКонец	= КонецДня(ВыборкаЗапросаПоСотрудникам.ДатаОкончания);
				СтрокаТаблицы.ОтработаноДней		= ВыборкаЗапросаПоСотрудникам.ОтработаноДней;
				СтрокаТаблицы.ОтработаноЧасов		= ВыборкаЗапросаПоСотрудникам.ОтработаноЧасов;
				СтрокаТаблицы.ОплаченоДней			= ?(ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ВыборкаЗапросаПоСотрудникам.ОплаченоДнейЧасов, 0);
				СтрокаТаблицы.ОплаченоЧасов			= ?(ВидУчетаВремени <> Перечисления.ВидыУчетаВремени.ПоДням, ВыборкаЗапросаПоСотрудникам.ОплаченоДнейЧасов, 0);
				СтрокаТаблицы.Начисления			= ВыборкаЗапросаПоСотрудникам.Результат;
				СтрокаТаблицы.Удержания				= 0;
				СтрокаТаблицы.Регистратор			= Неопределено;
				СтрокаТаблицы.ВидРасчетаСсылка		= ВыборкаЗапросаПоСотрудникам.ВидРасчетаСсылка;
				СтрокаТаблицы.Показатель1			= ВыборкаЗапросаПоСотрудникам.Показатель1;
				СтрокаТаблицы.Показатель2			= ВыборкаЗапросаПоСотрудникам.Показатель2;
				СтрокаТаблицы.Показатель3			= ВыборкаЗапросаПоСотрудникам.Показатель3;
				СтрокаТаблицы.Показатель4			= ВыборкаЗапросаПоСотрудникам.Показатель4;
				СтрокаТаблицы.Показатель5			= ВыборкаЗапросаПоСотрудникам.Показатель5;
				СтрокаТаблицы.Показатель6			= ВыборкаЗапросаПоСотрудникам.Показатель6;
				
			ИначеЕсли ВыборкаЗапросаПоСотрудникам.Таблица = "ДополнительныеНачисления" тогда
				
				ВидУчетаВремени = ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаЗапросаПоСотрудникам.ВидРасчетаСпособРасчета, Неопределено);
				
				СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
				
				СтрокаТаблицы.ВидДвижения			= ?(ВыборкаЗапросаПоСотрудникам.ЯвляетсяДоходомВНатуральнойФорме,7,2);
				СтрокаТаблицы.ВидРасчета			= ВыборкаЗапросаПоСотрудникам.ВидРасчетаНаименование + ВыборкаЗапросаПоСотрудникам.ВидЗанятости;
				СтрокаТаблицы.ПорядокВидаРасчета	= "А" + ВыборкаЗапросаПоСотрудникам.ВидРасчетаКод;
				СтрокаТаблицы.ПериодДействияНачало	= ПериодРегистрации;
				СтрокаТаблицы.ПериодДействияКонец	= ПериодРегистрации;
				СтрокаТаблицы.ОтработаноДней		= 0;
				СтрокаТаблицы.ОтработаноЧасов		= 0;
				СтрокаТаблицы.ОплаченоДней			= ?(ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ВыборкаЗапросаПоСотрудникам.ОплаченоДнейЧасов, 0);
				СтрокаТаблицы.ОплаченоЧасов			= ?(ВидУчетаВремени <> Перечисления.ВидыУчетаВремени.ПоДням, ВыборкаЗапросаПоСотрудникам.ОплаченоДнейЧасов, 0);
				СтрокаТаблицы.Начисления			= ВыборкаЗапросаПоСотрудникам.Результат;
				СтрокаТаблицы.Удержания				= 0;
				СтрокаТаблицы.Регистратор			= Неопределено;
				СтрокаТаблицы.ВидРасчетаСсылка		= ВыборкаЗапросаПоСотрудникам.ВидРасчетаСсылка;
				СтрокаТаблицы.Показатель1			= ВыборкаЗапросаПоСотрудникам.Показатель1;
				СтрокаТаблицы.Показатель2			= ВыборкаЗапросаПоСотрудникам.Показатель2;
				СтрокаТаблицы.Показатель3			= ВыборкаЗапросаПоСотрудникам.Показатель3;
				СтрокаТаблицы.Показатель4			= ВыборкаЗапросаПоСотрудникам.Показатель4;
				СтрокаТаблицы.Показатель5			= ВыборкаЗапросаПоСотрудникам.Показатель5;
				СтрокаТаблицы.Показатель6			= ВыборкаЗапросаПоСотрудникам.Показатель6;
				
			ИначеЕсли ВыборкаЗапросаПоСотрудникам.Таблица = "ДоговорыНаВыполнениеРабот" тогда
				СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
				
				СтрокаТаблицы.ВидДвижения			= ?(ВыборкаЗапросаПоСотрудникам.ЯвляетсяДоходомВНатуральнойФорме,7,2);
				СтрокаТаблицы.ВидРасчета			= ВыборкаЗапросаПоСотрудникам.ВидРасчетаНаименование;
				СтрокаТаблицы.ПорядокВидаРасчета	= "А" + ВыборкаЗапросаПоСотрудникам.ВидРасчетаКод;
				СтрокаТаблицы.ПериодДействияНачало	= ВыборкаЗапросаПоСотрудникам.ДатаНачала;
				СтрокаТаблицы.ПериодДействияКонец	= КонецДня(ВыборкаЗапросаПоСотрудникам.ДатаОкончания);
				СтрокаТаблицы.ОтработаноДней		= 0;
				СтрокаТаблицы.ОтработаноЧасов		= 0;
				СтрокаТаблицы.ОплаченоДней			= 0;
				СтрокаТаблицы.ОплаченоЧасов			= 0;
				СтрокаТаблицы.Начисления			= ВыборкаЗапросаПоСотрудникам.Результат;
				СтрокаТаблицы.Удержания				= 0;
				СтрокаТаблицы.Регистратор			= Неопределено;
				
			ИначеЕсли ВыборкаЗапросаПоСотрудникам.Таблица = "НДФЛ" тогда
				
				СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
				
				СтрокаТаблицы.ВидДвижения			= 3;
				СтрокаТаблицы.ВидРасчета			= "НДФЛ исчисленный по ставке 13(30)%";
				СтрокаТаблицы.ПорядокВидаРасчета	= "Б";
				СтрокаТаблицы.ПериодДействияНачало	= ВыборкаЗапросаПоСотрудникам.МесяцНалоговогоПериода;
				СтрокаТаблицы.ПериодДействияКонец	= КонецДня(КонецМесяца(ВыборкаЗапросаПоСотрудникам.МесяцНалоговогоПериода));
				СтрокаТаблицы.ОтработаноДней		= 0;
				СтрокаТаблицы.ОтработаноЧасов		= 0;
				СтрокаТаблицы.ОплаченоДней			= 0;
				СтрокаТаблицы.ОплаченоЧасов			= 0;
				СтрокаТаблицы.Начисления			= 0;
				СтрокаТаблицы.Удержания				= ВыборкаЗапросаПоСотрудникам.Результат;
				СтрокаТаблицы.Регистратор			= Неопределено;
				
	
			ИначеЕсли ВыборкаЗапросаПоСотрудникам.Таблица = "Удержания" тогда
				
				СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
				
				СтрокаТаблицы.ВидДвижения			= 4;
				СтрокаТаблицы.ВидРасчета			= ВыборкаЗапросаПоСотрудникам.ВидРасчетаНаименование;
				СтрокаТаблицы.ПорядокВидаРасчета	= "А" + ВыборкаЗапросаПоСотрудникам.ВидРасчетаКод;
				СтрокаТаблицы.ПериодДействияНачало	= ВыборкаЗапросаПоСотрудникам.ДатаНачала;
				СтрокаТаблицы.ПериодДействияКонец	= КонецДня(ВыборкаЗапросаПоСотрудникам.ДатаОкончания);
				СтрокаТаблицы.ОтработаноДней		= 0;
				СтрокаТаблицы.ОтработаноЧасов		= 0;
				СтрокаТаблицы.ОплаченоДней			= 0;
				СтрокаТаблицы.ОплаченоЧасов			= 0;
				СтрокаТаблицы.Начисления			= 0;
				СтрокаТаблицы.Удержания				= ВыборкаЗапросаПоСотрудникам.Результат;
				СтрокаТаблицы.Регистратор			= Неопределено;		
				СтрокаТаблицы.ВидРасчетаСсылка		= ВыборкаЗапросаПоСотрудникам.ВидРасчетаСсылка;
				СтрокаТаблицы.Показатель1			= ВыборкаЗапросаПоСотрудникам.Показатель1;
				СтрокаТаблицы.Показатель2			= ВыборкаЗапросаПоСотрудникам.Показатель2;
				СтрокаТаблицы.Показатель3			= ВыборкаЗапросаПоСотрудникам.Показатель3;
				СтрокаТаблицы.Показатель4			= ВыборкаЗапросаПоСотрудникам.Показатель4;
				СтрокаТаблицы.Показатель5			= ВыборкаЗапросаПоСотрудникам.Показатель5;
				СтрокаТаблицы.Показатель6			= ВыборкаЗапросаПоСотрудникам.Показатель6;
				
			ИначеЕсли ВыборкаЗапросаПоСотрудникам.Таблица = "ПогашениеЗаймов" тогда
				Если ВыборкаЗапросаПоСотрудникам.МатериальнаяВыгода <> 0 Тогда
					
					СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
					
					СтрокаТаблицы.ВидДвижения			= 7;
					СтрокаТаблицы.ВидРасчета			= "Мат. выгода по займам (кредитам)";
					СтрокаТаблицы.ПорядокВидаРасчета	= "Б9";
					СтрокаТаблицы.ПериодДействияНачало	= ПериодРегистрации;
					СтрокаТаблицы.ПериодДействияКонец	= КонецДня(КонецМесяца(ПериодРегистрации));
					СтрокаТаблицы.ОтработаноДней		= 0;
					СтрокаТаблицы.ОтработаноЧасов		= 0;
					СтрокаТаблицы.ОплаченоДней			= 0;
					СтрокаТаблицы.ОплаченоЧасов			= 0;
					СтрокаТаблицы.Начисления			= ВыборкаЗапросаПоСотрудникам.МатериальнаяВыгода;
					СтрокаТаблицы.Удержания				= 0;
					СтрокаТаблицы.Регистратор			= Неопределено;
					
				КонецЕсли;
				
				СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
				
				СтрокаТаблицы.ВидДвижения			= 5;
				СтрокаТаблицы.ВидРасчета			= "Погашение займа";
				СтрокаТаблицы.ПорядокВидаРасчета	= "В";
				СтрокаТаблицы.ПериодДействияНачало	= ПериодРегистрации;
				СтрокаТаблицы.ПериодДействияКонец	= КонецДня(КонецМесяца(ПериодРегистрации));
				СтрокаТаблицы.ОтработаноДней		= 0;
				СтрокаТаблицы.ОтработаноЧасов		= 0;
				СтрокаТаблицы.ОплаченоДней			= 0;
				СтрокаТаблицы.ОплаченоЧасов			= 0;
				СтрокаТаблицы.Начисления			= 0;
				СтрокаТаблицы.Удержания				= ВыборкаЗапросаПоСотрудникам.ПогашеноЗайма;
				СтрокаТаблицы.Регистратор			= Неопределено;
				
				Если ВыборкаЗапросаПоСотрудникам.НалогНаМатериальнуюВыгоду <> 0 и ВыборкаЗапросаПоСотрудникам.СтавкаНалогообложенияМатвыгоды = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35 Тогда
					
					СтрокаТаблицы = ТаблицаРезультатовЗапроса.Добавить();
					
					СтрокаТаблицы.ВидДвижения			= 5;
					СтрокаТаблицы.ВидРасчета			= "НДФЛ исчисленный по ставке 35%";
					СтрокаТаблицы.ПорядокВидаРасчета	= "Б";
					СтрокаТаблицы.ПериодДействияНачало	= ПериодРегистрации;
					СтрокаТаблицы.ПериодДействияКонец	= КонецДня(КонецМесяца(ПериодРегистрации));
					СтрокаТаблицы.ОтработаноДней		= 0;
					СтрокаТаблицы.ОтработаноЧасов		= 0;
					СтрокаТаблицы.ОплаченоДней			= 0;
					СтрокаТаблицы.ОплаченоЧасов			= 0;
					СтрокаТаблицы.Начисления			= 0;
					СтрокаТаблицы.Удержания				= ВыборкаЗапросаПоСотрудникам.НалогНаМатериальнуюВыгоду;
					СтрокаТаблицы.Регистратор			= Неопределено;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		ТаблицаРезультатовЗапроса.Сортировать("ВидДвижения, ПорядокВидаРасчета, ВидРасчета, ПериодДействияНачало"); 
		
		Для Каждого СтрокаТаблицы Из ТаблицаРезультатовЗапроса Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДействияКонец) Тогда
				ДатаОкончанияПериода = СтрокаТаблицы.ПериодДействияКонец
			Иначе
				ДатаОкончанияПериода = КонецМесяца(СтрокаТаблицы.ПериодДействияНачало);
			КонецЕсли;
			
			Если СтрокаТаблицы.ВидДвижения < 3 Тогда
				НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = СтрокаТаблицы.ВидРасчета;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = ПримечаниеКСтрокеРасчетногоЛистка(СтрокаТаблицы, Истина);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(СтрокаТаблицы.ПериодДействияНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= СтрокаТаблицы.ОтработаноДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= СтрокаТаблицы.ОтработаноЧасов;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= СтрокаТаблицы.ОплаченоДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= СтрокаТаблицы.ОплаченоЧасов;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(СтрокаТаблицы.Начисления,"ЧЦ=15; ЧДЦ=2");
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;				
				
				КоличествоНачислений = КоличествоНачислений + 1;
				ВсегоНачисления = ВсегоНачисления + СтрокаТаблицы.Начисления;
				СуммаНаКонецПериода = СуммаНаКонецПериода + СтрокаТаблицы.Начисления;
				
			ИначеЕсли СтрокаТаблицы.ВидДвижения < 6 Тогда
				
				НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано).Примечание.Текст = ПримечаниеКСтрокеРасчетногоЛистка(СтрокаТаблицы, Ложь);
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = СтрокаТаблицы.ВидРасчета;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(СтрокаТаблицы.ПериодДействияНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(СтрокаТаблицы.Удержания,"ЧЦ=15; ЧДЦ=2");
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
				
				КоличествоУдержаний = КоличествоУдержаний + 1;
				ВсегоУдержания = ВсегоУдержания + СтрокаТаблицы.Удержания;
				СуммаНаКонецПериода = СуммаНаКонецПериода - СтрокаТаблицы.Удержания;
				
			Иначе
				
				// подведем итоги раздела начислений и удержаний
				// начнем раздел доходов в натуральной форме и выплат
				Если Не ИтогиНачисленийИУдержанийВыведены Тогда
					
					КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
					
					Если КолвоРасчетов > 0 Тогда
						РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
					КонецЕсли; 
					
					ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
					ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
					
					ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
					ИтогиНачисленийИУдержанийВыведены = Не ИтогиНачисленийИУдержанийВыведены;
					
					ВременныйТабличныйДокумент.Вывести(ОбластьНатурДоходыВыплаты);
					ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
					ВсегоНачисления = 0; КоличествоНачислений = 0;
					ВсегоУдержания = 0; КоличествоУдержаний  = 0;
					
				КонецЕсли;
				
				Если СтрокаТаблицы.ВидДвижения < 8 Тогда
					
					НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = СтрокаТаблицы.ВидРасчета;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = ПримечаниеКСтрокеРасчетногоЛистка(СтрокаТаблицы, Истина);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(СтрокаТаблицы.ПериодДействияНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= СтрокаТаблицы.ОтработаноДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= СтрокаТаблицы.ОтработаноЧасов;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= СтрокаТаблицы.ОплаченоДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= СтрокаТаблицы.ОплаченоЧасов;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(СтрокаТаблицы.Начисления,"ЧЦ=15; ЧДЦ=2");
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
					
					КоличествоНачислений = КоличествоНачислений + 1;
					ВсегоНачисления = ВсегоНачисления + СтрокаТаблицы.Начисления;
					//СуммаНаКонецПериода = СуммаНаКонецПериода + СтрокаТаблицы.Начисления;
					
				Иначе // остались выплаты
					
					НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = СтрокаТаблицы.ВидРасчета;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано).Примечание.Текст = ПримечаниеКСтрокеРасчетногоЛистка(СтрокаТаблицы, Ложь);
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(СтрокаТаблицы.ПериодДействияНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(СтрокаТаблицы.Удержания,"ЧЦ=15; ЧДЦ=2");
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
					
					КоличествоУдержаний = КоличествоУдержаний + 1;
					ВсегоУдержания = ВсегоУдержания + СтрокаТаблицы.Удержания;
					СуммаНаКонецПериода = СуммаНаКонецПериода - СтрокаТаблицы.Удержания;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// расчертим линиями низ расчетного листками
		КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
		
		Если КолвоРасчетов > 0 Тогда
			РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
		КонецЕсли;
		
		Если Не ИтогиНачисленийИУдержанийВыведены Тогда // есть только начисления и удержания
			ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
			
		ИначеЕсли КолвоРасчетов > 0 Тогда  // остались итоги по натуральным доходам и выплатам
			ОбластьНатуральныеДоходы.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьНатуральныеДоходы.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьНатуральныеДоходы);
			
		КонецЕсли;
		
		Если СуммаНаНачалоПериода >= 0  Тогда
			ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Долг за организацией на начало месяца: ");
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = СуммаНаНачалоПериода;
		Иначе
			ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за сотрудником на начало месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0 - СуммаНаНачалоПериода;
		КонецЕсли;
		
		Если СуммаНаКонецПериода >= 0  Тогда
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Долг за организацией на конец месяца: ");
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = СуммаНаКонецПериода;
		Иначе
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за сотрудником на конец месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0 - СуммаНаКонецПериода;
		КонецЕсли;
		
		ВременныйТабличныйДокумент.Вывести(ОбластьПодвал);
		
	Иначе //выводим в отчет только данные запроса
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 0 Тогда
			//нет данных в запросе
			Возврат ВременныйТабличныйДокумент;	
		КонецЕсли;
		
		ТекстПериода = Формат(ПериодРегистрации, "ДФ = 'ММММ гггг ''г.'''");
		
		// Очистим временный табличный документ
		ВременныйТабличныйДокумент.Очистить();
		
		ВременныйТабличныйДокумент.Вывести(ОбластьЗаголовокТЧ);
		ВременныйТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
		
		ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВсегоНачисления = 0; КоличествоНачислений = 0;
		ВсегоУдержания = 0; КоличествоУдержаний  = 0;
		ИтогиНачисленийИУдержанийВыведены = Ложь;
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ПериодДействияКонец) Тогда
				ДатаОкончанияПериода = Выборка.ПериодДействияКонец;
				
			Иначе
				ДатаОкончанияПериода = КонецМесяца(Выборка.ПериодДействияНачало);
				
			КонецЕсли;
			
			Если Выборка.ВидДвижения < 3 Тогда
				НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = Выборка.ВидРасчета;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = ПримечаниеКСтрокеРасчетногоЛистка(Выборка, Истина);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(Выборка.ПериодДействияНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= Выборка.ОтработаноДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= Выборка.ОтработаноЧасов;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= Выборка.ОплаченоДней;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= Выборка.ОплаченоЧасов;
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(Выборка.Начисления,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
				
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
				
				
				КоличествоНачислений = КоличествоНачислений + 1;
				ВсегоНачисления = ВсегоНачисления + Выборка.Начисления;
				
			ИначеЕсли Выборка.ВидДвижения < 6 Тогда
				
				НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = Выборка.ВидРасчета;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано).Примечание.Текст = ПримечаниеКСтрокеРасчетногоЛистка(Выборка, Ложь);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(Выборка.ПериодДействияНачало, ДатаОкончанияПериода);
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
				
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(Выборка.Удержания,"ЧЦ=15; ЧДЦ=2");
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;								
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
				ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
				
				КоличествоУдержаний = КоличествоУдержаний + 1;
				ВсегоУдержания = ВсегоУдержания + Выборка.Удержания;
				
			Иначе
				
				// подведем итоги раздела начислений и удержаний
				// начнем раздел доходов в натуральной форме и выплат
				Если Не ИтогиНачисленийИУдержанийВыведены Тогда
					
					КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
					
					Если КолвоРасчетов > 0 Тогда
						РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
					КонецЕсли;
					
					ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
					ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
					
					ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
					ИтогиНачисленийИУдержанийВыведены = Не ИтогиНачисленийИУдержанийВыведены;
					
					ВременныйТабличныйДокумент.Вывести(ОбластьНатурДоходыВыплаты);
					ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы + 1;
					ВсегоНачисления = 0; КоличествоНачислений = 0;
					ВсегоУдержания = 0; КоличествоУдержаний  = 0;
					
				КонецЕсли;
				
				Если Выборка.ВидДвижения < 8 Тогда
					
					НомерСтроки = ВысотаТаблицы + КоличествоНачислений;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Текст = Выборка.ВидРасчета;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).Примечание.Текст = ПримечаниеКСтрокеРасчетногоЛистка(Выборка, Истина);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(Выборка.ПериодДействияНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаПериодНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодНачислено, НомерСтроки, КолонкаОтработаноДней - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноДней).Текст	= Выборка.ОтработаноДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОтработаноЧасов).Текст	= Выборка.ОтработаноЧасов;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоДней).Текст		= Выборка.ОплаченоДней;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаОплаченоЧасов).Текст		= Выборка.ОплаченоЧасов;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).Текст = Формат(Выборка.Начисления,"ЧЦ=15; ЧДЦ=2");
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаСуммаНачислено).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаНачислено, НомерСтроки, КолонкаУдержано - 1).Объединить();
					
					КоличествоНачислений = КоличествоНачислений + 1;
					ВсегоНачисления = ВсегоНачисления + Выборка.Начисления;
					
				Иначе // остались выплаты
					
					НомерСтроки = ВысотаТаблицы + КоличествоУдержаний;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).Текст = Выборка.ВидРасчета;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано).Примечание.Текст = ПримечаниеКСтрокеРасчетногоЛистка(Выборка, Ложь);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаУдержано , НомерСтроки, КолонкаПериодУдержано - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).Текст = УправлениеОтчетамиЗК.ОписаниеПериода(Выборка.ПериодДействияНачало, ДатаОкончанияПериода);
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаПериодУдержано).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаПериодУдержано, НомерСтроки, КолонкаСуммаУдержано - 1).Объединить();
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).Текст = Формат(Выборка.Удержания,"ЧЦ=15; ЧДЦ=2");
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).Объединить();
					
					КоличествоУдержаний = КоличествоУдержаний + 1;
					ВсегоУдержания = ВсегоУдержания + Выборка.Удержания;
					
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСправа = Линия;
					ВременныйТабличныйДокумент.Область(НомерСтроки, КолонкаСуммаУдержано, НомерСтроки, КолонкаСуммаУдержано + 1).ГраницаСнизу = Линия;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Данные для подвала
		СуммаНаНачалоПериода = Выборка.СуммаВзаиморасчетовНачальныйОстаток;
		СуммаНаКонецПериода  = Выборка.СуммаВзаиморасчетовКонечныйОстаток;
		
		// расчертим линиями низ расчетного листками
		КолвоРасчетов = Макс(КоличествоНачислений,КоличествоУдержаний);
		
		Если КолвоРасчетов > 0 Тогда
			РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,ВысотаТаблицы,КолвоРасчетов)
		КонецЕсли;
		
		Если Не ИтогиНачисленийИУдержанийВыведены Тогда // есть только начисления и удержания
			ОбластьВсего.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьВсего.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
		ИначеЕсли КолвоРасчетов > 0 Тогда  // остались итоги по натуральным доходам и выплатам
			ОбластьНатуральныеДоходы.Параметры.ВсегоНачисления = ВсегоНачисления;
			ОбластьНатуральныеДоходы.Параметры.ВсегоУдержания  = ВсегоУдержания;
			ВременныйТабличныйДокумент.Вывести(ОбластьНатуральныеДоходы);
		КонецЕсли;
		
		Если СуммаНаНачалоПериода = NULL Тогда
			
			ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Долг за организацией на начало месяца: ");
			ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0;
			
		Иначе
			
			Если СуммаНаНачалоПериода >= 0  Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Долг за организацией на начало месяца: ");
				ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = СуммаНаНачалоПериода;
			Иначе
				ОбластьПодвал.Параметры.ТекстДолгНаНачалоПериода = "Долг за сотрудником на начало месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаНачалоПериода = 0 - СуммаНаНачалоПериода;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаНаКонецПериода = NULL Тогда
			
			ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за сотрудником на конец месяца: ";
			ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0;
			
		Иначе
			
			Если СуммаНаКонецПериода >= 0  Тогда
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Долг за организацией на конец месяца: ");
				ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = СуммаНаКонецПериода;
			Иначе
				ОбластьПодвал.Параметры.ТекстДолгНаКонецПериода = "Долг за сотрудником на конец месяца: ";
				ОбластьПодвал.Параметры.СуммаДолгНаКонецПериода  = 0 - СуммаНаКонецПериода;
			КонецЕсли;
			
		КонецЕсли;
		
		ВременныйТабличныйДокумент.Вывести(ОбластьПодвал);
		
	КонецЕсли;
	
	Возврат ВременныйТабличныйДокумент;
	
КонецФункции //ЗаполнитьТаблицуРасчетногоЛистка()

#КонецЕсли

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//	ПостроительЗапроса - построитель запроса, который используется для ограничения состава физлиц
//						 по которым выполняется заполнение документа
//
// Возвращаемое значение:
//	Логическое - удалось ли выполнить автоматическое заполнение документа
//
Функция Автозаполнение(Запрос = Неопределено) Экспорт
	
	Начисления.Очистить();
	ДополнительныеНачисления.Очистить();
	НДФЛ.Очистить();
	Удержания.Очистить();
	ПогашениеЗаймов.Очистить();
	ДоговорыНаВыполнениеРабот.Очистить();
	
	Возврат ВыполнитьАвтозаполнение(ПериодНачисленияДатаНачала, ПериодНачисленияДатаОкончания, Запрос);
	
КонецФункции // Автозаполнение()

Функция ПолучитьДокументыРасчетаЗаВесьМесяц() Экспорт

	Если ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
		 // проверим, можно ли произвести расчет - поищем "мешающие" документы
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("ПериодРегистрации",ПериодРегистрации);
		Запрос.УстановитьПараметр("СотрудникиОснНачислений", Начисления.ВыгрузитьКолонку("Сотрудник"));
		Запрос.УстановитьПараметр("СотрудникиДопНачислений", ДополнительныеНачисления.ВыгрузитьКолонку("Сотрудник"));
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка) КАК Представление
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации = &ПериодРегистрации
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодНачисленияЗарплаты.ТекущийМесяц)
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка <> &Ссылка
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен
		|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник В(&СотрудникиОснНачислений)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка)
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.ПериодРегистрации = &ПериодРегистрации
		|	И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.ПериодНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодНачисленияЗарплаты.ТекущийМесяц)
		|	И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка <> &Ссылка
		|	И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.Проведен
		|	И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник В(&СотрудникиДопНачислений)";

		Возврат Запрос.Выполнить().Выгрузить()
	Иначе
		Возврат Новый Массив
	КонецЕсли;
	
КонецФункции

// Заполняет документ-исправление по переданному списку сотрудников
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
	
	Если ТипЗнч(ПерерассчитываемыйДокумент) = Тип("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций") Тогда
		
		// выполним заполнение по всем табличным частям документа
		// и получим список сотрудников для перезаполнения
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		
		Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Если Сотрудники = "ПоДаннымПерерасчета" Тогда
			
			Исправления = ПроведениеРасчетов.ПолучитьДокументИсправление(ПерерассчитываемыйДокумент, "КритерийОтбора"); 
			Запрос.УстановитьПараметр("Исправления", Исправления);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудникиИсправлений
			|ИЗ
			|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
			|ГДЕ
			|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка В(&Исправления)
			|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.Сторно
			|	И НачислениеЗарплатыРаботникамОрганизацийНачисления.СторнируемыйДокумент = &ПерерассчитываемыйДокумент
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник
			|ИЗ
			|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
			|ГДЕ
			|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка В(&Исправления)
			|	И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сторно
			|	И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.СторнируемыйДокумент = &ПерерассчитываемыйДокумент
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сотрудник
			|ИЗ
			|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот
			|ГДЕ
			|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Ссылка В(&Исправления)
			|	И НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сторно
			|	И НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.СторнируемыйДокумент = &ПерерассчитываемыйДокумент
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";
			Запрос.Выполнить();
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиОрганизаций.Сотрудник,
			|	СотрудникиОрганизаций.Физлицо КАК Физлицо
			|ПОМЕСТИТЬ ВТФизлицаПерерасчета
			|ИЗ
			|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
			|	И СотрудникиОрганизаций.Физлицо В
			|			(ВЫБРАТЬ
			|				Перерасчет.ФизЛицо
			|			ИЗ
			|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
			|			ГДЕ
			|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент
			|		
			|			ОБЪЕДИНИТЬ ВСЕ
			|		
			|			ВЫБРАТЬ
			|				ЗаполнениеПлановыхНачислений.Сотрудник.Физлицо
			|			ИЗ
			|				РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
			|			ГДЕ
			|				ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &ПерерассчитываемыйДокумент)
			|	И (НЕ СотрудникиОрганизаций.Сотрудник В
			|				(ВЫБРАТЬ
			|					Начисления.Сотрудник
			|				ИЗ
			|					ВТСотрудникиИсправлений КАК Начисления))
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиОрганизаций.Сотрудник,
			|	СотрудникиОрганизаций.Физлицо
			|ИЗ
			|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
			|	И СотрудникиОрганизаций.Физлицо В
			|			(ВЫБРАТЬ
			|				Перерасчет.ФизЛицо
			|			ИЗ
			|				РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
			|			ГДЕ
			|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент
			|		
			|			ОБЪЕДИНИТЬ ВСЕ
			|		
			|			ВЫБРАТЬ
			|				ЗаполнениеПлановыхНачислений.Сотрудник.Физлицо
			|			ИЗ
			|				РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
			|			ГДЕ
			|				ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &ПерерассчитываемыйДокумент)
			|	И (НЕ СотрудникиОрганизаций.Сотрудник В
			|				(ВЫБРАТЬ
			|					Начисления.Сотрудник
			|				ИЗ
			|					ВТСотрудникиИсправлений КАК Начисления))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Физлицо";
			Запрос.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Сотрудник
			|ИЗ
			|	ВТФизлицаПерерасчета КАК СотрудникиОрганизаций";
			Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
			Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
			
		ИначеЕсли Сотрудники <> Неопределено Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиОрганизаций.Физлицо КАК Физлицо
			|ПОМЕСТИТЬ ВТФизлицаПерерасчета
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Физлицо";
			Запрос.Выполнить();
			
		Иначе 
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НЕОПРЕДЕЛЕНО КАК Физлицо
			|ПОМЕСТИТЬ ВТФизлицаПерерасчета";
			Запрос.Выполнить();
			
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.Физлицо,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	Начисления.ПодразделениеОрганизации,
		|	-Начисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0) КАК Результат,
		|	-Начисления.ДополнительныйРезультат - ЕСТЬNULL(СУММА(СторноНачисления.ДополнительныйРезультат), 0) КАК ДополнительныйРезультат,
		|	-Начисления.ОплаченоДнейЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОплаченоДнейЧасов), 0) КАК ОплаченоДнейЧасов,
		|	-Начисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0) КАК ОтработаноДней,
		|	-Начисления.ОтработаноЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасов), 0) КАК ОтработаноЧасов,
		|	-Начисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0) КАК ОтработаноДнейПоПятидневке,
		|	-Начисления.ОтработаноЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасовПоПятидневке), 0) КАК ОтработаноЧасовПоПятидневке,
		|	-Начисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0) КАК НормаДней,
		|	-Начисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0) КАК НормаЧасов,
		|	-Начисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0) КАК НормаДнейПоПятидневке,
		|	-Начисления.НормаЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасовПоПятидневке), 0) КАК НормаЧасовПоПятидневке,
		|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	Начисления.ДатаНачалаСобытия,
		|	ИСТИНА КАК Сторно,
		|	&ПерерассчитываемыйДокумент КАК СторнируемыйДокумент
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
		|		ПО Начисления.Сотрудник = СторноНачисления.Сотрудник
		|			И Начисления.ВидРасчета = СторноНачисления.ВидРасчета
		|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|			И (НАЧАЛОПЕРИОДА(СторноНачисления.ПериодДействияКонец, ДЕНЬ) МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|			И (СторноНачисления.ПериодРегистрации > Начисления.Ссылка.ПериодРегистрации)
		|			И (СторноНачисления.ПериодРегистрации <= &ПериодРегистрации)
		|			И (СторноНачисления.СторнируемыйДокумент = Начисления.Ссылка)
		|ГДЕ
		|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Начисления.Сторно)
		|	И (&ПоВсемСотрудникам
		|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
		|	И Начисления.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Сотрудник,
		|	Начисления.Физлицо,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	Начисления.ПодразделениеОрганизации,
		|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	Начисления.ДатаНачалаСобытия,
		|	Начисления.Результат,
		|	Начисления.ДополнительныйРезультат,
		|	Начисления.ОплаченоДнейЧасов,
		|	Начисления.ОтработаноДней,
		|	Начисления.ОтработаноЧасов,
		|	Начисления.ОтработаноДнейПоПятидневке,
		|	Начисления.ОтработаноЧасовПоПятидневке,
		|	Начисления.НормаДней,
		|	Начисления.НормаЧасов,
		|	Начисления.НормаДнейПоПятидневке,
		|	Начисления.НормаЧасовПоПятидневке";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Сотрудники = Новый Массив;
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
			Если Сотрудники.Найти(Выборка.Сотрудник) = Неопределено Тогда
				Сотрудники.Добавить(Выборка.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		// выполним запрос к ДополнительныеНачисления
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.Физлицо,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	-Начисления.Результат КАК Результат,
		|	Начисления.ПодразделениеОрганизации,
		|	Начисления.КодВычета,
		|	-Начисления.СуммаВычета КАК СуммаВычета,
		|	Начисления.СуммаВычета КАК ИсходнаяСуммаВычета,
		|	ИСТИНА КАК Сторно,
		|	&ПерерассчитываемыйДокумент КАК СторнируемыйДокумент,
		|	Начисления.ДатаНачалаСобытия,
		|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	-Начисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|	Начисления.КоличествоДетей
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
		|	И НЕ Начисления.Сторно
		|	И (&ПоВсемСотрудникам
		|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
		|	И Начисления.Ссылка.Проведен";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(ДополнительныеНачисления.Добавить(), Выборка);
			// обычная строка
			ОбычнаяСтрока = ДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(ОбычнаяСтрока,Выборка);
			ОбычнаяСтрока.Сторно = Ложь;
			ОбычнаяСтрока.Результат = -ОбычнаяСтрока.Результат;
			ОбычнаяСтрока.ОплаченоДнейЧасов = -ОбычнаяСтрока.ОплаченоДнейЧасов;
			ОбычнаяСтрока.СуммаВычета = Выборка.ИсходнаяСуммаВычета;
			ОбычнаяСтрока.СторнируемыйДокумент = Неопределено;
			Если Сотрудники.Найти(Выборка.Сотрудник) = Неопределено Тогда
				Сотрудники.Добавить(Выборка.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
		// выполним запрос к ДоговорыНаВыполнениеРабот
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДоговорыНаВыполнениеРабот.Сотрудник,
		|	ДоговорыНаВыполнениеРабот.Физлицо,
		|	ДоговорыНаВыполнениеРабот.ВидРасчета,
		|	ДоговорыНаВыполнениеРабот.ДатаНачала,
		|	ДоговорыНаВыполнениеРабот.ДатаОкончания,
		|	ДоговорыНаВыполнениеРабот.Размер,
		|	ДоговорыНаВыполнениеРабот.ПодразделениеОрганизации,
		|	ДоговорыНаВыполнениеРабот.КодВычета,
		|	-ДоговорыНаВыполнениеРабот.СуммаВычета КАК СуммаВычета,
		|	-ДоговорыНаВыполнениеРабот.Результат КАК Результат,
		|	ИСТИНА КАК Сторно,
		|	&ПерерассчитываемыйДокумент КАК СторнируемыйДокумент,
		|	ДоговорыНаВыполнениеРабот.ДокументОснование
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
		|ГДЕ
		|	ДоговорыНаВыполнениеРабот.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ ДоговорыНаВыполнениеРабот.Сторно)
		|	И (&ПоВсемСотрудникам
		|			ИЛИ Сотрудник В (&Сотрудники))
		|	И ДоговорыНаВыполнениеРабот.Ссылка.Проведен";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(ДоговорыНаВыполнениеРабот.Добавить(), Выборка);
			Если Сотрудники.Найти(Выборка.Сотрудник) = Неопределено Тогда
				Сотрудники.Добавить(Выборка.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
		// выполним запрос к ПогашениеЗаймов
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Займы.ФизЛицо,
		|	ИСТИНА КАК Сторно,
		|	Займы.ДоговорЗайма,
		|	Займы.СтавкаНалогообложенияМатвыгоды,
		|	Займы.ПодразделениеОрганизации,
		|	-Займы.НачисленоПроцентов КАК НачисленоПроцентов,
		|	-Займы.ПогашеноПроцентов КАК ПогашеноПроцентов,
		|	-Займы.ПогашеноЗайма КАК ПогашеноЗайма,
		|	-Займы.МатериальнаяВыгода КАК МатериальнаяВыгода,
		|	-Займы.НалогНаМатериальнуюВыгоду КАК НалогНаМатериальнуюВыгоду
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК Займы
		|ГДЕ
		|	Займы.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Займы.Сторно)
		|	И (&ПоВсемСотрудникам
		|			ИЛИ Займы.ФизЛицо В
		|				(ВЫБРАТЬ
		|					Физлица.Физлицо
		|				ИЗ
		|					ВТФизлицаПерерасчета КАК Физлица))
		|	И Займы.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Займы.ФизЛицо,
		|	ЛОЖЬ,
		|	Займы.ДоговорЗайма,
		|	Займы.СтавкаНалогообложенияМатвыгоды,
		|	Займы.ПодразделениеОрганизации,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК Займы
		|ГДЕ
		|	Займы.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ Займы.Сторно)
		|	И (&ПоВсемСотрудникам
		|			ИЛИ Займы.ФизЛицо В
		|				(ВЫБРАТЬ
		|					Физлица.Физлицо
		|				ИЗ
		|					ВТФизлицаПерерасчета КАК Физлица))
		|	И Займы.Ссылка.Проведен";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(ПогашениеЗаймов.Добавить(), Выборка);
		КонецЦикла;
		
		ЗапросПериод = Новый Запрос;
		ЗапросПериод.Текст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникамОрганизаций.ПериодНачисленияДатаНачала,
		|	НачислениеЗарплатыРаботникамОрганизаций.ПериодНачисленияДатаОкончания,
		|	НачислениеЗарплатыРаботникамОрганизаций.Организация,
		|	НачислениеЗарплатыРаботникамОрганизаций.ПодразделениеОрганизации,
		|	НачислениеЗарплатыРаботникамОрганизаций.ВидОперации
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка = &ПерерассчитываемыйДокумент";
		
		ЗапросПериод.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Выборка = ЗапросПериод.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПрошлыйПериод;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка);
		
	Иначе
		
		ЗапросПериод = Новый Запрос;
		ЗапросПериод.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации
		|ПОМЕСТИТЬ ВТПериод
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &ПерерассчитываемыйДокумент
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ)
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
		|ГДЕ
		|	ДополнительныеНачисленияРаботниковОрганизаций.Регистратор = &ПерерассчитываемыйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПереносДанных.Организация,
		|	ПрошлыйПериод.ПериодРегистрации КАК ПериодНачисленияДатаНачала,
		|	КОНЕЦПЕРИОДА(ПрошлыйПериод.ПериодРегистрации, МЕСЯЦ) КАК ПериодНачисленияДатаОкончания
		|ИЗ
		|	Документ.ПереносДанных КАК ПереносДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериод КАК ПрошлыйПериод
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ПереносДанных.Ссылка = &ПерерассчитываемыйДокумент";
		
		ЗапросПериод.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		Выборка = ЗапросПериод.Выполнить().Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка);
		ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет;
		ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПрошлыйПериод;

		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
		
		Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// временная таблица ВТФизлицаПерерасчета
		Если Сотрудники <> Неопределено Тогда
			
			ЗапросТекст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиОрганизаций.Физлицо КАК Физлицо
			|ПОМЕСТИТЬ ВТФизлицаПерерасчета
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Физлицо";
			
		Иначе 
			
			ЗапросТекст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НЕОПРЕДЕЛЕНО КАК Физлицо
			|ПОМЕСТИТЬ ВТФизлицаПерерасчета";
			
		КонецЕсли;
		Запрос.Текст = ЗапросТекст;
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ФизЛицо,
		|	Начисления.ВидРасчета,
		|	Начисления.ПериодДействияНачало КАК ДатаНачала,
		|	Начисления.ПериодДействияКонец КАК ДатаОкончания,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	Начисления.ПодразделениеОрганизации,
		|	-Начисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0) КАК Результат,
		|	-Начисления.ДополнительныйРезультат - ЕСТЬNULL(СУММА(СторноНачисления.ДополнительныйРезультат), 0) КАК ДополнительныйРезультат,
		|	-Начисления.ОплаченоДнейЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОплаченоДнейЧасов), 0) КАК ОплаченоДнейЧасов,
		|	-Начисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0) КАК ОтработаноДней,
		|	-Начисления.ОтработаноЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасов), 0) КАК ОтработаноЧасов,
		|	-Начисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0) КАК ОтработаноДнейПоПятидневке,
		|	-Начисления.ОтработаноЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасовПоПятидневке), 0) КАК ОтработаноЧасовПоПятидневке,
		|	-Начисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0) КАК НормаДней,
		|	-Начисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0) КАК НормаЧасов,
		|	-Начисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0) КАК НормаДнейПоПятидневке,
		|	-Начисления.НормаЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасовПоПятидневке), 0) КАК НормаЧасовПоПятидневке,
		|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	Начисления.ДатаНачалаСобытия,
		|	ИСТИНА КАК Сторно,
		|	Начисления.Регистратор КАК СторнируемыйДокумент
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
		|		ПО Начисления.Сотрудник = СторноНачисления.Сотрудник
		|			И Начисления.ВидРасчета = СторноНачисления.ВидРасчета
		|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
		|			И (СторноНачисления.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
		|			И (СторноНачисления.ПериодРегистрации > Начисления.ПериодРегистрации)
		|			И (СторноНачисления.ПериодРегистрации <= &ПериодРегистрации)
		|			И (СторноНачисления.СторнируемыйДокумент = Начисления.Регистратор)
		|ГДЕ
		|	Начисления.Регистратор = &ПерерассчитываемыйДокумент
		|	И (НЕ Начисления.Сторно)
		|	И (&ПоВсемСотрудникам
		|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Регистратор,
		|	Начисления.Сотрудник,
		|	Начисления.ФизЛицо,
		|	Начисления.ВидРасчета,
		|	Начисления.ПериодДействияНачало,
		|	Начисления.ПериодДействияКонец,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	Начисления.ПодразделениеОрганизации,
		|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	Начисления.ДатаНачалаСобытия,
		|	Начисления.Результат,
		|	Начисления.ДополнительныйРезультат,
		|	Начисления.ОплаченоДнейЧасов,
		|	Начисления.ОтработаноДней,
		|	Начисления.ОтработаноЧасов,
		|	Начисления.ОтработаноДнейПоПятидневке,
		|	Начисления.ОтработаноЧасовПоПятидневке,
		|	Начисления.НормаДней,
		|	Начисления.НормаЧасов,
		|	Начисления.НормаДнейПоПятидневке,
		|	Начисления.НормаЧасовПоПятидневке";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Сотрудники = Новый Массив;
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
			Если Сотрудники.Найти(Выборка.Сотрудник) = Неопределено Тогда
				Сотрудники.Добавить(Выборка.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Соответствие.КодВычета,
		|	Соответствие.КодДохода
		|ПОМЕСТИТЬ ВТСоответствиеДоходовИВычетов
		|ИЗ
		|	&ТаблицаСоответствияДоходовИВычетов КАК Соответствие";
		Запрос.УстановитьПараметр("ТаблицаСоответствияДоходовИВычетов",ПроведениеРасчетов.ПолучитьТаблицуСоответствияДоходовИВычетов());
		Запрос.Выполнить();
		
		// выполним запрос к ДополнительныеНачисления
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеНачисления.Регистратор КАК Регистратор,
		|	ДополнительныеНачисления.Сотрудник КАК Сотрудник,
		|	ДополнительныеНачисления.ФизЛицо,
		|	ДополнительныеНачисления.ВидРасчета КАК ВидРасчета,
		|	ДополнительныеНачисления.БазовыйПериодНачало КАК ДатаНачала,
		|	ДополнительныеНачисления.БазовыйПериодКонец КАК ДатаОкончания,
		|	ДополнительныеНачисления.Показатель1,
		|	ДополнительныеНачисления.Показатель2,
		|	ДополнительныеНачисления.Показатель3,
		|	ДополнительныеНачисления.Показатель4,
		|	ДополнительныеНачисления.Показатель5,
		|	ДополнительныеНачисления.Показатель6,
		|	ДополнительныеНачисления.ПодразделениеОрганизации,
		|	ДополнительныеНачисления.Результат,
		|	ДополнительныеНачисления.ОплаченоДнейЧасов,
		|	ДополнительныеНачисления.СкидкаПриНалогообложении КАК СуммаВычета,
		|	ДополнительныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ДополнительныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ДополнительныеНачисления.ДатаНачалаСобытия,
		|	ДополнительныеНачисления.ДокументОснование,
		|	ВЫБОР
		|		КОГДА ДополнительныеНачисления.ДокументОснование = ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|			ТОГДА СоответствиеДоходовИВычетов.КодВычета
		|		ИНАЧЕ ДополнительныеНачисления.ДокументОснование.КодВычета
		|	КОНЕЦ КАК КодВычета
		|ПОМЕСТИТЬ ВТСтрокиДополнительныхНачислений
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеДоходовИВычетов КАК СоответствиеДоходовИВычетов
		|		ПО ДополнительныеНачисления.ВидРасчета.КодДоходаНДФЛ = СоответствиеДоходовИВычетов.КодДохода
		|ГДЕ
		|	(НЕ ДополнительныеНачисления.Сторно)
		|	И ДополнительныеНачисления.Регистратор = &ПерерассчитываемыйДокумент
		|	И (&ПоВсемСотрудникам
		|			ИЛИ ДополнительныеНачисления.Сотрудник В (&Сотрудники))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета";
		Запрос.Выполнить();
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.Физлицо,
		|	Начисления.ВидРасчета,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Показатель1,
		|	Начисления.Показатель2,
		|	Начисления.Показатель3,
		|	Начисления.Показатель4,
		|	Начисления.Показатель5,
		|	Начисления.Показатель6,
		|	-Начисления.Результат КАК Результат,
		|	Начисления.ПодразделениеОрганизации,
		|	Начисления.КодВычета,
		|	 -Начисления.СуммаВычета
		|	 КАК СуммаВычета,
		|	Начисления.СуммаВычета КАК ИсходнаяСуммаВычета,
		|	ИСТИНА КАК Сторно,
		|	Начисления.Регистратор КАК СторнируемыйДокумент,
		|	Начисления.ДатаНачалаСобытия,
		|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	-Начисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов
		|ИЗ
		|	ВТСтрокиДополнительныхНачислений КАК Начисления
		|ГДЕ
		|	Начисления.ДокументОснование = ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(ДополнительныеНачисления.Добавить(), Выборка);
			// обычная строка
			ОбычнаяСтрока = ДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(ОбычнаяСтрока,Выборка);
			ОбычнаяСтрока.Сторно = Ложь;
			ОбычнаяСтрока.Результат = -ОбычнаяСтрока.Результат;
			ОбычнаяСтрока.ОплаченоДнейЧасов = -ОбычнаяСтрока.ОплаченоДнейЧасов;
			ОбычнаяСтрока.СуммаВычета = Выборка.ИсходнаяСуммаВычета;
			ОбычнаяСтрока.СторнируемыйДокумент = Неопределено;
			Если Сотрудники.Найти(Выборка.Сотрудник) = Неопределено Тогда
				Сотрудники.Добавить(Выборка.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
		// выполним запрос к ДоговорыНаВыполнениеРабот
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДоговорыНаВыполнениеРабот.Сотрудник,
		|	ДоговорыНаВыполнениеРабот.Физлицо,
		|	ДоговорыНаВыполнениеРабот.ВидРасчета,
		|	ДоговорыНаВыполнениеРабот.ДатаНачала,
		|	ДоговорыНаВыполнениеРабот.ДатаОкончания,
		|	ДоговорыНаВыполнениеРабот.Результат КАК Размер,
		|	ДоговорыНаВыполнениеРабот.ПодразделениеОрганизации,
		|	ДоговорыНаВыполнениеРабот.КодВычета,
		|	-ДоговорыНаВыполнениеРабот.СуммаВычета КАК СуммаВычета,
		|	-ДоговорыНаВыполнениеРабот.Результат КАК Результат,
		|	ИСТИНА КАК Сторно,
		|	ДоговорыНаВыполнениеРабот.Регистратор КАК СторнируемыйДокумент,
		|	ДоговорыНаВыполнениеРабот.ДокументОснование
		|ИЗ
		|	ВТСтрокиДополнительныхНачислений КАК ДоговорыНаВыполнениеРабот
		|ГДЕ
		|	ДоговорыНаВыполнениеРабот.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// сторно-строка
			ЗаполнитьЗначенияСвойств(ДоговорыНаВыполнениеРабот.Добавить(), Выборка);
			Если Сотрудники.Найти(Выборка.Сотрудник) = Неопределено Тогда
				Сотрудники.Добавить(Выборка.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ВыполнитьАвтозаполнение(ПериодНачисленияДатаНачала, ПериодНачисленияДатаОкончания, , Истина, , Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

// Процедура выполняет автозаполнение табличных частей только по переданным сотрудникам,
// остальные строки табличных частей документа остаются нетронутыми.
//
// Параметры: МассивСотрудников -  Массив сотрудников организации, по которым нужно сделать перезаполнение документа.
Процедура ВыполнитьПерезаполнениеДокумента(МассивСотрудников, МассивФизЛиц) Экспорт
	
	// сохраним табличные данные в таблицы значений
	ТаблицаНачисления = Начисления.Выгрузить();
	ТаблицаДополнительныеНачисления = ДополнительныеНачисления.Выгрузить();
	ТаблицаДоговорыНаВыполнениеРабот = ДоговорыНаВыполнениеРабот.Выгрузить();
	ТаблицаУдержания = Удержания.Выгрузить();
	ТаблицаНДФЛ = НДФЛ.Выгрузить();
	ТаблицаПогашениеЗаймов = ПогашениеЗаймов.Выгрузить();
	// Удалим из таблиц сотрудников которых нужно перезаполнить.
	
	// Удаляем из таблицы начисления
	ИндексСтроки = ТаблицаНачисления.Количество()-1;
	Пока ИндексСтроки >= 0 Цикл
		Если МассивСотрудников.Найти(ТаблицаНачисления[ИндексСтроки].Сотрудник) <> Неопределено Тогда
			ТаблицаНачисления.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Удаляем из таблицы дополнительные начисления
	ИндексСтроки = ТаблицаДополнительныеНачисления.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивСотрудников.Найти(ТаблицаДополнительныеНачисления[ИндексСтроки].Сотрудник) <> Неопределено Тогда
			ТаблицаДополнительныеНачисления.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Удаляем из таблицы договоры на выполнение работ
	ИндексСтроки = ТаблицаДоговорыНаВыполнениеРабот.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивСотрудников.Найти(ТаблицаДоговорыНаВыполнениеРабот[ИндексСтроки].Сотрудник) <> Неопределено Тогда
			ТаблицаДоговорыНаВыполнениеРабот.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Удаляем из таблицы Удержания.
	ИндексСтроки = ТаблицаУдержания.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивФизЛиц.Найти(ТаблицаУдержания[ИндексСтроки].ФизЛицо) <> Неопределено Тогда
			ТаблицаУдержания.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Удаляем из таблицы НДФЛ
	ИндексСтроки = ТаблицаНДФЛ.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивФизЛиц.Найти(ТаблицаНДФЛ[ИндексСтроки].ФизЛицо) <> Неопределено Тогда
			ТаблицаНДФЛ.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;

	// Удаляем из таблицы Погашение Займов
	ИндексСтроки = ТаблицаПогашениеЗаймов.Количество() - 1;
	Пока ИндексСтроки >=0 Цикл
		Если МассивФизЛиц.Найти(ТаблицаПогашениеЗаймов[ИндексСтроки].ФизЛицо) <> Неопределено Тогда
			ТаблицаПогашениеЗаймов.Удалить(ИндексСтроки);
		КонецЕсли;
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;

	//Очищаем таблицы документа
	Начисления.Очистить();
	ДополнительныеНачисления.Очистить();
	НДФЛ.Очистить();
	Удержания.Очистить();
	ПогашениеЗаймов.Очистить();
	
	// Выполняем автозаполенение и расчет
	ВыполнитьАвтоЗаполнение(ПериодНачисленияДатаНачала,ПериодНачисленияДатаОкончания,,,,МассивСотрудников);
	Записать();
	РассчитатьВсе();
	
	//Добавляем в документ сотрудников из временных таблиц значений
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаНачисления, Начисления);
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаДополнительныеНачисления, ДополнительныеНачисления);
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаНДФЛ, НДФЛ);
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаУдержания, Удержания);
	ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаПогашениеЗаймов, ПогашениеЗаймов);
	Если Проведен Тогда
		Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		Записать();
	КонецЕсли;
	
	// удалять записи о перезаполнении из регистра не будем - они были удалены при автозаполнении
	
КонецПроцедуры // ВыполнитьПерезаполнениеПоВыбраннымСотрудникам()

// Процедура рассчитывает ресурсы для начислений
// и заполняет реквизит Результат соотвтествующих табличных частей документа
//
Функция РассчитатьНачисления(ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоНачислениям = Неопределено, ВыборкаПоДопНачислениям = Неопределено, Физлицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	Перем ВалютаУпрУчета;
	Перем КурсВалютыУпрУчета;
	
	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	Если Физлицо = Неопределено Тогда
			// ИЗМЕНЕНИЕ: Измайлова Полина 08.11.2011 11:10 
		// ОПИСАНИЕ: используется всегда для исключения начислений по сдельным нарядам.
		//МассивИндексыСтрокНачисления = Неопределено;
		МассивИндексыСтрокНачисления = Новый Массив();
		МассивИндексыСтрокДополнительныеНачисления = Неопределено;
	Иначе
		МассивИндексыСтрокНачисления = Новый Массив();
		МассивИндексыСтрокДополнительныеНачисления = Новый Массив();
	КонецЕсли;

	Отказ = Ложь;
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		
		// Перечитаем объект и соберем данные для заполнения наборов записей регистров
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ВыборкаПоДопНачислениям = СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;

	
	// Создадим рабочие наборы записей
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
		
	НаборДопНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДопНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;
	
	ЗаписиДоходовНДФЛ = РегистрыНакопления.НДФЛСведенияОДоходах.СоздатьНаборЗаписей();
	ЗаписиДоходовНДФЛ.Отбор.Регистратор.Значение = Ссылка;
	
	// Если встретим почасовое отклонение, то записываем движения в регистр ВнутрисменноеВремяРаботниковОрганизаций
	НаборЗаписейРабочееВремя = РегистрыНакопления.ВнутрисменноеВремяРаботниковОрганизаций.СоздатьНаборЗаписей();	
	НаборЗаписейРабочееВремя.Отбор.Регистратор.Значение = Ссылка;

	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
			ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборЗаписейРабочееВремя);
			
			// ЗАКОММЕНТИРОВАНО: Измайлова Полина 08.11.2011 11:20  
			//Если НЕ (Физлицо = Неопределено)  Тогда
				МассивИндексыСтрокНачисления.Добавить(ВыборкаПоНачислениям.НомерСтроки-1);
				// ЗАКОММЕНТИРОВАНО: Измайлова Полина 08.11.2011 11:20  
			//КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	мСоответствиеДоходовИВычетов = СправкиПоНДФЛ.СоответствиеДоходовИМассивовВычетов(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации));
	Пока ВыборкаПоДопНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиДопНачисления(ВыборкаПоДопНачислениям, Отказ);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуДопНачислений(ВыборкаПоДопНачислениям, ВыборкаПоШапкеДокумента, НаборДопНачисления);
			
			Если НЕ Физлицо = Неопределено Тогда
				МассивИндексыСтрокДополнительныеНачисления.Добавить(ВыборкаПоДопНачислениям.НомерСтроки-1);
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда
		
		// Удаляем движения
		Для Каждого Набор Из Движения Цикл
			Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
				
				// Удаляем движения
				Набор.Очистить();
				Набор.Записать(Истина, Ложь, Истина, Ложь);
				
			ИначеЕсли ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") 
				или ТипЗнч(Набор)=Тип("РегистрНакопленияНаборЗаписей.ВнутрисменноеВремяРаботниковОрганизаций") 
				или ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.РасчетСреднегоЗаработка") Тогда
				
				// Удаляем движения
				Набор.Очистить();
				Набор.Записать();
				
			КонецЕсли;
		КонецЦикла;
		
		Возврат Не Отказ;
	КонецЕсли;
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("СторнируемыйДокумент");
	ТаблицаСторноЗаписей.Колонки.Регистратор.Имя = "СторнируемыйДокумент";
	ИндексПоследнейСтроки = ВыборкаПоШапкеДокумента.НачисленияКоличествоСтрок;
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		ДобавитьСтрокуСторно(НаборОсновныеНачисления, Начисления, СтрокаСторно);
		// ЗАКОММЕНТИРОВАНО: Измайлова Полина 08.11.2011 11:21  
		//Если Не Физлицо = Неопределено Тогда
			//добавим в массив строк новые строки сторно
			МассивИндексыСтрокНачисления.Добавить(ИндексПоследнейСтроки);
			//индекс начинается с нуля, а номер строки с 1
			ИндексПоследнейСтроки = ИндексПоследнейСтроки +1;
		// ЗАКОММЕНТИРОВАНО: Измайлова Полина 08.11.2011 11:21  
		//КонецЕсли;
	КонецЦикла;
	
	// Поддержка способа расчета ДоначислениеПоУправленческомуУчету
	СведенияОДоначислениях = Новый Соответствие;
	// категория начисления в которой встречены виды расчета со способом ДоначислениеПоУправленческомуУчету 
	КатегорияДоначисления = Неопределено;
	
	// нужен ли расчет Основных начислений при повторном расчете
	НеобходимРасчетОсновных = Истина;
	
	
	НачатьТранзакцию();
	
	НаборЗаписейРабочееВремя.Записать();
	
	// максимальное число циклов расчета доначислений
	ЧислоЦиклов = 4;
	Для Счетчик = 1 По ЧислоЦиклов Цикл
	
		Если НеобходимРасчетОсновных Тогда
			// рассчитываем записи
			// при этом передаем не только набор записей регистра расчета, но и набор записей регистра 
			// накопления со сведениями об отработанном времени
			Если НаборОсновныеНачисления.Количество() = 0 Тогда
				ПериодДействияПервый = ПериодРегистрации;
				ПериодДействияПоследний = ПериодРегистрации;
			Иначе
				ПериодДействияПервый = НеОпределено;
				ПериодДействияПоследний = НеОпределено;
				Для Каждого Строка Из НаборОсновныеНачисления Цикл
					ПериодДействияПервый = ?(ПериодДействияПервый = НеОпределено, 
											Строка.ПериодДействияНачало, 
											?(ПериодДействияПервый < Строка.ПериодДействияНачало, 
												ПериодДействияПервый, 
												Строка.ПериодДействияНачало));
					ПериодДействияПоследний = ?(ПериодДействияПоследний = НеОпределено, 
												Строка.ПериодДействияКонец, 
												?(ПериодДействияПоследний > Строка.ПериодДействияКонец, 
													ПериодДействияПоследний, 
													Строка.ПериодДействияКонец));
				КонецЦикла;
			КонецЕсли;
			ПроведениеРасчетовДополнительный.ПолучитьКурсВалютыУпрУчета(ПериодДействияПервый, ПериодДействияПоследний, ВалютаУпрУчета, КурсВалютыУпрУчета, Константы.ВалютаРегламентированногоУчета.Получить());
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, ЗаписиДоходовНДФЛ, НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, Начисления, Ложь, МассивИндексыСтрокНачисления, Физлицо, КомментироватьРасчет, , ?(Счетчик = 1, Ложь, Истина), КатегорияДоначисления, СведенияОДоначислениях, КурсВалютыУпрУчета);
			Если КатегорияДоначисления = Неопределено Тогда
				НеобходимРасчетОсновных = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// запишем результат расчета для расчета доп. начислений
		НаборОсновныеНачисления.Записать(Истина, Истина);
		
		Если Счетчик > 1 и НеобходимРасчетОсновных Тогда
			// если это повторный расчет и при этом выполняется расчет основных начислений
			// то не ограничиваем расчет доп. начислений определенной категорией
			ПроведениеРасчетовДополнительный.ПолучитьКурсВалютыУпрУчета(ПериодРегистрации, ПериодРегистрации, ВалютаУпрУчета, КурсВалютыУпрУчета, Константы.ВалютаРегламентированногоУчета.Получить());
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДопНачисления, ЗаписиДоходовНДФЛ, НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ДополнительныеНачисления, Ложь, МассивИндексыСтрокДополнительныеНачисления, Физлицо, КомментироватьРасчет, ,?(Счетчик = 1, Ложь, Истина), Неопределено, СведенияОДоначислениях, КурсВалютыУпрУчета);
		Иначе
			ПроведениеРасчетовДополнительный.ПолучитьКурсВалютыУпрУчета(ПериодРегистрации, ПериодРегистрации, ВалютаУпрУчета, КурсВалютыУпрУчета, Константы.ВалютаРегламентированногоУчета.Получить());
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДопНачисления, ЗаписиДоходовНДФЛ, НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ДополнительныеНачисления, Ложь, МассивИндексыСтрокДополнительныеНачисления, Физлицо, КомментироватьРасчет, ,?(Счетчик = 1, Ложь, Истина), КатегорияДоначисления, СведенияОДоначислениях, КурсВалютыУпрУчета);
		КонецЕсли;
		Если КатегорияДоначисления = Неопределено и Не НеобходимРасчетОсновных Тогда
			// не нашлось доначислений
			Прервать;
		КонецЕсли;
		
		ЗаписиДоходовНДФЛ.Очистить();
		ЗаписиДоходовНДФЛ.Записать();
		
		// проверка правильности доначислений
		Физлица = ПроведениеРасчетовДополнительный.ФизлицаТребующиеПересчета(СведенияОДоначислениях);
		Если Физлица.Количество() = 0 Тогда
			Прервать;
		Иначе
			// не "сошлись" данные по некоторым физлицам
			Если Счетчик = ЧислоЦиклов Тогда
				Для Каждого Элемент Из Физлица Цикл
					ОбщегоНазначенияЗК.ОшибкаРасчета("" + Элемент + ": Неточно выполнен расчет - не совпадают начисления по управленческому и регламентированному учету!");
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПроведениеРасчетов.СкорректироватьНормируемыеВычетыПоНДФЛ(ЭтотОбъект);	
	
	Если КомментироватьРасчет Тогда
		// Удаляем движения, но для комментирования расчета НДФЛ оставляем движения по начислениям
		Для Каждого Набор Из Движения Цикл
			
			Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
				
				Если ВидОперации <> Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
					
					// Удаляем движения
					Набор.Очистить();
					Набор.Записать(Истина, Ложь, Истина, Ложь);
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Набор)=Тип("РегистрНакопленияНаборЗаписей.ВнутрисменноеВремяРаботниковОрганизаций") 
				или ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.РасчетСреднегоЗаработка") Тогда
				
				// Удаляем движения
				Набор.Очистить();
				Набор.Записать();
				
			ИначеЕсли ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
				
				Если ВидОперации <> Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
					
					// Удаляем движения
					Набор.Очистить();
					Набор.Записать();
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		// Удаляем движения
		Для Каждого Набор Из Движения Цикл
			Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
				
				// Удаляем движения
				Набор.Очистить();
				Набор.Записать(Истина, Ложь, Истина, Ложь);
				
			ИначеЕсли ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") 
				или ТипЗнч(Набор)=Тип("РегистрНакопленияНаборЗаписей.ВнутрисменноеВремяРаботниковОрганизаций") 
				или ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.РасчетСреднегоЗаработка") Тогда
				
				// Удаляем движения
				Набор.Очистить();
				Набор.Записать();
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Не Отказ;
	
КонецФункции // РассчитатьНачисления()

// Процедура рассчитывает НДФЛ
// и заполняет реквизиты табличной части
//
Процедура РассчитатьНДФЛ(Физлицо = Неопределено, КомментироватьРасчет = Ложь, ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоНачислениям = Неопределено) Экспорт
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		// Получим реквизиты шапки из запроса
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	Если ВыборкаПоНачислениям = Неопределено Тогда
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, "");
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// сформируем и запишем доходы НДФЛ по начислениям документа
	НаборНДФЛСведенияОДоходах = РегистрыНакопления.НДФЛСведенияОДоходах.СоздатьНаборЗаписей();
	НаборНДФЛСведенияОДоходах.Отбор.Регистратор.Значение = Ссылка;
	НаборЗаписейСтандартныхВычетов = РегистрыНакопления.НДФЛПредоставленныеСтандартныеВычетыФизЛиц.СоздатьНаборЗаписей().ВыгрузитьКолонки();

	СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, НаборНДФЛСведенияОДоходах); // по начислениям
	СформироватьДоходыПоМатвыгодеПоЗаймам(ВыборкаПоШапкеДокумента, НаборНДФЛСведенияОДоходах); // матвыгода по заемным средствам
	ПроведениеРасчетов.СформироватьСоциальныеВычетыПоНДФЛ(ВыборкаПоШапкеДокумента, Физлицо, НаборЗаписейСтандартныхВычетов, , "ПриРасчете");	
	
	// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ
	Если НЕ (Физлицо = Неопределено) Тогда
		СписокФизлицТекст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &парамФизлицо
		|   И ФизическиеЛица.ПРГ_НеНачислятьНДФЛ = Ложь";  //Blik 130516 52405
		
		ДополнительныеПараметрыЗапросаНДФЛ  = Новый Структура;
		ДополнительныеПараметрыЗапросаНДФЛ.Вставить("парамФизлицо", Физлицо);
	Иначе
		СписокФизлицТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.Физлицо КАК Физлицо
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК Работники
		|
		|ГДЕ
		|	Работники.Ссылка = &парамРегистратор
		|   И Работники.ФизЛицо.ПРГ_НеНачислятьНДФЛ = Ложь"; //Blik 130516 52405
		
		ДополнительныеПараметрыЗапросаНДФЛ  = Неопределено;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	// запишем доходы НДФЛ по начислениям документа
	НаборНДФЛСведенияОДоходах.Записать();
		
	// получение результата НДФЛ по ставке 13 процентов
	// для него передается Организация, период и ссылка на регистратор
	ДанныеНДФЛ = ПроведениеРасчетов.ПолучитьДанныеНДФЛПоРегистратору(Неопределено, Неопределено, ПериодРегистрации, Организация, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, Ссылка, СписокФизлицТекст, ДополнительныеПараметрыЗапросаНДФЛ, Ложь, КомментироватьРасчет,,,,НаборЗаписейСтандартныхВычетов);
	Если ДанныеНДФЛ <> Неопределено Тогда
		Если НЕ (Физлицо = Неопределено) Тогда
			// считаем одно физлицо
			ФизлицаСписок = Новый СписокЗначений;
			ФизлицаСписок.Добавить(Физлицо);
		Иначе
			// считаем всех
			ФизлицаСписок = НеОпределено;
		КонецЕсли;
		ЗаполнитьНаборЗаписейПоДаннымНДФЛ(, ДанныеНДФЛ, ВыборкаПоШапкеДокумента, ,ФизлицаСписок);
	КонецЕсли;
	
	// Удаляем движения
	НаборНДФЛСведенияОДоходах.Очистить();
	// запишем доходы НДФЛ по начислениям документа
	НаборНДФЛСведенияОДоходах.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры  // РассчитатьНДФЛ

// Процедура рассчитывает проценты и сумму погашения займа
// и заполняет реквизиты табличной части
//
Процедура РассчитатьПогашениеЗаймов(Физлицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт 
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор",Ссылка);
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("парамКонецГода",КонецГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	Запрос.УстановитьПараметр("НачалоРасчетногоПериода",ПериодНачисленияДатаНачала);
	Запрос.УстановитьПараметр("КонецРасчетногоПериода",КонецДня(ПериодНачисленияДатаОкончания));
	Запрос.УстановитьПараметр("ДнейВГоду",(КонецГода(ПериодРегистрации) + 1 - НачалоГода(ПериодРегистрации)) / 86400);
	Запрос.УстановитьПараметр("СтавкаРезидента", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35));
	Запрос.УстановитьПараметр("СтавкаНеРезидента", ПроцедурыУправленияПерсоналом.ЗначениеСтавкиНДФЛСНерезидента());
	Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
	Запрос.УстановитьПараметр("ПоВсемФИзЛИцам", Не ЗначениеЗаполнено(Физлицо));

	// ВТПериодыПогашения
	// Описание
	// 1.из таблицы остатков и оборотов рег-ра ПогашениеЗаймовРаботникамиОрганизаций (выборка ПогашениеЗаймов)
	// выбираются дни, в которые были произведены какие-либо движения по займу - период движений определяет  
	// начало периода погашения (в течение которого остаток долга не изменяется) - поле ДатаС;
	// рассчитывается остаток основного долга на конец месяца (поле ОсновнойДолгНаКонецМесяца)
	// рассчитывается остаток непогашенных процентов на начало месяца (поле ПроцентыНачальныйОстаток)
	// 2.из основной таблицы того же рег-ра присоединяются даты окончания периодов погашения - поле ДатаПО  
	// 3.из договора займа выбираются его параметры: проценты, сумма займа (переведенная в валюту регламентированного учета),
	// флажок исчисления мат.выгоды и пр.
	// 4.из рег-ра сведений о ставке рефинансирования РФ выбираем дату, непосредственно предшествующую дате 
	// получения дохода в виде матвыгоды, т.е. дате начисления процентов или окончанию месяца для беспроцентных
	// займов (до 1.1.2008 - дате Договора займа)
	//
	//
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Работники.ФизЛицо КАК ФизЛицо,
	|	Работники.ДоговорЗайма КАК ДоговорЗайма,
	|	Работники.НомерСтроки,
	|	Работники.ПодразделениеОрганизации,
	|	Работники.СтавкаНалогообложенияМатвыгоды,
	|	Работники.Сторно,
	|	Работники.НачисленоПроцентов,
	|	Работники.ПогашеноПроцентов,
	|	Работники.ПогашеноЗайма,
	|	Работники.МатериальнаяВыгода,
	|	Работники.НалогНаМатериальнуюВыгоду,
	|	Работники.Ссылка.Организация
	|ПОМЕСТИТЬ ВТСписокФизлицДоговоров
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК Работники
	|ГДЕ
	|	Работники.Ссылка = &парамРегистратор
	|	И (&ПоВсемФИзЛИцам
	|			ИЛИ Работники.ФизЛицо В (&парамФизлицо))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ДоговорЗайма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДанные.ФизЛицо КАК ФизЛицо,
	|	ВсеДанные.Организация,
	|	ВсеДанные.Период,
	|	СУММА(ВсеДанные.ОсновнойДолгКонечныйОстаток) КАК ОсновнойДолгКонечныйОстаток,
	|	ВсеДанные.ОсновнойДолгРасход,
	|	СУММА(ВсеДанные.ПроцентыНачальныйОстаток) КАК ПроцентыНачальныйОстаток,
	|	СУММА(ВсеДанные.ПроцентыОборот) КАК ПроцентыОборот,
	|	СУММА(ВсеДанные.ПроцентыПриход) КАК ПроцентыПриход,
	|	СУММА(ВсеДанные.ПроцентыРасход) КАК ПроцентыРасход,
	|	ВсеДанные.ДоговорЗайма КАК ДоговорЗайма,
	|	ВсеДанные.ДоговорЗаймаДата,
	|	ВсеДанные.ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|	ВсеДанные.ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|	ВсеДанные.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|	ВсеДанные.ДоговорЗаймаПорядокПогашенияЗайма,
	|	ВсеДанные.ДоговорЗаймаСрокПогашения,
	|	ВсеДанные.ДоговорЗаймаНачалоПогашения,
	|	ВсеДанные.ДоговорЗаймаСуммаЗайма,
	|	ВсеДанные.ДоговорЗаймаВалютаДокумента,
	|	ВсеДанные.ДоговорЗаймаКурсДокумента,
	|	ВсеДанные.ДоговорЗаймаКратностьДокумента
	|ПОМЕСТИТЬ ВТОстаткиИОбороты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПогашениеЗаймов.ФизЛицо КАК ФизЛицо,
	|		ПогашениеЗаймов.Организация КАК Организация,
	|		ПогашениеЗаймов.Период КАК Период,
	|		ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток КАК ОсновнойДолгКонечныйОстаток,
	|		ПогашениеЗаймов.ОсновнойДолгРасход КАК ОсновнойДолгРасход,
	|		ПогашениеЗаймов.ПроцентыНачальныйОстаток КАК ПроцентыНачальныйОстаток,
	|		ПогашениеЗаймов.ПроцентыОборот КАК ПроцентыОборот,
	|		ПогашениеЗаймов.ПроцентыПриход КАК ПроцентыПриход,
	|		ПогашениеЗаймов.ПроцентыРасход КАК ПроцентыРасход,
	|		ПогашениеЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|		СведенияОЗаймах.ДатаДокумента КАК ДоговорЗаймаДата,
	|		СведенияОЗаймах.ПроцентЗаПользованиеЗаймом КАК ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|		СведенияОЗаймах.НачислятьМатериальнуюВыгоду КАК ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|		СведенияОЗаймах.СтавкаНалогообложенияРезидента КАК ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|		СведенияОЗаймах.ПорядокПогашенияЗайма КАК ДоговорЗаймаПорядокПогашенияЗайма,
	|		СведенияОЗаймах.СрокПогашения КАК ДоговорЗаймаСрокПогашения,
	|		СведенияОЗаймах.НачалоПогашения КАК ДоговорЗаймаНачалоПогашения,
	|		СведенияОЗаймах.СуммаЗайма КАК ДоговорЗаймаСуммаЗайма,
	|		СведенияОЗаймах.ВалютаДокумента КАК ДоговорЗаймаВалютаДокумента,
	|		СведенияОЗаймах.КурсДокумента КАК ДоговорЗаймаКурсДокумента,
	|		СведенияОЗаймах.КратностьДокумента КАК ДоговорЗаймаКратностьДокумента
	|	ИЗ
	|		РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций.ОстаткиИОбороты(
	|				&НачалоРасчетногоПериода,
	|				&КонецРасчетногоПериода,
	|				День,
	|				ДвиженияИГраницыПериода,
	|				Организация = &парамОрганизация
	|					И ДоговорЗайма В
	|						(ВЫБРАТЬ
	|							СписокДоговоров.ДоговорЗайма
	|						ИЗ
	|							ВТСписокФизлицДоговоров КАК СписокДоговоров)) КАК ПогашениеЗаймов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОЗаймах КАК СведенияОЗаймах
	|			ПО ПогашениеЗаймов.ДоговорЗайма = СведенияОЗаймах.ДоговорЗайма
	|				И ПогашениеЗаймов.ФизЛицо = СведенияОЗаймах.ФизЛицо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПогашениеЗаймов.ФизЛицо,
	|		ПогашениеЗаймов.Организация,
	|		&КонецРасчетногоПериода,
	|		-ПогашениеЗаймов.ПогашеноЗайма + ПогашениеЗаймов.ПогашеноПроцентов,
	|		0,
	|		0,
	|		ПогашениеЗаймов.НачисленоПроцентов - ПогашениеЗаймов.ПогашеноПроцентов,
	|		ПогашениеЗаймов.НачисленоПроцентов,
	|		ПогашениеЗаймов.ПогашеноПроцентов,
	|		ПогашениеЗаймов.ДоговорЗайма,
	|		СведенияОЗаймах.ДатаДокумента,
	|		СведенияОЗаймах.ПроцентЗаПользованиеЗаймом,
	|		СведенияОЗаймах.НачислятьМатериальнуюВыгоду,
	|		СведенияОЗаймах.СтавкаНалогообложенияРезидента,
	|		СведенияОЗаймах.ПорядокПогашенияЗайма,
	|		СведенияОЗаймах.СрокПогашения,
	|		СведенияОЗаймах.НачалоПогашения,
	|		СведенияОЗаймах.СуммаЗайма,
	|		СведенияОЗаймах.ВалютаДокумента,
	|		СведенияОЗаймах.КурсДокумента,
	|		СведенияОЗаймах.КратностьДокумента
	|	ИЗ
	|		ВТСписокФизлицДоговоров КАК ПогашениеЗаймов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОЗаймах КАК СведенияОЗаймах
	|			ПО ПогашениеЗаймов.ДоговорЗайма = СведенияОЗаймах.ДоговорЗайма
	|				И ПогашениеЗаймов.ФизЛицо = СведенияОЗаймах.ФизЛицо
	|	ГДЕ
	|		ПогашениеЗаймов.Сторно) КАК ВсеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеДанные.ФизЛицо,
	|	ВсеДанные.Организация,
	|	ВсеДанные.Период,
	|	ВсеДанные.ДоговорЗайма,
	|	ВсеДанные.ДоговорЗаймаДата,
	|	ВсеДанные.ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|	ВсеДанные.ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|	ВсеДанные.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|	ВсеДанные.ДоговорЗаймаПорядокПогашенияЗайма,
	|	ВсеДанные.ДоговорЗаймаСрокПогашения,
	|	ВсеДанные.ДоговорЗаймаНачалоПогашения,
	|	ВсеДанные.ДоговорЗаймаСуммаЗайма,
	|	ВсеДанные.ДоговорЗаймаВалютаДокумента,
	|	ВсеДанные.ДоговорЗаймаКурсДокумента,
	|	ВсеДанные.ДоговорЗаймаКратностьДокумента,
	|	ВсеДанные.ОсновнойДолгРасход
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВсеДанные.ОсновнойДолгКонечныйОстаток) <> 0
	|		ИЛИ СУММА(ВсеДанные.ПроцентыПриход) <> 0
	|		ИЛИ СУММА(ВсеДанные.ПроцентыОборот) <> 0
	|		ИЛИ СУММА(ВсеДанные.ПроцентыНачальныйОстаток) <> 0
	|		ИЛИ СУММА(ВсеДанные.ПроцентыРасход) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	ДоговорЗайма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыПогашения.ДатаС,
	|	ПериодыПогашения.ДатаПО,
	|	ПериодыПогашения.ФизЛицо КАК ФизЛицо,
	|	ПериодыПогашения.ДоговорЗайма,
	|	ПериодыПогашения.ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|	ПериодыПогашения.ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|	ПериодыПогашения.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|	ПериодыПогашения.ПорядокПогашенияЗайма,
	|	ПериодыПогашения.ДоговорЗаймаНачалоПогашения,
	|	ПериодыПогашения.ДоговорЗаймаСрокПогашения,
	|	ПериодыПогашения.СуммаЗайма,
	|	ПериодыПогашения.ОсновнойДолгКонечныйОстаток,
	|	ПериодыПогашения.ОсновнойДолгНаКонецМесяца,
	|	ПериодыПогашения.ОсновнойДолгРасход,
	|	ПериодыПогашения.ПроцентыПриход,
	|	ПериодыПогашения.ПроцентыРасход,
	|	ПериодыПогашения.ПроцентыОборот,
	|	ПериодыПогашения.ПроцентыНачальныйОстаток,
	|	МАКСИМУМ(СтавкаРефинансированияЦБ.Период) КАК ДатаСтавкиРефинансирования
	|ПОМЕСТИТЬ ВТПериодыПогашения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПогашениеЗаймов.Период КАК ДатаС,
	|		ВЫБОР
	|			КОГДА МИНИМУМ(НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, ДЕНЬ)) > &КонецРасчетногоПериода
	|					ИЛИ МИНИМУМ(НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, ДЕНЬ)) ЕСТЬ NULL 
	|				ТОГДА &КонецРасчетногоПериода
	|			ИНАЧЕ МИНИМУМ(НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, ДЕНЬ))
	|		КОНЕЦ КАК ДатаПО,
	|		ПогашениеЗаймов.ФизЛицо КАК ФизЛицо,
	|		ПогашениеЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|		ПогашениеЗаймов.ДоговорЗаймаДата КАК ДоговорЗаймаДата,
	|		ПогашениеЗаймов.ДоговорЗаймаПроцентЗаПользованиеЗаймом КАК ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|		ПогашениеЗаймов.ДоговорЗаймаНачислятьМатериальнуюВыгоду КАК ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|		ПогашениеЗаймов.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды КАК ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|		ПогашениеЗаймов.ДоговорЗаймаПорядокПогашенияЗайма КАК ПорядокПогашенияЗайма,
	|		ВЫБОР
	|			КОГДА ПогашениеЗаймов.ДоговорЗаймаНачалоПогашения < ПогашениеЗаймов.ДоговорЗаймаДата
	|				ТОГДА ПогашениеЗаймов.ДоговорЗаймаДата
	|			ИНАЧЕ ПогашениеЗаймов.ДоговорЗаймаНачалоПогашения
	|		КОНЕЦ КАК ДоговорЗаймаНачалоПогашения,
	|		ПогашениеЗаймов.ДоговорЗаймаСрокПогашения КАК ДоговорЗаймаСрокПогашения,
	|		ПогашениеЗаймов.ДоговорЗаймаСуммаЗайма * ВЫБОР
	|			КОГДА ПогашениеЗаймов.ДоговорЗаймаВалютаДокумента В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|				ТОГДА 1
	|			ИНАЧЕ ПогашениеЗаймов.ДоговорЗаймаКурсДокумента / ПогашениеЗаймов.ДоговорЗаймаКратностьДокумента
	|		КОНЕЦ КАК СуммаЗайма,
	|		ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток КАК ОсновнойДолгКонечныйОстаток,
	|		ВЫБОР
	|			КОГДА КОНЕЦПЕРИОДА(ПогашениеЗаймов.Период, ДЕНЬ) = &КонецРасчетногоПериода
	|				ТОГДА ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОсновнойДолгНаКонецМесяца,
	|		ПогашениеЗаймов.ПроцентыПриход КАК ПроцентыПриход,
	|		ПогашениеЗаймов.ПроцентыРасход КАК ПроцентыРасход,
	|		ПогашениеЗаймов.ПроцентыОборот КАК ПроцентыОборот,
	|		ВЫБОР
	|			КОГДА ПогашениеЗаймов.Период = &НачалоРасчетногоПериода
	|				ТОГДА ПогашениеЗаймов.ПроцентыНачальныйОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПроцентыНачальныйОстаток,
	|		ПогашениеЗаймов.ОсновнойДолгРасход КАК ОсновнойДолгРасход
	|	ИЗ
	|		ВТОстаткиИОбороты КАК ПогашениеЗаймов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОрганизаций
	|			ПО ПогашениеЗаймов.ФизЛицо = ПогашениеЗаймовРаботникамиОрганизаций.ФизЛицо
	|				И ПогашениеЗаймов.Организация = ПогашениеЗаймовРаботникамиОрганизаций.Организация
	|				И ПогашениеЗаймов.ДоговорЗайма = ПогашениеЗаймовРаботникамиОрганизаций.ДоговорЗайма
	|				И (ПогашениеЗаймов.Период < НАЧАЛОПЕРИОДА(ПогашениеЗаймовРаботникамиОрганизаций.Период, ДЕНЬ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПогашениеЗаймов.Период,
	|		ПогашениеЗаймов.ФизЛицо,
	|		ПогашениеЗаймов.ПроцентыНачальныйОстаток,
	|		ПогашениеЗаймов.ОсновнойДолгКонечныйОстаток,
	|		ПогашениеЗаймов.ПроцентыПриход,
	|		ПогашениеЗаймов.ДоговорЗайма,
	|		ПогашениеЗаймов.ПроцентыРасход,
	|		ПогашениеЗаймов.ПроцентыОборот,
	|		ПогашениеЗаймов.ДоговорЗаймаДата,
	|		ПогашениеЗаймов.ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|		ПогашениеЗаймов.ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|		ПогашениеЗаймов.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|		ПогашениеЗаймов.ДоговорЗаймаПорядокПогашенияЗайма,
	|		ПогашениеЗаймов.ДоговорЗаймаСрокПогашения,
	|		ПогашениеЗаймов.ОсновнойДолгРасход,
	|		ВЫБОР
	|			КОГДА ПогашениеЗаймов.ДоговорЗаймаНачалоПогашения < ПогашениеЗаймов.ДоговорЗаймаДата
	|				ТОГДА ПогашениеЗаймов.ДоговорЗаймаДата
	|			ИНАЧЕ ПогашениеЗаймов.ДоговорЗаймаНачалоПогашения
	|		КОНЕЦ,
	|		ПогашениеЗаймов.ДоговорЗаймаСуммаЗайма * ВЫБОР
	|			КОГДА ПогашениеЗаймов.ДоговорЗаймаВалютаДокумента В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|				ТОГДА 1
	|			ИНАЧЕ ПогашениеЗаймов.ДоговорЗаймаКурсДокумента / ПогашениеЗаймов.ДоговорЗаймаКратностьДокумента
	|		КОНЕЦ) КАК ПериодыПогашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкаРефинансированияЦБ КАК СтавкаРефинансированияЦБ
	|		ПО (ВЫБОР
	|				КОГДА ГОД(ПериодыПогашения.ДатаС) < 2008
	|					ТОГДА ПериодыПогашения.ДоговорЗаймаДата
	|				КОГДА ПериодыПогашения.ПроцентыПриход > 0
	|					ТОГДА ПериодыПогашения.ДатаПО
	|				КОГДА ПериодыПогашения.ОсновнойДолгНаКонецМесяца = 0
	|					ТОГДА ПериодыПогашения.ДатаПО
	|				ИНАЧЕ &КонецРасчетногоПериода
	|			КОНЕЦ >= СтавкаРефинансированияЦБ.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПогашения.ДатаС,
	|	ПериодыПогашения.ДатаПО,
	|	ПериодыПогашения.ФизЛицо,
	|	ПериодыПогашения.ДоговорЗайма,
	|	ПериодыПогашения.ДоговорЗаймаПроцентЗаПользованиеЗаймом,
	|	ПериодыПогашения.ДоговорЗаймаНачислятьМатериальнуюВыгоду,
	|	ПериодыПогашения.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|	ПериодыПогашения.ПорядокПогашенияЗайма,
	|	ПериодыПогашения.ДоговорЗаймаНачалоПогашения,
	|	ПериодыПогашения.ДоговорЗаймаСрокПогашения,
	|	ПериодыПогашения.СуммаЗайма,
	|	ПериодыПогашения.ОсновнойДолгКонечныйОстаток,
	|	ПериодыПогашения.ОсновнойДолгНаКонецМесяца,
	|	ПериодыПогашения.ПроцентыПриход,
	|	ПериодыПогашения.ПроцентыРасход,
	|	ПериодыПогашения.ПроцентыОборот,
	|	ПериодыПогашения.ПроцентыНачальныйОстаток,
	|	ПериодыПогашения.ОсновнойДолгРасход
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	Запрос.Выполнить();
	
	// Основной текст запроса
	// 1. Выборка ДанныеОПогашении
	//  поле ПогашатьЗаймВЭтомМесяце - Определяем, нужно ли погашать займ по условиям договора в текущем месяце
	//  поле ПогашеноЗайма - Рассчитывается сумма займа к погашению: как месячная доля займа или 
	//                       остаток по основному долгу на конец месяца - по условиям договора
	//  поля ПроцентыПриход и ПроцентыРасход - Суммируются начисленные и погашенные проценты по займу за месяц
	//  поле ПроцентыНачальныйОстаток - остаток непогашенных процентов на начало месяца, также будет предложен у погашению
	//  поле НачисленоПроцентов - Рассчитывается сумма процентов к начислению за месяц (по ежедневным 
	//      остаткам основного долга) как сумма по всем периодам из таблицы ПериодыПогашения начисленных по 
	//      следующей формуле процентов: 
	//            %% к начислению за период = кадендарных дней в периоде / кадендарных дней в году * процент по займу
	//  поле ПоСтавкеРефинансирования - Рассчитывается сумма процентов за месяц по ставке рефинансирования ЦБ РФ
	//        на дату Договора займа
	//  поле СтавкаНДФЛ - определяется ставка налогообложения мат.выгоды по займу налогом на доходы физлиц
	// 2. В основной выборке рассчитываются все показатели т.ч. документа
	//  поле НачисленоПроцентов - доначисляются проценты за пользование займом
	//  поле ПогашеноПроцентов - если займ в текущем месяце погашается, предлагается остаток %% с учетом начисленных за месяц
	//  поле ПогашеноЗайма - если займ в текущем месяце погашается, предлагается рассчитанная ранее сумма к 
	//                       погашению основного долга + сумма погашаемых %%
	//  поля МатериальнаяВыгода и НалогНаМатериальнуюВыгоду содержат соответственно сумму дохода и НДФЛ
	//

	ТекстОстаткиЗаймов = 
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ФизЛицо,
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ПодразделениеОрганизации,
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ДоговорЗайма,
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.СтавкаНалогообложенияМатвыгоды,
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сторно
	|			ТОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.НачисленоПроцентов
	|		КОГДА ДанныеОПогашении.НачисленоПроцентов > ДанныеОПогашении.ПроцентыПриход
	|			ТОГДА ДанныеОПогашении.НачисленоПроцентов - ДанныеОПогашении.ПроцентыПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоПроцентов,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сторно
	|			ТОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ПогашеноПроцентов
	|		КОГДА ДанныеОПогашении.ПогашатьЗаймВЭтомМесяце
	|			ТОГДА ДанныеОПогашении.НачисленоПроцентов + ДанныеОПогашении.ПроцентыНачальныйОстаток - ДанныеОПогашении.ПроцентыРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПогашеноПроцентов,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сторно
	|			ТОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ПогашеноЗайма
	|		КОГДА ДанныеОПогашении.ПогашатьЗаймВЭтомМесяце
	|			ТОГДА ДанныеОПогашении.ПогашеноЗайма + ДанныеОПогашении.НачисленоПроцентов + ДанныеОПогашении.ПроцентыНачальныйОстаток - ДанныеОПогашении.ПроцентыРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПогашеноЗайма,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сторно
	|			ТОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.МатериальнаяВыгода
	|		КОГДА ДанныеОПогашении.ПоСтавкеРефинансирования > ДанныеОПогашении.НачисленоПроцентов
	|			ТОГДА ДанныеОПогашении.ПоСтавкеРефинансирования - ДанныеОПогашении.НачисленоПроцентов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МатериальнаяВыгода,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сторно
	|			ТОГДА НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.НалогНаМатериальнуюВыгоду
	|		КОГДА ДанныеОПогашении.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ДанныеОПогашении.ПоСтавкеРефинансирования > ДанныеОПогашении.НачисленоПроцентов
	|							ТОГДА ДанныеОПогашении.ПоСтавкеРефинансирования - ДанныеОПогашении.НачисленоПроцентов
	|						ИНАЧЕ 0
	|					КОНЕЦ * ДанныеОПогашении.СтавкаНДФЛ / 100 КАК ЧИСЛО(13, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НалогНаМатериальнуюВыгоду,
	|	НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сторно,
	|	НЕОПРЕДЕЛЕНО КАК ПоляКомментированияОсновногоЗапроса
	|ИЗ
	|	ВТСписокФизлицДоговоров КАК НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПериодыПогашения.ФизЛицо КАК ФизЛицо,
	|			ПериодыПогашения.ДоговорЗайма КАК ДоговорЗайма,
	|			ПериодыПогашения.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды КАК ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|			ВЫБОР
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияЗаймаПроцентов.ПоОкончанииСрока)
	|						И &КонецРасчетногоПериода >= ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДоговорЗаймаНачалоПогашения, МЕСЯЦ, ПериодыПогашения.ДоговорЗаймаСрокПогашения)
	|					ТОГДА ИСТИНА
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияЗаймаПроцентов.ПоОкончанииСрока)
	|						И &КонецРасчетногоПериода >= ПериодыПогашения.ДоговорЗаймаНачалоПогашения
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ПогашатьЗаймВЭтомМесяце,
	|			ВЫБОР
	|				КОГДА ПериодыПогашения.ПорядокПогашенияЗайма = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияЗаймаПроцентов.ПоОкончанииСрока)
	|					ТОГДА МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца)
	|				КОГДА ПериодыПогашения.СуммаЗайма / ПериодыПогашения.ДоговорЗаймаСрокПогашения > МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца)
	|					ТОГДА МАКСИМУМ(ПериодыПогашения.ОсновнойДолгНаКонецМесяца)
	|				ИНАЧЕ ПериодыПогашения.СуммаЗайма / ПериодыПогашения.ДоговорЗаймаСрокПогашения
	|			КОНЕЦ КАК ПогашеноЗайма,
	|			СУММА(ПериодыПогашения.ПроцентыНачальныйОстаток) КАК ПроцентыНачальныйОстаток,
	|			СУММА(ПериодыПогашения.ПроцентыПриход) КАК ПроцентыПриход,
	|			СУММА(ПериодыПогашения.ПроцентыРасход) КАК ПроцентыРасход,
	|			СУММА(ВЫРАЗИТЬ(ПериодыПогашения.ОсновнойДолгКонечныйОстаток * РАЗНОСТЬДАТ(ВЫБОР
	|							КОГДА ПериодыПогашения.ОсновнойДолгКонечныйОстаток > 0
	|									И ПериодыПогашения.ДатаС = &НачалоРасчетногоПериода
	|								ТОГДА ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДатаС, ДЕНЬ, -1)
	|							ИНАЧЕ ПериодыПогашения.ДатаС
	|						КОНЕЦ, ВЫБОР
	|							КОГДА ПериодыПогашения.ДатаПО > &КонецРасчетногоПериода
	|									ИЛИ ПериодыПогашения.ДатаПО ЕСТЬ NULL 
	|								ТОГДА &КонецРасчетногоПериода
	|							ИНАЧЕ ПериодыПогашения.ДатаПО
	|						КОНЕЦ, ДЕНЬ) / &ДнейВГоду * ПериодыПогашения.ДоговорЗаймаПроцентЗаПользованиеЗаймом / 100 КАК ЧИСЛО(15, 2))) КАК НачисленоПроцентов,
	|			СУММА(ВЫБОР
	|					КОГДА ПериодыПогашения.ДоговорЗаймаНачислятьМатериальнуюВыгоду
	|						ТОГДА ВЫРАЗИТЬ(ПериодыПогашения.ОсновнойДолгКонечныйОстаток * РАЗНОСТЬДАТ(ВЫБОР
	|										КОГДА ПериодыПогашения.ОсновнойДолгКонечныйОстаток > 0
	|												И ПериодыПогашения.ДатаС = &НачалоРасчетногоПериода
	|											ТОГДА ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДатаС, ДЕНЬ, -1)
	|										ИНАЧЕ ПериодыПогашения.ДатаС
	|									КОНЕЦ, ВЫБОР
	|										КОГДА ПериодыПогашения.ДатаПО > &КонецРасчетногоПериода
	|												ИЛИ ПериодыПогашения.ДатаПО ЕСТЬ NULL 
	|											ТОГДА &КонецРасчетногоПериода
	|										ИНАЧЕ ПериодыПогашения.ДатаПО
	|									КОНЕЦ, ДЕНЬ) / &ДнейВГоду * СтавкаРефинансированияЦБ.Размер * ВЫБОР
	|									КОГДА ГОД(ПериодыПогашения.ДатаС) < 2009
	|										ТОГДА ВЫРАЗИТЬ(3 / 4 КАК ЧИСЛО(15, 12))
	|									ИНАЧЕ ВЫРАЗИТЬ(2 / 3 КАК ЧИСЛО(15, 12))
	|								КОНЕЦ / 100 КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ПоСтавкеРефинансирования,
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(СтатусФизЛица.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|					ТОГДА &СтавкаРезидента
	|				ИНАЧЕ &СтавкаНеРезидента
	|			КОНЕЦ КАК СтавкаНДФЛ,
	|			НЕОПРЕДЕЛЕНО КАК ПоляКомментированияВложенногоЗапроса
	|		ИЗ
	|			ВТПериодыПогашения КАК ПериодыПогашения
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкаРефинансированияЦБ КАК СтавкаРефинансированияЦБ
	|				ПО ПериодыПогашения.ДатаСтавкиРефинансирования = СтавкаРефинансированияЦБ.Период
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СрезПоследних(
	|						&КонецРасчетногоПериода,
	|						ФизЛицо В
	|							(ВЫБРАТЬ
	|								СписокФизлиц.ФизЛицо
	|							ИЗ
	|								ВТСписокФизлицДоговоров КАК СписокФизлиц)) КАК СтатусФизЛица
	|				ПО ПериодыПогашения.ФизЛицо = СтатусФизЛица.ФизЛицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПериодыПогашения.ФизЛицо,
	|			ПериодыПогашения.ДоговорЗайма,
	|			ПериодыПогашения.ПорядокПогашенияЗайма,
	|			ПериодыПогашения.ДоговорЗаймаНачалоПогашения,
	|			ПериодыПогашения.ДоговорЗаймаСрокПогашения,
	|			ПериодыПогашения.ДоговорЗаймаСтавкаНалогообложенияМатВыгоды,
	|			ПериодыПогашения.СуммаЗайма,
	|			СтатусФизЛица.Статус) КАК ДанныеОПогашении
	|		ПО НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ФизЛицо = ДанныеОПогашении.ФизЛицо
	|			И НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.ДоговорЗайма = ДанныеОПогашении.ДоговорЗайма
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если КомментироватьРасчет Тогда
		
		СтрокаПоиска = "НЕОПРЕДЕЛЕНО КАК ПоляКомментированияОсновногоЗапроса";
		СтрокаЗамены = 
		"НачислениеЗарплатыРаботникамОрганизацийПогашениеЗаймов.Сторно,
		|	ДанныеОПогашении.ДатаС,
		|	ДанныеОПогашении.ДатаПО,
		|	ДанныеОПогашении.ПроцентыПриход,
		|	ДанныеОПогашении.ПроцентыРасход,
		|	ДанныеОПогашении.ПроцентыНачальныйОстаток,
		|	ДанныеОПогашении.СтавкаРефинансированияЦБ,
		|	ДанныеОПогашении.ОсновнойДолгКонечныйОстаток,
		|	ДанныеОПогашении.ОсновнойДолгРасход,
		|	ДанныеОПогашении.ПоСтавкеРефинансирования,
		|	ДанныеОПогашении.ПроцентЗаПользованиеЗаймом,
		|	ДанныеОПогашении.ДоговорЗаймаНачислятьМатериальнуюВыгоду,
		|	ДанныеОПогашении.ПорядокПогашенияЗайма,
		|	ДанныеОПогашении.ДоговорЗаймаНачалоПогашения,
		|	ДанныеОПогашении.СуммаЗайма,
		|	ДанныеОПогашении.ДоговорЗаймаСрокПогашения,
		|	ДанныеОПогашении.РасчетныхДней";
		
		ТекстОстаткиЗаймов = СтрЗаменить(ТекстОстаткиЗаймов, СтрокаПоиска, СтрокаЗамены);
		
		СтрокаПоиска = "НЕОПРЕДЕЛЕНО КАК ПоляКомментированияВложенногоЗапроса";
		СтрокаЗамены = 
		"ВЫБОР
		|		КОГДА ПериодыПогашения.ОсновнойДолгКонечныйОстаток > 0
		|				И ПериодыПогашения.ДатаС = &НачалоРасчетногоПериода
		|			ТОГДА ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДатаС, ДЕНЬ, -1)
		|		ИНАЧЕ ПериодыПогашения.ДатаС
		|	КОНЕЦ КАК ДатаС,
		|	ДОБАВИТЬКДАТЕ(ВЫБОР
		|		КОГДА ПериодыПогашения.ДатаПО > &КонецРасчетногоПериода
		|				ИЛИ ПериодыПогашения.ДатаПО ЕСТЬ NULL 
		|			ТОГДА &КонецРасчетногоПериода
		|		ИНАЧЕ ПериодыПогашения.ДатаПО
		|	КОНЕЦ, ДЕНЬ, -1) КАК ДатаПО,
		|	СтавкаРефинансированияЦБ.Размер КАК СтавкаРефинансированияЦБ,
		|	ПериодыПогашения.ОсновнойДолгКонечныйОстаток КАК ОсновнойДолгКонечныйОстаток,
		|	ПериодыПогашения.ОсновнойДолгРасход КАК ОсновнойДолгРасход,
		|	ПериодыПогашения.ДоговорЗаймаПроцентЗаПользованиеЗаймом КАК ПроцентЗаПользованиеЗаймом,
		|	ПериодыПогашения.ДоговорЗаймаНачислятьМатериальнуюВыгоду,
		|	ПериодыПогашения.ПорядокПогашенияЗайма,
		|	ПериодыПогашения.СуммаЗайма,
		|	ПериодыПогашения.ДоговорЗаймаСрокПогашения,
		|	ПериодыПогашения.ДоговорЗаймаНачалоПогашения,
		|	РАЗНОСТЬДАТ(ВЫБОР
		|			КОГДА ПериодыПогашения.ОсновнойДолгКонечныйОстаток > 0
		|					И ПериодыПогашения.ДатаС = &НачалоРасчетногоПериода
		|				ТОГДА ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДатаС, ДЕНЬ, -1)
		|			ИНАЧЕ ПериодыПогашения.ДатаС
		|		КОНЕЦ, ВЫБОР
		|			КОГДА ПериодыПогашения.ДатаПО > &КонецРасчетногоПериода
		|					ИЛИ ПериодыПогашения.ДатаПО ЕСТЬ NULL 
		|				ТОГДА &КонецРасчетногоПериода
		|			ИНАЧЕ ПериодыПогашения.ДатаПО
		|		КОНЕЦ, ДЕНЬ) КАК РасчетныхДней";
		
		ТекстОстаткиЗаймов = СтрЗаменить(ТекстОстаткиЗаймов, СтрокаПоиска, СтрокаЗамены);
		
		СтрокаПоиска = "ПериодыПогашения.СуммаЗайма,";
		СтрокаЗамены = 
		"ПериодыПогашения.СуммаЗайма,
		|	ПериодыПогашения.ДатаС,
		|	ПериодыПогашения.ДатаПО,
		|	СтавкаРефинансированияЦБ.Размер,
		|	ПериодыПогашения.ОсновнойДолгКонечныйОстаток,
		|	ПериодыПогашения.ОсновнойДолгРасход,
		|	ПериодыПогашения.ДоговорЗаймаПроцентЗаПользованиеЗаймом,
		|	ПериодыПогашения.ДоговорЗаймаНачислятьМатериальнуюВыгоду,
		|	РАЗНОСТЬДАТ(ВЫБОР
		|			КОГДА ПериодыПогашения.ОсновнойДолгКонечныйОстаток > 0
		|					И ПериодыПогашения.ДатаС = &НачалоРасчетногоПериода
		|				ТОГДА ДОБАВИТЬКДАТЕ(ПериодыПогашения.ДатаС, ДЕНЬ, -1)
		|			ИНАЧЕ ПериодыПогашения.ДатаС
		|		КОНЕЦ, ВЫБОР
		|			КОГДА ПериодыПогашения.ДатаПО > &КонецРасчетногоПериода
		|					ИЛИ ПериодыПогашения.ДатаПО ЕСТЬ NULL 
		|				ТОГДА &КонецРасчетногоПериода
		|			ИНАЧЕ ПериодыПогашения.ДатаПО
		|		КОНЕЦ, ДЕНЬ),";
		
		ТекстОстаткиЗаймов = СтрЗаменить(ТекстОстаткиЗаймов, СтрокаПоиска, СтрокаЗамены);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстОстаткиЗаймов;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если КомментироватьРасчет Тогда
		
		ТЗДляКомментирования = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
		ТЗРезультатов = ТЗДляКомментирования.Скопировать();
		ТЗРезультатов.Свернуть("НомерСтроки, ФизЛицо, ДоговорЗайма, СуммаЗайма, ДоговорЗаймаСрокПогашения, ДоговорЗаймаНачалоПогашения, ПорядокПогашенияЗайма, ПроцентЗаПользованиеЗаймом, ДоговорЗаймаНачислятьМатериальнуюВыгоду, СтавкаНалогообложенияМатвыгоды, ПодразделениеОрганизации, Сторно","НачисленоПроцентов,ПогашеноПроцентов,ПогашеноЗайма,МатериальнаяВыгода,НалогНаМатериальнуюВыгоду");
		ТЗРезультатов.Сортировать("НомерСтроки");
	
	Иначе
		
		ТЗРезультатов = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Физлицо) Тогда
		
		Если КомментироватьРасчет Тогда
			КомментарийПогашениеЗаймов = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет погашения займов");
		КонецЕсли;
			
		Для каждого СтрокаТЗРезультатов Из ТЗРезультатов Цикл
			
			СтрокаТабличнойЧасти = ПогашениеЗаймов.Получить(СтрокаТЗРезультатов.НомерСтроки-1);
			СтрокаТабличнойЧасти.НачисленоПроцентов 		= СтрокаТЗРезультатов.НачисленоПроцентов;
			СтрокаТабличнойЧасти.МатериальнаяВыгода 		= СтрокаТЗРезультатов.МатериальнаяВыгода;
			СтрокаТабличнойЧасти.ПогашеноЗайма	  			= СтрокаТЗРезультатов.ПогашеноЗайма;
			СтрокаТабличнойЧасти.ПогашеноПроцентов  		= СтрокаТЗРезультатов.ПогашеноПроцентов;
			СтрокаТабличнойЧасти.НалогНаМатериальнуюВыгоду 	= СтрокаТЗРезультатов.НалогНаМатериальнуюВыгоду;
			
			Если КомментироватьРасчет И Не СтрокаТабличнойЧасти.Сторно Тогда
				
				КомментарийДоговора = ОбщегоНазначенияЗК.КомментарийРасчета("", КомментарийПогашениеЗаймов, СтрокаТабличнойЧасти.ДоговорЗайма, СтрокаТабличнойЧасти.ДоговорЗайма,, Истина);
				
				ОбщегоНазначенияЗК.КомментарийРасчета("Сумма займа: " + СтрокаТЗРезультатов.СуммаЗайма, КомментарийДоговора,,,, Истина);
				ОбщегоНазначенияЗК.КомментарийРасчета("Порядок погашения займа: " + СтрокаТЗРезультатов.ПорядокПогашенияЗайма + ?(СтрокаТЗРезультатов.ПорядокПогашенияЗайма = Перечисления.ПорядокПогашенияЗаймаПроцентов.Ежемесячно," с " + Формат(СтрокаТЗРезультатов.ДоговорЗаймаНачалоПогашения, "ДФ=dd.MM.yyyy") + " в течение " + СтрокаТЗРезультатов.ДоговорЗаймаСрокПогашения + " мес.",""), КомментарийДоговора,,,, Истина);
				КомментироватьМатериальнуюВыгоду = СтрокаТЗРезультатов.ДоговорЗаймаНачислятьМатериальнуюВыгоду;
				КомментироватьРасчетПроцентов = СтрокаТЗРезультатов.ПроцентЗаПользованиеЗаймом > 0;
				Если Не КомментироватьРасчетПроцентов Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("По условиям договора проценты за пользование займом не взимаются", КомментарийДоговора,,,, Истина);
				КонецЕсли;
				Если Не КомментироватьМатериальнуюВыгоду Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("По условиям договора материальная выгода не исчисляется", КомментарийДоговора,,,, Истина);
				Иначе	
					ОбщегоНазначенияЗК.КомментарийРасчета("По условиям договора материальная выгода по займу облагается НДФЛ по ставке " + СтрокаТабличнойЧасти.СтавкаНалогообложенияМатвыгоды,КомментарийДоговора,,,, Ложь);
				КонецЕсли;
					
				ТЗКомментария = ТЗДляКомментирования.Скопировать(ТЗДляКомментирования.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТЗРезультатов.НомерСтроки)));
				ТЗКомментария.Сортировать("ДатаС");
				
				Для Каждого СтрокаТЗКомментария Из ТЗКомментария Цикл
					
					Если СтрокаТЗКомментария.ДатаС > СтрокаТЗКомментария.ДатаПО Тогда
						// технический интервал
						Продолжить;
					КонецЕсли;
					
					Если СтрокаТЗКомментария.ОсновнойДолгРасход <> 0 Или СтрокаТЗКомментария.ПроцентыРасход <> 0 Тогда
						КомментарийПогашения = ОбщегоНазначенияЗК.КомментарийРасчета("Погашены займ и %% по нему " + Формат(СтрокаТЗКомментария.ДатаС, "ДФ=dd.MM.yyyy") + " на сумму " + (СтрокаТЗКомментария.ОсновнойДолгРасход + СтрокаТЗКомментария.ПроцентыРасход), КомментарийДоговора,,,, Ложь);
						ОбщегоНазначенияЗК.КомментарийРасчета("Погашен основной долг: " + СтрокаТЗКомментария.ОсновнойДолгРасход, КомментарийПогашения,,,, Ложь);
						ОбщегоНазначенияЗК.КомментарийРасчета("Погашены накопленные %%: " + СтрокаТЗКомментария.ПроцентыРасход, КомментарийПогашения,,,, Ложь);
					КонецЕсли; 
					
				КонецЦикла; 
				
				ОбщегоНазначенияЗК.КомментарийРасчета("Остаток основного долга на конец месяца составил: " + ?(ТЗКомментария.Количество() < 2, 0, ТЗКомментария[ТЗКомментария.Количество() - 2].ОсновнойДолгКонечныйОстаток), КомментарийДоговора,,,, Истина);
				Если СтрокаТЗРезультатов.ПорядокПогашенияЗайма = Перечисления.ПорядокПогашенияЗаймаПроцентов.Ежемесячно Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета("Месячный платеж в счет погашения основного долга: " + Формат(СтрокаТЗРезультатов.СуммаЗайма / СтрокаТЗРезультатов.ДоговорЗаймаСрокПогашения,"ЧЦ=15; ЧДЦ=2; ЧГ=0"), КомментарийДоговора,,,, Истина);
				КонецЕсли;
				
				Если КомментироватьРасчетПроцентов Или КомментироватьМатериальнуюВыгоду Тогда
					
					Если КомментироватьРасчетПроцентов Тогда
						ОбщегоНазначенияЗК.КомментарийРасчета("Остаток непогашенных на начало месяца %% за пользование займом составил: " + (СтрокаТабличнойЧасти.ПогашеноПроцентов - СтрокаТабличнойЧасти.НачисленоПроцентов), КомментарийДоговора,,,, Ложь);
						КомментарийНачисленныхПроцентов = ОбщегоНазначенияЗК.КомментарийРасчета("Начислены %% за пользование займом всего: " + СтрокаТабличнойЧасти.НачисленоПроцентов, КомментарийДоговора,,,, Ложь);
					КонецЕсли;
					
					// Комментирование материальной выгоды
					Если КомментироватьМатериальнуюВыгоду Тогда
						КомментарийНачисленнойМатериальнойВыгоды = ОбщегоНазначенияЗК.КомментарийРасчета("Исчислено материальной выгоды по займу всего: " + СтрокаТабличнойЧасти.МатериальнаяВыгода,КомментарийДоговора,,,, Ложь);
						Если СтрокаТабличнойЧасти.СтавкаНалогообложенияМатвыгоды = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13 Тогда
							ОбщегоНазначенияЗК.КомментарийРасчета("НДФЛ с материальной выгоды не исчислялся",КомментарийДоговора,,,, Ложь);
						Иначе
							ОбщегоНазначенияЗК.КомментарийРасчета("НДФЛ с материальной выгоды начислен по ставке " + СтрокаТабличнойЧасти.СтавкаНалогообложенияМатвыгоды + " в сумме " + СтрокаТабличнойЧасти.НалогНаМатериальнуюВыгоду,КомментарийДоговора,,,, Ложь);
						КонецЕсли;
					КонецЕсли;
					
					Для Каждого СтрокаТЗКомментария Из ТЗКомментария Цикл
						
						Если СтрокаТЗКомментария.ДатаС > СтрокаТЗКомментария.ДатаПО Тогда
							// технический интервал
							Продолжить;
						КонецЕсли;
						
						РасчетныхДней = СтрокаТЗКомментария.РасчетныхДней;
						
						Если КомментироватьРасчетПроцентов Тогда
							
							// Комментарий расчета начисления %%
							
							КомментарийНачисленныхПроцентовСДолга = ОбщегоНазначенияЗК.КомментарийРасчета("Период пользования займом: с " + Формат(СтрокаТЗКомментария.ДатаС, "ДФ=dd.MM.yyyy") + " по " + Формат(СтрокаТЗКомментария.ДатаПО, "ДФ=dd.MM.yyyy") + "; календарных дней: " + РасчетныхДней, КомментарийНачисленныхПроцентов,,,, Истина);
							ОбщегоНазначенияЗК.КомментарийРасчета("Сумма основного долга на начало периода составила: " + СтрокаТЗКомментария.ОсновнойДолгКонечныйОстаток, КомментарийНачисленныхПроцентовСДолга,,,, Ложь);
							ОбщегоНазначенияЗК.КомментарийРасчета("% за пользование займом: " + СтрокаТЗКомментария.ПроцентЗаПользованиеЗаймом, КомментарийНачисленныхПроцентовСДолга,,,, Ложь);
							ОбщегоНазначенияЗК.КомментарийРасчета("Начислено %% за пользование займом: " + СтрокаТЗКомментария.НачисленоПроцентов, КомментарийНачисленныхПроцентов,,,, Ложь);
							
						КонецЕсли;
						
						Если КомментироватьМатериальнуюВыгоду Тогда
							
							// Комментарий расчета материальной выгоды
							
							ДатаПолученияДохода = ?(СтрокаТЗКомментария.ПроцентыПриход > 0 Или СтрокаТЗКомментария.ОсновнойДолгКонечныйОстаток = 0, СтрокаТЗКомментария.ДатаПО, КонецМесяца(ПериодРегистрации));
							
							КомментарийНачисленнойМатериальнойВыгодыСДолга = ОбщегоНазначенияЗК.КомментарийРасчета("Период пользования займом: с " + Формат(СтрокаТЗКомментария.ДатаС, "ДФ=dd.MM.yyyy") + " по " + Формат(СтрокаТЗКомментария.ДатаПО, "ДФ=dd.MM.yyyy") + "; календарных дней: " + РасчетныхДней, КомментарийНачисленнойМатериальнойВыгоды,,,, Истина);
							ОбщегоНазначенияЗК.КомментарийРасчета("Ставка рефинансирования ЦБ по состоянию на дату получения дохода (" + Формат(ДатаПолученияДохода, "ДФ=dd.MM.yyyy") + "): " + СтрокаТЗКомментария.СтавкаРефинансированияЦБ + "%", КомментарийНачисленнойМатериальнойВыгодыСДолга,,,, Ложь);
							ОбщегоНазначенияЗК.КомментарийРасчета("Сумма основного долга составила: " + СтрокаТЗКомментария.ОсновнойДолгКонечныйОстаток, КомментарийНачисленнойМатериальнойВыгодыСДолга,,,, Ложь);
							ОбщегоНазначенияЗК.КомментарийРасчета("Исчислено %% по ставке рефинансирования: " + СтрокаТЗКомментария.ПоСтавкеРефинансирования + "; начислено %% за пользование займом: "+ СтрокаТЗКомментария.НачисленоПроцентов, КомментарийНачисленнойМатериальнойВыгодыСДолга,,,, Ложь);
							ОбщегоНазначенияЗК.КомментарийРасчета("Материальная выгода составила: " + СтрокаТЗКомментария.МатериальнаяВыгода, КомментарийНачисленнойМатериальнойВыгодыСДолга,,,, Ложь);
							
						КонецЕсли; 
						
					КонецЦикла; 
					
				КонецЕсли;
				
				// Расчет погашения займа
				ОбщегоНазначенияЗК.КомментарийРасчета("Результат расчета: " + СтрокаТабличнойЧасти.ПогашеноЗайма + ?(СтрокаТабличнойЧасти.ПогашеноЗайма > СтрокаТабличнойЧасти.ПогашеноПроцентов,"; в т.ч. в счет погашения основного долга: " + (СтрокаТабличнойЧасти.ПогашеноЗайма - СтрокаТабличнойЧасти.ПогашеноПроцентов),"") + ?(СтрокаТабличнойЧасти.ПогашеноПроцентов > 0,?(СтрокаТабличнойЧасти.ПогашеноЗайма = СтрокаТабличнойЧасти.ПогашеноПроцентов,"; в т.ч. в счет погашения %% за пользование займом: "," и %% за пользование займом: ") + СтрокаТабличнойЧасти.ПогашеноПроцентов,""), КомментарийДоговора,,,, Истина);
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе	
		ПогашениеЗаймов.Загрузить(ТЗРезультатов);
	КонецЕсли;
	
КонецПроцедуры

// Процедура рассчитывает ресурсы удержаний и заполняет 
// реквизиты Результат табличной части документа
//
Процедура РассчитатьУдержания(ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоУдержаниям = Неопределено, Физлицо = Неопределено, КомментироватьРасчет = Ложь, РассчитыватьДСВ = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Если Физлицо = Неопределено И РассчитыватьДСВ = Неопределено Тогда
		МассивИндексыСтрокУдержания = Неопределено;
	Иначе
		МассивИндексыСтрокУдержания = Новый Массив();
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		
		// Перечитаем объект и соберем данные для заполнения наборов записей регистров
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	НаборУдержания = РегистрыРасчета.УдержанияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;

	НаборНДФЛРасчетыСБюджетом = РегистрыНакопления.НДФЛРасчетыСБюджетом.СоздатьНаборЗаписей();
	НаборНДФЛРасчетыСБюджетом.Отбор.Регистратор.Значение = Ссылка;

	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборДопНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДопНачисления.Отбор.Регистратор.Значение = Ссылка;

	// сформируем движения основных начислений по данным табличной части
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
	Пока ВыборкаПоНачислениям.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
		КонецЕсли;
	КонецЦикла;
	
	мСоответствиеДоходовИВычетов = СправкиПоНДФЛ.СоответствиеДоходовИМассивовВычетов(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации));
	
	ВыборкаПоДоговорам = СформироватьЗапросПоДоговорам(ВыборкаПоШапкеДокумента).Выбрать();
	Пока ВыборкаПоДоговорам.Следующий() Цикл 
		ПроверитьЗаполнениеСтрокиДоговора(ВыборкаПоДоговорам, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуДоговора(ВыборкаПоДоговорам, ВыборкаПоШапкеДокумента, НаборДопНачисления);
		КонецЕсли;
	КонецЦикла;
				
	// сформируем движения дополнительных начислений по данным табличной части
	ВыборкаПоДопНачислениям = СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
	Пока ВыборкаПоДопНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиДопНачисления(ВыборкаПоДопНачислениям, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуДопНачислений(ВыборкаПоДопНачислениям, ВыборкаПоШапкеДокумента, НаборДопНачисления);
		КонецЕсли;
	КонецЦикла;
	
	// сформируем движения НДФЛ по данным табличной части
	ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ(Физлицо).Выбрать();
	Пока ВыборкаПоНДФЛ.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ);
		Если НЕ Отказ Тогда
			ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, ВыборкаПоШапкеДокумента, НаборНДФЛРасчетыСБюджетом);
		КонецЕсли;
	КонецЦикла;
	
	// получим реквизиты табличной части погашения займов
	ВыборкаПоСтрокамДокумента = СформироватьЗапросПоПогашениеЗайма().Выбрать();
	КонецМесяца = КонецМесяца(ПериодРегистрации);
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл 
		
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиПогашениеЗайма(ВыборкаПоСтрокамДокумента, Отказ, "");
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			Если ВыборкаПоСтрокамДокумента.НалогНаМатериальнуюВыгоду <> 0 Тогда
				Движение = НаборНДФЛРасчетыСБюджетом.Добавить();
				
				// Свойства
				Движение.Период							= КонецМесяца;
				Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;

				// Измерения
				Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.МесяцНалоговогоПериода     	= КонецМесяца;
				Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияМатвыгоды;

				// Ресурсы
				Движение.Налог							= ВыборкаПоСтрокамДокумента.НалогНаМатериальнуюВыгоду;
				
				// Реквизиты 
				Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
				Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
				Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
				Движение.ИсчисленоИзЗарплаты		= Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// сформируем движения удержаний по данным табличной части без записи (запись делается процедурой РассчитатьЗаписиРегистраРасчета)
	Если РассчитыватьДСВ = Неопределено Тогда
		Пока ВыборкаПоУдержаниям.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, НаборУдержания);
				Если НЕ Физлицо = Неопределено Тогда
					МассивИндексыСтрокУдержания.Добавить(ВыборкаПоУдержаниям.НомерСтроки - 1); 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Пока ВыборкаПоУдержаниям.Следующий() Цикл 
			ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ);
			Если НЕ Отказ Тогда
				Если РассчитыватьДСВ И Не ВыборкаПоУдержаниям.ЯвляетсяДСВ Тогда
				    Продолжить;
				КонецЕсли;
				Если Не РассчитыватьДСВ И ВыборкаПоУдержаниям.ЯвляетсяДСВ Тогда
				    Продолжить;
				КонецЕсли;
				ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, НаборУдержания);
				МассивИндексыСтрокУдержания.Добавить(ВыборкаПоУдержаниям.НомерСтроки - 1); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	// перед тем как начать расчет, сформированные движения надо записать - 
	// по ним чуть позже будем получать дополнительные данные для расчетов
	Для Каждого Набор Из Движения Цикл
		ПроверяемыйТип = ТипЗнч(Набор);
		Если ПроверяемыйТип = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
			НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		ИначеЕсли ПроверяемыйТип = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
			НаборДопНачисления.Записать();
		ИначеЕсли ПроверяемыйТип = Тип("РегистрНакопленияНаборЗаписей.НДФЛРасчетыСБюджетом") Тогда
			НаборНДФЛРасчетыСБюджетом.Записать();
		КонецЕсли;
	КонецЦикла;
	
	// удержания - в последнюю очередь
	ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", НаборУдержания, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, Удержания, , МассивИндексыСтрокУдержания, Физлицо, КомментироватьРасчет);
	
	// Удаляем движения
	Для Каждого Набор Из Движения Цикл
		ПроверяемыйТип = ТипЗнч(Набор);
		Если ПроверяемыйТип = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
			НаборОсновныеНачисления.Очистить();
			НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		ИначеЕсли ПроверяемыйТип = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
			НаборДопНачисления.Очистить();
			НаборДопНачисления.Записать();
		ИначеЕсли ПроверяемыйТип = Тип("РегистрНакопленияНаборЗаписей.НДФЛРасчетыСБюджетом") Тогда
			НаборНДФЛРасчетыСБюджетом.Очистить();
			НаборНДФЛРасчетыСБюджетом.Записать();
		ИначеЕсли ПроверяемыйТип = Тип("РегистрРасчетаНаборЗаписей.УдержанияРаботниковОрганизаций") Тогда
			НаборУдержания.Очистить();
			НаборУдержания.Записать();
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // РассчитатьУдержания()

// Процедура рассчитывает ресурсы всех наборов записей и заполняет 
// реквизиты Результат всех табличных частей документа
//
Процедура РассчитатьВсе(Физлицо = Неопределено, КомментироватьРасчет = Ложь) Экспорт
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	
	Если КомментироватьРасчет Тогда
		// удаление промежуточных движений выполняется не так как при "нормальном" расчете
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ВыборкаПоДопНачислениям = СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		
		НачисленияРассчитаны = РассчитатьНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ВыборкаПоДопНачислениям, Физлицо, КомментироватьРасчет);
		Если НачисленияРассчитаны Тогда
			Записать(); // для расчета удержаний нужно записать результаты расчета начислений
			РассчитатьУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Физлицо, КомментироватьРасчет, Истина);
			Записать(); // для расчета НДФЛ нужно записать результаты расчета начислений
			РассчитатьПогашениеЗаймов(Физлицо, КомментироватьРасчет);
			РассчитатьНДФЛ(Физлицо, КомментироватьРасчет, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
			Записать(); // для расчета удержаний нужно записать результаты расчета НДФЛ
			ВыборкаПоУдержаниям.Сбросить();
			РассчитатьУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Физлицо, КомментироватьРасчет, Ложь);
		КонецЕсли;
		
		// Удаляем движения по начислениям - ранее они не удалялисьь для комментирования 
		// расчета НДФЛ и удержаний
		Для Каждого Набор Из Движения Цикл
			Если ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
				
				// Удаляем движения
				Набор.Очистить();
				Набор.Записать(Истина, Ложь, Истина, Ложь);
				
			ИначеЕсли ТипЗнч(Набор)=Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда	
				
				// Удаляем движения
				Набор.Очистить();
				Набор.Записать();
				
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Иначе
		НачатьТранзакцию();
		Прочитать();
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ВыборкаПоДопНачислениям = СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента, Физлицо).Выбрать();
		ЗафиксироватьТранзакцию();
		
		НачисленияРассчитаны = РассчитатьНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, ВыборкаПоДопНачислениям,Физлицо);
		Если НачисленияРассчитаны Тогда
			Записать(); // для расчета удержаний нужно записать результаты расчета начислений
			РассчитатьУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Физлицо, КомментироватьРасчет, Истина);
			Записать(); // для расчета НДФЛ нужно записать результаты расчета начислений
			РассчитатьПогашениеЗаймов(Физлицо, КомментироватьРасчет);
			РассчитатьНДФЛ(Физлицо, КомментироватьРасчет, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
			Записать(); // для расчета удержаний нужно записать результаты расчета НДФЛ
			ВыборкаПоУдержаниям.Сбросить();
			РассчитатьУдержания(ВыборкаПоШапкеДокумента, ВыборкаПоУдержаниям, Физлицо, КомментироватьРасчет, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Рассчитать()

// Выполняет перерасчет по заданному списку физлиц
// Если передан пустой список физлиц - перерасчет не проводится
// Если в качестве списка физлиц передан не массив, а Неопределено - перерасчет по всем физлицам 
// регистратора по которым требуется перерасчет
//
// Параметры
//     Физлица - список значений - ссылки на физлиц
// Возвращаемое значение
//  нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат 
	КонецЕсли;
	
	// получим список перерассчитываемых физлиц
	ФизлицаСписок = Новый СписокЗначений;
	Если Физлица = Неопределено Тогда
		
		// таблица ФизлицаДляПерерасчета
		// Список физлиц по которым необходимо выполнить перерасчет
		// Поля:
		//        ФизЛицо
		// Описание:
		// Получает список неповторяющихся физлиц по которым есть записи
		// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
		//
		ФизлицаДляПерерасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.ФизЛицо
		|ИЗ
		|	(ВЫБРАТЬ
		|		Перерасчет.ФизЛицо
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Перерасчет.ФизЛицо
		|	ИЗ
		|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет";
		
		Запрос = Новый Запрос(ФизлицаДляПерерасчетаТекст);
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		ФизлицаСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
		
	Иначе
		
		ФизлицаСписок = Физлица;
		
	КонецЕсли;

	// если не перерассчитываем никого - возврат
	Если ФизлицаСписок.Количество()=0 Тогда
		Возврат 
	КонецЕсли;
	
	// текст выбора списка физлиц для перерасчета НДФЛ
	СписокФизЛицДляРасчетаНДФЛТекст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Ссылка КАК Физлицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&парамФизлицаПерерасчета)";
	
	ДополнительныеПараметрыЗапросаНДФЛ  = Новый Структура;
	ДополнительныеПараметрыЗапросаНДФЛ.Вставить("парамФизлицаПерерасчета", ФизлицаСписок);
	
	// читаем все данные 
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.ДополнительныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.УдержанияРаботниковОрганизаций.Прочитать();
	Движения.НДФЛСведенияОДоходах.Прочитать();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
	Движения.НДФЛРасчетыСБюджетом.Прочитать();
	ЗафиксироватьТранзакцию();

	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	////////////////////////////////////////////////////////////////////////
	// Основные, дополнительные начисления и сведения о доходах НДФЛ
	
	// сначала удалим сведения о доходах НДФЛ по перерассчитываемым физлицам
	НДФЛСведенияОДоходах = Движения.НДФЛСведенияОДоходах;
	ПоследнееДвижение = НДФЛСведенияОДоходах.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(НДФЛСведенияОДоходах[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			НДФЛСведенияОДоходах.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	// перерассчитываем записи начислений
	// при этом передаем не только набор записей регистра расчета, но и набор записей регистра 
	// накопления со сведениями об отработанном времени
	// а также таблицу значений в которую будет заполнять движения для НДФЛСведенияОДоходах
	ДвиженияНДФЛСведенияОДоходах = 	Движения.НДФЛСведенияОДоходах.Выгрузить();// фактически - создаем структуру таблицы значений
	ПроведениеРасчетовПереопределяемый.ПереРассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", Движения.ОсновныеНачисленияРаботниковОрганизаций, Физлица, ДвиженияНДФЛСведенияОДоходах, Движения.РасчетСреднегоЗаработка, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, Начисления);
	// запишем без выполнения пересчета фактического периода действия
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	
	ПроведениеРасчетовПереопределяемый.ПереРассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", Движения.ДополнительныеНачисленияРаботниковОрганизаций, Физлица, ДвиженияНДФЛСведенияОДоходах, Движения.РасчетСреднегоЗаработка, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
	
	// запишем набор
	Движения.ДополнительныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	ДополнительныеНачисления.Очистить();
	Для каждого СтрокаДвижения Из Движения.ДополнительныеНачисленияРаботниковОрганизаций Цикл
	    Если Не ЗначениеЗаполнено(СтрокаДвижения.ДокументОснование) Тогда
			СтрокаНачисления = ДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачисления,СтрокаДвижения);
			СтрокаНачисления.ДатаНачала = СтрокаДвижения.БазовыйПериодНачало;
			СтрокаНачисления.ДатаОкончания = СтрокаДвижения.БазовыйПериодКонец;
		КонецЕсли;
	КонецЦикла; 
	
	// добавим матвыгоду по заемным средствам
	СформироватьДоходыПоМатвыгодеПоЗаймам(ВыборкаПоШапкеДокумента, ДвиженияНДФЛСведенияОДоходах, ФизлицаСписок);
	ДвиженияНДФЛСведенияОДоходах = 	Движения.НДФЛСведенияОДоходах.Выгрузить();
	СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, ДвиженияНДФЛСведенияОДоходах, ФизлицаСписок);
	
	// запишем движения по доходам НДФЛ, которые формируются при ПереРассчитатьЗаписиРегистраРасчета
	ПроведениеРасчетов.СвернутьДвиженияНДФЛСведенияОДоходах(ДвиженияНДФЛСведенияОДоходах);
	Движения.НДФЛСведенияОДоходах.Загрузить(ДвиженияНДФЛСведенияОДоходах);
	Движения.НДФЛСведенияОДоходах.Записать();
	
	////////////////////////////////////////////////////////////////////////
	// НДФЛ Расчеты с бюджетом
	
	// перезаполним данные по исчисленному НДФЛ 
	// сначала удалим сведения об исчисленном НДФЛ по перерассчитываемым физлицам
	ДвиженияНДФЛРасчетыСБюджетом = Движения.НДФЛРасчетыСБюджетом;
	ПоследнееДвижение = ДвиженияНДФЛРасчетыСБюджетом.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(ДвиженияНДФЛРасчетыСБюджетом[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			ДвиженияНДФЛРасчетыСБюджетом.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	// перезаполним данные по исчисленному НДФЛ в табличной части
	// сначала удалим сведения об исчисленном НДФЛ по перерассчитываемым физлицам
	// удаляем строки после получения данных для расчета НДФЛ!!
	ПоследнееДвижение = НДФЛ.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(НДФЛ[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			НДФЛ.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписейСтандартныхВычетов = РегистрыНакопления.НДФЛПредоставленныеСтандартныеВычетыФизЛиц.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ПроведениеРасчетов.СформироватьСоциальныеВычетыПоНДФЛ(ВыборкаПоШапкеДокумента, Неопределено, НаборЗаписейСтандартныхВычетов, ,"ПриРасчете");	
	
	// получение результата НДФЛ по ставке 13 процентов
	// для него передается Организация, период, ссылка на регистратор и список физлиц
	ДанныеНДФЛ = ПроведениеРасчетов.ПолучитьДанныеНДФЛПоРегистратору(Неопределено, Неопределено, ПериодРегистрации, Организация, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, Ссылка, СписокФизЛицДляРасчетаНДФЛТекст, ДополнительныеПараметрыЗапросаНДФЛ, Истина,,,,,НаборЗаписейСтандартныхВычетов);
	
	Если ДанныеНДФЛ <> Неопределено Тогда
		ЗаполнитьНаборЗаписейПоДаннымНДФЛ(Движения.НДФЛРасчетыСБюджетом, ДанныеНДФЛ, ВыборкаПоШапкеДокумента, Истина, ФизлицаСписок);
	КонецЕсли;
	Движения.НДФЛРасчетыСБюджетом.Записать();

	////////////////////////////////////////////////////////////////////////
	// удержания работников
	
	// в конце - перерасчет удержаний, так как им могут понадобиться данные расчета НДФЛ
	ПроведениеРасчетовПереопределяемый.ПереРассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", Движения.УдержанияРаботниковОрганизаций, Физлица, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, Удержания);
	// запишем
	Движения.УдержанияРаботниковОрганизаций.Записать(Истина, Истина);
	
	// записываем документ перед вызовом СформироватьВзаиморасчетыСРаботниками
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// взаиморасчеты с работниками
	
	// сначала удалим сведения о взаиморасчетах с работниками
	ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
	ПоследнееДвижение = ВзаиморасчетыСРаботникамиОрганизаций.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(ВзаиморасчетыСРаботникамиОрганизаций[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			ВзаиморасчетыСРаботникамиОрганизаций.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	// теперь сформируем начисления к выплате по начислениям документа для перерассчитываемых работников
	СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций, Истина, Физлица);
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
		
КонецПроцедуры // Перерассчитать()

// Выполняет формирование таблицы значений для загрузки ее в табличную часть Начисления
// Параметры:
//        Начисления - выборка результатат запроса
//  ПериодЗаполнения - дата периода для которого выполняем заполнение документа
//
// Возвращаемое значение:
//  таблица значений
//
Функция СформироватьТаблицуНачислений(Начисления, ОкончаниеПериодаЗаполнения, ВремТЗНачисления, МассивВалютСНезаданнымКурсом)
	
	ТЗНачисления = Новый ТаблицаЗначений();
	ТЗНачисления.Колонки.Добавить("Сотрудник");
	ТЗНачисления.Колонки.Добавить("Физлицо");
	ТЗНачисления.Колонки.Добавить("ВидРасчета");
	ТЗНачисления.Колонки.Добавить("КодВычета");
	ТЗНачисления.Колонки.Добавить("Основное");			// Признак основного начисления
	ТЗНачисления.Колонки.Добавить("Показатель1");
	ТЗНачисления.Колонки.Добавить("Показатель2");
	ТЗНачисления.Колонки.Добавить("Показатель3");
	ТЗНачисления.Колонки.Добавить("Показатель4");	
	ТЗНачисления.Колонки.Добавить("Показатель5");
	ТЗНачисления.Колонки.Добавить("Показатель6");		
	ТЗНачисления.Колонки.Добавить("Размер");
	ТЗНачисления.Колонки.Добавить("ДатаНачала", ОбщегоНазначенияЗК.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗНачисления.Колонки.Добавить("ДатаНачалаСобытия", ОбщегоНазначенияЗК.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗНачисления.Колонки.Добавить("ДатаОкончания", ОбщегоНазначенияЗК.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗНачисления.Колонки.Добавить("ПодразделениеОрганизации");
	
	// для заполнения графика и вида учета времени
	ТЗНачисления.Колонки.Добавить("ГрафикРаботы");
	ТЗНачисления.Колонки.Добавить("СуммированныйУчетРабочегоВремени");
	ТЗНачисления.Колонки.Добавить("СпособРасчета");
	ТЗНачисления.Колонки.Добавить("ВидВремени");

	// Массив незакрытых строк таблицы значений, т.е. тех, которым не проставлена дата окончания
	НезакрытыеСтроки = Новый Массив;
	// Текущие значения полей выборки для отслеживания изменения работника и даты назначения 
	ТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	ТекущаяДатаНазначения = '00010101';
	ТекущаяЧасоваяСтавкаОсновногоНачисления = 0;
	// признаки того, что вечерние или ночные часы введены по плановым начислениям
	ЕстьПлановаяДоплатаЗаНочные = Ложь;
	ЕстьПлановаяДоплатаЗаВечерние = Ложь;
	СтрокиНачисленийТекущегоНазначения = Новый Массив;
	СтрокиВечернихТекущегоНазначения = Новый Массив;
	СтрокиНочныхТекущегоНазначения = Новый Массив;
	
	ДоплатыЗаНочныеВечерниеЧасы = ПолучитьДоплатыЗаНочныеВечерние();
	ДоплатаЗаНочные 				= ДоплатыЗаНочныеВечерниеЧасы.ДоплатаЗаНочныеЧасы;
	ДоплатаЗаВечерние 				= ДоплатыЗаНочныеВечерниеЧасы.ДоплатаЗаВечерниеЧасы;
	ПроцентДоплатыЗаНочныеЧасы 		= ДоплатыЗаНочныеВечерниеЧасы.ПроцентДоплатыЗаНочныеЧасы;
	ПроцентДоплатыЗаВечерниеЧасы 	= ДоплатыЗаНочныеВечерниеЧасы.ПроцентДоплатыЗаВечерниеЧасы;
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 31.10.2011 10:36 
	ДоплатаЗаРаботуВПраздники = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных;
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
	Пока Начисления.Следующий() Цикл
		
		Если Начисления.Сотрудник <> ТекущийСотрудник Тогда
			
			// закрываем незакрытые строки начислений предыдущего работника концом месяца
			ЗакрытьСтроки(ТЗНачисления, НезакрытыеСтроки, ОкончаниеПериодаЗаполнения);
			
			Если ЕстьПлановаяДоплатаЗаНочные Тогда
				// удаляем те строки ночных часов, которые введены на основании табеля	
				Для Каждого Строка Из СтрокиНочныхТекущегоНазначения Цикл
					ТЗНачисления.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
			Если ЕстьПлановаяДоплатаЗаВечерние Тогда
				// удаляем те строки вечерних часов, которые введены на основании табеля
				Для Каждого Строка Из СтрокиВечернихТекущегоНазначения Цикл
					ТЗНачисления.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
			
			// меняется текущий работник и дата его движения
			ТекущийСотрудник = Начисления.Сотрудник;
			ТекущаяДатаНазначения = Начисления.ПериодРаботники;
			ТекущаяЧасоваяСтавкаОсновногоНачисления = 0;
			СтрокиНачисленийТекущегоНазначения.Очистить();
			СтрокиВечернихТекущегоНазначения.Очистить();
			СтрокиНочныхТекущегоНазначения.Очистить();
			ЕстьПлановаяДоплатаЗаНочные = Ложь;
			ЕстьПлановаяДоплатаЗаВечерние = Ложь;
			
		ИначеЕсли Начисления.ПериодРаботники <> ТекущаяДатаНазначения И (Начисления.НачисляетсяВЦеломЗаМесяц = Null Или (НЕ Начисления.НачисляетсяВЦеломЗаМесяц)) Тогда
			
			Для каждого СтрокаТекущегоНазначения Из СтрокиНачисленийТекущегоНазначения Цикл
			
				ИндексСтроки = 0;
				Для каждого СтрокаМассива Из НезакрытыеСтроки Цикл
					Если СтрокаМассива = СтрокаТекущегоНазначения Тогда
						НезакрытыеСтроки.Удалить(ИндексСтроки);
						Прервать;
					Иначе
						ИндексСтроки = ИндексСтроки + 1;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
			// закрываем все строки предыдущего назначения датой предшествующей новому назначению
			ЗакрытьСтроки(ТЗНачисления, СтрокиНачисленийТекущегоНазначения, Начисления.ПериодРаботники - 1);

			// меняется текущая дата движения работника
			ТекущаяДатаНазначения = Начисления.ПериодРаботники;
			
		КонецЕсли;
			
		Если НЕ Начисления.Подходит ИЛИ Начисления.УжеПроведен Тогда
			// пропускаем такие записи: они уже введена другими документами или соответствуют окончанию назначения работника
			Продолжить;
		КонецЕсли;
		
		Если Начисления.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
			Для Сч = 1 По 6 Цикл
				Если ЗначениеЗаполнено(Начисления["Валюта"+Сч]) И (Начисления["КурсВалюты"+Сч] = NULL ИЛИ Начисления["КурсВалюты"+Сч] = 0) Тогда
					МассивВалютСНезаданнымКурсом[Начисления["Валюта"+ Сч]] = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Расчет размера начисления
		// для вечерних и ночных часов размер в регистре плановых начислений сожержит процент оплаты от тарифа/оклада
		Если Начисления.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы ИЛИ Начисления.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы 
			ИЛИ Начисления.ВидРасчета = ДоплатаЗаНочные ИЛИ Начисления.ВидРасчета = ДоплатаЗаВечерние Тогда
			
			Показатель1 = Окр(Начисления.Показатель1 / 100 * ТекущаяЧасоваяСтавкаОсновногоНачисления, 2);
			Показатель2 = 0;
			Показатель3 = 0;
			Показатель4 = 0;
			Показатель5 = 0;
			Показатель6 = 0;
			
		Иначе
			
			// расчета не требуется
			Показатель1 = Начисления.Показатель1;
			Показатель2 = Начисления.Показатель2;
			Показатель3 = Начисления.Показатель3;
			Показатель4 = Начисления.Показатель4;
			Показатель5 = Начисления.Показатель5;
			Показатель6 = Начисления.Показатель6;
			
		КонецЕсли;
		
		// признак того, что вечерние и/или ночные часы введены по плановым начислениям
		Если Начисления.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы Тогда
			ЕстьПлановаяДоплатаЗаВечерние = Истина;
			// удалим строки с веченими начислениями, введенными на основании графика, из 
			// всех массивос строк
			Для Каждого Строка Из СтрокиВечернихТекущегоНазначения Цикл
				Для Счетчик = 0 По НезакрытыеСтроки.ВГраница() Цикл
					Если ТЗНачисления.Индекс(НезакрытыеСтроки[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						// нашли строку с вечерними, введенными на основании графика
						НезакрытыеСтроки.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Счетчик = 0 По СтрокиНачисленийТекущегоНазначения.ВГраница() Цикл
					Если ТЗНачисления.Индекс(СтрокиНачисленийТекущегоНазначения[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						// нашли строку с вечерними, введенными на основании графика
						СтрокиНачисленийТекущегоНазначения.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ТЗНачисления.Удалить(Строка);
				
			КонецЦикла;
			СтрокиВечернихТекущегоНазначения.Очистить();
		КонецЕсли;
		Если Начисления.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы Тогда
			ЕстьПлановаяДоплатаЗаНочные = Истина;
			// удалим строки с ночными начислениями, введенными на основании графика, из 
			// всех массивос строк
			Для Каждого Строка Из СтрокиНочныхТекущегоНазначения Цикл
				Для Счетчик = 0 По НезакрытыеСтроки.ВГраница() Цикл
					Если ТЗНачисления.Индекс(НезакрытыеСтроки[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						// нашли строку с вечерними, введенными на основании графика
						НезакрытыеСтроки.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Счетчик = 0 По СтрокиНачисленийТекущегоНазначения.ВГраница() Цикл
					Если ТЗНачисления.Индекс(СтрокиНачисленийТекущегоНазначения[Счетчик]) = ТЗНачисления.Индекс(Строка) Тогда
						// нашли строку с вечерними, введенными на основании графика
						СтрокиНачисленийТекущегоНазначения.Удалить(Счетчик);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ТЗНачисления.Удалить(Строка);
				
			КонецЦикла;
			СтрокиНочныхТекущегоНазначения.Очистить();
		КонецЕсли;
		
		// Сохраним размер основного начисления для расчета размера оплаты ночных и вечерних часов
		// (основное начисление в выборке должно идти раньше других видов расчета)
		Если Начисления.ОсновноеНачисление и Начисления.ВидРасчета <> Неопределено Тогда
			ТекущаяЧасоваяСтавкаОсновногоНачисления = Начисления.ЧасоваяТарифнаяСтавка;
		КонецЕсли;
		
		// Найдем такой же вид расчета среди незакрытых строк с целью завершения его действия
		Строки = Новый Массив;
		НайтиСредиНезакрытых(НезакрытыеСтроки, Начисления.ОсновноеНачисление, Начисления.ВидРасчета, Строки);
		ПрерватьОбход = Ложь;
		Если Строки.Количество() > 0 Тогда
			// нашли
			Для Каждого Строка Из Строки Цикл
				Если Строка.ДатаНачала = Начисления.Период Тогда
					Если Начисления.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
						ИндексСтроки = НезакрытыеСтроки.Найти(Строка);
						НезакрытыеСтроки.Удалить(ИндексСтроки);
						ИндексСтроки = 0;
						Для каждого СтрокаМассива Из СтрокиНачисленийТекущегоНазначения Цикл
							Если СтрокаМассива = Строка Тогда
								СтрокиНачисленийТекущегоНазначения.Удалить(ИндексСтроки);
								Прервать;
							Иначе
								ИндексСтроки = ИндексСтроки + 1;
							КонецЕсли;
						КонецЦикла;
						ТЗНачисления.Удалить(Строка);
					Иначе
						// если дата та же - новую строку в формируемую таблицу значений не вводим, а меняем данные 
						// и оставляем строку "незакрытой"
						Строка.ВидРасчета = Начисления.ВидРасчета;// вид расчета необходимо переопределять для основного начисления
						Строка.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
						Строка.СпособРасчета = Начисления.СпособРасчета;
						Строка.ГрафикРаботы = Начисления.ГрафикРаботы;
						Строка.ДатаНачалаСобытия = Начисления.ДатаНачалаСобытия;
						Строка.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
						Строка.Показатель1 = Показатель1;
						Строка.Показатель2 = Показатель2;
						Строка.Показатель3 = Показатель3;
						Строка.Показатель4 = Показатель4;
						Строка.Показатель5 = Показатель5;
						Строка.Показатель6 = Показатель6;
						
						Если Начисления.ОсновноеНачисление Тогда
							// если это ОсновноеНачисление, то нужно подменить данные и в тех строках 
							// ночных и вечерних, которые введены не основании графика
							Для Каждого СтрокаДоплаты Из СтрокиВечернихТекущегоНазначения Цикл
								Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
									Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
										// нашли строку с вечерними, введенными на основании графика
										СтрокаДоплаты.Показатель1 = Окр(Начисления.ЧасоваяТарифнаяСтавка * ПроцентДоплатыЗаВечерниеЧасы / 100, 2);
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							Для Каждого СтрокаДоплаты Из СтрокиНочныхТекущегоНазначения Цикл
								Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
									Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
										// нашли строку с ночными, введенными на основании графика
										//СтрокаДоплаты.Показатель1 = СтрокаДоплаты.Показатель1 = Окр(Начисления.ЧасоваяТарифнаяСтавка * ПроцентДоплатыЗаНочныеЧасы / 100, 2);
										СтрокаДоплаты.Показатель1 = Окр(Начисления.ЧасоваяТарифнаяСтавка * ПроцентДоплатыЗаНочныеЧасы / 100, 2); //Blik 260116 47931
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
					ПрерватьОбход = Истина;
				ИначеЕсли Начисления.НачисляетсяВЦеломЗаМесяц = Null Или (НЕ Начисления.НачисляетсяВЦеломЗаМесяц) Тогда
				
					Если Не ЗначениеЗаполнено(Строка.ДатаОкончания) Или Строка.ДатаОкончания > Начисления.Период-1 Тогда
						Строка.ДатаОкончания = Начисления.Период-1;
					КонецЕсли;
					ИндексСтроки = НезакрытыеСтроки.Найти(Строка);
					НезакрытыеСтроки.Удалить(ИндексСтроки);
					
					Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
						
						ИндексСтрокиТекНазнач = СтрокиНачисленийТекущегоНазначения.Найти(Строка);
						Если ИндексСтрокиТекНазнач <> Неопределено Тогда
							СтрокиНачисленийТекущегоНазначения.Удалить(ИндексСтрокиТекНазнач);
						КонецЕсли;
						
						ТЗНачисления.Удалить(Строка);
						
						Продолжить;
						
					КонецЕсли;
					
					Если Начисления.ОсновноеНачисление Тогда
						// если это ОсновноеНачисление, то нужно закрыть и те строки
						// ночных и вечерних, которые введены не на основании графика
						Для Каждого СтрокаДоплаты Из СтрокиВечернихТекущегоНазначения Цикл
							Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
								Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
									// нашли строку с вечерними, введенными на основании графика
									Если Не ЗначениеЗаполнено(СтрокаДоплаты.ДатаОкончания) Или СтрокаДоплаты.ДатаОкончания > Начисления.Период-1 Тогда
										СтрокаДоплаты.ДатаОкончания = Начисления.Период-1;
									КонецЕсли;
									ИндексСтроки = НезакрытыеСтроки.Найти(СтрокаДоплаты);
									НезакрытыеСтроки.Удалить(ИндексСтроки);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						Для Каждого СтрокаДоплаты Из СтрокиНочныхТекущегоНазначения Цикл
							Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
								Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
									// нашли строку с ночными, введенными на основании графика
									Если Не ЗначениеЗаполнено(СтрокаДоплаты.ДатаОкончания) Или СтрокаДоплаты.ДатаОкончания > Начисления.Период-1 Тогда
										СтрокаДоплаты.ДатаОкончания = Начисления.Период-1;
									КонецЕсли;
									ИндексСтроки = НезакрытыеСтроки.Найти(СтрокаДоплаты);
									НезакрытыеСтроки.Удалить(ИндексСтроки);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					
				ИначеЕсли Начисления.ПериодНачисления = Начисления.Период  Тогда 
					
					Строка.ДатаОкончания = ОкончаниеПериодаЗаполнения;
					// удаляем из массива незакрытых - если пользователем был изменен размер начисления
					Если Начисления.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
						ИндексСтроки = НезакрытыеСтроки.Найти(Строка);
						НезакрытыеСтроки.Удалить(ИндексСтроки);
					КонецЕсли;
					
					Если Начисления.ОсновноеНачисление Тогда
						// если это ОсновноеНачисление, то нужно закрыть и те строки
						// ночных и вечерних, которые введены не основании графика
						Для Каждого СтрокаДоплаты Из СтрокиВечернихТекущегоНазначения Цикл
							Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
								Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
									// нашли строку с вечерними, введенными на основании графика
									СтрокаДоплаты.ДатаОкончания = ОкончаниеПериодаЗаполнения;
									// удаляем из массива незакрытых - если пользователем был изменен размер начисления
									Если Начисления.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
										ИндексСтроки = НезакрытыеСтроки.Найти(СтрокаДоплаты);
										НезакрытыеСтроки.Удалить(ИндексСтроки);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						Для Каждого СтрокаДоплаты Из СтрокиНочныхТекущегоНазначения Цикл
							Для Каждого НезакрытаяСтрока Из НезакрытыеСтроки Цикл
								Если ТЗНачисления.Индекс(НезакрытаяСтрока) = ТЗНачисления.Индекс(СтрокаДоплаты) Тогда
									// нашли строку с ночными, введенными на основании графика
									СтрокаДоплаты.ДатаОкончания = ОкончаниеПериодаЗаполнения;
									// удаляем из массива незакрытых - если пользователем был изменен размер начисления
									Если Начисления.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
										ИндексСтроки = НезакрытыеСтроки.Найти(СтрокаДоплаты);
										НезакрытыеСтроки.Удалить(ИндексСтроки);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					
				Иначе
					ПрерватьОбход = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПрерватьОбход Или Начисления.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
			Продолжить;
		ИначеЕсли Начисления.НачисляетсяВЦеломЗаМесяц Тогда
			
			// проверем не введено ли данное начисление уже
			СтрокаПоиска= Новый Структура;
			СтрокаПоиска.Вставить("Сотрудник", Начисления.Сотрудник);
			СтрокаПоиска.Вставить("ВидРасчета", Начисления.ВидРасчета);
			
			НайденныеСтроки = ТЗНачисления.НайтиСтроки(СтрокаПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Добавим новую строку начислений
		НоваяСтрока = ТЗНачисления.Добавить();
		НоваяСтрока.Сотрудник = Начисления.Сотрудник;
		НоваяСтрока.Физлицо = Начисления.Физлицо;
		НоваяСтрока.ВидРасчета = Начисления.ВидРасчета;
		НоваяСтрока.КодВычета = Начисления.КодВычета;
		Если ПроведениеРасчетов.ЭтоРасчетСеверныхНадбавок(Начисления.СпособРасчета) И Начисления.ДатаРегистрацииСеверногоСтажа <> Null Тогда
			// получим массив процентов северных надбавок с датами их действия для нашего периода
			ПроцентыСевернойНадбавки = ПроведениеРасчетов.ПолучитьПроцентыСевернойНадбавкиЗаПериод(
					Начисления.ДатаРегистрацииСеверногоСтажа, 
					Начисления.ПорядокНачисленияСеверныхНадбавок, 
					Начисления.НачальныйПроцентСевернойНадбавки,
					Начисления.СеверныйСтажМесяцев,
					Начисления.СеверныйСтажДней,
					Начисления.Период,
					ОкончаниеПериодаЗаполнения);
			НоваяСтрока.Показатель1 = ПроцентыСевернойНадбавки[0].Процент;
		ИначеЕсли ПроведениеРасчетов.ЭтоРасчетОтСтажа(Начисления.СпособРасчета) Тогда
			Если Начисления.КоэффициентСтажа = Null Тогда
				КоэффициентСтажа = 0;
								
				ОбщегоНазначенияЗК.КомментарийРасчета("Для " + Начисления.СотрудникНаименование + ", вид расчета """ + Начисления.ВидРасчетаНаименование+ """ не подобран размер начисления в зависимости от стажа """ + Начисления.ВидРасчетаВидСтажа + """ Размер принят равным нулю.", , Начисления.ФизЛицо, Начисления.ФизЛицо, Перечисления.ВидыСообщений.Ошибка);

			Иначе
				КоэффициентСтажа = Начисления.КоэффициентСтажа;
			КонецЕсли;
			НоваяСтрока.Показатель1 = КоэффициентСтажа;
		Иначе			
			НоваяСтрока.Показатель1 = Показатель1;
			НоваяСтрока.Показатель2 = Показатель2;
			НоваяСтрока.Показатель3 = Показатель3;
			НоваяСтрока.Показатель4 = Показатель4;
			НоваяСтрока.Показатель5 = Показатель5;
			НоваяСтрока.Показатель6 = Показатель6;
		КонецЕсли;
		НоваяСтрока.Основное = Начисления.ОсновноеНачисление;
		НоваяСтрока.ДатаНачала = Начисления.Период;
		НоваяСтрока.ДатаНачалаСобытия = Начисления.ДатаНачалаСобытия;
		Если Начисления.НачисляетсяВЦеломЗаМесяц Тогда
			НоваяСтрока.ДатаОкончания = ОкончаниеПериодаЗаполнения;
		КонецЕсли;
		НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
		НоваяСтрока.СпособРасчета = Начисления.СпособРасчета;
		НоваяСтрока.ВидВремени = Начисления.ВидВремени;
		НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
		НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
		
		Если Не Начисления.НачисляетсяВЦеломЗаМесяц Тогда
			НезакрытыеСтроки.Добавить(НоваяСтрока);
			СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
		КонецЕсли;
		
		// Добавим начисления по ночным и вечерним, если требуется и если это - основной вид расчета
		Если Начисления.ОсновноеНачисление И Начисления.ЕстьНочные И НЕ ЕстьПлановаяДоплатаЗаНочные Тогда
			НоваяСтрока = ТЗНачисления.Добавить();
			НоваяСтрока.Сотрудник = Начисления.Сотрудник;
			НоваяСтрока.Физлицо = Начисления.Физлицо;
			НоваяСтрока.ВидРасчета = ДоплатаЗаНочные;
			НоваяСтрока.Показатель1 = Окр(Начисления.ЧасоваяТарифнаяСтавка * ПроцентДоплатыЗаНочныеЧасы / 100, 2);
			НоваяСтрока.Основное = Ложь;			
			НоваяСтрока.ДатаНачала = Начисления.Период;
			НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
			НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы;
			НоваяСтрока.ВидВремени = Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
			НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
			НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
			
			НезакрытыеСтроки.Добавить(НоваяСтрока);
			СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
			СтрокиНочныхТекущегоНазначения.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
		Если Начисления.ОсновноеНачисление И Начисления.ЕстьВечерние И НЕ ЕстьПлановаяДоплатаЗаВечерние Тогда
			НоваяСтрока = ТЗНачисления.Добавить();
			НоваяСтрока.Сотрудник = Начисления.Сотрудник;
			НоваяСтрока.Физлицо = Начисления.Физлицо;
			НоваяСтрока.ВидРасчета = ДоплатаЗаВечерние;
			НоваяСтрока.Показатель1 = Окр(Начисления.ЧасоваяТарифнаяСтавка * ПроцентДоплатыЗаВечерниеЧасы / 100, 2);
			НоваяСтрока.Основное = Ложь;			
			НоваяСтрока.ДатаНачала = Начисления.Период;
			НоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
			НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы;
			НоваяСтрока.ВидВремени = Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
			НоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
			НоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
			
			НезакрытыеСтроки.Добавить(НоваяСтрока);
			СтрокиНачисленийТекущегоНазначения.Добавить(НоваяСтрока);
			СтрокиВечернихТекущегоНазначения.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
		Если Начисления.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы ИЛИ Начисления.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы 
			ИЛИ Начисления.ВидРасчета = ДоплатаЗаНочные ИЛИ Начисления.ВидРасчета = ДоплатаЗаВечерние Тогда
			
			СтрокаДоплаты = НоваяСтрока;
			
			Отбор = Новый Структура();
			Отбор.Вставить("Сотрудник", Начисления.Сотрудник);
			Отбор.Вставить("Физлицо", Начисления.Физлицо);
			Отбор.Вставить("ОсновноеНачисление", Истина);
			Строки = ВремТЗНачисления.НайтиСтроки(Отбор);
			
			ОтборДоплаты = Новый Структура();
			ОтборДоплаты.Вставить("Сотрудник", Начисления.Сотрудник);
			ОтборДоплаты.Вставить("Физлицо", Начисления.Физлицо);
			ОтборДоплаты.Вставить("ВидРасчета", Начисления.ВидРасчета);
			СтрокиДоплаты = ВремТЗНачисления.НайтиСтроки(ОтборДоплаты);

				
			Если Строки.Количество() > 1 И СтрокиДоплаты.Количество() < 2 Тогда
				
				КоличествоСтрок = Строки.Количество();
				НомерСтр = 0;
				ДатаНачала = СтрокаДоплаты.ДатаНачала;
				Для Каждого СтрокаТЗНачисления Из Строки Цикл
					НомерСтр = НомерСтр + 1;
					Если НомерСтр > 1 Тогда
						
						Если ДатаНачала >= СтрокаТЗНачисления.Период Тогда
							ИндексСтрокиНезакрытые = НезакрытыеСтроки.Найти(СтрокаДоплаты);
							НезакрытыеСтроки.Удалить(ИндексСтрокиНезакрытые);
							
							ИндексСтрокиТекНазнач = СтрокиНачисленийТекущегоНазначения.Найти(СтрокаДоплаты);
							СтрокиНачисленийТекущегоНазначения.Удалить(ИндексСтрокиТекНазнач);
							
							ИндексСтроки = ТЗНачисления.Индекс(СтрокаДоплаты);
							ТЗНачисления.Удалить(ИндексСтроки);
						Иначе
							// если не удаляем строку доплаты, то "закроем" ее (ставим дату окончания)
							СтрокаДоплаты.ДатаОкончания = СтрокаТЗНачисления.Период - 1;
							
							ИндексСтрокиНезакрытые = НезакрытыеСтроки.Найти(СтрокаДоплаты);
							НезакрытыеСтроки.Удалить(ИндексСтрокиНезакрытые);
						КонецЕсли;
						
						СтрокаДоплаты = ТЗНачисления.Добавить();
						СтрокаДоплаты.Сотрудник = СтрокаТЗНачисления.Сотрудник;
						СтрокаДоплаты.Физлицо = СтрокаТЗНачисления.Физлицо;
						СтрокаДоплаты.ВидРасчета = Начисления.ВидРасчета;
						СтрокаДоплаты.КодВычета = Начисления.КодВычета;
						СтрокаДоплаты.Показатель1 =  Окр(Начисления.Показатель1 / 100 * СтрокаТЗНачисления.ЧасоваяТарифнаяСтавка, 2);
						СтрокаДоплаты.Основное = Начисления.ОсновноеНачисление;
						СтрокаДоплаты.ДатаНачала = СтрокаТЗНачисления.Период;
						СтрокаДоплаты.ДатаНачалаСобытия = СтрокаТЗНачисления.ДатаНачалаСобытия;
						СтрокаДоплаты.ПодразделениеОрганизации = СтрокаТЗНачисления.ПодразделениеОрганизации;
						СтрокаДоплаты.СпособРасчета = Начисления.СпособРасчета;
						СтрокаДоплаты.ВидВремени = Начисления.ВидВремени;
						СтрокаДоплаты.ГрафикРаботы = Начисления.ГрафикРаботы;
						СтрокаДоплаты.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
						
						ДатаНачала = СтрокаДоплаты.ДатаНачала;
						
						НезакрытыеСтроки.Добавить(СтрокаДоплаты);
						СтрокиНачисленийТекущегоНазначения.Добавить(СтрокаДоплаты);

					КонецЕсли;
				КонецЦикла;
			ИначеЕсли  Строки.Количество() > 1 Тогда
				Для Каждого СтрокаТЗДопНачисления Из СтрокиДоплаты Цикл
					Если СтрокаТЗДопНачисления.Период = НоваяСтрока.ДатаНачала Тогда
						Для Каждого СтрокаТЗНачисления Из Строки Цикл
							Если СтрокаТЗНачисления.Период = НоваяСтрока.ДатаНачала Тогда
								НоваяСтрока.Показатель1 = Окр(Начисления.Показатель1 / 100 * СтрокаТЗНачисления.ЧасоваяТарифнаяСтавка, 2);
							КонецЕсли;
						КонецЦикла;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПроведениеРасчетов.ЭтоРасчетОтСтажа(Начисления.СпособРасчета) И Начисления.ДеньСменыКоэффициентаСтажа <> Null Тогда
			// установим дату окончания предыдущего расчета от стажа
			Если День(КонецМесяца(Начисления.Период)) >= Начисления.ДеньСменыКоэффициентаСтажа Тогда
				ДатаСменыКоэффициентаСтажа = Дата(Год(Начисления.Период), Месяц(Начисления.Период), Начисления.ДеньСменыКоэффициентаСтажа) - 1;
				Если ДатаСменыКоэффициентаСтажа > НоваяСтрока.ДатаНачала Тогда
					НоваяСтрока.ДатаОкончания = ДатаСменыКоэффициентаСтажа;
					// ... и введем еще один
					ДопНоваяСтрока = ТЗНачисления.Добавить();
					ДопНоваяСтрока.Сотрудник = Начисления.Сотрудник;
					ДопНоваяСтрока.Физлицо = Начисления.Физлицо;
					ДопНоваяСтрока.ВидРасчета = Начисления.ВидРасчета;
					ДопНоваяСтрока.КодВычета = Начисления.КодВычета;
					ДопНоваяСтрока.Показатель1 = Начисления.СледКоэффициентСтажа;				
					ДопНоваяСтрока.Основное = Начисления.ОсновноеНачисление;
					ДопНоваяСтрока.ДатаНачала = ДатаСменыКоэффициентаСтажа + 1;
					ДопНоваяСтрока.ДатаНачалаСобытия = Начисления.ДатаНачалаСобытия;
					ДопНоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
					ДопНоваяСтрока.СпособРасчета = Начисления.СпособРасчета;
					ДопНоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
					ДопНоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
					
					НезакрытыеСтроки.Добавить(ДопНоваяСтрока);
					СтрокиНачисленийТекущегоНазначения.Добавить(ДопНоваяСтрока);
				Иначе // период записи начиался после дня изменения коэффициента стажа - запишем в ту же запись новое значение
					НоваяСтрока.Показатель1 = Начисления.СледКоэффициентСтажа;				
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ПроведениеРасчетов.ЭтоРасчетСеверныхНадбавок(Начисления.СпособРасчета) И Начисления.ДатаРегистрацииСеверногоСтажа <> Null Тогда
			Если ПроцентыСевернойНадбавки.Количество() > 1 Тогда
				Если ПроцентыСевернойНадбавки[0].Процент <= 0 Тогда
					
					НоваяСтрока.ДатаНачала = Дата(Год(Начисления.Период), Месяц(Начисления.Период), День(ПроцентыСевернойНадбавки[1].Период));
					НоваяСтрока.Показатель1 = ПроцентыСевернойНадбавки[1].Процент;
					
				Иначе
					
					// установим дату окончания предыдущего расчета от стажа
					НоваяСтрока.ДатаОкончания = Дата(Год(Начисления.Период), Месяц(Начисления.Период), День(ПроцентыСевернойНадбавки[1].Период)) - 1;
					
					// ... и введем дополнительную
					// предполагаем, что в течение одного расчетного периода (месяца) не может произойти несколько 
					// изменений процента северной надбавки
					ДопНоваяСтрока = ТЗНачисления.Добавить();
					ДопНоваяСтрока.Сотрудник = Начисления.Сотрудник;
					ДопНоваяСтрока.Физлицо = Начисления.Физлицо;
					ДопНоваяСтрока.ВидРасчета = Начисления.ВидРасчета;
					ДопНоваяСтрока.КодВычета = Начисления.КодВычета;					
					ДопНоваяСтрока.Показатель1 = ПроцентыСевернойНадбавки[1].Процент;
					ДопНоваяСтрока.Основное = Начисления.ОсновноеНачисление;
					ДопНоваяСтрока.ДатаНачала = Дата(Год(Начисления.Период), Месяц(Начисления.Период), День(ПроцентыСевернойНадбавки[1].Период));
	                ДопНоваяСтрока.ДатаНачалаСобытия = Начисления.ДатаНачалаСобытия;
					ДопНоваяСтрока.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации;
					ДопНоваяСтрока.СпособРасчета = Начисления.СпособРасчета;
					ДопНоваяСтрока.ГрафикРаботы = Начисления.ГрафикРаботы;
					ДопНоваяСтрока.СуммированныйУчетРабочегоВремени = Начисления.СуммированныйУчетРабочегоВремени;
		
					НезакрытыеСтроки.Добавить(ДопНоваяСтрока);
					СтрокиНачисленийТекущегоНазначения.Добавить(ДопНоваяСтрока);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	// закрываем незакрытые строки по последнему работнику концом месяца
	ЗакрытьСтроки(ТЗНачисления, НезакрытыеСтроки, ОкончаниеПериодаЗаполнения);
	
	Возврат ТЗНачисления;
	
КонецФункции //СформироватьТаблицуНачислений

// Выполняет формирование таблицы значений для загрузки ее в табличную часть Удержания
// Параметры:
// 	Удержания - выборка результатат запроса
//  ПериодЗаполнения - дата периода для которого выполняем заполнение документа
//
// Возвращаемое значение:
//  таблица значений
//
Функция СформироватьТаблицуУдержаний(ВыборкаУдержания, ОкончаниеПериодаЗаполнения, МассивВалютСНезаданнымКурсом)
	
	ТЗУдержания = Новый ТаблицаЗначений();
	ТЗУдержания.Колонки.Добавить("Физлицо");
	ТЗУдержания.Колонки.Добавить("ВидРасчета");
	ТЗУдержания.Колонки.Добавить("Показатель1");
	ТЗУдержания.Колонки.Добавить("Показатель2");
	ТЗУдержания.Колонки.Добавить("Показатель3");
	ТЗУдержания.Колонки.Добавить("Показатель4");
	ТЗУдержания.Колонки.Добавить("Показатель5");
	ТЗУдержания.Колонки.Добавить("Показатель6");	
	ТЗУдержания.Колонки.Добавить("ДатаНачала", ОбщегоНазначенияЗК.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗУдержания.Колонки.Добавить("ДатаОкончания", ОбщегоНазначенияЗК.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗУдержания.Колонки.Добавить("ДокументОснование");
	ТЗУдержания.Колонки.Добавить("ДополнительныеДанные");
	ТЗУдержания.Колонки.Добавить("ПорядокИсчисленияИздержек");
	ТЗУдержания.Колонки.Добавить("Получатель");
	ТЗУдержания.Колонки.Добавить("Авторасчет");

	// Массив незакрытых строк таблицы значений, т.е. тех, которым не проставлена дата окончания
	НезакрытыеСтроки = Новый Массив;
	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Пока ВыборкаУдержания.Следующий() Цикл
		
		Для Сч = 1 По 6 Цикл
			Если ЗначениеЗаполнено(ВыборкаУдержания["Валюта"+Сч]) И (ВыборкаУдержания["КурсВалюты"+Сч] = NULL ИЛИ ВыборкаУдержания["КурсВалюты"+Сч] = 0) Тогда
				МассивВалютСНезаданнымКурсом[ВыборкаУдержания["Валюта"+ Сч]] = Истина;
			КонецЕсли;
		КонецЦикла;
		
		
		Если ВыборкаУдержания.Физлицо <> ТекущееФизлицо Тогда
			// закрываем строки концом месяца
			ЗакрытьСтроки(ТЗУдержания, НезакрытыеСтроки, ОкончаниеПериодаЗаполнения);
			ТекущееФизлицо = ВыборкаУдержания.Физлицо;
		Иначе
			// найдем такой же вид расчета по тому же основанию среди незакрытых строк
			Строка = Неопределено;
			ИндексСтроки = Неопределено;
			НайтиСредиНезакрытыхУдержаний(НезакрытыеСтроки, ВыборкаУдержания.ВидРасчета, ВыборкаУдержания.ДокументОснование, ВыборкаУдержания.Получатель, ВыборкаУдержания.ПорядокИсчисленияИздержек, Строка, ИндексСтроки);
			Если Строка <> Неопределено Тогда
				// нашли
				Если Строка.ДатаНачала = ВыборкаУдержания.Период Тогда
					// если дата та же - меняем данные 
					// не вводим новую строку в формируемую таблицу значений
					// и оставляем "незакрытой"
					Строка.Показатель1 = ВыборкаУдержания.Показатель1;
					Строка.Показатель2 = ВыборкаУдержания.Показатель2;
					Строка.Показатель3 = ВыборкаУдержания.Показатель3;
					Строка.Показатель4 = ВыборкаУдержания.Показатель4;
					Строка.Показатель5 = ВыборкаУдержания.Показатель5;
					Строка.Показатель6 = ВыборкаУдержания.Показатель6;
					Продолжить;
				Иначе
					// иначе - "закрываем" строку и удаляем из массива незакрытых
					Строка.ДатаОкончания = ВыборкаУдержания.Период-1;
					НезакрытыеСтроки.Удалить(ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаУдержания.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТЗУдержания.Добавить();
		
		НоваяСтрока.Физлицо 				= ВыборкаУдержания.Физлицо;
		НоваяСтрока.ВидРасчета 				= ВыборкаУдержания.ВидРасчета;
		НоваяСтрока.Показатель1 			= ВыборкаУдержания.Показатель1;
		НоваяСтрока.Показатель2 			= ВыборкаУдержания.Показатель2;
		НоваяСтрока.Показатель3 			= ВыборкаУдержания.Показатель3;
		НоваяСтрока.Показатель4 			= ВыборкаУдержания.Показатель4;
		НоваяСтрока.Показатель5 			= ВыборкаУдержания.Показатель5;
		НоваяСтрока.Показатель6 			= ВыборкаУдержания.Показатель6;
		НоваяСтрока.ДатаНачала 				= ВыборкаУдержания.Период;
		НоваяСтрока.ДокументОснование 		= ВыборкаУдержания.ДокументОснование;
		НоваяСтрока.ДополнительныеДанные 	= ВыборкаУдержания.ДополнительныеДанные;
		НоваяСтрока.ПорядокИсчисленияИздержек = ВыборкаУдержания.ПорядокИсчисленияИздержек;
		НоваяСтрока.Получатель 				= ВыборкаУдержания.Получатель;
		
		НоваяСтрока.Авторасчет = Истина;
		НезакрытыеСтроки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	// закрываем строки концом месяца
	ЗакрытьСтроки(ТЗУдержания, НезакрытыеСтроки, ОкончаниеПериодаЗаполнения);
	Возврат ТЗУдержания;
	
КонецФункции // СформироватьТаблицуУдержаний()

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//  ПериодЗаполнения - период (дата - начало месяца) за который необходимо выполнить автозаполнение
//  ПостроительЗапроса - построитель запроса, который используется для ограничения состава физлиц
//                       по которым выполняется заполнение документа
//  ПерерассчитываемыйДокумент - перерассчитываемый документ для автозаполнения документа 
//                               по перерассчитываемому начислению зарплаты
//  Физлица - массив физлиц перерасчета
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
Функция ВыполнитьАвтозаполнение(НачалоПериодаЗаполнения, ОкончаниеПериодаЗаполнения, Запрос = Неопределено, ЭтоПерерасчет = Ложь, СписокФизЛиц = Неопределено, МассивСотрудники = Неопределено) Экспорт

	РасчетЗарплатыОрганизацииПоОтветственным = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "РасчетЗарплатыОрганизацииПоОтветственным");
	ГоловнаяОрганизация = ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
	
	ЗаполняемПоОтобраннымСотрудникам = Запрос <> Неопределено Или МассивСотрудники <> Неопределено;
	
	// готовим объект Запрос и 
	// определяем тексты условий ПоВсемПодразделениямОрганизации и УсловиеНаПодразделение.
	Если Запрос = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// подготовим временную таблицу с подразделениями
		Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			ПоВсемПодразделениямОрганизации = Ложь;
			Запрос.УстановитьПараметр("парамПодразделение", ПодразделениеОрганизации);
			ТекстЗапросаПоПодразделениям = 
			"ВЫБРАТЬ
			|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
			|ПОМЕСТИТЬ ВТПодразделенияОтбора
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|ГДЕ
			|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&парамПодразделение)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Подразделение";
		Иначе
			ПоВсемПодразделениямОрганизации = Истина;
			ТекстЗапросаПоПодразделениям = 
			"ВЫБРАТЬ
			|	НЕОПРЕДЕЛЕНО КАК Подразделение
			|ПОМЕСТИТЬ ВТПодразделенияОтбора";
		КонецЕсли;
		
		Если МассивСотрудники = Неопределено Тогда
			
			Если РасчетЗарплатыОрганизацииПоОтветственным И ЗначениеЗаполнено(Ответственный) Тогда
				// Проверим ответственного - является ли он расчетчиком вообще и для заданного 
				// подразделения (если оно задано)
				Запрос.УстановитьПараметр("парамПользователь", Ответственный);
				Запрос.УстановитьПараметр("парамНачало" , НачалоПериодаЗаполнения);
				Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Подразделения.Ссылка
					|ИЗ
					|	Справочник.ПодразделенияОрганизаций КАК Подразделения
					|ГДЕ
					|	Подразделения.Ссылка В ИЕРАРХИИ(&парамПодразделение)
					|	И Подразделения.Ссылка В ИЕРАРХИИ
					|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
					|				Расчетчики.ПодразделениеОрганизации
					|			ИЗ
					|				РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) КАК Расчетчики
					|			ГДЕ
					|				Расчетчики.Пользователь = &парамПользователь)";
					Запрос.УстановитьПараметр("парамПодразделение" , ПодразделениеОрганизации);
					Если Запрос.Выполнить().Пустой() Тогда
						ОбщегоНазначенияЗК.ОшибкаРасчета("Ответственный за этот документ не является расчетчиком для выбранного подразделения");
						Возврат  Ложь;
					КонецЕсли;
					
					// изменим временную таблицу с подразделениями
					ТекстЗапросаПоПодразделениям = 
					"ВЫБРАТЬ
					|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
					|ПОМЕСТИТЬ ВТПодразделенияОтбора
					|ИЗ
					|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
					|ГДЕ
					|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&парамПодразделение)
					|	И ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ
					|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
					|				Расчетчики.ПодразделениеОрганизации
					|			ИЗ
					|				РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) КАК Расчетчики
					|			ГДЕ
					|				Расчетчики.Пользователь = &парамПользователь)
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Подразделение";
				Иначе
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Расчетчики.ПодразделениеОрганизации
					|ИЗ
					|	РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало, ) КАК Расчетчики
					|ГДЕ
					|	Расчетчики.Пользователь = &парамПользователь";
					Если Запрос.Выполнить().Пустой() Тогда
						ОбщегоНазначенияЗК.ОшибкаРасчета(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Ответственный за этот документ не является расчетчиком ни одного из подразделений организации"));
						Возврат  Ложь;
					КонецЕсли;
					
					// изменим временную таблицу с подразделениями
					ПоВсемПодразделениямОрганизации = Ложь;
					ТекстЗапросаПоПодразделениям = 
					"ВЫБРАТЬ
					|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
					|ПОМЕСТИТЬ ВТПодразделенияОтбора
					|ИЗ
					|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
					|ГДЕ
					|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ
					|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
					|				Расчетчики.ПодразделениеОрганизации
					|			ИЗ
					|				РегистрСведений.РасчетчикиЗарплатыОрганизаций.СрезПоследних(&парамНачало) КАК Расчетчики
					|			ГДЕ
					|				Расчетчики.Пользователь = &парамПользователь)
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Подразделение";
				КонецЕсли;

			КонецЕсли;
			
			Запрос.УстановитьПараметр("ФизЛица",				СписокФизЛиц);
			Запрос.УстановитьПараметр("ПоВсемФизЛицам",			СписокФизЛиц = Неопределено);
			Запрос.УстановитьПараметр("парамОрганизация",		Организация);
			Запрос.УстановитьПараметр("парамГоловнаяОрганизация",ГоловнаяОрганизация);
			Запрос.УстановитьПараметр("парамНачало",			НачалоПериодаЗаполнения);
			Запрос.УстановитьПараметр("парамКонец",				КонецДня(ОкончаниеПериодаЗаполнения));
			
			ТекстЗапросаПоСпискуРаботников = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
			|	РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|			&парамНачало,
			|			Организация = &парамГоловнаяОрганизация
			|				И (&ПоВсемФизЛицам
			|					ИЛИ Сотрудник.ФизЛицо В (&ФизЛица))) КАК РаботникиОрганизации
			|ГДЕ
			|	ВЫБОР
			|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
			|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
			|			ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
			|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|	И ВЫБОР
			|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
			|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
			|			ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
			|		КОНЕЦ = &парамОрганизация
			|	И ВЫБОР
			|			КОГДА &ПоВсемПодразделениям
			|				ТОГДА ИСТИНА
			|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
			|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения В
			|						(ВЫБРАТЬ
			|							Подразделения.Подразделение
			|						ИЗ
			|							ВТПодразделенияОтбора КАК Подразделения)
			|			ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации В
			|					(ВЫБРАТЬ
			|						Подразделения.Подразделение
			|					ИЗ
			|						ВТПодразделенияОтбора КАК Подразделения)
			|		КОНЕЦ
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РаботникиОрганизации.Сотрудник,
			|	РаботникиОрганизации.Сотрудник.Физлицо
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Период > &парамНачало
			|	И РаботникиОрганизации.Период <= &парамКонец
			|	И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
			|	И (&ПоВсемФизЛицам
			|			ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&ФизЛица))
			|	И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
			|	И (&ПоВсемПодразделениям
			|			ИЛИ РаботникиОрганизации.ПодразделениеОрганизации В
			|				(ВЫБРАТЬ
			|					Подразделения.Подразделение
			|				ИЗ
			|					ВТПодразделенияОтбора КАК Подразделения))
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Работники.Сотрудник,
			|	Работники.Сотрудник.Физлицо
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК Работники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
			|		ПО Работники.Сотрудник = ПериодыПерекрытия.Сотрудник
			|			И (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
			|			И (ПериодыПерекрытия.Период > Работники.Период)
			|			И (ПериодыПерекрытия.Организация = &парамГоловнаяОрганизация)
			|ГДЕ
			|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|	И Работники.ПериодЗавершения > &парамНачало
			|	И Работники.ПериодЗавершения <= &парамКонец
			|	И Работники.Организация = &парамГоловнаяОрганизация
			|	И Работники.ОбособленноеПодразделениеЗавершения = &парамОрганизация
			|	И (&ПоВсемФизЛицам
			|			ИЛИ Работники.Сотрудник.Физлицо В (&ФизЛица))
			|	И (&ПоВсемПодразделениям
			|			ИЛИ Работники.ПодразделениеОрганизацииЗавершения В
			|				(ВЫБРАТЬ
			|					Подразделения.Подразделение
			|				ИЗ
			|					ВТПодразделенияОтбора КАК Подразделения))
			|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник,
			|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
			|ИЗ
			|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
			|ГДЕ
			|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &парамКонец
			|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &парамНачало
			|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
			|	И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &парамОрганизация
			|	И (&ПоВсемФизЛицам
			|			ИЛИ ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо В (&ФизЛица))
			|	И (&ПоВсемПодразделениям
			|			ИЛИ ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации В
			|				(ВЫБРАТЬ
			|					Подразделения.Подразделение
			|				ИЗ
			|					ВТПодразделенияОтбора КАК Подразделения))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";
			
		Иначе
			
			Запрос.УстановитьПараметр("Сотрудники", МассивСотрудники);
			ТекстЗапросаПоСпискуРаботников = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
			|	СотрудникиОрганизаций.Физлицо
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";
			
		КонецЕсли;
		
		// создаем временную таблицу с подразделениями
		Запрос.Текст = ТекстЗапросаПоПодразделениям;
		Запрос.УстановитьПараметр("ПоВсемПодразделениям", ПоВсемПодразделениямОрганизации);
		Запрос.Выполнить();
		
		// создаем временную таблицу ВТСписокРаботников с сотрудниками, отобранными по подразделению или из переданного списка 
		// 
		// Поля:
		//   Сотрудник
		//   Физлицо
		//
		Запрос.Текст = ТекстЗапросаПоСпискуРаботников;
		Запрос.Выполнить();
			
		
	Иначе
		
		// создаем временную таблицу ВТСписокРаботников с сотрудниками, отобранными по критериям пользователя 
		// 
		// Поля:
		//   Сотрудник
		//   Физлицо
		//
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Выполнить();
			
		// объявим временную таблицу - она должна присутствовать, но использоваться не будет
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Подразделение
		|ПОМЕСТИТЬ ВТПодразделенияОтбора";
		Запрос.Выполнить();
		Запрос.УстановитьПараметр("ПоВсемПодразделениям", Истина);
		
	КонецЕсли;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамПериодРегистрации" , ПериодРегистрации);
	Запрос.УстановитьПараметр("парамНачало" , НачалоПериодаЗаполнения);
	Запрос.УстановитьПараметр("парамКонец" , КонецДня(ОкончаниеПериодаЗаполнения));
	Запрос.УстановитьПараметр("парамОрганизация" , Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПодразделение" , ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("парамРегистратор" , Ссылка);
	Запрос.УстановитьПараметр("парамНачалоМесяца" , НачалоМесяца(НачалоПериодаЗаполнения));
	Запрос.УстановитьПараметр("парамДатаВалютногоУчета" , НачалоМесяца(НачалоПериодаЗаполнения));
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("парамМассивСпособовРасчетовБезВалюты" , ПроведениеРасчетовПереопределяемый.ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты());
	Запрос.УстановитьПараметр("Год",Год(НачалоПериодаЗаполнения));
	Запрос.УстановитьПараметр("ЭтоПерерасчет", ЭтоПерерасчет);
	
	СпособыРасчетаОтСтажа = Новый Массив;
	СпособыРасчетаОтСтажа.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
	СпособыРасчетаОтСтажа.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
	СпособыРасчетаОтСтажа.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
	СпособыРасчетаОтСтажа.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
	СпособыРасчетаОтСтажа.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
	СпособыРасчетаОтСтажа.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка);
	Запрос.УстановитьПараметр("СпособыРасчетаОтСтажа", СпособыРасчетаОтСтажа);
	
	Если Ссылка.Пустая() Тогда
		СcылкаОбъекта = Документы.НачислениеЗарплатыРаботникамОрганизаций.ПолучитьСсылку();
		УстановитьСсылкуНового(СcылкаОбъекта);
	Иначе
		СcылкаОбъекта = Ссылка;
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", СcылкаОбъекта);
	
	//ТаблицаДвиженийРаботниковТекст
	//Описание:
	//	Выбирает список работников, отвечающих условиям отбора, числящихся на начало месяца и их движения за месяц.
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 25.08.2011 09:47 
	// ОПИСАНИЕ: добавлено поле AVTШтатноеРасписание
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&парамНачало КАК Период,
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ИСТИНА КАК Подходит,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.AVTШтатноеРасписаниеЗавершения
	|		ИНАЧЕ РаботникиОрганизации.AVTШтатноеРасписание
	|	КОНЕЦ КАК AVTШтатноеРасписание,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизации.Должность
	|	КОНЕЦ КАК Должность
	|ПОМЕСТИТЬ ВТДвиженияРаботников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&парамНачало,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТСписокРаботников.Сотрудник
	|				ИЗ
	|					ВТСписокРаботников КАК ВТСписокРаботников)) КАК РаботникиОрганизации
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
	|		КОНЕЦ = &парамОрганизация
	|	И ВЫБОР
	|			КОГДА &ПоВсемПодразделениям
	|				ТОГДА ИСТИНА
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &парамНачало
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения В
	|						(ВЫБРАТЬ
	|							Подразделения.Подразделение
	|						ИЗ
	|							ВТПодразделенияОтбора КАК Подразделения)
	|			ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации В
	|					(ВЫБРАТЬ
	|						Подразделения.Подразделение
	|					ИЗ
	|						ВТПодразделенияОтбора КАК Подразделения)
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Период,
	|	РаботникиОрганизации.Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				И РаботникиОрганизации.ОбособленноеПодразделение = &парамОрганизация
	|				И (&ПоВсемПодразделениям
	|					ИЛИ РаботникиОрганизации.ПодразделениеОрганизации В
	|						(ВЫБРАТЬ
	|							Подразделения.Подразделение
	|						ИЗ
	|							ВТПодразделенияОтбора КАК Подразделения))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.ГрафикРаботы,
		|	РаботникиОрганизации.AVTШтатноеРасписание,
	|	РаботникиОрганизации.Должность
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО СписокРаботников.Сотрудник = РаботникиОрганизации.Сотрудник
	|ГДЕ
	|	РаботникиОрганизации.Период > &парамНачало
	|	И РаботникиОрганизации.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.ПериодЗавершения,
	|	Работники.Сотрудник,
	|	ВЫБОР
	|		КОГДА Работники.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				И Работники.ОбособленноеПодразделениеЗавершения = &парамОрганизация
	|				И (&ПоВсемПодразделениям
	|					ИЛИ Работники.ПодразделениеОрганизацииЗавершения В
	|						(ВЫБРАТЬ
	|							Подразделения.Подразделение
	|						ИЗ
	|							ВТПодразделенияОтбора КАК Подразделения))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	Работники.ПодразделениеОрганизацииЗавершения,
	|	Работники.ГрафикРаботыЗавершения,
	|	Работники.AVTШтатноеРасписаниеЗавершения,
	|	Работники.ДолжностьЗавершения
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|			ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|				И (ПериодыПерекрытия.Период > Работники.Период)
	|				И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
	|		ПО СписокРаботников.Сотрудник = Работники.Сотрудник
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.ПериодЗавершения > &парамНачало
	|	И Работники.ПериодЗавершения <= &парамКонец
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&парамНачало,
	|	ДоговорникиОрганизаций.Ссылка,
	|	ИСТИНА,
	|	NULL,
		|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
	|		ПО СписокРаботников.Сотрудник = ДоговорникиОрганизаций.Ссылка
	|ГДЕ
	|	ДоговорникиОрганизаций.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	// таблица ВТЗначенияПоказателей
	// 
	// Поля:
	//   Сотрудник
	//   Показатель - введенный пользователем показатель
	//   Значение - значение показателя
	//   Валюта
	//
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Работники.Сотрудник КАК Сотрудник,
	|	Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ЗначенияПоказателейСхемМотивации.Показатель КАК Показатель,
	|	ВЫБОР КОГДА ЗначенияПоказателейСхемМотивации." + ЗаполнениеДокументовЗК.ВалютаПоказателяИмяПоляЗапроса() + " = Значение(Справочник.Валюты.ПустаяСсылка) И ЗначенияПоказателейСхемМотивации.Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейСхемМотивации.Денежный) ТОГДА ЗначенияПоказателейСхемМотивации.Показатель.Валюта ИНАЧЕ ЗначенияПоказателейСхемМотивации.Валюта КОНЕЦ КАК Валюта,
	|	ЗначенияПоказателейСхемМотивации.Значение
	|ПОМЕСТИТЬ ВТЗначенияПоказателей
	|ИЗ
	|	ВТДвиженияРаботников КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Ежемесячно.Подразделение КАК Подразделение,
	|			Ежемесячно.Показатель КАК Показатель,
	|			Ежемесячно.Валюта КАК Валюта,
	|			Ежемесячно.Значение КАК Значение,
	|			Ежемесячно.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.ЗначенияПоказателейСхемМотивации КАК Ежемесячно
	|		ГДЕ
	|			Ежемесячно.Значение ЕСТЬ НЕ NULL 
	|			И Ежемесячно.Организация = &парамОрганизация
	|			И Ежемесячно.ПериодДействия >= &парамНачало
	|			И Ежемесячно.ПериодДействия <= &парамКонец
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Подразделение,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Показатель,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Валюта,
	|			ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Значение,
	|			NULL
	|		ИЗ
	|			РегистрСведений.ПериодическиеЗначенияПоказателейСхемМотивации.СрезПоследних(&парамКонец, Организация = &парамОрганизация) КАК ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних) КАК ЗначенияПоказателейСхемМотивации
	|		ПО (ВЫБОР
	|				КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСхемМотивации.Индивидуальный)
	|						ИЛИ ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя ЕСТЬ NULL 
	|					ТОГДА Работники.Сотрудник = ЗначенияПоказателейСхемМотивации.Сотрудник
	|				КОГДА ЗначенияПоказателейСхемМотивации.Показатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыПоказателейСхемМотивации.ПоПодразделению)
	|					ТОГДА Работники.ПодразделениеОрганизации = ЗначенияПоказателейСхемМотивации.Подразделение
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Показатель
	|";
	
	Запрос.Выполнить();

	
	// создание временных таблиц для последующего использования:
	//	ЗначенияПоказателей
	//	НеЗапрашиваемыеПриКадровыхПеремещениях
	//	ВводимыеВПлановыхНачисленияхПоказатели
	//	РаботникиИНачисления
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
		
		// таблица НеЗапрашиваемыеПриКадровыхПеремещениях
		// 	выбираем показатели, которые не спрашиваем у пользователя в кадровых документах, а также все "тарифные ставки" и их в.р.;
		//  значения этих показателей будем искать в данных о плановых начислениях, но, возможно, при других видах расчета
		// 
		//	Поля:
		//		Ссылка - вид расчета
		//		Показатель
		//		НомерСтроки - номер строки показателя
		//		ЭтоТарифнаяСтавка - признак того. что Показатель является тарифной ставкой
		// 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизацийПоказатели.Показатель КАК Показатель,
		|	ОсновныеНачисленияОрганизацийПоказатели.Показатель.ВозможностьИзменения,
		|	ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки КАК НомерСтроки,
		|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ТОГДА ИСТИНА
		|		КОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ТОГДА ИСТИНА
		|		КОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ТОГДА ИСТИНА
		|		КОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель.ТарифнаяСтавка
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТарифнаяСтавка
		|ПОМЕСТИТЬ ВТНеЗапрашиваемыеПриКадровыхПеремещениях
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияОрганизацийПоказатели
		|ГДЕ
		|	((НЕ ОсновныеНачисленияОрганизацийПоказатели.ЗапрашиватьПриКадровыхПеремещениях)
		|			ИЛИ ОсновныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ИЛИ ОсновныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ИЛИ ОсновныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ИЛИ ОсновныеНачисленияОрганизацийПоказатели.Показатель.ТарифнаяСтавка)
		|	И ОсновныеНачисленияОрганизацийПоказатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДополнительныеНачисленияОрганизацийПоказатели.Показатель,
		|	ДополнительныеНачисленияОрганизацийПоказатели.Показатель.ВозможностьИзменения,
		|	ДополнительныеНачисленияОрганизацийПоказатели.НомерСтроки,
		|	ДополнительныеНачисленияОрганизацийПоказатели.Ссылка,
		|	ВЫБОР
		|		КОГДА ДополнительныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ТОГДА ИСТИНА
		|		КОГДА ДополнительныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ТОГДА ИСТИНА
		|		КОГДА ДополнительныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ТОГДА ИСТИНА
		|		КОГДА ДополнительныеНачисленияОрганизацийПоказатели.Показатель.ТарифнаяСтавка
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК ДополнительныеНачисленияОрганизацийПоказатели
		|ГДЕ
		|	((НЕ ДополнительныеНачисленияОрганизацийПоказатели.ЗапрашиватьПриКадровыхПеремещениях)
		|			ИЛИ ДополнительныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ИЛИ ДополнительныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ИЛИ ДополнительныеНачисленияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ИЛИ ДополнительныеНачисленияОрганизацийПоказатели.Показатель.ТарифнаяСтавка)
		|	И ДополнительныеНачисленияОрганизацийПоказатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УдержанияОрганизацийПоказатели.Показатель,
		|	УдержанияОрганизацийПоказатели.Показатель.ВозможностьИзменения,
		|	УдержанияОрганизацийПоказатели.НомерСтроки,
		|	УдержанияОрганизацийПоказатели.Ссылка,
		|	ВЫБОР
		|		КОГДА УдержанияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ТОГДА ИСТИНА
		|		КОГДА УдержанияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ТОГДА ИСТИНА
		|		КОГДА УдержанияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ТОГДА ИСТИНА
		|		КОГДА УдержанияОрганизацийПоказатели.Показатель.ТарифнаяСтавка
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК УдержанияОрганизацийПоказатели
		|ГДЕ
		|	((НЕ УдержанияОрганизацийПоказатели.ЗапрашиватьПриКадровыхПеремещениях)
		|			ИЛИ УдержанияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ИЛИ УдержанияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ИЛИ УдержанияОрганизацийПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ИЛИ УдержанияОрганизацийПоказатели.Показатель.ТарифнаяСтавка)
		|	И УдержанияОрганизацийПоказатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель";
		Запрос.Выполнить();
		
		// таблица ВводимыеВПлановыхНачисленияхПоказатели
		//  виды расчета и показатели, значения которых находятся при этих в.р. в данных о плановых начислениях
		// 
		//	Поля:
		//		Ссылка - вид расчета
		//		Показатель
		//		НомерСтроки - номер строки показателя
		// 
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисленияОрганизаций.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам))
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|		КОГДА ОсновныеНачисленияОрганизаций.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|	КОНЕЦ КАК Показатель,
		|	1 КАК НомерСтроки,
		|	ИСТИНА КАК ЭтоТарифнаяСтавка
		|ПОМЕСТИТЬ ВТВводимыеВПлановыхНачисленияхПоказатели
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке))
		|	И ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка,
		|	ОсновныеНачисленияОрганизацийПоказатели.Показатель,
		|	ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки,
		|	ИСТИНА
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияОрганизацийПоказатели
		|ГДЕ
		|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка.ЗачетОтработанногоВремени
		|	И ОсновныеНачисленияОрганизацийПоказатели.Показатель.ТарифнаяСтавка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеНачисленияОрганизацийПоказатели.Ссылка,
		|	ОсновныеНачисленияОрганизацийПоказатели.Показатель,
		|	ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки,
		|	ЛОЖЬ
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияОрганизацийПоказатели
		|ГДЕ
		|	ОсновныеНачисленияОрганизацийПоказатели.Показатель В
		|			(ВЫБРАТЬ
		|				ВТНеЗапрашиваемыеПриКадровыхПеремещениях.Показатель
		|			ИЗ
		|				ВТНеЗапрашиваемыеПриКадровыхПеремещениях)
		|	И (НЕ ОсновныеНачисленияОрганизацийПоказатели.Показатель.ТарифнаяСтавка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		
		Запрос.Выполнить();
		
		// РаботникиИНачисления
		//		Таблица движений работников с добавленными сведениями об их плановых начислениях
		// 
		//	Поля:
		//		Сотрудник 
		//		ВидРасчета - плановое начисление 
		//		Показатель1,...,6 - размеры показателей 
		//		СпособРасчета - способ расчета начисления 
		//		ГрафикРаботы - график сотрудника  
		//		ВидГрафика, СуммированныйУчетРабочегоВремени, ДлительностьРабочейНедели - реквизиты графика сотрудника 
		// 
		// Описание:
		//
		//	1. 
		//  2. 
		//
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 25.08.2011 09:53 
		// ОПИСАНИЕ: добавлено поле AVTШтатноеРасписание, закомментированы поля Подразделение и Должность из Надбавок,
		// закомментировано соединение с надбавками по подразделению и должности, добавлено поединение по полю AVTШтатноеРасписание
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Работники.Сотрудник КАК Сотрудник,
		|	Работники.Сотрудник.Наименование КАК СотрудникНаименование,
		|	Работники.Сотрудник.Физлицо КАК Физлицо,
		|	ВЫБОР
		|		КОГДА Работники.Период >= НачисленияРаботниковОрганизации.Период
		|				ИЛИ НачисленияРаботниковОрганизации.Период ЕСТЬ NULL 
		|			ТОГДА Работники.Период
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Период
		|	КОНЕЦ КАК Период,
		|	Работники.Подходит,
		|	Работники.Период КАК ПериодРаботники,
		|	НачисленияРаботниковОрганизации.Период КАК ПериодНачисления,
		|	НачисленияРаботниковОрганизации.ОсновноеНачисление,
		|	НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
		|	НачисленияРаботниковОрганизации.ВидРасчета.Наименование,
		|	НачисленияРаботниковОрганизации.ВидРасчета.ВидСтажа,
		|	НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда,
		|	НачисленияРаботниковОрганизации.ВидРасчета.КоэффициентСтажа,
		|	НачисленияРаботниковОрганизации.ВидРасчета.СпособРасчета КАК СпособРасчета,
		|	НачисленияРаботниковОрганизации.ВидРасчета.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
		|			ТОГДА НачисленияРаботниковОрганизации.ВидРасчета.ВидВремени
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидВремени,
		|	НачисленияРаботниковОрганизации.Действие КАК Действие,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2761)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код506)
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2720)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код501)
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2730)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код502)
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2760)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код503)
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2770)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код504)
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2790)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код507)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
		|	КОНЕЦ КАК КодВычета,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|				ИЛИ НачисленияРаботниковОрганизации.ВидРасчета.ПроизвольнаяФормулаРасчета
		|					И (НачисленияРаботниковОрганизации.ТарифныйРазряд1 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
		|						И НачисленияРаботниковОрганизации.ТарифныйРазряд1 ЕСТЬ НЕ NULL )
		|			ТОГДА ТарифныеСтавки1.Размер
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Показатель1
		|	КОНЕЦ КАК Показатель1,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ПроизвольнаяФормулаРасчета
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд2 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд2 ЕСТЬ НЕ NULL 
		|			ТОГДА ТарифныеСтавки2.Размер
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Показатель2
		|	КОНЕЦ КАК Показатель2,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ПроизвольнаяФормулаРасчета
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд3 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд3 ЕСТЬ НЕ NULL 
		|			ТОГДА ТарифныеСтавки3.Размер
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Показатель3
		|	КОНЕЦ КАК Показатель3,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ПроизвольнаяФормулаРасчета
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд4 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд4 ЕСТЬ НЕ NULL 
		|			ТОГДА ТарифныеСтавки4.Размер
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Показатель4
		|	КОНЕЦ КАК Показатель4,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ПроизвольнаяФормулаРасчета
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд5 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд5 ЕСТЬ НЕ NULL 
		|			ТОГДА ТарифныеСтавки5.Размер
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Показатель5
		|	КОНЕЦ КАК Показатель5,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ПроизвольнаяФормулаРасчета
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд6 <> ЗНАЧЕНИЕ(Справочник.ТарифныеРазряды.ПустаяСсылка)
		|				И НачисленияРаботниковОрганизации.ТарифныйРазряд6 ЕСТЬ НЕ NULL 
		|			ТОГДА ТарифныеСтавки6.Размер
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Показатель6
		|	КОНЕЦ КАК Показатель6,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|			ТОГДА ТарифныеСтавки1.Валюта
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Валюта1
		|	КОНЕЦ КАК Валюта1,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|			ТОГДА ТарифныеСтавки2.Валюта
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Валюта2
		|	КОНЕЦ КАК Валюта2,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|			ТОГДА ТарифныеСтавки3.Валюта
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Валюта3
		|	КОНЕЦ КАК Валюта3,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|			ТОГДА ТарифныеСтавки4.Валюта
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Валюта4
		|	КОНЕЦ КАК Валюта4,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|			ТОГДА ТарифныеСтавки5.Валюта
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Валюта5
		|	КОНЕЦ КАК Валюта5,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ВидРасчета.ТребуетВводаТарифногоРазряда
		|			ТОГДА ТарифныеСтавки6.Валюта
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Валюта6
		|	КОНЕЦ КАК Валюта6,
		|	НачисленияРаботниковОрганизации.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	Работники.ГрафикРаботы КАК ГрафикРаботы,
		|	ЕСТЬNULL(Работники.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА Работники.ГрафикРаботы.СокращенноеРабочееВремя
		|					И Работники.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|				ТОГДА Работники.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
		|			ИНАЧЕ Работники.ГрафикРаботы.ДлительностьРабочейНедели
		|		КОНЕЦ, 0) КАК ДлительностьРабочейНедели,
		|	Работники.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
		|	Работники.Должность КАК Должность
		|ПОМЕСТИТЬ ВТРаботникиИНачисленияПлановыеНачисления
		|ИЗ
		|	ВТДвиженияРаботников КАК Работники
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			&парамНачало КАК Период,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ КАК ОсновноеНачисление,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА ВЫБОР
		|							КОГДА НачисленияРаботниковОрганизации.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|								ТОГДА НачисленияРаботниковОрганизации.ВидРасчета
		|							ИНАЧЕ НачисленияРаботниковОрганизации.ВидРасчетаЗавершения
		|						КОНЕЦ
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ВидРасчета
		|			КОНЕЦ КАК ВидРасчета,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ДействиеЗавершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Действие
		|			КОНЕЦ КАК Действие,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Показатель1Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Показатель1
		|			КОНЕЦ КАК Показатель1,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Показатель2Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Показатель2
		|			КОНЕЦ КАК Показатель2,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Показатель3Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Показатель3
		|			КОНЕЦ КАК Показатель3,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Показатель4Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Показатель4
		|			КОНЕЦ КАК Показатель4,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Показатель5Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Показатель5
		|			КОНЕЦ КАК Показатель5,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Показатель6Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Показатель6
		|			КОНЕЦ КАК Показатель6,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Валюта1Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Валюта1
		|			КОНЕЦ КАК Валюта1,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Валюта2Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Валюта2
		|			КОНЕЦ КАК Валюта2,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Валюта3Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Валюта3
		|			КОНЕЦ КАК Валюта3,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Валюта4Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Валюта4
		|			КОНЕЦ КАК Валюта4,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Валюта5Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Валюта5
		|			КОНЕЦ КАК Валюта5,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.Валюта6Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.Валюта6
		|			КОНЕЦ КАК Валюта6,
		|			НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
		|			НачисленияРаботниковОрганизации.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ТарифныйРазряд1Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ТарифныйРазряд1
		|			КОНЕЦ КАК ТарифныйРазряд1,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ТарифныйРазряд2Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ТарифныйРазряд2
		|			КОНЕЦ КАК ТарифныйРазряд2,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ТарифныйРазряд3Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ТарифныйРазряд3
		|			КОНЕЦ КАК ТарифныйРазряд3,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ТарифныйРазряд4Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ТарифныйРазряд4
		|			КОНЕЦ КАК ТарифныйРазряд4,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ТарифныйРазряд5Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ТарифныйРазряд5
		|			КОНЕЦ КАК ТарифныйРазряд5,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|						И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА НачисленияРаботниковОрганизации.ТарифныйРазряд6Завершения
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ТарифныйРазряд6
		|			КОНЕЦ КАК ТарифныйРазряд6
		|		ИЗ
		|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|					&парамНачало,
		|					ДокументОснование = ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|						И Сотрудник В
		|							(ВЫБРАТЬ
		|								Работники.Сотрудник
		|							ИЗ
		|								ВТСписокРаботников КАК Работники)) КАК НачисленияРаботниковОрганизации
		|		ГДЕ
		|			ВЫБОР
		|					КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|							И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА НачисленияРаботниковОрганизации.ДействиеЗавершения
		|					ИНАЧЕ НачисленияРаботниковОрганизации.Действие
		|				КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			НачисленияРаботниковОрганизации.Период,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ,
		|			НачисленияРаботниковОрганизации.ВидРасчета,
		|			НачисленияРаботниковОрганизации.Действие,
		|			НачисленияРаботниковОрганизации.Показатель1,
		|			НачисленияРаботниковОрганизации.Показатель2,
		|			НачисленияРаботниковОрганизации.Показатель3,
		|			НачисленияРаботниковОрганизации.Показатель4,
		|			НачисленияРаботниковОрганизации.Показатель5,
		|			НачисленияРаботниковОрганизации.Показатель6,
		|			НачисленияРаботниковОрганизации.Валюта1,
		|			НачисленияРаботниковОрганизации.Валюта2,
		|			НачисленияРаботниковОрганизации.Валюта3,
		|			НачисленияРаботниковОрганизации.Валюта4,
		|			НачисленияРаботниковОрганизации.Валюта5,
		|			НачисленияРаботниковОрганизации.Валюта6,
		|			НачисленияРаботниковОрганизации.Сотрудник,
		|			НачисленияРаботниковОрганизации.ДатаНачалаСобытия,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд1,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд2,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд3,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд4,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд5,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд6
		|		ИЗ
		|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|				ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|		ГДЕ
		|			НачисленияРаботниковОрганизации.Период > &парамНачало
		|			И НачисленияРаботниковОрганизации.Период <= &парамКонец
		|			И НачисленияРаботниковОрганизации.Организация = &парамГоловнаяОрганизация
		|			И НачисленияРаботниковОрганизации.ДокументОснование = ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			НачисленияРаботниковОрганизации.ПериодЗавершения,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ,
		|			ВЫБОР
		|				КОГДА НачисленияРаботниковОрганизации.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|					ТОГДА НачисленияРаботниковОрганизации.ВидРасчета
		|				ИНАЧЕ НачисленияРаботниковОрганизации.ВидРасчетаЗавершения
		|			КОНЕЦ,
		|			НачисленияРаботниковОрганизации.ДействиеЗавершения,
		|			НачисленияРаботниковОрганизации.Показатель1Завершения,
		|			НачисленияРаботниковОрганизации.Показатель2Завершения,
		|			НачисленияРаботниковОрганизации.Показатель3Завершения,
		|			НачисленияРаботниковОрганизации.Показатель4Завершения,
		|			НачисленияРаботниковОрганизации.Показатель5Завершения,
		|			НачисленияРаботниковОрганизации.Показатель6Завершения,
		|			НачисленияРаботниковОрганизации.Валюта1Завершения,
		|			НачисленияРаботниковОрганизации.Валюта2Завершения,
		|			НачисленияРаботниковОрганизации.Валюта3Завершения,
		|			НачисленияРаботниковОрганизации.Валюта4Завершения,
		|			НачисленияРаботниковОрганизации.Валюта5Завершения,
		|			НачисленияРаботниковОрганизации.Валюта6Завершения,
		|			НачисленияРаботниковОрганизации.Сотрудник,
		|			НачисленияРаботниковОрганизации.ДатаНачалаСобытия,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд1Завершения,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд2Завершения,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд3Завершения,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд4Завершения,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд5Завершения,
		|			НачисленияРаботниковОрганизации.ТарифныйРазряд6Завершения
		|		ИЗ
		|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|				ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковПроверка
		|				ПО НачисленияРаботниковОрганизации.Сотрудник = НачисленияРаботниковПроверка.Сотрудник
		|					И НачисленияРаботниковОрганизации.ВидРасчетаИзмерение = НачисленияРаботниковПроверка.ВидРасчетаИзмерение
		|					И НачисленияРаботниковОрганизации.ДокументОснование = НачисленияРаботниковПроверка.ДокументОснование
		|					И (НачисленияРаботниковПроверка.Период > НачисленияРаботниковОрганизации.Период)
		|					И (НачисленияРаботниковПроверка.Период <= НачисленияРаботниковОрганизации.ПериодЗавершения)
		|		ГДЕ
		|			НачисленияРаботниковОрганизации.ПериодЗавершения >= &парамНачало
		|			И НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамКонец
		|			И НачисленияРаботниковОрганизации.Организация = &парамГоловнаяОрганизация
		|			И НачисленияРаботниковОрганизации.ДокументОснование = ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|			И НачисленияРаботниковПроверка.Сотрудник ЕСТЬ NULL ) КАК НачисленияРаботниковОрганизации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки1
		|			ПО НачисленияРаботниковОрганизации.ТарифныйРазряд1 = ТарифныеСтавки1.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки2
		|			ПО НачисленияРаботниковОрганизации.ТарифныйРазряд2 = ТарифныеСтавки2.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки3
		|			ПО НачисленияРаботниковОрганизации.ТарифныйРазряд3 = ТарифныеСтавки3.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки4
		|			ПО НачисленияРаботниковОрганизации.ТарифныйРазряд4 = ТарифныеСтавки4.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки5
		|			ПО НачисленияРаботниковОрганизации.ТарифныйРазряд5 = ТарифныеСтавки5.ТарифныйРазряд
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&парамКонец, ) КАК ТарифныеСтавки6
		|			ПО НачисленияРаботниковОрганизации.ТарифныйРазряд6 = ТарифныеСтавки6.ТарифныйРазряд
		|		ПО (Работники.Подходит)
		|			И Работники.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ВидРасчета
		|;
		|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	Работники.Сотрудник КАК Сотрудник,
		//|	Работники.Сотрудник.Наименование КАК СотрудникНаименование,
		//|	Работники.Сотрудник.Физлицо КАК Физлицо,
		//|	ВЫБОР
		//|		КОГДА Работники.Период >= ШтатноеРасписание.Период
		//|				ИЛИ ШтатноеРасписание.Период ЕСТЬ NULL 
		//|			ТОГДА Работники.Период
		//|		ИНАЧЕ ШтатноеРасписание.Период
		//|	КОНЕЦ КАК Период,
		//|	Работники.Подходит,
		//|	Работники.Период КАК ПериодРаботники,
		//|	ШтатноеРасписание.Период КАК ПериодНачисления,
		//|	ЛОЖЬ КАК ОсновноеНачисление,
		//|	ШтатноеРасписание.ВидНадбавки КАК ВидРасчета,
		//|	ШтатноеРасписание.ВидНадбавки.Наименование КАК ВидРасчетаНаименование,
		//|	ШтатноеРасписание.ВидНадбавки.ВидСтажа КАК ВидРасчетаВидСтажа,
		//|	ШтатноеРасписание.ВидНадбавки.ТребуетВводаТарифногоРазряда КАК ВидРасчетаТребуетВводаТарифногоРазряда,
		//|	ШтатноеРасписание.ВидНадбавки.КоэффициентСтажа КАК ВидРасчетаКоэффициентСтажа,
		//|	ШтатноеРасписание.ВидНадбавки.СпособРасчета КАК СпособРасчета,
		//|	ШтатноеРасписание.ВидНадбавки.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
		//|	ВЫБОР
		//|		КОГДА ШтатноеРасписание.ВидНадбавки ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
		//|			ТОГДА ШтатноеРасписание.ВидНадбавки.ВидВремени
		//|		ИНАЧЕ NULL
		//|	КОНЕЦ КАК ВидВремени,
		//|	ШтатноеРасписание.Действие,
		//|	ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка) КАК КодВычета,
		//|	ШтатноеРасписание.Показатель1,
		//|	ШтатноеРасписание.Показатель2,
		//|	ШтатноеРасписание.Показатель3,
		//|	ШтатноеРасписание.Показатель4,
		//|	ШтатноеРасписание.Показатель5,
		//|	ШтатноеРасписание.Показатель6,
		//|	ШтатноеРасписание.Валюта1,
		//|	ШтатноеРасписание.Валюта2,
		//|	ШтатноеРасписание.Валюта3,
		//|	ШтатноеРасписание.Валюта4,
		//|	ШтатноеРасписание.Валюта5,
		//|	ШтатноеРасписание.Валюта6,
		//|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаНачалаСобытия,
		//|	Работники.ПодразделениеОрганизации,
		//|	Работники.ГрафикРаботы,
		//|	ЕСТЬNULL(Работники.ГрафикРаботы.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
		//|	ЕСТЬNULL(ВЫБОР
		//|			КОГДА Работники.ГрафикРаботы.СокращенноеРабочееВремя
		//|					И Работники.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		//|				ТОГДА Работники.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
		//|			ИНАЧЕ Работники.ГрафикРаботы.ДлительностьРабочейНедели
		//|		КОНЕЦ, 0) КАК ДлительностьРабочейНедели,
		//|	Работники.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
		//|	Работники.Должность
		//|ПОМЕСТИТЬ ВТНачисленияПоШР
		//|ИЗ
		//|	ВТДвиженияРаботников КАК Работники
		//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|			&парамНачало КАК Период,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ВидНадбавки КАК ВидНадбавки,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель1 КАК Показатель1,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель2 КАК Показатель2,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель3 КАК Показатель3,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель4 КАК Показатель4,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель5 КАК Показатель5,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель6 КАК Показатель6,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта1 КАК Валюта1,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта2 КАК Валюта2,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта3 КАК Валюта3,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта4 КАК Валюта4,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта5 КАК Валюта5,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта6 КАК Валюта6,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Должность КАК Должность,
		//|			НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		//|			ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить) КАК Действие
		//|		ИЗ
		//|			РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(
		//|					&парамНачало,
		//|					ПодразделениеОрганизации В
		//|						(ВЫБРАТЬ
		//|							ДвиженияРаботников.ПодразделениеОрганизации
		//|						ИЗ
		//|							ВТДвиженияРаботников КАК ДвиженияРаботников)) КАК НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних
		//|		ГДЕ
		//|			(НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель1 > 0
		//|					ИЛИ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель2 > 0
		//|					ИЛИ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель3 > 0
		//|					ИЛИ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель4 > 0
		//|					ИЛИ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель5 > 0
		//|					ИЛИ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель6 > 0)
		//|		
		//|		ОБЪЕДИНИТЬ ВСЕ
		//|		
		//|		ВЫБРАТЬ
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Период,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.ВидНадбавки,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель1,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель2,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель3,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель4,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель5,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель6,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Валюта1,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Валюта2,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Валюта3,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Валюта4,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Валюта5,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Валюта6,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Должность,
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.ПодразделениеОрганизации,
		//|			ВЫБОР
		//|				КОГДА НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель1 = 0
		//|						И НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель2 = 0
		//|						И НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель3 = 0
		//|						И НадбавкиПоШтатномуРасписаниюОрганизаций.Показатель4 = 0
		//|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		//|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
		//|			КОНЕЦ
		//|		ИЗ
		//|			РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций КАК НадбавкиПоШтатномуРасписаниюОрганизаций
		//|		ГДЕ
		//|			НадбавкиПоШтатномуРасписаниюОрганизаций.Период > &парамНачало
		//|			И НадбавкиПоШтатномуРасписаниюОрганизаций.Период <= &парамКонец
		//|			И НадбавкиПоШтатномуРасписаниюОрганизаций.ПодразделениеОрганизации В
		//|					(ВЫБРАТЬ
		//|						ДвиженияРаботников.ПодразделениеОрганизации
		//|					ИЗ
		//|						ВТДвиженияРаботников КАК ДвиженияРаботников)) КАК ШтатноеРасписание
		//|		ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		//|			И Работники.Должность = ШтатноеРасписание.Должность
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	Сотрудник
		//|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисления.СотрудникНаименование КАК СотрудникНаименование,
		|	ПлановыеНачисления.Физлицо КАК Физлицо,
		|	ПлановыеНачисления.Период КАК Период,
		|	ПлановыеНачисления.Подходит КАК Подходит,
		|	ПлановыеНачисления.ПериодРаботники КАК ПериодРаботники,
		|	ПлановыеНачисления.ПериодНачисления КАК ПериодНачисления,
		|	ПлановыеНачисления.ОсновноеНачисление КАК ОсновноеНачисление,
		|	ПлановыеНачисления.ВидРасчета КАК ВидРасчета,
		|	ПлановыеНачисления.ВидРасчетаНаименование КАК ВидРасчетаНаименование,
		|	ПлановыеНачисления.ВидРасчетаВидСтажа КАК ВидРасчетаВидСтажа,
		|	ПлановыеНачисления.ВидРасчетаТребуетВводаТарифногоРазряда КАК ВидРасчетаТребуетВводаТарифногоРазряда,
		|	ПлановыеНачисления.ВидРасчетаКоэффициентСтажа КАК ВидРасчетаКоэффициентСтажа,
		|	ПлановыеНачисления.СпособРасчета КАК СпособРасчета,
		|	ПлановыеНачисления.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
		|	ПлановыеНачисления.ВидВремени КАК ВидВремени,
		|	ПлановыеНачисления.Действие КАК Действие,
		|	ПлановыеНачисления.КодВычета КАК КодВычета,
		|	ПлановыеНачисления.Показатель1 КАК Показатель1,
		|	ПлановыеНачисления.Показатель2 КАК Показатель2,
		|	ПлановыеНачисления.Показатель3 КАК Показатель3,
		|	ПлановыеНачисления.Показатель4 КАК Показатель4,
		|	ПлановыеНачисления.Показатель5 КАК Показатель5,
		|	ПлановыеНачисления.Показатель6 КАК Показатель6,
		|	ПлановыеНачисления.Валюта1 КАК Валюта1,
		|	ПлановыеНачисления.Валюта2 КАК Валюта2,
		|	ПлановыеНачисления.Валюта3 КАК Валюта3,
		|	ПлановыеНачисления.Валюта4 КАК Валюта4,
		|	ПлановыеНачисления.Валюта5 КАК Валюта5,
		|	ПлановыеНачисления.Валюта6 КАК Валюта6,
		|	ПлановыеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	ПлановыеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ПлановыеНачисления.ГрафикРаботы КАК ГрафикРаботы,
		|	ПлановыеНачисления.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
		|	ПлановыеНачисления.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
		|	ПлановыеНачисления.ВидГрафика КАК ВидГрафика,
		|	ПлановыеНачисления.Должность КАК Должность
		|ПОМЕСТИТЬ ВТПлановыеНачисленияНадбавкиПоШР
		|ИЗ
		|	ВТРаботникиИНачисленияПлановыеНачисления КАК ПлановыеНачисления
		|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	2,
		//|	НачисленияПоШР.Сотрудник,
		//|	НачисленияПоШР.СотрудникНаименование,
		//|	НачисленияПоШР.Физлицо,
		//|	НачисленияПоШР.Период,
		//|	НачисленияПоШР.Подходит,
		//|	НачисленияПоШР.ПериодРаботники,
		//|	НачисленияПоШР.ПериодНачисления,
		//|	НачисленияПоШР.ОсновноеНачисление,
		//|	НачисленияПоШР.ВидРасчета,
		//|	НачисленияПоШР.ВидРасчетаНаименование,
		//|	НачисленияПоШР.ВидРасчетаВидСтажа,
		//|	НачисленияПоШР.ВидРасчетаТребуетВводаТарифногоРазряда,
		//|	НачисленияПоШР.ВидРасчетаКоэффициентСтажа,
		//|	НачисленияПоШР.СпособРасчета,
		//|	НачисленияПоШР.НачисляетсяВЦеломЗаМесяц,
		//|	НачисленияПоШР.ВидВремени,
		//|	НачисленияПоШР.Действие,
		//|	НачисленияПоШР.КодВычета,
		//|	НачисленияПоШР.Показатель1,
		//|	НачисленияПоШР.Показатель2,
		//|	НачисленияПоШР.Показатель3,
		//|	НачисленияПоШР.Показатель4,
		//|	НачисленияПоШР.Показатель5,
		//|	НачисленияПоШР.Показатель6,
		//|	НачисленияПоШР.Валюта1,
		//|	НачисленияПоШР.Валюта2,
		//|	НачисленияПоШР.Валюта3,
		//|	НачисленияПоШР.Валюта4,
		//|	НачисленияПоШР.Валюта5,
		//|	НачисленияПоШР.Валюта6,
		//|	НачисленияПоШР.ДатаНачалаСобытия,
		//|	НачисленияПоШР.ПодразделениеОрганизации,
		//|	НачисленияПоШР.ГрафикРаботы,
		//|	НачисленияПоШР.СуммированныйУчетРабочегоВремени,
		//|	НачисленияПоШР.ДлительностьРабочейНедели,
		//|	НачисленияПоШР.ВидГрафика,
		//|	НачисленияПоШР.Должность
		//|ИЗ
		//|	ВТНачисленияПоШР КАК НачисленияПоШР
		//|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ВидРасчета,
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(НачисленияНадбавки.Приоритет) КАК Приоритет,
		|	НачисленияНадбавки.Сотрудник,
		|	НачисленияНадбавки.Период,
		|	НачисленияНадбавки.ВидРасчета
		|ПОМЕСТИТЬ ВТПриоритетНачисленийНадбавок
		|ИЗ
		|	ВТПлановыеНачисленияНадбавкиПоШР КАК НачисленияНадбавки
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияНадбавки.Сотрудник,
		|	НачисленияНадбавки.Период,
		|	НачисленияНадбавки.ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияНадбавки.Сотрудник КАК Сотрудник,
		|	НачисленияНадбавки.СотрудникНаименование,
		|	НачисленияНадбавки.Физлицо КАК Физлицо,
		|	НачисленияНадбавки.Период,
		|	НачисленияНадбавки.Подходит,
		|	НачисленияНадбавки.ПериодРаботники,
		|	НачисленияНадбавки.ПериодНачисления,
		|	НачисленияНадбавки.ОсновноеНачисление,
		|	НачисленияНадбавки.ВидРасчета КАК ВидРасчета,
		|	НачисленияНадбавки.ВидРасчетаНаименование,
		|	НачисленияНадбавки.ВидРасчетаВидСтажа,
		|	НачисленияНадбавки.ВидРасчетаТребуетВводаТарифногоРазряда,
		|	НачисленияНадбавки.ВидРасчетаКоэффициентСтажа,
		|	НачисленияНадбавки.СпособРасчета,
		|	НачисленияНадбавки.НачисляетсяВЦеломЗаМесяц,
		|	НачисленияНадбавки.ВидВремени,
		|	НачисленияНадбавки.Действие,
		|	НачисленияНадбавки.КодВычета,
		|	НачисленияНадбавки.Показатель1,
		|	НачисленияНадбавки.Показатель2,
		|	НачисленияНадбавки.Показатель3,
		|	НачисленияНадбавки.Показатель4,
		|	НачисленияНадбавки.Показатель5,
		|	НачисленияНадбавки.Показатель6,
		|	НачисленияНадбавки.Валюта1,
		|	НачисленияНадбавки.Валюта2,
		|	НачисленияНадбавки.Валюта3,
		|	НачисленияНадбавки.Валюта4,
		|	НачисленияНадбавки.Валюта5,
		|	НачисленияНадбавки.Валюта6,
		|	НачисленияНадбавки.ДатаНачалаСобытия,
		|	НачисленияНадбавки.ПодразделениеОрганизации,
		|	НачисленияНадбавки.ГрафикРаботы,
		|	НачисленияНадбавки.СуммированныйУчетРабочегоВремени,
		|	НачисленияНадбавки.ДлительностьРабочейНедели,
		|	НачисленияНадбавки.ВидГрафика,
		|	НачисленияНадбавки.Должность
		|ПОМЕСТИТЬ ВТРаботникиИНачисления
		|ИЗ
		|	ВТПлановыеНачисленияНадбавкиПоШР КАК НачисленияНадбавки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритетНачисленийНадбавок КАК ПриоритетНачисленийНадбавок
		|		ПО НачисленияНадбавки.Сотрудник = ПриоритетНачисленийНадбавок.Сотрудник
		|			И НачисленияНадбавки.Период = ПриоритетНачисленийНадбавок.Период
		|			И НачисленияНадбавки.ВидРасчета = ПриоритетНачисленийНадбавок.ВидРасчета
		|			И НачисленияНадбавки.Приоритет = ПриоритетНачисленийНадбавок.Приоритет
		|			И (НачисленияНадбавки.ВидРасчета ЕСТЬ НЕ NULL )
		|			И (ПриоритетНачисленийНадбавок.ВидРасчета ЕСТЬ НЕ NULL )
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачисленияНадбавки.Сотрудник,
		|	НачисленияНадбавки.СотрудникНаименование,
		|	НачисленияНадбавки.Физлицо,
		|	НачисленияНадбавки.Период,
		|	НачисленияНадбавки.Подходит,
		|	НачисленияНадбавки.ПериодРаботники,
		|	НачисленияНадбавки.ПериодНачисления,
		|	НачисленияНадбавки.ОсновноеНачисление,
		|	НачисленияНадбавки.ВидРасчета,
		|	НачисленияНадбавки.ВидРасчетаНаименование,
		|	НачисленияНадбавки.ВидРасчетаВидСтажа,
		|	НачисленияНадбавки.ВидРасчетаТребуетВводаТарифногоРазряда,
		|	НачисленияНадбавки.ВидРасчетаКоэффициентСтажа,
		|	НачисленияНадбавки.СпособРасчета,
		|	НачисленияНадбавки.НачисляетсяВЦеломЗаМесяц,
		|	НачисленияНадбавки.ВидВремени,
		|	НачисленияНадбавки.Действие,
		|	НачисленияНадбавки.КодВычета,
		|	НачисленияНадбавки.Показатель1,
		|	НачисленияНадбавки.Показатель2,
		|	НачисленияНадбавки.Показатель3,
		|	НачисленияНадбавки.Показатель4,
		|	НачисленияНадбавки.Показатель5,
		|	НачисленияНадбавки.Показатель6,
		|	НачисленияНадбавки.Валюта1,
		|	НачисленияНадбавки.Валюта2,
		|	НачисленияНадбавки.Валюта3,
		|	НачисленияНадбавки.Валюта4,
		|	НачисленияНадбавки.Валюта5,
		|	НачисленияНадбавки.Валюта6,
		|	НачисленияНадбавки.ДатаНачалаСобытия,
		|	НачисленияНадбавки.ПодразделениеОрганизации,
		|	НачисленияНадбавки.ГрафикРаботы,
		|	НачисленияНадбавки.СуммированныйУчетРабочегоВремени,
		|	НачисленияНадбавки.ДлительностьРабочейНедели,
		|	НачисленияНадбавки.ВидГрафика,
		|	НачисленияНадбавки.Должность
		|ИЗ
		|	ВТПлановыеНачисленияНадбавкиПоШР КАК НачисленияНадбавки
		|ГДЕ
		|	НачисленияНадбавки.ВидРасчета ЕСТЬ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ВидРасчета,
		|	Физлицо";
		
		Запрос.Выполнить();
		
		//получим все невводимые показатели
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокНачислений.Сотрудник КАК Сотрудник,
		|	СписокНачислений.Период,
		|	СписокНачислений.ПериодРаботники,
		|	СписокНачислений.ПериодНачисления,
		|	ВводимыеПоказатели.Показатель КАК Показатель,
		|	ВЫБОР
		|		КОГДА ВводимыеПоказатели.НомерСтроки = 1
		|			ТОГДА СписокНачислений.Показатель1
		|		КОГДА ВводимыеПоказатели.НомерСтроки = 2
		|			ТОГДА СписокНачислений.Показатель2
		|		КОГДА ВводимыеПоказатели.НомерСтроки = 3
		|			ТОГДА СписокНачислений.Показатель3
		|		КОГДА ВводимыеПоказатели.НомерСтроки = 4
		|			ТОГДА СписокНачислений.Показатель4
		|		КОГДА ВводимыеПоказатели.НомерСтроки = 5
		|			ТОГДА СписокНачислений.Показатель5
		|		КОГДА ВводимыеПоказатели.НомерСтроки = 6
		|			ТОГДА СписокНачислений.Показатель6
		|	КОНЕЦ КАК ЗначениеПоказателя
		|ПОМЕСТИТЬ ВТЗначенияВводимыхКадровыхПоказателей
		|ИЗ
		|	ВТРаботникиИНачисления КАК СписокНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВводимыеВПлановыхНачисленияхПоказатели КАК ВводимыеПоказатели
		|		ПО СписокНачислений.ВидРасчета = ВводимыеПоказатели.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|";
		Запрос.Выполнить();
		
	КонецЕсли;

	// таблица Показатели
	//   видам начислений приписываются введенные пользователями для каждого сотрудника значения показателей 
	// 
	// Поля:
	//   ВидРасчета
	//   Сотрудник
	//   Показатель1,2,...,6 - значения соответствующих показателей
	//   Валюта
	//
	          
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда 

		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиВидовРасчета.Ссылка КАК ВидРасчета,
		|	ПоказателиВидовРасчета.Показатель1.ТипПоказателя КАК ТипПоказателя1,
		|	ПоказателиВидовРасчета.Показатель2.ТипПоказателя КАК ТипПоказателя2,
		|	ПоказателиВидовРасчета.Показатель3.ТипПоказателя КАК ТипПоказателя3,
		|	ПоказателиВидовРасчета.Показатель4.ТипПоказателя КАК ТипПоказателя4,
		|	ПоказателиВидовРасчета.Показатель5.ТипПоказателя КАК ТипПоказателя5,
		|	ПоказателиВидовРасчета.Показатель6.ТипПоказателя КАК ТипПоказателя6,
		|	ПоказателиВидовРасчета.Показатель1 КАК Показатель1,
		|	ПоказателиВидовРасчета.Показатель2 КАК Показатель2,
		|	ПоказателиВидовРасчета.Показатель3 КАК Показатель3,
		|	ПоказателиВидовРасчета.Показатель4 КАК Показатель4,
		|	ПоказателиВидовРасчета.Показатель5 КАК Показатель5,
		|	ПоказателиВидовРасчета.Показатель6 КАК Показатель6,
		|	ПоказателиВидовРасчета.Показатель1.ВозможностьИзменения КАК ВозможностьИзменения1,
		|	ПоказателиВидовРасчета.Показатель2.ВозможностьИзменения КАК ВозможностьИзменения2,
		|	ПоказателиВидовРасчета.Показатель3.ВозможностьИзменения КАК ВозможностьИзменения3,
		|	ПоказателиВидовРасчета.Показатель4.ВозможностьИзменения КАК ВозможностьИзменения4,
		|	ПоказателиВидовРасчета.Показатель5.ВозможностьИзменения КАК ВозможностьИзменения5,
		|	ПоказателиВидовРасчета.Показатель6.ВозможностьИзменения КАК ВозможностьИзменения6
		|ПОМЕСТИТЬ ВТПоказателиИВР
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка,
		|		Показатели1.Показатель КАК Показатель1,
		|		Показатели2.Показатель КАК Показатель2,
		|		Показатели3.Показатель КАК Показатель3,
		|		Показатели4.Показатель КАК Показатель4,
		|		Показатели5.Показатель КАК Показатель5,
		|		Показатели6.Показатель КАК Показатель6
		|	ИЗ
		|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели1.Ссылка
		|				И (Показатели1.НомерСтроки = 1)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели2
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели2.Ссылка
		|				И (Показатели2.НомерСтроки = 2)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели3
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели3.Ссылка
		|				И (Показатели3.НомерСтроки = 3)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели4
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели4.Ссылка
		|				И (Показатели4.НомерСтроки = 4)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели5
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели5.Ссылка
		|				И (Показатели5.НомерСтроки = 5)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели6
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели6.Ссылка
		|				И (Показатели6.НомерСтроки = 6)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДополнительныеНачисленияОрганизаций.Ссылка,
		|		Показатели1.Показатель,
		|		Показатели2.Показатель,
		|		Показатели3.Показатель,
		|		Показатели4.Показатель,
		|		Показатели5.Показатель,
		|		Показатели6.Показатель
		|	ИЗ
		|		ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели1
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели1.Ссылка
		|				И (Показатели1.НомерСтроки = 1)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели2
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели2.Ссылка
		|				И (Показатели2.НомерСтроки = 2)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели3
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели3.Ссылка
		|				И (Показатели3.НомерСтроки = 3)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели4
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели4.Ссылка
		|				И (Показатели4.НомерСтроки = 4)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели5
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели5.Ссылка
		|				И (Показатели5.НомерСтроки = 5)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели6
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели6.Ссылка
		|				И (Показатели6.НомерСтроки = 6)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		УдержанияОрганизаций.Ссылка,
		|		Показатели1.Показатель,
		|		Показатели2.Показатель,
		|		Показатели3.Показатель,
		|		Показатели4.Показатель,
		|		Показатели5.Показатель,
		|		Показатели6.Показатель
		|	ИЗ
		|		ПланВидовРасчета.УдержанияОрганизаций КАК УдержанияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели1
		|			ПО УдержанияОрганизаций.Ссылка = Показатели1.Ссылка
		|				И (Показатели1.НомерСтроки = 1)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели2
		|			ПО УдержанияОрганизаций.Ссылка = Показатели2.Ссылка
		|				И (Показатели2.НомерСтроки = 2)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели3
		|			ПО УдержанияОрганизаций.Ссылка = Показатели3.Ссылка
		|				И (Показатели3.НомерСтроки = 3)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели4
		|			ПО УдержанияОрганизаций.Ссылка = Показатели4.Ссылка
		|				И (Показатели4.НомерСтроки = 4)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели5
		|			ПО УдержанияОрганизаций.Ссылка = Показатели5.Ссылка
		|				И (Показатели5.НомерСтроки = 5)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели6
		|			ПО УдержанияОрганизаций.Ссылка = Показатели6.Ссылка
		|				И (Показатели6.НомерСтроки = 6)) КАК ПоказателиВидовРасчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель1,
		|	Показатель2,
		|	Показатель3,
		|	Показатель4,
		|	Показатель5,
		|	Показатель6
		|";

		
		Запрос.Выполнить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиВидовРасчета.Ссылка КАК ВидРасчета,
		|	ПоказателиВидовРасчета.Показатель1.ТипПоказателя КАК ТипПоказателя1,
		|	ПоказателиВидовРасчета.Показатель2.ТипПоказателя КАК ТипПоказателя2,
		|	ПоказателиВидовРасчета.Показатель3.ТипПоказателя КАК ТипПоказателя3,
		|	ПоказателиВидовРасчета.Показатель4.ТипПоказателя КАК ТипПоказателя4,
		|	ПоказателиВидовРасчета.Показатель5.ТипПоказателя КАК ТипПоказателя5,
		|	ПоказателиВидовРасчета.Показатель6.ТипПоказателя КАК ТипПоказателя6,
		|	ПоказателиВидовРасчета.Показатель1 КАК Показатель1,
		|	ПоказателиВидовРасчета.Показатель2 КАК Показатель2,
		|	ПоказателиВидовРасчета.Показатель3 КАК Показатель3,
		|	ПоказателиВидовРасчета.Показатель4 КАК Показатель4,
		|	ПоказателиВидовРасчета.Показатель5 КАК Показатель5,
		|	ПоказателиВидовРасчета.Показатель6 КАК Показатель6,
		|	ПоказателиВидовРасчета.Показатель1.ВозможностьИзменения КАК ВозможностьИзменения1,
		|	ПоказателиВидовРасчета.Показатель2.ВозможностьИзменения КАК ВозможностьИзменения2,
		|	ПоказателиВидовРасчета.Показатель3.ВозможностьИзменения КАК ВозможностьИзменения3,
		|	ПоказателиВидовРасчета.Показатель4.ВозможностьИзменения КАК ВозможностьИзменения4,
		|	ПоказателиВидовРасчета.Показатель5.ВозможностьИзменения КАК ВозможностьИзменения5,
		|	ПоказателиВидовРасчета.Показатель6.ВозможностьИзменения КАК ВозможностьИзменения6
		|ПОМЕСТИТЬ ВТПоказателиИВР
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка,
		|		Показатели1.Показатель КАК Показатель1,
		|		Показатели2.Показатель КАК Показатель2,
		|		Показатели3.Показатель КАК Показатель3,
		|		Показатели4.Показатель КАК Показатель4,
		|		Показатели5.Показатель КАК Показатель5,
		|		Показатели6.Показатель КАК Показатель6
		|	ИЗ
		|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели1
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели1.Ссылка
		|				И (Показатели1.НомерСтроки = 1)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели2
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели2.Ссылка
		|				И (Показатели2.НомерСтроки = 2)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели3
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели3.Ссылка
		|				И (Показатели3.НомерСтроки = 3)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели4
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели4.Ссылка
		|				И (Показатели4.НомерСтроки = 4)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели5
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели5.Ссылка
		|				И (Показатели5.НомерСтроки = 5)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели6
		|			ПО ОсновныеНачисленияОрганизаций.Ссылка = Показатели6.Ссылка
		|				И (Показатели6.НомерСтроки = 6)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДополнительныеНачисленияОрганизаций.Ссылка,
		|		Показатели1.Показатель,
		|		Показатели2.Показатель,
		|		Показатели3.Показатель,
		|		Показатели4.Показатель,
		|		Показатели5.Показатель,
		|		Показатели6.Показатель
		|	ИЗ
		|		ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели1
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели1.Ссылка
		|				И (Показатели1.НомерСтроки = 1)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели2
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели2.Ссылка
		|				И (Показатели2.НомерСтроки = 2)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели3
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели3.Ссылка
		|				И (Показатели3.НомерСтроки = 3)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели4
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели4.Ссылка
		|				И (Показатели4.НомерСтроки = 4)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели5
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели5.Ссылка
		|				И (Показатели5.НомерСтроки = 5)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели6
		|			ПО ДополнительныеНачисленияОрганизаций.Ссылка = Показатели6.Ссылка
		|				И (Показатели6.НомерСтроки = 6)
		|) КАК ПоказателиВидовРасчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель1,
		|	Показатель2,
		|	Показатель3,
		|	Показатель4,
		|	Показатель5,
		|	Показатель6
		|";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиВидовРасчета.Ссылка КАК ВидРасчета,
		|	ПоказателиВидовРасчета.Показатель1.ТипПоказателя КАК ТипПоказателя1,
		|	ПоказателиВидовРасчета.Показатель2.ТипПоказателя КАК ТипПоказателя2,
		|	ПоказателиВидовРасчета.Показатель3.ТипПоказателя КАК ТипПоказателя3,
		|	ПоказателиВидовРасчета.Показатель4.ТипПоказателя КАК ТипПоказателя4,
		|	ПоказателиВидовРасчета.Показатель5.ТипПоказателя КАК ТипПоказателя5,
		|	ПоказателиВидовРасчета.Показатель6.ТипПоказателя КАК ТипПоказателя6,
		|	ПоказателиВидовРасчета.Показатель1 КАК Показатель1,
		|	ПоказателиВидовРасчета.Показатель2 КАК Показатель2,
		|	ПоказателиВидовРасчета.Показатель3 КАК Показатель3,
		|	ПоказателиВидовРасчета.Показатель4 КАК Показатель4,
		|	ПоказателиВидовРасчета.Показатель5 КАК Показатель5,
		|	ПоказателиВидовРасчета.Показатель6 КАК Показатель6,
		|	ПоказателиВидовРасчета.Показатель1.ВозможностьИзменения КАК ВозможностьИзменения1,
		|	ПоказателиВидовРасчета.Показатель2.ВозможностьИзменения КАК ВозможностьИзменения2,
		|	ПоказателиВидовРасчета.Показатель3.ВозможностьИзменения КАК ВозможностьИзменения3,
		|	ПоказателиВидовРасчета.Показатель4.ВозможностьИзменения КАК ВозможностьИзменения4,
		|	ПоказателиВидовРасчета.Показатель5.ВозможностьИзменения КАК ВозможностьИзменения5,
		|	ПоказателиВидовРасчета.Показатель6.ВозможностьИзменения КАК ВозможностьИзменения6
		|ПОМЕСТИТЬ ВТПоказателиИВР
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		УдержанияОрганизаций.Ссылка КАК Ссылка,
		|		Показатели1.Показатель КАК Показатель1,
		|		Показатели2.Показатель КАК Показатель2,
		|		Показатели3.Показатель КАК Показатель3,
		|		Показатели4.Показатель КАК Показатель4,
		|		Показатели5.Показатель КАК Показатель5,
		|		Показатели6.Показатель КАК Показатель6
		|	ИЗ
		|		ПланВидовРасчета.УдержанияОрганизаций КАК УдержанияОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели1
		|			ПО УдержанияОрганизаций.Ссылка = Показатели1.Ссылка
		|				И (Показатели1.НомерСтроки = 1)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели2
		|			ПО УдержанияОрганизаций.Ссылка = Показатели2.Ссылка
		|				И (Показатели2.НомерСтроки = 2)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели3
		|			ПО УдержанияОрганизаций.Ссылка = Показатели3.Ссылка
		|				И (Показатели3.НомерСтроки = 3)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели4
		|			ПО УдержанияОрганизаций.Ссылка = Показатели4.Ссылка
		|				И (Показатели4.НомерСтроки = 4)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели5
		|			ПО УдержанияОрганизаций.Ссылка = Показатели5.Ссылка
		|				И (Показатели5.НомерСтроки = 5)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.Показатели КАК Показатели6
		|			ПО УдержанияОрганизаций.Ссылка = Показатели6.Ссылка
		|				И (Показатели6.НомерСтроки = 6)) КАК ПоказателиВидовРасчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель1,
		|	Показатель2,
		|	Показатель3,
		|	Показатель4,
		|	Показатель5,
		|	Показатель6";
		
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                |	ВложеныйЗапрос.ВидРасчета КАК ВидРасчета,
	                |	ВложеныйЗапрос.Сотрудник КАК Сотрудник,
	                |	ВложеныйЗапрос.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	                |	МАКСИМУМ(ВложеныйЗапрос.ТипПоказателя1) КАК ТипПоказателя1,
	                |	МАКСИМУМ(ВложеныйЗапрос.ВозможностьИзменения1) КАК ВозможностьИзменения1,
	                |	МАКСИМУМ(ВложеныйЗапрос.Показатель1) КАК Показатель1,
	                |	МАКСИМУМ(ВложеныйЗапрос.ТипПоказателя2) КАК ТипПоказателя2,
	                |	МАКСИМУМ(ВложеныйЗапрос.ВозможностьИзменения2) КАК ВозможностьИзменения2,
	                |	МАКСИМУМ(ВложеныйЗапрос.Показатель2) КАК Показатель2,
	                |	МАКСИМУМ(ВложеныйЗапрос.ТипПоказателя3) КАК ТипПоказателя3,
	                |	МАКСИМУМ(ВложеныйЗапрос.ВозможностьИзменения3) КАК ВозможностьИзменения3,
	                |	МАКСИМУМ(ВложеныйЗапрос.Показатель3) КАК Показатель3,
	                |	МАКСИМУМ(ВложеныйЗапрос.ТипПоказателя4) КАК ТипПоказателя4,
	                |	МАКСИМУМ(ВложеныйЗапрос.ВозможностьИзменения4) КАК ВозможностьИзменения4,
	                |	МАКСИМУМ(ВложеныйЗапрос.Показатель4) КАК Показатель4,
	                |	МАКСИМУМ(ВложеныйЗапрос.ТипПоказателя5) КАК ТипПоказателя5,
	                |	МАКСИМУМ(ВложеныйЗапрос.ВозможностьИзменения5) КАК ВозможностьИзменения5,
	                |	МАКСИМУМ(ВложеныйЗапрос.Показатель5) КАК Показатель5,
	                |	МАКСИМУМ(ВложеныйЗапрос.ТипПоказателя6) КАК ТипПоказателя6,
	                |	МАКСИМУМ(ВложеныйЗапрос.ВозможностьИзменения6) КАК ВозможностьИзменения6,
	                |	МАКСИМУМ(ВложеныйЗапрос.Показатель6) КАК Показатель6,
	                |	МАКСИМУМ(ВложеныйЗапрос.Валюта1) КАК Валюта1,
	                |	МАКСИМУМ(ВложеныйЗапрос.Валюта2) КАК Валюта2,
	                |	МАКСИМУМ(ВложеныйЗапрос.Валюта3) КАК Валюта3,
	                |	МАКСИМУМ(ВложеныйЗапрос.Валюта4) КАК Валюта4,
	                |	МАКСИМУМ(ВложеныйЗапрос.Валюта5) КАК Валюта5,
	                |	МАКСИМУМ(ВложеныйЗапрос.Валюта6) КАК Валюта6
					|ПОМЕСТИТЬ ВТПоказатели
	                |ИЗ
	                |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |		ПоказателиИВР.ВидРасчета КАК ВидРасчета,
	                |		ЗначенияПоказателей1.Сотрудник КАК Сотрудник,
	                |		ЗначенияПоказателей1.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	                |		ПоказателиИВР.ТипПоказателя1 КАК ТипПоказателя1,
	                |		ПоказателиИВР.ВозможностьИзменения1 КАК ВозможностьИзменения1,
	                |		ЗначенияПоказателей1.Значение КАК Показатель1,
	                |		NULL КАК ТипПоказателя2,
	                |		NULL КАК ВозможностьИзменения2,
	                |		NULL КАК Показатель2,
	                |		NULL КАК ТипПоказателя3,
	                |		NULL КАК ВозможностьИзменения3,
	                |		NULL КАК Показатель3,
	                |		NULL КАК ТипПоказателя4,
	                |		NULL КАК ВозможностьИзменения4,
	                |		NULL КАК Показатель4,
	                |		NULL КАК ТипПоказателя5,
	                |		NULL КАК ВозможностьИзменения5,
	                |		NULL КАК Показатель5,
	                |		NULL КАК ТипПоказателя6,
	                |		NULL КАК ВозможностьИзменения6,
	                |		NULL КАК Показатель6,
	                |		ЗначенияПоказателей1.Валюта КАК Валюта1,
	                |		NULL КАК Валюта2,
	                |		NULL КАК Валюта3,
	                |		NULL КАК Валюта4,
	                |		NULL КАК Валюта5,
	                |		NULL КАК Валюта6
	                |	ИЗ
	                |		ВТПоказателиИВР КАК ПоказателиИВР
	                |			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей1
	                |			ПО ПоказателиИВР.Показатель1 = ЗначенияПоказателей1.Показатель
	                |	
	                |	ОБЪЕДИНИТЬ
	                |	
	                |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |		ПоказателиИВР.ВидРасчета,
	                |		ЗначенияПоказателей2.Сотрудник,
	                |		ЗначенияПоказателей2.ПодразделениеОрганизации,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ПоказателиИВР.ТипПоказателя2,
	                |		ПоказателиИВР.ВозможностьИзменения2,
	                |		ЗначенияПоказателей2.Значение,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ЗначенияПоказателей2.Валюта,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL
	                |	ИЗ
	                |		ВТПоказателиИВР КАК ПоказателиИВР
	                |			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей2
	                |			ПО ПоказателиИВР.Показатель2 = ЗначенияПоказателей2.Показатель
	                |	
	                |	ОБЪЕДИНИТЬ
	                |	
	                |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |		ПоказателиИВР.ВидРасчета,
	                |		ЗначенияПоказателей3.Сотрудник,
	                |		ЗначенияПоказателей3.ПодразделениеОрганизации,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ПоказателиИВР.ТипПоказателя3,
	                |		ПоказателиИВР.ВозможностьИзменения3,
	                |		ЗначенияПоказателей3.Значение,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ЗначенияПоказателей3.Валюта,
	                |		NULL,
	                |		NULL,
	                |		NULL
	                |	ИЗ
	                |		ВТПоказателиИВР КАК ПоказателиИВР
	                |			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей3
	                |			ПО ПоказателиИВР.Показатель3 = ЗначенияПоказателей3.Показатель
	                |	
	                |	ОБЪЕДИНИТЬ
	                |	
	                |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |		ПоказателиИВР.ВидРасчета,
	                |		ЗначенияПоказателей4.Сотрудник,
	                |		ЗначенияПоказателей4.ПодразделениеОрганизации,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ПоказателиИВР.ТипПоказателя4,
	                |		ПоказателиИВР.ВозможностьИзменения4,
	                |		ЗначенияПоказателей4.Значение,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ЗначенияПоказателей4.Валюта,
	                |		NULL,
	                |		NULL
	                |	ИЗ
	                |		ВТПоказателиИВР КАК ПоказателиИВР
	                |			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей4
	                |			ПО ПоказателиИВР.Показатель4 = ЗначенияПоказателей4.Показатель
	                |	
	                |	ОБЪЕДИНИТЬ
	                |	
	                |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |		ПоказателиИВР.ВидРасчета,
	                |		ЗначенияПоказателей5.Сотрудник,
	                |		ЗначенияПоказателей5.ПодразделениеОрганизации,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ПоказателиИВР.ТипПоказателя5,
	                |		ПоказателиИВР.ВозможностьИзменения5,
	                |		ЗначенияПоказателей5.Значение,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ЗначенияПоказателей5.Валюта,
	                |		NULL
	                |	ИЗ
	                |		ВТПоказателиИВР КАК ПоказателиИВР
	                |			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей5
	                |			ПО ПоказателиИВР.Показатель5 = ЗначенияПоказателей5.Показатель
	                |	
	                |	ОБЪЕДИНИТЬ
	                |	
	                |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |		ПоказателиИВР.ВидРасчета,
	                |		ЗначенияПоказателей6.Сотрудник,
	                |		ЗначенияПоказателей6.ПодразделениеОрганизации,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ПоказателиИВР.ТипПоказателя6,
	                |		ПоказателиИВР.ВозможностьИзменения6,
	                |		ЗначенияПоказателей6.Значение,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		NULL,
	                |		ЗначенияПоказателей6.Валюта
	                |	ИЗ
	                |		ВТПоказателиИВР КАК ПоказателиИВР
	                |			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей6
	                |			ПО ПоказателиИВР.Показатель6 = ЗначенияПоказателей6.Показатель) КАК ВложеныйЗапрос
	                |ГДЕ
	                |	(ВложеныйЗапрос.Показатель1 <> 0
	                |			ИЛИ ВложеныйЗапрос.Показатель2 <> 0
	                |			ИЛИ ВложеныйЗапрос.Показатель3 <> 0
	                |			ИЛИ ВложеныйЗапрос.Показатель4 <> 0
	                |			ИЛИ ВложеныйЗапрос.Показатель5 <> 0
	                |			ИЛИ ВложеныйЗапрос.Показатель6 <> 0)
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ВложеныйЗапрос.ВидРасчета,
	                |	ВложеныйЗапрос.Сотрудник,
	                |	ВложеныйЗапрос.ПодразделениеОрганизации
	                |
					|ИНДЕКСИРОВАТЬ ПО
					|	Сотрудник,
					|	ПодразделениеОрганизации,
					|	ВидРасчета
					|";
					
	Запрос.Выполнить();
	
	МассивВалютСНезаданнымКурсом = Новый Соответствие;
	
	// АВТОЗАПОЛНЕНИЕ ТЧ "Начисления", "ДополнительныеНачисления" и "ДоговорыНаВыполнениеРабот"
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
		
		// таблица ОсновныеНачисления  
		//	    выборка сведений об уже выполненных начислениях за отработанное время - для выбрасывания 
		// 		ранее "обслуженных" работников
		//	Поля:
		//		Сотрудник,
		//		ПодразделениеОрганизации
		//
		
		Если ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗарплатаЗаПервуюПоловинуМесяца.Сотрудник КАК Сотрудник,
			|	ТаблицаДвиженийРаботников.ПодразделениеОрганизации
			|ПОМЕСТИТЬ ВТОсновныеНачисления
			|ИЗ
			|	РегистрНакопления.ЗарплатаЗаПервуюПоловинуМесяца КАК ЗарплатаЗаПервуюПоловинуМесяца
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДвиженияРаботников КАК ТаблицаДвиженийРаботников
			|		ПО ЗарплатаЗаПервуюПоловинуМесяца.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
			|ГДЕ
			|	ЗарплатаЗаПервуюПоловинуМесяца.Организация = &парамОрганизация
			|	И ЗарплатаЗаПервуюПоловинуМесяца.Регистратор <> &парамРегистратор
			|	И НАЧАЛОПЕРИОДА(ЗарплатаЗаПервуюПоловинуМесяца.Период, МЕСЯЦ) = &парамНачалоМесяца
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";		
			Запрос.Выполнить();
			
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
			|	ОсновныеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации
			|ПОМЕСТИТЬ ВТОсновныеНачисления
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДвиженияРаботников КАК ТаблицаДвиженийРаботников
			|		ПО ОсновныеНачисления.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
			|ГДЕ
			|	ОсновныеНачисления.ПериодРегистрации = &парамПериодРегистрации
			|	И ОсновныеНачисления.ПериодДействияКонец <= &парамКонец
			|	И ОсновныеНачисления.ПериодДействияНачало >= &парамНачало
			|	И ОсновныеНачисления.Организация = &парамГоловнаяОрганизация
			|	И (ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
			|				И ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени
			|			ИЛИ ОсновныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты))
			|	И (НЕ ОсновныеНачисления.Сторно)
			|	И ОсновныеНачисления.Регистратор <> &парамРегистратор
			|	И ОсновныеНачисления.ОбособленноеПодразделение = &парамОрганизация
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник
			|";
			Запрос.Выполнить();
			
		КонецЕсли;
		
		// НормаВремениПоСводнымИндивидуальнымГрафикам
		//		Сотрудники, для которых введены сводные данные об их графике
		// 
		//	Поля:
		//		Сотрудник
		//		ЧасовЗаМесяц - указанное пользователем значение
		// 
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокРаботников.Сотрудник КАК Сотрудник,
		|	СводныеИндивидуальныеГрафики.Часов КАК ЧасовЗаМесяц
		|ПОМЕСТИТЬ ВТНормаВремениПоСводнымИндивидуальнымГрафикам
		|ИЗ
		|	ВТСписокРаботников КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
		|			И (СводныеИндивидуальныеГрафики.Месяц = &парамНачалоМесяца)
		|ГДЕ
		|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		// НормаВремениПоЕжедневнымИндивидуальнымГрафикам
		//		Таблица сотрудников и нормы времени в часах, введенной индивидуальными графиками
		// 
		//	Поля:
		//		Сотрудник,
		//		ЧасовЗаМесяц - суммируем все часы рабочего времени
		// 
		// Описание:
		//
		//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени,	
		//	введенные доками ВводИндивидуальныхГрафиков, т.е. по строкам с выставленным флажком План
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СписокРаботников.Сотрудник КАК Сотрудник,
		|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц
		|ПОМЕСТИТЬ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам
		|ИЗ
		|	ВТСписокРаботников КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО СписокРаботников.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = &парамНачалоМесяца)
		|			И (ГрафикиРаботыПоВидамВремени.План)
		|ГДЕ
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокРаботников.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		// НормаВремениПоОбщимГрафикам
		//		Таблица сотрудников и нормы времени в часах по общим графикам
		// 
		//	Поля:
		//		Сотрудник,
		//		ЧасовЗаМесяц - суммируем все часы рабочего времени
		// 
		// Описание:
		//
		//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени для общих графиков
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокРаботников.Сотрудник КАК Сотрудник,
		|	СписокРаботников.ГрафикРаботы,
		|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц
		|ПОМЕСТИТЬ ВТНормаВремениПоОбщимГрафикам
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СписокРаботников.Сотрудник КАК Сотрудник,
		|		ВЫБОР
		|			КОГДА СписокРаботников.ГрафикРаботы.СокращенноеРабочееВремя
		|					И СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|				ТОГДА СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени
		|			ИНАЧЕ СписокРаботников.ГрафикРаботы
		|		КОНЕЦ КАК ГрафикРаботыНорма,
		|		СписокРаботников.ГрафикРаботы КАК ГрафикРаботы
		|	ИЗ
		|		ВТДвиженияРаботников КАК СписокРаботников) КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = &парамНачалоМесяца)
		|			И (ГрафикиРаботыПоВидамВремени.План)
		|			И СписокРаботников.ГрафикРаботыНорма = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|ГДЕ
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокРаботников.Сотрудник,
		|	СписокРаботников.ГрафикРаботы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатыСтажа.Сотрудник КАК Сотрудник,
		|	ДатыСтажа.Физлицо,
		|	ДатыСтажа.ПериодРаботники,
		|	ДатыСтажа.ПериодСеверногоСтажа КАК ДатаРегистрацииСеверногоСтажа,
		|	СведенияОСтажеРаботыНаСевере.ПорядокНачисленияСеверныхНадбавок,
		|	СведенияОСтажеРаботыНаСевере.НачальныйПроцентСевернойНадбавки,
		|	СведенияОСтажеРаботыНаСевере.СеверныйСтажМесяцев,
		|	СведенияОСтажеРаботыНаСевере.СеверныйСтажДней
		|ПОМЕСТИТЬ ВТДанныеОСеверномСтаже
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписокНачислений.Сотрудник КАК Сотрудник,
		|		СписокНачислений.Физлицо КАК Физлицо,
		|		СписокНачислений.ПериодРаботники КАК ПериодРаботники,
		|		МАКСИМУМ(СведенияОСтажеРаботыНаСевере.Период) КАК ПериодСеверногоСтажа
		|	ИЗ
		|		ВТРаботникиИНачисления КАК СписокНачислений
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтажеРаботыНаСевере КАК СведенияОСтажеРаботыНаСевере
		|			ПО СписокНачислений.Физлицо = СведенияОСтажеРаботыНаСевере.ФизЛицо
		|				И СписокНачислений.ПериодРаботники >= СведенияОСтажеРаботыНаСевере.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СписокНачислений.Сотрудник,
		|		СписокНачислений.Физлицо,
		|		СписокНачислений.ПериодРаботники) КАК ДатыСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтажеРаботыНаСевере КАК СведенияОСтажеРаботыНаСевере
		|		ПО ДатыСтажа.Физлицо = СведенияОСтажеРаботыНаСевере.ФизЛицо
		|			И ДатыСтажа.ПериодСеверногоСтажа = СведенияОСтажеРаботыНаСевере.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		// РаботникиИНачисленияПоСхемамМотивации
		//		Таблица движений работников и сведениями об их плановых начислениях
		//      с добавленными значениями показателей, как введенными пользователями для расчета, так и 
		//      выбранными из строк плановых начислений, содержащих тарифные ставки по "основным" начислениям работника
		// 
		//	Поля:
		//		Сотрудник 
		//		ВидРасчета - плановое начисление 
		//		Показатель1,...,6 - размеры показателей 
		//		СпособРасчета - способ расчета начисления 
		//		ОкладТариф - размер трифной ставки, если начисление ее содержит  
		//		ГрафикРаботы - график сотрудника  
		//		ВидГрафика, СуммированныйУчетРабочегоВремени, ДлительностьРабочейНедели - реквизиты графика сотрудника 
		// 
		// Описание:
		//
		//	1. 
		//  2. 
		//
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокНачислений.Сотрудник КАК Сотрудник,
		|	СписокНачислений.СотрудникНаименование,
		|	СписокНачислений.Физлицо,
		|	СписокНачислений.ПодразделениеОрганизации,
		|	СписокНачислений.Подходит,
		|	СписокНачислений.Период,
		|	СписокНачислений.ПериодРаботники,
		|	СписокНачислений.ПериодНачисления,
		|	СписокНачислений.ОсновноеНачисление,
		|	СписокНачислений.ВидРасчета,
		|	СписокНачислений.ВидРасчетаНаименование,
		|	СписокНачислений.ВидРасчетаКоэффициентСтажа,
		|	СписокНачислений.ВидРасчетаВидСтажа,
		|	СписокНачислений.ВидРасчетаТребуетВводаТарифногоРазряда,
		|	СписокНачислений.СпособРасчета,
		|	СписокНачислений.НачисляетсяВЦеломЗаМесяц,
		|	СписокНачислений.ВидВремени,
		|	СписокНачислений.Действие,
		|	СписокНачислений.КодВычета,
		|	СписокНачислений.ДатаНачалаСобытия,
		|	СписокНачислений.ГрафикРаботы,
		|	СписокНачислений.СуммированныйУчетРабочегоВремени,
		|	СписокНачислений.ДлительностьРабочейНедели,
		|	СписокНачислений.ВидГрафика,
		|	ВЫБОР КОГДА СписокНачислений.Валюта1 ЕСТЬ NULL ИЛИ СписокНачислений.Валюта1 = Значение(Справочник.Валюты.ПустаяСсылка) ТОГДА ПоказателиВведенныеПриРасчете.Валюта1 ИНАЧЕ СписокНачислений.Валюта1 КОНЕЦ КАК Валюта1,
		|	ВЫБОР КОГДА СписокНачислений.Валюта2 ЕСТЬ NULL ИЛИ СписокНачислений.Валюта2 = Значение(Справочник.Валюты.ПустаяСсылка) ТОГДА ПоказателиВведенныеПриРасчете.Валюта2 ИНАЧЕ СписокНачислений.Валюта2 КОНЕЦ КАК Валюта2,
		|	ВЫБОР КОГДА СписокНачислений.Валюта3 ЕСТЬ NULL ИЛИ СписокНачислений.Валюта3 = Значение(Справочник.Валюты.ПустаяСсылка) ТОГДА ПоказателиВведенныеПриРасчете.Валюта3 ИНАЧЕ СписокНачислений.Валюта3 КОНЕЦ КАК Валюта3,
		|	ВЫБОР КОГДА СписокНачислений.Валюта4 ЕСТЬ NULL ИЛИ СписокНачислений.Валюта4 = Значение(Справочник.Валюты.ПустаяСсылка) ТОГДА ПоказателиВведенныеПриРасчете.Валюта4 ИНАЧЕ СписокНачислений.Валюта4 КОНЕЦ КАК Валюта4,
		|	ВЫБОР КОГДА СписокНачислений.Валюта5 ЕСТЬ NULL ИЛИ СписокНачислений.Валюта5 = Значение(Справочник.Валюты.ПустаяСсылка) ТОГДА ПоказателиВведенныеПриРасчете.Валюта5 ИНАЧЕ СписокНачислений.Валюта5 КОНЕЦ КАК Валюта5,
		|	ВЫБОР КОГДА СписокНачислений.Валюта6 ЕСТЬ NULL ИЛИ СписокНачислений.Валюта6 = Значение(Справочник.Валюты.ПустаяСсылка) ТОГДА ПоказателиВведенныеПриРасчете.Валюта6 ИНАЧЕ СписокНачислений.Валюта6 КОНЕЦ КАК Валюта6,
		|	ВЫБОР КОГДА СписокНачислений.Валюта1 ЕСТЬ NULL ИЛИ СписокНачислений.Валюта1 = Значение(Справочник.Валюты.ПустаяСсылка) ТОГДА
		|			ВЫБОР КОГДА ПоказателиВведенныеПриРасчете.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))	ТОГДА 1	ИНАЧЕ ПВалюты1.Курс	КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР КОГДА СписокНачислений.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) ТОГДА 1	ИНАЧЕ Валюты1.Курс	КОНЕЦ
		|	КОНЕЦ КАК КурсВалюты1,
		|	ВЫБОР КОГДА СписокНачислений.Валюта2 ЕСТЬ NULL ТОГДА
		|			ВЫБОР КОГДА ПоказателиВведенныеПриРасчете.Валюта2 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))	ТОГДА 1	ИНАЧЕ ПВалюты2.Курс	КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР КОГДА СписокНачислений.Валюта2 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) ТОГДА 1 ИНАЧЕ Валюты2.Курс КОНЕЦ
		|	КОНЕЦ КАК КурсВалюты2,
		|	ВЫБОР КОГДА СписокНачислений.Валюта3 ЕСТЬ NULL ТОГДА
		|			ВЫБОР КОГДА ПоказателиВведенныеПриРасчете.Валюта3 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) ТОГДА 1	ИНАЧЕ ПВалюты3.Курс	КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР КОГДА СписокНачислений.Валюта3 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))	ТОГДА 1	ИНАЧЕ Валюты3.Курс	КОНЕЦ
		|	КОНЕЦ КАК КурсВалюты3,
		|	ВЫБОР КОГДА СписокНачислений.Валюта4 ЕСТЬ NULL ТОГДА
		|			ВЫБОР	КОГДА ПоказателиВведенныеПриРасчете.Валюта4 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))	ТОГДА 1	ИНАЧЕ ПВалюты4.Курс	КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР	КОГДА СписокНачислений.Валюта4 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))	ТОГДА 1	ИНАЧЕ Валюты4.Курс	КОНЕЦ
		|	КОНЕЦ КАК КурсВалюты4,
		|	ВЫБОР КОГДА СписокНачислений.Валюта5 ЕСТЬ NULL ТОГДА
		|			ВЫБОР	КОГДА ПоказателиВведенныеПриРасчете.Валюта5 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))	ТОГДА 1	ИНАЧЕ ПВалюты5.Курс	КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР	КОГДА СписокНачислений.Валюта5 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))	ТОГДА 1	ИНАЧЕ Валюты5.Курс	КОНЕЦ
		|	КОНЕЦ КАК КурсВалюты5,
		|	ВЫБОР КОГДА СписокНачислений.Валюта6 ЕСТЬ NULL ТОГДА
		|			ВЫБОР	КОГДА ПоказателиВведенныеПриРасчете.Валюта6 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))	ТОГДА 1	ИНАЧЕ ПВалюты6.Курс	КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР	КОГДА СписокНачислений.Валюта6 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))	ТОГДА 1	ИНАЧЕ Валюты6.Курс	КОНЕЦ
		|	КОНЕЦ КАК КурсВалюты6,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
		|				И ПоказателиВведенныеПриРасчете.Показатель1 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА ПоказателиВведенныеПриРасчете.Показатель1 ЕСТЬ НЕ NULL 
		|				ИЛИ (ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Периодически))
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 1
		|			ТОГДА 
		|				ВЫБОР 
		|					КОГДА ПоказателиВведенныеПриРасчете.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|							ТОГДА ПоказателиВведенныеПриРасчете.Показатель1
		|					ИНАЧЕ ПоказателиВведенныеПриРасчете.Показатель1 * ЕСТЬNULL(ПВалюты1.Курс / ПВалюты1.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА (СписокНачислений.Показатель1 = 0
		|				ИЛИ СписокНачислений.Показатель1 ЕСТЬ NULL )
		|				И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 1
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 1)
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|			ТОГДА СписокНачислений.Показатель1
		|		КОГДА СписокНачислений.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель1
		|		ИНАЧЕ СписокНачислений.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
		|	КОНЕЦ КАК Показатель1,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель2 ЕСТЬ NULL 
		|				И ПоказателиВведенныеПриРасчете.Показатель2 ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ NULL 
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.НомерСтроки <> 2)
		|			ТОГДА 0
		|		КОГДА ПоказателиВведенныеПриРасчете.Показатель2 ЕСТЬ НЕ NULL 
		|				ИЛИ (ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Периодически))
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 2
		|			ТОГДА 
		|				ВЫБОР 
		|					КОГДА ПоказателиВведенныеПриРасчете.Валюта2 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|							ТОГДА ПоказателиВведенныеПриРасчете.Показатель2
		|					ИНАЧЕ ПоказателиВведенныеПриРасчете.Показатель2 * ЕСТЬNULL(ПВалюты2.Курс / ПВалюты2.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА (СписокНачислений.Показатель2 = 0
		|				ИЛИ СписокНачислений.Показатель2 ЕСТЬ NULL )
		|				И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 2
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 2)
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		КОГДА СписокНачислений.Показатель2 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|			ТОГДА СписокНачислений.Показатель2
		|		КОГДА СписокНачислений.Валюта2 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель2
		|		ИНАЧЕ СписокНачислений.Показатель2 * ЕСТЬNULL(Валюты2.Курс / Валюты2.Кратность, 0)
		|	КОНЕЦ КАК Показатель2,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель3 ЕСТЬ NULL 
		|				И ПоказателиВведенныеПриРасчете.Показатель3 ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ NULL 
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.НомерСтроки <> 3)
		|			ТОГДА 0
		|		КОГДА ПоказателиВведенныеПриРасчете.Показатель3 ЕСТЬ НЕ NULL 
		|				ИЛИ (ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Периодически))				
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 3
		|			ТОГДА
		|				ВЫБОР 
		|					КОГДА ПоказателиВведенныеПриРасчете.Валюта3 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|							ТОГДА ПоказателиВведенныеПриРасчете.Показатель3
		|					ИНАЧЕ ПоказателиВведенныеПриРасчете.Показатель3 * ЕСТЬNULL(ПВалюты3.Курс / ПВалюты3.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА СписокНачислений.Показатель3 = 0
		|				И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 3
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 3)
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		КОГДА СписокНачислений.Показатель3 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|			ТОГДА СписокНачислений.Показатель3
		|		КОГДА СписокНачислений.Валюта3 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель3
		|		ИНАЧЕ СписокНачислений.Показатель3 * ЕСТЬNULL(Валюты3.Курс / Валюты3.Кратность, 0)
		|	КОНЕЦ КАК Показатель3,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель4 ЕСТЬ NULL 
		|				И ПоказателиВведенныеПриРасчете.Показатель4 ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ NULL 
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.НомерСтроки <> 4)
		|			ТОГДА 0
		|		КОГДА ПоказателиВведенныеПриРасчете.Показатель4 ЕСТЬ НЕ NULL 
		|				ИЛИ (ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Периодически))		
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 4
		|			ТОГДА 
		|				ВЫБОР 
		|					КОГДА ПоказателиВведенныеПриРасчете.Валюта4 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|							ТОГДА ПоказателиВведенныеПриРасчете.Показатель4
		|					ИНАЧЕ ПоказателиВведенныеПриРасчете.Показатель4 * ЕСТЬNULL(ПВалюты3.Курс / ПВалюты4.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА СписокНачислений.Показатель4 = 0
		|				И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 4
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 4)
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		КОГДА СписокНачислений.Показатель4 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|			ТОГДА СписокНачислений.Показатель4
		|		КОГДА СписокНачислений.Валюта4 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель4
		|		ИНАЧЕ СписокНачислений.Показатель4 * ЕСТЬNULL(Валюты4.Курс / Валюты4.Кратность, 0)
		|	КОНЕЦ КАК Показатель4,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель5 ЕСТЬ NULL 
		|				И ПоказателиВведенныеПриРасчете.Показатель5 ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ NULL 
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.НомерСтроки <> 5)
		|			ТОГДА 0
		|		КОГДА ПоказателиВведенныеПриРасчете.Показатель5 ЕСТЬ НЕ NULL 
		|				ИЛИ (ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Периодически))
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 5
		|			ТОГДА 
		|				ВЫБОР 
		|					КОГДА ПоказателиВведенныеПриРасчете.Валюта5 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|							ТОГДА ПоказателиВведенныеПриРасчете.Показатель5
		|					ИНАЧЕ ПоказателиВведенныеПриРасчете.Показатель5 * ЕСТЬNULL(ПВалюты5.Курс / ПВалюты5.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА СписокНачислений.Показатель5 = 0
		|				И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 5
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 5)
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		КОГДА СписокНачислений.Показатель5 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|			ТОГДА СписокНачислений.Показатель5
		|		КОГДА СписокНачислений.Валюта5 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель5
		|		ИНАЧЕ СписокНачислений.Показатель5 * ЕСТЬNULL(Валюты5.Курс / Валюты5.Кратность, 0)
		|	КОНЕЦ КАК Показатель5,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель6 ЕСТЬ NULL 
		|				И ПоказателиВведенныеПриРасчете.Показатель6 ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ NULL 
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.НомерСтроки <> 6)
		|			ТОГДА 0
		|		КОГДА ПоказателиВведенныеПриРасчете.Показатель6 ЕСТЬ НЕ NULL 
		|				ИЛИ (ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Периодически))
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 6
		|			ТОГДА 
		|				ВЫБОР 
		|					КОГДА ПоказателиВведенныеПриРасчете.Валюта6 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|							ТОГДА ПоказателиВведенныеПриРасчете.Показатель6
		|					ИНАЧЕ ПоказателиВведенныеПриРасчете.Показатель6 * ЕСТЬNULL(ПВалюты3.Курс / ПВалюты6.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА СписокНачислений.Показатель6 = 0
		|				И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|				И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 6
		|					ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка
		|						И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 6)
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		КОГДА СписокНачислений.Показатель6 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|			ТОГДА СписокНачислений.Показатель6
		|		КОГДА СписокНачислений.Валюта6 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель6
		|		ИНАЧЕ СписокНачислений.Показатель6 * ЕСТЬNULL(Валюты6.Курс / Валюты6.Кратность, 0)
		|	КОНЕЦ КАК Показатель6,
		|	ПоказательТарифнойСтавки.Показатель КАК ВидТарифнойСтавки,
		|	ВЫБОР
		|		КОГДА ПоказательТарифнойСтавки.НомерСтроки = 1
		|			ТОГДА ВЫБОР
		|					КОГДА ПоказателиВведенныеПриРасчете.Показатель1 ЕСТЬ НЕ NULL 
		|						ТОГДА ПоказателиВведенныеПриРасчете.Показатель1
		|					КОГДА СписокНачислений.Показатель1 = 0
		|							И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|									И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 1
		|								ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка)
		|						ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|					КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
		|						ТОГДА 0
		|					КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ТОГДА СписокНачислений.Показатель1
		|					КОГДА СписокНачислений.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|						ТОГДА СписокНачислений.Показатель1
		|					ИНАЧЕ СписокНачислений.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА ПоказательТарифнойСтавки.НомерСтроки = 2
		|			ТОГДА ВЫБОР
		|					КОГДА ПоказателиВведенныеПриРасчете.Показатель2 ЕСТЬ НЕ NULL 
		|						ТОГДА ПоказателиВведенныеПриРасчете.Показатель2
		|					КОГДА СписокНачислений.Показатель2 = 0
		|							И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|									И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 2
		|								ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка)
		|						ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|					КОГДА СписокНачислений.Показатель2 ЕСТЬ NULL 
		|						ТОГДА 0
		|					КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ТОГДА СписокНачислений.Показатель2
		|					КОГДА СписокНачислений.Валюта2 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|						ТОГДА СписокНачислений.Показатель2
		|					ИНАЧЕ СписокНачислений.Показатель2 * ЕСТЬNULL(Валюты2.Курс / Валюты2.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА ПоказательТарифнойСтавки.НомерСтроки = 3
		|			ТОГДА ВЫБОР
		|					КОГДА ПоказателиВведенныеПриРасчете.Показатель3 ЕСТЬ НЕ NULL 
		|						ТОГДА ПоказателиВведенныеПриРасчете.Показатель3
		|					КОГДА СписокНачислений.Показатель3 = 0
		|							И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|									И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 3
		|								ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка)
		|						ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|					КОГДА СписокНачислений.Показатель3 ЕСТЬ NULL 
		|						ТОГДА 0
		|					КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ТОГДА СписокНачислений.Показатель3
		|					КОГДА СписокНачислений.Валюта3 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|						ТОГДА СписокНачислений.Показатель3
		|					ИНАЧЕ СписокНачислений.Показатель3 * ЕСТЬNULL(Валюты3.Курс / Валюты3.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА ПоказательТарифнойСтавки.НомерСтроки = 4
		|			ТОГДА ВЫБОР
		|					КОГДА ПоказателиВведенныеПриРасчете.Показатель4 ЕСТЬ НЕ NULL 
		|						ТОГДА ПоказателиВведенныеПриРасчете.Показатель4
		|					КОГДА СписокНачислений.Показатель4 = 0
		|							И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|									И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 4
		|								ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка)
		|						ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|					КОГДА СписокНачислений.Показатель4 ЕСТЬ NULL 
		|						ТОГДА 0
		|					КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ТОГДА СписокНачислений.Показатель4
		|					КОГДА СписокНачислений.Валюта4 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|						ТОГДА СписокНачислений.Показатель4
		|					ИНАЧЕ СписокНачислений.Показатель4 * ЕСТЬNULL(Валюты4.Курс / Валюты4.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА ПоказательТарифнойСтавки.НомерСтроки = 5
		|			ТОГДА ВЫБОР
		|					КОГДА ПоказателиВведенныеПриРасчете.Показатель5 ЕСТЬ НЕ NULL 
		|						ТОГДА ПоказателиВведенныеПриРасчете.Показатель5
		|					КОГДА СписокНачислений.Показатель5 = 0
		|							И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|									И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 5
		|								ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка)
		|						ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|					КОГДА СписокНачислений.Показатель5 ЕСТЬ NULL 
		|						ТОГДА 0
		|					КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ТОГДА СписокНачислений.Показатель5
		|					КОГДА СписокНачислений.Валюта5 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|						ТОГДА СписокНачислений.Показатель5
		|					ИНАЧЕ СписокНачислений.Показатель5 * ЕСТЬNULL(Валюты5.Курс / Валюты5.Кратность, 0)
		|				КОНЕЦ
		|		КОГДА ПоказательТарифнойСтавки.НомерСтроки = 6
		|			ТОГДА ВЫБОР
		|					КОГДА ПоказателиВведенныеПриРасчете.Показатель6 ЕСТЬ НЕ NULL 
		|						ТОГДА ПоказателиВведенныеПриРасчете.Показатель6
		|					КОГДА СписокНачислений.Показатель6 = 0
		|							И (ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|									И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 6
		|								ИЛИ ЗначенияВводимыхКадровыхПоказателей.ЭтоТарифнаяСтавка)
		|						ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|					КОГДА СписокНачислений.Показатель6 ЕСТЬ NULL 
		|						ТОГДА 0
		|					КОГДА СписокНачислений.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ТОГДА СписокНачислений.Показатель6
		|					КОГДА СписокНачислений.Валюта6 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|						ТОГДА СписокНачислений.Показатель6
		|					ИНАЧЕ СписокНачислений.Показатель6 * ЕСТЬNULL(Валюты6.Курс / Валюты6.Кратность, 0)
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОкладТариф
		|ПОМЕСТИТЬ ВТРаботникиИНачисленияПоСхемамМотивации
		|ИЗ
		|	ВТРаботникиИНачисления КАК СписокНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиВведенныеПриРасчете
		|		ПО СписокНачислений.ВидРасчета = ПоказателиВведенныеПриРасчете.ВидРасчета
		|			И (СписокНачислений.Сотрудник = ПоказателиВведенныеПриРасчете.Сотрудник
		|				)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			НеВводимыеПоказатели.Ссылка КАК Ссылка,
		|			НеВводимыеПоказатели.НомерСтроки КАК НомерСтроки,
		|			НеВводимыеПоказатели.Показатель КАК Показатель,
		|			НеВводимыеПоказатели.ПоказательВозможностьИзменения КАК ПоказательВозможностьИзменения,
		|			НеВводимыеПоказатели.ЭтоТарифнаяСтавка КАК ЭтоТарифнаяСтавка,
		|			СУММА(ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя) КАК ЗначениеПоказателя,
		|			ЗначенияВводимыхКадровыхПоказателей.Сотрудник КАК Сотрудник,
		|			ЗначенияВводимыхКадровыхПоказателей.Период,
		|			ЗначенияВводимыхКадровыхПоказателей.ПериодРаботники,
		|			ЗначенияВводимыхКадровыхПоказателей.ПериодНачисления
		|		ИЗ
		|			ВТНеЗапрашиваемыеПриКадровыхПеремещениях КАК НеВводимыеПоказатели
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияВводимыхКадровыхПоказателей КАК ЗначенияВводимыхКадровыхПоказателей
		|				ПО НеВводимыеПоказатели.Показатель = ЗначенияВводимыхКадровыхПоказателей.Показатель
		|		ГДЕ
		|			ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя <> 0
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НеВводимыеПоказатели.Ссылка,
		|			НеВводимыеПоказатели.НомерСтроки,
		|			НеВводимыеПоказатели.Показатель,
		|			НеВводимыеПоказатели.ПоказательВозможностьИзменения,
		|			НеВводимыеПоказатели.ЭтоТарифнаяСтавка,
		|			ЗначенияВводимыхКадровыхПоказателей.Сотрудник,
		|			ЗначенияВводимыхКадровыхПоказателей.Период,
		|			ЗначенияВводимыхКадровыхПоказателей.ПериодРаботники,
		|			ЗначенияВводимыхКадровыхПоказателей.ПериодНачисления
		|			) КАК ЗначенияВводимыхКадровыхПоказателей
		|		ПО СписокНачислений.Сотрудник = ЗначенияВводимыхКадровыхПоказателей.Сотрудник
		|			И КОНЕЦПЕРИОДА(СписокНачислений.Период, МЕСЯЦ) = КОНЕЦПЕРИОДА(ЗначенияВводимыхКадровыхПоказателей.Период, МЕСЯЦ)
		|			И СписокНачислений.ВидРасчета = ЗначенияВводимыхКадровыхПоказателей.Ссылка
		|			И СписокНачислений.ПериодРаботники = ЗначенияВводимыхКадровыхПоказателей.ПериодРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК ПВалюты1
		|		ПО (ПВалюты1.Период = &парамДатаВалютногоУчета)
		|			И ПоказателиВведенныеПриРасчете.Валюта1 = ПВалюты1.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК ПВалюты2
		|		ПО (ПВалюты2.Период = &парамДатаВалютногоУчета)
		|			И ПоказателиВведенныеПриРасчете.Валюта2 = ПВалюты2.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК ПВалюты3
		|		ПО (ПВалюты3.Период = &парамДатаВалютногоУчета)
		|			И ПоказателиВведенныеПриРасчете.Валюта3 = ПВалюты3.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК ПВалюты4
		|		ПО (ПВалюты4.Период = &парамДатаВалютногоУчета)
		|			И ПоказателиВведенныеПриРасчете.Валюта4 = ПВалюты4.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК ПВалюты5
		|		ПО (ПВалюты5.Период = &парамДатаВалютногоУчета)
		|			И ПоказателиВведенныеПриРасчете.Валюта5 = ПВалюты5.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК ПВалюты6
		|		ПО (ПВалюты6.Период = &парамДатаВалютногоУчета)
		|			И ПоказателиВведенныеПриРасчете.Валюта6 = ПВалюты6.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты1
		|		ПО (Валюты1.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта1 = Валюты1.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты2
		|		ПО (Валюты2.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта2 = Валюты2.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты3
		|		ПО (Валюты3.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта3 = Валюты3.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты4
		|		ПО (Валюты4.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта4 = Валюты4.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты5
		|		ПО (Валюты5.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта5 = Валюты5.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты6
		|		ПО (Валюты6.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта6 = Валюты6.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВводимыеВПлановыхНачисленияхПоказатели КАК ПоказательТарифнойСтавки
		|		ПО СписокНачислений.ВидРасчета = ПоказательТарифнойСтавки.Ссылка
		|			И (ПоказательТарифнойСтавки.Показатель В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)))
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СписокНачислений.Подходит
		|				ТОГДА (НЕ СписокНачислений.ВидРасчета ЕСТЬ NULL )
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|";
		
		Запрос.Выполнить();
		
		ЗапросПризнаковАвтоНачисленийПоТабелю = Новый Запрос;
		ЗапросПризнаковАвтоНачисленийПоТабелю.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|				ГДЕ
		|					ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю
		|					И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК АвтоНачислятьПоТабелюНочные,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|				ГДЕ
		|					ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю
		|					И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК АвтоНачислятьПоТабелюВечерние";
		
		ВыборкаПризнаковАвтоначисления = ЗапросПризнаковАвтоНачисленийПоТабелю.Выполнить().Выбрать();
		ВыборкаПризнаковАвтоначисления.Следующий();
		
		// ДанныеПроизводственногоКалендаряЗаМесяц
		//		Данные производственного календаря за месяц
		// 
		//	Поля:
		//		ЧислоРабочихДней,
		//		ЧислоПредпраздничныхДней
		// 
		// Описание:
		//
		//	выбираем данные из рег-ра РегламентированныйПроизводственныйКалендарь за месяц, в который сотрудник работал
		
		Запрос.Текст =
		"ВЫБРАТЬ
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 23.06.2011 09:53 
		|	РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь КАК Календарь,
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК МесяцКалендаря,
		|	СУММА(ВЫБОР
		|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧислоРабочихДней,
		|	СУММА(ВЫБОР
		|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧислоПредпраздничныхДней
		|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаряЗаМесяц
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 23.06.2011 09:52 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Работники.ГрафикРаботы.AVT_ПроизводственныйКалендарь КАК Календарь
		|		ИЗ
		|			ВТДвиженияРаботников КАК Работники) КАК Работники
		|		ПО РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = Работники.Календарь
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.Год = &Год
		|
		|СГРУППИРОВАТЬ ПО
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 23.06.2011 09:53 
		|	РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь,
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
		|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря)";
		Запрос.Выполнить();
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 07.11.2011 14:29 
		// ОПИСАНИЕ: выбираем ночные и праздничные часы из сдельных нарядов.
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФактическаяВыработкаРаботниковОрганизаций.Период,
		|	ФактическаяВыработкаРаботниковОрганизаций.Сотрудник,
		|	ФактическаяВыработкаРаботниковОрганизаций.AVT_ОтработаноНочныхЧасов,
		|	ФактическаяВыработкаРаботниковОрганизаций.AVT_ОтработаноЧасовВПраздники
		|ПОМЕСТИТЬ ВТФактическаяВыработка
		|ИЗ
		|	РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработкаРаботниковОрганизаций
		|ГДЕ
		|	ФактическаяВыработкаРаботниковОрганизаций.Организация = &парамОрганизация
		|	И ФактическаяВыработкаРаботниковОрганизаций.Период >= &парамНачало
		|	И ФактическаяВыработкаРаботниковОрганизаций.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТСписокРаботников.Сотрудник
		|			ИЗ
		|				ВТСписокРаботников КАК ВТСписокРаботников)
		|	И ФактическаяВыработкаРаботниковОрганизаций.Период <= &парамКонец";      
		Запрос.Выполнить();
		
		//Основной текст запроса
		ОсновнойТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДвиженияРаботников.Сотрудник КАК Сотрудник,
		|	ДвиженияРаботников.Период,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|				ГДЕ
		|					ГрафикиРаботы.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
		|					И ГрафикиРаботы.ГрафикРаботы = ДвиженияРаботников.Сотрудник)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьИндГрафик,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|				ГДЕ
		|					СводныеИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
		|					И СводныеИндивидуальныеГрафики.Сотрудник = ДвиженияРаботников.Сотрудник)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьИндСводнГрафик,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
		|				ГДЕ
		|					РабочееВремяРаботниковОрганизаций.Период = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
		|					И РабочееВремяРаботниковОрганизаций.Сотрудник = ДвиженияРаботников.Сотрудник)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьСводнТабель,";
		
		Если ВыборкаПризнаковАвтоначисления.АвтоНачислятьПоТабелюНочные Тогда
			ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 07.11.2011 15:01 
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					ВТФактическаяВыработка КАК ФактическаяВыработка
			|				ГДЕ
			|					НАЧАЛОПЕРИОДА(ФактическаяВыработка.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И ФактическаяВыработка.Сотрудник = ДвиженияРаботников.Сотрудник
			|					И ФактическаяВыработка.AVT_ОтработаноНочныхЧасов <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьНочныеСделНаряд,
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|				ГДЕ
			|					ГрафикиРаботы.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И ГрафикиРаботы.ГрафикРаботы = ДвиженияРаботников.Сотрудник
			|					И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
			|					И ГрафикиРаботы.ОсновноеЗначение <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьНочныеИндГрафик,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
			|				ГДЕ
			|					СводныеИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И СводныеИндивидуальныеГрафики.Сотрудник = ДвиженияРаботников.Сотрудник
			|					И СводныеИндивидуальныеГрафики.ЧасовНочных <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьНочныеИндСводнГрафик,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
			|				ГДЕ
			|					РабочееВремяРаботниковОрганизаций.Период = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И РабочееВремяРаботниковОрганизаций.Сотрудник = ДвиженияРаботников.Сотрудник
			|					И РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
			|					И РабочееВремяРаботниковОрганизаций.Часов <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьНочныеСводнТабель,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|				ГДЕ
			|					ГрафикиРаботы.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И ГрафикиРаботы.ГрафикРаботы = ДвиженияРаботников.ГрафикРаботы
			|					И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
			|					И ГрафикиРаботы.ОсновноеЗначение <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьНочныеОбщГрафик,";
		Иначе
			ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 07.11.2011 15:04 
			|	ЛОЖЬ КАК ЕстьНочныеСделНаряд,
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                          
			|	ЛОЖЬ КАК ЕстьНочныеИндГрафик,
			|	ЛОЖЬ КАК ЕстьНочныеИндСводнГрафик,
			|	ЛОЖЬ КАК ЕстьНочныеСводнТабель,
			|	ЛОЖЬ КАК ЕстьНочныеОбщГрафик,";
		КонецЕсли;
		
		Если ВыборкаПризнаковАвтоначисления.АвтоНачислятьПоТабелюВечерние Тогда
			ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|				ГДЕ
			|					ГрафикиРаботы.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И ГрафикиРаботы.ГрафикРаботы = ДвиженияРаботников.Сотрудник
			|					И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
			|					И ГрафикиРаботы.ОсновноеЗначение <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьВечерниеИндГрафик,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
			|				ГДЕ
			|					СводныеИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И СводныеИндивидуальныеГрафики.Сотрудник = ДвиженияРаботников.Сотрудник
			|					И СводныеИндивидуальныеГрафики.ЧасовВечерних <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьВечерниеИндСводнГрафик,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
			|				ГДЕ
			|					РабочееВремяРаботниковОрганизаций.Период = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И РабочееВремяРаботниковОрганизаций.Сотрудник = ДвиженияРаботников.Сотрудник
			|					И РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
			|					И РабочееВремяРаботниковОрганизаций.Часов <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьВечерниеСводнТабель,
			|	ВЫБОР
			|		КОГДА 1 В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					1
			|				ИЗ
			|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|				ГДЕ
			|					ГрафикиРаботы.Месяц = НАЧАЛОПЕРИОДА(ДвиженияРаботников.Период, МЕСЯЦ)
			|					И ГрафикиРаботы.ГрафикРаботы = ДвиженияРаботников.ГрафикРаботы
			|					И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
			|					И ГрафикиРаботы.ОсновноеЗначение <> 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьВечерниеОбщГрафик";
		Иначе
			ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
			|	ЛОЖЬ КАК ЕстьВечерниеИндГрафик,
			|	ЛОЖЬ КАК ЕстьВечерниеИндСводнГрафик,
			|	ЛОЖЬ КАК ЕстьВечерниеСводнТабель,
			|	ЛОЖЬ КАК ЕстьВечерниеОбщГрафик";
		КонецЕсли;
			
		ОсновнойТекстЗапроса = ОсновнойТекстЗапроса + "
		|ПОМЕСТИТЬ ВТСведенияОНочныхВечерних
		|ИЗ
		|	ВТДвиженияРаботников КАК ДвиженияРаботников
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 07.11.2011 15:59 
		|ВЫБРАТЬ
		|	ФактическаяВыработкаРаботниковОрганизаций.Сотрудник,
		|	ПериодыДействияОсновногоНачисления.ДатаНачалаДействия КАК Период,
		|	СУММА(ФактическаяВыработкаРаботниковОрганизаций.AVT_ОтработаноЧасовВПраздники) КАК Часы
		|ПОМЕСТИТЬ ВТРаботаВПраздники
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиИНачисленияА.Сотрудник КАК Сотрудник,
		|		РаботникиИНачисленияА.Период КАК ДатаНачалаДействия,
		|		МИНИМУМ(РаботникиИНачисленияВ.Период) КАК ДатаОкончанияДействия
		|	ИЗ
		|		ВТРаботникиИНачисления КАК РаботникиИНачисленияА
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботникиИНачисления КАК РаботникиИНачисленияВ
		|			ПО РаботникиИНачисленияА.Сотрудник = РаботникиИНачисленияВ.Сотрудник
		|				И РаботникиИНачисленияА.Период < РаботникиИНачисленияВ.Период
		|				И (РаботникиИНачисленияА.ОсновноеНачисление)
		|				И (РаботникиИНачисленияВ.ОсновноеНачисление)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиИНачисленияА.Сотрудник,
		|		РаботникиИНачисленияА.Период) КАК ПериодыДействияОсновногоНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработкаРаботниковОрганизаций
		|		ПО ПериодыДействияОсновногоНачисления.Сотрудник = ФактическаяВыработкаРаботниковОрганизаций.Сотрудник
		|			И ПериодыДействияОсновногоНачисления.ДатаНачалаДействия <= ФактическаяВыработкаРаботниковОрганизаций.Период
		|			И (ВЫБОР
		|				КОГДА ПериодыДействияОсновногоНачисления.ДатаОкончанияДействия ЕСТЬ NULL 
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ПериодыДействияОсновногоНачисления.ДатаОкончанияДействия > ФактическаяВыработкаРаботниковОрганизаций.Период
		|			КОНЕЦ)
		|ГДЕ
		|	ФактическаяВыработкаРаботниковОрганизаций.AVT_ОтработаноЧасовВПраздники > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическаяВыработкаРаботниковОрганизаций.Сотрудник,
		|	ПериодыДействияОсновногоНачисления.ДатаНачалаДействия
		|;
		|
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
		|ВЫБРАТЬ
		|	СписокНачислений.Сотрудник КАК Сотрудник,
		|	СписокНачислений.СотрудникНаименование КАК СотрудникНаименование,
		|	СписокНачислений.Физлицо КАК Физлицо,
		|	СписокНачислений.ПодразделениеОрганизации,
		|	СписокНачислений.Подходит,
		|	СписокНачислений.Период,
		|	СписокНачислений.ПериодРаботники КАК ПериодРаботники,
		|	СписокНачислений.ПериодНачисления КАК ПериодНачисления,
		|	СписокНачислений.ОсновноеНачисление КАК ОсновноеНачисление,
		|	СписокНачислений.ВидРасчета КАК ВидРасчета,
		|	СписокНачислений.ВидРасчетаНаименование,
		|	ЕСТЬNULL(СписокНачислений.ВидРасчетаТребуетВводаТарифногоРазряда, ЛОЖЬ) КАК ТребуетВводаТарифногоРазряда,
		|	СписокНачислений.СпособРасчета,
		|	ЕСТЬNULL(СписокНачислений.НачисляетсяВЦеломЗаМесяц, ЛОЖЬ) КАК НачисляетсяВЦеломЗаМесяц,
		|	СписокНачислений.ВидВремени,
		|	СписокНачислений.Действие,
		|	СписокНачислений.КодВычета,
		|	СписокНачислений.ДатаНачалаСобытия,
		|	СписокНачислений.ГрафикРаботы,
		|	СписокНачислений.СуммированныйУчетРабочегоВремени,
		|	СписокНачислений.Валюта1,
		|	СписокНачислений.Валюта2,
		|	СписокНачислений.Валюта3,
		|	СписокНачислений.Валюта4,
		|	СписокНачислений.Валюта5,
		|	СписокНачислений.Валюта6,
		|	СписокНачислений.КурсВалюты1,
		|	СписокНачислений.КурсВалюты2,
		|	СписокНачислений.КурсВалюты3,
		|	СписокНачислений.КурсВалюты4,
		|	СписокНачислений.КурсВалюты5,
		|	СписокНачислений.КурсВалюты6,
		|	СписокНачислений.ВидТарифнойСтавки,
		|	ВЫБОР
		|		КОГДА СписокНачислений.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)
		|			ТОГДА СписокНачислений.ОкладТариф
		|		КОГДА СписокНачислений.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная)
		|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
		|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) = 0
		|										ТОГДА 0
		|									КОГДА СписокНачислений.ДлительностьРабочейНедели = 0
		|										ТОГДА 0
		|									ИНАЧЕ СписокНачислений.ОкладТариф / (СписокНачислений.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) * 12
		|								КОНЕЦ
		|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоМесячнойНормеПоПроизводственномуКалендарю)
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) = 0
		|										ТОГДА 0
		|									КОГДА СписокНачислений.ДлительностьРабочейНедели = 0
		|										ТОГДА 0
		|									ИНАЧЕ СписокНачислений.ОкладТариф / (СписокНачислений.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0))
		|								КОНЕЦ
		|						КОГДА ВЫБОР
		|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
		|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
		|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
		|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
		|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
		|							КОНЕЦ = 0
		|							ТОГДА 0
		|						ИНАЧЕ СписокНачислений.ОкладТариф / ВЫБОР
		|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
		|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
		|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
		|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
		|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
		|							КОНЕЦ
		|					КОНЕЦ КАК ЧИСЛО(15, 3))
		|		КОГДА СписокНачислений.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная)
		|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
		|						КОГДА СписокНачислений.ДлительностьРабочейНедели = 0
		|							ТОГДА 0
		|						ИНАЧЕ СписокНачислений.ОкладТариф / СписокНачислений.ДлительностьРабочейНедели * ВЫБОР
		|								КОГДА СписокНачислений.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
		|									ТОГДА 6
		|								ИНАЧЕ 5
		|							КОНЕЦ
		|					КОНЕЦ КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЧасоваяТарифнаяСтавка,
		|	СписокНачислений.Показатель1,
		|	СписокНачислений.Показатель2,
		|	СписокНачислений.Показатель3,
		|	СписокНачислений.Показатель4,
		|	СписокНачислений.Показатель5,
		|	СписокНачислений.Показатель6,
		|	СведенияОСтажеРаботыНаСевере.ДатаРегистрацииСеверногоСтажа,
		|	СведенияОСтажеРаботыНаСевере.ПорядокНачисленияСеверныхНадбавок,
		|	СведенияОСтажеРаботыНаСевере.НачальныйПроцентСевернойНадбавки,
		|	СведенияОСтажеРаботыНаСевере.СеверныйСтажМесяцев,
		|	СведенияОСтажеРаботыНаСевере.СеверныйСтажДней,
		|	СписокНачислений.ВидРасчетаВидСтажа,
		|	ШкалаКоэффициентовСтажа.Величина КАК КоэффициентСтажа,
		|	ШкалаСледКоэффициентовСтажа.Величина КАК СледКоэффициентСтажа,
		|	ВЫБОР
		|		КОГДА ШкалаСледКоэффициентовСтажа.Величина ЕСТЬ НЕ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА ДЕНЬ(Стажи.ДатаОтсчета) > Стажи.РазмерДней
		|						ТОГДА ДЕНЬ(Стажи.ДатаОтсчета) - Стажи.РазмерДней
		|					КОГДА ДЕНЬ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Стажи.ДатаОтсчета, МЕСЯЦ), ДЕНЬ, -1)) - (Стажи.РазмерДней - ДЕНЬ(Стажи.ДатаОтсчета)) <= 0
		|						ТОГДА ДЕНЬ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Стажи.ДатаОтсчета, МЕСЯЦ, 1), МЕСЯЦ), ДЕНЬ, -1)) - (Стажи.РазмерДней - ДЕНЬ(Стажи.ДатаОтсчета))
		|					ИНАЧЕ ДЕНЬ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Стажи.ДатаОтсчета, МЕСЯЦ), ДЕНЬ, -1)) - (Стажи.РазмерДней - ДЕНЬ(Стажи.ДатаОтсчета))
		|				КОНЕЦ
		|	КОНЕЦ КАК ДеньСменыКоэффициентаСтажа,
		|	ВЫБОР
		|		КОГДА &ЭтоПерерасчет
		|			ТОГДА ЛОЖЬ
		|		КОГДА ОсновныеНачисления.Сотрудник ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УжеПроведен,
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 31.10.2011 10:32 
		|	ЕСТЬNULL(РаботаВПраздники.Часы, 0) КАК ОтработаноЧасовВПраздники, 
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
		|	ВЫБОР
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 07.11.2011 15:09 
		|		КОГДА СведенияОНочныхВечерних.ЕстьНочныеСделНаряд
		|			ТОГДА ИСТИНА
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
		|		КОГДА СведенияОНочныхВечерних.ЕстьИндГрафик
		|			ТОГДА СведенияОНочныхВечерних.ЕстьНочныеИндГрафик
		|		КОГДА СведенияОНочныхВечерних.ЕстьСводнТабель
		|			ТОГДА СведенияОНочныхВечерних.ЕстьНочныеСводнТабель
		|		КОГДА СведенияОНочныхВечерних.ЕстьИндСводнГрафик
		|			ТОГДА СведенияОНочныхВечерних.ЕстьНочныеИндСводнГрафик
		|		ИНАЧЕ СведенияОНочныхВечерних.ЕстьНочныеОбщГрафик
		|	КОНЕЦ КАК ЕстьНочные,
		|	ВЫБОР
		|		КОГДА СведенияОНочныхВечерних.ЕстьИндГрафик
		|			ТОГДА СведенияОНочныхВечерних.ЕстьВечерниеИндГрафик
		|		КОГДА СведенияОНочныхВечерних.ЕстьСводнТабель
		|			ТОГДА СведенияОНочныхВечерних.ЕстьВечерниеСводнТабель
		|		КОГДА СведенияОНочныхВечерних.ЕстьИндСводнГрафик
		|			ТОГДА СведенияОНочныхВечерних.ЕстьВечерниеИндСводнГрафик
		|		ИНАЧЕ СведенияОНочныхВечерних.ЕстьВечерниеОбщГрафик
		|	КОНЕЦ КАК ЕстьВечерние
		|ИЗ
		|	ВТРаботникиИНачисленияПоСхемамМотивации КАК СписокНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСеверномСтаже КАК СведенияОСтажеРаботыНаСевере
		|		ПО СписокНачислений.Сотрудник = СведенияОСтажеРаботыНаСевере.Сотрудник
		|			И СписокНачислений.ПериодРаботники = СведенияОСтажеРаботыНаСевере.ПериодРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Стажи КАК Стажи
		|		ПО СписокНачислений.ВидРасчетаВидСтажа = Стажи.ВидСтажа
		|			И СписокНачислений.Физлицо = Стажи.Ссылка
		|			И (СписокНачислений.СпособРасчета В (&СпособыРасчетаОтСтажа))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаКоэффициентовСтажа КАК ШкалаКоэффициентовСтажа
		|		ПО СписокНачислений.ВидРасчетаКоэффициентСтажа = ШкалаКоэффициентовСтажа.КоэффициентСтажа
		|			И (СписокНачислений.СпособРасчета В (&СпособыРасчетаОтСтажа))
		|			И (ВЫБОР
		|				КОГДА Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
		|						КОГДА ДЕНЬ(Стажи.ДатаОтсчета) > ДЕНЬ(ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней))
		|							ТОГДА 1
		|						ИНАЧЕ 0
		|					КОНЕЦ >= 0
		|					ТОГДА Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
		|							КОГДА ДЕНЬ(Стажи.ДатаОтсчета) > ДЕНЬ(ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней))
		|								ТОГДА 1
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ >= ШкалаКоэффициентовСтажа.СтажС)
		|			И (Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
		|				КОГДА ДЕНЬ(Стажи.ДатаОтсчета) > ДЕНЬ(ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней))
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ < ВЫБОР
		|				КОГДА ШкалаКоэффициентовСтажа.СтажПо = 0
		|					ТОГДА 999999
		|				ИНАЧЕ ШкалаКоэффициентовСтажа.СтажПо
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаКоэффициентовСтажа КАК ШкалаСледКоэффициентовСтажа
		|		ПО СписокНачислений.ВидРасчетаКоэффициентСтажа = ШкалаСледКоэффициентовСтажа.КоэффициентСтажа
		|			И (СписокНачислений.СпособРасчета В (&СпособыРасчетаОтСтажа))
		|			И (Стажи.РазмерМесяцев + РАЗНОСТЬДАТ(Стажи.ДатаОтсчета, ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней), МЕСЯЦ) - ВЫБОР
		|				КОГДА ДЕНЬ(Стажи.ДатаОтсчета) >= ДЕНЬ(ДОБАВИТЬКДАТЕ(&парамНачало, ДЕНЬ, Стажи.РазмерДней))
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ = ШкалаКоэффициентовСтажа.СтажПо - 1)
		|			И (ШкалаСледКоэффициентовСтажа.НомерСтрокиШкалы = ШкалаКоэффициентовСтажа.НомерСтрокиШкалы + 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 23.06.2011 10:00 
		|			РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь КАК Календарь,
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		|			СУММА(ВЫБОР
		|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ЧислоРабочихДней,
		|			СУММА(ВЫБОР
		|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК ЧислоПредпраздничныхДней
		|		ИЗ
		|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 23.06.2011 09:59 
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				Работники.ГрафикРаботы.AVT_ПроизводственныйКалендарь КАК Календарь
		|			ИЗ
		|				ВТДвиженияРаботников КАК Работники) КАК Работники
		|			ПО РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = Работники.Календарь
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
		|		ГДЕ
		|						РегламентированныйПроизводственныйКалендарь.Год = &Год	
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 27.06.2011 10:00 
		|		СГРУППИРОВАТЬ ПО 
		|			РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
		|) КАК ДанныеПроизводственногоКалендаря
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 23.06.2011 10:02  
		//|		ПО (ИСТИНА)
		|		ПО СписокНачислений.ГрафикРаботы.AVT_ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.Календарь
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряЗаМесяц КАК ДанныеПроизводственногоКалендаряЗаМесяц
		|		ПО МЕСЯЦ(СписокНачислений.Период) = ДанныеПроизводственногоКалендаряЗаМесяц.МесяцКалендаря
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 23.06.2011 10:03 
		|       И СписокНачислений.ГрафикРаботы.AVT_ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаряЗаМесяц.Календарь
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоСводнымИндивидуальнымГрафикам КАК НормаВремениПоСводнымИндивидуальнымГрафикам
		|		ПО СписокНачислений.Сотрудник = НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам КАК НормаВремениПоЕжедневнымИндивидуальнымГрафикам
		|		ПО СписокНачислений.Сотрудник = НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоОбщимГрафикам КАК НормаВремениПоОбщимГрафикам
		|		ПО СписокНачислений.Сотрудник = НормаВремениПоОбщимГрафикам.Сотрудник
		|			И СписокНачислений.ГрафикРаботы = НормаВремениПоОбщимГрафикам.ГрафикРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисления КАК ОсновныеНачисления
		|		ПО СписокНачислений.Сотрудник = ОсновныеНачисления.Сотрудник
		|			И СписокНачислений.ПодразделениеОрганизации = ОсновныеНачисления.ПодразделениеОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОНочныхВечерних КАК СведенияОНочныхВечерних
		|		ПО СписокНачислений.Сотрудник = СведенияОНочныхВечерних.Сотрудник
		|		И СписокНачислений.ПериодРаботники = СведенияОНочныхВечерних.Период
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 07.11.2011 15:50 
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботаВПраздники КАК РаботаВПраздники
		|	ПО СписокНачислений.Сотрудник = РаботаВПраздники.Сотрудник
		|		И СписокНачислений.Период = РаботаВПраздники.Период
		|		И (СписокНачислений.ОсновноеНачисление)
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникНаименование,
		|	Сотрудник,
		|	ПериодРаботники,
		|	ПериодНачисления,
		|	ОсновноеНачисление УБЫВ,
		|	ВидРасчета";
		
		Запрос.Текст = ОсновнойТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		
		НачисленияВыборка = РезультатЗапроса.Выбрать();
		
		ТЗНачисления = СформироватьТаблицуНачислений(НачисленияВыборка, ОкончаниеПериодаЗаполнения, РезультатЗапроса.Выгрузить(), МассивВалютСНезаданнымКурсом);
		
		Если МассивВалютСНезаданнымКурсом.Количество() > 0 Тогда
			ТЗНачисления.Очистить();
		КонецЕсли;

		// для заполнения табличной части НДФЛ
		
		РаботникиДляРасчетаНДФЛ = Новый Соответствие;
		
		ТипОсновныхНачислений = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций");
		
		НаборЗаписейДляПроверки = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
		
		НаборЗаписейДляПроверки.Отбор.Регистратор.Значение = СcылкаОбъекта;
		
		СтрокаПолейОсновныхНачислений = "Сотрудник,Физлицо,ВидРасчета,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ДатаНачала,ДатаОкончания,ПодразделениеОрганизации";
		СтрокаПолейДополнительныхНачислений = "Сотрудник,Физлицо,ВидРасчета,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,,КодВычета,ДатаНачала,ДатаОкончания,ПодразделениеОрганизации";
		Для Каждого НачислениеИзТаблицыЗначений Из ТЗНачисления Цикл
			
			РаботникиДляРасчетаНДФЛ.Вставить(НачислениеИзТаблицыЗначений.Физлицо, 0);
			
			Если ВидОперации <> Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
				
				Если ТипЗнч(НачислениеИзТаблицыЗначений.ВидРасчета)	= ТипОсновныхНачислений Тогда
					
					НоваяСтрока	=	Начисления.Добавить();
				                                       
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока,НачислениеИзТаблицыЗначений,СтрокаПолейОсновныхНачислений); //Сотрудник,ВидРасчета,Размер,Показатель2,Показатель3,ДатаНачала,ДатаОкончания,ПодразделениеОрганизации
					НоваяСтрока.Авторасчет			= Истина;
					НоваяСтрока.ДатаНачалаСобытия	= ?(ЗначениеЗаполнено(НачислениеИзТаблицыЗначений.ДатаНачалаСобытия),НачислениеИзТаблицыЗначений.ДатаНачалаСобытия,НачислениеИзТаблицыЗначений.ДатаНачала);
					Если НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет Тогда
						НоваяСтрока.ПериодРасчетаСреднегоЗаработкаНачало = ДобавитьМесяц(НачалоМесяца(НоваяСтрока.ДатаНачалаСобытия), -12);	
						НоваяСтрока.ПериодРасчетаСреднегоЗаработкаОкончание = НачалоМесяца(НоваяСтрока.ДатаНачалаСобытия) - 1;	
					КонецЕсли;
					
					Движение = НаборЗаписейДляПроверки.Добавить();
					
					// свойства
					Движение.ПериодРегистрации		= ПериодРегистрации;
					Движение.ВидРасчета				= НачислениеИзТаблицыЗначений.ВидРасчета;
					Движение.ПериодДействияНачало	= НачислениеИзТаблицыЗначений.ДатаНачала;
					Движение.ПериодДействияКонец	= НачислениеИзТаблицыЗначений.ДатаОкончания;
					
					// измерения
					Движение.Сотрудник				= НачислениеИзТаблицыЗначений.Сотрудник;
					Движение.Физлицо				= НачислениеИзТаблицыЗначений.Физлицо;
					Движение.Организация			= ГоловнаяОрганизация;
					
					// реквизиты поддержки графика
					Движение.ГрафикРаботы			= НачислениеИзТаблицыЗначений.ГрафикРаботы;
					Движение.ВидУчетаВремени		= ПроведениеРасчетов.ПолучитьВидУчетаВремени(НачислениеИзТаблицыЗначений.СпособРасчета, НачислениеИзТаблицыЗначений.ВидВремени, НачислениеИзТаблицыЗначений.СуммированныйУчетРабочегоВремени);
					Движение.ДатаНачалаСобытия		= НачислениеИзТаблицыЗначений.ДатаНачала;
					Движение.Авторасчет				= Истина;
					
				Иначе
					
					НоваяСтрока	=	ДополнительныеНачисления.Добавить();
					НоваяСтрока.Авторасчет		= Истина;
					ЗаполнитьЗначенияСвойств(НоваяСтрока,НачислениеИзТаблицыЗначений,СтрокаПолейДополнительныхНачислений); //Сотрудник,ВидРасчета,Размер,КодВычета,ДатаНачала,ДатаОкончания,ПодразделениеОрганизации
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// выполним удаление строк табличной части, которые соответствуют полностью вытесняемым видам расчета
		// проверку выполним через фактический период действия
		Если ВидОперации <> Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
			
			НачатьТранзакцию();
			
			НаборЗаписейДляПроверки.ОбменДанными.Загрузка = Истина;
			НаборЗаписейДляПроверки.Записать(Истина, Ложь, Истина, Ложь);
			
			ЗапросПроверки = Новый Запрос(
			"ВЫБРАТЬ 
			|	Начисления.Сотрудник,
			|	Начисления.ВидРасчета,
			|	Начисления.ДатаНачала,
			|	Начисления.ДатаОкончания,
			|	Начисления.НомерСтроки
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ &парамНачисления КАК Начисления
			|ИНДЕКСИРОВАТЬ ПО Сотрудник, ВидРасчета;
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Начисления.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(Регистратор = &парамСсылка) КАК ОсновныеНачисленияРаботниковОрганизацииФактическийПериодДействия
			|		ПО ОсновныеНачисленияРаботниковОрганизации.НомерСтроки = ОсновныеНачисленияРаботниковОрганизацииФактическийПериодДействия.НомерСтроки
			|			И ОсновныеНачисленияРаботниковОрганизации.Регистратор = ОсновныеНачисленияРаботниковОрганизацииФактическийПериодДействия.Регистратор
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
			|		ПО 	(Начисления.Сотрудник = ОсновныеНачисленияРаботниковОрганизации.Сотрудник)
			|			И (Начисления.ВидРасчета = ОсновныеНачисленияРаботниковОрганизации.ВидРасчета)
			|			И (Начисления.ДатаНачала = ОсновныеНачисленияРаботниковОрганизации.ПериодДействияНачало)
			|			И (КОНЕЦПЕРИОДА(Начисления.ДатаОкончания, День) = КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизации.ПериодДействияКонец, День))
			|ГДЕ
			|	ОсновныеНачисленияРаботниковОрганизации.Регистратор = &парамСсылка
			|	И ОсновныеНачисленияРаботниковОрганизацииФактическийПериодДействия.Регистратор ЕСТЬ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки УБЫВ");

			
			ЗапросПроверки.УстановитьПараметр("парамСсылка", СcылкаОбъекта);
			ЗапросПроверки.УстановитьПараметр("парамНачисления", Начисления.Выгрузить());
			СтрокиКУдалению = ЗапросПроверки.Выполнить().Выгрузить();
			// удалим проверочный набор записей
			НаборЗаписейДляПроверки.Очистить();
			НаборЗаписейДляПроверки.Записать(Истина, Ложь, Истина, Ложь);
			
			ЗафиксироватьТранзакцию();
			
			Для Каждого СтрокаТЗ Из СтрокиКУдалению Цикл
				Начисления.Удалить(СтрокаТЗ.НомерСтроки - 1);
			КонецЦикла;
			
		КонецЕсли;
		// конец удаления строк табличной части, которые соответствуют полностью вытесняемым видам расчета
		
		// работающие по договорам подряда
		ОсновнойТекстЗапроса =
		"ВЫБРАТЬ
		|	&парамНачало КАК Период,
		|	НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчета,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|				И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА НачисленияРаботниковОрганизации.Показатель1Завершения
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Показатель1
		|	КОНЕЦ КАК Показатель1,
		|	ВЫБОР
		|		КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|				И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА НачисленияРаботниковОрганизации.Валюта1Завершения
		|		ИНАЧЕ НачисленияРаботниковОрганизации.Валюта1
		|	КОНЕЦ КАК Валюта1,
		|	НачисленияРаботниковОрганизации.ДокументОснование КАК ДокументОснование,
		|	НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПлановыеНачисленияПоДоговорам
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|			&парамНачало,
		|			ДокументОснование <> ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|				И Сотрудник В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ДвиженияРаботников.Сотрудник
		|					ИЗ
		|						ВТСписокРаботников КАК ДвиженияРаботников)) КАК НачисленияРаботниковОрганизации
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НачисленияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И НачисленияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА НачисленияРаботниковОрганизации.ДействиеЗавершения
		|			ИНАЧЕ НачисленияРаботниковОрганизации.Действие
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачисленияРаботниковОрганизации.Период,
		|	НачисленияРаботниковОрганизации.ВидРасчетаИзмерение,
		|	НачисленияРаботниковОрганизации.Показатель1,
		|	НачисленияРаботниковОрганизации.Валюта1,
		|	НачисленияРаботниковОрганизации.ДокументОснование,
		|	НачисленияРаботниковОрганизации.Сотрудник
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|		ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|ГДЕ
		|	НачисленияРаботниковОрганизации.Период > &парамНачало
		|	И НачисленияРаботниковОрганизации.Период <= &парамКонец
		|	И НачисленияРаботниковОрганизации.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|	И НачисленияРаботниковОрганизации.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачисленияРаботниковОрганизации.ПериодЗавершения,
		|	НачисленияРаботниковОрганизации.ВидРасчетаИзмерение,
		|	НачисленияРаботниковОрганизации.Показатель1Завершения,
		|	НачисленияРаботниковОрганизации.Валюта1Завершения,
		|	НачисленияРаботниковОрганизации.ДокументОснование,
		|	НачисленияРаботниковОрганизации.Сотрудник
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|		ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковПроверка
		|		ПО НачисленияРаботниковОрганизации.Сотрудник = НачисленияРаботниковПроверка.Сотрудник
		|			И НачисленияРаботниковОрганизации.ВидРасчетаИзмерение = НачисленияРаботниковПроверка.ВидРасчетаИзмерение
		|			И НачисленияРаботниковОрганизации.ДокументОснование = НачисленияРаботниковПроверка.ДокументОснование
		|			И (НачисленияРаботниковПроверка.Период > НачисленияРаботниковОрганизации.Период)
		|			И (НачисленияРаботниковПроверка.Период <= НачисленияРаботниковОрганизации.ПериодЗавершения)
		|ГДЕ
		|	НачисленияРаботниковОрганизации.ПериодЗавершения МЕЖДУ &парамНачало И &парамКонец
		|	И НачисленияРаботниковОрганизации.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|	И НачисленияРаботниковОрганизации.ДействиеЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|	И НачисленияРаботниковПроверка.Сотрудник ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(НачисленияРаботниковОрганизации.Период, ДЕНЬ, -1) КАК ДатаОкончания,
		|	НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
		|	НачисленияРаботниковОрганизации.ДокументОснование КАК ДокументОснование,
		|	НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТДатыОкончанияПлановыхНачислений
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|		ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|ГДЕ
		|	НачисленияРаботниковОрганизации.Период >= &парамНачало
		|	И НачисленияРаботниковОрганизации.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|	И НачисленияРаботниковОрганизации.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДОБАВИТЬКДАТЕ(НачисленияРаботниковОрганизации.ПериодЗавершения, ДЕНЬ, -1) > &парамКонец
		|			ТОГДА &парамКонец
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НачисленияРаботниковОрганизации.ПериодЗавершения, ДЕНЬ, -1)
		|	КОНЕЦ,
		|	НачисленияРаботниковОрганизации.ВидРасчетаИзмерение,
		|	НачисленияРаботниковОрганизации.ДокументОснование,
		|	НачисленияРаботниковОрганизации.Сотрудник
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК ТаблицаДвиженийРаботников
		|		ПО НачисленияРаботниковОрганизации.Сотрудник = ТаблицаДвиженийРаботников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковПроверка
		|		ПО НачисленияРаботниковОрганизации.Сотрудник = НачисленияРаботниковПроверка.Сотрудник
		|			И НачисленияРаботниковОрганизации.ВидРасчетаИзмерение = НачисленияРаботниковПроверка.ВидРасчетаИзмерение
		|			И НачисленияРаботниковОрганизации.ДокументОснование = НачисленияРаботниковПроверка.ДокументОснование
		|			И (НачисленияРаботниковПроверка.Период > НачисленияРаботниковОрганизации.Период)
		|			И (НачисленияРаботниковПроверка.Период <= НачисленияРаботниковОрганизации.ПериодЗавершения)
		|ГДЕ
		|	НачисленияРаботниковОрганизации.ПериодЗавершения >= &парамНачало
		|	И НачисленияРаботниковОрганизации.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|	И НачисленияРаботниковОрганизации.ДействиеЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
		|	И НачисленияРаботниковПроверка.Сотрудник ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Работники.Сотрудник КАК Сотрудник,
		|	Работники.Сотрудник.Физлицо КАК СотрудникФизлицо,
		|	Работники.Сотрудник.Наименование КАК СотрудникНаименование,
		|	НачисленияРаботниковОрганизации.ДокументОснование КАК ДокументОснование,
		|	НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
		|	Работники.Подходит КАК Подходит,
		|	НачисленияРаботниковОрганизации.Период КАК ПериодНачисления,
		|	МИНИМУМ(ДатыОкончанияНачисленияРаботниковОрганизации.ДатаОкончания) КАК ДатаОкончания,
		|	НачисленияРаботниковОрганизации.Показатель1 КАК Показатель1,
		|	НачисленияРаботниковОрганизации.Валюта1 КАК Валюта1
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТДвиженияРаботников КАК Работники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияПоДоговорам КАК НачисленияРаботниковОрганизации
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыОкончанияПлановыхНачислений КАК ДатыОкончанияНачисленияРаботниковОрганизации
		|			ПО НачисленияРаботниковОрганизации.Сотрудник = ДатыОкончанияНачисленияРаботниковОрганизации.Сотрудник
		|				И НачисленияРаботниковОрганизации.ВидРасчета = ДатыОкончанияНачисленияРаботниковОрганизации.ВидРасчетаИзмерение
		|				И НачисленияРаботниковОрганизации.ДокументОснование = ДатыОкончанияНачисленияРаботниковОрганизации.ДокументОснование
		|				И НачисленияРаботниковОрганизации.Период <= ДатыОкончанияНачисленияРаботниковОрганизации.ДатаОкончания
		|		ПО Работники.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
		|ГДЕ
		|	Работники.Подходит
		|	И НачисленияРаботниковОрганизации.ДокументОснование.Организация = &парамОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	Работники.Сотрудник,
		|	Работники.Сотрудник.Физлицо,
		|	Работники.Сотрудник.Наименование,
		|	Работники.Подходит,
		|	НачисленияРаботниковОрганизации.ДокументОснование,
		|	НачисленияРаботниковОрганизации.ВидРасчета,
		|	НачисленияРаботниковОрганизации.Период,
		|	НачисленияРаботниковОрганизации.Показатель1,
		|	НачисленияРаботниковОрганизации.Валюта1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ДокументОснование КАК ДокументОснование,
		|	Начисления.БазовыйПериодНачало КАК ПериодОплаты
		|ПОМЕСТИТЬ ВТСуществующиеНачисления
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК Работники
		|		ПО Начисления.Сотрудник = Работники.Сотрудник
		|ГДЕ
		|	Начисления.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка)
		|	И Начисления.Регистратор <> &парамРегистратор
		|	И (НЕ Начисления.Сторно)
		|	И Начисления.ОбособленноеПодразделение = &парамОрганизация
		|	И НАЧАЛОПЕРИОДА(Начисления.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокНачислений.Сотрудник КАК Сотрудник,
		|	СписокНачислений.СотрудникФизлицо КАК Физлицо,
		|	СписокНачислений.СотрудникНаименование КАК СотрудникНаименование,
		|	СписокНачислений.ВидРасчета КАК ВидРасчета,
		|	СписокНачислений.ПериодНачисления КАК ДатаНачала,
		|	ЕСТЬNULL(СписокНачислений.ДатаОкончания, &парамКонец) КАК ДатаОкончания,
		|	СписокНачислений.ДокументОснование КАК ДокументОснование,
		|	СписокНачислений.Подходит,
		|	СписокНачислений.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
		|	СписокНачислений.ДокументОснование.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	СписокНачислений.ДокументОснование.КодВычета КАК КодВычета,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель1
		|		ИНАЧЕ СписокНачислений.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
		|	КОНЕЦ КАК Размер,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель1
		|		ИНАЧЕ СписокНачислений.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
		|	КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА СписокНачислений.Показатель1 ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА СписокНачислений.ДокументОснование.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код405)
		|			ТОГДА 0
		|		КОГДА СписокНачислений.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА СписокНачислений.Показатель1 * ЕСТЬNULL(СведенияОСкидках.НормативЗатрат, 0) / 100
		|		ИНАЧЕ СписокНачислений.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0) * ЕСТЬNULL(СведенияОСкидках.НормативЗатрат, 0) / 100
		|	КОНЕЦ КАК СуммаВычета
		|ИЗ
		|	ВТНачисления КАК СписокНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты1
		|		ПО (Валюты1.Период = &парамДатаВалютногоУчета)
		|			И СписокНачислений.Валюта1 = Валюты1.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуществующиеНачисления КАК СуществующиеНачисления
		|		ПО СписокНачислений.Сотрудник = СуществующиеНачисления.Сотрудник
		|			И СписокНачислений.ДокументОснование = СуществующиеНачисления.ДокументОснование
		|			И СписокНачислений.ПериодНачисления = СуществующиеНачисления.ПериодОплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛВычетыПоДоходам.СрезПоследних(&парамНачало, ) КАК СведенияОСкидках
		|		ПО СписокНачислений.ВидРасчета.КодДоходаНДФЛ = СведенияОСкидках.КодДохода
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ЭтоПерерасчет
		|				ТОГДА ИСТИНА
		|			КОГДА СуществующиеНачисления.Сотрудник ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникНаименование,
		|	ДокументОснование,
		|	ДатаНачала";
		
		Запрос.Текст = ОсновнойТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		
		Если МассивСотрудники = Неопределено Тогда
			ДоговорыНаВыполнениеРабот.Загрузить(РезультатЗапроса.Выгрузить());
			Для каждого СтрокаТЧ Из ДоговорыНаВыполнениеРабот Цикл
				РаботникиДляРасчетаНДФЛ.Вставить(СтрокаТЧ.Физлицо, 0);
			КонецЦикла;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ДоговорыНаВыполнениеРабот.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
				РаботникиДляРасчетаНДФЛ.Вставить(НоваяСтрока.Физлицо, 0);
			КонецЦикла;
		КонецЕсли;	
		
		// Очистим необходимость перезаполнения по заполненным работникам
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокРаботников.Сотрудник
		|ИЗ
		|	ВТСписокРаботников КАК СписокРаботников";
		ПроведениеРасчетов.УдалитьСведенияОПерезаполненииДокумента(Ссылка,Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
	КонецЕсли;

	// АВТОЗАПОЛНЕНИЕ ТЧ "Удержания"
	Если (ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет И Не ЗначениеЗаполнено(ПерерассчитываемыйДокумент)) ИЛИ
		ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		
		ТекстЗапросаУдержаний = 
		"ВЫБРАТЬ
		|	УдержанияРаботниковОрганизации.Физлицо КАК Физлицо,
		|	УдержанияРаботниковОрганизации.Физлицо.Наименование КАК ФизлицоНаименование,
		|	УдержанияРаботниковОрганизации.Период КАК Период,
		|	УдержанияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
		|	УдержанияРаботниковОрганизации.Действие КАК Действие,
		|	УдержанияРаботниковОрганизации.ДокументОснование КАК ДокументОснование,
		|	УдержанияРаботниковОрганизации.ДополнительныеДанные КАК ДополнительныеДанные,
		|	УдержанияРаботниковОрганизации.ПорядокИсчисленияИздержек,
		|	УдержанияРаботниковОрганизации.Получатель КАК Получатель,
		|	УдержанияРаботниковОрганизации.Валюта1 КАК Валюта1,
		|	УдержанияРаботниковОрганизации.Валюта2 КАК Валюта2,
		|	УдержанияРаботниковОрганизации.Валюта3 КАК Валюта3,
		|	УдержанияРаботниковОрганизации.Валюта4 КАК Валюта4,
		|	УдержанияРаботниковОрганизации.Валюта5 КАК Валюта5,
		|	УдержанияРаботниковОрганизации.Валюта6 КАК Валюта6,
		|	ВЫБОР
		|		КОГДА УдержанияРаботниковОрганизации.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ Валюты1.Курс
		|	КОНЕЦ КАК КурсВалюты1,
		|	ВЫБОР
		|		КОГДА УдержанияРаботниковОрганизации.Валюта2 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ Валюты2.Курс
		|	КОНЕЦ КАК КурсВалюты2,
		|	ВЫБОР
		|		КОГДА УдержанияРаботниковОрганизации.Валюта3 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ Валюты3.Курс
		|	КОНЕЦ КАК КурсВалюты3,
		|	ВЫБОР
		|		КОГДА УдержанияРаботниковОрганизации.Валюта4 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ Валюты4.Курс
		|	КОНЕЦ КАК КурсВалюты4,
		|	ВЫБОР
		|		КОГДА УдержанияРаботниковОрганизации.Валюта5 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ Валюты5.Курс
		|	КОНЕЦ КАК КурсВалюты5,
		|	ВЫБОР
		|		КОГДА УдержанияРаботниковОрганизации.Валюта6 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|			ТОГДА 1
		|		ИНАЧЕ Валюты6.Курс
		|	КОНЕЦ КАК КурсВалюты6,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель1 ЕСТЬ НЕ NULL 
		|					И Показатели.Показатель1 <> 0
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|			ТОГДА Показатели.Показатель1
		|		КОГДА УдержанияРаботниковОрганизации.Показатель1 ЕСТЬ NULL 
		|				ИЛИ УдержанияРаботниковОрганизации.Показатель1 = 0
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 1
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.Показатель1 ЕСТЬ NULL 
		|					ТОГДА 0
		|				КОГДА УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ИЛИ УдержанияРаботниковОрганизации.Валюта1 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|					ТОГДА УдержанияРаботниковОрганизации.Показатель1
		|				ИНАЧЕ УдержанияРаботниковОрганизации.Показатель1 * ЕСТЬNULL(Валюты1.Курс / Валюты1.Кратность, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК Показатель1,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель2 ЕСТЬ НЕ NULL 
		|					И Показатели.Показатель2 <> 0
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|			ТОГДА Показатели.Показатель2
		|		КОГДА УдержанияРаботниковОрганизации.Показатель2 ЕСТЬ NULL 
		|				ИЛИ УдержанияРаботниковОрганизации.Показатель2 = 0
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 2
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.Показатель2 ЕСТЬ NULL 
		|					ТОГДА 0
		|				КОГДА УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ИЛИ УдержанияРаботниковОрганизации.Валюта2 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|					ТОГДА УдержанияРаботниковОрганизации.Показатель2
		|				ИНАЧЕ УдержанияРаботниковОрганизации.Показатель2 * ЕСТЬNULL(Валюты2.Курс / Валюты2.Кратность, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК Показатель2,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель3 ЕСТЬ НЕ NULL 
		|					И Показатели.Показатель3 <> 0
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|			ТОГДА Показатели.Показатель3
		|		КОГДА УдержанияРаботниковОрганизации.Показатель3 ЕСТЬ NULL 
		|				ИЛИ УдержанияРаботниковОрганизации.Показатель3 = 0
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 3
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.Показатель3 ЕСТЬ NULL 
		|					ТОГДА 0
		|				КОГДА УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ИЛИ УдержанияРаботниковОрганизации.Валюта3 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|					ТОГДА УдержанияРаботниковОрганизации.Показатель3
		|				ИНАЧЕ УдержанияРаботниковОрганизации.Показатель3 * ЕСТЬNULL(Валюты3.Курс / Валюты3.Кратность, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК Показатель3,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель4 ЕСТЬ НЕ NULL 
		|					И Показатели.Показатель4 <> 0
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|			ТОГДА Показатели.Показатель4
		|		КОГДА УдержанияРаботниковОрганизации.Показатель4 ЕСТЬ NULL 
		|				ИЛИ УдержанияРаботниковОрганизации.Показатель4 = 0
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 4
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.Показатель4 ЕСТЬ NULL 
		|					ТОГДА 0
		|				КОГДА УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ИЛИ УдержанияРаботниковОрганизации.Валюта4 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|					ТОГДА УдержанияРаботниковОрганизации.Показатель4
		|				ИНАЧЕ УдержанияРаботниковОрганизации.Показатель4 * ЕСТЬNULL(Валюты4.Курс / Валюты4.Кратность, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК Показатель4,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель5 ЕСТЬ НЕ NULL 
		|					И Показатели.Показатель5 <> 0
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|			ТОГДА Показатели.Показатель5
		|		КОГДА УдержанияРаботниковОрганизации.Показатель5 ЕСТЬ NULL 
		|				ИЛИ УдержанияРаботниковОрганизации.Показатель5 = 0
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 5
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.Показатель5 ЕСТЬ NULL 
		|					ТОГДА 0
		|				КОГДА УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ИЛИ УдержанияРаботниковОрганизации.Валюта5 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|					ТОГДА УдержанияРаботниковОрганизации.Показатель5
		|				ИНАЧЕ УдержанияРаботниковОрганизации.Показатель5 * ЕСТЬNULL(Валюты5.Курс / Валюты5.Кратность, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК Показатель5,
		|	ВЫБОР
		|		КОГДА Показатели.Показатель6 ЕСТЬ НЕ NULL 
		|					И Показатели.Показатель6 <> 0
		|				ИЛИ ЗначенияВводимыхКадровыхПоказателей.ПоказательВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.Ежемесячно)
		|			ТОГДА Показатели.Показатель6
		|		КОГДА УдержанияРаботниковОрганизации.Показатель6 ЕСТЬ NULL 
		|				ИЛИ УдержанияРаботниковОрганизации.Показатель6 = 0
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ПустаяСсылка)
		|					И ЗначенияВводимыхКадровыхПоказателей.Показатель ЕСТЬ НЕ NULL 
		|					И ЗначенияВводимыхКадровыхПоказателей.НомерСтроки = 6
		|			ТОГДА ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.Показатель6 ЕСТЬ NULL 
		|					ТОГДА 0
		|				КОГДА УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (&парамМассивСпособовРасчетовБезВалюты)
		|						ИЛИ УдержанияРаботниковОрганизации.Валюта6 В (&парамВалютаРегламентУчета, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
		|					ТОГДА УдержанияРаботниковОрганизации.Показатель6
		|				ИНАЧЕ УдержанияРаботниковОрганизации.Показатель6 * ЕСТЬNULL(Валюты6.Курс / Валюты6.Кратность, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК Показатель6
		|ИЗ
		|	(ВЫБРАТЬ
		|		&парамНачало КАК Период,
		|		УдержанияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.ДействиеЗавершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Действие
		|		КОНЕЦ КАК Действие,
		|		ВЫБОР
		|			КОГДА (НЕ УдержанияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист)
		|					ИЛИ УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.БанковскиеИздержки))
		|				ТОГДА ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка)
		|			ИНАЧЕ УдержанияРаботниковОрганизации.ДокументОснование
		|		КОНЕЦ КАК ДокументОснование,
		|		УдержанияРаботниковОрганизации.ПрожиточныйМинимум КАК ДополнительныеДанные,
		|		УдержанияРаботниковОрганизации.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
		|		УдержанияРаботниковОрганизации.Получатель КАК Получатель,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Показатель1Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Показатель1
		|		КОНЕЦ КАК Показатель1,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Показатель2Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Показатель2
		|		КОНЕЦ КАК Показатель2,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Показатель3Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Показатель3
		|		КОНЕЦ КАК Показатель3,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Показатель4Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Показатель4
		|		КОНЕЦ КАК Показатель4,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Показатель5Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Показатель5
		|		КОНЕЦ КАК Показатель5,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Показатель6Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Показатель6
		|		КОНЕЦ КАК Показатель6,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Валюта1Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Валюта1
		|		КОНЕЦ КАК Валюта1,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Валюта2Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Валюта2
		|		КОНЕЦ КАК Валюта2,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Валюта3Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Валюта3
		|		КОНЕЦ КАК Валюта3,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Валюта4Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Валюта4
		|		КОНЕЦ КАК Валюта4,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Валюта5Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Валюта5
		|		КОНЕЦ КАК Валюта5,
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.Валюта6Завершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Валюта6
		|		КОНЕЦ КАК Валюта6,
		|		УдержанияРаботниковОрганизации.ФизЛицо КАК Физлицо
		|	ИЗ
		|		РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(
		|				&парамНачало,
		|				Организация = &парамГоловнаяОрганизация
		|					И ФизЛицо В
		|						(ВЫБРАТЬ
		|							СписокРаботников.ФизЛицо
		|						ИЗ
		|							ВТСписокРаботников КАК СписокРаботников)) КАК УдержанияРаботниковОрганизации
		|	ГДЕ
		|		ВЫБОР
		|			КОГДА УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамНачало
		|					И УдержанияРаботниковОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА УдержанияРаботниковОрганизации.ДействиеЗавершения
		|			ИНАЧЕ УдержанияРаботниковОрганизации.Действие
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УдержанияРаботниковОрганизации.Период,
		|		УдержанияРаботниковОрганизации.ВидРасчета,
		|		УдержанияРаботниковОрганизации.Действие,
		|		ВЫБОР
		|			КОГДА (НЕ УдержанияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист)
		|					ИЛИ УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.БанковскиеИздержки))
		|				ТОГДА ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка)
		|			ИНАЧЕ УдержанияРаботниковОрганизации.ДокументОснование
		|		КОНЕЦ,
		|		УдержанияРаботниковОрганизации.ПрожиточныйМинимум,
		|		УдержанияРаботниковОрганизации.ПорядокИсчисленияИздержек,
		|		УдержанияРаботниковОрганизации.Получатель,
		|		УдержанияРаботниковОрганизации.Показатель1,
		|		УдержанияРаботниковОрганизации.Показатель2,
		|		УдержанияРаботниковОрганизации.Показатель3,
		|		УдержанияРаботниковОрганизации.Показатель4,
		|		УдержанияРаботниковОрганизации.Показатель5,
		|		УдержанияРаботниковОрганизации.Показатель6,
		|		УдержанияРаботниковОрганизации.Валюта1,
		|		УдержанияРаботниковОрганизации.Валюта2,
		|		УдержанияРаботниковОрганизации.Валюта3,
		|		УдержанияРаботниковОрганизации.Валюта4,
		|		УдержанияРаботниковОрганизации.Валюта5,
		|		УдержанияРаботниковОрганизации.Валюта6,
		|		УдержанияРаботниковОрганизации.ФизЛицо
		|	ИЗ
		|		РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК СписокРаботников
		|			ПО УдержанияРаботниковОрганизации.ФизЛицо = СписокРаботников.Физлицо
		|	ГДЕ
		|		УдержанияРаботниковОрганизации.Период > &парамНачало
		|		И УдержанияРаботниковОрганизации.Период <= &парамКонец
		|		И УдержанияРаботниковОрганизации.Организация = &парамГоловнаяОрганизация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УдержанияРаботниковОрганизации.ПериодЗавершения,
		|		УдержанияРаботниковОрганизации.ВидРасчета,
		|		УдержанияРаботниковОрганизации.ДействиеЗавершения,
		|		ВЫБОР
		|			КОГДА (НЕ УдержанияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист)
		|					ИЛИ УдержанияРаботниковОрганизации.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.БанковскиеИздержки))
		|				ТОГДА ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка)
		|			ИНАЧЕ УдержанияРаботниковОрганизации.ДокументОснование
		|		КОНЕЦ,
		|		УдержанияРаботниковОрганизации.ПрожиточныйМинимум,
		|		УдержанияРаботниковОрганизации.ПорядокИсчисленияИздержек,
		|		УдержанияРаботниковОрганизации.Получатель,
		|		УдержанияРаботниковОрганизации.Показатель1Завершения,
		|		УдержанияРаботниковОрганизации.Показатель2Завершения,
		|		УдержанияРаботниковОрганизации.Показатель3Завершения,
		|		УдержанияРаботниковОрганизации.Показатель4Завершения,
		|		УдержанияРаботниковОрганизации.Показатель5Завершения,
		|		УдержанияРаботниковОрганизации.Показатель6Завершения,
		|		УдержанияРаботниковОрганизации.Валюта1Завершения,
		|		УдержанияРаботниковОрганизации.Валюта2Завершения,
		|		УдержанияРаботниковОрганизации.Валюта3Завершения,
		|		УдержанияРаботниковОрганизации.Валюта4Завершения,
		|		УдержанияРаботниковОрганизации.Валюта5Завершения,
		|		УдержанияРаботниковОрганизации.Валюта6Завершения,
		|		УдержанияРаботниковОрганизации.ФизЛицо
		|	ИЗ
		|		РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК СписокРаботников
		|			ПО УдержанияРаботниковОрганизации.ФизЛицо = СписокРаботников.Физлицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизацииПроверка
		|			ПО (УдержанияРаботниковОрганизацииПроверка.Организация = УдержанияРаботниковОрганизации.Организация)
		|				И (УдержанияРаботниковОрганизацииПроверка.ФизЛицо = УдержанияРаботниковОрганизации.ФизЛицо)
		|				И (УдержанияРаботниковОрганизацииПроверка.ВидРасчета = УдержанияРаботниковОрганизации.ВидРасчета)
		|				И (УдержанияРаботниковОрганизацииПроверка.ДокументОснование = УдержанияРаботниковОрганизации.ДокументОснование)
		|				И (УдержанияРаботниковОрганизацииПроверка.Период > УдержанияРаботниковОрганизации.Период)
		|				И (УдержанияРаботниковОрганизацииПроверка.Период <= УдержанияРаботниковОрганизации.ПериодЗавершения)
		|	ГДЕ
		|		УдержанияРаботниковОрганизации.ПериодЗавершения > &парамНачало
		|		И УдержанияРаботниковОрганизации.ПериодЗавершения <= &парамКонец
		|		И УдержанияРаботниковОрганизации.Организация = &парамГоловнаяОрганизация
		|		И УдержанияРаботниковОрганизацииПроверка.ФизЛицо ЕСТЬ NULL ) КАК УдержанияРаботниковОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты1
		|		ПО (Валюты1.Период = &парамДатаВалютногоУчета)
		|			И УдержанияРаботниковОрганизации.Валюта1 = Валюты1.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты2
		|		ПО (Валюты2.Период = &парамДатаВалютногоУчета)
		|			И УдержанияРаботниковОрганизации.Валюта2 = Валюты2.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты3
		|		ПО (Валюты3.Период = &парамДатаВалютногоУчета)
		|			И УдержанияРаботниковОрганизации.Валюта3 = Валюты3.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты4
		|		ПО (Валюты4.Период = &парамДатаВалютногоУчета)
		|			И УдержанияРаботниковОрганизации.Валюта4 = Валюты4.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты5
		|		ПО (Валюты5.Период = &парамДатаВалютногоУчета)
		|			И УдержанияРаботниковОрганизации.Валюта5 = Валюты5.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты6
		|		ПО (Валюты6.Период = &парамДатаВалютногоУчета)
		|			И УдержанияРаботниковОрганизации.Валюта6 = Валюты6.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
		|		ПО УдержанияРаботниковОрганизации.Физлицо = Показатели.Сотрудник.Физлицо
		|			И УдержанияРаботниковОрганизации.ВидРасчета = Показатели.ВидРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			НеВводимыеПоказатели.Ссылка КАК Ссылка,
		|			НеВводимыеПоказатели.НомерСтроки КАК НомерСтроки,
		|			НеВводимыеПоказатели.Показатель КАК Показатель,
		|			НеВводимыеПоказатели.Показатель.ВозможностьИзменения КАК ПоказательВозможностьИзменения,
		|			СУММА(ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя) КАК ЗначениеПоказателя,
		|			ЗначенияВводимыхКадровыхПоказателей.Сотрудник.ФизЛицо КАК ФизЛицо,
		|			ЗначенияВводимыхКадровыхПоказателей.Период КАК Период
		|		ИЗ
		|			ВТНеЗапрашиваемыеПриКадровыхПеремещениях КАК НеВводимыеПоказатели
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияВводимыхКадровыхПоказателей КАК ЗначенияВводимыхКадровыхПоказателей
		|				ПО НеВводимыеПоказатели.Показатель = ЗначенияВводимыхКадровыхПоказателей.Показатель
		|		ГДЕ
		|			ЗначенияВводимыхКадровыхПоказателей.ЗначениеПоказателя <> 0
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НеВводимыеПоказатели.Ссылка,
		|			НеВводимыеПоказатели.НомерСтроки,
		|			НеВводимыеПоказатели.Показатель,
		|			НеВводимыеПоказатели.Показатель.ВозможностьИзменения,
		|			ЗначенияВводимыхКадровыхПоказателей.Сотрудник.ФизЛицо,
		|			ЗначенияВводимыхКадровыхПоказателей.Период) КАК ЗначенияВводимыхКадровыхПоказателей
		|		ПО УдержанияРаботниковОрганизации.Физлицо = ЗначенияВводимыхКадровыхПоказателей.ФизЛицо
		|			И (КОНЕЦПЕРИОДА(УдержанияРаботниковОрганизации.Период, МЕСЯЦ) = КОНЕЦПЕРИОДА(ЗначенияВводимыхКадровыхПоказателей.Период, МЕСЯЦ))
		|			И УдержанияРаботниковОрганизации.ВидРасчета = ЗначенияВводимыхКадровыхПоказателей.Ссылка";
		
		// если не перерасчет - проверяем проведенность в расчетном периоде
		Если Не ЭтоПерерасчет Тогда
			ТекстЗапросаУдержаний = ТекстЗапросаУдержаний + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			УдержанияРаботников.ФизЛицо КАК ФизЛицо,
		|			УдержанияРаботников.ВидРасчета КАК ВидРасчета,
		|			УдержанияРаботников.ДокументОснование КАК ДокументОснование
		|		ИЗ
		|			РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботников
		|		ГДЕ
		|			УдержанияРаботников.ПериодРегистрации = &парамПериодРегистрации
		|			И УдержанияРаботников.ФизЛицо В
		|					(ВЫБРАТЬ
		|						СписокРаботников.Физлицо
		|					ИЗ
		|						ВТСписокРаботников КАК СписокРаботников)
		|			И УдержанияРаботников.ОбособленноеПодразделение = &парамОрганизация
		|			И УдержанияРаботников.Регистратор <> &парамРегистратор
		|			И НАЧАЛОПЕРИОДА(УдержанияРаботников.БазовыйПериодНачало, МЕСЯЦ) = &парамПериодРегистрации) КАК ЗарегистрированныеУдержанияРаботников
		|		ПО УдержанияРаботниковОрганизации.Физлицо = ЗарегистрированныеУдержанияРаботников.ФизЛицо
		|			И УдержанияРаботниковОрганизации.ВидРасчета = ЗарегистрированныеУдержанияРаботников.ВидРасчета
		|			И (ЗарегистрированныеУдержанияРаботников.ДокументОснование = ВЫБОР
		|				КОГДА УдержанияРаботниковОрганизации.ДокументОснование ССЫЛКА Документ.ИсполнительныйЛист
		|					ТОГДА УдержанияРаботниковОрганизации.ДокументОснование
		|				ИНАЧЕ ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка)
		|			КОНЕЦ)
		|ГДЕ
		|	ЗарегистрированныеУдержанияРаботников.ФизЛицо ЕСТЬ NULL ";
		
		КонецЕсли;
		
		ТекстЗапросаУдержаний = ТекстЗапросаУдержаний + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизлицоНаименование,
		|	Физлицо,
		|	ДокументОснование,
		|	ВидРасчета,
		|	УдержанияРаботниковОрганизации.Период";
		
		Запрос.Текст = ТекстЗапросаУдержаний;
		УдержанияВыборка = Запрос.Выполнить().Выбрать();

		ТЗУдержания = СформироватьТаблицуУдержаний(УдержанияВыборка, ОкончаниеПериодаЗаполнения, МассивВалютСНезаданнымКурсом);
		
		Если МассивВалютСНезаданнымКурсом.Количество() > 0 Тогда
			ТЗУдержания.Очистить();
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Сторно,ФизЛицо,ВидРасчета,ДокументОснование,ДатаНачала,Получатель,ДополнительныеДанные, ПорядокИсчисленияИздержек", Ложь);
		Для каждого СтрокаУдержания Из ТЗУдержания Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаУдержания);	
			Если Удержания.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(Удержания.Добавить(),СтрокаУдержания)	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивВалютСНезаданнымКурсом.Количество() > 0 Тогда
		МассивРасшифровки = Новый Массив;
		МассивРасшифровки.Добавить("ОткрытьФормуСписка");
		МассивРасшифровки.Добавить("РегистрыСведений.КурсыВалютДляРасчетовСПерсоналом");
		
		Расшифровки = Новый Массив;
		Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", "Заполните курс валют" + " ", МассивРасшифровки));
		
		Для Каждого КлючЗначение Из МассивВалютСНезаданнымКурсом Цикл
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Для расчетного периода не задан курс валюты " + КлючЗначение.Ключ,,,Перечисления.ВидыСообщений.Ошибка, Расшифровки);
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;

	
	// АВТОЗАПОЛНЕНИЕ ТЧ "НДФЛ"
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет ИЛИ
		ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
		
		// если заполняем не по переданным сотрудникам - добавим уволенных, имевших налогооблагаемые доходы
		Если Не ЗаполняемПоОтобраннымСотрудникам Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СотрудникиОрганизаций.Физлицо КАК Физлицо
			|ПОМЕСТИТЬ ВТПрочиеСотрудники
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	(НЕ СотрудникиОрганизаций.Физлицо В
			|				(ВЫБРАТЬ
			|					СписокРаботников.Физлицо
			|				ИЗ
			|					ВТСписокРаботников КАК СписокРаботников))
			|	И СотрудникиОрганизаций.Организация = &парамГоловнаяОрганизация
			|	И СотрудникиОрганизаций.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Физлицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НДФЛСведенияОДоходах.ФизЛицо
			|ИЗ
			|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
			|ГДЕ
			|	НДФЛСведенияОДоходах.Организация = &парамГоловнаяОрганизация
			|	И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
			|	И НДФЛСведенияОДоходах.ОбособленноеПодразделение = &парамОрганизация
			|	И НДФЛСведенияОДоходах.Регистратор <> &Ссылка
			|	И НДФЛСведенияОДоходах.ФизЛицо В
			|			(ВЫБРАТЬ
			|				СписокРаботников.Физлицо
			|			ИЗ
			|				ВТПрочиеСотрудники КАК СписокРаботников)
			|	И ВЫБОР
			|			КОГДА &ПоВсемПодразделениям
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ НДФЛСведенияОДоходах.ПодразделениеОрганизации В
			|					(ВЫБРАТЬ
			|						Подразделения.Подразделение
			|					ИЗ
			|						ВТПодразделенияОтбора КАК Подразделения)
			|		КОНЕЦ
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НДФЛСведенияОДоходах.ФизЛицо
			|ИЗ
			|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
			|ГДЕ
			|	НДФЛСведенияОДоходах.ФизЛицо В
			|			(ВЫБРАТЬ
			|				СписокРаботников.Физлицо
			|			ИЗ
			|				ВТСписокРаботников КАК СписокРаботников)
			|	И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &парамПериодРегистрации
			|	И НДФЛСведенияОДоходах.ОбособленноеПодразделение = &парамОрганизация
			|	И НДФЛСведенияОДоходах.Регистратор <> &Ссылка";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				РаботникиДляРасчетаНДФЛ.Вставить(Выборка.Физлицо, 0);
			КонецЦикла;
			
		КонецЕсли;
		
		// заполним НДФЛ
		СтруктураПоиска = Новый Структура("ФизЛицо,МесяцНалоговогоПериода",,КонецМесяца(ПериодРегистрации));
		Для Каждого Элемент Из РаботникиДляРасчетаНДФЛ Цикл
			СтруктураПоиска.ФизЛицо = Элемент.Ключ;
			Если НДФЛ.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(НДФЛ.Добавить(),СтруктураПоиска)	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// заполняем погашение займов 
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет ИЛИ
		ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
			// погашение займов
			ТекстЗапросаУдержаний = 
			"ВЫБРАТЬ
			|	ПогашениеЗаймовРаботникамиОстатки.ФизЛицо КАК ФизЛицо,
			|	ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма КАК ДоговорЗайма,
			|	ВЫБОР
			|		КОГДА СведенияОЗаймах.НачислятьМатериальнуюВыгоду
			|			ТОГДА СведенияОЗаймах.СтавкаНалогообложенияРезидента
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК СтавкаНалогообложенияМатвыгоды
			|ПОМЕСТИТЬ ВТЗаемщики
			|ИЗ
			|	РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций.Остатки(
			|			&парамНачало,
			|			Организация = &парамОрганизация
			|				И Физлицо В
			|					(ВЫБРАТЬ
			|						СписокРаботников.Физлицо
			|					ИЗ
			|						ВТСписокРаботников КАК СписокРаботников
			|					ГДЕ
			|						СписокРаботников.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))) КАК ПогашениеЗаймовРаботникамиОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОЗаймах КАК СведенияОЗаймах
			|		ПО ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма = СведенияОЗаймах.ДоговорЗайма
			|			И ПогашениеЗаймовРаботникамиОстатки.ФизЛицо = СведенияОЗаймах.ФизЛицо
			|ГДЕ
			|	(СведенияОЗаймах.НачалоПогашения <= &парамНачало
			|			ИЛИ СведенияОЗаймах.ПроцентЗаПользованиеЗаймом > 0
			|			ИЛИ СведенияОЗаймах.НачислятьМатериальнуюВыгоду)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПогашениеЗаймовРаботникамиОбороты.ФизЛицо,
			|	ПогашениеЗаймовРаботникамиОбороты.ДоговорЗайма,
			|	ВЫБОР
			|		КОГДА СведенияОЗаймах.НачислятьМатериальнуюВыгоду
			|			ТОГДА СведенияОЗаймах.СтавкаНалогообложенияРезидента
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ
			|ИЗ
			|	РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОбороты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОЗаймах КАК СведенияОЗаймах
			|		ПО ПогашениеЗаймовРаботникамиОбороты.ДоговорЗайма = СведенияОЗаймах.ДоговорЗайма
			|			И ПогашениеЗаймовРаботникамиОбороты.ФизЛицо = СведенияОЗаймах.ФизЛицо
			|ГДЕ
			|	(СведенияОЗаймах.НачалоПогашения <= &парамНачало
			|			ИЛИ СведенияОЗаймах.ПроцентЗаПользованиеЗаймом > 0
			|			ИЛИ СведенияОЗаймах.НачислятьМатериальнуюВыгоду)
			|	И ПогашениеЗаймовРаботникамиОбороты.Организация = &парамОрганизация
			|	И ПогашениеЗаймовРаботникамиОбороты.ФизЛицо В
			|			(ВЫБРАТЬ
			|				СписокРаботников.Физлицо
			|			ИЗ
			|				ВТСписокРаботников КАК СписокРаботников
			|			ГДЕ
			|				СписокРаботников.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|	И ПогашениеЗаймовРаботникамиОбороты.Период МЕЖДУ &парамНачало И &парамКонец
			|	И ПогашениеЗаймовРаботникамиОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизЛицо,
			|	ДоговорЗайма
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо,
			|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаРегистра
			|ПОМЕСТИТЬ ВТПериодыЗаписейРегистра
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|ГДЕ
			|	РаботникиОрганизаций.Организация = &парамГоловнаяОрганизация
			|	И РаботникиОрганизаций.Период <= &парамКонец
			|	И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
			|	И РаботникиОрганизаций.Сотрудник В
			|			(ВЫБРАТЬ
			|				СписокРаботников.Сотрудник
			|			ИЗ
			|				ВТСписокРаботников КАК СписокРаботников)
			|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|
			|СГРУППИРОВАТЬ ПО
			|	РаботникиОрганизаций.Сотрудник.Физлицо
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Физлицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Периоды.Физлицо КАК Физлицо,
			|	ВЫБОР
			|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= &парамКонец
			|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
			|		ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
			|	КОНЕЦ КАК ПодразделениеОрганизации
			|ПОМЕСТИТЬ ВТПодразделения
			|ИЗ
			|	ВТПериодыЗаписейРегистра КАК Периоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|		ПО Периоды.Физлицо = РаботникиОрганизаций.Сотрудник.Физлицо
			|			И Периоды.ДатаРегистра = РаботникиОрганизаций.Период
			|			И (РаботникиОрганизаций.Организация = &парамГоловнаяОрганизация)
			|			И (РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|			И (РаботникиОрганизаций.Сотрудник В
			|				(ВЫБРАТЬ
			|					СписокРаботников.Сотрудник
			|				ИЗ
			|					ВТСписокРаботников КАК СписокРаботников))
			|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Физлицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПогашениеЗаймовРаботникамиОстатки.ФизЛицо,
			|	ПогашениеЗаймовРаботникамиОстатки.ФизЛицо.Наименование КАК ФизЛицоНаименование,
			|	ПогашениеЗаймовРаботникамиОстатки.СтавкаНалогообложенияМатвыгоды,
			|	ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма,
			|	РаботникиОрганизаций.ПодразделениеОрганизации
			|ИЗ
			|	ВТЗаемщики КАК ПогашениеЗаймовРаботникамиОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодразделения КАК РаботникиОрганизаций
			|		ПО ПогашениеЗаймовРаботникамиОстатки.ФизЛицо = РаботникиОрганизаций.Физлицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПогашениеЗаймовРаботникамиОрганизаций КАК ПогашениеЗаймовРаботникамиОбороты
			|		ПО ПогашениеЗаймовРаботникамиОстатки.ФизЛицо = ПогашениеЗаймовРаботникамиОбороты.ФизЛицо
			|			И ПогашениеЗаймовРаботникамиОстатки.ДоговорЗайма = ПогашениеЗаймовРаботникамиОбороты.ДоговорЗайма
			|			И (ПогашениеЗаймовРаботникамиОбороты.Период МЕЖДУ &парамНачало И &парамКонец)
			|			И (ПогашениеЗаймовРаботникамиОбороты.Регистратор ССЫЛКА Документ.НачислениеЗарплатыРаботникамОрганизаций)
			|			И (ВЫРАЗИТЬ(ПогашениеЗаймовРаботникамиОбороты.Регистратор КАК Документ.НачислениеЗарплатыРаботникамОрганизаций).ПериодРегистрации = &парамПериодРегистрации)
			|ГДЕ
			|	ПогашениеЗаймовРаботникамиОбороты.ФизЛицо ЕСТЬ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизЛицоНаименование";
			
			Запрос.Текст = ТекстЗапросаУдержаний;
			СтруктураПоиска = Новый Структура("ФизЛицо,ДоговорЗайма,Сторно",Неопределено, Неопределено, Ложь);
			Для каждого СтрокаУдержания Из Запрос.Выполнить().Выгрузить() Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаУдержания);	
				Если ПогашениеЗаймов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
					ЗаполнитьЗначенияСвойств(ПогашениеЗаймов.Добавить(),СтрокаУдержания)	
				КонецЕсли;
			КонецЦикла;
			
	КонецЕсли;
///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 09.11.2011 15:29 
	// ОПИСАНИЕ: проверяем наличие табеля у сотрудников.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.AVT_ПроверятьНаличиеТабеляПриНачисленииЗарплаты
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Организация = &парамОрганизация";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.AVT_ПроверятьНаличиеТабеляПриНачисленииЗарплаты Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокРаботников.Сотрудник
		|ИЗ
		|	ВТРаботникиИНачисленияПоСхемамМотивации КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций.Обороты(, , Регистратор, ) КАК РабочееВремяРаботниковОрганизацийОбороты
		|		ПО (НАЧАЛОПЕРИОДА(РабочееВремяРаботниковОрганизацийОбороты.Период, МЕСЯЦ) = &парамНачалоМесяца)
		|			И (РабочееВремяРаботниковОрганизацийОбороты.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
		|			И СписокРаботников.Сотрудник = РабочееВремяРаботниковОрганизацийОбороты.Сотрудник
		|ГДЕ
		|	РабочееВремяРаботниковОрганизацийОбороты.Сотрудник ЕСТЬ NULL ";
		ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать();
		Если ВыборкаПоСотрудникам.Количество() > 0 Тогда
			СтрокаНачалаСообщенияОбОшибке = "По следующим сотрудникам не введен табель учета рабочего времени за расчетный период: ";
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке, , );
		КонецЕсли;	
		Пока ВыборкаПоСотрудникам.Следующий() Цикл
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(Строка(ВыборкаПоСотрудникам.Сотрудник), , );
		КонецЦикла;
	КонецЕсли;	
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}    
	Возврат Истина;

КонецФункции

// процедура дописывать строки в таблицуИсточник из таблицы Приемник.
// Обе таблицы должны иметь одинаковую структуру колонок, иначе возникнет ошибка.
Процедура ДописатьСтрокиИзТаблицыВТаблицу(ТаблицаИсточник, ТаблицаПриемник)
	
	Для Каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточника);
	КонецЦикла;
	
КонецПроцедуры // ДописатьСтрокиИзТаблицыВТаблицу()

// Заполняет набор записей по переданным данным расчета НДФЛ
//
// Параметры: 
//  НаборЗаписей - набор записей регистра НДФЛРасчетыСБюджетом
//    ДанныеНДФЛ - таблица значений - данные расчета НДФЛ
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымНДФЛ(НаборЗаписей, ДанныеНДФЛ, ВыборкаПоШапкеДокумента, Перерасчет = Ложь, ФизлицаСписок = Неопределено)
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ПодразделениеОрганизации");

	// строим соответствие физлиц, по  которым считается НДФЛ и индексов их строк табличной части НДФЛ
	РаботникиДляРасчетаНДФЛ = Новый Соответствие;
	РасчетПоФизлицу = Ложь;
	
	Если ФизлицаСписок <> Неопределено И Не Перерасчет Тогда
		
		// расчет по одному физлицу
		РасчетПоФизлицу = Истина;
		РаботникиДляРасчетаНДФЛ.Вставить(ФизлицаСписок[0].Значение);
		СтруктураПоиска = Новый Структура("ФизЛицо", ФизлицаСписок[0].Значение);
		// запоминаем позицию физлица в табличной части
		ИндексСтрокиТаблицыНДФЛ = НеОпределено;
		МассивСтрок = НДФЛ.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТабличнойЧасти Из МассивСтрок Цикл
			Если ИндексСтрокиТаблицыНДФЛ = НеОпределено Тогда
				ИндексСтрокиТаблицыНДФЛ = СтрокаТабличнойЧасти.НомерСтроки - 1;
			КонецЕсли;
			НДФЛ.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		Если ИндексСтрокиТаблицыНДФЛ = НеОпределено Тогда
			ИндексСтрокиТаблицыНДФЛ = 0;
		КонецЕсли;
			
	ИначеЕсли ФизлицаСписок <> Неопределено И Перерасчет Тогда
		// это перерасчет
		Для Каждого ЭлементСписка Из ФизлицаСписок Цикл
			РаботникиДляРасчетаНДФЛ.Вставить(ЭлементСписка.Значение);
		КонецЦикла;
	Иначе //расчет всего документа
		Для Каждого Строка Из НДФЛ Цикл
			РаботникиДляРасчетаНДФЛ.Вставить(Строка.Физлицо);
		КонецЦикла;
		// очистим результаты расчета НДФЛ, которые находятся в табличной части документа
		НДФЛ.Очистить();
		
	КонецЕсли;
	
	Для каждого СтрокаДанных Из ДанныеНДФЛ Цикл
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> Неопределено Тогда
			// зарегистрируем в регистре
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			Движение.Период						= КонецМесяца(ПериодРегистрации);

			// Измерения
			Движение.Организация	 	   		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо	 	 	  		= СтрокаДанных.ФизЛицо;
			Движение.МесяцНалоговогоПериода			= СтрокаДанных.МесяцНалоговогоПериода;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;

			// Ресурсы
			Движение.Налог						= СтрокаДанных.Налог;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
			Движение.ПодразделениеОрганизации	= СтрокаДанных.ПодразделениеОрганизации;
			Движение.ИсчисленоИзЗарплаты	= Истина;	
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
			Движение.Период						= КонецМесяца(ПериодРегистрации);

			// Измерения
			Движение.Организация	 	   		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ФизЛицо	 	 	  		= СтрокаДанных.ФизЛицо;
			Движение.МесяцНалоговогоПериода			= СтрокаДанных.МесяцНалоговогоПериода;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;

			// Ресурсы
			Движение.Налог						= СтрокаДанных.ЗачтеноАвансовыхПлатежей;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ЗачетАвансовыхПлатежей;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
			Движение.ПодразделениеОрганизации	= СтрокаДанных.ПодразделениеОрганизации;
			Движение.ИсчисленоИзЗарплаты	= Истина;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаДанных);
			Строки = НДФЛ.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				СтрокаНДФЛ = Строки[0];
			Иначе
				СтрокаНДФЛ = НДФЛ.Добавить();
			КонецЕсли;
		Иначе
			Если РасчетПоФизлицу Тогда
				СтрокаНДФЛ = НДФЛ.Вставить(ИндексСтрокиТаблицыНДФЛ);
				ИндексСтрокиТаблицыНДФЛ = ИндексСтрокиТаблицыНДФЛ+1;
			Иначе
				СтрокаНДФЛ = НДФЛ.Добавить();
			КонецЕсли;
		КонецЕсли;
		РаботникиДляРасчетаНДФЛ.Удалить(СтрокаДанных.ФизЛицо);
		ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, СтрокаДанных);
		
	КонецЦикла;
	
	// заполним НДФЛ
	Для Каждого Элемент Из РаботникиДляРасчетаНДФЛ Цикл
		НоваяСтрока = НДФЛ.Добавить();
		НоваяСтрока.ФизЛицо = Элемент.Ключ;
		НоваяСтрока.МесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымНДФЛ()

// Закрытие строк - ввод значения ДатаОкончания для тех строк у которых не нулевое 
// значение Размер и удаление тех, у кого ВидРасчета - неопределено или ДатаНачала > даты закрытия
// Параметры:
//  ТЗ - таблица значений
//  НезакрытыеСтроки - массив незакрытых строк таблицы значений ТЗ
//  ДатаОкончания - дата, которую нужно проставить в качестве "закрывающей"
//
// Возвращаемое зеначение:
//  нет
//
Процедура ЗакрытьСтроки(ТЗ, НезакрытыеСтроки, ДатаОкончания)
	
	Для Каждого Строка Из НезакрытыеСтроки Цикл
		Если Строка.ВидРасчета = Неопределено ИЛИ Строка.ДатаНачала > ДатаОкончания Тогда
			ТЗ.Удалить(Строка);
		ИначеЕсли Строка.ДатаОкончания = '00010101' или Строка.ДатаОкончания > ДатаОкончания Тогда
			Строка.ДатаОкончания = ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	НезакрытыеСтроки.Очистить();
	
КонецПроцедуры // ЗакрытьСтроки()

// Найти строку в массиве строк по переданному виду расчета или по признаку "Основное"
// Найденная строка и ее индекс возвращаются через переданные параметры Строка и ИндексСтроки
// Параметры:
//  НезакрытыеСтроки - массив строк таблицы значений
//	ПоискОсновного - признак поиска основного начисления
//  ВидРасчета - вид расчета ссылка
//  Строка - в этот параметр будет возвращена строка, начальное значение - Неопределено
//  ИндексСтроки - в этот параметр будет возвращен индекс строки, начальное значение - Неопределено
//
// Возвращаемое зеначение:
//  нет
//
Процедура НайтиСредиНезакрытых(НезакрытыеСтроки, ПоискОсновного, ВидРасчета, Строки)
	Количество = НезакрытыеСтроки.Количество();
	Для Сч = 1 По Количество Цикл
		Индекс = Количество - Сч;
		Если (ПоискОсновного И НезакрытыеСтроки[Индекс].Основное) 
			ИЛИ (НЕ ПоискОсновного И НезакрытыеСтроки[Индекс].ВидРасчета = ВидРасчета) Тогда
			Строки.Добавить(НезакрытыеСтроки[Индекс]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // НайтиСредиНезакрытых()

// Нйти строку в массиве строк по переданному виду расчета и основанию (ссылка на документ)
// Найденная строка и ее индекс возвращаются через переданные параметры Строка и ИндексСтроки
// Параметры:
//  НезакрытыеСтроки - массив строк таблицы значений
//  ВидРасчета - вид расчета ссылка
//  ДокументОснование - документ ссылка
//  Строка - в этот параметр будет возвращена строка, начальное значение - Неопределено
//  ИндексСтроки - в этот параметр будет возвращен индекс строки, начальное значение - Неопределено
//
// Возвращаемое зеначение:
//  нет
//
Процедура НайтиСредиНезакрытыхУдержаний(НезакрытыеСтроки, ВидРасчета, ДокументОснование, Получатель, ПорядокИсчисленияИздержек, Строка, ИндексСтроки)
	
	Для Индекс = 0 По НезакрытыеСтроки.ВГраница() Цикл
		Если НезакрытыеСтроки[Индекс].ВидРасчета = ВидРасчета Тогда
			СтрокаНайдена = Ложь;
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				СтрокаНайдена = НезакрытыеСтроки[Индекс].ДокументОснование = ДокументОснование
			Иначе	
				СтрокаНайдена = НезакрытыеСтроки[Индекс].Получатель = Получатель И НезакрытыеСтроки[Индекс].ПорядокИсчисленияИздержек = ПорядокИсчисленияИздержек
			КонецЕсли;
			Если СтрокаНайдена Тогда
				ИндексСтроки = Индекс;
				Строка = НезакрытыеСтроки[Индекс];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // НайтиСредиНезакрытыхУдержаний()

// Добавляет строку сторно начислений в движения и табличную часть документа
Процедура ДобавитьСтрокуСторно(Движения, ТабличнаяЧасть, Строка)

	СтрокаСохраняемыхРеквизитов = "Сотрудник,ФизЛицо,Организация,ВидРасчета,ДатаНачалаСобытия,ВариантОбработкиЗаписиПриОтраженииВРеглУчете," 
									+ "ОбособленноеПодразделение,ПодразделениеОрганизации,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ВидУчетаВремени,ГрафикРаботы,ГрафикРаботыНорма,"
									+ "ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,СторнируемыйДокумент";
	// новая запись движений
	Движение = Движения.Добавить();
	
	ЗаполнитьЗначенияСвойств(Движение,Строка,СтрокаСохраняемыхРеквизитов);
	
	// Свойства
	Движение.ПериодРегистрации				= Строка.ПериодРегистрацииСторно;
	Движение.ПериодДействияНачало			= Строка.ПериодДействияНачалоСторно;
	Движение.ПериодДействияКонец			= Строка.ПериодДействияКонецСторно;
	Движение.БазовыйПериодНачало			= Строка.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец				= Строка.БазовыйПериодКонец;
	Движение.Сторно							= Истина;
	Движение.Авторасчет						= Истина;

	СтрокаСохраняемыхРеквизитов = "Сотрудник,ФизЛицо,ВидРасчета,ДатаНачалаСобытия," 
									+ "ПодразделениеОрганизации,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,"
									+ "ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,СторнируемыйДокумент";
	// новая строка табличной части
	СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Строка,СтрокаСохраняемыхРеквизитов);
	
	СтрокаТабличнойЧасти.ДатаНачала					= Строка.ПериодДействияНачалоСторно;
	СтрокаТабличнойЧасти.ДатаОкончания				= Строка.ПериодДействияКонецСторно;

	СтрокаТабличнойЧасти.Сторно						= Истина;
	СтрокаТабличнойЧасти.Авторасчет					= Истина; 
	
КонецПроцедуры

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Расчерчивает разделы расчетного листка линиями
//
// Параметры
//  ВременныйТабличныйДокумент - Табличный документ с уже выведенными строками расчетного листка
//  СтрокПропустить - целое число уже обработанных ранее строк т.д.
//  СтрокРасчертить - целое число строк т.д., которым требуется указать границы
//
Процедура РасчертитьРасчетныйЛисток(ВременныйТабличныйДокумент,СтрокПропустить,СтрокРасчертить)

	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Для Сч = 0 По СтрокРасчертить - 1 Цикл
		
		НомерСтроки = СтрокПропустить + Сч;
		
		Для Ссч = 2 По 17 Цикл
			
			Если Ссч = 4 ИЛИ Ссч = 10 ИЛИ Ссч = 13 ИЛИ Ссч = 15 Тогда
				Продолжить
			КонецЕсли; 
			
			ВременныйТабличныйДокумент.Область(НомерСтроки, Ссч).ГраницаСлева = Линия;
			
		КонецЦикла;
		
		ВременныйТабличныйДокумент.Область(НомерСтроки, 15).ГраницаСправа = Линия;
		ВременныйТабличныйДокумент.Область(НомерСтроки, 2, НомерСтроки, 15).ГраницаСнизу = Линия;
		
	КонецЦикла;
	
КонецПроцедуры // РасчертитьРасчетныйЛисток()

#КонецЕсли

Функция ПолучитьДоплатыЗаНочныеВечерние()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|				ГДЕ
	|					ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю
	|					И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АвтоНачислятьПоТабелюНочные,
	|	ВЫБОР
	|		КОГДА 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|				ГДЕ
	|					ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю
	|					И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АвтоНачислятьПоТабелюВечерние
	|ПОМЕСТИТЬ ПризнакиАвтоначисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени
	|ПОМЕСТИТЬ НачисленияСПризнаком
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю
	|	И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПризнакиАвтоначисления.АвтоНачислятьПоТабелюНочные
	|			ТОГДА НочныеНачисленияСПризнаком.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы)
	|	КОНЕЦ КАК ДоплатаЗаНочныеЧасы,
	|	ВЫБОР
	|		КОГДА ПризнакиАвтоначисления.АвтоНачислятьПоТабелюВечерние
	|			ТОГДА ВечерниеНачисленияСПризнаком.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаВечерниеЧасы)
	|	КОНЕЦ КАК ДоплатаЗаВечерниеЧасы,
	|	ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ПроцентДоплатыЗаРаботуВНочноеВремя, 20) КАК ПроцентДоплатыЗаНочныеЧасы,
	|	ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.ПроцентДоплатыЗаРаботуВВечернееВремя, 10) КАК ПроцентДоплатыЗаВечерниеЧасы
	|ИЗ
	|	ПризнакиАвтоначисления КАК ПризнакиАвтоначисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленияСПризнаком КАК НочныеНачисленияСПризнаком
	|		ПО (НочныеНачисленияСПризнаком.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы))
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленияСПризнаком КАК ВечерниеНачисленияСПризнаком
	|		ПО (ВечерниеНачисленияСПризнаком.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций
	|		ПО (УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Организация = &Организация)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("ПерваяПоловинаТекущегоМесяца" , Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизаций.Дата,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА НачислениеЗарплатыРаботникамОрганизаций.Организация
	|		ИНАЧЕ НачислениеЗарплатыРаботникамОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	НачислениеЗарплатыРаботникамОрганизаций.Организация КАК ОбособленноеПодразделение,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	НачислениеЗарплатыРаботникамОрганизаций.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплатыРаботникамОрганизаций.ПериодНачисления = &ПерваяПоловинаТекущегоМесяца
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРасчетПервойПоловиныМесяца,
	|	СписокНачисления.КоличествоСтрок КАК НачисленияКоличествоСтрок,
	|	НачислениеЗарплатыРаботникамОрганизаций.ДатаВыплатыДохода
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций,
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(Начисления.НомерСтроки) КАК КоличествоСтрок
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
	|	ГДЕ
	|		Начисления.Ссылка = &ДокументСсылка) КАК СписокНачисления
	|ГДЕ
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Физлицо = Неопределено)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

	Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
	Запрос.УстановитьПараметр("парамНеОтбиратьФизлицо", Физлицо = Неопределено);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиДокумента.Ссылка,
	|	СтрокиДокумента.НомерСтроки,
	|	СтрокиДокумента.Сотрудник КАК Сотрудник,
	|	СтрокиДокумента.Физлицо,
	|	СтрокиДокумента.ВидРасчета,
	|	НАЧАЛОПЕРИОДА(СтрокиДокумента.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	|	СтрокиДокумента.ДатаНачала,
	|	СтрокиДокумента.ДатаОкончания,
	|	СтрокиДокумента.Показатель1,
	|	СтрокиДокумента.Показатель2,
	|	СтрокиДокумента.Показатель3,
	|	СтрокиДокумента.Показатель4,
	|	СтрокиДокумента.Показатель5,
	|	СтрокиДокумента.Показатель6,
	|	СтрокиДокумента.Результат,
	|	СтрокиДокумента.ДополнительныйРезультат,
	|	СтрокиДокумента.ПодразделениеОрганизации,
	|	СтрокиДокумента.ОтработаноДней,
	|	СтрокиДокумента.ОтработаноЧасов,
	|	СтрокиДокумента.ОтработаноДнейПоПятидневке,
	|	СтрокиДокумента.НормаДней,
	|	СтрокиДокумента.НормаЧасов,
	|	СтрокиДокумента.НормаДнейПоПятидневке,
	|	СтрокиДокумента.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиДокумента.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	СтрокиДокумента.ДатаНачалаСобытия,
	|	СтрокиДокумента.Сторно,
	|	СтрокиДокумента.Авторасчет,
	|	СтрокиДокумента.ОплачиватьЧасов,
	|	СтрокиДокумента.ОплаченоДнейЧасов,
	|	СтрокиДокумента.ОтработаноЧасовПоПятидневке,
	|	СтрокиДокумента.НормаЧасовПоПятидневке,
	|	СтрокиДокумента.СторнируемыйДокумент,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроверятьПериодРасчетаСреднегоЗаработка,
	|	СтрокиДокумента.РасчетнаяБазаЗаЕдиницуНормыВремени
	|ПОМЕСТИТЬ ВТСтрокиНачислений
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК СтрокиДокумента
	|ГДЕ
	|	СтрокиДокумента.Ссылка = &ДокументСсылка
	|	И (&парамНеОтбиратьФизлицо
	|			ИЛИ СтрокиДокумента.Сотрудник.Физлицо = &парамФизлицо)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();

	// ВТГрафикиСотрудников
	//		таблица содержит номера строк документа с данными о графике указанного
	//		в этой строке сотрудника из рег-ра сведений РаботникиОрганизации
	// 
	//	Поля:
	//		НомерСтроки
	//      ГрафикРаботы
	//      ГрафикПолногоРабочегоВремени
	//      СуммированныйУчетРабочегоВремени
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследниеДаты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|	КОНЕЦ КАК СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТГрафикиСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|		СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|		СтрокиНачисления.Сотрудник КАК Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия
	|	ИЗ
	|		ВТСтрокиНачислений КАК СтрокиНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО СтрокиНачисления.ДатаНачалаСобытия >= РаботникиОрганизации.Период
	|				И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтрокиНачисления.НомерСтроки,
	|		СтрокиНачисления.Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия) КАК ПоследниеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПоследниеДаты.МаксПериод = РаботникиОрганизации.Период
	|			И ПоследниеДаты.Сотрудник = РаботникиОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// ВТДанныеИндивидуальныхГрафиковИТабелей
	//		таблица содержит номера строк документа с сотрудниками, для которых введены 
	//		подробные документы использования времени: инд.графики и/или табели
	// 
	//	Поля:
	//		НомерСтроки
	//      План
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	ГрафикиРаботыПоВидамВремени.План КАК План
	|ПОМЕСТИТЬ ВТДанныеИндивидуальныхГрафиковИТабелей
	|ИЗ
	|	ВТСтрокиНачислений КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И СтрокиНачисления.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	План";
	Запрос.Выполнить();
	
	// СводныеИндивидуальныеГрафикиРаботы
	//		таблица содержит номера строк документа с сотрудниками, для которых введены сводные 
	//		данные об их графике
	// 
	//	Поля:
	//		НомерСтроки
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафикиРаботы
	|ИЗ
	|	ВТСтрокиНачислений КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И СписокРаботников.ПериодДействия = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// Основной запрос
	//		Сотрудники, для которых введены сводные данные об их графике
	// 
	//	Поля:
	//		НомерСтроки
	// 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиНачисления.Сотрудник КАК Сотрудник,
	|	СтрокиНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокиНачисления.ВидРасчета КАК ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиНачисления.ВидРасчета.ВидВремени КАК ВидВремени,
	|	СтрокиНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК БазовыйПериодНачало,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК БазовыйПериодКонец,
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Показатель1 КАК Показатель1,
	|	СтрокиНачисления.Показатель2 КАК Показатель2,
	|	СтрокиНачисления.Показатель3 КАК Показатель3,
	|	СтрокиНачисления.Показатель4 КАК Показатель4,
	|	СтрокиНачисления.Показатель5 КАК Показатель5,
	|	СтрокиНачисления.Показатель6 КАК Показатель6,
	|	СтрокиНачисления.Результат КАК Результат,
	|	СтрокиНачисления.ДополнительныйРезультат КАК ДополнительныйРезультат,
	|	СтрокиНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	СтрокиНачисления.Сторно КАК Сторно,
	|	СтрокиНачисления.ОтработаноДней КАК ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	СтрокиНачисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|	СтрокиНачисления.ОтработаноЧасовПоПятидневке КАК ОтработаноЧасовПоПятидневке,
	|	СтрокиНачисления.НормаДней КАК НормаДней,
	|	СтрокиНачисления.НормаЧасов КАК НормаЧасов,
	|	СтрокиНачисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|	СтрокиНачисления.НормаЧасовПоПятидневке КАК НормаЧасовПоПятидневке,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	СтрокиНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	СтрокиНачисления.Авторасчет КАК Авторасчет,
	|	СтрокиНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|	СтрокиНачисления.ПроверятьПериодРасчетаСреднегоЗаработка,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА РаботникиОрганизации.ГрафикРаботы
	|		ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
			// если введен табель, но нет индивидуального графика, то норму времени надо считать по данным ""общего графика""
	|		КОГДА ТабелиУчетаВремениПоСотруднику.НомерСтроки ЕСТЬ НЕ NULL 
	|				И ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|				И СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА РаботникиОрганизации.ГрафикРаботы
			// если у работника сокращенное рабочее время, а норма времени определяется по полному графику
			// и введен индивидуальный график, то норму времени надо считать по-прежнему по данным ""общего графика""
	|		КОГДА РаботникиОрганизации.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				И (ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL 
	|					ИЛИ СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL )
	|			ТОГДА РаботникиОрганизации.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	ЕСТЬNULL(РаботникиОрганизации.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ОплачиватьЧасов,
	|	СтрокиНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПочасовымОтклонением,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.НеОбрабатывать)
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком)
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком)
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком)
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводстве)
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводстве)
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводстве)
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболевание)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка)
	|	КОНЕЦ КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	СтрокиНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени
	|ИЗ
	|	ВТСтрокиНачислений КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК РаботникиОрганизации
	|		ПО СтрокиНачисления.НомерСтроки = РаботникиОрганизации.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК СтрокиНачисления) КАК ГрафикРаботыПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК СтрокиНачисления
	|		ГДЕ
	|			(НЕ СтрокиНачисления.План)) КАК ТабелиУчетаВремениПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ТабелиУчетаВремениПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК СтрокиНачисления
	|		ГДЕ
	|			СтрокиНачисления.План) КАК ИндивидуальныеГрафикиРаботы
	|		ПО СтрокиНачисления.НомерСтроки = ИндивидуальныеГрафикиРаботы.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафикиРаботы КАК СводныеИндивидуальныеГрафикиРаботы
	|		ПО СтрокиНачисления.НомерСтроки = СводныеИндивидуальныеГрафикиРаботы.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Формирует запрос по таблице "ДополнительныеНачисления" документа
//
// Параметры: 
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента, Физлицо = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДатаНалоговогоПериода", КонецГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("НеОтбиратьФизлиц", Физлицо = Неопределено);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.КодВычета КАК КодВычета,
	|	СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	СтрокиНачисления.СуммаВычета,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.МатпомощьПриРожденииРебенка)
	|			ТОГДА СтрокиНачисления.СуммаВычета
	|		КОГДА СтрокиНачисления.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код404)
	|			ТОГДА СтрокиНачисления.СуммаВычета
	|		КОГДА СтрокиНачисления.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код405)
	|			ТОГДА СтрокиНачисления.СуммаВычета
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СкидкаПриНалогообложении,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокиНачисления.ДатаНачала КАК БазовыйПериодНачало,
	|	СтрокиНачисления.ДатаОкончания КАК БазовыйПериодКонец,
	|	СтрокиНачисления.ВидРасчета.ЧислоМесяцев КАК ЧислоМесяцев,
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	СтрокиНачисления.ДатаНачалаСобытия,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|			ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|		КОНЕЦ, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК СтрокиНачисления
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО (РаботникиОрганизации.Период <= СтрокиНачисления.ДатаНачалаСобытия)
	|					И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка
	|			И (&НеОтбиратьФизлиц
	|					ИЛИ СтрокиНачисления.Сотрудник.Физлицо = &Физлицо)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтрокиНачисления.НомерСтроки) КАК ПоследниеДаты
	|		ПО СтрокиНачисления.НомерСтроки = ПоследниеДаты.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО (РаботникиОрганизации.Период = ПоследниеДаты.МаксПериод)
	|			И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|	И (&НеОтбиратьФизлиц
	|			ИЛИ СтрокиНачисления.Сотрудник.Физлицо = &Физлицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоДопНачисления()

// Формирует запрос по таблице "ДополнительныеНачисления" документа
//
// Параметры: 
//	ВыборкаПоШапкеДокумента
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоДоговорам(ВыборкаПоШапкеДокумента, Физлицо = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПериодРегистрации));
	Если НЕ (Физлицо = Неопределено) Тогда
		Запрос.УстановитьПараметр("Физлицо", Физлицо);
		УсловиеНаФизлицоТекст = " И СтрокиНачисления.Сотрудник.Физлицо = &Физлицо ";
	Иначе
		УсловиеНаФизлицоТекст="";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.ДокументОснование,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.КодВычета КАК КодВычета,
	|	СтрокиНачисления.СуммаВычета КАК СкидкаПриНалогообложении,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Размер,
	|	СтрокиНачисления.Результат КАК Результат,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокиНачисления.ДатаНачала КАК БазовыйПериодНачало,
	|	СтрокиНачисления.ДатаОкончания КАК БазовыйПериодКонец,
	|	0 КАК ЧислоМесяцев,
	|	ЛОЖЬ КАК Авторасчет,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК СтрокиНачисления
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка" + УсловиеНаФизлицоТекст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоДоговорам()

// Формирует запрос по таблице "Удержания" документа
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента, Физлицо = Неопределено)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",				Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации",			ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации",	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ПриемНаРаботу",				Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("ЗаВесьПериод",				Перечисления.ПорядокРасчетаБазы.ЗаВесьПериод);
	Запрос.УстановитьПараметр("ПриПриемеНаРаботу",			Перечисления.ПорядокРасчетаБазы.ПриПриемеНаРаботу);
	Запрос.УстановитьПараметр("ПриУвольнении",				Перечисления.ПорядокРасчетаБазы.ПриУвольнении);
	
	УсловиеНаФизлицоТекст="Истина";
	Если Физлицо <> Неопределено Тогда
		Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
		УсловиеНаФизлицоТекст = "СтрокиУдержания.Физлицо = &парамФизлицо ";	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиУдержания.Ссылка,
	|	СтрокиУдержания.НомерСтроки,
	|	СтрокиУдержания.ФизЛицо,
	|	СтрокиУдержания.ВидРасчета,
	|	СтрокиУдержания.Показатель1,
	|	СтрокиУдержания.Показатель2,
	|	СтрокиУдержания.Показатель3,
	|	СтрокиУдержания.Показатель4,
	|	СтрокиУдержания.Показатель5,
	|	СтрокиУдержания.Показатель6,
	|	СтрокиУдержания.ДатаНачала,
	|	СтрокиУдержания.ДатаОкончания,
	|	СтрокиУдержания.ДокументОснование,
	|	СтрокиУдержания.Результат,
	|	СтрокиУдержания.Сторно,
	|	СтрокиУдержания.Авторасчет,
	|	СтрокиУдержания.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиУдержания.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	СтрокиУдержания.ДатаНачалаСобытия,
	|	СтрокиУдержания.ПорядокИсчисленияИздержек,
	|	СтрокиУдержания.Получатель,
	|	СтрокиУдержания.ДополнительныеДанные
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК СтрокиУдержания
	|ГДЕ
	|	СтрокиУдержания.Ссылка = &ДокументСсылка
	|	И &УсловиеНаФизлицоТекст";
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеНаФизлицоТекст", УсловиеНаФизлицоТекст);
	Запрос.Выполнить();

	Если ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца 
		Или ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ВтораяПоловинаТекущегоМесяца Тогда	
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	-1 КАК НомерСтроки,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Период
		|ПОМЕСТИТЬ ВТПринятыеВТекущемМесяце";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиУдержания.НомерСтроки КАК НомерСтроки,
		|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
		|ПОМЕСТИТЬ ВТПринятыеВТекущемМесяце
		|ИЗ
		|	ВТУдержания КАК СтрокиУдержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО СтрокиУдержания.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|ГДЕ
		|	СтрокиУдержания.ДатаНачала > &ПериодРегистрации
		|	И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
		|	И РаботникиОрганизаций.Период > &ПериодРегистрации
		|	И РаботникиОрганизаций.Период <= &КонецПериодаРегистрации
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = &ПриемНаРаботу
		|	И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|
		|СГРУППИРОВАТЬ ПО
		|	СтрокиУдержания.НомерСтроки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СтрокиУдержания.НомерСтроки,
		|	ОтпускПоУходуЗаРебенком.ДатаОкончания
		|ИЗ
		|	ВТУдержания КАК СтрокиУдержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
		|		ПО СтрокиУдержания.ФизЛицо = ОтпускПоУходуЗаРебенком.Физлицо
		|			И (ОтпускПоУходуЗаРебенком.Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация)
		|			И (ОтпускПоУходуЗаРебенком.ДатаОкончания > &ПериодРегистрации)
		|			И (ОтпускПоУходуЗаРебенком.ДатаОкончания < &КонецПериодаРегистрации)
		|			И (ОтпускПоУходуЗаРебенком.Проведен)
		|			И (СтрокиУдержания.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|			И (СтрокиУдержания.ДатаНачала > &ПериодРегистрации)";
		
	КонецЕсли;
	Запрос.Выполнить();
	
	Если ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца 
		Или ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ВтораяПоловинаТекущегоМесяца Тогда	
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	-1 КАК НомерСтроки,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Период
		|ПОМЕСТИТЬ ВТУволенныеВТекущемМесяце";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УволенныеВТекущемМесяцеОбъединение.НомерСтроки КАК НомерСтроки,
		|	МИНИМУМ(УволенныеВТекущемМесяцеОбъединение.Период) КАК Период
		|ПОМЕСТИТЬ ВТУволенныеВТекущемМесяце
		|ИЗ
		|	(ВЫБРАТЬ
		|		СтрокиУдержания.НомерСтроки КАК НомерСтроки,
		|		МИНИМУМ(РаботникиОрганизаций.Период) КАК Период
		|	ИЗ
		|		ВТУдержания КАК СтрокиУдержания
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО СтрокиУдержания.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо
		|	ГДЕ
		|		СтрокиУдержания.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		И СтрокиУдержания.ДатаОкончания < &КонецПериодаРегистрации
		|		И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
		|		И РаботникиОрганизаций.Период >= &ПериодРегистрации
		|		И РаботникиОрганизаций.Период < &КонецПериодаРегистрации
		|		И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|		И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СтрокиУдержания.НомерСтроки
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		СтрокиУдержания.НомерСтроки,
		|		МИНИМУМ(Работники.Период)
		|	ИЗ
		|		ВТУдержания КАК СтрокиУдержания
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|			ПО СтрокиУдержания.ФизЛицо = Работники.Сотрудник.Физлицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
		|			ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
		|				И (ПериодыПерекрытия.Период > Работники.Период)
		|				И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
		|				И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
		|				И (ПериодыПерекрытия.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
		|	ГДЕ
		|		Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		И Работники.Организация = &ГоловнаяОрганизация
		|		И Работники.ПериодЗавершения >= &ПериодРегистрации
		|		И Работники.ПериодЗавершения < &КонецПериодаРегистрации
		|		И Работники.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|		И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|		И ПериодыПерекрытия.Период ЕСТЬ NULL 
		|		И СтрокиУдержания.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		И СтрокиУдержания.ДатаОкончания < &КонецПериодаРегистрации
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СтрокиУдержания.НомерСтроки
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		СтрокиУдержания.НомерСтроки,
		|		ОтпускПоУходуЗаРебенком.ДатаНачала
		|	ИЗ
		|		ВТУдержания КАК СтрокиУдержания
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
		|			ПО СтрокиУдержания.ФизЛицо = ОтпускПоУходуЗаРебенком.Физлицо
		|				И (ОтпускПоУходуЗаРебенком.Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация)
		|				И (ОтпускПоУходуЗаРебенком.ДатаНачала > &ПериодРегистрации)
		|				И (ОтпускПоУходуЗаРебенком.ДатаНачала < &КонецПериодаРегистрации)
		|				И (ОтпускПоУходуЗаРебенком.Проведен)
		|				И (СтрокиУдержания.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|				И (СтрокиУдержания.ДатаОкончания < &КонецПериодаРегистрации)) КАК УволенныеВТекущемМесяцеОбъединение
		|
		|СГРУППИРОВАТЬ ПО
		|	УволенныеВТекущемМесяцеОбъединение.НомерСтроки";
		
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ГоловнаяОрганизация КАК Организация,
	|	СтрокиУдержания.ФизЛицо,
	|	СтрокиУдержания.ВидРасчета,
	|	СтрокиУдержания.ВидРасчета.ЯвляетсяДСВ КАК ЯвляетсяДСВ,
	|	СтрокиУдержания.ДатаНачала,
	|	СтрокиУдержания.ДатаОкончания,
	|	СтрокиУдержания.ДатаНачала КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиУдержания.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СтрокиУдержания.ДатаОкончания
	|		ИНАЧЕ КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокиУдержания.НомерСтроки КАК НомерСтроки,
	|	СтрокиУдержания.ДокументОснование,
	|	СтрокиУдержания.ДополнительныеДанные,
	|	СтрокиУдержания.Получатель,
	|	СтрокиУдержания.ПорядокИсчисленияИздержек,
	|	СтрокиУдержания.Показатель1,
	|	СтрокиУдержания.Показатель2,
	|	СтрокиУдержания.Показатель3,
	|	СтрокиУдержания.Показатель4,
	|	СтрокиУдержания.Показатель5,
	|	СтрокиУдержания.Показатель6,
	|	СтрокиУдержания.Результат,
	|	СтрокиУдержания.Сторно,
	|	СтрокиУдержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиУдержания.Авторасчет КАК Авторасчет,
	|	СтрокиУдержания.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиУдержания.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	СтрокиУдержания.ДатаНачалаСобытия,
	|	ВЫБОР
	|		КОГДА СтрокиУдержания.Ссылка.ПериодНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца)
	|			ТОГДА &ПриУвольнении
	|		КОГДА СтрокиУдержания.Ссылка.ПериодНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодНачисленияЗарплаты.ВтораяПоловинаТекущегоМесяца)
	|			ТОГДА &ПриПриемеНаРаботу
	|		КОГДА СтрокиУдержания.ДатаНачала > &ПериодРегистрации
	|				И ПринятыеВТекущемМесяце.Период ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА СтрокиУдержания.ДатаНачала = ПринятыеВТекущемМесяце.Период
	|						ТОГДА &ПриПриемеНаРаботу
	|					ИНАЧЕ &ЗаВесьПериод
	|				КОНЕЦ
	|		КОГДА СтрокиУдержания.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА &ЗаВесьПериод
	|		КОГДА КОНЕЦПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ) < &КонецПериодаРегистрации
	|				И УволенныеВТекущемМесяце.Период ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА НАЧАЛОПЕРИОДА(СтрокиУдержания.ДатаОкончания, ДЕНЬ) = НАЧАЛОПЕРИОДА(УволенныеВТекущемМесяце.Период, ДЕНЬ)
	|						ТОГДА &ПриУвольнении
	|					ИНАЧЕ &ЗаВесьПериод
	|				КОНЕЦ
	|		ИНАЧЕ &ЗаВесьПериод
	|	КОНЕЦ КАК ПорядокРасчетаБазы
	|ИЗ
	|	ВТУдержания КАК СтрокиУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПринятыеВТекущемМесяце КАК ПринятыеВТекущемМесяце
	|		ПО СтрокиУдержания.НомерСтроки = ПринятыеВТекущемМесяце.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУволенныеВТекущемМесяце КАК УволенныеВТекущемМесяце
	|		ПО СтрокиУдержания.НомерСтроки = УволенныеВТекущемМесяце.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоУдержания()

// Формирует запрос по таблице "НДФЛ" документа
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНДФЛ(Физлица = Неопределено)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", Физлица = Неопределено);
	Запрос.УстановитьПараметр("Физлица",		Физлица);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки КАК НомерСтроки,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СтрокиНДФЛ.Налог,
	|	СтрокиНДФЛ.ЗачтеноАвансовыхПлатежей,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетей,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейДвойнойВторой,
	|	СтрокиНДФЛ.ПримененныйВычетНаТретьегоРебенка,
	|	СтрокиНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,
	|	СтрокиНДФЛ.ПримененныйВычетНаВторогоРебенка,
	|	СтрокиНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойнойВторой,
	|	СтрокиНДФЛ.ФизЛицо КАК ФизЛицо,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйРасход,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам,
	|	СтрокиНДФЛ.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании,
	|	СтрокиНДФЛ.ПодразделениеОрганизации,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидов,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной,
	|	СтрокиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА СтрокиНДФЛ.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА СтрокиНДФЛ.ПодразделениеОрганизации.Владелец
	|				ИНАЧЕ СтрокиНДФЛ.ПодразделениеОрганизации.Владелец.ГоловнаяОрганизация
	|			КОНЕЦ <> ВЫБОР
	|				КОГДА СтрокиНДФЛ.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА СтрокиНДФЛ.Ссылка.Организация
	|				ИНАЧЕ СтрокиНДФЛ.Ссылка.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаУказанияПодразделения,
	|	ЕСТЬNULL(СтрокиНДФЛ.ПодразделениеОрганизации.Владелец, СтрокиНДФЛ.Ссылка.Организация) КАК ОбособленноеПодразделение
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|	И (&ПоВсемФизлицам
	|			ИЛИ СтрокиНДФЛ.ФизЛицо В (&Физлица))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛ()

// Формирует запрос по таблице "НДФЛ" документа
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНДФЛудержанный()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(СтрокиНДФЛ.Налог - СтрокиНДФЛ.ЗачтеноАвансовыхПлатежей) КАК Налог,
	|	СтрокиНДФЛ.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНДФЛ.ФизЛицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(СтрокиНДФЛ.Налог - СтрокиНДФЛ.ЗачтеноАвансовыхПлатежей) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛудержанный()

// Формирует запрос по таблице "НДФЛ" документа для расчета сумм НДФЛ к зачету
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНДФЛКЗачету()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", КонецМесяца(ПериодРегистрации)+1);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Налог - НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ЗачтеноАвансовыхПлатежей) КАК Налог
		|ПОМЕСТИТЬ ВТНДФЛ
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК НачислениеЗарплатыРаботникамОрганизацийНДФЛ
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Ссылка = &ДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДФЛКЗачету.ФизЛицо,
		|	НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток
		|ПОМЕСТИТЬ ВТНДФЛКЗачету
		|ИЗ
		|	РегистрНакопления.НДФЛКЗачету.Остатки(
		|			&ПериодРегистрации,
		|			Физлицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						НДФЛ.ФизЛицо
		|					ИЗ
		|						ВТНДФЛ КАК НДФЛ)
		|				И Организация = &Организация
		|				И СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)) КАК НДФЛКЗачету
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(СтрокиНДФЛ.Налог) КАК Налог,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) + ЕСТЬNULL(СуммыУчтенныеДокументом.СуммаНДФЛКЗачету, 0) > ВЫБОР
		|				КОГДА СУММА(СтрокиНДФЛ.Налог) > 0
		|					ТОГДА СУММА(СтрокиНДФЛ.Налог)
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|			ТОГДА СУММА(СтрокиНДФЛ.Налог)
		|		ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) + ЕСТЬNULL(СуммыУчтенныеДокументом.СуммаНДФЛКЗачету, 0)
		|	КОНЕЦ КАК НДФЛКЗачетуУчтено,
		|	СтрокиНДФЛ.ФизЛицо,
		|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13) КАК СтавкаНалогообложенияРезидента
		|ИЗ
		|	ВТНДФЛ КАК СтрокиНДФЛ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛКЗачету КАК НДФЛКЗачету
		|		ПО (НДФЛКЗачету.ФизЛицо = СтрокиНДФЛ.ФизЛицо)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НДФЛКЗачету.ФизЛицо КАК ФизЛицо,
		|			СУММА(НДФЛКЗачету.СуммаНДФЛКЗачету) КАК СуммаНДФЛКЗачету
		|		ИЗ
		|			РегистрНакопления.НДФЛКЗачету КАК НДФЛКЗачету
		|		ГДЕ
		|			НДФЛКЗачету.ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						НДФЛ.ФизЛицо
		|					ИЗ
		|						ВТНДФЛ КАК НДФЛ)
		|			И НДФЛКЗачету.Организация = &Организация
		|			И НДФЛКЗачету.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
		|			И НДФЛКЗачету.Регистратор = &ДокументСсылка
		|			И НДФЛКЗачету.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НДФЛКЗачету.ФизЛицо) КАК СуммыУчтенныеДокументом
		|		ПО СтрокиНДФЛ.ФизЛицо = СуммыУчтенныеДокументом.ФизЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	СтрокиНДФЛ.ФизЛицо,
		|	НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток,
		|	СуммыУчтенныеДокументом.СуммаНДФЛКЗачету
		|
		|ИМЕЮЩИЕ
		|	(СУММА(СтрокиНДФЛ.Налог) < 0
		|		ИЛИ ВЫБОР
		|			КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) + ЕСТЬNULL(СуммыУчтенныеДокументом.СуммаНДФЛКЗачету, 0) > ВЫБОР
		|					КОГДА СУММА(СтрокиНДФЛ.Налог) > 0
		|						ТОГДА СУММА(СтрокиНДФЛ.Налог)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|				ТОГДА СУММА(СтрокиНДФЛ.Налог)
		|			ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) + ЕСТЬNULL(СуммыУчтенныеДокументом.СуммаНДФЛКЗачету, 0)
		|		КОНЕЦ <> 0)";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНДФЛКЗачету

// Формирует запрос по таблице "ПогашениеЗайма" документа
//
// Параметры: 
//	нет
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоПогашениеЗайма()
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Ставка13", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
	Запрос.УстановитьПараметр("Код13", Справочники.ДоходыНДФЛ.Код2610ПоСтавке13);
 	Запрос.УстановитьПараметр("Код35", Справочники.ДоходыНДФЛ.Код2610ПоСтавке35);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиПогашениеЗайма.НомерСтроки,
	|	СтрокиПогашениеЗайма.ФизЛицо,
	|	СтрокиПогашениеЗайма.ДоговорЗайма,
	|	СтрокиПогашениеЗайма.НачисленоПроцентов,
	|	СтрокиПогашениеЗайма.ПогашеноПроцентов,
	|	СтрокиПогашениеЗайма.ПогашеноЗайма,
	|	СтрокиПогашениеЗайма.МатериальнаяВыгода,
	|	СтрокиПогашениеЗайма.НалогНаМатериальнуюВыгоду,
	|	ВЫБОР
	|		КОГДА СтрокиПогашениеЗайма.СтавкаНалогообложенияМатвыгоды = &Ставка13
	|			ТОГДА &Код13
	|		ИНАЧЕ &Код35
	|	КОНЕЦ КАК КодДохода,
	|	СтрокиПогашениеЗайма.СтавкаНалогообложенияМатвыгоды,
	|	СтрокиПогашениеЗайма.ПодразделениеОрганизации,
	|	СтрокиПогашениеЗайма.Сторно,
	|	ЕСТЬNULL(СведенияОЗаймах.НачислятьМатериальнуюВыгоду, ЛОЖЬ) КАК ПроверятьМатериальнуюВыгоду
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК СтрокиПогашениеЗайма
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОЗаймах КАК СведенияОЗаймах
	|		ПО СтрокиПогашениеЗайма.ДоговорЗайма = СведенияОЗаймах.ДоговорЗайма
	|			И СтрокиПогашениеЗайма.ФизЛицо = СведенияОЗаймах.ФизЛицо
	|ГДЕ
	|	СтрокиПогашениеЗайма.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоПогашениеЗайма

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация, по которой начисляется зарплата!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаВыплатыДохода) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата выплаты зарплаты по документу!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!"), Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
	КонецЕсли;

	// Дата окончания
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка соответствия Даты начала и Даты окончания
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) и ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		Если ВыборкаПоСтрокамДокумента.ПериодДействияКонец < ВыборкаПоСтрокамДокумента.ПериодДействияНачало Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
			
		ИначеЕсли НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания начисления должны принадлежать одному месяцу!", Отказ, Заголовок);
			
		КонецЕсли;
	КонецЕсли;

	// Дата начала события
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
	КонецЕсли;

	// Дата начала события
	Если ВыборкаПоСтрокамДокумента.ПроверятьПериодРасчетаСреднегоЗаработка Тогда
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаОкончание) Или Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаНачало) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан период расчета среднего заработка!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	Если ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением Тогда
		// ВидИспользованияРабочегоВремени
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан учет времени для вида расчета!", Отказ, Заголовок);
		КонецЕсли;
		
		// ОплачиватьЧасов
		Если ВыборкаПоСтрокамДокумента.ОплачиватьЧасов <= 0 Или ВыборкаПоСтрокамДокумента.ОплачиватьЧасов > 24 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "количество оплачиваемых часов должно быть положительным и не превышать 24!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ДополнительныеНачисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиДопНачисления(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Доп. начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.Авторасчет  Тогда
		Если ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом
			Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
			Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
		
			// Дата начала
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода начисления!", Отказ, Заголовок);
			КонецЕсли;
			// Дата окончания
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода начисления!", Отказ, Заголовок);
			КонецЕсли;
			
		ИначеЕсли ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
			Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням
			Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке	Тогда
			
			// Дата начала события
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
			КонецЕсли;
			// Дата начала
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаНачало) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала расчетного периода для исчисления среднего заработка!", Отказ, Заголовок);
			КонецЕсли;
			// Дата окончания
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания расчетного периода для исчисления среднего заработка!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	// Проверка на сумму вычета
	Если ВыборкаПоСтрокамДокумента.СуммаВычета <> 0 И Не ПроведениеРасчетов.ВычетСоответствуетДоходу(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ, ВыборкаПоСтрокамДокумента.КодВычета, мСоответствиеДоходовИВычетов) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный код вычета не предусмотрен для кода дохода (" + ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ), СокрЛП(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ), "не указан") + "), с которым будет зарегистрировано в учете по НДФЛ начисление """ + ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета), ВыборкаПоСтрокамДокумента.ВидРасчета, "<не указано>") + """!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиДопНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ДоговорыНаВыполнениеРабот" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиДоговора(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Договора"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
		// Дата начала
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода начисления!", Отказ, Заголовок);
		КонецЕсли;
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода начисления!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;

	// ДокументОснование
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументОснование) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан договор-основание!", Отказ, Заголовок);
	КонецЕсли;

	// Проверка на сумму вычета
	Если ВыборкаПоСтрокамДокумента.СкидкаПриНалогообложении <> 0 И Не ПроведениеРасчетов.ВычетСоответствуетДоходу(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ, ВыборкаПоСтрокамДокумента.КодВычета, мСоответствиеДоходовИВычетов) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный код вычета не предусмотрен для кода дохода (" + ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ), СокрЛП(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ), "не указан") + "), с которым будет зарегистрировано в учете по НДФЛ начисление """ + ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета), ВыборкаПоСтрокамДокумента.ВидРасчета, "<не указано>") + """!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиДоговора()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Удержания" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Удержания"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой и 
		ВыборкаПоСтрокамДокумента.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Тогда

		// Дата начала
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала удержания!", Отказ, Заголовок);
		КонецЕсли;
		
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания удержания!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиУдержания()

// Проверяет правильность заполнения реквизитов в строке ТЧ "НДФЛ" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""НДФЛ"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;

	// месяц налогового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан месяц налогового периода!", Отказ, Заголовок);
	КонецЕсли;

	Если ВыборкаПоСтрокамДокумента.ОшибкаУказанияПодразделения Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанное подразделение относится к другой организации!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНДФЛ()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ПогашениеЗайма" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиПогашениеЗайма(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
 									""" табл. части ""Погашение займов"": ";
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;
	// ДоговорЗайма
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДоговорЗайма) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан договор займа погашение которого выполняется!", Отказ, Заголовок);
	КонецЕсли;
	// СтавкаНалогообложенияМатвыгоды
	Если ВыборкаПоСтрокамДокумента.ПроверятьМатериальнуюВыгоду И НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияМатвыгоды) Тогда
		
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана ставка налогообложения матвыгоды!", Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНДФЛ()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для УдержанияРаботниковОрганизации 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуУдержаний(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)

	Движение = НаборЗаписей.Добавить();

	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента);		// ПериодРегистрации, ОбособленноеПодразделение
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);	// БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Сторно
																	// ФизЛицо, Организация,
																	// Результат, Размер, ДокументОснование, Авторасчет, ПорядокРасчетаБазы
 																	// ДатаНачалаСобытия,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,
КонецПроцедуры // ДобавитьСтрокуУдержаний

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНДФЛ(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей = Неопределено)
	
	Если НаборЗаписей <> Неопределено Тогда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период						= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
		Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
		
		// Ресурсы
		Движение.Налог						= ВыборкаПоСтрокамДокумента.Налог;
		
		// Реквизиты 
		Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
		Движение.ОбособленноеПодразделение	= ВыборкаПоСтрокамДокумента.ОбособленноеПодразделение;
		Движение.ИсчисленоИзЗарплаты		= Истина;	
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
		
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗачтеноАвансовыхПлатежей) Тогда
			
			Движение = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента, "ФизЛицо, ПодразделениеОрганизации, ОбособленноеПодразделение, МесяцНалоговогоПериода");
			
			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
			
			// Ресурсы
			Движение.Налог = ВыборкаПоСтрокамДокумента.ЗачтеноАвансовыхПлатежей;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ЗачетАвансовыхПлатежей;
			Движение.ИсчисленоИзЗарплаты		= Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛ

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНДФЛудержанный(ВыборкаСуммКУдержанию, ВыборкаПоСтрокамДокумента, ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента, НаборЗаписей)
	ОсталосьРаспределить = ВыборкаСуммКУдержанию.Налог; // положительная сумма исчисленного налога
	
	// учтем возможный зачет образовавшейся ранее переплаты налога
	ВыборкаПоНДФЛКЗачету.Сбросить();
	Если ВыборкаПоНДФЛКЗачету.НайтиСледующий(ВыборкаСуммКУдержанию.ФизЛицо,"ФизЛицо") Тогда
		ОсталосьРаспределить = ОсталосьРаспределить - ВыборкаПоНДФЛКЗачету.НДФЛКЗачетуУчтено;
	КонецЕсли;
	
	// распределим получившуюся сумму налога к удержанию по месяцам налогового периода 
	ВыборкаПоСтрокамДокумента.Сбросить();
	Пока ВыборкаПоСтрокамДокумента.НайтиСледующий(ВыборкаСуммКУдержанию.ФизЛицо,"ФизЛицо") Цикл
		Если ОсталосьРаспределить > 0 И ВыборкаПоСтрокамДокумента.Налог > 0 Тогда
			// расчет суммы удерживаемого налога
			ПогашаемаяСумма = Мин(ВыборкаПоСтрокамДокумента.Налог, ОсталосьРаспределить);
			ОсталосьРаспределить = ОсталосьРаспределить - ПогашаемаяСумма;
			Движение = НаборЗаписей.Добавить();
			// Свойства
			Движение.Период							= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			// Измерения
			Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
			
			// Ресурсы
			Движение.Налог						= ПогашаемаяСумма;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
			Движение.ОбособленноеПодразделение	= ВыборкаПоСтрокамДокумента.ОбособленноеПодразделение;				
			Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
			
		КонецЕсли;  
			
	КонецЦикла;

	//ОсталосьРаспределить = ВыборкаСуммКУдержанию.Налог; // положительная сумма исчисленного налога
	//
	//// учтем возможный зачет образовавшейся ранее переплаты налога
	//ВыборкаПоНДФЛКЗачету.Сбросить();
	//Если ВыборкаПоНДФЛКЗачету.НайтиСледующий(ВыборкаСуммКУдержанию.ФизЛицо,"ФизЛицо") Тогда
	//	ОсталосьРаспределить = ОсталосьРаспределить - ВыборкаПоНДФЛКЗачету.НДФЛКЗачетуУчтено;
	//КонецЕсли;
	//
	//Если ОсталосьРаспределить <= 0 Тогда
	//	Возврат
	//КонецЕсли;
	//Если ДатаВыплатыДохода >= ПроведениеРасчетов.ДатаИзмененияСроковУплатыНалога() Тогда
	//	
	//	ВыборкаПоСтрокамДокумента.Сбросить();
	//	Пока ВыборкаПоСтрокамДокумента.НайтиСледующий(ВыборкаСуммКУдержанию.ФизЛицо,"ФизЛицо") Цикл
	//		Если ВыборкаПоСтрокамДокумента.Налог < 0 Тогда
	//			ОсталосьРаспределить = ОсталосьРаспределить - ВыборкаПоСтрокамДокумента.Налог;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	// распределим получившуюся сумму налога к удержанию по месяцам налогового периода 
	//	ВыборкаПоСтрокамДокумента.Сбросить();
	//	Пока ВыборкаПоСтрокамДокумента.НайтиСледующий(ВыборкаСуммКУдержанию.ФизЛицо,"ФизЛицо") Цикл
	//		
	//		Если	ВыборкаПоСтрокамДокумента.Налог > 0 Тогда
	//			Если ОсталосьРаспределить > 0 Тогда
	//				
	//				// расчет суммы удерживаемого налога
	//				ПогашаемаяСумма = Мин(ВыборкаПоСтрокамДокумента.Налог, ОсталосьРаспределить);
	//				ОсталосьРаспределить = ОсталосьРаспределить - ПогашаемаяСумма;
	//				
	//				Движение = НаборЗаписей.Добавить();
	//				
	//				// Свойства
	//				Движение.Период							= КонецМесяца(ПериодРегистрации);
	//				Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
	//				
	//				// Измерения
	//				Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	//				Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	//				Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	//				Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
	//				
	//				// Ресурсы
	//				Движение.Налог						= ПогашаемаяСумма;
	//				
	//				// Реквизиты 
	//				Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
	//				Движение.ОбособленноеПодразделение	= ВыборкаПоСтрокамДокумента.ОбособленноеПодразделение;				
	//				Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;  
	//				
	//			КонецЕсли;
	//		ИначеЕсли ВыборкаПоСтрокамДокумента.Налог <> 0 Тогда
	//			
	//			ПогашаемаяСумма = ВыборкаПоСтрокамДокумента.Налог;
	//			
	//			Движение = НаборЗаписей.Добавить();
	//			
	//			// Свойства
	//			Движение.Период							= КонецМесяца(ПериодРегистрации);
	//			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
	//			
	//			// Измерения
	//			Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	//			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	//			Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	//			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
	//			
	//			// Ресурсы
	//			Движение.Налог						= ПогашаемаяСумма;
	//			
	//			// Реквизиты 
	//			Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
	//			Движение.ОбособленноеПодразделение	= ВыборкаПоСтрокамДокумента.ОбособленноеПодразделение;				
	//			Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
	//			
	//		КонецЕсли;  
	//		
	//	КонецЦикла;
	//	
	//Иначе
	//	
	//	// распределим получившуюся сумму налога к удержанию по месяцам налогового периода 
	//	ВыборкаПоСтрокамДокумента.Сбросить();
	//	Пока ВыборкаПоСтрокамДокумента.НайтиСледующий(ВыборкаСуммКУдержанию.ФизЛицо,"ФизЛицо") Цикл
	//		
	//		Если ОсталосьРаспределить > 0 И ВыборкаПоСтрокамДокумента.Налог > 0 Тогда
	//			
	//			// расчет суммы удерживаемого налога
	//			ПогашаемаяСумма = Мин(ВыборкаПоСтрокамДокумента.Налог, ОсталосьРаспределить);
	//			ОсталосьРаспределить = ОсталосьРаспределить - ПогашаемаяСумма;
	//			
	//			Движение = НаборЗаписей.Добавить();
	//			
	//			// Свойства
	//			Движение.Период							= КонецМесяца(ПериодРегистрации);
	//			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
	//			
	//			// Измерения
	//			Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
	//			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	//			Движение.МесяцНалоговогоПериода     	= ВыборкаПоСтрокамДокумента.МесяцНалоговогоПериода;
	//			Движение.СтавкаНалогообложенияРезидента	= Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
	//			
	//			// Ресурсы
	//			Движение.Налог						= ПогашаемаяСумма;
	//			
	//			// Реквизиты 
	//			Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
	//			Движение.ОбособленноеПодразделение	= ВыборкаПоСтрокамДокумента.ОбособленноеПодразделение;				
	//			Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации; 
	//			
	//		КонецЕсли;  
	//		
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛудержанный

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуНДФЛКЗачету(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента)

	// НДФЛ к зачету
	Если ВыборкаПоСтрокамДокумента.Налог < 0 Тогда
		Движение = Движения.НДФЛКЗачету.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

		// Измерения
		Движение.ФизЛицо	 	 	 	        = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				    = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияРезидента;

		// Ресурсы
		Движение.СуммаНДФЛКЗачету			= - ВыборкаПоСтрокамДокумента.Налог;
	    
	ИначеЕсли ВыборкаПоСтрокамДокумента.НДФЛКЗачетуУчтено <> 0 Тогда
		
		Движение = Движения.НДФЛКЗачету.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
		
		// Измерения
		Движение.ФизЛицо	 	 	 	        = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				    = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияРезидента;
		
		// Ресурсы
		Движение.СуммаНДФЛКЗачету			= ВыборкаПоСтрокамДокумента.НДФЛКЗачетуУчтено;
		    
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНДФЛКЗачету

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//				  				  из результата запроса к ТЧ документа, 
//  ВыборкаПоШапкеДокумента		- выборка по данным шапки документа
//	НаборЗаписей				- набор записей для НДФЛРасчетыСБюджетом
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуПогашениеЗайма(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей, НаборЗаписейНДФЛСведенияОДоходах, НаборЗаписейНДФЛРасчетыСБюджетом, ФормироватьНДФЛудержанный)
	
	КонецМесяца = КонецМесяца(ПериодРегистрации);

	// начислено процентов
	Если ВыборкаПоСтрокамДокумента.НачисленоПроцентов <> 0 Тогда
		Движение = НаборЗаписей.Добавить();

		// Свойства
		Движение.Период						= КонецМесяца;
		Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

		// Измерения
		Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	 	Движение.ДоговорЗайма				= ВыборкаПоСтрокамДокумента.ДоговорЗайма;

		// Ресурсы
		Движение.Проценты					= ВыборкаПоСтрокамДокумента.НачисленоПроцентов;
		Движение.УдержаноИзЗарплаты			= Истина;
	КонецЕсли;
	
	// пошашено процентов и основного долга
	Движение = НаборЗаписей.Добавить(); 
	// запись в регистр складываем всегда, даже если реально погашения не было
	// запись служит признаком того, что с займом уже работали

	// Свойства
	Движение.Период						= КонецМесяца;
	Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
	
	// Измерения
	Движение.ФизЛицо                    = ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ДоговорЗайма				= ВыборкаПоСтрокамДокумента.ДоговорЗайма;
	
	// Ресурсы
	Движение.Проценты					= ВыборкаПоСтрокамДокумента.ПогашеноПроцентов;
	// даже если начисленные проценты не погашены не увеличиваем основной долг - ограничиваем снизу (сверху, если сторно)
	// размер погашения основного долга нулем
	Если НЕ ВыборкаПоСтрокамДокумента.Сторно Тогда
		Движение.ОсновнойДолг				= Макс(0, ВыборкаПоСтрокамДокумента.ПогашеноЗайма - ВыборкаПоСтрокамДокумента.ПогашеноПроцентов);
	Иначе
		Движение.ОсновнойДолг				= Мин(0, ВыборкаПоСтрокамДокумента.ПогашеноЗайма - ВыборкаПоСтрокамДокумента.ПогашеноПроцентов);
	КонецЕсли;
	
	// Реквизиты
	Движение.УдержаноИзЗарплаты			= Истина;
	
	
	// доходы - материальная выгода по заемным средствам
	Если ВыборкаПоСтрокамДокумента.МатериальнаяВыгода <> 0 Тогда
		
		Движение = НаборЗаписейНДФЛСведенияОДоходах.Добавить();
		
		// свойства
		Движение.Период 				= КонецМесяца;
		
		// измерения 
		Движение.Организация 			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.Физлицо 				= ВыборкаПоСтрокамДокумента.Физлицо;
		Движение.КодДохода 				= ВыборкаПоСтрокамДокумента.КодДохода;
		Движение.ПериодРегистрации 		= ПериодРегистрации;
			
		// ресурсы
		Движение.СуммаДохода 			= ВыборкаПоСтрокамДокумента.МатериальнаяВыгода;
		
		// реквизиты
		Движение.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ПодразделениеОрганизации = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		Движение.ИсчисленоИзЗарплаты	= Истина;	
		
	КонецЕсли;
	
	// налог с материальной выгоды по заемным средствам
	Если ВыборкаПоСтрокамДокумента.НалогНаМатериальнуюВыгоду <> 0 Тогда
		Движение = НаборЗаписейНДФЛРасчетыСБюджетом.Добавить();
		
		// Свойства
		Движение.Период							= КонецМесяца;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;

		// Измерения
		Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
		Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.МесяцНалоговогоПериода     	= КонецМесяца;
		Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияМатвыгоды;

		// Ресурсы
		Движение.Налог							= ВыборкаПоСтрокамДокумента.НалогНаМатериальнуюВыгоду;
		
		// Реквизиты 
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Начисление;
		Движение.ИсчисленоИзЗарплаты		= Истина;
		Движение.КодДохода 					= ВыборкаПоСтрокамДокумента.КодДохода;
		
		Если ФормироватьНДФЛудержанный Тогда // сразу же, не дожидаясь выплаты, регистрируем факт удержания налога
			
			Движение = НаборЗаписейНДФЛРасчетыСБюджетом.Добавить();

			// Свойства
			Движение.Период							= КонецМесяца;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;

			// Измерения
			Движение.ФизЛицо                    	= ВыборкаПоСтрокамДокумента.ФизЛицо;
			Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.МесяцНалоговогоПериода     	= КонецМесяца;
			Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоСтрокамДокумента.СтавкаНалогообложенияМатвыгоды;

			// Ресурсы
			Движение.Налог						= ВыборкаПоСтрокамДокумента.НалогНаМатериальнуюВыгоду;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.Удержание;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;				
			Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			Движение.КодДохода 					= ВыборкаПоСтрокамДокумента.КодДохода;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуПогашениеЗайма

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.ПериодРегистрации				= ПериодРегистрации;
	Движение.ПериодДействияНачало			= ВыборкаПоСтрокамДокумента.ПериодДействияНачало;
	Движение.ПериодДействияКонец			= ВыборкаПоСтрокамДокумента.ПериодДействияКонец;
	Движение.БазовыйПериодНачало			= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец				= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета						= ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно							= ВыборкаПоСтрокамДокумента.Сторно;

	// Измерения
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ФизЛицо						= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат						= ВыборкаПоСтрокамДокумента.Результат;
	Движение.ДополнительныйРезультат		= ВыборкаПоСтрокамДокумента.ДополнительныйРезультат;
	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		Движение.ОтработаноДней				= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.ОтработаноЧасов			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
		Движение.ОтработаноДнейПоПятидневке	= ВыборкаПоСтрокамДокумента.ОтработаноДнейПоПятидневке;
		Движение.ОтработаноЧасовПоПятидневке= ВыборкаПоСтрокамДокумента.ОтработаноЧасовПоПятидневке;
	КонецЕсли;
	// ресурсы по норме времени
	Если ВыборкаПоСтрокамДокумента.ЗачетНормыВремени Тогда
		Движение.НормаДней					= ВыборкаПоСтрокамДокумента.НормаДней;
		Движение.НормаЧасов					= ВыборкаПоСтрокамДокумента.НормаЧасов;
		Движение.НормаДнейПоПятидневке		= ВыборкаПоСтрокамДокумента.НормаДнейПоПятидневке;
		Движение.НормаЧасовПоПятидневке		= ВыборкаПоСтрокамДокумента.НормаЧасовПоПятидневке;
	КонецЕсли;
	Движение.ОплаченоДнейЧасов				= ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов;

	// Реквизиты
	Движение.ГрафикРаботы					= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ГрафикРаботыНорма				= ВыборкаПоСтрокамДокумента.ГрафикРаботыНорма;
	Для Сч = 1 По 6 Цикл
		Движение["Показатель"+Сч]			= ВыборкаПоСтрокамДокумента["Показатель"+Сч];
	КонецЦикла;
	
	Движение.ВидУчетаВремени				= ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.ВидВремени, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени, ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени, ВыборкаПоСтрокамДокумента.ВидРасчета.Показатели);
	Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ОбособленноеПодразделение		= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ПериодРасчетаСреднегоЗаработкаНачало		= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
	Движение.ПериодРасчетаСреднегоЗаработкаОкончание	= ВыборкаПоСтрокамДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
	Движение.ДатаНачалаСобытия				= ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия;
	Движение.Авторасчет						= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.ВариантОбработкиЗаписиПриОтраженииВРеглУчете = ВыборкаПоСтрокамДокумента.ВариантОбработкиЗаписиПриОтраженииВРеглУчете;	
	Движение.СторнируемыйДокумент 			= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
	Движение.РасчетнаяБазаЗаЕдиницуНормыВремени = ВыборкаПоСтрокамДокумента.РасчетнаяБазаЗаЕдиницуНормыВремени;
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.10.2011 10:00 
	//Движение.AVT_СреднийПроцентВыработки    = ?(ВыборкаПоСтрокамДокумента.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок, 
	//AVT_СредняяВыработка, Ложь);
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуДопНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();

	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);	// БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Сторно
																	// Сотрудник, ФизЛицо, Результат, СкидкаПриНалогообложении
																	// Размер,ЧислоМесяцев,ПодразделениеОрганизации,
																	// Авторасчет,ДокументОснование,ДатаНачалаСобытия,
 																	// ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,СторнируемыйДокумент

	Движение.ВидУчетаВремени			= ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, Неопределено, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Движение.ПериодРегистрации			= ?(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало > КонецМесяца(ПериодРегистрации), ПериодРегистрации, Макс(ПериодРегистрации, ВыборкаПоСтрокамДокумента.БазовыйПериодНачало));
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	
КонецПроцедуры // ДобавитьСтрокуДопНачислений

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//				  							  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуДоговора(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();

	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента);	// БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Сторно
																	// Сотрудник, ФизЛицо, Результат, СкидкаПриНалогообложении
																	// Размер,ЧислоМесяцев,ПодразделениеОрганизации,
																	// Авторасчет,ДокументОснование,ДатаНачалаСобытия,
 																	// ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,СторнируемыйДокумент

	Движение.ПериодРегистрации			= ?(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало > КонецМесяца(ПериодРегистрации), ПериодРегистрации, Макс(ПериодРегистрации, ВыборкаПоСтрокамДокумента.БазовыйПериодНачало));
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	
КонецПроцедуры // ДобавитьСтрокуДоговора

// По выборке из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- спозиционированная на определеной строке выборка 
//							  из результата запроса к документу 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период = ВыборкаПоНачислениям.ПериодДействияНачало;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоНачислениям.Сотрудник;
		Движение.Организация 						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидИспользованияРабочегоВремени 	= ВыборкаПоНачислениям.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		
		Движение.Часов			= ВыборкаПоНачислениям.ОплачиватьЧасов;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()

// получает доходы НДФЛ по табличным частям с доходами
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - таблица значений или набор записей рег-ра - "приемник" сведений о доходах
//		
Процедура СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, НаборЗаписей, ФизлицаСписок = Неопределено)
	 	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамФизлица", ФизлицаСписок);
	Запрос.УстановитьПараметр("парамДатыВыплаты", ДатыВыплаты);
	Запрос.УстановитьПараметр("парамНачисления", Начисления);
	Запрос.УстановитьПараметр("парамДополнительныеНачисления", ДополнительныеНачисления);
	Запрос.УстановитьПараметр("парамДоговорыНаВыполнениеРабот", ДоговорыНаВыполнениеРабот);
	Запрос.УстановитьПараметр("парамПогашениеЗаймов", ПогашениеЗаймов);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонецМесяца", КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПерерассчитываемыйДокумент", ВыборкаПоШапкеДокумента.ПерерассчитываемыйДокумент);
	Запрос.УстановитьПараметр("парамДатаВыплатыДохода", ВыборкаПоШапкеДокумента.ДатаВыплатыДохода);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Результат,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.Сторно
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&парамНачисления КАК Начисления
	|ГДЕ
	|	&УсловиеНаФизлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыВыплаты.Физлицо,
	|	ДатыВыплаты.ДатаВыплатыДохода
	|ПОМЕСТИТЬ ВТДатыВыплаты
	|ИЗ
	|	&парамДатыВыплаты КАК ДатыВыплаты
	|ГДЕ
	|	&УсловиеНаФизлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.НомерСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Результат,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.КодВычета,
	|	Начисления.СуммаВычета,
	|	Начисления.КоличествоДетей,
	|	Начисления.Сторно
	|ПОМЕСТИТЬ ВТДополнительныеНачисления
	|ИЗ
	|	&парамДополнительныеНачисления КАК Начисления
	|ГДЕ
	|	&УсловиеНаФизлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.НомерСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Результат,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.КодВычета,
	|	Начисления.СуммаВычета,
	|	Начисления.Сторно
	|ПОМЕСТИТЬ ВТДоговорыНаВыполнениеРабот
	|ИЗ
	|	&парамДоговорыНаВыполнениеРабот КАК Начисления
	|ГДЕ
	|	&УсловиеНаФизлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиПогашениеЗайма.НомерСтроки,
	|	СтрокиПогашениеЗайма.ФизЛицо,
	|	СтрокиПогашениеЗайма.СтавкаНалогообложенияМатвыгоды,
	|	СтрокиПогашениеЗайма.МатериальнаяВыгода,
	|	СтрокиПогашениеЗайма.ПодразделениеОрганизации,
	|	СтрокиПогашениеЗайма.Сторно
	|ПОМЕСТИТЬ ВТПогашениеЗаймов
	|ИЗ
	|	&парамПогашениеЗаймов КАК СтрокиПогашениеЗайма
	|ГДЕ
	|	&УсловиеНаФизлицо";
	Если Не ЗначениеЗаполнено(ФизлицаСписок) Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"&УсловиеНаФизлицо","Истина");	
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"&УсловиеНаФизлицо","Физлицо В (&парамФизлица)");	
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""Таблица1"" КАК ИмяТЧ,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ВидРасчета.КодДоходаНДФЛ КАК КодДохода,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Результат КАК СуммаДохода,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.СторнируемыйДокумент,
	|	&парамПериодРегистрации КАК ПериодРегистрации,
	|	ЕСТЬNULL(ДатыВыплаты.ДатаВыплатыДохода, &парамДатаВыплатыДохода) КАК ДатаВыплатыДохода,
	|	ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка) КАК КодВычета,
	|	0 КАК СуммаВычета,
	|	0 КАК КоличествоДетей,
	|	Начисления.Сторно
	|ПОМЕСТИТЬ ВТСторноНачисления
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыВыплаты КАК ДатыВыплаты
	|		ПО Начисления.Физлицо = ДатыВыплаты.Физлицо
	|ГДЕ
	|	Начисления.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Таблица2"",
	|	ДополнительныеНачисления.НомерСтроки,
	|	ДополнительныеНачисления.Сотрудник,
	|	ДополнительныеНачисления.Физлицо,
	|	ДополнительныеНачисления.ВидРасчета,
	|	ДополнительныеНачисления.ВидРасчета.КодДоходаНДФЛ,
	|	ДополнительныеНачисления.ДатаНачала,
	|	ДополнительныеНачисления.ДатаОкончания,
	|	ДополнительныеНачисления.Результат,
	|	ДополнительныеНачисления.ПодразделениеОрганизации,
	|	ДополнительныеНачисления.СторнируемыйДокумент,
	|	&парамПериодРегистрации,
	|	ЕСТЬNULL(ДатыВыплаты.ДатаВыплатыДохода, &парамДатаВыплатыДохода),
	|	ДополнительныеНачисления.КодВычета,
	|	ДополнительныеНачисления.СуммаВычета,
	|	ДополнительныеНачисления.КоличествоДетей,
	|	ДополнительныеНачисления.Сторно
	|ИЗ
	|	ВТДополнительныеНачисления КАК ДополнительныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыВыплаты КАК ДатыВыплаты
	|		ПО ДополнительныеНачисления.Физлицо = ДатыВыплаты.Физлицо
	|ГДЕ
	|	ДополнительныеНачисления.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Таблица3"",
	|	ДоговорыНаВыполнениеРабот.НомерСтроки,
	|	ДоговорыНаВыполнениеРабот.Сотрудник,
	|	ДоговорыНаВыполнениеРабот.Физлицо,
	|	ДоговорыНаВыполнениеРабот.ВидРасчета,
	|	ДоговорыНаВыполнениеРабот.ВидРасчета.КодДоходаНДФЛ,
	|	ДоговорыНаВыполнениеРабот.ДатаНачала,
	|	ДоговорыНаВыполнениеРабот.ДатаОкончания,
	|	ДоговорыНаВыполнениеРабот.Результат,
	|	ДоговорыНаВыполнениеРабот.ПодразделениеОрганизации,
	|	ДоговорыНаВыполнениеРабот.СторнируемыйДокумент,
	|	&парамПериодРегистрации,
	|	ЕСТЬNULL(ДатыВыплаты.ДатаВыплатыДохода, &парамДатаВыплатыДохода),
	|	ДоговорыНаВыполнениеРабот.КодВычета,
	|	ДоговорыНаВыполнениеРабот.СуммаВычета,
	|	0,
	|	ДоговорыНаВыполнениеРабот.Сторно
	|ИЗ
	|	ВТДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыВыплаты КАК ДатыВыплаты
	|		ПО ДоговорыНаВыполнениеРабот.Физлицо = ДатыВыплаты.Физлицо
	|ГДЕ
	|	ДоговорыНаВыполнениеРабот.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Таблица4"",
	|	СтрокиПогашениеЗайма.НомерСтроки,
	|	СтрокиПогашениеЗайма.ФизЛицо,
	|	СтрокиПогашениеЗайма.ФизЛицо,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА СтрокиПогашениеЗайма.СтавкаНалогообложенияМатвыгоды = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2610ПоСтавке13)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2610ПоСтавке35)
	|	КОНЕЦ,
	|	&парамПериодРегистрации,
	|	&парамПериодРегистрации,
	|	СтрокиПогашениеЗайма.МатериальнаяВыгода,
	|	СтрокиПогашениеЗайма.ПодразделениеОрганизации,
	|	&парамПерерассчитываемыйДокумент,
	|	&парамПериодРегистрации,
	|	&парамКонецМесяца,
	|	ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка),
	|	0,
	|	0,
	|	СтрокиПогашениеЗайма.Сторно
	|ИЗ
	|	ВТПогашениеЗаймов КАК СтрокиПогашениеЗайма";
	Запрос.Выполнить();
	
	ПроведениеРасчетов.СформироватьДоходыПоКодамНДФЛ(НаборЗаписей, Запрос.МенеджерВременныхТаблиц, ВыборкаПоШапкеДокумента, КонецМесяца(ПериодРегистрации));
	//Blik 120515 сделано - КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ), было &парамПериодРегистрации, таб4 стр 8
КонецПроцедуры // СформироватьДоходыПоКодамНДФЛ()

// получает доходы НДФЛ по табличной части с погашением займов
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - таблица значений или набор записей рег-ра - "приемник" сведений о доходах
//		ФизлицаСписок - список физлиц, по которым нужно обработать строки т.ч., если для всех - то не указывается 
//		
Процедура СформироватьДоходыПоМатвыгодеПоЗаймам(ВыборкаПоШапкеДокумента,НаборЗаписей, ФизлицаСписок = Неопределено)

	Для каждого СтрокаТЧ Из ПогашениеЗаймов Цикл
		
		Если ФизлицаСписок <> Неопределено и ФизлицаСписок.НайтиПоЗначению(СтрокаТЧ.Физлицо) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.МатериальнаяВыгода <> 0 Тогда
			
			Движение = НаборЗаписей.Добавить();
			
			// свойства
			Движение.Период 				= КонецМесяца(ПериодРегистрации);
			
			// измерения 
			Движение.Организация 			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.Физлицо 				= СтрокаТЧ.Физлицо;
			Движение.КодДохода 				= ?(СтрокаТЧ.СтавкаНалогообложенияМатвыгоды = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13,
												Справочники.ДоходыНДФЛ.Код2610ПоСтавке13,Справочники.ДоходыНДФЛ.Код2610ПоСтавке35);
			Движение.ПериодРегистрации 		= ПериодРегистрации;
			
			// ресурсы
			Движение.СуммаДохода 			= СтрокаТЧ.МатериальнаяВыгода;
			
			// реквизиты
			Движение.ОбособленноеПодразделение = ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
			Движение.ИсчисленоИзЗарплаты	= Истина;	
			Движение.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДоходыПоМатвыгодеПоЗаймам()

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - набор записей 
//		Перерасчет - признак проведения перерасчетов, по умолчанию - Ложь
//		Физлица - список физлиц, по которым производится расчет, по умолчанию - отсутствует
//
// Возвращаемое значение:
//	Нет
//		
Процедура СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, НаборЗаписей, Перерасчет = Ложь, Физлица = Неопределено)
	
	Если ВыборкаПоШапкеДокумента.ЭтоРасчетПервойПоловиныМесяца Тогда
		НачисленияРаботниковТекст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Налог - НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ЗачтеноАвансовыхПлатежей) КАК Налог
		|ПОМЕСТИТЬ ВТНДФЛ
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК НачислениеЗарплатыРаботникамОрганизацийНДФЛ
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Ссылка = &парамСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо
		|
		|ИМЕЮЩИЕ
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Налог - НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ЗачтеноАвансовыхПлатежей) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДФЛКЗачету.ФизЛицо,
		|	НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток
		|ПОМЕСТИТЬ ВТНДФЛКЗачету
		|ИЗ
		|	РегистрНакопления.НДФЛКЗачету.Остатки(
		|			&ПериодРегистрации,
		|			Физлицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						НДФЛ.ФизЛицо
		|					ИЗ
		|						ВТНДФЛ КАК НДФЛ)
		|				И Организация = &Организация) КАК НДФЛКЗачету
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Физлицо КАК Физлицо,
		|	Доходы.Сотрудник,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основные.Сотрудник.Физлицо КАК Физлицо,
		|		Основные.Результат КАК СуммаДохода,
		|		Основные.Сотрудник КАК Сотрудник
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основные
		|	ГДЕ
		|		Основные.Ссылка = &парамСсылка
		|		И Основные.Результат <> 0
		|		И НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Дополнительные.Сотрудник.Физлицо,
		|		Дополнительные.Результат,
		|		Дополнительные.Сотрудник
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Дополнительные
		|	ГДЕ
		|		Дополнительные.Ссылка = &парамСсылка
		|		И Дополнительные.Результат <> 0
		|		И НЕ Дополнительные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДоговорыНаВыполнениеРабот.Сотрудник.Физлицо,
		|		ДоговорыНаВыполнениеРабот.Результат,
		|		ДоговорыНаВыполнениеРабот.Сотрудник
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
		|	ГДЕ
		|		ДоговорыНаВыполнениеРабот.Ссылка = &парамСсылка
		|		И НЕ ДоговорыНаВыполнениеРабот.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплУдержания.ФизЛицо,
		|		-ЗплУдержания.Результат,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК ЗплУдержания
		|	ГДЕ
		|		ЗплУдержания.Ссылка = &парамСсылка
		|		И ЗплУдержания.Результат <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплНДФЛ.ФизЛицо,
		|		-ЗплНДФЛ.Налог + ВЫБОР
		|			КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) > ЗплНДФЛ.Налог
		|				ТОГДА ЗплНДФЛ.Налог
		|			ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0)
		|		КОНЕЦ,
		|		NULL
		|	ИЗ
		|		ВТНДФЛ КАК ЗплНДФЛ
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛКЗачету КАК НДФЛКЗачету
		|			ПО ЗплНДФЛ.ФизЛицо = НДФЛКЗачету.ФизЛицо
 		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплЗаймы.ФизЛицо,
		|		-СУММА(ЗплЗаймы.НалогНаМатериальнуюВыгоду),
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК ЗплЗаймы
		|	ГДЕ
		|		ЗплЗаймы.Ссылка = &парамСсылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗплЗаймы.ФизЛицо
		|	
		|	ИМЕЮЩИЕ
		|		СУММА(ЗплЗаймы.НалогНаМатериальнуюВыгоду) > 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплЗаймы.ФизЛицо,
		|		-ЗплЗаймы.ПогашеноЗайма,
		|		NULL
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК ЗплЗаймы
		|	ГДЕ
		|		ЗплЗаймы.Ссылка = &парамСсылка
		|		И ЗплЗаймы.ПогашеноЗайма <> 0) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Физлицо,
		|	Доходы.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Доходы.Физлицо.Наименование";
		Запрос = Новый Запрос(НачисленияРаботниковТекст);
	ИначеЕсли Перерасчет Тогда
		Если Физлица = Неопределено Тогда
			
			// таблица ФизлицаДляПерерасчета
			// Список физлиц по которым необходимо выполнить перерасчет
			// Поля:
			//		ФизЛицо
			// Описание:
			// Получает список неповторяющихся физлиц по которым есть записи
			// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
			//
			// НачисленияРаботников
			//	Поля:
			//		Физлицо
			//		СуммаДохода - сумма "к выплате" - увличение состояния взаиморасчета с работником
			//
			
			НачисленияРаботниковТекст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Перерасчет.ФизЛицо
			|ПОМЕСТИТЬ ВТФизлицаДляПерерасчета
			|ИЗ
			|	(ВЫБРАТЬ
			|		Перерасчет.ФизЛицо КАК ФизЛицо
			|	ИЗ
			|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
			|	ГДЕ
			|		Перерасчет.ОбъектПерерасчета = &парамСсылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Перерасчет.ФизЛицо
			|	ИЗ
			|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
			|	ГДЕ
			|		Перерасчет.ОбъектПерерасчета = &парамСсылка) КАК Перерасчет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо,
			|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Налог - НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ЗачтеноАвансовыхПлатежей) КАК Налог
			|ПОМЕСТИТЬ ВТНДФЛ
			|ИЗ
			|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК НачислениеЗарплатыРаботникамОрганизацийНДФЛ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлицаДляПерерасчета КАК ФизлицаДляПерерасчета
			|		ПО НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо = ФизлицаДляПерерасчета.ФизЛицо
			|ГДЕ
			|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Ссылка = &парамСсылка
			|
			|СГРУППИРОВАТЬ ПО
			|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо
			|
			|ИМЕЮЩИЕ
			|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Налог - НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ЗачтеноАвансовыхПлатежей) > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НДФЛКЗачету.ФизЛицо,
			|	НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток
			|ПОМЕСТИТЬ ВТНДФЛКЗачету
			|ИЗ
			|	РегистрНакопления.НДФЛКЗачету.Остатки(
			|			&ПериодРегистрации,
			|			Физлицо В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						НДФЛ.ФизЛицо
			|					ИЗ
			|						ВТНДФЛ КАК НДФЛ)
			|				И Организация = &Организация) КАК НДФЛКЗачету
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Доходы.Физлицо КАК Физлицо,
			|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
			|ИЗ
			|	(ВЫБРАТЬ
			|		Основные.Сотрудник.Физлицо КАК Физлицо,
			|		Основные.Результат КАК СуммаДохода
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлицаДляПерерасчета КАК ФизлицаДляПерерасчета
			|			ПО (ФизлицаДляПерерасчета.ФизЛицо = Основные.Сотрудник.Физлицо)
			|	ГДЕ
			|		Основные.Ссылка = &парамСсылка
			|		И Основные.Результат <> 0
			|		И НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Сотрудник.Физлицо,
			|		Дополнительные.Результат
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Дополнительные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлицаДляПерерасчета КАК ФизлицаДляПерерасчета
			|			ПО (ФизлицаДляПерерасчета.ФизЛицо = Дополнительные.Сотрудник.Физлицо)
			|	ГДЕ
			|		Дополнительные.Ссылка = &парамСсылка
			|		И Дополнительные.Результат <> 0
			|		И НЕ Дополнительные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ДоговорыНаВыполнениеРабот.Сотрудник.Физлицо,
			|		ДоговорыНаВыполнениеРабот.Результат
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлицаДляПерерасчета КАК ФизлицаДляПерерасчета
			|			ПО (ФизлицаДляПерерасчета.ФизЛицо = ДоговорыНаВыполнениеРабот.Сотрудник.Физлицо)
			|	ГДЕ
			|		ДоговорыНаВыполнениеРабот.Ссылка = &парамСсылка
			|		И НЕ ДоговорыНаВыполнениеРабот.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплУдержания.ФизЛицо,
			|		-ЗплУдержания.Результат
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК ЗплУдержания
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлицаДляПерерасчета КАК ФизлицаДляПерерасчета
			|			ПО (ФизлицаДляПерерасчета.ФизЛицо = ЗплУдержания.ФизЛицо)

			|	ГДЕ
			|		ЗплУдержания.Ссылка = &парамСсылка
			|		И ЗплУдержания.Результат <> 0
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплНДФЛ.ФизЛицо,
			|		-ЗплНДФЛ.Налог + ВЫБОР
			|			КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) > ЗплНДФЛ.Налог
			|				ТОГДА ЗплНДФЛ.Налог
			|			ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0)
			|		КОНЕЦ
			|	ИЗ
			|		ВТНДФЛ КАК ЗплНДФЛ
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛКЗачету КАК НДФЛКЗачету
			|			ПО ЗплНДФЛ.ФизЛицо = НДФЛКЗачету.ФизЛицо
 			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплЗаймы.ФизЛицо,
			|		-СУММА(ЗплЗаймы.НалогНаМатериальнуюВыгоду)
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК ЗплЗаймы
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлицаДляПерерасчета КАК ФизлицаДляПерерасчета
			|			ПО (ФизлицаДляПерерасчета.ФизЛицо = ЗплЗаймы.ФизЛицо)
			|	ГДЕ
			|		ЗплЗаймы.Ссылка = &парамСсылка
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ЗплЗаймы.ФизЛицо
			|	
			|	ИМЕЮЩИЕ
			|		СУММА(ЗплЗаймы.НалогНаМатериальнуюВыгоду) > 0
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплЗаймы.ФизЛицо,
			|		-ЗплЗаймы.ПогашеноЗайма
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК ЗплЗаймы
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлицаДляПерерасчета КАК ФизлицаДляПерерасчета
			|			ПО (ФизлицаДляПерерасчета.ФизЛицо = ЗплЗаймы.ФизЛицо) 			
			|	ГДЕ
			|		ЗплЗаймы.Ссылка = &парамСсылка
			|		И ЗплЗаймы.ПогашеноЗайма <> 0) КАК Доходы
			|
			|СГРУППИРОВАТЬ ПО
			|	Доходы.Физлицо
			|
			|УПОРЯДОЧИТЬ ПО
			|	Доходы.Физлицо.Наименование";
			
			Запрос = Новый Запрос(НачисленияРаботниковТекст);
		Иначе
			
			НачисленияРаботниковТекст = 
			"ВЫБРАТЬ
			|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо,
			|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Налог - НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ЗачтеноАвансовыхПлатежей) КАК Налог
			|ПОМЕСТИТЬ ВТНДФЛ
			|ИЗ
			|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК НачислениеЗарплатыРаботникамОрганизацийНДФЛ
			|ГДЕ
			|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Ссылка = &парамСсылка
			|	И НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо В(&парамФизлица)
			|
			|СГРУППИРОВАТЬ ПО
			|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо
			|
			|ИМЕЮЩИЕ
			|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Налог - НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ЗачтеноАвансовыхПлатежей) > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НДФЛКЗачету.ФизЛицо,
			|	НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток
			|ПОМЕСТИТЬ ВТНДФЛКЗачету
			|ИЗ
			|	РегистрНакопления.НДФЛКЗачету.Остатки(
			|			&ПериодРегистрации,
			|			Физлицо В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						НДФЛ.ФизЛицо
			|					ИЗ
			|						ВТНДФЛ КАК НДФЛ)
			|				И Организация = &Организация) КАК НДФЛКЗачету
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Доходы.Физлицо КАК Физлицо,
			|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
			|ИЗ
			|	(ВЫБРАТЬ
			|		Основные.Сотрудник.Физлицо КАК Физлицо,
			|		Основные.Результат КАК СуммаДохода
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основные
			|	ГДЕ
			|		Основные.Сотрудник.Физлицо В(&парамФизлица)
			|		И Основные.Ссылка = &парамСсылка
			|		И Основные.Результат <> 0
			|		И НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Сотрудник.Физлицо,
			|		Дополнительные.Результат
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Дополнительные
			|	ГДЕ
			|		Дополнительные.Сотрудник.Физлицо В(&парамФизлица)
			|		И Дополнительные.Ссылка = &парамСсылка
			|		И Дополнительные.Результат <> 0
			|		И НЕ Дополнительные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ДоговорыНаВыполнениеРабот.Сотрудник.Физлицо,
			|		ДоговорыНаВыполнениеРабот.Результат
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
			|	ГДЕ
			|		ДоговорыНаВыполнениеРабот.Сотрудник.Физлицо В(&парамФизлица)
			|		И ДоговорыНаВыполнениеРабот.Ссылка = &парамСсылка
			|		И НЕ ДоговорыНаВыполнениеРабот.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплУдержания.ФизЛицо,
			|		-ЗплУдержания.Результат
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК ЗплУдержания
			|	ГДЕ
			|		ЗплУдержания.ФизЛицо В(&парамФизлица)
			|		И ЗплУдержания.Ссылка = &парамСсылка
			|		И ЗплУдержания.Результат <> 0
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплНДФЛ.ФизЛицо,
			|		-ЗплНДФЛ.Налог + ВЫБОР
			|			КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0) > ЗплНДФЛ.Налог
			|				ТОГДА ЗплНДФЛ.Налог
			|			ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток, 0)
			|		КОНЕЦ
			|	ИЗ
			|		ВТНДФЛ КАК ЗплНДФЛ
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛКЗачету КАК НДФЛКЗачету
			|			ПО ЗплНДФЛ.ФизЛицо = НДФЛКЗачету.ФизЛицо
 			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплЗаймы.ФизЛицо,
			|		-СУММА(ЗплЗаймы.НалогНаМатериальнуюВыгоду)
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК ЗплЗаймы
			|	ГДЕ
			|		ЗплЗаймы.ФизЛицо В(&парамФизлица)
			|		И ЗплЗаймы.Ссылка = &парамСсылка
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ЗплЗаймы.ФизЛицо
			|	
			|	ИМЕЮЩИЕ
			|		СУММА(ЗплЗаймы.НалогНаМатериальнуюВыгоду) > 0
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗплЗаймы.ФизЛицо,
			|		-ЗплЗаймы.ПогашеноЗайма
			|	ИЗ
			|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК ЗплЗаймы
			|	ГДЕ
			|		ЗплЗаймы.ФизЛицо В(&парамФизлица)
			|		И ЗплЗаймы.Ссылка = &парамСсылка
			|		И ЗплЗаймы.ПогашеноЗайма <> 0) КАК Доходы
			|
			|СГРУППИРОВАТЬ ПО
			|	Доходы.Физлицо
			|
			|УПОРЯДОЧИТЬ ПО
			|	Доходы.Физлицо.Наименование";
			
			Запрос = Новый Запрос(НачисленияРаботниковТекст);
			Запрос.УстановитьПараметр("парамФизлица", Физлица);
			
		КонецЕсли;
	Иначе
		НачисленияРаботниковТекст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо,
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Налог - НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ЗачтеноАвансовыхПлатежей) КАК Налог
		|ПОМЕСТИТЬ ВТНДФЛ
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК НачислениеЗарплатыРаботникамОрганизацийНДФЛ
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Ссылка = &парамСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо
		|
		|ИМЕЮЩИЕ
		|	СУММА(НачислениеЗарплатыРаботникамОрганизацийНДФЛ.Налог - НачислениеЗарплатыРаботникамОрганизацийНДФЛ.ЗачтеноАвансовыхПлатежей) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДФЛКЗачету.ФизЛицо КАК ФизЛицо,
		|	СУММА(НДФЛКЗачету.СуммаНДФЛКЗачету) КАК СуммаНДФЛКЗачету
		|ПОМЕСТИТЬ ВТНДФЛКЗачету
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДФЛКЗачету.ФизЛицо КАК ФизЛицо,
		|		НДФЛКЗачету.СуммаНДФЛКЗачетуОстаток КАК СуммаНДФЛКЗачету
		|	ИЗ
		|		РегистрНакопления.НДФЛКЗачету.Остатки(
		|				&ПериодРегистрации,
		|				Физлицо В
		|						(ВЫБРАТЬ
		|							НДФЛ.ФизЛицо
		|						ИЗ
		|							ВТНДФЛ КАК НДФЛ)
		|					И Организация = &Организация) КАК НДФЛКЗачету
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		НДФЛКЗачетуОбороты.ФизЛицо,
		|		СУММА(НДФЛКЗачетуОбороты.СуммаНДФЛКЗачетуОборот)
		|	ИЗ
		|		РегистрНакопления.НДФЛКЗачету.Обороты(
		|				&ПериодРегистрации,
		|				&ПериодРегистрации,
		|				Регистратор,
		|				Физлицо В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							НДФЛ.ФизЛицо
		|						ИЗ
		|							ВТНДФЛ КАК НДФЛ)
		|					И Организация = &Организация) КАК НДФЛКЗачетуОбороты
		|	ГДЕ
		|		НДФЛКЗачетуОбороты.Регистратор <> &парамСсылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НДФЛКЗачетуОбороты.ФизЛицо) КАК НДФЛКЗачету
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛКЗачету.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Физлицо КАК Физлицо,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основные.Сотрудник.Физлицо КАК Физлицо,
		|		Основные.Результат КАК СуммаДохода
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Основные
		|	ГДЕ
		|		Основные.Ссылка = &парамСсылка
		|		И Основные.Результат <> 0
		|		И НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Дополнительные.Сотрудник.Физлицо,
		|		Дополнительные.Результат
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК Дополнительные
		|	ГДЕ
		|		Дополнительные.Ссылка = &парамСсылка
		|		И Дополнительные.Результат <> 0
		|		И НЕ Дополнительные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДоговорыНаВыполнениеРабот.Сотрудник.Физлицо,
		|		ДоговорыНаВыполнениеРабот.Результат
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
		|	ГДЕ
		|		ДоговорыНаВыполнениеРабот.Ссылка = &парамСсылка
		|		И НЕ ДоговорыНаВыполнениеРабот.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплУдержания.ФизЛицо,
		|		-ЗплУдержания.Результат
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Удержания КАК ЗплУдержания
		|	ГДЕ
		|		ЗплУдержания.Ссылка = &парамСсылка
		|		И ЗплУдержания.Результат <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплНДФЛ.ФизЛицо,
		|		-ЗплНДФЛ.Налог + ВЫБОР
		|			КОГДА ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачету, 0) > ЗплНДФЛ.Налог
		|				ТОГДА ЗплНДФЛ.Налог
		|			ИНАЧЕ ЕСТЬNULL(НДФЛКЗачету.СуммаНДФЛКЗачету, 0)
		|		КОНЕЦ
		|	ИЗ
		|		ВТНДФЛ КАК ЗплНДФЛ
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛКЗачету КАК НДФЛКЗачету
 		|			ПО ЗплНДФЛ.ФизЛицо = НДФЛКЗачету.ФизЛицо
 		|	
 		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплЗаймы.ФизЛицо,
		|		-СУММА(ЗплЗаймы.НалогНаМатериальнуюВыгоду)
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК ЗплЗаймы
		|	ГДЕ
		|		ЗплЗаймы.Ссылка = &парамСсылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗплЗаймы.ФизЛицо
		|	
		|	ИМЕЮЩИЕ
		|		СУММА(ЗплЗаймы.НалогНаМатериальнуюВыгоду) > 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗплЗаймы.ФизЛицо,
		|		-ЗплЗаймы.ПогашеноЗайма
		|	ИЗ
		|		Документ.НачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов КАК ЗплЗаймы
		|	ГДЕ
		|		ЗплЗаймы.Ссылка = &парамСсылка
		|		И ЗплЗаймы.ПогашеноЗайма <> 0) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Физлицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Доходы.Физлицо.Наименование";
		
		Запрос = Новый Запрос(НачисленияРаботниковТекст);
		
	КонецЕсли;
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка",		Ссылка);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",	КонецМесяца(ПериодРегистрации));
	
	Доходы = Запрос.Выполнить().Выбрать();
	// сформируем движения по суммам к выплате
	Пока Доходы.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период					= КонецМесяца(ПериодРегистрации);
		Если ВыборкаПоШапкеДокумента.ЭтоРасчетПервойПоловиныМесяца Тогда
			Движение.Сотрудник			= Доходы.Сотрудник;
		Иначе 	
			Движение.ВидДвижения		= ВидДвиженияНакопления.Приход;
		КонецЕсли;
		
		// измерения
		Движение.Физлицо				= Доходы.Физлицо;
		Движение.Организация			= Организация;
		Если НЕ ВыборкаПоШапкеДокумента.ЭтоРасчетПервойПоловиныМесяца Тогда
			Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
		КонецЕсли;	
		
		// ресурсы
		Движение.СуммаВзаиморасчетов	= Доходы.СуммаДохода;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьВзаиморасчетыСРаботниками()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет
		Или ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		МассивТЧ = Новый Массив();
		МассивТЧ.Добавить(Начисления);
		МассивТЧ.Добавить(ДополнительныеНачисления);
		
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
		Если ПустаяСтрока(КраткийСоставДокумента) Тогда
		
			МассивТЧ = Новый Массив();
			МассивТЧ.Добавить(ДоговорыНаВыполнениеРабот);
			МассивТЧ.Добавить(НДФЛ);
			КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
			
		КонецЕсли;
		Если ПустаяСтрока(КраткийСоставДокумента) Тогда
		
			МассивТЧ = Новый Массив();
			МассивТЧ.Добавить(Удержания);
			МассивТЧ.Добавить(ПогашениеЗаймов);
			КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
			
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
		
		МассивТЧ = Новый Массив();
		МассивТЧ.Добавить(НДФЛ);
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		МассивТЧ = Новый Массив();
		МассивТЧ.Добавить(ПогашениеЗаймов);
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		
		МассивТЧ = Новый Массив();
		МассивТЧ.Добавить(Удержания);
		КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ПометкаУдаления Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",	Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1
		|ИЗ
		|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
		|ГДЕ
		|	ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &Ссылка";
	
		Если Не Запрос.Выполнить().Пустой() Тогда
			// удаляем запись о перезаполнении из регистра
			НаборЗаписей = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектЗаполнения.Установить(Ссылка);
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Для Каждого Набор Из Движения Цикл
		Если мНеуправляемыеДвижения.Найти(ТипЗнч(Набор)) = Неопределено Тогда
			Набор.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
			
			Если ВыборкаПоШапкеДокумента.ЭтоРасчетПервойПоловиныМесяца Тогда
				// движения запишем в специальный регистр
				
				// сформируем суммы к выплате по начислениям документа
				СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ЗарплатаЗаПервуюПоловинуМесяца, Ложь);
				
			Иначе
				
				////////////////////////////////////////////////////////////////////////
				// основные Начисления
				
				// получим реквизиты табличной части
				ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента).Выбрать();
				
				Пока ВыборкаПоНачислениям.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоНачислениям, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, Движения.ОсновныеНачисленияРаботниковОрганизаций);
						ДобавитьСтрокуРабочегоВремени(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, Движения.ВнутрисменноеВремяРаботниковОрганизаций);
					КонецЕсли;
				КонецЦикла;
				
				мСоответствиеДоходовИВычетов = СправкиПоНДФЛ.СоответствиеДоходовИМассивовВычетов(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации));
				
				////////////////////////////////////////////////////////////////////////
				// дополнительные Начисления
				
				// получим реквизиты табличной части
				ВыборкаПоДопНачислениям = СформироватьЗапросПоДопНачисления(ВыборкаПоШапкеДокумента).Выбрать();
				
				Пока ВыборкаПоДопНачислениям.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиДопНачисления(ВыборкаПоДопНачислениям, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуДопНачислений(ВыборкаПоДопНачислениям, ВыборкаПоШапкеДокумента, Движения.ДополнительныеНачисленияРаботниковОрганизаций);
					КонецЕсли;
				КонецЦикла;
									
				Если Не Отказ Тогда
					ПроведениеРасчетов.ДобавитьДвиженияПериодическихВыплат(Движения, Ссылка);
				КонецЕсли;
		
				////////////////////////////////////////////////////////////////////////
				// ДоговорыНаВыполнениеРабот
				
				// получим реквизиты табличной части
				ВыборкаПоДоговорам = СформироватьЗапросПоДоговорам(ВыборкаПоШапкеДокумента).Выбрать();
				
				Пока ВыборкаПоДоговорам.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиДоговора(ВыборкаПоДоговорам, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуДоговора(ВыборкаПоДоговорам, ВыборкаПоШапкеДокумента, Движения.ДополнительныеНачисленияРаботниковОрганизаций);
					КонецЕсли;
				КонецЦикла;
				
				////////////////////////////////////////////////////////////////////////
				// удержания
				
				// получим реквизиты табличной части
				ВыборкаПоУдержаниям = СформироватьЗапросПоУдержания(ВыборкаПоШапкеДокумента).Выбрать();
				
				Пока ВыборкаПоУдержаниям.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиУдержания(ВыборкаПоУдержаниям, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуУдержаний(ВыборкаПоУдержаниям, ВыборкаПоШапкеДокумента, Движения.УдержанияРаботниковОрганизаций);
					КонецЕсли;
				КонецЦикла;
				
				////////////////////////////////////////////////////////////////////////
				// доходы НДФЛ
				
				// сформируем доходы НДФЛ по начислениям документа
				СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, Движения.НДФЛСведенияОДоходах);
				
				////////////////////////////////////////////////////////////////////////
				// вычеты по НДФЛ
				
				ПроведениеРасчетов.СформироватьПредоставленныеВычетыПоНДФЛ(ЭтотОбъект, ВыборкаПоШапкеДокумента, Ложь, Отказ, Заголовок);
				ПроведениеРасчетов.СформироватьСоциальныеВычетыПоНДФЛ(ВыборкаПоШапкеДокумента, Неопределено, Движения.НДФЛПредоставленныеСтандартныеВычетыФизЛиц);	
				
				Если Не Отказ Тогда
					ПроведениеРасчетов.СформироватьЗачтенныеАвансыПоНДФЛ(ЭтотОбъект, ВыборкаПоШапкеДокумента, Ложь);
				КонецЕсли;
				
				////////////////////////////////////////////////////////////////////////
				// исчисленный НДФЛ
				
				// получим реквизиты табличной части
				ВыборкаПоНДФЛ = СформироватьЗапросПоНДФЛ().Выбрать();
				
				Пока ВыборкаПоНДФЛ.Следующий() Цикл 
					
					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиНДФЛ(ВыборкаПоНДФЛ, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуНДФЛ(ВыборкаПоНДФЛ, ВыборкаПоШапкеДокумента, Движения.НДФЛРасчетыСБюджетом);
					КонецЕсли;
				КонецЦикла;
				
				// НДФЛ к зачету
				// получим реквизиты табличной части
				ВыборкаПоНДФЛКЗачету = СформироватьЗапросПоНДФЛКЗачету().Выбрать();
				Пока ВыборкаПоНДФЛКЗачету.Следующий() Цикл 
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуНДФЛКЗачету(ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента);
					КонецЕсли;
				КонецЦикла;
				
				////////////////////////////////////////////////////////////////////////
				// удержанный НДФЛ
				
				// посмотрим в учетную политику
				УпрощенныйУчетНДФЛ = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетНДФЛ");
				Если НЕ Отказ И УпрощенныйУчетНДФЛ Тогда
					
					ВыборкаПоНДФЛуд = СформироватьЗапросПоНДФЛудержанный().Выбрать();
					Пока ВыборкаПоНДФЛуд.Следующий() Цикл 
						
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуНДФЛудержанный(ВыборкаПоНДФЛуд, ВыборкаПоНДФЛ, ВыборкаПоНДФЛКЗачету, ВыборкаПоШапкеДокумента, Движения.НДФЛРасчетыСБюджетом);
						
					КонецЦикла;
					
				КонецЕсли;
				ПроведениеРасчетовДополнительный.УточнитьУчетНалогаПоЦеннымБумагам(Движения, Отказ);
				////////////////////////////////////////////////////////////////////////
				// вычеты по НДФЛ
				
				//ПроведениеРасчетов.СформироватьПредоставленныеВычетыПоНДФЛ(ЭтотОбъект, ВыборкаПоШапкеДокумента, Ложь, Отказ, Заголовок);
				//ПроведениеРасчетов.СформироватьСоциальныеВычетыПоНДФЛ(ВыборкаПоШапкеДокумента, Неопределено, Движения.НДФЛПредоставленныеСтандартныеВычетыФизЛиц);	
				
				////////////////////////////////////////////////////////////////////////
				// доходы НДФЛ
				
				// сформируем доходы НДФЛ по начислениям документа
				//СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, Движения.НДФЛСведенияОДоходах);
				ПроведениеРасчетовДополнительный.УточнитьУчетНалогаПоЦеннымБумагам(Движения, Отказ);

				////////////////////////////////////////////////////////////////////////
				// погашение займов
				
				// получим реквизиты табличной части
				//Blik зааком нач
				//ВыборкаПоПогашениеЗаймов = СформироватьЗапросПоПогашениеЗайма().Выбрать();
				//
				//Пока ВыборкаПоПогашениеЗаймов.Следующий() Цикл 
				//	
				//	// проверим очередную строку табличной части
				//	ПроверитьЗаполнениеСтрокиПогашениеЗайма(ВыборкаПоПогашениеЗаймов, Отказ, Заголовок);
				//	Если НЕ Отказ Тогда
				//		// Заполним записи в наборах записей регистров
				//		ДобавитьСтрокуПогашениеЗайма(ВыборкаПоПогашениеЗаймов, ВыборкаПоШапкеДокумента, Движения.ПогашениеЗаймовРаботникамиОрганизаций, Движения.НДФЛСведенияОДоходах, Движения.НДФЛРасчетыСБюджетом, УпрощенныйУчетНДФЛ);
				//	КонецЕсли;
				//КонецЦикла;
				//
				//Если НЕ Отказ И УпрощенныйУчетНДФЛ Тогда
				//	Если Движения.НДФЛРасчетыСБюджетом.Количество() > 0 Тогда
				//		Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Загрузить(ПроведениеРасчетов.РасчетыНалоговогоАгентаПоУдержанномуНДФЛ(Движения.НДФЛРасчетыСБюджетом.Выгрузить()))
				//	КонецЕсли;
				//КонецЕсли;
				//Blik зааком кон
				////////////////////////////////////////////////////////////////////////
				// взаиморасчеты с работниками
				
				// сформируем начисления к выплате по начислениям документа
				СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций);
				
				Если НЕ Отказ И УпрощенныйУчетНДФЛ Тогда
					Если Движения.НДФЛРасчетыСБюджетом.Количество() > 0 Тогда
						Если ДатаВыплатыДохода >= ПроведениеРасчетов.ДатаИзмененияСроковУплатыНалога() Тогда
							ПроведениеРасчетов.ВписатьДатыВыплатыСрокУплатыВУдержанныеНалоги(Движения.НДФЛРасчетыСБюджетом, ДатаВыплатыДохода, , ДатыВыплаты.Выгрузить());
							//ПроведениеРасчетов.ВписатьСуммыВыплаченнойЗарплатыВУдержанныеНалоги(Движения.НДФЛРасчетыСБюджетом, Движения.ВзаиморасчетыСРаботникамиОрганизаций, ДатаВыплатыДохода, , ДатыВыплаты.Выгрузить());
						КонецЕсли;
						Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Загрузить(ПроведениеРасчетов.РасчетыНалоговогоАгентаПоУдержанномуНДФЛ(Движения.НДФЛРасчетыСБюджетом.Выгрузить()))
					КонецЕсли;
				КонецЕсли;
				
				// выполним удаление перерасчетов и перезаполнений исправленного документа
				Если Не Отказ И ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
					
					ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
					ПроведениеРасчетов.УдалитьСведенияОПерезаполненииДокумента(Ссылка, Неопределено, Истина); // Только по исправленным документам и только сотрудников нашего документа
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
	
	Для Каждого Набор Из Движения Цикл
		Если мНеуправляемыеДвижения.Найти(ТипЗнч(Набор)) = Неопределено Тогда
			Набор.Очистить();
			Набор.Записать();
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНеуправляемыеДвижения = Новый Массив();
мНеуправляемыеДвижения.Добавить(ТипЗнч(Движения.ЗарплатаЗаМесяцОрганизаций));