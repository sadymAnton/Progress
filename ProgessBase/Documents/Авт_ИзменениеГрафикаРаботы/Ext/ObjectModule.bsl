////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем ОбработкаКомментариев;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИзменениеГрафикаРаботы.Дата,
	|	ИзменениеГрафикаРаботы.Организация,
	|	ВЫБОР
	|		КОГДА ИзменениеГрафикаРаботы.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА ИзменениеГрафикаРаботы.Организация
	|		ИНАЧЕ ИзменениеГрафикаРаботы.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ИзменениеГрафикаРаботы.Ссылка
	|ИЗ
	|	Документ.Авт_ИзменениеГрафикаРаботы КАК ИзменениеГрафикаРаботы
	|ГДЕ
	|	ИзменениеГрафикаРаботы.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим, ПроверкаШтатногоРасписания)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	СписокСтруктурныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	СписокСтруктурныхПодразделений.Добавить(Организация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзменениеГрафикаРаботыРаботникиОрганизации.Ссылка,
	|	ИзменениеГрафикаРаботыРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ИзменениеГрафикаРаботыРаботникиОрганизации.Сотрудник,
	|	ИзменениеГрафикаРаботыРаботникиОрганизации.Сотрудник.Организация,
	|	ИзменениеГрафикаРаботыРаботникиОрганизации.Сотрудник.Наименование,
	|	ИзменениеГрафикаРаботыРаботникиОрганизации.Сотрудник.НомерДоговора,
	|	ИзменениеГрафикаРаботыРаботникиОрганизации.Сотрудник.ДатаДоговора,
	|	ИзменениеГрафикаРаботыРаботникиОрганизации.ФизЛицо,
	|	ИзменениеГрафикаРаботыРаботникиОрганизации.ДатаНачала,
	|	ИзменениеГрафикаРаботыРаботникиОрганизации.ДатаОкончания,
	|	ИзменениеГрафикаРаботыРаботникиОрганизации.ГрафикРаботы
	|ПОМЕСТИТЬ ВТСтрокиДокумента
	|ИЗ
	|	Документ.Авт_ИзменениеГрафикаРаботы.РаботникиОрганизации КАК ИзменениеГрафикаРаботыРаботникиОрганизации
	|ГДЕ
	|	ИзменениеГрафикаРаботыРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат[0].Количество = 0 Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка
		|ИЗ
		|	ВТСтрокиДокумента КАК Док";	
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	ТЧРаботникиОрганизации.СотрудникНаименование,
		|	ТЧРаботникиОрганизации.СотрудникНомерДоговора,
		|	ТЧРаботникиОрганизации.СотрудникДатаДоговора,
		|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Должность
		|	КОНЕЦ КАК Должность,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписаниеЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписание
		|	КОНЕЦ КАК AVTШтатноеРасписание,
		|	ТЧРаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
		|	КОНЕЦ КАК ЗанимаемыхСтавок,
		|	ВЫБОР
		|		КОГДА (НЕ ВЫБОР
		|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|							И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения.Владелец
		|					ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации.Владелец
		|				КОНЕЦ В (&СписокСтруктурныхПодразделений))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.СотрудникОрганизация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Период
		|	КОНЕЦ КАК ДатаПоследнегоДвиженияПоРаботнику,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостоянияЗавершения
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния
		|	КОНЕЦ КАК ПрежняяПричина,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
		|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения.Владелец
		|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации.Владелец
		|	КОНЕЦ КАК ОрганизацияПодразделения,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения > ТЧРаботникиОрганизации.ДатаНачала
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения
		|	КОНЕЦ КАК ПериодЗавершения,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения > ТЧРаботникиОрганизации.ДатаНачала
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения
		|	КОНЕЦ КАК ДолжностьЗавершения,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения > ТЧРаботникиОрганизации.ДатаНачала
		|			ТОГДА ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписаниеЗавершения
		|	КОНЕЦ КАК AVTШтатноеРасписаниеЗавершения,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения > ТЧРаботникиОрганизации.ДатаНачала
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
		|	КОНЕЦ КАК ПодразделениеОрганизацииЗавершения,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения > ТЧРаботникиОрганизации.ДатаНачала
		|			ТОГДА ТЧРаботникиОрганизации.ГрафикРаботы
		|	КОНЕЦ КАК ГрафикРаботыЗавершения,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения > ТЧРаботникиОрганизации.ДатаНачала
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
		|	КОНЕЦ КАК ЗанимаемыхСтавокЗавершения,
		|	ВЫБОР
		|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения > ТЧРаботникиОрганизации.ДатаНачала
		|			ТОГДА ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостоянияЗавершения
		|	КОНЕЦ КАК ПричинаИзмененияСостоянияЗавершения
		|ИЗ
		|	ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
		|			ДатыПоследнихДвиженийРаботников.Период КАК Период,
		|			ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|			ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|			ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|			ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
		|			ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписание КАК AVTШтатноеРасписание,
		|			ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ГрафикРаботы,
		|			ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения КАК ЗанимаемыхСтавокЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделениеЗавершения КАК ОбособленноеПодразделениеЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения КАК ПодразделениеОрганизацииЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения КАК ДолжностьЗавершения,
		|			ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписаниеЗавершения КАК AVTШтатноеРасписаниеЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения КАК ГрафикРаботыЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ПериодЗавершения КАК ПериодЗавершения,
		|			ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
		|			ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостоянияЗавершения КАК ПричинаИзмененияСостоянияЗавершения
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|				МАКСИМУМ(Работники.Период) КАК Период,
		|				ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
		|			ИЗ
		|				ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|					ПО (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
		|						И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
		|			ГДЕ
		|				(НЕ Работники.Регистратор ССЫЛКА Документ.Авт_ИзменениеГрафикаРаботы)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТЧРаботникиОрганизации.НомерСтроки,
		|				ТЧРаботникиОрганизации.Сотрудник) КАК ДатыПоследнихДвиженийРаботников
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
		|				ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
		|					И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник) КАК ДанныеПоРаботникуДоНазначения
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ТЧРаботникиОрганизации2
		|				ПО (ТЧРаботникиОрганизации2.Ссылка = ТЧРаботникиОрганизации.Ссылка)
		|					И ТЧРаботникиОрганизации.НомерСтроки < ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле", КадровоеПеремещениеОрганизацийПереопределяемый.ПолучитьДополнительноеПолеОписанияСотрудника());
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроверкаШтатногоРасписания)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаНачала
		НетДатыНачала = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		Если НетДатыНачала Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата перемещения!", Отказ, Заголовок);
		КонецЕсли;

		// Организация сотрудника должна совпадать с организацией в документе
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
		КонецЕсли;

		Если НетСотрудника ИЛИ НетДатыНачала Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;

		// ГрафикРаботы
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы)  Тогда
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
		КонецЕсли;
		
		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежняяПричина = NULL Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяПричина = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда	
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		КонецЕсли;

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "одним документом допускается регистрировать только одно перемещение сотрудника - см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента,    ВыборкаПоСтрокамДокумента, СтруктураПараметров = "")
	
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		// отразим новое место работы
		Движение = Движения.РаботникиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
		Движение.AVTШтатноеРасписание   	= ВыборкаПоСтрокамДокумента.AVTШтатноеРасписание;
		Движение.ЗанимаемыхСтавок			= ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок;
		Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
		Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Перемещение;
		Движение.ОбособленноеПодразделение	= ВыборкаПоСтрокамДокумента.ОрганизацияПодразделения;
		
		Движение.ПериодЗавершения       			 = ВыборкаПоСтрокамДокумента.ПериодЗавершения;
		Движение.ПодразделениеОрганизацииЗавершения  = ВыборкаПоСтрокамДокумента.ПодразделениеОрганизацииЗавершения;
		Движение.ДолжностьЗавершения				 = ВыборкаПоСтрокамДокумента.ДолжностьЗавершения;
		Движение.AVTШтатноеРасписаниеЗавершения      = ВыборкаПоСтрокамДокумента.AVTШтатноеРасписаниеЗавершения;
		Движение.ЗанимаемыхСтавокЗавершения			 = ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавокЗавершения;
		Движение.ГрафикРаботыЗавершения				 = ВыборкаПоСтрокамДокумента.ГрафикРаботыЗавершения;
		Движение.ПричинаИзмененияСостоянияЗавершения = ВыборкаПоСтрокамДокумента.ПричинаИзмененияСостоянияЗавершения;
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодЗавершения) Тогда
			Движение.ОбособленноеПодразделениеЗавершения = ВыборкаПоСтрокамДокумента.ОрганизацияПодразделения;
		КонецЕсли;	
			
		// Реквизиты
		Движение.ПервичныйДокумент			= ВыборкаПоШапкеДокумента.Ссылка;
					
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.Организация,
		|	СотрудникиОрганизаций.ОбособленноеПодразделение,
		|	СотрудникиОрганизаций.ВидДоговора
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
		Запрос.УстановитьПараметр("Сотрудник",	Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Не Выборка.Следующий() Тогда
			Возврат;
		КонецЕсли;
		
		Если Выборка.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда
			ИЛИ Выборка.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Выборка.ОбособленноеПодразделение.Пустая() Тогда
			Организация = Выборка.ОбособленноеПодразделение;
		Иначе
			Организация = Выборка.Организация;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаДокумента",ОбщегоНазначения.ПолучитьРабочуюДату());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботникиОрганизации.Сотрудник,
		|	ВЫБОР
		|		КОГДА  РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА РаботникиОрганизации.ДолжностьЗавершения
		|		ИНАЧЕ РаботникиОрганизации.Должность 
		|	КОНЕЦ КАК Должность,
		|	ВЫБОР
		|		КОГДА  РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
		|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
		|	КОНЕЦ КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА РаботникиОрганизации.ЗанимаемыхСтавокЗавершения
		|		ИНАЧЕ РаботникиОрганизации.ЗанимаемыхСтавок
		|	КОНЕЦ КАК ЗанимаемыхСтавок
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
		
		НоваяСтрока = РаботникиОрганизации.Добавить();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		Иначе
			НоваяСтрока.Сотрудник = Основание;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Основание);
		КонецЕсли;
		
		НоваяСтрока.ДатаНачала = ОбщегоНазначения.ПолучитьРабочуюДату();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// получим реквизиты табличной части
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим, Ложь).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, Ложь);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);

				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли;
 		
		КадровоеПеремещениеОрганизацийПереопределяемый.ДобавитьДополнительныеДвижения(ЭтотОбъект, Отказ, Заголовок);

	КонецЕсли;

	Движения.РаботникиОрганизаций.Записывать = Истина;
	
	ОбработкаКомментариев.ПоказатьСообщения();
		
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
	// получить новый номер документа
	ПроцедурыУправленияПерсоналом.Авт_ПриУстановкеНовогоНомераИзмененияГрафиковРабот(СтандартнаяОбработка, Номер, Префикс, Дата);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;