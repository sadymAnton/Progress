Перем мВалютаРегламентированногоУчета Экспорт;
Перем МетаданныеПоДокументам Экспорт;

#Если Клиент Тогда
	
// Настройка периода
Перем НП Экспорт;


#КонецЕсли

// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

//m.ionov@a-prof.ru 28.10.2014
//Добавили возможность вывода адреса поставки и вида документа
//Функция ПечатьАктаСверки()
//	
//	ТабДок = Новый ТабличныйДокумент;
//	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
//	Макет  = ПолучитьМакет("АктСверки");

//	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
//	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
//	ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
//	ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
//	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
//	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
//	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
//	
//	НазваниеОрганизации = Организация.НаименованиеПолное;
//	Если ПустаяСтрока(НазваниеОрганизации) Тогда
//		НазваниеОрганизации = Организация;
//	КонецЕсли;
//	
//	НаименованиеКонтрагента = Контрагент.НаименованиеПолное;
//	Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
//		НаименованиеКонтрагента = Контрагент;
//	КонецЕсли;
//	
//	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
//	ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
//	ИмяПредставителяОрганизации = ПредставительОрганизации;
//	ИмяПредсатвителяКонтрагента = ПредставительКонтрагента;
//	
//	Если ЗначениеЗаполнено(ПредставительОрганизации) Тогда
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
//		|	ОтветственныеЛицаОрганизацийСрезПоследних.Период КАК Период
//		|ИЗ
//		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
//		|			&КонДата,
//		|			СтруктурнаяЕдиница = &Организация
//		|				И ФизическоеЛицо = &ФизическоеЛицо) КАК ОтветственныеЛицаОрганизацийСрезПоследних
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Период УБЫВ";
//		
//		Запрос.УстановитьПараметр("Организация",Организация);
//		Запрос.УстановитьПараметр("ФизическоеЛицо",ПредставительОрганизации);
//		Запрос.УстановитьПараметр("КонДата",Дата);
//		
//		Рез = Запрос.Выполнить();
//		Если Рез.Пустой() тогда
//			ДолжностьПредставителяОрганизации = "";
//		Иначе
//			Выборка = Рез.Выбрать();
//			Выборка.Следующий();
//			ДолжностьПредставителяОрганизации = СокрЛП(Выборка.Должность);
//		КонецЕсли;
//	Иначе
//		ДолжностьПредставителяОрганизации = "";
//	КонецЕсли;
//	ДолжностьПредставителяКонтрагента = ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"",СокрЛП(представительКонтрагента.Должность));
//	
//	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
//		Если ПоДаннымОрганизации.Количество()>0 Тогда
//			ДатаНачалаПериода = ПоДаннымОрганизации[0].Дата;
//		Иначе
//			ДатаНачалаПериода = ДатаНачала;
//		КонецЕсли;
//	Иначе
//		ДатаНачалаПериода = ДатаНачала;
//	КонецЕсли;		

//	ТекстЗаголовка = "взаимных расчетов за период с " + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС
//					+ "между " + НазваниеОрганизации + Символы.ПС + "и " + НаименованиеКонтрагента;
//	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
//		ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + "по договору " + СокрЛП(ДоговорКонтрагента.Наименование);
//	КонецЕсли;
//	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
//	
//	//ДанныеПредставителяОрганизации = ДанныеФизЛица(Организация, ПредставительОрганизации, ДатаОкончания);
//	//ФИОПредставителя = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Фамилия),"",ДанныеПредставителяОрганизации.Фамилия
//	//				+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Имя),""," "+ДанныеПредставителяОрганизации.Имя)
//	//				+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Отчество),""," "+ДанныеПредставителяОрганизации.Отчество));
//	ФИОПредставителя = "" + ПредставительОрганизации;	
//	СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, "
//				+ ?(ДолжностьПредставителяОрганизации<>"",ДолжностьПредставителяОрганизации,"_______________________")+" "
//				+ НазваниеОрганизации 
//				+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"__________________________________________") + ", с одной стороны, "
//				+ "и " + ?(ДолжностьПредставителяКонтрагента<>"",ДолжностьПредставителяКонтрагента,"___________________________") 
//				+ " " + НаименованиеКонтрагента + " " 
//				+ ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_____________________________________________",ПредставительКонтрагента) + ", с другой стороны, "
//				+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
//	
//	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
//	ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаДокумента;
//	
//	ТабДок.Очистить();
//	ТабДок.Вывести(ОбластьЗаголовок);
//	ТабДок.Вывести(ОбластьШапкаТаблицы);
//	
//	ИтСуммаОборотДт      = 0;
//	ИтСуммаОборотКт      = 0;
//	ИтСуммаОборотДтКонтр = 0;
//	ИтСуммаОборотКтКонтр = 0;
//	
//	НачОстДебет  = ?(ОстатокНаНачало > 0, ОстатокНаНачало, 0);
//	НачОстКредит = ?(ОстатокНаНачало < 0, -ОстатокНаНачало, 0);
//	
//	ОстатокНаКонец = ОстатокНаНачало + ПоДаннымОрганизации.Итог("Дебет") -  ПоДаннымОрганизации.Итог("Кредит");
//	
//	КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
//	КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
//	
//	ОстатокНаКонецК = -ОстатокНаНачало + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
//	
//	КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
//	КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
//	
//	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
//	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
//	ТабДок.Вывести(ОбластьНачОстатки);

//	
//	ТабДок.НачатьАвтогруппировкуСтрок();
//	
//	МаксИндекс = Макс(ПоДаннымОрганизации.Количество(), ПоДаннымКонтрагента.Количество()) - 1;
//	Для Инд = 0 По МаксИндекс Цикл
//		Если Инд < ПоДаннымОрганизации.Количество() Тогда
//			СтрокаОрганизации = ПоДаннымОрганизации[Инд];
//			Регистратор = 	СтрокаОрганизации.Представление;
//			СуммаОборотДт = СтрокаОрганизации.Дебет;
//			СуммаОборотКт = СтрокаОрганизации.Кредит;
//			ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
//			ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
//			ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
//			ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
//			ОбластьОбороты.Параметры.РегистраторПредставление = СтрокаОрганизации.Представление;
//			ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.ДокументРегистратор;
//			ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
//		Иначе
//			ОбластьОбороты.Параметры.СуммаОборотДт = "";
//			ОбластьОбороты.Параметры.СуммаОборотКт = "";
//			ОбластьОбороты.Параметры.РегистраторПредставление = "";
//			ОбластьОбороты.Параметры.Регистратор = "";
//			ОбластьОбороты.Параметры.ДатаДокумента = "";
//		КонецЕсли;
//		Если Инд < ПоДаннымКонтрагента.Количество() Тогда
//			СтрокаОрганизации = ПоДаннымКонтрагента[Инд];
//			Регистратор = 	СтрокаОрганизации.Представление;
//			СуммаОборотДт = СтрокаОрганизации.Дебет;
//			СуммаОборотКт = СтрокаОрганизации.Кредит;
//			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
//			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
//			ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
//			ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
//			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Представление;
//			ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
//		Иначе
//			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
//			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
//			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
//			ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
//		КонецЕсли;
//		ТабДок.Вывести(ОбластьОбороты);
//	КонецЦикла;
//	
//	ТабДок.ЗакончитьАвтогруппировкуСтрок();
//	
//	ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
//	ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
//	Если СверкаСогласована тогда
//		ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
//		ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
//	КонецЕсли;
//	ТабДок.Вывести(ОбластьОборотыИтог);
//	
//	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
//	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
//	
//	Если СверкаСогласована тогда
//		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
//		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
//	КонецЕсли;
//	
//	ТабДок.Вывести(ОбластьКонОстатки);
//	
//	// Результаты сверки
//	
//   	Если ПоДаннымОрганизации.Количество() = 0 и ОстатокНаНачало = 0 Тогда
//   		РезультатыСверки = "<сверка не проведена>";
//  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
//   		РезультатыСверки = "<не указана дата сверки>";
//   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
//   		РезультатыСверки = "<не указан контрагент>";
//   	Иначе
//		РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
//			
//	   	Если ОстатокНаКонец > 0 Тогда
//			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
//	
//	   	ИначеЕсли ОстатокНаКонец < 0 Тогда
//			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
//	
//	   	Иначе
//	   		РезультатыСверки = РезультатыСверки + "отсутствует.";
//	   	КонецЕсли;
//	КонецЕсли;
//	ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
//	
//	Если СверкаСогласована тогда
//		ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + СокрЛП(НаименованиеКонтрагента);
//		
//	   	Если ПоДаннымКонтрагента.Количество() = 0 и ОстатокНаНачало = 0 Тогда
//	   		РезультатыСверки = "<сверка не проведена>";
//	  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
//	   		РезультатыСверки = "<не указана дата сверки>";
//	   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
//	   		РезультатыСверки = "<не указан контрагент>";
//	   	Иначе
//			РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
//				
//		   	Если ОстатокНаКонецК < 0 Тогда
//				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
//		
//		   	ИначеЕсли ОстатокНаКонецК > 0 Тогда
//				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
//		
//		   	Иначе
//		   		РезультатыСверки = РезультатыСверки + "отсутствует.";
//		   	КонецЕсли;
//	   	КонецЕсли;
//		
//		ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
//		
//		Если ОстатокНаКонец+ОстатокНаКонецК<>0 Тогда
//			 ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "+Формат(?(ОстатокНаКонец+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(ВалютаДокумента);
//			 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
//		КонецЕсли; 
//	КонецЕсли;
//	
//	ОбластьПодвал.Параметры.НазваниеОрганизации = СокрЛП(НазваниеОрганизации);
//	ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
//	
//	ОбластьПодвал.Параметры.Должность = "________________";
//	ОбластьПодвал.Параметры.ДолжностьК ="________________";
//	
//	ОбластьПодвал.Параметры.ФИОПредставителя  = "("+ ФИОПредставителя +")";
//	ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента)+")";
//	
//	ТабДок.Вывести(ОбластьПодвал);
//	
//	Возврат ТабДок;
//	
//КонецФункции

//Blik 040717 67762 н
Функция ПолучитьРуководителя()
	
	 Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Период КАК Период,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Рук,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Пол КАК Пол
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонДата, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонДата, ) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("КонДата",ДатаОкончания);
        Результат = Запрос.Выполнить().Выбрать();
		ФИОРук="";
		Если Результат.Следующий() Тогда
			КомпонентаСклоненния = глЗначениеПеременной("глКомпонентаСклоненияФИО");
			УниверсальныеМеханизмы.Просклонять(КомпонентаСклоненния,Результат.Рук,2, Результат.Пол,ФИОРук);
			ФИОРук = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФИОРук);
		КонецЕсли;
		Возврат ФИОРук;
КонецФункции
//Blik 040717 67762 к

Функция ПечатьАктаСверки() Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
	Макет  = ПолучитьМакет("ПКК_АктСверки");

	ОбластьЗаголовок     = Макет.ПолучитьОбласть("Заголовок|ВертЗаголовокЗ");
	ОбластьЗаголовокО    = Макет.ПолучитьОбласть("Заголовок1|ВертОрганизация");
	ОбластьШапкаТаблицыО = Макет.ПолучитьОбласть("ШапкаТаблицы|ВертОрганизация");
	ОбластьНачОстаткиО   = Макет.ПолучитьОбласть("НачОстатки|ВертОрганизация");
	ОбластьОборотыО      = Макет.ПолучитьОбласть("Обороты|ВертОрганизация");
	ОбластьОборотыИтогО  = Макет.ПолучитьОбласть("ОборотыИтог|ВертОрганизация");
	ОбластьКонОстаткиО   = Макет.ПолучитьОбласть("КонОстатки|ВертОрганизация");
	
	ОбластьЗаголовокОС    = Макет.ПолучитьОбласть("Заголовок1|ВертОрганизацияСумма");
	ОбластьШапкаТаблицыОС = Макет.ПолучитьОбласть("ШапкаТаблицы|ВертОрганизацияСумма");
	ОбластьНачОстаткиОС   = Макет.ПолучитьОбласть("НачОстатки|ВертОрганизацияСумма");
	ОбластьОборотыОС      = Макет.ПолучитьОбласть("Обороты|ВертОрганизацияСумма");
	ОбластьОборотыИтогОС  = Макет.ПолучитьОбласть("ОборотыИтог|ВертОрганизацияСумма");
	ОбластьКонОстаткиОС   = Макет.ПолучитьОбласть("КонОстатки|ВертОрганизацияСумма");
	
	ОбластьЗаголовокК    = Макет.ПолучитьОбласть("Заголовок1|ВертКонтрагент");
	ОбластьШапкаТаблицыК = Макет.ПолучитьОбласть("ШапкаТаблицы|ВертКонтрагент");
	ОбластьНачОстаткиК   = Макет.ПолучитьОбласть("НачОстатки|ВертКонтрагент");
	ОбластьОборотыК      = Макет.ПолучитьОбласть("Обороты|ВертКонтрагент");
	ОбластьОборотыИтогК  = Макет.ПолучитьОбласть("ОборотыИтог|ВертКонтрагент");
	ОбластьКонОстаткиК   = Макет.ПолучитьОбласть("КонОстатки|ВертКонтрагент");
	ОбластьПодвал        = Макет.ПолучитьОбласть("Подвал");
		
	ОбластьЗаголовокВД 		=  Макет.ПолучитьОбласть("Заголовок1|ВертВидДокумента");
	ОбластьШапкаТаблицыВД 	=  Макет.ПолучитьОбласть("ШапкаТаблицы|ВертВидДокумента");
	ОбластьНачОстаткиВД		=  Макет.ПолучитьОбласть("НачОстатки|ВертВидДокумента");
	ОбластьОборотыВД 		=  Макет.ПолучитьОбласть("Обороты|ВертВидДокумента");
	ОбластьОборотыИтогВД 	=  Макет.ПолучитьОбласть("ОборотыИтог|ВертВидДокумента");
	ОбластьКонОстаткиВД 	=  Макет.ПолучитьОбласть("КонОстатки|ВертВидДокумента");
	
	ОбластьЗаголовокАдр 	=  Макет.ПолучитьОбласть("Заголовок1|ВертАдрес");
	ОбластьШапкаТаблицыАдр 	=  Макет.ПолучитьОбласть("ШапкаТаблицы|ВертАдрес");
	ОбластьНачОстаткиАдр	=  Макет.ПолучитьОбласть("НачОстатки|ВертАдрес");
	ОбластьОборотыАдр 		=  Макет.ПолучитьОбласть("Обороты|ВертАдрес");
	ОбластьОборотыИтогАдр 	=  Макет.ПолучитьОбласть("ОборотыИтог|ВертАдрес");
	ОбластьКонОстаткиАдр 	=  Макет.ПолучитьОбласть("КонОстатки|ВертАдрес");
	
	НазваниеОрганизации = СокрЛП(Организация.НаименованиеПолное);
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = СокрЛП(Организация);
	КонецЕсли;
	
	НаименованиеКонтрагента = СокрЛП(Контрагент.НаименованиеПолное);
	Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
		НаименованиеКонтрагента = СокрЛП(Контрагент);
	КонецЕсли;
	
	ОбластьЗаголовокО.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовокК.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
	ИмяПредставителяОрганизации = ПредставительОрганизации;
	ИмяПредсатвителяКонтрагента = ПредставительКонтрагента;
	//Blik 040717 67762 н
	РуководительФИО = ПолучитьРуководителя();
	//Blik 040717 67762 к
	Если ЗначениеЗаполнено(ПредставительОрганизации) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|			&КонДата,
		|			СтруктурнаяЕдиница = &Организация
		|				И ФизическоеЛицо = &ФизическоеЛицо) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ФизическоеЛицо",ПредставительОрганизации);
		Запрос.УстановитьПараметр("КонДата",Дата);
		
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() тогда
			ДолжностьПредставителяОрганизации = "";
		Иначе
			Выборка = Рез.Выбрать();
			Выборка.Следующий();
			ДолжностьПредставителяОрганизации = СокрЛП(Выборка.Должность);
		КонецЕсли;
	Иначе
		ДолжностьПредставителяОрганизации = "";
	КонецЕсли;
	ДолжностьПредставителяКонтрагента = ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"",СокрЛП(представительКонтрагента.Должность));
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		Если ПоДаннымОрганизации.Количество()>0 Тогда
			ДатаНачалаПериода = ПоДаннымОрганизации[0].Дата;
		Иначе
			ДатаНачалаПериода = ДатаНачала;
		КонецЕсли;
	Иначе
		ДатаНачалаПериода = ДатаНачала;
	КонецЕсли;		

	//m.ionov@a-prof.ru 13.11.2014
	//ТекстЗаголовка = "взаимных расчетов за период с " + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС
	//				+ "между " + НазваниеОрганизации + Символы.ПС + "и " + НаименованиеКонтрагента;
	ТекстЗаголовка = "взаимных расчетов за период с " + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС
					+ "между " + НазваниеОрганизации + " ИНН " + СокрЛП(Организация.ИНН) + Символы.ПС + "и " + НаименованиеКонтрагента + " ИНН " + СокрЛП(Контрагент.ИНН);
	//----m.ionov@a-prof.ru---
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	    ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + "по договору " + СокрЛП(ДоговорКонтрагента.Наименование);
	КонецЕсли;
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	/// Кунов О.В., 08.09.2015 - 42346
	РеквизитыКонтрагента = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(Контрагент, Новый Структура("Код, НСИ_ТорговаяКоманда"));
	ДополнительнаяИнформация = "Код клиента: " + РеквизитыКонтрагента.Код;
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.НСИ_ТорговаяКоманда) Тогда
		ДополнительнаяИнформация = ДополнительнаяИнформация + Символы.ПС + "Торговая команда: " + РеквизитыКонтрагента.НСИ_ТорговаяКоманда.Наименование;
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.ЗаголовокДополнительнаяИнформация = ДополнительнаяИнформация;
	
	//ДанныеПредставителяОрганизации = ДанныеФизЛица(Организация, ПредставительОрганизации, ДатаОкончания);
	//ФИОПредставителя = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Фамилия),"",ДанныеПредставителяОрганизации.Фамилия
	//				+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Имя),""," "+ДанныеПредставителяОрганизации.Имя)
	//				+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Отчество),""," "+ДанныеПредставителяОрганизации.Отчество));
	//Blik 040717 67762 н
	//ФИОПредставителя = "" + ? (ЗначениеЗаполнено(ПредставительОрганизации), ПредставительОрганизации, "в лице Сахниной Н.Ю.");
	Текстпредставителя = " в лице "+ РуководительФИО;
	ФИОПредставителя = "" + ? (ЗначениеЗаполнено(ПредставительОрганизации), ПредставительОрганизации, Текстпредставителя);
	//Blik 040717 67762 к
	///
	
	СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, "
				//+ ?(ДолжностьПредставителяОрганизации<>"",ДолжностьПредставителяОрганизации,"_______________________")+" "
				+ НазваниеОрганизации 
				+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"__________________________________________") + ", с одной стороны, "
				+ "и " // + ?(ДолжностьПредставителяКонтрагента<>"",ДолжностьПредставителяКонтрагента,"___________________________") + " "
				+ НаименованиеКонтрагента + " в лице " 
				+ ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_____________________________________________",ПредставительКонтрагента) + ", с другой стороны, "
				+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
	
	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
	
	ОбластьЗаголовокО.Параметры.ВалютаДокумента = ВалютаДокумента;
	ОбластьЗаголовокК.Параметры.ВалютаДокумента = ВалютаДокумента;
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	Колонок = 9;
	//Если ПКК_Корректировка тогда
		Колонок = Колонок + 2;
	//КонецЕсли;
	Если ПКК_ПоказыватьВидДокумента тогда
		Колонок = Колонок + 1;
	КонецЕсли;
	Если ПКК_ПоказыватьАдресДоставки тогда
		Колонок = Колонок + 1;
	КонецЕсли;
	
	Область = ТабДок.Область(2,2,2,Колонок);
	Область.Объединить();
	Область = ТабДок.Область(3,2,3,Колонок);
	Область.Объединить();
	Область = ТабДок.Область(5,2,5,Колонок);
	Область.Объединить();
	
	ТабДок.Вывести(ОбластьЗаголовокО);
	Если ПКК_ПоказыватьВидДокумента тогда
		ТабДок.Присоединить(ОбластьЗаголовокВд);
	КонецЕсли;
	Если ПКК_ПоказыватьАдресДоставки тогда
		ТабДок.Присоединить(ОбластьЗаголовокАдр);
	КонецЕсли;
	ТабДок.Присоединить(ОбластьЗаголовокОС);
	
	//Если ПКК_Корректировка тогда
		//ОбластьЗаголовокКор.Параметры.ДатаКорректировок = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
		//ТабДок.Присоединить(ОбластьЗаголовокКор);
	//КонецЕсли;
	
	ТабДок.Присоединить(ОбластьЗаголовокК);
	
	ТабДок.Вывести(ОбластьШапкаТаблицыО);
	Если ПКК_ПоказыватьВидДокумента тогда
		ТабДок.Присоединить(ОбластьШапкаТаблицыВД);
	КонецЕсли;
	Если ПКК_ПоказыватьАдресДоставки тогда
		ТабДок.Присоединить(ОбластьШапкаТаблицыАдр);
	КонецЕсли;
	ТабДок.Присоединить(ОбластьШапкаТаблицыОС);
	
	//Если ПКК_Корректировка тогда
		//ТабДок.Присоединить(ОбластьШапкаТаблицыКор);
	//КонецЕсли;
	ТабДок.Присоединить(ОбластьШапкаТаблицыК);
	
	ИтСуммаОборотДт      = 0;
	ИтСуммаОборотКт      = 0;
	ИтСуммаОборотДтКонтр = 0;
	ИтСуммаОборотКтКонтр = 0;
	ИтСуммаОборотДтКор   = 0;
	ИтСуммаОборотКтКор   = 0;

	
	НачОстДебет  = ?(ОстатокНаНачало > 0, ОстатокНаНачало, 0);
	НачОстКредит = ?(ОстатокНаНачало < 0, -ОстатокНаНачало, 0);
	
	ОстатокНаКонец = ОстатокНаНачало + ПоДаннымОрганизации.Итог("Дебет") - ПоДаннымОрганизации.Итог("Кредит");
	
	КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
	КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
	
	Если ПКК_НеВыводитьДанныеКонтрагента Тогда
		ОстатокНаКонецК = 0;
	Иначе
		ОстатокНаКонецК = -ОстатокНаНачало + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
	КонецЕсли;
	
	КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	
	ОбластьНачОстаткиОС.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
	ОбластьНачОстаткиОС.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
	Если НЕ ПКК_НеВыводитьДанныеКонтрагента Тогда
		ОбластьНачОстаткиК.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
		ОбластьНачОстаткиК.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьНачОстаткиО);
	Если ПКК_ПоказыватьВидДокумента тогда
		ТабДок.Присоединить(ОбластьНачОстаткиВД);
	КонецЕсли;
	Если ПКК_ПоказыватьАдресДоставки тогда
		ТабДок.Присоединить(ОбластьНачОстаткиАдр);
	КонецЕсли;
	ТабДок.Присоединить(ОбластьНачОстаткиОС);
	
	//Если ПКК_Корректировка тогда
		//ТабДок.Присоединить(ОбластьНачОстаткиКор);
	//КонецЕсли;
	
	ТабДок.Присоединить(ОбластьНачОстаткиК);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	Если ПКК_НеВыводитьДанныеКонтрагента Тогда
		//{21.04.2015 Островерхий заявка №б/н 
		//МаксИндекс = ПоДаннымОрганизации.Количество(); 
		МаксИндекс = ПоДаннымОрганизации.Количество() - 1;
		//21.04.2015 Островерхий} 
	Иначе
		МаксИндекс = Макс(ПоДаннымОрганизации.Количество(), ПоДаннымКонтрагента.Количество()) - 1;
	КонецЕсли;
	
	Для Инд = 0 По МаксИндекс Цикл
		Если Инд < ПоДаннымОрганизации.Количество() Тогда
			СтрокаОрганизации = ПоДаннымОрганизации[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОборотыОС.Параметры.СуммаОборотДт = СуммаОборотДт;
			ОбластьОборотыОС.Параметры.СуммаОборотКт = СуммаОборотКт;
			ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
			ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
			ОбластьОборотыО.Параметры.РегистраторПредставление = СтрокаОрганизации.Представление;
			ОбластьОборотыО.Параметры.Регистратор = СтрокаОрганизации.ДокументРегистратор;
			ОбластьОборотыО.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОборотыОС.Параметры.СуммаОборотДт = "";
			ОбластьОборотыОС.Параметры.СуммаОборотКт = "";
			ОбластьОборотыО.Параметры.РегистраторПредставление = "";
			ОбластьОборотыО.Параметры.Регистратор = "";
			ОбластьОборотыО.Параметры.ДатаДокумента = "";
		КонецЕсли;
		////Данные по корректировке
		//Если Инд < ПоДаннымОрганизации.Количество() 
		//	и ТипЗнч(ПоДаннымОрганизации[Инд].ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		//	СтрокаОрганизации = ПоДаннымОрганизации[Инд];
		//	
		//	Запрос = Новый Запрос;
		//	Запрос.Текст = 
		//		"ВЫБРАТЬ
		//		|	ПродажиОбороты.ДокументПродажи,
		//		|	СУММА(ПродажиОбороты.КоличествоОборот) КАК КоличествоОборот,
		//		|	СУММА(ПродажиОбороты.СтоимостьОборот) КАК СтоимостьОборот,
		//		|	СУММА(ПродажиОбороты.СтоимостьБезСкидокОборот) КАК СтоимостьБезСкидокОборот,
		//		|	СУММА(ПродажиОбороты.НДСОборот) КАК НДСОборот
		//		|ИЗ
		//		|	РегистрНакопления.Продажи.Обороты(
		//		|			&НачалоПериода,
		//		|			&КонецПериода,
		//		|			,
		//		|			ДокументПродажи = &ДоговорПродажи
		//		|				И Контрагент = &Контрагент
		//		|				И Организация = &Организация) КАК ПродажиОбороты
		//		|
		//		|СГРУППИРОВАТЬ ПО
		//		|	ПродажиОбороты.ДокументПродажи";

		//	Запрос.УстановитьПараметр("ДоговорПродажи", СтрокаОрганизации.ДокументРегистратор);
		//	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
		//	Запрос.УстановитьПараметр("Контрагент", Контрагент);
		//	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		//	Запрос.УстановитьПараметр("Организация", Организация);

		//	Результат = Запрос.Выполнить();

		//	ВыборкаДетальныеЗаписи = Результат.Выбрать();

		//	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		//			Если  ВыборкаДетальныеЗаписи.СтоимостьОборот >= 0 тогда
		//				СуммаОборотДтКор = ВыборкаДетальныеЗаписи.СтоимостьОборот;
		//				СуммаОборотКтКор = 0;
		//			Иначе 
		//				СуммаОборотДтКор = 0;
		//				СуммаОборотКтКор = ВыборкаДетальныеЗаписи.СтоимостьОборот;
		//			КонецЕсли;
		//			ОбластьОборотыКор.Параметры.СуммаОборотДт = СуммаОборотДтКор;
		//			ОбластьОборотыКор.Параметры.СуммаОборотКт = СуммаОборотКтКор;
		//			ИтСуммаОборотДтКор = ИтСуммаОборотДтКор + СуммаОборотДтКор;
		//			ИтСуммаОборотКтКор = ИтСуммаОборотКтКор + СуммаОборотКтКор;
		//		Иначе	
		//		СуммаОборотДтКор = СтрокаОрганизации.Дебет;
		//		СуммаОборотКтКор = СтрокаОрганизации.Кредит;
		//		ОбластьОборотыКор.Параметры.СуммаОборотДт = СуммаОборотДтКор;
		//		ОбластьОборотыКор.Параметры.СуммаОборотКт = СуммаОборотКтКор;
		//		ИтСуммаОборотДтКор = ИтСуммаОборотДтКор + СуммаОборотДтКор;
		//		ИтСуммаОборотКтКор = ИтСуммаОборотКтКор + СуммаОборотКтКор;
		//	КонецЕсли;
		//ИначеЕсли Инд < ПоДаннымОрганизации.Количество() и ТипЗнч(ПоДаннымОрганизации[Инд].ДокументРегистратор) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
		//	СуммаОборотДтКор = СтрокаОрганизации.Дебет;
		//	СуммаОборотКтКор = СтрокаОрганизации.Кредит;
		//	ОбластьОборотыКор.Параметры.СуммаОборотДт = СуммаОборотДтКор;
		//	ОбластьОборотыКор.Параметры.СуммаОборотКт = СуммаОборотКтКор;
		//	ИтСуммаОборотДтКор = ИтСуммаОборотДтКор + СуммаОборотДтКор;
		//	ИтСуммаОборотКтКор = ИтСуммаОборотКтКор + СуммаОборотКтКор;
		//Иначе	
		//	ОбластьОборотыКор.Параметры.СуммаОборотДт = "";
		//	ОбластьОборотыКор.Параметры.СуммаОборотКт = "";
		//КонецЕсли;
		
		/// Кунов О.В., 08.09.2015 - 42346
		Если Не ТабДок.ПроверитьВывод(ОбластьОборотыО) Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			//ТабДок.Вывести(ОбластьШапкаТаблицыО);
			//Если ПКК_ПоказыватьВидДокумента тогда
			//	ТабДок.Присоединить(ОбластьШапкаТаблицыВД);
			//КонецЕсли;
			//Если ПКК_ПоказыватьАдресДоставки тогда
			//	ТабДок.Присоединить(ОбластьШапкаТаблицыАдр);
			//КонецЕсли;
			//ТабДок.Присоединить(ОбластьШапкаТаблицыОС);
			//ТабДок.Присоединить(ОбластьШапкаТаблицыК);
		КонецЕсли;
		///
		
		ТабДок.Вывести(ОбластьОборотыО);
		
		Если ПКК_ПоказыватьВидДокумента тогда
			ОбластьОборотыВД.Параметры.ВидДокумента =  СтрокаОрганизации.ПКК_ВидДокумента;
			ТабДок.Присоединить(ОбластьОборотыВД);
		КонецЕсли;
		Если ПКК_ПоказыватьАдресДоставки тогда
			ОбластьОборотыАдр.Параметры.АдресПоставки =  СтрокаОрганизации.ПКК_АдресДоставки;
			ТабДок.Присоединить(ОбластьОборотыАдр);
		КонецЕсли;
		Если Инд < ПоДаннымКонтрагента.Количество() И Не ПКК_НеВыводитьДанныеКонтрагента Тогда
			СтрокаОрганизации = ПоДаннымКонтрагента[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОборотыК.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
			ОбластьОборотыК.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
			ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
			ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
			ОбластьОборотыК.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Представление;
			ОбластьОборотыК.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОборотыК.Параметры.СуммаОборотДтКонтр = "";
			ОбластьОборотыК.Параметры.СуммаОборотКтКонтр = "";
			ОбластьОборотыК.Параметры.РегистраторПредставлениеКонтр = "";
			ОбластьОборотыК.Параметры.ДатаДокументаКонтр = "";
		КонецЕсли;
		
		ТабДок.Присоединить(ОбластьОборотыОС);
		//Если ПКК_Корректировка тогда
		//	ТабДок.Присоединить(ОбластьОборотыКор);
		//КонецЕсли;		
		ТабДок.Присоединить(ОбластьОборотыК);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();

	ОбластьОборотыИтогОС.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
	ОбластьОборотыИтогОС.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
	Если СверкаСогласована тогда
		ОбластьОборотыИтогК.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
		ОбластьОборотыИтогК.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
	КонецЕсли;

	/// Кунов О.В., 08.09.2015 - 42346
	МассивСекций = Новый Массив;
	МассивСекций.Добавить(ОбластьОборотыИтогО);
	МассивСекций.Добавить(ОбластьКонОстаткиО);
	МассивСекций.Добавить(ОбластьПодвал);
	
	Если Не ТабДок.ПроверитьВывод(МассивСекций) Тогда
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	///
	
	ТабДок.Вывести(ОбластьОборотыИтогО);
	Если ПКК_ПоказыватьВидДокумента тогда
		ТабДок.Присоединить(ОбластьОборотыИтогВД);
	КонецЕсли;
	Если ПКК_ПоказыватьАдресДоставки тогда
		ТабДок.Присоединить(ОбластьОборотыИтогАдр);
	КонецЕсли;
	ТабДок.Присоединить(ОбластьОборотыИтогОС);
	
	//Если ПКК_Корректировка тогда
		//ОбластьОборотыИтогКор.Параметры.СуммаОборотДт      = ИтСуммаОборотДтКор;
		//ОбластьОборотыИтогКор.Параметры.СуммаОборотКт      = ИтСуммаОборотКтКор;
		//ТабДок.Присоединить(ОбластьОборотыИтогКор);
	//КонецЕсли;
	ТабДок.Присоединить(ОбластьОборотыИтогК);
	
	ОбластьКонОстаткиОС.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
	ОбластьКонОстаткиОС.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
	
	Если СверкаСогласована И НЕ ПКК_НеВыводитьДанныеКонтрагента тогда
		ОбластьКонОстаткиК.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
		ОбластьКонОстаткиК.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьКонОстаткиО);
	Если ПКК_ПоказыватьВидДокумента тогда
		ТабДок.Присоединить(ОбластьКонОстаткиВД);
	КонецЕсли;
	Если ПКК_ПоказыватьАдресДоставки тогда
		ТабДок.Присоединить(ОбластьКонОстаткиАдр);
	КонецЕсли;
	ТабДок.Присоединить(ОбластьКонОстаткиОС);
	
	//Если ПКК_Корректировка тогда
	//
	//	ОбластьКонОстаткиКор.Параметры.СуммаКонечныйОстатокДт = КонОстДебет - (ИтСуммаОборотДт - ИтСуммаОборотДтКор);
	//	ОбластьКонОстаткиКор.Параметры.СуммаКонечныйОстатокКт = КонОстКредит - (ИтСуммаОборотКт - ИтСуммаОборотКтКор);
	//	ТабДок.Присоединить(ОбластьКонОстаткиКор);
	//КонецЕсли;
	ТабДок.Присоединить(ОбластьКонОстаткиК);
	
	// Результаты сверки
	
   	Если ПоДаннымОрганизации.Количество() = 0 и ОстатокНаНачало = 0 Тогда
   	    РезультатыСверки = "<сверка не проведена>";
  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
   	    РезультатыСверки = "<не указана дата сверки>";
   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
   	    РезультатыСверки = "<не указан контрагент>";
   	Иначе
		РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
			
	   	Если ОстатокНаКонец > 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	
	   	ИначеЕсли ОстатокНаКонец < 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	
	   	Иначе
	   		РезультатыСверки = РезультатыСверки + "отсутствует.";
		КонецЕсли;
		
	//	//Остатки с корректировками
	//	ОстатокНаКонецКор = ОстатокНаНачало + ИтСуммаОборотДтКор - ИтСуммаОборотКтКор;
	//	РезультатыСверкиКор = "на " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy") + " задолженность с учетом корректировок ";
	//   	Если ОстатокНаКонецКор > 0 Тогда
	//		РезультатыСверкиКор = РезультатыСверкиКор + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонецКор, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	//
	//   	ИначеЕсли ОстатокНаКонецКор < 0 Тогда
	//		РезультатыСверкиКор = РезультатыСверкиКор + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонецКор, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	//	КонецЕсли;
		
	КонецЕсли;
	ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
	//ОбластьПодвал.Параметры.РезультатыСверкиКор = РезультатыСверкиКор;
	
	Если СверкаСогласована тогда
		ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + СокрЛП(НаименованиеКонтрагента);
		
		Если ПоДаннымКонтрагента.Количество() = 0 и ОстатокНаНачало = 0 ИЛИ ПКК_НеВыводитьДанныеКонтрагента Тогда
			//m.ionov@a-prof.ru 26.02.2015
	   	    //РезультатыСверки = "<сверка не проведена>";
			РезультатыСверки = "";
			//----m.ionov@a-prof.ru---
	  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	   	    РезультатыСверки = "<не указана дата сверки>";
	   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
	   	    РезультатыСверки = "<не указан контрагент>";
	   	Иначе
			РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
		   	Если ОстатокНаКонецК < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
		
		   	ИначеЕсли ОстатокНаКонецК > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
		
		   	Иначе
		   		РезультатыСверки = РезультатыСверки + "отсутствует.";
		   	КонецЕсли;
	   	КонецЕсли;
		
		ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
		
		Если ОстатокНаКонец+ОстатокНаКонецК<>0 И НЕ ПКК_НеВыводитьДанныеКонтрагента Тогда
			 ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "+Формат(?(ОстатокНаКонец+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(ВалютаДокумента);
			 //Если ОстатокНаКонецКор<> неопределено тогда
			 //	ИтогСверкиКор = "Расхождение информации с учетом корректировок о состоянии расчетов в размере "+Формат(?(ОстатокНаКонецКор+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонецКор+ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(ВалютаДокумента);
			 //КонецЕсли;	
			 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
			 //ОбластьПодвал.Параметры.ИтогСверкиКор = Символы.ПС+ ИтогСверкиКор+Символы.ПС+" ";
		КонецЕсли; 
	КонецЕсли;
	
	ОбластьПодвал.Параметры.НазваниеОрганизации = СокрЛП(НазваниеОрганизации);
	ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	
	//m.ionov@a-prof.ru 12.11.2014
	//ОбластьПодвал.Параметры.Должность = "________________";
	//ОбластьПодвал.Параметры.ДолжностьК ="________________";
	ОбластьПодвал.Параметры.Должность = ДолжностьПредставителяОрганизации;
	ОбластьПодвал.Параметры.ДолжностьК = ДолжностьПредставителяКонтрагента;
	//----m.ionov@a-prof.ru---
	
	/// Кунов О.В., 08.09.2015 - 42346
	ФИОПредставителя = "________________";
	ОбластьПодвал.Параметры.ФИОПредставителя  = "("+ ФИОПредставителя +")";
	ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента)+")";
	
	Исполнитель = "Исполнитель: " + Ответственный.Наименование;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Вид = &Вид");
	
	Запрос.УстановитьПараметр("Объект", Ответственный.ФизЛицо);
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Исполнитель = Исполнитель + ", тел.: " + Выборка.Представление;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailФизЛица);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Исполнитель = Исполнитель + ", e-mail: " + Выборка.Представление;
	КонецЕсли;
	
	ОбластьПодвал.Параметры.Исполнитель = Исполнитель;
	///
	
	ТабДок.Вывести(ОбластьПодвал);
	//ТабДок.ПовторятьПриПечатиСтроки(ТабДок.ПолучитьОбласть(9, , 9));
	
	Возврат ТабДок;
	
КонецФункции


// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли; 
	
	Если ИмяМакета = "АктСверки" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьАктаСверки();
			
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("АктСверки","Акт сверки");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьПредставлениеДокументов(ТаблицаЗначений)
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРегистратор) Тогда 
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы.ДокументРегистратор);
		Если Документы.ТипВсеСсылки().СодержитТип(ТипТекущегоДокумента) Тогда
			
			МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
			Если МассивТипа = Неопределено Тогда
				МассивТипа = Новый Массив;
				КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
			КонецЕсли;
			
			МассивТипа.Добавить(СтрокаТаблицы.ДокументРегистратор);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КэшПоТипам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений.Индексы.Добавить("ДокументРегистратор");
	
	ТаблицаЗначений.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;

	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		ИмяМетаданных  = МетаданныеТипа.Имя;
		ЕстьНомерВходящегоДокумента = МетаданныеТипа.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено;
		ЕстьДатаВходящегоДокумента  = МетаданныеТипа.Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено;

		Запрос.Текст = Запрос.Текст
		+ ?(Запрос.Текст = "", "",
		" 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|")
		+ "
		|ВЫБРАТЬ
		|	""" + МетаданныеТипа.Синоним + """ КАК ПредставлениеТипа,
		|	Док.Ссылка  КАК Ссылка,
		|	" + ?(ЕстьНомерВходящегоДокумента, "Док.НомерВходящегоДокумента", "НЕОПРЕДЕЛЕНО") + " КАК Номер,
		|	" + ?(ЕстьДатаВходящегоДокумента, "Док.ДатаВходящегоДокумента", "Док.Дата") + " КАК Дата
		|ИЗ
		|	Документ."+ИмяМетаданных+" КАК Док
		|ГДЕ Док.Ссылка В (&ДокументыТипа_"+ИмяМетаданных+")";
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерДокумента  = ?(Выборка.Номер = Неопределено, ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.Ссылка), Выборка.Номер);
		ДатаДокумента = Формат(Выборка.Дата, "ДФ='дд ММ гггг'");
		СтрокаДокумента = ТаблицаЗначений.Найти(Выборка.Ссылка, "ДокументРегистратор");
		СтрокаДокумента.Представление =  Выборка.ПредставлениеТипа + " № " + НомерДокумента + " от " + ДатаДокумента;
	КонецЦикла;
	//Blik 37899 н 200315  
	СписокТипов = Новый Массив;
    СписокТипов.Добавить("ДокументССылка.СчетФактураВыданный");
    СписокТипов.Добавить("ДокументССылка.СчетФактураПолученный");
	ОписаниеСоставногоТипа = Новый ОписаниеТипов(СписокТипов);
	ТаблицаЗначений.Колонки.Добавить("СчетФактура",ОписаниеСоставногоТипа);
	
	для каждого стр из ТаблицаЗначений Цикл
		Если ТипЗнч(стр.ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
			Или ТипЗнч(стр.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРеализации")	
			Тогда
			
			текдог = стр.ДокументРегистратор;
			СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(текдог, "СчетФактураВыданный");
			стр.СчетФактура =  СчетФактура;
		ИначеЕсли ТипЗнч(стр.ДокументРегистратор) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда	
			текдог = стр.ДокументРегистратор;
			СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(текдог, "СчетФактураПолученный");
			стр.СчетФактура =  СчетФактура;
		КонецЕсли;
	КонецЦикла;
	

	//Blik 37899 к 200315
КонецПроцедуры

Процедура ЗаполнитьПоДаннымУправленческогоУчета() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",         ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",      КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("Валюта",             ВалютаДокумента);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",             Сделка);
	
	ТекстФильтра = "
	|		Организация = &Организация И Контрагент = &Контрагент ";
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстФильтра = ТекстФильтра + " И ДоговорКонтрагента = &ДоговорКонтрагента ";
	Иначе
		ТекстФильтра = ТекстФильтра + " И ДоговорКонтрагента.ВалютаВзаиморасчетов = &Валюта ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		ТекстФильтра = ТекстФильтра + " И Сделка = &Сделка ";
	КонецЕсли;
	
	// Остатки
	
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ЕСТЬNULL(Взаиморасчеты.СуммаВзаиморасчетовНачальныйОстаток, 0) КАК ОстатокНаНачало,
	|	ЕСТЬNULL(Взаиморасчеты.СуммаВзаиморасчетовКонечныйОстаток, 0)  КАК ОстатокНаКонец
	|ИЗ 
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , ,"	+ ТекстФильтра + ") КАК Взаиморасчеты";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	
		ОстатокНаНачало = 0;
		ОстатокНаКонец  = 0;
	
	Иначе
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОстатокНаНачало = Выборка.ОстатокНаНачало;
		ОстатокНаКонец  = Выборка.ОстатокНаКонец;
	
	КонецЕсли;
	
	// Обороты
	
	Запрос.Текст = 
	"ВЫБРАТЬ Разрешенные
	|	Взаиморасчеты.Период КАК Дата,
	|	Взаиморасчеты.Регистратор КАК ДокументРегистратор,
	|	Взаиморасчеты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход > 0
	|			ТОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход < 0
	|			ТОГДА -(Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Кредит
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор," + ТекстФильтра + ") КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.СуммаВзаиморасчетовПриход <> Взаиморасчеты.СуммаВзаиморасчетовРасход
    |
    |УПОРЯДОЧИТЬ ПО
    |   Дата";
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	
	ЗаполнитьПредставлениеДокументов(ТаблицаРезультата);
	
	ПоДаннымОрганизации.Загрузить(ТаблицаРезультата);
	
КонецПроцедуры

Функция ЭтоДокументДвиженияДенежныхСредств(ДокументСсылка)

	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Результат = 
		ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПереданный")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.АккредитивПолученный")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	 
	Возврат Результат;

КонецФункции 

// Заполнение таблицы "По данным организации" по информации из бухгалтерского учета
Процедура ЗаполнитьПоДаннымБухгалтерскогоУчетаСтарая(ФильтрСписокСчетов = неопределено) Экспорт
	
	Если ФильтрСписокСчетов = Неопределено Тогда
		
		СписокСчетовСтрока = "";
		Для каждого СтрокаСчета Из СписокСчетов Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
				Продолжить;
			Иначе
				СписокСчетовСтрока = СписокСчетовСтрока + ?(ПустаяСтрока(СписокСчетовСтрока), "", ", ") + Строка(СтрокаСчета.Счет);
			КонецЕсли; 
		КонецЦикла; 
		
		ФильтрСписокСчетов = БухгалтерскийУчет.ПолучитьМассивСчетов("Хозрасчетный", СписокСчетовСтрока);
		
		Если ФильтрСписокСчетов.Количество() = 0 Тогда
		    ОбщегоНазначения.СообщитьОбОшибке("Неверно задан список счетов, по которым производится сверка!",,,СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		СписокСчетовСтрока = "";
		Для Каждого Счет ИЗ ФильтрСписокСчетов Цикл
			СписокСчетовСтрока = СписокСчетовСтрока + ?(ПустаяСтрока(СписокСчетовСтрока), "", ", ") + Строка(Счет);
		КонецЦикла;
		
		ФильтрСписокСчетов = БухгалтерскийУчет.ПолучитьМассивСчетов("Хозрасчетный", СписокСчетовСтрока);
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ?(НЕ ЗначениеЗаполнено(ДатаНачала),    Неопределено, ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", ?(НЕ ЗначениеЗаполнено(ДатаОкончания), Неопределено, КонецДня(ДатаОкончания)));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	Запрос.УстановитьПараметр("Валюта",        ?(НЕ ЗначениеЗаполнено(ВалютаДокумента) или (ВалютаДокумента = мВалютаРегламентированногоУчета), неопределено,ВалютаДокумента));
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(НЕ ЗначениеЗаполнено(ДоговорКонтрагента),Неопределено,ДоговорКонтрагента));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОбороты.Регистратор.Дата КАК Дата,
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументРегистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1.ВидПрочихДоходовИРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.Счет
	|ПОМЕСТИТЬ ВременнаяТаблицаДанных
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В (&ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 = &ДоговорКонтрагента
	|				КОНЕЦ,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|							ТОГДА НЕ ХозрасчетныйОбороты.КорСубконто1 = &Контрагент
	|						ИНАЧЕ НЕ(ХозрасчетныйОбороты.КорСубконто1 = &Контрагент
	|									И ХозрасчетныйОбороты.КорСубконто2 = &ДоговорКонтрагента)
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ(ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаДанных.Дата,
	|	ВременнаяТаблицаДанных.ДокументРегистратор,
	|	ВременнаяТаблицаДанных.Договор,
	|	СУММА(ВременнаяТаблицаДанных.Дебет) КАК Дебет,
	|	СУММА(ВременнаяТаблицаДанных.Кредит) КАК Кредит,
	|	ВременнаяТаблицаДанных.НомерВходящегоДокумента,
	|	ВременнаяТаблицаДанных.ДатаВходящегоДокумента,
	|	ВременнаяТаблицаДанных.КорСчет,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаДанных.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы) КАК КорСубконто1,
	|	ВременнаяТаблицаДанных.Валюта,
	|	СУММА(ВременнаяТаблицаДанных.ВалютнаяСуммаОборот) КАК ВалютнаяСуммаОборот,
	|	ВременнаяТаблицаДанных.ВидПрочихДоходовИРасходов,
	|	ВременнаяТаблицаДанных.Счет
	|ИЗ
	|	ВременнаяТаблицаДанных КАК ВременнаяТаблицаДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаДанных.Договор,
	|	ВременнаяТаблицаДанных.НомерВходящегоДокумента,
	|	ВременнаяТаблицаДанных.ДатаВходящегоДокумента,
	|	ВременнаяТаблицаДанных.КорСчет,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаДанных.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы),
	|	ВременнаяТаблицаДанных.Валюта,
	|	ВременнаяТаблицаДанных.ВидПрочихДоходовИРасходов,
	|	ВременнаяТаблицаДанных.Счет,
	|	ВременнаяТаблицаДанных.Дата,
	|	ВременнаяТаблицаДанных.ДокументРегистратор
	|
	|ИМЕЮЩИЕ
	|	НЕ(СУММА(ВременнаяТаблицаДанных.Дебет) = 0
	|			И СУММА(ВременнаяТаблицаДанных.Кредит) = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаДанных.Дата,
	|	ВременнаяТаблицаДанных.ДокументРегистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборДвижений = ПоДаннымОрганизации.Выгрузить();
	НаборДвижений.Колонки.Добавить("Валюта", Новый описаниеТипов("СправочникСсылка.Валюты"));
	НаборДвижений.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.ДокументРегистратор= Выборка.ДокументРегистратор;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;
		НоваяСтрока.ДоговорКонтрагента = Выборка.Договор;
		
		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.ДокументРегистратор);
		
		// Сформируем строку представления
		Представление = "";
		
		Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
				
			ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
				Представление = "Курсовые разницы";
			ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
				Представление = "Санкции";
			ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы Тогда
				Представление = "Суммовые разницы";
			ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ Тогда
				Представление = "Курсовые разницы по расчетам в у.е";
			КонецЕсли;
			
		КонецЕсли;
		
		Если не ПустаяСтрока(Представление) Тогда
			// Строка уже отработана
			
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
			Если (Выборка.Дебет >0) Тогда
				Представление = "Возврат займа";
			ИначеЕсли (Выборка.Кредит >0)Тогда
				Представление = "Займ";
			Иначе
				Представление = "Операции по займам";
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
			или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям
			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
			или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал
			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) 
			или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ
			тогда
			Представление = "Претензия";
			
		ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Касса) 
			или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
			или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.РасчетныеСчета
			или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
			или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.ВалютныеСчета
			или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпециальныеСчета) 
			тогда
			
			Если (Выборка.Кредит >0) Тогда
				
				Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
					Представление = "Возврат средств";
					
				ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
					Представление = "Оплата";
					
				Иначе
					Представление = "Перевод средств";
				КонецЕсли;
				
			ИначеЕсли (Выборка.Дебет >0) Тогда
				Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
					или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
					Тогда
					
					Представление = "Оплата";
					
				ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
					Представление = "Возврат средств";
					
				Иначе
					Представление = "Перевод средств";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
			тогда
			Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
				или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
				Если Выборка.Дебет <> 0 Тогда
					Представление = "Оплата";
				Иначе
					Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
						Представление = "Корректировка прихода";
					Иначе
						Представление = "Приход";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли (Выборка.Кредит <>0) Тогда
				Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
					Представление = "Корректировка прихода";
				Иначе
					Представление = "Приход";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
			Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
				или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
				Если ЭтоДокументДвиженияДенежныхСредств(Выборка.ДокументРегистратор) Тогда
					Представление = "Суммовая разница";
				ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					Представление = "Корректировка продажи";
				ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
					Представление = "Продажа";
				Иначе
					Если Выборка.Дебет > 0 Тогда
						Представление = "Продажа";
					ИначеЕсли Выборка.Дебет < 0 Тогда
						Представление = "Возврат";
					Иначе
						Представление = "Оплата";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Представление)Тогда
			Если Выборка.Дебет > 0 тогда
				Представление = "Принято";
			ИначеЕсли Выборка.Дебет < 0 тогда
				Представление = "Сторно: принято";
			ИначеЕсли Выборка.Кредит > 0 тогда
				Представление = "Передано";
			Иначе
				Представление = "Сторно: передано";
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.НомерВходящегоДокумента = Неопределено тогда
			Если Представление = "Продажа" И ТипЗнч(Выборка.ДокументРегистратор) <> Тип("ДокументСсылка.ОперацияБух") Тогда
				Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор,МассивПрефиксов) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
			Иначе
				Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
			КонецЕсли;
		Иначе
			Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +" от "+
			?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), "'  .  .    '", Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
		КонецЕсли;					  
		
		НоваяСтрока.Представление = Представление;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
	
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
		|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
		|	КОНЕЦ КАК ОстатокНаНачало
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаНачала,
		|			Счет В (&ФильтрСписокСчетов),
		|			&АналитикаРасчетов,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Валюта = &Валюта
		|				КОНЕЦ
		|				И Субконто1 = &Контрагент
		|				И ВЫБОР
		|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Субконто2 = &ДоговорКонтрагента
		|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало";
		
		ОстатокНаНачало = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаНачало");
		
	Иначе
		
		ОстатокНаНачало = 0;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания), 
		Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая), 
		Неопределено));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаКонец.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаКонец.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В (&ФильтрСписокСчетов),
	|			&АналитикаРасчетов,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 = &ДоговорКонтрагента
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаКонец";
	
	ОстатокНаКонец = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаКонец");
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,ДоговорКонтрагента,Представление,Валюта","Дебет, Кредит, ВалютнаяСумма");
		
		Для каждого СтрокаДвижений Из НаборДвижений Цикл
			
			Если СтрокаДвижений.ВалютнаяСумма > 0 Тогда
				СтрокаДвижений.Представление = СтрокаДвижений.Представление 
					+ " (" + Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма < 0 Тогда
				Множитель = ?( (СтрокаДвижений.Дебет + СтрокаДвижений.Кредит) > 0, -1, 1);
				СтрокаДвижений.Представление = СтрокаДвижений.Представление
				+ " (" + Формат(Множитель * СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,ДоговорКонтрагента,Представление","Дебет, Кредит"); 	
		
	КонецЕсли; 
	
	НаборДвижений.Сортировать("Дата,ДокументРегистратор,Представление");	
						  
	ПоДаннымОрганизации.Загрузить(НаборДвижений);

КонецПроцедуры

// Заполнение таблицы "По данным организации" по информации из бухгалтерского учета
Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета(ФильтрСписокСчетов = неопределено,ИсключитьДебетКредитРавныйНулю=Истина) Экспорт
	
	Если ФильтрСписокСчетов = Неопределено Тогда
		
		СписокСчетовСтрока = "";
		Для каждого СтрокаСчета Из СписокСчетов Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСчета.Счет) или СтрокаСчета.УчаствуетВРасчетах = Ложь Тогда
				Продолжить;
			Иначе
				СписокСчетовСтрока = СписокСчетовСтрока + ?(ПустаяСтрока(СписокСчетовСтрока), "", ", ") + Строка(СтрокаСчета.Счет);
			КонецЕсли; 
		КонецЦикла; 
		
		ФильтрСписокСчетов = БухгалтерскийУчет.ПолучитьМассивСчетов("Хозрасчетный", СписокСчетовСтрока);
		
		Если ФильтрСписокСчетов.Количество() = 0 Тогда
		    ОбщегоНазначения.СообщитьОбОшибке("Неверно задан список счетов, по которым производится сверка!",,,СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		СписокСчетовСтрока = "";
		Для Каждого Счет ИЗ ФильтрСписокСчетов Цикл
			СписокСчетовСтрока = СписокСчетовСтрока + ?(ПустаяСтрока(СписокСчетовСтрока), "", ", ") + Строка(Счет);
		КонецЦикла;
		
		ФильтрСписокСчетов = БухгалтерскийУчет.ПолучитьМассивСчетов("Хозрасчетный", СписокСчетовСтрока);
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ?(НЕ ЗначениеЗаполнено(ДатаНачала),    Неопределено, ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", ?(НЕ ЗначениеЗаполнено(ДатаОкончания), Неопределено, КонецДня(ДатаОкончания)));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	Запрос.УстановитьПараметр("Валюта",        ?(НЕ ЗначениеЗаполнено(ВалютаДокумента) или (ВалютаДокумента = мВалютаРегламентированногоУчета), неопределено,ВалютаДокумента));
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", ФильтрСписокСчетов);
	
	АналитикаРасчетов = новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("АналитикаРасчетов",    АналитикаРасчетов);
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ?(НЕ ЗначениеЗаполнено(ДоговорКонтрагента),Неопределено,ДоговорКонтрагента));
	
	//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//конец изменений 
	
	//{31.03.2016 Островерхий заявка №50883 
	Запрос.УстановитьПараметр("ИсключитьДебетКредитРавныйНулю",    ИсключитьДебетКредитРавныйНулю); 
	//31.03.2016 Островерхий} 
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
//	|	ХозрасчетныйОбороты.Регистратор.Дата КАК Дата,
//конец изменений 	
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументРегистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК Кредит,
//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
//	|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
//	|	ЕСТЬNULL(ХозрасчетныйОбороты.Регистратор.ДатаВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
//конец изменений 	
	//m.ionov@a-prof.ru 09.04.2014
	//|	ХозрасчетныйОбороты.КорСчет,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.КорСчет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК КорСчет,
	//----m.ionov@a-prof.ru---
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ХозрасчетныйОбороты.Валюта,
	|	ХозрасчетныйОбороты.ВалютнаяСуммаОборот,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1.ВидПрочихДоходовИРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПрочихДоходовИРасходов,
	|	ХозрасчетныйОбороты.Счет
	|ПОМЕСТИТЬ ВременнаяТаблицаДанных
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В (&ФильтрСписокСчетов),,
	//|			&АналитикаРасчетов, //m.ionov@a-prof.ru 09.04.2014
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 = &ДоговорКонтрагента
	|				КОНЕЦ,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&ФильтрСписокСчетов)
	|				ТОГДА ВЫБОР
	|						КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	////                          <- Шевченков 20170302 #62030
	//|                           И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаДолга
	////                          ->
	|							ТОГДА "+?(НЕ ИсключитьДебетКредитРавныйНулю," НЕ ХозрасчетныйОбороты.КорСубконто2 = ХозрасчетныйОбороты.Субконто2"," НЕ ХозрасчетныйОбороты.КорСубконто1 = &Контрагент")+"
	|						ИНАЧЕ НЕ(ХозрасчетныйОбороты.КорСубконто1 = &Контрагент
	|									И ХозрасчетныйОбороты.КорСубконто2 = &ДоговорКонтрагента
	|							и ВЫБОР КОГДА &Валюта = НЕОПРЕДЕЛЕНО тогда Истина
	|								ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборот = 0 Конец
	|                             )
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ(ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ = 0
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|					ИНАЧЕ ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ = 0)
//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
	|;";
	
	Запрос.Выполнить();
	
	Запрос.Текст = ПРГ_ПолучитьТекстЗапросаПоОгрДокам(Запрос);
	Запрос.Выполнить();
	
	//Запрос.Текст  = "Выбрать * из ПРГ_ТаблДок";
	//Запрос.Выполнить().Выгрузить().ВыбратьСтроку();

	
	Запрос.Текст = "
//конец изменений 	
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
//	|	ВременнаяТаблицаДанных.Дата,
	|   ПРГ_ТаблДок.Дата КАК  Дата,	
	|   ПРГ_ТаблДок.Номер КАК Номер,
	// <- Шевченков 56492 20160908
	|   ПРГ_ТаблДок.Комментарий как Комментарий,
	// ->
	|   ПРГ_ТаблДок.АдресПоставки КАК АдресПоставки,
	|   ПРГ_ТаблДок.ДокументРегистратор_ПКК_АктНачисленияБонусов КАК ДокументРегистратор_ПКК_АктНачисленияБонусов,
	|   ПРГ_ТаблДок.ДокументРегистратор_ПКК_АктНачисленияБонусов_Номер КАК ДокументРегистратор_ПКК_АктНачисленияБонусов_Номер,
	|   ПРГ_ТаблДок.ДокументРегистратор_ПКК_АктНачисленияБонусов_Дата КАК ДокументРегистратор_ПКК_АктНачисленияБонусов_Дата,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументОснование КАК ДокументРегистратор_ДокументОснование,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументОснование_Номер КАК ДокументРегистратор_ДокументОснование_Номер,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументРеализации КАК ДокументРегистратор_ДокументРеализации,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументОснование_ДокументРеализации КАК ДокументРегистратор_ДокументОснование_ДокументРеализации,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументОснование_ДокументРеализации_Номер КАК ДокументРегистратор_ДокументОснование_ДокументРеализации_Номер,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументОснование_Накладная КАК ДокументРегистратор_ДокументОснование_Накладная,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументОснование_Накладная_Номер КАК ДокументРегистратор_ДокументОснование_Накладная_Номер,
//конец изменений 	
	|	ВременнаяТаблицаДанных.ДокументРегистратор,
	|	ВременнаяТаблицаДанных.Договор,
	|	СУММА(ВременнаяТаблицаДанных.Дебет) КАК Дебет,
	|	СУММА(ВременнаяТаблицаДанных.Кредит) КАК Кредит,
//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
//	|	ВременнаяТаблицаДанных.НомерВходящегоДокумента,
//	|	ВременнаяТаблицаДанных.ДатаВходящегоДокумента,
	|   ЕстьNull(ПРГ_ТаблДок.НомерВходящегоДокумента,Неопределено) КАК НомерВходящегоДокумента,
	|   ЕстьNull(ПРГ_ТаблДок.ДатаВходящегоДокумента,Неопределено)  КАК ДатаВходящегоДокумента,
//конец изменений 	
	|	ВременнаяТаблицаДанных.КорСчет,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаДанных.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы) КАК КорСубконто1,
	|	ВременнаяТаблицаДанных.Валюта,
	|	СУММА(ВременнаяТаблицаДанных.ВалютнаяСуммаОборот) КАК ВалютнаяСуммаОборот,
	|	ВременнаяТаблицаДанных.ВидПрочихДоходовИРасходов,
	|	ВременнаяТаблицаДанных.Счет
	|ИЗ
	|	ВременнаяТаблицаДанных КАК ВременнаяТаблицаДанных
//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
	| 	Левое СОЕДИНЕНИЕ ПРГ_ТаблДок
	| 	По ВременнаяТаблицаДанных.ДокументРегистратор = ПРГ_ТаблДок.Ссылка
//конец изменений 	
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаДанных.Договор,
//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
//	|	ВременнаяТаблицаДанных.НомерВходящегоДокумента,
//	|	ВременнаяТаблицаДанных.ДатаВходящегоДокумента,
	|   ЕстьNull(ПРГ_ТаблДок.НомерВходящегоДокумента,Неопределено),
	|   ЕстьNull(ПРГ_ТаблДок.ДатаВходящегоДокумента,Неопределено) ,
//конец изменений 	
	|	ВременнаяТаблицаДанных.КорСчет,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаДанных.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы),
	|	ВременнаяТаблицаДанных.Валюта,
	|	ВременнаяТаблицаДанных.ВидПрочихДоходовИРасходов,
	|	ВременнаяТаблицаДанных.Счет,
//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
//	|	ВременнаяТаблицаДанных.Дата,
	|   ПРГ_ТаблДок.Дата,	
	|   ПРГ_ТаблДок.Номер,
	// <- Шевченков 56492 20160908
	|   ПРГ_ТаблДок.Комментарий,
	// ->
	|   ПРГ_ТаблДок.АдресПоставки,
	|   ПРГ_ТаблДок.ДокументРегистратор_ПКК_АктНачисленияБонусов,
	|   ПРГ_ТаблДок.ДокументРегистратор_ПКК_АктНачисленияБонусов_Номер,
	|   ПРГ_ТаблДок.ДокументРегистратор_ПКК_АктНачисленияБонусов_Дата,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументОснование,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументОснование_Номер,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументРеализации,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументОснование_ДокументРеализации,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументОснование_ДокументРеализации_Номер,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументОснование_Накладная,
	|   ПРГ_ТаблДок.ДокументРегистратор_ДокументОснование_Накладная_Номер,
//конец изменений 	
	|	ВременнаяТаблицаДанных.ДокументРегистратор
	|
	|ИМЕЮЩИЕ НЕ(СУММА(ВременнаяТаблицаДанных.Дебет) = 0 И СУММА(ВременнаяТаблицаДанных.Кредит) = 0)  
	|
	|УПОРЯДОЧИТЬ ПО
	//|	ВременнаяТаблицаДанных.Дата,
	|   ПРГ_ТаблДок.Дата,
	|	ВременнаяТаблицаДанных.ДокументРегистратор";
	
	//начало изменений Ожиганов 27.05.2015 Ошибка по взаиморасчетам в валюте	 
	//Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблИтоговЗнч = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(ВалютаДокумента) и (ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда
		ТаблИтоговЗнч.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
		ТаблИтоговЗнч.ЗаполнитьЗначения("Ложь","Обработано");
		СтруктПоиска = Новый Структура("Счет,КорСчет,ДокументРегистратор,Валюта,Обработано");
		к = 0;
		Пока к < ТаблИтоговЗнч.Количество() Цикл
			ТекСтрока  = ТаблИтоговЗнч[к];
			ТекСтрока.Обработано = Истина;
			Если ФильтрСписокСчетов.НайтиПоЗначению(ТекСтрока.Счет) = Неопределено
			  и ФильтрСписокСчетов.НайтиПоЗначению(ТекСтрока.КорСчет) = Неопределено Тогда
			  продолжить;
			КонецЕсли;	  
				
			СтруктПоиска.Валюта		  = ТекСтрока.Валюта;
			СтруктПоиска.Счет         = ТекСтрока.КорСчет;
			СтруктПоиска.КорСчет      = ТекСтрока.Счет;
			СтруктПоиска.ДокументРегистратор  = ТекСтрока.ДокументРегистратор;
			СтруктПоиска.Обработано	  = Ложь;
			НайдСтроки = ТаблИтоговЗнч.НайтиСтроки(СтруктПоиска);
			к = к +1;
			Если НайдСтроки.Количество() =  0 Тогда 
				продолжить;
			КонецЕсли;	
			Если НайдСтроки.Количество() >  0 Тогда
				Для Каждого текЭлем Из НайдСтроки Цикл
					ТекСтрока.Дебет  = ТекСтрока.Дебет  + текЭлем.Дебет;
					ТекСтрока.Кредит = ТекСтрока.Кредит + текЭлем.Кредит;
				КонецЦикла;	
				Для Каждого текЭлем Из НайдСтроки Цикл
					ТаблИтоговЗнч.Удалить(текЭлем);
				КонецЦикла;	
			КонецЕсли;	
			Оборот = ТекСтрока.Дебет-ТекСтрока.Кредит;
			Если Оборот = 0 Тогда
				ТаблИтоговЗнч.Удалить(ТекСтрока);
				продолжить;
			КонецЕсли;
			ТекСтрока.ВалютнаяСуммаОборот = Оборот;
			
			Если Оборот < 0 Тогда
				ТекСтрока.Дебет  = 0;
				ТекСтрока.Кредит = -1*Оборот;
			Иначе
				ТекСтрока.Дебет  = Оборот;
				ТекСтрока.Кредит = 0;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	//конец изменений  
	
	НаборДвижений = ПоДаннымОрганизации.Выгрузить();
	НаборДвижений.Колонки.Добавить("Валюта", Новый описаниеТипов("СправочникСсылка.Валюты"));
	НаборДвижений.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	
	МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	//начало изменений Ожиганов 27.05.2015 Ошибка по взаиморасчетам в валюте	 
	//Пока Выборка.Следующий() Цикл
	Для Каждого Выборка ИЗ  ТаблИтоговЗнч Цикл
    //конец изменений  	
	
		//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
		#Если Клиент Тогда
		   ОбработкаПрерыванияПользователя();
		#КонецЕсли 
	    //конец изменений 
	 
		
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.ДокументРегистратор= Выборка.ДокументРегистратор;
		НоваяСтрока.Дата               = Выборка.Дата;
		НоваяСтрока.Дебет              = Выборка.Дебет;
		НоваяСтрока.Кредит             = Выборка.Кредит;
		НоваяСтрока.Валюта             = Выборка.Валюта;
		НоваяСтрока.ВалютнаяСумма      = Выборка.ВалютнаяСуммаОборот;
		НоваяСтрока.ДоговорКонтрагента = Выборка.Договор;
		
		МетаданныеДокумента = ПолучитьМетаданныеДокумента(Выборка.ДокументРегистратор);
		//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
		НоваяСтрока.ПКК_ВидДокумента		= МетаданныеДокумента.Синоним;
		НоваяСтрока.ПКК_АдресДоставки		= Выборка.АдресПоставки;
		//конец изменений 
		 
		
		// Сформируем строку представления
		Представление = "";
		
		//m.ionov@a-prof.ru 09.04.2014
		Если Не ЗначениеЗаполнено(Выборка.КорСчет) Тогда
			Если (Выборка.Дебет >0) Тогда
				Представление = "Поступление тары";
			Иначе
				Представление = "Возврат тары";	
			КонецЕсли;
		//----m.ionov@a-prof.ru---
		ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда 
			
			Если НЕ ЗначениеЗаполнено(Выборка.ВидпрочихДоходовИРасходов) Тогда
				
			ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
				Представление = "Курсовые разницы";
			ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
				Представление = "Санкции";
			ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы Тогда
				Представление = "Суммовые разницы";
			ИначеЕсли Выборка.КорСубконто1 = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ Тогда
				Представление = "Курсовые разницы по расчетам в у.е";
			КонецЕсли;
			
		КонецЕсли;
		
		Если не ПустаяСтрока(Представление) Тогда
			// Строка уже отработана
			
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
			Если (Выборка.Дебет >0) Тогда
				Представление = "Возврат займа";
			ИначеЕсли (Выборка.Кредит >0)Тогда
				Представление = "Займ";
			Иначе
				Представление = "Операции по займам";
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
			или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям
			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
			или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал
			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) 
			или Выборка.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ
			тогда
 			Представление = "Претензия";
			
		ИначеЕсли Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Касса) 
			или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
			или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.РасчетныеСчета
			или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
			или Выборка.КорСчет = ПланыСчетов.Хозрасчетный.ВалютныеСчета
			или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпециальныеСчета) 
			тогда
			
			Если (Выборка.Кредит >0) Тогда
				
				Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) Тогда
					Представление = "Возврат средств";
					
				ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
					Представление = "Оплата";
					
				Иначе
					Представление = "Перевод средств";
				КонецЕсли;
				
			ИначеЕсли (Выборка.Дебет >0) Тогда
				Если Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
					или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
					Тогда
					
					Представление = "Оплата";
					
				ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
					Представление = "Возврат средств";
					
				Иначе
					Представление = "Перевод средств";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
			или Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
			тогда
			Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
				или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
				Если Выборка.Дебет <> 0 Тогда
					Представление = "Оплата";
				Иначе
					Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
						Представление = "Корректировка прихода";
					/// Кунов О.В., 08.09.2015 - 42346, 08.10.2015 - 44692
				ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И
					//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
					//ЗначениеЗаполнено(Выборка.ДокументРегистратор.ПКК_АктНачисленияБонусов) И
					ЗначениеЗаполнено(Выборка.ДокументРегистратор_ПКК_АктНачисленияБонусов) И
					//конец изменений 	
						Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
						Тогда
						Представление = "Бонусный акт";
					///
					Иначе
						Представление = "Приход";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли (Выборка.Кредит <>0) Тогда
				Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
					Представление = "Корректировка прихода";
				/// Кунов О.В., 08.09.2015 - 42346, 08.10.2015 - 44692
			ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И
				//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
					//ЗначениеЗаполнено(Выборка.ДокументРегистратор.ПКК_АктНачисленияБонусов) И
					ЗначениеЗаполнено(Выборка.ДокументРегистратор_ПКК_АктНачисленияБонусов) И
					//конец изменений 
					Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
					Тогда
					Представление = "Бонусный акт";
				///
				Иначе
					Представление = "Приход";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Выборка.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
			Если Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
				или Выборка.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Продажи) Тогда
				Если ЭтоДокументДвиженияДенежныхСредств(Выборка.ДокументРегистратор) Тогда
					Представление = "Суммовая разница";
				ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					Представление = "Корректировка продажи";
				ИначеЕсли ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
					Представление = "Продажа";
				Иначе
					Если Выборка.Дебет > 0 Тогда
						Представление = "Продажа";
					ИначеЕсли Выборка.Дебет < 0 Тогда
						Представление = "Возврат";
					Иначе
						Представление = "Оплата";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					Представление = "Корректировка продажи";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Представление)Тогда
			Если Выборка.Дебет > 0 тогда
				Представление = "Принято";
			ИначеЕсли Выборка.Дебет < 0 тогда
				Представление = "Сторно: принято";
			ИначеЕсли Выборка.Кредит > 0 тогда
				Представление = "Передано";
			Иначе
				Представление = "Сторно: передано";
			КонецЕсли;
		КонецЕсли;
		
		//начало изменений Ожиганов 29.05.2015 письмо от Марины Кулик 29.05.2015
		Если (Представление = "Приход" или Представление = "Расход" )
			и ТипЗнч(Выборка.ДокументРегистратор) =  Тип("ДокументСсылка.КорректировкаДолга")
			Тогда
			Представление = "Корректировка";
		КонецЕсли;	
		//конец изменений  
				
		Если Выборка.НомерВходящегоДокумента = Неопределено тогда
			
			ДокументРегистратор = Выборка.ДокументРегистратор;
			ТипРегистратора = ТипЗнч(ДокументРегистратор);
				
			Если Представление = "Продажа" И ТипЗнч(ДокументРегистратор) <> Тип("ДокументСсылка.ОперацияБух") Тогда
				//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
				//Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументРегистратор,МассивПрефиксов) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументРегистратор,МассивПрефиксов,Выборка.Номер) + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				//конец изменений 
				/// Кунов О.В., 07.12.2015 - 46602
				Если ТипЗнч(ДокументРегистратор) = Тип("ДокументСсылка.ПРГ_СторноНакладной") Тогда
					Если ТипЗнч(ДокументРегистратор.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
						//НомерНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументРегистратор.ДокументОснование);
						НомерНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор_ДокументОснование,,Выборка.ДокументРегистратор_ДокументОснование_Номер);
						//конец изменений 
					Иначе // ДокументСсылка.КорректировкаРеализации
						//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
						//НомерНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументРегистратор.ДокументОснование.ДокументРеализации);
						НомерНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор_ДокументОснование_ДокументРеализации,,Выборка.ДокументРегистратор_ДокументОснование_ДокументРеализации_Номер);
						//конец изменений 
					КонецЕсли;
					Представление = Представление + ", накл. № " + НомерНакладной;
				КонецЕсли;
				///
			/// Кунов О.В., 08.09.2015 - 42346, 08.10.2015 - 44692
			ИначеЕсли Представление = "Бонусный акт" Тогда
			    //начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
				//Представление = "Приход " + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор) +
				//	" (" + Представление + " " + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор.ПКК_АктНачисленияБонусов) +
				//	" от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
					
				Представление = "Приход " + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор,МассивПрефиксов,Выборка.Номер) +
					" (" + Представление + " " + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор_ПКК_АктНачисленияБонусов,,Выборка.ДокументРегистратор_ПКК_АктНачисленияБонусов_Номер) +
					" от " + Формат(Выборка.ДокументРегистратор_ПКК_АктНачисленияБонусов_Дата, "ДФ=dd.MM.yyyy") + ")";
					
				//конец изменений 	
			///
			Иначе
				//m.ionov@a-prof.ru 12.11.2014
				//Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				Если ТипЗнч(Выборка.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
					//СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Выборка.ДокументРегистратор.ДокументРеализации.Ссылка, "СчетФактураВыданный", Неопределено); 
					СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Выборка.ДокументРегистратор_ДокументРеализации, "СчетФактураВыданный", Неопределено); 
					//конец изменений 
					//{17.04.2015 Островерхий заявка №38550
					тДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Выборка.ДокументРегистратор,Истина);
					//Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(СчетФактура,МассивПрефиксов) + " от " + Формат(?(СчетФактура = Неопределено,Выборка.Дата,СчетФактура.Дата), "ДФ=dd.MM.yyyy") + ")"; 
					//{23.04.2015 Островерхий заявка №39232 
					//Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(тДокументРеализации,МассивПрефиксов) + " от " + Формат(?(тДокументРеализации = Неопределено,Выборка.Дата,СчетФактура.Дата), "ДФ=dd.MM.yyyy") + ")";
					Если ЗначениеЗаполнено(тДокументРеализации) Тогда
						//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
						//Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(тДокументРеализации,МассивПрефиксов) + " от " + Формат(тДокументРеализации.Дата, "ДФ=dd.MM.yyyy") + ")";
						ПРГ_Рекв = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(тДокументРеализации,Новый Структура("Номер"));
						Представление = Представление + " (" + ОбщегоНазначения.ПолучитьНомерНаПечать(тДокументРеализации,МассивПрефиксов,ПРГ_Рекв.Номер) + " от " + Формат(тДокументРеализации.Дата, "ДФ=dd.MM.yyyy") + ")";
						//конец изменений 
					КонецЕсли; 
					//23.04.2015 Островерхий} 
					//17.04.2015 Островерхий} 
				/// Кунов О.В., 12.03.2015 - 37574
				ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.КорректировкаЗаписейРегистров") Тогда
					ЗаполнениеДвижений = ДокументРегистратор.ЗаполнениеДвижений;
					Если ЗаполнениеДвижений.Количество() > 0 Тогда
						//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
						//НомерНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(ЗаполнениеДвижений[0].Документ);
						ПРГ_Док = ЗаполнениеДвижений[0].Документ;
						Если ЗначениеЗаполнено(ПРГ_Док) Тогда
						    ПРГ_Рекв = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(ПРГ_Док,Новый Структура("Номер"));
							НомерНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(ПРГ_Док,МассивПрефиксов,ПРГ_Рекв.Номер);
						Иначе	
							
							НомерНакладной = "";
						КонецЕсли;	
						//конец изменений 
					Иначе
						НомерНакладной = "";
					КонецЕсли;
					Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + "), накл. № " + НомерНакладной;
				ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.ПРГ_СторноНакладной") Тогда
					Если ТипЗнч(ДокументРегистратор.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
						//НомерНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументРегистратор.ДокументОснование);
						НомерНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор_ДокументОснование,МассивПрефиксов,Выборка.ДокументРегистратор_ДокументОснование_Номер);
						//конец изменений 
					Иначе // ДокументСсылка.КорректировкаРеализации
						//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
						//НомерНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументРегистратор.ДокументОснование.ДокументРеализации);
						НомерНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор_ДокументОснование_ДокументРеализации,МассивПрефиксов,Выборка.ДокументРегистратор_ДокументОснование_ДокументРеализации_Номер);
						//конец изменений 
					КонецЕсли;
					Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + "), накл. № " + НомерНакладной;
				///
				/// Кунов О.В., 30.11.2015 - 46405
				//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
//				ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.КорректировкаДолга") И ТипЗнч(ДокументРегистратор.ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") И
//					ТипЗнч(ДокументРегистратор.ДокументОснование.Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ИначеЕсли ТипРегистратора = Тип("ДокументСсылка.КорректировкаДолга") И ТипЗнч(Выборка.ДокументРегистратор_ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") И
					ТипЗнч(Выборка.ДокументРегистратор_ДокументОснование_Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				//конец изменений 	
					//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
					//НомерНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументРегистратор.ДокументОснование.Накладная);
					//Представление = Представление + " (" + НомерНакладной + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
					НомерНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор_ДокументОснование_Накладная,МассивПрефиксов,Выборка.ДокументРегистратор_ДокументОснование_Накладная_Номер);
					Представление = Представление + " (" + НомерНакладной + " от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
					//конец изменений 
				///
					
				Иначе
					Представление = Представление + " ("+Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				КонецЕсли;
				//----m.ionov@a-prof.ru---
			КонецЕсли;
		/// Кунов О.В., 08.09.2015 - 42346, 08.10.2015 - 44692
	   ИначеЕсли Представление = "Бонусный акт" Тогда
		    //начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
			//Представление = "Приход " + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор) +
			//	" (" + Представление + " " + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор.ПКК_АктНачисленияБонусов) +
			//	" от " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy") + ")";
				
			Представление = "Приход " + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор,МассивПрефиксов,Выборка.Номер) +
				" (" + Представление + " " + ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.ДокументРегистратор_ПКК_АктНачисленияБонусов,МассивПрефиксов,Выборка.ДокументРегистратор_ПКК_АктНачисленияБонусов_Номер) +
				" от " + Формат(Выборка.ДокументРегистратор_ПКК_АктНачисленияБонусов_Дата, "ДФ=dd.MM.yyyy") + ")";
				
			//конец изменений 	
		///
		Иначе
			Представление = Представление +" ("+ ?(НЕ ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента),"_______", Выборка.НомерВходящегоДокумента) +" от "+
			?(НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента), "'  .  .    '", Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"))+")";
		КонецЕсли;
		
		Если ТипЗнч(Выборка.ДокументРегистратор) =  Тип("ДокументСсылка.КорректировкаДолга") Тогда
			Представление = Представление + " (" + Выборка.Комментарий + ")";
		КонецЕсли;
		
		НоваяСтрока.Представление = Представление;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
	
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|			ТОГДА ХозрасчетныйОстаткиНаНачало.СуммаОстаток
		|		ИНАЧЕ ХозрасчетныйОстаткиНаНачало.ВалютнаяСуммаОстаток
		|	КОНЕЦ КАК ОстатокНаНачало
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаНачала,
		|			Счет В (&ФильтрСписокСчетов),,
		//|			&АналитикаРасчетов, //m.ionov@a-prof.ru 09.04.2014
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Валюта = &Валюта
		|				КОНЕЦ
		|				И Субконто1 = &Контрагент
		|				И ВЫБОР
		|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Субконто2 = &ДоговорКонтрагента
		|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаНачало";
		
		ОстатокНаНачало = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаНачало");
		
	Иначе
		
		ОстатокНаНачало = 0;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания), 
		Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая), 
		Неопределено));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ХозрасчетныйОстаткиНаКонец.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиНаКонец.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК ОстатокНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В (&ФильтрСписокСчетов),,
	//|			&АналитикаРасчетов, //m.ionov@a-prof.ru 09.04.2014
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &Валюта = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Валюта = &Валюта
	|				КОНЕЦ
	|				И Субконто1 = &Контрагент
	|				И ВЫБОР
	|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 = &ДоговорКонтрагента
	|				КОНЕЦ) КАК ХозрасчетныйОстаткиНаКонец";
	
	ОстатокНаКонец = Запрос.Выполнить().Выгрузить().Итог("ОстатокНаКонец");
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		
		//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
		//НаборДвижений.Свернуть("Дата,ДокументРегистратор,ДоговорКонтрагента,Представление,Валюта","Дебет, Кредит, ВалютнаяСумма");
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,ДоговорКонтрагента,Представление,Валюта,ПКК_ВидДокумента,ПКК_АдресДоставки","Дебет, Кредит, ВалютнаяСумма");
		//конец изменений 
		
		Для каждого СтрокаДвижений Из НаборДвижений Цикл
			
			Если СтрокаДвижений.ВалютнаяСумма > 0 Тогда
				СтрокаДвижений.Представление = СтрокаДвижений.Представление 
					+ " (" + Формат(СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			ИначеЕсли СтрокаДвижений.ВалютнаяСумма < 0 Тогда
				Множитель = ?( (СтрокаДвижений.Дебет + СтрокаДвижений.Кредит) > 0, -1, 1);
				СтрокаДвижений.Представление = СтрокаДвижений.Представление
				+ " (" + Формат(Множитель * СтрокаДвижений.ВалютнаяСумма, "ЧЦ=15; ЧДЦ=2") + " " + Строка(СтрокаДвижений.Валюта) + ")";
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
		//НаборДвижений.Свернуть("Дата,ДокументРегистратор,ДоговорКонтрагента,Представление","Дебет, Кредит"); 	
		НаборДвижений.Свернуть("Дата,ДокументРегистратор,ДоговорКонтрагента,Представление,ПКК_ВидДокумента,ПКК_АдресДоставки","Дебет, Кредит"); 	
		//конец изменений 
		
	КонецЕсли; 
	
	НаборДвижений.Сортировать("Дата,ДокументРегистратор,Представление");	
	//Blik 37899 н 200315  
		СписокТипов = Новый Массив;
    СписокТипов.Добавить("ДокументССылка.СчетФактураВыданный");
    СписокТипов.Добавить("ДокументССылка.СчетФактураПолученный");
	ОписаниеСоставногоТипа = Новый ОписаниеТипов(СписокТипов);
	НаборДвижений.Колонки.Добавить("СчетФактура",ОписаниеСоставногоТипа);
	
	для каждого стр из НаборДвижений Цикл
		Если ТипЗнч(стр.ДокументРегистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
			Или ТипЗнч(стр.ДокументРегистратор) = Тип("ДокументСсылка.КорректировкаРеализации")	
			Тогда
			
			текдог = стр.ДокументРегистратор;
			СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(текдог, "СчетФактураВыданный");
			стр.СчетФактура =  СчетФактура;
		ИначеЕсли ТипЗнч(стр.ДокументРегистратор) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда	
			текдог = стр.ДокументРегистратор;
			СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(текдог, "СчетФактураПолученный");
			стр.СчетФактура =  СчетФактура;
		КонецЕсли;
	КонецЦикла;
	
	//Blik 37899 к 200315
					  
	ПоДаннымОрганизации.Загрузить(НаборДвижений);

КонецПроцедуры

// Получение метаданных по документам
// Если метаданные по данному виду документа получались ранее - получаем из соответствия,
// иначе получаем метаданные и дополняем соответствие
// Параметры
//  ДокументСсылка  – <ДокументСсылка> – ссылка на документ
//
// Возвращаемое значение:
//   Структура метаданных
//
Функция ПолучитьМетаданныеДокумента(ДокументСсылка)
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если МетаданныеПоДокументам[ТипДокумента] = Неопределено Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипДокумента) Тогда
			МетаданныеПоДокументам.Вставить(ТипДокумента, ДокументСсылка.Метаданные());
		Иначе
			МетаданныеПоДокументам.Вставить(ТипДокумента, Неопределено);
		КонецЕсли;
	КонецЕсли; 
	
    Возврат МетаданныеПоДокументам[ТипДокумента];
	
КонецФункции // ПолучитьМетаданныеДокумента()

Процедура ЗаполнитьПоДаннымОрганизации() Экспорт
	
	ТабЗнач = ПоДаннымОрганизации.Выгрузить();
	
	ТабЗнач.Колонки.Дебет.Имя  = "КредитК";
	ТабЗнач.Колонки.Кредит.Имя = "Дебет";
	ТабЗнач.Колонки.КредитК.Имя= "Кредит";
	
	Для каждого СтрокаДвижений Из ТабЗнач Цикл
		Представление = СокрЛП(СтрокаДвижений.Представление);
		Если Лев(Представление, 8) = "Передано" Тогда
			Представление = "Принято" + Сред(Представление, 9);
			
		ИначеЕсли Лев(Представление, 7) = "Принято" Тогда
			Представление = "Передано" + Сред(Представление, 8);

		ИначеЕсли Лев(Представление, 7) = "Продажа" Тогда
			Представление = "Приход" + Сред(Представление, 8);

		ИначеЕсли Лев(Представление, 6) = "Приход" Тогда
			Представление = "Продажа" + Сред(Представление, 7);
			
		ИначеЕсли Лев(Представление, 21) = "Корректировка продажи" Тогда
			Представление = "Корректировка прихода" + Сред(Представление, 22);
			
		ИначеЕсли Лев(Представление, 21) = "Корректировка прихода" Тогда
			Представление = "Корректировка продажи" + Сред(Представление, 22);
			
		КонецЕсли;
		СтрокаДвижений.Представление = Представление;
	КонецЦикла;
	
	ПоДаннымКонтрагента.Загрузить(ТабЗнач);
	
КонецПроцедуры

// bolshevykh@a-prof.ru 28.08.2014 13:56
// Вносим данные в регистр если заполнена дата
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// регистр АктыСверкиСКонтрагентом
	Движения.ПКК_АктыСверкиСКонтрагентом.Очистить();
	
	Для Каждого ТекСтрокаИторияСверки Из ПКК_ИсторияСверки Цикл
		Если  ТекСтрокаИторияСверки.Дата <> Дата(01,01,01) Тогда
			Движение = Движения.ПКК_АктыСверкиСКонтрагентом.Добавить();
			Движение.Период = ТекСтрокаИторияСверки.Дата+ТекСтрокаИторияСверки.НомерСтроки;
			Движение.Контрагент = Контрагент;
			Движение.Акт = ЭтотОбъект.Ссылка;
			//{30.03.2016 Островерхий заявка №50520 
			Движение.График = ПРГГрафикПроведенияСверок; 
			//30.03.2016 Островерхий} 
			Движение.Организация = Организация;
			Движение.ДоговорКонтрагента = ДоговорКонтрагента;
			Движение.Корректировка = ПКК_АктСверки;
			Движение.ВидИсторииСверки = ТекСтрокаИторияСверки.ВидИсторииСверки;
			Движение.Ответственный = ТекСтрокаИторияСверки.Ответственный;
			Движение.ПериодС = ДатаНачала;
			Движение.ПериодПо = ДатаОкончания;
			Движение.СверкаСогласована = СверкаСогласована;
		КонецЕсли;
	КонецЦикла;
	
	// регистр ПКК_ЗакрытыеАктыСверки
	Движения.ПКК_ЗакрытыеАктыСверки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДокументРегистратор КАК ДокументРегистратор
	               |ПОМЕСТИТЬ Т_Итого
	               |ИЗ
	               |	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	               |ГДЕ
	               |	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	               |	И АктСверкиВзаиморасчетовПоДаннымОрганизации.ПКК_Проблемная = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Т_Итого.ДокументРегистратор
	               |ИЗ
	               |	Т_Итого КАК Т_Итого
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Т_Итого.ДокументРегистратор";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если СверкаСогласована Тогда
		
		Для Каждого ТекСтрока Из Результат Цикл
			
			НоваяСтрока = Движения.ПКК_ЗакрытыеАктыСверки.Добавить();
			НоваяСтрока.Регистратор = Ссылка;
			НоваяСтрока.ДокументРегистратор = ТекСтрока.ДокументРегистратор;
			НоваяСтрока.Период = Дата;
			
		КонецЦикла;		
		
	КонецЕсли; 
	
КонецПроцедуры

// bolshevykh@a-prof.ru 12.09.2014 14:00
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда
		// Заполнение шапки
		ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
		ДатаНачала = ДанныеЗаполнения.ДатаНачала;
		ДатаОкончания = ДанныеЗаполнения.ДатаОкончания;
		ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
		//Комментарий = ДанныеЗаполнения.Комментарий;
		Контрагент = ДанныеЗаполнения.Контрагент;
		Организация = ДанныеЗаполнения.Организация;
		ОстатокНаНачало = ДанныеЗаполнения.ОстатокНаНачало;
		Ответственный = ДанныеЗаполнения.Ответственный;
		ПКК_ПоказыватьАдресДоставки = ДанныеЗаполнения.ПКК_ПоказыватьАдресДоставки;
		ПКК_ПоказыватьВидДокумента = ДанныеЗаполнения.ПКК_ПоказыватьВидДокумента;
		ПредставительКонтрагента = ДанныеЗаполнения.ПредставительКонтрагента;
		ПредставительОрганизации = ДанныеЗаполнения.ПредставительОрганизации;
		Расхождение = ДанныеЗаполнения.Расхождение;
		СверкаСогласована = ДанныеЗаполнения.СверкаСогласована;
		Сделка = ДанныеЗаполнения.Сделка;
		ПКК_АктСверки = ДанныеЗаполнения.Ссылка;
		ПКК_Корректировка = истина;
		Для Каждого ТекСтрокаПоДаннымКонтрагента Из ДанныеЗаполнения.ПоДаннымКонтрагента Цикл
			НоваяСтрока = ПоДаннымКонтрагента.Добавить();
			НоваяСтрока.Дата = ТекСтрокаПоДаннымКонтрагента.Дата;
			НоваяСтрока.Дебет = ТекСтрокаПоДаннымКонтрагента.Дебет;
			НоваяСтрока.ДоговорКонтрагента = ТекСтрокаПоДаннымКонтрагента.ДоговорКонтрагента;
			НоваяСтрока.ДокументРегистратор = ТекСтрокаПоДаннымКонтрагента.ДокументРегистратор;
			НоваяСтрока.Кредит = ТекСтрокаПоДаннымКонтрагента.Кредит;
			НоваяСтрока.Представление = ТекСтрокаПоДаннымКонтрагента.Представление;
			НоваяСтрока.Сделка = ТекСтрокаПоДаннымКонтрагента.Сделка;
		КонецЦикла;
		Для Каждого ТекСтрокаПоДаннымОрганизации Из ДанныеЗаполнения.ПоДаннымОрганизации Цикл
			НоваяСтрока = ПоДаннымОрганизации.Добавить();
			НоваяСтрока.Дата = ТекСтрокаПоДаннымОрганизации.Дата;
			НоваяСтрока.Дебет = ТекСтрокаПоДаннымОрганизации.Дебет;
			НоваяСтрока.ДоговорКонтрагента = ТекСтрокаПоДаннымОрганизации.ДоговорКонтрагента;
			НоваяСтрока.ДокументРегистратор = ТекСтрокаПоДаннымОрганизации.ДокументРегистратор;
			НоваяСтрока.Кредит = ТекСтрокаПоДаннымОрганизации.Кредит;
			НоваяСтрока.ПКК_АдресДоставки = ТекСтрокаПоДаннымОрганизации.ПКК_АдресДоставки;
			НоваяСтрока.ПКК_ВидДокумента = ТекСтрокаПоДаннымОрганизации.ПКК_ВидДокумента;
			НоваяСтрока.ПКК_Проблемная = ТекСтрокаПоДаннымОрганизации.ПКК_Проблемная;
			НоваяСтрока.Представление = ТекСтрокаПоДаннымОрганизации.Представление;
			НоваяСтрока.Сделка = ТекСтрокаПоДаннымОрганизации.Сделка;
		КонецЦикла;
		Для Каждого ТекСтрокаСписокСчетов Из ДанныеЗаполнения.СписокСчетов Цикл
			НоваяСтрока = СписокСчетов.Добавить();
			НоваяСтрока.Счет = ТекСтрокаСписокСчетов.Счет;
			НоваяСтрока.УчаствуетВРасчетах = ТекСтрокаСписокСчетов.УчаствуетВРасчетах;
		КонецЦикла;
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

//m.ionov@a-prof.ru 10.12.2014
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДатаНачала, ДатаОкончания");
	
	Если ПКК_Корректировка Тогда
		СтруктураОбязательныхПолей.Вставить("ПКК_АктСверки");
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
    	
КонецПроцедуры // ПроверитьЗаполнениеШапки()
//----m.ionov@a-prof.ru---

//начало изменений Ожиганов 28.12.2015 б/н оптимизация запроса акта сверки
Процедура ПРГ_ДобавитьВТаблОгр(ТаблМета,типЗнач, НомерВходящегоДокумента, ДатаВходящегоДокумента,АдресПоставки,ИмяДока
	,ПКК_АктНачисленияБонусов
	,ПКК_АктНачисленияБонусов_Номер
	,ПКК_АктНачисленияБонусов_Дата
	,ДокументОснование
	,ДокументОснование_Номер
	,ДокументРеализации
	,ДокументОснование_ДокументРеализации
	,ДокументОснование_ДокументРеализации_Номер
	,ДокументОснование_Накладная
	,ДокументОснование_Накладная_Номер)
	
	Если ТаблМета = Неопределено Тогда
		ТаблМета = Новый ТаблицаЗначений;
		ТаблМета.Колонки.Добавить("ТипЗнач");
		//ТаблМета.Колонки.Добавить("Номер");
		//ТаблМета.Колонки.Добавить("Дата");
		ТаблМета.Колонки.Добавить("НомерВходящегоДокумента");
		ТаблМета.Колонки.Добавить("ДатаВходящегоДокумента");
		ТаблМета.Колонки.Добавить("АдресПоставки");
		ТаблМета.Колонки.Добавить("ИмяДока");
		ТаблМета.Колонки.Добавить("ПКК_АктНачисленияБонусов");
		ТаблМета.Колонки.Добавить("ПКК_АктНачисленияБонусов_Номер");
		ТаблМета.Колонки.Добавить("ПКК_АктНачисленияБонусов_Дата");
		ТаблМета.Колонки.Добавить("ДокументОснование");
		ТаблМета.Колонки.Добавить("ДокументОснование_Номер");
		ТаблМета.Колонки.Добавить("ДокументРеализации");
		ТаблМета.Колонки.Добавить("ДокументОснование_ДокументРеализации");
		ТаблМета.Колонки.Добавить("ДокументОснование_ДокументРеализации_Номер");
		ТаблМета.Колонки.Добавить("ДокументОснование_Накладная");
		ТаблМета.Колонки.Добавить("ДокументОснование_Накладная_Номер");
	КонецЕслИ;	
	
	нс = ТаблМета.Добавить();
	нс.ТипЗнач 				   = типЗнач;
	нс.НомерВходящегоДокумента = НомерВходящегоДокумента;
	нс.ДатаВходящегоДокумента  = ДатаВходящегоДокумента;
	нс.АдресПоставки		   = АдресПоставки;
	нс.ИмяДока				   = ИмяДока;
	нс.ПКК_АктНачисленияБонусов					  = ПКК_АктНачисленияБонусов;
	нс.ПКК_АктНачисленияБонусов_Номер			  = ПКК_АктНачисленияБонусов_Номер;
	нс.ПКК_АктНачисленияБонусов_Дата			  = ПКК_АктНачисленияБонусов_Дата;
	нс.ДокументОснование						  = ДокументОснование;
	нс.ДокументОснование_Номер					  = ДокументОснование_Номер;
	нс.ДокументРеализации						  = ДокументРеализации;
	нс.ДокументОснование_ДокументРеализации		  = ДокументОснование_ДокументРеализации;
	нс.ДокументОснование_ДокументРеализации_Номер = ДокументОснование_ДокументРеализации_Номер;
	
	нс.ДокументОснование_Накладная				  = ДокументОснование_Накладная;
	нс.ДокументОснование_Накладная_Номер		  = ДокументОснование_Накладная_Номер;
	
КонецПроцедуры	

Функция ПРГ_ПолучитьТекстЗапросаПоОгрДокам(ЗапроСоВрем)
	
   Перем ТаблМета;
	
   МетаХозр = Метаданные.РегистрыБухгалтерии.Хозрасчетный;
   
   Для Каждого ТекМета  Из Метаданные.Документы Цикл
	   Если ТекМета.Движения.Количество() >0  и  ТекМета.Движения.Содержит(МетаХозр) Тогда
		  	ПРГ_ДобавитьВТаблОгр(ТаблМета,Тип("ДокументСсылка."+ТекМета.Имя),
			?(ТекМета.Реквизиты.Найти("НомерВходящегоДокумента")<>Неопределено,"Док.НомерВходящегоДокумента","Неопределено"),
			?(ТекМета.Реквизиты.Найти("ДатаВходящегоДокумента")<>Неопределено,"Док.ДатаВходящегоДокумента","Неопределено"),
			?(ТекМета.Имя = "РеализацияТоваровУслуг","Выразить(Док.АдресДоставки как строка(250))","Неопределено"),
			ТекМета.Имя,
			?(ТекМета.Имя = "ПоступлениеТоваровУслуг","Док.ПКК_АктНачисленияБонусов","Неопределено"),
			?(ТекМета.Имя = "ПоступлениеТоваровУслуг","Док.ПКК_АктНачисленияБонусов.Номер","Неопределено"),			
			?(ТекМета.Имя = "ПоступлениеТоваровУслуг","Док.ПКК_АктНачисленияБонусов.Дата","Неопределено"),			
			?(ТекМета.Имя = "ПРГ_СторноНакладной" или ТекМета.Имя = "КорректировкаДолга","Док.ДокументОснование","Неопределено"),
			?(ТекМета.Имя = "ПРГ_СторноНакладной","Док.ДокументОснование.Номер","Неопределено"),
			?(ТекМета.Имя = "КорректировкаРеализации","Док.ДокументРеализации","Неопределено"),
			?(ТекМета.Имя = "ПРГ_СторноНакладной","Выразить(Док.ДокументОснование как Документ.КорректировкаРеализации).ДокументРеализации","Неопределено"),
			?(ТекМета.Имя = "ПРГ_СторноНакладной","Выразить(Док.ДокументОснование как Документ.КорректировкаРеализации).ДокументРеализации.Номер","Неопределено"),
			?(ТекМета.Имя = "КорректировкаДолга","Выразить(Док.ДокументОснование как Документ.ПР_Претензия).Накладная","Неопределено"),
			?(ТекМета.Имя = "КорректировкаДолга","Выразить(Док.ДокументОснование как Документ.ПР_Претензия).Накладная.Номер","Неопределено")
			);
	   КонецЕслИ; 
   КонецЦикла;  
   
   ТаблМета.Индексы.Добавить("ТипЗнач");
   
   ЗапроСоВрем.Текст = "ВЫБРАТЬ
                              |	ТИПЗНАЧЕНИЯ(ВременнаяТаблица.ДокументРегистратор) КАК ТипЗнач
                              |ИЗ
                              |	ВременнаяТаблицаДанных КАК ВременнаяТаблица
                              |ГДЕ
                              |	ТИПЗНАЧЕНИЯ(ВременнаяТаблица.ДокументРегистратор) <> ТИПЗНАЧЕНИЯ(NULL)
                              |
                              |СГРУППИРОВАТЬ ПО
                              |	ТИПЗНАЧЕНИЯ(ВременнаяТаблица.ДокументРегистратор)";
							  
	Выборка = ЗапроСоВрем.Выполнить().Выбрать();
	ТекстЗапроса = "";
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			
			найдЗнч = ТаблМета.Найти(Выборка.ТипЗнач,"типЗнач");
			Если найдЗнч = Неопределено Тогда
				вызватьисключение "неопределен тип. обратитесь к программистам "+Выборка.ТипЗнач;
			КонецЕслИ;	
			
			ТекстЗапроса = ТекстЗапроса + "
			|"+?(ПустаяСтрока(ТекстЗапроса),"ВЫБРАТЬ Различные
			|",
			" ОБЪЕДИНИТЬ ВСЕ
			|
			| ВЫБРАТЬ Различные ")+"
			| Док.Ссылка как Ссылка,
			// <- Шевченков 56492 20160908
			| выразить(Док.Комментарий как строка(200)) как Комментарий,
			// ->
			| Док.Номер Как Номер,
			| Док.Дата  Как Дата,
			| "+найдЗнч.НомерВходящегоДокумента+" Как НомерВходящегоДокумента,
			| "+найдЗнч.ДатаВходящегоДокумента+" Как ДатаВходящегоДокумента,
			| "+найдЗнч.АдресПоставки+" Как АдресПоставки,
			| "+найдЗнч.ПКК_АктНачисленияБонусов+" Как ДокументРегистратор_ПКК_АктНачисленияБонусов,
			| "+найдЗнч.ПКК_АктНачисленияБонусов_Номер+" Как ДокументРегистратор_ПКК_АктНачисленияБонусов_Номер,			
			| "+найдЗнч.ПКК_АктНачисленияБонусов_Дата+" Как ДокументРегистратор_ПКК_АктНачисленияБонусов_Дата,			
			| "+найдЗнч.ДокументОснование+" Как ДокументРегистратор_ДокументОснование,
			| "+найдЗнч.ДокументОснование_Номер+" Как ДокументРегистратор_ДокументОснование_Номер,
			| "+найдЗнч.ДокументРеализации+" Как ДокументРегистратор_ДокументРеализации,
			| "+найдЗнч.ДокументОснование_ДокументРеализации+" Как ДокументРегистратор_ДокументОснование_ДокументРеализации,
			| "+найдЗнч.ДокументОснование_ДокументРеализации_Номер+" Как ДокументРегистратор_ДокументОснование_ДокументРеализации_Номер,
			
			| "+найдЗнч.ДокументОснование_Накладная+" Как ДокументРегистратор_ДокументОснование_Накладная,
			| "+найдЗнч.ДокументОснование_Накладная_Номер+" Как ДокументРегистратор_ДокументОснование_Накладная_Номер
			
			| "+?(ПустаяСтрока(ТекстЗапроса),"ПОМЕСТИТЬ ПРГ_ТаблДок","")+"
			| ИЗ 
			| Документ." + найдЗнч.ИмяДока + " КАК Док
			| Внутреннее СОЕДИНЕНИЕ ВременнаяТаблицаДанных
			| по ВременнаяТаблицаДанных.ДокументРегистратор = Док.Ссылка
			|";
		
	   КонецЦикла;	
		
	Иначе 
		
			ТекстЗапроса = " ВЫБРАТЬ  Первые 0
			| Неопределено как Ссылка,
			// <- Шевченков 56492 20160908
			| Неопределено как Комментарий,
			// ->
			| Неопределено Как Номер,
			| ДатаВремя(1,1,1)  Как Дата,
			| Неопределено Как НомерВходящегоДокумента,
			| Неопределено Как ДатаВходящегоДокумента,
			| Неопределено Как АдресПоставки,
			| Неопределено Как ДокументРегистратор_ПКК_АктНачисленияБонусов,
			| Неопределено Как ДокументРегистратор_ПКК_АктНачисленияБонусов_Номер,			
			| Неопределено Как ДокументРегистратор_ПКК_АктНачисленияБонусов_Дата,			
			| Неопределено Как ДокументРегистратор_ДокументОснование,
			| Неопределено Как ДокументРегистратор_ДокументОснование_Номер,
			| Неопределено Как ДокументРегистратор_ДокументРеализации,
			| Неопределено Как ДокументРегистратор_ДокументОснование_ДокументРеализации,
			| Неопределено Как ДокументРегистратор_ДокументОснование_ДокументРеализации_Номер,
			| Неопределено Как ДокументРегистратор_ДокументОснование_Накладная,
			| Неопределено Как ДокументРегистратор_ДокументОснование_Накладная_Номер
			| ПОМЕСТИТЬ ПРГ_ТаблДок
			|";
		
		
	КонецЕслИ;	
	
	возврат  ТекстЗапроса;
	
//ЗапроСоВрем.Текст = ТекстЗапроса;	
//ЗапроСоВрем.Выполнить();
   
КонецФункции	
//конец изменений  

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
МетаданныеПоДокументам = Новый Соответствие();
