Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент,МетодПредоставленияБонуса,ТипБонуса,Статус,СтавкаНДС,ВидРасчБазы,Валюта");
	Если Статус = Перечисления.ПКК_СтатусГрафикаБонусов.Действующий Тогда
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаГрафик, ТаблицаБюджет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Бонус,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.СтатьяДДС,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.ПериодВыплаты,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Склад,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.КаналСбыта,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.СпособОтгрузки,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.ТипГрафика,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.НачПериод,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.КонПериод,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.КонПериод КАК Дата,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.Процент,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.МинПроцентВыпПлана,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.ВидРасчБазы,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка.СтавкаНДС КАК СтавкаНДС,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка.ГарантияСНДС КАК ГарантияСНДС,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.ПрогнознаяСумма,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.ПрогнознаяСуммаВВалюте КАК ПрогнознаяСуммаВзаиморасчетов,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.СуммаБюджетаДДСсНДС,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.СуммаБюджетаДДСсНДСвВалюте КАК СуммаБюджетаДДСсНДСВзаиморасчетов,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.СуммаБюджетаДДСсНДС КАК Сумма,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.СуммаБюджетаДДСсНДСвВалюте КАК СуммаВзаиморасчетов,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.ГарантируемыйОбъем,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.ГарантируемаяСумма,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.БонусныйПериод,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.Периодичность,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.Предоплата,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.УИграфик,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка КАК График,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка.Организация КАК Организация,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка.Контрагент КАК Контрагент,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка.ГарантияВШапке,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка.МетодПредоставленияБонуса КАК МетодПредоставленияБонуса,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка.Статус КАК Статус,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка.Ответственный КАК Ответственный,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка.ТипБонуса КАК ТипБонуса,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка.Валюта КАК Валюта,
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.УИ,
//начало изменений Ожиганов А. 21.09.2017 69345 доработка механизма бонусов. Шкала начисления/выполнения процентов бонусов.  
 				   |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.Шкала как Шкала,	
//конец изменений 
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.Комментарий
	               |ИЗ
	               |	Документ.ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслуг.Бонусы КАК ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслуг.График КАК ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик
	               |		ПО ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.УИ = ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.УИ
	               |			И ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка = ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугГрафик.Ссылка
	               |ГДЕ
	               |	ПКК_ГрафикНачисленияВыплатыБонусовИМаркетинговыхУслугБонусы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапросаГрафик = Запрос.Выполнить();

	// Подготовим таблицу  для проведения.
	ТаблицаГрафик = РезультатЗапросаГрафик.Выгрузить();
	ТаблицаБюджет = ТаблицаГрафик.Скопировать();
	//Убираем плановую сумму если выплата
	Для каждого стр из ТаблицаГрафик цикл
		Если стр.ТипГрафика = Перечисления.ПКК_ТипГрафика.Выплата тогда
			стр.ПрогнознаяСуммаВзаиморасчетов = 0;
			стр.ПрогнознаяСумма = 0;
		КонецЕсли;	
	КонецЦикла;
	
		
	ТаблицаБюджет.Свернуть("Организация, Контрагент, ДоговорКонтрагента, Бонус, График, Валюта, СтатьяДДС, ПериодВыплаты, УИграфик","Сумма,СуммаВзаиморасчетов");
	ТаблицаБюджет.Колонки.ПериодВыплаты.Имя = "Дата";
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаГрафик, ТаблицаБюджет;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);
		
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаГрафик, ТаблицаБюджет);
	
	ПроверитьЗаполнениеТабличнойЧастиБонусы(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойГрафики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверкаГрафика(Отказ);
			
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаГрафик, ТаблицаБюджет, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаНакладные          - таблица значений, содержащая данные для проведения и проверки ТЧ Накладные
//  ТаблицаПоручений          - таблица значений, содержащая данные для проведения и проверки ТЧ ДополнительныеПоручения,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаГрафик, ТаблицаБюджет, Отказ, Заголовок)

	НаборДвижений = Движения.ПКК_ГрафикНачисленияВыплатыБонусовУслуг;
	ТаблицаДвижений	= НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	//Для каждого СтрокаГрафик Из ТаблицаГрафик Цикл
	//	Движение = ТаблицаДвижений.Добавить();
	//	ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);
	//	ЗаполнитьЗначенияСвойств(Движение, СтрокаГрафик);
	//	Движение.Регистратор = ЭтотОбъект.Ссылка;
	//КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаГрафик, ТаблицаДвижений);
	  	
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Движения.ПКК_ГрафикНачисленияВыплатыБонусовУслуг.ВыполнитьДвижения();
	//НаборДвижений.Записать();
	
	//Регистр ПКК_РаспределенныйБюджетБонусовУслуг
	НаборДвиженийРаспределениеБюджета = Движения.ПКК_РаспределенныйБюджетБонусовУслуг;
	ТаблицаДвиженийРаспределениеБюджета	= НаборДвиженийРаспределениеБюджета.ВыгрузитьКолонки();
	ТаблицаДвиженийРаспределениеБюджета.Очистить();
	
	//{29.10.2015 Островерхий заявка №45338 
	НаборДвиженийБюджет = Движения.ПКК_БюджетБонусовУслуг;
	ТаблицаДвиженийБюджет	= НаборДвиженийБюджет.ВыгрузитьКолонки();
	ТаблицаДвиженийБюджет.Очистить(); 
	//29.10.2015 Островерхий} 
	
	Для каждого Строка Из ТаблицаБюджет Цикл
		
		Если Строка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = ТаблицаДвиженийРаспределениеБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Строка);
		//Движение.Период = Строка.Дата; 
		
		//{29.10.2015 Островерхий заявка №45338 
		//{28.06.2016 Островерхий заявка №53914 
		//Если НЕ Строка.Контрагент.Дивизион = Справочники.ПРГДивизионы.ФКК
		//	И НЕ Строка.Контрагент.НСИ_Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка() Тогда
		ЭтотГод = Год(ТекущаяДата());
		
		Если 
			(ЭтотГод < 2016 И НЕ Строка.Контрагент.Дивизион = Справочники.ПРГДивизионы.ФКК 
				И НЕ Строка.Контрагент.НСИ_Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка() )
			ИЛИ
			(ЭтотГод >= 2016 И НЕ Строка.Контрагент.НСИ_Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка()
				И НЕ Строка.Контрагент.Дивизион = Справочники.ПРГДивизионы.ФКК И НЕ Строка.Контрагент.НСИ_Вывеска.ТОПЛКК )
		Тогда
		//Если НЕ Строка.Контрагент.НСИ_Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка()
		//	И (НЕ Строка.Контрагент.Дивизион = Справочники.ПРГДивизионы.ФКК 
		//		И НЕ Строка.Контрагент.НСИ_Вывеска.ТОПЛКК)Тогда
		//28.06.2016 Островерхий} 
					
			Движение = ТаблицаДвиженийБюджет.Добавить();
			Движение.Дивизион  = Строка.Контрагент.Дивизион;
			Движение.Вывеска   = Справочники.НСИ_Вывески.ПустаяСсылка();
			Движение.СтатьяДДС = Строка.СтатьяДДС;
			Движение.Сумма     = - Строка.Сумма;	
			Движение.Период    = Строка.Дата;
			
			Движение = ТаблицаДвиженийБюджет.Добавить();
			Движение.Дивизион  = Строка.Контрагент.Дивизион;
			Движение.Вывеска   = Строка.Контрагент.НСИ_Вывеска;
			Движение.СтатьяДДС = Строка.СтатьяДДС;
			Движение.Сумма     = Строка.Сумма;	
			Движение.Период    = Строка.Дата;
		
		КонецЕсли; 
		//29.10.2015 Островерхий} 
				
	КонецЦикла;
	//ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаБюджет, ТаблицаДвиженийБюджет);
	
	НаборДвиженийРаспределениеБюджета.мТаблицаДвижений  = ТаблицаДвиженийРаспределениеБюджета;
	НаборДвиженийРаспределениеБюджета.мПериод			=  Дата;
	
	Движения.ПКК_РаспределенныйБюджетБонусовУслуг.ВыполнитьПриход();
	//НаборДвиженийРаспределениеБюджета.Записать();	
	
	//{06.11.2015 Островерхий заявка №45338 
	//Если СтруктураШапкиДокумента.Дата >= '20151106' Тогда  //breakpoint Островерхий, 11.11.2015 17:37:01  
		
		//{30.10.2015 Островерхий заявка №45338 
		НаборДвиженийБюджет.мТаблицаДвижений  = ТаблицаДвиженийБюджет;
		
		//{17.11.2015 Островерхий заявка №46026 
		Если ТаблицаДвиженийБюджет.Количество() > 0 Тогда
			Движения.ПКК_БюджетБонусовУслуг.КонтрольОстатков(ЭтотОбъект, СтруктураШапкиДокумента, ТаблицаДвиженийБюджет.Скопировать(, "Период,Вывеска,Дивизион,СтатьяДДС,Сумма"), Отказ, Заголовок, РежимПроведения);
			
		КонецЕсли;
		Если НЕ Отказ Тогда
			Движения.ПКК_БюджетБонусовУслуг.ВыполнитьДвижения();	
		КонецЕсли; 	
		//17.11.2015 Островерхий} 
		//30.10.2015 Островерхий} 	
		
	//КонецЕсли;  
	//06.11.2015 Островерхий} 
		
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если Статус <> Перечисления.ПКК_СтатусГрафикаБонусов.Планируемый и РежимЗаписи = РежимЗаписиДокумента.Запись тогда
		Отказ = истина;
		ОбщегоНазначения.СообщитьОбОшибке("Для изменения статуса, документ должен быть проведен");
	ИначеЕсли Статус <> Перечисления.ПКК_СтатусГрафикаБонусов.Планируемый и РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения тогда
		Отказ = истина;
		ОбщегоНазначения.СообщитьОбОшибке("Для отмены проведения документа, статус документа должен быть ""Планируемый""");
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	ПрогнознаяСуммаНачисления = Бонусы.Итог("ПрогнознаяСуммаНачисления");
	ПрогнознаяСуммаВыплаты = Бонусы.Итог("ПрогнознаяСуммаВыплаты");

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаписатьИзменениеСтатусов(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	//Нужно вставить проверку чтобы не было каких то ведомостей на данный график
	
	Если ЕстьВедомостьПоГрафику() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По графику " + СокрЛП(Ссылка) + " уже есть сформированные ведомости, отмена проведения не возможна", Отказ);	
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкаГрафика(Отказ)
	
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ПКК_ГрафикНачисленияВыплатыБонусовУслуг.Регистратор) КАК Регистратор
	|ИЗ
	|	РегистрСведений.ПКК_ГрафикНачисленияВыплатыБонусовУслуг КАК ПКК_ГрафикНачисленияВыплатыБонусовУслуг
	|ГДЕ
	|	ПКК_ГрафикНачисленияВыплатыБонусовУслуг.Организация = &Организация
	|	И ПКК_ГрафикНачисленияВыплатыБонусовУслуг.Контрагент = &Контрагент
	|	И ПКК_ГрафикНачисленияВыплатыБонусовУслуг.ДоговорКонтрагента = &ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Регистратор <> NULL и ВыборкаДетальныеЗаписи.Регистратор <> ЭтотОбъект тогда
			ОбщегоНазначения.СообщитьОбОшибке(СокрЛП(ЭтотОбъект)+" не может быть привязан к договору: "+СокрЛП(ДоговорКонтрагента)+" К данному договору уже привязан график:"+СокрЛП(ВыборкаДетальныеЗаписи.Регистратор), Отказ);
		КонецЕсли;	
	КонецЦикла; 
	
	//Для каждого стр из ЭтотОбъект.График цикл
	//	
	//			
	//КонецЦикла;
		
КонецПроцедуры

Процедура ЗаписатьИзменениеСтатусов(Отказ) Экспорт
	
	//Движения по регистру накопления "АП_СтатусыДокументов"
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		СформируемЗаписьПоРегиструСтатусы(Отказ);
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = Статус Тогда
	    СформируемЗаписьПоРегиструСтатусы(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструСтатусы(Отказ)

	мДатаЗаписи = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		мДатаЗаписи  = мДатаЗаписи + 1;
		
		//НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
		
		НаборЗаписей.Прочитать();
	КонецЕсли;
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = Статус;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПересчиатьСуммыПоСтрокеБонусов(СтрокаБонуса) Экспорт

	НайденныеСтроки = График.НайтиСтроки(Новый структура("УИ",СтрокаБонуса.УИ));
	
	ТабГрафики = График.Выгрузить(НайденныеСтроки);
	
	//СтрокаБонуса.ПрогнознаяСумма = ТабГрафики.Итог("ПрогнознаяСумма");
	СтрокаБонуса.СуммаБюджетаДДСсНДС = ТабГрафики.Итог("СуммаБюджетаДДСсНДС");
	
	ПрогнознаяСуммаНачисления = 0;
	ПрогнознаяСуммаВыплаты = 0;
	Для каждого СтрокаГрафика Из ТабГрафики Цикл
	
		Если СтрокаГрафика.ТипГрафика = Перечисления.ПКК_ТипГрафика.Начисление 
		ИЛИ СтрокаГрафика.ТипГрафика = Перечисления.ПКК_ТипГрафика.НачислениеВыплата Тогда	
	       	ПрогнознаяСуммаНачисления = ПрогнознаяСуммаНачисления + СтрокаГрафика.ПрогнознаяСумма;
		КонецЕсли;
			
		Если СтрокаГрафика.ТипГрафика = Перечисления.ПКК_ТипГрафика.Выплата 
		ИЛИ СтрокаГрафика.ТипГрафика = Перечисления.ПКК_ТипГрафика.НачислениеВыплата Тогда	
	        ПрогнознаяСуммаВыплаты = ПрогнознаяСуммаВыплаты + СтрокаГрафика.ПрогнознаяСумма;
		КонецЕсли;

	КонецЦикла; 
	
	СтрокаБонуса.ПрогнознаяСуммаНачисления = ПрогнознаяСуммаНачисления;
	СтрокаБонуса.ПрогнознаяСуммаВыплаты = ПрогнознаяСуммаВыплаты;

КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиБонусы(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("УИ");
	
	СтруктураОбязательныхПолей.Вставить("Бонус");
	СтруктураОбязательныхПолей.Вставить("НачПериод");
	СтруктураОбязательныхПолей.Вставить("КонПериод");	
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Бонусы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		Для каждого СтрокаТабЧасти Из Бонусы Цикл
			Если СтрокаТабЧасти.КонПериод < СтрокаТабЧасти.НачПериод Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для строки бонуса № " + СокрЛП(Бонусы.Индекс(СтрокаТабЧасти) + 1) + " не верно указан период!", Отказ);		 
			КонецЕсли;
			Если НЕ СтрокаТабЧасти.СуммаБюджетаДДСсНДС = 0 И Не ЗначениеЗаполнено(СтрокаТабЧасти.СтатьяДДС) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для строки бонуса № " + СокрЛП(Бонусы.Индекс(СтрокаТабЧасти) + 1) + " есть выделенный бюджет, но не указана статья ДДС!", Отказ);		 
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры 

Процедура ПроверитьЗаполнениеТабличнойГрафики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("УИ, УИграфик");
	
	СтруктураОбязательныхПолей.Вставить("НачПериод");
	СтруктураОбязательныхПолей.Вставить("КонПериод");	
	СтруктураОбязательныхПолей.Вставить("ВидРасчБазы");	
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "График", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		Для каждого СтрокаТабЧасти Из График Цикл
			
			СтрБонус = Бонусы.Найти(СтрокаТабЧасти.УИ,"УИ");
			Если СтрБонус = Неопределено Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для строки графика № " + СокрЛП(График.Индекс(СтрокаТабЧасти) + 1) + " нет привязки к строке бонусов!", Отказ);		 
				Продолжить;
			КонецЕсли;
			
			//Если Не СтрокаТабЧасти.ВидРасчБазы = Перечисления.ПКК_ВидРасчетнойБазы.ФиксированнаяСумма И СтрокаТабЧасти.Процент = 0 Тогда
			//	ОбщегоНазначения.СообщитьОбОшибке("Для строки бонуса № " + СокрЛП(Бонусы.Индекс(СтрБонус) + 1) + " в графике с видом расчета от базы не указан процент!", Отказ);		 
			//Иначе
			Если СтрокаТабЧасти.ВидРасчБазы = Перечисления.ПКК_ВидРасчетнойБазы.ФиксированнаяСумма И СтрокаТабЧасти.ПрогнознаяСумма = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для строки бонуса № " + СокрЛП(Бонусы.Индекс(СтрБонус) + 1) + " в графике с видом расчета фиксированная сумма не указана сумма!", Отказ);		 
			КонецЕсли;
			
			Если СтрокаТабЧасти.КонПериод < СтрокаТабЧасти.НачПериод Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для строки бонуса № " + СокрЛП(Бонусы.Индекс(СтрБонус) + 1) + " в графике не верно указан период! Конец периода меньше начала.", Отказ);		 
			КонецЕсли; 	
			
			Если СтрокаТабЧасти.КонПериод > СтрБонус.КонПериод Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для строки бонуса № " + СокрЛП(Бонусы.Индекс(СтрБонус) + 1) + " в графике не верно указан период! Период не соответсвует периоду бонуса", Отказ);		 
			КонецЕсли; 	
			
			Если СтрокаТабЧасти.НачПериод < СтрБонус.НачПериод Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для строки бонуса № " + СокрЛП(Бонусы.Индекс(СтрБонус) + 1) + " в графике не верно указан период! Период не соответсвует периоду бонуса", Отказ);		 
			КонецЕсли; 	
			
			Если Не СтрокаТабЧасти.СуммаБюджетаДДСсНДС = 0 И СтрокаТабЧасти.ПериодВыплаты = Дата(1,1,1) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для строки бонуса № " + СокрЛП(Бонусы.Индекс(СтрБонус) + 1) + " в графике указан выделенный бюджет, но не указан месяц выплаты!", Отказ);		 
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры 

Процедура ПриКопировании(ОбъектКопирования)
	
	//ЗаполнитьЗначенияСвойств(ЭтотОбъект,ОбъектКопирования,,"Дата,Номер,Статус");
	
	Для каждого СтрокаПроверка Из График Цикл
		КлючУникальности  = Новый УникальныйИдентификатор;
		СтрокаПроверка.УИграфик = КлючУникальности;
		СтрокаПроверка.СуммаБюджетаДДСсНДС = 0;
		СтрокаПроверка.СуммаБюджетаДДСсНДСвВалюте = 0;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьВедомостьПоГрафику() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПКК_ВедомостиБонусовУслуг.Регистратор
	|ИЗ
	|	РегистрНакопления.ПКК_ВедомостиБонусовУслуг КАК ПКК_ВедомостиБонусовУслуг
	|ГДЕ
	|	ПКК_ВедомостиБонусовУслуг.Исключено = ЛОЖЬ
	|	И ПКК_ВедомостиБонусовУслуг.График = &График";

	Запрос.УстановитьПараметр("График", Ссылка);

	Результат = Запрос.Выполнить();

	Возврат Не Результат.Пустой();
КонецФункции