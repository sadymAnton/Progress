////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Заявление" Тогда
		ТабДокумент = ПечатьЗаявления();
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним), , ТабДокумент);
	КонецЕсли;
	
КонецФункции // Печать

Функция ПечатьЗаявления()

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоСтрокамДокумента = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать();	
	ВсегоСотрудников = ВыборкаПоСтрокамДокумента.Количество();
	Заголовок = "Печать " + Строка(ЭтотОбъект);
	Отказ = Ложь;
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	КонецЦикла;
	ОрганизацияЭтоЮрЛицо = ОбщегоНазначенияЗКПереопределяемый.ЭтоЮрЛицо(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ";
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.АвтоМасштаб = Истина;
	
	// Титульная страница заявления.
	МакетСтраницы = ПолучитьМакет("Страница1");

	НезаполненнаяСтрока = "--------------------------------------------------";
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.ОрганизацияИНН, МакетСтраницы, "ИНН", 12);
	Если ОрганизацияЭтоЮрЛицо Тогда
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.ОрганизацияКПП, МакетСтраницы, "КПП", 9);
	КонецЕсли;
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Прав("0000000000" + ОбщегоНазначенияЗК.ПолучитьНомерНаПечать(ВыборкаПоШапкеДокумента), 10), МакетСтраницы, "Номер", 10);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.КодИФНС, МакетСтраницы, "КодИФНС", 4);
	ДлиныСтрок = Новый Массив();
	ДлиныСтрок.Добавить(40);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ОбменСведениямиОПособияхСФСС.РазбитьСтрокуНаПодСтроки(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеПолное, ДлиныСтрок), МакетСтраницы, "Наименование", 160);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.НалоговыйПериод, "ЧГ=0"), МакетСтраницы, "НалоговыйПериод", 4);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(Цел(ВсегоСотрудников / 3) + ?(ВсегоСотрудников % 3 = 0, 0, 1) + 1, "ЧЦ=3; ЧВН="), МакетСтраницы, "ЛистовЗаявления", 3);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(?(ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КоличествоПодтверждающихДокументов), Формат(ВыборкаПоШапкеДокумента.КоличествоПодтверждающихДокументов, "ЧЦ=3; ЧН=-; ЧВН="), НезаполненнаяСтрока), МакетСтраницы, "КоличествоПодтверждающихДокументов", 3);
	МакетСтраницы.Параметры.ВидПодписанта = ОрганизацияЭтоЮрЛицо;
	Если ОрганизацияЭтоЮрЛицо Тогда
		ФИОРуководителя = ВыборкаПоШапкеДокумента.ФамилияРуководителя + ?(ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФамилияРуководителя)," ","") + ВыборкаПоШапкеДокумента.ИмяРуководителя + ?(ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяРуководителя)," ","") + ВыборкаПоШапкеДокумента.ОтчествоРуководителя;
		ДлиныСтрок = Новый Массив();
		ДлиныСтрок.Добавить(20);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ОбменСведениямиОПособияхСФСС.РазбитьСтрокуНаПодСтроки(ФИОРуководителя, ДлиныСтрок), МакетСтраницы, "ФИОРуководителя", 60);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(?(ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИННРуководителя), ВыборкаПоШапкеДокумента.ИННРуководителя, НезаполненнаяСтрока), МакетСтраницы, "ИННРуководителя", 12);
	КонецЕсли;
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(?(ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Телефон), ВыборкаПоШапкеДокумента.Телефон, НезаполненнаяСтрока), МакетСтраницы, "Телефон", 20);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=dd.MM.yyyy"),".",""), МакетСтраницы, "Дата", 8);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НезаполненнаяСтрока, МакетСтраницы, "НаимДок", 40);
	
	ТабДокумент.Вывести(МакетСтраницы);
	
	// Страницы с данными физлиц.
	ВыведеноНаСтранице = 0;
	НомерВыводимойСтраницы = 2;
	ВыборкаПоСтрокамДокумента.Сбросить();
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
		
		Если ВыведеноНаСтранице = 0 Тогда // подготовим новую страницу
			МакетСтраницы = ПолучитьМакет("Страница2");
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.ОрганизацияИНН, МакетСтраницы, "ИНН", 12);
			Если ОрганизацияЭтоЮрЛицо Тогда
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.ОрганизацияКПП, МакетСтраницы, "КПП", 9);
			КонецЕсли;
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(НомерВыводимойСтраницы,"ЧЦ=3; ЧВН="), МакетСтраницы, "НомерВыводимойСтраницы", 3);
		КонецЕсли;
		
		ВыведеноНаСтранице = ВыведеноНаСтранице + 1;
		Постфикс = "" + ВыведеноНаСтранице + "_";
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоСтрокамДокумента.Фамилия, МакетСтраницы, "Фамилия" + Постфикс, 35);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоСтрокамДокумента.Имя, МакетСтраницы, "Имя" + Постфикс, 35);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоСтрокамДокумента.Отчество, МакетСтраницы, "Отчество" + Постфикс, 35);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоСтрокамДокумента.ИНН, МакетСтраницы, "ИНН" + Постфикс, 12);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(ВыборкаПоСтрокамДокумента.ДатаРождения, "ДФ=dd.MM.yyyy"),".",""), МакетСтраницы, "ДатаРождения" + Постфикс, 8);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоСтрокамДокумента.ВидДокументаКодИМНС, МакетСтраницы, "ВидДокумента" + Постфикс, 2);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоСтрокамДокумента.СерияДокумента + ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СерияДокумента + ВыборкаПоСтрокамДокумента.НомерДокумента)," ","") + ВыборкаПоСтрокамДокумента.НомерДокумента, МакетСтраницы, "СерияНомерДокумента" + Постфикс, 20);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(ВыборкаПоСтрокамДокумента.ДатаВыдачиДокумента, "ДФ=dd.MM.yyyy"),".",""), МакетСтраницы, "ДатаВыдачиДокумента" + Постфикс, 8);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоСтрокамДокумента.КемВыданДокумент, МакетСтраницы, "КемВыданДокумент" + Постфикс, 35);
		
		Если ВыведеноНаСтранице = 3 Тогда // выведем заполненную страницу
			ВыведеноНаСтранице = 0;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(МакетСтраницы);
			НомерВыводимойСтраницы = НомерВыводимойСтраницы + 1;
		КонецЕсли;
		
	КонецЦикла;
	Если ВыведеноНаСтранице > 0 Тогда
		Для Сч = ВыведеноНаСтранице + 1 По 3 Цикл
			Постфикс = "" + Сч + "_";
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НезаполненнаяСтрока, МакетСтраницы, "Фамилия" + Постфикс, 35);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НезаполненнаяСтрока, МакетСтраницы, "Имя" + Постфикс, 35);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НезаполненнаяСтрока, МакетСтраницы, "Отчество" + Постфикс, 35);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НезаполненнаяСтрока, МакетСтраницы, "ИНН" + Постфикс, 12);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НезаполненнаяСтрока, МакетСтраницы, "ДатаРождения" + Постфикс, 8);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НезаполненнаяСтрока, МакетСтраницы, "ВидДокумента" + Постфикс, 2);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НезаполненнаяСтрока, МакетСтраницы, "СерияНомерДокумента" + Постфикс, 20);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НезаполненнаяСтрока, МакетСтраницы, "ДатаВыдачиДокумента" + Постфикс, 8);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НезаполненнаяСтрока, МакетСтраницы, "КемВыданДокумент" + Постфикс, 35);
		КонецЦикла;
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДокумент.Вывести(МакетСтраницы);
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Возврат ТабДокумент

КонецФункции // ПечатьЗаявления()

#КонецЕсли

Процедура ЗаполнитьДанныеФизлица(СтрокаФизлица) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Наименование,
	|	ФизическиеЛица.ИНН,
	|	ФизическиеЛица.ДатаРождения,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид КАК ВидДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия КАК СерияДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер КАК НомерДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи КАК ДатаВыдачиДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК КемВыданДокумент
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &Ссылка) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&Дата, ФизЛицо = &Ссылка) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СтрокаФизлица.Физлицо);
	Запрос.УстановитьПараметр("Дата", Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтрокаФизлица, Выборка);
	Если ЗначениеЗаполнено(Выборка.Наименование) И Не ЗначениеЗаполнено(Выборка.Фамилия) И Не ЗначениеЗаполнено(Выборка.Имя) Тогда
		ОбщегоНазначенияЗК.ФамилияИнициалыФизЛица(Выборка.Наименование, СтрокаФизлица.Фамилия, СтрокаФизлица.Имя, СтрокаФизлица.Отчество);
	КонецЕсли;

КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Заявление", "Заявление");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ, БезПроверок = Ложь, ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоСтрокамДокумента = Неопределено) Экспорт
	
	// здесь поддерживаем формирование сведений в соответствии с Приказом ФНС России от 17.11.2010 № ММВ-7-3/611@ 
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Отказ = Ложь;
	
	СтрокаXML = Файл2015(Отказ, БезПроверок, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
	
	Если Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат ""	
	КонецЕсли;
	
	Возврат СтрокаXML
	
КонецФункции // СформироватьВыходнойФайл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ формирования файла

Функция Файл2015(Отказ, БезПроверок, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	Если ВыборкаПоСтрокамДокумента = Неопределено Тогда
		ВыборкаПоСтрокамДокумента = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать();	
	КонецЕсли;
	
	Если Не БезПроверок Тогда
		Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
		КонецЦикла;
		Если Отказ Тогда
			Возврат ""	
		КонецЕсли;
		ВыборкаПоСтрокамДокумента.Сбросить();
	КонецЕсли;
	
	ОрганизацияЭтоФизЛицо = Не ОбщегоНазначенияЗКПереопределяемый.ЭтоЮрЛицо(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	//-----------------------------------------------------------------------------
	// ФОРМИРОВАНИЕ ДЕРЕВА ДАННЫХ
	
	// Загружаем формат файла сведений
	ФорматФайла = СправкиПоНДФЛ.ЗагрузитьФорматНабораЗаписей(ПолучитьМакет("Формат"), "Файл", ОрганизацияЭтоФизЛицо);
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("ИдФайл", ИмяФайла);
	Атрибуты.Вставить("ВерсПрог", "1С:" + РегламентированнаяОтчетность.ИДКонфигурации() + " " + РегламентированнаяОтчетность.РедакцияКонфигурации());
	Атрибуты.Вставить("ВерсФорм", "5.01");
	УзелЗаявления = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
	
	ФорматЗаявление = ФорматФайла.Документ.Значение;
	ФорматЗаявление.НомЗаяв.Значение = ОбщегоНазначенияЗК.ПолучитьНомерНаПечать(ВыборкаПоШапкеДокумента);
	ФорматЗаявление.ДатаДок.Значение = ВыборкаПоШапкеДокумента.Дата;
	ФорматЗаявление.КодНО.Значение = ВыборкаПоШапкеДокумента.КодИФНС;
	
	// Сведения о лице, подписавшем документ
	НаборЗаписейПодписант = ФорматЗаявление.Подписант.Значение;
	НаборЗаписейПодписант.ПрПодп.Значение = Формат(ОрганизацияЭтоФизЛицо,"БЛ=1; БИ=2"); // налоговый агент
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Телефон) Тогда
		НаборЗаписейПодписант.Удалить("Тлф");
	Иначе
		НаборЗаписейПодписант.Тлф.Значение = ВыборкаПоШапкеДокумента.Телефон;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИННРуководителя) Тогда
		НаборЗаписейПодписант.Удалить("ИННФЛ");
	Иначе
		НаборЗаписейПодписант.ИННФЛ.Значение = ВыборкаПоШапкеДокумента.ИННРуководителя;
	КонецЕсли;
	Если Не ОрганизацияЭтоФизЛицо Тогда
		НаборЗаписейПодписант.ФИО.Значение.Фамилия = ВыборкаПоШапкеДокумента.ФамилияРуководителя;
		НаборЗаписейПодписант.ФИО.Значение.Имя = ВыборкаПоШапкеДокумента.ИмяРуководителя;
		НаборЗаписейПодписант.ФИО.Значение.Отчество = ВыборкаПоШапкеДокумента.ОтчествоРуководителя;
	КонецЕсли;
	НаборЗаписейПодписант.Удалить("СвПред");
	
	// Сведения о налоговом агенте
	Если ОрганизацияЭтоФизЛицо Тогда
		
		НаборЗаписейОтправитель = ФорматЗаявление.СвНП.Значение.СвНАФЛ.Значение;
		НаборЗаписейОтправитель.ИННФЛ.Значение = ВыборкаПоШапкеДокумента.ОрганизацияИНН;
		НаборЗаписейОтправитель.ФИО.Значение.Фамилия = ВыборкаПоШапкеДокумента.ФамилияРуководителя;
		НаборЗаписейОтправитель.ФИО.Значение.Имя = ВыборкаПоШапкеДокумента.ИмяРуководителя;
		НаборЗаписейОтправитель.ФИО.Значение.Отчество = ВыборкаПоШапкеДокумента.ОтчествоРуководителя;
		
	Иначе
		
		НаборЗаписейОтправитель = ФорматЗаявление.СвНП.Значение.СвНАЮЛ.Значение;
		НаборЗаписейОтправитель.НаимОрг.Значение = ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеПолное;
		НаборЗаписейОтправитель.ИННЮЛ.Значение = ВыборкаПоШапкеДокумента.ОрганизацияИНН;
		НаборЗаписейОтправитель.КПП.Значение = ВыборкаПоШапкеДокумента.ОрганизацияКПП;
		
	КонецЕсли;
	
	ФорматЗаявПрвУмНал = ФорматЗаявление.ЗаявПрвУмНал.Значение;
	ФорматЗаявление.Удалить("ЗаявПрвУмНал");
	
	УзелЗаявления = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелЗаявления, "Документ", "", СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(ФорматЗаявление));
	СправкиПоНДФЛ.ДобавитьИнформациюВДерево(УзелЗаявления, ФорматЗаявление);
	
	ФорматЗаявПрвУмНал.ГодУмНал.Значение = ВыборкаПоШапкеДокумента.НалоговыйПериод;
	ФорматСвНППртд = ФорматЗаявПрвУмНал.СвНППртд.Значение;
	ФорматЗаявПрвУмНал.Удалить("СвНППртд");
	
	УзелЗаявления = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелЗаявления, "ЗаявПрвУмНал", "", СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(ФорматЗаявПрвУмНал));
	СправкиПоНДФЛ.ДобавитьИнформациюВДерево(УзелЗаявления, ФорматЗаявПрвУмНал);
	
	ФорматФизЛица = ФорматСвНППртд.СвНПФЛ.Значение;
	ФорматСвНППртд.Удалить("СвНПФЛ");
	
	УзелДанных = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелЗаявления, "СвНППртд", "", СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(ФорматСвНППртд));
	СправкиПоНДФЛ.ДобавитьИнформациюВДерево(УзелДанных, ФорматСвНППртд);
	
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
		
		// Данные о физическом лице - получателе дохода
		СтруктураДанныхФизЛица = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматФизЛица);
		
		СтруктураДанныхФизЛица.ИННФЛ.Значение = ВыборкаПоСтрокамДокумента.ИНН;
		СтруктураДанныхФизЛица.ДатаРожд.Значение = ВыборкаПоСтрокамДокумента.ДатаРождения;
		
		//  Фамилия, Имя, Отчество
		СтруктураДанныхФизЛица.ФИО.Значение.Фамилия = ВыборкаПоСтрокамДокумента.Фамилия;                     
		СтруктураДанныхФизЛица.ФИО.Значение.Имя = ВыборкаПоСтрокамДокумента.Имя;                     
		СтруктураДанныхФизЛица.ФИО.Значение.Отчество = ВыборкаПоСтрокамДокумента.Отчество;

		// Удостоверение личности
		НаборЗаписейДокУдЛичности = СтруктураДанныхФизЛица.УдЛичнФЛ.Значение; 
		НаборЗаписейДокУдЛичности.КодВидДок = ВыборкаПоСтрокамДокумента.ВидДокументаКодИМНС;
		НаборЗаписейДокУдЛичности.СерНомДок = СокрЛП(ВыборкаПоСтрокамДокумента.СерияДокумента)  + ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СерияДокумента + ВыборкаПоСтрокамДокумента.НомерДокумента)," ","") + СокрЛП(ВыборкаПоСтрокамДокумента.НомерДокумента);
		НаборЗаписейДокУдЛичности.ДатаДок = ВыборкаПоСтрокамДокумента.ДатаВыдачиДокумента;
		НаборЗаписейДокУдЛичности.ВыдДок = ВыборкаПоСтрокамДокумента.КемВыданДокумент;
	
		Атрибуты = СправкиПоНДФЛ.ДанныеВыгружаемыеКакАтрибуты(СтруктураДанныхФизЛица);
		СправкиПоНДФЛ.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелДанных, "СвНПФЛ","", Атрибуты), СтруктураДанныхФизЛица);
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОбработкаПрерыванияПользователя();	
	#КонецЕсли
		
	КонецЦикла;
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML();
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML);
	// получаем содержимое файла в виде строки
	СтрокаXML = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрокаXML

КонецФункции // Файл2015()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Дата,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Номер,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Организация,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Организация
	|		ИНАЧЕ ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Организация.ИНН,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Организация.КПП,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Организация.ЮрФизЛицо,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Организация.Наименование,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Ответственный,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Ссылка,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.ИННРуководителя,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.ИмяФайла,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.ФамилияРуководителя,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.ИмяРуководителя,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.ОтчествоРуководителя,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.КодИФНС,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.НалоговыйПериод,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Организация.ИндивидуальныйПредприниматель КАК ИндивидуальныйПредприниматель,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.КоличествоПодтверждающихДокументов,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Телефон
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ КАК ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ
	|ГДЕ
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ПОМЕСТИТЬ ВТФИОИП
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|			&Дата,
	|			ФизЛицо В
	|				(ВЫБРАТЬ
	|					ДанныеДокумента.ИндивидуальныйПредприниматель
	|				ИЗ
	|					ВТДанныеДокумента КАК ДанныеДокумента)) КАК ФИОФизЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ОрганизацияЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|				И ФИОИП.Фамилия ЕСТЬ НЕ NULL 
	|			ТОГДА ФИОИП.Фамилия + "" "" + ФИОИП.Имя + "" "" + ФИОИП.Отчество
	|		ИНАЧЕ ДанныеДокумента.ОрганизацияНаименованиеПолное
	|	КОНЕЦ КАК ОрганизацияНаименованиеПолное,
	|	ДанныеДокумента.ОрганизацияИНН,
	|	ДанныеДокумента.ОрганизацияКПП,
	|	ДанныеДокумента.ОрганизацияЮрФизЛицо,
	|	ДанныеДокумента.ОрганизацияНаименование,
	|	ДанныеДокумента.Ответственный,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.ИННРуководителя,
	|	ДанныеДокумента.ИмяФайла,
	|	ДанныеДокумента.ФамилияРуководителя,
	|	ДанныеДокумента.ИмяРуководителя,
	|	ДанныеДокумента.ОтчествоРуководителя,
	|	ДанныеДокумента.КодИФНС,
	|	ДанныеДокумента.НалоговыйПериод,
	|	ДанныеДокумента.КоличествоПодтверждающихДокументов,
	|	ДанныеДокумента.Телефон
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОИП КАК ФИОИП
	|		ПО (ИСТИНА)";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Выбирает данные, необходимые для заполнения утвержденных форм как из спр-ка
//  физлиц, так и из соотв. регистров сведений
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса к данным работников документа.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ДатаАктуальности",	Дата);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заявление.Ссылка,
	|	Заявление.НомерСтроки,
	|	Заявление.ФизЛицо,
	|	Заявление.Фамилия,
	|	Заявление.Имя,
	|	Заявление.Отчество,
	|	Заявление.ДатаРождения,
	|	Заявление.ИНН,
	|	Заявление.ВидДокумента,
	|	Заявление.СерияДокумента,
	|	Заявление.ВидДокумента.КодИМНС,
	|	Заявление.НомерДокумента,
	|	Заявление.ДатаВыдачиДокумента,
	|	Заявление.КемВыданДокумент
	|ПОМЕСТИТЬ ВТСписокФизлиц
	|ИЗ
	|	Документ.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.РаботникиОрганизации КАК Заявление
	|ГДЕ
	|	Заявление.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
	|	И СотрудникиОрганизаций.Физлицо В
	|			(ВЫБРАТЬ
	|				СписокФизЛиц.ФизЛицо
	|			ИЗ
	|				ВТСписокФизлиц КАК СписокФизЛиц)
	|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТРаботникиОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			Организация = &ГоловнаяОрганизация
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						СписокФизЛиц.Ссылка
	|					ИЗ
	|						ВТСотрудники КАК СписокФизЛиц)) КАК РаботникиОрганизации
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаАктуальности
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаАктуальности
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &ДатаАктуальности
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &ДатаАктуальности
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник В
	|			(ВЫБРАТЬ
	|				СписокФизЛиц.Ссылка
	|			ИЗ
	|				ВТСотрудники КАК СписокФизЛиц)
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиЗаявления.НомерСтроки КАК НомерСтроки,
	|	РаботникиЗаявления.ФизЛицо,
	|	РаботникиЗаявления.Фамилия,
	|	РаботникиЗаявления.Имя,
	|	РаботникиЗаявления.Отчество,
	|	РаботникиЗаявления.ИНН,
	|	РаботникиЗаявления.ДатаРождения,
	|	РаботникиЗаявления.ВидДокумента,
	|	РаботникиЗаявления.ВидДокументаКодИМНС,
	|	РаботникиЗаявления.СерияДокумента,
	|	РаботникиЗаявления.НомерДокумента,
	|	РаботникиЗаявления.ДатаВыдачиДокумента,
	|	РаботникиЗаявления.КемВыданДокумент КАК КемВыданДокумент,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ФизЛицо ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации,
	|	МИНИМУМ(ПовторяющиесяСтроки.НомерСтроки) КАК НомерПовторяющейсяСтроки,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПовторяющиесяСтроки.НомерСтроки) ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПовторяющиесяСтроки
	|ИЗ
	|	ВТСписокФизлиц КАК РаботникиЗаявления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботникиОрганизации КАК РаботникиОрганизации
	|		ПО РаботникиЗаявления.ФизЛицо = РаботникиОрганизации.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСписокФизлиц КАК ПовторяющиесяСтроки
	|		ПО РаботникиЗаявления.ФизЛицо = ПовторяющиесяСтроки.ФизЛицо
	|			И РаботникиЗаявления.НомерСтроки < ПовторяющиесяСтроки.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиЗаявления.НомерСтроки,
	|	РаботникиЗаявления.ФизЛицо,
	|	РаботникиЗаявления.Фамилия,
	|	РаботникиЗаявления.Имя,
	|	РаботникиЗаявления.Отчество,
	|	РаботникиЗаявления.ИНН,
	|	РаботникиЗаявления.ДатаРождения,
	|	РаботникиЗаявления.ВидДокумента,
	|	РаботникиЗаявления.ВидДокументаКодИМНС,
	|	РаботникиЗаявления.СерияДокумента,
	|	РаботникиЗаявления.НомерДокумента,
	|	РаботникиЗаявления.ДатаВыдачиДокумента,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ФизЛицо ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	РаботникиЗаявления.КемВыданДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КодИФНС) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан код налогового органа, в который подается заявление!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НалоговыйПериод) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан налоговый период!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ОбщегоНазначенияЗКПереопределяемый.ЭтоЮрЛицо(ВыборкаПоШапкеДокумента.ГоловнаяОрганизация) Тогда
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФамилияРуководителя + ВыборкаПоШапкеДокумента.ИмяРуководителя + ВыборкаПоШапкеДокумента.ОтчествоРуководителя) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указано ФИО руководителя " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("организации") + "!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	// ФизЛицо
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		СтрокаНачалоСообщения = "В строке № "+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки)+":"+ Символы.ПС + Символы.Таб;
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалоСообщения + "- не выбран сотрудник!", Отказ, Заголовок);
	Иначе
		
		СтрокаСообщения = "";
		
		Если ВыборкаПоСтрокамДокумента.ЕстьПовторяющиесяСтроки Тогда
			СтрокаСообщения = СтрокаСообщения + Символы.ПС+Символы.Таб + "- сотрудник повторяется в другой строке документа (" + ВыборкаПоСтрокамДокумента.НомерПовторяющейсяСтроки + ")!";
		КонецЕсли;
		
		Если Не ВыборкаПоСтрокамДокумента.ФизЛицоРаботаетВОрганизации Тогда
			СтрокаСообщения = СтрокаСообщения  + Символы.ПС+Символы.Таб +  "- сотрудник не работает в " + ВыборкаПоШапкеДокумента.ОрганизацияНаименование + "!";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаРождения) Тогда 
			СтрокаСообщения = СтрокаСообщения + Символы.ПС+Символы.Таб + "- дата рождения не указана!";
		ИначеЕсли ВыборкаПоСтрокамДокумента.ДатаРождения > Дата Тогда
			СтрокаСообщения = СтрокаСообщения + Символы.ПС+Символы.Таб + "- дата рождения не должна превышать дату документа!";
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаВыдачиДокумента) И ВыборкаПоСтрокамДокумента.ДатаРождения > ВыборкаПоСтрокамДокумента.ДатаВыдачиДокумента Тогда
			СтрокаСообщения = СтрокаСообщения + Символы.ПС+Символы.Таб + "- дата рождения не должна превышать дату выдачи документа, удостоверяющего личность!";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ИНН) Тогда 
			СтрокаСообщения = СтрокаСообщения + Символы.ПС+Символы.Таб + "- ИНН не указан!";
		ИначеЕсли Не РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ВыборкаПоСтрокамДокумента.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
			СтрокаСообщения = СтрокаСообщения + Символы.ПС+Символы.Таб + "- указан неверный ИНН!";
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидДокумента) Тогда
			СтрокаСообщения = СтрокаСообщения + Символы.ПС+Символы.Таб + "- не указан документ, удостоверяющий личность!";
		ИначеЕсли ВыборкаПоСтрокамДокумента.ВидДокумента <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС10
			И ВыборкаПоСтрокамДокумента.ВидДокумента <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС12
			И ВыборкаПоСтрокамДокумента.ВидДокумента <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС15 
			И ВыборкаПоСтрокамДокумента.ВидДокумента <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС91  Тогда
			
			СтрокаСообщения = СтрокаСообщения + Символы.ПС+Символы.Таб +  "- указан недопустимый виды документа, удостоверяющего личность!";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаВыдачиДокумента) Тогда
			СтрокаСообщения = СтрокаСообщения + Символы.ПС+Символы.Таб + "- не указана дата выдачи документа, удостоверяющего личность!";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СерияДокумента + ВыборкаПоСтрокамДокумента.НомерДокумента) Тогда
			СтрокаСообщения = СтрокаСообщения + Символы.ПС+Символы.Таб +  "- не указаны серия и номер документа, удостоверяющего личность!";
		КонецЕсли;
		
		Если СтрокаСообщения <> "" Тогда
			СтрокаСообщения = "Для сотрудника, указанного в строке № "+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) + СтрокаСообщения;
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
		
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	ВыборкаПоСтрокамДокумента = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать();	
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	КонецЦикла;
	
	//При проведении файл формируем заново 
	Если Не Отказ Тогда
		ВыборкаПоСтрокамДокумента.Сбросить();
		ТекстФайла = СформироватьВыходнойФайл(Отказ, Истина, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл Заявления в НО на подтверждение права зачета авансов по НДФЛ";
	Запись.Данные = ТекстФайла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
	
КонецПроцедуры



