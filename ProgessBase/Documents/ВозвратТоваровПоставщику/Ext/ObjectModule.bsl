//++ Spl_Апроф 26.02.2015 (k.russkih@a-prof.ru) Добавил данный документ в обмен с СОЛВО. Добавли статус солво на формы списка, выбора, документа
Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем УчетнаяПолитикаРегл;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьВозвратаПоставщику()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Номер,
	|	ВозвратТоваровПоставщику.Дата,
	|	ВозвратТоваровПоставщику.ДоговорКонтрагента,
	|	ВозвратТоваровПоставщику.Контрагент,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.СуммаДокумента,
	|	ВозвратТоваровПоставщику.ВалютаДокумента,
	|	ВозвратТоваровПоставщику.УчитыватьНДС,
	|	ВозвратТоваровПоставщику.СуммаВключаетНДС,
	|	ВозвратТоваровПоставщику.Оборудование.(
	|		НомерСтроки,
	|		Номенклатура,
	|		ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаНДС,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия,
	|		ДокументПоступления КАК ОснованиеВозврата
	|	),
	|	ВозвратТоваровПоставщику.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		ВЫРАЗИТЬ(ВозвратТоваровПоставщику.Товары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаНДС,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия,
	|		ДокументПоступления КАК ОснованиеВозврата
	|	),
	|	ВозвратТоваровПоставщику.ВозвратнаяТара.(
	|		НомерСтроки,
	|		Номенклатура,
	|		ВЫРАЗИТЬ(ВозвратТоваровПоставщику.ВозвратнаяТара.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма
	|	)
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратТоваровПоставщику.Оборудование.НомерСтроки,
	|	ВозвратТоваровПоставщику.Товары.НомерСтроки,
	|	ВозвратТоваровПоставщику.ВозвратнаяТара.НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокОборудование = Шапка.Оборудование.Выбрать();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Возврат поставщику");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Сумма    = 0;
	СуммаНДС = 0;
	Ном      = 0;

	// Оборудование
	Пока ВыборкаСтрокОборудование.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокОборудование.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокОборудование);
		
		Если ВыборкаСтрокОборудование.ОснованиеВозврата <> Неопределено Тогда
			ОбластьМакета.Параметры.ОснованиеВозврата            = ВыборкаСтрокОборудование.ОснованиеВозврата;
			ОбластьМакета.Параметры.ОснованиеВозвратаРасшифровка = ВыборкаСтрокОборудование.ОснованиеВозврата;
		Иначе	
			ОбластьМакета.Параметры.ОснованиеВозвратаРасшифровка = ДоговорКонтрагента;													   
			ОбластьМакета.Параметры.ОснованиеВозврата = СокрЛП(ДоговорКонтрагента.Наименование) + 
			   ?(НЕ ЗначениеЗаполнено(ДоговорКонтрагента.Номер), "", " №" + ДоговорКонтрагента.Номер) +
			   ?(НЕ ЗначениеЗаполнено(ДоговорКонтрагента.Дата), "", " от " + Формат(ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy"));
		КонецЕсли;	
		
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокОборудование.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокОборудование);
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокОборудование.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокОборудование.СуммаНДС;
	КонецЦикла;
	
	// Товары
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		Если ВыборкаСтрокТовары.ОснованиеВозврата <> Неопределено Тогда
			ОбластьМакета.Параметры.ОснованиеВозврата            = ВыборкаСтрокТовары.ОснованиеВозврата;
			ОбластьМакета.Параметры.ОснованиеВозвратаРасшифровка = ВыборкаСтрокТовары.ОснованиеВозврата;
		Иначе	
			ОбластьМакета.Параметры.ОснованиеВозвратаРасшифровка = ДоговорКонтрагента;													   
			ОбластьМакета.Параметры.ОснованиеВозврата = СокрЛП(ДоговорКонтрагента.Наименование) + 
			                                                       ?(НЕ ЗначениеЗаполнено(ДоговорКонтрагента.Номер), "", " №" + ДоговорКонтрагента.Номер) +
																   ?(НЕ ЗначениеЗаполнено(ДоговорКонтрагента.Дата), "", " от " + Формат(ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy"));
		КонецЕсли;	
		
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
	КонецЦикла;

	// Тара
	Пока ВыборкаСтрокТара.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТара.Товар) + " (возвратная тара)";
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма = Сумма    + ВыборкаСтрокТара.Сумма;
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + (ВыборкаСтрокОборудование.Количество() + ВыборкаСтрокТовары.Количество())
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьВозвратаПоставщику()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12()

	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",    ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Дата КАК ДатаДокумента,
	|	Номер КАК НомерДокумента,
	|	ВозвратТоваровПоставщику.Организация КАК Руководители,
	|	ВозвратТоваровПоставщику.Организация КАК Организация,
	|	Контрагент КАК Контрагент,
	|	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА ВозвратТоваровПоставщику.Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	БанковскийСчетОрганизации КАК БанковскийСчет,
	|	Контрагент КАК Плательщик,
	|	Сделка,
	|	ДоговорКонтрагента.Представление КАК Основание,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ФизическоеЛицо КАК ОтветственноеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(
	|	ВЫБОР	КОГДА ВозвратТоваровПоставщику.ОтражатьВБухгалтерскомУчете
	|			ТОГДА ЕСТЬNULL(ТаблицаСоответствиеОрганизации.ПодразделениеОрганизации, """")
	|			ИНАЧЕ ВозвратТоваровПоставщику.Подразделение
	|	КОНЕЦ) КАК ПредставлениеПодразделения,
	|	ВЫБОР	КОГДА ВозвратТоваровПоставщику.ОтражатьВБухгалтерскомУчете
	|			ТОГДА ЕСТЬNULL(ТаблицаСоответствиеОрганизации.ПодразделениеОрганизации, """")
	|			ИНАЧЕ ВозвратТоваровПоставщику.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = ВозвратТоваровПоставщику.Склад
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(
	|	ВЫБРАТЬ
	|		СоответсвиеПодразделений.Подразделение,
	|		СоответсвиеПодразделений.Организация,
	|		МИНИМУМ(СоответсвиеПодразделений.ПодразделениеОрганизации) КАК ПодразделениеОрганизации,
	|		МАКСИМУМ(СоответсвиеПодразделений.ПодразделениеОрганизации) КАК ПодразделениеОрг
	|	ИЗ
	|		РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответсвиеПодразделений
	|	ГДЕ
	|		Подразделение = &Подразделение
	|		И Организация = &Организация
	|		И Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		И Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	СГРУППИРОВАТЬ ПО
	|		Подразделение,
	|		Организация
	|	ИМЕЮЩИЕ
	|		КОЛИЧЕСТВО(*) = 1
	|) ТаблицаСоответствиеОрганизации
	|ПО
	|	ТаблицаСоответствиеОрганизации.Подразделение = ВозвратТоваровПоставщику.Подразделение
	|	И ТаблицаСоответствиеОрганизации.Организация = ВозвратТоваровПоставщику.Организация
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Если ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда

		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс", ЭтотОбъект.КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", ЭтотОбъект.КратностьВзаиморасчетов);

	Иначе

		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);

	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Номенклатура                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщику.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВозвратТоваровПоставщику.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения.Представление  КАК БазоваяЕдиницаНаименование,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения                              КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения.Представление            КАК ВидУпаковки,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения.Коэффициент / ВозвратТоваровПоставщику.Коэффициент КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.КоличествоМест > 0 ТОГДА ВозвратТоваровПоставщику.КоличествоМест * ВозвратТоваровПоставщику.ЕдиницаИзмерения.Вес
	|		ИНАЧЕ ВозвратТоваровПоставщику.Количество * ВозвратТоваровПоставщику.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	ВозвратТоваровПоставщику.ХарактеристикаНоменклатуры      КАК Характеристика,
	|	ВозвратТоваровПоставщику.СерияНоменклатуры               КАК Серия,
	|	ВозвратТоваровПоставщику.СтавкаНДС           КАК СтавкаНДС,
	|	ВозвратТоваровПоставщику.Цена     * &Курс / &Кратность КАК Цена,
	|	ВозвратТоваровПоставщику.Количество          КАК Количество,
	|	ВозвратТоваровПоставщику.КоличествоМест      КАК КоличествоМест,
	|	ВозвратТоваровПоставщику.Сумма    * &Курс / &Кратность КАК Сумма,
	|	ВозвратТоваровПоставщику.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	ВозвратТоваровПоставщику.НомерСтроки         КАК НомерСтроки,
	|	0                                   КАК Метка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Оборудование КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Номенклатура                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщику.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВозвратТоваровПоставщику.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения.Представление  КАК БазоваяЕдиницаНаименование,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения                              КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмеренияМест.Коэффициент / ВозвратТоваровПоставщику.Коэффициент КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщику.КоличествоМест > 0 ТОГДА ВозвратТоваровПоставщику.КоличествоМест * ВозвратТоваровПоставщику.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВозвратТоваровПоставщику.Количество * ВозвратТоваровПоставщику.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	ВозвратТоваровПоставщику.ХарактеристикаНоменклатуры      КАК Характеристика,
	|	ВозвратТоваровПоставщику.СерияНоменклатуры               КАК Серия,
	|	ВозвратТоваровПоставщику.СтавкаНДС           КАК СтавкаНДС,
	|	ВозвратТоваровПоставщику.Цена     * &Курс / &Кратность КАК Цена,
	|	ВозвратТоваровПоставщику.Количество          КАК Количество,
	|	ВозвратТоваровПоставщику.КоличествоМест      КАК КоличествоМест,
	|	ВозвратТоваровПоставщику.Сумма    * &Курс / &Кратность КАК Сумма,
	|	ВозвратТоваровПоставщику.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	ВозвратТоваровПоставщику.НомерСтроки         КАК НомерСтроки,
	|	1                                   КАК Метка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Номенклатура                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщику.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВозвратТоваровПоставщику.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	ВозвратТоваровПоставщику.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	ВозвратТоваровПоставщику.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВозвратТоваровПоставщику.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК КоличествоВОдномМесте,
	|	ВозвратТоваровПоставщику.Количество * ВозвратТоваровПоставщику.Номенклатура.ЕдиницаХраненияОстатков.Вес КАК МассаБрутто,
	|	NULL                                                  КАК Характеристика,
	|	NULL                                                  КАК Серия,
	|	""Без НДС""                                           КАК СтавкаНДС,
	|	ВозвратТоваровПоставщику.Цена * &Курс / &Кратность    КАК Цена,
	|	ВозвратТоваровПоставщику.Количество                   КАК Количество,
	|	NULL                                                  КАК КоличествоМест,
	|	ВозвратТоваровПоставщику.Сумма * &Курс / &Кратность   КАК Сумма,
	|	0                                                     КАК СуммаНДС,
	|	ВозвратТоваровПоставщику.НомерСтроки                  КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ВозвратнаяТара КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_ТОРГ12";

	Макет = ПолучитьОбщийМакет("ТОРГ12");

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация,      Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);

	Если Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	   И Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОбластьМакета.Параметры.Основание = Шапка.Основание;
	Иначе
		Если ЗначениеЗаполнено(Шапка.Сделка) Тогда
			ОбластьМакета.Параметры.Основание = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка.Сделка, Строка(Шапка.Сделка.Метаданные().Синоним));
		КонецЕсли;
	КонецЕсли;

	ОбластьМакета.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ДатаДокумента  = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг""");

	Если Шапка.Организация = Шапка.Грузоотправитель Тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;

	ОбластьМакета.Параметры.Подразделение                = Шапка.Подразделение;
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.АдресДоставки                = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
	ОбластьМакета.Параметры.ПредставлениеПоставщика      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакета.Параметры.ПредставлениеПлательщика     = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);

	// Выводим всевозможные коды
	ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
	ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПоставщикПоОКПО  = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ОснованиеНомер   = "";
	ОбластьМакета.Параметры.ОснованиеДата    = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакета);

	НомерСтраницы   = 1;

	КоличествоСтрок = ЗапросТовары.Количество();

	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;
	ИтогоНДСНаСтранице         = 0;
	ИтогоСуммаСНДСНаСтранице   = 0;

	// инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
	ИтогоСуммаСНДС   = 0;
	ИтогоСумма       = 0;
	ИтогоНДС         = 0;
	НомерСтроки      = 0;

	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть докмента
	ЗаголовокТаблицы        = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаВсего      = Макет.ПолучитьОбласть("Всего");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		НомерСтроки = НомерСтроки + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.Номер             = ЗапросТовары.Индекс(ВыборкаСтрок) + 1;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование)
		                                          + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрок)
		                                          + ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "");

		СуммаСНДС = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);

		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			МассаБрутто = 0;
		Иначе
			МассаБрутто = ВыборкаСтрок.МассаБрутто;
			МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
		КонецЕсли;

		Мест        = ВыборкаСтрок.КоличествоМест;
		Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);

		Количество  = ВыборкаСтрок.Количество;
		СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС, 2);
		СуммаБезНДС = СуммаСНДС - СуммаНДС;

		ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;
		ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакета.Параметры.СуммаБезНДС = СуммаБезНДС;

		Если Шапка.СуммаВключаетНДС Тогда
			ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаБезНДС / Количество);
		Иначе
			ОбластьМакета.Параметры.Цена = ВыборкаСтрок.Цена;
		КонецЕсли;
		
		Если НомерСтроки = 1 Тогда // первая срока
			
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьМакетаВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;		
			
			Если НомерСтроки <> 1 И НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивВыводимыхОбластей) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
				
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// очистим итоги по странице
				ИтогоМассаБруттоНаСтранице = 0;
				ИтогоМестНаСтранице        = 0;
				ИтогоКоличествоНаСтранице  = 0;
				ИтогоСуммаНаСтранице       = 0;
				ИтогоНДСНаСтранице         = 0;
				ИтогоСуммаСНДСНаСтранице   = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
		ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
		ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;

		// увеличим итоги по дукументу
		ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
		ИтогоМест        = ИтогоМест        + Мест;
		ИтогоКоличество  = ИтогоКоличество  + Количество;
		ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
		ИтогоНДС         = ИтогоНДС         + СуммаНДС;
		ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакетаВсего.Параметры.ИтогМест        = ИтогоМест;
	ОбластьМакетаВсего.Параметры.ИтогКоличество  = ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы       = ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС         = ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС   = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакетаВсего);
                           
	// Выводим подвал документа
	ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки-ПервыйРазделитель)," ")+ПервыйРазделитель;
	ОбластьПодвала.Параметры.ДатаДокументаДень     = """"+Лев(ПолнаяДатаДокумента,ПервыйРазделитель-1)+"""";
	ОбластьПодвала.Параметры.ДатаДокументаМесяц    = Сред(ПолнаяДатаДокумента,ПервыйРазделитель+1,ВторойРазделитель-ПервыйРазделитель-1);
	ОбластьПодвала.Параметры.ДатаДокументаГод      = Прав(ПолнаяДатаДокумента,ДлинаСтроки-ВторойРазделитель);	

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьПодвала.Параметры.ФИОРуководителя       = Руководитель;
	ОбластьПодвала.Параметры.ФИОГлавБухгалтера     = Бухгалтер;
	ОбластьПодвала.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
	ФамилияИмяОтчествоФизЛица                     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
	ФамилияИмяОтчествоКладовщика                  = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	ОбластьПодвала.Параметры.ФИОКладовщика         = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоКладовщика);

	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтогоМассаБрутто > 0 Тогда
		ОбластьПодвала.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0")+ " " +ЕдиницаИзмеренияВеса.Наименование + ".";
	КонецЕсли;

	Если ИтогоМест > 0 Тогда
		ОбластьПодвала.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	КонецЕсли;

	ОбластьПодвала.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьПодвала.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьПодвала);

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная"  Тогда
		ТабДокумент = ПечатьВозвратаПоставщику();
	ИначеЕсли ИмяМакета = "ТОРГ12" тогда
		ТабДокумент = ПечатьТОРГ12();
	ИначеЕсли ИмяМакета = "ТранспУпаковки" Тогда

		Обр   = Обработки.ТранспортныеУпаковки.Создать();
		Форма = Обр.ПолучитьФорму(,ЭтотОбъект,);
		Если Форма.Открыта() Тогда
			Форма.Активизировать();
		Иначе
			Форма.Открыть();
			Форма.ПервоначальноеЗаполнение(Ссылка);
		КонецЕсли;

	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная,ТОРГ12,ТранспУпаковки,СерийныеНомера","Возврат поставщику","ТОРГ-12 (Товарная накладная)", "Штрихкоды транспортных упаковок", "Список серийных номеров");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Возвращает текстовые участки запроса, выполняемого
// при заполнении на основании ТЧ Товары
Процедура ПолучитьУчасткиЗапросаДляЗаполненияТЧТоварыРегл(ПоляЗапросаРегл, ПоляПоступленияРегл)

	ПоляЗапросаРегл = "
	|	Док.СчетУчетаБУ  КАК СчетУчетаБУ,
	|	Док.СчетУчетаНДС КАК СчетУчетаНДС,
	|	Док.СчетУчетаНУ  КАК СчетУчетаНУ,";

КонецПроцедуры

// Возвращает текстовые участки запроса, выполняемого
// при заполнении на основании ТЧ Товары
Процедура ПолучитьУчасткиЗапросаДляЗаполненияТЧОборудованиеРегл(ПоляЗапросаРегл, ПоляПоступленияРегл)

	ПоляЗапросаРегл = "
	|	Док.СчетУчетаБУ  КАК СчетУчетаБУ,
	|	Док.СчетУчетаНУ  КАК СчетУчетаНУ,
	|	Док.СчетУчетаНДС  КАК СчетУчетаНДС,";

КонецПроцедуры

// Возвращает текстовые участки запроса, выполняемого
// при заполнении на основании ТЧ Товары
Процедура ПолучитьУчасткиЗапросаПоТоварамОрганизацийДляЗаполненияТЧТовары(ПолеОстаткиОрганизации, СоединениеТоваровОрганизаций, ТекстЗапросаСписокНоменклатуры)

	ПолеОстаткиОрганизации = "
	|	ОстаткиОрганизации.КоличествоОстаток                 КАК КоличествоОстатокОрганизации,";
	
	СоединениеТоваровОрганизаций = "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Организация = &Организация) КАК ОстаткиОрганизации
	|ПО
	|	Док.Номенклатура               = ОстаткиОрганизации.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = ОстаткиОрганизации.ХарактеристикаНоменклатуры";
	
КонецПроцедуры

Процедура УчестьОстаткиТоваровОрганизацийПриЗаполненииТЧТовары(КоличествоПоДокументу, Выборка)
	
	КоличествоПоДокументу = Мин(Выборка.КоличествоПоДокументу, 
						   ?(Выборка.КоличествоОстатокОрганизации=NULL, 0, Выборка.КоличествоОстатокОрганизации));
						   
КонецПроцедуры

Процедура ЗаполнитьСтрокуТЧТоварыРегл(СтрокаТабличнойЧасти, Выборка)

	СтрокаТабличнойЧасти.СчетУчетаБУ  = Выборка.СчетУчетаБУ;
	СтрокаТабличнойЧасти.СчетУчетаНДС = Выборка.СчетУчетаНДС;
	СтрокаТабличнойЧасти.СчетУчетаНУ  = Выборка.СчетУчетаНУ;

КонецПроцедуры

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованиюУпр(ДокументОснование, СкладИзШапки = Истина) Экспорт

	ОтражатьВРегламентированномУчете = Организация.ОтражатьВРегламентированномУчете;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДокументОснование.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПустойЗаказ",        Неопределено);
	Запрос.УстановитьПараметр("СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);

	ОснованиеПоступление = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ОснованиеЗаказ       = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику"));
	ОснованиеЗаказПокупателя = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя"));
	ТоварКомитента       = (ДокументОснование.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;
	ТабличнаяЧастьИмя = ?(ОснованиеЗаказПокупателя, "Материалы", "Товары");
	
	ОснованиеПоступлениеВПереработку = Ложь;
	Если ОснованиеПоступление И ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ОснованиеПоступлениеВПереработку = Истина;
		Запрос.УстановитьПараметр("Сделка",  ДокументОснование.Сделка);
		
	ИначеЕсли ОснованиеПоступление Тогда
	
		Если ДокументОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОснование.Сделка) Тогда
				Запрос.УстановитьПараметр("Сделка", ДокументОснование);
			Иначе
				Запрос.УстановитьПараметр("Сделка", ДокументОснование.Сделка);
			КонецЕсли;
		Иначе
			Запрос.УстановитьПараметр("Сделка",  Неопределено);
		КонецЕсли;
	Иначе
		Если ДокументОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			Запрос.УстановитьПараметр("Сделка",      ДокументОснование);
		Иначе
			Запрос.УстановитьПараметр("Сделка",      Неопределено);
		КонецЕсли;
	КонецЕсли;

	Если СкладИзШапки
	 ИЛИ ОснованиеЗаказ Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		КопияТоварыСклад = ДокументОснование.Товары.Выгрузить();
		КопияТоварыСклад.Свернуть("Склад",);
		МассивСклады = КопияТоварыСклад.ВыгрузитьКолонку("Склад");
	КонецЕсли;

	Запрос.УстановитьПараметр("МассивСклады", МассивСклады);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	// Вложенный запрос, ограничивающий список номенклатуры
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ." + ДокументОснованиеИмя + "." + ТабличнаяЧастьИмя + " 
	|ГДЕ Ссылка = &ДокументОснование";

	// Сформируем участки запроса
	ПоляЗапросаРегл        = "";
	ПоляПоступленияРегл    = "";
	ПолеОстаткиОрганизации = "";
	СоединениеТоваровОрганизаций = "";
	ПолучитьУчасткиЗапросаДляЗаполненияТЧТоварыРегл(ПоляЗапросаРегл, ПоляПоступленияРегл);
	
	Если ОтражатьВРегламентированномУчете Тогда
		ПолучитьУчасткиЗапросаПоТоварамОрганизацийДляЗаполненияТЧТовары(ПолеОстаткиОрганизации, СоединениеТоваровОрганизаций, ТекстЗапросаСписокНоменклатуры);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                                КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                                КАК КратностьДокумента,
	|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов   КАК ВалютаВзаиморасчетов,
	|	Док.Ссылка.КурсВзаиморасчетов                        КАК КурсВзаиморасчетов,
	|	Док.Ссылка.КратностьВзаиморасчетов                   КАК КратностьВзаиморасчетов,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,"
	+   ?(ОснованиеЗаказПокупателя, "Док.Номенклатура.СтавкаНДС КАК СтавкаНДС,",	"Док.СтавкаНДС,") + "
	|	ВЫРАЗИТЬ(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Число(15,3))
	|														КАК КоличествоПоДокументу,"
	+	?(ОснованиеЗаказ ИЛИ ОснованиеЗаказПокупателя, "", ПоляЗапросаРегл) + "
	|	ЕстьNull(Остатки.КоличествоОстаток,0)+ЕстьNull(ОстаткиВРознице.КоличествоОстаток,0)  КАК КоличествоОстаток,
	|	ЕстьNull(Резервы.КоличествоОстаток,0)                КАК КоличествоРезервОстаток,
	|	ЕстьNull(РезервыПоДокументу.КоличествоОстаток,0)     КАК КоличествоРезервПоДокументуОстаток,"
	+	ПолеОстаткиОрганизации + "
	|	Док.Цена,";

	Если ОснованиеПоступление Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Док.СерияНоменклатуры,
		|	Док.Склад,"
		+	ПоляПоступленияРегл;
	КонецЕсли; 
	
	Если ТоварКомитента Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ОстаткиПолученных.КоличествоОстаток            КАК КоличествоОстатокПолученных,
		|	ОстаткиПолученных.СуммаВзаиморасчетовОстаток   КАК СуммаПолученныхПолученных,";
		
	КонецЕсли; 

	Запрос.Текст = Запрос.Текст + "
	|	Док.ХарактеристикаНоменклатуры,";
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		Запрос.Текст = Запрос.Текст + "
		|	&ДокументОснование КАК ЗаказПокупателя";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	Док.Заказ КАК ЗаказПокупателя";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + "." + ТабличнаяЧастьИмя + " КАК Док";

	Если ТоварКомитента Тогда

		Запрос.Текст = Запрос.Текст + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПолученные.Остатки(&ДатаОстатков,
		|	                                             ДоговорКонтрагента   = &ДоговорКонтрагента
		|											   И СтатусПолучения = &СтатусПолучения
		|											   И Сделка = &Сделка
		|	                                                     ) КАК ОстаткиПолученных
		|ПО
		|	Док.Номенклатура = ОстаткиПолученных.Номенклатура 
		|   И Док.ХарактеристикаНоменклатуры = ОстаткиПолученных.ХарактеристикаНоменклатуры
		|";

	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Остатки
	|ПО
	|	Док.Номенклатура               = Остатки.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры "+
	?(ОснованиеПоступление,"И Док.Склад = Остатки.Склад","")+"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК ОстаткиВРознице
	|ПО
	|	Док.Номенклатура               = ОстаткиВРознице.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = ОстаткиВРознице.ХарактеристикаНоменклатуры "+
	?(ОснованиеПоступление,"И Док.Склад = ОстаткиВРознице.Склад","")+"

	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Резервы
	|ПО
	|	Док.Номенклатура               = Резервы.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = Резервы.ХарактеристикаНоменклатуры  "
	+?(ОснованиеПоступление,"И Док.Склад = Резервы.Склад","")+"
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК РезервыПоДокументу
	|ПО
	|	Док.Номенклатура               = РезервыПоДокументу.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = РезервыПоДокументу.ХарактеристикаНоменклатуры "
	+?(ОснованиеПоступление,"И Док.Склад = РезервыПоДокументу.Склад","")+"
	|";
	
	Если ОснованиеПоступлениеВПереработку Тогда
		Запрос.Текст = Запрос.Текст + "И &Сделка = РезервыПоДокументу.ДокументРезерва";
	ИначеЕсли ОснованиеЗаказПокупателя Тогда
		Запрос.Текст = Запрос.Текст + "И &ДокументОснование = РезервыПоДокументу.ДокументРезерва";
	Иначе
		Запрос.Текст = Запрос.Текст + "И Док.Заказ = РезервыПоДокументу.ДокументРезерва";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "	
	|"
	+ СоединениеТоваровОрганизаций + "
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование 
	|";

	РезультатЗапроса = Запрос.Выполнить();
	
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	ТабОстатки = РезультатЗапроса.Выгрузить();
	КолонкиСвертки = "Номенклатура,ХарактеристикаНоменклатуры,КоличествоОстаток,КоличествоРезервОстаток";
	Если ОснованиеПоступление Тогда
		КолонкиСвертки = "Номенклатура,ХарактеристикаНоменклатуры,Склад,КоличествоОстаток,КоличествоРезервОстаток";
	КонецЕсли;
	
	ТабОстатки.Свернуть(КолонкиСвертки);

	ДокументПоступления = Неопределено;
	Если ОтражатьВУправленческомУчете Тогда
		УчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(?(ЗначениеЗаполнено(Дата),Дата,ТекущаяДата()),истина);
		Если ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			Если УчетнаяПолитика.СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней Тогда
				ДокументПоступления = ДокументОснование;
			КонецЕсли;	
		Иначе	
			ДокументПоступления = ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		УчетнаяПолитикаРегл   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(?(ЗначениеЗаполнено(Дата),Дата,ТекущаяДата()),Организация, истина);
		Если ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
			Если УчетнаяПолитикаРегл.СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней
			  И	ДокументПоступления = Неопределено Тогда
				ДокументПоступления = ДокументОснование;	  
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(Выборка.КоличествоОстаток) Тогда
			Продолжить; // товары, отстутствующие на складе, в документ не добавляем
		КонецЕсли;

		КоличествоПоДокументу = Выборка.КоличествоПоДокументу;
		
		Если ОтражатьВРегламентированномУчете Тогда
			УчестьОстаткиТоваровОрганизацийПриЗаполненииТЧТовары(КоличествоПоДокументу, Выборка);
		КонецЕсли;
		
		Если ТоварКомитента Тогда
			КоличествоПолученных = ?(Выборка.КоличествоОстатокПолученных = NULL, 0, Выборка.КоличествоОстатокПолученных);
			СуммаВзаиморасчетовПолученных = ?(Выборка.СуммаПолученныхПолученных = NULL, 0, Выборка.СуммаПолученныхПолученных);
		КонецЕсли;

		КоличествоРезервПоДокументуОстаток = ?(Выборка.КоличествоРезервПоДокументуОстаток=NULL, 0, Выборка.КоличествоРезервПоДокументуОстаток);
		КоличествоРезервОстаток = ?(Выборка.КоличествоРезервОстаток=NULL, 0, Выборка.КоличествоРезервОстаток);

		// Сначала (Сч = 1) спишем резервы по заказам, а затем если количество еще
		// не израсходовано, возмем его из свободного остатка (Сч = 2)		
		Для Сч = 1 По 2 Цикл

			Если Сч = 1 Тогда
				Если НЕ ЗначениеЗаполнено(Выборка.КоличествоОстаток) 
				 ИЛИ НЕ ЗначениеЗаполнено(Выборка.ЗаказПокупателя) Тогда
					Продолжить;
				Иначе
					СписКоличество = Мин(КоличествоПоДокументу, Мин(Выборка.КоличествоОстаток, КоличествоРезервПоДокументуОстаток));
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеЗаполнено(Выборка.КоличествоОстаток) 
				 ИЛИ (Выборка.КоличествоОстаток - КоличествоРезервОстаток) = 0 Тогда
					Продолжить;
				Иначе
					СписКоличество = Мин(КоличествоПоДокументу, Выборка.КоличествоОстаток - КоличествоРезервОстаток);
				КонецЕсли;
			КонецЕсли;

			// Не дадим списать больше чем был общий остаток по номенклатуре
			СтруктПоиск = Новый Структура;
			СтруктПоиск.Вставить("Номенклатура",               Выборка.Номенклатура);
			СтруктПоиск.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
			Если ОснованиеПоступление Тогда
				СтруктПоиск.Вставить("Склад",               Выборка.Склад);
			КонецЕсли;
			
			СтрокиСОстатком = ТабОстатки.НайтиСтроки(СтруктПоиск);
			Если СтрокиСОстатком.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
					
			СписКоличество = Мин(СписКоличество, СтрокиСОстатком[0].КоличествоОстаток);
			Если Сч = 1 Тогда 
				СтрокиСОстатком[0].КоличествоРезервОстаток = Макс(СтрокиСОстатком[0].КоличествоРезервОстаток - СписКоличество,0);
			Иначе
				//проверка возможности списать из свободного остатка
				Если СтрокиСОстатком[0].КоличествоОстаток - СтрокиСОстатком[0].КоличествоРезервОстаток < СписКоличество Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
            СтрокиСОстатком[0].КоличествоОстаток = СтрокиСОстатком[0].КоличествоОстаток - СписКоличество;

			Если СтрокиСОстатком[0].КоличествоОстаток = 0 Тогда
				ТабОстатки.Удалить(СтрокиСОстатком[0]);
			КонецЕсли;
			
					
			Если ТоварКомитента Тогда
				СписКоличество = Мин(СписКоличество, КоличествоПолученных);
			КонецЕсли;

			Если СписКоличество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;

			// Дубли строк (например, совпадающая номенклатура и характиеристика, разные серии) 
			// в документе-основании не отслеживаем, считаем, что при необходимости пользователь 
			// сам должен выбрать нужную строку, а не нужную удалить.
			СтрокаТабличнойЧасти.Количество       = СписКоличество * Выборка.КоэффициентХраненияОстатков / Выборка.Коэффициент;   //пересчет в единицы документа
			КоличествоПоДокументу                 = КоличествоПоДокументу - СписКоличество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;

			Если ТоварКомитента Тогда

				СтрокаТабличнойЧасти.Цена         = СуммаВзаиморасчетовПолученных / КоличествоПолученных / (Выборка.КоэффициентХраненияОстатков / Выборка.Коэффициент);

				// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
				Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаВзаиморасчетов, ВалютаДокумента, 
								  Выборка.КурсВзаиморасчетов, Курс,
								  Выборка.КратностьВзаиморасчетов, Кратность);

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                            Истина,
				                            Выборка.УчитыватьНДС,
				                            Выборка.СуммаВключаетНДС,
				                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе

				СтрокаТабличнойЧасти.Цена         = Выборка.Цена;

				// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
				Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
								  Выборка.КурсДокумента, Курс,
								  Выборка.КратностьДокумента, Кратность);

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
											Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
											УчитыватьНДС,
											СуммаВключаетНДС,
											УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			КонецЕсли;

			СтрокаТабличнойЧасти.Качество         = Справочники.Качество.Новый;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если ОснованиеПоступление Тогда
				СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
				СтрокаТабличнойЧасти.Склад             = Выборка.Склад;
			КонецЕсли;

			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

			Если Сч = 1 Тогда
				СтрокаТабличнойЧасти.Заказ     = Выборка.ЗаказПокупателя;
			Иначе
				СтрокаТабличнойЧасти.Заказ     = Неопределено;
			КонецЕсли;

			СтрокаТабличнойЧасти.ДокументПоступления = ДокументПоступления;
			
			Если НЕ (ОснованиеЗаказ ИЛИ ОснованиеЗаказПокупателя) Тогда
				ЗаполнитьСтрокуТЧТоварыРегл(СтрокаТабличнойЧасти, Выборка);
			Иначе
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьОборудованиеПоОснованиюУпр(ДокументОснование, ТабЧасть = Неопределено) Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад",             Склад);
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ПустойЗаказ",       Неопределено);

	ОснованиеПоступление = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ОснованиеЗаказ       = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику"));

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;
	Если ТабЧасть = Неопределено Тогда
		ТабЧасть = Оборудование;
	КонецЕсли;
	
	Если ОснованиеЗаказ Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		КопияТоварыСклад = ДокументОснование.Оборудование.Выгрузить();
		КопияТоварыСклад.Свернуть("Склад",);
		МассивСклады = КопияТоварыСклад.ВыгрузитьКолонку("Склад");
	КонецЕсли;

	Запрос.УстановитьПараметр("МассивСклады", МассивСклады);	
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	// Вложенный запрос, ограничивающий список номенклатуры
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ." + ДокументОснованиеИмя + ".Оборудование 
	|ГДЕ Ссылка = &ДокументОснование";

	// Сформируем участки запроса
	ПоляЗапросаРегл        = "";
	ПоляПоступленияРегл    = "";
	ПолеОстаткиОрганизации = "";
	СоединениеТоваровОрганизаций = "";
	ПолучитьУчасткиЗапросаДляЗаполненияТЧОборудованиеРегл(ПоляЗапросаРегл, ПоляПоступленияРегл);
	ПолучитьУчасткиЗапросаПоТоварамОрганизацийДляЗаполненияТЧТовары(ПолеОстаткиОрганизации, СоединениеТоваровОрганизаций, ТекстЗапросаСписокНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                         КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                         КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
	|	Док.СтавкаНДС,
	|	Док.Количество                                       КАК КоличествоПоДокументу,"
	+	?(ОснованиеЗаказ, "", ПоляЗапросаРегл) + "
	|	Естьnull(Остатки.КоличествоОстаток,0)+Естьnull(ОстаткиВРознице.КоличествоОстаток,0) КАК КоличествоОстаток,
	|	Резервы.КоличествоОстаток                            КАК КоличествоРезервОстаток,"
	+	ПолеОстаткиОрганизации + "
	|	Док.Цена,";

	Если ОснованиеПоступление Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Док.СерияНоменклатуры,
		|	Док.Склад,"
		+	ПоляПоступленияРегл;
	КонецЕсли; 

	Запрос.Текст = Запрос.Текст + "
	|	Док.ХарактеристикаНоменклатуры";
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Оборудование КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Остатки
	|ПО
	|	Док.Номенклатура               = Остатки.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК ОстаткиВРознице
	|ПО
	|	Док.Номенклатура               = ОстаткиВРознице.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = ОстаткиВРознице.ХарактеристикаНоменклатуры

	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Резервы
	|ПО
	|	Док.Номенклатура               = Резервы.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = Резервы.ХарактеристикаНоменклатуры
	|
	|"
	+ СоединениеТоваровОрганизаций + "
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование 
	|";

	РезультатЗапроса = Запрос.Выполнить();
				 
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(Выборка.КоличествоОстаток) Тогда
			Продолжить; // товары, отстутствующие на складе, в документ не добавляем
		КонецЕсли;  

		КоличествоПоДокументу = Выборка.КоличествоПоДокументу;
		УчестьОстаткиТоваровОрганизацийПриЗаполненииТЧТовары(КоличествоПоДокументу, Выборка);
		
		КоличествоРезервОстаток = ?(Выборка.КоличествоРезервОстаток=NULL, 0, Выборка.КоличествоРезервОстаток);

		СписКоличество = Мин(КоличествоПоДокументу, Выборка.КоличествоОстаток - КоличествоРезервОстаток);
        Если СписКоличество<=0 Тогда Продолжить; КонецЕсли;
		СтрокаТабличнойЧасти = ТабЧасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;

		// Дубли строк (например, совпадающая номенклатура и характиеристика, разные серии) 
		// в документе-основании не отслеживаем, считаем, что при необходимости пользователь 
		// сам должен выбрать нужную строку, а не нужную удалить.
		СтрокаТабличнойЧасти.Количество       = СписКоличество;
		КоличествоПоДокументу                 = КоличествоПоДокументу - СписКоличество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;
		Если ОснованиеПоступление Тогда
			СтрокаТабличнойЧасти.Склад			  = Выборка.Склад;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Цена             = Выборка.Цена;

		// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
		Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
						  Выборка.КурсДокумента, Курс,
						  Выборка.КратностьДокумента, Кратность);

		СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
									Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
									Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
									УчитыватьНДС,
									СуммаВключаетНДС,
									УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если ОснованиеПоступление Тогда
			СтрокаТабличнойЧасти.СерияНоменклатуры   = Выборка.СерияНоменклатуры;
		КонецЕсли;
			
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		Если ТабЧасть = Товары Тогда
			СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
		КонецЕсли;

		СтрокаТабличнойЧасти.ДокументПоступления = ДокументОснование;

		Если НЕ ОснованиеЗаказ Тогда
			ЗаполнитьСтрокуТЧТоварыРегл(СтрокаТабличнойЧасти, Выборка);
		Иначе
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Оборудование", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

Процедура ПолучитьУчасткиЗапросаДляЗаполненияТЧВозвратнаяТараРегл(ПоляЗапросаРегл)

	ПоляЗапросаРегл = "
	|	Док.СчетУчетаБУ                                      КАК СчетУчетаБУ,
	|	Док.СчетУчетаНУ                                      КАК СчетУчетаНУ,";

КонецПроцедуры

// Процедура выполняет заполнение возвратной тары по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованиюУпр(ДокументОснование, СкладИзШапки = Истина) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Если СкладИзШапки Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		КопияТоварыСклад = ДокументОснование.ВозвратнаяТара.Выгрузить();
		КопияТоварыСклад.Свернуть("Склад",);
		МассивСклады = КопияТоварыСклад.ВыгрузитьКолонку("Склад");
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивСклады", МассивСклады);
    Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("ДатаОстатков", 		ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;

	// Вложенный запрос, ограничивающий список номенклатуры
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара 
	|ГДЕ Ссылка = &ДокументОснование";

	// Сформируем участки запроса
	ПоляЗапросаРегл = "";
	Если НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
		ПолучитьУчасткиЗапросаДляЗаполненияТЧВозвратнаяТараРегл(ПоляЗапросаРегл);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|   ИНАЧЕ
	|		1
	|	КОНЕЦ                         КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|		1
	|   КОНЕЦ                         КАК КратностьДокумента,
	|	Док.Номенклатура,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент  КАК КоэффициентХраненияОстатков,"
	+ ?(СкладИзШапки, "&Склад", "Док.Склад")+"                          КАК Склад,
	|	ЕстьNull(Остатки.КоличествоОстаток,0)                 КАК КоличествоОстатокКомпании,
	|	Док.Количество                                        КАК КоличествоПоДокументу,
	|	Док.Цена,"
	+ ПоляЗапросаРегл + "
	|	Док.Заказ КАК ЗаказПокупателя,
	|	ЕстьNull(ОстаткиНаСкладах.КоличествоОстаток,0)+ЕстьNull(ОстаткиВРознице.КоличествоОстаток,0)  КАК КоличествоОстатокНаСкладах,
	|	ЕстьNull(Резервы.КоличествоОстаток,0)                 КАК КоличествоРезервОстаток,
    |	ЕстьNull(РезервыПоДокументу.КоличествоОстаток,0)      КАК КоличествоРезервПоДокументуОстаток

	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПолученные.Остатки(&ДатаОстатков,  Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                                         И ДоговорКонтрагента = &ДоговорКонтрагента
	|                                                            И СтатусПолучения = &СтатусПолучения) КАК Остатки
	|ПО
	|	Док.Номенклатура = Остатки.Номенклатура 
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков,Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ")
	|	И Склад в (&МассивСклады) ) КАК ОстаткиНаСкладах
	|ПО
	|	Док.Номенклатура               = ОстаткиНаСкладах.Номенклатура "+
	?(не СкладИзШапки,"И Док.Склад = ОстаткиНаСкладах.Склад","")+"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК ОстаткиВРознице
	|ПО
	|	Док.Номенклатура               = ОстаткиВРознице.Номенклатура "+
	?(не СкладИзШапки,"И Док.Склад = ОстаткиВРознице.Склад","")+"
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Резервы
	|ПО
	|	Док.Номенклатура               = Резервы.Номенклатура "
	+?(не СкладИзШапки,"И Док.Склад = Резервы.Склад","")+"
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК РезервыПоДокументу
	|ПО
	|	Док.Номенклатура               = РезервыПоДокументу.Номенклатура "
	+?(не СкладИзШапки,"И Док.Склад = РезервыПоДокументу.Склад","")+"
	| И Док.Заказ = РезервыПоДокументу.ДокументРезерва
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование И
	|	Остатки.КоличествоОстаток > 0 
	|	И ЕстьNull(ОстаткиНаСкладах.КоличествоОстаток,0)+ЕстьNull(ОстаткиВРознице.КоличествоОстаток,0)>0
	|ИТОГИ Максимум(КоличествоОстатокКомпании), Максимум(КоличествоОстатокНаСкладах), Максимум(КоличествоРезервОстаток) ПО Склад, Док.Номенклатура";

	РезультатЗапроса = Запрос.Выполнить();
	
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	ВыборкаСклад = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСклад.Следующий() цикл
		ВыборкаНоменклатура = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			КоличествоОстатокКомпании = ВыборкаНоменклатура.КоличествоОстатокКомпании;
			КоличествоОстатокНаСкладах = ВыборкаНоменклатура.КоличествоОстатокНаСкладах;
			КоличествоРезервОстаток = ВыборкаНоменклатура.КоличествоРезервОстаток;
			Выборка = ВыборкаНоменклатура.Выбрать();
			Пока Выборка.Следующий() Цикл

				Если КоличествоОстатокКомпании=0 Тогда
					Продолжить; // товары, отстутствующие на складе, в документ не добавляем
				КонецЕсли;  

				РезервПоДокументу = Выборка.КоличествоРезервПоДокументуОстаток;
				ДоступноКСписанию = Мин(КоличествоОстатокКомпании, Выборка.КоличествоПоДокументу, Макс(КоличествоОстатокНаСкладах - (КоличествоРезервОстаток-РезервПоДокументу), 0));
				Если  ДоступноКСписанию<=0 Тогда Продолжить; КонецЕсли;
				//количество из резерва
				Если РезервПоДокументу > 0 Тогда
					РезервПоДокументу = мин(РезервПоДокументу, ДоступноКСписанию);
					СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();
					
					СтрокаВозвратнойТары.Номенклатура = Выборка.Номенклатура;
					СтрокаВозвратнойТары.Количество   = РезервПоДокументу;
					СтрокаВозвратнойТары.Цена         = Выборка.Цена;
					
					СтрокаВозвратнойТары.Заказ = Выборка.ЗаказПокупателя;
					
					// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
					СтрокаВозвратнойТары.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, 
					Выборка.ВалютаДокумента, ВалютаДокумента,
					Выборка.КурсДокумента, Курс,
					Выборка.КратностьДокумента, Кратность);
					
					ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
					
					Если СкладИзШапки Тогда
						СтрокаВозвратнойТары.Склад = Склад;
					Иначе
						СтрокаВозвратнойТары.Склад = ?(НЕ ЗначениеЗаполнено(Выборка.Склад), Склад, Выборка.Склад);
					КонецЕсли;
					ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаВозвратнойТары, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
					
					Если НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
						Если ЗначениеЗаполнено(Выборка.СчетУчетаБУ) Тогда
							СтрокаВозвратнойТары.СчетУчетаБУ = Выборка.СчетУчетаБУ;
						КонецЕсли;
						Если ЗначениеЗаполнено(Выборка.СчетУчетаНУ) Тогда
							СтрокаВозвратнойТары.СчетУчетаНУ = Выборка.СчетУчетаНУ;
						КонецЕсли;
					КонецЕсли;
					КоличествоОстатокКомпании = КоличествоОстатокКомпании - РезервПоДокументу;
					КоличествоОстатокНаСкладах = КоличествоОстатокНаСкладах - РезервПоДокументу;
		            ДоступноКСписанию = ДоступноКСписанию - РезервПоДокументу;
					КоличествоРезервОстаток = Макс(КоличествоРезервОстаток - РезервПоДокументу,0);
					Если ДоступноКСписанию = 0 ИЛИ КоличествоОстатокКомпании<=0 или КоличествоОстатокНаСкладах<=0 Тогда 
						Продолжить; 
					КонецЕсли;
				КонецЕсли;
				//количество из свободного остатка
				СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

				СтрокаВозвратнойТары.Номенклатура = Выборка.Номенклатура;
				СтрокаВозвратнойТары.Количество   = ДоступноКСписанию;
				СтрокаВозвратнойТары.Цена         = Выборка.Цена;
				// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
				СтрокаВозвратнойТары.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, 
								  Выборка.ВалютаДокумента, ВалютаДокумента,
								  Выборка.КурсДокумента, Курс,
								  Выборка.КратностьДокумента, Кратность);

				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);

				Если СкладИзШапки Тогда
					СтрокаВозвратнойТары.Склад = Склад;
				Иначе
					СтрокаВозвратнойТары.Склад = ?(НЕ ЗначениеЗаполнено(Выборка.Склад), Склад, Выборка.Склад);
				КонецЕсли;
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаВозвратнойТары, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
				
				Если НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
					Если ЗначениеЗаполнено(Выборка.СчетУчетаБУ) Тогда
						СтрокаВозвратнойТары.СчетУчетаБУ = Выборка.СчетУчетаБУ;
					КонецЕсли;
					Если ЗначениеЗаполнено(Выборка.СчетУчетаНУ) Тогда
						СтрокаВозвратнойТары.СчетУчетаНУ = Выборка.СчетУчетаНУ;
					КонецЕсли;
				КонецЕсли;
				КоличествоОстатокКомпании = КоличествоОстатокКомпании - ДоступноКСписанию;
				КоличествоОстатокНаСкладах = КоличествоОстатокНаСкладах - ДоступноКСписанию;
                Если КоличествоОстатокКомпании<=0 или КоличествоОстатокНаСкладах<=0 Тогда 
					Прервать; 
				КонецЕсли;
			КонецЦикла;  //Пока Выборка.Следующий() Цикл
		КонецЦикла;  //Пока ВыборкаНоменклатура.Следующий() Цикл
	КонецЦикла; //Пока ВыборкаСклад.Следующий() цикл


КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОснованию()

Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетов);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансов);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТаре",			СчетаУчета.СчетУчетаТары);
		
		Если ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			СтруктураСчетов.Вставить("СчетУчетаРасчетовПоПретензиям",	ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ);
		ИначеЕсли СчетУчетаРасчетовСКонтрагентом.Валютный тогда
			СтруктураСчетов.Вставить("СчетУчетаРасчетовПоПретензиям",	ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал);
		Иначе
			СтруктураСчетов.Вставить("СчетУчетаРасчетовПоПретензиям",	ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям);
		КонецЕсли; 
				
		СтруктураСчетов.Вставить("СчетУчетаДоходовБУ",				СчетаУчета.СчетУчетаДоходовПоТареБУ);
		СтруктураСчетов.Вставить("СчетУчетаРасходовБУ",				СчетаУчета.СчетУчетаРасходовПоТареБУ);
		СтруктураСчетов.Вставить("СчетУчетаДоходовНУ",				СчетаУчета.СчетУчетаДоходовПоТареНУ);
		СтруктураСчетов.Вставить("СчетУчетаРасходовНУ",				СчетаУчета.СчетУчетаРасходовПоТареНУ);
		СтруктураСчетов.Вставить("СтатьяДоходовИРасходов",			СчетаУчета.СтатьяПрочихДоходовРасходовПоТаре);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;
	
КонецФункции

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Заполним вид операции.
		ВидыОперацийВозвратТоваровПоставщику       = Перечисления.ВидыОперацийВозвратТоваровПоставщику;
		ВидыОперацийЗаказПоставщику                = Перечисления.ВидыОперацийЗаказПоставщику;
		ВидОперации = ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
        Если Основание.ВидОперации = ВидыОперацийЗаказПоставщику.Оборудование Тогда
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.Оборудование;
		КонецЕсли;

		Сделка = Основание; // заполняем сделку заказом поставщику

		Если Сделка.Проведен Тогда
			// Заполним табличные части по заказу поставщику.
			ЗаполнитьТоварыПоОснованиюУпр(Сделка);
			ЗаполнитьВозвратнуюТаруПоОснованиюУпр(Сделка);
			ЗаполнитьОборудованиеПоОснованиюУпр(Сделка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполненияУпр()

// Дополняет новую строку реквизитами регламентированного учета из исходной строки
//
// Параметры:
// НоваяСтрока    - строка, которую необходимо дополнить
// ИсходнаяСтрока - строка, из которой берутся исходные данные
//
Процедура ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока)

	НоваяСтрока.СчетУчетаБУ         = ИсходнаяСтрока.СчетУчетаБУ;
	НоваяСтрока.СчетУчетаНУ         = ИсходнаяСтрока.СчетУчетаНУ;
	НоваяСтрока.СчетУчетаНДС        = ИсходнаяСтрока.СчетУчетаНДС;

КонецПроцедуры // ДополнитьСтрокуРегл

// Заолняет табличную часть по сериям номенклатуры при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 
	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	
	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	СкладИзШапки    =  (Не мУказаниеСкладовВТЧ) И (ЗначениеЗаполнено(Склад));
		             
	СкладОстатков = ?(СкладИзШапки, Склад, Товары.ВыгрузитьКолонку("Склад"));
	
	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(СкладОстатков, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям);
	ТоварыТабличнойЧасти=Товары.Выгрузить();
	Товары.Очистить();

	ТаблицаСерий.Сортировать("Номенклатура, СрокГодности, СерияНоменклатурыПредставление");
	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании");

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтуктураПоиска.Вставить("Склад",                      ИсходнаяСтрока.Склад);
		
		флЗаполнятьИзРезервов = ложь;
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда //происходит всегда за счет резервов
			ТекЗаказ = Сделка
		Иначе
			ТекЗаказ = ИсходнаяСтрока.Заказ;
		КонецЕсли;
		Если ТипЗнч(ТекЗаказ)=Тип("ДокументСсылка.ЗаказПокупателя") И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании Тогда
			Если ТекЗаказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтуктураПоиска.Вставить("ДокументРезерва",    ТекЗаказ);
				флЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;

		Если флЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;

		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = Строка.СерияНоменклатуры;
			НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
			НоваяСтрока.ДокументПоступления        = ИсходнаяСтрока.ДокументПоступления;
			НоваяСтрока.Заказ			           = ИсходнаяСтрока.Заказ;
			НоваяСтрока.Качество                   = ИсходнаяСтрока.Качество;
			НоваяСтрока.Склад                      = ИсходнаяСтрока.Склад;
			НоваяСтрока.Количество                 = СписанноеКоличество; 

			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);

			ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);
			
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры          = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
				НоваяСтрока.ДокументПоступления        = ИсходнаяСтрока.ДокументПоступления;
				НоваяСтрока.Заказ			           = ИсходнаяСтрока.Заказ;
				НоваяСтрока.Качество                   = ИсходнаяСтрока.Качество;
				НоваяСтрока.Склад                      = ИсходнаяСтрока.Склад;
				НоваяСтрока.Количество                 = КоличествоОсталосьПогасить;
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);

				ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоСериям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента) 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование  Тогда

	 	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
		Иначе
			Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		
		Статус = Перечисления.СтатусыПартийТоваров.ВПереработку; 
		
	Иначе    

		Сообщить("По виду операции """ +
		ВидОперации + """ не удалось определить статус партии товаров!", СтатусСообщения.Важное); 
		
	КонецЕсли; 

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПриходаУпр()

// Процедура формирует таблицы документа, вляиющие на состояние расчетов с контрагентами.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаОборудование) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Удалить ("Количество");
	СтруктураПолей.Вставить("КоличествоДок"      , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"              , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"           , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ЗаказПокупателя"    , "Заказ");
	СтруктураПолей.Вставить("Качество"           , "Качество");
	СтруктураПолей.Вставить("Склад"              , "Склад");
	СтруктураПолей.Вставить("Цена"               , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ВидСклада"          , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ДокументЗакупки"    , "ДокументПоступления");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя", "Заказ.ВидОперации");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("СчетУчетаНДС"		 , "СчетУчетаНДС");

	ДополнитьСтруктуруПолейТоварыРегл(СтруктураПолей);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Оборудование".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Удалить ("Количество");
	СтруктураПолей.Вставить("КоличествоДок"      , "Количество"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("Склад"              , "Склад");
	СтруктураПолей.Вставить("Цена"               , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ВидСклада"          , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"              , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"           , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ДокументЗакупки"    , "ДокументПоступления");
	СтруктураПолей.Вставить("СчетУчетаНДС"		 , "СчетУчетаНДС");

	ДополнитьСтруктуруПолейТоварыРегл(СтруктураПолей);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;	
	КонецЕсли;

	РезультатЗапросаОборудование = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураПолей,СтруктураСложныхПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТара();
	СтруктураПолей.Удалить ("Количество");
	СтруктураПолей.Вставить("КоличествоДок"      , "Количество"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("ЗаказПокупателя"    , "Заказ");
	СтруктураПолей.Вставить("Склад"              , "Склад");
	СтруктураПолей.Вставить("ВидСклада"          , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя", "Заказ.ВидОперации");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");

	ДополнитьСтруктуруПолейВозвратнаяТараРегл(СтруктураПолей);

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу товаров и тары для проведения.
	ТаблицаПоТоварам    = ПодготовитьТаблицуТоваров( РезультатЗапросаПоТоварам,    СтруктураШапкиДокумента);
	ТаблицаОборудование = ПодготовитьТаблицуТоваров( РезультатЗапросаОборудование, СтруктураШапкиДокумента);
	ТаблицаПоТаре       = ПодготовитьТаблицуТары   ( РезультатЗапросаПоТаре,       СтруктураШапкиДокумента);
	
	//Заполняем счета учета номенклатуры в табличных частях
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 		СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Оборудование", 	ТаблицаОборудование, 	СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 			СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, ?(СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, Истина, СтруктураШапкиДокумента.НДСВключенВСтоимость));
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаОборудование, СтруктураШапкиДокумента, ?(СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, Истина, СтруктураШапкиДокумента.НДСВключенВСтоимость));
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТаре   , СтруктураШапкиДокумента, ?(СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, Истина, СтруктураШапкиДокумента.НДСВключенВСтоимость));
		
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// При выгрузке таблицы из документа количество имеет неотрицательный тип значения,
	// нам необходимы отрицательные числа
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Стоимость");

	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
        Если ТипЗнч(СтрокаТаблицы.КоличествоДок)= Тип("Число") Тогда
			СтрокаТаблицы.Количество  = - СтрокаТаблицы.КоличествоДок;
		Иначе
			СтрокаТаблицы.Количество = 0;
			СтрокаТаблицы.КоличествоДок = 0;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			СтрокаТаблицы.ЗаказПокупателя = Сделка;
		КонецЕсли;

	КонецЦикла;
	
	// важен порядок: сначала Регл, потом Упр
	// (использование колонки Стоимость как врем. переменной)
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;

	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий И НЕ (СтруктураШапкиДокумента.НДСВключенВСтоимость) Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СуммаВзаиморасчетов = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, 
		                                 КратностьВзаиморасчетов);
										 

		СтрокаТаблицы.НДСУпр = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)
    ТаблицаТоваров.Колонки.Добавить("СуммаРегл"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
    ДанныеРегл    = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);

	ЕстьСкладВТабличнойЧасти = (НЕ ТаблицаТоваров.Колонки.Найти("Склад") = Неопределено);
	Если ЕстьСкладВТабличнойЧасти Тогда
		ТаблицаТоваров.Колонки.Добавить("СкладПроводок", Новый описаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СуммаРегл = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
		                                 мВалютаРегламентированногоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента, ДанныеРегл.Курс, СтруктураШапкиДокумента.КратностьДокумента, 
		                                 ДанныеРегл.Кратность);
								 

        Если ЕстьСкладВТабличнойЧасти Тогда
			Если СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
				СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.Склад;
			Иначе
				СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.Склад;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// При выгрузке таблицы из документа количество имеет неотрицательный тип значения,
	// нам необходимы отрицательные числа
	ТаблицаТары.Колонки.Добавить("Количество");
	ТаблицаТары.Колонки.Добавить("Стоимость");

	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.Количество  =  СтрокаТаблицы.КоличествоДок;

	КонецЦикла;

	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента);

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
	                     ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;

	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов");
	ДанныеДоговора = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, Дата);

	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаВзаиморасчетов =  МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
		                                 КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("ПроводкаСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	ВалютаРег      = мВалютаРегламентированногоУчета;
	Данные         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
	ДанныеДоговора = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, Дата);

	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость,
			                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, ВалютаРег,
			                                 ДанныеДоговора.Курс,      Данные.Курс,
			                                 ДанныеДоговора.Кратность, Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

// Заполнение структуры обязательных полей регламентированными реквизитами
//
Процедура ДополнитьСтруктуруОбязательныхПолейРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоПретензиям");
		КонецЕсли;

		Если ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения упр. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с НТТ!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	Если  Не СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		СтруктураОбязательныхПолей.Вставить("ПодразделениеОрганизации");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		        "По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		        |Заполните поле ""Заказ поставщику""!");
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		СтруктураОбязательныхПолей.Вставить( "Сделка", 
			"Возврат из переработку ведется только по заказам. Заполните поле ""Заказ покупателя""!");
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет структуру обязательных полей ТЧ Товары регламентированными реквизитам
Процедура ДополнитьСтруктуруОбязательныхПолейТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТовары();

	// <- Шевченков №51287 20160414
	Если не ЕстьСтрокиБезЦеныБлокПроведения(ТаблицаПоТоварам) И СтруктураОбязательныхПолей.Свойство("Сумма") Тогда // Шевченков №51287 20160414		
		СтруктураОбязательныхПолей.Удалить("Сумма");		
	КонецЕсли;
	// ->
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	СтруктураОбязательныхПолей.Вставить("Качество");

	ДополнитьСтруктуруОбязательныхПолейТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь склада НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");
		
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Оборудование".
//
// Параметры:
// Параметры: 
//  ТаблицаОборудование     - таблица значений, содержащая данные для проведения и проверки ТЧ Оборудование
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОборудование(ТаблицаОборудование, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТовары();
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оборудование", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверить что вид салада Оптовый
	ПроверитьЧтоСкладОптовый(ТаблицаОборудование, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Оборудование", ТаблицаОборудование, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Оборудование", ТаблицаОборудование, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Оборудование", ТаблицаОборудование, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОборудование()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТара();

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь позовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь склада НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок, "ВидСклада");

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Функция удаляет из исходой таблицы строки по которым не надо делать резерв товаров под заказ покупателя.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиБезРезерваПодЗаказПокупателя(ТабТовары)

	// Если в ТЧ есть ссылки на заказы, то надо списать резерв
	ТаблицаПоТоварамИзРезерва = ТабТовары.Скопировать();
	ТаблицаПоТоварамИзРезерва.Колонки.Добавить("ДокументРезерва");
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамИзРезерва.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамИзРезерва.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			 ТаблицаПоТоварамИзРезерва.Удалить(СтрокаТаблицы);
		Иначе 
			СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.ЗаказПокупателя;
			//для ТЧ Возвратная тара в таблице хранятся положительные количества, для них не требуется изменять знак
			СтрокаТаблицы.Количество = ?(СтрокаТаблицы.Количество>0,СтрокаТаблицы.Количество,-СтрокаТаблицы.Количество);
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамИзРезерва;
	
КонецФункции // УдалитьСтрокиБезРезерваПодЗаказПокупателя()

// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ, Заголовок)

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда

		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если Оборудование.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Оборудование",   СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		Если НЕ глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки") Тогда
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
		КонецЕсли;

		Если НЕ Отказ Тогда
		
			ОтборСкладОптовый   = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
			ОтборСкладРозничный = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
					
			ТаблицаТоварыОпт  = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладОптовый  ).Выгрузить();
			ТаблицаТоварыРозн = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладРозничный).Выгрузить();
			
			СтруктТаблицДокументаОпт = Новый Структура;
			СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТоварам",    ТаблицаТоварыОпт);
			СтруктТаблицДокументаОпт.Вставить("ТаблицаОборудование", ТаблицаОборудование);
					
			СтруктТаблицДокументаРозн = Новый Структура;
			СтруктТаблицДокументаРозн.Вставить("ТаблицаПоТоварам", ТаблицаТоварыРозн);
			
			ТаблицыДанныхДокументаОпт  = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокументаОпт);
			ТаблицыДанныхДокументаРозн = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице,  СтруктТаблицДокументаРозн);
				
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаОпт, "Качество", Справочники.Качество.Новый, "ТаблицаОборудование");
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаОпт,  Дата);
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице,  ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаРозн, Дата);
			
			// Движения расход по ТАРЕ
			ТаблицаТараОпт    = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре, ОтборСкладОптовый  ).Выгрузить();
			ТаблицаТараРозн   = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре, ОтборСкладРозничный).Выгрузить();
			
			СтруктТаблицДокументаОпт  = Новый Структура;
			СтруктТаблицДокументаРозн = Новый Структура;
			
			СтруктТаблицДокументаОпт .Вставить("ТаблицаПоТаре", ТаблицаТараОпт);
			СтруктТаблицДокументаРозн.Вставить("ТаблицаПоТаре", ТаблицаТараРозн);
			
			ТаблицыДанныхДокументаОпт  = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокументаОпт);
			ТаблицыДанныхДокументаРозн = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице,  СтруктТаблицДокументаРозн);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаОпт,  "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаРозн, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаОпт,  Дата);
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице,  ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаРозн, Дата);
			
		КонецЕсли;
		
	Иначе

		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если Оборудование.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Оборудование", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		
		// ТОВАРЫ, ТАРА И ОБОРУДОВАНИЕ ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
		Если НЕ Отказ Тогда
		
			ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
			ТаблицаПоТоварамПлюс.Колонки.Удалить(ТаблицаПоТоварамПлюс.Колонки.Количество);
			ТаблицаПоТоварамПлюс.Колонки.КоличествоДок.Имя = "Количество";
		
			ТаблицаОборудованиеПлюс = ТаблицаОборудование.Скопировать();
			ТаблицаОборудованиеПлюс.Колонки.Удалить(ТаблицаОборудованиеПлюс.Колонки.Количество);
			ТаблицаОборудованиеПлюс.Колонки.КоличествоДок.Имя = "Количество";
		
			ТаблицаПоТареПлюс = ТаблицаПоТаре.Скопировать();
			ТаблицаПоТареПлюс.Колонки.Удалить(ТаблицаПоТареПлюс.Колонки.Количество);
			ТаблицаПоТареПлюс.Колонки.КоличествоДок.Имя = "Количество";
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    ТаблицаПоТоварамПлюс);
			СтруктТаблицДокумента.Вставить("ТаблицаОборудование", ТаблицаОборудованиеПлюс);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",       ТаблицаПоТареПлюс);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",            Склад,                                            "ТаблицаОборудование");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаОборудование, ТаблицаПоТаре");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Оборудование,   "ТаблицаОборудование");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;

	// ТОВАРЫ И ОБОРУДОВАНИЕ ПО РЕГИСТРУ Закупки.
	Если НЕ Отказ
	   И НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки
	Тогда
		
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
		
		КопияТаблицыОборудование = ТаблицаОборудование.Скопировать();
		КопияТаблицыОборудование.ЗагрузитьКолонку(КопияТаблицыОборудование.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");

		КопияТаблицыТоваров.Колонки.НДС   .Имя = "_НДС";
		КопияТаблицыТоваров.Колонки.НДСУпр.Имя = "НДС";
		
		КопияТаблицыОборудование.Колонки.НДС   .Имя = "_НДС";
		КопияТаблицыОборудование.Колонки.НДСУпр.Имя = "НДС";
		
		// <- Шевченков №54944
		КопияТаблицыТоваров.Колонки.СуммаВзаиморасчетов.Имя = "ПРГ_СтоимостьВал"; 
		КопияТаблицыТоваров.Колонки.НДСВал.Имя = "ПРГ_НДСВал";
		Если КопияТаблицыТоваров.Колонки.Найти("ПРГ_ВалютаДокумента") = Неопределено Тогда
			КопияТаблицыТоваров.Колонки.Добавить("ПРГ_ВалютаДокумента", новый описаниетипов("СправочникСсылка.Валюты"));			
		КонецЕсли;
		// ->
		
		// <- Шевченков №54944
		КопияТаблицыОборудование.Колонки.СуммаВзаиморасчетов.Имя = "ПРГ_СтоимостьВал";
		КопияТаблицыОборудование.Колонки.НДСВал.Имя = "ПРГ_НДСВал";
		Если КопияТаблицыОборудование.Колонки.Найти("ПРГ_ВалютаДокумента") = Неопределено Тогда
			КопияТаблицыОборудование.Колонки.Добавить("ПРГ_ВалютаДокумента", новый описаниетипов("СправочникСсылка.Валюты"));			
		КонецЕсли;
		// ->
		
		Для Каждого ТекСтрока Из КопияТаблицыТоваров Цикл			
			Если ТекСтрока.НДС < 0 Тогда ТекСтрока.ПРГ_НДСВал = - ТекСтрока.ПРГ_НДСВал КонецЕсли;			
		КонецЦикла;
		
		Для Каждого ТекСтрока Из КопияТаблицыОборудование Цикл			
			Если ТекСтрока.НДС < 0 Тогда ТекСтрока.ПРГ_НДСВал = - ТекСтрока.ПРГ_НДСВал КонецЕсли;			
		КонецЦикла;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    КопияТаблицыТоваров);
		СтруктТаблицДокумента.Вставить("ТаблицаОборудование", КопияТаблицыОборудование);
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			// В этом случае таблицы документа обрабатываются особым образом
			ТаблицаДвижений = Движения.Закупки.Выгрузить();
			ТаблицаДвижений.Очистить();
			ТаблицаДвиженийТовары       = ТаблицаДвижений.Скопировать();
			ТаблицаДвиженийОборудование = ТаблицаДвижений.Скопировать();
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыТоваров,      ТаблицаДвиженийТовары,       Проект, Дата, "Закупки");
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыОборудование, ТаблицаДвиженийОборудование, Проект, Дата, "Закупки");
			
			// Вставляем уже подготовленные таблицы движений
			ТаблицыДанныхДокумента = Новый Структура;
			ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам",      ТаблицаДвиженийТовары);
			ТаблицыДанныхДокумента.Вставить("ТаблицаОборудование", ТаблицаДвиженийОборудование);
			
		Иначе
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.Закупки, СтруктТаблицДокумента);
			
		КонецЕсли;
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ПРГ_ВалютаДокумента",СтруктураШапкиДокумента.ВалютаДокумента);  // Шевченков №54944
	
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
			
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), "ТаблицаПоТоварам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Оборудование,            "ТаблицаОборудование");
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
		 ИЛИ (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		   И  СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом) Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", СтруктураШапкиДокумента.Сделка);
		КонецЕсли;
			
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Закупки, Неопределено, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;
			
КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартий()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование,
							ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);

	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, 
							Отказ, Заголовок);
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, 
							ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, 
							ТаблицаПоВзаиморасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, 
							Отказ, Заголовок);
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
	                                             Отказ, Заголовок, СтруктураШапкиДокумента);

												 
	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);											 
	
	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И 
		глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух Тогда
		Движения.Хозрасчетный.Записать();
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И
		глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовНал Тогда
		Движения.Налоговый.Записать();
	КонецЕсли;
    УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
			
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;
		
		// Проверка остатков при оперативном проведении.
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",       СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Оборудование", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

		Если НЕ Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаОборудование", ТаблицаОборудование);
			
			//начало изменений
			Если Дата >= ПРГ_ДопФункцииКлиентСервер.ПолучитьДатуНовогоАлгоритмовВСтомости() Тогда
				Если ТаблицаПоТаре.Колонки.Найти("Качество") = Неопределено Тогда
					ТаблицаПоТаре.Колонки.Добавить("Качество");
					ТаблицаПоТаре.ЗаполнитьЗначения(Справочники.Качество.Новый,"Качество")
				КонецЕсли;	
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
			КонецЕсли;	
			//конец изменений 
			
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено, "ТаблицаПоТоварам");
			КонецЕсли;
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаОборудование");		
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
			
	Иначе // По ордеру
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций.
		НаборДвижений = Движения.ТоварыКПередачеОрганизаций;

		// Проверка остатков при оперативном проведении.
		НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары",       СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Оборудование", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если НЕ Отказ Тогда
			
			ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
			ТаблицаПоТоварамПлюс.Колонки.Удалить(ТаблицаПоТоварамПлюс.Колонки.Количество);
			ТаблицаПоТоварамПлюс.Колонки.КоличествоДок.Имя = "Количество";
			
			ТаблицаОборудованиеПлюс = ТаблицаОборудование.Скопировать();
			ТаблицаОборудованиеПлюс.Колонки.Удалить(ТаблицаОборудованиеПлюс.Колонки.Количество);
			ТаблицаОборудованиеПлюс.Колонки.КоличествоДок.Имя = "Количество";
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    ТаблицаПоТоварамПлюс);
			СтруктТаблицДокумента.Вставить("ТаблицаОборудование", ТаблицаОборудованиеПлюс);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",      Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый, "ТаблицаОборудование");
			
			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
			КонецЕсли;
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ мСтруктураПараметровВзаиморасчетов.ПроводитьПоВзаиморасчетам Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре,
									ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		                                 мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		                                 ВидДвиженияНакопления.Расход, Отказ, Заголовок);

		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
			Если ТипЗНЧ(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		   
			    // Движения по заказам поставщикам.
				НаборДвижений = Движения.ЗаказыПоставщикам;
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаОборудование", ТаблицаОборудование);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				Статус = Перечисления.СтатусыПартийТоваров.Купленный; 

				Если СтруктураШапкиДокумента.Сделка.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
					Статус = Перечисления.СтатусыПартийТоваров.ВПереработку; 
				КонецЕсли;
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику",    СтруктураШапкиДокумента.Сделка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",Статус, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",Перечисления.СтатусыПартийТоваров.Оборудование, "ТаблицаОборудование");

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			ИначеЕсли ТипЗНЧ(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				
				// Движения по заказам ставщикам.
				НаборДвижений = Движения.ЗаказыПоставщикам;
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику",    СтруктураШапкиДокумента.Сделка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",Перечисления.СтатусыПартийТоваров.ВПереработку, "ТаблицаПоТоварам");

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
		КонецЕсли;
		
		Если (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование)
		   И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			// ТАРА ПО РЕГИСТРУ Закупки.
			ТоварыИТараПоРегистрамОстатковУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ, Заголовок);
			
			// ТАРА ПО РЕГИСТРУ ТоварыПолученные.
			СтруктТаблицДокумента = Новый Структура;
			
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыПолученные, СтруктТаблицДокумента);
		
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,, Истина));
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
		ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			  ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			ТоварыИТараПоРегистрамОстатковУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ, Заголовок);
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыПолученные.
			
			// Контроль остатков товара
			СтатусПолучения = ?(ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки,
				Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку,
				Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
					
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыПолученныеКонтрольОстатков("Товары", СтруктураШапкиДокумента, СтатусПолучения, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;	
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыПолученныеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;	
			
			Если НЕ Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыПолученные, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    СтатусПолучения);
				
				Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", СтруктураШапкиДокумента.Сделка);
				Иначе
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
				КонецЕсли;
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
				СтруктТаблицДокумента = Новый Структура;
				//m.ionov@a-prof.ru 30.04.2014
				//СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				ВидНоменклатурыТара = Константы.УП_ВидНоменклатурыВозвратнаяТара.Получить();
				Если ЗначениеЗаполнено(ВидНоменклатурыТара)
					И Дата >= НачалоДня(Константы.УП_ДатаНачалаУчетаВозвратнойТарыПоСкладам.Получить())
					И Не Константы.УП_ДатаНачалаУчетаВозвратнойТарыПоСкладам.Получить() = Дата(1,1,1) Тогда
					КопияТаблицаПоТаре = ТаблицаПоТаре.Скопировать();
					КопияТаблицаПоТаре.Колонки.Добавить("УП_Склад");
					Для каждого СтрокаТаблицы  Из КопияТаблицаПоТаре Цикл
						
						Если СтрокаТаблицы.Номенклатура.ВидНоменклатуры = ВидНоменклатурыТара Тогда
							СтрокаТаблицы.УП_Склад = СтрокаТаблицы.Склад;
						КонецЕсли;
						
					КонецЦикла; 
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", КопияТаблицаПоТаре);
				Иначе
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				КонецЕсли;
				//----m.ionov@a-prof.ru---
                			
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыПолученные, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,, Истина));
				
				//m.ionov@a-prof.ru 30.04.2014
				Если  Дата >= НачалоДня(Константы.УП_ДатаНачалаУчетаВозвратнойТарыПоСкладам.Получить())
				И Не Константы.УП_ДатаНачалаУчетаВозвратнойТарыПоСкладам.Получить() = Дата(1,1,1)
				И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",        Неопределено,     "ТаблицаПоТаре");
				КонецЕсли;
				//----m.ionov@a-prof.ru---
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;      
			
		КонецЕсли;

		Если НЕ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			
			ТаблицаПоТоварамИзРезерва = УдалитьСтрокиБезРезерваПодЗаказПокупателя(ТаблицаПоТоварам);
			ТаблицаПоТареИзРезерва    = УдалитьСтрокиБезРезерваПодЗаказПокупателя(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамИзРезерва.Количество() > 0 ИЛИ ТаблицаПоТареИзРезерва.Количество() > 0 Тогда
				
				// Контроль остатков товара
				Если Товары.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ВозвратнаяТара.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамИзРезерва);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареИзРезерва);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
						
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
				
			КонецЕсли;	

		КонецЕсли;
		
	КонецЕсли; // Если ОтражатьВУправленческомУчете
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, Отказ, Заголовок)

	// Предварительно - точнее нужно получать данные из партионного учета.
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяРасширеннаяАналитикаУчетаЗатрат = (глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
			И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата));
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ДатаДока   = СтруктураШапкиДокумента.Дата;

	Если НЕ глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух Тогда
		
		ТаблицаДляБУ = ТаблицаПоТоварам.Скопировать( , "Номенклатура, Склад, СчетУчетаБУ, ДокументЗакупки, СчетУчетаНДС, СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал, Количество");
		ТаблицаДляБУ.Колонки.Добавить("СписаниеПартий", Новый ОписаниеТипов("Булево"));
		
		Для каждого СтрокаТовара Из ТаблицаОборудование Цикл
			НоваяСтрока = ТаблицаДляБУ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
		КонецЦикла;
		
		ТаблицаДляБУ.Свернуть("ДокументЗакупки, СчетУчетаНДС, Номенклатура, Склад, СчетУчетаБУ", "СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал, Количество");
		
		Для каждого СтрокаТЧ из ТаблицаДляБУ Цикл
			
			// Стоимость возврата без НДС относим на счет 91
			Если НЕ СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда
				// При использовании расширенной аналитики проводка по взаиморасчетам будет сформирована в общем модуле УправлениеЗапасамиРасширеннаяАналитика
				Если НЕ ИспользуетсяРасширеннаяАналитикаУчетаЗатрат Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период                 = ДатаДока;
					Проводка.Организация            = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание 			= "Возврат поставщику" + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТЧ.СчетУчетаБУ);
					Проводка.СписаниеПартий         = Истина;
					Проводка.Сумма = СтрокаТЧ.СуммаБезНДС;
					
					Проводка.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					Если Проводка.СчетДт.Валютный Тогда
						Проводка.ВалютаДт           = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаДт	= СтрокаТЧ.СуммаБезНДСВал;
					КонецЕсли; 
					
					Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ; 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаТЧ.Склад);
					
					Проводка.КоличествоКт = -СтрокаТЧ.Количество;
				КонецЕсли;	
				
				// НДС
				Если СтруктураШапкиДокумента.УчитыватьНДС 
					И СтрокаТЧ.НДС <> 0 Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					Проводка.Период               = ДатаДока;
					Проводка.Организация          = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание 			= "Возврат поставщику" + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТЧ.СчетУчетаБУ);
					Проводка.СписаниеПартий       = Истина;
					Проводка.НДСПродукции		  = Истина;
					
					Проводка.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				
					Если Проводка.СчетДт.Валютный Тогда
						Проводка.ВалютаДт           = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаДт	= СтрокаТЧ.НДСВал;
					КонецЕсли; 
				
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
					
					Проводка.Сумма                = СтрокаТЧ.НДС;
					
				КонецЕсли;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Движения по взаиморасчетам
	Если мСтруктураПараметровВзаиморасчетов.ПроводитьПоВзаиморасчетам Тогда
	   
		СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок,, ТаблицаПоВзаиморасчетам, СтруктураШапкиДокумента);
		Если НЕ СтруктураПараметровЗачетАванса = Ложь Тогда
			// Движения по регистру сведений РасчетыПоПриобретениюОрганизации
			// и проводки по зачету аванса
			
			// Особенности проведения данного типа документов
			СтруктураДляПереименованияКолонок = Новый Структура;
			СтруктураДляПереименованияКолонок.Вставить("ДокументЗакупки", "ДокументРасчетов");
			мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураДляПереименованияКолонок", СтруктураДляПереименованияКолонок);
			
			ТаблицаРасчетовПоПриобретению = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовитьТаблицуДляРегистраРасчетовПоПриобретению(
				мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента);
			СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, 
				ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ТаблицаРасчетовПоПриобретению);
			// Движения по регистру РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ",Движения.Налоговый);
			Конецесли;
			БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса, 
				мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
		Конецесли;

	КонецЕсли; // Движения по взаиморасчетам
	
	Если ПроводкиБУ.Модифицированность() Тогда
		ПроводкиБУ.Записать();
	КонецЕсли;	

КонецПроцедуры // ДвиженияПоРегистрамРегл

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудования = Ложь)

	Если ТаблицаОборудования Тогда
	
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование,"ДопустимыйСтатус1");
		КонецЕсли;
	
	Иначе
		
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
		   ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус1");
			Иначе
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВПереработку,"ДопустимыйСтатус1");
		КонецЕсли;
	
	КонецЕсли; 

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,    "ОтражатьВНалоговомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаДоходовБУ,"СчетДоходовБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаДоходовНУ,"СчетДоходовНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасходовБУ,"СчетРасходовБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасходовНУ,"СчетРасходовНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяДоходовИРасходов,"СтатьяДоходовИРасходов");
	
	//m.ionov@a-prof.ru 07.04.2014
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации,"ПодразделениеОрганизации");
	//----m.ionov@a-prof.ru---
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения( СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом, "КорСчетБУ");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения( СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям, "КорСчетБУ");
		//начало изменений
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПРГ_Претензии) <> Неопределено 
			и ЗначениеЗаполнено(Претензия)
			Тогда
			  ТаблицаДвижений.ЗаполнитьЗначения(Претензия, "КорСубконтоБУ3");
		КонецЕсли;	
		//конец изменений
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения( ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, "КорСчетНУ");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "КорСубконтоБУ1");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "КорСубконтоБУ2");
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДС+СтрокаТЧ.НДС;
		Строка.СуммаНДС = СтрокаТЧ.НДС;
		
		Если не СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				
			//// Для расчетов в у.е.
			Строка.КорВалютаЗадолженностиБУ        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Строка.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДСВал + СтрокаТЧ.НДСВал;
			Строка.КорВалютнаяСуммаНДСЗадолженностиБУ = СтрокаТЧ.НДСВал;
				
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			Строка.ОтражатьВНалоговомУчете = Истина;
			Строка.СчетУчетаНУ = СтрокаТЧ.СчетУчетаБУ;
		КонецЕсли;
		
		//начало изменений БП 04
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Строка.ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;	
		//конец изменений БП 04 
		
	КонецЦикла;
	
КонецПроцедуры//ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре,"КорСчетБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав,"КорСчетНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "КорСубконтоБУ1");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "КорСубконтоБУ2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.УсловияПоступленияИВыбытияИмущества.Возврат, "КорСубконтоБУ3");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,"ОтражатьВНалоговомУчете");
	
	//начало изменений Ожиганов 05.10.2015 б/н аналитика для проводок, отклонения в себестоимости тары 
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаДоходовБУ,"СчетДоходовБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаДоходовНУ,"СчетДоходовНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасходовБУ,"СчетРасходовБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасходовНУ,"СчетРасходовНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяДоходовИРасходов,"СтатьяДоходовИРасходов");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации,"ПодразделениеОрганизации");
	
	//конец изменений 
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТаре.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженностиБУ = СтрокаТЧ.Сумма;
		
		Если не СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				
			//// Для расчетов в у.е.
			Строка.КорВалютаЗадолженностиБУ        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Строка.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТЧ.СуммаВал;
		КонецЕсли;
		//начало изменений БП 04
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Строка.ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;	
		//конец изменений БП 04 
	КонецЦикла;
	
КонецПроцедуры//ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование, ТаблицаПоТаре, Отказ, Заголовок)
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.

	// Ресурс в регистре называется ЗаказПартии
	ТаблицаПоТоварам.Колонки.ЗаказПокупателя.Имя = "ЗаказПартии";

	// Количество из колонки КоличествоДок
	ТаблицаПоТоварам.Колонки.Удалить("Количество");
	ТаблицаПоТоварам.Колонки.КоличествоДок.Имя = "Количество";

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам[ТаблицаДвижений.Индекс(Строка)];
		Строка.ДокументПартии = СтрокаТЧ.ДокументЗакупки;
		
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;

	КонецЦикла;
	
	Для каждого СтрокаТоваров из ТаблицаПоТоварам Цикл

		Если ЗначениеЗаполнено(СтрокаТоваров.ЗаказПартии) тогда

			Если СтрокаТоваров.ЗаказПартии.Метаданные().Имя = "ЗаказПокупателя"  тогда
				ТаблицаДвижений[СтрокаТоваров.НомерСтроки-1].ЗаказСписания = СтрокаТоваров.ЗаказПартии;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	
	// не списываем партии, если по ордеру
	Если СтруктураШапкиДокумента.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру тогда
		 ТаблицаДвижений.ЗаполнитьЗначения(Истина,"НеСписывать");
	КонецЕсли;
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику,"КодОперацииПартииТоваров");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	КонецЕсли;	

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	// ОБОРУДОВАНИЕ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.

	// Количество из колонки КоличествоДок
	ТаблицаОборудование.Колонки.Удалить("Количество");
	ТаблицаОборудование.Колонки.КоличествоДок.Имя = "Количество";

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОборудование, ТаблицаДвижений);

	// Недостающие поля.
	Инд = ТаблицаПоТоварам.Количество();
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаОборудование[ТаблицаДвижений.Индекс(Строка)];
		Строка.ДокументПартии = СтрокаТЧ.ДокументЗакупки;

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Оборудование;

	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	
	// не списываем партии, если по ордеру
	Если СтруктураШапкиДокумента.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру тогда
		 ТаблицаДвижений.ЗаполнитьЗначения(Истина,"НеСписывать");
	КонецЕсли;		 

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику,"КодОперацииПартииТоваров");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр ( ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаОборудование, Истина);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл( ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаОборудование);
	КонецЕсли;	

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Ресурс в регистре называется ЗаказПартии
	ТаблицаПоТаре.Колонки.ЗаказПокупателя.Имя = "ЗаказПартии";
	ТаблицаПоТаре.Колонки.Удалить("Количество");
	ТаблицаПоТаре.Колонки.КоличествоДок.Имя = "Количество";

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;

	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику,"КодОперацииПартииТоваров");
	
	// не списываем партии, если по ордеру
	Если СтруктураШапкиДокумента.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру тогда
		 ТаблицаДвижений.ЗаполнитьЗначения(Истина,"НеСписывать");
	КонецЕсли;		 
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	КонецЕсли;	
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);
	
КонецПроцедуры//ДвиженияПоРегиструСписанныеТовары

Процедура ЗаполнитьПоПоступлениюТоваровУслугРегл(Основание)
	
	Если Основание.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		СчетУчетаРасчетовСКонтрагентом = Основание.СчетУчетаРасчетовСКонтрагентом;
		СчетУчетаРасчетовПоАвансам     = Основание.СчетУчетаРасчетовПоАвансам;
		СчетУчетаРасчетовПоТаре        = Основание.СчетУчетаРасчетовПоТаре;
	КонецЕсли;
	СчетУчетаРасчетовПоПретензиям  = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям;
	
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
    мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;

	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете)
		ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;

    УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация,истина);
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Проверяет, что размещение указанное в табиличной части, на Оптовый склад.
//
// Параметры:
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части
//  Отказ             - флаг отказа в проведении.
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоСкладОптовый(ТаблицаЗначений, Отказ, Заголовок)
	Перем ПредставлениеТабличнойЧасти;

	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Склад) И СтрокаТаблицы.ВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
			Если ПредставлениеТабличнойЧасти = неопределено Тогда
					ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["Оборудование"].Представление();
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер "+ СтрокаТаблицы.НомерСтроки +
				" табличной части Оборудование: содержится склад с видом не равный ""Оптовый"". Такого быть не должно!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ПроверитьЧтоСкладОптовый()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		И ТипОснования <> Тип("ДокументСсылка.СчетНаОплатуПоставщика")
		И ТипОснования <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		возврат;
	КонецЕсли;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете = Основание.ОтражатьВНалоговомУчете;

		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			Склад = Основание.СкладОрдер.Склад;
		Иначе
			Склад = Основание.СкладОрдер;
		КонецЕсли;

		// Заполним вид операции.
		ВидыОперацийПоступлениеТоваров       = Перечисления.ВидыОперацийПоступлениеТоваровУслуг;
		ВидыОперацийВозвратТоваровПоставщику = Перечисления.ВидыОперацийВозвратТоваровПоставщику;
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.Оборудование;
		Иначе
			ВидОперации = ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
		КонецЕсли;

		Сделка = Основание.Сделка;

		Если Основание.Проведен Тогда

			// Заполним табличные части по поступлению Товаров.
			Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
				ЗаполнитьОборудованиеПоОснованиюУпр(Основание, Оборудование);
			КонецЕсли;
            ЗаполнитьТоварыПоОснованиюУпр(Основание, Ложь);
			ЗаполнитьВозвратнуюТаруПоОснованиюУпр(Основание, Ложь);

		КонецЕсли;

		ЗаполнитьПоПоступлениюТоваровУслугРегл(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ВалютаДокумента              = Основание.ВалютаДокумента;
		ДоговорКонтрагента           = Основание.ДоговорКонтрагента;
		Комментарий                  = Основание.Комментарий;
		Контрагент                   = Основание.Контрагент;
		КратностьВзаиморасчетов      = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов           = Основание.КурсВзаиморасчетов;
		Организация                  = Основание.Организация;
		Ответственный                = Основание.Ответственный;
		Подразделение                = Основание.Подразделение;
		Склад                        = Основание.Склад;
		СуммаВключаетНДС             = Основание.СуммаВключаетНДС;
		СуммаДокумента               = Основание.СуммаДокумента;
		ТипЦен                       = Основание.ТипЦен;
		УчитыватьНДС                 = Основание.УчитыватьНДС;

		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаВозвратнаяТара.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
			НоваяСтрока.Сумма        = ТекСтрокаВозвратнаяТара.Сумма;
			НоваяСтрока.Цена         = ТекСтрокаВозвратнаяТара.Цена;
		КонецЦикла;

		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.СтавкаНДС                  = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Сумма                      = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС                   = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                       = ТекСтрокаТовары.Цена;
		КонецЦикла;
	КонецЕсли;

	ЗаполнитьДокументПоОснованиюУпр(Основание);
    УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 02.07.2015 косячок с удалением движений при проведении
	мУдалятьДвижения = НЕ ЭтоНовый();
	//конец изменений 

	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	Если ПараметрыСеанса.ПроведениеДокументов Тогда
		возврат;
	КонецЕсли;	
	//конец изменений 
	

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Оборудование);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС( ЭтотОбъект, "Товары")
				   + УчетНДС.ПолучитьСуммуДокументаСНДС( ЭтотОбъект, "Оборудование");

	// В этом случае почитим в табличных частях поля ЗаказПокупателя.
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда

		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ)Тогда
				СтрокаТаблицы.Заказ = Неопределено;
			КонецЕсли;
		КонецЦикла;

		Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ)Тогда
				СтрокаТаблицы.Заказ = Неопределено;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Если Не ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование Тогда
		Оборудование.Очистить();
	КонецЕсли;

	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	СкладИзШапки    =  Не мУказаниеСкладовВТЧ;
	Для каждого СтрокаТЧ из Товары Цикл
		Если (СкладИзШапки ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад)) И СтрокаТЧ.Склад <> Склад Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЧ из ВозвратнаяТара Цикл
		Если (СкладИзШапки ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад)) И СтрокаТЧ.Склад <> Склад Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЧ из Оборудование Цикл
		Если (СкладИзШапки ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад)) И СтрокаТЧ.Склад <> Склад Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");

	Если (Дата < '20060101' ИЛИ ДоговорКонтрагента.УчетАгентскогоНДС) И ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
		ПоставщикуВыставляетсяСчетФактураНаВозврат = Ложь;
	КонецЕсли;
	
	Если ПоставщикуВыставляетсяСчетФактураНаВозврат Тогда
		УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", ПометкаУдаления);
		УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Истина);
	Иначе
		УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", Истина);
		Если НЕ ЗначениеЗаполнено(Сделка) Тогда
			УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", ПометкаУдаления);
		Иначе
			УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Истина);
		КонецЕсли;
	КонецЕсли;
	
	//начало изменений Ожиганов 02.07.2015 косячок с удалением движений при проведении
	//мУдалятьДвижения = НЕ ЭтоНовый();
	//конец изменений 
	
	//++ Spl_Апроф 26.02.2015 (k.russkih@a-prof.ru)
	Если НЕ ДоступенСтатусДокумента() Тогда		
		СП_СтатусДокумента = Неопределено;					
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью

// Заполняет по шапке документа дерево параметров, нужных при проведении
// (упр. учет)
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"         , "ВедениеВзаиморасчетов");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам",       "ВедениеУчетаПоПроектам");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

// Заполняет структуру полей ТЧ Товары регламентированными реквизитами
//
Процедура ДополнитьСтруктуруПолейТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ" , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНУ" , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СуммаНДС" , "СуммаНДС");

КонецПроцедуры

// Заполняет структуру полей ТЧ ВозвратнаяТара регламентированными реквизитами
//
Процедура ДополнитьСтруктуруПолейВозвратнаяТараРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ", "СчетУчетаНУ");

КонецПроцедуры

// Процедура снимает с резерва материалы полученные для переработки
//
Процедура СнятиеСРезерваМатериалов(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)
	
	Если ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки		
	 ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений   = Движения.ТоварыВРезервеНаСкладах;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	ТаблицаДвижений.Очистить();
	
	// Контроль остатков товара
	Если Товары.Количество() <> 0 Тогда
		ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		
		НоваяСтрока.Склад                      = Склад;
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		НоваяСтрока.ДокументРезерва            = Сделка;
		НоваяСтрока.Количество                 = 
			СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент / СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			НоваяСтрока.СерияНоменклатуры 	   = СтрокаТЧ.СерияНоменклатуры;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	НаборДвижений.ВыполнитьРасход();
	НаборДвижений.Записать();
	
КонецПроцедуры // СнятиеСРезерваМатериалов()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения=неопределено,Отказ=ложь) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
 
	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                  , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                           , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                           , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                 , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"              , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "УчетАгентскогоНДС"                     , "УчетАгентскогоНДС");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидАгентскогоДоговора"                   , "ВидАгентскогоДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"        , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                           , "СделкаВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"          , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"                             , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий"         , "НеВключатьНДСВСтоимостьПартий");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом", "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
 	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат", Истина);

КонецПроцедуры//ПодготовитьСтруктуруШапкиДокумента

// Процедура - обработчик события ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаОборудование;
	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаОборудование);

	// Проверить заполнение ТЧ "Оборудование", "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары        ( ТаблицаПоТоварам,    СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОборудование  ( ТаблицаОборудование, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара( ТаблицаПоТаре,       СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверяем заполнение счетов учета номенклатуры
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 		СтруктураШапкиДокумента,	Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Оборудование", 	ТаблицаОборудование, 	СтруктураШапкиДокумента,	Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 			СтруктураШапкиДокумента,	Отказ, Заголовок);
	
	ПроводитьПоВзаиморасчетам = (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование)
		И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;   
	
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Оборудование", ТаблицаПоТоварам, ТаблицаОборудование);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);

	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);

	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаОборудование,
									ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
		СнятиеСРезерваМатериалов(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию", ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаОборудование));
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, ?(Не ПоставщикуВыставляетсяСчетФактураНаВозврат, "СчетФактураПолученный", "СчетФактураВыданный"));
	
	//++ Spl_Апроф 25.02.2015 (k.russkih@a-prof.ru)
	Если Не Отказ Тогда	
		ЗаписатьИзменениеСтатусов(Отказ);			
	КонецЕсли; 
	//-- Spl_Апроф
	
КонецПроцедуры

//++ Spl_Апроф 25.02.2015 (k.russkih@a-prof.ru)
Процедура ЗаписатьИзменениеСтатусов(Отказ) Экспорт
	
	//Движения по регистру накопления "АП_СтатусыДокументов"
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		СформируемЗаписьПоРегиструСтатусы(Отказ);
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = СП_СтатусДокумента Тогда
	    СформируемЗаписьПоРегиструСтатусы(Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструСтатусы(Отказ)

	мДатаЗаписи = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = СП_СтатусДокумента;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры 

Функция МожноИнтрактивноМенятьДокумент() Экспорт
	
	МожноМенять = Истина;
	
	Если ЭтоНовый() 
		ИЛИ РольДоступна("АП_Администратор")// ИЛИ РольДоступна("ПолныеПрава")
		ИЛИ АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии) Тогда
		Возврат МожноМенять;
	КонецЕсли;
	
	Если МожноМенять И Не ЭтоНовый() Тогда
		Если Склад.НСИ_ПодключенКSolvo
			И Не СП_СтатусДокумента = Перечисления.СП_СтатусыВозвратТоваровПоставщику.Открыт 
			И Не СП_СтатусДокумента = Перечисления.СП_СтатусыВозвратТоваровПоставщику.Отменен
			//И Не АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникСклада) //Пока в тестовом режиме, потом не должно быть не достуно
			Тогда
			
			МожноМенять = Ложь; //Вне изменения из SOLVO
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат МожноМенять;
	
КонецФункции

Функция МожноМенятьСтроку(ТекСтрока) Экспорт
	МожноМенять = Истина;
	
	Если ЭтоНовый() 
		ИЛИ РольДоступна("АП_Администратор") Тогда// ИЛИ РольДоступна("ПолныеПрава")
		//ИЛИ АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии) Тогда
		Возврат МожноМенять;
	КонецЕсли;
	
	Если МожноМенять Тогда
		Если Склад.НСИ_ПодключенКSolvo
			И Не СП_СтатусДокумента = Перечисления.СП_СтатусыВозвратТоваровПоставщику.Открыт 
			И Не СП_СтатусДокумента = Перечисления.СП_СтатусыВозвратТоваровПоставщику.Отменен Тогда	
			
			МожноМенять = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МожноМенять;
	
КонецФункции

Функция МожноМенятьСоставСтрок() Экспорт
	Если РольДоступна("АП_Администратор") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не Склад.НСИ_ПодключенКSolvo Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не Проведен Тогда
		Возврат Истина;
	ИначеЕсли Не СП_СтатусДокумента = Перечисления.СП_СтатусыВозвратТоваровПоставщику.Открыт 
		И Не СП_СтатусДокумента = Перечисления.СП_СтатусыВозвратТоваровПоставщику.Отменен Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если Не МожноМенятьСоставСтрок() Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ДоступенСтатусДокумента() Экспорт

	Доступен = Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия И Склад.НСИ_ПодключенКSolvo Тогда	
		Доступен = Истина;	
	КонецЕсли; 
	
	Возврат Доступен;

КонецФункции // ()

// <- Шевченков №51287 20160414
Функция ЕстьСтрокиБезЦеныБлокПроведения(ТаблицаПоТоварам)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПоТоварам.Номенклатура
	|ПОМЕСТИТЬ втТаблицаПоТоварам
	|ИЗ
	|	&ТаблицаПоТоварам КАК ТаблицаПоТоварам
	|ГДЕ
	|	ТаблицаПоТоварам.Цена = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРГ_СлужебныйТаблицаПараметров.Параметр
	|ПОМЕСТИТЬ втПапки
	|ИЗ
	|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|ГДЕ
	|	ПРГ_СлужебныйТаблицаПараметров.Ссылка = &Исключения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблПоТоварам.Номенклатура
	|ИЗ
	|	втТаблицаПоТоварам КАК втТаблПоТоварам
	|ГДЕ
	|	НЕ втТаблПоТоварам.Номенклатура В ИЕРАРХИИ
	|				(ВЫБРАТЬ
	|					втПапки.Параметр
	|				ИЗ
	|					втПапки КАК втПапки)";
	Запрос.УстановитьПараметр("Исключения", Справочники.ПРГ_Служебный.НайтиПоКоду("000000051"));
	Запрос.УстановитьПараметр("ТаблицаПоТоварам", ТаблицаПоТоварам);
	Рез = Запрос.Выполнить();
	
	Возврат ?(Рез.Пустой(), Ложь, Истина);
	
КонецФункции
// ->

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Оборудование"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");
мСтруктураПараметровВзаиморасчетов.Вставить("ЭтоВозврат", Истина);

УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");

мУказаниеСкладовВТЧ    = (УказаниеСкладов     = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации)
                         Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);


