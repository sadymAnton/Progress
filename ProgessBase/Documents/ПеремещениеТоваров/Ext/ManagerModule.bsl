// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст ошибки)
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в которой был выведен объект)
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Ведомость") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Ведомость", "Перемещение товаров", ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ13") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ13", "ТОРГ-13 (Накладная на внутреннее перемещение)", ПечатьТОРГ13(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М4") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М4", "М-4 (Приходный ордер)", ПечатьМ4(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М11") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М11", "M-11 (Требование-накладная)", ПечатьМ11(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	СкладОтправитель,
	|	СкладОтправитель.Представление КАК Поставщик,
	|	СкладПолучатель,
	|	СкладПолучатель.Представление  КАК Покупатель,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            Как Артикул,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|		Цена,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            КАК Артикул,
	|		0 КАК КоличествоМест,
	|		Количество,
	|		0 КАК Цена,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|		NULL                                               КАК ЕдиницаИзмеренияМест
	|	)
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Вывести табличную часть
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		//Макет необходимо получать для каждого следующего документа,
		//	т.к. в процессе печати меняется ширина колонок исходного макета
		Макет       = ПолучитьМакет("Накладная");

		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);

		Запрос.Текст = ТекстЗапроса;

		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Накладная на перемещение");
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = Шапка.Поставщик;
		ОбластьМакета.Параметры.Поставщик = Шапка.СкладОтправитель;
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = Шапка.Покупатель;
		ОбластьМакета.Параметры.Получатель = Шапка.СкладПолучатель;
		ТабДокумент.Вывести(ОбластьМакета);


		Если Шапка.СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
		 ИЛИ Шапка.СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ВыводитьЦены = Истина;
			ИмяШапки  = "ШапкаТаблицыСЦенами";
			ИмяСтроки = "СтрокаСЦенами";
		Иначе
			ИмяШапки  = "ШапкаТаблицы";
			ИмяСтроки = "Строка";
		КонецЕсли;

		ОбластьНомера = Макет.ПолучитьОбласть(ИмяШапки + "|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть(ИмяШапки + "|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть(ИмяШапки + "|Данные");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
												Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;

		ОбластьНомера = Макет.ПолучитьОбласть(ИмяСтроки + "|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть(ИмяСтроки + "|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть(ИмяСтроки + "|Данные");

		Ном = 0;
	    ФлЕстьКоличествоМест = ложь;
		// Выборка товаров
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			Ном = Ном + 1;
			Если ВыборкаСтрокТовары.КоличествоМест<>0 Тогда 
				ФлЕстьКоличествоМест = истина;
			КонецЕсли;
			
			//ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьНомера.Параметры.НомерСтроки = Ном;
			ТабДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФормСервер.ПредставлениеСерий(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьДанных);

		КонецЦикла;

		// Выборка возвратная тара
		Пока ВыборкаСтрокТара.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			Ном = Ном + 1;

			//ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьНомера.Параметры.НомерСтроки = Ном;
			ТабДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = ВыборкаСтрокТара.Товар;
			ТабДокумент.Присоединить(ОбластьДанных);

		КонецЦикла;

		// Вывести подвал
		ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);

    КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Формирует табличный документ по унифицированной форме ТОРГ-13
// 
// Возвращаемое значение
//  Табличный документ - унифицированная форма ТОРГ-13
//
Функция ПечатьТОРГ13(МассивОбъектов, ОбъектыПечати)

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	ТекстЗапроса = 	"ВЫБРАТЬ
	|	Номер КАК НомерДокумента,
	|	Дата  КАК ДатаДокумента,
	|	Организация,
	|	СкладОтправитель КАК ОтправительПодразделение,
	|	СкладПолучатель  КАК ПолучательПодразделение,
	|	СкладОтправитель.ВидСклада КАК ОтправительВидСклада,
	|	СкладПолучатель.ВидСклада  КАК ПолучательВидСклада,
	|	ОтветственныеЛицаОтправитель.ФизическоеЛицо КАК ФизЛицоОтправитель,
	|	ОтветственныеЛицаПолучатель.ФизическоеЛицо  КАК ФизЛицоПолучатель,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + " КАК ТоварКод,
	|		Цена,
	|		Количество,
    //m.ionov@a-prof.ru 19.11.2014
	|		ПР_ФактическиПринято КАК КоличествоФакт,
	//----m.ionov@a-prof.ru---
	|		КоличествоМест,
	|		Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|		ЕдиницаИзмерения.Коэффициент КАК ДокЕдиницаКоэффициент,
	|		ЕдиницаИзмерения.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		ЕдиницаИзмеренияМест.Представление           КАК ЕдиницаИзмеренияМестНаименование,
	|		ВЫБОР
	|			КОГДА КоличествоМест > 0 ТОГДА ЕдиницаИзмеренияМест.Коэффициент / Коэффициент
	|			ИНАЧЕ NULL
	|		КОНЕЦ                                        КАК КоличествоВОдномМесте,
	|		ХарактеристикаНоменклатуры                   КАК Характеристика,
	|		СерияНоменклатуры                            КАК Серия,
	|		Номенклатура.ВестиПартионныйУчетПоСериям     КАК ПартионныйУчетПоСериям
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + " КАК ТоварКод,
	|		0 КАК Цена,
	|		0 КАК Сумма,
	|		0 КАК КоличествоВОдномМесте,
	|		Количество,
	//m.ionov@a-prof.ru 19.11.2014
	|		Количество КАК КоличествоФакт,
	//----m.ionov@a-prof.ru---
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ
	|	)
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, СтруктурнаяЕдиница = &СкладОтправитель) КАК ОтветственныеЛицаОтправитель
	|ПО
	|	ИСТИНА
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&Дата, СтруктурнаяЕдиница = &СкладПолучатель)  КАК ОтветственныеЛицаПолучатель
	|ПО
	|	ИСТИНА
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";
	
	Макет = ПолучитьОбщийМакет("ТОРГ13");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТОРГ13";

 	ВалютаПечати = глЗначениеПеременной("ВалютаРегламентированногоУчета");

   	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Запрос       = Новый Запрос;
		Запрос.УстановитьПараметр("Дата",             Ссылка.Дата);
		Запрос.УстановитьПараметр("ТекущийДокумент",  Ссылка);
		Запрос.УстановитьПараметр("СкладОтправитель", Ссылка.СкладОтправитель);
		Запрос.УстановитьПараметр("СкладПолучатель",  Ссылка.СкладПолучатель);
	    Запрос.Текст = ТекстЗапроса;


		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();

		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

		ЭтоСкладНТТ = (Шапка.ОтправительВидСклада = Перечисления.ВидыСкладов.НТТ
		              ИЛИ Шапка.ПолучательВидСклада = Перечисления.ВидыСкладов.НТТ);

		Если НЕ ЭтоСкладНТТ Тогда
			ТаблицаСтоимости        = ПолучитьТаблицуСтоимостиТоваров(Ссылка);
			Если ТаблицаСтоимости = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			ВалютаУпрУчета          = глЗначениеПеременной("ВалютаУправленческогоУчета");
			Параметры               = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Ссылка.Дата);
			КурсВалютыУпрУчета      = Параметры.Курс;
			КратностьВалютыУпрУчета = Параметры.Кратность;
		КонецЕсли;
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		ОбластьМакета         = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента));
		ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
		ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ТабДокумент.Вывести(ОбластьМакета);
		
		НомерСтраницы   = 1;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		// инициализация итогов по странице
		ИтогКоличествоМестПоСтранице = 0;
		ИтогМассаБруттоПоСтранице    = 0;
		ИтогМассыНеттоПоСтранице     = 0;
		ИтогСуммыПоСтранице          = 0;

		// инициализация итогов по документу
		ИтогоКоличество  = 0;
		ИтогоМассаБрутто = 0;
		ИтогоМассаНетто  = 0;
		ИтогоСумма       = 0;
		
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
		ОбластьМакета			= Макет.ПолучитьОбласть("Строка");
		ОбластьВсего			= Макет.ПолучитьОбласть("Всего");
		ОбластьПодвал			= Макет.ПолучитьОбласть("Подвал");
		
		// Выводим многострочную часть докмента
		ВыборкаСтрокТовары      = Шапка.Товары.Выбрать();
		
		Ном = 0;
		КоличествоСтрок = ВыборкаСтрокТовары.Количество() + ВыборкаСтрокТара.Количество();
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выборка товаров
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			//m.ionov@a-prof.ru 19.11.2014
			Если Ссылка.СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Закрыто Тогда
				КоличествоМест = Формат(ВыборкаСтрокТовары.КоличествоФакт, "ЧЦ=15; ЧДЦ=3");
				
			Иначе
				КоличествоМест = Формат(ВыборкаСтрокТовары.Количество, "ЧЦ=15; ЧДЦ=3");
				
				Если ВыборкаСтрокТовары.КоличествоМест <> 0 И ЗначениеЗаполнено(ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование) Тогда
					КоличествоМест = КоличествоМест 
					+ Символы.ПС
					+ " (" + Формат(ВыборкаСтрокТовары.КоличествоМест,"ЧЦ=15; ЧДЦ=0")
					+ " "
					+ ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование
					+ ")";
				КонецЕсли;
			КонецЕсли;
			//----m.ionov@a-prof.ru---
			ОбластьМакета.Параметры.КоличествоМест    = КоличествоМест;
			ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФормСервер.ПредставлениеСерий(ВыборкаСтрокТовары);

			Если ЭтоСкладНТТ Тогда
				Сумма = ВыборкаСтрокТовары.Количество * ВыборкаСтрокТовары.Цена;
			Иначе
				Если ВыборкаСтрокТовары.Количество = 0 Тогда
					Сумма = 0;
					Цена  = 0;
				Иначе
					Количество = 0;
					Сумма = ПолучитьСтоимостьТовара(ТаблицаСтоимости,
					                                ВыборкаСтрокТовары.Номенклатура,
					                                ВыборкаСтрокТовары.Характеристика,
					                                ВыборкаСтрокТовары.Серия,
					                                ВыборкаСтрокТовары.ПартионныйУчетПоСериям,
					                                Количество);
					Цена  = ?(Количество = 0, 0, Сумма / Количество);
				КонецЕсли;

				Если ВыборкаСтрокТовары.ДокЕдиницаКоэффициент <> 0 Тогда
					Количество = Количество * ВыборкаСтрокТовары.ЕдиницаХраненияОстатковКоэффициент / ВыборкаСтрокТовары.ДокЕдиницаКоэффициент;
				КонецЕсли;
					
				Цена = Окр(?(Количество > 0, Сумма / Количество, 0), 2);
				//m.ionov@a-prof.ru 19.11.2014
				//Сумма = Цена * ВыборкаСтрокТовары.Количество;
				Если Ссылка.СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Закрыто Тогда
					Сумма = Цена * ВыборкаСтрокТовары.КоличествоФакт;
				Иначе
					Сумма = Цена * ВыборкаСтрокТовары.Количество;
				КонецЕсли;
				//----m.ionov@a-prof.ru---
				ОбластьМакета.Параметры.Цена = Цена;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Сумма = Сумма;
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			Если Ном = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивВыводимыхОбластей) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
				
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// инициализация итогов по странице
				ИтогКоличествоМестПоСтранице = 0;
				ИтогМассаБруттоПоСтранице    = 0;
				ИтогМассаНеттоПоСтранице     = 0;
				ИтогСуммыПоСтранице          = 0;

				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);

			// Обновим итоги по странице
			//m.ionov@a-prof.ru 19.11.2014
			//ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТовары.Количество;
			Если Ссылка.СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Закрыто Тогда
				ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТовары.КоличествоФакт;
			Иначе
				ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТовары.Количество;
			КонецЕсли;
			//----m.ionov@a-prof.ru---
			
			ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + Сумма;

			// Обновим итогов по документу
			//m.ionov@a-prof.ru 19.11.2014
			//ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТовары.Количество;
			Если Ссылка.СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Закрыто Тогда
				ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТовары.КоличествоФакт;
			Иначе
				ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТовары.Количество;
			КонецЕсли;
			//----m.ionov@a-prof.ru---
			ИтогоСумма       = ИтогоСумма       + Сумма;

		КонецЦикла;

		// Выборка возвратная тара
		Пока ВыборкаСтрокТара.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			Ном = Ном + 1;

			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);

			ОбластьМакета.Параметры.КоличествоМест    = Формат(ВыборкаСтрокТара.Количество, "ЧЦ=15; ЧДЦ=3");
			ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТара.ТоварНаименование + " (возвратная тара)";
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			Если Ном = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
			КонецЕсли;
				
			Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивВыводимыхОбластей) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
				
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// инициализация итогов по странице
				ИтогКоличествоМестПоСтранице = 0;
				ИтогМассаБруттоПоСтранице    = 0;
				ИтогМассаНеттоПоСтранице     = 0;
				ИтогСуммыПоСтранице          = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;

			ТабДокумент.Вывести(ОбластьМакета);

			// Обновим итоги по странице
			ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТара.Количество;

			// Обновим итогов по документу
			ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТара.Количество;

		КонецЦикла;

		ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

		// Выводим итоги по документу в целом
		ОбластьВсего.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
		ОбластьВсего.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
		ОбластьВсего.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
		ОбластьВсего.Параметры.ИтогоСумма          = ИтогоСумма;

		ТабДокумент.Вывести(ОбластьВсего);

		// Выводим подвал документа
		ФИООтправителя = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ФизЛицоОтправитель, Шапка.ДатаДокумента);
		ФИОПолучателя  = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ФизЛицоПолучатель,  Шапка.ДатаДокумента);
		ОбластьПодвал.Параметры.Заполнить(Шапка);
		ОбластьПодвал.Параметры.ДолжностьОтправителя = ПолныеПрава.СведенияОСотруднике(Шапка.ФизЛицоОтправитель, Шапка.ДатаДокумента, Шапка.Организация).Должность;
		ОбластьПодвал.Параметры.ФИООтправителя       = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФИООтправителя.Фамилия + " " + ФИООтправителя.Имя + " " + ФИООтправителя.Отчество);
		ОбластьПодвал.Параметры.ДолжностьПолучателя  = ПолныеПрава.СведенияОСотруднике(Шапка.ФизЛицоПолучатель,  Шапка.ДатаДокумента, Шапка.Организация).Должность;
		ОбластьПодвал.Параметры.ФИОПолучателя        = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФИОПолучателя.Фамилия  + " " + ФИОПолучателя.Имя  + " " + ФИОПолучателя.Отчество);
		ПараметрыПрописиНаРусском = ВалютаПечати.ПараметрыПрописиНаРусском;
		ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "1", "0");
		ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "2", "0");
		ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "3", "0");
		ОбластьПодвал.Параметры.ИтогоСуммаПрописью = ЧислоПрописью(Цел(ИтогоСумма), "L=ru_RU; НП=Ложь; НД=Ложь", ПараметрыПрописиНаРусском);
		ОбластьПодвал.Параметры.ИтогоСуммаКоп      = Формат(Цел((ИтогоСумма-Цел(ИтогоСумма))*100), "ЧЦ=2; ЧН=00");
		ТабДокумент.Вывести(ОбластьПодвал);

		// Зададим параметры макета
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
    КонецЦикла;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ13()

// Возвращает таблицу стоимости по товарам
//
Функция ПолучитьТаблицуСтоимостиТоваров(Ссылка)

	СтруктраПараметров = Новый Структура();
	
	СтруктраПараметров.Вставить("Регистратор", Ссылка);

	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СписаниеТоваров.Номенклатура,
	               |	СписаниеТоваров.ХарактеристикаНоменклатуры,
	               |	СписаниеТоваров.СерияНоменклатуры,
	               |	СписаниеТоваров.СчетУчетаБУ КАК СчетУчета,
	               |	СписаниеТоваров.Качество,
	               |	СписаниеТоваров.Количество,
	               |	СписаниеТоваров.Количество * ЕСТЬNULL(ТаблицаСебестоимостиОбороты.Стоимость, 0) / ЕСТЬNULL(ВЫБОР
	               |			КОГДА ТаблицаСебестоимостиОбороты.Количество = 0
	               |				ТОГДА 1
	               |			ИНАЧЕ ТаблицаСебестоимостиОбороты.Количество
	               |		КОНЕЦ, 1) КАК Стоимость,
	               |	СписаниеТоваров.ХарактеристикаНоменклатуры КАК Характеристика,
	               |	СписаниеТоваров.СерияНоменклатуры КАК Серия,
	               |	СписаниеТоваров.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК СписаниеТоваров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСебестоимостиОбороты КАК ТаблицаСебестоимостиОбороты
	               |		ПО СписаниеТоваров.Номенклатура = ТаблицаСебестоимостиОбороты.Номенклатура
	               |			И СписаниеТоваров.Ссылка = ТаблицаСебестоимостиОбороты.Регистратор
	               |			И (СписаниеТоваров.ХарактеристикаНоменклатуры = ТаблицаСебестоимостиОбороты.ХарактеристикаНоменклатуры
	               |				ИЛИ ТаблицаСебестоимостиОбороты.ХарактеристикаНоменклатуры = ""Не используется"")
	               |			И (СписаниеТоваров.СерияНоменклатуры = ТаблицаСебестоимостиОбороты.СерияНоменклатуры
	               |				ИЛИ ТаблицаСебестоимостиОбороты.СерияНоменклатуры = ""Не используется"")
				   |			И ((СписаниеТоваров.СчетУчетаБУ = ТаблицаСебестоимостиОбороты.СчетУчета) 
				   |				ИЛИ (ТаблицаСебестоимостиОбороты.СчетУчета = ""Не используется""))"+
				   ?(Ссылка.ВидОперации=Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция,"
				   |			И ((СписаниеТоваров.Качество = ТаблицаСебестоимостиОбороты.Качество)
				   |				ИЛИ (ТаблицаСебестоимостиОбороты.Качество = ""Не используется""))","")+"
	               |ГДЕ
	               |	СписаниеТоваров.Ссылка = &Регистратор";
										
										
	Возврат УправлениеЗапасами.ПолучитьТаблицуЗатратДляПечатиИЗаполненияДокументов(Ссылка, ТекстЗапроса, СтруктраПараметров);

КонецФункции // ПолучитьТаблицуСтоимостиТоваров()

// Возвращает стоимость товара
//
Функция ПолучитьСтоимостьТовара(Таблица, Номенклатура, Характеристика = Неопределено, Серия = Неопределено, ПартионныйУчетПоСериям = Ложь, Количество)

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   Номенклатура);
	Если ЗначениеЗаполнено(Характеристика) Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	КонецЕсли;

	Если ПартионныйУчетПоСериям
	   И ЗначениеЗаполнено(Серия) Тогда
		СтруктураПоиска.Вставить("СерияНоменклатуры",          Серия);
	КонецЕсли;

	Строки = Таблица.НайтиСтроки(СтруктураПоиска);

	Если Строки.Количество() > 0 Тогда
		Стоимость  = Строки[0].Стоимость;
		Количество = Строки[0].Количество;
	Иначе
		Стоимость  = 0;
		Количество = 0;
	КонецЕсли;

	Возврат Стоимость;

КонецФункции // ПолучитьСтоимостьПоПартиямТоваров()

// Функция формирует табличный документ унифицированной формы М-4
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ4(МассивОбъектов, ОбъектыПечати)
	
	ТекстЗапросаШапка = "
	|ВЫБРАТЬ
	|	Ссылка.Номер КАК Номер,
	|	Ссылка.Дата  КАК ДатаСоставления,
	|	Ссылка.Организация,
	|	Ссылка.Организация             КАК ЮрФизЛицо,
	|	Ссылка.СкладПолучатель         КАК МестоПриемки,
	|	Ссылка.СкладПолучатель.Представление КАК СкладНаименование,
	|	Ссылка.//Подразделение КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(Ссылка.//Подразделение)  КАК ПредставлениеПодразделения
	|	//ПОЛЕ_КорСчет ,ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НовыйСчетУчетаБУ) = 1 ТОГДА
	|	//ПОЛЕ_КорСчет	МИНИМУМ(НовыйСчетУчетаБУ) 
	|	//ПОЛЕ_КорСчет ИНАЧЕ """" КОНЕЦ КАК СубСчет
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|//ПОЛЕ_КорСчет СГРУППИРОВАТЬ ПО Ссылка";

	ТекстЗапросаТовары = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.КоличествоПринято,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка       КАК Метка
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		СУММА(Количество)                    КАК КоличествоПринято,
	|		ХарактеристикаНоменклатуры           КАК Характеристика,
	|		СерияНоменклатуры                    КАК Серия,
	|		МИНИМУМ(НомерСтроки)                 КАК НомерСтроки,
	|		0                                    КАК Метка
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО 
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	Номенклатура.Код,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление  КАК ЕдиницаИзмеренияНаименование,
	|	Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	Количество,
	|	NULL,
	|	NULL,
	|	НомерСтроки КАК НомерСтроки,
	|	2           КАК Метка
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";
	
	Макет = ПолучитьОбщийМакет("М4");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры печатной формы по умолчанию
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Восстановим установленные пользователем параметры печатной формы
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_М4";
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент",     Ссылка);
		Запрос.УстановитьПараметр("ВидПоступленияОрдер", Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

		Запрос.Текст = ТекстЗапросаШапка;
		Если Ссылка.ОтражатьВБухгалтерскомУчете Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПеремещениеТоваров", "Документ.ПеремещениеТоваров.Товары");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПОЛЕ_КорСчет", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Подразделение", "ПодразделениеОрганизации");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"Ссылка.", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Подразделение", "Подразделение");
		КонецЕсли;

		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();

		ЗапросПоТоварам = Новый Запрос();
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросПоТоварам.Текст = ТекстЗапросаТовары;	
		ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

		// Выводим общие реквизиты шапки
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);

		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим заголовок докмента
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
		ПредставлениеКонтрагента = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаСоставления), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабДокумент.Вывести(ЗаголовокТаблицы);

		НомерСтраницы   = 1;

		КоличествоСтрок = ВыборкаСтрокТовары.Количество();

		// Инициализация итогов в документе
		ИтогоКоличествоПринято = 0;
		Ном = 0;

		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;	

		// Выводим многострочную часть докмента
		ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтрок");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		Пока ВыборкаСтрокТовары.Следующий() Цикл

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			Ном = Ном + 1;

			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

			КоличествоПринято = ВыборкаСтрокТовары.КоличествоПринято;

			ОбластьМакета.Параметры.КоличествоПринято = КоличествоПринято;
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)
			                                          + ФормированиеПечатныхФормСервер.ПредставлениеСерий(ВыборкаСтрокТовары)
			                                          + ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");
													  
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			Если Ном = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;

			Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивВыводимыхОбластей) Тогда

				НомерСтраницы = НомерСтраницы + 1;
				ПодвалСтрок   = Макет.ПолучитьОбласть("ПодвалСтрок");
				ТабДокумент.Вывести(ПодвалСтрок);
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;												  
													  
			ТабДокумент.Вывести(ОбластьМакета);

			ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;

		КонецЦикла;

		// Выводим итоги по документу
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");

		ОбластьМакета.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим итоги по документу
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла; 
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ4()

// Функция формирует печатную форму М-11
//
Функция ПечатьМ11(МассивОбъектов, ОбъектыПечати)
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	ТекстЗапросаШапка = 
	"ВЫБРАТЬ
	|	Ссылка.Номер 	КАК НомерДокумента,
	|	Ссылка.Дата	КАК ДатаДокумента,
	|	Ссылка.Дата	КАК ДатаСоставления,
	|	Ссылка.Организация,
	|	Ссылка.СкладОтправитель КАК Склад,
//начало изменений Ожиганов 29.03.2016 50667 учет фактически отгруженных паллет 
	|ВЫБОР
	|	КОГДА ПеремещениеТоваров.Ссылка.СП_ЗаданиеНаПодбор ССЫЛКА Документ.СП_ЗаданиеНаПодбор
	|			И ПеремещениеТоваров.Ссылка.СП_ЗаданиеНаПодбор <> ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка)
//начало изменений Ожиганов 30.03.2016 50667 учет фактически отгруженных паллет 
	|			и ПеремещениеТоваров.Ссылка.СкладОтправитель = ПеремещениеТоваров.Ссылка.СП_ЗаданиеНаПодбор.Склад
//конец изменений 
	|		ТОГДА ЕСТЬNULL(ПеремещениеТоваров.Ссылка.СП_ЗаданиеНаПодбор.КП_Отделение.ИспользоватьФактическиОтгруженоПалет, ЛОЖЬ)
	|	ИНАЧЕ ЛОЖЬ
	|КОНЕЦ КАК ИспользоватьФактическиОтгруженоПалет,
	|
	|ВЫБОР
	|	КОГДА ПеремещениеТоваров.Ссылка.СП_ЗаданиеНаПодбор ССЫЛКА Документ.СП_ЗаданиеНаПодбор
	|			И ПеремещениеТоваров.Ссылка.СП_ЗаданиеНаПодбор <> ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка)
	|		ТОГДА ПеремещениеТоваров.Ссылка.СП_ЗаданиеНаПодбор.ФактическиОтгруженоПаллет
	|	ИНАЧЕ 0
	|КОНЕЦ КАК ФактическиОтгруженоПаллет,
//конец изменений 
	|	ВЫРАЗИТЬ(Ссылка.Комментарий КАК Строка(200)) КАК ЧерезКого,
	|	Ссылка.СкладПолучатель КАК Подразделение
	|	//ПОЛЕ_КорСчет ,ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НовыйСчетУчетаБУ) = 1 ТОГДА
	|	//ПОЛЕ_КорСчет	МИНИМУМ(НовыйСчетУчетаБУ) 
	|	//ПОЛЕ_КорСчет ИНАЧЕ """" КОНЕЦ КАК КоррСчет
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|//ПОЛЕ_КорСчет СГРУППИРОВАТЬ ПО Ссылка";
	
	ТекстЗапросаТовары = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК МатериалНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК НоменклатурныйНомер,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
	|	ВложенныйЗапрос.Серия                КАК Серия,
	|	ВложенныйЗапрос.Количество           КАК Количество,
	|	ВложенныйЗапрос.Счет           		 КАК Счет,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки
	|ИЗ 
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		СчетУчетаБУ КАК Счет,
	|		ХарактеристикаНоменклатуры	КАК Характеристика,
	|		СерияНоменклатуры           КАК Серия,
	|		СУММА(Количество)           КАК Количество,
	|		МИНИМУМ(НомерСтроки) 		КАК НомерСтроки
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры,
	|		СчетУчетаБУ
	|
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР
	|";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_М11";
	
	// Вывод заголовка
	Макет = ПолучитьОбщийМакет("М11");

	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст = ТекстЗапросаШапка;
		Если Ссылка.ОтражатьВБухгалтерскомУчете Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПеремещениеТоваров", "Документ.ПеремещениеТоваров.Товары");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПОЛЕ_КорСчет", "");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"Ссылка.", "");
		КонецЕсли;
		
        Подписанты = ПолучитьданныеПодписантов(Ссылка);
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);

		Запрос.Текст = ТекстЗапросаТовары;

		ЗапросПоНоменклатуре = Запрос.Выполнить();
		
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.Заголовок     = "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + Строка(Шапка.НомерДокумента);
		Область.Параметры.Заполнить(Шапка);
		
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

		Область.Параметры.ПредставлениеОрганизации   = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
		Область.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
		Область.Параметры.КодОКПО                    = СведенияОбОрганизации.КодПоОКПО;
		Область.Параметры.ФИОРазрешил = Подписанты.Разрешил;//Blik 65808 190517 
		ТабДокумент.Вывести(Область);
		
		ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСтрокам.Следующий() Цикл

			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Заполнить(ВыборкаПоСтрокам);
			Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование) + ФормированиеПечатныхФормСервер.ПредставлениеСерий(ВыборкаПоСтрокам);
			
			ТабДокумент.Вывести(Область);

		КонецЦикла;
//начало изменений Ожиганов 29.03.2016 50667 учет фактически отгруженных паллет 		
//	Область = Макет.ПолучитьОбласть("Подвал");
		Если ЗначениеЗаполнено(Шапка.ИспользоватьФактическиОтгруженоПалет) И Шапка.ИспользоватьФактическиОтгруженоПалет Тогда // и Шапка.ФактическиОтгруженоПаллет > 0
			Область = Макет.ПолучитьОбласть("ПодвалСПоддонами");
			Область.Параметры.ФактическиОтгруженоПаллет = Шапка.ФактическиОтгруженоПаллет;
		Иначе
			Область = Макет.ПолучитьОбласть("Подвал");
			//Blik 65808 190517 н
			Область.Параметры.ФИООтпустил = Подписанты.Отпустил; 
			Область.Параметры.ДолжностьОтпустил = Подписанты.ДолжностьОтпустил;
			//Blik 65808 190517 к
		КонецЕсли;	
//конец изменений 		
		ТабДокумент.Вывести(Область);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
	КонецЦикла; 

	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ11()

// В функции описано, какие данные следует сохранять в шаблоне
Функция СтруктураДополнительныхДанныхФормы() Экспорт
	
	Возврат ХранилищаНастроек.ДанныеФорм.СформироватьСтруктуруДополнительныхДанных("Товары,ВозвратнаяТара");
	
КонецФункции

//Blik 65808 190517 н
Функция ПолучитьданныеПодписантов(Ссылка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ПРГ_дополнительнаяИнформация.Документ,
	                      |	ПРГ_дополнительнаяИнформация.Подписант,
	                      |	ПРГ_дополнительнаяИнформация.Информация1,
	                      |	ФИОФизЛицСрезПоследних.Фамилия,
	                      |	ФИОФизЛицСрезПоследних.Имя,
	                      |	ФИОФизЛицСрезПоследних.Отчество,
	                      |	РаботникиОрганизацийСрезПоследних.Должность
	                      |ИЗ
	                      |	РегистрСведений.ПРГ_дополнительнаяИнформация КАК ПРГ_дополнительнаяИнформация
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛицСрезПоследних
	                      |		ПО ПРГ_дополнительнаяИнформация.Информация1.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	                      |		ПО ПРГ_дополнительнаяИнформация.Информация1 = РаботникиОрганизацийСрезПоследних.Сотрудник
	                      |ГДЕ
	                      |	ПРГ_дополнительнаяИнформация.Документ = &Документ");
	
	Запрос.УстановитьПараметр("Дата", Ссылка.Дата);
	Запрос.УстановитьПараметр("Документ", Ссылка);
	
	Отпустил = "";
	Разрешил = "";
	ДолжностьОтпустил = "";
	ДолжностьРазрешил = "";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Подписант = Справочники.ПРГ_Подписанты.Отпустил Тогда
			Отпустил = СокрЛП(Строка(Выборка.Фамилия))+" " + Лев(СокрЛП(Строка(Выборка.Имя)),1)+". " + Лев(СокрЛП(Строка(Выборка.Отчество)),1)+".";
			ДолжностьОтпустил = СокрЛП(Строка(Выборка.Должность));
		КонецЕсли;
		Если Выборка.Подписант = Справочники.ПРГ_Подписанты.НайтиПоНаименованию("Разрешил") Тогда
			Разрешил = СокрЛП(Строка(Выборка.Фамилия))+" " + Лев(СокрЛП(Строка(Выборка.Имя)),1)+". " + Лев(СокрЛП(Строка(Выборка.Отчество)),1)+".";
			ДолжностьРазрешил = СокрЛП(Строка(Выборка.Должность));
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПодписантов = Новый Структура;
	СтруктураПодписантов.Вставить("Разрешил", Разрешил);
	СтруктураПодписантов.Вставить("ДолжностьРазрешил",ДолжностьРазрешил);
	СтруктураПодписантов.Вставить("Отпустил", Отпустил);
	СтруктураПодписантов.Вставить("ДолжностьОтпустил", ДолжностьОтпустил);
	
	Возврат СтруктураПодписантов;
КонецФункции
//Blik 65808 190517 к