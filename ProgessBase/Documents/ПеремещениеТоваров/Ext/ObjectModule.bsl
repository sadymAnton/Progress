//++ Spl_Апроф 05.09.2014 (k.russkih@a-prof.ru) 
//Расширил тип документа основания "ДокументСсылка.ПР_Претензия" и ввод на основании. Вывел на форму элемента вкладка "дополнительно"
//Добавил реквизиты ТЧ "товары" - "КоличествоБрак", "ФактическиПринято", вынес на форму элемента.
//Вынес на форму элемента реквизит "Склад транзит"
//-- Spl_Апроф
//++ Spl_Апроф 14.01.2015 (k.russkih@a-prof.ru) Добавил реквизит "КП_Отделение" вынес на форму элемента, списка, выбора

Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мСчета003_01 Экспорт;

Перем мРазрешитьНулевыеЦеныВРознице Экспорт;
Перем ИспользоватьРегистрСвободныеОстатки;
//начало изменений БП 04
Перем мСчетаЗабаланс Экспорт;
//конец изменений БП 04 
//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
Перем мВозвращатьРезервы;
//конец изменений 
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция печатает ценники.
//
Функция ПечатьЦенников()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК Печать,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	0 КАК Цена,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &Док
	|");

	Запрос.УстановитьПараметр("Док", Ссылка);

	ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
	ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);

	ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	ФормаПечатьЦенников.Открыть();

КонецФункции // ПечатьЦенников()

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН()

	Если Дата < Дата(2012, 03, 13) Тогда
		ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	Иначе
		ОбработкаПечати = Обработки.ПечатьТТН1208.ПолучитьФорму("Форма");
	КонецЕсли;
	
	ОбработкаПечати.Документ = ЭтотОбъект.Ссылка;

	ОбработкаПечати.Открыть();

	Возврат Неопределено;

КонецФункции // ПечатьТТН()

// Функция осуществляет печать этикеток для позиций ТЧ
//
// Параметры
//  Нет
//
Процедура ПечататьЭтикетки()

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
	 Или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка, "Цена");
	Иначе
		УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка);
	КонецЕсли;

КонецПроцедуры // ПечататьЭтикетки()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  ИмяМакета - Имя макета для печати.
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(ИмяМакета, НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, ИмяМакета, , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(Нстр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(Нстр("ru = 'Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	

	// Получить экземпляр документа на печать
	Если ИмяМакета = "1Т"
		  ИЛИ ИмяМакета = "_1Т" Тогда

		ТабДокумент = ПечатьТТН();

	ИначеЕсли ИмяМакета = "БланкОтправитель"
		  ИЛИ ИмяМакета = "БланкПолучатель" Тогда

		ТабДокумент = ПечатьБланк(ИмяМакета, НаПринтер);

	ИначеЕсли ИмяМакета = "Этикетки" Тогда

		ПечататьЭтикетки();
		Возврат;

	ИначеЕсли ИмяМакета = "ТранспУпаковки" Тогда

		Обр   = Обработки.ТранспортныеУпаковки.Создать();
		Форма = Обр.ПолучитьФорму(,ЭтотОбъект,);
		Если Форма.Открыта() Тогда
			Форма.Активизировать();
		Иначе
			Форма.Открыть();
			Форма.ПервоначальноеЗаполнение(Ссылка);
		КонецЕсли;
	ИначеЕсли ИмяМакета = "Ценники" Тогда
		ТабДокумент = ПечатьЦенников();
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	Иначе
		//Печать макетов ТОРГ13, М4, М11, Ведомость - из модуля менеджера объекта
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ПеремещениеТоваров", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ПеремещениеТоваров", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Ведомость", "Перемещение товаров");
	СтруктураМакетов.Вставить("ТОРГ13",             "ТОРГ-13 (Накладная на внутреннее перемещение)");
	СтруктураМакетов.Вставить("_1Т",                "Бланки ТТН");
	СтруктураМакетов.Вставить("М4",                 "М-4 (Приходный ордер)");
	СтруктураМакетов.Вставить("М11",                "M-11 (Требование-накладная)");
	СтруктураМакетов.Вставить("БланкОтправитель",   "Бланк товарного наполнения, склад отправитель");
	СтруктураМакетов.Вставить("БланкПолучатель",    "Бланк товарного наполнения, склад получатель");
	СтруктураМакетов.Вставить("Этикетки",           "Этикетки");
	СтруктураМакетов.Вставить( "ТранспУпаковки",    "Штрихкоды транспортных упаковок");
	СтруктураМакетов.Вставить("Ценники", "Ценники на товары");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Функция проверяет, есть ли НТТ среди склада-отправителя или склад-получателя.
//
// Возвращаемое значение:
//  Булево. Истина, если отправитель или получатель - НТТ.
//
Функция ЕстьНТТ() Экспорт

	ВидНТТ = Перечисления.ВидыСкладов.НТТ;
	//начало изменений БП 04
	Если СкладыВтабличнойЧасти Тогда
		возврат Ложь;
	Иначе
		Возврат (СкладОтправитель.ВидСклада = ВидНТТ Или СкладПолучатель.ВидСклада = ВидНТТ);
	КонецЕсли;	
    //конец изменений БП 04 
	

КонецФункции // ЕстьНТТ()

// Возвращает розничную сумму документа в валюте регл. учета.
//
// Возвращаемое значение:
//  Число. Розничная сумма документа в валюте регл. учета.
//
Функция ПолучитьРозничнуюСуммуДокумента() Экспорт

	Результат = 0;

	Если ЕстьНТТ() Тогда
		Для Каждого СтрокаТЧ Из Товары Цикл
			Результат = Результат + Окр(СтрокаТЧ.Цена * СтрокаТЧ.Количество, 2);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьРозничнуюСуммуДокумента()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры

// Процедура заполняет счета учета в строке табличной части или всей табличной части
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ДанныеТабличнойЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ДанныеТабличнойЧасти, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры

// Процедура заполняет счета учета в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаПоОтчетуПроизводстваЗаСменуРегл(СтрокаТабличнойЧасти, Выборка)
	
	СтрокаТабличнойЧасти.СчетУчетаБУ      			= Выборка.Счет;
	СтрокаТабличнойЧасти.СчетУчетаНУ      			= Выборка.СчетНУ;
	СтрокаТабличнойЧасти.НовыйСчетУчетаБУ      		= Выборка.Счет;
	СтрокаТабличнойЧасти.НовыйСчетУчетаНУ      		= Выборка.СчетНУ;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаПоОтчетуПроизводстваЗаСмену()

// Процедура заполняет поля запроса для целей регл. учета.
//
Процедура ЗаполнитьПоляЗапросаРегл(ПоляЗапросаРегл)
	
	ПоляЗапросаРегл = "
	|	ДокТовары.Счет,
	|	ДокТовары.СчетНУ,
	|";
	
КонецПроцедуры // ЗаполнитьПоляЗапросаРегл()

// Процедура выполняет заполнение табличной части по отчету производства за смену.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОтчетуПроизводстваЗаСменуУпр(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
    масНаправленияВыпуска = новый Массив;
	масНаправленияВыпуска.Добавить(Перечисления.НаправленияВыпуска.НаЗатраты);
	масНаправленияВыпуска.Добавить(Перечисления.НаправленияВыпуска.НаЗатратыСписок);
	
	Запрос.УстановитьПараметр("ДокументОснование", 	ДокументОснование);
	Запрос.УстановитьПараметр("ВидВыпуска",   		Перечисления.ВидыВыпуска.Наработка);
	Запрос.УстановитьПараметр("НаправлениеВыпуска", масНаправленияВыпуска);
	
	ПоляЗапросаРегл = "";
	ЗаполнитьПоляЗапросаРегл(ПоляЗапросаРегл);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокТовары.Номенклатура					КАК Номенклатура,
	|	ДокТовары.ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатуры,
	|	ДокТовары.СерияНоменклатуры				КАК СерияНоменклатуры,
	|	ДокТовары.ЕдиницаИзмерения 				КАК ЕдиницаИзмерения,
	|	ДокТовары.ЕдиницаИзмеренияМест 			КАК ЕдиницаИзмеренияМест,
	|	ДокТовары.Коэффициент 					КАК Коэффициент,
	|	ДокТовары.ЗаказРезерв 					КАК Заказ,
	|	ДокТовары.Качество 						КАК Качество,
	|	" + ПоляЗапросаРегл + "
	|	СУММА(ДокТовары.Количество)             КАК Количество,
	|	СУММА(ДокТовары.КоличествоМест)         КАК КоличествоМест
	|
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ДокТовары
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И ДокТовары.ВидВыпуска <> &ВидВыпуска
	|	И ДокТовары.НаправлениеВыпуска не в (&НаправлениеВыпуска)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура,
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры,
	|	ДокТовары.ЕдиницаИзмерения,
	|	ДокТовары.ЕдиницаИзмеренияМест,
	|	ДокТовары.Коэффициент,
	|	ДокТовары.ЗаказРезерв,
	|	" + ПоляЗапросаРегл + "
	|	ДокТовары.Качество
	|";


	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     			= Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Количество       			= Выборка.Количество;
		СтрокаТабличнойЧасти.КоличествоМест       		= Выборка.КоличествоМест;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест 		= Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент      			= Выборка.Коэффициент;
		СтрокаТабличнойЧасти.ДокументРезерва      		= Выборка.Заказ;
		СтрокаТабличнойЧасти.Качество      				= Выборка.Качество;
		
		ЗаполнитьСчетаУчетаПоОтчетуПроизводстваЗаСменуРегл(СтрокаТабличнойЧасти, Выборка);
					
	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");

	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(СкладОтправитель, Организация, МассивНоменклатуры, , СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ,ТаблицаРезервовПоСериям);
	ТоварыТабличнойЧасти= Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
    ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании");
	
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтуктураПоиска   = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СтуктураПоиска.Вставить("Цена",                   ИсходнаяСтрока.Цена);
		КонецЕсли;
		
        флЗаполнятьИзРезервов = ложь;
		Если ТипЗнч(ИсходнаяСтрока.ДокументРезерва)=Тип("ДокументСсылка.ЗаказПокупателя") И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании
			И СкладОтправитель.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
			Если ИсходнаяСтрока.ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтуктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ДокументРезерва);
				флЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;
		Если флЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;
		
		СтрокаСПустойСерией = Неопределено;
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			НоваяСтрока.СерияНоменклатуры            = Строка.СерияНоменклатуры;
			НоваяСтрока.Количество                   = СписанноеКоличество; 
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество* ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент / ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;            
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

		КонецЦикла;

		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
				НоваяСтрока.Количество                   = КоличествоОсталосьПогасить;
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Производит заполнение поля "Цена" табличной части "Товары".
//
Процедура ЗаполнитьРозничнуюЦену() Экспорт

	ОтправительНТТ   = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	ПолучательНТТ    = (СкладПолучатель.ВидСклада  = Перечисления.ВидыСкладов.НТТ);
	ПолучательТипЦен = ?((НЕ ОтправительНТТ) И ПолучательНТТ, СкладПолучатель.ТипЦенРозничнойТорговли, Неопределено);

	Для Каждого Строка Из Товары Цикл

		Если НЕ (ОтправительНТТ ИЛИ ПолучательНТТ) Тогда
			Строка.Цена = 0;
		ИначеЕсли (НЕ ОтправительНТТ) И ПолучательНТТ Тогда
			Строка.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры,
			              ПолучательТипЦен, Дата, Строка.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
		ИначеЕсли ОтправительНТТ Тогда
			Строка.Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, СкладОтправитель,
			              мВалютаРегламентированногоУчета, Дата, Строка.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	//начало изменений БП 04
	Если Не СкладыВтабличнойЧасти Тогда
		Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ
		 или СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
			ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
		КонецЕсли;
	КонецЕсли;
	//конец изменений БП 04 
	//Бирюков 02_10_13 для претензий нужно пошаманить со складами в Таблице
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПретензииПоПеремещениям Тогда
		Добавленные = ТаблицаТоваров.СкопироватьКолонки();
		Для каждого СтрокаДвижений Из ТаблицаТоваров Цикл
			Если СтрокаДвижений.ВидПретензии = Перечисления.ВидыПретензий.Недогруз Тогда
				СтрокаДвижений.СкладПолучатель  = СкладПретензий;
				СтрокаДвижений.Склад			= СкладТранзит.Ссылка;
				СтрокаДопДвижения = Добавленные.Добавить();
				Для ИндексКолонки = 0 ПО ТаблицаТоваров.Колонки.Количество()-1 Цикл
					СтрокаДопДвижения[ИндексКолонки] = СтрокаДвижений[ИндексКолонки]
				КонецЦикла;
				СтрокаДопДвижения.СкладПолучатель  = СкладОтправитель.Ссылка;
				СтрокаДопДвижения.Склад			   = СкладПретензий.Ссылка;
			ИначеЕсли СтрокаДвижений.ВидПретензии = Перечисления.ВидыПретензий.Перегруз Тогда
				СтрокаДвижений.СкладПолучатель  = СкладПретензий;
				СтрокаДвижений.Склад 			= СкладОтправитель;
				СтрокаДопДвижения = Добавленные.Добавить();
				Для ИндексКолонки = 0 ПО ТаблицаТоваров.Колонки.Количество()-1 Цикл
					СтрокаДопДвижения[ИндексКолонки] = СтрокаДвижений[ИндексКолонки]
				КонецЦикла;
				СтрокаДопДвижения.СкладПолучатель  = СкладТранзит.Ссылка;
				СтрокаДопДвижения.Склад 		   = СкладПретензий.Ссылка;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаДопДвижения ИЗ Добавленные Цикл
			СтрокаДвижений = ТаблицаТоваров.Добавить();
			Для ИндексКолонки = 0 ПО ТаблицаТоваров.Колонки.Количество()-1 Цикл
				СтрокаДвижений[ИндексКолонки] = СтрокаДопДвижения[ИндексКолонки]
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	//***************************************************
		
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	//начало изменений  
	ТаблицаТары.Колонки.Добавить("Качество");
	ТаблицаТары.ЗаполнитьЗначения(Справочники.Качество.Новый,"Качество");
	//конец изменений 
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	ПроверитьСтрокиТабличнойЧасти("Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

//Проверяет заполнение реквизитов табличных частей, которые зависят от указания реквизита ВнутреннийЗаказ
Процедура  ПроверитьСтрокиТабличнойЧасти(ИмяТЧ, ТЧ, Отказ, Заголовок)
	Для каждого Строка из ТЧ цикл
		СтрокаНачалаСообщенияОбОшибке = Нстр("ru = 'В строке номер """+ СокрЛП(Строка.НомерСтроки) +
			                               """ табличной части """ + ИмяТЧ + """: '");

		//{25.03.2015 Островерхий заявка №38069 
		Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПеремещениеТарыНаСкладСолво
			И Строка.Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво Тогда
		
			// неправильная номенклатура (можно использовать только номенклатуру не доступную для обмена с солво)
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'для вида операции Перемещение тары на склад солво нельзя использовать номенклатуру выгружаемую в солво'") , Отказ, Заголовок);
		
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция
			И НЕ Строка.Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво
			И СкладПолучатель.НСИ_ПодключенКSolvo Тогда
		
			// неправильная номенклатура (можно использовать только номенклатуру не доступную для обмена с солво)
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'для вида операции товары продукция нельзя использовать номенклатуру не выгружаемую в солво'") , Отказ, Заголовок);
		
		КонецЕсли; 
		//25.03.2015 Островерхий}
		
		//m.ionov@a-prof.ru 27.12.2013
		Если ИмяТЧ = "Товары" И СкладПолучатель.УЗ_Производственный Тогда
			Если Строка.Качество = Справочники.Качество.HOLD Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " указано качество HOLD. На производственные склады нельзя перемещать Сим в качестве HOLD!" , Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		//m.ionov@a-prof.ru 24.12.2014
		Если ИмяТЧ = "Товары" И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка Тогда
			Если Не ЗначениеЗаполнено(Строка.НоменклатураНовая) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " не указана номенклатура, которая получилась по результатам переупаковки!" , Отказ, Заголовок);		
			КонецЕсли;
			Если Строка.КоличествоПоступление = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " не указано количество номенклатуры, которая получилась по результатам переупаковки!" , Отказ, Заголовок);		
			КонецЕсли;
			//Blik 170517 65694 н
			Если ПроверитьНаРасхождениеСчетовУчета(Строка.Номенклатура, Строка.НоменклатураНовая) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " выбраны позиции номенклатуры с различными счетами учета!" , Отказ, Заголовок);
			КонецЕсли;
			//Blik 170517 65694 к
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		//m.ionov@a-prof.ru 24.02.2015
		Если ИмяТЧ = "Товары"  Тогда
			Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция И ЗначениеЗаполнено(СкладПретензий) Тогда
				//Для излишек даем возможность не заполнять количество
				Если Строка.Количество = 0 И Строка.ПР_ФактическиПринято = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " не указано количество, которое необходимо переместить!" , Отказ, Заголовок);		
				КонецЕсли;
			ИначеЕсли Строка.Количество = 0 И Строка.КоличествоПоНакладной = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " не указано количество, которое необходимо переместить!" , Отказ, Заголовок);		
			КонецЕсли;
				
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		//начало изменений БП 04
		Если ИмяТЧ = "Товары"  Тогда
			Если Строка.ВестиУчетПоСериям Тогда
				Если Не ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'не выбрана серия'") , Отказ, Заголовок);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Строка.СкладОтправительВидСклада) Тогда
			Если Строка.СкладОтправительВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
				 ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = ' склад Отправитель должен быть оптовый'") , Отказ, Заголовок);
			КонецЕсли;	
		КонецЕсли;	
		 
		Если ЗначениеЗаполнено(Строка.СкладПолучательВидСклада) Тогда
			Если Строка.СкладПолучательВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
				 ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = ' склад Получатель должен быть оптовый'") , Отказ, Заголовок);
			КонецЕсли;	
		КонецЕсли;	
		//начало изменений
		//начало изменений
		Если Не ЗначениеЗаполнено(Строка.Склад) и СкладыВтабличнойЧасти Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'не заполнен склад отправитель'") , Отказ, Заголовок);
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Строка.СкладПолучатель) и СкладыВтабличнойЧасти Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'не заполнен склад получатель'") , Отказ, Заголовок);
		КонецЕсли;	
		//конец изменений 
		
		//конец изменений 
		//конец изменений БП 04 		
		Если НЕ ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДокументРезерва) Тогда
			Если Строка.ДокументРезерва<>Строка.ВнутреннийЗаказ Тогда
				//неправильный документ резерва
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'указан документ резерва, отличающийся от значения реквизита ""Внутренний заказ""'") , Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		Если Строка.ВнутреннийЗаказ.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			//неправильный внутренний заказ
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'указан Внутренний заказ с видом заказа """+Строка.ВнутреннийЗаказ.ВидЗаказа+""". Может быть указан только заказ с видом ""На склад"" '") , Отказ, Заголовок);

		КонецЕсли;
		
		Если Строка.СкладВнутреннегоЗаказа <> СкладПолучатель Тогда
			// неправильный склад
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Нстр("ru = 'указан Внутренний заказ, в котором склад-заказчик отличается от склада-получателя, указанного в шапке документа'") , Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	ПроверитьСтрокиТабличнойЧасти("Возвратная тара", ТаблицаПоТаре, Отказ, Заголовок);


КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете
	  ИЛИ (НЕ СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов и (СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка и СтруктураШапкиДокумента.Дата >= ПРГ_ДопФункцииКлиентСервер.ПолучитьДатуНовогоАлгоритмовВСтомости()))
	  ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
	  
	  Возврат;
	КонецЕсли;
	
	// Проверка остатков при оперативном проведении.
	Если   НЕ ПараметрыСеанса.ПроведениеДокументов  Тогда
		Движения.ТоварыОрганизаций.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	
	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыОрганизаций.
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	//начало изменений
	Если Дата >= ПРГ_ДопФункцииКлиентСервер.ПолучитьДатуНовогоАлгоритмовВСтомости() Тогда
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
	КонецЕсли;	
	//конец изменений 
	
			
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
		
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
	//начало изменений БП 04 
	//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       СкладОтправитель);
	//конец изменений БП 04 
				
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
	// А теперь приход на склад-получатель
	//начало изменений БП 04 
	//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
	для Каждого ТекСтрока Из СтруктТаблицДокумента  Цикл
		ТекСтрока.Значение.Колонки.Склад.Имя = "СкладОтправитель";
		ТекСтрока.Значение.Колонки.СкладПолучатель.Имя = "Склад";
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка Тогда
			Если ТекСтрока.Значение.Колонки.Найти("НоменклатураНовая") <>  Неопределено Тогда
					ТекСтрока.Значение.Колонки.Номенклатура.Имя = "Номенклатура1";
					ТекСтрока.Значение.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаНоменклатуры1";
					ТекСтрока.Значение.Колонки.СерияНоменклатуры.Имя = "СерияНоменклатуры1";
					
					ТекСтрока.Значение.Колонки.Количество.Имя = "Количество1";
					ТекСтрока.Значение.Колонки.КоличествоПоступление.Имя = "Количество";
					
					ТекСтрока.Значение.Колонки.НоменклатураНовая.Имя = "Номенклатура";
					ТекСтрока.Значение.Колонки.ХарактеристикаНоменклатурыНовая.Имя = "ХарактеристикаНоменклатуры";
					ТекСтрока.Значение.Колонки.СерияНоменклатурыНовая.Имя = "СерияНоменклатуры";
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		
	//конец изменений БП 04 
				
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
	
	для Каждого ТекСтрока Из СтруктТаблицДокумента Цикл
		ТекСтрока.Значение.Колонки.Склад.Имя = "СкладПолучатель";
		ТекСтрока.Значение.Колонки.СкладОтправитель.Имя = "Склад";
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка Тогда
			Если ТекСтрока.Значение.Колонки.Найти("Номенклатура1") <>  Неопределено Тогда
				
				    ТекСтрока.Значение.Колонки.Количество.Имя = "КоличествоПоступление";
					ТекСтрока.Значение.Колонки.Количество1.Имя = "Количество";
				
					ТекСтрока.Значение.Колонки.Номенклатура.Имя = "НоменклатураНовая";
					ТекСтрока.Значение.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаНоменклатурыНовая";
					ТекСтрока.Значение.Колонки.СерияНоменклатуры.Имя = "СерияНоменклатурыНовая";
					
					ТекСтрока.Значение.Колонки.Номенклатура1.Имя = "Номенклатура";
					ТекСтрока.Значение.Колонки.ХарактеристикаНоменклатуры1.Имя = "ХарактеристикаНоменклатуры";
					ТекСтрока.Значение.Колонки.СерияНоменклатуры1.Имя = "СерияНоменклатуры";
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;	
	//конец изменений БП 04 
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// Функция удаляет из исходной таблицы строки не требующие резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеРезервПоЗаказ()

// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеСнятияСРезерва(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСнятияСРезерва()

// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРезервирования(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) 
		   ИЛИ (ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) И СтрокаТаблицы.СкладВнутреннегоЗаказа = СкладПолучатель)
		   Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСнятияСРезерва()


// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция ПодготовитьТаблицуТоваровКПолучению(ТабТовары)

	ТаблицаПоТоварамКПолучению = ТабТовары.Скопировать();
	ТаблицаПоТоварамКПолучению.Колонки.Добавить("ДокументПолучения");
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамКПолучению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамКПолучению.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ТаблицаПоТоварамКПолучению.Удалить(СтрокаТаблицы);
		Иначе 
			СтрокаТаблицы.ДокументПолучения = СтрокаТаблицы.ДокументРезерва;
			Если не СтрокаТаблицы.ДокументРезерва.БезПраваПРодажи Тогда
				СтрокаТаблицы.ДокументРезерва = неопределено;
			КонецЕсли;
			
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамКПолучению;
	
КонецФункции // ПодготовитьТаблицуТоваровКПолучению()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);

	Если СтруктураШапкиДокумента.РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
		ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
	Иначе
		ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
		ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаДвиженийПоСписаннымТоварам = Движения.СписанныеТовары.Выгрузить();
	Если ТаблицаДвиженийПоСписаннымТоварам.Количество()>0 Тогда
		//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	    Если ПРГ_ДопФункцииКлиентСервер.ПРГПроводитьПоПартиям(СтруктураШапкиДокумента) Тогда
		
			УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
			
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, ТаблицаДвиженийПоСписаннымТоварам);
		КонецЕсли;
		//конец изменений 
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

//начало изменений БП 04
Процедура ПоменятьМестамиОтправителяПолучателя(ТаблицаПоТоварам,ТаблицаПоТаре)
			ТаблицаПоТоварам.Колонки.Склад.Имя = "СкладОтправитель1";
			ТаблицаПоТоварам.Колонки.СкладПолучатель.Имя = "Склад";
			
			ТаблицаПоТаре.Колонки.Склад.Имя = "СкладОтправитель1";
			ТаблицаПоТаре.Колонки.СкладПолучатель.Имя = "Склад";
	
КонецПроцедуры	
Процедура ПоменятьМестамиПолучателяОтправителя(ТаблицаПоТоварам,ТаблицаПоТаре)
			ТаблицаПоТоварам.Колонки.Склад.Имя 			   = "СкладПолучатель";
			ТаблицаПоТоварам.Колонки.СкладОтправитель1.Имя = "Склад";
			
			ТаблицаПоТаре.Колонки.Склад.Имя 			   = "СкладПолучатель";
			ТаблицаПоТаре.Колонки.СкладОтправитель1.Имя = "Склад";
			
КонецПроцедуры	

//конец изменений БП 04 

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		//начало изменений БП 04 
		Если 
		   СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование
		   И СтруктураШапкиДокумента.ВидСкладаПолучателя <> Перечисления.ВидыСкладов.Оптовый Тогда
		//конец изменений БП 04    
			УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"), Дата, Ложь, Заголовок);
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 и НЕ ПараметрыСеанса.ПроведениеДокументов  Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0  и НЕ ПараметрыСеанса.ПроведениеДокументов   Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",            СкладОтправитель);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
						
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
			// Если мы перемещаем в НТТ, то надо сделать приход по специальному регистру
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ И НЕ Отказ Тогда
				
				// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПеремещениюВНТТ
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПеремещениюВНТТ, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",               СкладПолучатель);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПеремещения", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",           Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",           Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
						
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПеремещениюВНТТ, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТаблицаПоТоварам);
			ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
				
				// Контроль остатков товара
				Если ТаблицаПоТоварамРезерв.Количество() <> 0 и НЕ ПараметрыСеанса.ПроведениеДокументов  Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареРезерв.Количество() <> 0 и НЕ ПараметрыСеанса.ПроведениеДокументов   Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если Не Отказ Тогда

					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
				КонецЕсли;
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			ТаблицаПоТоварамКПолучению = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТоварам);
			ТаблицаПоТареКПолучению    = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 ИЛИ ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				// Контроль остатков товара
				Если ТаблицаПоТоварамКПолучению.Количество() <> 0 и НЕ ПараметрыСеанса.ПроведениеДокументов   Тогда
					ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареКПолучению.Количество() <> 0 и НЕ ПараметрыСеанса.ПроведениеДокументов  Тогда
					ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПолучению);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареКПолучению);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",        СкладОтправитель);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
		 			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
					
			КонецЕсли;
			
		Иначе // не по ордерам

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Расход.
			Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ Тогда
				НаборДвижений = Движения.ТоварыВНТТ;
				
				// Контроль остатков товара
				Если Товары.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ВозвратнаяТара.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
			ИначеЕсли СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.Розничный Тогда
				НаборДвижений = Движения.ТоварыВРознице;
				Если НЕ ИспользоватьРегистрСвободныеОстатки Тогда
					// Контроль остатков товара
					Если Товары.Количество() <> 0 Тогда
						ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
					Если ВозвратнаяТара.Количество() <> 0 Тогда
						ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
				КонецЕсли;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
				
				//{04.08.2015 Островерхий заявка №42367 
				//Перенесено в процедуру КонтроляОстатковПоТоварамНаСкладах() вызываемую в обработке проведения.
				// Контроль остатков товара
				//m.ionov@a-prof.ru 05.02.2015
				//Считаем что в данной конфигурации включено использование регистра свободные остатки
				//Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) и Не СкладОтправитель.НСИ_СкладТранзит Тогда
				//	Если Товары.Количество() <> 0 и НЕ ПараметрыСеанса.ПроведениеДокументов  Тогда
				//		ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения, Истина);
				//	КонецЕсли;
				//КонецЕсли;
				//----m.ionov@a-prof.ru---
				//04.08.2015 Островерхий}
				Если НЕ ИспользоватьРегистрСвободныеОстатки Тогда
					
					Если Товары.Количество() <> 0 и НЕ ПараметрыСеанса.ПроведениеДокументов  Тогда
						ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
					Если ВозвратнаяТара.Количество() <> 0 и НЕ ПараметрыСеанса.ПроведениеДокументов  Тогда
						ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
					
				 КонецЕсли;
			КонецЕсли;
			
			Если Не Отказ Тогда
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
												
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				//начало изменений БП 04 
				//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
				//конец изменений БП 04 
				
				Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ Тогда
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
				Иначе
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",  Справочники.Качество.Новый,  "ТаблицаПоТаре");
					Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.Розничный Тогда
						ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладОтправитель, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
						УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);
						ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладОтправитель, ТаблицыДанныхДокумента["ТаблицаПоТаре"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
						УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТаре"], ТаблицаПоЦенам);
					КонецЕсли;
				КонецЕсли;
				
				//++ Spl_Апроф 19.09.2014 (k.russkih@a-prof.ru) Изменим приход по складам
				мТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
				СкорректируемДвиженияПоТоварамНаСкладах(ТаблицаПоТоварам, ТаблицыДанныхДокумента, , Истина);
				//-- Spl_Апроф
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
				//++ Spl_Апроф 19.09.2014 (k.russkih@a-prof.ru)
				ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам", мТаблицаПоТоварам);
				мТаблицаПоТоварам = Неопределено;
				//-- Spl_Апроф
				
			КонецЕсли;

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Приход.
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
				НаборДвижений = Движения.ТоварыВНТТ;
			ИначеЕсли СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.Розничный Тогда
				НаборДвижений = Движения.ТоварыВРознице;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
			КонецЕсли;

			//начало изменений БП 04 
			ПоменятьМестамиОтправителяПолучателя(ТаблицаПоТоварам,ТаблицаПоТаре);
			//конец  изменений БП 04 
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
			
												
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			//начало изменений БП 04 
			ПоменятьМестамиПолучателяОтправителя(ТаблицаПоТоварам,ТаблицаПоТаре);
			//конец  изменений БП 04 
			
			
			//начало изменений БП 04 
			//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
			//конец изменений БП 04 
				
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
			Иначе
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",  Справочники.Качество.Новый,  "ТаблицаПоТаре");
				Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.Розничный Тогда
					// ТОВАР
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладПолучатель, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);
						
					// Проверка наличия продажных цен на приходуемый товар.
					УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицыДанныхДокумента["ТаблицаПоТоварам"], Отказ, Заголовок);
						
					// ТАРА
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладПолучатель, ТаблицыДанныхДокумента["ТаблицаПоТаре"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТаре"], ТаблицаПоЦенам);

					// Проверка наличия продажных цен на приходуемый товар.
					УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "ВозвратнаяТара", ТаблицыДанныхДокумента["ТаблицаПоТаре"], Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
			
			//начало изменений БП 04 
			ПоменятьМестамиОтправителяПолучателя(ТаблицаПоТоварам,ТаблицаПоТаре);
			//конец  изменений БП 04 
			
			Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка Тогда
				СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.Номенклатура.Имя = "Номенклатура1";
				СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.НоменклатураНовая.Имя = "Номенклатура";
				//m.ionov@a-prof.ru 24.12.2014
				СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.Количество.Имя = "Количество1";
				СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.КоличествоПоступление.Имя = "Количество";
				//----m.ionov@a-prof.ru---
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);	
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.Номенклатура.Имя = "НоменклатураНовая";
				СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.Номенклатура1.Имя = "Номенклатура";
				//m.ionov@a-prof.ru 24.12.2014
				СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.Количество.Имя = "КоличествоПоступление";
				СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.Количество1.Имя = "Количество";
				//----m.ionov@a-prof.ru---
			Иначе
				//++ Spl_Апроф 19.09.2014 (k.russkih@a-prof.ru) Изменим приход по складам
				СкорректируемДвиженияПоТоварамНаСкладах(ТаблицаПоТоварам, ТаблицыДанныхДокумента);				
				//-- Spl_Апроф
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			КонецЕслИ;	
			
			//начало изменений БП 04 
			ПоменятьМестамиПолучателяОтправителя(ТаблицаПоТоварам,ТаблицаПоТаре);
			//конец  изменений БП 04 
			

			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеСнятияСРезерва(ТаблицаПоТоварам);
			ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеСнятияСРезерва(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
					
					
				// Контроль остатков товара
				Если ТаблицаПоТоварамРезерв.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареРезерв.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
					
					//начало изменений БП 04 
					//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
					//конец изменений БП 04 
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
					//приход резерва на склад-получатель
					ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеРезервирования(ТаблицаПоТоварам);
					ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеРезервирования(ТаблицаПоТаре);
					Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
						
						//начало изменений БП 04 
						ПоменятьМестамиОтправителяПолучателя(ТаблицаПоТоварам,ТаблицаПоТаре);
						//конец  изменений БП 04 
						
						СтруктТаблицДокумента = Новый Структура;
						СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
						СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
						
						ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);

						//начало изменений БП 04 
						//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
						//конец изменений БП 04 
						ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
						
						//начало изменений БП 04 
						ПоменятьМестамиПолучателяОтправителя(ТаблицаПоТоварам,ТаблицаПоТаре);
						//конец  изменений БП 04 
						
				    КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			
			
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			// Для резервов по ордеру надо поменять склад в регистре "Товары к получению на склады"
			ТаблицаПоТоварамКПолучению = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТоварам);
			ТаблицаПоТареКПолучению    = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 ИЛИ ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				// Контроль остатков товара
				Если ТаблицаПоТоварамКПолучению.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареКПолучению.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПолучению);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареКПолучению);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
					
					//начало изменений БП 04 
					//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",        СкладОтправитель);
					//конец изменений БП 04 
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
					// То же в приход на новый склад.
					
					//начало изменений БП 04 
					ПоменятьМестамиПолучателяОтправителя(ТаблицаПоТоварамКПолучению,ТаблицаПоТареКПолучению);
					//конец  изменений БП 04 
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
					
					//начало изменений БП 04 
					ПоменятьМестамиПолучателяОтправителя(ТаблицаПоТоварамКПолучению,ТаблицаПоТареКПолучению);
					//конец  изменений БП 04 
					
				КонецЕсли;
				
			КонецЕсли;
					
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяТабЧасти",       "Товары");
		ДопПараметры.Вставить("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
		ДопПараметры.Вставить("РежимПроведения",   РежимПроведения);
		ДопПараметры.Вставить("ИмяРеквизитаЗаказ",  "ВнутреннийЗаказ");
		ДопПараметры.Вставить("ЗаказВШапке",        ложь);
		
		ТабИсходная = ТаблицаПоТоварам.Скопировать();
		
		ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.Купленный);
		Если ТабИсходная.Количество() > 0 Тогда
			УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
	
		ДопПараметры.Вставить("ИмяТабЧасти", "ВозвратнаяТара");
		ДопПараметры.Вставить("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		ТабИсходная = ТаблицаПоТаре.Скопировать();
		
		ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Если ТабИсходная.Количество() > 0 Тогда
			УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
		
		//m.ionov@a-prof.ru 30.04.2014
		Если Не Отказ Тогда
			
			ВидНоменклатурыТара = Константы.УП_ВидНоменклатурыВозвратнаяТара.Получить();
			Если ЗначениеЗаполнено(ВидНоменклатурыТара)
				И Дата >= НачалоДня(Константы.УП_ДатаНачалаУчетаВозвратнойТарыПоСкладам.Получить())
				И Не Константы.УП_ДатаНачалаУчетаВозвратнойТарыПоСкладам.Получить() = Дата(1,1,1) Тогда
				
				Если ВозвратнаяТара.Количество() <> 0 И Константы.УП_КонтролироватьПеремещениеПоВозвратнойТаре.Получить() = Истина Тогда
					ПроцедурыКонтроляОстатков.ТоварыПолученныеКонтрольОстатков_Перемещение("ВозвратнаяТара", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;	
				
				Если Не Отказ Тогда
					КопияТаблицаПоТаре = ТаблицаПоТаре.Скопировать();
					КопияТаблицаПоТаре.Колонки.Добавить("УП_Склад");
					КопияТаблицаПоТаре.Колонки.Добавить("УП_СкладПолучатель");
					
					Сч = 0;
					Пока Сч < КопияТаблицаПоТаре.Количество() Цикл              
						СтрокаТаблицы = КопияТаблицаПоТаре[Сч]; 
						Если СтрокаТаблицы.Номенклатура.ВидНоменклатуры = ВидНоменклатурыТара Тогда
							СтрокаТаблицы.УП_Склад = СтрокаТаблицы.Склад;
							СтрокаТаблицы.УП_СкладПолучатель = СтрокаТаблицы.СкладПолучатель;
							Сч = Сч + 1; 
						Иначе
							КопияТаблицаПоТаре.Удалить(СтрокаТаблицы);
						КонецЕсли;
					КонецЦикла;
					
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", КопияТаблицаПоТаре);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыПолученные, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
					//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,, Истина));
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
					КопияТаблицаПоТаре.Колонки.УП_Склад.Имя = "УП_СкладОтправитель";
					КопияТаблицаПоТаре.Колонки.УП_СкладПолучатель.Имя = "УП_Склад";
					
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", КопияТаблицаПоТаре);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыПолученные, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
					//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,, Истина));
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				КонецЕсли; 				
				
			КонецЕсли;
			
		КонецЕсли;
		//----m.ionov@a-prof.ru---
	
	КонецЕсли;
	
КонецПроцедуры

Процедура  ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, знач СтатусПартии)
	Сч = 0;

	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ)  // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.ВнутреннийЗаказ.Заказчик = СкладПолучатель Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ВнутреннийЗаказ, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, 
																   ?(СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,неопределено,СтрокаТаблицы.ХарактеристикаНоменклатуры),
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   СтатусПартии);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Формирование движений по регистру "Списанные товары".
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамИсходная, ТаблицаПоТареИсходная,Отказ, Заголовок)

	//начало изменений БП 04
	
	//конец изменений БП 04 
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
		
	// Заполним таблицу движений.
	ТаблицаПоТоварам = УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварамИсходная, Истина);
	
	ВидНоменклатурыВозвратнаяТара = Константы.УП_ВидНоменклатурыВозвратнаяТара.Получить();
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаДвижения Из ТаблицаПоТоварам Цикл
		Если СтрокаДвижения.Номенклатура.ВидНоменклатуры = ВидНоменклатурыВозвратнаяТара Тогда
			СтрокиКУдалению.Добавить(СтрокаДвижения);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаДвижения Из СтрокиКУдалению Цикл
		ТаблицаПоТоварам.Удалить(СтрокаДвижения);
	КонецЦикла;
	
	//++ Spl_Апроф 19.09.2014 (k.russkih@a-prof.ru) Изменим
	СкорректируемДвиженияПоТоварамНаСкладах(ТаблицаПоТоварам,,Истина);				
	//-- Spl_Апроф	
	
	ТаблицаПоТоварам.Колонки.Добавить("ЗаказСписания");
	ТаблицаПоТоварам.Колонки.Добавить("ЗаказПартии");
	ТаблицаПоТоварам.Колонки.Добавить("СписыватьТолькоПоЗаказу");

	// Удалим строки с документами резерва по ордерам
	НомерСтроки = 0;
	Пока НомерСтроки < ТаблицаПоТоварам.Количество() Цикл
		
		Если ТаблицаПоТоварам[НомерСтроки].РезервБезПраваПродажи = Истина Тогда
			ТаблицаПоТоварам.Удалить(НомерСтроки);
		Иначе
			
			// Если ведется обособленный учет или материалы переданы в переработку
			// то списывать нужно только партии по указанному заказу
			Если ТаблицаПоТоварам[НомерСтроки].ОбособленныйУчетТоваровПоЗаказамПокупателей = Истина
			 ИЛИ ТаблицаПоТоварам[НомерСтроки].ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			 
				ТаблицаПоТоварам[НомерСтроки].ЗаказПартии   = ТаблицаПоТоварам[НомерСтроки].ДокументРезерва;
				ТаблицаПоТоварам[НомерСтроки].ЗаказСписания = ТаблицаПоТоварам[НомерСтроки].ДокументРезерва;
				
			КонецЕсли;
			
			ТаблицаПоТоварам[НомерСтроки].СписыватьТолькоПоЗаказу = Истина;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЕсли;
		
	КонецЦикла;

	// Переименуем колонки
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаПоТоварам.Колонки.НовыйСчетУчетаБУ.Имя 			= "КорСчетБУ";
		ТаблицаПоТоварам.Колонки.НовыйПринятыеСчетУчетаБУ.Имя 	= "ПринятыеКорСчетБУ";
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ТаблицаПоТоварам.Колонки.НовыйСчетУчетаНУ.Имя 			= "КорСчетНУ";
		ТаблицаПоТоварам.Колонки.НовыйПринятыеСчетУчетаНУ.Имя 	= "ПринятыеКорСчетНУ";
	КонецЕсли;
	
	//Бирюков 02_10_13 для новых видов операций добавим в ТаблицаДвижений новые колонки
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПретензииПоПеремещениям Тогда
		ТаблицаДвижений.Колонки.Добавить("ВидПретензии");
	//ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка Тогда
	//	ТаблицаДвижений.Колонки.Добавить("НоменклатураНовая");
	//	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатурыНовая");
	//	ТаблицаДвижений.Колонки.Добавить("КоличествоПоступление");
	//	ТаблицаДвижений.Колонки.Добавить("СерияНоменклатурыНовая");
	КонецЕсли;
	//*********************************************
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
		ТаблицаПоТоварам,
		ТаблицаДвижений,
		Истина);
	
	// Если Партионный учет по складам  в упр учете
	Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, 					"ОтражатьВУправленческомУчете");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, 	"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     	"ОтражатьВНалоговомУчете");
	
	// Недостающие поля.
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			Строка.СчетУчетаНУ = Строка.СчетУчетаБУ;
			Строка.КорСчетНУ   = Строка.КорСчетБУ;
			Строка.ПринятыеСчетУчетаНУ = Строка.ПринятыеСчетУчетаБУ;
  			Строка.ПринятыеКорСчетНУ   = Строка.ПринятыеКорСчетБУ;
			Если НЕ мСчета003_01.НайтиПоЗначению(Строка.СчетУчетаБУ) = Неопределено
			 ИЛИ НЕ мСчета003_01.НайтиПоЗначению(Строка.ПринятыеСчетУчетаБУ) = Неопределено Тогда
				Строка.ОтражатьВНалоговомУчете = Ложь;
			Иначе	
			    Строка.ОтражатьВНалоговомУчете = Истина;
			КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Если НЕ мСчета003_01.НайтиПоЗначению(Строка.СчетУчетаБУ) = Неопределено
			 ИЛИ НЕ мСчета003_01.НайтиПоЗначению(Строка.ПринятыеСчетУчетаБУ) = Неопределено Тогда
				Строка.ОтражатьВНалоговомУчете = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		//начало изменений БП 04
		Если	мСчетаЗабаланс.НайтиПоЗначению(Строка.СчетУчетаБУ) <> Неопределено
			или мСчетаЗабаланс.НайтиПоЗначению(Строка.ПринятыеСчетУчетаБУ) <> Неопределено
		Тогда
			Строка.ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;	
		//Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка и Дата >= ПРГ_ДопФункцииКлиентСервер.ПолучитьДатуНовогоАлгоритмовВСтомости() Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка Тогда
			Если ЗначениеЗаполнено(Строка.НоменклатураНовая) и  (Строка.НоменклатураНовая <> Строка.Номенклатура) Тогда
				Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Комплектация;
			Иначе
				 Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами;
			КонецЕсли;	
		КонецЕсли;	
		//конец изменений БП 04 
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Товары,   	  		"ВидТабличнойЧасти");
	//начало изменений БП 04 
	//ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,										"Склад");
	//ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,										"СкладПолучатель");
	//конец изменений БП 04 
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,													"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,												"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,												"Активность");
	
	//Бирюков 02_10_13 добавим новые виды операций (переупаковка делается комплектацией !!!!!)
	//Если (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция)
	// ИЛИ (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам) Тогда 
	Если (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция)
	 ИЛИ (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам) 
	 ИЛИ (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПретензииПоПеремещениям) 
	 ИЛИ (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка)
	 //{25.03.2015 Островерхий заявка №38069 
	 ИЛИ (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПеремещениеТарыНаСкладСолво) 
	 //25.03.2015 Островерхий} 
	 Тогда 
	 
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,		"ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,		"ДопустимыйСтатус2");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,		"ДопустимыйСтатус3");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВПереработку,	"ДопустимыйСтатус4");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование,	"ДопустимыйСтатус1");
		
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,													"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,    													"Организация");
	//Если ВидОперации <> Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка Тогда
    //Если Не (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка и Дата >= ПРГ_ДопФункцииКлиентСервер.ПолучитьДатуНовогоАлгоритмовВСтомости()) Тогда
	Если Не (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка) Тогда
		//и Дата >= ПРГ_ДопФункцииКлиентСервер.ПолучитьДатуНовогоАлгоритмовВСтомости()) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами, 	"КодОперацииПартииТоваров");
	КонецЕсли;	
	//КонецЕсли;	
	
	// Документы с видом передачи по ордеру сразу не проводятся в партионном учете
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	//Бирюков 02_10_13 для претензий нужно пошаманить со складами в ТаблицаДвижений
	//Ожиганов уже все сделано в подготовить таблицу по товарам
	//Если НЕ ТаблицаДвижений.Колонки.Найти("ВидПретензии") = Неопределено Тогда
	//	Добавленные = ТаблицаДвижений.СкопироватьКолонки();
	//	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл
	//		Если СтрокаДвижений.ВидПретензии = Перечисления.ВидыПретензий.Недогруз Тогда
	//			СтрокаДвижений.СкладПолучатель = СкладПретензий.Ссылка;
	//			СтрокаДвижений.Склад		   = СкладТранзит.Ссылка;
	//			СтрокаДопДвижения = Добавленные.Добавить();
	//			Для ИндексКолонки = 0 ПО ТаблицаДвижений.Колонки.Количество()-1 Цикл
	//				СтрокаДопДвижения[ИндексКолонки] = СтрокаДвижений[ИндексКолонки]
	//			КонецЦикла;
	//			СтрокаДопДвижения.СкладПолучатель = СкладОтправитель.Ссылка;
	//			СтрокаДопДвижения.Склад		   	  = СкладПретензий.Ссылка;
	//		ИначеЕсли СтрокаДвижений.ВидПретензии = Перечисления.ВидыПретензий.Перегруз Тогда
	//			СтрокаДвижений.СкладПолучатель = СкладПретензий.Ссылка;
	//			СтрокаДвижений.Склад		   = СкладОтправитель.Ссылка;
	//			СтрокаДопДвижения = Добавленные.Добавить();
	//			Для ИндексКолонки = 0 ПО ТаблицаДвижений.Колонки.Количество()-1 Цикл
	//				СтрокаДопДвижения[ИндексКолонки] = СтрокаДвижений[ИндексКолонки]
	//			КонецЦикла;
	//			СтрокаДопДвижения.СкладПолучатель = СкладТранзит.Ссылка;
	//			СтрокаДопДвижения.Склад		   	  = СкладПретензий.Ссылка;
	//		КонецЕсли;
	//	КонецЦикла;
	//	Для Каждого СтрокаДопДвижения ИЗ Добавленные Цикл
	//		СтрокаДвижений = ТаблицаДвижений.Добавить();
	//		Для ИндексКолонки = 0 ПО ТаблицаДвижений.Колонки.Количество()-1 Цикл
	//			СтрокаДвижений[ИндексКолонки] = СтрокаДопДвижения[ИндексКолонки]
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЕсли;
	//***************************************************	
	ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений(ТаблицаДвижений, "НомерСтрокиДокумента");
	
	НаборДвижений.мПериод            = Дата;
	
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если НЕ Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	//ТаблицаДвижений.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
		ТаблицаПоТоварамИсходная,
		ТаблицаДвижений,
		Истина);
		
	ВидНоменклатурыВозвратнаяТара = Константы.УП_ВидНоменклатурыВозвратнаяТара.Получить();
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		Если СтрокаДвижения.Номенклатура.ВидНоменклатуры <> ВидНоменклатурыВозвратнаяТара Тогда
			СтрокиКУдалению.Добавить(СтрокаДвижения);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаДвижения Из СтрокиКУдалению Цикл
		ТаблицаДвижений.Удалить(СтрокаДвижения);
	КонецЦикла;
	
	ТаблицаПоТаре = ТаблицаПоТареИсходная.Скопировать();
	
	НомерСтроки   = 0;
	Пока НомерСтроки < ТаблицаПоТаре.Количество() Цикл
		Если ТаблицаПоТаре[НомерСтроки].РезервБезПраваПродажи = Истина Тогда
			ТаблицаПоТаре.Удалить(НомерСтроки);
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаПоТаре.Колонки.НовыйСчетУчетаБУ.Имя = "КорСчетБУ";
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ТаблицаПоТаре.Колонки.НовыйСчетУчетаНУ.Имя = "КорСчетНУ";
	КонецЕсли;
	
	//Бирюков 02_10_13 для нового вида операции добавим в ТаблицаДвижений новую колонку
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПретензииПоПеремещениям Тогда
		ТаблицаДвижений.Колонки.Добавить("ВидПретензии");
	КонецЕсли;
	//*********************************************
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
		ТаблицаПоТаре,
		ТаблицаДвижений,
		Истина);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Тара, 							"ВидТабличнойЧасти");

	Если Не СкладыВтабличнойЧасти Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,													"Склад");
		ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,													"СкладПолучатель");
	КонецЕсли;	

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,																"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,															"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,															"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,					"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,													"Подразделение");

	
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами,	"КодОперацииПартииТоваров");
	

	// Если Партионный учет по складам  в упр учете
	Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,									"ОтражатьВУправленческомУчете");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, 				"ОтражатьВБухгалтерскомУчете");
	
	//m.ionov@a-prof.ru 30.04.2014
	ВидНоменклатурыТара = Константы.УП_ВидНоменклатурыВозвратнаяТара.Получить();
	Если ЗначениеЗаполнено(ВидНоменклатурыТара)
		И Дата >= НачалоДня(Константы.УП_ДатаНачалаУчетаВозвратнойТарыПоСкладам.Получить())
		И Не Константы.УП_ДатаНачалаУчетаВозвратнойТарыПоСкладам.Получить() = Дата(1,1,1) Тогда
		ЗаписываемДоговор = Истина;
	Иначе
		ЗаписываемДоговор = Ложь;
	КонецЕсли;
	
	//начало изменений БП 04 
	Для Каждого Строка ИЗ ТаблицаДвижений Цикл
			//начало изменений БП 04
		Если мСчетаЗабаланс.НайтиПоЗначению(Строка.СчетУчетаБУ) <> Неопределено
		Тогда
			Строка.ОтражатьВНалоговомУчете = Ложь;
		Иначе
			Строка.ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
		КонецЕсли;	
		//конец изменений БП 04
		//m.ionov@a-prof.ru 30.04.2014
		Если ЗаписываемДоговор И Строка.Номенклатура.ВидНоменклатуры = ВидНоменклатурыТара Тогда
			Строка.КорСубконтоБУ2 = ДоговорКонтрагента;
		КонецЕсли;
		//----m.ionov@a-prof.ru---
    КонецЦикла;
	//ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     				"ОтражатьВНалоговомУчете");
	//конец изменений БП 04 

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, 														"Организация");
	
	// Документы с видом передачи по ордеру сразу не проводятся в партионном учете
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, 														"НеСписывать");
	КонецЕсли;
	
	//Бирюков 02_10_13 для нового вида операции нужно пошаманить со складами в ТаблицаДвижений
	//Если НЕ ТаблицаДвижений.Колонки.Найти("ВидПретензии") = Неопределено Тогда
	//	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл
	//		Если СтрокаДвижений.ВидПретензии = Перечисления.ВидыПретензий.Недогруз Тогда
	//			//тут поменяем оба склада
	//			СтрокаДвижений.СкладПолучатель = СкладОтправитель.Ссылка;
	//			СтрокаДвижений.Склад		   = СкладПретензий.Ссылка;
	//		ИначеЕсли СтрокаДвижений.ВидПретензии = Перечисления.ВидыПретензий.Перегруз Тогда
	//			//заменим склад-получатель на склад перетензий
	//			СтрокаДвижений.СкладПолучатель = СкладПретензий.Ссылка;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//***************************************************	
	
	ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений(ТаблицаДвижений, "НомерСтрокиДокумента", ТаблицаПоТоварам.Количество() + 1);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если НЕ Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры// ДвиженияПоРегиструСписанныеТовары

Процедура ДополнитьСтруктуруПолейТоваровРегл(СтруктураПолей)
	
	СтруктураПолей.Вставить("СчетУчетаБУ",              "СчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ",      "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ",              "СчетУчетаНУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ",         "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйПринятыеСчетУчетаБУ", "НовыйПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаНУ",         "НовыйСчетУчетаНУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаНУ",      "ПринятыеСчетУчетаНУ");
	СтруктураПолей.Вставить("НовыйПринятыеСчетУчетаНУ", "НовыйПринятыеСчетУчетаНУ");
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПолейПоТареРегл(СтруктураПолей)
	
	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"               , "СчетУчетаНУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаБУ"          , "НовыйСчетУчетаБУ");
	СтруктураПолей.Вставить("НовыйСчетУчетаНУ"          , "НовыйСчетУчетаНУ");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	//m.ionov@a-prof.ru 11.12.2014
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	//----m.ionov@a-prof.ru---
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда

		Если Не УправлениеЗаказами.ИспользоватьВнутренниеЗаказы() 
			ИЛИ Основание.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			Возврат;
		КонецЕсли;

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Истина;         
		ОтражатьВНалоговомУчете      = Истина;
		СкладПолучатель    = Основание.Заказчик;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		ВнутреннийЗаказ    = Основание.Ссылка;
		Комментарий        = Основание.Комментарий;

		Склад = Неопределено;
		#Если Клиент Тогда
			Если НЕ ВвестиЗначение(Склад, "Выберите склад отправитель", Тип("СправочникСсылка.Склады")) Тогда
				Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
			КонецЕсли;
		#Иначе
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		#КонецЕсли
		СкладОтправитель = Склад;

		//начало изменений БП 04 
		Если ВнутреннийЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ЗаявканаСИМ Тогда
			ЗаполнитьПоВНутреннемуЗаказуСим("Товары");
			ЗаполнитьПоВНутреннемуЗаказуСим("ВозвратнаяТара");
			//Blik 070917 65458 н
		ИначеЕсли ВнутреннийЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру 
			или  ВнутреннийЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера
			Тогда
			Контрагент =  Основание.Контрагент;
			ДоговорКонтрагента =  Основание.Договор;
			УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, Товары,         Склад, Дата);
			//ЗаполнитьПоВНутреннемуЗаказуСим("ВозвратнаяТара");
			//Blik 070917 65458 к
		Иначе
			УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, Товары,         Склад, Дата);
			УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, ВозвратнаяТара, Склад, Дата, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		КонецЕслИ;	
		//конец изменений БП 04	 
			
		ЗаполнитьРозничнуюЦену();

		ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)
    //начало изменений БП 04
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВыпускПродукции") Тогда

		// Заполнение шапки
		// Заполнение шапки
		ОбъектОснование		 = Основание.ПолучитьОбъект();
		ОтражатьВУправленческомУчете = ОбъектОснование.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете  = ОбъектОснование.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете      = ОбъектОснование.ОтражатьВНалоговомУчете;
		Организация                  = ОбъектОснование.Организация;
		Ответственный                = ОбъектОснование.Ответственный;
		Подразделение                = ОбъектОснование.Подразделение;
		Комментарий                  = ОбъектОснование.Комментарий;
		СкладПолучатель              = Неопределено;
		
		//m.ionov@a-prof.ru 27.10.2014
		Если ЗначениеЗаполнено(Основание.СП_ЗаданиеНаСмену) Тогда
			СкладПолучатель = Основание.СП_ЗаданиеНаСмену.Склад;
		КонецЕсли;
		//----m.ionov@a-prof.ru---

		СкладОтправитель = ОбъектОснование.Склад;

		Для Каждого ТекСтрокаТовары Из ОбъектОснование.Продукция Цикл

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = ТекСтрокаТовары.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Качество                   = Справочники.Качество.Новый;
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		КонецЦикла;
		
		ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)
	
	//конец изменений БП 04
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете      = Основание.ОтражатьВНалоговомУчете;
		Организация                  = Основание.Организация;
		Ответственный                = Основание.Ответственный;
		Подразделение                = Основание.Подразделение;
		Комментарий                  = Основание.Комментарий;
		СкладПолучатель              = Неопределено;

		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			СкладОтправитель = Основание.СкладОрдер.Склад;
		Иначе
			СкладОтправитель = Основание.СкладОрдер;
		КонецЕсли;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование;
		КонецЕсли;

		// Заполнение таб.части
		ТабЧасть = ?(Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование, Основание.Оборудование, Основание.Товары);
		Для Каждого ТекСтрокаТовары Из ТабЧасть Цикл

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = ТекСтрокаТовары.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Качество                   = Справочники.Качество.Новый;
			Если Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
				НоваяСтрока.ДокументРезерва = ТекСтрокаТовары.Заказ;
			КонецЕсли;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		КонецЦикла;

		Для Каждого ТекСтрокаТара Из Основание.ВозвратнаяТара Цикл

			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Номенклатура    = ТекСтрокаТара.Номенклатура;
			НоваяСтрока.Количество      = ТекСтрокаТара.Количество;
			НоваяСтрока.ДокументРезерва = ТекСтрокаТара.Заказ;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
        СкладОтправитель = Основание.Склад;
		ЗаполнитьТоварыПоОтчетуПроизводстваЗаСменуУпр(Основание);
	/// Кунов О.В., 01.10.2014 - 32066
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ВариантыВыбора = Новый СписокЗначений;
		ВариантыВыбора.Добавить(Ложь, "Пригодные");
		ВариантыВыбора.Добавить(Истина, "Непригодные");
		
		ВариантПригодности = ВариантыВыбора.ВыбратьЭлемент("Выберите вариант заполнения");
		
		Если ВариантПригодности = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВариантПригодности = ВариантПригодности.Значение;
		СкладОтправитель = Основание.Склад;
		
		Для Каждого СтрокаОснования Из Основание.Товары Цикл
			
			Если СтрокаОснования.ПРГ_ЗапчастьНепригодна = ВариантПригодности Тогда
				ЗаполнитьЗначенияСвойств(Товары.Добавить(), СтрокаОснования);
			КонецЕсли;
			
		КонецЦикла;
		
	///
		
	//++ Spl_Апроф 08.09.2014 (k.russkih@a-prof.ru)
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПР_Претензия") Тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ДокументОснование = Основание;
		
		мОтказПолностью = (Основание.ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаПолностью);
		
		СкладОтправитель = ДокументОснование.СкладПретензии;
		
		ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		
		ОтражатьВУправленческомУчете = Истина;
		//начало изменений
		Если ПРГ_ДопФункцииКлиентСервер.ПРГ_ПриФормированииДокОтгрузкиТолькоУпр() Тогда
			ОтражатьВБухгалтерскомУчете = Ложь;
			ОтражатьВНалоговомУчете 	= Ложь;
		Иначе	
			ОтражатьВБухгалтерскомУчете = Истина;
			ОтражатьВНалоговомУчете = Истина;
		КонецЕсли;	
		//конец изменений

		//ЭтоКорректировка = Ложь;
		
		Если ТипЗнч(ДокументОснование.Накладная) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			
			СкладПолучатель = ДокументОснование.Накладная.СкладПолучатель;
			//ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПР_КорректировкаПеремещения;
			
			//ЭтоКорректировка = Истина;
			
		Иначе
			СкладПолучатель = ДокументОснование.Накладная.Склад;
		КонецЕсли; 

		Для каждого Строка Из ДокументОснование.Товары Цикл
			
			Если НЕ Строка.КоличествоРекламации = 0 ИЛИ мОтказПолностью Тогда
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				//НоваяСтрока.Количество = ?(мОтказПолностью, Строка.Количество, Строка.КоличествоРекламации * ?(Строка.КоличествоРекламации > 0,1,-1));
				НоваяСтрока.Количество = ?(мОтказПолностью, Строка.Количество, Строка.Количество * ?(Строка.Количество > 0,1,-1));
				НоваяСтрока.Качество = Справочники.Качество.Новый;
				
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
				
			КонецЕсли; 
			
		КонецЦикла;	
		
		СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Открыто; // Шевченков 37870
		Комментарий = Основание.Комментарий; // Шевченков 37895
		
	//++ Spl_Апроф 15.09.2014 (k.russkih@a-prof.ru) Для складской подсистемы
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
		
		Если НЕ ТипЗнч(Основание.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ")
			//{11.06.2015 Островерхий заявка №б/н 
			И НЕ (ТипЗнч(Основание.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") И Основание.Заказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ПеремещениеСкоропорт) 
			//11.06.2015 Островерхий} 
			Тогда
			Возврат;		
		КонецЕсли; 
		
		Товары.Очистить();  
		ВозвратнаяТара.Очистить();
		
		СП_ЗаданиеНаПодбор = Основание;
		
		//{11.06.2015 Островерхий заявка №40578 
		Если ТипЗнч(Основание.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда

				ВнутреннийЗаказ = Основание.Заказ;  //Blik 091017 71631 н раскомм
				
		КонецЕсли;  
		//11.06.2015 Островерхий} 
		
		ОтражатьВУправленческомУчете = Истина;
		
		//начало изменений
		Если ПРГ_ДопФункцииКлиентСервер.ПРГ_ПриФормированииДокОтгрузкиТолькоУпр() Тогда
			ОтражатьВБухгалтерскомУчете = Ложь;
			ОтражатьВНалоговомУчете 	= Ложь;
		Иначе	
			ОтражатьВБухгалтерскомУчете = Истина;
			ОтражатьВНалоговомУчете = Истина;
		КонецЕсли;	
		//конец изменений
		
		ОтражатьВБухгалтерскомУчете  = Истина;         
		ОтражатьВНалоговомУчете      = Истина;
		//СкладПолучатель    = Основание.Заказ.Заказчик;
		
		//{11.06.2015 Островерхий заявка №40578 
		Если ТипЗнч(Основание.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		     
			Если ВнутреннийЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_ПередачаPOSM Тогда
					СкладПолучатель    = Основание.Заказ.Заказчик;
				//Blik 070917 65458 н
			ИначеЕсли Основание.Заказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру 
				или  Основание.Заказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера
				Тогда
				СкладПолучатель    = Основание.Заказ.Заказчик;
				Контрагент =  Основание.Заказ.Контрагент;
				ДоговорКонтрагента =  Основание.Заказ.Договор;
				//Blik 070917 65458 к
			Иначе	
				СкладПолучатель    = Основание.Заказ.СП_СкладТранзит;//Заказчик;
			КонецЕсли;
			
		Иначе
			
			//Заполнение по заказу покупателя с видом операции перемещение скоропорт
			СкладПолучатель  = АП_ОбщегоНазначенияСервер.ПолучимСкладыПоПривязкеКОтделению(Основание.Заказ.КП_Отделение).СкладСкоропорт;
			
		КонецЕсли;  
		//11.06.2015 Островерхий} 
				
		Организация        = Основание.Заказ.Организация;
		Ответственный      = Основание.Заказ.Ответственный;
		Подразделение      = Основание.Заказ.Подразделение;
		//Blik 070917 65458 н
		Если ТипЗнч(Основание.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") 
			и
			(Основание.Заказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру
			или Основание.Заказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера)
		Тогда
			ВнутреннийЗаказ = Документы.ВнутреннийЗаказ.ПустаяСсылка();
		Иначе
			//Blik 070917 65458 к
			ВнутреннийЗаказ    = Основание.Заказ;
		Конецесли;
		Комментарий        = Основание.Заказ.Комментарий;
	
		//СкладПретензий = ВнутреннийЗаказ.СП_СкладПретензий;

		СкладОтправитель = Основание.Склад;
		//СкладПолучатель  = АП_ОбщегоНазначенияСервер.ПолучимСкладыПоПривязкеКОтделению(Основание.Заказ.КП_Отделение).СкладТранзит;

		//Скорректируем количество
		МассивСтрокНаУдаление = Новый Массив;
				
		Для каждого мСтрока Из Основание.Товары Цикл
			
			Если мСтрока.КоличествоФакт = 0 Тогда				
				Продолжить;				
			КонецЕсли; 
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, мСтрока);
			НоваяСтрока.Количество = мСтрока.КоличествоФакт;
			
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			// Берем из самого реквизита Номенклатура
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			НоваяСтрока.Качество = Справочники.Качество.Новый;
			
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект);			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			НоваяСтрока.ДокументРезерва = Неопределено;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			//Blik 280917 65458 н
			//Blik 031016 71366 н
			//Если Основание.Заказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру 
			//	или  Основание.Заказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера
			//	Тогда
			Если ТипЗнч(Основание.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") 
				и
				(Основание.Заказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру
				или Основание.Заказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера)
				Тогда
				//Blik 031016 71366 к
				НоваяСтрока.ДатаВыпускаГП = мСтрока.ДатаВыпуска;				
			КонецЕсли;
			//Blik 280917 65458 к

		КонецЦикла;	
		
		ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	//m.ionov@a-prof.ru 12.11.2014
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда

		// Заполнение шапки
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ОтражатьВУправленческомУчете = Истина;
		
        СкладОтправитель = Основание.Склад;
		СкладПолучатель              = Неопределено;
		ДокументОснование = Основание;
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Основание.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Основание.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры          = Основание.СерияНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Основание.ЕдиницаИзмерения;
		НоваяСтрока.Количество                 = Основание.Количество;
		НоваяСтрока.Коэффициент                = Основание.Коэффициент;
		НоваяСтрока.Качество                   = Основание.ПРГ_Качество;
			
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
				
		ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") И Основание.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция И ЗначениеЗаполнено(Основание.СП_ЗаданиеНаПодбор) Тогда
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ДокументОснование = Основание;
		
		ВнутреннийЗаказ = ДокументОснование.ВнутреннийЗаказ;
		СП_ЗаданиеНаПодбор = ДокументОснование.СП_ЗаданиеНаПодбор;
		
		ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПР_КорректировкаПеремещения;
		
		СкладОтправитель = ДокументОснование.СкладОтправитель;
		СкладПолучатель = ДокументОснование.СкладПолучатель;
				
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете = Истина;
		ОтражатьВНалоговомУчете = Истина;
		
		//Найдем перемещение по приемке
		Если ЗначениеЗаполнено(ВнутреннийЗаказ) И ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
			
			СкладОтправитель = ВнутреннийЗаказ.СП_Склад;
			СкладПолучатель = ВнутреннийЗаказ.СП_СкладТранзит;
			
			//ЗаданиеНаПодбор = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(ВнутреннийЗаказ);
			
			//Если ЗначениеЗаполнено(ЗаданиеНаПодбор) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПеремещениеТоваров.Ссылка
				|ИЗ
				|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
				|ГДЕ
				|	ПеремещениеТоваров.ПометкаУдаления = ЛОЖЬ
				|	И ПеремещениеТоваров.ВнутреннийЗаказ = &Ссылка
				|	И ПеремещениеТоваров.СкладОтправитель = &СкладОтправитель
				|	И ПеремещениеТоваров.СкладПолучатель = &СкладПолучатель
				|	И ПеремещениеТоваров.СП_ЗаданиеНаПодбор = &СП_ЗаданиеНаПодбор";
				Запрос.УстановитьПараметр("Ссылка", ВнутреннийЗаказ);
				Запрос.УстановитьПараметр("СП_ЗаданиеНаПодбор", СП_ЗаданиеНаПодбор);
				Запрос.УстановитьПараметр("СкладОтправитель", ВнутреннийЗаказ.СП_СкладТранзит);
				Запрос.УстановитьПараметр("СкладПолучатель", ВнутреннийЗаказ.Заказчик);
				
				Результат = Запрос.Выполнить().Выбрать();
				
				Если Результат.Следующий() Тогда
					
					Для каждого Строка Из ДокументОснование.Товары Цикл
						
						Если Строка.ПР_ФактическиПринято > Строка.Количество Тогда 
							
							НоваяСтрока = Товары.Добавить();
							
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
							
							НоваяСтрока.Количество = Строка.ПР_ФактическиПринято - Строка.Количество;
							
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
			ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			//Blik 65458 280917 н
			Если  ДокументОснование.СП_ЗаданиеНаПодбор.ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера
				или ДокументОснование.СП_ЗаданиеНаПодбор.ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру
				Тогда
				СкладОтправитель = Основание.СкладПолучатель;
				СкладПолучатель = Справочники.Склады.ПустаяСсылка();

				Для каждого Строка Из ДокументОснование.Товары Цикл
					НоваяСтрока = Товары.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					
					НоваяСтрока.Количество = Строка.Количество;
				КонецЦикла;
				СП_ЗаданиеНаПодбор = Документы.СП_ЗаданиеНаПодбор.ПустаяСсылка();
			КонецЕсли;
			//Blik 65458 280917 к

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") И Основание.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция Тогда
		//Значит это комплектация
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ДокументОснование = Основание;
		
		ВнутреннийЗаказ = ДокументОснование.ВнутреннийЗаказ;
		СП_ЗаданиеНаПодбор = ДокументОснование.СП_ЗаданиеНаПодбор;
		
		ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка;
		
		СкладОтправитель = ДокументОснование.СкладПолучатель;
		СкладПолучатель = ДокументОснование.СкладПолучатель;
				
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете = Истина;
		ОтражатьВНалоговомУчете = Истина;
		
							
		Для каждого Строка Из ДокументОснование.Товары Цикл
						
			НоваяСтрока = Товары.Добавить();
							
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			Если НЕ ДокументОснование.СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.ПустаяСсылка() Тогда
				НоваяСтрока.Количество = Строка.ПР_ФактическиПринято;
			КонецЕсли;
			
			НоваяСтрока.ПР_КоличествоБрак = 0;
			НоваяСтрока.ПР_ФактическиПринято = 0;
							
		КонецЦикла;
		
		ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") И Основание.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка Тогда
		//Значит это комплектация
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ДокументОснование = Основание;
		
		ВнутреннийЗаказ = ДокументОснование.ВнутреннийЗаказ;
		СП_ЗаданиеНаПодбор = ДокументОснование.СП_ЗаданиеНаПодбор;
		
		ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		
		СкладОтправитель = ДокументОснование.СкладПолучатель;
		СкладПолучатель = Справочники.Склады.ПустаяСсылка();
				
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете = Истина;
		ОтражатьВНалоговомУчете = Истина;
		
							
		Для каждого Строка Из ДокументОснование.Товары Цикл
						
			НоваяСтрока = Товары.Добавить();
							
			//ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Номенклатура = Строка.НоменклатураНовая;
			
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ЭтотОбъект);

			// Берем из самого реквизита Номенклатура
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;

			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект);

			НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатурыНовая;
			НоваяСтрока.СерияНоменклатуры = Строка.СерияНоменклатурыНовая;
			
			НоваяСтрока.Количество = Строка.КоличествоПоступление;
			
			НоваяСтрока.Качество   = Строка.Качество;
			
		КонецЦикла;
		
		ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.ПеремещениеТоваров.СтруктураДополнительныхДанныхФормы());
		
	Иначе
		
		//m.ionov@a-prof.ru 11.12.2014
		//Перенесли выше
	    //ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		//----m.ionov@a-prof.ru---

		Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
			СкладОтправитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
			СкладПолучатель  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		
		/// Кунов О.В., 30.01.2015 - 
		ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВУправленческомУчете");
		ОтражатьВБухгалтерскомУчете  = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВБухгалтерскомУчете");
		ОтражатьВНалоговомУчете      = ОтражатьВНалоговомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");		
		
		Ответственный = глЗначениеПеременной("глТекущийПользователь");
		///
	
	КонецЕсли;
	
	// <- Шевченков
	Попытка
		
		ДокументОснование = Основание;
		
	Исключение КонецПопытки;
	// ->
	
	/// Кунов О.В., 29.10.2015 - 45343
	Для Каждого СтрокаТовара Из Товары Цикл
	
		Номенклатура 			= СтрокаТовара.Номенклатура;
		ЕдиницаХраненияОстатков = Номенклатура.ЕдиницаХраненияОстатков;
		ЕдиницаИзмерения 		= СтрокаТовара.ЕдиницаИзмерения;
		
		Если ЕдиницаИзмерения <> ЕдиницаХраненияОстатков Тогда
			ОтношениеКоэффициентов 			= ЕдиницаИзмерения.Коэффициент / ЕдиницаХраненияОстатков.Коэффициент;
			СтрокаТовара.Количество 		= СтрокаТовара.Количество * ОтношениеКоэффициентов;
			СтрокаТовара.Коэффициент 		= ЕдиницаХраненияОстатков.Коэффициент;
			СтрокаТовара.ЕдиницаИзмерения 	= ЕдиницаХраненияОстатков;
		КонецЕсли;
	
	КонецЦикла; 
	///
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	

	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 

	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем
	мВозвращатьРезервы = Ложь;
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения и Не ПометкаУдаления Тогда
		мВозвращатьРезервы = истина;
	КонецЕсли;	
	// в обработке проведения	
	
	//m.ionov@a-prof.ru 21.05.2014
	Если Проведен И ПараметрыСеанса.ПроведениеДокументов Тогда
		мУдалятьДвижения = НЕ ЭтоНовый();
		//Далее идут только проверки и очистки реквизитов которые сделались при первом проведении документа
		Возврат;
	КонецЕсли;
	//----m.ionov@a-prof.ru---

	СуммаДокументаРозничная = ПолучитьРозничнуюСуммуДокумента();
	
	//начало изменений БП 04 
	ВнутреннийЗаказНаСим = ВнутреннийЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ЗаявканаСИМ;
	//конец изменений БП 04	 

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
	 Или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ 
	 Или ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование Тогда // В этом случае ДокументРезерва должен быть пуст.

		УстановитьКачество = (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование);
        ВидОперацииОборудование = ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование;
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			//начало изменений БП 04 
			//Если (ВидОперацииОборудование и ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ)) Тогда
			Если ВидОперацииОборудование и ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ)
				или ВнутреннийЗаказНаСим
				Тогда
			//конец изменений БП 04	 	
				СтрокаТаблицы.ВнутреннийЗаказ = Неопределено;
			КонецЕсли;

			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва)
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;

			Если УстановитьКачество 
			   И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Качество) Тогда
				СтрокаТаблицы.Качество = Справочники.Качество.Новый;
			КонецЕсли;
			
		КонецЦикла;

		Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			//начало изменений БП 04 
			//Если ВидОперацииОборудование и ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
			Если ВидОперацииОборудование и ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) 
			или ВнутреннийЗаказНаСим Тогда
			//конец изменений БП 04	 	
				СтрокаТаблицы.ВнутреннийЗаказ = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва)
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	КонецЕсли;
	
	Если РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
		Если ВозвратнаяТара.Количество() > 0 Тогда
			ВозвратнаяТара.Очистить();
		КонецЕсли;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//начало изменений БП 04 
	Если Не СкладыВтабличнойЧасти Тогда
		Для Каждого ТекСтрока Из Товары Цикл
			ТекСтрока.СкладОтправитель = СкладОтправитель;
			ТекСтрока.СкладПолучатель  = СкладПолучатель;
		КонецЦикла;	
		
		Для Каждого ТекСтрока Из ВозвратнаяТара Цикл
			ТекСтрока.СкладОтправитель = СкладОтправитель;
			ТекСтрока.СкладПолучатель  = СкладПолучатель;
		КонецЦикла;	
		
	КонеЦесли;	
	//конец изменений БП 04 
	
	//Бирюков добавлена регистрация изменений для Навижн
	Если Дата > Дата(2014,2,2) Тогда
		Если ИД_Обмена = "" Тогда
			Если СокрЛП(СкладПолучатель.Код) = "ПРГ-ГП00" Тогда
				Узел = ПланыОбмена.ПРГ_Навижн.НайтиПоКоду("001");
				//Ожиганов 
				Если ЗначениеЗаполнено(Узел) Тогда
					ОбменДанными.Получатели.Добавить(Узел);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	//%%%%%%%%%%%%%%%%%%%%%%%%%
	
	//m.ionov@a-prof.ru 03.11.2014
	Если Не ДоступенСтатусДокумента() Тогда
		СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.ПустаяСсылка();
	КонецЕсли;
	
	РазрешитьЗапись = Ложь;
	Если ДополнительныеСвойства.Свойство("РазрешитьЗапись", РазрешитьЗапись) = Ложь Тогда
		РазрешитьЗапись = Ложь;
	КонецЕсли;

	Если Не РазрешитьЗапись И ОтражатьВБухгалтерскомУчете И Не МожноОтражатьВБУУчете() Тогда//(Не МожноОтражатьВБУУчете() И Не ЗначениеЗаполнено(СП_ЗаданиеНаПодбор))  Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ " + СокрЛП(ЭтотОбъект) + ": у вас нет прав на его отражение/изменение в БУ учете", Отказ);
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	//начало изменений Ожиганов 02.02.2016 б/н насильно заполним отделение если документ введен на основании задания на подбор  
	Если Не ЗначениеЗаполнено(КП_Отделение)
		и  ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) 
		и ЭтоНовый()
		Тогда
		СтруктРекв = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(СП_ЗаданиеНаПодбор,Новый Структура("КП_Отделение"));
		Если СтруктРекв <> Неопределено Тогда
			КП_Отделение = СтруктРекв.КП_Отделение;
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 
	
	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	////++ Spl_Апроф 26.12.2014 (k.russkih@a-prof.ru)
	//Если РежимЗаписи = РежимЗаписиДокумента.Проведение И СкладОтправитель = СП_ЗаданиеНаПодбор.Склад И ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) И НЕ Проведен Тогда
	//	АП_ОбщегоНазначенияСервер.ЗакрытиеРезервов(РежимЗаписи, СП_ЗаданиеНаПодбор, Дата, Перечисления.СП_СтатусыЗаданияНаПодбор.СформированыДокументы);			
	//КонецЕсли; 
	////-- Spl_Апроф
	//конец изменений 

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//m.ionov@a-prof.ru 22.05.2014
	Если ПараметрыСеанса.ПроведениеДокументов Тогда
		Возврат;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	//m.ionov@a-prof.ru 21.10.2014
	Если Не Отказ Тогда
		ЗаписатьИзменениеСтатусов(Отказ);
	КонецЕсли;
	
	МенятьСтатус = Истина;
	Если ДополнительныеСвойства.Свойство("МенятьСтатус", МенятьСтатус) = Ложь Тогда
		МенятьСтатус = Истина;
	КонецЕсли;
	
	//{26.08.2015 Островерхий заявка №б/н 
	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	//Если МенятьСтатус И ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция Тогда
	//	ОбновитьСтатусЗаказа(Отказ);
	//	АП_ОбщегоНазначенияСервер.ОбновимСтатусЗаданияНаПодбор(СП_ЗаданиеНаПодбор);
	//КонецЕсли;
	////----m.ionov@a-prof.ru---
	//конец изменений 
	//начало изменений Ожиганов 31.08.2015 немного оптимизируем  
	//Если МенятьСтатус И ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция Тогда
	//	ОбновитьСтатусЗаказа(Отказ);
	//КонецЕсли;	
	//26.08.2015 Островерхий} 
	//конец изменений 
	 

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	СтруктураШапкиДокумента.Вставить("Склад", СкладОтправитель);
	
	//m.ionov@a-prof.ru 30.04.2014
	СтруктураШапкиДокумента.Вставить("Контрагент", Контрагент);
	СтруктураШапкиДокумента.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	
	//{24.03.2015 Островерхий заявка №38069 
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПеремещениеТарыНаСкладСолво Тогда
		
		СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	
	КонецЕсли;  
	//24.03.2015 Островерхий} 
	
	//m.ionov@a-prof.ru 21.05.2014
	Если НЕ Проведен ИЛИ НЕ ПараметрыСеанса.ПроведениеДокументов Тогда
		
		СтруктураОбязательныхПолей = Новый Структура();
		
		Если ЗначениеЗаполнено(Контрагент) ИЛИ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			//Если указали контрагента - то нужно указать и договор
			СтруктураОбязательныхПолей.Вставить("Контрагент"); 
			СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента"); 
		Иначе
			//Определим есть возвратная тара
			ВидНоменклатурыТара = Константы.УП_ВидНоменклатурыВозвратнаяТара.Получить();
			Если ЗначениеЗаполнено(ВидНоменклатурыТара)
				И Дата >= НачалоДня(Константы.УП_ДатаНачалаУчетаВозвратнойТарыПоСкладам.Получить())
				И Не Константы.УП_ДатаНачалаУчетаВозвратнойТарыПоСкладам.Получить() = Дата(1,1,1) Тогда
				Для каждого СтрокаТаблицы Из ВозвратнаяТара Цикл
					
					Если СтрокаТаблицы.Номенклатура.ВидНоменклатуры = ВидНоменклатурыТара Тогда
						СтруктураОбязательныхПолей.Вставить("Контрагент"); 
						СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента", "Для перемещения возвратной тары необходимо выбрать договор контрагента"); 	
						Прервать;
					КонецЕсли;
					
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		//m.ionov@a-prof.ru 12.11.2014
		Если ДоступенСтатусДокумента() Тогда
			СтруктураОбязательныхПолей.Вставить("СП_СтатусДокумента");
		КонецЕсли;
		
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		Если НЕ Отказ И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка Тогда
			Если Не СкладОтправитель = СкладПолучатель Тогда
				ОбщегоНазначения.СообщитьОбОшибке("При виде операция переупаковка, склад отправить и склад получатель должен быть один!", Отказ, Заголовок);
			ИначеЕсли СкладОтправитель.НСИ_ПодключенКSolvo Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Переупаковку можно делать только на складе не подключенном к Солво!", Отказ, Заголовок);				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,      "ВалютаУправленческогоУчета",       "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,      "КурсВалютыУправленческогоУчета",   "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиПартионныйУчетПоСкладам",     "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОтправитель",     "ВидСклада",                        "ВидСкладаОтправителя");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладПолучатель",      "ВидСклада",                        "ВидСкладаПолучателя");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ВнутреннийЗаказ",      "ВидЗаказа",                        "ВидВнутреннегоЗаказа");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",     "ОтражатьВРегламентированномУчете",      "ОтражатьВРегламентированномУчете");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ВнутреннийЗаказ"      , "АП_СтатусЗаказа"                         , "АП_СтатусЗаказа");
	//УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ВнутреннийЗаказ"      , "КП_ВидЗаказаПокупателя"                  , "КП_ВидЗаказаПокупателя");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СП_ЗаданиеНаПодбор"   , "СтатусДокумента"                         , "СтатусЗаданияНаПодбор");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СП_ЗаданиеНаПодбор"   , "ДатаФормированияДокументов"              , "ТекДатаФормированияДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОтправитель"	  ,"НСИ_ПодключенКSolvo"                      , "НСИ_ПодключенКSolvo");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ВнутреннийЗаказ"      , "АП_СтатусЗаданияНаПодбор"   			  , "АП_СтатусЗаданияНаПодбор");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ВнутреннийЗаказ"      , "АП_СтатусЗаданияНаПеревозку" 			  , "АП_СтатусЗаданияНаПеревозку");
	//конец изменений 
	
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"            , "ЕдиницаИзмерения");
	
	//m.ionov@a-prof.ru 03.11.2014
	//СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	Если ДоступенСтатусДокумента() и СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Закрыто Тогда
		СтруктураПолей.Вставить("Количество"                  , "ПР_ФактическиПринято * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	Иначе
		СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                    , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Качество"                    , "Качество");
	//начало изменений 
	СтруктураПолей.Вставить("КачествоНовое"                    , "Качество");
	//конец изменений 
	СтруктураПолей.Вставить("Цена"                        , "Цена * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / Коэффициент");
	СтруктураПолей.Вставить("ДокументРезерва"             , "ДокументРезерва");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"       , "ДокументРезерва.СкладГруппа");
	СтруктураПолей.Вставить("ВнутреннийЗаказ"       	  , "ВнутреннийЗаказ");
	СтруктураПолей.Вставить("СкладВнутреннегоЗаказа"       , "ВнутреннийЗаказ.Заказчик");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"       ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ВидОперации"                 ,  "ДокументРезерва.ВидОперации");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры"	, "ПринадлежностьНоменклатуры");						
	СтруктураПолей.Вставить("ДоговорКонтрагента", "ДокументРезерва.ДоговорКонтрагента");
	//начало изменений БП 04
	//СтруктураПолей.Вставить("СкладОтправительВидСклада"		, "Ссылка.СкладОтправитель.ВидСклада");
	//СтруктураПолей.Вставить("СкладПолучательВидСклада"		, "Ссылка.СкладПолучатель.ВидСклада");
	СтруктураПолей.Вставить("СкладОтправительВидСклада"		, "СкладОтправитель.ВидСклада");
	СтруктураПолей.Вставить("СкладПолучательВидСклада"		, "СкладПолучатель.ВидСклада");
	СтруктураПолей.Вставить("Склад"		, "СкладОтправитель");
	СтруктураПолей.Вставить("СкладПолучатель"	, "СкладПолучатель");
	СтруктураПолей.Вставить("ВестиУчетПоСериям"	, "Номенклатура.ВестиУчетПоСериям");
	
	//++ Spl_Апроф 19.09.2014 (k.russkih@a-prof.ru) Для корректировки движений
	СтруктураПолей.Вставить("ПР_КоличествоБрак"			, "ПР_КоличествоБрак * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ПР_ФактическиПринято"		, "ПР_ФактическиПринято * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	//++ Spl_Апроф 25.02.2015 (k.russkih@a-prof.ru)	
	СтруктураПолей.Вставить("КоличествоПоНакладной"		, "Количество * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	//-- Spl_Апроф

	
	//начало изменений БП 04
	//Бирюков 01_10_13 добавим в структуру необходимый для претензий реквизит
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПретензииПоПеремещениям Тогда 
		СтруктураПолей.Вставить("ВидПретензии"		, "ВидПретензии");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка Тогда 
		СтруктураПолей.Вставить("НоменклатураНовая"			, "НоменклатураНовая");
		СтруктураПолей.Вставить("СерияНоменклатурыНовая"	, "СерияНоменклатурыНовая");
		СтруктураПолей.Вставить("ХарактеристикаНоменклатурыНовая"	, "ХарактеристикаНоменклатурыНовая");
		СтруктураПолей.Вставить("КоличествоПоступление"		, "КоличествоПоступление");
	КонецЕсли;

	ДополнитьСтруктуруПолейТоваровРегл(СтруктураПолей);

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"            , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Количество"                  , "Количество");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                    , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ДокументРезерва"             , "ДокументРезерва");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"         , "ДокументРезерва.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"       , "ДокументРезерва.СкладГруппа");
	СтруктураПолей.Вставить("ВнутреннийЗаказ"       	  , "ВнутреннийЗаказ");
	СтруктураПолей.Вставить("СкладВнутреннегоЗаказа"       , "ВнутреннийЗаказ.Заказчик");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"       ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	//начало изменений БП 04
	СтруктураПолей.Вставить("СкладОтправительВидСклада"		, "СкладОтправитель.ВидСклада");
	СтруктураПолей.Вставить("СкладПолучательВидСклада"		, "СкладПолучатель.ВидСклада");
	СтруктураПолей.Вставить("Склад"		, "СкладОтправитель");
	СтруктураПолей.Вставить("СкладПолучатель"	, "СкладПолучатель");
	//конец изменений БП 04 
	
	
	
	//Бирюков 01_10_13 добавим в структуру необходимый для претензий реквизит
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ПретензииПоПеремещениям Тогда 
		СтруктураПолей.Вставить("ВидПретензии"		, "ВидПретензии");
	КонецЕсли;

	ДополнитьСтруктуруПолейПоТареРегл(СтруктураПолей);

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу товаров и тары для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	//начало изменений БП 04
	Если СкладыВтабличнойЧасти Тогда
		СтруктураШапкиДокумента.ВидСкладаОтправителя 	= Перечисления.ВидыСкладов.Оптовый;
		СтруктураШапкиДокумента.ВидСкладаПолучателя  	= Перечисления.ВидыСкладов.Оптовый;
	КонецЕсли;	
	//конец изменений БП 04 
	
	//m.ionov@a-prof.ru 21.05.2014
	Если НЕ Проведен ИЛИ НЕ ПараметрыСеанса.ПроведениеДокументов Тогда
		// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
		ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
		ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	//----m.ionov@a-prof.ru---

	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	Если Не ПараметрыСеанса.ПроведениеДокументов или (ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете) Тогда
		СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 		СтруктураШапкиДокумента, Отказ, Заголовок);
		СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 			СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;	
	//конец изменений 
	
	// Движения по документу
	//m.ionov@a-prof.ru 03.11.2014
	//Если Не Отказ Тогда
	Если Не Отказ И Не СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Отменено Тогда
	//----m.ionov@a-prof.ru---
		ИспользоватьРегистрСвободныеОстатки = глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки"); 

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
		
		//{26.01.2016 Островерхий заявка №46457 
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			ПолныеПрава.ЗаписатьНаборЗаписейНаСервере("СвободныеОстатки", Ссылка,, "РегистрНакопления");
		КонецЕсли; 
		//26.01.2016 Островерхий}
		
		//m.ionov@a-prof.ru 21.05.2014
		Если НЕ Проведен ИЛИ НЕ ПараметрыСеанса.ПроведениеДокументов и Не ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
			Если ИспользоватьРегистрСвободныеОстатки И 
				(Товары.Количество() <> 0 ИЛИ ВозвратнаяТара.Количество() <> 0)
				И НЕ Отказ Тогда
				//{07.08.2015 Островерхий заявка №б/н 
				//Если глЗначениеПеременной("ИспользоватьБлокировкуДанных")  Тогда
				//	Движения.СвободныеОстатки.БлокироватьДляИзменения = Истина;
				//КонецЕсли;
				//Движения.Записать(); 
				//07.08.2015 Островерхий} 
				
				Если Товары.Количество() <> 0 Тогда          
					//m.ionov@a-prof.ru 03.11.2014
					//m.ionov@a-prof.ru 05.02.2015
					//Здесь отключаем контроль, а включаем контроль в товарах на складах
					//Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) И ЗначениеЗаполнено(ВнутреннийЗаказ)
					//	И СкладОтправитель = ВнутреннийЗаказ.СП_СкладТранзит Тогда
					//	
					//	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда 
					//		РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
					//		"Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					//		
					//	КонецЕсли;
					Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) 
						//И ЗначениеЗаполнено(ВнутреннийЗаказ) 
						Тогда
						////начало изменений
						//Если РежимПроведения = РежимПроведенияДокумента.Оперативный  Тогда 
						//	РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
						//	"Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
						//КонецЕсли;
						//конец  изменений
					Иначе
						//{07.08.2015 Островерхий заявка №б/н 
						Если глЗначениеПеременной("ИспользоватьБлокировкуДанных")  Тогда
							Движения.СвободныеОстатки.БлокироватьДляИзменения = Истина;
						КонецЕсли;
						Движения.Записать(); 
						//07.08.2015 Островерхий} 
						РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
						"Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					КонецЕсли;
					//----m.ionov@a-prof.ru---   					
				КонецЕсли;
				Если ВозвратнаяТара.Количество() <> 0 Тогда 
					//Blik 271017 71898 н
					Если Товары.Количество() = 0 Тогда
						Движения.Записать();
					КонецЕсли;
					//Blik 271017 71898 к
					РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
					"ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
        //----m.ionov@a-prof.ru---
	КонецЕсли;
	
	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	Если Не Отказ и Не ПараметрыСеанса.ПроведениеДокументов тогда
		Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
			ПргСтатусЗаданияНаПодбор     = Неопределено;
			ПргСтатусЗаданияНаПеревозку  = Неопределено;
			//начало изменений Ожиганов 31.08.2015 немного оптимизируем  
			аВнутреннийЗаказ =  ?(ЗначениеЗаполнено(ВнутреннийЗаказ),ВнутреннийЗаказ,ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(СП_ЗаданиеНаПодбор,"Заказ"));
			//конец изменений 
			Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
				АП_ОбщегоНазначенияСервер.ОбновитьСтатусыЗаданийОтгрузка(СП_ЗаданиеНаПодбор,
				СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.СтатусЗаданияНаПодбор,
				СтруктураШапкиДокумента.ТекДатаФормированияДокументов,
				СтруктураШапкиДокумента.НСИ_ПодключенКSolvo, 
				ПргСтатусЗаданияНаПеревозку, ПргСтатусЗаданияНаПодбор,
				
				?(ДополнительныеСвойства.Свойство("ДопРеквизитыЗадПодбор"), ДополнительныеСвойства.ДопРеквизитыЗадПодбор,Неопределено));
			КонецЕсли;	
			//начало изменений Ожиганов 31.08.2015 немного оптимизируем  
			//Если ЗначениеЗаполнено(ВнутреннийЗаказ) Тогда
			Если ЗначениеЗаполнено(аВнутреннийЗаказ) Тогда
			//конец изменений 	
				//{08.06.2015 Островерхий заявка №40427 
				//АП_ОбщегоНазначенияСервер.ОбновитьСтатусЗаказаОтгрузка(ВнутреннийЗаказ,СтруктураШапкиДокумента.АП_СтатусЗаказа
				//,СтруктураШапкиДокумента.АП_СтатусЗаданияНаПодбор,СтруктураШапкиДокумента.АП_СтатусЗаданияНаПеревозку 
				//,ПргСтатусЗаданияНаПеревозку, ПргСтатусЗаданияНаПодбор); 
				//начало изменений Ожиганов 31.08.2015 немного оптимизируем  
				//АП_ОбщегоНазначенияСервер.ОбновитьСтатусЗаказаОтгрузка(ВнутреннийЗаказ,СтруктураШапкиДокумента.АП_СтатусЗаказа
				//,СтруктураШапкиДокумента.АП_СтатусЗаданияНаПодбор,СтруктураШапкиДокумента.АП_СтатусЗаданияНаПеревозку 
				//,ПргСтатусЗаданияНаПеревозку, ПргСтатусЗаданияНаПодбор,АП_ОбщегоНазначенияСервер.ВернутьСтатусЗаказа(ВнутреннийЗаказ));
				//08.06.2015 Островерхий} 
				АП_ОбщегоНазначенияСервер.ОбновитьСтатусЗаказаОтгрузка(аВнутреннийЗаказ,СтруктураШапкиДокумента.АП_СтатусЗаказа
				,СтруктураШапкиДокумента.АП_СтатусЗаданияНаПодбор,СтруктураШапкиДокумента.АП_СтатусЗаданияНаПеревозку 
				,ПргСтатусЗаданияНаПеревозку, ПргСтатусЗаданияНаПодбор,АП_ОбщегоНазначенияСервер.ВернутьСтатусЗаказа(аВнутреннийЗаказ));
				//конец изменений 
				
			КонецЕсли;	
		КонецЕсли;
		
		//{04.08.2015 Островерхий заявка №42367
		//Оптимизируем контроль остатком по товарам на складах, процедура должна вызываться самая последняя
		КонтроляОстатковПоТоварамНаСкладах(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения); 
		//04.08.2015 Островерхий}
		
	КонецЕсли;	
	//конец изменений 
	
	//m.ionov@a-prof.ru 07.11.2014
	//Если Не Отказ Тогда
	//	ОбновитьСтатусЗаказа(Отказ);
	//	//++ Spl_Апроф 26.12.2014 (k.russkih@a-prof.ru)
	//	Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
	//		АП_ОбщегоНазначенияСервер.ОбновимСтатусЗаданияНаПодбор(СП_ЗаданиеНаПодбор);
	//	КонецЕсли;
	//Иначе
	////начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	//Если Отказ Тогда
	//	//++ Spl_Апроф 26.12.2014 (k.russkih@a-prof.ru)
	//	Если СкладОтправитель = СП_ЗаданиеНаПодбор.Склад И ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция Тогда		
	//		АП_ОбщегоНазначенияСервер.ВернутьРезервыПоЗаданиюНаПодбор(СП_ЗаданиеНаПодбор);		
	//	КонецЕсли; 	
	//КонецЕсли;
	////----m.ionov@a-prof.ru---
	//конец изменений 

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоТаре", ТаблицаПоТоварам, ТаблицаПоТаре));
	
КонецПроцедуры // ОбработкаПроведения()

Процедура КонтроляОстатковПоТоварамНаСкладах(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения)
	
	Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) и Не СкладОтправитель.НСИ_СкладТранзит Тогда
		Если Товары.Количество() <> 0 и НЕ ПараметрыСеанса.ПроведениеДокументов  Тогда
			ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;

	Если РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
		//Реквизит СкладОтправитель - необязательный
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("СкладОтправитель");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
		
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
        Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			Отказ = Истина;
		ИначеЕсли НЕ УчетнаяПолитика.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			СтрокаСообщения = Нстр("ru = 'Ведение учета по складам в разрезе организаций отключено в учетной политике.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
		Если ЗначениеЗаполнено(Организация) И НЕ Организация.ОтражатьВРегламентированномУчете Тогда
			СтрокаСообщения = Нстр("ru = 'Организация не отражается в регламентированном учете.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПроверяемыеРеквизиты.Добавить("НДСвСтоимостиТоваров");
	КонецЕсли;
	
    Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ 
	   И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
	   	СтрокаСообщения = Нстр("ru = 'Перемещение с НТТ по ордерам не осуществляется.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ВнутреннийЗаказ)
	   И ВнутреннийЗаказ.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
	   	СтрокаСообщения = Нстр("ru = 'Перемещение можно осуществлять только по внутреннему заказу с видом заказа на склад.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;

	Если (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
	 ИЛИ  СкладПолучатель.ВидСклада  = Перечисления.ВидыСкладов.НТТ)
	   И НЕ мРазрешитьНулевыеЦеныВРознице Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.Цена");
	КонецЕсли;

	Если ВидОперации <> Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.Качество");
	КонецЕсли;
	
	//начало изменений БП 04
	Если СкладыВтабличнойЧасти Тогда
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("СкладОтправитель");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
		
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("СкладПолучатель");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
		
		
		ПроверяемыеРеквизиты.Добавить("Товары.СкладОтправитель");
		ПроверяемыеРеквизиты.Добавить("Товары.СкладПолучатель");
	КонецЕсли;	
	//конец изменений БП 04 

	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Товары, ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,ОбъектКопирования.Ссылка);
	
	//m.ionov@a-prof.ru 03.11.2014
	СП_ЗаданиеНаПодбор = Документы.СП_ЗаданиеНаПодбор.ПустаяСсылка();
	СкладПретензий = Справочники.Склады.ПустаяСсылка();	
	
	Если ДоступенСтатусДокумента() Тогда
		//Очистим факт
		Для каждого СтрокаТовары Из Товары Цикл
		
			СтрокаТовары.ПР_ФактическиПринято = 0;	
		
		КонецЦикла; 
	КонецЕсли;
	//----m.ionov@a-prof.ru---
КонецПроцедуры

//начало изменений БП 04 
//начало изменений БП 04 
Процедура ЗаполнитьПоВНутреннемуЗаказуСим(ИмяТабЧасти="Товары") Экспорт
	Если Не ЗначениеЗаполнено(ВнутреннийЗаказ) Тогда
		возврат;
	КонецЕсли;	
	
	Если ВнутреннийЗаказ.ПРГ_ВидОперации <> Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ЗаявканаСИМ
		//Blik 070917 65458 н
		и ВнутреннийЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру 
		и  ВнутреннийЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера
		//Blik 070917 65458 к
		Тогда
		возврат;
	КонецЕсли;
	
	Если ИмяТабЧасти="Товары" Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЗаказПокупателя.Номенклатура КАК Номенклатура,
		                      |	ЗаказПокупателя.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		                      |	ЗаказПокупателя.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		                      |	ЗаказПокупателя.Количество КАК Количество,
		                      |	ЗаказПокупателя.Коэффициент,
		                      |	ЗаказПокупателя.ЕдиницаИзмеренияМест,
		                      |	ЗаказПокупателя.КоличествоМест,
		                      |	ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество
		                      |ИЗ
		                      |	Документ.ВнутреннийЗаказ.Товары КАК ЗаказПокупателя
		                      |ГДЕ
		                      |	ЗаказПокупателя.Ссылка = &ТекущийДокумент");
		
		Запрос.УстановитьПараметр("ТекущийДокумент",ВнутреннийЗаказ);
		ТабТоваров = Запрос.Выполнить().Выгрузить();
		Товары.Загрузить(ТабТоваров);
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЗаказПокупателя.Номенклатура,
		                      |	ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
		                      |	ЗаказПокупателя.Количество
		                      |ИЗ
		                      |	Документ.ВнутреннийЗаказ.ВозвратнаяТара КАК ЗаказПокупателя
		                      |ГДЕ
		                      |	ЗаказПокупателя.Ссылка = &ТекущийДокумент");
		
		Запрос.УстановитьПараметр("ТекущийДокумент",ВнутреннийЗаказ);
		ТабВозвратнаяТара = Запрос.Выполнить().Выгрузить();
		ВозвратнаяТара.Загрузить(ТабВозвратнаяТара);
	КонецЕсли;
КонецПроцедуры	
//конец изменений БП 04	 

//++ Spl_Апроф 19.09.2014 (k.russkih@a-prof.ru) Корректирует движения по регистрам в зависимости от количества брака и фактически принятого
Процедура СкорректируемДвиженияПоТоварамНаСкладах(ТаблицаПоТоварам, ТаблицыДанныхДокумента = Неопределено, СписанныеТовары = Ложь, ЭтоРасход = Ложь)

	Если НЕ ЗначениеЗаполнено(СкладПретензий) ИЛИ Не ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция Тогда	
		Возврат;	
	КонецЕсли; 
	
	Таблица_ДляСкладаПретензия = ТаблицаПоТоварам.СкопироватьКолонки();
	
	Для каждого СтрокаДвижений Из ТаблицаПоТоварам Цикл
		//Если НЕ СтрокаДвижений.ПР_ФактическиПринято = СтрокаДвижений.Количество И Не СтрокаДвижений.ПР_КоличествоБрак = 0 Тогда
			Если НЕ (СтрокаДвижений.ПР_ФактическиПринято - СтрокаДвижений.ПР_КоличествоБрак) = СтрокаДвижений.Количество Тогда
			
			мКоличество = СтрокаДвижений.Количество;
			
			//ФактБольше = (СтрокаДвижений.ПР_ФактическиПринято > СтрокаДвижений.Количество);
			
			НоваяСтрока_осн = Таблица_ДляСкладаПретензия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока_осн, СтрокаДвижений);
			Если ЭтоРасход Тогда			
				НоваяСтрока_осн.Количество = Макс(СтрокаДвижений.ПР_ФактическиПринято, мКоличество);//?(ФактБольше, СтрокаДвижений.ПР_ФактическиПринято + СтрокаДвижений.ПР_КоличествоБрак, мКоличество);
			Иначе
				НоваяСтрока_осн.Количество = МИН(мКоличество,СтрокаДвижений.ПР_ФактическиПринято - СтрокаДвижений.ПР_КоличествоБрак);//?(ФактБольше, мКоличество, СтрокаДвижений.ПР_ФактическиПринято - СтрокаДвижений.ПР_КоличествоБрак);
			КонецЕсли; 
			
			Если НЕ ЭтоРасход Тогда
				НоваяСтрока = Таблица_ДляСкладаПретензия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижений);

				//НоваяСтрока.Количество 	= ?(ФактБольше, СтрокаДвижений.ПР_ФактическиПринято + СтрокаДвижений.ПР_КоличествоБрак - мКоличество, мКоличество - НоваяСтрока_осн.Количество);
				НоваяСтрока.Количество 	= Макс(мКоличество,СтрокаДвижений.ПР_ФактическиПринято) - НоваяСтрока_осн.Количество;
				
				Если НЕ СписанныеТовары Тогда
					НоваяСтрока.Склад = СкладПретензий;
				Иначе
					НоваяСтрока.СкладПолучатель = СкладПретензий;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НоваяСтрока_осн = Таблица_ДляСкладаПретензия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока_осн, СтрокаДвижений);
			
			//++ Spl_Апроф 01.12.2014 (k.russkih@a-prof.ru) Подменем склад, если количество факт или брака нулевое
			Если Не ЭтоРасход Тогда
				
				Если НЕ СтрокаДвижений.ПР_КоличествоБрак = 0 ИЛИ СтрокаДвижений.ПР_ФактическиПринято = 0 Тогда
					
					Если НЕ СписанныеТовары Тогда
						НоваяСтрока_осн.Склад = СкладПретензий;
					Иначе
						НоваяСтрока_осн.СкладПолучатель = СкладПретензий;
					КонецЕсли;
					
				КонецЕсли;			
				
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЦикла;
	
    //удалим строки с нулевым количеством
	КолВоСтрок_ТЧ = Таблица_ДляСкладаПретензия.Количество();
	счт = 1;
	сч = 0;
	Пока счт <= КолВоСтрок_ТЧ Цикл
	
		Если Таблица_ДляСкладаПретензия[сч].Количество = 0 Тогда		
			Таблица_ДляСкладаПретензия.Удалить(Таблица_ДляСкладаПретензия[сч]);
		Иначе
			сч = сч + 1;
		КонецЕсли;
		
		счт = счт + 1;
	
	КонецЦикла;
	
	Если НЕ СписанныеТовары Тогда	
		ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам", Таблица_ДляСкладаПретензия);
	Иначе		
		ТаблицаПоТоварам = Таблица_ДляСкладаПретензия.Скопировать();
	КонецЕсли; 	

КонецПроцедуры
//-- Spl_Апроф

//m.ionov@a-prof.ru 23.09.2014
Процедура ЗаписатьИзменениеСтатусов(Отказ) Экспорт
	
	//Движения по регистру накопления "АП_СтатусыДокументов"
	//начало изменений Ожиганов 12.05.2016 б/н исправление ошибок при записи статуса в одну и туже секунду 
	ТекДата = ТекущаяДата();
	КонДня = КонецДня(ТекущаяДата());	
	//конец изменений 
	//начало изменений Ожиганов 12.05.2016 б/н исправление ошибок при записи статуса в одну и туже секунду 
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(КонДня, Новый Структура("Документ", Ссылка));
	//ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	//конец изменений 
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		//начало изменений Ожиганов 12.05.2016 б/н исправление ошибок при записи статуса в одну и туже секунду 
		//СформируемЗаписьПоРегиструСтатусы(Отказ);
		СформируемЗаписьПоРегиструСтатусы(Отказ,ТекДата);
		//конец изменений 
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = СП_СтатусДокумента Тогда
		//начало изменений Ожиганов 12.05.2016 б/н исправление ошибок при записи статуса в одну и туже секунду 
		СформируемЗаписьПоРегиструСтатусы(Отказ,Макс(ДанныеПоСтатусу[0].Период,ТекДата));
	    //СформируемЗаписьПоРегиструСтатусы(Отказ);
		//конец изменений 
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструСтатусы(Отказ,ТекДата)

	//начало изменений Ожиганов 12.05.2016 б/н исправление ошибок при записи статуса в одну и туже секунду 
	//мДатаЗаписи = ТекущаяДата();
	мДатаЗаписи  = ТекДата;
	//конец изменений 
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	//начало изменений Ожиганов 12.05.2016 б/н исправление ошибок при записи статуса в одну и туже секунду 
	Пока НаборЗаписей.Количество() > 0 Цикл
	
		мДатаЗаписи  = мДатаЗаписи + 1;
		НаборЗаписей.Очистить();
		
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
		
		НаборЗаписей.Прочитать();
	КонецЦикла;
	//конец изменений 
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = СП_СтатусДокумента;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры 

Функция МожноИнтрактивноМенятьДокумент() Экспорт
	
	МожноМенять = Истина;
	
	Если ЭтоНовый() 
		ИЛИ РольДоступна("АП_Администратор")// ИЛИ РольДоступна("ПолныеПрава")
		ИЛИ АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии) Тогда
		Возврат МожноМенять;
	КонецЕсли;
	
	//Если перемещение введено на основании задания на подбор и склад получаетль = складу транзит (отгрузка со склада) то запрещаем менять
	
	Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор)
		И ЗначениеЗаполнено(ВнутреннийЗаказ)
		и ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция Тогда
		
		Если СкладПолучатель = ВнутреннийЗаказ.СП_СкладТранзит Тогда
			МожноМенять = Ложь;
		КонецЕсли;		
	КонецЕсли;
	
	Если МожноМенять И Не ЭтоНовый() Тогда
		Если ДоступенСтатусДокумента()
			И Не СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Открыто 
			И Не СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Отменено
			И Не АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникСклада) //Пока в тестовом режиме, потом не должно быть не достуно
			Тогда
			
			МожноМенять = Ложь; //Вне изменения из SOLVO
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат МожноМенять;
	
КонецФункции

Функция МожноМенятьСтроку(ТекСтрока) Экспорт
	МожноМенять = Истина;
	
	//Если ЭтоНовый() 
	Если РольДоступна("АП_Администратор") Тогда// ИЛИ РольДоступна("ПолныеПрава")
		//ИЛИ АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии) Тогда
		Возврат МожноМенять;
	КонецЕсли;
	
	Если Не ТекСтрока = Неопределено Тогда
		
		Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор)
			И ЗначениеЗаполнено(ВнутреннийЗаказ) Тогда
			
			Если СкладОтправитель = ВнутреннийЗаказ.СП_СкладТранзит Тогда
				
				СтрокиЗадания = СП_ЗаданиеНаПодбор.Товары.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры", ТекСтрока.Номенклатура, ТекСтрока.ХарактеристикаНоменклатуры));
				
				Если СтрокиЗадания.Количество() > 0 Тогда
					МожноМенять = Ложь;
				КонецЕсли;
				
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
	Если МожноМенять Тогда
		Если ДоступенСтатусДокумента()
			И Не СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Открыто 
			И Не СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Отменено Тогда	
			
			МожноМенять = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МожноМенять;
	
КонецФункции

Функция МожноМенятьСоставСтрок() Экспорт
	Если РольДоступна("АП_Администратор") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ДоступенСтатусДокумента() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не Проведен Тогда
		Возврат Истина;
	ИначеЕсли Не СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Открыто 
		И Не СП_СтатусДокумента = Перечисления.СП_СтатусыПеремещенияТоваров.Отменено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если Не МожноМенятьСоставСтрок() Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("В статусе Закрыт нельзя отменить проведение документа", Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) и ОтражатьВБухгалтерскомУчете Тогда
		//Проверим - а можно ли сделать отмену проведения
		Если (Не НачалоДня(Дата) = НачалоДня(ТекущаяДата())) 
			И (Не АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии)) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Отменить проведение накладной " + СокрЛП(Ссылка) + " может только сотрудник бухгалтерии!", Отказ);
		КонецЕсли;
	КонецЕсли;     	
	
	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	Если мВозвращатьРезервы  и  Не Отказ  Тогда
		АП_ОбщегоНазначенияСервер.ПРГВернутьРезервыПоЗаданиюНаПодбор(СП_ЗаданиеНаПодбор);
	КонецЕслИ;	
	//конец изменений 
	
	//Если Не Отказ Тогда
	//	МенятьСтатус = Истина;
	//	Если ДополнительныеСвойства.Свойство("МенятьСтатус", МенятьСтатус) = Ложь Тогда
	//		МенятьСтатус = Истина;
	//	КонецЕсли;
	//
	//	Если МенятьСтатус Тогда
	//		ОбновитьСтатусЗаказа(Отказ);
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

Процедура ОбновитьСтатусЗаказа(Отказ)

	Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
		//Инициализируем изменение статуса заказа
		Попытка
			
			ОбъектЗаказ = СП_ЗаданиеНаПодбор.Заказ.ПолучитьОбъект();
	    	ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
			ОбъектЗаказ.Записать(РежимЗаписиДокумента.Запись);
			ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
			
		Исключение
		    ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступенСтатусДокумента() Экспорт
	
	Доступен = Ложь;
	
	Если Не ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция Тогда
		Возврат Доступен;
	КонецЕсли;
	
	Если СкладОтправитель.НСИ_ПодключенКSolvo и Не ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
		Доступен = Истина;
	//начало изменений Ожиганов 10.07.2015 неожидаенно начали перемещать с использование зад на подбор через московский файл
	ИначеЕсли СкладОтправитель.ИспользоватьСтатусыВПеремещениях и  ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
		Доступен = Истина;
	//конец изменений 
	ИначеЕсли СкладПолучатель.НСИ_ПодключенКSolvo Тогда
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВыпускПродукции") И ЗначениеЗаполнено(ДокументОснование.СП_ЗаданиеНаСмену) Тогда
			Доступен = Ложь;
		Иначе
			Доступен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Доступен;
	
КонецФункции

Функция МожноОтражатьВБУУчете() Экспорт
	Если РольДоступна("АП_Администратор") Тогда
		Возврат Истина;
	КонецЕсли;
	
	//m.ionov@a-prof.ru 23.12.2014
	//Запрещаем проводить перемещения по БУ если не в рамках доступного склада
	//Если Не ДоступенСтатусДокумента() Тогда
	//	Возврат Истина;
	//КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	Если АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Переупаковка Тогда
		//Как и комплектация - отразить в БУ может только бухгалтерия
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим если ли настрока по доступным складам
	Если ПравоДоступа("Чтение",Метаданные.РегистрыСведений.АП_НастройкаПодсистемыПродаж) И ЗначениеЗаполнено(СкладОтправитель) И ЗначениеЗаполнено(СкладПолучатель) Тогда
		ДанныеНастройки = РегистрыСведений.АП_НастройкаПодсистемыПродаж.Получить();
		Если ДанныеНастройки.Количество() > 0 Тогда
			ДоступнаяГруппаСкладов = ДанныеНастройки.ДоступнаяГруппаСкладов;
			Если ЗначениеЗаполнено(ДоступнаяГруппаСкладов) Тогда
				Если СкладОтправитель.ПринадлежитЭлементу(ДоступнаяГруппаСкладов) И СкладПолучатель.ПринадлежитЭлементу(ДоступнаяГруппаСкладов) Тогда
					Возврат Истина;
				Иначе
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Возврат Истина;	
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;

	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПРГ_СкладВГруппеСкладовОтгрузки() Экспорт 
	Если ПравоДоступа("Чтение",Метаданные.РегистрыСведений.АП_НастройкаПодсистемыПродаж) И ЗначениеЗаполнено(СкладОтправитель) Тогда
		ДанныеНастройки = РегистрыСведений.АП_НастройкаПодсистемыПродаж.Получить();
		Если ДанныеНастройки.Количество() > 0 Тогда
			ДоступнаяГруппаСкладов = ДанныеНастройки.ДоступнаяГруппаСкладов;
			Если ЗначениеЗаполнено(ДоступнаяГруппаСкладов) Тогда
				Если СкладОтправитель.ПринадлежитЭлементу(ДоступнаяГруппаСкладов)  Тогда
					  возврат Истина;
				КонецЕсли;	
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;	
	возврат Ложь;
КонецФункции	

Процедура ЗаполнимФактПланом() Экспорт

	//СтруктураСкладов = АП_ОбщегоНазначенияСервер.ПолучимСкладыПоПривязкеКОтделению(ВнутреннийЗаказ.КП_Отделение);
	
	Если ВнутреннийЗаказ.СП_СкладТранзит = СкладОтправитель И СкладПолучатель = ВнутреннийЗаказ.Заказчик Тогда	
		Для каждого мСтрока Из Товары Цикл		
			мСтрока.ПР_ФактическиПринято = мСтрока.Количество;					
		КонецЦикла;
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Склад отправитель не является, складом транзитом указанного во внутреннем заказе: " + СокрЛП(ВнутреннийЗаказ.КП_Отделение));
	КонецЕсли; 

КонецПроцедуры
 
//----m.ionov@a-prof.ru---

//Blik 170517 65694 н
Функция ПроверитьНаРасхождениеСчетовУчета(Номенклатура, НоменклатураНовая)
	Счет43 = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
	Счета41 = Новый СписокЗначений;
	Счета41.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	Счета41.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	Счета41.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле);
	Счета41.Добавить(ПланыСчетов.Хозрасчетный.ТараПодТоваромИПорожняя);
	Счета41.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеИзделия);
	Счета41.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СчетаУчетаНоменклатуры_Стар.Номенклатура КАК НоменклатураСтар,
	                      |	СчетаУчетаНоменклатуры_Стар.СчетУчетаБУ КАК СчетУчетаБУСтар,
	                      |	СчетаУчетаНоменклатуры_нов.Номенклатура КАК НоменклатураНов,
	                      |	СчетаУчетаНоменклатуры_нов.СчетУчетаБУ КАК СчетУчетаБУНов,
	                      |	ВЫБОР
	                      |		КОГДА СчетаУчетаНоменклатуры_Стар.СчетУчетаБУ В (&Счета41)
	                      |				И СчетаУчетаНоменклатуры_нов.СчетУчетаБУ = &Счет43
	                      |			ТОГДА ВЫБОР
	                      |					КОГДА СчетаУчетаНоменклатуры_Стар.СчетУчетаБУ <> СчетаУчетаНоменклатуры_нов.СчетУчетаБУ
	                      |						ТОГДА ИСТИНА
	                      |					ИНАЧЕ ЛОЖЬ
	                      |				КОНЕЦ
	                      |		КОГДА СчетаУчетаНоменклатуры_Стар.СчетУчетаБУ = &Счет43
	                      |				И СчетаУчетаНоменклатуры_нов.СчетУчетаБУ В (&Счета41)
	                      |			ТОГДА ВЫБОР
	                      |					КОГДА СчетаУчетаНоменклатуры_Стар.СчетУчетаБУ <> СчетаУчетаНоменклатуры_нов.СчетУчетаБУ
	                      |						ТОГДА ИСТИНА
	                      |					ИНАЧЕ ЛОЖЬ
	                      |				КОНЕЦ
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК НеСоответствие
	                      |ИЗ
	                      |	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры_Стар,
	                      |	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры_нов
	                      |ГДЕ
	                      |	СчетаУчетаНоменклатуры_Стар.Номенклатура = &Номенклатура
	                      |	И СчетаУчетаНоменклатуры_нов.Номенклатура = &НоменклатураНов");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура.ВидНоменклатуры);
	Запрос.УстановитьПараметр("НоменклатураНов", НоменклатураНовая.ВидНоменклатуры);
	Запрос.УстановитьПараметр("Счет43", Счет43);
	Запрос.УстановитьПараметр("Счета41", Счета41);

	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультата.Следующий() Тогда
		Возврат ВыборкаРезультата.НеСоответствие;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
//Blik 170517 65694 к

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мСчета003_01 = БухгалтерскийУчет.ПолучитьМассивСчетов("Хозрасчетный", "003.01");

мСчетаЗабаланс = БухгалтерскийУчет.ПолучитьМассивСчетов("Хозрасчетный", "002");

мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();




