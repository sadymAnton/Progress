////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПерваяТаблица.Ссылка.Дата КАК Дата,
	|	ГОД(ПерваяТаблица.Ссылка.Дата) КАК Год,
	|	ПерваяТаблица.Ссылка.Номер КАК Номер,
	|	ПерваяТаблица.Ссылка.Организация КАК Организация,
	|	ПерваяТаблица.Ссылка.Организация.Наименование КАК ОрганизацияНаименование,
	|	ПерваяТаблица.Ссылка.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ПерваяТаблица.Ссылка.Организация.НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное,
	|	ПерваяТаблица.Ссылка.Организация.НаименованиеОКОПФ КАК ОрганизацияНаименованиеОКОПФ,
	|	ВЫБОР
	|		КОГДА ПерваяТаблица.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ПерваяТаблица.Ссылка.Организация
	|		ИНАЧЕ ПерваяТаблица.Ссылка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ПерваяТаблица.Ссылка.Ответственный КАК Ответственный,
	|	ПерваяТаблица.Ссылка.ТипСведений КАК ТипСведений,
	|	ПерваяТаблица.Ссылка.Ссылка КАК Ссылка,
	|	ПерваяТаблица.ФизЛицо КАК ФизЛицо,
	|	ПерваяТаблица.Ссылка.ФорматФайла,
	|	ПерваяТаблица.НомерСтроки,
	|	ВтораяТаблица.НомерСтроки КАК НомерПовторяющейсяСтроки,
	|	ПерваяТаблица.Ссылка.Организация.ИНН КАК ОрганизацияИНН,
	|	ПерваяТаблица.Ссылка.Организация.КПП КАК ОрганизацияКПП,
	|	ПерваяТаблица.Ссылка.Организация.РегистрационныйНомерПФР КАК ОрганизацияРегистрационныйНомерПФР,
	|	ПерваяТаблица.Ссылка.Организация.ЮрФизЛицо,
	|	ПерваяТаблица.Ссылка.Организация.ОГРН,
	|	ПерваяТаблица.Ссылка.НомерПачки
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК ПерваяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК ВтораяТаблица
	|		ПО ПерваяТаблица.ФизЛицо = ВтораяТаблица.ФизЛицо
	|			И ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
	|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
	|ГДЕ
	|	ПерваяТаблица.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация, которая подает сведения!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указано ответственное лицо!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФорматФайла) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан формат файла!", Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда	
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Предупреждение: Не указано наименование ОКОПФ организации",,Заголовок);
			
		ИначеЕсли СтрДлина(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ) > 40 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Предупреждение: Наименование ОКОПФ организации обрезано до 40 символов.",,Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения документа
Процедура ПроверитьЗаполнениеДокумента(ВыборкаПоДокументу, Отказ, Заголовок)
	
	КоличествоДокументов = ВыборкаПоДокументу.Количество();
	Если КоличествоДокументов = 0 тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Список сотрудников пуст!", Отказ, Заголовок);
	КонецЕсли;
	
	ПроверялиШапку = Ложь;
	Пока ВыборкаПоДокументу.Следующий() цикл
		
		//Проверка реквизитов шапки документа
		Если Не ПроверялиШапку тогда
			ПроверитьЗаполнениеШапки(ВыборкаПоДокументу, Отказ, Заголовок);
			ПроверялиШапку = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоДокументу.ФизЛицо) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Строка №"+ВыборкаПоДокументу.НомерСтроки+": Не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;
		
		//Контроль дубля строк
		Если ВыборкаПоДокументу.НомерПовторяющейсяСтроки <> NULL тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Строка №"+ВыборкаПоДокументу.НомерПовторяющейсяСтроки+": Сотрудник "+ВыборкаПоДокументу.ФизЛицо+ " указан в документе дважды!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоДокументов > 200 тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("В документе должно быть не более 200 форм СЗВ-К (сотрудников)!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения реквизитов физлица 
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьДанныеФизлица(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, ФамилияФизЛица, ИмяФизЛица, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) + """: ";
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не выбран сотрудник!", Отказ, Заголовок);
		
	Иначе	
		СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + "По сотруднику "+ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " ";
		
		Если НЕ ВыборкаПоСтрокамДокумента.ФизЛицоРаботаетВОрганизации тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- не работает в организации " + ВыборкаПоШапкеДокумента.ОрганизацияНаименование + "!", Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СтраховойНомерПФР) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан страховой номер!", Отказ, Заголовок);
			
		Иначе
			Если НЕ РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(ВыборкаПоСтрокамДокумента.СтраховойНомерПФР) тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Задан неверный страховой номер!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ФамилияФизЛица) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана фамилия!", Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИмяФизЛица) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задано имя!", Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаРождения) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана дата рождения!", Отказ, Заголовок);
			
		ИначеЕсли ВыборкаПоСтрокамДокумента.ДатаРождения > Дата тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Дата рождения не может быть больше даты подачи сведений!", Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДанныеФизлица()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Фамилия, Имя, Отказ ,Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса(""" табл. части ""Сотрудники организации"": ");
	
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не выбран сотрудник!", Отказ ,Заголовок);
		
	Иначе
		СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " ";
		
		//Если НЕ ВыборкаПоСтрокамДокумента.ФизЛицоРаботаетВОрганизации Тогда
		//	ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не работает в организации") + " " + ВыборкаПоШапкеДокумента.ОрганизацияНаименование + "!", Отказ ,Заголовок);
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(СтрЗаменить(ВыборкаПоСтрокамДокумента.СтраховойНомерПФР,"-","")) Тогда
		//	ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Уже имеет страховой номер!", Отказ ,Заголовок);
		//КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Фамилия) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана фамилия!", Отказ ,Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Имя) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задано имя!", Отказ ,Заголовок);
		КонецЕсли;
		
		//Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Пол) Тогда
		//	ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан пол!", Отказ ,Заголовок);
		//КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаРождения) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана дата рождения!", Отказ ,Заголовок);
			
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаРождения > Дата Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Дата рождения не может быть больше даты подачи сведений!", Отказ ,Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		//Если СокрЛП(СтрЗаменить(ВыборкаПоСтрокамДокумента.МестоРождения,",","")) = "" 
		//	или СокрЛП(СтрЗаменить(ВыборкаПоСтрокамДокумента.МестоРождения,",","")) = "0" Тогда
		//	ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не указано место рождения!", Отказ ,Заголовок);
		//КонецЕсли; 
		
		//Паспортные данные
		//Если ВыборкаПоСтрокамДокумента.ДокументВид = NULL Тогда
		//	
		//	ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не указаны паспортные данные!", Отказ ,Заголовок);
		//	
		//Иначе
		//	
		//	УказанВидДокумента = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументВид);
		//	СообщениеОбОшибке =  "";
		//	
		//	//Проверка реквизитов паспортных данных
		//	Если Не УказанВидДокумента Тогда
		//		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан вид документа, удостоверяющего личность!", Отказ ,Заголовок);
		//	КонецЕсли;	
		//	
		//	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументДатаВыдачи) Тогда
		//		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана дата выдачи документа, удостоверяющего личность!", Отказ ,Заголовок);
		//	Иначе
		//		Если (ВыборкаПоСтрокамДокумента.ДатаРождения > ВыборкаПоСтрокамДокумента.ДокументДатаВыдачи) Тогда
		//			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Дата рождения не должна превышать дату выдачи документа, удостоверяющего личность!", Отказ ,Заголовок);
		//		КонецЕсли;
		//	КонецЕсли;	
		//	Если ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС05
		//		И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС10
		//		И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС11
		//		И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС12
		//		И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС13
		//		И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС14
		//		И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС15 // Документы, серию и номер которых не нужно проверять
		//		И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС91  Тогда
		//		
		//		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументСерия) Тогда
		//			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана серия документа, удостоверяющего личность!", Отказ ,Заголовок);
		//		ИначеЕсли УказанВидДокумента 
		//			И НЕ ПроцедурыПерсонифицированногоУчета.ПроверитьСериюУдостоверенияЛичности(ВыборкаПоСтрокамДокумента.ДокументВид,ВыборкаПоСтрокамДокумента.ДокументСерия, СообщениеОбОшибке) Тогда 
		//			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Ошибка в серии удостоверения личности. "+ СообщениеОбОшибке, Отказ, Заголовок);
		//		КонецЕсли;
		//		
		//		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументНомер) Тогда
		//			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан номер документа, удостоверяющего личность!", Отказ ,Заголовок);
		//		ИначеЕсли УказанВидДокумента 
		//			И НЕ ПроцедурыПерсонифицированногоУчета.ПроверитьНомерУдостоверенияЛичности(ВыборкаПоСтрокамДокумента.ДокументВид,ВыборкаПоСтрокамДокумента.ДокументНомер, СообщениеОбОшибке) Тогда 
		//			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Ошибка в номере удостоверения личности. "+ СообщениеОбОшибке, Отказ, Заголовок);
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли; 
		
		// Проверка адреса регистрации и проживания
		//Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.АдресРегистрации) Тогда
		//	
		//	ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан адрес регистрации!", Отказ ,Заголовок);
		//	
		//Иначе
		//	
		//	АдресРегистрацииСписком = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ВыборкаПоСтрокамДокумента.АдресРегистрации);
		//	ЗаПределамиРФ = Ложь;
		//	АдресРегистрацииСписком.Свойство("ЗаПределамиРФ", ЗаПределамиРФ);
		//	// значение переменной ЗаПределамиРФ может быть Неопределено
		//	Если ЗаПределамиРФ <> Истина Тогда
		//		Если  РегламентированнаяОтчетность.АдресСоответствуетТребованиям(АдресРегистрацииСписком) Тогда
		//			ТекстОшибки = ПроцедурыПерсонифицированногоУчета.ПроверитьАдресПоКЛАДР(АдресРегистрацииСписком);
		//			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		//				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Адрес регистрации не соответствует адресному классификатору: в классификаторе не найден" + ТекстОшибки + "!", , Заголовок);
		//			КонецЕсли;
		//		Иначе
		//			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Адрес регистрации заполнен не полностью или неверно или присутствуют латинские или недопустимые символы!", Отказ ,Заголовок);
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;	
		//
		//Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.АдресФактический) Тогда
		//	
		//	АдресФактическийСписком = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ВыборкаПоСтрокамДокумента.АдресФактический);
		//	ЗаПределамиРФ = Ложь;
		//	АдресФактическийСписком.Свойство("ЗаПределамиРФ", ЗаПределамиРФ);
		//	Если ЗаПределамиРФ <> Истина Тогда
		//		Если РегламентированнаяОтчетность.АдресСоответствуетТребованиям(АдресФактическийСписком) Тогда
		//			ТекстОшибки = ПроцедурыПерсонифицированногоУчета.ПроверитьАдресПоКЛАДР(АдресФактическийСписком);
		//			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		//				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Фактический адрес проживания не соответствует адресному классификатору: в классификаторе не найден" + ТекстОшибки + "!", , Заголовок);
		//			КонецЕсли;
		//		Иначе
		//			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Фактический адрес проживания заполнен не полностью или неверно или присутствуют латинские или недопустимые символы!", Отказ ,Заголовок);
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

//Формирует строку "дополнительных сведений" по исчисляемому стажу в "удобочитаемом" виде для отражения в формах
Функция СобратьСтрокуИсчисляемогоСтажа(ЗаписьСтажа)
	
	НулевойПараметр	=	ЗаписьСтажа.НулевойПараметрИсчисляемогоСтажа;
	ПервыйПараметр	=	ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметр	=	ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	ТретийПараметр	=	ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа;
	
	Если ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод	=	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ.Код Тогда
		Возврат ?(ПервыйПараметр	>	0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр>0,""+ВторойПараметр+" мин","");
	ИначеЕсли ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод	=	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН.Код Тогда
		Возврат ""
	Иначе
		Если НулевойПараметр	=	""	тогда
			Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","")+СокрЛП("" + ТретийПараметр);
		Иначе
			Возврат ?(НулевойПараметр>0,""+НулевойПараметр+" г ","")	+	?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","")+СокрЛП("" + ТретийПараметр);
		КонецЕсли;
	КонецЕсли;
КонецФункции 

//Формирует строку "дополнительных сведений" по исчисляемому стажу в "удобочитаемом" виде для отражения в формах
Функция XMLСобратьСтрокуИсчисляемогоСтажа(СтрокаДереваИсчисляемыйСтаж)
	
	ОснованиеИС = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИсчисляемыйСтаж, "ОснованиеИС");
	
	
	
	Если ОснованиеИС	=	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ.Код Тогда
		ПервыйПараметр = 0;
		ВторойПараметр = 0;
		СтрокаДереваВыработкаВЧасах = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаВчасах");
		Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
			ПервыйПараметр = ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы"));
			ВторойПараметр = ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты"));
		КонецЕсли;
		Возврат ?(ПервыйПараметр	>	0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр>0,""+ВторойПараметр+" мин","");
	ИначеЕсли ОснованиеИС	=	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН.Код Тогда
		Возврат ""
	Иначе
		СтрокаДереваВыработкаКалендарная = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаКалендарная");
		Если СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
			НулевойПараметр	=	ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеГоды"));
			ПервыйПараметр	=	ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы"));
			ВторойПараметр	=	ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни"));
			
			Если НулевойПараметр	=	""	тогда
				Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","");
			Иначе
				Возврат ?(НулевойПараметр>0,""+НулевойПараметр+" г ","")	+	?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции 

//Формирует строку "дополнительных сведений" по выслуге лет в "удобочитаемом" виде для отражения в формах.
Функция СобратьСтрокуПенсииЗаВыслугуЛет(ЗаписьСтажа)
	
	КодОснования 	=   ЗаписьСтажа.ОснованиеВыслугиЛетКод;
	ПервыйПараметр	=	ЗаписьСтажа.ПервыйПараметрВыслугиЛет;
	ВторойПараметр	=	ЗаписьСтажа.ВторойПараметрВыслугиЛет;
	ТретийПараметр	=	ЗаписьСтажа.ТретийПараметрВыслугиЛет;
	
	Если 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ИСПКЛС1.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.САМОЛЕТ.Код))	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.СПЕЦАВ.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ЛЕТИСП.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ИТСИСП.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ИНСПЕКТ.Код)) 	или
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ОПЫТИСП.Код))	тогда
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр>0,""+ВторойПараметр+" мин","");
	ИначеЕсли 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.РЕАКТИВН.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.НОРМАПР.Код)) 	тогда
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" прыжков ","");
	ИначеЕсли 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.НОРМСП.Код)) 	тогда
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" сп/под ","");
	ИначеЕсли 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.УВД.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ИТС.Код))	тогда
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","");
	ИначеЕсли 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ХИРУРГД.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ХИРУРСМ.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ЗП81ГД.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ЗП81СМ.Код)) 	тогда
		Возврат ?(ТретийПараметр>0,""+ТретийПараметр+" ставок ","");
	ИначеЕсли 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ЗП80РК.Код)) или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ЗП80ПД.Код)) тогда
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ТретийПараметр>0,""+ТретийПараметр+" ставок ","");
	КонецЕсли;
	
	Возврат "";
КонецФункции // СобратьСтрокуПенсииЗаВыслугуЛет


//Формирует строку "дополнительных сведений" по выслуге лет в "удобочитаемом" виде для отражения в формах.
Функция XMLСобратьСтрокуПенсииЗаВыслугуЛет(СтрокаДереваВыслугаЛет)
	
	
	КодОснования 	=   ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ОснованиеВЛ");
	Часы = 0;
	Минуты = 0;
	ВсеГоды = 0;
	ВсеМесяцы = 0;
	ВсеДни = 0;
	ДоляСтавки = ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ДоляСтавки"));
	КодИсчисления = ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "КодИсчисления"));
	СтрокаДереваВыработкаВчасах = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаВчасах");
	Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
		Часы = ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВчасах, "Часы"));
		Минуты = ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВчасах, "Минуты"));
	КонецЕсли;
	СтрокаДереваВыработкаКалендарная = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаКалендарная");
	Если СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
		ВсеГоды = ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеГоды"));
		ВсеМесяцы = ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы"));
		ВсеДни = ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни"));
	КонецЕсли;
	
	
	Если 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ИСПКЛС1.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.САМОЛЕТ.Код))	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.СПЕЦАВ.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ЛЕТИСП.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ИТСИСП.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ИНСПЕКТ.Код)) 	или
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ОПЫТИСП.Код))	тогда
		Возврат ?(Часы>0,""+Часы+" ч ","")+?(Минуты>0,""+Минуты+" мин","");
	ИначеЕсли 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.РЕАКТИВН.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.НОРМАПР.Код)) 	тогда
		Возврат ?(КодИсчисления>0,""+КодИсчисления+" прыжков ","");
	ИначеЕсли 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.НОРМСП.Код)) 	тогда
		Возврат ?(КодИсчисления>0,""+КодИсчисления+" сп/под ","");
	ИначеЕсли 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.УВД.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ИТС.Код))	тогда
		Возврат ?(ВсеМесяцы>0,""+ВсеМесяцы+" м ","")+?(ВсеДни>0,""+ВсеДни+" дн ","");
	ИначеЕсли 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ХИРУРГД.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ХИРУРСМ.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ЗП81ГД.Код)) 	или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ЗП81СМ.Код)) 	тогда
		Возврат ?(ДоляСтавки>0,""+ДоляСтавки+" ставок ","");
	ИначеЕсли 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ЗП80РК.Код)) или 
		(КодОснования	=	СокрЛП(Справочники.ОснованияВыслугиЛет.ЗП80ПД.Код)) тогда
		Возврат ?(Часы>0,""+Часы+" ч ","")+?(ДоляСтавки>0,""+ДоляСтавки+" ставок ","");
	КонецЕсли;
	
	Возврат "";
КонецФункции // XMLСобратьСтрокуПенсииЗаВыслугуЛет

Функция ПреобразоватьСтрокуВЧисло(ВходнаяСтрока)
	Если ЗначениеЗаполнено(ВходнаяСтрока) Тогда
		Возврат Число(ВходнаяСтрока);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ПреобразоватьСтрокуВЧисло()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "ПечатьФайла" Тогда
		ЕстьОшибки = Ложь;
		ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект,ЕстьОшибки);
		Если ЕстьОшибки тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		Макет = ПолучитьМакет("ФормаСЗВ_К");
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК_ФормаСЗВ_К";
		
		
		Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
			//Получаем форматы необходимых записей
			ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
			ФорматЗаписиКОНВ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("КОНВ",ДокументФорматЗаписей);
			ФорматЗаписиДЕЯТ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ДЕЯТ",ДокументФорматЗаписей);
			ФорматЗаписиПСТЖ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ПСТЖ",ДокументФорматЗаписей);
			ФорматЗаписиПЛГТ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ПЛГТ",ДокументФорматЗаписей);
			ФорматЗаписиТЕРР = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ТЕРР",ДокументФорматЗаписей);
			ФорматЗаписиОСОБ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ОСОБ",ДокументФорматЗаписей);
			ФорматЗаписиВЫСЛ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ВЫСЛ",ДокументФорматЗаписей);
			
			//Обработка заголовка файла
			ИнформацияОПачке = Новый Структура;
			Если ПроцедурыПерсонифицированногоУчета.РазобратьЗаголовокФайла(ТекстФайла,ИнформацияОПачке)=0 тогда
				Возврат Неопределено;
			КонецЕсли;	
			ИнформацияОПачке.Вставить("ИнформацияОРаботодателе", Организация);
			//Обработка документов файла
			ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
			ОбластьШапка2 = Макет.ПолучитьОбласть("Шапка2");
			ОбластьШапка3 = Макет.ПолучитьОбласть("Шапка3");
			ОбластьШапкаПериоды = Макет.ПолучитьОбласть("ШапкаПериоды");
			ОбластьШапкаДеят = Макет.ПолучитьОбласть("ШапкаДЕЯТ");
			ОбластьСтрокаСтажа = Макет.ПолучитьОбласть("СтрокаСтажа");
			ОбластьШапкаИтогов = Макет.ПолучитьОбласть("ШапкаИтогов");
			ОбластьСтрокаТЕРР = Макет.ПолучитьОбласть("СтрокаТЕРР");
			ОбластьСтрокаТЕРР2 = Макет.ПолучитьОбласть("СтрокаТЕРР2");
			ОбластьСтрокаОСОБ = Макет.ПолучитьОбласть("СтрокаОСОБ");
			ОбластьСтрокаОСОБ2 = Макет.ПолучитьОбласть("СтрокаОСОБ2");
			ОбластьСтрокаВЫСЛ = Макет.ПолучитьОбласть("СтрокаВЫСЛ");
			ОбластьСтрокаВЫСЛ2 = Макет.ПолучитьОбласть("СтрокаВЫСЛ2");
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
			
			//Установим заранее для всех работников
			ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата, Ответственный.ФизЛицо);
			ОбластьПодвал.Параметры.Дата = ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(Дата);
			ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
			ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
			
			Н=5;//Номер строки первой записи КОНВ
			
			// строк на листе
			СтрокНаЛисте	=	68.05;
			//количество строк для вывода записи о стаже
			ВысотаСтрокаСтажа = 3;
			
			//Цикл по документам файла
			Для НомерДокумента = 1 по ИнформацияОПачке.ДокументовВПачке цикл
				
				//Читаем запись КОНВ
				СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
				Н= Н + 1;
				ЗаписьКОНВ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиКОНВ);
				СтрОшибка = "";
				Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла,"КОНВ",ФорматЗаписиКОНВ,ЗаписьКОНВ,СтрОшибка) тогда
					Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
					Возврат Неопределено;
				КонецЕсли;	
				
				//Каждый новый работник с новой страницы
				Если НомерДокумента<>1 тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;	 
				
				//Высота выходной формы в строках по текущему работнику
				ВысотаТаблицы =	0;
				
				//Счетчик листов по текущему работнику
				КолВоЛистов = 1;
				
				//Выводим шапку
				Если ЗначениеЗаполнено(ЗаписьКОНВ.ТипФормы) Тогда
					ОбластьШапка.Рисунки["ТипФормы"+ЗаписьКОНВ.ТипФормы].Текст    =   "ю";
				КонецЕсли;
				ОбластьШапка.Параметры.СтраховойНомер					=	ЗаписьКОНВ.СтраховойНомер;
				ОбластьШапка.Параметры.Фамилия							=	ЗаписьКОНВ.Фамилия;
				ОбластьШапка.Параметры.Имя								=	ЗаписьКОНВ.Имя;
				ОбластьШапка.Параметры.Отчество							=	ЗаписьКОНВ.Отчество;
				ОбластьШапка.Параметры.ДатаРождения						=	ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(ЗаписьКОНВ.СтандартнаяДатаРождения);
				ОбластьШапка.Параметры.ТерриториальныеУсловия			=	ЗаписьКОНВ.ТерриториальныеУсловияКод + ?(ЗаписьКОНВ.РайонныйКоэффициент = 0, "",", " + ЗаписьКОНВ.РайонныйКоэффициент);
				ДокументРезультат.Вывести(ОбластьШапка);
				ДокументРезультат.Вывести(ОбластьШапкаПериоды);
				ВысотаТаблицы	=	ВысотаТаблицы	+	14.5;
				
				//Ссылка на область с названием вида формы: единая, начало, продолжение, окончание
				НомерСтрокиВариантСЗВК =  ДокументРезультат.ВысотаТаблицы-13;
				
				//Первоначально считаем, что все данные поместятся на одном листе
				ДокументРезультат.Область(НомерСтрокиВариантСЗВК,2).Текст = "Форма СЗВ-К (единая)";
				
				//Установим заранее для новых листов по текущему работнику
				ОбластьШапка3 = Макет.ПолучитьОбласть("Шапка3");
				ОбластьШапка3.Параметры.СтраховойНомер					=	ЗаписьКОНВ.СтраховойНомер;
				ОбластьШапка3.Параметры.ФИО								=	ЗаписьКОНВ.Фамилия	+	" "	+	Лев(ЗаписьКОНВ.Имя,1)	+	". "	+	Лев(ЗаписьКОНВ.Отчество,1)+".";
				
				//Цикл по периодам деятельности работника
				Для НомерПериодаДеятельности = 1 по ЗаписьКОНВ.ЧислоЗаписейОПериодахДеятельности цикл
					
					//Читаем запись ДЕЯТ
					СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
					Н= Н + 1;
					ЗаписьДЕЯТ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиДЕЯТ);
					СтрОшибка = "";
					Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла,"ДЕЯТ",ФорматЗаписиДЕЯТ,ЗаписьДЕЯТ,СтрОшибка) тогда
						Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
						Возврат Неопределено;
					КонецЕсли;	
					
					//Выводим шапку периода деятельности
					ВысотаШапкаДЕЯТ	=	8;
					ОбластьШапкаДЕЯТ.Параметры.НаименованиеОрганизации	=	ЗаписьДЕЯТ.НаименованиеОрганизации;
					ОбластьШапкаДЕЯТ.Параметры.ВидДеятельности			=	ЗаписьДЕЯТ.ВидДеятельностиКод;
					ОбластьШапкаДЕЯТ.Параметры.НомерПериода				=	""+ЗаписьДЕЯТ.НомерЗаписи+".";
					Если	СтрДлина(СокрЛП(ЗаписьДЕЯТ.НаименованиеОрганизации))	>	65	тогда
						ВысотаШапкаДЕЯТ	=	ВысотаШапкаДЕЯТ	+	1;
					КонецЕсли;
					
					// шапка стажа, без самого стажа выводиться не может
					Если	ЗаписьДЕЯТ.ЧислоЗаписейОСтаже	>	0	тогда
						ДополнениеСтрокаСтажа	=	ВысотаСтрокаСтажа;
					КонецЕсли;
					
					//Контроль выхода за пределы листа
					Если (ВысотаТаблицы	+	ВысотаШапкаДЕЯТ	+	ДополнениеСтрокаСтажа)	>=	СтрокНаЛисте	тогда
						Если	КолВоЛистов	=	1	тогда
							ДокументРезультат.Область(НомерСтрокиВариантСЗВК,2).Текст	=	"Форма СЗВ-К (начало)";
							ДокументРезультат.Область(НомерСтрокиВариантСЗВК,13).Текст	=	"Лист 1";
						КонецЕсли;
						КолВоЛистов	= КолВоЛистов +	1;
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						// перед тем как выводить шапку стажа, выведем шапку СЗВ-К и номер листа
						ОбластьШапка2.Параметры.НомерЛиста = "Лист " + КолВоЛистов;
						ДокументРезультат.Вывести(ОбластьШапка2);
						НомерСтрокиВариантСЗВК = ДокументРезультат.ВысотаТаблицы;
						ДокументРезультат.Вывести(ОбластьШапка3);
						ДокументРезультат.Вывести(ОбластьШапкаПериоды);
						ВысотаТаблицы =	4.5;
					КонецЕсли;
					
					ДокументРезультат.Вывести(ОбластьШапкаДЕЯТ);
					ВысотаТаблицы	=	ВысотаТаблицы	+	ВысотаШапкаДЕЯТ;
					
					//Цикл по основным записям о стаже
					Для НомерОснованойЗаписи = 1 по  ЗаписьДЕЯТ.ЧислоЗаписейОСтаже цикл
						
						//Читаем запись ПСТЖ
						СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
						Н= Н + 1;
						ЗаписьПСТЖ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиПСТЖ);
						СтрОшибка = "";
						Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла,"ПСТЖ",ФорматЗаписиПСТЖ,ЗаписьПСТЖ,СтрОшибка) тогда
							Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
							Возврат Неопределено;
						КонецЕсли;	
						
						//Выводим запись ПСТЖ
						ОбластьСтрокаСтажа.Параметры.НомерПериода 					= ЗаписьПСТЖ.НомерПериода;
						ОбластьСтрокаСтажа.Параметры.ДатаНачалаПериода 				= Формат(ЗаписьПСТЖ.ДатаНачалаПериода,"ДФ='дд.ММ.гггг'");
						ОбластьСтрокаСтажа.Параметры.ДатаОкончанияПериода 			= Формат(ЗаписьПСТЖ.ДатаОкончанияПериода,"ДФ='дд.ММ.гггг'");
						ОбластьСтрокаСтажа.Параметры.Должность 						= ЗаписьПСТЖ.Должность;
						ОбластьСтрокаСтажа.Параметры.ТерриториальныеУсловияКод 		= ЗаписьПСТЖ.ТерриториальныеУсловияКод;
						ОбластьСтрокаСтажа.Параметры.РайонныйКоэффициент			= ЗаписьПСТЖ.РайонныйКоэффициент;
						ОбластьСтрокаСтажа.Параметры.ОсобыеУсловияТрудаКод 			= ЗаписьПСТЖ.ОсобыеУсловияТрудаКод;
						ОбластьСтрокаСтажа.Параметры.КодПозицииСписка 				= ЗаписьПСТЖ.КодПозицииСписка;
						ОбластьСтрокаСтажа.Параметры.ОснованиеИсчисляемогоСтажаКод 	= ЗаписьПСТЖ.ОснованиеИсчисляемогоСтажаКод;
						ОбластьСтрокаСтажа.Параметры.ИсчисляемыйСтажДопСведения 	= СобратьСтрокуИсчисляемогоСтажа(ЗаписьПСТЖ);
						ОбластьСтрокаСтажа.Параметры.ОснованиеВыслугиЛетКод 		= ЗаписьПСТЖ.ОснованиеВыслугиЛетКод;
						ОбластьСтрокаСтажа.Параметры.ВыслугаЛетДопСведения 			= СобратьСтрокуПенсииЗаВыслугуЛет(ЗаписьПСТЖ);
						ВысотаВрСтрокаСтажа = ВысотаСтрокаСтажа;
						Если	СтрДлина(СокрЛП(ЗаписьПСТЖ.Должность))	>	65	тогда
							ВысотаВрСтрокаСтажа	=	ВысотаВрСтрокаСтажа	+	1;
						КонецЕсли;
						
						//Контроль выхода за пределы листа
						Если (ВысотаТаблицы	+	ВысотаВрСтрокаСтажа)	>=	СтрокНаЛисте	тогда
							Если	КолВоЛистов	=	1	тогда
								ДокументРезультат.Область(НомерСтрокиВариантСЗВК,2).Текст	=	"Форма СЗВ-К (начало)";
								ДокументРезультат.Область(НомерСтрокиВариантСЗВК,13).Текст	=	"Лист 1";
							КонецЕсли;
							КолВоЛистов	= КолВоЛистов +	1;
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							// перед тем как выводить стаж,выведем шапку СЗВ-К и шапку стажа
							ОбластьШапка2.Параметры.НомерЛиста = "Лист " + КолВоЛистов;
							ДокументРезультат.Вывести(ОбластьШапка2);
							НомерСтрокиВариантСЗВК = ДокументРезультат.ВысотаТаблицы;
							ДокументРезультат.Вывести(ОбластьШапка3);
							ДокументРезультат.Вывести(ОбластьШапкаПериоды);
							ДокументРезультат.Вывести(ОбластьШапкаДЕЯТ);
							ВысотаТаблицы =	4.5 + ВысотаШапкаДЕЯТ;
						КонецЕсли;	
						
						ДокументРезультат.Вывести(ОбластьСтрокаСтажа);
						ВысотаТаблицы	=	ВысотаТаблицы	+	ВысотаВрСтрокаСтажа;
						
						//Цикл по дополнительным записям о стаже
						Для НомерДополнительнойЗаписи = 1 по  ЗаписьПСТЖ.ЧислоДополнительныхЗаписей цикл
							
							//Читаем запись ПЛГТ
							СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
							Н= Н + 1;
							ЗаписьПЛГТ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиПЛГТ);
							СтрОшибка = "";
							Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла,"ПЛГТ",ФорматЗаписиПЛГТ,ЗаписьПЛГТ,СтрОшибка) тогда
								Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
								Возврат Неопределено;
							КонецЕсли;	
							
							//Выводим запись ПЛГТ
							ОбластьСтрокаСтажа.Параметры.НомерПериода 					= "";
							ОбластьСтрокаСтажа.Параметры.ДатаНачалаПериода 				= "";
							ОбластьСтрокаСтажа.Параметры.ДатаОкончанияПериода 			= "";
							ОбластьСтрокаСтажа.Параметры.Должность 						= ЗаписьПЛГТ.Должность;
							ОбластьСтрокаСтажа.Параметры.ТерриториальныеУсловияКод 		= ЗаписьПЛГТ.ТерриториальныеУсловияКод;
							ОбластьСтрокаСтажа.Параметры.РайонныйКоэффициент			= ЗаписьПЛГТ.РайонныйКоэффициент;
							ОбластьСтрокаСтажа.Параметры.ОсобыеУсловияТрудаКод 			= ЗаписьПЛГТ.ОсобыеУсловияТрудаКод;
							ОбластьСтрокаСтажа.Параметры.КодПозицииСписка 				= ЗаписьПЛГТ.КодПозицииСписка;
							ОбластьСтрокаСтажа.Параметры.ОснованиеИсчисляемогоСтажаКод 	= ЗаписьПЛГТ.ОснованиеИсчисляемогоСтажаКод;
							ОбластьСтрокаСтажа.Параметры.ИсчисляемыйСтажДопСведения 	= СобратьСтрокуИсчисляемогоСтажа(ЗаписьПЛГТ);
							ОбластьСтрокаСтажа.Параметры.ОснованиеВыслугиЛетКод 		= ЗаписьПЛГТ.ОснованиеВыслугиЛетКод;
							ОбластьСтрокаСтажа.Параметры.ВыслугаЛетДопСведения 			= СобратьСтрокуПенсииЗаВыслугуЛет(ЗаписьПЛГТ);
							ВысотаВрСтрокаСтажа = 3;
							Если	СтрДлина(СокрЛП(ЗаписьПЛГТ.Должность))	>	65	тогда
								ВысотаВрСтрокаСтажа	=	ВысотаВрСтрокаСтажа	+	1;
							КонецЕсли;
							
							//Контроль выхода за пределы листа
							Если (ВысотаТаблицы	+	ВысотаВрСтрокаСтажа)	>=	СтрокНаЛисте	тогда
								Если	КолВоЛистов	=	1	тогда
									ДокументРезультат.Область(НомерСтрокиВариантСЗВК,2).Текст	=	"Форма СЗВ-К (начало)";
									ДокументРезультат.Область(НомерСтрокиВариантСЗВК,13).Текст	=	"Лист 1";
								КонецЕсли;
								КолВоЛистов	= КолВоЛистов +	1;
								ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
								// перед тем как выводить стаж,выведем шапку СЗВ-К и шапку стажа
								ОбластьШапка2.Параметры.НомерЛиста = "Лист " + КолВоЛистов;
								ДокументРезультат.Вывести(ОбластьШапка2);
								НомерСтрокиВариантСЗВК = ДокументРезультат.ВысотаТаблицы;
								ДокументРезультат.Вывести(ОбластьШапка3);
								ДокументРезультат.Вывести(ОбластьШапкаПериоды);
								ДокументРезультат.Вывести(ОбластьШапкаДЕЯТ);
								ВысотаТаблицы =	4.5 + ВысотаШапкаДЕЯТ;
							КонецЕсли;	
							
							ДокументРезультат.Вывести(ОбластьСтрокаСтажа);
							ВысотаТаблицы	=	ВысотаТаблицы	+	ВысотаВрСтрокаСтажа;
							
						КонецЦикла;	
						
					КонецЦикла;//Цикл по основным записям о стаже	
					
				КонецЦикла;//Цикл по периодам деятельности работника	
				
				// Вывод подвала с итоговыми записями		
				ВысотаПодвала	= 19 + Макс(ЗаписьКОНВ.ЧислоЗаписейПоТерриториальнымУсловиям-1,0) + Макс(ЗаписьКОНВ.ЧислоЗаписейПоОсобымУсловиямТруда-1,0) + Макс(ЗаписьКОНВ.ЧислоЗаписейПоВыслугеЛет-1,0);
				
				//Контроль выхода за пределы листа
				Если	(ВысотаТаблицы	+	ВысотаПодвала)	>=	СтрокНаЛисте	тогда
					Если	КолВоЛистов	=	1	тогда
						ДокументРезультат.Область(НомерСтрокиВариантСЗВК,2).Текст	=	"Форма СЗВ-К (начало)";
						ДокументРезультат.Область(НомерСтрокиВариантСЗВК,13).Текст	=	"Лист 1";
					КонецЕсли;
					КолВоЛистов	= КолВоЛистов +	1;
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					// перед тем как выводить шапку стажа, выведем шапку СЗВ-К и номер листа
					ОбластьШапка2.Параметры.НомерЛиста = "Лист " + КолВоЛистов;
					ДокументРезультат.Вывести(ОбластьШапка2);
					НомерСтрокиВариантСЗВК = ДокументРезультат.ВысотаТаблицы;
					ДокументРезультат.Вывести(ОбластьШапка3);
					ВысотаТаблицы =	3.5;
				КонецЕсли;
				
				Если КолВоЛистов <> 1 тогда
					ДокументРезультат.Область(НомерСтрокиВариантСЗВК,2).Текст = "Форма СЗВ-К (окончание)";//подвал - последний лист
				КонецЕсли;
				
				//Общий трудовой стаж
				ОбластьШапкаИтогов.Параметры.Лет = ЗаписьКОНВ.ОбщийСтажЛет;
				ОбластьШапкаИтогов.Параметры.Месяцев = ЗаписьКОНВ.ОбщийСтажМесяцев;
				ОбластьШапкаИтогов.Параметры.Дней = ЗаписьКОНВ.ОбщийСтажДней;
				ДокументРезультат.Вывести(ОбластьШапкаИтогов);
				
				//Вывод записей ТЕРР
				Если ЗаписьКОНВ.ЧислоЗаписейПоТерриториальнымУсловиям = 0 тогда
					ОбластьСтрокаТЕРР.Параметры.КодСтажа = "";
					ОбластьСтрокаТЕРР.Параметры.Лет = 0;
					ОбластьСтрокаТЕРР.Параметры.Месяцев = 0;
					ОбластьСтрокаТЕРР.Параметры.Дней = 0;
					ДокументРезультат.Вывести(ОбластьСтрокаТЕРР);
				КонецЕсли;	
				
				Для НомерЗаписиТЕРР = 1 по ЗаписьКОНВ.ЧислоЗаписейПоТерриториальнымУсловиям цикл
					
					//Прочитаем запись ТЕРР
					СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
					Н= Н + 1;
					ЗаписьТЕРР = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиТЕРР);
					СтрОшибка = "";
					Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла,"ТЕРР",ФорматЗаписиТЕРР,ЗаписьТЕРР,СтрОшибка) тогда
						Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
						Возврат Неопределено;
					КонецЕсли;	
					
					Если НомерЗаписиТЕРР = 1 тогда
						ОбластьТЕРР = ОбластьСтрокаТЕРР;
					Иначе	
						ОбластьТЕРР = ОбластьСтрокаТЕРР2;
					КонецЕсли;	 
					
					ОбластьТЕРР.Параметры.КодСтажа = ЗаписьТЕРР.ТерриториальныеУсловияКод;
					ОбластьТЕРР.Параметры.Лет = ЗаписьТЕРР.ТерриториальныеУсловияЛет;
					ОбластьТЕРР.Параметры.Месяцев = ЗаписьТЕРР.ТерриториальныеУсловияМесяцев;
					ОбластьТЕРР.Параметры.Дней = ЗаписьТЕРР.ТерриториальныеУсловияДней;
					ДокументРезультат.Вывести(ОбластьТЕРР);
				КонецЦикла;//Цикл по записям ТЕРР	
				
				//Вывод записей ОСОБ
				
				Если ЗаписьКОНВ.ЧислоЗаписейПоОсобымУсловиямТруда = 0 тогда
					ОбластьСтрокаОСОБ.Параметры.КодСтажа = "";
					ОбластьСтрокаОСОБ.Параметры.Лет = 0;
					ОбластьСтрокаОСОБ.Параметры.Месяцев = 0;
					ОбластьСтрокаОСОБ.Параметры.Дней = 0;
					ДокументРезультат.Вывести(ОбластьСтрокаОСОБ);
				КонецЕсли;	
				
				Для НомерЗаписиОСОБ = 1 по ЗаписьКОНВ.ЧислоЗаписейПоОсобымУсловиямТруда цикл
					
					//Прочитаем запись ОСОБ
					СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
					Н= Н + 1;
					ЗаписьОСОБ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиОСОБ);
					СтрОшибка = "";
					Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла,"ОСОБ",ФорматЗаписиОСОБ,ЗаписьОСОБ,СтрОшибка) тогда
						Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
						Возврат Неопределено;
					КонецЕсли;	
					
					Если НомерЗаписиОСОБ = 1 тогда
						ОбластьОСОБ = ОбластьСтрокаОСОБ;
					Иначе	
						ОбластьОСОБ = ОбластьСтрокаОСОБ2;
					КонецЕсли;	 
					
					ОбластьОСОБ.Параметры.КодСтажа = ЗаписьОСОБ.ОсобыеУсловияТрудаКод;
					ОбластьОСОБ.Параметры.Лет = ЗаписьОСОБ.ОсобыеУсловияТрудаЛет;
					ОбластьОСОБ.Параметры.Месяцев = ЗаписьОСОБ.ОсобыеУсловияТрудаМесяцев;
					ОбластьОСОБ.Параметры.Дней = ЗаписьОСОБ.ОсобыеУсловияТрудаДней;
					ДокументРезультат.Вывести(ОбластьОСОБ);
				КонецЦикла;//Цикл по записям ОСОБ	
				
				//Вывод записей ВЫСЛ
				Если ЗаписьКОНВ.ЧислоЗаписейПоВыслугеЛет = 0 тогда
					ОбластьСтрокаВЫСЛ.Параметры.КодСтажа = "";
					ОбластьСтрокаВЫСЛ.Параметры.Лет = 0;
					ОбластьСтрокаВЫСЛ.Параметры.Месяцев = 0;
					ОбластьСтрокаВЫСЛ.Параметры.Дней = 0;
					ДокументРезультат.Вывести(ОбластьСтрокаВЫСЛ);
				КонецЕсли;	
				
				Для НомерЗаписиВЫСЛ = 1 по ЗаписьКОНВ.ЧислоЗаписейПоВыслугеЛет цикл
					
					//Прочитаем запись ВЫСЛ
					СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
					Н= Н + 1;
					ЗаписьВЫСЛ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиВЫСЛ);
					СтрОшибка = "";
					Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла,"ВЫСЛ",ФорматЗаписиВЫСЛ,ЗаписьВЫСЛ,СтрОшибка) тогда
						Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
						Возврат Неопределено;
					КонецЕсли;	
					
					Если НомерЗаписиВЫСЛ = 1 тогда
						ОбластьВЫСЛ = ОбластьСтрокаВЫСЛ;
					Иначе	
						ОбластьВЫСЛ = ОбластьСтрокаВЫСЛ2;
					КонецЕсли;	 
					
					ОбластьВЫСЛ.Параметры.КодСтажа = ЗаписьВЫСЛ.ВыслугаЛетОснованиеКод;
					ОбластьВЫСЛ.Параметры.Лет = ЗаписьВЫСЛ.ВыслугаЛетЛет;
					ОбластьВЫСЛ.Параметры.Месяцев = ЗаписьВЫСЛ.ВыслугаЛетМесяцев;
					ОбластьВЫСЛ.Параметры.Дней = ЗаписьВЫСЛ.ВыслугаЛетДней;
					ДокументРезультат.Вывести(ОбластьВЫСЛ);
				КонецЦикла;//Цикл по записям ОСОБ	
				
				//Выводим подвал
				ОбластьПодвал.Параметры.ТекстНаЛистах = "Сведения представлены на "+ КолВоЛистов+" "+ОбщегоНазначенияЗК.ФормаМножественногоЧисла("листе","листах","листах", КолВоЛистов);
				ДокументРезультат.Вывести(ОбластьПодвал);
				
			КонецЦикла;//Цикл по документам файла	
			
			ДокументРезультат.Автомасштаб = Истина;
			УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат,1,Ложь,"Сведения о трудовом стаже (форма СЗВ-К)");
			
			//Печать описи документов
			ДокументОписи = Новый ТабличныйДокумент;
			ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК_АДВ_6";
			ПроцедурыПерсонифицированногоУчета.ВывестиОписьАДВ6(ДокументОписи,ИнформацияОПачке,ОтветственныеЛица);
			Возврат УниверсальныеМеханизмы.НапечататьДокумент(ДокументОписи,1,Ложь,"Опись документов АДВ-6");
			
		ИначеЕсли ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда
			// Печать По 7 версии формата
			
			//Получим массив ФизЛиц документа 
			Таблица = РаботникиОрганизации.Выгрузить();
			Таблица.Свернуть("ФизЛицо");
			МассивФизЛиц = Таблица.ВыгрузитьКолонку("ФизЛицо");
			
			//Выполним проверку сведений о стаже и получим результат запроса к самим сведениям
			РезультатЗапросаПоИтоговомуСтажу = "";
			Если НЕ ПроцедурыПерсонифицированногоУчета.СЗВК_ПроверитьНаборСведенийДляОценкиПенсионныхПрав(Ссылка,МассивФизЛиц, РезультатЗапросаПоИтоговомуСтажу) тогда
				Отказ = Истина;
				Возврат "";
			КонецЕсли;
			ТаблицаИтоговогоСтажа = РезультатЗапросаПоИтоговомуСтажу.Выгрузить();
			Для Каждого СтрокаИтоговогоСтажа Из ТаблицаИтоговогоСтажа Цикл
				СтрокаИтоговогоСтажа.ФИОФизЛица = ВРег(СтрокаИтоговогоСтажа.ФИОФизЛица);
			КонецЦикла;
			//ТаблицаИтоговогоСтажа
			СтруктураПоискаИтоговогоСтажа = Новый Структура;
			
			ДеревоПФР = ПроцедурыПерсонифицированногоУчета.ПреобразоватьВДеревоXML(ТекстФайла);
			
			Если ДеревоПФР = Неопределено Тогда
				Отказ = Ложь;
				ОбщегоНазначенияЗК.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка));
				Возврат Неопределено 
			КонецЕсли;
			ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
			Если ДеревоПФР = Неопределено Тогда
				Отказ = Ложь;
				ОбщегоНазначенияЗК.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка));
				Возврат Неопределено 
			КонецЕсли;
			
			//Обработка документов файла
			ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
			ОбластьШапка2 = Макет.ПолучитьОбласть("Шапка2");
			ОбластьШапка3 = Макет.ПолучитьОбласть("Шапка3");
			ОбластьШапкаПериоды = Макет.ПолучитьОбласть("ШапкаПериоды");
			ОбластьШапкаДеят = Макет.ПолучитьОбласть("ШапкаДЕЯТ");
			ОбластьСтрокаСтажа = Макет.ПолучитьОбласть("СтрокаСтажа");
			ОбластьШапкаИтогов = Макет.ПолучитьОбласть("ШапкаИтогов");
			ОбластьСтрокаТЕРР = Макет.ПолучитьОбласть("СтрокаТЕРР");
			ОбластьСтрокаТЕРР2 = Макет.ПолучитьОбласть("СтрокаТЕРР2");
			ОбластьСтрокаОСОБ = Макет.ПолучитьОбласть("СтрокаОСОБ");
			ОбластьСтрокаОСОБ2 = Макет.ПолучитьОбласть("СтрокаОСОБ2");
			ОбластьСтрокаВЫСЛ = Макет.ПолучитьОбласть("СтрокаВЫСЛ");
			ОбластьСтрокаВЫСЛ2 = Макет.ПолучитьОбласть("СтрокаВЫСЛ2");
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
			
			//Установим заранее для всех работников
			ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата, Ответственный.ФизЛицо);
			ОбластьПодвал.Параметры.Дата = ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(Дата);
			ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
			ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
			
			Н=5;//Номер строки первой записи КОНВ
			
			// строк на листе
			СтрокНаЛисте	=	68.05;
			//количество строк для вывода записи о стаже
			ВысотаСтрокаСтажа = 3;
			
			СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
			Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
				Для Каждого СтрокаДереваКонвертация Из СтрокаДереваПачкаВходящихДокументов.Строки Цикл
					Если СтрокаДереваКонвертация.Имя = "КОНВЕРТАЦИЯ" Тогда
						
						НомерДокумента = ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваКонвертация, "НомерВпачке"));
						
						//Каждый новый работник с новой страницы
						Если НомерДокумента<>2 тогда
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							
						КонецЕсли;	 
						
						//Высота выходной формы в строках по текущему работнику
						ВысотаТаблицы =	0;
						
						//Счетчик листов по текущему работнику
						КолВоЛистов = 1;
						
						ТипФормы = СтрокаДереваКонвертация.Строки[2].Значение;
						//Выводим шапку
						Если ЗначениеЗаполнено(ТипФормы) Тогда
							Если ТипФормы = "ИСХОДНАЯ" Тогда
								ТипФормыРисунка = "ИСХД";
							ИначеЕсли ТипФормы = "КОРРЕКТИРУЮЩАЯ" Тогда
								ТипФормыРисунка = "КОРР";
							Иначе 
								ТипФормыРисунка = "ОТМН";
							КонецЕсли;
							ОбластьШапка.Рисунки["ТипФормы"+ТипФормыРисунка].Текст    =   "ю";
						КонецЕсли;
						
						СтрокаДереваФИО = СтрокаДереваКонвертация.Строки.Найти("ФИО");
						ФИОФизЛица = "";
						Если СтрокаДереваФИО <> Неопределено Тогда
							ОбластьШапка.Параметры.Фамилия = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Фамилия"); 
							ОбластьШапка.Параметры.Имя 	= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Имя"); 
							ОбластьШапка.Параметры.Отчество = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Отчество"); 
							ФИОФизЛица = ВРег(ОбластьШапка.Параметры.Фамилия + " " + ОбластьШапка.Параметры.Имя + " " + ОбластьШапка.Параметры.Отчество);
						КонецЕсли;
						ОбластьШапка.Параметры.СтраховойНомер =	ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваКонвертация, "СтраховойНомер");
						МассивЧиселДаты = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваКонвертация ,"ДатаРождения"), ".");
						ОбластьШапка.Параметры.ДатаРождения = ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(Дата(МассивЧиселДаты[2], МассивЧиселДаты[1], МассивЧиселДаты[0]));
						СтрокаТУНа2001 = СтрокаДереваКонвертация.Строки.Найти("ТерриториальныеУсловияНа31.12.2001");
						ОбластьШапка.Параметры.ТерриториальныеУсловия = "";
						Если СтрокаТУНа2001 <> Неопределено Тогда
							КоэффициентТУ = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаТУНа2001, "Коэффициент");
							Если ЗначениеЗаполнено(КоэффициентТУ) Тогда
								ОбластьШапка.Параметры.ТерриториальныеУсловия =  ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаТУНа2001, "ОснованиеТУ") + ", " + КоэффициентТУ;
							Иначе
								ОбластьШапка.Параметры.ТерриториальныеУсловия = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаТУНа2001, "ОснованиеТУ");
							КонецЕсли;
						КонецЕсли;
						ДокументРезультат.Вывести(ОбластьШапка);
						ДокументРезультат.Вывести(ОбластьШапкаПериоды);
						ВысотаТаблицы	=	ВысотаТаблицы	+	14.5;
						
						//Ссылка на область с названием вида формы: единая, начало, продолжение, окончание
						НомерСтрокиВариантСЗВК =  ДокументРезультат.ВысотаТаблицы-13;
						
						//Первоначально считаем, что все данные поместятся на одном листе
						ДокументРезультат.Область(НомерСтрокиВариантСЗВК,2).Текст = "Форма СЗВ-К (единая)";
						
						//Установим заранее для новых листов по текущему работнику
						ОбластьШапка3 = Макет.ПолучитьОбласть("Шапка3");
						ОбластьШапка3.Параметры.СтраховойНомер	= ОбластьШапка.Параметры.СтраховойНомер;
						ОбластьШапка3.Параметры.ФИО				= ОбластьШапка.Параметры.Фамилия + " " + Лев(ОбластьШапка.Параметры.Имя,1) + ". " + Лев(ОбластьШапка.Параметры.Отчество,1) + ".";
						
						СтрокаСтажДоРегистрации = СтрокаДереваКонвертация.Строки.Найти("СтажДоРегистрации");
						Если СтрокаСтажДоРегистрации <> Неопределено Тогда
							НомерПериодаДеятельности = 0;
							ДополнениеСтрокаСтажа = 0;
							Для Каждого СтрокаДереваПериодДеятельности Из СтрокаСтажДоРегистрации.Строки Цикл
								
								СтрокаДереваВсеПериодыРаботы = СтрокаДереваПериодДеятельности.Строки.Найти("ВсеПериодыРаботы");
								Если СтрокаДереваВсеПериодыРаботы <> Неопределено Тогда
									НомерПериодаДеятельности = НомерПериодаДеятельности + 1;
									//Выводим шапку периода деятельности
									ВысотаШапкаДЕЯТ	=	8;
									ОбластьШапкаДЕЯТ.Параметры.НаименованиеОрганизации = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПериодДеятельности, "НаименованиеОрганизации");
									ОбластьШапкаДЕЯТ.Параметры.ВидДеятельности = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПериодДеятельности, "ВидДеятельности");
									ОбластьШапкаДЕЯТ.Параметры.НомерПериода = "" + НомерПериодаДеятельности + ".";
									Если СтрДлина(СокрЛП(ОбластьШапкаДЕЯТ.Параметры.НаименованиеОрганизации)) > 65	тогда
										ВысотаШапкаДЕЯТ	= ВысотаШапкаДЕЯТ + 1;
									КонецЕсли;
									ЧислоЗаписейОСтаже = ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаСтажДоРегистрации, "Количество"));
									// шапка стажа, без самого стажа выводиться не может
									Если ЧислоЗаписейОСтаже > 0 тогда
										ДополнениеСтрокаСтажа = ВысотаСтрокаСтажа;
									КонецЕсли;
									
									//Контроль выхода за пределы листа
									Если (ВысотаТаблицы	+ ВысотаШапкаДЕЯТ + ДополнениеСтрокаСтажа) >= СтрокНаЛисте тогда
										Если КолВоЛистов = 1 тогда
											ДокументРезультат.Область(НомерСтрокиВариантСЗВК,2).Текст	= "Форма СЗВ-К (начало)";
											ДокументРезультат.Область(НомерСтрокиВариантСЗВК,13).Текст	= "Лист 1";
										КонецЕсли;
										КолВоЛистов	= КолВоЛистов +	1;
										ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
										// перед тем как выводить шапку стажа, выведем шапку СЗВ-К и номер листа
										ОбластьШапка2.Параметры.НомерЛиста = "Лист " + КолВоЛистов;
										ДокументРезультат.Вывести(ОбластьШапка2);
										НомерСтрокиВариантСЗВК = ДокументРезультат.ВысотаТаблицы;
										ДокументРезультат.Вывести(ОбластьШапка3);
										ДокументРезультат.Вывести(ОбластьШапкаПериоды);
										ВысотаТаблицы =	4.5;
									КонецЕсли;
									
									ДокументРезультат.Вывести(ОбластьШапкаДЕЯТ);
									ВысотаТаблицы =	ВысотаТаблицы + ВысотаШапкаДЕЯТ;
									
									Для Каждого СтрокаПериодРаботы Из СтрокаДереваВсеПериодыРаботы.Строки Цикл 
										
										СтрокаДереваОсновнаяСтрока = СтрокаПериодРаботы.Строки.Найти("ОсновнаяСтрока");
										Если СтрокаДереваОсновнаяСтрока <> Неопределено Тогда
											
											Для СчПараметр = 0 По ОбластьСтрокаСтажа.Параметры.Количество() - 1 Цикл
												ОбластьСтрокаСтажа.Параметры[СчПараметр] = ""
											КонецЦикла;
											
											//Выводим запись ПСТЖ
											ОбластьСтрокаСтажа.Параметры.НомерПериода 			= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "НомерСтроки");
											ОбластьСтрокаСтажа.Параметры.ДатаНачалаПериода 		= Формат(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаНачалаПериода"),"ДФ='дд.ММ.гггг'");
											ОбластьСтрокаСтажа.Параметры.ДатаОкончанияПериода	= Формат(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсновнаяСтрока, "ДатаКонцаПериода"),"ДФ='дд.ММ.гггг'");
											
											СтрокаДереваОсобенностиУчета = СтрокаДереваОсновнаяСтрока.Строки.Найти("ОсобенностиУчета");
											Если СтрокаДереваОсобенностиУчета <> Неопределено Тогда
												
												ОбластьСтрокаСтажа.Параметры.Должность = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобенностиУчета, "ПрофессияДолжность");
												
												СтрокаДереваТерриториальныеУсловия = СтрокаДереваОсобенностиУчета.Строки.Найти("ТерриториальныеУсловия");
												Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
													ОбластьСтрокаСтажа.Параметры.ТерриториальныеУсловияКод 		= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "ОснованиеТУ");
													ОбластьСтрокаСтажа.Параметры.РайонныйКоэффициент			= ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "Коэффициент"));
												КонецЕсли;
												СтрокаДереваОсобыеУсловияТруда = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобыеУсловияТруда");
												Если СтрокаДереваОсобыеУсловияТруда <> Неопределено Тогда
													ОбластьСтрокаСтажа.Параметры.ОсобыеУсловияТрудаКод 			= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ОснованиеОУТ");
													ОбластьСтрокаСтажа.Параметры.КодПозицииСписка 				= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ПозицияСписка");
												КонецЕсли;	
												СтрокаДереваИсчисляемыйСтаж = СтрокаДереваОсобенностиУчета.Строки.Найти("ИсчисляемыйСтаж");
												Если СтрокаДереваИсчисляемыйСтаж <> Неопределено Тогда
													ОбластьСтрокаСтажа.Параметры.ОснованиеИсчисляемогоСтажаКод 	= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИсчисляемыйСтаж, "ОснованиеИС");
													ОбластьСтрокаСтажа.Параметры.ИсчисляемыйСтажДопСведения 	= XMLСобратьСтрокуИсчисляемогоСтажа(СтрокаДереваИсчисляемыйСтаж);
												КонецЕсли;
												СтрокаДереваВыслугаЛет = СтрокаДереваОсобенностиУчета.Строки.Найти("ВыслугаЛет");
												Если СтрокаДереваВыслугаЛет <> Неопределено Тогда
													ОбластьСтрокаСтажа.Параметры.ОснованиеВыслугиЛетКод 		= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ОснованиеВЛ");
													ОбластьСтрокаСтажа.Параметры.ВыслугаЛетДопСведения 			= XMLСобратьСтрокуПенсииЗаВыслугуЛет(СтрокаДереваВыслугаЛет);
												КонецЕсли;
												ВысотаВрСтрокаСтажа = ВысотаСтрокаСтажа;
												
												ПрофессияДолжность = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобенностиУчета, "ПрофессияДолжность");
												Если	СтрДлина(СокрЛП(ПрофессияДолжность))	>	65	тогда
													ВысотаВрСтрокаСтажа	=	ВысотаВрСтрокаСтажа	+	1;
												КонецЕсли;
												
												//Контроль выхода за пределы листа
												Если (ВысотаТаблицы	+	ВысотаВрСтрокаСтажа)	>=	СтрокНаЛисте	тогда
													Если	КолВоЛистов	=	1	тогда
														ДокументРезультат.Область(НомерСтрокиВариантСЗВК,2).Текст	=	"Форма СЗВ-К (начало)";
														ДокументРезультат.Область(НомерСтрокиВариантСЗВК,13).Текст	=	"Лист 1";
													КонецЕсли;
													КолВоЛистов	= КолВоЛистов +	1;
													ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
													// перед тем как выводить стаж,выведем шапку СЗВ-К и шапку стажа
													ОбластьШапка2.Параметры.НомерЛиста = "Лист " + КолВоЛистов;
													ДокументРезультат.Вывести(ОбластьШапка2);
													НомерСтрокиВариантСЗВК = ДокументРезультат.ВысотаТаблицы;
													ДокументРезультат.Вывести(ОбластьШапка3);
													ДокументРезультат.Вывести(ОбластьШапкаПериоды);
													ДокументРезультат.Вывести(ОбластьШапкаДЕЯТ);
													ВысотаТаблицы =	4.5 + ВысотаШапкаДЕЯТ;
												КонецЕсли;	
												
												ДокументРезультат.Вывести(ОбластьСтрокаСтажа);
												ВысотаТаблицы	=	ВысотаТаблицы	+	ВысотаВрСтрокаСтажа;
												
											КонецЕсли;
										КонецЕсли;
										
										СтрокаДереваДополнительныеСтроки = СтрокаПериодРаботы.Строки.Найти("ДополнительныеСтроки");
										Если СтрокаДереваДополнительныеСтроки <> Неопределено Тогда
											Для Каждого СтрокаДереваОсобенностиУчета Из СтрокаДереваДополнительныеСтроки.Строки Цикл 
												Если СтрокаДереваОсобенностиУчета.Имя = "ОсобенностиУчета" Тогда
													
													Для СчПараметр = 0 По ОбластьСтрокаСтажа.Параметры.Количество() - 1 Цикл
														ОбластьСтрокаСтажа.Параметры[СчПараметр] = ""
													КонецЦикла;
													
													//Выводим запись ПЛГТ
													ОбластьСтрокаСтажа.Параметры.Должность = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобенностиУчета, "ПрофессияДолжность");
													
													СтрокаДереваТерриториальныеУсловия = СтрокаДереваОсобенностиУчета.Строки.Найти("ТерриториальныеУсловия");
													Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
														ОбластьСтрокаСтажа.Параметры.ТерриториальныеУсловияКод 		= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "ОснованиеТУ");
														ОбластьСтрокаСтажа.Параметры.РайонныйКоэффициент			= ПреобразоватьСтрокуВЧисло(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "Коэффициент"));
													КонецЕсли;
													СтрокаДереваОсобыеУсловияТруда = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобыеУсловияТруда");
													Если СтрокаДереваОсобыеУсловияТруда <> Неопределено Тогда
														ОбластьСтрокаСтажа.Параметры.ОсобыеУсловияТрудаКод 			= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ОснованиеОУТ");
														ОбластьСтрокаСтажа.Параметры.КодПозицииСписка 				= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ПозицияСписка");
													КонецЕсли;	
													СтрокаДереваИсчисляемыйСтаж = СтрокаДереваОсобенностиУчета.Строки.Найти("ИсчисляемыйСтаж");
													Если СтрокаДереваИсчисляемыйСтаж <> Неопределено Тогда
														ОбластьСтрокаСтажа.Параметры.ОснованиеИсчисляемогоСтажаКод 	= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИсчисляемыйСтаж, "ОснованиеИС");
														ОбластьСтрокаСтажа.Параметры.ИсчисляемыйСтажДопСведения 	= XMLСобратьСтрокуИсчисляемогоСтажа(СтрокаДереваИсчисляемыйСтаж);
													КонецЕсли;
													СтрокаДереваВыслугаЛет = СтрокаДереваОсобенностиУчета.Строки.Найти("ВыслугаЛет");
													Если СтрокаДереваВыслугаЛет <> Неопределено Тогда
														ОбластьСтрокаСтажа.Параметры.ОснованиеВыслугиЛетКод 		= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ОснованиеВЛ");
														ОбластьСтрокаСтажа.Параметры.ВыслугаЛетДопСведения 			= XMLСобратьСтрокуПенсииЗаВыслугуЛет(СтрокаДереваВыслугаЛет);
													КонецЕсли;
													
													ПрофессияДолжность = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобенностиУчета, "ПрофессияДолжность");
													
													ВысотаВрСтрокаСтажа = 3;
													Если	СтрДлина(СокрЛП(ПрофессияДолжность))	>	65	тогда
														ВысотаВрСтрокаСтажа	=	ВысотаВрСтрокаСтажа	+	1;
													КонецЕсли;
													
													//Контроль выхода за пределы листа
													Если (ВысотаТаблицы	+	ВысотаВрСтрокаСтажа)	>=	СтрокНаЛисте	тогда
														Если	КолВоЛистов	=	1	тогда
															ДокументРезультат.Область(НомерСтрокиВариантСЗВК,2).Текст	=	"Форма СЗВ-К (начало)";
															ДокументРезультат.Область(НомерСтрокиВариантСЗВК,13).Текст	=	"Лист 1";
														КонецЕсли;
														КолВоЛистов	= КолВоЛистов +	1;
														ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
														// перед тем как выводить стаж,выведем шапку СЗВ-К и шапку стажа
														ОбластьШапка2.Параметры.НомерЛиста = "Лист " + КолВоЛистов;
														ДокументРезультат.Вывести(ОбластьШапка2);
														НомерСтрокиВариантСЗВК = ДокументРезультат.ВысотаТаблицы;
														ДокументРезультат.Вывести(ОбластьШапка3);
														ДокументРезультат.Вывести(ОбластьШапкаПериоды);
														ДокументРезультат.Вывести(ОбластьШапкаДЕЯТ);
														ВысотаТаблицы =	4.5 + ВысотаШапкаДЕЯТ;
													КонецЕсли;	
													
													ДокументРезультат.Вывести(ОбластьСтрокаСтажа);
													ВысотаТаблицы	=	ВысотаТаблицы	+	ВысотаВрСтрокаСтажа;
													
												КонецЕсли;
											КонецЦикла;
										КонецЕсли;
										
									КонецЦикла;
									
								КонецЕсли;
							КонецЦикла;
							
							СтруктураПоискаИтоговогоСтажа.Вставить("ФИОФизЛица",ФИОФизЛица);
							
							СтруктураПоискаИтоговогостажа.Вставить("ВидСтажа", Перечисления.ВидыТрудовогоСтажа.ТерриториальныеУсловия);
							СписокСтрокСтажа = ТаблицаИтоговогоСтажа.НайтиСтроки(СтруктураПоискаИтоговогоСтажа);
							ЧислоЗаписейПоТерриториальнымУсловиям = СписокСтрокСтажа.Количество();
							СтруктураПоискаИтоговогостажа.Вставить("ВидСтажа", Перечисления.ВидыТрудовогоСтажа.ОсобыеУсловияТруда);
							СписокСтрокСтажа = ТаблицаИтоговогоСтажа.НайтиСтроки(СтруктураПоискаИтоговогоСтажа);
							ЧислоЗаписейПоОсобымУсловиямТруда = СписокСтрокСтажа.Количество();
							СтруктураПоискаИтоговогостажа.Вставить("ВидСтажа", Перечисления.ВидыТрудовогоСтажа.ВыслугаЛет);
							СписокСтрокСтажа = ТаблицаИтоговогоСтажа.НайтиСтроки(СтруктураПоискаИтоговогоСтажа);
							ЧислоЗаписейПоВыслугеЛет = СписокСтрокСтажа.Количество();
							
							// Вывод подвала с итоговыми записями		
							ВысотаПодвала	= 19 + Макс(ЧислоЗаписейПоТерриториальнымУсловиям-1,0) + Макс(ЧислоЗаписейПоОсобымУсловиямТруда-1,0) + Макс(ЧислоЗаписейПоВыслугеЛет-1,0);
							
							//Контроль выхода за пределы листа
							Если	(ВысотаТаблицы	+	ВысотаПодвала)	>=	СтрокНаЛисте	тогда
								Если	КолВоЛистов	=	1	тогда
									ДокументРезультат.Область(НомерСтрокиВариантСЗВК,2).Текст	=	"Форма СЗВ-К (начало)";
									ДокументРезультат.Область(НомерСтрокиВариантСЗВК,13).Текст	=	"Лист 1";
								КонецЕсли;
								КолВоЛистов	= КолВоЛистов +	1;
								ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
								// перед тем как выводить шапку стажа, выведем шапку СЗВ-К и номер листа
								ОбластьШапка2.Параметры.НомерЛиста = "Лист " + КолВоЛистов;
								ДокументРезультат.Вывести(ОбластьШапка2);
								НомерСтрокиВариантСЗВК = ДокументРезультат.ВысотаТаблицы;
								ДокументРезультат.Вывести(ОбластьШапка3);
								ВысотаТаблицы =	3.5;
							КонецЕсли;
							
							Если КолВоЛистов <> 1 тогда
								ДокументРезультат.Область(НомерСтрокиВариантСЗВК,2).Текст = "Форма СЗВ-К (окончание)";//подвал - последний лист
							КонецЕсли;
							
							СтруктураПоискаИтоговогоСтажа.Вставить("ВидСтажа", Перечисления.ВидыТрудовогоСтажа.ОбщийТрудовойСтаж);
							СписокСтрокСтажа =  ТаблицаИтоговогоСтажа.НайтиСтроки(СтруктураПоискаИтоговогоСтажа);
							Если СписокСтрокСтажа.Количество() > 0 Тогда
								
								//Общий трудовой стаж
								ОбластьШапкаИтогов.Параметры.Лет = СписокСтрокСтажа[0].Лет;
								ОбластьШапкаИтогов.Параметры.Месяцев = СписокСтрокСтажа[0].Месяцев;
								ОбластьШапкаИтогов.Параметры.Дней = СписокСтрокСтажа[0].Дней;
								ДокументРезультат.Вывести(ОбластьШапкаИтогов);	
								
							КонецЕсли;
							
							//////////////////////////////////////////				
							
							//Вывод записей ТЕРР
							СтруктураПоискаИтоговогостажа.Вставить("ВидСтажа", Перечисления.ВидыТрудовогоСтажа.ТерриториальныеУсловия);
							СписокСтрокСтажа = ТаблицаИтоговогоСтажа.НайтиСтроки(СтруктураПоискаИтоговогоСтажа);
							Если СписокСтрокСтажа.Количество() = 0 тогда
								ОбластьСтрокаТЕРР.Параметры.КодСтажа = "";
								ОбластьСтрокаТЕРР.Параметры.Лет = 0;
								ОбластьСтрокаТЕРР.Параметры.Месяцев = 0;
								ОбластьСтрокаТЕРР.Параметры.Дней = 0;
								ДокументРезультат.Вывести(ОбластьСтрокаТЕРР);
							КонецЕсли;	
							
							ЭтоПерваяЗапись = Истина;
							Для Каждого СтрокаСтрокСтажа Из СписокСтрокСтажа цикл
								
								//Прочитаем запись ТЕРР
								Если ЭтоПерваяЗапись Тогда
									ОбластьТЕРР = ОбластьСтрокаТЕРР;
									ЭтоПерваяЗапись = Ложь;
								Иначе	
									ОбластьТЕРР = ОбластьСтрокаТЕРР2;
								КонецЕсли;	 
								
								ОбластьТЕРР.Параметры.КодСтажа = СтрокаСтрокСтажа.КодСтажаКод;
								ОбластьТЕРР.Параметры.Лет = СтрокаСтрокСтажа.Лет;
								ОбластьТЕРР.Параметры.Месяцев = СтрокаСтрокСтажа.Месяцев;
								ОбластьТЕРР.Параметры.Дней = СтрокаСтрокСтажа.Дней;
								ДокументРезультат.Вывести(ОбластьТЕРР);
							КонецЦикла;//Цикл по записям ТЕРР	
							
							//Вывод записей ОСОБ
							СтруктураПоискаИтоговогостажа.Вставить("ВидСтажа", Перечисления.ВидыТрудовогоСтажа.ОсобыеУсловияТруда);
							СписокСтрокСтажа = ТаблицаИтоговогоСтажа.НайтиСтроки(СтруктураПоискаИтоговогоСтажа);
							Если СписокСтрокСтажа.Количество() = 0 тогда
								ОбластьСтрокаОСОБ.Параметры.КодСтажа = "";
								ОбластьСтрокаОСОБ.Параметры.Лет = 0;
								ОбластьСтрокаОСОБ.Параметры.Месяцев = 0;
								ОбластьСтрокаОСОБ.Параметры.Дней = 0;
								ДокументРезультат.Вывести(ОбластьСтрокаОСОБ);
							КонецЕсли;	
							
							ЭтоПерваяЗапись = Истина;
							Для Каждого СтрокаСтрокСтажа Из СписокСтрокСтажа цикл
								
								//Прочитаем запись ОСОБ
								
								Если ЭтоПерваяЗапись тогда
									ОбластьОСОБ = ОбластьСтрокаОСОБ;
									ЭтоПерваяЗапись = Ложь;
								Иначе	
									ОбластьОСОБ = ОбластьСтрокаОСОБ2;
								КонецЕсли;	 
								
								ОбластьОСОБ.Параметры.КодСтажа = СтрокаСтрокСтажа.КодСтажаКод;
								ОбластьОСОБ.Параметры.Лет = СтрокаСтрокСтажа.Лет;
								ОбластьОСОБ.Параметры.Месяцев = СтрокаСтрокСтажа.Месяцев;
								ОбластьОСОБ.Параметры.Дней = СтрокаСтрокСтажа.Дней;
								ДокументРезультат.Вывести(ОбластьОСОБ);
							КонецЦикла;//Цикл по записям ОСОБ	
							
							//Вывод записей ВЫСЛ
							СтруктураПоискаИтоговогостажа.Вставить("ВидСтажа", Перечисления.ВидыТрудовогоСтажа.ВыслугаЛет);
							СписокСтрокСтажа = ТаблицаИтоговогоСтажа.НайтиСтроки(СтруктураПоискаИтоговогоСтажа);
							Если СписокСтрокСтажа.Количество() = 0 тогда
								ОбластьСтрокаВЫСЛ.Параметры.КодСтажа = "";
								ОбластьСтрокаВЫСЛ.Параметры.Лет = 0;
								ОбластьСтрокаВЫСЛ.Параметры.Месяцев = 0;
								ОбластьСтрокаВЫСЛ.Параметры.Дней = 0;
								ДокументРезультат.Вывести(ОбластьСтрокаВЫСЛ);
							КонецЕсли;	
							
							ЭтоПерваяЗапись = Истина;
							Для Каждого СтрокаСтрокСтажа Из СписокСтрокСтажа цикл
								
								//Прочитаем запись ВЫСЛ
								
								Если ЭтоПерваяЗапись тогда
									ОбластьВЫСЛ = ОбластьСтрокаВЫСЛ;
									ЭтоПерваяЗапись = Ложь;
								Иначе	
									ОбластьВЫСЛ = ОбластьСтрокаВЫСЛ2;
								КонецЕсли;	 
								
								ОбластьВЫСЛ.Параметры.КодСтажа = СтрокаСтрокСтажа.КодСтажаКод;
								ОбластьВЫСЛ.Параметры.Лет = СтрокаСтрокСтажа.Лет;
								ОбластьВЫСЛ.Параметры.Месяцев = СтрокаСтрокСтажа.Месяцев;
								ОбластьВЫСЛ.Параметры.Дней = СтрокаСтрокСтажа.Дней;
								ДокументРезультат.Вывести(ОбластьВЫСЛ);
							КонецЦикла;//Цикл по записям ОСОБ	
							
						КонецЕсли;
						
						//Выводим подвал
						ОбластьПодвал.Параметры.ТекстНаЛистах = "Сведения представлены на "+ КолВоЛистов+" "+ОбщегоНазначенияЗК.ФормаМножественногоЧисла("листе","листах","листах", КолВоЛистов);
						ДокументРезультат.Вывести(ОбластьПодвал);
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДокументРезультат.Автомасштаб = Истина;
			УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат,1,Ложь,"Сведения о трудовом стаже (форма СЗВ-К)");
			
			СтрокаДереваОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ");
			Если СтрокаДереваОпись <> Неопределено Тогда
				//Печать описи документов
				ДокументОписи = Новый ТабличныйДокумент;
				ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК_АДВ_6";
				ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация,Дата,Ответственный.ФизЛицо);
				ИнформацияОПачке = Новый Структура;
				ИнформацияОПачке.Вставить("ИнформацияОРаботодателе", Организация);
				ИнформацияОПачке.Вставить("ТипДокумента", "КОНВ");
				СтрокаДереваСоставДокументов = СтрокаДереваОпись.Строки.Найти("СоставДокументов");
				Если СтрокаДереваСоставДокументов <> Неопределено Тогда
					СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов");
					Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
						ИнформацияОПачке.Вставить("ДокументовВПачке",ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
					КонецЕсли;
				КонецЕсли;
				
				СтрокаДереваНомерПачки = СтрокаДереваОпись.Строки.Найти("НомерПачки");
				Если СтрокаДереваНомерПачки  <> Неопределено Тогда
					СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной");
					Если СтрокаДереваОсновной <> Неопределено Тогда
						ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной"));
					Иначе
						ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "ПоПодразделению"));
					КонецЕсли;
				КонецЕсли;
				ИнформацияОПачке.Вставить("ДатаСоставленияОписи",ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОпись, "ДатаСоставления"),Ложь));
				
				ПроцедурыПерсонифицированногоУчета.ВывестиОписьАДВ6(ДокументОписи, ИнформацияОПачке, ОтветственныеЛица, , "ФормаАДВ_6_1_2017");
				Возврат УниверсальныеМеханизмы.НапечататьДокумент(ДокументОписи,1,Ложь,"Опись документов АДВ-6");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // Печать

#КонецЕсли

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	//Проверка корректности заполнения документа
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	КоличествоДокументов = ВыборкаПоШапкеДокумента.Количество();
	
	ПроверитьЗаполнениеДокумента(ВыборкаПоШапкеДокумента,Отказ, Заголовок);
	Если Отказ тогда
		Возврат "";
	КонецЕсли;
	
	//Получим массив ФизЛиц документа 
	Таблица = РаботникиОрганизации.Выгрузить();
	Таблица.Свернуть("ФизЛицо");
	МассивФизЛиц = Таблица.ВыгрузитьКолонку("ФизЛицо");
	
	//Выполним проверку записей стажа и получим результат запроса к самим записям
	РезультатЗапросаПоЗаписямСтажа = "";
	Если НЕ ПроцедурыПерсонифицированногоУчета.СЗВК_ПроверитьНаборЗаписейОСтаже(Ссылка,МассивФизЛиц, Дата, РезультатЗапросаПоЗаписямСтажа, ВыборкаПоШапкеДокумента) тогда
		Отказ = Истина;
		Возврат "";
	КонецЕсли;
	
	//Выполним проверку сведений о стаже и получим результат запроса к самим сведениям
	РезультатЗапросаПоИтоговомуСтажу = "";
	Если НЕ ПроцедурыПерсонифицированногоУчета.СЗВК_ПроверитьНаборСведенийДляОценкиПенсионныхПрав(Ссылка,МассивФизЛиц, РезультатЗапросаПоИтоговомуСтажу) тогда
		Отказ = Истина;
		Возврат "";
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////
	//ФОРМИРУЕМ ФАЙЛ СВЕДЕНИЙ
	
	//Формируем заголовок выходного файла
	ДатаЗаполнения 			= ВыборкаПоШапкеДокумента.Дата;
	
	Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
		// Версия 4.0
		
		ТекстФайла	=	"";
		НомерДокументаВПачке = 0;
		
		
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьЗаголовок();
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьОРаботодателе(ВыборкаПоШапкеДокумента.Организация, ВыборкаПоШапкеДокумента.Дата, Отказ);
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьОПачке(НомерПачки,ДатаЗаполнения,ВыборкаПоШапкеДокумента.ТипСведений,"",Год(ДатаЗаполнения));
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьОТипеДокумента("КОНВ",КоличествоДокументов);
		Если Отказ тогда
			Возврат "";
		КонецЕсли;
		
		//Получаем форматы необходимых записей
		ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
		ФорматЗаписиКОНВ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("КОНВ",ДокументФорматЗаписей);
		ФорматЗаписиДЕЯТ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ДЕЯТ",ДокументФорматЗаписей);
		ФорматЗаписиПСТЖ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ПСТЖ",ДокументФорматЗаписей);
		ФорматЗаписиПЛГТ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ПЛГТ",ДокументФорматЗаписей);
		ФорматЗаписиТЕРР = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ТЕРР",ДокументФорматЗаписей);
		ФорматЗаписиОСОБ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ОСОБ",ДокументФорматЗаписей);
		ФорматЗаписиВЫСЛ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ВЫСЛ",ДокументФорматЗаписей);
		
		ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоЗаписямСтажа.Выбрать();
		
		Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			
			НомерДокументаВПачке = НомерДокументаВПачке + 1;
			
			//Инициалы должны быть указаны
			Фамилия = ВыборкаПоРаботникиОрганизации.Фамилия;
			Имя = ВыборкаПоРаботникиОрганизации.Имя;
			Отчество = ВыборкаПоРаботникиОрганизации.Отчество;
			Если "" + Фамилия + Имя + Отчество = ""  тогда
				ОбщегоНазначенияЗК.ФамилияИнициалыФизЛица(ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование,Фамилия,Имя,Отчество);
			КонецЕсли;
			
			//Проверим на наличие необходимых данных
			ЕстьОшибкиВДанныхФизЛица = Ложь;
			ПроверитьДанныеФизлица(ВыборкаПоРаботникиОрганизации, ВыборкаПоШапкеДокумента, Фамилия, Имя, ЕстьОшибкиВДанныхФизЛица, Заголовок);
			Если ЕстьОшибкиВДанныхФизЛица Тогда
				Отказ = Истина;
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаПоРаботникиОрганизации.НомерПериодаТрудовойДеятельности = NULL тогда
				СтрОшибка = "Строка №"+ВыборкаПоРаботникиОрганизации.НомерСтроки+": Сотрудник "+ВыборкаПоРаботникиОрганизации.ФизЛицо+ " не имеет записей о стаже!";
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрОшибка, Отказ, Заголовок);
				Продолжить;
			КонецЕсли;
			
			//Берем запись КОНВ с пустыми полями
			ЗаписьКОНВ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиКОНВ);
			ЗаписьКОНВ.ТипЗаписи = "КОНВ";
			ЗаписьКОНВ.НомерДокументаВПачке = НомерДокументаВПачке;
			ЗаписьКОНВ.ТипФормы = ВыборкаПоШапкеДокумента.ТипСведений;
			ЗаписьКОНВ.ДатаЗаполнения = ВыборкаПоШапкеДокумента.Дата;
			
			//Данные по работнику ложим в запись КОНВ
			ЗаписьКОНВ.СтраховойНомер = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
			
			ЗаписьКОНВ.Фамилия = Фамилия;
			ЗаписьКОНВ.Имя = Имя;
			ЗаписьКОНВ.Отчество = Отчество;
			
			ЗаписьКОНВ.ТипДатыРождения = "СТАНДАРТ";
			ЗаписьКОНВ.СтандартнаяДатаРождения = ВыборкаПоРаботникиОрганизации.ДатаРождения;
			ЗаписьКОНВ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияНа_31_12_2001Код;
			ЗаписьКОНВ.РайонныйКоэффициент = ВыборкаПоРаботникиОрганизации.РайонныйКоэффициентНа_31_12_2001;
			
			//Переменные для хранения строк файла сведений по итогам стажа: записи типа  ТЕРР, ОСОБ, ВЫСЛ
			СтрокиЗаписейТЕРР = "";
			СтрокиЗаписейОСОБ = "";
			СтрокиЗаписейВЫСЛ = "";
			
			ВыборкаПоИтоговомуСтажу = РезультатЗапросаПоИтоговомуСтажу.Выбрать();
			
			//Из запроса по итогам стажа возьмем данные об общем стаже
			СтруктураПоискаИтоговСтажа = Новый Структура("НомерСтроки");
			СтруктураПоискаИтоговСтажа.НомерСтроки = ВыборкаПоРаботникиОрганизации.НомерСтроки;
			
			НомерЗаписиТЕРР = 0;
			НомерЗаписиОСОБ = 0;
			НомерЗаписиВЫСЛ = 0;
			
			Пока ВыборкаПоИтоговомуСтажу.НайтиСледующий(СтруктураПоискаИтоговСтажа) цикл
				
				Если ВыборкаПоИтоговомуСтажу.ВидСтажа = NULL тогда
					СтрОшибка = "Строка №"+ВыборкаПоИтоговомуСтажу.НомерСтроки + ": Сотрудник " + ВыборкаПоИтоговомуСтажу.ФизЛицо+ " не имеет сведений для оценки пенсионных прав!";
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрОшибка, Отказ, Заголовок);
					Прервать;
				КонецЕсли;	 
				
				Если ВыборкаПоИтоговомуСтажу.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОбщийТрудовойСтаж тогда 
					
					ЗаписьКОНВ.ОбщийСтажЛет = ВыборкаПоИтоговомуСтажу.Лет;
					ЗаписьКОНВ.ОбщийСтажМесяцев = ВыборкаПоИтоговомуСтажу.Месяцев;
					ЗаписьКОНВ.ОбщийСтажДней = ВыборкаПоИтоговомуСтажу.Дней;
					
				ИначеЕсли ВыборкаПоИтоговомуСтажу.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ТерриториальныеУсловия тогда 
					НомерЗаписиТЕРР = НомерЗаписиТЕРР + 1;
					
					//Формируем запись сведений по территориальным условиям
					ЗаписьТЕРР = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиТЕРР);
					ЗаписьТЕРР.ТипЗаписи = "ТЕРР";
					ЗаписьТЕРР.НомерЗаписи = НомерЗаписиТЕРР;
					ЗаписьТЕРР.ТерриториальныеУсловияКод = ВыборкаПоИтоговомуСтажу.КодСтажа.Код;
					ЗаписьТЕРР.ТерриториальныеУсловияЛет = ВыборкаПоИтоговомуСтажу.Лет;
					ЗаписьТЕРР.ТерриториальныеУсловияМесяцев = ВыборкаПоИтоговомуСтажу.Месяцев;
					ЗаписьТЕРР.ТерриториальныеУсловияДней = ВыборкаПоИтоговомуСтажу.Дней;
					
					СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьТЕРР,ФорматЗаписиТЕРР);
					СтрокиЗаписейТЕРР = СтрокиЗаписейТЕРР + СтрокавФайл + Символы.ПС;
					
				ИначеЕсли ВыборкаПоИтоговомуСтажу.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОсобыеУсловияТруда тогда 
					НомерЗаписиОСОБ = НомерЗаписиОСОБ + 1;
					
					//Формируем запись сведений по территориальным условиям
					ЗаписьОСОБ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиОСОБ);
					ЗаписьОСОБ.ТипЗаписи = "ОСОБ";
					ЗаписьОСОБ.НомерЗаписи = НомерЗаписиОСОБ;
					ЗаписьОСОБ.ОсобыеУсловияТрудаКод = ВыборкаПоИтоговомуСтажу.КодСтажа.Код;
					ЗаписьОСОБ.ОсобыеУсловияТрудаЛет = ВыборкаПоИтоговомуСтажу.Лет;
					ЗаписьОСОБ.ОсобыеУсловияТрудаМесяцев = ВыборкаПоИтоговомуСтажу.Месяцев;
					ЗаписьОСОБ.ОсобыеУсловияТрудаДней = ВыборкаПоИтоговомуСтажу.Дней;
					
					СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьОСОБ,ФорматЗаписиОСОБ);
					СтрокиЗаписейОСОБ = СтрокиЗаписейОСОБ + СтрокавФайл + Символы.ПС;
					
				ИначеЕсли ВыборкаПоИтоговомуСтажу.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ВыслугаЛет тогда 
					НомерЗаписиВЫСЛ = НомерЗаписиВЫСЛ + 1;
					
					//Формируем запись сведений по территориальным условиям
					ЗаписьВЫСЛ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиВЫСЛ);
					ЗаписьВЫСЛ.ТипЗаписи = "ВЫСЛ";
					ЗаписьВЫСЛ.НомерЗаписи = НомерЗаписиВЫСЛ;
					ЗаписьВЫСЛ.ВыслугаЛетОснованиеКод = ВыборкаПоИтоговомуСтажу.КодСтажа.Код;
					ЗаписьВЫСЛ.ВыслугаЛетЛет = ВыборкаПоИтоговомуСтажу.Лет;
					ЗаписьВЫСЛ.ВыслугаЛетМесяцев = ВыборкаПоИтоговомуСтажу.Месяцев;
					ЗаписьВЫСЛ.ВыслугаЛетДней = ВыборкаПоИтоговомуСтажу.Дней;
					
					СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьВЫСЛ,ФорматЗаписиВЫСЛ);
					СтрокиЗаписейВЫСЛ = СтрокиЗаписейВЫСЛ + СтрокавФайл + Символы.ПС;
				КонецЕсли;	
			КонецЦикла;
			ЗаписьКОНВ.ЧислоЗаписейПоТерриториальнымУсловиям = НомерЗаписиТЕРР;
			ЗаписьКОНВ.ЧислоЗаписейПоОсобымУсловиямТруда = НомерЗаписиОСОБ;
			ЗаписьКОНВ.ЧислоЗаписейПоВыслугеЛет = НомерЗаписиВЫСЛ;
			
			//Переменная для хранения строк файла сведений по текущему работнику: записи типа ДЕЯТ, ПСТЖ, ПЛГТ 
			СтрокиРаботникаОрганизации = "";
			
			//Перебор периодов деятельности
			ЧислоЗаписейОПериодахДеятельности = 0;
			Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерПериодаТрудовойДеятельности") цикл
				
				ЧислоЗаписейОПериодахДеятельности = ЧислоЗаписейОПериодахДеятельности + 1;
				
				//Берем запись о периоде деятельности с пустыми полями
				ЗаписьДЕЯТ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиДЕЯТ);
				ЗаписьДЕЯТ.ТипЗаписи = "ДЕЯТ";
				ЗаписьДЕЯТ.НомерЗаписи = ВыборкаПоРаботникиОрганизации.НомерПериодаТрудовойДеятельности;
				ЗаписьДЕЯТ.НаименованиеОрганизации = СтрЗаменить(ВыборкаПоРаботникиОрганизации.ОрганизацияНаименование,"""",""); 
				ЗаписьДЕЯТ.ВидДеятельностиКод = ВыборкаПоРаботникиОрганизации.ВидДеятельностиКод;
				
				//Переменная для хранения строк файла сведений по текущему периоду деятельности работника
				СтрокиСтажПоПериоду = "";
				
				//Перебор основных записей о стаже
				ЧислоЗаписейОСтаже = 0; 
				Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") цикл
					
					ЧислоЗаписейОСтаже = ЧислоЗаписейОСтаже + 1; 
					
					//Берем пустую запись "Основная запись о стаже"
					ЗаписьПСТЖ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиПСТЖ);
					ЗаписьПСТЖ.ТипЗаписи = "ПСТЖ";
					ЗаписьПСТЖ.НомерПериода = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
					ЗаписьПСТЖ.ДатаНачалаПериода = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
					ЗаписьПСТЖ.ДатаОкончанияПериода = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
					ЗаписьПСТЖ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
					ЗаписьПСТЖ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
					ЗаписьПСТЖ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
					ЗаписьПСТЖ.НулевойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.НулевойПараметрИсчисляемогоСтажа;
					ЗаписьПСТЖ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
					ЗаписьПСТЖ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
					ЗаписьПСТЖ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
					ЗаписьПСТЖ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
					ЗаписьПСТЖ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
					ЗаписьПСТЖ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
					ЗаписьПСТЖ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
					ЗаписьПСТЖ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
					ЗаписьПСТЖ.РайонныйКоэффициент = ВыборкаПоРаботникиОрганизации.РайонныйКоэффициент;
					ЗаписьПСТЖ.Должность = ВыборкаПоРаботникиОрганизации.Должность;
					
					//Переменная для хранения строк с типом записей ПЛГТ
					СтрокиЛьготногоСтажа = "";
					
					//Перебор дополнительных записей о стаже
					ЧислоДополнительныхЗаписей = 0;
					Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") цикл
						
						//Проверим на непустую выборку
						Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи = NULL тогда
							СтрокаНачалаСообщенияОбОшибке = "Строка № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) +""" : Сотрудник "+ ВыборкаПоРаботникиОрганизации.ФизЛицо;
							ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + " - Не имеет сведений о стаже!", Отказ);
							Возврат "";
						КонецЕсли;	
						
						//В дополнительной записи с номером 0 находится информация об основной записи
						Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи <> 0 тогда
							
							ЧислоДополнительныхЗаписей = ЧислоДополнительныхЗаписей + 1;
							
							//Берем пустую запись "Запись о льготном стаже"
							ЗаписьПЛГТ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиПЛГТ);
							ЗаписьПЛГТ.ТипЗаписи = "ПЛГТ";
							ЗаписьПЛГТ.НомерПериода = ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи;
							ЗаписьПЛГТ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
							ЗаписьПЛГТ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
							ЗаписьПЛГТ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
							ЗаписьПЛГТ.НулевойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.НулевойПараметрИсчисляемогоСтажа;
							ЗаписьПЛГТ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
							ЗаписьПЛГТ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
							ЗаписьПЛГТ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
							ЗаписьПЛГТ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
							ЗаписьПЛГТ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
							ЗаписьПЛГТ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
							ЗаписьПЛГТ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
							ЗаписьПЛГТ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
							ЗаписьПЛГТ.РайонныйКоэффициент = ВыборкаПоРаботникиОрганизации.РайонныйКоэффициент;
							ЗаписьПЛГТ.Должность = ВыборкаПоРаботникиОрганизации.Должность;
							
							//Сохраним запись ПЛГТ
							СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьПЛГТ,ФорматЗаписиПЛГТ);
							СтрокиЛьготногоСтажа = СтрокиЛьготногоСтажа + СтрокавФайл + Символы.ПС;
						КонецЕсли;
						
					КонецЦикла;//Перебор дополнительных записей о стаже	
					
					ЗаписьПСТЖ.ЧислоДополнительныхЗаписей = ЧислоДополнительныхЗаписей;
					
					//Сохраним запись ПСТЖ
					СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьПСТЖ,ФорматЗаписиПСТЖ);
					СтрокиСтажПоПериоду  = СтрокиСтажПоПериоду + СтрокавФайл + Символы.ПС;
					
					//Добавим записи ПЛГТ
					СтрокиСтажПоПериоду  = СтрокиСтажПоПериоду + ВРЕГ(СтрокиЛьготногоСтажа);
					
				КонецЦикла;//Перебор основных записей о стаже	
				
				ЗаписьДЕЯТ.ЧислоЗаписейОСтаже = ЧислоЗаписейОСтаже;
				
				//Сохраняем очередную запись ДЕЯТ по текущему работнику 
				СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьДЕЯТ,ФорматЗаписиДЕЯТ);
				СтрокиРаботникаОрганизации = СтрокиРаботникаОрганизации + СтрокавФайл + Символы.ПС;
				
				//Сохраняем записи ПСТЖ, ПЛГТ, относящиеся к очередному периоду деяетльности
				СтрокиРаботникаОрганизации	=	СтрокиРаботникаОрганизации	+ СтрокиСтажПоПериоду;
				
			КонецЦикла;//Перебор периодов деятельности
			
			ЗаписьКОНВ.ЧислоЗаписейОПериодахДеятельности = ЧислоЗаписейОПериодахДеятельности;
			
			//Добавляем в файл запись КОНВ по текущему работнику 
			СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьКОНВ,ФорматЗаписиКОНВ);
			ТекстФайла	=	ТекстФайла	+	ВРег(СтрокавФайл) + Символы.ПС;
			
			//Добавляем в файл записи ДЕЯТ,ПСТЖ,ПЛГТ,ТЕРР,ОСОБ,ВЫСЛ
			СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьКОНВ,ФорматЗаписиКОНВ);
			ТекстФайла	=	ТекстФайла	+	ВРег(СтрокиРаботникаОрганизации) + ВРег(СтрокиЗаписейТЕРР)+ ВРег(СтрокиЗаписейОСОБ)+ ВРег(СтрокиЗаписейВЫСЛ);
		КонецЦикла; 
		
	ИначеЕсли ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда
		// Версия 7.0
		
		// Загружаем формат файла сведений
		МакетФормата = ПолучитьОбщийМакет("ФорматПФР70");
		
		НомерДокументаВПачке = 1;
		// Создаем начальное дерево
		ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
		
		Атрибуты = Новый Соответствие;
		Атрибуты.Вставить("xmlns", "http://schema.pfr.ru");
		УзелПФР = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", Атрибуты);
		
		ПроцедурыПерсонифицированногоУчета.ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Ссылка, ВыборкаПоШапкеДокумента.Год, ВыборкаПоШапкеДокумента));
		
		// Добавляем реквизит ПачкаВходящихДокументов
		УзелПачкаВходящихДокументов = ПроцедурыПерсонифицированногоУчета.ЗаполнитьНаборЗаписейВходящаяОпись(УзелПФР, МакетФормата, "КОНВЕРТАЦИЯ", ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, НомерДокументаВПачке);
			
		ФорматИССЗВК = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "КОНВЕРТАЦИЯ");
		
		ФорматИССЗВК.СтажДоРегистрации.Значение.Удалить("ПериодДеятельности");
		
		ФорматПериодДеятельности = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ПериодДеятельности");
		ФорматПериодРаботыСЗВК = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ПериодРаботыСЗВК");
		ФорматОсобенностиУчетаСЗВК = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ОсобенностиУчетаСЗВК");
		ВыборкаПоРаботникиОрганизации = РезультатЗапросаПоЗаписямСтажа.Выбрать();
		
		Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			
			НомерДокументаВПачке = НомерДокументаВПачке + 1;
			
			
			НаборЗаписейСЗВК = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматИССЗВК);
			УзелКонвертация = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, "КОНВЕРТАЦИЯ", "");
			
			
			
			НаборЗаписейСЗВК.НомерВПачке.Значение = НомерДокументаВПачке;
			НаборЗаписейСЗВК.ВидФормы.Значение = "СЗВ-К";
			Если ВыборкаПоШапкеДокумента.ТипСведений = "ОТМН" Тогда
				НаборЗаписейСЗВК.ТипСведений.Значение = "ОТМЕНЯЮЩАЯ";
			ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = "КОРР" Тогда	
				НаборЗаписейСЗВК.ТипСведений.Значение = "КОРРЕКТИРУЮЩАЯ";
			Иначе
				НаборЗаписейСЗВК.ТипСведений.Значение = "ИСХОДНАЯ";
			КонецЕсли;
			НаборЗаписейСЗВК.СтраховойНомер.Значение = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияНа_31_12_2001Код) Тогда
				НаборЗаписейСЗВК.ТерриториальныеУсловияНа31_12_2001.Значение.ОснованиеТУ = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияНа_31_12_2001Код;
				НаборЗаписейСЗВК.ТерриториальныеУсловияНа31_12_2001.Значение.Коэффициент = ВыборкаПоРаботникиОрганизации.РайонныйКоэффициентНа_31_12_2001;
			Иначе
				НаборЗаписейСЗВК.Удалить("ТерриториальныеУсловияНа31_12_2001");
			КонецЕсли;
			НаборЗаписейСЗВК.ДатаЗаполнения.Значение = ВыборкаПоШапкеДокумента.Дата;
			
			//Инициалы должны быть указаны
			Фамилия = СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия);
			Имя = СокрЛП(ВыборкаПоРаботникиОрганизации.Имя);
			Отчество = СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество);
			Если "" + Фамилия + Имя + Отчество = ""  Тогда
				ОбщегоНазначенияЗК.ФамилияИнициалыФизЛица(ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование,Фамилия,Имя,Отчество);
			КонецЕсли;	 
			
			ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Фамилия, Имя, Отказ ,Заголовок);
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписейФИО = НаборЗаписейСЗВК.ФИО.Значение;
			НаборЗаписейФИО.Фамилия = ВРег(Фамилия);
			ПроцедурыПерсонифицированногоУчета.ЗаменитьБуквуЁ(НаборЗаписейФИО.Фамилия, "Фамилия");
			НаборЗаписейФИО.Имя = ВРег(Имя);
			ПроцедурыПерсонифицированногоУчета.ЗаменитьБуквуЁ(НаборЗаписейФИО.Имя, "Имя");
			НаборЗаписейФИО.Отчество = ВРег(Отчество);
			ПроцедурыПерсонифицированногоУчета.ЗаменитьБуквуЁ(НаборЗаписейФИО.Отчество, "Отчество");
			
			НаборЗаписейСЗВК.ДатаРождения.Значение = ВыборкаПоРаботникиОрганизации.ДатаРождения;
			
			
			// Организация, представившая СЗВ-К
			НаборЗаписейСЗВК.Удалить("ОрганизацияПредставившаяСЗВ_К");
			НаборЗаписейСЗВК.Удалить("ВсеОсобыеЗаслуги");	
			НаборЗаписейСЗВК.Удалить("ФИОоценщика");
			НаборЗаписейСЗВК.Удалить("ТабельныйНомерОценщика");
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелКонвертация, НаборЗаписейСЗВК);
			
			НаборСтажДоРегистрации = УзелКонвертация.Строки.Найти("СтажДоРегистрации");
			КоличествоПериодовДеятельности = 0;
			Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерПериодаТрудовойДеятельности") цикл
				
				УзелПериодыДеятельности = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(НаборСтажДоРегистрации, "ПериодДеятельности", "");
				
				НаборЗаписейПериодДеятельности = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматПериодДеятельности);
				НаборЗаписейПериодДеятельности.Удалить("ЗаработокЗаПериод");
				НаборЗаписейПериодДеятельности.ВсеПериодыРаботы.Значение.Удалить("ПериодРаботы");
				НаборЗаписейПериодДеятельности.ВидДеятельности.Значение = СОКРЛП(ВыборкаПоРаботникиОрганизации.ВидДеятельностиКод);
				НаборЗаписейПериодДеятельности.НаименованиеОрганизации.Значение = ВРег(ВыборкаПоРаботникиОрганизации.ОрганизацияНаименование);
				
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелПериодыДеятельности, НаборЗаписейПериодДеятельности);
				
				НаборЗаписейВсеПериодыРаботы = УзелПериодыДеятельности.Строки[2].Строки;
				КоличествоПериодовРаботы = 0;
				
				Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") цикл
					
					УзелПериодРаботы = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПериодыДеятельности.Строки[2], "ПериодРаботы", "");
					
					НаборЗаписейПериодРаботыСЗВК = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматПериодРаботыСЗВК);
					
					НаборЗаписейПериодРаботыСЗВК.ДополнительныеСтроки.Значение.Удалить("ОсобенностиУчета");
					
					ОсновнаяСтрокаСЗВК = НаборЗаписейПериодРаботыСЗВК.ОсновнаяСтрока.Значение;
					ОсновнаяСтрокаСЗВК.НомерСтроки.Значение = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
					ОсновнаяСтрокаСЗВК.ДатаНачалаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
					ОсновнаяСтрокаСЗВК.ДатаКонцаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
					
					
					
					ОсобенностиУчетаСЗВК = ОсновнаяСтрокаСЗВК.ОсобенностиУчета.Значение;
					Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод) Тогда
						ОсобенностиУчетаСЗВК.ТерриториальныеУсловия.Значение.ОснованиеТУ = СокрЛП(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод);
						ОсобенностиУчетаСЗВК.ТерриториальныеУсловия.Значение.Коэффициент = ВыборкаПоРаботникиОрганизации.РайонныйКоэффициент;
					Иначе
						ОсобенностиУчетаСЗВК.Удалить("ТерриториальныеУсловия");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод) Тогда
						ОсобенностиУчетаСЗВК.ОсобыеУсловияТруда.Значение.ОснованиеОУТ = СокрЛП(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод);
						ОсобенностиУчетаСЗВК.ОсобыеУсловияТруда.Значение.ПозицияСписка = СокрЛП(ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод);
					Иначе
						ОсобенностиУчетаСЗВК.Удалить("ОсобыеУсловияТруда");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод) Тогда
						ИсчисляемыйСтажСЗВК = ОсобенностиУчетаСЗВК.ИсчисляемыйСтаж.Значение;
						ИсчисляемыйСтажСЗВК.ОснованиеИС.Значение = СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод);
					
						ИсчисляемыйСтажВыработкаКалендарнаяСЗВК = ИсчисляемыйСтажСЗВК.ВыработкаКалендарная.Значение;
						ИсчисляемыйСтажВыработкаКалендарнаяСЗВК.ВсеГоды = ВыборкаПоРаботникиОрганизации.НулевойПараметрИсчисляемогоСтажа;
						ИсчисляемыйСтажВыработкаКалендарнаяСЗВК.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
						ИсчисляемыйСтажВыработкаКалендарнаяСЗВК.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
					Иначе
						ОсобенностиУчетаСЗВК.Удалить("ИсчисляемыйСтаж");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа) Тогда
						ОсобенностиУчетаСЗВК.ДекретДети.Значение = СокрЛП(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа);
					Иначе
						ОсобенностиУчетаСЗВК.Удалить("ДекретДети");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод) Тогда
						ВыслугаЛетСЗВК = ОсобенностиУчетаСЗВК.ВыслугаЛет.Значение;
						ВыслугаЛетСЗВК.ОснованиеВЛ.Значение = СокрЛП(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод);
						ВыслугаЛетСЗВК.ВыработкаВЧасах.Значение.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
						ВыслугаЛетСЗВК.ВыработкаВЧасах.Значение.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
						ВыслугаЛетСЗВК.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
					Иначе
						ОсобенностиУчетаСЗВК.Удалить("ВыслугаЛет");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.Должность) Тогда
						ОсобенностиУчетаСЗВК.ПрофессияДолжность.Значение = СокрЛП(ВРег(ВыборкаПоРаботникиОрганизации.Должность));
					Иначе
						ОсобенностиУчетаСЗВК.Удалить("ПрофессияДолжность");
					КонецЕсли;
					
					ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелПериодРаботы, НаборЗаписейПериодРаботыСЗВК);
					
					
					КоличествоДополнительныхСтрок = 0;
					Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") цикл
						
						//В дополнительной записи с номером 0 находится информация об основной записи
						Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи <> 0 тогда
							
						КоличествоДополнительныхСтрок = КоличествоДополнительныхСтрок + 1;
						
						УзелОсобенностиУчета = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПериодРаботы.Строки[1], "ОсобенностиУчета", "");
						
						НаборЗаписейОсобенностиУчетаСЗВК = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОсобенностиУчетаСЗВК);
						НаборЗаписейОсобенностиУчетаСЗВК.ТерриториальныеУсловия.Значение.ОснованиеТУ = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
						НаборЗаписейОсобенностиУчетаСЗВК.ТерриториальныеУсловия.Значение.Коэффициент = ВыборкаПоРаботникиОрганизации.РайонныйКоэффициент;
						
						НаборЗаписейОсобенностиУчетаСЗВК.ОсобыеУсловияТруда.Значение.ОснованиеОУТ = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
						НаборЗаписейОсобенностиУчетаСЗВК.ОсобыеУсловияТруда.Значение.ПозицияСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
						
						
						
						ОсобенностиУчетаИсчисляемыйСтажСЗВК = НаборЗаписейОсобенностиУчетаСЗВК.ИсчисляемыйСтаж.Значение;
						ОсобенностиУчетаИсчисляемыйСтажСЗВК.ОснованиеИС.Значение = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
						
						ИсчисляемыйСтажВыработкаКалендарнаяСЗВК = ОсобенностиУчетаИсчисляемыйСтажСЗВК.ВыработкаКалендарная.Значение;
						ИсчисляемыйСтажВыработкаКалендарнаяСЗВК.ВсеГоды = ВыборкаПоРаботникиОрганизации.НулевойПараметрИсчисляемогоСтажа;
						ИсчисляемыйСтажВыработкаКалендарнаяСЗВК.ВсеМесяцы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
						ИсчисляемыйСтажВыработкаКалендарнаяСЗВК.ВсеДни = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
						
						НаборЗаписейОсобенностиУчетаСЗВК.ДекретДети.Значение = ВРег(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа);
						
						ВыслугаЛетСЗВК = НаборЗаписейОсобенностиУчетаСЗВК.ВыслугаЛет.Значение;
						ВыслугаЛетСЗВК.ОснованиеВЛ.Значение = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
						ВыслугаЛетСЗВК.ВыработкаВЧасах.Значение.Часы = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
						ВыслугаЛетСЗВК.ВыработкаВЧасах.Значение.Минуты = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
						ВыслугаЛетСЗВК.ДоляСтавки.Значение = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
						
						НаборЗаписейОсобенностиУчетаСЗВК.ПрофессияДолжность.Значение = ВРег(ВыборкаПоРаботникиОрганизации.Должность);
						
						ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелОсобенностиУчета, НаборЗаписейОсобенностиУчетаСЗВК);
					КонецЕсли;
					
					КонецЦикла;
				    УзелДополнительныеСтроки = УзелПериодРаботы.Строки.Найти("ДополнительныеСтроки");
					Если УзелДополнительныеСтроки.Имя = "ДополнительныеСтроки" Тогда
						Если КоличествоДополнительныхСтрок = 0 Тогда
							УзелПериодРаботы.Строки.Удалить(УзелДополнительныеСтроки);
						Иначе
							УзелКоличество = УзелДополнительныеСтроки.Строки.Найти("Количество");
							Если УзелКоличество.Имя = "Количество" Тогда
								УзелКоличество.Значение = КоличествоДополнительныхСтрок;
							КонецЕсли;
					 	КонецЕсли;
					
	
						
					КонецЕсли;
					 					
					//ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(НаборЗаписейПериодДеятельности.ВсеПериодыРаботы, НаборЗаписейПериодРаботыСЗВК);
					КоличествоПериодовРаботы = КоличествоПериодовРаботы + 1
				КонецЦикла;
				
				НаборЗаписейВсеПериодыРаботы[0].Значение = КоличествоПериодовРаботы;
				
				КоличествоПериодовДеятельности = КоличествоПериодовДеятельности + 1;
				//ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелПериодыДеятельности, НаборЗаписейПериодДеятельности);
				
			КонецЦикла;
			НаборСтажДоРегистрации.Строки[0].Значение = КоличествоПериодовДеятельности;
			
		КонецЦикла;
		
		// Преобразуем дерево в строковое описание XML
		ТекстФайла = ПроцедурыПерсонифицированногоУчета.ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
		ТекстФайла = СтрЗаменить(ТекстФайла, "ТерриториальныеУсловияНа31_12_2001", "ТерриториальныеУсловияНа31.12.2001");
		
	КонецЕсли;
	
	Возврат ТекстФайла;
КонецФункции 

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатьФайла","СЗВ-К");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	//При проведении файл формируем заново
	ТекстФайла = СформироватьВыходнойФайл(Отказ);
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл-пачка форм СЗВ-К";
	Запись.Данные = ТекстФайла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыПерсонифицированногоУчета.ПроставитьНомерПачки(ЭтотОбъект);
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
	
КонецПроцедуры

