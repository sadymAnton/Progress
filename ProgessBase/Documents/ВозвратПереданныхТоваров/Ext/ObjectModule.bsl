Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт;		// (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт;		// (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт;		// (Регл)

Перем мУчетнаяПолитика;						// (Общ)
Перем мУчетнаяПолитикаБУ;
Перем мПорядокСписанияПартий;           	// (Общ)

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	Иначе
		
		//Печать макетов из модуля менеджера объекта
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ВозвратПереданныхТоваров", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ВозвратПереданныхТоваров", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("М4", "М-4 (Приходный ордер)");
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		// Заполняем счетами учета расчетов
		// Ключ - имя реквизита, значение - имя настройки
		СтруктураСчетов = СчетаУчетаВДокументах.ЗаполнитьСтруктуруСчетовРасчетовСКонтрагентом(
			Организация, 
			Контрагент, 
			ДоговорКонтрагента, 
			Новый Структура("СчетУчетаРасчетовПоТаре",	"СчетУчетаТарыПокупателя"));
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОрдеру(ДокументОснование, ТабличнаяЧасть) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	ИмяТабличнойЧасти = "Товары";

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДокТовары.НомерСтроки) КАК НомерСтроки,
	|	ДокТовары.Номенклатура,
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоДокументу,
	|	NULL                                               КАК ЦенаВРознице, " + 
	?(ТабличнаяЧасть = Товары, "
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры, ", "") + "
	|	СУММА(ДокТовары.Количество)                        КАК КоличествоПоСерии, 
	|	МАКСИМУМ(Остатки.КоличествоОстаток)                КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары." + ИмяТабличнойЧасти + " КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура" + 
	?(ТабличнаяЧасть = Товары, "
	| И ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры", "") + " 
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура" +
	?(ТабличнаяЧасть = Товары, ",
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры", "") + "
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
		КонецЕсли;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ВозвратнаяТара.СчетУчетаБУ,
		|Товары.СчетУчетаБУ, Товары.СчетПередачиБУ";
	мСтрокаРеквизитыНалУчета = "ВозвратнаяТара.СчетУчетаНУ, Товары.СчетУчетаНУ, Товары.СчетПередачиНУ";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	
	Если ВозвратнаяТара.Количество() > 0 Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ")
			  + ", СчетУчетаРасчетовПоТаре"; 
	КонецЕсли;
	
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура выполняет проверку документа на корректность заполнения
//  Параметры:
//		Заголовок - заголовок докуумента при проведении
//		Отказ     - флаг отказа от проведения документа
//		СтруктураШапкиДокумента - структура с данными шапки документа
//
Процедура ПроверкаРеквизитов(Заголовок, Отказ, СтруктураШапкиДокумента)
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	// Создать списки реквизитов для проверки
	РеквизитыШапки   = "Организация, СкладОрдер, ВидПоступления, Контрагент, ДоговорКонтрагента";
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ОтЗаказчика Тогда
		РеквизитыШапки = РеквизитыШапки + ", Заказ";
	КонецЕсли;
	
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки);
	
	РеквизитыТабПрод = "Номенклатура, Количество, ЕдиницаИзмерения";
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ИзПереработки Тогда
		РеквизитыТабПрод = РеквизитыТабПрод + ", Качество";
	КонецЕсли;
	
	РеквизитыТабТара = "Номенклатура, Количество";
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки,   СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабПрод, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "Товары");
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабТара, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ВозвратнаяТара");
	
	// Выполнить проверку 
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,                   Новый Структура(РеквизитыШапки),   Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары",         Новый Структура(РеквизитыТабПрод), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", Новый Структура(РеквизитыТабТара), Отказ, Заголовок);
	
	// Прочие проверки
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок, "СкладОрдер");
	КонецЕсли;
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Функция возвращает структуру с данными шапки документа, дополненными
// параметрами договора, валютами взаиморасчетов и курсами валют
//
Функция ПолучитьДанныеДокумента(СтруктураШапкиДокумента)
	
	// Получим данные документа
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "Константы"           , "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "Константы"           , "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                   , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "Заказ"               , "ВидОперации"                   , "ЗаказВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"  , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке( ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда 
		// Тип значения СкладОрдер - СправочникСсылка.Склады (это обеспечивается в ПередЗаписью)
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "ВидСклада",       "ВидСклада");
	Иначе 
		// Тип значения СкладОрдер - ДокументСсылка.ПриходныйОрдерНаТовары
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "Склад.ВидСклада", "ВидСклада");
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	Возврат УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецФункции // ПолучитьДанныеДокумента()

// Процедура формирует движения по регистру "ТоварыОрганизаций"
//
Процедура ДвиженияТоварыОрганизацийРегл(СтруктураШапкиДокумента, ТаблицаПоТоварам, Заголовок, Отказ, РежимПроведения)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете
	 ИЛИ СтруктураШапкиДокумента.ВидПоступления <> Перечисления.ВидыПоступленияТоваров.НаСклад
	Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений   = Движения.ТоварыОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Организация         = Организация;
		НоваяСтрока.Номенклатура        = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры   = СтрокаТЧ.СерияНоменклатуры;
		НоваяСтрока.Количество          = СтрокаТЧ.Количество;
		
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			НоваяСтрока.Склад = Неопределено;
		Иначе
			Если ТипЗнч(СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
				НоваяСтрока.Склад = СкладОрдер;
			Иначе
				НоваяСтрока.Склад = СкладОрдер.Склад;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ИзПереработки Тогда
			НоваяСтрока.Качество               = СтрокаТЧ.Качество;
		Иначе
			НоваяСтрока.Качество               = Справочники.Качество.Новый;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияТоварыОрганизацийРегл()

// Процедура формирует движения по регистру "ЗаказыПокупателей"
//
Процедура ДвиженияЗаказыПокупателей(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	 ИЛИ НЕ ЗначениеЗаполнено(Заказ) 
	 ИЛИ ТипЗНЧ(Заказ) <> Тип("ДокументСсылка.ЗаказПоставщику")
	Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений   = Движения.ЗаказыПокупателей;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
		НоваяСтрока.ЗаказПокупателя = Заказ;
		НоваяСтрока.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВПереработку;
		
		НоваяСтрока.Количество = - СтрокаТЧ.Количество;
		НоваяСтрока.СуммаУпр= - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Сумма, ВалютаДокумента,
									СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсДокумента, 
									СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
									СтруктураШапкиДокумента.КратностьДокумента, 
									СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													 
		НоваяСтрока.СуммаВзаиморасчетов	= - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Сумма, ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
												СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, 
												КратностьВзаиморасчетов);
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьРасход();
	
КонецПроцедуры // ДвиженияТоварыНаСкладеУпр()

// Процедура формирует движения по регистру "ТоварыНаСкладе"
//
Процедура ДвиженияТоварыНаСкладеУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Заголовок, Отказ, РежимПроведения)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	 ИЛИ СтруктураШапкиДокумента.ВидПоступления <> Перечисления.ВидыПоступленияТоваров.НаСклад
	Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений   = Движения.ТоварыНаСкладах;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Склад = СтруктураШапкиДокумента.СкладОрдер;
		
		Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ОтЗаказчика Тогда
			НоваяСтрока.Качество = Справочники.Качество.Новый;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТаре Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Склад = СтруктураШапкиДокумента.СкладОрдер;
		НоваяСтрока.Качество = Справочники.Качество.Новый;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияТоварыНаСкладеУпр()

// Процедура формирует движения по регистру "ТоварыКПолучениюНаСклады"
//
Процедура ДвиженияТоварыПоОрдеруУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Заголовок, Отказ, РежимПроведения)
	
	Если Не ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений   = Движения.ТоварыКПолучениюНаСклады;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры 		   = СтрокаТЧ.СерияНоменклатуры;
		НоваяСтрока.ДокументПолучения          = СкладОрдер;
		НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
		НоваяСтрока.СтатусПартии               = Перечисления.СтатусыПартийТоваров.Купленный;
		НоваяСтрока.Склад               	   = СкладОрдер.Склад;
		НоваяСтрока.Качество               	   = Справочники.Качество.Новый;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТаре Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ДокументПолучения          = СкладОрдер;
		НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
		НоваяСтрока.СтатусПартии               = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара;
		НоваяСтрока.Склад               	   = СкладОрдер.Склад;
		НоваяСтрока.Качество               	   = Справочники.Качество.Новый;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьРасход();
	
	Если НЕ СкладОрдер.БезПраваПродажи Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах
		УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
			?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
			СтруктураШапкиДокумента, 
			Отказ, 
			ТаблицаПоТоварам,
			Неопределено,
			Неопределено, 
			ИСТИНА, 
			ЛОЖЬ, 
			ЛОЖЬ);
		
	Иначе
		НаборДвижений   = Движения.ТоварыВРезервеНаСкладах;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Склад                  	   = СкладОрдер.Склад;
			НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
			НоваяСтрока.ДокументРезерва            = СкладОрдер;
			НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
			
		КонецЦикла;
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияТоварыКПередачеУпр()

// Процедура формирует движения по регистру "ТоварыПереданные"
//
Процедура ДвиженияТоварыПереданныеУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Заголовок, Отказ, РежимПроведения)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений   = Движения.ТоварыПереданные;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ИзПереработки Тогда
		
		Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.СтатусПередачи             = Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку;
			НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры 		   = СтрокаТЧ.СерияНоменклатуры;
			
			НоваяСтрока.Количество          = СтрокаТЧ.Количество;
			НоваяСтрока.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
												СтрокаТЧ.Сумма,
												ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												СтруктураШапкиДокумента.КурсДокумента,
												КурсВзаиморасчетов,
												СтруктураШапкиДокумента.КратностьДокумента,
												КратностьВзаиморасчетов);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Для Каждого СтрокаТЧ Из ТаблицаПоТаре Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.СтатусПередачи             = Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара;
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		
		НоваяСтрока.Количество          = СтрокаТЧ.Количество;
		НоваяСтрока.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
												СтрокаТЧ.Сумма,
												ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												СтруктураШапкиДокумента.КурсДокумента,
												КурсВзаиморасчетов,
												СтруктураШапкиДокумента.КратностьДокумента,
												КратностьВзаиморасчетов);
		
	КонецЦикла;
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Заказ,"Сделка");

	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ИзПереработки 
		И ТаблицаПоТоварам.Количество() <> 0 Тогда
		
		ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;

	НаборДвижений.ВыполнитьРасход();
	
КонецПроцедуры // ДвиженияТоварыПереданныеУпр()

// Процедура формирует движения по регистру "ТоварыВРезервеНаСкладах"
//
Процедура ДвиженияТоварыВРезервеУпр(ТаблицаПоТоварам, Заголовок, Отказ, РежимПроведения)
	
	//Если Не ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
	//	Возврат;
	//КонецЕсли;
	
	НаборДвижений   = Движения.ТоварыВРезервеНаСкладах;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
			НоваяСтрока.Склад                  = СкладОрдер;
		Иначе
			НоваяСтрока.Склад                  = СкладОрдер.Склад;
		КонецЕсли;
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		НоваяСтрока.ДокументРезерва            = Заказ;
		НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияТоварыВРезервеУпр()

// Процедура списания по партиям
//
Процедура СписаниеПоПартиям(ТабТМЦ, Отказ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре)
	
	НаборДвижений   = Движения.СписанныеТовары;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ТекСклад = ?(ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру, СкладОрдер.Склад, СкладОрдер);
	СчетУчетаПоТареНУ = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ИзПереработки Тогда
		
		Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Организация           = Организация;
			НоваяСтрока.Номенклатура          = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры = СтрокаТЧ.СерияНоменклатуры;
			НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
			НоваяСтрока.ЗаказПартии   = Заказ;
			НоваяСтрока.ЗаказСписания = Заказ;
			НоваяСтрока.СкладПолучатель   = ТекСклад;
			НоваяСтрока.КачествоНовое     = СтрокаТЧ.Качество;
			НоваяСтрока.ДокументПередачи = СтрокаТЧ.ДокументПартии;
			
			НоваяСтрока.Количество    = СтрокаТЧ.Количество;
			
			НоваяСтрока.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика;
			
			НоваяСтрока.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
			НоваяСтрока.ОтражатьВБухгалтерскомУчете  = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
			НоваяСтрока.ОтражатьВНалоговомУчете      = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
			НоваяСтрока.СчетУчетаБУ       = СтрокаТЧ.СчетПередачиБУ;
			НоваяСтрока.СчетУчетаНУ       = СтрокаТЧ.СчетПередачиНУ;
			
			НоваяСтрока.КорСчетБУ         = СтрокаТЧ.СчетУчетаБУ;
			НоваяСтрока.КорСчетНУ         = СтрокаТЧ.СчетУчетаНУ;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
				НоваяСтрока.ОтражатьВНалоговомУчете = Истина;
				НоваяСтрока.СчетУчетаНУ = НоваяСтрока.СчетУчетаБУ;
				НоваяСтрока.КорСчетНУ 	= НоваяСтрока.КорСчетБУ;
					
			КонецЕсли;
			
			НоваяСтрока.ДопустимыйСтатус1 = Перечисления.СтатусыПартийТоваров.Продукция;
			НоваяСтрока.ДопустимыйСтатус2 = Перечисления.СтатусыПартийТоваров.Купленный;
			НоваяСтрока.ДопустимыйСтатус3 = Перечисления.СтатусыПартийТоваров.ВПереработку;
			
			НоваяСтрока.СтатусПередачи    = Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку;
			
			НоваяСтрока = ТабТМЦ.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			
		КонецЦикла;
		
		Инд = 0;
		Для каждого Строка Из ТаблицаДвижений Цикл
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
		КонецЦикла;
		
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах, ПартииТоваровНаСкладахБухгалтерскийУчет, ПартииТоваровНаСкладахНалоговыйУчет.
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, 
		Отказ, 
		Неопределено,
		ТаблицаПоТаре,
		Неопределено, 
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, 
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, 
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
			
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ПроводкиБУ = Движения.Хозрасчетный;
		ПроводкиНУ = Движения.Налоговый;
		
		Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл Тогда
			СкладПроводок = ТекСклад;
		Иначе
			СкладПроводок = Неопределено;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаПоТаре Цикл
			
			ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.Сумма, ВалютаДокумента, мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.КурсДокумента, 1);
			
			// Бухгалтерский учет
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период                  = Дата;
			Проводка.Организация             = СтруктураШапкиДокумента.Организация;
			
			Проводка.Содержание              = "Поступление тары";
			Проводка.Сумма                   = ПроводкаСумма;
			
			Проводка.СчетДт                  = Строка.СчетУчетаБУ;
			Проводка.СубконтоДт.Номенклатура = Строка.Номенклатура;
			Если НЕ (Строка.СчетУчетаБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады ,"ВидСубконто") = Неопределено) Тогда
				Проводка.СубконтоДт.Склады   = СкладПроводок;
			КонецЕсли;
			Проводка.КоличествоДт            = БухгалтерскийУчет.КоличествоВПроводку(Строка.СчетУчетаБУ, Строка.Количество);
			
			// Проверка - вид Операции - комиссия
			Если Строка.СчетУчетаБУ.Забалансовый Тогда
				Если НЕ (Строка.СчетУчетаБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты ,"ВидСубконто") = Неопределено) Тогда
					Проводка.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
				КонецЕсли;
			Иначе
				Проводка.СчетКт                  = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
				Проводка.СубконтоКт.Контрагенты  = СтруктураШапкиДокумента.Контрагент;
				Проводка.СубконтоКт.Договоры     = СтруктураШапкиДокумента.ДоговорКонтрагента;
				
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = ПроводкаСумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
				КонецЕсли;
				
				// Налоговый учет
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					Проводка = ПроводкиНУ.Добавить();
					Проводка.Период                  = Дата;
					Проводка.Организация             = СтруктураШапкиДокумента.Организация;
					
					Проводка.СчетДт                  = Строка.СчетУчетаНУ;
					Проводка.СубконтоДт.Номенклатура = Строка.Номенклатура;
					Если НЕ (Строка.СчетУчетаНУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады ,"ВидСубконто") = Неопределено) Тогда
						Проводка.СубконтоДт.Склады    = СкладПроводок;
					КонецЕсли;
					Проводка.КоличествоДт            = Строка.Количество;
					
					Проводка.СчетКт                  = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					Проводка.СубконтоКт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
					Проводка.СубконтоКт.Контрагенты  = СтруктураШапкиДокумента.Контрагент;
					Проводка.СубконтоКт.Договоры     = СтруктураШапкиДокумента.ДоговорКонтрагента;
					Проводка.Сумма                   = ПроводкаСумма;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьДвижения();
	НаборДвижений.Записать(Истина);
	
КонецПроцедуры // СписаниеПоПартиям()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
		НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
	КонецЕсли;
		
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента)

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, истина);
	    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаБУ) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()
 
// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "Склад", "Склад");
	КонецЕсли;
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете" , "ОтражатьВРегламентированномУчете");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		СтруктураШапкиДокумента.Вставить("Склад", СкладОрдер);
	КонецЕсли;
	
	
КонецПроцедуры	

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре)
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("КоличествоДок"             , "Количество");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям", "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("Качество"                  , "Качество");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Коэффициент"     			, "Коэффициент");
	СтруктураПолей.Вставить("ДокументПартии"            , "ДокументПартии");
	СтруктураПолей.Вставить("Цена"                  	, "Цена");
	СтруктураПолей.Вставить("Сумма"     				, "Сумма");
	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"     			, "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетПередачиБУ"            , "СчетПередачиБУ");
    СтруктураПолей.Вставить("СчетПередачиНУ"            , "СчетПередачиНУ");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
    ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"             	, "Количество");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Цена"                  	, "Цена");
	СтруктураПолей.Вставить("Сумма"     				, "Сумма");
	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"     			, "СчетУчетаНУ");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
    ТаблицаПоТаре = РезультатЗапросаПоТаре.Выгрузить();
	
	//Заполнение счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента);
	
	
КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ВозвратнаяТара");

	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	СтруктураШапкиДокумента = ПолучитьДанныеДокумента(СтруктураШапкиДокумента);
	
	ПроверкаРеквизитов(Заголовок, Отказ, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре);
	
	// Здесь услуг быть не должно
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Наборов здесь быть не должно
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаказыПокупателей(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ДвиженияТоварыНаСкладеУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Заголовок, Отказ, РежимПроведения);
	ДвиженияТоварыОрганизацийРегл(СтруктураШапкиДокумента, ТаблицаПоТоварам, Заголовок, Отказ, РежимПроведения);
	ДвиженияТоварыПоОрдеруУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Заголовок, Отказ, РежимПроведения);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТабТМЦ = Новый ТаблицаЗначений;
	ТабТМЦ.Колонки.Добавить("Номенклатура");
	
	ДвиженияТоварыПереданныеУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Заголовок, Отказ, РежимПроведения);
	СписаниеПоПартиям(ТабТМЦ, Отказ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Движения.Хозрасчетный.Записать();
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Движения.Налоговый.Записать();
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчетВременный.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ОтЗаказчика И СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ДвиженияТоварыВРезервеУпр(ТаблицаПоТоварам, Заголовок, Отказ, РежимПроведения);
		
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам));
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаЗаполнения
//
Процедура ОбработкаЗаполнения(Основание)
	ТипДок = ТипЗнч(Основание);
	Если ТипДок = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		
		// Заполнение шапки.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		Заказ                   = Основание.Заказ;
		Комментарий             = "Возврат: " + Основание.Комментарий;
		
		СуммаДокумента          = Основание.СуммаДокумента;
		СчетУчетаРасчетовПоТаре = Основание.СчетУчетаРасчетовПоТаре;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ИзПереработки;
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваров.ОтЗаказчика;
		КонецЕсли;
		
		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
			
			НоваяСтрока = ВозвратнаяТара.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаВозвратнаяТара);
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТовары);
			НоваяСтрока.ДокументПартии      = Основание;
			
			ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(НоваяСтрока, ЭтотОбъект);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
