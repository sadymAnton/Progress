////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	// Получить экземпляр документа на печать
	Если Лев(ИмяМакета,3) = "Т8_" Тогда
			ТабДокумент = ПечатьТ8(ИмяМакета);
	ИначеЕсли Лев(ИмяМакета,3) = "Т8а" тогда
			ТабДокумент = ПечатьТ8а(ИмяМакета);
	Иначе
			ТабДокумент = УвольнениеИзОрганизацийПереопределяемый.ПечатьДополнительныхФорм(ИмяМакета, ЭтотОбъект);
	КонецЕсли;

	Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,"Увольнение из организации "),,ТабДокумент);

КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("Т8а_от_5_1_2004", "Форма Т-8а");
	СтруктураМакетов.Вставить("Т8_от_5_1_2004",  "Форма Т-8");

	УвольнениеИзОрганизацийПереопределяемый.ДополнитьСтруктуруПечатныхФорм(СтруктураМакетов, ЭтотОбъект);
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция Автозаполнение(Запрос) Экспорт
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// создаем временную таблицу ВТСписокРаботников с сотрудниками, отобранными по критериям пользователя 
	// 
	// Поля:
	//   Сотрудник
	//   Физлицо
	//   ФИО
	//   ПодразделениеОрганизации
	//   ГрафикРаботы
	//
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокРаботников.Сотрудник,
	|	СписокРаботников.Физлицо,
	|	ВЫБОР
	|		КОГДА СписокРаботников.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НДФЛПрименениеВычетовСрезПоследних.Организация = &ГоловнаяОрганизация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрекращатьСтандартныеВычеты,
	|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням) КАК ПорядокРасчетаОтпуска,
	|	ИСТИНА КАК ПризнакКомпенсацииОтпуска
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов.СрезПоследних(
	|				&ДатаАктуальности,
	|				Физлицо В
	|					(ВЫБРАТЬ
	|						ВТСписокРаботников.Физлицо
	|					ИЗ
	|						ВТСписокРаботников КАК ВТСписокРаботников)) КАК НДФЛПрименениеВычетовСрезПоследних
	|		ПО СписокРаботников.Физлицо = НДФЛПрименениеВычетовСрезПоследних.Физлицо";
	
	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецФункции //Автозаполнение()

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.УвольнениеИзОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПроведениеРасчетов.ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент.Ссылка, Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

Функция ПолучитьСведенияОСотрудниках(СведенияОСотрудниках, Сотрудник) Экспорт
	
	Если СведенияОСотрудниках <> Неопределено Тогда
		СведенияОСотруднике = СведенияОСотрудниках[Сотрудник];
	КонецЕсли;
	Если СведенияОСотруднике = Неопределено Тогда
		СведенияОСотруднике = Новый Структура("ВидЗанятости, Физлицо, ВидДоговора, НДФЛПрименениеВычетов");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.ВидЗанятости,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.ВидДоговора
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Сотрудник);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СведенияОСотруднике,Выборка);
		КонецЕсли;
		Если СведенияОСотруднике.ВидЗанятости <> Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НДФЛПрименениеВычетов.Период КАК Период,
			|	НДФЛПрименениеВычетов.Организация
			|ИЗ
			|	РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
			|ГДЕ
			|	НДФЛПрименениеВычетов.Физлицо = &Физлицо
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";
			Запрос.УстановитьПараметр("Физлицо", СведенияОСотруднике.Физлицо);
			СведенияОСотруднике.НДФЛПрименениеВычетов = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		Если СведенияОСотрудниках <> Неопределено Тогда
			СведенияОСотрудниках[Сотрудник] = СведенияОСотруднике;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СведенияОСотруднике;
	
КонецФункции  // ПолучитьСведенияОВидеРасчета

// Процедура рассчитывает количество дней отпуска, которые необходимо компенсировать или удержать
//
Процедура РассчитатьКоличествоДнейОтпуска(СтрокаТЧ, СведенияОСотрудниках = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.Сотрудник) ИЛИ Не ЗначениеЗаполнено(СтрокаТЧ.ДатаУвольнения) ИЛИ СтрокаТЧ.ПорядокРасчетаОтпуска.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ОстаткиОтпусков.ОстатокОтпускаСотрудникаНаДату(СтрокаТЧ.Сотрудник, СтрокаТЧ.ДатаУвольнения, Истина, СтрокаТЧ.ПорядокРасчетаОтпуска);
	
	СтрокаТЧ.РабочийГодС							= Результат.РабочийГодС;
	СтрокаТЧ.РабочийГодПо							= Результат.РабочийГодПо;
	СтрокаТЧ.ДнейЧасовКомпенсацииУдержанияОтпуска	= Результат.ОстатокНаДату * ?(Результат.ОстатокНаДату >= 0, 1, -1);
	СтрокаТЧ.ПризнакКомпенсацииОтпуска				= Результат.ОстатокНаДату >= 0;
	
	УвольнениеИзОрганизацийПереопределяемый.ДополнительноУточнитьДниКомпенсации(СтрокаТЧ, ПолучитьСведенияОСотрудниках(СведенияОСотрудниках, СтрокаТЧ.Сотрудник));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);
	Запрос.УстановитьПараметр("Организация",	Организация);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
		
		Запрос.Текст = ФормированиеПечатныхФормЗК.ПолучитьТекстЗапросаПоОтветственнымЛицам(
			"ДатаДокумента",
			"ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
			|И СтруктурнаяЕдиница = &Организация");
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УвольнениеИзОрганизаций.Номер КАК НомерДок,
		|	УвольнениеИзОрганизаций.Дата КАК ДатаДок,
		|	УвольнениеИзОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	УвольнениеИзОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ОтветственныеЛицаОрганизаций.Должность КАК ДолжностьРуководителя,
		|	ОтветственныеЛицаОрганизаций.НаименованиеОтветственногоЛица КАК ФИОРуководителя,
		|	УвольнениеИзОрганизаций.Организация.Префикс
		|ИЗ
		|	Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОбОтветственномЛице КАК ОтветственныеЛицаОрганизаций
		|		ПО УвольнениеИзОрганизаций.Организация = ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница
		|ГДЕ
		|	УвольнениеИзОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
		Запрос.УстановитьПараметр("ПустаяОрганизация" , Справочники.Организации.ПустаяСсылка());
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, УвольнениеИзОрганизацииРаботники.Сотрудник.Наименование) КАК Работник,
		|	УвольнениеИзОрганизацииРаботники.Физлицо.Пол,
		|	УвольнениеИзОрганизацииРаботники.Сотрудник.ДатаДоговора КАК ТрудовойДоговорДата,
		|	УвольнениеИзОрганизацииРаботники.Сотрудник.НомерДоговора КАК ТрудовойДоговорНомер,
		|	УвольнениеИзОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	УвольнениеИзОрганизацииРаботники.ДатаУвольнения,
		|	УвольнениеИзОрганизацииРаботники.СтатьяТКРФ.Наименование КАК СтатьяТКРФ,
		|	УвольнениеИзОрганизацииРаботники.СтатьяТКРФ.ТекстОснования,
		|	УвольнениеИзОрганизацииРаботники.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	ВЫБОР
		|		КОГДА Работники.ПериодЗавершения <= УвольнениеИзОрганизацииРаботники.ДатаУвольнения
		|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА Работники.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ Работники.ПодразделениеОрганизации
		|	КОНЕЦ КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Работники.ПериодЗавершения <= УвольнениеИзОрганизацииРаботники.ДатаУвольнения
		|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА Работники.ДолжностьЗавершения
		|		ИНАЧЕ Работники.Должность
		|	КОНЕЦ КАК Должность,
		|	УвольнениеИзОрганизацииРаботники.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СписокДат.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизации,
		|			РаботникиОрганизации.Должность.Наименование КАК Должность,
		|			РаботникиОрганизации.ПодразделениеОрганизацииЗавершения.Наименование КАК ПодразделениеОрганизацииЗавершения,
		|			РаботникиОрганизации.ДолжностьЗавершения.Наименование КАК ДолжностьЗавершения,
		|			РаботникиОрганизации.ПериодЗавершения КАК ПериодЗавершения
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РаботникиВнутри.Сотрудник КАК Сотрудник,
		|				МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
		|			ИЗ
		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК Док
		|					ПО РаботникиВнутри.Период <= Док.ДатаУвольнения
		|						И РаботникиВнутри.Сотрудник = Док.Сотрудник
		|			ГДЕ
		|				Док.Ссылка = &ДокументСсылка
		|				И (НЕ Док.Сторно)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				РаботникиВнутри.Сотрудник) КАК СписокДат
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
		|					И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник) КАК Работники
		|		ПО УвольнениеИзОрганизацииРаботники.Сотрудник = Работники.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				Физлицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						УвольнениеИзОрганизацииРаботники.Сотрудник.Физлицо
		|					ИЗ
		|						Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацииРаботники
		|					ГДЕ
		|						УвольнениеИзОрганизацииРаботники.Ссылка = &ДокументСсылка)) КАК ФИОФизЛицСрезПоследних
		|		ПО УвольнениеИзОрганизацииРаботники.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	УвольнениеИзОрганизацииРаботники.Ссылка = &ДокументСсылка
		|	И (НЕ УвольнениеИзОрганизацииРаботники.Сторно)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Функция формирует табличный документ с печатной формой "Т-8а",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
 Функция ПечатьТ8а(ИмяМакета)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УвольнениеИзОрганизации_Т8а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника

	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки);// Для подвала.
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтраниц = 0; ВыведеноСтрок = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		РезультатСклонения = "";
		Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ВыборкаРаботники.Работник, 4,ВыборкаРаботники.ФизЛицоПол, РезультатСклонения) Тогда
			ОбластьМакета.Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ8а()

// Функция формирует табличный документ с печатной формой "Т-8",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ8(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УвольнениеИзОрганизации_Т8";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки   = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
		
		ВыводитьДатуОзнакомленияСПриказом = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах");
		Если Не ВыводитьДатуОзнакомленияСПриказом Тогда
			ОбластьМакетаПодвал.Параметры.ДатаДок = ФормированиеПечатныхФормЗК.ПустаяДатаВПечатнойФорме();
		КонецЕсли;
	КонецЕсли;
	
	НомерФормы = 0;
	ПечататьПостфикс = ВыборкаРаботники.Количество() > 1;
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Шапка документа.
		Если ПечататьПостфикс Тогда
			НомерФормы = НомерФормы + 1;
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + НомерФормы
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		РезультатСклонения = "";
		Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ВыборкаРаботники.Работник, 4,ВыборкаРаботники.ФизЛицоПол, РезультатСклонения) Тогда
			ОбластьМакета.Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		ПредставлениеДатыДоговора                       = Формат(ВыборкаРаботники.ТрудовойДоговорДата, "ДЛФ=DD");
		ОбластьМакета.Параметры.ТрудовойДоговорЧисло    = ?(ЗначениеЗаполнено(ВыборкаРаботники.ТрудовойДоговорДата), СокрЛП(Лев(ПредставлениеДатыДоговора,2)), "      ");
		ОбластьМакета.Параметры.ТрудовойДоговорМесяцГод = ?(ЗначениеЗаполнено(ВыборкаРаботники.ТрудовойДоговорДата), СокрЛП(Прав(ПредставлениеДатыДоговора, СтрДлина(ПредставлениеДатыДоговора)-2)), "                     г.");
		ПредставлениеДатыУвольнения                     = Формат(ВыборкаРаботники.ДатаУвольнения, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаУвольненияЧисло     = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаУвольнения), СокрЛП(Лев(ПредставлениеДатыУвольнения,2)), "      ");
		ОбластьМакета.Параметры.ДатаУвольненияМесяцГод  = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаУвольнения),  СокрЛП(Прав(ПредставлениеДатыУвольнения, СтрДлина(ПредставлениеДатыУвольнения)-2)), "                     г.");
		
		ОбластьМакета.Параметры.СтатьяТКРФ = ?(ВыборкаРаботники.СтатьяТКРФ = NULL, "", ВыборкаРаботники.СтатьяТКРФ) + ". " + ВыборкаРаботники.СтатьяТКРФТекстОснования;
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;
	
	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ8()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	УвольнениеИзОрганизаций.Дата,
	|	УвольнениеИзОрганизаций.Организация,
	|	ВЫБОР
	|		КОГДА УвольнениеИзОрганизаций.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА УвольнениеИзОрганизаций.Организация
	|		ИНАЧЕ УвольнениеИзОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	УвольнениеИзОрганизаций.Ссылка
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций
	|ГДЕ
	|	УвольнениеИзОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",				Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникиДоНазначения": 
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру РаботникиОрганизации на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения" в указанной организации (структурном подразделении). 
	//		(Использует данные выборки "ДатыПоследнихДвиженийРаботников")
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие одиноковый набор реквизитов <Сотрудник>.
	//
	// Вторая часть запроса - вид строки запроса "НачисленияРаботникаОрганизации" и "УдержанияРаботниковОрганизации" - выборка открытых начислений и удержаний работника для их закрытия
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "СписокВидовРасчета":
	//		Для каждой строки ТЧРаботникиОрганизации по регистрам ПлановыеНачисленияРаботниковОрганизаций и ПлановыеУдержанияРаботниковОрганизаций выполняем срез последних на дату ДатаУвольнения (выборка СписокВидовРасчета).
	//		Для закрытия нужны только те строки начислений и удержаний, ресурс "Размер" которых не равен нулю.
	//		Удержания физлица закрываем по всем структруным подразделениям только в момент увольнения с основного места работы.

	// Третья часть запроса - вид строки запроса "РабочиеМестаДоУвольнения" - выборка остающихся мест работы после увольнения
	// Данные выборки нужня для проверки "Работник не может быть уволен с основного места работы до тех пор, пока он оформлен внутренним совместителем"
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "ДанныеПоРаботникуДоУвольнения":
	//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по выборке "ДвиженияРаботниковОрганизации" регистру РаботникиОрганизации на дату ДатаУвольнения.
	//		Где выборка "ДвиженияРаботниковОрганизации" есть объединение движений по регистру "РаботникиОрганизации" и движений, которые должны выполниться
	//		проверяемым документом. 

	// Четвертая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботникиОрганизации":
	//		Выбираются строки документа 
	// 2. Выборка "КонфликтныеДвижения":
	//		Для каждой строки ТЧРаботникиОрганизации ищем движения по регистрам РаботникиОрганизации и СостояниеРаботниковОрганизации
	//		на дату ДатаУвольнения по набору измерений <Сотрудник>

		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Петрухин Андрей 24.06.2011 14:00 
	// ОПИСАНИЕ: В запрос добавлен "AVTШтатноеРасписание" и "ПрежнееAVTШтатноеРасписание"
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.Ссылка,
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости,
	|	ТЧРаботникиОрганизации.Сотрудник.Организация,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.СтатьяТКРФ,
	|	ТЧРаботникиОрганизации.ОснованиеУвольнения,
	|	ТЧРаботникиОрганизации.ПрекращатьСтандартныеВычеты
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|	И НЕ ТЧРаботникиОрганизации.Сторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоРаботникуДоНазначения.Организация,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок,
	|	ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение,
	|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации,
	|	ДанныеПоРаботникуДоНазначения.Должность,
	|	ДанныеПоРаботникуДоНазначения.ГрафикРаботы,
	|	ДанныеПоРаботникуДоНазначения.Период,
	|	ДанныеПоРаботникуДоНазначения.ПериодЗавершения,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения,
	|	ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделениеЗавершения,
	|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения,
	|	ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения,
	|	ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения,
	|	ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписание,
	|	ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписаниеЗавершения,
	|	СписокДат.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТДанныеПриУвольнении
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(СостояниеВнутри.Период) КАК ДатаПоследнегоИзменения,
	|		Док.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК СостояниеВнутри
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК Док
	|			ПО СостояниеВнутри.Период <= Док.ДатаУвольнения
	|				И СостояниеВнутри.Сотрудник = Док.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Док.Сотрудник,
	|		Док.НомерСтроки) КАК СписокДат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО СписокДат.ДатаПоследнегоИзменения = ДанныеПоРаботникуДоНазначения.Период
	|			И СписокДат.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|ПОМЕСТИТЬ ВТПересекающиесяСтроки
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ТЧРаботникиОрганизации2
	|		ПО ТЧРаботникиОрганизации.НомерСтроки <> ТЧРаботникиОрганизации2.НомерСтроки
	|			И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧРаботникиОрганизации.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыНачислений.Сотрудник КАК Сотрудник,
	|	НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
	|	НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВТПлановыеНачисления
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Сотрудник КАК Сотрудник,
	|		НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
	|		МАКСИМУМ(НачисленияРаботниковОрганизации.Период) КАК ДатаИзмененияРеквизитов
	|	ИЗ
	|		ВТДанныеДокумента КАК Док
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
	|			ПО Док.ДатаУвольнения >= НачисленияРаботниковОрганизации.Период
	|				И Док.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НачисленияРаботниковОрганизации.ВидРасчетаИзмерение,
	|		Док.Сотрудник) КАК ДатыНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
	|		ПО ДатыНачислений.ДатаИзмененияРеквизитов = НачисленияРаботниковОрганизации.Период
	|			И ДатыНачислений.ВидРасчетаИзмерение = НачисленияРаботниковОрганизации.ВидРасчетаИзмерение
	|			И (НачисленияРаботниковОрганизации.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|				ИЛИ ДатыНачислений.ДатаИзмененияРеквизитов = НачисленияРаботниковОрганизации.Период
	|					И НачисленияРаботниковОрганизации.ПериодЗавершения > ДатыНачислений.ДатаИзмененияРеквизитов
	|					И НачисленияРаботниковОрганизации.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать))
	|			И ДатыНачислений.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыУдержаний.Физлицо КАК Физлицо,
	|	ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета КАК ВидРасчета,
	|	ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование КАК ДокументОснование,
	|	ПлановыеУдержанияРаботниковОрганизаций.Получатель,
	|	ПлановыеУдержанияРаботниковОрганизаций.ПорядокИсчисленияИздержек,
	|	ПлановыеУдержанияРаботниковОрганизаций.ПрожиточныйМинимум
	|ПОМЕСТИТЬ ВТПлановыеУдержания
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Физлицо КАК Физлицо,
	|		ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета КАК ВидРасчета,
	|		ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование КАК ДокументОснование,
	|		МАКСИМУМ(ПлановыеУдержанияРаботниковОрганизаций.Период) КАК ДатаИзмененияРеквизитов
	|	ИЗ
	|		ВТДанныеДокумента КАК Док
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержанияРаботниковОрганизаций
	|			ПО Док.ДатаУвольнения >= ПлановыеУдержанияРаботниковОрганизаций.Период
	|				И Док.Физлицо = ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо
	|				И (ПлановыеУдержанияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация)
	|	ГДЕ
	|		Док.СотрудникВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета,
	|		ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование,
	|		Док.Физлицо) КАК ДатыУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержанияРаботниковОрганизаций
	|		ПО ДатыУдержаний.ДатаИзмененияРеквизитов = ПлановыеУдержанияРаботниковОрганизаций.Период
	|			И ДатыУдержаний.ВидРасчета = ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета
	|			И ДатыУдержаний.ДокументОснование = ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование
	|			И ДатыУдержаний.Физлицо = ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо
	|			И (ПлановыеУдержанияРаботниковОрганизаций.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить))
	|			И (ПлановыеУдержанияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Период КАК Период,
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТКонфликтныеДвижения
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|	И РаботникиОрганизации.Сотрудник В
	|			(ВЫБРАТЬ
	|				ТЧРаботникиОрганизации.Сотрудник
	|			ИЗ
	|				ВТДанныеДокумента КАК ТЧРаботникиОрганизации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонфликтныеДвижения.НомерСтроки КАК НомерСтроки,
	|	КонфликтныеДвижения.Сотрудник КАК Сотрудник,
	|	КонфликтныеДвижения.Период КАК Период,
	|	КонфликтныеДвижения.Регистратор КАК Регистратор,
	|	МАКСИМУМ(СостояниеРаботниковОрганизаций.Период) КАК ДатаРегистра
	|ПОМЕСТИТЬ ВТКонфликтныеСостояния
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|		ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|		КонфликтныеДвижения.Период КАК Период,
	|		КонфликтныеДвижения.Регистратор КАК Регистратор
	|	ИЗ
	|		ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК КонфликтныеДвижения
	|			ПО (КонфликтныеДвижения.Период = ВЫБОР
	|					КОГДА ТЧРаботникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаУвольнения, ДЕНЬ, 1)
	|				КОНЕЦ)
	|				И ТЧРаботникиОрганизации.Сотрудник = КонфликтныеДвижения.Сотрудник) КАК КонфликтныеДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|		ПО (СостояниеРаботниковОрганизаций.Период < КонфликтныеДвижения.Период)
	|			И КонфликтныеДвижения.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	КонфликтныеДвижения.НомерСтроки,
	|	КонфликтныеДвижения.Период,
	|	КонфликтныеДвижения.Регистратор,
	|	КонфликтныеДвижения.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияРаботниковОрганизации.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ДвиженияРаботниковОрганизации.Период) КАК ДатаПоследнегоИзменения
	|ПОМЕСТИТЬ ВТДатыПоследнихДвиженийПоПриказам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДвиженияРаботниковОрганизации.Период КАК Период,
	|		ДвиженияРаботниковОрганизации.Сотрудник КАК Сотрудник
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК ДвиженияРаботниковОрганизации
	|	ГДЕ
	|		ДвиженияРаботниковОрганизации.Организация = &ГоловнаяОрганизация
	|		И ДвиженияРаботниковОрганизации.Сотрудник.Физлицо В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ТЧРаботникиОрганизации.Сотрудник.Физлицо
	|				ИЗ
	|					ВТДанныеДокумента КАК ТЧРаботникиОрганизации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТЧРаботникиОрганизации.ДатаУвольнения,
	|		ТЧРаботникиОрганизации.Сотрудник
	|	ИЗ
	|		ВТДанныеДокумента КАК ТЧРаботникиОрганизации) КАК ДвиженияРаботниковОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК Док
	|		ПО (ДвиженияРаботниковОрганизации.Период <= ВЫБОР
	|				КОГДА Док.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(Док.ДатаУвольнения, ДЕНЬ, 1)
	|			КОНЕЦ)
	|			И ДвиженияРаботниковОрганизации.Сотрудник.Физлицо = Док.Физлицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияРаботниковОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.СотрудникНаименование КАК СотрудникНаименование,
	|	ТЧРаботникиОрганизации.Физлицо КАК Физлицо,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.СотрудникВидЗанятости КАК ВидЗанятости,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаУвольнения
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПрежнееПодразделение,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаУвольнения
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделениеЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение
	|	КОНЕЦ КАК ПрежняяОрганизация,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаУвольнения
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Должность
	|	КОНЕЦ КАК ПрежняяДолжность,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаУвольнения
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ГрафикРаботы
	|	КОНЕЦ КАК ПрежнийГрафик,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.СотрудникОрганизация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаУвольнения
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ПрежняяСтавка,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаУвольнения
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ГрафикРаботы
	|	КОНЕЦ КАК ПрежнийГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаУвольнения
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Период
	|	КОНЕЦ КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	NULL КАК ВидРасчетаИзмерение,
	|	NULL КАК ВидРасчета,
	|	NULL КАК ДокументОснованиеРасчета,
	|	NULL КАК КонфликтныйДокумент,
	|	NULL КАК ВидЗанятостиПоДругомуМестуРаботы,
	|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПолеПроверки,
	|	NULL КАК Получатель,
	|	NULL КАК ПорядокИсчисленияИздержек,
	|	NULL КАК ПрожиточныйМинимум,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаУвольнения
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписаниеЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписание
	|	КОНЕЦ КАК ПрежнееAVTШтатноеРасписание
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПриУвольнении КАК ДанныеПоРаботникуДоНазначения
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПересекающиесяСтроки КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""НачисленияРаботникаОрганизации"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.СотрудникНаименование,
	|	ТЧРаботникиОрганизации.Физлицо,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.СотрудникВидЗанятости,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СписокВидовРасчета.ВидРасчетаИзмерение,
	|	СписокВидовРасчета.ВидРасчета,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисления КАК СписокВидовРасчета
	|		ПО ТЧРаботникиОрганизации.Сотрудник = СписокВидовРасчета.Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""УдержанияРаботниковОрганизации"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.СотрудникНаименование,
	|	ТЧРаботникиОрганизации.Физлицо,
	|	ТЧРаботникиОрганизации.ДатаУвольнения,
	|	ТЧРаботникиОрганизации.СотрудникВидЗанятости,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СписокВидовРасчета.ВидРасчета,
	|	NULL,
	|	СписокВидовРасчета.ДокументОснование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СписокВидовРасчета.Получатель,
	|	СписокВидовРасчета.ПорядокИсчисленияИздержек,
	|	СписокВидовРасчета.ПрожиточныйМинимум
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеУдержания КАК СписокВидовРасчета
	|		ПО ТЧРаботникиОрганизации.Физлицо = СписокВидовРасчета.Физлицо
	|ГДЕ
	|	ТЧРаботникиОрганизации.СотрудникВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""РабочиеМестаДоУвольнения"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	ДанныеПоРаботникуДоУвольнения.Сотрудник,
	|	ДанныеПоРаботникуДоУвольнения.Сотрудник.Наименование,
	|	ДанныеПоРаботникуДоУвольнения.Сотрудник.Физлицо,
	|	NULL,
	|	ТЧРаботникиОрганизации.СотрудникВидЗанятости,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДанныеПоРаботникуДоУвольнения.Сотрудник.ВидЗанятости,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоУвольнения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоследнихДвиженийПоПриказам КАК ДатыПоследнихДвиженийПоПриказам
	|			ПО ДанныеПоРаботникуДоУвольнения.Период = ДатыПоследнихДвиженийПоПриказам.ДатаПоследнегоИзменения
	|				И (ДанныеПоРаботникуДоУвольнения.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|				И ДанныеПоРаботникуДоУвольнения.Сотрудник = ДатыПоследнихДвиженийПоПриказам.Сотрудник
	|		ПО ТЧРаботникиОрганизации.Сотрудник.Физлицо = ДанныеПоРаботникуДоУвольнения.Сотрудник.Физлицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""КонфликтныйДокумент"",
	|	ТЧРаботникиОрганизации.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КонфликтныеДвижения.Регистратор,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКонфликтныеДвижения КАК КонфликтныеДвижения
	|		ПО (КонфликтныеДвижения.Период = ВЫБОР
	|				КОГДА ТЧРаботникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаУвольнения, ДЕНЬ, 1)
	|			КОНЕЦ)
	|			И ТЧРаботникиОрганизации.Сотрудник = КонфликтныеДвижения.Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""КонфликтныйДокумент"",
	|	КонфликтныеДвижения.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КонфликтныеДвижения.Регистратор,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТКонфликтныеСостояния КАК КонфликтныеДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|		ПО КонфликтныеДвижения.ДатаРегистра = СостояниеРаботниковОрганизаций.Период
	|			И КонфликтныеДвижения.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА КонфликтныеДвижения.Период > СостояниеРаботниковОрганизаций.ПериодЗавершения
	|					И СостояниеРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА СостояниеРаботниковОрганизаций.СостояниеЗавершения
	|			ИНАЧЕ СостояниеРаботниковОрганизаций.Состояние
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
	|ИТОГИ ПО
	|	НомерСтроки,
	|	ВидСтрокиЗапроса";

	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ДополнительноеПолеПроверки",УвольнениеИзОрганизацийПереопределяемый.ДополнительноеПолеОписанияСотрудника());
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке =
		"В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) + """ табл. части ""Сотрудники"": ";

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		УвольнениеИзОрганизацийПереопределяемый.ПроверитьЗаполнениеСтрокиРаботникаОрганизацииДополнительно(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Отказ, Заголовок);
		
		// Сотрудник
		НетСотрудника = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаУвольнения
		НетДатыУвольнения = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения);
		Если НетДатыУвольнения Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата увольнения!", Отказ, Заголовок);
		КонецЕсли;

		// Организация сотрудника должна совпадать с организацией документа
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
		КонецЕсли;
	
		Если НетСотрудника ИЛИ НетДатыУвольнения Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;

		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
			
		ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяСтавка = 0 Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаУвольнения, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
			
		КонецЕсли;

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "сотрудник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;

	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда

		// противоречие другим кадровым приказам
		Расшифровки = Новый Массив;
		Расшифровки.Добавить(Новый Структура("Представление, Расшифровка", ВыборкаПоСтрокамДокумента.КонфликтныйДокумент, ВыборкаПоСтрокамДокумента.КонфликтныйДокумент));
		СтрокаСообщениеОбОшибке = "возникает противоречие кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок, , Расшифровки);

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет возможность увольнения работника с точки зрения последовательности приказов по "ВидамЗанятости"
//
Процедура ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ВыборкаСтрокЗапроса, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	глЗначениеПеременной("глКоллекцияЗначенийЗаголовков")[""" табл. части ""сотрудники организации"": "];

	// обходим строки запроса
	Пока ВыборкаСтрокЗапроса.Следующий() Цикл

		ВидЗанятостиПоПриказу = ВыборкаСтрокЗапроса.ВидЗанятости;
	
		Если ВидЗанятостиПоПриказу = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда

			// При увольнении с основного места работы потребуем, чтобы не было внутреннего совместительства
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство  Тогда
				СтрокаСообщениеОбОшибке = "нельзя уволить сотрудника с основного места работы до тех пор,
				|	пока он оформлен внутренним совместителем!
				|	(Сотрудник: " + ВыборкаСтрокЗапроса.Сотрудник + ")"; 
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьВидыЗанятостиРаботникаВОрганизации()

// Создает и заполняет структуру, содержащую имена регистров сведений
// по которым надо проводить документ
//
// Параметры: 
//	СтруктураПроведенияПоРегистрамСведений	- структура, содержащая имена регистров сведений 
//											  по которым надо проводить документ
//
// Возвращаемое значение:
//	Нет.
//
Процедура ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений)

	СтруктураПроведенияПоРегистрамСведений = Новый Структура();
	СтруктураПроведенияПоРегистрамСведений.Вставить("РаботникиОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеНачисленияРаботниковОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПлановыеУдержанияРаботниковОрганизаций");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы");
	СтруктураПроведенияПоРегистрамСведений.Вставить("ПериодыРаботыРаботниковОрганизацийПоСовместительству");

КонецПроцедуры // ЗаполнитьСтруктуруПроведенияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, 
	СтруктураПроведенияПоРегистрамСведений)
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		// Если документ нужно проводить по регистру, то для него есть ключ в структуре
		ИмяРегистра = "РаботникиОрганизаций";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства		
			Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			
			// Измерения
			Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			
			// Ресурсы
			Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение;
			Движение.Должность					= ВыборкаПоРаботникиОрганизации.ПрежняяДолжность;
			Движение.ГрафикРаботы				= ВыборкаПоРаботникиОрганизации.ПрежнийГрафик;
			Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Увольнение;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
			// ИЗМЕНЕНИЕ: Петрухин Андрей 24.06.2011 14:01  
			Движение.AVTШтатноеРасписание		= ВыборкаПоРаботникиОрганизации.ПрежнееAVTШтатноеРасписание;
			// не записываем значения для этих ресурсов:
			//Движение.ЗанимаемыхСтавок
			//Движение.ВидЗанятости
			
			// Реквизиты
			Движение.ПервичныйДокумент			= ВыборкаПоШапкеДокумента.Ссылка;
			
		КонецЕсли;
		
		ИмяРегистра = "ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			Если ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Измерения
				Движение.Физлицо		= ВыборкаПоРаботникиОрганизации.Физлицо;
				Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			КонецЕсли;
		КонецЕсли;
		
		ИмяРегистра = "ПериодыРаботыРаботниковОрганизацийПоСовместительству";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			Если ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
				Движение = Движения[ИмяРегистра].Добавить();
				
				// Измерения
				Движение.Физлицо		= ВыборкаПоРаботникиОрганизации.Физлицо;
				Движение.Организация	= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ДатаОкончания	= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "НачисленияРаботникаОрганизации" Тогда
		
		ИмяРегистра = "ПлановыеНачисленияРаботниковОрганизаций";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период					= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			
			// Измерения
			Движение.Сотрудник				= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ВидРасчетаИзмерение	= ВыборкаПоРаботникиОрганизации.ВидРасчетаИзмерение;
			
			// Ресурсы
			Движение.Действие				= Перечисления.ВидыДействияСНачислением.Прекратить;
			Движение.Показатель1			= 0;
			Движение.Показатель2			= 0;
			Движение.Показатель3			= 0;
			Движение.Показатель4			= 0;
			Движение.Показатель5			= 0;
			Движение.Показатель6			= 0;
			Движение.ВидРасчета				= ВыборкаПоРаботникиОрганизации.ВидРасчета;
			
			// Реквизиты
			Движение.ПервичныйДокумент		= ВыборкаПоШапкеДокумента.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "УдержанияРаботниковОрганизации" Тогда
		
		ИмяРегистра = "ПлановыеУдержанияРаботниковОрганизаций";
		Если СтруктураПроведенияПоРегистрамСведений.Свойство(ИмяРегистра) Тогда
			
			Движение = Движения[ИмяРегистра].Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
			
			// Измерения
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.Физлицо					= ВыборкаПоРаботникиОрганизации.Физлицо;
			Движение.ВидРасчета					= ВыборкаПоРаботникиОрганизации.ВидРасчетаИзмерение;
			Движение.ДокументОснование			= ВыборкаПоРаботникиОрганизации.ДокументОснованиеРасчета;
			
			// Ресурсы
			Движение.Действие					= Перечисления.ВидыДействияСНачислением.Прекратить;
			Для Сч = 1 По 6 Цикл
				Движение["Показатель"+Сч]		= 0;
			КонецЦикла;
			
			// реквизиты
			Движение.Получатель					= ВыборкаПоРаботникиОрганизации.Получатель;
			Движение.ПрожиточныйМинимум			= ВыборкаПоРаботникиОрганизации.ПрожиточныйМинимум;
			Движение.ПорядокИсчисленияИздержек	= ВыборкаПоРаботникиОрганизации.ПорядокИсчисленияИздержек;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
		Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
			// ИЗМЕНЕНИЕ: Петрухин Андрей 24.06.2011 14:02  
		Движение.AVTШтатноеРасписание		= ВыборкаПоРаботникиОрганизации.ПрежнееAVTШтатноеРасписание;
		// Измерения
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.ПрежняяДолжность;
		
		// Ресурсы
		Движение.КоличествоСтавок			= ВыборкаПоРаботникиОрганизации.ПрежняяСтавка;
		
		// Реквизиты
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

//Blik 070717 67118 н 
Процедура ПроверитьДобавитьСтрокуВДвиженияПоРегиструНакопленияЗамещениеСотрудников(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)
	
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДатаУвольнения",		        ВыборкаПоРаботникиОрганизации.ДатаУвольнения);
		Запрос.УстановитьПараметр("ПодразделениеОрганизации",	ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение);
		Запрос.УстановитьПараметр("Должность",	                ВыборкаПоРаботникиОрганизации.ПрежняяДолжность);
		Запрос.УстановитьПараметр("AVTШтатноеРасписание",	    ВыборкаПоРаботникиОрганизации.ПрежнееAVTШтатноеРасписание);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРГ_ЗамещениеСотрудниковОстатки.ПодразделениеОрганизации,
		|	ПРГ_ЗамещениеСотрудниковОстатки.Должность,
		|	ПРГ_ЗамещениеСотрудниковОстатки.AVTШтатноеРасписание,
		|	ПРГ_ЗамещениеСотрудниковОстатки.КоличествоСтавокОстаток
		|ИЗ
		|	РегистрНакопления.ПРГ_ЗамещениеСотрудников.Остатки(&ДатаУвольнения, ) КАК ПРГ_ЗамещениеСотрудниковОстатки
		|ГДЕ
		|	ПРГ_ЗамещениеСотрудниковОстатки.ПодразделениеОрганизации = &ПодразделениеОрганизации
		|	И ПРГ_ЗамещениеСотрудниковОстатки.Должность = &Должность
		|	И ПРГ_ЗамещениеСотрудниковОстатки.AVTШтатноеРасписание = &AVTШтатноеРасписание";
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			Если Результат.КоличествоСтавокОстаток > 0 тогда
				
				Движение = Движения.ПРГ_ЗамещениеСотрудников.Добавить();
				
				// Свойства
				Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
				Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
			  
				// Измерения
				Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение;
				Движение.Должность					= ВыборкаПоРаботникиОрганизации.ПрежняяДолжность;
				Движение.AVTШтатноеРасписание		= ВыборкаПоРаботникиОрганизации.ПрежнееAVTШтатноеРасписание;
				
				// Ресурсы
				Движение.КоличествоСтавок			= Результат.КоличествоСтавокОстаток;
				
				// Реквизиты
				Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
				Движение.ТекстЗамещения				= "";

			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры 
//Blik 070717 67118 к

// По строкам документа, в которых указано "Прекращать стандартные вычеты" удаляются
// записи из рег-ра НДФЛПрименениеВычетов с "пустой" организацией (которые пишет док при проведении) - 
// тем самым восстанавливается то значение, которое было до проведения документа
Процедура УдалитьСтрокиВычетов()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОрганизацияНеУказана",Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) КАК ДатаПрекращения
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|		ПО (УвольнениеИзОрганизацийРаботникиОрганизации.ПрекращатьСтандартныеВычеты)
	|			И (ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) = НДФЛПрименениеВычетов.Период)
	|			И (НДФЛПрименениеВычетов.Организация = &ОрганизацияНеУказана)
	|			И УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо = НДФЛПрименениеВычетов.Физлицо
	|ГДЕ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
	|	И НДФЛПрименениеВычетов.Физлицо ЕСТЬ НЕ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.НДФЛПрименениеВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НаборЗаписей.Отбор.Физлицо.Использование = Истина;
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Период.Значение = Выборка.ДатаПрекращения;
		НаборЗаписей.Отбор.Физлицо.Значение = Выборка.Физлицо;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры // УдалитьСтрокиВычетов()

// По строкам документа, в которых указано "Прекращать стандартные вычеты" пишутся
// записи из рег-ра НДФЛПрименениеВычетов с "пустой" организацией - 
// тем самым прекращается предоставление вычетов по организации, из которой увольняется 
// работник
Процедура ПрекратитьВычетыРаботникам()

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОрганизацияНеУказана", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) КАК Период
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДатыРегистра.НомерСтроки КАК НомерСтроки,
	|			НДФЛПрименениеВычетов.Организация КАК Организация,
	|			ДатыРегистра.Период КАК ПериодРегистра
	|		ИЗ
	|			(ВЫБРАТЬ
	|				УвольнениеИзОрганизацийРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|				УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|				МАКСИМУМ(НДФЛПрименениеВычетов.Период) КАК Период
	|			ИЗ
	|				Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|					ПО (ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения, МЕСЯЦ), СЕКУНДА, 1) >= НДФЛПрименениеВычетов.Период)
	|						И УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо = НДФЛПрименениеВычетов.Физлицо
	|			ГДЕ
	|				УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
	|				И УвольнениеИзОрганизацийРаботникиОрганизации.ПрекращатьСтандартныеВычеты
	|			
	|			СГРУППИРОВАТЬ ПО
	|				УвольнениеИзОрганизацийРаботникиОрганизации.НомерСтроки,
	|				УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо) КАК ДатыРегистра
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	|				ПО ДатыРегистра.Физлицо = НДФЛПрименениеВычетов.Физлицо
	|					И ДатыРегистра.Период = НДФЛПрименениеВычетов.Период) КАК ПрименениеВычетов
	|		ПО УвольнениеИзОрганизацийРаботникиОрганизации.НомерСтроки = ПрименениеВычетов.НомерСтроки
	|ГДЕ
	|	УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
	|	И УвольнениеИзОрганизацийРаботникиОрганизации.ПрекращатьСтандартныеВычеты
	|	И ВЫБОР
	|			КОГДА УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация = &ОрганизацияНеУказана
	|				ТОГДА УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Организация
	|			ИНАЧЕ УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация
	|		КОНЕЦ = ПрименениеВычетов.Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.НДФЛПрименениеВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НаборЗаписей.Отбор.Физлицо.Использование = Истина;
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Период.Значение = Выборка.Период;
		НаборЗаписей.Отбор.Физлицо.Значение = Выборка.Физлицо;
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка);
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;

КонецПроцедуры // ПрекратитьВычетыРаботникам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров накопления по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамНакопления;

	//структура, содержащая имена регистров сведений по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Если документ перенесен - движения не делаем
	Если ДанныеПрошлойВерсии Тогда
		Возврат;
	КонецЕсли;
	///Вадим
	Если ПРГ_ПроверитьКадровыеДанныеВБудущем() тогда
		Отказ=истина;
		возврат;
	Конецесли;	
	///ВадимКонец
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// Создадим и заполним структуры, содержащие имена регистров, по которым в зависимости от типа учета
			// проводится документ. В дальнейшем будем считать, что если для регистра не создан ключ в структуре,
			// то проводить по нему не надо.
			ЗаполнитьСтруктуруПроведенияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПроведенияПоРегистрамСведений);
			
			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента);
			ВыборкаПоСтрокамДокумента = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл

				// выберем все виды строк запроса для текущей строки документа
				ВыборкаПоВидамСтрокЗапроса = ВыборкаПоСтрокамДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВидамСтрокЗапроса.Следующий() Цикл

					// Для каждого вида строки запроса свои проверки
					ВидСтрокиЗапроса = ВыборкаПоВидамСтрокЗапроса.ВидСтрокиЗапроса;
					ВыборкаСтрокЗапроса = ВыборкаПоВидамСтрокЗапроса.Выбрать();

					Если ВидСтрокиЗапроса = "РабочиеМестаДоУвольнения" Тогда

						// проверим виды занятости работника в организации
						ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ВыборкаСтрокЗапроса, Отказ, Заголовок);

					Иначе

						// обходим строки запроса, проверяем данные и формируем движения
						Пока ВыборкаСтрокЗапроса.Следующий() Цикл
							
							ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок);
							
							Если НЕ Отказ Тогда
								ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, СтруктураПроведенияПоРегистрамСведений);
								ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
								//Blik 070717 67118 н
								ПроверитьДобавитьСтрокуВДвиженияПоРегиструНакопленияЗамещениеСотрудников(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
								//Blik 070717 67118 к
							КонецЕсли;
							
						КонецЦикла;

					КонецЕсли;

				КонецЦикла;

			КонецЦикла;

			Если НЕ Отказ Тогда
				ПрекратитьВычетыРаботникам();
			КонецЕсли;
		КонецЕсли;
 
		УвольнениеИзОрганизацийПереопределяемый.ДобавитьДополнительныеДвижения(ЭтотОбъект, Отказ, Заголовок);

	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения" модуля объекта
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	
	Если ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.Организация,
		|	СотрудникиОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	СотрудникиОрганизаций.ВидДоговора
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Сотрудник
		|	И НЕ СотрудникиОрганизаций.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Подряда), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.Авторский))";
		Запрос.УстановитьПараметр("Сотрудник",	Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			//Если Выборка.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда
			//	ИЛИ Выборка.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
			//	Возврат;
			//КонецЕсли;
			
			Если Не Выборка.ОбособленноеПодразделение.Пустая() Тогда
				Организация = Выборка.ОбособленноеПодразделение;
			Иначе
				Организация = Выборка.Организация;
			КонецЕсли;
			
			НоваяСтрока = РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ДатаУвольнения				= ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
			НоваяСтрока.ПорядокРасчетаОтпуска		= Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням;
			НоваяСтрока.ПризнакКомпенсацииОтпуска	= Истина;
			РассчитатьКоличествоДнейОтпуска(НоваяСтрока);
		КонецЕсли;
		
	Иначе
		
		УвольнениеИзОрганизацийПереопределяемый.ОбработкаЗаполненияДополнительно(ТипОснования, ЭтотОбъект, Основание);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначенияЗК.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	ОбщегоНазначенияЗК.ДобавитьПрефиксУзла(Префикс);
	
	// получить новый номер документа по совокупности кадровых документов
	ПроцедурыУправленияПерсоналом.ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Префикс, Дата);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылка.Проведен Тогда // удалим строки, "закрывающие" вычеты
		УдалитьСтрокиВычетов();
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	Движения.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.РежимЗаписиРегистратора	= РежимЗаписи;
	Движения.ПериодыРаботыРаботниковОрганизацийПоСовместительству.РежимЗаписиРегистратора		= РежимЗаписи;
	
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// проверим уникальность номера с точки зрения кадровой нумерации
	ПроцедурыУправленияПерсоналом.ПроверкаУникальностиНомераКадровогоДокумента(ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Дата, Ссылка);
	
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПриЗаписи(Отказ, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры // ПриЗаписи()


///Вадим 03.09.2013 15:32:18
функция ПРГ_ПроверитьКадровыеДанныеВБудущем()
    отказ=ложь;

	Для каждого стр Из РаботникиОрганизации Цикл
  	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.Регистратор,
		|	РаботникиОрганизаций.Сотрудник
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Сотрудник = &Сотрудник
		|	И РаботникиОрганизаций.Период > &Период";

	Запрос.УстановитьПараметр("Период", КонецДня(стр.ДатаУвольнения)+1);
	Запрос.УстановитьПараметр("Сотрудник", стр.Сотрудник);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		отказ=истина;
		сообщить("У сотрудника "+стр.Сотрудник.Наименование+" есть запись в кадровой истории от "+формат(ВыборкаДетальныеЗаписи.Период,"ДФ=dd.MM.yyyy")+" документ "+СокрЛП(ВыборкаДетальныеЗаписи.Регистратор));
	КонецЦикла;
    КонецЦикла;
	возврат отказ;
КонецФункции
//ВадимКонец

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

мВосстанавливатьДвижения = Ложь;
