////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета	- строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Справка" Тогда
		Если Дата < '20130701' Тогда
			ТабДокумент = ПечатьСправки();
		Иначе
			ТабДокумент = ПечатьСправки2013();
		КонецЕсли;
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним),,ТабДокумент);
	КонецЕсли;
	
КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("Справка", "Справка");
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьДанныеСтрахователя()

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(Организация,"РегистрационныйНомерФСС, ДополнительныйКодФСС, КодПодчиненностиФСС, НаименованиеТерриториальногоОрганаФСС"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаСрезПоследних.Должность КАК ДолжностьРуководителя,
	|	ОтветственныеЛицаСрезПоследних.ОтветственноеЛицо,
	|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо,
	|	ФизическиеЛица.Комментарий
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&Дата,
	|			ОтветственноеЛицо В (ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер), ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель))
	|				И СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
			ГлавныйБухгалтер = Выборка.ФизическоеЛицо
		ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
			Руководитель = Выборка.ФизическоеЛицо;
			ДолжностьРуководителя = Выборка.ДолжностьРуководителя;
		КонецЕсли;
	
	КонецЦикла;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(300)) КАК ТелефонОрганизации
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Организация
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТелефонОрганизации = СокрЛП(Выборка.ТелефонОрганизации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСотрудника()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Физлицо
	|ПОМЕСТИТЬ ВТФизлицо
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.СтраховойНомерПФР,
	|	ФизическиеЛица.Наименование,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ВЫБОР
	|		КОГДА АдресаФактические.Поле1 ЕСТЬ NULL 
	|			ТОГДА "","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9 + "","" + ВЫБОР
	|					КОГДА АдресаРегистрации.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
	|						ТОГДА ""дом""
	|					ИНАЧЕ ""владение""
	|				КОНЕЦ + "","" + ВЫБОР
	|					КОГДА АдресаРегистрации.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
	|						ТОГДА ""корпус""
	|					ИНАЧЕ ""строение""
	|				КОНЕЦ + "","" + ВЫБОР
	|					КОГДА АдресаРегистрации.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
	|						ТОГДА ""кв.""
	|					ИНАЧЕ ""оф.""
	|				КОНЕЦ
	|		ИНАЧЕ "","" + АдресаФактические.Поле1 + "","" + АдресаФактические.Поле2 + "","" + АдресаФактические.Поле3 + "","" + АдресаФактические.Поле4 + "","" + АдресаФактические.Поле5 + "","" + АдресаФактические.Поле6 + "","" + АдресаФактические.Поле7 + "","" + АдресаФактические.Поле8 + "","" + АдресаФактические.Поле9 + "","" + ВЫБОР
	|				КОГДА АдресаФактические.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
	|					ТОГДА ""дом""
	|				ИНАЧЕ ""владение""
	|			КОНЕЦ + "","" + ВЫБОР
	|				КОГДА АдресаФактические.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
	|					ТОГДА ""корпус""
	|				ИНАЧЕ ""строение""
	|			КОНЕЦ + "","" + ВЫБОР
	|				КОГДА АдресаФактические.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
	|					ТОГДА ""кв.""
	|				ИНАЧЕ ""оф.""
	|			КОНЕЦ
	|	КОНЕЦ КАК Адрес,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид КАК ВидДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия КАК СерияДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер КАК НомерДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи КАК ДатаВыдачиДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК КемВыданДокумент
	|ИЗ
	|	ВТФизлицо КАК Физлица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Физлица.Физлицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаФактические
	|		ПО Физлица.Физлицо = АдресаФактические.Объект
	|			И (АдресаФактические.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
	|			И (АдресаФактические.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
	|		ПО Физлица.Физлицо = АдресаРегистрации.Объект
	|			И (АдресаРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|			И (АдресаРегистрации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|				&Дата,
	|				Физлицо В
	|					(ВЫБРАТЬ
	|						Физлица.Физлицо
	|					ИЗ
	|						ВТФизлицо КАК Физлица)) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО Физлица.Физлицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&Дата,
	|				Физлицо В
	|					(ВЫБРАТЬ
	|						Физлица.Физлицо
	|					ИЗ
	|						ВТФизлицо КАК Физлица)) КАК ФИОФизЛицСрезПоследних
	|		ПО Физлица.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо";
	Запрос.УстановитьПараметр("Ссылка", Сотрудник);
	Запрос.УстановитьПараметр("Дата", Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОЗаработке()

	Если ГодС = 0 И ГодПо = 0 Тогда
		Возврат
	КонецЕсли;	

	Если Сотрудник.Пустая() Или Организация.Пустая() Тогда
		Возврат
	КонецЕсли;
	
	МассивЛет = Новый Массив;
	Если ГодС = 0 Тогда
		МассивЛет.Добавить(ГодПо);
	ИначеЕсли ГодПо = 0 Тогда 	
		МассивЛет.Добавить(ГодС);
	Иначе 	
		ГодМежду = Мин(ГодС, ГодПо);
		Пока ГодМежду <= Макс(ГодС, ГодПо) Цикл
			МассивЛет.Добавить(ГодМежду);
			ГодМежду = ГодМежду + 1;	
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеОЗаработке",	ПроведениеРасчетов.ЗаработокДляВыплатыПособийСоцСтрахованияС2011года(МассивЛет, ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(Сотрудник,"Физлицо"), Организация, Ложь, Истина,,, Истина));
	Запрос.УстановитьПараметр("ДатаЗакона213ФЗ",	ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОЗаработке.РасчетныйГод,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ДанныеОЗаработке.БазовыйПериодНачало, ГОД) < &ДатаЗакона213ФЗ
	|			ТОГДА &ДатаЗакона213ФЗ
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДанныеОЗаработке.БазовыйПериодНачало, ГОД)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ДанныеОЗаработке.Заработок
	|ПОМЕСТИТЬ ВТДанныеОЗаработке
	|ИЗ
	|	&ДанныеОЗаработке КАК ДанныеОЗаработке
	|ГДЕ
	|	ДанныеОЗаработке.Заработок > 0";
	Запрос.Выполнить();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыРегистра.РасчетныйГод,
	|	ВЫБОР
	|		КОГДА ДатыРегистра.Заработок >= ПредельнаяВеличинаБазыСтраховыхВзносов.РазмерФСС
	|			ТОГДА ПредельнаяВеличинаБазыСтраховыхВзносов.РазмерФСС
	|		ИНАЧЕ ДатыРегистра.Заработок
	|	КОНЕЦ КАК Заработок
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПредельнаяВеличинаБазыСтраховыхВзносов.Период) КАК Период,
	|		ДанныеОЗаработке.РасчетныйГод КАК РасчетныйГод,
	|		ДанныеОЗаработке.Заработок КАК Заработок
	|	ИЗ
	|		ВТДанныеОЗаработке КАК ДанныеОЗаработке
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредельнаяВеличинаБазыСтраховыхВзносов КАК ПредельнаяВеличинаБазыСтраховыхВзносов
	|			ПО ДанныеОЗаработке.БазовыйПериодНачало >= ПредельнаяВеличинаБазыСтраховыхВзносов.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеОЗаработке.РасчетныйГод,
	|		ДанныеОЗаработке.Заработок) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредельнаяВеличинаБазыСтраховыхВзносов КАК ПредельнаяВеличинаБазыСтраховыхВзносов
	|		ПО ДатыРегистра.Период = ПредельнаяВеличинаБазыСтраховыхВзносов.Период";
	
	ДанныеОЗаработке.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ПозднийГод = 0;
	Для каждого Значение Из МассивЛет Цикл
		ПозднийГод = Макс(Значение, ПозднийГод);
	КонецЦикла;
	ГоловнаяОрганизация = ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
	Запрос.УстановитьПараметр("ФизЛицо", ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(Сотрудник,"Физлицо"));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Окончание", КонецДня(Дата(ПозднийГод, 12, 31)));
	Запрос.УстановитьПараметр("ПоздняяДата", Макс(КонецДня(Дата(ПозднийГод, 12, 31)),КонецГода(ОбщегоНазначенияЗК.ПолучитьРабочуюДату())));
	
	ОтбиратьПериодыПоОП = Организация <> ГоловнаяОрганизация;
	Если Не ОтбиратьПериодыПоОП Тогда
		ОтбиратьПериодыПоОП = ОбщегоНазначенияЗК.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация).Количество() > 0;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
	|	И СотрудникиОрганизаций.Физлицо = &Физлицо
	|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)";
	Запрос.Выполнить();
	
	Если ОтбиратьПериодыПоОП Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
		|		ИНАЧЕ РаботникиОрганизаций.Период
		|	КОНЕЦ КАК Период,
		|	РаботникиОрганизаций.ПричинаИзмененияСостояния,
		|	РаботникиОрганизаций.ОбособленноеПодразделение
		|ПОМЕСТИТЬ ВТДвижения
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Сотрудник В
		|			(ВЫБРАТЬ
		|				Сотрудники.Ссылка
		|			ИЗ
		|				ВТСотрудники КАК Сотрудники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Работники.ПериодЗавершения,
		|	Работники.ПричинаИзмененияСостоянияЗавершения,
		|	Работники.ОбособленноеПодразделениеЗавершения
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
		|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
		|			И (ПериодыПерекрытия.Период > Работники.Период)
		|			И Работники.Сотрудник = ПериодыПерекрытия.Сотрудник
		|ГДЕ
		|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И Работники.Сотрудник В
		|			(ВЫБРАТЬ
		|				Сотрудники.Ссылка
		|			ИЗ
		|				ВТСотрудники КАК Сотрудники)
		|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыПриемов.Период КАК ДатаПриема,
		|	ЕСТЬNULL(МИНИМУМ(ДатыУвольнений.Период), &ПоздняяДата) КАК ДатаУвольнения,
		|	ДатыПриемов.ОбособленноеПодразделение
		|ПОМЕСТИТЬ ВТДатыПриемовУвольнений
		|ИЗ
		|	ВТДвижения КАК ДатыПриемов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвижения КАК ДатыУвольнений
		|		ПО (ДатыУвольнений.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение), ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))
		|			И (ДатыПриемов.Период < ДатыУвольнений.Период
		|				ИЛИ ДатыПриемов.Период = ДатыУвольнений.Период
		|					И ДатыПриемов.ПричинаИзмененияСостояния <> ДатыУвольнений.ПричинаИзмененияСостояния)
		|ГДЕ
		|	ДатыПриемов.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу), ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение))
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыПриемов.Период,
		|	ДатыПриемов.ОбособленноеПодразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыПриемовУвольнений.ДатаПриема КАК ПериодРаботыС,
		|	ВЫБОР
		|		КОГДА ДатыПриемовУвольнений.ДатаУвольнения < &Окончание
		|			ТОГДА ДатыПриемовУвольнений.ДатаУвольнения
		|		ИНАЧЕ &Окончание
		|	КОНЕЦ КАК ПериодРаботыПо
		|ИЗ
		|	ВТДатыПриемовУвольнений КАК ДатыПриемовУвольнений
		|ГДЕ
		|	ДатыПриемовУвольнений.ДатаПриема <= &Окончание
		|	И ДатыПриемовУвольнений.ОбособленноеПодразделение = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРаботыС";
		
		ТЗПериодов = Запрос.Выполнить().Выгрузить();
		
		Н = ТЗПериодов.Количество() - 1;
		Пока Н > 0 Цикл
			
			ТекущаяЗапись = ТЗПериодов[Н];
			ПредшествующаяЗапись = ТЗПериодов[Н-1];
			
			Если ТекущаяЗапись.ПериодРаботыС = КонецДня(ПредшествующаяЗапись.ПериодРаботыПо) + 1 Или КонецДня(ТекущаяЗапись.ПериодРаботыС) = КонецДня(ПредшествующаяЗапись.ПериодРаботыПо) Тогда
				// объединим записи в одну
				ПредшествующаяЗапись.ПериодРаботыПо = ТекущаяЗапись.ПериодРаботыПо;
				ТЗПериодов.Удалить(ТекущаяЗапись);
			КонецЕсли;
			Н = Н - 1;
			
		КонецЦикла;
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
		|		ИНАЧЕ РаботникиОрганизаций.Период
		|	КОНЕЦ КАК Период,
		|	РаботникиОрганизаций.ПричинаИзмененияСостояния
		|ПОМЕСТИТЬ ВТДвижения
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Сотрудник В
		|			(ВЫБРАТЬ
		|				Сотрудники.Ссылка
		|			ИЗ
		|				ВТСотрудники КАК Сотрудники)
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу), ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыПриемов.Период КАК ДатаПриема,
		|	ЕСТЬNULL(МИНИМУМ(ДатыУвольнений.Период), &ПоздняяДата) КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТДатыПриемовУвольнений
		|ИЗ
		|	ВТДвижения КАК ДатыПриемов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвижения КАК ДатыУвольнений
		|		ПО ДатыПриемов.Период <= ДатыУвольнений.Период
		|			И (ДатыУвольнений.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|ГДЕ
		|	ДатыПриемов.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыПриемов.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыПриемовУвольнений.ДатаПриема КАК ПериодРаботыС,
		|	ВЫБОР
		|		КОГДА ДатыПриемовУвольнений.ДатаУвольнения < &Окончание
		|			ТОГДА ДатыПриемовУвольнений.ДатаУвольнения
		|		ИНАЧЕ &Окончание
		|	КОНЕЦ КАК ПериодРаботыПо
		|ИЗ
		|	ВТДатыПриемовУвольнений КАК ДатыПриемовУвольнений
		|ГДЕ
		|	ДатыПриемовУвольнений.ДатаПриема <= &Окончание
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРаботыС";
		ТЗПериодов = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Если ТЗПериодов.Количество() = 0 Тогда
		ПериодыРаботы.Загрузить(ТЗПериодов);
		Возврат;
	КонецЕсли;
	Запрос.УстановитьПараметр("Начало", ТЗПериодов[0].ПериодРаботыС);
	
	ДатаСтрахованияВсехВременноПребывающих = РасчетСтраховыхВзносов.ДатаСтрахованияВсехВременноПребывающих();
	Окончание = КонецДня(Дата(ПозднийГод, 12, 31));
	Начало = ТЗПериодов[0].ПериодРаботыС;
	Если Начало >= ДатаСтрахованияВсехВременноПребывающих Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Начало КАК Период,
		|	ВЫБОР
		|		КОГДА ГражданствоФизЛицСрезПоследних.ВидЗастрахованногоЛица = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыНестрахуемые)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИмеетПравоНаСтрахование
		|ИЗ
		|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&Начало, ФизЛицо = &Физлицо) КАК ГражданствоФизЛицСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГражданствоФизЛиц.Период,
		|	ВЫБОР
		|		КОГДА ГражданствоФизЛиц.ВидЗастрахованногоЛица = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыНестрахуемые)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|ГДЕ
		|	ГражданствоФизЛиц.Период МЕЖДУ &Начало И &Окончание
		|	И ГражданствоФизЛиц.ФизЛицо = &Физлицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	ИначеЕсли Окончание < ДатаСтрахованияВсехВременноПребывающих Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Начало КАК Период,
		|	НЕ ГражданствоФизЛицСрезПоследних.НеИмеетПравоНаПенсию КАК ИмеетПравоНаСтрахование
		|ИЗ
		|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&Начало, ФизЛицо = &Физлицо) КАК ГражданствоФизЛицСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГражданствоФизЛиц.Период,
		|	НЕ ГражданствоФизЛиц.НеИмеетПравоНаПенсию
		|ИЗ
		|	РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|ГДЕ
		|	ГражданствоФизЛиц.Период МЕЖДУ &Начало И &Окончание
		|	И ГражданствоФизЛиц.ФизЛицо = &Физлицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	Иначе
		Запрос.УстановитьПараметр("ДатаСтрахованияВсехВременноПребывающих", ДатаСтрахованияВсехВременноПребывающих);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Начало КАК Период,
		|	НЕ ГражданствоФизЛицСрезПоследних.НеИмеетПравоНаПенсию КАК ИмеетПравоНаСтрахование
		|ИЗ
		|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&Начало, ФизЛицо = &Физлицо) КАК ГражданствоФизЛицСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГражданствоФизЛиц.Период,
		|	НЕ ГражданствоФизЛиц.НеИмеетПравоНаПенсию
		|ИЗ
		|	РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|ГДЕ
		|	ГражданствоФизЛиц.ФизЛицо = &Физлицо
		|	И ГражданствоФизЛиц.Период >= &Начало
		|	И ГражданствоФизЛиц.Период < &ДатаСтрахованияВсехВременноПребывающих
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ДатаСтрахованияВсехВременноПребывающих,
		|	ВЫБОР
		|		КОГДА ГражданствоФизЛицСрезПоследних.ВидЗастрахованногоЛица = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыНестрахуемые)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаСтрахованияВсехВременноПребывающих, ФизЛицо = &Физлицо) КАК ГражданствоФизЛицСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГражданствоФизЛиц.Период,
		|	ВЫБОР
		|		КОГДА ГражданствоФизЛиц.ВидЗастрахованногоЛица = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыНестрахуемые)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|ГДЕ
		|	ГражданствоФизЛиц.ФизЛицо = &Физлицо
		|	И ГражданствоФизЛиц.Период > &ДатаСтрахованияВсехВременноПребывающих
		|	И ГражданствоФизЛиц.Период <= &Окончание
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
	КонецЕсли;
	
	ТЗПраваНаСтрахование = Запрос.Выполнить().Выгрузить();
	
	Если ТЗПраваНаСтрахование.Найти(Ложь, "ИмеетПравоНаСтрахование") = Неопределено Или ТЗПериодов.Количество() = 0 Тогда
		ПериодыРаботы.Загрузить(ТЗПериодов);
	Иначе
		
		Если ТЗПраваНаСтрахование[0].Период > ТЗПериодов[0].ПериодРаботыС Тогда
			НоваяСтрока = ТЗПраваНаСтрахование.Вставить(0);
			НоваяСтрока.Период = ТЗПериодов[0].ПериодРаботыС;
			НоваяСтрока.ИмеетПравоНаСтрахование = Истина;
		КонецЕсли;
		
		Н = ТЗПраваНаСтрахование.Количество() - 1;
		Пока Н > 0 Цикл
			ТекущаяЗапись = ТЗПраваНаСтрахование[Н];
			ПредшествующаяЗапись = ТЗПраваНаСтрахование[Н-1];
			Если ТекущаяЗапись.ИмеетПравоНаСтрахование = ПредшествующаяЗапись.ИмеетПравоНаСтрахование Тогда
				// объединим записи в одну
				ТЗПраваНаСтрахование.Удалить(ТекущаяЗапись);
			КонецЕсли;
			Н = Н - 1;
		КонецЦикла;
		
		ВременнаяТаблица = ПериодыРаботы.ВыгрузитьКолонки();
		Н = ТЗПраваНаСтрахование.Количество() - 1;
		Для каждого СтрокаТЗ Из ТЗПериодов Цикл
			Для Сч = 0 По Н Цикл
				Если Сч = Н Тогда
					Если ТЗПраваНаСтрахование[Сч].ИмеетПравоНаСтрахование И ТЗПраваНаСтрахование[Сч].Период <= СтрокаТЗ.ПериодРаботыПо Тогда
						НоваяСтрока = ВременнаяТаблица.Добавить();
						НоваяСтрока.ПериодРаботыС = Макс(СтрокаТЗ.ПериодРаботыС, ТЗПраваНаСтрахование[Сч].Период);
						НоваяСтрока.ПериодРаботыПо = СтрокаТЗ.ПериодРаботыПо;
					КонецЕсли;
					Прервать;
				ИначеЕсли ТЗПраваНаСтрахование[Сч].Период < СтрокаТЗ.ПериодРаботыС И ТЗПраваНаСтрахование[Сч + 1].Период < СтрокаТЗ.ПериодРаботыС Тогда
					Продолжить;
				КонецЕсли;
				Если ТЗПраваНаСтрахование[Сч].ИмеетПравоНаСтрахование Тогда
					НоваяСтрока = ВременнаяТаблица.Добавить();
					НоваяСтрока.ПериодРаботыС = Макс(СтрокаТЗ.ПериодРаботыС, ТЗПраваНаСтрахование[Сч].Период);
					НоваяСтрока.ПериодРаботыПо = Мин(СтрокаТЗ.ПериодРаботыПо, НачалоДня(ТЗПраваНаСтрахование[Сч + 1].Период) - 86400);
					Если НоваяСтрока.ПериодРаботыПо = СтрокаТЗ.ПериодРаботыПо Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;			
		КонецЦикла;
		
		Н = ВременнаяТаблица.Количество() - 1;
		Пока Н > 0 Цикл
			ТекущаяЗапись = ВременнаяТаблица[Н];
			ПредшествующаяЗапись = ВременнаяТаблица[Н-1];
			Если ТекущаяЗапись.ПериодРаботыС = КонецДня(ПредшествующаяЗапись.ПериодРаботыПо) + 1 
				Или КонецДня(ТекущаяЗапись.ПериодРаботыС) = КонецДня(ПредшествующаяЗапись.ПериодРаботыПо) Тогда
				// объединим записи в одну
				ПредшествующаяЗапись.ПериодРаботыПо = ТекущаяЗапись.ПериодРаботыПо;
				ВременнаяТаблица.Удалить(ТекущаяЗапись);
			КонецЕсли;
			Н = Н - 1;
		КонецЦикла;
		
		ПериодыРаботы.Загрузить(ВременнаяТаблица)
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДниБолезниУходаЗаДетьми()

	Если ГодС = 0 И ГодПо = 0 Тогда
		Возврат
	КонецЕсли;	

	Если Сотрудник.Пустая() Или Организация.Пустая() Тогда
		Возврат
	КонецЕсли;
	
	МассивЛет = Новый Массив;
	Если ГодС = 0 Тогда
		МассивЛет.Добавить(ГодПо);
	ИначеЕсли ГодПо = 0 Тогда 	
		МассивЛет.Добавить(ГодС);
	Иначе 	
		ГодМежду = Мин(ГодС, ГодПо);
		Пока ГодМежду <= Макс(ГодС, ГодПо) Цикл
			МассивЛет.Добавить(ГодМежду);
			ГодМежду = ГодМежду + 1;	
		КонецЦикла;
	КонецЕсли;
	
	РаннийГод = 10000;
	ПозднийГод = 0;
	Для каждого Значение Из МассивЛет Цикл
		РаннийГод = Мин(Значение, РаннийГод);
		ПозднийГод = Макс(Значение, ПозднийГод);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивЛет", МассивЛет);
	Запрос.УстановитьПараметр("ФизЛицо", ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(Сотрудник,"Физлицо"));
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаДоЗакона212", ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() - 1);
    Запрос.УстановитьПараметр("ОграничениеПоПериодуРегистрации", Макс(ОбщегоНазначенияЗК.ПолучитьРабочуюДату(),КонецДня(Дата(ПозднийГод, 12, 31))));
	Запрос.УстановитьПараметр("ДатаСтрахованияВсехВременноПребывающих", РасчетСтраховыхВзносов.ДатаСтрахованияВсехВременноПребывающих());

	ДеньПериода = Дата(РаннийГод, 1, 1);
	Запрос.Текст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(ДеньПериода,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериоды";
	Запрос.Выполнить();
	ДеньПериода = ДеньПериода + 86400;
	ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(ДеньПериода,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериодыМесяц";
	Пока ДеньПериода < Дата(ПозднийГод, 12, 31) Цикл
		ДеньПериода = ДеньПериода + 86400;
		ПериодыТекст = ПериодыТекст +" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(ДеньПериода,"ДФ=гггг,М,д,Ч,м,с") + ")";
		Если День(ДеньПериода) = День(КонецМесяца(ДеньПериода)) Тогда
			Запрос.Текст = ПериодыТекст;
			Запрос.Выполнить();
			ПериодыТекст = 
			"ВЫБРАТЬ
			|	ДатыПериода.Период
			|ПОМЕСТИТЬ ВТПериодыПромежуточная
			|ИЗ
			|	ВТПериодыМесяц КАК ДатыПериода
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДатыПериода.Период
			|ИЗ
			|	ВТПериоды КАК ДатыПериода
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПериоды
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПериодыМесяц
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПериодыПромежуточная.Период
			|ПОМЕСТИТЬ ВТПериоды
			|ИЗ
			|	ВТПериодыПромежуточная КАК ПериодыПромежуточная
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПериодыПромежуточная"; 

			Запрос.Текст = ПериодыТекст;
			Запрос.Выполнить();
			ПериодыТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(ДеньПериода,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период ПОМЕСТИТЬ ВТПериодыМесяц ГДЕ Ложь";
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
	|	И СотрудникиОрганизаций.Физлицо = &Физлицо
	|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сторно,
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета
	|ПОМЕСТИТЬ ВТПериодыОтпускаПоУходуЗаРебенком
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						СотрудникиФизлица.Ссылка
	|					ИЗ
	|						ВТСотрудники КАК СотрудникиФизлица)
	|				И ФизЛицо = &ФизЛицо
	|				И ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты), ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет), ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет))
	|				И Организация = &ГоловнаяОрганизация
	|				И ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И ГОД(ПериодДействия) В (&МассивЛет)
	|				И ПериодРегистрации <= &ОграничениеПоПериодуРегистрации) КАК ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПериода.Период,
	|	ПериодыОтпускаПоУходуЗаРебенком.ВидРасчета
	|ПОМЕСТИТЬ ВТДатыОтпуска
	|ИЗ
	|	ВТПериоды КАК ДатыПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыОтпускаПоУходуЗаРебенком КАК ПериодыОтпускаПоУходуЗаРебенком
	|		ПО (ДатыПериода.Период МЕЖДУ ПериодыОтпускаПоУходуЗаРебенком.ПериодДействияНачало И ПериодыОтпускаПоУходуЗаРебенком.ПериодДействияКонец)
	|ГДЕ
	|	ПериодыОтпускаПоУходуЗаРебенком.ВидРасчета ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПериода.Период,
	|	ПериодыОтпускаПоУходуЗаРебенком.ВидРасчета
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ПериодыОтпускаПоУходуЗаРебенком.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДатыОтпуска.Период, МЕСЯЦ) КАК ПериодДействия,
	|	ДатыОтпуска.Период КАК ПериодДействияНачало,
	|	ДатыОтпуска.Период КАК ПериодДействияКонец,
	|	""Отпуск по уходу за ребенком"" КАК Наименование,
	|	1 КАК ДнейИсключаемыхОтсутствий
	|ПОМЕСТИТЬ ВТДнейОтпускаПоУходуЗаРебенком
	|ИЗ
	|	ВТДатыОтпуска КАК ДатыОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПериоды";
	Запрос.Выполнить();
	
	ТекстВТСтраховыеВзносы = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияОрганизаций.ВидПособияСоциальногоСтрахования В (ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание))
	|			ТОГДА ""Период временной нетрудоспособности""
	|		КОГДА ОсновныеНачисленияОрганизаций.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|			ТОГДА ""Отпуск по беременности и родам""
	|		КОГДА ОсновныеНачисленияОрганизаций.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)
	|				И ОсновныеНачисленияОрганизаций.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
	|				И ОсновныеНачисленияОрганизаций.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2300)
	|			ТОГДА ""Период временной нетрудоспособности""
	|		ИНАЧЕ ОсновныеНачисленияОрганизаций.Наименование
	|	КОНЕЦ КАК Наименование
	|ПОМЕСТИТЬ ВТНеоблагаемыеВзносамиОтсутствия
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
	|	И НЕ ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени
	|	И НЕ ЕСТЬNULL(ОсновныеНачисленияОрганизаций.КодДоходаСтраховыеВзносы.ВходитВБазуФСС, ЛОЖЬ)
	|	И ОсновныеНачисленияОрганизаций.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.НулеваяСумма)
	|	И НЕ ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни),
	|	""Период временной нетрудоспособности""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности),
	|	""Отпуск по беременности и родам""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисления.ПериодДействия,
	|	СУММА(ОсновныеНачисления.ДнейИсключаемыхОтсутствий) КАК ДнейИсключаемыхОтсутствий,
	|	ОсновныеНачисления.ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.Наименование
	|ПОМЕСТИТЬ ВТПериодыИсключаемыхОтсутствий
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействия КАК ПериодДействия,
	|		РАЗНОСТЬДАТ(ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ) * ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ДнейИсключаемыхОтсутствий,
	|		ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало КАК ПериодДействияНачало,
	|		ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец КАК ПериодДействияКонец,
	|		НеоблагаемыеВзносамиОтсутствия.Наименование КАК Наименование
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|				Сотрудник В
	|						(ВЫБРАТЬ
	|							СотрудникиФизлица.Ссылка
	|						ИЗ
	|							ВТСотрудники КАК СотрудникиФизлица)
	|					И ФизЛицо = &ФизЛицо
	|					И ВидРасчета В
	|						(ВЫБРАТЬ
	|							НеоблагаемыеВзносамиОтсутствия.Ссылка
	|						ИЗ
	|							ВТНеоблагаемыеВзносамиОтсутствия КАК НеоблагаемыеВзносамиОтсутствия)
	|					И Организация = &ГоловнаяОрганизация
	|					И ОбособленноеПодразделение = &ОбособленноеПодразделение
	|					И ГОД(ПериодДействия) В (&МассивЛет)
	|					И ПериодДействия > &ДатаДоЗакона212
	|					И ПериодРегистрации <= &ОграничениеПоПериодуРегистрации) КАК ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНеоблагаемыеВзносамиОтсутствия КАК НеоблагаемыеВзносамиОтсутствия
	|			ПО ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета = НеоблагаемыеВзносамиОтсутствия.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОсновныеНачисления.ПериодДействия,
	|		ОсновныеНачисления.ДнейИсключаемыхОтсутствий,
	|		ОсновныеНачисления.ПериодДействияНачало,
	|		ОсновныеНачисления.ПериодДействияКонец,
	|		ОсновныеНачисления.Наименование
	|	ИЗ
	|		ВТДнейОтпускаПоУходуЗаРебенком КАК ОсновныеНачисления
	|	ГДЕ
	|		ОсновныеНачисления.ПериодДействия > &ДатаДоЗакона212) КАК ОсновныеНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисления.ПериодДействия,
	|	ОсновныеНачисления.ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыИсключаемыхОтсутствий.ПериодДействия КАК Период
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТПериодыИсключаемыхОтсутствий КАК ПериодыИсключаемыхОтсутствий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Месяц,
	|	ВЫБОР
	|		КОГДА Периоды.Период < &ДатаСтрахованияВсехВременноПребывающих
	|			ТОГДА НЕ ЕСТЬNULL(ГражданствоФизЛиц.НеИмеетПравоНаПенсию, ЛОЖЬ)
	|		КОГДА ГражданствоФизЛиц.ВидЗастрахованногоЛица = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыНестрахуемые)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИмеетПравоНаСтрахование
	|ПОМЕСТИТЬ ВТДанныеОПравеНаСтрахование
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО (ГражданствоФизЛиц.ФизЛицо = &ФизЛицо)
	|				И (Периоды.Период >= НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО Периоды.ПериодРегистра = ГражданствоФизЛиц.Период
	|			И (ГражданствоФизЛиц.ФизЛицо = &Физлицо)";

	ТекстСтраховыеВзносы = 
	"ВЫБРАТЬ
	|	ГОД(ПериодыИсключаемыхОтсутствий.ПериодДействия) КАК РасчетныйГод,
	|	ПериодыИсключаемыхОтсутствий.ДнейИсключаемыхОтсутствий КАК Дни,
	|	ПериодыИсключаемыхОтсутствий.ПериодДействияНачало КАК ПериодС,
	|	ПериодыИсключаемыхОтсутствий.ПериодДействияКонец КАК ПериодПо,
	|	ПериодыИсключаемыхОтсутствий.Наименование КАК НаименованиеПериода
	|ИЗ
	|	ВТПериодыИсключаемыхОтсутствий КАК ПериодыИсключаемыхОтсутствий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравеНаСтрахование КАК ДанныеОПравеНаСтрахование
	|		ПО ПериодыИсключаемыхОтсутствий.ПериодДействия = ДанныеОПравеНаСтрахование.Месяц
	|ГДЕ
	|	ДанныеОПравеНаСтрахование.ИмеетПравоНаСтрахование
	|	И ПериодыИсключаемыхОтсутствий.ДнейИсключаемыхОтсутствий > 0";
	
	ТекстВТЕСН = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисленияОрганизаций.ВидПособияСоциальногоСтрахования В (ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай), ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание))
	|			ТОГДА ""Период временной нетрудоспособности""
	|		КОГДА ОсновныеНачисленияОрганизаций.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|			ТОГДА ""Отпуск по беременности и родам""
	|		КОГДА ОсновныеНачисленияОрганизаций.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)
	|				И ОсновныеНачисленияОрганизаций.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС)
	|				И ОсновныеНачисленияОрганизаций.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2300)
	|			ТОГДА ""Период временной нетрудоспособности""
	|		ИНАЧЕ ОсновныеНачисленияОрганизаций.Наименование
	|	КОНЕЦ КАК Наименование
	|ПОМЕСТИТЬ ВТНеоблагаемыеВзносамиОтсутствияЕСН
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
	|	И НЕ ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени
	|	И НЕ ЕСТЬNULL(ОсновныеНачисленияОрганизаций.КодДоходаЕСН.ВходитВБазуФСС, ЛОЖЬ)
	|	И ОсновныеНачисленияОрганизаций.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.НулеваяСумма)
	|	И НЕ ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни),
	|	""Период временной нетрудоспособности""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности),
	|	""Отпуск по беременности и родам""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисления.ПериодДействия,
	|	СУММА(ОсновныеНачисления.ДнейИсключаемыхОтсутствий) КАК ДнейИсключаемыхОтсутствий,
	|	ОсновныеНачисления.ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.Наименование
	|ПОМЕСТИТЬ ВТПериодыИсключаемыхОтсутствийЕСН
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействия КАК ПериодДействия,
	|		РАЗНОСТЬДАТ(ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ) * ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ДнейИсключаемыхОтсутствий,
	|		НеоблагаемыеВзносамиОтсутствияЕСН.Наименование КАК Наименование,
	|		ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало КАК ПериодДействияНачало,
	|		ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец КАК ПериодДействияКонец
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|				Сотрудник В
	|						(ВЫБРАТЬ
	|							СотрудникиФизлица.Ссылка
	|						ИЗ
	|							ВТСотрудники КАК СотрудникиФизлица)
	|					И ФизЛицо = &ФизЛицо
	|					И ВидРасчета В
	|						(ВЫБРАТЬ
	|							НеоблагаемыеВзносамиОтсутствия.Ссылка
	|						ИЗ
	|							ВТНеоблагаемыеВзносамиОтсутствияЕСН КАК НеоблагаемыеВзносамиОтсутствия)
	|					И Организация = &ГоловнаяОрганизация
	|					И ОбособленноеПодразделение = &ОбособленноеПодразделение
	|					И ГОД(ПериодДействия) В (&МассивЛет)
	|					И ПериодДействия <= &ДатаДоЗакона212
	|					И ПериодРегистрации <= &ОграничениеПоПериодуРегистрации) КАК ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНеоблагаемыеВзносамиОтсутствияЕСН КАК НеоблагаемыеВзносамиОтсутствияЕСН
	|			ПО ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета = НеоблагаемыеВзносамиОтсутствияЕСН.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОсновныеНачисления.ПериодДействия,
	|		ОсновныеНачисления.ДнейИсключаемыхОтсутствий,
	|		ОсновныеНачисления.ПериодДействияНачало,
	|		ОсновныеНачисления.ПериодДействияКонец,
	|		ОсновныеНачисления.Наименование
	|	ИЗ
	|		ВТДнейОтпускаПоУходуЗаРебенком КАК ОсновныеНачисления
	|	ГДЕ
	|		ОсновныеНачисления.ПериодДействия <= &ДатаДоЗакона212) КАК ОсновныеНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисления.ПериодДействия,
	|	ОсновныеНачисления.Наименование,
	|	ОсновныеНачисления.ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец";

	ТекстЕСН = 
	"ВЫБРАТЬ
	|	ГОД(ПериодыИсключаемыхОтсутствий.ПериодДействия) КАК РасчетныйГод,
	|	ПериодыИсключаемыхОтсутствий.ДнейИсключаемыхОтсутствий КАК Дни,
	|	ПериодыИсключаемыхОтсутствий.ПериодДействияНачало КАК ПериодС,
	|	ПериодыИсключаемыхОтсутствий.ПериодДействияКонец КАК ПериодПо,
	|	ПериодыИсключаемыхОтсутствий.Наименование КАК НаименованиеПериода
	|ИЗ
	|	ВТПериодыИсключаемыхОтсутствийЕСН КАК ПериодыИсключаемыхОтсутствий
	|ГДЕ
	|	ПериодыИсключаемыхОтсутствий.ДнейИсключаемыхОтсутствий > 0";
	
	ГодЗакона213ФЗ = Год(ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
	Если ПозднийГод < ГодЗакона213ФЗ Тогда
		Запрос.Текст = ТекстВТЕСН + ";" + Символы.ПС + ТекстЕСН + Символы.ПС + "УПОРЯДОЧИТЬ ПО" + Символы.ПС + "ПериодС";
	ИначеЕсли РаннийГод >= ГодЗакона213ФЗ Тогда
		Запрос.Текст = ТекстВТСтраховыеВзносы + ";" + Символы.ПС + ТекстСтраховыеВзносы + Символы.ПС + "УПОРЯДОЧИТЬ ПО" + Символы.ПС + "ПериодС";
	Иначе
		Запрос.Текст = ТекстВТЕСН + ";" + Символы.ПС + ТекстВТСтраховыеВзносы + ";" + Символы.ПС + ТекстЕСН + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + ТекстСтраховыеВзносы + Символы.ПС + "УПОРЯДОЧИТЬ ПО" + Символы.ПС + "ПериодС";
	КонецЕсли;

	ВременнаяТаблица = Запрос.Выполнить().Выгрузить();
	Н = ВременнаяТаблица.Количество() - 1;
	Пока Н > 0 Цикл
		ТекущаяЗапись = ВременнаяТаблица[Н];
		ПредшествующаяЗапись = ВременнаяТаблица[Н-1];
		Если ТекущаяЗапись.НаименованиеПериода = ПредшествующаяЗапись.НаименованиеПериода 
			И ТекущаяЗапись.РасчетныйГод = ПредшествующаяЗапись.РасчетныйГод
			И (ТекущаяЗапись.ПериодС = КонецДня(ПредшествующаяЗапись.ПериодПо) + 1 
			Или КонецДня(ТекущаяЗапись.ПериодС) = КонецДня(ПредшествующаяЗапись.ПериодПо)) Тогда
			// объединим записи в одну
			ПредшествующаяЗапись.Дни = ПредшествующаяЗапись.Дни + ТекущаяЗапись.Дни;
			ПредшествующаяЗапись.ПериодПо = ТекущаяЗапись.ПериодПо;
			ВременнаяТаблица.Удалить(ТекущаяЗапись);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	ДниБолезниУходаЗаДетьми.Загрузить(ВременнаяТаблица);

КонецПроцедуры

Процедура Автозаполнение(Режим = Неопределено) Экспорт
	
	Если Режим = "ДанныеОЗаработке" Тогда
		ЗаполнитьДанныеОЗаработке()
	ИначеЕсли Режим = "ДанныеСотрудника" Тогда
		ЗаполнитьДанныеСотрудника()
	ИначеЕсли Режим = "ДанныеСтрахователя" Тогда
		ЗаполнитьДанныеСтрахователя()
	ИначеЕсли Режим = "ДниБолезниУходаЗаДетьми" Тогда
		ЗаполнитьДниБолезниУходаЗаДетьми()
	Иначе	
		ЗаполнитьДанныеОЗаработке();
		ЗаполнитьДанныеСтрахователя();
		ЗаполнитьДанныеСотрудника();
		ЗаполнитьДниБолезниУходаЗаДетьми()
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНовогоДокумента() Экспорт
	
	// Заполнить реквизиты значениями по умолчанию.
	ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	Если ГодС = 0 и ГодПо = 0 Тогда
		ГодС = Год(Дата) - 2;
		ГодПо = Год(Дата);
		Если ЗначениеЗаполнено(Организация) Тогда
			Автозаполнение("ДанныеСтрахователя");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Функция формирует табличный документ с печатной формой справки
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьСправки()
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати().Выбрать();
	ВыборкаСтрок = СформироватьЗапросПоДанныеОЗаработке().Выбрать();
	
	Отказ = Ложь;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаОЗаработкеДляРасчетаПособий";
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	
	// запоминаем области макета
	Макет = ПолучитьМакет("Справка");
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ОбластьМакетаПодвал	= Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета 		= Макет.ПолучитьОбласть("Год"); // область календарного года
	ПустаяОбластьМакета = Макет.ПолучитьОбласть("ПустойГод"); // область календарного года
	
	Если ВыборкаДляШапкиИПодвала.Следующий() Тогда 
		
		ПроверитьЗаполнениеШапки(ВыборкаДляШапкиИПодвала, Отказ, Заголовок);
		
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаШапка.Параметры.НаименованиеТерриториальногоОрганаФСС = СокрЛП(ОбластьМакетаШапка.Параметры.НаименованиеТерриториальногоОрганаФСС);
		ОбластьМакетаШапка.Параметры.КемВыданДокумент = СокрЛП(ОбластьМакетаШапка.Параметры.КемВыданДокумент);
		ОбластьМакетаШапка.Параметры.ДатаВыдачиДокумента = Формат(ОбластьМакетаШапка.Параметры.ДатаВыдачиДокумента,"ДЛФ=DD");
		ДанныеАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ВыборкаДляШапкиИПодвала.Адрес);
		Если ДанныеАдреса <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ОбластьМакетаШапка.Параметры,ДанныеАдреса);
		КонецЕсли;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
		
	КонецЕсли;
	
	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
	
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ВыведеноСтрок = 0;
	// выводим строки по годам
	Пока ВыборкаСтрок.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиДанныеОЗаработке(ВыборкаСтрок, Отказ, Заголовок);
		
		ОбластьМакета.Параметры.РасчетныйГод = ВыборкаСтрок.РасчетныйГод;
		ОбластьМакета.Параметры.Заработок = Формат(Цел(ВыборкаСтрок.Заработок),"ЧДЦ=0; ЧН=-");
		ОбластьМакета.Параметры.ЗаработокКоп = Формат((ВыборкаСтрок.Заработок - Цел(ВыборкаСтрок.Заработок)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-");
		ОбластьМакета.Параметры.ЗаработокПрописью = ОбщегоНазначенияЗК.СформироватьСуммуПрописью(ВыборкаСтрок.Заработок, Валюта);

		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		Пока ВыведеноСтрок < 3 Цикл
			ТабДокумент.Вывести(ПустаяОбластьМакета);
			ВыведеноСтрок = ВыведеноСтрок + 1;
		КонецЦикла;
		
		// выводим предварительно подготовленный Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		Возврат ТабДокумент;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Возврат Неопределено;
	
КонецФункции // ПечатьСправки()

// Функция формирует табличный документ с печатной формой справки
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьСправки2013()
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Отказ = Ложь;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаОЗаработкеДляРасчетаПособий";
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	
	// запоминаем области макета
	Макет = ПолучитьМакет("СправкаРасширенная");
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ОбластьМакетаПодвал	= Макет.ПолучитьОбласть("Подвал");// Подвал документа
	
	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати().Выбрать();
	Если ВыборкаДляШапкиИПодвала.Следующий() Тогда 
		
		ПроверитьЗаполнениеШапки(ВыборкаДляШапкиИПодвала, Отказ, Заголовок);
		
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаШапка.Параметры.НаименованиеТерриториальногоОрганаФСС = СокрЛП(ОбластьМакетаШапка.Параметры.НаименованиеТерриториальногоОрганаФСС);
		ОбластьМакетаШапка.Параметры.КемВыданДокумент = СокрЛП(ОбластьМакетаШапка.Параметры.КемВыданДокумент);
		ОбластьМакетаШапка.Параметры.ДатаВыдачиДокумента = Формат(ОбластьМакетаШапка.Параметры.ДатаВыдачиДокумента,"ДЛФ=DD");
		ДанныеАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ВыборкаДляШапкиИПодвала.Адрес);
		Если ДанныеАдреса <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ОбластьМакетаШапка.Параметры,ДанныеАдреса);
		КонецЕсли;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
		
	КонецЕсли;
	
	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПериодРаботы"); // область календарного года
	ВыборкаСтрок = СформироватьЗапросПоДанныеОПериодахРаботы().Выбрать();
	
	ВыведеноСтрок = 0;
	Пока ВыборкаСтрок.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиДанныеОПериодахРаботы(ВыборкаСтрок, Отказ, Заголовок);
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
	КонецЦикла;
	
	Пока ВыведеноСтрок < 1 Цикл
		ОбластьМакета.Параметры.ПериодРаботыС = "";
		ОбластьМакета.Параметры.ПериодРаботыПо = "";
		ТабДокумент.Вывести(ОбластьМакета);
		ВыведеноСтрок = ВыведеноСтрок + 1;
	КонецЦикла;
	
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ОбластьМакета 		= Макет.ПолучитьОбласть("Год"); // область календарного года
	ПустаяОбластьМакета = Макет.ПолучитьОбласть("ПустойГод"); // область календарного года
	
	ВыборкаСтрок = СформироватьЗапросПоДанныеОЗаработке().Выбрать();
	
	ТабДокумент.Вывести(Макет.ПолучитьОбласть("Пункт3"));
	
	// выводим строки по годам
	ВыведеноСтрок = 0;
	Пока ВыборкаСтрок.Следующий() Цикл
		
		
		ПроверитьЗаполнениеСтрокиДанныеОЗаработке(ВыборкаСтрок, Отказ, Заголовок);
		
		ОбластьМакета.Параметры.РасчетныйГод = ВыборкаСтрок.РасчетныйГод;
		ОбластьМакета.Параметры.Заработок = Формат(Цел(ВыборкаСтрок.Заработок),"ЧДЦ=0; ЧН=-");
		ОбластьМакета.Параметры.ЗаработокКоп = Формат((ВыборкаСтрок.Заработок - Цел(ВыборкаСтрок.Заработок)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-");
		ОбластьМакета.Параметры.ЗаработокПрописью = ОбщегоНазначенияЗК.СформироватьСуммуПрописью(ВыборкаСтрок.Заработок, Валюта);

		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
	КонецЦикла;
	
	Пока ВыведеноСтрок < 1 Цикл
		ТабДокумент.Вывести(ПустаяОбластьМакета);
		ВыведеноСтрок = ВыведеноСтрок + 1;
	КонецЦикла;
	
	ТабДокумент.Вывести(Макет.ПолучитьОбласть("Пункт4"));
	ОбластьМакета 		= Макет.ПолучитьОбласть("ГодДни"); // область календарного года
	ОбластьПериод 		= Макет.ПолучитьОбласть("ПериодДни"); // область периода года
	ПустаяОбластьПериод	= Макет.ПолучитьОбласть("ПустойПериодДни"); // область периода года
	ПустаяОбластьМакета = Макет.ПолучитьОбласть("ПустойГодДни"); // область календарного года
	
	ВыборкаСтрокОтсутствий = СформироватьЗапросПоДанныеОДняхОтсутствий().Выбрать();
	ВыборкаСтрок = СформироватьЗапросОДняхОтсутствийПоГодам().Выбрать();
	// выводим строки по годам
	ВыведеноСтрок = 0;
	Пока ВыборкаСтрокОтсутствий.СледующийПоЗначениюПоля("РасчетныйГод") Цикл
		ВыборкаСтрок.Сбросить();
		Если ВыборкаСтрок.НайтиСледующий(ВыборкаСтрокОтсутствий.РасчетныйГод,"РасчетныйГод") Тогда
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		Иначе
			ОбластьМакета.Параметры.ДнейБолезниУходаЗаДетьми = ""
		КонецЕсли;
		ОбластьМакета.Параметры.РасчетныйГод = Формат(ВыборкаСтрокОтсутствий.РасчетныйГод,"ЧГ=0");
		ТабДокумент.Вывести(ОбластьМакета);
		ВыведеноСтрок = ВыведеноСтрок + 1;
		ВыведеноСтрокПериодов = 0;
		Пока ВыборкаСтрокОтсутствий.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиДанныеОДняхОтсутствий(ВыборкаСтрокОтсутствий, Отказ, Заголовок);
			ОбластьПериод.Параметры.Заполнить(ВыборкаСтрокОтсутствий);
			ТабДокумент.Вывести(ОбластьПериод);
			ВыведеноСтрокПериодов = ВыведеноСтрокПериодов + 1;
		КонецЦикла;
		Пока ВыведеноСтрокПериодов < 1 Цикл
			ТабДокумент.Вывести(ПустаяОбластьПериод);
			ВыведеноСтрокПериодов = ВыведеноСтрокПериодов + 1;
		КонецЦикла;
	КонецЦикла;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Если НЕ Отказ Тогда
		
		Пока ВыведеноСтрок < 1 Цикл
			ТабДокумент.Вывести(ПустаяОбластьМакета);
			ТабДокумент.Вывести(ПустаяОбластьПериод);
			ВыведеноСтрок = ВыведеноСтрок + 1;
		КонецЦикла;
	
		// выводим предварительно подготовленный Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		Возврат ТабДокумент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПечатьСправки()

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросДляПечати()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ЭтоЮрЛицо", ОбщегоНазначенияЗКПереопределяемый.ЭтоЮрЛицо(Организация));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументСправка.Дата,
	|	ДокументСправка.Номер,
	|	ДокументСправка.Организация,
	|	ДокументСправка.Ссылка,
	|	ДокументСправка.Сотрудник,
	|	ДокументСправка.Руководитель,
	|	ДокументСправка.ДолжностьРуководителя,
	|	ДокументСправка.ГлавныйБухгалтер,
	|	ДокументСправка.ТелефонОрганизации,
	|	ДокументСправка.РегистрационныйНомерФСС,
	|	ДокументСправка.ДополнительныйКодФСС,
	|	ДокументСправка.КодПодчиненностиФСС,
	|	ДокументСправка.НаименованиеТерриториальногоОрганаФСС,
	|	МИНИМУМ(СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.ПериодРаботыС) КАК ПериодРаботыС,
	|	МАКСИМУМ(СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.ПериодРаботыПо) КАК ПериодРаботыПо,
	|	ДокументСправка.СтраховойНомерПФР,
	|	ДокументСправка.Фамилия,
	|	ДокументСправка.Имя,
	|	ДокументСправка.Отчество,
	|	ДокументСправка.Адрес,
	|	ДокументСправка.ВидДокумента,
	|	ДокументСправка.СерияДокумента,
	|	ДокументСправка.НомерДокумента,
	|	ДокументСправка.ДатаВыдачиДокумента,
	|	ВЫРАЗИТЬ(ДокументСправка.КемВыданДокумент КАК СТРОКА(300)) КАК КемВыданДокумент,
	|	ВЫБОР
	|		КОГДА ДокументСправка.Сотрудник.Организация = ВЫБОР
	|				КОГДА ДокументСправка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ДокументСправка.Организация
	|				ИНАЧЕ ДокументСправка.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА ДокументСправка.Сотрудник.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВидаЗанятости
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.СправкаОЗаработкеДляРасчетаПособий КАК ДокументСправка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкаОЗаработкеДляРасчетаПособий.ПериодыРаботы КАК СправкаОЗаработкеДляРасчетаПособийПериодыРаботы
	|		ПО ДокументСправка.Ссылка = СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.Ссылка
	|ГДЕ
	|	ДокументСправка.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументСправка.Дата,
	|	ДокументСправка.Номер,
	|	ДокументСправка.Организация,
	|	ДокументСправка.Ссылка,
	|	ДокументСправка.Сотрудник,
	|	ДокументСправка.Руководитель,
	|	ДокументСправка.ДолжностьРуководителя,
	|	ДокументСправка.ГлавныйБухгалтер,
	|	ДокументСправка.ТелефонОрганизации,
	|	ДокументСправка.РегистрационныйНомерФСС,
	|	ДокументСправка.ДополнительныйКодФСС,
	|	ДокументСправка.КодПодчиненностиФСС,
	|	ДокументСправка.НаименованиеТерриториальногоОрганаФСС,
	|	ДокументСправка.СтраховойНомерПФР,
	|	ДокументСправка.Фамилия,
	|	ДокументСправка.Имя,
	|	ДокументСправка.Отчество,
	|	ДокументСправка.Адрес,
	|	ДокументСправка.ВидДокумента,
	|	ДокументСправка.СерияДокумента,
	|	ДокументСправка.НомерДокумента,
	|	ДокументСправка.ДатаВыдачиДокумента,
	|	ВЫРАЗИТЬ(ДокументСправка.КемВыданДокумент КАК СТРОКА(300)),
	|	ВЫБОР
	|		КОГДА ДокументСправка.Сотрудник.Организация = ВЫБОР
	|				КОГДА ДокументСправка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ДокументСправка.Организация
	|				ИНАЧЕ ДокументСправка.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДокументСправка.Сотрудник.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.Фамилия + "" "" + ДанныеДокумента.Имя + "" "" + ДанныеДокумента.Отчество КАК ФИО,
	|	ДанныеДокумента.Организация.НаименованиеПолное КАК НазваниеОрганизации,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.Организация.ИНН КАК ИНН,
	|	ДанныеДокумента.Организация.КПП КАК КПП,
	|	ДанныеДокумента.РегистрационныйНомерФСС,
	|	ДанныеДокумента.ДополнительныйКодФСС,
	|	ДанныеДокумента.КодПодчиненностиФСС,
	|	ДанныеДокумента.НаименованиеТерриториальногоОрганаФСС,
	|	ДанныеДокумента.ПериодРаботыС,
	|	ДанныеДокумента.ПериодРаботыПо,
	|	ДанныеДокумента.СтраховойНомерПФР,
	|	ДанныеДокумента.Адрес,
	|	ВЫБОР
	|		КОГДА &ЭтоЮрЛицо
	|			ТОГДА АдресЮрЛица.Представление
	|		КОГДА АдресаФактические.Поле1 ЕСТЬ NULL 
	|			ТОГДА АдресаРегистрации.Представление
	|		ИНАЧЕ АдресаФактические.Представление
	|	КОНЕЦ КАК АдресСтрахователя,
	|	ДанныеДокумента.ВидДокумента.Наименование КАК ВидДокумента,
	|	ДанныеДокумента.СерияДокумента,
	|	ДанныеДокумента.НомерДокумента,
	|	ДанныеДокумента.ДатаВыдачиДокумента,
	|	ДанныеДокумента.КемВыданДокумент,
	|	ЕСТЬNULL(ФИОРуководителя.Фамилия + "" "" + ФИОРуководителя.Имя + "" "" + ФИОРуководителя.Отчество, ДанныеДокумента.Руководитель.Наименование) КАК ФИОРуководителя,
	|	ДанныеДокумента.ДолжностьРуководителя.Наименование КАК Должность,
	|	ЕСТЬNULL(ФИОГлБухгалтера.Фамилия + "" "" + ФИОГлБухгалтера.Имя + "" "" + ФИОГлБухгалтера.Отчество, ДанныеДокумента.ГлавныйБухгалтер.Наименование) КАК ФИОГлБухгалтера,
	|	ДанныеДокумента.ТелефонОрганизации КАК Телефон,
	|	ДанныеДокумента.ОшибкаВидаЗанятости,
	|	ДанныеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&Дата,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						ДанныеДокумента.Руководитель
	|					ИЗ
	|						ВТДанныеДокумента КАК ДанныеДокумента)) КАК ФИОРуководителя
	|		ПО ДанныеДокумента.Руководитель = ФИОРуководителя.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаФактические
	|		ПО ДанныеДокумента.Организация.ИндивидуальныйПредприниматель = АдресаФактические.Объект
	|			И (АдресаФактические.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
	|			И (АдресаФактические.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
	|		ПО ДанныеДокумента.Организация.ИндивидуальныйПредприниматель = АдресаРегистрации.Объект
	|			И (АдресаРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|			И (АдресаРегистрации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресЮрЛица
	|		ПО ДанныеДокумента.Организация = АдресЮрЛица.Объект
	|			И (АдресЮрЛица.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|			И (АдресЮрЛица.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&Дата,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						ДанныеДокумента.ГлавныйБухгалтер
	|					ИЗ
	|						ВТДанныеДокумента КАК ДанныеДокумента)) КАК ФИОГлБухгалтера
	|		ПО ДанныеДокумента.ГлавныйБухгалтер = ФИОГлБухгалтера.ФизЛицо";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоДанныеОЗаработке() 

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.РасчетныйГод КАК РасчетныйГод,
	|	Документ.Заработок КАК Заработок,
	|	Документ.НомерСтроки
	|ПОМЕСТИТЬ ВТСтрокиДокумента
	|ИЗ
	|	Документ.СправкаОЗаработкеДляРасчетаПособий.ДанныеОЗаработке КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.РасчетныйГод,
	|	Документ.Заработок,
	|	Документ.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.РасчетныйГод КАК РасчетныйГод,
	|	Документ.Заработок КАК Заработок,
	|	Документ.НомерСтроки,
	|	МИНИМУМ(ПовторныеСтроки.НомерСтроки) КАК НомерПовторнойСтроки
	|ИЗ
	|	ВТСтрокиДокумента КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ПовторныеСтроки
	|		ПО Документ.РасчетныйГод = ПовторныеСтроки.РасчетныйГод
	|			И Документ.НомерСтроки < ПовторныеСтроки.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.РасчетныйГод,
	|	Документ.Заработок,
	|	Документ.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйГод";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по табличной части ПериодыРаботы
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоДанныеОПериодахРаботы() 

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.НомерСтроки,
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.ПериодРаботыС,
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.ПериодРаботыПо
	|ПОМЕСТИТЬ ВТСтрокиДокумента
	|ИЗ
	|	Документ.СправкаОЗаработкеДляРасчетаПособий.ПериодыРаботы КАК СправкаОЗаработкеДляРасчетаПособийПериодыРаботы
	|ГДЕ
	|	СправкаОЗаработкеДляРасчетаПособийПериодыРаботы.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.НомерСтроки КАК НомерСтроки,
	|	МИНИМУМ(ПовторныеСтроки.НомерСтроки) КАК НомерПовторнойСтроки,
	|	Документ.ПериодРаботыС КАК ПериодРаботыС,
	|	Документ.ПериодРаботыПо
	|ИЗ
	|	ВТСтрокиДокумента КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ПовторныеСтроки
	|		ПО Документ.НомерСтроки < ПовторныеСтроки.НомерСтроки
	|			И (Документ.ПериодРаботыС МЕЖДУ ПовторныеСтроки.ПериодРаботыС И ПовторныеСтроки.ПериодРаботыПо
	|				ИЛИ Документ.ПериодРаботыПо МЕЖДУ ПовторныеСтроки.ПериодРаботыС И ПовторныеСтроки.ПериодРаботыПо
	|				ИЛИ Документ.ПериодРаботыС < ПовторныеСтроки.ПериодРаботыС
	|					И Документ.ПериодРаботыПо > ПовторныеСтроки.ПериодРаботыПо)
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.НомерСтроки,
	|	Документ.ПериодРаботыС,
	|	Документ.ПериодРаботыПо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодРаботыС";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по табличной части ДниБолезниУходаЗаДетьми
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоДанныеОДняхОтсутствий() 

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми.НомерСтроки,
	|	СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми.Дни,
	|	СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми.ПериодС,
	|	СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми.ПериодПо,
	|	СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми.НаименованиеПериода
	|ПОМЕСТИТЬ ВТСтрокиДокумента
	|ИЗ
	|	Документ.СправкаОЗаработкеДляРасчетаПособий.ДниБолезниУходаЗаДетьми КАК СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми
	|ГДЕ
	|	СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми.Ссылка = &ДокументСсылка
	|	И СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми.Дни > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.НомерСтроки КАК НомерСтроки,
	|	ГОД(Документ.ПериодС) КАК РасчетныйГод,
	|	МИНИМУМ(ПовторныеСтроки.НомерСтроки) КАК НомерПовторнойСтроки,
	|	Документ.Дни КАК ДнейБолезниУходаЗаДетьми,
	|	Документ.ПериодС КАК ПериодС,
	|	Документ.ПериодПо,
	|	Документ.НаименованиеПериода
	|ИЗ
	|	ВТСтрокиДокумента КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ПовторныеСтроки
	|		ПО Документ.НомерСтроки < ПовторныеСтроки.НомерСтроки
	|			И (Документ.ПериодС МЕЖДУ ПовторныеСтроки.ПериодС И ПовторныеСтроки.ПериодПо
	|				ИЛИ Документ.ПериодПо МЕЖДУ ПовторныеСтроки.ПериодС И ПовторныеСтроки.ПериодПо
	|				ИЛИ Документ.ПериодС < ПовторныеСтроки.ПериодС
	|					И Документ.ПериодПо > ПовторныеСтроки.ПериодПо)
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.НомерСтроки,
	|	Документ.Дни,
	|	Документ.ПериодС,
	|	Документ.ПериодПо,
	|	Документ.НаименованиеПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодС";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по табличной части ДниБолезниУходаЗаДетьми
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросОДняхОтсутствийПоГодам() 

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГОД(СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми.ПериодС) КАК РасчетныйГод,
	|	СУММА(СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми.Дни) КАК ДнейБолезниУходаЗаДетьми
	|ИЗ
	|	Документ.СправкаОЗаработкеДляРасчетаПособий.ДниБолезниУходаЗаДетьми КАК СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми
	|ГДЕ
	|	СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми.Ссылка = &ДокументСсылка
	|	И СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми.Дни > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ГОД(СправкаОЗаработкеДляРасчетаПособийДниБолезниУходаЗаДетьми.ПериодС)";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	Иначе
		Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
		КонецЕсли;
		Если ВыборкаПоШапкеДокумента.ОшибкаВидаЗанятости Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Справки выдаются сотрудникам, имевшим основное место работы или работавшим по внешнему совместительству!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФИО) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указано ФИО сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	//  ФСС
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НаименованиеТерриториальногоОрганаФСС) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указано наименование территориального органа ФСС!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РегистрационныйНомерФСС) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан регистрационный номер в ФСС!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиДанныеОЗаработке(ВыборкаПоСтрокамДокумента, Отказ, Заголовок) 

	СтрокаНачалаСообщенияОбОшибке =
		"В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) + """ табл. части ""Данные о заработке"": ";
	
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РасчетныйГод) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан расчетный год!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Заработок) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан заработок!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерПовторнойСтроки) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный расчетный год повторяется в строке " + ВыборкаПоСтрокамДокумента.НомерПовторнойСтроки + "!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиДанныеОПериодахРаботы(ВыборкаПоСтрокамДокумента, Отказ, Заголовок) 

	СтрокаНачалаСообщенияОбОшибке =
		"В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) + """ табл. части ""Периоды работы"": ";
	
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРаботыС) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано начало периода работы!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРаботыПо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано окончание периода работы!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРаботыС) и ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодРаботыПо) и ВыборкаПоСтрокамДокумента.ПериодРаботыС > ВыборкаПоСтрокамДокумента.ПериодРаботыПо Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "неверно указан период работы: начало периода должно предшествовать окончанию периода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерПовторнойСтроки) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный период работы пересекается с периодом из строки " + ВыборкаПоСтрокамДокумента.НомерПовторнойСтроки + "!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиДанныеОДняхОтсутствий(ВыборкаПоСтрокамДокумента, Отказ, Заголовок) 

	СтрокаНачалаСообщенияОбОшибке =
		"В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) + """ табл. части ""Дни болезни, ухода за детьми"": ";
	
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодС) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано начало периода отсутствия!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодПо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано окончание периода отсутствия!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодС) и ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодПо) и ВыборкаПоСтрокамДокумента.ПериодС > ВыборкаПоСтрокамДокумента.ПериодПо Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "неверно указан период отсутствия: начало периода должно предшествовать окончанию периода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерПовторнойСтроки) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный период отсутствия пересекается с периодом из строки " + ВыборкаПоСтрокамДокумента.НомерПовторнойСтроки + "!", , Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Дата = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
		
		Сотрудник	= ДанныеЗаполнения;
		Организация	= ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(Сотрудник, "ТекущееОбособленноеПодразделение");
		
		ЗаполнитьРеквизитыНовогоДокумента();
		
		Автозаполнение("ДанныеСотрудника");
		АдресВФорме	= УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Адрес);
		Если ЗначениеЗаполнено(ГодС) и ЗначениеЗаполнено(ГодПо) Тогда
			Автозаполнение("ДанныеОЗаработке");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

