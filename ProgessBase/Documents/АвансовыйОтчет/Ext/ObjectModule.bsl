Перем мУдалятьДвижения;


Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мУказаниеПроектовВТабличнойЧастиДокументов Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

Перем УчетнаяПолитикаРегл;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
			?(НЕ ПустаяСтрока(Отчество) , 
			Лев(Отчество,1)+".", ""), ""), "");

КонецФункции // ПолучитьФамилиюИмяОтчество()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвансовогоОтчета()
	
	Макет = ПолучитьМакет("АвансовыйОтчет");
		
	// Запрос по Шапке.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст ="ВЫБРАТЬ
	              |	АвансовыйОтчет.Номер,
	              |	АвансовыйОтчет.Дата КАК ДатаДокумента,
	              |	АвансовыйОтчет.ФизЛицо КАК ПодотчетноеЛицо,
	              |	АвансовыйОтчет.ФизЛицо.Представление КАК ПредставлениеПодотчетногоЛица,
	              |	АвансовыйОтчет.Организация КАК Руководители,
	              |	АвансовыйОтчет.Организация.Ссылка КАК Организация,
	              |	АвансовыйОтчет.НазначениеАванса,
	              |	АвансовыйОтчет.Подразделение,
	              |	АвансовыйОтчет.Подразделение.Представление КАК ПредставлениеПодразделения,
	              |	АвансовыйОтчет.Подразделение.Код КАК КодПодразделения,
	              |	АвансовыйОтчет.ВалютаДокумента,
	              |	АвансовыйОтчет.УчитыватьНДС,
	              |	АвансовыйОтчет.СуммаВключаетНДС,
	              |	АвансовыйОтчет.ВалютаДокумента КАК ВалютаДокумента1,
	              |	АвансовыйОтчет.КурсДокумента,
	              |	АвансовыйОтчет.КратностьДокумента,
	              |	АвансовыйОтчет.КоличествоДокументов,
	              |	АвансовыйОтчет.КоличествоЛистов,
	              |	АвансовыйОтчет.ВалютаДокумента.Представление КАК ПредставлениеВалюты,
	              |	АвансовыйОтчет.СуммаДокумента КАК СуммаДокумента,
	              |	АвансовыйОтчет.Ответственный как БухгалтерОтветственный
	              |ИЗ
	              |	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	              |ГДЕ
	              |	АвансовыйОтчет.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ТабДокумент  = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";
	

	// ТИТУЛЬНЫЙ ЛИСТ

	Если ОтражатьВУправленческомУчете Тогда //Заполним по данным управленческого учета
		// Получаем все остатки авансов, выданных этому подотчетнику по органиации и в валюте этого авансового отчета, на момент отчета
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",       Организация);
		Запрос.УстановитьПараметр("Валюта"     ,       ВалютаДокумента);
		Запрос.УстановитьПараметр("ФизЛицо"    ,       ФизЛицо);
		Запрос.УстановитьПараметр("ДатаОстатка",       Новый Граница(МоментВремени(), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("ОтражатьВБухУчете", ОтражатьВБухгалтерскомУчете);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
		|			&ДатаОстатка,
		|			Организация = &Организация
		|				И Валюта = &Валюта
		|				И ФизЛицо = &ФизЛицо
		|				И ВЫБОР
		|					КОГДА &ОтражатьВБухУчете
		|						ТОГДА РасчетныйДокумент.ОтражатьВБухгалтерскомУчете
		|								ИЛИ РасчетныйДокумент ССЫЛКА Документ.ВыдачаДенежныхДокументов
		|								ИЛИ РасчетныйДокумент ССЫЛКА Документ.ПоступлениеДенежныхДокументов
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки";
		
		ПредыдущиеАвансы = Запрос.Выполнить().Выгрузить();
		
		СуммаДоДокумента = ПредыдущиеАвансы.Итог("СуммаВзаиморасчетов"); 
		
		// Отнимем сумму документов аванса с первой закладки
		// (только в случае если раньше суммы по этим документам не были включены в другой авансовый отчет! -
		//  проверяем, чтобы сумма взаиморасчетов по документу равнялась остатку по регистру)
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Валюта"     , ВалютаДокумента);
		Запрос.УстановитьПараметр("ФизЛицо"    , ФизЛицо);
		Запрос.УстановитьПараметр("ДатаОстатка", Новый Граница(Дата, ВидГраницы.Исключая));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗапросПоДокументам.ПолученоИзКассы КАК ПолученоИзКассы,
		|	ЗапросПоДокументам.ПолученоПоБанковскимКартам КАК ПолученоПоБанковскимКартам
		|ИЗ
		|(ВЫБРАТЬ
		|	Док.Ссылка КАК ДокументАванса,
		|	СУММА(Док.СуммаВзаиморасчетов) КАК ПолученоИзКассы,
		|	0 КАК ПолученоПоБанковскимКартам
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК Док
		|ГДЕ 
		|	Док.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Док.ДокументАванса ИЗ Документ.АвансовыйОтчет.ВыданныеАвансы КАК Док ГДЕ Док.Ссылка = &ТекущийДокумент И Док.ДокументАванса ССЫЛКА Документ.РасходныйКассовыйОрдер)
		|СГРУППИРОВАТЬ ПО
		|	Док.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Док.Ссылка,
		|	0,
		|	СУММА(Док.СуммаВзаиморасчетов)
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК Док
		|ГДЕ 
		|	Док.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Док.ДокументАванса ИЗ Документ.АвансовыйОтчет.ВыданныеАвансы КАК Док ГДЕ Док.Ссылка = &ТекущийДокумент И Док.ДокументАванса ССЫЛКА Документ.ПлатежноеПоручениеИсходящее)
		|СГРУППИРОВАТЬ ПО
		|	Док.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Док.Ссылка,
		|	0,
		|	СУММА(Док.СуммаВзаиморасчетов)
		|ИЗ
		|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК Док
		|ГДЕ 
		|	Док.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Док.ДокументАванса ИЗ Документ.АвансовыйОтчет.ВыданныеАвансы КАК Док ГДЕ Док.Ссылка = &ТекущийДокумент И Док.ДокументАванса ССЫЛКА Документ.ПлатежныйОрдерСписаниеДенежныхСредств)
		|СГРУППИРОВАТЬ ПО
		|	Док.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Док.Ссылка,
		|	Док.СуммаДокумента,
		|	0
		|ИЗ
		|	Документ.ВыдачаДенежныхДокументов КАК Док
		|ГДЕ 
		|	Док.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Док.ДокументАванса ИЗ Документ.АвансовыйОтчет.ВыданныеАвансы КАК Док ГДЕ Док.Ссылка = &ТекущийДокумент И Док.ДокументАванса ССЫЛКА Документ.ВыдачаДенежныхДокументов)) КАК ЗапросПоДокументам
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|			РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
		|					&ДатаОстатка, 
		|					Валюта = &Валюта 
		|						И Организация = &Организация
		|						И ФизЛицо = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
		|		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент = ЗапросПоДокументам.ДокументАванса 
		|ГДЕ
		|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток = ЗапросПоДокументам.ПолученоИзКассы
		|		ИЛИ ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток = ЗапросПоДокументам.ПолученоПоБанковскимКартам"; 
		
		ТаблицаПолученныхАвансов = Запрос.Выполнить().Выгрузить();
		
		ПолученоИзКассы            = ТаблицаПолученныхАвансов.Итог("ПолученоИзКассы");
		ПолученоПоБанковскимКартам = ТаблицаПолученныхАвансов.Итог("ПолученоПоБанковскимКартам");
		ИтогоПолучено              = ПолученоИзКассы + ПолученоПоБанковскимКартам;
		
		ПолученоИзКассыВВалюте         		= ПолученоИзКассы;
		ПолученоПоБанковскимКартамВВалюте 	= ПолученоПоБанковскимКартам;
		
		ДанныеВал  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);

		Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
			ПолученоИзКассы         	= ?(КратностьДокумента <> 0, ПолученоИзКассы * КурсДокумента / КратностьДокумента, 0);
			ПолученоПоБанковскимКартам	= ?(КратностьДокумента <> 0, ПолученоПоБанковскимКартам * КурсДокумента / КратностьДокумента, 0);
			ИтогоПолучено 				= ПолученоИзКассы + ПолученоПоБанковскимКартам;
		КонецЕсли;
		
		СуммаДоДокумента = СуммаДоДокумента - ПолученоИзКассы - ПолученоПоБанковскимКартам;
		
	Иначе //получим данные по регистру бухгалтерии
		
		Запрос = Новый Запрос();
		Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
			Запрос.УстановитьПараметр("Счет71", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал);
		Иначе
			Запрос.УстановитьПараметр("Счет71", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
		КонецЕсли;
		Запрос.УстановитьПараметр("Сотрудник",  Шапка.ПодотчетноеЛицо);
		Запрос.УстановитьПараметр("Организация",Шапка.Организация);
		Запрос.УстановитьПараметр("ДатаИтогов", Ссылка.МоментВремени());
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.СуммаОстатокДт,
		|	ХозрасчетныйОстатки.СуммаОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаИтогов, Счет В ИЕРАРХИИ (&Счет71), ,
		|	                                        Организация = &Организация И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки";
		ПредыдущийАванс = Запрос.Выполнить().Выбрать();
		ПредыдущийАванс.Следующий();
		
		Перерасход = ?(ПредыдущийАванс.СуммаОстатокДт = Null, 0, ПредыдущийАванс.СуммаОстатокКт);
		Остаток    = ?(ПредыдущийАванс.СуммаОстатокКт = Null, 0, ПредыдущийАванс.СуммаОстатокДт);
		ДанныеВал  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		
		СуммаДоДокумента = 0;
		
		Если НЕ ЗначениеЗаполнено(Перерасход) Тогда
			Перерасход = 0;
		Иначе
			СуммаДоДокумента = - Число(Перерасход);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Остаток) Тогда
			Остаток = 0;
		Иначе
			СуммаДоДокумента = Число(Остаток);
		КонецЕсли;
		
		МассивАвансовыхДокументов = ВыданныеАвансы.ВыгрузитьКолонку("ДокументАванса");
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("МассивАвансовыхДокументов", МассивАвансовыхДокументов);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(РасходныйКассовыйОрдер.СуммаДокумента) КАК СуммаДокумента
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.Ссылка В(&МассивАвансовыхДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйКассовыйОрдер.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВыдачаДенежныхДокументов.СуммаДокумента
		|ИЗ
		|	Документ.ВыдачаДенежныхДокументов КАК ВыдачаДенежныхДокументов
		|ГДЕ
		|	ВыдачаДенежныхДокументов.Ссылка В(&МассивАвансовыхДокументов)";
		Таб = Запрос.Выполнить().Выгрузить();
		ПолученоИзКассы = Число(Таб.Итог("СуммаДокумента"));
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("МассивАвансовыхДокументов", МассивАвансовыхДокументов);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ПлатежноеПоручениеИсходящее.СуммаДокумента) КАК СуммаДокумента
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|ГДЕ
		|	ПлатежноеПоручениеИсходящее.Ссылка В(&МассивАвансовыхДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлатежноеПоручениеИсходящее.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СУММА(ПлатежныйОрдерСписаниеДенежныхСредств.СуммаДокумента)
		|ИЗ
		|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК ПлатежныйОрдерСписаниеДенежныхСредств
		|ГДЕ
		|	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка В(&МассивАвансовыхДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка
		|";
		
		Таб = Запрос.Выполнить().Выгрузить();
		ПолученоПоБанковскимКартам = Число(Таб.Итог("СуммаДокумента"));
		
		ПолученоИзКассыВВалюте         		= ПолученоИзКассы;
		ПолученоПоБанковскимКартамВВалюте 	= ПолученоПоБанковскимКартам;
		
		КурсоваяРазница = 0;
		Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
			ПолученоИзКассы         = ?(КратностьДокумента <> 0, ПолученоИзКассы * КурсДокумента / КратностьДокумента, 0);
			ПолученоПоБанковскимКартам = ?(КратностьДокумента <> 0, ПолученоПоБанковскимКартам * КурсДокумента / КратностьДокумента, 0);
			
			ЗапросПоПроводкам = Новый Запрос();
			ЗапросПоПроводкам.УстановитьПараметр("Ссылка", Ссылка);
			ЗапросПоПроводкам.УстановитьПараметр("КурсоваяРазница", Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы);
			ЗапросПоПроводкам.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 = &КурсоваяРазница
			|				ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаДт,
			|	СУММА(ВЫБОР
			|			КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 = &КурсоваяРазница
			|				ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаКт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Ссылка) КАК ХозрасчетныйДвиженияССубконто
			|";
			
			ВыборкаКР = ЗапросПоПроводкам.Выполнить().Выгрузить();
			КурсоваяРазница = ВыборкаКР.Итог("СуммаДт") - ВыборкаКР.Итог("СуммаКт");
			// курсовую разницу не разделяем по видам полученных средств
			Если ПолученоИзКассы > 0 Тогда
				ПолученоИзКассы = ПолученоИзКассы + КурсоваяРазница;
			Иначе
				ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам + КурсоваяРазница;
			КонецЕсли;
		КонецЕсли;
		
		ИтогоПолучено = ПолученоИзКассы + ПолученоПоБанковскимКартам;
		СуммаДоДокумента = СуммаДоДокумента - ИтогоПолучено;
	КонецЕсли;
	
	СведенияОФизЛице = ПолныеПрава.СведенияОСотруднике(ФизЛицо, Дата, Организация);
	СведенияФИОФизЛица = ФормированиеПечатныхФорм.ФамилияИмяОтчество(ФизЛицо, Дата);
	Если СведенияФИОФизЛица.Фамилия <> "" Тогда
		ПодотчетноеЛицо = ПолучитьФамилиюИмяОтчество(СведенияФИОФизЛица.Фамилия, СведенияФИОФизЛица.Имя, СведенияФИОФизЛица.Отчество);
	Иначе
		ПодотчетноеЛицо = ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.ПодотчетноеЛицо);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Титул");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерДокумента                = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ПодотчетноеЛицо;
	ОбластьМакета.Параметры.ТабельныйНомер                = СведенияОФизЛице.ТабельныйНомер;
	Если ОтражатьВБухгалтерскомУчете Тогда
		ОбластьМакета.Параметры.ПредставлениеПодразделения    = СведенияОФизЛице.ПодразделениеОрганизации;
	КонецЕсли;
	ОбластьМакета.Параметры.КодПодразделения              = СведенияОФизЛице.КодПодразделения;
	ОбластьМакета.Параметры.ДолжностьПодотчетногоЛицаПредставление = СведенияОФизЛице.Должность;
	
	ОбластьМакета.Параметры.ПолученоИзКассы            = ПолученоИзКассы;
	ОбластьМакета.Параметры.ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам;
	
	Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		ОбластьМакета.Параметры.ПредставлениеВалютыДокумента   		= Шапка.ПредставлениеВалюты;
		ОбластьМакета.Параметры.ПолученоИзКассыВВалюте         		= ПолученоИзКассыВВалюте;
		ОбластьМакета.Параметры.ПолученоПоБанковскимКартамВВалюте	= ПолученоПоБанковскимКартамВВалюте;
	КонецЕсли;

	Если СуммаДоДокумента >= 0 Тогда
		ОбластьМакета.Параметры.НачальныйОстаток    =   СуммаДоДокумента;
	Иначе
		ОбластьМакета.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
	КонецЕсли;
	
	ОбластьМакета.Параметры.ИтогоПолучено = ИтогоПолучено;
	Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		Израсходовано = Окр(Шапка.СуммаДокумента * КурсДокумента / КратностьДокумента, 2);
		Если НЕ ОтражатьВУправленческомУчете Тогда 
			Израсходовано = Израсходовано + КурсоваяРазница;
		КонецЕсли;
	Иначе
		Израсходовано = Шапка.СуммаДокумента;
	КонецЕсли;
	ОбластьМакета.Параметры.Израсходовано = Израсходовано;

	ОстатокНаКонец = СуммаДоДокумента + ИтогоПолучено - Израсходовано;
	
	Если ОстатокНаКонец >= 0  Тогда
		ОбластьМакета.Параметры.КонечныйОстаток    = ОстатокНаКонец;
	Иначе
		ОбластьМакета.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
	КонецЕсли;

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	Кассир       = Руководители.Кассир;

	Если НЕ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		ДляРасчета = Шапка.СуммаДокумента * ДанныеВал.Курс / ДанныеВал.Кратность;
	Иначе
		ДляРасчета = Шапка.СуммаДокумента;	
	КонецЕсли;

	ИспСумма     = Окр(ДляРасчета, 2, 1);
	ЦелСумма     = Цел(ИспСумма);
	КопСумма     = Формат((ИспСумма - ЦелСумма) * 100, "ЧЦ=2; ЧН=00; ЧВН=");

	ОбластьМакета.Параметры.ИзрасходованоРуб    = ЦелСумма;
	ОбластьМакета.Параметры.ИзрасходованоКоп    = КопСумма;

	ОбластьМакета.Параметры.ДатаДокумента       = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Руководитель        = Руководитель;
	ОбластьМакета.Параметры.ГлавныйБухгалтер    = Бухгалтер;
	ОбластьМакета.Параметры.Бухгалтер           = Бухгалтер;
	ОбластьМакета.Параметры.Кассир              = Кассир;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО   = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.СуммаОтчетаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИспСумма, мВалютаРегламентированногоУчета) + " (" + ЦелСумма + " руб. " + КопСумма + " коп.)";

	ОбластьМакета.Параметры.ПредставлениеОрганизации           = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.ПредставлениеГлавногоБухгалтера    = Бухгалтер;
	ОбластьМакета.Параметры.РуководительПредставление          = Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителяПредставление = Руководители.РуководительДолжность;

	ЗапросПоПроводкам = Новый Запрос();
	ЗапросПоПроводкам.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросПоПроводкам.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма,
	|	МИНИМУМ(Хозрасчетный.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ВыборкаПроводок = ЗапросПоПроводкам.Выполнить().Выбрать();
	
	Счетчик = 0;
	Пока ВыборкаПроводок.Следующий() Цикл
		
		Счетчик = Счетчик + 1;
		
		Если Счетчик = 9 тогда
			Прервать;
		КонецЕсли;
		
		ОбластьМакета.Параметры["СубСчетДебет"  + Счетчик] = ВыборкаПроводок.СчетДт;
		ОбластьМакета.Параметры["СуммаДебет"    + Счетчик] = ВыборкаПроводок.Сумма;
		ОбластьМакета.Параметры["СубСчетКредит" + Счетчик] = ВыборкаПроводок.СчетКт;
		ОбластьМакета.Параметры["СуммаКредит"   + Счетчик] = ВыборкаПроводок.Сумма;
		
	КонецЦикла;
	
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	// ОБОРОТНАЯ СТОРОНА
	ЗапросТовары = Новый Запрос();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросТовары.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	ЗапросТовары.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросТовары.УстановитьПараметр("Валюта",          ВалютаДокумента);
	ЗапросТовары.УстановитьПараметр("ПустойСчет",      ПланыСчетов.Хозрасчетный.ПустаяСсылка());

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("АвансовыйОтчет");
	
	ЗапросТовары.Текст = "
	|ВЫБРАТЬ
	|	Док.ДокументНомер,
	|	Док.ДокументДата,
	|	Док.НаименованиеРасхода,
	|	Док.СчетЗатрат,
	|	Док.СчетНДС,
	|	Док.ПоОтчету,
	|	Док.ПоОтчетуВВалюте,
	|	Док.СуммаНДС,
	|	Док.Договор
	|ПОМЕСТИТЬ ДанныеАвансовогоОтчета
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|	АвансовыйОтчет.НомерВходящегоДокумента              КАК ДокументНомер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента               КАК ДокументДата,
	|	ВЫБОР 
	|		КОГДА АвансовыйОтчет.ВидДокВходящий = """"
	|			ТОГДА ""Куплены товары""
	|		ИНАЧЕ АвансовыйОтчет.ВидДокВходящий 
	|	КОНЕЦ 												КАК НаименованиеРасхода,
	|	АвансовыйОтчет.СчетУчетаБУ                          КАК СчетЗатрат,
	|	АвансовыйОтчет.СчетУчетаНДС                         КАК СчетНДС,
	|	СУММА(АвансовыйОтчет.Сумма)    КАК ПоОтчету,
	|	СУММА(АвансовыйОтчет.Сумма)                         КАК ПоОтчетуВВалюте,
	|	СУММА(АвансовыйОтчет.СуммаНДС) КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО                                        КАК Договор
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	ВЫБОР 
	|		КОГДА АвансовыйОтчет.ВидДокВходящий = """"
	|			ТОГДА ""Куплены товары""
	|		ИНАЧЕ АвансовыйОтчет.ВидДокВходящий 
	|	КОНЕЦ,
	|	АвансовыйОтчет.СчетУчетаБУ,
	|	АвансовыйОтчет.СчетУчетаНДС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК Строка (1000)),
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код = АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|			КОНЕЦ + ВЫБОР
	|				КОГДА (НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет)
	|						И (НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет)
	|					ТОГДА "", ""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			КОНЕЦ
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(АвансовыйОтчет.Сумма),
	|	0,
	|	АвансовыйОтчет.ДоговорКонтрагента
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК Строка (1000)),
	|	ВЫБОР
	|		КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код = АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			ТОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом.Код
	|			КОНЕЦ + ВЫБОР
	|				КОГДА (НЕ АвансовыйОтчет.СчетУчетаРасчетовСКонтрагентом = &ПустойСчет)
	|						И (НЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет)
	|					ТОГДА "", ""
	|				ИНАЧЕ """"
	|			КОНЕЦ + ВЫБОР
	|				КОГДА АвансовыйОтчет.СчетУчетаРасчетовПоАвансам = &ПустойСчет
	|					ТОГДА """"
	|				ИНАЧЕ АвансовыйОтчет.СчетУчетаРасчетовПоАвансам.Код
	|			КОНЕЦ
	|	КОНЕЦ,
	|	АвансовыйОтчет.ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|" + СтрокаВыборкиПоляСодержания + ",
	|	АвансовыйОтчет.СчетЗатрат,
	|	АвансовыйОтчет.СчетУчетаНДС,
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(АвансовыйОтчет.СуммаНДС),
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|" + СтрокаВыборкиПоляСодержания + ",
	|	АвансовыйОтчет.СчетЗатрат,
	|	АвансовыйОтчет.СчетУчетаНДС
	|
	|) КАК Док
	|";

	ЗапросТовары.Выполнить();
	
    // Выборка уникальных счетов учета по документам, подтверждающим расходы.
	ТекстЗапроса =
	"ВЫБРАТЬ 
	|	Договор КАК Договор,
	|	ДокументНомер КАК ДокументНомер,
	|	ДокументДата КАК ДокументДата,
	|	НаименованиеРасхода КАК НаименованиеРасхода,
	|	СчетЗатрат КАК Счет
	|ПОМЕСТИТЬ
	|	СписокСчетов
	|ИЗ 
	|	ДанныеАвансовогоОтчета
	|";
	Если УчитыватьНДС Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ 
		|	Договор,
		|	ДокументНомер,
		|	ДокументДата,
		|	НаименованиеРасхода,
		|	СчетНДС
		|ИЗ 
		|	ДанныеАвансовогоОтчета
		|";
	
	КонецЕсли;
	
	ЗапросТовары.Текст = ТекстЗапроса;
	ЗапросТовары.Выполнить();
	
	// Свертка сумм по документам, подверждающим расходы.
	ЗапросТовары.Текст =
	"ВЫБРАТЬ
	|	Договор КАК Договор,
	|	ДокументНомер КАК ДокументНомер,
	|	ДокументДата КАК ДокументДата,
	|	НаименованиеРасхода КАК НаименованиеРасхода,
	|	СУММА(ПоОтчету) КАК ПоОтчету,
	|	СУММА(ПоОтчетуВВалюте) КАК ПоОтчетуВВалюте,
	|	СУММА(СуммаНДС) КАК СуммаНДС
	|ИЗ 
	|	ДанныеАвансовогоОтчета
	|
	|СГРУППИРОВАТЬ ПО
	|	Договор,
	|	ДокументНомер,
	|	ДокументДата,
	|	НаименованиеРасхода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата,
	|	ДокументНомер
	|";
	Товар = ЗапросТовары.Выполнить().Выбрать();

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим табличные части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	НомерСтроки   = 0;

	ИтогоПоОтчету        = 0;
	ИтогоПоОтчетуВВалюте = 0;
	СуммаВВалюте = 0;

	Пока Товар.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(Товар);
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
		ОбластьМакета.Параметры.ДокументДата        = Товар.ДокументДата;
		ОбластьМакета.Параметры.НаименованиеРасхода = СокрЛП(Товар.НаименованиеРасхода);
		ОбластьМакета.Параметры.ДебетСубСчета 		= "";
		
		// Выборка счетов, соответствующих документу расхода.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Договор", Товар.Договор);
		Запрос.УстановитьПараметр("ДокументНомер", Товар.ДокументНомер);
		Запрос.УстановитьПараметр("ДокументДата", Товар.ДокументДата);
		Запрос.УстановитьПараметр("НаименованиеРасхода", Товар.НаименованиеРасхода);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Счет
		|ИЗ
		|	СписокСчетов
		|ГДЕ
		|	Договор = &Договор 
		|	И ДокументНомер = &ДокументНомер
		|	И ДокументДата = &ДокументДата
		|	И НаименованиеРасхода = &НаименованиеРасхода
		|УПОРЯДОЧИТЬ ПО
		|	Счет
		|";
			
		ВыборкаСчетов = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСчетов.Следующий() Цикл
			ОбластьМакета.Параметры.ДебетСубСчета = ОбластьМакета.Параметры.ДебетСубСчета
			                                      + ?(ПустаяСтрока(ОбластьМакета.Параметры.ДебетСубСчета), "", ", ")
			                                      + ВыборкаСчетов.Счет;
		КонецЦикла;
		

		Сумма = Товар.ПоОтчету + ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);
		
		Если НЕ (Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
			Сумма         = ?(КратностьДокумента <> 0, Сумма * КурсДокумента / КратностьДокумента, 0);
		КонецЕсли;

		ОбластьМакета.Параметры.ПоОтчету = Сумма;
		ОбластьМакета.Параметры.ПоУчету  = Сумма;
		ИтогоПоОтчету = ИтогоПоОтчету + Сумма;

		Если НЕ (Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
			СуммаВВалюте = Товар.ПоОтчетуВВалюте + ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);
			ОбластьМакета.Параметры.ПоУчетуВВалюте  = СуммаВВалюте;
			ОбластьМакета.Параметры.ПоОтчетуВВалюте = СуммаВВалюте;
			ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + СуммаВВалюте;
		Иначе  	
			ОбластьМакета.Параметры.ПоУчетуВВалюте  = 0;
			ОбластьМакета.Параметры.ПоОтчетуВВалюте = 0;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Выводим подвал авансового отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ИтогоПоОтчету                 = ИтогоПоОтчету;
	ОбластьМакета.Параметры.ИтогоПоОтчетувВалюте          = ИтогоПоОтчетуВВалюте;
	ОбластьМакета.Параметры.ИтогоПоУчету                  = ИтогоПоОтчету;
	ОбластьМакета.Параметры.ИтогоПоУчетувВалюте           = ИтогоПоОтчетуВВалюте;
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ПодотчетноеЛицо;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАвансовогоОтчета()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Аванс_Отчет" Тогда
		
		ТабДокумент = ПечатьАвансовогоОтчета();
		
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидПоступления)), Ссылка);
		
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура;
	СтруктПечатныхФорм.Вставить("Аванс_Отчет",    "Авансовый отчет");
	СтруктПечатныхФорм.Вставить("СерийныеНомера", "Список серийных номеров");
	
	Возврат СтруктПечатныхФорм;
	
КонецФункции // ПолучитьТаблицуПечатныхФорм()

// Процедура выполняет заполнение табличной части выданные авансы.
//
Процедура ЗаполнитьВыданныеАвансы() Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ФизЛицо",           ФизЛицо);
	Запрос.УстановитьПараметр("ВалютаДокумента",   ВалютаДокумента);
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ДатаОстатков",      ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	Запрос.УстановитьПараметр("ОтражатьВБухУчете", ОтражатьВБухгалтерскомУчете);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.РасчетныйДокумент КАК ДокументАванса,
	|	Остатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			&ДатаОстатков,
	|			ФизЛицо = &ФизЛицо
	|				И (НЕ РасчетныйДокумент ССЫЛКА Документ.АвансовыйОтчет)
	|				И Валюта = &ВалютаДокумента
	|				И Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &ОтражатьВБухУчете
	|						ТОГДА ЕСТЬNULL(РасчетныйДокумент.ОтражатьВБухгалтерскомУчете, ИСТИНА)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК Остатки
	|ГДЕ
	|	Остатки.СуммаВзаиморасчетовОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Остатки.РасчетныйДокумент.Дата,
	|	Остатки.РасчетныйДокумент.Номер";

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		#Если Клиент Тогда
		Предупреждение("У подотчетного лица """                           + СокрЛП(ФизЛицо)         +
		               """ отсутствуют выданные авансы,"                  + Символы.ПС              +
		               "за которые он не отчитался перед организацией """ + СокрЛП(Организация)     +
		               """ в валюте взаиморасчетов """                    + СокрЛП(ВалютаДокумента) + """");
		#КонецЕсли
		Возврат;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаВыданныеАвансы                = ВыданныеАвансы.Добавить();
		СтрокаВыданныеАвансы.ДокументАванса = Выборка.ДокументАванса;
		СтрокаВыданныеАвансы.Сумма          = Выборка.Сумма;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьВыданныеАвансы()

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт

	// Сформируем запрос по шапке документа-основания
	ЗапросПоШапке = Новый Запрос;

	ЗапросПоШапке.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"            , СкладОрдер);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОстатков", 		  ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	СкладыВТабличнойЧасти = мУказаниеСкладовВТЧ Или ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;	

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДокТовары.НомерСтроки) КАК НомерСтроки,
	|	ДокТовары.Номенклатура                 КАК Номенклатура,
	|	ДокТовары.СерияНоменклатуры            КАК СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|" + ?(СкладыВТабличнойЧасти, "
	|   Остатки.Склад                          КАК Склад,", "") + "
	|	СУММА(ДокТовары.Количество)            КАК КоличествоПоСерии, 
	|	МАКСИМУМ(Остатки.КоличествоОстаток)    КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура И
	|	ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры И
	|	ДокТовары.СерияНоменклатуры = Остатки.СерияНоменклатуры
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура,
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры
	|" + ?(СкладыВТабличнойЧасти, ",
	|	Остатки.Склад", "") + "
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;
	
	Поставщик = ДокументОснование.Контрагент;
	Выборка   = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		СтрокаТабличнойЧасти.Поставщик                  = Поставщик;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ПриходныйОрдер             = ДокументОснование;
		
		Если СкладыВТабличнойЧасти Тогда
			СтрокаТабличнойЧасти.Склад = Выборка.Склад;
		Иначе
			СтрокаТабличнойЧасти.Склад = ДокументОснование.Склад;
		КонецЕсли;

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");

		ЗаполнитьТоварыПоОснованиюРегл(СтрокаТабличнойЧасти);
		
		Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
			СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение табличной части по приходному ордеру на товары.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт

	// Сформируем запрос по шапке документа-основания
	ЗапросПоШапке = Новый Запрос;

	ЗапросПоШапке.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"            , СкладОрдер);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОстатков", 	   ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокВозвратнаяТара.Номенклатура                 КАК Номенклатура,
	|	СУММА(ДокВозвратнаяТара.Количество)            КАК КоличествоПоСерии,
	|	МАКСИМУМ(Остатки.КоличествоОстаток)            КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.ВозвратнаяТара КАК ДокВозвратнаяТара
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокВозвратнаяТара.Номенклатура = Остатки.Номенклатура
	|
	|ГДЕ
	|	ДокВозвратнаяТара.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокВозвратнаяТара.Номенклатура";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

		СтрокаТабличнойЧасти.Номенклатура   = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество     = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
		СтрокаТабличнойЧасти.Контрагент     = ДокументОснование.Контрагент;
		СтрокаТабличнойЧасти.ПриходныйОрдер = ДокументОснование;
		СтрокаТабличнойЧасти.Склад          = ДокументОснование.Склад;

		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент) 
			и (СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента.Организация = Организация) 
			и (СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) Тогда
			СтрокаТабличнойЧасти.ДоговорКонтрагента = СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОснованию()

// Процедура выполняет заполнение табличной части выданные авансы и прочее.
//
Процедура ЗаполнитьНаОснованииРКО(ДокументОснование)

	ФизЛицо = ДокументОснование.Контрагент;

	//Валюта авансового отчета  должна быть равна валюте взаиморасчетов с подотчетником, выбранной в РКО.
	ВалютаДокумента = ДокументОснование.ВалютаВзаиморасчетовРаботника;
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ОбщегоНазначения.ПолучитьРабочуюДату());
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	// Вид поступления - по умолчанию "На склад".
	ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	СкладОрдер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");

	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокОснование",    ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОстатков",    ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Остатки.РасчетныйДокумент                КАК РасчетныйДокумент,
	|	Остатки.СуммаВзаиморасчетовОстаток       КАК СуммаИзрасходовано
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаОстатков, РасчетныйДокумент = &ДокОснование) КАК Остатки
	|";

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Шапка = Результат.Выбрать();
	Шапка.Следующий();

	СтрокаАвансы                = ВыданныеАвансы.Добавить();
	СтрокаАвансы.ДокументАванса = Шапка.РасчетныйДокумент;
	СтрокаАвансы.Сумма          = Шапка.СуммаИзрасходовано;

КонецПроцедуры // ЗаполнитьНаОснованииРКО()

// Процедура выполняет заполнение документа по документу-основанию.
//
// Параметры:
//  Основание - ссылка на документ основание (приходный ордер товаров).
//
Процедура ОбработкаЗаполненияУпр(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
	   И Основание.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидПоступления               = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
		СкладОрдер                   = Основание;
		ФизЛицо                      = Основание.ФизЛицо;
		УчитыватьНДС                 = Истина;
		СуммаВключаетНДС             = Истина;
		ВалютаДокумента              = мВалютаРегламентированногоУчета;

		Если ЗначениеЗаполнено(Основание.Контрагент)
		   И ЗначениеЗаполнено(Основание.Контрагент.ОсновнойДоговорКонтрагента)
		   И ЗначениеЗаполнено(Основание.Контрагент.ОсновнойДоговорКонтрагента.ТипЦен) Тогда

			// Тип цен заполняем, только если в договоре указаны тип цен контрагента (он - поставщик).
			ТипЦенКонтрагента = Основание.Контрагент.ОсновнойДоговорКонтрагента.ТипЦен;
			Если ТипЗнч(ТипЦенКонтрагента) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
				ТипЦен = ТипЦенКонтрагента.ТипЦеныНоменклатуры;
			КонецЕсли;
		КонецЕсли;

		Если Основание.Проведен Тогда
			// Заполним табличные части по приходному ордеру на товары.
			ЗаполнитьТоварыПоОснованию(Основание);
			ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
	        И Основание.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Заолненим теперь на оснвании РКО.
		ЗаполнитьНаОснованииРКО(Основание);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполненияУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверка соответствия организации указанной в документе
// и организации в реквизитах табличной части.
//
// Параметры:
//  ДокументОбъект              - объект проводимого документа,
//  ИмяТабличнойЧасти           - табличная часть документа,
//  ТаблицаЗначений             - таблица значений, содержащая данные табличной части,
//  СписокПроверяемыхРеквизитов - список значений, список проверяемых реквизитов табличной части,
//  Отказ                       - флаг отказа в проведении,
//  Заголовок                   - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьОрганизациюВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений,
                                              СписокПроверяемыхРеквизитов, Отказ, Заголовок)

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """     + СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                                """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		// Цикл по проверяемым реквизитам
		Для каждого ЭлементСписка Из СписокПроверяемыхРеквизитов Цикл
			ПроверяемоеЗначение = СтрокаТаблицы[ЭлементСписка.Значение];
			ТекстСообщения      = ЭлементСписка.Представление;

			// Если не заполнен реквизит или организация, то не ругаемся.
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) 
			   И ЗначениеЗаполнено(ПроверяемоеЗначение)
			   И ДокументОбъект.Организация <> ПроверяемоеЗначение Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке 
				                 + "выбран " + ТекстСообщения + ", не соответствующий организации указанной в документе!", Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ПроверитьОрганизациюВТабличнойЧасти()

// Проверка соответствия организации указанной в документе
// и организации в документах основания реквизита "СчетФактура" в табличных частях "Товары", "Прочее".
//
// Параметры:
//  Отказ     - флаг отказа в проведении,
//  Заголовок - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьОрганизациюВДокументахОснованияСчетФактуры(Отказ, Заголовок)

	МетаданныеДокумента = ЭтотОбъект.Метаданные();
	ПредставлениеТовары = МетаданныеДокумента.ТабличныеЧасти["Товары"].Представление();
	ПредставлениеПрочее = МетаданныеДокумента.ТабличныеЧасти["Прочее"].Представление();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарАвансовыйОтчет",      Ссылка);
	Запрос.УстановитьПараметр("ПарОрганизация",         Организация);
	Запрос.УстановитьПараметр("ПарПредставлениеТовары", ПредставлениеТовары);
	Запрос.УстановитьПараметр("ПарПредставлениеПрочее", ПредставлениеПрочее);

	Запрос.Текст ="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ПарПредставлениеТовары          КАК ПредставлениеТЧ,
	|	АвансовыйОтчетТовары.НомерСтроки КАК НомерСтрокиТЧ
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК ДокСФ
	|		ПО АвансовыйОтчетТовары.СчетФактура = ДокСФ.Ссылка
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка = &ПарАвансовыйОтчет
	|	И ДокСФ.ДокументОснование.Организация <> &ПарОрганизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ПарПредставлениеПрочее          КАК ПредставлениеТЧ,
	|	АвансовыйОтчетПрочее.НомерСтроки КАК НомерСтрокиТЧ
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК ДокСФ
	|		ПО АвансовыйОтчетПрочее.СчетФактура = ДокСФ.Ссылка
	|ГДЕ
	|	АвансовыйОтчетПрочее.Ссылка = &ПарАвансовыйОтчет
	|	И ДокСФ.ДокументОснование.Организация <> &ПарОрганизация
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			СтрокаСообщенияОбОшибке = "В строке номер """     + СокрЛП(Выборка.НомерСтрокиТЧ)   +
			                          """ табличной части """ + СокрЛП(Выборка.ПредставлениеТЧ) +
			                          """: выбран счет-фактура, где организация, указанная в документах основания" +
			                          " не соответствует организации указанной в документе!";

			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке, Отказ, Заголовок);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверитьОрганизациюВДокументахОснованияСчетФактуры()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	ТаблицаТоваров.Колонки.Добавить("Содержание");
	БухгалтерскийУчет.СформироватьСодержаниеПроводкиПоВходящемуДокументу(ТаблицаТоваров, "Поступление");
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;

	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий И НЕ НДСВключенВСтоимость Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;


		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()	

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТары.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.ЗагрузитьКолонку(ТаблицаТары.ВыгрузитьКолонку("Сумма") , "Стоимость");
	ТаблицаТары.Колонки.Добавить("ВестиПартионныйУчетПоСериям", Новый ОписаниеТипов("Булево"));
	ТаблицаТары.Колонки.Добавить("СчетФактура",                Новый ОписаниеТипов("ДокументСсылка.СчетФактураПолученный"));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента);

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;

	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаДоговора, Дата);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтрокаТаблицы.ВалютаДоговора, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураКурса.Курс, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураКурса.Кратность);

		// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		Иначе
			СтрокаТаблицы.Сделка = Неопределено;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплате, СтруктураШапкиДокумента)

	ТаблицаПоОплате = РезультатЗапросаПоОплате.Выгрузить();
	
	// Для договоров, по которым ведется учет по документам расчетов с контрагентами, 
	// если значения документа расчетов в таблице не заполнено необходимо прописать туда ссылку
	// на текущий документ
	Для каждого СтрокаТаблицы Из ТаблицаПоОплате Цикл
		
		Если СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом
		   И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда

			СтрокаТаблицы.ДокументРасчетовСКонтрагентом = Ссылка;

		КонецЕсли;
		
		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			СтрокаТаблицы.Сделка = Неопределено;	
		КонецЕсли;	
		
	КонецЦикла;

	ПодготовитьТаблицуПоОплатеУпр(ТаблицаПоОплате, СтруктураШапкиДокумента);
    ПодготовитьТаблицуПоОплатеРегл(ТаблицаПоОплате, СтруктураШапкиДокумента);
	
	Возврат ТаблицаПоОплате;

КонецФункции // ПодготовитьТаблицуПоОплате()

Процедура ПодготовитьТаблицуПоОплатеУпр(ТаблицаПоОплате, СтруктураШапкиДокумента)
	
	ТаблицаПоОплате.Колонки.Добавить("СуммаУпр",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));	
	
	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаПоОплате Цикл

		// Суммы пересчитаем в валюту упр. учета.
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуПоОплатеУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоПрочие  - результат запроса по табличной части "Прочие",
//  СтруктураШапкиДокумента  - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента)

	ТаблицаПрочие = РезультатЗапросаПоПрочее.Выгрузить();

	ПодготовитьТаблицуПрочиеУпр(ТаблицаПрочие, СтруктураШапкиДокумента);
	ПодготовитьТаблицуПрочиеРегл(ТаблицаПрочие, СтруктураШапкиДокумента);
	
	Возврат ТаблицаПрочие;

КонецФункции // ПодготовитьТаблицуПрочие()

Процедура ПодготовитьТаблицуПрочиеУпр(ТаблицаПрочие, СтруктураШапкиДокумента)

	КолонкаСумма = ТаблицаПрочие.Колонки["Сумма"];
	КолонкаСуммаУпр = ТаблицаПрочие.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов(КолонкаСумма.ТипЗначения));
	КолонкаСуммаУпр = ТаблицаПрочие.Колонки.Добавить("Стоимость", Новый ОписаниеТипов(КолонкаСумма.ТипЗначения));
	
	ТаблицаПрочие.Колонки.Добавить("НДСУпр"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	Для Каждого СтрокаТаблицы Из ТаблицаПрочие Цикл
		
		// Пересчитаем сумму по курсу
		СтрокаТаблицы.СуммаУпр = (СтрокаТаблицы.Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.СуммаНДС, 0)) *
			((СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) /
			(СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета * СтруктураШапкиДокумента.КратностьДокумента));
			
		СтрокаТаблицы.Стоимость  = СтрокаТаблицы.Сумма + 
		                          ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.СуммаНДС, 0);
		                          
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуПрочиеУпр()

Процедура ПодготовитьТаблицуПрочиеРегл(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		НДС   = СтрокаТаблицы.НДС;
		Сумма = ?(СуммаВключаетНДС, СтрокаТаблицы.Сумма - НДС, СтрокаТаблицы.Сумма);

		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьДокумента,
			                                 Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НДС, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьДокумента,
			                                 Данные.Кратность);
		КонецЕсли;

		СтрокаТаблицы.СуммаРегл = СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаНДС; // Используется в процедурах отражения затрат
		
		СтрокаТаблицы.Содержание = СтрокаТаблицы.Содержание + " по " + СтрокаТаблицы.ВидДокВходящий + " " + СтрокаТаблицы.НомерВходящегоДокумента + " от " + Формат(СтрокаТаблицы.ДатаВходящегоДокумента, "ДЛФ=Д");
		
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуПрочиеРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидПоступления, Организация, ФизЛицо, ВалютаДокумента");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Если склад указывается в ТЧ, то в шапке он может быть не заполнен или указан неправильно,
	// это ни на что не влияет, потому что при проведении используется склад в ТЧ.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти
	   И Товары.Количество() + ВозвратнаяТара.Количество() > 0 Тогда
	   
		Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СкладОрдер) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита ""Склад""!", Отказ, Заголовок); 
			 
		ИначеЕсли СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять поступление на НТТ!", Отказ, Заголовок);
		КонецЕсли;
	
	КонецЕсли;

	// Израсходованная сумма
	Если ВыданныеАвансы.Итог("Сумма") > СуммаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Израсходованная сумма превышает сумму по документу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Выданные авансы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоАвансам          - таблица значений, содержащая данные для проведения и проверки ТЧ "ВыданныеАвансы",
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(ТаблицаПоАвансам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументАванса, Сумма");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверка организации
	СписокПроверяемыхРеквизитов = Новый СписокЗначений;
	СписокПроверяемыхРеквизитов.Добавить("ДокументАвансаОрганизация", "документ аванса");
	ПроверитьОрганизациюВТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы", ТаблицаПоАвансам, СписокПроверяемыхРеквизитов, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы()

// Проверяет, что в табличной части заполнены все реквизиты необходимые для учета НДС.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеДляНДС(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, Отказ, Заголовок)
	
	Если Не ДокументОбъект.УчитыватьНДС Тогда
		// Если не учитываем НДС то и проверка правильности заполнения не нужна																		
		Возврат;
	КонецЕсли;
	
	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		Если Не СтрокаТаблицы.НДС = 0 Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(СтрокаТаблицы.НомерСтроки) +
										  """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
										  
			Если СтрокаТаблицы.ПредъявленСФ И Не ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
				ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение реквизита ""Поставщик""!";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если СтрокаТаблицы.ПредъявленСФ И Не ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
				ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение реквизита ""Ставка НДС""!";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
				Если СтрокаТаблицы.ПредъявленСФ Тогда
					ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение реквизита ""Счет-фактура""!";
					ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
				КонецЕсли;
			ИначеЕсли Не СтрокаТаблицы.ПредъявленСФ Тогда
				ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + "Движения для учета НДС не будут сформированы! Заполнены все необходимые данные, но не установлен признак предъявления поставщиком счета-фактуры по строке.";
				Сообщить(ТекстСообщения);
			КонецЕсли;
			
			Если СтрокаТаблицы.ПредъявленСФ 
				И (Не ЗначениеЗаполнено(СтрокаТаблицы.Поставщик)
				Или Не ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС)
				Или Не ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура)) Тогда
				ТекстСообщения = СтрокаНачалаСообщенияОбОшибке + "Сумма НДС по строке выделена, но движения для учета НДС не будут сформированы.";
				Сообщить(ТекстСообщения);
			КонецЕсли;
		
		КонецЕсли;	
		
		Если Не СтрокаТаблицы.ПредъявленСФ И ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
			СтрокаТаблицы.СчетФактура = Неопределено;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоВсеЗаполненоДляНДС()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТовары();

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	
	
	// Здесь НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Проверка организации
	СписокПроверяемыхРеквизитов = Новый СписокЗначений;
	СписокПроверяемыхРеквизитов.Добавить("ОрганизацияДокументаПолучения", "приходный ордер на товары");
	ПроверитьОрганизациюВТабличнойЧасти(ЭтотОбъект, "Товары", ТаблицаПоТоварам, СписокПроверяемыхРеквизитов, Отказ, Заголовок);

	// Проверить правильность заполнения для строк по НДС.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПроверитьЗаполнениеДляНДС(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

	// Проверка наличия продажных цен на приходуемый товар.
	УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ,
	                                                       Заголовок, "ВидСклада");
														   
	// Проверка соответствия количества серийных номеров количеству товаров.
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОплатаПоставщикам";
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Контрагент, ДоговорКонтрагента, Сумма");

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиОплатаПоставщикамРегл(СтруктураОбязательныхПолей);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверим заполнение заказов поставщикам
	УправлениеВзаиморасчетами.ПроверитьСделкуВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоОплате, Отказ, Заголовок);

	// Проверка организации, договор взаиморасчетов проверяем всегда.
	СписокПроверяемыхРеквизитов = Новый СписокЗначений;
	СписокПроверяемыхРеквизитов.Добавить("ДоговорОрганизация", "договор контрагента");
	СписокПроверяемыхРеквизитов.Добавить("СделкаОрганизация",  "документ сделки");
	ПроверитьОрганизациюВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоОплате, СписокПроверяемыхРеквизитов, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоПрочее         - таблица значений, содержащая результат запроса с данными для проведения и проверки ТЧ Прочее
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	РеквизитыСтр = "Содержание, Сумма, СтатьяЗатрат";
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		РеквизитыСтр = РеквизитыСтр + ", СтавкаНДС";
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Прочее", Новый Структура(РеквизитыСтр), Отказ, Заголовок);

	
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Прочее", ТаблицаПоПрочее, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Прочее", ТаблицаПоПрочее, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Прочее", ТаблицаПоПрочее, Отказ, Заголовок);

	// Проверить правильность заполнения для строк по НДС.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПроверитьЗаполнениеДляНДС(ЭтотОбъект, "Прочее", ТаблицаПоПрочее, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверим соответствие подразделения и оранизации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизацииВСтрокахТабЧасти(ЭтотОбъект, ТаблицаПоПрочее, "Прочее",, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПрочее()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТара();
	СтруктураОбязательныхПолей.Вставить("Контрагент");
	СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	//Счет учета расчетов по возвратной таре
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаТары");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок, "ВидСклада");

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// Проверка организации, договор взаиморасчетов проверяем всегда.
	СписокПроверяемыхРеквизитов = Новый СписокЗначений;
	СписокПроверяемыхРеквизитов.Добавить("ДоговорОрганизация",            "договор контрагента");
	СписокПроверяемыхРеквизитов.Добавить("СделкаОрганизация",             "документ сделки");
	СписокПроверяемыхРеквизитов.Добавить("ОрганизацияДокументаПолучения", "приходный ордер на товары");
	ПроверитьОрганизациюВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, СписокПроверяемыхРеквизитов, Отказ, Заголовок);

	// Если ведение взаиморасчетов "По заказам", "Сделка" должна быть заполнена.
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	Для каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)
		   И СтрокаТаблицы.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		   И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сделка) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Сделка""!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

	// Нельзя резервировать возвратную тару под заказ покупателя с обособленным учетом
	УправлениеЗаказами.ПроверитьРезервированиеТарыПодЗаказСОбособленнымУчетом(ЭтотОбъект,"Заказ", ложь,, Отказ, Заголовок);													   

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Формируем движения по ТЧ "ВыданныеАвансы"
//
// Параметры: 
//  СтруктураШапкиДокумента                  - выборка из результата запроса по шапке документа
//  ВыборкаПоВыданныеАвансы		             - выборка из результата запроса по ТЧ "ВыданныеАвансы" 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//  Режим									 - режим проведения
//  Отказ   			                     - флаг отказа в проведении.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДвиженияПоПодотчетникамУпр(СтруктураШапкиДокумента, ТаблицаПоВыданныеАвансы, Режим, Отказ, Заголовок)

	// Если НДС и не включаются в сумму документа, то его надо добавить 
	// к общей сумме
	Налоги = 0;
	НалогиПрочее = 0;
	Если СуммаВключаетНДС = 0 Тогда
		Налоги = Товары.Итог("СуммаНДС");
		НалогиПрочее = Прочее.Итог("СуммаНДС");
	КонецЕсли;

	// Следующие переменные будут содержать текущие (непогашенные) остатки сумм
	// по табличным частям документа
	ОстПогСуммаТовары = Товары.Итог("Сумма") + Налоги;
	ОстПогСуммаОплата = ОплатаПоставщикам.Итог("Сумма");
	ОстПогСуммаПрочее = Прочее.Итог("Сумма") + НалогиПрочее;
	
	НаборДвижений   = Движения.ВзаиморасчетыСПодотчетнымиЛицами;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого СтрокаТаблицы Из ТаблицаПоВыданныеАвансы Цикл

		Если Отказ Тогда
			Продолжить;
		КонецЕсли;

		ОстПогРКО = СтрокаТаблицы.Сумма;
		
		// Будем последовательно списывать суммы по табличным частям документа,
		// делая движения с соответствующими кодами операций
		Пока ОстПогРКО > 0 Цикл
			
			// ОстПог - текущий остаток по текущей ТЧ документа, который надо погасить
			Если ОстПогСуммаТовары > 0 Тогда
				ОстПог					= ОстПогСуммаТовары;  
				//КодОперации				= Перечисления.КодыОпераций.АвансовыйОтчетЗакупкаТМЦ;
				ОстПогСуммаТовары	= ОстПогСуммаТовары - Мин(ОстПог, ОстПогРКО);
			ИначеЕсли ОстПогСуммаОплата > 0 Тогда
				ОстПог					= ОстПогСуммаОплата;
				//КодОперации				= Перечисления.КодыОпераций.АвансовыйОтчетОплатаПоставщикам;
				ОстПогСуммаОплата		= ОстПогСуммаОплата - Мин(ОстПог, ОстПогРКО);
			ИначеЕсли ОстПогСуммаПрочее > 0 Тогда
				ОстПог					= ОстПогСуммаПрочее;
				//КодОперации				= Перечисления.КодыОпераций.АвансовыйОтчетПрочее;
				ОстПогСуммаПрочее		= ОстПогСуммаПрочее - Мин(ОстПог, ОстПогРКО);
			Иначе
				Прервать;
			КонецЕсли;
				
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			
			// Измерения
			СтрокаДвижений.Организация	        = СтруктураШапкиДокумента.Организация;
			СтрокаДвижений.ФизЛицо	 	        = ФизЛицо;
			СтрокаДвижений.РасчетныйДокумент    = СтрокаТаблицы.ДокументАванса;
			СтрокаДвижений.Валюта			    = ВалютаДокумента;

			// Ресурсы
			СтрокаДвижений.СуммаВзаиморасчетов  = Мин(ОстПог, ОстПогРКО);
			СтрокаДвижений.СуммаУпр             = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаВзаиморасчетов,
								ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента,
								СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, КратностьДокумента,
								СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			ОстПогРКО = ОстПогРКО - СтрокаДвижений.СуммаВзаиморасчетов;
			
		КонецЦикла;
			
	КонецЦикла; 

	// Если все суммы выданных авансов списаны, а суммы по расходам списаны неполностью,
	// то возникает перерасход
	Перерасход = ОстПогСуммаТовары + ОстПогСуммаОплата + ОстПогСуммаПрочее;

	Если Перерасход > 0 И НЕ Отказ Тогда

		СтрокаДвижений = ТаблицаДвижений.Добавить();
		
		// Измерения
		СтрокаДвижений.Организация	        = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.ФизЛицо	 	        = ФизЛицо;
		СтрокаДвижений.РасчетныйДокумент    = Ссылка;
		СтрокаДвижений.Валюта			    = ВалютаДокумента;

		// Ресурсы
		СтрокаДвижений.СуммаВзаиморасчетов  = Перерасход;
		СтрокаДвижений.СуммаУпр             = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаВзаиморасчетов,
								ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента,
								СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, КратностьДокумента,
								СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЕсли;

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоПодотчетникам()

Процедура ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ, Заголовок)
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.

		РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
		                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый));

		Если Не РезультатЗапроса.Пустой() Тогда
			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса.Выгрузить(), ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;

		РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
		                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный));

		Если Не РезультатЗапроса.Пустой() Тогда
			НаборДвижений = Движения.ТоварыВРознице;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса.Выгрузить(), ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
		РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре,
		                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый));

		Если Не РезультатЗапроса.Пустой() Тогда
			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса.Выгрузить(), ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;

		РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре,
		                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный));

		Если Не РезультатЗапроса.Пустой() Тогда
			НаборДвижений = Движения.ТоварыВРознице;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса.Выгрузить(), ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;
	Иначе

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады.
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
        ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Контроль остатков
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли; 

		Если Не Отказ Тогда
			Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады.
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
        ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Контроль остатков
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли; 

		Если Не Отказ Тогда
			Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
		КонецЕсли;

		// Если товары поступили по ордеру без права продажи, то надо снять резерв
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру  Тогда
		   ТаблицаПоТоварамПоОрдерам = ТаблицаПоТоварам.Скопировать();
		   Сч = 0;
		   Пока Сч < ТаблицаПоТоварамПоОрдерам.Количество() Цикл
			   СтрокаТаблицы = ТаблицаПоТоварамПоОрдерам.Получить(Сч);
			   Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПолучения)
				   ИЛИ НЕ СтрокаТаблицы.ДокументПолучения.БезПраваПродажи Тогда             // Резерв в это случае делать не надо.
				   ТаблицаПоТоварамПоОрдерам.Удалить(СтрокаТаблицы);
			   Иначе
				   Сч = Сч + 1;
			   КонецЕсли;
		   КонецЦикла;
		   ТаблицаПоТареПоОрдерам = ТаблицаПоТаре.Скопировать();
		   Сч = 0;
		   Пока Сч < ТаблицаПоТареПоОрдерам.Количество() Цикл
			   СтрокаТаблицы = ТаблицаПоТареПоОрдерам.Получить(Сч);
			   Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПолучения)
				   ИЛИ НЕ СтрокаТаблицы.ДокументПолучения.БезПраваПродажи Тогда             // Резерв в это случае делать не надо.
				   ТаблицаПоТареПоОрдерам.Удалить(СтрокаТаблицы);
			   Иначе
				   Сч = Сч + 1;
			   КонецЕсли;
		   КонецЦикла;

		   Если ТаблицаПоТоварамПоОрдерам.Количество()+ТаблицаПоТареПоОрдерам.Количество()>0  Тогда

				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
				
				// Контроль остатков
				Если ТаблицаПоТоварамПоОрдерам.Количество()>0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ТаблицаПоТареПоОрдерам.Количество()>0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;

				Если Не Отказ Тогда
					ТаблицаПоТоварамПоОрдерам.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
               		ТаблицаПоТареПоОрдерам.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
					
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамПоОрдерам);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареПоОрдерам);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;


            КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Резервирование по заказам покупателей
		
	// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	// (реквизит ЗаказПокупателя пуст)
	ТаблицаПоТоварамЗаказамПокупателей = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамЗаказамПокупателей.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамЗаказамПокупателей.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
			 ИЛИ (ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
			   И  СтрокаТаблицы.ЗаказПокупателя.Заказчик = Ссылка.СкладОрдер) Тогда             // Резерв в это случае делать не надо.
			ТаблицаПоТоварамЗаказамПокупателей.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаПоТоварамЗаказамПокупателей.Количество() > 0 Тогда

		ТаблицаПоТоварамЗаказамПокупателей.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";

		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийРезервы = НаборДвижений.Выгрузить();
		ТаблицаДвиженийРезервы.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЗаказамПокупателей, ТаблицаДвижений);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
		КонецЕсли;

		ТаблицаДвижений.Очистить();
		
	КонецЕсли;
	
		// Теперь зарезервируем возвратную тару
	// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	// (реквизит ЗаказПокупателя пуст)
	ТаблицаПоТареЗаказамПокупателей = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареЗаказамПокупателей.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареЗаказамПокупателей.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
			 ИЛИ (ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
			   И  СтрокаТаблицы.ЗаказПокупателя.Заказчик = Ссылка.СкладОрдер) Тогда             // Резерв в это случае делать не надо.
			ТаблицаПоТареЗаказамПокупателей.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаПоТареЗаказамПокупателей.Количество() > 0 Тогда

		ТаблицаПоТареЗаказамПокупателей.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";

		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийРезервы = НаборДвижений.Выгрузить();
		ТаблицаДвиженийРезервы.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТареЗаказамПокупателей, ТаблицаДвижений);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
		КонецЕсли;

		ТаблицаДвижений.Очистить();

	КонецЕсли;

	// Погашение внутренних заказов в случае Заказчик = Склад поступления
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить( "СтатусПартии",          Перечисления.СтатусыПартийТоваров.Купленный);
	ДопПараметры.Вставить( "РежимПроведения",       РежимПроведения);
	ДопПараметры.Вставить( "ИмяРеквизитаЗаказ",     "Заказ");
	ДопПараметры.Вставить( "ЗаказВШапке",           Ложь);
	ДопПараметры.Вставить( "ИмяТабЧасти",           "Товары");
	
	ТабИсходная = ТаблицаПоТоварам.Скопировать();
	ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.Купленный);

	Если ТабИсходная.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;
	
	ТабИсходная.Очистить();
	ТабИсходная = ТаблицаПоТаре.Скопировать();
	ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	ДопПараметры.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	ДопПараметры.Вставить( "ИмяТабЧасти",  "ВозвратнаяТара");
	
	Если ТабИсходная.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, ТаблицаПоТаре, ,ОтражатьВУправленческомУчете);

	// ТОВАРЫ ПО РЕГИСТРУ Закупки.
	
	НаборДвижений = Движения.Закупки;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
	ТаблицаДвиженийЗакупки.Очистить();
	ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
	
	// Стоимость в регистре Закупки должна быть с НДС при любых настройках НеВключатьНДСВСтоимостьПартий.
	КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
	КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
	
	КопияТаблицыТоваров.Колонки.НДС   .Имя = "_НДС";
	КопияТаблицыТоваров.Колонки.НДСУпр.Имя = "НДС";
	
	// <- Шевченков №54944
	КопияТаблицыТоваров.Колонки.СуммаВал.Имя = "ПРГ_СтоимостьВал"; 
	КопияТаблицыТоваров.Колонки.НДСВал.Имя = "ПРГ_НДСВал";
	Если КопияТаблицыТоваров.Колонки.Найти("ПРГ_ВалютаДокумента") = Неопределено Тогда
		КопияТаблицыТоваров.Колонки.Добавить("ПРГ_ВалютаДокумента", новый описаниетипов("СправочникСсылка.Валюты"));			
	КонецЕсли;
	// ->
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
		
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыТоваров,ТаблицаДвижений,Проект,Дата,"Закупки");
		
	Иначе
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);
		
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаДокумента, "ПРГ_ВалютаДокумента");  // Шевченков №54944
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументЗакупки");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.Закупки.ВыполнитьДвижения();
	КонецЕсли;
	
	// ПРОЧЕЕ ПО РЕГИСТРУ Закупки.
	
	НаборДвижений = Движения.Закупки;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
	ТаблицаДвиженийЗакупки.Очистить();
	ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
	
	// Стоимость в регистре Закупки должна быть с НДС при любых настройках НеВключатьНДСВСтоимостьПартий.
	КопияТаблицыПрочее = ТаблицаПоПрочее.Скопировать();
	КопияТаблицыПрочее.ЗагрузитьКолонку(КопияТаблицыПрочее.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
	
	КопияТаблицыПрочее.Колонки.НДС   .Имя = "_НДС";
	КопияТаблицыПрочее.Колонки.НДСУпр.Имя = "НДС";
	
	// <- Шевченков №54944
	КопияТаблицыПрочее.Колонки.СуммаВал.Имя = "ПРГ_СтоимостьВал"; 
	КопияТаблицыПрочее.Колонки.НДСВал.Имя = "ПРГ_НДСВал";
	Если КопияТаблицыПрочее.Колонки.Найти("ПРГ_ВалютаДокумента") = Неопределено Тогда
		КопияТаблицыПрочее.Колонки.Добавить("ПРГ_ВалютаДокумента", новый описаниетипов("СправочникСсылка.Валюты"));			
	КонецЕсли;
	// ->
	
	Если КопияТаблицыПрочее.Колонки.Найти("Количество")=Неопределено Тогда
		КопияТаблицыПрочее.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
		
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыПрочее,ТаблицаДвижений,Проект,Дата,"Закупки");
		
	Иначе
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицыПрочее, ТаблицаДвижений);
		
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаДокумента, "ПРГ_ВалютаДокумента");  // Шевченков №54944
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументЗакупки");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.Закупки.ВыполнитьДвижения();
	КонецЕсли;
	
КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартийУпр()

Процедура  ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, знач СтатусПартии)
	Сч = 0;

	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.ЗаказПокупателя.Заказчик = СкладОрдер Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ЗаказПокупателя, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, 
																   ?(СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,неопределено,СтрокаТаблицы.ХарактеристикаНоменклатуры), 
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   СтатусПартии);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	ТабИсходная.Колонки.ЗаказПокупателя.Имя = "Заказ";
КонецПроцедуры


// Проводит табличную часть "Оплата поставщикам" по регистрам
//
// Параметры:
//  ТаблицаПоОплатамПоставщикам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ОплатаПоставщикамУпр(РежимПроведения, ТаблицаПоОплатамПоставщикам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ВзаиморасчетыСКонтрагентами;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОплатамПоставщикам, ТаблицаДвижений);
	
	НаборДвижений.мПериод           = Дата;
	НаборДвижений.мТаблицаДвижений  = ТаблицаДвижений;
	
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ОплатаПоставщикам", СтруктураШапкиДокумента, Новый Структура, Отказ, Заголовок, РежимПроведения, "СуммаВзаиморасчетов");
					
	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;
	
	НаборДвижений   = Движения.РасчетыСКонтрагентами;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОплатамПоставщикам, ТаблицаДвижений);
	
	НаборДвижений.мПериод           = Дата;
	НаборДвижений.мТаблицаДвижений  = ТаблицаДвижений;
	НаборДвижений.мТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты, "РасчетыВозврат");
	
	Если Не Отказ Тогда
		Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры // ОплатаПоставщикамУпр()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);

	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента,
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);

	// Формирование движений по отражению затрат.
	УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		СтруктураШапкиДокумента, 
		ТаблицаПоПрочее
	);
					
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента,
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);

	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее, Отказ, Заголовок);
    Если НЕ СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации = Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется Тогда
		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента,
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);
	КонецЕсли;
					
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента, ТаблицаПоОплатамПоставщикам );
					
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ТаблицыДляПроведенияПоНДС = Новый Структура();
		ТаблицыДляПроведенияПоНДС.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		ТаблицыДляПроведенияПоНДС.Вставить("ТаблицаПоПрочее",  ТаблицаПоПрочее);
		
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДляПроведенияПоНДС, Отказ);
		
	КонецЕсли;

	// По партиям, оприходованным по ордеру с правом продажи, возможно следует выполнить 
	// корректировку списания
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
		И ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру
		И ТипЗнч(СкладОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
		И НЕ СкладОрдер.БезПраваПродажи Тогда

		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	КонецЕсли;

	//БП12
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Движения.Хозрасчетный.Прочитать();
		Движения.Налоговый.Прочитать();
		Для Каждого Движение ИЗ Движения.Хозрасчетный Цикл
			Если (Движение.СчетДт.Код = "91.02.1") И (Движение.СчетКт.Родитель.Код = "19") Тогда 
				Проводка 				= Движения.Налоговый.ДобавитьДебет();
				Проводка.Период			= Дата;
				Проводка.СчетДт 		= ПланыСчетов.Налоговый.НайтиПоКоду("91.02.7");
				Проводка.ВидУчетаДт 	= Перечисления.ВидыУчетаПоПБУ18.НУ;
				Принимать_к_НУ			= Движение.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету;
				Проводка.СубконтоДт.ПрочиеДоходыИРасходы = Движение.СубконтоДт.ПрочиеДоходыИРасходы.Ссылка;
				Проводка.Содержание 	= Движение.Содержание;
				Проводка.Сумма			= Движение.Сумма;
				Проводка.Активность 	= Движение.Активность;
				Проводка.НомерЖурнала 	= Движение.НомерЖурнала;
				Проводка.Организация  	= Движение.Организация;
				Если НЕ Принимать_к_НУ Тогда 
					Проводка.ВидУчетаДт 	= Перечисления.ВидыУчетаПоПБУ18.ПР;
					
					Проводка 				= Движения.Налоговый.ДобавитьДебет();
					Проводка.Период			= Дата;
					Проводка.СчетДт 		= ПланыСчетов.Налоговый.НайтиПоКоду("НЕ.03");
					Проводка.ВидУчетаДт 	= Перечисления.ВидыУчетаПоПБУ18.НУ;
					Проводка.Содержание 	= Движение.Содержание;
					Проводка.Сумма			= Движение.Сумма;
					Проводка.Активность 	= Движение.Активность;
					Проводка.НомерЖурнала 	= Движение.НомерЖурнала;
					Проводка.Организация  	= Движение.Организация;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;
			
	Иначе // По ордеру

		// По ордеру нужно сторнировать движения по товарам организаций,
		// если в ордере была указана не та организация.
		// Удалим строки, по которым не нужно делать движений (организации совпадают).
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КолвоЭлементовКоллекции = КопияТаблицыТоваров.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = КопияТаблицыТоваров[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ОрганизацияДокументаПолучения = СтруктураШапкиДокумента.Организация Тогда
				КопияТаблицыТоваров.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

		Если КопияТаблицыТоваров.Количество() > 0 Тогда // Есть что проводить.

			// Вначале сторнируем
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("ОрганизацияДокументаПолучения"), "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
			КонецЕсли;
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьРасход();
			КонецЕсли;

			// Теперь сделаем движения с правильной организацией.
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);

	// По партиям, оприходованным по ордеру с правом продажи, возможно следует выполнить корректировку списания
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру тогда
		
		МассивПриходныхОрдеров = Новый Массив;
		Для каждого Строка Из ТаблицаПоТоварам Цикл
		
			Если  ТипЗнч(Строка.ДокументПолучения) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			   И Строка.БезПраваПродажи =Ложь Тогда
			 МассивПриходныхОрдеров.Добавить(Строка.ДокументПолучения);
			КонецЕсли;
		
		КонецЦикла;
		
		Для каждого Строка Из ТаблицаПоТаре Цикл
		
			Если  ТипЗнч(Строка.ДокументПолучения) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			   И Строка.БезПраваПродажи =Ложь Тогда
			 МассивПриходныхОрдеров.Добавить(Строка.ДокументПолучения);
			КонецЕсли;
		
		КонецЦикла;
		
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПриходныхОрдеров);
		
		// ПО РЕГИСТРУ СписанныеТовары: формируем записи с указанием приходных ордеров, которые будут обрабатываться при списании
		НаборДвижений = Движения.СписанныеТовары;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		Инд = 0;
		Для каждого Элемент Из МассивПриходныхОрдеров Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.ПоступлениеПриходныйОрдер = Элемент;
			Инд = Инд+1;
			НоваяСтрока.НомерСтрокиДокумента = Инд;

		КонецЦикла;
		
		ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
		
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры//ДвиженияПоРегиструСписанныеТовары

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	// ПО РЕГИСТРУ ВзаиморасчетыСПодотчетнымиЛицами.
	ДвиженияПоПодотчетникамУпр(СтруктураШапкиДокумента, ТаблицаПоВыданныеАвансы, РежимПроведения, Отказ, Заголовок);

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТОВАРЫ ПО РЕГИСТРУ Закупки
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
	// ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
	// ТОВАРЫ ПО РЕГИСТРУ ВнутренниеЗаказы
	// ТАРА ПО РЕГИСТРУ ВнутренниеЗаказы
	ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ, Заголовок);

	// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами
	ОплатаПоставщикамУпр(РежимПроведения, ТаблицаПоОплатамПоставщикам, Отказ, Заголовок, СтруктураШапкиДокумента);

	// ТАРА ПО РЕГИСТРУ ТоварыПолученные.
	НаборДвижений = Движения.ТоварыПолученные;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	мТаблицаПоТаре = ТаблицаПоТаре.Скопировать();
	мТаблицаПоТаре.Колонки.ДоговорОрганизация.Имя = "Организация";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(мТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,"СтатусПолучения");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыПолученные.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()	

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента, ТаблицаПоОплатамПоставщикам )

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	//Особенность данного документа при допроведении - перед вызовом процедуры общего модуля
	//	необходимо восстановить значение параметра СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	//	в соответствии со значением реквизита документа
	мИзменилиСтруктуруШапкиДокумента = ложь;
	Если ДополнительныеСвойства.Свойство("ЭтапПроведения") 
		И ОтражатьВУправленческомУчете
		И ДополнительныеСвойства.ЭтапПроведения = "Допроведение"
		 Тогда
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете=истина;
		мИзменилиСтруктуруШапкиДокумента = истина;
	КонецЕсли;	
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, Дата, "ОплатаПоставщикам", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
	//Вернем обратно значение СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	Если мИзменилиСтруктуруШапкиДокумента Тогда
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете=Ложь;
	КонецЕсли;	

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента,
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок)
	Перем КэшВидовСубконтоПоСчетам;
					
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	ВалютаРег = мВалютаРегламентированногоУчета;
    УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, ТаблицаПоТаре, , Ложь, СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН);
	
	// Формирование проводок.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПроводкиБУ = Движения.Хозрасчетный;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПроводкиНУ = Движения.Налоговый;
	КонецЕсли;

	УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, , , СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
	
	ДатаДока   = Дата;

	Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СчетРасчетовСПодотчетником = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами
	Иначе
		СчетРасчетовСПодотчетником = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
	КонецЕсли;


	//Проводки по расчетам с поставщиками
	СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок,СчетРасчетовСПодотчетником);
	Если Не (СтруктураПараметровДДС = Ложь) тогда
		
		БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям);

	Иначе
		Для каждого СтрокаТаблицы Из ТаблицаПоОплатамПоставщикам Цикл
			Содержание  = СтрокаТаблицы.Содержание + " по " + СтрокаТаблицы.ВидДокВходящий + " " + СтрокаТаблицы.НомерВходящегоДокумента + " от " + Формат(СтрокаТаблицы.ДатаВходящегоДокумента, "ДЛФ=Д");
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = Содержание;
			Проводка.Сумма       = СтрокаТаблицы.ПроводкаСумма;

			Проводка.СчетДт                 = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
			Проводка.СубконтоДт.Контрагенты = СтрокаТаблицы.Контрагент;
			Проводка.СубконтоДт.Договоры    = СтрокаТаблицы.ДоговорКонтрагента;
			Если СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаДт           = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт    = СтрокаТаблицы.ПроводкаСумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
			КонецЕсли;

			Проводка.СчетКт                 = СчетРасчетовСПодотчетником;
			Проводка.СубконтоКт.РаботникиОрганизации  = СтруктураШапкиДокумента.ФизЛицо;
			Если СчетРасчетовСПодотчетником.Валютный Тогда
				Проводка.ВалютаКт           = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт    = СтрокаТаблицы.ПроводкаСумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
			КонецЕсли;

		КонецЦикла;
	Конецесли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
		И ЗначениеЗаполнено(УчетнаяПолитикаРегл)
		И УчетнаяПолитикаРегл.ПоддержкаПБУ18 Тогда
		// учет постоянных и временных разниц
		ДвиженияПоРазницамУслуги(СтруктураШапкиДокумента, ТаблицаПоПрочее);
	КонецЕсли;
	
	ПроводкиБУ.Записать(Ложь);
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
    	ПроводкиНУ.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()	

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее, Отказ, Заголовок)
	
	Если (Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН) Тогда
		Возврат;
	КонецЕсли;

	//ПО РЕГИСТРУ РАСХОДОВ УСН
	НаборДвижений = Движения.РасходыПриУСН;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаДвижений, 
							Перечисления.ВидыРасходовУСН.Номенклатура, СтруктураШапкиДокумента.ФизЛицо,
							Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
	
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоПрочее, ТаблицаДвижений, 
							Перечисления.ВидыРасходовУСН.Услуги, СтруктураШапкиДокумента.ФизЛицо,
							Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
	
	СуммаВзаиморасчетов   = СуммаДокумента;
															
	
	
	//Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НДС

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам.
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ) Экспорт
	
	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ТабЧасть = ТаблицаДокумента.Значение;

		Если Не ТабЧасть.Количество() = 0 Тогда 
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТабЧасть, Отказ);
		КонецЕсли;
		
	КонецЦикла;

	// При необходимости, отражаем в регистре партионного учета для НДС
	Если ТаблицыДокумента.Свойство("ТаблицаПоТоварам") 
		И Не ТаблицыДокумента.ТаблицаПоТоварам.Количество() = 0 Тогда
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицыДокумента.ТаблицаПоТоварам.Скопировать(), ,Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()	

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по постоянным и временным разницам по табличной части Услуги
Процедура ДвиженияПоРазницамУслуги(СтруктураШапкиДокумента, ТаблицаПоУслугам)
	
	ПроводкиНУ = Движения.Налоговый;
	
	ДатаДока   = Дата;
	
	// Подготовим структуру таблицы для отражения затрат.
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	
	Для Каждого СтрокаТЧ из ТаблицаПоУслугам Цикл
		
		//СуммаВПроводку = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС;
		СуммаВПроводку = СтрокаТЧ.ПроводкаСумма;
		
		Если Лев(СтрокаТЧ.СчетЗатратНУ.Код, 2) = "97" Тогда
			СтатьяЗатрат1 = СтрокаТЧ.СубконтоНУ1;
			СтатьяЗатрат2 = СтрокаТЧ.СубконтоНУ1;
			СтатьяЗатрат3 = СтрокаТЧ.СубконтоНУ1;
		Иначе
			СтатьяЗатрат1 = СтрокаТЧ.СубконтоНУ1;
			СтатьяЗатрат2 = СтрокаТЧ.СубконтоНУ2;
			СтатьяЗатрат3 = СтрокаТЧ.СубконтоНУ3;
		КонецЕсли;
			
		Если ТипЗнч(СтатьяЗатрат1)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СтатьяЗатрат1.ВидРасходовНУ;
			ВидУчета = ?(СтатьяЗатрат1.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.ВР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат2)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СтатьяЗатрат2.ВидРасходовНУ;
			ВидУчета = ?(СтатьяЗатрат2.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.ВР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат3)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СтатьяЗатрат3.ВидРасходовНУ;
			ВидУчета = ?(СтатьяЗатрат3.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.ВР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат1)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СтатьяЗатрат1.ВидПрочихДоходовИРасходов;
			ВидУчета = ?(СтатьяЗатрат1.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ВР, Перечисления.ВидыУчетаПоПБУ18.ПР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат2)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СтатьяЗатрат2.ВидПрочихДоходовИРасходов;
			ВидУчета = ?(СтатьяЗатрат2.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ВР, Перечисления.ВидыУчетаПоПБУ18.ПР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат3)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СтатьяЗатрат3.ВидПрочихДоходовИРасходов;
			ВидУчета = ?(СтатьяЗатрат3.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ВР, Перечисления.ВидыУчетаПоПБУ18.ПР);
		Иначе
			ВидЗатрат = "";
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР;
		КонецЕсли;
		
			
		Если ВидЗатрат = "" Тогда
			СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТЧ.СчетЗатрат), Ложь, Дата);
			Если СчетНУСоответствующийСчетуБУ = СтрокаТЧ.СчетЗатратНУ	Тогда
				Продолжить;
			КонецЕсли;
			Если СчетНУСоответствующийСчетуБУ.Родитель = СтрокаТЧ.СчетЗатратНУ.Родитель Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СтрокаТЧ.СчетЗатрат, ВидЗатрат), Ложь, Дата);
			Если СчетНУСоответствующийСчетуБУ = СтрокаТЧ.СчетЗатратНУ	Тогда
				Продолжить;
			КонецЕсли;
			Если СчетНУСоответствующийСчетуБУ.Родитель = СтрокаТЧ.СчетЗатратНУ.Родитель Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ)	Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТЧ.СчетЗатрат), Ложь, Дата);
				Если СчетНУСоответствующийСчетуБУ = СтрокаТЧ.СчетЗатратНУ	Тогда
					Продолжить;
				КонецЕсли;
				Если СчетНУСоответствующийСчетуБУ.Родитель = СтрокаТЧ.СчетЗатратНУ.Родитель Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Если соответствующий счет не найден, то разницы не рассчитаны
		Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ)	Тогда
			Сообщить("Не найдено соответствие для счета БУ " +  СтрокаТЧ.СчетЗатрат + ", разницы между БУ и НУ не рассчитаны");
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиНУ.Добавить();
			
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
	    Проводка.Содержание  = СтрокаТЧ.Содержание + " по " + СтрокаТЧ.ВидДокВходящий + " " + СтрокаТЧ.НомерВходящегоДокумента + " от " + Формат(СтрокаТЧ.ДатаВходящегоДокумента, "ДЛФ=Д");
			
		Проводка.СчетДт      = СчетНУСоответствующийСчетуБУ;
			
		ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетНУСоответствующийСчетуБУ, "Налоговый");
			
		Если ПроизводственныеРасходыНУ Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтрокаТЧ.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТЧ.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТЧ.ОбъектСтроительства);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", СтрокаТЧ.СпособСтроительства);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтрокаТЧ.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтрокаТЧ.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтрокаТЧ.Субконто3);
		КонецЕсли;
						
		Проводка.Сумма = СуммаВПроводку;
		Проводка.ВидУчетаДт = ВидУчета;
			
		Проводка = ПроводкиНУ.Добавить();
			
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
	    Проводка.Содержание  = СтрокаТЧ.Содержание + " по " + СтрокаТЧ.ВидДокВходящий + " " + СтрокаТЧ.НомерВходящегоДокумента + " от " + Формат(СтрокаТЧ.ДатаВходящегоДокумента, "ДЛФ=Д");
		
		// Добавим строку в таблицу затрат.
		Если ПроизводственныеРасходыНУ Тогда
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.СуммаБезНДС = 0;
			НоваяСтрока.СуммаРегл = 0;
			НоваяСтрока.СчетЗатратНУ = СчетНУСоответствующийСчетуБУ;
			
			Если ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР Тогда
				НоваяСтрока.ВременнаяРазница = СуммаВПроводку;
			ИначеЕсли ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
				НоваяСтрока.ПостояннаяРазница = СуммаВПроводку;
			КонецЕсли;
		КонецЕсли;
		
		ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаТЧ.СчетЗатратНУ, "Налоговый");
		
		Проводка.СчетДт = СтрокаТЧ.СчетЗатратНУ;
		Если ПроизводственныеРасходыНУ Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтрокаТЧ.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТЧ.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТЧ.ОбъектСтроительства);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", СтрокаТЧ.СпособСтроительства);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтрокаТЧ.СубконтоНУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтрокаТЧ.СубконтоНУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтрокаТЧ.СубконтоНУ3);
			Проводка.Сумма = - СуммаВПроводку;
		КонецЕсли;
		Проводка.Сумма = - СуммаВПроводку;
		Проводка.ВидУчетаДт = ВидУчета;
		
		// Добавим строку в таблицу затрат.
		Если ПроизводственныеРасходыНУ Тогда
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.СуммаБезНДС = 0;
			НоваяСтрока.СуммаРегл = 0;
			
			Если ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР Тогда
				НоваяСтрока.ВременнаяРазница = - СуммаВПроводку;
			ИначеЕсли ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
				НоваяСтрока.ПостояннаяРазница = - СуммаВПроводку;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаЗатрат.Количество() > 0 Тогда
		
		ВремСтруктураШапкиДокумента = Новый Структура;
		ВремСтруктураШапкиДокумента.Вставить("Ссылка", СтруктураШапкиДокумента.Ссылка);
		ВремСтруктураШапкиДокумента.Вставить("Дата", СтруктураШапкиДокумента.Дата);
		ВремСтруктураШапкиДокумента.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		ВремСтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
		ВремСтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
		
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			ВремСтруктураШапкиДокумента, 
			ТаблицаЗатрат
		);
		
	КонецЕсли;
		
	ПроводкиНУ.Записать(Ложь);	
	
КонецПроцедуры

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "ВалютаУправленческогоУчета"      ,     "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "КурсВалютыУправленческогоУчета"  , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика" , "НеВключатьНДСВСтоимостьПартий"   , "НеВключатьНДСВСтоимостьПартий");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"     , "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()	

Процедура ДополнитьСтруктуруПолейТабличнойЧастиПрочееУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СуммаНДС",             "СуммаНДС");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиПрочееУпр()	

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьТоварыПоОснованиюРегл(СтрокаТабличнойЧасти)

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ, ЗаполнятьСчетаУчетаНоменклатуры=Истина) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ, ЗаполнятьСчетаУчетаНоменклатуры);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ, ЗаполнятьСчетаУчетаНоменклатуры=Истина) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ, , ЗаполнятьСчетаУчетаНоменклатуры);

КонецПроцедуры

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ЕстьСкладВТабличнойЧасти = (НЕ ТаблицаТоваров.Колонки.Найти("Склад") = Неопределено);
	ТаблицаТоваров.Колонки.Добавить("СкладПроводок", Новый описаниеТипов("СправочникСсылка.Склады"));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
			Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.Склад;
			ИначеЕсли СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				// если склад в табличной части не заполнен - тогда переписываем его из ордера
				Если СтрокаТаблицы.Склад = Неопределено тогда
					СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.ПриходныйОрдерСклад;
				Иначе
					СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.Склад;
				КонецЕсли;

			КонецЕсли;
		Иначе
			Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладОрдер;
			ИначеЕсли ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				Если СтруктураШапкиДокумента.Свойство("СкладПриходногоОрдера") Тогда
					СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладПриходногоОрдера;
				Иначе
					СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладОрдер.Склад;	
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()	

Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента)
	
	ТаблицаТары.Колонки.Добавить("ПроводкаСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СкладПроводок", Новый описаниеТипов("СправочникСсылка.Склады"));

	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьДокумента,
			                                 Данные.Кратность);
		КонецЕсли;
		Если СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
			Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.Склад;
			ИначеЕсли СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				// если склад в табличной части не заполнен - тогда переписываем его из ордера
				Если СтрокаТаблицы.Склад = Неопределено тогда
					СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.ПриходныйОрдерСклад;
				Иначе
					СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.Склад;
				КонецЕсли;

			КонецЕсли;
		Иначе
			Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладОрдер;
			ИначеЕсли ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				Если СтруктураШапкиДокумента.Свойство("СкладПриходногоОрдера") Тогда
					СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладПриходногоОрдера;
				Иначе
					СтрокаТаблицы.СкладПроводок = СтруктураШапкиДокумента.СкладОрдер.Склад;	
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

Процедура ПодготовитьТаблицуПоОплатеРегл(ТаблицаПоОплате, СтруктураШапкиДокумента)
	
	ТаблицаПоОплате.Колонки.Добавить("ПроводкаСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	ВалютаРег      = мВалютаРегламентированногоУчета;
	Данные         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
	
	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаПоОплате Цикл

		Если СтрокаТаблицы.ВалютаДоговора = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = СтрокаТаблицы.СуммаВзаиморасчетов;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьДокумента,
			                                 Данные.Кратность);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуПоОплатеРегл()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиОплатаПоставщикамРегл(СтруктураОбязательныхПолей)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиОплатаПоставщикамРегл()	

Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураШапкиДокумента)

	СтруктураПолей.Вставить("ОтражениеВУСН"      , "ОтражениеВУСН");
	СтруктураПолей.Вставить("СчетУчетаБУ"        , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"        , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетУчетаНДС"       , "СчетУчетаНДС");
	СтруктураПолей.Вставить("ПредъявленСФ"       , "ПредъявленСФ");

	//Для определения счетов учета при проведении документов
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("СкладВидСклада"            , "ПриходныйОрдер.Склад.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("СкладВидСклада"            , "Склад.ВидСклада");
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураШапкиДокумента)

	СтруктураПолей.Вставить("СчетУчетаБУ"  , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"  , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетУчетаТары", "СчетУчетаТары");

	//Для определения счетов учета при проведении документов
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("СкладВидСклада"            , "ПриходныйОрдер.Склад.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("СкладВидСклада"            , "Склад.ВидСклада");
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл()	

Процедура ДополнитьСтруктуруПолейТабличнойЧастиОплатаПоставщикамРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", "СчетУчетаРасчетовСКонтрагентом");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиОплатаПоставщикамРегл()	

Процедура ДополнитьСтруктуруПолейТабличнойЧастиПрочееРегл(СтруктураПолей, СтруктураШапкиДокумента)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа",     "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("ПодразделениеОрганизации", "ПодразделениеОрганизации");
	СтруктураПолей.Вставить("СчетЗатрат",   "СчетЗатрат");
	СтруктураПолей.Вставить("СчетЗатратНУ", "СчетЗатратНУ");
	СтруктураПолей.Вставить("Субконто1",    "Субконто1");
	СтруктураПолей.Вставить("Субконто2",    "Субконто2");
	СтруктураПолей.Вставить("Субконто3",    "Субконто3");
	СтруктураПолей.Вставить("СубконтоНУ1",  "СубконтоНУ1");
	СтруктураПолей.Вставить("СубконтоНУ2",  "СубконтоНУ2");
	СтруктураПолей.Вставить("СубконтоНУ3",  "СубконтоНУ3");
	СтруктураПолей.Вставить("ОтражениеВУСН","ОтражениеВУСН");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
 	СтруктураПолей.Вставить("ПредъявленСФ"       , "ПредъявленСФ");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиПрочееРегл()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "ВидСклада",       "ВидСклада");
	Иначе
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "Склад.ВидСклада", "ВидСклада");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "Склад",           "СкладПриходногоОрдера");
	КонецЕсли;
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                  , "ВедениеУчетаПоПроектам");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	// Дополним полями, нужными для упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПрочее, ТаблицаПоТаре) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Вставить("Услуга"               , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"             , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"     , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ЗаказПокупателя"      , "Заказ");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"  , "Заказ.ВидОперации");
	СтруктураПолей.Вставить("Склад"                , "Склад");
	СтруктураПолей.Вставить("ВидСклада"            , "Склад.ВидСклада");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя", "Заказ.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("Поставщик"            ,          "Поставщик"); 
	СтруктураПолей.Вставить("СчетФактура"          ,          "СчетФактура"); 
	//СтруктураПолей.Вставить("СчетУчетаНДС"         ,          "СчетУчетаНДС"); 
	СтруктураПолей.Вставить("ДокументПолучения"    ,          "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения" , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("ПриходныйОрдерСклад"  ,          "ПриходныйОрдер.Склад");
	СтруктураПолей.Вставить("БезПраваПродажи"      ,          "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("ВидДокВходящий"      ,          "ВидДокВходящий");
	СтруктураПолей.Вставить("НомерВходящегоДокумента"      ,"НомерВходящегоДокумента");
	СтруктураПолей.Вставить("ДатаВходящегоДокумента"      ,"ДатаВходящегоДокумента");
	//БП12 Добавим признак применения 270 НК
	СтруктураПолей.Вставить("СУчетом270НК"      ,"СУчетом270НК");
	
	// Дополним полями, нужными для регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);

	// Получим необходимые данные для проведения и проверки заполнения 
	// данные по табличной части "Прочее".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидДокВходящий"          , "ВидДокВходящий");
	СтруктураПолей.Вставить("НомерВходящегоДокумента" , "НомерВходящегоДокумента");
	СтруктураПолей.Вставить("ДатаВходящегоДокумента"  , "ДатаВходящегоДокумента");
	
	СтруктураПолей.Вставить("Содержание",          "Содержание");
	СтруктураПолей.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолей.Вставить("Услуга",              "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор" ,              "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект",            "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Заказ",               "Заказ");
	СтруктураПолей.Вставить("СтатьяЗатрат",        "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат",      "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ОбъектСтроительства", "ОбъектСтроительства");
	СтруктураПолей.Вставить("СпособСтроительства", "СпособСтроительства");
	СтруктураПолей.Вставить("Количество",          "Количество");
	СтруктураПолей.Вставить("Сумма",               "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС",           "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаНДС",            "СуммаНДС");
	СтруктураПолей.Вставить("НДС", 				   "СуммаНДС");
	СтруктураПолей.Вставить("Поставщик",           "Поставщик"); 
	СтруктураПолей.Вставить("СчетФактура",         "СчетФактура"); 
	СтруктураПолей.Вставить("Подразделение",       "Подразделение");
	//СтруктураПолей.Вставить("СчетУчетаНДС",        "СчетУчетаНДС"); 
	СтруктураПолей.Вставить("СпособРаспределенияЗатратНаВыпуск", "СпособРаспределенияЗатратНаВыпуск");
	СтруктураПолей.Вставить("ПроектЗатрат", "Проект");
	//БП12 Добавим признак применения 270 НК
	СтруктураПолей.Вставить("СУчетом270НК"      ,"СУчетом270НК");

	// Дополним полями, нужными для упр. и регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиПрочееУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиПрочееРегл(СтруктураПолей, СтруктураШапкиДокумента);

	РезультатЗапросаПоПрочее = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Прочее", СтруктураПолей,СтруктураСложныхПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТара();
	СтруктураПолей.Вставить("ЗаказПокупателя"      , "Заказ");
	СтруктураПолей.Вставить("ВалютаДоговора"       , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорКонтрагента"   , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДоговорОрганизация"   , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"     , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Склад"                , "Склад");
	СтруктураПолей.Вставить("ВидСклада"            , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"  , "Заказ.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя", "Заказ.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("Контрагент"           ,          "Контрагент");
	СтруктураПолей.Вставить("Поставщик"            ,          "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"   ,          "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения" , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("Сделка"                        , "Сделка");
	СтруктураПолей.Вставить("СделкаОрганизация"             , "Сделка.Организация");
	СтруктураПолей.Вставить("ДокументПолучения"             , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ПриходныйОрдерСклад"           , "ПриходныйОрдер.Склад");
	СтруктураПолей.Вставить("БезПраваПродажи"               , "ПриходныйОрдер.БезПраваПродажи");

	// Дополним полями, нужными для регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураШапкиДокумента);

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоПрочее  = ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента);
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	//Заполним и проверим счета учета
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 	СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Прочее", 			ТаблицаПоПрочее, 	СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоПрочее,  СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТаре,    СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
		
КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПОДЧИНЕННЫМИ ДОКУМЕНТАМИ

// Процедура проведения подчиненных документов счет-фактура.
// Выбирает все счета-фактуры в которых в качестве документа
// основания указан текущий документ и перепроводит их.
//
Процедура ОбработкаПодчиненныхДокументовСчетФактура(Провести = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПроведения", Не Провести);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СчетФактураПолученный.Ссылка
	               |ИЗ
	               |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	               |ГДЕ
	               |	СчетФактураПолученный.Ссылка.Проведен = &ПризнакПроведения
	               |	И (НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления)
	               |	И СчетФактураПолученный.Ссылка.ДокументОснование = &ДокументОснование";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		ТекущийДокумент.Заблокировать();
		ТекущийДокумент.Проведен = Провести;
		ТекущийДокумент.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ОбработкаЗаполненияУпр(Основание);

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Прочее);

	// Заполнить склад и ордер в табличных частях
	СкладИзШапки    =  (Не мУказаниеСкладовВТЧ) И (ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, Товары,         СкладИзШапки);
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, ВозвратнаяТара, СкладИзШапки);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ОплатаПоставщикам.Итог("Сумма") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Прочее");
	
	Если Не мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.ЗаполнитьПроектВСтрокахТабЧасти(ЭтотОбъект, Прочее);
	КонецЕсли;
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");

	// Заполним субконто затрат
	СчетаУчетаВДокументах.ЗаполнитьСубконтоТабличнойЧасти("Прочее", ЭтотОбъект, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	//начало изменений БП 04 
	ПустНомГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	Для Каждого ТекСтрока Из Прочее Цикл
		ТекСтрока.НоменклатурнаяГруппа = ПустНомГруппа;
	КонецЦикла;	
	//конец изменений БП 04 
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПрочее, ТаблицаПоТаре;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, Ложь);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Авансы".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументАванса",            "ДокументАванса");
	СтруктураПолей.Вставить("ДокументАвансаОрганизация", "ДокументАванса.Организация");
	СтруктураПолей.Вставить("Сумма",                     "Сумма");

	РезультатЗапросаПоВыданнымАвансам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Оплата поставщикам".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Контрагент"                            , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"                    , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"                 , "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ВалютаДоговора"                        , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"                    , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("Организация"                    		, "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("Сделка"                                , "Сделка");
	СтруктураПолей.Вставить("СделкаОрганизация"                     , "Сделка.Организация");
	СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом"         , "ДокументРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("Проект"                                , "Проект");
	СтруктураПолей.Вставить("Сумма"                                 , "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"                   , "СуммаВзаиморасчетов");
	
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("ВестиПоДокументамРасчетовСКонтрагентом", 
	"ВЫБОР 
	|	КОГДА Док.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) 
	|	ТОГДА ЛОЖЬ 
	|	ИНАЧЕ Док.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом 
	|КОНЕЦ");
	// Дополним полями, нужными для регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиОплатаПоставщикамРегл(СтруктураПолей);
	
	РезультатЗапросаПоОплатеПоставщикам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаПоставщикам", СтруктураПолей, СтруктураСложныхПолей);

	// Подготовим таблицы для проведения.
	ТаблицаПоАвансам = РезультатЗапросаПоВыданнымАвансам.Выгрузить();
	ТаблицаПоОплате  = ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплатеПоставщикам, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПрочее, ТаблицаПоТаре);

	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда

		Для каждого СтрокаОплаты из ОплатаПоставщикам Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
							СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
							мВалютаРегламентированногоУчета, Истина,Отказ, Заголовок,"Оплата поставщикам, строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;

	КонецЕсли;

	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(ТаблицаПоАвансам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьОрганизациюВДокументахОснованияСчетФактуры(Отказ, Заголовок);

	//Проверим счета учета
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Прочее", 			ТаблицаПоПрочее, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ОбработкаПодчиненныхДокументовСчетФактура();
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоПрочее,
							Отказ, Заголовок);
	КонецЕсли;

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоТаре", ТаблицаПоТоварам,ТаблицаПоТаре));
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбработкаПодчиненныхДокументовСчетФактура(Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
		
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мУказаниеПроектовВТабличнойЧастиДокументов = УправлениеПроектами.УказаниеПроектовВТабличнойЧастиДокументов();
УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления)
                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);


