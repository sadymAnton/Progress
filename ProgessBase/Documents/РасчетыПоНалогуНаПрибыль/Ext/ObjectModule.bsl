Перем мУдалятьДвижения;

Перем мНачДата;
Перем мКонДата;
Перем мНачГода;
Перем мНачГраница;
Перем мКонГраница;

Перем мПроводкиБУ;
Перем мСтавкаНалогаНаПрибыль;

Перем КоэффициентЕНВД;
Перем ПоддержкаПБУ18;

Процедура СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога, КоррСчет, Субконто = Неопределено, ПоДебету, СодержаниеПроводки, СуммаЕНВД = 0, Субконто68_4 = Неопределено)
	
	Счет99 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОблагаемыеЕНВД;
	
	// Переход к учету без суммовых разниц в БУ (в соответствие с приказами Минфина РФ №№ 154н, 155н, 156н от 27.11.2006)
	// остатки по ОНО и ОНА вносятся в корреспонденции со счетом 84
	Если Субконто = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВУЕ И НачалоДня(Дата) ='20061231' Тогда
		Счет68_04Дебет  = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
		Счет68_04Кредит = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
	ИначеЕсли ВидОперацииРасчетаРазниц = 1 Тогда // Остатки по ОНО и ОНА в корреспонденции со счетом 000
		Счет68_04Дебет  = ПланыСчетов.Хозрасчетный.Вспомогательный;
		Счет68_04Кредит = ПланыСчетов.Хозрасчетный.Вспомогательный;
	Иначе
		Если Субконто68_4 <> Неопределено Тогда
			Счет68_04 = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
		Иначе
			Счет68_04 = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
		КонецЕсли;
		Счет68_04Дебет  = Счет68_04;
		Счет68_04Кредит = Счет68_04;
	КонецЕсли;
	
	Если Не СуммаЕНВД = 0 Тогда
		Если ОдногоЗнака(СуммаНалога, СуммаЕНВД) Тогда
			Если БольшеПоМодулюИлиРавно(СуммаНалога, СуммаЕНВД) Тогда
				СуммаНалога = СуммаНалога - СуммаЕНВД;
				Сумма99 = СуммаЕНВД;
				СуммаЕНВД = 0;
			Иначе
				Сумма99 = СуммаНалога;
				СуммаНалога = 0;
				СуммаЕНВД = СуммаЕНВД - Сумма99;
			КонецЕсли;
		Иначе
			Если БольшеПоМодулюИлиРавно(СуммаНалога, СуммаЕНВД) Тогда
				СуммаНалога = СуммаНалога + СуммаЕНВД;
				Сумма99 = - СуммаЕНВД;
				СуммаЕНВД = 0;
			Иначе
				Сумма99 = - СуммаНалога;
				СуммаНалога = 0;
				СуммаЕНВД = СуммаЕНВД + Сумма99;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Сумма99 = 0;
	КонецЕсли;
		
	
	Если СуммаНалога <> 0 Тогда
		
		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = СуммаНалога;
		Проводка.Содержание   = СодержаниеПроводки;
		Проводка.НомерЖурнала = "";
		
		Если ПоДебету = "Д" Тогда
			Проводка.СчетДт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			Проводка.СчетКт = Счет68_04Кредит;
			Если Субконто68_4 <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Субконто68_4);
			КонецЕсли;
		Иначе
			Проводка.СчетДт = Счет68_04Дебет;
			Проводка.СчетКт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто);
		КонецЕсли
	КонецЕсли;
	
	Если Сумма99 <> 0 Тогда
		
		Проводка = мПроводкиБУ.Добавить();
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Сумма        = Сумма99;
		Проводка.Содержание   = СодержаниеПроводки;
		Проводка.НомерЖурнала = "";
		
		Если ПоДебету = "Д" Тогда
			Проводка.СчетДт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			Проводка.СчетКт = Счет99;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
		Иначе
			Проводка.СчетДт = Счет99;
			Проводка.СчетКт = КоррСчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // СформироватьПроводкиПоНалогуНаПрибыль()

Функция ОдногоЗнака(Число1, Число2) 
	Возврат (Число1 * Число2 >= 0);
КонецФункции

Функция  БольшеПоМодулюИлиРавно(Число1, Число2)
	МодульЧисло1 = ?(Число1 > 0, Число1, - Число1);
	МодульЧисло2 = ?(Число2 > 0, Число2, - Число2);
	
	Возврат (МодульЧисло1 - МодульЧисло2 >= 0);
КонецФункции

// Рассчитываются постоянные налоговые обязательства (активы) и отражаются на
// счетах бухгалтерского учета.
//
Процедура 	РасчетПостоянныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Отложенный налоговый актив (обязательство) рассчитывается следующим образом:
	// Определяется сумма постоянных разниц, отраженных на счете Н99.01, и
	// умножается на ставку налога на прибыль.
	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",  мКонГраница);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Налоговый.Продажи);
	Массив.Добавить(ПланыСчетов.Налоговый.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Счет",         Массив);
	Запрос.УстановитьПараметр("КорСчет",      ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.ПР);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	               |	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация И ВидУчета = &ВидУчета, КорСчет <> &КорСчет, ) КАК НалоговыйОбороты";
				   
				   ТаблицаРезультат = Запрос.Выполнить().Выгрузить();

	СуммаОборотДт = Окр(ТаблицаРезультат.Итог("СуммаОборотДт") * мСтавкаНалогаНаПрибыль, 2);
	СуммаОборотКт = Окр(ТаблицаРезультат.Итог("СуммаОборотКт") * мСтавкаНалогаНаПрибыль, 2);
	
	Счет99_02_3  = ПланыСчетов.Хозрасчетный.ПостоянноеНалоговоеОбязательство;

	Если СуммаОборотДт > 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаОборотДт, Счет99_02_3,, "Д", "Постоянное налоговое обязательство");
	КонецЕсли;
	
	Если СуммаОборотКт < 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(-СуммаОборотКт, Счет99_02_3,, "Д", "Постоянное налоговое обязательство");
	КонецЕсли;
	
	Если СуммаОборотКт > 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаОборотКт, Счет99_02_3,, "К", "Постоянный налоговый актив");
	КонецЕсли;
	
	Если СуммаОборотДт < 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(-СуммаОборотДт, Счет99_02_3,, "К", "Постоянный налоговый актив");
	КонецЕсли;
	
КонецПроцедуры  // РасчетПостоянныхРазниц

// Создается таблица значений в которой будет хранится соответствие видов
// активов (обязательств) счетам, на которых учитываются разницы по этим
// видам активов (обязательств).
//
Функция ИнициализацияТаблицыВидовАктивовИОбязательств()

	ТаблицаВидовАктивовИОбязательств = Новый ТаблицаЗначений;
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("ВидАктивовОбязательств");
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Счета",      Новый ОписаниеТипов("Массив"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Субконто",   Новый ОписаниеТипов("Массив"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("ОстатокОНА", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("ОстатокОНО", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	Возврат ТаблицаВидовАктивовИОбязательств;

КонецФункции

// Формирование таблицы остатков отложенных налоговых активов
// и обязательств, отраженных на счетах 77 и 09 на конец месяца.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица остаток постоянных налоговх активов и обязательств.
// 
Функция ПолучитьОстаткиОНАиОНО()

	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца",  мКонГраница);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("Субконто",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств);
	Запрос.УстановитьПараметр("Пассивный",    ВидСчета.Пассивный);
	
	Запрос.Текст = "

	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК ВидАктиваОбязательства,
	|	(ВЫБОР Когда ХозрасчетныйОстатки.Счет.Вид = &Пассивный Тогда 1 Иначе (-1) Конец) * СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В (&МассивСчетов), &Субконто , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1";

	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();

КонецФункции // ПолучитьОстаткиОНАиОНО()

// Берутся отложенные налоговые активы и обязательства отраженные
// на счетах 09 и 77 на конец месяца по видам активов, указанным
// в таблице соответствия, и записываются в таблицу соответствия.
//
Процедура ЗаписьВТаблицуОстатковОНАиОНО(ТаблицаВидовАктивовИОбязательств)

	Счет09 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	Счет77 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства;

	СтруктураДляПоиска = Новый Структура;

	// Формирование таблицы остатков отложенных налоговых активов
	// и обязательств, отраженных на счетах 77 и 09 на конец месяца.
	ОстаткиОНАиОНО = ПолучитьОстаткиОНАиОНО();

	// Запись в таблицу соответствия видов активов (обязательств) и налоговых
	// счетов записываются остатки по видам активов (обязательств) отраженные
	// на конец месяца
	Для каждого СтрокаВидАктивовОбязательств Из ТаблицаВидовАктивовИОбязательств Цикл

		// Отражение в таблице отложенного налогового актива
		СтруктураДляПоиска.Вставить("ВидАктиваОбязательства", СтрокаВидАктивовОбязательств.ВидАктивовОбязательств);
		СтруктураДляПоиска.Вставить("Счет", Счет09);
		МассивНайденныхСтрок = ОстаткиОНАиОНО.НайтиСтроки(СтруктураДляПоиска);
		Если МассивНайденныхСтрок.Количество() <> 0 Тогда
			СтрокаВидАктивовОбязательств.ОстатокОНА = МассивНайденныхСтрок[0].СуммаОстаток;
		КонецЕсли;

		// Отражение в таблице отложенного налогового обязательства
		СтруктураДляПоиска.Вставить("Счет", Счет77);
		МассивНайденныхСтрок = ОстаткиОНАиОНО.НайтиСтроки(СтруктураДляПоиска);
		Если МассивНайденныхСтрок.Количество() <> 0 Тогда
			СтрокаВидАктивовОбязательств.ОстатокОНО = -МассивНайденныхСтрок[0].СуммаОстаток;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТаблицуВидовАктивовИОбязательствДляУе()

	ТаблицаВидовАктивовИОбязательств = ИнициализацияТаблицыВидовАктивовИОбязательств();

		// Курсовые разницы при оплате в рублях
		НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
		НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВУЕ;
		НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ЗадолженностьПоПриобретениюВУЕ);
		НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ЗадолженностьПоРеализацииВУЕ);
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	ЗаписьВТаблицуОстатковОНАиОНО(ТаблицаВидовАктивовИОбязательств);

	Возврат ТаблицаВидовАктивовИОбязательств;

КонецФункции // ПолучитьТаблицуВидовАктивовИОбязательств()

// Упорядочиваются данный для передачи их в процедуру,
// которая формирует записи по счету 68.4.
//
Процедура ОтражениеОНАиОНО(ВидАктивовОбязательств,  ВременныеРазницы)

	Счет09 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	Счет77 = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства;
	СуммаДт09 = ВременныеРазницы.СуммаДт09;
	СуммаКт09 = ВременныеРазницы.СуммаКт09;
	СуммаДт77 = ВременныеРазницы.СуммаДт77;
	СуммаКт77 = ВременныеРазницы.СуммаКт77;
    СуммаЕНВД = ВременныеРазницы.СуммаЕНВД;
	
	// Образование отложенного налогового обязательства
	Если СуммаДт09 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаДт09, Счет09, ВидАктивовОбязательств, "Д", "Признание отложенного налогового актива", СуммаЕНВД);
	КонецЕсли;

	// Погашение отложенного налогового обязательства
	Если СуммаКт09 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль( СуммаКт09, Счет09, ВидАктивовОбязательств, "К", "Погашение отложенного налогового актива", СуммаЕНВД);
	КонецЕсли;

	// Образование отложенного налогового обязательства
	Если СуммаКт77 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаКт77, Счет77, ВидАктивовОбязательств, "К", "Признание отложенного налогового обязательства", СуммаЕНВД);
	КонецЕсли;

	// Погашение отложенного налогового обязательства
	Если СуммаДт77 <> 0 Тогда
		СформироватьПроводкиПоНалогуНаПрибыль( СуммаДт77, Счет77, ВидАктивовОбязательств, "Д", "Погашение отложенного налогового обязательства", СуммаЕНВД);
	КонецЕсли;

КонецПроцедуры

// Рассчитывается отложенные налоговый актив по убыткам текущего
// периода и отражается на счете 09.
//
Процедура РассчитатьОНАПоУбыткамТекущегоПериода(СтрокаВидАктиваОбязательства)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца", мКонГраница);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетН99_01",  ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль);
	Запрос.УстановитьПараметр("Счет09",      ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	Запрос.УстановитьПараметр("Субконто1",   Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода);
	Запрос.УстановитьПараметр("ВидУчета",    Перечисления.ВидыУчетаПоПБУ18.НУ);

	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОстатки.СуммаОстатокДт КАК СуммаОстаток,
	               |	0 КАК СуммаОстаток09
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |		&КонецМесяца,
	               |		Счет В ИЕРАРХИИ (&СчетН99_01),
	               |		,
	               |		Организация = &Организация
	               |		    И ВидУчета = &ВидУчета) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	ХозрасчетныйОстатки.СуммаОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В ИЕРАРХИИ (&Счет09), , Организация = &Организация) КАК ХозрасчетныйОстатки
	               |ГДЕ
	               |	ХозрасчетныйОстатки.Субконто1 = &Субконто1";
	Результат = Запрос.Выполнить();

	ТаблицаРезультат     = Результат.Выгрузить();
	Сумма   = ТаблицаРезультат.Итог("СуммаОстаток") * мСтавкаНалогаНаПрибыль - ТаблицаРезультат.Итог("СуммаОстаток09");
    СуммаДт77 = 0;
	СуммаКт77 = 0;
	СуммаДт09 = 0;
	СуммаКт09 = 0;
	
	Если Сумма > 0 Тогда
		СуммаДт09 = Сумма;
	Иначе
		СуммаКт09 = - Сумма;
	КонецЕсли;
	
	Если Сумма <> 0 Тогда
		ОтражениеОНАиОНО(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, Новый Структура("СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД", СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, 0));
	КонецЕсли;

КонецПроцедуры // ВременныеРазницыПоУбыткамТекущегоПериода()

// Рассчитываются отложенные налоговые обязательства и
// отложенные налоговые активы по конкретному виду активов
// (обязательств).
//
// Параметры:
//		СтрокаВидАктиваОбязательства - строка таблицы в каторой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Процедура РассчитатьОНА_ОН0(СтрокаВидАктиваОбязательства)

	// Порядок расчета:
	// 1. Определяется остаток налогооблагаемых и вычитаемых разниц по виду активов в целом.
	// 2. Исходя из остатка разниц рассчитывается остаток отложенных налоговых активов
	//    и обязательств, который должен быть отражен на счетах 09 и 77 на конец месяца.
	// 3. Определяется сумма отложенных налоговых активов и обязательств, которая отражена
	//    на счетах 09 и 77 на конец месяца.
	// 4. Счета 09 и 77 корректируются на сумму разниц того что отражено на счете и того,
	//    что должно быть по результатам расчета.
	
	// Получить временные разницы, отраженные на плане счетов
	// по данному виду ОНА (ОНО), распределив их на вычитаемые и налогооблагемые разницы.
	ОборотыВременныхРазниц = НалоговыйУчет.ОборотыВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства, Новый Структура("НачГраница,КонГраница,Организация, КоэффициентЕНВД",мНачГраница,мКонГраница,Организация, КоэффициентЕНВД));

	Если  ОборотыВременныхРазниц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
    
	СуммаДт09 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт09") * мСтавкаНалогаНаПрибыль, 2);
	СуммаКт09 = Окр(ОборотыВременныхРазниц.ИТог("СуммаКт09") * мСтавкаНалогаНаПрибыль, 2);
	СуммаДт77 = Окр(ОборотыВременныхРазниц.Итог("СуммаДт77") * мСтавкаНалогаНаПрибыль, 2);
	СуммаКт77 = Окр(ОборотыВременныхРазниц.ИТог("СуммаКт77") * мСтавкаНалогаНаПрибыль, 2);
	СуммаЕНВД = Окр(ОборотыВременныхРазниц.ИТог("СуммаЕНВД") * мСтавкаНалогаНаПрибыль, 2);
	
	ОтражениеОНАиОНО(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств, Новый Структура("СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД", СуммаДт09, СуммаКт09, СуммаДт77, СуммаКт77, СуммаЕНВД));

КонецПроцедуры


// Рассчитываются отложенные налоговые обязательства и
// отложенные налоговые активы.
// 

Процедура 	РасчетВременныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Формируется таблица в которой задано соответствие видов 
	// активов (обязательств) счетам налогового учета.
	ТаблицаВидовАктивовИОбязательств = ?(ВидОперацииРасчетаРазниц = 3, ПолучитьТаблицуВидовАктивовИОбязательствДляУе(), НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств());
	КоэффициентЕНВД = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата);
	
	// Рассчитываем отложенные налоговые обязательства и активы и отражаем их.
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл

		Если СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода Тогда
			РассчитатьОНАПоУбыткамТекущегоПериода(СтрокаВидАктиваОбязательства);
		Иначе
			РассчитатьОНА_ОН0(СтрокаВидАктиваОбязательства);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры  // РасчетВременныхРазниц

Процедура 	РасчетНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Условный расход (условный доход) по налогу на прибыль
	// рассчитывается следующим образом: определяется сумма
	// бухгалтерской прибыли (убытка) и умножается на ставку
	// налога на прибыль.

	// Виды прибылей и убытков, которые учитываются при расчете
	// условного расхода (условного дохода) по налогу на прибыль.
	мПроводкиБУ.Записать(Ложь);

	ПрибылиИУбытки = Новый Массив;
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонДата);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Счет",           ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеОблагаемыеЕНВД);
	Запрос.УстановитьПараметр("Счет68",         ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	Запрос.УстановитьПараметр("ПрибылиИУбытки", ПрибылиИУбытки);
	Запрос.Текст = "ВЫБРАТЬ
                   |    ФинРезультаты.СуммаОборотДт,
                   |    ФинРезультаты.СуммаОборотКт,
                   |    0 КАК Сумма68
                   |ИЗ
                   |    РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет = &Счет, , Организация В ИЕРАРХИИ (&Организация), , ) КАК ФинРезультаты
                   |ГДЕ
                   |    ФинРезультаты.Субконто1 В(&ПрибылиИУбытки)
                   |
                   |ДЛЯ ИЗМЕНЕНИЯ
                   |    РегистрБухгалтерии.Хозрасчетный.Обороты
                   |
                   |ОБЪЕДИНИТЬ ВСЕ
                   |
                   |ВЫБРАТЬ
                   |    0,
                   |    0,
                   |    Оборотыпо68.СуммаОборот
                   |ИЗ
                   |    РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет = &Счет68, , Организация В ИЕРАРХИИ (&Организация), , ) КАК Оборотыпо68
                   |
                   |ДЛЯ ИЗМЕНЕНИЯ
                   |    РегистрБухгалтерии.Хозрасчетный.Обороты";
	
		
	Результат = Запрос.Выполнить();

	ТаблицаРезультат = Результат.Выгрузить();
	
	СуммаДоходаРасхода   = ТаблицаРезультат.Итог("СуммаОборотКт") - ТаблицаРезультат.Итог("СуммаОборотДт");
	Сумма68   = ТаблицаРезультат.Итог("Сумма68");
	СуммаУсловногоНалога = Окр(СуммаДоходаРасхода * мСтавкаНалогаНаПрибыль, 2);
	
	Если Не СуммаУсловногоНалога = Сумма68 И СуммаУсловногоНалога - Сумма68 < 0.05 И СуммаУсловногоНалога - Сумма68 > -0.05 Тогда
		 СуммаУсловногоНалога = Сумма68;
	 КонецЕсли;

	Если СуммаУсловногоНалога > 0 Тогда
		Сч99_02_1 = ПланыСчетов.Хозрасчетный.УсловныйРасходПоНалогуНаПрибыль;
		СформироватьПроводкиПоНалогуНаПрибыль(СуммаУсловногоНалога, Сч99_02_1,, "Д", "Условный расход по налогу на прибыль");

	Иначе
		Сч99_02_2 = ПланыСчетов.Хозрасчетный.УсловныйДоходПоНалогуНаПрибыль;
		СформироватьПроводкиПоНалогуНаПрибыль(-СуммаУсловногоНалога, Сч99_02_2,, "К", "Условный доход по налогу на прибыль");
	КонецЕсли;
	
	мПроводкиБУ.Записать(Ложь);
	СформироватьПроводкиПоНалогуНаПрибыльРасчетыСБюджетом(СтруктураШапкиДокумента);
	
КонецПроцедуры //РасчетНалогаНаПрибыль

Процедура ПересчетОНАиОНОПоУЕ(СтруктураШапкиДокумента)
    
    ДатаНачалаУчетПРВКурсовыхРазницахПоРасчетамВУЕ = глЗначениеПеременной("ДатаНачалаУчетаПостоянныхРазницВКурсовыхРазницахПоРасчетамВУЕ");
    
    Если НЕ (НачалоМесяца(ДатаНачалаУчетПРВКурсовыхРазницахПоРасчетамВУЕ) = НачалоМесяца(Дата)) Тогда
        Возврат;
    КонецЕсли;
    
    Ставка = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента) * 100;
    
    ТаблицаВидовАктивовИОбязательств = Новый ТаблицаЗначений;
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("ВидАктивовОбязательств", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Счета",      Новый ОписаниеТипов("Массив"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Субконто",   Новый ОписаниеТипов("Массив"));
    
    НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
    НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВУЕ;
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ЗадолженностьПоПриобретениюВУЕ);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Налоговый.ЗадолженностьПоРеализацииВУЕ);
    НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
    НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
    
    ТаблицаОНАОНО =  Новый ТаблицаЗначений;
    ТаблицаОНАОНО.Колонки.Добавить("Счет");
    ТаблицаОНАОНО.Колонки.Добавить("Вид");
    ТаблицаОНАОНО.Колонки.Добавить("Разница");
    ТаблицаОНАОНО.Колонки.Добавить("НоваяСумма");
    ТаблицаОНАОНО.Колонки.Добавить("СтараяСумма");
    
    Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
        
        ТаблицаВидаАктивовИОбязательств = НалоговыйУчет.ОстаткиВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства,СтруктураШапкиДокумента.Организация, НачалоГода(СтруктураШапкиДокумента.ДАта), мКонГраница);
        Если ТаблицаВидаАктивовИОбязательств.Количество() = 0 Тогда
            Продолжить;
        КонецЕсли;
        
       Для каждого Строка Из ТаблицаВидаАктивовИОбязательств Цикл
            Проводка = Движения.Налоговый.Добавить();
            
            Проводка.Период       = СтруктураШапкиДокумента.Дата;
            Проводка.Организация  = СтруктураШапкиДокумента.Организация;
            Проводка.НомерЖурнала = "";
            Проводка.Содержание   = "Переход на ПР в суммовых разницах";
            Проводка.Сумма        = Строка.Сумма;
            
            
            Если  Строка.Счет = ПланыСчетов.Налоговый.ЗадолженностьПоПриобретениюВУЕ Тогда
                Проводка.СчетДт       = Строка.Счет;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.Субконто1);
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.Субконто2);
                Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
            Иначе
                Проводка.СчетКт       = Строка.Счет;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Строка.Субконто1);
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Строка.Субконто2);
                Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;
            КонецЕсли;
             
            
        КОнецЦикла;
        
        ТаблицаВидаАктивовИОбязательств.Свернуть("СчетОНАОНО,СтараяСумма","Сумма");
        
        Для каждого Строка Из ТаблицаВидаАктивовИОбязательств Цикл
            СтрокаТаблицаОНАОНО = ТаблицаОНАОНО.Добавить();
            СтрокаТаблицаОНАОНО.Счет = Строка.СчетОНАОНО;
            СтрокаТаблицаОНАОНО.Вид = СтрокаВидАктиваОбязательства.ВидАктивовОбязательств;
            СтрокаТаблицаОНАОНО.НоваяСумма = 0;
            СтрокаТаблицаОНАОНО.СтараяСумма = Строка.СтараяСумма;
            СтрокаТаблицаОНАОНО.Разница = 0;
            
            
        КОнецЦикла;
    КонецЦикла;
    
    ТаблицаОНАОНО.Свернуть("Счет,Вид,СтараяСумма","НоваяСумма,Разница");
    
    
    Для каждого СтрокаТаблицы Из ТаблицаОНАОНО Цикл
        СтрокаТаблицы.Разница = СтрокаТаблицы.НоваяСумма - СтрокаТаблицы.СтараяСумма;
    КОнецЦикла;
    
    Для Каждого СтрокаТаблицы Из ТаблицаОНАОНО Цикл
        
        Если СтрокаТаблицы.Счет.Код = "09" И НЕ СтрокаТаблицы.Разница = 0 Тогда
            
            Проводка = мПроводкиБУ.Добавить();
            
            Проводка.Период       = СтруктураШапкиДокумента.Дата;
            Проводка.Организация  = СтруктураШапкиДокумента.Организация;
            Проводка.НомерЖурнала = "";
            Проводка.Содержание   = "Переход на ПР в суммовых разницах";
            
            Если СтрокаТаблицы.Разница > 0  Тогда
                Проводка.Сумма        = СтрокаТаблицы.Разница;
                Проводка.СчетДт       = СтрокаТаблицы.Счет;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Вид);
                Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
            Иначе
                Проводка.Сумма        = - СтрокаТаблицы.Разница;
                Проводка.СчетКт       = СтрокаТаблицы.Счет;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Вид);
                Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
            КонецЕсли;
        КонецЕсли;
        
        Если СтрокаТаблицы.Счет.Код = "77" И НЕ СтрокаТаблицы.Разница = 0 Тогда
            
            Проводка = мПроводкиБУ.Добавить();
            
            Проводка.Период       = СтруктураШапкиДокумента.Дата;
            Проводка.Организация  = СтруктураШапкиДокумента.Организация;
            Проводка.НомерЖурнала = "";
            Проводка.Содержание   = "Переход на ПР в суммовых разницах";
            
            Если СтрокаТаблицы.Разница > 0  Тогда
                Проводка.Сумма        = СтрокаТаблицы.Разница;
                Проводка.СчетКт       = СтрокаТаблицы.Счет;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Вид);
                Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
            Иначе
                Проводка.Сумма        = - СтрокаТаблицы.Разница;
                Проводка.СчетДт       = СтрокаТаблицы.Счет;
                БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Вид);
                Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
            КонецЕсли;
        КонецЕсли;
        
    КонецЦикла;
   
КонецПроцедуры

Процедура 	РасчетНалогаНаПрибыльБезПоддержкиПБУ18(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ПрибылиИУбытки = Новый Массив;
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов);
	ПрибылиИУбытки.Добавить(Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода",     мНачГода);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца", КонецМесяца(НачалоМесяца(мКонДата) - 1));
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Счет",           ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль);
	Запрос.УстановитьПараметр("Счет68",         ПланыСчетов.Хозрасчетный.РасчетыСБюджетом);
	Запрос.УстановитьПараметр("ПрибылиИУбытки", ПрибылиИУбытки);
	Запрос.УстановитьПараметр("ВидУчета",       Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	-НалоговыйОбороты.СуммаОборот КАК Прибыль,
	               |	0 КАК НалогНаПрибыль
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |			&НачалоГода,
	               |			&КонецМесяца,
	               |			,
	               |			Счет = &Счет,
	               |			,
	               |			Организация = &Организация
	               |				И Субконто1 В (&ПрибылиИУбытки)
	               |				И ВидУчета = &ВидУчета,
	               |			,
	               |			) КАК НалоговыйОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	0,
	               |	ХозрасчетныйОбороты.СуммаОборотКт
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&НачалоГода,
	               |			&КонецПредыдущегоМесяца,
	               |			,
	               |			Счет = &Счет68,
	               |			,
	               |			Организация = &Организация
	               |				И Субконто1 В (&ВидыПлатежейВГосБюджет),
	               |			,
	               |			) КАК ХозрасчетныйОбороты";
	
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультат = Результат.Выгрузить();
	
	СуммаДоходаРасхода   = ТаблицаРезультат.Итог("Прибыль");
	СуммаНалогаНаПрибыльРанееНачисленного   = ТаблицаРезультат.Итог("НалогНаПрибыль");
	СтавкаФБ = 0;
	СтавкаРФ = 0;
	СтавкаМестный = 0;
	СуммаНалога = Окр(СуммаДоходаРасхода * НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента,  СтавкаФБ, СтавкаРФ, СтавкаМестный), 2) - СуммаНалогаНаПрибыльРанееНачисленного;
	ВсеСтавки = СтавкаФБ + СтавкаРФ + СтавкаМестный;
	СуммаНалога = ?(СуммаНалога > 0, СуммаНалога, ?(- СуммаНалога > СуммаНалогаНаПрибыльРанееНачисленного, - СуммаНалогаНаПрибыльРанееНачисленного, СуммаНалога));
	Сч99_01_1 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеОблагаемыеЕНВД;
	
	Если СуммаНалога <> 0 И ВсеСтавки <> 0 Тогда
		Если СтавкаФБ <> 0 Тогда
			СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога * СтавкаФБ / (СтавкаФБ + СтавкаРФ + СтавкаМестный), Сч99_01_1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль, "Д", "Налог на прибыль", ,Перечисления.УровниБюджетов.ФедеральныйБюджет);
		КонецЕсли;
		Если СтавкаРФ <> 0 Тогда
			СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога * СтавкаРФ / (СтавкаФБ + СтавкаРФ + СтавкаМестный), Сч99_01_1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль, "Д", "Налог на прибыль", ,Перечисления.УровниБюджетов.РегиональныйБюджет);
		КонецЕсли;
		Если СтавкаМестный <> 0 Тогда
			СформироватьПроводкиПоНалогуНаПрибыль(СуммаНалога * СтавкаМестный / (СтавкаФБ + СтавкаРФ + СтавкаМестный), Сч99_01_1, Перечисления.ПрибылиИУбытки.НалогНаПрибыль, "Д", "Налог на прибыль", ,Перечисления.УровниБюджетов.МестныйБюджет);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //РасчетНалогаНаПрибыль

// Распределение налога на прибыль по бюджетам
//
Процедура СформироватьПроводкиПоНалогуНаПрибыльРасчетыСБюджетом(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",   мНачДата);
	Запрос.УстановитьПараметр("КонецМесяца",    мКонГраница);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Счет",           ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт Как СуммаНалога
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет = &Счет, , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультат = Результат.Выгрузить();
	СуммаНалога   = ТаблицаРезультат.Итог("СуммаНалога");
	
	СтавкаФБ = 0;
	СтавкаРФ = 0;
	СтавкаМестный = 0;
	НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента,  СтавкаФБ, СтавкаРФ, СтавкаМестный);
	ВсеСтавки = СтавкаФБ + СтавкаРФ + СтавкаМестный;
	Счет68_04Дебет  = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	Счет68_04Кредит = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	
	Если СуммаНалога <> 0 И ВсеСтавки <> 0 Тогда
		
		СуммаФБ =  Окр(СуммаНалога * СтавкаФБ / ВсеСтавки,2);
		СуммаМестный =  Окр(СуммаНалога * СтавкаМестный / ВсеСтавки,2);
		СуммаРФ = СуммаНалога - СуммаФБ - СуммаМестный;
		
		Если СуммаФБ <> 0 Тогда
			Проводка = мПроводкиБУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = Организация;
			Проводка.Сумма        = СуммаФБ;
			Проводка.Содержание   = "Налог на прибыль";
			Проводка.НомерЖурнала = "";
			Проводка.СчетДт = Счет68_04Дебет;
			Проводка.СчетКт = Счет68_04Кредит;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.ФедеральныйБюджет);
		КонецЕсли;
		Если СуммаРФ <> 0 Тогда
			Проводка = мПроводкиБУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = Организация;
			Проводка.Сумма        = СуммаРФ;
			Проводка.Содержание   = "Налог на прибыль";
			Проводка.НомерЖурнала = "";
			Проводка.СчетДт = Счет68_04Дебет;
			Проводка.СчетКт = Счет68_04Кредит;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.РегиональныйБюджет);
			
		КонецЕсли;
		Если СуммаМестный <> 0 Тогда
			Проводка = мПроводкиБУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = Организация;
			Проводка.Сумма        = СуммаМестный;
			Проводка.Содержание   = "Налог на прибыль";
			Проводка.НомерЖурнала = "";
			Проводка.СчетДт = Счет68_04Дебет;
			Проводка.СчетКт = Счет68_04Кредит;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Перечисления.УровниБюджетов.МестныйБюджет);
		КонецЕсли;
	КонецЕсли;

	мПроводкиБУ.Записать(Ложь);
КонецПроцедуры // СформироватьПроводкиПоНалогуНаПрибыль()

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	мСтавкаНалогаНаПрибыль = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента);

	Если ВидОперацииРасчетаРазниц = 0 Тогда
		Если ПоддержкаПБУ18 Тогда
			РасчетПостоянныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок);
			РасчетВременныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок);
			РасчетНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ, Заголовок);
			ПересчетОНАиОНОПоУЕ(СтруктураШапкиДокумента)
		Иначе
			РасчетНалогаНаПрибыльБезПоддержкиПБУ18(СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
	Иначе
		РасчетВременныхРазниц(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
		ПоддержкаПБУ18 = ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18;
	Иначе
		ПоддержкаПБУ18 = Ложь;
	КонецЕсли; 
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете",    Ложь);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете",        Ложь);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	мНачДата = НачалоМесяца(ПериодРегистрации);
	мКонДата  = КонецМесяца(ПериодРегистрации);
	мНачГода    = НачалоГода(мНачДата);
	мНачГраница = Новый Граница(мНачДата, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	мПроводкиБУ = Движения.Хозрасчетный;
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПЕЧАТИ ДОКУМЕНТА


#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "Разницы" Тогда
		БухгалтерскийУчет.ПечатьСправкиРасчета(Отчеты.СправкаРасчетПостоянныхИВременныхРазниц, Новый Структура("Организация, Дата", Организация, Дата));
	ИначеЕсли ИмяМакета = "РасчетНалогаНаПрибыль" Тогда
		БухгалтерскийУчет.ПечатьСправкиРасчета(Отчеты.СправкаРасчетНалогаНаПрибыль, Новый Структура("Организация, Дата", Организация, Дата));
	КонецЕсли;
	
КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа.
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) И ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18 Тогда
		Возврат Новый Структура("Разницы,РасчетНалогаНаПрибыль", "Постоянные и временные разницы", "Расчеты по налогу на прибыль");
	Иначе
		Возврат Новый Структура("РасчетНалогаНаПрибыль", "Расчеты по налогу на прибыль");
	КонецЕсли;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()



#КонецЕсли

