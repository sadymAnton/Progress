Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

// Признак того, что документ создан копированием
Перем мДокументСозданКопированием Экспорт;

Перем мУчетнаяПолитикаУпр;
Перем мУчетнаяПолитикаБух;
Перем мУчетнаяПолитикаНал;
Перем мУчетнаяПолитикаРегл;

Перем мВалютаРегламентированногоУчета;

// Переменные используемые обработкой "Проведение по партиям"
Перем СтруктураВидовУчета Экспорт; 
Перем КоличествоСтрокВДокументе Экспорт;
Перем Останавливаться Экспорт;
Перем ПроведениеОстановлено Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета =  "Стоимость,
								|МОЛУУ,
								|СпособНачисленияАмортизацииУУ,
								|Подразделение,
								|СоставОсновногоСредства,
								|ПараметрВыработкиУУ,
								|ПредполагаемыйОбъемПродукцииУУ,
								|СрокПолезногоИспользованияУУ,
								|ГодоваяНормаАмортизацииУУ,
								|ГрафикАмортизацииПоГодуУУ,
								|ИндивидуальныйГрафикАмортизации,
								|КоэффициентУскоренияУУ,
								|НачислятьАмортизациюВТекущемМесяце,
								|НачислятьАмортизациюУУ,
								|";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета = "
		|СтоимостьБУ,
		|СтоимостьБУХоз,
		|СчетУчетаБУВнеоборотногоАктива,
		|ОС.ИнвентарныйНомер,
		|МОЛБУ,
		|ПодразделениеОрганизации,
		|СпособПоступления,
		|СпособНачисленияАмортизацииБУ,
		|ПараметрВыработкиБУ,
		|ПредполагаемыйОбъемПродукцииБУ,
		|СрокПолезногоИспользованияБУ,
		|ГодоваяНормаАмортизацииБУ,
		|ГрафикАмортизацииПоГодуБУ,
		|СчетУчетаБУ,
		|СтавкаНДС,
		|СуммаНДС,
		|СчетНачисленияАмортизацииБУ,
		|КоэффициентУскоренияБУ,
		|НачислятьАмортизациюБУ";

	мСтрокаРеквизитыНалУчета = "
		|СтоимостьНУ,
		|СтоимостьНУХоз,
		|СтоимостьПР,
		|СтоимостьПРХоз,
		|СтоимостьВР,
		|СтоимостьВРХоз,
		|СчетУчетаНУВнеоборотногоАктива,
		|СпособНачисленияАмортизацииНУ,
		|СчетУчетаНУ,
		|СчетНачисленияАмортизацииНУ,
		|СрокПолезногоИспользованияНУ,
		|СпециальныйКоэффициентНУ,
		|НачислятьАмортизациюНУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой ОС-1,ОС-1а,ОС-1б
// в зависимости вида и количества ОС в документе
// Возвращаемое значение:
//  Табличный документ - печатная форма акиа о приеме - передаче объекта ОС,
//  в случае ОС-1,ОС-1а либо неопредлено для ОС-1б
//
Функция ПечатьОС1(ПечатьПоДаннымУпрУчета = Истина)
	
	Если ОтразитьВСоставеМПЗ тогда
		Сообщить("Актив переквалифицирован в МПЗ. Печать формы ""ОС-1"" невозможна.");
		Возврат Неопределено;
	КонецЕсли;

	ЗапросПоШапке = Новый Запрос();
	ЗапросПоШапке.УстановитьПараметр("Ссылка", Ссылка);
	ЗапросПоШапке.УстановитьПараметр("ПечатьПоДаннымУпрУчета", ПечатьПоДаннымУпрУчета);
	
	ТекстПодразделения ="	ПринятиеКУчетуОС.ПодразделениеОрганизации КАК Подразделение,
						|	ПринятиеКУчетуОС.ПодразделениеОрганизации КАК ПодрПолучателя,
						|	ПринятиеКУчетуОС.ПодразделениеОрганизации КАК Местонахождение,
						|	ПринятиеКУчетуОС.Организация,
						|	ПринятиеКУчетуОС.Организация.НаименованиеПолное  КАК ОрганизацияПолучатель,
						|	ПринятиеКУчетуОС.Организация.КодПоОКПО			 КАК ПолучательКодПоОКПО,";

	ТекстЗапросаПоШапке = "ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Номер КАК НомерАкта,
	|	ПринятиеКУчетуОС.Дата  КАК ДатаДок,
	|	ПринятиеКУчетуОС.Дата  КАК ДатаПринятия,
	|	ПринятиеКУчетуОС.ИндивидуальныйГрафикАмортизации,
	|	ПринятиеКУчетуОС.КоэффициентУскоренияУУ КАК КоэффициентУскорения,
	|	ПринятиеКУчетуОС.МОЛУУ КАК МОЛ,
	|	ПринятиеКУчетуОС.ГодоваяНормаАмортизацииУУ КАК НормаАморт,"
	+ТекстПодразделения+"
	|	ПринятиеКУчетуОС.Ответственный,
	|	ПринятиеКУчетуОС.СерияНоменклатуры,
	|	ПринятиеКУчетуОС.Склад,
	|	ПринятиеКУчетуОС.СпособПоступления,
	|	ПринятиеКУчетуОС.СрокПолезногоИспользованияУУ КАК СрокПолезнИспПриПост,
	|	ПринятиеКУчетуОС.Стоимость,
	|	ПринятиеКУчетуОС.ХарактеристикаНоменклатуры,
	|	ПринятиеКУчетуОС.СпособНачисленияАмортизацииУУ КАК СпособАмортизации
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|ГДЕ
	|	ПринятиеКУчетуОС.Ссылка = &Ссылка";
	
	Если Не ПечатьПоДаннымУпрУчета тогда
		ТекстЗапросаПоШапке = СтрЗаменить(ТекстЗапросаПоШапке,"УУ","БУ");
	КонецЕсли;
	ЗапросПоШапке.Текст = ТекстЗапросаПоШапке;
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапке.Выполнить().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	СведенияОПоставщикеПолучателе = Неопределено;
	
	НазваниеРегистра = "СтоимостьОС";
	
	Запрос = Новый Запрос();
	
	Если ПечатьПоДаннымУпрУчета тогда
////		
		кВидуУчета			= "управленческому";
		cВидаУчета 	 	  	= "управленческого";
		кВидуУчетаПеренос 	= "управ- ленческому";
		ВалютаПечати = глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование;
////		
		СведенияОПоставщикеПолучателе = УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоставщикеПолучателе(Неопределено,
										ВыборкаПоШапкеДокумента.Организация,ВыборкаПоШапкеДокумента.ДатаДок);
		СоединениеПоСчетам = "";
		СтрокиСчетов	   = "";
		
	Иначе
////		
		кВидуУчета 		 	= "бухгалтерскому";
		cВидаУчета 		 	= "бухгалтерского";
		кВидуУчетаПеренос 	= "бухгал- терскому";
		ВалютаПечати 		= глЗначениеПеременной("ВалютаРегламентированногоУчета").Наименование;
////		
		СведенияОПоставщикеПолучателе = УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоставщикеПолучателе(Неопределено,
										ВыборкаПоШапкеДокумента.Организация,ВыборкаПоШапкеДокумента.ДатаДок);
		СтрокиСчетов	   = "	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СубСчет,
							  |	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации,";
		СоединениеПоСчетам = "		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&Дата,
							 |Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОС
							 |		ПО ПринятиеКУчетуОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство";
	КонецЕсли;	

	Запрос.УстановитьПараметр("Дата",        ВыборкаПоШапкеДокумента.ДатаДок);
	Запрос.УстановитьПараметр("КонецМесяца", Новый Граница(КонецМесяца(ВыборкаПоШапкеДокумента.ДатаДок), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", ВыборкаПоШапкеДокумента.Организация);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	ТекстЗапроса	= "ВЫБРАТЬ "
	+СтрокиСчетов+"
	|	ПринятиеКУчетуОС.НомерСтроки,
	|	ПринятиеКУчетуОС.ОсновноеСредство,
	|	ПринятиеКУчетуОС.ОсновноеСредство.Код КАК ИнвНомерУпр,
	|	ПринятиеКУчетуОС.ОсновноеСредство.ГруппаОС КАК ГруппаОС,
	|	ПринятиеКУчетуОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	|	ПринятиеКУчетуОС.ОсновноеСредство.Изготовитель КАК Изготовитель,
	|	(ВЫРАЗИТЬ(ПринятиеКУчетуОС.ОсновноеСредство.АмортизационнаяГруппа.Порядок КАК ЧИСЛО)) + 1 КАК НомерГруппы,
	|	ПринятиеКУчетуОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ПринятиеКУчетуОС.ОсновноеСредство.ДатаВыпуска КАК ГодВыпуска,
	|	ПринятиеКУчетуОС.ОсновноеСредство.КодПоОКОФ.Код КАК КодОКОФ,
	|	ВЫБОР
	|	КОГДА ПринятиеКУчетуОС.Ссылка.СписыватьПриПринятииКУчету ТОГДА ЕСТЬNULL(ОССписанныеНаЗатраты.Стоимость, 0)
	|	ИНАЧЕ ЕСТЬNULL(СтоимостьОС.СтоимостьОстаток, 0) КОНЕЦ КАК НачСтоимость
	| ИЗ
	|	Документ.ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.Остатки(&КонецМесяца,
	|		                                                   //Организация = &Организация
	|		) КАК СтоимостьОС
	|		ПО ПринятиеКУчетуОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОССписанныеНаЗатраты КАК ОССписанныеНаЗатраты
	|		ПО ПринятиеКУчетуОС.ОсновноеСредство = ОССписанныеНаЗатраты.ОсновноеСредство
	|		И ПринятиеКУчетуОС.Ссылка = ОССписанныеНаЗатраты.Регистратор
	|"+ СоединениеПоСчетам+	"
	| ГДЕ
	|	ПринятиеКУчетуОС.Ссылка = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ПринятиеКУчетуОС.НомерСтроки";
	
	Если не ПечатьПоДаннымУпрУчета тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РегистрНакопления.СтоимостьОС","РегистрНакопления.СтоимостьОСБухгалтерскийУчет");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//Организация","Организация");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РегистрНакопления.ОССписанныеНаЗатраты","РегистрНакопления.ОССписанныеНаЗатратыОрганизаций");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапросаПоОС = Запрос.Выполнить();
	
	Если РезультатЗапросаПоОС.Пустой() тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаПоОС = РезультатЗапросаПоОС.Выбрать();

	Если ВыборкаПоОС.Количество() = 1 Тогда

		ВыборкаПоОС.Следующий();

		ТабДокумент   = Новый ТабличныйДокумент();
		
		Если НЕ(ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
			    ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда
				
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1";
			Макет         = ПолучитьОбщийМакет("ОС1");
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");

		Иначе

			Макет 		   = ПолучитьОбщийМакет("ОС1а");
			ОбластьМакета  = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.кВидуУчетаПеренос 	= кВидуУчетаПеренос;

		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
		
		Если НЕ(ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
			    ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда
				ОбластьМакета.Параметры.ГодВыпуска = Неопределено;
		КонецЕсли;
		
		Если СведенияОПоставщикеПолучателе <> Неопределено тогда
			ОбластьМакета.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		КонецЕсли;
		ОбластьМакета.Параметры.Валюта = ВалютаПечати;
		ОбластьМакета.Параметры.кВидуУчета 	 = кВидуУчета;
		ОбластьМакета.Параметры.cВидаУчета 	 = cВидаУчета;
		
		Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
			ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
		КонецЕсли; 

		Если ПечатьПоДаннымУпрУчета тогда
			ОбластьМакета.Параметры.ИнвНомер = ВыборкаПООС.ИнвНомерУпр;
		Иначе
			ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ВыборкаПоШапкеДокумента.ДатаДок,
											Новый Структура("ОсновноеСредство",ВыборкаПоОС.ОсновноеСредство));
			ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
			ОбластьМакета.Параметры.ИнвНомер = ИнвНомерБух;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		Возврат ТабДокумент;

	Иначе // Объектов много - групповая печать.

		ОС1б_Страница1 = Новый ТабличныйДокумент();
		ОС1б_Страница2 = Новый ТабличныйДокумент();
		ОС1б_Страница3 = Новый ТабличныйДокумент();
		ОС1б_Страница4 = Новый ТабличныйДокумент();

		МакетОС1б      = ПолучитьОбщийМакет("ОС1б");
		
		Шапка1ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка1");
		Шапка2ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка2");
		Строка2ОС1б    = МакетОС1б.ПолучитьОбласть("Строка2");
		Строка2ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка2П");
		Подвал2        = МакетОС1б.ПолучитьОбласть("Подвал2");
		Шапка3ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка3");
		Строка3ОС1б    = МакетОС1б.ПолучитьОбласть("Строка3");
		Строка3ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка3П");
		Подвал3        = МакетОС1б.ПолучитьОбласть("Подвал3");
		Шапка4ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка4");

		Шапка1ОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		ВыборкаПоОС.Следующий();
		Шапка1ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ВыборкаПоОС.Сбросить();
		
		Шапка1ОС1б.Параметры.кВидуУчета = кВидуУчета;
		Шапка1ОС1б.Параметры.cВидаУчета = cВидаУчета;
		
		Если СведенияОПоставщикеПолучателе <> Неопределено тогда
			Шапка1ОС1б.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		КонецЕсли;
		
		ОС1б_Страница1.Вывести(Шапка1ОС1б);

		Шапка2ОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Шапка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Шапка2ОС1б);

		Шапка3ОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Шапка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		Шапка3ОС1б.Параметры.Валюта = ВалютаПечати;
		Шапка3ОС1б.Параметры.кВидуУчета = кВидуУчетаПеренос;
		ОС1б_Страница3.Вывести(Шапка3ОС1б);

		Шапка4ОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Шапка4ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		Если СведенияОПоставщикеПолучателе <> Неопределено тогда
			Шапка4ОС1б.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		КонецЕсли;
			
		ОС1б_Страница4.Вывести(Шапка4ОС1б);

		НомПП = 0;
		ИтогНачСтоимость = 0;
		Пока ВыборкаПоОС.Следующий() Цикл

			НомПП = НомПП + 1;
			Строка2ОС1б.Параметры.Нс = НомПП;
			
			Строка2ОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
			Строка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				Строка2ОС1б.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли; 
			Если ПечатьПоДаннымУпрУчета тогда
				Строка2ОС1б.Параметры.ИнвНомер = ВыборкаПоОС.ИнвНомерУпр;
			Иначе
				ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ВыборкаПоШапкеДокумента.ДатаДок,
								 Новый Структура("ОсновноеСредство",ВыборкаПоОС.ОсновноеСредство));
				ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
				Строка2ОС1б.Параметры.ИнвНомер = ИнвНомерБух;
			КонецЕсли;				
			ОС1б_Страница2.Вывести(Строка2ОС1б);
			
			ИтогНачСтоимость = ИтогНачСтоимость +ВыборкаПоОС.НачСтоимость;

			Строка3ОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
			Строка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			ОС1б_Страница3.Вывести(Строка3ОС1б);

		КонецЦикла;

		Строка2ПОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Строка2ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Строка2ПОС1б);

		Подвал2.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Подвал2.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Подвал2);

		Строка3ПОС1б.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Строка3ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница3.Вывести(Строка3ПОС1б);

		Подвал3.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		Подвал3.Параметры.Заполнить(ВыборкаПоОС);
		Подвал3.Параметры.ИтогНачСтоимость = ИтогНачСтоимость;

		ОС1б_Страница3.Вывести(Подвал3);

		ОС1б_Страница1.ВывестиГоризонтальныйРазделительСтраниц();
		ОС1б_Страница1.Вывести(ОС1б_Страница2);
		ОС1б_Страница1.ВывестиГоризонтальныйРазделительСтраниц();
		ОС1б_Страница1.Вывести(ОС1б_Страница3);
		ОС1б_Страница1.ВывестиГоризонтальныйРазделительСтраниц();
		ОС1б_Страница1.Вывести(ОС1б_Страница4);
		Возврат ОС1б_Страница1;

	КонецЕсли;

КонецФункции // ПечатьОС1()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи и проведения!");
		Возврат;
	ИначеЕсли Не Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ОС1упр" тогда
		ТабДокумент = ПечатьОС1();
		
	ИначеЕсли ИмяМакета = "ОС1бух" тогда
		ТабДокумент = ПечатьОС1(Ложь);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Принятие к учету основных средств"), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;

	СтруктураМакетов.Вставить("ОС1упр", "Форма ОС-1 (упр. учет)");
	СтруктураМакетов.Вставить("ОС1бух", "Форма ОС-1 (бух. учет)");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	Если  ОтражатьВУправленческомУчете тогда 
		СписокМакетов.Добавить( "ОС1упр","Форма ОС-1 (упр. учет)");
	КонецЕсли;
	Если  ОтражатьВБухгалтерскомУчете тогда 
		СписокМакетов.Добавить("ОС1бух", "Форма ОС-1 (бух. учет)");
	КонецЕсли;
	
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиУпр(Реквизиты,СтруктураШапкиДокумента)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "НоменклатураМПЗ,СкладМПЗ,СчетУчетаМПЗБУ";	
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства 
	 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Стоимость";
	КонецЕсли;

	Если НЕ СтруктураШапкиДокумента.СписыватьПриПринятииКУчету 
	   И НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда

		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СпособНачисленияАмортизацииУУ";
		
		Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СрокПолезногоИспользованияУУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ГодоваяНормаАмортизацииУУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ГодоваяНормаАмортизацииУУ,ПараметрВыработкиУУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ИндивидуальныйГрафикАмортизации";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СрокПолезногоИспользованияУУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ПредполагаемыйОбъемПродукцииУУ,ПараметрВыработкиУУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СрокПолезногоИспользованияУУ,КоэффициентУскоренияУУ";

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры //  ДополнитьОбязательныеРеквизитыШапкиУпр()

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты,СтруктураШапкиДокумента)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьБУ,СчетУчетаБУВнеоборотногоАктива";

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СтруктураШапкиДокумента.НачислятьАмортизациюНУ Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаНУВнеоборотногоАктива";
		КонецЕсли;
		Если СуммаНДС > 0 Тогда
			Реквизиты = Реквизиты + ", СтавкаНДС";
		КонецЕсли;

	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаБУВнеоборотногоАктива";

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СтруктураШапкиДокумента.НачислятьАмортизациюНУ Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаНУВнеоборотногоАктива";
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаМПЗБУ,НоменклатураМПЗ,СкладМПЗ";	
	КонецЕсли;		
	
	Если НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаБУ";
	КонецЕсли;	

	Если НЕ СтруктураШапкиДокумента.СписыватьПриПринятииКУчету 
	   И НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
	   
   		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СпособНачисленияАмортизацииБУ,СчетНачисленияАмортизацииБУ";

		Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СрокПолезногоИспользованияБУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ГодоваяНормаАмортизацииБУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ГодоваяНормаАмортизацииБУ,ПараметрВыработкиБУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СрокПолезногоИспользованияБУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ПредполагаемыйОбъемПродукцииБУ,ПараметрВыработкиБУ";

		ИначеЕсли СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СрокПолезногоИспользованияБУ,КоэффициентУскоренияБУ";

		КонецЕсли;

	КонецЕсли;
		
	Если НЕ ((ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы) И ОтразитьВСоставеМПЗ) Тогда
		
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СпособыОтраженияРасходовПоАмортизации";
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаНУ,ПорядокВключенияСтоимостиВСоставРасходовНУ";
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		
			Если НЕ СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьНУ";
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
			
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетНачисленияАмортизацииНУ,СрокПолезногоИспользованияНУ,СпециальныйКоэффициентНУ";
			
			Если Год(СтруктураШапкиДокумента.Дата) < 2009 Тогда
				Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СпособНачисленияАмортизацииНУ";
			КонецЕсли;
			
			Если НЕ (СтруктураШапкиДокумента.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0) 
			   И СтруктураШапкиДокумента.ВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии Тогда
				Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СчетУчетаЗатратПоАмортизационнойПремии";
				
				//начало изменений Ожиганов 04.02.2016 б/н проверка аналитики при использовании амортизационной премии в НУ 
				Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаЗатратПоАмортизационнойПремии) Тогда
					//заполним какие реквизиты нужно заполнять
					Запрос = Новый Запрос("ВЫБРАТЬ
					                      |	НалоговыйВидыСубконто.ВидСубконто,
					                      |	НалоговыйВидыСубконто.НомерСтроки КАК НомерСтроки
					                      |ИЗ
					                      |	ПланСчетов.Налоговый.ВидыСубконто КАК НалоговыйВидыСубконто
					                      |ГДЕ
					                      |	НалоговыйВидыСубконто.ВидСубконто В(&ВидСубконто)
					                      |	И НалоговыйВидыСубконто.Ссылка = &Счет
					                      |
					                      |УПОРЯДОЧИТЬ ПО
					                      |	НомерСтроки");
										  
					Запрос.УстановитьПараметр("Счет",СтруктураШапкиДокумента.СчетУчетаЗатратПоАмортизационнойПремии);
					ВидСубконто = Новый Массив();
					// другие субконто пока не проверяем
					ВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
					ВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПодразделениеОрганизации);
					ВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
					ВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
					Запрос.УстановитьПараметр("ВидСубконто",ВидСубконто);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка .Количество() > 0 Тогда
						Пока Выборка.Следующий() Цикл
							 Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") 
							 + "СубконтоПоАмортизационнойПремии"+Формат(Выборка.НомерСтроки,"ЧГ=0");
						КонецЦикла;	
					КонецЕсли;
					
					
				Конецесли;	
				//конец изменений 
				
			КонецЕсли;
			
			
		КонецЕсли;

		// Проверка заполнения поля "Способ отражения расходов" при включении стоимости ОС в расходы при принятии к учету.
		Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СпособОтраженияРасходовПриВключенииВСтоимость";		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения упр. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиУпр(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
			
			ВыборкаЗаписей = РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.Остатки(Дата,Новый Структура("ОбъектСтроительства",СтруктураШапкиДокумента.ОбъектСтроительства));
			ОстатокСтоимости = 0;
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ОстатокСтоимости = ВыборкаЗаписей[0].Сумма;
			КонецЕсли;
			Требуется = СтруктураШапкиДокумента.Стоимость;
			Если Требуется > ОстатокСтоимости Тогда
				
				ОбщегоНазначения.Сообщение("По управленческому учету накопленная на объекте строительства сумма меньше указанной в документе"+ Символы.ПС + Символы.Таб +
				"Не хватает " + ?(ОстатокСтоимости > 0 , Требуется - ОстатокСтоимости, Требуется ) +
				"; Накоплено на объекте строительства " + ОстатокСтоимости +
				"; Указано в документе " + Требуется , ,Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеПринятиеКУчету.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеПринятиеКУчету.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ПринятиеКУчету,
								  ПредставлениеРеквизита,Отказ);
								  
    ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеВводВЭксплуатацию.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеВводВЭксплуатацию.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ВводВЭксплуатацию,
								  ПредставлениеРеквизита,Отказ);
	
КонецПроцедуры

// Проверяет остаток на объекте строительства по бух. или налог. учету
// (для оперативного проведения).
//
Процедура ПроверитьОстаток(СтруктураШапкиДокумента, СчетУчета, Стоимость, Отказ, Заголовок, Хозрасчетный = Истина)

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков",        СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Счет",                СчетУчета);
	Запрос.УстановитьПараметр("ВидыСубконто",        ВидыСубконто);
	Запрос.УстановитьПараметр("Организация",         СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ОбъектСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Остатки.СуммаОстаток КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&ДатаОстатков,
	|		Счет = &Счет,
	|		&ВидыСубконто,
	|		Организация = &Организация
	|		    И Субконто1 = &ОбъектСтроительства) КАК Остатки
	|";
	
	ТекстУчета = "бухгалтерскому";
	
	Если НЕ Хозрасчетный Тогда
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Хозрасчетный", "Налоговый");
		ТекстУчета = "налоговому";
	
	КонецЕсли; 
			
	Выборка = Запрос.Выполнить().Выбрать();
	Остаток = 0;
	
	Если Выборка.Следующий() Тогда
			
		Остаток = Выборка.Остаток;
			
	КонецЕсли; 
			
	Если Остаток < Стоимость Тогда
			
		ОбщегоНазначения.Сообщение("По "+ТекстУчета+" учету накопленная на объекте строительства сумма меньше указанной в документе"+ Символы.ПС + Символы.Таб +
		"Не хватает " + ?(Остаток > 0 , Стоимость - Остаток, Стоимость ) +
		"; Накоплено на объекте строительства " + Остаток +
		"; Указано в документе " + Стоимость, ,Заголовок);
			
	КонецЕсли; 

КонецПроцедуры//ПроверитьОстаток

// Проверяет правильность заполнения регл. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиРегл(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;
	//начало изменений БП 07 
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.РегистрацияВИФНС) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле ИФНС", Отказ,Заголовок);
	КонецЕсли;	
	//конец изменений БП 07	 
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеПринятиеКУчетуРегл.Представление();
	
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеПринятиеКУчетуРегл.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ПринятиеКУчету,
								  ПредставлениеРеквизита,Отказ);
								  
    ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеВводВЭксплуатациюРегл.Представление();
								  
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеВводВЭксплуатациюРегл.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.ВводВЭксплуатацию,
								  ПредставлениеРеквизита,Отказ);

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		
		// Проверка остатков на счетах для объектов строительства
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				ПроверитьОстаток(СтруктураШапкиДокумента, СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива, СтруктураШапкиДокумента.СтоимостьБУ, Отказ, Заголовок )
			КонецЕсли;
		КонецЕсли;
			
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				Если (СтруктураШапкиДокумента.СтоимостьНУ + СтруктураШапкиДокумента.СтоимостьПР + СтруктураШапкиДокумента.СтоимостьВР) = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не заполнены значения реквизитов ""Стоимость (НУ)"", ""Стоимость (ПР)"", ""Стоимость (ВР)""!", Отказ, Заголовок);
				Конецесли;
			КонецЕсли;
			
			// Проверка остатков на счетах для объектов строительства
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				ПроверитьОстаток(СтруктураШапкиДокумента, СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива,СтруктураШапкиДокумента.СтоимостьНУ, Отказ, Заголовок,   Ложь)
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
								  								  
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "";
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.РазукомплектацияОС Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ПРГ_ОсновноеСредство, СобытиеРазукомплектации";
	КонецЕсли;	

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "ОбъектСтроительства";
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "Номенклатура, Склад";
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование
	   И СтруктураШапкиДокумента.СписыватьПриПринятииКУчету Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СпособыОтраженияРасходовПоАмортизации";
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
	   И НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ 
	   И СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СобытиеВводВЭксплуатацию";
	КонецЕсли;
	
	Если ((ОтражатьВБухгалтерскомУчете И НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ) ИЛИ ОтражатьВНалоговомУчете)
	   И СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "СобытиеВводВЭксплуатациюРегл";
	КонецЕсли;

	ДополнитьОбязательныеРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента);
	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки,СтруктураШапкиДокумента);

	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок, , "");
	КонецЕсли;

	ПроверитьЗаполнениеШапкиУпр(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры

// Проверка реквизитов в ТЧ по упр. учету
// 
Процедура ПроверкаРеквизитовТЧУпр(РежимПроведения,ТаблицаПоОС,СтруктураШапкиДокумента,Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
			
			// Проверка остатков при оперативном проведении.
			ТоварыНаСкладах = 0;
			ТоварыВРезервеНаСкладах = 0;
			ТоварыКПередачеСоСкладов = 0;
			
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Склад", СтруктураШапкиДокумента.Склад);
			СтруктураПолей.Вставить("Номенклатура", СтруктураШапкиДокумента.Номенклатура);
			СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", СтруктураШапкиДокумента.ХарактеристикаНоменклатуры);
			СтруктураПолей.Вставить("СерияНоменклатуры", СтруктураШапкиДокумента.СерияНоменклатуры);
			СтруктураПолей.Вставить("Качество", Справочники.Качество.Новый);
			
			ВыборкаЗаписей = РегистрыНакопления.ТоварыНаСкладах.Остатки(Дата,СтруктураПолей);
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ТоварыНаСкладах = ВыборкаЗаписей.Итог("Количество");
			КонецЕсли;
			
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Склад", СтруктураШапкиДокумента.Склад);
			СтруктураПолей.Вставить("Номенклатура", СтруктураШапкиДокумента.Номенклатура);
			СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", СтруктураШапкиДокумента.ХарактеристикаНоменклатуры);
			ВыборкаЗаписей = РегистрыНакопления.ТоварыВРезервеНаСкладах.Остатки(Дата,СтруктураПолей);
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ТоварыВРезервеНаСкладах = ВыборкаЗаписей[0].Количество;
			КонецЕсли;
			
			ВыборкаЗаписей = РегистрыНакопления.ТоварыКПередачеСоСкладов.Остатки(Дата,СтруктураПолей);
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ТоварыКПередачеСоСкладов = ВыборкаЗаписей[0].Количество;
			КонецЕсли;
			
			Если ТоварыНаСкладах - (ТоварыВРезервеНаСкладах + ТоварыКПередачеСоСкладов) < ТаблицаПоОС.Количество() Тогда
				
				СтрокаСообщения = ?(ТоварыВРезервеНаСкладах > 0, "Свободного остатка ", "Остатка ") + 
				УправлениеЗапасами.ПредставлениеНоменклатуры(СтруктураШапкиДокумента.Номенклатура.Наименование, 
				СтруктураШапкиДокумента.ХарактеристикаНоменклатуры.Наименование,
				СтруктураШапкиДокумента.СерияНоменклатуры.Наименование) +									  
				" на складе """ + СокрЛП(СтруктураШапкиДокумента.Склад) +
				""" недостаточно.";
				
				УправлениеЗапасами.ОшибкаНетОстатка(СтрокаСообщения, ТоварыНаСкладах - (ТоварыВРезервеНаСкладах + ТоварыКПередачеСоСкладов), ТаблицаПоОС.Количество(),
				СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование, Отказ, Заголовок);
				Сообщить("Зарезервировано " + (ТоварыВРезервеНаСкладах + ТоварыКПередачеСоСкладов) + " " + СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаРеквизитовТЧУпр()

// Проверка реквизитов в ТЧ по регл. учету
// 
Процедура ПроверкаРеквизитовТЧРегл(РежимПроведения,ТаблицаПоОС,СтруктураШапкиДокумента,Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
			ТоварыОрганизаций =0;
			
			// Проверка остатков при оперативном проведении.
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Организация", СтруктураШапкиДокумента.Организация);
			СтруктураПолей.Вставить("Номенклатура", СтруктураШапкиДокумента.Номенклатура);
			СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", СтруктураШапкиДокумента.ХарактеристикаНоменклатуры);
			СтруктураПолей.Вставить("СерияНоменклатуры", СтруктураШапкиДокумента.СерияНоменклатуры);
			СтруктураПолей.Вставить("Качество", Справочники.Качество.Новый);
			
			ВыборкаЗаписей = РегистрыНакопления.ТоварыОрганизаций.Остатки(Дата,СтруктураПолей);
			Если ВыборкаЗаписей.Количество() > 0 Тогда;
				ТоварыОрганизаций = ВыборкаЗаписей.Итог("Количество");
			КонецЕсли;
			Если ТоварыОрганизаций < ТаблицаПоОС.Количество() Тогда
				
				СтрокаСообщения = ?(ТоварыОрганизаций > 0, "Остатка по организации ", "Остатка ") + 
				УправлениеЗапасами.ПредставлениеНоменклатуры(СтруктураШапкиДокумента.Номенклатура.Наименование, 
				СтруктураШапкиДокумента.ХарактеристикаНоменклатуры.Наименование,
				СтруктураШапкиДокумента.СерияНоменклатуры.Наименование) +									  
				" на складе """ + СокрЛП(СтруктураШапкиДокумента.Склад) +
				""" недостаточно.";
				
				Если НЕ УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации(СтруктураШапкиДокумента.Организация) Тогда
					УправлениеЗапасами.ОшибкаНетОстатка(СтрокаСообщения, ТоварыОрганизаций, ТаблицаПоОС.Количество(),
					СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование, Отказ, Заголовок);
				Иначе
					СтрокаСообщения = СтрокаСообщения + Символы.ПС + Символы.Таб
					+ "Не хватает " + (ТаблицаПоОС.Количество() - ТоварыОрганизаций) + " " + СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование
					+ "; Остаток " + ТоварыОрганизаций + " " + СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование
					+ "; Требуется " + ТаблицаПоОС.Количество() + " " + СтруктураШапкиДокумента.Номенклатура.ЕдиницаХраненияОстатков.Наименование;
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
				КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(ТаблицаПоСтрокам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, ДатаОплаты, СуммаОплаты");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Дополняет список обязательных параметров табл. части
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСУпр(Реквизиты)

	//Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "СтоимостьУУ";

КонецПроцедуры

// Дополняет список обязательных параметров табл. части
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыТабОСРегл(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ИнвентарныйНомер";

КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(РежимПроведения,ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок) Экспорт

	Если ТаблицаОС.Количество()= 0 тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке( "Табличная часть ""Основные средства"" пуста" , Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	РеквизитыТабОС = "ОсновноеСредство"; //через запятую
	ДополнитьОбязательныеРеквизитыТабОСУпр(РеквизитыТабОС);
	ДополнитьОбязательныеРеквизитыТабОСРегл(РеквизитыТабОС);
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабОС, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "ОС");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОсновныеСредства", Новый Структура(РеквизитыТабОС), Отказ, Заголовок);

	// Логические проверки
	ПроверкаРеквизитовТЧУпр(РежимПроведения,ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок);
	ПроверкаРеквизитовТЧРегл(РежимПроведения,ТаблицаОС,СтруктураШапкиДокумента,Отказ, Заголовок);
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Для Каждого СтрокаТЧ Из ТаблицаОС Цикл
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьПринятияКУчетуОС(СтрокаТЧ.ОсновноеСредство,СтруктураШапкиДокумента.Дата,Отказ);
			КонецЕсли;
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьПринятияКУчетуОС(СтрокаТЧ.ОсновноеСредство,СтруктураШапкиДокумента.Дата,Отказ,СтруктураШапкиДокумента.Организация) 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//начало изменений 
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.РазукомплектацияОС Тогда
		Для каждого ТекСтрока Из ОсновныеСредства Цикл
			Если ТекСтрока.Коэффициент <= 0 Тогда
					НомерСтроки = ОсновныеСредства .Индекс(ТекСтрока);
					Отказ = Истина;
					ОбщегоНазначения.СообщитьОбОшибке( "В строке "+НомерСтроки+" не заполнен коэффициент" , Отказ, Заголовок);
					Возврат;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	//конец изменений  
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура формирования движений регистров
//
Процедура ФормированиеДвижений(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплат, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоОС);
		
		Если ТипЗнч(СтруктураВидовУчета) = Тип("Структура") тогда
			Упр = СтруктураВидовУчета.ОтражатьВУправленческомУчете;
			Бух = СтруктураВидовУчета.ОтражатьВБухгалтерскомУчете;
			Нал = СтруктураВидовУчета.ОтражатьВНалоговомУчете;
			СписаниеВыполняетсяОбработкой = Истина;
		Иначе
			Упр = Истина;
			Бух = Истина;
			Нал = Истина;
			СписаниеВыполняетсяОбработкой = Ложь;
			Останавливаться = Ложь;
			ПроведениеОстановлено = Ложь;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование тогда
			УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
				ЭтотОбъект, 
				Дата, 
				СтруктураШапкиДокумента.Организация,
				ОтражатьВУправленческомУчете И Упр,
				ОтражатьВБухгалтерскомУчете И Бух,
				ОтражатьВНалоговомУчете И Нал,
				СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);			
		КонецЕсли;
		
		КоличествоСтрокВДокументе = 0;
		
		Если ТипЗнч(СтруктураВидовУчета) = Тип("Структура") Тогда
			// Структура видов учета определяется в обработке "Проведение по партиям"
			ФормироватьПроводки = СтруктураВидовУчета.ФормироватьПроводки;
			СписыватьПартииНДС = СтруктураВидовУчета.СписыватьПартииНДС;
		Иначе
			ФормироватьПроводки = Неопределено;
			СписыватьПартииНДС = Неопределено;
		КонецЕсли;	
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить(),
								КоличествоСтрокВДокументе, Упр,
								Бух, Нал,
								Останавливаться, ПроведениеОстановлено,
								, СписаниеВыполняетсяОбработкой,,
								ФормироватьПроводки,СписыватьПартииНДС);
								
		Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
	  	  И глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата Тогда
			СтруктраИсточника = Новый Структура();
			СтруктраИсточника.Вставить("мСтруктураШапкиДокумента",СтруктураШапкиДокумента);
			СтруктраИсточника.Вставить("мСтруктураТабличныхЧастей",Новый Структура("СписанныеТовары",Движения.СписанныеТовары.Выгрузить()));
			СтруктраИсточника.Вставить("Ссылка",Ссылка);
			СтруктраИсточника.Вставить("Дата",Дата);
			
			СтруктраИсточника.Вставить("ОтражатьВУправленческомУчете", ОтражатьВУправленческомУчете);
			СтруктраИсточника.Вставить("ОтражатьВБухгалтерскомУчете",ОтражатьВБухгалтерскомУчете);
			СтруктраИсточника.Вставить("ОтражатьВНалоговомУчете",ОтражатьВНалоговомУчете);
			
			СтруктраИсточника.Вставить("Движения",Новый Структура());
			
			Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
				СтруктраИсточника.мСтруктураТабличныхЧастей.СписанныеТовары.Колонки.Добавить("СтоимостьНУ");
				Если СтруктураШапкиДокумента.СтоимостьНУ <> 0 Тогда
					МассивКоэффициентов = СтруктраИсточника.мСтруктураТабличныхЧастей.СписанныеТовары.ВыгрузитьКолонку("Количество");
					//Очистим коэффициенты для строк, где нет сумм НУ
					Для НомерСтроки = 0 По СтруктраИсточника.мСтруктураТабличныхЧастей.СписанныеТовары.Количество() - 1 Цикл
						Если НЕ СтруктраИсточника.мСтруктураТабличныхЧастей.СписанныеТовары[НомерСтроки].ОтражатьВНалоговомУчете Тогда
							МассивКоэффициентов[НомерСтроки] = 0;
						КонецЕсли;
					КонецЦИкла;	
					
					МассивСуммНУ = ОбщегоНазначения.РаспределитьПропорционально(СтруктураШапкиДокумента.СтоимостьНУ, МассивКоэффициентов);
					СтруктраИсточника.мСтруктураТабличныхЧастей.СписанныеТовары.ЗагрузитьКолонку(МассивСуммНУ,"СтоимостьНУ");
				КонецЕсли;
			КонецЕсли;	
		  
			УправлениеЗапасамиРасширеннаяАналитика.РасширеннаяАналитикаЗапасовИзменениеСостояния(СтруктраИсточника,Отказ,Неопределено);
		КонецЕсли;
		
								
		Если СтруктураШапкиДокумента.СписыватьПриПринятииКУчету Тогда
			НаборДвиженийУпр = Движения.ОССписанныеНаЗатраты;
			НаборДвиженийБух = Движения.ОССписанныеНаЗатратыОрганизаций;
			НаборДвиженийНал = Движения.ОССписанныеНаЗатратыОрганизаций;
		Иначе
			НаборДвиженийУпр = Движения.СтоимостьОС;
			НаборДвиженийБух = Движения.СтоимостьОСБухгалтерскийУчет;
			НаборДвиженийНал = Движения.СтоимостьОСНалоговыйУчет;
		КонецЕсли;
		
		НаборДвиженийУпр.Прочитать();
		НаборДвиженийБух.Прочитать();
		НаборДвиженийНал.Прочитать();

		ДвиженияУпр = НаборДвиженийУпр.Выгрузить(,"ОсновноеСредство, Стоимость");
		ДвиженияБух = НаборДвиженийБух.Выгрузить(,"ОсновноеСредство, Стоимость");
		ДвиженияНал = НаборДвиженийНал.Выгрузить(,"ОсновноеСредство, Стоимость");
		
		Для Каждого СтрокаОС Из ТаблицаПоОС Цикл
			
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				
				СтрокаДвиженийУпр = ДвиженияУпр.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
				
				Если НЕ СтрокаДвиженийУпр = Неопределено Тогда
					СтрокаОС.СуммаОС_УУ = СтрокаДвиженийУпр.Стоимость;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				
				СтрокаДвиженийБух = ДвиженияБух.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
				
				Если НЕ СтрокаДвиженийБух = Неопределено Тогда
					СтрокаОС.СуммаОС_БУ = СтрокаДвиженийБух.Стоимость;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				СтрокаДвиженийНал = ДвиженияНал.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
				
				Если НЕ СтрокаДвиженийНал = Неопределено Тогда
					СтрокаОС.СуммаОС_НУ = СтрокаДвиженийНал.Стоимость;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ДвиженияПоРегиструТоварыОрганизаций(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ);
		Если Отказ тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ФормированиеДвиженийУпр(РежимПроведения,СтруктураШапкиДокумента,  ТаблицаПоОС, Отказ, Заголовок);
	ФормированиеДвиженийРегл(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплат, Отказ, Заголовок);

КонецПроцедуры // ФормированиеДвижений()


Процедура ЗаполнитьКолонкиРегистраСписанныеТовары(ТаблицаДвижений, СтруктураШапкиДокумента)

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Номенклатура,   "Номенклатура");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ХарактеристикаНоменклатуры,   "ХарактеристикаНоменклатуры");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СерияНоменклатуры,   "СерияНоменклатуры");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,   "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(1,   "Количество");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,   "Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,   "Качество");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование,   "ДопустимыйСтатус1");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива,   "СчетУчетаБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива,   "СчетУчетаНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаБУ,   "КорСчетБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаНУ,   "КорСчетНУ");

КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоОС);

	НаборДвижений = Движения.СписанныеТовары;
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	Инд = 0;

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете или СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ТаблицаДвижений.Очистить();
		// Заполним таблицу движений.
		
		Для каждого Строка  Из ТаблицаПоОС Цикл
		
			Движение = ТаблицаДвижений.Добавить();
			Инд = Инд+1;
			Движение.НомерСтрокиДокумента = Инд;
			Движение.ОсновноеСредство = Строка.ОсновноеСредство;
			Движение.КорСубконтоБУ1   = Строка.ОсновноеСредство;
			
		КонецЦикла;
		
		ЗаполнитьКолонкиРегистраСписанныеТовары(ТаблицаДвижений, СтруктураШапкиДокумента);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВУправленческомУчете,   "ОтражатьВУправленческомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,   "ОтражатьВБухгалтерскомУчете");
		
		Если СтруктураШапкиДокумента.СписыватьПриПринятииКУчету Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОССоСписаниемНаЗатраты,   "КодОперацииПартииТоваров");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОС,   "КодОперацииПартииТоваров");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВключениеАктиваВСоставМПЗ,   "КодОперацииПартииТоваров");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.НоменклатураМПЗ,   "НоменклатураНовая");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ХарактеристикаМПЗ,   "ХарактеристикаНоменклатурыНовая");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СерияМПЗ,   "СерияНоменклатурыНовая");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладМПЗ,   "СкладПолучатель");
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаМПЗБУ,   "КорСчетБУ");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,   "ДокументОприходованияНовый");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,   "ИзменитьСерию");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,   "ИзменитьХарактеристику");
			
		КонецЕсли;

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Движения.СписанныеТовары.ВыполнитьДвижения();
	
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		ТаблицаДвижений.Очистить();
		
		Для каждого Строка  Из ТаблицаПоОС Цикл
			
			Движение = ТаблицаДвижений.Добавить();
			Инд = Инд+1;
			Движение.НомерСтрокиДокумента = Инд;
			Движение.ОсновноеСредство = Строка.ОсновноеСредство;
			Движение.КорСубконтоБУ1   = Строка.ОсновноеСредство;
			
		КонецЦикла;
		
		ПорядокВключенияСтоимости = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ;
		
		Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПорядокВключенияСтоимости.ВключениеВРасходыПриПринятииКУчету тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОССоСписаниемНаЗатраты,   "КодОперацииПартииТоваров");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОС,   "КодОперацииПартииТоваров");
		КонецЕсли;

		ЗаполнитьКолонкиРегистраСписанныеТовары(ТаблицаДвижений, СтруктураШапкиДокумента);
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,   "ОтражатьВНалоговомУчете");

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Движения.СписанныеТовары.ВыполнитьДвижения();
	
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ТаблицаДвижений.Очистить();
		
		Для каждого Строка  Из ТаблицаПоОС Цикл
			
			Движение = ТаблицаДвижений.Добавить();
			Инд = Инд+1;
			Движение.НомерСтрокиДокумента = Инд;
			Движение.ОсновноеСредство = Строка.ОсновноеСредство;
			Движение.КорСубконтоБУ1   = Строка.ОсновноеСредство;
			
		КонецЦикла;
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПринятиеКУчетуОС,  "КодОперацииПартииТоваров");
		
		ЗаполнитьКолонкиРегистраСписанныеТовары(ТаблицаДвижений, СтруктураШапкиДокумента);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН,   	"ОтражатьВНалоговомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива,   "СчетУчетаНУ");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаБУ,   					"КорСчетНУ");

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Движения.СписанныеТовары.ВыполнитьДвижения();
	
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Процедура формирования движений упр. регистров
//
Процедура ФормированиеДвиженийУпр(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	//Вадим
	НеведетсяУПРУчетВЧастиЗатратИОС=Константы.НеведетсяУПРУчетВЧастиЗатратИОС.Получить();	
	//Вадим
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете 
		/////Вадим 09.10.2013 15:03:27
        и не НеведетсяУПРУчетВЧастиЗатратИОС
       	////ВадимКонец
        Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДока   = Дата;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		НаборДвижений = Движения.ТоварыНаСкладах;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Склад = СтруктураШапкиДокумента.Склад;
		СтрокаДвижений.Номенклатура = СтруктураШапкиДокумента.Номенклатура;
		СтрокаДвижений.ХарактеристикаНоменклатуры = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;
		СтрокаДвижений.СерияНоменклатуры = СтруктураШапкиДокумента.СерияНоменклатуры;
		СтрокаДвижений.Качество = Справочники.Качество.Новый;
		СтрокаДвижений.Количество = ТаблицаПоОС.Количество();
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		//---------------------------------------------
		Если Не Отказ Тогда
			Движения.ТоварыНаСкладах.ВыполнитьРасход();
		Иначе
			Возврат;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.СписыватьПриПринятииКУчету Тогда
			
			ТаблицаОССписанныхНаЗатратыУпр = ТаблицаПоОС.Скопировать();
			ТаблицаОССписанныхНаЗатратыУпр.Колонки.СуммаОС_УУ.Имя = "Сумма";
			ТаблицаОССписанныхНаЗатратыУпр.Колонки.ОсновноеСредство.Имя = "ОбъектУчета";
			ТаблицаОССписанныхНаЗатратыУпр.Свернуть("ОбъектУчета", "Сумма");
			
			ТаблицаОССписанныхНаЗатратыУпр.Колонки.Добавить("НаправлениеАмортизации");
			ТаблицаОССписанныхНаЗатратыУпр.ЗаполнитьЗначения(СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации, "НаправлениеАмортизации");
			
			// далее нужно распределить суммы по направлениям начисления амортизации
			ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТаблицаОССписанныхНаЗатратыУпр, СтруктураШапкиДокумента);
			
		КонецЕсли;
		
		НоменклатураОС = Движения.НоменклатураОсновныхСредств;
		
		Для Каждого Строка Из ТаблицаПоОС Цикл
			
			Движение = НоменклатураОС.Добавить();
			
			Движение.Период           = ДатаДока;
			Движение.ОсновноеСредство = Строка.ОсновноеСредство;
			Движение.Номенклатура     = СтруктураШапкиДокумента.Номенклатура;
			Движение.Характеристика   = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;
			
		КонецЦикла;
		
  //начало изменений БП 07 		
	ИначеЕсли НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ 
	и не НеведетсяУПРУчетВЧастиЗатратИОС
 	Тогда
    //конец изменений БП 07	 
		// не оборудование
		
		// движения по регистру АмортизацияОС
		АмортизацияОС               = Движения.СтоимостьОС;
		ТаблицаДвиженийАмортизация  = АмортизацияОС.Выгрузить();
		
		Для Каждого Строка Из ТаблицаПоОС Цикл
			
			ТекОС = Строка.ОсновноеСредство;
			
			// Движения по регистру СтоимостьОС
			Движение = ТаблицаДвиженийАмортизация.Добавить();
			
			Движение.ОсновноеСредство = ТекОС;
			Движение.Амортизация      = 0;
			Движение.Стоимость        = Строка.СуммаОС_УУ;
			
		КонецЦикла;
		
		АмортизацияОС.мПериод = ДатаДока;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОС.ВыполнитьПриход();
		
	КонецЕсли;
	
	// спишем сумму с регистра объектов строительства
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		
		СтроительствоОС = Движения.СтроительствоОбъектовОсновныхСредств;
		
		ТаблицаДвиженийСтроительствоОС = СтроительствоОС.Выгрузить();
		
		Движение = ТаблицаДвиженийСтроительствоОС.Добавить();
		Движение.ОбъектСтроительства = СтруктураШапкиДокумента.ОбъектСтроительства;
		Движение.Сумма               = СтруктураШапкиДокумента.Стоимость;
		
		СтроительствоОС.мПериод = ДатаДока;
		СтроительствоОС.мТаблицаДвижений = ТаблицаДвиженийСтроительствоОС;
		Движения.СтроительствоОбъектовОсновныхСредств.ВыполнитьРасход();
		
		// ДВИЖЕНИЯ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
			?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
			СтруктураШапкиДокумента, 
			Отказ, 
			ТаблицаПоОС, 
			Неопределено, 
			Неопределено, 
			СтруктураШапкиДокумента.ОтражатьВУправленческомУчете,
			ЛОЖЬ,
			ЛОЖЬ);
			

	КонецЕсли;
//начало изменений БП 07 
Если Не НеведетсяУПРУчетВЧастиЗатратИОС тогда
	Если НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ 
		//начало изменений БП 07 
		/////Вадим 09.10.2013 15:03:27
        //и не НеведетсяУПРУчетВЧастиЗатратИОС
       	////ВадимКонец
		//конец изменений БП 07	 
		Тогда	
		
		// движения по регистрам, общим для всех видов операции
		ГрафикиАмортизацииОС   = Движения.ГрафикиАмортизацииОС;
		МестонахождениеОС      = Движения.МестонахождениеОС;
		НаправлениеАмортизации = Движения.СпособыОтраженияРасходовПоАмортизацииОС;
		НачислениеАмортизации  = Движения.НачислениеАмортизацииОС;
		ПервоначальныеСведения = Движения.ПервоначальныеСведенияОС;
		ПараметрыАмортизации   = Движения.ПараметрыАмортизацииОС;
		СобытиеОС              = Движения.СобытияОС;
		СостояниеОС            = Движения.СостоянияОС;
		СоставОС               = Движения.СоставОС;
		
		Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда
			АмортизируетсяПоГрафику = ЗначениеЗаполнено(СтруктураШапкиДокумента.ИндивидуальныйГрафикАмортизации);
		Иначе
			АмортизируетсяПоГрафику= ЗначениеЗаполнено(СтруктураШапкиДокумента.ГрафикАмортизацииПоГодуУУ);
		КонецЕсли;
		
		ВходитВСоставОсновногоСредства = ЗначениеЗаполнено(СтруктураШапкиДокумента.СоставОсновногоСредства);
		
		УказаноМестонахождение = ЗначениеЗаполнено(СтруктураШапкиДокумента.Подразделение)
		                         ИЛИ ЗначениеЗаполнено(СтруктураШапкиДокумента.МОЛУУ);
								 
		УказаныСпособыОтраженияРасходовПоАмортизации = ЗначениеЗаполнено(СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации);
								 
		Для Каждого Строка Из ОсновныеСредства Цикл
			
			ТекОС = Строка.ОсновноеСредство;
			СтрокаТабОС = ТаблицаПоОС.Найти( ТекОС, "ОсновноеСредство");
			
			// Движения по регистру ГрафикиАмортизацииОС
			Если АмортизируетсяПоГрафику Тогда
			
				Движение = ГрафикиАмортизацииОС.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				
				Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда
					ТекГрафик = СтруктураШапкиДокумента.ИндивидуальныйГрафикАмортизации;
				Иначе
					ТекГрафик = СтруктураШапкиДокумента.ГрафикАмортизацииПоГодуУУ;
				КонецЕсли;
				Движение.ГрафикАмортизации           = ТекГрафик;
				
			КонецЕсли;
			
			// Движения по регистру МестонахождениеОС
			Если УказаноМестонахождение Тогда
			
				Движение = МестонахождениеОС.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Местонахождение             = СтруктураШапкиДокумента.Подразделение;
				Движение.МОЛ                         = СтруктураШапкиДокумента.МОЛУУ;
				
			КонецЕсли;
			
			// Движения по регистру СпособыОтраженияРасходовПоАмортизацииОС
			Если УказаныСпособыОтраженияРасходовПоАмортизации Тогда
			
				Движение = НаправлениеАмортизации.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;
				
			КонецЕсли;
			
			// Движения по регистру НачислениеАмортизации
			Движение = НачислениеАмортизации.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.НачислятьАмортизацию        = СтруктураШапкиДокумента.НачислятьАмортизациюУУ;
			Движение.НачислятьАмортизациюВТекущемМесяце = СтруктураШапкиДокумента.НачислятьАмортизациюВТекущемМесяце;
			
			// Движения по регистру ПервоначальныеСведенияОС
			Движение = ПервоначальныеСведения.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.ПервоначальнаяСтоимость     = СтрокаТабОС.СуммаОС_УУ;
			Движение.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииУУ;
			Движение.ПараметрВыработки = СтруктураШапкиДокумента.ПараметрВыработкиУУ;
			
			// Движения по регистру ПараметрыАмортизации
			Если Не СписыватьПриПринятииКУчету Тогда
				Движение = ПараметрыАмортизации.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.КоэффициентАмортизации      = СтруктураШапкиДокумента.ГодоваяНормаАмортизацииУУ;
				Движение.КоэффициентУскорения        = СтруктураШапкиДокумента.КоэффициентУскоренияУУ;
				Движение.ОбъемПродукцииРабот         = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииУУ;
				Движение.ПрименитьВТекущемМесяце     = СтруктураШапкиДокумента.НачислятьАмортизациюВТекущемМесяце;
				Движение.СрокПолезногоИспользования  = СтруктураШапкиДокумента.СрокПолезногоИспользованияУУ;
				Движение.СрокИспользованияДляВычисленияАмортизации   = СтруктураШапкиДокумента.СрокПолезногоИспользованияУУ;
				Движение.СтоимостьДляВычисленияАмортизации           = СтрокаТабОС.СуммаОС_УУ;
				Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииУУ;
			КонецЕсли;
			
			// Движения по регистру СобытиеОС
			Движение = СобытиеОС.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.Событие                     = СтруктураШапкиДокумента.СобытиеПринятиеКУчету;
			Движение.НазваниеДокумента 		   	 = Метаданные().Представление();
			Движение.НомерДокумента    		   	 = Номер;
			
			Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию Тогда
				Движение = СобытиеОС.Добавить();
				Движение.Период                  = ДатаДока;
				Движение.ОсновноеСредство        = ТекОС;
				Движение.Событие                 = СтруктураШапкиДокумента.СобытиеВводВЭксплуатацию;
				Движение.НазваниеДокумента 		 = Метаданные().Представление();
				Движение.НомерДокумента    		 = Номер;
			КонецЕсли;
			
			// Движения по регистру СостоянияОС
			Движение = СостояниеОС.Добавить();
			Движение.Период                      = ДатаДока;
			Движение.ОсновноеСредство            = ТекОС;
			Движение.Состояние                   = Перечисления.СостоянияОС.ПринятоКУчету;
			Движение.ДатаСостояния				 = ДатаДока;
			
			Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию Тогда
				
				Движение = СостояниеОС.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Состояние                   = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
				Движение.ДатаСостояния				 = ДатаДока;
				
			КонецЕсли;
			
			
			// Движения по регистру СоставОС
			Если ВходитВСоставОсновногоСредства Тогда
			
				Движение = СоставОС.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.ВСоставе                    = СтруктураШапкиДокумента.СоставОсновногоСредства;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		НаборДвижений = Движения.ТоварыНаСкладах;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Склад = СтруктураШапкиДокумента.СкладМПЗ;
		СтрокаДвижений.Номенклатура = СтруктураШапкиДокумента.НоменклатураМПЗ;
		СтрокаДвижений.ХарактеристикаНоменклатуры = СтруктураШапкиДокумента.ХарактеристикаМПЗ;
		СтрокаДвижений.СерияНоменклатуры = СтруктураШапкиДокумента.СерияМПЗ;
		СтрокаДвижений.Качество = Справочники.Качество.Новый;
		СтрокаДвижений.Количество = ТаблицаПоОС.Количество();
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ТоварыНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
		
	КонецЕсли;
КонецеслИ;
//начало изменений БП 07 
	
КонецПроцедуры // ФормированиеДвиженийУпр()

Процедура ДвиженияПоРегистрамСобытийИСостоянийРегл(СтруктураШапкиДокумента, СобытиеОС, СостояниеОС, ТекОС, ДатаДока)
	
	// Движения по регистру СобытияОСОрганизаций
	Движение = СобытиеОС.Добавить();
	Движение.Период                    = ДатаДока;
	Движение.ОсновноеСредство          = ТекОС;
	Движение.Организация               = СтруктураШапкиДокумента.Организация;
	Движение.Событие                   = СтруктураШапкиДокумента.СобытиеПринятиеКУчетуРегл;
	Движение.НазваниеДокумента 		   = Метаданные().Представление();
	Движение.НомерДокумента    		   = Номер;
	
	

	Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл Тогда

		Движение = СобытиеОС.Добавить();
		Движение.Период                = ДатаДока;
		Движение.ОсновноеСредство      = ТекОС;
		Движение.Организация           = СтруктураШапкиДокумента.Организация;
		Движение.Событие               = СтруктураШапкиДокумента.СобытиеВводВЭксплуатациюРегл;
		Движение.НазваниеДокумента 	   = Метаданные().Представление();
		Движение.НомерДокумента    	   = Номер;

	КонецЕсли;
				
	// Движения по регистру СостоянияОСОрганизаций
	Движение = СостояниеОС.Добавить();
	Движение.Период                     = ДатаДока;
	Движение.ОсновноеСредство           = ТекОС;
	Движение.Организация                = СтруктураШапкиДокумента.Организация;
	Движение.Состояние                  = Перечисления.СостоянияОС.ПринятоКУчету;
	Движение.ДатаСостояния				= ДатаДока;
				
	Если СтруктураШапкиДокумента.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл Тогда
					
		Движение = СостояниеОС.Добавить();
		Движение.Период                      = ДатаДока;
		Движение.ОсновноеСредство            = ТекОС;
		Движение.Организация                 = СтруктураШапкиДокумента.Организация;
		Движение.Состояние                   = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
		Движение.ДатаСостояния				 = ДатаДока;
		
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоОтражениюАктиваВСоставеМПЗ(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок)
	
	НаборДвижений = Движения.ТоварыОрганизаций;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.Организация = Организация;
	СтрокаДвижений.Номенклатура = СтруктураШапкиДокумента.НоменклатураМПЗ;
	СтрокаДвижений.ХарактеристикаНоменклатуры = СтруктураШапкиДокумента.ХарактеристикаМПЗ;
	СтрокаДвижений.СерияНоменклатуры = СтруктураШапкиДокумента.СерияМПЗ;
	СтрокаДвижений.Качество = Справочники.Качество.Новый;
	СтрокаДвижений.Количество = ТаблицаПоОС.Количество();
	
	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		СтрокаДвижений.Склад =  Неопределено;
	Иначе
		СтрокаДвижений.Склад =  СтруктураШапкиДокумента.СкладМПЗ;
	КонецЕсли;
		
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	//---------------------------------------------
	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьПриход();
	КонецЕсли;
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	Если НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		
		СуммаПроводки = ТаблицаПоОС.Итог("СуммаОС_БУ") - ТаблицаПоОС.Итог("СуммаОС_БУ_Хоз");
		
		Если НЕ СуммаПроводки = 0 Тогда
		
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.НомерЖурнала = "ОС";
			Проводка.Содержание   = "Оприходованы МПЗ";
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.КоличествоДт = ТаблицаПоОС.Количество();
			
			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаМПЗБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтруктураШапкиДокумента.НоменклатураМПЗ);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.СкладМПЗ);
			
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
			
		КонецЕсли;
		
		СуммаПроводки = ТаблицаПоОС.Итог("СуммаОС_БУ_Хоз");
		
		Если НЕ СуммаПроводки = 0 Тогда
		
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.НомерЖурнала = "ОС";
			Проводка.Содержание   = "Оприходованы МПЗ";
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.КоличествоДт = ТаблицаПоОС.Количество();
			
			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаМПЗБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтруктураШапкиДокумента.НоменклатураМПЗ);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.СкладМПЗ);
			
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
			
		КонецЕсли;
		
		// ДВИЖЕНИЯ ПО РЕГИСТРУ ПартииТоваровНаСкладахБухгалтерскийУчет.
		УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
			?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
			СтруктураШапкиДокумента, 
			Отказ, 
			ТаблицаПоОС, 
			Неопределено, 
			Неопределено, 
			ЛОЖЬ,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
			ЛОЖЬ);
		
		// Отражение принятия ОС к учету в подсистеме НДС
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоОтражениюАктиваВСоставеМПЗ()

Процедура ДвиженияПоРегиструТоварыОрганизаций(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ)
	
	НаборДвижений = Движения.ТоварыОрганизаций;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.Организация				  = СтруктураШапкиДокумента.Организация;
	СтрокаДвижений.Номенклатура				  = СтруктураШапкиДокумента.Номенклатура;
	СтрокаДвижений.ХарактеристикаНоменклатуры = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;
	СтрокаДвижений.СерияНоменклатуры		  = СтруктураШапкиДокумента.СерияНоменклатуры;
	СтрокаДвижений.Качество					  = Справочники.Качество.Новый;
	СтрокаДвижений.Количество				  = ТаблицаПоОС.Количество();
	
	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		СтрокаДвижений.Склад =  Неопределено;
	Иначе
		СтрокаДвижений.Склад =  СтруктураШапкиДокумента.Склад;
	КонецЕсли;
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры

//начало изменений
Процедура ПРГ_СформироватьДопДвиженияБУ(СтруктураШапкиДокумента,СобытиеОС,СостояниеОС,АмортизацияОС,НачислениеАмортизации);
	
		Движение = СостояниеОС.Добавить();
		Движение.Период                      = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство            = СтруктураШапкиДокумента.ПРГ_ОсновноеСредство;
		Движение.Организация                 = СтруктураШапкиДокумента.Организация;
		Движение.Состояние                   = Перечисления.СостоянияОС.СнятоСУчета;
		Движение.ДатаСостояния				 = СтруктураШапкиДокумента.Дата;
		
		Движение = СобытиеОС.Добавить();
		Движение.Период                = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство      = СтруктураШапкиДокумента.ПРГ_ОсновноеСредство;
		Движение.Организация           = СтруктураШапкиДокумента.Организация;
		Движение.Событие               = СтруктураШапкиДокумента.СобытиеРазукомплектации;
		Движение.НазваниеДокумента 	   = Метаданные().Представление();
		Движение.НомерДокумента    	   = Номер;
		
		Движение = НачислениеАмортизации.Добавить();
		Движение.Период                      = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство            = СтруктураШапкиДокумента.ПРГ_ОсновноеСредство;
		Движение.Организация                 = СтруктураШапкиДокумента.Организация;
		Движение.НачислятьАмортизацию        = Ложь;
		
		Движение = АмортизацияОС.Добавить();
		Движение.Период 		  = СтруктураШапкиДокумента.Дата;
		Движение.Активность	      = Истина;
		Движение.ВидДвижения 	  = ВидДвиженияНакопления.Расход;
		Движение.Организация      = СтруктураШапкиДокумента.Организация;
		Движение.ОсновноеСредство = СтруктураШапкиДокумента.ПРГ_ОсновноеСредство;
		Движение.Амортизация      = СтруктураШапкиДокумента.АмортизацияБУ;
		Движение.Стоимость        = СтруктураШапкиДокумента.СтоимостьБУ;
		Движение.ВидОперации      = Перечисления.ВидыСобытийОС.Списание;
		
	
КонецПроцедуры	
//конец изменений 
// Процедура формирования движений регл. регистров
//
Процедура ФормированиеДвиженийРегл(РежимПроведения,СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплат, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;

	ДатаДока       = Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	//Вадим
	движениеПОИМНС();
	//ВадимКонец
	СобытиеОС      = Движения.СобытияОСОрганизаций;
	СостояниеОС    = Движения.СостоянияОСОрганизаций;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
		
		Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
			
			ДвиженияПоОтражениюАктиваВСоставеМПЗ(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
			
		Иначе
		
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
				
				Если СтруктураШапкиДокумента.СписыватьПриПринятииКУчету Тогда
				
					ТаблицаОССписанныхНаЗатратыБух = ТаблицаПоОС.Скопировать();
					ТаблицаОССписанныхНаЗатратыБух.Колонки.СуммаОС_БУ.Имя = "Сумма";
					ТаблицаОССписанныхНаЗатратыБух.Колонки.ОсновноеСредство.Имя = "ОбъектУчета";
					ТаблицаОССписанныхНаЗатратыБух.Свернуть("ОбъектУчета", "Сумма,СуммаОС_ПР");
					
					ТаблицаОССписанныхНаЗатратыБух.Колонки.Добавить("НаправлениеАмортизации");
					ТаблицаОССписанныхНаЗатратыБух.ЗаполнитьЗначения(СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации, "НаправлениеАмортизации");
					ТаблицаОССписанныхНаЗатратыБух.Колонки.Добавить("СчетАмортизации");
					ТаблицаОССписанныхНаЗатратыБух.ЗаполнитьЗначения(СчетУчетаБУ,"СчетАмортизации");
					ТаблицаОССписанныхНаЗатратыБух.Колонки.Добавить("СчетАмортизацииНУ");
					ТаблицаОССписанныхНаЗатратыБух.Колонки.Добавить("ИмяСубконто");
					ТаблицаОССписанныхНаЗатратыБух.ЗаполнитьЗначения("ОсновныеСредства", "ИмяСубконто");
					
					// далее нужно распределить суммы по направлениям начисления амортизации
					ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаОССписанныхНаЗатратыБух, СтруктураШапкиДокумента, "Бух", "ОС", "Списание стоимости объекта ОС");
					
				КонецЕсли;

			Иначе // не оборудование

				//Заполним таблицу значений для проведения по регистрам, не зависящим от вида операции и сделаем 
				// движения по регистру СтоимостьОСБухгалтерскийУчет
				АмортизацияОС               = Движения.СтоимостьОСБухгалтерскийУчет;
				ТаблицаДвиженийАмортизация  = АмортизацияОС.Выгрузить();
				Для Каждого Строка Из ТаблицаПоОС Цикл
					ТекОС = Строка.ОсновноеСредство;

					// Движения по регистру СтоимостьОС
					Движение = ТаблицаДвиженийАмортизация.Добавить();
					Движение.Организация      = ТекОрганизация;
					Движение.ОсновноеСредство = ТекОС;
					Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.РазукомплектацияОС Тогда
						Движение.Амортизация      = Строка.СуммаАмортизации_БУ;
					Иначе	
						Движение.Амортизация      = 0;
					КонецЕсли;	
					
					Движение.Стоимость        = Строка.СуммаОС_БУ;
					Движение.ВидОперации      = Перечисления.ВидыСобытийОС.ПринятиеКУчету;

				КонецЦикла;

				АмортизацияОС.мПериод = ДатаДока;
				АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
				Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();

			КонецЕсли;

			ГрафикиАмортизации     = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
			МестонахождениеОС      = Движения.МестонахождениеОСБухгалтерскийУчет;
			НаправлениеАмортизации = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
			НачислениеАмортизации  = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
			ПервоначальныеСведения = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
			ПараметрыАмортизации   = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
			СобытиеОС	           = Движения.СобытияОСОрганизаций;
			СостояниеОС            = Движения.СостоянияОСОрганизаций;
			АмортизацияОС          = Движения.СтоимостьОСБухгалтерскийУчет;
			СчетаУчетаОС           = Движения.СчетаБухгалтерскогоУчетаОС;
			ПроводкиБУ             = Движения.Хозрасчетный;

			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.РазукомплектацияОС Тогда
				   ПРГ_СформироватьДопДвиженияБУ(СтруктураШапкиДокумента,СобытиеОС,СостояниеОС,АмортизацияОС,НачислениеАмортизации);
			КонецЕсли;	
			
			АмортизируетсяПоГрафику                      = ЗначениеЗаполнено(СтруктураШапкиДокумента.ГрафикАмортизацииПоГодуБУ);
			УказаноМестонахождение                       = ЗначениеЗаполнено(СтруктураШапкиДокумента.ПодразделениеОрганизации)
			                                               ИЛИ ЗначениеЗаполнено(СтруктураШапкиДокумента.МОЛБУ);
			УказаныСпособыОтраженияРасходовПоАмортизации = ЗначениеЗаполнено(СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации);
			
			Для Каждого Строка Из ОсновныеСредства Цикл

				ТекОС = Строка.ОсновноеСредство;
				СтрокаТабОС = ТаблицаПоОС.Найти( ТекОС, "ОсновноеСредство");

				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда

					Если (СтрокаТабОС.СуммаОС_БУ - СтрокаТабОС.СуммаОС_БУ_Хоз) > 0 Тогда

						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.НомерЖурнала = "ОС";
						Проводка.Содержание   = "Списана стоим. внеоб. актива";
						Проводка.Сумма        = СтрокаТабОС.СуммаОС_БУ - СтрокаТабОС.СуммаОС_БУ_Хоз - ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, СтрокаТабОС.СуммаОС_НДС, 0);

						Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

						Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);

					КонецЕсли;

					Если СтрокаТабОС.СуммаОС_БУ_Хоз > 0 Тогда

						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.НомерЖурнала = "ОС";
						Проводка.Содержание   = "Списана стоим. внеоб. актива";
						Проводка.Сумма        = СтрокаТабОС.СуммаОС_БУ_Хоз;

						Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

						Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);

					КонецЕсли;
				//начало изменений 	
				ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.РазукомплектацияОС Тогда
					
					Если (СтрокаТабОС.СуммаОС_БУ) > 0 Тогда

						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.НомерЖурнала = "ОС";
						Проводка.Содержание   = "Списана стоим. ос.";
						Проводка.Сумма        = СтрокаТабОС.СуммаОС_БУ;

						Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

						Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтруктураШапкиДокумента.ПРГ_ОсновноеСредство);
						
					КонецЕсли;
					
					Если (СтрокаТабОС.СуммаАмортизации_БУ) > 0 Тогда

						Проводка = ПроводкиБУ.Добавить();
						Проводка.Период       = ДатаДока;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.НомерЖурнала = "ОС";
						Проводка.Содержание   = "Списана амортизация ос";
						Проводка.Сумма        = СтрокаТабОС.СуммаАмортизации_БУ;

						Проводка.СчетДт       = СтруктураШапкиДокумента.СчетАмортизацииБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтруктураШапкиДокумента.ПРГ_ОсновноеСредство);

						Проводка.СчетКт       = СтруктураШапкиДокумента.СчетНачисленияАмортизацииБУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
						
					КонецЕсли;
					
					
				//конец изменений 
				КонецЕсли;

				// Движения по регистру ГрафикиАмортизацииОС
				Если АмортизируетсяПоГрафику Тогда
					
					Движение = ГрафикиАмортизации.Добавить();
					Движение.Период                      = ДатаДока;
					Движение.ОсновноеСредство            = ТекОС;
					Движение.Организация                 = ТекОрганизация;
					Движение.ГрафикАмортизации           = СтруктураШапкиДокумента.ГрафикАмортизацииПоГодуБУ;
					
				КонецЕсли;

				// Движения по регистру МестонахождениеОС
				Если УказаноМестонахождение Тогда
					
					Движение = МестонахождениеОС.Добавить();
					Движение.Период                      = ДатаДока;
					Движение.ОсновноеСредство            = ТекОС;
					Движение.Организация                 = ТекОрганизация;
					Движение.Местонахождение             = СтруктураШапкиДокумента.ПодразделениеОрганизации;
					Движение.МОЛ                         = СтруктураШапкиДокумента.МОЛБУ;
					/////Вадим 12.12.2013 12:38:14  бп 7
	                Движение.Пользователь                = Пользователь;
	 				////ВадимКонец
	 
					
					
				КонецЕсли;

				// Движения по регистру СпособыОтраженияРасходовПоАмортизацииОС
				Если УказаныСпособыОтраженияРасходовПоАмортизации Тогда
				
					Движение = НаправлениеАмортизации.Добавить();
					Движение.Период                      = ДатаДока;
					Движение.ОсновноеСредство            = ТекОС;
					Движение.Организация                 = ТекОрганизация;
					Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;
				
				КонецЕсли;

				// Движения по регистру НачислениеАмортизации
				Движение = НачислениеАмортизации.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Организация                 = ТекОрганизация;
				Движение.НачислятьАмортизацию        = СтруктураШапкиДокумента.НачислятьАмортизациюБУ;

				// Движения по регистру ПервоначальныеСведенияОС
				Движение = ПервоначальныеСведения.Добавить();
				Движение.Период                      = ДатаДока;
				Движение.ОсновноеСредство            = ТекОС;
				Движение.Организация                 = ТекОрганизация;
				Движение.ПервоначальнаяСтоимость     = СтрокаТабОС.СуммаОС_БУ;
				Движение.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ;
				Движение.СпособПоступления           = СтруктураШапкиДокумента.СпособПоступления;
				ТекСтрокаОС = ТаблицаПоОС.Найти(ТекОС,"ОсновноеСредство");
				Движение.ИнвентарныйНомер = ?(ТекСтрокаОС = Неопределено,Неопределено,ТекСтрокаОС.ИнвентарныйНомер);
				Движение.ПараметрВыработки = СтруктураШапкиДокумента.ПараметрВыработкиБУ;

				// Движения по регистру ПараметрыАмортизации
				Если Не СписыватьПриПринятииКУчету Тогда
					Движение = ПараметрыАмортизации.Добавить();
					Движение.Период                                      = ДатаДока;
					Движение.ОсновноеСредство                            = ТекОС;
					Движение.Организация                                 = ТекОрганизация;
					Движение.КоэффициентАмортизации                      = СтруктураШапкиДокумента.ГодоваяНормаАмортизацииБУ;
					Движение.КоэффициентУскорения                        = СтруктураШапкиДокумента.КоэффициентУскоренияБУ;
					Движение.ОбъемПродукцииРабот                         = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииБУ;
					Движение.СрокПолезногоИспользования                  = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
					Движение.СрокИспользованияДляВычисленияАмортизации   = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
					Движение.СтоимостьДляВычисленияАмортизации           = СтрокаТабОС.СуммаОС_БУ;
					Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтруктураШапкиДокумента.ПредполагаемыйОбъемПродукцииБУ;
				КонецЕсли;

				ДвиженияПоРегистрамСобытийИСостоянийРегл(СтруктураШапкиДокумента, СобытиеОС, СостояниеОС, ТекОС, ДатаДока);
				
				// Движения по регистру СчетаБухгалтерскогоУчетаОС
				Движение = СчетаУчетаОС.Добавить();
				Движение.Период                    = ДатаДока;
				Движение.ОсновноеСредство          = ТекОС;
				Движение.Организация               = ТекОрганизация;
				Движение.СчетУчета                 = СтруктураШапкиДокумента.СчетУчетаБУ;
				Движение.СчетНачисленияАмортизации = СтруктураШапкиДокумента.СчетНачисленияАмортизацииБУ;

			КонецЦикла;
			

			// Отражение принятия ОС к учету в подсистеме НДС
			ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
			
		КонецЕсли;

	КонецЕсли;

	ТЗДанныеОС = Новый ТаблицаЗначений;
	ТЗДанныеОС.Колонки.Добавить("ОбъектУчета");
	ТЗДанныеОС.Колонки.Добавить("Сумма");
	ТЗДанныеОС.Колонки.Добавить("СуммаХоз");
	ТЗДанныеОС.Колонки.Добавить("СуммаПР");
	ТЗДанныеОС.Колонки.Добавить("СуммаПРХоз");
	ТЗДанныеОС.Колонки.Добавить("СуммаВР");
	ТЗДанныеОС.Колонки.Добавить("СуммаВРХоз");
	ТЗДанныеОС.Колонки.Добавить("СуммаВРМинус");
	ТЗДанныеОС.Колонки.Добавить("СуммаКапитальныхВложений");
	СписатьВБУИВНУ = (СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету 
		И СтруктураШапкиДокумента.СписыватьПриПринятииКУчету);		

	// Отражение в налоговом учете.
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
		
		// Признак заполнения сведений об объекте ОС в регистрах сведений.
        ОтражатьВРегистрахНУ = Истина;
		
		
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Регистратор", Ссылка);
			Запрос.УстановитьПараметр("Вид",         ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
			Запрос.УстановитьПараметр("ВидУчетаНУ",  Перечисления.ВидыУчетаПоПБУ18.НУ);
			Запрос.УстановитьПараметр("ВидУчетаПР",  Перечисления.ВидыУчетаПоПБУ18.ПР);
			Запрос.УстановитьПараметр("ВидУчетаВР",  Перечисления.ВидыУчетаПоПБУ18.ВР);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НалоговыйСубконто.Значение КАК ОбъектУчета,
			|	СУММА(ВЫБОР КОГДА Налоговый.ВидУчетаДт = &ВидУчетаНУ ТОГДА Налоговый.Сумма ИНАЧЕ 0 КОНЕЦ) КАК Сумма,
			|	СУММА(ВЫБОР	КОГДА Налоговый.ВидУчетаДт = &ВидУчетаНУ ТОГДА -Налоговый.Сумма	ИНАЧЕ 0	КОНЕЦ) КАК СуммаВРМинус,
			|	СУММА(ВЫБОР	КОГДА Налоговый.ВидУчетаДт = &ВидУчетаПР ТОГДА Налоговый.Сумма ИНАЧЕ 0 КОНЕЦ) КАК СуммаПР,
			|	СУММА(ВЫБОР	КОГДА Налоговый.ВидУчетаДт = &ВидУчетаВР ТОГДА Налоговый.Сумма ИНАЧЕ 0 КОНЕЦ) КАК СуммаВР,
			|	0 КАК СуммаХоз,
			|	0 КАК СуммаПРХоз,
			|	0 КАК СуммаВРХоз,
			|	0 КАК СуммаКапитальныхВложений
			|ИЗ
			|	РегистрБухгалтерии.Налоговый КАК Налоговый
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Субконто КАК НалоговыйСубконто
			|		ПО Налоговый.Регистратор = НалоговыйСубконто.Регистратор
			|			И Налоговый.НомерСтроки = НалоговыйСубконто.НомерСтроки
			|ГДЕ
			|	Налоговый.Регистратор = &Регистратор
			|	И Налоговый.Активность
			|	И НалоговыйСубконто.Вид = &Вид
			|
			|СГРУППИРОВАТЬ ПО
			|	НалоговыйСубконто.Значение";
			
			Если Не СписатьВБУИВНУ Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВЫБОР КОГДА Налоговый.ВидУчетаДт = &ВидУчетаПР ТОГДА Налоговый.Сумма ИНАЧЕ 0 КОНЕЦ", "0");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВЫБОР КОГДА Налоговый.ВидУчетаДт = &ВидУчетаВР ТОГДА Налоговый.Сумма ИНАЧЕ 0 КОНЕЦ", "0");
			КонецЕсли;
			
			ТЗДанныеОС = Запрос.Выполнить().Выгрузить();
			
			Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
				
				ТЗДанныеОС.Колонки.Добавить("НаправлениеАмортизации");
				ТЗДанныеОС.ЗаполнитьЗначения(СтруктураШапкиДокумента.СпособОтраженияРасходовПриВключенииВСтоимость, "НаправлениеАмортизации");
				ТЗДанныеОС.Колонки.Добавить("СчетАмортизацииНУ");
				ТЗДанныеОС.ЗаполнитьЗначения(СчетУчетаНУ,"СчетАмортизацииНУ");
				ТЗДанныеОС.Колонки.Добавить("СчетАмортизации");
				ТЗДанныеОС.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
				ТЗДанныеОС.ЗаполнитьЗначения("ОсновныеСредства", "ИмяСубконто");
				ТЗДанныеОС.Колонки.Добавить("СуммаБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
                ТЗДанныеОС.Колонки.СуммаПР.Имя = "СуммаПостоянныхРазниц";
				ТЗДанныеОС.Колонки.Добавить("СуммаПР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				
				// Распредение стоимости по направлениям начисления амортизации.
				ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТЗДанныеОС, СтруктураШапкиДокумента, "Нал", "ОС", "Списание стоимости объекта ОС");
				ТЗДанныеОС.Колонки.Удалить("СуммаПР");
				ТЗДанныеОС.Колонки.СуммаПостоянныхРазниц.Имя = "СуммаПР";

				Для Каждого ТЗДанныеОССтрока ИЗ ТЗДанныеОС Цикл
				
					// Движения по регистру ПеровначальныеСведенияОСНалоговый учет
					Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчет.Добавить();
					Движение.Период                                   = ДатаДока;
					Движение.ОсновноеСредство                         = ТЗДанныеОССтрока.ОбъектУчета;
					Движение.Организация                              = ТекОрганизация;
					//начало изменений 
					//Движение.ПервоначальнаяСтоимостьНУ                = СтрокаТабОС.СуммаОС_НУ;
					Движение.ПервоначальнаяСтоимостьНУ                = ТЗДанныеОССтрока.Сумма;
					//конец изменений 
					Движение.ПорядокВключенияСтоимостиВСоставРасходов = СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ;
					
				КонецЦикла;
				
				ТабЗатратПР = ТабЗатрат.Скопировать();
				ТабЗатратПР.Свернуть("ОбъектУчета", "ПостояннаяРазница");
				
                Для каждого ТабЗатратСтрока Из ТабЗатратПР Цикл
                    
                  СуммаПРвОценке = 0;  
                  ТЗДанныеОСПоОбъету = ТЗДанныеОС.НайтиСтроки(Новый Структура ("ОбъектУчета",ТабЗатратСтрока.ОбъектУчета));
                  Если Не ТЗДанныеОСПоОбъету = Неопределено И Не ТЗДанныеОСПоОбъету.Количество() = 0 Тогда
                      СуммаПРвОценке = ТЗДанныеОСПоОбъету[0].СуммаПР;
                  КонецЕсли;
				
					// Движения по регистру ПараметрыАмортизацииОСНалоговыйУчет
					Движение = Движения.ПараметрыАмортизацииОСНалоговыйУчет.Добавить();
					Движение.Период                     = ДатаДока;
					Движение.ОсновноеСредство           = ТабЗатратСтрока.ОбъектУчета;
					Движение.Организация                = ТекОрганизация;
					Движение.СрокПолезногоИспользования = 0;
					Движение.ПРДляВычисленияАмортизации = -ТабЗатратСтрока.ПостояннаяРазница + СуммаПРвОценке;
					
				КонецЦикла;
				
				// Объект не должен отражаться в составе ОС в НУ (в регистрах).
				ОтражатьВРегистрахНУ = Ложь;
				
			КонецЕсли;

		Иначе // не оборудование
			
			// Заполним таблицу значений для проведения по регистрам, не зависящим от вида операции и сделаем 
			// движения по регистру СтоимостьОСНалоговыйУчет
			АмортизацияОС = Движения.СтоимостьОСНалоговыйУчет;
			ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();

			Для Каждого Строка Из ОсновныеСредства Цикл

				ТекОС = Строка.ОсновноеСредство;
				СтрокаТабОС = ТаблицаПоОС.Найти( ТекОС, "ОсновноеСредство");

				//начало изменений
				Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ 
				  <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
				//конец изменений   
				
					// Движения по регистру СтоимостьОС
					Движение = ТаблицаДвиженийАмортизация.Добавить();
					Движение.Организация      = ТекОрганизация;
					Движение.ОсновноеСредство = ТекОС;
					//начало изменений 
					Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.РазукомплектацияОС Тогда
						Движение.Амортизация      = СтрокаТабОС.СуммаАмортизации_НУ;
					Иначе	
						Движение.Амортизация      = 0;
					КонецЕсли;	
					//конец изменений 
					Движение.Стоимость        = СтрокаТабОС.СуммаОС_НУ;
					Движение.ВидОперации      = Перечисления.ВидыСобытийОС.ПринятиеКУчету;
				//начало изменений
				КонецЕсли;
				//конец изменений

				НоваяСтрока = ТЗДанныеОС.Добавить();
				НоваяСтрока.ОбъектУчета = ТекОС;
				НоваяСтрока.Сумма       = СтрокаТабОС.СуммаОС_НУ;
				НоваяСтрока.СуммаХоз    = СтрокаТабОС.СуммаОС_НУ_Хоз;
				НоваяСтрока.СуммаПР     =  ?(СтруктураШапкиДокумента.ПоддержкаПБУ18 И СписатьВБУИВНУ, СтрокаТабОС.СуммаОС_ПР, 0);
				НоваяСтрока.СуммаПРХоз  =  ?(СтруктураШапкиДокумента.ПоддержкаПБУ18 И СписатьВБУИВНУ, СтрокаТабОС.СуммаОС_ПР_Хоз, 0);
				НоваяСтрока.СуммаВР     =  ?(СтруктураШапкиДокумента.ПоддержкаПБУ18 И СписатьВБУИВНУ, СтрокаТабОС.СуммаОС_ВР, 0);
				НоваяСтрока.СуммаВРХоз  =  ?(СтруктураШапкиДокумента.ПоддержкаПБУ18 И СписатьВБУИВНУ, СтрокаТабОС.СуммаОС_ВР_Хоз, 0);
				НоваяСтрока.СуммаВРМинус= ?(СтруктураШапкиДокумента.ПоддержкаПБУ18, - НоваяСтрока.Сумма - НоваяСтрока.СуммаХоз, 0);

			КонецЦикла;

			//начало изменений 
			Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ 
				  <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
            //конец изменений 
				АмортизацияОС.мПериод          = ДатаДока;
				АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
				Движения.СтоимостьОСНалоговыйУчет.ВыполнитьПриход();
				//начало изменений 
				Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.РазукомплектацияОС Тогда
					Движение = Движения.СтоимостьОСНалоговыйУчет.Добавить();
					Движение.Период 		  = СтруктураШапкиДокумента.Дата;
					Движение.Активность	      = Истина;
					Движение.ВидДвижения 	  = ВидДвиженияНакопления.Расход;
					Движение.Организация      = СтруктураШапкиДокумента.Организация;
					Движение.ОсновноеСредство =  СтруктураШапкиДокумента.ПРГ_ОсновноеСредство;
					Движение.Амортизация      = СтруктураШапкиДокумента.АмортизацияНУ;
					Движение.Стоимость        = СтруктураШапкиДокумента.СтоимостьНУ;
					Движение.ВидОперации      = Перечисления.ВидыСобытийОС.Списание;
					
					Движение =  Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
					Движение.Период                      = СтруктураШапкиДокумента.Дата;
					Движение.ОсновноеСредство            = СтруктураШапкиДокумента.ПРГ_ОсновноеСредство;
					Движение.Организация                 = СтруктураШапкиДокумента.Организация;
					Движение.НачислятьАмортизацию        = Ложь;
				КонецЕсли;	
			//начало изменений	
		  Иначе
				ОтражатьВРегистрахНУ = Ложь;
			КонецЕсли;	
			//конец изменений 
		КонецЕсли;
		
		// Рассчитаем сумму капитальных вложений, включаемых в расходы.
		Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
			Для Каждого СтрокаОС Из ТЗДанныеОС Цикл
				СтрокаОС.СуммаКапитальныхВложений = Окр(СтрокаОС.Сумма * (СтруктураШапкиДокумента.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ / 100), 2);
			КонецЦикла;
		КонецЕсли;

		Если ОтражатьВРегистрахНУ тогда
			
			ПервоначальныеСведения = Движения.ПервоначальныеСведенияОСНалоговыйУчет;
			СчетаУчетаОСНУ         = Движения.СчетаНалоговогоУчетаОС;
			
			Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
				
				НачислениеАмортизации  = Движения.НачислениеАмортизацииОСНалоговыйУчет;
				НаправлениеАмортизации = Движения.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет;
				ПараметрыАмортизации   = Движения.ПараметрыАмортизацииОСНалоговыйУчет;
				СпецКоэффициент        = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.СписыватьПриПринятииКУчету 
			И СтруктураШапкиДокумента.ПоддержкаПБУ18
			И Не СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
			
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Регистратор", Ссылка);
			Запрос.УстановитьПараметр("Вид",         ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
			Запрос.УстановитьПараметр("ВидУчетаПР",  Перечисления.ВидыУчетаПоПБУ18.ПР);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НалоговыйСубконто.Значение КАК ОбъектУчета,
			|	Налоговый.Сумма КАК СуммаПР
			|ИЗ
			|	РегистрБухгалтерии.Налоговый КАК Налоговый
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Субконто КАК НалоговыйСубконто
			|		ПО Налоговый.Регистратор = НалоговыйСубконто.Регистратор
			|			И Налоговый.НомерСтроки = НалоговыйСубконто.НомерСтроки
			|ГДЕ
			|	Налоговый.Регистратор = &Регистратор
			|	И Налоговый.Активность
			|	И НалоговыйСубконто.Вид = &Вид
			|	И Налоговый.ВидУчетаДт = &ВидУчетаПР";
			
			
			ТаблицаПоОСПР = Запрос.Выполнить().Выгрузить();
					
			ТаблицаОССписанныхНаЗатратыБух.Колонки.Добавить("СуммаПР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			ТаблицаОССписанныхНаЗатратыБух.Колонки.Добавить("СуммаБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			ТаблицаОССписанныхНаЗатратыБух.Колонки.Добавить("СуммаВР", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			
			Для Каждого Строка Из ТаблицаОССписанныхНаЗатратыБух Цикл
			СтрокаПР = ТаблицаПоОСПР.Найти(Строка.ОбъектУчета, "ОбъектУчета");
			
			Строка.СуммаПР = ?(СтрокаПР = Неопределено, 0, СтрокаПР.СуммаПР);
			Строка.СуммаБУ = Строка.Сумма;
			Строка.Сумма = 0;
			Строка.СчетАмортизацииНУ =  БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",Строка.СчетАмортизации), Ложь, Дата);
			КонецЦикла;
			
			// далее нужно распределить суммы по направлениям начисления амортизации
			ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаОССписанныхНаЗатратыБух, СтруктураШапкиДокумента, "Нал", "ОС", "Списание стоимости объекта ОС");
			
		КонецЕсли;
		
		
		ПроводкиНУ = Движения.Налоговый;
		Для Каждого Строка Из ОсновныеСредства Цикл

			ТекОС = Строка.ОсновноеСредство;
			СтрокаТабОС = ТаблицаПоОС.Найти(ТекОС, "ОсновноеСредство");

			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда

				Если (СтрокаТабОС.СуммаОС_НУ - СтрокаТабОС.СуммаОС_НУ_Хоз) > 0 Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СтрокаТабОС.СуммаОС_НУ - СтрокаТабОС.СуммаОС_НУ_Хоз;
					Проводка.Содержание  = "Принят к учету объект ОС";
					
					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
					
				КонецЕсли;
				
				Если СтрокаТабОС.СуммаОС_НУ_Хоз > 0 Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СтрокаТабОС.СуммаОС_НУ_Хоз;
					Проводка.Содержание  = "Принят к учету объект ОС";

					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
					
				КонецЕсли;

			
				Если (СтрокаТабОС.СуммаОС_ПР - СтрокаТабОС.СуммаОС_ПР_Хоз) <> 0 Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СтрокаТабОС.СуммаОС_ПР - СтрокаТабОС.СуммаОС_ПР_Хоз;
					Проводка.Содержание  = "Принят к учету объект ОС";
					
					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.Пр;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.Пр;

				КонецЕсли;
				
				Если СтрокаТабОС.СуммаОС_ПР_Хоз <> 0 Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СтрокаТабОС.СуммаОС_ПР_Хоз;
					Проводка.Содержание  = "Принят к учету объект ОС";

					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.Пр;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.Пр;
					
				КонецЕсли;
				Если (СтрокаТабОС.СуммаОС_ВР - СтрокаТабОС.СуммаОС_ВР_Хоз) <> 0 Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СтрокаТабОС.СуммаОС_ВР - СтрокаТабОС.СуммаОС_ВР_Хоз;
					Проводка.Содержание  = "Принят к учету объект ОС";
					
					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.Вр;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.Вр;

				КонецЕсли;
				
				Если СтрокаТабОС.СуммаОС_ВР_Хоз <> 0 Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СтрокаТабОС.СуммаОС_ВР_Хоз;
					Проводка.Содержание  = "Принят к учету объект ОС";

					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", СтруктураШапкиДокумента.ОбъектСтроительства);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Хозспособ);
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.Вр;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.Вр;
					
				КонецЕсли;
			//начало изменений 	
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.РазукомплектацияОС Тогда
			  	//ДТ 01 КТ 01
				Если (СтрокаТабОС.СуммаОС_НУ) > 0 Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СтрокаТабОС.СуммаОС_НУ;
					Проводка.Содержание  = "Принят к учету объект ОС";
					
					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтруктураШапкиДокумента.ПРГ_ОсновноеСредство);
					
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
				КонецЕсли;
				
				Если (СтрокаТабОС.СуммаОС_ВР) <> 0 Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СтрокаТабОС.СуммаОС_ВР;
					Проводка.Содержание  = "Принят к учету объект ОС";
					
					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтруктураШапкиДокумента.ПРГ_ОсновноеСредство);
					
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;
					
				КонецЕсли;
				
				Если (СтрокаТабОС.СуммаОС_ПР) <> 0 Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = ДатаДока;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СтрокаТабОС.СуммаОС_ПР;
					Проводка.Содержание  = "Принят к учету объект ОС";
					
					Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтруктураШапкиДокумента.ПРГ_ОсновноеСредство);
					
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					
				КонецЕсли;
				//Дт 02 Кт 02
				
				Если (СтрокаТабОС.СуммаАмортизации_НУ) > 0 Тогда

					Проводка = ПроводкиНУ.Добавить();
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.НомерЖурнала = "ОС";
					Проводка.Содержание   = "Списана амортизация ос";
					Проводка.Сумма        = СтрокаТабОС.СуммаАмортизации_НУ;

					Проводка.СчетДт       = СтруктураШапкиДокумента.СчетАмортизацииНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтруктураШапкиДокумента.ПРГ_ОсновноеСредство);

					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетНачисленияАмортизацииНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
				КонецЕсли;
				
				Если (СтрокаТабОС.СуммаАмортизации_ВР) <> 0 Тогда

					Проводка = ПроводкиНУ.Добавить();
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.НомерЖурнала = "ОС";
					Проводка.Содержание   = "Списана амортизация ос";
					Проводка.Сумма        = СтрокаТабОС.СуммаАмортизации_ВР;

					Проводка.СчетДт       = СтруктураШапкиДокумента.СчетАмортизацииНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтруктураШапкиДокумента.ПРГ_ОсновноеСредство);

					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетНачисленияАмортизацииНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;
					
				КонецЕсли;				
				
				
				Если (СтрокаТабОС.СуммаАмортизации_ПР) <> 0 Тогда

					Проводка = ПроводкиНУ.Добавить();
					Проводка.Период       = ДатаДока;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.НомерЖурнала = "ОС";
					Проводка.Содержание   = "Списана амортизация ос";
					Проводка.Сумма        = СтрокаТабОС.СуммаАмортизации_ПР;

					Проводка.СчетДт       = СтруктураШапкиДокумента.СчетАмортизацииНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтруктураШапкиДокумента.ПРГ_ОсновноеСредство);

					Проводка.СчетКт       = СтруктураШапкиДокумента.СчетНачисленияАмортизацииНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					
				КонецЕсли;				
				
			//конец изменений 
			КонецЕсли;
			
		КонецЦикла;
		
		//начало изменений  объекты строительства списываются при принятии к учету
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства
			и СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ 
				= Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
				
				ТЗДанныеОС.Колонки.Добавить("НаправлениеАмортизации");
				ТЗДанныеОС.ЗаполнитьЗначения(СтруктураШапкиДокумента.СпособОтраженияРасходовПриВключенииВСтоимость, "НаправлениеАмортизации");
				ТЗДанныеОС.Колонки.Добавить("СчетАмортизацииНУ");
				ТЗДанныеОС.ЗаполнитьЗначения(СчетУчетаНУ,"СчетАмортизацииНУ");
				ТЗДанныеОС.Колонки.Добавить("СчетАмортизации");
				ТЗДанныеОС.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
				ТЗДанныеОС.ЗаполнитьЗначения("ОсновныеСредства", "ИмяСубконто");
				ТЗДанныеОС.Колонки.Добавить("СуммаБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			  
				Для Каждого ТЗДанныеОССтрока ИЗ ТЗДанныеОС Цикл
					// Движения по регистру ПеровначальныеСведенияОСНалоговый учет
					Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчет.Добавить();
					Движение.Период                                   = ДатаДока;
					Движение.ОсновноеСредство                         = ТЗДанныеОССтрока.ОбъектУчета;
					Движение.Организация                              = ТекОрганизация;
					Движение.ПервоначальнаяСтоимостьНУ                = ТЗДанныеОССтрока.Сумма;
					Движение.ПорядокВключенияСтоимостиВСоставРасходов = СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ;
				КонецЦикла;
				
				
				ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТЗДанныеОС, СтруктураШапкиДокумента, "Нал", "ОС", "Списание стоимости объекта ОС");
				ТабЗатратПР = ТабЗатрат.Скопировать();
				ТабЗатратПР.Свернуть("ОбъектУчета", "ПостояннаяРазница");
				
                Для каждого ТабЗатратСтрока Из ТабЗатратПР Цикл
                    
                  СуммаПРвОценке = 0;  
                  ТЗДанныеОСПоОбъету = ТЗДанныеОС.НайтиСтроки(Новый Структура ("ОбъектУчета",ТабЗатратСтрока.ОбъектУчета));
                  Если Не ТЗДанныеОСПоОбъету = Неопределено И Не ТЗДанныеОСПоОбъету.Количество() = 0 Тогда
                      СуммаПРвОценке = ТЗДанныеОСПоОбъету[0].СуммаПР;
                  КонецЕсли;
				
					// Движения по регистру ПараметрыАмортизацииОСНалоговыйУчет
					Движение = Движения.ПараметрыАмортизацииОСНалоговыйУчет.Добавить();
					Движение.Период                     = ДатаДока;
					Движение.ОсновноеСредство           = ТабЗатратСтрока.ОбъектУчета;
					Движение.Организация                = ТекОрганизация;
					Движение.СрокПолезногоИспользования = 0;
					Движение.ПРДляВычисленияАмортизации = -ТабЗатратСтрока.ПостояннаяРазница + СуммаПРвОценке;
					
				КонецЦикла;
				// Объект не должен отражаться в составе ОС в НУ (в регистрах).
				ОтражатьВРегистрахНУ = Ложь;
		КонецЕсли;
		//конец изменений 	  

		Для Каждого Строка Из ТЗДанныеОС Цикл
			
			Если ОтражатьВРегистрахНУ Тогда
				
				ТекОС = Строка.ОбъектУчета;
				СтрокаТабОС = ТаблицаПоОС.Найти( ТекОС, "ОсновноеСредство");
				
				// Движения по регистру ПеровначальныеСведенияОСНалоговый учет
				Движение = ПервоначальныеСведения.Добавить();
				Движение.Период                                   = ДатаДока;
				Движение.ОсновноеСредство                         = ТекОС;
				Движение.Организация                              = ТекОрганизация;
				Движение.ПервоначальнаяСтоимостьНУ                = СтрокаТабОС.СуммаОС_НУ;
				Движение.МетодНачисленияАмортизации               = СтруктураШапкиДокумента.СпособНачисленияАмортизацииНУ;
				Движение.ПорядокВключенияСтоимостиВСоставРасходов = СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ;
				
				// Движения по регистру СчетаБухгалтерскогоУчетаОС
				Движение = СчетаУчетаОСНУ.Добавить();
				Движение.Период                     = ДатаДока;
				Движение.ОсновноеСредство           = ТекОС;
				Движение.Организация                = ТекОрганизация;
				Движение.СчетУчета                  = СтруктураШапкиДокумента.СчетУчетаНУ;
				Движение.СчетНачисленияАмортизации  = СтруктураШапкиДокумента.СчетНачисленияАмортизацииНУ;
				
				// Движения по регистрам событий и состояний ОС
				Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
					ДвиженияПоРегистрамСобытийИСостоянийРегл(СтруктураШапкиДокумента, СобытиеОС, СостояниеОС, ТекОС, ДатаДока);
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
				
					// Движения по регистру ПараметрыАмортизации
					Движение = ПараметрыАмортизации.Добавить();
					Движение.Период                     = ДатаДока;
					Движение.ОсновноеСредство           = ТекОС;
					Движение.Организация                = ТекОрганизация;
					Движение.СрокПолезногоИспользования = СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;
					Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
						
						СтрокаТабОС = ТаблицаПоОС.Найти(ТекОС, "ОсновноеСредство");
						СуммаПР = ?(СтрокаТабОС = Неопределено, 0, СтрокаТабОС.СуммаОС_ПР - СтрокаТабОС.СуммаОС_ПР_Хоз);
					Иначе
						СуммаПР =  Строка.СуммаПР - Строка.СуммаПРХоз;
					КонецЕсли;
					Движение.ПРДляВычисленияАмортизации = СуммаПР;
					
					// Движения по регистру НачислениеАмортизации
					Движение = НачислениеАмортизации.Добавить();
					Движение.Период                     = ДатаДока;
					Движение.ОсновноеСредство           = ТекОС;
					Движение.Организация                = ТекОрганизация;
					Движение.НачислятьАмортизацию       = СтруктураШапкиДокумента.НачислятьАмортизациюНУ;
				
					// Движения по регистру СпособыОтраженияРасходовПоАмортизацииОС
					Движение = НаправлениеАмортизации.Добавить();
					Движение.Период                      = ДатаДока;
					Движение.ОсновноеСредство            = ТекОС;
					Движение.Организация                 = ТекОрганизация;
					Движение.СпособыОтраженияРасходовПоАмортизации = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;

					// Движения по регистру СпециальныйКоэффициент
					Движение = СпецКоэффициент.Добавить();
					Движение.Период                     = ДатаДока;
					Движение.ОсновноеСредство           = ТекОС;
					Движение.Организация                = ТекОрганизация;
					Движение.СпециальныйКоэффициент     = СтруктураШапкиДокумента.СпециальныйКоэффициентНУ;
				
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ПроцентКапитальныхВложенийВключаемыхВРасходыНУ > 0 Тогда
					
					// Проводка по счету КВ "Амортизационная премия (п. 1.1 ст. 259 НК РФ)"
					Если ЗначениеЗаполнено(Строка.СуммаКапитальныхВложений) Тогда
						
						Проводка = ПроводкиНУ.Добавить();

						Проводка.Период       = ДатаДока;
						Проводка.Организация  = СтруктураШапкиДокумента.Организация;
						Проводка.НомерЖурнала = "ОС";
						Проводка.Содержание   = "Амортизационная премия";
						Проводка.Сумма        = Строка.СуммаКапитальныхВложений;

						Проводка.СчетДт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",               ТекОС);
							
						Если СтруктураШапкиДокумента.ВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыАмортизационнойПремии", Ссылка);
						КонецЕсли;
							
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

		Если СписатьВБУИВНУ Тогда		
			
			НаправлениеСписания = СтруктураШапкиДокумента.СпособыОтраженияРасходовПоАмортизации;
			
			Для Каждого Строка ИЗ ТЗДанныеОС Цикл
				Строка.Сумма = 0;
				Строка.СуммаБУ = Строка.СуммаПР + Строка.СуммаВР;
			КонецЦикла;
			ТЗДанныеОС.Свернуть("НаправлениеАмортизации,ОбъектУчета,СчетАмортизации,СчетАмортизацииНУ,ИмяСубконто","Сумма,СуммаБУ,СуммаПР,СуммаВР");
			// далее нужно распределить суммы по направлениям начисления амортизации
			ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТЗДанныеОС, СтруктураШапкиДокумента, "Нал", "ОС", "Списание стоимости объекта ОС");
		КонецЕсли;
		
	КонецЕсли;
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ПартииТоваровНаСкладахБухгалтерскийУчет.
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, 
		Отказ, 
		ТаблицаПоОС, 
		Неопределено, 
		Неопределено, 
		ЛОЖЬ,
		ЛОЖЬ,
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда 
		
		ОтражатьВРегистрахУСН  = Истина;
		ПервоначальныеСведения = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН;

		Для Каждого Строка Из ТаблицаПоОС Цикл

			ТекОС = Строка.ОсновноеСредство;

			Если ОтражатьВРегистрахУСН тогда

				// Движения по регистру ПервоначальныеСведенияОСНалоговыйУчетУСН
				Движение = ПервоначальныеСведения.Добавить();

				Движение.Период                     = ДатаДока;
				Движение.ОсновноеСредство           = ТекОС;
				Движение.Организация                = ТекОрганизация;
				Движение.ПервоначальнаяСтоимостьУСН = СтруктураШапкиДокумента.СтоимостьУСН;
				Движение.СрокПолезногоИспользования = СтруктураШапкиДокумента.СрокПолезногоИспользованияУСН;
				Движение.ДатаПриобретения           = СтруктураШапкиДокумента.ДатаПриобретения;
				Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовУСН;

			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ Тогда
				
				ДвиженияПоРегистрамСобытийИСостоянийРегл(СтруктураШапкиДокумента, СобытиеОС, СостояниеОС, ТекОС, ДатаДока);
					
			КонецЕсли;

		КонецЦикла;

		РегОплаты = Движения.ОплатыОСДляУСН;

		Для Каждого Запись Из ТаблицаОплат Цикл

			СтрокаОплаты  = РегОплаты.Добавить();

			СтрокаОплаты.Период           = Запись.ДатаОплаты;
			СтрокаОплаты.Организация      = СтруктураШапкиДокумента.Организация;
			СтрокаОплаты.ОсновноеСредство = Запись.ОсновноеСредство;
			СтрокаОплаты.ДатаОплаты       = Запись.ДатаОплаты;
			СтрокаОплаты.СуммаОплаты      = Запись.СуммаОплаты;

		КонецЦикла

	КонецЕсли;
	
	Движения.Хозрасчетный.Записать(Ложь);
	Движения.Налоговый.Записать(Ложь);

КонецПроцедуры // ФормированиеДвиженийРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС 
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок, ФормироватьПроводки = Истина) Экспорт

	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	// Все необходимые движения по оборудованию делаются в партионном учете
	// Отражение движений по объектам строительства
	Если ОтразитьВСоставеМПЗ 
		И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
			
		ТаблицаДляНДСПартии = Новый ТаблицаЗначений;
		ТаблицаДляНДСПартии.Колонки.Добавить("Номенклатура", 				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаДляНДСПартии.Колонки.Добавить("ХарактеристикаНоменклатуры", 	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаДляНДСПартии.Колонки.Добавить("СерияНоменклатуры", 			Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаДляНДСПартии.Колонки.Добавить("Количество",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 3)));
		ТаблицаДляНДСПартии.Колонки.Добавить("СчетУчетаБУ",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаДляНДСПартии.Колонки.Добавить("Склад", 						Новый ОписаниеТипов("СправочникСсылка.Склады"));
			
		НоваяСтрока = ТаблицаДляНДСПартии.Добавить();
		НоваяСтрока.Номенклатура 				= СтруктураШапкиДокумента.НоменклатураМПЗ;
		НоваяСтрока.ХарактеристикаНоменклатуры 	= СтруктураШапкиДокумента.ХарактеристикаМПЗ;
		НоваяСтрока.СерияНоменклатуры 			= СтруктураШапкиДокумента.СерияМПЗ;
		НоваяСтрока.СчетУчетаБУ 				= СтруктураШапкиДокумента.СчетУчетаМПЗБУ;
		НоваяСтрока.Склад 						= СтруктураШапкиДокумента.СкладМПЗ;
		НоваяСтрока.Количество 					= ТаблицаПоОС.Количество();
			
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаДляНДСПартии, СтруктураШапкиДокумента, Ложь, мВалютаРегламентированногоУчета);
	
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаДляНДСПартии, , Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства	Тогда

		//Отражения ввода в эксплуатацию объекта строительства
			
		//Вычислим коэффициент распределения
		Запрос = Новый Запрос;
			
		Запрос.УстановитьПараметр("КонецПериода"     	, Новый граница(новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("Счет"       			, СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива);
		Запрос.УстановитьПараметр("Организация"			, СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("Объект"				, СтруктураШапкиДокумента.ОбъектСтроительства);
			
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
		
		ЕстьСубконто_СпособыСтроительства = не (СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства,"ВидСубконто") = Неопределено);
		
		Если ЕстьСубконто_СпособыСтроительства Тогда
			ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
			Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
			Запрос.УстановитьПараметр("ХозСпособСтроительства",  Перечисления.СпособыСтроительства.Хозспособ);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
			|				ТОГДА 0
			|			ИНАЧЕ Остатки.СуммаОстаток
			|		КОНЕЦ) КАК СуммаОстаток,
			|	СУММА(ВЫБОР
			|			КОГДА Остатки.Субконто2 = &ХозСпособСтроительства
			|				ТОГДА Остатки.СуммаОстаток
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Хозспособ_Остаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|		&КонецПериода,
			|		Счет = &Счет,
			|		&ВидыСубконто,
			|		Организация = &Организация
			|		    И Субконто1 = &Объект) КАК Остатки";
		Иначе
			Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);	
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Остатки.СуммаОстаток КАК СуммаОстаток,
			|	0 КАК Хозспособ_Остаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|		&КонецПериода,
			|		Счет = &Счет,
			|		&ВидыСубконто,
			|		Организация = &Организация
			|		    И Субконто1 = &Объект) КАК Остатки";
				
		КонецЕсли; 
			
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			СуммаОстатка = 0;
			СуммаОстатка_Хозспособ = 0;
		Иначе
			Результат = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
			СуммаОстатка  = Результат.Итог("СуммаОстаток");
			СуммаОстатка_Хозспособ = Результат.Итог("Хозспособ_Остаток");
		КонецЕсли; 
        ТаблицаДвижений_НДСОСиНМА = неопределено;
		Если (СтруктураШапкиДокумента.СтоимостьБУ - СтруктураШапкиДокумента.СтоимостьБУХоз) > 0 Тогда
			
			Если (СуммаОстатка = 0) тогда
				ОбщегоНазначения.СообщитьОбОшибке("Отсутствует (не определен) остаток по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.", , Заголовок);
				КоэффициентРаспределения = 1;
			ИначеЕсли (СуммаОстатка < 0) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Определен отрицательный остаток ("+Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2")+") по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Подрядный""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.", , Заголовок);
				КоэффициентРаспределения = 1;
			Иначе
				КоэффициентРаспределения = (СтруктураШапкиДокумента.СтоимостьБУ - СтруктураШапкиДокумента.СтоимостьБУХоз)/СуммаОстатка;
			КонецЕсли;
			
			//Разблокируем полностью или частично вычет
			// отразим погашение события ОжидаетсяПринятиеКУчетуОбъектаСтроительства
			ТаблицаДвижений_НДСОСиНМА = УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС(СтруктураШапкиДокумента,
											СтруктураШапкиДокумента.ОбъектСтроительства,
											Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства,
											Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,СтруктураШапкиДокумента.Дата,
											КоэффициентРаспределения, Отказ);
		КонецЕсли;
		
		ТаблицаДвижений_НДСПредъявленный = Новый ТаблицаЗначений;
			
		Если СтруктураШапкиДокумента.Дата >= '20060101' И СтруктураШапкиДокумента.СтоимостьБУХоз > 0 Тогда
			// НДС по хозспособу на данный момент может быть уже начислен.
			// Необходимо определить долю погашения ранее начисленного НДС и долю текущего начисления
			Если (СуммаОстатка_Хозспособ = 0) тогда
				ОбщегоНазначения.СообщитьОбОшибке("Отсутствует (не определен) остаток по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Хозспособ""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
				КоэффициентРаспределения = 1;
			ИначеЕсли (СуммаОстатка_Хозспособ < 0) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Определен отрицательный остаток ("+Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2")+") по счету """ + СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива + """"+?(ЕстьСубконто_СпособыСтроительства," по способу строительства ""Хозспособ""","")+" для объекта <"+СтруктураШапкиДокумента.ОбъектСтроительства + ">.",,Заголовок);
				КоэффициентРаспределения = 1;
			Иначе
				КоэффициентРаспределения = (СтруктураШапкиДокумента.СтоимостьБУХоз)/СуммаОстатка_Хозспособ;
			КонецЕсли;
			
			// Отразим погашение события ОжидаетсяПринятиеКУчетуОбъектаСтроительства по СМР собственными силами (НДС начислен ранее).
			Результат_Хозспособ = УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС_Хозспособ(СтруктураШапкиДокумента,
											СтруктураШапкиДокумента.ОбъектСтроительства,
											Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства,
											Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,СтруктураШапкиДокумента.Дата,
											КоэффициентРаспределения, Отказ);
			СуммаБезНДСПоХозСпособу_НачисленоРанее = Результат_Хозспособ.СуммаБезНДС;
			НДСПоХозСпособу_НачисленоРанее = Результат_Хозспособ.НДС;
			Если Результат_Хозспособ.ТаблицаДвижений_НДСпоОСиНМА <> Неопределено И Результат_Хозспособ.ТаблицаДвижений_НДСпоОСиНМА.Количество() > 0 Тогда
				//дополним таблицу ТаблицаДвижений_НДСОСиНМА
				Если ТаблицаДвижений_НДСОСиНМА = неопределено Тогда
					ТаблицаДвижений_НДСОСиНМА = Результат_Хозспособ.ТаблицаДвижений_НДСпоОСиНМА.Скопировать();
				Иначе
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Результат_Хозспособ.ТаблицаДвижений_НДСпоОСиНМА,ТаблицаДвижений_НДСОСиНМА);
				конецЕсли;
			КонецЕсли;
			
			СуммаБезНДСПоХозСпособу = СтруктураШапкиДокумента.СтоимостьБУХоз - СуммаБезНДСПоХозСпособу_НачисленоРанее;
			СуммаНДСПоХозСпособу = СтруктураШапкиДокумента.СуммаНДС - НДСПоХозСпособу_НачисленоРанее;
			
			СтруктураШапкиДокумента.Вставить("СтоимостьБУХоз", СуммаБезНДСПоХозСпособу);
			СтруктураШапкиДокумента.Вставить("СуммаНДСПоХозСпособу", СуммаНДСПоХозСпособу);
		КонецЕсли;
			
		// Отразим НДС при принятии к учету ОС хоз способом до 2006 года
		Если СтруктураШапкиДокумента.Дата < '20060101' 
			И СтруктураШапкиДокумента.СтоимостьБУХоз > 0 Тогда
			
			СтруктураШапкиДокумента.Вставить("СтоимостьБУХоз", СтруктураШапкиДокумента.СтоимостьБУХоз);
			СтруктураШапкиДокумента.Вставить("СуммаНДСПоХозСпособу", СтруктураШапкиДокумента.СуммаНДС);
			
		   	Если СтруктураШапкиДокумента.СтоимостьБУХоз > 0 Тогда
				ТаблицаДвижений_НДСПредъявленный = УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленныйПредъявленный_ПринятиеКУчету_ХозСпособ(СтруктураШапкиДокумента, Отказ, 
					СтруктураШапкиДокумента.СтоимостьБУХоз, СтруктураШапкиДокумента.СуммаНДСПоХозСпособу, ТаблицаПоОС);
				
				// Проводка по уплате НДС в бюджет
				Если СтруктураШапкиДокумента.СуммаНДС <> 0 И ФормироватьПроводки Тогда
					
					ПроводкаБУ = Движения.Хозрасчетный.Добавить();
					ПроводкаБУ.Период = СтруктураШапкиДокумента.Дата;
					ПроводкаБУ.Организация = СтруктураШапкиДокумента.Организация;
					ПроводкаБУ.Содержание = "Начислен НДС по строительству хоз. способом";
					
					ПроводкаБУ.СчетДт = ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, "СФПолученные", СтруктураШапкиДокумента.Ссылка);
					
					ПроводкаБУ.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
					
					ПроводкаБУ.Сумма = СтруктураШапкиДокумента.СуммаНДСПоХозСпособу;
					
					Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не Отказ Тогда
						Движения.Хозрасчетный.Записать(Ложь);
					КонецЕсли; 
					
				КонецЕсли;
	
			КонецЕслИ;	
		КонецЕсли;
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСОСиНМА_ПринятиеКУчетуОС_Модернизация(СтруктураШапкиДокумента,ТаблицаДвижений_НДСПредъявленный,ТаблицаДвижений_НДСОСиНМА,ТаблицаПоОС);

	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Процедура формирует стоимость ОС, в соответствии с количеством ОС в таб.части
//
Процедура ПодготовитьТаблицаОС( СтруктураШапкиДокумента, ТаблицаПоОС)
	
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2));
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_УУ",     ТипЧисло);
		//начало изменений 
		ТаблицаПоОС.Колонки.Добавить("СуммаАмортизации_УУ",     ТипЧисло);
		//конец изменений 
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_БУ",     ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_БУ_Хоз", ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_НДС",    ТипЧисло);
		//начало изменений 
		ТаблицаПоОС.Колонки.Добавить("СуммаАмортизации_БУ",     ТипЧисло);
		//конец изменений 
	КонецЕсли;
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_ПР",     ТипЧисло);
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_НУ",     ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_НУ_Хоз", ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_ПР_Хоз", ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_ВР",     ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаОС_ВР_Хоз", ТипЧисло);
		
	//начало изменений
		ТаблицаПоОС.Колонки.Добавить("СуммаАмортизации_НУ", ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаАмортизации_ВР", ТипЧисло);
		ТаблицаПоОС.Колонки.Добавить("СуммаАмортизации_ПР", ТипЧисло);
	//конец изменений 
	КонецЕсли;
	
	//начало изменений 
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.РазукомплектацияОС Тогда
		МассивКоэф = Новый Массив;
		Для Каждого ТекСтрока  Из ОсновныеСредства Цикл
			  МассивКоэф.Добавить(ТекСтрока.Коэффициент);
		КонецЦикла;	
	Иначе	
		МассивКоэф = Новый Массив(ТаблицаПоОС.Количество());
		Для К = 0 По МассивКоэф.ВГраница() Цикл
			МассивКоэф[К] = 1;
		КонецЦикла;
	КонецЕсли;	
	//конец изменений 
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		МассивСуммУУ     = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.Стоимость,      МассивКоэф, 2);
		//начало изменений 
		МассивАмортизацияУУ     = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.АмортизацияУПР,      МассивКоэф, 2);
		//конец изменений 
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		МассивСуммБУ     = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьБУ,    МассивКоэф, 2);
		МассивСуммБУ_Хоз = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьБУХоз, МассивКоэф, 2);
		МассивСуммБУ_НДС = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.СуммаНДС,       МассивКоэф, 2);
		//начало изменений
		МассивАмортизацияБУ = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.АмортизацияБУ,       МассивКоэф, 2);
		//конец изменений 
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		МассивСуммНУ     = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьНУ,    МассивКоэф, 2);
		МассивСуммНУ_Хоз = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьНУХоз, МассивКоэф, 2);
		МассивСуммПР     = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьПР,    МассивКоэф, 2);
		МассивСуммПР_Хоз = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьПРХоз, МассивКоэф, 2);
		МассивСуммВР     = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьВР,    МассивКоэф, 2);
		МассивСуммВР_Хоз = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.СтоимостьвРХоз, МассивКоэф, 2);
		//начало изменений 
		МассивАмортизацияНУ     = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.АмортизацияНУ,    МассивКоэф, 2);
		МассивАмортизацияВР     = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.АмортизацияВР,    МассивКоэф, 2);
		МассивАмортизацияПР     = ОбщегоНазначения.РаспределитьПропорционально( СтруктураШапкиДокумента.АмортизацияПР,    МассивКоэф, 2);
		//конец изменений 
	КонецЕсли;
	
	Для К = 0 По МассивКоэф.ВГраница() Цикл
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			Если НЕ МассивСуммУУ     = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_УУ     = МассивСуммУУ    [К];
			КонецЕсли;
			//начало изменений
			Если Не МассивАмортизацияУУ = Неопределено Тогда
				 ТаблицаПоОС[К].СуммаАмортизации_УУ = МассивАмортизацияУУ[к];
			КонецЕсли;	
			//конец изменений 
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			Если НЕ МассивСуммБУ     = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_БУ     = МассивСуммБУ    [К];
			КонецЕсли;
			Если НЕ МассивСуммБУ_НДС = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_НДС    = МассивСуммБУ_НДС[К];
			КонецЕсли;
			Если НЕ МассивСуммБУ_Хоз = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_БУ_Хоз = МассивСуммБУ_Хоз[К];
			КонецЕсли;
			//начало изменений
			Если Не МассивАмортизацияБУ = Неопределено Тогда
				ТаблицаПоОС[К].СуммаАмортизации_БУ = МассивАмортизацияБУ[к];
			КонецЕсли;	
			//конец изменений 
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Если НЕ МассивСуммНУ     = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_НУ     = МассивСуммНУ    [К];
			КонецЕсли;
			Если НЕ МассивСуммНУ_Хоз = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_НУ_Хоз = МассивСуммНУ_Хоз[К];
			КонецЕсли;
			Если НЕ МассивСуммПР     = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_ПР     = МассивСуммПР    [К];
			КонецЕсли;
			Если НЕ МассивСуммПР_Хоз = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_ПР_Хоз = МассивСуммПР_Хоз[К];
			КонецЕсли;
			Если НЕ МассивСуммВР     = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_ВР     = МассивСуммВР    [К];
			КонецЕсли;
			Если НЕ МассивСуммВР_Хоз = Неопределено Тогда
				ТаблицаПоОС[К].СуммаОС_ВР_Хоз = МассивСуммВР_Хоз[К];
			КонецЕсли;
			
			//начало изменений 
			Если Не МассивАмортизацияНУ = Неопределено Тогда
				ТаблицаПоОС[К].СуммаАмортизации_НУ    = МассивАмортизацияНУ[к];
			КонецЕсли;
			
			Если Не МассивАмортизацияВР = Неопределено Тогда
				ТаблицаПоОС[К].СуммаАмортизации_ВР    = МассивАмортизацияВР[к];
			КонецЕсли;	
			
			Если Не МассивАмортизацияПР = Неопределено Тогда
				ТаблицаПоОС[К].СуммаАмортизации_ПР	  =	МассивАмортизацияПР[к];
			КонецЕсли;		
		    //конец изменений 
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицаОС()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		СтрокаТабличнойЧасти = ОсновныеСредства.Добавить();
		СтрокаТабличнойЧасти.ОсновноеСредство = Основание.Ссылка;
		СтрокаТабличнойЧасти.ИнвентарныйНомер = Основание.Код;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
			ПоддержкаПБУ18 = ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18;
		Иначе
			ПоддержкаПБУ18 = Ложь;
		КонецЕсли;		
    	СтруктураШапкиДокумента.Вставить("ПоддержкаПБУ18",ПоддержкаПБУ18);
	КонецЕсли;	

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		мУчетнаяПолитикаУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
        Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаУпр) Тогда
			Отказ = Истина;
		КонецЕсли; 
		
		СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗ_Упр",              мУчетнаяПолитикаУпр.СпособОценкиМПЗ);
		СтруктураШапкиДокумента.Вставить("ВестиПартионныйУчетПоСкладам_Упр", глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
        Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли; 
		мУчетнаяПолитикаБух = мУчетнаяПолитикаРегл;
		мУчетнаяПолитикаНал = мУчетнаяПолитикаРегл;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
			СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗ_БУ", мУчетнаяПолитикаБух.СпособОценкиМПЗ);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗ_НУ", мУчетнаяПолитикаНал.СпособОценкиМПЗ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ = Ложь) Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("ИнвентарныйНомер", "ИнвентарныйНомер");

	РезультатЗапросаПоОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОсновныеСредства", СтруктураПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
	Отказ = Отказ Или ТаблицаПоОС.Количество()=0;

	Если НЕ Отказ Тогда
		
		ПодготовитьТаблицаОС( СтруктураШапкиДокумента, ТаблицаПоОС);
	
	КонецЕсли;

КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоОС;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияПринятиеКУчетуОС(ЭтотОбъект, Отказ,СтруктураВидовУчета);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	Если ТипЗнч(СтруктураВидовУчета) = Тип("Структура") Тогда
		// Структура видов учета определяется в обработке "Проведение по партиям"
		Для Каждого Элемент из СтруктураВидовУчета Цикл
			Если (Лев(Элемент.Ключ,8) = "Отражать") Тогда
				ОтражатьВУчете = СтруктураШапкиДокумента[Элемент.Ключ];
				СтруктураШапкиДокумента.Вставить(Элемент.Ключ, Элемент.Значение И ОтражатьВУчете);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("ВариантУчетаРасходовПоАмортизационнойПремии");
		ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	КонецЕсли; 

	//начало изменений БП 07 
	СтруктураШапкиДокумента.ОтражатьВУправленческомУчете = Не ПараметрыСеанса.НеведетсяУПРУчетВЧастиЗатратИОС;
	//конец изменений БП 07	 
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ);
	
	ПроверкаРеквизитовТЧ( РежимПроведения, ТаблицаПоОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоОС, "Основные средства", "ИнвентарныйНомер", "Инв. № (Орг)",      Отказ, Заголовок);	
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Строки".
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ОсновноеСредство"	,"ОсновноеСредство");
		СтруктураПолей.Вставить("ДатаОплаты"		,"ДатаОплаты");
		СтруктураПолей.Вставить("СуммаОплаты"  		,"СуммаОплаты");
		
		РезультатЗапросаПоСтрокам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Оплата", СтруктураПолей);
		ТаблицаОплат = РезультатЗапросаПоСтрокам.Выгрузить();
		
		ПроверитьЗаполнениеТабличнойЧастиОплата( ТаблицаОплат, СтруктураШапкиДокумента, Отказ, Заголовок);
		
	Иначе
		
		ТаблицаОплат = Оплата.Выгрузить();
		
	КонецЕсли;

	ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента);
	
	Если НЕ Отказ Тогда
		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ФормированиеДвижений(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаОплат, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Если Оплата.Количество() > 0 Тогда
		КоличествоСтрок = Оплата.Количество();
		Для Счетчик = 1 По (КоличествоСтрок) Цикл
			Строка = Оплата[КоличествоСтрок - Счетчик];
			Если ОсновныеСредства.Найти(Строка.ОсновноеСредство, "ОсновноеСредство") = Неопределено Тогда
				Оплата.Удалить(КоличествоСтрок - Счетчик);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//начало изменений БП 07 
	
	//конец изменений БП 07	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриКопировании(ОбъектКопирования)

	мДокументСозданКопированием = Истина;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры // ПриЗаписи()

//Вадим
Процедура движениеПОИМНС()
	РегистрацияОС_В_ИФНС = Движения.РегистрацияОС_В_ИФНС;
	для каждого стр из ОсновныеСредства цикл
		Движение = РегистрацияОС_В_ИФНС.Добавить();
		Движение.Период           = Дата;
		Движение.ОС = стр.ОсновноеСредство;
		Движение.РегистрацияВИФНС           = РегистрацияВИФНС;
	Конеццикла;	
	
КонецПроцедуры	

//ВадимКонец



мДокументСозданКопированием = Ложь;
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
