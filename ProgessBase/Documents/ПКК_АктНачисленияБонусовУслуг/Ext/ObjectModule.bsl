 Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,Контрагент,ДоговорКонтрагента,Ведомость,МетодПредоставленияБонуса,Валюта,График,ТипБонуса");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, Таблица) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("НачПериод"				, "НачПериод");
	СтруктураПолей.Вставить("КонПериод"        		, "КонПериод");
	СтруктураПолей.Вставить("Бонус"					, "Бонус");
	СтруктураПолей.Вставить("ПроцентРасч"			, "ПроцентРасч");
    СтруктураПолей.Вставить("СуммаРасч" 			, "СуммаРасч");
	СтруктураПолей.Вставить("ПроцентПред"			, "ПроцентПред");
	СтруктураПолей.Вставить("СуммаПред"				, "СуммаПред");
	СтруктураПолей.Вставить("ВесПлан"        		, "ВесПлан");
	СтруктураПолей.Вставить("ВесФакт"				, "ВесФакт");
	СтруктураПолей.Вставить("ПроцентВып"			, "ПроцентВып");
    СтруктураПолей.Вставить("ГарантированныйОбъем" 	, "ГарантированныйОбъем");
	СтруктураПолей.Вставить("ГарантируемаяСумма"	, "ГарантируемаяСумма");
	СтруктураПолей.Вставить("ПроцентМинимальный"	, "ПроцентМинимальный");
	СтруктураПолей.Вставить("УИграфик"				, "УИграфик");
	СтруктураПолей.Вставить("БазаБонуса"			, "БазаБонуса");
	СтруктураПолей.Вставить("СуммаБонусаБезШтрафа"  , "СуммаБонусаБезШтрафа");
	СтруктураПолей.Вставить("СуммаШтрафа"  			, "СуммаШтрафа");
	
	//{18.07.2016 Островерхий заявка №54238 
	СтруктураПолей.Вставить("РасшифровкаБюджетаРетробонусов"  			, "Ссылка.РасшифровкаБюджетаРетробонусов");
	//18.07.2016 Островерхий} 
	
	РезультатЗапроса = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ТабличнаяЧасть", СтруктураПолей);
	
	// Подготовим таблицу заданий для проведения.
	Таблица = РезультатЗапроса.Выгрузить();
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, Таблица;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);
		
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, Таблица);
		
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Таблица, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаНакладные          - таблица значений, содержащая данные для проведения и проверки ТЧ Накладные
//  ТаблицаПоручений          - таблица значений, содержащая данные для проведения и проверки ТЧ ДополнительныеПоручения,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Таблица, Отказ, Заголовок)

	НаборДвижений = Движения.ПКК_АктыБонусовУслуг;
	ТаблицаДвижений	= НаборДвижений.ВыгрузитьКолонки();
	ТаблицаДвижений.Очистить();
	
	Для каждого Строка Из Таблица Цикл
		Движение = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);
		ЗаполнитьЗначенияСвойств(Движение, Строка);
		Если Движение.Валюта <> глЗначениеПеременной("ВалютаРегламентированногоУчета") тогда
			ПривестиКВалютеРегУчета(Движение);
		КонецЕсли;
		Движение.Регистратор = ЭтотОбъект.Ссылка;
	КонецЦикла;
	  	
	НаборДвижений.мТаблицаДвижений  = ТаблицаДвижений;
	НаборДвижений.мПериод			=  Дата;
	
	Движения.ПКК_АктыБонусовУслуг.ВыполнитьПриход();
	НаборДвижений.Записать();
		
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
				 		
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ЭтотОбъект.Разрешение = ложь И Не РольДоступна("АП_Администратор") тогда
		Отказ = истина;
	КонецЕсли;
	ЭтотОбъект.Разрешение = ложь;
	
		
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();

	
КонецПроцедуры

Процедура ПривестиКВалютеРегУчета(Движение)
	
	Движение.БазаБонуса = МодульВалютногоУчета.ПересчитатьВСуммуРегл(Движение.БазаБонуса,глЗначениеПеременной("ВалютаРегламентированногоУчета"),Движение.Валюта,Дата);	
	Движение.ГарантируемаяСумма = МодульВалютногоУчета.ПересчитатьВСуммуРегл(Движение.ГарантируемаяСумма,глЗначениеПеременной("ВалютаРегламентированногоУчета"),Движение.Валюта,Дата);
	Движение.СуммаРасч = МодульВалютногоУчета.ПересчитатьВСуммуРегл(Движение.СуммаРасч,глЗначениеПеременной("ВалютаРегламентированногоУчета"),Движение.Валюта,Дата);
	Движение.СуммаБонусаБезШтрафа = МодульВалютногоУчета.ПересчитатьВСуммуРегл(Движение.СуммаБонусаБезШтрафа,глЗначениеПеременной("ВалютаРегламентированногоУчета"),Движение.Валюта,Дата);
	Движение.СуммаШтрафа = МодульВалютногоУчета.ПересчитатьВСуммуРегл(Движение.СуммаШтрафа,глЗначениеПеременной("ВалютаРегламентированногоУчета"),Движение.Валюта,Дата);
	Движение.СуммаПред = МодульВалютногоУчета.ПересчитатьВСуммуРегл(Движение.СуммаПред,глЗначениеПеременной("ВалютаРегламентированногоУчета"),Движение.Валюта,Дата);
	Движение.СуммаДокумента = МодульВалютногоУчета.ПересчитатьВСуммуРегл(Движение.СуммаДокумента,глЗначениеПеременной("ВалютаРегламентированногоУчета"),Движение.Валюта,Дата);
	
КонецПроцедуры

