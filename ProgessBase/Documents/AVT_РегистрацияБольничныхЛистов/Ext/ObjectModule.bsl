
Перем мТЗДляВостановленияДвижений;
Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по таблице "РаботникиОрганизации" документа перед записью
//
// Параметры:
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизацииИзТекущегоОбъекта()

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ГоловнаяОрганизация = ?(Организация.ГоловнаяОрганизация=Справочники.Организации.ПустаяСсылка(), Организация, Организация.ГоловнаяОрганизация);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Ссылка",               Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",  ГоловнаяОрганизация);
    Запрос.УстановитьПараметр("РаботникиОрганизации", РаботникиОрганизации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	Док.ДатаНачала КАК ДатаНачала,
	|	Док.ДатаОкончания КАК ДатаОкончания,
	|	Док.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Док.СерияВходящегоДокумента КАК СерияВходящегоДокумента,
	|	Док.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
	|	Док.ПроцентОплаты КАК ПроцентОплаты,
	|	Док.СлучайУходаЗаБольнымРебенком КАК СлучайУходаЗаБольнымРебенком,
	|	Док.Сотрудник КАК Сотрудник,
	|	Док.ПричинаОтсутствия КАК ПричинаОтсутствия,
	|	&Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТСтрокиДокумента
	|ИЗ
	|	&РаботникиОрганизации КАК Док
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаНачала";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат[0].Количество = 0 Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка
		|ИЗ
		|	ВТСтрокиДокумента КАК Док";
	Иначе
		
		// Описание текста запроса:
		// 1. Выборка "СтрокиДокумента": 
		//	Во вложенном запросе выбираются строки документа, к ним добавляется 
		//	дата предшествующего "дате начала" движения из рег-ра РаботникиОрганизации
		//
		// 2. Выборка "РаботникиОрганизации": 
		//	Для каждой строки документа выполняем срез по регистру РаботникиОрганизации на 
		//	дату ДатаНачала для выполнения движений по штатному расписаниюи и проверки, 
		//	работает ли работник на эту дату (использует данные выборки "СтрокиДокумента")
		//
		// 3. Выборка "ПересекающиесяСтроки": 
		//	Среди остальных строк документа ищем строки, имеющие ту же дату ДатаНачала
		//
		// 4. Выборка "ИмеющиесяСостояния": 
		//	В рег-ре СостояниеРаботниковОрганизации ищем движения на дату ДатаНачала
		//
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СтрокиДокумента.ДатаНачала >= РаботникиОрганизации.ПериодЗавершения
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА СтрокиДокумента.ДатаНачала >= РаботникиОрганизации.ПериодЗавершения
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РаботникиОрганизации.ДолжностьЗавершения
		|		ИНАЧЕ РаботникиОрганизации.Должность
		|	КОНЕЦ КАК Должность,
		|	ВЫБОР
		|		КОГДА СтрокиДокумента.ДатаНачала >= РаботникиОрганизации.ПериодЗавершения
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РаботникиОрганизации.ЗанимаемыхСтавокЗавершения
		|		ИНАЧЕ РаботникиОрганизации.ЗанимаемыхСтавок
		|	КОНЕЦ КАК ЗанимаемыхСтавок,
		|	СтрокиДокумента.НомерСтроки,
		|	СтрокиДокумента.ДатаНачала,
		|	СтрокиДокумента.ДатаОкончания,
		|	СтрокиДокумента.Сотрудник,
		|	СтрокиДокумента.СотрудникНаименование,
		|	СтрокиДокумента.Физлицо,
		|	СтрокиДокумента.ПричинаОтсутствия,
		|	СтрокиДокумента.Ссылка,
		|	СтрокиДокумента.ДатаИзменения,
		|	ВЫБОР
		|		КОГДА СтрокиДокумента.СотрудникОрганизация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	МИНИМУМ(ПересекающиесяСтроки.НомерСтроки) КАК КонфликтнаяСтрока,
		|	ВЫБОР
		|		КОГДА ИмеющиесяСостояния.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине)
		|				ИЛИ ИмеющиесяСостояния.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Работает)
		|					И ИмеющиесяСостояния.Регистратор ССЫЛКА Документ.AVT_РегистрацияБольничныхЛистов
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УдалитьДвиженияКонфликтногоДокумента,
		|	ИмеющиесяСостояния.Состояние КАК КонфликтноеСостояние,
		|	ИмеющиесяСостояния.Регистратор КАК КонфликтныйДокумент,
		|	СтрокиДокумента.ДатаНачалаСобытия,
		|	СтрокиДокумента.ПричинаНетрудоспособности,
		|	СтрокиДокумента.НомерВходящегоДокумента,
		|	СтрокиДокумента.СерияВходящегоДокумента,
		|	СтрокиДокумента.ПроцентОплаты,
		|	СтрокиДокумента.СлучайУходаЗаБольнымРебенком
		|ИЗ
		|	(ВЫБРАТЬ
		|		Док.НомерСтроки КАК НомерСтроки,
		|		Док.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|		Док.ДатаНачала КАК ДатаНачала,
		|		Док.ДатаОкончания КАК ДатаОкончания,
		|		Док.ПричинаНетрудоспособности КАК ПричинаНетрудоспособности,
		|		Док.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|		Док.СерияВходящегоДокумента КАК СерияВходящегоДокумента,
		|		Док.ПроцентОплаты КАК ПроцентОплаты,
		|		Док.СлучайУходаЗаБольнымРебенком КАК СлучайУходаЗаБольнымРебенком,
		|		Док.Сотрудник КАК Сотрудник,
		|		Док.Сотрудник.Физлицо КАК Физлицо,
		|		Док.Сотрудник.Наименование КАК СотрудникНаименование,
		|		Док.Сотрудник.Организация КАК СотрудникОрганизация,
		|		Док.ПричинаОтсутствия КАК ПричинаОтсутствия,
		|		Док.Ссылка КАК Ссылка,
		|		МАКСИМУМ(Работники.Период) КАК ДатаИзменения
		|	ИЗ
		|		ВТСтрокиДокумента КАК Док
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|			ПО Док.ДатаНачала >= Работники.Период
		|				И Док.Сотрудник = Работники.Сотрудник
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Док.НомерСтроки,
		|		Док.ДатаНачалаСобытия,
		|		Док.ДатаНачала,
		|		Док.ДатаОкончания,
		|		Док.ПричинаНетрудоспособности,
		|		Док.НомерВходящегоДокумента,
		|		Док.СерияВходящегоДокумента,
		|		Док.ПроцентОплаты,
		|		Док.СлучайУходаЗаБольнымРебенком,
		|		Док.ПричинаОтсутствия,
		|		Док.Ссылка,
		|		Док.Сотрудник.Физлицо,
		|		Док.Сотрудник.Организация,
		|		Док.Сотрудник.Наименование,
		|		Док.Сотрудник) КАК СтрокиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО СтрокиДокумента.ДатаИзменения = РаботникиОрганизации.Период
		|			И СтрокиДокумента.Сотрудник = РаботникиОрганизации.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ПересекающиесяСтроки
		|		ПО СтрокиДокумента.Сотрудник = ПересекающиесяСтроки.Сотрудник
		|			И СтрокиДокумента.ДатаНачала = ПересекающиесяСтроки.ДатаНачала
		|			И СтрокиДокумента.НомерСтроки < ПересекающиесяСтроки.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ИмеющиесяСостояния
		|		ПО СтрокиДокумента.ДатаНачала = ИмеющиесяСостояния.Период
		|			И СтрокиДокумента.Ссылка <> ИмеющиесяСостояния.Регистратор
		|			И СтрокиДокумента.Сотрудник = ИмеющиесяСостояния.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА СтрокиДокумента.ДатаНачала >= РаботникиОрганизации.ПериодЗавершения
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СтрокиДокумента.ДатаНачала >= РаботникиОрганизации.ПериодЗавершения
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РаботникиОрганизации.ДолжностьЗавершения
		|		ИНАЧЕ РаботникиОрганизации.Должность
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СтрокиДокумента.ДатаНачала >= РаботникиОрганизации.ПериодЗавершения
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РаботникиОрганизации.ЗанимаемыхСтавокЗавершения
		|		ИНАЧЕ РаботникиОрганизации.ЗанимаемыхСтавок
		|	КОНЕЦ,
		|	СтрокиДокумента.НомерСтроки,
		|	СтрокиДокумента.ДатаНачала,
		|	СтрокиДокумента.ДатаОкончания,
		|	СтрокиДокумента.ПричинаОтсутствия,
		|	СтрокиДокумента.Ссылка,
		|	ИмеющиесяСостояния.Состояние,
		|	СтрокиДокумента.ДатаИзменения,
		|	СтрокиДокумента.Сотрудник,
		|	СтрокиДокумента.СотрудникНаименование,
		|	СтрокиДокумента.Физлицо,
		|	ВЫБОР
		|		КОГДА СтрокиДокумента.СотрудникОрганизация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	ИмеющиесяСостояния.Регистратор,
		|	СтрокиДокумента.ДатаНачалаСобытия,
		|	СтрокиДокумента.ПричинаНетрудоспособности,
		|	СтрокиДокумента.НомерВходящегоДокумента,
		|	СтрокиДокумента.СерияВходящегоДокумента,
		|	СтрокиДокумента.ПроцентОплаты,
		|	СтрокиДокумента.СлучайУходаЗаБольнымРебенком";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Дата,
	|	Док.Организация,
	|	ВЫБОР
	|		КОГДА Док.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА Док.Организация
	|		ИНАЧЕ Док.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Док.Ссылка
	|ИЗ
	|	Документ.AVT_РегистрацияБольничныхЛистов КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры:
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.НомерСтроки КАК НомерСтроки,
	|	Док.ДатаНачала КАК ДатаНачала,
	|	Док.ДатаОкончания КАК ДатаОкончания,
	|	Док.Сотрудник КАК Сотрудник,
	|	Док.ПричинаОтсутствия КАК ПричинаОтсутствия,
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.AVT_РегистрацияБольничныхЛистов.РаботникиОрганизации КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по товарам документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке =
		"В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) + """ табл. части ""Сотрудники"": ";
		
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
	// Дата "с"
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала состояния!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата "по"
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата изменения состояния!", Отказ, Заголовок);
	КонецЕсли;
	
	// Причина отсутствия
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПричинаОтсутствия) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано состояние!", Отказ, Заголовок);
	КонецЕсли;
	
	// Причина нетрудоспособности
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПричинаНетрудоспособности) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана причина нетрудоспособности!", Отказ, Заголовок);
	КонецЕсли;
	
	// Случай ухода за больным ребенком
	Если ВыборкаПоСтрокамДокумента.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком И
		НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СлучайУходаЗаБольнымРебенком) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан случай ухода за больным ребенком!", Отказ, Заголовок);
	КонецЕсли;
	
	// Процент оплаты
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПроцентОплаты) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан процент оплаты!", Отказ, Заголовок);
	КонецЕсли;
	
	// Работник не должен быть уволенным.
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда
		СтрокаСообщениеОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаИзменения, "ДЛФ=DD") + ")!";
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
		// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока <> NULL Тогда
		СтрокаСообщениеОбОшибке = "в строке " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрока + " указана та же дата изменения состояния!"; 
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: в регистре уже есть такое движение
	Если ВыборкаПоСтрокамДокумента.КонфликтноеСостояние <> NULL И Не ВыборкаПоСтрокамДокумента.УдалитьДвиженияКонфликтногоДокумента Тогда
		Расшифровки = Новый Массив;
		Расшифровки.Добавить(Новый Структура("Представление, Расшифровка", ВыборкаПоСтрокамДокумента.КонфликтныйДокумент, ВыборкаПоСтрокамДокумента.КонфликтныйДокумент));
		СтрокаСообщениеОбОшибке = "сотрудник уже переведен в состояние """ + ВыборкаПоСтрокамДокумента.КонфликтноеСостояние + """ документом ";
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок, , Расшифровки);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента					- выборка из результата запроса по шапке документа,
//	СтруктураПроведенияПоРегистрамСведений	- структура, содержащая имена регистров 
//											  сведений по которым надо проводить документ,
//  СтруктураПараметров						- структура параметров проведения,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПараметров = "")

	// Отсутствие на работе
	Движение = Движения.СостояниеРаботниковОрганизаций.Добавить();
	
	// Свойства
	Движение.Период				= ВыборкаПоРаботникиОрганизации.ДатаНачала;
	
	// Измерения
	Движение.Сотрудник			= ВыборкаПоРаботникиОрганизации.Сотрудник;
	Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.Состояние			 = ВыборкаПоРаботникиОрганизации.ПричинаОтсутствия;
	Движение.ПериодЗавершения    = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
	Движение.СостояниеЗавершения = Перечисления.СостоянияРаботникаОрганизации.Работает;
	
	// Реквизиты
	Движение.ПервичныйДокумент	= ВыборкаПоШапкеДокумента.Ссылка;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

Процедура ИсправлениеДвиженийКонфликтногоДокументаПередЗаписью(ВыборкаПоРаботникиОрганизации, Отказ, РежимЗаписи, РежимПроведения, ВосстанавливатьДвижения=Неопределено, СоответствиеДвижений=Неопределено)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ВыборкаПоРаботникиОрганизации.УдалитьДвиженияКонфликтногоДокумента Тогда
		Сотрудники	= Новый Массив;
		Физлица		= Новый Массив;
		
		Сотрудники.Добавить(ВыборкаПоРаботникиОрганизации.Сотрудник);
		Физлица.Добавить(ВыборкаПоРаботникиОрганизации.Физлицо);
		
		Строка = РаботникиОрганизации[ВыборкаПоРаботникиОрганизации.НомерСтроки-1];
		
		СоответствиеДвижений = Строка.ДвиженияИсправляемогоДокумента.Получить();
		Если СоответствиеДвижений = Неопределено Тогда
			СоответствиеДвижений = Новый Соответствие;
		КонецЕсли;
		ПроведениеРасчетов.ОбработатьДвиженияИсправляемогоДокумента(ВыборкаПоРаботникиОрганизации.КонфликтныйДокумент, СоответствиеДвижений, Сотрудники, Физлица);
		
		Строка.ДвиженияИсправляемогоДокумента = Новый ХранилищеЗначения(СоответствиеДвижений);
		Строка.ИсправляемыйДокумент           = ВыборкаПоРаботникиОрганизации.КонфликтныйДокумент;
	КонецЕсли;
		
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Строка = РаботникиОрганизации[ВыборкаПоРаботникиОрганизации.НомерСтроки-1];
		
		СоответствиеДвижений = Строка.ДвиженияИсправляемогоДокумента.Получить();
		Если СоответствиеДвижений <> Неопределено Тогда
			Строка.ДвиженияИсправляемогоДокумента	= Неопределено;
			
			НоваяСтрока = мТЗДляВостановленияДвижений.Добавить();
			НоваяСтрока.ИсправляемыйДокумент = Строка.ИсправляемыйДокумент;
			НоваяСтрока.СоответствиеДвижений = СоответствиеДвижений;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		мТЗДляВостановленияДвижений.Очистить();
		
		НачатьТранзакцию();
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		
		// Заголовок для сообщений об ошибках проведения.
		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		
		ПроверитьЗаполнениеШапки(Отказ, Заголовок);
		
		Если НЕ Отказ Тогда
			
			ВыборкаПоРаботникамОрганизации = СформироватьЗапросПоРаботникиОрганизацииИзТекущегоОбъекта().Выбрать();
			
			Пока ВыборкаПоРаботникамОрганизации.Следующий() Цикл 
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоРаботникамОрганизации, Отказ, Заголовок);
				
				Если НЕ Отказ Тогда
					
					ИсправлениеДвиженийКонфликтногоДокументаПередЗаписью(ВыборкаПоРаботникамОрганизации, Отказ, РежимЗаписи, РежимПроведения);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбработкаКомментариев.ПоказатьСообщения();
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		мТЗДляВостановленияДвижений.Очистить();
		
		ВыборкаПоРаботникамОрганизации = СформироватьЗапросПоРаботникиОрганизации().Выбрать();
				
		Пока ВыборкаПоРаботникамОрганизации.Следующий() Цикл 
					
			ИсправлениеДвиженийКонфликтногоДокументаПередЗаписью(ВыборкаПоРаботникамОрганизации, Отказ, РежимЗаписи, РежимПроведения);
			
		КонецЦикла;
						
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из мТЗДляВостановленияДвижений Цикл
		ПроведениеРасчетов.ИсправлениеКадровогоДокументаПриЗаписи(Отказ, Истина, Строка.ИсправляемыйДокумент, Строка.СоответствиеДвижений);
	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Если проверитьПересечениеОтпуска() тогда
		Отказ=истина;
		возврат;
	Конецесли;	
		
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(РежимПроведения);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		Движения.СостояниеРаботниковОрганизаций.Записывать = Истина;
		
		ВыборкаПоРаботникамОрганизации = СформироватьЗапросПоРаботникиОрганизации().Выбрать();
		
		Пока ВыборкаПоРаботникамОрганизации.Следующий() Цикл 
			
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникамОрганизации);
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

/////Вадим 21.08.2013 12:10:27
Функция проверитьПересечениеОтпуска()
	проверка=ложь;
     Для каждого стр Из РаботникиОрганизации Цикл
		 Запрос = Новый Запрос;
		 Запрос.Текст =
		 "ВЫБРАТЬ
		 |	СостояниеРаботниковОрганизаций.Сотрудник,
		 |	СостояниеРаботниковОрганизаций.Период,
		 |	СостояниеРаботниковОрганизаций.ПериодЗавершения,
		 |	СостояниеРаботниковОрганизаций.Состояние,
		 |	СостояниеРаботниковОрганизаций.Регистратор
		 |ИЗ
		 |	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
		 |ГДЕ
		 |	(СостояниеРаботниковОрганизаций.Период МЕЖДУ &НачалоПериода И ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, -1)
		 |			ИЛИ ДОБАВИТЬКДАТЕ(СостояниеРаботниковОрганизаций.ПериодЗавершения, ДЕНЬ, -1) МЕЖДУ &НачалоПериода И ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, -1)
		 |			ИЛИ &НачалоПериода МЕЖДУ СостояниеРаботниковОрганизаций.Период И ДОБАВИТЬКДАТЕ(СостояниеРаботниковОрганизаций.ПериодЗавершения, ДЕНЬ, -1)
		 |			ИЛИ &КонецПериода МЕЖДУ СостояниеРаботниковОрганизаций.Период И ДОБАВИТЬКДАТЕ(СостояниеРаботниковОрганизаций.ПериодЗавершения, ДЕНЬ, -1))
		 |	И СостояниеРаботниковОрганизаций.Состояние = &Состояние
		 |	И СостояниеРаботниковОрганизаций.Сотрудник В(&Сотрудник)";
		 Запрос.УстановитьПараметр("КонецПериода", стр.ДатаОкончания);
		 Запрос.УстановитьПараметр("НачалоПериода", стр.ДатаНачала);
		 Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
		 Запрос.УстановитьПараметр("Сотрудник", стр.Сотрудник);
		 
		 Результат = Запрос.Выполнить();
		 Выборка = Результат.Выбрать();
		 Пока Выборка.Следующий() Цикл
			 проверка=истина;
			 сообщить("Сушествует пересечение отпуска у "+Выборка.Сотрудник.наименование+": отпуск с "+формат(Выборка.Период,"ДФ=dd.MM.yyyy")
			 +" по "+формат(Выборка.ПериодЗавершения,"ДФ=dd.MM.yyyy")+" документ: "+СокрЛП(Выборка.Регистратор));
			 
		 КонецЦикла;
		 
	 	
	 
	 КонецЦикла;
	
	
	 возврат проверка;

 КонецФункции
 // проверитьПересечениеОтпуска() ВадимКонец



мТЗДляВостановленияДвижений = Новый ТаблицаЗначений;
мТЗДляВостановленияДвижений.Колонки.Добавить("ИсправляемыйДокумент");
мТЗДляВостановленияДвижений.Колонки.Добавить("СоответствиеДвижений");

мДлинаСуток = 86400;