Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета;

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли; 
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,, Ссылка));
		
КонецПроцедуры // Печать
	
// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
	Возврат Новый Структура();
		
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли

// Процедура - обработчик события "ОбработкаПроведения"
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru = 'Проведение документа """ + СокрЛП(Ссылка) + """: '");
	
	//УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,      "ВалютаУправленческогоУчета",       "ВалютаУправленческогоУчета");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке(),
	ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект), мВалютаРегламентированногоУчета);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДатаОкончания"				, "ДатаОтмены");
	СтруктураПолей.Вставить("ОтсрочкаПовышенияЦен"		, "ОтсрочкаПовышенияЦен");
	СтруктураПолей.Вставить("Период"					, "Ссылка.Дата");

	ТаблицаДвижений = ПодготовитьТаблицуДвижений(УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Документы", СтруктураПолей), СтруктураШапкиДокумента);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДвижений);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаДвижений", ТаблицаДвижений));
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуДвижений(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаДвижений = РезультатЗапросаПоТоварам.Выгрузить();
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.ОтсрочкаПовышенияЦен,
	//			   |	МАКСИМУМ(ПЦ_ОтсрочкаПовышенияЦен.Период) КАК Период
	//			   |ПОМЕСТИТЬ Т_ПоследниеОтсрочки
	//			   |ИЗ
	//			   |	РегистрСведений.ПЦ_ОтсрочкаПовышенияЦен КАК ПЦ_ОтсрочкаПовышенияЦен
	//			   |ГДЕ
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.ОтсрочкаПовышенияЦен В(&ОтсрочкаПовышенияЦен)
	//			   |
	//			   |СГРУППИРОВАТЬ ПО
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.ОтсрочкаПовышенияЦен
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.ДатаНачала,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.ДатаОкончания,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.Дивизион,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.НСИ_КаналПродаж,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.Контрагент,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.НСИ_Регион,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.НСИ_Вывеска,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.Проект,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.ПЦ_ТоварнаяКатегория,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.ПЦ_Брендообъем,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.Номенклатура,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.ХарактеристикаНоменклатуры,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.ДатаЦены,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.ОтсрочкаПовышенияЦен,
	//			   |	ПЦ_ОтсрочкаПовышенияЦен.Период
	//			   |ИЗ
	//			   |	Т_ПоследниеОтсрочки КАК Т_ПоследниеОтсрочки
	//			   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПЦ_ОтсрочкаПовышенияЦен КАК ПЦ_ОтсрочкаПовышенияЦен
	//			   |		ПО Т_ПоследниеОтсрочки.ОтсрочкаПовышенияЦен = ПЦ_ОтсрочкаПовышенияЦен.ОтсрочкаПовышенияЦен
	//			   |			И Т_ПоследниеОтсрочки.Период = ПЦ_ОтсрочкаПовышенияЦен.Период";
	//			   
	//Запрос.УстановитьПараметр("ОтсрочкаПовышенияЦен", ТаблицаДвижений.ВыгрузитьКолонку("ОтсрочкаПовышенияЦен"));
	
	Результат = ПЦ_Ценообразование.ПолучимПоследниеДанныеПоДокументу_ОтсрочкаПовышенияЦен(ТаблицаДвижений.ВыгрузитьКолонку("ОтсрочкаПовышенияЦен"));
	
	//Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого мСтрока Из ТаблицаДвижений Цикл
	
		НайтиСтроки = Результат.НайтиСтроки(Новый Структура("ОтсрочкаПовышенияЦен", мСтрока.ОтсрочкаПовышенияЦен));
		
		Для каждого мСтрокиДок Из НайтиСтроки Цикл
		
			мСтрокиДок.ДатаОкончания = мСтрока.ДатаОкончания;
			мСтрокиДок.Период = мСтрока.Период;
		
		КонецЦикла; 
	
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДвижений)
	
	//Движения по регистру накопления "КП_ИмпортированныеЗаказы"
	Движения.ПЦ_ОтсрочкаПовышенияЦен.Записывать = Истина;
	Движения.ПЦ_ОтсрочкаПовышенияЦен.Очистить();
	Движения.ПЦ_ОтсрочкаПовышенияЦен.Загрузить(ТаблицаДвижений);	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ПроверяемыеРеквизиты.Добавить("Документы.ДатаОтмены");
	ПроверяемыеРеквизиты.Добавить("Документы.ОтсрочкаПовышенияЦен");
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПЦ_ОтсрочкаПовышенияЦен") Тогда
		
		НоваяСтрока = ЭтотОбъект.Документы.Добавить();
		НоваяСтрока.ОтсрочкаПовышенияЦен = ДанныеЗаполнения;
		
	КонецЕсли; 
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();