////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСтараяДатаНачалаСобытия;

Перем мСтараяДатаОкончанияСобытия;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезервированиеПомещений.Занятость,
	|	РезервированиеПомещений.ДатаНачала,
	|	РезервированиеПомещений.ДатаОкончания,
	|	РезервированиеПомещений.Помещение
	|ИЗ
	|	Документ.РезервированиеПомещений КАК РезервированиеПомещений
	|ГДЕ
	|	РезервированиеПомещений.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)
	
	// Помещение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Помещение) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не выбрано помещение!", Отказ, Заголовок);
	КонецЕсли;
	
	// Занятость
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Занятость) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан вид занятости помещения!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не задана дата и время начала занятости помещения!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДатаНачала = ВыборкаПоШапкеДокумента.ДатаОкончания ИЛИ НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана продолжительность занятости помещения!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДатаНачала > ВыборкаПоШапкеДокумента.ДатаОкончания Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Дата и время окончания занятости помещения меньше чем дата и время начала занятости!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, СтруктураПараметров = "")
	
	Движение = Движения.ПланируемаяЗанятостьПомещений.Добавить();
	// Свойства
	Движение.Период					= ВыборкаПоШапкеДокумента.ДатаНачала;
	// Измерения
	Движение.Помещение				= ВыборкаПоШапкеДокумента.Помещение;
	// Ресурсы
	Движение.Занятость				= ВыборкаПоШапкеДокумента.Занятость;
	Движение.ПериодЗавершения		= ВыборкаПоШапкеДокумента.ДатаОкончания;
	Движение.ЗанятостьЗавершения	= Перечисления.Занятость.Свободно;
	
	Движение = Движения.ПериодыЗанятостиПомещений.Добавить();
	// Измерения
	Движение.Помещение				= ВыборкаПоШапкеДокумента.Помещение;
	Движение.ДатаНачала				= ВыборкаПоШапкеДокумента.ДатаНачала;
	Движение.ДатаОкончания			= ВыборкаПоШапкеДокумента.ДатаОкончания;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

Процедура ЗапомнитьСтарыеЗначения()
	
	мСтараяДатаНачалаСобытия = ДатаНачала;
	мСтараяДатаОкончанияСобытия = ДатаОкончания;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущееСобытие", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СобытияКалендаряПользователяОбобщенные.Дата КАК ДатаСобытия
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие = &ТекущееСобытие
	|
	|СГРУППИРОВАТЬ ПО
	|	СобытияКалендаряПользователяОбобщенные.Дата";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		
		ТаблицаЗапроса.Свернуть("ДатаСобытия");
		ТаблицаЗапроса.Сортировать("ДатаСобытия ВОЗР");
		
		мСтараяДатаНачалаСобытия = ТаблицаЗапроса[0].ДатаСобытия;
		мСтараяДатаОкончанияСобытия = ТаблицаЗапроса[ТаблицаЗапроса.Количество() - 1].ДатаСобытия;
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// отражение в календаре пользователя занятость помещений
	ЗапомнитьСтарыеЗначения();
	
	УправлениеКонтактами.ОтразитьЗанятостьПомещений(Ссылка,ДатаНачала,ДатаОкончания,мСтараяДатаНачалаСобытия,мСтараяДатаОкончанияСобытия);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
