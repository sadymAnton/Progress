//++ Spl_Апроф 22.09.2014 (k.russkih@a-prof.ru) Добавил реквизит "СП_ЗаданиеНаПодбор" вынес на форму элемента

Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем СтруктураШапкиДокумента;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  ВыборкаПоШапкеДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок,ТаблПоЗаказам)
//конец изменений 	

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОперации");
	
	// Если в табличной части по заказу ведется обособленный учет,
	// то обязательно заполнение реквизита Организация
	//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
	///Для каждого СтрокаТЧ Из Заказы Цикл
	Для каждого СтрокаТЧ Из ТаблПоЗаказам Цикл
		//Если СтрокаТЧ.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		Если СтрокаТЧ.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		//конец изменений 			
			СтруктураОбязательныхПолей.Вставить("Организация");
			Прервать;
		КонецЕсли
	КонецЦикла;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЗаказы(ТаблицаПоТоварам, ВыборкаПоШапкеДокумента, 
	                                              Отказ, Заголовок, ТабЗаказы)
												  
	ПроверитьОрганизацию = НЕ Организация.Пустая();
	//начало изменений Ожиганов 10.06.2015 36963  
	КонтрольПричины =  Не РольДоступна("Полныеправа") и Дата >= '20150601';
	//конец изменений 
	//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
	Для Каждого СтрокаТЧ Из ТабЗаказы Цикл
	//конец изменений 	
		
		// Проверим даты Заказов, они не должны быть больше даты документа
		Если СтрокаТЧ.ДатаЗаказа > Дата Тогда
			СтрокаСообщения = "Дата и время Заказа в строке " + СокрЛП(ТабЗаказы.Индекс(СтрокаТЧ)+1) + " больше даты и времени документа!";			
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		// Проверим организацию Заказов, она не должна отличаться от организации документа
		Если ПроверитьОрганизацию Тогда
			//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
			//Если СтрокаТЧ.ЗаказПокупателя.Организация <> Организация Тогда
			Если СтрокаТЧ.ОрганизацияЗаказа <> Организация Тогда
			//конец изменений 	
				СтрокаСообщения = "Организация Заказа в строке " + СокрЛП(ТабЗаказы.Индекс(СтрокаТЧ)+1) + " отличается от организации документа!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		//начало изменений Ожиганов 10.06.2015 36963  
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ПричинаЗакрытияЗаказа) и КонтрольПричины Тогда
				СтрокаСообщения = "Не заполнена причина закрытия в строке " + СокрЛП(ТабЗаказы.Индекс(СтрокаТЧ)+1) + "!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;	
		//конец изменений 
		
	КонецЦикла;

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ЗаказПокупателя");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Заказы", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  ВыборкаПоШапкеДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, ВыборкаПоШапкеДокумента, ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, 
								ТаблицаПоЗаказамПоставщикам, ТаблицаПоРезервам, ТаблицаПоРасчетам, Отказ, Заголовок)
								
	ДвиженияПоРегистрамУпр(РежимПроведения, ВыборкаПоШапкеДокумента,	ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, 
								ТаблицаПоЗаказамПоставщикам, ТаблицаПоРезервам, ТаблицаПоРасчетам, Отказ, Заголовок);
								
	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, ТаблицаПоЗаказамПокупателей, Отказ, Заголовок);
	
	// Заполним таблицу регистрации в последовательностях по регл учету
	ТаблицаОтраженияВПоследовательностяхРегл = Новый ТаблицаЗначений;
	ТаблицаОтраженияВПоследовательностяхРегл.Колонки.Добавить("Организация");
	ТаблицаОтраженияВПоследовательностяхРегл.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
	ТаблицаОтраженияВПоследовательностяхРегл.Колонки.Добавить("ОтражатьВНалоговомУчете", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Строка Из ТаблицаПоЗаказамПокупателей Цикл
		Если ЗначениеЗаполнено(Строка.Организация) И Строка.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			
			НайдСтрока = ТаблицаОтраженияВПоследовательностяхРегл.Найти(Строка.Организация, "Организация");
			Если НайдСтрока = Неопределено Тогда
				СтрокаРегистрации=ТаблицаОтраженияВПоследовательностяхРегл.Добавить();
				СтрокаРегистрации.Организация = Строка.Организация;
			Иначе
				СтрокаРегистрации = НайдСтрока;
			КонецЕсли;
			
			СтрокаРегистрации.ОтражатьВБухгалтерскомУчете = СтрокаРегистрации.ОтражатьВБухгалтерскомУчете ИЛИ Строка.ОтражатьВБухгалтерскомУчете;
			СтрокаРегистрации.ОтражатьВНалоговомУчете = СтрокаРегистрации.ОтражатьВНалоговомУчете ИЛИ Строка.ОтражатьВНалоговомУчете;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаОтраженияВПоследовательностяхРегл Цикл
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, Строка.Организация,истина,Строка.ОтражатьВБухгалтерскомУчете,Строка.ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);	
	КонецЦикла;
	//начало изменений
	Если ТаблицаПоЗаказамПокупателей.Найти(истина,"ОбособленныйУчетТоваровПоЗаказамПокупателей") <> неопределено Тогда
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	КонецЕсли;
	//конец изменений
	

КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, ТаблицаЗакрываемыеЗаказы, Отказ, Заголовок)
	Если ТаблицаЗакрываемыеЗаказы.Найти(истина,"ОбособленныйУчетТоваровПоЗаказамПокупателей")=неопределено Тогда
		Возврат;
	КонецЕсли;

	НаборДвижений = Движения.СписанныеТовары;
	
	Сч=0;
	
	ТаблицаСРаздельнымУчетом = ТаблицаЗакрываемыеЗаказы.Скопировать();
	ТаблицаСРаздельнымУчетом.Свернуть("ОбособленныйУчетТоваровПоЗаказамПокупателей,Номенклатура,ХарактеристикаНоменклатуры,Организация,ЗаказПокупателя,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете");
	
	Для каждого ВыборкаЗакрываемыеЗаказы Из ТаблицаСРаздельнымУчетом Цикл
		Если не ВыборкаЗакрываемыеЗаказы.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.НомерСтрокиДокумента=Сч;
		НоваяСтрока.Период = Дата;
		НоваяСтрока.Регистратор = Ссылка;
		НоваяСтрока.Номенклатура = ВыборкаЗакрываемыеЗаказы.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаЗакрываемыеЗаказы.ХарактеристикаНоменклатуры;
		НоваяСтрока.ОтражатьВУправленческомУчете = Истина;
		НоваяСтрока.ОтражатьВБухгалтерскомУчете = ВыборкаЗакрываемыеЗаказы.ОтражатьВБухгалтерскомУчете;
		НоваяСтрока.ОтражатьВНалоговомУчете = ВыборкаЗакрываемыеЗаказы.ОтражатьВНалоговомУчете;
		НоваяСтрока.Организация             = ВыборкаЗакрываемыеЗаказы.Организация;
		НоваяСтрока.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ;

		НоваяСтрока.ЗаказПартии = ВыборкаЗакрываемыеЗаказы.ЗаказПокупателя;
		Сч=Сч+1;
	КонецЦикла;
	
	НаборДвижений.Записать(Истина);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, ВыборкаПоШапкеДокумента, ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, 
								ТаблицаПоЗаказамПоставщикам, ТаблицаПоРезервам, ТаблицаПоРасчетам, Отказ, Заголовок)
								
	Если ВидОперации = Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.ЗакрытиеЗаказов Тогда
	
		Если ТаблицаПоЗаказамПокупателей.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ЗаказыПокупателей;
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоЗаказамПокупателей);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
			/// Кунов О.В., 05.07.2015 - 41421
			НаборДвижений = Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам;
			ТаблицаКомпенсацииОграниченияСкидки = ПРГ_ДопФункцииКлиентСервер.ПолучитьТаблицуКомпенсацииОграниченияСкидки(ЭтотОбъект);
			Если ТаблицаКомпенсацииОграниченияСкидки.Количество() > 0 Тогда
				СтруктТаблицДокумента = Новый Структура;		
				СтруктТаблицДокумента.Вставить("ТаблицаПоСкидкам", ТаблицаКомпенсацииОграниченияСкидки);
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				//>>170516 Степанов Расход с минусом; ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);			
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);			
			КонецЕсли;
			///
			
			//>> Степанов 170815; №42883
			НаборДвижений = Движения.ПЦ_ОграничениеОбъемаПоставки;
			ТаблицаКомпенсацииОграниченияОбъемаПоставки = ПРГ_ДопФункцииКлиентСервер.ПолучитьТаблицуКомпенсацииОграниченияОбъемаПоставки(ЭтотОбъект);
			Если ТаблицаКомпенсацииОграниченияОбъемаПоставки.Количество() > 0 Тогда
				СтруктТаблицДокумента = Новый Структура;		
				СтруктТаблицДокумента.Вставить("ТаблицаПоОбъемуПоставки", ТаблицаКомпенсацииОграниченияОбъемаПоставки);
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);			
			КонецЕсли;
			//<< 
			
		КонецЕсли;

		//Движения по причинам закрытия
		ТаблицаПричинЗакрытия = УправлениеЗаказами.ПодготовитьТаблицуПричинЗакрытияЗаказов(Заголовок, Ссылка, "ЗаказПокупателя","ЗакрытиеЗаказовПокупателей",ТаблицаПоЗаказамПокупателей);
		Если ТаблицаПричинЗакрытия.Количество() > 0 Тогда
			НаборДвижений   = Движения.ПричиныЗакрытияЗаказов;
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоПричинамЗакрытия", ТаблицаПричинЗакрытия);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, Неопределено, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;
		
		Если ТаблицаПоРасчетам.Количество() > 0 Тогда
			
			НаборДвижений = Движения.РасчетыСКонтрагентами;

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоРасчетам", ТаблицаПоРасчетам);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;

	КонецЕсли;
	
	Если ТаблицаПоРазмещению.Количество() > 0 Тогда
		
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоРазмещению", ТаблицаПоРазмещению);
						
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;
	
	Если ТаблицаПоЗаказамПоставщикам.Количество() > 0 Тогда
		
		НаборДвижений = Движения.ЗаказыПоставщикам;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоЗаказамПоставщикам);
						
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;
								
	Если ТаблицаПоРезервам.Количество() > 0 Тогда
		
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоРезервам);
							
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		//m.ionov@a-prof.ru 21.10.2014
		//ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		//----m.ionov@a-prof.ru---
			
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		// Заполнение шапки
		Ответственный = Основание.Ответственный;
		Подразделение = Основание.Подразделение;
		Организация = Основание.Организация;
		ВидОперации = Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.ЗакрытиеЗаказов;

		// Заполнение строки
		НоваяСтрока = Заказы.Добавить();
		НоваяСтрока.ЗаказПокупателя = Основание.Ссылка;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 	
	
	//m.ionov@a-prof.ru 15.10.2014
	Если Не ЭтоНовый() Тогда
		РазрешитьЗапись = Ложь;
		Если ДополнительныеСвойства.Свойство("РазрешитьЗапись", РазрешитьЗапись) = Ложь Тогда
			РазрешитьЗапись = Ложь;
		КонецЕсли;
		
		Если Не РазрешитьЗапись Тогда
			
			ВрОтказ = Ложь;
			
			Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) и Заказы.Количество() > 0 Тогда
				Накладная = АП_ОбщегоНазначенияСервер.ВернутьНакладнуюПоЗаданиюНаПодбор(Заказы[0].ЗаказПокупателя, СП_ЗаданиеНаПодбор);
				ВрОтказ = Не Накладная = Неопределено;
				ИнфоЗаказ = Заказы[0].ЗаказПокупателя;
			Иначе
			    //Значит вводят закрытие в ручную, проверим чтобы не было задания на подбор
				Для каждого СтрокаЗаказ Из Заказы Цикл
								
					ЗаданиеНаПодбор = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(СтрокаЗаказ.ЗаказПокупателя);
					Если ЗначениеЗаполнено(ЗаданиеНаПодбор) Тогда
						Если Не ЗаданиеНаПодбор.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен Тогда
							ВрОтказ = Истина;
							ИнфоЗаказ = СтрокаЗаказ.ЗаказПокупателя;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ВрОтказ Тогда
				Если РольДоступна("АП_Администратор") Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Заказ " + СокрЛП(ИнфоЗаказ) + " запрещено менять, так как есть введенные документы на основании", ВрОтказ);
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("Заказ " + СокрЛП(ИнфоЗаказ) + " запрещено менять, так как есть введенные документы на основании", Отказ);
				КонецЕсли;
			КонецЕсли;	
					
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика" , "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Заказы".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ЗаказПокупателя"             					, "ЗаказПокупателя");
	СтруктураПолей.Вставить("ДатаЗаказа"             						, "ЗаказПокупателя.Дата");
	СтруктураПолей.Вставить("ОрганизацияЗаказа"             					, "ЗаказПокупателя.Организация");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей"   , "ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	//начало изменений Ожиганов 10.06.2015 36963  
	СтруктураПолей.Вставить("ПричинаЗакрытияЗаказа"   , "ПричинаЗакрытияЗаказа");
	//конец изменений 

	РезультатЗапросаПоЗаказамДляПроверки = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Заказы", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоПоЗаказамДляПроверки = РезультатЗапросаПоЗаказамДляПроверки.Выгрузить();
	//конец изменений 

	// Проверим правильность заполнения шапки документа
	//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок,ТаблицаПоПоЗаказамДляПроверки);
	//конец изменений 
	
	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПокупателя");

	
	// Подготовим таблицу товаров для проведения.
	//{11.12.2015 Островерхий заявка №б/н, избавление от блокировок субд 
	//ТаблицаПоЗаказамПокупателей = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияЗаказовПокупателей(Ссылка, МоментВремени(),СписокЗаказов);
	ТаблицаПоЗаказамПокупателей = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияЗаказовПокупателей(Ссылка, '00010101',СписокЗаказов);
	//11.12.2015 Островерхий} 
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоЗаказамПоставщикам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияЗаказовПоставщикам(Ссылка, МоментВремени(),СписокЗаказов);
	
	ТаблицаПоРазмещению = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРазмещения(Ссылка,МоментВремени(),СписокЗаказов,ложь,истина);
	
	//m.ionov@a-prof.ru 21.10.2014
	//ТаблицаПоРезервам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРезервов(Ссылка,МоментВремени(),СписокЗаказов);
	ТаблицаПоРезервам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРезервов(Ссылка,МоментВремени(),СписокЗаказов, "-");
	//----m.ionov@a-prof.ru---
	
	//{11.12.2015 Островерхий заявка №б/н, избавление от блокировок субд  
	//ТаблицаПоРасчетам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРасчетов(МоментВремени(),СписокЗаказов,-1);
	ТаблицаПоРасчетам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРасчетов('00010101',СписокЗаказов,-1);
	//11.12.2015 Островерхий} 
	
	// Проверить заполнение ТЧ "Товары".
	//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
	//ПроверитьЗаполнениеТабличнойЧастиЗаказы(ТаблицаПоЗаказамПокупателей, СтруктураШапкиДокумента, 
	//										Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиЗаказы(ТаблицаПоЗаказамПокупателей, СтруктураШапкиДокумента, 
											Отказ, Заголовок,ТаблицаПоПоЗаказамДляПроверки);
	//конец изменений 											
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, ТаблицаПоЗаказамПоставщикам,
							ТаблицаПоРезервам, ТаблицаПоРасчетам, Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
		
	//m.ionov@a-prof.ru 19.02.2015
	МенятьСтатус = Истина;
	Если ДополнительныеСвойства.Свойство("МенятьСтатус", МенятьСтатус) = Ложь Тогда
		МенятьСтатус = Истина;
	КонецЕсли;
	                              	
	//{06.04.2015 Островерхий заявка №36501 
	//Если МенятьСтатус И ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
   	Если МенятьСтатус Тогда
	//06.04.2015 Островерхий} 		
		ОбновитьСтатусЗаказа(Отказ);
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
КонецПроцедуры

//m.ionov@a-prof.ru 22.10.2014
Функция МожноМенятьРезервирование() Экспорт
	
	МожноМенять = Истина;
	
	Если РольДоступна("АП_Администратор") и ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Разрешен только просмотр документа", Ложь);
		МожноМенять = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
		МожноМенять = Истина;
	Иначе
		МожноМенять = Ложь;
	КонецЕсли;
		
	Возврат МожноМенять
КонецФункции   

Процедура ПриКопировании(ОбъектКопирования)
	СП_ЗаданиеНаПодбор = Документы.СП_ЗаданиеНаПодбор.ПустаяСсылка();
КонецПроцедуры

//m.ionov@a-prof.ru 19.02.2015
Процедура ОбновитьСтатусЗаказа(Отказ)
	//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
	Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ЗакрытиеЗаказовПокупателей.СП_ЗаданиеНаПодбор.Заказ.АП_СтатусЗаказа КАК СтатусЗаказа,
			                      |	ЗакрытиеЗаказовПокупателей.СП_ЗаданиеНаПодбор.Заказ КАК ЗаказПокупателя
			                      |ИЗ
			                      |	Документ.ЗакрытиеЗаказовПокупателей КАК ЗакрытиеЗаказовПокупателей
			                      |ГДЕ
			                      |	ЗакрытиеЗаказовПокупателей.Ссылка = &Ссылка");	
			Запрос.УстановитьПараметр("Ссылка",Ссылка);								  
	Иначе
			Запрос  = Новый Запрос("ВЫБРАТЬ
		                       |	ЗакрытиеЗаказовПокупателейЗаказы.ЗаказПокупателя,
		                       |	ЗакрытиеЗаказовПокупателейЗаказы.ЗаказПокупателя.АП_СтатусЗаказа КАК СтатусЗаказа
		                       |ИЗ
		                       |	Документ.ЗакрытиеЗаказовПокупателей.Заказы КАК ЗакрытиеЗаказовПокупателейЗаказы
		                       |ГДЕ
		                       |	ЗакрытиеЗаказовПокупателейЗаказы.Ссылка = &Ссылка");
							   
			Запрос.УстановитьПараметр("Ссылка",Ссылка);

	КонецЕсли;	
	ТаблЗаказов = Запрос.Выполнить().Выгрузить();
		
		//Для каждого СтрТЧ Из Заказы Цикл
	Для каждого СтрТЧ Из ТаблЗаказов  Цикл				
		//конец изменений 	
			
			Если НЕ ЗначениеЗаполнено(СтрТЧ.ЗаказПокупателя) Тогда
				Продолжить;	
			КонецЕсли; 
			
			//Инициализируем изменение статуса заказа
			Попытка
					АП_ОбщегоНазначенияСервер.ПростоПоменятьСтатусУЗаказа(СтрТЧ.ЗаказПокупателя,СтрТЧ.СтатусЗаказа,АП_ОбщегоНазначенияСервер.ВернутьСтатусЗаказа(СтрТЧ.ЗаказПокупателя));				
			Исключение
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
			КонецПопытки; 
				
	КонецЦикла;	
		
	//Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
	//	//Инициализируем изменение статуса заказа
	//	Попытка
	//		
	//		ОбъектЗаказ = СП_ЗаданиеНаПодбор.Заказ.ПолучитьОбъект();
	//		ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
	//		ОбъектЗаказ.Записать(РежимЗаписиДокумента.Запись);
	//		ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
	//		
	//	Исключение
	//		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	//	КонецПопытки;
	//	
	////{06.04.2015 Островерхий заявка №36501 
	//Иначе
	//	
	//	Для каждого СтрТЧ Из Заказы Цикл
	//		
	//		Если НЕ ЗначениеЗаполнено(СтрТЧ.ЗаказПокупателя) Тогда
	//			Продолжить;	
	//		КонецЕсли; 
	//		
	//		//Инициализируем изменение статуса заказа
	//		Попытка
	//			
	//			ОбъектЗаказ = СтрТЧ.ЗаказПокупателя.ПолучитьОбъект();
	//			ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
	//			ОбъектЗаказ.Записать(РежимЗаписиДокумента.Запись);
	//			ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
	//			
	//		Исключение
	//			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	//		КонецПопытки;
	//	
	//	КонецЦикла; 
	////06.04.2015 Островерхий}		
	////конец изменений  
	
КонецПроцедуры

//----m.ionov@a-prof.ru---

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
