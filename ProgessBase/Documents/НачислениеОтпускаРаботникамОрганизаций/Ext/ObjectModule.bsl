////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем мСведенияОВидахРасчета;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьДанныеОрганизации()

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбменСведениямиОПособияхСФСС.ДанныеОрганизацииДляЗаявленияНаВыплатуПособия(Организация, Дата));

КонецПроцедуры

Процедура ЗаполнитьДанныеСотрудника()

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбменСведениямиОПособияхСФСС.ДанныеСотрудникаДляЗаявленияНаВыплатуПособия(Организация, Сотрудник, Дата));

КонецПроцедуры

Процедура Автозаполнение(Режим = Неопределено) Экспорт
	
	Если Режим = "ДанныеСотрудника" Тогда
		ЗаполнитьДанныеСотрудника()
	ИначеЕсли Режим = "ДанныеСтрахователя" Тогда
		ЗаполнитьДанныеОрганизации()
	Иначе	
		ЗаполнитьДанныеОрганизации();
		ЗаполнитьДанныеСотрудника();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.НачислениеОтпускаРаботникамОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,"Проведен, Дата, Номер, ПометкаУдаления, ПериодРегистрации, Комментарий, Ответственный, ПерерассчитываемыйДокумент, ДатаВыплатыДохода");
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
// Параметры:
//		РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа. 
//				Значение Истина для каждого из элементов структуры означает необходимость расчета 
//				соответствующей табличной части документа
//		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа
Процедура Рассчитать(РассчитываемыеТаблицы, РежимПерерасчета = Ложь, ВыборкаПоШапкеДокумента = Неопределено) Экспорт
	
	//Перед вызовом процедуры документ должнен быть записан, движения должны быть удалены 
	
	Отказ = Ложь;
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Создадим наборы записей используемых регистров 
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
		
	НаборДополнительныеНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДополнительныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;
	
	Если Не РассчитываемыеТаблицы.РасчетСреднего Тогда
		
		// запишем движения по среднему заработку для расчета начислений
		// получим реквизиты табличной части РасчетСреднего 
		РезультатЗапросаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего();
		ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
		
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок);
			Если Не Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, НаборРасчетСреднего);
			КонецЕсли;
		КонецЦикла;
		
		НаборРасчетСреднего.Записать();
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если это документ-исправление, тогда добавим сторно-записи из исправляемого документа.
	ПроведениеРасчетов.СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент,ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления);
	
	// Начисления документа.
	СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления);
	
	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
	ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
	ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
	ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
	ТаблицаСторноЗаписей.Колонки.Удалить("СторнируемыйДокумент");
	ТаблицаСторноЗаписей.Колонки.Регистратор.Имя = "СторнируемыйДокумент";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		
		// новая запись движений
		Движение = НаборОсновныеНачисления.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение,СтрокаСторно);
		
		// Свойства
		Движение.Сторно	= Истина;
		Движение.Авторасчет	= Истина;
		
	КонецЦикла;
	
	// получим список зависимых начислений
	Если ТаблицаСторноЗаписей.Количество() <> 0 Тогда
		// если таблица сторно-записей не пустая, получим таблицу
		// начислений, зависисяцих от тех начислений, которые зарегистрированы,
		
		ТаблицаОсновныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийОсновные(НаборОсновныеНачисления.Выгрузить());
		Для каждого СтрокаТаблицы Из ТаблицаОсновныхНачислений Цикл
			
			Если СтрокаТаблицы.Начислить > 0 Тогда
				
				// начисление зависит от сторнирующего, добавим не сторно
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.СторнируемыйДокумент = Неопределено;
				Движение.Сторно	= Ложь;
				Движение.Авторасчет	= Истина;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.Сторнировать > 0 Тогда
				
				// начисление зависит от сторнируемого, добавим сторно
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.Сторно	= Истина;
				Движение.Авторасчет	= Ложь;
				
				Движение = НаборОсновныеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
				Движение.СторнируемыйДокумент = Неопределено;
				Движение.Сторно	= Ложь;
				Движение.Авторасчет	= Истина;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		ТаблицаДополнительныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийДополнительные(ТаблицаСторноЗаписей);
		Для каждого СтрокаТаблицы Из ТаблицаДополнительныхНачислений Цикл
			
			Движение = НаборДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
			Движение.Сторно	= Истина;
			Движение.Авторасчет	= Истина;
			
			Движение = НаборДополнительныеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТаблицы);
			Движение.СторнируемыйДокумент = Неопределено;
			Движение.Сторно	= Ложь;
			Движение.Авторасчет	= Истина;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Очистим начисления
	Начисления.Очистить();
	
	// рассчитываем записи начислений и если надо, записи расчета среднего заработка
	Если РассчитываемыеТаблицы.Начисления Тогда
		
		Если НаборОсновныеНачисления.Количество() <> 0 Тогда
			Если РассчитываемыеТаблицы.РасчетСреднего Тогда
				ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,,Истина);
			Иначе
				ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
			КонецЕсли;
		КонецЕсли;
		
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			
			НаборОсновныеНачисления.Записать(Истина, Истина);
			
			Если РассчитываемыеТаблицы.РасчетСреднего Тогда
				ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
			Иначе
				ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
			КонецЕсли;
			НаборДополнительныеНачисления.Записать(Истина, Истина);
			
			// повторный расчет на случай зависимости основных начислений от дополнительных
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,,Истина);
			
		КонецЕсли;
		// перепишем записи основных начислений в документ
		ЗаписиНачислений = НаборОсновныеНачисления.Выгрузить();
		ЗаписиНачислений.Колонки.ПериодДействияНачало.Имя = "ДатаНачала";
		ЗаписиНачислений.Колонки.ПериодДействияКонец.Имя = "ДатаОкончания";
		Начисления.Загрузить(ЗаписиНачислений);
		
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			// перепишем записи начислений в документ
			ЗаписиНачислений = НаборДополнительныеНачисления.Выгрузить();
			ЗаписиНачислений.Колонки.БазовыйПериодНачало.Имя = "ДатаНачала";
			ЗаписиНачислений.Колонки.БазовыйПериодКонец.Имя  = "ДатаОкончания";
			
			Для каждого СтрокаТаблицы Из ЗаписиНачислений Цикл
				СтрокаТабличнойЧасти = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли РассчитываемыеТаблицы.РасчетСреднего Тогда
		НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		НаборДополнительныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		Если НаборОсновныеНачисления.Количество() > 0 Тогда
			ПроведениеРасчетовПереопределяемый.СформироватьИЗаписатьДанныеРасчетаСреднего("ОсновныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
		КонецЕсли;
		Если НаборДополнительныеНачисления.Количество() > 0 Тогда
			ПроведениеРасчетовПереопределяемый.СформироватьИЗаписатьДанныеРасчетаСреднего("ДополнительныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
		КонецЕсли;
	КонецЕсли;
	
	Если РассчитываемыеТаблицы.РасчетСреднего Тогда
		
		// перепишем записи расчета среднего заработка в документ
		РасчетСреднегоПоКалендарным.Очистить();
		РасчетСреднегоПоШестидневке.Очистить();
		
		ВременнаяТЗ = НаборРасчетСреднего.Выгрузить();
		ВременнаяТЗ.Свернуть("СпособРасчета,БазовыйПериодКонец,БазовыйПериодНачало,ВидРасчета,КоэффициентИндексации,НормаПоПятидневке,ОтработаноДней,ОтработаноПоПятидневке,ОтработаноЧасов,Результат,ЧислоМесяцев");
		
		// перепишем записи расчета среднего заработка в документ
		Для Каждого СтрокаНабора Из ВременнаяТЗ Цикл
			Если СтрокаНабора.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням Тогда
				СтрокаТЧ = РасчетСреднегоПоКалендарным.Добавить();
				
			Иначе
				СтрокаТЧ = РасчетСреднегоПоШестидневке.Добавить();
				
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаНабора);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПроведениеРасчетовПереопределяемый.ЗаписыватьДвиженияПриРасчетеДокументаСреднегоЗаработка(РассчитываемыеТаблицы, РежимПерерасчета) Тогда
		
		Если НаборОсновныеНачисления.Модифицированность() Тогда
			НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		КонецЕсли;
		Если НаборДополнительныеНачисления.Модифицированность() Тогда
			НаборДополнительныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		КонецЕсли;
		Если НаборРасчетСреднего.Модифицированность() Тогда
			НаборРасчетСреднего.Записать(Истина, Ложь, Истина, Ложь);
		КонецЕсли;
		
		ПроведениеРасчетовПереопределяемый.ВыполнитьДополнительныеДействияПриРасчетеДокументаСреднегоЗаработка(ЭтотОбъект);
	КонецЕсли;
	
	Если РассчитываемыеТаблицы.Начисления Тогда
		РассчитатьНДФЛ(Ложь, Ложь, ВыборкаПоШапкеДокумента);
	КонецЕсли;
		
	Если Не РежимПерерасчета тогда

		// Удаляем движения для режима интерактивного расчета 
		НаборОсновныеНачисления.Очистить();
		НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		
		НаборДополнительныеНачисления.Очистить();
		НаборДополнительныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		
		НаборРасчетСреднего.Очистить();
		НаборРасчетСреднего.Записать(Истина, Ложь, Истина, Ложь);
		
	КонецЕсли;
		
КонецПроцедуры // РассчитатьНачисления()

// Процедура рассчитывает НДФЛ
// и заполняет реквизиты табличной части
//
Процедура РассчитатьНДФЛ(КомментироватьРасчет = Ложь, ПроводитьПроверки = Истина, ВыборкаПоШапкеДокумента = Неопределено) Экспорт
	
	Отказ = Ложь;

	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		// Получим реквизиты шапки из запроса
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	Если ПроводитьПроверки Тогда
		
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, "");
		КонецЦикла;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ВыполнитьПрочиеДвиженияДокумента(ЭтотОбъект, ВыборкаПоШапкеДокумента, Отказ, "");
	ДоходыИзДокумента = Движения.НДФЛСведенияОДоходах.Выгрузить();
	Для каждого НаборЗаписей Из Движения Цикл
		НаборЗаписей.Очистить()
	КонецЦикла;
	
	СтруктураДанныхДляПромежуточногоРасчета = ПроведениеРасчетов.ДанныеДляПромежуточногоРасчетаНДФЛ(ВыборкаПоШапкеДокумента.Физлицо, ВыборкаПоШапкеДокумента);	
	
	// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ
	СписокФизлицТекст = 
	"ВЫБРАТЬ
	|	&Физлицо КАК Физлицо";
	ДополнительныеПараметрыЗапросаНДФЛ = Новый Структура("Физлицо", ВыборкаПоШапкеДокумента.Физлицо);
	
	
	// получение результата НДФЛ по ставке 13 процентов
	//Blik 070617 66417 н 
	Если ВыборкаПоШапкеДокумента.Физлицо.ПРГ_НеНачислятьНДФЛ Тогда
		ДанныеНДФЛ = Неопределено;	
	Иначе
		ДанныеНДФЛ = ПроведениеРасчетов.ПолучитьДанныеНДФЛПоРегистратору(Неопределено, Неопределено, ПериодРегистрации, Организация, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, Ссылка, СписокФизлицТекст, ДополнительныеПараметрыЗапросаНДФЛ, Ложь, КомментироватьРасчет, Ложь, ДоходыИзДокумента, СтруктураДанныхДляПромежуточногоРасчета.Налоги, СтруктураДанныхДляПромежуточногоРасчета.Вычеты, Истина);
	КонецЕсли;
	//Blik 070617 66417 к
	Если ДанныеНДФЛ <> Неопределено Тогда
		МесяцыПолученияДохода = Новый Массив;
		Для каждого СтрокаТЗ Из ДоходыИзДокумента Цикл               
			МесяцыПолученияДохода.Добавить(НачалоМесяца(СтрокаТЗ.Период));
		КонецЦикла;
		ПроведениеРасчетов.ВписатьПромежуточныйНДФЛвДокумент(НДФЛ, ДанныеНДФЛ, ВыборкаПоШапкеДокумента.ДатаВыплатыДохода, МесяцыПолученияДохода);


		
		ПроведениеРасчетовПереопределяемый.ВыполнитьДополнительныеДействияПриРасчетеНДФЛ(ЭтотОбъект);
	
	КонецЕсли;
	
КонецПроцедуры  // РассчитатьНДФЛ

// Выполняет перерасчет по заданному списку физлиц
// Параметры
//	Физлица - массив - ссылки на физлиц
// Возвращаемое значение
//	Нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	НДФЛ.Очистить();
	Движения.НДФЛСведенияОДоходах.Очистить();
	Движения.НДФЛСведенияОДоходах.ОбменДанными.Загрузка = Истина; 
	Движения.НДФЛСведенияОДоходах.Записать();
	
	// Выполним полный перерасчет документа
	Рассчитать(Новый Структура("Начисления,РасчетСреднего",Истина,Истина), Истина, ВыборкаПоШапкеДокумента);
	
	// Зафиксируем данные табличных частей после расчета
	Записать();
	
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПереписатьПрочиеДвиженияПриПерерасчете(ЭтотОбъект, ВыборкаПоШапкеДокумента);
	
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//	
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьСтруктуруРегламентированныхФорм(ЭтотОбъект);
	СтруктураПечатныхФорм.Вставить("РасчетОсновногоОтпуска",		"Расчет среднего основного отпуска");
	СтруктураПечатныхФорм.Вставить("РасчетДополнительногоОтпуска",	"Расчет среднего дополнительного отпуска");
	СтруктураПечатныхФорм.Вставить("РасчетКомпенсацииОтпуска",		"Расчет среднего компенсации отпуска");
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция ОсновнойВариантРасчетаДокумента() Экспорт

	Если ОсновнойОтпуск Тогда
		Если ПорядокРасчетаОсновногоОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням Тогда
			Возврат Новый Структура("ВидРасчета, СпособРасчета", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
		Иначе
			Возврат Новый Структура("ВидРасчета, СпособРасчета", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка, Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)	
		КонецЕсли;
	ИначеЕсли ДополнительныйОтпуск Тогда

		Возврат Новый Структура("ВидРасчета, СпособРасчета", ВидРасчетаДополнительногоОтпуска, ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ВидРасчетаДополнительногоОтпуска).СпособРасчета);
		
	ИначеЕсли КомпенсацияОтпуска Тогда
		Если ПорядокРасчетаКомпенсацииОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням Тогда
			Возврат Новый Структура("ВидРасчета, СпособРасчета", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения, Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)	
		Иначе
			Возврат Новый Структура("ВидРасчета, СпособРасчета", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения, Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)	
		КонецЕсли;
	Иначе 
		Возврат Новый Структура("ВидРасчета, СпособРасчета",Неопределено,Неопределено)
	КонецЕсли;
	
КонецФункции // ОсновнойСпособРасчетаСреднего()

Процедура ОпределитьРасчетныйПериод() Экспорт

	Если ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда 
		
		ВидРасчета = ОсновнойВариантРасчетаДокумента().ВидРасчета;
		Если ЗначениеЗаполнено(ВидРасчета) Тогда
			СведениеОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ВидРасчета);
			МесяцевРасчетногоПериода = ?(СведениеОВидеРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору,СведениеОВидеРасчета.ПериодРасчетаСреднегоЗаработка,НачислениеОтпускаРаботникамОрганизацийПереопределяемый.КоличествоМесяцевРасчетаПоЗакону(ЭтотОбъект));
		Иначе
			МесяцевРасчетногоПериода = 12
		КонецЕсли;
		
		ПериодРасчетаСреднегоЗаработкаНачало = ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), - МесяцевРасчетногоПериода);
		ПериодРасчетаСреднегоЗаработкаОкончание = НачалоМесяца(ДатаНачалаСобытия) - 1;
	Иначе
		ПериодРасчетаСреднегоЗаработкаНачало = "";
		ПериодРасчетаСреднегоЗаработкаОкончание = ""
	КонецЕсли;

КонецПроцедуры

#Если ТолстыйКлиентОбычноеПриложение Тогда

Функция ПечатьЗаявления()

	СтруктураДанныхЗаявления = ОбменСведениямиОПособияхСФСС.СтруктураДанныхДляПечатиЗаявленийВФССОВыплатеПособия();
	
	СтруктураДанныхЗаявления.ВидПособия = Перечисления.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеОтпускаРаботникамОрганизаций.Дата КАК ДатаПодачиЗаявления,
	|	НачислениеОтпускаРаботникамОрганизаций.ПеречислятьПособиеПочтовымПереводом,
	|	НачислениеОтпускаРаботникамОрганизаций.Банк,
	|	НачислениеОтпускаРаботникамОрганизаций.НаименованиеБанка,
	|	НачислениеОтпускаРаботникамОрганизаций.БИКБанка,
	|	НачислениеОтпускаРаботникамОрганизаций.КоррСчетБанка,
	|	НачислениеОтпускаРаботникамОрганизаций.НомерЛицевогоСчета,
	|	НачислениеОтпускаРаботникамОрганизаций.Фамилия + "" "" + НачислениеОтпускаРаботникамОрганизаций.Имя + "" "" + НачислениеОтпускаРаботникамОрганизаций.Отчество КАК ФИОСотрудника,
	|	НачислениеОтпускаРаботникамОрганизаций.Сотрудник.Физлицо.ДатаРождения КАК ДатаРождения,
	|	НачислениеОтпускаРаботникамОрганизаций.Сотрудник.Физлицо.Пол КАК ПолСотрудника,
	|	НачислениеОтпускаРаботникамОрганизаций.Сотрудник.Физлицо.ИНН КАК ИННСотрудника,
	|	НачислениеОтпускаРаботникамОрганизаций.Сотрудник.Физлицо.СтраховойНомерПФР КАК СНИЛССотрудника,
	|	НачислениеОтпускаРаботникамОрганизаций.АдресРегистрации,
	|	НачислениеОтпускаРаботникамОрганизаций.Телефон,
	|	НачислениеОтпускаРаботникамОрганизаций.АдресПочтовый КАК АдресПроживания,
	|	НачислениеОтпускаРаботникамОрганизаций.Сотрудник.ВидЗанятости КАК ВидЗанятостиСотрудника,
	|	НачислениеОтпускаРаботникамОрганизаций.ВидДокумента КАК УдостоверениеЛичностиВид,
	|	НачислениеОтпускаРаботникамОрганизаций.СерияДокумента КАК УдостоверениеЛичностиСерия,
	|	НачислениеОтпускаРаботникамОрганизаций.НомерДокумента КАК УдостоверениеЛичностиНомер,
	|	НачислениеОтпускаРаботникамОрганизаций.ДатаВыдачиДокумента КАК УдостоверениеЛичностиДата,
	|	НачислениеОтпускаРаботникамОрганизаций.ДатаДействияДокумента КАК УдостоверениеЛичностиСрокДействия,
	|	НачислениеОтпускаРаботникамОрганизаций.КемВыданДокумент КАК УдостоверениеЛичностиКемВыдан,
	|	ЕСТЬNULL(ФИОФизлица.Фамилия + ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизлица.Имя, 1, 1) <> """"
	|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизлица.Имя, 1, 1) + "".""
	|			ИНАЧЕ """"
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизлица.Отчество, 1, 1) <> """"
	|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизлица.Отчество, 1, 1) + "".""
	|			ИНАЧЕ """"
	|		КОНЕЦ, НачислениеОтпускаРаботникамОрганизаций.Уполномоченный.Наименование) КАК ФИОРуководителя,
	|	НачислениеОтпускаРаботникамОрганизаций.ДолжностьУполномоченного.Наименование КАК ДолжностьРуководителя,
	|	НачислениеОтпускаРаботникамОрганизаций.Организация.НаименованиеСокращенное КАК НаименованиеОрганизации,
	|	НачислениеОтпускаРаботникамОрганизаций.Организация.НаименованиеТерриториальногоОрганаФСС КАК НаименованиеТерриториальногоОрганаФСС,
	|	НачислениеОтпускаРаботникамОрганизаций.ТелефонСоставителя,
	|	НачислениеОтпускаРаботникамОрганизаций.Фамилия,
	|	НачислениеОтпускаРаботникамОрганизаций.Имя,
	|	НачислениеОтпускаРаботникамОрганизаций.Отчество,
	|	НачислениеОтпускаРаботникамОрганизаций.НаличиеКартыМИР,
	|	НачислениеОтпускаРаботникамОрганизаций.НомерКартыМИР
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК НачислениеОтпускаРаботникамОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ФизЛицо) КАК ФИОФизлица
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НачислениеОтпускаРаботникамОрганизаций.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ФизЛицо", Уполномоченный);
	Выборка = Запрос.Выполнить().Выбрать();
	Если  Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(СтруктураДанныхЗаявления, Выборка);
	КонецЕсли;

	ТабДокумент = ОбменСведениямиОПособияхСФСС.ПечатьЗаявлениеВФССОВыплатеПособия(СтруктураДанныхЗаявления, "ЗаявлениеВФССОВыплатеПособия_2012");
	Возврат ТабДокумент
	
КонецФункции // ПечатьЗаявления()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//	Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	ПроверятьПроведенность = ИмяМакета <> "СправкаЧистыйБланк" И ИмяМакета <> "ЗаявлениеЧистыйБланк";
	Если ПроверятьПроведенность И Не Проведен Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после расчета и проведения!");
		Возврат Неопределено;
	КонецЕсли;
		
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "РасчетОсновногоОтпуска" Тогда
		
		Если Не ОсновнойОтпуск Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("По документу не оплачивается основной отпуск!");
		Иначе
			ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
			ВыборкаПоШапкеДокумента.Следующий();
			ТабДокумент = ФормированиеПечатныхФормЗК.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачалаСобытия, ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка, "с " + Формат(ДатаНачалаОсновногоОтпуска,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончанияОсновногоОтпуска,"ДФ=dd.MM.yyyy"), ?(ПорядокРасчетаОсновногоОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке), НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ИспользуетсяСреднеЧасовойЗаработок(ЭтотОбъект));
			Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка основного отпуска)");
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "РасчетДополнительногоОтпуска" Тогда
		Если Не ДополнительныйОтпуск Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("По документу не оплачивается дополнительный отпуск!");
			
		Иначе
			ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
			ВыборкаПоШапкеДокумента.Следующий();
			ТабДокумент = ФормированиеПечатныхФормЗК.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачалаСобытия, ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка, "с " + Формат(ДатаНачалаДополнительногоОтпуска,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончанияДополнительногоОтпуска,"ДФ=dd.MM.yyyy"), ВидРасчетаДополнительногоОтпуска.СпособРасчета, НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ИспользуетсяСреднеЧасовойЗаработок(ЭтотОбъект));
			Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка дополнительного отпуска)");
			
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "РасчетКомпенсацииОтпуска" Тогда
		Если Не КомпенсацияОтпуска Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("По документу не оплачивается компенсация отпуска!");
			
		Иначе
			ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
			ВыборкаПоШапкеДокумента.Следующий();
			ТабДокумент = ФормированиеПечатныхФормЗК.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачалаСобытия, ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка, "за " + ДнейЧасовКомпенсацииОтпуска + " дней(часов) компенсации отпуска", ?(ПорядокРасчетаКомпенсацииОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке), НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ИспользуетсяСреднеЧасовойЗаработок(ЭтотОбъект));
			Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка компенсации отпуска)");
			
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "ЗаявлениеЧистыйБланк" Тогда                                                                                                         
		ТабДокумент = ОбменСведениямиОПособияхСФСС.ПечатьЗаявлениеВФССОВыплатеПособия(ОбменСведениямиОПособияхСФСС.СтруктураДанныхДляПечатиЗаявленийВФССОВыплатеПособия(), "ЗаявлениеВФССОВыплатеПособия_2012");
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, , , ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект, Метаданные().Синоним) + " (бланк заявления)", , ТабДокумент);
	ИначеЕсли ИмяМакета = "ЗаявлениеНаПособие" Тогда                                                                                                         
		ТабДокумент = ПечатьЗаявления();
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, , , ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект, Метаданные().Синоним) + " (заявление на пособие)", , ТабДокумент);
	ИначеЕсли ЗначениеЗаполнено(ИмяМакета) Тогда
		
		ТабДокумент = НачислениеОтпускаРаботникамОрганизацийПереопределяемый.РегламентированнаяПечатнаяФорма(ЭтотОбъект, ИмяМакета);
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ОписаниеРегламентированнойПечатнойФормы(ЭтотОбъект, ИмяМакета));
		
	КонецЕсли;
		
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Возврат Неопределено;
	
КонецФункции // Печать()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Выполняет проверку непрерывности интервалов начислений
//
Процедура ПроверитьНепрерывностьЗаписейНачислений(Отказ)
	
	Если Начисления.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	ТНачислений = Начисления.Выгрузить();
	ТНачислений.Сортировать("ДатаНачала");
	
	ПредыдущаяДатаОкончания = '00010101';
	СтрокаНеПервая = Ложь;
	Для Каждого Строка ИЗ ТНачислений Цикл
		
		Если Строка.Сторно ИЛИ Строка.ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни
			И Строка.ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка
			И Строка.ВидРасчета <> ВидРасчетаДополнительногоОтпуска Тогда
			Возврат;
		КонецЕсли;
		
		// если встретили не первую строку начислений
		Если СтрокаНеПервая Тогда
			// строка не первая
			Если Строка.ДатаНачала <> ПредыдущаяДатаОкончания + мДлинаСуток Тогда
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табл. части ""Начисления"": ";
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "нарушено требование непрерывности записей начислений!", Отказ);
			КонецЕсли;
			
		Иначе
			СтрокаНеПервая = Истина;
			
		КонецЕсли;
		ПредыдущаяДатаОкончания = Строка.ДатаОкончания;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьНепрерывностьЗаписейНачислений()

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
//
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления) Экспорт
	
	ВидУчетаВремени = ВыборкаПоШапкеДокумента.ВидУчетаВремени; 
	
	// сформируем записи начислений по основному отпуску
	Если ВыборкаПоШапкеДокумента.ОсновнойОтпуск Тогда
		
		МассивДат = Новый Массив;
		ТекущаяДатаНачала = ДатаНачалаОсновногоОтпуска;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияОсновногоОтпуска);
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			МассивДат.Добавить(НачалоМесяца(ТекущаяДатаНачала));
			
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияОсновногоОтпуска);
		КонецЦикла;
		МесяцыРасчетаВремениПоТабелю = ПолучитьГрафикРаботыСотрудника(ВыборкаПоШапкеДокумента.Сотрудник, МассивДат);
		ТекущаяДатаНачала = ДатаНачалаОсновногоОтпуска;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияОсновногоОтпуска);
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			// строка движений
			Движение = НаборОсновныеНачисления.Добавить();
			
			// Свойства
			Движение.ПериодРегистрации			= ПериодРегистрации;
			Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
			Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
			Движение.ВидРасчета					= ВыборкаПоШапкеДокумента.ВидРасчетаОсновногоОтпуска;
			
			// Измерения
			Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
			Движение.ФизЛицо					= ВыборкаПоШапкеДокумента.ФизЛицо;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			
			// Реквизиты
			Движение.Показатель1				= ВыборкаПоШапкеДокумента.ПроцентОплатыОсновногоОтпуска;
			Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
			
			Если МесяцыРасчетаВремениПоТабелю.Найти(НачалоМесяца(ТекущаяДатаНачала)) = Неопределено Тогда
				Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.ГрафикРаботы;
			Иначе
				Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.Сотрудник;
			КонецЕсли; 
			
			Движение.ВидУчетаВремени			= ВидУчетаВремени;
			Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
			Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
			Движение.ДатаНачалаСобытия			= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
			Движение.Авторасчет					= Истина;
			
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияОсновногоОтпуска);
			
		КонецЦикла;
	КонецЕсли;
	
	// сформируем записи начислений по дополнительному отпуску
	Если ВыборкаПоШапкеДокумента.ДополнительныйОтпуск Тогда
		
		МассивДат = Новый Массив;
		ТекущаяДатаНачала = ДатаНачалаДополнительногоОтпуска;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияДополнительногоОтпуска);
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			МассивДат.Добавить(НачалоМесяца(ТекущаяДатаНачала));
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияДополнительногоОтпуска);
		КонецЦикла;
		МесяцыРасчетаВремениПоТабелю = ПолучитьГрафикРаботыСотрудника(ВыборкаПоШапкеДокумента.Сотрудник, МассивДат);
	
		ТекущаяДатаНачала = ДатаНачалаДополнительногоОтпуска;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияДополнительногоОтпуска);
		Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
			// строка движений
			Движение = НаборОсновныеНачисления.Добавить();
			
			// Свойства
			Движение.ПериодРегистрации			= ПериодРегистрации;
			Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
			Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
			Движение.ВидРасчета					= ВыборкаПоШапкеДокумента.ВидРасчетаДополнительногоОтпуска;
			
			// Измерения
			Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
			Движение.ФизЛицо					= ВыборкаПоШапкеДокумента.ФизЛицо;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			
			// Реквизиты
			Движение.Показатель1				= ВыборкаПоШапкеДокумента.ПроцентОплатыДополнительногоОтпуска;
			Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
			Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
			
			Если МесяцыРасчетаВремениПоТабелю.Найти(НачалоМесяца(ТекущаяДатаНачала)) = Неопределено Тогда
				Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.ГрафикРаботы;
			Иначе
				Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.Сотрудник;
			КонецЕсли; 
 
			Движение.ВариантАлгоритмаРасчета	= ВыборкаПоШапкеДокумента.ВариантАлгоритмаРасчета;
			Движение.ВидУчетаВремени			= ВидУчетаВремени;
			Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
			Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
			Движение.ДатаНачалаСобытия			= ДатаНачалаСобытия;
			Движение.Авторасчет					= Истина;
			
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончанияДополнительногоОтпуска);
			
		КонецЦикла;
	КонецЕсли; 
	
	// сформируем записи начислений по компенсации отпуска
	Если ВыборкаПоШапкеДокумента.КомпенсацияОтпуска Тогда
		Движение = НаборДополнительныеНачисления.Добавить();
		
		// Свойства
		Движение.ПериодРегистрации							= Мин(КонецМесяца(ПериодРегистрации),Макс(ПериодРегистрации,ВыборкаПоШапкеДокумента.Дата));
		Движение.ВидРасчета									= ВыборкаПоШапкеДокумента.ВидРасчетаКомпенсацииОтпуска;
		
		// Измерения
		Движение.Сотрудник									= ВыборкаПоШапкеДокумента.Сотрудник;
		Движение.ФизЛицо									= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.Организация								= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.ОплаченоДнейЧасов							= ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииОтпуска;
		
		// Реквизиты
		Движение.Показатель1								= ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииОтпуска;
		Движение.ГрафикРаботы								= ВыборкаПоШапкеДокумента.ГрафикРаботы;
		Движение.ВидУчетаВремени							= ВыборкаПоШапкеДокумента.ВидУчетаВремени;
		Движение.ДатаНачалаСобытия							= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
		Движение.ПодразделениеОрганизации					= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		Движение.ОбособленноеПодразделение					= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		
		Движение.ПериодРасчетаСреднегоЗаработкаНачало		= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
		Движение.ПериодРасчетаСреднегоЗаработкаОкончание	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
		Движение.Авторасчет									= Истина;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоНачислениям()

// Формирует соответствие в котором находятся действующие графики сотрудника 
// на указанные даты
Функция ПолучитьГрафикРаботыСотрудника(Сотрудник, ДатыПолучения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("СписокДат", ДатыПолучения);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК ДатаПолучения
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &Сотрудник
	|	И ГрафикиРаботыПоВидамВремени.Месяц В(&СписокДат)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДатаПолучения");
	
КонецФункции // ПолучитьГрафикРаботыСотрудника()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Сотрудник",				Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",		ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("МесяцевРасчетаПоЗакону",	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.КоличествоМесяцевРасчетаПоЗакону(ЭтотОбъект));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеОтпускаРаботникамОрганизаций.Ссылка,
	|	НачислениеОтпускаРаботникамОрганизаций.Дата,
	|	НачислениеОтпускаРаботникамОрганизаций.ПериодРегистрации,
	|	НачислениеОтпускаРаботникамОрганизаций.Организация,
	|	НачислениеОтпускаРаботникамОрганизаций.Сотрудник,
	|	НачислениеОтпускаРаботникамОрганизаций.Физлицо,
	|	НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаСобытия,
	|	НачислениеОтпускаРаботникамОрганизаций.ДатаВыплатыДохода,
	|	НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаОсновногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ДатаОкончанияОсновногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.КоличествоДнейОсновногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ПорядокРасчетаОсновногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаДополнительногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ДатаОкончанияДополнительногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.КоличествоДнейДополнительногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ВидРасчетаДополнительногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ПроцентОплатыДополнительногоОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ПорядокРасчетаКомпенсацииОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ДнейЧасовКомпенсацииОтпуска,
	|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,
	|	НачислениеОтпускаРаботникамОрганизаций.ПерерассчитываемыйДокумент,
	|	НачислениеОтпускаРаботникамОрганизаций.ОсновнойОтпуск,
	|	НачислениеОтпускаРаботникамОрганизаций.ДополнительныйОтпуск,
	|	НачислениеОтпускаРаботникамОрганизаций.КомпенсацияОтпуска,
	|	НачислениеОтпускаРаботникамОрганизаций.ПериодРасчетаСреднегоЗаработкаНачало,
	|	НачислениеОтпускаРаботникамОрганизаций.ПериодРасчетаСреднегоЗаработкаОкончание
	|ПОМЕСТИТЬ ВТДокумент
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК НачислениеОтпускаРаботникамОрганизаций
	|ГДЕ
	|	НачислениеОтпускаРаботникамОрганизаций.Ссылка = &ДокументСсылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,",НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьДополнительноеПолеЗапросаПоДокументу());
	Запрос.Выполнить();
	
	Если ОсновнойОтпуск Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПараметрыВидаРасчетаОсновногоОтпуска.СпособРасчета
		|ПОМЕСТИТЬ ВТДанныеОсновногоОтпуска
		|ИЗ
		|	ВТДокумент КАК Отпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаОсновногоОтпуска
		|		ПО (ПараметрыВидаРасчетаОсновногоОтпуска.Ссылка = ВЫБОР
		|				КОГДА Отпуск.ПорядокРасчетаОсновногоОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
		|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни)
		|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка)
		|			КОНЕЦ)";
	Иначе 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК СпособРасчета
		|ПОМЕСТИТЬ ВТДанныеОсновногоОтпуска
		|ГДЕ
		|	ЛОЖЬ";
	КонецЕсли;
	Запрос.Выполнить();
	
	Если ДополнительныйОтпуск Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.ВидРасчетаДополнительногоОтпуска.СпособРасчета КАК СпособРасчета,
		|	ВЫБОР
		|		КОГДА Отпуск.ВидРасчетаДополнительногоОтпуска.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
		|				И Отпуск.ВидРасчетаДополнительногоОтпуска.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыАлгоритмовРасчета.ОтпускСОплатойПраздничныхДней)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыАлгоритмовРасчета.ПустаяСсылка)
		|	КОНЕЦ КАК ВариантАлгоритмаРасчета
		|ПОМЕСТИТЬ ВТДанныеДополнительногоОтпуска
		|ИЗ
		|	ВТДокумент КАК Отпуск";
	Иначе 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК СпособРасчета,
		|	НЕОПРЕДЕЛЕНО КАК ВариантАлгоритмаРасчета
		|ПОМЕСТИТЬ ВТДанныеДополнительногоОтпуска
		|ГДЕ
		|	ЛОЖЬ";
	КонецЕсли;
	Запрос.Выполнить();
	
	Если КомпенсацияОтпуска Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Отпуск.ПорядокРасчетаКомпенсацииОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
		|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения)
		|	КОНЕЦ КАК ВидРасчетаКомпенсацииОтпуска,
		|	ПараметрыВидаРасчетаКомпенсация.СпособРасчета КАК СпособРасчета,
		|	ПараметрыВидаРасчетаКомпенсация.КодДоходаНДФЛ
		|ПОМЕСТИТЬ ВТДанныеКомпенсацииОтпуска
		|ИЗ
		|	ВТДокумент КАК Отпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаКомпенсация
		|		ПО (ПараметрыВидаРасчетаКомпенсация.Ссылка = ВЫБОР
		|				КОГДА Отпуск.ПорядокРасчетаКомпенсацииОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
		|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения)
		|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения)
		|			КОНЕЦ)";
	Иначе 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК СпособРасчета,
		|	НЕОПРЕДЕЛЕНО КАК КодДоходаНДФЛ,
		|	НЕОПРЕДЕЛЕНО КАК ВидРасчетаКомпенсацииОтпуска
		|ПОМЕСТИТЬ ВТДанныеКомпенсацииОтпуска
		|ГДЕ
		|	ЛОЖЬ";
	КонецЕсли;
	Запрос.Выполнить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы,
	|	РаботникиОрганизацииСрезПоследних.ПериодЗавершения,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|ПОМЕСТИТЬ ВТДанныеРаботника
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ДанныеДокумента.Результат) КАК Результат
	|ПОМЕСТИТЬ ВТНачисленоПособия
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|	И ДанныеДокумента.ВидРасчета.ВидПособияСоциальногоСтрахования <> ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отпуск.Дата,
	|	Отпуск.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА Отпуск.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Отпуск.Организация
	|		ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА Отпуск.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Отпуск.Организация
	|		ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	Отпуск.Организация КАК ОбособленноеПодразделение,
	|	Отпуск.Ссылка,
	|	Отпуск.Сотрудник,
	|	Отпуск.ПерерассчитываемыйДокумент.Сотрудник КАК ИсправляемыйДокументСотрудник,
	|	Отпуск.Сотрудник.Физлицо КАК Физлицо,
	|	Отпуск.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	Отпуск.ДатаНачалаОсновногоОтпуска,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска,
	|	Отпуск.ПорядокРасчетаОсновногоОтпуска,
	|	Отпуск.ДнейЧасовКомпенсацииОтпуска,
	|	Отпуск.ПорядокРасчетаКомпенсацииОтпуска,
	|	Отпуск.ДатаНачалаДополнительногоОтпуска,
	|	Отпуск.ДатаОкончанияДополнительногоОтпуска,
	|	ВЫБОР
	|		КОГДА Отпуск.ПорядокРасчетаОсновногоОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка)
	|	КОНЕЦ КАК ВидРасчетаОсновногоОтпуска,
	|	Отпуск.ВидРасчетаДополнительногоОтпуска,
	|	НЕОПРЕДЕЛЕНО КАК ВидУчетаВремени,
	|	Отпуск.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	Отпуск.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	Отпуск.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	Отпуск.ПерерассчитываемыйДокумент.Сотрудник КАК СотрудникПерерасчета,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= Отпуск.ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= Отпуск.ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	100 КАК ПроцентОплатыОсновногоОтпуска,
	|	Отпуск.ПроцентОплатыДополнительногоОтпуска,
	|	Отпуск.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	Отпуск.ДатаВыплатыДохода КАК ДатаВыплатыДохода,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ВЫБОР
	|		КОГДА Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание, ДЕНЬ)
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	РАЗНОСТЬДАТ(Отпуск.ПериодРасчетаСреднегоЗаработкаНачало, НАЧАЛОПЕРИОДА(Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание, МЕСЯЦ), МЕСЯЦ) + 1 КАК ПериодРасчетаСреднегоЗаработка,
	|	ВЫБОР
	|		КОГДА Отпуск.Сотрудник.Организация = ВЫБОР
	|				КОГДА Отпуск.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА Отпуск.Организация
	|				ИНАЧЕ Отпуск.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА Отпуск.Дата < Отпуск.ПериодРегистрации
	|			ТОГДА Отпуск.ПериодРегистрации
	|		КОГДА Отпуск.Дата > КОНЕЦПЕРИОДА(Отпуск.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(Отпуск.ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ Отпуск.Дата
	|	КОНЕЦ КАК ПериодРегистрацииДополнительныхНачислений,
	|	ПараметрыВидаРасчетаОсновногоОтпуска.СпособРасчета КАК СпособРасчетаОсновногоОтпуска,
	|	ПараметрыВидаРасчетаДополнительногоОтпуска.СпособРасчета КАК СпособРасчетаДополнительногоОтпуска,
	|	ПараметрыВидаРасчетаДополнительногоОтпуска.ВариантАлгоритмаРасчета,
	|	ПараметрыВидаРасчетаКомпенсация.ВидРасчетаКомпенсацииОтпуска,
	|	ПараметрыВидаРасчетаКомпенсация.СпособРасчета КАК СпособРасчетаКомпенсацииОтпуска,
	|	ПараметрыВидаРасчетаКомпенсация.КодДоходаНДФЛ,
	|	ЕСТЬNULL(НачисленоПособия.Результат, 0) КАК ВсегоПособия,
	|	Отпуск.ОсновнойОтпуск,
	|	Отпуск.ДополнительныйОтпуск,
	|	Отпуск.КомпенсацияОтпуска
	|ИЗ
	|	ВТДокумент КАК Отпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРаботника КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОсновногоОтпуска КАК ПараметрыВидаРасчетаОсновногоОтпуска
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДополнительногоОтпуска КАК ПараметрыВидаРасчетаДополнительногоОтпуска
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеКомпенсацииОтпуска КАК ПараметрыВидаРасчетаКомпенсация
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленоПособия КАК НачисленоПособия
	|		ПО (ИСТИНА)";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ВидУчетаВремени",НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьПолеЗапросаПоДокументу());
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента) Экспорт 
	
	Запрос = Новый Запрос;
	
	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	СписокСтруктурныхПодразделений = ОбщегоНазначенияЗК.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
	
	// Установим параметры запроса
	МассивВидыРасчетаОтпуска = Новый Массив;
	МассивВидыРасчетаОтпуска.Добавить(ВыборкаПоШапкеДокумента.ВидРасчетаОсновногоОтпуска);
	МассивВидыРасчетаОтпуска.Добавить(ВыборкаПоШапкеДокумента.ВидРасчетаДополнительногоОтпуска);
	Запрос.УстановитьПараметр("МассивВидыРасчетаОтпуска",	МассивВидыРасчетаОтпуска);
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Сотрудник",				Сотрудник);
	Запрос.УстановитьПараметр("МесяцевРасчетаПоЗакону",	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.КоличествоМесяцевРасчетаПоЗакону(ЭтотОбъект));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Ссылка,
	|	СтрокиНачисления.Ссылка.Сотрудник,
	|	СтрокиНачисления.Ссылка.ДатаНачалаОсновногоОтпуска,
	|	СтрокиНачисления.Ссылка.ДатаОкончанияОсновногоОтпуска,
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ДатаНачала,
	|	СтрокиНачисления.ДатаОкончания,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.НормаДнейПоПятидневке,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.ОтработаноДнейПоПятидневке,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	СтрокиНачисления.ДополнительныеДанные,
	|	СтрокиНачисления.ДатаНачалаСобытия,
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноЧасовПоПятидневке,
	|	СтрокиНачисления.НормаЧасовПоПятидневке,
	|	СтрокиНачисления.СторнируемыйДокумент,
	|	СтрокиНачисления.ЧислоМесяцев,
	|	СтрокиНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.Начисления КАК СтрокиНачисления
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачала
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 23.06.2011 11:16 
	|	ПоследниеДаты.ДатаНачала,
	|	ПоследниеДаты.ДатаОкончания,
	|	ПоследниеДаты.ВидРасчета,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
	|	ПоследниеДаты.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТОбщиеГрафики
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|		РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|		СтрокиНачисления.ДатаНачала КАК ДатаНачала,
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 23.06.2011 10:31 
	|		СтрокиНачисления.ДатаОкончания,
	|		СтрокиНачисления.ВидРасчета,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
	|		СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		ВТДанныеДокумента КАК СтрокиНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО СтрокиНачисления.ДатаНачала >= РаботникиОрганизации.Период
	|				И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 23.06.2011 11:16 
	|		СтрокиНачисления.ДатаОкончания,
	|		СтрокиНачисления.ВидРасчета,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
	|		СтрокиНачисления.ДатаНачала,
	|		РаботникиОрганизации.Сотрудник,
	|		СтрокиНачисления.НомерСтроки) КАК ПоследниеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПоследниеДаты.МаксПериод = РаботникиОрганизации.Период
	|			И ПоследниеДаты.Сотрудник = РаботникиОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТГрафикРаботыПоСотруднику
	|ИЗ
	|	ВТДанныеДокумента КАК СтрокиНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК ЕстьКадровыйОтпуск
	|ПОМЕСТИТЬ ВТКадровыйОтпуск
	|ИЗ
	|	ВТДанныеДокумента КАК НачислениеОтпускаРаботникамОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
	|		ПО (НачислениеОтпускаРаботникамОрганизаций.ДатаНачалаОсновногоОтпуска МЕЖДУ ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала И ВЫБОР
	|					КОГДА ОтпускаОрганизацийРаботникиОрганизации.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания
	|					ИНАЧЕ ОтпускаОрганизацийРаботникиОрганизации.ДатаНачалаДоп
	|				КОНЕЦ
	|				ИЛИ НачислениеОтпускаРаботникамОрганизаций.ДатаОкончанияОсновногоОтпуска МЕЖДУ ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала И ВЫБОР
	|					КОГДА ОтпускаОрганизацийРаботникиОрганизации.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания
	|					ИНАЧЕ ОтпускаОрганизацийРаботникиОрганизации.ДатаНачалаДоп
	|				КОНЕЦ)
	|			И НачислениеОтпускаРаботникамОрганизаций.Сотрудник = ОтпускаОрганизацийРаботникиОрганизации.Сотрудник
	|ГДЕ
	|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СУММА(ВЫБОР
	|			КОГДА СтрокиНачисления.ВидРасчета.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|				ТОГДА 0
	|			КОГДА СтрокиНачисления.ВидРасчета.ВидЕжегодногоОтпуска.СпособРасчетаОстаткаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОстаткаОтпуска.ПоРабочимДням)
	|				ТОГДА ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.Шестидневка, 0)
	|			ИНАЧЕ ЕСТЬNULL(РегламентированныйПроизводственныйКалендарь.КалендарныеДни, 0)
	|		КОНЕЦ) КАК ДнейОтпуска
	|ПОМЕСТИТЬ ВТДанныеРегламентированногоКалендаря
	|ИЗ
		// ИЗМЕНЕНИЕ: Измайлова Полина 23.06.2011 11:11  
	//|	ВТДанныеДокумента КАК СтрокиНачисления
	|	ВТОбщиеГрафики КАК СтрокиНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ СтрокиНачисления.ДатаНачала И СтрокиНачисления.ДатаОкончания)
	|			И (СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1))
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 23.06.2011 11:12 
	|			И РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = СтрокиНачисления.ГрафикРаботы.AVT_ПроизводственныйКалендарь
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиНачисления.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	СтрокиНачисления.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме КАК ЯвляетсяДоходомВНатуральнойФорме,
	|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,
	|	СтрокиНачисления.ДатаНачала,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаОкончания,
	|	СтрокиНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	СтрокиНачисления.ДатаНачала КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	НЕОПРЕДЕЛЕНО КАК ВидУчетаВремени,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ДополнительныеДанные,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.ОтработаноДнейПоПятидневке,
	|	СтрокиНачисления.ОтработаноЧасовПоПятидневке,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.НормаДнейПоПятидневке,
	|	СтрокиНачисления.НормаЧасовПоПятидневке,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ОбщиеГрафики.ГрафикРаботы
	|		ИНАЧЕ СтрокиНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка) КАК ГрафикРаботыНорма,
	|	СтрокиНачисления.ДатаНачалаСобытия,
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
	|	СтрокиНачисления.ЧислоМесяцев,
	|	ВЫБОР
	|		КОГДА (НЕ СтрокиНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	СтрокиНачисления.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЕжегодныхОтпусков.ПустаяСсылка)
	|		ИНАЧЕ СтрокиНачисления.ВидРасчета.ВидЕжегодногоОтпуска
	|	КОНЕЦ КАК ВидЕжегодногоОтпуска,
	|	ЕСТЬNULL(КадровыеОтпуска.ЕстьКадровыйОтпуск, ЛОЖЬ) КАК ЕстьКадровыйОтпуск,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Компенсация,
	|	ЕСТЬNULL(ДанныеРегламентированногоКалендаря.ДнейОтпуска, СтрокиНачисления.ОплаченоДнейЧасов * ВЫБОР
	|			КОГДА СтрокиНачисления.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДнейОтпуска,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета В (&МассивВидыРасчетаОтпуска)
	|				И (НЕ СтрокиНачисления.Сторно)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроверятьПериодНачисления
	|ИЗ
	|	ВТДанныеДокумента КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбщиеГрафики КАК ОбщиеГрафики
	|		ПО СтрокиНачисления.НомерСтроки = ОбщиеГрафики.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыПоСотруднику КАК ГрафикРаботыПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыйОтпуск КАК КадровыеОтпуска
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРегламентированногоКалендаря КАК ДанныеРегламентированногоКалендаря
	|		ПО СтрокиНачисления.НомерСтроки = ДанныеРегламентированногоКалендаря.НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ВидУчетаВремени",НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьПолеЗапросаПоНачислениям());
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,",НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьДополнительноеПолеЗапросаПоНачислениям());
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по таблице "РасчетСреднего" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРасчетСреднего() Экспорт 
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",		НачалоМесяца(ДатаНачалаСобытия));
	Запрос.УстановитьПараметр("МесяцевРасчетаПоЗакону",	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.КоличествоМесяцевРасчетаПоЗакону(ЭтотОбъект));
	Запрос.УстановитьПараметр("ГодовыеПремии", 			НачислениеОтпускаРаботникамОрганизацийПереопределяемый.МассивГодовыхПремий());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Отпуск.ДатаНачалаОсновногоОтпуска,
	|	Отпуск.ПорядокРасчетаОсновногоОтпуска,
	|	Отпуск.ДатаНачалаДополнительногоОтпуска,
	|	Отпуск.ВидРасчетаДополнительногоОтпуска,
	|	Отпуск.ПорядокРасчетаКомпенсацииОтпуска,
	|	Отпуск.ДнейЧасовКомпенсацииОтпуска,
	|	РАЗНОСТЬДАТ(Отпуск.ПериодРасчетаСреднегоЗаработкаНачало, НАЧАЛОПЕРИОДА(Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание, МЕСЯЦ), МЕСЯЦ) + 1 КАК ПериодРасчетаСреднегоЗаработка,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК Отпуск
	|ГДЕ
	|	Отпуск.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отпуск.ПериодРасчетаСреднегоЗаработка,
	|	ВЫБОР
	|		КОГДА Отпуск.ПорядокРасчетаОсновногоОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
	|	КОНЕЦ КАК СпособРасчета,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ВТДанныеДокумента КАК Отпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаОсновногоОтпуска
	|		ПО (ПараметрыВидаРасчетаОсновногоОтпуска.Ссылка = ВЫБОР
	|				КОГДА Отпуск.ПорядокРасчетаОсновногоОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка)
	|			КОНЕЦ)
	|ГДЕ
	|	Отпуск.ДатаНачалаОсновногоОтпуска <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Отпуск.ПериодРасчетаСреднегоЗаработка,
	|	Отпуск.ВидРасчетаДополнительногоОтпуска.СпособРасчета,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание
	|ИЗ
	|	ВТДанныеДокумента КАК Отпуск
	|ГДЕ
	|	Отпуск.ДатаНачалаДополнительногоОтпуска <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Отпуск.ПериодРасчетаСреднегоЗаработка,
	|	ВЫБОР
	|		КОГДА Отпуск.ПорядокРасчетаКомпенсацииОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
	|	КОНЕЦ,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание
	|ИЗ
	|	ВТДанныеДокумента КАК Отпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаКомпенсация
	|		ПО (ПараметрыВидаРасчетаКомпенсация.Ссылка = ВЫБОР
	|				КОГДА Отпуск.ПорядокРасчетаКомпенсацииОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения)
	|			КОНЕЦ)
	|ГДЕ
	|	Отпуск.ДнейЧасовКомпенсацииОтпуска > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокаРасчетСреднего.НомерСтроки КАК НомерСтроки,
	|	СтрокаРасчетСреднего.ВидРасчета КАК ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.ОтработаноПоПятидневке КАК ОтработаноПоПятидневке,
	|	СтрокаРасчетСреднего.НормаПоПятидневке КАК НормаПоПятидневке,
	|	СтрокаРасчетСреднего.ОтработаноДней КАК ОтработаноДней,
	|	""ОтработаноЧасов"" КАК ОтработаноЧасов,
	|	СтрокаРасчетСреднего.ЧислоМесяцев КАК ЧислоМесяцев,
	|	СтрокаРасчетСреднего.КоэффициентИндексации КАК КоэффициентИндексации,
	|	СтрокаРасчетСреднего.Результат КАК Результат,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням) КАК СпособРасчета
	|ПОМЕСТИТЬ ВТДанныеОЗаработке
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоКалендарным КАК СтрокаРасчетСреднего
	|ГДЕ
	|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
	|	СтрокаРасчетСреднего.НормаПоПятидневке,
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	""ОтработаноЧасов"",
	|	СтрокаРасчетСреднего.ЧислоМесяцев,
	|	СтрокаРасчетСреднего.КоэффициентИндексации,
	|	СтрокаРасчетСреднего.Результат,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций.РасчетСреднегоПоШестидневке КАК СтрокаРасчетСреднего
	|ГДЕ
	|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОЗаработке.НомерСтроки,
	|	ДанныеОЗаработке.ВидРасчета,
	|	ДанныеОЗаработке.БазовыйПериодНачало,
	|	ДанныеОЗаработке.БазовыйПериодКонец,
	|	ДанныеОЗаработке.ОтработаноПоПятидневке,
	|	ДанныеОЗаработке.НормаПоПятидневке,
	|	ДанныеОЗаработке.ОтработаноДней,
	|	ДанныеОЗаработке.ОтработаноЧасов,
	|	ДанныеОЗаработке.ЧислоМесяцев,
	|	ДанныеОЗаработке.КоэффициентИндексации,
	|	ДанныеОЗаработке.Результат,
	|	ДанныеОЗаработке.СпособРасчета,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ДатаНачалаРасчетногоПериода,
	|	Начисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ДатаОкончанияРасчетногоПериода,
	|	Начисления.ПериодРасчетаСреднегоЗаработка
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеОЗаработке КАК ДанныеОЗаработке
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеДокумента.ПериодРасчетаСреднегоЗаработка) КАК КоличествоПериодовРасчетаСреднегоЗаработка,
	|				ДанныеДокумента.СпособРасчета КАК СпособРасчета
	|			ИЗ
	|				ВТНачисления КАК ДанныеДокумента
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ДанныеДокумента.СпособРасчета) КАК СвойстваВидовРасчета
	|			ПО ДанныеОЗаработке.СпособРасчета = СвойстваВидовРасчета.СпособРасчета
	|		ПО Начисления.СпособРасчета = ДанныеОЗаработке.СпособРасчета
	|			И (ЕСТЬNULL(СвойстваВидовРасчета.КоличествоПериодовРасчетаСреднегоЗаработка, 0) <= 1
	|				ИЛИ НЕ ДанныеОЗаработке.ВидРасчета В (&ГодовыеПремии)
	|					И Начисления.ПериодРасчетаСреднегоЗаработкаНачало <= ДанныеОЗаработке.БазовыйПериодНачало
	|					И Начисления.ПериодРасчетаСреднегоЗаработкаОкончание >= ДанныеОЗаработке.БазовыйПериодКонец
	|				ИЛИ ДанныеОЗаработке.ВидРасчета В (&ГодовыеПремии)
	|					И Начисления.ПериодРасчетаСреднегоЗаработкаНачало = ДанныеОЗаработке.БазовыйПериодНачало
	|					И Начисления.ПериодРасчетаСреднегоЗаработкаОкончание = ДанныеОЗаработке.БазовыйПериодКонец)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"""ОтработаноЧасов""",НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьПрочиеПоляЗапросаПоСреднему());
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "") 
	
	//  Организация
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация, по которой выполняется начисление!"), Отказ, Заголовок);
	ИначеЕсли ПроведениеРасчетов.ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(ВыборкаПоШапкеДокумента.ПериодРегистрации, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение) И ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВсегоПособия) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("У страхователей, участвующих в пилотном проекте ФСС, пособия не начисляются!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка того, что не изменили сотрудника при исправлении
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИсправляемыйДокументСотрудник) 
		И (ВыборкаПоШапкеДокумента.ИсправляемыйДокументСотрудник <> ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("При исправлении документа нельзя изменить сотрудника!", Отказ, Заголовок);
	КонецЕсли;

	// Сотрудник.Организация = Организация
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
	// ПериодРегистрации
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаНачалаСобытия
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата начала отпуска!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата начала расчетного периода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата окончания расчетного периода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание < ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Дата окончания расчетного периода не должна быть меньше даты начала расчетного периода!", Отказ, Заголовок);
	КонецЕсли;

	УказанаДатаНачалаОсновногоОтпуска = ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачалаОсновногоОтпуска);
	УказанаДатаНачалаДополнительногоОтпуска = ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачалаДополнительногоОтпуска);
	
	Если Не ВыборкаПоШапкеДокумента.ОсновнойОтпуск И Не ВыборкаПоШапкеДокумента.ДополнительныйОтпуск И Не ВыборкаПоШапкеДокумента.КомпенсацияОтпуска Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не выбран вид отпуска!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОсновнойОтпуск И Не УказанаДатаНачалаОсновногоОтпуска Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Должна быть указана дата начала основного отпуска!", Отказ, Заголовок);
	ИначеЕсли УказанаДатаНачалаОсновногоОтпуска Тогда
		
		// проверка дат начала и окончания
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончанияОсновногоОтпуска) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата окончания основного отпуска!", Отказ, Заголовок);
			
		ИначеЕсли ВыборкаПоШапкеДокумента.ДатаОкончанияОсновногоОтпуска < ВыборкаПоШапкеДокумента.ДатаНачалаОсновногоОтпуска Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Дата окончания основного отпуска не должна быть меньше даты начала!", Отказ, Заголовок);
			
		Иначе
			Если УказанаДатаНачалаДополнительногоОтпуска И ВыборкаПоШапкеДокумента.ДатаНачалаДополнительногоОтпуска <> КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончанияОсновногоОтпуска) + 1 Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Дополнительный отпуск должен начинаться непосредственно после окончания основного!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		// ПорядокРасчетаОсновногоОтпуска
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПорядокРасчетаОсновногоОтпуска) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан порядок расчета основного отпуска!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДополнительныйОтпуск И Не УказанаДатаНачалаДополнительногоОтпуска Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Должна быть указана дата начала дополнительного отпуска!", Отказ, Заголовок);
	ИначеЕсли УказанаДатаНачалаДополнительногоОтпуска Тогда
		
		// проверка дат начала и окончания
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончанияДополнительногоОтпуска) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата окончания дополнительного отпуска!", Отказ, Заголовок);
			
		ИначеЕсли ВыборкаПоШапкеДокумента.ДатаОкончанияДополнительногоОтпуска < ВыборкаПоШапкеДокумента.ДатаНачалаДополнительногоОтпуска Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Дата окончания дополнительного отпуска не должна быть меньше даты начала!", Отказ, Заголовок);
			
		КонецЕсли;
		
		// ВидРасчетаДополнительногоОтпуска
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчетаДополнительногоОтпуска) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан вид дополнительного отпуска!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// ДатаНачалаОсновногоОтпуска
	Если ВыборкаПоШапкеДокумента.КомпенсацияОтпуска И ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииОтпуска = 0 Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Должно быть указано количество дней компенсации отпуска!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииОтпуска > 0 Тогда
		// ПорядокРасчетаКомпенсацииОтпуска
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПорядокРасчетаКомпенсацииОтпуска) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан порядок расчета компенсации отпуска!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// ДатаВыплатыДохода
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаВыплатыДохода) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана предполагаемая дата выплаты начисленного дохода!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоШапкеДокумента.ДатаВыплатыДохода	< '19800101' Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Неверно указан год предполагаемой даты выплаты начисленного дохода!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> Null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Период документа должен быть больше периода исправляемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> Null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Организация, заданная для документа, должна совпадать с организацией исправляемого документа!"), Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.СотрудникПерерасчета <> Null 
		и ВыборкаПоШапкеДокумента.Сотрудник <> ВыборкаПоШапкеДокумента.СотрудникПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Сотрудник документа должен совпадать с сотрудником исправляемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроводитьДополнительныеПроверки = Ложь) Экспорт 
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";
	
	// ВидРасчета
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала и окончания
	Если ВыборкаПоСтрокамДокумента.ОсновныеНачисления 
		Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом
		Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
		Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
	
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
		Иначе
			// Дата окончания 
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
				
			Иначе
				Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
					
				ИначеЕсли ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда	
					Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Дата начала события
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия)  И (ВыборкаПоСтрокамДокумента.ОсновныеНачисления или ВыборкаПоСтрокамДокумента.Компенсация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("не указано подразделение организации!"), Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указано подразделение, принадлежащее другой организации!"), Отказ, Заголовок);
		
	КонецЕсли;
	
	ДатаОкончанияСобытия = КонецДня(?(ДатаНачалаДополнительногоОтпуска = '00010101', ДатаОкончанияОсновногоОтпуска, ДатаОкончанияДополнительногоОтпуска));
	
	Если ВыборкаПоСтрокамДокумента.ПроверятьПериодНачисления И (ВыборкаПоСтрокамДокумента.ДатаНачала < ВыборкаПоШапкеДокумента.ДатаНачалаСобытия ИЛИ ВыборкаПоСтрокамДокумента.ДатаНачала > ДатаОкончанияСобытия
		ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачалаСобытия ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания > ДатаОкончанияСобытия) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "период начисления выходит за временные границы оплачиваемого события!", Ложь, Заголовок);
		
	КонецЕсли;
	
	Если ПроводитьДополнительныеПроверки Тогда
		НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ВыполнитьДополнительныеПроверкиСтрокиНачислений(ЭтотОбъект,ВыборкаПоСтрокамДокумента,Отказ, Заголовок, СтрокаНачалаСообщенияОбОшибке);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса к ТЧ документа, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "") Экспорт 
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала базового периода
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ, Заголовок);
		
		// Дата окончания базового периода
	ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборРасчетСреднего) Экспорт 
		
	Движение = НаборРасчетСреднего.Добавить();
	
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоШапкеДокумента, "Сотрудник,Физлицо,Организация,ПериодРегистрации,ДатаНачалаСобытия");
	ЗаполнитьЗначенияСвойств(Движение, ВыборкаПоСтрокамДокумента); // БазовыйПериодНачало, БазовыйПериодКонец, ВидРасчета, Результат и т.п.
	
КонецПроцедуры // ДобавитьСтрокуРасчетаСреднего()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверим непрерывночть следования записей начислений
	ПроверитьНепрерывностьЗаписейНачислений(Отказ);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если Не Отказ Тогда
			
			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты		= Истина;
			
			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска			= Истина;
			Движения.ДополнительныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска	= Истина;
			
			// получим реквизиты табличной части Начисления
			ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
			
			Пока ВыборкаПоНачислениям.Следующий() Цикл
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок, Истина);
				
				Если Не Отказ Тогда
					
					// Заполним записи в наборах записей регистров
					Если ВыборкаПоНачислениям.ОсновныеНачисления Тогда
						ПроведениеРасчетов.ДобавитьСтрокуОсновныхНачислений(Движения.ОсновныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					Иначе
						ПроведениеРасчетов.ДобавитьСтрокуДополнительныхНачислений(Движения.ДополнительныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// получим реквизиты табличной части РасчетСреднего 
			РезультатЗапросаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего();
			ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
			
			Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок);
				
				Если Не Отказ Тогда
					
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПроведениеРасчетов.СформироватьПредоставленныеВычетыПоНДФЛ(ЭтотОбъект, ВыборкаПоШапкеДокумента, Истина, Отказ, Заголовок);
			
			НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ВыполнитьПрочиеДвиженияДокумента(ЭтотОбъект, ВыборкаПоШапкеДокумента, Отказ, Заголовок, ВыборкаПоНачислениям);
			
			Если Не Отказ Тогда
				
				ПроведениеРасчетов.СформироватьЗачтенныеАвансыПоНДФЛ(ЭтотОбъект, ВыборкаПоШапкеДокумента, Истина);
				
				// НДФЛ к перечислению в бюджет
				УпрощенныйУчетНДФЛ = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетНДФЛ");
				Если УпрощенныйУчетНДФЛ И Движения.НДФЛРасчетыСБюджетом.Количество() > 0 Тогда
					Если ДатаВыплатыДохода >= ПроведениеРасчетов.ДатаИзмененияСроковУплатыНалога() Тогда
						ПроведениеРасчетов.ВписатьДатыВыплатыСрокУплатыВУдержанныеНалоги(Движения.НДФЛРасчетыСБюджетом, ДатаВыплатыДохода, ?(ЗначениеЗаполнено(ПерерассчитываемыйДокумент), Перечисления.СрокиПеречисляемогоНалога.ПрочиеДоходы, Перечисления.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные));
					КонецЕсли;
					Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Загрузить(ПроведениеРасчетов.РасчетыНалоговогоАгентаПоУдержанномуНДФЛ(Движения.НДФЛРасчетыСБюджетом.Выгрузить()))
				КонецЕсли;
				
				// выполним удаление перерасчетов исправленного документа
				Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
					ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
				КонецЕсли;
				
				Для Каждого Набор Из Движения Цикл
					ТипНабораЗаписей = ТипЗнч(Набор);
					Если ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") 
						Или ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
						Попытка
							Набор.Записать()
						Исключение 
							ВызватьИсключение ОбщегоНазначенияЗК.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание
						КонецПопытки; 
					КонецЕсли;
				КонецЦикла;
				ПроведениеРасчетов.ОбработатьТаблицуПерерасчетов(Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400; // в секундах
мСведенияОВидахРасчета = Новый Соответствие;
