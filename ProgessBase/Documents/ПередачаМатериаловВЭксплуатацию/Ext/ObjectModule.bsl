Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует печатную форму М-11
//
Функция ПечатьМ11()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка.Номер 																КАК НомерДокумента,
	|	Ссылка.Дата																	КАК ДатаДокумента,
	|	Ссылка.Дата																	КАК ДатаСоставления,
	|	Ссылка.Организация 															КАК Организация,
	|	Ссылка.Склад 																КАК Склад,
	|	Ссылка.ПодразделениеОрганизации 											КАК Подразделение
	|	//ПОЛЕ_КорСчет ,ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетПередачиБУ) = 1 ТОГДА
	|	//ПОЛЕ_КорСчет	МИНИМУМ(СчетПередачиБУ) 
	|	//ПОЛЕ_КорСчет ИНАЧЕ """" КОНЕЦ 											КАК КоррСчет
	|ИЗ
	|	Документ.ПередачаМатериаловВЭксплуатацию КАК ПередачаМатериаловВЭксплуатацию
	|
	|ГДЕ
	|	ПередачаМатериаловВЭксплуатацию.Ссылка = &ТекущийДокумент
	|//ПОЛЕ_КорСчет СГРУППИРОВАТЬ ПО Ссылка";
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПередачаМатериаловВЭксплуатацию", "Документ.ПередачаМатериаловВЭксплуатацию.Материалы");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПОЛЕ_КорСчет", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Ссылка.", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПодразделениеОрганизации", "Подразделение");
	КонецЕсли;

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ТекстЗапроса_Материалы =
	"ВЫБРАТЬ
	|	ПередачаМатериаловВЭксплуатацию.Номенклатура                                  				КАК Номенклатура,
	|	ВЫРАЗИТЬ(ПередачаМатериаловВЭксплуатацию.Номенклатура.НаименованиеПолное КАК Строка(1000)) 	КАК МатериалНаименование,
	|	ПередачаМатериаловВЭксплуатацию.Номенклатура." + ТоварКод + "                 				КАК НоменклатурныйНомер,
	|	ПередачаМатериаловВЭксплуатацию.ЕдиницаИзмерения.Представление                				КАК ЕдиницаИзмеренияНаименование,
	|	ПередачаМатериаловВЭксплуатацию.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  				КАК ЕдиницаИзмеренияКод,
	|	ПередачаМатериаловВЭксплуатацию.Характеристика                                				КАК Характеристика,
	|	ПередачаМатериаловВЭксплуатацию.Серия                                         				КАК Серия,
	|	ПередачаМатериаловВЭксплуатацию.Количество                                    				КАК Количество,
	|	ПередачаМатериаловВЭксплуатацию.Счет                                          				КАК Счет,
	|	ПередачаМатериаловВЭксплуатацию.НомерСтроки                                   				КАК НомерСтроки,
	|	ВЫРАЗИТЬ(
	|		ЕСТЬNULL(ТаблицаСебестоимостиОбороты.Стоимость, 0)
	|		* ПередачаМатериаловВЭксплуатацию.Количество 
	|		* ПередачаМатериаловВЭксплуатацию.Коэффициент
	|		/ ЕСТЬNULL(ПередачаМатериаловВЭксплуатацию.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)
	|		/ ЕСТЬNULL(ТаблицаСебестоимостиОбороты.Количество, 1)
	|	 КАК ЧИСЛО(15,2)) 																			КАК Сумма
	|ИЗ 
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура 				КАК Номенклатура,
	|		ЕдиницаИзмерения 			КАК ЕдиницаИзмерения,
	|		Коэффициент 				КАК Коэффициент,
	|		СчетУчетаБУ                 КАК Счет,
	|		ХарактеристикаНоменклатуры	КАК Характеристика,
	|		СерияНоменклатуры           КАК Серия,
	|		СУММА(Количество)           КАК Количество,
	|		МИНИМУМ(НомерСтроки) 		КАК НомерСтроки
	|	ИЗ
	|		Документ.ПередачаМатериаловВЭксплуатацию.Материалы КАК ПередачаМатериаловВЭксплуатацию
	|	ГДЕ
	|		ПередачаМатериаловВЭксплуатацию.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Коэффициент,
	|		СчетУчетаБУ,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры
	|	) КАК ПередачаМатериаловВЭксплуатацию
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ТаблицаСебестоимостиОбороты КАК ТаблицаСебестоимостиОбороты
	|		ПО ПередачаМатериаловВЭксплуатацию.Номенклатура = ТаблицаСебестоимостиОбороты.Номенклатура
	|			И ТаблицаСебестоимостиОбороты.Регистратор = &Регистратор
	|			И ((ПередачаМатериаловВЭксплуатацию.Характеристика = ТаблицаСебестоимостиОбороты.ХарактеристикаНоменклатуры) 
	|				ИЛИ (ТаблицаСебестоимостиОбороты.ХарактеристикаНоменклатуры = ""Не используется""))
	|			И ((ПередачаМатериаловВЭксплуатацию.Серия = ТаблицаСебестоимостиОбороты.СерияНоменклатуры)
	|				ИЛИ (ТаблицаСебестоимостиОбороты.СерияНоменклатуры = ""Не используется""))
	|			И ((ПередачаМатериаловВЭксплуатацию.Счет = ТаблицаСебестоимостиОбороты.СчетУчета) 
	|				ИЛИ (ТаблицаСебестоимостиОбороты.СчетУчета = ""Не используется""))
	|		
	|УПОРЯДОЧИТЬ ПО 
	|	НомерСтроки";
	
	СтруктраПараметров = Новый Структура;
	СтруктраПараметров.Вставить("ТекущийДокумент", 	Ссылка);
	СтруктраПараметров.Вставить("Регистратор", 		Ссылка);
	СтруктраПараметров.Вставить("НачГраница", 		Новый Граница(Ссылка.Дата, ВидГраницы.Включая));
	
	ТаблицаЗатрат = УправлениеЗапасами.ПолучитьТаблицуЗатратДляПечатиИЗаполненияДокументов(Ссылка, ТекстЗапроса_Материалы, СтруктраПараметров);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаМатериаловВЭксплуатацию_М11";
	
	// Вывод заголовка
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	
	Макет 	= ПолучитьОбщийМакет("М11");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(Шапка);
	
	Область.Параметры.Заголовок     			 = "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + Строка(Шапка.НомерДокумента);
	Область.Параметры.ПредставлениеОрганизации   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Область.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
	Область.Параметры.КодОКПО                    = СведенияОбОрганизации.КодПоОКПО;
	
	ТабДокумент.Вывести(Область);
	
	Для Каждого ВыборкаПоСтрокам Из ТаблицаЗатрат Цикл
		
		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		
		Область.Параметры.Цена 				   = ?(ВыборкаПоСтрокам.Количество = 0, ВыборкаПоСтрокам.Сумма, Окр(ВыборкаПоСтрокам.Сумма / ВыборкаПоСтрокам.Количество, 2));
		Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		
		ТабДокумент.Вывести(Область);
		
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Область);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ11()

// Функция формирует печатную форму документа
//
Функция ПечатьМБ7()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер 	КАК НомерДокумента,
	|	Дата	КАК ДатаДокумента,
	|	Дата	КАК ДатаСоставления,
	|	Организация,
	|	Склад,
	|	"+?(ОтражатьВБухгалтерскомУчете, "ПодразделениеОрганизации", "Подразделение")+" КАК Подразделение
	|ИЗ
	|	Документ.ПередачаМатериаловВЭксплуатацию КАК ПередачаМатериаловВЭксплуатацию
	|
	|ГДЕ
	|	ПередачаМатериаловВЭксплуатацию.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерСтроки 					КАК НомерПП,
	|	Номенклатура.Код 				КАК НоменклатурныйНомер,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ХарактеристикаНоменклатуры		КАК Характеристика,
	|	СерияНоменклатуры           	КАК Серия,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмерения.Наименование 	КАК ЕдиницаИзмеренияНаименование,
	|	Количество 						КАК Количество,
	|	ФизЛицо 						КАК Сотрудник,
	|	ФизЛицо.Код 					КАК ТабельныйНомер,
	|	ПередачаМатериаловВЭксплуатацию.Ссылка.Дата			КАК ДатаДокумента,
	|	НазначениеИспользования.СрокПолезногоИспользования 	КАК СрокСлужбы
	|
	|ИЗ
	|	Документ.ПередачаМатериаловВЭксплуатацию.Материалы КАК ПередачаМатериаловВЭксплуатацию
	|
	|ГДЕ
	|	ПередачаМатериаловВЭксплуатацию.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	НомерПП
	|";

	ЗапросПоНоменклатуре = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаМатериаловВЭксплуатацию_МБ7";
	
	// Вывод заголовка
	Макет = ПолучитьМакет("МБ7");
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

	Область.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Область.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
	Область.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	
	СоответствиеТабНомеров = СпецодеждаИСпецоснастка.ПолучитьТабНомера( Организация, Дата, Материалы.ВыгрузитьКолонку("ФизЛицо"));
	
	ТабДокумент.Вывести(Область);

	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.ТоварНаименование = СокрЛП(ВыборкаПоСтрокам.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		
		ТабНомер = СоответствиеТабНомеров[ВыборкаПоСтрокам.Сотрудник];
		Если НЕ ПустаяСтрока(ТабНомер) Тогда
			Область.Параметры.ТабельныйНомер = ТабНомер;
		КонецЕсли;
		
		ТабДокумент.Вывести(Область);

	КонецЦикла;

	// Вывод подвала
	Область = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(Область);

	Возврат ТабДокумент;

КонецФункции // ПечатьМБ7()

// Функция формирует печатную форму документа
//
Функция ПечатьПередачаМатериалов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДокПередачаМатериалов.Ссылка,
	|	ДокПередачаМатериалов.Дата                      КАК ДатаПередачи,
	|	ДокПередачаМатериалов.Организация,
	|	ДокПередачаМатериалов.Организация.Представление КАК ПечОрганизация,
	|	ВЫБОР КОГДА ДокПередачаМатериалов.ОтражатьВУправленческомУчете ТОГДА
	|		ДокПередачаМатериалов.Подразделение
	|	ИНАЧЕ
	|		ДокПередачаМатериалов.ПодразделениеОрганизации
	|	КОНЕЦ КАК Подр,
	|	ВЫБОР КОГДА ДокПередачаМатериалов.ОтражатьВУправленческомУчете ТОГДА
	|		ДокПередачаМатериалов.Подразделение.Представление
	|	ИНАЧЕ
	|		ДокПередачаМатериалов.ПодразделениеОрганизации.Представление
	|	КОНЕЦ КАК ПечПодр,
	|	ДокПередачаМатериалов.Дата,
	|	ДокПередачаМатериалов.Материалы.(
	|		НомерСтроки                    КАК ПечНомер,
	|		Номенклатура                   КАК Товар,
	|		Номенклатура.Артикул           КАК Артикул,
	|		Номенклатура.Код               КАК Код,
	|		Количество,
	|		ЕдиницаИзмерения               КАК ЕдИзм,
	|		ЕдиницаИзмерения.Представление КАК ПечЕдИзм,
	|		ХарактеристикаНоменклатуры     КАК Характеристика,
	|		СерияНоменклатуры              КАК Серия,
	|		ФизЛицо                        КАК Сотрудник,
	|		ФизЛицо.Представление          КАК ПечФИО,
	|		НазначениеИспользования.СрокПолезногоИспользования КАК СрокЭксплуатации
	|	)
	|ИЗ
	|	Документ.ПередачаМатериаловВЭксплуатацию КАК ДокПередачаМатериалов
	|ГДЕ
	|	ДокПередачаМатериалов.Ссылка = &ТекДок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПечНомер";
			
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "ТекДок", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Шапка = РезультатЗапроса.Выбрать();
	Шапка.Следующий();
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаМатериалов_ПередачаМатериалов";
	
	Макет  = ПолучитьМакет("ПередачаМатериалов");
	
	// Параметры вывода
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	КолАртикул = ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул, "Артикул",
				 ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код,     "Код", ""));
	ФлагВыводКода = НЕ ПустаяСтрока(КолАртикул);
	ТабЧасть = Шапка.Материалы.Выбрать();
	
	// Вывод заголовка
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента( ЭтотОбъект);
	
	Область.Параметры.Подразделение    = Шапка.Подр;
	Область.Параметры.ПечПодразделение = Шапка.ПечПодр;
	Область.Параметры.Организация      = Шапка.Организация;
	Область.Параметры.ПечОрганизация   = Шапка.ПечОрганизация;
	Область.Параметры.ДатаПередачи     = СтрЗаменить( Формат( Шапка.ДатаПередачи, "ДФ=dd.MMM.yyyy"), ".", " ");
		
	ТабДок.Вывести(Область);
	
	// Вывод шапки табличной части
	Область = Макет.ПолучитьОбласть("ТабШапка");
	Если ФлагВыводКода Тогда
		Область.Параметры.ПечАртикул = КолАртикул;
	КонецЕсли;
	ТабДок.Вывести( Область);
	
	СоответствиеТабНомеров = СпецодеждаИСпецоснастка.ПолучитьТабНомера( Организация, Дата, Материалы.ВыгрузитьКолонку("ФизЛицо"));
	
	// Вывод табличной части
	Область = Макет.ПолучитьОбласть("ТабСтрока");
	
	ТабЧасть = Шапка.Материалы.Выбрать();
	СуммаИтого = 0;
	
	Пока ТабЧасть.Следующий() Цикл
		
		Область.Параметры.ПечНомер = ТабЧасть.ПечНомер;
		
		Если ФлагВыводКода Тогда
			Область.Параметры.ПечАртикул = ТабЧасть[КолАртикул];
		КонецЕсли;
		
		Область.Параметры.ПечМатериал  = СокрЛП( ТабЧасть.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий( ТабЧасть);
		Область.Параметры.Материал     = ТабЧасть.Товар;
		Область.Параметры.ПечЕдИзм     = ТабЧасть.ПечЕдИзм;
		Область.Параметры.ПечКол       = ТабЧасть.Количество;
		
		Область.Параметры.ПечФИО       = ТабЧасть.ПечФИО;
		Область.Параметры.Сотрудник    = ТабЧасть.Сотрудник;
		
		ТабНомер = СоответствиеТабНомеров[ ТабЧасть.Сотрудник];
		Область.Параметры.ПечТабНомер = ТабНомер;
		
		СрокЭксплуатации = ?(ТабЧасть.СрокЭксплуатации = NULL, 0, ТабЧасть.СрокЭксплуатации);
		Область.Параметры.ПечСрокЭкспл     = СрокЭксплуатации;
		Область.Параметры.ПечДатаОкончания = СтрЗаменить( Формат( ДобавитьМесяц(Шапка.Дата, СрокЭксплуатации), "ДФ=dd.MMM.yyyy"), ".", " ");
		
		ТабДок.Вывести(Область);
		
	КонецЦикла;
	
	// Вывод итогов документа
		
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.СтрокаИтог = "Всего наименований: " + ТабЧасть.Количество();
	ТабДок.Вывести( Область);
	
	Возврат ТабДок;
	
КонецФункции // ПечатьПередачаМатериалов()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если      ИмяМакета = "МБ7" Тогда
		ТабДокумент = ПечатьМБ7();
	ИначеЕсли ИмяМакета = "М11" Тогда
		ТабДокумент = ПечатьМ11();
		
	ИначеЕсли ИмяМакета = "ПередачаМатериалов" Тогда
		ТабДокумент = ПечатьПередачаМатериалов();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка), Ссылка);
	
КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("МБ7", "Ведомость МБ-7");
	СтруктураМакетов.Вставить("М11", "Накладная M-11");
	СтруктураМакетов.Вставить("ПередачаМатериалов", "Передача материалов в эксплуатацию");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение, Материалы.ВнутреннийЗаказ";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации";
	
	мСтрокаРеквизитыНалУчета = "";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация, Склад";
	ДополнитьРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки);
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Подразделение";
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "ПодразделениеОрганизации";
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()


// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Процедура выполняет заполнение табличной части "Товары" по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - ссылка на документ основание
//
Процедура ЗаполнитьТоварыПоДокументуПоступлениеТоваровУслуг(ДокументОснование)

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Номенклатура.НазначениеИспользования КАК НазначениеИспользования,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмеренияМест,
	|	Товары.Коэффициент,
	|	Товары.Количество,
	|	Товары.КоличествоМест,
	|	Товары.ХарактеристикаНоменклатуры,
	|	Товары.СерияНоменклатуры,
	|	Товары.Склад,
	|	Товары.ОтражениеВУСН,
	|	Товары.СчетУчетаБУ,
	|	Товары.СчетУчетаНУ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование 
	|	И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) 
	|		ИЛИ Товары.Склад = &Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезЗапроса = Запрос.Выполнить();

	Выборка = РезЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);

		НоваяСтрока.Качество = Справочники.Качество.Новый;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока,"Материалы",ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете);
		
		//Счета учета номенклатуры возьмем из результата запроса
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "СчетУчетаБУ,СчетУчетаНУ");
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоДокументуПоступлениеТоваровУслуг()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция проверяет правильность заполнения документа
// Возврат - структура с данными шапки документа
//
Функция ПроверкаРеквизитов(Отказ) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	РеквизитыТЧ = "Номенклатура, Количество, ЕдиницаИзмерения, ФизЛицо, НазначениеИспользования, Качество";
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТЧ, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "Материалы");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТЧ), Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", , Отказ, Заголовок);

	Возврат СтруктураШапкиДокумента;
	
КонецФункции // ПроверкаРеквизитов()

// Функция формирует запрос по табличной части "Материалы" документа.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//
// Возвращаемое значение:
//	Запрос - Запрос по табличной части документа
//
Функция СформироватьЗапросПоТабличнойЧастиМатериалы(СтруктураШапкиДокумента)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Способы.Ссылка КАК СпособОтраженияРасходов,
	|	Истина КАК НеУчитываемыеВНУ
	|
	|ПОМЕСТИТЬ СпособыОтраженияРасходов
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК Способы
	|ГДЕ
	|	Способы.СтатьяЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения)
	|	И Способы.Ссылка В (
	|		ВЫБРАТЬ
	|       	Док.НазначениеИспользования.СпособОтраженияРасходов КАК СпособОтраженияРасходов
	|		ИЗ 
	|			Документ.ПередачаМатериаловВЭксплуатацию.Материалы КАК Док 
	|		ГДЕ
	|			Док.Ссылка = &ДокументСсылка
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОтраженияРасходов
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	Док.НомерСтроки,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Номенклатура.Услуга КАК Услуга,
	|	Док.Номенклатура.Набор КАК Набор,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.ФизЛицо,
	|	Док.НазначениеИспользования,
	|	Док.НазначениеИспользования.СпособПогашенияСтоимости КАК СпособПогашенияСтоимости,
	|	Док.Качество,
	|	Док.ВнутреннийЗаказ,
	|	Док.ВнутреннийЗаказ.ВидЗаказа КАК ВидЗаказа,
	|	Док.ВнутреннийЗаказ.Заказчик КАК Заказчик,
	|	Док.СчетУчетаБУ,
	|	Док.СчетУчетаНУ,
	|	Док.СчетПередачиБУ КАК СчетПередачиБУ,
	|	Док.СчетПередачиНУ КАК СчетПередачиНУ,
	|	Док.СчетПередачиБУ КАК КорСчетБУ,
	|	Док.СчетПередачиНУ КАК КорСчетНУ,
	|	ЕСТЬNULL(СпособыОтраженияРасходов.НеУчитываемыеВНУ, Ложь) КАК НеУчитываемыеВНУ,
	|
	|	Док.Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество
	|ИЗ 
	|	Документ.ПередачаМатериаловВЭксплуатацию.Материалы КАК Док 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СпособыОтраженияРасходов КАК СпособыОтраженияРасходов
	|	ПО
	|		Док.НазначениеИспользования.СпособОтраженияРасходов = СпособыОтраженияРасходов.СпособОтраженияРасходов
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО 
	|	Док.НомерСтроки
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументСсылка", СтруктураШапкиДокумента.Ссылка);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоТабличнойЧастиМатериалы()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица материалов
//
Функция ПодготовитьТаблицуМатериалов(СтруктураШапкиДокумента)
	
	ЗапросПоМатериалам = СформироватьЗапросПоТабличнойЧастиМатериалы(СтруктураШапкиДокумента);
	РезультатЗапросаПоМатериалам = ЗапросПоМатериалам.Выполнить();

	ТаблицаМатериалов = РезультатЗапросаПоМатериалам.Выгрузить();
	
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуМатериалов()

Процедура ПроверитьЗаполнениеТабЧастиМатериалы( СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Для Каждого СтрокаМат Из ТаблицаПоМатериалам Цикл
		Если ЗначениеЗаполнено(СтрокаМат.ВнутреннийЗаказ) Тогда
			Если СтрокаМат.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение Тогда
				Если Подразделение <> СтрокаМат.Заказчик Тогда
					ОбщегоНазначения.СообщитьОбОшибке( "Подразделение внутреннего заказа не совпадает с подразделением текущего документа (строка № " + СтрокаМат.НомерСтроки + ")", Отказ, Заголовок);
				КонецЕсли;
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке( "Надо использовать внутренний заказ от подразделения (строка № " + СтрокаМат.НомерСтроки + ")", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабЧастиМатериалы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ);
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
	Если ТаблицаПоМатериалам.Количество() > 0 тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
		ЭтотОбъект,
		Дата,
		СтруктураШапкиДокумента.Организация,
		ОтражатьВУправленческомУчете,
		ОтражатьВБухгалтерскомУчете,
		ОтражатьВНалоговомУчете,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);		
	КонецЕсли;

	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И 
		глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух Тогда
		Движения.Хозрасчетный.Записать();
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И
		глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовНал Тогда
		Движения.Налоговый.Записать();
	КонецЕсли;
	
	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	Если ПРГ_ДопФункцииКлиентСервер.ПРГПроводитьПоПартиям(СтруктураШапкиДокумента) Тогда
	
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	КонецЕсли;
	//конец изменений 

	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Контроль остатков товара
	Если Материалы.Количество() <> 0 Тогда
		/// Кунов О.В., 28.04.2017 - 65106
		//ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения, Ссылка);
		///
	КонецЕсли;
	
	Если НЕ Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		//начало изменений БП 04
		ТаблицаПоМатериалам.Колонки.Добавить("ДокументПередачи");
		ТаблицаПоМатериалам.ЗаполнитьЗначения(Ссылка,"ДокументПередачи");
		//конец изменений БП 04 
		СтруктТаблицДокумента.Вставить("ТаблицаПоМатериалам", ТаблицаПоМатериалам);
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыНаСкладах, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Склад", СтруктураШапкиДокумента.Склад);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
		// ТОВАРЫ ПО РЕГИСТРУ МатериалыВПроизводстве.
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.МатериалыВЭксплуатации, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Подразделение", СтруктураШапкиДокумента.Подразделение);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "КодОперации", Перечисления.КодыОперацийМатериалыВЭксплуатации.СписаниеПартийВЭксплуатацию);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( Движения.МатериалыВЭксплуатации, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
		// Сформируем приход в партии материалов в эксплуатации
		Если НЕ глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументов
		   И Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
		Тогда
		
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ПартииМатериаловВЭксплуатации, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Подразделение",    СтруктураШапкиДокумента.Подразделение);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Стоимость",        0);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "СписаниеПартий",   Истина);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( Движения.ПартииМатериаловВЭксплуатации, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Движение по внутренним заказам
	ТаблицаПоЗаказам = ТаблицаПоМатериалам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказам.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказам.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ)
			ИЛИ СтрокаТаблицы.ВнутреннийЗаказ.Заказчик <> СтруктураШапкиДокумента.Подразделение Тогда
			 ТаблицаПоЗаказам.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяТабЧасти",       "Материалы");
	ДопПараметры.Вставить("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
	ДопПараметры.Вставить("РежимПроведения",   РежимПроведения);
	ДопПараметры.Вставить("ИмяРеквизитаЗаказ", "ВнутреннийЗаказ");
	ДопПараметры.Вставить("ЗаказВШапке",       Ложь);
	
	УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТаблицаПоЗаказам, ДопПараметры, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

// Формирование движений по регистру "Товары организаций".
//
Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;

	// Проверка остатков
	Движения.ТоварыОрганизаций.КонтрольОстатков(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	Если НЕ Отказ Тогда
	
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоМатериалам", ТаблицаПоМатериалам);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
		
		СкладМат = ?( СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, СтруктураШапкиДокумента.Склад, Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Склад",       СкладМат);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Организация", СтруктураШапкиДокумента.Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух
	   И Не Отказ 
	   И Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
	Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоМатериалам", ТаблицаПоМатериалам);
		
		// Сформируем приход в партии материалов в эксплуатации
		ТабИмен = Неопределено;
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоМатериалам, ТабИмен, "СчетПередачиБУ", "СчетУчета");
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет, СтруктТаблицДокумента);
		
		ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоМатериалам, ТабИмен);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Организация",    	 СтруктураШапкиДокумента.Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Подразделение",    СтруктураШапкиДокумента.ПодразделениеОрганизации);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Стоимость",        0);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "СписаниеПартий",   Истина);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( Движения.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
		   И Не глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовНал	
		Тогда
		
			ТабИмен = Неопределено;
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоМатериалам, ТабИмен, "СчетПередачиНУ", "СчетУчета");
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ПартииМатериаловВЭксплуатацииНалоговыйУчет, СтруктТаблицДокумента);
			
			ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоМатериалам, ТабИмен);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Организация",      СтруктураШапкиДокумента.Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Подразделение",    СтруктураШапкиДокумента.ПодразделениеОрганизации);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Стоимость",        0);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "СписаниеПартий",   Истина);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( Движения.ПартииМатериаловВЭксплуатацииНалоговыйУчет, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,"ДопустимыйСтатус2");
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,"ОтражатьВНалоговомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,                 "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации,    "ПодразделениеОрганизации");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,    "ИзменитьСклад");
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			Строка.ОтражатьВНалоговомУчете = Истина;
			Строка.СчетУчетаНУ = Строка.СчетУчетаБУ;
			Строка.КорСчетНУ = Строка.КорСчетБУ;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл()

// Формирование движений по регистру "Списанные товары".
//
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.СписанныеТовары, СтруктТаблицДокумента);
			
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Склад",            Склад);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "СкладПолучатель",  Склад);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Регистратор",      Ссылка);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Период",           Дата);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "Активность",       Истина);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента( ТаблицыДанныхДокумента, "КодОперацииПартииТоваров", Перечисления.КодыОперацийПартииТоваров.ПередачаМатериаловВЭксплуатацию);
			
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], СтруктураШапкиДокумента, ТаблицаПоТоварам);
			
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( Движения.СписанныеТовары, Неопределено, ТаблицыДанныхДокумента, Дата);
	
	Инд = 0;
	Для каждого Строка Из Движения.СписанныеТовары Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
    
	СтруктураШапкиДокумента = ПроверкаРеквизитов(Отказ);
	 

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "СписыватьПартииПриПроведенииДокументов", "СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиПартионныйУчетПоСкладам",           "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",       		"ВидСклада",                              "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	
	ТаблицаПоМатериалам = ПодготовитьТаблицуМатериалов(СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТабЧастиМатериалы( СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Материалы", ТаблицаПоМатериалам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоМатериалам", ТаблицаПоМатериалам));
	
КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполнение шапки
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Склад = Основание.СкладОрдер;
		
		Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		КонецЕсли;
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		#Если КЛИЕНТ Тогда
			
		// Выбор склада
		УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
		СкладВТабЧасти  = УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления
					  ИЛИ УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации;
					  
		Если СкладВТабЧасти Тогда
		
			СтруктТабЧастей = Новый Структура;
			СтруктТабЧастей.Вставить("Товары", "Склад");
			
			СтруктПараметры = Новый Структура;
			СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
			СтруктПараметры.Вставить("ИмяСкладаВШапке", "СкладОрдер");
			
			Склад = РаботаСДиалогами.ВыбратьСкладИзДокументаОснования(Основание, СтруктПараметры);
			
		Иначе
			
			Склад = Основание.СкладОрдер;
			
		КонецЕсли;
		#КонецЕсли
		
		ЗаполнитьТоварыПоДокументуПоступлениеТоваровУслуг(Основание);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 	
	
	Если НЕ ОтражатьВУправленческомУчете Тогда
		Для Каждого СтрокаМат Из Материалы Цикл
			Если СтрокаМат.ВнутреннийЗаказ <> Неопределено Тогда
				СтрокаМат.ВнутреннийЗаказ = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()


//ВадимКонец
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");

