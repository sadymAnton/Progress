//++ Spl_Апроф 05.09.2014 (k.russkih@a-prof.ru) Добавил реквизит ДокументОснования "ДокументСсылка.ПР_Претензия" и ввод на основании. Вывел на форму элемента вкладка "дополнительно"

Перем мУдалятьДвижения Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мИспользоватьРасширеннуюАналитику Экспорт;
Перем мДатаНачалаИспользованияРасширеннойАналитики Экспорт;

Перем мПараметрыПартионногоУчета;
Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мДокументРеализацииСсылка Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьСвойстваШапки(ЗаполнятьРедактируемыеРеквизиты = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	// Перед заполнением сохраним реквизиты шапки документа, не заполняемые из основания
	//Бирюков добавил ИД_Обмена
	//начало изменения
	НезаполняемыеРеквизиты =
	"ПометкаУдаления, Проведен, Дата, Номер, ВидОперации,КорректировочныйСЧФ,АП_ДатаОплаты,
	|ДокументРеализации, КорректироватьБУиНУ, Ответственный, Комментарий, ПризнаватьЗачитыватьАванс, ИД_Обмена, ПР_Претензия,ОтражатьВУправленческомУчете"; //++ Spl_Апроф 22.09.2014 (k.russkih@a-prof.ru) Добавил "ПР_Претензия"
	//конец изменений	
	
	Если НЕ ЗаполнятьРедактируемыеРеквизиты Тогда
		НезаполняемыеРеквизиты = НезаполняемыеРеквизиты
		+ ", ОтчетностьПодписана, СтатьяПрочихДоходовИРасходов, АдресДоставки, ДополнениеКАдресуДоставки,
		|БанковскийСчетОрганизации, Грузоотправитель, Грузополучатель";
	КонецЕсли;
	
	//Бирюков Для корректировок из navision склад из основания заполнять не нужно
	Если НЕ ИД_Обмена = "" Тогда
		НезаполняемыеРеквизиты = НезаполняемыеРеквизиты + ", Склад";
	КонецЕсли;
	
	СтруктураНезаполняемыеРеквизиты = Новый Структура(НезаполняемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(СтруктураНезаполняемыеРеквизиты, ЭтотОбъект);
	
	// Очистим реквизиты шапки документа
	Для Каждого Реквизит из ЭтотОбъект.Метаданные().Реквизиты Цикл
		Если НЕ СтруктураНезаполняемыеРеквизиты.Свойство(Реквизит.Имя) Тогда
			ЭтотОбъект[Реквизит.Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	мДокументРеализацииСсылка = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	
	Если ЗначениеЗаполнено(мДокументРеализацииСсылка) Тогда
		
		// Заполненим основные реквизиты шапки по первичному документу
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, мДокументРеализацииСсылка);
		
		/// Кунов О.В., 24.09.2014 - 31922
		//Если Не ЗначениеЗаполнено(КурсВзаиморасчетов) ИЛИ Не ЗначениеЗаполнено(КратностьВзаиморасчетов) Тогда
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсВзаиморасчетов 			 = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов 	 = СтруктураКурсаВзаиморасчетов.Кратность;
		//КонецЕсли;
		///
		
		/// Кунов О.В., 11.03.2015 - 37503
		ГрузополучательВРеализации = мДокументРеализацииСсылка.Грузополучатель;
		Если ТипЗнч(ГрузополучательВРеализации) = Тип("СправочникСсылка.Контрагенты") Тогда
			Грузополучатель = ГрузополучательВРеализации;
			АдресДоставки = мДокументРеализацииСсылка.АдресДоставки;
		ИначеЕсли
		/// Кунов О.В., 02.12.2016 - 59879
			ТипЗнч(ГрузополучательВРеализации) = Тип("СправочникСсылка.АдресаПоставки") Тогда
		///	
			АдресДоставки = ГрузополучательВРеализации.НСИ_АдресДоставки;
		КонецЕсли;
		///
		
		// Заполним реквизиты учета НДС в случае, если таких реквизитов нет в первичном документе
		МетаданныеДокументаОснования = мДокументРеализацииСсылка.Метаданные();
		Если МетаданныеДокументаОснования.Реквизиты.Найти("УчитыватьНДС") = Неопределено Тогда
			УчитыватьНДС = Истина;
		КонецЕсли;
		Если МетаданныеДокументаОснования.Реквизиты.Найти("СуммаВключаетНДС") = Неопределено Тогда
			СуммаВключаетНДС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КорректироватьБУиНУ Тогда
		// Перезаполним шапку по документу основания 
		/// Кунов О.В., 24.09.2014 - 31922
		///начало изменений  исключение вероятности блокировок Ожиганов
		//если док на основании претензии проводим в зависимости от настроек пользователя
		Если ПРГ_ДопФункцииКлиентСервер.ПРГ_ПриФормированииДокОтгрузкиТолькоУпр() и (ЗначениеЗаполнено(ПР_Претензия) Или
			/// Кунов О.В., 24.08.2015 - 43211
			ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")) Тогда
			///
			ОтражатьВБухгалтерскомУчете  = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВБухгалтерскомУчете");
			ОтражатьВНалоговомУчете      = ОтражатьВНалоговомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
		Иначе	
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументРеализации, , "КурсВзаиморасчетов");
		КонецЕсли;	
		//конец изменений
		
		///
	КонецЕсли;
	
	// Восстановим незаполняемые реквизиты
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНезаполняемыеРеквизиты);
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
	
	Если ТипЗнч(УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь);
		Иначе
			ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
		КонецЕсли;	
	Иначе	
		ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь);
	КонецЕсли;
	
	// Установим значение Неопределено для незаполненных реквизитов составного типа
	Если НЕ ЗначениеЗаполнено(Сделка) И Сделка <> Неопределено Тогда
		Сделка = Неопределено;
	КонецЕсли;
	
	// Цены в документе всегда указываем вручную
	ТипЦен = Неопределено;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументу() Экспорт
	
	Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ЗаполнитьПоРеализации();
		
	ИначеЕсли ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		
		ЗаполнитьПоАктуОказанияПроизводственныхУслуг();
		
	КонецЕсли;
	
КонецПроцедуры


Функция ДоступнаКорректировкаБУиНУ() Экспорт
	
	// Корректировка по учетам доступна только для некоторых видов документов
	Возврат
	((ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	И (ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
	ИЛИ ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот)
	И ЗначениеЗаполнено(ДокументРеализации.ДоговорКонтрагента)
	И ДокументРеализации.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
	ИЛИ ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
	ИЛИ (ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
	И ДокументРеализации.КорректироватьБУиНУ));
	
КонецФункции

Функция ДоступноПризнаватьЗачитыватьАванс() Экспорт
	
	// Возможность признавать или зачитывать аванс недоступна 
	// для договоров с ведением взаиморасчетов по расчетным документам с контрагентами
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат НЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", 	  ДокументСсылка);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.ИсправляемыйДокументРеализации = &Ссылка
	|	И КорректировкаРеализации.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
	|	И КорректировкаРеализации.Ссылка <> &ЭтотДокумент
	|	И КорректировкаРеализации.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	КорректировкаРеализации.Дата УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	Возврат ДокументСсылка;
	
КонецФункции

Функция ЭтоКорректировкаРТиУ() Экспорт
	
	Возврат (ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	
КонецФункции

Функция ЭтоКорректировкаАкта() Экспорт
	
	Возврат (ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
	
КонецФункции

Функция ВозможнаКорректировкаУслуг() Экспорт
	
	Если НЕ ЗначениеЗаполнено(мДокументРеализацииСсылка)
		ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")
		ИЛИ ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.НаличиеТабличнойЧастиУДокумента(мДокументРеализацииСсылка.Метаданные().Имя, "Услуги");
	
КонецФункции

Функция ВозможнаКорректировкаТоваров() Экспорт
	
	Если (ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И мДокументРеализацииСсылка.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот)
		ИЛИ ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОписаниеТипаНоменклатурыПоОснованию() Экспорт
	
	Если ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.ПередачаОС") Тогда
		
		ОписаниеТипаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства");
		
	ИначеЕсли ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.ПередачаНМА") Тогда
		
		ОписаниеТипаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы");
		
	ИначеЕсли ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")
		И ТипЗнч(мДокументРеализацииСсылка.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
		
		ОписаниеТипаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства");
		
	ИначеЕсли ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
		
		ОписаниеТипаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.Номенклатура, СправочникСсылка.ОсновныеСредства, СправочникСсылка.НематериальныеАктивы");
		
	Иначе
		
		ОписаниеТипаНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		
	КонецЕсли;
	
	Возврат ОписаниеТипаНоменклатуры;
	
КонецФункции

Функция ПолучитьСвойстваСкладаВТабличнойЧасти() Экспорт
	
	СвойстваСклада = Новый Структура;
	
	СвойстваСклада.Вставить("ВидимостьСклада", 				КорректироватьБУиНУ И ЭтоКорректировкаРТиУ());
	СвойстваСклада.Вставить("ОбязательноеЗаполнениеСклада", СвойстваСклада.ВидимостьСклада);
	
	Возврат СвойстваСклада;
	
КонецФункции

Функция ПолучитьСвойстваЗаказаВТабличнойЧасти() Экспорт
	
	ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
	СвойстваЗаказа 		  = Новый Структура;
	
	// Заказ в ТЧ виден, если взаиморасчеты по договору ведутся по заказам или по договору в целом (не ведутся по счетам)
	// Заполнение заказа обязательно, если если взаиморасчеты по договору ведутся по заказам
	СвойстваЗаказа.Вставить("ВидимостьЗаказа",
	ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
	И КорректироватьБУиНУ);
	СвойстваЗаказа.Вставить("ОбязательноеЗаполнениеЗаказа",
	СвойстваЗаказа.ВидимостьЗаказа
	И ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	СвойстваЗаказа.Вставить("ВидимостьСпособаСписания",
	СвойстваЗаказа.ВидимостьЗаказа);
	СвойстваЗаказа.Вставить("ОбязательноеЗаполнениеСпособаСписания",
	СвойстваЗаказа.ВидимостьСпособаСписания
	И ЗначениеЗаполнено(Сделка));
	
	Возврат СвойстваЗаказа;
	
КонецФункции


//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ = Истина, ЗаполнятьНУ = Истина) Экспорт
	
	СтруктураСчетов = Новый Структура;
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",	   СчетаУчета.СчетАвансовПокупателя);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

#Если Клиент Тогда
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
			Возврат;
		ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
			Возврат;
		КонецЕсли;
		
		Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "СерийныеНомера" Тогда
			
			ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
			
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
			Если ТабДокумент = Неопределено Тогда
				Возврат;
			КонецЕсли; 
			
		КонецЕсли;
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		
	КонецПроцедуры // Печать
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктПечатныхФорм = Новый Структура;
		СтруктПечатныхФорм.Вставить("СерийныеНомера", "Список серийных номеров");
		
		Возврат СтруктПечатныхФорм;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ДОКУМЕНТА

Процедура ЗаполнитьПоРеализации()
	
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Товары.Очистить();
	Услуги.Очистить();
	СерийныеНомера.Очистить();
	СоставНабора.Очистить();
	СерийныеНомераСоставНабора.Очистить();
	
	ИмяВидаДокумента = ДокументРеализации.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументРеализации);
	
	Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.НомерСтроки КАК НомерСтрокиОснования,
	|	КорректировкаРеализацииТовары.Количество,
	|	КорректировкаРеализацииТовары.Количество КАК КоличествоДоИзменения,
	|	КорректировкаРеализацииТовары.Цена,
	|	КорректировкаРеализацииТовары.Цена КАК ЦенаДоИзменения,
	|	КорректировкаРеализацииТовары.Сумма,
	|	КорректировкаРеализацииТовары.Сумма КАК СуммаДоИзменения,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДС,
	|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДСДоИзменения,
	|	""Товары"" КАК ТЧ,";
	
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	КорректировкаРеализацииТовары.КоличествоДоКорректировки,
		|	КорректировкаРеализацииТовары.ЦенаДоКорректировки,
		|	КорректировкаРеализацииТовары.СуммаДоКорректировки,
		|	КорректировкаРеализацииТовары.СуммаНДСДоКорректировки,";
	Иначе
		Текст = Текст + "
		|	0 КАК КоличествоДоКорректировки,
		|	0 КАК ЦенаДоКорректировки,
		|	0 КАК СуммаДоКорректировки,
		|	0 КАК СуммаНДСДоКорректировки,";
	КонецЕсли;
	
	Текст = Текст + "
	|	ИСТИНА КАК ЕстьВДокументеРеализации,
	|	NULL КАК Содержание,
	|	NULL КАК СодержаниеДоИзменения
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.Цена,
	|	КорректировкаРеализацииУслуги.Цена,
	|	КорректировкаРеализацииУслуги.Сумма,
	|	КорректировкаРеализацииУслуги.Сумма,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	""Услуги"",";
	
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	КорректировкаРеализацииУслуги.КоличествоДоКорректировки,
		|	КорректировкаРеализацииУслуги.ЦенаДоКорректировки,
		|	КорректировкаРеализацииУслуги.СуммаДоКорректировки,
		|	КорректировкаРеализацииУслуги.СуммаНДСДоКорректировки,";
	Иначе
		Текст = Текст + "
		|	0,
		|	0,
		|	0,
		|	0,";
	КонецЕсли;
	
	Текст = Текст + "
	|	ИСТИНА,
	|	КорректировкаРеализацииУслуги.Содержание,
	|	КорректировкаРеализацииУслуги.Содержание
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".Услуги КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка";
	
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить().Выбрать();
	
	ДокументРеализацииТовары = ДокументРеализации.Товары;
	ДокументРеализацииУслуги = ДокументРеализации.Услуги;
	
	//++ Spl_Апроф 10.09.2014 (k.russkih@a-prof.ru) Скорректируем количество
	ВыполнятьКорректировкуПоПретензии = (ТипЗнч(ПР_Претензия) = Тип("ДокументСсылка.ПР_Претензия")) И ЗначениеЗаполнено(ПР_Претензия);
	МассивСтрокОбработанных = Новый Массив;
	//-- Spl_Апроф	
	
	/// Кунов О.В., 31.03.2015 - 38301
	Если ВыполнятьКорректировкуПоПретензии Тогда
		ТоварыВПретензии = ПР_Претензия.Товары.Выгрузить();
		ТоварыВПретензии.Колонки.Добавить("Обработано");
		ТоварыВПретензии.ЗаполнитьЗначения(Ложь, "Обработано");
		/// Кунов О.В., 05.06.2015 - 40450
		ТоварыВПретензии.Колонки.Добавить("ОстатокПоРекламации");
		ТоварыВПретензии.Колонки.Добавить("ОсталосьПозиций"); /// Кунов О.В., 26.05.2017 - 66011
		Для Каждого СтрокаТоваров Из ТоварыВПретензии Цикл
			/// Кунов О.В., 04.05.2017 - 64486
			//СтрокаТоваров.ОстатокПоРекламации = ? (СтрокаТоваров.КоличествоРекламации <> 0, СтрокаТоваров.КоличествоРекламации, СтрокаТоваров.Количество);
			СтрокаТоваров.ОстатокПоРекламации = СтрокаТоваров.КоличествоРекламации;
			СтрокаТоваров.ОсталосьПозиций = ДокументРеализацииТовары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТоваров.Номенклатура)).Количество(); /// Кунов О.В., 26.05.2017 - 66011
			///
		КонецЦикла;
		///
	КонецЕсли;
	///
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.ТЧ = "Товары" Тогда
			
			/// Кунов О.В., 24.07.2017 - 68491
			Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение И Результат.Количество = 0 И Результат.КоличествоДоКорректировки = 0 Тогда
				Продолжить;
			ИначеЕсли Результат.Количество = 0 И Результат.КоличествоДоИзменения = 0 Тогда
				Продолжить;
			КонецЕсли;
			///
			
			СтрокаТоваров = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, ДокументРеализацииТовары[Результат.НомерСтрокиОснования - 1]);
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, Результат);
			
			//++ Spl_Апроф 10.09.2014 (k.russkih@a-prof.ru)
			Если ВыполнятьКорректировкуПоПретензии Тогда
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура"				, СтрокаТоваров.Номенклатура);
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры"	, СтрокаТоваров.ХарактеристикаНоменклатуры);
				СтруктураОтбора.Вставить("СерияНоменклатуры"			, СтрокаТоваров.СерияНоменклатуры);
				
				/// Кунов О.В., 31.03.2015 - 38301
				СтруктураОтбора.Вставить("Обработано"					, Ложь);
				
				//НайтиСтроку = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ПР_Претензия.Товары, СтруктураОтбора);
				НайтиСтроку = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТоварыВПретензии, СтруктураОтбора);
				///
				
				Если НайтиСтроку <> Неопределено Тогда
					
					/// Кунов О.В., 26.05.2017 - 66011
					ОсталосьПозиций = НайтиСтроку.ОсталосьПозиций;
					Если ОсталосьПозиций > 0 Тогда
						НайтиСтроку.ОсталосьПозиций = ОсталосьПозиций - 1;
					КонецЕсли;
					///
					
					/// Кунов О.В., 31.03.2015 - 38301, 26.05.2017 - 66011
					Если НайтиСтроку.ОстатокПоРекламации = 0 И НайтиСтроку.ОсталосьПозиций = 0 Тогда
						НайтиСтроку.Обработано = Истина;
					КонецЕсли;
					///
					
					/// Кунов О.В., 25.05.2015 - 39871
					Если НайтиСтроку.КоличествоНакладной = 0 Тогда
						//Товары.Удалить(СтрокаТоваров);     // Шевченков № 40154
						Продолжить;                                        						
					КонецЕсли;
					///
					
					МассивСтрокОбработанных.Добавить(НайтиСтроку);
					
					//++ Spl_Апроф 18.02.2015 (k.russkih@a-prof.ru)
					Если НайтиСтроку.КоличествоРекламации = 0 И НайтиСтроку.Количество = 0 Тогда					  
						Продолжить;					  
					КонецЕсли;
					
					//ЗаполнитьЗначенияСвойств(СтрокаТоваров, НайтиСтроку);
					//++ Spl_Апроф 13.01.2015 (k.russkih@a-prof.ru) Пункт 87
					//СтрокаТоваров.Количество = ?(НайтиСтроку.КоличествоРекламации > 0, -1, 1) * НайтиСтроку.Количество + НайтиСтроку.КоличествоНакладной;
					
					/// Кунов О.В., 05.06.2015 - 40450
					Если НайтиСтроку.КоличествоРекламации = 0 Тогда
						СтрокаТоваров.Количество = Мин(НайтиСтроку.Количество, СтрокаТоваров.Количество);
					Иначе
						КоличествоКВычету = Мин(НайтиСтроку.ОстатокПоРекламации, СтрокаТоваров.КоличествоДоИзменения);
						СтрокаТоваров.Количество = СтрокаТоваров.КоличествоДоИзменения - КоличествоКВычету;
						НайтиСтроку.ОстатокПоРекламации = НайтиСтроку.ОстатокПоРекламации - КоличествоКВычету;
					КонецЕсли; 
					///
					
					/// Кунов О.В., 28.06.2017 - 67434
					Если НайтиСтроку.КоличествоРекламации <> 0 И НайтиСтроку.ОстатокПоРекламации = 0 Тогда
						НайтиСтроку.Обработано = Истина;
						Если НайтиСтроку.НомерСтроки < ТоварыВПретензии.Количество() Тогда
							СледующаяСтрока = ТоварыВПретензии[НайтиСтроку.НомерСтроки];
							Если (СледующаяСтрока.Номенклатура = НайтиСтроку.Номенклатура) И (СледующаяСтрока.КоличествоРекламации = - НайтиСтроку.КоличествоРекламации) Тогда
								СледующаяСтрока.Обработано = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					///
					
					СтрокаТоваров.Цена = НайтиСтроку.ЦенаФакт;
					/// Кунов О.В., 08.04.2015 - 38453
					СтрокаТоваров.ЦенаДоИзменения = НайтиСтроку.Цена;
					/// Кунов О.В., 16.04.2015 - 38964, 05.06.2015 - 40450
					СтрокаТоваров.СуммаДоИзменения = НайтиСтроку.Цена * СтрокаТоваров.КоличествоДоИзменения; // НайтиСтроку.СуммаНакладной; // СтрокаТоваров.ЦенаДоИзменения * СтрокаТоваров.КоличествоДоИзменения;
					///
					СтрокаТоваров.Сумма = СтрокаТоваров.Цена * СтрокаТоваров.Количество;
					//
					//м_СуммаСкидки = СтрокаТоваров.Сумма * НайтиСтроку.ПроцентАвтоматическихСкидок / 100;	
					//м_СуммаСкидки = м_СуммаСкидки + (СтрокаТоваров.Сумма * НайтиСтроку.ПроцентСкидкиНаценки / 100);					  
					//
					//СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - м_СуммаСкидки;
					
					//++ Spl_Апроф 17.03.2015 (k.russkih@a-prof.ru)
					//мЦенаЗаказ = 0;
					//Если НЕ СтрокаТоваров.Количество = 0 Тогда
					//
					//	 мЦенаЗаказ = Окр(СтрокаТоваров.Сумма / СтрокаТоваров.Количество,2);
					//
					//КонецЕсли; 
					//
					//СтрокаТоваров.Сумма = мЦенаЗаказ * СтрокаТоваров.Количество; 
					
					СтрокаТоваров.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТоваров.Сумма,
					УчитыватьНДС, СуммаВключаетНДС,
					УчетНДС.ПолучитьСтавкуНДС(СтрокаТоваров.СтавкаНДС));					  
					
					//++ Spl_Апроф 12.02.2015 (k.russkih@a-prof.ru)														  
					СтрокаТоваров.Склад = ПР_Претензия.Склад;
					
					//>>180416 Степанов 
					СтрокаТоваров.ЦенаНакладнойБезВычетаСкидки = НайтиСтроку.ЦенаНакладнойБезВычетаСкидки;
					СтрокаТоваров.ПриказУстановкиСкидки = НайтиСтроку.ПриказУстановкиСкидки;
					
					//{20.12.2016 Островерхий заявка №57373 
					СтрокаТоваров.ПЦ_ПроцентДопИзмененияЦеныНакладной = НайтиСтроку.ПЦ_ПроцентДопИзмененияЦеныНакладной;
                    СтрокаТоваров.ПЦ_ПроцентДопИзмененияЦеныФакт = НайтиСтроку.ПЦ_ПроцентДопИзмененияЦеныФакт;
					//20.12.2016 Островерхий} 
					
				Иначе
					
					Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И СтрокаТоваров.Количество <> 0 Тогда
						СтрокаТоваров.Цена					= СтрокаТоваров.Сумма / СтрокаТоваров.Количество;
						СтрокаТоваров.ЦенаДоИзменения		= СтрокаТоваров.Сумма / СтрокаТоваров.Количество;
					КонецЕсли;
					
				КонецЕсли; 
			Иначе
				
				СтрокаОснования = ДокументРеализацииТовары[Результат.НомерСтрокиОснования - 1];
				СтрокаТоваров.Сумма 				= СтрокаОснования.Сумма;
				СтрокаТоваров.СуммаДоИзменения 		= СтрокаОснования.Сумма;
				СтрокаТоваров.Количество 			= СтрокаОснования.Количество;
				СтрокаТоваров.КоличествоДоИзменения = СтрокаОснования.Количество;
				
				/// Кунов О.В., 18.08.2015
				Если СтрокаОснования.Количество = 0 Тогда
					СтрокаТоваров.Цена 				= СтрокаОснования.Цена;
					СтрокаТоваров.ЦенаДоИзменения 	= СтрокаОснования.Цена;
				Иначе
					СтрокаТоваров.Цена				= СтрокаОснования.Сумма / СтрокаОснования.Количество;
					СтрокаТоваров.ЦенаДоИзменения	= СтрокаОснования.Сумма / СтрокаОснования.Количество;
				КонецЕсли;
				///
				
			КонецЕсли;
			//-- Spl_Апроф
			
		Иначе // услуги
			СтрокаУслуг = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, ДокументРеализацииУслуги[Результат.НомерСтрокиОснования - 1]);
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, Результат);
		КонецЕсли;
		
	КонецЦикла;
	
	//++ Spl_Апроф 18.12.2014 (k.russkih@a-prof.ru) Добавим строки, которой нет в реализации, но есть в претензии
	Если ВыполнятьКорректировкуПоПретензии Тогда
		
		/// Кунов О.В., 31.03.2015 - 38301
		//Для каждого мСтрока Из ПР_Претензия.Товары Цикл
		Для каждого мСтрока Из ТоварыВПретензии Цикл
			///	
			
			Если МассивСтрокОбработанных.Найти(мСтрока) = Неопределено Тогда
				
				СтрокаТоваров = Товары.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТоваров, мСтрока);
				
				//СтрокаТоваров.Количество = мСтрока.Количество;
				//++ Spl_Апроф 13.01.2015 (k.russkih@a-prof.ru) Пункт 87
				СтрокаТоваров.Количество = ?(мСтрока.КоличествоРекламации > 0, -1, -1) * мСтрока.КоличествоРекламации;
				
				СтрокаТоваров.Цена = мСтрока.ЦенаФакт;
				СтрокаТоваров.Сумма = СтрокаТоваров.Цена * СтрокаТоваров.Количество;
				
				//180216 №49208
				//м_СуммаСкидки = СтрокаТоваров.Сумма * мСтрока.ПроцентАвтоматическихСкидок / 100;	
				//м_СуммаСкидки = м_СуммаСкидки + (СтрокаТоваров.Сумма * мСтрока.ПроцентСкидкиНаценки / 100);		
				//СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - м_СуммаСкидки;
				//180216
				
				СтрокаТоваров.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТоваров.Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТоваров.СтавкаНДС));			
				СтрокаТоваров.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				//++ Spl_Апроф 12.02.2015 (k.russkih@a-prof.ru)
				Если ТипЗнч(ПР_Претензия.Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда				
					СтрокаТоваров.Склад = ?(ЗначениеЗаполнено(ПР_Претензия.Склад),ПР_Претензия.Склад,ПР_Претензия.Накладная.Склад);
				Иначе
					СтрокаТоваров.Склад = ПР_Претензия.Склад;
				КонецЕсли;
				
				
				
				
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТоваров, "Товары", Истина, Истина);
				
				Попытка
					СтрокаТоваров.ЗаказПокупателя = ДокументРеализацииТовары[Результат.НомерСтрокиОснования - 1].ЗаказПокупателя; // Шевченков № 40154
				Исключение
					Сообщить("Ошибка заполнения заказа, сообщите программистам 1с");
				КонецПопытки;				
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 	
	//-- Spl_Апроф
	
	// Загрузим табличную часть СерийныеНомера
	СерийныеНомера.Загрузить(ДокументРеализации.СерийныеНомера.Выгрузить());
	
	//>>190416 Степанов 
	Если ВыполнятьКорректировкуПоПретензии И ПР_Претензия.ПРГ_УчитыватьСкидки тогда
		//перенесли готовый результат из претензии, пересчитываем скидки по данным строк
		Для Каждого ТекСтрока Из Товары Цикл
			//ТекСтрока = СтрокаТабличнойЧасти;	
			ПоДаннымЦеныНакладной = Ложь;
			Если ТекСтрока.ЦенаНакладнойБезВычетаСкидки>0 тогда
				Если (ТекСтрока.ПроцентАвтоматическихСкидок<>0) И (ТекСтрока.ПроцентСкидкиНаценки<>0) тогда
					//
				Иначе	
					Если ТекСтрока.Цена = ТекСтрока.ЦенаДоИзменения тогда
						ПоДаннымЦеныНакладной = Истина;
						ИзменениеКоличества = ТекСтрока.Количество - ТекСтрока.КоличествоДоИзменения;
						СкидкаВЦене         = ТекСтрока.ЦенаНакладнойБезВычетаСкидки - ТекСтрока.Цена;
						ИзменениеСкидки     = ИзменениеКоличества * СкидкаВЦене;
						Если ТекСтрока.ПроцентАвтоматическихСкидок<>0 тогда
							ТекСтрока.СуммаИзмененияСкидки2 = ИзменениеСкидки;
						ИначеЕсли ТекСтрока.ПроцентСкидкиНаценки<>0 тогда
							ТекСтрока.СуммаИзмененияСкидки1 = ИзменениеСкидки;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если ПоДаннымЦеныНакладной = Ложь тогда	
				ОстатокБазыРасчетаСкидки = (ТекСтрока.Сумма-ТекСтрока.СуммаДоИзменения);
				Если ОстатокБазыРасчетаСкидки<>0 тогда
					Если ТекСтрока.ПроцентАвтоматическихСкидок>0 тогда
						ТекСтрока.СуммаИзмененияСкидки2 = ОстатокБазыРасчетаСкидки*100/(100-ТекСтрока.ПроцентАвтоматическихСкидок)-ОстатокБазыРасчетаСкидки;
						ОстатокБазыРасчетаСкидки = ОстатокБазыРасчетаСкидки+ТекСтрока.СуммаИзмененияСкидки2;
					Иначе
						ТекСтрока.СуммаИзмененияСкидки2=0;
					Конецесли;
					Если ТекСтрока.ПроцентСкидкиНаценки>0 тогда
						ТекСтрока.СуммаИзмененияСкидки1 = ОстатокБазыРасчетаСкидки*100/(100-ТекСтрока.ПроцентСкидкиНаценки)-ОстатокБазыРасчетаСкидки;
					Иначе
						ТекСтрока.СуммаИзмененияСкидки1=0;
					КонецЕсли;
				Иначе
					ТекСтрока.СуммаИзмененияСкидки1=0;
					ТекСтрока.СуммаИзмененияСкидки2=0;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе	
		
		//>>100316 Степанов 47706; СКИДКИ
		ТЗТоваров = Товары.Выгрузить(,"ЗаказПокупателя");
		ТЗТоваров.Свернуть("ЗаказПокупателя");
		РодительскийЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		Для Каждого ТекСтрокаТЗ из ТЗТоваров цикл
			//ищем родительский заказ покупателя, подразумевая, что одна реализация соответствует одному заказу
			Если ТекСтрокаТЗ.ЗаказПокупателя <> Документы.ЗаказПокупателя.ПустаяСсылка() тогда
				РодительскийЗаказПокупателя = ТекСтрокаТЗ.ЗаказПокупателя;
			КонецЕсли;	
		КонецЦикла;
		Если РодительскийЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка() тогда
			//нет заказа, - нет операций со скидками
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказПокупателяТовары.НомерСтроки,
			|	ЗаказПокупателяТовары.Номенклатура,
			|	ЗаказПокупателяТовары.ПроцентСкидкиНаценки,
			|	ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок,
			|	ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			|ГДЕ
			|	ЗаказПокупателяТовары.Ссылка = &Заказ
			|	И (ЗаказПокупателяТовары.ПроцентСкидкиНаценки <> 0
			|	ИЛИ ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок <> 0)";
			Запрос.УстановитьПараметр("Заказ",РодительскийЗаказПокупателя);
			Рез = Запрос.Выполнить().Выбрать();
			Пока Рез.Следующий() цикл
				Отбор = Новый Структура();
				Отбор.Вставить("Номенклатура", Рез.Номенклатура);
				НайденныеСтроки = Товары.НайтиСтроки(Отбор);
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					//пересчет данных строки в соответствии со скидками
					ТекСтрока.ПроцентСкидкиНаценки = Рез.ПроцентСкидкиНаценки;
					ТекСтрока.ПроцентАвтоматическихСкидок = Рез.ПроцентАвтоматическихСкидок;
					ТекСтрока.ПриказУстановкиСкидки = Рез.ЗначениеУсловияАвтоматическойСкидки;
					ТекСтрока.СуммаИзмененияСкидки1=0;
					ТекСтрока.СуммаИзмененияСкидки2=0;
					
					РазницаСуммыБезНДС = (ТекСтрока.Сумма-ТекСтрока.СуммаДоИзменения)-?(СуммаВключаетНДС,ТекСтрока.СуммаНДС-ТекСтрока.СуммаНДСДоИзменения,0);
					ОстатокБазыРасчетаСкидки = РазницаСуммыБезНДС;
					Если РазницаСуммыБезНДС<>0 тогда
						Если ТекСтрока.ПроцентАвтоматическихСкидок>0 тогда
							ТекСтрока.СуммаИзмененияСкидки2 = ОстатокБазыРасчетаСкидки*100/(100-ТекСтрока.ПроцентАвтоматическихСкидок)-РазницаСуммыБезНДС;
							ОстатокБазыРасчетаСкидки = ОстатокБазыРасчетаСкидки+ТекСтрока.СуммаИзмененияСкидки2;
						Конецесли;
						Если ТекСтрока.ПроцентСкидкиНаценки>0 тогда
							ТекСтрока.СуммаИзмененияСкидки1 = ОстатокБазыРасчетаСкидки*100/(100-ТекСтрока.ПроцентСкидкиНаценки)-ОстатокБазыРасчетаСкидки;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;
	//<<100316 Степанов 47706; СКИДКИ	
	
	
КонецПроцедуры

Процедура ЗаполнитьПоАктуОказанияПроизводственныхУслуг()
	
	Товары.Очистить();
	Услуги.Очистить();
	СерийныеНомера.Очистить();
	СоставНабора.Очистить();
	СерийныеНомераСоставНабора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументРеализации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.НомерСтроки КАК НомерСтрокиОснования,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.Количество КАК КоличествоДоИзменения,
	|	КорректировкаРеализацииУслуги.Цена,
	|	КорректировкаРеализацииУслуги.Цена КАК ЦенаДоИзменения,
	|	КорректировкаРеализацииУслуги.Сумма,
	|	КорректировкаРеализацииУслуги.Сумма КАК СуммаДоИзменения,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС КАК СуммаНДСДоИзменения,
	|	КорректировкаРеализацииУслуги.Ссылка.Сделка КАК ЗаказПокупателя,
	|	ИСТИНА КАК ЕстьВДокументеРеализации
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	ДокументРеализацииУслуги = ДокументРеализации.Услуги;
	
	Пока Результат.Следующий() Цикл
		СтрокаУслуг = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУслуг, ДокументРеализацииУслуги[Результат.НомерСтрокиОснования - 1]);
		ЗаполнитьЗначенияСвойств(СтрокаУслуг, Результат);		
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьЗаказыВТЧ()
	
	Если НЕ ПолучитьСвойстваЗаказаВТабличнойЧасти().ВидимостьЗаказа Тогда
		Возврат;
	КонецЕсли;	
	
	// В табличной части может быть только заказ покупателя, а в шапке реквизит заказ имеет составной тип
	ЗаказИзШапки = ?(ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя"), Сделка, Документы.ЗаказПокупателя.ПустаяСсылка());
	
	// Если заказ в табличной части не выбран, то заполним его заказом из шапки
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя) И СтрокаТЧ.ЗаказПокупателя <> ЗаказИзШапки Тогда
			СтрокаТЧ.ЗаказПокупателя = ЗаказИзШапки;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТЧ Из Услуги Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя) И СтрокаТЧ.ЗаказПокупателя <> ЗаказИзШапки Тогда
			СтрокаТЧ.ЗаказПокупателя = ЗаказИзШапки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьЗаказыВТЧ()

Процедура ЗаполнитьСкладыВТЧ()
	
	Если НЕ ПолучитьСвойстваСкладаВТабличнойЧасти().ВидимостьСклада Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 17.04.2015 изменение склада в корректировке реализации 
	Если ЗначениеЗаполнено(ПР_Претензия) Тогда
		ПРГСкладГП 		  = ПР_Претензия.Склад;
		ПРГСкладПретензии = ПР_Претензия.СкладПретензии;
		Для Каждого СтрокаТЧ из Товары Цикл
			КолВо = СтрокаТЧ.Количество-СтрокаТЧ.КоличествоДоИзменения;
			Если КолВо >= 0 Тогда
				СтрокаТЧ.Склад = ПРГСкладГП;
			Иначе
				СтрокаТЧ.Склад = ПРГСкладПретензии;
			КонецЕслИ;	
		КонецЦикла;	
		возврат; 
	КонецЕсли;	
	//конец изменений 
	
	
	// Получим соответствие заказов из табличной части Товары и складов, указанных в этих заказах
	СоответствиеЗаказовИСкладов = Новый Соответствие;
	
	Если ПолучитьСвойстваЗаказаВТабличнойЧасти().ВидимостьЗаказа Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Заказ,
		|	ЗаказПокупателя.СкладГруппа КАК Склад
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка В(&Заказы)";
		
		ТаблицаЗаказы = Товары.Выгрузить(, "ЗаказПокупателя");
		ТаблицаЗаказы.Свернуть("ЗаказПокупателя", "");
		
		Запрос.УстановитьПараметр("Заказы", ТаблицаЗаказы.ВыгрузитьКолонку("ЗаказПокупателя"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СоответствиеЗаказовИСкладов.Вставить(Выборка.Заказ, Выборка.Склад);
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполним реквизит склад в табличной части "Товары"
	Для Каждого СтрокаТЧ из Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			
			СкладИзЗаказа = СоответствиеЗаказовИСкладов.Получить(СтрокаТЧ.ЗаказПокупателя);
			
			Если ЗначениеЗаполнено(СкладИзЗаказа) Тогда
				СтрокаТЧ.Склад = СкладИзЗаказа;
			Иначе
				СтрокаТЧ.Склад = Склад;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьСкладыВТЧ()

Процедура ОбработатьСуммыДоКорректировки()
	
	ИсправлениеКорректировки =
	ЗначениеЗаполнено(ИсправляемыйДокументРеализации)
	И ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
	И ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		
	ИначеЕсли НЕ ИсправлениеКорректировки Тогда
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.КоличествоДоКорректировки 	= 0;
			СтрокаТЧ.ЦенаДоКорректировки 		= 0;
			СтрокаТЧ.СуммаДоКорректировки 		= 0;
			СтрокаТЧ.СуммаНДСДоКорректировки 	= 0;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из Услуги Цикл
			СтрокаТЧ.КоличествоДоКорректировки 	= 0;
			СтрокаТЧ.ЦенаДоКорректировки 		= 0;
			СтрокаТЧ.СуммаДоКорректировки 		= 0;
			СтрокаТЧ.СуммаНДСДоКорректировки 	= 0;			
		КонецЦикла;
		
	КонецЕсли;		
	
	Если НЕ КорректироватьБУиНУ Тогда
		
		Отбор = Новый Структура("ЕстьВДокументеРеализации", Истина);
		
		СтрокиТовары = Товары.НайтиСтроки(Отбор);
		СтрокиУслуги = Услуги.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из СтрокиТовары Цикл
			СтрокаТЧ.ЕстьВДокументеРеализации = Ложь;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из СтрокиУслуги Цикл
			СтрокаТЧ.ЕстьВДокументеРеализации = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ШАПКИ ДОКУМЕНТА ДЛЯ ПРОВЕДЕНИЯ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено,Отказ = Ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьВСтруктуруШапкиСведенияОСчетахРасчетов(ЭтотОбъект, СтруктураШапкиДокумента);
	
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", 				 ПолучитьСвойстваСкладаВТабличнойЧасти().ВидимостьСклада);
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", 				 ПолучитьСвойстваЗаказаВТабличнойЧасти().ВидимостьЗаказа);
	СтруктураШапкиДокумента.Вставить("ОтгрузкаБезПереходаПравСобственности", Ложь);
	
	// Настоящие значения следуюшщих свойств запишутся в структуру при подготовке параметров учетной политики
	СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке",				 Ложь);
	СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС", 	 Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
	
	СтруктураШапкиДокумента.Вставить("мДокументРеализацииСсылка", 	 		 мДокументРеализацииСсылка);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                      , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"                   , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                       , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                                , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                                , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом"     , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"		 , "ОтражатьВРегламентированномУчете"           , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"                                  , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"               , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов" , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"			 , "ВалютаУправленческогоУчета"                 , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"			 , "КурсВалютыУправленческогоУчета"             , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета"			, "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	// Если сделка - Заказ покупателя, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка) И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                            , "ВалютаЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                         , "КурсВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"                    , "КратностьВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВидОперации"                                , "СделкаВидОперации");
	КонецЕсли;
	
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	// Дополним шапку исходным исправляемым документом реализации
	СтруктураШапкиДокумента.Вставить("ИсходныйИсправляемыйДокументРеализации", УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина));
	
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	////////////////////////////////////////////////////////////////////
	// Сведения о корректируемом документе
	ДокументРеализацииСсылка = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	СтруктураШапкиДокумента.Вставить("ДокументРеализацииДата", 	?(ЗначениеЗаполнено(ДокументРеализацииСсылка),ДокументРеализацииСсылка.Дата, Дата));
	СтруктураШапкиДокумента.Вставить("ДокументРеализацииСсылка", 	ДокументРеализацииСсылка);
	СтруктураШапкиДокумента.Вставить("ДокументОснование",	 		ДокументРеализации);
	СтруктураШапкиДокумента.Вставить("ДокументОснованиеДата",	 	?(ЗначениеЗаполнено(ДокументРеализации), ДокументРеализации.Дата, Дата));
	
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ) Экспорт
	
	мПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	
	// упр.
	УчетнаяПолитикаУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаУпр) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// регл.
	Если СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете
		И (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		Иначе
			СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке", 			  мУчетнаяПолитикаРегл.НачислятьНДСПоОтгрузке);
			СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС", мУчетнаяПолитикаРегл.МоментОпределенияНалоговойБазыНДС);
			//начало изменений
			СтруктураШапкиДокумента.Вставить("СложныйУчетНДС",мУчетнаяПолитикаРегл.СложныйУчетНДС);
			//конец изменений
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Заголовок, Отказ)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ДокументРеализации");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	// Проверка шапки упр.
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка шапки регл.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураОбязательныхПолей = Новый Структура;
		Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ПроверитьЗаполнениеВычисляемыхРеквизитовШапки(ЭтотОбъект, СтруктураОбязательныхПолей, СтруктураШапкиДокумента, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ТАБЛИЧНЫХ ЧАСТЕЙ ДОКУМЕНТА

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Заголовок, Отказ)
	
	// Укажем, что надо проверить
	СтруктураОбязательныхПолей = Новый Структура;
	
	Если ПолучитьСвойстваСкладаВТабличнойЧасти().ОбязательноеЗаполнениеСклада Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	Если ПолучитьСвойстваЗаказаВТабличнойЧасти().ОбязательноеЗаполнениеЗаказа Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	Если ПолучитьСвойстваЗаказаВТабличнойЧасти().ОбязательноеЗаполнениеСпособаСписания Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(	 ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(	 ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(	 ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	//начало изменений при массовом проводим в любом случае
	Если Не ПараметрыСеанса.ПроведениеДокументов Тогда
		УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПокупателя", Отказ, Заголовок);
		УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);
	КонецЕсли;	
	//конец изменений
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Заголовок, Отказ)
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Укажем, что надо проверить
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Сумма");
	
	Если ПолучитьСвойстваЗаказаВТабличнойЧасти().ОбязательноеЗаполнениеЗаказа Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(	 ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(	 ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Услуги", "ЗаказПокупателя", Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Выполняет проверки,которые нужны только для регл. учета
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Заголовок, Отказ)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Возврат;
	КонецЕсли;
	
	КэшПоСчетам 	= Новый Соответствие;
	СтрокаСообщения = "Указанные счета доходов и расходов относятся к разным видам деятельности!";
	
	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ) И ЗначениеЗаполнено(СтрокаТЧ.СчетРасходовБУ) Тогда
			
			СчетДоходовБУОтноситсяКДеятельностиЕНВД = КэшПоСчетам[СтрокаТЧ.СчетДоходовБУ];
			Если СчетДоходовБУОтноситсяКДеятельностиЕНВД = Неопределено Тогда
				СчетДоходовБУОтноситсяКДеятельностиЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ);
				КэшПоСчетам.Вставить(СтрокаТЧ.СчетДоходовБУ, СчетДоходовБУОтноситсяКДеятельностиЕНВД);
			КонецЕсли;
			
			СчетРасходовБУОтноситсяКДеятельностиЕНВД = КэшПоСчетам[СтрокаТЧ.СчетРасходовБУ];
			Если СчетРасходовБУОтноситсяКДеятельностиЕНВД = Неопределено Тогда
				СчетРасходовБУОтноситсяКДеятельностиЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетРасходовБУ);
				КэшПоСчетам.Вставить(СтрокаТЧ.СчетРасходовБУ, СчетРасходовБУОтноситсяКДеятельностиЕНВД);
			КонецЕсли;					
			
			Если СчетДоходовБУОтноситсяКДеятельностиЕНВД <> СчетРасходовБУОтноситсяКДеятельностиЕНВД Тогда
				ОбщегоНазначения.СообщитьОбОшибке(
				"В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": " + СтрокаСообщения,
				Отказ,
				Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ТАБЛИЦ ДОКУМЕНТА ДЛЯ ПРОВЕДЕНИЯ

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                        , "Номенклатура");
	СтруктураПолей.Вставить("ТипНоменклатуры"                     , "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"          , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                   , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Качество"                            , "Качество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                    , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                                , "Цена");
	СтруктураПолей.Вставить("Услуга"                              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("СтавкаНДС"                           , "СтавкаНДС");
	СтруктураПолей.Вставить("СтавкаНДСДоИзменения"                , "СтавкаНДСДоИзменения");  // Шевченков 20170209  62040
	СтруктураПолей.Вставить("Склад"                               , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                           , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ЗаказПокупателя"                     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры"     	  , "ПринадлежностьНоменклатуры");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров"		  , "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("КлючСтроки"                          , "КлючСтроки");
	
	// Дополним полями, нужными для регл. учета
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"				  , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СчетУчетаБУ"        				  , "СчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ"				  , "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаНУ"				  , "ПринятыеСчетУчетаНУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"        				  , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетДоходовБУ"      				  , "СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоБУ"         				  , "СубконтоБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ"      				  , "СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоНУ"         				  , "СубконтоНУ");
	СтруктураПолей.Вставить("СчетРасходовБУ"     				  , "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетРасходовНУ"     				  , "СчетРасходовНУ");
	СтруктураПолей.Вставить("ПереданныеПринятыеБУ"   			  , "ПереданныеПринятыеБУ");
	СтруктураПолей.Вставить("ПереданныеПринятыеНУ"   			  , "ПереданныеПринятыеНУ");
	СтруктураПолей.Вставить("ПереданныеСобственныеБУ"			  , "ПереданныеСобственныеБУ");
	СтруктураПолей.Вставить("ПереданныеСобственныеНУ"			  , "ПереданныеСобственныеНУ");
	
	//{08.09.2015 Островерхий заявка №43701 
	СтруктураПолей.Вставить("СубконтоБУРасходов"     , "СубконтоБУРасходов");
	СтруктураПолей.Вставить("СубконтоНУРасходов"     , "СубконтоНУРасходов");
	//08.09.2015 Островерхий} 
	
	СтруктураПолей.Вставить("НДСИтоговый"						  , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДоИзм"					  		  , "СуммаНДСДоИзменения");
	СтруктураПолей.Вставить("НДСДоКорр"					  		  , "СуммаНДСДоКорректировки");
	
	//начало изменений 
	СтруктураПолей.Вставить("ПРГ_СуммаИтоговый"						  , "Сумма");
	СтруктураПолей.Вставить("ПРГ_СуммаДоИзм"					  	  , "СуммаДоИзменения");
	СтруктураПолей.Вставить("ПРГ_СуммаДоКорр"					  	  , "СуммаДоКорректировки");
	//конец изменений
	
	//>>160316 Степанов 47706
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"					  , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"			  , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("СуммаИзмененияСкидки1"					  , "СуммаИзмененияСкидки1");
	СтруктураПолей.Вставить("СуммаИзмененияСкидки2"					  , "СуммаИзмененияСкидки2");
	СтруктураПолей.Вставить("ПриказУстановкиСкидки"					  , "ПриказУстановкиСкидки");
	//<<
	
	//{20.12.2016 Островерхий заявка №57373
	СтруктураПолей.Вставить("ПроцентДопИзмененияЦеныНакладной"        , "ПЦ_ПроцентДопИзмененияЦеныНакладной");
	СтруктураПолей.Вставить("ПроцентДопИзмененияЦеныФакт"             , "ПЦ_ПроцентДопИзмененияЦеныФакт");
	//20.12.2016 Островерхий} 	
	//начало изменений Ожиганов А. 23.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
	//нужно для сверкти по ставке ставки ндс до изменения
	СтруктураПолей.Вставить("ПРГ_КолВо" , "Количество");
	СтруктураПолей.Вставить("ПРГ_КолВоДоИзм" , "КоличествоДоИзменения");
	//конец изменений 
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("Количество"					  , "(Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураСложныхПолей.Вставить("КоличествоДок"                , "Количество - КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("КоличествоВЕдиницахДокумента" , "Количество - КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("Сумма"						  , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("СуммаДок"					  , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС"						  , "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("НДСДок"						  , "СуммаНДС - СуммаНДСДоИзменения");
	//>>180316 Степанов б/н
	////начало изменений Ожиганов 16.11.2015 б/н изменение расчета стоимости без скидок. 
	////Приведем к единому способу расчета стоимости и стоимости без скидок, чтобы стоимость без скидок тоже рассчитывалась как разница между до изменения и текущая.
	//СтруктураСложныхПолей.Вставить("ПРГ_Цена"						  , "Цена");
	//СтруктураСложныхПолей.Вставить("ПРГ_Цена_ДоИзменения"			  , "ЦенаДоИзменения");
	//СтруктураСложныхПолей.Вставить("ПРГ_Количество"				  	  , "Количество");
	//СтруктураСложныхПолей.Вставить("ПРГ_КоличествоДоИзменения"	  	  , "КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("СтоимостьБезСкидок"						  , "Сумма - СуммаДоИзменения + СуммаИзмененияСкидки1 + СуммаИзмененияСкидки2");
	////конец изменений 

	
	
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект"					  , "ПроектыНоменклатуры.Проект");
	КонецЕсли;
	
	//m.ionov@a-prof.ru 25.03.2014
	СтруктураПолей.Вставить("УЗ_СуммаРегл"						  , "УЗ_СуммаРегл");
	СтруктураПолей.Вставить("УЗ_СуммаНУ"					  	  , "УЗ_СуммаНУ");
	СтруктураПолей.Вставить("УЗ_СуммаВР"					  	  , "УЗ_СуммаВР");
	СтруктураПолей.Вставить("УЗ_СуммаПР"					  	  , "УЗ_СуммаПР");
	//----m.ionov@a-prof.ru---
	
	// Подготовим таблицу товаров для проведения.
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);
	ТаблицаПоТоварам 		  = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	/// Кунов О.В., 11.08.2017 - 69490
	СтруктураПолей.Вставить("СтавкаНДСДоИзменения", "СтавкаНДСДоИзменения");
	СтруктураПолей.Вставить("СубконтоБУРасходов"  , "СубконтоБУ");
	///
	СтруктураПолей.Вставить("СчетДоходовБУ"       , "СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоБУ"          , "СубконтоБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ"       , "СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоНУ"          , "СубконтоНУ");
	СтруктураПолей.Вставить("СчетРасходовБУ"      , "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетРасходовНУ"      , "СчетРасходовНУ");
	СтруктураПолей.Вставить("ЗаказПокупателя"     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("Содержание"          , "Содержание");
	
	СтруктураПолей.Вставить("НДСИтоговый"		  , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДоИзм"			  , "СуммаНДСДоИзменения");
	СтруктураПолей.Вставить("НДСДоКорр"			  , "СуммаНДСДоКорректировки");
	
	//начало изменений 
	СтруктураПолей.Вставить("ПРГ_СуммаИтоговый"						  , "Сумма");
	СтруктураПолей.Вставить("ПРГ_СуммаДоИзм"					  	  , "СуммаДоИзменения");
	СтруктураПолей.Вставить("ПРГ_СуммаДоКорр"					  	  , "СуммаДоКорректировки");
	//конец изменений
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("Количество"   , "Количество - КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("Сумма"		  , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС"		  , "СуммаНДС - СуммаНДСДоИзменения");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект"	  , "ПроектыНоменклатуры.Проект");
	КонецЕсли;
	
	// Подготовим таблицу услуг для проведения.
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураСложныхПолей);
	ТаблицаПоУслугам 		  = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	//Заполним счета учета
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Услуги", ТаблицаПоУслугам, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

//>>160316 Степанов 47706; СКИДКИ
// Заполняет таблицу скидок для проведения.
//
// Параметры: 
//  ТаблицаТоваров          - таблица значений по товарам,
//  ТаблицаУслуг            - таблица значений по скидкам,
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, СтруктураШапкиДокумента) Экспорт
	
	МетаданныеДокумента = Метаданные();
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("ПЦ_ОграниченияСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя");
	ТаблицаДвижений.Колонки.Добавить("ПроцентСкидки");
	ТаблицаДвижений.Колонки.Добавить("ДокументСкидки");
	
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаНДССкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента, 2), ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.СуммаСкидки = Окр(СтрокаТаблицы.СуммаИзмененияСкидки2,2);
			Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
				СтрокаДвижений.СуммаНДССкидки = Окр(УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СуммаИзмененияСкидки2, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)),2);
			КонецЕсли;
			СтрокаДвижений.ЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
			СтрокаДвижений.ПроцентСкидки = СтрокаТаблицы.ПроцентАвтоматическихСкидок;
			СтрокаДвижений.ДокументСкидки = СтрокаТаблицы.ПриказУстановкиСкидки;
			СтрокаДвижений.ПЦ_ОграниченияСкидки = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(СтрокаТаблицы.ПриказУстановкиСкидки,"ПЦ_ОграниченияСкидки"); 
			Если СтрокаДвижений.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем тогда
				СтрокаДвижений.Количество = СтрокаТаблицы.Количество;
			КонецЕсли;
		КонецЕсли;
		
		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки > 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СтрокаТаблицы.СуммаИзмененияСкидки1,2);
			Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
				СтрокаДвижений.СуммаНДССкидки = Окр(УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СуммаИзмененияСкидки1, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)),2);
			КонецЕсли;
			СтрокаДвижений.ЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
			СтрокаДвижений.ПроцентСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции // ПодготовитьТаблицуСкидок()
//<<


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ДокументПартии", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	
	//++ Spl_Апроф 03.11.2014 (k.russkih@a-prof.ru)
	ЕстьПретензия = (ЗначениеЗаполнено(ПР_Претензия.СкладПретензии));	
	//-- Spl_Апроф
	//начало изменений Ожиганов 17.04.2015 изменение склада в корректировке реализации 
	Если ЕстьПретензия Тогда
		ПРГСкладПретензии = ПР_Претензия.СкладПретензии;
	КонецЕсли;	
	//конец изменений 
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл		
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СтрокаТаблицы.ДокументПартии = мДокументРеализацииСсылка;
		
		//++ Spl_Апроф 03.11.2014 (k.russkih@a-prof.ru)
		Если СтрокаТаблицы.Количество < 0 И ЕстьПретензия Тогда		
			//начало изменений Ожиганов 17.04.2015 изменение склада в корректировке реализации 
			//СтрокаТаблицы.Склад = ПР_Претензия.СкладПретензии;					
			СтрокаТаблицы.Склад = ПРГСкладПретензии;
			//конец изменений 
		КонецЕсли; 		
		//-- Spl_Апроф
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров,  СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	
	Если ЕстьРозничныйСклад Тогда
		
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(
		Дата,
		ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
		
	КонецЕсли;
	
	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	//>>180316 Степанов б/н ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	//{18.02.2015 Островерхий заявка №б/н 
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидокВВалюте" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьВВалюте" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	//18.02.2015 Островерхий} 
	//{28.11.2016 Островерхий заявка №57373 
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезДопСкидки" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("ВалютнаяСтоимостьБезДопСкидки" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2))); 
	//28.11.2016 Островерхий}
	
	// Надо заполнить новые колонки.
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		// Считаем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Цена, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаЗаказа,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсЗаказа,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;
		
		//>>180316 Степанов б/н
		////начало изменений Ожиганов 16.11.2015 б/н изменение расчета стоимости без скидок. 
		////Приведем к единому способу расчета стоимости и стоимости без скидок, чтобы стоимость без скидок тоже рассчитывалась как разница между до изменения и текущая.
		//ПРГ_СтоимостьБезСкидокДоИзменения  = СтрокаТаблицы.ПРГ_Цена_ДоИзменения * СтрокаТаблицы.ПРГ_КоличествоДоИзменения;
		//ПРГ_СтоимостьБезСкидок             = СтрокаТаблицы.ПРГ_Цена * СтрокаТаблицы.ПРГ_Количество;
		//
		//Если УчитыватьНДС И НЕ СуммаВключаетНДС Тогда
		//	ПРГ_СтоимостьБезСкидокДоИзменения = 
		//		ПРГ_СтоимостьБезСкидокДоИзменения 
		//		+ Окр( УчетНДС.РассчитатьСуммуНДС(
		//			ПРГ_СтоимостьБезСкидокДоИзменения, 
		//			УчитыватьНДС,
		//			СуммаВключаетНДС,
		//			УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)),2);
		//			
		//	ПРГ_СтоимостьБезСкидок = 
		//		ПРГ_СтоимостьБезСкидок 
		//		+ Окр( УчетНДС.РассчитатьСуммуНДС(
		//			ПРГ_СтоимостьБезСкидок, 
		//			УчитыватьНДС,
		//			СуммаВключаетНДС,
		//			УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)),2);
		//КонецЕсли;
		//
		//СтрокаТаблицы.СтоимостьБезСкидок = ПРГ_СтоимостьБезСкидок-ПРГ_СтоимостьБезСкидокДоИзменения;
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + ?(УчитыватьНДС И СуммаВключаетНДС,0,Окр(УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)),2));
		//<<180316
		
		//СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоДок;
		
		//Если УчитыватьНДС И НЕ СуммаВключаетНДС Тогда
		//	СтрокаТаблицы.СтоимостьБезСкидок = 
		//		СтрокаТаблицы.СтоимостьБезСкидок 
		//		+ УчетНДС.РассчитатьСуммуНДС(
		//			СтрокаТаблицы.СтоимостьБезСкидок, 
		//			УчитыватьНДС,
		//			СуммаВключаетНДС,
		//			УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		//КонецЕсли;
		
		//конец изменений 
		
		
		СтрокаТаблицы.Стоимость 		  = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		//начало изменений Ожиганов 16.11.2015 б/н изменение расчета стоимости без скидок. 
		// стоимость без скидок не может быть меньше чем стоимость
		//если цена не менялась, менялись суммы в этом случае приравняем стоимость без скидок стоимости
		Если СтрокаТаблицы.СтоимостьБезСкидок = 0  Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Стоимость;
		КонецЕсли;	
		//конец изменений 
		
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		//{18.02.2015 Островерхий заявка №б/н 
		СтрокаТаблицы.СтоимостьВВалюте = СтрокаТаблицы.Стоимость; 
		СтрокаТаблицы.СтоимостьБезСкидокВВалюте = СтрокаТаблицы.СтоимостьБезСкидок;
		//18.02.2015 Островерхий} 
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.СуммаВзаиморасчетов, 
		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.СтоимостьБезСкидок, 
		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.СуммаВзаиморасчетов, 
		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
		СтрокаТаблицы.Стоимость    = СтрокаТаблицы.СуммаУпр;
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.СуммаБезНДС, 
		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.НДС, 
		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		//начало изменений Ожиганов А. 02.05.2017 64980 изменение стоимости без скидок в случае если ручная и автоматическая скидка не предоставляется 
		Если СтрокаТаблицы.СуммаИзмененияСкидки1 = 0 и СтрокаТаблицы.СуммаИзмененияСкидки2=0 Тогда
			СтрокаТаблицы.СтоимостьБезДопСкидки 		= СтрокаТаблицы.Стоимость;
			СтрокаТаблицы.ВалютнаяСтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьВВалюте;
		КонецЕсли;	
		//конец изменений 
		
		//{20.12.2016 Островерхий заявка №57373 
		Если СтрокаТаблицы.ПроцентДопИзмененияЦеныФакт <> 0 Тогда
			
			//{20.01.2017 Островерхий заявка №61339 
			//СтрокаТаблицы.СтоимостьБезДопСкидки = СтрокаТаблицы.Стоимость / (1-СтрокаТаблицы.ПроцентДопИзмененияЦеныФакт/100);
			//СтрокаТаблицы.ВалютнаяСтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьВВалюте / (1-СтрокаТаблицы.ПроцентДопИзмененияЦеныФакт/100); 
			СтрокаТаблицы.СтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьБезСкидок / (1-СтрокаТаблицы.ПроцентДопИзмененияЦеныФакт/100);
			СтрокаТаблицы.ВалютнаяСтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьБезСкидокВВалюте / (1-СтрокаТаблицы.ПроцентДопИзмененияЦеныФакт/100);
			//20.01.2017 Островерхий} 
			
		Иначе
			
			//{20.01.2017 Островерхий заявка №61339 
			//СтрокаТаблицы.СтоимостьБезДопСкидки = СтрокаТаблицы.Стоимость;
			//СтрокаТаблицы.ВалютнаяСтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьВВалюте; 
			СтрокаТаблицы.СтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьБезСкидок;
			СтрокаТаблицы.ВалютнаяСтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьБезСкидокВВалюте;
			//20.01.2017 Островерхий} 
		
		КонецЕсли; 
		//20.12.2016 Островерхий} 
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("СуммаРегл",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;
		
		//{08.09.2015 Островерхий заявка №43701 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоБУРасходов) Тогда
			СтрокаТаблицы.СубконтоБУРасходов =СтрокаТаблицы.СубконтоБУ;
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоНУРасходов) Тогда
			СтрокаТаблицы.СубконтоНУРасходов = СтрокаТаблицы.СубконтоНУ;
		КонецЕсли;
		//08.09.2015 Островерхий} 
		
		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
			СтрокаТаблицы.СуммаРегл        = Сумма + НДС;
	//начало изменений Ожиганов А. 23.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 			
			СтрокаТаблицы.ПРГ_СуммаИтоговый  = СтрокаТаблицы.ПРГ_СуммаИтоговый + ?(СуммаВключаетНДС,0,СтрокаТаблицы.НДСИтоговый);
			СтрокаТаблицы.ПРГ_СуммаДоИзм	 = СтрокаТаблицы.ПРГ_СуммаДоИзм    + ?(СуммаВключаетНДС,0,СтрокаТаблицы.НДСДоИзм);
			СтрокаТаблицы.ПРГ_СуммаДоКорр    = СтрокаТаблицы.ПРГ_СуммаДоКорр   + ?(СуммаВключаетНДС,0,СтрокаТаблицы.НДСДоКорр);
	//конец изменений 
		Иначе
			
			СуммаДок = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
			
			СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СуммаДок, 
			СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
			
			НДС   = УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СуммаРегл, 
			УчитыватьНДС, СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			Сумма = СтрокаТаблицы.СуммаРегл - НДС;
			
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
			
			//начало изменений
			СтрокаТаблицы.ПРГ_СуммаИтоговый  = СтрокаТаблицы.ПРГ_СуммаИтоговый + ?(СуммаВключаетНДС,0,СтрокаТаблицы.НДСИтоговый);
			СтрокаТаблицы.ПРГ_СуммаДоИзм	 = СтрокаТаблицы.ПРГ_СуммаДоИзм    + ?(СуммаВключаетНДС,0,СтрокаТаблицы.НДСДоИзм);
			СтрокаТаблицы.ПРГ_СуммаДоКорр    = СтрокаТаблицы.ПРГ_СуммаДоКорр   + ?(СуммаВключаетНДС,0,СтрокаТаблицы.НДСДоКорр);
			//конец измененйи
			
			СтрокаТаблицы.НДСИтоговый = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.НДСИтоговый, 
			СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
			СтрокаТаблицы.НДСДоИзм = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.НДСДоИзм, 
			СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
			СтрокаТаблицы.НДСДоКорр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.НДСДоКорр, 
			СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
			
			//начало изменений
			СтрокаТаблицы.ПРГ_СуммаИтоговый = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.ПРГ_СуммаИтоговый, 
			СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
			
			СтрокаТаблицы.ПРГ_СуммаДоИзм = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.ПРГ_СуммаДоИзм, 
			СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
			
			СтрокаТаблицы.ПРГ_СуммаДоКорр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.ПРГ_СуммаДоКорр, 
			СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
			//конец изменений	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)
	
	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
	
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для Каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуУслугРегл(ТаблицаУслуг, СтруктураШапкиДокумента);
	ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента);
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПодготовитьТаблицуУслуг()

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента)
	
	// Надо добавить нужные при проведении колонки.
	ТаблицаУслуг.Колонки.Добавить("ЦенаВВалютеЗаказа"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("Стоимость"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СтоимостьБезСкидок"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("НДСУпр"              , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Надо заполнить новые колонки.
	Для Каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Цена, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаЗаказа,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсЗаказа,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		
		Если УчитыватьНДС И НЕ СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок =
			СтрокаТаблицы.СтоимостьБезСкидок 
			+ УчетНДС.РассчитатьСуммуНДС(
			СтрокаТаблицы.СтоимостьБезСкидок,
			УчитыватьНДС,
			СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.СтоимостьБезСкидок, 
		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.СуммаВзаиморасчетов, 
		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.СуммаВзаиморасчетов, 
		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.СуммаБезНДС, 
		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.НДС, 
		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.Стоимость, 
		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

Процедура ПодготовитьТаблицуУслугРегл(ТаблицаУслуг, СтруктураШапкиДокумента)
	
	ТаблицаУслуг.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
	
	// Надо заполнить новые колонки.
	Для Каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		
		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;
		
		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			
			//начало изменений
			//СтрокаТаблицы.СуммаРегл  = Сумма + НДС;
			СтрокаТаблицы.СуммаРегл  = Сумма + ?(СуммаВключаетНДС, 0, НДС);
			//конец измененйи
		Иначе
			
			СуммаДок = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
			
			СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СуммаДок, 
			СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
			
		КонецЕсли;
		
		//начало изменений
		СтрокаТаблицы.ПРГ_СуммаИтоговый  = СтрокаТаблицы.ПРГ_СуммаИтоговый + ?(СуммаВключаетНДС,0,СтрокаТаблицы.НДСИтоговый);
		СтрокаТаблицы.ПРГ_СуммаДоИзм	 = СтрокаТаблицы.ПРГ_СуммаДоИзм    + ?(СуммаВключаетНДС,0,СтрокаТаблицы.НДСДоИзм);
		СтрокаТаблицы.ПРГ_СуммаДоКорр    = СтрокаТаблицы.ПРГ_СуммаДоКорр   + ?(СуммаВключаетНДС,0,СтрокаТаблицы.НДСДоКорр);
		//конец измененйи
		
		СтрокаТаблицы.НДСИтоговый = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.НДСИтоговый, 
		СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
		СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
		СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
		СтрокаТаблицы.НДСДоИзм = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.НДСДоИзм, 
		СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
		СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
		СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
		СтрокаТаблицы.НДСДоКорр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.НДСДоКорр, 
		СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
		СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
		СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
		
		//начало изменений
		СтрокаТаблицы.ПРГ_СуммаИтоговый = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.ПРГ_СуммаИтоговый, 
		СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
		СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
		СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
		
		СтрокаТаблицы.ПРГ_СуммаДоИзм = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.ПРГ_СуммаДоИзм, 
		СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
		СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
		СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
		
		СтрокаТаблицы.ПРГ_СуммаДоКорр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТаблицы.ПРГ_СуммаДоКорр, 
		СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
		СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
		СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
		//конец изменений	
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуУслугРегл()


// Функция возвращает таблицу значений, содержащую строки, 
// в которых заполнено значение хотя бы в одной из проверяемых колонок
// 
// Параметры:
// 	ИсходнаяТаблица - ТаблицаЗначений -  таблица, из которой необходимо отобрать строки
// 	СписокКолонокДляПроверки - Строка - Список колонок для проверки заполнения значений
// 
// Возвращаемое значение:
// 	Результат - ТаблицаЗначений - результат отбора
//
Функция ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ИсходнаяТаблица, СписокКолонокДляПроверки)
	
	Результат = ИсходнаяТаблица.СкопироватьКолонки();
	
	КолонкиДляПроверки = Новый Структура(СписокКолонокДляПроверки);
	
	Для Каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
		
		Для Каждого Колонка Из КолонкиДляПроверки Цикл
			
			Если ИсходнаяТаблица.Колонки.Найти(Колонка.Ключ) <> Неопределено 
				И ЗначениеЗаполнено(СтрокаТаблицы[Колонка.Ключ]) Тогда
				
				// Значение в колонке заполнено. Копируем строку в таблицу Результат
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаТоваровДляУчетаЗатрат, Заголовок, Отказ)
	
	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, ЭтотОбъект);
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("СоставНабора", ТаблицаПоКомплектам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, ТаблицаПоУслугам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	//начало изменений Ожиганов А. 13.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
	ПРГ_ТаблТоваровДляПроводок = Неопределено;
	
	//ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоКомплектам, Отказ, Заголовок,ПРГ_ТаблТоваровДляПроводок);
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоКомплектам, Отказ, Заголовок);
	//конец изменений 
	
	Если ТаблицаПоКомплектам.Количество() > 0
		И (НЕ мИспользоватьРасширеннуюАналитику
		ИЛИ мДатаНачалаИспользованияРасширеннойАналитики > СтруктураШапкиДокумента.Дата) Тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	КонецЕсли;
	
	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		И мПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух Тогда
		Движения.Хозрасчетный.Записать();
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
		И мПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовНал Тогда
		Движения.Налоговый.Записать();
	КонецЕсли;
	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	Если ПРГ_ДопФункцииКлиентСервер.ПРГПроводитьПоПартиям(СтруктураШапкиДокумента) Тогда	
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	КонецЕсли;
	//конец изменений 
	
	//m.ionov@a-prof.ru 24/03/2014
	//Изменения внесли в общий модуль
	//	//Бирюков подготовим движения по 43 счету для непроведенных накладных-оснований 2013 года здесь, т.к. типовая их не сделает
	//	Если НЕ ПустаяСтрока(ИД_Обмена) И (СтруктураШапкиДокумента.ДокументРеализацииДата < Константы.ГраницаПроведенияДокументов.Получить()) Тогда
	//		//
	//		Для Каждого СтрокаДокумента Из ТаблицаПоТоварам Цикл
	//			Движение = Движения.ПартииТоваровНаСкладахБухгалтерскийУчет.ДобавитьПриход();
	//			
	//			// Свойства
	//			Движение.Период      = Дата;
	//			Движение.Регистратор = Ссылка;
	//			Движение.Активность = Истина;
	////			Движение.Склад		= Склад;
	//			Движение.Организация = Организация;
	//			Движение.Номенклатура	= СтрокаДокумента.Номенклатура;
	//			
	////			Если ОтражатьВУправленческомУчете Тогда
	//////				Движение.СтатусПартии = Строка.СтатусПартии;
	//////				Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
	////			КонецЕсли;
	//			Если ОтражатьВБухгалтерскомУчете тогда
	//				//Если КомиссионныйТовар(Строка.СчетУчета) тогда
	//				//	Движение.СчетУчета   = СтрокаДокумента.ПринятыеКорСчетБУ;
	//				//Иначе
	//					Движение.СчетУчета   = СтрокаДокумента.СчетУчетаБУ;
	////				КонецЕсли;
	//			КонецЕсли;
	////			Если  СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
	////				//Если КомиссионныйТовар(Строка.СчетУчета) тогда
	////				//	Движение.СчетУчета   = СтрокаДокумента.ПринятыеКорСчетНУ;
	////				//Иначе
	////					Движение.СчетУчета   = СтрокаДокумента.СчетУчетаНУ;
	//////				КонецЕсли;
	////			КонецЕсли;
	//			
	//			Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатуры;
	//			
	//			//// Если партионный учет по сериям не ведется - серии в регистре "партии товаров на складах" нет
	//			//Если СтрокаДокумента.ВестиПартионныйУчетПоСериям тогда
	//			//	Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатуры;
	//			//КонецЕсли;
	//			
	//			Движение.ДокументОприходования	= СтрокаДокумента.ДокументПартии;
	//			Движение.ДокументДвижения = Ссылка;
	//			
	//			Движение.Качество = СтрокаДокумента.Качество;
	//			
	//			//// Ресурсы
	//			Движение.Количество  = -СтрокаДокумента.Количество;
	//			Движение.Стоимость   = -СтрокаДокумента.Стоимость;
	//			
	//			//Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
	//			//
	//			//	Движение.ПостояннаяРазница	= СтрокаДокумента.ПостояннаяРазница;
	//			//	Движение.ВременнаяРазница	= СтрокаДокумента.ВременнаяРазница;
	//			//
	//			//КонецЕсли;
	//			
	//			// Реквизиты
	//			Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя;
	//			
	//			//Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
	//			//	// Сумма выручки в валюте документа - для отчета комитенту
	//			//	Движение.СуммаВыручки = КоэффициентСторно*Окр(СтрокаДокумента.СуммаЗадолженности*КоэффПоступления, 2);
	//			//	// Валюты и курсы - для пересчета
	//			//	Движение.ВалютаДокумента = СтрокаДокумента.ВалютаДокумента;
	//			//	Движение.КурсДокумента = СтрокаДокумента.КурсДокумента;
	//			//	Движение.КратностьДокумента = СтрокаДокумента.КратностьДокумента;
	//			//ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете Или СтрокаДокумента.ОтражатьВНалоговомУчете тогда
	//			//	// Сумма выручки и сумма НДС  - для учета НДС
	//			//	Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ*КоэффПоступления, 2);
	//			//	Движение.СуммаНДСВыручкиБУ  = Окр(СтрокаДокумента.СуммаНДС *КоэффПоступления, 2);
	//			//	Движение.ВалютнаяСуммаЗадолженностиБУ   = Окр(СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ*КоэффПоступления, 2);
	//			//			
	//			//	// Уменьшим сумму в исх. строке
	//			//	СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;
	//			//	СтрокаДокумента.СуммаНДС = СтрокаДокумента.СуммаНДС - Движение.СуммаНДСВыручкиБУ;
	//			//	СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ - Движение.ВалютнаяСуммаЗадолженностиБУ;
	//			//КонецЕсли;
	//			//
	//			//СтрокаДокумента.СуммаЗадолженности = СтрокаДокумента.СуммаЗадолженности - КоэффициентСторно*Движение.СуммаВыручки;
	//			//
	//			//КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - ПогашаемоеКоличество;
	//			//
	//			//Строка.Количество = Строка.Количество - ПогашаемоеКоличество;
	//			//Строка.Стоимость  = Строка.Стоимость  - ПогашаемаяСтоимость;
	//			//
	//			//Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
	//			//	
	//			//	Строка.ПостояннаяРазница = Строка.ПостояннаяРазница - КоэффициентСторно * Движение.ПостояннаяРазница;
	//			//	Строка.ВременнаяРазница  = Строка.ВременнаяРазница  - КоэффициентСторно * Движение.ВременнаяРазница;
	//			//	
	//			//КонецЕсли; 
	
	//			//// Номер строки, по которой списана партия
	//			//// Используется при возврате товаров от покупателя, ордерной схеме поступления,
	//			//// механизмом корректировки стоимости списания 
	//			//Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
	//			//
	//			//// Списание на себестоимость продаж (сторно)
	//			//Если ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров) = "СебестоимостьПродаж" Тогда
	//			//	
	//			//	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
	//			//		СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи);
	//			//	КонецЕсли;
	//			//	
	//			//КонецЕсли;
	//			//
	//			//ПодготовитьДанныеДляВыполненияДвиженийПоРезульататамСписания(СтруктураПараметров, Движение, Неопределено, СтрокаДокумента,Неопределено
	//			//,"Возврат", Неопределено , ТипЗаписи);
	//			//
	//			//СписаниеПринятыхНаОтветственноеХранение(СтрокаДокумента, СтруктураПараметров, Движение, ИмяРегистраПартии);
	//			
	//			Если НЕ СтрокаДокумента.Количество = 0 Тогда
	//				Проводка = Движения.Хозрасчетный.Добавить();
	//				
	//				Проводка.Активность = Истина;
	//				Проводка.КоличествоКт = СтрокаДокумента.Количество;
	//				Проводка.Период = Дата;
	//				Проводка.Организация = Организация;
	//				Проводка.Регистратор = Ссылка;
	//				Проводка.Содержание = "Кредит-нота";
	//				Проводка.СчетДт = СтрокаДокумента.СчетРасходовБУ;
	//				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаДокумента.Номенклатура.НоменклатурнаяГруппа);
	//				Проводка.СчетКт = СтрокаДокумента.СчетУчетаБУ;
	//				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаДокумента.Номенклатура);
	//				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", Склад);
	//				Проводка.Сумма = СтрокаДокумента.Стоимость;
	//				
	////				Движения.Хозрасчетный.Записать();
	//			КонецЕсли;
	//		КонецЦикла;
	//	Иначе
	//		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	//	КонецЕсли;
	//	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаТоваровДляУчетаЗатрат, Отказ, Заголовок);
	
	Если ТаблицаПоКомплектам.Найти(Перечисления.ТипыНоменклатуры.Комплект, "ТипНоменклатуры") <> Неопределено Тогда
		ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектам);
	КонецЕсли;	
	
	//m.ionov@a-prof.ru 24/03/2014
	Если ОтражатьВБухгалтерскомУчете  Тогда
		ОчиститьДвиженияРегистровНДС(ЭтотОбъект, Ссылка);
	КонецЕсли;	
	
	//ВнОбработка = ВнешниеОбработки.Создать("E:\Обработки 1С\НДС Книга продаж покупок\КорректировкаНДС.epf");
	//ВнОбработка.ПровестиКорректировкуРеализацииПоРегистрамНДС_Наша(СтруктураШапкиДокумента, Ссылка,ТаблицаПоТоварам, ТаблицаПоУслугам);
	//ВнОбработка = Неопределено;
	//начало изменений Ожиганов 30.05.2015 немножко оптимизируем 
	Если ОтражатьВБухгалтерскомУчете  Тогда
		//начало изменений Ожиганов А. 23.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
		//ПРГ_ДопФункцииКлиентСервер.ПровестиКорректировкуРеализацииПоРегистрамНДС_Наша(СтруктураШапкиДокумента, Ссылка, ТаблицаПоТоварам, ТаблицаПоУслугам);
		КопияТаблицаПоТоварам = ПодготовитьСвернутуюТаблицуПоТоварам(ТаблицаПоТоварам,Ложь,Истина);
		ПРГ_ДопФункцииКлиентСервер.ПровестиКорректировкуРеализацииПоРегистрамНДС_Наша(СтруктураШапкиДокумента, Ссылка, КопияТаблицаПоТоварам, ТаблицаПоУслугам);
		//конец изменений 
	КонецЕсли;	
	//конец изменений 
	//УчетНДСФормированиеДвижений.ПровестиКорректировкуРеализацииПоРегистрамНДС(СтруктураШапкиДокумента, Ссылка);
	
	Если ОтражатьВБухгалтерскомУчете и СтруктураШапкиДокумента.СложныйУчетНДС Тогда
		
		НаборДвижений 	= Движения.НДСПартииТоваров;
		
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		КопияТаблицаПоТоварам = Движения.СписанныеТовары.Выгрузить();
		
		Для Каждого Строка Из КопияТаблицаПоТоварам Цикл
			
			Если Не Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя Тогда
				Возврат;
			КонецЕсли;
			
			СтрокаДвижения = ТаблицаДвижений.Добавить();
			
			СтрокаДвижения.Организация = Организация;
			СтрокаДвижения.СчетУчета = Строка.СчетУчетаБУ;
			
			СтрокаДвижения.Номенклатура = Строка.Номенклатура;
			СтрокаДвижения.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			СтрокаДвижения.СерияНоменклатуры = Строка.СерияНоменклатуры;
			//СтрокаДвижения.Склад = Строка.Склад;
			
			СтрокаДвижения.Партия = Ссылка;
			
			
			СтрокаДвижения.Количество = Строка.Количество; 			
			
		КонецЦикла;
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Если НЕ Отказ Тогда
			Движения.НДСПартииТоваров.ВыполнитьПриход();
		КонецЕсли;
		
		Движения.СписанныеТовары.Записать(Истина);
		
	КонецЕсли;
	//-------- m.ionov@a-prof.ru 
	
КонецПроцедуры // ДвиженияПоРегистрам()

// ДВИЖЕНИЯ ПО РЕГИСТРАМ УПР. УЧЕТА

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(
	ЭтотОбъект, СтруктураШапкиДокумента, мСтруктураПараметровВзаиморасчетов, 
	ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоВзаиморасчетам, "СуммаВзаиморасчетов,СуммаУпр"),
	ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоРасчетам, "СуммаВзаиморасчетов,СуммаУпр"), 
	ВидДвиженияНакопления.Приход, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		// СУММА ПО РЕГИСТРУ ПродажиПоДисконтнымКартам.
		Если ЭтоКорректировкаРТиУ()
			И СуммаДокумента - ДокументРеализации.СуммаДокумента <> 0
			И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
			
			НаборДвижений 	= Движения.ПродажиПоДисконтнымКартам;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДисконтнаяКарта 			= СтруктураШапкиДокумента.ДисконтнаяКарта;
			СтрокаДвижений.ВладелецДисконтнойКарты 	= СтруктураШапкиДокумента.Контрагент;
			СтрокаДвижений.Сумма					=
			МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента - ДокументРеализации.СуммаДокумента, ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента,
			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента,
			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
			НаборДвижений.мПериод          			= Дата;
			НаборДвижений.мТаблицаДвижений 			= ТаблицаДвижений;
			
			Если НЕ Отказ Тогда
				НаборДвижений.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		// ТОВАРЫ И УСЛУГИ ПО РЕГИСТРУ Продажи.
		КопияТовары = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество,Стоимость,НДС");
		//начало изменений Ожиганов А. 23.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках
		КопияТовары.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,ЗаказПокупателя",
							"Количество,Стоимость,СтоимостьБезСкидок,СтоимостьБезСкидокВВалюте,СтоимостьВВалюте,НДСВал,НДС,
							|НДСУпр,СтоимостьБезДопСкидки,ВалютнаяСтоимостьБезДопСкидки");
		//по хорошему еще бы раз отобрать по условию количество, стоимость,НДС = 0 пока так оставим
							
		//конец изменений 
		
		КопияУслуги = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоУслугам, "Количество,Стоимость,НДС");
		
		ТабИменТовары = Неопределено;
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДС",    "НДСВрем");
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДСУпр", "НДС");
		
		ТабИменУслуги = Неопределено;
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДС",    "НДСВрем");
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДСУпр", "НДС");
		
		//{18.02.2015 Островерхий заявка №б/н 
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "СтоимостьБезСкидокВВалюте", "ПРГВалютнаяСтоимостьБезСкидок");
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "СтоимостьВВалюте", "ПРГВалютнаяСтоимость");
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДСВал", "ПРГНДСВВалюте");
		//18.02.2015 Островерхий}
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			// В этом случае таблицы документа обрабатываются особым образом
			ТаблицаДвижений = Движения.Продажи.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			ТаблицаДвиженийУслуги = ТаблицаДвижений.Скопировать();
			ТаблицаДвиженийТовары = ТаблицаДвижений.Скопировать();
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияУслуги, ТаблицаДвиженийУслуги, Проект, Дата, "Продажи");
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТовары, ТаблицаДвиженийТовары, Проект, Дата, "Продажи");
			
			// Вставляем уже подготовленные таблицы движений
			ТаблицыДанныхДокумента = Новый Структура;
			ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам", ТаблицаДвиженийТовары);
			ТаблицыДанныхДокумента.Вставить("ТаблицаПоУслугам", ТаблицаДвиженийУслуги);
			
		Иначе
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", КопияУслуги);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", КопияТовары);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.Продажи, СтруктТаблицДокумента);
			
		КонецЕсли;
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		//{18.02.2015 Островерхий заявка №б/н 
		//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПродажи",    ДокументРеализации); 
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПродажи",    УчетНДС.ПолучитьИсправляемыйДокументРеализации(Ссылка,Истина));
		//18.02.2015 Островерхий} 
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
		
		//{17.10.2014 Островерхий заявка №32791 
		Если ЗначениеЗаполнено(ДокументРеализации) Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ПРГАдресПоставки",      УчетНДС.ПолучитьИсправляемыйДокументРеализации(Ссылка,Истина).Грузополучатель);
		КонецЕсли; 
		//17.10.2014 Островерхий}
		
		//{18.02.2015 Островерхий заявка №б/н 
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ПРГВалютаДокумента",      ВалютаДокумента); 
		//18.02.2015 Островерхий}
		
		// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", СтруктураШапкиДокумента.Сделка);
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Продажи, Неопределено, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах и ТоварыВРознице.
	//начало изменений Ожиганов А. 20.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
	//КопияТаблицаПоКомплектам = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоКомплектам, "Количество");
	АТаблицаПоКомплектам = ТаблицаПоКомплектам.Скопировать(,"Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Склад
			|,ЗаказПокупателя,Качество,СпособСписанияОстаткаТоваров,ВидСклада,Количество");
			
	АТаблицаПоКомплектам.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Склад
					|,ЗаказПокупателя,Качество,СпособСписанияОстаткаТоваров,ВидСклада","Количество");			
	КопияТаблицаПоКомплектам = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(АТаблицаПоКомплектам, "Количество");
	//конец изменений 
	КопияТаблицаПоКомплектам.Индексы.Добавить("ВидСклада");
	
	МассивКомплектыОпт = КопияТаблицаПоКомплектам.НайтиСтроки(Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый));
	
	Если НЕ Отказ И МассивКомплектыОпт.Количество() <> 0 Тогда
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(
		Движения.ТоварыНаСкладах,
		Новый Структура("КомплектыОпт", МассивКомплектыОпт));
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
		//начало изменений  контроль остатковв случае если больше в чем накладной
		Если Не ПараметрыСеанса.ПроведениеДокументов Тогда
			НуженКонтроль = Ложь;
			Для Каждого ПРГТекСтрока Из МассивКомплектыОпт Цикл
				Если ПРГТекСтрока.Количество > 0 Тогда
					НуженКонтроль = Истина;
					прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если НуженКонтроль Тогда
				ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары",         СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения, Истина); //m.ionov@a-prof.ru 05.02.2015
				Если Отказ Тогда
					возврат;
				КонецЕслИ;	
			КонецЕсли;	
		КонецЕсли;	
		//конец изменений	
	КонецЕсли;
	
	МассивКомплектыРозн = КопияТаблицаПоКомплектам.НайтиСтроки(Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный));
	
	Если НЕ Отказ И МассивКомплектыРозн.Количество() <> 0 Тогда
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(
		Движения.ТоварыВРознице,
		Новый Структура("КомплектыРозн", МассивКомплектыРозн));
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные
	Если НЕ Отказ Тогда
		
		СтруктТаблицДокумента = Новый Структура;
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			КопияТовары = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество,СуммаВзаиморасчетов");
			КопияТовары.Колонки.ЗаказПокупателя.Имя = "Сделка";
			
			СтруктТаблицДокумента.Вставить("ТаблицаТовары", КопияТовары);
			
		КонецЕсли;
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыПереданные, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,     "ТаблицаТовары");
		КонецЕсли;
		
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Для Каждого ТаблицаДанных Из ТаблицыДанныхДокумента Цикл
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", Сделка, ТаблицаДанных.Ключ);
			КонецЦикла;
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПереданные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	// ТОВАР И УСЛУГИ ПО РЕГИСТРУ ЗаказыПокупателей.
	//++ Spl_Апроф 14.01.2015 (k.russkih@a-prof.ru) т.к. заказ уже давно закрыт
	Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		И НЕ ЗначениеЗаполнено(ДокументРеализации.СП_ЗаданиеНаПодбор) Тогда
		
		Если НЕ Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура(
			"ТаблицаПоТоварам, ТаблицаПоУслугам",
			ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество,СуммаВзаиморасчетов,СуммаУпр"),
			ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоУслугам, "Количество,СуммаВзаиморасчетов,СуммаУпр"));
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПокупателей, СтруктТаблицДокумента);
			ОбщегоНазначения.УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя");
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам,ТаблицаПоУслугам");
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// ТОВАР ПО РЕГИСТРУ ТоварыВРезервеНаСкладах.
	Если НЕ Отказ Тогда
		//начало изменений Ожиганов А. 20.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
		ТабРезервТовары = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(АТаблицаПоКомплектам, "Количество");
		//конец изменений 
		ТабРезервТовары.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
		
		// Удалим записи таблицы в которых не надо списывать из резерва или не указан документ резерва.
		МассивНаУдаление = Новый Массив;
		Для Каждого СтрокаСписанияРезервов Из ТабРезервТовары Цикл
			Если СтрокаСписанияРезервов.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаСписанияРезервов.ДокументРезерва) Тогда
				МассивНаУдаление.Добавить(СтрокаСписанияРезервов);
			КонецЕсли;	
		КонецЦикла;	
		
		Для Каждого Элемент Из МассивНаУдаление Цикл
			ТабРезервТовары.Удалить(Элемент);
		КонецЦикла;	
		
		Если ТабРезервТовары.Количество() > 0 Тогда
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(
			Движения.ТоварыВРезервеНаСкладах,
			Новый Структура("ТаблицаПоТоварам", ТабРезервТовары));
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	//>>160316 Степанов 47706; движения по регистрам ПредоставленныеСкидки и ПЦ_ОграниченияПоПредоставленнымСкидкам
	Если не Отказ тогда
		
		//Движения по регистру ПредоставленныеСкидки
		ТабСкидки = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "СуммаИзмененияСкидки1, СуммаИзмененияСкидки2");
		ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТабСкидки, СтруктураШапкиДокумента);
		НаборДвижений = Движения.ПредоставленныеСкидки;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"ПолучательСкидки");
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		Если Не Отказ Тогда
			Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
		КонецЕсли;
		
		//Движения по регистру ПЦ_ОграничениеПоПредоставленнымСкидкам выполняются, когда корректировка реализации создана не на основании Претензии
		ДелатьДвиженияПоПЦ_ОграниченияПредоставленныхСкидок=Ложь;
		Если ЗначениеЗаполнено(ПР_Претензия) тогда
			ПРГ_УчитыватьСкидки = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(ПР_Претензия,"ПРГ_УчитыватьСкидки");
			Если ПРГ_УчитыватьСкидки=Ложь тогда
				ДелатьДвиженияПоПЦ_ОграниченияПредоставленныхСкидок=Истина;
			КонецЕсли;
		Иначе
			ДелатьДвиженияПоПЦ_ОграниченияПредоставленныхСкидок=Истина;
		КонецЕсли;		
		
		Если ДелатьДвиженияПоПЦ_ОграниченияПредоставленныхСкидок тогда
			ЗапросКДвижениямЗаказа = Новый Запрос;
			ЗапросКДвижениямЗаказа.Текст = 
			"ВЫБРАТЬ
			|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент,
			|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
			|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
			|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
			|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
			|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
			|	ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
			|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ЗаказПокупателя,
			|	ВЫБОР
			|		КОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|			ТОГДА -ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки
			|		КОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|			ТОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки
			|	КОНЕЦ КАК СуммаСкидки,
			|	ВЫБОР
			|		КОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|			ТОГДА -ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество
			|		КОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|			ТОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество
			|	КОНЕЦ КАК Количество
			|ИЗ
			|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
			|ГДЕ
			|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор В(&Заказ)
			|	И ПЦ_ОграничениеПоПредоставленнымСкидкам.Активность";
			
			//1.Получить таблицу примененных ограничений из заказа
			ТабЗаказ = ТаблицаПоСкидкам.Скопировать(,"ЗаказПокупателя");
			ТабЗаказ.Свернуть("ЗаказПокупателя");
			ПривязанныйЗаказ = Неопределено;
			Для Каждого СтрЗаказа из ТабЗаказ Цикл
				Если (ТипЗнч(СтрЗаказа.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя")) и (СтрЗаказа.ЗаказПокупателя<>Документы.ЗаказПокупателя.ПустаяСсылка()) тогда
					ПривязанныйЗаказ = СтрЗаказа.ЗаказПокупателя;
				КонецЕсли;	
			КонецЦикла;
			Если (ТипЗнч(ПривязанныйЗаказ) = Тип("ДокументСсылка.ЗаказПокупателя")) и (ПривязанныйЗаказ<>Документы.ЗаказПокупателя.ПустаяСсылка()) Тогда
				ЗапросКДвижениямЗаказа.УстановитьПараметр("Заказ",ПривязанныйЗаказ);
				ПланТаблица = ЗапросКДвижениямЗаказа.Выполнить().Выгрузить();
			Иначе
				//Сообщить("Не определен заказ покупателя!!!",СтатусСообщения.Важное);
				ПланТаблица = Неопределено;
			КонецЕсли;
			Если НЕ ПланТаблица = Неопределено тогда
				Если ПланТаблица.Количество()>0 тогда
					
					//2.Получить таблицу фактических движений документа из регистра ПредоставленныеСкидки
					ФактТаблицаДвижений = Новый ТаблицаЗначений;
					ФактТаблицаДвижений = Движения.ПредоставленныеСкидки.Выгрузить(,"Номенклатура, ХарактеристикаНоменклатуры, ДокументСкидки, ПолучательСкидки, ПЦ_ОграниченияСкидки, СуммаСкидки, СуммаНДССкидки, Количество");
					// Сначала помещаем ТЗ во временную таблицу
					Запрос = Новый Запрос;
					Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
					Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ";
					Запрос.УстановитьПараметр("ТЗ", ФактТаблицаДвижений);
					Запрос.Выполнить();
					Запрос.Текст = "ВЫБРАТЬ
					|	ТЗ.ПолучательСкидки КАК Контрагент,
					|	ТЗ.Номенклатура,
					|	ТЗ.ХарактеристикаНоменклатуры,
					|	ТЗ.Номенклатура.НСИ_ТоварнаяКатегория КАК ТоварнаяКатегория,
					|	ТЗ.Номенклатура.НСИ_Брендообъем КАК Брендообъем,
					|	ТЗ.ДокументСкидки КАК УстановкаСкидокНоменклатуры,
					|	ВЫБОР
					|		КОГДА ТЗ.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки)
					|				ИЛИ ТЗ.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг)
					|			ТОГДА ЕСТЬNULL(ТЗ.СуммаСкидки, 0) + ЕСТЬNULL(ТЗ.СуммаНДССкидки, 0)
					|		ИНАЧЕ 0
					|	КОНЕЦ КАК СуммаСкидки,
					|	ВЫБОР
					|		КОГДА ТЗ.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем)
					|			ТОГДА ЕСТЬNULL(ТЗ.Количество, 0)
					|		ИНАЧЕ 0
					|	КОНЕЦ КАК Количество
					|ИЗ
					|	ТЗ КАК ТЗ";
					ФактТаблица = Запрос.Выполнить().Выгрузить();			
					
					ПланТаблица.Свернуть("Контрагент,ДоговорКонтрагента,Номенклатура,ХарактеристикаНоменклатуры,ТоварнаяКатегория,Брендообъем,УстановкаСкидокНоменклатуры,ЗаказПокупателя","СуммаСкидки,Количество");
					ТаблицаПоСкидкам = Новый ТаблицаЗначений;
					ТаблицаПоСкидкам.Колонки.Добавить("Контрагент");
					ТаблицаПоСкидкам.Колонки.Добавить("ДоговорКонтрагента");
					ТаблицаПоСкидкам.Колонки.Добавить("Номенклатура");
					ТаблицаПоСкидкам.Колонки.Добавить("ХарактеристикаНоменклатуры");
					ТаблицаПоСкидкам.Колонки.Добавить("ТоварнаяКатегория");
					ТаблицаПоСкидкам.Колонки.Добавить("Брендообъем");
					ТаблицаПоСкидкам.Колонки.Добавить("УстановкаСкидокНоменклатуры");
					ТаблицаПоСкидкам.Колонки.Добавить("ЗаказПокупателя");
					ТаблицаПоСкидкам.Колонки.Добавить("СуммаСкидки");
					ТаблицаПоСкидкам.Колонки.Добавить("Количество");
					
					//3.Приводим ФактТаблица в формат ПланТаблица путем сворачивания по измерениям; считаем, что на каждый приказ УстановкаСкидокНоменклатуры одинаковое количество измерений
					ТЗУстановки = ФактТаблица.Скопировать(,"УстановкаСкидокНоменклатуры,СуммаСкидки,Количество");
					ТЗУстановки.Свернуть("УстановкаСкидокНоменклатуры","СуммаСкидки,Количество");
					Для Каждого СтрокаТЗУстановки из ТЗУстановки цикл
						СтрокаПолейСворачивания = "Номенклатура,ХарактеристикаНоменклатуры,ТоварнаяКатегория,Брендообъем,УстановкаСкидокНоменклатуры";
						Отбор = Новый Структура;
						Отбор.Вставить("УстановкаСкидокНоменклатуры", СтрокаТЗУстановки.УстановкаСкидокНоменклатуры);
						СтрокиПлана = ПланТаблица.НайтиСтроки(Отбор);
						Для Каждого Стр Из СтрокиПлана Цикл
							Если Стр.Номенклатура=Справочники.Номенклатура.ПустаяСсылка() тогда
								СтрокаПолейСворачивания = СтрЗаменить(СтрокаПолейСворачивания,"Номенклатура,","");
							Иначе
								Отбор.Вставить("Номенклатура",Стр.Номенклатура);
							КонецЕсли;	
							Если Стр.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() тогда
								СтрокаПолейСворачивания = СтрЗаменить(СтрокаПолейСворачивания,"ХарактеристикаНоменклатуры,","");
							Иначе
								Отбор.Вставить("ХарактеристикаНоменклатуры",Стр.ХарактеристикаНоменклатуры);
							КонецЕсли;	
							Если Стр.ТоварнаяКатегория=Справочники.НСИ_ТоварныеКатегории.ПустаяСсылка() тогда
								СтрокаПолейСворачивания = СтрЗаменить(СтрокаПолейСворачивания,"ТоварнаяКатегория,","");
							Иначе
								Отбор.Вставить("ТоварнаяКатегория",Стр.ТоварнаяКатегория);
							КонецЕсли;	
							Если Стр.Брендообъем=Справочники.НСИ_Брендообъемы.ПустаяСсылка() тогда
								СтрокаПолейСворачивания = СтрЗаменить(СтрокаПолейСворачивания,"Брендообъем,","");
							Иначе
								Отбор.Вставить("Брендообъем",Стр.Брендообъем);
							КонецЕсли;	
							ФактТаблицаПоДокументу = ФактТаблица.Скопировать(Отбор);
							ФактТаблицаПоДокументу.Свернуть(СтрокаПолейСворачивания,"СуммаСкидки,Количество");
							Для Каждого ТекСтрокаФактТаблицаПоДокументу Из ФактТаблицаПоДокументу Цикл
								Стр.СуммаСкидки = ТекСтрокаФактТаблицаПоДокументу.СуммаСкидки;
								Стр.Количество  = ТекСтрокаФактТаблицаПоДокументу.Количество;
								НоваяСтрокаТаблицыЗначений = ТаблицаПоСкидкам.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыЗначений, Стр);
							КонецЦикла;	
						КонецЦикла;
					КонецЦикла;
					//5.Формирование движений 
					НаборДвижений = Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам;
					ТаблицаДвижений = НаборДвижений.Выгрузить();
					ТаблицаДвижений.Очистить();
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);
					ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
					НаборДвижений.мПериод            = Дата;
					НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
					Если Не Отказ Тогда
						Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам.ВыполнитьРасход();
					КонецЕсли;
					Если ПараметрыСеанса.ПроведениеДокументов = ложь Тогда
						//6.Контроль отрицательного сальдо по регистру
						Движения.Записать();
						ЗапросОстатки = Новый Запрос;
						ЗапросОстатки.Текст = 
						"ВЫБРАТЬ
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
						|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) КАК КоличествоОстаток,
						|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) КАК СуммаСкидкиОстаток
						|ИЗ
						|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(
						|			,
						|			УстановкаСкидокНоменклатуры В (&Приказы)
						|				И Контрагент = &Контрагент) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
						|
						|СГРУППИРОВАТЬ ПО
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры
						|
						|ИМЕЮЩИЕ
						|	(СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) < 0
						|		ИЛИ СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) < -3)";
						
						ТЗУстановки.Свернуть("УстановкаСкидокНоменклатуры");
						СписокПриказов = Новый Массив;
						Для Каждого СтрокаТЗУстановки из ТЗУстановки цикл
							//>>060616 Степанов не проверять минуса когда считаем количество по брендообъему целиком
							ПРГ_ОбъединятьБрендообъем = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(СтрокаТЗУстановки.УстановкаСкидокНоменклатуры,"ПРГ_ОбъединятьБрендообъем");
							Если Не ПРГ_ОбъединятьБрендообъем тогда
								СписокПриказов.Добавить(СтрокаТЗУстановки.УстановкаСкидокНоменклатуры);
							КонецЕсли;
						КонецЦикла;	
						ЗапросОстатки.УстановитьПараметр("Приказы",СписокПриказов);
						ЗапросОстатки.УстановитьПараметр("Контрагент",Контрагент);
						РезОстатки = ЗапросОстатки.Выполнить().Выбрать();
						Пока РезОстатки.Следующий() Цикл
							Сообщить("Проведение документа приведет к излишнему предоставлению скидки!",СтатусСообщения.Важное);
							Сообщить(Строка(РезОстатки.УстановкаСкидокНоменклатуры)+?(РезОстатки.КоличествоОстаток<0,"; Кол-во: "+Строка(РезОстатки.КоличествоОстаток),"")+?(РезОстатки.СуммаСкидкиОстаток<0,"; Сумма: "+Строка(РезОстатки.СуммаСкидкиОстаток),""));
							Отказ = Истина;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Конецесли;
		
	КонецЕсли;	
	//<<160316
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()


//начало изменений Ожиганов А. 23.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
//Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
//	ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок)
Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	ИсхТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок)
//конец изменений 	
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов А. 23.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
	//СравнитьКолонкиТаблицыИРегистра(исхТаблицаПоТоварам,Метаданные.РегистрыНакопления.ТоварыОрганизаций);
	ТаблицаПоТоварам = ИсхТаблицаПоТоварам.Скопировать(,"Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Качество,Склад,Количество");
	ТаблицаПоТоварам.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,Качество,Склад","Количество");
	//Сообщить("Сравниваем");
	//СравнитьКолонкиТаблицыИРегистра(ТаблицаПоТоварам,Метаданные.РегистрыНакопления.ТоварыОрганизаций);
	//конец изменений 
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	Если НЕ Отказ Тогда
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(
		Движения.ТоварыОрганизаций,
		Новый Структура("ТаблицаПоТоварам", ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество")));
		
		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		
		Если НЕ СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	// Перенесем остатки по организации на комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(
		Движения.ТоварыОрганизаций,
		Новый Структура("ТаблицаПоТоварам", ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество")));
		
		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       Неопределено);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()


// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(
		СтруктураШапкиДокумента,
		ТаблицаПоВзаиморасчетам,
		Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации,
		ВидДвиженияНакопления.Приход,
		Движения,
		Отказ,
		Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры


// Формирование движений по регистру "Списанные товары".
//
//начало изменений Ожиганов А. 13.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
//Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок,);
Функция ПодготовитьСвернутуюТаблицуПоТоварам(ИсхТаблицаПоТоварам,ССервера = Истина,ДляФормированияКниг=Ложь) Экспорт
	
	//убрать ниже
	//МетаРег = Метаданные.РегистрыСведений.СписанныеТовары;
	//для Каждого ТекКолонка из ТаблицаПоТоварам.Колонки Цикл
	//	Если МетаРег.Ресурсы.Найти(ТекКолонка.имя) <> Неопределено Тогда
	//		Сообщить(ТекКолонка.имя);
	//	КонецЕсли;	
	//КонецЦикла;	
	//убрать выше
	
	Если ДляФормированияКниг Тогда
		КолонкиСвертки = "Номенклатура,ВидЦенности,ТипНоменклатуры,ХарактеристикаНоменклатуры,СерияНоменклатуры,Качество,СтавкаНДС,СтавкаНДСДоИзменения,Склад,НоменклатурнаяГруппа,СчетУчетаБУ,
					|ПринятыеСчетУчетаБУ,ПринятыеСчетУчетаНУ,СчетУчетаНУ,СчетДоходовБУ,СчетДоходовНУ,СчетРасходовБУ,СчетРасходовНУ,СубконтоБУ,
					|СубконтоНУ,СубконтоБУРасходов,СубконтоНУРасходов,ДокументПартии,
					|ПереданныеСобственныеБУ,ПереданныеСобственныеНУ,ПереданныеПринятыеБУ,ПереданныеПринятыеНУ,ЗаказПокупателя";
		КолонкиСумм = "Количество,ПРГ_КолВо,ПРГ_КолВоДоИзм,НДСВал,СуммаВал,Стоимость,Сумма,НДСИтоговый,НДСДоИзм,НДСДоКорр,СуммаБУ,СуммаБезНДС,НДС,СуммаСНДСДок,УЗ_СуммаРегл,УЗ_СуммаНУ,УЗ_СуммаВР,УЗ_СуммаПР,ПРГ_СуммаДоИзм,ПРГ_СуммаДоКорр,ПРГ_СуммаИтоговый,СуммаРегл";
	ИначеЕсли ССервера Тогда
		КолонкиСвертки = "Номенклатура,ТипНоменклатуры,ХарактеристикаНоменклатуры,СерияНоменклатуры,Качество,СтавкаНДС,Склад,НоменклатурнаяГруппа,СчетУчетаБУ,
					|ПринятыеСчетУчетаБУ,ПринятыеСчетУчетаНУ,СчетУчетаНУ,СчетДоходовБУ,СчетДоходовНУ,СчетРасходовБУ,СчетРасходовНУ,СубконтоБУ,
					|СубконтоНУ,СубконтоБУРасходов,СубконтоНУРасходов,ДокументПартии,
					|ПереданныеСобственныеБУ,ПереданныеСобственныеНУ,ПереданныеПринятыеБУ,ПереданныеПринятыеНУ,ЗаказПокупателя";
		КолонкиСумм = "Количество,НДСВал,СуммаВал,Стоимость,Сумма,НДСИтоговый,НДСДоИзм,НДСДоКорр,СуммаБУ,СуммаБезНДС,НДС,СуммаСНДСДок,УЗ_СуммаРегл,УЗ_СуммаНУ,УЗ_СуммаВР,УЗ_СуммаПР";
	Иначе
		КолонкиСвертки = "Номенклатура,ТипНоменклатуры,ХарактеристикаНоменклатуры,СерияНоменклатуры,Качество,СтавкаНДС,Склад,НоменклатурнаяГруппа,СчетУчетаБУ,
					|ПринятыеСчетУчетаБУ,ПринятыеСчетУчетаНУ,СчетУчетаНУ,СчетДоходовБУ,СчетДоходовНУ,СчетРасходовБУ,СчетРасходовНУ,СубконтоБУ,
					|СубконтоНУ,СубконтоБУРасходов,СубконтоНУРасходов,ДокументПартии,НоменклатураКомплекта,ХарактеристикаКомплекта,
					|ПереданныеСобственныеБУ,ПереданныеСобственныеНУ,ПереданныеПринятыеБУ,ПереданныеПринятыеНУ,ЗаказПокупателя";
		КолонкиСумм = "Количество,НДСВал,СуммаВал,Стоимость,СуммаБУ,Сумма,НДСДоИзм,НДСИтоговый,НДСДоКорр,СуммаБезНДС,НДС,СуммаСНДСДок,УЗ_СуммаРегл,УЗ_СуммаНУ,УЗ_СуммаВР,УЗ_СуммаПР,КоличествоКомплекта";					
	КонецЕсли;	
	
					
	
	ВсеКолонки  = КолонкиСвертки+","+КолонкиСумм;
	
	//убрать ниже
	//СтруктПроверки = Новый Структура(ВсеКолонки);
	//
	//Для Каждого ТекЗнч Из СтруктПроверки Цикл
	//	Если ТаблицаПоТоварам.Колонки.Найти(ТекЗнч.Ключ) = Неопределено Тогда
	//		сообщить("Нет колонки "+ТекЗнч.Ключ);
	//	КонецЕсли;	
	//КонецЦикла;	
	//
	//проверка на колонки
	//Поз =1;
	//АВсеКолонки = ВсеКолонки;
	//Пока Поз > 0 Цикл
	//	Поз = Найти(АВсеКолонки,",");
	//	Если Поз > 2 Тогда
	//		ИмяКол = Сред(АВсеКолонки,1,Поз-1);
	//		ИмяКол  = СтрЗаменить(ИмяКол,Символы.ПС,"");
	//		АВсеКолонки = Сред(АВсеКолонки,Поз+1);
	//		Если ИсхТаблицаПоТоварам.Колонки.найти(ИмяКол) = Неопределено Тогда
	//			Сообщить(""+ИмяКол+" не найдена");
	//		КонецЕсли;	
	//	ИначеЕсли Поз =0 и СтрДлина(АВсеКолонки) >0 Тогда
	//		ИмяКол = АВсеКолонки;
	//		ИмяКол  = СтрЗаменить(ИмяКол,Символы.ПС,"");
	//		АВсеКолонки = "";
	//		Если ИсхТаблицаПоТоварам.Колонки.найти(ИмяКол) = Неопределено Тогда
	//			Сообщить(""+ИмяКол+" не найдена");
	//		КонецЕсли;	
	//	Иначе
	//		Поз = 0;
	//	КонецЕсли;	
	//	
	//КонецЦикла;
	//убратьвыше
	
	ТаблицаПоТоварам = ИсхТаблицаПоТоварам.Скопировать(,ВсеКолонки);
	//Если ДляФормированияКниг Тогда
	//	для Каждого ТекСтрока Из ТаблицаПоТоварам Цикл
	//		Если ТекСтрока.ПРГ_КолВоДоИзм >  0  и ТекСтрока.ПРГ_КолВо = 0 Тогда
	//			ТекСтрока.СтавкаНДС = ТекСтрока.СтавкаНДСДоИзменения;
	//		ИначеЕсли ТекСтрока.ПРГ_КолВоДоИзм =  0  и ТекСтрока.ПРГ_КолВо>0 Тогда
	//			ТекСтрока.СтавкаНДСДоИзменения = ТекСтрока.СтавкаНДС;
	//		КонецЕсли;	
	//	КонецЦикла;	
	//КонецЕсли;	
	
	ТаблицаПоТоварам.Свернуть(КолонкиСвертки,КолонкиСумм);
	Если ДляФормированияКниг Тогда
		возврат ТаблицаПоТоварам;
	КонецЕсли;	
	
	ТаблицаПоТоварам.Колонки.Добавить("НомерСтроки");
	
	Сч = 0;
	Пока Сч < ТаблицаПоТоварам.Количество() Цикл
		Строка = ТаблицаПоТоварам[Сч];
		
		Если Строка.Количество = 0 И Строка.Стоимость = 0 И Строка.Сумма = 0 И Строка.НДС = 0 Тогда
			ТаблицаПоТоварам.Удалить(Сч);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	
	ТаблицаПоТоварам.Сортировать("Номенклатура,Количество");
	НомерСтр = 1;
	Сч = 0;
	НомерСтр = 1;
	Пока Сч < ТаблицаПоТоварам.Количество() Цикл
		ТаблицаПоТоварам[Сч].НомерСтроки =НомерСтр;
		НомерСтр = НомерСтр +1;
		Сч = сч + 1;
	КонецЦикла;
	
	возврат ТаблицаПоТоварам;
Конецфункции

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
//конец изменений 	
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений 	= Движения.СписанныеТовары;
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	//начало изменений Ожиганов А. 13.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
	//КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
	КопияТаблицаПоТоварам = ПодготовитьСвернутуюТаблицуПоТоварам(ТаблицаПоТоварам,Ложь);
	//конец изменений 
	
	
	//начало изменений Ожиганов А. 13.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
	//m.ionov@a-prof.ru 24/03/2014
	//Удалим лишние записи
	//Сч = 0;
	//Пока Сч < КопияТаблицаПоТоварам.Количество() Цикл
	//	Строка = КопияТаблицаПоТоварам[Сч];
	//	
	//	Если Строка.Количество = 0 И Строка.Стоимость = 0 И Строка.Сумма = 0 И Строка.НДС = 0 Тогда
	//		КопияТаблицаПоТоварам.Удалить(Сч);
	//	Иначе
	//		Сч = Сч + 1;
	//	КонецЕсли;
	//КонецЦикла;
	//конец изменений 
	//---- m.ionov@a-prof.ru
	//начало изменений Ожиганов А. 12.10.2017 69345 доработка механизма бонусов. Шкала начисления/выполнения процентов бонусов.  
	//исключим движения по партиям если в целом количество по номенклатуре равно нулю
	////Серия ???
	//КолонкиДляСвертки = "Номенклатура,СчетУчетаБУ,СчетУчетаНУ,Качество,ЗаказПокупателя,ХарактеристикаНоменклатуры,СубконтоБУРасходов,СчетРасходовБУ,СубконтоНУРасходов,СчетРасходовНУ,Количество";
	//КолонкиДляПоиска = "Номенклатура,СчетУчетаБУ,СчетУчетаНУ,Качество,ЗаказПокупателя,ХарактеристикаНоменклатуры,СубконтоБУРасходов,СчетРасходовБУ,СубконтоНУРасходов,СчетРасходовНУ";
	//ТаблДляОпрКолВа = КопияТаблицаПоТоварам.Скопировать(,КолонкиДляСвертки); 	
	//ТаблДляОпрКолВа.Свернуть(КолонкиДляПоиска,"Количество");
	//Сч = 0;
	//Пока Сч < ТаблДляОпрКолВа.Количество() Цикл
	//	Если ТаблДляОпрКолВа[Сч].Количество <>  0 Тогда
	//		ТаблДляОпрКолВа.Удалить(ТаблДляОпрКолВа[Сч]);
	//	Иначе
	//	   Сч = Сч + 1;
	//	КонецЕсли;	
	//КонецЦикла;	
	//
	//ТаблДляОпрКолВа.Индексы.Добавить("Номенклатура");
	//ТаблДляОпрКолВа.Индексы.Добавить(КолонкиДляСвертки);
	//СтруктПоиска = Новый Структура(КолонкиДляПоиска);
	//Для Каждого ТекСтрока Из КопияТаблицаПоТоварам Цикл
	//	Если ТекСтрока.Количество = 0 Тогда
	//		продолжить;
	//	КонецЕсли;	
	//	Если ТаблДляОпрКолВа.Найти(ТекСтрока.Номенклатура,"Номенклатура") <> Неопределено Тогда
	//		 ЗаполнитьЗначенияСвойств(СтруктПоиска,ТекСтрока);
	//		 НайдЗнч = ТаблДляОпрКолВа.НайтиСтроки(СтруктПоиска);
	//		 Если НайдЗнч.Количество() > 0 Тогда
	//			 ТекСтрока.Количество = 0;
	//			 //ТекСтрока.КоличествоДок = 0;
	//		 КонецЕсли; 
	//	КонецЕсли;	
	//КонецЦикла;	
	//
	//конец изменений 
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
	УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, КопияТаблицаПоТоварам),
	ТаблицаДвижений,
	Истина);
	
	// Недостающие поля.
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			Строка.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
			Строка.СтатусПередачи 		= Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию;
			Строка.ДокументПередачи 	= СтруктураШапкиДокумента.Ссылка;
			
			Строка.КодОперацииПартииТоваров = ?(Строка.Количество < 0, 
			Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера, Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию);
			
		ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Строка.КодОперацииПартииТоваров = ?(Строка.Количество < 0,
			Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя, Перечисления.КодыОперацийПартииТоваров.Реализация);
			
			////++ Spl_Апроф 03.11.2014 (k.russkih@a-prof.ru) Если корректируется в меньшую сторону, то не должно считаться за возврат.
			//Если ЗначениеЗаполнено(ПР_Претензия.СкладПретензии) Тогда			
			//	Если Строка.Склад = ПР_Претензия.СкладПретензии Тогда				
			//		Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Реализация;								
			//	КонецЕсли; 							
			//КонецЕсли; 
			////-- Spl_Апроф
			
		КонецЕсли;
		
		// Корректировка на отрицательное количество в партионном учете будет обработана как возврат
		Если Строка.Количество < 0 Тогда
			Строка.Количество = -Строка.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Товары, 			"ВидТабличнойЧасти");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   											"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, 											"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, 											"Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, 						"Качество");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, 								"ДоговорКонтрагента");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, КопияТаблицаПоТоварам);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, КопияТаблицаПоТоварам);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если НЕ Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, 		"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция, 		"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,		"ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,	"ДопустимыйСтатус4");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,									"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,						"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, 									"ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента,      		"КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, 		"КратностьДокумента");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект, 										"Проект");
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		ЭтоВозврат = (Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера
		ИЛИ Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя);
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
		
		Строка.СуммаЗадолженности = ?(ЭтоВозврат, -СтрокаТЧ.СуммаСНДСДок, СтрокаТЧ.СуммаСНДСДок);
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Строка.ЗаказСписания = СтруктураШапкиДокумента.Сделка;		
		Иначе
			Строка.ЗаказСписания = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;	
		
		// Если резервирование под заказ - заказ партии
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			Строка.ЗаказПартии = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;
		
		// Запишем номер строки табличной части Товары в измерение НомерСтрокиДокумента регистра СписанныеТовары.
		// Так можно поступить потому, что документ не предназначен для корректировки наборов, иначе в наборе записей были бы строки с одинаковыми измерениями.
		// Номер строки необходим для формирования корректировочных проводок при традиционном режиме учета затрат.
		// В общем случае так делать не требуется - можно использовать функцию ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений
		Строка.НомерСтрокиДокумента = СтрокаТЧ.НомерСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Перем КэшПоСчетам;
	
	//{08.09.2015 Островерхий заявка №43701 
	ДобавлятьАналитикуПодр = ЗначениеЗаполнено(Подразделение);
	ПРГ_ПодразделениеОрганизации = Неопределено;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
		|ИЗ
		|	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
		|ГДЕ
		|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение = &Подразделение");
		Запрос.УстановитьПараметр("Подразделение",Подразделение);							  
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка .Следующий() Тогда
			ПРГ_ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		КонецЕсли;
	КонецЕслИ;	
	
	ПРГМассивСчетов = Новый Массив;
	ПРГМассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.01"));
	ПРГМассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02.1"));
	//08.09.2015 Островерхий} 
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,                 "Организация");
	
	// Кор.Счет для начисления задолженности перед комитентом, если вдруг продадим комиссионный товар
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, 					   "КорСчетЗадолженностиБУ");
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, "КорСчетНУ");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату, 		"КорСубконтоНУ1");
		
		Если НЕ СтруктураШапкиДокумента.Свойство("КэшПоСчетам", КэшПоСчетам) Тогда
			КэшПоСчетам = Новый Соответствие;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаДвижений Цикл
			
			ЭтоВозврат = (Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера)
			ИЛИ (Строка.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя);
			
			СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
			
			Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
			Строка.КорСчетНУ      = СтрокаТЧ.СчетРасходовНУ;
			
			//{08.09.2015 Островерхий заявка №43701 
			//Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоБУ;
			//Строка.КорСубконтоНУ2 = СтрокаТЧ.СубконтоНУ;
			
			Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоБУРасходов;
			Строка.КорСубконтоНУ2 = СтрокаТЧ.СубконтоНУРасходов;
			
			
			Если Не ЗначениеЗаполнено(Строка.КорСубконтоБУ2) Тогда
				Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоБУ;
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(Строка.КорСубконтоНУ2) Тогда
				Строка.КорСубконтоНУ2 = СтрокаТЧ.СубконтоНУ;
			КонецЕсли;	
			
			
			Если ПРГМассивСчетов.Найти(СтрокаТЧ.СчетРасходовБУ) <> Неопределено 
				или  ПРГМассивСчетов.Найти(СтрокаТЧ.СчетДоходовБУ) <> Неопределено 
				Тогда
				Если ДобавлятьАналитикуПодр Тогда
					Строка.ПодразделениеОрганизации = ПРГ_ПодразделениеОрганизации;
				КонецЕсли;
				Строка.ПРГ_СубконтоБУ1	= СтрокаТЧ.СубконтоБУ;
				Строка.ПРГ_СубконтоНУ1  = СтрокаТЧ.СубконтоНУ;
			КонецЕслИ;	
			//08.09.2015 Островерхий} 
			
			// Доход от продажи может облагаться ЕНВД (что определяется по бух. счету учета)
			Если ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ) Тогда
				
				СчетДоходовБУОтноситсяКДеятельностиЕНВД = КэшПоСчетам[СтрокаТЧ.СчетДоходовБУ];
				Если СчетДоходовБУОтноситсяКДеятельностиЕНВД = Неопределено Тогда
					СчетДоходовБУОтноситсяКДеятельностиЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ);
					КэшПоСчетам.Вставить(СтрокаТЧ.СчетДоходовБУ, СчетДоходовБУОтноситсяКДеятельностиЕНВД);
				КонецЕсли;
				
				Если СчетДоходовБУОтноситсяКДеятельностиЕНВД Тогда				
					// в этом случае товар списывается на счет расходов по ЕНВД
					Строка.КорСчетНУ = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
				КонецЕсли;
				
			КонецЕсли;
			
			// Принятые на комиссию товары не учитываются в налоговом учете:
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
				Строка.ОтражатьВНалоговомУчете = Ложь;
			Иначе
				Строка.ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
			КонецЕсли;
			
			Строка.ПринятыеКорСчетБУ		= СтрокаТЧ.ПринятыеСчетУчетаБУ;
			Строка.ПринятыеКорСчетНУ		= СтрокаТЧ.ПринятыеСчетУчетаНУ;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				Строка.ОтражатьВНалоговомУчете = Истина;
				Строка.СчетУчетаНУ 			   = СтрокаТЧ.СчетУчетаБУ;
				Строка.ПринятыеСчетУчетаНУ 	   = СтрокаТЧ.ПринятыеСчетУчетаБУ;
				Строка.ПринятыеКорСчетНУ   	   = Строка.ПринятыеКорСчетБУ;
			КонецЕсли;
			
			// Субконто кор.счета для начисления задолженности перед комитентом, если вдруг продадим комиссионный товар
			Строка.КорСубконтоЗадолженностиБУ1 = Контрагент;
			Строка.КорСубконтоЗадолженностиБУ2 = ДоговорКонтрагента;
			
			Строка.СчетДоходовБУ 			   = СтрокаТЧ.СчетДоходовБУ;
			Строка.СчетДоходовНУ 			   = СтрокаТЧ.СчетДоходовНУ;
			
			Строка.СуммаЗадолженностиБУ 	   = ?(ЭтоВозврат, -(СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС), СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС);
			Строка.СуммаНДС 				   = ?(ЭтоВозврат, -СтрокаТЧ.НДС, СтрокаТЧ.НДС);
			
			Если НЕ СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				
				Строка.КорВалютаЗадолженностиБУ        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Строка.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТЧ.СуммаВал;
				
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и СтруктураШапкиДокумента.УчитыватьНДС Тогда
					Строка.КорВалютнаяСуммаНДСЗадолженностиБУ = СтрокаТЧ.НДСВал;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "КорСубконтоБУ3");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		Для Каждого Строка Из ТаблицаДвижений Цикл
			
			СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
			
			Строка.КорСчетБУ      	 = СтрокаТЧ.ПереданныеСобственныеБУ;
			Строка.КорСчетНУ      	 = СтрокаТЧ.ПереданныеСобственныеНУ;
			
			Строка.ПринятыеКорСчетБУ = СтрокаТЧ.ПереданныеПринятыеБУ;
			Строка.ПринятыеКорСчетНУ = СтрокаТЧ.ПереданныеПринятыеНУ;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				Строка.ОтражатьВНалоговомУчете 	= Истина;
				Строка.СчетУчетаНУ 			   	= СтрокаТЧ.СчетУчетаБУ;
				Строка.КорСчетНУ   				= СтрокаТЧ.ПереданныеСобственныеБУ;
				Строка.ПринятыеСчетУчетаНУ 		= СтрокаТЧ.ПринятыеСчетУчетаБУ;
				Строка.ПринятыеКорСчетНУ 		= СтрокаТЧ.ПереданныеПринятыеБУ;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

// ДВИЖЕНИЯ ПО РЕГИСТРАМ РЕГЛ. УЧЕТА

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаТоваровДляУчетаЗатрат, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	ДатаДока   = Дата;
	ПрошлыйПериод = Год(СтруктураШапкиДокумента.ДокументРеализацииДата) < Год(СтруктураШапкиДокумента.Дата);
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		// Формирование движений по регистру "Учет продаж и себестоимости"
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам);
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
		СтруктураШапкиДокумента,
		ТаблицаПоУслугам);
		
		Если мИспользоватьРасширеннуюАналитику И мДатаНачалаИспользованияРасширеннойАналитики < СтруктураШапкиДокумента.Дата Тогда
			//Формирование проводок
			Для Каждого СтрокаТЧ из ТаблицаПоТоварам Цикл
				ОтразитьВУчетеМПЗ 	= СтрокаТЧ.Количество <> 0;
				ТоварНаКомиссии 	= СтрокаТЧ.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый;
				
				БУ_Тек = (НЕ ПрошлыйПериод) ИЛИ (ПрошлыйПериод И СтруктураШапкиДокумента.ОтчетностьПодписана);
				НУ_Тек = (НЕ ПрошлыйПериод) ИЛИ СтрокаТЧ.СуммаБУ <= 0;
				
				Партия = Новый Структура("СуммаСписания, Количество", 0, СтрокаТЧ.Количество);
				
				Если (НЕ НУ_Тек) Тогда
					//Корректировка НУ прошлого периода с использованием счетов К
					Если НЕ ТоварНаКомиссии Тогда
						Если ОтразитьВУчетеМПЗ Тогда
							Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.ДокументРеализацииДата, "НУ", Ложь);
						КонецЕсли;
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.ДокументРеализацииДата, "НУ",  Ложь, Истина, Ложь);
						ФинРезультат = СтрокаТЧ.СуммаБУ - СтрокаТЧ.НДС;
						Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("НУ", ПроводкиНУ, СтруктураШапкиДокумента.ДокументРеализацииДата, СтруктураШапкиДокумента.Организация, ФинРезультат);
					КонецЕсли;
					//Возврат корректировки со счета К
					Если НЕ ТоварНаКомиссии Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "НУ", Ложь, Ложь, Истина);
					КонецЕсли;
				КонецЕсли;
				Если (НЕ БУ_Тек) Тогда
					//Корректировка БУ прошлого периода с использованием счетов К
					Если НЕ ТоварНаКомиссии Тогда
						Если ОтразитьВУчетеМПЗ Тогда
							Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.ДокументРеализацииДата, "БУ", Ложь);
						КонецЕсли;
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), "БУ", Ложь, Истина, Ложь);
						Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), Ложь);
						ФинРезультат = СтрокаТЧ.СуммаБУ - СтрокаТЧ.НДС;
						Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("БУ", ПроводкиБУ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), СтруктураШапкиДокумента.Организация, ФинРезультат);
					Иначе
						Документы.КорректировкаРеализации.СформироватьПроводкиПоВыручкеКомитента(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), Истина, Ложь);
					КонецЕсли;
					//Возврат корректировки со счета К
					Если НЕ ТоварНаКомиссии Тогда
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", Ложь, Ложь, Истина);
					Иначе
						Документы.КорректировкаРеализации.СформироватьПроводкиПоВыручкеКомитента(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, Ложь, Истина);
					КонецЕсли;
				КонецЕсли;
				Если (НУ_Тек) Тогда
					//Коррктировка текущего периода
					Если НЕ ТоварНаКомиссии Тогда
						Если ОтразитьВУчетеМПЗ Тогда
							Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "НУ", ПрошлыйПериод, НЕ БУ_Тек);
						КонецЕсли;
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата,  "НУ", ПрошлыйПериод, Ложь, Ложь);
						Если НЕ БУ_Тек Тогда
							Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериод, Ложь, Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если (БУ_Тек) Тогда
					//Коррктировка текущего периода
					Если НЕ ТоварНаКомиссии Тогда
						Если ОтразитьВУчетеМПЗ Тогда
							Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериод, НЕ НУ_Тек);
						КонецЕсли;
						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериод, Ложь, Ложь);
						Если НЕ НУ_Тек Тогда
							Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериод, Ложь, Ложь);
						КонецЕсли;
						Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, ПрошлыйПериод);
					Иначе
						Документы.КорректировкаРеализации.СформироватьПроводкиПоВыручкеКомитента(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, Ложь, Ложь);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			//m.ionov@a-prof.ru 24/03/2014
			//Изменения внесли в общий модуль
			////Бирюков для корректировок непроведенных РН, находящихся за датой ввода остатков
			//		ИначеЕсли НЕ ПустаяСтрока(ИД_Обмена) И (СтруктураШапкиДокумента.ДокументРеализацииДата < Константы.ГраницаПроведенияДокументов.Получить()) Тогда
			//			Для Каждого СтрокаТЧ из ТаблицаПоТоварам Цикл
			//				ОтразитьВУчетеМПЗ 	= СтрокаТЧ.Количество <> 0;
			//				ТоварНаКомиссии 	= СтрокаТЧ.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый;
			//				
			//				БУ_Тек = (НЕ ПрошлыйПериод) ИЛИ (ПрошлыйПериод И СтруктураШапкиДокумента.ОтчетностьПодписана);
			//				НУ_Тек = (НЕ ПрошлыйПериод) ИЛИ СтрокаТЧ.СуммаБУ <= 0;
			//				
			//				Партия = Новый Структура("СуммаСписания, Количество", 0, СтрокаТЧ.Количество);
			//				
			//				Если (НЕ НУ_Тек) Тогда
			//					//Корректировка НУ прошлого периода с использованием счетов К
			//					Если НЕ ТоварНаКомиссии Тогда
			//						Если ОтразитьВУчетеМПЗ Тогда
			////							Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.ДокументРеализацииДата, "НУ", Ложь);
			//							Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "НУ", Ложь);
			//						КонецЕсли;
			////						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.ДокументРеализацииДата, "НУ",  Ложь, Истина, Ложь);
			//						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "НУ",  Ложь, Истина, Ложь);
			//						ФинРезультат = СтрокаТЧ.СуммаБУ - СтрокаТЧ.НДС;
			////						Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("НУ", ПроводкиНУ, СтруктураШапкиДокумента.ДокументРеализацииДата, СтруктураШапкиДокумента.Организация, ФинРезультат);
			////%%%					Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("НУ", ПроводкиНУ, СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, ФинРезультат);
			//					КонецЕсли;
			//					//Возврат корректировки со счета К
			//					Если НЕ ТоварНаКомиссии Тогда
			//						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "НУ", Ложь, Ложь, Истина);
			//					КонецЕсли;
			//				КонецЕсли;
			//				Если (НЕ БУ_Тек) Тогда
			//					//Корректировка БУ прошлого периода с использованием счетов К
			//					Если НЕ ТоварНаКомиссии Тогда
			//						Если ОтразитьВУчетеМПЗ Тогда
			////							Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.ДокументРеализацииДата, "БУ", Ложь);
			//							Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", Ложь);
			//						КонецЕсли;
			////						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), "БУ", Ложь, Истина, Ложь);
			//						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", Ложь, Истина, Ложь);
			////						Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), Ложь);
			//						Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, Ложь);
			//						ФинРезультат = СтрокаТЧ.СуммаБУ - СтрокаТЧ.НДС;
			////						Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("БУ", ПроводкиБУ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), СтруктураШапкиДокумента.Организация, ФинРезультат);
			////%%%					Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("БУ", ПроводкиБУ, СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, ФинРезультат);
			//					Иначе
			////						Документы.КорректировкаРеализации.СформироватьПроводкиПоВыручкеКомитента(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), Истина, Ложь);
			//						Документы.КорректировкаРеализации.СформироватьПроводкиПоВыручкеКомитента(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, Истина, Ложь);
			//					КонецЕсли;
			//					//Возврат корректировки со счета К
			//					Если НЕ ТоварНаКомиссии Тогда
			//						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", Ложь, Ложь, Истина);
			//					Иначе
			//						Документы.КорректировкаРеализации.СформироватьПроводкиПоВыручкеКомитента(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, Ложь, Истина);
			//					КонецЕсли;
			//				КонецЕсли;
			//				Если (НУ_Тек) Тогда
			//					//Коррктировка текущего периода
			//					Если НЕ ТоварНаКомиссии Тогда
			//						Если ОтразитьВУчетеМПЗ Тогда
			//							Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "НУ", ПрошлыйПериод, НЕ БУ_Тек);
			//						КонецЕсли;
			//						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата,  "НУ", ПрошлыйПериод, Ложь, Ложь);
			//						Если НЕ БУ_Тек Тогда
			//							Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериод, Ложь, Ложь);
			//						КонецЕсли;
			//					КонецЕсли;
			//				КонецЕсли;
			//				Если (БУ_Тек) Тогда
			//					//Коррктировка текущего периода
			//					Если НЕ ТоварНаКомиссии Тогда
			//						Если ОтразитьВУчетеМПЗ Тогда
			//							Документы.КорректировкаРеализации.ПодготовитьСтрокуТаблицыПоТоваров(СтруктураШапкиДокумента, ТаблицаТоваровДляУчетаЗатрат, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериод, НЕ НУ_Тек);
			//						КонецЕсли;
			//						Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериод, Ложь, Ложь);
			//						Если НЕ НУ_Тек Тогда
			//							Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериод, Ложь, Ложь);
			//						КонецЕсли;
			//						Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, ПрошлыйПериод);
			//					Иначе
			//						Документы.КорректировкаРеализации.СформироватьПроводкиПоВыручкеКомитента(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, Ложь, Ложь);
			//					КонецЕсли;
			//				КонецЕсли;
			//				
			//			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ из ТаблицаПоУслугам Цикл
			
			БУ_Тек = (НЕ ПрошлыйПериод) ИЛИ (ПрошлыйПериод И СтруктураШапкиДокумента.ОтчетностьПодписана);
			НУ_Тек = (НЕ ПрошлыйПериод) ИЛИ СтрокаТЧ.СуммаБУ <= 0;
			
			Если (НЕ НУ_Тек) Тогда
				//Корректировка НУ прошлого периода с использованием счетов К
				Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.ДокументРеализацииДата, "НУ",  Ложь, Истина, Ложь);
				ФинРезультат = СтрокаТЧ.СуммаБУ - СтрокаТЧ.НДС;
				Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("НУ", ПроводкиНУ, СтруктураШапкиДокумента.ДокументРеализацииДата, СтруктураШапкиДокумента.Организация, ФинРезультат);
				//Возврат корректировки со счета К
				Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "НУ", Ложь, Ложь, Истина);
			КонецЕсли;
			Если (НЕ БУ_Тек) Тогда
				//Корректировка БУ прошлого периода с использованием счетов К
				Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), "БУ", Ложь, Истина, Ложь);
				Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), Истина);
				ФинРезультат = СтрокаТЧ.СуммаБУ - СтрокаТЧ.НДС;
				Документы.КорректировкаРеализации.СформироватьФинансовыйРезультат("БУ", ПроводкиБУ, КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата), СтруктураШапкиДокумента.Организация, ФинРезультат);
				//Возврат корректировки со счета К
				Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", Ложь, Ложь, Истина);				
			КонецЕсли;
			Если (НУ_Тек) Тогда
				//Коррктировка текущего периода
				Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата,  "НУ", ПрошлыйПериод, Ложь, Ложь);
				Если НЕ БУ_Тек Тогда
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериод, Ложь, Ложь);
				КонецЕсли;
			КонецЕсли;
			Если (БУ_Тек) Тогда
				//Коррктировка текущего периода
				Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "БУ", ПрошлыйПериод, Ложь, Ложь);
				Если НЕ НУ_Тек Тогда
					Документы.КорректировкаРеализации.СформироватьПроводкиПоСобственнойВыручке(СтруктураШапкиДокумента, ПроводкиНУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, "ПР", ПрошлыйПериод, Ложь, Ложь);
				КонецЕсли;
				Документы.КорректировкаРеализации.СформироватьПроводкиПоНДС(СтруктураШапкиДокумента, ПроводкиБУ, СтрокаТЧ, СтруктураШапкиДокумента.Дата, ПрошлыйПериод);				
			КонецЕсли;
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////
		//Проведение по взаиморасчетам
		//
		// Движения по взаиморасчетам
		
		СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок, , ТаблицаПоВзаиморасчетам, СтруктураШапкиДокумента);
		
		Если НЕ ПризнаватьЗачитыватьАванс Тогда										
			//Что бы аванс не зачитывался автоматически очистим счет учета авансов										
			СтруктураПараметровЗачетАванса.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
		Если СтруктураПараметровЗачетАванса = Ложь тогда
			//Отказ       = Истина;
			СуммаАванса = 0;
		Иначе
			ДвиженияДляРегистраРасчетовПоРеализации =
			ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(
			СтруктураПараметровЗачетАванса,
			СтруктураШапкиДокумента,
			ТаблицаПоТоварам,
			ТаблицаПоУслугам);
			СуммаАванса =
			БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(
			СтруктураПараметровЗачетАванса,
			ПроводкиБУ,
			мВалютаРегламентированногоУчета,
			РежимПроведения,
			ЭтотОбъект,
			ДвиженияДляРегистраРасчетовПоРеализации);
		КонецЕсли;
		
	КонецЕсли; //Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
	
	ПроводкиБУ.Записать(Ложь);
	ПроводкиНУ.Записать(Ложь);
	
	Если НЕ (СтруктураПараметровЗачетАванса = Ложь ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) Тогда
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
		Конецесли;
		
		БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(
		СтруктураПараметровЗачетАванса, 
		мВалютаРегламентированногоУчета,
		РежимПроведения,
		ПроводкиБУ,
		ЭтотОбъект,
		Отказ,
		,
		Истина);
		
		ПроводкиБУ.Записать(Ложь);
		ПроводкиНУ.Записать(Ложь);
		
	Конецесли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам)
	Перем Счет91, Счет90_03;
	
	Счет91 = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	Счет90_03 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;				
	ТаблицаДвижений = новый ТаблицаЗначений();				
	
	ТаблицаДвижений.Колонки.Добавить("ТекущаяТаблица");
	
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя"		, Документы.ТипВсеСсылки());
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСчет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоБУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетНДС"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаНДС"				, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1"		, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2"		, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3"		, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1"		, ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2"		, ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3"		, ОписаниеТипов_ВидыСубконтоХозрасчетные);
		
	КонецЕсли;
	
	ПереименованиеКолонокРезультирующейТаблицы = Новый Структура;
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("КоррСчет", 	"СчетДоходовБУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СчетУчетаНУ", 	"СчетДоходовНУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СуммаНДС", 	"НДС");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы);
	
	НаборТаблиц = Новый Массив;
	НаборТаблиц.Добавить(ТаблицаПоТоварам);
	НаборТаблиц.Добавить(ТаблицаПоУслугам);
	
	Для Каждого ТекущаяТаблица Из НаборТаблиц Цикл
		
		Для Каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
			
			//начало изменений
			Если  (СтрокаТаблицы.СуммаБезНДС =0) 	 и (СтрокаТаблицы.НДС = 0)  
				и (СтрокаТаблицы.СуммаБезНДСВал = 0) и (СтрокаТаблицы.НДСВал=0) Тогда
				продолжить;
			КонецЕсли;	
			//конец измененйи
			
			СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
			
			СтрокаНовойТаблицы.СчетНДС 				= ?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаТаблицы.СчетРасходовБУ, Счет91),СтрокаТаблицы.СчетРасходовБУ, Счет90_03);
			СтрокаНовойТаблицы.СуммаСНДС 			= СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			СтрокаНовойТаблицы.СуммаВзаиморасчетов 	= СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
			
			КоррСчет = СтрокаНовойТаблицы.СчетДоходовБУ;
			
			Для НомерСубконто =1 По КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				Конецесли;
			КонецЦикла; 
			
			КоррСчет = СтрокаНовойТаблицы.СчетНДС;
			
			Для НомерСубконто =1 По КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) ТОгда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				Конецесли;
			КонецЦикла; 
			
			Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
				КоррСчет = СтрокаНовойТаблицы.СчетДоходовНУ;
				Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
					ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
					Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
					ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.Номенклатура)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.Номенклатура;
					Конецесли;
				КонецЦикла; 
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; 
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы, Истина);
	
	ТаблицаДвижений.Колонки.ЗаказПокупателя.Имя = "Сделка";
	
	ЧисловыеКолонкиСтрокой   = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура = Новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой = "";
	
	Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если НЕ ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, 			  "Сделка");
	ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	Возврат ТаблицаДвижений;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(Основание) Тогда
		
		ДокументСсылка 	  = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание, Ложь);
		ДокументОснование = ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка);
		
		#Если Клиент Тогда
			Если ЗначениеЗаполнено(ДокументОснование) И Основание <> ДокументОснование И Основание.Дата < ДокументОснование.Дата Тогда
				Если Вопрос("Для указанного документа существуют более поздние корректировки.
					|Использовать последнюю введенную корректировку?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
					ДокументОснование = Основание;
				КонецЕсли;
			Иначе
				ДокументОснование = Основание;
			КонецЕсли;
		#КонецЕсли
		
		Если ЗначениеЗаполнено(ДокументСсылка)
			И ЗначениеЗаполнено(ДокументСсылка.ВалютаДокумента) 
			И ДокументСсылка.ВалютаДокумента <> мВалютаРегламентированногоУчета 
			И ЗначениеЗаполнено(ДокументСсылка.ДоговорКонтрагента)
			И ДокументСсылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			#Если Клиент Тогда
				Предупреждение("Для договоров в условных единицах, корректировка документов, оформленных в валюте, не поддерживается.
				|Корректируемый документ должен быть оформлен в рублях.");
			#КонецЕсли
			Возврат;			
		КонецЕсли;
		
	Иначе
		
		ДокументОснование = Основание;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		//++ Spl_Апроф 08.09.2014 (k.russkih@a-prof.ru)
		//ДокументРеализации = ДокументОснование;
		//Организация 	   = ДокументРеализации.Организация;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПР_Претензия") Тогда
			
			ПР_Претензия = Основание;
			ДокументРеализации = Основание.Накладная;
			ИсправляемыйДокументРеализации = Основание.Накладная;
			ДокументОснование = Основание.Накладная;
			Комментарий = Основание.Комментарий; // Шевченков 37895
			
		Иначе
			
			ДокументРеализации = ДокументОснование;
			Организация 	   = ДокументРеализации.Организация;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПР_Претензия") Тогда
			
			ПР_Претензия = Основание;
			ДокументРеализации = Основание.Накладная;
			ДокументОснование = Основание.Накладная;
			
		КонецЕсли;
		//-- Spl_Апроф
		
	КонецЕсли;
	
	Дата				= НачалоДня(ТекущаяДата());
	КорректироватьБУиНУ = ДоступнаКорректировкаБУиНУ();
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		//++ Spl_Апроф 10.02.2015 (k.russkih@a-prof.ru)
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПР_Претензия") Тогда
			ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
		КонецЕсли;
		//-- Spl_Апроф
		
		ЗаполнитьСвойстваШапки();
		
		//++ Spl_Апроф 10.09.2014 (k.russkih@a-prof.ru)
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПР_Претензия") Тогда
			ПР_Претензия = Основание;	
			//ОтчетностьПодписана = Ложь;
			ПризнаватьЗачитыватьАванс = Ложь;
		КонецЕсли;		
		//-- Spl_Апроф
		
		ЗаполнитьПоДокументу();
	КонецЕсли;
	
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	Если ЭтоНовый() Тогда
		ПризнаватьЗачитыватьАванс = ДоступноПризнаватьЗачитыватьАванс();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	мДокументРеализацииСсылка = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	
	// Проверим флаги в шапке докмента
	Если КорректироватьБУиНУ И НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	Если КорректироватьБУиНУ И НЕ ДоступнаКорректировкаБУиНУ() Тогда
		Если НЕ (мИспользоватьРасширеннуюАналитику И мДатаНачалаИспользованияРасширеннойАналитики <= Дата) Тогда
			СтрокаСообщения = Нстр("ru = 'Корректировка по упр. и регл. учету возможна только в режиме расширенной аналитики'");
		Иначе
			СтрокаСообщения = Нстр("ru = 'Для указанного основания корректировка по упр. и регл. учету не выполняется.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Товары, ЭтотОбъект, Отказ);
	
	// Проверим тип номенклатуры в ТЧ Товары
	ОписаниеТипаНоменклатуры = ПолучитьОписаниеТипаНоменклатурыПоОснованию();
	Для Каждого Строка Из Товары Цикл
		Если ЗначениеЗаполнено(Строка.Номенклатура)
			И НЕ ОписаниеТипаНоменклатуры.СодержитТип(ТипЗнч(Строка.Номенклатура)) Тогда
			ТекстОшибки = НСтр("ru = 'Тип номенклатуры в строке ""%НомерСтроки%"" списка ""Товары"" не соответствует указанному основанию.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Строка.НомерСтроки);
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	// Скорректируем список проверяемых реквизитов документа
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если НЕ КорректироватьБУиНУ Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.Номенклатура");
		НепроверяемыеРеквизиты.Добавить("Услуги.Номенклатура");
	КонецЕсли;
	
	Если НЕ (КорректироватьБУиНУ И ЭтоКорректировкаРТиУ()) Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
		НепроверяемыеРеквизиты.Добавить("Услуги.Содержание");
	КонецЕсли;
	
	Если НЕ УчитыватьНДС Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.СтавкаНДС");
		НепроверяемыеРеквизиты.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;
	
	Для Каждого Реквизит Из НепроверяемыеРеквизиты Цикл
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти(Реквизит);
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Перем НайденныйСФ;
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 
	
	//начало изменений 37663
	Если ОтражатьВБухгалтерскомУчете и РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Не РольДоступна("ПолныеПрава") Тогда
			Если Не УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВБухгалтерскомУчете") Тогда
				Сообщить("У Вас нет прав провести документ отраженный по бухгалтерскому учету !!!");
				Отказ = Истина;
				возврат;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений
	
	//начало изменений Ожиганов 17.04.2015 изменение склада в корректировке реализации 
	Если Не РольДоступна("ПолныеПрава") Тогда
		КорректироватьБУиНУ = Истина;
	КонецЕсли;	
	//конец изменений 
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	// заполним дату оплаты
	//{12.03.2015 Островерхий заявка №б/н 
	//начало изменений 38206
	ПРГРеализация = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации,Истина);
	Если НЕ ЗначениеЗаполнено(Грузополучатель) Тогда
		Грузополучатель =ПРГРеализация.Грузополучатель; 
	КонецЕсли;  
	//12.03.2015 Островерхий}
	//начало изменений приоритет следуюший АП->Договор
	//
	Если НачалоДня(Дата) >= АП_ДатаОплаты и ЗначениеЗаполнено(ПРГРеализация) Тогда
		// теперь определяем  дату оплаты из накладной 38206
		//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
		//возвращаем как и было острочка из договора или АП
		Если НачалоДня(Дата) > АП_ДатаОплаты Тогда
			ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДоговорКонтрагента",Неопределено);
		КонецЕсли;	
		//АП_ДатаОплаты  = ПРГРеализация.АП_ДатаОплаты;
		//Если НачалоДня(Дата) > АП_ДатаОплаты Тогда
		//	АП_ДатаОплаты = НачалоДня(Дата);
		//КонецЕсли;	
		//конец изменений 
		//ПРГ_ДатыОплаты = '00010101';
		//Если ЗначениеЗаполнено(Грузополучатель) и ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки")  Тогда
		//	ПРГ_ДатыОплаты = ?(Грузополучатель.ПКК_ДопустимоеЧислоДнейЗадолженности>0,НачалоДня(Дата)+3600*24*Грузополучатель.ПКК_ДопустимоеЧислоДнейЗадолженности,'00010101');
		//КонецЕсли;	
		//
		//Если ЗначениеЗаполнено(ДоговорКонтрагента) и (ПРГ_ДатыОплаты = '00010101') Тогда
		//	ПРГ_ДатыОплаты = НачалоДня(Дата)+3600*24*ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
		//КонецЕсли;	
		//АП_ДатаОплаты = ПРГ_ДатыОплаты;
	КонецЕсли;
	//конец изменений
	
	ЗаполнитьСвойстваШапки(Ложь);
	
	//начало изменений  с начало нового года 2015 заполняем признак от вида операции
	Если Дата >= '20150101' Тогда
		Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
			КорректировочныйСЧФ = Ложь;
		Иначе	
			КорректировочныйСЧФ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений	
	
	Если Услуги.Количество() > 0 И НЕ ВозможнаКорректировкаУслуг() Тогда
		Услуги.Очистить();
	КонецЕсли;
	
	Если Товары.Количество() > 0 И НЕ ВозможнаКорректировкаТоваров() Тогда
		Товары.Очистить();
	КонецЕсли;
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);
	
	ЗаполнитьЗаказыВТЧ();
	ЗаполнитьСкладыВТЧ();
	ОбработатьСуммыДоКорректировки();
	
	КачествоНовый = Справочники.Качество.Новый;
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
		Если СтрокаТаблицы.Качество <> КачествоНовый Тогда
			СтрокаТаблицы.Качество = КачествоНовый;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
			И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
		
		//{30.04.2015 Островерхий заявка №б/н 
		Если ЗначениеЗаполнено(СтрокаТаблицы.Склад) Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;	
		Иначе
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ПустаяСсылка();	
		КонецЕсли; 
		//30.04.2015 Островерхий} 
		
		//{08.09.2015 Островерхий заявка №43701 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоБУРасходов) и ЗначениеЗаполнено(СтрокаТаблицы.СубконтоБУ)
			и ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходовБУ) и ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходовБУ)
			Тогда
			СтрокаТаблицы.СубконтоБУРасходов = СтрокаТаблицы.СубконтоБУ;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоНУРасходов) и ЗначениеЗаполнено(СтрокаТаблицы.СубконтоНУ)
			и ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходовНУ) и ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходовНУ)
			Тогда
			СтрокаТаблицы.СубконтоНУРасходов = СтрокаТаблицы.СубконтоНУ;
		КонецЕсли; 
		//08.09.2015 Островерхий} 
		//начало изменений Ожиганов А. 24.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
		Если  СтрокаТаблицы.Количество = 0 и СтрокаТаблицы.КоличествоДоИзменения <> 0 Тогда
			Если СтрокаТаблицы.СтавкаНДС <> СтрокаТаблицы.СтавкаНДСДоИзменения Тогда
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСДоИзменения;
			КонецЕсли;	
		ИначеЕсли  СтрокаТаблицы.Количество <> 0 и СтрокаТаблицы.КоличествоДоИзменения = 0 Тогда
			Если СтрокаТаблицы.СтавкаНДСДоИзменения <> СтрокаТаблицы.СтавкаНДС  Тогда
				СтрокаТаблицы.СтавкаНДСДоИзменения = СтрокаТаблицы.СтавкаНДС;
			КонецЕсли;	
		КонецЕсли;	
		//конец изменений 
	КонецЦикла;
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "СоставНабора", "СерийныеНомераСоставНабора");
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	// Проверка счета-фактуры
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
	ПризнаватьЗачитыватьАванс = ПризнаватьЗачитыватьАванс И ДоступноПризнаватьЗачитыватьАванс();
	
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаТоваровДляУчетаЗатрат;
	
	// Удалим старые движения документа
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
		//начало изменений Ожиганов 30.05.2015 немножко оптимизируем 
		ПРГОчиститьДвиженияПОНДС();
		//конец изменений 
	КонецЕсли;
	
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	// Подготовим данные для проведения документа
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения, Отказ);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Заголовок, Отказ);
	
	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента",  СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура);
	
	// Движения по регистрам упр. и рег учета формируем только если в документе установлен реквизит КорректироватьБУиНУ
	// Движения по регистрам учета НДС формируются отдельной обработкой
	Если СтруктураШапкиДокумента.КорректироватьБУиНУ Тогда
		
		// Подготовим данные табличных частей документа
		ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);
		
		// Проверим заполнение ТЧ
		ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Заголовок, Отказ);
		ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Заголовок, Отказ);
		
		//Проверим счета учета
		СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
		СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Услуги", ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		//Проверим корректность указанных (заполненных) счетов учета
		ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Заголовок, Отказ);
		
		мСтруктураПараметровВзаиморасчетов.Вставить(
		"СтруктураПодготовленныхТаблиц",
		Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам));
		
		УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(
		ТаблицаПоВзаиморасчетам,
		ТаблицаПоРасчетам, 
		ЭтотОбъект,
		мСтруктураПараметровВзаиморасчетов,
		СтруктураШапкиДокумента, 
		Отказ,
		Заголовок);
		
		//Проверим на возможность проведения в БУ и НУ
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(
			ДоговорКонтрагента,
			СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
			СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
			мВалютаРегламентированногоУчета,
			Ложь,
			Отказ,
			Заголовок);
		КонецЕсли;
		
		ТаблицаТоваровДляУчетаЗатрат = ТаблицаПоТоварам.СкопироватьКолонки();
		
		// Движения по документу
		Если НЕ Отказ Тогда
			ДвиженияПоРегистрам(
			РежимПроведения, СтруктураШапкиДокумента,
			ТаблицаПоТоварам,ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаТоваровДляУчетаЗатрат,
			Заголовок, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТоварам", ТаблицаТоваровДляУчетаЗатрат);
	
	//{26.01.2016 Островерхий заявка №46457 
	Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
		ПолныеПрава.ЗаписатьНаборЗаписейНаСервере("СвободныеОстатки", Ссылка,, "РегистрНакопления");
	КонецЕсли; 
	//26.01.2016 Островерхий}
	
КонецПроцедуры // ОбработкаПроведения()

//m.ionov@a-prof.ru 24/03/2014
// Процедура очищает движения документа по регистрам подсистемы НДС.
//
Процедура ОчиститьДвиженияРегистровНДС(ДокументОбъект, ДокументСсылка, ТолькоОперативныеДвижения = Ложь, РасчетыВУсловныхЕдиницах = Истина)
	
	НаличиеРеквизитаСписаниеПартийВРегистре = Новый Соответствие;
	НаличиеРеквизитаВидРегламентнойОперацииВРегистре = Новый Соответствие;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			Инд = НаборЗаписей.Количество();
			Пока Инд > 0 Цикл
				Инд = Инд - 1;
				Удалять = НаборЗаписей[Инд].ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПроведениеДокументовПоНДС;
				// <- Шевченков №49991 20160316
				Если (НаборЗаписей[Инд].Сумма=0) И (НаборЗаписей[Инд].КоличествоДТ=0) и (НаборЗаписей[Инд].КоличествоКТ=0) Тогда
					Удалять = Истина;
				КонецЕсли;                                                      
				// ->
				Если Удалять Тогда
					НаборЗаписей.Удалить(Инд);
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
		КонецЕсли;		
	КонецЕсли;
	
	НеУдлятьКорректировкуВалютныхРасчетов = (Ложь) ИЛИ (НЕ РасчетыВУсловныхЕдиницах);
	
	Для Каждого Движение Из ДокументОбъект.Движения Цикл
		
		Если ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСВключенныйВСтоимость")
			ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСКосвенныеРасходы")
			ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСНачисленный")
			ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСНезавершенноеПроизводство")
			ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСПартииТоваров")
			ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСПредъявленный")
			ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСПредъявленныйРеализация0")
			ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСРеализация0")
			ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСсАвансов")
			ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСЗаписиКнигиПокупок")
			ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСЗаписиКнигиПродаж")
			ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСпоОСиНМА")
			ИЛИ ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.НДСУчетРаспределенныхОплатПоставщикам")
			Тогда
			текМетаданные = Движение.Метаданные();
			НаборЗаписей = РегистрыНакопления[текМетаданные.Имя].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			Если НаличиеРеквизитаСписаниеПартийВРегистре[ТипЗнч(Движение)] = Неопределено Тогда
				НаличиеРеквизитаСписаниеПартийВРегистре.Вставить(ТипЗнч(Движение), Не текМетаданные.Реквизиты.Найти("СписаниеПартий") = Неопределено);
			КонецЕсли;
			Если НаличиеРеквизитаВидРегламентнойОперацииВРегистре[ТипЗнч(Движение)] = Неопределено Тогда
				НаличиеРеквизитаВидРегламентнойОперацииВРегистре.Вставить(ТипЗнч(Движение), Не текМетаданные.Реквизиты.Найти("ВидРегламентнойОперации") = Неопределено);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				Если ТолькоОперативныеДвижения И НаличиеРеквизитаСписаниеПартийВРегистре[ТипЗнч(Движение)] Тогда
					// Если в регистре есть реквизит "СписаниеПартий", строки списания партий будут затерты партионным
					// учетом при вызове соотвествущей процедуры
					Инд = НаборЗаписей.Количество();
					Пока Инд > 0 Цикл
						Инд = Инд - 1;
						КорректировкаВалютныхРасчетов = НаличиеРеквизитаВидРегламентнойОперацииВРегистре[ТипЗнч(Движение)] 
						И НаборЗаписей[Инд].ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах
						И НеУдлятьКорректировкуВалютныхРасчетов;
						
						Удалять = (Не НаборЗаписей[Инд].СписаниеПартий) И (НЕ КорректировкаВалютныхРасчетов);
						Если Удалять Тогда
							НаборЗаписей.Удалить(Инд);
						КонецЕсли;
					КонецЦикла;
					НаборЗаписей.Записать(Истина);
				ИначеЕсли НаличиеРеквизитаВидРегламентнойОперацииВРегистре[ТипЗнч(Движение)] 
					И (НеУдлятьКорректировкуВалютныхРасчетов) Тогда
					// Если в регистре есть реквизит "ВидРегламентнойОперации", строки списания партий будут затерты партионным
					// учетом при вызове соотвествущей процедуры
					Инд = НаборЗаписей.Количество();
					Пока Инд > 0 Цикл
						Инд = Инд - 1;
						Удалять = НЕ НаборЗаписей[Инд].ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкиПриВалютныхРасчетах;
						Если Удалять Тогда
							НаборЗаписей.Удалить(Инд);
						КонецЕсли;
					КонецЦикла;
					НаборЗаписей.Записать(Истина);
				Иначе
					НаборЗаписей.Очистить();
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьДвиженияРегистровНДС()
//------- m.ionov@a-prof.ru
//начало изменений Ожиганов 30.05.2015 немножко оптимизируем 
Процедура ПРГОчиститьДвиженияПОНДС()
	//поставим признак записи у регистров связанных с НДС
	// т.к. в свое время не стояло проверки по движения НДС бу отражения в БУ
	
	ОтражениеВРеглУчетеБыло = Истина;
	ДополнительныеСвойства.Свойство("ПРГСтароеОтражВрегл",ОтражениеВРеглУчетеБыло);
	Если ОтражениеВРеглУчетеБыло = Неопределено или ОтражениеВРеглУчетеБыло Тогда
		возврат;
	КонецЕсли;	
	Если Дата > '20150601'  Тогда
		возврат;
	КонецЕслИ;	
	
	
	Движения.НДСПредъявленный.Очистить();
	Движения.НДСЗаписиКнигиПродаж.Очистить();
	Движения.НДСЗаписиКнигиПокупок.Очистить();
	Движения.НДСНачисленный.Очистить();
	
	
КонецПроцедуры	
//конец изменений 

//начало изменений Ожиганов А. 23.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
Процедура СравнитьКолонкиТаблицыИРегистра(ТаблицаПоТоварам,Регистр)
	//начало изменений Ожиганов А. 20.10.2017 71504 уменьшение проводок по себестоимости одной и той же номенклатуры, информация по которой находится в разных строках 
	МассРег = Новый Массив;
//	МассРег.Добавить(Метаданные.РегистрыНакопления.ТоварыВРезервеНаСкладах);
	//МассРег.Добавить(Метаданные.РегистрыНакопления.ПродажиПоДисконтнымКартам);
	МассРег.Добавить(Регистр);
//	МассРег.Добавить(Метаданные.РегистрыНакопления.ТоварыНаСкладах);
//	МассРег.Добавить(Метаданные.РегистрыНакопления.ТоварыПереданные);
//	МассРег.Добавить(Метаданные.РегистрыНакопления.ЗаказыПокупателей);
	
	МасКолонок = Новый Массив;
	Для к = 0 по МассРег.Количество() -1  Цикл
		для Каждого ТекЭл Из МассРег[к].Измерения Цикл
			текКолонка = ТаблицаПоТоварам.Колонки.Найти(ТекЭл.Имя);
			Если текКолонка <> Неопределено Тогда
				Если МасКолонок.Найти(текКолонка.имя) = Неопределено Тогда
					МасКолонок.Добавить(текКолонка.имя);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		для Каждого ТекЭл Из МассРег[к].Ресурсы Цикл
			текКолонка = ТаблицаПоТоварам.Колонки.Найти(ТекЭл.Имя);
			Если текКолонка <> Неопределено Тогда
				Если МасКолонок.Найти(текКолонка.имя)  = Неопределено Тогда
					МасКолонок.Добавить(текКолонка.имя);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		для Каждого ТекЭл Из МассРег[к].Реквизиты Цикл
			текКолонка = ТаблицаПоТоварам.Колонки.Найти(ТекЭл.Имя);
			Если текКолонка <> Неопределено Тогда
				Если МасКолонок.Найти(текКолонка.имя)  = Неопределено Тогда
					МасКолонок.Добавить(текКолонка.имя);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	для Каждого ТекЭлем Из МасКолонок Цикл
		Сообщить(ТекЭлем);
	КонецЦикла;	
	
	//конец изменений 
КонецПроцедуры	
//конец изменений 

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета   			 = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мИспользоватьРасширеннуюАналитику 			 = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат");
мДатаНачалаИспользованияРасширеннойАналитики = глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");

мДокументРеализацииСсылка 					 = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", 		Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", 	Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", 					"Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", 	Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", 	"ЗаказПокупателя");

мУказаниеСкладовВТЧ = Истина;
