Перем мУдалятьДвижения;

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Отделение");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "ЗаданияНаПеревозку".
//
// Параметры:
// Параметры: 
//  ЗаданияНаПеревозку      - таблица значений, содержащая данные для проведения и проверки ТЧ ЗаданияНаПеревозку
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиНакладные(ТаблицаЗадания, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ЗаданияНаПеревозку";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ЗаданиеНаПеревозку, Рейс, ПланДоставки, НовыйСтатусДокумента");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиНакладные()

// Проверяет правильность заполнения строк табличной части "Рейсы".
//
// Параметры:
// Параметры: 
//  Рейсы			        - таблица значений, содержащая данные для проведения и проверки ТЧ Рейсы
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРейсы(ТаблицаРейсы, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Маршруты";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Рейс, ТЭК, ПланДоставки");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиРейсы()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаЗадания, ТаблицаРейсы) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Накладные".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ЗаданиеНаПеревозку"	, "ЗаданиеНаПеревозку");
	СтруктураПолей.Вставить("Рейс"          		, "Рейс");
	СтруктураПолей.Вставить("ПланДоставки"			, "ПланДоставки");

	РезультатЗапросаНакладные = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ЗаданияНаПеревозку", СтруктураПолей);

	// Подготовим таблицу заданий для проведения.
	ТаблицаЗадания = РезультатЗапросаНакладные.Выгрузить();
		
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Рейсы".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Рейс"					, "Рейс");
	СтруктураПолей.Вставить("ТЭК"    		        , "ТЭК");
	СтруктураПолей.Вставить("ТранспортноеСредство"    		, "ТранспортноеСредство");
	СтруктураПолей.Вставить("Водитель"    			, "Водитель");
	СтруктураПолей.Вставить("СтоимостьПеревозки"	, "СтоимостьПеревозки");
	СтруктураПолей.Вставить("ДополнительныеЗатраты"	, "ДополнительныеЗатраты");
	СтруктураПолей.Вставить("ПланДоставки"			, "ПланДоставки");
	
	РезультатЗапросаРейсы = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Маршруты", СтруктураПолей);

	// Подготовим таблицу доп. поручений для проведения.
	ТаблицаРейсы = РезультатЗапросаРейсы.Выгрузить();
			
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаЗадания, ТаблицаРейсы, ТаблицаПоручения;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);
		
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаЗадания, ТаблицаРейсы);
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиНакладные(ТаблицаЗадания, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиРейсы(ТаблицаРейсы, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//m.ionov@a-prof.ru 17.02.2015
	Если Не Отказ Тогда
		ПроверитьДублиРейсов(Отказ);
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаЗадания, ТаблицаРейсы, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ПроводитсяИнтерактивно = Ложь;
		Если ДополнительныеСвойства.Свойство("ПроводитсяИнтерактивно", ПроводитсяИнтерактивно) = Ложь Тогда
			ПроводитсяИнтерактивно = Ложь;
		КонецЕсли;
		
		Если ПроводитсяИнтерактивно Тогда
			//Запишем даты факта доставки в задания на перевозку
			
			Для каждого СтрокаЗадание Из ЗаданияНаПеревозку Цикл
				
				ОбъектЗадание = СтрокаЗадание.ЗаданиеНаПеревозку.ПолучитьОбъект();
				
				НужноЗаписать = Ложь;
				
				Если ОбъектЗадание.СтатусДокумента = СтрокаЗадание.ТекущийСтатусДокумента
					И ЗначениеЗаполнено(СтрокаЗадание.НовыйСтатусДокумента)
					И Не ОбъектЗадание.СтатусДокумента = СтрокаЗадание.НовыйСтатусДокумента Тогда
					
					ОбъектЗадание.СтатусДокумента = СтрокаЗадание.НовыйСтатусДокумента;
					НужноЗаписать = Истина;
				КонецЕсли;
								
				Если Не СтрокаЗадание.ДатаДоставкиКонечная = '00010101'
					И Не СтрокаЗадание.ДатаДоставкиКонечная = СтрокаЗадание.ЗаданиеНаПеревозку.ДатаДоставкиФакт Тогда
					
					ОбъектЗадание.ДатаДоставкиФакт = СтрокаЗадание.ДатаДоставкиКонечная;
					НужноЗаписать = Истина;
				КонецЕсли;
				
				Если НужноЗаписать Тогда
					Попытка
						
						ОбъектЗадание.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
						Если ОбъектЗадание.Проведен Тогда
							ОбъектЗадание.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						Иначе
							ОбъектЗадание.Записать(РежимЗаписиДокумента.Запись);
						КонецЕсли;
						ОбъектЗадание.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
					
					Исключение
						ОбщегоНазначения.СообщитьОбОшибке("Строка " + Строка(СтрокаЗадание.НомерСтроки) + ": новый статус (или дата доставки) для документа " +  Строка(СтрокаЗадание.ЗаданиеНаПеревозку) + " не были записаны!");
					КонецПопытки;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаНакладные          - таблица значений, содержащая данные для проведения и проверки ТЧ Накладные
//  ТаблицаПоручений          - таблица значений, содержащая данные для проведения и проверки ТЧ ДополнительныеПоручения,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаЗадания, ТаблицаРейсы, Отказ, Заголовок)

	//ДвиженияПоПеревозкам = Движения.ПТЛ_ПланДоставки;
	//ТаблицаДвижений		 = ДвиженияПоПеревозкам.Выгрузить();
	//ТаблицаДвижений.Очистить();
	//  
	//Для Каждого СтрокаТЧ Из ТаблицаРейсы Цикл
	//	мсвЗаданияПоРейсу = ТаблицаЗадания.НайтиСтроки(Новый Структура("Рейс", СтрокаТЧ.Рейс));
	//	
	//	ОбщийВес = 0;
	//	Для каждого СтрокаЗадание Из мсвЗаданияПоРейсу Цикл
	//		ВесВЗадании = СтрокаЗадание.ЗаданиеНаПеревозку.Накладные.Итог("Вес");
	//		ОбщийВес = ОбщийВес + ВесВЗадании;
	//	КонецЦикла;
	//	
	//	Для каждого СтрокаЗадание Из мсвЗаданияПоРейсу Цикл
	//		Движение					= ТаблицаДвижений.Добавить();
	//		Движение.ПланПеревозки		= СтрокаЗадание.ПланПеревозки;
	//		Движение.Рейс				= СтрокаЗадание.Рейс;
	//		Движение.ЗаданиеНаПеревозку	= СтрокаЗадание.ЗаданиеНаПеревозку;
	//		
	//		ВесВЗадании = СтрокаЗадание.ЗаданиеНаПеревозку.Накладные.Итог("Вес");
	//		
	//		Движение.СтоимостьПеревозки	= ?(ОбщийВес = 0, 0, СтрокаТЧ.СтоимостьПеревозки*ВесВЗадании/ОбщийВес);
	//		Движение.ДополнительныеЗатраты = ?(ОбщийВес = 0, 0, СтрокаТЧ.ДополнительныеЗатраты*ВесВЗадании/ОбщийВес);
	//		Движение.Перевозчик	 		= СтрокаТЧ.Перевозчик;
	//		Движение.Автомобиль	 		= СтрокаТЧ.Автомобиль;
	//		Движение.Водитель           = СтрокаТЧ.Водитель;
	//		Движение.Экспедитор         = СтрокаТЧ.Экспедитор;
	//		Движение.ВремяПодачиТС      = СтрокаТЧ.ВремяПодачиТСФакт;
	//		Движение.ВремяВРейсе        = СтрокаТЧ.ВремяВРейсеФакт;
	//		Движение.Километраж         = СтрокаТЧ.КилометражФакт;
	//		Движение.ТипТарифа          = СтрокаТЧ.ТипТарифа;
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//  	
	//ДвиженияПоПеревозкам.мПериод          = Дата;
	//ДвиженияПоПеревозкам.мТаблицаДвижений = ТаблицаДвижений;
	//ДвиженияПоПеревозкам.Записывать		  = Истина;
	//Движения.ПТЛ_ПланДоставки.ВыполнитьДвижения();

		
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
				 		
КонецПроцедуры

Процедура ПроверитьДублиРейсов(Отказ)
	
	Если Маршруты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	СпРейсы = Маршруты.ВыгрузитьКолонку("Рейс");
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПТЛ_ОтчетОВыполненнойПеревозкеМаршруты.Ссылка КАК Отчет,
	               |	ПТЛ_ОтчетОВыполненнойПеревозкеМаршруты.Рейс
	               |ИЗ
	               |	Документ.ПТЛ_ОтчетОВыполненнойПеревозке.Маршруты КАК ПТЛ_ОтчетОВыполненнойПеревозкеМаршруты
	               |ГДЕ
	               |	ПТЛ_ОтчетОВыполненнойПеревозкеМаршруты.Рейс В(&Рейс)
	               |	И НЕ ПТЛ_ОтчетОВыполненнойПеревозкеМаршруты.Ссылка = &Ссылка
	               |	И ПТЛ_ОтчетОВыполненнойПеревозкеМаршруты.Ссылка.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Рейс", СпРейсы);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ОбщегоНазначения.СообщитьОбОшибке("По рейсу " + СокрЛП(Результат.Рейс) + " уже проведен отчет о выполненной перевозке " + СокрЛП(Результат.Отчет), Отказ);
	КонецЦикла;
КонецПроцедуры
