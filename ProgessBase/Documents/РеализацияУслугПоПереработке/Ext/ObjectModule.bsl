Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем УчетнаяПолитикаБух;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(СуммыВРублях = Ложь)

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Номер,
	|	РеализацияУслугПоПереработке.Дата,
	|	РеализацияУслугПоПереработке.ДоговорКонтрагента,
	|	РеализацияУслугПоПереработке.Контрагент КАК Получатель,
	|	РеализацияУслугПоПереработке.Организация КАК Поставщик,
	|	РеализацияУслугПоПереработке.Организация,
	|	РеализацияУслугПоПереработке.СуммаДокумента,
	|	РеализацияУслугПоПереработке.ВалютаДокумента,
	|	РеализацияУслугПоПереработке.УчитыватьНДС,
	|	РеализацияУслугПоПереработке.СуммаВключаетНДС,
	|	РеализацияУслугПоПереработке.КурсВзаиморасчетов,
	|	РеализацияУслугПоПереработке.КратностьВзаиморасчетов
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата);
	Если НЕ ЗначениеЗаполнено(Руководители.РуководительДолжность) Тогда 
		ДолжностьИНазваниеОрганизации = Организация.НаименованиеПолное;
	Иначе 
		ДолжностьИНазваниеОрганизации = Руководители.РуководительДолжность + " " + Организация.НаименованиеПолное;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Исполнитель) И Исполнитель <> Руководители.Руководитель Тогда 
		ЗаместительПоПриказу = "("+ОбщегоНазначения.ФамилияИнициалыФизЛица(Исполнитель) + " " + ИсполнительПоПриказу+")";
	Иначе 
		ЗаместительПоПриказу = Руководители.Руководитель;
	КонецЕсли;

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияУслугПоПереработке");
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст = "
	|ВЫБРАТЬ
	|	1 КАК НомерТЧ,
	|	НомерСтроки КАК НомерСтроки,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	Количество,
	|	ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Продукция КАК РеализацияУслугПоПереработке
	|
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	МИНИМУМ(НомерСтроки) КАК НомерСтроки,
	|	Номенклатура КАК Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|	СУММА(Количество) КАК Количество,
	|	NULL КАК ЕдиницаИзмерения,
	|	Цена,
	|	СУММА(Сумма) КАК Сумма,
	|	СтавкаНДС,
	|	СУММА(СуммаНДС) КАК СуммаНДС,
	|	0 КАК Скидка
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработке
	|
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Цена,
	|	СтавкаНДС
	|УПОРЯДОЧИТЬ ПО НомерТЧ, НомерСтроки";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияУслугПоПереработке_Акт";
	Макет       = ПолучитьМакет("Акт");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = ТаблицаУслуги.Итог("Скидка") > 0;
	
	КоэфКурса = ?( СуммыВРублях, ?(Шапка.КратностьВзаиморасчетов=0,1,Шапка.КурсВзаиморасчетов / Шапка.КратностьВзаиморасчетов), 1);

	// Вывести табличную часть
	Если ЕстьСкидки  Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтроки.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.ТоварНаименование);

		Если СуммыВРублях Тогда
			СуммаТЧ = СтрокаТабличнойЧасти.Сумма * КоэфКурса;
			ОбластьСтроки.Параметры.Сумма = СуммаТЧ;
			ОбластьСтроки.Параметры.Цена  = ?(СтрокаТабличнойЧасти.Количество = 0, СуммаТЧ, Окр(СуммаТЧ / СтрокаТабличнойЧасти.Количество, 2, 1));
		Иначе
			СуммаТЧ = СтрокаТабличнойЧасти.Сумма;
		КонецЕсли;
		Если ЕстьСкидки Тогда
			Скидка = Ценообразование.ПолучитьСуммуСкидки(СуммаТЧ, СтрокаТабличнойЧасти.Скидка);

			ОбластьСтроки.Параметры.Скидка         = Скидка;
			ОбластьСтроки.Параметры.СуммаБезСкидки = ОбщегоНазначения.ФорматСумм(СуммаТЧ + Скидка);

		КонецЕсли;

		ТабДокумент.Вывести(ОбластьСтроки);

	КонецЦикла;

	Если ТаблицаУслуги <> Неопределено Тогда

		Сумма    = ТаблицаУслуги.Итог("Сумма");
		СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
		Если СуммыВРублях Тогда
			Сумма    = Сумма    * КоэфКурса;
			СуммаНДС = СуммаНДС * КоэфКурса;
		КонецЕсли;

	Иначе

		Сумма    = 0;
		СуммаНДС = 0;

	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	Если Шапка.УчитыватьНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЕсли;

	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	Если СуммыВРублях Тогда
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
		                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, мВалютаРегламентированногоУчета);
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, мВалютаРегламентированногоУчета);
	Иначе
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
		                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ДолжностьИНазваниеОрганизации 	= ДолжностьИНазваниеОрганизации;
	ОбластьМакета.Параметры.ЗаместительПоПриказу 			= ЗаместительПоПриказу;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Акт" Тогда
		ТабДокумент = ПечатьАктаОбОказанииУслуг(Ложь);
		
	ИначеЕсли ИмяМакета = "АктРуб" Тогда
		ТабДокумент = ПечатьАктаОбОказанииУслуг(Истина);
		
	ИначеЕсли ИмяМакета = "СправкаРасчетВал" тогда

		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура;
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СтруктПечатныхФорм.Вставить( "Акт",    "Акт об оказании услуг");
	Иначе
		СтруктПечатныхФорм.Вставить( "Акт",    "Акт об оказании услуг (вал.)");
		СтруктПечатныхФорм.Вставить( "АктРуб", "Акт об оказании услуг (руб.)");
	КонецЕсли;
	СтруктПечатныхФорм.Вставить( "СправкаРасчетВал", "Справка-расчет ""Рублевая сумма документа в валюте""");
	
	Возврат СтруктПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

//Процедура выполняет заполнение табличной части неполученными ТМЦ (резервом) по заказу покупателя.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ТабличнаяЧасть, ДокументОснование) Экспорт

	ТабОстатков = УправлениеЗаказами.ОстаткиТоваровПоЗаказуПокупателя( Сделка, ДоговорКонтрагента, ?(ЭтоНовый(),?(Дата = '00010101000000',ТекущаяДата(),КонецДня(Дата)), Дата), Перечисления.СтатусыПартийТоваров.ВПереработку);
	Для Каждого Выборка Из ТабОстатков Цикл
		
		НоваяСтрока = Продукция.Добавить();
		НоваяСтрока.Номенклатура 			   	= Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры 	= Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения 			= Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент 				= Выборка.Коэффициент;
		НоваяСтрока.Количество   				= Выборка.КолОстаток * Выборка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / Выборка.Коэффициент;
		НоваяСтрока.СтавкаНДС    				= Выборка.СтавкаНДС;
		НоваяСтрока.Цена 						= Выборка.Цена;
		НоваяСтрока.ПроцентСкидкиНаценки		= Выборка.ПроцентСкидкиНаценки;
			
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЭтотОбъект, Ложь);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Продукция", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя()

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткамУпр() Экспорт

	ТабОстатков = УправлениеЗаказами.ОстаткиУслугПоЗаказуПокупателя( Сделка, ДоговорКонтрагента, Дата, Перечисления.СтатусыПартийТоваров.ВПереработку);
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Для Каждого Выборка Из ТабОстатков Цикл
		
		СтрокаУслуг = Услуги.Добавить();
		СтрокаУслуг.Номенклатура = Выборка.Номенклатура;
		СтрокаУслуг.Количество   = Выборка.КолОстаток;
		СтрокаУслуг.СтавкаНДС    = Выборка.СтавкаНДС;
        СтрокаУслуг.Содержание   = СокрЛП(Выборка.Содержание);
		СтрокаУслуг.Сумма = Выборка.СуммаВзаиморасчетов;
			
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти ( СтрокаУслуг, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		СтрокаУслуг.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(
			СтрокаУслуг.Сумма,
			ЭтотОбъект.УчитыватьНДС,
			ЭтотОбъект.СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС));
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаУслуг, "Услуги", ЭтотОбъект.ОтражатьВБухгалтерскомУчете, ЭтотОбъект.ОтражатьВНалоговомУчете);
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьУслугиПоОстаткам()

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки.
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом", 	СчетаУчета.СчетРасчетовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансовПокупателя);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ТАБЛИЧНОЙ ЧАСТИ "ИСПОЛЬЗУЕМЫЕ МАТЕРИАЛЫ"

// Процедура формирует временную таблицу РеализацияУслуг.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//
Процедура СформироватьВременнуюТаблицуРеализацияУслуг(
	МенеджерВременныхТаблиц
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РеализацияУслуг.Номенклатура,
	|	РеализацияУслуг.ХарактеристикаНоменклатуры,
	|	РеализацияУслуг.СерияНоменклатуры,
	|	(
	|	СУММА(
	|		РеализацияУслуг.Количество * 
	|		РеализацияУслуг.Коэффициент /
	|		РеализацияУслуг.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|	) /
	|	СУММА(
	|		ЕСТЬNULL(ВыпускПродукции.КоличествоОборот, 1)
	|		)
	|	) КАК Коэффициент
	|	
	|ПОМЕСТИТЬ РеализацияУслуг
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Продукция КАК РеализацияУслуг
	|			
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ВыпускПродукции%СуффиксУчета%.Обороты(&НачГраница, &КонГраница, , 
	| 			Заказ = &Заказ
	| 			И ДокументВыпуска ССЫЛКА Документ.ОтчетПроизводстваЗаСмену
	| 		) КАК ВыпускПродукции
	|	ПО 
	|		РеализацияУслуг.Номенклатура = ВыпускПродукции.Продукция
	|		И РеализацияУслуг.ХарактеристикаНоменклатуры = ВыпускПродукции.ХарактеристикаПродукции
	|		И РеализацияУслуг.СерияНоменклатуры = ВыпускПродукции.СерияПродукции
	|			
	|ГДЕ
	|	РеализацияУслуг.Ссылка = &ДокументСсылка
	|	
	|СГРУППИРОВАТЬ ПО
	|	РеализацияУслуг.Номенклатура,
	|	РеализацияУслуг.ХарактеристикаНоменклатуры,
	|	РеализацияУслуг.СерияНоменклатуры
	|";
	
	СуффиксУчета = ?(ОтражатьВУправленческомУчете, "", "БухгалтерскийУчет");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%СуффиксУчета%", СуффиксУчета);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	КонДата = ?(ЭтоНовый(), КонецДня(Дата), Дата);
	
	Запрос.УстановитьПараметр("НачГраница", Новый Граница(Сделка.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Заказ",  Сделка);
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Выполнить();
	
КонецПроцедуры // СформироватьВременнуюТаблицуРеализацияУслуг()

// Функция формирует запрос по расходу материалов на выпуск продукции.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//
Функция СформироватьЗапросПоРасходуМатериаловНаВыпуск(
	МенеджерВременныхТаблиц
	)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТоварыПолученные.Номенклатура,
	|	ТоварыПолученные.ХарактеристикаНоменклатуры,
	|	ТоварыПолученные.СерияНоменклатуры,
	|	ТоварыПолученные.КоличествоОстаток КАК КоличествоОстаток,
	|	ТоварыПолученные.СуммаВзаиморасчетовОстаток КАК СуммаОстаток
	|
	|ПОМЕСТИТЬ ТоварыПолученные
	|ИЗ
	|	РегистрНакопления.ТоварыПолученные.Остатки(&КонГраница,
	|		Сделка = &Заказ 
	|		И СтатусПолучения = &СтатусВПереработку
	|	) КАК ТоварыПолученные
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты,
	|	МАКСИМУМ(РеализацияУслуг.Коэффициент),
	|	СУММА(ЗатратыНаВыпуск.Количество *
	|		ВЫБОР КОГДА РеализацияУслуг.Коэффициент > 1 ТОГДА
	|			1
	|		ИНАЧЕ
	|			РеализацияУслуг.Коэффициент
	|		КОНЕЦ
	|	) КАК Количество
	|
	|ПОМЕСТИТЬ ЗатратыНаВыпуск
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукции%СуффиксУчета% КАК ЗатратыНаВыпуск
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РеализацияУслуг
	|	ПО
	|		ЗатратыНаВыпуск.Продукция = РеализацияУслуг.Номенклатура
	|		И ЗатратыНаВыпуск.ХарактеристикаПродукции = РеализацияУслуг.ХарактеристикаНоменклатуры
	|		И ЗатратыНаВыпуск.СерияПродукции = РеализацияУслуг.СерияНоменклатуры
	|			
	|ГДЕ
	|	ЗатратыНаВыпуск.Период МЕЖДУ &НачДата И &КонДата
	|	И ЗатратыНаВыпуск.СтатьяЗатрат.СтатусМатериальныхЗатрат = &ПринятыеВПереработку
	|	И ЗатратыНаВыпуск.КодОперации = &ПрямыеЗатраты
	|	И ЗатратыНаВыпуск.Заказ = &Заказ
	|			
	|СГРУППИРОВАТЬ ПО
	|	ЗатратыНаВыпуск.Затрата,
	|	ЗатратыНаВыпуск.ХарактеристикаЗатраты,
	|	ЗатратыНаВыпуск.СерияЗатраты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Затрата,
	|	ХарактеристикаЗатраты,
	|	СерияЗатраты
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПолученные.Номенклатура,
	|	ТоварыПолученные.ХарактеристикаНоменклатуры,
	|	ТоварыПолученные.СерияНоменклатуры,
	|	ТоварыПолученные.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ТоварыПолученные.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмеренияМест,
	|	ТоварыПолученные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	
	|	ЕСТЬNULL(ЗатратыНаВыпуск.Количество, 0) КАК КоличествоРасход,
	|	ТоварыПолученные.КоличествоОстаток КАК КоличествоОстаток,
	|	ТоварыПолученные.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	ТоварыПолученные КАК ТоварыПолученные
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ЗатратыНаВыпуск КАК ЗатратыНаВыпуск
	|	ПО 
	|		ТоварыПолученные.Номенклатура = ЗатратыНаВыпуск.Затрата
	|		И ТоварыПолученные.ХарактеристикаНоменклатуры = ЗатратыНаВыпуск.ХарактеристикаЗатраты
	|		И ТоварыПолученные.СерияНоменклатуры = ЗатратыНаВыпуск.СерияЗатраты
	|ГДЕ
	|	ЕСТЬNULL(ЗатратыНаВыпуск.Количество, 0) > 0
	|";
	
	СуффиксУчета = ?(ОтражатьВУправленческомУчете, "", "БухгалтерскийУчет");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%СуффиксУчета%", СуффиксУчета);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	КонДата = ?(ЭтоНовый(), КонецДня(Дата), Дата);
	
	Запрос.УстановитьПараметр("НачДата", Сделка.Дата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("НачГраница", Новый Граница(Сделка.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СтатусВПереработку", Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку);
	Запрос.УстановитьПараметр("ПринятыеВПереработку", Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку);
	Запрос.УстановитьПараметр("ПрямыеЗатраты", Перечисления.КодыОперацийЗатратыНаВыпускПродукции.ПрямыеЗатраты);
	Запрос.УстановитьПараметр("Заказ",  Сделка);
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапросПоРасходуМатериаловНаВыпуск()

// Процедура заполняет табличную часть "Использованные материалы" данными расхода на выпуск.
//
Процедура ЗаполнитьМатериалыПоРасходуНаВыпуск() Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СформироватьВременнуюТаблицуРеализацияУслуг(МенеджерВременныхТаблиц);
	Запрос = СформироватьЗапросПоРасходуМатериаловНаВыпуск(МенеджерВременныхТаблиц);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Количество = Мин(Выборка.КоличествоОстаток, Выборка.КоличествоРасход);
		Если Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ИспользованныеМатериалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.Количество = Количество;
		Если Выборка.КоличествоОстаток <> 0 Тогда
			НоваяСтрока.Сумма = Окр(Количество * Выборка.СуммаОстаток / Выборка.КоличествоОстаток, 2, 1);
			НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / Количество, 2, 1);
		КонецЕсли;
			
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(
			НоваяСтрока, 
			"ИспользованныеМатериалы", 
			ОтражатьВБухгалтерскомУчете, 
			Ложь // ЗаполнятьНУ
		);
		
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьМатериалыПоРасходуНаВыпуск()

// Процедура заполняет материалы по спецификациям.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если ИспользованныеМатериалы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Использованные материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		ИспользованныеМатериалы.Очистить();
	КонецЕсли;

	ТабличнаяЧастьМатериалы = ИспользованныеМатериалы.Выгрузить();
	ТабличнаяЧастьПродукция = Продукция.Выгрузить();
	
	СтруктураДопКолонок = Новый Структура();
	МассивВидовВоспроизводства = Новый Массив;
	МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.ПринятыеВПереработку);
	Отбор = Новый Структура("ВидВоспроизводства", МассивВидовВоспроизводства);

	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата, 0);

	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент", "Количество");
	
	ИспользованныеМатериалы.Загрузить(ТабличнаяЧастьМатериалы);
		
	Для Каждого СтрокаТабличнойЧасти Из ИспользованныеМатериалы Цикл
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(
			СтрокаТабличнойЧасти, 
			"ИспользованныеМатериалы", 
			ОтражатьВБухгалтерскомУчете, 
			ОтражатьВНалоговомУчете
		);
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполняет таблицу скидок для проведения.
//
// Параметры: 
//  ТаблицаТоваров          - таблица значений по товарам,
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров,СтруктураШапкиДокумента)
	
	МетаданныеДокумента = Метаданные();
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоДок, 2),
			ВалютаДокумента, 
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента,
			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента,
			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета
		);
		
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		
		// Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		СуммаСоСкидкамиРеально = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаВал,
			ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента,
			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента,
			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета
		);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		
		Если Разница <> 0
			И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ТаблицаДвижений;
	
КонецФункции // ПодготовитьТаблицуСкидок()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Продукция",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС" .
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр", 			    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * ?(ЗначениеЗаполнено(СтрокаТаблицы.Количество), СтрокаТаблицы.Количество, 0);
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
												УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;		
		
        СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		СтрокаТаблицы.НДСУпр   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		Стоимость = СтрокаТаблицы.НДС + СтрокаТаблицы.СуммаБезНДС;
								 
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаРегл",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;

		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
			СтрокаТаблицы.СуммаРегл = Сумма + НДС
		Иначе
			Если СуммаВключаетНДС Тогда
				СуммаДок = СтрокаТаблицы.Сумма;
			Иначе
				СуммаДок = СтрокаТаблицы.Сумма + СтрокаТаблицы.НДС;
			КонецЕсли;
			
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 мВалютаРегламентированногоУчета,
			                                 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыРегл,
			                                 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыРегл);
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НДС, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 мВалютаРегламентированногоУчета,
			                                 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыРегл,
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета, СтруктураШапкиДокумента.КратностьВалютыРегл);
											 
			СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту( СуммаДок, СтруктураШапкиДокумента.ВалютаДокумента,
											мВалютаРегламентированногоУчета,
											СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыРегл,
											СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыРегл);
								 
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Продукция",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС" ".
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр", 			    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		Если СуммаВключаетНДС Тогда
			СуммаСНДС = СтрокаТаблицы.Сумма;
		Иначе
			СуммаСНДС = СтрокаТаблицы.Сумма + СтрокаТаблицы.НДС;
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
												УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;		

        СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

								  
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		

		// Суммы пересчитаем в валюту упр. учета
												 
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		Стоимость = СтрокаТаблицы.НДС + СтрокаТаблицы.СуммаБезНДС;
								 
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

Процедура ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента)
    ТаблицаТоваров.Колонки.Добавить("СуммаРегл", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СуммаВключаетНДС Тогда
			СуммаСНДС = СтрокаТаблицы.Сумма;
		Иначе
			СуммаСНДС = СтрокаТаблицы.Сумма + СтрокаТаблицы.НДС;
		КонецЕсли;

		 СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту( СуммаСНДС, ВалютаДокумента,
					мВалютаРегламентированногоУчета,
					СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыРегл,
					СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыРегл);

    КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров)
ДокументВВалютеРасчетов = (СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",					Ссылка);
	Запрос.УстановитьПараметр("Курс",					СтруктураПараметров.КурсДокумента);
	Запрос.УстановитьПараметр("Кратность",				СтруктураПараметров.КратностьДокумента);
	Запрос.УстановитьПараметр("РасчетыВУсловныхЕдиницах",СтруктураПараметров.РасчетыВУсловныхЕдиницах);
	Запрос.УстановитьПараметр("ДокументВВалютеРасчетов",ДокументВВалютеРасчетов);
	Запрос.УстановитьПараметр("КурсВзаиморасчетов",		?(СтруктураПараметров.РасчетыВУсловныхЕдиницах,СтруктураПараметров.КурсВзаиморасчетов,1));
	Запрос.УстановитьПараметр("КратностьВзаиморасчетов",?(СтруктураПараметров.РасчетыВУсловныхЕдиницах,СтруктураПараметров.КратностьВзаиморасчетов,1));
	Запрос.УстановитьПараметр("ВидЦенностиУслуга"	   ,Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
	Запрос.УстановитьПараметр("СчетНДС"					,ПланыСчетов.Хозрасчетный.Продажи_НДС.Ссылка); 
	Запрос.УстановитьПараметр("СуммаВключаетНДС"		,СуммаВключаетНДС); 
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&ВидЦенностиУслуга КАК ВидЦенности,
	               |	ТаблицаТоваров.Номенклатура КАК номенклатура,
	               |	ТаблицаТоваров.СчетДоходовБУ КАК КоррСчет,
	               |	ТаблицаТоваров.СубконтоБУ КАК СубконтоБУ,
	               |	ТаблицаТоваров.СчетДоходовНУ КАК СчетУчетаНУ,
	               |	ТаблицаТоваров.СубконтоНУ КАК СубконтоНУ,
	               |	&СчетНДС КАК СчетНДС,
	               |	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	               |	ВЫБОР КОГДА &СуммаВключаетНДС = ИСТИНА ТОГДА СУММА(ТаблицаТоваров.Сумма * &Курс / &Кратность) ИНАЧЕ СУММА((ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС) * &Курс / &Кратность) КОНЕЦ КАК СуммаСНДС,
	               |	СУММА(ТаблицаТоваров.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	               |	ВЫБОР КОГДА &ДокументВВалютеРасчетов = ИСТИНА И &СуммаВключаетНДС = ИСТИНА ТОГДА 
			   	   |		СУММА(ТаблицаТоваров.Сумма) 
			   	   |	КОГДА &ДокументВВалютеРасчетов = ИСТИНА И &СуммаВключаетНДС = ЛОЖЬ ТОГДА 
			       |		СУММА(ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС) 
			       |	КОГДА &ДокументВВалютеРасчетов = ЛОЖЬ И &СуммаВключаетНДС = ИСТИНА ТОГДА 
			       |		СУММА(ТаблицаТоваров.Сумма * &КратностьВзаиморасчетов / &КурсВзаиморасчетов) 
			       |	КОГДА &ДокументВВалютеРасчетов = ЛОЖЬ И &СуммаВключаетНДС = ЛОЖЬ ТОГДА 
			       |		СУММА((ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС) * &КратностьВзаиморасчетов / &КурсВзаиморасчетов) 
			       |	ИНАЧЕ 0 КОНЕЦ КАК СуммаВзаиморасчетов
	               |ИЗ
	               |	Документ.РеализацияУслугПоПереработке.Услуги КАК ТаблицаТоваров
	               |
	               |ГДЕ
	               |	ТаблицаТоваров.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаТоваров.Номенклатура,
	               |	ТаблицаТоваров.СчетДоходовБУ,
	               |	ТаблицаТоваров.СубконтоБУ,
	               |	ТаблицаТоваров.СчетДоходовНУ,
	               |	ТаблицаТоваров.СубконтоНУ,
	               |	ТаблицаТоваров.СтавкаНДС
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	&ВидЦенностиУслуга,
	               |	ТаблицаТоваров.Номенклатура,
	               |	ТаблицаТоваров.СчетДоходовБУ,
	               |	ТаблицаТоваров.СубконтоБУ,
	               |	ТаблицаТоваров.СчетДоходовНУ,
	               |	ТаблицаТоваров.СубконтоНУ,
	               |	&СчетНДС,
	               |	ТаблицаТоваров.СтавкаНДС,
	               |	ВЫБОР КОГДА &СуммаВключаетНДС = ИСТИНА ТОГДА СУММА(ТаблицаТоваров.Сумма * &Курс / &Кратность) ИНАЧЕ СУММА((ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС) * &Курс / &Кратность) КОНЕЦ,
	               |	СУММА(ТаблицаТоваров.СуммаНДС * &Курс / &Кратность),
	               |	ВЫБОР КОГДА &ДокументВВалютеРасчетов = ИСТИНА И &СуммаВключаетНДС = ИСТИНА ТОГДА 
			   	   |		СУММА(ТаблицаТоваров.Сумма) 
			       |	КОГДА &ДокументВВалютеРасчетов = ИСТИНА И &СуммаВключаетНДС = ЛОЖЬ ТОГДА 
			       |		СУММА(ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС) 
			       |	КОГДА &ДокументВВалютеРасчетов = ЛОЖЬ И &СуммаВключаетНДС = ИСТИНА ТОГДА 
			       |		СУММА(ТаблицаТоваров.Сумма * &КратностьВзаиморасчетов / &КурсВзаиморасчетов) 
			       |	КОГДА &ДокументВВалютеРасчетов = ЛОЖЬ И &СуммаВключаетНДС = ЛОЖЬ ТОГДА 
			       |		СУММА((ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС) * &КратностьВзаиморасчетов / &КурсВзаиморасчетов) 
			       |ИНАЧЕ 0 КОНЕЦ
	               |ИЗ
	               |	Документ.РеализацияУслугПоПереработке.Продукция КАК ТаблицаТоваров
	               |
	               |ГДЕ
	               |	ТаблицаТоваров.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаТоваров.Номенклатура,
	               |	ТаблицаТоваров.СчетДоходовБУ,
	               |	ТаблицаТоваров.СубконтоБУ,
	               |	ТаблицаТоваров.СчетДоходовНУ,
	               |	ТаблицаТоваров.СубконтоНУ,
	               |	ТаблицаТоваров.СтавкаНДС
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СтавкаНДС";
	
	Результат = Запрос.Выполнить();
	ТаблицаДвижений = Результат.Выгрузить();
	
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя"		, Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1");
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2");
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3");
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС1");
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС2");
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС3");
	Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1");
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2");
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3");
	КонецЕсли;
	Для Каждого Движение Из ТаблицаДвижений Цикл
		КоррСчет = Движение["КоррСчет"];
		Если КоррСчет.ВидыСубконто.Количество()>0 тогда
			ВидСубк = КоррСчет.ВидыСубконто[0].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["СубконтоБУ"])) Тогда
				Движение["КоррСубконто1"] = Движение["СубконтоБУ"];
			Конецесли;
		КонецЕсли;
		Если КоррСчет.ВидыСубконто.Количество()>1 тогда
			ВидСубк = КоррСчет.ВидыСубконто[1].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["СтавкаНДС"])) Тогда
				Движение["КоррСубконто2"] = Движение["СтавкаНДС"];
			Конецесли;
		КонецЕсли;
		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
			СчетНУ = Движение["СчетУчетаНУ"];
			Если СчетНУ.ВидыСубконто.Количество()>0 тогда
				ВидСубк = СчетНУ.ВидыСубконто[0].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["СубконтоНУ"])) Тогда
					Движение["СубконтоНУ1"] = Движение["СубконтоНУ"];
				Конецесли;
			КонецЕсли;
			Если СчетНУ.ВидыСубконто.Количество()>1 тогда
				ВидСубк = СчетНУ.ВидыСубконто[1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["Номенклатура"])) Тогда
					Движение["СубконтоНУ2"] = Движение["Номенклатура"];
				Конецесли;
			КонецЕсли;
		КонецЕсли;
		СчетНДС = Движение["СчетНДС"];
		Если СчетНДС.ВидыСубконто.Количество()>0 тогда
			ВидСубк = СчетНДС.ВидыСубконто[0].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["СубконтоБУ"])) Тогда
				Движение["СубконтоНДС1"] = Движение["СубконтоБУ"];
			Конецесли;
		КонецЕсли;
		Если СчетНДС.ВидыСубконто.Количество()>1 тогда
			ВидСубк = СчетНДС.ВидыСубконто[1].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["СтавкаНДС"])) Тогда
				Движение["СубконтоНДС2"] = Движение["СтавкаНДС"];
			Конецесли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДвижений.Колонки.ЗаказПокупателя.Имя = "Сделка";
	
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	Иначе //.ПоСчетам или .ПоЗаказам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
КонецФункции

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Сделка");

	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Продукция".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Продукция
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПродукция(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Продукция", ТаблицаПоТоварам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Продукция", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПродукция()

// Проверяет правильность заполнения строк табличной части "Продукция".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Продукция
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Сумма, Содержание");
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПродукция()

// Проверяет правильность заполнения строк табличной части "ИспользованныеМатериалы".
//
// Параметры: 
//  ТаблицаПоМатериалам     - таблица значений, содержащая данные для проведения и проверки ТЧ ИспользованныеМатериалы
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиИспользованныеМатериалы(ТаблицаПоМатериалам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Вызовем общую процедуру проверки
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ИспользованныеМатериалы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ИспользованныеМатериалы", ТаблицаПоМатериалам, Отказ, Заголовок);
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Продукция
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоМатериалам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
	                          Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
	                                                    Отказ, Заголовок, СтруктураШапкиДокумента);

	ДвиженияПоРегистрамРеглУСН(РежимПроведения, СтруктураШапкиДокумента, 
	                          Отказ, Заголовок);

	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
							  Отказ, Заголовок);
							  
	СписатьИспользованныеМатериалы(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок, РежимПроведения);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураТаблицыВыручки = Новый структура("НомерСтроки, Номенклатура, ВидЦенности, Ценность, Партия, СчетУчетаНДСПоРеализации,СчетУчетаБУ, СчетДоходовБУ, СубконтоБУ, 
												  |СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал,Комиссионный,Комитент,ДоговорКомиссии,СчетРасчетовПоАвансамСКомитентом,СчетРасчетовСКомитентом,ВалютаРасчетовСКомитентом,СуммаСписания, Количество");

		//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
		
		ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам, СтруктураТаблицыВыручки, , Истина);
			
		ТаблицаВыручки.ЗаполнитьЗначения(Ложь, "Комиссионный");
		
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаВыручки, Отказ);
	КонецЕсли;
	
	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
		ЭтотОбъект,
		Дата,
		СтруктураШапкиДокумента.Организация,
		ОтражатьВУправленческомУчете,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоМатериалам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам,
	                          Отказ, Заголовок);
							  
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата) Тогда
		Движения.Хозрасчетный.Записать(Ложь);
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			Движения.Налоговый.Записать(Ложь);
		КонецЕсли;
		УправлениеЗапасамиРасширеннаяАналитика.СформироватьДвиженияПоРеализацииУслугПоПереработке(СтруктураШапкиДокумента, ТаблицаПоМатериалам);
	КонецЕсли;	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура списывае израсходованные материалы из резерва в случае
// вида операции - "Переработка"
//
Процедура СписатьИспользованныеМатериалы(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок, РежимПроведения)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете ИЛИ ИспользованныеМатериалы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Контроль остатков товара
	ПроцедурыКонтроляОстатков.ТоварыПолученныеКонтрольОстатков("ИспользованныеМатериалы", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку, Отказ, Заголовок, РежимПроведения);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений = Движения.ТоварыПолученные;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТЧ Из ТаблицаПоМатериалам Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры 		   = СтрокаТЧ.СерияНоменклатуры;
		НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
		НоваяСтрока.СуммаВзаиморасчетов        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
													СтрокаТЧ.Сумма,
													ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента,
													КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента,
													КратностьВзаиморасчетов);
		
	КонецЦикла;
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
    ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
    ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВПереработку,"СтатусПолучения");

	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	НаборДвижений.ВыполнитьРасход();
	
КонецПроцедуры // СписатьИспользованныеМатериалы()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
	                          Отказ, Заголовок)
							  
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли; // Если ОтражатьВУправленческомУчете

   	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		                                              мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		                                              ВидДвиженияНакопления.Приход, Отказ, Заголовок);


	// ТОВАРЫ ПО РЕГИСТРУ Продажи.
	НаборДвижений = Движения.Продажи;

	Если Не Отказ Тогда
	
		ТаблицаПродажиТовары = ТаблицаПоТоварам.Скопировать();
		ТаблицаПродажиТовары.Колонки.НДС.Имя    = "НДСВрем";
		ТаблицаПродажиТовары.Колонки.НДСУпр.Имя = "НДС";
							
		ТаблицаПродажиУслуги = ТаблицаПоУслугам.Скопировать();
		ТаблицаПродажиУслуги.Колонки.НДС.Имя    = "НДСВрем";
		ТаблицаПродажиУслуги.Колонки.НДСУпр.Имя = "НДС";
	
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			ТаблицаДвиженийТовары = ТаблицаДвижений.Скопировать();
			ТаблицаДвиженийУслуги = ТаблицаДвижений.Скопировать();
						
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПродажиТовары, ТаблицаДвиженийТовары, Проект, Дата, "Продажи");
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПродажиУслуги, ТаблицаДвиженийУслуги, Проект, Дата, "Продажи");
						
			// Вставляем уже подготовленные таблицы движений
			ТаблицыДанныхДокумента = Новый Структура;
			ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам", ТаблицаДвиженийТовары);
			ТаблицыДанныхДокумента.Вставить("ТаблицаПоУслугам", ТаблицаДвиженийУслуги);
			
		Иначе

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПродажиТовары);
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПродажиУслуги);
							
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
		КонецЕсли;
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Сделка);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПродажи",    Ссылка);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, Неопределено, ТаблицыДанныхДокумента, Дата);

	КонецЕсли;

	// Если в реквизите Заказ указан внешний заказ покупателя, то проводится 
	// по регистру ЗаказыПокупателей
	НаборДвижений = Движения.ЗаказыПокупателей;
	
	// Проверка остатков
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Продукция", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Услуги",    СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

	Если Не Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Сделка);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВПереработку);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	// ПО РЕГИСТРУ ПредоставленныеСкидки.
	НаборДвижений = Движения.ПредоставленныеСкидки;
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументСкидки");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ПолучательСкидки");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура формирует движения по списанию давальческих материалов.
//
Процедура ДвиженияПоТабличнойЧастиИспользованныеМатериалыРегл(Проводки, ТаблицаПоМатериалам, СтруктураШапкиДокумента)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаТЧ Из ТаблицаПоМатериалам Цикл

		Если СтрокаТЧ.СчетУчетаБУ.Забалансовый  Тогда
			
			Проводка = Проводки.Добавить();
			Проводка.Активность = Истина;
			Проводка.Период = Дата;
			
			Проводка.Организация = Организация;
			Проводка.КоличествоКт = СтрокаТЧ.Количество;
			
			Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
				Проводка.Сумма = СтрокаТЧ.Сумма;
			Иначе
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Сумма, ВалютаДокумента,
					мВалютаРегламентированногоУчета,
					СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыРегл,
					СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыРегл
				);
			КонецЕсли;

			Проводка.СчетКт = СтрокаТЧ.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(СтрокаТЧ.СчетУчетаБУ, Проводка.СубконтоКт, "Контрагенты", Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаТЧ.СчетУчетаБУ, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ДвиженияПоТабличнойЧастиИспользованныеМатериалы()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоМатериалам, ТаблицаПоУслугам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений по регистру "Учет продаж и себестоимости".
	РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам
	);
	РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
		СтруктураШапкиДокумента,
		ТаблицаПоУслугам
	);

	ДатаДока   = Дата;
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;

	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		УчетнаяПолитика = Неопределено;
	Иначе
		УчетнаяПолитика = УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС;
	КонецЕсли;

	ВыборкаПоТоварамБУ = ТаблицаПоТоварам.Скопировать();
	ВыборкаПоТоварамНУ = ТаблицаПоТоварам.Скопировать();
	
	ВыборкаПоТоварамБУ.Свернуть("СчетДоходовБУ,СубконтоБУ,СчетРасходовБУ, СтавкаНДС", "СуммаРегл,СуммаВал,НДС");

	Для каждого СтрокаТЧ Из ВыборкаПоТоварамБУ Цикл

		// Общие для всего доукмента проводки
		// Выручка
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период      = ДатаДока;
		Проводка.Активность  = Истина;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = СтрокаТЧ.СуммаРегл;

		Проводка.СчетДт                   = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		Проводка.СубконтоДт.Контрагенты   = СтруктураШапкиДокумента.Контрагент;
		Проводка.СубконтоДт.Договоры      = СтруктураШапкиДокумента.ДоговорКонтрагента;
		
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТЧ.СуммаВал;

		КонецЕсли;

		Проводка.СчетКт = СтрокаТЧ.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоБУ);
		Если ТипЗнч(СтрокаТЧ.СубконтоБУ) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТЧ.СтавкаНДС);
		КонецЕсли;
		Проводка.Содержание = "Реализация услуг по переработке";

		Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата) Тогда
			// НДС
			Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТЧ.НДС > 0 Тогда

				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период      = ДатаДока;
				Проводка.Активность  = Истина;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;

				Проводка.СчетДт = ?( БухгалтерскийУчет.ЭтоСубсчет( СтрокаТЧ.СчетДоходовБУ, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы), СтрокаТЧ.СчетРасходовБУ, ПланыСчетов.Хозрасчетный.Продажи_НДС); 
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоБУ);
				Если ТипЗнч(СтрокаТЧ.СубконтоБУ) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СтавкаНДС);
				КонецЕсли;

				Если УчетнаяПолитика = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
					Проводка.СчетКт  = ПланыСчетов.Хозрасчетный.НДС;
					Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
				Иначе
					Проводка.СчетКт  = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", Ссылка);
				КонецЕсли;

				Проводка.Сумма = СтрокаТЧ.НДС;
				Проводка.Содержание = "Реализация услуг по переработке";

			КонецЕсли;
         КонецЕсли;
		
	КонецЦикла;

	ВыборкаПоТоварамБУ = ТаблицаПоУслугам.Скопировать();
	ВыборкаПоТоварамНУ = ТаблицаПоУслугам.Скопировать();
	
	ВыборкаПоТоварамБУ.Свернуть("СчетДоходовБУ,СубконтоБУ, СчетРасходовБУ, СтавкаНДС", "СуммаБУБезНДС,СуммаВал,НДС");
	ВыборкаПоТоварамНУ.Свернуть("СчетДоходовНУ,СубконтоНУ, Номенклатура", "СуммаБУБезНДС,НДС");

	Для каждого СтрокаТЧ из ВыборкаПоТоварамБУ Цикл

		// Выручка
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период                 = ДатаДока;
		Проводка.Активность             = Истина;
		Проводка.Организация            = СтруктураШапкиДокумента.Организация;

		Проводка.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		Проводка.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
		Проводка.СубконтоДт.Договоры    = СтруктураШапкиДокумента.ДоговорКонтрагента;

		Проводка.СчетКт = СтрокаТЧ.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоБУ);
		Если ТипЗнч(СтрокаТЧ.СубконтоБУ) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТЧ.СтавкаНДС);
		КонецЕсли;
		Проводка.Сумма = СтрокаТЧ.СуммаБУБезНДС + СтрокаТЧ.НДС;
		
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТЧ.СуммаВал;

		КонецЕсли;
		Проводка.Содержание = "Реализация услуг по переработке";
		

		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТЧ.НДС > 0 Тогда

			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;

			Проводка.СчетДт = ?( БухгалтерскийУчет.ЭтоСубсчет( СтрокаТЧ.СчетДоходовБУ, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы), СтрокаТЧ.СчетРасходовБУ, ПланыСчетов.Хозрасчетный.Продажи_НДС); 
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоБУ);
			Если ТипЗнч(СтрокаТЧ.СубконтоБУ) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СтавкаНДС);
			КонецЕсли;

			Если УчетнаяПолитика = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
				Проводка.СчетКт  = ПланыСчетов.Хозрасчетный.НДС;
				Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			Иначе
				Проводка.СчетКт  = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", Ссылка);
			КонецЕсли;

			Проводка.Сумма = СтрокаТЧ.НДС;
			Проводка.Содержание = "Реализация услуг по переработке";

		КонецЕсли;

	КонецЦикла;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

		Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата) Тогда
			//Проводку по выручке по НУ при использовании расширенной аналитики формируем документом Расчет себестоимости	
		Иначе	
			Для каждого СтрокаТЧ из ВыборкаПоТоварамНУ Цикл

				// Налоговый учет
				Проводка = ПроводкиНУ.Добавить();
				Проводка.Период      = ДатаДока;
				Проводка.Активность  = Истина;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;

				Проводка.СчетДт      = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				Проводка.СубконтоДт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
				Проводка.СубконтоДт.Контрагенты                = СтруктураШапкиДокумента.Контрагент;
				Проводка.СубконтоДт.Договоры                   = СтруктураШапкиДокумента.ДоговорКонтрагента;

				Проводка.СчетКт      = СтрокаТЧ.СчетДоходовНУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоНУ);
				Если ТипЗнч(СтрокаТЧ.СубконтоНУ) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТЧ.Номенклатура);
				КонецЕсли;

				Проводка.Сумма = СтрокаТЧ.СуммаБУБезНДС;
				Проводка.Содержание = "Реализация услуг по переработке";
				
			КонецЦикла;
        КонецЕсли;
	КонецЕсли;

	ДвиженияПоТабличнойЧастиИспользованныеМатериалыРегл(ПроводкиБУ,ТаблицаПоМатериалам, СтруктураШапкиДокумента);

	// Движения по взаиморасчетам
	СуммаУслугСНДС = Услуги.Итог("Сумма")+?(СтруктураШапкиДокумента.СуммаВключаетНДС,0,Услуги.Итог("СуммаНДС")) +
			Продукция.Итог("Сумма")+?(СтруктураШапкиДокумента.СуммаВключаетНДС,0,Продукция.Итог("СуммаНДС"));
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок,СуммаУслугСНДС, ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента);
	Если СтруктураПараметровЗачетАванса = ложь тогда
	   СуммаАванса = 0;
	Иначе
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметровЗачетАванса);
		СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса,
			ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации);
	КонецЕсли;
	
	Если не ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
		Конецесли;
		БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса,
			мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
	Конецесли;
	
	ПроводкиБУ.Записать(Ложь);
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		ПроводкиНУ.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ВыручкаПоТоварам, Отказ) Экспорт

	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	СчетОтнесенияНДС = УчетНДС.СчетОтнесенияНДС(СтруктураШапкиДокумента);
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата)
		И ВыручкаПоТоварам <> Неопределено 
		И Не ВыручкаПоТоварам.Количество() = 0 Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ВыручкаПоТоварам, , Отказ, СчетОтнесенияНДС, , Истина);
	КонецЕсли;
	
	Если Не ТаблицаПоУслугам.Количество() = 0 Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаПоУслугам, , Отказ, СчетОтнесенияНДС);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДвиженияПоРегистрамРеглУСН(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
											
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция, "ДопустимыйСтатус1");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,                 "Организация");

	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, "КорСчетНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату, "КорСубконтоНУ1");
	
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

		Строка.КорСчетБУ       = СтрокаТЧ.СчетРасходовБУ;
		Строка.КорСчетНУ       = СтрокаТЧ.СчетРасходовНУ;
		Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоБУ;

		Строка.ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
		
		Строка.СуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДС+СтрокаТЧ.НДС;
		Строка.СуммаНДС = СтрокаТЧ.НДС;

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			Строка.ОтражатьВНалоговомУчете = Истина;
			Строка.СчетУчетаНУ = СтрокаТЧ.СчетУчетаБУ;
		КонецЕсли;
		
	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "КорСубконтоБУ3");

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл()

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
											Отказ, Заголовок);
							  
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;

	// Если резервирование под заказ - заказ партии
	ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказПартии");

	// Заказ, на который списывается
	ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказСписания");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения( Перечисления.КодыОперацийПартииТоваров.Реализация,        "КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения( Справочники.Качество.Новый, "Качество");
	ТаблицаДвижений.ЗаполнитьЗначения( ДоговорКонтрагента, "ДоговорКонтрагента");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
											
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");

	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиПродукцияУпр(СтруктураПолей)
	
	СтруктураПолей.Вставить("Цена", "Цена");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиПродукцияРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетДоходовБУ",  "СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоБУ"   ,  "СубконтоБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ",  "СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоНУ"   ,  "СубконтоНУ");
	СтруктураПолей.Вставить("СчетУчетаБУ"  ,  "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"  ,  "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетРасходовБУ", "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетРасходовНУ", "СчетРасходовНУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Не Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			#Если Клиент Тогда
			Предупреждение("Данный документ можно вводить только на основании заказа покупателя на переработку дав. сырья");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		
		ОтражатьВБухгалтерскомУчете = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете     = Основание.ОтражатьВНалоговомУчете;

		Сделка = Основание;
		Если Основание.Проведен Тогда
			// Заполним табличные части неполученными ТМЦ (резервом) по заказу покупателя.
			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(Продукция, Основание);
			ЗаполнитьУслугиПоОстаткамУпр();
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке") Тогда
		
		// Заполнение шапки
		ВалютаДокумента                = Основание.ВалютаДокумента;
		КратностьВзаиморасчетов        = Основание.КратностьВзаиморасчетов;
		ОтражатьВБухгалтерскомУчете    = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете        = Основание.ОтражатьВНалоговомУчете;
		ОтражатьВУправленческомУчете   = Основание.ОтражатьВУправленческомУчете;
		Подразделение                  = Основание.Подразделение;
		СуммаВключаетНДС               = Основание.СуммаВключаетНДС;
		СуммаДокумента                 = Основание.СуммаДокумента;
		СчетУчетаРасчетовПоАвансам     = Основание.СчетУчетаРасчетовПоАвансам;
		СчетУчетаРасчетовСКонтрагентом = Основание.СчетУчетаРасчетовСКонтрагентом;
		УчитыватьНДС                   = Основание.УчитыватьНДС;
		
		Контрагент  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации( Основание.Организация);
		Организация = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту( Основание.Контрагент);
		
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
		
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты( ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		КурсДокумента           = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьДокумента      = СтруктураКурсаВзаиморасчетов.Кратность;
		ТипЦен                  = ДоговорКонтрагента.ТипЦен;
		
		Для Каждого ТекСтрока Из Основание.Товары Цикл
			
			НоваяСтрока = Продукция.Добавить();
			
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрока.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрока.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрока.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрока.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрока.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрока.Номенклатура;
			НоваяСтрока.Сумма                      = ТекСтрока.Сумма;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                       = ТекСтрока.Цена;
			НоваяСтрока.Спецификация               = ТекСтрока.Спецификация;       
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "Продукция", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Реализация"); 

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаИспользованныеМатериалы Из Основание.ИспользованныеМатериалы Цикл
			
			НоваяСтрока = ИспользованныеМатериалы.Добавить();
			
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаИспользованныеМатериалы.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаИспользованныеМатериалы.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаИспользованныеМатериалы.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаИспользованныеМатериалы.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаИспользованныеМатериалы.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрокаИспользованныеМатериалы.Номенклатура;
			НоваяСтрока.Сумма                      = ТекСтрокаИспользованныеМатериалы.Сумма;
			НоваяСтрока.СчетУчетаБУ                = ТекСтрокаИспользованныеМатериалы.СчетУчетаБУ;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаИспользованныеМатериалы.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                       = ТекСтрокаИспользованныеМатериалы.Цена;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "ИспользованныеМатериалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл
			
			НоваяСтрока = Услуги.Добавить();
			
			НоваяСтрока.Количество   = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.Содержание   = ТекСтрокаУслуги.Содержание;
			НоваяСтрока.СтавкаНДС    = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.Сумма        = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаНДС     = ТекСтрокаУслуги.СуммаНДС;
			НоваяСтрока.Цена         = ТекСтрокаУслуги.Цена;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
		КонецЦикла;
		
	КонецЕсли;

	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Продукция);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Продукция") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
															
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ)

	УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонецМесяца(Дата), Организация);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                       , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"                    , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                        , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       			, "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом" 	  , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"        	  , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"                 , "ВидОперации"                                 , "СделкаВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "ВестиПартионныйУчетПоСкладам"                , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей" , "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                      , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Добавим курс валюты регламентированного учета.
	КурсыВалютыРегл = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
	СтруктураШапкиДокумента.Вставить("КурсВалютыРегл", КурсыВалютыРегл.Курс);
	СтруктураШапкиДокумента.Вставить("КратностьВалютыРегл", КурсыВалютыРегл.Кратность);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаИспользованныеМатериалы) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Продукция".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		  , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("КоличествоДок"               , "Количество");
	СтруктураПолей.Вставить("Сумма"                       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                         , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"            , "ЕдиницаИзмерения");
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиПродукцияУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиПродукцияРегл(СтруктураПолей);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Подготовим таблицу услуг для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"                , "Содержание");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		, "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("СчетДоходовБУ"				, "СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоБУ"   				, "СубконтоБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ"				, "СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоНУ"   				, "СубконтоНУ");
	
	СтруктураПолей.Вставить("СчетРасходовБУ"			, "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетРасходовНУ"			, "СчетРасходовНУ");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураСложныхПолей);

	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

	//Подготовим таблицу с данными табличной части "ИспользованныеМатериалы"
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"            , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("Сумма"                       , "Сумма");
	СтруктураПолей.Вставить("СчетУчетаБУ"                 , "СчетУчетаБУ");
	
	РезультатЗапросаИспользованныеМатериалы = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ИспользованныеМатериалы", СтруктураПолей);
	ТаблицаИспользованныеМатериалы = РезультатЗапросаИспользованныеМатериалы.Выгрузить();
	
	//Заполнение счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Продукция", 		 		ТаблицаПоТоварам, 					СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Услуги", 		 			ТаблицаПоУслугам, 					СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ИспользованныеМатериалы", ТаблицаИспользованныеМатериалы, 	СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоМатериалам;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитики(Отказ);
	КонецЕсли;
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Продукция", Отказ);
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоМатериалам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Продукция, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);

	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиПродукция(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиИспользованныеМатериалы(ТаблицаПоМатериалам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Продукция", 		 		ТаблицаПоТоварам, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Услуги", 		 			ТаблицаПоУслугам, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ИспользованныеМатериалы", 	ТаблицаПоМатериалам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, СтруктураШапкиДокумента);
		ДвиженияПоРегистрам(
			РежимПроведения,
			СтруктураШапкиДокумента,
			ТаблицаПоТоварам,
			ТаблицаПоСкидкам,
			ТаблицаПоМатериалам,
			ТаблицаПоУслугам,
			ТаблицаПоВзаиморасчетам,
			ТаблицаПоРасчетам,
			Отказ,
			Заголовок
		);
	КонецЕсли;

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам));
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Услуги, Продукция"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");
