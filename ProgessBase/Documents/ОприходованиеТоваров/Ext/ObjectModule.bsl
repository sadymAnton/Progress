//++ Spl_Апроф 14.01.2015 (k.russkih@a-prof.ru) Добавил реквизит "КП_Отделение" вынес на форму элемента, списка, выбора

Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мРазрешитьНулевыеЦеныВРознице Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Функция осуществляет печать этикеток для позиций ТЧ
//
// Параметры
//  Нет
//
Процедура ПечататьЭтикетки()

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка, "ЦенаВРознице");
	Иначе
		УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка);
	КонецЕсли;

КонецПроцедуры // ПечататьЭтикетки()

// Функция печатает ценники.
//
Функция ПечатьЦенников()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИСТИНА КАК Печать,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	Док.ЦенаВРознице КАК Цена,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ОприходованиеТоваров.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &Док
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков,
	|	Док.ЦенаВРознице	
	|УПОРЯДОЧИТЬ ПО
	|	МИНИМУМ(Док.НомерСтроки)
	|");

	Запрос.УстановитьПараметр("Док", Ссылка);

	ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
	ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	СтруктураПараметров = Новый Структура;
	ПараметрыИзДокумента = Новый Структура();
	ПараметрыИзДокумента.Вставить("Организация", Организация);
	ПараметрыИзДокумента.Вставить("ТипЦен", ТипЦен);
	ПараметрыИзДокумента.Вставить("Валюта", ТипЦен.ВалютаЦены);

	СтруктураПараметров.Вставить("ПараметрыИзДокумента", ПараметрыИзДокумента);

	Если Склад.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
		СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);
	КонецЕсли;

	ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	ФормаПечатьЦенников.Открыть();

КонецФункции // ПечатьЦенников()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОприходованияТоваров()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВидСкладаНТТ",    Перечисления.ВидыСкладов.НТТ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад.Представление КАК Склад,
	|	Основание,
	|	Константы.ВалютаУправленческогоУчета КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК СкладНТТ,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное  КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|		ВЫБОР
	|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА ЦенаВРознице
	|			ИНАЧЕ Цена
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Количество * ЦенаВРознице
	|			ИНАЧЕ Сумма
	|		КОНЕЦ КАК Сумма,
	|		ХарактеристикаНоменклатуры       КАК Характеристика,
	|		СерияНоменклатуры                КАК Серия
	|	)
	|ИЗ
	|	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров,
	|	Константы
	|ГДЕ
	|	ОприходованиеТоваров.Ссылка = &ТекущийДокумент
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	МестВсего = Шапка.Товары.Выгрузить().Итог("КоличествоМест");

	Если МестВсего > 0 Тогда
		ОбластьШапки  = ОбластьШапки  + "Мест";
		ОбластьСтроки = ОбластьСтроки + "Мест";
	Конецесли;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОприходованиеТоваров_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Оприходование товаров");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель              = Шапка.Организация;
	ОбластьМакета.Параметры.ПредставлениеСклада     = Шапка.Склад;
	ОбластьМакета.Параметры.ПредставлениеОснования  = Шапка.Основание;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	СуммаИтого    = 0;

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		СуммаИтого = СуммаИтого + ВыборкаСтрокТовары.Сумма;
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаИтого);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаИтого, ?(Шапка.СкладНТТ, мВалютаРегламентированногоУчета, Шапка.ВалютаДокумента));
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаИтого,  ?(Шапка.СкладНТТ, мВалютаРегламентированногоУчета, Шапка.ВалютаДокумента));
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьОприходованияТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Ведомость" Тогда		
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОприходованияТоваров();
	ИначеЕсли ИмяМакета = "Ценники" Тогда
		ТабДокумент = ПечатьЦенников();
	ИначеЕсли ИмяМакета = "Этикетки" Тогда
		ПечататьЭтикетки();
		Возврат;
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли


// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Ведомость", "Накладная на оприходование товаров");
	СтруктураМакетов.Вставить("Ценники", "Ценники на товары");
	СтруктураМакетов.Вставить("СерийныеНомера",     "Список серийных номеров");
	СтруктураМакетов.Вставить("Этикетки", "Этикетки");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполниение табличной части по инвентаризации Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация Товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(ДокументОснование, СкладЗаполнения = Неопределено) Экспорт

	#Если ВнешнееСоединение Тогда
		Если Товары.Количество() > 0 Тогда
			Товары.Очистить();
		КонецЕсли;
	#КонецЕсли

	ВалютаУпрУчета    = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка",                     Ссылка);
	Запрос.УстановитьПараметр("НТТ", (Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ));
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка",            ДокументОснование);

	// Заполняем выявленными излишками по инвентраизации, с учетом уже выполненного оприходования 
	// по данной инвентаризации. Цены берем из документа инвентраизации. 
	// Если розница – заполняем розничную цену.
	Запрос.Текст =
	"ВЫБРАТЬ
	/// Кунов О.В., 26.06.2014 - 28394
	|	Док.Ссылка,
	///
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Качество,
	|	Док.Коэффициент КАК КоэффициентЕдиницыИнвентаризации,
	|	МАКСИМУМ(Док.Количество - Док.КоличествоУчет) КАК КоличествоОтклонениеИнвентаризации,
	|	СУММА(ВЫБОР
	|			КОГДА ДокОприходование.Количество ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ДокОприходование.Количество
	|		КОНЕЦ) КАК КоличествоОприходованное,
	|	Док.Цена,
	|	ВЫБОР
	|		КОГДА &НТТ
	|			ТОГДА Док.ЦенаВРознице
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаВРознице,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Товары КАК ДокОприходование
	|		ПО Док.Номенклатура = ДокОприходование.Номенклатура
	|			И Док.ХарактеристикаНоменклатуры = ДокОприходование.ХарактеристикаНоменклатуры
	|			И Док.СерияНоменклатуры = ДокОприходование.СерияНоменклатуры
	|			И Док.Ссылка.Склад = ДокОприходование.Ссылка.Склад
	|			И (ДокОприходование.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка)
	|			И (ДокОприходование.Ссылка.Проведен)
	|			И (ДокОприходование.Ссылка <> &ДокументСсылка)
	|			И (ДокОприходование.ЦенаВРознице = Док.ЦенаВРознице)
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.Количество - Док.КоличествоУчет > 0
	/// Кунов О.В., 01.10.2014 - 32066
	|" + ? (СкладЗаполнения = Неопределено, "", "И Док.ПРГ_Склад = &Склад") + "
	///
	|
	|СГРУППИРОВАТЬ ПО
	/// Кунов О.В., 26.06.2014 - 28394
	|	Док.Ссылка,
	///
	|	Док.Номенклатура,
	|	Док.Качество,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.Цена,
	|	Док.ЦенаВРознице
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	/// Кунов О.В., 01.10.2014 - 32066
	Если СкладЗаполнения <> Неопределено Тогда
		Запрос.УстановитьПараметр("Склад", СкладЗаполнения);
		Склад = СкладЗаполнения;
	Иначе
		Склад = ДокументОснование.Склад;
	КонецЕсли;
	///
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	СтрокиДобавлены = Ложь;
	Пока Выборка.Следующий() Цикл

		/// Кунов О.В., 26.06.2014 - 28394
		КоличествоИзлишков = Выборка.Ссылка.Пересортица.Выгрузить(Новый Структура("СерияИзлишек", Выборка.СерияНоменклатуры)).Итог("Количество");
		
		КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное - КоличествоИзлишков;
		///
		Если КоличествоОприходовать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокиДобавлены = Истина;
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.КоэффициентЕдиницыИнвентаризации;
		СтрокаТабличнойЧасти.Количество                 = КоличествоОприходовать;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Цена                       = Выборка.Цена;
		СтрокаТабличнойЧасти.ЦенаВРознице               = Выборка.ЦенаВРознице;
		СтрокаТабличнойЧасти.Качество                   = Выборка.Качество;
		Если Выборка.Номенклатура.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство Тогда
			СтрокаТабличнойЧасти.СтатусПартии				= Перечисления.СтатусыПартийТоваров.Продукция;
		Иначе
			СтрокаТабличнойЧасти.СтатусПартии				= Перечисления.СтатусыПартийТоваров.Купленный;
        КонецЕсли;
		// Рассчитаем и заполним процент розничной наценки.
		ЦенаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, ВалютаУпрУчета,
		           мВалютаРегламентированногоУчета, КурсУпрУчета, 1, КратностьУпрУчета, 1);

		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена), 0,
		                                               100 * (СтрокаТабличнойЧасти.ЦенаВРознице - ЦенаРегл) / ЦенаРегл);

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ВалютаУпрУчета,
		                                 мВалютаРегламентированногоУчета, КурсУпрУчета, 1, КратностьУпрУчета, 1);
										 
		// С 01.01.2010 сумма (НУ) = сумма (БУ), СуммаПР и СуммаВР равны 0
		СтрокаТабличнойЧасти.СуммаНУ = СтрокаТабличнойЧасти.СуммаРегл;
		
	КонецЦикла;
	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары фактическое количество которых превышает учетное.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

// Процедура заполняет начальными значениями документ
Процедура ЗаполнитьНачальнымиЗначениями() Экспорт

	// Вызвать общую процедуру для заполнения основных реквизитов
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	// Дозаполнить особенные для формы реквизиты

КонецПроцедуры // ЗаполнитьНачальнымиЗначениями()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
    мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация,истина);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТоваров.Колонки.Сумма.Имя = "Стоимость";
	
	ТаблицаТоваров.Колонки.Добавить("Содержание");
	ТаблицаТоваров.ЗаполнитьЗначения(?(ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ОприходованиеТоваров,"Оприходование излишков ", "Ввод остатков "), "Содержание");

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад");
	
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("КоррСчет");
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	//уберем сумму
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество,  Качество");
	
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей);
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей);
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		//пока без проверки
		//СтруктураОбязательныхПолей.Удалить("Сумма");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		//пока без проверки
		//СтруктураОбязательныхПолей.Вставить("СуммаРегл");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ
		И Не мРазрешитьНулевыеЦеныВРознице Тогда
		СтруктураОбязательныхПолей.Вставить("ЦенаВРознице");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
	   И ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ВводНачальныхОстатков 
	   И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
		// Проверка на соотвествие сумм бухгалтерского и налогового учета
		Для каждого СтрокаТаблицы из ТаблицаПоТоварам Цикл
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
										   """ табличной части """ + "Товары" + """: ";
			Если СтрокаТаблицы.СуммаРегл <> СтрокаТаблицы.СуммаНУ+СтрокаТаблицы.СуммаВР+СтрокаТаблицы.СуммаПР Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выполняется правило. " +
								   "Сумма (регл) должна быть равна Сумма НУ + Сумма ВР + Сумма ПР!", Отказ, Заголовок);				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей)
	
	СтруктураОбязательныхПолей.Вставить("СтатусПартии");
	
КонецПроцедуры

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, СтруктураОбязательныхПолей)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		//на время ввода остатков
		//СтруктураОбязательныхПолей.Вставить("СуммаРегл");
	КонецЕсли;

КонецПроцедуры

// Проводит табличные части "Товары" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);

КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартий()

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
	КонецЕсли;
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный
		 ИЛИ СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию(ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"), Дата, Ложь, Заголовок);
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ.
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			НаборДвижений = Движения.ТоварыВНТТ;
		ИначеЕсли СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			НаборДвижений = Движения.ТоварыВРознице;
		Иначе
			НаборДвижений = Движения.ТоварыНаСкладах;
		КонецЕсли;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
		ИначеЕсли СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад,
			                 ТаблицаДвижений.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

			УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаДвижений, ТаблицаПоЦенам);

			// Проверка наличия продажных цен на приходуемый товар.
			УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары",
			   ТаблицаДвижений, Отказ, Заголовок);
		КонецЕсли;

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			НаборДвижений.ВыполнитьПриход();
		КонецЕсли;
        УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
			?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
			СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, , , СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, Ложь, Ложь);
	КонецЕсли; // Если ОтражатьВУправленческомУчете ...
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, , , Ложь, СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН);

	УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(СтруктураШапкиДокумента,,ТаблицаПоТоварам,,,,, СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
	
	Движения.Хозрасчетный.Записать(ложь);
    Движения.Налоговый.Записать(ложь);
КонецПроцедуры

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	//ПО РЕГИСТРУ КУДИР
	
	СтрокаКниги  = Движения.КнигаУчетаДоходовИРасходов.Добавить();
    СтрокаКниги.Организация		= СтруктураШапкиДокумента.Организация;
	СтрокаКниги.СтрокаДокумента = 0;
	СтрокаКниги.Период			= СтруктураШапкиДокумента.Дата;
	СтрокаКниги.Графа4			= ТаблицаПоТоварам.Итог("СуммаРегл");

	СтрокаКниги.Графа5 = ?(НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(КоррСчет), 0, ТаблицаПоТоварам.Итог("СуммаРегл"));

	СтрокаКниги.Графа6 = 0;
	СтрокаКниги.Графа7 = 0;
	СтрокаКниги.НДС    = 0;

	Если ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ОприходованиеТоваров Тогда
		Если ЗначениеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда
			СтрокаКниги.Содержание = "Оприходованы излишки, выявленные при проведении инвентаризации "+НалоговыйУчетУСН.РеквизитыПервичногоДокумента(ИнвентаризацияТоваровНаСкладе)+".";
		Иначе	
			СтрокаКниги.Содержание = "Оприходованы излишки ТМЦ.";
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ВводНачальныхОстатков Тогда
		СтрокаКниги.Содержание = "Ввод начальных остатков.";
	КонецЕсли;
	
	СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ) Экспорт
	
	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если Не ТаблицаПоТоварам.Количество() = 0 Тогда
		
		// Отражаем в регистре партионного учета для НДС
		ТаблицаПоТоварамНДС = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамНДС.Колонки.Стоимость.Имя = "СтоимостьУпр";
		ТаблицаПоТоварамНДС.Колонки.СуммаРегл.Имя = "Стоимость";

		УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварамНДС, , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)
	
	СтруктураПолей.Вставить("ЦенаВРознице"              , "ЦенаВРознице");
	СтруктураПолей.Вставить("СтатусПартии"              , "СтатусПартии");
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)
	
	СтруктураПолей.Вставить("СчетУчетаБУ"        , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"        , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СуммаРегл"          , "СуммаРегл");
	СтруктураПолей.Вставить("СуммаНУ"          	 , "СуммаНУ");
	СтруктураПолей.Вставить("СуммаПР"            , "СуммаПР");
	СтруктураПолей.Вставить("СуммаВР"            , "СуммаВР");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ОприходованиеТоваров;
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		/// Кунов О.В., 01.10.2014 - 32066
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИнвентаризацияТоваровНаСкладеТовары.ПРГ_Склад КАК Склад
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Основание");
		Запрос.УстановитьПараметр("Основание", Основание);
		
		СкладыОснованияМ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
		СкладыОснования = Новый СписокЗначений;
		СкладыОснования.ЗагрузитьЗначения(СкладыОснованияМ);
		
		Если СкладыОснования.Количество() > 1 Тогда
			ВыбранныйСклад = СкладыОснования.ВыбратьЭлемент("Выберите склад");
			Если ВыбранныйСклад <> Неопределено Тогда
				СкладОснования = ВыбранныйСклад.Значение;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			СкладОснования = Основание.Склад;
		КонецЕсли;
		
		Склад = СкладОснования;
		
		Если СкладОснования.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
		///	
			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(глЗначениеПеременной("ВалютаУправленческогоУчета"), Дата);
			КурсДокумента      = СтруктураКурсаДокумента.Курс;
			КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			
		Иначе

			КурсДокумента      = 1;
			КратностьДокумента = 1;
			
		КонецЕсли;

		ИнвентаризацияТоваровНаСкладе = Основание;

		ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(Основание, СкладОснования);
		ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 	

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента     = Товары.Итог("Сумма");
	СуммаДокументаРегл = Товары.Итог("СуммаРегл");

	ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");

	Если ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ВводНачальныхОстатков Тогда
		ИнвентаризацияТоваровНаСкладе = неопределено;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"  , "ВалютаУправленческогоУчета"      , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"  , "КурсВалютыУправленческогоУчета"  , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"      , "ВидСклада"                       , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиПартионныйУчетПоСкладам",     "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "СпособОценкиМПЗ",      "СпособОценкиМПЗ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
			ПоддержкаПБУ18 = ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18;
		Иначе
			ПоддержкаПБУ18 = Ложь;
		КонецЕсли; 
        СтруктураШапкиДокумента.Вставить("ПоддержкаПБУ18", ПоддержкаПБУ18);
		Если ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ОприходованиеТоваров И ПоддержкаПБУ18
			И ЗначениеЗаполнено(СтруктураШапкиДокумента.ИнвентаризацияТоваровНаСкладе) Тогда
			//Для формирования проводок и расчета постоянных разниц
			СтавкаНалогаНаПрибыль = НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента);
            СтруктураШапкиДокумента.Вставить("СтавкаНалогаНаПрибыль",СтавкаНалогаНаПрибыль);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"               , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                 , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                      , "Сумма");
	СтруктураПолей.Вставить("Качество"                   , "Качество");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры" , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"          , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям", "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("Услуга"                     , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                      , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                   , "Номенклатура.Комплект");
    СтруктураПолей.Вставить("ВидСклада"					 , "Ссылка.Склад.ВидСклада");

	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Ложь);
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	Если мУдалятьДвижения Тогда
		//начало изменений Ожиганов 18.11.2015 уменьшим вероятность возникновения блокировок
		//ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
		//конец изменений 
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам));

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();

