
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда

Процедура ДобавитьИнформациюВДерево(ДеревоВыгрузки, НаборЗаписей) 
	
	Для каждого ЭлементНабора Из НаборЗаписей Цикл
		ИмяЗаписи = ЭлементНабора.Ключ;
		Запись = ЭлементНабора.Значение;
		ТипДанных = Запись.ТипДанных;
		Если ТипДанных = "КОНСТАНТА" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ЧИСЛО" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Формат(Запись.Значение,"ЧЦ=" + Запись.Размер + "; ЧДЦ=" + Запись.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0"))
			
		ИначеЕсли ТипДанных = "СТРОКА" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение)
			
		ИначеЕсли ТипДанных = "ДАТА" Тогда
			
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ?(Не ЗначениеЗаполнено(Запись.Значение),"00.00.0000", Формат(Запись.Значение,"ДФ=dd.MM.yyyy")))
			
		ИначеЕсли ТипДанных = "ТАБЛИЦА" Тогда	
			
			ПроверятьНеобязательныеПоля = Ложь;
			Для каждого Поле Из Запись.Поля Цикл
				ПроверятьНеобязательныеПоля = Поле.ЭлементНеОбязателен = "Н";
				Если ПроверятьНеобязательныеПоля Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Для каждого СтрокаТЗ Из Запись.Значение Цикл
				
				ВыводитьНеобязательныеПоля = Ложь;
				Если ПроверятьНеобязательныеПоля Тогда
					Для каждого Поле Из Запись.Поля Цикл
						Если Поле.ЭлементНеОбязателен = "Н" Тогда
							ВыводитьНеобязательныеПоля = ЗначениеЗаполнено(СтрокаТЗ[Поле.ИмяПоля]);
							Если ВыводитьНеобязательныеПоля Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				
				Атрибуты = Новый Структура;
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ЭлементНеОбязателен = "Н" И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					Данные = СтрокаТЗ[Поле.ИмяПоля];
					
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						Если Не ЗначениеЗаполнено(Данные) Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					
					Если Поле.ТипЭлемента = "А" Тогда
						Атрибуты.Вставить(Поле.ИмяПоля, Данные);
					КонецЕсли;
					
				КонецЦикла;
				
				ВеткаСтрокиТЗ = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты);
				
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ТипЭлемента = "А" Тогда
						Продолжить;
					КонецЕсли;
					
					Если Поле.ЭлементНеОбязателен = "Н" И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					ДобавитьИнформациюВДерево(ВеткаСтрокиТЗ, СтрокаТЗ[Поле.ИмяПоля])
					
				КонецЦикла;
			КонецЦикла; 
			
		ИначеЕсли ТипДанных = "СТРУКТУРА" Тогда	
			
			Атрибуты = Новый Структура;
			Для каждого Поле Из Запись.Поля Цикл
				
				Данные = Запись.Значение[Поле.ИмяПоля];
				
				Если Поле.ЭлементНеОбязателен = "Н" И Не ЗначениеЗаполнено(Данные) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					Если Не ЗначениеЗаполнено(Данные) Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
				Атрибуты.Вставить(Поле.ИмяПоля, Данные);
			КонецЦикла; 
				
			ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты);
			
		ИначеЕсли ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			Значение = Запись.Значение;
			
			Атрибуты = Новый Структура;
			Для каждого Поле Из Значение Цикл
				Если Поле.Значение.ТипЭлемента = "А" Тогда
					Данные = Поле.Значение.Значение;
					Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
						Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
						Если Не ЗначениеЗаполнено(Данные) Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					Атрибуты.Вставить(Поле.Ключ, Данные);
					Значение.Удалить(Поле.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты), Значение)
			
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ДанныеВыгружаемыеКакАтрибуты(СтруктураДанных)

	Атрибуты = Новый Структура;
	Для каждого Поле Из СтруктураДанных Цикл
		Если Поле.Значение.ТипЭлемента = "А" Тогда
			Данные = Поле.Значение.Значение;
			Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
				Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
			ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
				Если Не ЗначениеЗаполнено(Данные) Тогда
					Данные = ""
				Иначе
					Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
				КонецЕсли;
			КонецЕсли;
			Атрибуты.Вставить(Поле.Ключ, Данные);
			СтруктураДанных.Удалить(Поле.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Атрибуты
	
КонецФункции // ДанныеВыгружаемыеКакАтрибуты()

// Загружает формат набора записей файла сведений о доходах физлиц из заданного табличного документа
//
Функция ЗагрузитьФорматНабораЗаписей(Знач МакетФормата, Знач ИмяНабораЗаписей, ЭтоФизЛицо = Ложь)

	ФорматНабора = Новый Структура();
	
	ОбластьНабораЗаписей = МакетФормата.ПолучитьОбласть(ИмяНабораЗаписей);
	
	Для НСтр = 1 По ОбластьНабораЗаписей.ВысотаТаблицы Цикл
		
		ФорматЗаписи = Новый Структура("ТипДанных, Размер, РазрядностьДробнойЧасти, Поля, Значение, ТипЭлемента, ЭлементНеОбязателен");
		
		// имя записи хранится в 4 колонке
		ИмяЗаписи =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 4).Текст);
		
		// тип элемента хранится в 5 колонке
		ТипЭлемента =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 5).Текст);
		
		// тип данных хранится во 2 колонке
		ТипДанных = Врег(СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 2).Текст));
		
		Если ТипДанных = "" Тогда// Если тип данных не задан, то встретили строку - группировку
			Продолжить;
		КонецЕсли; 
		
		ПозицияРазделителя = Найти(ТипДанных,"/");
		Если ПозицияРазделителя <> 0 Тогда
			Если ЭтоФизЛицо Тогда
				ТипДанных = Сред(ТипДанных, ПозицияРазделителя + 1)
			Иначе
				ТипДанных = Лев(ТипДанных, ПозицияРазделителя - 1)
			КонецЕсли;	
		КонецЕсли;
		
		ФорматЗаписи.ТипДанных =  ТипДанных;
		ФорматЗаписи.ТипЭлемента = ТипЭлемента;
		
		// размер хранится в 3 колонке
		СтрРазмерПоля =  СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
		
		Если ФорматЗаписи.ТипДанных = "КОНСТАНТА" тогда
			
			// в колонке "размер" должно указываться значение константы
			ФорматЗаписи.Значение = СтрРазмерПоля;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ЧИСЛО" тогда
			
			ПозицияТочки = Найти(СтрРазмерПоля,".");
			Если ПозицияТочки<>0 тогда
				ФорматЗаписи.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
				ФорматЗаписи.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
			Иначе	
				ФорматЗаписи.Размер = Число(СтрРазмерПоля);
				ФорматЗаписи.РазрядностьДробнойЧасти = 0;
			КонецЕсли;	 
			
			ФорматЗаписи.Значение = 0;

		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРОКА" тогда
			
			ФорматЗаписи.Размер = Число(СтрРазмерПоля);
			
			ФорматЗаписи.Значение = "";
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ДАТА" тогда
			
			ФорматЗаписи.Значение = '00010101';
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ТАБЛИЦА" тогда	
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ТаблицаФорматаНабораЗаписей(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый ТаблицаЗначений;
			
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				Если Поле.ТипДанных = "ТАБЛИЦА" Тогда
					ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля);
				Иначе
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						ОписаниеТиповПоля = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(Поле.Размер, Поле.РазрядностьДробнойЧасти);
					ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
						ОписаниеТиповПоля = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(Поле.Размер);
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						ОписаниеТиповПоля = ОбщегоНазначенияЗК.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
					КонецЕсли; 
					ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля, ОписаниеТиповПоля);
				КонецЕсли; 
			
			КонецЦикла; 
			
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРУКТУРА" тогда	
			
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					ИмяЗаписи = Сред(ИмяЗаписи, ПозицияРазделителя + 1)
				Иначе
					ИмяЗаписи = Лев(ИмяЗаписи, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			ПозицияРазделителя = Найти(СтрРазмерПоля,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					СтрРазмерПоля = Сред(СтрРазмерПоля, ПозицияРазделителя + 1)
				Иначе
					СтрРазмерПоля = Лев(СтрРазмерПоля, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			
			// имя области-описания формата полей таблицы или структуры хранится в колонке размер
			ФорматЗаписи.Поля = ТаблицаФорматаНабораЗаписей(МакетФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый Структура;
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				ПустоеЗначениеПоля = Неопределено;
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ПустоеЗначениеПоля = 0;
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ПустоеЗначениеПоля = Дата('00010101');
                Иначе
					ПустоеЗначениеПоля = "";
				КонецЕсли; 
				
				ФорматЗаписи.Значение.Вставить(Поле.ИмяПоля, ПустоеЗначениеПоля);
				
			КонецЦикла; 
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			// Имя набора записей хранится в третьей колонке
			ИмяНабора = СокрЛП(ОбластьНабораЗаписей.Область(НСтр, 3).Текст);
			ПозицияРазделителя = Найти(ИмяНабора,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					ИмяНабора = Сред(ИмяНабора, ПозицияРазделителя + 1)
				Иначе
					ИмяНабора = Лев(ИмяНабора, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			ПозицияРазделителя = Найти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				Если ЭтоФизЛицо Тогда
					ИмяЗаписи = Сред(ИмяЗаписи, ПозицияРазделителя + 1)
				Иначе
					ИмяЗаписи = Лев(ИмяЗаписи, ПозицияРазделителя - 1)
				КонецЕсли;	
			КонецЕсли;
			ФорматЗаписи.Значение = ЗагрузитьФорматНабораЗаписей(МакетФормата, ИмяНабора, ЭтоФизЛицо);
			
		КонецЕсли;	
		
		ФорматНабора.Вставить(ИмяЗаписи, ФорматЗаписи);
		
	КонецЦикла;	
	
	Возврат ФорматНабора;
	
КонецФункции // ЗагрузитьФорматНабораЗаписей()

// Формирует печатную форму - реестр справок о доходах
//
Функция ПечатьРеестра(ИмяМакета = "Реестр")

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ФИОГлБухгалтера.Фамилия + "" "" + ФИОГлБухгалтера.Имя + "" "" + ФИОГлБухгалтера.Отчество, ДанныеДокумента.Наименование) КАК ФИОГлБухгалтера
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &ГлавныйБухгалтер) КАК ФИОГлБухгалтера
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ГлавныйБухгалтер";
	
	СтруктураЗаголовка = ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(Организация,"ИНН, НаименованиеПолное, КодИМНС");
	Если ЗначениеЗаполнено(КодИФНС) Тогда
		СтруктураЗаголовка.КодИМНС = КодИФНС
	КонецЕсли;
	Если НалоговыйПериод > 2010 И Не СпециальныйДокумент2011года Тогда
		СтруктураЗаголовка.Вставить("ОбщаяСуммаДохода", СуммыНалогов.Итог("ОбщаяСуммаДохода"));	
		СтруктураЗаголовка.Вставить("Исчислено", СуммыНалогов.Итог("Исчислено"));	
		СтруктураЗаголовка.Вставить("Удержано", СуммыНалогов.Итог("Удержано"));
		СтруктураЗаголовка.Вставить("Перечислено", СуммыНалогов.Итог("Перечислено"));
	Иначе
		СтруктураЗаголовка.Вставить("ОбщаяСуммаДохода", СотрудникиОрганизации.Итог("ОбщаяСуммаДохода"));	
		СтруктураЗаголовка.Вставить("Исчислено", СотрудникиОрганизации.Итог("Исчислено"));	
		СтруктураЗаголовка.Вставить("Удержано", СотрудникиОрганизации.Итог("Удержано"));
		СтруктураЗаголовка.Вставить("Перечислено", СотрудникиОрганизации.Итог("Перечислено"));
	КонецЕсли;
	Если ИмяМакета = "Реестр2009" Тогда
		Запрос.УстановитьПараметр("ГлавныйБухгалтер", ГлавныйБухгалтер);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураЗаголовка.Вставить("ГлБух", Выборка.ФИОГлБухгалтера)	
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначенияЗКПереопределяемый.ЭтоЮрЛицо(Организация) Тогда
		СтруктураЗаголовка.Вставить("Разделитель", "/");
		Запрос.УстановитьПараметр("ГлавныйБухгалтер", СправкуПодписал);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураЗаголовка.Вставить("ФИОРуководителя", Выборка.ФИОГлБухгалтера)	
		КонецЕсли;
	Иначе
		СтруктураЗаголовка.Вставить("Разделитель", "");
		Запрос = Новый Запрос;
		// Установим параметры запроса
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
		Запрос.УстановитьПараметр("ДатаДокумента", Дата);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст = ФормированиеПечатныхФормЗК.ПолучитьТекстЗапросаПоОтветственнымЛицам(
		"ДатаДокумента",
		"ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
		|И СтруктурнаяЕдиница = &СтруктурнаяЕдиница");
		Запрос.Выполнить();
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизаций.НаименованиеОтветственногоЛица КАК ФИОРуководителя
		|ИЗ
		|	ВТДанныеОбОтветственномЛице КАК ОтветственныеЛицаОрганизаций";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураЗаголовка.Вставить("ФИОРуководителя", Выборка.ФИОРуководителя)	
		КонецЕсли;
	КонецЕсли;
	СтруктураЗаголовка.Вставить("Год", Формат(НалоговыйПериод,"ЧЦ=4; ЧДЦ=0; ЧГ=0"));
	СтруктураЗаголовка.Вставить("ДатаСоставления", Формат(Дата, "ДФ=dd.MM.yyyy"));
	СтруктураЗаголовка.Вставить("НомерРеестра", ПроцедурыПерсонифицированногоУчета.НомерПачкиДокумента(Номер));
	СтруктураЗаголовка.Вставить("Признак", ?(ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ,"2","1"));
	СтруктураЗаголовка.Вставить("ИмяФайла", ИмяФайла);
	СтруктураЗаголовка.Вставить("ОКАТО", СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ОКАТО_КПП));
	СтруктураЗаголовка.Вставить("ОКТМО", СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ОКТМО_КПП));
	СтруктураЗаголовка.Вставить("КПП", ?(НалоговыйПериод + ?(СпециальныйДокумент2013года,0, 1) < Год(ПроведениеРасчетов.ДатаПереходаНаКодыОКТМО()), СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ОКАТО_КПП),СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ОКТМО_КПП)));
	СтруктураЗаголовка.Вставить("КоличествоСправок", Формат(СотрудникиОрганизации.Количество(),"ЧЦ=4; ЧДЦ=0; ЧГ=0"));
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрСправок2_НДФЛ";
	
	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка	= Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ОбластьМакетаПодвал	= Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета 		= Макет.ПолучитьОбласть("Строка"); // область сотрудника

	//Надо позвать проверку заполнения реквизитов шапки
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.Заполнить(СтруктураЗаголовка); // Шапка документа.
	
	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
	
	СтруктураПоиска = Новый Структура("НомерСправки");
	// выводим строки по сотрудникам
	Для каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
		
		НачалоСообщения = "В строке № """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
									""" табл. части ""Сотрудники организации"": ";
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.НомерСправки) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указан номер справки!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаРождения) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указана дата рождения!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Фамилия + СтрокаТЧ.Имя) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указаны фамилия и имя!", Отказ, Заголовок);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТЧ);
		Если НалоговыйПериод > 2010 И Не СпециальныйДокумент2011года Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
			СтрокиИтогов = СуммыНалогов.Выгрузить(СуммыНалогов.НайтиСтроки(СтруктураПоиска));
			Если СтрокиИтогов.Количество() > 0 Тогда
				СтрокиИтогов.Свернуть("НомерСправки", "ОбщаяСуммаДохода,ОблагаемаяСуммаДохода,Исчислено,Удержано,Перечислено,ИзлишнеУдержано,Задолженность");
				ОбластьМакета.Параметры.Заполнить(СтрокиИтогов[0]);
			КонецЕсли;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		 ОбластьМакетаПодвал.Параметры.Заполнить(СтруктураЗаголовка);
		
		// выводим предварительно подготовленный Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
		Возврат ТабДокумент;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Возврат Неопределено	

КонецФункции // ПечатьРеестра()
	
//Возвращает формат записи файла сведений в виде таблицы с именами и типами полей
//
Функция ТаблицаФорматаНабораЗаписей(Знач МакетФормата, Знач ИмяЗаписи) 

	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипДанных",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповЧисла(5));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипЭлемента",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(1));
	ТаблицаФормаЗаписи.Колонки.Добавить("ЭлементНеОбязателен",ОбщегоНазначенияЗК.ПолучитьОписаниеТиповСтроки(1));

	ОбластьФорматЗаписи = МакетФормата.ПолучитьОбласть(ИмяЗаписи);

	Для НСтр = 1 По ОбластьФорматЗаписи.ВысотаТаблицы Цикл
		
		//имя поля хранится в 4-ой колонке
		ИмяПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 4).Текст);
		Если ИмяПоля <> "" тогда

			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			//тип данных хранится во 2-ой колонке	
			НовоеПоле.ТипДанных = ВРЕГ(СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 2).Текст));
			//размер поля хранится в 3-ей колонке	
			СтрРазмерПоля = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 3).Текст);
			//Если указан размер поля, сохраним его
			
			Если (НовоеПоле.ТипДанных = "ЧИСЛО" Или НовоеПоле.ТипДанных = "СТРОКА") И СтрРазмерПоля<>"" тогда
				ПозицияТочки = Найти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе	
					НовоеПоле.Размер = Число(СтрРазмерПоля);
					НовоеПоле.РазрядностьДробнойЧасти = 0;
				КонецЕсли;	 
			КонецЕсли;	 
			// тип элемента хранится в 5 колонке
			НовоеПоле.ТипЭлемента = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 5).Текст);
			//Признак обязательности элемента хранится в 6-й колонке	
			НовоеПоле.ЭлементНеОбязателен = СокрЛП(ОбластьФорматЗаписи.Область(НСтр, 6).Текст);
			
		КонецЕсли;	 

	КонецЦикла;

	Возврат ТаблицаФормаЗаписи;
КонецФункции	 

Функция Файл2010(Отказ, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеСтавок, СоответствиеКодовДоходов, СоответствиеКодовВычетов)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
	
	СтруктураДанныхНА = СправкиПоНДФЛ.ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, ОКАТО_КПП, ОКТМО_КПП, КодИФНС, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал);
	СтруктураДанныхНА.Признак = ?(ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ,"2","1");
	
	СправкиПоНДФЛ.ПроверитьОбщиеДанныеСправки(СтруктураДанныхНА, Отказ, ОбработкаКомментариев);
	ОрганизацияЭтоФизЛицо = Не СтруктураДанныхНА.ЭтоЮрЛицо;
	
	//-----------------------------------------------------------------------------
	// ФОРМИРОВАНИЕ ДЕРЕВА ДАННЫХ
	
	Если Не Отказ Тогда
		
		// Загружаем формат файла сведений
		МакетФормата = ПолучитьМакет("ФорматНДФЛ2010");
		
		// Создаем начальное дерево
		ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
		
		Атрибуты = Новый Соответствие;
		Атрибуты.Вставить("ИдФайл", ИмяФайла);
		Атрибуты.Вставить("ВерсПрог", "1С:" + РегламентированнаяОтчетность.ИДКонфигурации() + " " + РегламентированнаяОтчетность.РедакцияКонфигурации());
		Атрибуты.Вставить("ВерсФорм", "5.01");
		
		Узел2НДФЛ = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
		
		// Информационная часть
		ФорматФайла = ЗагрузитьФорматНабораЗаписей(МакетФормата, "Файл", ОрганизацияЭтоФизЛицо);
		
		// Общие сведения служебной части
		НаборЗаписейОбщСвСЧ = ФорматФайла.СвРекв.Значение;
		НаборЗаписейОбщСвСЧ.ОКАТО.Значение = СтруктураДанныхНА.ОКАТО;
		НаборЗаписейОбщСвСЧ.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
		
		ФорматСправка = ФорматФайла.Документ.Значение;
		ФорматСправка.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
		ФорматСправка.ДатаДок.Значение = СтруктураДанныхНА.Дата;
		ФорматСправка.Признак.Значение = СтруктураДанныхНА.Признак;
		ФорматСправка.КодНО.Значение = СтруктураДанныхНА.КодИФНС;
		
		// Сведения об отправителе
		ФорматСправка.СвНА.Значение.ОКАТО.Значение = СтруктураДанныхНА.ОКАТО;
		Если НЕ ЗначениеЗаполнено(СтруктураДанныхНА.Телефон) Тогда
			ФорматСправка.СвНА.Значение.Удалить("Тлф");
		Иначе
			ФорматСправка.СвНА.Значение.Тлф.Значение = СтруктураДанныхНА.Телефон;
		КонецЕсли;
		
		Если ОрганизацияЭтоФизЛицо Тогда
			
			НаборЗаписейОбщСвСЧ.СвФЛ.Значение.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
			
			НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАФЛ.Значение;
			НаборЗаписейОтправитель.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.ФИО.Значение.Фамилия = СтруктураДанныхНА.Фамилия;
			НаборЗаписейОтправитель.ФИО.Значение.Имя = СтруктураДанныхНА.Имя;
			НаборЗаписейОтправитель.ФИО.Значение.Отчество = СтруктураДанныхНА.Отчество;
			
		Иначе
			
			// Сведения об отправителе
			НаборЗаписейОтправитель = НаборЗаписейОбщСвСЧ.СвЮЛ.Значение;
			НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
			
			НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАЮЛ.Значение;
			НаборЗаписейОтправитель.НаимОрг.Значение = СтруктураДанныхНА.НазваниеОрганизации;
			НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
			
		КонецЕсли;
		
		Атрибуты = Новый Структура;
		Для каждого Поле Из НаборЗаписейОбщСвСЧ Цикл
			Если Поле.Значение.ТипЭлемента = "А" Тогда
				Данные = Поле.Значение.Значение;
				Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
					Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
				ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
					Если Не ЗначениеЗаполнено(Данные) Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
				Атрибуты.Вставить(Поле.Ключ, Данные);
				НаборЗаписейОбщСвСЧ.Удалить(Поле.Ключ);
			КонецЕсли;
		КонецЦикла;
		ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел2НДФЛ, "СвРекв", "", Атрибуты), НаборЗаписейОбщСвСЧ);
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("НомерСправки");
	СтруктураОтбораДохода = Новый Структура("Месяц,КодДохода");
	ТаблицаВычетовКДоходам = СведенияОВычетах.ВыгрузитьКолонки("СуммаВычета");
	ТаблицаВычетовКДоходам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	Для каждого СтрокаДанных Из СотрудникиОрганизации Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = СведенияОДоходах.Выгрузить(СведенияОДоходах.НайтиСтроки(СтруктураОтбора));
		ВычетыПоВидам = СведенияОВычетах.Выгрузить(СведенияОВычетах.НайтиСтроки(СтруктураОтбора));
		Итоги = СуммыНалогов.Выгрузить(СуммыНалогов.НайтиСтроки(СтруктураОтбора));
		
		// Проверка корректности выводимых данных
		СправкиПоНДФЛ.ПроверитьДанныеСотрудника(НалоговыйПериод, СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Итоги, Дата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ДоходыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
			СтрокаТЗ.КодВычетаСтрокой = СоответствиеКодовВычетов[СтрокаТЗ.КодВычета];
		КонецЦикла;
		
		СтруктураДанныхСправки = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСправка);
		
		СтруктураДанныхСправки.НомСпр.Значение = СтрокаДанных.НомерСправки;
		
		// Данные о физическом лице - получателе дохода
		НаборЗаписейФизЛицо = СтруктураДанныхСправки.ПолучДох.Значение;
		
		//  Фамилия, Имя, Отчество
		НаборЗаписейФизЛицо.ФИО.Значение.Фамилия = СтрокаДанных.Фамилия;                     
		НаборЗаписейФизЛицо.ФИО.Значение.Имя = СтрокаДанных.Имя;                     
		НаборЗаписейФизЛицо.ФИО.Значение.Отчество = СтрокаДанных.Отчество;
		Если ПустаяСтрока(СтрокаДанных.ИНН) Тогда
			НаборЗаписейФизЛицо.Удалить("ИННФЛ");
		Иначе
			НаборЗаписейФизЛицо.ИННФЛ.Значение = СтрокаДанных.ИНН;
		КонецЕсли;
		Статус = 1;
		Если СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент 
			Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников 
			Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ
			Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Беженец Тогда
			Статус = 2;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
			Статус = 3;
		КонецЕсли;
		НаборЗаписейФизЛицо.Статус.Значение = Статус;
		НаборЗаписейФизЛицо.ДатаРожд.Значение = СтрокаДанных.ДатаРождения;
		НаборЗаписейФизЛицо.Гражд.Значение = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
		
		// Удостоверение личности
		НаборЗаписейДокУдЛичности = НаборЗаписейФизЛицо.УдЛичнФЛ.Значение;//  КодУдЛичн, СерНомДок 
		НаборЗаписейДокУдЛичности.КодУдЛичн = СоответствиеДокументовУдостоверяющиеЛичность[СтрокаДанных.ВидДокумента];
		НаборЗаписейДокУдЛичности.СерНомДок = СокрЛП(СтрокаДанных.СерияДокумента) + " " + СокрЛП(СтрокаДанных.НомерДокумента);
		
		// Адреса
		Если ЗначениеЗаполнено(СтрокаДанных.АдресРФ) Тогда
			СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(СтрокаДанных.АдресРФ);
			ЗаполнитьЗначенияСвойств(НаборЗаписейФизЛицо.АдрМЖРФ.Значение,СтруктураАдреса); //  Индекс, КодРегион, Район, Город, Улица, Дом, Корп,
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.КодРегион = СоответствиеКодовРегионов[СтруктураАдреса.Регион];
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.НаселПункт = СтруктураАдреса.НаселенныйПункт;
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.Кварт = СтруктураАдреса.Квартира;
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрМЖРФ");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.АдресЗарубежом) Тогда
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтрокаДанных.АдресЗарубежом);
			НаборЗаписейФизЛицо.АдрИНО.Значение.КодСтр = СоответствиеИменСтран[СтруктураАдреса.Страна];
			НаборЗаписейФизЛицо.АдрИНО.Значение.АдрТекст = СтруктураАдреса.Представление;
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрИНО");
		КонецЕсли;
		
		// Сведения об облагаемых доходах
		НаборЗаписейСведенияОДоходах = СтруктураДанныхСправки.СведДох.Значение;
		НаборЗаписейСведенияОДоходах.Ставка.Значение = СоответствиеСтавок[СтрокаДанных.Ставка];
		
		НаборЗаписейДоходы = НаборЗаписейСведенияОДоходах.ДохВыч.Значение;
		ТаблицаДоходов = НаборЗаписейДоходы.СвСумДох.Значение;
		ТаблицаСтрок = ДоходыПоВидам.Скопировать();
		ТаблицаСтрок.Свернуть("Месяц,КодДохода");
		ТаблицаСтрок.Сортировать("Месяц,КодДохода");
		Для каждого СтрокаДоходов Из ТаблицаСтрок Цикл // Доходы
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбораДохода, СтрокаДоходов);
			Строки = ДоходыПоВидам.НайтиСтроки(СтруктураОтбораДохода);
			СуммаДохода = 0;
			ТаблицаВычетовКДоходам.Очистить();
			Для каждого ОтобраннаяСтрока Из Строки Цикл
				СуммаДохода = СуммаДохода + ОтобраннаяСтрока.СуммаДохода;
				Если ЗначениеЗаполнено(ОтобраннаяСтрока.КодВычета) И ЗначениеЗаполнено(ОтобраннаяСтрока.СуммаВычета) Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаВычетовКДоходам.Добавить(), ОтобраннаяСтрока);	
				КонецЕсли;	
			КонецЦикла;
			
			СтрокаТЗ = ТаблицаДоходов.Добавить();
			СтрокаТЗ.Месяц = ?(СтрДлина(СтрокаДоходов.Месяц) = 1,"0","") + СтрокаДоходов.Месяц;
			СтрокаТЗ.КодДоход = СоответствиеКодовДоходов[СтрокаДоходов.КодДохода];
			СтрокаТЗ.СумДоход = СуммаДохода;
			Если ТаблицаВычетовКДоходам.Количество() > 0 Тогда
				ТаблицаДляСтроки = ТаблицаВычетовКДоходам.Скопировать();
				ТаблицаДляСтроки.Колонки.КодВычетаСтрокой.Имя = "КодВычет";
				ТаблицаДляСтроки.Колонки.СуммаВычета.Имя = "СумВычет";
				ОписаниеФормата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(НаборЗаписейСведенияОДоходах.НалВычССИ.Значение.ПредВычССИ);
				ОписаниеФормата.Значение = ТаблицаДляСтроки;
				СтрокаТЗ.СвСумВыч = Новый Структура("СвСумВыч", ОписаниеФормата);
			КонецЕсли;
		КонецЦикла;
		
		// Налоговые вычеты
		Если ВычетыПоВидам.Количество() > 0 Тогда
			
			НаборЗаписейВычет = НаборЗаписейСведенияОДоходах.НалВычССИ.Значение;
			ТаблицаВычетов = НаборЗаписейВычет.ПредВычССИ.Значение;
			Для каждого СтрокаВычетов Из ВычетыПоВидам Цикл // Вычеты
				СтрокаТЗ = ТаблицаВычетов.Добавить();
				СтрокаТЗ.КодВычет = СоответствиеКодовВычетов[СтрокаВычетов.КодВычета];
				СтрокаТЗ.СумВычет = СтрокаВычетов.СуммаВычета;
			КонецЦикла;
			
			Если (ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код311, "КодВычета") <> Неопределено Или ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код312, "КодВычета") <> Неопределено Или ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код318, "КодВычета") <> Неопределено) Тогда
				Уведомление = НаборЗаписейВычет.УведИмущВыч.Значение;
				Уведомление.НомерУвед = СтрокаДанных.НомерУведомления;
				Уведомление.ДатаУвед = СтрокаДанных.ДатаУведомления;
				Уведомление.ИФНСУвед = СтрокаДанных.КодНалоговогоОрганаУведомления;
			Иначе
				НаборЗаписейВычет.Удалить("УведИмущВыч");
			КонецЕсли;
			
		Иначе
			НаборЗаписейСведенияОДоходах.Удалить("НалВычССИ");
		КонецЕсли;
		
		// Общая сумма дохода и налога на доходы по итогам налогового периода
		
		СтруктураСГДНалПер = НаборЗаписейСведенияОДоходах.СГДНалПер.Значение;
		СтруктураСГДНалПер.СумДохОбщ = СтрокаДанных.ОбщаяСуммаДохода;
		СтруктураСГДНалПер.НалБаза = СтрокаДанных.ОблагаемаяСуммаДохода;
		СтруктураСГДНалПер.НалИсчисл = СтрокаДанных.Исчислено;
		СтруктураСГДНалПер.НалУдерж = СтрокаДанных.Удержано;
		Если НалоговыйПериод > 2010 Тогда
			СтруктураСГДНалПер.НалПеречисл = СтрокаДанных.Перечислено;
		КонецЕсли;
		СтруктураСГДНалПер.НалУдержЛиш = СтрокаДанных.ИзлишнеУдержано;
		СтруктураСГДНалПер.НалНеУдерж = СтрокаДанных.Задолженность;
		
		Атрибуты = Новый Структура;
		Для каждого Поле Из СтруктураДанныхСправки Цикл
			Если Поле.Значение.ТипЭлемента = "А" Тогда
				Данные = Поле.Значение.Значение;
				Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
					Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
				ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
					Если Не ЗначениеЗаполнено(Данные) Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
					КонецЕсли;
				КонецЕсли;
				Атрибуты.Вставить(Поле.Ключ, Данные);
				СтруктураДанныхСправки.Удалить(Поле.Ключ);
			КонецЕсли;
		КонецЦикла;
		ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел2НДФЛ, "Документ", "", Атрибуты), СтруктураДанныхСправки);
		
		ОбработкаПрерыванияПользователя();	
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат ""	
	КонецЕсли;
		
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML();
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	// получаем содержимое файла в виде строки
	СтрокаXML = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрокаXML

КонецФункции // Файл2010()

Функция Файл2011(Отказ, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеСтавок, СоответствиеКодовДоходов, СоответствиеКодовВычетов, СоответствиеСтавокДоходов)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
	
	СтруктураДанныхНА = СправкиПоНДФЛ.ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, ОКАТО_КПП, ОКТМО_КПП, КодИФНС, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал);
	СтруктураДанныхНА.Признак = ?(ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ,"2","1");
	
	СправкиПоНДФЛ.ПроверитьОбщиеДанныеСправки(СтруктураДанныхНА, Отказ, ОбработкаКомментариев);
	ОрганизацияЭтоФизЛицо = Не СтруктураДанныхНА.ЭтоЮрЛицо;
	
	//-----------------------------------------------------------------------------
	// ФОРМИРОВАНИЕ ДЕРЕВА ДАННЫХ
	
	Если Не Отказ Тогда
		
		// Загружаем формат файла сведений
		МакетФормата = ПолучитьМакет("ФорматНДФЛ2011");
		
		// Создаем начальное дерево
		ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
		
		Атрибуты = Новый Соответствие;
		Атрибуты.Вставить("ИдФайл", ИмяФайла);
		Атрибуты.Вставить("ВерсПрог", "1С:" + РегламентированнаяОтчетность.ИДКонфигурации() + " " + РегламентированнаяОтчетность.РедакцияКонфигурации());
		Атрибуты.Вставить("ВерсФорм", "5.02");
		
		Узел2НДФЛ = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
		
		// Информационная часть
		ФорматФайла = ЗагрузитьФорматНабораЗаписей(МакетФормата, "Файл", ОрганизацияЭтоФизЛицо);
		
		// Общие сведения служебной части
		НаборЗаписейОбщСвСЧ = ФорматФайла.СвРекв.Значение;
		НаборЗаписейОбщСвСЧ.ОКАТО.Значение = СтруктураДанныхНА.ОКАТО;
		НаборЗаписейОбщСвСЧ.ПризнакФ.Значение = СтруктураДанныхНА.Признак;
		НаборЗаписейОбщСвСЧ.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
		
		ФорматСправка = ФорматФайла.Документ.Значение;
		ФорматСправка.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
		ФорматСправка.ДатаДок.Значение = СтруктураДанныхНА.Дата;
		ФорматСправка.Признак.Значение = СтруктураДанныхНА.Признак;
		ФорматСправка.КодНО.Значение = СтруктураДанныхНА.КодИФНС;
		
		// Сведения об отправителе
		ФорматСправка.СвНА.Значение.ОКАТО.Значение = СтруктураДанныхНА.ОКАТО;
		Если НЕ ЗначениеЗаполнено(СтруктураДанныхНА.Телефон) Тогда
			ФорматСправка.СвНА.Значение.Удалить("Тлф");
		Иначе
			ФорматСправка.СвНА.Значение.Тлф.Значение = СтруктураДанныхНА.Телефон;
		КонецЕсли;
		
		Если ОрганизацияЭтоФизЛицо Тогда
			
			НаборЗаписейОбщСвСЧ.СвФЛ.Значение.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
			
			НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАФЛ.Значение;
			НаборЗаписейОтправитель.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.ФИО.Значение.Фамилия = СтруктураДанныхНА.Фамилия;
			НаборЗаписейОтправитель.ФИО.Значение.Имя = СтруктураДанныхНА.Имя;
			НаборЗаписейОтправитель.ФИО.Значение.Отчество = СтруктураДанныхНА.Отчество;
			
		Иначе
			
			// Сведения об отправителе
			НаборЗаписейОтправитель = НаборЗаписейОбщСвСЧ.СвЮЛ.Значение;
			НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
			
			НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАЮЛ.Значение;
			НаборЗаписейОтправитель.НаимОрг.Значение = СтруктураДанныхНА.НазваниеОрганизации;
			НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
			
		КонецЕсли;
		
		Атрибуты = ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейОбщСвСЧ);
		ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел2НДФЛ, "СвРекв", "", Атрибуты), НаборЗаписейОбщСвСЧ);
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("НомерСправки");
	СтруктураОтбораДохода = Новый Структура("Месяц,КодДохода");
	ТаблицаВычетовКДоходам = СведенияОВычетах.ВыгрузитьКолонки("СуммаВычета");
	ТаблицаВычетовКДоходам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	Для каждого СтрокаДанных Из СотрудникиОрганизации Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = СведенияОДоходах.Выгрузить(СведенияОДоходах.НайтиСтроки(СтруктураОтбора));
		ВычетыПоВидам = СведенияОВычетах.Выгрузить(СведенияОВычетах.НайтиСтроки(СтруктураОтбора));
		Итоги = СуммыНалогов.Выгрузить(СуммыНалогов.НайтиСтроки(СтруктураОтбора));
		
		// Проверка корректности выводимых данных
		СправкиПоНДФЛ.ПроверитьДанныеСотрудника(НалоговыйПериод, СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Итоги, Дата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран, СоответствиеСтавокДоходов);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ДоходыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
			СтрокаТЗ.КодВычетаСтрокой = СоответствиеКодовВычетов[СтрокаТЗ.КодВычета];
		КонецЦикла;
		
		СтруктураДанныхСправки = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСправка);
		
		СтруктураДанныхСправки.НомСпр.Значение = СтрокаДанных.НомерСправки;
		
		// Данные о физическом лице - получателе дохода
		НаборЗаписейФизЛицо = СтруктураДанныхСправки.ПолучДох.Значение;
		
		//  Фамилия, Имя, Отчество
		НаборЗаписейФизЛицо.ФИО.Значение.Фамилия = СтрокаДанных.Фамилия;                     
		НаборЗаписейФизЛицо.ФИО.Значение.Имя = СтрокаДанных.Имя;                     
		НаборЗаписейФизЛицо.ФИО.Значение.Отчество = СтрокаДанных.Отчество;
		Если ПустаяСтрока(СтрокаДанных.ИНН) Тогда
			НаборЗаписейФизЛицо.Удалить("ИННФЛ");
		Иначе
			НаборЗаписейФизЛицо.ИННФЛ.Значение = СтрокаДанных.ИНН;
		КонецЕсли;
		Статус = 1;
		Если СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент 
			Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников 
			Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ
			Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Беженец Тогда
			Статус = 2;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
			Статус = 3;
		КонецЕсли;
		НаборЗаписейФизЛицо.Статус.Значение = Статус;
		НаборЗаписейФизЛицо.ДатаРожд.Значение = СтрокаДанных.ДатаРождения;
		НаборЗаписейФизЛицо.Гражд.Значение = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
		
		// Удостоверение личности
		НаборЗаписейДокУдЛичности = НаборЗаписейФизЛицо.УдЛичнФЛ.Значение;//  КодУдЛичн, СерНомДок 
		НаборЗаписейДокУдЛичности.КодУдЛичн = СоответствиеДокументовУдостоверяющиеЛичность[СтрокаДанных.ВидДокумента];
		НаборЗаписейДокУдЛичности.СерНомДок = СокрЛП(СтрокаДанных.СерияДокумента) + " " + СокрЛП(СтрокаДанных.НомерДокумента);
		
		// Адреса
		Если ЗначениеЗаполнено(СтрокаДанных.АдресРФ) Тогда
			СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(СтрокаДанных.АдресРФ);
			ЗаполнитьЗначенияСвойств(НаборЗаписейФизЛицо.АдрМЖРФ.Значение,СтруктураАдреса); //  Индекс, КодРегион, Район, Город, Улица, Дом, Корп,
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.КодРегион = СоответствиеКодовРегионов[СтруктураАдреса.Регион];
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.НаселПункт = СтруктураАдреса.НаселенныйПункт;
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.Кварт = СтруктураАдреса.Квартира;
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрМЖРФ");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.АдресЗарубежом) Тогда
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтрокаДанных.АдресЗарубежом);
			НаборЗаписейФизЛицо.АдрИНО.Значение.КодСтр = СоответствиеИменСтран[СтруктураАдреса.Страна];
			НаборЗаписейФизЛицо.АдрИНО.Значение.АдрТекст = СтруктураАдреса.Представление;
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрИНО");
		КонецЕсли;
		
		// Сведения об облагаемых доходах
		ФорматНаборЗаписейСведенияОДоходах = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(СтруктураДанныхСправки.СведДох.Значение);
		СтруктураДанныхСправки.Удалить("СведДох");
		
		Атрибуты = ДанныеВыгружаемыеКакАтрибуты(СтруктураДанныхСправки);
		УзелСправки = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел2НДФЛ, "Документ", "", Атрибуты);
		ДобавитьИнформациюВДерево(УзелСправки, СтруктураДанныхСправки);
		
		Для каждого СтрокаИтогов Из Итоги Цикл
			
			НаборЗаписейСведенияОДоходах = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматНаборЗаписейСведенияОДоходах);
			НаборЗаписейСведенияОДоходах.Ставка.Значение = СоответствиеСтавок[СтрокаИтогов.Ставка];
			
			НаборЗаписейДоходы = НаборЗаписейСведенияОДоходах.ДохВыч.Значение;
			ТаблицаДоходов = НаборЗаписейДоходы.СвСумДох.Значение;
			
			Если СтрокаИтогов.ОбщаяСуммаДохода > 0 Тогда
				ТаблицаСтрок = СправкиПоНДФЛ.ИзвлечьДоходыПоСтавке(НалоговыйПериод, СтрокаИтогов.Ставка, СтрокаДанных.СтатусНалогоплательщика, ДоходыПоВидам, СоответствиеСтавокДоходов);
				ТаблицаСтрок.Свернуть("Месяц,КодДохода");
				ТаблицаСтрок.Сортировать("Месяц,КодДохода");
				Для каждого СтрокаДоходов Из ТаблицаСтрок Цикл // Доходы
					
					ЗаполнитьЗначенияСвойств(СтруктураОтбораДохода, СтрокаДоходов);
					Строки = ДоходыПоВидам.НайтиСтроки(СтруктураОтбораДохода);
					СуммаДохода = 0;
					ТаблицаВычетовКДоходам.Очистить();
					Для каждого ОтобраннаяСтрока Из Строки Цикл
						СуммаДохода = СуммаДохода + ОтобраннаяСтрока.СуммаДохода;
						Если ЗначениеЗаполнено(ОтобраннаяСтрока.КодВычета) И ЗначениеЗаполнено(ОтобраннаяСтрока.СуммаВычета) Тогда
							ЗаполнитьЗначенияСвойств(ТаблицаВычетовКДоходам.Добавить(), ОтобраннаяСтрока);	
						КонецЕсли;	
					КонецЦикла;
					
					СтрокаТЗ = ТаблицаДоходов.Добавить();
					СтрокаТЗ.Месяц = ?(СтрДлина(СтрокаДоходов.Месяц) = 1,"0","") + СтрокаДоходов.Месяц;
					СтрокаТЗ.КодДоход = СоответствиеКодовДоходов[СтрокаДоходов.КодДохода];
					СтрокаТЗ.СумДоход = СуммаДохода;
					Если ТаблицаВычетовКДоходам.Количество() > 0 Тогда
						ТаблицаДляСтроки = ТаблицаВычетовКДоходам.Скопировать();
						ТаблицаДляСтроки.Колонки.КодВычетаСтрокой.Имя = "КодВычет";
						ТаблицаДляСтроки.Колонки.СуммаВычета.Имя = "СумВычет";
						ОписаниеФормата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(НаборЗаписейСведенияОДоходах.НалВычССИ.Значение.ПредВычССИ);
						ОписаниеФормата.Значение = ТаблицаДляСтроки;
						СтрокаТЗ.СвСумВыч = Новый Структура("СвСумВыч", ОписаниеФормата);
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				НаборЗаписейСведенияОДоходах.Удалить("ДохВыч");
			КонецЕсли;
				
			// Налоговые вычеты
			Если ВычетыПоВидам.Количество() > 0 И СтрокаИтогов.Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
				
				НаборЗаписейВычет = НаборЗаписейСведенияОДоходах.НалВычССИ.Значение;
				ТаблицаВычетов = НаборЗаписейВычет.ПредВычССИ.Значение;
				Для каждого СтрокаВычетов Из ВычетыПоВидам Цикл // Вычеты
					СтрокаТЗ = ТаблицаВычетов.Добавить();
					СтрокаТЗ.КодВычет = СоответствиеКодовВычетов[СтрокаВычетов.КодВычета];
					СтрокаТЗ.СумВычет = СтрокаВычетов.СуммаВычета;
				КонецЦикла;
				
				Если (ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код311, "КодВычета") <> Неопределено Или ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код312, "КодВычета") <> Неопределено Или ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код318, "КодВычета") <> Неопределено) Тогда
					Уведомление = НаборЗаписейВычет.УведИмущВыч.Значение;
					Уведомление.НомерУвед = СтрокаДанных.НомерУведомления;
					Уведомление.ДатаУвед = СтрокаДанных.ДатаУведомления;
					Уведомление.ИФНСУвед = СтрокаДанных.КодНалоговогоОрганаУведомления;
				Иначе
					НаборЗаписейВычет.Удалить("УведИмущВыч");
				КонецЕсли;
				
			Иначе
				НаборЗаписейСведенияОДоходах.Удалить("НалВычССИ");
			КонецЕсли;
			
			// Общая сумма дохода и налога на доходы по итогам налогового периода
			
			СтруктураСГДНалПер = НаборЗаписейСведенияОДоходах.СГДНалПер.Значение;
			СтруктураСГДНалПер.СумДохОбщ = СтрокаИтогов.ОбщаяСуммаДохода;
			СтруктураСГДНалПер.НалБаза = СтрокаИтогов.ОблагаемаяСуммаДохода;
			СтруктураСГДНалПер.НалИсчисл = СтрокаИтогов.Исчислено;
			Если ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда
				ОписаниеПолей = НаборЗаписейСведенияОДоходах.СГДНалПер.Поля;
				СтруктураСГДНалПер.Удалить("НалУдерж");
				СтруктураСГДНалПер.Удалить("НалПеречисл");
				СтруктураСГДНалПер.Удалить("НалУдержЛиш");
				СтрокаОписания = ОписаниеПолей.Найти("НалУдерж","ИмяПоля");
				Если СтрокаОписания <> Неопределено Тогда
					ОписаниеПолей.Удалить(СтрокаОписания);
				КонецЕсли;
				СтрокаОписания = ОписаниеПолей.Найти("НалПеречисл","ИмяПоля");
				Если СтрокаОписания <> Неопределено Тогда
					ОписаниеПолей.Удалить(СтрокаОписания);
				КонецЕсли;
				СтрокаОписания = ОписаниеПолей.Найти("НалУдержЛиш","ИмяПоля");
				Если СтрокаОписания <> Неопределено Тогда
					ОписаниеПолей.Удалить(СтрокаОписания);
				КонецЕсли;
			Иначе
				СтруктураСГДНалПер.НалУдерж = СтрокаИтогов.Удержано;
				Если НалоговыйПериод > 2010 Тогда
					СтруктураСГДНалПер.НалПеречисл = СтрокаИтогов.Перечислено;
				КонецЕсли;
				СтруктураСГДНалПер.НалУдержЛиш = СтрокаИтогов.ИзлишнеУдержано;
			КонецЕсли;
			СтруктураСГДНалПер.НалНеУдерж = СтрокаИтогов.Задолженность;
			
			Атрибуты = ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейСведенияОДоходах);
			ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСправки, "СведДох","", Атрибуты), НаборЗаписейСведенияОДоходах);
			
		КонецЦикла;
		
		ОбработкаПрерыванияПользователя();	
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат ""	
	КонецЕсли;
		
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML();
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	// получаем содержимое файла в виде строки
	СтрокаXML = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрокаXML

КонецФункции // Файл2011()

Функция Файл2014(Отказ, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеСтавок, СоответствиеКодовДоходов, СоответствиеКодовВычетов, СоответствиеСтавокДоходов)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
	
	СтруктураДанныхНА = СправкиПоНДФЛ.ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, ОКАТО_КПП, ОКТМО_КПП, КодИФНС, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал);
	СтруктураДанныхНА.Признак = ?(ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ,"2","1");
	
	СправкиПоНДФЛ.ПроверитьОбщиеДанныеСправки(СтруктураДанныхНА, Отказ, ОбработкаКомментариев, Истина);
	ОрганизацияЭтоФизЛицо = Не СтруктураДанныхНА.ЭтоЮрЛицо;
	
	//-----------------------------------------------------------------------------
	// ФОРМИРОВАНИЕ ДЕРЕВА ДАННЫХ
	
	Если Не Отказ Тогда
		
		// Загружаем формат файла сведений
		МакетФормата = ПолучитьМакет("ФорматНДФЛ2014");
		
		// Создаем начальное дерево
		ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
		
		Атрибуты = Новый Соответствие;
		Атрибуты.Вставить("ИдФайл", ИмяФайла);
		Атрибуты.Вставить("ВерсПрог", "1С:" + РегламентированнаяОтчетность.ИДКонфигурации() + " " + РегламентированнаяОтчетность.РедакцияКонфигурации());
		Атрибуты.Вставить("ВерсФорм", "5.03");
		
		Узел2НДФЛ = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
		
		// Информационная часть
		ФорматФайла = ЗагрузитьФорматНабораЗаписей(МакетФормата, "Файл", ОрганизацияЭтоФизЛицо);
		
		// Общие сведения служебной части
		НаборЗаписейОбщСвСЧ = ФорматФайла.СвРекв.Значение;
		НаборЗаписейОбщСвСЧ.ОКТМО.Значение = СтрЗаменить(СтруктураДанныхНА.ОКТМО, "-", "");
		НаборЗаписейОбщСвСЧ.ПризнакФ.Значение = СтруктураДанныхНА.Признак;
		НаборЗаписейОбщСвСЧ.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
		
		ФорматСправка = ФорматФайла.Документ.Значение;
		ФорматСправка.ОтчетГод.Значение = СтруктураДанныхНА.НалоговыйПериодСтрокой;
		ФорматСправка.ДатаДок.Значение = СтруктураДанныхНА.Дата;
		ФорматСправка.Признак.Значение = СтруктураДанныхНА.Признак;
		ФорматСправка.КодНО.Значение = СтруктураДанныхНА.КодИФНС;
		
		// Сведения об отправителе
		ФорматСправка.СвНА.Значение.ОКТМО.Значение = НаборЗаписейОбщСвСЧ.ОКТМО.Значение;
		Если НЕ ЗначениеЗаполнено(СтруктураДанныхНА.Телефон) Тогда
			ФорматСправка.СвНА.Значение.Удалить("Тлф");
		Иначе
			ФорматСправка.СвНА.Значение.Тлф.Значение = СтруктураДанныхНА.Телефон;
		КонецЕсли;
		
		Если ОрганизацияЭтоФизЛицо Тогда
			
			НаборЗаписейОбщСвСЧ.СвФЛ.Значение.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
			
			НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАФЛ.Значение;
			НаборЗаписейОтправитель.ИННФЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.ФИО.Значение.Фамилия = СтруктураДанныхНА.Фамилия;
			НаборЗаписейОтправитель.ФИО.Значение.Имя = СтруктураДанныхНА.Имя;
			НаборЗаписейОтправитель.ФИО.Значение.Отчество = СтруктураДанныхНА.Отчество;
			
		Иначе
			
			// Сведения об отправителе
			НаборЗаписейОтправитель = НаборЗаписейОбщСвСЧ.СвЮЛ.Значение;
			НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
			
			НаборЗаписейОтправитель = ФорматСправка.СвНА.Значение.СвНАЮЛ.Значение;
			НаборЗаписейОтправитель.НаимОрг.Значение = СтруктураДанныхНА.НазваниеОрганизации;
			НаборЗаписейОтправитель.ИННЮЛ.Значение = СтруктураДанныхНА.ИННорг;
			НаборЗаписейОтправитель.КПП.Значение = СтруктураДанныхНА.КПП;
			
		КонецЕсли;
		
		Атрибуты = ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейОбщСвСЧ);
		ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел2НДФЛ, "СвРекв", "", Атрибуты), НаборЗаписейОбщСвСЧ);
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("НомерСправки");
	СтруктураОтбораДохода = Новый Структура("Месяц,КодДохода");
	ТаблицаВычетовКДоходам = СведенияОВычетах.ВыгрузитьКолонки("СуммаВычета");
	ТаблицаВычетовКДоходам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	Для каждого СтрокаДанных Из СотрудникиОрганизации Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = СведенияОДоходах.Выгрузить(СведенияОДоходах.НайтиСтроки(СтруктураОтбора));
		ВычетыПоВидам = СведенияОВычетах.Выгрузить(СведенияОВычетах.НайтиСтроки(СтруктураОтбора));
		Итоги = СуммыНалогов.Выгрузить(СуммыНалогов.НайтиСтроки(СтруктураОтбора));
		
		// Проверка корректности выводимых данных
		СправкиПоНДФЛ.ПроверитьДанныеСотрудника(НалоговыйПериод, СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Итоги, Дата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран, СоответствиеСтавокДоходов);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ДоходыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
			СтрокаТЗ.КодВычетаСтрокой = СоответствиеКодовВычетов[СтрокаТЗ.КодВычета];
		КонецЦикла;
		
		СтруктураДанныхСправки = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСправка);
		
		СтруктураДанныхСправки.НомСпр.Значение = СтрокаДанных.НомерСправки;
		
		// Данные о физическом лице - получателе дохода
		НаборЗаписейФизЛицо = СтруктураДанныхСправки.ПолучДох.Значение;
		
		//  Фамилия, Имя, Отчество
		НаборЗаписейФизЛицо.ФИО.Значение.Фамилия = СтрокаДанных.Фамилия;                     
		НаборЗаписейФизЛицо.ФИО.Значение.Имя = СтрокаДанных.Имя;                     
		НаборЗаписейФизЛицо.ФИО.Значение.Отчество = СтрокаДанных.Отчество;
		Если ПустаяСтрока(СтрокаДанных.ИНН) Тогда
			НаборЗаписейФизЛицо.Удалить("ИННФЛ");
		Иначе
			НаборЗаписейФизЛицо.ИННФЛ.Значение = СтрокаДанных.ИНН;
		КонецЕсли;
		Статус = 1;
		Если СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент 
			Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников 
			Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ
			Или СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Беженец Тогда
			Статус = 2;
		ИначеЕсли СтрокаДанных.СтатусНалогоплательщика = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
			Статус = 3;
		КонецЕсли;
		НаборЗаписейФизЛицо.Статус.Значение = Статус;
		НаборЗаписейФизЛицо.ДатаРожд.Значение = СтрокаДанных.ДатаРождения;
		НаборЗаписейФизЛицо.Гражд.Значение = СоответствиеКодовСтран[СтрокаДанных.Гражданство];
		
		// Удостоверение личности
		НаборЗаписейДокУдЛичности = НаборЗаписейФизЛицо.УдЛичнФЛ.Значение;//  КодУдЛичн, СерНомДок 
		НаборЗаписейДокУдЛичности.КодУдЛичн = СоответствиеДокументовУдостоверяющиеЛичность[СтрокаДанных.ВидДокумента];
		НаборЗаписейДокУдЛичности.СерНомДок = СокрЛП(СтрокаДанных.СерияДокумента) + " " + СокрЛП(СтрокаДанных.НомерДокумента);
		
		// Адреса
		Если ЗначениеЗаполнено(СтрокаДанных.АдресРФ) Тогда
			СтруктураАдреса = РегламентированнаяОтчетность.РазложитьАдрес(СтрокаДанных.АдресРФ);
			ЗаполнитьЗначенияСвойств(НаборЗаписейФизЛицо.АдрМЖРФ.Значение,СтруктураАдреса); //  Индекс, КодРегион, Район, Город, Улица, Дом, Корп,
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.КодРегион = СоответствиеКодовРегионов[СтруктураАдреса.Регион];
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.НаселПункт = СтруктураАдреса.НаселенныйПункт;
			НаборЗаписейФизЛицо.АдрМЖРФ.Значение.Кварт = СтруктураАдреса.Квартира;
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрМЖРФ");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.АдресЗарубежом) Тогда
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтрокаДанных.АдресЗарубежом);
			НаборЗаписейФизЛицо.АдрИНО.Значение.КодСтр = СоответствиеИменСтран[СтруктураАдреса.Страна];
			НаборЗаписейФизЛицо.АдрИНО.Значение.АдрТекст = СтруктураАдреса.Представление;
		Иначе // очищаем адресные данные
			НаборЗаписейФизЛицо.Удалить("АдрИНО");
		КонецЕсли;
		
		// Сведения об облагаемых доходах
		ФорматНаборЗаписейСведенияОДоходах = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(СтруктураДанныхСправки.СведДох.Значение);
		СтруктураДанныхСправки.Удалить("СведДох");
		
		Атрибуты = ДанныеВыгружаемыеКакАтрибуты(СтруктураДанныхСправки);
		УзелСправки = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(Узел2НДФЛ, "Документ", "", Атрибуты);
		ДобавитьИнформациюВДерево(УзелСправки, СтруктураДанныхСправки);
		
		Для каждого СтрокаИтогов Из Итоги Цикл
			
			НаборЗаписейСведенияОДоходах = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматНаборЗаписейСведенияОДоходах);
			НаборЗаписейСведенияОДоходах.Ставка.Значение = СоответствиеСтавок[СтрокаИтогов.Ставка];
			
			НаборЗаписейДоходы = НаборЗаписейСведенияОДоходах.ДохВыч.Значение;
			ТаблицаДоходов = НаборЗаписейДоходы.СвСумДох.Значение;
			
			Если СтрокаИтогов.ОбщаяСуммаДохода > 0 Тогда
				ТаблицаСтрок = СправкиПоНДФЛ.ИзвлечьДоходыПоСтавке(НалоговыйПериод, СтрокаИтогов.Ставка, СтрокаДанных.СтатусНалогоплательщика, ДоходыПоВидам, СоответствиеСтавокДоходов);
				ТаблицаСтрок.Свернуть("Месяц,КодДохода");
				ТаблицаСтрок.Сортировать("Месяц,КодДохода");
				Для каждого СтрокаДоходов Из ТаблицаСтрок Цикл // Доходы
					
					ЗаполнитьЗначенияСвойств(СтруктураОтбораДохода, СтрокаДоходов);
					Строки = ДоходыПоВидам.НайтиСтроки(СтруктураОтбораДохода);
					СуммаДохода = 0;
					ТаблицаВычетовКДоходам.Очистить();
					Для каждого ОтобраннаяСтрока Из Строки Цикл
						СуммаДохода = СуммаДохода + ОтобраннаяСтрока.СуммаДохода;
						Если ЗначениеЗаполнено(ОтобраннаяСтрока.КодВычета) И ЗначениеЗаполнено(ОтобраннаяСтрока.СуммаВычета) Тогда
							ЗаполнитьЗначенияСвойств(ТаблицаВычетовКДоходам.Добавить(), ОтобраннаяСтрока);	
						КонецЕсли;	
					КонецЦикла;
					
					СтрокаТЗ = ТаблицаДоходов.Добавить();
					СтрокаТЗ.Месяц = ?(СтрДлина(СтрокаДоходов.Месяц) = 1,"0","") + СтрокаДоходов.Месяц;
					СтрокаТЗ.КодДоход = СоответствиеКодовДоходов[СтрокаДоходов.КодДохода];
					СтрокаТЗ.СумДоход = СуммаДохода;
					Если ТаблицаВычетовКДоходам.Количество() > 0 Тогда
						ТаблицаДляСтроки = ТаблицаВычетовКДоходам.Скопировать();
						ТаблицаДляСтроки.Колонки.КодВычетаСтрокой.Имя = "КодВычет";
						ТаблицаДляСтроки.Колонки.СуммаВычета.Имя = "СумВычет";
						ОписаниеФормата = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(НаборЗаписейСведенияОДоходах.НалВычССИ.Значение.ПредВычССИ);
						ОписаниеФормата.Значение = ТаблицаДляСтроки;
						СтрокаТЗ.СвСумВыч = Новый Структура("СвСумВыч", ОписаниеФормата);
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				НаборЗаписейСведенияОДоходах.Удалить("ДохВыч");
			КонецЕсли;
				
			// Налоговые вычеты
			Если ВычетыПоВидам.Количество() > 0 И СтрокаИтогов.Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
				
				НаборЗаписейВычет = НаборЗаписейСведенияОДоходах.НалВычССИ.Значение;
				ТаблицаВычетов = НаборЗаписейВычет.ПредВычССИ.Значение;
				Для каждого СтрокаВычетов Из ВычетыПоВидам Цикл // Вычеты
					СтрокаТЗ = ТаблицаВычетов.Добавить();
					СтрокаТЗ.КодВычет = СоответствиеКодовВычетов[СтрокаВычетов.КодВычета];
					СтрокаТЗ.СумВычет = СтрокаВычетов.СуммаВычета;
				КонецЦикла;
				
				Если (ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код311, "КодВычета") <> Неопределено Или ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код312, "КодВычета") <> Неопределено Или ВычетыПоВидам.Найти(Справочники.ВычетыНДФЛ.Код318, "КодВычета") <> Неопределено) Тогда
					Уведомление = НаборЗаписейВычет.УведИмущВыч.Значение;
					Уведомление.НомерУвед = СтрокаДанных.НомерУведомления;
					Уведомление.ДатаУвед = СтрокаДанных.ДатаУведомления;
					Уведомление.ИФНСУвед = СтрокаДанных.КодНалоговогоОрганаУведомления;
				Иначе
					НаборЗаписейВычет.Удалить("УведИмущВыч");
				КонецЕсли;
				
			Иначе
				НаборЗаписейСведенияОДоходах.Удалить("НалВычССИ");
			КонецЕсли;
			
			// Общая сумма дохода и налога на доходы по итогам налогового периода
			
			СтруктураСГДНалПер = НаборЗаписейСведенияОДоходах.СГДНалПер.Значение;
			СтруктураСГДНалПер.СумДохОбщ = СтрокаИтогов.ОбщаяСуммаДохода;
			СтруктураСГДНалПер.НалБаза = СтрокаИтогов.ОблагаемаяСуммаДохода;
			СтруктураСГДНалПер.НалИсчисл = СтрокаИтогов.Исчислено;
			Если ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда
				ОписаниеПолей = НаборЗаписейСведенияОДоходах.СГДНалПер.Поля;
				СтруктураСГДНалПер.Удалить("НалУдерж");
				СтруктураСГДНалПер.Удалить("НалПеречисл");
				СтруктураСГДНалПер.Удалить("НалУдержЛиш");
				СтрокаОписания = ОписаниеПолей.Найти("НалУдерж","ИмяПоля");
				Если СтрокаОписания <> Неопределено Тогда
					ОписаниеПолей.Удалить(СтрокаОписания);
				КонецЕсли;
				СтрокаОписания = ОписаниеПолей.Найти("НалПеречисл","ИмяПоля");
				Если СтрокаОписания <> Неопределено Тогда
					ОписаниеПолей.Удалить(СтрокаОписания);
				КонецЕсли;
				СтрокаОписания = ОписаниеПолей.Найти("НалУдержЛиш","ИмяПоля");
				Если СтрокаОписания <> Неопределено Тогда
					ОписаниеПолей.Удалить(СтрокаОписания);
				КонецЕсли;
			Иначе
				СтруктураСГДНалПер.НалУдерж = СтрокаИтогов.Удержано;
				Если НалоговыйПериод > 2010 Тогда
					СтруктураСГДНалПер.НалПеречисл = СтрокаИтогов.Перечислено;
				КонецЕсли;
				СтруктураСГДНалПер.НалУдержЛиш = СтрокаИтогов.ИзлишнеУдержано;
			КонецЕсли;
			СтруктураСГДНалПер.НалНеУдерж = СтрокаИтогов.Задолженность;
			
			Атрибуты = ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейСведенияОДоходах);
			ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСправки, "СведДох","", Атрибуты), НаборЗаписейСведенияОДоходах);
			
		КонецЦикла;
		
		ОбработкаПрерыванияПользователя();	
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат ""	
	КонецЕсли;
		
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML();
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
	// получаем содержимое файла в виде строки
	СтрокаXML = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрокаXML

КонецФункции // Файл2014()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверитьПравильностьЗаполненияДокумента(Отказ) Экспорт
	
	Отказ = Ложь;
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОВОМ АГЕНТЕ
	
	СтруктураДанныхНА = СправкиПоНДФЛ.ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, ОКАТО_КПП, ОКТМО_КПП, КодИФНС, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал);
	СтруктураДанныхНА.Признак = ?(ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ,"2","1");
	СправкиПоНДФЛ.ПроверитьОбщиеДанныеСправки(СтруктураДанныхНА, Отказ, ОбработкаКомментариев, НалоговыйПериод + ?(СпециальныйДокумент2013года, 0, 1) >= Год(ПроведениеРасчетов.ДатаПереходаНаКодыОКТМО()));
	
	//-----------------------------------------------------------------------------
	// СВЕДЕНИЯ О НАЛОГОПЛАТЕЛЬЩИКАХ
	
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющиеЛичность = Новый Соответствие;
	СоответствиеСтавокДоходов = Новый Соответствие;
	СправкиПоНДФЛ.ПрочитатьКлассификаторыВСоответствия(НалоговыйПериод, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, , , ,СоответствиеСтавокДоходов);
	
	СтруктураОтбора = Новый Структура("НомерСправки");
	
	Для каждого СтрокаДанных Из СотрудникиОрганизации Цикл 
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
		ДоходыПоВидам = СведенияОДоходах.Выгрузить(СведенияОДоходах.НайтиСтроки(СтруктураОтбора));
		ВычетыПоВидам = СведенияОВычетах.Выгрузить(СведенияОВычетах.НайтиСтроки(СтруктураОтбора));
		Итоги = СуммыНалогов.Выгрузить(СуммыНалогов.НайтиСтроки(СтруктураОтбора));
		
		// Проверка корректности выводимых данных
		СправкиПоНДФЛ.ПроверитьДанныеСотрудника(НалоговыйПериод, СтруктураДанныхНА.Признак, СтрокаДанных, ДоходыПоВидам, ВычетыПоВидам, Итоги, Дата, Отказ, ОбработкаКомментариев, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеИменСтран, СоответствиеСтавокДоходов);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьПравильностьЗаполненияДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Справка" Тогда
		
		СтруктураДанныхНА = СправкиПоНДФЛ.ДанныеНалоговогоАгентаДля2НДФЛ(Организация, НалоговыйПериод, ОКАТО_КПП, ОКТМО_КПП, КодИФНС, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал);
		СтруктураДанныхНА.Признак = ?(ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ,"2","1");
		
		ТабДокумент = СправкиПоНДФЛ.ПечатьСправок2НДФЛ(Ссылка, СтруктураДанныхНА, СотрудникиОрганизации.Выгрузить(), СведенияОДоходах.Выгрузить(), СведенияОВычетах.Выгрузить(), СуммыНалогов.Выгрузить());
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,"Справка 2-НДФЛ для передачи в ИФНС "));
	ИначеЕсли Найти(ИмяМакета, "Реестр") > 0 Тогда
		ТабДокумент = ПечатьРеестра(ИмяМакета);
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,"Реестр справок о доходах (2-НДФЛ) "));
	КонецЕсли;
	
	Возврат Неопределено	
	
КонецФункции // Печать

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ) Экспорт
	
	// здесь поддерживаем формирование сведений в соответствии с Приказом ФНС России от 17.11.2010 № ММВ-7-3/611@ 
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Отказ = Ложь;
	
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющиеЛичность = Новый Соответствие;
	СоответствиеКодовРегионов = Новый Соответствие;
	СоответствиеСтавок = Новый Соответствие;
	СоответствиеКодовДоходов = Новый Соответствие;
	СоответствиеСтавокДоходов = Новый Соответствие;
	СоответствиеКодовВычетов = Новый Соответствие;
	СправкиПоНДФЛ.ПрочитатьКлассификаторыВСоответствия(НалоговыйПериод, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеКодовДоходов, СоответствиеКодовВычетов, СоответствиеСтавокДоходов);
	
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка09] = 9;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка13] = 13;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка15] = 15;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка30] = 30;
	СоответствиеСтавок[Перечисления.НДФЛСтавки.Ставка35] = 35;
	
	Если НалоговыйПериод < 2011 Тогда
		СтрокаXML = Файл2010(Отказ, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеСтавок, СоответствиеКодовДоходов, СоответствиеКодовВычетов)
	ИначеЕсли НалоговыйПериод + 1 < Год(ПроведениеРасчетов.ДатаПереходаНаКодыОКТМО()) Тогда 
		СтрокаXML = Файл2011(Отказ, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеСтавок, СоответствиеКодовДоходов, СоответствиеКодовВычетов, СоответствиеСтавокДоходов)
	Иначе
		СтрокаXML = Файл2014(Отказ, СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющиеЛичность, СоответствиеКодовРегионов, СоответствиеСтавок, СоответствиеКодовДоходов, СоответствиеКодовВычетов, СоответствиеСтавокДоходов)
	КонецЕсли;
	
	Если Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат ""	
	КонецЕсли;
	
	Возврат СтрокаXML
	
КонецФункции // СформироватьВыходнойФайл()

#КонецЕсли

// Заполняет табличную часть документа физлицами, получавшими доходы
//
// Параметры
//   нет
//
Процедура Автозаполнение() Экспорт

	// Рассчитаем номер первой справки о доходах
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("НалоговыйПериод",НалоговыйПериод);
	Запрос.УстановитьПараметр("Организация",Организация);
	ТекстЗапроса =  
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки) КАК КоличествоСформированныхСправок
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрган.СотрудникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
	|ГДЕ
	|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Дата < &ДатаДокумента
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка <> &Ссылка
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Проведен
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Организация = &Организация
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.НалоговыйПериод = &НалоговыйПериод";
	
	Если ЭтоНовый() Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка <> &Ссылка",""); 
	Иначе
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		НомерПервойСправки = ?(Выборка.КоличествоСформированныхСправок = NULL, 0, Выборка.КоличествоСформированныхСправок) + 1;
	Иначе	
		НомерПервойСправки = 1;
	КонецЕсли;  
	
	ГодПереходаНаКодыОКТМО = Год(ПроведениеРасчетов.ДатаПереходаНаКодыОКТМО());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ДатаЗакона229ФЗ", ПроведениеРасчетов.ДатаЗакона229ФЗ());
	Запрос.УстановитьПараметр("ГодНП",НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецНП",КонецГода(Дата(НалоговыйПериод,1,1)));
	Запрос.УстановитьПараметр("ДатаПодачиСведений", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КодПоОКАТО", СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ОКАТО_КПП));
	Запрос.УстановитьПараметр("КодПоОКТМО", СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ОКТМО_КПП));
	Запрос.УстановитьПараметр("КПП", ?(НалоговыйПериод + 1 < ГодПереходаНаКодыОКТМО, СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ОКАТО_КПП),СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ОКТМО_КПП)));
	Запрос.УстановитьПараметр("ОКАТО_КПП", ОКАТО_КПП);
	Запрос.УстановитьПараметр("ОКТМО_КПП", ОКТМО_КПП);
	Запрос.УстановитьПараметр("ПустойКодПоОКАТО","");
	Запрос.УстановитьПараметр("ПустойКодПоОКТМО","");
	Запрос.УстановитьПараметр("ПустойКПП","");
	
	Если НалоговыйПериод < 2011 Тогда
		ТекстЗапроса =  
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НДФЛСведенияОДоходах.ФизЛицо,
		|	НДФЛСведенияОДоходах.КодДохода,
		|	НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода
		|ПОМЕСТИТЬ ВТДоходы
		|ИЗ
		|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкаПоНДФЛВНалоговыйОрган.СотрудникиОрганизации КАК СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации
		|		ПО НДФЛСведенияОДоходах.ФизЛицо = СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Дата < &ДатаДокумента)
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Проведен)
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Организация = &Организация)
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.НалоговыйПериод = &ГодНП)
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.ОКАТО_КПП = &ОКАТО_КПП)
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка <> &Ссылка)
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.ОснованиеДляПредставленияСправок = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность))
		|ГДЕ
		|	НДФЛСведенияОДоходах.ОбособленноеПодразделение = &Организация
		|	И ГОД(НДФЛСведенияОДоходах.Период) = &ГодНП
		|	И НДФЛСведенияОДоходах.ПериодРегистрации < &ДатаПодачиСведений
		|	И ВЫБОР
		|			КОГДА НДФЛСведенияОДоходах.КодПоОКАТО <> &ПустойКодПоОКАТО
		|				ТОГДА НДФЛСведенияОДоходах.КодПоОКАТО
		|			КОГДА ЕСТЬNULL(НДФЛСведенияОДоходах.ПодразделениеОрганизации.КодПоОКАТО, &ПустойКодПоОКАТО) <> &ПустойКодПоОКАТО
		|				ТОГДА НДФЛСведенияОДоходах.ПодразделениеОрганизации.КодПоОКАТО
		|			ИНАЧЕ ЕСТЬNULL(НДФЛСведенияОДоходах.ОбособленноеПодразделение.КодПоОКАТО, &ПустойКодПоОКАТО)
		|		КОНЕЦ = &КодПоОКАТО
		|	И ВЫБОР
		|			КОГДА НДФЛСведенияОДоходах.КПП <> &ПустойКПП
		|				ТОГДА НДФЛСведенияОДоходах.КПП
		|			КОГДА ЕСТЬNULL(НДФЛСведенияОДоходах.ПодразделениеОрганизации.КПП, &ПустойКПП) <> &ПустойКПП
		|				ТОГДА НДФЛСведенияОДоходах.ПодразделениеОрганизации.КПП
		|			ИНАЧЕ ЕСТЬNULL(НДФЛСведенияОДоходах.ОбособленноеПодразделение.КПП, &ПустойКПП)
		|		КОНЕЦ = &КПП
		|	И СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыРегистра.ФизЛицо КАК ФизЛицо,
		|	ПериодыРегистра.МесяцНалоговогоПериода,
		|	ВЫБОР
		|		КОГДА СтатусНалогоплательщика.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Беженец)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
		|		ИНАЧЕ ЕСТЬNULL(СтатусНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент))
		|	КОНЕЦ КАК Статус
		|ПОМЕСТИТЬ ВТРезидентствоФизлицНаКонецМесяца
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Физлица.ФизЛицо КАК ФизЛицо,
		|		Физлица.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|		МАКСИМУМ(СтатусНалогоплательщика.Период) КАК Период
		|	ИЗ
		|		ВТДоходы КАК Физлица
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
		|			ПО Физлица.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
		|				И (СтатусНалогоплательщика.Период <= КОНЕЦПЕРИОДА(Физлица.МесяцНалоговогоПериода, МЕСЯЦ))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Физлица.ФизЛицо,
		|		Физлица.МесяцНалоговогоПериода) КАК ПериодыРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
		|		ПО ПериодыРегистра.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
		|			И ПериодыРегистра.Период = СтатусНалогоплательщика.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Статусы.ФизЛицо,
		|	ВЫБОР
		|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Беженец)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
		|		ИНАЧЕ Статусы.Статус
		|	КОНЕЦ КАК Статус
		|ПОМЕСТИТЬ ВТРезидентствоФизлицНаКонецГода
		|ИЗ
		|	РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СрезПоследних(
		|			&КонецНП,
		|			ФизЛицо В
		|				(ВЫБРАТЬ
		|					ФизическиеЛица.ФизЛицо
		|				ИЗ
		|					ВТДоходы КАК ФизическиеЛица)) КАК Статусы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Физлица.ФизЛицо,
		|	Физлица.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВЫБОР
		|		КОГДА Физлица.МесяцНалоговогоПериода < &ДатаЗакона229ФЗ
		|			ТОГДА ЕСТЬNULL(РезидентствоФизлицНаКонецГода.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент))
		|		ИНАЧЕ РезидентствоФизлицНаКонецМесяца.Статус
		|	КОНЕЦ КАК ТекущийСтатус,
		|	ЕСТЬNULL(РезидентствоФизлицНаКонецГода.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) КАК Статус
		|ПОМЕСТИТЬ ВТСтатусы
		|ИЗ
		|	ВТДоходы КАК Физлица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезидентствоФизлицНаКонецМесяца КАК РезидентствоФизлицНаКонецМесяца
		|		ПО Физлица.ФизЛицо = РезидентствоФизлицНаКонецМесяца.ФизЛицо
		|			И Физлица.МесяцНалоговогоПериода = РезидентствоФизлицНаКонецМесяца.МесяцНалоговогоПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезидентствоФизлицНаКонецГода КАК РезидентствоФизлицНаКонецГода
		|		ПО Физлица.ФизЛицо = РезидентствоФизлицНаКонецГода.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 3000
		|	НДФЛСведенияОДоходах.ФизЛицо КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
		|			ТОГДА ВЫБОР
		|					КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
		|							И Статусы.ТекущийСтатус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
		|				КОНЕЦ
		|		КОГДА Статусы.ТекущийСтатус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
		|			ТОГДА ВЫБОР
		|					КОГДА НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
		|					КОГДА НДФЛСведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
		|					ИНАЧЕ """"
		|				КОНЕЦ
		|		КОГДА НДФЛСведенияОДоходах.КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
		|	КОНЕЦ КАК Ставка
		|ИЗ
		|	ВТДоходы КАК НДФЛСведенияОДоходах
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусы КАК Статусы
		|		ПО НДФЛСведенияОДоходах.ФизЛицо = Статусы.ФизЛицо
		|			И НДФЛСведенияОДоходах.МесяцНалоговогоПериода = Статусы.МесяцНалоговогоПериода
		|
		|УПОРЯДОЧИТЬ ПО
		|	НДФЛСведенияОДоходах.ФизЛицо.Наименование";
	Иначе
		ТекстЗапроса =  
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 3000
		|	НДФЛСведенияОДоходах.ФизЛицо КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.ПустаяСсылка) КАК Ставка
		|ИЗ
		|	РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкаПоНДФЛВНалоговыйОрган.СотрудникиОрганизации КАК СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации
		|		ПО НДФЛСведенияОДоходах.ФизЛицо = СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Дата < &ДатаДокумента)
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Проведен)
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.Организация = &Организация)
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.НалоговыйПериод = &ГодНП)
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.ОКАТО_КПП = &ОКАТО_КПП)
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка <> &Ссылка)
		|			И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка.ОснованиеДляПредставленияСправок = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность))
		|ГДЕ
		|	НДФЛСведенияОДоходах.ОбособленноеПодразделение = &Организация
		|	И ГОД(НДФЛСведенияОДоходах.Период) = &ГодНП
		|	И НДФЛСведенияОДоходах.ПериодРегистрации < &ДатаПодачиСведений
		|	И ВЫБОР
		|			КОГДА НДФЛСведенияОДоходах.КодПоОКАТО <> &ПустойКодПоОКАТО
		|				ТОГДА НДФЛСведенияОДоходах.КодПоОКАТО
		|			КОГДА ЕСТЬNULL(НДФЛСведенияОДоходах.ПодразделениеОрганизации.КодПоОКАТО, &ПустойКодПоОКАТО) <> &ПустойКодПоОКАТО
		|				ТОГДА НДФЛСведенияОДоходах.ПодразделениеОрганизации.КодПоОКАТО
		|			ИНАЧЕ ЕСТЬNULL(НДФЛСведенияОДоходах.ОбособленноеПодразделение.КодПоОКАТО, &ПустойКодПоОКАТО)
		|		КОНЕЦ = &КодПоОКАТО
		|	И ВЫБОР
		|			КОГДА НДФЛСведенияОДоходах.КПП <> &ПустойКПП
		|				ТОГДА НДФЛСведенияОДоходах.КПП
		|			КОГДА ЕСТЬNULL(НДФЛСведенияОДоходах.ПодразделениеОрганизации.КПП, &ПустойКПП) <> &ПустойКПП
		|				ТОГДА НДФЛСведенияОДоходах.ПодразделениеОрганизации.КПП
		|			ИНАЧЕ ЕСТЬNULL(НДФЛСведенияОДоходах.ОбособленноеПодразделение.КПП, &ПустойКПП)
		|		КОНЕЦ = &КПП
		|	И СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник ЕСТЬ NULL 
		|	И НЕ НДФЛСведенияОДоходах.ВключатьВДекларациюПоНалогуНаПрибыль
		|
		|УПОРЯДОЧИТЬ ПО
		|	НДФЛСведенияОДоходах.ФизЛицо.Наименование";
		Если НалоговыйПериод + 1 >= ГодПереходаНаКодыОКТМО Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОКАТО", "ОКТМО");
		КонецЕсли;
		Если НалоговыйПериод < ГодПереходаНаКодыОКТМО Или Не НеВключатьДоходыПоЦеннымБумагам Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ НДФЛСведенияОДоходах.ВключатьВДекларациюПоНалогуНаПрибыль", "");
		КонецЕсли;
	КонецЕсли;

	Если ЭтоНовый() Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"И (СправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка <> &Ссылка)",""); 
	Иначе
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	СотрудникиОрганизации.Загрузить(СправкиПоНДФЛ.ДанныеСотрудников(Запрос.Выполнить().Выгрузить(), Дата, НалоговыйПериод));
	Для каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
		СтрокаТЧ.НомерСправки = НомерПервойСправки + СотрудникиОрганизации.Индекс(СтрокаТЧ)
	КонецЦикла;
	СтруктураДанных = СправкиПоНДФЛПолныеПрава.ДанныеОДоходахСПомесячнымУчетомСтатусаФЛ(СотрудникиОрганизации.Выгрузить(), НалоговыйПериод, Организация, ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация), ?(НалоговыйПериод + 1 < ГодПереходаНаКодыОКТМО, ОКАТО_КПП, ОКТМО_КПП), НачалоМесяца(Дата), НалоговыйПериод + 1 >= ГодПереходаНаКодыОКТМО, НалоговыйПериод >= ГодПереходаНаКодыОКТМО И НеВключатьДоходыПоЦеннымБумагам);
	СведенияОДоходах.Загрузить(СтруктураДанных.Доходы);
	СведенияОВычетах.Загрузить(СтруктураДанных.Вычеты);
	ТаблицаИтогов = СтруктураДанных.Итоги;
	Если НалоговыйПериод < 2011 Тогда
		Для каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТаблицаИтогов.Найти(СтрокаТЧ.НомерСправки, "НомерСправки"),, "Ставка");
		КонецЦикла;
	Иначе
		СуммыНалогов.Загрузить(ТаблицаИтогов);
		СтруктураПоиска = Новый Структура("НомерСправки");
		Для каждого СтрокаТЧ Из СотрудникиОрганизации Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
			СтрокиИтогов = ТаблицаИтогов.НайтиСтроки(СтруктураПоиска);
			Если СтрокиИтогов.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокиИтогов[0], "ДатаУведомления,КодНалоговогоОрганаУведомления,НомерУведомления");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // Автозаполнение()

// Пронумеровывает справки о доходах с учетом уже зафиксированных в ИБ
//
// Параметры
//   нет
//
Процедура ПронумероватьСправки() Экспорт 

	// Рассчитаем номер первой справки о доходах
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("НалоговыйПериод",НалоговыйПериод);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СведенияОДоходахФизлицРаботникиОрганизации.НомерСтроки) КАК КоличествоСформированныхСправок
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрган.СотрудникиОрганизации КАК СведенияОДоходахФизлицРаботникиОрганизации
	|ГДЕ
	|	СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Дата < &ДатаДокумента
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Проведен
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.Организация = &Организация
	|	И СведенияОДоходахФизлицРаботникиОрганизации.Ссылка.НалоговыйПериод = &НалоговыйПериод";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		НомерПервойСправки = ?(Выборка.КоличествоСформированныхСправок = NULL, 0, Выборка.КоличествоСформированныхСправок) + 1;
	Иначе	
		НомерПервойСправки = 1;
	КонецЕсли;  
	
	СправкиПоНДФЛ.ПеренумероватьСправкиДокумента(ЭтотОбъект, НомерПервойСправки);
	
КонецПроцедуры

// Переписывает номер справки (являющийся ключом соответствия т.ч. документов)
// в логически подчиненных т.ч.
//
// Параметры
// 	СтарыйНомерСправки, НовыйНомерСправки - Число, номера справок
// 	ТабличнаяЧасть - табличная часть документа
//
Процедура ПроставитьНовыйНомерСправки(СтарыйНомерСправки, НовыйНомерСправки, ТабличнаяЧасть) Экспорт

    Для каждого СтрокаТЧ Из ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерСправки",СтарыйНомерСправки)) Цикл
		СтрокаТЧ.НомерСправки = НовыйНомерСправки
	КонецЦикла;
	
КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура("Справка, Реестр2014, Реестр2014Дополнительный, Разделитель, Реестр2011, Реестр2011Дополнительный, Реестр2009", "2-НДФЛ", "Реестр справок 2014 года", "Реестр справок 2014 года (доп. форма)", , "Реестр справок 2011 года", "Реестр справок 2011 года (доп. форма)", "Реестр справок 2009 года");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправкаПоНДФЛВНалоговыйОрган.Дата,
	|	СправкаПоНДФЛВНалоговыйОрган.Ссылка,
	|	СправкаПоНДФЛВНалоговыйОрган.Организация,
	|	ВЫБОР
	|		КОГДА СправкаПоНДФЛВНалоговыйОрган.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СправкаПоНДФЛВНалоговыйОрган.Организация
	|		ИНАЧЕ СправкаПоНДФЛВНалоговыйОрган.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	СправкаПоНДФЛВНалоговыйОрган.НалоговыйПериод,
	|	СправкаПоНДФЛВНалоговыйОрган.ОКАТО_КПП,
	|	СправкаПоНДФЛВНалоговыйОрган.ОКТМО_КПП,
	|	СправкаПоНДФЛВНалоговыйОрган.ОснованиеДляПредставленияСправок,
	|	СправкаПоНДФЛВНалоговыйОрган.ГлавныйБухгалтер,
	|	СправкаПоНДФЛВНалоговыйОрган.СправкуПодписал,
	|	СправкаПоНДФЛВНалоговыйОрган.ДолжностьПодписавшегоЛица
	|ИЗ
	|	Документ.СправкаПоНДФЛВНалоговыйОрган КАК СправкаПоНДФЛВНалоговыйОрган
	|ГДЕ
	|	СправкаПоНДФЛВНалоговыйОрган.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части документам
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Если НалоговыйПериод > 2010 и Не СпециальныйДокумент2011года Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник
		|ПОМЕСТИТЬ ВТДанныеДляПроверки
		|ИЗ
		|	Документ.СправкаПоНДФЛВНалоговыйОрган.СотрудникиОрганизации КАК СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации
		|ГДЕ
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ссылка = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
		|	ВЫБОР
		|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
		|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
		|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
		|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
		|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.ПустаяСсылка)
		|	КОНЕЦ КАК СтавкаНалогообложенияРезидента,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Задолженность
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.СправкаПоНДФЛВНалоговыйОрган.СуммыНалогов КАК СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации
		|ГДЕ
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ссылка = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник,
		|	МИНИМУМ(ПовторяющиесяНомераСправок.НомерСтроки) КАК НомерСтрокиПовторяющегосяНомераСправки,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ПовторяющиесяНомераСправок.НомерСтроки) ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПовторяющиесяНомераСправок,
		|	МИНИМУМ(ПовторяющиесяСправки.НомерСтроки) КАК НомерСтрокиПовторяющейсяСправки,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ПовторяющиесяСправки.НомерСтроки) ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПовторяющиесяСправки,
		|	ДанныеДокумента.Ставка,
		|	ДанныеДокумента.СтавкаНалогообложенияРезидента,
		|	ДанныеДокумента.Задолженность
		|ИЗ
		|	ВТДанныеДляПроверки КАК СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДляПроверки КАК ПовторяющиесяНомераСправок
		|		ПО СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки < ПовторяющиесяНомераСправок.НомерСтроки
		|			И СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки = ПовторяющиесяНомераСправок.НомерСправки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДляПроверки КАК ПовторяющиесяСправки
		|		ПО СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки < ПовторяющиесяСправки.НомерСтроки
		|			И СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник = ПовторяющиесяСправки.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ДанныеДокумента
		|		ПО СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки = ДанныеДокумента.НомерСправки
		|
		|СГРУППИРОВАТЬ ПО
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
		|	ДанныеДокумента.Ставка,
		|	ДанныеДокумента.СтавкаНалогообложенияРезидента,
		|	ДанныеДокумента.Задолженность";
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник,
		|	ВЫБОР
		|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
		|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
		|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
		|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
		|		КОГДА СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.ПустаяСсылка)
		|	КОНЕЦ КАК СтавкаНалогообложенияРезидента,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Задолженность
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.СправкаПоНДФЛВНалоговыйОрган.СотрудникиОрганизации КАК СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации
		|ГДЕ
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ссылка = &ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.СтавкаНалогообложенияРезидента,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Задолженность,
		|	МИНИМУМ(ПовторяющиесяНомераСправок.НомерСтроки) КАК НомерСтрокиПовторяющегосяНомераСправки,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ПовторяющиесяНомераСправок.НомерСтроки) ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПовторяющиесяНомераСправок,
		|	МИНИМУМ(ПовторяющиесяСправки.НомерСтроки) КАК НомерСтрокиПовторяющейсяСправки,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ПовторяющиесяСправки.НомерСтроки) ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПовторяющиесяСправки
		|ИЗ
		|	ВТДанныеДокумента КАК СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ПовторяющиесяНомераСправок
		|		ПО СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки < ПовторяющиесяНомераСправок.НомерСтроки
		|			И СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки = ПовторяющиесяНомераСправок.НомерСправки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ПовторяющиесяСправки
		|		ПО СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки < ПовторяющиесяСправки.НомерСтроки
		|			И СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник = ПовторяющиесяСправки.Сотрудник
		|			И СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка = ПовторяющиесяСправки.Ставка
		|
		|СГРУППИРОВАТЬ ПО
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСтроки,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Сотрудник,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Ставка,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.СтавкаНалогообложенияРезидента,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.НомерСправки,
		|	СправкаПоНДФЛВНалоговыйОрганРаботникиОрганизации.Задолженность";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НалоговыйПериод) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан налоговый период, за который подаются сведения!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.НалоговыйПериод + 1 < Год(ПроведениеРасчетов.ДатаПереходаНаКодыОКТМО()) Тогда
		Если НЕ ЗначениеЗаполнено(СтрЗаменить(ВыборкаПоШапкеДокумента.ОКАТО_КПП, "/","")) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан код по ОКАТО, по которому подаются сведения!", Отказ, Заголовок);
		Иначе
			Если СтрДлина(СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКАТО_КПП)) <> 11 Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Неверно указан код по ОКАТО!", Отказ, Заголовок);
			КонецЕсли;
			Если ОбщегоНазначенияЗКПереопределяемый.ЭтоЮрЛицо(ВыборкаПоШапкеДокумента.Организация) Тогда
				КПП = СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКАТО_КПП);
				Если НЕ ЗначениеЗаполнено(КПП) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан КПП!", Отказ, Заголовок);
				ИначеЕсли СтрДлина(СокрЛП(КПП)) <> 9 Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Неверно указан КПП!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(СтрЗаменить(ВыборкаПоШапкеДокумента.ОКТМО_КПП, "/","")) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан код по ОКТМО, по которому подаются сведения!", Отказ, Заголовок);
		Иначе
			
			Если СтрДлина(СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКТМО_КПП)) < 8 Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Неверно указан код по ОКТМО!", Отказ, Заголовок);
			КонецЕсли;
			Если ОбщегоНазначенияЗКПереопределяемый.ЭтоЮрЛицо(ВыборкаПоШапкеДокумента.Организация) Тогда
				КПП = СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКТМО_КПП);
				Если НЕ ЗначениеЗаполнено(КПП) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан КПП!", Отказ, Заголовок);
				ИначеЕсли СтрДлина(СокрЛП(КПП)) <> 9 Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Неверно указан КПП!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОснованиеДляПредставленияСправок) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан вид справок!", Отказ, Заголовок);
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(ИмяФайла)) < 50 Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Неверно указано имя файла!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строки документа.
Процедура ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоШапкеДокумента,ВыборкаПоРаботникиОрганизации, Отказ, Заголовок)

	НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) +
								""" табл. части ""Сотрудники организации"": ";
									
	Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указано физическое лицо!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ЕстьПовторяющиесяСправки Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "справка повторяется в другой строке документа (" + ВыборкаПоРаботникиОрганизации.НомерСтрокиПовторяющейсяСправки + ")!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.НомерСправки) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указан номер справки!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоРаботникиОрганизации.ЕстьПовторяющиесяНомераСправок Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "номер справки повторяется в другой строке документа (" + ВыборкаПоРаботникиОрганизации.НомерСтрокиПовторяющегосяНомераСправки + ")!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.Ставка) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указана ставка налогообложения дохода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.Задолженность) И ВыборкаПоШапкеДокумента.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указана передаваемая в налоговый орган задолженность!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ)
	
	// Вычислим дату для заполнения измерения "МесяцНалоговогоПериода"
	КонецНП = Дата(ВыборкаПоШапкеДокумента.НалоговыйПериод, 12 , 31);
	Если Дата < КонецНП Тогда
		МесяцНалоговогоПериода = НачалоМесяца(Дата);
	Иначе	
		МесяцНалоговогоПериода = НачалоМесяца(КонецНП);
	КонецЕсли; 
	
	Движение = Движения.НДФЛРасчетыСБюджетом.Добавить();
	// Свойства
	Движение.Период                 		= Дата;
	Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
	// Измерения
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	Движение.ФизЛицо                		= ВыборкаПоТЧ.Сотрудник;
	Движение.СтавкаНалогообложенияРезидента	= ВыборкаПоТЧ.СтавкаНалогообложенияРезидента;
	Движение.МесяцНалоговогоПериода      	= МесяцНалоговогоПериода;
	// Ресурсы
	Движение.Налог							= ВыборкаПоТЧ.Задолженность; 
	// Реквизиты
	Движение.ОбособленноеПодразделение  	= ВыборкаПоШапкеДокумента.Организация;
	Движение.ВидСтроки						= Перечисления.НДФЛРасчетыСБюджетомВидСтроки.ПереданоНаВзыскание;
	
	Движение.КодПоОКАТО						= СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКАТО_КПП);
	Движение.КодПоОКТМО						= СправкиПоНДФЛ.КодОКАТОизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКТМО_КПП);
	Движение.КПП							= СправкиПоНДФЛ.КППизСуммыОКАТОиКПП(ВыборкаПоШапкеДокумента.ОКАТО_КПП);
	
	Движение = Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Добавить();
	// Свойства
	Движение.Период                 		= Дата;
	Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
	// Измерения
	Движение.Организация					= ВыборкаПоШапкеДокумента.Организация;
	Движение.ФизЛицо                		= ВыборкаПоТЧ.Сотрудник;
	Движение.Ставка							= ВыборкаПоТЧ.Ставка;
	Движение.МесяцНалоговогоПериода      	= МесяцНалоговогоПериода;
	Движение.ОКАТО_КПП						= ВыборкаПоШапкеДокумента.ОКАТО_КПП;
	Движение.ОКТМО_КПП						= ВыборкаПоШапкеДокумента.ОКТМО_КПП;
	// Ресурсы
	Движение.Сумма							= -ВыборкаПоТЧ.Задолженность; 
	
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	СпециальныйДокумент2011года = Ложь;
	СпециальныйДокумент2013года = Ложь;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если Проведен И (ПринятоНалоговымОрганом Или СпециальныйДокумент2011года) Тогда
		Возврат
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ И ВыборкаПоШапкеДокумента.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда

			// получим реквизиты табличной части
			ВыборкаПоРаботникиОрганизации = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникиОрганизации(ВыборкаПоШапкеДокумента,ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
				
				Если Не Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли; 

	КонецЕсли;
	
	Если Отказ тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ФАЙЛА СВЕДЕНИЙ
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//При проведении файл формируем заново 
		ТекстФайла = СформироватьВыходнойФайл(Отказ);
	#Иначе
		// На сервере и во внешнем соединении документ проводить нельзя
		ТекстФайла = "";
		Отказ = Истина;
	#КонецЕсли
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();

	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл-пачка сведений о доходах физических лиц (формы 2-НДФЛ)";
	Запись.Данные = ТекстФайла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(СотрудникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Сотрудник");

	Если РежимЗаписи = РежимЗаписиДокумента.Запись И НалоговыйПериод = 0 Тогда // документ без налогового периода неконсистентен
		НалоговыйПериод = Макс(Год(Дата),2010);
	КонецЕсли;
	Если Не СпециальныйДокумент2011года И НалоговыйПериод > 2010 Тогда
		Если ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда
			Для каждого СтрокаТЧ Из СуммыНалогов Цикл
			    СтрокаТЧ.Удержано = 0;
			    СтрокаТЧ.ИзлишнеУдержано = 0;
			    СтрокаТЧ.Перечислено = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	КодТерритории = ?(НалоговыйПериод + ?(СпециальныйДокумент2013года, 0, 1) < Год(ПроведениеРасчетов.ДатаПереходаНаКодыОКТМО()), ОКАТО_КПП, ОКТМО_КПП);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Отказ = ПринятоНалоговымОрганом;
	Если Не Отказ Тогда
		Для Каждого Набор Из Движения Цикл
			Набор.Очистить();
			Набор.Записать();
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

