////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПечатьСЗВ_М" Тогда
		
		ТабДокумент = ПечатьСЗВ_М();
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним), , ТабДокумент);
		
	КонецЕсли;

КонецФункции // Печать

Функция ПечатьСЗВ_М()
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Макет = ПолучитьМакет("ФормаСЗВ_М");
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЗВ_М";
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника
	ОбластьМакетаПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрокаРаботник"); // строка работника
	
	Заголовок = "Печать документа: " + СокрЛП(ЭтотОбъект);
	Отказ = Ложь;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаПоШапкеДокумента); // Шапка документа.
	ОбластьМакетаШапка.Параметры.НазваниеОрганизации = ИсправленныйСимвольныйЭлемент(ОбластьМакетаШапка.Параметры.НазваниеОрганизации, Ложь);
	ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаПоШапкеДокумента); // Для подвала.
	
	ВыборкаПоРаботникиОрганизации =	СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	ВыведеноСтрок = 0;
	Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл
		
		ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
		
		Если ВыведеноСтрок = 0 Тогда // подготовим новую страницу
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ДокументРезультат.Вывести(ОбластьМакетаШапка);
		КонецЕсли;
		ВыведеноСтрок = ВыведеноСтрок + 1;
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоРаботникиОрганизации);
		ОбластьМакета.Параметры.НомерПП = ВыведеноСтрок;
		ДокументРезультат.Вывести(ОбластьМакета);
		Если ВыведеноСтрок = 25 Тогда // выведем заполненную страницу
			ДокументРезультат.Вывести(ОбластьМакетаПодвал);
			ВыведеноСтрок = 0;
		КонецЕсли;
	КонецЦикла;
	Если ВыведеноСтрок = 0 Тогда
		ДокументРезультат.Вывести(ОбластьМакетаШапка);
	КонецЕсли;
	Для Сч = ВыведеноСтрок + 1 По 25 Цикл
		ДокументРезультат.Вывести(ОбластьМакетаПустаяСтрока);
	КонецЦикла;
	ДокументРезультат.Вывести(ОбластьМакетаПодвал);
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Возврат ДокументРезультат
	
КонецФункции 

#КонецЕсли

Функция ИсправленныйСимвольныйЭлемент(СтроковоеЗначение, ИспользоватьВРег = Истина)

	НовоеЗначение = ?(ИспользоватьВРег, ВРег(СтроковоеЗначение), СтроковоеЗначение); // традиционно в файле строки передаются в верхнем регистре
	// правило ВСЗЛ.ОП.1.6: Лидирующие пробелы в символьных элементах не допускаются
    НовоеЗначение = СокрЛП(НовоеЗначение);
	// правило ВСЗЛ.ОП.1.7: Если в символьном элементе использован символ '-', то рядом с этим символом пробелы недопустимы
	Пока Найти(НовоеЗначение," -") > 0 Или Найти(НовоеЗначение,"- ") > 0 Цикл
		НовоеЗначение = СтрЗаменить(НовоеЗначение," -","-");
	    НовоеЗначение = СтрЗаменить(НовоеЗначение,"- ","-");
	КонецЦикла;
	// правило ВСЗЛ.ОП.1.8: Наличие двух и более пробелов подряд внутри символьных элементов не допускается (только один)
	Пока Найти(НовоеЗначение,"  ") > 0 Цикл
		НовоеЗначение = СтрЗаменить(НовоеЗначение,"  "," ");
	КонецЦикла;
	
	Возврат НовоеЗначение
	
КонецФункции 


// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
Процедура Автозаполнение() Экспорт

	СписокПустыхНомеровПФР = Новый СписокЗначений;
	СписокПустыхНомеровПФР.Добавить("");
	СписокПустыхНомеровПФР.Добавить("   -   -      ");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Дата",					Макс(КонецМесяца(ОтчетныйПериод), КонецДня(Дата)));
	Запрос.УстановитьПараметр("СписокПустыхНомеровПФР",	СписокПустыхНомеровПФР);
	Запрос.УстановитьПараметр("НачалоМесяца",			НачалоМесяца(ОтчетныйПериод));
	Запрос.УстановитьПараметр("КонецМесяца",			КонецМесяца(ОтчетныйПериод));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Сотрудники.Физлицо КАК ФизЛицо,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиГоловнойОрганизации
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Организация = &ГоловнаяОрганизация
	|	И Сотрудники.ДатаПриемаНаРаботу <= &КонецМесяца
	|	И Сотрудники.ДатаПриемаНаРаботу <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (Сотрудники.ДатаУвольнения >= &НачалоМесяца
	|			ИЛИ Сотрудники.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|	И НЕ Сотрудники.Физлицо.СтраховойНомерПФР В (&СписокПустыхНомеровПФР)
	|	И НЕ Сотрудники.ЯвляетсяСтудентомРаботающимВСтудотряде
	|	И &ПервоеДополнительноеУсловие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТРаботающиеВОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоМесяца,
	|			Организация = &ГоловнаяОрганизация
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						Сотрудники.Сотрудник
	|					ИЗ
	|						ВТСотрудникиГоловнойОрганизации КАК Сотрудники)) КАК РаботникиОрганизации
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &НачалоМесяца
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник.Физлицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.ОбособленноеПодразделение = &Организация
	|	И РаботникиОрганизаций.Сотрудник В
	|			(ВЫБРАТЬ
	|				Сотрудники.Сотрудник
	|			ИЗ
	|				ВТСотрудникиГоловнойОрганизации КАК Сотрудники)
	|	И РаботникиОрганизаций.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТРаботающиеВОрганизации КАК Сотрудники
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецМесяца
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоМесяца
	|	И НЕ ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо.СтраховойНомерПФР В (&СписокПустыхНомеровПФР)
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация
	|	И НЕ ДоговорНаВыполнениеРаботСФизЛицом.ЗаключенСоСтудентомРаботающимВСтудотряде
	|	И ЕСТЬNULL(ДоговорНаВыполнениеРаботСФизЛицом.ВидРасчета.КодДоходаСтраховыеВзносы, ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.НеЯвляетсяОбъектом)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ПервоеДополнительноеУсловие", СтрЗаменить(ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников(), "Сотрудник.", "Сотрудники."));
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат[0].Количество = 0 Тогда
		Возврат
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	|	СписокФизлиц.ФизЛицо,
	|	СписокФизлиц.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	СписокФизлиц.ФизЛицо.ИНН КАК ИНН,
	|	СписокФизлиц.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР
	|ИЗ
	|	ВТСотрудники КАК СписокФизлиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&КонецМесяца,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						Сотрудники.ФизЛицо
	|					ИЗ
	|						ВТСотрудники КАК Сотрудники)) КАК ФИОФизЛицСрезПоследних
	|		ПО СписокФизлиц.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
	|				&КонецМесяца,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						Сотрудники.ФизЛицо
	|					ИЗ
	|						ВТСотрудники КАК Сотрудники)) КАК ГражданствоФизЛицСрезПоследних
	|		ПО СписокФизлиц.ФизЛицо = ГражданствоФизЛицСрезПоследних.ФизЛицо
	|			И (ГражданствоФизЛицСрезПоследних.ДатаРегистрацииИзменений <= &Дата)
	|ГДЕ
	|	НЕ ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.ВидЗастрахованногоЛица, ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ)) В (ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыНестрахуемые), ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыИзЕАЭС), ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСтрахуемыеФСС))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицоНаименование";
	ВыборкаПоРаботникиОрганизации = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл
		СтрокаРаботника = РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаботника, ВыборкаПоРаботникиОрганизации);
		Если "" + СтрокаРаботника.Фамилия + СтрокаРаботника.Имя + СтрокаРаботника.Отчество = ""  Тогда
			ОбщегоНазначенияЗК.ФамилияИнициалыФизЛица(ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование,СтрокаРаботника.Фамилия,СтрокаРаботника.Имя,СтрокаРаботника.Отчество);
		КонецЕсли;
		СтрокаРаботника.Фамилия = ИсправленныйСимвольныйЭлемент(СтрокаРаботника.Фамилия, Ложь);
		СтрокаРаботника.Имя = ИсправленныйСимвольныйЭлемент(СтрокаРаботника.Имя, Ложь);
		СтрокаРаботника.Отчество = ИсправленныйСимвольныйЭлемент(СтрокаРаботника.Отчество, Ложь);
	КонецЦикла;

КонецПроцедуры

// заполняет данные по физлицу
//
Процедура ЗаполнитьДанныеПоФизЛицу(ФизЛицо, СтрокаТабличнойЧасти) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо",			ФизЛицо);
	Запрос.УстановитьПараметр("ДатаАктуальности" , 	Дата);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	|	ФизическиеЛица.ИНН,
	|	ФизическиеЛица.СтраховойНомерПФР
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизЛицо"; 
				   
	ВыборкаПоРаботнику = Запрос.Выполнить().Выбрать();

	Если ВыборкаПоРаботнику.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаПоРаботнику);
		СтрокаТабличнойЧасти.Фамилия = ИсправленныйСимвольныйЭлемент(СтрокаТабличнойЧасти.Фамилия, Ложь);
		СтрокаТабличнойЧасти.Имя = ИсправленныйСимвольныйЭлемент(СтрокаТабличнойЧасти.Имя, Ложь);
		СтрокаТабличнойЧасти.Отчество = ИсправленныйСимвольныйЭлемент(СтрокаТабличнойЧасти.Отчество, Ложь);
	КонецЕсли;

КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатьСЗВ_М","СЗВ-М");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ) Экспорт
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Формирование файла по документу: " + СокрЛП(ЭтотОбъект);
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	Если Не ВыборкаПоШапкеДокумента.Следующий() Тогда
		Отказ = Истина;
		Возврат "";
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	ВыборкаПоРаботникиОрганизации =	СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать();
	
	// Загружаем формат файла сведений
	МакетФормата = ПолучитьОбщийМакет("ФорматПФР_2016");
	
	ФорматСЗВ_М = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СЗВ_М");
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения",ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_М.ДатаЗаполнения));
	ФорматСЗВ_М.Удалить("ДатаЗаполнения");
	ФорматЗЛ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_М.СписокЗЛ.Значение);
	ФорматСЗВ_М.Удалить("СписокЗЛ");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/ВС/СЗВ-М/2017-01-01");
	Атрибуты.Вставить("xmlns:АФ", "http://пф.рф/АФ");
	Атрибуты.Вставить("xmlns:АФ2", "http://пф.рф/АФ/2017-01-01");
	Атрибуты.Вставить("xmlns:УТ", "http://пф.рф/унифицированныеТипы/2014-01-01");
	УзелПФР = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	// Данные формы и страхователя
	ФорматСЗВ_М.ТипФормы.Значение = ВыборкаПоШапкеДокумента.ТипФормы;
	НаборЗаписейСтрахователь = ФорматСЗВ_М.Страхователь;
	НаборЗаписейСтрахователь.Значение.РегНомер = ВыборкаПоШапкеДокумента.РегНомерПФР;
	НаборЗаписейСтрахователь.Значение.НаименованиеКраткое = ИсправленныйСимвольныйЭлемент(ВыборкаПоШапкеДокумента.НазваниеОрганизации);
	НаборЗаписейСтрахователь.Значение.ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейСтрахователь.Значение.КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейСтрахователь.Значение.Удалить("КПП");
		НаборЗаписейСтрахователь.Поля.Удалить(НаборЗаписейСтрахователь.Поля.Найти("КПП","ИмяПоля"));
	КонецЕсли;
	НаборЗаписейОтчетныйПериод = ФорматСЗВ_М.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Месяц = Месяц(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
	НаборЗаписейОтчетныйПериод.КалендарныйГод = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
	
	УзелФормы = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "СЗВ-М", "");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, ФорматСЗВ_М);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайла) Тогда
		ЧастиИмениФайла = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайла),"_");
		НаборЗаписейСлужебнаяИнформация.АФ__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ__ДатаВремя.Значение = ПроцедурыПерсонифицированногоУчета.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	НаборЗаписейСлужебнаяИнформация.АФ2__ПрограммаПодготовки.Значение = ВРег("1С:" + РегламентированнаяОтчетность.ИДКонфигурации()) + " " + РегламентированнаяОтчетность.РедакцияКонфигурации();
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация",""), НаборЗаписейСлужебнаяИнформация);
	
	Если ВыборкаПоРаботникиОрганизации.Количество() > 0 Тогда
	
		УзелСпискаЗЛ = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелФормы, "СписокЗЛ", "");
		СписокОбработанныхАнкет = Новый Соответствие;
	
		НомерДокумента = 0;
		Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл
			
			НомерДокумента = НомерДокумента + 1;
			
			//Контроль дубля строк
			Если СписокОбработанныхАнкет.Получить(ВыборкаПоРаботникиОрганизации.ФизЛицо) = Неопределено Тогда
				СписокОбработанныхАнкет.Вставить(ВыборкаПоРаботникиОрганизации.ФизЛицо, Истина);
			Иначе
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Строка №" + ВыборкаПоРаботникиОрганизации.НомерСтроки + ": Сотрудник " + ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " указан(а) в документе дважды!", Отказ);
			КонецЕсли;
			
			ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписейЗЛ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЗЛ);
			НаборЗаписейФИО = НаборЗаписейЗЛ.ФИО.Значение;
			НаборЗаписейФИО.УТ__Фамилия = ИсправленныйСимвольныйЭлемент(ВыборкаПоРаботникиОрганизации.Фамилия);
			НаборЗаписейФИО.УТ__Имя = ИсправленныйСимвольныйЭлемент(ВыборкаПоРаботникиОрганизации.Имя);
			НаборЗаписейФИО.УТ__Отчество = ИсправленныйСимвольныйЭлемент(ВыборкаПоРаботникиОрганизации.Отчество);
			
			НаборЗаписейЗЛ.СНИЛС.Значение = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ИНН) Тогда
				НаборЗаписейЗЛ.ИНН.Значение = ВыборкаПоРаботникиОрганизации.ИНН;
			Иначе
				НаборЗаписейЗЛ.Удалить("ИНН")
			КонецЕсли;
			
			Атрибуты = Новый Соответствие;
			Атрибуты.Вставить("НомерПП", Формат(НомерДокумента, "ЧГ=0"));
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСпискаЗЛ, "ЗЛ", "", Атрибуты), НаборЗаписейЗЛ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;
	
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата,"ДФ=yyyy-MM-dd");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML(, "UTF-8");
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML);
	ТекстФайла = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции // СформироватьВыходнойФайл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Руководитель);
	Запрос.УстановитьПараметр("ДатаФИО",		Дата);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ФизическиеЛица.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|	КОНЕЦ КАК ФИОРуководителя
	|ПОМЕСТИТЬ ВТФИОРуководителя
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаФИО, ФизЛицо = &Руководитель) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Руководитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ФИОФизЛиц.ФИОРуководителя, """") КАК Руководитель,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Дата,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Номер,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация,
	|	ВЫБОР
	|		КОГДА СведенияОЗастрахованныхЛицахСЗВ_М.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СведенияОЗастрахованныхЛицахСЗВ_М.Организация
	|		ИНАЧЕ СведенияОЗастрахованныхЛицахСЗВ_М.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация.Код,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация.Наименование,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация.НаименованиеСокращенное КАК НазваниеОрганизации,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация.РегистрационныйНомерПФР КАК РегНомерПФР,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация.ИНН КАК ИНН,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация.КПП КАК КПП,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация.ЮрФизЛицо,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация.ОГРН,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация.КодОрганаПФР КАК КодОрганаПФР,
	|	ЕСТЬNULL(СведенияОЗастрахованныхЛицахСЗВ_М.ДолжностьРуководителя.Наименование, """") КАК РуководительДолжность,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ТипФормы,
	|	ВЫБОР
	|		КОГДА СведенияОЗастрахованныхЛицахСЗВ_М.ТипФормы = 2
	|			ТОГДА ""доп""
	|		КОГДА СведенияОЗастрахованныхЛицахСЗВ_М.ТипФормы = 3
	|			ТОГДА ""отмн""
	|		ИНАЧЕ ""исхд""
	|	КОНЕЦ КАК ТипФормыСтрокой,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ОтчетныйПериод,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ПринятоВПФР,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ИмяФайла
	|ИЗ
	|	Документ.СведенияОЗастрахованныхЛицахСЗВ_М КАК СведенияОЗастрахованныхЛицахСЗВ_М
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОРуководителя КАК ФИОФизЛиц
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Выбирает данные, необходимые для заполнения утвержденных форм как из спр-ка
//  физлиц, так и из соотв. регистров сведений
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса к данным работников документа.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
 	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("НачалоМесяца",		НачалоМесяца(ОтчетныйПериод));
	Запрос.УстановитьПараметр("КонецМесяца",		КонецМесяца(ОтчетныйПериод));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("КоличествоСотрудников",РаботникиОрганизации.Количество());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОЗастрахованныхЛицахСЗВ_МРаботникиОрганизации.Ссылка КАК Ссылка,
	|	СведенияОЗастрахованныхЛицахСЗВ_МРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	СведенияОЗастрахованныхЛицахСЗВ_МРаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	СведенияОЗастрахованныхЛицахСЗВ_МРаботникиОрганизации.Фамилия КАК Фамилия,
	|	СведенияОЗастрахованныхЛицахСЗВ_МРаботникиОрганизации.Имя КАК Имя,
	|	СведенияОЗастрахованныхЛицахСЗВ_МРаботникиОрганизации.Отчество КАК Отчество,
	|	СведенияОЗастрахованныхЛицахСЗВ_МРаботникиОрганизации.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	СведенияОЗастрахованныхЛицахСЗВ_МРаботникиОрганизации.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	СведенияОЗастрахованныхЛицахСЗВ_МРаботникиОрганизации.ИНН,
	|	""Сотрудники"" КАК ИмяТЧ
	|ПОМЕСТИТЬ ВТСписокФизлиц
	|ИЗ
	|	Документ.СведенияОЗастрахованныхЛицахСЗВ_М.РаботникиОрганизации КАК СведенияОЗастрахованныхЛицахСЗВ_МРаботникиОрганизации
	|ГДЕ
	|	СведенияОЗастрахованныхЛицахСЗВ_МРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОЗастрахованныхЛицахСЗВ_МУчредители.Ссылка,
	|	СведенияОЗастрахованныхЛицахСЗВ_МУчредители.НомерСтроки + &КоличествоСотрудников,
	|	СведенияОЗастрахованныхЛицахСЗВ_МУчредители.ФизЛицо,
	|	СведенияОЗастрахованныхЛицахСЗВ_МУчредители.Фамилия,
	|	СведенияОЗастрахованныхЛицахСЗВ_МУчредители.Имя,
	|	СведенияОЗастрахованныхЛицахСЗВ_МУчредители.Отчество,
	|	СведенияОЗастрахованныхЛицахСЗВ_МУчредители.ФизЛицо.Наименование,
	|	СведенияОЗастрахованныхЛицахСЗВ_МУчредители.СтраховойНомерПФР,
	|	СведенияОЗастрахованныхЛицахСЗВ_МУчредители.ИНН,
	|	""Учредители""
	|ИЗ
	|	Документ.СведенияОЗастрахованныхЛицахСЗВ_М.Учредители КАК СведенияОЗастрахованныхЛицахСЗВ_МУчредители
	|ГДЕ
	|	СведенияОЗастрахованныхЛицахСЗВ_МУчредители.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Физлицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Физлицо В
	|			(ВЫБРАТЬ
	|				СписокФизЛиц.ФизЛицо
	|			ИЗ
	|				ВТСписокФизлиц КАК СписокФизЛиц)
	|	И Сотрудники.Организация = &ГоловнаяОрганизация
	|	И Сотрудники.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И Сотрудники.ДатаПриемаНаРаботу <= &КонецМесяца
	|	И (Сотрудники.ДатаУвольнения >= &НачалоМесяца
	|			ИЛИ Сотрудники.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецМесяца
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоМесяца
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо В
	|			(ВЫБРАТЬ
	|				СписокФизЛиц.ФизЛицо
	|			ИЗ
	|				ВТСписокФизлиц КАК СписокФизЛиц)
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Работники.НомерСтроки КАК НомерСтроки,
	|	Работники.ИмяТЧ,
	|	Работники.ФизЛицо КАК ФизЛицо,
	|	Работники.ФизЛицоНаименование КАК ФизЛицоНаименование,
	|	Работники.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	Работники.Фамилия,
	|	Работники.Имя,
	|	Работники.Отчество,
	|	Работники.ИНН,
	|	ВЫБОР
	|		КОГДА Работники.ИмяТЧ = ""Учредители""
	|			ТОГДА ИСТИНА
	|		КОГДА РаботникиОрганизации.ФизЛицо ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(СписокФизлиц.НомерСтроки) ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА МИНИМУМ(СписокФизлиц.НомерСтроки) > &КоличествоСотрудников
	|					ТОГДА МИНИМУМ(СписокФизлиц.НомерСтроки) - &КоличествоСотрудников
	|				ИНАЧЕ МИНИМУМ(СписокФизлиц.НомерСтроки)
	|			КОНЕЦ
	|	КОНЕЦ КАК НомерСтрокиПовтора,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(СНИЛСы.НомерСтроки) ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА МИНИМУМ(СНИЛСы.НомерСтроки) > &КоличествоСотрудников
	|					ТОГДА МИНИМУМ(СНИЛСы.НомерСтроки) - &КоличествоСотрудников
	|				ИНАЧЕ МИНИМУМ(СНИЛСы.НомерСтроки)
	|			КОНЕЦ
	|	КОНЕЦ КАК НомерСтрокиПовтораСНИЛС,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(СписокФизлиц.НомерСтроки) ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА МИНИМУМ(СписокФизлиц.НомерСтроки) > &КоличествоСотрудников
	|					ТОГДА ""Учредители""
	|				ИНАЧЕ ""Сотрудники""
	|			КОНЕЦ
	|	КОНЕЦ КАК ИмяТЧПовтора,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(СНИЛСы.НомерСтроки) ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА МИНИМУМ(СНИЛСы.НомерСтроки) > &КоличествоСотрудников
	|					ТОГДА ""Учредители""
	|				ИНАЧЕ ""Сотрудники""
	|			КОНЕЦ
	|	КОНЕЦ КАК ИмяТЧПовтораСНИЛС
	|ИЗ
	|	ВТСписокФизлиц КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК РаботникиОрганизации
	|		ПО Работники.ФизЛицо = РаботникиОрганизации.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСписокФизлиц КАК СписокФизлиц
	|		ПО Работники.ФизЛицо = СписокФизлиц.ФизЛицо
	|			И Работники.НомерСтроки < СписокФизлиц.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСписокФизлиц КАК СНИЛСы
	|		ПО Работники.СтраховойНомерПФР = СНИЛСы.СтраховойНомерПФР
	|			И Работники.НомерСтроки < СНИЛСы.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	Работники.НомерСтроки,
	|	Работники.ФизЛицо,
	|	Работники.ФизЛицоНаименование,
	|	Работники.СтраховойНомерПФР,
	|	Работники.Фамилия,
	|	Работники.Имя,
	|	Работники.Отчество,
	|	Работники.ИНН,
	|	ВЫБОР
	|		КОГДА Работники.ИмяТЧ = ""Учредители""
	|			ТОГДА ИСТИНА
	|		КОГДА РаботникиОрганизации.ФизЛицо ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	Работники.ИмяТЧ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация, которая подает сведения!"), Отказ, Заголовок);
	Иначе
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КодОрганаПФР) Тогда	
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан код терр.органа ПФ РФ, в который подаются сведения!", Отказ, Заголовок);
		ИначеЕсли СтрДлина(СтрЗаменить(ВыборкаПоШапкеДокумента.КодОрганаПФР, "-", "")) <> 6 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Код терр.органа ПФ РФ указан неверно!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РегНомерПФР) Тогда	
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан рег.номер в ПФ РФ!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайла) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указано имя файла!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части """ + ВыборкаПоСтрокамДокумента.ИмяТЧ + """: ";
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не выбран" + ?(ВыборкаПоСтрокамДокумента.ИмяТЧ = "Сотрудники"," сотрудник", "о физическое лицо") + "!", Отказ ,Заголовок);
	Иначе	
		СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " ";
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Фамилия) И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Имя) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не заданы фамилия и имя!", Отказ ,Заголовок);
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(СтрЗаменить(ВыборкаПоСтрокамДокумента.СтраховойНомерПФР,"-","")) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан страховой номер (СНИЛС)!", Отказ ,Заголовок);
		ИначеЕсли Не РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(ВыборкаПоСтрокамДокумента.СтраховойНомерПФР) тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Указан неверный страховой номер!", Отказ, Заголовок);
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерСтрокиПовтораСНИЛС) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- СНИЛС застрахованного лица повторяется в другой строке т.ч. " + ВыборкаПоСтрокамДокумента.ИмяТЧПовтораСНИЛС + " документа (" + ВыборкаПоСтрокамДокумента.НомерСтрокиПовтораСНИЛС + ")!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ПустаяСтрока(ВыборкаПоСтрокамДокумента.ИНН) И Не РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ВыборкаПоСтрокамДокумента.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Указан неверный ИНН!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ВыборкаПоСтрокамДокумента.ФизЛицоРаботаетВОрганизации Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не работает в организации") + " " + ВыборкаПоШапкеДокумента.ОрганизацияНаименование + "!", , Заголовок);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерСтрокиПовтора) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- застрахованное лицо повторяется в другой строке т.ч. " + ВыборкаПоСтрокамДокумента.ИмяТЧПовтора + " документа (" + ВыборкаПоСтрокамДокумента.НомерСтрокиПовтора + ")!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если Проведен И ПринятоВПФР Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

	КонецЕсли;
	
	//При проведении файл формируем заново 
	Если Не Отказ Тогда
		ТекстФайла = СформироватьВыходнойФайл(Отказ);
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл формы СЗВ-М";
	Запись.Данные = ТекстФайла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	МассивТЧ.Добавить(Учредители);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Отказ = ПринятоВПФР;
	
	Если Не Отказ Тогда
		Для Каждого Набор Из Движения Цикл
			Набор.Очистить();
			Набор.Записать();
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()


