Перем мКэшВидовСубконтоПоСчетам;
Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, СчетСписанияНДС");
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетСписанияНДСНУ");
	КонецЕсли; 
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуСписания(РезультатЗапроса)

	ТаблицаСписания = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаСписания;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСостав(ТаблицаВосстановления, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, Поставщик, СчетФактура, СтавкаНДС, СчетУчетаНДС"); 
	
	// Используем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаВосстановления, Отказ, Заголовок);
	
	Если ТаблицаВосстановления.Количество() =0 Тогда
		Возврат;
	КонецЕсли; 
	
	//////////////////////////////////////////////////////
	// Сторнирование расхода по регистру НДС предъявленный
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВосстановления, ТаблицаДвижений_НДСПредъявленный);
	ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСсписанНаРасходы,"Событие");
	ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,"ДатаСобытия");
	
	Движения.НДСПредъявленный.мПериод 		   = СтруктураШапкиДокумента.Дата;
	Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения.НДСПредъявленный.ВыполнитьРасход();
	// Сторнирование записей книги покупок
	/////////////////////////////////////////////////
		
	Для Каждого Строка Из ТаблицаВосстановления Цикл

		Если (Строка.СуммаБезНДС = 0) и (Строка.НДС = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		/////////////////////////////////////////////////
		// Формирование проводки по восстановлению НДС
		Если (Строка.НДС <> 0) Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Списан НДС";
			Проводка.НомерЖурнала = "НДС";

			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетСписанияНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоСписанияНДС1,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетДт, мКэшВидовСубконтоПоСчетам));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоСписанияНДС2,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетДт, мКэшВидовСубконтоПоСчетам));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоСписанияНДС3,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетДт, мКэшВидовСубконтоПоСчетам));
			
			Проводка.СчетКт       = Строка.СчетУчетаНДС; //19.XX
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Строка.Поставщик,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетКт, мКэшВидовСубконтоПоСчетам));
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", Строка.СчетФактура,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетКт, мКэшВидовСубконтоПоСчетам));
			
			Проводка.Сумма        =Строка.НДС;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
				Проводка = Движения.Налоговый.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Списан НДС";
				Проводка.НомерЖурнала = "НДС";

				Проводка.СчетДт       = СтруктураШапкиДокумента.СчетСписанияНДСНУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоСписанияНДСНУ1,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетДт, мКэшВидовСубконтоПоСчетам));
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоСписанияНДСНУ2,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетДт, мКэшВидовСубконтоПоСчетам));
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоСписанияНДСНУ3,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетДт, мКэшВидовСубконтоПоСчетам));
				
				Проводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав; 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетКт, мКэшВидовСубконтоПоСчетам));
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Строка.Поставщик,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетКт, мКэшВидовСубконтоПоСчетам));
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Строка.СчетФактураДоговорКонтрагента,,,БухгалтерскийУчет.ОпределитьВидСубконтоПоСчету(Проводка.СчетКт, мКэшВидовСубконтоПоСчетам));
				
				Проводка.Сумма        =Строка.НДС;
			
			КонецЕсли; 

		КонецЕсли; 
		// Формирование проводки по восстановлению НДС
		/////////////////////////////////////////////////

	КонецЦикла; // Пока Выборка.Следующий() Цикл
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	Перем СтруктураШапкиДокумента;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("НДСНалоговыйПериод");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",					"Ссылка.Организация");
	СтруктураПолей.Вставить("Поставщик",					"Поставщик");
	СтруктураПолей.Вставить("СчетФактура",					"СчетФактура");
	СтруктураПолей.Вставить("СчетФактураДоговорКонтрагента","СчетФактура.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВидЦенности",					"ВидЦенности");
	СтруктураПолей.Вставить("СтавкаНДС",					"СтавкаНДС");
	СтруктураПолей.Вставить("СчетУчетаНДС",					"СчетУчетаНДС");
	СтруктураПолей.Вставить("ДокументОплаты",				"ДокументОплаты");
	СтруктураПолей.Вставить("СуммаБезНДС",					"СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",							"НДС");

	РезультатЗапроса = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураПолей);
	ТаблицаСписания = ПодготовитьТаблицуСписания(РезультатЗапроса);
	
	ПроверитьЗаполнениеТабличнойЧастиСостав(ТаблицаСписания, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаСписания, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения(

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	мУдалятьДвижения = НЕ ЭтоНовый();
КонецПроцедуры

