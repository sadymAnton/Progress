Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем ТабПроверкиОборотов; // Таблица для проверки контролируемых значений

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		// Напечатаем внешную печатную форму
		
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		Если ТабДокумент <> Неопределено Тогда
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		КонецЕсли; 
		
	Иначе
		// Напечатаем встроенную печатную форму
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ЗаявкаНаРасходованиеСредств", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ЗаявкаНаРасходованиеСредств", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатьЗаявки","Заявка на расходование средств");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, ИмяРеквизита, ТекстСообщения, НомерСтроки, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ТекстПоля = ОбщегоНазначенияКлиентСервер.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("РасшифровкаПлатежа", НомерСтроки, ИмяРеквизита);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ТекстПоля,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ)
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если НЕ Платеж.ДоговорКонтрагента.Пустая()
				И (Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
					ИЛИ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
					
				ТекстСообщения = НСтр("ru = 'Не заполнена сделка'");
				ПроверитьЗначение(Платеж.Сделка, "Сделка", ТекстСообщения, Платеж.НомерСтроки, Отказ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ТекстСообщения = НСтр("ru = 'Выбран договор контрагента, не соответствующий организации, указанной в документе!'");
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;
            			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры 

// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказу(ДокументОснование, СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);

	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		Если Выборка.Сумма < 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.Сумма*(-1);
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
			                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			                            ВалютаДокумента,
			                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказу()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ВзаиморасчетыСПодотчетнымиЛицами".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетовПодотчетника", ВалютаВзаиморасчетовПодотчетника);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|	                                                           ФизЛицо = &Получатель
	|	                                                         И РасчетныйДокумент = &РасчетныйДокумент
	|	                                                         И Валюта = &ВалютаВзаиморасчетовПодотчетника)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток < 0
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
									
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом()

Функция ПроверкаКонтролируемыхЗначений(СтруктураДанныхШапки,ТабКонтролируемыхОборотов)
	
	// Получение списка контролирующих сценариев для выбранного периода и измерений бюджетирования
	
	Для Каждого СтрокаПлатеж Из ТабПроверкиОборотов Цикл
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	УстановкаОграниченийПоБюджетам.КонтролирующийСценарий КАК КонтролирующийСценарий,
	|	УстановкаОграниченийПоБюджетам.СтатьяОборотов КАК СтатьяОборотов,
	|	УстановкаОграниченийПоБюджетам.ЦФО КАК ЦФО,
	|	УстановкаОграниченийПоБюджетам.Проект КАК Проект,
	|	УстановкаОграниченийПоБюджетам.Контрагент КАК Контрагент,
	|	УстановкаОграниченийПоБюджетам.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.УстановкаОграниченийПоБюджетам КАК УстановкаОграниченийПоБюджетам
	|
	|ГДЕ
	|	УстановкаОграниченийПоБюджетам.Период = &Период И
	|	УстановкаОграниченийПоБюджетам.СтатьяОборотов = &СтатьяОборотов И
	|	УстановкаОграниченийПоБюджетам.Сценарий = &Сценарий И
	|	(УстановкаОграниченийПоБюджетам.ЦФО = &ЦФО ИЛИ УстановкаОграниченийПоБюджетам.ЦФО = &ПустойЦФО) И
	|	(УстановкаОграниченийПоБюджетам.Проект = &Проект ИЛИ УстановкаОграниченийПоБюджетам.Проект = &ПустойПроект) И
	|	(УстановкаОграниченийПоБюджетам.Контрагент = &Контрагент ИЛИ УстановкаОграниченийПоБюджетам.Контрагент = &ПустойКонтрагент) И
	|	(УстановкаОграниченийПоБюджетам.Номенклатура = &Номенклатура ИЛИ УстановкаОграниченийПоБюджетам.Номенклатура = Неопределено) И
	|	УстановкаОграниченийПоБюджетам.ИспользованиеКонтролируемогоЗначения = &ИспользованиеКонтролируемогоЗначения И
	|	УстановкаОграниченийПоБюджетам.ВидКонтролируемогоЗначения = &ВидКонтролируемогоЗначения";
	
	Запрос.УстановитьПараметр("Период",ОбщегоНазначения.ДатаНачалаПериода(ДатаРасхода,СтруктураДанныхШапки.СценарийПериодичность));
	Запрос.УстановитьПараметр("СтатьяОборотов",СтатьяОборотов);
	Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении);
	Запрос.УстановитьПараметр("ВидКонтролируемогоЗначения",Перечисления.ВидыКонтролируемогоЗначенияБюджета.Ограничивающее);
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	
	Запрос.УстановитьПараметр("ЦФО",ЦФО);
	Запрос.УстановитьПараметр("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
	
	Запрос.УстановитьПараметр("Проект",СтрокаПлатеж.Проект);
	Запрос.УстановитьПараметр("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
	
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("ПустойКонтрагент",Новый(Тип("СправочникСсылка.Контрагенты")));
	
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	ТабРезультата=Запрос.Выполнить().Выгрузить();
	
	Если ТабРезультата.Количество()=0 Тогда
		
		Продолжить;
		
	Иначе
		
		ТабРезультата.Колонки.Добавить("СуммаСценарияИсполнение");
		ТабРезультата.Колонки.Добавить("Период");
		
		Для каждого СтрокаПроверки Из ТабРезультата Цикл
			
			ТекущийСценарий=?(СтрокаПроверки.КонтролирующийСценарий.Пустая(),Сценарий,СтрокаПроверки.КонтролирующийСценарий);
			
			ДатаНачала = ОбщегоНазначения.ДатаНачалаПериода(ДатаРасхода, ТекущийСценарий.Периодичность);
			ДатаКонца  = ОбщегоНазначения.ДатаКонцаПериода (ДатаНачала,  ТекущийСценарий.Периодичность);
			
			СтруктруаКурсаСценария = Бюджетирование.КурсВалютыПоСценарию(Сценарий.Валюта, ДатаНачала,Сценарий);
			КурсСценария      = СтруктруаКурсаСценария.Курс;
			КратностьСценария = СтруктруаКурсаСценария.Кратность;
			
			Если СтрокаПлатеж.СуммаПлатежа>0 ИЛИ ТабПроверкиОборотов.Колонки.Найти("СуммаУпр")=Неопределено Тогда
				
				СуммаСценария=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента, СтруктураДанныхШапки.СценарийВалюта, КурсДокумента, КурсСценария, 
				КратностьДокумента, КратностьСценария);
				
			Иначе
				
				СуммаСценария=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаУпр, , СтруктураДанныхШапки.СценарийВалюта, СтрокаПлатеж.КурсУпрУчета, КурсСценария, 
				СтрокаПлатеж.КратностьУпрУчета, КратностьСценария);
				
			КонецЕсли;
			
			Запрос.Текст="ВЫБРАТЬ
			|	СУММА(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот) КАК СуммаКонтроль,
			|	СУММА(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот) КАК СуммаИсполнение
			|ИЗ
			|	РегистрНакопления.КонтролируемыеЗначенияБюджетов.Обороты(&ДатаНачала, &ДатаНачала, , 
			|					Контрагент = &Контрагент И 
			|					КонтролирующийСценарий=&КонтролирующийСценарий И
			|					Номенклатура=&Номенклатура И 
			|					Проект=&Проект И 
			|					СтатьяОборотов=&СтатьяОборотов И 
			|					Сценарий=&Сценарий И 
			|					ЦФО=&ЦФО И 
			|					ИспользованиеКонтролируемогоЗначения=&ИспользованиеКонтролируемогоЗначения
			|					) КАК КонтролируемыеЗначенияБюджетовОбороты";
			
			
			
			
			Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
			Запрос.УстановитьПараметр("Контрагент",СтрокаПроверки.Контрагент);
			Запрос.УстановитьПараметр("КонтролирующийСценарий",СтрокаПроверки.КонтролирующийСценарий);
			Запрос.УстановитьПараметр("Номенклатура",СтрокаПроверки.Номенклатура);
			Запрос.УстановитьПараметр("Проект",СтрокаПроверки.Проект);
			Запрос.УстановитьПараметр("СтатьяОборотов",СтрокаПроверки.СтатьяОборотов);
			Запрос.УстановитьПараметр("Сценарий",Сценарий);
			Запрос.УстановитьПараметр("ЦФО",СтрокаПроверки.ЦФО);
			Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении);
			
			СуммаКонтроль=0;
			СуммаИсполнение=0;
			
			Результат = Запрос.Выполнить();
			Выборка=Результат.Выбрать();
			Если Выборка.Следующий() И (НЕ Выборка["СуммаКонтроль"]=NULL) И (НЕ Выборка["СуммаИсполнение"]=NULL) Тогда
				СуммаКонтроль=Выборка["СуммаКонтроль"];
				СуммаИсполнение=Выборка["СуммаИсполнение"]+СуммаСценария;
			КонецЕсли;
			
			Если СуммаИсполнение>СуммаКонтроль Тогда
				
				ТекстСообщения="Оборот приведет к превышению контролируемого значения!
				|Контролирующий сценарий: "+ ТекущийСценарий+"
				|Период планирования: "+Формат(ДатаНачала,"ДФ=dd.MM.yyyy")+" - "+Формат(ДатаКонца,"ДФ=dd.MM.yyyy")+"
				|Статья оборотов: "+СтрокаПроверки.СтатьяОборотов;
				
			Если Не СтрокаПроверки.ЦФО.Пустая() Тогда
				
				ТекстСообщения=ТекстСообщения+"
				|ЦФО: "+СтрокаПроверки.ЦФО;
			
			КонецЕсли;
			
			Если Не СтрокаПроверки.Проект.Пустая() Тогда
				
				ТекстСообщения=ТекстСообщения+"
				|Проект: "+СтрокаПроверки.Проект;
				
			КонецЕсли;
			
			Если Не СтрокаПроверки.Контрагент.Пустая() Тогда
				
				ТекстСообщения=ТекстСообщения+"
				|Контрагент: "+СтрокаПроверки.Контрагент;
				
			КонецЕсли;
			
			Если Не СтрокаПроверки.Номенклатура=Неопределено Тогда
				
				ТекстСообщения=ТекстСообщения+"
				|Номенклатура: "+СтрокаПроверки.Номенклатура;
				
			КонецЕсли;

			ТекстСообщения=ТекстСообщения+"
				|Контролируемое значение: "+СуммаКонтроль+" "+Сценарий.Валюта+"
				|Значение с учетом суммы по заявке: "+СуммаИсполнение+" "+Сценарий.Валюта;
				
				Сообщить(ТекстСообщения);
				
				Если НЕ УправлениеДопПравамиПользователей.РазрешеноПревышениеКонтролируемыхЗначенийПоБюджетам() Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаПроверки.СуммаСценарияИсполнение=СуммаСценария;
			СтрокаПроверки.Период=ДатаНачала;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабРезультата,ТабКонтролируемыхОборотов);
	
	КонецЦикла;
	
	Возврат ТабКонтролируемыхОборотов;
	
КонецФункции // ПроверкаКонтролируемыхЗначений()


// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок, СтруктураКурсыВалют)
	
	РасчетыВозврат    = УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	КоэффициентСторно = ?(РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат, -1, 1);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	СтруктураПараметров.Вставить("ЕстьРасчетыПоКредитам", ЕстьРасчетыПоКредитам);
	СтруктураПараметров.Вставить("ВидОперации", ВидОперации);
	СтруктураПараметров.Вставить("ДатаРасхода", ДатаРасхода);
	ТабПроверкиОборотов = Бюджетирование.СформироватьТаблицуДляКонтроля(Ссылка, СтруктураПараметров);
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		
		НаборДвижений = Движения.КонтролируемыеЗначенияБюджетов;
		ТабКонтролируемыхЗначений=НаборДвижений.ВыгрузитьКолонки();
		
		ТабКонтролируемыхЗначений=ПроверкаКонтролируемыхЗначений(СтруктураДанныхШапки,ТабКонтролируемыхЗначений);
		
		Если ТипЗнч(ТабКонтролируемыхЗначений)=Тип("Булево") И НЕ ТабКонтролируемыхЗначений Тогда
			Сообщить("Превышение контролируемого значения. Проведение отменено!");
			Отказ=Истина;
			Возврат;
		Иначе
			
			Если ТабКонтролируемыхЗначений.Количество()>0 Тогда
				
				// По регистру "КонтролируемыеЗначенияБюджетов"
				ТабКонтролируемыхЗначений.ЗаполнитьЗначения(Сценарий,"Сценарий");
				ТабКонтролируемыхЗначений.ЗаполнитьЗначения(Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,"ИспользованиеКонтролируемогоЗначения");
				ТабКонтролируемыхЗначений.ЗаполнитьЗначения(Истина,"Активность");
				
				НаборДвижений = Движения.КонтролируемыеЗначенияБюджетов;
				НаборДвижений.мТаблицаДвижений = ТабКонтролируемыхЗначений;
				
				Движения.КонтролируемыеЗначенияБюджетов.ВыполнитьДвижения();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РазмещениеЗаявки.Количество()>0 Тогда
		
		ТабРазмещениеЗаявки=РазмещениеЗаявки.Выгрузить();
		ТабРазмещениеЗаявки.Свернуть("МестоРазмещения","СуммаПлатежа");
		
		НаборРазмещение=Движения.РазмещениеЗаявокНаРасходованиеСредств;
		ТаблицаРазмещение=НаборРазмещение.ВыгрузитьКолонки();
		
		НаборРезерв=Движения.ДенежныеСредстваВРезерве;
		ТаблицаРезерв=НаборРезерв.ВыгрузитьКолонки();

		Для Каждого Строка Из ТабРазмещениеЗаявки Цикл
			
			Если Строка.МестоРазмещения=Неопределено Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(Строка.МестоРазмещения)= Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
				
				ОстатокКРазмещению=УправлениеДенежнымиСредствами.ПолучитьНеразмещенныйостаток(Строка.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка);
				
				Если ОстатокКРазмещению<Строка.СуммаПлатежа Тогда
					Сообщить(Заголовок+"
					|Размещаемая сумма превышает неразмещенный остаток
					|по "+Строка.МестоРазмещения+".
					|Возможный к использованию остаток: "+Формат(ОстатокКРазмещению,"ЧЦ=15; ЧДЦ=2; ЧН=0")+" "+ВалютаДокумента+"
					|Резервируемая сумма = "+Формат(Строка.СуммаПлатежа,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);
					
					Отказ = Истина;
					Возврат;
					
				КонецЕсли;
				
				СтрокаРазмещение=ТаблицаРазмещение.Добавить();
				СтрокаРазмещение.ДокументПланирования=Строка.МестоРазмещения;
				СтрокаРазмещение.ДокументРезервирования=Ссылка;
				СтрокаРазмещение.Сумма=Строка.СуммаПлатежа;
				
			Иначе
				
				// Проверяем остаток доступных денежных средств
				СвободныйОстаток=УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(Строка.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка);
				Если СвободныйОстаток<Строка.СуммаПлатежа Тогда
					Сообщить(Заголовок+"
					|Резервируемая сумма превышает возможный к использованию остаток денежных средств
					|по "+Строка.МестоРазмещения.Наименование+".
					|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2; ЧН=0")+" "+ВалютаДокумента+"
					|Резервируемая сумма = "+Формат(Строка.СуммаПлатежа,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);
					
					Если НЕ УправлениеДопПравамиПользователей.ПравоРазрешитьПревышениеСвободногоОстаткаДС() Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаРезерв=ТаблицаРезерв.Добавить();
				СтрокаРезерв.БанковскийСчетКасса=Строка.МестоРазмещения;
				СтрокаРезерв.Организация=Организация;
				СтрокаРезерв.ДокументРезервирования=Ссылка;
				СтрокаРезерв.ВидДенежныхСредств=ФормаОплаты;
				СтрокаРезерв.Сумма=Строка.СуммаПлатежа;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборРазмещение.мПериод=КонецДня(ДатаРасхода);
		НаборРазмещение.мТаблицаДвижений=ТаблицаРазмещение;
		Движения.РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьПриход();
		
		НаборРезерв.мПериод=ДатаРасхода;
		НаборРезерв.мТаблицаДвижений=ТаблицаРезерв;
		Движения.ДенежныеСредстваВРезерве.ВыполнитьПриход();
		
	КонецЕсли;
	
	// По регистру "ЗаявкиНаРасходованиеСредств"
	
	НаборДвиженийЗаявки = Движения.ЗаявкиНаРасходованиеСредств;
	ТаблицаДвиженийЗаявки = НаборДвиженийЗаявки.ВыгрузитьКолонки();
	
	// По регистру "РасчетыСКонтрагентами"
	НаборДвиженийКонтрагенты = Движения.РасчетыСКонтрагентами;
	ТаблицаДвиженийКонтрагенты = НаборДвиженийКонтрагенты.ВыгрузитьКолонки();
	
	ВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			ВалютаВзаиморасчетов = ВалютаВзаиморасчетовПодотчетника;
		ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			ВалютаВзаиморасчетов = Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			ВалютаВзаиморасчетов = ВалютаДокумента;
		КонецЕсли;
			
		СтруктураКурсВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(
			ВалютаВзаиморасчетов, ?(ДатаРасхода = '00010101', Дата, КонецДня(ДатаРасхода)));
		
		СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			Платеж.СуммаВзаиморасчетов,
			ВалютаВзаиморасчетов, ,
			СтруктураКурсВзаиморасчетов.Курс, СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
			СтруктураКурсВзаиморасчетов.Кратность, СтруктураКурсыВалют.ВалютаУпрУчетаКратность);

		СтрокаДвиженийЗаявки = ТаблицаДвиженийЗаявки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДвиженийЗаявки, Платеж);
		
		//СтрокаДвиженийЗаявки.СуммаУпр				= СуммаУпр; // Шевченков №42486 20150811 закомментил, старая строка
		СтрокаДвиженийЗаявки.СуммаУпр				= ?(КурсВалютыИзЗаявки И ВалютаДокумента = мВалютаРегламентированногоУчета, Платеж.СуммаПлатежа, СуммаУпр);
		СтрокаДвиженийЗаявки.Сумма					= Платеж.СуммаПлатежа;
		СтрокаДвиженийЗаявки.ЗаявкаНаРасходование	= Ссылка;
		СтрокаДвиженийЗаявки.Организация			= Организация;
		// <- Шевченков
		СтрокаДвиженийЗаявки.СтавкаНДС	= Платеж.СтавкаНДС;
		СтрокаДвиженийЗаявки.ЦФО = ?(ЗначениеЗаполнено(Платеж.ЦФО), Платеж.ЦФО, Ссылка.ЦФО);
		// ->
		
		Если ВидОперации <> Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			СтрокаДвиженийЗаявки.Контрагент			= Контрагент;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДвиженийЗаявки.ДокументРасчетовСКонтрагентом) Тогда
			СтрокаДвиженийЗаявки.ДокументРасчетовСКонтрагентом = Ссылка;
		КонецЕсли;
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ВключатьВПлатежныйКалендарь Тогда
			
			СтрокаДвиженийКонтрагенты = ТаблицаДвиженийКонтрагенты.Добавить();
			СтрокаДвиженийКонтрагенты.ДоговорКонтрагента	= Платеж.ДоговорКонтрагента;
			СтрокаДвиженийКонтрагенты.Контрагент  		    = Контрагент;
			СтрокаДвиженийКонтрагенты.Организация  	   		= Организация;

			СтрокаДвиженийКонтрагенты.РасчетыВозврат		= РасчетыВозврат;
			СтрокаДвиженийКонтрагенты.Сделка				= Платеж.Сделка;
			СтрокаДвиженийКонтрагенты.СуммаВзаиморасчетов	= Платеж.СуммаВзаиморасчетов*КоэффициентСторно;
			СтрокаДвиженийКонтрагенты.СуммаУпр				= СуммаУпр*КоэффициентСторно;
			СтрокаДвиженийКонтрагенты.Период				= ?(ДатаРасхода='00010101',Дата,ДатаРасхода);
			СтрокаДвиженийКонтрагенты.ВидДвижения			= ?(КоэффициентСторно = 1,ВидДвиженияНакопления.Приход,ВидДвиженияНакопления.Расход);
			СтрокаДвиженийКонтрагенты.Активность			= Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвиженийЗаявки.мПериод				= ?(ДатаРасхода='00010101',Дата,ДатаРасхода);
	НаборДвиженийЗаявки.мТаблицаДвижений	= ТаблицаДвиженийЗаявки;
	Движения.ЗаявкиНаРасходованиеСредств.ВыполнитьПриход();
	
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ВключатьВПлатежныйКалендарь Тогда
		
		НаборДвиженийКонтрагенты.мТаблицаДвижений	= ТаблицаДвиженийКонтрагенты;
		НаборДвиженийКонтрагенты.ВыполнитьДвижения();
				
	КонецЕсли;
	
	// <- Шевченков
	// По регистру "ОстаткиПоБюджетам"
	
	НаборДвиженийОстаткиПоБюджетам   = Движения.ПРГ_ОстаткиПоБюджетам;
	ТаблицаДвиженийОстаткиПоБюджетам = НаборДвиженийОстаткиПоБюджетам.Выгрузить();
	ТаблицаДвиженийОстаткиПоБюджетам.Очистить();
	
	СтруктураКурсВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(
			ВалютаВзаиморасчетов, ?(ДатаРасхода = '00010101', Дата, КонецДня(ДатаРасхода)));
		
	СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			Платеж.СуммаВзаиморасчетов,
			ВалютаВзаиморасчетов, ,
			СтруктураКурсВзаиморасчетов.Курс, СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
			СтруктураКурсВзаиморасчетов.Кратность, СтруктураКурсыВалют.ВалютаУпрУчетаКратность);
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		СтрокаДвижениеОстаткиПоСтатьям = ТаблицаДвиженийОстаткиПоБюджетам.Добавить();
		
		СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			Платеж.СуммаПлатежа,
			ВалютаДокумента, Справочники.Валюты.НайтиПоКоду("643"),
			СтруктураКурсВзаиморасчетов.Курс, СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
			СтруктураКурсВзаиморасчетов.Кратность, СтруктураКурсыВалют.ВалютаУпрУчетаКратность);
			
		СтрокаДвижениеОстаткиПоСтатьям.Подразделение = ?(ЗначениеЗаполнено(Платеж.ЦФО), Платеж.ЦФО, Ссылка.ЦФО);
		СтрокаДвижениеОстаткиПоСтатьям.СтатьяДДС     = Платеж.СтатьяДвиженияДенежныхСредств;
		СтрокаДвижениеОстаткиПоСтатьям.Проект        = ?(ЗначениеЗаполнено(Платеж.Проект), Платеж.Проект, Неопределено);
		СтрокаДвижениеОстаткиПоСтатьям.Сумма         = -1 * (СуммаУпр);
		СтрокаДвижениеОстаткиПоСтатьям.СарехОрех     = СарехОрех;
		                            		
	КонецЦикла;
	
	//НаборДвиженийОстаткиПоБюджетам.мПериод            = Ссылка.Дата; // Шевченков 20170109 #60680
	НаборДвиженийОстаткиПоБюджетам.мПериод            = Ссылка.ДатаРасхода; // Шевченков 20170109 #60680
	
	НаборДвиженийОстаткиПоБюджетам.мТаблицаДвижений   = ТаблицаДвиженийОстаткиПоБюджетам;
	
	Движения.ПРГ_ОстаткиПоБюджетам.ВыполнитьДвижения();
	
	// ->
	
	//Если используется механизм согласования заявок, и заявка еще не прошла по маршуту утверждения 
	//	- добавим запись в регистр СостоянияСогласования
	НаборЗаписейСостояниеСогласования = РегистрыСведений.СостоянияСогласованияЗаявок.СоздатьНаборЗаписей();
	НаборЗаписейСостояниеСогласования.Отбор.Заявка.Установить(Ссылка);
	НаборЗаписейСостояниеСогласования.Прочитать();
	Если УправлениеДенежнымиСредствами.ИспользуетсяСогласованиеЗаявок(Организация, Дата) Тогда
		Если НаборЗаписейСостояниеСогласования.Количество() > 1 Тогда
			//Заявка уже пошла по маршруту согласования
			Возврат;
		КонецЕсли;
		//начало изменений БП 06 
		//МаршрутСогласования = УправлениеДенежнымиСредствами.ОпределитьМаршрутСогласования(ЦФО);
		МаршрутСогласования =  МаршрутСогласованияР;
		//конец изменений БП 06 
		Если НЕ ЗначениеЗаполнено(МаршрутСогласования) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось определить маршрут согласования заявки", Отказ, Заголовок);
			Возврат;
		КонецЕсли;
		//Уже есть запись с правильным маршрутом согласования
		Если НаборЗаписейСостояниеСогласования.Количество() = 1 И
			НаборЗаписейСостояниеСогласования[0].Этап = МаршрутСогласования Тогда
			Возврат;
		КонецЕсли;
		НаборЗаписейСостояниеСогласования.Очистить();
		НоваяЗапись = НаборЗаписейСостояниеСогласования.Добавить();
		
		НоваяЗапись.Период = ТекущаяДата();
		НоваяЗапись.Активность = Истина;
		НоваяЗапись.Заявка = Ссылка;
		НоваяЗапись.Пользователь = Ответственный;
		// <- alexandr
		//НоваяЗапись.Этап = МаршрутСогласования;
		НоваяЗапись.Этап = МаршрутСогласованияР;
		//НоваяЗапись.Уровень = МаршрутСогласования.Уровень() + 1;
		НоваяЗапись.Уровень = МаршрутСогласованияР.Уровень() + 1;
		// ->       		
		НоваяЗапись.Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
		
		НаборЗаписейСостояниеСогласования.Записать();
	ИначеЕсли НаборЗаписейСостояниеСогласования.Количество() > 0 Тогда
		//Если есть записи по этой заявке, а согласование не используется - очистим
		НаборЗаписейСостояниеСогласования.Очистить();
		НаборЗаписейСостояниеСогласования.Записать();
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрам() 

// Процедура выполняет заполнение реквизита Получатель значением по умолчанию.
//
Процедура ЗаполнитьПолучателя(глТекущийПользователь)
    СписокЗначений = Новый СписокЗначений;

	ВремПолучатель = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(глТекущийПользователь, "ОсновнойПоставщик", СписокЗначений).Значение;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(глТекущийПользователь, "ОсновнойПокупатель", СписокЗначений).Значение;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ И ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(глТекущийПользователь, "ОсновнаяКассаККМ", СписокЗначений).Значение;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Получатель) Тогда
		Получатель = ВремПолучатель;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = ВремКонтрагент;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПолучателя()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если (Основание <> Неопределено) И (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание))) Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ДокументОснование = Основание;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	КонецЕсли;

	СпособЗаполнения = "Не заполнять";
	ВалютаДокумента  = мВалютаРегламентированногоУчета;
	
	глТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ДатаРасхода       = Основание.ДатаОплаты;
		ЦФО               = Основание.Подразделение;
		ДокументОснование = Основание;
		
		СтрокаПлатеж.ДоговорКонтрагента            = Основание.ДоговорКонтрагента;
        СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурсаВзаиморасчетов               = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаРасхода);
		СтрокаПлатеж.КурсВзаиморасчетов            = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов       = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			Если СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
				СтрокаПлатеж.Сделка=Основание;
			ИначеЕсли ТипЗнч(Основание.ДокументОснование)=Тип("ДокументСсылка.ЗаказПоставщику") 
				И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
				ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом) Тогда
				СтрокаПлатеж.Сделка=Основание.ДокументОснование;

			КонецЕсли;
			
		КонецЕсли;
		
		ВидОперации	= Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		
		Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница) Тогда
			
			Если ТипЗнч(Основание.СтруктурнаяЕдиница)=Тип("СправочникСсылка.Кассы") Тогда
				ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
			Иначе
				ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные;
			КонецЕсли;
			
			БанковскийСчетКасса = Основание.СтруктурнаяЕдиница;
		Иначе
			ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
			БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		КонецЕсли;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,КонецДня(ДатаРасхода));
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю
		Иначе
			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		КонецЕсли;

		Контрагент  = Основание.Контрагент;
		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
        СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		
		СтрокаПлатеж.Сделка = Основание.Сделка;
		Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			СпособЗаполнения = "По взаиморасчетам";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
		БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;

		СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда

		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику;
		ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
		
		Получатель                       = Основание.ФизЛицо;
		РасчетныйДокумент                = Основание;
		ВалютаВзаиморасчетовПодотчетника = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СпособЗаполнения = "По взаиморасчетам с подотчетным лицом";
		
		БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.БюджетнаяОперация") Тогда
		
		ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		Контрагент = Основание.Контрагент;
		ВалютаДокумента=Основание.ВалютаДокумента;
		
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		СтрокаПлатеж=РасшифровкаПлатежа[0];
		
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов=ВалютаДокумента;
		Иначе
			ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		// Получаем курсы валют
		СтруктураГруппаВалют = Новый Структура;
		СтруктураГруппаВалют.Вставить("ВалютаВзаиморасчетов",ВалютаВзаиморасчетов.Код);
		СтруктураГруппаВалют.Вставить("ВалютаДокумента",ВалютаДокумента.Код);
		СтруктураГруппаВалют.Вставить("ВалютаОперации",Основание.ВалютаДокумента.Код);
		
		СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,Дата);
		
		КурсДокумента=СтруктураКурсыВалют.ВалютаДокументаКурс;
		КратностьДокумента=СтруктураКурсыВалют.ВалютаДокументаКратность;
		
		СтрокаПлатеж.КурсВзаиморасчетов=СтруктураКурсыВалют.ВалютаВзаиморасчетовКурс;
		СтрокаПлатеж.КратностьВзаиморасчетов=СтруктураКурсыВалют.ВалютаВзаиморасчетовКратность;
		СтрокаПлатеж.Проект=Основание.Проект;
		ЦФО=Основание.ЦФО;
		Номенклатура=Основание.Номенклатура;
		
		КурсОперации=СтруктураКурсыВалют.ВалютаОперацииКурс;
		КратностьОперации=СтруктураКурсыВалют.ВалютаОперацииКратность;
		
		СуммаДокумента=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Основание.Сумма,
		Основание.ВалютаДокумента, 
		ВалютаДокумента,
		КурсОперации, КурсДокумента,
		КратностьОперации, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		СтрокаПлатеж.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента,
		ВалютаДокумента, 
		ВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю;
			ФормаОплаты =Перечисления.ВидыДенежныхСредств.Наличные;
			Контрагент	= Основание.Контрагент;
			
			СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
			
			СпособЗаполнения = "По сумме документа";

			СтрокаПлатеж.Сделка = Основание.Сделка;
			Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			КонецЕсли;
			
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,Дата);
			СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
			
			БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
			
			Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
				ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
			Иначе
				ВалютаДокумента=мВалютаРегламентированногоУчета;
			КонецЕсли;
			
			СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсДокумента      = СтруктураКурсаДокумента.Курс;
			КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от поставщика".
			Возврат;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от подотчетника".
			Возврат;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Прием розничной выручки".
			Возврат;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Прочий приход денежных средств".
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками;
		ФормаОплаты = Перечисления.ВидыДенежныхСредств.Наличные;
		Получатель  = Основание.ФизЛицо;
		РасчетныйДокумент = Основание;
		ВалютаВзаиморасчетовПодотчетника = Основание.ВалютаДокумента;
		
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования      = СтруктураКурсаОснования.Курс;
		КратностьОснования = СтруктураКурсаОснования.Кратность;

		БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКасса");
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаЗайма;

		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

	КонецЕсли;

	Если СпособЗаполнения = "По заказу" Тогда

		ЗаполнитьПоЗаказу(Основание,СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		УправлениеДенежнымиСредствами.ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,-1);
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда
		
		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ОснованиеСуммаДокумента = Основание.СуммаДокумента - Основание.СуммаВознаграждения;
		КонецЕсли;

		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                 КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента      = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;

	КонецЕсли;

	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный");
	
	// Заполнить реквизиты значениями по умолчанию.
	УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, РасшифровкаПлатежа);
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, ВидОперации);
	Если НЕ ЗначениеЗаполнено(ЦФО) Тогда
		ЦФО = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновноеПодразделение");
	КонецЕсли;
	
	ЗаполнитьПолучателя(глТекущийПользователь);
	
	Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// <- Шевченков
	//ЗаполнитьСтавкиНДСДляНалогов();
	//начало изменений БП 06 
	//Отказ = ?(ЗначениеЗаполнено(), Ложь, Истина);
	//Отказ = ?(ЗначениеЗаполнено(БанковскийСчетКонтрагента), Ложь, Истина);
	//перенес в ОбработкаПроверкиЗаполнения
	//Отказ = ?(Константы.ПРГ_НеКонтролироватьОстаткиПоБюджету.Получить(), Ложь, ПроверитьОстаткиОборотовПоБюджетам(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата())));  // Шевченков 20170109 #60680
	Отказ = ?(Константы.ПРГ_НеКонтролироватьОстаткиПоБюджету.Получить(), Ложь, ПроверитьОстаткиОборотовПоБюджетам(?(ЗначениеЗаполнено(ДатаРасхода), ДатаРасхода, ТекущаяДата())));  // Шевченков 20170109 #60680
	Если Отказ Тогда
		возврат;
	КонецЕслИ;
	//Отказ = ПроверитьДублиПоступлений();
	Отказ = ПроверитьДублиПоступленийНовыйАлгоритм();
	Если Отказ Тогда
		возврат;
	КонецЕслИ;
	// проверка на остатки в оборотах по бюджетам
	// <- Шевченков
	Если ЗначениеЗаполнено(ЭтотОбъект.БанковскийСчетКонтрагента) И ЭтотОбъект.БанковскийСчетКонтрагента.Владелец <> ЭтотОбъект.Контрагент Тогда
			ЭтотОбъект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
			Отказ = Истина;
			Возврат;
	КонецЕсли;
	
	// Проверка на заполнение бонусных актов
	Если ЕстьСтатьяОбазательноеУказаниеБонусногоАкта() И НЕ ЗначениеЗаполнено(ПКК_АктНачисленияБонусов) Тогда
		Отказ = Истина;
		Сообщить("Не указан бонусный акт, проведение документа не возможно.");		
	КонецЕсли;		
	// ->
	
	// <- Шевченков 54632 20160720
	Если СарехОрех = Перечисления.ПРГ_СарехОрех.Орех И ЕстьЗаполненынеПроекты() Тогда
		
		Сообщить("В заявках по Орех не может быть указан проект. Документ не будет проведен.");
		Отказ = Истина;
		
	КонецЕсли;	
	// ->
	
	БанковскийСчетПомеченНаУдаление = Ложь;
	БанковскийСчетПомеченНаУдаление = ?(ЭтотОбъект.БанковскийСчетКасса.ПометкаУдаления, Истина, Ложь);
	БанковскийСчетПомеченНаУдаление = ?(ЭтотОбъект.БанковскийСчетКонтрагента.ПометкаУдаления, Истина, Ложь);
	Если БанковскийСчетПомеченНаУдаление Тогда
		Сообщить("Банковский счет помечен на удаление. Необходимо выбрать другой.");
		Отказ = ?(БанковскийСчетПомеченНаУдаление, Истина, Отказ);
	КонецЕсли;	
	//конец изменений БП 06 
	// ->
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Если РазмещениеЗаявки.Итог("СуммаПлатежа")>СуммаДокумента Тогда
		Сообщить(Заголовок+" 
		|сумма размещения превышает сумму документа.");
		
		Отказ=Истина;
	КонецЕсли;
	
	//начало изменений БП 06
	ПроверкаДоговоров(Отказ,ЭтотОбъект);
	Если Отказ Тогда
		возврат;
	КонецЕслИ;	
	//конец изменений БП 06 

	СтруктураДанныхШапки=Новый Структура;

	СтруктураДанныхШапки.Вставить("СценарийПериодичность",Сценарий.Периодичность);
	СтруктураДанныхШапки.Вставить("СценарийВалюта",Сценарий.Валюта);

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",мВалютаУправленческогоУчета.Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента",ВалютаДокумента.Код);
	
	СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,?(ДатаРасхода='00010101',Дата,КонецДня(ДатаРасхода)));

	// <- Шевченков №33032
	Если Константы.ПРГ_ПроверятьУсловияПоДоговорам.Получить() Тогда
		Отказ = НЕ ПРГ_Обработки.РазрешеноПроводитьВзаиморасчетыПоДоговору(ЭтотОбъект.Ссылка);
	КонецЕсли;	
	// ->
	
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок, СтруктураКурсыВалют);

	КонецЕсли;
	
	СверитьСуммыСПоступлениями(); // Шевченков
	
	// <- Шевченков для проверки
	Попытка
		Если Состояние = Перечисления.СостоянияОбъектов.Подготовлен Тогда
			ПРГ_Регламентый.ПодготовитьУведомление(ЭтотОбъект, ЭтотОбъект.Состояние);
		КонецЕсли;		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	// -> Шевченков
	
	//m.ionov@a-prof.ru 25.02.2015
	Если ЗначениеЗаполнено(ПКК_АктНачисленияБонусов) Тогда
		ЕстьДокументыПоБонусномуАкту(Отказ);
	КонецЕсли;
	//----m.ionov@a-prof.ru---

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// Удаление движений по регистру СостоянияСогласованияЗаявок, если заявка была подготовлена
	НаборЗаписейСостояниеСогласования = РегистрыСведений.СостоянияСогласованияЗаявок.СоздатьНаборЗаписей();
	НаборЗаписейСостояниеСогласования.Отбор.Заявка.Установить(Ссылка);
	НаборЗаписейСостояниеСогласования.Прочитать();
	Если НаборЗаписейСостояниеСогласования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если УправлениеДенежнымиСредствами.ИспользуетсяСогласованиеЗаявок(Организация, Дата) Тогда
		Если НаборЗаписейСостояниеСогласования.Количество() > 1 Тогда
			//Заявка уже пошла по маршруту согласования, не следует ничего менять
			Возврат;
		КонецЕсли;
		//Если в наборе записей только одна запись - значит заявка только подготовлена.
		//Очистим набор записей
		НаборЗаписейСостояниеСогласования.Очистить();
		НаборЗаписейСостояниеСогласования.Записать();
	ИначеЕсли НаборЗаписейСостояниеСогласования.Количество() > 0 Тогда
		//Если есть записи по этой заявке, а согласование не используется - очистим
		НаборЗаписейСостояниеСогласования.Очистить();
		НаборЗаписейСостояниеСогласования.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	ТекстОшибки = "";
	Если НЕ УправлениеДенежнымиСредствами.РазрешеноИзменениеЗаявки(Ссылка, ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ,,, Ссылка);
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// <- Шевченков, очистим бонусный акт при пометке на удаление
	Если ПометкаУдаления = Истина Тогда                          
        Если Состояние = Перечисления.СостоянияОбъектов.Отклонен Тогда
				ПКК_АктНачисленияБонусов = Документы.ПКК_АктНачисленияБонусовУслуг.ПустаяСсылка();
		КонецЕсли;                                               
	КонецЕсли;
	// ->
	
	Для Каждого ТекСтрока Из РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента) Тогда
			ВалютаДоговора = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(ТекСтрока.ДоговорКонтрагента,"ВалютаВзаиморасчетов");
			Если ВалютаДоговора = мВалютаРегламентированногоУчета Тогда
				ТекСтрока.КурсВзаиморасчетов = 1;
				ТекСтрока.КратностьВзаиморасчетов = 1;
			КонецЕсли;
		КонецЕсли;
		Если СарехОрех = Перечисления.ПРГ_СарехОрех.Орех И ТекСтрока.Проект <> Неопределено Тогда
			ТекСтрока.Проект = Неопределено;			
		КонецЕсли;
	КонецЦикла;
	
	// <- Шевченков, если дата расхода меньше даты документа попросим откорректировать дату расхода, пользователи часто ошибаются 20150924
	Если КонецДня(ДатаРасхода) < НачалоДня(Дата) Тогда
		Сообщить("Дата расхода не может быть меньше даты документа. " + Строка(Ссылка));
	КонецЕсли;	
	// ->
	
    ЗаполнитьСтавкиНДСДляНалогов(); 

КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;

	// Заполнить реквизиты значениями по умолчанию.
	УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, РасшифровкаПлатежа,, ОбъектКопирования);
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, ВидОперации);
	КонецЕсли;
	
	Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//начало изменений БП 06 
	ПроверяемыеРеквизиты.Добавить("МаршрутСогласованияР");
	ПроверяемыеРеквизиты.Добавить("БанковскийСчетКонтрагента");
	ПроверяемыеРеквизиты.Добавить("ЦФО"); 
	ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
	//конец изменений БП 06 
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ПроверяемыеРеквизиты.Добавить("Контрагент");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		
		//начало изменений 
		Если ЕстьРасчетыСКонтрагентами Тогда
			ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтавкаНДС");
		КонецЕсли;	
		//конец изменений  
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		ПроверяемыеРеквизиты.Добавить("Получатель");
		ПроверяемыеРеквизиты.Добавить("ВалютаВзаиморасчетовПодотчетника");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
				
	Иначе
		
		ПроверяемыеРеквизиты.Добавить("ВалютаДокумента");
		
	КонецЕсли;
	
	Если ВключатьВПлатежныйКалендарь Тогда
		
		ПроверяемыеРеквизиты.Добавить("ФормаОплаты");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		
		Если ПроверяемыеРеквизиты.Найти("ВалютаДокумента") = Неопределено Тогда
			ПроверяемыеРеквизиты.Добавить("ВалютаДокумента");			
		КонецЕсли; 
	КонецЕсли;
	
	ПроверитьЗаполнениеТЧ(Отказ);
	
КонецПроцедуры

// <- Шевченков
Функция ПроверитьОстаткиОборотовПоБюджетам(КонДата)
	
	Запрос = Новый Запрос;	
	
	СписокСтатейКК = Новый Массив;
	СписокСтатейКК.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоРеквизиту("ФинКод", "51-2-1"));
	СписокСтатейКК.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоРеквизиту("ФинКод", "51-2-2"));
	СписокСтатейКК.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоРеквизиту("ФинКод", "51-2-3"));
	СписокСтатейКК.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоРеквизиту("ФинКод", "51-2-4"));	
	
	Если ЭтотОбъект.СарехОрех = Перечисления.ПРГ_СарехОрех.Орех Тогда
		
		// ОРЕХ
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРГ_НеКонтролироватьОстаткиПоСтатьям.СтатьяДДС
		|ПОМЕСТИТЬ ИсключаемыеСтатьиДДС
		|ИЗ
		|	РегистрСведений.ПРГ_НеКонтролироватьОстаткиПоСтатьям КАК ПРГ_НеКонтролироватьОстаткиПоСтатьям
		|ГДЕ
		|	ПРГ_НеКонтролироватьОстаткиПоСтатьям.Подразделение = &Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Проект,
		|	СУММА(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов * ВЫБОР
		|			КОГДА ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов = 0
		|				ТОГДА 1
		|			ИНАЧЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов
		|		КОНЕЦ * ВЫБОР
		|			КОГДА ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КратностьВзаиморасчетов = 0
		|				ТОГДА 1
		|			ИНАЧЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КратностьВзаиморасчетов
		|		КОНЕЦ) КАК СуммаПлатежа,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
		|ПОМЕСТИТЬ ДанныеПоЗаявке
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
		|ГДЕ
		|	НЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В
		|				(ВЫБРАТЬ
		|					Выб.СтатьяДДС
		|				ИЗ
		|					ИсключаемыеСтатьиДДС КАК Выб)
		|	И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Проект,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КратностьВзаиморасчетов,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРГ_ОстаткиПоБюджетамОбороты.Подразделение,
		|	ПРГ_ОстаткиПоБюджетамОбороты.СтатьяДДС,
		//|	ПРГ_ОстаткиПоБюджетамОбороты.Проект,
		|	ПРГ_ОстаткиПоБюджетамОбороты.СарехОрех,
		|	ПРГ_ОстаткиПоБюджетамОбороты.ЗаявкаНаРасходованиеСредств,
		|	СУММА(ПРГ_ОстаткиПоБюджетамОбороты.СуммаОборот) КАК СуммаОборот
		|ПОМЕСТИТЬ втОстаткиПоБюджету
		|ИЗ
		|	РегистрНакопления.ПРГ_ОстаткиПоБюджетам.Обороты(&НачДата, КОНЕЦПЕРИОДА(&КонДата, МЕСЯЦ), Регистратор, ) КАК ПРГ_ОстаткиПоБюджетамОбороты
		|ГДЕ
		|	ПРГ_ОстаткиПоБюджетамОбороты.СарехОрех = &СарехОрех
		|	И ПРГ_ОстаткиПоБюджетамОбороты.Регистратор <> &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПРГ_ОстаткиПоБюджетамОбороты.ЗаявкаНаРасходованиеСредств,
		|	ПРГ_ОстаткиПоБюджетамОбороты.СарехОрех,
		//|	ПРГ_ОстаткиПоБюджетамОбороты.Проект,
		|	ПРГ_ОстаткиПоБюджетамОбороты.СтатьяДДС,
		|	ПРГ_ОстаткиПоБюджетамОбороты.Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Дата КАК Дата,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ЦФО КАК ЦФО,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Проект,
		|	ВЫБОР
		|		КОГДА ПРГ_ОстаткиПоБюджетамОбороты.СуммаОборот - ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа >= 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОтменаПроведения,
		|	ПРГ_ОстаткиПоБюджетамОбороты.СуммаОборот + ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа КАК ОстатокПослеЗаявки,
		|	ПРГ_ОстаткиПоБюджетамОбороты.СуммаОборот - ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа КАК ПроверкаПлатежа,
		|	ПРГ_ОстаткиПоБюджетамОбороты.СуммаОборот,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа
		|ИЗ
		|	ДанныеПоЗаявке КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоБюджету КАК ПРГ_ОстаткиПоБюджетамОбороты
		|		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ЦФО = ПРГ_ОстаткиПоБюджетамОбороты.Подразделение
		|			И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = ПРГ_ОстаткиПоБюджетамОбороты.СтатьяДДС
		|			И (ПРГ_ОстаткиПоБюджетамОбороты.СарехОрех = ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.СарехОрех)";
	Иначе
		
		//// САРЕХ
		//Запрос.Текст =
		//"ВЫБРАТЬ
		//|	ПРГ_НеКонтролироватьОстаткиПоСтатьям.СтатьяДДС
		//|ПОМЕСТИТЬ ИсключаемыеСтатьиДДС
		//|ИЗ
		//|	РегистрСведений.ПРГ_НеКонтролироватьОстаткиПоСтатьям КАК ПРГ_НеКонтролироватьОстаткиПоСтатьям
		//|ГДЕ
		//|	ПРГ_НеКонтролироватьОстаткиПоСтатьям.Подразделение = &Подразделение
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Дата КАК Дата,
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ЦФО КАК ЦФО,
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Проект,
		//|	ВЫБОР
		//|		КОГДА ПРГ_ОстаткиПоБюджетамОбороты.СуммаОборот >= ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов * ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов * ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КратностьВзаиморасчетов
		//|			ТОГДА ЛОЖЬ
		//|		ИНАЧЕ ИСТИНА
		//|	КОНЕЦ КАК ОтменаПроведения,
		//|	ПРГ_ОстаткиПоБюджетамОбороты.СуммаОборот - ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа КАК ПроверкаПлатежа
		//|ИЗ
		//|	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПРГ_ОстаткиПоБюджетам.Обороты(&НачГода, КОНЕЦПЕРИОДА(&КонДата, ГОД), , ) КАК ПРГ_ОстаткиПоБюджетамОбороты
		//|		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = ПРГ_ОстаткиПоБюджетамОбороты.СтатьяДДС
		//|			И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Проект = ПРГ_ОстаткиПоБюджетамОбороты.Проект
		//|			И (ПРГ_ОстаткиПоБюджетамОбороты.СарехОрех = &СарехОрех)
		//|			И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ЦФО.ПРГЦФО = ПРГ_ОстаткиПоБюджетамОбороты.Подразделение.ПРГЦФО
		//|ГДЕ
		//|	НЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В
		//|				(ВЫБРАТЬ
		//|					Выб.СтатьяДДС
		//|				ИЗ
		//|					ИсключаемыеСтатьиДДС КАК Выб)
		//|	И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка";
		
		
		// САРЕХ
		Запрос.Текст =
		//"ВЫБРАТЬ
		//|	ПРГ_НеКонтролироватьОстаткиПоСтатьям.СтатьяДДС
		//|ПОМЕСТИТЬ ИсключаемыеСтатьиДДС
		//|ИЗ
		//|	РегистрСведений.ПРГ_НеКонтролироватьОстаткиПоСтатьям КАК ПРГ_НеКонтролироватьОстаткиПоСтатьям
		//|ГДЕ
		//|	ПРГ_НеКонтролироватьОстаткиПоСтатьям.Подразделение = &Подразделение
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка,
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Проект,
		//|	СУММА(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов * ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов * ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КратностьВзаиморасчетов) КАК СуммаПлатежа,
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		//|	ЕСТЬNULL(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ЦФО.ПРГЦФО, ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ЦФО.ПРГЦФО) КАК ЦФО
		//|ПОМЕСТИТЬ ДанныеПоЗаявке
		//|ИЗ
		//|	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
		//|ГДЕ
		//|	НЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В
		//|				(ВЫБРАТЬ
		//|					Выб.СтатьяДДС
		//|				ИЗ
		//|					ИсключаемыеСтатьиДДС КАК Выб)
		//|	И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка,
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Проект,
		//|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
		//|	ЕСТЬNULL(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ЦФО.ПРГЦФО, ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ЦФО.ПРГЦФО)
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ДанныеПоЗаявке.Проект,
		//|	ДанныеПоЗаявке.СуммаПлатежа,
		//|	ДанныеПоЗаявке.СтатьяДДС,
		//|	ДанныеПоЗаявке.ЦФО,
		//|	СУММА(ПРГ_ОстаткиПоБюджетамОбороты.СуммаОборот) КАК СуммаОстаток,
		//|	СУММА(ПРГ_ОстаткиПоБюджетамОбороты.СуммаОборот) - ДанныеПоЗаявке.СуммаПлатежа КАК ПроверкаПлатежа,
		//|	ВЫБОР
		//|		КОГДА СУММА(ПРГ_ОстаткиПоБюджетамОбороты.СуммаОборот  + ВЫБОР
		//|				КОГДА ДанныеПоЗаявке.Ссылка.Проведен
		//|					ТОГДА ДанныеПоЗаявке.СуммаПлатежа
		//|				ИНАЧЕ 0
		//|			КОНЕЦ) - ДанныеПоЗаявке.СуммаПлатежа >= 0
		//|			ТОГДА ЛОЖЬ
		//|		ИНАЧЕ ИСТИНА
		//|	КОНЕЦ КАК ОтменаПроведения
		//|ИЗ
		//|	ДанныеПоЗаявке КАК ДанныеПоЗаявке
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПРГ_ОстаткиПоБюджетам.Обороты(НачалоПериода(&КонДата, Год),&КонДата) КАК ПРГ_ОстаткиПоБюджетамОбороты
		//|		ПО ДанныеПоЗаявке.Проект = ПРГ_ОстаткиПоБюджетамОбороты.Проект
		//|			И ДанныеПоЗаявке.СтатьяДДС = ПРГ_ОстаткиПоБюджетамОбороты.СтатьяДДС
		//|			И ДанныеПоЗаявке.ЦФО = ПРГ_ОстаткиПоБюджетамОбороты.Подразделение.ПРГЦФО
		//|			И ДанныеПоЗаявке.Ссылка.СарехОрех = ПРГ_ОстаткиПоБюджетамОбороты.СарехОрех
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ДанныеПоЗаявке.Проект,
		//|	ДанныеПоЗаявке.СуммаПлатежа,
		//|	ДанныеПоЗаявке.СтатьяДДС,
		//|	ДанныеПоЗаявке.ЦФО";
		
		
		"ВЫБРАТЬ
		|	ПРГ_НеКонтролироватьОстаткиПоСтатьям.СтатьяДДС
		|ПОМЕСТИТЬ ИсключаемыеСтатьиДДС
		|ИЗ
		|	РегистрСведений.ПРГ_НеКонтролироватьОстаткиПоСтатьям КАК ПРГ_НеКонтролироватьОстаткиПоСтатьям
		|ГДЕ
		|	ПРГ_НеКонтролироватьОстаткиПоСтатьям.Подразделение = &Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Проект,
		|	СУММА(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов * ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов * ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КратностьВзаиморасчетов) КАК СуммаПлатежа,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	ЕСТЬNULL(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ЦФО.ПРГЦФО, ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ЦФО.ПРГЦФО) КАК ЦФО,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Проведен КАК Проведен
		|ПОМЕСТИТЬ ДанныеПоЗаявке
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
		|ГДЕ
		|	НЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В
		|				(ВЫБРАТЬ
		|					Выб.СтатьяДДС
		|				ИЗ
		|					ИсключаемыеСтатьиДДС КАК Выб)
		|	И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Проект,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
		|	ЕСТЬNULL(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ЦФО.ПРГЦФО, ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ЦФО.ПРГЦФО),
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПоЗаявке.Проект,
		|	ДанныеПоЗаявке.СуммаПлатежа,
		|	ДанныеПоЗаявке.СтатьяДДС,
		|	ДанныеПоЗаявке.ЦФО,
		|	СУММА(ЕСТЬNULL(ПРГ_ОстаткиПоБюджетамОбороты.СуммаОборот, 0)) КАК СуммаОстаток,
		|	СУММА(ЕСТЬNULL(ПРГ_ОстаткиПоБюджетамОбороты.СуммаОборот, 0)) - ДанныеПоЗаявке.СуммаПлатежа КАК ПроверкаПлатежа,
		|	ЕСТЬNULL(-ПРГ_ОстаткиПоБюджетамТекЗаявка.Сумма, 0) КАК СуммаПоРегистру,
		|	ВЫБОР
		|		КОГДА СУММА(ЕСТЬNULL(ПРГ_ОстаткиПоБюджетамОбороты.СуммаОборот, 0)) + ЕСТЬNULL(-ПРГ_ОстаткиПоБюджетамТекЗаявка.Сумма, 0) >= ДанныеПоЗаявке.СуммаПлатежа
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОтменаПроведения,
		|	ДанныеПоЗаявке.Проведен
		|ИЗ
		|	ДанныеПоЗаявке КАК ДанныеПоЗаявке
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПРГ_ОстаткиПоБюджетам.Обороты(НАЧАЛОПЕРИОДА(&КонДата, ГОД), &КонДата, , ) КАК ПРГ_ОстаткиПоБюджетамОбороты
		|		ПО ДанныеПоЗаявке.Проект = ПРГ_ОстаткиПоБюджетамОбороты.Проект
		|			И ДанныеПоЗаявке.СтатьяДДС = ПРГ_ОстаткиПоБюджетамОбороты.СтатьяДДС
		|			И ДанныеПоЗаявке.ЦФО = ПРГ_ОстаткиПоБюджетамОбороты.Подразделение.ПРГЦФО
		|			И ДанныеПоЗаявке.Ссылка.СарехОрех = ПРГ_ОстаткиПоБюджетамОбороты.СарехОрех
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПРГ_ОстаткиПоБюджетам КАК ПРГ_ОстаткиПоБюджетамТекЗаявка
		|		ПО (ПРГ_ОстаткиПоБюджетамТекЗаявка.Регистратор = &Ссылка)
		|			И ДанныеПоЗаявке.Проект = ПРГ_ОстаткиПоБюджетамТекЗаявка.Проект
		|			И ДанныеПоЗаявке.СтатьяДДС = ПРГ_ОстаткиПоБюджетамТекЗаявка.СтатьяДДС
		|			И ДанныеПоЗаявке.ЦФО = ПРГ_ОстаткиПоБюджетамТекЗаявка.Подразделение.ПРГЦФО
		|			И ДанныеПоЗаявке.Ссылка.СарехОрех = ПРГ_ОстаткиПоБюджетамТекЗаявка.СарехОрех
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПоЗаявке.Проект,
		|	ДанныеПоЗаявке.СуммаПлатежа,
		|	ДанныеПоЗаявке.СтатьяДДС,
		|	ДанныеПоЗаявке.ЦФО,
		|	ДанныеПоЗаявке.Проведен,
		|	ПРГ_ОстаткиПоБюджетамТекЗаявка.Сумма";
		
	КонецЕсли;	
	//начало изменений БП 06 
	Запрос.УстановитьПараметр("НачДата", НачалоМесяца(КонДата));
	Запрос.УстановитьПараметр("НачГода", НачалоГода(КонДата));
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("СарехОрех",СарехОрех);
	Запрос.УстановитьПараметр("Подразделение",ЭтотОбъект.Ссылка.ЦФО);
	//конец изменений БП 06 
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Строка = ТЗ.Найти(Истина, "ОтменаПроведения");
	Если Строка = Неопределено Тогда
		
		Возврат Ложь;
		
	Иначе
		
		//Для Каждого Строка Из НайденнаяСтрока Цикл
		Если СписокСтатейКК.Найти(Строка.СтатьяДДС) = Неопределено Тогда	
			Сообщить("В ЦФО " + Строка.ЦФО + ?(ЗначениеЗаполнено(Строка.Проект), "По проекту  "+Строка.Проект,"") 
			+ " и статье ДДС " + Строка.СтатьяДДС + " нет доступного остатка. Обратитесь к бюджетному контролеру за дополнительными разъяснениями (по электронной почте)");
		Иначе
			Сообщить("В ЦФО " + Строка.ЦФО + ?(ЗначениеЗаполнено(Строка.Проект), "По проекту  "+Строка.Проект,"") 
			+ " и статье ДДС " + Строка.СтатьяДДС + " нет доступного остатка. Обратитесь к кредитному контролеру за дополнительными разъяснениями (по электронной почте)");
		КонецЕсли;
		//КонецЦикла;
		Возврат Истина;
		
		
	КонецЕсли;
	
	//Возврат Ложь;
	
КонецФункции

Функция ЕстьСтатьяОбазательноеУказаниеБонусногоАкта()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРГ_СлужебныйТаблицаПараметров.Параметр
	|ИЗ
	|	Справочник.ПРГ_Служебный.ТаблицаПараметров КАК ПРГ_СлужебныйТаблицаПараметров
	|ГДЕ
	|	ПРГ_СлужебныйТаблицаПараметров.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Справочники.ПРГ_Служебный.НайтиПоНаименованию("СписокСтатейОбязательноеУказаниеАкта"));
	РезТЗ = Запрос.Выполнить().Выгрузить();
	СтатьяНайдена = Ложь;
	Для Каждого ТекСтрока Из РасшифровкаПлатежа Цикл		
		Если РезТЗ.Найти(ТекСтрока.СтатьяДвиженияДенежныхСредств) <> Неопределено Тогда
			СтатьяНайдена = Истина;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	Возврат СтатьяНайдена;
	
КонецФункции
// ->

//начало изменений БП 06 

Процедура ПроверкаДоговоров(Отказ,Объект) 

	Если Объект.ВидОперации <> Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику
	и	 Объект.ВидОперации <> Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами
	и	 Объект.ВидОперации <> Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю
	и	Объект.ВидОперации <> Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами
	Тогда
	  	 возврат;
	КонецЕсли;
	
/// запрос по договорам
  Запрос  = Новый  Запрос("ВЫБРАТЬ
                   |	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
                   |	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
                   |	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка
                   |ИЗ
                   |	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
                   |ГДЕ
                   |	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка");
				   
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	ЕстьРасчетыВВалюте  = Ложь;
	ЕстьРасчетыВРуб	    = Ложь;
	ЕстьРасчетыВУе		= Ложь;
	
	СписокВалют = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.РасчетыВУсловныхЕдиницах Тогда
			ЕстьРасчетыВУе     = ?(Выборка.РасчетыВУсловныхЕдиницах,Истина,?(ЕстьРасчетыВУе,Истина,Ложь));			
		Иначе
			ЕстьРасчетыВРуб    = ?(Выборка.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета,Истина,?(ЕстьРасчетыВРуб,Истина,Ложь));
			ЕстьРасчетыВВалюте = ?(Выборка.ВалютаВзаиморасчетов <>  мВалютаРегламентированногоУчета,Истина,?(ЕстьРасчетыВВалюте,Истина,Ложь));
		КонецЕсли;	
		Если СписокВалют.Найти(Выборка.ВалютаВзаиморасчетов) = Неопределено Тогда
			СписокВалют.Добавить(Выборка.ВалютаВзаиморасчетов);
		КонецЕсли;	
	КонецЦикла;	

	Если (ЕстьРасчетыВВалюте и ЕстьРасчетыВРуб)
	или  (ЕстьРасчетыВВалюте и ЕстьРасчетыВУе)
	или  (ЕстьРасчетыВРуб    и ЕстьРасчетыВУе)
	или СписокВалют.Количество() > 1
		Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В заявке  не может несколько договоров с разными валютами или расчетами!!",Отказ);
		возврат;
	КонецЕсли;	
	
	Если ЕстьРасчетыВВалюте Тогда
		Если СписокВалют[0] <> Объект.ВалютаДокумента Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Валюта заявки должна быть  !!!"+СписокВалют[0],Отказ);
			возврат;
		КонецЕслИ;
	КонецЕсли;	
	
	Если ЕстьРасчетыВУе Тогда
		Если Объект.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Валюта заявки должна быть  !!!"+мВалютаРегламентированногоУчета,Отказ);
			возврат;
		КонецЕслИ;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьСтавкиНДСДляНалогов()
	// <- Шевченков
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств Тогда
		
		Для Каждого Строка Из ЭтотОбъект.РасшифровкаПлатежа Цикл
			Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
				
	КонецЕсли;
	// -> 
КонецПроцедуры

Функция ПроверитьДублиПоступлений()
	
	Проверка = Ложь;
	Накладная= Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.РасшифровкаПлатежа Цикл
		
		//НайденныеСтроки = ЭтотОбъект.РасшифровкаПлатежа.Найти(СтрокаТЧ.ДокументРасчетовСКонтрагентом);
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДокументРасчетовСКонтрагентом) Тогда Продолжить КонецЕсли;
		Отбор = Новый Структура();
		Отбор.Вставить("ДокументРасчетовСКонтрагентом", СтрокаТЧ.ДокументРасчетовСКонтрагентом);
		НайденныеСтроки = ЭтотОбъект.РасшифровкаПлатежа.НайтиСтроки(Отбор);
				
		Если НайденныеСтроки.Количество() > 1 Тогда
			Проверка  = Истина;
		    Накладная = НайденныеСтроки[1].ДокументРасчетовСКонтрагентом;
			//Возврат Истина;
		КонецЕсли;
				
	КонецЦикла;
	
	Если Проверка Тогда
		Сообщить("В документе обнаружены строки с повторяющимися накладными, проведение невозможно.");
		Сообщить(Накладная);
	КонецЕсли;	
	Возврат Проверка;
	
КонецФункции

Функция ПроверитьДублиПоступленийНовыйАлгоритм()
	
	Проверка = Ложь;
	Накладная= Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	ТЗПроверка = Этотобъект.РасшифровкаПлатежа.Выгрузить();
	ТЗПроверка.Свернуть("Сделка,ДокументРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,СтавкаНДС");
	ТЗПроверка.Очистить();
	
	ТЗПроверка.Колонки.Добавить("ПустаяСделкаИДокумент");
	
	Для Каждого СтрокаТЧ Из ЭтотОбъект.РасшифровкаПлатежа Цикл

		Если (ЗначениеЗаполнено(СтрокаТЧ.ДокументРасчетовСКонтрагентом) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.Сделка) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС)) И ЗначениеЗаполнено(СтрокаТЧ.СтатьяДвиженияДенежныхСредств) Тогда
			
			НоваяСтрока = ТЗПроверка.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ДокументРасчетовСКонтрагентом) И Не ЗначениеЗаполнено(СтрокаТЧ.Сделка) Тогда
				НоваяСтрока.ПустаяСделкаИДокумент = 1;
			КонецЕсли;
						
		КонецЕсли;
									
	КонецЦикла;
	
	КолВоСтрок = ТЗПроверка.Количество();
	
	Если ТЗПроверка.Итог("ПустаяСделкаИДокумент") = КолВоСтрок Тогда
		Проверка = Ложь;
	Иначе
		ТЗПроверка.Свернуть("Сделка,ДокументРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,СтавкаНДС", "ПустаяСделкаИДокумент");
		Если КолВоСтрок = ТЗПроверка.Количество() Тогда
			Проверка = Ложь;
		Иначе
			Проверка = Истина;
		КонецЕсли;
	КонецЕсли;
		
	Если Проверка Тогда
		Сообщить("В документе обнаружены строки с повторяющимися накладными, проведение невозможно.");
	КонецЕсли;
	
	Возврат Проверка;
	
КонецФункции

Процедура СверитьСуммыСПоступлениями()

	Для Каждого ТекСтрока Из ЭтотОбъект.РасшифровкаПлатежа Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.ДокументРасчетовСКонтрагентом) И ТипЗнч(ТекСтрока.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			СуммаДокументаРасчетов = 0;
			
			СуммаДокументаРасчетов = ПолучитьСуммуПоступления(ТекСтрока.ДокументРасчетовСКонтрагентом);
			
			Если ТекСтрока.СуммаВзаиморасчетов <> СуммаДокументаРасчетов Тогда
				
				Сообщить("В строке " + Строка(ТекСтрока.НомерСтроки) + " сумма взаиморасчетов не соответствует сумме накладной." + Символы.ПС + 
				"Сумма заявки:    " + Строка(ТекСтрока.СуммаВзаиморасчетов) + Символы.ПС + 
				"Сумма накладной: " + Строка(СуммаДокументаРасчетов));
				
			КонецЕсли;
						
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСуммуПоступления(ДокументПоступления)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОбороты.Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	|	СУММА(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовОборот) КАК СуммаВзаиморасчетовОборот
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, , Регистратор, ) КАК ВзаиморасчетыСКонтрагентамиОбороты
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОбороты.Регистратор = &ДокументПоступления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОбороты.Контрагент";
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
	РезТЗ = Запрос.Выполнить().Выгрузить();
	
	Если РезТЗ.Количество() = 1 Тогда
		Возврат РезТЗ[0].СуммаВзаиморасчетовОборот * -1;
	Иначе
		Возврат 0;
	КонецЕсли;
		
КонецФункции
//конец изменений БП 06 

//m.ionov@a-prof.ru 25.02.2015
Функция ЕстьДокументыПоБонусномуАкту(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаявкаНаРасходованиеСредств.Ссылка
	               |ИЗ
	               |	Документ.ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
	               |ГДЕ
	               |	ЗаявкаНаРасходованиеСредств.Проведен = ИСТИНА
	               |	И ЗаявкаНаРасходованиеСредств.ПКК_АктНачисленияБонусов = &ПКК_АктНачисленияБонусов
	               |	И НЕ ЗаявкаНаРасходованиеСредств.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("ПКК_АктНачисленияБонусов", ПКК_АктНачисленияБонусов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Бонусный акт " + СокрЛП(ПКК_АктНачисленияБонусов) + " уже используются в документе " + СокрЛП(Результат.Ссылка), Отказ);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//----m.ionov@a-prof.ru---

Функция ЕстьЗаполненынеПроекты()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Проект
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
	|ГДЕ
	|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И не ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Проект = Неопределено";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Рез = Запрос.Выполнить();
	
	Возврат ?(Рез.Пустой(), Ложь, Истина);
	
КонецФункции


 
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета=глЗначениеПеременной("ВалютаУправленческогоУчета"); 