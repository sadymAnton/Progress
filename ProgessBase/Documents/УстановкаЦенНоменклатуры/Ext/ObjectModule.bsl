Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;
Перем мИспользоватьХарактеристики Экспорт;

//{13.04.2015 Островерхий заявка №37897 
Перем мОтправитьУведомлениеНаЭлектроннуюПочту Экспорт;
Перем мПредыдущийСтатуДокумента Экспорт;
//13.04.2015 Островерхий} 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

#Если Клиент Тогда

// Функция печатает ценники.
//
Функция ПечатьЦенников()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК Печать,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	0 КАК Цена,
	|	1 КАК Количество
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &Док
	|");

	Запрос.УстановитьПараметр("Док", Ссылка);

	ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
	ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);

	ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	ФормаПечатьЦенников.Открыть();

КонецФункции // ПечатьЦенников()

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма документа.
//
Функция ПечатьДокумента()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Ответственный.Представление КАК ОтветственныйПредставление,
	|	Дата
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	(УстановкаЦенНоменклатуры.ИндексСтрокиТаблицыЦен + 1)    КАК НомерСтроки,
	|	УстановкаЦенНоменклатуры.Номенклатура,
	|	УстановкаЦенНоменклатуры.Номенклатура.НаименованиеПолное КАК Товар,
	|	УстановкаЦенНоменклатуры.ХарактеристикаНоменклатуры      КАК Характеристика,
	|	NULL                                                     КАК Серия,
	|	УстановкаЦенНоменклатуры.ТипЦен                          КАК ТипЦен,
	|	УстановкаЦенНоменклатуры.Цена,
	|	УстановкаЦенНоменклатуры.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияПредставление,
	|	УстановкаЦенНоменклатуры.Валюта,
	|	УстановкаЦенНоменклатуры.Валюта.Представление            КАК ВалютаПредставление,
	|	УстановкаЦенНоменклатуры.ПроцентСкидкиНаценки
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатуры
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	УстановкаЦенНоменклатуры.ИндексСтрокиТаблицыЦен,
	|	УстановкаЦенНоменклатуры.ТипЦен
	|ИТОГИ
	|ПО УстановкаЦенНоменклатуры.ИндексСтрокиТаблицыЦен
	|";

	ЗапросПоТоварам = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УстановкаЦенНоменклатуры_ИзменениеЦен";

	Макет = ПолучитьМакет("ИзменениеЦен");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Изменение цен номенклатуры");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьШапкаНоменклатура   = Макет.ПолучитьОбласть("ШапкаТаблицы|Номенклатура");
	ОбластьШапкаТипЦен         = Макет.ПолучитьОбласть("ШапкаТаблицы|Цена");
	ОбластьСтрокаНоменклатура  = Макет.ПолучитьОбласть("Строка|Номенклатура");
	ОбластьСтрокаТипЦен        = Макет.ПолучитьОбласть("Строка|Цена");
	ОбластьПодвалНоменклатура  = Макет.ПолучитьОбласть("Подписи|Номенклатура");
	ОбластьПодвалТипЦен        = Макет.ПолучитьОбласть("Подписи|Цена");

	// Выведем шапку.
	ТабДокумент.Вывести(ОбластьШапкаНоменклатура);
	ВыборкаПоСтрокам = ЗапросПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаПоСтрокам.Следующий() Тогда
		Выборка = ВыборкаПоСтрокам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьШапкаТипЦен.Параметры.Заполнить(Выборка);
			ТабДокумент.Присоединить(ОбластьШапкаТипЦен);
		КонецЦикла;
	КонецЕсли;

	// Выведем таблицу.
	ВыборкаПоСтрокам = ЗапросПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл
		НоменклатураВыведена = Ложь;
		Выборка = ВыборкаПоСтрокам.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не НоменклатураВыведена Тогда
				ОбластьСтрокаНоменклатура.Параметры.Заполнить(Выборка);
				ОбластьСтрокаНоменклатура.Параметры.Товар = СокрЛП(Выборка.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(Выборка);
				ТабДокумент.Вывести(ОбластьСтрокаНоменклатура);
				НоменклатураВыведена = Истина;
			КонецЕсли;
			ОбластьСтрокаТипЦен.Параметры.Заполнить(Выборка);
			ТабДокумент.Присоединить(ОбластьСтрокаТипЦен);
		КонецЦикла;
	КонецЦикла;

	// Выведем подвал.
	ОбластьПодвалНоменклатура.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьПодвалНоменклатура);
	ВыборкаПоСтрокам = ЗапросПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаПоСтрокам.Следующий() Тогда
		Выборка = ВыборкаПоСтрокам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТабДокумент.Присоединить(ОбластьПодвалТипЦен);
		КонецЦикла;
	КонецЕсли;

	ТекОбласть = ТабДокумент.Области.ОтветственныйПредставление;

	ОбластьОтветственного = ТабДокумент.Область(ТекОбласть.Низ, 14, ТекОбласть.Низ, Мин(ТабДокумент.ШиринаТаблицы, 29));
	ОбластьОтветственного.Объединить();
	ОбластьОтветственного.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	ОбластьОтветственного.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на
// экран или принтер, а также распечатать необходимое количество копий.
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ПереченьЦен" Тогда
		ТабДокумент = ПечатьДокумента();
	ИначеЕсли ИмяМакета = "Ценники" Тогда
		ТабДокумент = ПечатьЦенников();
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа.
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("ПереченьЦен","Перечень цен");
	СтруктураМакетов.Вставить("Ценники", "Ценники на товары");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьТаблицуПечатныхФорм()

// Возвращает доступные табличные части для заполнения
//
// Возвращаемое значение:
//   Список значений с именами табличных частей
//
Функция ПолучитьТабличныеЧастиДляЗаполнения() Экспорт

	ТабличныеЧасти = Новый СписокЗначений;
	ТабличныеЧасти.Добавить("ТаблицаЦен", "Таблица цен");
	
	Возврат ТабличныеЧасти;

КонецФункции // ПолучитьТабличныеЧастиДляЗаполнения()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура;
	
	//m.ionov@a-prof.ru 05.09.2014
	Если ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУстановкиЦенНоменклатуры.ИндивидуальныеЦены
		//{08.12.2015 Островерхий заявка №46735 
		ИЛИ ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУстановкиЦенНоменклатуры.УстановкаЦенНаСиМ 
		//08.12.2015 Островерхий} 
		Тогда
		Если ПЦ_Контрагенты.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнены контрагенты!", Отказ);
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
//  ТаблицаПоТоварам - таблица значений, содержащая данные для проведения и проверки ТЧ "Товары".
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Общую процедуру проверки в этом документе звать нельзя, потому что номер строки в форме документа
	// отличается от системного.
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.ИндексСтрокиТаблицыЦен + 1) +
			                    """ табличной части для типа цен """ 
			                   + СокрЛП(СтрокаТаблицы.ТипЦен) + """ ";

		// Номенклатура.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнена Номенклатура.", Отказ, Заголовок);
		КонецЕсли;

		//{08.12.2015 Островерхий заявка №46735 
		Если ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУстановкиЦенНоменклатуры.УстановкаЦенНаСиМ Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура.МКЮ) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
				""" табличной части """ + "Товары" + """: содержится готовая продукция. " +
				"Здесь ее быть не должно!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли; 
		//08.12.2015 Островерхий} 
				
		// Валюта.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Валюта) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнена Валюта.", Отказ, Заголовок);
		КонецЕсли;

		// Единица для товаров.
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
		   И Не СтрокаТаблицы.Услуга
		   И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнена единица измерения.", Отказ, Заголовок);
		КонецЕсли;

		// Наборов здесь быть не должно.
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И СтрокаТаблицы.Набор Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится набор. " +
				                   "Наборов здесь быть не должно!", Отказ, Заголовок);
		КонецЕсли;

		// Проверить заполнение способа расчета для динамических цен, рассчитываемых и хранимых цен.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособРасчетаЦены)
		   И (СтрокаТаблицы.Рассчитывается
		 Или ЗначениеЗаполнено(СтрокаТаблицы.БазовыйТипЦен)) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнен способ расчета цены.", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет движения по регистрам.
//
// Параметры:
//  СтруктураШапкиДокумента - структура реквизитов шапки.
//  ТаблицаПоТоварам- таблица товаров.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	//++ torchinov@a-prof.ru 10.09.2014 
	Если СтруктураШапкиДокумента.ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУстановкиЦенНоменклатуры.ИндивидуальныеЦены 
		//{08.12.2015 Островерхий заявка №46735 
		ИЛИ СтруктураШапкиДокумента.ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУстановкиЦенНоменклатуры.УстановкаЦенНаСиМ 
		//08.12.2015 Островерхий} 
		Тогда
		НаборДвижений = Движения.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре;
				
		ТаблицаПоТоварам.Колонки.Добавить("ПЦ_Контрагент");
		ТаблицаПоТоварам.Колонки.Добавить("ПЦ_Регион");
		ТаблицаПоТоварам.Колонки.Добавить("ПЦ_КаналПродаж");
		ТаблицаПоТоварам.Колонки.ТипЦен.Имя = "ПЦ_ТипЦен"; //Добавить("ПЦ_ТипЦен");
		ТаблицаПоТоварам.Колонки.Валюта.Имя = "ВалютаЦены"; //Добавить("ВалютаЦены");
		
		ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПЦ_Регион, "ПЦ_Регион");
		ТаблицаПоТоварам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПЦ_КаналПродаж, "ПЦ_КаналПродаж");
		
		КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();
		
		ПервыйПроход = Истина;
		Для каждого СтрКонтрагенты Из ПЦ_Контрагенты Цикл
			
			Если ПервыйПроход Тогда
				КопияТаблицаПоТоварам.ЗаполнитьЗначения(СтрКонтрагенты.Контрагент, "ПЦ_Контрагент");	
			    ПервыйПроход = Ложь;
			Иначе
				Для Каждого СтрТовары Из ТаблицаПоТоварам Цикл
					НоваяСтрока = КопияТаблицаПоТоварам.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТовары);
					НоваяСтрока.ПЦ_Контрагент = СтрКонтрагенты.Контрагент;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла; 
				
	Иначе
		//--torchinov@a-prof.ru 10.09.2014
		
		НаборДвижений = Движения.ЦеныНоменклатуры;		
		
		//++ torchinov@a-prof.ru 10.09.2014 	
	КонецЕсли;
	//--torchinov@a-prof.ru 10.09.2014
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений.
	//m.ionov@a-prof.ru 24.10.2014
	//ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	Если СтруктураШапкиДокумента.ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУстановкиЦенНоменклатуры.ИндивидуальныеЦены 
		//{08.12.2015 Островерхий заявка №46735 
		ИЛИ СтруктураШапкиДокумента.ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУстановкиЦенНоменклатуры.УстановкаЦенНаСиМ 
		//08.12.2015 Островерхий} 
		Тогда
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицаПоТоварам, ТаблицаДвижений);
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	//m.ionov@a-prof.ru 01.12.2014
	//НаборДвижений.мПериод          = Дата;
	НаборДвижений.мПериод          = НачалоДня(Дата);
	//----m.ionov@a-prof.ru---
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	
	Если Не Отказ Тогда		
		//++ torchinov@a-prof.ru 10.09.2014
		Если СтруктураШапкиДокумента.ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУстановкиЦенНоменклатуры.ИндивидуальныеЦены
			//{08.12.2015 Островерхий заявка №46735 
			ИЛИ СтруктураШапкиДокумента.ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУстановкиЦенНоменклатуры.УстановкаЦенНаСиМ 
			//08.12.2015 Островерхий} 
			Тогда
			Движения.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.ВыполнитьДвижения();
		Иначе			
			//--torchinov@a-prof.ru 10.09.2014
			
			Движения.ЦеныНоменклатуры.ВыполнитьДвижения();
			
			//++ torchinov@a-prof.ru 10.09.2014	
		КонецЕсли;
		//--torchinov@a-prof.ru 10.09.2014
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
  
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа.
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("ИндексСтрокиТаблицыЦен"    , "ИндексСтрокиТаблицыЦен");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Валюта"                    , "Валюта");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ТипЦен"                    , "ТипЦен");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("СпособРасчетаЦены"         , "СпособРасчетаЦены");
	СтруктураПолей.Вставить("Рассчитывается"            , "ТипЦен.Рассчитывается");
	СтруктураПолей.Вставить("БазовыйТипЦен"             , "ТипЦен.БазовыйТипЦен");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();

	Если СтруктураШапкиДокумента.НеПроводитьНулевыеЗначения Тогда
		КоличествоСтрок = ТаблицаПоТоварам.Количество() - 1;
		Для Тмп = 0 По КоличествоСтрок Цикл
			СтрокаТаблицы = ТаблицаПоТоварам.Получить(КоличествоСтрок - Тмп);
			Если Не СтрокаТаблицы.Рассчитывается И СтрокаТаблицы.Цена = 0 Тогда
				ТаблицаПоТоварам.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	//m.ionov@a-prof.ru 17.09.2014
	
	ПроверитьЗаполнениеТабличнойЧастиКонтрагенты(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Если Не Отказ Тогда
	Если Не Отказ И 
		(ПЦ_СтатусДокумента = Перечисления.ПЦ_СтатусыУстановкиЦенНоменклатуры.Согласовано 
		//{08.12.2015 Островерхий заявка №46735 
		ИЛИ (ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУстановкиЦенНоменклатуры.УстановкаЦенНаСиМ 
			И (РольДоступна(Метаданные.ОсновнаяРоль.Имя) ИЛИ АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.УстановкаЦенНаСиМы)))
		//08.12.2015 Островерхий}
		)
		Тогда
	//----m.ionov@a-prof.ru---
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

	//{13.04.2015 Островерхий заявка №37897 
	Если мОтправитьУведомлениеНаЭлектроннуюПочту 
		//{08.12.2015 Островерхий заявка №46735 
		И НЕ ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУстановкиЦенНоменклатуры.УстановкаЦенНаСиМ 
		//08.12.2015 Островерхий} 
		Тогда
	
		СформироватьИОтправитьУведомленияНаЭлектроннуюПочту();	
	
	КонецЕсли;  
	//13.04.2015 Островерхий} 
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	Информация = "";
	Для Каждого ТекущийТип Из ТипыЦен Цикл
		Если Информация <> "" Тогда
			Информация = Информация + ", ";
		КонецЕсли;
		Информация = Информация + ТекущийТип.ТипЦен.Наименование;
	КонецЦикла;
	
	//m.ionov@a-prof.ru 15.10.2014
	
	ПЦ_СоставКонтрагентов = "";
	Для Каждого СтрКонтрагент Из ПЦ_Контрагенты Цикл
		Если ПЦ_СоставКонтрагентов <> "" Тогда
			ПЦ_СоставКонтрагентов = ПЦ_СоставКонтрагентов + ", ";
		КонецЕсли;
		ПЦ_СоставКонтрагентов = ПЦ_СоставКонтрагентов + СокрЛП(СтрКонтрагент.Контрагент);
	КонецЦикла;
	
	Если Не Отказ Тогда
		РазрешитьЗапись = Ложь;
		Если ДополнительныеСвойства.Свойство("РазрешитьЗапись", РазрешитьЗапись) = Ложь Тогда
			РазрешитьЗапись = Ложь;
		КонецЕсли;
		
		Если Не РазрешитьЗапись Тогда
			Отказ = Не МожноМенятьДокумент();						
		КонецЕсли;		
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//{13.04.2015 Островерхий заявка №37897 
	Если НЕ Отказ
		И (ЭтоНовый() ИЛИ НЕ ЭтоНовый() И НЕ ПЦ_СтатусДокумента = Ссылка.ПЦ_СтатусДокумента) Тогда
	
		мОтправитьУведомлениеНаЭлектроннуюПочту = Истина;	
		мПредыдущийСтатуДокумента = Ссылка.ПЦ_СтатусДокумента;
		
	КонецЕсли;  
	//13.04.2015 Островерхий} 
	
	//{08.12.2015 Островерхий заявка №46735 
	Если ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУстановкиЦенНоменклатуры.УстановкаЦенНаСиМ Тогда
	
		ПЦ_СтатусДокумента = Перечисления.ПЦ_СтатусыУстановкиЦенНоменклатуры.Согласовано;	
	
	КонецЕсли;  
	//08.12.2015 Островерхий}
	
КонецПроцедуры // ПередЗаписью()

//m.ionov@a-prof.ru 24.10.2014
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаписатьИзменениеСтатусов(Отказ);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьИзменениеСтатусов(Отказ) Экспорт
	
	//Движения по регистру накопления "АП_СтатусыДокументов"
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		СформируемЗаписьПоРегиструСтатусы(Отказ);
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = ПЦ_СтатусДокумента Тогда
	    СформируемЗаписьПоРегиструСтатусы(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструСтатусы(Отказ)

	мДатаЗаписи = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = ПЦ_СтатусДокумента;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиКонтрагенты(СтруктураШапкиДокумента, Отказ, Заголовок)
	СтруктураОбязательныхПолей = Новый Структура("Контрагент");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПЦ_Контрагенты", СтруктураОбязательныхПолей, Отказ, Заголовок);
КонецПроцедуры


Функция МожноМенятьДокумент(ВыводитьСообщение = Истина) Экспорт
	
	МожноМенять = Истина;
	
	Если ЭтоНовый() Тогда
		Возврат Истина;
	КонецЕсли;
	
	//{08.12.2015 Островерхий заявка №46735 	
	Если ПЦ_ВидОперации = Перечисления.ПЦ_ВидыОперацийУстановкиЦенНоменклатуры.УстановкаЦенНаСиМ 
		И АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.УстановкаЦенНаСиМы)
		Тогда
		МожноМенять = Истина;	
	//08.12.2015 Островерхий}
	ИначеЕсли Ссылка.ПЦ_СтатусДокумента = Перечисления.ПЦ_СтатусыУстановкиЦенНоменклатуры.Согласовано или Ссылка.ПЦ_СтатусДокумента = Перечисления.ПЦ_СтатусыУстановкиЦенНоменклатуры.СогласованоФЭО Тогда
		//Только сотрудник ОКК
		Если Не АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникКредитногоКонтроля) Тогда
			Если ВыводитьСообщение Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ согласован, изменения доступны только сотруднику отдела кредитного контроля", Ложь);
			КонецЕсли;
			МожноМенять = Ложь;
		КонецЕсли;
	ИначеЕсли Ссылка.ПЦ_СтатусДокумента = Перечисления.ПЦ_СтатусыУстановкиЦенНоменклатуры.Подготовлен Тогда
		//Сотрудник ОКК и ФЭО
		Если Не АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникКредитногоКонтроля)
			И Не АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникФЭО) Тогда
			Если ВыводитьСообщение Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ на согласовани, изменения доступны только сотруднику отдела ФЭО или кредитного контроля", Ложь);
			КонецЕсли;
			МожноМенять = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если РольДоступна("АП_Администратор") Тогда
		МожноМенять = Истина;
	КонецЕсли;
	
	Возврат МожноМенять;
КонецФункции

//----m.ionov@a-prof.ru---

Процедура СформироватьИОтправитьУведомленияНаЭлектроннуюПочту()

	//{09.11.2015 Островерхий заявка №б/н, исключить рассылку для всех баз кроме рабочей 
	Если  Нрег(СокрЛП(Константы.ПРГ_СтрокаПодключения.Получить())) <> Нрег(СтрокаСоединенияИнформационнойБазы()) Тогда
		Возврат;
	КонецЕсли;  
	//09.11.2015 Островерхий} 
	
	//Формирование текста письма
	ШапкаХТМЛ =
	"<!DOCTYPE html>
	|<html>
	|<head>
	|<style type='text/css'>
	|body { font-size: 16; }
	|caption { text-align: left; font-weight: bold; }
	|th { font-weight: normal; text-align: center; background-color: lightgray; border: 1px solid black; border-bottom-width: 0px; }
	|td { padding: 2px; }
	|table { border-collapse: collapse; }
	|table, td { border: 1px solid black; }
	|.red { color: red; }
	|.ar { text-align: right; }
	|.grayinfo { font-size: 13; color: gray; }
	|</style>
	|</head>
	|<body>
	|";

	ШапкаПисьма =
	"<p>Здравствуйте,</p>
	|<p>Информируем вас о том что изменен (создан новый) документ установка цен номенклатуры.</p>
	|";
	
	ДанныеОДокументах =
	"<p><span style=""font-weight: bold;"">Информация о документе</span>
	|<table>
	|<colgroup>
	|<col width='200' bgcolor='lightgray'/>
	|</colgroup>
	|<tr><td>Номер документа </td><td> %ДокументЗаказНомер% </td></tr>
	|<tr><td>Дата документа </td><td> %ДокументЗаказДата% </td></tr>
	|<tr><td>Ответственный </td><td> %Ответственный% </td></tr>
	|<tr><td>Статус документа </td><td><b> %СтатусДокумента% </b></td></tr>
	|<tr><td>Предыдущий статус документа </td><td> %ПредыдущийСтатусДокумента% </td></tr>
	|</table></p>
	|";
	
	ДанныеОДокументах = СтрЗаменить(ДанныеОДокументах, "%ДокументЗаказНомер%", Строка(Номер));
	ДанныеОДокументах = СтрЗаменить(ДанныеОДокументах, "%ДокументЗаказДата%", Строка(Дата));
	ДанныеОДокументах = СтрЗаменить(ДанныеОДокументах, "%Ответственный%", Строка(Ответственный));
	ДанныеОДокументах = СтрЗаменить(ДанныеОДокументах, "%СтатусДокумента%", Строка(ПЦ_СтатусДокумента));
	ДанныеОДокументах = СтрЗаменить(ДанныеОДокументах, "%ПредыдущийСтатусДокумента%", Строка(мПредыдущийСтатуДокумента));
	
	ПодвалПисьма =
	"<p>
	|<span class='grayinfo'>Уведомление сгенерировано автоматически, отвечать на это письмо не нужно.</span>
	|</p>
	|<br>
	|<p>С уважением,</p>
	|<p>Департамент информационных технологий.</p>
	|</html>
	|";
	
	ТекстПисьма = ШапкаХТМЛ + ШапкаПисьма + ДанныеОДокументах + ПодвалПисьма;
	
	АдресПолучателя = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(Ответственный.Физлицо);
	
	СписокПолучателей = Справочники.ПРГ_Служебный.ПолучитьОбъектыИзГруппы(Справочники.ПРГ_Служебный.ПолучателиСообщенийОНовыхУстановкахЦен);
	
	ПолучателиСообщений = Новый СписокЗначений;
	ПолучателиСообщений.Добавить(АдресПолучателя);
	
	Для каждого ТекЭлемент Из СписокПолучателей Цикл
		
		ПолучателиСообщений.Добавить(УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(ТекЭлемент));		
		
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(АдресПолучателя) Тогда
		
		ПРГ_Регламентый.ОправитьФайл("Уведомление об изменении документа установка цен номенклатуры", ПолучателиСообщений, ТекстПисьма, , , , Истина);
		
	КонецЕсли;

КонецПроцедуры
 

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");
мИспользоватьХарактеристики     = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
мОтправитьУведомлениеНаЭлектроннуюПочту = Ложь;
мПредыдущийСтатуДокумента = Перечисления.ПЦ_СтатусыУстановкиЦенНоменклатуры.ПустаяСсылка();
