Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета;

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли; 
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,, Ссылка));
		
КонецПроцедуры // Печать
	
// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
	Возврат Новый Структура();
		
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	//++ Spl_Апроф 06.05.2015 (k.russkih@a-prof.ru)
	Если ВидОперации = Перечисления.ПТЛ_ВидОперацииЖурналУчетаВъездаВыезда.ПривязанКПлануДоставки Тогда
		СтруктураОбязательныхПолей = Новый Структура("Ответственный, Организация, ПланДоставки, Рейс, ДатаОтгрузки");	
	Иначе	
	    СтруктураОбязательныхПолей = Новый Структура("Ответственный, Организация");
	КонецЕсли;	
	//-- Spl_Апроф

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ОбработкаПроведения(Отказ, Режим)
	//начало изменений Ожиганов 13.11.2015 б/н уменьшение вероятности взаимоблокировки при проведении Журна учета и плана доставки 
	//Если мУдалятьДвижения Тогда
	Если мУдалятьДвижения и  Движения.Количество() > 0 Тогда
    //конец изменений 
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru = 'Проведение документа """ + СокрЛП(Ссылка) + """: '");
	
		
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке(),
	ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект), мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	//ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаДвижений", ТаблицаДвижений));
	
	//Blik 060117 57270 н
	//проверить изменить статус задания на перевозку для отгрузки от поставщика
	Если ЗначениеЗаполнено(ДатаВъезда) и ВидОперации = Перечисления.ПТЛ_ВидОперацииЖурналУчетаВъездаВыезда.ПривязанКПлануДоставкиПоставщики тогда
		ПроверитьИзменитьСтатусЗаданияНаперевозку();
	КонецЕсли;
	//Blik 060117 57270 к
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если НЕ ДатаПриезда = Дата(1,1,1) 
		ИЛИ НЕ ДатаВъезда = Дата(1,1,1) 
		ИЛИ НЕ ДатаПолученияДокументов = Дата(1,1,1) 
		ИЛИ НЕ ДатаНачалаПогрузки = Дата(1,1,1) 
		ИЛИ НЕ ДатаПогрузки = Дата(1,1,1) 
		ИЛИ НЕ ДатаВыезда = Дата(1,1,1) 
		ИЛИ МаршрутныйЛистПредоставлен
		ИЛИ ПеревозчикНеПоПлану Тогда
		
		ЕстьДанные = Истина;
	Иначе
		ЕстьДанные = Ложь;
	КонецЕсли;
	
	//начало изменений Ожиганов 29.09.2015 немного оптимизируем
	//МаршрутныйЛист = СокрЛП(ПланДоставки.Номер) + "/" + СокрЛП(Рейс.КлючСтроки); 
	//начало изменений Ожиганов 12.11.2015 б/н уменьшение вероятности взаимоблокировки при проведении Журна учета и плана доставки 
	// перенесем в форму определение номера маршрутно листа
	//СтруктПлана = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказаСложНПоля(ПланДоставки,Новый Структура("Номер"));
	//СтруктРейса = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаСпрСложНПоля(Рейс,Новый Структура("КлючСтроки"));
	//МаршрутныйЛист  = ?(СтруктПлана=Неопределено,"",СокрЛП(СтруктПлана.Номер))+ "/" + ?(СтруктРейса=Неопределено,"",СокрЛП(СтруктРейса.КлючСтроки));
	//конец изменений 
	//конец изменений 
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПТЛ_ЗаданиеНаПеревозку") Тогда
		
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
			Отделение = Основание.КП_Отделение;
		Иначе
			Отделение = Основание.Отделение;
		КонецЕсли;
		
		Если ЭтоНовый() Тогда
			ПеревозчикНеПоПлану = Ложь;
			Ответственный = глЗначениеПеременной("глТекущийПользователь");
		КонецЕсли;
		
		Организация = Основание.Организация;
		
		//++ Spl_Апроф 06.05.2015 (k.russkih@a-prof.ru)
		//Blik 040117 57270 н
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПТЛ_ЗаданиеНаПеревозку") Тогда
			Если Основание.ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика 
			//Blik 65458 230817 н
			или  Основание.ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера
			//Blik 65458 230817 к
			Тогда
				ВидОперации = Перечисления.ПТЛ_ВидОперацииЖурналУчетаВъездаВыезда.ПривязанКПлануДоставкиПоставщики;
			Иначе
				ВидОперации = Перечисления.ПТЛ_ВидОперацииЖурналУчетаВъездаВыезда.ПривязанКПлануДоставки;
			КонецЕсли;
		Иначе //Blik 040117 57270 к
			ВидОперации = Перечисления.ПТЛ_ВидОперацииЖурналУчетаВъездаВыезда.ПривязанКПлануДоставки;		
		КонецЕсли; //Blik 040117 57270
	
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПТЛ_ПланДоставки.ПланДоставки,
	               |	ПТЛ_ПланДоставки.Рейс,
				   |	ПТЛ_ПланДоставки.ТЭК,
				   |	ПТЛ_ПланДоставки.Водитель,
				   |	ПТЛ_ПланДоставки.ТранспортноеСредство,
				   |	ПТЛ_ПланДоставки.ДатаОтгрузки				   
				   |ИЗ
	               |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	               |ГДЕ
	               |	ПТЛ_ПланДоставки.%Задание% = &Задание
	               |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ";   
				   
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПТЛ_ЗаданиеНаПеревозку") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Задание%", "ЗаданиеНаПеревозку");				   
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Задание%", "ЗаданиеНаПодбор");	
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса; 
		Запрос.УстановитьПараметр("Задание", Основание);
	
		Результат = Запрос.Выполнить().Выбрать();
	
		Если Результат.Следующий() Тогда
			ПланДоставки = Результат.ПланДоставки;
			Рейс = Результат.Рейс;
			ДатаОтгрузки = Результат.ДатаОтгрузки;
			
			Если Не ПеревозчикНеПоПлану И Не ЕстьДанные Тогда
				ТЭК = Результат.ТЭК;
				Водитель = Результат.Водитель;
				ТранспортноеСредство = Результат.ТранспортноеСредство;
				
				Если ТипЗнч(Водитель) = Тип("СправочникСсылка.ПТЛ_Водители") Тогда
					Телефон = Водитель.Телефон;
					ПаспортныеДанные = Водитель.ПаспортныеДанные;
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьДанныеПоНакладным();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ПТЛ_Рейсы") Тогда
		
		
		Отделение = Основание.ПланДоставки.Отделение;
		
		//Blik 040117 57270 н
		//1 не круговой рейс создаем 1 док журнал
		//2 круговой рейс создаем 2 док журнал
		СтатусТипРейса = ПолучитьДанныеПоСтатусуИКруговомуРейсу(Основание);
		//Blik 040117 57270 к
		
		//++ Spl_Апроф 06.05.2015 (k.russkih@a-prof.ru)
		ВидОперации = СтатусТипРейса; //Blik 040117 57270 //Перечисления.ПТЛ_ВидОперацииЖурналУчетаВъездаВыезда.ПривязанКПлануДоставки;
				
		Если ЭтоНовый() Тогда
			ПеревозчикНеПоПлану = Ложь;
			Ответственный = глЗначениеПеременной("глТекущийПользователь");
		КонецЕсли;
		
		Организация = Основание.ПланДоставки.Организация;
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПТЛ_ПланДоставки.ПланДоставки,
	               |	ПТЛ_ПланДоставки.Рейс,
				   |	ПТЛ_ПланДоставки.ТЭК,
				   |	ПТЛ_ПланДоставки.Водитель,
				   |	ПТЛ_ПланДоставки.ТранспортноеСредство,
				   |	ПТЛ_ПланДоставки.ДатаОтгрузки				   
				   |ИЗ
	               |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	               |ГДЕ
	               |	ПТЛ_ПланДоставки.ПланДоставки = &ПланДоставки
	               //|	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ
				   |	И ПТЛ_ПланДоставки.Рейс = &Рейс";   
				   
		Запрос.Текст = ТекстЗапроса; 
		Запрос.УстановитьПараметр("ПланДоставки", Основание.ПланДоставки);
		Запрос.УстановитьПараметр("Рейс", Основание.Ссылка);
	
		Результат = Запрос.Выполнить().Выбрать();
	
		Если Результат.Следующий() Тогда
			ПланДоставки = Результат.ПланДоставки;
			Рейс = Результат.Рейс;
			ДатаОтгрузки = Результат.ДатаОтгрузки;
			
			Если Не ПеревозчикНеПоПлану И Не ЕстьДанные Тогда
				ТЭК = Результат.ТЭК;
				Водитель = Результат.Водитель;
				ТранспортноеСредство = Результат.ТранспортноеСредство;
				
				Если ТипЗнч(Водитель) = Тип("СправочникСсылка.ПТЛ_Водители") Тогда
					Телефон = Водитель.Телефон;
					ПаспортныеДанные = Водитель.ПаспортныеДанные;
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьДанныеПоНакладным();
		КонецЕсли;

			
	Иначе

		//++ Spl_Апроф 06.05.2015 (k.russkih@a-prof.ru)
		Если ВидОперации = Перечисления.ПТЛ_ВидОперацииЖурналУчетаВъездаВыезда.ПривязанКПлануДоставки Тогда
					
			ОбщегоНазначения.СообщитьОбОшибке("Не верно выбран документ основание", Истина);
			СтандартнаяОбработка = Ложь;			
			
		КонецЕсли; 		
		//-- Spl_Апроф	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеПоНакладным() Экспорт
	ВремТаб = ЗаданияНаПодбор.Выгрузить();
	
	ЗаданияНаПодбор.Очистить();
	
	//начало изменений Ожиганов 12.11.2015 б/н уменьшение вероятности взаимоблокировки при проведении Журна учета и плана доставки 
	//заменим запрос т.к. в случае перемещений задваивает информацию
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			   |	ПТЛ_ПланДоставки.ЗаданиеНаПодбор
	//			   |ИЗ
	//			   |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	//			   |ГДЕ
	//			   |	ПТЛ_ПланДоставки.ПланДоставки = &ПланДоставки
	//			   |	И ПТЛ_ПланДоставки.Рейс = &Рейс
	//			   |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ";
	//			   
	//Запрос.УстановитьПараметр("ПланДоставки", ПланДоставки);			   
	//Запрос.УстановитьПараметр("Рейс", Рейс);			   
	//
	//Результат = Запрос.Выполнить().Выгрузить();
	//СпЗаданий = Результат.ВыгрузитьКолонку("ЗаданиеНаПодбор");
	//
	//Запрос.УстановитьПараметр("СпЗаданий", СпЗаданий);
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ВложенныйЗапрос.Накладная,
	//			   |	ПТЛ_ПланДоставки.ЗаданиеНаПодбор
	//			   |ИЗ
	//			   |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//			   |			РеализацияТоваровУслуг.Ссылка КАК Накладная,
	//			   |			РеализацияТоваровУслуг.СП_ЗаданиеНаПодбор КАК ЗаданиеНаПодбор
	//			   |		ИЗ
	//			   |			Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//			   |		ГДЕ
	//			   |			РеализацияТоваровУслуг.СП_ЗаданиеНаПодбор В(&СпЗаданий)
	//			   |			И РеализацияТоваровУслуг.Проведен = ИСТИНА
	//			   |		
	//			   |		ОБЪЕДИНИТЬ ВСЕ
	//			   |		
	//			   |		ВЫБРАТЬ
	//			   |			ПеремещениеТоваров.Ссылка,
	//			   |			ПеремещениеТоваров.СП_ЗаданиеНаПодбор
	//			   |		ИЗ
	//			   |			Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	//			   |		ГДЕ
	//			   |			ПеремещениеТоваров.СП_ЗаданиеНаПодбор В(&СпЗаданий)
	//			   |			И ПеремещениеТоваров.Проведен = ИСТИНА
	//			   |		
	//			   |		ОБЪЕДИНИТЬ ВСЕ
	//			   |		
	//			   |		ВЫБРАТЬ
	//			   |			ТребованиеНакладная.Ссылка,
	//			   |			ТребованиеНакладная.СП_ЗаданиеНаПодбор
	//			   |		ИЗ
	//			   |			Документ.ТребованиеНакладная КАК ТребованиеНакладная
	//			   |		ГДЕ
	//			   |			ТребованиеНакладная.СП_ЗаданиеНаПодбор В(&СпЗаданий)
	//			   |			И ТребованиеНакладная.Проведен = ИСТИНА) КАК ВложенныйЗапрос
	//			   |		ПО ПТЛ_ПланДоставки.ЗаданиеНаПодбор = ВложенныйЗапрос.ЗаданиеНаПодбор
	//			   |ГДЕ
	//			   |	ПТЛ_ПланДоставки.ЗаданиеНаПодбор В(&СпЗаданий)
	//			   |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ";
	//			   
	//Результат = Запрос.Выполнить().Выгрузить();
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ПТЛ_ПланДоставки.ЗаданиеНаПодбор,
	                      |	МАКСИМУМ(ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЕСТЬNULL(ПеремещениеТоваров.Ссылка, ЕСТЬNULL(ТребованиеНакладная.Ссылка, НЕОПРЕДЕЛЕНО)))) КАК Накладная
	                      |ИЗ
	                      |	Документ.СП_ЗаданиеНаПодбор КАК Задания
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	                      |		ПО Задания.Ссылка = ПТЛ_ПланДоставки.ЗаданиеНаПодбор
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |		ПО Задания.Ссылка = РеализацияТоваровУслуг.СП_ЗаданиеНаПодбор
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТребованиеНакладная КАК ТребованиеНакладная
	                      |		ПО Задания.Ссылка = ТребованиеНакладная.СП_ЗаданиеНаПодбор
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	                      |		ПО Задания.Ссылка = ПеремещениеТоваров.СП_ЗаданиеНаПодбор
	                      |			И Задания.Склад = ПеремещениеТоваров.СкладОтправитель
	                      |ГДЕ
	                      |	ПТЛ_ПланДоставки.ПланДоставки = &ПланДоставки
	                      |	И ПТЛ_ПланДоставки.Рейс = &Рейс
	                      |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПТЛ_ПланДоставки.ЗаданиеНаПодбор");
						  
	Запрос.УстановитьПараметр("ПланДоставки", ПланДоставки);			   
	Запрос.УстановитьПараметр("Рейс", Рейс);	
	
	Результат = Запрос.Выполнить().Выгрузить();
	//конец изменений 
	
	ЗаданияНаПодбор.Загрузить(Результат);
	
	Для каждого СтрокаВремТаб Из ВремТаб Цикл
		Если Не СтрокаВремТаб.ГрузПолучилСоСклада 
			ИЛИ СтрокаВремТаб.Накладная = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиЗаданий = ЗаданияНаПодбор.НайтиСтроки(Новый Структура("ЗаданиеНаПодбор, Накладная", СтрокаВремТаб.ЗаданиеНаПодбор, СтрокаВремТаб.Накладная));
		Если СтрокиЗаданий.Количество() > 0 Тогда
			СтрокиЗаданий[0].ГрузПолучилСоСклада = СтрокаВремТаб.ГрузПолучилСоСклада;
		Иначе
			НоваяСтрока = ЗаданияНаПодбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВремТаб);
			НоваяСтрока.ВнеПлана = Истина;
		КонецЕсли;
	
	КонецЦикла; 
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ПланДоставки = Документы.ПТЛ_ПланДоставки.ПустаяСсылка();
	Рейс = Справочники.ПТЛ_Рейсы.ПустаяСсылка();
КонецПроцедуры

//Blik 040117 57270 н
Функция ПолучитьДанныеПоСтатусуИКруговомуРейсу(Основание)
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации как ВидОперации,
	               |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.Ссылка,
	               |	isnull(ПТЛ_ЖурналУчетаВъездаВыездаАМ.ВидОперации, Неопределено) как ВидОперЖР
	               |ИЗ
	               |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЖурналУчетаВъездаВыездаАМ КАК ПТЛ_ЖурналУчетаВъездаВыездаАМ
	               |		ПО ПТЛ_ПланДоставки.Рейс = ПТЛ_ЖурналУчетаВъездаВыездаАМ.Рейс
	               |			И ПТЛ_ПланДоставки.ПланДоставки = ПТЛ_ЖурналУчетаВъездаВыездаАМ.ПланДоставки
	               |			И (ПТЛ_ЖурналУчетаВъездаВыездаАМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ПТЛ_ВидОперацииЖурналУчетаВъездаВыезда.ПривязанКПлануДоставкиПоставщики))
	               |ГДЕ
	               |	ПТЛ_ПланДоставки.ПланДоставки = &ПланДоставки
	               |	И ПТЛ_ПланДоставки.Рейс = &Рейс
	               |	И ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ОтгрузкаКлиенту),
	               |	ПТЛ_ЖурналУчетаВъездаВыездаАМ.Ссылка,
	               |	isnull(ПТЛ_ЖурналУчетаВъездаВыездаАМ.ВидОперации, Неопределено)
	               |ИЗ
	               |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПТЛ_ЖурналУчетаВъездаВыездаАМ КАК ПТЛ_ЖурналУчетаВъездаВыездаАМ
	               |		ПО ПТЛ_ПланДоставки.Рейс = ПТЛ_ЖурналУчетаВъездаВыездаАМ.Рейс
	               |			И ПТЛ_ПланДоставки.ПланДоставки = ПТЛ_ЖурналУчетаВъездаВыездаАМ.ПланДоставки
	               |			И (ПТЛ_ЖурналУчетаВъездаВыездаАМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ПТЛ_ВидОперацииЖурналУчетаВъездаВыезда.ПривязанКПлануДоставки))
	               |ГДЕ
	               |	ПТЛ_ПланДоставки.ПланДоставки = &ПланДоставки
	               |	И ПТЛ_ПланДоставки.Рейс = &Рейс
	               |	И НЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
				   |    и НЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.УсловиеПоставки = ЗНАЧЕНИЕ(Перечисление.ПТЛ_УсловияПоставки.Самовывоз)
				   |";   
	
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("ПланДоставки", Основание.ПланДоставки);
	Запрос.УстановитьПараметр("Рейс", Основание.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВидОперации1 = Неопределено;

	Если Выборка.Количество() = 1 Тогда
		Если Выборка.Следующий() Тогда
			Если Выборка.ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика 
				//Blik 65458 230817 н
				или  Выборка.ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера
				//Blik 65458 230817 к
				Тогда
				ВидОперации1 = Перечисления.ПТЛ_ВидОперацииЖурналУчетаВъездаВыезда.ПривязанКПлануДоставкиПоставщики;
			Иначе
				ВидОперации1 = Перечисления.ПТЛ_ВидОперацииЖурналУчетаВъездаВыезда.ПривязанКПлануДоставки;
			Конецесли;
		КонецЕсли;
	Иначе
		//тут по идее круговой рейс
		Пока Выборка.Следующий() Цикл
			Если Выборка.ВидОперЖР = Неопределено Тогда
				Если Выборка.ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика 
					//Blik 65458 230817 н
					или  Выборка.ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера
					//Blik 65458 230817 к
					Тогда
					ВидОперации1 = Перечисления.ПТЛ_ВидОперацииЖурналУчетаВъездаВыезда.ПривязанКПлануДоставкиПоставщики;
				Иначе
					ВидОперации1 = Перечисления.ПТЛ_ВидОперацииЖурналУчетаВъездаВыезда.ПривязанКПлануДоставки;
				Конецесли;
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат ВидОперации1; 
	
КонецФункции
//Blik 040117 57270 к

//Blik 060117 57270 н
//проверить изменить статус задания на перевозку для отгрузки от поставщика
Функция	ПроверитьИзменитьСтатусЗаданияНаперевозку()
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.Ссылка КАК ЗаданиеНаПеревозку
	               |ИЗ
	               |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	               |ГДЕ
	               |	ПТЛ_ПланДоставки.ПланДоставки = &ПланДоставки
	               |	И ПТЛ_ПланДоставки.Рейс = &Рейс
	               |	И ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
	               |	И НЕ ПТЛ_ПланДоставки.ЗаданиеНаПеревозку.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.ПТЛ_СтатусыЗаданияНаПеревозку.Выполнено)";   
	
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("ПланДоставки", ПланДоставки);
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		 Докобъект = Выборка.ЗаданиеНаПеревозку.Получитьобъект();
		 Докобъект.СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Выполнено;
		 Докобъект.записать();
	КонецЦикла;
	
КонецФункции
	//Blik 060117 57270 к

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
 