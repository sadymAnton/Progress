
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("Раздел6", "Сведения перс.учета для сотрудников");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#Если ТолстыйКлиентОбычноеПриложение Тогда

//Процедура вывода сведений на печать
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ИмяМакета = "Раздел6" Тогда
		
		ПечатныеФормы = Новый ТаблицаЗначений;
		ПечатныеФормы.Колонки.Добавить("Представление");

		ПачкиДокументов = Новый ТаблицаЗначений;
		ПачкиДокументов.Колонки.Добавить("ДокументПачка", Новый ОписаниеТипов("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1"));
		ПачкиДокументов.Добавить().ДокументПачка = Ссылка;
		
		Документы.ПачкаРазделов6РасчетаРСВ_1.Печать(ПачкиДокументов, ПечатныеФормы, Дата, Истина, Ложь);
		
		ДокументРезультат = Неопределено;
		Если ПечатныеФормы.Количество() > 0 Тогда
			
			Раздел6 = ПечатныеФормы[0].Представление;
			                                                    
			ДокументРезультат = Новый ТабличныйДокумент;
			ЗаполнитьЗначенияСвойств(ДокументРезультат,Раздел6,"ИмяПараметровПечати, ОриентацияСтраницы");
			
			ДокументРезультат.Вывести(ПолучитьМакет("МакетПредупреждения").ПолучитьОбласть("Предупреждение"));
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			
			ОбластьСтроки = Раздел6.Область(1, , Раздел6.ВысотаТаблицы, );
			ДокументРезультат.ВставитьОбласть(ОбластьСтроки, ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы + 1, , ДокументРезультат.ВысотаТаблицы + Раздел6.ВысотаТаблицы, ));
			
		КонецЕсли;
		
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат, КоличествоЭкземпляров, НаПринтер, "Сведения персонифицированного учета; пачка №" + НомерПачки,,ДокументРезультат);
		
	КонецЕсли;
	
КонецФункции // Печать()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица)
	
	СтрокиДоговоров = ЗаписиФизлица.НайтиСтроки(СтруктураПоискаДоговоров);
	Для каждого СтрокаТЗ Из СтрокиДоговоров Цикл
		ЗаполнитьЗначенияСвойств(ВременнаяТаблицаФизлица.Добавить(),СтрокаТЗ);
		ЗаписиФизлица.Удалить(СтрокаТЗ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьНумерациюЗаписейОСтаже(СообщатьОПроблемах) Экспорт
	
	Отказ = Ложь;
	Если СообщатьОПроблемах Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ФизЛицо");
	СтруктураПоискаДоговоров = Новый Структура("ФизЛицо,ТретийПараметрИсчисляемогоСтажа");
	ВременнаяТаблица = ЗаписиОСтаже.ВыгрузитьКолонки();
	ВременнаяТаблицаФизлица = ЗаписиОСтаже.ВыгрузитьКолонки();
	
	ТЗЗаписиОСтаже = ЗаписиОСтаже.Выгрузить();
	ТЗЗаписиОСтаже.Сортировать("ФизЛицо, НомерСтроки");
	
	Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
		
		СтруктураПоиска.ФизЛицо = СтрокаТЧ.ФизЛицо;
		СтруктураПоискаДоговоров.ФизЛицо = СтрокаТЧ.ФизЛицо;
		
		ВременнаяТаблицаФизлица.Очистить();
		
		ЗаписиФизлица = ТЗЗаписиОСтаже.Скопировать(ТЗЗаписиОСтаже.НайтиСтроки(СтруктураПоиска));
		
		СтруктураПоискаДоговоров.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДОГОВОР;
		ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица);
		СтруктураПоискаДоговоров.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.НЕОПЛАВТ;
		ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица);
		СтруктураПоискаДоговоров.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.НЕОПЛДОГ;
		ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица);
		
		ВременнаяТаблицаФизлица.Сортировать("ДатаНачалаПериода");
		ОбщегоНазначенияЗК.ЗагрузитьВТаблицуЗначений(ЗаписиФизлица, ВременнаяТаблицаФизлица);
		
		//Нумерация записей стажа 
		НомерОсновнойЗаписи = 0; 
		НомерСтроки = 0;
		Для Каждого СтрокаСтажа Из ВременнаяТаблицаФизлица цикл
			
			НомерСтроки = НомерСтроки + 1;
			ТекстОшибкиСНомеромСтроки = "В строке стажа " + НомерСтроки + ": ";
			
			//Контролируем смену основной записи
			Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) И ЗначениеЗаполнено(СтрокаСтажа.ДатаОкончанияПериода) тогда
				//Встретили основную запись
				НомерОсновнойЗаписи = НомерОсновнойЗаписи + 1; 
				НомерДополнительнойЗаписи = 0;
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) И Не ЗначениеЗаполнено(СтрокаСтажа.ДатаОкончанияПериода) тогда	
				Если НомерОсновнойЗаписи <> 0 Тогда
					НомерДополнительнойЗаписи = НомерДополнительнойЗаписи + 1; 
				ИначеЕсли СообщатьОПроблемах Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указаны даты начала и окончания периода!", Отказ);
				КонецЕсли;
			ИначеЕсли СообщатьОПроблемах Тогда
				Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указана дата окончания периода!", Отказ);
				Иначе
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указана начала окончания периода!", Отказ);
				КонецЕсли;
			КонецЕсли;	
			
			СтрокаСтажа.НомерОсновнойЗаписи = НомерОсновнойЗаписи;
			СтрокаСтажа.НомерДополнительнойЗаписи = НомерДополнительнойЗаписи;
			
		КонецЦикла;	
		
		ОбщегоНазначенияЗК.ЗагрузитьВТаблицуЗначений(ВременнаяТаблицаФизлица, ВременнаяТаблица);
		
	КонецЦикла;
	
	ВременнаяТаблица.Сортировать("ФизЛицо, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
	ЗаписиОСтаже.Загрузить(ВременнаяТаблица);
	
	Если СообщатьОПроблемах И Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
КонецПроцедуры	 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	Если Проведен И ПринятоВПФР Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	ВыборкаПоШапкеДокумента = Документы.ПачкаРазделов6РасчетаРСВ_1.СформироватьЗапросПоШапкеДокументов(Ссылка).Выбрать();
	
	Документы.ПачкаРазделов6РасчетаРСВ_1.ПроверитьПравильностьЗаполненияДокументов(Ссылка, Отказ, Ложь, ВыборкаПоШапкеДокумента);
	
	Если Отказ тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыПерсонифицированногоУчета.ПроставитьНомерПачки(ЭтотОбъект);
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
	
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
		
		Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
			СтрокаТЧ.НачисленоСтраховая = 0;
		КонецЦикла;
		
		СведенияОЗаработке.Загрузить(СведенияОЗаработке.Выгрузить(СведенияОЗаработке.НайтиСтроки(Новый Структура("Месяц",0)),"ФизЛицо, КатегорияЗастрахованныхЛиц"));
		
		СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Очистить();
		ЗаписиОСтаже.Очистить();
		КорректирующиеСведения.Очистить();
		
	Иначе
		
		Соответствие = Новый Соответствие;
		Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
			Соответствие.Вставить(СтрокаТЧ.ФизЛицо, Истина)
		КонецЦикла;
		
		ВсегоСтрок = СведенияОЗаработке.Количество();
		Для Сч = 1 По ВсегоСтрок Цикл
			СтрокаТЧ = СведенияОЗаработке[ВсегоСтрок - Сч];
			Если Соответствие[СтрокаТЧ.ФизЛицо] = Неопределено Тогда
				СведенияОЗаработке.Удалить(СтрокаТЧ)
			КонецЕсли;
		КонецЦикла; 
		
		ВыводитьВзносыЗаРаботыСДосрочнойПенсией = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуютсяРаботыСДосрочнойПенсией");
		Если Не ВыводитьВзносыЗаРаботыСДосрочнойПенсией Тогда
			СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Очистить();
		Иначе	
			ВсегоСтрок = СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Количество();
			Для Сч = 1 По ВсегоСтрок Цикл
				СтрокаТЧ = СведенияОЗаработкеНаВредныхИТяжелыхРаботах[ВсегоСтрок - Сч];
				Если Соответствие[СтрокаТЧ.ФизЛицо] = Неопределено Тогда
					СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Удалить(СтрокаТЧ)
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		ВсегоСтрок = ЗаписиОСтаже.Количество();
		Для Сч = 1 По ВсегоСтрок Цикл
			СтрокаТЧ = ЗаписиОСтаже[ВсегоСтрок - Сч];
			Если Соответствие[СтрокаТЧ.ФизЛицо] = Неопределено Тогда
				ЗаписиОСтаже.Удалить(СтрокаТЧ)
			КонецЕсли;
		КонецЦикла;
		ВыполнитьНумерациюЗаписейОСтаже(РежимЗаписи = РежимЗаписиДокумента.Проведение);
		
		Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ Тогда
			ВсегоСтрок = КорректирующиеСведения.Количество();
			Для Сч = 1 По ВсегоСтрок Цикл
				СтрокаТЧ = КорректирующиеСведения[ВсегоСтрок - Сч];
				Если Соответствие[СтрокаТЧ.ФизЛицо] = Неопределено Тогда
					КорректирующиеСведения.Удалить(СтрокаТЧ)
				КонецЕсли;
			КонецЦикла; 
		Иначе
			КорректирующиеСведения.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Отказ = ПринятоВПФР;
	
	Если Не Отказ Тогда
		Для Каждого Набор Из Движения Цикл
			Набор.Очистить();
			Набор.Записать();
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

