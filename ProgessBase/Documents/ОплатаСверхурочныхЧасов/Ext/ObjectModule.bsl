//////////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит массив движений, которые документ напрямую не делает 
Перем мПроизводныеДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет перерасчет по заданному списку физлиц
// Если передан пустой список физлиц - перерасчет не проводится
// Если в качестве списка физлиц передан не массив, а Неопределено - перерасчет по всем физлицам 
// регистратора по которым требуется перерасчет
//
// Параметры
//	Физлица		- список значений - ссылки на физлиц
// Возвращаемое значение
//	Нет
//
Процедура Перерассчитать() Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Сотрудник КАК Ссылка
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка = &ДокументСсылка
	|	И СотрудникиОрганизаций.Сотрудник.Физлицо В
	|			(ВЫБРАТЬ
	|				Перерасчет.ФизЛицо
	|			ИЗ
	|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
	|			ГДЕ
	|				Перерасчет.ОбъектПерерасчета = &ДокументСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	////////////////////////////////////////////////////////////////////////
	// Начисления
	НачатьТранзакцию();
	Прочитать();
	Запрос.Выполнить();
	Выборка = СформироватьЗапросДляПерерасчета(Ссылка, ПериодРегистрации, Запрос.МенеджерВременныхТаблиц).Выбрать();
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.НДФЛСведенияОДоходах.Прочитать();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
	ЗафиксироватьТранзакцию();
	
	// если не перерассчитываем никого - возврат
	Если Выборка.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ФизлицаСписок = Новый Массив;	
	Пока Выборка.Следующий() Цикл
		СтрокаНачисления = Начисления.Найти(Выборка.НомерСтроки,"НомерСтроки");
		ФизлицаСписок.Добавить(СтрокаНачисления.Физлицо);
		СтрокаНачисления.ПодразделениеОрганизации = Выборка.НовоеПодразделениеОрганизации;
		СтрокаНачисления.Размер = Выборка.НоваяТарифнаяСтавка;
		СтрокаНачисления.Результат = Выборка.НоваяТарифнаяСтавка * (СтрокаНачисления.ЧасовПолуторных * 1.5 + СтрокаНачисления.ЧасовДвойных * 2);
	КонецЦикла;
	
	// записываем документ перед запросом для обновления регистров
	Записать();
    	// сначала удалим сведения о доходах НДФЛ по перерассчитываемым физлицам
	НДФЛСведенияОДоходах = Движения.НДФЛСведенияОДоходах;
	ПоследнееДвижение = НДФЛСведенияОДоходах.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.Найти(НДФЛСведенияОДоходах[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			НДФЛСведенияОДоходах.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	ОсновныеНачисленияРаботниковОрганизаций = Движения.ОсновныеНачисленияРаботниковОрганизаций;
	ПоследнееДвижение = ОсновныеНачисленияРаботниковОрганизаций.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.Найти(ОсновныеНачисленияРаботниковОрганизаций[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			ОсновныеНачисленияРаботниковОрганизаций.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
	ПоследнееДвижение = ВзаиморасчетыСРаботникамиОрганизаций.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.Найти(ВзаиморасчетыСРаботникамиОрганизаций[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			ВзаиморасчетыСРаботникамиОрганизаций.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	// получим реквизиты табличной части
	РезультатЗапросаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента);
	ВыборкаПоНачислениям = РезультатЗапросаПоНачислениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		// Заполним записи в наборах записей регистров
		ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
		ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
	КонецЦикла;

	СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, Движения.НДФЛСведенияОДоходах, ФизлицаСписок);
	
	// записываем движения по регистрам
	Для Каждого НаборЗаписей Из Движения Цикл
		
		// Производные движения пропускаем
		Если мПроизводныеДвижения.Найти(НаборЗаписей) <> Неопределено Тогда
			Продолжить
		КонецЕсли;
		
		Если ТипЗнч(НаборЗаписей) = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") Тогда
			НаборЗаписей.Записать(Истина, Ложь, Истина, Ложь);
		Иначе
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;

	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

// Заполняет документ для отобранного пользователем списка работников
//
// Параметры:
//	Запрос - запрос, полученный из настроенного пользователем построителя отчета
//							в обработке ФормированиеСпискаРаботников
//	Реквизиты - структура данных для заполнения, соответствующих реквизитам 
//							 т.ч.документа, пришедшая из обработки ФормированиеСпискаРаботников
//
Процедура Автозаполнение(Запрос = Неопределено, Реквизиты = Неопределено) Экспорт
	
	Если Запрос = Неопределено Или Реквизиты = Неопределено Тогда // не передали необходимых для заполнения данных
		Возврат
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// создаем временную таблицу ВТСписокРаботников с сотрудниками, отобранными по критериям пользователя 
	// 
	// Поля:
	//   Сотрудник
	//   Физлицо
	//   ФИО
	//   ПодразделениеОрганизации
	//   ГрафикРаботы
	//
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("РегламентВалюта", 	Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ДатаВалютногоУчета",	ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Год",				Год(Реквизиты.ДатаВыхода));
	Запрос.УстановитьПараметр("ТекущийМесяц",		НачалоМесяца(Реквизиты.ДатаВыхода));
	Запрос.УстановитьПараметр("ДатаВыхода",			Реквизиты.ДатаВыхода);
	Запрос.УстановитьПараметр("ЧасовПолуторных",	Реквизиты.ЧасовПолуторных);
	Запрос.УстановитьПараметр("ЧасовДвойных",		Реквизиты.ЧасовДвойных);
	Запрос.УстановитьПараметр("ВсегоЧасов",			Реквизиты.ЧасовПолуторных * 1.5 + Реквизиты.ЧасовДвойных * 2);
	
	// НормаВремениПоСводнымИндивидуальнымГрафикам
	//		Сотрудники, для которых введены сводные данные об их графике
	// 
	//	Поля:
	//		Сотрудник
	//		ЧасовЗаМесяц - указанное пользователем значение
	// 
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокРаботников.Сотрудник КАК Сотрудник,
	|	СводныеИндивидуальныеГрафики.Часов КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоСводнымИндивидуальнымГрафикам
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И (СводныеИндивидуальныеГрафики.Месяц = &ТекущийМесяц)
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	// НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	//		Таблица сотрудников и нормы времени в часах, введенной индивидуальными графиками
	// 
	//	Поля:
	//		Сотрудник,
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени,	
	//	введенные доками ВводИндивидуальныхГрафиков, т.е. по строкам с выставленным флажком План
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаботников.Сотрудник КАК Сотрудник,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СписокРаботников.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &ТекущийМесяц)
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокРаботников.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	// НормаВремениПоОбщимГрафикам
	//		Таблица сотрудников и нормы времени в часах по общим графикам
	// 
	//	Поля:
	//		Сотрудник,
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени для общих графиков
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаботников.Сотрудник КАК Сотрудник,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоОбщимГрафикам
	|ИЗ
	|	ВТСписокРаботников КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ВЫБОР
	|				КОГДА СписокРаботников.ГрафикРаботы.СокращенноеРабочееВремя
	|						И СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|					ТОГДА СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|				ИНАЧЕ СписокРаботников.ГрафикРаботы
	|			КОНЕЦ = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &ТекущийМесяц)
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокРаботников.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	// ДанныеПроизводственногоКалендаряЗаМесяц
	//		Данные производственного календаря за месяц
	// 
	//	Поля:
	//		ЧислоРабочихДней,
	//		ЧислоПредпраздничныхДней
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра РегламентированныйПроизводственныйКалендарь за месяц, в который сотрудник работал
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоРабочихДней,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоПредпраздничныхДней,
	|		РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь КАК Календарь
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаряЗаМесяц
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) = &ТекущийМесяц 
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.06.2011 15:33 
	|
	|СГРУППИРОВАТЬ ПО
	|	РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь
	| 
	|ИНДЕКСИРОВАТЬ ПО
	|	Календарь";
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисления.Регистратор,
	|	ОсновныеНачисления.НомерСтроки,
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.Период,
	|	ОсновныеНачисления.ПериодЗавершения,
	|	ОсновныеНачисления.ВидРасчета,
	|	ОсновныеНачисления.ВидРасчетаЗавершения,
	|	ОсновныеНачисления.Показатель1,
	|	ОсновныеНачисления.Валюта1,
	|	ОсновныеНачисления.Валюта1Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд1,
	|	ОсновныеНачисления.Показатель2,
	|	ОсновныеНачисления.ТарифныйРазряд2,
	|	ОсновныеНачисления.Показатель3,
	|	ОсновныеНачисления.ТарифныйРазряд3,
	|	ОсновныеНачисления.Показатель4,
	|	ОсновныеНачисления.ТарифныйРазряд4,
	|	ОсновныеНачисления.Показатель5,
	|	ОсновныеНачисления.ТарифныйРазряд5,
	|	ОсновныеНачисления.Показатель6,
	|	ОсновныеНачисления.ТарифныйРазряд6,
	|	ОсновныеНачисления.Показатель1Завершения,
	|	ОсновныеНачисления.Показатель2Завершения,
	|	ОсновныеНачисления.Показатель3Завершения,
	|	ОсновныеНачисления.Показатель4Завершения,
	|	ОсновныеНачисления.Показатель5Завершения,
	|	ОсновныеНачисления.Показатель6Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд1Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд2Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд3Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд4Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд5Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд6Завершения
	|ПОМЕСТИТЬ ВТСтрокиОписанияНачислений
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|			&ДатаВыхода,
	|			ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						СписокРаботников.Сотрудник
	|					ИЗ
	|						ВТСписокРаботников КАК СписокРаботников)) КАК ОсновныеНачисления
	|";
	Запрос.Выполнить();
	
	ПроцедурыУправленияПерсоналом.ИзвлечьТарифнуюСтавкуИзПараметровНачисления(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаботникиИНачисления.Сотрудник,
	|	РаботникиИНачисления.Физлицо КАК Физлицо,
	|	РаботникиИНачисления.ПодразделениеОрганизации,
	|	&ДатаВыхода КАК ДатаВыхода,
	|	&ЧасовПолуторных КАК ЧасовПолуторных,
	|	&ЧасовДвойных КАК ЧасовДвойных,
	|	ВЫБОР
	|		КОГДА РаботникиИНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
	|			ТОГДА РаботникиИНачисления.ОкладТариф
	|		КОГДА РаботникиИНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням))
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) = 0
	|										ТОГДА 0
	|									КОГДА РаботникиИНачисления.ДлительностьРабочейНедели = 0
	|										ТОГДА 0
	|									ИНАЧЕ РаботникиИНачисления.ОкладТариф / (РаботникиИНачисления.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) * 12
	|								КОНЕЦ
	|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоМесячнойНормеПоПроизводственномуКалендарю)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) = 0
	|										ТОГДА 0
	|									КОГДА РаботникиИНачисления.ДлительностьРабочейНедели = 0
	|										ТОГДА 0
	|									ИНАЧЕ РаботникиИНачисления.ОкладТариф / (РаботникиИНачисления.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0))
	|								КОНЕЦ
	|						КОГДА ВЫБОР
	|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
	|							КОНЕЦ = 0
	|							ТОГДА 0
	|						ИНАЧЕ РаботникиИНачисления.ОкладТариф / ВЫБОР
	|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		КОГДА РаботникиИНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиИНачисления.ДлительностьРабочейНедели = 0
	|						ТОГДА 0
	|					ИНАЧЕ РаботникиИНачисления.ОкладТариф / РаботникиИНачисления.ДлительностьРабочейНедели * ВЫБОР
	|							КОГДА РаботникиИНачисления.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
	|								ТОГДА 6
	|							ИНАЧЕ 5
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Размер,
	|	&ВсегоЧасов * ВЫБОР
	|		КОГДА РаботникиИНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
	|			ТОГДА РаботникиИНачисления.ОкладТариф
	|		КОГДА РаботникиИНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням))
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) = 0
	|										ТОГДА 0
	|									КОГДА РаботникиИНачисления.ДлительностьРабочейНедели = 0
	|										ТОГДА 0
	|									ИНАЧЕ РаботникиИНачисления.ОкладТариф / (РаботникиИНачисления.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) * 12
	|								КОНЕЦ
	|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоМесячнойНормеПоПроизводственномуКалендарю)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) = 0
	|										ТОГДА 0
	|									КОГДА РаботникиИНачисления.ДлительностьРабочейНедели = 0
	|										ТОГДА 0
	|									ИНАЧЕ РаботникиИНачисления.ОкладТариф / (РаботникиИНачисления.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0))
	|								КОНЕЦ
	|						КОГДА ВЫБОР
	|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
	|							КОНЕЦ = 0
	|							ТОГДА 0
	|						ИНАЧЕ РаботникиИНачисления.ОкладТариф / ВЫБОР
	|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		КОГДА РаботникиИНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиИНачисления.ДлительностьРабочейНедели = 0
	|						ТОГДА 0
	|					ИНАЧЕ РаботникиИНачисления.ОкладТариф / РаботникиИНачисления.ДлительностьРабочейНедели * ВЫБОР
	|							КОГДА РаботникиИНачисления.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
	|								ТОГДА 6
	|							ИНАЧЕ 5
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Результат
	|ИЗ
	|	(ВЫБРАТЬ
	|		СписокРаботников.Сотрудник КАК Сотрудник,
	|		СписокРаботников.Физлицо КАК Физлицо,
	|		СписокРаботников.Подразделение КАК ПодразделениеОрганизации,
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.06.2011 15:41   //Blik 200116 48081
	|		СписокРаботников.ГрафикРаботы.AVT_ПроизводственныйКалендарь КАК Календарь,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
	|		ВЫБОР
	|			КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаВыхода
	|					И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВЫБОР
	|						КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавокСрезПоследних.Размер
	|						ИНАЧЕ ТарифныеСтавки.ТарифнаяСтавкаЗавершения
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.ТребуетВводаТарифногоРазряда
	|						ТОГДА РазмерТарифныхСтавокСрезПоследних.Размер
	|					ИНАЧЕ ТарифныеСтавки.ТарифнаяСтавка
	|				КОНЕЦ
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаВыхода
	|							И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ВЫБОР
	|								КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|									ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
	|								ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Валюта1Завершения
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
	|							ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Валюта1
	|						КОНЕЦ
	|				КОНЕЦ В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|		КОНЕЦ КАК ОкладТариф,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА СписокРаботников.ГрафикРаботы.СокращенноеРабочееВремя
	|						И СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|					ТОГДА СписокРаботников.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|				ИНАЧЕ СписокРаботников.ГрафикРаботы.ДлительностьРабочейНедели
	|			КОНЕЦ, 0) КАК ДлительностьРабочейНедели,
	|		СписокРаботников.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
	|		ВЫБОР
	|			КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаВыхода
	|					И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ТарифныеСтавки.РазмерностьТарифнойСтавкиЗавершения
	|			ИНАЧЕ ТарифныеСтавки.РазмерностьТарифнойСтавки
	|		КОНЕЦ КАК СпособРасчета
	|	ИЗ
	|		ВТСписокРаботников КАК СписокРаботников
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиОписанияНачислений КАК ПлановыеНачисленияРаботниковОрганизацийСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифныеСтавкиНачислений КАК ТарифныеСтавки
	|				ПО ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Регистратор = ТарифныеСтавки.Регистратор
	|					И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.НомерСтроки = ТарифныеСтавки.НомерСтроки
	|			ПО СписокРаботников.Сотрудник = ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Сотрудник
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ДатаВыхода, ) КАК РазмерТарифныхСтавокСрезПоследних
	|			ПО (ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаВыхода
	|							И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ТарифныеСтавки.ТарифныйРазрядЗавершения
	|					ИНАЧЕ ТарифныеСтавки.ТарифныйРазряд
	|				КОНЕЦ = РазмерТарифныхСтавокСрезПоследних.ТарифныйРазряд)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|			ПО (Валюты.Период = &ДатаВалютногоУчета)
	|				И (Валюты.Валюта = ВЫБОР
	|					КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &ДатаВыхода
	|							И ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ВЫБОР
	|								КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|									ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
	|								ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Валюта1Завершения
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавокСрезПоследних.Валюта
	|							ИНАЧЕ ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Валюта1
	|						КОНЕЦ
	|				КОНЕЦ)) КАК РаботникиИНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоСводнымИндивидуальнымГрафикам КАК НормаВремениПоСводнымИндивидуальнымГрафикам
	|		ПО РаботникиИНачисления.Сотрудник = НормаВремениПоСводнымИндивидуальнымГрафикам.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам КАК НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|		ПО РаботникиИНачисления.Сотрудник = НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоОбщимГрафикам КАК НормаВремениПоОбщимГрафикам
	|		ПО РаботникиИНачисления.Сотрудник = НормаВремениПоОбщимГрафикам.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.06.2011 15:37 
	|			РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь КАК Календарь,
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
	|			СУММА(ВЫБОР
	|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЧислоРабочихДней,
	|			СУММА(ВЫБОР
	|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|		ИЗ
	|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ГДЕ
	|			РегламентированныйПроизводственныйКалендарь.Год = &Год
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.06.2011 15:38 
	|
	|		СГРУППИРОВАТЬ ПО
	|           РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
	|) КАК ДанныеПроизводственногоКалендаря
		// ЗАКОММЕНТИРОВАНО: Измайлова Полина 27.06.2011 15:43  
	//|		ПО (ИСТИНА)
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.06.2011 15:43 
	|		ПО РаботникиИНачисления.Календарь = ДанныеПроизводственногоКалендаря.Календарь
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряЗаМесяц КАК ДанныеПроизводственногоКалендаряЗаМесяц
// ЗАКОММЕНТИРОВАНО: Измайлова Полина 27.06.2011 15:45  
	//|		ПО (ИСТИНА)
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.06.2011 15:45 
	|		ПО РаботникиИНачисления.Календарь = ДанныеПроизводственногоКалендаряЗаМесяц.Календарь
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
	|		ПО (ИСТИНА)";
	
	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // Автозаполнение()

// Заполняет документ по перерассчитываемому документу
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт

	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных

	ПериодПерерассчитываемогоДокумента = ИсходныйДокумент.ПериодРегистрации;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
		Запрос.УстановитьПараметр("Исправления", ПроведениеРасчетов.ПолучитьДокументИсправление(ПерерассчитываемыйДокумент, "КритерийОтбора"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОплатаСверхурочныхЧасовНачисления.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиИсправлений
		|ИЗ
		|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК ОплатаСверхурочныхЧасовНачисления
		|ГДЕ
		|	ОплатаСверхурочныхЧасовНачисления.Ссылка В(&Исправления)
		|	И ОплатаСверхурочныхЧасовНачисления.Сторно
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизаций.Сотрудник КАК Ссылка
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
		|	И СотрудникиОрганизаций.Сотрудник.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент)
		|	И НЕ СотрудникиОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Начисления.Сотрудник
		|				ИЗ
		|					ВТСотрудникиИсправлений КАК Начисления)";
	ИначеЕсли ЗначениеЗаполнено(Сотрудники) Тогда // этих сотрудников попросил исправить пользователь
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)";	
	Иначе 
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник КАК Ссылка
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &ПерерассчитываемыйДокумент";
	КонецЕсли;
	Запрос.Выполнить();
	
	Выборка = СформироватьЗапросДляПерерасчета(ПерерассчитываемыйДокумент, ПериодПерерассчитываемогоДокумента, Запрос.МенеджерВременныхТаблиц).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// сторно-строка
		НоваяСтрока = Начисления.Добавить();
		НоваяСтрока.Сотрудник					= Выборка.Сотрудник;
		НоваяСтрока.Физлицо						= Выборка.Физлицо;
		НоваяСтрока.ПодразделениеОрганизации	= Выборка.ПодразделениеОрганизации;
		НоваяСтрока.ДатаВыхода					= Выборка.ДатаВыхода;
		НоваяСтрока.Размер						= Выборка.Размер;
		НоваяСтрока.ЧасовПолуторных				= - Выборка.ЧасовПолуторных;
		НоваяСтрока.ЧасовДвойных				= - Выборка.ЧасовДвойных;
		НоваяСтрока.Результат					= - Выборка.Результат;
		НоваяСтрока.Сторно						= Истина;
		
		// новая рассчитываемая строка
		НоваяСтрока = Начисления.Добавить();
		НоваяСтрока.Сотрудник					= Выборка.Сотрудник;
		НоваяСтрока.Физлицо						= Выборка.Физлицо;
		НоваяСтрока.ПодразделениеОрганизации	= Выборка.НовоеПодразделениеОрганизации;
		НоваяСтрока.ДатаВыхода					= Выборка.ДатаВыхода;
		НоваяСтрока.Размер						= Выборка.НоваяТарифнаяСтавка;
		НоваяСтрока.ЧасовПолуторных				= Выборка.ЧасовПолуторных;
		НоваяСтрока.ЧасовДвойных				= Выборка.ЧасовДвойных;
		НоваяСтрока.Результат					= (Выборка.ЧасовПолуторных * 1.5 + Выборка.ЧасовДвойных * 2) * Выборка.НоваяТарифнаяСтавка;		
	КонецЦикла;
	
КонецПроцедуры  // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует запрос для заполнения ТЧ документа по данным перерасчетов
//
// МенеджерВременныхТаблиц должен содержать временную таблицу ВТСотрудники для отбора сотрудников
Функция СформироватьЗапросДляПерерасчета(ДокументСсылка, ПериодРегистрацииДокумента, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДокументСсылка",			ДокументСсылка);
	Запрос.УстановитьПараметр("РегламентВалюта",		Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ДатаВалютногоУчета",		ПериодРегистрацииДокумента);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.НомерСтроки,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Сотрудник.Физлицо КАК Физлицо,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.ДатаВыхода,
	|	НАЧАЛОПЕРИОДА(Начисления.ДатаВыхода, МЕСЯЦ) КАК ТекущийМесяц,
	|	Начисления.Размер,
	|	Начисления.ЧасовПолуторных,
	|	Начисления.ЧасовДвойных,
	|	Начисления.Результат
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ДокументСсылка
	|	И (НЕ Начисления.Сторно)
	|	И Начисления.Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Ссылка
	|				ИЗ
	|					ВТСотрудники КАК Сотрудники)
	|	И Начисления.Ссылка.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	Запрос.Выполнить();
	
	// НормаВремениПоСводнымИндивидуальнымГрафикам
	//		Таблица строк документа и нормы времени в часах, введенной сводными индивидуальными графиками
	// 
	//	Поля:
	//		НомерСтроки,
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра СводныеИндивидуальныеГрафики, соответствующие дате из строки документа	
		
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки,
	|	СводныеИндивидуальныеГрафики.Часов КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоСводнымИндивидуальнымГрафикам
	|ИЗ
	|	ВТНачисления КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И СписокРаботников.ТекущийМесяц = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	//		Таблица строк документа и нормы времени в часах, введенной индивидуальными графиками
	// 
	//	Поля:
	//		НомерСтроки,
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени,	
	//	введенные доками ВводИндивидуальныхГрафиков, т.е. по строкам с выставленным флажком План
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|ИЗ
	|	ВТНачисления КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СписокРаботников.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И СписокРаботников.ТекущийМесяц = ГрафикиРаботыПоВидамВремени.Месяц
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокРаботников.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// РаботникиИНачисления
	//		Таблица строк документа с добавленными сведениями о работниках и их начислениях
	// 
	//	Поля:
	//		НомерСтроки,
	//		Сотрудник 
	//		ДатаВыхода 
	//		ОкладТариф - размер основного начисления по состоянию на дату ДатаВыхода 
	//		СпособРасчета - способ расчета основного начисления по состоянию на дату ДатаВыхода 
	//		НовоеПодразделениеОрганизации - подразделение сотрудника по состоянию на дату ДатаВыхода 
	//		ГрафикРаботы - график сотрудника по состоянию на дату ДатаВыхода 
	//		ВидГрафика,
	//		ДлительностьРабочейНедели - реквизиты графика сотрудника по состоянию на дату ДатаВыхода 
	// 
	// Описание:
	//
	//	1. к каждой строке документа приписываем данные из "псевдосрезов" последних по регистрам	
	//	ПлановыеНачисленияРаботниковОрганизаций и РаботникиОрганизаций
	//  2. для определения размер основного начисления по состоянию на дату ДатаВыхода дополнительно
	//  пользуемся "псевдосрезом" последних по регистру РазмерТарифныхСтавок и курсами валют
	//
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДатыПоследнихПлановыхНачислений.НомерСтроки КАК НомерСтрокиДокумента,
	|	ОсновноеНачисление.Регистратор,
	|	ОсновноеНачисление.НомерСтроки,
	|	ОсновноеНачисление.ПериодЗавершения,
	|	ОсновноеНачисление.ВидРасчета,
	|	ОсновноеНачисление.ВидРасчетаЗавершения,
	|	ОсновноеНачисление.Показатель1,
	|	ОсновноеНачисление.Валюта1,
	|	ОсновноеНачисление.ТарифныйРазряд1,
	|	ОсновноеНачисление.Показатель2,
	|	ОсновноеНачисление.ТарифныйРазряд2,
	|	ОсновноеНачисление.Показатель3,
	|	ОсновноеНачисление.ТарифныйРазряд3,
	|	ОсновноеНачисление.Показатель4,
	|	ОсновноеНачисление.ТарифныйРазряд4,
	|	ОсновноеНачисление.Показатель5,
	|	ОсновноеНачисление.ТарифныйРазряд5,
	|	ОсновноеНачисление.Показатель6,
	|	ОсновноеНачисление.ТарифныйРазряд6,
	|	ОсновноеНачисление.Показатель1Завершения,
	|	ОсновноеНачисление.Показатель2Завершения,
	|	ОсновноеНачисление.Показатель3Завершения,
	|	ОсновноеНачисление.Показатель4Завершения,
	|	ОсновноеНачисление.Показатель5Завершения,
	|	ОсновноеНачисление.Показатель6Завершения,
	|	ОсновноеНачисление.Валюта1Завершения,
	|	ОсновноеНачисление.Валюта2Завершения,
	|	ОсновноеНачисление.Валюта3Завершения,
	|	ОсновноеНачисление.Валюта4Завершения,
	|	ОсновноеНачисление.Валюта5Завершения,
	|	ОсновноеНачисление.Валюта6Завершения,
	|	ОсновноеНачисление.ТарифныйРазряд1Завершения,
	|	ОсновноеНачисление.ТарифныйРазряд2Завершения,
	|	ОсновноеНачисление.ТарифныйРазряд3Завершения,
	|	ОсновноеНачисление.ТарифныйРазряд4Завершения,
	|	ОсновноеНачисление.ТарифныйРазряд5Завершения,
	|	ОсновноеНачисление.ТарифныйРазряд6Завершения
	|ПОМЕСТИТЬ ВТСтрокиОписанияНачислений
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.НомерСтроки КАК НомерСтроки,
	|		Начисления.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(ПлановыеНачисления.Период) КАК Период
	|	ИЗ
	|		ВТНачисления КАК Начисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	|			ПО Начисления.Сотрудник = ПлановыеНачисления.Сотрудник
	|				И Начисления.ДатаВыхода >= ПлановыеНачисления.Период
	|				И (ПлановыеНачисления.ВидРасчетаИзмерение.Ссылка ЕСТЬ NULL )
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Начисления.НомерСтроки,
	|		Начисления.Сотрудник) КАК ДатыПоследнихПлановыхНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ОсновноеНачисление
	|		ПО ДатыПоследнихПлановыхНачислений.Сотрудник = ОсновноеНачисление.Сотрудник
	|			И ДатыПоследнихПлановыхНачислений.Период = ОсновноеНачисление.Период
	|			И (ОсновноеНачисление.ВидРасчетаИзмерение.Ссылка ЕСТЬ NULL )
	|";
	Запрос.Выполнить();
	
	ПроцедурыУправленияПерсоналом.ИзвлечьТарифнуюСтавкуИзПараметровНачисления(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.ДатаВыхода,
	|	Начисления.ТекущийМесяц,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= Начисления.ДатаВыхода
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА РазмерТарифныхСтавок.Размер
	|					ИНАЧЕ ТарифныеСтавки.ТарифнаяСтавкаЗавершения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА РазмерТарифныхСтавок.Размер
	|				ИНАЧЕ ТарифныеСтавки.ТарифнаяСтавка
	|			КОНЕЦ
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= Начисления.ДатаВыхода
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавок.Валюта
	|						ИНАЧЕ ОсновноеНачисление.Валюта1
	|					КОНЕЦ
	|			КОНЕЦ В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|	КОНЕЦ КАК ОкладТариф,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= Начисления.ДатаВыхода
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ТарифныеСтавки.РазмерностьТарифнойСтавкиЗавершения
	|		ИНАЧЕ ТарифныеСтавки.РазмерностьТарифнойСтавки
	|	КОНЕЦ КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= Начисления.ДатаВыхода
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ КАК НовоеПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= Начисления.ДатаВыхода
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
	|							И РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|					ИНАЧЕ РаботникиОрганизации.ГрафикРаботыЗавершения
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизации.ГрафикРаботы.СокращенноеРабочееВремя
	|				И РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= Начисления.ДатаВыхода
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
	|							И РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|					ИНАЧЕ РаботникиОрганизации.ГрафикРаботыЗавершения.ДлительностьРабочейНедели
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизации.ГрафикРаботы.СокращенноеРабочееВремя
	|				И РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ДлительностьРабочейНедели
	|	КОНЕЦ КАК ДлительностьРабочейНедели,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= Начисления.ДатаВыхода
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ВидГрафика
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ВидГрафика
	|	КОНЕЦ КАК ВидГрафика
	|ПОМЕСТИТЬ ВТРаботникиИНачисления
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Начисления.НомерСтроки КАК НомерСтроки,
	|			Начисления.Сотрудник КАК Сотрудник,
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|		ИЗ
	|			ВТНачисления КАК Начисления
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО Начисления.ДатаВыхода >= РаботникиОрганизации.Период
	|					И Начисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Начисления.НомерСтроки,
	|			Начисления.Сотрудник) КАК ДатыПоследнихНазначений
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО ДатыПоследнихНазначений.Период = РаботникиОрганизации.Период
	|				И ДатыПоследнихНазначений.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ПО Начисления.НомерСтроки = ДатыПоследнихНазначений.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиОписанияНачислений КАК ОсновноеНачисление
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифныеСтавкиНачислений КАК ТарифныеСтавки
	|			ПО ОсновноеНачисление.Регистратор = ТарифныеСтавки.Регистратор
	|				И ОсновноеНачисление.НомерСтроки = ТарифныеСтавки.НомерСтроки
	|		ПО Начисления.НомерСтроки = ОсновноеНачисление.НомерСтрокиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Начисления.НомерСтроки КАК НомерСтроки,
	|			РазмерТарифныхСтавок.ТарифныйРазряд КАК ТарифныйРазряд,
	|			МАКСИМУМ(РазмерТарифныхСтавок.Период) КАК ПериодРазряда
	|		ИЗ
	|			ВТНачисления КАК Начисления
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	|				ПО Начисления.ДатаВыхода >= РазмерТарифныхСтавок.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РазмерТарифныхСтавок.ТарифныйРазряд,
	|			Начисления.НомерСтроки) КАК ДатыТарифныхРазрядов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
	|			ПО ДатыТарифныхРазрядов.ПериодРазряда = РазмерТарифныхСтавок.Период
	|				И ДатыТарифныхРазрядов.ТарифныйРазряд = РазмерТарифныхСтавок.ТарифныйРазряд
	|		ПО Начисления.НомерСтроки = ДатыТарифныхРазрядов.НомерСтроки
	|			И (ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= Начисления.ДатаВыхода
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|								ТОГДА ТарифныеСтавки.ТарифныйРазрядЗавершения
	|							ИНАЧЕ NULL
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|							ТОГДА ТарифныеСтавки.ТарифныйРазряд
	|						ИНАЧЕ NULL
	|					КОНЕЦ
	|			КОНЕЦ = ДатыТарифныхРазрядов.ТарифныйРазряд)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|		ПО (Валюты.Валюта = ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= Начисления.ДатаВыхода
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавок.Валюта
	|						ИНАЧЕ ОсновноеНачисление.Валюта1
	|					КОНЕЦ
	|			КОНЕЦ)
	|			И (Валюты.Период = &ДатаВалютногоУчета)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// НормаВремениПоОбщимГрафикам
	//		Таблица строк документа и нормы времени в часах по общим графикам
	// 
	//	Поля:
	//		Сотрудник,
	//		ЧасовЗаМесяц - суммируем все часы рабочего времени
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра ГрафикиРаботыПоВидамВремени для общих графиков
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоОбщимГрафикам
	|ИЗ
	|	ВТРаботникиИНачисления КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СписокРаботников.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И СписокРаботников.ТекущийМесяц = ГрафикиРаботыПоВидамВремени.Месяц
	|			И (ГрафикиРаботыПоВидамВремени.План)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокРаботников.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// ДанныеПроизводственногоКалендаряЗаМесяц
	//		Данные производственного календаря за месяц
	// 
	//	Поля:
	//		ЧислоРабочихДней,
	//		ЧислоПредпраздничныхДней
	// 
	// Описание:
	//
	//	выбираем данные из рег-ра РегламентированныйПроизводственныйКалендарь за месяц, в который сотрудник работал
	
	Запрос.Текст =
	"ВЫБРАТЬ
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.06.2011 13:44 
	|	РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь КАК Календарь,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК МесяцКалендаря,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоРабочихДней,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаряЗаМесяц
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ГОД(ОплатаПраздничных.ДатаВыхода) КАК ГодВыхода
	|	ИЗ
	|		ВТНачисления КАК ОплатаПраздничных) КАК ГодаОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ПО (ГодаОплаты.ГодВыхода = ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря))
	|
	|СГРУППИРОВАТЬ ПО
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.06.2011 13:47 
	|	РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря)";
	Запрос.Выполнить();
	
	// основной запрос - по собранным данным рассчитываем часовую тарифную ставку в зависимости 
	// от порядка расчета основного начисления и от используемого пользователями алгоритма пересчета оклада: 
	// либо по общероссийскому производственному календарю (с использованием 
	// среднемесячного количества часов и длительности рабочей недели графика), либо по графику работника
	// данные по рабочим и предпраздничным дням выбираются из РегистрСведений.РегламентированныйПроизводственныйКалендарь	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.НомерСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ДатаВыхода,
	|	Начисления.Размер,
	|	Начисления.Результат,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.ЧасовПолуторных,
	|	Начисления.ЧасовДвойных,
	|	РаботникиИНачисления.НовоеПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиИНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
	|			ТОГДА РаботникиИНачисления.ОкладТариф
	|		КОГДА РаботникиИНачисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням))
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) = 0
	|										ТОГДА 0
	|									КОГДА РаботникиИНачисления.ДлительностьРабочейНедели = 0
	|										ТОГДА 0
	|									ИНАЧЕ РаботникиИНачисления.ОкладТариф / (РаботникиИНачисления.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) * 12
	|								КОНЕЦ
	|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоМесячнойНормеПоПроизводственномуКалендарю)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) = 0
	|										ТОГДА 0
	|									КОГДА РаботникиИНачисления.ДлительностьРабочейНедели = 0
	|										ТОГДА 0
	|									ИНАЧЕ РаботникиИНачисления.ОкладТариф / (РаботникиИНачисления.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0))
	|								КОНЕЦ
	|						КОГДА ВЫБОР
	|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.НомерСтроки ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.НомерСтроки ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
	|							КОНЕЦ = 0
	|							ТОГДА 0
	|						ИНАЧЕ РаботникиИНачисления.ОкладТариф / ВЫБОР
	|								КОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.НомерСтроки ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоСводнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.НомерСтроки ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(НормаВремениПоОбщимГрафикам.ЧасовЗаМесяц, 0)
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		КОГДА РаботникиИНачисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА РаботникиИНачисления.ДлительностьРабочейНедели = 0
	|							ТОГДА 0
	|						ИНАЧЕ РаботникиИНачисления.ОкладТариф / РаботникиИНачисления.ДлительностьРабочейНедели * ВЫБОР
	|								КОГДА РаботникиИНачисления.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НоваяТарифнаяСтавка
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботникиИНачисления КАК РаботникиИНачисления
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.06.2011 14:51 
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь КАК Календарь,
	|				ГодаОплаты.ГодВыхода КАК ГодВыхода,
	|				СУММА(ВЫБОР
	|						КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ) КАК ЧислоРабочихДней,
	|				СУММА(ВЫБОР
	|						КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|			ИЗ
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ГОД(ОплатаПраздничных.ДатаВыхода) КАК ГодВыхода
	|				ИЗ
	|					ВТНачисления КАК ОплатаПраздничных) КАК ГодаОплаты
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|					ПО (ГодаОплаты.ГодВыхода = ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря))
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь,
	|				ГодаОплаты.ГодВыхода) КАК ДанныеПроизводственногоКалендаря
	|			ПО (ГОД(РаботникиИНачисления.ДатаВыхода) = ДанныеПроизводственногоКалендаря.ГодВыхода)
	|				И РаботникиИНачисления.ГрафикРаботы.AVT_ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.Календарь
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряЗаМесяц КАК ДанныеПроизводственногоКалендаряЗаМесяц
	|			ПО (МЕСЯЦ(РаботникиИНачисления.ДатаВыхода) = ДанныеПроизводственногоКалендаряЗаМесяц.МесяцКалендаря)
	|				И РаботникиИНачисления.ГрафикРаботы.AVT_ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаряЗаМесяц.Календарь
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}

	|		ПО Начисления.НомерСтроки = РаботникиИНачисления.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоСводнымИндивидуальнымГрафикам КАК НормаВремениПоСводнымИндивидуальнымГрафикам
	|		ПО Начисления.НомерСтроки = НормаВремениПоСводнымИндивидуальнымГрафикам.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам КАК НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|		ПО Начисления.НомерСтроки = НормаВремениПоЕжедневнымИндивидуальнымГрафикам.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоОбщимГрафикам КАК НормаВремениПоОбщимГрафикам
	|		ПО Начисления.НомерСтроки = НормаВремениПоОбщимГрафикам.НомерСтроки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			ГодаОплаты.ГодВыхода КАК ГодВыхода,
	//|			СУММА(ВЫБОР
	//|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	//|						ТОГДА 1
	//|					ИНАЧЕ 0
	//|				КОНЕЦ) КАК ЧислоРабочихДней,
	//|			СУММА(ВЫБОР
	//|					КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	//|						ТОГДА 1
	//|					ИНАЧЕ 0
	//|				КОНЕЦ) КАК ЧислоПредпраздничныхДней
	//|		ИЗ
	//|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|				ГОД(ОплатаПраздничных.ДатаВыхода) КАК ГодВыхода
	//|			ИЗ
	//|				ВТНачисления КАК ОплатаПраздничных) КАК ГодаОплаты
	//|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	//|				ПО (ГодаОплаты.ГодВыхода = ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря))
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			ГодаОплаты.ГодВыхода) КАК ДанныеПроизводственногоКалендаря
	//|		ПО (ГОД(Начисления.ДатаВыхода) = ДанныеПроизводственногоКалендаря.ГодВыхода)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряЗаМесяц КАК ДанныеПроизводственногоКалендаряЗаМесяц
	//|		ПО (МЕСЯЦ(Начисления.ДатаВыхода) = ДанныеПроизводственногоКалендаряЗаМесяц.МесяцКалендаря)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
	|		ПО (ИСТИНА)";
	
	Возврат Запрос.Выполнить();
	
КонецФункции  // СформироватьЗапросДляПерерасчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаСверхурочныхЧасов.Дата,
	|	ОплатаСверхурочныхЧасов.Организация,
	|	ВЫБОР
	|		КОГДА ОплатаСверхурочныхЧасов.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА ОплатаСверхурочныхЧасов.Организация
	|		ИНАЧЕ ОплатаСверхурочныхЧасов.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ОплатаСверхурочныхЧасов.Организация КАК ОбособленноеПодразделение,
	|	ОплатаСверхурочныхЧасов.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	ОплатаСверхурочныхЧасов.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	ОплатаСверхурочныхЧасов.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ОплатаСверхурочныхЧасов.ПериодРегистрации,
	|	ОплатаСверхурочныхЧасов.Ответственный,
	|	ОплатаСверхурочныхЧасов.Ссылка
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов КАК ОплатаСверхурочныхЧасов
	|ГДЕ
	|	ОплатаСверхурочныхЧасов.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//	Режим		- режим проведения.
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	СписокСтруктурныхПодразделений = ОбщегоНазначенияЗК.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",						'00010101');
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ВидРасчета",						ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных);
	
	// Описание текста запроса:
	// 1. Выборка "ТЧНачисления":
	//		Выбираются строки документа.
	// 2. Выборка "ПересекающиесяСтроки":
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Сотрудник.Наименование,
	|	ТЧНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧНачисления.ДатаВыхода КАК ДатаВыхода,
	|	ТЧНачисления.Сторно КАК Сторно,
	|	ТЧНачисления.ЧасовПолуторных + ТЧНачисления.ЧасовДвойных КАК ОтработаноЧасов,
	|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета,
	|	ОсновныеНачисленияОрганизаций.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.Размер,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА (НЕ ТЧНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ДатыПоследнихДвиженийРаботников.Период КАК ДатаПоследнегоДвиженияПоРаботнику,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL
	|			ТОГДА 
	|				ВЫБОР
	|					КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧНачисления.ДатаВыхода
	|						И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> &ПустаяДата
	|				ТОГДА ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения
	|				ИНАЧЕ ДанныеПоРаботникуДоНазначения.ГрафикРаботы
	|			КОНЕЦ	
	|		ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧНачисления.ДатаВыхода
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> &ПустаяДата
	|		ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок,
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	|	ТЧНачисления.ЧасовПолуторных КАК Авт_ЧасовПолуторных,
	|	ТЧНачисления.ЧасовДвойных КАК Авт_ЧасовДвойных,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер
	|ИЗ
	|	Документ.ОплатаСверхурочныхЧасов.Начисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
	|		ИЗ
	|			Документ.ОплатаСверхурочныхЧасов.Начисления КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО РаботникиОрганизации.Период <= ТЧНачисления.ДатаВыхода
	|					И ТЧНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧНачисления.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период
	|			И ТЧНачисления.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧНачисления2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ОплатаСверхурочныхЧасов.Начисления КАК ТЧНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОплатаСверхурочныхЧасов.Начисления КАК ТЧНачисления2
	|				ПО (ТЧНачисления2.Ссылка = &ДокументСсылка)
	|					И ТЧНачисления.НомерСтроки > ТЧНачисления2.НомерСтроки
	|					И ТЧНачисления.ДатаВыхода = ТЧНачисления2.ДатаВыхода
	|					И ТЧНачисления.Сотрудник = ТЧНачисления2.Сотрудник
	|		ГДЕ
	|			ТЧНачисления.Ссылка = &ДокументСсылка
	|			И (НЕ ТЧНачисления.Сторно)
	|			И (НЕ ТЧНачисления2.Сторно)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧНачисления.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧНачисления.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|		ПО (ОсновныеНачисленияОрганизаций.Ссылка = &ВидРасчета)
	|		
	|       ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки Как НомерСтроки
	|       ИЗ
	|			Документ.ОплатаСверхурочныхЧасов.Начисления КАК СтрокиНачисления
	|       	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|       	ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СтрокиНачисления.Сотрудник
	|				И ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаВыхода, МЕСЯЦ)
	|       ГДЕ
	|       	СтрокиНачисления.Ссылка = &ДокументСсылка) КАК ГрафикРаботыПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		
	|		
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан период регистрации (месяц)!", Отказ, Заголовок);
	КонецЕсли;

	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!"), Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса по товарам документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("не указано подразделение организации!"), Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указано подразделение, принадлежащее другой организации!"), Отказ, Заголовок);
		
	КонецЕсли;
	
	// ДатаВыхода
	НетДатаВыхода = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаВыхода);
	Если НетДатаВыхода Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетСотрудника ИЛИ НетДатаВыхода Тогда
		Возврат; // Дальше не проверяем
	КонецЕсли;
	
	// График работы
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВыхода, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаВыхода, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		
	КонецЕсли;
	
	// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "указана повторяющаяся строка (см. строку  № " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента)
	
	Движение = Движения.ОсновныеНачисленияРаботниковОрганизаций.Добавить();
	
	// Свойства

	Движение.ПериодРегистрации			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	Движение.ПериодДействияНачало		= ВыборкаПоСтрокамДокумента.ДатаВыхода;
	Движение.ПериодДействияКонец		= КонецДня(ВыборкаПоСтрокамДокумента.ДатаВыхода);
	Движение.ВидРасчета					= ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно						= ВыборкаПоСтрокамДокумента.Сторно;
	
	// Измерения
	Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ФизЛицо					= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	
	// ресурсы по отработанному времени (только часы)
	Движение.ОтработаноЧасов			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	
	Движение.ОплаченоДнейЧасов			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
	
	// Реквизиты
	Движение.Показатель1				= ВыборкаПоСтрокамДокумента.Размер;
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ВидУчетаВремени			= Перечисления.ВидыУчетаВремени.ПоЧасам;
	Движение.ДатаНачалаСобытия			= ВыборкаПоСтрокамДокумента.ДатаВыхода;
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	Движение.Показатель2				= ВыборкаПоСтрокамДокумента.Авт_ЧасовПолуторных;
	Движение.Показатель3				= ВыборкаПоСтрокамДокумента.Авт_ЧасовДвойных;
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}	
	Если ВыборкаПоСтрокамДокумента.Сторно Тогда
		Движение.СторнируемыйДокумент = ВыборкаПоШапкеДокумента.ПерерассчитываемыйДокумент;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента						- выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ)
	
	//Если ЗначениеЗаполнено(ВыборкаПоТЧ.КодДоходаНДФЛ) Тогда
	//	
	//	Движение = Движения.НДФЛСведенияОДоходах.Добавить();
	//	
	//	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,"ОбособленноеПодразделение");
	//	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоТЧ); // ФизЛицо,  ПодразделениеОрганизации, ВидРасчета
	//	
	//	// Свойства
	//	Движение.Период						= ВыборкаПоТЧ.МесяцНалоговогоПериода;
	//	
	//	// Измерения
	//	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	//	Движение.КодДохода					= ВыборкаПоТЧ.КодДоходаНДФЛ;
	//	Движение.ПериодРегистрации			= КонецМесяца(ПериодРегистрации);
	//	
	//	// Ресурсы
	//	Движение.СуммаДохода				= ВыборкаПоТЧ.Результат; 
	//	
	//	// Реквизиты
	//	Движение.ИсчисленоИзЗарплаты		= Истина;

	//КонецЕсли;
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	
	// Свойства
	Движение.Период					= КонецМесяца(ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	
	// Измерения
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Движение.ФизЛицо				= ВыборкаПоТЧ.ФизЛицо;
	Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

// получает доходы НДФЛ по табличным частям с доходами
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - таблица значений или набор записей рег-ра - "приемник" сведений о доходах
//		
Процедура СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, НаборЗаписей, ФизлицаСписок = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамФизлица", ФизлицаСписок);
	Запрос.УстановитьПараметр("парамНачисления", Движения.ОсновныеНачисленияРаботниковОрганизаций.Выгрузить());
	Запрос.УстановитьПараметр("парамПериодРегистрации", ВыборкаПоШапкеДокумента.ПериодРегистрации);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.Результат,
	|	Начисления.ПериодДействияНачало КАК ДатаНачала,
	|	Начисления.ПериодДействияКонец КАК ДатаОкончания,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.Сторно
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&парамНачисления КАК Начисления
	|ГДЕ
	|	&УсловиеНаФизлицо";
	Если Не ЗначениеЗаполнено(ФизлицаСписок) Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"&УсловиеНаФизлицо","Истина");	
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"&УсловиеНаФизлицо","Физлицо В (&парамФизлица)");	
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""Таблица"" КАК ИмяТЧ,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ВидРасчета.КодДоходаНДФЛ КАК КодДохода,
	|	Начисления.Результат КАК СуммаДохода,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.СторнируемыйДокумент,
	|	&парамПериодРегистрации КАК ПериодРегистрации,
	|	КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ) КАК ДатаВыплатыДохода,
	|	ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка) КАК КодВычета,
	|	0 КАК СуммаВычета,
	|	0 КАК КоличествоДетей,
	|	Начисления.Сторно
	|ПОМЕСТИТЬ ВТСторноНачисления
	|ИЗ
	|	ВТНачисления КАК Начисления
	|ГДЕ
	|	Начисления.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)";
	Запрос.Выполнить();
	
	ДатаРегистрации = ?(Дата > КонецМесяца(ПериодРегистрации),КонецМесяца(ПериодРегистрации),?(Дата < ПериодРегистрации,ПериодРегистрации,Дата));
	
	ПроведениеРасчетов.СформироватьДоходыПоКодамНДФЛ(НаборЗаписей, Запрос.МенеджерВременныхТаблиц, ВыборкаПоШапкеДокумента, ДатаРегистрации);
	
КонецПроцедуры // СформироватьДоходыПоКодамНДФЛ()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
			
			// получим реквизиты табличной части
			РезультатЗапросаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента);
			ВыборкаПоНачислениям = РезультатЗапросаПоНачислениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоНачислениям.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
						
				КонецЕсли;

			КонецЦикла;
			
			// выполним удаление перерасчетов исправленного документа
			Если Не Отказ Тогда
				СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, Движения.НДФЛСведенияОДоходах);
				Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
					ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
    Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Начисления);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 05.08.2011 14:19 
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	Если ТипОснования = Тип("ДокументСсылка.AVT_РаботаВСверхурочныеЧасы") Тогда
		ЗаполнитьНаОснованииРаботыВСверхурочныеЧасы(ДанныеЗаполнения);	
	КонецЕсли;
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
/////автоматизация

// Заполнение документа на основании кадрового документа.
//
// Параметры:
// 	Основание  - [ДокументСсылка.AVT_РаботаВСверхурочныеЧасы] - основание заполнения
//
Процедура ЗаполнитьНаОснованииРаботыВСверхурочныеЧасы(Основание)
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 05.08.2011 14:22 
	Запрос = Новый Запрос;
	
	// Выбираем данные для шапки.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	AVT_РаботаВСверхурочныеЧасы.Дата,
	|	AVT_РаботаВСверхурочныеЧасы.Организация
	|ИЗ
	|	Документ.AVT_РаботаВСверхурочныеЧасы КАК AVT_РаботаВСверхурочныеЧасы
	|ГДЕ
	|	AVT_РаботаВСверхурочныеЧасы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Основание);
	ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
	Если Не ВыборкаПоШапке.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	// В запросе считаем часовую тарифную ставку для каждой строки.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.Сотрудник,
	|	AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.Физлицо,
	|	ВЫБОР
	|		КОГДА AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.ДатаВыхода = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ДатаДокумента
	|		ИНАЧЕ AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.ДатаВыхода
	|	КОНЕЦ КАК ДатаВыхода,
	|	AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.ЧасовПолуторных,
	|	AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.ЧасовДвойных,
	|	ВЫБОР
	|		КОГДА AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.ДатаВыхода = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УдалитьДату
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.AVT_РаботаВСверхурочныеЧасы.РаботникиОрганизации КАК AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации
	|ГДЕ
	|	AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ДатаВыхода,
	|	МАКСИМУМ(ПлановыеНачисленияРаботниковОрганизаций.Период) КАК МаксимальныйПериод
	|ПОМЕСТИТЬ ВТОсновныеНачисленияСрезПоследних
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|		ПО ДанныеДокумента.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|			И ДанныеДокумента.ДатаВыхода >= ПлановыеНачисленияРаботниковОрганизаций.Период
	|ГДЕ
	|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ДатаВыхода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияСрезПоследних.Сотрудник,
	|	ОсновныеНачисленияСрезПоследних.ДатаВыхода,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= ОсновныеНачисленияСрезПоследних.ДатаВыхода
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ОсновноеНачисление.ВидРасчетаЗавершения
	|		ИНАЧЕ ОсновноеНачисление.ВидРасчета
	|	КОНЕЦ КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= ОсновныеНачисленияСрезПоследних.ДатаВыхода
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ОсновноеНачисление.Показатель1Завершения
	|		ИНАЧЕ ОсновноеНачисление.Показатель1
	|	КОНЕЦ КАК Показатель,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= ОсновныеНачисленияСрезПоследних.ДатаВыхода
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ОсновноеНачисление.Валюта1Завершения
	|		ИНАЧЕ ОсновноеНачисление.Валюта1
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= ОсновныеНачисленияСрезПоследних.ДатаВыхода
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ОсновноеНачисление.ТарифныйРазряд1Завершения
	|		ИНАЧЕ ОсновноеНачисление.ТарифныйРазряд1
	|	КОНЕЦ КАК ТарифныйРазряд
	|ПОМЕСТИТЬ ВТОсновныеНачисления
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ОсновноеНачисление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОсновныеНачисленияСрезПоследних КАК ОсновныеНачисленияСрезПоследних
	|		ПО ОсновноеНачисление.Сотрудник = ОсновныеНачисленияСрезПоследних.Сотрудник
	|			И ОсновноеНачисление.Период = ОсновныеНачисленияСрезПоследних.МаксимальныйПериод
	|ГДЕ
	|	ОсновноеНачисление.ВидРасчетаИзмерение.Код ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.ДатаВыхода,
	|	ОсновныеНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|			ТОГДА РазмерТарифныхСтавок.Размер
	|		ИНАЧЕ ОсновныеНачисления.Показатель
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА РазмерТарифныхСтавок.Валюта
	|				ИНАЧЕ ОсновныеНачисления.Валюта
	|			КОНЕЦ В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|	КОНЕЦ КАК ОкладТариф
	|ПОМЕСТИТЬ ВТРазмерОсновногоНачисления
	|ИЗ
	|	ВТОсновныеНачисления КАК ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ДатаВалютногоУчета, ) КАК РазмерТарифныхСтавок
	|		ПО ОсновныеНачисления.ТарифныйРазряд = РазмерТарифныхСтавок.ТарифныйРазряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|		ПО (Валюты.Период = &ДатаВалютногоУчета)
	|			И (Валюты.Валюта = ВЫБОР
	|				КОГДА ОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА РазмерТарифныхСтавок.Валюта
	|				ИНАЧЕ ОсновныеНачисления.Валюта
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДокумента.Сотрудник,
	|	ВТДанныеДокумента.ДатаВыхода,
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК МаксимальныйПериод,
	|	ВТДанныеДокумента.УдалитьДату,
	|	ВТДанныеДокумента.ЧасовПолуторных,
	|	ВТДанныеДокумента.ЧасовДвойных
	|ПОМЕСТИТЬ ВТРаботникиОрганизацийКрайниеДаты
	|ИЗ
	|	ВТДанныеДокумента КАК ВТДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ВТДанныеДокумента.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И ВТДанныеДокумента.ДатаВыхода >= РаботникиОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДокумента.Сотрудник,
	|	ВТДанныеДокумента.ДатаВыхода,
	|	ВТДанныеДокумента.УдалитьДату,
	|	ВТДанныеДокумента.ЧасовПолуторных,
	|	ВТДанныеДокумента.ЧасовДвойных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизацийКрайниеДаты.ДатаВыхода,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиОрганизацийКрайниеДаты.ДатаВыхода
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
	|							И РаботникиОрганизаций.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|					ИНАЧЕ РаботникиОрганизаций.ГрафикРаботыЗавершения
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизаций.ГрафикРаботы.СокращенноеРабочееВремя
	|				И РаботникиОрганизаций.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизаций.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизаций.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиОрганизацийКрайниеДаты.ДатаВыхода
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
	|							И РаботникиОрганизаций.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|					ИНАЧЕ РаботникиОрганизаций.ГрафикРаботыЗавершения.ДлительностьРабочейНедели
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизаций.ГрафикРаботы.СокращенноеРабочееВремя
	|				И РаботникиОрганизаций.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизаций.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|		ИНАЧЕ РаботникиОрганизаций.ГрафикРаботы.ДлительностьРабочейНедели
	|	КОНЕЦ КАК ДлительностьРабочейНедели,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиОрганизацийКрайниеДаты.ДатаВыхода
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.ВидГрафика
	|		ИНАЧЕ РаботникиОрганизаций.ГрафикРаботы.ВидГрафика
	|	КОНЕЦ КАК ВидГрафика,
	|	РаботникиОрганизацийКрайниеДаты.УдалитьДату,
	|	РаботникиОрганизацийКрайниеДаты.ЧасовПолуторных,
	|	РаботникиОрганизацийКрайниеДаты.ЧасовДвойных,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= РаботникиОрганизацийКрайниеДаты.ДатаВыхода
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТДанныеРаботника
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаботникиОрганизацийКрайниеДаты КАК РаботникиОрганизацийКрайниеДаты
	|		ПО РаботникиОрганизаций.Сотрудник = РаботникиОрганизацийКрайниеДаты.Сотрудник
	|			И РаботникиОрганизаций.Период = РаботникиОрганизацийКрайниеДаты.МаксимальныйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДокумента.Сотрудник,
	|	ВТДанныеДокумента.ДатаВыхода,
	|	СводныеИндивидуальныеГрафики.Часов КАК Часов
	|ПОМЕСТИТЬ ВТНормаВремениПоСводнымИндивидуальнымГрафикам
	|ИЗ
	|	РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ВТДанныеДокумента
	|		ПО СводныеИндивидуальныеГрафики.Сотрудник = ВТДанныеДокумента.Сотрудник
	|			И (СводныеИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА(ВТДанныеДокумента.ДатаВыхода, МЕСЯЦ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДокумента.Сотрудник,
	|	ВТДанныеДокумента.ДатаВыхода,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ВТДанныеДокумента
	|		ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ВТДанныеДокумента.Сотрудник
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(ВТДанныеДокумента.ДатаВыхода, МЕСЯЦ))
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.План
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДокумента.Сотрудник,
	|	ВТДанныеДокумента.ДатаВыхода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеРаботника.Сотрудник,
	|	ВТДанныеРаботника.ДатаВыхода,
	|	ВТДанныеРаботника.ГрафикРаботы,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТНормаВремениПоОбщимГрафикам
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеРаботника КАК ВТДанныеРаботника
	|		ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ВТДанныеРаботника.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(ВТДанныеРаботника.ДатаВыхода, МЕСЯЦ))
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.План
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеРаботника.Сотрудник,
	|	ВТДанныеРаботника.ДатаВыхода,
	|	ВТДанныеРаботника.ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРаботника.ДатаВыхода,
	|	ДанныеРаботника.ГрафикРаботы,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоРабочихДней,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеРаботника КАК ДанныеРаботника
	|		ПО РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = ДанныеРаботника.ГрафикРаботы.AVT_ПроизводственныйКалендарь
	|			И (РегламентированныйПроизводственныйКалендарь.Год = ГОД(ДанныеРаботника.ДатаВыхода))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРаботника.ГрафикРаботы,
	|	ДанныеРаботника.ДатаВыхода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРаботника.Сотрудник,
	|	ДанныеРаботника.ГрафикРаботы,
	|	ДанныеРаботника.ДатаВыхода,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоРабочихДней,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаряЗаМесяц
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеРаботника КАК ДанныеРаботника
	|		ПО РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = ДанныеРаботника.ГрафикРаботы.AVT_ПроизводственныйКалендарь
	|			И (НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДанныеРаботника.ДатаВыхода, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРаботника.Сотрудник,
	|	ДанныеРаботника.ДатаВыхода,
	|	ДанныеРаботника.ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРаботника.Сотрудник,
	|	ДанныеРаботника.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ДанныеРаботника.УдалитьДату
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ДанныеРаботника.ДатаВыхода
	|	КОНЕЦ КАК ДатаВыхода,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА ОсновноеНачисление.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
	|				ТОГДА ОсновноеНачисление.ОкладТариф
	|			КОГДА ОсновноеНачисление.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням))
	|				ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|							КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
	|								ТОГДА ВЫБОР
	|										КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) = 0
	|											ТОГДА 0
	|										КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|											ТОГДА 0
	|										ИНАЧЕ ОсновноеНачисление.ОкладТариф / (ДанныеРаботника.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) * 12
	|									КОНЕЦ
	|							КОГДА ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоМесячнойНормеПоПроизводственномуКалендарю)
	|								ТОГДА ВЫБОР
	|										КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) = 0
	|											ТОГДА 0
	|										КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|											ТОГДА 0
	|										ИНАЧЕ ОсновноеНачисление.ОкладТариф / (ДанныеРаботника.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0))
	|									КОНЕЦ
	|							КОГДА ВЫБОР
	|									КОГДА СводныеИндивидуальныеГрафики.Часов ЕСТЬ НЕ NULL 
	|										ТОГДА СводныеИндивидуальныеГрафики.Часов
	|									КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц ЕСТЬ НЕ NULL 
	|										ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|									ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ЧасовЗаМесяц, 0)
	|								КОНЕЦ = 0
	|								ТОГДА 0
	|							ИНАЧЕ ОсновноеНачисление.ОкладТариф / ВЫБОР
	|									КОГДА СводныеИндивидуальныеГрафики.Часов ЕСТЬ НЕ NULL 
	|										ТОГДА СводныеИндивидуальныеГрафики.Часов
	|									КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц ЕСТЬ НЕ NULL 
	|										ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|									ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ЧасовЗаМесяц, 0)
	|								КОНЕЦ
	|						КОНЕЦ КАК ЧИСЛО(15, 3))
	|			КОГДА ОсновноеНачисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|				ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|							КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|								ТОГДА 0
	|							ИНАЧЕ ОсновноеНачисление.ОкладТариф / ДанныеРаботника.ДлительностьРабочейНедели * ВЫБОР
	|									КОГДА ДанныеРаботника.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
	|										ТОГДА 6
	|									ИНАЧЕ 5
	|								КОНЕЦ
	|						КОНЕЦ КАК ЧИСЛО(15, 3))
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Размер,
	|	СРЕДНЕЕ(ДанныеРаботника.ЧасовПолуторных) КАК ЧасовПолуторных,
	|	СРЕДНЕЕ(ДанныеРаботника.ЧасовДвойных) КАК ЧасовДвойных
	|ПОМЕСТИТЬ ВТОсновныеДанные
	|ИЗ
	|	ВТДанныеРаботника КАК ДанныеРаботника
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерОсновногоНачисления КАК ОсновноеНачисление
	|		ПО ДанныеРаботника.Сотрудник = ОсновноеНачисление.Сотрудник
	|			И ДанныеРаботника.ДатаВыхода = ОсновноеНачисление.ДатаВыхода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ДанныеРаботника.ГрафикРаботы = ДанныеПроизводственногоКалендаря.ГрафикРаботы
	|			И ДанныеРаботника.ДатаВыхода = ДанныеПроизводственногоКалендаря.ДатаВыхода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряЗаМесяц КАК ДанныеПроизводственногоКалендаряЗаМесяц
	|		ПО ДанныеРаботника.ГрафикРаботы = ДанныеПроизводственногоКалендаряЗаМесяц.ГрафикРаботы
	|			И ДанныеРаботника.ДатаВыхода = ДанныеПроизводственногоКалендаряЗаМесяц.ДатаВыхода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоСводнымИндивидуальнымГрафикам КАК СводныеИндивидуальныеГрафики
	|		ПО ДанныеРаботника.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И ДанныеРаботника.ДатаВыхода = СводныеИндивидуальныеГрафики.ДатаВыхода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам КАК НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|		ПО ДанныеРаботника.Сотрудник = НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник
	|			И ДанныеРаботника.ДатаВыхода = НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ДатаВыхода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоОбщимГрафикам КАК ГрафикиРаботыПоВидамВремени
	|		ПО ДанныеРаботника.Сотрудник = ГрафикиРаботыПоВидамВремени.Сотрудник
	|			И ДанныеРаботника.ДатаВыхода = ГрафикиРаботыПоВидамВремени.ДатаВыхода
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРаботника.Сотрудник,
	|	ДанныеРаботника.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ДанныеРаботника.УдалитьДату
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ДанныеРаботника.ДатаВыхода
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеДанные.Сотрудник,
	|	ОсновныеДанные.ПодразделениеОрганизации,
	|	ОсновныеДанные.ДатаВыхода,
	|	ОсновныеДанные.Размер,
	|	ОсновныеДанные.ЧасовПолуторных,
	|	ОсновныеДанные.ЧасовДвойных,
	|	ОсновныеДанные.Размер * (ОсновныеДанные.ЧасовПолуторных * 1.5 + ОсновныеДанные.ЧасовДвойных * 2) КАК Результат
	|ИЗ
	|	ВТОсновныеДанные КАК ОсновныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|		ПО ОсновныеДанные.Сотрудник = ОсновныеНачисленияРаботниковОрганизаций.Сотрудник
	|			И ОсновныеДанные.ДатаВыхода = ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало
	|			И (ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаСверхурочных))
	|ГДЕ
	|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ДатаДокумента",      ВыборкаПоШапке.Дата);
	Запрос.УстановитьПараметр("РегламентВалюта",    Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ДатаВалютногоУчета", ТекущаяДата());
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Организация           = ВыборкаПоШапке.Организация;
	ПериодРегистрации     = НачалоМесяца(ТекущаяДата());
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТЗ, Начисления);
		
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мПроизводныеДвижения = Новый Массив;
мПроизводныеДвижения.Добавить(Движения.ЗарплатаЗаМесяцОрганизаций);
