Перем мУдалятьДвижения;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мУказаниеСкладов ;
Перем мУказаниеСкладовВТЧ Экспорт;
Перем мСчетФактура;
Перем мИспользоватьРасширеннуюАналитику Экспорт;
Перем мДатаНачалаИспользованияРасширеннойАналитики Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, СтруктураШапкиДокумента) Экспорт

	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете)
		ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		
		Возврат;
	КонецЕсли;
		
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС", УчетнаяПолитикаРегл.МоментОпределенияНалоговойБазыНДС);
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
		СтруктураШапкиДокумента.НачислятьНДСНедвижимости = УчетнаяПолитикаРегл.НачислятьНДСПриПередачеНедвижимости;
	Иначе
		СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке = УчетнаяПолитикаРегл.НачислятьНДСПоОтгрузке;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()


Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено, Отказ) Экспорт
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
    СтруктураШапкиДокументаОтгрузки = Неопределено;
	СтруктураШапкиЭтогоДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	Если Не ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		//Полная структура шапки не нужна - такой документ не будем проводить
		СтруктураШапкиДокумента = СтруктураШапкиЭтогоДокумента;
		Возврат;
	КонецЕсли;

	ДокументОтгрузкиОбъект = ДокументОтгрузки.ПолучитьОбъект();
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
		// Сформируем структуру реквизитов шапки документа ПередачаОС
		ДокументОтгрузкиОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокументаОтгрузки, РежимПроведения);
	Иначе
		// Сформируем структуру реквизитов шапки документа РТиУ
		ДокументОтгрузкиОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокументаОтгрузки,,Отказ);
	КонецЕсли;
	
	// Курсы валют определяем на дату текущего документа
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(глЗначениеПеременной("ВалютаУправленческогоУчета"), СтруктураШапкиЭтогоДокумента.Дата);
	СтруктураШапкиДокументаОтгрузки.Вставить("КурсВалютыУправленческогоУчета", СтруктураКурса.Курс);
	СтруктураШапкиДокументаОтгрузки.Вставить("КратностьВалютыУправленческогоУчета", СтруктураКурса.Кратность);
	
	Если СтруктураШапкиДокументаОтгрузки.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокументаОтгрузки.ВалютаДокумента, СтруктураШапкиЭтогоДокумента.Дата);
		СтруктураШапкиДокументаОтгрузки.Вставить("КурсДокумента", СтруктураКурса.Курс);
		СтруктураШапкиДокументаОтгрузки.Вставить("КратностьДокумента", СтруктураКурса.Кратность);
	КонецЕсли;
	
	Если СтруктураШапкиДокументаОтгрузки.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокументаОтгрузки.ВалютаВзаиморасчетов, СтруктураШапкиЭтогоДокумента.Дата);
		СтруктураШапкиДокументаОтгрузки.Вставить("КурсВзаиморасчетов", СтруктураКурса.Курс);
		СтруктураШапкиДокументаОтгрузки.Вставить("КратностьВзаиморасчетов", СтруктураКурса.Кратность);
	КонецЕсли;

	СтруктураШапкиДокумента = новый Структура;
	Для каждого ЭлементСтруктуры Из СтруктураШапкиДокументаОтгрузки Цикл
		СтруктураШапкиДокумента.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	//Переопределяем параметры шапки, которые задаются текущим документом
	СтруктураШапкиДокумента.Вставить("ДатаДокументаОтгрузки", СтруктураШапкиДокументаОтгрузки.Дата);
	СтруктураШапкиДокумента.Вставить("ДокументОтгрузки", СтруктураШапкиЭтогоДокумента.ДокументОтгрузки);
	ЗаполнитьЗначенияСвойств(СтруктураШапкиДокумента, СтруктураШапкиЭтогоДокумента, "Дата, Ссылка, ВидДокумента, ПредставлениеВидаДокумента");
	
	//Признаки отражения в учете - из текущего документа (с учетом возможного отложенного проведения) 
	ЗаполнитьЗначенияСвойств(СтруктураШапкиДокумента, СтруктураШапкиЭтогоДокумента, "ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете");
	Если СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН") Тогда
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", СтруктураШапкиЭтогоДокумента.ОтражатьВНалоговомУчетеУСН);
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа",							Ложь);
	СтруктураШапкиДокумента.Вставить("СтруктураШапкиДокументаОтгрузки",			СтруктураШапкиДокументаОтгрузки);	
	СтруктураШапкиДокумента.Вставить("Комиссионер",								СтруктураШапкиДокумента.Контрагент);	//для контроля остатков регистра ТоварыОрганизаций
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
   	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, ДокументОтгрузки");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если Отказ Тогда Возврат; КонецЕсли;
	
	Если не РазрешенаОтгрузкаБезПереходаПраваСобственности() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Реализация отгруженных товаров может выполняться только при использовании расширенной аналитики учета затрат", Отказ, Заголовок);
	КонецЕсли;
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	ВестиПоДокументамРасчетовСКонтрагентом = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
		СтруктураШапкиДокумента.ДоговорКонтрагента, "ВестиПоДокументамРасчетовСКонтрагентом");
	
	Если ВестиПоДокументамРасчетовСКонтрагентом Тогда
		СтрокаСообщения = НСтр(
			"ru = 'Не поддерживается отгрузка без перехода права собственности для договоров, по которым ведутся взаиморасчеты по документам расчетов с контрагентами'");
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОтгрузки) Тогда
		Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
			Если НЕ СтруктураШапкиДокумента.ДокументОтгрузки.ПравоСобственностиПереходитПослеГосРегистрации Тогда
            	СтрокаСообщения = "Указанный документ передачи ОС не регистрирует отгрузку без перехода права собственности!
            		|На закладке ""Дополнительно"" взведите флажок ""Право собственности переходит после государственной регистрации""";
            	ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание);
			КонецЕсли;
		Иначе
			Если НЕ СтруктураШапкиДокумента.ДокументОтгрузки.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
				СтрокаСообщения = "Указанный документ отгрузки не регистрирует отгрузку без перехода права собственности!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СтруктураШапкиДокумента.ДокументОтгрузки.Проведен Тогда
			СтрокаСообщения = "В качестве документа отгрузки указан не проведенный документ!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ, Заголовок);
		КонецЕсли;
		
		Если НачалоДня(СтруктураШапкиДокумента.Дата)<НачалоДня(СтруктураШапкиДокумента.ДатаДокументаОтгрузки) Тогда
			СтрокаСообщения = "Дата документа отгрузки позже даты документа!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения,Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	Перем ТаблицаПоУслугам, ТаблицаПоТаре, Заголовок;

	ДокументОтгрузкиОбъект = ДокументОтгрузки.ПолучитьОбъект();
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
		ДокументОтгрузкиОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			ЕстьНДС = НЕ(ТаблицаПоТоварам.Колонки.Найти("НДС") = Неопределено);
			ТаблицаПоТоварам.Колонки.Добавить("СуммаНУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			ТаблицаПоТоварам.Колонки.Добавить("СуммаВР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			Если ДокументОтгрузки.Дата < Дата('20130101') Тогда
				ТаблицаПоТоварам.ЗагрузитьКолонку(ТаблицаПоТоварам.ВыгрузитьКолонку("СуммаБУ" + ?(ЕстьНДС, "БезНДС", "")), "СуммаНУ");
				ТаблицаПоТоварам.ЗаполнитьЗначения(0, "СуммаВР");
			Иначе
				ТаблицаПоТоварам.ЗаполнитьЗначения(0, "СуммаНУ");
				ТаблицаПоТоварам.ЗагрузитьКолонку(ТаблицаПоТоварам.ВыгрузитьКолонку("СуммаБУ" + ?(ЕстьНДС, "БезНДС", "")), "СуммаВР");
			КонецЕсли;
		
		КонецЕсли;
	Иначе
		ДокументОтгрузкиОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре);
	КонецЕсли;
    
	Если НЕ (СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета) 
		И ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ПередачаОС") Тогда
		
		Если СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.Дата);
			КоэффициентПересчетаНДС = СтруктураКурса.Курс/СтруктураКурса.Кратность;
			
			Для каждого Строка Из ТаблицаПоТоварам Цикл
				Строка.НДС 				= Строка.НДСДок * КоэффициентПересчетаНДС;
				Строка.СуммаБезНДС 		= Строка.СуммаРегл - Строка.НДС;
				Строка.ПроводкаСумма 	= Строка.СуммаБезНДС;
				Строка.ПроводкаСуммаНДС = Строка.НДС;
				Строка.СуммаБУБезНДС 	= Строка.СуммаБезНДС;
			КонецЦикла;
		КонецЕсли;	
    КонецЕсли;
	
КонецПроцедуры


// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,Отказ, Заголовок)
	
	Если ТипЗнч(ДокументОтгрузки) <> Тип("ДокументСсылка.ПередачаОС") Тогда
		ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
		ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать();
		КонецЕсли;
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Если Движения.Налоговый.Модифицированность() Тогда
			Движения.Налоговый.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		// Организация применяется УСН "доходы минус расходы".
		// В этом случае необходимо отражение документа по регистрам партий НУ.
		
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
			ЭтотОбъект, 
			СтруктураШапкиДокумента.Дата, 
			СтруктураШапкиДокумента.Организация,
			Ложь, // В последовательности упр. учета не отражаем
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
			СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
			СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
			
		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
	КонецЕсли;
	
	// Движения по НДС
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
		
		Если Не СтруктураШапкиДокумента.НачислятьНДСНедвижимости Тогда
			Если Не ТаблицаПоТоварам.Количество() = 0 Тогда
				УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(
					СтруктураШапкиДокумента, ТаблицаПоТоварам, , Отказ, УчетНДС.СчетОтнесенияНДС(СтруктураШапкиДокумента));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
		
		СтруктураТаблицыВыручки = Новый структура("НомерСтроки, Номенклатура, ВидЦенности, Ценность, Партия, СчетУчетаНДСПоРеализации,СчетУчетаБУ, СчетДоходовБУ, СубконтоБУ, 
		|СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал, ПринадлежностьНоменклатуры, Комиссионный, Комитент, ДоговорКомиссии, СчетРасчетовПоАвансамСКомитентом, СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, СуммаСписания, Количество");
		
		ВыручкаПоТоварам = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам,СтруктураТаблицыВыручки, , Истина);
		ВыручкаПоТоварам.ЗаполнитьЗначения(Ложь, "Комиссионный");		
		
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ВыручкаПоТоварам, Отказ);
		
	КонецЕсли;
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРеализацииОС(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОС, ТаблицаЗачетаАвансов, ОтражатьВНалоговомУчетеУСН, Отказ, Заголовок)
    
	ПроводкиБУ = Движения.Хозрасчетный;
	
	// Списание ОС
	
	Содержание = "Переход права собственности по гос.регистрации";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Организация",   СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ПокупательОС",  СтруктураШапкиДокумента.Контрагент);
	Запрос.УстановитьПараметр("СписокОС",      ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство"));
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("ВидыСубконто",  Массив);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьОС.Субконто1 КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОС.СуммаОстатокДт, 0) КАК ОстаточнаяСтоимость
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаДокумента,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&СписокОС)
	|				И Субконто2 = &ПокупательОС) КАК СтоимостьОС
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки";
	
	ТаблицаОстаточнойСтоимости = Запрос.Выполнить().Выгрузить();
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтоимостьОС.Субконто1 КАК ОсновноеСредство,
		|	ЕСТЬNULL(СтоимостьОС.СуммаОстатокДт, 0) КАК ОстаточнаяСтоимостьНУ,
		|	0 КАК ОстаточнаяСтоимостьВР,
		|	0 КАК ОстаточнаяСтоимостьПР
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(
		|			&ДатаДокумента,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПереданныеОбъектыНедвижимости),
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 В (&СписокОС)
		|				И Субконто2 = &ПокупательОС
		|				И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.НУ)) КАК СтоимостьОС
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Налоговый.Остатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтоимостьОС.Субконто1,
		|	0,
		|	ЕСТЬNULL(СтоимостьОС.СуммаОстатокДт, 0),
		|	0
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(
		|			&ДатаДокумента,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПереданныеОбъектыНедвижимости),
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 В (&СписокОС)
		|				И Субконто2 = &ПокупательОС
		|				И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.ВР)) КАК СтоимостьОС
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Налоговый.Остатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтоимостьОС.Субконто1,
		|	0,
		|	0,
		|	ЕСТЬNULL(СтоимостьОС.СуммаОстатокДт, 0)
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(
		|			&ДатаДокумента,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПереданныеОбъектыНедвижимости),
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 В (&СписокОС)
		|				И Субконто2 = &ПокупательОС
		|				И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.ПР)) КАК СтоимостьОС
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Налоговый.Остатки";
		
		ТаблицаОстаточнойСтоимостиНУ = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаОстаточнойСтоимости", ТаблицаОстаточнойСтоимости);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнешнийИсточник.ОсновноеСредство КАК ОсновноеСредство,
	|	ВнешнийИсточник.ОстаточнаяСтоимость КАК ОстаточнаяСтоимость
	|ПОМЕСТИТЬ ТаблицаОстаточнойСтоимости
	|ИЗ
	|	&ТаблицаОстаточнойСтоимости КАК ВнешнийИсточник";
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОтгрузки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПередачаОСОС.СчетРасходовБУ КАК СчетРасходовБУ,
	|	ПередачаОСОС.СубконтоБУ КАК СубконтоБУ,
	|	ПередачаОСОС.СчетРасходовНУ КАК СчетРасходовНУ,
	|	ПередачаОСОС.СубконтоНУ КАК СубконтоНУ
	|ПОМЕСТИТЬ ВТ_ПередачаОСОС
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстаточнойСтоимости.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОстаточнойСтоимости.ОстаточнаяСтоимость КАК ОстаточнаяСтоимость,
	|	ПередачаОСОС.СчетРасходовБУ КАК СчетРасходовБУ,
	|	ПередачаОСОС.СубконтоБУ КАК СубконтоБУ
	|ИЗ
	|	ТаблицаОстаточнойСтоимости КАК ТаблицаОстаточнойСтоимости
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПередачаОСОС КАК ПередачаОСОС
	|		ПО ТаблицаОстаточнойСтоимости.ОсновноеСредство = ПередачаОСОС.ОсновноеСредство";
	
	ТаблицаОстаточнойСтоимости = Запрос.Выполнить().Выгрузить();
	ОстаточнаяСтоимость = ТаблицаОстаточнойСтоимости.Итог("ОстаточнаяСтоимость");
    
	Если  ОстаточнаяСтоимость <= 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Основные средства сняты с учета на счете 45.04 в указанной организации.",,, СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
    
	Для Каждого СтрокаТаблицы Из ТаблицаОстаточнойСтоимости Цикл
		
		Если СтрокаТаблицы.ОстаточнаяСтоимость = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <"+СтрокаТаблицы.ОсновноеСредство+"> снято с учета на счете 45.04 в указанной организации.",,, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = Содержание;
		Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
		
		Проводка.СчетДт      = СтрокаТаблицы.СчетРасходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоБУ);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
		Проводка.Сумма       = СтрокаТаблицы.ОстаточнаяСтоимость;
		
		Если Проводка.СчетДт.Количественный Тогда
			Проводка.КоличествоДт = 1;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		ПроводкиНУ = Движения.Налоговый;
		
		Запрос.УстановитьПараметр("ТаблицаОстаточнойСтоимостиНУ", ТаблицаОстаточнойСтоимостиНУ);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешнийИсточник.ОсновноеСредство КАК ОсновноеСредство,
		|	ВнешнийИсточник.ОстаточнаяСтоимостьНУ КАК ОстаточнаяСтоимостьНУ,
		|	ВнешнийИсточник.ОстаточнаяСтоимостьВР КАК ОстаточнаяСтоимостьВР,
		|	ВнешнийИсточник.ОстаточнаяСтоимостьПР КАК ОстаточнаяСтоимостьПР
		|ПОМЕСТИТЬ ТаблицаОстаточнойСтоимостиНУ
		|ИЗ
		|	&ТаблицаОстаточнойСтоимостиНУ КАК ВнешнийИсточник";
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОстаточнойСтоимости.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаОстаточнойСтоимости.ОстаточнаяСтоимостьНУ КАК ОстаточнаяСтоимостьНУ,
		|	ТаблицаОстаточнойСтоимости.ОстаточнаяСтоимостьВР КАК ОстаточнаяСтоимостьВР,
		|	ТаблицаОстаточнойСтоимости.ОстаточнаяСтоимостьПР КАК ОстаточнаяСтоимостьПР,
		|	ПередачаОСОС.СчетРасходовНУ КАК СчетРасходовНУ,
		|	ПередачаОСОС.СубконтоНУ КАК СубконтоНУ
		|ИЗ
		|	ТаблицаОстаточнойСтоимостиНУ КАК ТаблицаОстаточнойСтоимости
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПередачаОСОС КАК ПередачаОСОС
		|		ПО ТаблицаОстаточнойСтоимости.ОсновноеСредство = ПередачаОСОС.ОсновноеСредство";
		
		ТаблицаОстаточнойСтоимостиНУ = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицы Из ТаблицаОстаточнойСтоимостиНУ Цикл
			
			Если СтрокаТаблицы.ОстаточнаяСтоимостьНУ <> 0 Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание  = Содержание;
				ПроводкаНУ.СчетКт      = ПланыСчетов.Налоговый.ПереданныеОбъектыНедвижимости;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				
				ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.Сумма       = СтрокаТаблицы.ОстаточнаяСтоимостьНУ;
				
				Если ПроводкаНУ.СчетДт.Количественный Тогда
					ПроводкаНУ.КоличествоДт = 1;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицы.ОстаточнаяСтоимостьВР <> 0 Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание  = Содержание;
				ПроводкаНУ.СчетКт      = ПланыСчетов.Налоговый.ПереданныеОбъектыНедвижимости;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
				
				ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.Сумма       = СтрокаТаблицы.ОстаточнаяСтоимостьВР;
				ПроводкаНУ.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ВР;
				ПроводкаНУ.НомерЖурнала = "ВР";
				
				Если ПроводкаНУ.СчетДт.Количественный Тогда
					ПроводкаНУ.КоличествоДт = 1;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТаблицы.ОстаточнаяСтоимостьПР <> 0 Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание  = Содержание;
				ПроводкаНУ.СчетКт      = ПланыСчетов.Налоговый.ПереданныеОбъектыНедвижимости;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
				
				ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.Сумма       = СтрокаТаблицы.ОстаточнаяСтоимостьПР;
				ПроводкаНУ.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
				ПроводкаНУ.НомерЖурнала = "ПР";
				
				Если ПроводкаНУ.СчетДт.Количественный Тогда
					ПроводкаНУ.КоличествоДт = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Выручка и НДС 
	
	ТаблицыДокумента = Новый Структура("ТаблицаПоТоварам", ТаблицаПоОС);
	
	Выручка = ТаблицаПоОС.Скопировать();
	Выручка.Свернуть("ОсновноеСредство, СчетДоходовБУ, СчетРасходовБУ, СчетДоходовНУ, СчетРасходовНУ, СубконтоБУ, СубконтоНУ, СтавкаНДС", 
		"Сумма, СуммаБУ, СуммаНУ, СуммаВР, СуммаВал, НДС, НДСВал");
	
	Для каждого СтрокаТаблицы из Выручка Цикл
		
		// Выручка
		
		Если СтрокаТаблицы.СуммаБУ = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаБУ;
		Проводка.Содержание  = Содержание;
		
		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
		
		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВал;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоБУ);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если СтрокаТаблицы.СуммаНУ <> 0 Или (СтрокаТаблицы.СуммаВР <> 0 И СтруктураШапкиДокумента.ПоддержкаПБУ18) Тогда
				ПроводкаНУ = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				
				Если СтрокаТаблицы.СуммаНУ <> 0 Тогда
					ПроводкаНУ.Сумма       = СтрокаТаблицы.СуммаНУ;
					ПроводкаНУ.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
					
				ИначеЕсли СтрокаТаблицы.СуммаВР <> 0 Тогда
					// Переход права собственности после гос.регистрации после 01.01.13 приводит к признанию временных разниц в доходах
					ПроводкаНУ.Сумма       = СтрокаТаблицы.СуммаВР;
					ПроводкаНУ.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
					ПроводкаНУ.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;
					ПроводкаНУ.СчетДт      = ПланыСчетов.Налоговый.ЗадолженностьПоРасчетамЗаНедвижимость;
					ПроводкаНУ.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
					ПроводкаНУ.СубконтоДт.Договоры    = СтруктураШапкиДокумента.ДоговорКонтрагента;
					
				КонецЕсли;
				
				ПроводкаНУ.Содержание  = Содержание;
				
				ПроводкаНУ.СчетКт = СтрокаТаблицы.СчетДоходовНУ;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ПоддержкаПБУ18 И СтрокаТаблицы.СуммаНУ <> 0 Тогда
				СуммаНУСНДС  = СтрокаТаблицы.СуммаНУ + СтрокаТаблицы.НДС;
				
				Если СуммаНУСНДС <> СтрокаТаблицы.СуммаБУ Тогда
					
					ПроводкаНУ = ПроводкиНУ.Добавить();
					ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
					ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Сумма       = СтрокаТаблицы.СуммаНУ;
					ПроводкаНУ.Содержание  = Содержание;
					
					ПроводкаНУ.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
					ПроводкаНУ.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					
					ПроводкаНУ.СчетКт = СтрокаТаблицы.СчетДоходовНУ;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, СтрокаТаблицы.СубконтоНУ);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
					ПроводкаНУ.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					
					ПроводкаНУ.НомерЖурнала = "ПР";
				КонецЕсли;
				
					
			КонецЕсли;
			
		КонецЕсли;
		
		// НДС
		
		Если ДокументОтгрузки.УчитыватьНДС И СтрокаТаблицы.НДС > 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			Проводка.Содержание  = Содержание;
			
			Проводка.СчетДт      = СтрокаТаблицы.СчетРасходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоБУ);
			
			Если СтруктураШапкиДокумента.НачислятьНДСНедвижимости Тогда
				Проводка.СчетКт  = ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФВыданные",  СтруктураШапкиДокумента.ДокументОтгрузки);
			Иначе    
				Проводка.СчетКт  = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Движения по взаиморасчетам
	
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(
		СтруктураШапкиДокумента.ДокументОтгрузки, мВалютаРегламентированногоУчета, Заголовок,, ТаблицаЗачетаАвансов, СтруктураШапкиДокумента);
	
	Если СтруктураПараметровЗачетАванса = Ложь Тогда
		Отказ = Истина;
		СуммаАванса = 0;
	Иначе
		СтруктураПараметровЗачетАванса.Вставить("Период", СтруктураШапкиДокумента.Дата);	
		СтруктураПараметровЗачетАванса.Вставить("Дата",   СтруктураШапкиДокумента.Дата);
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметровЗачетАванса, СтруктураШапкиДокумента, ТаблицаПоОС);
		СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса,
			ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации);
	КонецЕсли;
	
	Если СуммаАванса > 0 тогда
		// При реализации со ставкой 0% необходимо отметить соотв. запись 
		// в НДСПокупки событием "Предполагается НДС 0%"
		
	КонецЕслИ;
	
	Если НЕ ((СтруктураПараметровЗачетАванса = Ложь) ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) Тогда
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
		Конецесли;
		
		БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса,
			мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
	Конецесли;
	
КонецПроцедуры


// Формируем движения по регистру ТоварыОрганизаций
//
Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоТоварам.Количество()=0 Тогда Возврат; КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

	Если Не Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// По результату запроса по шапке документа формируем движения по упр. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)

	Если не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
        Возврат;
	КонецЕсли;
	
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		ВидДвиженияНакопления.Приход, Отказ, Заголовок);
	
	КопияТовары = ТаблицаПоТоварам.Скопировать();
	
	ТабИменТовары = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДС",    "НДСВрем");
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДСВал", "НДС");
	Иначе
		ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДСУпр", "НДС");
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ Продажи.
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
		
		// В этом случае таблицы документа обрабатываются особым образом
		ТаблицаДвиженийТовары = Движения.Продажи.ВыгрузитьКолонки();
		
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТовары, ТаблицаДвиженийТовары, СтруктураШапкиДокумента.Проект, СтруктураШапкиДокумента.Дата, "Продажи");
		
		// Вставляем уже подготовленные таблицы движений
		ТаблицыДанныхДокумента = Новый Структура;
		ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам", ТаблицаДвиженийТовары);
		
	Иначе
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", КопияТовары);
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.Продажи, СтруктТаблицДокумента);
		
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        СтруктураШапкиДокумента.Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         СтруктураШапкиДокумента.Контрагент);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПродажи",    СтруктураШапкиДокумента.Ссылка);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      СтруктураШапкиДокумента.Подразделение);
	
	// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", СтруктураШапкиДокумента.Сделка);
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Продажи, Неопределено, ТаблицыДанныхДокумента, Дата);
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные.
	СтруктТаблицДокумента = Новый Структура;
	Если ТаблицаПоТоварам.Количество()>0 Тогда
		ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Отказ, Заголовок, РежимПроведения);
	КонецЕсли;
	КопияТовары = ТаблицаПоТоварам.Скопировать();
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		КопияТовары.Колонки.ЗаказПокупателя.Имя = "Сделка";
	КонецЕсли;	
	СтруктТаблицДокумента.Вставить("ТаблицаТовары", КопияТовары);
	
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыПереданные, СтруктТаблицДокумента);
	
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,     "ТаблицаТовары");
	
	Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", Сделка);
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПереданные, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
		ДвиженияПоРеализацииОС(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, Ложь, Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
			СтруктураШапкиДокумента,
			ТаблицаПоТоварам
		);
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	
	ТаблицаВыручкиДляБУ = ТаблицаПоТоварам.Скопировать( , "СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ, СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал");
	ТаблицаВыручкиДляБУ.Свернуть("СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ", "СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал");
	
	ДатаДока   = Дата;
	Счет91     = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	
	// Проводки по выручке и НДС без списания партий
	Для каждого СтрокаТЧ из ТаблицаВыручкиДляБУ Цикл
		
		// Выручка
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период                 = ДатаДока;
		Проводка.Организация            = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание 			= "Реализация отгруженных товаров";
		Проводка.СписаниеПартий         = Истина;
		Проводка.Сумма = СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;
		
		Проводка.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт           = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт	= СтрокаТЧ.СуммаБезНДСВал + СтрокаТЧ.НДСВал;
		КонецЕсли; 
		
		Проводка.СчетКт                 = СтрокаТЧ.СчетДоходовБУ;
		Для каждого СубконтоСчета Из Проводка.СчетКт.ВидыСубконто Цикл
			Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоБУ)) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоБУ);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
		
		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС 
			И СтрокаТЧ.НДС <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период               = ДатаДока;
			Проводка.Организация          = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание           = "Реализация отгруженных товаров";
			Проводка.СписаниеПартий       = Истина;
			
			Проводка.СчетДт = ?( БухгалтерскийУчет.ЭтоСубсчет(СтрокаТЧ.СчетРасходовБУ, Счет91), СтрокаТЧ.СчетРасходовБУ, ПланыСчетов.Хозрасчетный.Продажи_НДС);
			Для каждого СубконтоСчета Из Проводка.СчетДт.ВидыСубконто Цикл
				Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоБУ)) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоБУ);
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
			
			Если СтруктураШапкиДокумента.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", Ссылка);
			ИначеЕсли СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", СтруктураШапкиДокумента.ДокументОтгрузки);
			Иначе
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			КонецЕсли;
			
			Проводка.Сумма                = СтрокаТЧ.НДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскийУчет.ЗаписатьДвижения(Движения);
	
	//Отражение взаиморасчетов по реализации товаров
	// Проводки по взаиморасчетам
	СуммаПоТоварам = ТаблицаПоТоварам.Итог("СуммаБезНДСВал") + ТаблицаПоТоварам.Итог("НДСВал");
	СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоТоварам(СтруктураШапкиДокумента, Заголовок, СуммаПоТоварам, ТаблицаПоВзаиморасчетам);
	
	Если СтруктураПараметровЗачетАванса = Ложь тогда
		Отказ       = Истина;
		СуммаАванса = 0;
	Иначе
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметровЗачетАванса, СтруктураШапкиДокумента, ТаблицаПоТоварам);
		СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации);
	КонецЕсли;// Проводки по взаиморасчетам
	
	
	Если не ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
		Конецесли;
		БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса, 
			мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ, , Истина);
		БухгалтерскийУчет.ЗаписатьДвижения(Движения);
	Конецесли;

КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистру подсистемы учета УСН
// для отражения реализации
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
			
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ВыручкаПоТоварам, Отказ) Экспорт
	
	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата)
		И Не ВыручкаПоТоварам.Количество() = 0 Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ВыручкаПоТоварам, , Отказ, УчетНДС.СчетОтнесенияНДС(СтруктураШапкиДокумента), , Истина);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров, СтруктураШапкиДокумента,	ТаблицаПоТоварам)
	Перем Счет91, Счет90_03;
	
	Счет91 = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	Счет90_03 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;				
	ТаблицаДвижений = новый ТаблицаЗначений();				
	
	ТаблицаДвижений.Колонки.Добавить("ТекущаяТаблица");
	
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя"		, Документы.ТипВсеСсылки());
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, ?(ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС"), Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"), Новый ОписаниеТипов("СправочникСсылка.Номенклатура")));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСчет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоБУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетНДС"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаНДС"				, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		
	КонецЕсли;
	
	ПереименованиеКолонокРезультирующейТаблицы = Новый Структура();
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("КоррСчет", "СчетДоходовБУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СчетУчетаНУ", "СчетДоходовНУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СуммаНДС", "НДС");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы);
	
		
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
		Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
			СтрокаНовойТаблицы.Номенклатура = СтрокаТаблицы.ОсновноеСредство;
		КонецЕсли;
		
		СтрокаНовойТаблицы.СчетНДС = ?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаТаблицы.СчетРасходовБУ, Счет91),СтрокаТаблицы.СчетРасходовБУ, Счет90_03);
		
		СтрокаНовойТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаНовойТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
		
		КоррСчет = СтрокаНовойТаблицы.СчетДоходовБУ;
		
		Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
			ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
				СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
			ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) тогда
				СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
			Конецесли;
		КонецЦикла; 
		
		КоррСчет = СтрокаНовойТаблицы.СчетНДС;
		
		Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
			ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
				СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
			ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) ТОгда
				СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
			Конецесли;
		КонецЦикла; 
		
		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
			КоррСчет = СтрокаНовойТаблицы.СчетДоходовНУ;
			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.Номенклатура)) Тогда
					СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.Номенклатура;
				Конецесли;
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла; 
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы, Истина);
	
	ТаблицаДвижений.Колонки.ЗаказПокупателя.Имя = "Сделка";
	
	ЧисловыеКолонкиСтрокой = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура = новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой = "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Не ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоТоварам(СтруктураШапкиДокумента, Заголовок = Неопределено, СуммаДокументаСНДС, ТаблицаПоВзаиморасчетам = Неопределено ) Экспорт
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("ВидДокумента,
										  |, Организация, ВалютаРегламентированногоУчета
	                                      |, ОрганизацияПрименяетУСН, ОтражатьВНалоговомУчете, ОтражатьВНалоговомУчетеУСН, ОтражатьВНалоговомУчетеУСНДоходы
										  |, НДСВключенВСтоимость
										  |, ВалютаДокумента, КурсДокумента, КратностьДокумента
										  |, Контрагент, Сделка
										  |, ДоговорКонтрагента, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС, ВедениеВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом
										  |, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов
										  |,НачислятьНДСПоОтгрузке,ДокументОтгрузки,ВидОперации");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШапкиДокумента);
	                                                               
	СтруктураПараметров.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
	СтруктураПараметров.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам);
	СтруктураПараметров.Вставить("ВидОперации", Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);	
	СтруктураПараметров.Вставить("Заголовок",Заголовок);	
	СтруктураПараметров.Вставить("УчетАгентскогоНДС",ложь);	
	СтруктураПараметров.Вставить("СуммаДокументаСНДС",СуммаДокументаСНДС);
	СтруктураПараметров.Вставить("Период",Дата);	
	СтруктураПараметров.Вставить("Дата",Дата);	
	СтруктураПараметров.Вставить("Ссылка",Ссылка);	
	
	//Определение вида операции
	СтруктураПараметров.Вставить("Направление", "Выбытие");	
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	СтруктураПараметров.Вставить("РасчетыВозврат",БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураПараметров.ВидДокумента,).РасчетыВозврат);
	
	Если СтруктураПараметров.РасчетыВозврат=Неопределено тогда
		//Другие операции не обрабатываются
		ОбщегоНазначения.СообщитьОбОшибке("Документ не обрабатывается в блоке расчета авансов.",Ложь,Заголовок);
		Возврат Ложь;                                  
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
	
	//Будут заполнены в модуле зачета аванса
	СтруктураПараметров.Вставить("СуммаАвансаРег",0);
	СтруктураПараметров.Вставить("СуммаАвансаВал",0);

	Возврат СтруктураПараметров;
КонецФункции

Функция РазрешенаОтгрузкаБезПереходаПраваСобственности(ПараметрОснование = Неопределено) Экспорт
	Разрешено = мИспользоватьРасширеннуюАналитику И 
		(НачалоДня(мДатаНачалаИспользованияРасширеннойАналитики)<=НачалоДня(Дата)
		ИЛИ НЕ ЗначениеЗаполнено(Дата));
	
	ДокОснование = ?(ПараметрОснование = Неопределено, ДокументОтгрузки, ПараметрОснование);
	ТипОснования = ТипЗнч(ДокОснование);
	
	Разрешено = Разрешено ИЛИ (ТипОснования = Тип("ДокументСсылка.ПередачаОС") И ЗначениеЗаполнено(ТипОснования));
	
	Возврат Разрешено;
КонецФункции

// Формирование движений по регистру "Списанные товары".
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
		УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам),
		ТаблицаДвижений,
		Истина);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Товары,        "ВидТабличнойЧасти");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам, "ВедениеУчетаПоПроектам");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,                         "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,     "Качество");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РеализацияКомиссия, "КодОперацииПартииТоваров");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,              "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,                          "ДокументПередачи");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "СтатусПередачи");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,              "ДоговорКонтрагента");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,     "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,                     "Организация");
	
	// Кор.Счет для начисления задолженности перед комитентом, если вдруг продадим комиссионный товар
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом, "КорСчетЗадолженностиБУ");
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
		
		Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
		Строка.КорСчетНУ      = СтрокаТЧ.СчетРасходовНУ;
		Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоБУ;
		Строка.КорСубконтоНУ2 = СтрокаТЧ.СубконтоНУ;
		
		Строка.СчетУчетаБУ         = СтрокаТЧ.ПереданныеСобственныеБУ;
		Строка.СчетУчетаНУ         = СтрокаТЧ.ПереданныеСобственныеБУ;
		
		Строка.ПринятыеСчетУчетаБУ = СтрокаТЧ.ПереданныеПринятыеБУ;
		Строка.ПринятыеСчетУчетаНУ = СтрокаТЧ.ПереданныеПринятыеБУ;
		
		Строка.ОтражатьВНалоговомУчете  = Истина;
		
	КонецЦикла;
	
	ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений(ТаблицаДвижений, "НомерСтрокиДокумента");
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если НЕ Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ,РежимПроведения)
    Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения, Отказ);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
    Если Отказ Тогда
		Возврат;
	КонецЕсли;
    ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, СтруктураШапкиДокумента);
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента.СтруктураШапкиДокументаОтгрузки, ТаблицаПоТоварам);

	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", истина);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары", ТаблицаПоТоварам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
		Отказ, Заголовок);

	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
			мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,Отказ, Заголовок);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам));

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ОтгрузкаОС = (ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС"));
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	Если ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОтгрузки, ?(ОтгрузкаОС, "ОС", "Товары"));
	Иначе
		СуммаДокумента = 0;
	КонецЕсли;
	мСчетФактура = УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный");

	//признаки отражения в учете возьмем из ДокументОтгрузки - эти флаги всегда должны совпадать
	Если значениеЗаполнено(ДокументОтгрузки) Тогда
		ОтражатьВУправленческомУчете = ?(ОтгрузкаОС, ОтражатьВУправленческомУчете, ДокументОтгрузки.ОтражатьВУправленческомУчете);
		ОтражатьВБухгалтерскомУчете = ДокументОтгрузки.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете = ДокументОтгрузки.ОтражатьВНалоговомУчете;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	Если мСчетФактура = неопределено Тогда
		//кэшируем значение переменной
		мСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру( Ссылка, "СчетФактураВыданный");
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект,,, мСчетФактура);

КонецПроцедуры


#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;


	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ), Ссылка);

КонецПроцедуры // Печать

Процедура ОбработкаЗаполнения(Основание)
	
	Если Основание = Неопределено ИЛИ ТипЗнч(Основание) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание.ДоговорКонтрагента) Тогда
		
		ВестиПоДокументамРасчетовСКонтрагентом = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			Основание.ДоговорКонтрагента, "ВестиПоДокументамРасчетовСКонтрагентом");
		
		Если ВестиПоДокументамРасчетовСКонтрагентом = Истина Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке(
				"Не поддерживается отгрузка без перехода права собственности для договоров, по которым ведутся взаиморасчеты по документам расчетов с контрагентами");
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
		
		Если НЕ (Основание.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаОС")) Тогда
		
		Если НЕ (Основание.ПравоСобственностиПереходитПослеГосРегистрации) Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
		
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	Сделка                       = Основание.Сделка;    	
	ДокументОтгрузки             = Основание;
	ОтражатьВУправленческомУчете = ?(ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС"), Ложь, Основание.ОтражатьВУправленческомУчете);
	ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
	ОтражатьВНалоговомУчете      = Основание.ОтражатьВНалоговомУчете;
	
КонецПроцедуры


#КонецЕсли

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПокупателя");

мУказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		Или (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
мИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат");
мДатаНачалаИспользованияРасширеннойАналитики = глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");