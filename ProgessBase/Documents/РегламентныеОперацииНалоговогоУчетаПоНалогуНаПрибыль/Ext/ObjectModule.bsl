Перем мУдалятьДвижения;

Перем ТаблицаДвижений;
Перем НачалоПериода;
Перем КонецПериода;
Перем ПроводкиНУ;
Перем мНачДата;
Перем мКонДата;
Перем мНачГраница;
Перем мКонГраница;
Перем мУчетнаяПолитикаРегл;
Перем мПоддержкаПБУ18;
Перем ЗаписьНормированияРасходов;

//Процедура заполнения выполняемых действий при создании нового документа
Процедура ЗаполнитьВыполняемыеДействия() Экспорт
	РаспределениеРасходовПоВидамДеятельности      = Истина;
	НормированиеРасходовНаРекламу                 = Истина;
	НормированиеРасходовНаДобровольноеСтрахованиеИВозмещениеПроцентов = Истина;
	НормированиеПредставительскихРасходов         = Истина;
КонецПроцедуры

// Возвращает значение нормы, соответствующее проценту от выручки
Функция ОпределитьНормуРасходовПоВыручке(Процент)
	
	// Формируем массив счетов учета выручки
	СписокСчетовПоВыручке = Новый Массив;
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.Выручка);
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства);
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииПокупныхТоваров);
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииОсновныхСредств);
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииНематериальныхАктивов);
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг);
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииИмущественныхПрав);
	СписокСчетовПоВыручке.Добавить(ПланыСчетов.Налоговый.ВыручкаОтРеализацииЦенныхБумаг);
	
	ВыручкаНУ = 0;
	
	Если ДополнительныеСвойства.ИспользоватьРасширеннуюАналитику Тогда
		
		// Проводки по выручке в НУ могут быть еще не сформированы, поэтому данные о выручке
		// возьмем из регистра УчетПродажИСебестоимости.
		// Документ РасчетСебестоимостиВыпуска получает данные для формирования проводок по выручке
		// из этого же регистра.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		НалоговыйУчет.СформироватьВременнуюТаблицуВыручкаНУ(
			Запрос.МенеджерВременныхТаблиц, 
			Организация, 
			НачалоПериода, 
			КонецПериода,
			СписокСчетовПоВыручке,
			Ложь); // Учитываем только доходы от реализации
			
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВыручкаНУ.Сумма + ВЫБОР
		|			КОГДА ВыручкаНУ.КорректировкуВключатьВДоходы
		|				ТОГДА ВыручкаНУ.Корректировка
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Сумма
		|ИЗ
		|	ВыручкаНУ КАК ВыручкаНУ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			// В выборке - только одна запись
			Если Выборка.Сумма <> Null Тогда
				ВыручкаНУ = Выборка.Сумма;
			КонецЕсли;
		КонецЕсли;
		
	Иначе	
		
		// Формируем запрос по счетам учета выручки
		ЗапросПоВыручке = Новый Запрос;
		ЗапросПоВыручке.УстановитьПараметр("НачалоМесяца", НачалоПериода);
		ЗапросПоВыручке.УстановитьПараметр("КонецМесяца",  КонецПериода);
		ЗапросПоВыручке.УстановитьПараметр("Организация",  Организация);
		ЗапросПоВыручке.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
		ЗапросПоВыручке.УстановитьПараметр("СписокСчетовПоВыручке",  СписокСчетовПоВыручке);
		ЗапросПоВыручке.Текст = 
	    "ВЫБРАТЬ
		|	НалоговыйОбороты.СуммаОборотКт КАК ОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет в (&СписокСчетовПоВыручке), , (Организация = &Организация) и (ВидУчета = &ВидУчета), , ) КАК НалоговыйОбороты
		|";
		ВыборкаВыручки = ЗапросПоВыручке.Выполнить().Выбрать();
		
		// Собираем выручку
		ВыручкаНУ = 0;
		Пока ВыборкаВыручки.Следующий() Цикл
			ВыручкаНУ = ВыручкаНУ + ?(ВыборкаВыручки.ОборотКт = Null, 0, ВыборкаВыручки.ОборотКт);
		КонецЦикла;
		
	КонецЕсли;
	
	// Определяем норму
	Норма = Окр((ВыручкаНУ * Процент / 100), 2, 1);
    Возврат Норма;
	
КонецФункции

// Возвращает значение нормы, соответствующее проценту от расходов на оплату труда
// с учетом или без учета расходов на добровольное страхование работников
Функция ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, Процент, ВключатьДобровольноеСтрахование = Ложь)

	// Определяем сумму расходов по виду затрат "Оплата труда"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",  НачалоГода(мКонДата));
	Запрос.УстановитьПараметр("КонецМесяца",   мКонДата);
	Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидЗатрат",     Перечисления.ВидыРасходовНУ.ОплатаТруда);
	Запрос.УстановитьПараметр("Организация",   СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетЕНВД",      ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД);
	Запрос.УстановитьПараметр("Счет69",        ПланыСчетов.Налоговый.РасчетыПоСоциальномуСтрахованию);    
	Запрос.УстановитьПараметр("ВидУчета",      Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет97",        ПланыСчетов.Налоговый.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ОплатаТрудаРБП",Справочники.РасходыБудущихПериодов.РБПНаОплатуТруда);
	
	МассивСчетовЗатрат = Новый Массив;
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбщехозяйственныеРасходы);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбщепроизводственныеРасходы);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.БракВПроизводстве);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОсновноеПроизводство_);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ОбслуживающиеПроизводства);
	МассивСчетовЗатрат.Добавить(ПланыСчетов.Налоговый.ИздержкиОбращения);
	Запрос.УстановитьПараметр("СчетаЗатрат",  МассивСчетовЗатрат);
		
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОбороты.СуммаОборотДт ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ НалоговыйОбороты.СуммаОборотДт
	               |		КОНЕЦ) КАК СуммаРасходовНаОплатуТруда,
	               |	СУММА(ВЫБОР
	               |			КОГДА СписаноНаЕНВД.СуммаОборотКт ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ СписаноНаЕНВД.СуммаОборотКт
	               |		КОНЕЦ) КАК СписаноНаЕНВД,
	               |	НалоговыйОбороты.Субконто1.ВидРасходовНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |			&НачалоМесяца,
	               |			&КонецМесяца,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетаЗатрат),
	               |			&ВидСубконто,
	               |			Организация = &Организация
	               |				И ВидУчета = &ВидУчета,
	               |			НЕ КорСчет В ИЕРАРХИИ (&Счет69)
	               |				И НЕ КорСчет В ИЕРАРХИИ (&СчетаЗатрат),
	               |			) КАК НалоговыйОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Обороты(
	               |				&НачалоМесяца,
	               |				&КонецМесяца,
	               |				,
	               |				,
	               |				&ВидСубконто,
	               |				Организация = &Организация
	               |					И ВидУчета = &ВидУчета,
	               |				КорСчет = &СчетЕНВД,
	               |				) КАК СписаноНаЕНВД
	               |		ПО НалоговыйОбороты.Субконто1.ВидРасходовНУ = СписаноНаЕНВД.Субконто1.ВидРасходовНУ
	               |ГДЕ
	               |	НалоговыйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.Субконто1.ВидРасходовНУ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОбороты.СуммаОборотДт ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ НалоговыйОбороты.СуммаОборотДт
	               |		КОНЕЦ),
	               |	СУММА(ВЫБОР
	               |			КОГДА СписаноНаЕНВД.СуммаОборотКт ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ СписаноНаЕНВД.СуммаОборотКт
	               |		КОНЕЦ),
	               |	НалоговыйОбороты.Субконто1.ВидРасходовНУ
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |			&НачалоМесяца,
	               |			&КонецМесяца,
	               |			,
	               |			,
	               |			&ВидСубконто,
	               |			Организация = &Организация
	               |				И ВидУчета = &ВидУчета
	               |				И КорСубконто1 = &ОплатаТрудаРБП,
	               |			КорСчет В ИЕРАРХИИ (&Счет97),
	               |			) КАК НалоговыйОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Обороты(
	               |				&НачалоМесяца,
	               |				&КонецМесяца,
	               |				,
	               |				,
	               |				&ВидСубконто,
	               |				Организация = &Организация
	               |					И ВидУчета = &ВидУчета,
	               |				КорСчет = &СчетЕНВД,
	               |				) КАК СписаноНаЕНВД
	               |		ПО НалоговыйОбороты.Субконто1.ВидРасходовНУ = СписаноНаЕНВД.Субконто1.ВидРасходовНУ
	               |ГДЕ
	               |	НалоговыйОбороты.Субконто1.ВидРасходовНУ = &ВидЗатрат
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.Субконто1.ВидРасходовНУ";
				   
				   
	ВыборкаНаОплатуТруда = Запрос.Выполнить().Выбрать();

	НаОплатуТруда = 0;
	Пока ВыборкаНаОплатуТруда.Следующий() Цикл
		НаОплатуТруда = НаОплатуТруда + ВыборкаНаОплатуТруда.СуммаРасходовНаОплатуТруда - ВыборкаНаОплатуТруда.СписаноНаЕНВД;
	КонецЦикла;

	Если ВключатьДобровольноеСтрахование Тогда

		// Определяем сумму расходов по виду затрат добровольное страхование работников
		СписокКоррСчетов = Новый Массив;
		СписокКоррСчетов.Добавить(ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу);
		СписокКоррСчетов.Добавить(ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы);

		СписокВидовЗатрат = Новый Массив;
		СписокВидовЗатрат.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование);
		СписокВидовЗатрат.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
		СписокВидовЗатрат.Добавить(Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоМесяца",     НачалоГода(мКонДата));
		Запрос.УстановитьПараметр("КонецМесяца",      мКонДата);
		Запрос.УстановитьПараметр("ВидСубконто",      ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("ВидЗатрат",        СписокВидовЗатрат);
		Запрос.УстановитьПараметр("СписокКоррСчетов", СписокКоррСчетов);
		Запрос.УстановитьПараметр("Организация",      СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ВидУчета",         Перечисления.ВидыУчетаПоПБУ18.НУ);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	НалоговыйОбороты.СуммаОборотКт КАК ОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , , &ВидСубконто, (Организация = &Организация) и (ВидУчета = &ВидУчета) ,КорСчет в (&СписокКоррСчетов) , ) КАК НалоговыйОбороты
		|ГДЕ
		|	НалоговыйОбороты.Субконто1.ВидРасходовНУ В (&ВидЗатрат)";
		ВыборкаНаОплатуТруда = Запрос.Выполнить().Выбрать();

		Пока ВыборкаНаОплатуТруда.Следующий() Цикл
			НаОплатуТруда = НаОплатуТруда + ?(ВыборкаНаОплатуТруда.ОборотКт = Null, 0, ВыборкаНаОплатуТруда.ОборотКт);
		КонецЦикла;

	КонецЕсли;

	// Определяем норму
	Возврат Окр((НаОплатуТруда * Процент / 100), 2, 1);

КонецФункции //ОпределитьНормуПоРасходамНаОплатуТруда()

Процедура РаспределениеРасходовПоВидамДеятельности(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.РаспределениеРасходовПоВидамДеятельности Тогда
		Возврат;
	КонецЕсли;

	// Процедура выполняется в том случае, если организация является плательщиком ЕНВД.
	Если НЕ мУчетнаяПолитикаРегл.ОрганизацияЯвляетсяПлательщикомЕНВД Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
		
	ПериодГод = ?(мУчетнаяПолитикаРегл.МетодРаспределенияКосвенныхРасходовПоВидамДеятельности = Перечисления.МетодыРаспределенияКосвенныхРасходовПоВидамДеятельности.НарастающимИтогомСНачалаГода, Истина, Ложь);
	
	Если ПериодГод Тогда
		ТаблицаКоэффициентов = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата, мНачДата, "НУ", Ложь);
	Иначе
		Коэффициент = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, мКонДата, мНачДата, "НУ");
	КонецЕсли;

	// Расходы на счетах учета прямых расходов распределять не надо,т.к.
	// они распределяются при расчете себестоимости продукции.
	РаспределяемыеСчета = Новый Массив;
	РаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходыРаспределяемые);
	РаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходыРаспределяемые);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонГраница",   Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("РаспределяемыеСчета",   РаспределяемыеСчета);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Затраты.Подразделение,
	|	Затраты.СчетУчета,
	|	Затраты.СтатьяЗатрат,
	|	Затраты.СтатьяЗатрат.ХарактерЗатрат,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ,
	|	Неопределено,
	|	Неопределено,
	|	Неопределено,
	|	Неопределено,
	|	0,
	|	СУММА(Затраты.СуммаОстаток) 			КАК Сумма,
	|	СУММА(Затраты.ПостояннаяРазницаОстаток) КАК ПостояннаяРазница,
	|	СУММА(Затраты.ВременнаяРазницаОстаток)	КАК ВременнаяРазница
	|ИЗ
	|	РегистрНакопления.ЗатратыНалоговыйУчет.Остатки(&КонГраница, СчетУчета В(&РаспределяемыеСчета) И Организация = &Организация) КАК Затраты
	|
	|СГРУППИРОВАТЬ ПО
	|	Затраты.Подразделение,
	|	Затраты.СчетУчета,
	|	Затраты.СтатьяЗатрат,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка ИЗ ТаблицаЗапроса Цикл
		
		СуммаКорректировки = 0;
		Если ПериодГод Тогда
			СтрокаТаблицыКоэффииентов = ТаблицаКоэффициентов.Найти(Строка.СчетУчета, "Счет");
			Если СтрокаТаблицыКоэффииентов = Неопределено Тогда
				Коэффициент = 0;
			Иначе
				Коэффициент = СтрокаТаблицыКоэффииентов.Коэффициент;
				СуммаКорректировки = СтрокаТаблицыКоэффииентов.СуммаКорректировки;
			КонецЕсли;
		КонецЕсли;
		
		СуммаЕНВД 			  = Окр(Строка.Сумма * Коэффициент, 2, 1);
		ПостояннаяРазницаЕНВД = Окр(Строка.ПостояннаяРазница * Коэффициент, 2, 1);
		ВременнаяРазницаЕНВД  = Окр(Строка.ВременнаяРазница * Коэффициент, 2, 1);
		
		Если СуммаЕНВД <> 0 ИЛИ ПостояннаяРазницаЕНВД <> 0 ИЛИ ВременнаяРазницаЕНВД <> 0 Тогда
		
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			НоваяСтрока.ПодразделениеОрганизации	= Строка.Подразделение;
			НоваяСтрока.СтатьяЗатрат				= Строка.СтатьяЗатрат;
			НоваяСтрока.СчетЗатратНУ				= Строка.СчетУчета;
			НоваяСтрока.НоменклатурнаяГруппа		= Строка.НоменклатурнаяГруппа;
			НоваяСтрока.Заказ						= Строка.Заказ;
			
			НоваяСтрока.СуммаБух           			= 0;
			НоваяСтрока.СуммаНал           			= СуммаЕНВД;
			Если мПоддержкаПБУ18 Тогда
				НоваяСтрока.ПостояннаяРазница       = ПостояннаяРазницаЕНВД;
				НоваяСтрока.ВременнаяРазница        = ВременнаяРазницаЕНВД;
			КонецЕсли;
		КонецЕсли;
			
		Если СуммаЕНВД <> 0 Тогда
			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период       = КонецМесяца(ПериодРегистрации);
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт       = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
			
			Проводка.СчетКт       = Строка.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Строка.СтатьяЗатрат);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
			
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = СуммаЕНВД;
		КонецЕсли;
		
		Если ПостояннаяРазницаЕНВД <> 0 И мПоддержкаПБУ18 Тогда
			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период       = КонецМесяца(ПериодРегистрации);
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт       = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
			
			Проводка.СчетКт       = Строка.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Строка.СтатьяЗатрат);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = ПостояннаяРазницаЕНВД;
		КонецЕсли;
		
		Если ВременнаяРазницаЕНВД <> 0 И мПоддержкаПБУ18 Тогда
			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период       = КонецМесяца(ПериодРегистрации);
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт       = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
			
			Проводка.СчетКт       = Строка.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Строка.СтатьяЗатрат);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
			
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = ВременнаяРазницаЕНВД;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаЗатрат.Количество() > 0 Тогда
		ТекСтруктураШапкиДокумента = Новый Структура;
		ТекСтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
		ТекСтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", 	Истина);
		ТекСтруктураШапкиДокумента.Вставить("Организация", Организация);
		ТекСтруктураШапкиДокумента.Вставить("Ссылка", Ссылка);
		ТекСтруктураШапкиДокумента.Вставить("Дата", КонецМесяца(ПериодРегистрации));
		
		ТаблицаЗатрат.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
			
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(ТекСтруктураШапкиДокумента, ТаблицаЗатрат);
	КонецЕсли;

	// Формируем запрос внереализационным расходам
	Счет91 = ПланыСчетов.Налоговый.ВнереализационныеРасходыРаспределяемые;

	// Расходы на счетах учета прямых расходов распределять не надо,т.к.
	// они распределяются при расчете себестоимости продукции.
	РаспределяемыеСчета = Новый Массив;
	РаспределяемыеСчета.Добавить(ПланыСчетов.Налоговый.ВнереализационныеРасходыРаспределяемые);

	// Формируем запрос по виду затрат
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",      мНачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",       мКонГраница);
	Запрос.УстановитьПараметр("ВидСубконто",       ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидСубконто91",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетПрочихРасходов",           	 Счет91);
	Запрос.УстановитьПараметр("СчетИздержкиОбращения",           ПланыСчетов.Налоговый.ИздержкиОбращения);
	Запрос.УстановитьПараметр("СтатьяЗатратТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	Запрос.УстановитьПараметр("РаспределяемыеСчета",             РаспределяемыеСчета);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОбороты.ВидУчета КАК ВидУчета,
	               |	НалоговыйОбороты.Счет КАК Счет,
	               |	НалоговыйОбороты.Субконто1 КАК СтатьяЗатрат,
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОбороты.СуммаОборотДт ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ НалоговыйОбороты.СуммаОборотДт
	               |		КОНЕЦ) КАК СуммаЗатрат
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&РаспределяемыеСчета), &ВидСубконто, Организация = &Организация, , ) КАК НалоговыйОбороты
	               |ГДЕ
	               |	(НалоговыйОбороты.Счет <> &СчетИздержкиОбращения
	               |			ИЛИ НалоговыйОбороты.Субконто1.ВидРасходовНУ <> &СтатьяЗатратТранспортныеРасходы)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.ВидУчета,
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.Счет
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОбороты.ВидУчета,
	               |	НалоговыйОбороты.Счет,
	               |	НалоговыйОбороты.Субконто1,
	               |	СУММА(ВЫБОР
	               |			КОГДА НалоговыйОбороты.СуммаОборотДт ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ НалоговыйОбороты.СуммаОборотДт
	               |		КОНЕЦ)
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В ИЕРАРХИИ (&СчетПрочихРасходов), &ВидСубконто91, Организация = &Организация, , ) КАК НалоговыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.ВидУчета,
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.Счет";
	
	
	ВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();

	Пока ВыборкаРезультатовЗапроса.Следующий() Цикл
		
		СуммаКорректировки = 0;
		Если ПериодГод Тогда
			СтрокаТаблицыКоэффииентов = ТаблицаКоэффициентов.Найти(ВыборкаРезультатовЗапроса.Счет, "Счет");
			Если СтрокаТаблицыКоэффииентов = Неопределено Тогда
				Коэффициент = 0;
			Иначе
				Коэффициент = СтрокаТаблицыКоэффииентов.Коэффициент;
				СуммаКорректировки = СтрокаТаблицыКоэффииентов.СуммаКорректировки;
			КонецЕсли;
		КонецЕсли;
		
		// Расходы, которые подлежат распреджелению распределяем по видам дейтельности (ЕНВД / не ЕНВД)
		СуммаЕНВД = Окр(ВыборкаРезультатовЗапроса.СуммаЗатрат*Коэффициент, 2);

		Если СуммаЕНВД <> 0 Тогда

			// Заполним таблицу движений по регистру бухгалтерии "Налоговый".
			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период       = КонецМесяца(ПериодРегистрации);
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		
			Проводка.СчетДт       = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
			Проводка.ВидУчетаДт   = ВыборкаРезультатовЗапроса.ВидУчета;

			Проводка.СчетКт       = ВыборкаРезультатовЗапроса.Счет;
			Если Проводка.СчетКт.ПринадлежитЭлементу(Счет91) Или Проводка.СчетКт = Счет91 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", ВыборкаРезультатовЗапроса.СтатьяЗатрат);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", ВыборкаРезультатовЗапроса.СтатьяЗатрат);
			КонецЕсли; 
			
			Проводка.ВидУчетаДт   = ВыборкаРезультатовЗапроса.ВидУчета;
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = СуммаЕНВД;

		КонецЕсли;

	КонецЦикла;
	
	Если ТаблицаКоэффициентов = Неопределено Или ТипЗнч(ТаблицаКоэффициентов) = Тип("Число") Тогда
    	ПроводкиНУ.Записать(Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПериодГод  И ТаблицаКоэффициентов.Итог("СуммаКорректировки") <> 0 Тогда // текущих расходов нет, но надо внести корректировки прошлых периодов
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоМесяца",      НачалоГода(мНачДата));
		Запрос.УстановитьПараметр("КонецМесяца",       мКонГраница);
		Запрос.УстановитьПараметр("ВидСубконто",       ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.УстановитьПараметр("ВидСубконто91",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
		Запрос.УстановитьПараметр("Организация",       СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СчетПрочихРасходов",           	 Счет91);
		Запрос.УстановитьПараметр("СчетИздержкиОбращения",           ПланыСчетов.Налоговый.ИздержкиОбращения);
		Запрос.УстановитьПараметр("СтатьяЗатратТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	Запрос.УстановитьПараметр("РаспределяемыеСчета",             РаспределяемыеСчета);
		Запрос.Текст = "ВЫБРАТЬ
		|	НалоговыйОбороты.ВидУчета КАК ВидУчета,
		|	НалоговыйОбороты.Счет КАК Счет,
		|	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК СуммаЗатрат,
		|	НалоговыйОбороты.Субконто1 КАК СтатьяЗатрат
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|		&НачалоМесяца,
		|		&КонецМесяца,
		|		,
		|		Счет В ИЕРАРХИИ (&РаспределяемыеСчета),
		|		&ВидСубконто,
		|		Организация = &Организация
		|		    И Субконто1.ВидРасходовНУ <> &СтатьяЗатратТранспортныеРасходы,
		|		,
		|		) КАК НалоговыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.ВидУчета,
		|	НалоговыйОбороты.Счет,
		|	НалоговыйОбороты.Субконто1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НалоговыйОбороты.ВидУчета,
		|	НалоговыйОбороты.Счет,
		|	СУММА(НалоговыйОбороты.СуммаОборотДт),
		|	НалоговыйОбороты.Субконто1
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|		&НачалоМесяца,
		|		&КонецМесяца,
		|		,
		|		Счет В ИЕРАРХИИ (&СчетПрочихРасходов),
		|		&ВидСубконто91,
		|		Организация = &Организация,
		|		,
		|		) КАК НалоговыйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.ВидУчета,
		|	НалоговыйОбороты.Счет,
		|	НалоговыйОбороты.Субконто1";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		
		Для Каждого ВыборкаРезультатовЗапроса Из РезультатЗапроса Цикл
			
			СтрокаТаблицыКоэффииентов = ТаблицаКоэффициентов.Найти(ВыборкаРезультатовЗапроса.Счет, "Счет");
			СуммаКорректировки = ?(СтрокаТаблицыКоэффииентов = Неопределено, 0, СтрокаТаблицыКоэффииентов.СуммаКорректировки);
			ВсегоЗатрат = ВыборкаРезультатовЗапроса.СуммаЗатрат;
			Коэффициент = ?(ВсегоЗатрат = 0, 0 , СуммаКорректировки / ВсегоЗатрат);
			СуммаЕНВД = Окр(ВыборкаРезультатовЗапроса.СуммаЗатрат*Коэффициент, 2);
			
			Если СуммаЕНВД <> 0 Тогда
				
				// Заполним таблицу движений по регистру бухгалтерии "Налоговый".
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период       = КонецМесяца(ПериодРегистрации);
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				
				Проводка.СчетДт       = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
				Проводка.ВидУчетаДт   = ВыборкаРезультатовЗапроса.ВидУчета;
				
				Проводка.СчетКт       = ВыборкаРезультатовЗапроса.Счет;
				Если Проводка.СчетКт.ПринадлежитЭлементу(Счет91) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", ВыборкаРезультатовЗапроса.СтатьяЗатрат);	
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", ВыборкаРезультатовЗапроса.СтатьяЗатрат);
				КонецЕсли; 
				Проводка.ВидУчетаКт   = ВыборкаРезультатовЗапроса.ВидУчета;
				Проводка.Содержание   = "Закрытие счетов косвенных расходов";
				Проводка.Сумма        = СуммаЕНВД;
				
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период       = КонецМесяца(ПериодРегистрации);
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				
				Если ВыборкаРезультатовЗапроса.Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) ИЛИ ВыборкаРезультатовЗапроса.Счет = ПланыСчетов.Налоговый.РасходыНаПродажу Тогда
					Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
				ИначеЕсли ВыборкаРезультатовЗапроса.Счет.ПринадлежитЭлементу(Счет91) Тогда
					Проводка.СчетДт = ПланыСчетов.Налоговый.СальдоПрочихДоходовИРасходов;
				Иначе
					Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
				КонецЕсли;
				Проводка.ВидУчетаДт   = ВыборкаРезультатовЗапроса.ВидУчета;
				Проводка.СчетКт       = ВыборкаРезультатовЗапроса.Счет;
				Если Проводка.СчетКт.ПринадлежитЭлементу(Счет91) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", ВыборкаРезультатовЗапроса.СтатьяЗатрат);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", ВыборкаРезультатовЗапроса.СтатьяЗатрат);
				КонецЕсли; 
				Проводка.ВидУчетаКт   = ВыборкаРезультатовЗапроса.ВидУчета;
				Проводка.Содержание   = "Закрытие счетов косвенных расходов";
				Проводка.Сумма        = - СуммаЕНВД;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
		
	ПроводкиНУ.Записать(Ложь);

КонецПроцедуры // РаспределениеРасходовПоВидамДеятельности()

// Функция формирует текст запроса по нормируемым расходам при использовании обычного режима учета.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаПоНормируемымРасходам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НезавершенноеПроизводство.Подразделение	КАК Подразделение,
	|	НезавершенноеПроизводство.СчетУчета	КАК СчетУчета,
	|	НезавершенноеПроизводство.СтатьяЗатрат	КАК СтатьяЗатрат,
	|	НезавершенноеПроизводство.СтатьяЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	НезавершенноеПроизводство.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	НезавершенноеПроизводство.Заказ	КАК Заказ,
	|	НезавершенноеПроизводство.Затрата КАК Затрата,
	|	НезавершенноеПроизводство.ХарактеристикаЗатраты	КАК ХарактеристикаЗатраты,
	|	НезавершенноеПроизводство.СерияЗатраты КАК СерияЗатраты,
	|
	|	Неопределено, // Продукция
	|	Неопределено, // ХарактеристикаПродукции
	|	Неопределено, // СерияПродукции
	|
	|	НезавершенноеПроизводство.СтоимостьПриход КАК СуммаПриход,
	|	НезавершенноеПроизводство.СтоимостьРасход КАК СуммаРасход,
	|	НезавершенноеПроизводство.ВременнаяРазницаПриход - НезавершенноеПроизводство.ВременнаяРазницаРасход КАК ВременнаяРазница,
	|	НезавершенноеПроизводство.ПостояннаяРазницаПриход - НезавершенноеПроизводство.ПостояннаяРазницаРасход КАК ПостояннаяРазница,
	|	НезавершенноеПроизводство.ПостояннаяРазницаРасход КАК ПостояннаяРазницаРасход
	|ИЗ
	|	РегистрНакопления.НезавершенноеПроизводствоНалоговыйУчет.Обороты(&НачГраница, &КонГраница, Период,
	|		СчетУчета В ИЕРАРХИИ (&СчетаУчета) 
	|		И Организация = &Организация
	|		И СтатьяЗатрат.ВидРасходовНУ = &ВидЗатрат
	|	) КАК НезавершенноеПроизводство
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БракВПроизводстве.Подразделение,
	|	БракВПроизводстве.СчетУчета,
	|	БракВПроизводстве.СтатьяЗатрат,
	|	БракВПроизводстве.СтатьяЗатрат.ХарактерЗатрат,
	|	БракВПроизводстве.НоменклатурнаяГруппа,
	|	БракВПроизводстве.Заказ,
	|
	|	Неопределено, // Затрата
	|	Неопределено, // ХарактеристикаЗатраты
	|	Неопределено, // СерияЗатраты
	|
	|	БракВПроизводстве.Продукция,
	|	БракВПроизводстве.ХарактеристикаПродукции,
	|	БракВПроизводстве.СерияПродукции,
	|	БракВПроизводстве.СуммаПриход,
	|	БракВПроизводстве.СуммаРасход,
	|	БракВПроизводстве.ВременнаяРазницаПриход - БракВПроизводстве.ВременнаяРазницаРасход,
	|	БракВПроизводстве.ПостояннаяРазницаПриход - БракВПроизводстве.ПостояннаяРазницаРасход,
	|	БракВПроизводстве.ПостояннаяРазницаРасход КАК ПостояннаяРазницаРасход
	|ИЗ
	|	РегистрНакопления.БракВПроизводствеНалоговыйУчет.Обороты(&НачГраница, &КонГраница,,
	|		СчетУчета В ИЕРАРХИИ (&СчетаУчета) 
	|		И Организация = &Организация
	|		И СтатьяЗатрат.ВидРасходовНУ = &ВидЗатрат
	|	) КАК БракВПроизводстве
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	Затраты.Подразделение,
	|	Затраты.СчетУчета,
	|	Затраты.СтатьяЗатрат,
	|	Затраты.СтатьяЗатрат.ХарактерЗатрат,
	|	Затраты.НоменклатурнаяГруппа,
	|	Затраты.Заказ,
	|
	|	Неопределено, // Затрата
	|	Неопределено, // ХарактеристикаЗатраты
	|	Неопределено, // СерияЗатраты
	|
	|	Неопределено, // Продукция
	|	Неопределено, // ХарактеристикаПродукции
	|	Неопределено, // СерияПродукции
	|
	|	Затраты.СуммаПриход,
	|	Затраты.СуммаРасход,
	|	Затраты.ВременнаяРазницаПриход - Затраты.ВременнаяРазницаРасход,
	|	Затраты.ПостояннаяРазницаПриход - Затраты.ПостояннаяРазницаРасход,
	|	Затраты.ПостояннаяРазницаРасход КАК ПостояннаяРазницаРасход
	|ИЗ
	|	РегистрНакопления.ЗатратыНалоговыйУчет.Обороты(&НачГраница, &КонГраница,,
	|		СчетУчета В ИЕРАРХИИ (&СчетаУчета) 
	|		И Организация = &Организация
	|		И СтатьяЗатрат.ВидРасходовНУ = &ВидЗатрат
	|	) КАК Затраты
	|";

	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаПоНормируемымРасходам()

// Функция формирует текст запроса по нормируемым расходам при использовании обычного режима учета.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаПоНормируемымРасходамРасширеннаяАналитика()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РегистрАналитикаВидаУчета.ПодразделениеОрганизации КАК Подразделение,
	|	РегистрАналитикаВидаУчета.СчетУчетаНУ КАК СчетУчета,
	|	РегистрАналитикаВидаУчета.СчетУчета КАК СчетУчетаБУ,
	|	РегистрАналитикаУчетаЗатрат.СтатьяЗатрат КАК СтатьяЗатрат,
	|	РегистрАналитикаУчетаЗатрат.ХарактерЗатрат КАК ХарактерЗатрат,
	|	РегистрАналитикаРаспределенияЗатрат.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	РегистрАналитикаУчетаПартий.Заказ	КАК Заказ,
	|
	|	РегистрАналитикаУчетаЗатрат.Затрата КАК Затрата,
	|	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК ХарактеристикаЗатраты,
	|	РегистрАналитикаУчетаЗатрат.СерияЗатраты КАК СерияЗатраты,
	|
	|	РегистрАналитикаРаспределенияЗатрат.Продукция КАК Продукция,
	|	РегистрАналитикаРаспределенияЗатрат.ХарактеристикаПродукции КАК ХарактеристикаПродукции,
	|	РегистрАналитикаРаспределенияЗатрат.СерияПродукции КАК СерияПродукции,
	|
	|	УчетЗатрат.СтоимостьНУПриход КАК СуммаПриход,
	|	УчетЗатрат.СтоимостьНУРасход КАК СуммаРасход,
	|	(УчетЗатрат.СтоимостьПриход - УчетЗатрат.СтоимостьНУПриход - УчетЗатрат.ПостояннаяРазницаПриход)
	|	- (УчетЗатрат.СтоимостьРасход - УчетЗатрат.СтоимостьНУРасход - УчетЗатрат.ПостояннаяРазницаРасход) КАК ВременнаяРазница,
	|	(УчетЗатрат.ПостояннаяРазницаПриход - УчетЗатрат.ПостояннаяРазницаРасход) КАК ПостояннаяРазница,
	|	УчетЗатрат.ПостояннаяРазницаРасход КАК ПостояннаяРазницаРасход
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл.Обороты(&НачГраница, &КонГраница,,
	|		АналитикаВидаУчета В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаВидаУчета.Ссылка
	|			ИЗ
	|				РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|			ГДЕ
	|				РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.Затраты)
	|				И РегистрАналитикаВидаУчета.Организация = &Организация
	|				И РегистрАналитикаВидаУчета.СчетУчетаНУ В ИЕРАРХИИ (&СчетаУчета)
	|			)
	|		И АналитикаУчетаЗатрат В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаУчетаЗатрат.Ссылка
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|			ГДЕ
	|				РегистрАналитикаУчетаЗатрат.СтатьяЗатрат.ВидРасходовНУ = &ВидЗатрат
	|			)
	|	) КАК УчетЗатрат
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|	ПО
	|   	УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|	ПО
	|   	УчетЗатрат.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаРаспределенияЗатрат КАК РегистрАналитикаРаспределенияЗатрат
	|	ПО
	|   	УчетЗатрат.АналитикаРаспределенияЗатрат = РегистрАналитикаРаспределенияЗатрат.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|	ПО
	|   	УчетЗатрат.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка
	|	
	|";

	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаПоНормируемымРасходамРасширеннаяАналитика()

// Производит нормирование расходов, для которых норма задается процентом от суммового показателя
Процедура НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, ВидЗатрат, Норма, Процент)
	
	ТекущаяНорма = Норма;
	
	Если Процент = 0 Тогда
		СуммаБазы = 0;
	Иначе	
		СуммаБазы = 100 * Норма / Процент;
	КонецЕсли;
	
	ТаблицаЗатрат 		= УправлениеЗатратами.СформироватьТаблицуЗатрат();
	ТаблицаЗатратПриход = ТаблицаЗатрат.Скопировать();
	
	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыВспомогательныхПроизводств);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОбслуживающихПроизводств);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.РасходыНаПродажу);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходыРаспределяемые);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходыРаспределяемые);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.ИздержкиОбращенияРаспределяемые);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КоммерческиеРасходыРаспределяемые);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЗатрат",    ВидЗатрат);
	Запрос.УстановитьПараметр("НачГраница",   Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница",   Новый Граница(КонецПериода,  ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаУчета",   СчетаУчета);
	
	Если ДополнительныеСвойства.ИспользоватьРасширеннуюАналитику Тогда
		Запрос.Текст = ТекстЗапросаПоНормируемымРасходамРасширеннаяАналитика();
	Иначе
		Запрос.Текст = ТекстЗапросаПоНормируемымРасходам();
	КонецЕсли;
	
	ТаблицаРасходов = Запрос.Выполнить().Выгрузить();
	ТаблицаРасходов.Колонки.Добавить("НеСписано", 				 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаРасходов.Колонки.Добавить("МожноСписать", 			 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаРасходов.Колонки.Добавить("СписатьПостоянныеРазницы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	// Определяем не принятые расходы и учитываем ранее принятые.
	Для Каждого Расход из ТаблицаРасходов Цикл
		Расход.НеСписано = Расход.СуммаПриход - Расход.СуммаРасход;
		Норма = Норма - Расход.СуммаРасход;
	КонецЦикла;
	
	Норма = Макс(Норма, 0);
	
	// Определяем сумму расхода по нормам
	ТаблицаРасходов.Сортировать("НеСписано Возр");
	Для Каждого Строка из ТаблицаРасходов Цикл
		
		Если Норма > Строка.НеСписано Тогда
			Строка.МожноСписать = Строка.НеСписано;
			Норма = Норма - Строка.МожноСписать;
		Иначе
			Строка.МожноСписать = Норма;
			Норма = 0;
		КонецЕсли;
		
		Строка.СписатьПостоянныеРазницы = Строка.ПостояннаяРазница + (Строка.НеСписано - Строка.МожноСписать);
			
		НоваяСтрока = ТаблицаЗатрат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПодразделениеОрганизации	= Строка.Подразделение;
		НоваяСтрока.СчетЗатратНУ				= Строка.СчетУчета;
		Если ДополнительныеСвойства.ИспользоватьРасширеннуюАналитику Тогда
			НоваяСтрока.СчетЗатрат				= Строка.СчетУчетаБУ;
		КонецЕсли;	
			
		НоваяСтрока.СуммаНал 					= Строка.МожноСписать;
		НоваяСтрока.ВременнаяРазница 			= Строка.ВременнаяРазница;
		НоваяСтрока.ПостояннаяРазница 			= Строка.СписатьПостоянныеРазницы;
		
		// В традиционном режиме сумма БУ не нужна, т.к. не формируются движения по регистрам БУ
		Если ДополнительныеСвойства.ИспользоватьРасширеннуюАналитику Тогда
			НоваяСтрока.СуммаБух 				= НоваяСтрока.СуммаНал + НоваяСтрока.ПостояннаяРазница + НоваяСтрока.ВременнаяРазница;
		КонецЕсли;
		
		СтрокаЗаписьНормированияРасходов              = ЗаписьНормированияРасходов.Добавить();
		СтрокаЗаписьНормированияРасходов.ВидОперации  = ВидЗатрат;
		СтрокаЗаписьНормированияРасходов.ЗатратыГод   = Строка.СуммаПриход;
		СтрокаЗаписьНормированияРасходов.РасходыГод   = Строка.СуммаРасход;
		СтрокаЗаписьНормированияРасходов.СуммаБазы    = СуммаБазы;
		
		// Сформируем проводку.
		Если Строка.МожноСписать <> 0 Тогда
			Проводка = ПроводкиНУ.Добавить();
			Проводка.Период       = КонецМесяца(ПериодРегистрации);
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				
			Если Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) ИЛИ Строка.СчетУчета = ПланыСчетов.Налоговый.РасходыНаПродажу Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
				
			Проводка.СчетКт       = Строка.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат",  Строка.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", Строка.Подразделение);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
				
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = Строка.МожноСписать;
			СтрокаЗаписьНормированияРасходов.РасходыМесяц =  Строка.МожноСписать;
			
		КонецЕсли;
		СтрокаЗаписьНормированияРасходов.РасходыГод =  СтрокаЗаписьНормированияРасходов.РасходыГод + Строка.МожноСписать;
		
		Если Строка.ВременнаяРазница <> 0 И мПоддержкаПБУ18 Тогда
			Проводка = ПроводкиНУ.Добавить();
			Проводка.Период       = КонецМесяца(ПериодРегистрации);
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				
			Если Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) ИЛИ Строка.СчетУчета = ПланыСчетов.Налоговый.РасходыНаПродажу Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
				
			Проводка.СчетКт       = Строка.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат",  Строка.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", Строка.Подразделение);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
				
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = Строка.ВременнаяРазница;
		КонецЕсли;
			
		Если Строка.СписатьПостоянныеРазницы <> 0 И мПоддержкаПБУ18 Тогда
			Проводка = ПроводкиНУ.Добавить();
			Проводка.Период       = КонецМесяца(ПериодРегистрации);
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				
			Если Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) ИЛИ Строка.СчетУчета = ПланыСчетов.Налоговый.РасходыНаПродажу Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
				
			Проводка.СчетКт       = Строка.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат",  Строка.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", Строка.Подразделение);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = Строка.СписатьПостоянныеРазницы;
			
			СтрокаЗаписьНормированияРасходов.РазницыМесяц = Строка.СписатьПостоянныеРазницы;
		КонецЕсли;
		СтрокаЗаписьНормированияРасходов.РазницыГод   = - Строка.ПостояннаяРазница + Строка.СписатьПостоянныеРазницы;
		
		Если НЕ мПоддержкаПБУ18 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы
		 И СтруктураШапкиДокумента.ДиректКостинг Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства Тогда
			НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеРасходыОсновногоПроизводства;
		ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеРасходыВспомогательныхПроизводств Тогда
			НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеРасходыВспомогательныхПроизводств;
		ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы Тогда
			НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы;
		ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы Тогда
			НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы;
		ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку Тогда
			НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеРасходыПоВыявленномуБраку;
		ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеРасходыОбслуживающихПроизводств Тогда
			НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеРасходыОбслуживающихПроизводств;
		ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходыРаспределяемые Тогда
			НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщепроизводственныеРасходы;
		ИначеЕсли Строка.СчетУчета = ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходыРаспределяемые Тогда
			НовыйСчетУчета = ПланыСчетов.Налоговый.ПрямыеОбщехозяйственныеРасходы;
		Иначе
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = ТаблицаЗатратПриход.Добавить();
		НоваяСтрока.ПодразделениеОрганизации	= Строка.Подразделение;
		НоваяСтрока.СтатьяЗатрат				= Строка.СтатьяЗатрат;
		НоваяСтрока.СчетЗатратНУ				= НовыйСчетУчета;
		Если ДополнительныеСвойства.ИспользоватьРасширеннуюАналитику Тогда
			НоваяСтрока.СчетЗатрат				= Строка.СчетУчетаБУ; // В БУ счет затрат не изменится
		КонецЕсли;	
		НоваяСтрока.НоменклатурнаяГруппа		= Строка.НоменклатурнаяГруппа;
		НоваяСтрока.Заказ						= Строка.Заказ;
			
		Если Строка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			НоваяСтрока.Номенклатура 				= Строка.Затрата;
			НоваяСтрока.ХарактеристикаНоменклатуры 	= Строка.ХарактеристикаЗатраты;
			НоваяСтрока.СерияНоменклатуры			= Строка.СерияЗатраты;
		ИначеЕсли Строка.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
			НоваяСтрока.Продукция 				= Строка.Затрата;
			НоваяСтрока.ХарактеристикаПродукции = Строка.ХарактеристикаЗатраты;
			НоваяСтрока.СерияПродукции			= Строка.СерияЗатраты;
		КонецЕсли;
			
		НоваяСтрока.СуммаНал           			= 0;
		НоваяСтрока.ПостояннаяРазница           = Строка.СписатьПостоянныеРазницы;
		НоваяСтрока.ВременнаяРазница           	= Строка.МожноСписать + Строка.ВременнаяРазница;
		Если ДополнительныеСвойства.ИспользоватьРасширеннуюАналитику Тогда
			НоваяСтрока.СуммаБух 				= НоваяСтрока.СуммаНал + НоваяСтрока.ПостояннаяРазница + НоваяСтрока.ВременнаяРазница;
		КонецЕсли;
		
		Если (Строка.МожноСписать + Строка.ВременнаяРазница) <> 0 Тогда
			
			// Сформируем проводку по временной разнице на прямые расходы.
			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период       = КонецМесяца(ПериодРегистрации);
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Если Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) ИЛИ Строка.СчетУчета = ПланыСчетов.Налоговый.РасходыНаПродажу Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.СчетКт       = НовыйСчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат",  Строка.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", Строка.Подразделение);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
			
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = - (Строка.МожноСписать + Строка.ВременнаяРазница);
			
		КонецЕсли;
		
		Если Строка.СписатьПостоянныеРазницы <> 0 Тогда
			
			// Сформируем проводку по постоянной разнице на прямые расходы.
			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период       = КонецМесяца(ПериодРегистрации);
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Если Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) ИЛИ Строка.СчетУчета = ПланыСчетов.Налоговый.РасходыНаПродажу Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.СчетКт       = НовыйСчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат",  Строка.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", Строка.Подразделение);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = - Строка.СписатьПостоянныеРазницы;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ТекСтруктураШапкиДокумента = Новый Структура;
	ТекСтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", 	Ложь);
	ТекСтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", 		Истина);
	ТекСтруктураШапкиДокумента.Вставить("Организация", 					Организация);
	ТекСтруктураШапкиДокумента.Вставить("Ссылка", 						Ссылка);
	ТекСтруктураШапкиДокумента.Вставить("Дата", 						КонецМесяца(ПериодРегистрации));
	
	Если ТаблицаЗатрат.Количество() > 0 Тогда
		ТаблицаЗатрат.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(ТекСтруктураШапкиДокумента, ТаблицаЗатрат);
	КонецЕсли;
	
	Если ТаблицаЗатратПриход.Количество() > 0 Тогда
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(ТекСтруктураШапкиДокумента, ТаблицаЗатратПриход);
	КонецЕсли;
	
КонецПроцедуры // НормированиеРасходовПоПроценту()

// Производит нормирование расходов, для которых норма задана фиксированной суммой на работника
Процедура НормированиеРасходовПоРаботникуОрганизации(СтруктураШапкиДокумента, ВидЗатрат)
	
	// Формируем запрос по затратам в разрезе работников
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода",   НачалоПериода);
	Запрос.УстановитьПараметр("КонецМесяца",    КонецПериода);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Массив = Новый Массив;
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизации);
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидКорСубконто", Массив);
	Запрос.УстановитьПараметр("ВидЗатрат",      ВидЗатрат);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("ВидУчета",    	Перечисления.ВидыУчетаПоПБУ18.НУ);
	
	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОсновногоПроизводства);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходы);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыВспомогательныхПроизводств);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыОбслуживающихПроизводств);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеРасходыПоВыявленномуБраку);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходы);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.РасходыНаПродажу);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщепроизводственныеРасходыРаспределяемые);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КосвенныеОбщехозяйственныеРасходыРаспределяемые);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.ИздержкиОбращенияРаспределяемые);
	СчетаУчета.Добавить(ПланыСчетов.Налоговый.КоммерческиеРасходыРаспределяемые);
	Запрос.УстановитьПараметр("СчетаКосвенныхРасходов",    	СчетаУчета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОбороты.Счет КАК Счет,
	               |	НалоговыйОбороты.Субконто1 КАК СтатьяЗатрат,
	               |	НалоговыйОбороты.КорСубконто1 КАК Работник,
	               |	СУММА(НалоговыйОбороты.СуммаОборотДт) КАК ОборотДт,
	               |	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК ОборотКт,
	               |	СУММА(НалоговыйОбороты.СуммаОборотДт) - СУММА(НалоговыйОбороты.СуммаОборотКт) КАК НеСписано,
	               |	НалоговыйОбороты.КорСубконто2 КАК РБП
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Обороты(
	               |			&НачалоГода,
	               |			&КонецМесяца,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетаКосвенныхРасходов),
	               |			&ВидСубконто,
	               |			Организация = &Организация
	               |				И ВидУчета = &ВидУчета
	               |				И Субконто1.ВидРасходовНУ = &ВидЗатрат,
	               |			,
	               |			&ВидКорСубконто) КАК НалоговыйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговыйОбороты.КорСубконто1,
	               |	НалоговыйОбороты.Субконто1,
	               |	НалоговыйОбороты.Счет,
	               |	НалоговыйОбороты.КорСубконто2";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	ТаблицаЗатратПриход = ТаблицаЗатрат.Скопировать();
	
	ТаблицаРасходов = Новый ТаблицаЗначений;
	ТаблицаРасходов = Результат.Выгрузить();
	ТаблицаРасходов.Колонки.Добавить("МожноСписать");
	СуммаБазы = 0;
	
	// Определяем сумму расхода по нормам (с начала года)
	ТаблицаРасходов.Сортировать("Работник  Возр, НеСписано Возр");
	ТекущийРаботник = Неопределено;
	Для Каждого Расход из ТаблицаРасходов Цикл
		
		Если ЗначениеЗаполнено(Расход.РБП) Тогда
			Норма = ?(Расход.РБП.ДатаНачалаСписания < '20080101', 10000, 15000);
		Иначе
			Норма = 0; 
		КонецЕсли;
		СуммаБазы = СуммаБазы + Норма;
		
		Если ТекущийРаботник = Неопределено Тогда
			ТекущийРаботник = Расход.Работник;
		ИначеЕсли ТекущийРаботник <> Расход.Работник Тогда
			ТекущийРаботник = Расход.Работник;
		КонецЕсли;
		Если Норма > Расход.НеСписано Тогда
			Расход.МожноСписать = Расход.НеСписано;
			Норма = Норма - Расход.МожноСписать;
		Иначе
			Расход.МожноСписать = Норма;
			Норма = 0;
		КонецЕсли;
	КонецЦикла;
	ТаблицаРасходов.Свернуть("СтатьяЗатрат,  Счет ", "НеСписано, МожноСписать");
	ТаблицаРасходов.Колонки.Добавить("СписатьПостоянныеРазницы");
	ТаблицаРасходов.Колонки.Добавить("ОборотКт");
	ТаблицаРасходов.Колонки.Добавить("ОборотКтПР");
	
	// Формируем запрос признанным расходам.
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЗатрат",    ВидЗатрат);
	Запрос.УстановитьПараметр("НачГраница",   Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница",   Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаУчета",   ТаблицаРасходов.ВыгрузитьКолонку("Счет"));
	
	Если ДополнительныеСвойства.ИспользоватьРасширеннуюАналитику Тогда
		Запрос.Текст = ТекстЗапросаПоНормируемымРасходамРасширеннаяАналитика();
	Иначе
		Запрос.Текст = ТекстЗапросаПоНормируемымРасходам();
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Корректируем расходы по нормам с учетом ранее принятых
	Для Каждого Расход из ТаблицаРасходов Цикл
		
		СтруктураПоиска = Новый Структура("СтатьяЗатрат, СчетУчета", Расход.СтатьяЗатрат, Расход.Счет);
		Расход.ОборотКтПР = 0;
		Расход.ОборотКт = 0;
		
		ВсегоМожноСписать = 0;
		
		Выборка.Сбросить();
		Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
			
			Расход.МожноСписать = Расход.МожноСписать - Выборка.СуммаРасход;
			Расход.НеСписано    = Расход.НеСписано    - Выборка.СуммаРасход;
			Расход.ОборотКтПР   = Расход.ОборотКтПР + ?(Выборка.ПостояннаяРазницаРасход = Null, 0, Выборка.ПостояннаяРазницаРасход);
			Расход.ОборотКт     = Расход.ОборотКт   + ?(Выборка.СуммаРасход = Null, 0, Выборка.СуммаРасход);
			
		КонецЦикла;
		
		Расход.СписатьПостоянныеРазницы = Расход.НеСписано - Расход.МожноСписать - Расход.ОборотКтПР;
		
		ВсегоМожноСписать = Расход.МожноСписать;
			
		Выборка.Сбросить();
		Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
			
			// Запишем списываемые затраты в таблицу.	
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.ПодразделениеОрганизации = Выборка.Подразделение;
			НоваяСтрока.СчетЗатратНУ = Выборка.СчетУчета;
			
			Если ДополнительныеСвойства.ИспользоватьРасширеннуюАналитику Тогда
				НоваяСтрока.СчетЗатрат = Выборка.СчетУчетаБУ;
			КонецЕсли;	
				
			НоваяСтрока.СуммаБух = 0;
			
			МожноСписать = Выборка.СуммаПриход - Выборка.СуммаРасход; // Остаток суммы, который может быть списан.
			СуммаСписания = Мин(МожноСписать, ВсегоМожноСписать);
			
			НоваяСтрока.СуммаНал = СуммаСписания;
			НоваяСтрока.ВременнаяРазница = 0;
			НоваяСтрока.ПостояннаяРазница = МожноСписать - СуммаСписания - Выборка.ПостояннаяРазницаРасход;
			
			ВсегоМожноСписать = ВсегоМожноСписать - НоваяСтрока.СуммаНал;
			
		КонецЦикла;
		
		СтрокаЗаписьНормированияРасходов              = ЗаписьНормированияРасходов.Добавить();
		СтрокаЗаписьНормированияРасходов.ВидОперации  = ВидЗатрат;
		СтрокаЗаписьНормированияРасходов.ЗатратыГод   = Расход.НеСписано +Расход.ОборотКт;
		СтрокаЗаписьНормированияРасходов.РасходыГод   = Расход.ОборотКт + Расход.МожноСписать;
		СтрокаЗаписьНормированияРасходов.РазницыГод   = Расход.ОборотКтПР + Расход.СписатьПостоянныеРазницы;
		СтрокаЗаписьНормированияРасходов.СуммаБазы    = СуммаБазы;
		
		Если Расход.МожноСписать > 0 Тогда
			
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период       = КонецМесяца(ПериодРегистрации);
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			
			Если Расход.Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) Тогда
				СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
				
			Иначе
				СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.СчетДт = СчетДт;
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
			
			Проводка.СчетКт       = Расход.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Расход.СтатьяЗатрат);
			
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.НУ;
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = Расход.МожноСписать;
			
			СтрокаЗаписьНормированияРасходов.РасходыМесяц = Расход.МожноСписать;
			
			
		КонецЕсли;
		Если Расход.СписатьПостоянныеРазницы <> 0 И мПоддержкаПБУ18 Тогда
			
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период       = КонецМесяца(ПериодРегистрации);
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Если Расход.Счет.ПринадлежитЭлементу(ПланыСчетов.Налоговый.РасходыНаПродажу) Тогда
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_РасходыНаПродажу;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Налоговый.Продажи_УправленческиеРасходы;
			КонецЕсли;
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
			Проводка.СчетКт       = Расход.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиЗатрат", Расход.СтатьяЗатрат);
			
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Проводка.Содержание   = "Закрытие счетов косвенных расходов";
			Проводка.Сумма        = Расход.СписатьПостоянныеРазницы;
			
			СтрокаЗаписьНормированияРасходов.РазницыМесяц = Расход.СписатьПостоянныеРазницы;
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если ТаблицаЗатрат.Количество() > 0 Тогда
		ТекСтруктураШапкиДокумента = Новый Структура;
		ТекСтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
		ТекСтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", 	Истина);
		ТекСтруктураШапкиДокумента.Вставить("Организация", Организация);
		ТекСтруктураШапкиДокумента.Вставить("Ссылка", Ссылка);
		ТекСтруктураШапкиДокумента.Вставить("Дата", КонецМесяца(ПериодРегистрации));
		
		ТаблицаЗатрат.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
			
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(ТекСтруктураШапкиДокумента, ТаблицаЗатрат);
	КонецЕсли;
	
	Если ТаблицаЗатратПриход.Количество() > 0 Тогда
		ТекСтруктураШапкиДокумента = Новый Структура;
		ТекСтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
		ТекСтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", 	Истина);
		ТекСтруктураШапкиДокумента.Вставить("Организация", Организация);
		ТекСтруктураШапкиДокумента.Вставить("Ссылка", Ссылка);
		ТекСтруктураШапкиДокумента.Вставить("Дата", КонецМесяца(ПериодРегистрации));
		
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(ТекСтруктураШапкиДокумента, ТаблицаЗатратПриход);
	КонецЕсли;

КонецПроцедуры // НормированиеРасходовПоРаботникуОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

//Функция выполняет проверку: выполняет ли документ операции, которые теперь выполняются другими документами:
//- ЗакрытиеСчетовН90иН91
//- СписаниеУбытковПрошлыхЛет
//- ЗакрытиеСчетовНУ
//Проверка производится с помощью анализа движений документа
//Возвращаемое значение - Булево (Истина, если документ выполняет удаленные операции)
Функция Проверить_ДокументВыполняетУдаленныеОперации() Экспорт
	Если НЕ Ссылка.Проведен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НалоговыйОбороты.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Обороты(, , Регистратор, Счет В ИЕРАРХИИ (&Сч_Н99), , , , ) КАК НалоговыйОбороты
	|ГДЕ
	|	НалоговыйОбороты.Регистратор = &ТекСсылка
	|";
	Запрос.УстановитьПараметр("ТекСсылка", Ссылка);
	Запрос.УстановитьПараметр("Сч_Н99", ПланыСчетов.Налоговый.ПрибылиИУбытки);
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
	ТекстСообщения = "Внимание! Документ """ + Ссылка + """  
	|содержит проводки, которые теперь формируются другими регламентными документами: 
	|""Определение финансовых результатов"" и ""Закрытие года""
	|Перепроведение документа приведет к удалению части его движений.
	|Для создания необходимых документов на основании данного документа предусмотрена специальная обработка.
	|Запустить ее можно следующим образом:
	|1) Меню ""Справка - Дополнения к описанию"", нажать кнопку ""Вывести описание обновлений""
	|2) Перейти в раздел ""Новое в версии 1.2.15 - Операции выполняемые после обновления конфигурации""
	|3) Нажать на гиперссылку ""Открыть обработку Обновление документов выполнения регламентных операций""
	|4) Вручную добавить данный документ в список обрабатываемых документов, либо воспользоваться кнопкой ""Заполнить""
	|5) Нажать кнопку ""Выполнить""";
	ОбщегоНазначения.Сообщение(ТекстСообщения, Перечисления.ВидыСообщений.ВажнаяИнформация);
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ПериодРегистрации");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Проверка отмечено ли хотя бы одно действие
	Если не (РаспределениеРасходовПоВидамДеятельности или НормированиеРасходовНаРекламу
		ИЛИ НормированиеРасходовНаДобровольноеСтрахованиеИВозмещениеПроцентов ИЛИ НормированиеПредставительскихРасходов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбраны выполняемые действия",Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок, мУчетнаяПолитикаРегл)
	
	НачалоПериода = НачалоГода(ПериодРегистрации);
	КонецПериода  = КонецМесяца(ПериодРегистрации);
	мНачДата      = НачалоМесяца(ПериодРегистрации);
	мКонДата      = КонецМесяца(ПериодРегистрации);
	мНачГраница = Новый Граница(мНачДата, ВидГраницы.Включая);
	мКонГраница = Новый Граница(мКонДата, ВидГраницы.Включая);
	
	мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ПериодРегистрации, Организация, Истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	СтруктураШапкиДокумента.Вставить("ДиректКостинг", мУчетнаяПолитикаРегл.ДиректКостинг);
	
	мПоддержкаПБУ18 = мУчетнаяПолитикаРегл.ПоддержкаПБУ18;
	
	
	ПроводкиНУ = Движения.Налоговый;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = ПроводкиНУ.Выгрузить();
	
	РаспределениеРасходовПоВидамДеятельности(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если НЕ Отказ Тогда
		ЗаписьНормированияРасходов = Движения.РасчетНормированияРасходов.ВыгрузитьКолонки();
	КонецЕсли;
	
	// Расходы на рекламу
	Если  СтруктураШапкиДокумента.НормированиеРасходовНаРекламу Тогда
		НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые, ОпределитьНормуРасходовПоВыручке(1), 1);		
	КонецЕсли;
	
	// Расходы на добровольное страхование
	Если  СтруктураШапкиДокумента.НормированиеРасходовНаДобровольноеСтрахованиеИВозмещениеПроцентов Тогда
		НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 12, Ложь), 12);
		
		Если СтруктураШапкиДокумента.Дата < Дата("20090101") Тогда
			НормаСтахования = 3;
		Иначе
			НормаСтахования = 6;
		КонецЕсли;
		НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, НормаСтахования, Ложь), НормаСтахования);
		НормированиеРасходовПоРаботникуОрганизации(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности);
        ПроводкиНУ.Записать(Ложь);
    КонецЕсли;
    
	Если  СтруктураШапкиДокумента.НормированиеРасходовНаДобровольноеСтрахованиеИВозмещениеПроцентов Тогда
		
		Если СтруктураШапкиДокумента.Дата >= Дата("20090101") Тогда
			НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 3, Истина), 3);
		КонецЕсли;
	
    КонецЕсли;
	
	// Представительские расходы
    Если  СтруктураШапкиДокумента.НормированиеПредставительскихРасходов Тогда
 		НормированиеРасходовПоПроценту(СтруктураШапкиДокумента, Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы, ОпределитьНормуПоРасходамНаОплатуТруда(СтруктураШапкиДокумента, 4, Истина), 4);
	КонецЕсли;
	
	Для Каждого Движение из ТаблицаДвижений Цикл
		Проводка                         = ПроводкиНУ.Добавить();
		Проводка.Период                  = КонецМесяца(ПериодРегистрации);
		Проводка.Активность              = Истина;
		Проводка.Организация             = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание              = Движение.Содержание;
		Проводка.НомерЖурнала            = "НУ";
		Проводка.СчетДт                  = Движение.СчетДт;
		Проводка.СчетКт                  = Движение.СчетКт;
		Проводка.ВидУчетаДт              = Движение.ВидУчетаДт;
		Проводка.ВидУчетаКт              = Движение.ВидУчетаКт;
		Проводка.СубконтоКт.СтатьиЗатрат = Движение.СубконтоКт1;
		Проводка.Сумма   	             = Движение.Сумма;
		
	КонецЦикла;
	ПроводкиНУ.Записать(Ложь);
	
	Если  СтруктураШапкиДокумента.НормированиеРасходовНаРекламу 
	Или СтруктураШапкиДокумента.НормированиеРасходовНаДобровольноеСтрахованиеИВозмещениеПроцентов 
	Или СтруктураШапкиДокумента.НормированиеПредставительскихРасходов Тогда
		БухгалтерскийУчет.ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
		ЗаписьНормированияРасходов, 
		РегистрыСведений.РасчетНормированияРасходов,
		"Организация,ПериодРасчета,Активность,Регистратор,ВидОперации,СуммаБазы",
		"РасходыМесяц,РазницыМесяц,ЗатратыГод,РасходыГод,РазницыГод");
	КонецЕсли;    	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	Заголовок = "";
	//Проверку следует выполнять до удаления движений
	Если Проверить_ДокументВыполняетУдаленныеОперации() Тогда
		ТекстСообщения =
			"Документ содержит проводки, которые теперь формируются другими регламентными документами.
			|Воспользуйтесь обработкой ""Обновление документов выполнения регламентных операций"", входящей в состав обработок обновления ИБ для версии 1.2.15";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ПериодРегистрации);
	ДополнительныеСвойства.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок, мУчетнаяПолитикаРегл);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПЕЧАТИ ДОКУМЕНТА
 
#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "НормированиеРасходов" Тогда
		БухгалтерскийУчет.ПечатьСправкиРасчета(Отчеты.СправкаРасчетНормированияРасходов, Новый Структура("Организация, Дата", Организация, Дата));
	КонецЕсли;
	
КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа.
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
 Возврат Новый Структура("НормированиеРасходов", "Нормирование расходов");
 
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли
