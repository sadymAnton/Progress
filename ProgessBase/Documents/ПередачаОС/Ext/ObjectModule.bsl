Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем ТабЗатрат;
Перем УчетнаяПолитикаБух;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
Функция СрокЭксплуатацииСтрокой(ДатаПередачи,ДатаВвода)

	ВремяРаботы = Год(ДатаПередачи)*12+Месяц(ДатаПередачи) - Год(ДатаВвода)*12- Месяц(ДатаВвода);
	ЛетРаботы	= Цел(ВремяРаботы/12);
	Месяцев		= ВремяРаботы - ЛетРаботы*12;
	Возврат "" + ЛетРаботы + " лет " + Месяцев + " мес.";
	
КонецФункции


// Функция формирует табличный документ с печатной формой ОС-1,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма ОС-1
//
Функция ПечатьОС1(ПечатьПоДаннымУпрУчета = Истина)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаОС.Дата КАК ДатаДок,
	|	ПередачаОС.Номер КАК НомерАкта,
	|	ПередачаОС.Ответственный КАК Ответственный,
	|	ПередачаОС.Организация КАК Организация,
	|	ПередачаОС.Организация.КодПоОКПО КАК СдатчикКодПоОКПО,
	|	ПередачаОС.Организация.НаименованиеПолное КАК НаимСдатчика,
	|	ПередачаОС.Подразделение КАК ПодрСдатчика,
	|	ПередачаОС.Контрагент.НаименованиеПолное КАК ОрганизацияПолучатель,
	|	ПередачаОС.Контрагент КАК Контрагент,
	|	ПередачаОС.Контрагент.КодПоОКПО КАК ПолучательКодПоОКПО,
	|	ПередачаОС.Дата КАК ДатаПередачи,
	|	ПРЕДСТАВЛЕНИЕ(ПередачаОС.ДоговорКонтрагента) КАК ДоговорПередачи,
	|	ПередачаОС.ДоговорКонтрагента.Дата КАК ДатаДоговора,
	|	ПередачаОС.ДоговорКонтрагента.Номер КАК НомерДоговора
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|ГДЕ
	|	ПередачаОС.Ссылка = &Ссылка";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	ВыборкаОС.Следующий();
	
	СведенияОПоставщикеПолучателе = УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоставщикеПолучателе(ВыборкаОС.Организация,ВыборкаОС.Контрагент,ВыборкаОС.ДатаДок);

	Запрос = Новый Запрос();
	
	Если ПечатьПоДаннымУпрУчета тогда
//		
		кВидуУчета			= "управленческому";
		cВидаУчета			= "управленческого";
		кВидуУчетаПеренос	= "управ- ленческому";
		ВалютаПечати = глЗначениеПеременной("ВалютаУправленческогоУчета");
//		
		НазваниеРегистраМестонахождение		 = "МестонахождениеОС";
		НазваниеРегистраПараметрыАмортизации = "ПараметрыАмортизацииОС";
		НазваниеАмортизации 				 = "Амортизация";
		НазваниеАмортизацииЗаМесяц = "АмортизацияЗаМесяц";
		НазваниеСтоимости		   = "Стоимость";	
		УсловиеОрганизацияОС	   = "";
		СоединениеПоСчетам = "";
		СтрокиСчетов	   = "";
	Иначе
//		
		кВидуУчета			= "бухгалтерскому";
		cВидаУчета			= "бухгалтерского";
		кВидуУчетаПеренос	= "бухгал- терскому";
		ВалютаПечати		= глЗначениеПеременной("ВалютаРегламентированногоУчета");
//		
		НазваниеРегистраПараметрыАмортизации = "ПараметрыАмортизацииОСБухгалтерскийУчет";
		НазваниеРегистраМестонахождение		 = "МестонахождениеОСБухгалтерскийУчет";
		НазваниеАмортизации = "АмортизацияБУ";
		НазваниеАмортизацииЗаМесяц = "АмортизацияЗаМесяцБУ";
		НазваниеСтоимости		   = "СтоимостьБУ";	
		УсловиеОрганизацияОС	   = " И ПараметрыАмортизацииОСБухгалтерскийУчет.Организация = &Организация ";
		СтрокиСчетов	   = "	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СубСчет,
							  |	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации,";
		СоединениеПоСчетам = "		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&Дата,
							 |Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОС
							 |		ПО ПередачаОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство";
		Запрос.УстановитьПараметр("Организация",ВыборкаОС.Организация);
		Запрос.УстановитьПараметр("Дата",ВыборкаОС.ДатаДок);
	КонецЕсли;
	
	СтруктураВалютыПечати = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПечати, Дата);
	КурсВалютыПечати	  = СтруктураВалютыПечати.Курс;
	КратностьВалютыПечати = СтруктураВалютыПечати.Кратность;
	
	СтруктураВалютыДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсВалютыДокумента		 = СтруктураВалютыДокумента.Курс;
	КратностьВалютыДокумента = СтруктураВалютыДокумента.Кратность;
	
	Коэф1 = КурсВалютыПечати * КратностьВалютыДокумента;
	
	Если Коэф1<>0 тогда
		КоэффициентПересчетаВалюты = (КурсВалютыДокумента * КратностьВалютыПечати) / (Коэф1);
	Иначе
		КоэффициентПересчетаВалюты = 0;
	КонецЕсли;

	Запрос.УстановитьПараметр("Ссылка",    Ссылка);
	Запрос.УстановитьПараметр("КонДата",   Дата);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты", КоэффициентПересчетаВалюты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаОСОС.НомерСтроки КАК Нс,
	|	ПередачаОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	(ПередачаОСОС."+НазваниеСтоимости+" - ПередачаОСОС."+НазваниеАмортизации+" - ПередачаОСОС."+НазваниеАмортизацииЗаМесяц+") КАК ОстСтоимость,
	|	ПередачаОСОС."+НазваниеАмортизации+" КАК НачАмортизация,
	|	ПередачаОСОС."+НазваниеАмортизации+" КАК Амортизация,
	|	ПередачаОСОС."+НазваниеАмортизацииЗаМесяц+" КАК АмортизацияЗаМесяц,
	|	ПередачаОСОС.Сумма * &КоэффициентПересчетаВалюты  КАК ЦенаПродажи,
	|	ПередачаОСОС.СтавкаНДС,
	|	ПередачаОСОС.СуммаНДС,
	|	ПередачаОСОС.ОсновноеСредство.Код				 КАК ИнвНомерУпр,
	|	ПередачаОСОС.ОсновноеСредство.ГруппаОС			 КАК ГруппаОС,
	|	ПередачаОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	|	ПередачаОСОС.ОсновноеСредство.АмортизационнаяГруппа.Порядок + 1 КАК НомерГруппы,
	|	ПередачаОСОС.ОсновноеСредство.ЗаводскойНомер	 КАК ЗаводскойНомер,
	|	ПередачаОСОС.ОсновноеСредство.ДатаВыпуска		 КАК ГодВыпуска,
	|	ПередачаОСОС.ОсновноеСредство.Изготовитель		 КАК Изготовитель,
	|	ПередачаОСОС.ОсновноеСредство.КодПоОКОФ.Код		 КАК КодОКОФ,
	|	"+СтрокиСчетов+"
	|	МестонахождениеОС.Местонахождение,
	|	"+НазваниеРегистраПараметрыАмортизации+".СрокПолезногоИспользования  КАК СрокПолезнИспПриПеред
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраМестонахождение+".СрезПоследних(&КонДата, ) КАК МестонахождениеОС
	|		ПО ПередачаОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраПараметрыАмортизации+".СрезПоследних(&КонДата, ) КАК "+НазваниеРегистраПараметрыАмортизации+"
	|		ПО ПередачаОСОС.ОсновноеСредство = "+НазваниеРегистраПараметрыАмортизации+".ОсновноеСредство "+УсловиеОрганизацияОС+"
	|		"+СоединениеПоСчетам+"
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПередачаОСОС.НомерСтроки";
	РезультатЗапросаПоОС = Запрос.Выполнить();
	
	Если РезультатЗапросаПоОС.Пустой() тогда
		// скорее всего в табличной части документа нет ни строчки
		// или нет записей в регистре
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаПоОС = РезультатЗапросаПоОС.Выбрать();

	ДокВвода  = Неопределено;
	ДатаВвода = Дата('00000000');
	
	Если ВыборкаПоОС.Количество() = 1 Тогда

		ВыборкаПоОС.Следующий();
		
		ТабДокумент   = Новый ТабличныйДокумент();
		
		Если НЕ(ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
			    ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда

			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1";
			Макет         = ПолучитьОбщийМакет("ОС1");

		Иначе // Здание (сооружение)
			
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1а";
			Макет      = ПолучитьОбщийМакет("ОС1а");

		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
		ОбластьМакета.Параметры.Валюта = ВалютаПечати;
		ОбластьМакета.Параметры.кВидуУчета	 = кВидуУчета;
		ОбластьМакета.Параметры.cВидаУчета	 = cВидаУчета;
		ОбластьМакета.Параметры.НачАмортизация = ВыборкаПоОС.АмортизацияЗаМесяц + ВыборкаПоОС.НачАмортизация;
		
		Если (ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
			 ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда

			ОбластьМакета.Параметры.кВидуУчетаПеренос = кВидуУчетаПеренос;

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		
		Если ПечатьПоДаннымУпрУчета тогда
			ОбластьМакета.Параметры.ИнвНомер = ВыборкаПООС.ИнвНомерУпр;
		Иначе
			ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ВыборкаОС.ДатаДок,Новый Структура("ОсновноеСредство",ВыборкаПоОС.ОсновноеСредство));
			ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
			ОбластьМакета.Параметры.ИнвНомер = ИнвНомерБух;
		КонецЕсли;
		
		СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(ВыборкаПоОС.ОсновноеСредство, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,ПечатьПоДаннымУпрУчета,ВыборкаОС.Организация);
		ДокументВвода    = СтруктПараметров["ИмяДок"];
		ДатаВвода        = СтруктПараметров["Дата"];
		
		СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(ВыборкаПоОС.ОсновноеСредство, Перечисления.СостоянияОС.ПринятоКУчету,ПечатьПоДаннымУпрУчета,ВыборкаОС.Организация);
		ОбластьМакета.Параметры.ДатаПринятия = СтруктПараметров["Дата"];
		ОбластьМакета.Параметры.ДатаВвода	 = ДатаВвода;
		
		Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
			ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.СрокЭкспл = ?(ЗначениеЗаполнено(ДатаВвода), СрокЭксплуатацииСтрокой(Дата,ДатаВвода), "");
		
		ТабДокумент.Вывести(ОбластьМакета);

		Возврат ТабДокумент;

	Иначе // Объектов много - групповая печать.

		ОС1б_Страница1 = Новый ТабличныйДокумент();
		ОС1б_Страница2 = Новый ТабличныйДокумент();
		ОС1б_Страница3 = Новый ТабличныйДокумент();
		ОС1б_Страница4 = Новый ТабличныйДокумент();

		МакетОС1б      = ПолучитьОбщийМакет("ОС1б");
		
		Шапка1ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка1");
		Шапка2ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка2");
		Строка2ОС1б    = МакетОС1б.ПолучитьОбласть("Строка2");
		Строка2ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка2П");
		Подвал2        = МакетОС1б.ПолучитьОбласть("Подвал2");
		Шапка3ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка3");
		Строка3ОС1б    = МакетОС1б.ПолучитьОбласть("Строка3");
		Строка3ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка3П");
		Подвал3        = МакетОС1б.ПолучитьОбласть("Подвал3");
		Шапка4ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка4");

		Шапка1ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка1ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		Шапка1ОС1б.Параметры.кВидуУчета = кВидуУчета;
		Шапка1ОС1б.Параметры.cВидаУчета = cВидаУчета;
		
		Шапка1ОС1б.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		
		ОС1б_Страница1.Вывести(Шапка1ОС1б);

		Шапка2ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Шапка2ОС1б);

		Шапка3ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		Шапка3ОС1б.Параметры.Валюта = ВалютаПечати;
		Шапка3ОС1б.Параметры.кВидуУчета = кВидуУчетаПеренос;
		ОС1б_Страница3.Вывести(Шапка3ОС1б);

		Шапка4ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка4ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		Шапка4ОС1б.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		ОС1б_Страница4.Вывести(Шапка4ОС1б);

		ИтогЦенаПродажи = 0;
		Пока ВыборкаПоОС.Следующий() Цикл

			Строка2ОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		
			Если ПечатьПоДаннымУпрУчета тогда
				Строка2ОС1б.Параметры.ИнвНомер = ВыборкаПоОС.ИнвНомерУпр;
			Иначе
				ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ВыборкаОС.ДатаДок,Новый Структура("ОсновноеСредство",ВыборкаПоОС.ОсновноеСредство));
				ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
				Строка2ОС1б.Параметры.ИнвНомер = ИнвНомерБух;
			КонецЕсли;
			ИтогЦенаПродажи = ИтогЦенаПродажи + ВыборкаПоОС.ЦенаПродажи;
			
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				Строка2ОС1б.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли;

			ОС1б_Страница2.Вывести(Строка2ОС1б);

			Строка3ОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			
			СтруктПараметров = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(ВыборкаПоОС.ОсновноеСредство, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,ПечатьПоДаннымУпрУчета,ВыборкаОС.Организация);
			ДатаВвода        = СтруктПараметров["Дата"];
			Строка3ОС1б.Параметры.СрокЭкспл = ?(ЗначениеЗаполнено(ДатаВвода), СрокЭксплуатацииСтрокой(Дата,ДатаВвода), "");
			Строка3ОС1б.Параметры.НачАмортизация = ВыборкаПоОС.АмортизацияЗаМесяц + ВыборкаПоОС.НачАмортизация;
			ОС1б_Страница3.Вывести(Строка3ОС1б);

		КонецЦикла;

		Строка2ПОС1б.Параметры.Заполнить(ВыборкаОС);
		Строка2ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Строка2ПОС1б);

		Подвал2.Параметры.Заполнить(ВыборкаОС);
		Подвал2.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Подвал2);

		Строка3ПОС1б.Параметры.Заполнить(ВыборкаОС);
		Строка3ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница3.Вывести(Строка3ПОС1б);

		Подвал3.Параметры.Заполнить(ВыборкаОС);
		Подвал3.Параметры.Заполнить(ВыборкаПоОС);
		Подвал3.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		Подвал3.Параметры.ИтогЦенаПродажи = ИтогЦенаПродажи;
		
		ОС1б_Страница3.Вывести(Подвал3);

		УниверсальныеМеханизмы.НапечататьДокумент(ОС1б_Страница4, , , "Форма ОС-1б. Страница 4", Ссылка);
		УниверсальныеМеханизмы.НапечататьДокумент(ОС1б_Страница3, , , "Форма ОС-1б. Страница 3", Ссылка);
		УниверсальныеМеханизмы.НапечататьДокумент(ОС1б_Страница2, , , "Форма ОС-1б. Страница 2", Ссылка);
		УниверсальныеМеханизмы.НапечататьДокумент(ОС1б_Страница1, , , "Форма ОС-1б. Страница 1", Ссылка);

		Возврат Неопределено;

	КонецЕсли;

КонецФункции // ПечатьОС1()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС1упр" тогда
		ТабДокумент = ПечатьОС1();
	ИначеЕсли ИмяМакета = "ОС1бух" тогда
		ТабДокумент = ПечатьОС1(Ложь);
	ИначеЕсли ИмяМакета = "СправкаРасчетВал" тогда

		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли; 
	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;

	СтруктураМакетов.Вставить("ОС1упр","Форма ОС-1 (упр. учет)");
	СтруктураМакетов.Вставить("ОС1бух","Форма ОС-1 (бух. учет)");
	СтруктураМакетов.Вставить( "СправкаРасчетВал", "Справка-расчет ""Рублевая сумма документа в валюте""");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС" .
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;

		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
											СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
											СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
											СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
											СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
											СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
											СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.Стоимость = СуммаБезНДС + НДС;


	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));


	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;

		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
			СтрокаТаблицы.СуммаРегл = Сумма+НДС;

		Иначе
			СтрокаТаблицы.ПроводкаСумма    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НДС, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета, Данные.Кратность);
											 
			СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту((Сумма+НДС), СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета, Данные.Кратность);
								 
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Перем Счет91, Счет90_03;
	
	Счет91 = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	Счет90_03 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	ТаблицаДвижений = новый ТаблицаЗначений();
	
	ТаблицаДвижений.Колонки.Добавить("ТекущаяТаблица");
	
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя"		, Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСчет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоБУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетНДС"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаНДС"				, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		
	КонецЕсли;
	
	ПереименованиеКолонокРезультирующейТаблицы = Новый Структура();
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("Номенклатура", "ОсновноеСредство");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("КоррСчет", "СчетДоходовБУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СчетУчетаНУ", "СчетДоходовНУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СуммаНДС", "НДС");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы);
	
	ТаблицаДвижений.Колонки.ЗаказПокупателя.Имя = "Сделка";
	
	НаборТаблиц = Новый Массив;
	НаборТаблиц.Добавить(ТаблицаПоТоварам);
	
	Для каждого ТекущаяТаблица Из НаборТаблиц Цикл
		
		Для каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
			СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
			
			СтрокаНовойТаблицы.СчетНДС = ?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаТаблицы.СчетРасходовБУ, Счет91),СтрокаТаблицы.СчетРасходовБУ, Счет90_03);
			
			СтрокаНовойТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			СтрокаНовойТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
			
			КоррСчет = СтрокаНовойТаблицы.СчетДоходовБУ;
			
			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				//начало изменений БП 07 
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.ПодразделениеОрганизации)) тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаТаблицы.ПодразделениеОрганизации;
				//конец изменений БП 07	 
				Конецесли;
			КонецЦикла; 
			
			КоррСчет = СтрокаНовойТаблицы.СчетНДС;
			
			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) ТОгда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				//начало изменений БП 07 
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТаблицы.ПодразделениеОрганизации)) тогда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаТаблицы.ПодразделениеОрганизации;
				//конец изменений БП 07	 
				Конецесли;
			КонецЦикла; 
			
			Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
				КоррСчет = СтрокаНовойТаблицы.СчетДоходовНУ;
				Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
					ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
					Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
					ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.ОсновноеСредство)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.ОсновноеСредство;
					Конецесли;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы, Истина);
	
	ЧисловыеКолонкиСтрокой = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура = новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой = "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Не ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	Иначе //.ПоСчетам или .ПоЗаказам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	Возврат ТаблицаДвижений;
	
КонецФункции

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете тогда
		
		СтруктураОбязательныхПолей.Вставить("Событие");
		
	КонецЕсли;

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
	
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");

		КонецЕсли;
		СтруктураОбязательныхПолей.Вставить("СобытиеРегл");
		СтруктураОбязательныхПолей.Вставить("Организация");

	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
		|Заполните поле ""Заказ покупателя""!");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
							  Перечисления.ВидыСобытийОС.Передача,
							  ПредставлениеРеквизита,Отказ);

	//Если СтруктураШапкиДокумента.Событие.УдалитьВидСостоянияОС <> Перечисления.УдалитьВидыСостоянийОС.СнятоСУчета Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Вид состояния, в которое переводится ОС должен быть <Снято с учета>!", Отказ, Заголовок);
	//КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;

	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	УправлениеВнеоборотнымиАктивами.ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.Передача,
								  ПредставлениеРеквизита,Отказ);

	//Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле Организация", Отказ,Заголовок);
	//КонецЕсли;

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		СтруктураОбязательныхПолей.Вставить("СчетДоходовБУ");
		СтруктураОбязательныхПолей.Вставить("СчетРасходовБУ");

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("СчетДоходовНУ");
			СтруктураОбязательныхПолей.Вставить("СчетРасходовНУ");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОС";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма");

	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет проверки,которые нужны только для регл. учета
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете  Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""ОС"": ";

		Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет доходов (БУ)""!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетРасходовБУ) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет Расходов (БУ)""!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовНУ) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет доходов (НУ)""!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетРасходовНУ) Тогда
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет расходов (НУ)""!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
							  Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	                       ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
						   Отказ, Заголовок);
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
													Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента,
	                        ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаПоВзаиморасчетам,
							Отказ, Заголовок);

	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	// Если "без перехода права собственности", то по регл.учету движений быть не должно.
	// Упр.учет - без изменений.
	Если СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации Тогда
		ОтражатьВБухгалтерскомУчетеТек = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчетеТек     = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете = Ложь;
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете = Ложь;
	КонецЕсли;
	
	//Бирюков  записи по системе взаиморасчетов все-таки нужно делать в случае проведения по бухучету
	ОтражатьВУправленческомУчетеТек 		  = ОтражатьВУправленческомУчете;
	ВестиПоДокументамРасчетовСКонтрагентомТек = СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
		ОтражатьВУправленческомУчете = Истина;
		//начало изменений 
		//СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом = Истина;
		//конец изменений 
	КонецЕсли;
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
	// восстановим состояние флажков
	Если СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации Тогда
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчетеТек;
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете     = ОтражатьВНалоговомУчетеТек;
	КонецЕсли;
	//Бирюков восстановим состояние по упручету
	ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчетеТек;
	СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом = ВестиПоДокументамРасчетовСКонтрагентомТек;
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
							  Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		//Бирюков  записи по системе взаиморасчетов все-таки нужно делать в случае проведения по бухучету
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
			                      мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
			                      ВидДвиженияНакопления.Приход, Отказ, Заголовок);
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		Возврат;
	КонецЕсли;
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Возврат;
	КонецЕсли;

	// записи по системе взаиморасчетов
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		                      мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		                      ВидДвиженияНакопления.Приход, Отказ, Заголовок);

	// если ранее подготовка к передачи не была проведена
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда

		// начисленную амортизацию за месяц спишем на затраты
		АмортизацияОС         = Движения.СтоимостьОС;
		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация .Очистить();

		// подготовим таблицу с данными по амортизации для списания амортизации по
		// направлениям затрат
		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));

		Для каждого СтрокаОС из ТаблицаПоТоварам Цикл

			Если СтрокаОС.АмортизацияЗаМесяцУУ > 0 Тогда

				НоваяСтрока                        = ТабАмортизации.Добавить();
				НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяцУУ;
				НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
				ТекНаправление                     = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_УУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_УУ);
				
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				Движение.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
				Движение.Амортизация               = СтрокаОС.АмортизацияЗаМесяцУУ;
				Движение.Стоимость                 = 0;
			КонецЕсли;

		КонецЦикла;

		// вызов процедуры списания амортизации по направлениям
		СтруктураШапкиДокументаБезВалютыДокумента = Новый Структура;
		Для каждого ТекКлюч Из СтруктураШапкиДокумента Цикл

			Если ТекКлюч.Ключ <> "ВалютаДокумента" Тогда
				СтруктураШапкиДокументаБезВалютыДокумента.Вставить(ТекКлюч.Ключ,ТекКлюч.Значение);
			КонецЕсли;

		КонецЦикла;

		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокументаБезВалютыДокумента);
		
		АмортизацияОС.мПериод          = Дата;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОС.ВыполнитьПриход();

	КонецЕсли;

	// движения регистров по системе ОС
	СобытиеОС               = Движения.СобытияОС;
	СостояниеОС             = Движения.СостоянияОС;
	АмортизацияОС           = Движения.СтоимостьОС;
	НачислениеАмортизацииОС = Движения.НачислениеАмортизацииОС;

	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	ТаблицаДвиженийАмортизация .Очистить();
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;
		// Движения по регистру НачислениеАмортизацииОС
		Движение = НачислениеАмортизацииОС.Добавить();
		Движение.Период                  = Дата;
		Движение.ОсновноеСредство        = ТекОС;
		Движение.НачислятьАмортизацию    = Ложь;
		Движение.НачислятьАмортизациюВТекущемМесяце = Ложь;

		// Движения по регистру CобытияОС
		Движение = СобытиеОС.Добавить();
		Движение.Период            = Дата;
		Движение.ОсновноеСредство  = ТекОС;
		Движение.Событие           = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента = Метаданные().Представление();
		Движение.НомерДокумента    = Номер;
		
		// Движения по регистру СостоянияОС
		Движение = СостояниеОС.Добавить();
		Движение.Период                  = Дата;
		Движение.ОсновноеСредство        = ТекОС;
		Движение.Состояние               = Перечисления.СостоянияОС.СнятоСУчета;
		Движение.ДатаСостояния			 = Дата;

		// Движения по регистру СтоимостьОС
		Движение = ТаблицаДвиженийАмортизация.Добавить();
		Движение.ОсновноеСредство        = ТекОС;
		Движение.Амортизация             = СтрокаТЧ.АмортизацияУУ+СтрокаТЧ.АмортизацияЗаМесяцУУ;
		Движение.Стоимость               = СтрокаТЧ.СтоимостьУУ;

	КонецЦикла;

	АмортизацияОС.мПериод          = Дата;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьРасход();

КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаПоДокументамРасчетовСКонтрагентом,
							  Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	// Проводки по системе взаиморасчетов
	ПроводкиБУ = Движения.Хозрасчетный;
	//Вадим
	Проверка83ИСозданиеПроводок(ПроводкиБУ);
	//ВадимКонец
	ПроводкиНУ = Движения.Налоговый;

	ДатаДока   = Дата;

	ОшибкаПолученияУчетнойПолитики = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		УчетнаяПолитика = Неопределено;
	Иначе
		УчетнаяПолитика = УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка"   , ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Кратность", СтруктураШапкиДокумента.КратностьДокумента);
	Запрос.УстановитьПараметр("Курс"     , СтруктураШапкиДокумента.КурсДокумента);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОсновноеСредство,
	//начало изменений БП 07             
	| ПодразделениеОрганизации,
	//конец изменений БП 07	 
	|	СчетДоходовБУ,
	|	СубконтоБУ,
	|	СчетРасходовБУ,
	|	СчетДоходовНУ,
	|	СубконтоНУ,
	//начало изменений
	|	СубконтоБУРасходов,
	|	СубконтоНУРасходов,
	//конец изменений 
	|	ОсновноеСредство КАК ОсновноеСредство,
	|	СтавкаНДС КАК СтавкаНДС,
	|	СУММА(Сумма * &Курс / &Кратность) КАК Сумма,
	|	СУММА(СуммаНДС * &Курс / &Кратность) КАК СуммаНДС
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОС
	|
	|ГДЕ
	|	Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновноеСредство,
	//начало изменений БП 07 
	|ПодразделениеОрганизации,
	//конец изменений БП 07	 
	|	СтавкаНДС,
	|	ОсновноеСредство,
	|	СчетДоходовБУ,
	|	СчетРасходовБУ,
	|	СубконтоБУ,
	|	СчетДоходовНУ,
	//начало изменений
	|	СубконтоБУРасходов,
	|	СубконтоНУРасходов,
	//конец изменений 
	|	СубконтоНУ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС";
	ВыборкаПоГруппам = Запрос.Выполнить().Выгрузить();
	ВыборкаПоТоварамБУ = ВыборкаПоГруппам.Скопировать();
	ВыборкаПоТоварамНУ = ВыборкаПоГруппам.Скопировать();
	ВыборкаПоГруппам.Свернуть("СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СтавкаНДС", "Сумма,СуммаНДС");
	//начало изменений 
	//ВыборкаПоТоварамБУ.Свернуть("ПодразделениеОрганизации,СчетДоходовБУ, СчетРасходовБУ,СубконтоБУ, СтавкаНДС", "Сумма,СуммаНДС");
	//ВыборкаПоТоварамНУ.Свернуть("СчетДоходовНУ,СубконтоНУ,ОсновноеСредство", "Сумма,СуммаНДС");
	ВыборкаПоТоварамБУ.Свернуть("ПодразделениеОрганизации,СчетДоходовБУ, СчетРасходовБУ,СубконтоБУ,СубконтоБУРасходов, СтавкаНДС", "Сумма,СуммаНДС");
	ВыборкаПоТоварамНУ.Свернуть("СчетДоходовНУ,СубконтоНУ,ОсновноеСредство,СубконтоНУРасходов", "Сумма,СуммаНДС");
	//конец изменений 
	

	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	Для каждого СтрокаТЧ Из ВыборкаПоТоварамБУ Цикл

		// Выручка
		Если НЕ СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = ТекОрганизация;
			Проводка.Сумма       = ?(СтруктураШапкиДокумента.СуммаВключаетНДС, 
			СтрокаТЧ.Сумма, СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС);
			
			Проводка.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = Проводка.Сумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
				
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТЧ.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоБУ);
			//начало изменений БП 07 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"ПодразделениеОрганизации", СтрокаТЧ.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,"Подразделения", СтрокаТЧ.ПодразделениеОрганизации);
			//конец изменений БП 07	 
			
		КонецЕсли;
		
		// НДС
		Если СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации И НЕ СтруктураШапкиДокумента.НачислятьНДСНедвижимости Тогда
			Продолжить;
			// НДС будет начислен документом "Реализация отгруженных товаров"
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТЧ.СуммаНДС > 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание	 = "Передача ОС";
			
			Если СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации И СтруктураШапкиДокумента.НачислятьНДСНедвижимости Тогда
				Проводка.СчетДт  = ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные",  СтруктураШапкиДокумента.Ссылка);
			Иначе    
				Проводка.СчетДт = СтрокаТЧ.СчетРасходовБУ;
				//начало изменений 
				//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоБУ);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоБУРасходов);
				//конец изменений 
				//начало изменений БП 07 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"ПодразделениеОрганизации", СтрокаТЧ.ПодразделениеОрганизации);
				//конец изменений БП 07	 
			КонецЕсли;
			
			Если УчетнаяПолитика = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
				Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
				
			Иначе
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", Ссылка);
				
			КонецЕсли;
			
			Проводка.Сумма = СтрокаТЧ.СуммаНДС;
			
		КонецЕсли;
		
	КонецЦикла;                           
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И 
		(НЕ СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации ИЛИ
		СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации И ДатаДока >= Дата('20130101')) Тогда

		Для каждого СтрокаТЧ из ВыборкаПоТоварамНУ Цикл

			// Налоговый учет
			// Дт ПВ Кт 91.01 по НУ при снятом флажке "Право собственности переходит просле гос.регистрации" или при установленном с 01.01.13
			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;

			Проводка.СчетДт      = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			Проводка.СубконтоДт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
			Проводка.СубконтоДт.Контрагенты                = СтруктураШапкиДокумента.Контрагент;
			Проводка.СубконтоДт.Договоры                   = СтруктураШапкиДокумента.ДоговорКонтрагента;

			Проводка.СчетКт      = СтрокаТЧ.СчетДоходовНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоНУ);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТЧ.ОсновноеСредство);

			Проводка.Сумма      = ?(СтруктураШапкиДокумента.СуммаВключаетНДС, 
									СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС, СтрокаТЧ.Сумма);
									
			// Дт ПВ Кт 91.01 по ВР при установленном флажке с 01.01.13
			Если СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации И СтруктураШапкиДокумента.ПоддержкаПБУ18 И ДатаДока >= Дата('20130101') Тогда
				
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				
				Проводка.СчетДт      = ПланыСчетов.Налоговый.ЗадолженностьПоРасчетамЗаНедвижимость;
				Проводка.СубконтоДт.Контрагенты                = СтруктураШапкиДокумента.Контрагент;
				Проводка.СубконтоДт.Договоры                   = СтруктураШапкиДокумента.ДоговорКонтрагента;
				
				Проводка.СчетКт      = СтрокаТЧ.СчетДоходовНУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТЧ.ОсновноеСредство);
				
				Проводка.Сумма      = - ?(СтруктураШапкиДокумента.СуммаВключаетНДС, 
				СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС, СтрокаТЧ.Сумма);
				Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
				Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;
			КонецЕсли;
									
		КонецЦикла;

	КонецЕсли;

	// Движения по взаиморасчетам
	Если НЕ СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации Тогда
		
		СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок,, ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента);
		Если СтруктураПараметровЗачетАванса = Ложь Тогда
			Отказ = Истина;
			СуммаАванса = 0;
		Иначе
			ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметровЗачетАванса, СтруктураШапкиДокумента, ТаблицаПоТоварам);
			СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса,
				ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации);
		КонецЕсли;
		
		Если СуммаАванса > 0 тогда
			// При реализации со ставкой 0% необходимо отметить соотв. запись 
			// в НДСПокупки событием "Предполагается НДС 0%"
			
		КонецЕслИ;
		
		Если НЕ ((СтруктураПараметровЗачетАванса = Ложь) ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) Тогда
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
			Конецесли;
			
			БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса,
				мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
		Конецесли;
			
	Конецесли;

	// Движения по регистрам учета ОС и формирование проводок по начислению амортизации и списанию стоимости
	
	// получим данные о счетах учета и начисления амортизации по ОС
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация",  ТекОрганизация);
	Запрос.УстановитьПараметр("ТекДата",         ДатаДока);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоТоварам);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство                                              КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство          КАК ОС_БУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета                 КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета                     КАК СчетУчетаНУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство              КАК ОС_НУ,
	|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации     КАК СчетНачисленияАмортизацииНУ
	|ИЗ
	|	ОсновныеСредства
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&ТекДата, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	|	ПО ОсновныеСредства.ОсновноеСредство = СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|";
	ТаблицаСчетов  = Запрос.Выполнить().Выгрузить();

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
		
		// если ранее подготовка к передачи не была проведена
		Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда
			// начисленную амортизацию за месяц спишем на затраты
			// подготовим таблицу с данными по амортизации для списания амортизации по 
			// направлениям затрат
			АмортизацияОС = Движения.СтоимостьОСБухгалтерскийУчет;
			ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
			ТаблицаДвиженийАмортизация.Очистить();
			
			ТабАмортизации = Новый ТаблицаЗначений;
			ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
			ТабАмортизации.Колонки.Добавить("ОбъектУчета",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
			ТабАмортизации.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
			ТабАмортизации.Колонки.Добавить("СчетАмортизации");
			ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
			ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
			
			Для Каждого СтрокаОС из ТаблицаПоТоварам Цикл
				
				Если НЕ (СтрокаОС.АмортизацияЗаМесяцБУ = 0) Тогда
					
					НоваяСтрока = ТабАмортизации.Добавить();
					НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцБУ;
					НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
					НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
					
					ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
					НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_БУ);
					
					СчетАмортизации = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
					НоваяСтрока.СчетАмортизации = ?(СчетАмортизации = Неопределено, Неопределено,СчетАмортизации.СчетНачисленияАмортизацииБУ);
					
					Движение = ТаблицаДвиженийАмортизация.Добавить();
					Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
					Движение.Организация      = ТекОрганизация;
					Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяцБУ;
					Движение.Стоимость        = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// вызов процедуры списания амортизации по направлениям
			ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух","ОС");
			ТабАмортизацииБУ = ТабАмортизации;
			АмортизацияОС.мПериод          = Дата;
			АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
			
			Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();
			
		КонецЕсли;
		
		СобытиеОС             = Движения.СобытияОСОрганизаций;
		СостояниеОС           = Движения.СостоянияОСОрганизаций;
		АмортизацияОС         = Движения.СтоимостьОСБухгалтерскийУчет;
		НачислениеАмортизации = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
		
		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация.Очистить();
		
		Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
			
			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			Если НЕ (СтрокаТЧ.СтоимостьБУ = 0) Тогда
				
				// Движения по регистру НачислениеАмортизации
				Движение = НачислениеАмортизации.Добавить();
				Движение.Период               = Дата;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.НачислятьАмортизацию = Ложь;
				
				// Движения по регистру СобытияОСОрганизаций
				Движение = СобытиеОС.Добавить();
				Движение.Период               = Дата;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
				Движение.НазваниеДокумента 	  = Метаданные().Представление();
				Движение.НомерДокумента		  = Номер;
				
				// Движения по регистру СостоянияОСОрганизаций
				Движение = СостояниеОС.Добавить();
				Движение.Период               = Дата;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
				Движение.ДатаСостояния		  = Дата;
				
				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				Движение.ОсновноеСредство      = ТекОС;
				Движение.Организация           = ТекОрганизация;
				Движение.Амортизация           = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
				Движение.Стоимость             = СтрокаТЧ.СтоимостьБУ;
				Движение.ВидОперации           = Перечисления.ВидыСобытийОС.Передача;
				
				СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС, "ОС_БУ");
				Если СтрокаТЗ <> Неопределено Тогда
					СчетУчетаСтоимости   = СтрокаТЗ.СчетУчетаБУ;
					СчетУчетаАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииБУ;
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("Основное средство " + ТекОс.Наименование +
					" не отражалось в бух. учете в организации " + ТекОрганизация, Отказ); 	
					Возврат;
				КонецЕсли;
				
				// если ранее подготовка к передачи не была проведена
				Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда
					
					// списание амортизации Д 02.01 К 01.09
					СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
					Если НЕ (СуммаПроводки = 0) Тогда
						
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период      = Дата;
						Проводка.Активность  = Истина;
						Проводка.Организация = ТекОрганизация;
						Проводка.Содержание  = "Передача ОС";
						Проводка.СчетДт      = СчетУчетаАмортизации;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
						Проводка.Сумма       = СуммаПроводки;
						
					КонецЕсли;
					
					// списание балансовой стоимости Д 01.09 К 01.01
					СуммаПроводки = СтрокаТЧ.СтоимостьБУ;
					Если НЕ (СуммаПроводки = 0) Тогда
						
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период      = Дата;
						Проводка.Организация = ТекОрганизация;
						Проводка.Содержание  = "Передача ОС";
						Проводка.Сумма       = СтрокаТЧ.СтоимостьБУ;
						
						Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
						
						Проводка.СчетКт      = СчетУчетаСтоимости;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
						
					КонецЕсли;
					
				КонецЕсли;
				
				СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
				
				Если НЕ (СуммаПроводки = 0) Тогда
					Если СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации Тогда
						// перенос остаточной стоимости Дт 45.04 Кт 01.09
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период      = Дата;
						Проводка.Организация = ТекОрганизация;
						Проводка.Содержание  = "Передача ОС";
						Проводка.Сумма       = СуммаПроводки;
						
						Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
                		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
						
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
						
					Иначе
						// списание остаточной стоимости Дт 91.02.х Кт 01.09
						Проводка = ПроводкиБУ.Добавить();
						
						Проводка.Период      = Дата;
						Проводка.Организация = ТекОрганизация;
						Проводка.Содержание  = "Передача ОС";
						Проводка.Сумма       = СуммаПроводки;
						
						Проводка.СчетДт      = СтрокаТЧ.СчетРасходовБУ;
						Если Проводка.СчетДт.ВидыСубконто.Количество() > 0
							//начало изменений 
							И Проводка.СчетДт.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = ТипЗнч(СтрокаТЧ.СубконтоБУРасходов) Тогда
							//конец изменений 
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтрокаТЧ.СубконтоБУРасходов);
						КонецЕсли;
						//начало изменений БП 07 
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,"ПодразделениеОрганизации", СтрокаТЧ.ПодразделениеОрганизации);
						//конец изменений БП 07	 

						
						Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		АмортизацияОС.мПериод          = Дата;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьРасход();
		
		Если Не Отказ Тогда
			ПроводкиБУ.Записать(Ложь);
		КонецЕсли; 
		
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 

		// если ранее подготовка к передачи не была проведена
		Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда

			АмортизацияОСНУ = Движения.СтоимостьОСНалоговыйУчет;
			ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
			ТаблицаДвиженийАмортизацияНУ .Очистить();
			
			ТаблицаДвиженийСтоимостьНУ = ТаблицаДвиженийАмортизацияНУ.Скопировать();

			// подготовим таблицу с данными по амортизации для списания амортизации по 
			// направлениям затрат
			ТабАмортизации = Новый ТаблицаЗначений;
			ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
			ТабАмортизации.Колонки.Добавить("ОбъектУчета",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
			ТабАмортизации.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
			ТабАмортизации.Колонки.Добавить("СчетУчетаНУ");
			ТабАмортизации.Колонки.Добавить("СчетАмортизации");
			ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
			ТабАмортизации.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(16)));
			ТабАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

			Для Каждого СтрокаОС Из ТаблицаПоТоварам Цикл

				Если НЕ (СтрокаОС.АмортизацияЗаМесяцНУ = 0) Тогда

					НоваяСтрока = ТабАмортизации.Добавить();

					ТекНаправление                     = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство, "ОС_НУ");
					СчетАмортизации                    = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство, "ОС_НУ");

					НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяцНУ;
					НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
					НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление  = Неопределено, Неопределено, ТекНаправление.Направление_НУ);
					НоваяСтрока.СчетАмортизацииНУ      = ?(СчетАмортизации = Неопределено, Неопределено, СчетАмортизации.СчетНачисленияАмортизацииНУ);
					НоваяСтрока.СчетУчетаНУ            = ?(СчетАмортизации = Неопределено, Неопределено, СчетАмортизации.СчетУчетаНУ);
					НоваяСтрока.ИмяСубконто            = "ОсновныеСредства";
				
					Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();

					Движение.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
					Движение.Организация               = ТекОрганизация;
					Движение.Амортизация               = СтрокаОС.АмортизацияЗаМесяцНУ;
					Движение.Стоимость                 = 0;
					//Движение.ВидОперации               = Перечисления.ВидыСобытийОС.НачислениеАмортизации;
					
					НоваяСтрока.СуммаКапитальныхВложенийВключаемыхВРасходы = СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
						
				КонецЕсли;

			КонецЦикла;
			
			// Включение амортизационной премии в состав расходов.
			ТабКапитальныхВложений = ТабАмортизации.Скопировать();
			ТабКапитальныхВложений.Колонки.Добавить("СуммаБУ",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
			ТабКапитальныхВложений.Колонки.Добавить("СуммаПР",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
			ТабКапитальныхВложений.Колонки.Удалить("Сумма");
			
			СписокОС = ТаблицаПоТоварам.ВыгрузитьКолонку("ОсновноеСредство"); 
			
			НалоговыйУчет.РасчетАмортизационнойПремии(ЭтотОбъект, СтруктураШапкиДокумента, СписокОС, ТабКапитальныхВложений, ПроводкиНУ, ТаблицаДвиженийСтоимостьНУ, Отказ, Заголовок);			
			
			АмортизацияОСНУ.мПериод          = ДатаДока;
			АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийСтоимостьНУ;
			Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();
			
			//вызов процедуры списания амортизации по направлениям
			СтруктураШапкиДокументаБезВалютыДокумента = Новый Структура;
			Для Каждого ТекКлюч Из СтруктураШапкиДокумента Цикл
				Если ТекКлюч.Ключ <> "ВалютаДокумента" Тогда
					СтруктураШапкиДокументаБезВалютыДокумента.Вставить(ТекКлюч.Ключ, ТекКлюч.Значение);
				КонецЕсли;
			КонецЦикла;

			Если  СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				НалоговыйУчет.РасчетРазницПоАмортизации(СтруктураШапкиДокумента, "ОС", ТаблицаПоТоварам.ВыгрузитьКолонку("ОсновноеСредство"), ТабАмортизации, ТабЗатрат, ТабАмортизацииБУ);
				
			КонецЕсли;
			
			ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокументаБезВалютыДокумента,"Нал","ОС");
            ПроводкиНУ.Записать(Ложь);
			
			АмортизацияОСНУ.мПериод          = Дата;
			АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
			Движения.СтоимостьОСНалоговыйУчет.ВыполнитьПриход();

		КонецЕсли;

		АмортизацияОСНУ         = Движения.СтоимостьОСНалоговыйУчет;
		НачислениеАмортизацииНУ = Движения.НачислениеАмортизацииОСНалоговыйУчет;

		ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
		ТаблицаДвиженийАмортизацияНУ.Очистить();

		Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

			ТекОС = СтрокаТЧ.ОсновноеСредство;
			
			СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС, "ОС_НУ");
			Если СтрокаТЗ <> Неопределено Тогда
				СчетУчетаСтоимости   = СтрокаТЗ.СчетУчетаНУ;
				СчетУчетаАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииНУ;
			КонецЕсли;
			
			Если НЕ (СтрокаТЧ.СтоимостьНУ = 0) Тогда
			
				// Движения по регистру НачислениеАмортизацииОС
				Движение = НачислениеАмортизацииНУ.Добавить();
				Движение.Период               = Дата;
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.НачислятьАмортизацию = Ложь;

				// Движения по регистру СтоимостьОС
				Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();
				Движение.ОсновноеСредство     = ТекОС;
				Движение.Организация          = ТекОрганизация;
				Движение.Амортизация          = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
				Движение.Стоимость            = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
				Движение.ВидОперации          = Перечисления.ВидыСобытийОС.Передача;
				
			КонецЕсли;

			// если ранее подготовка к передачи не была проведена
			Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда

				// списание амортизации Д 02.01 К 01.09
				СуммаПроводки = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = Дата;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Передача ОС";
					Проводка.Сумма       = СуммаПроводки;

					Проводка.СчетДт      = СчетУчетаАмортизации;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

				КонецЕсли;

				// списание балансовой стоимости Д 01.09 К 01.01
				СуммаПроводки = СтрокаТЧ.СтоимостьНУ;
				Если НЕ (СуммаПроводки = 0) Тогда

					Проводка = ПроводкиНУ.Добавить();

					Проводка.Период      = Дата;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Передача ОС";
					Проводка.Сумма       = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;

					Проводка.СчетДт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

					Проводка.СчетКт      = СчетУчетаСтоимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

				КонецЕсли;

			КонецЕсли;

			// списание остаточной стоимости Д 91.01 К 01.09
			СуммаПроводки = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.АмортизацияНУ - СтрокаТЧ.АмортизацияЗаМесяцНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;

			Если НЕ (СуммаПроводки = 0) Тогда
				
				// Дт 45 Кт 01.09 
				Если СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации Тогда
					
					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период      = Дата;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Передача ОС";
					Проводка.Сумма       = СуммаПроводки;
					
					Проводка.СчетДт      = ПланыСчетов.Налоговый.ПереданныеОбъектыНедвижимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
				КонецЕсли;
				
				УсловияНедвижимостиС2013Года = СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации И ДатаДока >= Дата('20130101');
				// Дт 91.02 Кт 01.09 при снятом флажке "Право собственности переходит просле гос.регистрации"
				// Дт 91.02 Кт 45 при установленном флажке с 01.01.13
				Если НЕ СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации Или УсловияНедвижимостиС2013Года Тогда
					
					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период      = Дата;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Передача ОС";
					Проводка.Сумма       = СуммаПроводки;
					
					Проводка.СчетДт = СтрокаТЧ.СчетРасходовНУ;
					//начало изменений 
					Если Проводка.СчетДт.ВидыСубконто.Количество() > 0
						И Проводка.СчетДт.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = ТипЗнч(СтрокаТЧ.СубконтоНУРасходов) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоНУРасходов);
					КонецЕсли;
					//конец изменений 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Если УсловияНедвижимостиС2013Года Тогда
						Проводка.СчетКт      = ПланыСчетов.Налоговый.ПереданныеОбъектыНедвижимости;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					Иначе
						Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
					КонецЕсли;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					
				КонецЕсли;

				// Дт 91.02 Кт 45 по ВР при установленном флажке с 01.01.13
				Если СтруктураШапкиДокумента.ПоддержкаПБУ18 И УсловияНедвижимостиС2013Года Тогда
					
					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период      = Дата;
					Проводка.Организация = ТекОрганизация;
					Проводка.Содержание  = "Передача ОС";
					Проводка.Сумма       = -СуммаПроводки;
					
					Проводка.СчетДт = СтрокаТЧ.СчетРасходовНУ;
					//начало изменений 
					Если Проводка.СчетДт.ВидыСубконто.Количество() > 0
						И Проводка.СчетДт.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = ТипЗнч(СтрокаТЧ.СубконтоНУРасходов) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоНУРасходов);
					КонецЕсли;
					//конец изменений 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
					
					Проводка.СчетКт      = ПланыСчетов.Налоговый.ПереданныеОбъектыНедвижимости;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;

		АмортизацияОСНУ.мПериод          = Дата;
		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();

		ОтразитьВосстановлениеАмортизационнойПремии(ТаблицаПоТоварам, СтруктураШапкиДокумента, ПроводкиНУ);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И  СтруктураШапкиДокумента.ПоддержкаПБУ18 И Не Отказ тогда	
		
		ДвиженияПоРазницам(СтруктураШапкиДокумента, ТаблицаПоТоварам.ВыгрузитьКолонку("ОсновноеСредство"), ТаблицаСчетов);
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не Отказ Тогда
		ПроводкиБУ.Записать(Ложь);
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И Не Отказ тогда
		ПроводкиНУ.Записать(Ложь);
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

Процедура ДвиженияПоРазницам(СтруктураШапкиДокумента, СписокОС, ТаблицаСчетов)

	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ДокПодготовкаКПередачеОС) Тогда

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1 КАК Субконто1,
	               |	НалоговыйОстатки.СуммаОстатокКт КАК Сумма02ПР,
	               |	0 КАК Сумма02ВР,
	               |	0 КАК Сумма01ПР,
	               |	0 КАК Сумма01ВР,
	               |	0 КАК Сумма01
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01),
	               |			&ВидСубконто,
	               |			ВидУчета = &ВидУчетаПР
	               |				И Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстатокКт,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01),
	               |			&ВидСубконто,
	               |			ВидУчета = &ВидУчетаВР
	               |				И Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстатокДт,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации),
	               |			&ВидСубконто,
	               |			ВидУчета = &ВидУчетаПР
	               |				И Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	0,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстатокДт,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации),
	               |			&ВидСубконто,
	               |			ВидУчета = &ВидУчетаВР
	               |				И Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговыйОстатки.Субконто1,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	НалоговыйОстатки.СуммаОстатокДт
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |			&КонДата,
	               |			Счет В ИЕРАРХИИ (&ХозрасчетныйОСвОрганизации),
	               |			&ВидСубконто,
	               |			Организация = &Организация
	               |				И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	               |ИТОГИ
	               |	СУММА(Сумма02ПР),
	               |	СУММА(Сумма02ВР),
	               |	СУММА(Сумма01ПР),
	               |	СУММА(Сумма01ВР),
	               |	СУММА(Сумма01)
	               |ПО
	               |	Субконто1";
	
	Запрос.УстановитьПараметр("НачДата",  НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонДата",  Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("ВидСубконто",ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Запрос.УстановитьПараметр("ХозрасчетныйОСвОрганизации", ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	Запрос.УстановитьПараметр("НалоговыйАмортизацияОС_01", ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
		Массив = Новый Массив;
		Массив.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);
		Массив.Добавить(ПланыСчетов.Налоговый.ДоходныеВложенияВ_МЦ);
	Запрос.УстановитьПараметр("НалоговыйОСвОрганизации", Массив);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Список = ОС.Выгрузить();

	ПроводкиНУ              = Движения.Налоговый;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
		Если СтрокаТаблицы = NULL ИЛИ СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОС = ТаблицаСчетов.Найти(Выборка.Субконто1,"ОС_НУ");
		Если ПараметрыОС = Неопределено Тогда
			ПараметрыОС = ТаблицаСчетов.Найти(Выборка.Субконто1,"ОС_БУ");
			Если ПараметрыОС = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СчетУчетаНУ                 = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетУчетаБУ), Ложь, СтруктураШапкиДокумента.Дата);
			СчетНачисленияАмортизацииНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетНачисленияАмортизацииБУ), Ложь, СтруктураШапкиДокумента.Дата);
		Иначе
			СчетУчетаНУ                 = ПараметрыОС.СчетУчетаНУ;
			СчетНачисленияАмортизацииНУ = ПараметрыОС.СчетНачисленияАмортизацииНУ;
		КонецЕсли;
		Если Выборка.Сумма01Вр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетКт       = СчетУчетаНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Вр;
			ПроводкаНУ.Содержание   = "Передача ОС";
			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";
		КонецЕсли;
		Если Выборка.Сумма01Вр - Выборка.Сумма02Вр <> 0 Тогда
			Если СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации Тогда
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ПереданныеОбъектыНедвижимости;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма01Вр - Выборка.Сумма02Вр;
				ПроводкаНУ.Содержание   = "Передача ОС";
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
				ПроводкаНУ.НомерЖурнала = "ВР";
			Иначе
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
				//начало изменений 
				//БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУРасходов);
				//конец изменений 
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма01Вр - Выборка.Сумма02Вр;
				ПроводкаНУ.Содержание   = "Передача ОС";
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
				ПроводкаНУ.НомерЖурнала = "ВР";
			КонецЕсли;
		КонецЕсли;
		Если Выборка.Сумма02Вр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = СчетНачисленияАмортизацииНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма02Вр;
			ПроводкаНУ.Содержание   = "Передача ОС";
			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			ПроводкаНУ.НомерЖурнала = "ВР";
			
		КонецЕсли;
		
		Если Выборка.Сумма01Пр <> 0 Тогда
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетКт       = СчетУчетаНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма01Пр;
			ПроводкаНУ.Содержание   = "Передача ОС";
			ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
			
		КонецЕсли;
		Если Выборка.Сумма01Пр - Выборка.Сумма02Пр <> 0 Тогда
			Если СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации Тогда
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ПереданныеОбъектыНедвижимости;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма01Пр - Выборка.Сумма02Пр;
				ПроводкаНУ.Содержание   = "Передача ОС";
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
				ПроводкаНУ.НомерЖурнала = "ПР";
			Иначе
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетДт       = СтрокаТаблицы.СчетРасходовНУ;
				//начало изменений 
				//БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУРасходов);
				//конец изменений 
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма01Пр - Выборка.Сумма02Пр;
				ПроводкаНУ.Содержание   = "Передача ОС";
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
				ПроводкаНУ.НомерЖурнала = "ПР";
			КонецЕсли;
		КонецЕсли;
		Если Выборка.Сумма02Пр <> 0 Тогда		
			ПроводкаНУ              = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период       = Дата;
			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
			
			ПроводкаНУ.СчетДт       = СчетНачисленияАмортизацииНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, "ОсновныеСредства", Выборка.Субконто1);  
			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			ПроводкаНУ.Сумма        = Выборка.Сумма02Пр;
			ПроводкаНУ.Содержание   = "Передача ОС";
			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, "ОсновныеСредства", Выборка.Субконто1);   			
			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			ПроводкаНУ.НомерЖурнала = "ПР";
		КонецЕсли;
		
	КонецЦикла;
	
	Иначе   // была подготовка к передаче
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НалоговыйОстатки.Субконто1 КАК Субконто1,
		               |	ВЫБОР
		               |		КОГДА НалоговыйОстатки.ВидУчета = &ВидУчетаПР
		               |			ТОГДА НалоговыйОстатки.СуммаОстатокДт
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК Сумма01ПР,
		               |	ВЫБОР
		               |		КОГДА НалоговыйОстатки.ВидУчета = &ВидУчетаВР
		               |			ТОГДА НалоговыйОстатки.СуммаОстатокДт
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК Сумма01ВР
		               |ИЗ
		               |	РегистрБухгалтерии.Налоговый.Остатки(
		               |		&КонДата,
		               |		Счет В ИЕРАРХИИ (&НалоговыйВыбытиеОС),
		               |		,
		               |		Организация = &Организация
		               |		    И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
		               |ИТОГИ
		               |	СУММА(Сумма01ПР),
		               |	СУММА(Сумма01ВР)
		               |ПО
		               |	Субконто1";
		
		Запрос.УстановитьПараметр("НачДата",  началоМесяца(Дата));
		Запрос.УстановитьПараметр("КонДата",  Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
		Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
		Запрос.УстановитьПараметр("НалоговыйВыбытиеОС", ПланыСчетов.Налоговый.ВыбытиеОС);
		Запрос.УстановитьПараметр("СписокОС",       СписокОС);
		Список = ОС.Выгрузить();
		
		ПроводкиНУ              = Движения.Налоговый;
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
			Если СтрокаТаблицы = NULL ИЛИ СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Сумма01Вр <> 0 Тогда
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
				//начало изменений 
				//БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУРасходов);
				//конец изменений
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма01Вр;
				ПроводкаНУ.Содержание   = "Передача ОС";
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
				ПроводкаНУ.НомерЖурнала = "ВР";
			КонецЕсли;
			
			Если Выборка.Сумма01Пр <> 0 Тогда
				ПроводкаНУ              = ПроводкиНУ.Добавить();
				ПроводкаНУ.Период       = Дата;
				ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
				//начало изменений 
				//БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУРасходов);
				//конец изменений 
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
				ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
				ПроводкаНУ.Сумма        = Выборка.Сумма01Пр;
				ПроводкаНУ.Содержание   = "Передача ОС";
				ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
				ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
				ПроводкаНУ.НомерЖурнала = "ПР";
			КонецЕсли;
			
		КонецЦикла;
		
		
	КонецЕсли;
	
	ПроводкиНУ.Записать(Ложь);	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам.
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ) Экспорт
	
	Если СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации 
		И Не СтруктураШапкиДокумента.НачислятьНДСНедвижимости Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если Не ТаблицаВыручки.Количество() = 0 Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, , Отказ, УчетНДС.СчетОтнесенияНДС(СтруктураШапкиДокумента));
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// *Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");

	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

// *Дополняет полями, нужными для регл. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)


КонецПроцедуры

// *Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)

	СтруктураПолей.Вставить("СтоимостьУУ",          "Стоимость");
	СтруктураПолей.Вставить("АмортизацияУУ",        "Амортизация");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцУУ", "АмортизацияЗаМесяц");

КонецПроцедуры

// *Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СтоимостьБУ"         , "СтоимостьБУ");
	СтруктураПолей.Вставить("АмортизацияБУ"       , "АмортизацияБУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ", "АмортизацияЗаМесяцБУ");
	СтруктураПолей.Вставить("СтоимостьНУ"         , "СтоимостьНУ");
	СтруктураПолей.Вставить("АмортизацияНУ"       , "АмортизацияНУ");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ", "АмортизацияЗаМесяцНУ");

	СтруктураПолей.Вставить("СчетДоходовБУ" , "СчетДоходовБУ");
	СтруктураПолей.Вставить("СчетРасходовБУ", "СчетРасходовБУ");
	СтруктураПолей.Вставить("СубконтоБУ"    , "СубконтоБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ" , "СчетДоходовНУ");
	СтруктураПолей.Вставить("СчетРасходовНУ", "СчетРасходовНУ");
	СтруктураПолей.Вставить("СубконтоНУ"    , "СубконтоНУ");
	//начало изменений
	СтруктураПолей.Вставить("СубконтоБУРасходов"    , "СубконтоБУРасходов");
	СтруктураПолей.Вставить("СубконтоНУРасходов"    , "СубконтоНУРасходов");
	//конец изменений 

	СтруктураПолей.Вставить("СуммаКапитальныхВложенийВключаемыхВРасходыНУ", "СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
	
КонецПроцедуры

// Процедура получает сумму амортизационной премии, применявшейся к объектам,
// указанным в документе, и формирует проводку по признанию доходов
// по восстановлению амортизационной премии
Процедура ОтразитьВосстановлениеАмортизационнойПремии(СписокОС, СтруктураШапкиДокумента, ПроводкиНУ)
	
	Если НЕ ВосстановитьАмортизационнуюПремию Тогда
		Возврат;
	КонецЕсли;
	ДатаДока       = Дата;
	СписокОбъектов = СписокОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОС", СписокОбъектов);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаДока);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(ПервоначальныеСведенияОСНалоговыйУчет.Период), ДАТАВРЕМЯ(2006, 1, 1)) КАК Период
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет КАК ПервоначальныеСведенияОСНалоговыйУчет
	|ГДЕ
	|	ПервоначальныеСведенияОСНалоговыйУчет.ОсновноеСредство В(&СписокОС)";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ (РезультатЗапроса.Пустой()) Тогда
		ДатаНачала = РезультатЗапроса.Выгрузить()[0].Период;
	Иначе
		ДатаНачала = NULL;
	КонецЕсли;
	
	Если ДатаНачала = NULL Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОС", СписокОбъектов);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", ДатаДока);
	Запрос.УстановитьПараметр("СчетКВ", ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения);
	Запрос.УстановитьПараметр("ОсновныеСредства", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	
	Если ДатаДока < Дата('20130101') Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК СуммаОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			Счет В ИЕРАРХИИ (&СЧЕТКВ),
		|			&ОсновныеСредства,
		|			Организация = &Организация
		|				И Субконто1 В (&СписокОС),
		|			,
		|			) КАК НалоговыйОбороты";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ (РезультатЗапроса.Пустой()) Тогда
			СуммаАморПремии = РезультатЗапроса.Выгрузить()[0].СуммаОборотКт;
		Иначе
			СуммаАморПремии = 0;
		КонецЕсли;
		Если СуммаАморПремии = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Амортизационная премия не применялась к указанным объектам. Восстановление амортизационной премии не сделано",,, СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период       = ДатаДока;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СуммаАморПремии;
		Проводка.Содержание	  = "Передача ОС";
		
		Проводка.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"УсловияПоступленияИВыбытия",Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
		
		Проводка.СчетКт = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтатьяДляВосстановленияАмортизационнойПремии);
		
		
		Если НЕ СтруктураШапкиДокумента.ПоддержкаПБУ18	Тогда
			Возврат;
		КонецЕсли;
		
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период       = ДатаДока;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = - СуммаАморПремии;
		Проводка.Содержание	  = "Передача ОС";
		
		Проводка.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"УсловияПоступленияИВыбытия",Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
		
		Проводка.СчетКт = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтатьяДляВосстановленияАмортизационнойПремии);
		
		Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
		Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
		
	Иначе
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаОС", СписокОС);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство КАК Объект,
		|	ТаблицаОС.СчетРасходовНУ КАК СчетУчетаРасходов,
		|	ТаблицаОС.СубконтоНУ КАК Субконто
		|ПОМЕСТИТЬ ОсновныеСредства
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(НалоговыйОбороты.СуммаОборотКт) КАК Сумма,
		|	НалоговыйОбороты.Субконто1 КАК Объект,
		|	ОсновныеСредства.СчетУчетаРасходов КАК СчетУчетаРасходов,
		|	ОсновныеСредства.Субконто КАК Субконто
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			Счет В ИЕРАРХИИ (&СЧЕТКВ),
		|			&ОсновныеСредства,
		|			Организация = &Организация
		|				И Субконто1 В (&СписокОС),
		|			,
		|			) КАК НалоговыйОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОсновныеСредства КАК ОсновныеСредства
		|		ПО НалоговыйОбороты.Субконто1 = ОсновныеСредства.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОбороты.Субконто1,
		|	ОсновныеСредства.СчетУчетаРасходов,
		|	ОсновныеСредства.Субконто";
		
		ТаблицаАмортПремий = Запрос.Выполнить().Выгрузить();
		Если ТаблицаАмортПремий.Количество() = 0 Или ТаблицаАмортПремий.Итог("Сумма") = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Амортизационная премия не применялась к указанным объектам. Восстановление амортизационной премии не сделано",,, СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		Для Каждого ОбъектАмортПремии Из ТаблицаАмортПремий Цикл
			// Дт 01.09 Кт 91.01.7
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = ОбъектАмортПремии.Сумма;
			Проводка.Содержание	  = "Передача ОС";
			
			Проводка.СчетДт = ПланыСчетов.Налоговый.ВыбытиеОС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ОсновныеСредства",ОбъектАмортПремии.Объект);
			
			Проводка.СчетКт = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтатьяДляВосстановленияАмортизационнойПремии);

			// Дт 91.02.1 Кт 01.09
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = ОбъектАмортПремии.Сумма;
			Проводка.Содержание	  = "Передача ОС";
			
			Проводка.СчетДт = ОбъектАмортПремии.СчетУчетаРасходов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,ОбъектАмортПремии.Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,ОбъектАмортПремии.Объект);
			
			Проводка.СчетКт = ПланыСчетов.Налоговый.ВыбытиеОС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ОсновныеСредства",ОбъектАмортПремии.Объект);
			
			Если СтруктураШапкиДокумента.ПоддержкаПБУ18	Тогда
				
			Проводка = ПроводкиНУ.Добавить();
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = -ОбъектАмортПремии.Сумма;
			Проводка.Содержание	  = "Передача ОС";
			
			Проводка.СчетДт = ПланыСчетов.Налоговый.ВыбытиеОС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ОсновныеСредства",ОбъектАмортПремии.Объект);
			
			Проводка.СчетКт = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтатьяДляВосстановленияАмортизационнойПремии);
			
			Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
			
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = -ОбъектАмортПремии.Сумма;
			Проводка.Содержание	  = "Передача ОС";
			
			Проводка.СчетДт = ОбъектАмортПремии.СчетУчетаРасходов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,ОбъектАмортПремии.Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2,ОбъектАмортПремии.Объект);
			
			Проводка.СчетКт = ПланыСчетов.Налоговый.ВыбытиеОС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ОсновныеСредства",ОбъектАмортПремии.Объект);
			
			Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, ОС);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС");

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//начало изменений БП 07 
	Если ПараметрыСеанса.НеведетсяУПРУчетВЧастиЗатратИОС тогда
		Событие = СобытиеРегл;
	КонецЕсли;	
    //конец изменений БП 07	 
	
	//начало изменений
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Для каждого ТекСтрока Из ОС Цикл
				Если ЗначениеЗаполнено(ТекСтрока.СубконтоБУ) и Не ЗначениеЗаполнено(ТекСтрока.СубконтоБУРасходов) Тогда
						ТекСтрока.СубконтоБУРасходов = ТекСтрока.СубконтоБУ;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрока.СубконтоНУ) и Не ЗначениеЗаполнено(ТекСтрока.СубконтоНУРасходов) Тогда
					 ТекСтрока.СубконтоНУРасходов = ТекСтрока.СубконтоНУ;
				КонецЕсли;
			КонецЦикла;	
	 КонецЕсли;		
	//конец изменений 
	
КонецПроцедуры // ПередЗаписью

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента)

	УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
		Отказ = Истина;
	Иначе
		СтруктураШапкиДокумента.Вставить("НачислятьНДСНедвижимости", УчетнаяПолитикаБух.НачислятьНДСПриПередачеНедвижимости);
	КонецЕсли; 
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	СтруктураШапкиДокумента.Вставить("ПравоСобственностиПереходитПослеГосРегистрации", ПравоСобственностиПереходитПослеГосРегистрации);
    СтруктураШапкиДокумента.Вставить("НачислятьНДСНедвижимости", Ложь); //настоящее значение запишется в структуру при подготовке параметров учетной политики

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов", "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов" , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"          , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"          , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"                   , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом"     , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"           , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"          , "СделкаВидОперации");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ОС".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("Сумма"           , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"       , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"             , "СуммаНДС");
	//начало изменений БП 07 
	СтруктураПолей.Вставить("ПодразделениеОрганизации"             , "ПодразделениеОрганизации");
	//конец изменений БП 07	 

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);
    //начало изменений БП 07 
	СтруктураШапкиДокумента.ОтражатьВУправленческомУчете = Не ПараметрыСеанса.НеведетсяУПРУчетВЧастиЗатратИОС;
	//конец изменений БП 07	 
	
	СтруктураШапкиДокумента.Вставить("ПериодРегистрации", КонецМесяца(Дата));
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("ПоддержкаПБУ18");
		ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух", СтруктураПолейУчетнойПолитикиНУ);
	КонецЕсли;
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента);
	КонецЕсли;
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	ПроводитьПоВзаиморасчетам = СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		//И НЕ СтруктураШапкиДокумента.ПравоСобственностиПереходитПослеГосРегистрации;
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("ОС", ТаблицаПоТоварам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	//начало изменений
	СтароеОтражатьВУправленческомУчете = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете и СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете = СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете;
	КонецЕсли;	
	//конец изменений 
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);
    //начало изменений 
	СтруктураШапкиДокумента.ОтражатьВУправленческомУчете = СтароеОтражатьВУправленческомУчете;
	//конец изменений 
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	УправлениеВнеоборотнымиАктивами.ПроверитьДубли(ТаблицаПоТоварам, "Основные средства", "ОсновноеСредство", "Основное средство", Отказ, Заголовок);	
	
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Для каждого СтрокаОС из ТаблицаПоТоварам Цикл
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьСнятияСУчета(СтрокаОС.ОсновноеСредство,Дата,Отказ,Организация);
			КонецЕсли;
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете тогда
				УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьСнятияСУчета(СтрокаОС.ОсновноеСредство,Дата,Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// подготовка таблицы для списания
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекОрганизация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",       Дата);
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаПоТоварам);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.ОсновноеСредство                                                                               КАК ОсновноеСредство
	|	//БУ ,СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство                      КАК ОС_БУ
	|	//НУ ,СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство                          КАК ОС_НУ
	|	//УУ ,СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство                                       КАК ОС_УУ
	|	//БУ ,СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК Направление_БУ
	|	//НУ ,СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации     КАК Направление_НУ
	|	//УУ ,СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации                  КАК Направление_УУ
	|ИЗ
	|	ОсновныеСредства
	|	//БУ ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновныеСредства.ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних
	|	//БУ ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	//НУ ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновныеСредства.ОсновноеСредство ИЗ ОсновныеСредства) И Организация = &ТекОрганизация) КАК СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних
	|	//НУ ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|	//УУ ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&ТекПериод, ОсновноеСредство В (ВЫБРАТЬ ОсновныеСредства.ОсновноеСредство ИЗ ОсновныеСредства)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних
	|	//УУ ПО ОсновныеСредства.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство
	|";
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//БУ ", "");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//НУ ", "");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УУ ", "");
	КонецЕсли;
	
	ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();

	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		
		УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
        Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		КонецЕсли; 
		
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		                                     СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		                                     мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);

	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	 
КонецПроцедуры

///Вадим 09.10.2013 11:29:40
Процедура Проверка83ИСозданиеПроводок(ПроводкиБУ)
    счет83=ПланыСчетов.Хозрасчетный.ПриростСтоимостиИмуществаПоПереоценке;
	счет84=ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет = &Счет, , Субконто1 В (&ОС)) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Счет";

	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОС", ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("Счет", счет83);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
 	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Содержание   = "Сумма дооценки";
		Проводка.Сумма        = -ВыборкаДетальныеЗаписи.Сумма;
		Проводка.НомерЖурнала = "ОС";
		//
		Проводка.СчетДт      = счет83;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ВыборкаДетальныеЗаписи.Субконто1);
		//
		Проводка.СчетКт      = счет84;
		//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
	КонецЦикла;


	

КонецПроцедуры
//ВадимКонец


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("ОС"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");
