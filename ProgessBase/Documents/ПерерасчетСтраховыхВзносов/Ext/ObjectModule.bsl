////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура Автозаполнение(ТаблицаСотрудников, ТолькоРасчет = Ложь) Экспорт 

	Отказ = Ложь;
	
	ОписаниеДокумента = Новый Структура;
	ОписаниеДокумента.Вставить("Организация",				ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	ОписаниеДокумента.Вставить("ОбособленноеПодразделение",	Организация);
	ОписаниеДокумента.Вставить("Ссылка",					Ссылка);
	ОписаниеДокумента.Вставить("РасчетныйПериод",			РасчетныйПериод);
	ОписаниеДокумента.Вставить("ДатаРегистрацииИзменений",	КонецМесяца(ПериодРегистрации));
	ОписаниеДокумента.Вставить("ПериодРегистрации",			?(Год(ПериодРегистрации) > РасчетныйПериод, Дата(РасчетныйПериод, 12, 1), ПериодРегистрации));
	
	ПроверитьЗаполнениеШапки(ОписаниеДокумента, Отказ, "");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТолькоРасчет Тогда // пересмотр сведений о доходах
		
		// Перед заполнением требуется снять дату запрета изменения данных
		ПолныеПраваЗК.УстановитьПараметрГраницыЗапретаИзмененияДанных(Истина);
		
		// Пересмотр сведений о доходах
		ПерерасчетСтраховыхВзносовПереопределяемый.АвтозаполнениеДоходов(ЭтотОбъект, ОписаниеДокумента, ТаблицаСотрудников, Отказ);
		
		// Вернуть дату запрета изменения данных
		ПолныеПраваЗК.УстановитьПараметрГраницыЗапретаИзмененияДанных(Ложь);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Перерасчет взносов
	НаборЗаписейОДоходах = РегистрыНакопления.СтраховыеВзносыСведенияОДоходах.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	ОписаниеДокумента.Вставить("РегистрироватьДляКорректирующегоРасчета", Ложь);
	ОписаниеДокумента.Вставить("ПериодРегистрации",	ПериодРегистрации);
	
	СформироватьДвиженияПоДоходам(ОписаниеДокумента, "", Отказ, НаборЗаписейОДоходах);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИсчисленныеВзносы.Загрузить(РасчетСтраховыхВзносов.РассчитатьВзносы(ОписаниеДокумента, ТаблицаСотрудников, НаборЗаписейОДоходах));
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПерерасчетСтраховыхВзносов.Дата,
	|	ПерерасчетСтраховыхВзносов.Организация КАК ОбособленноеПодразделение,
	|	ВЫБОР
	|		КОГДА ПерерасчетСтраховыхВзносов.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ПерерасчетСтраховыхВзносов.Организация
	|		ИНАЧЕ ПерерасчетСтраховыхВзносов.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	ПерерасчетСтраховыхВзносов.Ссылка,
	|	ПерерасчетСтраховыхВзносов.ПериодРегистрации,
	|	ПерерасчетСтраховыхВзносов.ПериодРегистрации КАК Период,
	|	ПерерасчетСтраховыхВзносов.РасчетныйПериод,
	|	ПерерасчетСтраховыхВзносов.РегистрироватьДляКорректирующегоРасчета,
	|	ПерерасчетСтраховыхВзносов.ДоначислениеВзносовДляИсправленияОшибок
	|ИЗ
	|	Документ.ПерерасчетСтраховыхВзносов КАК ПерерасчетСтраховыхВзносов
	|ГДЕ
	|	ПерерасчетСтраховыхВзносов.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РасчетныйПериод) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан расчетный период!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан месяц регистрации!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиСтраховыеВзносыСведенияОДоходах(ВыборкаПоТЧ, Отказ, Заголовок)

	НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоТЧ.НомерСтроки) +
	""" табл. части ""Учет доходов по страховым взносам"": ";
	
	Если Не ЗначениеЗаполнено(ВыборкаПоТЧ.ФизЛицо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоТЧ.ДатаПолученияДохода) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указан месяц расчетного периода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоТЧ.ВидДохода) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указан вид дохода!", Отказ, Заголовок);
	КонецЕсли;
		
КонецПроцедуры 

Процедура ПроверитьЗаполнениеСтрокиСтраховыеВзносы(ВыборкаПоТЧ, Отказ, Заголовок)

	НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоТЧ.НомерСтроки) +
	""" табл. части ""Исчислено взносов в ПФР, ФСС и ФОМС"": ";
	
	Если Не ЗначениеЗаполнено(ВыборкаПоТЧ.ФизЛицо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указано физическое лицо!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоТЧ.ДатаПолученияДохода) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(НачалоСообщения + "не указан месяц расчетного периода!", Отказ, Заголовок);
	КонецЕсли;
		
КонецПроцедуры 

Процедура СформироватьДвиженияПоДоходам(ВыборкаПоШапкеДокумента, Заголовок, Отказ, НаборЗаписей) Экспорт
	
	Для каждого СтрокаТЧ Из СведенияОДоходах Цикл
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиСтраховыеВзносыСведенияОДоходах(СтрокаТЧ, Отказ, Заголовок);
		Если Не Отказ Тогда
			Движение = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,СтрокаТЧ);
			ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента); // Организация, ОбособленноеПодразделение
			Движение.Период = ?(ВыборкаПоШапкеДокумента.РегистрироватьДляКорректирующегоРасчета, НачалоМесяца(СтрокаТЧ.ДатаПолученияДохода), ВыборкаПоШапкеДокумента.ПериодРегистрации);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			Движения.СтраховыеВзносыИсчисленные.мВыполнятьДополнительныеДвижения = Истина;
			
			Для каждого СтрокаТЧ Из ИсчисленныеВзносы Цикл
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиСтраховыеВзносы(СтрокаТЧ, Отказ, Заголовок);
				Если Не Отказ Тогда
					Движение = Движения.СтраховыеВзносыИсчисленные.Добавить();
					ЗаполнитьЗначенияСвойств(Движение,СтрокаТЧ);
					ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента); // Организация, ОбособленноеПодразделение
					Если РасчетныйПериод < Год(РасчетСтраховыхВзносов.ДатаПередачиАдминистрированияВзносовФНС()) Тогда
						Движение.Период = ?(ВыборкаПоШапкеДокумента.РегистрироватьДляКорректирующегоРасчета, НачалоМесяца(СтрокаТЧ.ДатаПолученияДохода), ВыборкаПоШапкеДокумента.ПериодРегистрации);
						Движение.ОснованиеДляДоначисления = ?(ВыборкаПоШапкеДокумента.ДоначислениеВзносовДляИсправленияОшибок, Перечисления.ОснованияДляДоначисленияСтраховыхВзносов.ДляИсправленияОшибок, Перечисления.ОснованияДляДоначисленияСтраховыхВзносов.КорректировкаНеПризнаннаяОшибкой);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
			
			СформироватьДвиженияПоДоходам(ВыборкаПоШапкеДокумента, Заголовок, Отказ, Движения.СтраховыеВзносыСведенияОДоходах);
			
			Если РасчетныйПериод >= Год(РасчетСтраховыхВзносов.ДатаПередачиАдминистрированияВзносовФНС()) Или (Не ВыборкаПоШапкеДокумента.РегистрироватьДляКорректирующегоРасчета И ВыборкаПоШапкеДокумента.ПериодРегистрации >= РасчетСтраховыхВзносов.ДатаВозмещенияФССВзносовСОплаты4ДнейУходаЗаДетьмиИнвалидами()) Тогда
				Для каждого НаборЗаписей Из Движения Цикл
					ТипНабораЗаписей = ТипЗнч(НаборЗаписей);
					Если ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.СтраховыеВзносыИсчисленные") 
						Или ТипНабораЗаписей = Тип("РегистрНакопленияНаборЗаписей.СтраховыеВзносыСведенияОДоходах") Тогда
						НаборЗаписей.Записать();
					КонецЕсли;
				КонецЦикла;
				РасчетСтраховыхВзносов.СформироватьДвиженияПоВзносамСОплаты4ДнейУходаЗаДетьмиИнвалидами(Движения, ВыборкаПоШапкеДокумента, ИсчисленныеВзносы.ВыгрузитьКолонку("ФизЛицо"));	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(СведенияОДоходах);
	МассивТЧ.Добавить(ИсчисленныеВзносы);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");

	ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР = РасчетСтраховыхВзносов.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР();
	ДатаВыделенияВзносовНаОПСсСуммПревышенияПредельнойВеличины = РасчетСтраховыхВзносов.ДатаВыделенияВзносовНаОПСсСуммПревышенияПредельнойВеличины();
	Для каждого СтрокаТЧ Из ИсчисленныеВзносы Цикл
	
		Если СтрокаТЧ.ДатаПолученияДохода < ДатаВыделенияВзносовНаОПСсСуммПревышенияПредельнойВеличины Тогда
			СтрокаТЧ.ПФРДоПредельнойВеличины = 0;
			СтрокаТЧ.ПФРДоПредельнойВеличиныЕНВД = 0;
			СтрокаТЧ.ПФРСПревышения = 0;
			СтрокаТЧ.ПФРСПревышенияЕНВД = 0;
			Если СтрокаТЧ.ДатаПолученияДохода < ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР Тогда
				СтрокаТЧ.ПФРПоСуммарномуТарифу = 0;
				СтрокаТЧ.ПФРПоСуммарномуТарифуЕНВД = 0;
				СтрокаТЧ.ПФРПоСуммарномуТарифуСПревышения = 0;
			Иначе
				СтрокаТЧ.ПФРСтраховая = 0;
				СтрокаТЧ.ПФРСтраховаяЕНВД = 0;
				СтрокаТЧ.ПФРСтраховаяСПревышения = 0;
				СтрокаТЧ.ПФРНакопительная = 0;
				СтрокаТЧ.ПФРНакопительнаяЕНВД = 0;
			КонецЕсли;	
		Иначе
			СтрокаТЧ.ПФРПоСуммарномуТарифу = 0;
			СтрокаТЧ.ПФРПоСуммарномуТарифуЕНВД = 0;
			СтрокаТЧ.ПФРПоСуммарномуТарифуСПревышения = 0;
			СтрокаТЧ.ПФРСтраховая = 0;
			СтрокаТЧ.ПФРСтраховаяЕНВД = 0;
			СтрокаТЧ.ПФРСтраховаяСПревышения = 0;
			СтрокаТЧ.ПФРНакопительная = 0;
			СтрокаТЧ.ПФРНакопительнаяЕНВД = 0;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

