//m.ionov@a-prof.ru 27.12.2013
//Добавили склад в табличную часть

//m.ionov@a-prof.ru 03.01.2014
//Добавили "Дата и время начала анализа", "Дата и время завершение анализа" (перенесли с постпуления)
//Добавил на форму списка и выбора
//----m.ionov@a-prof.ru---

Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа,
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваровУпр(ДокументОснование) Экспорт

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",             Склад); //m.ionov@a-prof.ru 27.12.2013
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Товар",             Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("ДатаОстатков", 	   ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	//m.ionov@a-prof.ru 20.12.2013
	//Добавили получения качества
	//Бирюков качество оказывается нужно подтягивать актуальное. Изменим.
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Док.Ссылка
	|ПОМЕСТИТЬ ТаблДоков
	|ИЗ
	|	(ВЫБРАТЬ
	|		КорректировкаКачестваТоваров.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.КорректировкаКачестваТоваров КАК КорректировкаКачестваТоваров
	|	ГДЕ
	|		КорректировкаКачестваТоваров.ДокументОснование = &ДокументОснование
	|		И НЕ КорректировкаКачестваТоваров.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ДокументОснование) КАК Док";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	
	
	ТекстЗапроса =
	//"ВЫБРАТЬ
	//|	МИНИМУМ(Док.НомерСтроки) 			КАК НомерСтроки,
	//|	Док.Номенклатура                    КАК Номенклатура,
	//|	Док.ЕдиницаИзмерения                КАК ЕдиницаИзмерения,
	//|	Док.ЕдиницаИзмеренияМест            КАК ЕдиницаИзмеренияМест,
	//|	Док.Коэффициент                     КАК Коэффициент,
	//|	СУММА(Док.Количество)               КАК КоличествоПоДокументу,
	//|	МАКСИМУМ(Остатки.КоличествоОстаток) КАК КоличествоОстатокКомпании,
	//|	Док.ХарактеристикаНоменклатуры      КАК ХарактеристикаНоменклатуры,
	//|	Док.СерияНоменклатуры               КАК СерияНоменклатуры,
	//|   ЕСТЬNULL(УЗ_УстановкаКачестваНоменклатуры.Качество, Значение(Справочник.Качество.Новый)) КАК Качество,
	//|   МАКСИМУМ(ЕСТЬNULL(Остатки.Склад, &Склад)) КАК Склад
	//|ИЗ
	//|	Документ."+ДокументОснованиеИмя+".Товары КАК Док
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрНакопления.%ИмяРегистраОстатки%.Остатки(&ДатаОстатков, ) КАК Остатки
	//|ПО
	//|	Док.Номенклатура = Остатки.Номенклатура
	//| И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	//| И Док.Склад = Остатки.Склад
	//|
	//|ЛЕВОЕ СОЕДИНЕНИЕ
	//|	РегистрСведений.УЗ_УстановкаКачестваНоменклатуры КАК УЗ_УстановкаКачестваНоменклатуры
	//|ПО
	//|	УЗ_УстановкаКачестваНоменклатуры.ВидНоменклатуры = Док.Номенклатура.ВидНоменклатуры
	//|
	//|ГДЕ
	//|	Док.Ссылка = &ДокументОснование И
	//|	Остатки.КоличествоОстаток > 0
	////|   %УсловиеПоСкладу%
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Док.Номенклатура,
	//|	Док.ЕдиницаИзмерения,
	//|	Док.ЕдиницаИзмеренияМест,
	//|	Док.Коэффициент,
	//|	Док.ХарактеристикаНоменклатуры,
	//|	Док.СерияНоменклатуры,
	//|	ЕСТЬNULL(УЗ_УстановкаКачестваНоменклатуры.Качество, Значение(Справочник.Качество.Новый))
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерСтроки";
	
	"ВЫБРАТЬ
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	Док.Коэффициент КАК Коэффициент,
	|	СУММА(Док.Количество) КАК КоличествоПоДокументу,
	|	МАКСИМУМ(Остатки.КоличествоОстаток) КАК КоличествоОстатокКомпании,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ЕСТЬNULL(УЗ_УстановкаКачестваНоменклатуры.Качество, ЗНАЧЕНИЕ(Справочник.Качество.Новый)) КАК КачествоПоУмолчанию,
	|	МАКСИМУМ(ЕСТЬNULL(Остатки.Склад, &Склад)) КАК Склад,
	|	АктуальноеКачество.Качество КАК АктуальноеКачество
	|ИЗ
	|	Документ."+ДокументОснованиеИмя+".Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.%ИмяРегистраОстатки%.Остатки(&ДатаОстатков, ) КАК Остатки
	|		ПО Док.Номенклатура = Остатки.Номенклатура
	|			И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|			И Док.СерияНоменклатуры = Остатки.СерияНоменклатуры
	|			И Док.Склад = Остатки.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УЗ_УстановкаКачестваНоменклатуры КАК УЗ_УстановкаКачестваНоменклатуры
	|		ПО (УЗ_УстановкаКачестваНоменклатуры.ВидНоменклатуры = Док.Номенклатура.ВидНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|			ТоварыНаСкладах.Качество КАК Качество,
	|			СУММА(ВЫБОР
	|					КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА ТоварыНаСкладах.Количество
	|					ИНАЧЕ -1 * ТоварыНаСкладах.Количество
	|				КОНЕЦ) КАК Поле1
	|		ИЗ
	|			ТаблДоков КАК ТаблДоков
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|				ПО ТаблДоков.Ссылка = ТоварыНаСкладах.Регистратор
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТоварыНаСкладах.Номенклатура,
	|			ТоварыНаСкладах.Качество
	|		
	|		ИМЕЮЩИЕ
	|			СУММА(ВЫБОР
	|					КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА ТоварыНаСкладах.Количество
	|					ИНАЧЕ -1 * ТоварыНаСкладах.Количество
	|				КОНЕЦ) > 0) КАК АктуальноеКачество
	|		ПО Док.Номенклатура = АктуальноеКачество.Номенклатура
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	ЕСТЬNULL(УЗ_УстановкаКачестваНоменклатуры.Качество, ЗНАЧЕНИЕ(Справочник.Качество.Новый)),
	|	АктуальноеКачество.Качество
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстЗапроса = стрЗаменить(ТекстЗапроса,"%ИмяРегистраОстатки%", ?(Склад.ВидСклада=Перечисления.ВидыСкладов.Розничный,"ТоварыВРознице","ТоварыНаСкладах"));
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПоСкладу%",
	//	?(НЕ ЗначениеЗаполнено(Склад), "", "И Док.Склад = &Склад"));

	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УЗ_УстановкаКачестваНоменклатуры.Качество
	               |ИЗ
	               |	РегистрСведений.УЗ_УстановкаКачестваНоменклатуры КАК УЗ_УстановкаКачестваНоменклатуры
	               |ГДЕ
	               |	УЗ_УстановкаКачестваНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры";
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Мин(Выборка.КоличествоПоДокументу, Выборка.КоличествоОстатокКомпании);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		//m.ionov@a-prof.ru 20.12.2013
		//СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;
		//СтрокаТабличнойЧасти.КачествоНовое              = Справочники.Качество.Новый;
		ТипДокОснования = ТипЗнч(ДокументОснование);
		Если (ТипДокОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) ИЛИ
			 (ТипДокОснования = Тип("ДокументСсылка.КорректировкаКачестваТоваров")) 
		Тогда 
			Если ДокументОснование.Проведен Тогда 
				СтрокаТабличнойЧасти.Качество = Выборка.АктуальноеКачество;
			Иначе
				СтрокаТабличнойЧасти.Качество = Выборка.КачествоПоУмолчанию;
			КонецЕсли;
	//		СтрокаТабличнойЧасти.КачествоНовое              = СтрокаТабличнойЧасти.Качество;
			СтрокаТабличнойЧасти.КачествоНовое              = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;
//			СтрокаТабличнойЧасти.КачествоНовое              = Справочники.Качество.Новый;
			СтрокаТабличнойЧасти.КачествоНовое              = Неопределено;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Склад = Выборка.Склад;
		//----m.ionov@a-prof.ru---
        ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованиюУпр()

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа,
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоПриходномуОрдеруУпр(ДокументОснование) Экспорт

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",             Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОстатков", 	   ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Док.НомерСтроки) 			КАК НомерСтроки,
	|	Док.Номенклатура                    КАК Номенклатура,
	|	Док.ЕдиницаИзмерения                КАК ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест            КАК ЕдиницаИзмеренияМест,
	|	Док.Коэффициент                     КАК Коэффициент,
	|	СУММА(Док.Количество)               КАК КоличествоПоДокументу,
	|	МАКСИМУМ(Остатки.КоличествоОстаток) КАК КоличествоОстатокКомпании,
	|	Док.ХарактеристикаНоменклатуры      КАК ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры               КАК СерияНоменклатуры
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Товары КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, Склад = &Склад) КАК Остатки
	|ПО
	|	Док.Номенклатура = Остатки.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование И
	|	Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Мин(Выборка.КоличествоПоДокументу, Выборка.КоличествоОстатокКомпании);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;
//		СтрокаТабличнойЧасти.КачествоНовое              = Справочники.Качество.Новый;
		СтрокаТабличнойЧасти.КачествоНовое              = Неопределено;


        ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованиюУпр()

/// Кунов О.В., 16.01.2015 - 35390
Процедура ЗаполнитьТоварыПоКомплектацииУпр(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры,
	|	ТоварыНаСкладахОстатки.Качество,
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество,
	|	КомплектацияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КомплектацияНоменклатуры.Коэффициент КАК Коэффициент
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, ) КАК ТоварыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
	|		ПО ТоварыНаСкладахОстатки.СерияНоменклатуры = КомплектацияНоменклатуры.СерияНоменклатуры
	|			И ТоварыНаСкладахОстатки.Склад = КомплектацияНоменклатуры.Склад
	|			И ТоварыНаСкладахОстатки.Качество = КомплектацияНоменклатуры.ПРГ_Качество
	|ГДЕ
	|	КомплектацияНоменклатуры.Ссылка = &Основание");
	
	Запрос.УстановитьПараметр("ДатаОстатков", 		ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	Запрос.УстановитьПараметр("Основание",			ДокументОснование);
	
	ДанныеПоЗапросу = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанныхПоЗапросу Из ДанныеПоЗапросу Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), СтрокаДанныхПоЗапросу);
	КонецЦикла;
	
КонецПроцедуры
///

//начало изменений БП 04 
Функция ОпределитьВидДоговораОсн(ДокОснование)
	ДокОсн = ДокОснование;
	Если ЗначениеЗаполнено(ДокОсн) Тогда
		Пока ТипЗнч(ДокОсн) = Тип("ДокументСсылка.КорректировкаКачестваТоваров") и ЗначениеЗаполнено(ДокОсн) Цикл
			ДокОсн = ДокОсн.ДокументОснование;
		КонецЦикла;	
		Если ТипЗнч(ДокОсн) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Если ДокОсн.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				  возврат Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
			КонецЕсли;	
		КонецеслИ;	
	Конецесли;
	возврат Неопределено;
КонецФункции	

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	//начало изменений БП 04 ОСОБЫЙ СЛУЧАЙ
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если ОпределитьВидДоговораОсн(ДокументОснование) = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Если ЗаполнятьБУ тогда
				СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("002");	
			КонецЕсли;	
			Если ЗаполнятьНУ тогда
				СтрокаТЧ.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();	
			КонецЕсли;	
		Иначе	
			ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
		КонецЕслИ;	
	Иначе
		ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЕсли;	
	//конец изменений БП 04 
    
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

//Выполняет заполнение счетов учета в переданной табличной части
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	//начало изменений БП 04 ОСОБЫЙ СЛУЧАЙ
	Если ЗначениеЗаполнено(ДокументОснование) и ТипЗнч(ТабличнаяЧасть) =ТипЗнч(Товары)Тогда
		Если ОпределитьВидДоговораОсн(ДокументОснование) = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Для каждого текСтрока Из ТабличнаяЧасть Цикл
				Если ЗаполнятьБУ тогда
					текСтрока.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НайтиПоКоду("002");	
				КонецЕсли;	
				Если ЗаполнятьНУ тогда
					текСтрока.СчетУчетаНУ = ПланыСчетов.Налоговый.ПустаяСсылка();	
				КонецЕсли;				
			КонецЦикла; 
		Иначе	
		   СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
		КонецЕслИ;	
	Иначе
		  СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЕсли;	
	//конец изменений БП 04 
	



КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может корректировать качество в НТТ!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, КачествоНовое");

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	

	//Проверить на наличие строк, которые ничего не меняют
	ПроверитьНаличиеИзменяемыхРеквизитов(ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьНаличиеИзменяемыхРеквизитов(ТаблицаПоТоварам, Отказ, Заголовок)
	Для каждого Строка из ТаблицаПоТоварам цикл
		Если Строка.Качество = Строка.КачествоНовое Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке № "+СокрЛП(Строка.НомерСтроки)+" не происходит изменение качества товара", Отказ, Заголовок);

		КонецЕсли
	КонецЦикла;
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Перем ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая;

	ДвиженияПоРегистрамУпр(РежимПроведения,       СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок);
	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок);
	ДвиженияПоСписаннымТоварам(РежимПроведения,   СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок);

	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	Если ПРГ_ДопФункцииКлиентСервер.ПРГПроводитьПоПартиям(СтруктураШапкиДокумента) Тогда	
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);

		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	КонецЕсли;	
    //конец изменений 
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок)

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		НаборДвижений = Движения.ТоварыВРознице;
		
		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
	Иначе
		НаборДвижений = Движения.ТоварыНаСкладах;
		
		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПоТоварамСтарая = ТаблицаПоТоварам.Скопировать();

    // ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах ИЛИ ТоварыВРознице. Расход.
	Если Не Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
											
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		//m.ionov@a-prof.ru 27.12.2013
		//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
		
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента.ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
			УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента.ТаблицаПоТоварам, ТаблицаПоЦенам);
		КонецЕсли;
											
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
						
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах ИЛИ ТоварыВРознице. Приход.
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			НаборДвижений = Движения.ТоварыВРознице;
		Иначе
			НаборДвижений = Движения.ТоварыНаСкладах;
		КонецЕсли;

		ТаблицаПоТоварамНовая = ТаблицаПоТоварам.Скопировать();

		ТаблицаПоТоварамНовая.Колонки.Качество.Имя      = "КачествоСтарое";
		ТаблицаПоТоварамНовая.Колонки.КачествоНовое.Имя = "Качество";

		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамНовая);
												
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		//m.ionov@a-prof.ru 27.12.2013
		//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
			
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента.ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
			УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента.ТаблицаПоТоварам, ТаблицаПоЦенам);
		КонецЕсли;
												
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	//в этом случае таблицы ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая не заполнены
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		ТаблицаПоТоварамСтарая = ТаблицаПоТоварам.Скопировать();
        ТаблицаПоТоварамНовая = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамНовая.Колонки.Качество.Имя      = "КачествоСтарое";
		ТаблицаПоТоварамНовая.Колонки.КачествоНовое.Имя = "Качество";
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Проверка остатков при оперативном проведении.
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	Если Не Отказ Тогда
	
		// РАСХОД
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамСтарая);
																
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
		ЗначСклад = ?(СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, Склад, Неопределено);
		//m.ionov@a-prof.ru 27.12.2013
		//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
																
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
		// ПРИХОД
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамНовая);
																
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
		//m.ionov@a-prof.ru 27.12.2013
		//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
																
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоТоварамОрганизаций()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыУпр(ТаблицаДвижений)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,  "ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");

КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыРегл(ТаблицаДвижений, СтруктураШапкиДокумента)

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН,     "ОтражатьВНалоговомУчете");
	//начало изменений
	Для каждого ТекСтрока Из ТаблицаДвижений Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаНУ) Тогда
			ТекСтрока.ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;	
	КонецЦикла;	
	//конец изменений 

КонецПроцедуры

Процедура ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок)

	//в этом случае таблицы ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая не заполнены
	Если (НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) и (НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		ТаблицаПоТоварамСтарая = ТаблицаПоТоварам.Скопировать();
        ТаблицаПоТоварамНовая = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамНовая.Колонки.Качество.Имя      = "КачествоСтарое";
		ТаблицаПоТоварамНовая.Колонки.КачествоНовое.Имя = "Качество";
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамСтарая, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		СтрокаТаблицыПоТоварам = ТаблицаПоТоварамСтарая[Инд];
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;		
	КонецЦикла;

	//m.ionov@a-prof.ru 27.12.2013
	//ТаблицаДвижений.ЗаполнитьЗначения(Склад,  "Склад");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.КорректировкаКачества,"КодОперацииПартииТоваров");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыУпр(ТаблицаДвижений);
	ЗаполнитьКолонкиРегистраСписанныеТоварыРегл(ТаблицаДвижений, СтруктураШапкиДокумента);

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН);
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры

Процедура ДополнитьСтруктуруПолейШапкиРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ"        , "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"        , "СчетУчетаНУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание) Экспорт

//Бирюков ввод на основании корректировки качества
	ТипОснования = ТипЗнч(Основание);
//	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
	Если (ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) ИЛИ
	(ТипОснования = Тип("ДокументСсылка.КорректировкаКачестваТоваров"))	
	Тогда
//%%%%%%%%%%%%%%%%%%%%%%%%%%
		//Бирюков заполним добавленный реквизит для получения нормальной структуры подчинения документов
		ДокументОснование = Основание.Ссылка;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Заполним склад
//Бирюков ввод на основании корректировки качества
		//Если ТипЗнч(Основание.СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
		//	Склад = Основание.СкладОрдер
		//КонецЕсли;
		Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
			Если ТипЗнч(Основание.СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
				Склад = Основание.СкладОрдер
			КонецЕсли;
		Иначе
			Если ТипЗнч(Основание.Склад) = Тип("СправочникСсылка.Склады") Тогда
				Склад = Основание.Склад
			КонецЕсли;
		КонецЕсли;

		Если Основание.Проведен Тогда

			ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание);

			ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		КонецЕсли;

	ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")) Тогда
		Если Основание.БезПраваПродажи Тогда
			Возврат;
		КонецЕсли;
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Склад = Основание.Склад;
		Если Основание.Проведен Тогда

			ЗаполнитьТоварыПоПриходномуОрдеруУпр(Основание);

			ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		КонецЕсли;
		
	/// Кунов О.В., 16.01.2015 - 35390
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		
		ДокументОснование = Основание.Ссылка;
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Склад = Основание.Склад;
		
		Если Основание.Проведен Тогда
			
			ЗаполнитьТоварыПоКомплектацииУпр(Основание);
			
			ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
		КонецЕсли;
		
    ///
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 	

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//m.ionov@a-prof.ru 27.12.2013
	Для Каждого СтрокаТоваров Из Товары Цикл
		Если Не мУказаниеСкладовВТЧ Тогда
			СтрокаТоваров.Склад = Склад;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТоваров.Склад) Тогда
			СтрокаТоваров.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	//----m.ionov@a-prof.ru---
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"      , "ОтражатьВРегламентированномУчете");
 	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура",               "Номенклатура");
	СтруктураПолей.Вставить("Количество",                 "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры",          "СерияНоменклатуры");
	СтруктураПолей.Вставить("Набор",                      "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект",                   "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Услуга",                     "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Качество",                   "Качество");
	СтруктураПолей.Вставить("КачествоНовое",              "КачествоНовое");
	//m.ionov@a-prof.ru 27.12.2013
	//СтруктураПолей.Вставить("ВидСклада"	, 				  "Ссылка.Склад.ВидСклада");
	СтруктураПолей.Вставить("ВидСклада"	, 				  "Склад.ВидСклада");
	СтруктураПолей.Вставить("Склад"	, 				  "Склад");
	//----m.ionov@a-prof.ru---

	ДополнитьСтруктуруПолейШапкиРегл(СтруктураПолей);

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		//начало изменений БП 03
		// Движения по документу
		Если Не Отказ Тогда
			ИспользоватьРегистрСвободныеОстатки = глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки"); 
			
			Если ИспользоватьРегистрСвободныеОстатки И 
				(Товары.Количество() >0)
				И НЕ Отказ Тогда
				Если глЗначениеПеременной("ИспользоватьБлокировкуДанных")  Тогда
					Движения.СвободныеОстатки.БлокироватьДляИзменения = Истина;
				КонецЕсли;
				Движения.Записать();
				Если ТаблицаПоТоварам.Количество() <> 0 Тогда          
					РегистрыНакопления.СвободныеОстатки.КонтрольОстатков(
					"Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//конец изменений БП 03
	КонецЕсли;

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам));
	
КонецПроцедуры// ОбработкаПроведения()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

//m.ionov@a-prof.ru 27.12.2013
УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);
//----m.ionov@a-prof.ru---