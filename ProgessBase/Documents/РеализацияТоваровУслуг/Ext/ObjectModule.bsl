//++ Spl_Апроф 10.02.2015 (k.russkih@a-prof.ru) Добавил реквизит "КП_Отделение", вынес на форму документа, форму списка и выбора

Перем мУдалятьДвижения Экспорт;

Перем мИспользоватьТару Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;               

Перем УчетнаяПолитикаРегл;

Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мЕстьКолонкаСерии Экспорт;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мУказаниеСкладов ;
Перем мУказаниеСкладовВТЧ Экспорт;

Перем мСчетФактура;
Перем мИспользоватьРасширеннуюАналитику Экспорт;
Перем мДатаНачалаИспользованияРасширеннойАналитики Экспорт;

//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
Перем мВозвращатьРезервы;
//конец изменений 
//начало изменений Ожиганов 17.11.2015 приведение сумм по упр. учету к суммам бу, в случае если валюты совпадают
Перем мВалютаУпрУчета;
 //конец изменений 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(СуммыВРублях = Ложь)
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	РТиУ.Номер,
	|	РТиУ.Дата,
	|	РТиУ.ДоговорКонтрагента,
	|	РТиУ.Контрагент КАК Получатель,
	|	РТиУ.Организация КАК Поставщик,
	|	РТиУ.Организация,
	|	РТиУ.СуммаДокумента,
	|	РТиУ.ВалютаДокумента,
	|	РТиУ.УчитыватьНДС,
	|	РТиУ.СуммаВключаетНДС,
	|	РТиУ.КратностьВзаиморасчетов,
	|	РТиУ.КурсВзаиморасчетов
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РТиУ
	|ГДЕ
	|	РТиУ.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	ЗапросУслуги.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|	СУММА(Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА
	|			Номенклатура.ЕдиницаХраненияОстатков.Представление ЕСТЬ NULL
	|		ТОГДА
	|			Номенклатура.БазоваяЕдиницаИзмерения.Представление
	|		ИНАЧЕ
	|			Номенклатура.ЕдиницаХраненияОстатков.Представление
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Цена * &Курс / &Кратность КАК Цена,
	|	СУММА(Сумма * &Курс / &Кратность) КАК Сумма,
	|	СтавкаНДС,
	|	СУММА(СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Количество,
	|	ВЫБОР
	|		КОГДА
	|			Номенклатура.ЕдиницаХраненияОстатков.Представление ЕСТЬ NULL
	|		ТОГДА
	|			Номенклатура.БазоваяЕдиницаИзмерения.Представление
	|		ИНАЧЕ
	|			Номенклатура.ЕдиницаХраненияОстатков.Представление
	|	КОНЕЦ,
	|	Цена * &Курс / &Кратность,
	|	СтавкаНДС,
	|	ПроцентСкидкиНаценки
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки";
	
	// Вычислим курс документа для печати
	Если СуммыВРублях И Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
	 
		ЗапросКурсАванса = Новый Запрос;
		ЗапросКурсАванса.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросКурсАванса.Текст =
		"ВЫБРАТЬ
		|	Док.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	Док.СуммаРегл КАК СуммаРегл
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК Док
		|ГДЕ
		|	Док.Ссылка = &ТекущийДокумент
		|ИТОГИ
		|	СУММА(СуммаВзаиморасчетов),
		|	СУММА(СуммаРегл)
		|ПО
		|	ОБЩИЕ";
		
		Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			КурсОплаты                 = ?(Выборка.СуммаВзаиморасчетов = 0, 0, Выборка.СуммаРегл / Выборка.СуммаВзаиморасчетов);
			ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			ВыборкаСуммаРегл           = Выборка.СуммаРегл;
		Иначе
			КурсОплаты                 = 0;
			ВыборкаСуммаВзаиморасчетов = 0;
			ВыборкаСуммаРегл           = 0;
		КонецЕсли;
		
		СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(Ссылка, "Услуги"),
			Шапка.ВалютаДокумента, Шапка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			ЗаполнениеДокументов.КурсДокумента(Ссылка, мВалютаРегламентированногоУчета), Шапка.КурсВзаиморасчетов,
			ЗаполнениеДокументов.КратностьДокумента(Ссылка, мВалютаРегламентированногоУчета), Шапка.КратностьВзаиморасчетов);
		НеоплаченнаяСумма = СуммаВзаиморасчетов - ВыборкаСуммаВзаиморасчетов;
		Если НеоплаченнаяСумма > 0 Тогда
			КурсДляПечати = (НеоплаченнаяСумма * Шапка.КурсВзаиморасчетов + ВыборкаСуммаРегл)/(НеоплаченнаяСумма + ВыборкаСуммаВзаиморасчетов);
		Иначе
			КурсДляПечати = КурсОплаты;
		КонецЕсли;
		
		Если КурсДляПечати = 0 Тогда
			ЗапросУслуги.УстановитьПараметр("Курс",      Ссылка.КурсВзаиморасчетов);
			ЗапросУслуги.УстановитьПараметр("Кратность", ?(Шапка.КратностьВзаиморасчетов=0, 1, Ссылка.КратностьВзаиморасчетов));
		Иначе
			ЗапросУслуги.УстановитьПараметр("Курс",      КурсДляПечати);
			ЗапросУслуги.УстановитьПараметр("Кратность", 1);
		КонецЕсли;
		
	Иначе
		
		// Пересчитывать цену и сумму не надо, т.к.
		// - либо документ оформлен и выводится в рублях
		// - либо документ выводится в той же валюте, в которой он оформлен
		ЗапросУслуги.УстановитьПараметр("Курс",      1);
		ЗапросУслуги.УстановитьПараметр("Кратность", 1);
		
	КонецЕсли;
	
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Если количество строк с нулевой скидкой меньше общего количества строк, то в документе есть скидки
	ЕстьСкидки = (ТаблицаУслуги.НайтиСтроки(Новый Структура("Скидка", 0)).Количество() < ТаблицаУслуги.Количество());
	
	// Вывести табличную часть
	Если ЕстьСкидки  Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтроки.Параметры.Товар 		= СокрЛП(СтрокаТабличнойЧасти.Товар);
		
		Если ЕстьСкидки Тогда
			Скидка = Ценообразование.ПолучитьСуммуСкидки(СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Скидка);
			ОбластьСтроки.Параметры.Скидка         = Скидка;
			ОбластьСтроки.Параметры.СуммаБезСкидки = ОбщегоНазначения.ФорматСумм(СтрокаТабличнойЧасти.Сумма + Скидка);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	Сумма    = ТаблицаУслуги.Итог("Сумма");
	СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если Шапка.УчитыватьНДС Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	
	СуммаКПрописи 	= Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ВалютаДляПечати = ?(СуммыВРублях, мВалютаРегламентированногоУчета, Шапка.ВалютаДокумента);
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего оказано услуг " + НомерСтроки
											+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, ВалютаДляПечати);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи,  ВалютаДляПечати);
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата);
	Если Руководители.РуководительДолжность = "" Тогда 
		ДолжностьИНазваниеОрганизации = Организация.НаименованиеПолное;
	Иначе 
		ДолжностьРук = Руководители.РуководительДолжность;
		ДолжностьИНазваниеОрганизации = ?(НЕ ЗначениеЗаполнено(ДолжностьРук), Организация.НаименованиеПолное, ДолжностьРук + " " + Организация.НаименованиеПолное);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтпускРазрешил) И ОтпускРазрешил <> Руководители.Руководитель Тогда 
		ЗаместительПоПриказу = "("+ОбщегоНазначения.ФамилияИнициалыФизЛица(ОтпускРазрешил) + " " + ЗаРуководителяПоПриказу+")";
	Иначе 
		ЗаместительПоПриказу = Руководители.Руководитель;
	КонецЕсли;
	
	ОбластьМакета.Параметры.ДолжностьИНазваниеОрганизации 	= ДолжностьИНазваниеОрганизации;
	ОбластьМакета.Параметры.ЗаместительПоПриказу 			= ЗаместительПоПриказу;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
	
КонецФункции // ПечатьАктаОбОказанииУслуг()

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН()
	
	Если Дата < Дата(2012, 03, 13) Тогда
		ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	Иначе
		ОбработкаПечати = Обработки.ПечатьТТН1208.ПолучитьФорму("Форма");
	КонецЕсли;
	
	ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
	ОбработкаПечати.ПунктРазгрузки = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресДоставки);
	
	ОбработкаПечати.Открыть();
	
	Возврат Неопределено;
	
КонецФункции // ПечатьТТН()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Акт" Тогда
		ТабДокумент = ПечатьАктаОбОказанииУслуг(Ложь);
	ИначеЕсли ИмяМакета = "АктРуб" Тогда
		ТабДокумент = ПечатьАктаОбОказанииУслуг(Истина);
	ИначеЕсли ИмяМакета = "1Т" или ИмяМакета = "_1Т" Тогда
		ТабДокумент = ПечатьТТН();
	ИначеЕсли ИмяМакета = "Бланк" Тогда
		ТабДокумент = ПечатьБланк(НаПринтер);
	ИначеЕсли ИмяМакета = "СправкаРасчетВал" тогда

		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
		
	ИначеЕсли ИмяМакета = "ТранспУпаковки" Тогда
		
		Обр   = Обработки.ТранспортныеУпаковки.Создать();
		Форма = Обр.ПолучитьФорму(,ЭтотОбъект,);
		Если Форма.Открыта() Тогда
			Форма.Активизировать();
		Иначе
			Форма.Открыть();
			Форма.ПервоначальноеЗаполнение(Ссылка);
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
		
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	Иначе
		//Формы Накладная, М15, ТОРГ12 печатаются из модуля менеджера
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		ИменаМакетов = ИмяМакета;
		Если НЕ ПустаяСтрока(ИмяМакета) Тогда
			Для Итератор = 1 По КоличествоЭкземпляров - 1 Цикл
				ИменаМакетов = ИменаМакетов + "," + Сред(ИмяМакета, 1, Найти(ИмяМакета + ",", ",") - 1);
			КонецЦикла;
		КонецЕсли;
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.РеализацияТоваровУслуг", ИменаМакетов, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.РеализацияТоваровУслуг", ИменаМакетов, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
	
КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура;
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот Тогда
		
		Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			СтруктПечатныхФорм.Вставить("Акт",          "Акт об оказании услуг");
		Иначе
			СтруктПечатныхФорм.Вставить("Акт",          "Акт об оказании услуг (вал.)");
			СтруктПечатныхФорм.Вставить("АктРуб",       "Акт об оказании услуг (руб.)");
		КонецЕсли;
		СтруктПечатныхФорм.Вставить("СправкаРасчетВал", "Справка-расчет ""Рублевая сумма документа в валюте""");
		
	Иначе
		
		Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			СтруктПечатныхФорм.Вставить("Накладная",    "Расходная накладная");
			СтруктПечатныхФорм.Вставить("Акт",          "Акт об оказании услуг");
		Иначе
			СтруктПечатныхФорм.Вставить("Накладная",    "Расходная накладная (вал.)");
			СтруктПечатныхФорм.Вставить("НакладнаяРуб", "Расходная накладная (руб.)");
			СтруктПечатныхФорм.Вставить("Акт",          "Акт об оказании услуг (вал.)");
			СтруктПечатныхФорм.Вставить("АктРуб",       "Акт об оказании услуг (руб.)");
		КонецЕсли;
		СтруктПечатныхФорм.Вставить("ТОРГ12",           "ТОРГ-12 (Товарная накладная с услугами)");
		СтруктПечатныхФорм.Вставить("ТОРГ12_БезУслуг",  "ТОРГ-12 (Товарная накладная)");
		СтруктПечатныхФорм.Вставить("_1Т",              "Бланки ТТН");
		СтруктПечатныхФорм.Вставить("М15",              "М-15 (Накладная)");
		
		//{06.07.2016 Островерхий заявка №53363 
		СтруктПечатныхФорм.Вставить("М15ЗалоговаяСтоимость", "М-15 (по залоговой стоимости)"); 
		//06.07.2016 Островерхий} 
		
		СтруктПечатныхФорм.Вставить("Бланк",            "Бланк товарного наполнения");
		СтруктПечатныхФорм.Вставить("СправкаРасчетВал", "Справка-расчет ""Рублевая сумма документа в валюте""");
		СтруктПечатныхФорм.Вставить("ТранспУпаковки",   "Штрихкоды транспортных упаковок");
		СтруктПечатныхФорм.Вставить("СерийныеНомера",   "Список серийных номеров");
		
	КонецЕсли;
	
	Возврат СтруктПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Проверяет необходимость расчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки()
	ИспользованиеСкидок = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);

	Если НЕ ЗначениеЗаполнено(ИспользованиеСкидок) Тогда
		возврат Ложь;
	КонецЕсли;

	Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
		Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
		Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
		Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте Тогда
		мРассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;
	
	Если НЕ мРассчитыватьАвтоматическиеСкидки
		Или Проведен Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет добавление возвратной тары из документа поступления товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ДобавитьВозвратнуюТаруПоПоступлениюТоваровУпр(ДокПоступление) Экспорт
	
	ТабТара = ДокПоступление.ВозвратнаяТара.Выгрузить();
	ТабТара.ЗаполнитьЗначения(0, "Цена,Сумма");
	ТабТара.Колонки.Заказ.Имя = "ЗаказПокупателя";
	
	ВозвратнаяТара.Загрузить(ТабТара);
	Для Каждого СтрокаТара Из ВозвратнаяТара Цикл
		СтрокаТара.СпособСписанияОстаткаТоваров = ?(НЕ ЗначениеЗаполнено(СтрокаТара.ЗаказПокупателя),
		Перечисления.СпособыСписанияОстаткаТоваров.СоСклада,
		Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьВозвратнуюТаруПоПоступлениюТоваровУпр()

// Процедура выполняет заполниение возвратной тары по поступлению Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(ДокументОснование, МассивЗаказов) Экспорт
	
	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокТары = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара 
	|ГДЕ Ссылка = &ДокументСсылка";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Склад        КАК Склад,
	|	%ПОЛЕ_Док_ЗаказПокупателя% КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЛимитыТары.ЛимитПокупателю ЕСТЬ NULL  // Остатки тары у покупателя в регистре отрицательные
	|			ИЛИ (Док.Количество - ОстаткиТары.КоличествоОстаток) < (ЛимитыТары.ЛимитПокупателю) ТОГДА
	|			Док.Количество
	|		КОГДА ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток > 0 ТОГДА
	|			ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК КоличествоТары, // минимум из указанного в документе, и которое можно отгрузить (лимит - уже отгружено)
	|	Остатки.КоличествоОстаток КАК ОстатокТары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЛимитыВозвратнойТары.СрезПоследних(, 
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары +")  
	|	) КАК ЛимитыТары
	|ПО 
	|	ЛимитыТары.Номенклатура = Док.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков,
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|	              И СтатусПередачи = &СтатусПередачи 
	|	) КАК ОстаткиТары
	|ПО 
	|	ОстаткиТары.Номенклатура = Док.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков,
	|		Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|		// УСЛОВИЕ_СкладИзШапки
	|	    ) КАК Остатки
	|ПО
	|	Док.Номенклатура = Остатки.Номенклатура
	|	И Док.Склад = Остатки.Склад
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|	// УСЛОВИЕ_ПО_ЗАКАЗАМ
	|";
	
	Если МассивЗаказов <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "И Док.Заказ В(&МассивЗаказов)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "Док.Заказ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "Неопределено");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_СкладИзШапки", ?(мУказаниеСкладовВТЧ, "", "И Склад = &Склад"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента"   , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Неопределено);
	Запрос.УстановитьПараметр("ДокументСсылка"       , ДокументОснование);
	Запрос.УстановитьПараметр("Склад"                , Склад);
	Запрос.УстановитьПараметр("СтатусПередачи"       , Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("МассивЗаказов",         МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаОстатков"		 , ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОстатокТары = ?(Выборка.ОстатокТары = NULL, 0, Выборка.ОстатокТары);
		Количество  = Мин(Выборка.КоличествоТары, ОстатокТары);
		
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();
		
		СтрокаВозвратнойТары.Номенклатура    = Выборка.Номенклатура;
		СтрокаВозвратнойТары.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		СтрокаВозвратнойТары.Склад           = Выборка.Склад;
		СтрокаВозвратнойТары.Количество      = Количество;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаВозвратнойТары, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
		// Получим цену из регистра сведений ЦеныНоменклатуры
		Если НЕ ЗначениеЗаполнено(ТипЦен)
			или (НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов)) Тогда 
			СтрокаВозвратнойТары.Цена = 0;
		Иначе
			// из регистра
			Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаВозвратнойТары.Номенклатура, , ТипЦен, Дата,
			СтрокаВозвратнойТары.Номенклатура.ЕдиницаХраненияОстатков, ДоговорКонтрагента.ВалютаВзаиморасчетов,
			КурсВзаиморасчетов, КратностьВзаиморасчетов, , ДоговорКонтрагента);
			
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки бурутся из номенклатуры
			Если НЕ ЗначениеЗаполнено(Цена) Тогда
				СтрокаВозвратнойТары.Цена = 0;
			Иначе
				СтрокаВозвратнойТары.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				ТипЦен.ЦенаВключаетНДС,
				УчитыватьНДС, Истина,
				УчетНДС.ПолучитьСтавкуНДС(СтрокаВозвратнойТары.Номенклатура.СтавкаНДС));
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоПоступлениюТоваров()

// Процедура выполняет заполниение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваровУпр(ДокументОснование,ИмяТЧ = "Товары", МассивЗаказов = Неопределено) Экспорт
	
	СкладыВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
	
	Если НЕ СкладыВТЧ И НЕ ЗначениеЗаполнено(Склад) Тогда
		Если ДокументОснование.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			Склад = ДокументОснование.СкладОрдер.Склад;
		Иначе			
			Склад = ДокументОснование.СкладОрдер;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад"            , Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Качество"         , Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ДатаОстатков"	 , ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ЕстьЗаказы = МассивЗаказов <> Неопределено и ИмяТЧ<>"Оборудование" ;
	Если ЕстьЗаказы Тогда
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	КонецЕсли;
	
	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " 
	|ГДЕ Ссылка = &ДокументОснование";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Док.СтавкаНДС,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА
	|			СУММА(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) < МАКСИМУМ(Остатки.КоличествоОстаток)
	|		ТОГДА
	|			СУММА(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент)
	|		ИНАЧЕ
	|			МАКСИМУМ(Остатки.КоличествоОстаток)
	|	КОНЕЦ КАК МинКоличествоВДокументеОстаток,
	|	%ПОЛЕ_Док_ЗаказПокупателя% КАК ЗаказПокупателя,
	|	Док.ХарактеристикаНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|	Док.Склад, ", "") + "
	|	Док.СерияНоменклатуры
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		Остатки.Номенклатура КАК Номенклатура,
	|		Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Остатки.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|		Остатки.Склад КАК Склад,", "") + "
	|		СУММА(Остатки.КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ОстаткиНаСкладах.Номенклатура КАК Номенклатура,
	|			ОстаткиНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ОстаткиНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|			ОстаткиНаСкладах.Склад КАК Склад,", "") + "
	|			ОстаткиНаСкладах.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков,
	|			   Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") "
	+ ?(СкладыВТЧ, "", "
	|			   И Склад    = &Склад") + "
	|			   И Качество = &Качество
	|			) КАК ОстаткиНаСкладах
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			ОстаткиВРознице.Номенклатура КАК Номенклатура,
	|			ОстаткиВРознице.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ОстаткиВРознице.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|			ОстаткиВРознице.Склад КАК Склад,", "") + "
	|			ОстаткиВРознице.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков,
	|			   Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") "
	+ ?(СкладыВТЧ, "", "
	|			   И Склад    = &Склад") + "
	|			   И Качество = &Качество
	|			) КАК ОстаткиВРознице
	|		) КАК Остатки
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|		Склад,", "") + "
	|		СерияНоменклатуры
	|	) КАК Остатки
	|ПО
	|	Док.Номенклатура                 = Остатки.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|	И Док.СерияНоменклатуры          = Остатки.СерияНоменклатуры"
	+ ?(СкладыВТЧ, "
	|	И Док.Склад          = Остатки.Склад", "") + "
	|
	|ГДЕ Док.Ссылка = &ДокументОснование 
	|	// УСЛОВИЕ_ПО_ЗАКАЗАМ
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.СтавкаНДС,
	|	Док.ХарактеристикаНоменклатуры,
	|	// ГРУППИРОВКА_ПО_ЗАКАЗАМ
	|	Док.СерияНоменклатуры" 
	+ ?(СкладыВТЧ, ", 
	|	Док.Склад", "") + "
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки
	|";
	
	Если ЕстьЗаказы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      " И Док.Заказ В(&МассивЗаказов) ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ГРУППИРОВКА_ПО_ЗАКАЗАМ",  " Док.Заказ, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПОЛЕ_Док_ЗаказПокупателя%", " Док.Заказ ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ГРУППИРОВКА_ПО_ЗАКАЗАМ",  "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПОЛЕ_Док_ЗаказПокупателя%", "Неопределено");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		
		СписКоличество = Выборка.МинКоличествоВДокументеОстаток;
		
		Если НЕ ЗначениеЗаполнено(СписКоличество) ИЛИ СписКоличество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ЗаказПокупателя            = Выборка.ЗаказПокупателя;
		СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;
		
		Если СкладыВТЧ Тогда
			СтрокаТабличнойЧасти.Склад = Выборка.Склад;
		Иначе
			СтрокаТабличнойЧасти.Склад = Склад;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		СтрокаТабличнойЧасти.Количество = (СписКоличество * Выборка.КоэффициентЕдиницыХранения) / СтрокаТабличнойЧасти.Коэффициент;
		
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
			СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЦикла;
	
	// Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мМинимальныеЦены = Новый ТаблицаЗначений;
		мМинимальныеЦены.Колонки.Добавить("Номенклатура");
		мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
		мМинимальныеЦены.Колонки.Добавить("ЕдиницаИзмерения");
		мМинимальныеЦены.Колонки.Добавить("Цена");
		
		мСписокФильтров = УправлениеДопПравамиПользователей.ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа();
		
		мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",                      ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата));
		//>>200916 ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров,  мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

// Заполняет склды в табличной части документа значением из шапки вызывается перед 
// записью и перед заполнением по кнопке "Заполнить и провести"
//
Процедура ЗаполнитьСкладыВТЧ()
	мКэшЗаказПокупателя = Новый Соответствие;
	ЗапросаСкладГруппа = Новый Запрос;
	ЗапросаСкладГруппа.Текст = "ВЫБРАТЬ СкладГруппа КАК СкладГруппа ИЗ Документ.ЗаказПокупателя ГДЕ Ссылка = &Ссылка";

	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	СкладИзШапки    =  Не мУказаниеСкладовВТЧ;
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	Для каждого СтрокаТЧ из Товары Цикл
		Если СкладИзШапки И НЕ ЕстьКолонкаЗаказ Тогда
			Если СтрокаТЧ.Склад <> Склад Тогда
				СтрокаТЧ.Склад = Склад;
			КонецЕсли;
		ИначеЕсли ЕстьКолонкаЗаказ И НЕ СкладИзШапки И НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧЗаказПокупателяСкладГруппа = мКэшЗаказПокупателя[СтрокаТЧ.ЗаказПокупателя];
			Если СтрокаТЧЗаказПокупателяСкладГруппа = Неопределено Тогда
				ЗапросаСкладГруппа.УстановитьПараметр("Ссылка", СтрокаТЧ.ЗаказПокупателя);
				Выборка = ЗапросаСкладГруппа.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаТЧЗаказПокупателяСкладГруппа = Выборка.СкладГруппа;
					мКэшЗаказПокупателя.Вставить(СтрокаТЧ.ЗаказПокупателя, Выборка.СкладГруппа);
				КонецЕсли;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧЗаказПокупателяСкладГруппа)
				ИЛИ ТипЗнч(СтрокаТЧЗаказПокупателяСкладГруппа) <> Тип("СправочникСсылка.Склады") Тогда
				Если СтрокаТЧ.Склад <> Склад Тогда
					СтрокаТЧ.Склад = Склад;
				КонецЕсли;
			Иначе
				Если СтрокаТЧ.Склад <> СтрокаТЧЗаказПокупателяСкладГруппа Тогда
					СтрокаТЧ.Склад = СтрокаТЧЗаказПокупателяСкладГруппа;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЧ из ВозвратнаяТара Цикл
		Если СкладИзШапки И НЕ ЕстьКолонкаЗаказ Тогда
			Если СтрокаТЧ.Склад <> Склад Тогда
				СтрокаТЧ.Склад = Склад;
			КонецЕсли;
		ИначеЕсли ЕстьКолонкаЗаказ И НЕ СкладИзШапки И НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧЗаказПокупателяСкладГруппа = мКэшЗаказПокупателя[СтрокаТЧ.ЗаказПокупателя];
			Если СтрокаТЧЗаказПокупателяСкладГруппа = Неопределено Тогда
				ЗапросаСкладГруппа.УстановитьПараметр("Ссылка", СтрокаТЧ.ЗаказПокупателя);
				Выборка = ЗапросаСкладГруппа.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаТЧЗаказПокупателяСкладГруппа = Выборка.СкладГруппа;
					мКэшЗаказПокупателя.Вставить(СтрокаТЧ.ЗаказПокупателя, Выборка.СкладГруппа);
				КонецЕсли;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧЗаказПокупателяСкладГруппа)
				ИЛИ ТипЗнч(СтрокаТЧЗаказПокупателяСкладГруппа) <> Тип("СправочникСсылка.Склады") Тогда
				Если СтрокаТЧ.Склад <> Склад Тогда
					СтрокаТЧ.Склад = Склад;
				КонецЕсли;
			Иначе
				Если СтрокаТЧ.Склад <> СтрокаТЧЗаказПокупателяСкладГруппа Тогда
					СтрокаТЧ.Склад = СтрокаТЧЗаказПокупателяСкладГруппа;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьСкладыВТЧ()

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям(ДатаОстатков=неопределено)
	
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура");
	СкладыТабличнойЧасти = Товары.Выгрузить();
	СкладыТабличнойЧасти.Свернуть("Склад");
	
	МассивНоменклатуры   = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады         = СкладыТабличнойЧасти.ВыгрузитьКолонку("Склад");
	
	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий         = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям,ДатаОстатков);
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	Товары.Очистить();
	
	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании") И глЗначениеПеременной("ИспользоватьСерииНоменклатуры");
	
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтуктураПоиска.Вставить("Склад",                      ИсходнаяСтрока.Склад);
		флЗаполнятьИзРезервов = ложь;
		Если ИспользоватьУказаниеСерийНоменклатурыПриРезервировании И ИсходнаяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва  Тогда
			Если ИсходнаяСтрока.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтуктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ЗаказПокупателя);
				флЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;
		Если флЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;
		
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией        = Неопределено;
		СтрокаМаксимальнойСуммы    = Неопределено;
		НепогашеннаяСумма          = ИсходнаяСтрока.Сумма;
		МаксимальнаяСумма          = 0;
		
		ЗаполненКлючСвязи = Ложь;
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;
			
			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			
			НоваяСтрока = Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			Если НЕ ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.СерияНоменклатуры               = Строка.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияНоменклатуры               = ИсходнаяСтрока.СерияНоменклатуры;
			КонецЕсли;
			НоваяСтрока.Количество                          = СписанноеКоличество;
			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);
			
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток             = Строка.Остаток - СписанноеКоличество;
			
			ТекущаяСумма      = НоваяСтрока.Сумма;
			НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;
			
			// Проверим текущую сумму на максимум.
			Если ТекущаяСумма > МаксимальнаяСумма Тогда
				МаксимальнаяСумма       = ТекущаяСумма;
				СтрокаМаксимальнойСуммы = НоваяСтрока;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить > 0 Тогда
			
			Если СтрокаСПустойСерией = Неопределено Тогда
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
				
				НоваяСтрока.Количество                          = КоличествоОсталосьПогасить;
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);
				
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
				
				ТекущаяСумма      = НоваяСтрока.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;
				
				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = НоваяСтрока;
				КонецЕсли;
				
			Иначе
				
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				
				ТекущаяСумма      = СтрокаСПустойСерией.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;
				
				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = СтрокаСПустойСерией;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Если что-то осталось, кидаем на строку с максимальной суммой.
		Если НепогашеннаяСумма > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
			СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;
			
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьПоСериям()

//Процедура выполняет заполнение табличной части неполученными ТМЦ (резервом) по заказу покупателя.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ТабличнаяЧасть, ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТабличнаяЧасть = Товары Тогда
		ТекстЗапросаПоТЧЗаказа = "
//>>250816 Степанов		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмеренияМест, минимум(НомерСтроки) КАК НомерСтроки
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмеренияМест, минимум(НомерСтроки) КАК НомерСтроки, НомерСтрокиПолучателя, НомерСтрокиТовара, ЗначениеУсловияАвтоматическойСкидки КАК УстановкаСкидокНоменклатуры 
		|				ИЗ Документ.ЗаказПокупателя.Товары
		|				ГДЕ Ссылка = &Сделка
		|				Сгруппировать по Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмеренияМест, НомерСтрокиПолучателя, НомерСтрокиТовара, ЗначениеУсловияАвтоматическойСкидки) КАК ТЧЗаказа
		|ПО Остатки.Номенклатура = ТЧЗаказа.Номенклатура И Остатки.ХарактеристикаНоменклатуры = ТЧЗаказа.ХарактеристикаНоменклатуры";
	Иначе
		ТекстЗапросаПоТЧЗаказа = "
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, минимум(НомерСтроки) КАК НомерСтроки
		|				ИЗ Документ.ЗаказПокупателя.ВозвратнаяТара
		|				ГДЕ Ссылка = &Сделка
		|				Сгруппировать по Номенклатура) КАК ТЧЗаказа
		|ПО Остатки.Номенклатура = ТЧЗаказа.Номенклатура";
	КонецЕсли;
	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	
	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",       Сделка);
	Запрос.УстановитьПараметр("Склад",        Склад);
	Запрос.УстановитьПараметр("СтатусТары",   Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	//Формирование временной таблицы
	МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЕстьТоварыСУчетомПоСерии = ложь;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Остатки.Номенклатура                 КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|	Остатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	Остатки.Цена                         КАК Цена,
	|	Остатки.ПроцентСкидкиНаценки         КАК ПроцентСкидкиНаценки,
	|	Остатки.ПроцентАвтоматическихСкидок  КАК ПроцентАвтоматическихСкидок,
	|	Остатки.УсловиеАвтоматическойСкидки  КАК УсловиеАвтоматическойСкидки,
	|	Остатки.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
	|	Остатки.СтавкаНДС                    КАК СтавкаНДС,
	|	Остатки.КоличествоОстаток            КАК КоличествоОстаток,
	|	Остатки.СуммаВзаиморасчетовОстаток   КАК СуммаВзаиморасчетовОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиПоЗаказу
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор
	|                                                И ЗаказПокупателя = &Сделка
	|" + ?(ТабличнаяЧасть = Товары, "                И СтатусПартии <> &СтатусТары",  "                И СтатусПартии = &СтатусТары") + ") КАК Остатки
	|ГДЕ КоличествоОстаток>0";
	Запрос.Выполнить();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	//Условие используется в виртуальной таблице остатков
	УсловиеСклад = "";
	Если мУказаниеСкладовВТЧ Тогда
		Если ЗначениеЗаполнено(ДокументОснование.СкладГруппа)
			И ТипЗнч(ДокументОснование.СкладГруппа) = Тип("СправочникСсылка.ГруппыДоступностиСкладов") Тогда
			ГруппаДоступностиСкладов = ДокументОснование.СкладГруппа;
		Иначе
			ГруппаДоступностиСкладов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ГруппаДоступностиСкладов");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГруппаДоступностиСкладов) Тогда
			Запрос.УстановитьПараметр("ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);
			
			УсловиеСклад = 
				" И Склад В (
				|	ВЫБРАТЬ
				|		ГруппыДоступности.Склад
				|	ИЗ
				|		РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
				|	ГДЕ ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов)";	
		КонецЕсли;		
	Иначе
		УсловиеСклад = " И Склад = &Склад";
	КонецЕсли; 
	
	УсловиеОстатки = "Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ВременнаяТаблицаОстаткиПоЗаказу)" + УсловиеСклад;
	
	ПревышатьОстаткиОрганизации = УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации(Организация);
	
	Если НЕ ПревышатьОстаткиОрганизации Тогда
		УсловиеОстаткиОрганизаций = "Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ ВременнаяТаблицаОстаткиПоЗаказу)";
		ПараметрыУП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
		Если ПараметрыУП <> Неопределено И ПараметрыУП.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			УсловиеОстаткиОрганизаций = УсловиеОстаткиОрганизаций + УсловиеСклад;
		КонецЕсли; 
	КонецЕсли; 
	
	Запрос.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура                 КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|	Остатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Остатки.Номенклатура.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
	|	Остатки.Цена                         КАК Цена,
	|	Остатки.ПроцентСкидкиНаценки         КАК ПроцентСкидкиНаценки,
	|	Остатки.ПроцентАвтоматическихСкидок  КАК ПроцентАвтоматическихСкидок,
	|	Остатки.УсловиеАвтоматическойСкидки  КАК УсловиеАвтоматическойСкидки,
	|	Остатки.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
	|	NULL                                 КАК Склад,
	|	NULL                                 КАК СортировкаПоСкладу,
	|	Остатки.СтавкаНДС                    КАК СтавкаНДС,
	|	Остатки.КоличествоОстаток            КАК КоличествоОстатокПоЗаказу,
	|	Остатки.СуммаВзаиморасчетовОстаток   КАК СуммаОстатокПоЗаказу,
	|	0                                    КАК ОстатокНаСкладе,
	|	0                                    КАК ОстатокРезерваПоСделке,
	|	0                                    КАК ОстатокРезерва,
	|	0                                    КАК ОстатокКПередаче,
	|	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL 
	|		ТОГДА 9999999 
	|		ИНАЧЕ ТЧЗаказа.НомерСтроки 
	|	КОНЕЦ                                КАК НомерСтрокиЗаказа"
	
	+ ?(ТабличнаяЧасть = Товары, 
	"	, ТЧЗаказа.ЕдиницаИзмеренияМест      КАК ЕдиницаИзмеренияМест", "")
	
	//>>250816 Степанов 
	+ ?(ТабличнаяЧасть = Товары, 
	"	, ТЧЗаказа.НомерСтрокиПолучателя     КАК НомерСтрокиПолучателя", "")
	+ ?(ТабличнаяЧасть = Товары, 
	"	, ТЧЗаказа.НомерСтрокиТовара         КАК НомерСтрокиТовара", "")
	+ ?(ТабличнаяЧасть = Товары, 
	"	, ТЧЗаказа.УстановкаСкидокНоменклатуры КАК УстановкаСкидокНоменклатуры", "")
	//<<
	
	+ ?(ТабличнаяЧасть = Товары И НЕ ПревышатьОстаткиОрганизации, "
	|	, ВЫБОР КОГДА ОстаткиОрганизации.КоличествоОстаток ЕСТЬ NULL 
	|		ТОГДА 0 
	|		ИНАЧЕ ОстаткиОрганизации.КоличествоОстаток 
	|	КОНЕЦ КАК КоличествоОстатокОрганизации", "") + "
	|ИЗ
	|	ВременнаяТаблицаОстаткиПоЗаказу КАК Остатки
	
	|" + ?(ТабличнаяЧасть = Товары И НЕ ПревышатьОстаткиОрганизации,
	"ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаОстатков, 
	|								 Организация = &Организация %Условие_Качество% 
	|								И " + УсловиеОстаткиОрганизаций + "
	|   ) КАК ОстаткиОрганизации
	|ПО
	|	Остатки.Номенклатура = ОстаткиОрганизации.Номенклатура 
	|	И Остатки.ХарактеристикаНоменклатуры = ОстаткиОрганизации.ХарактеристикаНоменклатуры", "") + " 
	
	|
	|" + ТекстЗапросаПоТЧЗаказа + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|	ОстаткиНаСкладе.Номенклатура                                     КАК Номенклатура,
	|	ОстаткиНаСкладе.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	NULL                                                             КАК ЕдиницаХранения,
	|	NULL                                                             КАК КоэффициентЕдиницыХранения,
	|	ОстаткиНаСкладе.Номенклатура.ВестиУчетПоСериям 					 КАК ВестиУчетПоСериям,
	|	0                                                                КАК Цена,
	|	0                                                                КАК ПроцентСкидкиНаценки,
	|	0                                                                КАК ПроцентАвтоматическихСкидок,
	|	NULL                                                             КАК УсловиеАвтоматическойСкидки,
	|	NULL                                                             КАК ЗначениеУсловияАвтоматическойСкидки,
	|	ОстаткиНаСкладе.Склад                                            КАК Склад,
	|	ВЫБОР КОГДА ОстаткиНаСкладе.Склад = &Склад ТОГДА
	|	0
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                       КАК СортировкаПоСкладу,
	|	ОстаткиНаСкладе.Номенклатура.СтавкаНДС      КАК СтавкаНДС,
	|	0                                           КАК КоличествоОстатокПоЗаказу,
	|	0                                           КАК СуммаОстатокПоЗаказу,
	|	ОстаткиНаСкладе.КоличествоОстаток           КАК ОстатокНаСкладе,
	|   РезервыОстаткиПоСделке.КоличествоОстаток    КАК ОстатокРезерваПоСделке,
	|   РезервыОстатки.КоличествоОстаток            КАК ОстатокРезерва,
	|   КПередаче.КоличествоОстаток                 КАК ОстатокКПередаче,
	|	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL 
	|		ТОГДА 9999999 
	|		ИНАЧЕ ТЧЗаказа.НомерСтроки 
	|	КОНЕЦ                                       КАК НомерСтрокиЗаказа"
	
	+ ?(ТабличнаяЧасть = Товары, "
	|	, ТЧЗаказа.ЕдиницаИзмеренияМест             КАК ЕдиницаИзмеренияМест", "")
	
	//>>250816 Степанов 
	+ ?(ТабличнаяЧасть = Товары, 
	"	, ТЧЗаказа.НомерСтрокиПолучателя            КАК НомерСтрокиПолучателя", "")
	+ ?(ТабличнаяЧасть = Товары, 
	"	, ТЧЗаказа.НомерСтрокиТовара                КАК НомерСтрокиТовара", "")
	+ ?(ТабличнаяЧасть = Товары, 
	"	, ТЧЗаказа.УстановкаСкидокНоменклатуры КАК УстановкаСкидокНоменклатуры", "")
	//<<
	
	+ ?(ТабличнаяЧасть = Товары И НЕ ПревышатьОстаткиОрганизации, "
	|	, 0                                         КАК КоличествоОстатокОрганизации", "") + "
	|		
	|   ИЗ
	|   // остатки на складе
	|	(ВЫБРАТЬ
	|		Склад КАК Склад,
	|		Номенклатура КАК Номенклатура,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Склад КАК Склад,
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, " + УсловиеОстатки + "
	|										%Условие_Качество%
	|			)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			Склад КАК Склад,
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков, " + УсловиеОстатки + "
	| 										%Условие_Качество%
	|			)
	|		) КАК ОстаткиНаСкладе
	|		СГРУППИРОВАТЬ ПО
	|			Склад,
	|			Номенклатура,
	|			ХарактеристикаНоменклатуры
	|	) КАК ОстаткиНаСкладе
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ //Резервы по сделке
	|		РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков," + УсловиеОстатки + "
	|										И ДокументРезерва = &Сделка
	|		) КАК РезервыОстаткиПоСделке
	|	ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстаткиПоСделке.Номенклатура"
		+ ?(ТабличнаяЧасть = Товары, Символы.ПС + "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстаткиПоСделке.ХарактеристикаНоменклатуры ", "")	
		+ ?(мУказаниеСкладовВТЧ, Символы.ПС + "И ОстаткиНаСкладе.Склад = РезервыОстаткиПоСделке.Склад", "") 
		+ " 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков," + УсловиеОстатки + "
	|	                                   И ДокументРезерва <> &Сделка
	|		) КАК РезервыОстатки
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстатки.Номенклатура"
		+ ?(ТабличнаяЧасть = Товары, Символы.ПС + "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстатки.ХарактеристикаНоменклатуры ", "")	
		+ ?(мУказаниеСкладовВТЧ, Символы.ПС + "И ОстаткиНаСкладе.Склад = РезервыОстатки.Склад", "") 
		+ " 
	|ЛЕВОЕ СОЕДИНЕНИЕ // к передаче
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаОстатков," + УсловиеОстатки + "
	| 										%Условие_Качество%
	|										И СтатусПартии " + ?(ТабличнаяЧасть = Товары, " <> &СтатусТары", " = &СтатусТары") + "
	|	) КАК КПередаче
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = КПередаче.Номенклатура"
		+ ?(ТабличнаяЧасть = Товары, Символы.ПС + "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = КПередаче.ХарактеристикаНоменклатуры ", "")
		+ ?(мУказаниеСкладовВТЧ, Символы.ПС + "И ОстаткиНаСкладе.Склад = КПередаче.Склад", "")
		+ "
	|" + СтрЗаменить(ТекстЗапросаПоТЧЗаказа, "Остатки.", "ОстаткиНаСкладе.");
	
	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст,"%Условие_Качество%"," И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый) ");
	Иначе
		Запрос.Текст = стрЗаменить(Запрос.Текст,"%Условие_Качество%"," ");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Таблица остатков по заказу по результатам запроса
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	ТаблицаПоЗаказу.Сортировать("НомерСтрокиЗаказа возр");
	
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	// Таблица остатков на складах, резервов и т. п.
	ТаблицаПоОстаткам = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоОстаткам.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоОстаткам.Получить(Сч);
		Если СтрокаТаблицы.ОстатокНаСкладе <= 0 Тогда
			ТаблицаПоОстаткам.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	ТаблицаПоОстаткам.Сортировать("СортировкаПоСкладу, ОстатокРезерваПоСделке УБЫВ");
	
	// Нам надо знать сколько на самом деле осталось конкретной номенклатуры 
	// с конкретной характеристикой	по данному заказу, поскольку в разрезе цен и скидок
	// остаки могут расходится
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
	Если ТабличнаяЧасть = Товары Тогда
		Если ПревышатьОстаткиОрганизации Тогда
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
		Иначе
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, КоличествоОстатокОрганизации","КоличествоОстатокПоЗаказу");
		КонецЕсли;
	Иначе
		ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
	КонецЕсли;
	
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	
	ЕстьРеквизитПроцентСкидкиНаценки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", Метаданные(), ИмяТабличнойЧасти);
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", Метаданные(), ИмяТабличнойЧасти);	

	Для каждого СтрокаТаблицы ИЗ ТаблицаБезЦен Цикл
		
		Если ТабличнаяЧасть = Товары Тогда
			Если ПревышатьОстаткиОрганизации Тогда
				ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
			Иначе
				ОстатокКоличестваПоЗаказу = Мин(СтрокаТаблицы.КоличествоОстатокПоЗаказу, СтрокаТаблицы.КоличествоОстатокОрганизации);
			КонецЕсли;
		Иначе
			ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		КонецЕсли;
		
		СтрокиЗаказа   = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);
		СтрокиОстатков = ТаблицаПоОстаткам.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
			
			Если ОстатокКоличестваПоЗаказу <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаЗаказа.КоличествоОстатокПоЗаказу <= 0 Тогда
				Продолжить;
			Иначе
				ОстатокКоличестваПоСтрокеЗаказа = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			КонецЕсли;
			
			//  Делаем два прохода в первом списываем все резервы по сделке, во втором, если
			//  количество еще не выбрано, то добираем из свободных остатков.
			Для Сч = 1 По 2 Цикл
				
				Если ОстатокКоличестваПоСтрокеЗаказа <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
					
					Если ОстатокКоличестваПоСтрокеЗаказа <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаОстатков.ОстатокНаСкладе = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					
					РезервПоСделке           = ?(СтрокаОстатков.ОстатокРезерваПоСделке = NULL, 0, СтрокаОстатков.ОстатокРезерваПоСделке);
					РезервПоДругимСделкам    = ?(СтрокаОстатков.ОстатокРезерва         = NULL, 0, СтрокаОстатков.ОстатокРезерва);
					КПередаче                = ?(СтрокаОстатков.ОстатокКПередаче       = NULL, 0, СтрокаОстатков.ОстатокКПередаче);
					СвободныйОстатокНаСкладе = Макс(СтрокаОстатков.ОстатокНаСкладе - РезервПоДругимСделкам - КПередаче, 0);
					
					КоличествоКСписанию   = ?(Сч = 1, Мин(Макс(СтрокаОстатков.ОстатокНаСкладе-КПередаче,0), РезервПоСделке), Макс(СвободныйОстатокНаСкладе-РезервПоСделке,0));
					КоличествоКЗаполнению = Мин(КоличествоКСписанию, Мин(ОстатокКоличестваПоЗаказу,  ОстатокКоличестваПоСтрокеЗаказа));
					
					Если КоличествоКЗаполнению = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОстатокКоличестваПоЗаказу       = ОстатокКоличестваПоЗаказу       - КоличествоКЗаполнению;
					ОстатокКоличестваПоСтрокеЗаказа = ОстатокКоличестваПоСтрокеЗаказа - КоличествоКЗаполнению;
					СтрокаОстатков.ОстатокНаСкладе  = СтрокаОстатков.ОстатокНаСкладе  - КоличествоКЗаполнению;
					
					СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
					
					СтрокаТабличнойЧасти.Номенклатура = СтрокаОстатков.Номенклатура;
					
					Если ТабличнаяЧасть = Товары Тогда
						Если не ЕстьТоварыСУчетомПоСерии И СтрокаОстатков.ВестиУчетПоСериям Тогда
							ЕстьТоварыСУчетомПоСерии = истина;
						КонецЕсли;

						СтрокаТабличнойЧасти.Количество       = ?(НЕ ЗначениеЗаполнено(СтрокаЗаказа.Коэффициент), 0,
						КоличествоКЗаполнению * СтрокаЗаказа.КоэффициентЕдиницыХранения / СтрокаЗаказа.Коэффициент);
						СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаЗаказа.ЕдиницаИзмерения;
						СтрокаТабличнойЧасти.Коэффициент      = СтрокаЗаказа.Коэффициент;
						
						Если ЗначениеЗаполнено(СтрокаЗаказа.ЕдиницаИзмеренияМест) Тогда
							СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаЗаказа.ЕдиницаИзмеренияМест;
							ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						Иначе
							ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						КонецЕсли;
						
						СтрокаТабличнойЧасти.СтавкаНДС                           = СтрокаЗаказа.СтавкаНДС;
						СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры          = СтрокаОстатков.ХарактеристикаНоменклатуры;

						СтрокаТабличнойЧасти.ПроцентСкидкиНаценки                = СтрокаЗаказа.ПроцентСкидкиНаценки;
						СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок         = СтрокаЗаказа.ПроцентАвтоматическихСкидок;
						СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки         = СтрокаЗаказа.УсловиеАвтоматическойСкидки;
						СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = СтрокаЗаказа.ЗначениеУсловияАвтоматическойСкидки;
						//>>250816 Степанов 54372
						СтрокаТабличнойЧасти.УстановкаСкидокНоменклатуры         = СтрокаЗаказа.УстановкаСкидокНоменклатуры;
						СтрокаТабличнойЧасти.НомерСтрокиПолучателя               = СтрокаЗаказа.НомерСтрокиПолучателя;
						СтрокаТабличнойЧасти.НомерСтрокиТовара                   = СтрокаЗаказа.НомерСтрокиТовара;
						//<<
						СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
						Сделка.ВалютаДокумента, ВалютаДокумента,
						ЗаполнениеДокументов.КурсДокумента(Сделка, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
						ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
						Сделка.СуммаВключаетНДС,
						УчитыватьНДС,
						СуммаВключаетНДС,
						УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						
						//{28.11.2016 Островерхий заявка №57373 
						СтруктураОтбора = Новый Структура;
						СтруктураОтбора.Вставить("Номенклатура"					, СтрокаТабличнойЧасти.Номенклатура);
						СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры"	, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
						
						НайдемСтроку = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Сделка.Товары, СтруктураОтбора);
						
						Если Не НайдемСтроку = Неопределено Тогда
						
							СтрокаТабличнойЧасти.ПЦ_ПроцентДопИзмененияЦены = НайдемСтроку.ПЦ_ПроцентДопИзмененияЦены;  	
						
						КонецЕсли; 
						//28.11.2016 Островерхий}
				
					Иначе
						
						СтрокаТабличнойЧасти.Количество = КоличествоКЗаполнению;
						СтрокаТабличнойЧасти.Цена       = СтрокаЗаказа.Цена;
					КонецЕсли;
					Если РезервПоСделке > 0 Тогда
						СтрокаОстатков.ОстатокРезерваПоСделке                = СтрокаОстатков.ОстатокРезерваПоСделке - КоличествоКЗаполнению;
					КонецЕсли;

					Если ТабличнаяЧасть = Товары Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					Иначе
						ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					КонецЕсли;
					
					Если ТабличнаяЧасть = Товары Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
					КонецЕсли;
					
					Если Сч = 1 Тогда
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
					Иначе
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
					КонецЕсли;
					
					СтрокаТабличнойЧасти.Склад           = СтрокаОстатков.Склад;
					СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
					
					Если ТабличнаяЧасть = Товары Тогда
						ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
					Иначе
						ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
					КонецЕсли;
					
				КонецЦикла; // По строкам остатков
			КонецЦикла;  // по проходам
		КонецЦикла; // по строкам заказа
	КонецЦикла;    // по строкам таблицы (без цен)
	
	//Заполнение серий
	Если ТабличнаяЧасть = Товары И ЕстьТоварыСУчетомПоСерии Тогда
		ЗаполнитьПоСериям(ДатаОстатков);
	КонецЕсли;
	
	// Заполнение табличной части СоставНабора
	Если ТабличнаяЧасть = Товары
		И ДокументОснование.СоставНабора.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПарДокумент", ДокументОснование);
		Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	Док.Номенклатура,
		|	Док.ХарактеристикаНоменклатуры,
		|	Док.СерияНоменклатуры,
		|	Док.ЕдиницаИзмеренияМест,
		|	Док.ЕдиницаИзмерения,
		|	Док.Количество,
		|	Док.Коэффициент,
		|	Док.Цена,
		|	Док.СтавкаНДС,
		|	Док.ПроцентСкидкиНаценки,
		|	Док.ПроцентАвтоматическихСкидок,
		|	Док.УсловиеАвтоматическойСкидки,
		|	Док.ЗначениеУсловияАвтоматическойСкидки,
		|	Док.Сумма,
		|	Док.Ссылка.ВалютаДокумента         КАК ВалютаДокумента,
		|	Док.Ссылка.СуммаВключаетНДС        КАК СуммаВключаетНДС,
		|	Док.Ссылка.КратностьВзаиморасчетов КАК КратностьДокумента,
		|	Док.Ссылка.КурсВзаиморасчетов      КАК КурсДокумента,
		|	ВЫБОР 
		|		КОГДА Док.Размещение ССЫЛКА Справочник.Склады ТОГДА Док.Размещение
		|		КОГДА Док.Ссылка.СкладГруппа ССЫЛКА Справочник.Склады ТОГДА Док.Ссылка.СкладГруппа
		|		ИНАЧЕ &ПустойСклад
		|	КОНЕЦ                              КАК Склад,
		|	ВЫБОР 
		|		КОГДА Остатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ Остатки.КоличествоОстаток
		|	КОНЕЦ                              КАК Остаток,
		|	Док.КлючСтроки
		|
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ПарДокумент) КАК Остатки
		|		ПО Остатки.Номенклатура               = Док.Номенклатура
		|		 И Остатки.ХарактеристикаНоменклатуры = Док.ХарактеристикаНоменклатуры
		|
		|ГДЕ
		|	Док.Ссылка = &ПарДокумент
		|	И Док.Номенклатура.Комплект
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавленКомплект = Ложь;
		Выборка          = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОстатокКоличестваПоЗаказу = Мин(Выборка.Количество, Выборка.Остаток);
			
			Если ОстатокКоличестваПоЗаказу = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			
			НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры          = Выборка.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры                   = Выборка.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения                    = Выборка.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест                = Выборка.ЕдиницаИзмеренияМест;
			НоваяСтрока.Коэффициент                         = Выборка.Коэффициент;
			НоваяСтрока.Количество                          = ОстатокКоличестваПоЗаказу;
			НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
			НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;
			
			НоваяСтрока.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
					Выборка.ВалютаДокумента, 
					ВалютаДокумента, 
					Выборка.КурсДокумента, 
					ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
					Выборка.КратностьДокумента, 
					ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			НоваяСтрока.Качество                     = Справочники.Качество.Новый;
			НоваяСтрока.Склад                        = Выборка.Склад;
			НоваяСтрока.КлючСтроки                   = Выборка.КлючСтроки;
			НоваяСтрока.ЗаказПокупателя              = Сделка;

			ДобавленКомплект                         = Истина;
		КонецЦикла;
		
		Если ДобавленКомплект Тогда
			УправлениеЗапасами.ЗаполнитьСоставНабораПоОснованию(ЭтотОбъект, ДокументОснование, Истина);
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя()

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткамУпр() Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	КурсСделки = ЗаполнениеДокументов.КурсДокумента(Сделка,     мВалютаРегламентированногоУчета);
	КратностьСделки = ЗаполнениеДокументов.КратностьДокумента(Сделка,     мВалютаРегламентированногоУчета);
	ОстаткиУслуг = УправлениеЗаказами.ОстаткиУслугПоЗаказуПокупателя( Сделка, ДоговорКонтрагента, ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
		ОрганизацияЯвляетсяПлательщикомЕНВД = ПараметрыУчетнойПолитики.ОрганизацияЯвляетсяПлательщикомЕНВД;
	Иначе
		ОрганизацияЯвляетсяПлательщикомЕНВД = Ложь;
	КонецЕсли;	
	
	Для каждого Строка из ОстаткиУслуг цикл
		СтрокаУслуг = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУслуг,Строка);
		СтрокаУслуг.Содержание = СокрЛП(СтрокаУслуг.Содержание);
		СтрокаУслуг.Количество                          = Строка.КолОстаток;
		СтрокаУслуг.Цена                                = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.Цена,
			   Сделка.ВалютаДокумента, ВалютаДокумента,
			   КурсСделки,
			   Курс,
			   КратностьСделки,
			   Кратность);
			
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаУслуг, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаУслуг, ЭтотОбъект);
		СтрокаУслуг.ЗаказПокупателя = Сделка;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаУслуг, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете); 
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьУслугиПоОстаткам()

// Заполняет табличную часть при оперативном проведении
//
// Параметры:
//  ЗаполнятьПредоплату - Булево.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением(ЗаполнятьПредоплату = Истина) Экспорт

	ЗаполнитьСкладыВТЧ();

	// Сформируем массив номенклатуры по товарам и таре для фильтров запросов.
	ТЗТовары = Товары.Выгрузить(, "Номенклатура");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "Номенклатура"), ТЗТовары);
	ТЗТовары.Свернуть("Номенклатура");

	МассивНоменклатуры = ТЗТовары.ВыгрузитьКолонку("Номенклатура");

	// Сформируем массив складов для фильтров запросов.
	СкладИзШапки = Не мУказаниеСкладовВТЧ;

	Если СкладИзШапки Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		ТЗСклады = Товары.Выгрузить(, "Склад");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "Склад"), ТЗСклады);
		ТЗСклады.Свернуть("Склад");

		МассивСклады = ТЗСклады.ВыгрузитьКолонку("Склад");

		КолвоЭлементов = МассивСклады.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			ТекЭлемент = МассивСклады[КолвоЭлементов - ОбратныйИндекс];

			Если Не ЗначениеЗаполнено(ТекЭлемент)Тогда
				МассивСклады.Удалить(КолвоЭлементов - ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОстаткиТоваровВРезерве.Склад,
	|	ОстаткиТоваровВРезерве.Номенклатура,
	|	ОстаткиТоваровВРезерве.ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровВРезерве.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва В (&МассивЗаказов)
	|	   И Склад В (&МассивСклады)
	|	   И Номенклатура В (&МассивНоменклатуры)
	|	) КАК ОстаткиТоваровВРезерве
	|");

	ТЗЗаказы = Товары.Выгрузить(, "ЗаказПокупателя");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "ЗаказПокупателя"), ТЗЗаказы);
	ТЗЗаказы.Свернуть("ЗаказПокупателя");

	Запрос.УстановитьПараметр("Ссылка"            , Ссылка);
	Запрос.УстановитьПараметр("МассивЗаказов"     , ТЗЗаказы.ВыгрузитьКолонку("ЗаказПокупателя"));
	Запрос.УстановитьПараметр("МассивСклады"      , МассивСклады);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);

	Таблица = Запрос.Выполнить().Выгрузить();

	ПустаяХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	// Сначала вычтем из найденных остатков количество, размещение по которому явно указан
	// способ списания "из резерва". Для этого последовательно обойдем табличные части 
	// Товары и Возвратная тара.
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;
		
		// Сначала вычтем из найденных остатков количество, по которому явно указан
		// способ списания "из резерва". Для этого последовательно обойдем табличные части 
		// Товары и Возвратная тара.
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			// Сначала обходим все строки, у которых уже установлен способ списание "из резерва",
			// если способ списание "со склада" или не установлен - пропускаем строку
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособСписанияОстаткаТоваров)
				ИЛИ СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;
			
			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
			
			// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
			КоличествоОсталосьПогасить = СтрокаТЧ.Количество;
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					// Это ошибка: списываемое количество не должно быть больше остатка.
					// Такой документ не проведется оперативно.
					КоэффСписания = 1;
				КонецЕсли;
				
				СписанноеКоличество        = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;
				Строка.Количество          = Строка.Количество - СписанноеКоличество;
				
			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				// Значит в документе неверно задан способ списания. Заполнять не будем
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Заполним массив, хранящий две таблицы значений, в которых задано распределение по
	// способу списания для товаров и возвратной тары
	МассивТаблицСтрок = Новый Массив(2);
	
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;
		
		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");
		
		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.Выгрузить();
		МассивТаблицСтрок[Сч].Очистить();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");
		
		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл
			
			Если СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				Продолжить;
			КонецЕсли;
			
			// Пересчитаем в единицы хранения
			СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;
			
			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
			
			// Погашаем количество в таблице
			КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;
			СуммаОсталосьПогасить      = СтрокаТЧ.Сумма;
			
			// Погашаем количество в таблице, записывая способ списания
			Для Каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока                      = МассивТаблицСтрок[Сч].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Количество           = СписанноеКоличество;
				
				КоэффПогашения                           = СписанноеКоличество / КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                        = Окр(СуммаОсталосьПогасить * КоэффПогашения, 2 ,1);
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
				КоличествоОсталосьПогасить               = КоличествоОсталосьПогасить - СписанноеКоличество;
				СуммаОсталосьПогасить                    = СуммаОсталосьПогасить - НоваяСтрока.Сумма;
				
				
				// Уменьшаем количество в исходной строке
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;
				
				// Уменьшаем количество в строке остатков
				Строка.Количество   = Строка.Количество - СписанноеКоличество;
				
			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока                      = МассивТаблицСтрок[Сч].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Количество           = КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                = Окр(СуммаОсталосьПогасить, 2, 1);
				
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;
		
		ТекИндексИсходнойСтроки = Неопределено;
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл
			
			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
				
				Стр                              = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока              = ТабличнаяЧасть.Добавить();
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
				
				Если ЭтоТовары Тогда
					РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
					РедактируемаяСтрока.СтавкаНДС                  = Стр.СтавкаНДС;
					РедактируемаяСтрока.ПроцентСкидкиНаценки       = Стр.ПроцентСкидкиНаценки;
					РедактируемаяСтрока.ПроцентАвтоматическихСкидок= Стр.ПроцентАвтоматическихСкидок;
					РедактируемаяСтрока.УсловиеАвтоматическойСкидки         = Стр.УсловиеАвтоматическойСкидки;
					РедактируемаяСтрока.ЗначениеУсловияАвтоматическойСкидки = Стр.ЗначениеУсловияАвтоматическойСкидки;
				КонецЕсли;
			Иначе
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
			КонецЕсли;
			
			РедактируемаяСтрока.СпособСписанияОстаткаТоваров = Строка.СпособСписанияОстаткаТоваров;
			РедактируемаяСтрока.Склад                        = Строка.Склад;
			РедактируемаяСтрока.ЗаказПокупателя              = Строка.ЗаказПокупателя;
			
			Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(РедактируемаяСтрока, Строка);			
			
			Если ЭтоТовары Тогда
				
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
			Иначе
				РедактируемаяСтрока.Цена  = ?(РедактируемаяСтрока.Количество <> 0, РедактируемаяСтрока.Сумма/РедактируемаяСтрока.Количество, 0);
			КонецЕсли;
			
			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;
			
		КонецЦикла;
	КонецЦикла;
	
	Если мЕстьКолонкаСерии Тогда
		ЗаполнитьПоСериям();
	КонецЕсли;
	
	Если ЗаполнятьПредоплату Тогда
		УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
		УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",		СчетаУчета.СчетРасчетовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",			СчетаУчета.СчетАвансовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТаре",				СчетаУчета.СчетУчетаТарыПокупателя);
		
		Если НЕ мИспользоватьРасширеннуюАналитику ИЛИ НачалоДня(мДатаНачалаИспользованияРасширеннойАналитики)>НачалоДня(Дата) Тогда
			
			//Эти реквизиты не используются при РА
			СтруктураСчетов.Вставить("СчетУчетаДоходовПоТареБУ",			СчетаУчета.СчетУчетаДоходовПоТареБУ);
			СтруктураСчетов.Вставить("СчетУчетаРасходовПоТареБУ",			СчетаУчета.СчетУчетаРасходовПоТареБУ);
			СтруктураСчетов.Вставить("СтатьяПрочихДоходовРасходовПоТаре",	СчетаУчета.СтатьяПрочихДоходовРасходовПоТаре);
			
			Если ОтражатьВНалоговомУчете Тогда
				СтруктураСчетов.Вставить("СчетУчетаДоходовПоТареНУ",			СчетаУчета.СчетУчетаДоходовПоТареНУ);
				СтруктураСчетов.Вставить("СчетУчетаРасходовПоТареНУ",			СчетаУчета.СчетУчетаРасходовПоТареНУ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьТовары(ДокументОснование = Неопределено) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуТовары.ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.ЕдиницаИзмеренияМест,
	|	СчетНаОплатуТовары.Количество,
	|	СчетНаОплатуТовары.КоличествоМест,
	|	СчетНаОплатуТовары.Коэффициент,
	|	СчетНаОплатуТовары.Номенклатура,
	|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры,
	|	СчетНаОплатуТовары.Цена,
	|	СчетНаОплатуТовары.ПроцентСкидкиНаценки,
	|	СчетНаОплатуТовары.ПроцентАвтоматическихСкидок,
	|	СчетНаОплатуТовары.УсловиеАвтоматическойСкидки,
	|	СчетНаОплатуТовары.ЗначениеУсловияАвтоматическойСкидки,
	|	СчетНаОплатуТовары.ЗаказПокупателя,
	|	СчетНаОплатуТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуТовары.Сумма,
	|	СчетНаОплатуТовары.СтавкаНДС,
	|	СчетНаОплатуТовары.СуммаНДС,
	|	СчетНаОплатуТовары.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуТовары.Ссылка.УчитыватьНДС          КАК УчитыватьНДС,
	|	СчетНаОплатуТовары.КлючСтроки";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуТовары
	|
	|ГДЕ
	|	СчетНаОплатуТовары.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуТовары.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры          = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения                    = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест                = Выборка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Коэффициент                         = Выборка.Коэффициент;
		НоваяСтрока.Количество                          = Выборка.Количество;
		НоваяСтрока.КоличествоМест                      = Выборка.КоличествоМест;
		НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		НоваяСтрока.ЗаказПокупателя                     = Выборка.ЗаказПокупателя;
		НоваяСтрока.Склад                               = ДокументОснование.Склад;
		НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;
		
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
		Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность),
		Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		Выборка.СуммаВключаетНДС,
		УчитыватьНДС,
		СуммаВключаетНДС,
		УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		НоваяСтрока.Качество                     = Справочники.Качество.Новый;
		НоваяСтрока.КлючСтроки                   = Выборка.КлючСтроки;
		
	КонецЦикла;
	
	Если ДокументОснование.СоставНабора.Количество() > 0 Тогда
		СоставНабора.Загрузить(ДокументОснование.СоставНабора.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры // СкопироватьТовары()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьВозвратнуюТару(ДокументОснование = Неопределено) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуВозвратнаяТара.Количество,
	|	СчетНаОплатуВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуВозвратнаяТара.Сумма,
	|	СчетНаОплатуВозвратнаяТара.Цена,
	|	СчетНаОплатуВозвратнаяТара.ЗаказПокупателя,
	|	СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента	КАК ВалютаДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуВозвратнаяТара
	|
	|ГДЕ
	|	СчетНаОплатуВозвратнаяТара.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуВозвратнаяТара.НомерСтроки";

	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = Выборка.Количество;
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		НоваяСтрока.ЗаказПокупателя              = Выборка.ЗаказПокупателя;
		НоваяСтрока.Склад                        = ДокументОснование.Склад;
	КонецЦикла;
	
КонецПроцедуры // СкопироватьВозвратнуюТару()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьУслуги(ДокументОснование = Неопределено) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуУслуги.Содержание,
	|	СчетНаОплатуУслуги.Количество,
	|	СчетНаОплатуУслуги.Номенклатура,
	|	СчетНаОплатуУслуги.Цена,
	|	СчетНаОплатуУслуги.ПроцентСкидкиНаценки,
	|	СчетНаОплатуУслуги.ПроцентАвтоматическихСкидок,
	|	СчетНаОплатуУслуги.УсловиеАвтоматическойСкидки,
	|	СчетНаОплатуУслуги.ЗначениеУсловияАвтоматическойСкидки,
	|	СчетНаОплатуУслуги.ЗаказПокупателя,
	|	СчетНаОплатуУслуги.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуУслуги.Сумма,
	|	СчетНаОплатуУслуги.СтавкаНДС,
	|	СчетНаОплатуУслуги.СуммаНДС,
	|	СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуУслуги.Ссылка.УчитыватьНДС          КАК УчитыватьНДС";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуУслуги
	|
	|ГДЕ
	|	СчетНаОплатуУслуги.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуУслуги.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
		НоваяСтрока.Содержание                          = Выборка.Содержание;
		НоваяСтрока.Количество                          = Выборка.Количество;
		НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		НоваяСтрока.ЗаказПокупателя                     = Выборка.ЗаказПокупателя;
		
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;
		
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
		Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность),
		Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		Выборка.СуммаВключаетНДС,
		УчитыватьНДС,
		СуммаВключаетНДС,
		УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьУслуги()

Процедура ОбработкаЗаполненияРегл(Основание)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
		
		ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(Услуги        , "Услуги"        , ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет вид склада в табличной части Товары, при виде операции Оборудование
//                 Оборудование можно реализовывать только с Оптового склада
//
Процедура ПроверитьВидСкладаВТабличнойЧастиТовры(ТаблицаПоТоварам, Отказ = Ложь, Заголовок, ИмяРеквизита = Неопределено) Экспорт

	Для Каждого СтрокаТовара Из ТаблицаПоТоварам Цикл
		Если ЗначениеЗаполнено(СтрокаТовара.Склад) Тогда
			ВидСклада = ?(ИмяРеквизита = Неопределено, СтрокаТовара.Склад.ВидСклада, СтрокаТовара[ИмяРеквизита]);
			Если ВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке номер "+ СтрокаТовара.НомерСтроки +
					" табличной части Оборудование: содержится склад с видом не равным ""Оптовый"". Такого быть не должно!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Заполняет таблицу скидок для проведения.
//
// Параметры: 
//  ТаблицаТоваров          - таблица значений по товарам,
//  ТаблицаУслуг            - таблица значений по скидкам,
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, ТаблицаПоУслугам, СтруктураШапкиДокумента) Экспорт
	
	МетаданныеДокумента = Метаданные();
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	//>>170915 Степанов №44117
	ТаблицаДвижений.Колонки.Добавить("ПЦ_ОграниченияСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя");
	ТаблицаДвижений.Колонки.Добавить("ПроцентСкидки");
	ТаблицаДвижений.Колонки.Добавить("ДокументСкидки");
	
	ЗапросКСтрокамЗаказа = Новый Запрос;
	ЗапросКСтрокамЗаказа.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок,
	|	ЗаказПокупателяТовары.ПроцентСкидкиНаценки,
	|	ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки.ПЦ_ОграниченияСкидки КАК ПЦ_ОграниченияСкидки
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Заказ";	
	
	
	//так как одна реализация на один заказ, получим сразу таблицу заказа
	//получаем заказ из шапки, если нет - то из табличной части
	СсылкаЗаказ = СтруктураШапкиДокумента.Сделка;
	Если (ТипЗнч(СсылкаЗаказ) = Тип("ДокументСсылка.ЗаказПокупателя")) и (СсылкаЗаказ<>Документы.ЗаказПокупателя.ПустаяСсылка()) Тогда 
		//ТаблицаТоваровЗаказа = СсылкаЗаказ.Товары.Выгрузить();
		ЗапросКСтрокамЗаказа.УстановитьПараметр("Заказ",СсылкаЗаказ);
		ТаблицаТоваровЗаказа = ЗапросКСтрокамЗаказа.Выполнить().Выгрузить();
	Иначе
		ТЗаказ = ТаблицаТоваров.Скопировать();
		ТЗаказ.Свернуть("ЗаказПокупателя");
		Для Каждого СтрокаТЗаказ из ТЗаказ цикл
			СсылкаЗаказ = СтрокаТЗаказ.ЗаказПокупателя;
		КонецЦикла;
		//ТаблицаТоваровЗаказа = СсылкаЗаказ.Товары.Выгрузить();
		ЗапросКСтрокамЗаказа.УстановитьПараметр("Заказ",СсылкаЗаказ);
		ТаблицаТоваровЗаказа = ЗапросКСтрокамЗаказа.Выполнить().Выгрузить();
	КонецЕсли;	
	//<<
	
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	//>>170915 Степанов №44117
	ТаблицаДвижений.Колонки.Добавить("СуммаНДССкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	//<<
	//>>181115 Степанов №45934
 	ТаблицаДвижений.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	//<<
	
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента, 2), ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		
		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			//>>240915 Степанов №44117
			//СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);
			СуммаСкидкиБезНДС = Окр(СтрокаТаблицы.Количество*СтрокаТаблицы.Цена - СтрокаТаблицы.СуммаДок,2);
			Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <= 0 Тогда
				СуммаСкидкиБезНДС = 0;
			ИначеЕсли СтрокаТаблицы.ПроцентСкидкиНаценки > 0 Тогда
				СуммаСкидкиБезНДС = Окр(СтрокаТаблицы.СуммаДок/(1 - СтрокаТаблицы.ПроцентАвтоматическихСкидок/100) - СтрокаТаблицы.СуммаДок,2);
			КонецЕсли;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаСкидкиБезНДС,2);
			Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
				СтрокаДвижений.СуммаНДССкидки = Окр(УчетНДС.РассчитатьСуммуНДС(СуммаСкидкиБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)),2);
			КонецЕсли;
			//<<240915
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
			//>>170915 Степанов №44117 
			СтрокаДвижений.ЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
			СтрокаДвижений.ПроцентСкидки = СтрокаТаблицы.ПроцентАвтоматическихСкидок;
			//далее подбор подходящей строки заказа для того, чтобы найти нужный приказ на скидку; исходим из того, что в заказе есть 
			//одна уникальная строка для данной номенклатуры
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
			Отбор.Вставить("ПроцентАвтоматическихСкидок",СтрокаТаблицы.ПроцентАвтоматическихСкидок);
			НайденныеСтрокиЗаказа = ТаблицаТоваровЗаказа.НайтиСтроки(Отбор);
			Если НайденныеСтрокиЗаказа.Количество()=0 тогда
				СтрокаСообщениеОбОшибке = "не найдена номенклатура в заказе! "+СтрокаТаблицы.ЗаказПокупателя; 
				Отказ = Истина;
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщениеОбОшибке, Отказ);
				Возврат 0;
			ИначеЕсли НайденныеСтрокиЗаказа.Количество()>1 тогда	
				СтрокаСообщениеОбОшибке = "в заказе обнаружены дубли номенклатуры в строках! "+СтрокаТаблицы.ЗаказПокупателя; 
				Отказ = Истина;
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщениеОбОшибке, Отказ);
				Возврат 2;
			КонецЕсли;	
			Для Каждого ТекущаяСтр Из НайденныеСтрокиЗаказа Цикл
				СтрокаДвижений.ДокументСкидки = ТекущаяСтр.ЗначениеУсловияАвтоматическойСкидки;
				СтрокаДвижений.ПЦ_ОграниченияСкидки = ТекущаяСтр.ПЦ_ОграниченияСкидки; 
			КонецЦикла;
			//>>181115 Степанов №45934
			Если СтрокаДвижений.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем тогда
				СтрокаДвижений.Количество = СтрокаТаблицы.Количество;
			КонецЕсли;
			//<<
		КонецЕсли;
		
		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки > 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			//>>240915 Степанов №44117
			//СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСкидкиБезНДС = Окр(СтрокаТаблицы.Количество*СтрокаТаблицы.Цена - СтрокаТаблицы.СуммаДок,2);
			Если СтрокаТаблицы.ПроцентСкидкиНаценки <= 0 Тогда
				СуммаСкидкиБезНДС = 0;
			ИначеЕсли СтрокаТаблицы.ПроцентАвтоматическихСкидок > 0 Тогда
				//>>080416 Степанов б/н исправление ошибки расчета ручной скидки
				//СуммаСкидкиБезНДС = Окр(СтрокаТаблицы.СуммаДок/(1 - СтрокаТаблицы.ПроцентСкидкиНаценки/100) - СтрокаТаблицы.СуммаДок,2);
				СуммаСкидкиБезНДС = СтрокаТаблицы.Количество*СтрокаТаблицы.Цена*СтрокаТаблицы.ПроцентСкидкиНаценки/100;
			КонецЕсли;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаСкидкиБезНДС,2);
			Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
				СтрокаДвижений.СуммаНДССкидки = Окр(УчетНДС.РассчитатьСуммуНДС(СуммаСкидкиБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)),2);
			КонецЕсли;
			//<<240915
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
			//>>170915 Степанов №44117 
			СтрокаДвижений.ЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
			СтрокаДвижений.ПроцентСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			//>>160316 Степанов это не нужно для ручных скидок
			////далее подбор подходящей строки заказа для того, чтобы найти нужный приказ на скидку; исходим из того, что в заказе есть 
			////одна уникальная строка для данной номенклатуры
			//Отбор = Новый Структура;
			//Отбор.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
			//Отбор.Вставить("ПроцентСкидкиНаценки",СтрокаТаблицы.ПроцентСкидкиНаценки);
			//НайденныеСтрокиЗаказа = ТаблицаТоваровЗаказа.НайтиСтроки(Отбор);
			//Если НайденныеСтрокиЗаказа.Количество()=0 тогда
			//	СтрокаСообщениеОбОшибке = "не найдена номенклатура в заказе!"; 
			//	ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщениеОбОшибке, Отказ);
			//	Если НЕ РольДоступна("ПолныеПрава") тогда
			//		Отказ = Истина;
			//	КонецЕсли;
			//	Возврат 0;
			//ИначеЕсли НайденныеСтрокиЗаказа.Количество()>1 тогда	
			//	СтрокаСообщениеОбОшибке = "в заказе обнаружены дубли номенклатуры в строках!"; 
			//	Если НЕ РольДоступна("ПолныеПрава") тогда
			//		Отказ = Истина;
			//		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщениеОбОшибке, Отказ);
			//	КонецЕсли;
			//	Возврат 2;
			//КонецЕсли;	
			//<<
		КонецЕсли;
		
		//>>240915 Степанов №44117
		//СуммаСоСкидкамиРеально = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВал, ВалютаДокумента,
		//СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		//СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		//СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		//Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		
		//Если Разница <> 0
		//	И СкидкиЕсть Тогда
		//	СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		//КонецЕсли;
		//<<240915
		
		//Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
				СтрокаТаблицы.Номенклатура,
				СтрокаТаблицы.ХарактеристикаНоменклатуры,
				Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Оптовая, ЭтотОбъект)) Тогда
				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));
				
				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;
				
				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;
					
					СтоимостьКомплектующей = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.КоличествоДок * Комплектующая.Количество,
					ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
					
					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;
				
				СуммаСкидки = СтоимостьКомплектующих - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма,
				ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
				
				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//>> нет скидок по услугам
	//Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
	//	СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.Количество, 2), ВалютаДокумента, 
	//	СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
	//	СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
	//	СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	//	
	//	СуммаСоСкидками = СуммаБезСкидки;
	//	СкидкиЕсть = Ложь;
	//	
	//	//Автоматические скидки.
	//	Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
	//		СтрокаДвижений = ТаблицаДвижений.Добавить();
	//		СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
	//		СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
	//		СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
	//		СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);
	//		
	//		СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
	//		СкидкиЕсть = Истина;
	//	КонецЕсли;
	//	
	//	//Ручные скидки.
	//	Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
	//		СтрокаДвижений = ТаблицаДвижений.Добавить();
	//		СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
	//		СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
	//		СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
	//		СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
	//		СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
	//		СкидкиЕсть = Истина;
	//	КонецЕсли;
	//	
	//	СуммаСоСкидкамиРеально = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВал, ВалютаДокумента,
	//	СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
	//	СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
	//	СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	//	Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
	//	
	//	Если Разница <> 0
	//		И СкидкиЕсть Тогда
	//		СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции // ПодготовитьТаблицуСкидок()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
	
	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	//{18.02.2015 Островерхий заявка №б/н 
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидокВВалюте" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьВВалюте" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	//18.02.2015 Островерхий} 
	//начало изменений Ожиганов 17.11.2015 приведение сумм по упр. учету к суммам бу, в случае если валюты совпадают
	ТаблицаТоваров.Колонки.Добавить("ПРГ_НДСВалДок"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	//конец изменений 
	
	//{28.11.2016 Островерхий заявка №57373 
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезДопСкидки" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("ВалютнаяСтоимостьБезДопСкидки" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2))); 
	//28.11.2016 Островерхий} 
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Цена, 
				ВалютаДокумента, СтруктураШапкиДокумента.ВалютаЗаказа,
				СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсЗаказа,
				СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоДок;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок 
			+ УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
				УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		//начало изменений Ожиганов 17.11.2015 приведение сумм по упр. учету к суммам бу, в случае если валюты совпадают
		СтрокаТаблицы.ПРГ_НДСВалДок  = СтрокаТаблицы.НДС;
		//конец изменений 
		
		//{18.02.2015 Островерхий заявка №б/н 
		СтрокаТаблицы.СтоимостьВВалюте = СтрокаТаблицы.Стоимость; 
		СтрокаТаблицы.СтоимостьБезСкидокВВалюте = СтрокаТаблицы.СтоимостьБезСкидок;
		//18.02.2015 Островерхий} 
		
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаВзаиморасчетов, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СтоимостьБезСкидок, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаВзаиморасчетов, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаУпр;
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаБезНДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.НДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
		//начало изменений Ожиганов А. 02.05.2017 64980 изменение стоимости без скидок в случае если ручная и автоматическая скидка не предоставляется 
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок = 0 и СтрокаТаблицы.ПроцентСкидкиНаценки = 0 Тогда
			СтрокаТаблицы.СтоимостьБезСкидок        = СтрокаТаблицы.Стоимость;
			СтрокаТаблицы.СтоимостьБезСкидокВВалюте = СтрокаТаблицы.СтоимостьВВалюте;
		КонецЕсли;	
		//конец изменений 
			
		//{28.11.2016 Островерхий заявка №57373 
		Если СтрокаТаблицы.ПроцентДопИзмененияЦены <> 0 Тогда
			
			//{20.01.2017 Островерхий заявка №61339 
			//СтрокаТаблицы.СтоимостьБезДопСкидки = СтрокаТаблицы.Стоимость / (1-СтрокаТаблицы.ПроцентДопИзмененияЦены/100);
			//СтрокаТаблицы.ВалютнаяСтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьВВалюте / (1-СтрокаТаблицы.ПроцентДопИзмененияЦены/100);
            СтрокаТаблицы.СтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьБезСкидок / (1-СтрокаТаблицы.ПроцентДопИзмененияЦены/100);
			СтрокаТаблицы.ВалютнаяСтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьБезСкидокВВалюте / (1-СтрокаТаблицы.ПроцентДопИзмененияЦены/100);
			//20.01.2017 Островерхий} 
						
		Иначе
			
			//{20.01.2017 Островерхий заявка №61339 
			//СтрокаТаблицы.СтоимостьБезДопСкидки = СтрокаТаблицы.Стоимость;
			//СтрокаТаблицы.ВалютнаяСтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьВВалюте; 
			СтрокаТаблицы.СтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьБезСкидок;
			СтрокаТаблицы.ВалютнаяСтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьБезСкидокВВалюте;
			//20.01.2017 Островерхий} 
		
		КонецЕсли;  
		//28.11.2016 Островерхий} 	
			
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("СуммаРегл",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;
		
		//начало изменений 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоБУРасходов) Тогда
			СтрокаТаблицы.СубконтоБУРасходов =СтрокаТаблицы.СубконтоБУ;
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоНУРасходов) Тогда
			СтрокаТаблицы.СубконтоНУРасходов = СтрокаТаблицы.СубконтоНУ;
		КонецЕсли;	
		//конец изменений
		
		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
			СтрокаТаблицы.СуммаРегл        = Сумма + НДС;
		Иначе
			
			Если СуммаВключаетНДС Тогда
				СуммаДок = СтрокаТаблицы.Сумма;
			Иначе
				СуммаДок = СтрокаТаблицы.Сумма + СтрокаТаблицы.НДС;
			КонецЕсли;
			СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СуммаДок, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
			
			НДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СуммаРегл, 
				УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			
			Сумма = СтрокаТаблицы.СуммаРегл - НДС;
			
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	// Надо добавить нужные при проведении колонки.
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"              , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	//начало изменений Ожиганов 17.11.2015 приведение сумм по упр. учету к суммам бу, в случае если валюты совпадают
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидокВВалюте" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьВВалюте" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));	
	ТаблицаТоваров.Колонки.Добавить("ПРГ_НДСВалДок"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	//конец изменений 	
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Цена, 
				ВалютаДокумента, СтруктураШапкиДокумента.ВалютаЗаказа,
				СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсЗаказа,
				СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок 
			+ УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
			УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		//начало изменений Ожиганов 17.11.2015 приведение сумм по упр. учету к суммам бу, в случае если валюты совпадают
		СтрокаТаблицы.СуммаСНДСДок  			 = СтрокаТаблицы.Стоимость;
		СтрокаТаблицы.СтоимостьБезСкидокВВалюте  = СтрокаТаблицы.СтоимостьБезСкидок;
		СтрокаТаблицы.СтоимостьВВалюте			 = СтрокаТаблицы.Стоимость;
		СтрокаТаблицы.ПРГ_НДСВалДок  = СтрокаТаблицы.НДС;
		 //конец изменений 
		
		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СтоимостьБезСкидок, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаВзаиморасчетов, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаВзаиморасчетов, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаБезНДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.НДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Стоимость, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
	    //начало изменений Ожиганов А. 02.05.2017 64980 изменение стоимости без скидок в случае если ручная и автоматическая скидка не предоставляется 
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок = 0 и  СтрокаТаблицы.ПроцентСкидкиНаценки =0 Тогда
			СтрокаТаблицы.СтоимостьБезСкидок 		 = СтрокаТаблицы.Стоимость;
			СтрокаТаблицы.СтоимостьБезСкидокВВалюте  = СтрокаТаблицы.СтоимостьВВалюте;
		КонецЕслИ;	
		//конец изменений 
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

Процедура ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("СуммаРегл"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;
		
		//{10.09.2015 Островерхий заявка №43860 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоБУРасходов) Тогда
			СтрокаТаблицы.СубконтоБУРасходов =СтрокаТаблицы.СубконтоБУ;
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоНУРасходов) Тогда
			СтрокаТаблицы.СубконтоНУРасходов = СтрокаТаблицы.СубконтоНУ;
		КонецЕсли; 
		//10.09.2015 Островерхий} 
		
		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.СуммаРегл        = Сумма + НДС;
		Иначе
			
			Если СуммаВключаетНДС Тогда
				СуммаДок = СтрокаТаблицы.Сумма;
			Иначе
				СуммаДок = СтрокаТаблицы.Сумма + СтрокаТаблицы.НДС;
			КонецЕсли;
			СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СуммаДок, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуУслугРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)
	
	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	//{07.07.2016 Островерхий заявка №53363 
	ТаблицаТары.Колонки.Добавить("ПодразделениеОрганизации",          Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	//07.07.2016 Островерхий} 
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;
	
КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)
	
	ТаблицаТары.Колонки.Добавить("СуммаПродажная" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
		ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
	
	// Надо добавить колонки "СуммаБезНДС" .
	ТаблицаТары.Колонки.Добавить("ЦенаВВалютеЗаказа"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС"         , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТары.Колонки.Добавить("НДС"                 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТары.Колонки.Добавить("СуммаУпр"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Цена, 
				ВалютаДокумента, СтруктураШапкиДокумента.ВалютаЗаказа,
				СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсЗаказа,
				СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаБезНДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
			СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаБезНДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаБезНДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДС = 0;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента)
	
	// Сумма для проводки на залоговую стоимость тары
	ТаблицаТары.Колонки.Добавить("ПроводкаСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
	//{07.07.2016 Островерхий заявка №53363 
	ПРГ_ПодразделениеОрганизации = ПРГ_Обработки.ПолучитьПодразделениеОрганизации(СтруктураШапкиДокумента.Подразделение); 
	//07.07.2016 Островерхий} 
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		Сумма = СтрокаТаблицы.Сумма;
		
		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				Сумма, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьДокумента, Данные.Кратность);
		КонецЕсли;
		
		//{07.07.2016 Островерхий заявка №53363 
		СтрокаТаблицы.ПодразделениеОрганизации    = ПРГ_ПодразделениеОрганизации;
		//07.07.2016 Островерхий} 
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоУслугам)
	Перем Счет91, Счет90_03;
	
	Счет91 = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	Счет90_03 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;				
	ТаблицаДвижений = новый ТаблицаЗначений();				
	
	ТаблицаДвижений.Колонки.Добавить("ТекущаяТаблица");
	
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя"		, Документы.ТипВсеСсылки());
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСчет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоБУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетНДС"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаНДС"				, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		
	КонецЕсли;
	
	ПереименованиеКолонокРезультирующейТаблицы = Новый Структура();
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("КоррСчет", "СчетДоходовБУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СчетУчетаНУ", "СчетДоходовНУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СуммаНДС", "НДС");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы);
	
	НаборТаблиц = Новый Массив;
	НаборТаблиц.Добавить(ТаблицаПоТоварам);
	НаборТаблиц.Добавить(ТаблицаПоУслугам);
	
	Для каждого ТекущаяТаблица Из НаборТаблиц Цикл
		
		Для каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
			СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
			
			СтрокаНовойТаблицы.СчетНДС = ?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаТаблицы.СчетРасходовБУ, Счет91),СтрокаТаблицы.СчетРасходовБУ, Счет90_03);
			
			СтрокаНовойТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			СтрокаНовойТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
			
			КоррСчет = СтрокаНовойТаблицы.СчетДоходовБУ;
			
			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				Конецесли;
			КонецЦикла; 
			
			КоррСчет = СтрокаНовойТаблицы.СчетНДС;
			
			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) ТОгда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				Конецесли;
			КонецЦикла; 
			
			Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
				КоррСчет = СтрокаНовойТаблицы.СчетДоходовНУ;
				Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
					ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
					Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
					ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.Номенклатура)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.Номенклатура;
					Конецесли;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы, Истина);
	
	ТаблицаДвижений.Колонки.ЗаказПокупателя.Имя = "Сделка";
	
	ЧисловыеКолонкиСтрокой = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура = новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой = "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Не ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	
	Возврат ТаблицаДвижений;
	
КонецФункции

// Дополняет полями, нужными для регламентированного учета, структуру 
// обязательных полей шапки документа.
//
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если НЕ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
			
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
			
		КонецЕсли;
		
		Если ВозвратнаяТара.Количество() > 0 Тогда
			
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
			
			Если НЕ мИспользоватьРасширеннуюАналитику ИЛИ НачалоДня(мДатаНачалаИспользованияРасширеннойАналитики)>НачалоДня(Дата) Тогда
			
				СтруктураОбязательныхПолей.Вставить("СчетУчетаДоходовПоТареБУ");
				СтруктураОбязательныхПолей.Вставить("СчетУчетаРасходовПоТареБУ");
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					СтруктураОбязательныхПолей.Вставить("СчетУчетаДоходовПоТареНУ");
					СтруктураОбязательныхПолей.Вставить("СчетУчетаРасходовПоТареНУ");
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейШапкиРегл

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура();
	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		И НЕ УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ покупателя""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по счетам""! 
		|Заполните поле ""Счет покупателю""!");
	КонецЕсли;
	
	//{21.04.2015 Островерхий заявка №37984 
	Если НЕ РольДоступна(Метаданные.ОсновнаяРоль.Имя) Тогда    
		Для Каждого СтрокаТаблицы Из Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура.МКЮ) Тогда
				СтруктураОбязательныхПолей.Вставить("Грузополучатель","Заполните поле грузополучатель!");
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;     
	//21.04.2015 Островерхий} 
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Оборудование нельзя продать по договору, взаиморасчеты по которому ведутся по заказам.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование
		И  (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Реализация оборудования не может производиться по договору с ведением взаиморасчетов """
		+  СокрЛП(СтруктураШапкиДокумента.ВедениеВзаиморасчетов)
		+ """.", Отказ, Заголовок);
	КонецЕсли;
	
	// Брак нельзя отдать на реализацию.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
		И  (Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Реализация товара ненадлежащего качества может производиться только по договору """
		+  СокрЛП(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		+ """.", Отказ, Заголовок);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности  Тогда
		Если не РазрешенаОтгрузкаБезПереходаПраваСобственности() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Отгрузка товара без перехода права собственности может выполняться только при использовании расширенной аналитики учета затрат", Отказ, Заголовок);
		КонецЕсли;
		// Отгрузка без перехода права собственности может выполняться только по договору с покупателем.
		Если  (Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Отгрузка товара без перехода права собственности может производиться только по договору """
			+  СокрЛП(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
			+ """.", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверки,которые нужны только для регл. учета
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	СтруктураОбязательныхПолей = Новый Структура();
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	ОбщегоНазначенияКлиентСервер.ПроверитьЗаполнениеВычисляемыхРеквизитовШапки(ЭтотОбъект, СтруктураОбязательныхПолей, СтруктураШапкиДокумента, Отказ, Заголовок);
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма");
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		СтруктураОбязательныхПолей.Вставить("Качество");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	//m.ionov@a-prof.ru 20.02.2015
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	//Если ОбязательноДолжнаБытьЦена() Тогда
	Если ОбязательноДолжнаБытьЦена(СтруктураШапкиДокумента.КП_ВидЗаказаПокупателя) Тогда
	//конец изменений 		
		СтруктураОбязательныхПолей.Вставить("Сумма");
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверка вида склада
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		ПроверитьЧтоСкладОптовый(ТаблицаПоТоварам, Отказ, Заголовок);
	Иначе
		УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");
	КонецЕсли;

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПокупателя", Отказ, Заголовок);
	
	//Корректность счетов учета проверим после того, как убедимся, что они заполнены.
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет проверки,которые нужны только для регл. учета
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	КэшПоСчетам = Новый Соответствие;
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": ";
		
		Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			Если (ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ)) И (ЗначениеЗаполнено(СтрокаТЧ.СчетРасходовБУ)) Тогда
				
				СчетДоходовБУОтноситсяКДеятельностиЕНВД = КэшПоСчетам[СтрокаТЧ.СчетДоходовБУ];
				Если СчетДоходовБУОтноситсяКДеятельностиЕНВД = Неопределено Тогда
					СчетДоходовБУОтноситсяКДеятельностиЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ);
					КэшПоСчетам.Вставить(СтрокаТЧ.СчетДоходовБУ, СчетДоходовБУОтноситсяКДеятельностиЕНВД);
				КонецЕсли;
				
				СчетРасходовБУОтноситсяКДеятельностиЕНВД = КэшПоСчетам[СтрокаТЧ.СчетРасходовБУ];
				Если СчетРасходовБУОтноситсяКДеятельностиЕНВД = Неопределено Тогда
					СчетРасходовБУОтноситсяКДеятельностиЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетРасходовБУ);
					КэшПоСчетам.Вставить(СтрокаТЧ.СчетРасходовБУ, СчетРасходовБУОтноситсяКДеятельностиЕНВД);
				КонецЕсли;					
				
				Если СчетДоходовБУОтноситсяКДеятельностиЕНВД <> СчетРасходовБУОтноситсяКДеятельностиЕНВД Тогда
					СтрокаСообщения = "Указанные счета доходов и расходов относятся к разным видам деятельности!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Услуги";
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
		КонецЕсли;
	КонецЕсли;
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Сумма");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Услуги", "ЗаказПокупателя", Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей,  СтруктураШапкиДокумента);
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок, "ВидСклада");
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "ВозвратнаяТара", "ЗаказПокупателя", Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, ЭтотОбъект);
	
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("СоставНабора", ТаблицаПоКомплектам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		И НЕ СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
		Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	//начало изменений Ожиганов 24.05.2015 немного оптимизируем 
	ТаблСписТоваров =  Неопределено;
	//ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, 
	//ТаблицаПоКомплектам, ТаблицаПоТаре, Отказ, Заголовок,ТаблСписТоваров);
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, 
	ТаблицаПоКомплектам, ТаблицаПоТаре, Отказ, Заголовок,ТаблСписТоваров);
	//конец изменений 
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		И (НЕ СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности ИЛИ СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке)
		Тогда
		
		СтруктураТаблицыВыручки = Новый структура("НомерСтроки, Номенклатура, ВидЦенности, Ценность, Партия, СчетУчетаНДСПоРеализации,СчетУчетаБУ, СчетДоходовБУ, СубконтоБУ, 
		|СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал, ПринадлежностьНоменклатуры, Комиссионный, Комитент, ДоговорКомиссии, СчетРасчетовПоАвансамСКомитентом, СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, СуммаСписания, Количество");
		
		ВыручкаПоТоварам = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам, СтруктураТаблицыВыручки, , Истина);
		ВыручкаПоТоварам.ЗаполнитьЗначения(Ложь, "Комиссионный");		
		
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ВыручкаПоТоварам, Отказ);
		
	КонецЕсли;
	
	Если ТаблицаПоКомплектам.Количество() + ТаблицаПоТаре.Количество() >0 тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	КонецЕсли;
	
	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И 
		глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух Тогда
		Движения.Хозрасчетный.Записать();
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И
		глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовНал Тогда
		Движения.Налоговый.Записать();
	КонецЕсли;
	
	//начало изменений Ожиганов 24.05.2015 немного оптимизируем
	//УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	//КоличествоСтрокВДокументе = 0, ЗНАЧ Упр = Истина,
	//ЗНАЧ Бух = Истина, ЗНАЧ Нал = Истина,
	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	Если ПРГ_ДопФункцииКлиентСервер.ПРГПроводитьПоПартиям(СтруктураШапкиДокумента) Тогда	
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, ТаблСписТоваров);
	КонецЕсли;	
	//конец изменений 

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента,
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	/// Кунов О.В., 08.08.2017 - 66373
	Если СтруктураШапкиДокумента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями Тогда
		Попытка
			ДвиженияПоРегиструОграниченийОбъемаПоставок(СтруктураШапкиДокумента, ТаблицаПоТоварам);
		Исключение
		КонецПопытки;
	КонецЕсли;
	///
	
	Если ТаблицаПоКомплектам.Найти(Перечисления.ТипыНоменклатуры.Комплект, "ТипНоменклатуры") <> Неопределено Тогда
		ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоКомплектам",ТаблицаПоКомплектам);
	КонецЕсли;	
	
КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			МассивСерий = ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры");
			УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( МассивСерий, Дата, Отказ, Заголовок);
		КонецЕсли;
		
		УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		ВидДвиженияНакопления.Приход, Отказ, Заголовок);
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Если СуммаДокумента <> 0 Тогда
				
				// По регистру ПродажиПоДисконтнымКартам.
				Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
					НаборДвижений = Движения.ПродажиПоДисконтнымКартам;
					
					// Получим таблицу значений, совпадающую со структурой набора записей регистра.
					ТаблицаДвижений = НаборДвижений.Выгрузить();
					
					// Заполним таблицу движений.
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
					СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.Контрагент;
					СтрокаДвижений.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
					СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента,
					СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					СтруктураШапкиДокумента.КратностьДокумента,
					СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
					
					НаборДвижений.мПериод          = Дата;
					НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
					Если Не Отказ Тогда
						НаборДвижений.ВыполнитьДвижения();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//Движения по регистру Продажи
			Если не СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности Тогда
				КопияТовары = ТаблицаПоТоварам.Скопировать();
				КопияУслуги = ТаблицаПоУслугам.Скопировать();
				
				ТабИменУслуги = Неопределено;
				ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДС",    "НДСВрем");
				ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДСУпр", "НДС");
				
				ТабИменТовары = Неопределено;
				ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДС",    "НДСВрем");
				ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДСУпр", "НДС");
				
				//{18.02.2015 Островерхий заявка №б/н 
				ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "СтоимостьБезСкидокВВалюте", "ПРГВалютнаяСтоимостьБезСкидок");
                ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "СтоимостьВВалюте", "ПРГВалютнаяСтоимость");
				//начало изменений Ожиганов 17.11.2015 приведение сумм по упр. учету к суммам бу, в случае если валюты совпадают
				// в случае если отгрузка в уе и валюта = валюта рег учета НДС вал содержит информацию в валюте, а не в валюте документа
				//ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДСВал", "ПРГНДСВВалюте");
				ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "ПРГ_НДСВалДок", "ПРГНДСВВалюте");
				//конец изменений 
				//18.02.2015 Островерхий} 
				
				//начало изменений Ожиганов 17.11.2015 приведение сумм по упр. учету к суммам бу, в случае если валюты совпадают
				ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "СтоимостьБезСкидокВВалюте", "ПРГВалютнаяСтоимостьБезСкидок");
                ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "СтоимостьВВалюте", "ПРГВалютнаяСтоимость");
				ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "ПРГ_НДСВалДок", "ПРГНДСВВалюте");
				//конец изменений 
				 
				
				// ТОВАРЫ И УСЛУГИ ПО РЕГИСТРУ Продажи.
				Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
					
					// В этом случае таблицы документа обрабатываются особым образом
					ТаблицаДвижений = Движения.Продажи.Выгрузить();
					ТаблицаДвижений.Очистить();
					ТаблицаДвиженийУслуги = ТаблицаДвижений.Скопировать();
					ТаблицаДвиженийТовары = ТаблицаДвижений.Скопировать();
					
					УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияУслуги, ТаблицаДвиженийУслуги, Проект, Дата, "Продажи");
					УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТовары, ТаблицаДвиженийТовары, Проект, Дата, "Продажи");
					
					// Вставляем уже подготовленные таблицы движений
					ТаблицыДанныхДокумента = Новый Структура;
					ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам", ТаблицаДвиженийТовары);
					ТаблицыДанныхДокумента.Вставить("ТаблицаПоУслугам", ТаблицаДвиженийУслуги);
					
				Иначе
					
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", КопияУслуги);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", КопияТовары);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.Продажи, СтруктТаблицДокумента);
					
				КонецЕсли;
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПродажи",    Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
				
				//{17.10.2014 Островерхий заявка №32791 
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ПРГАдресПоставки",      Грузополучатель); 
				//17.10.2014 Островерхий} 
				
				//{18.02.2015 Островерхий заявка №б/н 
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ПРГВалютаДокумента",      ВалютаДокумента); 
				//18.02.2015 Островерхий} 
				
				// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
				Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", СтруктураШапкиДокумента.Сделка);
				КонецЕсли;
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Продажи, Неопределено, ТаблицыДанныхДокумента, Дата);
			КонецЕсли;
			
			// ПО РЕГИСТРУ ПредоставленныеСкидки.
			НаборДвижений = Движения.ПредоставленныеСкидки;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);
			
			//>>210915 Степанов 44117
			//ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументСкидки");
			//ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ПолучательСкидки");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"ПолучательСкидки");
			//<<
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
			КонецЕсли;
			
			//Движения по регистру ПЦ_ОграничениеПоПредоставленнымСкидкам
			
			//>>260816 Степанов 54372 старый способ закомментирован, формируем движения по разницам сумм, полученных из тч заказа/реализации
			////////>>091015 Степанов 44355
			//////
			//////ЗапросКДвижениямЗаказа = Новый Запрос;
			//////ЗапросКДвижениямЗаказа.Текст = 
			//////"ВЫБРАТЬ
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ЗаказПокупателя,
			//////|	ВЫБОР
			//////|		КОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			//////|			ТОГДА -ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки
			//////|		КОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			//////|			ТОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки
			//////|	КОНЕЦ КАК СуммаСкидки,
			//////|	ВЫБОР
			//////|		КОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			//////|			ТОГДА -ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество
			//////|		КОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			//////|			ТОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество
			//////|	КОНЕЦ КАК Количество
			//////|ИЗ
			//////|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
			//////|ГДЕ
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор В(&Заказ)
			//////|	И ПЦ_ОграничениеПоПредоставленнымСкидкам.Активность
			//////|
			//////|ОБЪЕДИНИТЬ ВСЕ
			//////|
			//////|ВЫБРАТЬ
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ЗаказПокупателя,
			//////|	ВЫБОР
			//////|		КОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			//////|			ТОГДА -ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки
			//////|		КОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			//////|			ТОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки
			//////|	КОНЕЦ,
			//////|	ВЫБОР
			//////|		КОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			//////|			ТОГДА -ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество
			//////|		КОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			//////|			ТОГДА ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество
			//////|	КОНЕЦ
			//////|ИЗ
			//////|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
			//////|ГДЕ
			//////|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор В(&ЗаданиеНаПодбор)
			//////|	И ПЦ_ОграничениеПоПредоставленнымСкидкам.Активность";
			//////
			////////1.Получить таблицу примененных ограничений из заказа
			//////ПривязанныйЗаказ = СтруктураШапкиДокумента.Сделка;
			//////Если (ТипЗнч(ПривязанныйЗаказ) = Тип("ДокументСсылка.ЗаказПокупателя")) и (ПривязанныйЗаказ<>Документы.ЗаказПокупателя.ПустаяСсылка()) Тогда 
			//////	//{04.12.2015 Островерхий заявка №б/н 
			//////	//ЗапросКДвижениямЗаказа.УстановитьПараметр("Заказ",ПривязанныйЗаказ); 
			//////	ЗапросКДвижениямЗаказа.УстановитьПараметр("Заказ",СтруктураШапкиДокумента.Сделка);
			//////	ЗапросКДвижениямЗаказа.УстановитьПараметр("ЗаданиеНаПодбор",СтруктураШапкиДокумента.СП_ЗаданиеНаПодбор);
			//////	//04.12.2015 Островерхий} 
			//////	ПланТаблица = ЗапросКДвижениямЗаказа.Выполнить().Выгрузить();
			//////Иначе
			//////	ТЗаказ = Товары.Выгрузить(,"ЗаказПокупателя");
			//////	ТЗаказ.Свернуть("ЗаказПокупателя");
			//////	Для Каждого СтрокаТЗаказ из ТЗаказ цикл
			//////		ПривязанныйЗаказ = СтрокаТЗаказ.ЗаказПокупателя;
			//////	КонецЦикла;
			//////	Если (ТипЗнч(ПривязанныйЗаказ) = Тип("ДокументСсылка.ЗаказПокупателя")) и (ПривязанныйЗаказ<>Документы.ЗаказПокупателя.ПустаяСсылка()) Тогда
			//////		ЗапросКДвижениямЗаказа.УстановитьПараметр("Заказ",ПривязанныйЗаказ);
			//////		//{04.12.2015 Островерхий заявка №б/н 
			//////		ЗапросКДвижениямЗаказа.УстановитьПараметр("ЗаданиеНаПодбор",СтруктураШапкиДокумента.СП_ЗаданиеНаПодбор);
			//////		//04.12.2015 Островерхий}
			//////		ПланТаблица = ЗапросКДвижениямЗаказа.Выполнить().Выгрузить();
			//////	Иначе
			//////		//Сообщить("Не определен заказ покупателя!!!",СтатусСообщения.Важное);
			//////		ПланТаблица = Неопределено;
			//////	КонецЕсли;
			//////КонецЕсли;
			//////Если НЕ ПланТаблица = Неопределено тогда
			//////	Если ПланТаблица.Количество()>0 тогда
			//////		
			//////		//2.Получить таблицу фактически предоставленных реализацией скидок из регистра ПредоставленныеСкидки
			//////		ФактТаблицаДвижений = Новый ТаблицаЗначений;
			//////		ФактТаблицаДвижений = Движения.ПредоставленныеСкидки.Выгрузить(,"Номенклатура, ХарактеристикаНоменклатуры, ДокументСкидки, ПолучательСкидки, ПЦ_ОграниченияСкидки, СуммаСкидки, СуммаНДССкидки, Количество");
			//////		// Сначала помещаем ТЗ во временную таблицу
			//////		Запрос = Новый Запрос;
			//////		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			//////		Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ";
			//////		Запрос.УстановитьПараметр("ТЗ", ФактТаблицаДвижений);
			//////		Запрос.Выполнить();
			//////		// Теперь ТЗ можно использовать в запросе:
			//////		//>>181115 Степанов 45934
			//////		//Запрос.Текст = "
			//////		//|ВЫБРАТЬ
			//////		//|   ТЗ.ПолучательСкидки КАК Контрагент,
			//////		//|   ТЗ.Номенклатура,
			//////		//|   ТЗ.ХарактеристикаНоменклатуры,
			//////		//|   ТЗ.Номенклатура.НСИ_ТоварнаяКатегория КАК ТоварнаяКатегория,
			//////		//|   ТЗ.Номенклатура.НСИ_Брендообъем КАК Брендообъем,
			//////		//|   ТЗ.ДокументСкидки КАК УстановкаСкидокНоменклатуры,
			//////		//|   ЕстьNull(ТЗ.СуммаСкидки,0)+ЕстьNull(ТЗ.СуммаНДССкидки,0) КАК СуммаСкидки
			//////		//|ИЗ
			//////		//|   ТЗ
			//////		//|ГДЕ 
			//////		//|   ТЗ.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки)
			//////		//|   ИЛИ ТЗ.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг)
			//////		//|";
			//////		Запрос.Текст = "ВЫБРАТЬ
			//////					   |	ТЗ.ПолучательСкидки КАК Контрагент,
			//////					   |	ТЗ.Номенклатура,
			//////					   |	ТЗ.ХарактеристикаНоменклатуры,
			//////					   |	ТЗ.Номенклатура.НСИ_ТоварнаяКатегория КАК ТоварнаяКатегория,
			//////					   |	ТЗ.Номенклатура.НСИ_Брендообъем КАК Брендообъем,
			//////					   |	ТЗ.ДокументСкидки КАК УстановкаСкидокНоменклатуры,
			//////					   |	ВЫБОР
			//////					   |		КОГДА ТЗ.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки)
			//////					   |				ИЛИ ТЗ.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг)
			//////					   |			ТОГДА ЕСТЬNULL(ТЗ.СуммаСкидки, 0) + ЕСТЬNULL(ТЗ.СуммаНДССкидки, 0)
			//////					   |		ИНАЧЕ 0
			//////					   |	КОНЕЦ КАК СуммаСкидки,
			//////					   |	ВЫБОР
			//////					   |		КОГДА ТЗ.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем)
			//////					   |			ТОГДА ЕСТЬNULL(ТЗ.Количество, 0)
			//////					   |		ИНАЧЕ 0
			//////					   |	КОНЕЦ КАК Количество
			//////					   |ИЗ
			//////					   |	ТЗ КАК ТЗ";
			//////		ФактТаблица = Запрос.Выполнить().Выгрузить();			
			//////		
			//////		ПланТаблица.Свернуть("Контрагент,ДоговорКонтрагента,Номенклатура,ХарактеристикаНоменклатуры,ТоварнаяКатегория,Брендообъем,УстановкаСкидокНоменклатуры,ЗаказПокупателя","СуммаСкидки,Количество");
			//////		ТаблицаПоСкидкам = Новый ТаблицаЗначений;
			//////		ТаблицаПоСкидкам.Колонки.Добавить("Контрагент");
			//////		ТаблицаПоСкидкам.Колонки.Добавить("ДоговорКонтрагента");
			//////		ТаблицаПоСкидкам.Колонки.Добавить("Номенклатура");
			//////		ТаблицаПоСкидкам.Колонки.Добавить("ХарактеристикаНоменклатуры");
			//////		ТаблицаПоСкидкам.Колонки.Добавить("ТоварнаяКатегория");
			//////		ТаблицаПоСкидкам.Колонки.Добавить("Брендообъем");
			//////		ТаблицаПоСкидкам.Колонки.Добавить("УстановкаСкидокНоменклатуры");
			//////		ТаблицаПоСкидкам.Колонки.Добавить("ЗаказПокупателя");
			//////		ТаблицаПоСкидкам.Колонки.Добавить("СуммаСкидки");
			//////		ТаблицаПоСкидкам.Колонки.Добавить("Количество");
			//////		
			//////		//3.Приводим ФактТаблица в формат ПланТаблица путем сворачивания по измерениям; считаем, что на каждый приказ УстановкаСкидокНоменклатуры одинаковое количество измерений
			//////		ТЗУстановки = ПланТаблица.Скопировать(,"УстановкаСкидокНоменклатуры,СуммаСкидки,Количество");
			//////		ТЗУстановки.Свернуть("УстановкаСкидокНоменклатуры","СуммаСкидки,Количество");
			//////		Для Каждого СтрокаТЗУстановки из ТЗУстановки цикл
			//////			СтрокаПолейСворачивания = "Номенклатура,ХарактеристикаНоменклатуры,ТоварнаяКатегория,Брендообъем,УстановкаСкидокНоменклатуры";
			//////			Отбор = Новый Структура;
			//////			Отбор.Вставить("УстановкаСкидокНоменклатуры", СтрокаТЗУстановки.УстановкаСкидокНоменклатуры);
			//////			СтрокиПлана = ПланТаблица.НайтиСтроки(Отбор);
			//////			Для Каждого Стр Из СтрокиПлана Цикл
			//////				Если Стр.Номенклатура=Справочники.Номенклатура.ПустаяСсылка() тогда
			//////					СтрокаПолейСворачивания = СтрЗаменить(СтрокаПолейСворачивания,"Номенклатура,","");
			//////				Иначе
			//////					Отбор.Вставить("Номенклатура",Стр.Номенклатура);
			//////				КонецЕсли;	
			//////				Если Стр.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() тогда
			//////					СтрокаПолейСворачивания = СтрЗаменить(СтрокаПолейСворачивания,"ХарактеристикаНоменклатуры,","");
			//////				Иначе
			//////					Отбор.Вставить("ХарактеристикаНоменклатуры",Стр.ХарактеристикаНоменклатуры);
			//////				КонецЕсли;	
			//////				Если Стр.ТоварнаяКатегория=Справочники.НСИ_ТоварныеКатегории.ПустаяСсылка() тогда
			//////					СтрокаПолейСворачивания = СтрЗаменить(СтрокаПолейСворачивания,"ТоварнаяКатегория,","");
			//////				Иначе
			//////					Отбор.Вставить("ТоварнаяКатегория",Стр.ТоварнаяКатегория);
			//////				КонецЕсли;	
			//////				Если Стр.Брендообъем=Справочники.НСИ_Брендообъемы.ПустаяСсылка() тогда
			//////					СтрокаПолейСворачивания = СтрЗаменить(СтрокаПолейСворачивания,"Брендообъем,","");
			//////				Иначе
			//////					Отбор.Вставить("Брендообъем",Стр.Брендообъем);
			//////				КонецЕсли;	
			//////				ФактТаблицаПоДокументу = ФактТаблица.Скопировать(Отбор);
			//////				ФактТаблицаПоДокументу.Свернуть(СтрокаПолейСворачивания,"СуммаСкидки,Количество");
			//////				//4.Сравнение сумм скидки
			//////				Если ФактТаблицаПоДокументу.Количество()=0 тогда
			//////					Разница = Стр.СуммаСкидки;
			//////					//>>181115 Степанов 45934
			//////					РазницаКол = Стр.Количество;
			//////					Если (Разница<>0) или (РазницаКол<>0) тогда
			//////						Стр.СуммаСкидки = -Разница;
			//////						Стр.Количество  = -РазницаКол;
			//////						НоваяСтрокаТаблицыЗначений = ТаблицаПоСкидкам.Добавить();
			//////						ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыЗначений, Стр);
			//////					КонецЕсли;
			//////				ИначеЕсли ФактТаблицаПоДокументу.Количество()=1 тогда	
			//////					Разница = Стр.СуммаСкидки - ФактТаблицаПоДокументу[0].СуммаСкидки;
			//////					РазницаКол = Стр.Количество - ФактТаблицаПоДокументу[0].Количество;
			//////					Если (Разница<>0) или (РазницаКол<>0) тогда
			//////						Стр.СуммаСкидки = -Разница;
			//////						Стр.Количество  = -РазницаКол;
			//////						НоваяСтрокаТаблицыЗначений = ТаблицаПоСкидкам.Добавить();
			//////						ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыЗначений, Стр);
			//////					КонецЕсли;
			//////					//<<181115
			//////				Иначе
			//////					Сообщить("Ошибка при подготовке таблицы по ограничениям предоставленных скидок!", СтатусСообщения.Важное);
			//////				КонецЕсли;
			//////			КонецЦикла;
			//////			
			//////		КонецЦикла;
			//////		//5.Формирование движений 
			//////		НаборДвижений = Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам;
			//////		ТаблицаДвижений = НаборДвижений.Выгрузить();
			//////		ТаблицаДвижений.Очистить();
			//////		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);
			//////		ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			//////		НаборДвижений.мПериод            = Дата;
			//////		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			//////		Если Не Отказ Тогда
			//////			Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам.ВыполнитьРасход();
			//////		КонецЕсли;
			//////	КонецЕсли;
			//////КонецЕсли;	
			//////
			////////<<091015
			
			Если ТаблицаПоТоварам.Количество()>0 тогда
				ТЗ = ТаблицаПоТоварам.Скопировать(,"ЗаказПокупателя,УстановкаСкидокНоменклатуры,НомерСтрокиПолучателя,НомерСтрокиТовара,Количество,СуммаСкидкиСНДС");
				ТЗ.Свернуть("ЗаказПокупателя,УстановкаСкидокНоменклатуры,НомерСтрокиПолучателя,НомерСтрокиТовара","Количество,СуммаСкидкиСНДС");
				
				ЗаказаПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				ТЗЗ = ТЗ.Скопировать(,"ЗаказПокупателя");
				ТЗЗ.Свернуть("ЗаказПокупателя");
				Для Каждого ТекСтрокаТЗЗ из ТЗЗ цикл
					ЗаказаПокупателя = ТекСтрокаТЗЗ.ЗаказПокупателя;
				КонецЦикла;	
				Если (ТипЗнч(ЗаказаПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя")) и (ЗаказаПокупателя <> Документы.ЗаказПокупателя.ПустаяСсылка()) Тогда
					
					ЗапросЗК = Новый Запрос;
					ЗапросЗК.Текст = 
					"ВЫБРАТЬ
					|	ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки КАК УстановкаСкидокНоменклатуры,
					|	ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки.ПЦ_ОграниченияСкидки КАК ПЦ_ОграниченияСкидки,
					|	ЗаказПокупателяТовары.НомерСтрокиПолучателя,
					|	ЗаказПокупателяТовары.НомерСтрокиТовара,
					|	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество,
					|	СУММА(ЗаказПокупателяТовары.СуммаСкидкиСНДС) КАК СуммаСкидкиСНДС
					|ИЗ
					|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
					|ГДЕ
					|	ЗаказПокупателяТовары.СуммаСкидкиСНДС <> 0
					|	И ЗаказПокупателяТовары.Ссылка = &ЗаказПокупателя
					|	И ЗаказПокупателяТовары.Ссылка.Проведен
					|
					|СГРУППИРОВАТЬ ПО
					|	ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки,
					|	ЗаказПокупателяТовары.НомерСтрокиПолучателя,
					|	ЗаказПокупателяТовары.НомерСтрокиТовара,
					|	ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки.ПЦ_ОграниченияСкидки";
					
					ЗапросЗК.УстановитьПараметр("ЗаказПокупателя",ЗаказаПокупателя);
					РезЗапросЗК = ЗапросЗК.Выполнить().Выгрузить();
					
					ЗапросТС = Новый Запрос;
					ЗапросТС.Текст = 
					"ВЫБРАТЬ
					|	ТЗ.УстановкаСкидокНоменклатуры,
					|	ТЗ.НомерСтрокиПолучателя,
					|	ТЗ.НомерСтрокиТовара,
					|	ТЗ.Количество,
					|	ТЗ.СуммаСкидкиСНДС
					|ПОМЕСТИТЬ ВТ_СхемаИзНакладной
					|ИЗ
					|	&ТЗ КАК ТЗ
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТЗЗ.УстановкаСкидокНоменклатуры,
					|	ТЗЗ.ПЦ_ОграниченияСкидки,
					|	ТЗЗ.НомерСтрокиПолучателя,
					|	ТЗЗ.НомерСтрокиТовара,
					|	ТЗЗ.Количество,
					|	ТЗЗ.СуммаСкидкиСНДС
					|ПОМЕСТИТЬ ВТ_СхемаИзЗаказа
					|ИЗ
					|	&ТЗЗ КАК ТЗЗ
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВТ_СхемаИзЗаказа.УстановкаСкидокНоменклатуры,
					|	ВТ_СхемаИзЗаказа.ПЦ_ОграниченияСкидки,
					|	ВТ_СхемаИзЗаказа.НомерСтрокиПолучателя,
					|	ВТ_СхемаИзЗаказа.НомерСтрокиТовара,
					|	ВТ_СхемаИзЗаказа.Количество - ЕстьNull(ВТ_СхемаИзНакладной.Количество, 0) КАК РазницаКоличество,
					|	ВТ_СхемаИзЗаказа.СуммаСкидкиСНДС - ЕстьNull(ВТ_СхемаИзНакладной.СуммаСкидкиСНДС, 0) КАК РазницаСуммаСкидкиСНДС
					|ПОМЕСТИТЬ ВТ_ТаблицаРазниц
					|ИЗ
					|	ВТ_СхемаИзЗаказа КАК ВТ_СхемаИзЗаказа
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СхемаИзНакладной КАК ВТ_СхемаИзНакладной
					|		ПО ВТ_СхемаИзЗаказа.УстановкаСкидокНоменклатуры = ВТ_СхемаИзНакладной.УстановкаСкидокНоменклатуры
					|			И ВТ_СхемаИзЗаказа.НомерСтрокиПолучателя = ВТ_СхемаИзНакладной.НомерСтрокиПолучателя
					|			И ВТ_СхемаИзЗаказа.НомерСтрокиТовара = ВТ_СхемаИзНакладной.НомерСтрокиТовара
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВТ_ТаблицаРазниц.УстановкаСкидокНоменклатуры,
					|	ВТ_ТаблицаРазниц.НомерСтрокиПолучателя,
					|	ВТ_ТаблицаРазниц.НомерСтрокиТовара,
					|	ВЫБОР
					|		КОГДА ВТ_ТаблицаРазниц.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем)
					|			ТОГДА ВТ_ТаблицаРазниц.РазницаКоличество
					|		ИНАЧЕ 0
					|	КОНЕЦ КАК Количество,
					|	ВЫБОР
					|		КОГДА ВТ_ТаблицаРазниц.ПЦ_ОграниченияСкидки <> ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем)
					|			ТОГДА ВТ_ТаблицаРазниц.РазницаСуммаСкидкиСНДС
					|		ИНАЧЕ 0
					|	КОНЕЦ КАК СуммаСкидки,
					|	УстановкаСкидокНоменклатурыПолучателиСкидки.ПолучательСкидки,
					|	УстановкаСкидокНоменклатурыПолучателиСкидки.Контрагент,
					|	УстановкаСкидокНоменклатурыПолучателиСкидки.ДоговорКонтрагента,
					|	УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_АдресПоставки КАК АдресПоставки,
					|	УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_Дивизион КАК Дивизион,
					|	УстановкаСкидокНоменклатурыТовары.ОбъектСкидки,
					|	ВЫБОР
					|		КОГДА УстановкаСкидокНоменклатурыТовары.Ссылка.ПРГ_ОбъединятьБрендообъем
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
					|		ИНАЧЕ ВЫБОР
					|				КОГДА УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
					|					ТОГДА УстановкаСкидокНоменклатурыТовары.ПЦ_ТоварнаяКатегория
					|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
					|			КОНЕЦ
					|	КОНЕЦ КАК ТоварнаяКатегория,
					|	ВЫБОР
					|		КОГДА УстановкаСкидокНоменклатурыТовары.Ссылка.ПРГ_ОбъединятьБрендообъем
					|			ТОГДА УстановкаСкидокНоменклатурыТовары.Номенклатура.НСИ_Брендообъем
					|		ИНАЧЕ ВЫБОР
					|				КОГДА УстановкаСкидокНоменклатурыТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
					|					ТОГДА УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем
					|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
					|			КОНЕЦ
					|	КОНЕЦ КАК Брендообъем,
					|	ВЫБОР
					|		КОГДА УстановкаСкидокНоменклатурыТовары.Ссылка.ПРГ_ОбъединятьБрендообъем
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
					|		ИНАЧЕ УстановкаСкидокНоменклатурыТовары.Номенклатура
					|	КОНЕЦ КАК Номенклатура,
					|	&ЗаказПокупателя КАК ЗаказПокупателя
					|ПОМЕСТИТЬ ВТ_ТаблицаРазницСИзмерениями
					|ИЗ
					|	ВТ_ТаблицаРазниц КАК ВТ_ТаблицаРазниц
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УстановкаСкидокНоменклатуры.Товары КАК УстановкаСкидокНоменклатурыТовары
					|		ПО ВТ_ТаблицаРазниц.УстановкаСкидокНоменклатуры = УстановкаСкидокНоменклатурыТовары.Ссылка
					|			И ВТ_ТаблицаРазниц.НомерСтрокиТовара = УстановкаСкидокНоменклатурыТовары.НомерСтроки
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УстановкаСкидокНоменклатуры.ПолучателиСкидки КАК УстановкаСкидокНоменклатурыПолучателиСкидки
					|		ПО ВТ_ТаблицаРазниц.УстановкаСкидокНоменклатуры = УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка
					|			И ВТ_ТаблицаРазниц.НомерСтрокиПолучателя = УстановкаСкидокНоменклатурыПолучателиСкидки.НомерСтроки
					|ГДЕ
					|	НЕ(ВТ_ТаблицаРазниц.УстановкаСкидокНоменклатуры ЕСТЬ NULL 
					|				ИЛИ ВТ_ТаблицаРазниц.УстановкаСкидокНоменклатуры = ЗНАЧЕНИЕ(Документ.УстановкаСкидокНоменклатуры.ПустаяСсылка))
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВТ_ТаблицаРазницСИзмерениями.УстановкаСкидокНоменклатуры,
					|	ВТ_ТаблицаРазницСИзмерениями.НомерСтрокиПолучателя,
					|	ВТ_ТаблицаРазницСИзмерениями.НомерСтрокиТовара,
					|	-ВТ_ТаблицаРазницСИзмерениями.Количество КАК Количество,
					|	-ВТ_ТаблицаРазницСИзмерениями.СуммаСкидки КАК СуммаСкидки,
					|	ВТ_ТаблицаРазницСИзмерениями.ПолучательСкидки,
					|	ВТ_ТаблицаРазницСИзмерениями.Контрагент,
					|	ВТ_ТаблицаРазницСИзмерениями.ДоговорКонтрагента,
					|	ВТ_ТаблицаРазницСИзмерениями.АдресПоставки,
					|	ВТ_ТаблицаРазницСИзмерениями.Дивизион,
					|	ВТ_ТаблицаРазницСИзмерениями.ОбъектСкидки,
					|	ВТ_ТаблицаРазницСИзмерениями.ТоварнаяКатегория,
					|	ВТ_ТаблицаРазницСИзмерениями.Брендообъем,
					|	ВТ_ТаблицаРазницСИзмерениями.Номенклатура,
					|	ВТ_ТаблицаРазницСИзмерениями.ЗаказПокупателя
					|ИЗ
					|	ВТ_ТаблицаРазницСИзмерениями КАК ВТ_ТаблицаРазницСИзмерениями
					|ГДЕ
					|	(ВТ_ТаблицаРазницСИзмерениями.Количество <> 0
					|			ИЛИ ВТ_ТаблицаРазницСИзмерениями.СуммаСкидки <> 0)";
					
					ЗапросТС.УстановитьПараметр("ТЗ",ТЗ);
					ЗапросТС.УстановитьПараметр("ТЗЗ",РезЗапросЗК);
					ЗапросТС.УстановитьПараметр("ЗаказПокупателя",ЗаказаПокупателя);
					
					РезЗапросТС = ЗапросТС.Выполнить().Выгрузить();
					
					НаборДвижений = Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам;
					ТаблицаДвижений = НаборДвижений.Выгрузить();
					ТаблицаДвижений.Очистить();
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезЗапросТС, ТаблицаДвижений);
					ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
					НаборДвижений.мПериод            = Дата;
					НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
					Если Не Отказ Тогда
						Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам.ВыполнитьРасход();
					КонецЕсли;
				
					
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		
		Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
			ТаблицаПоКомплектам.Индексы.Добавить("ВидСклада");
			ТаблицаПоТаре.Индексы.Добавить("ВидСклада");

			ВидСкладаОпт  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
			МассивКомплектыОпт = ТаблицаПоКомплектам.НайтиСтроки(ВидСкладаОпт);
			МассивТараОпт = ТаблицаПоТаре.НайтиСтроки(ВидСкладаОпт);
			
			Если МассивКомплектыОпт.Количество() <> 0 ИЛИ МассивТараОпт.Количество() <> 0 Тогда
				
				//{04.08.2015 Островерхий заявка №42367 
				//Перенесено в процедуру КонтроляОстатковПоТоварамНаСкладах() вызываемую в обработке проведения. 
				//// Контроль остатков товара
				//Если Товары.Количество() <> 0 Тогда
				//	Если Не ПараметрыСеанса.ПроведениеДокументов Тогда
				//		ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары",         СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения, ?(ЗначениеЗаполнено(Сделка),Истина,Ложь)); //m.ionov@a-prof.ru 05.02.2015
				//	КонецЕсли;	
				//КонецЕсли;
				//Если ВозвратнаяТара.Количество() <> 0 Тогда
				//	Если Не ПараметрыСеанса.ПроведениеДокументов Тогда
				//		ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				//	КонецЕсли;	
				//КонецЕсли;
				//
				//Если НЕ Отказ Тогда
				//04.08.2015 Островерхий} 
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("КомплектыОпт", МассивКомплектыОпт);
					СтруктТаблицДокумента.Вставить("ТараОпт",      МассивТараОпт);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТараОпт");
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				//{04.08.2015 Островерхий заявка №42367 
				//КонецЕсли; 
				//04.08.2015 Островерхий} 	
			КонецЕсли;
			
			ВидСкладаРозн = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
			МассивКомплектыРозн = ТаблицаПоКомплектам.НайтиСтроки(ВидСкладаРозн);
			МассивТараРозн = ТаблицаПоТаре.НайтиСтроки(ВидСкладаРозн);
			
			Если МассивКомплектыРозн.Количество() <> 0 ИЛИ МассивТараРозн.Количество() <> 0 Тогда
				
				// Контроль остатков товара
				Если Товары.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				Если ВозвратнаяТара.Количество() <> 0 Тогда
					ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;
				
				Если Не Отказ Тогда
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("КомплектыРозн", МассивКомплектыРозн);
					СтруктТаблицДокумента.Вставить("ТараРозн",      МассивТараРозн);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТараРозн");
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // отпуск по ордеру
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПередачеСоСкладовКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
			Если Не Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаТовары", ТаблицаПоКомплектам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаТовары");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;

		// Контроль остатков товара
		Если ТаблицаПоТаре.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольЛимитовВозвратнойТары(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ТоварыПереданные
		Если Не Отказ Тогда

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
			КопияТаблицаПоТаре = ТаблицаПоТаре.Скопировать();
			КопияТаблицаПоТаре.Колонки.ЗаказПокупателя.Имя = "Сделка";
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", КопияТаблицаПоТаре);

			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
				ИЛИ СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности Тогда
				КопияТовары = ТаблицаПоТоварам.Скопировать();
				КопияТовары.Колонки.ЗаказПокупателя.Имя = "Сделка";
				СтруктТаблицДокумента.Вставить("ТаблицаТовары", КопияТовары);
			КонецЕсли;

			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыПереданные, СтруктТаблицДокумента);

			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
				ИЛИ СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,     "ТаблицаТовары");
			КонецЕсли;

			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				Для Каждого ТаблицаДанных Из ТаблицыДанныхДокумента Цикл
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",     Сделка, ТаблицаДанных.Ключ);
				КонецЦикла;
			КонецЕсли;

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПереданные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

		КонецЕсли;

		// ТОВАР, ТАРА И УСЛУГИ ПО РЕГИСТРУ ЗаказыПокупателей.

		//++ Spl_Апроф 14.01.2015 (k.russkih@a-prof.ru) Движения по регистру не делаем, т.к. уже закрыли его
		Если НЕ ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
			
			// Проверка остатков при оперативном проведении.
			Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Товары",         Отказ, Заголовок, РежимПроведения);
			Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "ВозвратнаяТара", Отказ, Заголовок, РежимПроведения);
			Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Услуги",         Отказ, Заголовок, РежимПроведения);
			
			Если Не Отказ Тогда
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПокупателей, СтруктТаблицДокумента);
				ОбщегоНазначения.УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя");
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам,ТаблицаПоУслугам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			КонецЕсли;			
			
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		// ТОВАР И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах.
		ТабРезервТовары = УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТаблицаПоКомплектам);	
		ТабРезервТара   = УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТаблицаПоТаре);	
		
		Если ТабРезервТовары.Количество() > 0 ИЛИ ТабРезервТара.Количество() > 0 Тогда
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТабРезервТовары);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТабРезервТара);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли; // Если ОтражатьВУправленческомУчете
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Функция удаляет из таблицы значений строки по которым не надо формировать резерв
// Возврат КОПИЯ исходной таблицы с удаленными строками
//
Функция УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТабТовары)
	
	ТабРезерв = ТабТовары.Скопировать();
	
	// Удалим записи таблицы в которых не надо списывать из резерва или не указан заказ покупателя.
	МассивНаУдаление = Новый Массив;
	Для Каждого СтрокаСписанияРезервов Из ТабРезерв Цикл
		
		Если СтрокаСписанияРезервов.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаСписанияРезервов.ЗаказПокупателя) Тогда
			МассивНаУдаление.Добавить(СтрокаСписанияРезервов);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Для Каждого Элемент Из МассивНаУдаление Цикл
		ТабРезерв.Удалить(Элемент);
	КонецЦикла;	
	
	ТабРезерв.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
	
	Возврат ТабРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСписаниеИзРезерва()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	НачислениеНДСПоОтгрузке = ложь;
	Если СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности Тогда
		НачислениеНДСПоОтгрузке = СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке И СтруктураШапкиДокумента.УчитыватьНДС;
		Если не НачислениеНДСПоОтгрузке Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	// Формирование движений по регистру "Учет продаж и себестоимости".
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		И НЕ НачислениеНДСПоОтгрузке Тогда
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
			СтруктураШапкиДокумента,
			ТаблицаПоТоварам
		);
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
			СтруктураШапкиДокумента,
			ТаблицаПоУслугам
		);
	КонецЕсли;	
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	ДатаДока   = Дата;
	Счет91     = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		//Сформируем проводки по собственному товару
		ТаблицаВыручкиДляНУ = ТаблицаПоУслугам.Скопировать( , "Номенклатура, СчетДоходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ, СуммаБезНДС, НДС");
		
		//{10.09.2015 Островерхий заявка №43860 
		//ТаблицаВыручкиДляБУ = ТаблицаПоУслугам.Скопировать( , "СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ, СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал");
		ТаблицаВыручкиДляБУ = ТаблицаПоУслугам.Скопировать( , "СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУРасходов, СубконтоБУ, СчетДоходовНУ, СубконтоНУ, СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал");
		//10.09.2015 Островерхий} 
		ТаблицаВыручкиДляБУ.Колонки.Добавить("СписаниеПартий", Новый ОписаниеТипов("Булево"));
		
		Если НЕ глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух Тогда
			
			Для каждого СтрокаТовара Из ТаблицаПоТоварам Цикл
				Если СтрокаТовара.ПринадлежностьНоменклатуры <> Перечисления.ПринадлежностьНоменклатуры.Принятый Тогда
					НоваяСтрокаВыручки = ТаблицаВыручкиДляБУ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаВыручки, СтрокаТовара);
					НоваяСтрокаВыручки.СписаниеПартий = Истина;
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли; 
		
		ТаблицаВыручкиДляНУ.Свернуть("Номенклатура, СчетДоходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ", "СуммаБезНДС, НДС");
		//{10.09.2015 Островерхий заявка №б/н 
		//ТаблицаВыручкиДляБУ.Свернуть("СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ, СписаниеПартий", "СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал");
		ТаблицаВыручкиДляБУ.Свернуть("СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУРасходов, СубконтоБУ, СчетДоходовНУ, СубконтоНУ, СписаниеПартий", "СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал");
		//10.09.2015 Островерхий} 
		
		ДатаДока   = Дата;
		
		//начало изменений
		 ПРГ_ПодразделениеОрганизации = ПРГ_Обработки.ПолучитьПодразделениеОрганизации(СтруктураШапкиДокумента.Подразделение);
		//конец изменений
		
		// Выручка и НДС
		Для каждого СтрокаТЧ из ТаблицаВыручкиДляБУ Цикл
			Если не НачислениеНДСПоОтгрузке Тогда
				// Выручка
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период                 = ДатаДока;
				Проводка.Организация            = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание 			= ?(СтрокаТЧ.СписаниеПартий, "Реализация товаров" , "Реализация услуг");
				Проводка.СписаниеПартий         = СтрокаТЧ.СписаниеПартий;
				Проводка.Сумма = СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;
				
				Проводка.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт           = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт	= СтрокаТЧ.СуммаБезНДСВал + СтрокаТЧ.НДСВал;
				КонецЕсли; 
				
				Проводка.СчетКт                 = СтрокаТЧ.СчетДоходовБУ;
				Для каждого СубконтоСчета Из Проводка.СчетКт.ВидыСубконто Цикл
					Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоБУ)) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоБУ);
						//Прервать;
					КонецЕсли;
					// <- Шевченков № 35759
					Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) И ЗначениеЗаполнено(ПРГ_ПодразделениеОрганизации) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,СубконтоСчета.НомерСтроки, ПРГ_ПодразделениеОрганизации);
						//Прервать;
					КонецЕсли;
					// ->
				КонецЦикла; 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
			КонецЕсли;	
			// НДС
			Если СтруктураШапкиДокумента.УчитыватьНДС 
				И СтрокаТЧ.НДС <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период               = ДатаДока;
				Проводка.Организация          = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание           = ?(СтрокаТЧ.СписаниеПартий, "Реализация товаров" , "Реализация услуг");
				Проводка.СписаниеПартий       = СтрокаТЧ.СписаниеПартий;
				Если НачислениеНДСПоОтгрузке Тогда
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", Ссылка);
				Иначе
					это91счет = БухгалтерскийУчет.ЭтоСубсчет(СтрокаТЧ.СчетРасходовБУ, Счет91);
					Проводка.СчетДт = ?(это91счет, СтрокаТЧ.СчетРасходовБУ, ПланыСчетов.Хозрасчетный.Продажи_НДС);
					Для каждого СубконтоСчета Из Проводка.СчетДт.ВидыСубконто Цикл
						
						//{10.09.2015 Островерхий заявка №43860 
						//Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоБУ)) Тогда
						//	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоБУ);
						//	//	Прервать;
						//КонецЕсли; 
						Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоБУРасходов)) Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоБУРасходов);
							//	Прервать;
						КонецЕсли;
						//10.09.2015 Островерхий} 
						 
					    //начало изменений аналитика подразделения 
					 	Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) И ЗначениеЗаполнено(ПРГ_ПодразделениеОрганизации) Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,СубконтоСчета.НомерСтроки, ПРГ_ПодразделениеОрганизации);
							//Прервать;
						КонецЕсли;
						//конец изменений
					КонецЦикла; 
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
				КонецЕсли;	
				Если СтруктураШапкиДокумента.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", Ссылка);
				Иначе
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				КонецЕсли;
				
				Проводка.Сумма                = СтрокаТЧ.НДС;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если  НачислениеНДСПоОтгрузке Тогда
			ПроводкиБУ.Записать(Ложь);
			ПроводкиНУ.Записать(Ложь);
			Возврат;
        КонецЕсли;
		
		// Налоговый учет
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если мИспользоватьРасширеннуюАналитику И НачалоДня(мДатаНачалаИспользованияРасширеннойАналитики)<=НачалоДня(Дата) Тогда
				//Проводку по выручке по НУ при использовании расширенной аналитики формируем документом Расчет себестоимости	
			Иначе	
				КэшПоСчетам = Новый Соответствие;
				Для каждого СтрокаТЧ из ТаблицаВыручкиДляНУ Цикл
					
					Проводка = ПроводкиНУ.Добавить();
					Проводка.Период                   = ДатаДока;
					Проводка.Организация              = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание 			  = "Реализация услуг";
					
					Проводка.СчетДт                   = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					СчетДоходовБУОтноситсяКДеятельностиЕНВД = КэшПоСчетам[СтрокаТЧ.СчетДоходовБУ];
					Если СчетДоходовБУОтноситсяКДеятельностиЕНВД = Неопределено Тогда
						СчетДоходовБУОтноситсяКДеятельностиЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ);
						КэшПоСчетам.Вставить(СтрокаТЧ.СчетДоходовБУ, СчетДоходовБУОтноситсяКДеятельностиЕНВД);
					КонецЕсли;
					
					Если НЕ СчетДоходовБУОтноситсяКДеятельностиЕНВД Тогда
						Проводка.СчетКт 			  = СтрокаТЧ.СчетДоходовНУ;
						Для каждого СубконтоСчета Из Проводка.СчетКт.ВидыСубконто Цикл
							Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоНУ)) Тогда
								БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоНУ);
								Прервать;
							КонецЕсли; 
						КонецЦикла; 
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
					КонецЕсли;
					
					Проводка.Сумма                    = СтрокаТЧ.СуммаБезНДС;
					
				КонецЦикла;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		// Движения по взаиморасчетам
		СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок, , ТаблицаПоВзаиморасчетам, СтруктураШапкиДокумента);
		Если СтруктураПараметровЗачетАванса = Ложь тогда
			Отказ       = Истина;
			СуммаАванса = 0;
		Иначе
			ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметровЗачетАванса, 
			СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);
			СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, 
			ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации);
		КонецЕсли;
	КонецЕсли; //Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
	
	ПроводкиБУ.Записать(Ложь);
	ПроводкиНУ.Записать(Ложь);
	
	Если не ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
		Конецесли;
		БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса, 
			мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ, , Истина);
		ПроводкиБУ.Записать(Ложь);
		ПроводкиНУ.Записать(Ложь);
	Конецесли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
	
КонецПроцедуры

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		
		// Проверка остатков при оперативном проведении.
		Движения.ТоварыОрганизаций.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если Не Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			//начало изменений
			Если Дата >= ПРГ_ДопФункцииКлиентСервер.ПолучитьДатуНовогоАлгоритмовВСтомости() Тогда
				Если ТаблицаПоТаре.Колонки.Найти("Качество") = Неопределено Тогда
					ТаблицаПоТаре.Колонки.Добавить("Качество");
					ТаблицаПоТаре.ЗаполнитьЗначения(Справочники.Качество.Новый,"Качество")
				КонецЕсли;	
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
			КонецЕсли;	
			//конец изменений 			
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
			
			// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
			КонецЕсли;
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	Иначе // По ордеру
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций.
		
		// Проверка остатков при оперативном проведении.
		Движения.ТоварыКПередачеОрганизаций.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если Не Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПередачеОрганизаций, СтруктТаблицДокумента);
			
			// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",      Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			
			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
			КонецЕсли;
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Перекинем остатки по организации на комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
		ИЛИ СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
		
		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       Неопределено);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование, 	"ДопустимыйСтатус1");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, 		"ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция, 		"ДопустимыйСтатус2");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,		"ДопустимыйСтатус3");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,	"ДопустимыйСтатус4");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,										"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,							"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, 										"ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента,      			"КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, 			"КратностьДокумента");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект,											"Проект");
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
		
		Строка.СуммаЗадолженности = СтрокаТЧ.СуммаСНДСДок;
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Строка.ЗаказСписания = СтруктураШапкиДокумента.Сделка;		
		Иначе
			Строка.ЗаказСписания = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;
		
		// Если резервирование под заказ - заказ партии
		Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			Строка.ЗаказПартии = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Перем КэшПоСчетам;
	
	//начало изменений 
	ДобавлятьАналитикуПодр = ЗначениеЗаполнено(Подразделение);
	ПРГ_ПодразделениеОрганизации = Неопределено;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
		                      |ИЗ
		                      |	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
		                      |ГДЕ
		                      |	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение = &Подразделение");
		Запрос.УстановитьПараметр("Подразделение",Подразделение);							  
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка .Следующий() Тогда
			ПРГ_ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		КонецЕсли;
	КонецЕслИ;	
	
	ПРГМассивСчетов = Новый Массив;
	ПРГМассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.01"));
	ПРГМассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02.1"));
	
	
	//конец изменеий
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,                 "Организация");
	
	// Кор.Счет для начисления задолженности перед комитентом, если вдруг продадим комиссионный товар
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, "КорСчетЗадолженностиБУ")	;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
	 И НЕ СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, "КорСчетНУ");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату, 		"КорСубконтоНУ1");
		
		Если Не СтруктураШапкиДокумента.Свойство("КэшПоСчетам", КэшПоСчетам) Тогда
			КэшПоСчетам = Новый Соответствие;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаДвижений Цикл
			
			СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
			
			Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
			Строка.КорСчетНУ      = СтрокаТЧ.СчетРасходовНУ;
			//начало изменений 
			//Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоБУ;
			//Строка.КорСубконтоНУ2 = СтрокаТЧ.СубконтоНУ;
			
			Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоБУРасходов;
			Строка.КорСубконтоНУ2 = СтрокаТЧ.СубконтоНУРасходов;
			
			
			Если Не ЗначениеЗаполнено(Строка.КорСубконтоБУ2) Тогда
				Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоБУ;
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(Строка.КорСубконтоНУ2) Тогда
				Строка.КорСубконтоНУ2 = СтрокаТЧ.СубконтоНУ;
			КонецЕсли;	
			
			
				Если ПРГМассивСчетов.Найти(СтрокаТЧ.СчетРасходовБУ) <> Неопределено 
				или  ПРГМассивСчетов.Найти(СтрокаТЧ.СчетДоходовБУ) <> Неопределено 
				Тогда
					Если ДобавлятьАналитикуПодр Тогда
						Строка.ПодразделениеОрганизации = ПРГ_ПодразделениеОрганизации;
					КонецЕсли;
					Строка.ПРГ_СубконтоБУ1	= СтрокаТЧ.СубконтоБУ;
					Строка.ПРГ_СубконтоНУ1  = СтрокаТЧ.СубконтоНУ;
				КонецЕслИ;	
			
			//конец изменений
			
			// Доход от продажи может облагаться ЕНВД (что определяется по бух. счету учета)
			Если ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ) Тогда
				
				СчетДоходовБУОтноситсяКДеятельностиЕНВД = КэшПоСчетам[СтрокаТЧ.СчетДоходовБУ];
				Если СчетДоходовБУОтноситсяКДеятельностиЕНВД = Неопределено Тогда
					СчетДоходовБУОтноситсяКДеятельностиЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ);
					КэшПоСчетам.Вставить(СтрокаТЧ.СчетДоходовБУ, СчетДоходовБУОтноситсяКДеятельностиЕНВД);
				КонецЕсли;
				
				Если СчетДоходовБУОтноситсяКДеятельностиЕНВД Тогда				
					// в этом случае товар списывается на счет расходов по ЕНВД
					Строка.КорСчетНУ = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
				КонецЕсли;
				
			КонецЕсли;
			
			// Принятые на комиссию товары не учитываются в налоговом учете:
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
				Строка.ОтражатьВНалоговомУчете = Ложь;
				
			Иначе
				Строка.ОтражатьВНалоговомУчете = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
				
			КонецЕсли;
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				Строка.ОтражатьВНалоговомУчете = Истина;
				Строка.СчетУчетаНУ = СтрокаТЧ.СчетУчетаБУ;
				Строка.ПринятыеСчетУчетаНУ = СтрокаТЧ.ПринятыеСчетУчетаБУ;
			КонецЕсли;
			
			
			// Субконто кор.счета для начисления задолженности перед комитентом, если вдруг продадим комиссионный товар
			Строка.КорСубконтоЗадолженностиБУ1 = Контрагент;
			Строка.КорСубконтоЗадолженностиБУ2 = ДоговорКонтрагента;
			
			Строка.СчетДоходовБУ = СтрокаТЧ.СчетДоходовБУ;
			Строка.СчетДоходовНУ = СтрокаТЧ.СчетДоходовНУ;
			
			Строка.СуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДС+СтрокаТЧ.НДС;
			Строка.СуммаНДС = СтрокаТЧ.НДС;
			
			Если Не СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				
				Строка.КорВалютаЗадолженностиБУ        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Строка.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТЧ.СуммаВал;
				Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и СтруктураШапкиДокумента.УчитыватьНДС Тогда
					Строка.КорВалютнаяСуммаНДСЗадолженностиБУ = СтрокаТЧ.НДСВал;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "КорСубконтоБУ3");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
	 ИЛИ СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности Тогда
		
		Для Каждого Строка Из ТаблицаДвижений Цикл
			
			СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
			
			Строка.КорСчетБУ      	 = СтрокаТЧ.ПереданныеСобственныеБУ;
			Строка.КорСчетНУ      	 = СтрокаТЧ.ПереданныеСобственныеНУ;
			
			Строка.ПринятыеКорСчетБУ = СтрокаТЧ.ПереданныеПринятыеБУ;
			Строка.ПринятыеКорСчетНУ = СтрокаТЧ.ПереданныеПринятыеНУ;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				Строка.ОтражатьВНалоговомУчете 	= Истина;
				Строка.СчетУчетаНУ 				= СтрокаТЧ.СчетУчетаБУ;
				Строка.КорСчетНУ   				= СтрокаТЧ.ПереданныеСобственныеБУ;
				
				Строка.ПринятыеСчетУчетаНУ 		= СтрокаТЧ.ПринятыеСчетУчетаБУ;
				Строка.ПринятыеКорСчетНУ 		= СтрокаТЧ.ПереданныеПринятыеБУ;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,	"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,		"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,		"ДопустимыйСтатус3");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, 									"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,						"ОтражатьВУправленческомУчете");
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТаре.Получить(Строка.НомерСтроки);
		
		Строка.ЗаказПартии = СтрокаТЧ.ЗаказПокупателя;
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, 				"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     				"ОтражатьВНалоговомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаДоходовПоТареБУ,					"СчетДоходовБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаДоходовПоТареНУ,					"СчетДоходовНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасходовПоТареБУ,				"СчетРасходовБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасходовПоТареНУ,				"СчетРасходовНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходовПоТаре,		"СтатьяДоходовИРасходов");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, 														"Организация");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, "КорСчетНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.УсловияПоступленияИВыбытияИмущества.Другие, 			"КорСубконтоНУ1");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре, 											"КорСчетБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, 														"КорСубконтоБУ1");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, 												"КорСубконтоБУ2");
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТаре.Получить(Строка.НомерСтроки);
		
		Строка.СтоимостьПоступлениеБУ  = СтрокаТЧ.ПроводкаСумма;
		
		Если НЕ СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			
			Строка.КорВалютаЗадолженностиБУ        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Строка.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТЧ.СуммаВал;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

// Формирование движений по регистру "Списанные товары".
//
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, ТаблСписТоваров)
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
		УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам),
		ТаблицаДвижений,
		Истина);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Товары,   	  "ВидТабличнойЧасти");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам, "ВедениеУчетаПоПроектам");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
	 И НЕ СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Реализация, "КодОперацииПартииТоваров");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
	 ИЛИ СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию, "КодОперацииПартииТоваров");
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                "ДокументПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "СтатусПередачи");
		
	КонецЕсли;
	
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений(ТаблицаДвижений, "НомерСтрокиДокумента");
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если НЕ Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	//начало изменений Ожиганов 24.05.2015 немного оптимизируем
	ТаблСписТоваров = ТаблицаДвижений.Скопировать();
	 //конец изменений 
	 
	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
		ТаблицаПоТаре,
		ТаблицаДвижений,
		Истина);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Тара, "ВидТабличнойЧасти");
	
	// Документы с видом передачи по ордеру сразу не проводятся
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
	//ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту,"КодОперацииПартииТоваров");
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту,"КодОперацииПартииТоваров");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыЗалогСтоимость,"КодОперацииПартииТоваров");
	КонецЕсли;	
	//конец изменений 
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	
	ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений(ТаблицаДвижений, "НомерСтрокиДокумента", ТаблицаПоТоварам.Количество() + 1);
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если НЕ Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	//ТаблСписТоваров = ТаблицаДвижений;
	//начало изменений Ожиганов 24.05.2015 работа фильтров 
	Для каждого Текстрока Из ТаблицаДвижений Цикл
	  	НС = ТаблСписТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Текстрока);
	КонецЦикла; 
	//конец изменений 
	//начало изменений Ожиганов 22.10.2015 исправление ошибки с номером строки 
	Для каждого Текстрока Из ТаблСписТоваров Цикл
		Текстрока.НомерСтроки = Текстрока.НомерСтрокиДокумента;
	КонецЦикла;
	//конец изменений 
	
	Движения.СписанныеТовары.Записать(Истина);
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ВыручкаПоТоварам = Неопределено, Отказ) Экспорт
	
	Если СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности 
		И Не СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	СчетОтнесенияНДС = УчетНДС.СчетОтнесенияНДС(СтруктураШапкиДокумента);
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата)
		И ВыручкаПоТоварам <> Неопределено 
		И Не ВыручкаПоТоварам.Количество() = 0 Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ВыручкаПоТоварам, , Отказ, СчетОтнесенияНДС, , Истина);
	КонецЕсли;	
	
	Если Не ТаблицаПоУслугам.Количество() = 0 Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаПоУслугам, , Отказ, СчетОтнесенияНДС);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");
	
	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)
	
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("Цена", "Цена");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)
	
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СчетУчетаБУ"        , "СчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ", "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаНУ", "ПринятыеСчетУчетаНУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"        , "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетДоходовБУ"      , "СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоБУ"         , "СубконтоБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ"      , "СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоНУ"         , "СубконтоНУ");
	СтруктураПолей.Вставить("СчетРасходовБУ"     , "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетРасходовНУ"     , "СчетРасходовНУ");
	//начало изменений
	СтруктураПолей.Вставить("СубконтоБУРасходов"     , "СубконтоБУРасходов");
	СтруктураПолей.Вставить("СубконтоНУРасходов"     , "СубконтоНУРасходов");
	//конец изменений
	СтруктураПолей.Вставить("ПереданныеПринятыеБУ"   , "ПереданныеПринятыеБУ");
	СтруктураПолей.Вставить("ПереданныеПринятыеНУ"   , "ПереданныеПринятыеНУ");
	СтруктураПолей.Вставить("ПереданныеСобственныеБУ", "ПереданныеСобственныеБУ");
	СтруктураПолей.Вставить("ПереданныеСобственныеНУ", "ПереданныеСобственныеНУ");
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей)
	
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей)
	
	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ", "СчетУчетаНУ");
	
КонецПроцедуры

// Проверяет, что размещение указанное в табиличной части, на Оптовый склад.
//
// Параметры:
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части
//  Отказ             - флаг отказа в проведении.
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоСкладОптовый(ТаблицаЗначений, Отказ, Заголовок)
	Перем ПредставлениеТабличнойЧасти;
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Склад) И СтрокаТаблицы.ВидСклада <> Перечисления.ВидыСкладов.Оптовый Тогда
			Если ПредставлениеТабличнойЧасти = неопределено Тогда
				ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["Товары"].Представление();
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер "+ СтрокаТаблицы.НомерСтроки +
				" табличной части Оборудование: содержится склад с видом не равный ""Оптовый"". Такого быть не должно!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ПроверитьЧтоСкладОптовый()

Функция РазрешенаОтгрузкаБезПереходаПраваСобственности() Экспорт
	Возврат мИспользоватьРасширеннуюАналитику И НачалоДня(мДатаНачалаИспользованияРасширеннойАналитики)<=НачалоДня(Дата);
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);

	Если ТипОснования = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипОснования = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьДанныеДоставкиПоОснованию(ЭтотОбъект, Основание);
		
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		#Если Клиент Тогда
			Если НЕ ЗначениеЗаполнено(Склад) И НЕ мУказаниеСкладовВТЧ И ТипОснования = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ВвестиЗначение(Склад, "Выберите склад", Тип("СправочникСсылка.Склады"));
			КонецЕсли;
		#КонецЕсли
		
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		Сделка = Основание;
		
		//++ Spl_Апроф 10.02.2015 (k.russkih@a-prof.ru)
		Если ТипОснования = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			КП_Отделение = Основание.КП_Отделение;
		КонецЕсли;
		//-- Spl_Апроф
		
		//Если Основание - СчетНаОплату, и ведение взаиморасчетов - не по счетам,
		//	сделку следует заполнить заказом покупателя который указан в счете
		Если ТипОснования = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
			И ДоговорКонтрагента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Сделка = Основание.ЗаказПокупателя;
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			
			// Заполним табличные части неполученными ТМЦ (резервом) по заказу покупателя.
			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(Товары, Основание);
			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ВозвратнаяТара, Основание);
			ЗаполнитьУслугиПоОстаткамУпр();
			
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			
			СкопироватьТовары(Основание);
			СкопироватьВозвратнуюТару(Основание);
			СкопироватьУслуги(Основание);
			
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		Организация   = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ВидПередачи   = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
			Склад = Основание.СкладОрдер;
		ИначеЕсли ТипЗнч(Основание.СкладОрдер)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Склад = Основание.СкладОрдер.Склад;
		КонецЕсли;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		КонецЕсли;
		
		МассивЗаказов = Неопределено;
		//возможно это межфирменная продажа
		ОрганизацияКонтрагента = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.Контрагент);
		Если  ЗначениеЗаполнено(ОрганизацияКонтрагента) Тогда
			Контрагент  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации( Основание.Организация);
			Организация = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту( Основание.Контрагент);
		Иначе
			
			#Если КЛИЕНТ Тогда
				// Выбор контрагента/договора
				СтруктТабЧастей = Новый Структура;
				СтруктТабЧастей.Вставить("Товары",         "Заказ");
				СтруктТабЧастей.Вставить("ВозвратнаяТара", "Заказ");
				
				СтруктПараметры = Новый Структура;
				СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
				
				Если  Основание.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
					ЗаказыВТабЧасти = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
					СтруктПараметры.Вставить("ЗаказВТабЧасти",
					ЗаказыВТабЧасти = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации
					ИЛИ ЗаказыВТабЧасти = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
					
					РезультатВыбораЗаказа = РаботаСДиалогами.ВыбратьКонтрагентДоговорЗаказИзДокументаОснования(Основание, СтруктПараметры);
					Если РезультатВыбораЗаказа.ВыборСделан Тогда
						Контрагент         = РезультатВыбораЗаказа.Контрагент;
						ДоговорКонтрагента = РезультатВыбораЗаказа.Договор;
						МассивЗаказов      = РезультатВыбораЗаказа.Заказ;
						Если МассивЗаказов.Количество() = 1 Тогда
							Сделка         = МассивЗаказов[0];
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			#Иначе
				Контрагент         = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойПокупатель");
				ОсновнойДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
				Если (ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
					или ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					и ОсновнойДоговорКонтрагента.Организация = Организация Тогда
					ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ОбщегоНазначения.ПолучитьРабочуюДату());
		КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		
		// ТипЦен.
		ТипЦен = ДоговорКонтрагента.ТипЦен;
		
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");
		КонецЕсли;
		
		// Флаги включения налогов.
		УчитыватьНДС = Истина;
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			
			// Если цены выбранного типа расчетные, то флаги включения налогов надо брать из базовой цены.
			ВремТипЦен       = ?(ТипЦен.Рассчитывается, ТипЦен.БазовыйТипЦен, ТипЦен);
			СуммаВключаетНДС = ВремТипЦен.ЦенаВключаетНДС;
			
		Иначе
			// Заполним значениями по умолчанию (не заполнен ТипЦен).
			СуммаВключаетНДС= Истина;
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			
			// Заполним табличные части по документу основанию (Поступление товаров);
			// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
				ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
				ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание,"Товары", МассивЗаказов);
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда 
				ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание,"Оборудование", МассивЗаказов);
			КонецЕсли;
			ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(Основание, МассивЗаказов);
			
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		
		ИспользоватьНаработку 			= Основание.ИспользоватьНаработку;
		ИспользоватьНаправленияВыпуска 	= Основание.ИспользоватьНаправленияВыпуска;
		
		// Заполнение таб.части
		Для Каждого ТекСтрокаПродукция Из Основание.Продукция Цикл
			
			Если ИспользоватьНаработку И ТекСтрокаПродукция.ВидВыпуска <> Перечисления.ВидыВыпуска.Выпуск Тогда
				Продолжить;
			КонецЕсли;
			Если ИспользоватьНаправленияВыпуска И ТекСтрокаПродукция.НаправлениеВыпуска <> Перечисления.НаправленияВыпуска.НаСклад Тогда
				Продолжить; // Выпуск в другое подразделение
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаПродукция);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Реализация");

		КонецЦикла;
	//++ Spl_Апроф 15.09.2014 (k.russkih@a-prof.ru)
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
		
		Если НЕ ТипЗнч(Основание.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя")  Тогда
			Возврат;		
		КонецЕсли; 
		
		СП_ЗаданиеНаПодбор = Основание; Товары.Очистить();
		
		// Заполним реквизиты шапки по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание.Заказ);
		ЗаполнениеДокументов.ЗаполнитьДанныеДоставкиПоОснованию(ЭтотОбъект, Основание.Заказ);
				
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание.Заказ, "ДоверенностьНомер, ДоверенностьДата, ДоверенностьВыдана, ДоверенностьЧерезКого");
		
		Сделка = Основание.Заказ;
		
		ОтражатьВУправленческомУчете = Истина;
		//начало изменений Ожиганов 30.04.2015 немного оптимизируем проведение 
		//ОтражатьВБухгалтерскомУчете = Истина;
		//ОтражатьВНалоговомУчете = Истина;
		ОтражатьВБухгалтерскомУчете = Ложь;
		ОтражатьВНалоговомУчете 	= Ложь;
		//конец изменений 
		
		//++ Spl_Апроф 10.02.2015 (k.russkih@a-prof.ru)
		КП_Отделение = Основание.КП_Отделение;
		//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			КП_ВидЗаказаПокупателя = Сделка.КП_ВидЗаказаПокупателя;
		Иначе
			КП_ВидЗаказаПокупателя = Неопределено;
		КонецЕслИ;	
		//конец изменений 
		
		ОбработкаЗаполненияРегл(Основание);
		
		// Заполним табличные части неполученными ТМЦ (резервом) по заказу покупателя.
		//ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(Товары, Сделка);
		//ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ВозвратнаяТара, Основание);
		ЗаполнитьУслугиПоОстаткамУпр();
		
		//Скорректируем количество
		МассивСтрокНаУдаление = Новый Массив;
				
		Для каждого мСтрока Из Основание.Товары Цикл
			
			Если мСтрока.КоличествоФакт = 0 Тогда				
				Продолжить;				
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяСтрока, мСтрока);	
			
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			//начало изменений Ожиганов 30.04.2015 немного оптимизируем проведение 
			//ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ЭтотОбъект);
			//
			//конец изменений 
			
			//т.к. резервы будут сниматься заданием на подбор
			НоваяСтрока.ЗаказПокупателя = Неопределено;
			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;			
			
			НоваяСтрока.Количество = мСтрока.КоличествоФакт;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура"					, НоваяСтрока.Номенклатура);
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры"	, НоваяСтрока.ХарактеристикаНоменклатуры);
			
			НайдемСтроку = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Сделка.Товары, СтруктураОтбора);
			
			Если Не НайдемСтроку = Неопределено Тогда			
				НоваяСтрока.СтавкаНДС = НайдемСтроку.СтавкаНДС;			
				НоваяСтрока.Цена = НайдемСтроку.Цена;			
				НоваяСтрока.ПЦ_ТипЦен = НайдемСтроку.ПЦ_ТипЦен;	
				
				//{28.11.2016 Островерхий заявка №57373 
				НоваяСтрока.ПЦ_ПроцентДопИзмененияЦены = НайдемСтроку.ПЦ_ПроцентДопИзмененияЦены; 
				//28.11.2016 Островерхий} 
				
				НоваяСтрока.ПроцентСкидкиНаценки = НайдемСтроку.ПроцентСкидкиНаценки;			
				НоваяСтрока.ПроцентАвтоматическихСкидок = НайдемСтроку.ПроцентАвтоматическихСкидок;			
				НоваяСтрока.УсловиеАвтоматическойСкидки = НайдемСтроку.УсловиеАвтоматическойСкидки;			
				НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = НайдемСтроку.ЗначениеУсловияАвтоматическойСкидки;
				//>>250816 Степанов 54372
				НоваяСтрока.УстановкаСкидокНоменклатуры         = НайдемСтроку.ЗначениеУсловияАвтоматическойСкидки;
				НоваяСтрока.НомерСтрокиПолучателя               = НайдемСтроку.НомерСтрокиПолучателя;
				НоваяСтрока.НомерСтрокиТовара                   = НайдемСтроку.НомерСтрокиТовара;
				//<<
				
				//{15.07.2015 Островерхий заявка №41778, приведем к ед. изм. заказа 
				Если НЕ НоваяСтрока.ЕдиницаИзмерения = НайдемСтроку.ЕдиницаИзмерения Тогда
					
					СтарыйКоэф = ?(НоваяСтрока.Коэффициент = 0,1,НоваяСтрока.Коэффициент);
					НоваяСтрока.ЕдиницаИзмерения = НайдемСтроку.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент = ?(НайдемСтроку.Коэффициент=0,1,НайдемСтроку.Коэффициент);
					
					//пересчитаем количество
					НоваяСтрока.Количество = НоваяСтрока.Количество * СтарыйКоэф / НоваяСтрока.Коэффициент;
				
				КонецЕсли;  
				//15.07.2015 Островерхий} 
				
			Иначе
				// Заполняем реквизиты табличной части.
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ЭтотОбъект, "Реализация");
				//m.ionov@a-prof.ru 23.02.2015
				ПересчитатьЦеныПоСтроке(НоваяСтрока,,,КП_ВидЗаказаПокупателя);
				//----m.ionov@a-prof.ru---
			КонецЕсли; 
			
			//{15.07.2015 Островерхий заявка №41778, приведем к ед. изм. заказа  
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект); 
			//15.07.2015 Островерхий} 
			
			//начало изменений Ожиганов 30.04.2015 немного оптимизируем проведение 
			//ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			//конец изменений 
																		
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);						
										
		КонецЦикла; 
		
		//m.ionov@a-prof.ru 02.03.2015
		//Пересчет цен по дате отгрузки сделали в заказе покупателя
		//Если Сделка.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда
        //	ПересчитатьЦены();
		//Иначе
			ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДатаДокумента",ДоговорКонтрагента);
		//КонецЕсли;
		//----m.ionov@a-prof.ru---
    //----m.ionov@a-prof.ru---
	КонецЕсли;
	
	Если ТипОснования = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, Основание, Документы.РеализацияТоваровУслуг.СтруктураДополнительныхДанныхФормы());
	КонецЕсли;
	
	//начало изменений Ожиганов 30.04.2015 немного оптимизируем проведение 
	СтароеОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
	//конец изменений 
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");

	//начало изменений Ожиганов 30.04.2015 немного оптимизируем проведение 
	Если ТипОснования = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") и Не СтароеОтражатьВБухгалтерскомУчете Тогда
		ОтражатьВБухгалтерскомУчете = Ложь;
		ОтражатьВНалоговомУчете 	= Ложь;
	КонецЕсли;	
	//конец изменений 
	ОбработкаЗаполненияРегл(Основание);

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
		УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	КонецЕсли;
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();

	//m.ionov@a-prof.ru 21.05.2014
	Если Проведен И ПараметрыСеанса.ПроведениеДокументов Тогда
		//Далее идут только проверки и очистки реквизитов которые сделались при первом проведении документа
		Возврат;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 
	
	
	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
		И (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
		Услуги.Очистить();
		
	КонецЕсли;
	
	
	//начало изменений  37853
	Если (Дата > '20150324' или ЭтоНовый()) и (ЗначениеЗаполнено(Сделка) или ЗначениеЗаполнено(СП_ЗаданиеНаПодбор)) и РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПРГ_Сделка = ?(ЗначениеЗаполнено(Сделка),Сделка,СП_ЗаданиеНаПодбор.Заказ);
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РеализацияТоваровУслуг.Ссылка
		                      |ИЗ
		                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		                      |ГДЕ
		                      |	РеализацияТоваровУслуг.Ссылка <> &Ссылка
		                      |	И РеализацияТоваровУслуг.Проведен
		                      |	И РеализацияТоваровУслуг.Сделка = &ПРГ_Сделка");
	     Запрос.УстановитьПараметр("Ссылка",Ссылка);
		 Запрос.УстановитьПараметр("ПРГ_Сделка",ПРГ_Сделка);
		 Выборка = Запрос.Выполнить().Выбрать();
		 Если Выборка.Следующий() Тогда
			 Сообщить("По заказу "+ПРГ_Сделка+" уже есть сформированная реализация "+Выборка.Ссылка);
			 Если Не РольДоступна("ПолныеПрава") Тогда
				 Отказ = Истина;
				 возврат;
			 КонецЕсли; 
		 КонецЕсли; 
	КонецЕсли;	 
	//конец изменений
	
	// Если вид операции документа "АктВыполненныхРабот", то очистим ТЧ Товары и ВозвратнаяТара
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот Тогда
		
		Если Товары.Количество() > 0 Тогда
			Товары.Очистить();
		КонецЕсли;
		
		Если ВозвратнаяТара.Количество() > 0 Тогда
			ВозвратнаяТара.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	// В этом случае почистим в табличных частях поле СпособСписанияОстаткаТоваров.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		Сделка = Неопределено;
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = "";
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = "";
			КонецЕсли;
		КонецЦикла;
	//для брака способ списания всегда - со склада
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				Сообщить("В строке №"+СтрокаТаблицы.НомерСтроки+" табличной части ""Товары"" изменен способ списания остатка товаров: было 'Из резерва', установлено 'Со склада'."+Символы.ПС+"   Списывать брак из резерва запрещено.", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				Сообщить("В строке №"+СтрокаТаблицы.НомерСтроки+" табличной части ""Возвратная тара"" изменен способ списания остатка товаров: было 'Из резерва', установлено 'Со склада'."+Символы.ПС+"   Списывать брак из резерва запрещено.", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Необходимо, чтобы качество обязательно было "Новый"
		КачествоНовый = Справочники.Качество.Новый;
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.Качество <> КачествоНовый Тогда
				СтрокаТаблицы.Качество = КачествоНовый;
			КонецЕсли;
		КонецЦикла
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сделка) И Сделка <> Неопределено Тогда
		Сделка = Неопределено;
	КонецЕсли;
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
	УправлениеЗаказами.ЗаполнитьЗаказПокупателяВТЧ(ВидОперации,ЭтотОбъект, "Реализация");
	
	
	Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
		//начало изменений Ожиганов 01.04.2016 исправление ошибки способа списания на основания заданиия на подбор
		//Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
		//{19.04.2016 Островерхий заявка №51592 
		//   	Если (НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) или ЗначениеЗаполнено(СП_ЗаданиеНаПодбор)
		//   		или (ЗначениеЗаполнено(Сделка) и ТипЗнч(Сделка)=Тип("ДокументСсылка.ЗаказПокупателя"))) 
		//   		И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
		Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
		//19.04.2016 Островерхий} 	
		//конец изменений 	
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
		//начало изменений 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоБУРасходов) и ЗначениеЗаполнено(СтрокаТаблицы.СубконтоБУ)
		   и ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходовБУ) и ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходовБУ)
		Тогда
			 СтрокаТаблицы.СубконтоБУРасходов = СтрокаТаблицы.СубконтоБУ;
		 КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоНУРасходов) и ЗначениеЗаполнено(СтрокаТаблицы.СубконтоНУ)
		   и ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходовНУ) и ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходовНУ)
		Тогда
			 СтрокаТаблицы.СубконтоНУРасходов = СтрокаТаблицы.СубконтоНУ;
		КонецЕсли;
		//конец изменений
		
		//>>250816 Степанов
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок<>0 тогда
			ЦенаПослеСкидки = Окр(СтрокаТаблицы.Цена * (100-СтрокаТаблицы.ПроцентСкидкиНаценки)/100*(100-СтрокаТаблицы.ПроцентАвтоматическихСкидок)/100, 2);
			СуммаСкидкиБезНДС = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество - ЦенаПослеСкидки * СтрокаТаблицы.Количество;
			Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
				СтрокаТаблицы.СуммаСкидкиСНДС = СуммаСкидкиБезНДС+УчетНДС.РассчитатьСуммуНДС(СуммаСкидкиБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			Иначе
				СтрокаТаблицы.СуммаСкидкиСНДС = СуммаСкидкиБезНДС;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.СуммаСкидкиСНДС=0;
		КонецЕсли;	
		//<<
		
	КонецЦикла;
	
	//{10.09.2015 Островерхий заявка №43860 
	Для каждого СтрокаТаблицы Из ЭтотОбъект.Услуги Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоБУРасходов) и ЗначениеЗаполнено(СтрокаТаблицы.СубконтоБУ)
			и ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходовБУ) и ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходовБУ)
			Тогда
			СтрокаТаблицы.СубконтоБУРасходов = СтрокаТаблицы.СубконтоБУ;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СубконтоНУРасходов) и ЗначениеЗаполнено(СтрокаТаблицы.СубконтоНУ)
			и ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходовНУ) и ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходовНУ)
			Тогда
			СтрокаТаблицы.СубконтоНУРасходов = СтрокаТаблицы.СубконтоНУ;
		КонецЕсли;
	КонецЦикла; 
	//10.09.2015 Островерхий} 
	
	Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;          
	КонецЦикла;
	
	ЗаполнитьСкладыВТЧ();
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "СоставНабора", "СерийныеНомераСоставНабора");
	
	
	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	мВозвращатьРезервы = Ложь;
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения и Не ПометкаУдаления Тогда
		мВозвращатьРезервы = истина;
	КонецЕсли;	
	// в обработке проведения
	////++ Spl_Апроф 26.12.2014 (k.russkih@a-prof.ru)
	////начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	////Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) И Не Проведен  Тогда	
	//Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) И Не Проведен и Не ПараметрыСеанса.ПроведениеДокументов  Тогда	
	////конец изменений 		 
	//	АП_ОбщегоНазначенияСервер.ЗакрытиеРезервов(РежимЗаписи, СП_ЗаданиеНаПодбор, Дата, Перечисления.СП_СтатусыЗаданияНаПодбор.СформированыДокументы);			
	//КонецЕсли; 
	////-- Spl_Апроф
	////конец изменений 
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//m.ionov@a-prof.ru 22.05.2014
	Если ПараметрыСеанса.ПроведениеДокументов Тогда
		Возврат;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	//m.ionov@a-prof.ru 21.10.2014	
	МенятьСтатус = Истина;
	Если ДополнительныеСвойства.Свойство("МенятьСтатус", МенятьСтатус) = Ложь Тогда
		МенятьСтатус = Истина;
	КонецЕсли;
    //начало изменений Ожиганов 26.05.2015 немножко оптимизируем все изменения 
	// в обработке проведения
	////Если МенятьСтатус И ЗначениеЗаполнено(СП_ЗаданиеНаПодбор)  Тогда
	//Если МенятьСтатус И ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) и Не ПараметрыСеанса.ПроведениеДокументов  Тогда
	////конец изменений 		
	//	ОбновитьСтатусЗаказа(Отказ);
	//	АП_ОбщегоНазначенияСервер.ОбновимСтатусЗаданияНаПодбор(СП_ЗаданиеНаПодбор);
	//КонецЕсли;
	////----m.ionov@a-prof.ru---	
	////конец изменений 
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
	//{04.07.2016 Островерхий заявка №53363
	//Проверим что в возвратной таре указанна только тара (10.04)
    ВидНоменклатуры10_04  =  ЗначениеИзСтрокиВнутр("{""#"",a2a4ee36-68b1-47cf-adfa-a102f79aaea0,58:8936005056a963c611e33a53d2cdbceb}"); //10.04 Тара и тарные материалы
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
		|ГДЕ
		|	РеализацияТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
		|	И РеализацияТоваровУслугВозвратнаяТара.Номенклатура.ВидНоменклатуры <> &ВидНоменклатуры";

	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры10_04);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатПустой = Запрос.Выполнить().Пустой();
	Если НЕ РезультатПустой Тогда
		ОбщегоНазначения.СообщитьОбОшибке("На странице 'Тара' выбрана номенклатура, не относящаяся к '10.04 Тара и тарные материалы'!", Отказ);
	КонецЕсли; 	
	//04.07.2016 Островерхий}
	
КонецПроцедуры

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, СтруктураШапкиДокумента)

	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете)
		ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		
		Возврат;
	КонецЕсли;
		
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	Иначе
		СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке", УчетнаяПолитикаРегл.НачислятьНДСПоОтгрузке);
		СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС", УчетнаяПолитикаРегл.МоментОпределенияНалоговойБазыНДС);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента)

	УчетнаяПолитикаУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаУпр) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, СтруктураШапкиДокумента);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьВСтруктуруШапкиСведенияОСчетахРасчетов(ЭтотОбъект, СтруктураШапкиДокумента);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);
	
	// Для определения где нужно проверять заказ: в шапке или в ТЧ.
	ЗаказВТабличнойЧасти = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", ЗаказВТабличнойЧасти);
	СтруктураШапкиДокумента.Вставить("ОтгрузкаБезПереходаПравСобственности", ВидОперации=Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
    СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке",ложь); //настоящее значение запишется в структуру при подготовке параметров учетной политики
    СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке); //настоящее значение запишется в структуру при подготовке параметров учетной политики

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                      , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"                   , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                       , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                                , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                                , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом"     , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"           , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"                                  , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"               , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов" , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	//начало изменений Ожиганов 21.05.2015
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"               , "АП_СтатусЗаказа"                         , "АП_СтатусЗаказа");
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"               ,"КП_ВидЗаказаПокупателя"                  , "КП_ВидЗаказаПокупателя");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СП_ЗаданиеНаПодбор"   ,"СтатусДокумента"                         , "СтатусЗаданияНаПодбор");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СП_ЗаданиеНаПодбор"   ,"ДатаФормированияДокументов"              , "ТекДатаФормированияДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад" 				  ,"НСИ_ПодключенКSolvo"                      , "НСИ_ПодключенКSolvo");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"               , "АП_СтатусЗаданияНаПодбор"   			  , "АП_СтатусЗаданияНаПодбор");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"               ,"АП_СтатусЗаданияНаПеревозку" 			  , "АП_СтатусЗаданияНаПеревозку");
	//конец изменений 
	//конец изменений                                                                 
	
	// Если сделка - Заказ покупателя, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка) 
		И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                            , "ВалютаЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                         , "КурсВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"                    , "КратностьВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                                , "СделкаВидОперации");
	КонецЕсли;
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	/// Кунов О.В., 01.09.2017 - 66373
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента" ,"ВидУсловийДоговора", "ВидУсловийДоговора");
	///
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);
	
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                        , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                    , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                                , "Цена");
	СтруктураПолей.Вставить("Номенклатура"                        , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                          , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("КоличествоДок"                       , "Количество");
	СтруктураПолей.Вставить("Качество"                            , "Качество");
	СтруктураПолей.Вставить("Склад"                               , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                           , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Сумма"                               , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                            , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                                 , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                              , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"          , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                   , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"                , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"         , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"         , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки" , "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("КлючСтроки"                          , "КлючСтроки");
	СтруктураПолей.Вставить("ТипНоменклатуры"                     , "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");
	СтруктураПолей.Вставить("ЗаказПокупателя"                     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента"     , "Количество");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры"     , "ПринадлежностьНоменклатуры");
	//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
	СтруктураПолей.Вставить("ДатаВыпуска"     , "ДатаВыпуска");
	//конец изменений 
	//>>260816 Степанов 54372
	СтруктураПолей.Вставить("УстановкаСкидокНоменклатуры"         , "УстановкаСкидокНоменклатуры");
	СтруктураПолей.Вставить("НомерСтрокиПолучателя"               , "НомерСтрокиПолучателя");
	СтруктураПолей.Вставить("НомерСтрокиТовара"                   , "НомерСтрокиТовара");
	СтруктураПолей.Вставить("СуммаСкидкиСНДС"                     , "СуммаСкидкиСНДС");
	//<<
	//{28.11.2016 Островерхий заявка №57373 
	СтруктураПолей.Вставить("ПроцентДопИзмененияЦены"             , "ПЦ_ПроцентДопИзмененияЦены"); 
	//28.11.2016 Островерхий} 
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Содержание"          , "Содержание");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"          , "Количество");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 , "СуммаНДС");
	СтруктураПолей.Вставить("СчетДоходовБУ"       , "СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоБУ"          , "СубконтоБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ"       , "СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоНУ"          , "СубконтоНУ");
	СтруктураПолей.Вставить("СчетРасходовБУ"      , "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетРасходовНУ"      , "СчетРасходовНУ");
	СтруктураПолей.Вставить("ЗаказПокупателя"     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"        , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"        , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	//{10.09.2015 Островерхий заявка №43860 
	СтруктураПолей.Вставить("СубконтоБУРасходов"     , "СубконтоБУРасходов");
	СтруктураПолей.Вставить("СубконтоНУРасходов"     , "СубконтоНУРасходов"); 
	//10.09.2015 Островерхий} 
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей,СтруктураСложныхПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("Склад"                     , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                 , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей);
	
	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	//Заполним счета учета
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 	СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Услуги", 			ТаблицаПоУслугам, 	СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТаре, СтруктураШапкиДокумента, Истина);
	
	//начало изменений Ожиганов 17.11.2015 приведение сумм по упр. учету к суммам бу, в случае если валюты совпадают
	ПРГ_ПривестиСуммыУПРКСуммамБУ(ТаблицаПоТоварам, СтруктураШапкиДокумента);
	ПРГ_ПривестиСуммыУПРКСуммамБУ(ТаблицаПоУслугам, СтруктураШапкиДокумента);
	//конец изменений 
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	ПроводитьПоПартиям = ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументов 
		                     ИЛИ ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух 
							 ИЛИ ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовНал;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
	
	//m.ionov@a-prof.ru 21.05.2014
	Если НЕ Проведен ИЛИ НЕ ПараметрыСеанса.ПроведениеДокументов Тогда
		// Проверим правильность заполнения шапки документа
		ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, СтруктураШапкиДокумента);

	
	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);
	
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре);
	
	ПроводитьПоВзаиморасчетам = СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		И НЕ СтруктураШапкиДокумента.ОтгрузкаБезПереходаПравСобственности ;
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
		Отказ, Заголовок);
	
		
	//m.ionov@a-prof.ru 21.05.2014
	Если НЕ Проведен ИЛИ НЕ ПараметрыСеанса.ПроведениеДокументов Тогда
			
			// Проверить заполнение ТЧ .
			ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
			ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
			ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
			
			//Проверим счета учета
			СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 			ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
			СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента, Отказ, Заголовок);
			СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Услуги", 			ТаблицаПоУслугам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
			
			//Проверим корректность указанных (заполненных) счетов учета
			ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
			
			//Проверим на возможность проведения в БУ и НУ
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
				УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
				мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
			КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---	
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура());
	
	// Движения по документу
	Если Не Отказ Тогда
		// Подготовим таблицу товаров для проведения.
		ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, ТаблицаПоУслугам, СтруктураШапкиДокумента);
		//>>Степанов 210915 №44117
		Если НЕ РольДоступна("ПолныеПрава") тогда
			Если (ТаблицаПоСкидкам = 0) или (ТаблицаПоСкидкам = 2) тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		//<<
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре,
		ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	КонецЕсли;
	
	//{26.01.2016 Островерхий заявка №46457 
	Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
		ПолныеПрава.ЗаписатьНаборЗаписейНаСервере("СвободныеОстатки", Ссылка,, "РегистрНакопления");
	КонецЕсли; 
	//26.01.2016 Островерхий}
	
	//начало изменений
	Если НЕ ПараметрыСеанса.ПроведениеДокументов Тогда
		//m.ionov@a-prof.ru 07.11.2014
		Если Не Отказ Тогда
			//начало изменений 
			ПргСтатусЗаданияНаПодбор     = Неопределено;
			ПргСтатусЗаданияНаПеревозку  = Неопределено;
			Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
				АП_ОбщегоНазначенияСервер.ОбновитьСтатусыЗаданийОтгрузка(СП_ЗаданиеНаПодбор,
				СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.СтатусЗаданияНаПодбор,
				СтруктураШапкиДокумента.ТекДатаФормированияДокументов,
				СтруктураШапкиДокумента.НСИ_ПодключенКSolvo, 
				ПргСтатусЗаданияНаПеревозку, ПргСтатусЗаданияНаПодбор,
				?(ДополнительныеСвойства.Свойство("ДопРеквизитыЗадПодбор"), ДополнительныеСвойства.ДопРеквизитыЗадПодбор,Неопределено));
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Сделка) Тогда
				АП_ОбщегоНазначенияСервер.ОбновитьСтатусЗаказаОтгрузка(Сделка,СтруктураШапкиДокумента.АП_СтатусЗаказа
				,СтруктураШапкиДокумента.АП_СтатусЗаданияНаПодбор,СтруктураШапкиДокумента.АП_СтатусЗаданияНаПеревозку 
				,ПргСтатусЗаданияНаПеревозку, ПргСтатусЗаданияНаПодбор);
			КонецЕсли;	
			
			//ОбновитьСтатусЗаказа(Отказ, Истина,СтруктураШапкиДокумента);
			////конец изменений
			////++ Spl_Апроф 26.12.2014 (k.russkih@a-prof.ru)
			//Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
			//	АП_ОбщегоНазначенияСервер.ОбновимСтатусЗаданияНаПодбор(СП_ЗаданиеНаПодбор);
			//КонецЕсли;
		Иначе
			//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
			//++ Spl_Апроф 26.12.2014 (k.russkih@a-prof.ru)
			//Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
			//	АП_ОбщегоНазначенияСервер.ВернутьРезервыПоЗаданиюНаПодбор(СП_ЗаданиеНаПодбор);
			//КонецЕсли;
			//конец изменений 
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		Если НЕ Отказ Тогда
		
			//{04.08.2015 Островерхий заявка №42367
			//Оптимизируем контроль остатком по товарам на складах, процедура должна вызываться самая последняя
			КонтроляОстатковПоТоварамНаСкладах(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения); 
			//04.08.2015 Островерхий} 
		
		КонецЕсли; 

	КонецЕсли;	
	//конец изменений
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТаре",ТаблицаПоТаре);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура КонтроляОстатковПоТоварамНаСкладах(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения)

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
		
		ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, ЭтотОбъект);
		
		ВидСкладаОпт  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
		МассивКомплектыОпт = ТаблицаПоКомплектам.НайтиСтроки(ВидСкладаОпт);
		МассивТараОпт = ТаблицаПоТаре.НайтиСтроки(ВидСкладаОпт);
		
		Если МассивКомплектыОпт.Количество() <> 0 ИЛИ МассивТараОпт.Количество() <> 0 Тогда
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				Если Не ПараметрыСеанса.ПроведениеДокументов Тогда
					ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары",         СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения, ?(ЗначениеЗаполнено(Сделка),Истина,Ложь)); //m.ionov@a-prof.ru 05.02.2015
				КонецЕсли;	
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				Если Не ПараметрыСеанса.ПроведениеДокументов Тогда
					ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
 
Процедура ПриКопировании(ОбъектКопирования)
	
	ОсновноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");
	
	Если ЗначениеЗаполнено(ОсновноеПодразделение) Тогда
		Подразделение = ОсновноеПодразделение;
	КонецЕсли;

	//Если в копируемом документе было право отпуска без контроля взаиморасчетов, то в новом документе это право нужно давать явно.
	ОтключитьКонтрольВзаиморасчетов = Ложь;
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа", ОбъектКопирования.Ссылка);
	
	//m.ionov@a-prof.ru 03.02.2015
	СП_ЗаданиеНаПодбор = Документы.СП_ЗаданиеНаПодбор.ПустаяСсылка();
	//----m.ionov@a-prof.ru---
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;

	// Склад проверяем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	// и склад не в ТЧ.
	Если мУказаниеСкладовВТЧ
		ИЛИ (Товары.Количество() + ВозвратнаяТара.Количество() = 0) Тогда
		//Не требуется указание склада в шапке
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("Склад");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
	КонецЕсли;
	Если УчитыватьНДС Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.СтавкаНДС");
		ПроверяемыеРеквизиты.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;
	
	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Товары, ЭтотОбъект, Отказ);
	
КонецПроцедуры

//m.ionov@a-prof.ru 03.11.2014
Процедура ОбновитьСтатусЗаказа(Отказ,Проведение=Ложь,СтруктураШапкиДокумента=Неопределено)
	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	возврат;
	//конец изменений 

	Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
		//Инициализируем изменение статуса заказа
		Попытка
			
			Если СтруктураШапкиДокумента <> Неопределено Тогда
				Если Проведение Тогда
					Если СтруктураШапкиДокумента.АП_СтатусЗаказа = Перечисления.АП_СтатусыЗаказов.Отгружен Тогда
						 возврат;
					КонецЕсли;	
				КонецЕсли;	
				ОбъектЗаказ = СП_ЗаданиеНаПодбор.Заказ.ПолучитьОбъект();
			Иначе
				ОбъектЗаказ = СП_ЗаданиеНаПодбор.Заказ.ПолучитьОбъект();
				//начало изменений 
				Если Проведение Тогда
					Если ОбъектЗаказ.АП_СтатусЗаказа = Перечисления.АП_СтатусыЗаказов.Отгружен Тогда
						 возврат;
					КонецЕсли;	
				КонецЕсли;	
				//конец изменений 
			КонецЕсли;	
			
			
	    	ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
			ОбъектЗаказ.Записать(РежимЗаписиДокумента.Запись);
			ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
			
		Исключение
		    ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
		КонецПопытки;
	ИначеЕсли ЗначениеЗаполнено(Сделка) И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		//Инициализируем изменение статуса заказа
		Попытка
			
			ОбъектЗаказ = Сделка.ПолучитьОбъект();
	    	ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
			ОбъектЗаказ.Записать(РежимЗаписиДокумента.Запись);
			ОбъектЗаказ.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
			
		Исключение
		    ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
    
Функция МожноИнтрактивноМенятьДокумент() Экспорт
	
	МожноМенять = Истина;
	
	Если ЭтоНовый() 
		ИЛИ РольДоступна("АП_Администратор")// ИЛИ РольДоступна("ПолныеПрава")
		ИЛИ АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии) Тогда
		Возврат МожноМенять;
	КонецЕсли;
	
	//Если перемещение введено на основании задания на подбор и склад получаетль = складу транзит (отгрузка со склада) то запрещаем менять
	
	Если ЗначениеЗаполнено(СП_ЗаданиеНаПодбор) Тогда
		
		МожноМенять = Ложь;
		
	КонецЕсли;
	
	Возврат МожноМенять;
	
КонецФункции  

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//{10.08.2015 Островерхий заявка №б/н 
	//m.ionov@a-prof.ru 10.02.2015
	//Если ЗначениеЗаполнено(Сделка) и ОтражатьВБухгалтерскомУчете Тогда
	//	//Проверим - а можно ли сделать отмену проведения
	//	Если (Не НачалоДня(Дата) = НачалоДня(ТекущаяДата())) 
	//		И (Не АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии)) Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке("Отменить проведение накладной " + СокрЛП(Ссылка) + " может только сотрудник бухгалтерии!", Отказ);
	//	КонецЕсли;
	//КонецЕсли; 
	//10.08.2015 Островерхий} 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	МенятьСтатус = Истина;
	Если ДополнительныеСвойства.Свойство("МенятьСтатус", МенятьСтатус) = Ложь Тогда
		МенятьСтатус = Истина;
	КонецЕсли;
	
	Если мВозвращатьРезервы Тогда
		АП_ОбщегоНазначенияСервер.ПРГВернутьРезервыПоЗаданиюНаПодбор(СП_ЗаданиеНаПодбор);
	КонецЕслИ;	
	
	Если МенятьСтатус Тогда
		ОбновитьСтатусЗаказа(Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьЦены() Экспорт
	
	ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДатаДокумента",ДоговорКонтрагента);
	
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		КП_ВидЗаказаПокупателя = Сделка.КП_ВидЗаказаПокупателя;
	Иначе
		КП_ВидЗаказаПокупателя = Неопределено;
	КонецЕслИ;	
	//конец изменений 
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		ПересчитатьЦеныПоСтроке(СтрокаТабличнойЧасти,,,КП_ВидЗаказаПокупателя);
					
	КонецЦикла; 
	
	// Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мМинимальныеЦены = Новый ТаблицаЗначений;
		мМинимальныеЦены.Колонки.Добавить("Номенклатура");
		мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
		мМинимальныеЦены.Колонки.Добавить("ЕдиницаИзмерения");
		мМинимальныеЦены.Колонки.Добавить("Цена");
		
		мСписокФильтров = УправлениеДопПравамиПользователей.ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа();
		
		мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",                      ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата));
		//>>200916 Степанов ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров,  мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьЦеныПоСтроке(СтрокаТабличнойЧасти, МожноИзменитьКоличество = Ложь, РассчитатьСкидки = Ложь,КП_ВидЗаказаПокупателя=Неопределено) Экспорт
	
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	Если Не ОбязательноДолжнаБытьЦена(КП_ВидЗаказаПокупателя) Тогда
    //конец изменений 		
		
		СтрокаТабличнойЧасти.Цена = 0;
		СтрокаТабличнойЧасти.ПЦ_ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		
		СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		
	Иначе
	
	
		СпТипЦен = ПЦ_Ценообразование.ПолучитьТипЦенПродажи(Дата, 
														?(ЗначениеЗаполнено(Грузополучатель) и ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки"), Грузополучатель.НСИ_Регион, Контрагент.НСИ_Регион),
														СтрокаТабличнойЧасти.Номенклатура.Проект,
														Контрагент.НСИ_КаналПродаж,
														//?(ЗначениеЗаполнено(Грузополучатель) и ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки"), Грузополучатель.НСИ_КаналПродаж, Контрагент.НСИ_КаналПродаж),
														?(ЗначениеЗаполнено(Грузополучатель) и ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки"), Грузополучатель.НСИ_УсловияПоставки, Контрагент.НСИ_УсловияПоставки),
														Контрагент,
														ДоговорКонтрагента,
														Грузополучатель,
														СтрокаТабличнойЧасти.Номенклатура.НСИ_ТоварнаяКатегория,
														СтрокаТабличнойЧасти.Номенклатура.НСИ_Брендообъем,
														СтрокаТабличнойЧасти.Номенклатура,
														СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	
		Если СпТипЦен.Количество() = 1 Тогда
			СтрокаТабличнойЧасти.ПЦ_ТипЦен = СпТипЦен[0].Значение;
		ИначеЕсли СпТипЦен.Количество() = 0 Тогда
			СтрокаТабличнойЧасти.ПЦ_ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		Иначе
			ОбщегоНазначения.Сообщение("По номенклатуре " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " (код: " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура.Код) + ") найдено несколько типов цен!", СтатусСообщения.Важное);
			СтрокаТабличнойЧасти.ПЦ_ТипЦен = СпТипЦен[0].Значение;
		КонецЕсли;
	
		СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	
		Если МожноИзменитьКоличество Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		Иначе
			ПЦ_Ценообразование.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
КонецПроцедуры

//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
Функция ОбязательноДолжнаБытьЦена(КП_ВидЗаказаПокупателя) Экспорт
//конец изменений 	
	
	Если КП_ВидЗаказаПокупателя = Неопределено или Не ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаПокупателю
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСотруднику
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.СменаПокупателя
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ТранзитнаяОтгрузка Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	//Если Сделка.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаПокупателю
	//	ИЛИ Сделка.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСотруднику
	//	ИЛИ Сделка.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.СменаПокупателя
	//	ИЛИ Сделка.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ТранзитнаяОтгрузка Тогда
	//	
	//	Возврат Истина;
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;
	//конец изменений 
КонецФункции

Процедура ПроверитьЗаказНаСогласование(Отказ) Экспорт
	
	Если АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.Администратор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сделка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Сделка.ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании
		ИЛИ Сделка.КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(СокрЛП(Сделка) + " находится на согласовании, формировании реализации не возможно!", Отказ);
	ИначеЕсли Сделка.ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НеСогласован
		ИЛИ Сделка.КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НеСогласован Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(СокрЛП(Сделка) + " находится не согласован, формировании реализации не возможно!", Отказ);
	КонецЕсли;
КонецПроцедуры
//----m.ionov@a-prof.ru---

//начало изменений Ожиганов 17.11.2015 приведение сумм по упр. учету к суммам бу, в случае если валюты совпадают
Процедура ПРГ_ПривестиСуммыУПРКСуммамБУ(ТаблицаПоТоварам, СтруктураШапкиДокумента)
	Если мВалютаРегламентированногоУчета <> мВалютаУпрУчета Тогда
		возврат;
	КонецЕсли;	
	Если мВалютаУпрУчета = СтруктураШапкиДокумента.ВалютаДокумента и Не СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах Тогда
		возврат;
	КонецЕсли;	
	
	МассСуммаУПР = ТаблицаПоТоварам.ВыгрузитьКолонку("Сумма");
	ТаблицаПоТоварам.ЗагрузитьКолонку(МассСуммаУПР,"Стоимость");
	ТаблицаПоТоварам.ЗагрузитьКолонку(МассСуммаУПР,"СуммаУПР");
	МассНДС	    = ТаблицаПоТоварам.ВыгрузитьКолонку("НДС");
	ТаблицаПоТоварам.ЗагрузитьКолонку(МассНДС,"НДСУпр");
	
	Если  ТаблицаПоТоварам.Итог("СуммаСНДСДок") = ТаблицаПоТоварам.Итог("СтоимостьБезСкидокВВалюте") Тогда
		ТаблицаПоТоварам.ЗагрузитьКолонку(МассСуммаУПР,"СтоимостьБезСкидок");
	КонецЕслИ;	
	
КонецПроцедуры
//конец изменений 


/// Кунов О.В., 08.08.2017 - 66373
Процедура ДвиженияПоРегиструОграниченийОбъемаПоставок(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПЦ_ОграничениеОбъемаПоставкиОбороты.ДоговорКонтрагента,
	|	ПЦ_ОграничениеОбъемаПоставкиОбороты.Номенклатура,
	|	ПЦ_ОграничениеОбъемаПоставкиОбороты.Брендообъем,
	|	ПЦ_ОграничениеОбъемаПоставкиОбороты.УсловиеПоставкиПоДоговоруСКонтрагентом,
	|	СУММА(ПЦ_ОграничениеОбъемаПоставкиОбороты.Количество) КАК Количество,
	|	СУММА(ПЦ_ОграничениеОбъемаПоставкиОбороты.Количество) КАК КоличествоНеотгруженное
	|ИЗ
	|	РегистрНакопления.ПЦ_ОграничениеОбъемаПоставки КАК ПЦ_ОграничениеОбъемаПоставкиОбороты
	|ГДЕ
	|	ПЦ_ОграничениеОбъемаПоставкиОбороты.Регистратор = &Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПЦ_ОграничениеОбъемаПоставкиОбороты.ДоговорКонтрагента,
	|	ПЦ_ОграничениеОбъемаПоставкиОбороты.Номенклатура,
	|	ПЦ_ОграничениеОбъемаПоставкиОбороты.Брендообъем,
	|	ПЦ_ОграничениеОбъемаПоставкиОбороты.УсловиеПоставкиПоДоговоруСКонтрагентом");
	
	Запрос.УстановитьПараметр("Заказ", СтруктураШапкиДокумента.Сделка);
	
	ТоварыВЗаказе = Запрос.Выполнить().Выгрузить();
	
	ТоварыВРеализации = ТаблицаПоТоварам.Скопировать(, "Номенклатура, Количество");
	ТоварыВРеализации.Свернуть("Номенклатура", "Количество");
	
	ЗапросБрендообъемов = Новый Запрос(
	"ВЫБРАТЬ
	|	ТЗ.*
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура.НСИ_Брендообъем КАК Брендообъем,
	|	СУММА(втНоменклатура.Количество) КАК Количество
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|СГРУППИРОВАТЬ ПО втНоменклатура.Номенклатура.НСИ_Брендообъем
	|");
	
	ЗапросБрендообъемов.УстановитьПараметр("ТЗ", ТоварыВРеализации);
	
	ТоварыВРеализацииСБрендообъемами = ЗапросБрендообъемов.Выполнить().Выгрузить();
	
	Для Каждого ТоварыВЗаказеСтрока Из ТоварыВЗаказе Цикл
		
		Если ЗначениеЗаполнено(ТоварыВЗаказеСтрока.Номенклатура) Тогда
			ТоварыВРеализацииСтроки = ТоварыВРеализации.НайтиСтроки(Новый Структура("Номенклатура, Брендообъем", ТоварыВЗаказеСтрока.Номенклатура, ТоварыВЗаказеСтрока.Брендообъем));
		Иначе
			ТоварыВРеализацииСтроки = ТоварыВРеализацииСБрендообъемами.НайтиСтроки(Новый Структура("Брендообъем", ТоварыВЗаказеСтрока.Брендообъем));
		КонецЕсли;
		
		Для Каждого ТоварыВРеализацииСтрока Из ТоварыВРеализацииСтроки Цикл
			Если ТоварыВРеализацииСтрока.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			КоличествоКСписанию = Мин(ТоварыВЗаказеСтрока.КоличествоНеотгруженное, ТоварыВРеализацииСтрока.Количество);
			ТоварыВЗаказеСтрока.КоличествоНеотгруженное = ТоварыВЗаказеСтрока.КоличествоНеотгруженное - КоличествоКСписанию;
			ТоварыВРеализацииСтрока.Количество = ТоварыВРеализацииСтрока.Количество - КоличествоКСписанию;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТоварыВЗаказеСтрока Из ТоварыВЗаказе Цикл
		
		Если ЗначениеЗаполнено(ТоварыВЗаказеСтрока.Номенклатура) Тогда
			ТоварыВРеализацииСтроки = ТоварыВРеализации.НайтиСтроки(Новый Структура("Номенклатура, Брендообъем", ТоварыВЗаказеСтрока.Номенклатура, ТоварыВЗаказеСтрока.Брендообъем));
		Иначе
			ТоварыВРеализацииСтроки = ТоварыВРеализацииСБрендообъемами.НайтиСтроки(Новый Структура("Брендообъем", ТоварыВЗаказеСтрока.Брендообъем));
		КонецЕсли;
		
		Для Каждого ТоварыВРеализацииСтрока Из ТоварыВРеализацииСтроки Цикл
			Если ТоварыВРеализацииСтрока.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			ТоварыВЗаказеСтрока.КоличествоНеотгруженное = ТоварыВЗаказеСтрока.КоличествоНеотгруженное - ТоварыВРеализацииСтрока.Количество;
		КонецЦикла;
		
	КонецЦикла;
	
	НаборДвижений = Движения.ПЦ_ОграничениеОбъемаПоставки;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого ТоварыВЗаказеСтрока Из ТоварыВЗаказе Цикл
		
		Если ТоварыВЗаказеСтрока.КоличествоНеотгруженное = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ТоварыВЗаказеСтрока, "ДоговорКонтрагента, Номенклатура, Брендообъем, УсловиеПоставкиПоДоговоруСКонтрагентом");
		
		Движение.Количество = ТоварыВЗаказеСтрока.КоличествоНеотгруженное;
		
		Если Движение.Количество < 0 Тогда
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Количество = - Движение.Количество;
		КонецЕсли;
		
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Движения.ПЦ_ОграничениеОбъемаПоставки.ВыполнитьДвижения();
	
КонецПроцедуры
///


//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 

//конец изменений 
мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

//начало изменений Ожиганов 17.11.2015 приведение сумм по упр. учету к суммам бу, в случае если валюты совпадают
мВалютаУпрУчета			 		 = 	глЗначениеПеременной("ВалютаУправленческогоУчета");
//конец изменений 

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мЕстьКолонкаСерии = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПокупателя");

мУказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
Или (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

мИспользоватьТару = Константы.ИспользоватьВозвратнуюТару.Получить();
мИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат");
мДатаНачалаИспользованияРасширеннойАналитики = глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");

