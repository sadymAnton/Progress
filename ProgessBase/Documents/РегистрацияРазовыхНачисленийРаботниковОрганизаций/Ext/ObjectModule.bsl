////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит соответствие доходов и положенных по ним вычетов
Перем мСоответствиеДоходовИВычетов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Выполняет автоматическое заполнение показателей в строке
//
Процедура ЗаполнитьПоказателиСтроки(СотрудникФизлицо, ВидРасчета, НомерСтроки, Подразделение = Неопределено, ГоловнаяОрганизация, ИмяТЧ = "", ДатаНачала, РучныеИзмененияСтроки = Неопределено) Экспорт 
	
	ПоказателиСтроки = ЗаполнениеДокументовЗК.ПоказателиСтроки(СотрудникФизлицо, ВидРасчета, Подразделение, ГоловнаяОрганизация, ДатаНачала);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект[ИмяТЧ][НомерСтроки - 1], ПоказателиСтроки, , ЗаполнениеДокументовЗК.ИзмененныеВручнуюПоказатели(РучныеИзмененияСтроки));
	
КонецПроцедуры // ЗаполнитьПоказателиСтроки

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Заполняет показатели
//
Функция ЗаполнитьПоказатели(ТекущийСотрудник, Источник) Экспорт 
	
	Если ТекущийСотрудник = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ТЗНачисления					= ОсновныеНачисления.Выгрузить(,"Сотрудник,ВидРасчета,ДатаОкончания");
	ТЗДополнительныеНачисления		= ДополнительныеНачисления.Выгрузить(,"Сотрудник,ВидРасчета,ДатаОкончания");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления",ТЗНачисления);
	Запрос.УстановитьПараметр("ДополнительныеНачисления",ТЗДополнительныеНачисления);
	Запрос.УстановитьПараметр("ПарамДата",НачалоМесяца(ПериодРегистрации));
	
	// получим временную таблицу с сотрудниками и видами расчетов
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ВидРасчета,
	|	Начисления.Сотрудник,
	|	Начисления.ДатаОкончания
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления";
	
	Запрос.Выполнить();
	
	ВТНачисления = "ВТНачисления";
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеНачисления.ВидРасчета,
	|	ДополнительныеНачисления.Сотрудник,
	|	ДополнительныеНачисления.ДатаОкончания
	|ПОМЕСТИТЬ ВТДополнительныеНачисления
	|ИЗ
	|	&ДополнительныеНачисления КАК ДополнительныеНачисления";
	
	Запрос.Выполнить();
	
	ВТДополнительныеНачисления = "ВТДополнительныеНачисления";
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Показатель.ВидПоказателя КАК ВидПоказателя,
	|	ВложенныйЗапрос.Показатель,
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.ДатаОкончания
	|ИЗ (
    |
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Показатели.Показатель.ВидПоказателя КАК ВидПоказателя,
	|		Показатели.Показатель,
	|		Начисления.Сотрудник,
	|		Начисления.ДатаОкончания
	|	ИЗ
	|		ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
	|			ПО Показатели.Ссылка = Начисления.ВидРасчета
	|			И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
	|			И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)
	|			И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
	|			И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
	|			И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|			И Не Показатели.Показатель.Предопределенный
	|	ГДЕ
	|		НЕ (Показатели.Показатель ЕСТЬ NULL)
	|		И НЕ (Начисления.Сотрудник ЕСТЬ NULL)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Показатели.Показатель.ВидПоказателя КАК ВидПоказателя,
	|		Показатели.Показатель,
	|		ДополнительныеНачисления.Сотрудник,
	|		ДополнительныеНачисления.ДатаОкончания
	|	ИЗ
	|		ВТДополнительныеНачисления КАК ДополнительныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели
	|			ПО Показатели.Ссылка = ДополнительныеНачисления.ВидРасчета
	|			И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
	|			И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)
	|			И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
	|			И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
	|			И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|			И Не Показатели.Показатель.Предопределенный) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ (ВложенныйЗапрос.Показатель ЕСТЬ NULL)
	|	И НЕ (ВложенныйЗапрос.Сотрудник ЕСТЬ NULL)";
	
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Свернуть("ВидПоказателя,Показатель,Сотрудник,ДатаОкончания");
	Показатели = ТаблицаЗапроса.ВыгрузитьКолонку("Показатель");
	Сотрудники = ТаблицаЗапроса.ВыгрузитьКолонку("Сотрудник");
	
	Если ЗначениеЗаполнено(ТаблицаЗапроса) Тогда
		
		ФормаВводаПоказателей = РегистрыСведений.ЗначенияПоказателейСхемМотивации.ПолучитьФорму("ФормаВводаЗначенийПоказателей");
		ФормаВводаПоказателей.Организация		= Справочники.Организации.ПустаяСсылка();
		ФормаВводаПоказателей.ПериодДействия	= НачалоМесяца(ПериодРегистрации);
		
		ФормаВводаПоказателей.Организация = Организация;
		ФормаВводаПоказателей.мИсточник = Источник;
		ФормаВводаПоказателей.ФормаАвтозаполнение(ТаблицаЗапроса, Сотрудники, Показатели, , Ложь);
		ФормаВводаПоказателей.мСотрудникДляОткрытия = ТекущийСотрудник;
		ФормаВводаПоказателей.Открыть();

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции //ЗаполнитьПоказатели

#КонецЕсли

Процедура Автозаполнение(ИмяТабличнойЧасти, СписокРаботников, ЗначенияЗаполнения, ГоловнаяОрганизация) Экспорт
	
	ЭтотОбъект[ИмяТабличнойЧасти].Загрузить(ЗаполнениеДокументовЗК.РазовыеНачисленияУдержания(СписокРаботников, ЗначенияЗаполнения, ГоловнаяОрганизация));
	
КонецПроцедуры // Автозаполнение

// Выполняет расчет основных и дополнительных записей начислений
//
Процедура РассчитатьНачисления() Экспорт
	
	Отказ = Ложь;
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента).Выбрать();
	ВыборкаПоДопНачислениям = СформироватьЗапросПоДопНачисления().Выбрать();

	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	// создадим наборы записей для выполнения движений
	НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	 	
	НаборДопНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДопНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	// Если почасовое отклонение, то записываем движения в регистр ВнутрисменноеВремяРаботниковОрганизаций
	НаборЗаписейРабочееВремя = РегистрыНакопления.ВнутрисменноеВремяРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписейРабочееВремя.Отбор.Регистратор.Значение = Ссылка;
	
	ЗаписиДоходовНДФЛ = РегистрыНакопления.НДФЛСведенияОДоходах.СоздатьНаборЗаписей();
	ЗаписиДоходовНДФЛ.Отбор.Регистратор.Значение = Ссылка;
	
	// получим реквизиты табличной части
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
			Если ВыборкаПоНачислениям.СторнируемыйДокумент <> ВыборкаПоШапкеДокумента.ПерерассчитываемыйДокумент Тогда
				ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборЗаписейРабочееВремя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыборкаПоДопНачислениям.Количество() > 0 Тогда
		мСоответствиеДоходовИВычетов = СправкиПоНДФЛ.СоответствиеДоходовИМассивовВычетов(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации));
		Пока ВыборкаПоДопНачислениям.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиДополнительныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоДопНачислениям, Отказ, Заголовок);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуДопНачислений(ВыборкаПоДопНачислениям, ВыборкаПоШапкеДокумента, НаборДопНачисления);
				Если ВыборкаПоДопНачислениям.Сторно И Не ВыборкаПоДопНачислениям.Авторасчет И ЗначениеЗаполнено(ВыборкаПоДопНачислениям.КодДоходаНДФЛ) И ЗначениеЗаполнено(ВыборкаПоДопНачислениям.КодВычета) Тогда
					
					Движение = ЗаписиДоходовНДФЛ.Добавить();
					
					ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоДопНачислениям); // Физлицо, СуммаВычета, КодВычета, ПодразделениеОрганизации, ВидРасчета
					ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента); // ОбособленноеПодразделение
					
					Движение.Период				= ПериодРегистрации;
					Движение.КодДохода			= ВыборкаПоДопНачислениям.КодДоходаНДФЛ;
					Движение.СуммаДохода		= ВыборкаПоДопНачислениям.Результат;
					
					// измерения 
					Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
					Движение.ПериодРегистрации	= НачалоМесяца(ПериодРегистрации);
					
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат;
	КонецЕсли;

	НаборЗаписейРабочееВремя.Записать();
	ЗаписиДоходовНДФЛ.Записать();

	// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
	// в текущий набор для того, чтобы в результате сохранения получился максимальный 
	// фактический период действия
	ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
	ТаблицаСторноЗаписей.Колонки.Удалить("СторнируемыйДокумент");
	ТаблицаСторноЗаписей.Колонки.Регистратор.Имя = "СторнируемыйДокумент";
	Для каждого СтрокаСторно Из ТаблицаСторноЗаписей Цикл
		// Заполним записи в наборе записей регистра
		// и в табличной части
		ДобавитьСтрокуСторно(НаборОсновныеНачисления, ОсновныеНачисления, СтрокаСторно);
	КонецЦикла;
	
	// перед тем как начать расчет, сформированные движения надо записать - 
	// по ним чуть позже будем получать дополнительные данные для расчетов

	// рассчитываем записи
	// при этом передаем не только набор записей регистра расчета, но и набор записей регисра 
	// накопления со сведениями об отработанном времени
	ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, Неопределено, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, НеОпределено);
	// запишем результат расчета для расчета доп. начислений
	НаборОсновныеНачисления.Записать(Истина, Истина);
	
	ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДопНачисления, Неопределено, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ДополнительныеНачисления);
	// запишем результат расчета для повторного расчета осн. начислений
	НаборДопНачисления.Записать(Истина, Истина);

	// повторный расчет на случай зависимости основных начислений от дополнительных
	ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, Неопределено, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ОсновныеНачисления);
	
	ПроведениеРасчетов.СкорректироватьНормируемыеВычетыПоНДФЛ(ЭтотОбъект);	
	
	ЗаписиДоходовНДФЛ.Очистить();
	ЗаписиДоходовНДФЛ.Записать();
	РассчитатьНДФЛ(Ложь, Ложь, ВыборкаПоШапкеДокумента);
		
	// Удаляем движения
	НаборОсновныеНачисления.Очистить();
	НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
	
	НаборДопНачисления.Очистить();
	НаборДопНачисления.Записать(Истина, Ложь, Истина, Ложь);
	
	НаборЗаписейРабочееВремя.Очистить();
	НаборЗаписейРабочееВремя.Записать();

	ЗафиксироватьТранзакцию();

КонецПроцедуры // РассчитатьНачисления()

// Процедура рассчитывает НДФЛ
// и заполняет реквизиты табличной части
//
Процедура РассчитатьНДФЛ(КомментироватьРасчет = Ложь, ПроводитьПроверки = Истина, ВыборкаПоШапкеДокумента = Неопределено) Экспорт
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		// Получим реквизиты шапки из запроса
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	Если ПроводитьПроверки Тогда
		
		Отказ = Ложь;
		
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, "");
		КонецЦикла;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДоходыИзДокумента = РегистрыНакопления.НДФЛСведенияОДоходах.СоздатьНаборЗаписей().ВыгрузитьКолонки();
    СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, ДоходыИзДокумента);
	Если ДоходыИзДокумента.Количество() = 0 Тогда
		Возврат	
	КонецЕсли;
	
	Таблица = ДоходыИзДокумента.Скопировать(,"Физлицо");
	Таблица.Свернуть("Физлицо");
	МассивФизлиц = Таблица.ВыгрузитьКолонку("Физлицо");
	Таблица = ДоходыИзДокумента.Скопировать(,"Период");
	Таблица.Свернуть("Период");
	МесяцыПолученияДохода = Таблица.ВыгрузитьКолонку("Период");
	Для Сч = 1 По МесяцыПолученияДохода.Количество() Цикл
		МесяцыПолученияДохода[Сч - 1] = НачалоМесяца(МесяцыПолученияДохода[Сч - 1])
	КонецЦикла;
	
	СтруктураДанныхДляПромежуточногоРасчета = ПроведениеРасчетов.ДанныеДляПромежуточногоРасчетаНДФЛ(МассивФизлиц, ВыборкаПоШапкеДокумента);
	
	// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ
	СписокФизлицТекст = 
	"ВЫБРАТЬ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизацийФизическиеЛица.ФизическоеЛицо КАК Физлицо
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ФизическиеЛица КАК РегистрацияРазовыхНачисленийРаботниковОрганизацийФизическиеЛица
	|ГДЕ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизацийФизическиеЛица.Ссылка = &Ссылка
	//Blik 101017 71663 н
	|	И НЕ РегистрацияРазовыхНачисленийРаботниковОрганизацийФизическиеЛица.ФизическоеЛицо.ПРГ_НеНачислятьНДФЛ";
	//Blik 101017 71663 к
	ДополнительныеПараметрыЗапросаНДФЛ = Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка);
	
	МассивТаблиц = НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьМассивТабличныхЧастей(ЭтотОбъект, "НДФЛ");
	Для каждого ТабличнаяЧасть Из МассивТаблиц Цикл
		ТабличнаяЧасть.Очистить();
	КонецЦикла;
	
	// получение результата НДФЛ по ставке 13 процентов
	ДанныеНДФЛ = ПроведениеРасчетов.ПолучитьДанныеНДФЛПоРегистратору(Неопределено, Неопределено, ПериодРегистрации, Организация, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, Ссылка, СписокФизлицТекст, ДополнительныеПараметрыЗапросаНДФЛ, Ложь, КомментироватьРасчет, Ложь, ДоходыИзДокумента, СтруктураДанныхДляПромежуточногоРасчета.Налоги, СтруктураДанныхДляПромежуточногоРасчета.Вычеты, Истина);
	Если ДанныеНДФЛ <> Неопределено Тогда
		
		Для каждого Физлицо Из МассивФизлиц Цикл
			СтрокаИсключение = ДатыВыплаты.Найти(Физлицо,"ФизЛицо");
			ПроведениеРасчетов.ВписатьПромежуточныйНДФЛвДокумент(НДФЛ, ДанныеНДФЛ.Скопировать(ДанныеНДФЛ.НайтиСтроки(Новый Структура("Физлицо",Физлицо))), ?(СтрокаИсключение = Неопределено, ВыборкаПоШапкеДокумента.ДатаВыплатыДохода, СтрокаИсключение.ДатаВыплатыДохода), МесяцыПолученияДохода);
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры  // РассчитатьНДФЛ

// Выполняет расчет вычетов по НДФЛ согласно ст. 217 и 221 НК РФ
//
Процедура РассчитатьВычеты() Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Отказ = Ложь;
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	РезультатЗапроса = СформироватьЗапросПоДопНачисления();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоДопНачислениям = РезультатЗапроса.Выбрать();
	мСоответствиеДоходовИВычетов = СправкиПоНДФЛ.СоответствиеДоходовИМассивовВычетов(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации));
	Пока ВыборкаПоДопНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиДополнительныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоДопНачислениям, Отказ);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамОрганизация",					ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамРегистратор",					Ссылка);
	Запрос.УстановитьПараметр("парамПериодРегистрации",				КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода",	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачалоГода",					НачалоГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонецГода",						КонецГода(ПериодРегистрации));
	
	// прочитаем т.ч. документа и добавим в каждую строку Физлицо сотрудника и КодДоходаНДФЛ начисления
	// рассчитаем нормативный вычет по авторским вознаграждениям по ст. 221 НК РФ
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Работники.НомерСтроки,
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.Физлицо КАК Физлицо,
	|	Работники.ВидРасчета,
	|	Работники.ВидРасчета.КодДоходаНДФЛ КАК КодДохода,
	|	Работники.ДатаНачала,
	|	Работники.ДатаОкончания,
	|	Работники.Показатель1,
	|	Работники.Показатель2,
	|	Работники.Показатель3,
	|	Работники.Показатель4,
	|	Работники.Показатель5,
	|	Работники.Показатель6,
	|	Работники.Результат,
	|	Работники.ПодразделениеОрганизации,
	|	Работники.Сторно,
	|	Работники.КодВычета,
	|	Работники.СуммаВычета,
	|	Работники.Авторасчет,
	|	Работники.ОплаченоДнейЧасов,
	|	Работники.СторнируемыйДокумент,
	|	Работники.КоличествоДетей,
	|	Работники.ДокументОснование
	|ПОМЕСТИТЬ ВТРаботники
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Работники
	|ГДЕ
	|	Работники.Ссылка = &парамРегистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	КодДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РегистрацияРазовыхНачисленийРаботниковОрганизацийДатыВыплаты.ДатаВыплатыДохода) КАК ДатаВыплатыДохода
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДатыВыплаты КАК РегистрацияРазовыхНачисленийРаботниковОрганизацийДатыВыплаты
	|ГДЕ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДатыВыплаты.Ссылка = &парамРегистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияРаботников.Сотрудник,
	|	НачисленияРаботников.Физлицо,
	|	НачисленияРаботников.Авторасчет,
	|	НачисленияРаботников.ВидРасчета,
	|	НачисленияРаботников.ДатаНачала,
	|	НачисленияРаботников.ДатаОкончания,
	|	НачисленияРаботников.Показатель1,
	|	НачисленияРаботников.Показатель2,
	|	НачисленияРаботников.Показатель3,
	|	НачисленияРаботников.Показатель4,
	|	НачисленияРаботников.Показатель5,
	|	НачисленияРаботников.Показатель6,
	|	НачисленияРаботников.Результат,
	|	НачисленияРаботников.ОплаченоДнейЧасов,
	|	НачисленияРаботников.ПодразделениеОрганизации,
	|	НачисленияРаботников.Сторно,
	|	НачисленияРаботников.СторнируемыйДокумент,
	|	НачисленияРаботников.КодВычета,
	|	НачисленияРаботников.КоличествоДетей,
	|	ВЫБОР
	|		КОГДА НачисленияРаботников.Авторасчет
	|				И НачисленияРаботников.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код405)
	|				И НеРезиденты.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА НачисленияРаботников.Результат * СведенияОСкидках.НормативЗатрат / 100
	|		КОГДА НачисленияРаботников.Авторасчет
	|				И НачисленияРаботников.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.МатпомощьПриРожденииРебенка)
	|			ТОГДА ВЫБОР
	|					КОГДА НачисленияРаботников.КоличествоДетей * СведенияОСкидках.НормативЗатрат < НачисленияРаботников.Результат * ВЫБОР
	|							КОГДА НачисленияРаботников.Сторно
	|								ТОГДА -1
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|						ТОГДА НачисленияРаботников.КоличествоДетей * СведенияОСкидках.НормативЗатрат
	|					ИНАЧЕ НачисленияРаботников.Результат * ВЫБОР
	|							КОГДА НачисленияРаботников.Сторно
	|								ТОГДА -1
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ * ВЫБОР
	|					КОГДА НачисленияРаботников.Сторно
	|						ТОГДА -1
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ НачисленияРаботников.СуммаВычета
	|	КОНЕЦ КАК СуммаВычета,
	|	НачисленияРаботников.ДокументОснование
	|ИЗ
	|	ВТРаботники КАК НачисленияРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛВычетыПоДоходам.СрезПоследних(&парамНачалоГода, ) КАК СведенияОСкидках
	|		ПО НачисленияРаботников.КодДохода = СведенияОСкидках.КодДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Статусы.ФизЛицо КАК ФизЛицо
	|		ИЗ
	|			РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СрезПоследних(
	|					&парамКонецГода,
	|					Физлицо В
	|						(ВЫБРАТЬ
	|							Работники.Физлицо
	|						ИЗ
	|							ВТРаботники КАК Работники)) КАК Статусы
	|		ГДЕ
	|			Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)) КАК НеРезиденты
	|		ПО НачисленияРаботников.Физлицо = НеРезиденты.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачисленияРаботников.НомерСтроки";
	
	Результаты = Запрос.ВыполнитьПакет();
	ДополнительныеНачисления.Загрузить(Результаты[2].Выгрузить());
	
	Выборка = Результаты[1].Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ДатаВыплатыДохода) Тогда
		ДатаПолученияДохода = Макс(Выборка.ДатаВыплатыДохода, ДатаВыплатыДохода)
	Иначе
		ДатаПолученияДохода = ДатаВыплатыДохода
	КонецЕсли;
	Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода",	КонецМесяца(Макс(ПериодРегистрации, ДатаПолученияДохода)));
	
	ДоходыП28Ст217 = Новый Массив;
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2761);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2720);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2730);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2740);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2760);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2770);
	ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2790);
	Запрос.УстановитьПараметр("ДоходыП28Ст217", ДоходыП28Ст217);
	
	// получим "еще неизрасходованные" размеры вычета, предусмотренного общей суммой на налоговый период
	// п. 28 ст. 217 НК РФ
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОборотыСУчетомДокумента.ФизЛицо,
	|	ОборотыСУчетомДокумента.КодДохода,
	|	СУММА(ОборотыСУчетомДокумента.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	|	СУММА(ОборотыСУчетомДокумента.СуммаВычетаОборот) КАК СуммаВычетаОборот
	|ПОМЕСТИТЬ ВТНДФЛОбороты
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДФЛОбороты.ФизЛицо КАК ФизЛицо,
	|		НДФЛОбороты.СуммаДоходаОборот КАК СуммаДоходаОборот,
	|		НДФЛОбороты.СуммаВычетаОборот КАК СуммаВычетаОборот,
	|		НДФЛОбороты.КодДохода КАК КодДохода
	|	ИЗ
	|		РегистрНакопления.НДФЛСведенияОДоходах.Обороты(
	|				&парамНачалоГода,
	|				&парамКонецМесяцаНалоговогоПериода,
	|				,
	|				ПериодРегистрации <= &парамПериодРегистрации
	|					И Организация = &парамОрганизация
	|					И КодДохода В (&ДоходыП28Ст217)
	|					И Физлицо В
	|						(ВЫБРАТЬ
	|							Работники.Физлицо
	|						ИЗ
	|							ВТРаботники КАК Работники
	|						ГДЕ
	|							Работники.КодДохода В (&ДоходыП28Ст217))) КАК НДФЛОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Физлицо,
	|		ДанныеДокумента.Результат,
	|		ДанныеДокумента.СуммаВычета,
	|		ДанныеДокумента.КодДохода
	|	ИЗ
	|		ВТРаботники КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Сторно
	|		И (НЕ ДанныеДокумента.Авторасчет)) КАК ОборотыСУчетомДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыСУчетомДокумента.ФизЛицо,
	|	ОборотыСУчетомДокумента.КодДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияРаботников.Физлицо КАК Физлицо,
	|	НачисленияРаботников.КодВычета КАК КодВычета,
	|	ВЫБОР
	|		КОГДА СведенияОСкидках.ГодовойВычет ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА СведенияОСкидках.ГодовойВычет > ЕСТЬNULL(НДФЛОбороты.СуммаВычетаОборот, 0)
	|			ТОГДА СведенияОСкидках.ГодовойВычет - ЕСТЬNULL(НДФЛОбороты.СуммаВычетаОборот, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВычета
	|ИЗ
	|	ВТРаботники КАК НачисленияРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛОбороты КАК НДФЛОбороты
	|		ПО НачисленияРаботников.КодДохода = НДФЛОбороты.КодДохода
	|			И НачисленияРаботников.Физлицо = НДФЛОбороты.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛВычетыПоДоходам.СрезПоследних(&парамНачалоГода, ) КАК СведенияОСкидках
	|		ПО НачисленияРаботников.КодДохода = СведенияОСкидках.КодДохода
	|ГДЕ
	|	НачисленияРаботников.КодДохода В(&ДоходыП28Ст217)
	|	И НачисленияРаботников.Авторасчет
	|	И (НЕ НачисленияРаботников.Сторно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	КодВычета";
	ТаблицаВычетов = Запрос.Выполнить().Выгрузить();
	ТаблицаВычетов.Индексы.Добавить("Физлицо,КодВычета");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияРаботников.Физлицо КАК Физлицо,
	|	НачисленияРаботников.КодВычета КАК КодВычета,
	|	НачисленияРаботников.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТРаботники КАК НачисленияРаботников
	|ГДЕ
	|	НачисленияРаботников.КодДохода В(&ДоходыП28Ст217)
	|	И НачисленияРаботников.Авторасчет
	|	И (НЕ НачисленияРаботников.Сторно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	КодВычета,
	|	НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураПоиска = Новый Структура("Физлицо,КодВычета");
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = ДополнительныеНачисления.Найти(Выборка.НомерСтроки,"НомерСтроки");
		Если СтрокаТЧ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,Выборка);
			СтрокаВычета = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска)[0];
			Если СтрокаВычета.СуммаВычета = 0 Тогда
				СтрокаТЧ.СуммаВычета = 0
			ИначеЕсли СтрокаТЧ.Результат > 0 Тогда
				СтрокаТЧ.СуммаВычета = Мин(СтрокаТЧ.Результат, СтрокаВычета.СуммаВычета);
				СтрокаВычета.СуммаВычета = Макс(0, СтрокаВычета.СуммаВычета - СтрокаТЧ.СуммаВычета);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // РассчитатьВычеты()

// Выполняет перерасчет по заданному списку физлиц
// Если передан пустой список физлиц - перерасчет не проводится
// Если в качестве списка физлиц передан не массив, а Неопределено - перерасчет по всем физлицам 
// регистратора по которым требуется перерасчет
//
// Параметры
// 	Физлица - список значений - ссылки на физлиц
// Возвращаемое значение
//  Нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// получим список перерассчитываемых физлиц
	ФизлицаСписок = Новый СписокЗначений;
	Если Физлица = Неопределено Тогда
		// таблица ФизлицаДляПерерасчета
		// Список физлиц по которым необходимо выполнить перерасчет
		// Поля:
		//		ФизЛицо
		// Описание:
		// Получает список неповторяющихся физлиц по которым есть записи
		// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
		//
		ФизлицаДляПерерасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Перерасчет.ФизЛицо
		|ИЗ
		|	(ВЫБРАТЬ
		|		Перерасчет.ФизЛицо
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|	
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Перерасчет.ФизЛицо
		|	ИЗ
		|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
		|	
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет";
		
		Запрос = Новый Запрос(ФизлицаДляПерерасчетаТекст);
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		ФизлицаСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
		
	Иначе
		ФизлицаСписок = Физлица;
		
	КонецЕсли;

	// если не перерассчитываем никого - возврат
	Если ФизлицаСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;

	// читаем все данные в одной транзакции
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	// прочитать движения
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.ДополнительныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.НДФЛСведенияОДоходах.Прочитать();
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Прочитать();
	ЗафиксироватьТранзакцию();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	////////////////////////////////////////////////////////////////////////
	// Основные, дополнительные начисления и сведения о доходах НДФЛ
	
	// сначала удалим сведения о доходах НДФЛ по перерассчитываемым физлицам
	НДФЛСведенияОДоходах = Движения.НДФЛСведенияОДоходах;
	ПоследнееДвижение = НДФЛСведенияОДоходах.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(НДФЛСведенияОДоходах[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			НДФЛСведенияОДоходах.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	// перерассчитываем записи начислений
	// при этом передаем не только набор записей регистра расчета, но и набор записей регистра 
	// накопления со сведениями об отработанном времени
	// а также таблицу значений в которую будет заполнять движения для НДФЛСведенияОДоходах
	ДвиженияНДФЛСведенияОДоходах = Движения.НДФЛСведенияОДоходах.Выгрузить();// фактически - создаем структуру таблицы значений
	
	ПроведениеРасчетовПереопределяемый.ПереРассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", Движения.ОсновныеНачисленияРаботниковОрганизаций, Физлица, ДвиженияНДФЛСведенияОДоходах, , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ОсновныеНачисления);
	// запишем без выполнения пересчета фактического периода действия
	Движения.ОсновныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	
	ПроведениеРасчетовПереопределяемый.ПереРассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", Движения.ДополнительныеНачисленияРаботниковОрганизаций, Физлица, ДвиженияНДФЛСведенияОДоходах,, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, ДополнительныеНачисления);
	// запишем набор
	Движения.ДополнительныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	
	// запишем движения по доходам НДФЛ
	ДвиженияНДФЛСведенияОДоходах = Движения.НДФЛСведенияОДоходах.Выгрузить();// фактически - создаем структуру таблицы значений
	СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, ДвиженияНДФЛСведенияОДоходах, ФизлицаСписок);
	ПроведениеРасчетов.СвернутьДвиженияНДФЛСведенияОДоходах(ДвиженияНДФЛСведенияОДоходах);
	Движения.НДФЛСведенияОДоходах.Загрузить(ДвиженияНДФЛСведенияОДоходах);
	Движения.НДФЛСведенияОДоходах.Записать();
	
	// записываем документ перед вызовом СформироватьВзаиморасчетыСРаботниками
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// взаиморасчеты с работниками
	
	// сначала удалим сведения о взаиморасчетах с работниками
	ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
	ПоследнееДвижение = ВзаиморасчетыСРаботникамиОрганизаций.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(ВзаиморасчетыСРаботникамиОрганизаций[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			ВзаиморасчетыСРаботникамиОрганизаций.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	// теперь сформируем начисления к выплате по начислениям документа для перерассчитываемых работников
	СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций, Истина, Физлица);
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

// Заполняет документ по перерассчитываемому документу
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	
	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
		
		Исправления = ПроведениеРасчетов.ПолучитьДокументИсправление(ПерерассчитываемыйДокумент, "КритерийОтбора"); 
		Запрос.УстановитьПараметр("Исправления", Исправления);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиИсправлений
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка В(&Исправления)
		|	И Начисления.СторнируемыйДокумент = &ПерерассчитываемыйДокумент
		|	И Начисления.Сторно
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Сотрудник
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка В(&Исправления)
		|	И Начисления.СторнируемыйДокумент = &ПерерассчитываемыйДокумент
		|	И Начисления.Сторно
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Сотрудник
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ СотрудникиОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Начисления.Сотрудник
		|				ИЗ
		|					ВТСотрудникиИсправлений КАК Начисления))
		|	И СотрудникиОрганизаций.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиОрганизаций.Сотрудник
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ СотрудникиОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Начисления.Сотрудник
		|				ИЗ
		|					ВТСотрудникиИсправлений КАК Начисления))
		|	И СотрудникиОрганизаций.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент)";
		Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо КАК Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	|	-Начисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0) КАК Результат,
	|	-Начисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0) КАК ОтработаноДней,
	|	-Начисления.ОтработаноЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасов), 0) КАК ОтработаноЧасов,
	|	-Начисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0) КАК ОтработаноДнейПоПятидневке,
	|	-Начисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0) КАК НормаДней,
	|	-Начисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0) КАК НормаЧасов,
	|	-Начисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0) КАК НормаДнейПоПятидневке,
	|	-Начисления.ОплаченоДнейЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОплаченоДнейЧасов), 0) КАК ОплаченоДнейЧасов,
	|	-Начисления.ОтработаноЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасовПоПятидневке), 0) КАК ОтработаноЧасовПоПятидневке,
	|	-Начисления.НормаЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасовПоПятидневке), 0) КАК НормаЧасовПоПятидневке,
	|	Начисления.ДатаНачалаСобытия,
	|	Начисления.ОплачиватьЧасов,
	|	ИСТИНА КАК Сторно,
	|	ЛОЖЬ КАК Авторасчет,
	|	Начисления.Ссылка КАК СторнируемыйДокумент,
	|	Начисления.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
	|		ПО Начисления.Сотрудник = СторноНачисления.Сотрудник
	|			И Начисления.ВидРасчета = СторноНачисления.ВидРасчета
	|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
	|			И (НАЧАЛОПЕРИОДА(СторноНачисления.ПериодДействияКонец, ДЕНЬ) МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
	|			И (СторноНачисления.ПериодРегистрации > Начисления.Ссылка.ПериодРегистрации)
	|			И (СторноНачисления.ПериодРегистрации < &ПериодРегистрации)
	|			И (СторноНачисления.СторнируемыйДокумент = Начисления.Ссылка)
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.ДатаНачалаСобытия,
	|	Начисления.ОплачиватьЧасов,
	|	Начисления.НомерСтроки,
	|	Начисления.Результат,
	|	Начисления.ОтработаноДней,
	|	Начисления.ОтработаноЧасов,
	|	Начисления.ОтработаноДнейПоПятидневке,
	|	Начисления.НормаДней,
	|	Начисления.НормаЧасов,
	|	Начисления.НормаДнейПоПятидневке,
	|	Начисления.ОплаченоДнейЧасов,
	|	Начисления.ОтработаноЧасовПоПятидневке,
	|	Начисления.НормаЧасовПоПятидневке,
	|	Начисления.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Начисления.ДатаНачалаСобытия,
	|	Начисления.ОплачиватьЧасов,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	NULL,
	|	Начисления.НомерСтроки
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сторно УБЫВ,
	|	НомерСтроки";
	
	ОсновныеНачисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// выполним запрос к ДополнительныеНачисления
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо КАК Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	|	-Начисления.Результат КАК Результат,
	|	-Начисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|	Начисления.КодВычета,
	|	-Начисления.СуммаВычета КАК СуммаВычета,
	|	ИСТИНА КАК Сторно,
	|	ЛОЖЬ КАК Авторасчет,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.ДокументОснование,
	|	Начисления.Ссылка КАК СторнируемыйДокумент,
	|	Начисления.КоличествоДетей
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И НЕ Начисления.Сторно
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	Начисления.ПодразделениеОрганизации,
	|	0,
	|	0,
	|	Начисления.КодВычета,
	|	0,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	Начисления.НомерСтроки,
	|	Начисления.ДокументОснование,
	|	НЕОПРЕДЕЛЕНО,
	|	Начисления.КоличествоДетей
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И НЕ Начисления.Сторно
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сторно УБЫВ,
	|	НомерСтроки";
	
	ДополнительныеНачисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Добавляет строку сторно начислений в движения и табличную часть документа
//
Процедура ДобавитьСтрокуСторно(Движения, ТабличнаяЧасть, Строка)

	// новая запись движений
	Движение = Движения.Добавить();

    ЗаполнитьЗначенияСвойств(Движение,Строка,"БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Сотрудник,Физлицо,Организация," + 
									"ГрафикРаботы,ГрафикРаботыНорма,ВидУчетаВремени,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ПодразделениеОрганизации,ОбособленноеПодразделение," + 
									"ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,СторнируемыйДокумент,ДатаНачалаСобытия");
	// Свойства
	Движение.ПериодРегистрации				= Строка.ПериодРегистрацииСторно;
	Движение.ПериодДействияНачало			= Строка.ПериодДействияНачалоСторно;
	Движение.ПериодДействияКонец			= Строка.ПериодДействияКонецСторно;
	Движение.Сторно							= Истина;
	Движение.Авторасчет						= Истина;

	// новая строка табличной части сторно начисления
	СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
    ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,Строка,"ВидРасчета,Сотрудник,Физлицо,ПодразделениеОрганизации,ДатаНачалаСобытия," + 
									"Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,СторнируемыйДокумент,Авторасчет");
	// Свойства
	
	СтрокаТабличнойЧасти.ДатаНачала						= Строка.ПериодДействияНачалоСторно;
	СтрокаТабличнойЧасти.ДатаОкончания					= Строка.ПериодДействияКонецСторно;
	СтрокаТабличнойЧасти.Сторно							= Истина;
	
КонецПроцедуры // ДобавитьСтрокуСторно()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамРегистрацияДляЧастиСмены", Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Дата,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.ПериодРегистрации,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ВЫБОР
	|		КОГДА РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация
	|		ИНАЧЕ РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация
	|		ИНАЧЕ РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Организация КАК ОбособленноеПодразделение,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Ссылка,
	|	ВЫБОР
	|		КОГДА РегистрацияРазовыхНачисленийРаботниковОрганизации.СпособРегистрацииВремени = &парамРегистрацияДляЧастиСмены
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РегистрируютсяПочасовыеОтклонения,
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.ДатаВыплатыДохода
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций КАК РегистрацияРазовыхНачисленийРаботниковОрганизации
	|ГДЕ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	СписокСтруктурныхПодразделений = ОбщегоНазначенияЗК.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
	МассивВидовВремени = Новый СписокЗначений;
	МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
	МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
	Запрос.УстановитьПараметр("ПочасовоеНачисление",МассивВидовВремени);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиДокумента.Ссылка,
	|	СтрокиДокумента.НомерСтроки,
	|	СтрокиДокумента.Сотрудник КАК Сотрудник,
	|	СтрокиДокумента.Физлицо,
	|	СтрокиДокумента.ВидРасчета,
	|	НАЧАЛОПЕРИОДА(СтрокиДокумента.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	|	СтрокиДокумента.ДатаНачала,
	|	СтрокиДокумента.ДатаОкончания,
	|	СтрокиДокумента.Показатель1,
	|	СтрокиДокумента.Показатель2,
	|	СтрокиДокумента.Показатель3,
	|	СтрокиДокумента.Показатель4,
	|	СтрокиДокумента.Показатель5,
	|	СтрокиДокумента.Показатель6,
	|	СтрокиДокумента.Результат,
	|	СтрокиДокумента.ПодразделениеОрганизации,
	|	СтрокиДокумента.ОтработаноДней,
	|	СтрокиДокумента.ОтработаноЧасов,
	|	СтрокиДокумента.ОтработаноДнейПоПятидневке,
	|	СтрокиДокумента.НормаДней,
	|	СтрокиДокумента.НормаЧасов,
	|	СтрокиДокумента.НормаДнейПоПятидневке,
	|	СтрокиДокумента.ДатаНачалаСобытия,
	|	СтрокиДокумента.Сторно,
	|	СтрокиДокумента.Авторасчет,
	|	СтрокиДокумента.ОплачиватьЧасов,
	|	СтрокиДокумента.ОплаченоДнейЧасов,
	|	СтрокиДокумента.ОтработаноЧасовПоПятидневке,
	|	СтрокиДокумента.НормаЧасовПоПятидневке,
	|	СтрокиДокумента.СторнируемыйДокумент,
	|	ВЫБОР
	|		КОГДА СтрокиДокумента.Сторно
	|				И СтрокиДокумента.СторнируемыйДокумент = СтрокиДокумента.Ссылка.ПерерассчитываемыйДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтрокаИсправления,
	|	СтрокиДокумента.РасчетнаяБазаЗаЕдиницуНормыВремени
	|ПОМЕСТИТЬ ВТСтрокиНачислений
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК СтрокиДокумента
	|ГДЕ
	|	СтрокиДокумента.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия";
	Запрос.Выполнить();
	
	// ВТГрафикиСотрудников
	//		таблица содержит номера строк документа с данными о графике указанного
	//		в этой строке сотрудника из рег-ра сведений РаботникиОрганизации
	// 
	//	Поля:
	//		НомерСтроки
	//      ГрафикРаботы
	//      ГрафикПолногоРабочегоВремени
	//      СуммированныйУчетРабочегоВремени
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследниеДаты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикПолногоРабочегоВремени,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ПоследниеДаты.ДатаНачалаСобытия
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|	КОНЕЦ КАК СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТГрафикиСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|		СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|		СтрокиНачисления.Сотрудник КАК Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия
	|	ИЗ
	|		ВТСтрокиНачислений КАК СтрокиНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ПО СтрокиНачисления.ДатаНачалаСобытия >= РаботникиОрганизации.Период
	|				И СтрокиНачисления.Сотрудник = РаботникиОрганизации.Сотрудник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтрокиНачисления.НомерСтроки,
	|		СтрокиНачисления.Сотрудник,
	|		СтрокиНачисления.ДатаНачалаСобытия) КАК ПоследниеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ПоследниеДаты.МаксПериод = РаботникиОрганизации.Период
	|			И ПоследниеДаты.Сотрудник = РаботникиОрганизации.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	// ВТДанныеИндивидуальныхГрафиковИТабелей
	//		таблица содержит номера строк документа с сотрудниками, для которых введены 
	//		подробные документы использования времени: инд.графики и табели
	// 
	//	Поля:
	//		НомерСтроки
	//      План
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	ГрафикиРаботыПоВидамВремени.План КАК План
	|ПОМЕСТИТЬ ВТДанныеИндивидуальныхГрафиковИТабелей
	|ИЗ
	|	ВТСтрокиНачислений КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СтрокиНачисления.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И СтрокиНачисления.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	План";
	Запрос.Выполнить();
	
	// СводныеИндивидуальныеГрафикиРаботы
	//		таблица содержит номера строк документа с сотрудниками, для которых введены сводные 
	//		данные об их графике
	// 
	//	Поля:
	//		НомерСтроки
	// 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокРаботников.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТСводныеИндивидуальныеГрафикиРаботы
	|ИЗ
	|	ВТСтрокиНачислений КАК СписокРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|		ПО СписокРаботников.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|			И СписокРаботников.ПериодДействия = СводныеИндивидуальныеГрафики.Месяц
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник,
	|	ТЧНачисления.Сотрудник.Наименование,
	|	ТЧНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(ТЧНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА ТЧНачисления.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА ТЧНачисления.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ТЧНачисления.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ТЧНачисления.ВидРасчета.ВидВремени КАК ВидВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	ТЧНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.НеОбрабатывать)
	|		КОГДА ТЧНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком)
	|		КОГДА ТЧНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком)
	|		КОГДА ТЧНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком)
	|		КОГДА ТЧНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводстве)
	|		КОГДА ТЧНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводстве)
	|		КОГДА ТЧНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводстве)
	|		КОГДА ТЧНачисления.ВидРасчета.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболевание)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка)
	|	КОНЕЦ КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
	|	ТЧНачисления.Показатель1,
	|	ТЧНачисления.Показатель2,
	|	ТЧНачисления.Показатель3,
	|	ТЧНачисления.Показатель4,
	|	ТЧНачисления.Показатель5,
	|	ТЧНачисления.Показатель6,
	|	ТЧНачисления.Результат,
	|	ТЧНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
	|		ИНАЧЕ ТЧНачисления.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
			// если введен табель, но нет индивидуального графика, то норму времени надо считать по данным ""общего графика""
	|		КОГДА ТабелиУчетаВремениПоСотруднику.НомерСтроки ЕСТЬ НЕ NULL
	|				И ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL
	|				И СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикРаботы
			// если у работника сокращенное рабочее время, а норма времени определяется по полному графику
			// и введен индивидуальный график, то норму времени надо считать по-прежнему по данным ""общего графика""
	|		КОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|				И (ИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL
	|					ИЛИ СводныеИндивидуальныеГрафикиРаботы.НомерСтроки ЕСТЬ НЕ NULL )
	|			ТОГДА ДанныеПоРаботникуНаДатуНачисления.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	ЕСТЬNULL(ДанныеПоРаботникуНаДатуНачисления.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ТЧНачисления.НормаДней,
	|	ТЧНачисления.НормаЧасов,
	|	ТЧНачисления.НормаДнейПоПятидневке,
	|	ТЧНачисления.ОплаченоДнейЧасов,
	|	ТЧНачисления.ОтработаноДней,
	|	ТЧНачисления.ОтработаноЧасов,
	|	ТЧНачисления.ОтработаноДнейПоПятидневке,
	|	ТЧНачисления.ОтработаноЧасовПоПятидневке,
	|	ТЧНачисления.НормаЧасовПоПятидневке,
	|	ТЧНачисления.Сторно,
	|	ТЧНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ТЧНачисления.ОплачиватьЧасов КАК ОплачиватьЧасов,
	|	ТЧНачисления.СтрокаИсправления,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА (НЕ ТЧНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ТЧНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ВидВремени В (&ПочасовоеНачисление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПочасовымОтклонением,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.Сторно
	|			ТОГДА ТЧНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент, 
	|	ТЧНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени
	|ИЗ
	|	ВТСтрокиНачислений КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудников КАК ДанныеПоРаботникуНаДатуНачисления
	|		ПО ТЧНачисления.НомерСтроки = ДанныеПоРаботникуНаДатуНачисления.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления) КАК ГрафикРаботыПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления
	|		ГДЕ
	|			(НЕ ТЧНачисления.План)) КАК ТабелиУчетаВремениПоСотруднику
	|		ПО ТЧНачисления.НомерСтроки = ТабелиУчетаВремениПоСотруднику.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТЧНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ВТДанныеИндивидуальныхГрафиковИТабелей КАК ТЧНачисления
	|		ГДЕ
	|			ТЧНачисления.План) КАК ИндивидуальныеГрафикиРаботы
	|		ПО ТЧНачисления.НомерСтроки = ИндивидуальныеГрафикиРаботы.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеИндивидуальныеГрафикиРаботы КАК СводныеИндивидуальныеГрафикиРаботы
	|		ПО ТЧНачисления.НомерСтроки = СводныеИндивидуальныеГрафикиРаботы.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Формирует запрос по таблице "ДополнительныеНачисления" документа
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоДопНачисления()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",				Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("НачалоПериодаРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации",	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаРегистрации",			?(Дата > КонецМесяца(ПериодРегистрации),КонецМесяца(ПериодРегистрации),?(Дата < ПериодРегистрации,ПериодРегистрации,Дата)));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	СтрокиНачисления.КодВычета,
	|	СтрокиНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.Сторно,
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокиНачисления.ДатаНачала КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокиНачисления.ВидРасчета.ЧислоМесяцев КАК ЧислоМесяцев,
	|	СтрокиНачисления.Авторасчет,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.МатпомощьПриРожденииРебенка)
	|			ТОГДА СтрокиНачисления.СуммаВычета
	|		КОГДА СтрокиНачисления.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код404)
	|			ТОГДА СтрокиНачисления.СуммаВычета
	|		КОГДА СтрокиНачисления.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код405)
	|			ТОГДА СтрокиНачисления.СуммаВычета
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СкидкаПриНалогообложении,
	|	СтрокиНачисления.СуммаВычета,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоРегистрации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ВЫБОР
	|					КОГДА ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.Период, ДЕНЬ, -1) < &НачалоПериодаРегистрации
	|						ТОГДА &ДатаРегистрации
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.Период, ДЕНЬ, -1)
	|				КОНЕЦ
	|		КОГДА ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <= &ДатаРегистрации
	|				И ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И ДанныеПоРаботникуДоРегистрации.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ВЫБОР
	|					КОГДА ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.ПериодЗавершения, ДЕНЬ, -1) < &НачалоПериодаРегистрации
	|						ТОГДА &ДатаРегистрации
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.ПериодЗавершения, ДЕНЬ, -1)
	|				КОНЕЦ
	|		КОГДА ДанныеПоРаботникуПослеРегистрации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеПоРаботникуПослеРегистрации.Период > &КонецПериодаРегистрации
	|						ТОГДА &ДатаРегистрации
	|					ИНАЧЕ ДанныеПоРаботникуПослеРегистрации.Период
	|				КОНЕЦ
	|		ИНАЧЕ &ДатаРегистрации
	|	КОНЕЦ КАК ДатаРегистрации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	СтрокиНачисления.ДокументОснование
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаРегистрации,
	|				Сотрудник В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Начисления.Сотрудник
	|					ИЗ
	|						Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Начисления
	|					ГДЕ
	|						Начисления.Ссылка = &ДокументСсылка)) КАК ДанныеПоРаботникуДоРегистрации
	|		ПО СтрокиНачисления.Сотрудник = ДанныеПоРаботникуДоРегистрации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПервых(
	|				&ДатаРегистрации,
	|				Сотрудник В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Начисления.Сотрудник
	|					ИЗ
	|						Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Начисления
	|					ГДЕ
	|						Начисления.Ссылка = &ДокументСсылка)) КАК ДанныеПоРаботникуПослеРегистрации
	|		ПО СтрокиНачисления.Сотрудник = ДанныеПоРаботникуПослеРегистрации.Сотрудник
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация, по которой выполняются начисления!"), Отказ, Заголовок);
	КонецЕсли;
	
	//  ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан месяц, в котором выполняются начисления!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаВыплатыДохода
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаВыплатыДохода) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата выплаты начисленного дохода!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан Сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
		
	ИначеЕсли Не ВыборкаПоСтрокамДокумента.СтрокаИсправления Тогда
		Если ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения <> ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный вид расчета не соответствует способу регистрации времени в документе!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;

	// Дата начала
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
		
	ИначеЕсли Не ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением Тогда
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
			
		Иначе
			Если ВыборкаПоСтрокамДокумента.ПериодДействияКонец < ВыборкаПоСтрокамДокумента.ПериодДействияНачало Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
				
			Иначе
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияКонец) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	// Дата начала события
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения И ВыборкаПоСтрокамДокумента.ЯвляетсяПочасовымОтклонением Тогда
		
		// ВидИспользованияРабочегоВремени
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидИспользованияРабочегоВремени) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан учет времени для вида расчета!", Отказ, Заголовок);
		КонецЕсли;
		
		// ОплачиватьЧасов
		Если ВыборкаПоСтрокамДокумента.ОплачиватьЧасов <= 0 Или ВыборкаПоСтрокамДокумента.ОплачиватьЧасов > 24 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "количество оплачиваемых часов должно быть положительным и не превышать 24!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПериодДействияНачало) Тогда
		// Подразделение
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("не указано подразделение организации!"), Отказ, Заголовок);
			
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указано подразделение, принадлежащее другой организации!"), Отказ, Заголовок);
			
		КонецЕсли;
		
		// График работы
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "по состоянию на " + Формат(ВыборкаПоСтрокамДокумента.ПериодДействияНачало,"ДЛФ=DD") + " не задан рабочий график сотрудника, либо он еще не принят на работу!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса(" указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ДополнительныеНачисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиДополнительныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Доп. начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не задан сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом
		Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
		Или ВыборкаПоСтрокамДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом Тогда
		
		// Дата начала
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода начисления!", Отказ, Заголовок);
		КонецЕсли;
		
		// Дата окончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода начисления!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка на сумму вычета
	Если ВыборкаПоСтрокамДокумента.СуммаВычета <> 0 И Не ПроведениеРасчетов.ВычетСоответствуетДоходу(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ, ВыборкаПоСтрокамДокумента.КодВычета, мСоответствиеДоходовИВычетов) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный код вычета не предусмотрен для кода дохода (" + ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ), СокрЛП(ВыборкаПоСтрокамДокумента.КодДоходаНДФЛ), "не указан") + "), с которым будет зарегистрировано в учете по НДФЛ начисление """ + ?(ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета), ВыборкаПоСтрокамДокумента.ВидРасчета, "<не указано>") + """!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса(" указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуОсновныхНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.ПериодРегистрации				= ПериодРегистрации;
	Движение.ПериодДействияНачало			= ВыборкаПоСтрокамДокумента.ПериодДействияНачало;
	Движение.ПериодДействияКонец			= ВыборкаПоСтрокамДокумента.ПериодДействияКонец;
	Движение.БазовыйПериодНачало			= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец				= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета						= ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно							= ВыборкаПоСтрокамДокумента.Сторно;

	// Измерения
	Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ФизЛицо						= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация					= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат						= ВыборкаПоСтрокамДокумента.Результат;
	// ресурсы по отработанному времени
	Если ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени Тогда
		Движение.ОтработаноДней				= ВыборкаПоСтрокамДокумента.ОтработаноДней;
		Движение.ОтработаноЧасов			= ВыборкаПоСтрокамДокумента.ОтработаноЧасов;
		Движение.ОтработаноДнейПоПятидневке	= ВыборкаПоСтрокамДокумента.ОтработаноДнейПоПятидневке;
		Движение.ОтработаноЧасовПоПятидневке= ВыборкаПоСтрокамДокумента.ОтработаноЧасовПоПятидневке;
	КонецЕсли;
	// ресурсы по норме времени
	Если ВыборкаПоСтрокамДокумента.ЗачетНормыВремени Тогда
		Движение.НормаДней					= ВыборкаПоСтрокамДокумента.НормаДней;
		Движение.НормаЧасов					= ВыборкаПоСтрокамДокумента.НормаЧасов;
		Движение.НормаДнейПоПятидневке		= ВыборкаПоСтрокамДокумента.НормаДнейПоПятидневке;
		Движение.НормаЧасовПоПятидневке		= ВыборкаПоСтрокамДокумента.НормаЧасовПоПятидневке;
	КонецЕсли;
	Движение.ОплаченоДнейЧасов				= ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов;

	// Реквизиты
	Движение.ГрафикРаботы					= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
	Движение.ГрафикРаботыНорма				= ВыборкаПоСтрокамДокумента.ГрафикРаботыНорма;
	Движение.Показатель1					= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2					= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3					= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4					= ВыборкаПоСтрокамДокумента.Показатель4;	
	Движение.Показатель5					= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6					= ВыборкаПоСтрокамДокумента.Показатель6;	
	Движение.ВидУчетаВремени				= ПроведениеРасчетов.ПолучитьВидУчетаВремени(ВыборкаПоСтрокамДокумента.СпособРасчета, ВыборкаПоСтрокамДокумента.ВидВремени, ВыборкаПоСтрокамДокумента.СуммированныйУчетРабочегоВремени);
	Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ОбособленноеПодразделение		= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.ДатаНачалаСобытия				= ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия;
	Движение.ВариантОбработкиЗаписиПриОтраженииВРеглУчете = ВыборкаПоСтрокамДокумента.ВариантОбработкиЗаписиПриОтраженииВРеглУчете;
	Движение.СторнируемыйДокумент			= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
	Движение.Авторасчет						= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.РасчетнаяБазаЗаЕдиницуНормыВремени	= ВыборкаПоСтрокамДокумента.РасчетнаяБазаЗаЕдиницуНормыВремени;
	
КонецПроцедуры // ДобавитьСтрокуОсновныхНачислений()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры:
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка
//								  из результата запроса к ТЧ документа,
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуДопНачислений(ВыборкаПоСтрокамДокумента, ВыборкаПоШапкеДокумента, НаборЗаписей)
	
	Движение = НаборЗаписей.Добавить();

	// Свойства
	Движение.ПериодРегистрации			= ВыборкаПоСтрокамДокумента.ДатаРегистрации;
	Движение.БазовыйПериодНачало		= ВыборкаПоСтрокамДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец			= ВыборкаПоСтрокамДокумента.БазовыйПериодКонец;
	Движение.ВидРасчета					= ВыборкаПоСтрокамДокумента.ВидРасчета;
	Движение.Сторно						= ВыборкаПоСтрокамДокумента.Сторно;

	// Измерения
	Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.ФизЛицо					= ВыборкаПоСтрокамДокумента.ФизЛицо;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	Движение.ОплаченоДнейЧасов			= ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов;

	// Реквизиты
	Движение.Показатель1				= ВыборкаПоСтрокамДокумента.Показатель1;
	Движение.Показатель2				= ВыборкаПоСтрокамДокумента.Показатель2;
	Движение.Показатель3				= ВыборкаПоСтрокамДокумента.Показатель3;
	Движение.Показатель4				= ВыборкаПоСтрокамДокумента.Показатель4;
	Движение.Показатель5				= ВыборкаПоСтрокамДокумента.Показатель5;
	Движение.Показатель6				= ВыборкаПоСтрокамДокумента.Показатель6;
	Движение.ЧислоМесяцев				= ВыборкаПоСтрокамДокумента.ЧислоМесяцев;
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ДокументОснование			= ВыборкаПоСтрокамДокумента.ДокументОснование;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.СторнируемыйДокумент		= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;
	Движение.СкидкаПриНалогообложении	= ВыборкаПоСтрокамДокумента.СкидкаПриНалогообложении;
	Движение.Авторасчет					= ВыборкаПоСтрокамДокумента.Авторасчет;
	
КонецПроцедуры // ДобавитьСтрокуДопНачислений

// По выборке из результатов запроса по документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоШапкеДокумента				- спозиционированная на определеной строке выборка 
//										  из результата запроса к документу 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборЗаписей)
	
	Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период = ВыборкаПоНачислениям.ПериодДействияНачало;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоНачислениям.Сотрудник;
		Движение.Организация						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоНачислениям.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		Движение.Часов								= ВыборкаПоНачислениям.ОплачиватьЧасов;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()

// получает доходы НДФЛ по табличным частям с доходами
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		
Процедура СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, НаборЗаписей, ФизлицаСписок = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДатыВыплаты", ДатыВыплаты);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ОсновныеНачисления", ОсновныеНачисления);
	Запрос.УстановитьПараметр("ДополнительныеНачисления", ДополнительныеНачисления);
	Запрос.УстановитьПараметр("ДатаВыплатыДохода", ДатаВыплатыДохода);
	Запрос.УстановитьПараметр("Физлица", ФизлицаСписок);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Основные.НомерСтроки,
	|	Основные.Сотрудник,
	|	Основные.Физлицо,
	|	Основные.ДатаНачала,
	|	Основные.ДатаОкончания,
	|	Основные.Результат,
	|	Основные.Сторно,
	|	Основные.СторнируемыйДокумент,
	|	Основные.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Основные.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&ОсновныеНачисления КАК Основные
	|ГДЕ
	|	&УсловиеНаФизлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыВыплаты.Физлицо,
	|	ДатыВыплаты.ДатаВыплатыДохода
	|ПОМЕСТИТЬ ВТДатыВыплаты
	|ИЗ
	|	&ДатыВыплаты КАК ДатыВыплаты
	|ГДЕ
	|	&УсловиеНаФизлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Дополнительные.НомерСтроки,
	|	Дополнительные.Сотрудник,
	|	Дополнительные.Физлицо,
	|	Дополнительные.Результат,
	|	Дополнительные.ДатаНачала,
	|	Дополнительные.ДатаОкончания,
	|	Дополнительные.КодВычета,
	|	Дополнительные.СуммаВычета,
	|	Дополнительные.Сторно,
	|	Дополнительные.ПодразделениеОрганизации,
	|	Дополнительные.ВидРасчета,
	|	Дополнительные.СторнируемыйДокумент,
	|	Дополнительные.КоличествоДетей
	|ПОМЕСТИТЬ ВТДополнительныеНачисления
	|ИЗ
	|	&ДополнительныеНачисления КАК Дополнительные
	|ГДЕ
	|	&УсловиеНаФизлицо";
	Если Не ЗначениеЗаполнено(ФизлицаСписок) Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"&УсловиеНаФизлицо","Истина");	
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"&УсловиеНаФизлицо","Физлицо В (&Физлица)");	
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""Таблица1"" КАК ИмяТЧ,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ВидРасчета,
	|	Начисления.ВидРасчета.КодДоходаНДФЛ КАК КодДохода,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.Результат КАК СуммаДохода,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.СторнируемыйДокумент,
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	ЕСТЬNULL(ДатыВыплаты.ДатаВыплатыДохода, &ДатаВыплатыДохода) КАК ДатаВыплатыДохода,
	|	ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка) КАК КодВычета,
	|	0 КАК СуммаВычета,
	|	0 КАК КоличествоДетей,
	|	Начисления.Сторно
	|ПОМЕСТИТЬ ВТСторноНачисления
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыВыплаты КАК ДатыВыплаты
	|		ПО Начисления.Физлицо = ДатыВыплаты.Физлицо
	|ГДЕ
	|	Начисления.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Таблица2"",
	|	ДополнительныеНачисления.НомерСтроки,
	|	ДополнительныеНачисления.Сотрудник,
	|	ДополнительныеНачисления.Физлицо,
	|	ДополнительныеНачисления.ВидРасчета,
	|	ДополнительныеНачисления.ВидРасчета.КодДоходаНДФЛ,
	|	ДополнительныеНачисления.ДатаНачала,
	|	ДополнительныеНачисления.ДатаОкончания,
	|	ДополнительныеНачисления.Результат,
	|	ДополнительныеНачисления.ПодразделениеОрганизации,
	|	ДополнительныеНачисления.СторнируемыйДокумент,
	|	&ПериодРегистрации,
	|	ЕСТЬNULL(ДатыВыплаты.ДатаВыплатыДохода, &ДатаВыплатыДохода),
	|	ДополнительныеНачисления.КодВычета,
	|	ДополнительныеНачисления.СуммаВычета,
	|	ДополнительныеНачисления.КоличествоДетей,
	|	ДополнительныеНачисления.Сторно
	|ИЗ
	|	ВТДополнительныеНачисления КАК ДополнительныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыВыплаты КАК ДатыВыплаты
	|		ПО ДополнительныеНачисления.Физлицо = ДатыВыплаты.Физлицо
	|ГДЕ
	|	ДополнительныеНачисления.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)";
	Запрос.Выполнить();
	
	ДатаРегистрации = ?(Дата > КонецМесяца(ПериодРегистрации),КонецМесяца(ПериодРегистрации),?(Дата < ПериодРегистрации,ПериодРегистрации,Дата));
	
	ПроведениеРасчетов.СформироватьДоходыПоКодамНДФЛ(НаборЗаписей, Запрос.МенеджерВременныхТаблиц, ВыборкаПоШапкеДокумента, ДатаРегистрации);
	
	Для каждого Движение Из НаборЗаписей Цикл
		Движение.ЗарегистрированоДляПромежуточногоРасчета = Истина;
	КонецЦикла;
	
КонецПроцедуры // СформироватьДоходыПоКодамНДФЛ()

// Вычисляет разницу между начислениями и удержаниями работника и формирует
// движения по взаиморасчетам с работниками
//
// Параметры:
//	ВыборкаПоШапкеДокумента	- спозиционированная выборка по шапке документа
//	НаборЗаписей			- набор записей 
//	Перерасчет				- признак проведения перерасчетов, по умолчанию - Ложь
//	Физлица					- список физлиц, по которым производится расчет, по умолчанию - отсутствует
//
// Возвращаемое значение:
//	Нет.
//	
Процедура СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, НаборЗаписей, Перерасчет = Ложь, Физлица = Неопределено)
	
	Если Перерасчет Тогда
		Если Физлица = Неопределено Тогда
			
			// таблица ВТФизлица
			// Список физлиц по которым необходимо выполнить перерасчет
			// Поля:
			//		ФизЛицо
			// Описание:
			// Получает список неповторяющихся физлиц по которым есть записи
			// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
			//
			// НачисленияРаботников
			//	Поля:
			//		Физлицо
			//		СуммаДохода - сумма "к выплате" - увличение состояния взаиморасчета с работником
			//
			
			НачисленияРаботниковТекст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Перерасчет.ФизЛицо
			|ПОМЕСТИТЬ ВТФизлица
			|ИЗ
			|	(ВЫБРАТЬ
			|		Перерасчет.ФизЛицо КАК ФизЛицо
			|	ИЗ
			|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
			|	ГДЕ
			|		Перерасчет.ОбъектПерерасчета = &парамСсылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Перерасчет.ФизЛицо
			|	ИЗ
			|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
			|	ГДЕ
			|		Перерасчет.ОбъектПерерасчета = &парамСсылка) КАК Перерасчет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Доходы.Физлицо,
			|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
			|ИЗ
			|	(ВЫБРАТЬ
			|		Основные.Сотрудник.Физлицо КАК Физлицо,
			|		Основные.Результат КАК СуммаДохода
			|	ИЗ
			|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Основные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлица КАК ФизлицаДляПерерасчета
			|			ПО (ФизлицаДляПерерасчета.ФизЛицо = Основные.Сотрудник.Физлицо)
			|	ГДЕ
			|		Основные.Ссылка = &парамСсылка
			|		И Основные.Результат <> 0
			|		И НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.ФизЛицо,
			|		-РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.Налог + РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.ЗачтеноАвансовыхПлатежей
			|	ИЗ
			|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.НДФЛ КАК РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлица КАК ФизлицаДляПерерасчета
			|			ПО (ФизлицаДляПерерасчета.ФизЛицо = РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.ФизЛицо)
			|	ГДЕ
			|		РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.Налог - РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.ЗачтеноАвансовыхПлатежей <> 0
			|		И РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.Ссылка = &парамСсылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Сотрудник.Физлицо,
			|		Дополнительные.Результат
			|	ИЗ
			|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Дополнительные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлица КАК ФизлицаДляПерерасчета
			|			ПО (ФизлицаДляПерерасчета.ФизЛицо = Дополнительные.Сотрудник.Физлицо)
			|	ГДЕ
			|		Дополнительные.Ссылка = &парамСсылка
			|		И Дополнительные.Результат <> 0
			|		И НЕ Дополнительные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме) КАК Доходы
			|
			|СГРУППИРОВАТЬ ПО
			|	Доходы.Физлицо";
			
			Запрос = Новый Запрос(НачисленияРаботниковТекст);
		Иначе
			
			НачисленияРаботниковТекст = 
			"ВЫБРАТЬ
			|	Доходы.Физлицо,
			|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
			|ИЗ
			|	(ВЫБРАТЬ
			|		Основные.Сотрудник.Физлицо КАК Физлицо,
			|		Основные.Результат КАК СуммаДохода
			|	ИЗ
			|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Основные
			|	ГДЕ
			|		Основные.Физлицо В(&парамФизлица)
			|		И Основные.Ссылка = &парамСсылка
			|		И Основные.Результат <> 0
			|		И НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Сотрудник.Физлицо,
			|		Дополнительные.Результат
			|	ИЗ
			|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Дополнительные
			|	ГДЕ
			|		Дополнительные.Физлицо В(&парамФизлица)
			|		И Дополнительные.Ссылка = &парамСсылка
			|		И Дополнительные.Результат <> 0
			|		И НЕ Дополнительные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.ФизЛицо,
			|		-РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.Налог + РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.ЗачтеноАвансовыхПлатежей
			|	ИЗ
			|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.НДФЛ КАК РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ
			|	ГДЕ
			|		РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.ФизЛицо В(&парамФизлица)
			|		И РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.Налог - РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.ЗачтеноАвансовыхПлатежей <> 0
			|		И РегистрацияРазовыхНачисленийРаботниковОрганизацийНДФЛ.Ссылка = &парамСсылка) КАК Доходы
			|
			|СГРУППИРОВАТЬ ПО
			|	Доходы.Физлицо";
			
			Запрос = Новый Запрос(НачисленияРаботниковТекст);
			Запрос.УстановитьПараметр("парамФизлица", Физлица);
			
		КонецЕсли;
	Иначе
		НачисленияРаботниковТекст = 
		"ВЫБРАТЬ
		|	Доходы.Физлицо,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основные.Сотрудник.Физлицо КАК Физлицо,
		|		Основные.Результат КАК СуммаДохода
		|	ИЗ
		|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Основные
		|	ГДЕ
		|		Основные.Ссылка = &парамСсылка
		|		И Основные.Результат <> 0
		|		И НЕ Основные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Дополнительные.Сотрудник.Физлицо,
		|		Дополнительные.Результат
		|	ИЗ
		|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Дополнительные
		|	ГДЕ
		|		Дополнительные.Ссылка = &парамСсылка
		|		И Дополнительные.Результат <> 0
		|		И НЕ Дополнительные.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Налоги.ФизЛицо,
		|		-Налоги.Налог + Налоги.ЗачтеноАвансовыхПлатежей
		|	ИЗ
		|		Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.НДФЛ КАК Налоги
		|	ГДЕ
		|		Налоги.Ссылка = &парамСсылка
		|		И Налоги.Налог - Налоги.ЗачтеноАвансовыхПлатежей <> 0) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Физлицо";
		
		Запрос = Новый Запрос(НачисленияРаботниковТекст);
		
	КонецЕсли;
		
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамСсылка" , Ссылка);
	
	Доходы = Запрос.Выполнить().Выбрать();
	// сформируем движения ВзаиморасчетыСРаботникамиОрганизаций
	Пока Доходы.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		
		// свойства
		Движение.Период					= КонецМесяца(ПериодРегистрации);
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
		// измерения 
		Движение.Физлицо				= Доходы.Физлицо;
		Движение.Организация			= Организация;
		Движение.ПериодВзаиморасчетов	= ПериодРегистрации;
		
		// ресурсы
		Движение.СуммаВзаиморасчетов	= Доходы.СуммаДохода;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьВзаиморасчетыСРаботниками()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			////////////////////////////////////////////////////////////////////////
			// основные Начисления

			Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
			
			// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента).Выбрать();

			Пока ВыборкаПоНачислениям.Следующий() Цикл 

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуОсновныхНачислений(ВыборкаПоНачислениям, ВыборкаПоШапкеДокумента, Движения.ОсновныеНачисленияРаботниковОрганизаций);
					ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ВнутрисменноеВремяРаботниковОрганизаций);
				КонецЕсли;
			КонецЦикла;

			////////////////////////////////////////////////////////////////////////
			// дополнительные Начисления

			РезультатЗапроса = СформироватьЗапросПоДопНачисления();
			Если Не РезультатЗапроса.Пустой() Тогда
	
				// получим реквизиты табличной части
				ВыборкаПоДопНачислениям = РезультатЗапроса.Выбрать();
				
				// Устанавливаем соответствие доходов и положенных по ним вычетов для целей исчисления НДФЛ
				мСоответствиеДоходовИВычетов = СправкиПоНДФЛ.СоответствиеДоходовИМассивовВычетов(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации));

				Пока ВыборкаПоДопНачислениям.Следующий() Цикл 

					// проверим очередную строку табличной части
					ПроверитьЗаполнениеСтрокиДополнительныеНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоДопНачислениям, Отказ, Заголовок);
					Если НЕ Отказ Тогда
						// Заполним записи в наборах записей регистров
						ДобавитьСтрокуДопНачислений(ВыборкаПоДопНачислениям, ВыборкаПоШапкеДокумента, Движения.ДополнительныеНачисленияРаботниковОрганизаций);
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
						
			Если НЕ Отказ Тогда
				ПроведениеРасчетов.ДобавитьДвиженияПериодическихВыплат(Движения, Ссылка);
			КонецЕсли;

			////////////////////////////////////////////////////////////////////////
			// взаиморасчеты с работниками
			
			// сформируем начисления к выплате по начислениям документа
			СформироватьВзаиморасчетыСРаботниками(ВыборкаПоШапкеДокумента, Движения.ВзаиморасчетыСРаботникамиОрганизаций);

			////////////////////////////////////////////////////////////////////////
			// НДФЛ
			
			// сформируем доходы НДФЛ по начислениям документа
			СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, Движения.НДФЛСведенияОДоходах);
			
			ПроведениеРасчетов.СформироватьПредоставленныеВычетыПоНДФЛ(ЭтотОбъект, ВыборкаПоШапкеДокумента, Ложь, Отказ, Заголовок);
			
			Если НЕ Отказ Тогда
				ПроведениеРасчетов.СформироватьЗачтенныеАвансыПоНДФЛ(ЭтотОбъект, ВыборкаПоШапкеДокумента, Ложь);
				УпрощенныйУчетНДФЛ = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, "УпрощенныйУчетНДФЛ");
				Для каждого СтрокаТЧ Из НДФЛ Цикл
					ПроведениеРасчетов.ДобавитьСтрокиИсчисленногоУдержанногоНДФЛ(СтрокаТЧ, ВыборкаПоШапкеДокумента, Ложь, Движения.НДФЛРасчетыСБюджетом, УпрощенныйУчетНДФЛ) 
				КонецЦикла;
				ПроведениеРасчетовДополнительный.УточнитьУчетНалогаПоЦеннымБумагам(Движения, Отказ);
				Если УпрощенныйУчетНДФЛ И Движения.НДФЛРасчетыСБюджетом.Количество() > 0 Тогда
					Если ДатаВыплатыДохода >= ПроведениеРасчетов.ДатаИзмененияСроковУплатыНалога() Тогда
						ПроведениеРасчетов.ВписатьДатыВыплатыСрокУплатыВУдержанныеНалоги(Движения.НДФЛРасчетыСБюджетом, ДатаВыплатыДохода, , ДатыВыплаты.Выгрузить());
					КонецЕсли;
					Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Загрузить(ПроведениеРасчетов.РасчетыНалоговогоАгентаПоУдержанномуНДФЛ(Движения.НДФЛРасчетыСБюджетом.Выгрузить()))
				КонецЕсли;
			КонецЕсли;
				
			// выполним удаление перерасчетов исправленного документа
			Если Не Отказ И ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
				ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
    Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(ОсновныеНачисления);
	МассивТЧ.Добавить(ДополнительныеНачисления);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
		ОсновныеНачисления.ЗагрузитьКолонку(ОсновныеНачисления.ВыгрузитьКолонку("ДатаНачала"),"ДатаОкончания")
	Иначе 
		Для каждого СтрокаТЧ Из ОсновныеНачисления Цикл
			СтрокаТЧ.ОплачиватьЧасов = 0
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

