////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета	- строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Заявление" Тогда
		ТабДокумент = ПечатьЗаявление();
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним));
	КонецЕсли;
	
КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("Заявление", "Заявление");
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура Автозаполнение() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Физлицо
	|ПОМЕСТИТЬ ВТФизлицо
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.СтраховойНомерПФР,
	|	ФизическиеЛица.ДатаРождения,
	|	ФизическиеЛица.Наименование,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ВЫБОР
	|		КОГДА АдресаФактические.Поле1 ЕСТЬ NULL 
	|			ТОГДА "","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9 + "","" + ВЫБОР
	|					КОГДА АдресаРегистрации.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
	|						ТОГДА ""дом""
	|					ИНАЧЕ ""владение""
	|				КОНЕЦ + "","" + ВЫБОР
	|					КОГДА АдресаРегистрации.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
	|						ТОГДА ""корпус""
	|					ИНАЧЕ ""строение""
	|				КОНЕЦ + "","" + ВЫБОР
	|					КОГДА АдресаРегистрации.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
	|						ТОГДА ""кв.""
	|					ИНАЧЕ ""оф.""
	|				КОНЕЦ
	|		ИНАЧЕ "","" + АдресаФактические.Поле1 + "","" + АдресаФактические.Поле2 + "","" + АдресаФактические.Поле3 + "","" + АдресаФактические.Поле4 + "","" + АдресаФактические.Поле5 + "","" + АдресаФактические.Поле6 + "","" + АдресаФактические.Поле7 + "","" + АдресаФактические.Поле8 + "","" + АдресаФактические.Поле9 + "","" + ВЫБОР
	|				КОГДА АдресаФактические.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
	|					ТОГДА ""дом""
	|				ИНАЧЕ ""владение""
	|			КОНЕЦ + "","" + ВЫБОР
	|				КОГДА АдресаФактические.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
	|					ТОГДА ""корпус""
	|				ИНАЧЕ ""строение""
	|			КОНЕЦ + "","" + ВЫБОР
	|				КОГДА АдресаФактические.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
	|					ТОГДА ""кв.""
	|				ИНАЧЕ ""оф.""
	|			КОНЕЦ
	|	КОНЕЦ КАК Адрес,
	|	ВЫРАЗИТЬ(Телефоны.Представление КАК СТРОКА(300)) КАК Телефон,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид КАК ВидДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия КАК СерияДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер КАК НомерДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи КАК ДатаВыдачиДокумента,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК КемВыданДокумент
	|ИЗ
	|	ВТФизлицо КАК Физлица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Физлица.Физлицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК Телефоны
	|		ПО Физлица.Физлицо = Телефоны.Объект
	|			И (Телефоны.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица))
	|			И (Телефоны.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаФактические
	|		ПО Физлица.Физлицо = АдресаФактические.Объект
	|			И (АдресаФактические.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
	|			И (АдресаФактические.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
	|		ПО Физлица.Физлицо = АдресаРегистрации.Объект
	|			И (АдресаРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|			И (АдресаРегистрации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|				&Дата,
	|				Физлицо В
	|					(ВЫБРАТЬ
	|						Физлица.Физлицо
	|					ИЗ
	|						ВТФизлицо КАК Физлица)) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО Физлица.Физлицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&Дата,
	|				Физлицо В
	|					(ВЫБРАТЬ
	|						Физлица.Физлицо
	|					ИЗ
	|						ВТФизлицо КАК Физлица)) КАК ФИОФизЛицСрезПоследних
	|		ПО Физлица.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо";
	Запрос.УстановитьПараметр("Ссылка", Сотрудник);
	Запрос.УстановитьПараметр("Дата", Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Функция формирует табличный документ с печатной формой справки
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьЗаявление()
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// получаем данные для печати
	Выборка = СформироватьЗапросДляПечати().Выбрать();
	
	Отказ = Ложь;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявлениеОНаправленииЗапросаВПФР";
	
	// запоминаем области макета
	Макет = ПолучитьМакет("Заявление");
	
	Если Выборка.Следующий() Тогда 
		
		ПроверитьЗаполнениеШапки(Выборка, Отказ, Заголовок);
		
		Если НЕ Отказ Тогда
			
			Макет.Параметры.Заполнить(Выборка);
			Макет.Параметры.НазваниеОрганизации = СокрЛП(Макет.Параметры.НазваниеОрганизации);
			Макет.Параметры.НазваниеСтрахователя = СокрЛП(Макет.Параметры.НазваниеСтрахователя);
			Макет.Параметры.ВидПособия = НРег(Макет.Параметры.ВидПособия);
			Макет.Параметры.ИныеПричиныОтсутствияСправки = СокрЛП(Макет.Параметры.ИныеПричиныОтсутствияСправки);
			Макет.Параметры.КемВыданДокумент = СокрЛП(Макет.Параметры.КемВыданДокумент);
			Макет.Параметры.ДатаВыдачиДокумента = Формат(Макет.Параметры.ДатаВыдачиДокумента,"ДЛФ=DD");
			Макет.Параметры.Адрес = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Выборка.Адрес);
			Область = Макет.Области[?(Выборка.СтраховательПрекратилДеятельность,"ПоИнымПричинам","ПрекращениеДеятельности")];
			Область.Шрифт = Новый Шрифт(Область.Шрифт,,,,,,Истина);
			
			ТабДокумент.Вывести(Макет);
			
			Возврат ТабДокумент;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Возврат Неопределено;
	
КонецФункции // ПечатьЗаявление()

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросДляПечати()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заявление.Дата,
	|	Заявление.Номер,
	|	Заявление.Организация,
	|	Заявление.Сотрудник,
	|	Заявление.Организация.НаименованиеПолное КАК НазваниеОрганизации,
	|	Заявление.Страхователь.НаименованиеПолное КАК НазваниеСтрахователя,
	|	Заявление.СтраховательПрекратилДеятельность,
	|	Заявление.ИныеПричиныОтсутствияСправки КАК ИныеПричиныОтсутствияСправки,
	|	Заявление.ВидПособия,
	|	Заявление.ПериодРаботыС,
	|	Заявление.ПериодРаботыПо,
	|	Заявление.СтраховойНомерПФР,
	|	Заявление.ДатаРождения,
	|	Заявление.Фамилия + "" "" + Заявление.Имя + "" "" + Заявление.Отчество КАК ФИО,
	|	Заявление.Фамилия,
	|	Заявление.Имя,
	|	Заявление.Отчество,
	|	Заявление.Адрес,
	|	Заявление.Телефон,
	|	Заявление.СерияДокумента,
	|	Заявление.НомерДокумента,
	|	Заявление.ДатаВыдачиДокумента,
	|	Заявление.КемВыданДокумент,
	|	ВЫБОР
	|		КОГДА Заявление.Сотрудник.Физлицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Женский)
	|			ТОГДА ""а""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОкончаниеГлагола,
	|	ВЫБОР
	|		КОГДА Заявление.Сотрудник.Организация = ВЫБОР
	|				КОГДА Заявление.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА Заявление.Организация
	|				ИНАЧЕ Заявление.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА Заявление.Сотрудник.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаВидаЗанятости,
	|	Заявление.Страхователь
	|ИЗ
	|	Документ.ЗаявлениеОНаправленииЗапросаВПФР КАК Заявление
	|ГДЕ
	|	Заявление.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
	//  Страхователь
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Страхователь) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан другой страхователь!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	Иначе
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФИО) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указано ФИО сотрудника!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаРождения) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата рождения!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрЗаменить(ВыборкаПоШапкеДокумента.СтраховойНомерПФР,"-","")) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан страховой номер ПФР!", Отказ, Заголовок);
		КонецЕсли;
		Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
		КонецЕсли;
		Если ВыборкаПоШапкеДокумента.ОшибкаВидаЗанятости Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Заявление оформляются сотрудникам, имеющим основное место работы или работавшим по внешнему совместительству!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидПособия) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан вид пособия!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРаботыС) Или Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРаботыПо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан период работы у другого страхователя!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоШапкеДокумента.ПериодРаботыС > ВыборкаПоШапкеДокумента.ПериодРаботыПо Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Неверно указан период работы у другого страхователя!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ВыборкаПоШапкеДокумента.СтраховательПрекратилДеятельность И Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИныеПричиныОтсутствияСправки) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана иная причина отсутствия справки о сумме заработной платы!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

