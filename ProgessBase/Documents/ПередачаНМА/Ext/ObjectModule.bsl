Перем мУдалятьДвижения;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем УчетнаяПолитикаБух;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "СправкаРасчетВал" тогда

		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура;
	СтруктПечатныхФорм.Вставить( "СправкаРасчетВал", "Справка-расчет ""Рублевая сумма документа в валюте""");
	Возврат СтруктПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетДоходовБУ");
		СтруктураОбязательныхПолей.Вставить("СчетРасходовБУ");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетДоходовНУ");
		СтруктураОбязательныхПолей.Вставить("СчетРасходовНУ");
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,
	                                             |НематериальныйАктив,
	                                             |Сумма,
	                                             |ВалютаДокумента,
	                                             |Контрагент,
	                                             |ДоговорКонтрагента,
	                                             |КурсВзаиморасчетов,
	                                             |КратностьВзаиморасчетов");
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	//Проверка вида договора
	Если НЕ Перечисления.ВидыДоговоровКонтрагентов.СПокупателем = СтруктураШапкиДокумента.ВидДоговора Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе ""Передача НМА"" могут использоваться только договоры c покупателем.",Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров, СтруктураШапкиДокумента)
	
ДокументВВалютеРасчетов = (СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",					Ссылка);
	Запрос.УстановитьПараметр("Курс",					СтруктураПараметров.КурсДокумента);
	Запрос.УстановитьПараметр("Кратность",				СтруктураПараметров.КратностьДокумента);
	Запрос.УстановитьПараметр("РасчетыВУсловныхЕдиницах",СтруктураПараметров.РасчетыВУсловныхЕдиницах);
	Запрос.УстановитьПараметр("ДокументВВалютеРасчетов",ДокументВВалютеРасчетов);
	Запрос.УстановитьПараметр("КурсВзаиморасчетов",		?(СтруктураПараметров.РасчетыВУсловныхЕдиницах,СтруктураПараметров.КурсВзаиморасчетов,1));
	Запрос.УстановитьПараметр("КратностьВзаиморасчетов",?(СтруктураПараметров.РасчетыВУсловныхЕдиницах,СтруктураПараметров.КратностьВзаиморасчетов,1));
	Запрос.УстановитьПараметр("ВидЦенностиНМА"	   		,Перечисления.ВидыЦенностей.НМА);
	Запрос.УстановитьПараметр("СчетНДС"					,ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД.Ссылка); 
	Запрос.УстановитьПараметр("СуммаВключаетНДС"		,СуммаВключаетНДС); 
	
	Запрос.Текст = "ВЫБРАТЬ
	|	&ВидЦенностиНМА КАК ВидЦенности,
	|	ТаблицаТоваров.НематериальныйАктив как Номенклатура,
	|	ТаблицаТоваров.СчетДоходовБУ КАК КоррСчет,
	|	ТаблицаТоваров.СубконтоБУ Как СубконтоБУ,
	|	ТаблицаТоваров.СчетДоходовНУ КАК СчетУчетаНУ,
	|	ТаблицаТоваров.СубконтоНУ КАК СубконтоНУ,
	|	&СчетНДС КАК СчетНДС,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|ВЫБОР 
	|	КОГДА &СуммаВключаетНДС = ИСТИНА ТОГДА 
	|		СУММА(ТаблицаТоваров.Сумма * &Курс / &Кратность)
	|	Иначе
	|		СУММА((ТаблицаТоваров.Сумма+ТаблицаТоваров.СуммаНДС) * &Курс / &Кратность)
	|Конец СуммаСНДС,
	|	СУММА(ТаблицаТоваров.СуммаНДС * &Курс / &Кратность) как СуммаНДС, 
	|ВЫБОР 
	|	КОГДА &РасчетыВУсловныхЕдиницах = ИСТИНА И &ДокументВВалютеРасчетов = ИСТИНА  и &СуммаВключаетНДС = ИСТИНА ТОГДА 
	|		СУММА(ТаблицаТоваров.Сумма) 
	|	КОГДА &РасчетыВУсловныхЕдиницах = ИСТИНА И &ДокументВВалютеРасчетов = ИСТИНА  и &СуммаВключаетНДС = Ложь ТОГДА 
	|		СУММА(ТаблицаТоваров.Сумма+ТаблицаТоваров.СуммаНДС) 
	|	КОГДА &РасчетыВУсловныхЕдиницах = ИСТИНА И &ДокументВВалютеРасчетов = ЛОЖЬ и &СуммаВключаетНДС = ИСТИНА ТОГДА
	|		СУММА(ТаблицаТоваров.Сумма * &КратностьВзаиморасчетов / &КурсВзаиморасчетов) 
	|	КОГДА &РасчетыВУсловныхЕдиницах = ИСТИНА И &ДокументВВалютеРасчетов = ЛОЖЬ и &СуммаВключаетНДС = Ложь ТОГДА
	|		СУММА((ТаблицаТоваров.Сумма+ТаблицаТоваров.СуммаНДС) * &КратностьВзаиморасчетов / &КурсВзаиморасчетов) 
	|	ИНАЧЕ 0 
	|КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.ПередачаНМА КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка 	
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.НематериальныйАктив,
	|	ТаблицаТоваров.СчетДоходовБУ,
	|	ТаблицаТоваров.СубконтоБУ,
	|	ТаблицаТоваров.СчетДоходовНУ,
	|	ТаблицаТоваров.СубконтоНУ,
	|	ТаблицаТоваров.СтавкаНДС
	|";
	
	
	Результат = Запрос.Выполнить();
	ТаблицаДвижений = Результат.Выгрузить();
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1");
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2");
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3");
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС1");
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС2");
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС3");
	Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1");
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2");
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3");
	КонецЕсли;
	Для Каждого Движение Из ТаблицаДвижений Цикл
		КоррСчет = Движение["КоррСчет"];
		Если КоррСчет.ВидыСубконто.Количество()>0 тогда
			ВидСубк = КоррСчет.ВидыСубконто[0].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["СубконтоБУ"])) Тогда
				Движение["КоррСубконто1"] = Движение["СубконтоБУ"];
			Конецесли;
		КонецЕсли;
		Если КоррСчет.ВидыСубконто.Количество()>1 тогда
			ВидСубк = КоррСчет.ВидыСубконто[1].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["СтавкаНДС"])) Тогда
				Движение["КоррСубконто2"] = Движение["СтавкаНДС"];
			Конецесли;
		КонецЕсли;
		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
			СчетНУ = Движение["СчетУчетаНУ"];
			Если СчетНУ.ВидыСубконто.Количество()>0 тогда
				ВидСубк = СчетНУ.ВидыСубконто[0].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["СубконтоНУ"])) Тогда
					Движение["СубконтоНУ1"] = Движение["СубконтоНУ"];
				Конецесли;
			КонецЕсли;
			Если СчетНУ.ВидыСубконто.Количество()>1 тогда
				ВидСубк = СчетНУ.ВидыСубконто[1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["Номенклатура"])) Тогда
					Движение["СубконтоНУ2"] = Движение["Номенклатура"];
				Конецесли;
			КонецЕсли;
		КонецЕсли;
		СчетНДС = Движение["СчетНДС"];
		Если СчетНДС.ВидыСубконто.Количество()>0 тогда
			ВидСубк = СчетНДС.ВидыСубконто[0].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["СубконтоБУ"])) Тогда
				Движение["СубконтоНДС1"] = Движение["СубконтоБУ"];
			Конецесли;
		КонецЕсли;
		Если СчетНДС.ВидыСубконто.Количество()>1 тогда
			ВидСубк = СчетНДС.ВидыСубконто[1].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["СтавкаНДС"])) Тогда
				Движение["СубконтоНДС2"] = Движение["СтавкаНДС"];
			Конецесли;
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаДвижений;
КонецФункции	

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	// Движения во регистрам подсистемы учета НДС.
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//При распределении амортизации производилась промежуточная запись проводок.
	//Необходимо записать проводки с сохранением предыдущих движений.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и не Отказ Тогда
		Движения.Хозрасчетный.Записать(Ложь);
	КонецЕсли; 
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете и не Отказ тогда
		Движения.Налоговый.Записать(Ложь);
	КонецЕсли; 
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 

	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	НомерЖурнала   = "НА";
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	Курс = СтруктураШапкиДокумента.КурсДокумента;
	Кратность = ?(СтруктураШапкиДокумента.КратностьДокумента = 0, 1, СтруктураШапкиДокумента.КратностьДокумента);
	
	// Выручка
	Проводка = ПроводкиБУ.Добавить();
	Проводка.Период       = ДатаДока;
	Проводка.Активность   = Истина;
	Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	Проводка.Содержание   = "Передача НМА";
	Проводка.НомерЖурнала = "НА";
	Проводка.Сумма        = ?(СтруктураШапкиДокумента.СуммаВключаетНДС, Сумма, Сумма + СуммаНДС) * Курс / Кратность;

	Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
	Проводка.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
	Проводка.СубконтоДт.Договоры    = СтруктураШапкиДокумента.ДоговорКонтрагента;

	Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = Проводка.Сумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
	КонецЕсли;

	Проводка.СчетКт = СчетДоходовБУ;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоБУ);
	Если ТипЗнч(СубконтоБУ) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтавкаНДС);
	КонецЕсли;

	// НДС
	Если СтруктураШапкиДокумента.УчитыватьНДС И СуммаНДС > 0 Тогда
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период       = ДатаДока;
		Проводка.Активность   = Истина;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание   = "Передача НМА";
		Проводка.НомерЖурнала = "НА";
		Проводка.Сумма = СуммаНДС * Курс / Кратность;

		Если СчетРасходовБУ = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД Тогда
			Проводка.СчетДт = ?(БухгалтерскийУчет.ЭтоСубсчет( СчетДоходовБУ, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы), СчетДоходовБУ, ПланыСчетов.Хозрасчетный.Продажи_НДС); 
		Иначе
			Проводка.СчетДт = СчетРасходовБУ;
		КонецЕсли;
		 /////Вадим 11.11.2013 15:08:59  бп 8
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПодразделениеОрганизации"      , ПодразделениеОрганизации);		 
		////ВадимКонец
	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоБУ);
		Если ТипЗнч(СубконтоБУ) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтавкаНДС);
		КонецЕсли;

		Если УчетнаяПолитикаБух.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;

		Иначе
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", Ссылка);
		КонецЕсли;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Проводка = ПроводкиНУ.Добавить();
		Проводка.Период      = ДатаДока;
		Проводка.Активность  = Истина;
		Проводка.Содержание   = "Передача НМА";
		Проводка.НомерЖурнала = "НА";
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = ?(СтруктураШапкиДокумента.СуммаВключаетНДС, Сумма - СуммаНДС, Сумма) * Курс / Кратность;
		
		Проводка.СчетДт      = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
		Проводка.СубконтоДт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
		Проводка.СубконтоДт.Контрагенты                = СтруктураШапкиДокумента.Контрагент;
		Проводка.СубконтоДт.Договоры                   = СтруктураШапкиДокумента.ДоговорКонтрагента;

		Проводка.СчетКт      = СчетДоходовНУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоНУ);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", НематериальныйАктив);
	КонецЕсли;

	// Движения по взаиморасчетам
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок,?(СуммаВключаетНДС, Сумма, Сумма + СуммаНДС),,СтруктураШапкиДокумента);
	Если СтруктураПараметровЗачетАванса = ложь тогда
		Отказ = Истина;
		СуммаАванса = 0;
	Иначе
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметровЗачетАванса, СтруктураШапкиДокумента);
		СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса,
			ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации);
	КонецЕсли;

	Если не ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
		Конецесли;
		БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса,
			мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
	Конецесли;
	
	// Отражение выбытия объекта
	СостояниеНМА           = Движения.СостоянияНМАОрганизаций;
	АмортизацияБУ          = Движения.СтоимостьНМАБухгалтерскийУчет;
	АмортизацияНУ          = Движения.СтоимостьНМАНалоговыйУчет;
	ПроводкиБУ             = Движения.Хозрасчетный;
	ПроводкиНУ             = Движения.Налоговый;
	
    //Получение информации о текущем состоянии НМА
	Период = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
	ТаблицаТекущегоСостояния = УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуНМА(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.НематериальныйАктив,Период);
	
	//Определение суммы амортизации за месяц, распределение в соответствии со способом отражения БУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
		ТаблицаАмортизацииБУ = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР_БухРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.НематериальныйАктив,Истина);

		ТаблицаАмортизацииБУ.Колонки.НМА.Имя = "ОбъектУчета";
		ТаблицаАмортизацииБУ.Колонки.Бух.Имя = "Сумма";
		ТаблицаАмортизацииБУ.Колонки.СчетАмортизацииБУ.Имя = "СчетАмортизации";
		ТаблицаАмортизацииБУ.Колонки.Добавить("СчетАмортизацииНУ");
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаАмортизацииБУ, СтруктураШапкиДокумента, "Бух", "НА");
	    ПроводкиБУ.Записать(Ложь);
	КонецЕсли;
	
	//Определение суммы амортизации за месяц, распределение в соответствии со способом отражения НУ
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда

		ТаблицаАмортизацииНУ = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР_НалогРегл(ЭтотОбъект,СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.НематериальныйАктив,Истина);
		ТаблицаАмортизацииНУ.Колонки.НМА.Имя   = "ОбъектУчета";
		ТаблицаАмортизацииНУ.Колонки.Налог.Имя = "Сумма";
		ТаблицаАмортизацииНУ.Колонки.Добавить("СчетАмортизации");
		Если УчетнаяПолитикаБух.ПоддержкаПБУ18 Тогда
			НалоговыйУчет.РасчетРазницПоАмортизации(СтруктураШапкиДокумента, "НМА", СтруктураШапкиДокумента.НематериальныйАктив, ТаблицаАмортизацииНУ, ТабЗатрат, ТаблицаАмортизацииБУ);
		КонецЕсли;
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТаблицаАмортизацииНУ, СтруктураШапкиДокумента, "Нал", "НА");
	КонецЕсли;

	ТекНМА = СтруктураШапкиДокумента.НематериальныйАктив;
	
	//Движения по регистру СостояниеНМА
	Движение = СостояниеНМА.Добавить();
	Движение.Период              = ДатаДока;
	Движение.НематериальныйАктив = ТекНМА;
	Движение.Организация         = ТекОрганизация;
	Движение.Состояние           = Перечисления.ВидыСостоянийНМА.Списан;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		СтрокаАмортизации = ТаблицаАмортизацииБУ.Найти(ТекНМА,"ОбъектУчета");
		СтрокаТТС         = ТаблицаТекущегоСостояния.Найти(ТекНМА,"НМА_БУ");

		Если СтрокаАмортизации = Неопределено тогда
			АмортизацияЗаМесяц = 0;
		Иначе
			АмортизацияЗаМесяц = СтрокаАмортизации.Сумма;
		КонецЕсли;
		АмортизацияВсего = ?(СтрокаТТС = Неопределено,0,СтрокаТТС.АмортизацияБУ) + АмортизацияЗаМесяц;
		СтоимостьНМА 	 = ?(СтрокаТТС = Неопределено,0,СтрокаТТС.СтоимостьБУ);
		
		//Отражение начисления амортизации за месяц в регистре СтоимостьНМАБухгалтерскийУчет
		Если АмортизацияЗаМесяц > 0 Тогда
			Движение = АмортизацияБУ.Добавить();
			Движение.Период					 = ДатаДока;
			Движение.НематериальныйАктив     = ТекНМА;
			Движение.Организация             = ТекОрганизация;
			Движение.Амортизация             = АмортизацияЗаМесяц;
			Движение.Стоимость               = 0;
			Движение.ВидДвижения			 = ВидДвиженияНакопления.Приход;
		КонецЕсли;
		
		//Списание остатков регистра СтоимостьНМАБухгалтерскийУчет
		Если не (АмортизацияВсего = 0 и СтоимостьНМА = 0) Тогда
			Движение = АмортизацияБУ.Добавить();
			Движение.Период					 = ДатаДока;
			Движение.НематериальныйАктив     = ТекНМА;
			Движение.Организация             = ТекОрганизация;
			Движение.Амортизация             = АмортизацияВсего;
			Движение.Стоимость               = СтоимостьНМА;
			Движение.ВидДвижения			 = ВидДвиженияНакопления.Расход;
		КонецЕсли; 
		
		//Формирование проводок по списанию амортизации и остаточной стоимости БУ
		Если СтрокаТТС <> Неопределено Тогда

			СчетУчетаСтоимости   = СтрокаТТС.СчетУчетаБУ;
			СчетУчетаАмортизации = СтрокаТТС.СчетАмортизацииБУ;

			// Списание амортизации Д (Счет амортизации) К (счет учета) если амортизация учитывается на отдельном счете
			Если АмортизацияВсего<>0 и не (СчетУчетаСтоимости = СчетУчетаАмортизации) Тогда
				Проводка = ПроводкиБУ.Добавить();

				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Передача НМА";
				Проводка.Сумма        = АмортизацияВсего;

				Проводка.СчетДт       = СчетУчетаАмортизации;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР"      , ТекНМА);

				Проводка.СчетКт       = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"      , ТекНМА);
			КонецЕсли;

			// списание остаточной стоимости Д 91.02 К 09.01
			ОстаточнаяСтоимость = СтоимостьНМА - АмортизацияВсего;

			Если ОстаточнаяСтоимость <> 0 Тогда

				Проводка = ПроводкиБУ.Добавить();

				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Передача НМА";
				Проводка.Сумма        = ОстаточнаяСтоимость;

				Проводка.СчетДт       = СтруктураШапкиДокумента.СчетРасходовБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоБУ);
                 /////Вадим 11.11.2013 15:08:59  бп 8
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПодразделениеОрганизации"      , ПодразделениеОрганизации);		 
				////ВадимКонец
				Проводка.СчетКт      = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"      , ТекНМА);

			КонецЕсли;

		КонецЕсли;
    КонецЕсли;

	//Отражение списания НМА(НИОКР) в НУ
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 

		СтрокаАмортизации = ТаблицаАмортизацииНУ.Найти(ТекНМА,"ОбъектУчета");
		СтрокаТТС         = ТаблицаТекущегоСостояния.Найти(ТекНМА,"НМА_НУ");

		Если СтрокаАмортизации = Неопределено тогда
			АмортизацияЗаМесяц = 0;
		Иначе
			АмортизацияЗаМесяц = СтрокаАмортизации.Сумма;
		КонецЕсли;
		АмортизацияВсего = ?(СтрокаТТС = Неопределено,0,СтрокаТТС.АмортизацияНУ) + АмортизацияЗаМесяц;
		СтоимостьНМА 	 = ?(СтрокаТТС = Неопределено,0,СтрокаТТС.СтоимостьНУ);
			
		//Отражение начисления амортизации за месяц в регистре СтоимостьНМАНалоговыйУчет
		Если АмортизацияЗаМесяц > 0 Тогда
			Движение = АмортизацияНУ.Добавить();
			Движение.Период					 = ДатаДока;
			Движение.НематериальныйАктив     = ТекНМА;
			Движение.Организация             = ТекОрганизация;
			Движение.Амортизация             = АмортизацияЗаМесяц;
			Движение.Стоимость               = 0;
			Движение.ВидДвижения			 = ВидДвиженияНакопления.Приход;
		КонецЕсли;
		
		//Списание остатков регистра СтоимостьНМАНалоговыйУчет
		Если не (АмортизацияВсего = 0 и СтоимостьНМА = 0) Тогда
			Движение = АмортизацияНУ.Добавить();
			Движение.Период					 = ДатаДока;
			Движение.НематериальныйАктив     = ТекНМА;
			Движение.Организация             = ТекОрганизация;
			Движение.Амортизация             = АмортизацияВсего;
			Движение.Стоимость               = СтоимостьНМА;
			Движение.ВидДвижения			 = ВидДвиженияНакопления.Расход;
		КонецЕсли; 
		
		//Формирование проводок по списанию амортизации и остаточной стоимости НУ
		Если СтрокаТТС <> Неопределено Тогда

			СчетУчетаСтоимости   = СтрокаТТС.СчетУчетаНУ;
			СчетУчетаАмортизации = СтрокаТТС.СчетАмортизацииНУ;
			Если АмортизацияВсего<>0 и не (СчетУчетаСтоимости = СчетУчетаАмортизации) Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Передача НМА";
				Проводка.Сумма        = АмортизацияВсего;

				Проводка.СчетДт      = СчетУчетаАмортизации;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР"      , ТекНМА);

				Проводка.СчетКт      = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"      , ТекНМА);

			КонецЕсли;

			// списание остаточной стоимости Д 91.02 К 09.01
			ОстаточнаяСтоимость = СтоимостьНМА - АмортизацияВсего;

			Если ОстаточнаяСтоимость <> 0 Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.НомерЖурнала = НомерЖурнала;
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = ТекОрганизация;
				Проводка.Содержание   = "Передача НМА";
				Проводка.Сумма        = ОстаточнаяСтоимость;

				Проводка.СчетДт       = СтруктураШапкиДокумента.СчетРасходовНУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР"      , ТекНМА);
                 /////Вадим 11.11.2013 15:08:59  бп 8
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПодразделениеОрганизации"      , ПодразделениеОрганизации);		 
				////ВадимКонец
				Проводка.СчетКт       = СчетУчетаСтоимости;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"      , ТекНМА);

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		// Для документа, у которого есть своя валюта, переведем в валюту документа.
		Для каждого Амортизация из ТаблицаАмортизацииБУ Цикл
			Амортизация.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Амортизация.Сумма,
														   мВалютаРегламентированногоУчета,
														   СтруктураШапкиДокумента.ВалютаДокумента,
														   1,
														   СтруктураШапкиДокумента.КурсДокумента,
														   1,
														   СтруктураШапкиДокумента.КратностьДокумента);
        КонецЦикла;
		
		УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТаблицаАмортизацииБУ, СтруктураШапкиДокумента);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ) Экспорт

	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если Не ТаблицаВыручки.Количество() = 0 Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, , Отказ, УчетНДС.СчетОтнесенияНДС(СтруктураШапкиДокумента));
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДвиженияПоРазницам(СтруктураШапкиДокумента)

	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
		Возврат;
	КонецЕсли;	
	
	Если НЕ УчетнаяПолитикаБух.ПоддержкаПБУ18 Тогда
		Возврат;
	КонецЕсли;

	Период = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);
	ТаблицаТекущегоСостояния = УправлениеВнеоборотнымиАктивами.ОпределитьСтоимостьПоСпискуНМА(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.НематериальныйАктив,Период);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1 Как Субконто1,
	|	НалоговыйОстатки.СуммаОстатокКт КАК Сумма02ПР,
	|	0 КАК Сумма02ВР,
	|	0 КАК Сумма01ПР,
	|	0 КАК Сумма01ВР,
	|	0 КАК Сумма01
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияНМА_01), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 = (&СписокНМА)) КАК НалоговыйОстатки
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокКт,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияНМА_01), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 = (&СписокНМА)) КАК НалоговыйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт,
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйНМАвОрганизации), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 = (&СписокНМА)) КАК НалоговыйОстатки
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйНМАвОрганизации), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 = (&СписокНМА)) КАК НалоговыйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Субконто1,
	|	0,
	|	0,
	|	0,
	|	0,
	|	НалоговыйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонДата, Счет В ИЕРАРХИИ (&ХозрасчетныйНМАвОрганизации), ,Организация = &Организация И Субконто1 = (&СписокНМА)) КАК НалоговыйОстатки
	|
	|ИТОГИ СУММА(Сумма02ПР), СУММА(Сумма02ВР), СУММА(Сумма01ПР), СУММА(Сумма01ВР), СУММА(Сумма01) ПО
	|Субконто1 ";
	
	Запрос.УстановитьПараметр("НачДата",  началоМесяца(Дата));
	Запрос.УстановитьПараметр("КонДата",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("ХозрасчетныйНМАвОрганизации", ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	Запрос.УстановитьПараметр("НалоговыйАмортизацияНМА_01", ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов);
	Запрос.УстановитьПараметр("НалоговыйНМАвОрганизации", ПланыСчетов.Налоговый.НематериальныеАктивы);
	Запрос.УстановитьПараметр("СписокНМА",       НематериальныйАктив);

	ПроводкиНУ              = Движения.Налоговый;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	Пока Выборка.Следующий() Цикл
		ТекНМА = Выборка.Субконто1;
		
		СтрокаТТС         = ТаблицаТекущегоСостояния.Найти(ТекНМА,"НМА_НУ");

			Если СтрокаТТС = Неопределено Тогда
               Продолжить;
		   КОнецЕсли;
		   
		СчетУчетаСтоимости   = СтрокаТТС.СчетУчетаНУ;
		СчетУчетаАмортизации = СтрокаТТС.СчетАмортизацииНУ;
		
		Если Выборка.Сумма01Вр - Выборка.Сумма02Вр <> 0 Тогда
			Проводка              = ПроводкиНУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт       = СчетРасходовНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СубконтоНУ);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР"      , ТекНМА);
			 /////Вадим 11.11.2013 15:08:59  бп 8
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПодразделениеОрганизации"      , ПодразделениеОрганизации);		 
		////ВадимКонец
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			Проводка.Сумма        = Выборка.Сумма01Вр - Выборка.Сумма02Вр;
			Проводка.Содержание   = "Передача НМА";
			Проводка.СчетКт       = СчетУчетаСтоимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"      , ТекНМА);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			Проводка.НомерЖурнала = "ВР";
		КонецЕсли;
		
		Если Выборка.Сумма02Вр <> 0 И СчетУчетаСтоимости <> СчетУчетаАмортизации Тогда
			Проводка              = ПроводкиНУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт       = СчетУчетаАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
			
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
			Проводка.Сумма        = Выборка.Сумма02Вр;
			Проводка.Содержание   = "Передача НМА";
			Проводка.СчетКт       = СчетУчетаСтоимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"      , ТекНМА);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
			Проводка.НомерЖурнала = "ВР";
		КонецЕсли;
			
		Если Выборка.Сумма01Пр - Выборка.Сумма02Пр <> 0 Тогда
			Проводка              = ПроводкиНУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт       = СчетРасходовНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СубконтоНУ);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР"      , ТекНМА);
			 /////Вадим 11.11.2013 15:08:59  бп 8
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПодразделениеОрганизации"      , ПодразделениеОрганизации);		 
		////ВадимКонец
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			Проводка.Сумма        = Выборка.Сумма01Пр - Выборка.Сумма02Пр;
			Проводка.Содержание   = "Передача НМА";
			Проводка.СчетКт       = СчетУчетаСтоимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"      , ТекНМА);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			Проводка.НомерЖурнала = "ПР";
		КонецЕсли;
		
		Если Выборка.Сумма02Пр <> 0 И СчетУчетаСтоимости <> СчетУчетаАмортизации Тогда
			Проводка              = ПроводкиНУ.Добавить();
			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт       = СчетУчетаАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", ТекНМА);
			
			Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
			Проводка.Сумма        = Выборка.Сумма02Пр;
			Проводка.Содержание   = "Передача НМА";
			Проводка.СчетКт       = СчетУчетаСтоимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", ТекНМА);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"      , ТекНМА);
			
			Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
			Проводка.НомерЖурнала = "ПР";
		КонецЕсли;
		
	КонецЦикла;
		
	ПроводкиНУ.Записать(Ложь);	
КонецПроцедуры

Функция ПодготовитьТаблицуТоваров(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	ПередачаНМА.НематериальныйАктив,
	|	ПередачаНМА.Сумма,
	|	ПередачаНМА.СтавкаНДС,
	|	ПередачаНМА.СуммаНДС КАК НДС,
	|	ПередачаНМА.СчетДоходовБУ,
	|	ПередачаНМА.СчетРасходовБУ,
	|	ПередачаНМА.СубконтоБУ,
	|	ПередачаНМА.СчетДоходовНУ,
	|	ПередачаНМА.СчетРасходовНУ,
	|	ПередачаНМА.СубконтоНУ
	|ИЗ
	|	Документ.ПередачаНМА КАК ПередачаНМА
	|
	|ГДЕ
	|	ПередачаНМА.Ссылка = &Ссылка";
	ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаПоТоварам;

КонецФункции // ПодготовитьТаблицуТоваров()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ)

	Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда
		УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		КонецЕсли; 
	Иначе
		УчетнаяПолитикаБух = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"          , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"       , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"          			 , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"           , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                    , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"            , "КурсВалютыУправленческогоУчета");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина );
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	 	ОбщегоНазначения.СообщитьОбОшибке("Документ в обязательном порядке должен отражаться в бухгалтерском учете!",Отказ, Заголовок);
	КонецЕсли; 
	если (СчетРасходовБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) и ОтражатьВБухгалтерскомУчете)
		или (СчетРасходовНУ.ПринадлежитЭлементу(ПланыСчетов.Налоговый.ПрочиеДоходыИРасходы) и ОтражатьВНалоговомУчете) тогда
		Если не ЗначениеЗаполнено(ПодразделениеОрганизации) тогда
			Отказ=Истина;
			Предупреждение("Для 91 счета необходимо указать подразделение организации");
			возврат;
		Конецесли;	
	Конецесли;	
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		ДвиженияПоРазницам(СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
	// Удаление записей регистрации из всех последовательностей
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
