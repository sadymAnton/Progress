////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток Экспорт;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//	Название макета печати передается в качестве параметра,
//	по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета	- строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

 ///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 01.06.2012 16:29 
	Если ИмяМакета = "Авт_ПриказОПродленииОтпуска" Тогда
		ТабДокумент = Авт_СформироватьПриказОПродленииОтпуска();
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
	//Если ИмяМакета <> "Отпуска" Тогда
	ИначеЕсли ИмяМакета <> "Отпуска" Тогда
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Ссылка",		Ссылка);
		
		// ИЗМЕНЕНИЕ: Измайлова Полина 22.06.2011 17:29  
		//Запрос.Текст =
		//"ВЫБРАТЬ
		//|	МИНИМУМ(ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала) КАК ДатаНачала,
		//|	МАКСИМУМ(ОтпускаОрганизацииРаботникиОрганизации.ДатаОкончания) КАК ДатаОкончания
		//|ИЗ
		//|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботникиОрганизации
		//|ГДЕ
		//|	ОтпускаОрганизацииРаботникиОрганизации.Ссылка = &Ссылка
		//|	И ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
				// ИЗМЕНЕНИЕ: Измайлова Полина 23.06.2011 08:54 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтпускаОрганизацииРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ОтпускаОрганизацииРаботникиОрганизации.Сотрудник,
		|	ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
		|	ОтпускаОрганизацииРаботникиОрганизации.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботникиОрганизации
		|ГДЕ
		|	ОтпускаОрганизацииРаботникиОрганизации.Ссылка = &Ссылка
		|	И ОтпускаОрганизацииРаботникиОрганизации.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокДат.НомерСтроки КАК НомерСтроки,
		|	РаботникиОрганизации.ПериодЗавершения КАК ПериодЗавершения,
		|	РаботникиОрганизации.ГрафикРаботы.AVT_ПроизводственныйКалендарь КАК Календарь,
		|	РаботникиОрганизации.ГрафикРаботыЗавершения.AVT_ПроизводственныйКалендарь КАК КалендарьЗавершения
		|ПОМЕСТИТЬ ВТДанныеОРаботникахОрганизации
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиВнутри.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения,
		|		ОтпускаОрганизаций.НомерСтроки КАК НомерСтроки
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ОтпускаОрганизаций
		|			ПО РаботникиВнутри.Сотрудник = ОтпускаОрганизаций.Сотрудник
		|				И РаботникиВнутри.Период <= ОтпускаОрганизаций.ДатаНачала
		|	ГДЕ
		|		РаботникиВнутри.Сотрудник В
		|				(ВЫБРАТЬ
		|					ОтпускаОрганизацииРаботники.Сотрудник
		|				ИЗ
		|					ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОтпускаОрганизаций.НомерСтроки,
		|		РаботникиВнутри.Сотрудник) КАК СписокДат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
		|			И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТДанныеДокумента.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(ВТДанныеДокумента.ДатаОкончания) КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ВТДанныеОРаботникахОрганизации.ПериодЗавершения <= ВТДанныеДокумента.ДатаНачала
		|				И ВТДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ВТДанныеОРаботникахОрганизации.КалендарьЗавершения
		|		ИНАЧЕ ВТДанныеОРаботникахОрганизации.Календарь
		|	КОНЕЦ КАК Календарь
		|ИЗ
		|	ВТДанныеДокумента КАК ВТДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОРаботникахОрганизации КАК ВТДанныеОРаботникахОрганизации
		|		ПО (ВТДанныеОРаботникахОрганизации.НомерСтроки = ВТДанныеДокумента.НомерСтроки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ВТДанныеОРаботникахОрганизации.ПериодЗавершения <= ВТДанныеДокумента.ДатаНачала
		|				И ВТДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ВТДанныеОРаботникахОрганизации.КалендарьЗавершения
		|		ИНАЧЕ ВТДанныеОРаботникахОрганизации.Календарь
		|	КОНЕЦ";
		Выборка = Запрос.Выполнить().Выбрать();
		// ИЗМЕНЕНИЕ: Измайлова Полина 23.06.2011 09:09 
		//Если Выборка.Следующий() Тогда
		//	Если ЗначениеЗаполнено(Выборка.ДатаНачала) и ЗначениеЗаполнено(Выборка.ДатаОкончания) и Не ПроцедурыУправленияПерсоналомПереопределяемый.РегламентированныйКалендарьЗаполнен(Выборка.ДатаНачала,Выборка.ДатаОкончания,Истина) Тогда
		//		Возврат Неопределено;
		//	КонецЕсли;
		//КонецЕсли;
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 23.06.2011 09:10 
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ДатаНачала) и ЗначениеЗаполнено(Выборка.ДатаОкончания) и Не ПроцедурыУправленияПерсоналомПереопределяемый.РегламентированныйКалендарьЗаполнен(Выборка.ДатаНачала,Выборка.ДатаОкончания,Истина, Выборка.Календарь) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	ИмяФормы = "";
	Если ИмяМакета = "Т6а_от_5_1_2004" Тогда
		ИмяФормы = " (форма Т-6а)";
		ТабДокумент = ПечатьТ6а_2004();
		
	ИначеЕсли ИмяМакета = "Т6_от_5_1_2004" Тогда
		ИмяФормы = " (форма Т-6)";
		ТабДокумент = ПечатьТ6_2004();
		
	ИначеЕсли ИмяМакета = "Отпуска" тогда
		
		Если НЕ Проведен Тогда
			РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после его проведения!");
			Возврат Неопределено;
		КонецЕсли;

		ИмяФормы = " (диаграмма отпусков)";
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ОтпускаОрганизацииРаботники.ДатаОкончания) КАК ДатаКон,
		|	МИНИМУМ(ОтпускаОрганизацииРаботники.ДатаНачала) КАК ДатаНач
		|ИЗ
		|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацииРаботники
		|
		|ГДЕ
		|	ОтпускаОрганизацииРаботники.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			Отчет = Отчеты.Отпуска.Создать();
			Форма = Отчет.ПолучитьФорму();
			ЗначениеНастройкиПользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(Отчет, Форма);
			ЗначениеНастройкиПользователя.ВыводитьДиаграммуГанта = истина;
			ЗначениеНастройкиПользователя.ВыводитьЗаголовокОтчета = истина;
			Отчет.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ЗначениеНастройкиПользователя);
			ТиповыеОтчеты.УстановитьПараметр(Отчет.КомпоновщикНастроек, "НачалоПериода", ?(НЕ ЗначениеЗаполнено(Выборка.ДатаНач),НачалоГода(РабочаяДата),НачалоМесяца(Выборка.ДатаНач)));
			ТиповыеОтчеты.УстановитьПараметр(Отчет.КомпоновщикНастроек, "КонецПериода", ?(НЕ ЗначениеЗаполнено(Выборка.ДатаКон),КонецГода(РабочаяДата),КонецМесяца(Выборка.ДатаКон)));
			ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Регистратор", Ссылка);
			ТабДокумент = Новый ТабличныйДокумент;
			Отчет.СформироватьОтчет(ТабДокумент);
			Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + " (форма Т-7)"));
		Иначе
			РаботаСДиалогами.ВывестиПредупреждение("Ошибка исполнения запроса к т.ч.");
		КонецЕсли;
		Возврат Неопределено
	КонецЕсли;

	Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + ИмяФормы),,ТабДокумент);

КонецФункции // Печать()

#КонецЕсли

// Заполняет табличную часть документа отпусками по графику отпусков
//
// Параметры
//	ДатаНачала, ДатаОкончания	– даты начала и окончания
//								  просмотра графика отпусков	
//
Процедура Автозаполнение(ДатаНачала, ДатаОкончания) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"));
		Возврат
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) или НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Сообщить("Не указаны границы периода просмотра графика отпусков!");
		Возврат
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаНачала",				ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",			ДатаОкончания);
     ///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 10.01.2012 10:50 
	// ОПИСАНИЕ: в запрос добавлено поле ПроизводственныйКалендарь и условие связи по этому полю.
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник КАК Сотрудник
	|	,ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.AVT_ПроизводственныйКалендарь
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.AVT_ПроизводственныйКалендарь
	|	КОНЕЦ КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ РаботникиОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачала, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацииСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|	И ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачала
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизации.Сотрудник
	|	,РаботникиОрганизации.ГрафикРаботы.AVT_ПроизводственныйКалендарь
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|	И РаботникиОрганизации.Период > &ДатаНачала
	|	И РаботникиОрганизации.Период <= &ДатаОкончания
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|	И РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Работники.Сотрудник
	|	,Работники.ГрафикРаботыЗавершения.AVT_ПроизводственныйКалендарь
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|			И (ПериодыПерекрытия.Период > Работники.Период)
	|			И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
	|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.Организация = &ГоловнаяОрганизация
	|	И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|	И Работники.ПериодЗавершения > &ДатаНачала
	|	И Работники.ПериодЗавершения <= &ДатаОкончания
	|	И Работники.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГрафикОтпусковОрганизации.Сотрудник КАК Сотрудник,
	|	ГрафикОтпусковОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ГрафикОтпусковОрганизации.Период КАК ДатаНачала,
	|	ГрафикОтпусковОрганизации.ДатаОкончания,
	|	ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный) КАК ПричинаОтсутствия
		|	,РаботникиОрганизации.ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ГрафикОтпусков
	|ИЗ
	|	РегистрСведений.ГрафикОтпусковОрганизаций КАК ГрафикОтпусковОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаботникиОрганизации КАК РаботникиОрганизации
	|		ПО ГрафикОтпусковОрганизации.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизаций
	|		ПО ГрафикОтпусковОрганизации.Сотрудник = СостояниеРаботниковОрганизаций.Сотрудник
	|			И ГрафикОтпусковОрганизации.Период = СостояниеРаботниковОрганизаций.Период
	|			И (НачалоПериода(ГрафикОтпусковОрганизации.ДатаОкончания, День) = ДОБАВИТЬКДАТЕ(СостояниеРаботниковОрганизаций.ПериодЗавершения, ДЕНЬ, -1))
	|ГДЕ
	|	ГрафикОтпусковОрганизации.Организация = &ГоловнаяОрганизация
	|	И ГрафикОтпусковОрганизации.Период <= &ДатаОкончания
	|	И ГрафикОтпусковОрганизации.Период >= &ДатаНачала
	|	И ГрафикОтпусковОрганизации.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный)
	|	И СостояниеРаботниковОрганизаций.Период ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикОтпусков.Сотрудник,
	|	ГрафикОтпусков.Физлицо,
	|	ГрафикОтпусков.ДатаНачала,
	|	ГрафикОтпусков.ДатаОкончания,
	|	ГрафикОтпусков.ПричинаОтсутствия,
	|	СУММА(Календарь.КалендарныеДни) КАК КоличествоДней
	|ИЗ
	|	ГрафикОтпусков КАК ГрафикОтпусков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК Календарь
	|		ПО (Календарь.ДатаКалендаря МЕЖДУ ГрафикОтпусков.ДатаНачала И ГрафикОтпусков.ДатаОкончания)
	|			И ГрафикОтпусков.ПроизводственныйКалендарь = Календарь.AVT_ПроизводственныйКалендарь
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикОтпусков.Сотрудник,
	|	ГрафикОтпусков.Физлицо,
	|	ГрафикОтпусков.ДатаНачала,
	|	ГрафикОтпусков.ДатаОкончания,
	|	ГрафикОтпусков.ПричинаОтсутствия";
	
	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Результат = ОстаткиОтпусков.СведенияОбОтпускахСпискаСотрудников(РаботникиОрганизации, Ссылка);
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Строка = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник, ДатаОкончания", СтрокаРезультата.Сотрудник, СтрокаРезультата.ДатаОкончания));
		
		Если Строка.Количество() > 0 Тогда
			Строка[0].РабочийГодС	= СтрокаРезультата.РабочийГодС;
			Строка[0].РабочийГодПо	= СтрокаРезультата.РабочийГодПо;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // Автозаполнение()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("Т6а_от_5_1_2004",	"Форма Т-6а");
	СтруктураМакетов.Вставить("Т6_от_5_1_2004",		"Форма Т-6");
	СтруктураМакетов.Вставить("Отпуска",			"Отпуска");
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 01.06.2012 16:02 
	////СтруктураМакетов.Вставить("Авт_ПриказОПродленииОтпуска", "Приказ о продлении отпуска");
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.ОтпускаОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПроведениеРасчетов.ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент.Ссылка, Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//  Режим - строка, может принимать значения:
//			"ПоРеквизитамДокумента"
//			"ПоТабличнойЧастиДокумента"
//
// Возвращаемое значение:
//  Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечати2004(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	 Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
		
		Запрос.Текст = ФормированиеПечатныхФормЗК.ПолучитьТекстЗапросаПоОтветственнымЛицам(
			"ДатаДокумента",
			"ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
			|И СтруктурнаяЕдиница = &СтруктурнаяЕдиница");
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтпускаОрганизаций.Дата КАК ДатаДок,
		|	ОтпускаОрганизаций.Номер КАК НомерДок,
		|	ОтпускаОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ОтпускаОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ОтветственныеЛицаОрганизаций.Должность КАК ДолжностьРуководителя,
		|	ОтветственныеЛицаОрганизаций.НаименованиеОтветственногоЛица КАК ФИОРуководителя,
		|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо,
		|	ОтпускаОрганизаций.Организация.Префикс
		|ИЗ
		|	Документ.ОтпускаОрганизаций КАК ОтпускаОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОбОтветственномЛице КАК ОтветственныеЛицаОрганизаций
		|		ПО ОтпускаОрганизаций.Организация = ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница
		|ГДЕ
		|	ОтпускаОрганизаций.Ссылка = &ТекущийДокумент";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		//Запрос.Текст =
		//"ВЫБРАТЬ
		//|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка,
		//|	ОтпускаОрганизацийРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		//|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник КАК Сотрудник,
		//|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
		//|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Код,
		//|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Наименование,
		//|	ОтпускаОрганизацийРаботникиОрганизации.ОсвобождатьСтавку,
		//|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала,
		//|	ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания,
		//|	ОтпускаОрганизацийРаботникиОрганизации.ПричинаОтсутствия,
		//|	ОтпускаОрганизацийРаботникиОрганизации.ВидДополнительногоОтпуска,
		//|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодС,
		//|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодПо,
		//|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачалаДоп,
		//|	ОтпускаОрганизацийРаботникиОрганизации.Основание,
		//|	ОтпускаОрганизацийРаботникиОрганизации.НапомнитьПоЗавершении
		//|ПОМЕСТИТЬ ВТДанныеДокумента
		//|ИЗ
		//|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
		//|ГДЕ
		//|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &ТекущийДокумент
		//|	И (НЕ ОтпускаОрганизацийРаботникиОрганизации.Сторно)
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	НомерСтроки
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	СписокДат.НомерСтроки КАК НомерСтроки,
		//|	РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
		//|	РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
		//|	РаботникиОрганизации.ПодразделениеОрганизацииЗавершения.Наименование КАК ПодразделениеОрганизацииЗавершенияНаименование,
		//|	РаботникиОрганизации.ДолжностьЗавершения.Наименование КАК ДолжностьЗавершенияНаименование,
		//|	РаботникиОрганизации.ПериодЗавершения КАК ПериодЗавершения
		//|ПОМЕСТИТЬ ВТДанныеОРаботникахОрганизации
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		РаботникиВнутри.Сотрудник КАК Сотрудник,
		//|		МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения,
		//|		ОтпускаОрганизаций.НомерСтроки КАК НомерСтроки
		//|	ИЗ
		//|		РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		//|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ОтпускаОрганизаций
		//|			ПО РаботникиВнутри.Сотрудник = ОтпускаОрганизаций.Сотрудник
		//|				И РаботникиВнутри.Период <= ОтпускаОрганизаций.ДатаНачала
		//|	ГДЕ
		//|		РаботникиВнутри.Сотрудник В
		//|				(ВЫБРАТЬ
		//|					ОтпускаОрганизацииРаботники.Сотрудник
		//|				ИЗ
		//|					ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники)
		//|	
		//|	СГРУППИРОВАТЬ ПО
		//|		ОтпускаОрганизаций.НомерСтроки,
		//|		РаботникиВнутри.Сотрудник) КАК СписокДат
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		//|		ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
		//|			И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	НомерСтроки
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо,
		//|	ФИОФизЛицСрезПоследних.Фамилия,
		//|	ФИОФизЛицСрезПоследних.Имя,
		//|	ФИОФизЛицСрезПоследних.Отчество
		//|ПОМЕСТИТЬ ВТФИОФизЛиц
		//|ИЗ
		//|	РегистрСведений.ФИОФизЛиц.СрезПоследних(
		//|			&ДатаДокумента,
		//|			ФизЛицо В
		//|				(ВЫБРАТЬ
		//|					ОтпускаОрганизацииРаботники.ФизЛицо
		//|				ИЗ
		//|					ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники)) КАК ФИОФизЛицСрезПоследних
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	ФизЛицо
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		//|	СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни) КАК КалендарныеДни
		//|ПОМЕСТИТЬ ВТДниОсновногоОтпуска
		//|ИЗ
		//|	ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		//|		ПО (РегламентированныйПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
		//|			И (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаОрганизацииРаботники.ДатаНачала И ВЫБОР
		//|				КОГДА ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		//|					ТОГДА ОтпускаОрганизацииРаботники.ДатаОкончания
		//|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаОрганизацииРаботники.ДатаНачалаДоп, ДЕНЬ, -1)
		//|			КОНЕЦ)
		//|ГДЕ
		//|	ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ОтпускаОрганизацииРаботники.НомерСтроки
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	НомерСтроки
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		//|	СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни) КАК КалендарныеДни
		//|ПОМЕСТИТЬ ВТДниВсего
		//|ИЗ
		//|	ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		//|		ПО (РегламентированныйПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
		//|			И (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаОрганизацииРаботники.ДатаНачала И ОтпускаОрганизацииРаботники.ДатаОкончания)
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ОтпускаОрганизацииРаботники.НомерСтроки
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	НомерСтроки
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ОтпускаОрганизацииРаботники.СотрудникНаименование) КАК Работник,
		//|	ОтпускаОрганизацииРаботники.ФизЛицо.Пол,
		//|	ВЫБОР
		//|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		//|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		//|			ТОГДА ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииЗавершенияНаименование
		//|		ИНАЧЕ ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование
		//|	КОНЕЦ КАК ПодразделениеРаботника,
		//|	ВЫБОР
		//|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		//|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		//|			ТОГДА ДанныеОРаботникахОрганизации.ДолжностьЗавершенияНаименование
		//|		ИНАЧЕ ДанныеОРаботникахОрганизации.ДолжностьНаименование
		//|	КОНЕЦ КАК Должность,
		//|	ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		//|	ОтпускаОрганизацииРаботники.ДатаНачала КАК ДатаНачалаВсего,
		//|	ОтпускаОрганизацииРаботники.ДатаОкончания КАК ДатаОкончанияВсего,
		//|	ОтпускаОрганизацииРаботники.РабочийГодПо,
		//|	ОтпускаОрганизацииРаботники.РабочийГодС,
		//|	ОтпускаОрганизацииРаботники.ПричинаОтсутствия,
		//|	ОтпускаОрганизацииРаботники.Основание,
		//|	ВЫБОР
		//|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		//|			ТОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска.Наименование
		//|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебный)
		//|			ТОГДА ""Дополнительный отпуск в связи с обучением с сохранением среднего заработка работникам, совмещающим работу с обучением""
		//|		ИНАЧЕ ОтпускаОрганизацииРаботники.ПричинаОтсутствия
		//|	КОНЕЦ КАК ВидДопОтпуска,
		//|	ВЫБОР
		//|		КОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		//|			ТОГДА ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		//|		ИНАЧЕ ВЫБОР
		//|				КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		//|					ТОГДА """"
		//|				ИНАЧЕ ОтпускаОрганизацииРаботники.ДатаНачала
		//|			КОНЕЦ
		//|	КОНЕЦ КАК ДатаСДоп,
		//|	ВЫБОР
		//|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		//|				ИЛИ ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		//|			ТОГДА ОтпускаОрганизацииРаботники.ДатаОкончания
		//|		ИНАЧЕ """"
		//|	КОНЕЦ КАК ДатаПоДоп,
		//|	ВЫБОР
		//|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		//|			ТОГДА ВЫБОР
		//|					КОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		//|							ИЛИ ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		//|						ТОГДА ОтпускаОрганизацииРаботники.ДатаНачала
		//|					ИНАЧЕ ВЫБОР
		//|							КОГДА ОтпускаОрганизацииРаботники.ДатаНачала < ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		//|								ТОГДА ОтпускаОрганизацииРаботники.ДатаНачала
		//|							ИНАЧЕ """"
		//|						КОНЕЦ
		//|				КОНЕЦ
		//|		ИНАЧЕ """"
		//|	КОНЕЦ КАК ДатаНачала,
		//|	ВЫБОР
		//|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		//|			ТОГДА ВЫБОР
		//|					КОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		//|							ИЛИ ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		//|						ТОГДА ОтпускаОрганизацииРаботники.ДатаОкончания
		//|					ИНАЧЕ ВЫБОР
		//|							КОГДА ОтпускаОрганизацииРаботники.ДатаНачала < ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		//|								ТОГДА ДОБАВИТЬКДАТЕ(ОтпускаОрганизацииРаботники.ДатаНачалаДоп, ДЕНЬ, -1)
		//|							ИНАЧЕ """"
		//|						КОНЕЦ
		//|				КОНЕЦ
		//|		ИНАЧЕ """"
		//|	КОНЕЦ КАК ДатаОкончания,
		//|	ВЫБОР
		//|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		//|			ТОГДА РАЗНОСТЬДАТ(ОтпускаОрганизацииРаботники.ДатаНачала, ОтпускаОрганизацииРаботники.ДатаОкончания, ДЕНЬ) + 1
		//|		ИНАЧЕ ЕСТЬNULL(КалендарьДнейВсего.КалендарныеДни, 0)
		//|	КОНЕЦ КАК ПродолжительностьВсего,
		//|	ВЫБОР
		//|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		//|			ТОГДА 0
		//|		ИНАЧЕ ЕСТЬNULL(КалендарьОсновногоОтпуска.КалендарныеДни, 0)
		//|	КОНЕЦ КАК Продолжительность,
		//|	ОтпускаОрганизацииРаботники.СотрудникКод КАК ТабельныйНомер
		//|ИЗ
		//|	ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОРаботникахОрганизации КАК ДанныеОРаботникахОрганизации
		//|		ПО ОтпускаОрганизацииРаботники.НомерСтроки = ДанныеОРаботникахОрганизации.НомерСтроки
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниВсего КАК КалендарьДнейВсего
		//|		ПО ОтпускаОрганизацииРаботники.НомерСтроки = КалендарьДнейВсего.НомерСтроки
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниОсновногоОтпуска КАК КалендарьОсновногоОтпуска
		//|		ПО ОтпускаОрганизацииРаботники.НомерСтроки = КалендарьОсновногоОтпуска.НомерСтроки
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОФизЛиц КАК ФИОФизЛиц
		//|		ПО ОтпускаОрганизацииРаботники.ФизЛицо = ФИОФизЛиц.ФизЛицо
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	НомерСтроки";
         Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка,
		|	ОтпускаОрганизацийРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо,
		|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Код,
		|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник.Наименование,
		|	ОтпускаОрганизацийРаботникиОрганизации.ОсвобождатьСтавку,
		|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала,
		|	ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания,
		|	ОтпускаОрганизацийРаботникиОрганизации.ПричинаОтсутствия,
		|	ОтпускаОрганизацийРаботникиОрганизации.ВидДополнительногоОтпуска,
		|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодС,
		|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодПо,
		|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачалаДоп,
		|	ОтпускаОрганизацийРаботникиОрганизации.Основание,
		|	ОтпускаОрганизацийРаботникиОрганизации.НапомнитьПоЗавершении
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
		|ГДЕ
		|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &ТекущийДокумент
		|	И (НЕ ОтпускаОрганизацийРаботникиОрганизации.Сторно)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокДат.НомерСтроки КАК НомерСтроки,
		|	РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
		|	РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
		|	РаботникиОрганизации.ПодразделениеОрганизацииЗавершения.Наименование КАК ПодразделениеОрганизацииЗавершенияНаименование,
		|	РаботникиОрганизации.ДолжностьЗавершения.Наименование КАК ДолжностьЗавершенияНаименование,
		|	РаботникиОрганизации.ПериодЗавершения КАК ПериодЗавершения,
		|	РаботникиОрганизации.ГрафикРаботы.AVT_ПроизводственныйКалендарь КАК Календарь,
		|	РаботникиОрганизации.ГрафикРаботыЗавершения.AVT_ПроизводственныйКалендарь КАК КалендарьЗавершения
		|ПОМЕСТИТЬ ВТДанныеОРаботникахОрганизации
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиВнутри.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения,
		|		ОтпускаОрганизаций.НомерСтроки КАК НомерСтроки
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ОтпускаОрганизаций
		|			ПО РаботникиВнутри.Сотрудник = ОтпускаОрганизаций.Сотрудник
		|				И РаботникиВнутри.Период <= ОтпускаОрганизаций.ДатаНачала
		|	ГДЕ
		|		РаботникиВнутри.Сотрудник В
		|				(ВЫБРАТЬ
		|					ОтпускаОрганизацииРаботники.Сотрудник
		|				ИЗ
		|					ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОтпускаОрганизаций.НомерСтроки,
		|		РаботникиВнутри.Сотрудник) КАК СписокДат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
		|			И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	ОтпускаОрганизацииРаботники.ДатаНачала,
		|	ОтпускаОрганизацииРаботники.ДатаНачалаДоп,
		|	ОтпускаОрганизацииРаботники.ДатаОкончания,
		|	ОтпускаОрганизацииРаботники.ПричинаОтсутствия,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизации.КалендарьЗавершения
		|		ИНАЧЕ РаботникиОрганизации.Календарь
		|	КОНЕЦ КАК Календарь
		|ПОМЕСТИТЬ ВТСвязьОтпусковСКалендарями
		|ИЗ
		|	ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОРаботникахОрганизации КАК РаботникиОрганизации
		|		ПО ОтпускаОрганизацииРаботники.НомерСтроки = РаботникиОрганизации.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ПОМЕСТИТЬ ВТФИОФизЛиц
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|			&ДатаДокумента,
		|			ФизЛицо В
		|				(ВЫБРАТЬ
		|					ОтпускаОрганизацииРаботники.ФизЛицо
		|				ИЗ
		|					ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники)) КАК ФИОФизЛицСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни) КАК КалендарныеДни
		|ПОМЕСТИТЬ ВТДниОсновногоОтпуска
		|ИЗ
		|	ВТСвязьОтпусковСКалендарями КАК ОтпускаОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ПО (РегламентированныйПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
		|			И (РегламентированныйПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
		|			И ОтпускаОрганизацииРаботники.Календарь = РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь
		|			И (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаОрганизацииРаботники.ДатаНачала И ВЫБОР
		|				КОГДА ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА ОтпускаОрганизацииРаботники.ДатаОкончания
		|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ОтпускаОрганизацииРаботники.ДатаНачалаДоп, ДЕНЬ, -1)
		|			КОНЕЦ)
		|ГДЕ
		|	ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускаОрганизацииРаботники.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	СУММА(РегламентированныйПроизводственныйКалендарь.КалендарныеДни) КАК КалендарныеДни
		|ПОМЕСТИТЬ ВТДниВсего
		|ИЗ
		|	ВТСвязьОтпусковСКалендарями КАК ОтпускаОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|		ПО (РегламентированныйПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
		|			И (РегламентированныйПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
		|			И ОтпускаОрганизацииРаботники.Календарь = РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь
		|			И (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтпускаОрганизацииРаботники.ДатаНачала И ОтпускаОрганизацииРаботники.ДатаОкончания)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускаОрганизацииРаботники.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ОтпускаОрганизацииРаботники.СотрудникНаименование) КАК Работник,
		|	ОтпускаОрганизацииРаботники.ФизЛицо.Пол,
		|	ВЫБОР
		|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииЗавершенияНаименование
		|		ИНАЧЕ ДанныеОРаботникахОрганизации.ПодразделениеОрганизацииНаименование
		|	КОНЕЦ КАК ПодразделениеРаботника,
		|	ВЫБОР
		|		КОГДА ДанныеОРаботникахОрганизации.ПериодЗавершения <= ОтпускаОрганизацииРаботники.ДатаНачала
		|				И ДанныеОРаботникахОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ДанныеОРаботникахОрганизации.ДолжностьЗавершенияНаименование
		|		ИНАЧЕ ДанныеОРаботникахОрганизации.ДолжностьНаименование
		|	КОНЕЦ КАК Должность,
		|	ОтпускаОрганизацииРаботники.НомерСтроки КАК НомерСтроки,
		|	ОтпускаОрганизацииРаботники.ДатаНачала КАК ДатаНачалаВсего,
		|	ОтпускаОрганизацииРаботники.ДатаОкончания КАК ДатаОкончанияВсего,
		|	ОтпускаОрганизацииРаботники.РабочийГодПо,
		|	ОтпускаОрганизацииРаботники.РабочийГодС,
		|	ОтпускаОрганизацииРаботники.ПричинаОтсутствия,
		|	ОтпускаОрганизацииРаботники.Основание,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|			ТОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска.Наименование
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебный)
		|			ТОГДА ""Дополнительный отпуск в связи с обучением с сохранением среднего заработка работникам, совмещающим работу с обучением""
		|		ИНАЧЕ ОтпускаОрганизацииРаботники.ПричинаОтсутствия
		|	КОНЕЦ КАК ВидДопОтпуска,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|			ТОГДА ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|					ТОГДА """"
		|				ИНАЧЕ ОтпускаОрганизацииРаботники.ДатаНачала
		|			КОНЕЦ
		|	КОНЕЦ КАК ДатаСДоп,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|				ИЛИ ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|			ТОГДА ОтпускаОрганизацииРаботники.ДатаОкончания
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ДатаПоДоп,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|							ИЛИ ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ОтпускаОрганизацииРаботники.ДатаНачала
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ОтпускаОрганизацииРаботники.ДатаНачала < ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		|								ТОГДА ОтпускаОрганизацииРаботники.ДатаНачала
		|							ИНАЧЕ """"
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия = ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|			ТОГДА ВЫБОР
		|					КОГДА ОтпускаОрганизацииРаботники.ВидДополнительногоОтпуска = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|							ИЛИ ОтпускаОрганизацииРаботники.ДатаНачалаДоп = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ОтпускаОрганизацииРаботники.ДатаОкончания
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ОтпускаОрганизацииРаботники.ДатаНачала < ОтпускаОрганизацииРаботники.ДатаНачалаДоп
		|								ТОГДА ДОБАВИТЬКДАТЕ(ОтпускаОрганизацииРаботники.ДатаНачалаДоп, ДЕНЬ, -1)
		|							ИНАЧЕ """"
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|			ТОГДА РАЗНОСТЬДАТ(ОтпускаОрганизацииРаботники.ДатаНачала, ОтпускаОрганизацииРаботники.ДатаОкончания, ДЕНЬ) + 1
		|		ИНАЧЕ ЕСТЬNULL(КалендарьДнейВсего.КалендарныеДни, 0)
		|	КОНЕЦ КАК ПродолжительностьВсего,
		|	ВЫБОР
		|		КОГДА ОтпускаОрганизацииРаботники.ПричинаОтсутствия <> ЗНАЧЕНИЕ(Перечисление.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(КалендарьОсновногоОтпуска.КалендарныеДни, 0)
		|	КОНЕЦ КАК Продолжительность,
		|	ОтпускаОрганизацииРаботники.СотрудникКод КАК ТабельныйНомер
		|ИЗ
		|	ВТДанныеДокумента КАК ОтпускаОрганизацииРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОРаботникахОрганизации КАК ДанныеОРаботникахОрганизации
		|		ПО ОтпускаОрганизацииРаботники.НомерСтроки = ДанныеОРаботникахОрганизации.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниВсего КАК КалендарьДнейВсего
		|		ПО ОтпускаОрганизацииРаботники.НомерСтроки = КалендарьДнейВсего.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниОсновногоОтпуска КАК КалендарьОсновногоОтпуска
		|		ПО ОтпускаОрганизацииРаботники.НомерСтроки = КалендарьОсновногоОтпуска.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОФизЛиц КАК ФИОФизЛиц
		|		ПО ОтпускаОрганизацииРаботники.ФизЛицо = ФИОФизЛиц.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Функция формирует табличный документ с печатной формой "Т-6а",
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьТ6а_2004()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_Т6а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати2004("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати2004("ПоТабличнойЧастиДокумента").Выбрать();

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т6а_от_5_1_2004");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка"); // строка работника

	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапкиИПодвала.Следующий() Тогда 
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
 		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
	ВыведеноСтрок = 0;

	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		// Данные по работнику
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		РезультатСклонения = "";
		Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ВыборкаРаботники.Работник, 3,ВыборкаРаботники.ФизЛицоПол, РезультатСклонения) Тогда
			ОбластьМакета.Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		ОбластьМакета.Параметры.Продолжительность = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачала) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания), ВыборкаРаботники.Продолжительность, "");
		ОбластьМакета.Параметры.ПродолжительностьВсего = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачалаВсего) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончанияВсего), ВыборкаРаботники.ПродолжительностьВсего, "");
		ОбластьМакета.Параметры.ВидДопОтпуска = Строка(ВыборкаРаботники.ВидДопОтпуска) + ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаПоДоп), "; " + (ВыборкаРаботники.ПродолжительностьВсего - ВыборкаРаботники.Продолжительность), "");

		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;

		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ6а()

// Функция формирует табличный документ с печатной формой "Т-6",
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьТ6_2004()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтпускаОрганизации_Т6";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати2004("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати2004("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т6_от_5_1_2004");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
		
		ВыводитьДатуОзнакомленияСПриказом = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах");
		Если Не ВыводитьДатуОзнакомленияСПриказом Тогда
			ОбластьМакетаПодвал.Параметры.ДатаДок = ФормированиеПечатныхФормЗК.ПустаяДатаВПечатнойФорме();
		КонецЕсли;
	КонецЕсли;

	НомерФормы = 0;
	ПечататьПостфикс = ВыборкаРаботники.Количество() > 1;
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		Если ПечататьПостфикс Тогда
			НомерФормы = НомерФормы + 1;
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + НомерФормы
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		РезультатСклонения = "";
		Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ВыборкаРаботники.Работник, 3,ВыборкаРаботники.ФизЛицоПол, РезультатСклонения) Тогда
			ОбластьМакета.Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		ОбластьМакета.Параметры.Продолжительность = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачала) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания),ВыборкаРаботники.Продолжительность,"");
		ОбластьМакета.Параметры.ПродолжительностьВсего = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачалаВсего) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончанияВсего),ВыборкаРаботники.ПродолжительностьВсего,"");
		ОбластьМакета.Параметры.ПродолжительностьДоп = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаСДоп) И ЗначениеЗаполнено(ВыборкаРаботники.ДатаПоДоп),ВыборкаРаботники.ПродолжительностьВсего - ВыборкаРаботники.Продолжительность,"");
		ОбластьМакета.Параметры.ВидДопОтпуска = ?(ЗначениеЗаполнено(ВыборкаРаботники.ВидДопОтпуска),"" + ВыборкаРаботники.ВидДопОтпуска,"");
		//ОбластьМакета.Параметры.Работник = ОбщегоНазначенияЗК.
		
		ПустоеЧисло    = "       ";
		ПустыеМесяцГод = "                          г.";
		
		ПредставлениеДатыДок = Формат(ВыборкаРаботники.ДатаНачала, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаНачалаЧисло    = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачала), СокрЛП(Лев(ПредставлениеДатыДок,2)), "      ");
		ОбластьМакета.Параметры.ДатаНачалаМесяцГод = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачала), СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2)), "                     г.");
		
		ПредставлениеДатыДок = Формат(ВыборкаРаботники.ДатаОкончания, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаОкончанияЧисло    = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания), СокрЛП(Лев(ПредставлениеДатыДок,2)), "      ");
		ОбластьМакета.Параметры.ДатаОкончанияМесяцГод = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончания), СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2)), "                     г.");

		ПредставлениеДатыДок = Формат(ВыборкаРаботники.ДатаСДоп, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаСДопЧисло    = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаСДоп), СокрЛП(Лев(ПредставлениеДатыДок,2)), "      ");
		ОбластьМакета.Параметры.ДатаСДопМесяцГод = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаСДоп), СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2)), "                     г.");
		
		ПредставлениеДатыДок = Формат(ВыборкаРаботники.ДатаПоДоп, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаПоДопЧисло    = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаПоДоп), СокрЛП(Лев(ПредставлениеДатыДок,2)), "      ");
		ОбластьМакета.Параметры.ДатаПоДопМесяцГод = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаПоДоп), СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2)), "                     г.");

		ПредставлениеДатыДок = Формат(ВыборкаРаботники.ДатаНачалаВсего, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаНачалаВсегоЧисло    = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачалаВсего), СокрЛП(Лев(ПредставлениеДатыДок,2)), "      ");
		ОбластьМакета.Параметры.ДатаНачалаВсегоМесяцГод = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаНачалаВсего), СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2)), "                     г.");
		
		ПредставлениеДатыДок = Формат(ВыборкаРаботники.ДатаОкончанияВсего, "ДЛФ=DD");
		ОбластьМакета.Параметры.ДатаОкончанияВсегоЧисло    = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончанияВсего), СокрЛП(Лев(ПредставлениеДатыДок,2)), "      ");
		ОбластьМакета.Параметры.ДатаОкончанияВсегоМесяцГод = ?(ЗначениеЗаполнено(ВыборкаРаботники.ДатаОкончанияВсего), СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2)), "                     г.");
		
		ПредставлениеДатыДок = Формат(ВыборкаРаботники.РабочийГодС, "ДЛФ=DD");
		Если ЗначениеЗаполнено(ВыборкаРаботники.РабочийГодС) Тогда
			ОбластьМакета.Параметры.РабочийГодС    = """" +СокрЛП(Лев(ПредставлениеДатыДок,2)) + """  " + СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2));
		Иначе
			ОбластьМакета.Параметры.РабочийГодС    = """     ""               20   г." ;
		КонецЕсли; 
		
		ПредставлениеДатыДок = Формат(ВыборкаРаботники.РабочийГодПо, "ДЛФ=DD");
		Если ЗначениеЗаполнено(ВыборкаРаботники.РабочийГодПо) Тогда
			ОбластьМакета.Параметры.РабочийГодПо    = """" +СокрЛП(Лев(ПредставлениеДатыДок,2)) + """  " + СокрЛП(Прав(ПредставлениеДатыДок, СтрДлина(ПредставлениеДатыДок)-2));
		Иначе
			ОбластьМакета.Параметры.РабочийГодПо    = """     ""               20   г." ;
		КонецЕсли; 
	
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьТ6()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтпускаОрганизаций.Дата,
	|	ОтпускаОрганизаций.Организация,
	|	ВЫБОР
	|		КОГДА ОтпускаОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ОтпускаОрганизаций.Организация
	|		ИНАЧЕ ОтпускаОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ОтпускаОрганизаций.Ссылка
	|ИЗ
	|	Документ.ОтпускаОрганизаций КАК ОтпускаОрганизаций
	|ГДЕ
	|	ОтпускаОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник,
	|	ТЧРаботникиОрганизации.Сотрудник.Наименование,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботникиОрганизации.ДатаНачала,
	|	ТЧРаботникиОрганизации.ДатаОкончания,
	|	ТЧРаботникиОрганизации.ДатаНачалаДоп,
	|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении,
	|	ТЧРаботникиОрганизации.ОсвобождатьСтавку,
	|	ТЧРаботникиОрганизации.ВидДополнительногоОтпуска,
	|	ТЧРаботникиОрганизации.ПричинаОтсутствия,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
	|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ИмеющиесяСостояния.Состояние КАК КонфликтноеСостояние,
	|	ИмеющиесяСостояния.Регистратор КАК КонфликтныйДокумент,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(Работники.Период) КАК Период
	|		ИЗ
	|			Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|				ПО (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
	|					И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|			И (НЕ ТЧРаботникиОрганизации.Сторно)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДатыПоследнихДвиженийРаботников.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
	|			И ТЧРаботникиОрганизации.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
	|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботникиОрганизации.НомерСтроки <> ТЧРаботникиОрганизации2.НомерСтроки
	|					И ТЧРаботникиОрганизации.ДатаНачала <= ТЧРаботникиОрганизации2.ДатаНачала
	|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
	|					И (ВЫБОР
	|						КОГДА ТЧРаботникиОрганизации.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА ИСТИНА
	|						КОГДА ТЧРаботникиОрганизации.НапомнитьПоЗавершении
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ТЧРаботникиОрганизации.ДатаОкончания >= ТЧРаботникиОрганизации2.ДатаНачала
	|					КОНЕЦ)
	|					И ТЧРаботникиОрганизации.Сторно = ТЧРаботникиОрганизации2.Сторно
	|		ГДЕ
	|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|			И (НЕ ТЧРаботникиОрганизации.Сторно)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ИмеющиесяСостояния
	|		ПО ТЧРаботникиОрганизации.ДатаНачала = ИмеющиесяСостояния.Период
	|			И ТЧРаботникиОрганизации.Ссылка <> ИмеющиесяСостояния.Регистратор
	|			И ТЧРаботникиОрганизации.Сотрудник = ИмеющиесяСостояния.Сотрудник
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|	И (НЕ ТЧРаботникиОрганизации.Сторно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация, сотрудники которой отправляются в отпуск!"), Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка
//								  из результата запроса по работникам,
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке =
		"В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) + """ табл. части ""Сотрудники"": ";
	
	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаНачала
	НетДатыНачала = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
	Если НетДатыНачала Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала отпуска!", Отказ, Заголовок);
	КонецЕсли;
	
	// Причина отсутствия
	НетВидаОтпуска = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПричинаОтсутствия);
	Если НетВидаОтпуска Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид отпуска!", Отказ, Заголовок);
		
	Иначе
		ПричинаОтсутствия = ВыборкаПоСтрокамДокумента.ПричинаОтсутствия;
		Если ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный
			и ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты
			и ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускПоУходуЗаРебенком
			и ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебный 
			и ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускУчебныйНеоплачиваемый Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "вместо отпуска указана иная причина отсутствия!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НетСотрудника ИЛИ НетДатыНачала ИЛИ НетВидаОтпуска Тогда
		Возврат;
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) и ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала отпуска не может превышать дату окончания отпуска!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидДополнительногоОтпуска) 
		И ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаДоп)
		И (ВыборкаПоСтрокамДокумента.ДатаНачалаДоп > ВыборкаПоСтрокамДокумента.ДатаОкончания Или ВыборкаПоСтрокамДокумента.ДатаНачалаДоп < ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "неверно указана дата начала дополнительного отпуска!", Отказ, Заголовок);
	КонецЕсли;
		
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
		
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда	
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен!";
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
	// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "период отпуска пересекается с периодом строки " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: в регистре уже есть такое движение
	Если ВыборкаПоСтрокамДокумента.КонфликтноеСостояние <> NULL Тогда
		Расшифровки = Новый Массив;
		Расшифровки.Добавить(Новый Структура("Представление, Расшифровка", ВыборкаПоСтрокамДокумента.КонфликтныйДокумент, ВыборкаПоСтрокамДокумента.КонфликтныйДокумент));
		СтрокаСообщениеОбОшибке = "сотрудник уже переведен в состояние """ + ВыборкаПоСтрокамДокумента.КонфликтноеСостояние + """ документом ";
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок, , Расшифровки);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//	ВыборкаПоРаботникиОрганизации
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	Причина = ВыборкаПоРаботникиОрганизации.ПричинаОтсутствия;
	
	// движения по дате "с"
	Движение = Движения.СостояниеРаботниковОрганизаций.Добавить();

	// Свойства
	Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаНачала;

	// Измерения
	Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

	// Ресурсы
	// здесь принято следующее соглашение - на каждую причину отсутствия обязательно есть одноименное состояние работника
	/////Вадим 06.02.2013 14:16:50
	Если сокрЛП(ВыборкаПоРаботникиОрганизации.ВидДополнительногоОтпуска)="СП_1_Отпуск по беременности и родам" тогда
		Движение.Состояние					= Перечисления.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам;
	иначе	
    	Движение.Состояние					= Перечисления.СостоянияРаботникаОрганизации[Причина.Метаданные().ЗначенияПеречисления[Перечисления[Причина.Метаданные().Имя].Индекс(Причина)].Имя];
	Конецесли;
 	////ВадимКонец
	
	// Реквизиты
	Движение.ПервичныйДокумент			= ВыборкаПоШапкеДокумента.Ссылка;
	Движение.ВидДополнительногоОтпуска	= ВыборкаПоРаботникиОрганизации.ВидДополнительногоОтпуска;
	Движение.ДатаНачалаДоп				= ВыборкаПоРаботникиОрганизации.ДатаНачалаДоп;
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончания) Тогда
		
		// Движения по дате "по"
		Если  НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
			// Свойства
			Движение.ПериодЗавершения = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
			// Ресурсы
			Движение.СостояниеЗавершения = Перечисления.СостоянияРаботникаОрганизации.Работает;
			
		Иначе
			Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();

			// Свойства
			Движение.Период				= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
	
			// Измерения
			Движение.Сотрудник			= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ДатаИзменения		= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
			// здесь принято следующее соглашение - на каждую причину отсутствия обязательно есть одноименное планируемое изменение работника
			Движение.ПланируемоеСобытие	= Перечисления.НамеченныеСобытияПоПерсоналу[Причина.Метаданные().ЗначенияПеречисления[Перечисления[Причина.Метаданные().Имя].Индекс(Причина)].Имя];

			// Реквизиты
			Движение.ЗанимаемыхСтавок	= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
			Движение.ЗаниматьСтавку		= ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку Тогда
		Движение = Движения.СотрудникиОсвободившиеСтавкиВОрганизациях.Добавить();
		
		// Свойства
		Движение.Период				= ВыборкаПоРаботникиОрганизации.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник			= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		
		// Ресурсы
		Движение.ОсвобождатьСтавку	= Истина; 
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончания) и НЕ ВыборкаПоРаботникиОрганизации.НапомнитьПоЗавершении Тогда
			
			// Свойства
			Движение.ПериодЗавершения            = ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
			Движение.ОсвобождатьСтавкуЗавершения = ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Если документ перенесен - движения не делаем
	Если ДанныеПрошлойВерсии Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		Движения.СостояниеРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска	= Истина;
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда
			ВыборкаПоРаботникиОрганизации	= СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Отказ, Заголовок);
				
				Если НЕ Отказ Тогда
					
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);
					//Blik 290817 67118 н 
					ПроверитьДобавитьСтрокуВДвиженияПоРегиструНакопленияЗамещениеСотрудников(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);
					//Blik 290817 67118 к
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения" модуля объекта
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.Организация,
		|	СотрудникиОрганизаций.ОбособленноеПодразделение
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
		Запрос.УстановитьПараметр("Сотрудник",	Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Не Выборка.ОбособленноеПодразделение.Пустая() Тогда
				Организация = Выборка.ОбособленноеПодразделение;
			Иначе
				Организация = Выборка.Организация;
			КонецЕсли;
			
			НоваяСтрока = РаботникиОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ДатаНачала	= ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
		КонецЕсли;
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 04.08.2011 09:16 
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтпускаОрганизаций") Тогда
		ЗаполнитьНаОснованииОтпусковОрганизации(Основание);	
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}   		
	КонецЕсли;
	
	ОтпускаОрганизацийПереопределяемый.ОбработкаЗаполненияДополнительно(ЭтотОбъект, Основание);
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПриЗаписи(Отказ, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры

// Заполняет документ на основании отпусков организации.
//
// Параметры:
// 	Основание  - [ДокументСсылка.ОтпускаОрганизаций] - основание заполнения
//
Процедура ЗаполнитьНаОснованииОтпусковОрганизации(Основание)
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 04.08.2011 09:35 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник,
	|	ОтпускаОрганизацийРаботникиОрганизации.ФизЛицо,
	|	ОтпускаОрганизацийРаботникиОрганизации.ОсвобождатьСтавку,
	|	ДОБАВИТЬКДАТЕ(ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания, ДЕНЬ, 1) КАК ДатаНачала,
	|	ОтпускаОрганизацийРаботникиОрганизации.ПричинаОтсутствия,
	|	ОтпускаОрганизацийРаботникиОрганизации.ВидДополнительногоОтпуска,
	|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодС,
	|	ОтпускаОрганизацийРаботникиОрганизации.РабочийГодПо,
	|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачалаДоп,
	|	ОтпускаОрганизацийРаботникиОрганизации.Основание,
	|	ОтпускаОрганизацийРаботникиОрганизации.НапомнитьПоЗавершении,
	|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала КАК AVT_ДатаНачалаПервичногоОтпуска
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
	|ГДЕ
	|	(НЕ ОтпускаОрганизацийРаботникиОрганизации.Сторно)
	|	И ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	Организация           = Основание.Организация;
	AVT_ДокументОснование = Основание;
	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
КонецПроцедуры
  
Функция Авт_СформироватьПриказОПродленииОтпуска()
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 01.06.2012 16:31
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриказОПродленииОтпуска";
	Макет = ПолучитьМакет("Авт_ПриказОПродленииОтпуска");
	
	// Запрос по сотруднику
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтпускаОрганизацийРаботникиОрганизации.Сотрудник,
	|	ОтпускаОрганизацийРаботникиОрганизации.ДатаНачала,
	|	ОтпускаОрганизацийРаботникиОрганизации.ДатаОкончания,
	|	ОтпускаОрганизацийРаботникиОрганизации.КоличествоДней,
	|	ОтпускаОрганизацийРаботникиОрганизации.Основание
	|ПОМЕСТИТЬ ВТ_Отпуска
	|ИЗ
	|	Документ.ОтпускаОрганизаций.РаботникиОрганизации КАК ОтпускаОрганизацийРаботникиОрганизации
	|ГДЕ
	|	ОтпускаОрганизацийРаботникиОрганизации.Ссылка = &Ссылка
	|	И НЕ ОтпускаОрганизацийРаботникиОрганизации.Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Отпуска.Сотрудник,
	|	ВТ_Отпуска.ДатаНачала,
	|	ВТ_Отпуска.ДатаОкончания,
	|	ВТ_Отпуска.КоличествоДней,
	|	ВТ_Отпуска.Основание
	|ПОМЕСТИТЬ ВТ_ПродленныйОтпуск
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Отпуска.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(ВТ_Отпуска.ДатаНачала) КАК ДатаНачала
	|	ИЗ
	|		ВТ_Отпуска КАК ВТ_Отпуска
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_Отпуска.Сотрудник) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Отпуска КАК ВТ_Отпуска
	|		ПО ВложенныйЗапрос.Сотрудник = ВТ_Отпуска.Сотрудник
	|			И ВложенныйЗапрос.ДатаНачала = ВТ_Отпуска.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПродленныйОтпуск.Сотрудник,
	|	ВТ_ПродленныйОтпуск.ДатаНачала,
	|	ВТ_ПродленныйОтпуск.ДатаОкончания,
	|	ВТ_ПродленныйОтпуск.КоличествоДней,
	|	ВТ_ПродленныйОтпуск.Основание,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= ВТ_ПродленныйОтпуск.ДатаНачала
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизаций.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизаций.Должность
	|	КОНЕЦ КАК Должность,
	|	ВТ_ПродленныйОтпуск.Сотрудник.Физлицо.Наименование КАК ФИО,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизаций.ПериодЗавершения <= ВТ_ПродленныйОтпуск.ДатаНачала
	|				И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РаботникиОрганизаций.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизаций.Должность.Наименование
	|	КОНЕЦ КАК НаименованиеДолжности,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
	|			ИНАЧЕ """"
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|			ИНАЧЕ """"
	|		КОНЕЦ, ВТ_ПродленныйОтпуск.Сотрудник.Физлицо.Наименование) КАК ФИОСокр,
	|	ВТ_ПродленныйОтпуск.Сотрудник.Физлицо.Пол КАК Пол,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ПродленныйОтпуск.Сотрудник КАК Сотрудник,
	|		ВТ_ПродленныйОтпуск.ДатаНачала КАК ДатаНачала,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодКадровогоИзменения,
	|		РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|	ИЗ
	|		ВТ_ПродленныйОтпуск КАК ВТ_ПродленныйОтпуск
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО ВТ_ПродленныйОтпуск.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И ВТ_ПродленныйОтпуск.ДатаНачала >= РаботникиОрганизаций.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_ПродленныйОтпуск.Сотрудник,
	|		ВТ_ПродленныйОтпуск.ДатаНачала,
	|		РаботникиОрганизаций.ПодразделениеОрганизации) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ВложенныйЗапрос.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И ВложенныйЗапрос.ПериодКадровогоИзменения = РаботникиОрганизаций.Период
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПродленныйОтпуск КАК ВТ_ПродленныйОтпуск
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&АктуальнаяДата, ) КАК ФИОФизЛицСрезПоследних
	|			ПО ВТ_ПродленныйОтпуск.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ПО ВложенныйЗапрос.Сотрудник = ВТ_ПродленныйОтпуск.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&АктуальнаяДата, ) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ВложенныйЗапрос.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник";
	Запрос.УстановитьПараметр("ССылка",         Ссылка);
	Запрос.УстановитьПараметр("АктуальнаяДата", Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Запрос по ответственным лицам
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо.Наименование КАК НаименованиеФизлица,
	|	ОтветственныеЛицаСрезПоследних.Должность.Наименование КАК Должность,
	|	ОтветственныеЛицаСрезПоследних.ОтветственноеЛицо,
	|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК Физлицо,
	|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница,
	|	ФизическиеЛица.Комментарий
	|ПОМЕСТИТЬ ВТОтветственныеЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&АктуальнаяДата,
	|			СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
	|			ИНАЧЕ """"
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	|				ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	|			ИНАЧЕ """"
	|		КОНЕЦ, ОтветственныеЛицаСрезПоследних.НаименованиеФизлица) КАК НаименованиеОтветственногоЛица,
	|	ОтветственныеЛицаСрезПоследних.Должность,
	|	ОтветственныеЛицаСрезПоследних.ОтветственноеЛицо,
	|	ОтветственныеЛицаСрезПоследних.Физлицо,
	|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтветственныеЛицаСрезПоследних.Комментарий
	|ИЗ
	|	ВТОтветственныеЛица КАК ОтветственныеЛицаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&АктуальнаяДата,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						Ответственные.Физлицо
	|					ИЗ
	|						ВТОтветственныеЛица КАК Ответственные)) КАК ФИОФизЛицСрезПоследних
	|		ПО ОтветственныеЛицаСрезПоследних.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо";
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Организация);
	ВыборкаПоОтветственным = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.НаименованиеПолное КАК Организации,
	|	КонтактнаяИнформация.Поле4 КАК Город
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Объект = Организации.Ссылка)
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|ГДЕ
	|	Организации.Ссылка = &СтруктурнаяЕдиница";
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	Если ВыборкаОрганизация.Следующий() Тогда
		ОбластьЗаголовок.Параметры.ОрганизацияНаименованиеПолное = ВыборкаОрганизация.Организации;
		Если Прав(ВыборкаОрганизация.Город, 2) = " г" Тогда
			Город = Лев(ВыборкаОрганизация.Город, СтрДлина(ВыборкаОрганизация.Город) - 2);
		Иначе
			Город = ВыборкаОрганизация.Город;
		КонецЕсли;
		ОбластьЗаголовок.Параметры.Город = "г." + Город;
	КонецЕсли;
	ОбластьЗаголовок.Параметры.Дата  = Формат(Дата, "ДФ='dd MMMM yyyy'") + " г.";
	ОбластьЗаголовок.Параметры.Номер = Номер;
	
	Если ВыборкаПоОтветственным.Следующий() Тогда
		ОбластьЗаголовок.Параметры.Руководитель          = ПРГ_Обработки.ПолучитьПодписьРуководителя(Ссылка);//ВыборкаПоОтветственным.НаименованиеОтветственногоЛица;
		ОбластьЗаголовок.Параметры.РуководительДолжность = ПРГ_Обработки.ПолучитьДолжностьРуководителя(Ссылка);//ВыборкаПоОтветственным.Должность;
		//ОбластьЗаголовок.Параметры.Организация           = Организация;
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		
		ФИО_дательный = "";
		ФИОСокр_родительный = "";
		КалендарныеДни = "";
		
		УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Выборка.Сотрудник, 3, Выборка.Пол, ФИО_дательный);
		УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), Выборка.ФИОСокр, 2, Выборка.Пол, ФИОСокр_родительный);
		
		ЧислоДнейСтрока = Строка(Выборка.КоличествоДней);
		ПраваяЦифра = Прав(ЧислоДнейСтрока, 1);
		Если ПраваяЦифра = "1" И Прав(ЧислоДнейСтрока, 2) <> "11" Тогда
			КалендарныеДни = ЧислоДнейСтрока + " календарный день";
		ИначеЕсли ПраваяЦифра = "2" ИЛИ ПраваяЦифра = "3" ИЛИ ПраваяЦифра = "4" Тогда
			КалендарныеДни = ЧислоДнейСтрока + " календарных дня";
		Иначе
			КалендарныеДни = ЧислоДнейСтрока + " календарных дней";
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.Сотрудник      = ФИО_дательный;	
		ОбластьЗаголовок.Параметры.Должность      = Авт_ПросклонятьДолжность(НРег(Выборка.НаименованиеДолжности));
		ОбластьЗаголовок.Параметры.КалендарныеДни = КалендарныеДни;
		ОбластьЗаголовок.Параметры.ДатаНачала     = Формат(Выборка.ДатаНачала, "ДФ=dd.MM.yyyy");
		ОбластьЗаголовок.Параметры.ДатаОкончания  = Формат(Выборка.ДатаОкончания, "ДФ=dd.MM.yyyy");
		ОбластьЗаголовок.Параметры.СотрудникФИО_Р = ФИОСокр_родительный;
		ОбластьЗаголовок.Параметры.СотрудникФИО   = Выборка.ФИОСокр;
		ОбластьЗаголовок.Параметры.Подразделение   = ПРГ_Обработки.получитьСтрокуСтруктурыПодразделения(Выборка.ПодразделениеОрганизации);
		Если Не ПустаяСтрока(Выборка.Основание) Тогда
			ОбластьЗаголовок.Параметры.Основание = ", " + Выборка.Основание;
		КонецЕсли;
		ОбластьЗаголовок.Параметры.Ознокомлен     = ?(Выборка.Пол=Перечисления.ПолФизическихЛиц.Мужской, "ознакомлен", "ознакомлена");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьЗаголовок);
	
	Возврат ТабДокумент;
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
КонецФункции
//Blik 290817 67118 н 
Процедура ПроверитьДобавитьСтрокуВДвиженияПоРегиструНакопленияЗамещениеСотрудников(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)
	Если ВыборкаПоРаботникиОрганизации.ОсвобождатьСтавку  Тогда
		//получим данные по ше должности и подразделению
		Формируем = Истина;
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
		|	РаботникиОрганизацийСрезПоследних.Должность,
		|	РаботникиОрганизацийСрезПоследних.AVTШтатноеРасписание
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДок, ) КАК РаботникиОрганизацийСрезПоследних
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник = &Сотрудник";
		Запрос.УстановитьПараметр("ДатаДок",	ВыборкаПоРаботникиОрганизации.ДатаНачала);
		Запрос.УстановитьПараметр("Сотрудник",	ВыборкаПоРаботникиОрганизации.Сотрудник);
		
		
		РезШЕ = Запрос.Выполнить().Выбрать();
		Если РезШЕ.Следующий() тогда
			Подразделение = РезШЕ.ПодразделениеОрганизации;
			Должность = РезШЕ.Должность;
			ШЕ = РезШЕ.AVTШтатноеРасписание;
		Иначе
			Формируем = Ложь;
			Сообщить("Недостаточно данных для формирования движений по замещению!");
		КонецЕсли;
		Если Формируем Тогда
			//добавим движение расход и приход по ше, если был приход  ранее
			Запрос = Новый Запрос;
			
			// Установим параметры запроса
			Запрос.УстановитьПараметр("ДатаУвольнения",		        ВыборкаПоРаботникиОрганизации.ДатаНачала);
			Запрос.УстановитьПараметр("ПодразделениеОрганизации",	Подразделение);
			Запрос.УстановитьПараметр("Должность",	                Должность);
			Запрос.УстановитьПараметр("AVTШтатноеРасписание",	    ШЕ);
			
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПРГ_ЗамещениеСотрудниковОстатки.ПодразделениеОрганизации,
			|	ПРГ_ЗамещениеСотрудниковОстатки.Должность,
			|	ПРГ_ЗамещениеСотрудниковОстатки.AVTШтатноеРасписание,
			|	ПРГ_ЗамещениеСотрудниковОстатки.КоличествоСтавокОстаток,
			|	ПРГ_ЗамещениеСотрудников.ТекстЗамещения,
			|	ПРГ_ЗамещениеСотрудников.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ПРГ_ЗамещениеСотрудников.Остатки(&ДатаУвольнения, ) КАК ПРГ_ЗамещениеСотрудниковОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПРГ_ЗамещениеСотрудников КАК ПРГ_ЗамещениеСотрудников
			|		ПО ПРГ_ЗамещениеСотрудниковОстатки.AVTШтатноеРасписание = ПРГ_ЗамещениеСотрудников.AVTШтатноеРасписание
			|			И ПРГ_ЗамещениеСотрудниковОстатки.ПодразделениеОрганизации = ПРГ_ЗамещениеСотрудников.ПодразделениеОрганизации
			|			И ПРГ_ЗамещениеСотрудниковОстатки.Должность = ПРГ_ЗамещениеСотрудников.Должность
			|ГДЕ
			|	ПРГ_ЗамещениеСотрудниковОстатки.ПодразделениеОрганизации = &ПодразделениеОрганизации
			|	И ПРГ_ЗамещениеСотрудниковОстатки.Должность = &Должность
			|	И ПРГ_ЗамещениеСотрудниковОстатки.AVTШтатноеРасписание = &AVTШтатноеРасписание
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				Если Результат.КоличествоСтавокОстаток > 0 тогда
					//расход на дату начала отпуска
					Движение = Движения.ПРГ_ЗамещениеСотрудников.Добавить();
					
					// Свойства
					Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаНачала;
					Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
					
					// Измерения
					Движение.ПодразделениеОрганизации	= Подразделение;
					Движение.Должность					= Должность;
					Движение.AVTШтатноеРасписание		= ШЕ;
					
					// Ресурсы
					Движение.КоличествоСтавок			= Результат.КоличествоСтавокОстаток;
					
					// Реквизиты
					Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
					Движение.ТекстЗамещения				= "";
					
					//приход на завершение отпуска
					// ЗанятыеШтатныеЕдиницыОрганизаций";
					Движение = Движения.ПРГ_ЗамещениеСотрудников.Добавить();
					
					// Свойства
					Движение.Период							= ВыборкаПоРаботникиОрганизации.ДатаОкончания + мДлинаСуток;
					Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
					
					// Измерения
					Движение.ПодразделениеОрганизации		= Подразделение;
					Движение.Должность						= Должность; 
					Движение.AVTШтатноеРасписание			= ШЕ;
					
					// Ресурсы
					Движение.КоличествоСтавок				= 1;
					
					// Реквизиты
					Движение.Сотрудник						= ВыборкаПоРаботникиОрганизации.Сотрудник;
					Движение.ТекстЗамещения					= Результат.ТекстЗамещения;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 
//Blik 290817 67118 к

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
/////автоматизация

Функция Авт_ПросклонятьДолжность(Знач Должность)
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 04.06.2012 11:57 
	ДолжностьВПадеже = "";
	
	Пока Истина Цикл
		ПервоеСлово = ОбщегоНазначения.ВыделитьСлово(Должность);
		Окончание   = Прав(ПервоеСлово, 2);
		
		Если Окончание = "ий" Тогда
			Текст = Лев(ПервоеСлово, СтрДлина(ПервоеСлово)-2) + "ему";
		ИначеЕсли Окончание = "ый" ИЛИ Окончание = "ой" ИЛИ Окончание = "ая" ИЛИ Окончание = "яя" ИЛИ Окончание = "ья" Тогда
			// это прилагательное
			Текст = "";
			УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ПервоеСлово, 3, , Текст);
		Иначе
			Прервать;
		КонецЕсли;
		ДолжностьВПадеже = ДолжностьВПадеже + " " + Текст;
		
	КонецЦикла;
	
	Текст = "";
	УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ПервоеСлово, 3, , Текст);
	ДолжностьВПадеже = ДолжностьВПадеже + " " + Текст;
	ДолжностьВПадеже = ДолжностьВПадеже + " " + Должность;
	
	Возврат ДолжностьВПадеже;

	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

мВосстанавливатьДвижения = Ложь;
