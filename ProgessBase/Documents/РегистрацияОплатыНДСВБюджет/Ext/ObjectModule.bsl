Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ АВТОЗАПОЛНЕНИЯ СТРОК ДОКУМЕНТА

// Процедура вызывается при нажатии на кнопку "Запонить" в диалоге документа
// Реализует алгоритм автоматического заполнения документа.
//
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "", ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ОшибкаЗаполнения = Истина;
			СтрокаСообщения = " перед заполнением требуется отменить проведение документа";
			Если Сообщать Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
			КонецЕсли; 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьПоДоговорамНалоговогоАгента();
	ЗаполнитьТабличнуюЧастьДляСобственногоПотребления();
	
	Если Не (ОплатаПоДоговорамНалоговогоАгента.Количество() > 0 
		или ОплатаДляСобственногоПотребления.Количество() >0
        ) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС+" - не обнаружен НДС к вычету, требующий оплаты в бюджет"
	КонецЕсли;	

   Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не заполнен:" + СтрокаСообщения, , Строка(Ссылка));
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьДокумент()

// Заполняет табличную часть НДС по договорам налогового агента
//
Процедура ЗаполнитьТабличнуюЧастьПоДоговорамНалоговогоАгента(ОтменитьПроведение = Ложь) Экспорт

	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОплатаПоДоговорамНалоговогоАгента.Очистить();
	
	Результат = ПолучитьОстаткиНДСРасчетыСБюджетом();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока = ОплатаПоДоговорамНалоговогоАгента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат)
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличную часть НДС по собственному потреблению
//
Процедура ЗаполнитьТабличнуюЧастьДляСобственногоПотребления(ОтменитьПроведение = Ложь) Экспорт
 
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОплатаДляСобственногоПотребления.Очистить();
	
	Результат = ПолучитьОстаткиНДСРасчетыСБюджетом(Истина);
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока = ОплатаДляСобственногоПотребления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат)
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает выборку из регистра НДСРасчетыСПоставщиками по расчетам с бюджетом
//
// Параметры
//  ПоДоговорамНалоговогоАгента - если Истина, то выбираются расчеты по агентским договорам
//
Функция ПолучитьОстаткиНДСРасчетыСБюджетом(ОтбиратьСМРХозспособом = Ложь)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтбиратьСМРХозспособом", ОтбиратьСМРХозспособом);
	Запрос.УстановитьПараметр("Дата", Новый граница(КонецДня(Дата),ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСУчетРаспределенныхОплатПоставщикамОстатки.СчетФактура,
	               |	СУММА(НДСУчетРаспределенныхОплатПоставщикамОстатки.РаспределеннаяСуммаОстаток) КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.НДСУчетРаспределенныхОплатПоставщикам.Остатки(
	               |			&Дата,
	               |			Организация = &Организация
	               |				И ДокументОплаты = НЕОПРЕДЕЛЕНО
	               |				И РасчетыСБюджетом = ИСТИНА
	               |				И ВЫБОР
	               |					КОГДА СчетФактура ССЫЛКА Документ.НачислениеНДСпоСМРхозспособом
	               |						ТОГДА &ОтбиратьСМРХозспособом
	               |					ИНАЧЕ ВЫБОР
	               |							КОГДА &ОтбиратьСМРХозспособом
	               |								ТОГДА ЛОЖЬ
	               |							ИНАЧЕ ИСТИНА
	               |						КОНЕЦ
	               |				КОНЕЦ) КАК НДСУчетРаспределенныхОплатПоставщикамОстатки
	               |ГДЕ
	               |	НДСУчетРаспределенныхОплатПоставщикамОстатки.РаспределеннаяСуммаОстаток > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСУчетРаспределенныхОплатПоставщикамОстатки.СчетФактура";
				   
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По результату запроса по шапке документа и табличным частям формирует движения по регистрам.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДоговорамНалоговогоАгента, ТаблицаДляСобственногоПотребления, Отказ, Заголовок)
	
	ДвиженияПоРегиструНДСУчетРаспределенныхОплатПоставщикам(СтруктураШапкиДокумента, ТаблицаПоДоговорамНалоговогоАгента, Отказ, Заголовок);
		
	ДвиженияПоРегиструНДСУчетРаспределенныхОплатПоставщикам(СтруктураШапкиДокумента, ТаблицаДляСобственногоПотребления, Отказ, Заголовок);
	
КонецПроцедуры

// Движения по регистру НДСРасчетыСПоставщиками
//
Процедура ДвиженияПоРегиструНДСУчетРаспределенныхОплатПоставщикам(СтруктураШапкиДокумента, ТаблицаПоДоговорам, Отказ, Заголовок)
	
	Если Отказ Или (ТаблицаПоДоговорам.Количество() = 0) Тогда
		Возврат;		
	КонецЕсли;
	
	ТаблицаДвиженийПоДоговорам = ТаблицаПоДоговорам.Скопировать();
	
	Движения_НДСУчетРаспределенныхОплатПоставщикам = Движения.НДСУчетРаспределенныхОплатПоставщикам;
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Движения_НДСУчетРаспределенныхОплатПоставщикам.ВыгрузитьКолонки();
	
	// Расход по существующим записям в регистре
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийПоДоговорам, ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам);
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.ЗаполнитьЗначения(Неопределено, "ДокументОплаты");
	
	Движения_НДСУчетРаспределенныхОплатПоставщикам.мПериод = Дата;
	Движения_НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
	Движения_НДСУчетРаспределенныхОплатПоставщикам.ВыполнитьРасход();
	
	Движения_НДСУчетРаспределенныхОплатПоставщикам = Движения.НДСУчетРаспределенныхОплатПоставщикам;
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Движения_НДСУчетРаспределенныхОплатПоставщикам.ВыгрузитьКолонки();
	
	// Приход по документам оплаты
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийПоДоговорам, ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам);
	
	Движения_НДСУчетРаспределенныхОплатПоставщикам.мПериод = Дата;
	Движения_НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
	Движения_НДСУчетРаспределенныхОплатПоставщикам.ВыполнитьПриход();
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
Функция ПодготовитьТаблицуПоДоговорамНалоговогоАгента(РезультатЗапросаПоДоговорамНалоговогоАгента, СтруктураШапкиДокумента)

	ТаблицаПоДоговорамНалоговогоАгента = РезультатЗапросаПоДоговорамНалоговогоАгента.Выгрузить();
	
	ТаблицаПоДоговорамНалоговогоАгента.Колонки.Добавить("РасчетыСБюджетом", Новый ОписаниеТипов("Булево"));
	ТаблицаПоДоговорамНалоговогоАгента.ЗаполнитьЗначения(Истина, "РасчетыСбюджетом");
	
	Возврат ТаблицаПоДоговорамНалоговогоАгента;

КонецФункции // ПодготовитьТаблицуПоДоговорамНалоговогоАгента()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
Функция ПодготовитьТаблицуДляСобственногоПотребления(РезультатЗапросаДляСобственногоПотребления, СтруктураШапкиДокумента)

	ТаблицаДляСобственногоПотребления = РезультатЗапросаДляСобственногоПотребления.Выгрузить();
	
	ТаблицаДляСобственногоПотребления.Колонки.Добавить("РасчетыСБюджетом", Новый ОписаниеТипов("Булево"));
	ТаблицаДляСобственногоПотребления.ЗаполнитьЗначения(Истина, "РасчетыСбюджетом");
	
	Возврат ТаблицаДляСобственногоПотребления;

КонецФункции // ПодготовитьТаблицуПоДоговорамНалоговогоАгента()

// Проверяет правильность заполнения строк табличной части.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДоговорамНалоговогоАгента(СтруктураШапкиДокумента, ТаблицаПоДоговорамНалоговогоАгента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СчетФактура");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаПоДоговорамНалоговогоАгента", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщения = "Не заполнен документ оплаты.";

	Для каждого СтрокаТаблицы из ТаблицаПоДоговорамНалоговогоАгента Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""По договорам налогового агента"" : ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщения,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДляСобственногоПотребления(СтруктураШапкиДокумента, ТаблицаДляСобственногоПотребления, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СчетФактура");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаДляСобственногоПотребления", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщения = "Не заполнен документ оплаты.";

	Для каждого СтрокаТаблицы из ТаблицаДляСобственногоПотребления Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Для собственного потребления"" : ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщения,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЦикла; 
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличных частей.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",			"Ссылка.Организация");
	СтруктураПолей.Вставить("СчетФактура",			"СчетФактура");
	СтруктураПолей.Вставить("Документ",				"СчетФактура");
	СтруктураПолей.Вставить("ДокументОплаты",		"ДокументОплаты");
	СтруктураПолей.Вставить("Сумма",				"Сумма");
	СтруктураПолей.Вставить("РаспределеннаяСумма",	"Сумма");
	
	РезультатЗапросаПоДоговорамНалоговогоАгента = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаПоДоговорамНалоговогоАгента", СтруктураПолей);
	
	РезультатЗапросаДляСобственногоПотребления = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаДляСобственногоПотребления", СтруктураПолей);

	ТаблицаПоДоговорамНалоговогоАгента = ПодготовитьТаблицуПоДоговорамНалоговогоАгента(РезультатЗапросаПоДоговорамНалоговогоАгента, СтруктураШапкиДокумента);
	ТаблицаДляСобственногоПотребления = ПодготовитьТаблицуДляСобственногоПотребления(РезультатЗапросаДляСобственногоПотребления, СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТабличнойЧастиПоДоговорамНалоговогоАгента(СтруктураШапкиДокумента,ТаблицаПоДоговорамНалоговогоАгента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиДляСобственногоПотребления(СтруктураШапкиДокумента,ТаблицаДляСобственногоПотребления, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДоговорамНалоговогоАгента, ТаблицаДляСобственногоПотребления, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью






