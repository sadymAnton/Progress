Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;
Перем УчетнаяПолитикаРегл;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьВозвратаОтПокупателя()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Контрагент,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &ТекущийДокумент
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Номенклатура,
	|	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателя.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	ВозвратТоваровОтПокупателя.Номенклатура.Код КАК Код,
	|	ВозвратТоваровОтПокупателя.Номенклатура.Артикул КАК Артикул,
	|	ВозвратТоваровОтПокупателя.Количество,
	|	ВозвратТоваровОтПокупателя.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВозвратТоваровОтПокупателя.Цена,
	|	ВозвратТоваровОтПокупателя.Сумма,
	|	ВозвратТоваровОтПокупателя.СуммаНДС,
	|	ВозвратТоваровОтПокупателя.ПроцентСкидкиНаценки КАК Скидка,
	|	ВозвратТоваровОтПокупателя.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВозвратТоваровОтПокупателя.СерияНоменклатуры КАК Серия,
	|	ВозвратТоваровОтПокупателя.НомерСтроки КАК НомерСтроки,
	|	0 КАК Метка,
	|	ВозвратТоваровОтПокупателя.ДокументПартии
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Номенклатура,
	|	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателя.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	ВозвратТоваровОтПокупателя.Номенклатура.Код,
	|	ВозвратТоваровОтПокупателя.Номенклатура.Артикул,
	|	ВозвратТоваровОтПокупателя.Количество,
	|	ВозвратТоваровОтПокупателя.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	ВозвратТоваровОтПокупателя.Цена,
	|	ВозвратТоваровОтПокупателя.Сумма,
	|	0,
	|	0,
	|	NULL,
	|	NULL,
	|	ВозвратТоваровОтПокупателя.НомерСтроки,
	|	2,
	|	NULL
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Метка,
	|	НомерСтроки";

	ЗапросТовары = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровОтПокупателя_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Возврат от покупателя");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	ВыборкаСтрокТовары = ЗапросТовары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если ВыборкаСтрокТовары.Скидка <> 0 Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера             = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов              = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных             = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок             = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы              = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	ОбластьОснованиеВозврата  = Макет.ПолучитьОбласть("ШапкаТаблицы|ОснованиеВозврата");
	

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);
	ТабДокумент.Присоединить(ОбластьОснованиеВозврата);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		                                    Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		                                    Макет.Область("СуммаБезСкидки").ШиринаКолонки +
		                                    Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера             = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов              = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных             = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок             = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы              = Макет.ПолучитьОбласть("Строка|Сумма");
	ОбластьОснованиеВозврата  = Макет.ПолучитьОбласть("Строка|ОснованиеВозврата");

	НомПП    = 0;
	Сумма    = 0;
	СуммаНДС = 0;
	СуммаНП  = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	ВыборкаСтрокТовары = ЗапросТовары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		НомПП                               = НомПП + 1;
		ОбластьНомера.Параметры.НомерСтроки = НомПП;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар) + 
		                                ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары) + 
		                                ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Скидка);

		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

		Если ТипЗнч(ВыборкаСтрокТовары.ДокументПартии) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ОбластьОснованиеВозврата.Параметры.ОснованиеВозврата            = ВыборкаСтрокТовары.ДокументПартии;
			ОбластьОснованиеВозврата.Параметры.ОснованиеВозвратаРасшифровка = ВыборкаСтрокТовары.ДокументПартии;
		Иначе	
			ОбластьОснованиеВозврата.Параметры.ОснованиеВозвратаРасшифровка = ДоговорКонтрагента;													   
			ОбластьОснованиеВозврата.Параметры.ОснованиеВозврата = СокрЛП(ДоговорКонтрагента.Наименование) + 
			                                                       ?(НЕ ЗначениеЗаполнено(ДоговорКонтрагента.Номер), "", " №" + ДоговорКонтрагента.Номер) +
																   ?(НЕ ЗначениеЗаполнено(ДоговорКонтрагента.Дата), "", " от " + Формат(ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy"));
		КонецЕсли;	
		
		ТабДокумент.Присоединить(ОбластьОснованиеВозврата);
		
	КонецЦикла;

	// Вывести Итого
	ОбластьНомера             = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов              = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных             = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок             = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы              = Макет.ПолучитьОбласть("Итого|Сумма");
	ОбластьОснованиеВозврата  = Макет.ПолучитьОбласть("Итого|ОснованиеВозврата");
	

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);
	ТабДокумент.Присоединить(ОбластьОснованиеВозврата);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	// Вывести Сумму прописью
	СуммаКПрописи                          = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + НомПП + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьВозвратаОтПокупателя()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Накладная" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьВозвратаОтПокупателя();
		
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
		
	ИначеЕсли ИмяМакета = "Бланк" Тогда
		ТабДокумент = ПечатьБланк(НаПринтер);
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	Иначе
		//Формы М15 печатаются из модуля менеджера
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		ИменаМакетов = ИмяМакета;
		Если НЕ ПустаяСтрока(ИмяМакета) Тогда
			Для Итератор = 1 По КоличествоЭкземпляров - 1 Цикл
				ИменаМакетов = ИменаМакетов + "," + Сред(ИмяМакета, 1, Найти(ИмяМакета + ",", ",") - 1);
			КонецЦикла;
		КонецЕсли;
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ВозвратТоваровОтПокупателя", ИменаМакетов, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ВозвратТоваровОтПокупателя", ИменаМакетов, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		
		Возврат;	
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура("Накладная","Возврат от покупателя");
	СтруктПечатныхФорм.Вставить("Бланк", "Бланк товарного наполнения");
	СтруктПечатныхФорм.Вставить("СерийныеНомера","Список серийных номеров");
	//{06.07.2016 Островерхий заявка №53363 
	СтруктПечатныхФорм.Вставить("М15ЗалоговаяСтоимость", "М-15 (по залоговой стоимости)"); 
	//06.07.2016 Островерхий} 

	Возврат СтруктПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОрдеруУпр(ДокументОснование, ТабличнаяЧасть) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Если ТабличнаяЧасть = ВозвратнаяТара Тогда
		ИмяТабличнойЧасти = "ВозвратнаяТара";
	Иначе
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДокТовары.НомерСтроки)												КАК НомерСтроки,
	|	ДокТовары.Номенклатура														КАК Номенклатура,
	|	ДокТовары.Номенклатура.ЕдиницаХраненияОстатков								КАК ЕдиницаХранения,
	|	ДокТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент					КАК КоэффициентЕдиницыХранения,
	|	СУММА(ДокТовары.Количество)													КАК КоличествоПоДокументу,
	|	NULL																		КАК ЦенаВРознице, " + 
	?(ТабличнаяЧасть = Товары, "
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры, ", "") + "
	|	МАКСИМУМ("+
	?(ТабличнаяЧасть = Товары, "
	|		ДокТовары.ЕдиницаИзмерения ","
	|		Остатки.Номенклатура.ЕдиницаХраненияОстатков ")+")						КАК ЕдиницаИзмерения,
	|	МАКСИМУМ("+
	?(ТабличнаяЧасть = Товары, "
	|		ДокТовары.ЕдиницаИзмерения.Коэффициент ","
	|		Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ")+")			КАК Коэффициент,        
	|	СУММА(ДокТовары.Количество" +
	?(ТабличнаяЧасть = Товары, " * ДокТовары.Коэффициент 
	|	  / ДокТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент", "") + ")	КАК КоличествоПоСерии, 
	|	МАКСИМУМ(Остатки.КоличествоОстаток)											КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары." + ИмяТабличнойЧасти + " КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура" + 
	?(ТабличнаяЧасть = Товары, "
	| И ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры", "") + " 
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура" +
	?(ТабличнаяЧасть = Товары, ",
	|   ДокТовары.ЕдиницаИзмерения,
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", Метаданные(), ИмяТабличнойЧасти);
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", Метаданные(), ИмяТабличнойЧасти);	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии)
			                                                  * Выборка.КоэффициентЕдиницыХранения / Выборка.Коэффициент;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		Иначе

			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

			СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество   = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);

			ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ЭтотОбъект, , мВалютаРегламентированногоУчета);
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		КонецЕсли;

		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

//  Возвращает текст выборки дополнительных регл. полей для подстановки в запрос  
//
Процедура ПолучитьДополнительныеПоляДляЗаполненияТоваровПоОснованиюРегл(ДополнительныеПоляЗапросаРегл)

	ДополнительныеПоляЗапросаРегл = ",
	|	Док.СчетУчетаБУ,
	|	Док.СчетУчетаНУ,
	|	Док.ПринятыеСчетУчетаБУ,
	|	Док.ПринятыеСчетУчетаНУ,
	|	Док.СчетДоходовБУ,
	|	Док.СчетДоходовНУ,
	|	Док.СубконтоБУ,
	|	Док.СубконтоНУ,
	|   Док.СчетРасходовБУ,
	|   Док.СчетРасходовНУ,
	|   Док.ПереданныеПринятыеБУ,
	|   Док.ПереданныеПринятыеНУ,
	|   Док.ПереданныеСобственныеБУ,
	|   Док.ПереданныеСобственныеНУ
	|";

КонецПроцедуры // ПолучитьДополнительныеПоляДляЗаполненияТоваровПоОснованиюРегл()

// Заполняет регл. реквизиты строки табличной части
//
Процедура ЗаполнитьСтрокуТоварыПоОснованиюРегл(СтрокаТабличнойЧасти, Выборка)

	СтрокаТабличнойЧасти.СчетУчетаБУ         = Выборка.СчетУчетаБУ;
	СтрокаТабличнойЧасти.СчетУчетаНУ         = Выборка.СчетУчетаНУ;
	СтрокаТабличнойЧасти.ПринятыеСчетУчетаБУ = Выборка.ПринятыеСчетУчетаБУ;
	СтрокаТабличнойЧасти.ПринятыеСчетУчетаНУ = Выборка.ПринятыеСчетУчетаНУ;
	СтрокаТабличнойЧасти.СчетДоходовБУ       = Выборка.СчетДоходовБУ;
	СтрокаТабличнойЧасти.СчетДоходовНУ       = Выборка.СчетДоходовНУ;
	СтрокаТабличнойЧасти.СчетРасходовБУ      = Выборка.СчетРасходовБУ;
	СтрокаТабличнойЧасти.СчетРасходовНУ      = Выборка.СчетРасходовНУ;
	СтрокаТабличнойЧасти.СубконтоБУ          = Выборка.СубконтоБУ;
	СтрокаТабличнойЧасти.СубконтоНУ          = Выборка.СубконтоНУ;
    СтрокаТабличнойЧасти.ПереданныеПринятыеБУ      = Выборка.ПереданныеПринятыеБУ;
	СтрокаТабличнойЧасти.ПереданныеПринятыеНУ      = Выборка.ПереданныеПринятыеНУ;
	СтрокаТабличнойЧасти.ПереданныеСобственныеБУ   = Выборка.ПереданныеСобственныеБУ;
	СтрокаТабличнойЧасти.ПереданныеСобственныеНУ   = Выборка.ПереданныеСобственныеНУ;

КонецПроцедуры // ЗаполнитьСтрокуТоварыПоОснованиюРегл()

// Процедура выполняет заполнение табличной части Товары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	ТипДокументаОснования = ТипЗнч(ДокументОснование);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование"  , ДокументОснование);
	Запрос.УстановитьПараметр("Качество"           , Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ДоговорКонтрагента" , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СтатусПередачи"     , Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("ДатаОстатков"       , ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	ОснованиеРеализацияТоваров = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ОтКомиссионера             = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	УсловиеЗаказ         = " И Сделка = &Сделка ";
	ПолеСоединенияЗаказ  = "";
	ПолеЗаказПокупателя  = "";
	ПараметрСделка       = Неопределено;

	МетаданныеДокумента  = ДокументОснование.Метаданные();
	ДокументОснованиеИмя = МетаданныеДокумента.Имя;
	ЕстьСоставНабора     = МетаданныеДокумента.ТабличныеЧасти.Найти("СоставНабора") <> Неопределено;
	ЕстьАвтоматическиеСкидки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок",МетаданныеДокумента, "Товары");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КурсВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.СтавкаНДС,
	|	Док.Количество,
	|	Док.Цена,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.Комплект КАК Комплект,
	//{21.12.2016 Островерхий заявка №57373 
	|"+?(ОснованиеРеализацияТоваров,"Док.ПЦ_ПроцентДопИзмененияЦены КАК ПроцентДопИзмененияЦены,","")+" 
	//21.12.2016 Островерхий} 
	|	Док.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|"
	+ ?(ЕстьАвтоматическиеСкидки,"
	|	Док.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	Док.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	|	Док.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	|","")
	+?(ЕстьСоставНабора, "
	|	Док.КлючСтроки,", "")
	+?(ОснованиеРеализацияТоваров, "
	|	Док.Качество      КАК Качество
	|", "
	|	&Качество КАК Качество
	|");
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад", ДокументОснование.Метаданные(), "Товары") Тогда
		Запрос.Текст = Запрос.Текст+", Док.Склад";
	Иначе
		Запрос.Текст = Запрос.Текст+", неопределено КАК Склад";
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЗаказПокупателя", ДокументОснование.Метаданные(), "Товары") Тогда

		ПолеЗаказПокупателя = ", Док.ЗаказПокупателя КАК ЗаказПокупателя";

		Если ОтКомиссионера И ДокументОснованиеИмя = "СчетНаОплатуПокупателю" Тогда
			УказаниеЗаказов = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
			УказаниеЗаказовВТЧ = (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
								Или (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации);
			ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;

			Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам ИЛИ НЕ УказаниеЗаказовВТЧ Тогда
				Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					ПараметрСделка      = ДокументОснование;
					ПолеЗаказПокупателя = ", ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя";
				Иначе
					ПараметрСделка      = ?(ЗначениеЗаполнено(ДокументОснование.ЗаказПокупателя), ДокументОснование.ЗаказПокупателя, Неопределено);
					ПолеЗаказПокупателя = ", &Сделка КАК ЗаказПокупателя";
				КонецЕсли;
				УсловиеЗаказ            = " И Сделка = &Сделка ";
			Иначе
				Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
					ПолеСоединенияЗаказ = " И Док.ЗаказПокупателя = Остатки.Сделка ";
				Иначе
					ПолеСоединенияЗаказ = " И	ВЫБОР	КОГДА Док.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
										|				ТОГДА Неопределено
										|				ИНАЧЕ Док.ЗаказПокупателя
										|		КОНЕЦ = Остатки.Сделка
										|";
				КонецЕсли;
				УсловиеЗаказ            = "";
				ПолеЗаказПокупателя     = ", Док.ЗаказПокупателя КАК ЗаказПокупателя";
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + ПолеЗаказПокупателя;
	ИначеЕсли ДокументОснованиеИмя = "ЗаказПокупателя" Тогда
		ПолеЗаказПокупателя = ", Док.Ссылка КАК ЗаказПокупателя";
		УсловиеЗаказ        = " И Сделка = &Сделка ";
		ПараметрСделка      = ДокументОснование;
		Запрос.Текст        = Запрос.Текст + ПолеЗаказПокупателя;
	Иначе
		ПолеЗаказПокупателя = ", неопределено КАК ЗаказПокупателя";
		Запрос.Текст        = Запрос.Текст + ПолеЗаказПокупателя;
	КонецЕсли;

	Запрос.УстановитьПараметр("Сделка", ПараметрСделка);

	ДополнительныеПоляЗапросаРегл = "";
	ПолучитьДополнительныеПоляДляЗаполненияТоваровПоОснованиюРегл(ДополнительныеПоляЗапросаРегл);

	Если ОснованиеРеализацияТоваров Тогда

		Запрос.Текст = Запрос.Текст + ",
		|	Док.СерияНоменклатуры" + 
			ДополнительныеПоляЗапросаРегл + "
		|"
	КонецЕсли;

	Если ОтКомиссионера Тогда

		Запрос.Текст = Запрос.Текст + ",
		|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00)          КАК КоличествоОстатокПереданных,
		|	ЕСТЬNULL(Остатки.СуммаВзаиморасчетовОстаток, 0.00) КАК СтоимостьОтданнаяВалОстаток";

	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Товары   КАК Док
	|";

	Если ОтКомиссионера Тогда
		Запрос.Текст = Запрос.Текст + ",
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков,
		|											ДоговорКонтрагента = &ДоговорКонтрагента
		|											И СтатусПередачи = &СтатусПередачи
		|											" + УсловиеЗаказ + ") КАК Остатки
		|ПО
		|	Док.Номенклатура = Остатки.Номенклатура
		|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|" + ПолеСоединенияЗаказ + "
		|";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|" + ?(ОтКомиссионера, " И ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00) > 0 ", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = ?(ОтКомиссионера, МИН(Выборка.КоличествоОстатокПереданных, Выборка.Количество), Выборка.Количество);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.Качество             = Выборка.Качество;
		СтрокаТабличнойЧасти.Склад                = Выборка.Склад;
		Если ТипДокументаОснования = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя  = ДокументОснование;
		Иначе
			СтрокаТабличнойЧасти.ЗаказПокупателя  = Выборка.ЗаказПокупателя;
		КонецЕсли;

		Если ЕстьАвтоматическиеСкидки Тогда
			СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
			СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
			СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		КонецЕсли;

		//{21.12.2016 Островерхий заявка №57373 
		Если ОснованиеРеализацияТоваров Тогда
			СтрокаТабличнойЧасти.ПЦ_ПроцентДопИзмененияЦены         = Выборка.ПроцентДопИзмененияЦены;
		КонецЕсли; 
		//21.12.2016 Островерхий} 
		
		Если ОтКомиссионера Тогда

			КолвоПереданных = Выборка.КоличествоОстатокПереданных;
			Если КолвоПереданных > 0 Тогда
				Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / КолвоПереданных, 
						ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, Курс,
						КратностьВзаиморасчетов, Кратность);

				СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
											  Истина, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьАвтоматическиеСкидки,"Товары");
			КонецЕсли;
		Иначе

			СтрокаТабличнойЧасти.Цена = Выборка.Цена;

			// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
			Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
					Выборка.КурсДокумента, Курс,
					Выборка.КратностьДокумента, Кратность);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
										Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
										УчитыватьНДС, СуммаВключаетНДС,
										УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		Если ОснованиеРеализацияТоваров Тогда

			СтрокаТабличнойЧасти.СерияНоменклатуры      = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ДокументПартии         = ДокументОснование;
			СтрокаТабличнойЧасти.ЗаказПокупателя        = Выборка.ЗаказПокупателя;
			
			ЗаполнитьСтрокуТоварыПоОснованиюРегл(СтрокаТабличнойЧасти, Выборка);
		КонецЕсли;

		Если ЕстьСоставНабора
		   И Выборка.Комплект Тогда
			СтрокаТабличнойЧасти.КлючСтроки = СтрокаТабличнойЧасти.НомерСтроки;
		КонецЕсли;

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	КонецЦикла;

	Если ЕстьСоставНабора Тогда
		УправлениеЗапасами.ЗаполнитьСоставНабораПоОснованию(ЭтотОбъект, ДокументОснование);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение возвратной тары по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	
	Запрос = Новый Запрос;
	ПараметрСделка = Неопределено;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	УсловиеЗаказ         = "";
	ПолеСоединенияЗаказ  = "";
	МетаданныеДокумента  = ДокументОснование.Метаданные();
	ДокументОснованиеИмя = МетаданныеДокумента.Имя;
	Если ДокументОснованиеИмя = "РеализацияТоваровУслуг" Тогда
		ДобавкаСчетов = "
		|	Док.СчетУчетаБУ,
		|	Док.СчетУчетаНУ,";
	Иначе
		ДобавкаСчетов = "";
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад", МетаданныеДокумента, "ВозвратнаяТара") Тогда
		ДобавкаСклад = "Док.Склад КАК Склад,";
	Иначе
		ДобавкаСклад = "неопределено КАК Склад,";
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЗаказПокупателя", МетаданныеДокумента, "ВозвратнаяТара") Тогда
		УказаниеЗаказов = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
		УказаниеЗаказовВТЧ = (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
						Или (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации);
		ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;

		Если ДокументОснованиеИмя = "СчетНаОплатуПокупателю" Тогда
			Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам ИЛИ НЕ УказаниеЗаказовВТЧ Тогда
				Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					ПараметрСделка         = ДокументОснование;
					ДобавкаЗаказПокупателя = "ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,";
				Иначе
					ПараметрСделка         = ?(ЗначениеЗаполнено(ДокументОснование.ЗаказПокупателя), ДокументОснование.ЗаказПокупателя, Неопределено);
					ДобавкаЗаказПокупателя = "&Сделка КАК ЗаказПокупателя,";
				КонецЕсли;
				УсловиеЗаказ               = " И Сделка = &Сделка ";
			Иначе
				Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
					ПолеСоединенияЗаказ = " И Док.ЗаказПокупателя = Остатки.Сделка ";
				Иначе
					ПолеСоединенияЗаказ = " И	ВЫБОР	КОГДА Док.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
										|				ТОГДА Неопределено
										|				ИНАЧЕ Док.ЗаказПокупателя
										|		КОНЕЦ = Остатки.Сделка
										|";
				КонецЕсли;
				ДобавкаЗаказПокупателя  = "Док.ЗаказПокупателя КАК ЗаказПокупателя,";
			КонецЕсли;
		Иначе
			Если УказаниеЗаказовВТЧ Тогда
				Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
					ПолеСоединенияЗаказ = " И Док.ЗаказПокупателя = Остатки.Сделка ";
				Иначе
					ПолеСоединенияЗаказ = "
										|	И	ВЫБОР	КОГДА Док.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
										|				ТОГДА Неопределено
										|				ИНАЧЕ Док.ЗаказПокупателя
										|		КОНЕЦ = Остатки.Сделка
										|";
				КонецЕсли;
			Иначе
				Если НЕ МетаданныеДокумента.Реквизиты.Найти("Сделка") = Неопределено Тогда
					УсловиеЗаказ   = " И Сделка = &Сделка ";
					ПараметрСделка = ДокументОснование.Сделка;
				КонецЕсли;
			КонецЕсли;
			ДобавкаЗаказПокупателя = "Док.ЗаказПокупателя КАК ЗаказПокупателя,";
		КонецЕсли;
	Иначе
		Если ДокументОснованиеИмя = "ЗаказПокупателя" Тогда
			ДобавкаЗаказПокупателя = "Док.Ссылка КАК ЗаказПокупателя,";
			УсловиеЗаказ           = " И Сделка = &Сделка ";
			ПараметрСделка         = ДокументОснование;
		Иначе
			Если НЕ МетаданныеДокумента.Реквизиты.Найти("Сделка") = Неопределено Тогда
				ДобавкаЗаказПокупателя = "Док.Ссылка.Сделка КАК ЗаказПокупателя,";
				УсловиеЗаказ           = " И Сделка = &Сделка ";
				ПараметрСделка         = ДокументОснование.Сделка;
			Иначе
				ДобавкаЗаказПокупателя = "неопределено КАК ЗаказПокупателя,";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Запрос.УстановитьПараметр("Сделка", ПараметрСделка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КратностьДокумента,"
	+ ДобавкаСчетов + ДобавкаСклад+ДобавкаЗаказПокупателя+"
	|	Док.Номенклатура,
	|	ВЫБОР 	КОГДА ЕСТЬNULL(Док.Количество, 0.00) >  ЕСТЬNULL(Остатки.КоличествоОстаток,0.00)
	|			ТОГДА ЕСТЬNULL(Остатки.КоличествоОстаток,0.00)
	|			ИНАЧЕ ЕСТЬNULL(Док.Количество, 0.00)
	|	КОНЕЦ КАК Количество,
	|	Док.Цена
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(, Номенклатура В (
	|																	ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
	|																	ИЗ Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара КАК Док 
	|																	ГДЕ Док.Ссылка = &ДокументОснование ) " + УсловиеЗаказ + "
	|																) КАК Остатки
	|ПО Док.Номенклатура = Остатки.Номенклатура
	|	И Док.Ссылка.ДоговорКонтрагента = Остатки.ДоговорКонтрагента
	|" + ПолеСоединенияЗаказ + "
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|	И	ВЫБОР	КОГДА ЕСТЬNULL(Док.Количество, 0.00) > ЕСТЬNULL(Остатки.КоличествоОстаток,0.00)
	|				ТОГДА ЕСТЬNULL(Остатки.КоличествоОстаток,0.00)
	|				ИНАЧЕ ЕСТЬNULL(Док.Количество, 0.00)
	|		КОНЕЦ > 0.00
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура     = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество       = Выборка.Количество;
		СтрокаВозвратнойТары.Цена             = Выборка.Цена;
		СтрокаВозвратнойТары.Склад            = Выборка.Склад;
		СтрокаВозвратнойТары.ЗаказПокупателя  = Выборка.ЗаказПокупателя;

		Если ДокументОснованиеИмя = "РеализацияТоваровУслуг" Тогда
			СтрокаВозвратнойТары.СчетУчетаБУ  = Выборка.СчетУчетаБУ;
			СтрокаВозвратнойТары.СчетУчетаНУ  = Выборка.СчетУчетаНУ;
		ИначеЕсли ДокументОснованиеИмя = "ЗаказПокупателя" Тогда
			СтрокаВозвратнойТары.ЗаказПокупателя = ДокументОснование;
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаВозвратнойТары, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		КонецЕсли;

		// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
		Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, Выборка.ВалютаДокумента, ВалютаДокумента,
						Выборка.КурсДокумента, Курс,
						Выборка.КратностьДокумента, Кратность);

		ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОснованию()

Процедура ЗаполнитьТоварыНереализованнымиУпр(СпособЗаполнения, ДокументРеализации = Неопределено, ЗаполнитьИзФормы = Ложь) Экспорт
	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	// Добудем нереализованные товары
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ПолеЗаказ           = ", Док.ЗаказПокупателя КАК Сделка";
	УсловиеЗаказ        = "";
	ПолеСоединенияЗаказ = "";

	Если СпособЗаполнения = "ПоДокументу" Тогда

		// Вложенный запрос, ограничивающий список номенклатуры
		// документ типа Внутренний заказ не может быть основанием для возврата с комиссии  
		ТекстЗапросаСписокНоменклатуры = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары
		|ГДЕ Ссылка = &ДокументОснование";

		Запрос.УстановитьПараметр("ДокументОснование", ДокументРеализации);
		ВедениеВзаиморасчетов = ДокументРеализации.ДоговорКонтрагента.ВедениеВзаиморасчетов;
		ПараметрСделка = Неопределено;
		Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Если ЗначениеЗаполнено(Сделка) Тогда
				ПараметрСделка = Сделка;
			Иначе
				ПараметрСделка = ДокументРеализации.Сделка;
				Сделка = ДокументРеализации.Сделка;
			КонецЕсли;
			ПолеЗаказ      = " , Неопределено КАК Сделка";
			УсловиеЗаказ   = " И Сделка = &Сделка";
		Иначе
			УказаниеЗаказов    = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
			УказаниеЗаказовВТЧ = (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
							Или (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации);
			Если ЗаполнитьИзФормы И ЗначениеЗаполнено(Сделка) Тогда
				УказаниеЗаказовВТЧ = Ложь;
			КонецЕсли;
			Если УказаниеЗаказовВТЧ Тогда
				Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
					ПолеСоединенияЗаказ  = " И Док.ЗаказПокупателя = Остатки.Сделка";
				Иначе
					ПолеСоединенияЗаказ  = " И	ВЫБОР	КОГДА Док.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
										|				ТОГДА Неопределено
										|				ИНАЧЕ Док.ЗаказПокупателя
										|		КОНЕЦ = Остатки.Сделка";
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Сделка) Тогда
					ПараметрСделка = Сделка;
				Иначе
					ПараметрСделка = ДокументРеализации.Сделка;
					Сделка = ДокументРеализации.Сделка;
				КонецЕсли;
				УсловиеЗаказ   = " И Сделка = &Сделка";
			КонецЕсли;
		КонецЕсли;
		Запрос.УстановитьПараметр("Сделка", ?(ЗначениеЗаполнено(ПараметрСделка), ПараметрСделка, Неопределено));
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура                                     КАК Номенклатура,
	|	Док.СтавкаНДС                                            КАК СтавкаНДС,
	|	Док.ЕдиницаИзмерения                                     КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(Док.Коэффициент, 0.00)                          КАК Коэффициент,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
	|	Док.Количество                                           КАК КоличествоРеализации,
	|	Док.Цена                                                 КАК Цена,
	|	Док.ПроцентСкидкиНаценки                                 КАК ПроцентСкидкиНаценки,
	|	Остатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры                                    КАК СерияНоменклатуры,
	|	Док.Ссылка.ВалютаДокумента                               КАК ВалютаДокумента,
	|	ВЫБОР	КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА Док.Ссылка.КурсВзаиморасчетов
	|			ИНАЧЕ 1
	|	КОНЕЦ                                                    КАК КурсДокумента,
	|	ВЫБОР	КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА Док.Ссылка.КратностьВзаиморасчетов
	|			ИНАЧЕ 1
	|	КОНЕЦ                                                    КАК КратностьДокумента,
	|	Док.Ссылка.УчитыватьНДС                                  КАК УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС                              КАК СуммаВключаетНДС,
	|	Остатки.СуммаВзаиморасчетовОстаток                       КАК СтоимостьОтданнаяВалОстаток,
	// Для корректного заполнения документа единица измерения хранения остатков пересчитывается в единицу измерения документа.
	|	ВЫБОР	КОГДА ЕСТЬNULL(Док.Коэффициент, 0.00) = 0.00
	|			ТОГДА 0.00
	|			ИНАЧЕ Остатки.КоличествоОстаток * Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / Док.Коэффициент
	|	КОНЕЦ                                                    КАК КоличествоОстатокРеализации
	|" + ПолеЗаказ + "
	|ИЗ
	|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков,
	|";

	Если СпособЗаполнения = "ПоДокументу" Тогда
		Запрос.Текст = Запрос.Текст + "
		|		Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ")
		|		И ДоговорКонтрагента = &Договор
		|		" + УсловиеЗаказ + "
		|	) КАК Остатки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Док
		|ПО
		|	Док.Номенклатура                 = Остатки.Номенклатура
		|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|" + ПолеСоединенияЗаказ  + "
		|
		|ГДЕ
			// для корректного сравнения количества остатков, единицы измерения документа присчитываются в единицу хранения остатков.
		|	ВЫБОР	КОГДА ЕСТЬNULL(Док.Коэффициент, 0.00) = 0.00
		|			ТОГДА 0.00
		|			ИНАЧЕ Остатки.КоличествоОстаток / Док.Коэффициент * Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
		|	КОНЕЦ > 0.00
		|	И Док.Ссылка = &ДокументОснование
		|	И Док.Ссылка.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.НомерСтроки
		|";
	Иначе // по договору
		Запрос.Текст = Запрос.Текст + "
		|			ДоговорКонтрагента = &Договор
		|			) КАК Остатки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг.Товары КАК Док
		|ПО
		|	Док.Номенклатура = Остатки.Номенклатура
		|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|	И Док.Ссылка.Проведен
		|" + ПолеСоединенияЗаказ  + "
		|
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.НомерСтроки
		|";
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		НетДокумента      = (Выборка.КоличествоРеализации = NULL);
		ОстатокПереданных = ?(Выборка.КоличествоОстатокРеализации = NULL, 0, Выборка.КоличествоОстатокРеализации);
		Если НетДокумента Тогда
			Количество = Выборка.КоличествоОстатокРеализации;
		Иначе
			Количество = Мин(Выборка.КоличествоРеализации, Выборка.КоличествоОстатокРеализации);
		КонецЕсли;
		СтрокаТабличнойЧасти.ЗаказПокупателя      = Выборка.Сделка;
		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = ?(НетДокумента, Выборка.ЕдиницаХраненияОстатков, Выборка.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Коэффициент          = ?(НетДокумента, Выборка.КоэффициентХраненияОстатков, Выборка.Коэффициент);
		СтрокаТабличнойЧасти.СтавкаНДС            = ?(НетДокумента, Выборка.Номенклатура.СтавкаНДС,Выборка.СтавкаНДС);
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ?(НетДокумента, 0, Выборка.ПроцентСкидкиНаценки);
		СтрокаТабличнойЧасти.Цена                 = Выборка.СтоимостьОтданнаяВалОстаток / Выборка.КоличествоОстатокРеализации;

		Если НетДокумента Тогда
			СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток / ОстатокПереданных,
			                            ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента,
			                            КурсВзаиморасчетов, Курс,
			                            КратностьВзаиморасчетов, Кратность);
		Иначе
			СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена,
			                            Выборка.ВалютаДокумента, ВалютаДокумента,
			                            Выборка.КурсДокумента, Курс,
			                            Выборка.КратностьДокумента, Кратность);
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
		                                Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		                                Истина,
		                                УчитыватьНДС,
		                                СуммаВключаетНДС,
		                                УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ДокументПартии             = ДокументРеализации;
		СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		Если НЕ НетДокумента Тогда
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТаре",			СчетаУчета.СчетУчетаТарыПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаНДС",					ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

// Процедура выполняет заполнение документа по документу-основанию.
//
// Параметры:
//  Основание - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ОтражатьВУправленческомУчете = Истина;
		СкладОрдер                   = Основание;
		ВидПоступления               = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
		ВидОперации                  = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
		УчитыватьНДС                 = Истина;

		Если ЗначениеЗаполнено(Контрагент) Тогда
			ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, 
			                                          Контрагент, мСтруктураПараметровДляПолученияДоговора);
			
			// Тип цен заполняем, только если в договоре указаны тип цен номенклатуры (он - покупатель или комиссионер).
			ТипЦенКонтрагента = ДоговорКонтрагента.ТипЦен;
			Если ЗначениеЗаполнено(ТипЦенКонтрагента)
			   И ТипЗнч(ТипЦенКонтрагента) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
				ТипЦен = ТипЦенКонтрагента;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			СуммаВключаетНДС = Истина;
		Иначе
			СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;

		СтруктураКурса          = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсВзаиморасчетов      = СтруктураКурса.Курс;
		КратностьВзаиморасчетов = СтруктураКурса.Кратность;

		Если Основание.Проведен Тогда

			// Заполним табличные части по заказу поставщику.
			ЗаполнитьТоварыПоОрдеруУпр(Основание, Товары);
			ЗаполнитьТоварыПоОрдеруУпр(Основание, ВозвратнаяТара);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьРеквизитыУчетаНДС() Экспорт
	
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	Если ПокупателемВыставляетсяСчетФактураНаВозврат И (Дата <= '20060101' ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;
	КонецЕсли;
	
	Если ПокупателемВыставляетсяСчетФактураНаВозврат И Не ОтразитьВКнигеПокупок Тогда
		ОтразитьВКнигеПокупок = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС",                Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("НДС",                        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
	НовыйАлгоритмТара = Ложь;
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОснование) Тогда
		ТаблицаТары.Колонки.Добавить("ДокументПартии",          Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
		ТаблицаТары.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДокументОснование,"ДокументПартии");
		НовыйАлгоритмТара = Истина;
	Иначе
		//старый алгоритм 10 кт 76,60
	КонецЕсли;	
	//конец изменений 
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов
		
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("МинусКоличество"     , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаТары.Колонки.Добавить("Стоимость"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов");
	
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.МинусКоличество  = - СтрокаТаблицы.КоличествоДок;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, 
		                                 КратностьВзаиморасчетов);

		СтрокаТаблицы.Стоимость   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = 0;

	КонецЦикла;

	ТаблицаТары.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
	                     ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСклада", "КоличествоДок");
	КонецЕсли;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Добавляет в таблицу колонки, необходимые для регл. проведения.
//
Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента)

	// Надо добавить колонки
	ТаблицаТары.Колонки.Добавить("ПроводкаСумма",              Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                                 мВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьДокумента,
			                                 Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

// Заполняет таблицу скидок для проведения.
//
// Параметры: 
//  ТаблицаТоваров          - таблица значений по товарам,
//  ТаблицаУслуг            - таблица значений по скидкам,
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, СтруктураШапкиДокумента)

	МетаданныеДокумента = Метаданные();

	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента, 2), ВалютаДокумента, 
		   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		   СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		   СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;

		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;

		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;

		СуммаСоСкидкамиРеально = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВал, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;

		Если Разница <> 0
		   И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;

		//Натуральные скидки.
		Если ТипЗнч(СтрокаТаблицы.Комплект)<>Тип("Булево") Тогда
			СтрокаТаблицы.Комплект = ложь;
		КонецЕсли;
		
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
			        СтрокаТаблицы.Номенклатура,
			        СтрокаТаблицы.ХарактеристикаНоменклатуры,
			        Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Оптовая, ЭтотОбъект)) Тогда
				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));

				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;

				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;

					СтоимостьКомплектующей = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.КоличествоДок * Комплектующая.Количество,
					   ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					   СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					   СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;

				СуммаСкидки = СтоимостьКомплектующих - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма,
				   ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				   СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				   СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаСкидки Из ТаблицаДвижений Цикл
		СтрокаСкидки.СуммаСкидки = -СтрокаСкидки.СуммаСкидки;
	КонецЦикла;

	Возврат ТаблицаДвижений;

КонецФункции // ПодготовитьТаблицуСкидок()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента,"ВозвратОтПокупателя") Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	Иначе
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей);
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "ВозвратнаяТара", "ЗаказПокупателя", Отказ, Заголовок);
	
	// Проверка наличия продажных цен на приходуемый товар.
	УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ,
	                                                       Заголовок, "ВидСклада");

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Функция удаляет из исходной таблицы строки не требующие сторнирования партий по ордерам
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуДляСнятияРезерваПоОрдеру(ТаблицаПоТоварам)

	ТаблицаПоТоварамПоОрдерамБезПраваПродажи = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Количество() Цикл

		СтрокаТаблицы = ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Получить(Сч);
		Если Не СтрокаТаблицы.БезПраваПродажи Тогда
			ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаПоТоварамПоОрдерамБезПраваПродажи;

КонецФункции // СоздатьТаблицуДляСнятияРезерваПоОрдеру()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаПоСкидкам, Отказ, Заголовок);

	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, ЭтотОбъект, СтруктураШапкиДокумента);
	
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("СоставНабора", ТаблицаПоКомплектам, СтруктураШапкиДокумента, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаПоСкидкам, Отказ, Заголовок);

	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоКомплектам, ТаблицаПоТаре, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
	                                                    Отказ, Заголовок, СтруктураШапкиДокумента);

	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоКомплектам, ТаблицаПоТаре, Отказ, Заголовок);
	
	Если ТаблицаПоТоварам.Количество() > 0 Тогда
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	КонецЕсли;	
		
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, Отказ, Заголовок);
    ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, Отказ, Заголовок);
	
	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать(Ложь);
		КонецЕсли; 		
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Если Движения.Налоговый.Модифицированность() Тогда
			Движения.Налоговый.Записать(Ложь);
		КонецЕсли; 		
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Если Движения.КнигаУчетаДоходовИРасходов.Модифицированность() Тогда
			Движения.КнигаУчетаДоходовИРасходов.Записать(Ложь);
		КонецЕсли; 		
	КонецЕсли;
	
	Если ТаблицаПоКомплектам.Найти(Перечисления.ТипыНоменклатуры.Комплект, "ТипНоменклатуры") <> Неопределено Тогда
		ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоКомплектам",ТаблицаПоКомплектам);
	КонецЕсли;		
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам налогового учета УСН(регламентированный учет).
//
Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ИсходнаяТаблица, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоТоварам = ИсходнаяТаблица.Скопировать();
		
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = ТаблицаПоТоварам.Количество();
	Для ОбратныйИндекс = 1 по КоличествоСтрок Цикл
		СтрокаТД = ТаблицаПоТоварам[КоличествоСтрок - ОбратныйИндекс];
		Если ЗначениеЗаполнено(ТаблицаПоТоварам[КоличествоСтрок - ОбратныйИндекс].ДокументПартии) Тогда
			ТаблицаПоТоварам.Удалить(КоличествоСтрок - ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
		
	Если ИсходнаяТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, , , ложь, ложь, истина);
	
	//ПО РЕГИСТРУ РАСХОДОВ УСН
	НаборДвижений = Движения.РасходыПриУСН;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	СуммаСторно = 0;
	
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаДвижений, 
	Перечисления.ВидыРасходовУСН.Номенклатура, Неопределено,
	Перечисления.СтатусыПартийУСН.Купленные, ,Истина, СуммаСторно);
	
	//Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, 	"Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, 		"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, 		"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, 		"Активность");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
			
	//ПО РЕГИСТРУ КУДиР
	Если СуммаСторно <> 0 Тогда
		
		КурсВалюты  = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.Дата);
						
		КУДиР = Движения.КнигаУчетаДоходовИРасходов;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = КУДиР.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		СтрокаКниги  = ТаблицаДвижений.Добавить();
		
		СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.СтрокаДокумента = 0;
		СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
		СтрокаКниги.Содержание      = "Расходы уменьшены на стоимость товаров, возвращенных покупателем.";
		СтрокаКниги.Графа7          = - СуммаСторно;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Ссылка);
		
		//Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, 	"Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Дата, 		"Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, 		"Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, 		"Активность");
		
		КУДиР.мПериод            = Дата;
		КУДиР.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.КнигаУчетаДоходовИРасходов.ВыполнитьДвижения();
			НаборДвижений.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;
		
	//Зачет аванса													
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
	
КонецПроцедуры

Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок, СтруктураШапкиДокумента)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Таблица для движений с отрицательным количеством
	ТаблицаПоТоварамМинус = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамМинус.Колонки.МинусКоличество.Имя = "Количество";
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамМинус);
					
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
					
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
		КонецЕсли;
					
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
	Иначе // По ордеру

		// По ордеру нужно сторнировать движения по товарам организаций,
		// если в ордере была указана не та организация.
		// Удалим строки, по которым не нужно делать движений (организации совпадают).
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КопияТаблицыТоваров.Колонки.КоличествоДок.Имя = "Количество";
		КолвоЭлементовКоллекции = КопияТаблицыТоваров.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = КопияТаблицыТоваров[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ОрганизацияДокументаПолучения = СтруктураШапкиДокумента.Организация Тогда
				КопияТаблицыТоваров.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

		Если КопияТаблицыТоваров.Количество() > 0 Тогда // Есть что проводить.

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", КопияТаблицыТоваров);
							
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
							
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", КопияТаблицыТоваров.ВыгрузитьКолонку("ОрганизацияДокументаПолучения"));
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
				
			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
			КонецЕсли;
							
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

			// Теперь сделаем движения с правильной организацией.
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", СтруктураШапкиДокумента.Организация);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
		КонецЕсли;
		
	КонецЕсли;
	
	// Спишем остатки по организации с комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамМинус);

		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);

		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад"      , Неопределено);

		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

// По результату запроса по шапке документа формируем движения по упр. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаПоСкидкам, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		// Таблица для движений с отрицательным количеством
		ТаблицаПоТоварамМинус = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамМинус.Колонки.МинусКоличество.Имя = "Количество";

		// Таблица для движений с положительным количеством
		ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамПлюс.Колонки.КоличествоДок.Имя = "Количество";

		// Таблица для движений с отрицательным количеством
		ТаблицаПоКомплектамМинус = ТаблицаПоКомплектам.Скопировать();
		ТаблицаПоКомплектамМинус.Колонки.МинусКоличество.Имя = "Количество";

		// Таблица для движений с положительным количеством
		ТаблицаПоКомплектамПлюс = ТаблицаПоКомплектам.Скопировать();
		ТаблицаПоКомплектамПлюс.Колонки.КоличествоДок.Имя = "Количество";

		// Таблица для движений с отрицательным количеством
		ТаблицаПоТареМинус = ТаблицаПоТаре.Скопировать();
		ТаблицаПоТареМинус.Колонки.МинусКоличество.Имя = "Количество";

		// Таблица для движений с положительным количеством
		ТаблицаПоТареПлюс = ТаблицаПоТаре.Скопировать();
		ТаблицаПоТареПлюс.Колонки.КоличествоДок.Имя = "Количество";
		
		УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		                                 мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		                                 ВидДвиженияНакопления.Приход, Отказ, Заголовок);

		Если Константы.УчитыватьВозвратыТовараПокупателем.Получить() Тогда
			ТабЗаказыПокупателей = ТаблицаПоТоварамМинус.Скопировать();
			МассивУдаляемыхСтрок = Новый Массив;
			Для Каждого СтрокаТЧ Из ТабЗаказыПокупателей Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя) Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
				КонецЕсли;
			КонецЦикла;
			
			Если ТабЗаказыПокупателей.Количество() > МассивУдаляемыхСтрок.Количество() Тогда // Есть строки с Заказом покупателя
			
			    ТабЗаказыПокупателей.Колонки.Добавить("СтатусПартии", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПартийТоваров"));
			    
				Для Каждого СтрокаТЧ Из МассивУдаляемыхСтрок Цикл
					ТабЗаказыПокупателей.Удалить(СтрокаТЧ);
				КонецЦикла;
				Для Каждого СтрокаТЧ Из ТабЗаказыПокупателей Цикл
					СтрокаТЧ.СтатусПартии = ?(СтрокаТЧ.ВидОперацииЗаказаПокупателя = Перечисления.ВидыОперацийЗаказПокупателя.Переработка,
						Перечисления.СтатусыПартийТоваров.ВПереработку,
						Перечисления.СтатусыПартийТоваров.Купленный);
				КонецЦикла;
				
			    // Движения по заказам покупателей.
				НаборДвижений = Движения.ЗаказыПокупателей;
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТабЗаказыПокупателей);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				// Считаем что нельзя выбирать заказы с разными договорами, т.е. договор в шапке = договору в заказе покупателя в таб.части
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Статус, "ТаблицаПоТоварам");

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			КонецЕсли;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		   И СуммаДокумента <> 0 Тогда

			// По регистру ПродажиПоДисконтнымКартам.
			Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
				НаборДвижений = Движения.ПродажиПоДисконтнымКартам;

				// Получим таблицу значений, совпадающую со структурой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.Выгрузить();

				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
				СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижений.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(-СуммаДокумента, ВалютаДокумента,
									   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
									   СтруктураШапкиДокумента.КурсДокумента,
									   СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
									   СтруктураШапкиДокумента.КратностьДокумента,
									   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				Если Не Отказ Тогда
					НаборДвижений.ВыполнитьДвижения();
				КонецЕсли;
			КонецЕсли;

			// ПО РЕГИСТРУ ПредоставленныеСкидки.
			НаборДвижений = Движения.ПредоставленныеСкидки;

			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);

			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументСкидки");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ПолучательСкидки");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		
			Если НЕ Отказ Тогда
				
				ОтборСкладОпт  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
				ОтборСкладРозн = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
				ОтборСкладНТТ  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.НТТ);
				
				РезультатЗапросаТоварыОпт = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектамМинус, ОтборСкладОпт);
				РезультатЗапросаТараОпт   = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТареПлюс,       ОтборСкладОпт);

				Если Не РезультатЗапросаТоварыОпт.Пустой() ИЛИ НЕ РезультатЗапросаТараОпт.Пустой() Тогда
				
					НаборДвиженийОпт = Движения.ТоварыНаСкладах;

					ТаблицаТоварыОпт = РезультатЗапросаТоварыОпт.Выгрузить();
					ТаблицаТараОпт   = РезультатЗапросаТараОпт  .Выгрузить();

					СтруктТаблицДокументаОпт = Новый Структура;
					СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТоварам", ТаблицаТоварыОпт);

					ТаблицыДанныхДокументаОпт = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийОпт, СтруктТаблицДокументаОпт);

					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвиженийОпт, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаОпт,  Дата);

					СтруктТаблицДокументаОпт = Новый Структура;
					СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТаре",    ТаблицаТараОпт);

					ТаблицыДанныхДокументаОпт = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийОпт, СтруктТаблицДокументаОпт);

					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаОпт, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");

					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвиженийОпт, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаОпт,  Дата);

				КонецЕсли;
				
				РезультатЗапросаТоварыРозн = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектамМинус, ОтборСкладРозн);
				РезультатЗапросаТараРозн   = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТареПлюс,       ОтборСкладРозн);

				Если НЕ РезультатЗапросаТоварыРозн.Пустой() ИЛИ НЕ РезультатЗапросаТараРозн.Пустой() Тогда
					
					НаборДвиженийРозн = Движения.ТоварыВРознице;
					ТаблицаТоварыРозн = РезультатЗапросаТоварыРозн.Выгрузить();
					ТаблицаТараРозн   = РезультатЗапросаТараРозн  .Выгрузить();
				
					СтруктТаблицДокументаРозн = Новый Структура;
					СтруктТаблицДокументаРозн.Вставить("ТаблицаПоТоварам", ТаблицаТоварыРозн);
					
					ТаблицыДанныхДокументаРозн = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийРозн, СтруктТаблицДокументаРозн);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвиженийРозн, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаРозн, Дата);
					
					СтруктТаблицДокументаРозн = Новый Структура;
					СтруктТаблицДокументаРозн.Вставить("ТаблицаПоТаре",    ТаблицаТараРозн);
					
					ТаблицыДанныхДокументаРозн = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийРозн, СтруктТаблицДокументаРозн);

					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаРозн, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвиженийРозн, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаРозн, Дата);
					
				КонецЕсли;

				РезультатЗапросаТоварыНТТ = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектамМинус, ОтборСкладНТТ);

				Если Не РезультатЗапросаТоварыНТТ.Пустой() Тогда
				
					НаборДвиженийНТТ = Движения.ТоварыВНТТ;
					ТаблицаТоварыНТТ = РезультатЗапросаТоварыНТТ.Выгрузить();
					ТаблицаТоварыНТТ.Колонки.Цена.Имя = "ЦенаВРознице";

					СтруктТаблицДокументаНТТ = Новый Структура;
					СтруктТаблицДокументаНТТ.Вставить("ТаблицаПоТоварам", ТаблицаТоварыНТТ);
					
					ТаблицыДанныхДокументаНТТ = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийНТТ, СтруктТаблицДокументаНТТ);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаНТТ, "ТоварТара", Перечисления.ТоварТара.Товар);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвиженийНТТ, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаНТТ, Дата);
					
				КонецЕсли;
				
			КонецЕсли; // Если НЕ Отказ Тогда
			
		Иначе

			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады.
			НаборДвижений = Движения.ТоварыКПолучениюНаСклады;
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли; 
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыКПолучениюНаСкладыКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;

			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоКомплектамПлюс);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареПлюс);
						
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");

				// Расход. Качество устанавливаем только для тары.
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
				// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
				
				// Сторнируем приход по ордеру и сделаем расход с минусом, поскольку для правильного
				// отражения в отчетах возврат должен формировать не приход товара, а расход с минусом.
				НаборДвижений = Движения.ТоварыНаСкладах;

				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоКомплектамМинус);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареМинус);
							
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
					
				// Расход. Качество устанавливаем только для тары.
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
				// Приход. Качество устанавливаем для прихода по таре и товарам.
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
							
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

			КонецЕсли;

		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				
			// По регистру Продажи
			НаборДвижений = Движения.Продажи;
			ТаблицаПродаж = ТаблицаПоТоварамМинус.Скопировать();
			ТаблицаПродаж.Колонки.ДокументПартии.Имя   = "ДокументПродажи";
			ТаблицаПродаж.Колонки.СтоимостьПродажи.Имя = "Стоимость";
			ТаблицаПродаж.Колонки.НДС.Имя              = "НДСВрем";
			ТаблицаПродаж.Колонки.НДСУпр.Имя           = "НДС";
			
			//{01.10.2015 Островерхий заявка №б/н 
			ТаблицаПродаж.Колонки.СтоимостьБезСкидокВВалюте.Имя = "ПРГВалютнаяСтоимостьБезСкидок";
			ТаблицаПродаж.Колонки.СтоимостьВВалюте.Имя          = "ПРГВалютнаяСтоимость";
			ТаблицаПродаж.Колонки.НДСВал.Имя                    = "ПРГНДСВВалюте";
			//01.10.2015 Островерхий} 
			
			Для каждого СтрокаТаблицы из ТаблицаПродаж Цикл
				//{01.10.2015 Островерхий заявка №б/н 
				//Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПродажи) Тогда
				//	СтрокаТаблицы.ДокументПродажи = Ссылка;
				//КонецЕсли; 
				СтрокаТаблицы.ПРГНДСВВалюте = СтрокаТаблицы.ПРГНДСВВалюте * -1;
				//01.10.2015 Островерхий} 
				
			КонецЦикла;

			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
						
			Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
				
				УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПродаж, ТаблицаДвижений, Проект, Дата, "Продажи");
				
			Иначе
				
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
				
			КонецЕсли;

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,		  "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,		  "Контрагент");
			//ТаблицаДвижений.ЗаполнитьЗначения(Сделка,             "ЗаказПокупателя");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
			КонецЕсли;

			//{01.10.2015 Островерхий заявка №б/н 
			ТаблицаДвижений.ЗаполнитьЗначения(Грузополучатель,      "ПРГАдресПоставки"); 
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументОснование,      "ДокументПродажи");
			ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента,      "ПРГВалютаДокумента");
			//01.10.2015 Островерхий} 
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.Продажи.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;
		
		// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыПереданные.
		НаборДвижений = Движения.ТоварыПереданные;

		// Контроль остатков товара
		Если ВозвратнаяТара.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			И Товары.Количество() <> 0 Тогда
			
			ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;

		Если НЕ Отказ Тогда

			СтруктТаблицДокумента = Новый Структура;
			КопияТаблицаПоТареПлюс = ТаблицаПоТареПлюс.Скопировать();
			КопияТаблицаПоТареПлюс.Колонки.ЗаказПокупателя.Имя = "Сделка";
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", КопияТаблицаПоТареПлюс);

			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);

			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,     "ТаблицаПоТаре");

			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", Сделка, "ТаблицаПоТаре");
			КонецЕсли;

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

				КопияТовары = ТаблицаПоТоварамМинус.Скопировать();
				КопияТовары.Колонки.ЗаказПокупателя.Имя = "Сделка";

				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", КопияТовары);

				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);

				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "ТаблицаПоТоварам");

				Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", Сделка, "ТаблицаПоТоварам");
				КонецЕсли;

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
			?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
			СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоКомплектам, истина, Ложь, Ложь);
					
		Если НЕ Отказ Тогда
			
			// При поступлении по ордеру нужно сторнировать партию ордера
			Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				
				// Снятие резерва по приходному ордеру

				// Сначала удалим из таблицы строки, по которым не надо списывать резерв.
				ТаблицаПоТоварамПоОрдерамБезПраваПродажи = СоздатьТаблицуДляСнятияРезерваПоОрдеру(ТаблицаПоТоварамПлюс);
				ТаблицаПоТареПоОрдерамБезПраваПродажи    = СоздатьТаблицуДляСнятияРезерваПоОрдеру(ТаблицаПоТареПлюс);

				// Если осталась хоть одна строка., то делаем движения.
				Если ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Количество() > 0 ИЛИ ТаблицаПоТареПоОрдерамБезПраваПродажи.Количество() > 0 Тогда 

					НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамПоОрдерамБезПраваПродажи);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареПоОрдерамБезПраваПродажи);

					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли; // Если ОтражатьВУправленчискомУчете...

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Расчеты в условных единицах организации для документов, 
// которые не проводятся по бухгалтерскому учету, но будут по нему проводиться
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
                                                            Отказ, Заголовок, СтруктураШапкиДокумента)
															
	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Возврат;
	КонецЕсли;
																
	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
				
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регл. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВзаиморасчетам, Отказ, Заголовок);

	Если не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяРасширеннаяАналитикаУчетаЗатрат = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	
	// Формирование движений по регистру "Учет продаж и себестоимости".
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
			СтруктураШапкиДокумента,
			ТаблицаПоТоварам
		);
	КонецЕсли;	
	
	ДатаДока = СтруктураШапкиДокумента.Дата;
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, Отказ, ТаблицаПоТоварам, ТаблицаПоТаре, , Ложь, истина, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН);
	ТаблицаДвижений = новый ТаблицаЗначений;
	Если ТаблицаПоТоварам.Количество()>0 и СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ТаблицаДвижений = ТаблицаПоТоварам.Скопировать();
		
		КоличествоСтрок = ТаблицаПоТоварам.Количество();
		Для ОбратныйИндекс = 1 по КоличествоСтрок Цикл
			СтрокаТД = ТаблицаДвижений[КоличествоСтрок - ОбратныйИндекс];
			Если ЗначениеЗаполнено(ТаблицаПоТоварам[КоличествоСтрок - ОбратныйИндекс].ДокументПартии) Тогда
				ТаблицаДвижений.Удалить(КоличествоСтрок - ОбратныйИндекс);
				Продолжить;
			КонецЕсли;
			Если ИспользуетсяРасширеннаяАналитикаУчетаЗатрат И СтрокаТД.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый Тогда
				ТаблицаДвижений.Удалить(КоличествоСтрок - ОбратныйИндекс);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(СтруктураШапкиДокумента, Отказ, ТаблицаДвижений, , , , , СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
		
		ДатаДока = Дата;
		
		СписыватьПартииБУ = глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух;
		Если СписыватьПартииБУ Тогда
			ТаблицаДляПроводок = ТаблицаДвижений;
		Иначе
			ТаблицаДляПроводок = ТаблицаПоТоварам.Скопировать(Новый Структура("ПринадлежностьНоменклатуры", Перечисления.ПринадлежностьНоменклатуры.ПустаяСсылка()));
		КонецЕсли;
			
		Для каждого СтрокаТаблицы из ТаблицаДляПроводок Цикл
			
			//Формирование проводки по взаиморасчетам
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период         = ДатаДока;
			Проводка.Организация    = СтруктураШапкиДокумента.Организация;
			Проводка.СписаниеПартий = ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии);
			Проводка.Содержание     = ?(НЕ Проводка.СписаниеПартий, "Возврат товаров от покупателя", "Возврат товаров (без распределения по партиям)");
			
			Проводка.Сумма  = - СтрокаТаблицы.ПроводкаСумма - СтрокаТаблицы.ПроводкаСуммаНДС; // Сумма выручки по бух. учету
			Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВзаиморасчетов;
			КонецЕсли;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			Проводка.СчетКт = СтрокаТаблицы.СчетДоходовБУ;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоБУ);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС" , СтрокаТаблицы.СтавкаНДС);
			
		КонецЦикла;
			
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если ИспользуетсяРасширеннаяАналитикаУчетаЗатрат Тогда
				//Проводку по выручке по НУ при использовании расширенной аналитики формируем документом Расчет себестоимости	
			Иначе	
				СписыватьПартииНУ = глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовНал;
				Если СписыватьПартииНУ Тогда
					ТаблицаДляПроводок = ТаблицаДвижений;
				Иначе
					ТаблицаДляПроводок = ТаблицаПоТоварам.Скопировать(Новый Структура("ПринадлежностьНоменклатуры", Перечисления.ПринадлежностьНоменклатуры.ПустаяСсылка()));
				КонецЕсли;
					
				Для каждого СтрокаТаблицы из ТаблицаДляПроводок Цикл
				
					Проводка = Движения.Налоговый.Добавить();
					Проводка.Период         = ДатаДока;
					Проводка.Организация    = СтруктураШапкиДокумента.Организация;
					Проводка.СписаниеПартий = ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии);
					Проводка.Содержание     = ?(НЕ Проводка.СписаниеПартий, "Возврат товаров от покупателя", "Возврат товаров (без распределения по партиям)");
					
					Проводка.Сумма  = - СтрокаТаблицы.ПроводкаСумма; // Сумма выручки по нал. учету
					Проводка.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
									
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					Проводка.СчетКт = СтрокаТаблицы.СчетДоходовНУ;
					Если Проводка.СчетКт.Количественный Тогда
						Проводка.КоличествоКт  = - СтрокаТаблицы.Количество;					
					КонецЕсли;	
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ?(ЗначениеЗаполнено(СтрокаТаблицы.СубконтоНУ), СтрокаТаблицы.СубконтоНУ, СтрокаТаблицы.СубконтоБУ));
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
	//если докоснование не выбрано старый алгоритм формирования проводок
	//
	Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОснование) Тогда
		УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(СтруктураШапкиДокумента, Отказ, , ТаблицаПоТаре, , , , СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
	КонецЕсли;	
	//конец изменений 

	// Движения по взаиморасчетам
	Если Товары.Количество() > 0 Тогда
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
			СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок, , ТаблицаПоВзаиморасчетам, СтруктураШапкиДокумента);
			Если СтруктураПараметровЗачетАванса = Ложь тогда
				Отказ       = Истина;
				СуммаАванса = 0;
			Иначе
				ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметровЗачетАванса, 
					ТаблицапоТоварам, СтруктураШапкиДокумента);
				СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса,
					Движения.Хозрасчетный, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации);
			КонецЕсли;
			
			Если не ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
					СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
				Конецесли;
				БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса,
					мВалютаРегламентированногоУчета, РежимПроведения, Движения.Хозрасчетный, ЭтотОбъект, Отказ, , Истина);
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
    Движения.Хозрасчетный.Записать(ложь);
	Движения.Налоговый.Записать(ложь);

	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Если ИспользуетсяРасширеннаяАналитикаУчетаЗатрат Тогда
			Если ТаблицаДляПроводок <> Неопределено И ТаблицаДляПроводок.Количество()>0 Тогда
				УправлениеЗапасамиРасширеннаяАналитика.ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДСРасширеннаяАналитика(СтруктураШапкиДокумента, ТаблицаДляПроводок, Отказ, Заголовок);
			КонецЕсли;
		Иначе // не ИспользуетсяРасширеннаяАналитикаУчетаЗатрат
			Если ТаблицаДвижений.Количество()>0  Тогда
				УчетНДСФормированиеДвижений.ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, , ТаблицаДвижений, Отказ, Заголовок, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,  "ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, 								"Подразделение");

	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, 								"ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента, 		"КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, 	"КратностьДокумента");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, 				"ОтражатьВУправленческомУчете");
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
		
		Строка.СуммаЗадолженности = СтрокаТЧ.СуммаСНДСДок;
		
	КонецЦикла;
	
	// Учет по проектам
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам, "ВедениеУчетаПоПроектам");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект, "Проект");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными для регл. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, 		"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
									   ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН, 	"ОтражатьВНалоговомУчете");

	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.СебестоимостьПродаж,    			"КорСчетНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, 												"Организация");
	
	Для Каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
		
		Строка.СуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДС+СтрокаТЧ.НДС;
		Строка.СуммаНДС = СтрокаТЧ.НДС;
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			Строка.КорСчетБУ				= СтрокаТЧ.СчетРасходовБУ;
			Строка.КорСчетЗадолженностиБУ	= СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			Строка.ДоговорКонтрагента  		= СтруктураШапкиДокумента.ДоговорКонтрагента;
			
			Строка.КорСубконтоБУ2			= СтрокаТЧ.СубконтоБУ;
			Строка.ПринятыеКорСчетБУ		= СтрокаТЧ.ПринятыеСчетУчетаБУ;
			
			Строка.КорСчетНУ				= СтрокаТЧ.СчетРасходовНУ;
			Строка.ПринятыеКорСчетНУ		= СтрокаТЧ.ПринятыеСчетУчетаНУ;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				Строка.СчетУчетаНУ			= Строка.СчетУчетаБУ;
				Строка.ПринятыеКорСчетНУ   	= Строка.ПринятыеКорСчетБУ;
			КонецЕсли;
			
			Строка.СуммаЗадолженностиБУ		= СтрокаТЧ.ПроводкаСумма+СтрокаТЧ.ПроводкаСуммаНДС;

			// Субконто кор.счета для начисления задолженности перед комитентом, если вдруг продадим комиссионный товар
			Строка.КорСубконтоЗадолженностиБУ1 = СтруктураШапкиДокумента.Контрагент;
			Строка.КорСубконтоЗадолженностиБУ2 = СтруктураШапкиДокумента.ДоговорКонтрагента;

			// Доход от продажи может облагаться ЕНВД (что определяется по бух. счету учета)
			Если ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ)
				И НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ) Тогда
				
				// в этом случае товар списывается на счет расходов по ЕНВД
				Строка.КорСчетНУ = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
				
			КонецЕсли;
			
			Если не СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				
				//// Для расчетов в у.е.
				Строка.КорВалютаЗадолженностиБУ        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Строка.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТЧ.СуммаВал;
				
			КонецЕсли;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Строка.СчетУчетаБУ      = СтрокаТЧ.ПереданныеСобственныеБУ;
			Строка.СчетУчетаНУ      = СтрокаТЧ.ПереданныеСобственныеНУ;
			Строка.КорСчетБУ      = СтрокаТЧ.СчетУчетаБУ;
			Строка.КорСчетНУ      = СтрокаТЧ.СчетУчетаНУ;
			Строка.КорСубконтоБУ2 = Контрагент;
			Строка.ПринятыеСчетУчетаБУ = СтрокаТЧ.ПереданныеПринятыеБУ;
			Строка.ПринятыеСчетУчетаНУ = СтрокаТЧ.ПереданныеПринятыеНУ;
			Строка.ПринятыеКорСчетБУ   = СтрокаТЧ.ПринятыеСчетУчетаБУ;
			Строка.ПринятыеКорСчетНУ   = СтрокаТЧ.ПринятыеСчетУчетаНУ;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				Строка.СчетУчетаНУ     		= Строка.СчетУчетаБУ;
				Строка.КорСчетНУ      		= Строка.КорСчетБУ;
				Строка.ПринятыеСчетУчетаНУ 	= Строка.ПринятыеСчетУчетаБУ;
				Строка.ПринятыеКорСчетНУ   	= Строка.ПринятыеКорСчетБУ;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл() 

// Формирование движений по регистру "Списанные товары".
//
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	ТаблицаПоТоварам.Колонки.КоличествоДок.Имя    = "Количество";
	ТаблицаПоТоварам.Колонки.ЗаказПокупателя.Имя  = "ЗаказСписания";

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
		УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам),
		ТаблицаДвижений,
		Истина);
	
	ТаблицаПоТоварам.Колонки.ЗаказСписания.Имя    = "ЗаказПокупателя";
	
	ТаблицаДвижений.ЗагрузитьКолонку(ТаблицаДвижений.ВыгрузитьКолонку("Склад"), 		 "СкладПолучатель");
	ТаблицаДвижений.ЗагрузитьКолонку(ТаблицаДвижений.ВыгрузитьКолонку("ДокументПартии"), "ДокументПередачи");
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Товары, "ВидТабличнойЧасти");

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя,   "КодОперацииПартииТоваров");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера, "КодОперацииПартииТоваров");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,      "СтатусПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,                   "ДоговорКонтрагента");
		
	КонецЕсли;
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений,  СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений(ТаблицаДвижений, "НомерСтрокиДокумента");
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если НЕ Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДокументОснование) Тогда //добавим движения по таре
		
		ТаблицаДвижений.Очистить();
		
		ТаблицаПоТаре.Колонки.КоличествоДок.Имя    = "Количество";
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
			ТаблицаПоТаре,
			ТаблицаДвижений,
			Истина);
		
		
		ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Тара, "ВидТабличнойЧасти");
		
		//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
		//ПОМЕНЯТЬ КОД ОПЕРАЦИИ
		//ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту,"КодОперацииПартииТоваров");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратТарыЗалогСтоимость,"КодОперацииПартииТоваров");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
		
		ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений(ТаблицаДвижений, "НомерСтрокиДокумента", ТаблицаПоТоварам.Количество() + 1);
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
		Если НЕ Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;
		
		ТаблицаПоТаре.Колонки.Количество.Имя    = "КоличествоДок";
		
	КонецЕсли;	
	
	//конец изменений 
	
	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураШапкиДокумента)

	СтруктураПолей.Вставить("СчетУчетаБУ"  ,  "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"  ,  "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетДоходовБУ",  "СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоБУ" ,    "СубконтоБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ",  "СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоНУ" ,    "СубконтоНУ");
	СтруктураПолей.Вставить("СчетРасходовБУ", "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетРасходовНУ", "СчетРасходовНУ");
	СтруктураПолей.Вставить("ПереданныеСобственныеБУ", "ПереданныеСобственныеБУ");
	СтруктураПолей.Вставить("ПереданныеСобственныеНУ", "ПереданныеСобственныеНУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ",     "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаНУ",     "ПринятыеСчетУчетаНУ");
	СтруктураПолей.Вставить("ПереданныеПринятыеБУ",    "ПереданныеПринятыеБУ");
	СтруктураПолей.Вставить("ПереданныеПринятыеНУ",    "ПереданныеПринятыеНУ");
	СтруктураПолей.Вставить("ОтражениеВУСН",  "ОтражениеВУСН");

	//Для определения счетов учета при проведении документов
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("СкладВидСклада"            , "ПриходныйОрдер.Склад.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("СкладВидСклада"            , "Склад.ВидСклада");
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураШапкиДокумента)

	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ", "СчетУчетаНУ");

	//Для определения счетов учета при проведении документов
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураПолей.Вставить("СкладВидСклада"            , "ПриходныйОрдер.Склад.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("СкладВидСклада"            , "Склад.ВидСклада");
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, СтруктураШапкиДокумента);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, СтруктураШапкиДокумента)

	Если Не (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		Или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;
		
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация,истина);
	Если Не ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	Иначе
		СтруктураШапкиДокумента.Вставить("НачислятьНДСПоОтгрузке", УчетнаяПолитикаРегл.НачислятьНДСПоОтгрузке);
		СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС", УчетнаяПолитикаРегл.МоментОпределенияНалоговойБазыНДС);
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

////////////////////////////////////////////////////
// Подготовка и проверка структуры шапки документа

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = неопределено,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
    СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"       , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"        , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                 , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                 , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчет");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"                , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом" , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"        , "ОтражатьВРегламентированномУчете");
	Если ТипЗнч(Сделка)<>Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                 , "СделкаВидОперации");
	КонецЕсли;
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
 	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "ВидСклада"                   , "ВидСклада");
	Иначе
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "Склад.ВидСклада"             , "ВидСклада");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер"      , "Склад"                       , "СкладПриходногоОрдера");
	КонецЕсли;
	
	//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументОснование"      , "Дата"             , "ДокументОснование_Дата");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументОснование"      , "СтатьяПрочихДоходовРасходовПоТаре" , "СтатьяПрочихДоходовРасходовПоТаре");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументОснование"      , "СчетУчетаДоходовПоТареБУ" , "СчетУчетаДоходовПоТареБУ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументОснование"      , "СчетУчетаДоходовПоТареНУ" , "СчетУчетаДоходовПоТареНУ");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументОснование"      , "СчетУчетаРасходовПоТареБУ" , "СчетУчетаРасходовПоТареБУ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументОснование"      , "СчетУчетаРасходовПоТареНУ" , "СчетУчетаРасходовПоТареНУ");
	//конец изменений 

	// Дополним полями, нужными для упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);
	
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат", Истина);
	
	Если ОтложенноеПроведениеДокументов.ИспользуетсяОтложенноеПроведение(СтруктураШапкиДокумента)
	  И ДополнительныеСвойства.Свойство("ЭтапПроведения") Тогда
    	СтруктураШапкиДокумента.Вставить("ДопроведениеДокумента", ДополнительныеСвойства.ЭтапПроведения = "Допроведение");
	КонецЕсли;	
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Дополняет полями, нужными для упр. учета
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, 
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");

	Если  Не СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("СкладОрдер");
	КонецЕсли;
	
	//{01.10.2015 Островерхий заявка №б/н 
	Если Дата >= '20151001' Тогда
	
		СтруктураОбязательныхПолей.Вставить("СкладОрдер");
		//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
		//СтруктураОбязательныхПолей.Вставить("Грузополучатель");
		//если возвращается возвратная тара исключим проверку грузополучателя
		Если Товары.Количество() <> 0  Тогда
			СтруктураОбязательныхПолей.Вставить("Грузополучатель");
		КонецЕсли;	
		//конец изменений 
		СтруктураОбязательныхПолей.Вставить("ДокументОснование");
	
	КонецЕсли;  
	//01.10.2015 Островерхий} 
	
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураШапкиДокумента, СтруктураОбязательныхПолей);
	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		И НЕ УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента,"ВозвратОтПокупателя") Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ покупателя""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по счетам""! 
		|Заполните поле ""Счет покупателю""!");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	// Оборудование нельзя вернуть по договору, взаиморасчеты по которому ведутся по заказам.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование
	   И (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ  СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Возврат оборудования не может производиться по договору с ведением взаиморасчетов """
		+  СокрЛП(СтруктураШапкиДокумента.ВедениеВзаиморасчетов)
		+ """.", Отказ, Заголовок);
	КонецЕсли;
	
	// В случае возврата товаров от розничного покупателя, когда в книге покупок регистрируются дата и номер РКО, должны быть заполнены оба реквизита
	Если (ЗначениеЗаполнено(НомерРасходногоКассовогоОрдера) И НЕ ЗначениеЗаполнено(ДатаРасходногоКассовогоОрдера))
		ИЛИ (НЕ ЗначениеЗаполнено(НомерРасходногоКассовогоОрдера) И ЗначениеЗаполнено(ДатаРасходногоКассовогоОрдера)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("При регистрации в книге покупок даты и номера расходно-кассового ордера должны быть заполнены и дата и номер.",
			Отказ, Заголовок);
	КонецЕсли;	
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураШапкиДокумента, СтруктураОбязательныхПолей)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансам");
			Если СтруктураШапкиДокумента.ОтразитьВКнигеПокупок И СтруктураШапкиДокумента.УчитыватьНДС Тогда
				СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
			КонецЕсли;
		КонецЕсли;
		Если ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейШапкиРегл()

// Подготовка и проверка структуры шапки документа
////////////////////////////////////////////////////

////////////////////////////////////////////////////
// Подготовка и проверка таблиц документа (кроме таблицы по таре)

// Процедура формирует таблицы документа, вляиющие на состояние расчетов с контрагентами.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"         , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Услуга"                       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                        , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                     , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ТипНоменклатуры"              , "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");
	СтруктураПолей.Вставить("КоличествоДок"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Цена"                         , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"             , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Сумма"                        , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                    , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                          , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"   , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"            , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"  , "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("ДокументПартии"               , "ДокументПартии");
	СтруктураПолей.Вставить("Себестоимость"                , "Себестоимость");
	СтруктураПолей.Вставить("Качество"                     , "Качество");
	СтруктураПолей.Вставить("КачествоНовое"                , "Качество");
	СтруктураПолей.Вставить("Склад"                        , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                    , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ДокументПолучения"            , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения", "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("БезПраваПродажи"              , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("КлючСтроки"                   , "КлючСтроки");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"                , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"         , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"         , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки" , "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента" , "Количество");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ВидОперацииЗаказаПокупателя"  , "ЗаказПокупателя.ВидОперации");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры"   , "ПринадлежностьНоменклатуры");
	//начало изменений Ожиганов 30.10.2015 возврат по документу продажи 
	СтруктураПолей.Вставить("ПРГ_СебестоимостьНЕРасчитывается"   , "ПРГ_СебестоимостьНЕРасчитывается");
	//конец изменений 
    //{28.11.2016 Островерхий заявка №57373 
	СтруктураПолей.Вставить("ПроцентДопИзмененияЦены"             , "ПЦ_ПроцентДопИзмененияЦены"); 
	//28.11.2016 Островерхий}
	
	// Дополним полями, нужными для регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	//Заполнение счетов учета номенклатуры
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	
	ПодготовитьТаблицуТоваровРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента);

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС"
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьПродажи",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	//начало изменений Ожиганов 30.10.2015 возврат по документу продажи 
	ТаблицаТоваров.Колонки.Добавить("УЗ_СуммаРегл",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("УЗ_СуммаНУ",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("УЗ_СуммаПР",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("УЗ_СуммаВР",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	//конец изменений 
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		//СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		//						  ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СтоимостьПродажи = СтрокаТаблицы.Сумма + 
										 ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
										 
		//начало изменений Ожиганов 30.10.2015 возврат по документу продажи 
		СтрокаТаблицы.УЗ_СуммаРегл = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) и СтрокаТаблицы.ПРГ_СебестоимостьНЕРасчитывается,СтрокаТаблицы.КоличествоДок * СтрокаТаблицы.Себестоимость,0);
		СтрокаТаблицы.УЗ_СуммаНУ   = СтрокаТаблицы.УЗ_СуммаРегл;
		//конец изменений 
										 
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки
	ТаблицаТоваров.Колонки.Добавить("МинусКоличество"     , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("МинусСебестоимость"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПлюсСебестоимость"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"        , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"              , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
    	
	//{01.10.2015 Островерхий заявка №б/н 
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидокВВалюте" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьВВалюте" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2))); 
	//01.10.2015 Островерхий} 

	//{28.11.2016 Островерхий заявка №57373 
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезДопСкидки" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("ВалютнаяСтоимостьБезДопСкидки" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2))); 
	//28.11.2016 Островерхий}
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
        Если ТипЗнч(СтрокаТаблицы.КоличествоДок)= Тип("Число") Тогда
			СтрокаТаблицы.МинусКоличество  = - СтрокаТаблицы.КоличествоДок;
		Иначе
			СтрокаТаблицы.МинусКоличество = 0;
			СтрокаТаблицы.КоличествоДок = 0;

		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьПродажи = СтрокаТаблицы.Сумма + 
		                                 ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);


		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
												УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;										 

		СтрокаТаблицы.СуммаВзаиморасчетов = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьПродажи, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, 
		                                 КратностьВзаиморасчетов);

		СтрокаТаблицы.СтоимостьБезСкидок  = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СтоимостьПродажи    = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьПродажи, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КурсДокумента,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КратностьДокумента,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
											 
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
											СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
											КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
											КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
											 
		СтрокаТаблицы.НДСУпр    = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КурсДокумента,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КратностьДокумента,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.ПлюсСебестоимость   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Себестоимость, мВалютаРегламентированногоУчета,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     1,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     1,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) * СтрокаТаблицы.КоличествоДок;
											 
		СтрокаТаблицы.МинусСебестоимость= - СтрокаТаблицы.ПлюсСебестоимость;

		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		//{01.10.2015 Островерхий заявка №б/н 
		СтрокаТаблицы.СтоимостьВВалюте = СтрокаТаблицы.СтоимостьПродажи; 
		СтрокаТаблицы.СтоимостьБезСкидокВВалюте = СтрокаТаблицы.СтоимостьБезСкидок;
		//01.10.2015 Островерхий}
		//начало изменений Ожиганов А. 02.05.2017 64980 изменение стоимости без скидок в случае если ручная и автоматическая скидка не предоставляется 
		Если  СтрокаТаблицы.ПроцентАвтоматическихСкидок = 0
			и  СтрокаТаблицы.ПроцентСкидкиНаценки = 0 Тогда
			СтрокаТаблицы.СтоимостьБезСкидок 		= СтрокаТаблицы.СтоимостьПродажи;
			СтрокаТаблицы.СтоимостьБезСкидокВВалюте = СтрокаТаблицы.СтоимостьВВалюте; 
			
		КонецЕсли;	
		//конец изменений 
		
		//{28.11.2016 Островерхий заявка №57373 
		Если СтрокаТаблицы.ПроцентДопИзмененияЦены <> 0 Тогда
			
			//{20.01.2017 Островерхий заявка №61339 
			//СтрокаТаблицы.СтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьПродажи / (1-СтрокаТаблицы.ПроцентДопИзмененияЦены/100);
			//СтрокаТаблицы.ВалютнаяСтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьВВалюте / (1-СтрокаТаблицы.ПроцентДопИзмененияЦены/100); 
			СтрокаТаблицы.СтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьБезСкидок / (1-СтрокаТаблицы.ПроцентДопИзмененияЦены/100);
			СтрокаТаблицы.ВалютнаяСтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьБезСкидокВВалюте / (1-СтрокаТаблицы.ПроцентДопИзмененияЦены/100);
			//20.01.2017 Островерхий} 
			
		Иначе
			
			//{20.01.2017 Островерхий заявка №61339 
			//СтрокаТаблицы.СтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьПродажи;
			//СтрокаТаблицы.ВалютнаяСтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьВВалюте; 
			СтрокаТаблицы.СтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьБезСкидок;
			СтрокаТаблицы.ВалютнаяСтоимостьБезДопСкидки = СтрокаТаблицы.СтоимостьБезСкидокВВалюте;
			//20.01.2017 Островерхий} 
			
		КонецЕсли;  
		//28.11.2016 Островерхий}
		
	КонецЦикла;

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
	                     ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада", "МинусКоличество");
	КонецЕсли;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Добавляет в таблицу колонки, необходимые для регл. проведения.
//
Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма"   ,     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаРегл",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("СуммаБезНДС")	, "ПроводкаСумма");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НДС")			, "ПроводкаСуммаНДС");
	
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту( СтрокаТаблицы.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
											мВалютаРегламентированногоУчета,
											КурсВзаиморасчетов, Данные.Курс,
											КратностьВзаиморасчетов,Данные.Кратность);                 
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Проверим заполнение автоматических скидок.
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		ПроцентНеЗаполнен   = НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПроцентАвтоматическихСкидок);
		УсловиеНеЗаполнено  = НЕ ЗначениеЗаполнено(СтрокаТаблицы.УсловиеАвтоматическойСкидки);
		ЗначениеНеЗаполнено = НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки);

		Если (ПроцентНеЗаполнен И УсловиеНеЗаполнено И ЗначениеНеЗаполнено)
		 Или Не(ПроцентНеЗаполнен Или УсловиеНеЗаполнено Или ЗначениеНеЗаполнено)Тогда // ошибок нет
		Иначе
			Если НЕ ПроцентНеЗаполнен
			   И  НЕ УсловиеНеЗаполнено
			   И  ТипЗнч(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки) = Тип("Число")
			   И  СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = 0 Тогда
				// Ошибок нет.
			Иначе
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки)
				                              + """ табличной части ""Товары"": ";
				Если ПроцентНеЗаполнен Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Процент автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				Если УсловиеНеЗаполнено Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Условие автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				Если ЗначениеНеЗаполнено Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Значение условия автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтразитьВКнигеПокупок 
			И Не ПокупателемВыставляетсяСчетФактураНаВозврат 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки)
										  + """ табличной части ""Товары"": ";
			СтрокаСообщения = "Не заполнено значение реквизита ""Документ партии""! Для автоматического отражения вычета в книге покупок по счету-фактуре реализации требуется указание документа партии.";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЦикла;

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Качество, Количество, Сумма");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента,"ВозвратОтПокупателя") Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	Иначе
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей);
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПокупателя", Отказ, Заголовок);

	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);

	// Проверка наличия продажных цен на приходуемый товар.
	УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ,
	                                                       Заголовок, "ВидСклада");

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров, ТаблицаПоТоварам,СтруктураШапкиДокумента) Экспорт

	СтруктураТаблицыДвижений = Новый Структура(
		"ВидЦенности, Номенклатура, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ, 
		|СтавкаНДС, СуммаБезНДС, НДС, СуммаВал,
		|СчетУчетаЦенности, КоррСубконто1, КоррСубконто2, КоррСубконто3,
		|СчетНДС, СубконтоНДС1, СубконтоНДС2, СубконтоНДС3,
		|СубконтоНУ1, СубконтоНУ2, СубконтоНУ3");
	
	ТаблицаДвижений = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам, СтруктураТаблицыДвижений, , Истина);
	
	СоответствиеНазваний = Новый Структура();
	СоответствиеНазваний.Вставить("СуммаБезНДС"	, "СуммаСНДС");
	СоответствиеНазваний.Вставить("НДС"			, "СуммаНДС");
	СоответствиеНазваний.Вставить("СуммаВал"	, "СуммаВзаиморасчетов");
	СоответствиеНазваний.Вставить("СчетДоходовБУ", "КоррСчет");
	СоответствиеНазваний.Вставить("СчетДоходовНУ", "СчетУчетаНУ");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, СоответствиеНазваний);
	СписокСубсчетов_91 = БухгалтерскийУчет.ПолучитьМассивСчетов("Хозрасчетный", "91");
	
	Для каждого Движение Из ТаблицаДвижений Цикл
		Движение.СуммаСНДС = Движение.СуммаСНДС + Движение.СуммаНДС;
		
		
		КоррСчет = Движение["КоррСчет"];
        ВидыСубконто = КоррСчет.ВидыСубконто;
		Для каждого ВидСубконто Из ВидыСубконто Цикл
			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Движение["СубконтоБУ"])) Тогда
				Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["СубконтоБУ"];
			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Движение["СтавкаНДС"])) Тогда
				Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["СтавкаНДС"];
			Конецесли;
		КонецЦикла; 

		СчетНДС = ?(СписокСубсчетов_91.НайтиПоЗначению(Движение.КоррСчет) = Неопределено, ПланыСчетов.Хозрасчетный.Продажи_НДС.Ссылка, Движение.СчетРасходовБУ);
		Движение.СчетНДС = СчетНДС;
		
        ВидыСубконто = СчетНДС.ВидыСубконто;
		Для каждого ВидСубконто Из ВидыСубконто Цикл
			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Движение["СубконтоБУ"])) Тогда
				Движение["СубконтоНДС"+ВидСубконто.НомерСтроки] = Движение["СубконтоБУ"];
			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Движение["СтавкаНДС"])) Тогда
				Движение["СубконтоНДС"+ВидСубконто.НомерСтроки] = Движение["СтавкаНДС"];
			Конецесли;
		КонецЦикла; 
		
		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
			СчетНУ = Движение["СчетУчетаНУ"];
	        ВидыСубконто = СчетНУ.ВидыСубконто;
			Для каждого ВидСубконто Из ВидыСубконто Цикл
				Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Движение["СубконтоНУ"])) Тогда
					Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["СубконтоНУ"];
				ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Движение["Номенклатура"])) Тогда
					Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["Номенклатура"];
				Конецесли;
			КонецЦикла; 
		КонецЕсли;
	
	КонецЦикла;
	
	ТаблицаДвижений.Колонки.Добавить("Сделка");
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	Иначе //.ПоСчетам или .ПоЗаказам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;

	Возврат ТаблицаДвижений;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И ТипОснования <> Тип("ДокументСсылка.ЗаказПокупателя")
		И ТипОснования <> Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		И ТипОснования <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		возврат;
	КонецЕсли;

	СчетаРеглИзОснования = Ложь;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ОтражатьВБухгалтерскомУчете = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете     = Основание.ОтражатьВНалоговомУчете;
		//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
		ДокументОснование = Основание;
		//конец изменений 

		ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		Проект         = Основание.Проект;

		Сделка = Основание.Сделка;

		Если Основание.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда 
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование;
			Если Основание.Проведен Тогда
				// Скопируем табличные части из документа основания.
				ЗаполнитьТоварыПоОснованию(Основание);
				СчетаРеглИзОснования = Истина;
				ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
			КонецЕсли;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
			Если Основание.Проведен Тогда
				Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					ЗаполнитьТоварыНереализованнымиУпр("ПоДокументу", Основание);
					ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
				Иначе
					// Скопируем табличные части из документа основания.
					ЗаполнитьТоварыПоОснованию(Основание);
					СчетаРеглИзОснования = Истина;
					ЗаполнитьВозвратнуюТаруПоОснованию(Основание);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;

		// Тип выбираемого значения зависит от договора.
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			Если ДоговорКОнтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				Сделка = Основание;
			Иначе
				Сделка = Основание.ЗаказПокупателя;
			КонецЕсли;
		Иначе
			Сделка = Основание;
		КонецЕсли;
		Если Сделка.Проведен ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

			// Заполним табличные части по заказу поставщику.
			ЗаполнитьТоварыПоОснованию(Основание);
			ЗаполнитьВозвратнуюТаруПоОснованию(Основание);

		КонецЕсли;

	КонецЕсли;

	ЗаполнитьДокументПоОснованиюУпр(Основание);

	Если (Товары.Количество() > 0) И (НЕ СчетаРеглИзОснования) Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;

	Если ВозвратнаяТара.Количество() > 0 Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");

	// Заполнить склад и ордер в табличных частях
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, Товары,         Не мУказаниеСкладовВТЧ);
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, ВозвратнаяТара, Не мУказаниеСкладовВТЧ);
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	//начало изменений Ожиганов 30.10.2015 возврат по документу продажи 
	Если ЗначениеЗаполнено(ДокументОснование)  Тогда
		СделкаСтрукт =  ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказаСложНПоля(ДокументОснование,Новый Структура("Сделка"));
		Если ЗначениеЗаполнено(СделкаСтрукт.Сделка) и ТипЗнч(СделкаСтрукт.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")  Тогда
			Сделка = СделкаСтрукт.Сделка;
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗначСделка = Сделка;
	Иначе
		ЗначСделка = Неопределено;
	КонецЕсли;
	
	УправлениеЗаказами.ЗаполнитьЗаказПокупателяВТЧ(ВидОперации,ЭтотОбъект, "ВозвратОтПокупателя");
	
	ВКнигеПокупокРегистрируетсяДатаНомер = 
		ЗначениеЗаполнено(НомерРасходногоКассовогоОрдера) И ЗначениеЗаполнено(ДатаРасходногоКассовогоОрдера);
	Если НЕ ОтразитьВКнигеПокупок ИЛИ НЕ ПокупателемВыставляетсяСчетФактураНаВозврат ИЛИ ВКнигеПокупокРегистрируетсяДатаНомер Тогда
		УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Истина);
	Иначе
		УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", ПометкаУдаления);
	КонецЕсли;	
		
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//начало изменений Ожиганов 29.10.2015 возврат по документу продажи
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		для Каждого ТекСтрока Из Товары Цикл
			ТекСтрока.ДокументПартии = ДокументОснование;
		КонецЦикла;	
	КонецЕсли;	
	
	//конец изменений 
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоУслугам;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ,Истина, РежимПроведения);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);

	// Подготовим таблицу скидок для проведения.
	ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("КоличествоДок"             , "Количество"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ВидСклада"                 , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Склад"                     , "Склад");
	СтруктураПолей.Вставить("ДокументПолучения"         , "ПриходныйОрдер");
	СтруктураПолей.Вставить("БезПраваПродажи"           , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");

	// Дополним полями, нужными для регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураСложныхПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	ПроводитьПоВзаиморасчетам = СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары", ТаблицаПоТоварам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);

	
	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента);//Таблица по таре не заполняется в ПодготовитьТаблицыДокумента()
	
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);

	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура());
	
	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;

	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,
		   ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаПоСкидкам, Отказ, Заголовок);
	КонецЕсли;

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтразитьВКнигеПокупок И ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
		УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	КонецЕсли;
	
КонецПроцедуры

//начало изменений 53363 формирование проводок при возрате тары по залоговой стоимости  
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,	"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,		"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,		"ДопустимыйСтатус3");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаДокумента, 		"ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента, 		"КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, 	"КратностьДокумента");
	
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Подразделение, 									"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВУправленческомУчете,						"ОтражатьВУправленческомУчете");
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТаре.Получить(Строка.НомерСтроки);
		
		Строка.ЗаказПартии = СтрокаТЧ.ЗаказПокупателя;
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, 				"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     				"ОтражатьВНалоговомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаДоходовПоТареБУ,					"СчетДоходовБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаДоходовПоТареНУ,					"СчетДоходовНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасходовПоТареБУ,				"СчетРасходовБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасходовПоТареНУ,				"СчетРасходовНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходовПоТаре,		"СтатьяДоходовИРасходов");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, 								"Организация");
	
	ПРГ_ПодразделениеОрганизации = ПРГ_Обработки.ПолучитьПодразделениеОрганизации(СтруктураШапкиДокумента.Подразделение); 
	ТаблицаДвижений.ЗаполнитьЗначения(ПРГ_ПодразделениеОрганизации, 								"ПодразделениеОрганизации");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, "КорСчетНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.УсловияПоступленияИВыбытияИмущества.Другие, 			"КорСубконтоНУ1");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре, 					"КорСчетБУ");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, 								"КорСубконтоБУ1");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, 						"КорСубконтоБУ2");
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТаре.Получить(Строка.НомерСтроки);
		
		Строка.СтоимостьПоступлениеБУ  = СтрокаТЧ.ПроводкаСумма;
		
		Строка.ДоговорКонтрагента  		= СтруктураШапкиДокумента.ДоговорКонтрагента;
		
		Если НЕ СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			
			Строка.КорВалютаЗадолженностиБУ        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Строка.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТЧ.СуммаВал;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 
//конец изменений 


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПокупателя");
мСтруктураПараметровВзаиморасчетов.Вставить("ЭтоВозврат", Истина);

УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

мУказаниеСкладовВТЧ    = (УказаниеСкладов     = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления)
                         Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);

мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
